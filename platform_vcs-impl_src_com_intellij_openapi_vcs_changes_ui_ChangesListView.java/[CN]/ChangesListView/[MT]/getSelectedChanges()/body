{
  Set<Change> changes=new LinkedHashSet<Change>();
  final TreePath[] paths=getSelectionPaths();
  if (paths == null) {
    return new Change[0];
  }
  for (  TreePath path : paths) {
    ChangesBrowserNode<?> node=(ChangesBrowserNode)path.getLastPathComponent();
    changes.addAll(node.getAllChangesUnder());
  }
  if (changes.isEmpty()) {
    final List<VirtualFile> selectedModifiedWithoutEditing=getSelectedModifiedWithoutEditing();
    if (selectedModifiedWithoutEditing != null && !selectedModifiedWithoutEditing.isEmpty()) {
      for (      VirtualFile file : selectedModifiedWithoutEditing) {
        AbstractVcs vcs=ProjectLevelVcsManager.getInstance(myProject).getVcsFor(file);
        if (vcs == null)         continue;
        final VcsCurrentRevisionProxy before=VcsCurrentRevisionProxy.create(file,myProject,vcs.getKeyInstanceMethod());
        if (before != null) {
          ContentRevision afterRevision=new CurrentContentRevision(new FilePathImpl(file));
          changes.add(new Change(before,afterRevision,FileStatus.HIJACKED));
        }
      }
    }
  }
  return changes.toArray(new Change[changes.size()]);
}
