{
  myDualView.setShowGrid(true);
  myDualView.getTreeView().addMouseListener(new PopupHandler(){
    public void invokePopup(    Component comp,    int x,    int y){
      ActionPopupMenu popupMenu=ActionManager.getInstance().createActionPopupMenu(ActionPlaces.UPDATE_POPUP,myPopupActions);
      popupMenu.getComponent().show(comp,x,y);
    }
  }
);
  myDualView.getFlatView().addMouseListener(new PopupHandler(){
    public void invokePopup(    Component comp,    int x,    int y){
      ActionPopupMenu popupMenu=ActionManager.getInstance().createActionPopupMenu(ActionPlaces.UPDATE_POPUP,myPopupActions);
      popupMenu.getComponent().show(comp,x,y);
    }
  }
);
  myDualView.requestFocus();
  myDualView.setSelectionInterval(0,0);
  myDualView.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      updateMessage();
    }
  }
);
  myDualView.setRootVisible(false);
  myDualView.expandAll();
  final TreeCellRenderer defaultCellRenderer=myDualView.getTree().getCellRenderer();
  myDualView.setTreeCellRenderer(new MyTreeCellRenderer(defaultCellRenderer,myHistorySession));
  myDualView.setCellWrapper(new MyCellWrapper(myHistorySession));
  TableViewModel sortableModel=myDualView.getFlatView().getTableViewModel();
  sortableModel.setSortable(true);
  if (null == null) {
    sortableModel.sortByColumn(0,SortableColumnModel.SORT_DESCENDING);
  }
 else {
    sortableModel.sortByColumn(getColumnIndex(null),SortableColumnModel.SORT_DESCENDING);
  }
}
