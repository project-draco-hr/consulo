{
  final File testsDir=new File(PathManagerEx.getTestDataPath() + "/ide/fileTemplates");
  final String includeTemplateName="include1.inc";
  final String includeTemplateExtension="txt";
  final String customIncludeFileName=includeTemplateName + "." + includeTemplateExtension;
  final File customInclude=new File(testsDir,customIncludeFileName);
  final String includeText=FileUtil.loadFile(customInclude,FileTemplate.ourEncoding);
  final FileTemplateManager templateManager=FileTemplateManager.getInstance();
  final ArrayList<FileTemplate> originalIncludes=new ArrayList<FileTemplate>(Arrays.asList(templateManager.getAllPatterns()));
  try {
    final List<FileTemplate> allIncludes=new ArrayList<FileTemplate>(originalIncludes);
    final CustomFileTemplate custom=new CustomFileTemplate(includeTemplateName,includeTemplateExtension);
    custom.setText(includeText);
    allIncludes.add(custom);
    templateManager.setTemplates(FileTemplateManager.INCLUDES_TEMPLATES_CATEGORY,allIncludes);
    final String txt=".txt";
    File[] children=testsDir.listFiles(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        return name.endsWith(".out" + txt);
      }
    }
);
    assertTrue(children.length > 0);
    for (    File resultFile : children) {
      String name=resultFile.getName();
      String base=name.substring(0,name.length() - txt.length() - ".out".length());
      File propFile=new File(resultFile.getParent(),base + ".prop" + txt);
      File inFile=new File(resultFile.getParent(),base + txt);
      String inputText=FileUtil.loadFile(inFile,FileTemplate.ourEncoding);
      String outputText=FileUtil.loadFile(resultFile,FileTemplate.ourEncoding);
      EncodingAwareProperties properties=new EncodingAwareProperties();
      properties.load(propFile,FileTemplate.ourEncoding);
      System.out.println(resultFile.getName());
      doTestTemplate(inputText,properties,outputText,resultFile.getParent());
    }
  }
  finally {
    templateManager.setTemplates(FileTemplateManager.INCLUDES_TEMPLATES_CATEGORY,originalIncludes);
  }
}
