{
  if (element instanceof PsiMethod) {
    final PsiMethod method=(PsiMethod)element;
    if (method.isConstructor()) {
      final PsiClass containingClass=method.getContainingClass();
      if (containingClass != null) {
        final String name=containingClass.getName();
        if (StringUtil.isNotEmpty(name)) {
          addLookupItems(set,null,matcher,element.getProject(),name);
        }
      }
      return;
    }
  }
  PsiClass ourClassParent=PsiTreeUtil.getParentOfType(element,PsiClass.class);
  if (ourClassParent == null)   return;
  if (ourClassParent.isAnnotationType() && matcher.prefixMatches(PsiAnnotation.DEFAULT_REFERENCED_METHOD_NAME)) {
    set.add(LookupElementBuilder.create(PsiAnnotation.DEFAULT_REFERENCED_METHOD_NAME).withIcon(PlatformIcons.METHOD_ICON).withTailText("()").withInsertHandler(ParenthesesInsertHandler.NO_PARAMETERS));
  }
  addLookupItems(set,null,matcher,element.getProject(),getUnresolvedReferences(ourClassParent,true));
  addLookupItems(set,null,matcher,element.getProject(),getPropertiesHandlersNames(ourClassParent,((PsiModifierListOwner)element).hasModifierProperty(PsiModifier.STATIC),PsiUtil.getTypeByPsiElement(element),element));
}
