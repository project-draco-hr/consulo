{
  FeatureUsageTracker.getInstance().triggerFeatureUsed("editing.completion.variable.name");
  Project project=var.getProject();
  JavaCodeStyleManager codeStyleManager=JavaCodeStyleManager.getInstance(project);
  final VariableKind variableKind=JavaCodeStyleManager.getInstance(project).getVariableKind(var);
  final String prefix=matcher.getPrefix();
  if (PsiType.VOID.equals(var.getType()) || psiField().inClass(psiClass().isInterface().andNot(psiClass().isAnnotationType())).accepts(var)) {
    completeVariableNameForRefactoring(project,set,matcher,var.getType(),variableKind,includeOverlapped,true);
    return;
  }
  SuggestedNameInfo suggestedNameInfo=codeStyleManager.suggestVariableName(variableKind,null,null,var.getType());
  final String[] suggestedNames=suggestedNameInfo.names;
  addLookupItems(set,suggestedNameInfo,matcher,project,suggestedNames);
  if (!hasStartMatches(set,matcher) && includeOverlapped) {
    final String requiredSuffix=codeStyleManager.getSuffixByVariableKind(variableKind);
    if (variableKind != VariableKind.STATIC_FINAL_FIELD) {
      for (int i=0; i < suggestedNames.length; i++)       suggestedNames[i]=codeStyleManager.variableNameToPropertyName(suggestedNames[i],variableKind);
    }
    addLookupItems(set,null,matcher,project,getOverlappedNameVersions(prefix,suggestedNames,requiredSuffix));
  }
  addLookupItems(set,suggestedNameInfo,matcher,project,getUnresolvedReferences(var.getParent(),false));
  PsiExpression initializer=var.getInitializer();
  PsiClass containingClass=var.getContainingClass();
  if (initializer != null && containingClass != null) {
    SuggestedNameInfo initializerSuggestions=InplaceIntroduceFieldPopup.suggestFieldName(var.getType(),null,initializer,var.hasModifierProperty(PsiModifier.STATIC),containingClass);
    addLookupItems(set,initializerSuggestions,matcher,project,initializerSuggestions.names);
  }
}
