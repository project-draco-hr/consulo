{
  final List<String> propertyHandlers=new ArrayList<String>();
  for (  final PsiField field : psiClass.getFields()) {
    if (field == element)     continue;
    PsiUtilCore.ensureValid(field);
    PsiType fieldType=field.getType();
    PsiUtil.ensureValidType(fieldType);
    final PsiModifierList modifierList=field.getModifierList();
    if (staticContext && (modifierList != null && !modifierList.hasModifierProperty(PsiModifier.STATIC)))     continue;
    if (fieldType.equals(varType)) {
      final String getterName=PropertyUtil.suggestGetterName(field);
      if ((psiClass.findMethodsByName(getterName,true).length == 0 || psiClass.findMethodBySignature(PropertyUtil.generateGetterPrototype(field),true) == null)) {
        propertyHandlers.add(getterName);
      }
    }
    if (PsiType.VOID.equals(varType)) {
      final String setterName=PropertyUtil.suggestSetterName(field);
      if ((psiClass.findMethodsByName(setterName,true).length == 0 || psiClass.findMethodBySignature(PropertyUtil.generateSetterPrototype(field),true) == null)) {
        propertyHandlers.add(setterName);
      }
    }
  }
  return ArrayUtil.toStringArray(propertyHandlers);
}
