{
  if (!CodeInsightSettings.getInstance().HIGHLIGHT_IDENTIFIER_UNDER_CARET) {
    return;
  }
  final HighlightUsagesHandlerBase handler=HighlightUsagesHandler.createCustomHandler(myEditor,myFile);
  if (handler != null) {
    final List targets=handler.getTargets();
    handler.computeUsages(targets);
    myReadAccessRanges.addAll(handler.getReadUsages());
    myWriteAccessRanges.addAll(handler.getWriteUsages());
    return;
  }
  final PsiElement myTarget=TargetElementUtilBase.getInstance().findTargetElement(myEditor,TargetElementUtilBase.ELEMENT_NAME_ACCEPTED | TargetElementUtilBase.REFERENCED_ELEMENT_ACCEPTED,myCaretOffset);
  if (myTarget != null) {
    final ReadWriteAccessDetector detector=ReadWriteAccessDetector.findDetector(myTarget);
    ReferencesSearch.search(myTarget,new LocalSearchScope(myFile)).forEach(new Processor<PsiReference>(){
      public boolean process(      final PsiReference psiReference){
        final TextRange textRange=HighlightUsagesHandler.getRangeToHighlight(psiReference);
        if (detector == null || detector.getReferenceAccess(myTarget,psiReference) == ReadWriteAccessDetector.Access.Read) {
          myReadAccessRanges.add(textRange);
        }
 else {
          myWriteAccessRanges.add(textRange);
        }
        return true;
      }
    }
);
    PsiElement identifier=HighlightUsagesHandler.getNameIdentifier(myTarget);
    if (identifier != null && PsiUtilBase.isUnderPsiRoot(myFile,identifier)) {
      if (detector != null && detector.isDeclarationWriteAccess(myTarget)) {
        myWriteAccessRanges.add(identifier.getTextRange());
      }
 else {
        myReadAccessRanges.add(identifier.getTextRange());
      }
    }
  }
}
