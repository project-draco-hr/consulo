{
  final List<SimpleTag> topLevelTagsCollector=new ArrayList<SimpleTag>();
  final String preloaderJar=packager.getPreloaderJar();
  final String preloaderClass=packager.getPreloaderClass();
  String preloaderFiles=null;
  String allButPreloader=null;
  if (!StringUtil.isEmptyOrSpaces(preloaderJar) && !StringUtil.isEmptyOrSpaces(preloaderClass)) {
    preloaderFiles=artifactName + "_preloader_files";
    topLevelTagsCollector.add(new SimpleTag("fx:fileset",new Pair<String,String>("id",preloaderFiles),new Pair<String,String>("requiredFor","preloader"),new Pair<String,String>("dir",tempDirPath),new Pair<String,String>("includes",preloaderJar)));
    allButPreloader="all_but_preloader_" + artifactName;
    topLevelTagsCollector.add(new SimpleTag("fx:fileset",new Pair<String,String>("id",allButPreloader),new Pair<String,String>("dir",tempDirPath),new Pair<String,String>("excludes",preloaderJar),new Pair<String,String>("includes","*.jar")));
  }
  final String allButSelf="all_but_" + artifactName;
  final SimpleTag allButSelfAndPreloader=new SimpleTag("fx:fileset",new Pair<String,String>("id",allButSelf),new Pair<String,String>("dir",tempDirPath),new Pair<String,String>("includes","*.jar"));
  allButSelfAndPreloader.add(new SimpleTag("exclude",new Pair<String,String>("name",artifactFileName)));
  if (preloaderJar != null) {
    allButSelfAndPreloader.add(new SimpleTag("exclude",new Pair<String,String>("name",preloaderJar)));
  }
  topLevelTagsCollector.add(allButSelfAndPreloader);
  final String appId=artifactName + "_id";
  Pair[] applicationParams={new Pair<String,String>("id",appId),new Pair<String,String>("name",artifactName),new Pair<String,String>("mainClass",packager.getAppClass())};
  if (preloaderFiles != null) {
    applicationParams=ArrayUtil.append(applicationParams,new Pair<String,String>("preloaderClass",preloaderClass));
  }
  final SimpleTag applicationTag=new SimpleTag("fx:application",applicationParams);
  appendValuesFromPropertiesFile(applicationTag,packager.getHtmlParamFile(),"fx:htmlParam",false);
  appendValuesFromPropertiesFile(applicationTag,packager.getParamFile(),"fx:param",true);
  topLevelTagsCollector.add(applicationTag);
  if (packager.convertCss2Bin()) {
    final SimpleTag css2binTag=new SimpleTag("fx:csstobin",new Pair<String,String>("outdir",tempDirPath));
    css2binTag.add(new SimpleTag("fileset",new Pair<String,String>("dir",tempDirPath),new Pair<String,String>("includes","**/*.css")));
    topLevelTagsCollector.add(css2binTag);
  }
  final SimpleTag createJarTag=new SimpleTag("fx:jar",new Pair<String,String>("destfile",tempDirPath + File.separator + artifactFileName));
  createJarTag.add(new SimpleTag("fx:application",new Pair<String,String>("refid",appId)));
  final List<Pair> fileset2Jar=new ArrayList<Pair>();
  fileset2Jar.add(new Pair<String,String>("dir",tempDirPath));
  fileset2Jar.add(new Pair<String,String>("excludes","*.jar"));
  createJarTag.add(new SimpleTag("fileset",fileset2Jar.toArray(new Pair[fileset2Jar.size()])));
  createJarTag.add(createResourcesTag(preloaderFiles,false,allButPreloader,allButSelf));
  topLevelTagsCollector.add(createJarTag);
  final SimpleTag deployTag=new SimpleTag("fx:deploy",new Pair<String,String>("width",packager.getWidth()),new Pair<String,String>("height",packager.getHeight()),new Pair<String,String>("updatemode",packager.getUpdateMode()),new Pair<String,String>("outdir",tempDirPath + File.separator + "deploy"),new Pair<String,String>("outfile",artifactName));
  deployTag.add(new SimpleTag("fx:application",new Pair<String,String>("refid",appId)));
  final List<Pair> infoPairs=new ArrayList<Pair>();
  appendIfNotEmpty(infoPairs,"title",packager.getTitle());
  appendIfNotEmpty(infoPairs,"vendor",packager.getVendor());
  appendIfNotEmpty(infoPairs,"description",packager.getDescription());
  if (!infoPairs.isEmpty()) {
    deployTag.add(new SimpleTag("fx:info",infoPairs.toArray(new Pair[infoPairs.size()])));
  }
  deployTag.add(createResourcesTag(preloaderFiles,true,allButPreloader,allButSelf));
  topLevelTagsCollector.add(deployTag);
  return topLevelTagsCollector;
}
