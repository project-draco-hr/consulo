{
  List<String> conflicts=new ArrayList<String>();
  final PsiClass existingClass=JavaPsiFacade.getInstance(myProject).findClass(myQualifiedName);
  if (myUseExistingClass) {
    if (existingClass == null) {
      conflicts.add(RefactorJBundle.message("could.not.find.selected.wrapping.class"));
    }
 else {
      boolean foundConstructor=false;
      final PsiMethod[] constructors=existingClass.getConstructors();
      for (      PsiMethod constructor : constructors) {
        final PsiParameter[] parameters=constructor.getParameterList().getParameters();
        if (parameters.length == 1) {
          final PsiParameter parameter=parameters[0];
          final PsiType parameterType=parameter.getType();
          if (TypeConversionUtil.isAssignable(parameterType,method.getReturnType())) {
            final PsiCodeBlock body=constructor.getBody();
            LOG.assertTrue(body != null);
            final boolean[] found=new boolean[1];
            body.accept(new JavaRecursiveElementVisitor(){
              @Override public void visitAssignmentExpression(              final PsiAssignmentExpression expression){
                super.visitAssignmentExpression(expression);
                final PsiExpression lExpression=expression.getLExpression();
                if (lExpression instanceof PsiReferenceExpression && ((PsiReferenceExpression)lExpression).resolve() == myDelegateField) {
                  final PsiExpression rExpression=expression.getRExpression();
                  if (rExpression instanceof PsiReferenceExpression && ((PsiReferenceExpression)rExpression).resolve() == parameter) {
                    found[0]=true;
                  }
                }
              }
            }
);
            if (found[0]) {
              foundConstructor=true;
              break;
            }
          }
        }
      }
      if (!foundConstructor) {
        conflicts.add("Existing class does not have appropriate constructor");
      }
    }
    if (unwrapMethodName.length() == 0) {
      conflicts.add("Existing class does not have getter for selected field");
    }
  }
 else {
    if (existingClass != null) {
      conflicts.add(RefactorJBundle.message("there.already.exists.a.class.with.the.selected.name"));
    }
  }
  return showConflicts(conflicts);
}
