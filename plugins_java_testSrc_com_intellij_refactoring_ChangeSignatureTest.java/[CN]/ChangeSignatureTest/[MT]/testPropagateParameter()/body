{
  String basePath="/refactoring/changeSignature/" + getTestName(false);
  @NonNls final String filePath=basePath + ".java";
  configureByFile(filePath);
  final PsiElement targetElement=TargetElementUtilBase.findTargetElement(getEditor(),TargetElementUtilBase.ELEMENT_NAME_ACCEPTED);
  assertTrue("<caret> is not on method name",targetElement instanceof PsiMethod);
  PsiMethod method=(PsiMethod)targetElement;
  final PsiClass containingClass=method.getContainingClass();
  assertTrue(containingClass != null);
  final PsiMethod[] callers=containingClass.findMethodsByName("caller",false);
  assertTrue(callers.length > 0);
  final PsiMethod caller=callers[0];
  final HashSet<PsiMethod> propagateParametersMethods=new HashSet<PsiMethod>();
  propagateParametersMethods.add(caller);
  final PsiParameter[] parameters=method.getParameterList().getParameters();
  new ChangeSignatureProcessor(getProject(),method,false,null,method.getName(),CanonicalTypes.createTypeWrapper(PsiType.VOID),new ParameterInfoImpl[]{new ParameterInfoImpl(0,parameters[0].getName(),parameters[0].getType()),new ParameterInfoImpl(-1,"b",PsiType.BOOLEAN,"true")},null,propagateParametersMethods,null).run();
  @NonNls String after=basePath + "_after.java";
  checkResultByFile(after);
}
