{
  final Project project=myModule.getProject();
  if (myModule.isDisposed() || project.isDisposed()) {
    return Collections.emptyList();
  }
  final GlobalSearchScope scope=GlobalSearchScope.allScope(myModule.getProject());
  final FileBasedIndex index=FileBasedIndex.getInstance();
  final Map<VirtualFile,Set<String>> file2ids=new HashMap<VirtualFile,Set<String>>();
  index.processValues(AndroidIdIndex.INDEX_ID,AndroidIdIndex.MARKER,null,new FileBasedIndex.ValueProcessor<Set<String>>(){
    @Override public boolean process(    VirtualFile file,    Set<String> value){
      file2ids.put(file,value);
      return true;
    }
  }
,scope);
  final Set<String> result=new HashSet<String>();
  for (  VirtualFile resSubdir : getResourceSubdirsToSearchIds()) {
    for (    VirtualFile resFile : resSubdir.getChildren()) {
      final Set<String> ids=file2ids.get(resFile);
      if (ids != null) {
        for (        String id : ids) {
          if (isResourcePublic(ResourceType.ID.getName(),id)) {
            result.add(id);
          }
        }
      }
    }
  }
  return result;
}
