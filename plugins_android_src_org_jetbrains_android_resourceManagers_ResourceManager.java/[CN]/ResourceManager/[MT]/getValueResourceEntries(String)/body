{
  final ResourceType type=ResourceType.getEnum(resourceType);
  if (type == null) {
    return Collections.emptyList();
  }
  final FileBasedIndex index=FileBasedIndex.getInstance();
  final ResourceEntry typeMarkerEntry=AndroidValueResourcesIndex.createTypeMarkerKey(resourceType);
  final GlobalSearchScope scope=GlobalSearchScope.allScope(myModule.getProject());
  final Map<VirtualFile,Set<ResourceEntry>> file2resourceSet=new HashMap<VirtualFile,Set<ResourceEntry>>();
  for (  Set<ResourceEntry> entrySet : index.getValues(AndroidValueResourcesIndex.INDEX_ID,typeMarkerEntry,scope)) {
    for (    ResourceEntry entry : entrySet) {
      final Collection<VirtualFile> files=index.getContainingFiles(AndroidValueResourcesIndex.INDEX_ID,AndroidValueResourcesIndex.createKey(entry),scope);
      for (      VirtualFile file : files) {
        Set<ResourceEntry> resourcesInFile=file2resourceSet.get(file);
        if (resourcesInFile == null) {
          resourcesInFile=new HashSet<ResourceEntry>();
          file2resourceSet.put(file,resourcesInFile);
        }
        resourcesInFile.add(entry);
      }
    }
  }
  final List<ResourceEntry> result=new ArrayList<ResourceEntry>();
  for (  VirtualFile file : getAllValueResourceFiles()) {
    final Set<ResourceEntry> entries=file2resourceSet.get(file);
    if (entries != null) {
      for (      ResourceEntry entry : entries) {
        if (isResourcePublic(entry.getType(),entry.getName())) {
          result.add(entry);
        }
      }
    }
  }
  return result;
}
