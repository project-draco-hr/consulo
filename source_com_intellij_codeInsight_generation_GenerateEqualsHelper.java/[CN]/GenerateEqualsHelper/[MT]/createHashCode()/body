{
  StringBuffer buffer=new StringBuffer();
  buffer.append("public int hashCode() {\n");
  if (!mySuperHasHashCode && myHashCodeFields.length == 1) {
    PsiField field=myHashCodeFields[0];
    final String tempName=addTempForOneField(field,buffer);
    buffer.append("return ");
    if (field.getType() instanceof PsiPrimitiveType) {
      addPrimitiveFieldHashCode(buffer,field,tempName);
    }
 else {
      addFieldHashCode(buffer,field);
    }
    buffer.append(";\n}");
  }
 else   if (myHashCodeFields.length > 0) {
    CodeStyleSettings settings=CodeStyleSettingsManager.getSettings(myCodeStyleManager.getProject());
    final String resultName=getUniqueLocalVarName(settings.LOCAL_VARIABLE_NAME_PREFIX + "result",myHashCodeFields);
    buffer.append("int ");
    buffer.append(resultName);
    boolean resultAssigned=false;
    if (mySuperHasHashCode) {
      buffer.append(" = ");
      addSuperHashCode(buffer);
      resultAssigned=true;
    }
    buffer.append(";\n");
    String tempName=addTempDeclaration(buffer);
    for (    PsiField field : myHashCodeFields) {
      addTempAssignment(field,buffer,tempName);
      buffer.append(resultName);
      buffer.append(" = ");
      if (resultAssigned) {
        buffer.append("29*");
        buffer.append(resultName);
        buffer.append(" + ");
      }
      if (field.getType() instanceof PsiPrimitiveType) {
        addPrimitiveFieldHashCode(buffer,field,tempName);
      }
 else {
        addFieldHashCode(buffer,field);
      }
      buffer.append(";\n");
      resultAssigned=true;
    }
    buffer.append("return ");
    buffer.append(resultName);
    buffer.append(";\n}");
  }
 else {
    buffer.append("return 0;\n}");
  }
  PsiMethod hashCode=myFactory.createMethodFromText(buffer.toString(),null);
  return (PsiMethod)myCodeStyleManager.reformat(hashCode);
}
