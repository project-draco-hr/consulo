{
  CodeStyleManager codeStyleManager=myCodeStyleManager;
  myObjectType=myFactory.createType(myJavaLangObject);
  String[] nameSuggestions=codeStyleManager.suggestVariableName(VariableKind.PARAMETER,null,null,myObjectType).names;
  final String objectBaseName=nameSuggestions.length > 0 ? nameSuggestions[0] : BASE_OBJECT_PARAMETER_NAME;
  myParameterName=getUniqueLocalVarName(objectBaseName,myEqualsFields);
  myClassType=myFactory.createType(myClass);
  nameSuggestions=codeStyleManager.suggestVariableName(VariableKind.LOCAL_VARIABLE,null,null,myClassType).names;
  String instanceBaseName=nameSuggestions.length > 0 ? nameSuggestions[0] : BASE_OBJECT_PARAMETER_NAME;
  if (instanceBaseName.equals(objectBaseName)) {
    instanceBaseName="instance";
  }
  myClassInstanceName=getUniqueLocalVarName(instanceBaseName,myEqualsFields);
  StringBuffer buffer=new StringBuffer();
  buffer.append("public boolean equals(Object " + myParameterName + ") {\n");
  addEqualsPrologue(buffer);
  if (myEqualsFields.length > 0) {
    addClassInstance(buffer);
    ArrayList equalsFields=new ArrayList();
    for (int i=0; i < myEqualsFields.length; i++) {
      equalsFields.add(myEqualsFields[i]);
    }
    Collections.sort(equalsFields,EqualsFieldsComparator.INSTANCE);
    for (Iterator iterator=equalsFields.iterator(); iterator.hasNext(); ) {
      PsiField field=(PsiField)iterator.next();
      if (!field.hasModifierProperty(PsiModifier.STATIC)) {
        final PsiType type=field.getType();
        if (type instanceof PsiArrayType) {
          addArrayEquals(buffer,field);
        }
 else         if (type instanceof PsiPrimitiveType) {
          if (type == PsiType.DOUBLE || type == PsiType.FLOAT) {
            addDoubleFieldComparison(buffer,field);
          }
 else {
            addPrimitiveFieldComparison(buffer,field);
          }
        }
 else {
          addFieldComparison(buffer,field);
        }
      }
    }
  }
  buffer.append("\nreturn true;\n}");
  PsiMethod result=myFactory.createMethodFromText(buffer.toString(),null);
  PsiMethod method=(PsiMethod)myCodeStyleManager.reformat(result);
  method=(PsiMethod)myCodeStyleManager.shortenClassReferences(method);
  return method;
}
