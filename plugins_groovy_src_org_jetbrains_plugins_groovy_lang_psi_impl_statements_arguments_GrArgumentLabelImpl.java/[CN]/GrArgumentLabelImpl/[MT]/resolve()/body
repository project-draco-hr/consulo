{
  String propName=getText();
  String setterName=PropertyUtil.suggestSetterName(propName);
  PsiElement context=getParent().getParent();
  if (context instanceof GrArgumentList) {
    final PsiElement parent=context.getParent();
    if (parent instanceof GrCallExpression) {
      final PsiMethod resolvedMethod=((GrCallExpression)parent).resolveMethod();
      if (resolvedMethod != null) {
        final PsiParameter[] parameters=resolvedMethod.getParameterList().getParameters();
        if (parameters.length > 0) {
          if (InheritanceUtil.isInheritor(parameters[0].getType(),CommonClassNames.JAVA_UTIL_MAP)) {
            return null;
          }
        }
      }
    }
    if (parent instanceof GrExpression || parent instanceof GrAnonymousClassDefinition) {
      PsiType type=parent instanceof GrExpression ? ((GrExpression)parent).getType() : ((GrAnonymousClassDefinition)parent).getBaseClassType();
      if (type instanceof PsiClassType) {
        PsiClass clazz=((PsiClassType)type).resolve();
        if (clazz != null) {
          PsiMethod[] byName=clazz.findMethodsByName(setterName,true);
          if (byName.length > 0)           return byName[0];
          final PsiField field=clazz.findFieldByName(propName,true);
          if (field != null)           return field;
          final PropertyResolverProcessor processor=new PropertyResolverProcessor(propName,this);
          ResolveUtil.processNonCodeMethods(JavaPsiFacade.getElementFactory(getProject()).createType(clazz),processor,this,false);
          final GroovyResolveResult[] candidates=processor.getCandidates();
          if (candidates.length == 0)           return null;
          return candidates[0].getElement();
        }
      }
    }
  }
  return null;
}
