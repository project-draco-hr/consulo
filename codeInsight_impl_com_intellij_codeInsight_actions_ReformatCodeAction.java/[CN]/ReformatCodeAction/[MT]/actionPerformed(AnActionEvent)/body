{
  DataContext dataContext=event.getDataContext();
  final Project project=(Project)dataContext.getData(DataConstants.PROJECT);
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  final Editor editor=(Editor)dataContext.getData(DataConstants.EDITOR);
  final VirtualFile[] files=(VirtualFile[])dataContext.getData(DataConstantsEx.VIRTUAL_FILE_ARRAY);
  PsiFile file=null;
  final PsiDirectory dir;
  boolean hasSelection=false;
  if (editor != null) {
    file=PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument());
    if (file == null)     return;
    dir=file.getContainingDirectory();
    hasSelection=editor.getSelectionModel().hasSelection();
  }
 else   if (areFiles(files)) {
    final ReadonlyStatusHandler.OperationStatus operationStatus=ReadonlyStatusHandler.getInstance(project).ensureFilesWritable(files);
    if (!operationStatus.hasReadonlyFiles()) {
      final ReformatFilesDialog reformatFilesDialog=new ReformatFilesDialog(project);
      reformatFilesDialog.show();
      if (reformatFilesDialog.optimizeImports()) {
        new ReformatAndOptimizeImportsProcessor(project,convertToPsiFiles(files,project)).run();
      }
 else {
        new ReformatCodeProcessor(project,convertToPsiFiles(files,project),null).run();
      }
    }
    return;
  }
 else {
    Project projectContext=(Project)dataContext.getData(DataConstantsEx.PROJECT_CONTEXT);
    Module moduleContext=(Module)dataContext.getData(DataConstantsEx.MODULE_CONTEXT);
    if (projectContext != null || moduleContext != null) {
      final String text;
      if (moduleContext != null) {
        text=CodeInsightBundle.message("process.scope.module",moduleContext.getModuleFilePath());
      }
 else {
        text=CodeInsightBundle.message("process.scope.project",projectContext.getPresentableUrl());
      }
      LayoutProjectCodeDialog dialog=new LayoutProjectCodeDialog(project,CodeInsightBundle.message("process.reformat.code"),text,true);
      dialog.show();
      if (!dialog.isOK())       return;
      if (dialog.isOptimizeImports()) {
        if (moduleContext != null) {
          new ReformatAndOptimizeImportsProcessor(project,moduleContext).run();
        }
 else {
          new ReformatAndOptimizeImportsProcessor(projectContext).run();
        }
      }
 else {
        if (moduleContext != null) {
          new ReformatCodeProcessor(project,moduleContext).run();
        }
 else {
          new ReformatCodeProcessor(projectContext).run();
        }
      }
      return;
    }
    PsiElement element=(PsiElement)dataContext.getData(DataConstants.PSI_ELEMENT);
    if (element == null)     return;
    if (element instanceof PsiPackage) {
      dir=((PsiPackage)element).getDirectories()[0];
    }
 else     if (element instanceof PsiDirectory) {
      dir=(PsiDirectory)element;
    }
 else {
      file=element.getContainingFile();
      if (file == null)       return;
      dir=file.getContainingDirectory();
    }
  }
  final LayoutCodeDialog dialog=new LayoutCodeDialog(project,CodeInsightBundle.message("process.reformat.code"),file,dir,hasSelection ? Boolean.TRUE : Boolean.FALSE,HELP_ID);
  dialog.show();
  if (!dialog.isOK())   return;
  final boolean optimizeImports=dialog.isOptimizeImports();
  if (dialog.isProcessDirectory()) {
    if (optimizeImports) {
      new ReformatAndOptimizeImportsProcessor(project,dir,dialog.isIncludeSubdirectories()).run();
    }
 else {
      new ReformatCodeProcessor(project,dir,dialog.isIncludeSubdirectories()).run();
    }
  }
 else {
    final TextRange range;
    if (editor != null && dialog.isProcessSelectedText()) {
      range=new TextRange(editor.getSelectionModel().getSelectionStart(),editor.getSelectionModel().getSelectionEnd());
    }
 else {
      range=null;
    }
    if (optimizeImports && range == null) {
      new ReformatAndOptimizeImportsProcessor(project,file).run();
    }
 else {
      new ReformatCodeProcessor(project,file,range).run();
    }
  }
}
