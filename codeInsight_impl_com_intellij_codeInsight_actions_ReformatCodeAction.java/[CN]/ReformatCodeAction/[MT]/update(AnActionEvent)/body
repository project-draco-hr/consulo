{
  Presentation presentation=event.getPresentation();
  DataContext dataContext=event.getDataContext();
  Project project=(Project)dataContext.getData(DataConstants.PROJECT);
  if (project == null) {
    presentation.setEnabled(false);
    return;
  }
  Editor editor=(Editor)dataContext.getData(DataConstants.EDITOR);
  final VirtualFile[] files=(VirtualFile[])dataContext.getData(DataConstantsEx.VIRTUAL_FILE_ARRAY);
  if (editor != null) {
    PsiFile file=PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument());
    if (file == null || file.getVirtualFile() == null) {
      presentation.setEnabled(false);
      return;
    }
    if (file.getLanguage().getEffectiveFormattingModelBuilder(file) != null) {
      presentation.setEnabled(true);
      return;
    }
  }
 else   if (files != null && areFiles(files)) {
    for (    VirtualFile virtualFile : files) {
      if (virtualFile.isDirectory()) {
        presentation.setEnabled(false);
        return;
      }
      final PsiFile psiFile=PsiManager.getInstance(project).findFile(virtualFile);
      if (psiFile == null) {
        presentation.setEnabled(false);
        return;
      }
      final FormattingModelBuilder builder=psiFile.getLanguage().getEffectiveFormattingModelBuilder(psiFile);
      if (builder == null) {
        presentation.setEnabled(false);
        return;
      }
    }
  }
 else   if (files != null && files.length == 1) {
  }
 else   if (dataContext.getData(DataConstantsEx.MODULE_CONTEXT) == null && dataContext.getData(DataConstantsEx.PROJECT_CONTEXT) == null) {
    PsiElement element=(PsiElement)dataContext.getData(DataConstants.PSI_ELEMENT);
    if (element == null) {
      presentation.setEnabled(false);
      return;
    }
    if (!(element instanceof PsiDirectory)) {
      PsiFile file=element.getContainingFile();
      if (file == null || (!(file instanceof PsiJavaFile) && !(file instanceof XmlFile))) {
        presentation.setEnabled(false);
        return;
      }
    }
  }
  presentation.setEnabled(true);
}
