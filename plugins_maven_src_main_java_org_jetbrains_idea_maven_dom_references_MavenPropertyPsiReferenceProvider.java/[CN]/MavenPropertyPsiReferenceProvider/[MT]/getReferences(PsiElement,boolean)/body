{
  TextRange textRange=ElementManipulators.getValueTextRange(element);
  if (textRange.isEmpty())   return PsiReference.EMPTY_ARRAY;
  String text=element.getText();
  if (StringUtil.isEmptyOrSpaces(text))   return PsiReference.EMPTY_ARRAY;
  if (!isElementCanContainReference(element))   return PsiReference.EMPTY_ARRAY;
  MavenProject mavenProject=null;
  List<PsiReference> result=null;
  Matcher matcher=MavenPropertyResolver.PATTERN.matcher(textRange.substring(text));
  while (matcher.find()) {
    String propertyName=matcher.group(1);
    int from;
    if (propertyName == null) {
      propertyName=matcher.group(2);
      from=matcher.start(2);
    }
 else {
      from=matcher.start(1);
    }
    TextRange range=TextRange.from(textRange.getStartOffset() + from,propertyName.length());
    if (result == null) {
      result=new ArrayList<PsiReference>();
      mavenProject=findMavenProject(element);
      if (mavenProject == null) {
        return PsiReference.EMPTY_ARRAY;
      }
    }
    result.add(new MavenPropertyPsiReference(mavenProject,element,propertyName,range,isSoft));
  }
  return result == null ? PsiReference.EMPTY_ARRAY : result.toArray(new PsiReference[result.size()]);
}
