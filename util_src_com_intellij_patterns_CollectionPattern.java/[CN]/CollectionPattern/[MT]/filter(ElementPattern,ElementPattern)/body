{
  return with(new PatternCondition<Collection<T>>(){
    public boolean accepts(    @NotNull final Collection<T> collection,    final MatchingContext matchingContext,    @NotNull final TraverseContext traverseContext){
      List<T> filtered=new ArrayList<T>();
      for (      final T t : collection) {
        if (elementPattern.accepts(t,matchingContext,traverseContext)) {
          filtered.add(t);
        }
      }
      return continuationPattern.accepts(filtered,matchingContext,traverseContext);
    }
  }
);
}
