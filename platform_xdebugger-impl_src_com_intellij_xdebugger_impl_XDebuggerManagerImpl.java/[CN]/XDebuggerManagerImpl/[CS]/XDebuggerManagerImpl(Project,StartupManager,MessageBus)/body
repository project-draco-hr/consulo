{
  myProject=project;
  myBreakpointManager=new XBreakpointManagerImpl(project,this,startupManager);
  mySessionData=new HashMap<RunContentDescriptor,XDebugSessionData>();
  mySessions=new LinkedHashMap<ProcessHandler,XDebugSessionImpl>();
  myExecutionPointHighlighter=new ExecutionPointHighlighter(project);
  messageBus.connect().subscribe(FileEditorManagerListener.FILE_EDITOR_MANAGER,new FileEditorManagerAdapter(){
    @Override public void fileOpened(    final FileEditorManager source,    final VirtualFile file){
      if (file instanceof HttpVirtualFile && file.equals(myExecutionPointHighlighter.getCurrentFile())) {
        myExecutionPointHighlighter.update();
      }
    }
  }
);
  myBreakpointManager.addBreakpointListener(new XBreakpointAdapter<XBreakpoint<?>>(){
    @Override public void breakpointChanged(    @NotNull XBreakpoint<?> breakpoint){
      if (!(breakpoint instanceof XLineBreakpoint)) {
        final XDebugSessionImpl session=getCurrentSession();
        if (session != null && breakpoint.equals(session.getActiveNonLineBreakpoint())) {
          final XBreakpointBase breakpointBase=(XBreakpointBase)breakpoint;
          breakpointBase.clearIcon();
          myExecutionPointHighlighter.updateGutterIcon(breakpointBase.createGutterIconRenderer());
        }
      }
    }
  }
);
  messageBus.connect().subscribe(RunContentManagerImpl.RUN_CONTENT_TOPIC,new RunContentWithExecutorListener(){
    @Override public void contentSelected(    RunContentDescriptor descriptor,    @NotNull Executor executor){
      if (executor.equals(DefaultDebugExecutor.getDebugExecutorInstance())) {
        final XDebugSessionImpl session=mySessions.get(descriptor.getProcessHandler());
        if (session != null) {
          session.activateSession();
        }
 else {
          setActiveSession(null,null,false,null);
        }
      }
    }
    @Override public void contentRemoved(    RunContentDescriptor descriptor,    @NotNull Executor executor){
      if (executor.equals(DefaultDebugExecutor.getDebugExecutorInstance())) {
        mySessionData.remove(descriptor);
        XDebugSessionImpl session=mySessions.remove(descriptor.getProcessHandler());
        if (session != null) {
          Disposer.dispose(session.getSessionTab());
        }
      }
    }
  }
);
}
