{
  if (adjustElements == null) {
    for (    PsiElement element : elements) {
      if (!(element instanceof PsiFile) && !(element instanceof PsiDirectory)) {
        throw new IllegalArgumentException("unexpected element type: " + element);
      }
    }
  }
  final PsiDirectory targetDirectory=resolveToDirectory(project,targetElement[0]);
  if (targetElement[0] != null && targetDirectory == null)   return;
  final PsiElement[] newElements=adjustElements != null ? adjustElements.fun(elements) : elements;
  final PsiDirectory initialTargetDirectory=getInitialTargetDirectory(targetDirectory,elements);
  final MoveFilesOrDirectoriesDialog.Callback doRun=new MoveFilesOrDirectoriesDialog.Callback(){
    public void run(    final MoveFilesOrDirectoriesDialog moveDialog){
      CommandProcessor.getInstance().executeCommand(project,new Runnable(){
        @Override public void run(){
          final PsiDirectory targetDirectory=moveDialog != null ? moveDialog.getTargetDirectory() : initialTargetDirectory;
          LOG.assertTrue(targetDirectory != null);
          targetElement[0]=targetDirectory;
          PsiManager manager=PsiManager.getInstance(project);
          try {
            final int[] choice=elements.length > 1 ? new int[]{-1} : null;
            final List<PsiElement> els=new ArrayList<PsiElement>();
            for (int i=0, newElementsLength=newElements.length; i < newElementsLength; i++) {
              final PsiElement psiElement=newElements[i];
              if (psiElement instanceof PsiFile) {
                final PsiFile file=(PsiFile)psiElement;
                final boolean fileExist=ApplicationManager.getApplication().runWriteAction(new Computable<Boolean>(){
                  @Override public Boolean compute(){
                    return CopyFilesOrDirectoriesHandler.checkFileExist(targetDirectory,choice,file,file.getName());
                  }
                }
);
                if (fileExist)                 continue;
              }
              manager.checkMove(psiElement,targetDirectory);
              els.add(psiElement);
            }
            final Runnable callback=new Runnable(){
              public void run(){
                if (moveDialog != null)                 moveDialog.close(DialogWrapper.CANCEL_EXIT_CODE);
              }
            }
;
            if (els.isEmpty()) {
              callback.run();
              return;
            }
            new MoveFilesOrDirectoriesProcessor(project,els.toArray(new PsiElement[els.size()]),targetDirectory,RefactoringSettings.getInstance().MOVE_SEARCH_FOR_REFERENCES_FOR_FILE,false,false,moveCallback,callback).run();
          }
 catch (          IncorrectOperationException e) {
            CommonRefactoringUtil.showErrorMessage(RefactoringBundle.message("error.title"),e.getMessage(),"refactoring.moveFile",project);
          }
        }
      }
,MoveHandler.REFACTORING_NAME,null);
    }
  }
;
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    doRun.run(null);
  }
 else {
    final MoveFilesOrDirectoriesDialog moveDialog=new MoveFilesOrDirectoriesDialog(project,doRun);
    moveDialog.setData(newElements,initialTargetDirectory,"refactoring.moveFile");
    moveDialog.show();
  }
}
