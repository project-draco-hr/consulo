def _parse(ui, args):
    options = {}
    cmdoptions = {}
    try:
        args = fancyopts.fancyopts(args, commands.globalopts, options)
    except fancyopts.getopt.GetoptError as inst:
        raise error.ParseError(None, inst)
    if args:
        (cmd, args) = (args[0], args[1:])
        (aliases, entry) = cmdutil.findcmd(cmd, commands.table, ui.config('ui', 'strict'))
        cmd = aliases[0]
        args = (aliasargs(entry[0]) + args)
        defaults = ui.config('defaults', cmd)
        if defaults:
            args = (map(util.expandpath, shlex.split(defaults)) + args)
        c = list(entry[1])
    else:
        cmd = None
        c = []
    for o in commands.globalopts:
        c.append((o[0], o[1], options[o[1]], o[3]))
    try:
        args = fancyopts.fancyopts(args, c, cmdoptions, True)
    except fancyopts.getopt.GetoptError as inst:
        raise error.ParseError(cmd, inst)
    for o in commands.globalopts:
        n = o[1]
        options[n] = cmdoptions[n]
        del cmdoptions[n]
    return (cmd, ((cmd and entry[0]) or None), args, options, cmdoptions)
