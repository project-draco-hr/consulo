def _runcatch(ui, args):

    def catchterm(*args):
        raise error.SignalInterrupt
    try:
        for name in ('SIGBREAK', 'SIGHUP', 'SIGTERM'):
            num = getattr(signal, name, None)
            if num:
                signal.signal(num, catchterm)
    except ValueError:
        pass
    try:
        try:
            if ('--debugger' in args):
                pdb.set_trace()
            try:
                return _dispatch(ui, args)
            finally:
                ui.flush()
        except:
            if ('--debugger' in args):
                pdb.post_mortem(sys.exc_info()[2])
            ui.traceback()
            raise
    except error.AmbiguousCommand as inst:
        ui.warn((_("hg: command '%s' is ambiguous:\n    %s\n") % (inst.args[0], ' '.join(inst.args[1]))))
    except error.ConfigError as inst:
        ui.warn((_('hg: %s\n') % inst.args[0]))
    except error.LockHeld as inst:
        if (inst.errno == errno.ETIMEDOUT):
            reason = (_('timed out waiting for lock held by %s') % inst.locker)
        else:
            reason = (_('lock held by %s') % inst.locker)
        ui.warn((_('abort: %s: %s\n') % ((inst.desc or inst.filename), reason)))
    except error.LockUnavailable as inst:
        ui.warn((_('abort: could not lock %s: %s\n') % ((inst.desc or inst.filename), inst.strerror)))
    except error.ParseError as inst:
        if inst.args[0]:
            ui.warn((_('hg %s: %s\n') % (inst.args[0], inst.args[1])))
            commands.help_(ui, inst.args[0])
        else:
            ui.warn((_('hg: %s\n') % inst.args[1]))
            commands.help_(ui, 'shortlist')
    except error.RepoError as inst:
        ui.warn((_('abort: %s!\n') % inst))
    except error.ResponseError as inst:
        ui.warn((_('abort: %s') % inst.args[0]))
        if (not isinstance(inst.args[1], basestring)):
            ui.warn((' %r\n' % (inst.args[1],)))
        elif (not inst.args[1]):
            ui.warn(_(' empty string\n'))
        else:
            ui.warn(('\n%r\n' % util.ellipsis(inst.args[1])))
    except error.RevlogError as inst:
        ui.warn((_('abort: %s!\n') % inst))
    except error.SignalInterrupt:
        ui.warn(_('killed!\n'))
    except error.UnknownCommand as inst:
        ui.warn((_("hg: unknown command '%s'\n") % inst.args[0]))
        try:
            commands.help_(ui, inst.args[0], unknowncmd=True)
        except error.UnknownCommand:
            commands.help_(ui, 'shortlist')
    except util.Abort as inst:
        ui.warn((_('abort: %s\n') % inst))
    except ImportError as inst:
        ui.warn((_('abort: %s!\n') % inst))
        m = str(inst).split()[(-1)]
        if (m in 'mpatch bdiff'.split()):
            ui.warn(_('(did you forget to compile extensions?)\n'))
        elif (m in 'zlib'.split()):
            ui.warn(_('(is your Python install correct?)\n'))
    except IOError as inst:
        if hasattr(inst, 'code'):
            ui.warn((_('abort: %s\n') % inst))
        elif hasattr(inst, 'reason'):
            try:
                reason = inst.reason.args[1]
            except:
                reason = inst.reason
            ui.warn((_('abort: error: %s\n') % reason))
        elif (hasattr(inst, 'args') and (inst.args[0] == errno.EPIPE)):
            if ui.debugflag:
                ui.warn(_('broken pipe\n'))
        elif getattr(inst, 'strerror', None):
            if getattr(inst, 'filename', None):
                ui.warn((_('abort: %s: %s\n') % (inst.strerror, inst.filename)))
            else:
                ui.warn((_('abort: %s\n') % inst.strerror))
        else:
            raise
    except OSError as inst:
        if getattr(inst, 'filename', None):
            ui.warn((_('abort: %s: %s\n') % (inst.strerror, inst.filename)))
        else:
            ui.warn((_('abort: %s\n') % inst.strerror))
    except KeyboardInterrupt:
        try:
            ui.warn(_('interrupted!\n'))
        except IOError as inst:
            if (inst.errno == errno.EPIPE):
                if ui.debugflag:
                    ui.warn(_('\nbroken pipe\n'))
            else:
                raise
    except MemoryError:
        ui.warn(_('abort: out of memory\n'))
    except SystemExit as inst:
        return inst.code
    except socket.error as inst:
        ui.warn((_('abort: %s\n') % inst.args[(-1)]))
    except:
        ui.warn(_('** unknown exception encountered, details follow\n'))
        ui.warn(_('** report bug details to http://mercurial.selenic.com/bts/\n'))
        ui.warn(_('** or mercurial@selenic.com\n'))
        ui.warn((_('** Mercurial Distributed SCM (version %s)\n') % util.version()))
        ui.warn((_('** Extensions loaded: %s\n') % ', '.join([x[0] for x in extensions.extensions()])))
        raise
    return (-1)
