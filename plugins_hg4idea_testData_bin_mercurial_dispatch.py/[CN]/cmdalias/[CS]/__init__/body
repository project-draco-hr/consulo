def __init__(self, name, definition, cmdtable):
    self.name = name
    self.definition = definition
    self.args = []
    self.opts = []
    self.help = ''
    self.norepo = True
    self.badalias = False
    try:
        cmdutil.findcmd(self.name, cmdtable, True)
        self.shadows = True
    except error.UnknownCommand:
        self.shadows = False
    if (not self.definition):

        def fn(ui, *args):
            ui.warn((_("no definition for alias '%s'\n") % self.name))
            return 1
        self.fn = fn
        self.badalias = True
        return
    args = shlex.split(self.definition)
    cmd = args.pop(0)
    args = map(util.expandpath, args)
    try:
        tableentry = cmdutil.findcmd(cmd, cmdtable, False)[1]
        if (len(tableentry) > 2):
            (self.fn, self.opts, self.help) = tableentry
        else:
            (self.fn, self.opts) = tableentry
        self.args = (aliasargs(self.fn) + args)
        if (cmd not in commands.norepo.split(' ')):
            self.norepo = False
        if self.help.startswith(('hg ' + cmd)):
            self.help = self.help[(4 + len(cmd)):]
        self.__doc__ = self.fn.__doc__
    except error.UnknownCommand:

        def fn(ui, *args):
            ui.warn((_("alias '%s' resolves to unknown command '%s'\n") % (self.name, cmd)))
            try:
                commands.help_(ui, cmd, unknowncmd=True)
            except error.UnknownCommand:
                pass
            return 1
        self.fn = fn
        self.badalias = True
    except error.AmbiguousCommand:

        def fn(ui, *args):
            ui.warn((_("alias '%s' resolves to ambiguous command '%s'\n") % (self.name, cmd)))
            return 1
        self.fn = fn
        self.badalias = True
