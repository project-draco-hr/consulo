{
  if (myDoNotZipCaches) {
    super.writeBytes(record,bytes,fixedSize);
    return;
  }
  waitForPendingWriteForRecord(record);
synchronized (myLock) {
    Future<Object> future=myPendingWriteRequestsExecutor.submit(new Callable<Object>(){
      @Override public Object call() throws IOException {
        BufferExposingByteArrayOutputStream s=new BufferExposingByteArrayOutputStream();
        DeflaterOutputStream out=new DeflaterOutputStream(s);
        try {
          out.write(bytes.getBytes(),bytes.getOffset(),bytes.getLength());
        }
  finally {
          out.close();
        }
synchronized (myLock) {
          myPendingWriteRequests.remove(record);
          doWrite(record,fixedSize,s);
        }
        return null;
      }
    }
);
    myPendingWriteRequests.put(record,future);
  }
}
