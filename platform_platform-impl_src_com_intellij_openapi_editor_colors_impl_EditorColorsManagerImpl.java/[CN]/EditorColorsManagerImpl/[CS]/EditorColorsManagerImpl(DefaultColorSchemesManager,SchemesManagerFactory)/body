{
  myDefaultColorSchemesManager=defaultColorSchemesManager;
  mySchemesManager=schemesManagerFactory.createSchemesManager(FILE_SPEC,new BaseSchemeProcessor<EditorColorsSchemeImpl>(){
    @NotNull @Override public EditorColorsSchemeImpl readScheme(    @NotNull Element element){
      EditorColorsSchemeImpl scheme=new EditorColorsSchemeImpl(null);
      scheme.readExternal(element);
      return scheme;
    }
    @Override public Element writeScheme(    @NotNull final EditorColorsSchemeImpl scheme){
      Element root=new Element(SCHEME_NODE_NAME);
      try {
        scheme.writeExternal(root);
      }
 catch (      WriteExternalException e) {
        LOG.error(e);
        return null;
      }
      return root;
    }
    @NotNull @Override public State getState(    @NotNull EditorColorsSchemeImpl scheme){
      return scheme instanceof ReadOnlyColorsScheme ? State.NON_PERSISTENT : State.POSSIBLY_CHANGED;
    }
    @Override public void onCurrentSchemeChanged(    final EditorColorsSchemeImpl newCurrentScheme){
      fireChanges(mySchemesManager.getCurrentScheme());
    }
    @NotNull @NonNls @Override public String getSchemeExtension(){
      return ".icls";
    }
    @Override public boolean isUpgradeNeeded(){
      return true;
    }
  }
,RoamingType.PER_USER);
  addDefaultSchemes();
  if (!isUnitTestOrHeadlessMode()) {
    for (    BundledColorSchemeEP ep : BundledColorSchemeEP.EP_NAME.getExtensions()) {
      mySchemesManager.loadBundledScheme(ep.path + ".xml",ep,new ThrowableConvertor<Element,EditorColorsScheme,Throwable>(){
        @Override public EditorColorsScheme convert(        Element element) throws Throwable {
          return new ReadOnlyColorsSchemeImpl(element);
        }
      }
);
    }
  }
  mySchemesManager.loadSchemes();
  loadAdditionalTextAttributes();
  setGlobalSchemeInner(myDefaultColorSchemesManager.getAllSchemes()[0]);
}
