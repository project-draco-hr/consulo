{
  Document _d=null;
  if (myElement != null) {
    myElement.detach();
    _d=new Document(myElement);
  }
  final ComponentManager componentManager=getComponentManager();
  final PathMacroManager pathMacroManager=PathMacroManager.getInstance(componentManager);
  final Document document=_d;
  final XmlElementStorage storage=new XmlElementStorage(pathMacroManager.createTrackingSubstitutor(),componentManager,ROOT_TAG_NAME,StreamProvider.DEFAULT,"",ComponentRoamingManager.getInstance(),ComponentVersionProvider.EMPTY){
    @Nullable protected Document loadDocument() throws StateStorageException {
      return document;
    }
    protected MySaveSession createSaveSession(    final MyExternalizationSession externalizationSession){
      return new DefaultSaveSession(externalizationSession);
    }
    @NotNull protected StorageData createStorageData(){
      return new BaseStorageData(ROOT_TAG_NAME);
    }
class DefaultSaveSession extends MySaveSession {
      public DefaultSaveSession(      MyExternalizationSession externalizationSession){
        super(externalizationSession);
      }
      protected void doSave() throws StateStorageException {
        myProjectManager.setDefaultProjectRootElement(getDocumentToSave().getRootElement());
      }
      public Collection<IFile> getStorageFilesToSave() throws StateStorageException {
        return Collections.emptyList();
      }
      public List<IFile> getAllStorageFiles(){
        return Collections.emptyList();
      }
    }
  }
;
  return new StateStorageManager(){
    public void addMacro(    String macro,    String expansion){
      throw new UnsupportedOperationException("Method addMacro not implemented in " + getClass());
    }
    @Nullable public TrackingPathMacroSubstitutor getMacroSubstitutor(){
      return null;
    }
    @Nullable public StateStorage getStateStorage(    @NotNull Storage storageSpec) throws StateStorageException {
      return storage;
    }
    @Nullable public StateStorage getFileStateStorage(    String fileName){
      return storage;
    }
    public void clearStateStorage(    @NotNull String file){
    }
    public ExternalizationSession startExternalization(){
      return new MyExternalizationSession(storage);
    }
    public SaveSession startSave(    final ExternalizationSession externalizationSession){
      return new MySaveSession(storage,externalizationSession);
    }
    public void finishSave(    SaveSession saveSession){
      storage.finishSave(((MySaveSession)saveSession).saveSession);
    }
    public String expandMacroses(    final String file){
      throw new UnsupportedOperationException("Method expandMacroses not implemented in " + getClass());
    }
    @Nullable public StateStorage getOldStorage(    Object component,    final String componentName,    final StateStorageOperation operation) throws StateStorageException {
      return storage;
    }
    public void registerStreamProvider(    final StreamProvider streamProvider,    final RoamingType type){
      throw new UnsupportedOperationException("Method registerStreamProvider not implemented in " + getClass());
    }
    public void unregisterStreamProvider(    final StreamProvider streamProvider,    final RoamingType roamingType){
      throw new UnsupportedOperationException("Method unregisterStreamProvider not implemented in " + getClass());
    }
    public StreamProvider[] getStreamProviders(    final RoamingType roamingType){
      throw new UnsupportedOperationException("Method getStreamProviders not implemented in " + getClass());
    }
    public Collection<String> getStorageFileNames(){
      throw new UnsupportedOperationException("Method getStorageFileNames not implemented in " + getClass());
    }
    public void reset(){
    }
  }
;
}
