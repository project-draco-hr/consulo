{
  Element _d=null;
  if (myElement != null) {
    myElement.detach();
    _d=myElement;
  }
  ComponentManager componentManager=getComponentManager();
  final Element element=_d;
  final XmlElementStorage storage=new XmlElementStorage("",RoamingType.DISABLED,PathMacroManager.getInstance(componentManager).createTrackingSubstitutor(),ROOT_TAG_NAME,null,ComponentVersionProvider.EMPTY){
    @Override @Nullable protected Element loadLocalData(){
      return element;
    }
    @Override protected XmlElementStorageSaveSession createSaveSession(    @NotNull StorageData storageData){
      return new XmlElementStorageSaveSession(storageData){
        @Override protected void doSave(        @Nullable Element element){
          myProjectManager.setDefaultProjectRootElement(element == null ? new Element("empty") : element);
        }
        @Override protected boolean isCollapsePathsOnSave(){
          return false;
        }
      }
;
    }
    @Override @NotNull protected StorageData createStorageData(){
      return new BaseStorageData(ROOT_TAG_NAME);
    }
  }
;
  return new StateStorageManager(){
    @Override public void addMacro(    @NotNull String macro,    @NotNull String expansion){
      throw new UnsupportedOperationException("Method addMacro not implemented in " + getClass());
    }
    @Override @Nullable public TrackingPathMacroSubstitutor getMacroSubstitutor(){
      return null;
    }
    @Override @Nullable public StateStorage getStateStorage(    @NotNull Storage storageSpec) throws StateStorageException {
      return storage;
    }
    @Nullable @Override public StateStorage getStateStorage(    @NotNull String fileSpec,    @NotNull RoamingType roamingType){
      return storage;
    }
    @NotNull @Override public Couple<Collection<FileBasedStorage>> getCachedFileStateStorages(    @NotNull Collection<String> changed,    @NotNull Collection<String> deleted){
      return new Couple<Collection<FileBasedStorage>>(Collections.<FileBasedStorage>emptyList(),Collections.<FileBasedStorage>emptyList());
    }
    @Override @Nullable public StateStorage getFileStateStorage(    @NotNull String fileSpec){
      return storage;
    }
    @Override public void clearStateStorage(    @NotNull String file){
    }
    @Nullable @Override public ExternalizationSession startExternalization(){
      StateStorage.ExternalizationSession externalizationSession=storage.startExternalization();
      return externalizationSession == null ? null : new MyExternalizationSession(externalizationSession);
    }
    @Override public void finishSave(    @NotNull SaveSession saveSession){
    }
    @NotNull @Override public String expandMacros(    @NotNull String file){
      throw new UnsupportedOperationException("Method expandMacros not implemented in " + getClass());
    }
    @NotNull @Override public String collapseMacros(    @NotNull String path){
      throw new UnsupportedOperationException("Method collapseMacros not implemented in " + getClass());
    }
    @Override @Nullable public StateStorage getOldStorage(    @NotNull Object component,    @NotNull String componentName,    @NotNull StateStorageOperation operation){
      return storage;
    }
    @Override public void setStreamProvider(    @Nullable com.intellij.openapi.components.impl.stores.StreamProvider streamProvider){
      throw new UnsupportedOperationException("Method setStreamProvider not implemented in " + getClass());
    }
    @Nullable @Override public com.intellij.openapi.components.impl.stores.StreamProvider getStreamProvider(){
      throw new UnsupportedOperationException("Method getStreamProviders not implemented in " + getClass());
    }
    @NotNull @Override public Collection<String> getStorageFileNames(){
      throw new UnsupportedOperationException("Method getStorageFileNames not implemented in " + getClass());
    }
  }
;
}
