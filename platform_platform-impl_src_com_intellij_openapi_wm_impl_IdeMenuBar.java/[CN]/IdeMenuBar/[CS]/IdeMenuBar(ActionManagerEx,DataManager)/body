{
  myActionManager=actionManager;
  myTimerListener=new MyTimerListener();
  myVisibleActions=new ArrayList<AnAction>();
  myNewVisibleActions=new ArrayList<AnAction>();
  myPresentationFactory=new MenuItemPresentationFactory();
  myDataManager=dataManager;
  if (SystemInfo.isWindows) {
    myAnimator=new Animator("MenuBarAnimator",16,300,false){
      @Override public void paintNow(      int frame,      int totalFrames,      int cycle){
        myProgress=(1 - Math.cos(Math.PI * ((float)frame / totalFrames))) / 2;
        revalidate();
        repaint();
      }
      @Override protected void paintCycleEnd(){
        myProgress=1;
switch (myState) {
case COLLAPSING:
          setState(State.COLLAPSED);
        break;
case EXPANDING:
      setState(State.TEMPORARY_EXPANDED);
    break;
default :
}
revalidate();
repaint();
}
}
;
Toolkit.getDefaultToolkit().addAWTEventListener(new AWTEventListener(){
@Override public void eventDispatched(AWTEvent event){
MouseEvent mouseEvent=(MouseEvent)event;
Component component=findActualComponent(mouseEvent);
if (myState != State.EXPANDED && !myState.isInProgress()) {
  myMouseInside=myActivated || isDescendingFrom(component,IdeMenuBar.this);
  if (myMouseInside && myState == State.COLLAPSED) {
    setState(State.EXPANDING);
    restartAnimator();
  }
 else   if (!myMouseInside && myState != State.COLLAPSING && myState != State.COLLAPSED) {
    setState(State.COLLAPSING);
    restartAnimator();
  }
}
}
private Component findActualComponent(MouseEvent mouseEvent){
Component component=mouseEvent.getComponent();
Component deepestComponent;
if (myState != State.EXPANDED && !myState.isInProgress() && contains(SwingUtilities.convertPoint(component,mouseEvent.getPoint(),IdeMenuBar.this))) {
  deepestComponent=IdeMenuBar.this;
}
 else {
  deepestComponent=SwingUtilities.getDeepestComponentAt(mouseEvent.getComponent(),mouseEvent.getX(),mouseEvent.getY());
}
if (deepestComponent != null) {
  component=deepestComponent;
}
return component;
}
}
,AWTEvent.MOUSE_MOTION_EVENT_MASK | AWTEvent.MOUSE_EVENT_MASK);
myActivationWatcher=new Timer(100,new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
if (myState == State.EXPANDED || myState == State.EXPANDING) {
  return;
}
boolean activated=isActivated();
if (myActivated && !activated && myState == State.TEMPORARY_EXPANDED) {
  myActivated=false;
  setState(State.COLLAPSING);
  restartAnimator();
}
if (activated) {
  myActivated=true;
}
}
}
);
}
 else {
myAnimator=null;
myActivationWatcher=null;
}
}
