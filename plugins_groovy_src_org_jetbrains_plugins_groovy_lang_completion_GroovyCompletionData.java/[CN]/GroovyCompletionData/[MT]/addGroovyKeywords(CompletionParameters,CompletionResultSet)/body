{
  PsiElement position=parameters.getPosition();
  PsiElement parent=position.getParent();
  if (!PlatformPatterns.psiElement().afterLeaf(".",".&").accepts(position)) {
    if (suggestPackage(position)) {
      result.addElement(keyword(PsiKeyword.PACKAGE,TailType.SPACE));
    }
    if (suggestImport(position)) {
      result.addElement(keyword(PsiKeyword.IMPORT,TailType.SPACE));
    }
    addTypeDefinitionKeywords(result,position);
    addExtendsImplements(position,result);
    registerControlCompletion(position,result);
    if (parent instanceof GrExpression && !(parent instanceof GrLiteral)) {
      addKeywords(result,false,PsiKeyword.TRUE,PsiKeyword.FALSE,PsiKeyword.NULL,PsiKeyword.SUPER,PsiKeyword.NEW,PsiKeyword.THIS,"as");
    }
    if (isInfixOperatorPosition(position)) {
      addKeywords(result,true,"in",PsiKeyword.INSTANCEOF);
    }
 else     if (suggestThrows(position)) {
      addKeywords(result,true,PsiKeyword.THROWS);
    }
 else     if (suggestPrimitiveTypes(position)) {
      boolean inCast=psiElement().afterLeaf(psiElement().withText("(").withParent(psiElement(GrParenthesizedExpression.class,GrTypeCastExpression.class))).accepts(position);
      addKeywords(result,!inCast,BUILT_IN_TYPES);
    }
    if (psiElement(GrReferenceExpression.class).inside(or(psiElement(GrWhileStatement.class),psiElement(GrForStatement.class))).accepts(parent)) {
      addKeywords(result,false,PsiKeyword.BREAK,PsiKeyword.CONTINUE);
    }
 else     if (psiElement(GrReferenceExpression.class).inside(GrCaseSection.class).accepts(parent)) {
      addKeywords(result,false,PsiKeyword.BREAK);
    }
    if (psiElement().withSuperParent(2,GrImportStatement.class).accepts(position)) {
      if (psiElement().afterLeaf(PsiKeyword.IMPORT).accepts(position)) {
        addKeywords(result,true,PsiKeyword.STATIC);
      }
    }
 else {
      if (suggestModifiers(position)) {
        addModifiers(position,result);
      }
      if (psiElement().afterLeaf(MODIFIERS).accepts(position) || GroovyCompletionUtil.isInTypeDefinitionBody(position) && GroovyCompletionUtil.isNewStatement(position,true)) {
        addKeywords(result,true,PsiKeyword.SYNCHRONIZED);
      }
      if (suggestFinalDef(position) || psiElement().afterLeaf(psiElement().withText("(").withParent(GrForStatement.class)).accepts(position)) {
        addKeywords(result,true,PsiKeyword.FINAL,"def");
      }
    }
  }
}
