{
  PsiElement position=parameters.getPosition();
  PsiElement parent=position.getParent();
  if (!PlatformPatterns.psiElement().afterLeaf(".",".&").accepts(position)) {
    if (suggestPackage(position)) {
      result.addElement(keyword("package"));
    }
    if (suggestImport(position)) {
      result.addElement(keyword("import"));
    }
    addTypeDefinitionKeywords(result,position);
    addExtendsImplements(position,result);
    registerControlCompletion(position,result);
    if (parent instanceof GrExpression && !(parent instanceof GrLiteral)) {
      addKeywords(result,"true","false","null","super","new","this","as");
    }
    if (isInfixOperatorPosition(position)) {
      addKeywords(result,"in",PsiKeyword.INSTANCEOF);
    }
 else     if (suggestThrows(position)) {
      addKeywords(result,PsiKeyword.THROWS);
    }
 else     if (suggestPrimitiveTypes(position)) {
      addKeywords(result,BUILT_IN_TYPES);
    }
    if (psiElement(GrReferenceExpression.class).inside(or(psiElement(GrWhileStatement.class),psiElement(GrForStatement.class))).accepts(parent)) {
      addKeywords(result,PsiKeyword.BREAK,PsiKeyword.CONTINUE);
    }
 else     if (psiElement(GrReferenceExpression.class).inside(GrCaseSection.class).accepts(parent)) {
      addKeywords(result,PsiKeyword.BREAK);
    }
    if (psiElement().withSuperParent(2,GrImportStatement.class).accepts(position)) {
      if (psiElement().afterLeaf(PsiKeyword.IMPORT).accepts(position)) {
        addKeywords(result,PsiKeyword.STATIC);
      }
    }
 else {
      if (suggestModifiers(position)) {
        addKeywords(result,MODIFIERS);
      }
      if (psiElement().afterLeaf(MODIFIERS).accepts(position) || GroovyCompletionUtil.isInTypeDefinitionBody(position) && GroovyCompletionUtil.isNewStatement(position,true)) {
        addKeywords(result,PsiKeyword.SYNCHRONIZED);
      }
      if (suggestFinalDef(position)) {
        addKeywords(result,PsiKeyword.FINAL,"def");
      }
    }
  }
}
