{
  try {
    final PsiMethod psiMethod=(PsiMethod)(element == null ? refMethod.getElement() : element);
    final Project project=psiMethod.getProject();
    final PsiManager psiManager=PsiManager.getInstance(project);
    final List<PsiJavaCodeReferenceElement> refsToDelete=new ArrayList<PsiJavaCodeReferenceElement>();
    for (    ProblemDescriptor problem : problems) {
      final PsiElement psiElement=problem.getPsiElement();
      if (psiElement instanceof PsiJavaCodeReferenceElement) {
        final PsiJavaCodeReferenceElement classRef=(PsiJavaCodeReferenceElement)psiElement;
        final PsiType psiType=psiManager.getElementFactory().createType(classRef);
        removeException(refMethod,psiType,refsToDelete,psiMethod);
      }
 else {
        final PsiReferenceList throwsList=psiMethod.getThrowsList();
        final PsiClassType[] classTypes=throwsList.getReferencedTypes();
        for (        PsiClassType classType : classTypes) {
          final String text=classType.getClassName();
          if (Comparing.strEqual(myHint,text)) {
            removeException(refMethod,classType,refsToDelete,psiMethod);
            break;
          }
        }
      }
    }
    for (    final PsiJavaCodeReferenceElement aRefsToDelete : refsToDelete) {
      aRefsToDelete.delete();
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
