{
  final List<Change> textChanges=new ArrayList<Change>();
  final List<ShelvedBinaryFile> binaryFiles=new ArrayList<ShelvedBinaryFile>();
  for (  Change change : changes) {
    if (change.getBeforeRevision() instanceof BinaryContentRevision || change.getAfterRevision() instanceof BinaryContentRevision) {
      binaryFiles.add(shelveBinaryFile(change));
    }
 else {
      textChanges.add(change);
    }
  }
  File patchPath=getPatchPath(commitMessage);
  Writer writer;
  try {
    writer=new OutputStreamWriter(new FileOutputStream(patchPath));
  }
 catch (  IOException ex) {
    patchPath=getPatchPath("shelved_change");
    writer=new OutputStreamWriter(new FileOutputStream(patchPath));
  }
  try {
    List<FilePatch> patches=PatchBuilder.buildPatch(textChanges,myProject.getBaseDir().getPresentableUrl(),true);
    UnifiedDiffWriter.write(patches,writer);
  }
  finally {
    writer.close();
  }
  RollbackChangesDialog.doRollback(myProject,changes,true,false);
  myShelvedChangeLists.add(new ShelvedChangeList(patchPath.toString(),commitMessage.replace('\n',' '),binaryFiles));
  notifyStateChanged();
}
