{
  myProject=project;
  myRunnerTask=new Task.Backgroundable(project,title){
    public void run(    @NotNull final ProgressIndicator indicator){
      while (true) {
        final Task task;
synchronized (myQueue) {
          myHasActiveTask=true;
          task=myQueue.poll();
        }
        if (task != null) {
          indicator.setText(task.getTitle());
          try {
            task.run(indicator);
          }
 catch (          ProcessCanceledException e) {
          }
          ApplicationManager.getApplication().invokeLater(new Runnable(){
            public void run(){
              if (myProject == null || !myProject.isDisposed()) {
                task.onSuccess();
              }
            }
          }
,ModalityState.NON_MODAL);
        }
synchronized (myQueue) {
          myHasActiveTask=true;
          if (myQueue.isEmpty()) {
            myHasActiveTask=false;
            return;
          }
        }
      }
    }
  }
;
}
