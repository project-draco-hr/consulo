def convert(ui, src, dest=None, revmapfile=None, **opts):
    'convert a foreign SCM repository to a Mercurial one.\n\n    Accepted source formats [identifiers]:\n\n    - Mercurial [hg]\n    - CVS [cvs]\n    - Darcs [darcs]\n    - git [git]\n    - Subversion [svn]\n    - Monotone [mtn]\n    - GNU Arch [gnuarch]\n    - Bazaar [bzr]\n    - Perforce [p4]\n\n    Accepted destination formats [identifiers]:\n\n    - Mercurial [hg]\n    - Subversion [svn] (history on branches is not preserved)\n\n    If no revision is given, all revisions will be converted.\n    Otherwise, convert will only import up to the named revision\n    (given in a format understood by the source).\n\n    If no destination directory name is specified, it defaults to the\n    basename of the source with \'-hg\' appended. If the destination\n    repository doesn\'t exist, it will be created.\n\n    By default, all sources except Mercurial will use --branchsort.\n    Mercurial uses --sourcesort to preserve original revision numbers\n    order. Sort modes have the following effects:\n\n    --branchsort  convert from parent to child revision when possible,\n                  which means branches are usually converted one after\n                  the other. It generates more compact repositories.\n\n    --datesort    sort revisions by date. Converted repositories have\n                  good-looking changelogs but are often an order of\n                  magnitude larger than the same ones generated by\n                  --branchsort.\n\n    --sourcesort  try to preserve source revisions order, only\n                  supported by Mercurial sources.\n\n    If <REVMAP> isn\'t given, it will be put in a default location\n    (<dest>/.hg/shamap by default). The <REVMAP> is a simple text file\n    that maps each source commit ID to the destination ID for that\n    revision, like so::\n\n      <source ID> <destination ID>\n\n    If the file doesn\'t exist, it\'s automatically created. It\'s\n    updated on each commit copied, so convert-repo can be interrupted\n    and can be run repeatedly to copy new commits.\n\n    The [username mapping] file is a simple text file that maps each\n    source commit author to a destination commit author. It is handy\n    for source SCMs that use unix logins to identify authors (eg:\n    CVS). One line per author mapping and the line format is:\n    srcauthor=whatever string you want\n\n    The filemap is a file that allows filtering and remapping of files\n    and directories. Comment lines start with \'#\'. Each line can\n    contain one of the following directives::\n\n      include path/to/file\n\n      exclude path/to/file\n\n      rename from/file to/file\n\n    The \'include\' directive causes a file, or all files under a\n    directory, to be included in the destination repository, and the\n    exclusion of all other files and directories not explicitly\n    included. The \'exclude\' directive causes files or directories to\n    be omitted. The \'rename\' directive renames a file or directory. To\n    rename from a subdirectory into the root of the repository, use\n    \'.\' as the path to rename to.\n\n    The splicemap is a file that allows insertion of synthetic\n    history, letting you specify the parents of a revision. This is\n    useful if you want to e.g. give a Subversion merge two parents, or\n    graft two disconnected series of history together. Each entry\n    contains a key, followed by a space, followed by one or two\n    comma-separated values. The key is the revision ID in the source\n    revision control system whose parents should be modified (same\n    format as a key in .hg/shamap). The values are the revision IDs\n    (in either the source or destination revision control system) that\n    should be used as the new parents for that node. For example, if\n    you have merged "release-1.0" into "trunk", then you should\n    specify the revision on "trunk" as the first parent and the one on\n    the "release-1.0" branch as the second.\n\n    The branchmap is a file that allows you to rename a branch when it is\n    being brought in from whatever external repository. When used in\n    conjunction with a splicemap, it allows for a powerful combination\n    to help fix even the most badly mismanaged repositories and turn them\n    into nicely structured Mercurial repositories. The branchmap contains\n    lines of the form "original_branch_name new_branch_name".\n    "original_branch_name" is the name of the branch in the source\n    repository, and "new_branch_name" is the name of the branch is the\n    destination repository. This can be used to (for instance) move code\n    in one repository from "default" to a named branch.\n\n    Mercurial Source\n    ----------------\n\n    --config convert.hg.ignoreerrors=False    (boolean)\n        ignore integrity errors when reading. Use it to fix Mercurial\n        repositories with missing revlogs, by converting from and to\n        Mercurial.\n    --config convert.hg.saverev=False         (boolean)\n        store original revision ID in changeset (forces target IDs to\n        change)\n    --config convert.hg.startrev=0            (hg revision identifier)\n        convert start revision and its descendants\n\n    CVS Source\n    ----------\n\n    CVS source will use a sandbox (i.e. a checked-out copy) from CVS\n    to indicate the starting point of what will be converted. Direct\n    access to the repository files is not needed, unless of course the\n    repository is :local:. The conversion uses the top level directory\n    in the sandbox to find the CVS repository, and then uses CVS rlog\n    commands to find files to convert. This means that unless a\n    filemap is given, all files under the starting directory will be\n    converted, and that any directory reorganization in the CVS\n    sandbox is ignored.\n\n    The options shown are the defaults.\n\n    --config convert.cvsps.cache=True         (boolean)\n        Set to False to disable remote log caching, for testing and\n        debugging purposes.\n    --config convert.cvsps.fuzz=60            (integer)\n        Specify the maximum time (in seconds) that is allowed between\n        commits with identical user and log message in a single\n        changeset. When very large files were checked in as part of a\n        changeset then the default may not be long enough.\n    --config convert.cvsps.mergeto=\'{{mergetobranch ([-\\w]+)}}\'\n        Specify a regular expression to which commit log messages are\n        matched. If a match occurs, then the conversion process will\n        insert a dummy revision merging the branch on which this log\n        message occurs to the branch indicated in the regex.\n    --config convert.cvsps.mergefrom=\'{{mergefrombranch ([-\\w]+)}}\'\n        Specify a regular expression to which commit log messages are\n        matched. If a match occurs, then the conversion process will\n        add the most recent revision on the branch indicated in the\n        regex as the second parent of the changeset.\n    --config hook.cvslog\n        Specify a Python function to be called at the end of gathering\n        the CVS log. The function is passed a list with the log entries,\n        and can modify the entries in-place, or add or delete them.\n    --config hook.cvschangesets\n        Specify a Python function to be called after the changesets\n        are calculated from the the CVS log. The function is passed\n        a list with the changeset entries, and can modify the changesets\n        in-place, or add or delete them.\n\n    An additional "debugcvsps" Mercurial command allows the builtin\n    changeset merging code to be run without doing a conversion. Its\n    parameters and output are similar to that of cvsps 2.1. Please see\n    the command help for more details.\n\n    Subversion Source\n    -----------------\n\n    Subversion source detects classical trunk/branches/tags layouts.\n    By default, the supplied "svn://repo/path/" source URL is\n    converted as a single branch. If "svn://repo/path/trunk" exists it\n    replaces the default branch. If "svn://repo/path/branches" exists,\n    its subdirectories are listed as possible branches. If\n    "svn://repo/path/tags" exists, it is looked for tags referencing\n    converted branches. Default "trunk", "branches" and "tags" values\n    can be overridden with following options. Set them to paths\n    relative to the source URL, or leave them blank to disable auto\n    detection.\n\n    --config convert.svn.branches=branches    (directory name)\n        specify the directory containing branches\n    --config convert.svn.tags=tags            (directory name)\n        specify the directory containing tags\n    --config convert.svn.trunk=trunk          (directory name)\n        specify the name of the trunk branch\n\n    Source history can be retrieved starting at a specific revision,\n    instead of being integrally converted. Only single branch\n    conversions are supported.\n\n    --config convert.svn.startrev=0           (svn revision number)\n        specify start Subversion revision.\n\n    Perforce Source\n    ---------------\n\n    The Perforce (P4) importer can be given a p4 depot path or a\n    client specification as source. It will convert all files in the\n    source to a flat Mercurial repository, ignoring labels, branches\n    and integrations. Note that when a depot path is given you then\n    usually should specify a target directory, because otherwise the\n    target may be named ...-hg.\n\n    It is possible to limit the amount of source history to be\n    converted by specifying an initial Perforce revision.\n\n    --config convert.p4.startrev=0            (perforce changelist number)\n        specify initial Perforce revision.\n\n    Mercurial Destination\n    ---------------------\n\n    --config convert.hg.clonebranches=False   (boolean)\n        dispatch source branches in separate clones.\n    --config convert.hg.tagsbranch=default    (branch name)\n        tag revisions branch name\n    --config convert.hg.usebranchnames=True   (boolean)\n        preserve branch names\n\n    '
    return convcmd.convert(ui, src, dest, revmapfile, **opts)
