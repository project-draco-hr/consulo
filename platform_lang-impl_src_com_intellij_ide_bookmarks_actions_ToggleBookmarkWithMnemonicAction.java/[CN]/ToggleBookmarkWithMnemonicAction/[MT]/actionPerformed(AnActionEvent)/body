{
  super.actionPerformed(e);
  DataContext dataContext=e.getDataContext();
  final Project project=PlatformDataKeys.PROJECT.getData(dataContext);
  if (project == null)   return;
  final BookmarkInContextInfo info=new BookmarkInContextInfo(dataContext,project).invoke();
  final Bookmark bookmark=info.getBookmarkAtPlace();
  final BookmarkManager bookmarks=BookmarkManager.getInstance(project);
  if (bookmark != null) {
    final JBPopup[] popup=new JBPopup[1];
    MnemonicChooser mc=new MnemonicChooser(){
      @Override protected void onMnemonicChosen(      char c){
        popup[0].cancel();
        bookmarks.setMnemonic(c,bookmark);
      }
      @Override protected void onCancelled(){
        popup[0].cancel();
        bookmarks.removeBookmark(bookmark);
      }
      @Override protected boolean isOccupied(      char c){
        return bookmarks.findBookmarkForMnemonic(c) != null;
      }
    }
;
    final ComponentPopupBuilder builder=JBPopupFactory.getInstance().createComponentPopupBuilder(mc,mc);
    popup[0]=builder.setTitle("Choose Mnemonic").setFocusable(true).setRequestFocus(true).setMovable(false).setCancelKeyEnabled(false).setAdText(bookmarks.hasBookmarksWithMnemonics() ? "Occupied marked yellow" : null).setResizable(false).createPopup();
    popup[0].showInBestPositionFor(dataContext);
  }
}
