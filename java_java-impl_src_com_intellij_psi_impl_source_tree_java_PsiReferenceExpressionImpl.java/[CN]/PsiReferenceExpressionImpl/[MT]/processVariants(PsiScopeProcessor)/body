{
  OrFilter filter=new OrFilter();
  filter.addFilter(ElementClassFilter.CLASS);
  if (isQualified()) {
    filter.addFilter(ElementClassFilter.PACKAGE_FILTER);
  }
  filter.addFilter(new AndFilter(ElementClassFilter.METHOD,new NotFilter(new ConstructorFilter())));
  filter.addFilter(ElementClassFilter.VARIABLE);
  FilterScopeProcessor proc=new FilterScopeProcessor(filter,processor){
    private final Set<String> myVarNames=new THashSet<String>();
    @Override public boolean execute(    final PsiElement element,    final ResolveState state){
      if (element instanceof PsiLocalVariable || element instanceof PsiParameter) {
        myVarNames.add(((PsiVariable)element).getName());
      }
 else       if (element instanceof PsiField && myVarNames.contains(((PsiVariable)element).getName())) {
        return true;
      }
      return super.execute(element,state);
    }
  }
;
  PsiScopesUtil.resolveAndWalk(proc,this,null,true);
}
