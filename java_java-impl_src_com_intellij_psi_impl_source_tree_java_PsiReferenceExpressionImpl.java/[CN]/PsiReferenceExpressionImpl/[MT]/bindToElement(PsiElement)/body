{
  CheckUtil.checkWritable(this);
  if (isReferenceTo(element))   return this;
  final PsiManager manager=getManager();
  final PsiJavaParserFacade parserFacade=JavaPsiFacade.getInstance(getProject()).getParserFacade();
  if (element instanceof PsiClass) {
    final boolean preserveQualification=CodeStyleSettingsManager.getSettings(getProject()).USE_FQ_CLASS_NAMES && isFullyQualified(this);
    String qName=((PsiClass)element).getQualifiedName();
    if (qName == null) {
      qName=((PsiClass)element).getName();
    }
 else     if (JavaPsiFacade.getInstance(manager.getProject()).findClass(qName,getResolveScope()) == null && !preserveQualification) {
      return this;
    }
    PsiExpression ref=parserFacade.createExpressionFromText(qName,this);
    getTreeParent().replaceChildInternal(this,(TreeElement)ref.getNode());
    final JavaCodeStyleManager codeStyleManager=JavaCodeStyleManager.getInstance(manager.getProject());
    if (!preserveQualification) {
      ref=(PsiExpression)codeStyleManager.shortenClassReferences(ref,JavaCodeStyleManager.UNCOMPLETE_CODE);
    }
    return ref;
  }
 else   if (element instanceof PsiPackage) {
    final String qName=((PsiPackage)element).getQualifiedName();
    if (qName.length() == 0) {
      throw new IncorrectOperationException();
    }
    final PsiExpression ref=parserFacade.createExpressionFromText(qName,this);
    getTreeParent().replaceChildInternal(this,(TreeElement)ref.getNode());
    return ref;
  }
 else   if ((element instanceof PsiField || element instanceof PsiMethod) && ((PsiMember)element).hasModifierProperty(PsiModifier.STATIC)) {
    if (!isPhysical()) {
      return this;
    }
    final PsiMember member=(PsiMember)element;
    final PsiClass psiClass=member.getContainingClass();
    if (psiClass == null)     throw new IncorrectOperationException();
    final String qName=psiClass.getQualifiedName() + "." + member.getName();
    final PsiExpression ref=parserFacade.createExpressionFromText(qName,this);
    getTreeParent().replaceChildInternal(this,(TreeElement)ref.getNode());
    return ref;
  }
 else {
    throw new IncorrectOperationException(element.toString());
  }
}
