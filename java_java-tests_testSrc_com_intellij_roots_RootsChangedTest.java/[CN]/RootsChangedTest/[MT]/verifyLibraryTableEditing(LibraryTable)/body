{
  final Module moduleA=createModule("a.iml");
  final Module moduleB=createModule("b.iml");
  assertEventsCount(2);
  final Library libraryA=libraryTable.createLibrary("A");
  final Library.ModifiableModel libraryModifiableModel=libraryA.getModifiableModel();
  libraryModifiableModel.addRoot("file:///a",OrderRootType.CLASSES);
  libraryModifiableModel.commit();
  assertEventsCount(0);
  final ModifiableRootModel rootModelA=ModuleRootManager.getInstance(moduleA).getModifiableModel();
  final ModifiableRootModel rootModelB=ModuleRootManager.getInstance(moduleB).getModifiableModel();
  rootModelA.addLibraryEntry(libraryA);
  rootModelB.addLibraryEntry(libraryA);
  rootModelA.addInvalidLibrary("Q",libraryTable.getTableLevel());
  rootModelB.addInvalidLibrary("Q",libraryTable.getTableLevel());
  ModifiableRootModel[] rootModels=new ModifiableRootModel[]{rootModelA,rootModelB};
  if (rootModels.length > 0) {
    ModuleRootManagerImpl.multiCommit(rootModels,ModuleManager.getInstance(rootModels[0].getProject()).getModifiableModel());
  }
  assertEventsCount(1);
  final Library.ModifiableModel libraryModifiableModel2=libraryA.getModifiableModel();
  final File tmpDir=FileUtil.createTempDirectory(getTestName(true),"");
  try {
    final VirtualFile file=LocalFileSystem.getInstance().refreshAndFindFileByIoFile(tmpDir);
    assertNotNull(file);
    libraryModifiableModel2.addRoot(file.getUrl(),OrderRootType.CLASSES);
    libraryModifiableModel2.commit();
    assertEventsCount(1);
  }
  finally {
    FileUtil.delete(tmpDir);
  }
  libraryTable.removeLibrary(libraryA);
  assertEventsCount(1);
  final Library libraryQ=libraryTable.createLibrary("Q");
  assertEventsCount(1);
  libraryTable.removeLibrary(libraryQ);
  assertEventsCount(1);
}
