{
  if (aClass.hasTypeParameters() != bClass.hasTypeParameters())   return true;
  final PsiTypeParameter[] typeParameters1=aClass.getTypeParameters();
  final PsiTypeParameter[] typeParameters2=bClass.getTypeParameters();
  if (typeParameters1.length != typeParameters2.length)   return false;
  for (int i=0; i < typeParameters1.length; i++) {
    final PsiType substituted2=s2.substitute(typeParameters2[i]);
    if (!Comparing.equal(s1.substituteWithBoundsPromotion(typeParameters1[i]),substituted2) && !Comparing.equal(s1.substitute(typeParameters1[i]),substituted2)) {
      return false;
    }
  }
  if (aClass.hasModifierProperty(PsiModifier.STATIC))   return true;
  final PsiClass containingClass1=aClass.getContainingClass();
  final PsiClass containingClass2=bClass.getContainingClass();
  if (containingClass1 != null && containingClass2 != null) {
    return equalOnEquivalentClasses(s1,containingClass1,s2,containingClass2);
  }
  return containingClass1 == null && containingClass2 == null;
}
