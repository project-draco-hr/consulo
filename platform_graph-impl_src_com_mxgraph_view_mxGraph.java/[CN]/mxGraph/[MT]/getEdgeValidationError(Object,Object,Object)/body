{
  if (edge != null && !isAllowDanglingEdges() && (source == null || target == null)) {
    return "";
  }
  if (edge != null && model.getTerminal(edge,true) == null && model.getTerminal(edge,false) == null) {
    return null;
  }
  if (!isAllowLoops() && source == target && source != null) {
    return "";
  }
  if (!isValidConnection(source,target)) {
    return "";
  }
  if (source != null && target != null) {
    StringBuffer error=new StringBuffer();
    if (!multigraph) {
      Object[] tmp=mxGraphModel.getEdgesBetween(model,source,target,true);
      if (tmp.length > 1 || (tmp.length == 1 && tmp[0] != edge)) {
        error.append(mxResources.get("alreadyConnected","Already Connected") + "\n");
      }
    }
    int sourceOut=mxGraphModel.getDirectedEdgeCount(model,source,true,edge);
    int targetIn=mxGraphModel.getDirectedEdgeCount(model,target,false,edge);
    if (multiplicities != null) {
      for (int i=0; i < multiplicities.length; i++) {
        String err=multiplicities[i].check(this,edge,source,target,sourceOut,targetIn);
        if (err != null) {
          error.append(err);
        }
      }
    }
    String err=validateEdge(edge,source,target);
    if (err != null) {
      error.append(err);
    }
    return (error.length() > 0) ? error.toString() : null;
  }
  return (allowDanglingEdges) ? null : "";
}
