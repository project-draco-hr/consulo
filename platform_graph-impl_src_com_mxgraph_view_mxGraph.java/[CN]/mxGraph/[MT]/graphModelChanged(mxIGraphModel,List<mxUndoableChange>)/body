{
  int thresh=getChangesRepaintThreshold();
  boolean ignoreDirty=thresh > 0 && changes.size() > thresh;
  if (!ignoreDirty) {
    Iterator<mxUndoableChange> it=changes.iterator();
    while (it.hasNext()) {
      if (it.next() instanceof mxRootChange) {
        ignoreDirty=true;
        break;
      }
    }
  }
  mxRectangle dirty=processChanges(changes,true,ignoreDirty);
  view.validate();
  if (isAutoOrigin()) {
    updateOrigin();
  }
  if (!ignoreDirty) {
    mxRectangle tmp=processChanges(changes,false,ignoreDirty);
    if (tmp != null) {
      if (dirty == null) {
        dirty=tmp;
      }
 else {
        dirty.add(tmp);
      }
    }
  }
  removeSelectionCells(getRemovedCellsForChanges(changes));
  return dirty;
}
