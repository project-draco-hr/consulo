{
  myProgressIndicator=ProgressManager.getInstance().getProgressIndicator();
  if (myProgressIndicator == null) {
    throw new IllegalStateException("Inspections must be run under progress");
  }
  final PsiManager psiManager=PsiManager.getInstance(myProject);
  RefManagerImpl refManager=(RefManagerImpl)getRefManager();
  try {
    psiManager.startBatchFilesProcessingMode();
    refManager.inspectionReadActionStarted();
    getStdJobDescriptors().BUILD_GRAPH.setTotalAmount(scope.getFileCount());
    getStdJobDescriptors().LOCAL_ANALYSIS.setTotalAmount(scope.getFileCount());
    getStdJobDescriptors().FIND_EXTERNAL_USAGES.setTotalAmount(0);
    ProgressManager.getInstance().executeProcessUnderProgress(new Runnable(){
      @Override public void run(){
        runTools(scope,runGlobalToolsOnly,isOfflineInspections);
      }
    }
,ProgressWrapper.wrap(myProgressIndicator));
  }
 catch (  ProcessCanceledException e) {
    cleanup();
    throw e;
  }
catch (  IndexNotReadyException e) {
    cleanup();
    DumbService.getInstance(myProject).showDumbModeNotification("Usage search is not available until indices are ready");
    throw new ProcessCanceledException();
  }
catch (  Throwable e) {
    LOG.error(e);
  }
 finally {
    refManager.inspectionReadActionFinished();
    psiManager.finishBatchFilesProcessingMode();
  }
}
