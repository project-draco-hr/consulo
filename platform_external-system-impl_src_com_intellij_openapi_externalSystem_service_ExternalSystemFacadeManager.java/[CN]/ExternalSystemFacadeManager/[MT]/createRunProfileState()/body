{
  return new CommandLineState(null){
    private SimpleJavaParameters createJavaParameters() throws ExecutionException {
      final SimpleJavaParameters params=new SimpleJavaParameters();
      params.setJdk(new SimpleJavaSdkType().createJdk("tmp",SystemProperties.getJavaHome()));
      params.setWorkingDirectory(PathManager.getBinPath());
      final List<String> classPath=ContainerUtilRt.newArrayList();
      classPath.addAll(PathManager.getUtilClassPath());
      ContainerUtil.addIfNotNull(PathUtil.getJarPathForClass(ProjectBundle.class),classPath);
      ExternalSystemApiUtil.addBundle(params.getClassPath(),"messages.ProjectBundle",ProjectBundle.class);
      ContainerUtil.addIfNotNull(PathUtil.getJarPathForClass(PsiBundle.class),classPath);
      ContainerUtil.addIfNotNull(PathUtil.getJarPathForClass(Alarm.class),classPath);
      ContainerUtil.addIfNotNull(PathUtil.getJarPathForClass(DependencyScope.class),classPath);
      ContainerUtil.addIfNotNull(PathUtil.getJarPathForClass(ExtensionPointName.class),classPath);
      ContainerUtil.addIfNotNull(PathUtil.getJarPathForClass(OpenProjectFileChooserDescriptor.class),classPath);
      ContainerUtil.addIfNotNull(PathUtil.getJarPathForClass(ExternalSystemTaskNotificationListener.class),classPath);
      ContainerUtil.addIfNotNull(PathUtil.getJarPathForClass(getClass()),classPath);
      ExternalSystemApiUtil.addBundle(params.getClassPath(),"messages.CommonBundle",CommonBundle.class);
      params.getClassPath().addAll(classPath);
      params.setMainClass(MAIN_CLASS_NAME);
      params.getVMParametersList().addParametersString("-Djava.awt.headless=true -Xmx512m");
      params.getVMParametersList().addParametersString("-Dsun.rmi.transport.connectionTimeout=" + String.valueOf(TimeUnit.HOURS.toMillis(1)));
      ProjectSystemId externalSystemId=myTargetExternalSystemId.get();
      if (externalSystemId != null) {
        ExternalSystemManager<?,?,?,?,?> manager=ExternalSystemApiUtil.getManager(externalSystemId);
        if (manager != null) {
          params.getProgramParametersList().add(manager.getProjectResolverClass().getName());
          params.getProgramParametersList().add(manager.getBuildManagerClass().getName());
          manager.enhanceParameters(params);
        }
      }
      return params;
    }
    @NotNull @Override public ExecutionResult execute(    @NotNull Executor executor,    @NotNull ProgramRunner runner) throws ExecutionException {
      ProcessHandler processHandler=startProcess();
      return new DefaultExecutionResult(null,processHandler,AnAction.EMPTY_ARRAY);
    }
    @NotNull protected OSProcessHandler startProcess() throws ExecutionException {
      SimpleJavaParameters params=createJavaParameters();
      Sdk sdk=params.getJdk();
      if (sdk == null) {
        throw new ExecutionException("No sdk is defined. Params: " + params);
      }
      final GeneralCommandLine commandLine=JdkUtil.setupJVMCommandLine(((JavaSdkType)sdk.getSdkType()).getVMExecutablePath(sdk),params,false);
      final OSProcessHandler processHandler=new OSProcessHandler(commandLine.createProcess(),commandLine.getCommandLineString()){
        @Override public Charset getCharset(){
          return commandLine.getCharset();
        }
      }
;
      ProcessTerminatedListener.attach(processHandler);
      return processHandler;
    }
  }
;
}
