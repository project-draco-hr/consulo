{
  if (mode.isSilently()) {
    return new CallbackData(new Runnable(){
      public void run(){
        if (mode.isCallbackOnAwt()) {
          SwingUtilities.invokeLater(new Runnable(){
            public void run(){
              LOG.debug("invokeAfterUpdate: silent wrapper called for project: " + project.getName());
              if (project.isDisposed())               return;
              afterUpdate.run();
              ChangesViewManager.getInstance(project).refreshView();
            }
          }
);
        }
 else {
          ApplicationManager.getApplication().executeOnPooledThread(afterUpdate);
        }
      }
    }
,null);
  }
 else {
    if (mode.isSynchronous()) {
      final Waiter waiter=new Waiter(project,afterUpdate,state);
      return new CallbackData(new Runnable(){
        public void run(){
          LOG.debug("invokeAfterUpdate: NOT silent SYNCHRONOUS wrapper called for project: " + project.getName());
          waiter.done();
        }
      }
,new Runnable(){
        public void run(){
          ProgressManager.getInstance().runProcessWithProgressSynchronously(waiter,VcsBundle.message("change.list.manager.wait.lists.synchronization",title),mode.isCancellable(),project);
        }
      }
);
    }
 else {
      final FictiveBackgroundable fictiveBackgroundable=new FictiveBackgroundable(project,afterUpdate,mode.isCancellable(),title,state);
      return new CallbackData(new Runnable(){
        public void run(){
          LOG.debug("invokeAfterUpdate: NOT silent wrapper called for project: " + project.getName());
          fictiveBackgroundable.done();
        }
      }
,new Runnable(){
        public void run(){
          ProgressManager.getInstance().run(fictiveBackgroundable);
        }
      }
);
    }
  }
}
