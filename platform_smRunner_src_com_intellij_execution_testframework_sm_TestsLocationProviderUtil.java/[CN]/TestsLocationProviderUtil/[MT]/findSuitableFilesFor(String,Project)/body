{
  final ProjectFileIndex index=ProjectRootManager.getInstance(project).getFileIndex();
  final VirtualFile file=getByFullPath(filePath);
  final boolean inProjectContent=file != null && (index.isInContent(file));
  if (inProjectContent) {
    return Collections.singletonList(file);
  }
  final LinkedList<String> folders=new LinkedList<String>();
  final StringTokenizer st=new StringTokenizer(filePath,"/",false);
  String fileName=null;
  while (st.hasMoreTokens()) {
    final String pathComponent=st.nextToken();
    if (st.hasMoreTokens()) {
      folders.addFirst(pathComponent);
    }
 else {
      fileName=pathComponent;
    }
  }
  final List<FileInfo> filesInfo=collectCandidates(project,fileName);
  if (filesInfo.isEmpty()) {
    return Collections.emptyList();
  }
  for (  String folderName : folders) {
    for (    FileInfo info : filesInfo) {
      info.processRelativePathComponent(folderName);
    }
  }
  int maxProximity=0;
  for (  FileInfo fileInfo : filesInfo) {
    final int proximity=fileInfo.getProximity();
    if (proximity > maxProximity) {
      maxProximity=proximity;
    }
  }
  if (maxProximity >= MIN_PROXIMITY_TRESHOLD) {
    final List<VirtualFile> files=new ArrayList<VirtualFile>();
    for (    FileInfo info : filesInfo) {
      if (info.getProximity() == maxProximity) {
        files.add(info.getFile());
      }
    }
    return files;
  }
  return Collections.emptyList();
}
