{
  final SliceNodeGuide guide=new SliceNodeGuide(treeStructure);
  WalkingState<SliceNode> walkingState=new WalkingState<SliceNode>(guide){
    @Override public void visit(    @NotNull SliceNode element){
      element.calculateDupNode();
      node(element,map).clear();
      SliceNode duplicate=element.getDuplicate();
      if (duplicate != null) {
        node(element,map).addAll(node(duplicate,map));
      }
 else {
        SliceUsage sliceUsage=element.getValue();
        Collection<? extends AbstractTreeNode> children=element.getChildren();
        if (children.isEmpty()) {
          PsiElement value=sliceUsage.getElement();
          node(element,map).addAll(ContainerUtil.singleton(value,LEAF_ELEMENT_EQUALITY));
        }
        super.visit(element);
      }
    }
    @Override public void elementFinished(    @NotNull SliceNode element){
      SliceNode parent=guide.getParent(element);
      if (parent != null) {
        node(parent,map).addAll(node(element,map));
      }
    }
  }
;
  walkingState.visit(root);
  return node(root,map);
}
