{
  SliceNode oldRootStart=oldRoot.myCachedChildren.get(0);
  SliceRootNode root=oldRoot.copy();
  root.setChanged();
  root.targetEqualUsages.clear();
  root.myCachedChildren=new ArrayList<SliceNode>(leaves.size());
  for (  final PsiElement leafExpression : leaves) {
    SliceNode newNode=filterTree(oldRootStart,new NullableFunction<SliceNode,SliceNode>(){
      public SliceNode fun(      SliceNode oldNode){
        if (oldNode.getDuplicate() != null)         return null;
        if (!node(oldNode,map).contains(leafExpression))         return null;
        return oldNode.copy();
      }
    }
,new PairProcessor<SliceNode,List<SliceNode>>(){
      public boolean process(      SliceNode node,      List<SliceNode> children){
        if (!children.isEmpty())         return true;
        PsiElement element=node.getValue().getElement();
        if (element == null)         return false;
        return element.getManager().areElementsEquivalent(element,leafExpression);
      }
    }
);
    SliceLeafValueRootNode lvNode=new SliceLeafValueRootNode(root.getProject(),leafExpression,root,Collections.singletonList(newNode),oldRoot.getValue().params);
    root.myCachedChildren.add(lvNode);
  }
  return root;
}
