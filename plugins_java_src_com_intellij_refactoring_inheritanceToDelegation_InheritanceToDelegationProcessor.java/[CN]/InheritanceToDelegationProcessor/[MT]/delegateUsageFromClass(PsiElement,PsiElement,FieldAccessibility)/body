{
  if (element instanceof PsiReferenceExpression) {
    PsiReferenceExpression referenceExpression=(PsiReferenceExpression)element;
    if (referenceExpression.getQualifierExpression() != null) {
      upcastToDelegation(referenceExpression.getQualifierExpression(),fieldAccessibility);
    }
 else {
      final String name=((PsiNamedElement)nonDelegatedMember).getName();
      final String qualifier;
      if (isStatic(nonDelegatedMember)) {
        qualifier=myBaseClass.getName();
      }
 else       if (!fieldAccessibility.isAccessible() && myGenerateGetter) {
        qualifier=myGetterName + "()";
      }
 else {
        qualifier=myFieldName;
      }
      PsiExpression newExpr=myFactory.createExpressionFromText(qualifier + "." + name,element);
      newExpr=(PsiExpression)CodeStyleManager.getInstance(myProject).reformat(newExpr);
      element.replace(newExpr);
    }
  }
 else   if (element instanceof PsiJavaCodeReferenceElement) {
    final String name=((PsiNamedElement)nonDelegatedMember).getName();
    PsiElement parent=element.getParent();
    if (!isStatic(nonDelegatedMember) && parent instanceof PsiNewExpression) {
      final PsiNewExpression newExpr=(PsiNewExpression)parent;
      if (newExpr.getQualifier() != null) {
        upcastToDelegation(newExpr.getQualifier(),fieldAccessibility);
      }
 else {
        final String qualifier;
        if (!fieldAccessibility.isAccessible() && myGenerateGetter) {
          qualifier=myGetterName + "()";
        }
 else {
          qualifier=myFieldName;
        }
        newExpr.replace(myFactory.createExpressionFromText(qualifier + "." + newExpr.getText(),parent));
      }
    }
 else {
      final String qualifier=myBaseClass.getName();
      PsiJavaCodeReferenceElement newRef=myFactory.createFQClassNameReferenceElement(qualifier + "." + name,element.getResolveScope());
      element.replace(newRef);
    }
  }
 else {
    LOG.assertTrue(false);
  }
}
