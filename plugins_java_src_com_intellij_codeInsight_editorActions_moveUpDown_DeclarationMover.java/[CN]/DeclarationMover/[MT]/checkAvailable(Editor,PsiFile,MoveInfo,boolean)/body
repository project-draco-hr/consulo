{
  if (!(file instanceof PsiJavaFile)) {
    return false;
  }
  boolean available=super.checkAvailable(editor,file,info,down);
  if (!available)   return false;
  LineRange oldRange=info.toMove;
  final Pair<PsiElement,PsiElement> psiRange=getElementRange(editor,file,oldRange);
  if (psiRange == null)   return false;
  final PsiMember firstMember=PsiTreeUtil.getParentOfType(psiRange.getFirst(),PsiMember.class,false);
  final PsiMember lastMember=PsiTreeUtil.getParentOfType(psiRange.getSecond(),PsiMember.class,false);
  if (firstMember == null || lastMember == null)   return false;
  LineRange range;
  if (firstMember == lastMember) {
    range=memberRange(firstMember,editor,oldRange);
    if (range == null)     return false;
    range.firstElement=range.lastElement=firstMember;
  }
 else {
    final PsiElement parent=PsiTreeUtil.findCommonParent(firstMember,lastMember);
    if (parent == null)     return false;
    final Pair<PsiElement,PsiElement> combinedRange=getElementRange(parent,firstMember,lastMember);
    if (combinedRange == null)     return false;
    final LineRange lineRange1=memberRange(combinedRange.getFirst(),editor,oldRange);
    if (lineRange1 == null)     return false;
    final LineRange lineRange2=memberRange(combinedRange.getSecond(),editor,oldRange);
    if (lineRange2 == null)     return false;
    range=new LineRange(lineRange1.startLine,lineRange2.endLine);
    range.firstElement=combinedRange.getFirst();
    range.lastElement=combinedRange.getSecond();
  }
  Document document=editor.getDocument();
  PsiElement sibling=down ? range.lastElement.getNextSibling() : range.firstElement.getPrevSibling();
  if (sibling == null)   return false;
  sibling=firstNonWhiteElement(sibling,down);
  final boolean areWeMovingClass=range.firstElement instanceof PsiClass;
  info.toMove=range;
  try {
    LineRange intraClassRange=moveInsideOutsideClassPosition(editor,sibling,down,areWeMovingClass);
    if (intraClassRange == null) {
      info.toMove2=new LineRange(sibling,sibling,document);
      if (down && sibling.getNextSibling() == null)       return false;
    }
 else {
      info.toMove2=intraClassRange;
    }
  }
 catch (  IllegalMoveException e) {
    info.toMove2=null;
  }
  return true;
}
