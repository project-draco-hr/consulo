{
  if (startLine == lineRange.startLine || startLine == lineRange.endLine || endLine == lineRange.startLine || endLine == lineRange.endLine) {
    return true;
  }
  List<PsiElement> memberSuspects=new ArrayList<PsiElement>();
  PsiModifierList modifierList=member instanceof PsiMember ? ((PsiMember)member).getModifierList() : null;
  if (modifierList != null)   memberSuspects.add(modifierList);
  if (member instanceof PsiClass) {
    final PsiClass aClass=(PsiClass)member;
    if (aClass instanceof PsiAnonymousClass)     return false;
    PsiIdentifier nameIdentifier=aClass.getNameIdentifier();
    if (nameIdentifier != null)     memberSuspects.add(nameIdentifier);
  }
  if (member instanceof PsiMethod) {
    final PsiMethod method=(PsiMethod)member;
    PsiIdentifier nameIdentifier=method.getNameIdentifier();
    if (nameIdentifier != null)     memberSuspects.add(nameIdentifier);
    PsiTypeElement returnTypeElement=method.getReturnTypeElement();
    if (returnTypeElement != null)     memberSuspects.add(returnTypeElement);
  }
  if (member instanceof PsiField) {
    final PsiField field=(PsiField)member;
    PsiIdentifier nameIdentifier=field.getNameIdentifier();
    memberSuspects.add(nameIdentifier);
    PsiTypeElement typeElement=field.getTypeElement();
    if (typeElement != null)     memberSuspects.add(typeElement);
  }
  TextRange lineTextRange=new TextRange(editor.getDocument().getLineStartOffset(lineRange.startLine),editor.getDocument().getLineEndOffset(lineRange.endLine));
  for (  PsiElement suspect : memberSuspects) {
    TextRange textRange=suspect.getTextRange();
    if (textRange != null && lineTextRange.intersects(textRange))     return true;
  }
  return false;
}
