{
  if (!CompilerConfigurationOld.MAKE_ENABLED) {
    return Collections.emptyList();
  }
  context.getProgressIndicator().setText(CompilerBundle.message("progress.checking.dependencies"));
  final DependencyCache dependencyCache=context.getDependencyCache();
  final Pair<int[],Set<VirtualFile>> deps=dependencyCache.findDependentClasses(context,context.getProject(),compiledWithErrors);
  final Pair<int[],Set<VirtualFile>> filteredDeps=filter != null ? filter.fun(deps) : deps;
  final Set<VirtualFile> dependentFiles=new HashSet<VirtualFile>();
  final CacheCorruptedException[] _ex={null};
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    public void run(){
      try {
        CompilerConfigurationOld compilerConfiguration=CompilerConfigurationOld.getInstance(context.getProject());
        SourceFileFinder sourceFileFinder=new SourceFileFinder(context.getProject(),context);
        final Cache cache=dependencyCache.getCache();
        for (        final int infoQName : filteredDeps.getFirst()) {
          final String qualifiedName=dependencyCache.resolve(infoQName);
          final String sourceFileName=cache.getSourceFileName(infoQName);
          final VirtualFile file=sourceFileFinder.findSourceFile(qualifiedName,sourceFileName,true);
          if (file != null) {
            dependentFiles.add(file);
            if (ApplicationManager.getApplication().isUnitTestMode()) {
              LOG.assertTrue(file.isValid());
              CompilerManagerImpl.addRecompiledPath(file.getPath());
            }
          }
 else {
            LOG.info("No source file for " + dependencyCache.resolve(infoQName) + " found; source file name="+ sourceFileName);
          }
        }
        for (        final VirtualFile file : filteredDeps.getSecond()) {
          if (!compilerConfiguration.isExcludedFromCompilation(file)) {
            dependentFiles.add(file);
            if (ApplicationManager.getApplication().isUnitTestMode()) {
              LOG.assertTrue(file.isValid());
              CompilerManagerImpl.addRecompiledPath(file.getPath());
            }
          }
        }
      }
 catch (      CacheCorruptedException e) {
        _ex[0]=e;
      }
    }
  }
);
  if (_ex[0] != null) {
    throw _ex[0];
  }
  context.getProgressIndicator().setText(dependentFiles.size() > 0 ? CompilerBundle.message("progress.found.dependent.files",dependentFiles.size()) : "");
  return dependentFiles;
}
