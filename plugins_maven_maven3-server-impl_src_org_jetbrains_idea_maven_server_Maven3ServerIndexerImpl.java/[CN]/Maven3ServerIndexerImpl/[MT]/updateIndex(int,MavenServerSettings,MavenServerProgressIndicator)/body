{
  final IndexingContext index=getIndex(id);
  try {
    File repository=index.getRepository();
    if (repository != null) {
      if (repository.exists()) {
        indicator.setIndeterminate(true);
        try {
          myIndexer.scan(index,new MyScanningListener(indicator),false);
        }
  finally {
          indicator.setIndeterminate(false);
        }
      }
    }
 else {
      final Maven3ServerEmbedderImpl embedder=new Maven3ServerEmbedderImpl(settings);
      MavenExecutionRequest r=embedder.createRequest(null,Collections.<String>emptyList(),Collections.<String>emptyList(),Collections.<String>emptyList());
      final IndexUpdateRequest request=new IndexUpdateRequest(index);
      try {
        embedder.executeWithMavenSession(r,new Runnable(){
          @Override public void run(){
            request.setResourceFetcher(new Maven3ServerIndexFetcher(index.getRepositoryId(),index.getRepositoryUrl(),embedder.getComponent(WagonManager.class),new WagonTransferListenerAdapter(indicator){
              @Override protected void downloadProgress(              long downloaded,              long total){
                super.downloadProgress(downloaded,total);
                try {
                  myIndicator.setFraction(((double)downloaded) / total);
                }
 catch (                RemoteException e) {
                  throw new RuntimeRemoteException(e);
                }
              }
              @Override public void transferCompleted(              TransferEvent event){
                super.transferCompleted(event);
                try {
                  myIndicator.setText2("Processing indices...");
                }
 catch (                RemoteException e) {
                  throw new RuntimeRemoteException(e);
                }
              }
            }
));
            try {
              myUpdater.fetchAndUpdateIndex(request);
            }
 catch (            IOException e) {
              throw new RuntimeException(e);
            }
          }
        }
);
      }
  finally {
        embedder.release();
      }
    }
  }
 catch (  RuntimeRemoteException e) {
    throw e.getCause();
  }
catch (  ProcessCanceledException e) {
    throw new MavenServerProcessCanceledException();
  }
catch (  Exception e) {
    throw new MavenServerIndexerException(wrapException(e));
  }
}
