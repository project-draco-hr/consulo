{
  final DFSTBuilder<ArchivePackageInfo> builder=new DFSTBuilder<ArchivePackageInfo>(GraphGenerator.create(CachingSemiGraph.create(new ArchivesGraph())));
  if (!builder.isAcyclic()) {
    final Pair<ArchivePackageInfo,ArchivePackageInfo> dependency=builder.getCircularDependency();
    String message=CompilerBundle.message("packaging.compiler.error.cannot.build.circular.dependency.found.between.0.and.1",dependency.getFirst().getPresentableDestination(),dependency.getSecond().getPresentableDestination());
    myContext.addMessage(CompilerMessageCategory.ERROR,message,null,-1,-1);
    return null;
  }
  ArchivePackageInfo[] archives=myArchivesToBuild.toArray(new ArchivePackageInfo[myArchivesToBuild.size()]);
  Arrays.sort(archives,builder.comparator());
  archives=ArrayUtil.reverseArray(archives);
  return archives;
}
