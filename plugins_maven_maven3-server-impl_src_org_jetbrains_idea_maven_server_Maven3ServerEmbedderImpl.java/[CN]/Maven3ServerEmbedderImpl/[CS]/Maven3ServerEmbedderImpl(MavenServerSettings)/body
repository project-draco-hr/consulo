{
  File mavenHome=settings.getMavenHome();
  if (mavenHome != null) {
    System.setProperty("maven.home",mavenHome.getPath());
  }
  final Maven3ServerConsoleLogger logger=new Maven3ServerConsoleLogger();
  logger.setThreshold(settings.getLoggingLevel());
  ClassWorld classWorld=new ClassWorld("plexus.core",Thread.currentThread().getContextClassLoader());
  MavenCli cli=new MavenCli(classWorld){
    @Override protected void customizeContainer(    PlexusContainer container){
      ((DefaultPlexusContainer)container).setLoggerManager(new BaseLoggerManager(){
        @Override protected Logger createLogger(        String s){
          return logger;
        }
      }
);
    }
  }
;
  List<String> methods=Arrays.asList("initialize","cli","properties","container");
  Class cliRequestClass=null;
  Class[] classes=MavenCli.class.getDeclaredClasses();
  for (  Class<?> each : classes) {
    if (each.getSimpleName().equals("CliRequest")) {
      cliRequestClass=each;
      break;
    }
  }
  if (cliRequestClass == null)   throw new RuntimeException("'CliRequest' class not found among '" + Arrays.toString(classes) + "'");
  Object cliRequest;
  try {
    List<String> commandLineOptions=new ArrayList<String>(settings.getUserProperties().size());
    for (    Map.Entry<Object,Object> each : settings.getUserProperties().entrySet()) {
      commandLineOptions.add("-D" + each.getKey() + "="+ each.getValue());
    }
    String[] commandLineOptionsArray=commandLineOptions.toArray(new String[commandLineOptions.size()]);
    Constructor constructor=cliRequestClass.getDeclaredConstructor(String[].class,ClassWorld.class);
    constructor.setAccessible(true);
    cliRequest=constructor.newInstance(commandLineOptionsArray,classWorld);
    for (    String each : methods) {
      Method m=MavenCli.class.getDeclaredMethod(each,cliRequestClass);
      m.setAccessible(true);
      m.invoke(cli,cliRequest);
    }
  }
 catch (  InstantiationException e) {
    throw new RuntimeException(e);
  }
catch (  NoSuchMethodException e) {
    throw new RuntimeException(e);
  }
catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
catch (  InvocationTargetException e) {
    throw new RuntimeException(e);
  }
  myContainer=FieldAccessor.<DefaultPlexusContainer>get(MavenCli.class,cli,"container");
  myContainer.getLoggerManager().setThreshold(settings.getLoggingLevel());
  myMavenSettings=buildSettings(FieldAccessor.<SettingsBuilder>get(MavenCli.class,cli,"settingsBuilder"),settings,FieldAccessor.<Properties>get(cliRequestClass,cliRequest,"systemProperties"),FieldAccessor.<Properties>get(cliRequestClass,cliRequest,"userProperties"));
}
