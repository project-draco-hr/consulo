{
  try {
    Plugin mavenPlugin=new Plugin();
    mavenPlugin.setGroupId(plugin.getGroupId());
    mavenPlugin.setArtifactId(plugin.getArtifactId());
    mavenPlugin.setVersion(plugin.getVersion());
    MavenProject project=RemoteNativeMavenProjectHolder.findProjectById(nativeMavenProjectId);
    PluginDescriptor result=getComponent(PluginManager.class).verifyPlugin(mavenPlugin,project,myMavenSettings,myLocalRepository);
    Map<MavenArtifactInfo,MavenArtifact> resolvedArtifacts=new THashMap<MavenArtifactInfo,MavenArtifact>();
    Artifact pluginArtifact=result.getPluginArtifact();
    MavenArtifactInfo artifactInfo=new MavenArtifactInfo(pluginArtifact.getGroupId(),pluginArtifact.getArtifactId(),pluginArtifact.getVersion(),pluginArtifact.getType(),null);
    resolveIfNecessary(artifactInfo,repositories,resolvedArtifacts);
    if (transitive) {
      for (      Artifact each : result.getIntroducedDependencyArtifacts()) {
        resolveIfNecessary(new MavenArtifactInfo(each.getGroupId(),each.getArtifactId(),each.getVersion(),each.getType(),null),repositories,resolvedArtifacts);
      }
      for (      ComponentDependency each : result.getDependencies()) {
        resolveIfNecessary(new MavenArtifactInfo(each.getGroupId(),each.getArtifactId(),each.getVersion(),each.getType(),null),repositories,resolvedArtifacts);
      }
    }
    return new THashSet<MavenArtifact>(resolvedArtifacts.values());
  }
 catch (  Exception e) {
    Maven3ServerGlobals.getLogger().info(e);
    return Collections.emptyList();
  }
}
