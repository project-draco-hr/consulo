{
  PsiType qualifierType=qualifier.getType();
  if (qualifierType instanceof PsiArrayType) {
    if (!processClassQualifierType(processor,((PsiArrayType)qualifierType).getComponentType(),qualifier,place))     return false;
    return true;
  }
  if (!(qualifierType instanceof PsiClassType))   return true;
  PsiClassType.ClassResolveResult result=((PsiClassType)qualifierType).resolveGenerics();
  PsiClass clazz=result.getElement();
  if (clazz == null)   return true;
  PsiClass collection=GroovyPsiManager.getInstance(place.getProject()).findClassWithCache(CommonClassNames.JAVA_UTIL_COLLECTION,place.getResolveScope());
  if (collection == null || collection.getTypeParameters().length != 1)   return true;
  PsiSubstitutor substitutor=TypeConversionUtil.getClassSubstitutor(collection,clazz,result.getSubstitutor());
  if (substitutor == null)   return true;
  PsiType componentType=substitutor.substitute(collection.getTypeParameters()[0]);
  if (componentType == null)   return true;
  if (!processClassQualifierType(processor,componentType,qualifier,place))   return false;
  return true;
}
