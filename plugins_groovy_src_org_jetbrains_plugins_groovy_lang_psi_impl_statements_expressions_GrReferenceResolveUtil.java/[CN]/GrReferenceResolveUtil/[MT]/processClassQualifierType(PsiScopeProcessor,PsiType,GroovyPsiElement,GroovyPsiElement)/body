{
  final ResolveState state;
  if (qualifierType instanceof PsiDisjunctionType) {
    qualifierType=((PsiDisjunctionType)qualifierType).getLeastUpperBound();
  }
  if (qualifierType instanceof PsiClassType) {
    PsiClassType.ClassResolveResult qualifierResult=((PsiClassType)qualifierType).resolveGenerics();
    PsiClass qualifierClass=qualifierResult.getElement();
    state=ResolveState.initial().put(PsiSubstitutor.KEY,qualifierResult.getSubstitutor()).put(ResolverProcessor.RESOLVE_CONTEXT,resolveContext);
    if (qualifierClass != null) {
      if (!qualifierClass.processDeclarations(processor,state,null,place))       return false;
    }
  }
 else   if (qualifierType instanceof PsiArrayType) {
    final GrTypeDefinition arrayClass=GroovyPsiManager.getInstance(place.getProject()).getArrayClass();
    state=ResolveState.initial();
    if (!arrayClass.processDeclarations(processor,state,null,place))     return false;
  }
 else   if (qualifierType instanceof PsiIntersectionType) {
    for (    PsiType conjunct : ((PsiIntersectionType)qualifierType).getConjuncts()) {
      if (!processClassQualifierType(processor,conjunct,resolveContext,place))       return false;
    }
    return true;
  }
 else {
    state=ResolveState.initial();
  }
  if (!ResolveUtil.processCategoryMembers(place,processor))   return false;
  if (!ResolveUtil.processNonCodeMembers(qualifierType,processor,place,state))   return false;
  return true;
}
