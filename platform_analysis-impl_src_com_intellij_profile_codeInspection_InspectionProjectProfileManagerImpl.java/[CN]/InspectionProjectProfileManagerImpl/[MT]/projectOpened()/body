{
  StartupManager startupManager=StartupManager.getInstance(myProject);
  if (startupManager == null) {
    return;
  }
  startupManager.registerPostStartupActivity(new DumbAwareRunnable(){
    @Override public void run(){
      final Set<Profile> profiles=new HashSet<Profile>();
      profiles.add(getProjectProfileImpl());
      profiles.addAll(getProfiles());
      profiles.addAll(InspectionProfileManager.getInstance().getProfiles());
      final Application app=ApplicationManager.getApplication();
      Runnable initInspectionProfilesRunnable=new Runnable(){
        @Override public void run(){
          for (          Profile profile : profiles) {
            initProfileWrapper(profile);
          }
          fireProfilesInitialized();
        }
      }
;
      if (app.isUnitTestMode() || app.isHeadlessEnvironment()) {
        initInspectionProfilesRunnable.run();
        UIUtil.dispatchAllInvocationEvents();
      }
 else {
        app.executeOnPooledThread(initInspectionProfilesRunnable);
      }
      myScopeListener=new NamedScopesHolder.ScopeListener(){
        @Override public void scopesChanged(){
          for (          Profile profile : getProfiles()) {
            ((InspectionProfile)profile).scopesChanged();
          }
        }
      }
;
      myHolder.addScopeListener(myScopeListener);
      myLocalScopesHolder.addScopeListener(myScopeListener);
      Disposer.register(myProject,new Disposable(){
        @Override public void dispose(){
          myHolder.removeScopeListener(myScopeListener);
          myLocalScopesHolder.removeScopeListener(myScopeListener);
        }
      }
);
    }
  }
);
}
