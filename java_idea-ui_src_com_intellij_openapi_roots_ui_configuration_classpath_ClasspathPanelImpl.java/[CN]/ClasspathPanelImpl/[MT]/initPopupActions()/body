{
  if (myPopupActions == null) {
    final StructureConfigurableContext context=ProjectStructureConfigurable.getInstance(myState.getProject()).getContext();
    int actionIndex=1;
    final List<AddItemPopupAction<?>> actions=new ArrayList<AddItemPopupAction<?>>();
    actions.add(new AddItemPopupAction<Library>(this,actionIndex++,ProjectBundle.message("classpath.add.simple.module.library.action"),Icons.JAR_ICON){
      protected ClasspathTableItem createTableItem(      final Library item){
        final OrderEntry[] entries=getRootModel().getOrderEntries();
        for (        OrderEntry entry : entries) {
          if (entry instanceof LibraryOrderEntry) {
            final LibraryOrderEntry libraryOrderEntry=(LibraryOrderEntry)entry;
            if (item.equals(libraryOrderEntry.getLibrary())) {
              return ClasspathTableItem.createLibItem(libraryOrderEntry);
            }
          }
        }
        LOG.error("Unknown library " + item);
        return null;
      }
      protected ClasspathElementChooserDialog<Library> createChooserDialog(){
        return new ChooseModuleLibrariesDialog(ClasspathPanelImpl.this,getRootModel().getModuleLibraryTable(),null);
      }
    }
);
    actions.add(new AddItemPopupAction<Library>(this,actionIndex++,ProjectBundle.message("classpath.add.module.library.action"),Icons.JAR_ICON){
      protected ClasspathTableItem createTableItem(      final Library item){
        final OrderEntry[] entries=getRootModel().getOrderEntries();
        for (        OrderEntry entry : entries) {
          if (entry instanceof LibraryOrderEntry) {
            final LibraryOrderEntry libraryOrderEntry=(LibraryOrderEntry)entry;
            if (item.equals(libraryOrderEntry.getLibrary())) {
              return ClasspathTableItem.createLibItem(libraryOrderEntry);
            }
          }
        }
        LOG.error("Unknown library " + item);
        return null;
      }
      protected ClasspathElementChooserDialog<Library> createChooserDialog(){
        return new CreateModuleLibraryDialog(ClasspathPanelImpl.this,getRootModel().getModuleLibraryTable());
      }
    }
);
    actions.add(new ChooseNamedLibraryAction(this,actionIndex++,ProjectBundle.message("classpath.add.project.library.action"),context.getProjectLibrariesProvider(true)));
    actions.add(new ChooseNamedLibraryAction(this,actionIndex++,ProjectBundle.message("classpath.add.global.library.action"),context.getGlobalLibrariesProvider(true)));
    for (    final LibraryTableModifiableModelProvider provider : context.getCustomLibrariesProviders(true)) {
      actions.add(new ChooseNamedLibraryAction(this,actionIndex++,provider.getLibraryTablePresentation().getDisplayName(false) + "...",provider));
    }
    actions.add(new AddItemPopupAction<Module>(this,actionIndex,ProjectBundle.message("classpath.add.module.dependency.action"),StdModuleTypes.JAVA.getNodeIcon(false)){
      protected ClasspathTableItem createTableItem(      final Module item){
        return ClasspathTableItem.createItem(getRootModel().addModuleOrderEntry(item));
      }
      protected ClasspathElementChooserDialog<Module> createChooserDialog(){
        final List<Module> chooseItems=getDependencyModules();
        if (chooseItems.isEmpty()) {
          Messages.showMessageDialog(ClasspathPanelImpl.this,ProjectBundle.message("message.no.module.dependency.candidates"),getTitle(),Messages.getInformationIcon());
          return null;
        }
        return new ChooseModulesToAddDialog(chooseItems,ProjectBundle.message("classpath.chooser.title.add.module.dependency"));
      }
    }
);
    myPopupActions=actions;
  }
}
