{
  if (myPopupActions == null) {
    int actionIndex=1;
    final List<AddItemPopupAction<?>> actions=new ArrayList<AddItemPopupAction<?>>();
    final StructureConfigurableContext context=getStructureConfigurableContext();
    actions.add(new AddModuleLibraryAction(this,actionIndex++,context));
    actions.add(new AddLibraryAction(this,actionIndex++,ProjectBundle.message("classpath.add.library.action"),context));
    actions.add(new AddItemPopupAction<Module>(this,actionIndex,ProjectBundle.message("classpath.add.module.dependency.action"),StdModuleTypes.JAVA.getNodeIcon(false)){
      protected ClasspathTableItem<?> createTableItem(      final Module item){
        return ClasspathTableItem.createItem(getRootModel().addModuleOrderEntry(item),context);
      }
      protected ClasspathElementChooser<Module> createChooser(){
        final List<Module> chooseItems=getDependencyModules();
        if (chooseItems.isEmpty()) {
          Messages.showMessageDialog(ClasspathPanelImpl.this,ProjectBundle.message("message.no.module.dependency.candidates"),getTitle(),Messages.getInformationIcon());
          return null;
        }
        return new ModuleChooser(chooseItems,ProjectBundle.message("classpath.chooser.title.add.module.dependency"),ProjectBundle.message("classpath.chooser.description.add.module.dependency"));
      }
    }
);
    myPopupActions=actions;
  }
}
