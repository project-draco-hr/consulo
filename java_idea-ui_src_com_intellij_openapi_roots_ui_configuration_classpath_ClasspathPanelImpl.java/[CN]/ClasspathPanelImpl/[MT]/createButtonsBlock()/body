{
  final boolean isAnalyzeShown=((ApplicationEx)ApplicationManager.getApplication()).isInternal();
  final JButton addButton=new JButton(ProjectBundle.message("button.add"));
  final JButton removeButton=new JButton(ProjectBundle.message("button.remove"));
  myEditButton=new JButton(ProjectBundle.message("button.edit"));
  final JButton upButton=new JButton(ProjectBundle.message("button.move.up"));
  final JButton downButton=new JButton(ProjectBundle.message("button.move.down"));
  final JButton analyzeButton=isAnalyzeShown ? new JButton(ProjectBundle.message("classpath.panel.analyze")) : null;
  final JPanel panel=new JPanel(new GridBagLayout());
  panel.add(addButton,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(2,2,0,0),0,0));
  panel.add(removeButton,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(2,2,0,0),0,0));
  panel.add(myEditButton,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(2,2,0,0),0,0));
  panel.add(upButton,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(2,2,0,0),0,0));
  panel.add(downButton,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,isAnalyzeShown ? 0.0 : 0.1,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(2,2,0,0),0,0));
  if (isAnalyzeShown) {
    panel.add(analyzeButton,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,1.0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(2,2,0,0),0,0));
  }
  myEntryTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      if (e.getValueIsAdjusting()) {
        return;
      }
      final int[] selectedRows=myEntryTable.getSelectedRows();
      boolean removeButtonEnabled=true;
      int minRow=myEntryTable.getRowCount() + 1;
      int maxRow=-1;
      for (      final int selectedRow : selectedRows) {
        minRow=Math.min(minRow,selectedRow);
        maxRow=Math.max(maxRow,selectedRow);
        final ClasspathTableItem item=myModel.getItemAt(selectedRow);
        if (!item.isRemovable()) {
          removeButtonEnabled=false;
        }
      }
      upButton.setEnabled(minRow > 0 && minRow < myEntryTable.getRowCount());
      downButton.setEnabled(maxRow >= 0 && maxRow < myEntryTable.getRowCount() - 1);
      removeButton.setEnabled(removeButtonEnabled);
      ClasspathTableItem selectedItem=selectedRows.length == 1 ? myModel.getItemAt(selectedRows[0]) : null;
      myEditButton.setEnabled(selectedItem != null && selectedItem.isEditable());
    }
  }
);
  upButton.addActionListener(new ClasspathPanelAction(this){
    @Override public void run(){
      moveSelectedRows(-1);
    }
  }
);
  downButton.addActionListener(new ClasspathPanelAction(this){
    @Override public void run(){
      moveSelectedRows(+1);
    }
  }
);
  if (isAnalyzeShown) {
    analyzeButton.addActionListener(new ClasspathPanelAction(this){
      @Override public void run(){
        AnalyzeDependenciesDialog.show(getRootModel().getModule());
      }
    }
);
  }
  addKeyboardShortcut(myEntryTable,removeButton,KeyEvent.VK_DELETE,0);
  addKeyboardShortcut(myEntryTable,addButton,KeyEvent.VK_INSERT,0);
  addKeyboardShortcut(myEntryTable,upButton,KeyEvent.VK_UP,KeyEvent.CTRL_DOWN_MASK);
  addKeyboardShortcut(myEntryTable,downButton,KeyEvent.VK_DOWN,KeyEvent.CTRL_DOWN_MASK);
  addButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      initPopupActions();
      final JBPopup popup=JBPopupFactory.getInstance().createListPopup(new BaseListPopupStep<AddItemPopupAction<?>>(null,myPopupActions){
        @Override public Icon getIconFor(        AddItemPopupAction<?> aValue){
          return aValue.getIcon();
        }
        public boolean isMnemonicsNavigationEnabled(){
          return true;
        }
        public PopupStep onChosen(        final AddItemPopupAction<?> selectedValue,        final boolean finalChoice){
          return doFinalStep(new Runnable(){
            public void run(){
              selectedValue.execute();
            }
          }
);
        }
        @NotNull public String getTextFor(        AddItemPopupAction<?> value){
          return "&" + value.getIndex() + "  "+ value.getTitle();
        }
      }
);
      popup.showUnderneathOf(addButton);
    }
  }
);
  removeButton.addActionListener(new ClasspathPanelAction(this){
    @Override public void run(){
      final List removedRows=TableUtil.removeSelectedItems(myEntryTable);
      if (removedRows.isEmpty()) {
        return;
      }
      for (      final Object removedRow : removedRows) {
        final ClasspathTableItem item=(ClasspathTableItem)((Object[])removedRow)[ClasspathTableModel.ITEM_COLUMN];
        final OrderEntry orderEntry=item.getEntry();
        if (orderEntry == null) {
          continue;
        }
        getRootModel().removeOrderEntry(orderEntry);
      }
      final int[] selectedRows=myEntryTable.getSelectedRows();
      myModel.fireTableDataChanged();
      TableUtil.selectRows(myEntryTable,selectedRows);
      final StructureConfigurableContext context=ModuleStructureConfigurable.getInstance(myState.getProject()).getContext();
      context.getDaemonAnalyzer().queueUpdate(new ModuleProjectStructureElement(context,getRootModel().getModule()));
    }
  }
);
  myEditButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      final int row=myEntryTable.getSelectedRow();
      final ClasspathTableItem item=myModel.getItemAt(row);
      final OrderEntry entry=item.getEntry();
      if (!(entry instanceof LibraryOrderEntry))       return;
      final Library library=((LibraryOrderEntry)entry).getLibrary();
      if (library == null) {
        return;
      }
      final LibraryTableModifiableModelProvider provider;
      final LibraryTable table=library.getTable();
      if (table == null) {
        final LibraryTable moduleLibraryTable=getRootModel().getModuleLibraryTable();
        provider=new LibraryTableModifiableModelProvider(){
          public LibraryTable.ModifiableModel getModifiableModel(){
            return moduleLibraryTable.getModifiableModel();
          }
        }
;
      }
 else {
        provider=ProjectStructureConfigurable.getInstance(myState.getProject()).getContext().createModifiableModelProvider(table.getTableLevel());
      }
      EditExistingLibraryDialog dialog=EditExistingLibraryDialog.createDialog(ClasspathPanelImpl.this,provider,library,myState.getProject());
      dialog.addFileChooserContext(LangDataKeys.MODULE_CONTEXT,getRootModel().getModule());
      dialog.show();
      myEntryTable.repaint();
      ModuleStructureConfigurable.getInstance(myState.getProject()).getTree().repaint();
    }
  }
);
  return panel;
}
