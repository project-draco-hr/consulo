{
  final boolean isAnalyzeShown=((ApplicationEx)ApplicationManager.getApplication()).isInternal();
  final ClasspathPanelAction removeAction=new ClasspathPanelAction(this){
    @Override public void run(){
      final List removedRows=TableUtil.removeSelectedItems(myEntryTable);
      if (removedRows.isEmpty()) {
        return;
      }
      for (      final Object removedRow : removedRows) {
        final ClasspathTableItem<?> item=(ClasspathTableItem<?>)((Object[])removedRow)[ClasspathTableModel.ITEM_COLUMN];
        final OrderEntry orderEntry=item.getEntry();
        if (orderEntry == null) {
          continue;
        }
        getRootModel().removeOrderEntry(orderEntry);
      }
      final int[] selectedRows=myEntryTable.getSelectedRows();
      myModel.fireTableDataChanged();
      TableUtil.selectRows(myEntryTable,selectedRows);
      final StructureConfigurableContext context=ModuleStructureConfigurable.getInstance(myState.getProject()).getContext();
      context.getDaemonAnalyzer().queueUpdate(new ModuleProjectStructureElement(context,getRootModel().getModule()));
    }
  }
;
  myEditButton=new AnActionButton(ProjectBundle.message("module.classpath.button.edit"),null,IconUtil.getEditIcon()){
    @Override public void actionPerformed(    AnActionEvent e){
      final OrderEntry entry=getSelectedEntry();
      if (!(entry instanceof LibraryOrderEntry))       return;
      final Library library=((LibraryOrderEntry)entry).getLibrary();
      if (library == null) {
        return;
      }
      final LibraryTable table=library.getTable();
      final String tableLevel=table != null ? table.getTableLevel() : LibraryTableImplUtil.MODULE_LEVEL;
      final LibraryTablePresentation presentation=LibraryEditingUtil.getLibraryTablePresentation(getProject(),tableLevel);
      final LibraryTableModifiableModelProvider provider=getModifiableModelProvider(tableLevel);
      EditExistingLibraryDialog dialog=EditExistingLibraryDialog.createDialog(ClasspathPanelImpl.this,provider,library,myState.getProject(),presentation,getStructureConfigurableContext());
      dialog.setContextModule(getRootModel().getModule());
      dialog.show();
      myEntryTable.repaint();
      ModuleStructureConfigurable.getInstance(myState.getProject()).getTree().repaint();
    }
  }
;
  final AnActionButton analyzeButton=new AnActionButton(ProjectBundle.message("classpath.panel.analyze"),null,SystemInfo.isMac ? PlatformIcons.TABLE_ANALYZE : PlatformIcons.ANALYZE){
    @Override public void actionPerformed(    AnActionEvent e){
      AnalyzeDependenciesDialog.show(getRootModel().getModule());
    }
  }
;
  myEntryTable.setBorder(new LineBorder(UIUtil.getBorderColor()));
  final ToolbarDecorator decorator=ToolbarDecorator.createDecorator(myEntryTable);
  decorator.setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      initPopupActions();
      final JBPopup popup=JBPopupFactory.getInstance().createListPopup(new BaseListPopupStep<AddItemPopupAction<?>>(null,myPopupActions){
        @Override public Icon getIconFor(        AddItemPopupAction<?> aValue){
          return aValue.getIcon();
        }
        @Override public boolean hasSubstep(        AddItemPopupAction<?> selectedValue){
          return selectedValue.hasSubStep();
        }
        public boolean isMnemonicsNavigationEnabled(){
          return true;
        }
        public PopupStep onChosen(        final AddItemPopupAction<?> selectedValue,        final boolean finalChoice){
          if (selectedValue.hasSubStep()) {
            return selectedValue.createSubStep();
          }
          return doFinalStep(new Runnable(){
            public void run(){
              selectedValue.execute();
            }
          }
);
        }
        @NotNull public String getTextFor(        AddItemPopupAction<?> value){
          return "&" + value.getIndex() + "  "+ value.getTitle();
        }
      }
);
      popup.show(button.getPreferredPopupPoint());
    }
  }
).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      removeAction.actionPerformed(null);
    }
  }
).setUpAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      moveSelectedRows(-1);
    }
  }
).setDownAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      moveSelectedRows(+1);
    }
  }
).addExtraAction(myEditButton);
  if (isAnalyzeShown) {
    decorator.addExtraAction(analyzeButton);
  }
  final JPanel panel=decorator.createPanel();
  myEntryTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      if (e.getValueIsAdjusting()) {
        return;
      }
      final int[] selectedRows=myEntryTable.getSelectedRows();
      boolean removeButtonEnabled=true;
      int minRow=myEntryTable.getRowCount() + 1;
      int maxRow=-1;
      for (      final int selectedRow : selectedRows) {
        minRow=Math.min(minRow,selectedRow);
        maxRow=Math.max(maxRow,selectedRow);
        final ClasspathTableItem<?> item=myModel.getItemAt(selectedRow);
        if (!item.isRemovable()) {
          removeButtonEnabled=false;
        }
      }
      ToolbarDecorator.findRemoveButton(panel).setEnabled(removeButtonEnabled);
      ClasspathTableItem<?> selectedItem=selectedRows.length == 1 ? myModel.getItemAt(selectedRows[0]) : null;
      myEditButton.setEnabled(selectedItem != null && selectedItem.isEditable());
    }
  }
);
  return panel;
}
