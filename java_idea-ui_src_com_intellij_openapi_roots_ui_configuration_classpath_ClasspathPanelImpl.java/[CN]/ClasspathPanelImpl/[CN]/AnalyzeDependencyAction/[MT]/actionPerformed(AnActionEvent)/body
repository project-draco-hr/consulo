{
  final OrderEntry selectedEntry=getSelectedEntry();
  GlobalSearchScope targetScope;
  if (selectedEntry instanceof ModuleOrderEntry) {
    final Module module=((ModuleOrderEntry)selectedEntry).getModule();
    LOG.assertTrue(module != null);
    targetScope=GlobalSearchScope.moduleScope(module);
  }
 else {
    Library library=((LibraryOrderEntry)selectedEntry).getLibrary();
    LOG.assertTrue(library != null);
    targetScope=new LibraryScope(getProject(),library);
  }
  new AnalyzeDependenciesOnSpecifiedTargetHandler(getProject(),new AnalysisScope(myState.getRootModel().getModule()),targetScope){
    @Override protected boolean canStartInBackground(){
      return false;
    }
    @Override protected boolean shouldShowDependenciesPanel(    List<DependenciesBuilder> builders){
      for (      DependenciesBuilder builder : builders) {
        for (        Set<PsiFile> files : builder.getDependencies().values()) {
          if (!files.isEmpty()) {
            Messages.showInfoMessage(myEntryTable,"Dependencies were successfully collected in \"" + ToolWindowId.DEPENDENCIES + "\" toolwindow",FindBundle.message("find.pointcut.applications.not.found.title"));
            return true;
          }
        }
      }
      if (Messages.showOkCancelDialog(myEntryTable,"No code dependencies were found. Would you like to remove the dependency?",CommonBundle.getWarningTitle(),Messages.getWarningIcon()) == DialogWrapper.OK_EXIT_CODE) {
        removeSelectedItems(TableUtil.removeSelectedItems(myEntryTable));
      }
      return false;
    }
  }
.analyze();
}
