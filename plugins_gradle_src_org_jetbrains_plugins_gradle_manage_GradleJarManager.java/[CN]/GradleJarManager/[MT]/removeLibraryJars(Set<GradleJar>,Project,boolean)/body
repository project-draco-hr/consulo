{
  GradleUtil.executeProjectChangeAction(project,jars,synchronous,new Runnable(){
    @Override public void run(){
      LibraryTable libraryTable=myPlatformFacade.getProjectLibraryTable(project);
      GradleLibraryId libraryId=jars.iterator().next().getLibraryId();
      Library library=libraryTable.getLibraryByName(libraryId.getLibraryName());
      if (library == null) {
        return;
      }
      Set<String> pathsToRemove=ContainerUtil.map2Set(jars,new Function<GradleJar,String>(){
        @Override public String fun(        GradleJar jar){
          return jar.getPath();
        }
      }
);
      Library.ModifiableModel model=library.getModifiableModel();
      try {
        for (        LibraryPathType gradlePathType : LibraryPathType.values()) {
          OrderRootType idePathType=myLibraryPathTypeMapper.map(gradlePathType);
          for (          VirtualFile file : model.getFiles(idePathType)) {
            if (pathsToRemove.contains(GradleUtil.getLocalFileSystemPath(file))) {
              model.removeRoot(file.getUrl(),idePathType);
            }
          }
        }
      }
  finally {
        model.commit();
      }
    }
  }
);
}
