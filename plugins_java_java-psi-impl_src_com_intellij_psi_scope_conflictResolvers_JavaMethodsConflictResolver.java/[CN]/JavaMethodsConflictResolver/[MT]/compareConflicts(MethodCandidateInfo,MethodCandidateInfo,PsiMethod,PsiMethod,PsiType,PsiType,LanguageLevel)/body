{
  final PsiSubstitutor siteSubstitutor1=method.getSiteSubstitutor();
  final PsiSubstitutor siteSubstitutor2=conflict.getSiteSubstitutor();
  final PsiTypeParameter[] typeParameters1=methodElement.getTypeParameters();
  final PsiTypeParameter[] typeParameters2=conflictElement.getTypeParameters();
  final PsiType[] types1AtSite={interfaceReturnType1};
  final PsiType[] types2AtSite={interfaceReturnType};
  final PsiSubstitutor methodSubstitutor1=calculateMethodSubstitutor(typeParameters1,methodElement,siteSubstitutor1,types2AtSite,types1AtSite,languageLevel);
  final PsiSubstitutor methodSubstitutor2=calculateMethodSubstitutor(typeParameters2,conflictElement,siteSubstitutor2,types1AtSite,types2AtSite,languageLevel);
  final boolean applicable12=TypeConversionUtil.isAssignable(interfaceReturnType1,methodSubstitutor1.substitute(interfaceReturnType));
  final boolean applicable21=TypeConversionUtil.isAssignable(interfaceReturnType,methodSubstitutor2.substitute(interfaceReturnType1));
  if (applicable12 || applicable21) {
    if (!applicable21) {
      return Specifics.FIRST;
    }
    if (!applicable12) {
      return Specifics.SECOND;
    }
  }
  return Specifics.NEITHER;
}
