{
  PsiMethod method1=(PsiMethod)info1.getElement();
  PsiMethod method2=(PsiMethod)info2.getElement();
  final PsiClass class1=method1.getContainingClass();
  final PsiClass class2=method2.getContainingClass();
  final PsiParameter[] params1=method1.getParameterList().getParameters();
  final PsiParameter[] params2=method2.getParameterList().getParameters();
  final PsiTypeParameter[] typeParameters1=method1.getTypeParameters();
  final PsiTypeParameter[] typeParameters2=method2.getTypeParameters();
  final PsiSubstitutor classSubstitutor1=info1.getSubstitutor();
  final PsiSubstitutor classSubstitutor2=info2.getSubstitutor();
  final int max=Math.max(params1.length,params2.length);
  PsiType[] types1=new PsiType[max];
  PsiType[] types2=new PsiType[max];
  final boolean varargsPosition=applicabilityLevel == MethodCandidateInfo.ApplicabilityLevel.VARARGS;
  for (int i=0; i < max; i++) {
    ProgressManager.checkCanceled();
    PsiType type1=params1.length > 0 ? params1[Math.min(i,params1.length - 1)].getType() : null;
    PsiType type2=params2.length > 0 ? params2[Math.min(i,params2.length - 1)].getType() : null;
    if (varargsPosition) {
      if (type1 instanceof PsiEllipsisType && type2 instanceof PsiEllipsisType && params1.length == params2.length && (!JavaVersionService.getInstance().isAtLeast(class1,JavaSdkVersion.JDK_1_7) || ((PsiArrayType)type1).getComponentType().equalsToText(CommonClassNames.JAVA_LANG_OBJECT) || ((PsiArrayType)type2).getComponentType().equalsToText(CommonClassNames.JAVA_LANG_OBJECT))) {
        type1=((PsiEllipsisType)type1).toArrayType();
        type2=((PsiEllipsisType)type2).toArrayType();
      }
 else {
        type1=type1 instanceof PsiEllipsisType ? ((PsiArrayType)type1).getComponentType() : type1;
        type2=type2 instanceof PsiEllipsisType ? ((PsiArrayType)type2).getComponentType() : type2;
      }
    }
    types1[i]=type1;
    types2[i]=type2;
  }
  boolean sameBoxing=true;
  int[] boxingHappened=new int[2];
  for (int i=0; i < types1.length; i++) {
    ProgressManager.checkCanceled();
    PsiType type1=classSubstitutor1.substitute(types1[i]);
    PsiType type2=classSubstitutor2.substitute(types2[i]);
    PsiType argType=i < getActualParameterTypes().length ? getActualParameterTypes()[i] : null;
    boolean boxingInFirst=false;
    if (isBoxingHappened(argType,type1,languageLevel)) {
      boxingHappened[0]+=1;
      boxingInFirst=true;
    }
    boolean boxingInSecond=false;
    if (isBoxingHappened(argType,type2,languageLevel)) {
      boxingHappened[1]+=1;
      boxingInSecond=true;
    }
    sameBoxing&=boxingInFirst == boxingInSecond;
  }
  if (boxingHappened[0] == 0 && boxingHappened[1] > 0)   return Specifics.FIRST;
  if (boxingHappened[0] > 0 && boxingHappened[1] == 0)   return Specifics.SECOND;
  if (sameBoxing) {
    final PsiSubstitutor siteSubstitutor1=((MethodCandidateInfo)info1).getSiteSubstitutor();
    final PsiSubstitutor siteSubstitutor2=((MethodCandidateInfo)info2).getSiteSubstitutor();
    final PsiType[] types2AtSite=typesAtSite(types2,siteSubstitutor2);
    final PsiType[] types1AtSite=typesAtSite(types1,siteSubstitutor1);
    final PsiSubstitutor methodSubstitutor1=calculateMethodSubstitutor(typeParameters1,method1,siteSubstitutor1,types1,types2AtSite,languageLevel);
    final PsiSubstitutor methodSubstitutor2=calculateMethodSubstitutor(typeParameters2,method2,siteSubstitutor2,types2,types1AtSite,languageLevel);
    final boolean applicable12=isApplicableTo(types2AtSite,method1,typeParameters1,languageLevel,methodSubstitutor1,varargsPosition);
    final boolean applicable21=isApplicableTo(types1AtSite,method2,typeParameters2,languageLevel,methodSubstitutor2,varargsPosition);
    if (applicable12 || applicable21) {
      if (applicable12 && !applicable21)       return Specifics.SECOND;
      if (applicable21 && !applicable12)       return Specifics.FIRST;
      final boolean abstract1=method1.hasModifierProperty(PsiModifier.ABSTRACT);
      final boolean abstract2=method2.hasModifierProperty(PsiModifier.ABSTRACT);
      if (abstract1 && !abstract2) {
        return Specifics.SECOND;
      }
      if (abstract2 && !abstract1) {
        return Specifics.FIRST;
      }
    }
  }
 else   if (varargsPosition) {
    final PsiType lastParamType1=classSubstitutor1.substitute(types1[types1.length - 1]);
    final PsiType lastParamType2=classSubstitutor2.substitute(types2[types1.length - 1]);
    final boolean assignable1=TypeConversionUtil.isAssignable(lastParamType2,lastParamType1);
    final boolean assignable2=TypeConversionUtil.isAssignable(lastParamType1,lastParamType2);
    if (assignable1 && !assignable2) {
      return Specifics.FIRST;
    }
    if (assignable2 && !assignable1) {
      return Specifics.SECOND;
    }
  }
  if (class1 != class2) {
    if (class2.isInheritor(class1,true) || class1.isInterface() && !class2.isInterface()) {
      if (MethodSignatureUtil.isSubsignature(method1.getSignature(info1.getSubstitutor()),method2.getSignature(info2.getSubstitutor()))) {
        return Specifics.SECOND;
      }
 else       if (method1.hasModifierProperty(PsiModifier.STATIC) && method2.hasModifierProperty(PsiModifier.STATIC) && boxingHappened[0] == 0) {
        return Specifics.SECOND;
      }
    }
 else     if (class1.isInheritor(class2,true) || class2.isInterface()) {
      if (MethodSignatureUtil.areErasedParametersEqual(method1.getSignature(PsiSubstitutor.EMPTY),method2.getSignature(PsiSubstitutor.EMPTY)) && MethodSignatureUtil.isSubsignature(method2.getSignature(info2.getSubstitutor()),method1.getSignature(info1.getSubstitutor()))) {
        return Specifics.FIRST;
      }
 else       if (method1.hasModifierProperty(PsiModifier.STATIC) && method2.hasModifierProperty(PsiModifier.STATIC) && boxingHappened[0] == 0) {
        return Specifics.FIRST;
      }
    }
  }
  final boolean raw1=PsiUtil.isRawSubstitutor(method1,classSubstitutor1);
  final boolean raw2=PsiUtil.isRawSubstitutor(method2,classSubstitutor2);
  if (raw1 ^ raw2) {
    return raw1 ? Specifics.SECOND : Specifics.FIRST;
  }
  return Specifics.NEITHER;
}
