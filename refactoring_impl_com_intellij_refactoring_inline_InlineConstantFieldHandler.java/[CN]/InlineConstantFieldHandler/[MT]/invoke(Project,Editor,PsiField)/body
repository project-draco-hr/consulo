{
  if (!CommonRefactoringUtil.checkReadOnlyStatus(project,field))   return;
  if (!field.hasModifierProperty(PsiModifier.FINAL)) {
    String message=RefactoringBundle.message("0.refactoring.is.supported.only.for.final.fields",REFACTORING_NAME);
    CommonRefactoringUtil.showErrorHint(project,editor,message,REFACTORING_NAME,HelpID.INLINE_FIELD);
    return;
  }
  if (!field.hasInitializer()) {
    String message=RefactoringBundle.message("no.initializer.present.for.the.field");
    CommonRefactoringUtil.showErrorHint(project,editor,message,REFACTORING_NAME,HelpID.INLINE_FIELD);
    return;
  }
  if (ReferencesSearch.search(field,ProjectScope.getProjectScope(project),false).findFirst() == null) {
    String message=RefactoringBundle.message("field.0.is.never.used",field.getName());
    CommonRefactoringUtil.showErrorHint(project,editor,message,REFACTORING_NAME,HelpID.INLINE_FIELD);
    return;
  }
  PsiReference reference=editor != null ? TargetElementUtilBase.findReference(editor,editor.getCaretModel().getOffset()) : null;
  if (reference != null && !field.equals(reference.resolve())) {
    reference=null;
  }
  final boolean invokedOnReference=(reference != null);
  if (!invokedOnReference) {
    if (!CommonRefactoringUtil.checkReadOnlyStatus(project,field))     return;
  }
  PsiReferenceExpression refExpression=reference instanceof PsiReferenceExpression ? (PsiReferenceExpression)reference : null;
  InlineFieldDialog dialog=new InlineFieldDialog(project,field,refExpression);
  dialog.show();
}
