{
  if (!CodeInsightUtil.prepareFileForWrite(myMethod.getContainingFile()))   return;
  PsiJavaCodeReferenceElement[] referenceElements=myMethod.getThrowsList().getReferenceElements();
  try {
    boolean alreadyThrows=false;
    for (    PsiJavaCodeReferenceElement referenceElement : referenceElements) {
      if (referenceElement.getCanonicalText().equals(myThrowsCanonicalText)) {
        alreadyThrows=true;
        if (!myShouldThrow) {
          referenceElement.delete();
          break;
        }
      }
    }
    if (myShouldThrow && !alreadyThrows) {
      final PsiElementFactory factory=myMethod.getManager().getElementFactory();
      final PsiClassType type=(PsiClassType)factory.createTypeFromText(myThrowsCanonicalText,myMethod);
      PsiJavaCodeReferenceElement ref=factory.createReferenceElementByType(type);
      ref=(PsiJavaCodeReferenceElement)PsiManager.getInstance(project).getCodeStyleManager().shortenClassReferences(ref);
      myMethod.getThrowsList().add(ref);
    }
    UndoManager.getInstance(file.getProject()).markDocumentForUndo(file);
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
