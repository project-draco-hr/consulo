{
  List<Point> points=new ArrayList<Point>();
  Point selected=null;
  Map<SwitchTarget,Point> target2Point=new HashMap<SwitchTarget,Point>();
  for (  SwitchTarget each : myTargets) {
    Rectangle eachRec=each.getRectangle().getRectangleOn(myRootComponent);
    Point eachPoint=null;
switch (direction) {
case up:
      eachPoint=new Point(eachRec.x + eachRec.width / 2,eachRec.y + eachRec.height);
    break;
case down:
  eachPoint=new Point(eachRec.x + eachRec.width,eachRec.y);
break;
case left:
eachPoint=new Point(eachRec.x + eachRec.width,eachRec.y + eachRec.height / 2);
break;
case right:
eachPoint=new Point(eachRec.x,eachRec.y + eachRec.height / 2);
break;
}
if (each.equals(mySelection)) {
switch (direction) {
case up:
selected=new Point(eachRec.x + eachRec.width / 2,eachRec.y);
break;
case down:
selected=new Point(eachRec.x + eachRec.width / 2,eachRec.y + eachRec.height);
break;
case left:
selected=new Point(eachRec.x,eachRec.y + eachRec.height / 2);
break;
case right:
selected=new Point(eachRec.x + eachRec.width,eachRec.y + eachRec.y / 2);
break;
}
}
points.add(eachPoint);
target2Point.put(each,eachPoint);
}
TreeMap<Integer,SwitchTarget> distance=new TreeMap<Integer,SwitchTarget>();
for (SwitchTarget eachTarget : myTargets) {
Point eachPoint=target2Point.get(eachTarget);
if (selected == eachPoint) continue;
double eachDistance=sqrt(abs(eachPoint.getX() - selected.getX())) + sqrt(abs(eachPoint.getY() - selected.getY()));
distance.put((int)eachDistance,eachTarget);
}
for (Integer eachDistance : distance.keySet()) {
SwitchTarget eachTarget=distance.get(eachDistance);
Point eachPoint=target2Point.get(eachTarget);
switch (direction) {
case up:
if (eachPoint.y < selected.y) {
return eachTarget;
}
break;
case down:
if (eachPoint.y > selected.y) {
return eachTarget;
}
break;
case left:
if (eachPoint.x < selected.x) {
return eachTarget;
}
break;
case right:
if (eachPoint.x > selected.x) {
return eachTarget;
}
break;
}
}
return distance.values().iterator().next();
}
