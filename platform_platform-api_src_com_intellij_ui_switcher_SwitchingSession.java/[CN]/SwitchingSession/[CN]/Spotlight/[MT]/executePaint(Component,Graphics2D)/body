{
  if (!myCanPaint)   return;
  int inset=0;
  int selectedInset=-8;
  Set<Area> shapes=new HashSet<Area>();
  Area selected=null;
  boolean hasIntersections=false;
  Rectangle clip=g.getClipBounds();
  myArea=new Area(clip);
  for (  SwitchTarget each : myTargets) {
    RelativeRectangle eachSimpleRec=each.getRectangle();
    if (eachSimpleRec == null)     continue;
    boolean isSelected=each.equals(mySelection);
    Rectangle eachBaseRec=eachSimpleRec.getRectangleOn(myRoot);
    Rectangle eachShape;
    if (isSelected) {
      eachShape=new Rectangle(eachBaseRec.x + selectedInset,eachBaseRec.y + selectedInset,eachBaseRec.width - selectedInset - selectedInset,eachBaseRec.height - selectedInset - selectedInset);
    }
 else {
      eachShape=new Rectangle(eachBaseRec.x + inset,eachBaseRec.y + inset,eachBaseRec.width - inset - inset,eachBaseRec.height - inset - inset);
    }
    if (!hasIntersections) {
      hasIntersections=clip.contains(eachShape) || clip.intersects(eachShape);
    }
    Area eachArea=new Area(new RoundRectangle2D.Double(eachShape.x,eachShape.y,eachShape.width,eachShape.height,6,6));
    shapes.add(eachArea);
    if (isSelected) {
      selected=eachArea;
    }
  }
  Color fillColor=new Color(0f,0f,0f,0.25f);
  if (!hasIntersections) {
    g.setColor(fillColor);
    g.fillRect(clip.x,clip.y,clip.width,clip.height);
    return;
  }
  for (  Area each : shapes) {
    myArea.subtract(each);
    if (each != selected) {
      each.subtract(selected);
    }
  }
  GraphicsConfig cfg=new GraphicsConfig(g);
  cfg.setAntialiasing(true);
  g.setColor(fillColor);
  g.fill(myArea);
  g.setColor(Color.lightGray);
  for (  Shape each : shapes) {
    if (each != selected) {
      g.draw(each);
    }
  }
  if (selected != null) {
    g.setColor(Color.darkGray);
    g.setStroke(new BasicStroke(2));
    g.draw(selected);
  }
  cfg.restore();
}
