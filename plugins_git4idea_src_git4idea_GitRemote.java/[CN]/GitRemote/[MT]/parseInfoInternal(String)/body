{
  TreeMap<String,String> mapping=new TreeMap<String,String>();
  TreeSet<String> branches=new TreeSet<String>();
  StringScanner s=new StringScanner(output);
  if (s.tryConsume("* ") && !s.line().endsWith(myName)) {
    throw new IllegalStateException("Unexpected format for 'git remote show'" + output);
  }
  if (!s.hasMoreData()) {
    throw new IllegalStateException("Premature end from 'git remote show'" + output);
  }
  do {
    if (s.tryConsume(SHOW_MAPPING_PREFIX)) {
      String local=s.line();
      String remote=s.line().trim();
      mapping.put(local,remote);
    }
 else     if (s.tryConsume(SHOW_BRANCHES_LINE)) {
      s.line();
      if (s.tryConsume("    ")) {
        ContainerUtil.addAll(branches,s.line().split(" "));
      }
    }
 else     if (s.tryConsume("  Remote branch")) {
      s.line();
      while (s.tryConsume("    ")) {
        branches.add(s.line().trim());
      }
    }
 else     if (s.tryConsume("  Local branch configured for 'git pull':")) {
      s.line();
      while (s.tryConsume("    ")) {
        Matcher m=PULL_PATTERN.matcher(s.line());
        if (m.matches()) {
          String local=m.group(1);
          String remote=m.group(2);
          mapping.put(local,remote);
        }
      }
    }
 else {
      s.line();
    }
  }
 while (s.hasMoreData());
  return new Info(Collections.unmodifiableSortedMap(mapping),Collections.unmodifiableSortedSet(branches));
}
