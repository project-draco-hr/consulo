{
  if (myProject.isDefault())   return null;
  if (anImport) {
    final ProjectBuilder builder=runModuleWizard(parent,true);
    if (builder != null) {
      final List<Module> modules=new ArrayList<Module>();
      final List<Module> commitedModules;
      if (builder instanceof ProjectImportBuilder<?>) {
        final ModifiableArtifactModel artifactModel=ProjectStructureConfigurable.getInstance(myProject).getArtifactsStructureConfigurable().getModifiableArtifactModel();
        commitedModules=((ProjectImportBuilder<?>)builder).commit(myProject,myModuleModel,this,artifactModel);
      }
 else {
        commitedModules=builder.commit(myProject,myModuleModel,this);
      }
      if (commitedModules != null) {
        modules.addAll(commitedModules);
      }
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        @Override public void run(){
          for (          Module module : modules) {
            getOrCreateModuleEditor(module);
          }
        }
      }
);
      return modules;
    }
  }
 else {
    FileChooserDescriptor fileChooserDescriptor=new FileChooserDescriptor(false,true,false,false,false,false){
      @RequiredDispatchThread @Override public boolean isFileSelectable(      VirtualFile file){
        if (!super.isFileSelectable(file)) {
          return false;
        }
        for (        Module module : myModuleModel.getModules()) {
          VirtualFile moduleDir=module.getModuleDir();
          if (moduleDir != null && moduleDir.equals(file)) {
            return false;
          }
        }
        return true;
      }
    }
;
    fileChooserDescriptor.setTitle(ProjectBundle.message("choose.module.home"));
    final VirtualFile moduleDir=FileChooser.chooseFile(fileChooserDescriptor,myProject,null);
    if (moduleDir == null) {
      return null;
    }
    final NewProjectDialog dialog=new NewProjectDialog(myProject,moduleDir);
    final com.intellij.openapi.util.Ref<Module> moduleRef=com.intellij.openapi.util.Ref.create();
    if (dialog.showAndGet()) {
      DumbService.allowStartingDumbModeInside(DumbModePermission.MAY_START_BACKGROUND,new Runnable(){
        @Override public void run(){
          moduleRef.set(NewProjectAction.doCreate(dialog.getProjectPanel(),myModuleModel,moduleDir,false));
        }
      }
);
    }
    final Module newModule=moduleRef.get();
    if (newModule == null) {
      return null;
    }
    ApplicationManager.getApplication().runWriteAction(new Runnable(){
      @Override public void run(){
        getOrCreateModuleEditor(newModule);
        Collections.sort(myModuleEditors,myModuleEditorComparator);
      }
    }
);
    processModuleCountChanged();
    return Collections.singletonList(newModule);
  }
  return null;
}
