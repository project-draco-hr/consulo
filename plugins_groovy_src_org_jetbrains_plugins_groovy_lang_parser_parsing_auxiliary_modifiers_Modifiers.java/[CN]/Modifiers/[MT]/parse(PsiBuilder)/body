{
  PsiBuilder.Marker modifiersMarker=builder.mark();
  if (ParserUtils.lookAhead(builder,kDEF)) {
    ParserUtils.eatElement(builder,kDEF);
    ParserUtils.getToken(builder,mNLS);
    modifiersMarker.done(MODIFIER);
    return MODIFIER;
  }
  IElementType annotation=Annotation.parse(builder);
  IElementType modifier=Modifier.parse(builder);
  ParserUtils.getToken(builder,mNLS);
  if (!(ANNOTATION.equals(annotation) || MODIFIER.equals(modifier))) {
    modifiersMarker.rollbackTo();
    builder.error(GroovyBundle.message("annotation.or.modifier.expected"));
    return WRONGWAY;
  }
  while (ANNOTATION.equals(annotation) || MODIFIER.equals(modifier)) {
    annotation=Annotation.parse(builder);
    modifier=Modifier.parse(builder);
    ParserUtils.getToken(builder,mNLS);
  }
  modifiersMarker.done(MODIFIERS);
  return MODIFIERS;
}
