{
  SmartPointerManager smartPointerManager=SmartPointerManager.getInstance(myProject);
  for (  PsiLanguageInjectionHost.Shred shred : shreds) {
    final RangeMarker rangeMarker=myNewDocument.createRangeMarker(shred.getRange().getStartOffset() + shred.getPrefix().length(),shred.getRange().getEndOffset() - shred.getSuffix().length());
    final TextRange rangeInsideHost=shred.getRangeInsideHost();
    PsiLanguageInjectionHost host=shred.getHost();
    boolean oneCharOnly=host.getText().startsWith("'") && "JAVA".equals(host.getLanguage().getID());
    RangeMarker origMarker=myOrigDocument.createRangeMarker(rangeInsideHost.shiftRight(host.getTextRange().getStartOffset()));
    SmartPsiElementPointer<PsiLanguageInjectionHost> elementPointer=smartPointerManager.createSmartPsiElementPointer(host);
    Trinity<RangeMarker,RangeMarker,SmartPsiElementPointer> markers=Trinity.<RangeMarker,RangeMarker,SmartPsiElementPointer>create(origMarker,rangeMarker,elementPointer);
    myMarkers.add(markers);
    markers.first.setGreedyToRight(true);
    markers.second.setGreedyToRight(true);
    markers.first.setGreedyToLeft(true);
    markers.second.setGreedyToLeft(true);
  }
  initGuardedBlocks(shreds);
}
