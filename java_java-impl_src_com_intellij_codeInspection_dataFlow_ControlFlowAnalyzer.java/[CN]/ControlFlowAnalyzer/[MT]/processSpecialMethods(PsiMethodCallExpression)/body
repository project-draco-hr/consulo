{
  PsiReferenceExpression methodExpression=expression.getMethodExpression();
  PsiExpression qualifierExpression=methodExpression.getQualifierExpression();
  PsiMethod resolved=expression.resolveMethod();
  if (resolved != null) {
    @NonNls String methodName=resolved.getName();
    PsiExpression[] params=expression.getArgumentList().getExpressions();
    PsiClass owner=resolved.getContainingClass();
    final int exitPoint=getEndOffset(expression) - 1;
    if (owner != null) {
      final String className=owner.getQualifiedName();
      if ("java.lang.System".equals(className)) {
        if ("exit".equals(methodName)) {
          pushParameters(params,-1);
          addInstruction(new ReturnInstruction());
          return true;
        }
      }
 else       if ("junit.framework.Assert".equals(className) || "org.junit.Assert".equals(className) || "junit.framework.TestCase".equals(className)|| "org.testng.Assert".equals(className)) {
        boolean testng="org.testng.Assert".equals(className);
        if ("fail".equals(methodName)) {
          pushParameters(params,-1);
          returnCheckingFinally();
          return true;
        }
        int checkedParam=testng ? 0 : params.length - 1;
        if ("assertTrue".equals(methodName)) {
          pushParameters(params,checkedParam);
          conditionalExit(exitPoint,false);
          return true;
        }
        if ("assertFalse".equals(methodName)) {
          pushParameters(params,checkedParam);
          conditionalExit(exitPoint,true);
          return true;
        }
        if ("assertNull".equals(methodName)) {
          pushParameters(params,checkedParam);
          handleAssertNullityMethod(expression,exitPoint,false);
          return true;
        }
        if ("assertNotNull".equals(methodName)) {
          pushParameters(params,checkedParam);
          handleAssertNullityMethod(expression,exitPoint,true);
          return true;
        }
        return false;
      }
    }
    ConditionChecker checker=ConditionCheckManager.findConditionChecker(resolved);
    if (checker != null) {
      pushParameters(params,checker.getCheckedParameterIndex());
      ConditionChecker.Type type=checker.getConditionCheckType();
      if (type == ConditionChecker.Type.ASSERT_IS_NULL_METHOD || type == ConditionChecker.Type.ASSERT_IS_NOT_NULL_METHOD) {
        handleAssertNullityMethod(expression,exitPoint,type == ConditionChecker.Type.ASSERT_IS_NOT_NULL_METHOD);
      }
 else       if (type == ConditionChecker.Type.IS_NULL_METHOD || type == ConditionChecker.Type.IS_NOT_NULL_METHOD) {
        addInstruction(new PushInstruction(myFactory.getConstFactory().getNull(),null));
        addInstruction(new BinopInstruction(type == ConditionChecker.Type.IS_NULL_METHOD ? JavaTokenType.EQEQ : JavaTokenType.NE,null,expression.getProject()));
      }
 else {
        conditionalExit(exitPoint,type == ConditionChecker.Type.ASSERT_FALSE_METHOD);
      }
      return true;
    }
    if (qualifierExpression != null) {
      if (qualifierExpression.textMatches("LOG")) {
        final PsiType qualifierType=qualifierExpression.getType();
        if (qualifierType != null && qualifierType.equalsToText("com.intellij.openapi.diagnostic.Logger")) {
          if ("error".equals(methodName)) {
            pushParameters(params,-1);
            returnCheckingFinally();
            return true;
          }
        }
      }
    }
  }
  return false;
}
