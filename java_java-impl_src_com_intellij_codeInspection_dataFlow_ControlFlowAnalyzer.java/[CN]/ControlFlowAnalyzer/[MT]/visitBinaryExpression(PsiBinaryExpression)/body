{
  startElement(expression);
  try {
    DfaValue dfaValue=myFactory.create(expression);
    if (dfaValue != null) {
      addInstruction(new PushInstruction(dfaValue,expression));
    }
 else {
      IElementType op=expression.getOperationSign().getTokenType();
      PsiExpression lExpr=expression.getLOperand();
      PsiExpression rExpr=expression.getROperand();
      if (rExpr == null) {
        pushUnknown();
        return;
      }
      PsiType type=expression.getType();
      if (op == JavaTokenType.ANDAND) {
        generateAndExpression(lExpr,rExpr,type);
      }
 else       if (op == JavaTokenType.OROR) {
        generateOrExpression(lExpr,rExpr,type);
      }
 else       if (op == JavaTokenType.XOR && PsiType.BOOLEAN.equals(type)) {
        generateXorExpression(expression,lExpr,rExpr,type);
      }
 else {
        lExpr.accept(this);
        boolean comparing=op == JavaTokenType.EQEQ || op == JavaTokenType.NE;
        PsiType lType=lExpr.getType();
        PsiType rType=rExpr.getType();
        boolean comparingRef=comparing && !TypeConversionUtil.isPrimitiveAndNotNull(lType) && !TypeConversionUtil.isPrimitiveAndNotNull(rType);
        boolean comparingPrimitiveNumerics=comparing && TypeConversionUtil.isPrimitiveAndNotNull(lType) && TypeConversionUtil.isPrimitiveAndNotNull(rType)&& TypeConversionUtil.isNumericType(lType)&& TypeConversionUtil.isNumericType(rType);
        PsiType castType=comparingPrimitiveNumerics ? PsiType.LONG : type;
        if (!comparingRef) {
          generateBoxingUnboxingInstructionFor(lExpr,castType);
        }
        rExpr.accept(this);
        if (!comparingRef) {
          generateBoxingUnboxingInstructionFor(rExpr,castType);
        }
        String opSign=expression.getOperationSign().getText();
        if ("+".equals(opSign)) {
          if (type == null || !type.equalsToText("java.lang.String")) {
            opSign=null;
          }
        }
        PsiElement psiAnchor=expression.isPhysical() ? expression : null;
        addInstruction(new BinopInstruction(opSign,psiAnchor,expression.getProject()));
      }
    }
  }
  finally {
    finishElement(expression);
  }
}
