{
  startElement(statement);
  PsiCodeBlock finallyBlock=statement.getFinallyBlock();
  if (finallyBlock != null) {
    myCatchStack.push(new CatchDescriptor(finallyBlock));
  }
  int catchesPushCount=0;
  PsiCatchSection[] sections=statement.getCatchSections();
  for (int i=sections.length - 1; i >= 0; i--) {
    PsiCatchSection section=sections[i];
    PsiCodeBlock catchBlock=section.getCatchBlock();
    PsiParameter parameter=section.getParameter();
    if (parameter != null && catchBlock != null) {
      PsiType type=parameter.getType();
      if (type instanceof PsiClassType || type instanceof PsiDisjunctionType) {
        myCatchStack.push(new CatchDescriptor(parameter,catchBlock));
        catchesPushCount++;
        continue;
      }
    }
    throw new CantAnalyzeException();
  }
  int endOffset=finallyBlock == null ? getEndOffset(statement) : getStartOffset(finallyBlock) - 2;
  PsiResourceList resourceList=statement.getResourceList();
  if (resourceList != null) {
    resourceList.accept(this);
  }
  PsiCodeBlock tryBlock=statement.getTryBlock();
  if (tryBlock != null) {
    tryBlock.accept(this);
  }
  for (int i=0; i < catchesPushCount; i++)   myCatchStack.pop();
  addInstruction(new GotoInstruction(endOffset));
  for (  PsiCatchSection section : sections) {
    section.accept(this);
    addInstruction(new GotoInstruction(endOffset));
  }
  if (finallyBlock != null) {
    myCatchStack.pop();
    addInstruction(new GosubInstruction(getStartOffset(finallyBlock)));
    addInstruction(new GotoInstruction(getEndOffset(statement)));
    finallyBlock.accept(this);
    addInstruction(new ReturnFromSubInstruction());
  }
  finishElement(statement);
}
