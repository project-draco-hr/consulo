{
  final Collection<Pair<VirtualFile,String>> toLoad=myCommitIdsHolder.get(ourLoadSize);
  if (toLoad.isEmpty())   return;
  myQueue.run(new Task.Backgroundable(myProject,"Load git commits details",false,BackgroundFromStartOption.getInstance()){
    @Override public void run(    @NotNull ProgressIndicator indicator){
      final MultiMap<VirtualFile,String> map=new MultiMap<VirtualFile,String>();
      for (      Pair<VirtualFile,String> pair : toLoad) {
        map.putValue(pair.getFirst(),pair.getSecond());
      }
      for (      VirtualFile virtualFile : map.keySet()) {
        try {
          final Collection<String> values=map.get(virtualFile);
          final List<GitCommit> commitDetails=myAccesses.get(virtualFile).getCommitDetails(values);
          for (          GitCommit commitDetail : commitDetails) {
            myLinesCache.consume(commitDetail);
          }
          ApplicationManager.getApplication().invokeLater(new Runnable(){
            @Override public void run(){
              myUIRefresh.setSomeDataReadyState();
            }
          }
,myModalityState);
        }
 catch (        final VcsException e) {
          ApplicationManager.getApplication().invokeLater(new Runnable(){
            @Override public void run(){
              myUIRefresh.acceptException(e);
            }
          }
,myModalityState);
        }
      }
      if (myCommitIdsHolder.haveData()) {
        scheduleDetailsLoad();
      }
    }
  }
);
}
