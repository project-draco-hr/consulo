{
  final Application application=ApplicationManager.getApplication();
  application.assertIsDispatchThread();
  final int current;
synchronized (myLock) {
    current=++myLoadId;
    mySomeDataShown=false;
  }
  final boolean drawHierarchy=filters.isEmpty();
  myQueue.run(new Task.Backgroundable(myProject,"Git log refresh",false,BackgroundFromStartOption.getInstance()){
    @Override public void run(    @NotNull ProgressIndicator indicator){
      try {
        final Join join=new Join(myAccesses.size(),new MyJoin(current));
        final Runnable joinCaller=new Runnable(){
          @Override public void run(){
            join.complete();
          }
        }
;
        myTreeComposite.clearMembers();
        final List<LoaderBase> endOfTheList=new LinkedList<LoaderBase>();
        for (        VirtualFile vf : myRootsList) {
          final LowLevelAccess access=myAccesses.get(vf);
          final Consumer<CommitHashPlusParents> consumer=createCommitsHolderConsumer(drawHierarchy);
          final Consumer<List<CommitHashPlusParents>> listConsumer=new RefreshingCommitsPackConsumer(current,consumer);
          final BufferedListConsumer<CommitHashPlusParents> bufferedListConsumer=new BufferedListConsumer<CommitHashPlusParents>(15,listConsumer,400);
          bufferedListConsumer.setFlushListener(joinCaller);
          final long start=System.currentTimeMillis();
          final boolean allDataAlreadyLoaded=FullDataLoader.load(myLinesCache,access,startingPoints,filters,bufferedListConsumer.asConsumer(),ourTestCount);
          final long end=System.currentTimeMillis();
          bufferedListConsumer.flushPart();
          if (allDataAlreadyLoaded) {
            bufferedListConsumer.flush();
          }
 else {
            final boolean loadFull=(end - start) > ourTestTimeThreshold;
            if (loadFull) {
              final LoaderBase loaderBase=new LoaderBase(access,bufferedListConsumer,filters,ourTestCount,loadFull,startingPoints,myLinesCache,ourSlowPreloadCount);
              loaderBase.execute();
              endOfTheList.add(new LoaderBase(access,bufferedListConsumer,filters,ourSlowPreloadCount,false,startingPoints,myLinesCache,-1));
            }
 else {
              final LoaderBase loaderBase=new LoaderBase(access,bufferedListConsumer,filters,ourTestCount,loadFull,startingPoints,myLinesCache,-1);
              loaderBase.execute();
            }
          }
        }
        myQueue.run(new Task.Backgroundable(myProject,"Git log refresh",false,BackgroundFromStartOption.getInstance()){
          @Override public void run(          @NotNull ProgressIndicator indicator){
            for (            LoaderBase loaderBase : endOfTheList) {
              try {
                loaderBase.execute();
              }
 catch (              VcsException e) {
                myUIRefresh.acceptException(e);
              }
            }
          }
        }
);
      }
 catch (      VcsException e) {
        myUIRefresh.acceptException(e);
      }
catch (      MyStopListenToOutputException e) {
      }
 finally {
      }
    }
  }
);
}
