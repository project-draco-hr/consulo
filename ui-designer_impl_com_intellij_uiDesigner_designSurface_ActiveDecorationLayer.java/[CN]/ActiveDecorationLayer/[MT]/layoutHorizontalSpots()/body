{
  final RadRootContainer rootContainer=myEditor.getRootContainer();
  for (Iterator<Map.Entry<RadContainer,ArrayList<ActiveSpot>>> i=myHorizontalSpots.entrySet().iterator(); i.hasNext(); ) {
    final Map.Entry<RadContainer,ArrayList<ActiveSpot>> entry=i.next();
    final RadContainer container=(RadContainer)FormEditingUtil.findComponent(rootContainer,entry.getKey().getId());
    final ArrayList<ActiveSpot> spots=entry.getValue();
    if (container == null || !container.hasDragger() || !container.isGrid()) {
      for (int j=spots.size() - 1; j >= 0; j--) {
        disposeSpot(spots.get(j));
      }
      i.remove();
    }
 else {
      final GridLayoutManager layout=(GridLayoutManager)container.getLayout();
      final int columnCount=layout.getColumnCount();
      if (columnCount > spots.size()) {
        for (int j=columnCount - spots.size() - 1; j >= 0; j--) {
          createSpot(spots);
        }
      }
 else       if (columnCount < spots.size()) {
        for (int j=spots.size() - columnCount - 1; j >= 0; j--) {
          disposeSpot(spots.remove(j));
        }
      }
    }
  }
  FormEditingUtil.iterate(rootContainer,new FormEditingUtil.ComponentVisitor<RadComponent>(){
    public boolean visit(    final RadComponent component){
      if (!(component instanceof RadContainer)) {
        return true;
      }
      final RadContainer container=(RadContainer)component;
      if (!container.isGrid() || !container.hasDragger() || myHorizontalSpots.containsKey(container)) {
        return true;
      }
      final GridLayoutManager layout=(GridLayoutManager)container.getLayout();
      final ArrayList<ActiveSpot> spots=new ArrayList<ActiveSpot>();
      myHorizontalSpots.put(container,spots);
      for (int i=layout.getColumnCount() - 1; i >= 0; i--) {
        createSpot(spots);
      }
      return true;
    }
  }
);
  for (  final Map.Entry<RadContainer,ArrayList<ActiveSpot>> entry : myHorizontalSpots.entrySet()) {
    final RadContainer container=entry.getKey();
    LOG.assertTrue(container.isGrid());
    final GridLayoutManager layout=(GridLayoutManager)container.getLayout();
    final ArrayList<ActiveSpot> spots=entry.getValue();
    LOG.assertTrue(spots.size() == layout.getColumnCount());
    final int[] widths=layout.getWidths();
    final int[] xs=layout.getXs();
    final JComponent delegee=container.getDelegee();
    final Point topLeftPoint=SwingUtilities.convertPoint(delegee,0,0,this);
    for (int j=widths.length - 1; j >= 0; j--) {
      final ActiveSpot spot=spots.get(j);
      spot.setContainer(container);
      spot.setCell(j);
      spot.setOrientation(SwingConstants.HORIZONTAL);
      spot.setCellSize(widths[j]);
      spot.updateActions();
      final Dimension prefSize=spot.getPreferredSize();
      final int height=prefSize.height;
      final int shift=Math.max(0,widths[j] - prefSize.width) / 2;
      spot.setBounds(topLeftPoint.x + xs[j] + shift,topLeftPoint.y - height,widths[j] - shift,height);
      spot.validate();
    }
  }
}
