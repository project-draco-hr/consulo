{
  myStatic=isStatic;
  myScope=scope;
  final MultiMap<String,PsiMethod> byName=new MultiMap<String,PsiMethod>();
  myPsiManager=PsiManager.getInstance(categoryClass.getProject());
  for (  PsiMethod m : categoryClass.getMethods()) {
    final PsiParameter[] params=m.getParameterList().getParameters();
    if (params.length == 0)     continue;
    byName.putValue(m.getName(),m);
  }
  this.originalMethodsByName=byName;
  this.originalMethodByType=new VolatileNotNullLazyValue<MultiMap<String,PsiMethod>>(){
    @NotNull @Override protected MultiMap<String,PsiMethod> compute(){
      MultiMap<String,PsiMethod> map=new MultiMap<String,PsiMethod>();
      for (      PsiMethod method : originalMethodsByName.values()) {
        map.putValue(getCategoryTargetType(method).getCanonicalText(),method);
      }
      return map;
    }
  }
;
}
