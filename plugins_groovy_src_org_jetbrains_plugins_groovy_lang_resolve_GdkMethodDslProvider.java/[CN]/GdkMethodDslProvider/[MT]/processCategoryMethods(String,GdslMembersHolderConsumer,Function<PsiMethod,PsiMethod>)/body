{
  final GlobalSearchScope scope=consumer.getResolveScope();
  final PsiClass categoryClass=JavaPsiFacade.getInstance(consumer.getProject()).findClass(className,scope);
  if (categoryClass == null) {
    return;
  }
  final VolatileNotNullLazyValue<MultiMap<String,PsiMethod>> methodsMap=new VolatileNotNullLazyValue<MultiMap<String,PsiMethod>>(){
    @NotNull @Override protected MultiMap<String,PsiMethod> compute(){
      return retrieveMethodMap(consumer.getProject(),scope,converter,categoryClass);
    }
  }
;
  consumer.addMemberHolder(new CustomMembersHolder(){
    @Override public boolean processMembers(    GroovyClassDescriptor descriptor,    PsiScopeProcessor processor,    ResolveState state){
      final PsiType psiType=descriptor.getPsiType();
      if (psiType == null)       return true;
      final MultiMap<String,PsiMethod> map=methodsMap.getValue();
      for (      String superType : ResolveUtil.getAllSuperTypes(psiType,descriptor.getProject()).keySet()) {
        for (        PsiMethod method : map.get(superType)) {
          if (!processor.execute(method,state)) {
            return false;
          }
        }
      }
      return true;
    }
  }
);
}
