{
  return CachedValuesManager.getManager(project).getCachedValue(categoryClass,METHOD_KEY,new CachedValueProvider<Pair<Set<String>,MultiMap<String,PsiMethod>>>(){
    @Override public Result<Pair<Set<String>,MultiMap<String,PsiMethod>>> compute(){
      Set<String> methodNames=new HashSet<String>();
      MultiMap<String,PsiMethod> map=new MultiMap<String,PsiMethod>();
      PsiManager manager=PsiManager.getInstance(project);
      for (      PsiMethod m : categoryClass.getMethods()) {
        final PsiParameter[] params=m.getParameterList().getParameters();
        if (params.length == 0)         continue;
        final PsiType parameterType=params[0].getType();
        PsiType targetType=TypesUtil.boxPrimitiveType(TypeConversionUtil.erasure(parameterType),manager,scope);
        methodNames.add(m.getName());
        map.putValue(targetType.getCanonicalText(),converter.fun(m));
      }
      final ProjectRootManager rootManager=ProjectRootManager.getInstance(project);
      final VirtualFile vfile=categoryClass.getContainingFile().getVirtualFile();
      if (vfile != null && (rootManager.getFileIndex().isInLibraryClasses(vfile) || rootManager.getFileIndex().isInLibrarySource(vfile))) {
        return Result.create(Pair.create(methodNames,map),rootManager);
      }
      return Result.create(Pair.create(methodNames,map),PsiModificationTracker.JAVA_STRUCTURE_MODIFICATION_COUNT,rootManager);
    }
  }
,false);
}
