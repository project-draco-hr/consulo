{
  final MetaDataRegistrar registrar=MetaDataRegistrar.getInstance();
  registrar.registerMetaData(new AndFilter(new NamespaceFilter(ProjectLoader.RNG_NAMESPACE),new ClassFilter(XmlDocument.class)),RngNsDescriptor.class);
  registrar.registerMetaData(new ClassFilter(RncDocument.class),RngNsDescriptor.class);
  registrar.registerMetaData(new ElementFilter(){
    public boolean isAcceptable(    Object element,    PsiElement context){
      if (element instanceof XmlTag) {
        final XmlTag tag=(XmlTag)element;
        final DomElement domElement=DomManager.getDomManager(tag.getProject()).getDomElement(tag);
        return domElement instanceof RngDefine;
      }
      return false;
    }
    public boolean isClassAcceptable(    Class hintClass){
      return XmlTag.class.isAssignableFrom(hintClass);
    }
  }
,RngDefineMetaData.class);
}
