{
  ArrayList<PsiReferenceExpression> refsVector=new ArrayList<PsiReferenceExpression>();
  ArrayList<PsiBlockStatement> addedBracesVector=new ArrayList<PsiBlockStatement>();
  myAddedClassInitializers=new HashMap<PsiField,PsiClassInitializer>();
  for (  PsiReferenceExpression ref : refs) {
    ref.putCopyableUserData(MARK_KEY,"");
  }
  RefLoop:   for (  PsiReferenceExpression ref : refs) {
    if (!ref.isValid())     continue;
    PsiElement parentStatement=RefactoringUtil.getParentStatement(ref,true);
    if (parentStatement != null) {
      PsiElement parent=ref.getParent();
      while (!parent.equals(parentStatement)) {
        if (parent instanceof PsiStatement && !(parent instanceof PsiDeclarationStatement)) {
          String text="{\n}";
          PsiBlockStatement blockStatement=(PsiBlockStatement)myFactory.createStatementFromText(text,null);
          blockStatement=(PsiBlockStatement)myCodeStyleManager.reformat(blockStatement);
          blockStatement.getCodeBlock().add(parent);
          blockStatement=(PsiBlockStatement)parent.replace(blockStatement);
          PsiElement newStatement=blockStatement.getCodeBlock().getStatements()[0];
          addMarkedElements(refsVector,newStatement);
          addedBracesVector.add(blockStatement);
          continue RefLoop;
        }
        parent=parent.getParent();
      }
    }
 else {
      final PsiField field=PsiTreeUtil.getParentOfType(ref,PsiField.class);
      if (field != null) {
        field.normalizeDeclaration();
        final PsiExpression initializer=field.getInitializer();
        LOG.assertTrue(initializer != null);
        PsiClassInitializer classInitializer=myFactory.createClassInitializer();
        final PsiClass containingClass=field.getContainingClass();
        classInitializer=(PsiClassInitializer)containingClass.addAfter(classInitializer,field);
        final PsiCodeBlock body=classInitializer.getBody();
        PsiExpressionStatement statement=(PsiExpressionStatement)myFactory.createStatementFromText(field.getName() + " = 0;",body);
        statement=(PsiExpressionStatement)body.add(statement);
        final PsiAssignmentExpression assignment=(PsiAssignmentExpression)statement.getExpression();
        assignment.getLExpression().replace(RenameUtil.createFieldReference(field,assignment));
        assignment.getRExpression().replace(initializer);
        addMarkedElements(refsVector,statement);
        if (field.hasModifierProperty(PsiModifier.STATIC)) {
          classInitializer.getModifierList().setModifierProperty(PsiModifier.STATIC,true);
        }
        myAddedClassInitializers.put(field,classInitializer);
        continue RefLoop;
      }
    }
    refsVector.add(ref);
  }
  for (  PsiReferenceExpression ref : refs) {
    ref.putCopyableUserData(MARK_KEY,null);
  }
  myAddedBraces=addedBracesVector.toArray(new PsiBlockStatement[addedBracesVector.size()]);
  return refsVector.toArray(new PsiReferenceExpression[refsVector.size()]);
}
