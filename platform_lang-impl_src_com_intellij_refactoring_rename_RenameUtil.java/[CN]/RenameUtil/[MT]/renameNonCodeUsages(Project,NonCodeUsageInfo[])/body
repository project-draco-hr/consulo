{
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  Map<Document,ArrayList<UsageOffset>> docsToOffsetsMap=new HashMap<Document,ArrayList<UsageOffset>>();
  final PsiDocumentManager psiDocumentManager=PsiDocumentManager.getInstance(project);
  for (  NonCodeUsageInfo usage : usages) {
    PsiElement element=usage.getElement();
    if (element == null)     continue;
    element=CodeInsightUtilBase.forcePsiPostprocessAndRestoreElement(element);
    if (element == null)     continue;
    final PsiFile containingFile=element.getContainingFile();
    final Document document=psiDocumentManager.getDocument(containingFile);
    int fileOffset=usage.getSegment().getStartOffset();
    ArrayList<UsageOffset> list=docsToOffsetsMap.get(document);
    if (list == null) {
      list=new ArrayList<UsageOffset>();
      docsToOffsetsMap.put(document,list);
    }
    list.add(new UsageOffset(fileOffset,fileOffset + usage.getRangeInElement().getLength(),usage.newText));
  }
  for (  Document document : docsToOffsetsMap.keySet()) {
    ArrayList<UsageOffset> list=docsToOffsetsMap.get(document);
    UsageOffset[] offsets=list.toArray(new UsageOffset[list.size()]);
    Arrays.sort(offsets);
    for (int i=offsets.length - 1; i >= 0; i--) {
      UsageOffset usageOffset=offsets[i];
      document.replaceString(usageOffset.startOffset,usageOffset.endOffset,usageOffset.newText);
    }
    PsiDocumentManager.getInstance(project).commitDocument(document);
  }
  PsiDocumentManager.getInstance(project).commitAllDocuments();
}
