{
  ArrayList<AbstractTreeNode<TreeElement>> ungrouped=new ArrayList<AbstractTreeNode<TreeElement>>();
  Collection<AbstractTreeNode> children=getChildren();
  for (  final AbstractTreeNode child : children) {
    CachingChildrenTreeNode<TreeElement> node=(CachingChildrenTreeNode<TreeElement>)child;
    if (node instanceof TreeElementWrapper) {
      ungrouped.add(node);
    }
  }
  if (!ungrouped.isEmpty()) {
    processUngrouped(ungrouped,grouper);
  }
  Collection<AbstractTreeNode> result=new LinkedHashSet<AbstractTreeNode>();
  for (  AbstractTreeNode child : children) {
    AbstractTreeNode parent=child.getParent();
    if (parent != this) {
      if (!result.contains(parent))       result.add(parent);
    }
 else {
      result.add(child);
    }
  }
  setChildren(result);
}
