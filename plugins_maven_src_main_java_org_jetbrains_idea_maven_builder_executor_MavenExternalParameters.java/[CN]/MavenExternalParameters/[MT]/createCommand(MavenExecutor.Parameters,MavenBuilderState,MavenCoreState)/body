{
  @NonNls List<String> cmdList=new ArrayList<String>();
  cmdList.add(getJavaExecutable(builderState.getJdkPath()));
  addParameters(cmdList,builderState.getVmOptions());
  addParameters(cmdList,StringUtil.notNullize(System.getenv("MAVEN_OPTS")));
  final String mavenHome=resolveMavenHome(mavenCoreState.getMavenHome());
  addOption(cmdList,"classpath",getMavenClasspathEntries(mavenHome));
  addProperty(cmdList,"classworlds.conf",MavenEnv.getMavenConfFile(new File(mavenHome)).getPath());
  addProperty(cmdList,"maven.home",mavenHome);
  cmdList.add("org.codehaus.classworlds.Launcher");
  encodeCoreSettings(mavenCoreState,cmdList);
  if (builderState.isSkipTests()) {
    addProperty(cmdList,"test","skip");
  }
  for (  Map.Entry<String,String> entry : builderState.getMavenProperties().entrySet()) {
    addProperty(cmdList,entry.getKey(),entry.getValue());
  }
  addOption(cmdList,"f",buildParameters.getPomFile());
  for (  String goal : buildParameters.getGoals()) {
    cmdList.add(goal);
  }
  return cmdList;
}
