{
  final PsiCatchSection section=(PsiCatchSection)descriptor.getPsiElement();
  final PsiTryStatement tryStatement=(PsiTryStatement)section.getParent();
  final PsiCatchSection[] catchSections=tryStatement.getCatchSections();
  if (myCollapseIntoIndex >= catchSections.length) {
    return;
  }
  final PsiCatchSection collapseInto=catchSections[myCollapseIntoIndex];
  final PsiParameter parameter1=collapseInto.getParameter();
  final PsiParameter parameter2=section.getParameter();
  if (parameter1 == null || parameter2 == null) {
    return;
  }
  final PsiType type1=parameter1.getType();
  final PsiType type2=parameter2.getType();
  if (TypeConversionUtil.isAssignable(type1,type2)) {
    section.delete();
    return;
  }
 else   if (TypeConversionUtil.isAssignable(type2,type1)) {
    collapseInto.delete();
    return;
  }
  final List<PsiType> types=new ArrayList();
  collectDisjunctTypes(type1,types);
  collectDisjunctTypes(type2,types);
  final StringBuilder typeText=new StringBuilder();
  for (  PsiType type : types) {
    if (typeText.length() > 0) {
      typeText.append(" | ");
    }
    typeText.append(type.getCanonicalText());
  }
  final PsiTypeElement newTypeElement=JavaPsiFacade.getElementFactory(project).createTypeElementFromText(typeText.toString(),tryStatement);
  final PsiTypeElement typeElement=parameter1.getTypeElement();
  if (typeElement == null) {
    return;
  }
  typeElement.replace(newTypeElement);
  section.delete();
}
