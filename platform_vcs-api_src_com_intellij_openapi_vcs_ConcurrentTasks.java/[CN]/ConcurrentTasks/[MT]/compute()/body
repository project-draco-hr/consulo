{
  final EmptyProgressIndicator pi=new EmptyProgressIndicator(){
    @Override public void checkCanceled(){
      if (myResultKnown || (myParentIndicator != null) && myParentIndicator.isCanceled()) {
        super.cancel();
      }
      super.checkCanceled();
    }
  }
;
  myCntAlive=myTasks.size();
  mySemaphore.down();
  final List<Future<?>> futures=new LinkedList<Future<?>>();
  for (  final Consumer<Consumer<T>> task : myTasks) {
    if (myResultKnown) {
      --myCntAlive;
      continue;
    }
    final Runnable computableProxy=new Runnable(){
      public void run(){
        try {
          task.consume(new Consumer<T>(){
            public void consume(            T t){
              if (myResultKnown)               return;
              myResult=t;
              myResultKnown=true;
            }
          }
);
        }
  finally {
          --myCntAlive;
          if (myCntAlive == 0 || myResultKnown) {
            mySemaphore.up();
          }
        }
      }
    }
;
    final Future<?> future=ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
      public void run(){
        ProgressManager.getInstance().runProcess(computableProxy,pi);
      }
    }
);
    futures.add(future);
  }
  while (true) {
    if (myResultKnown)     break;
    if (myCntAlive <= 0)     break;
    pi.checkCanceled();
    mySemaphore.waitFor(300);
  }
  for (  Future<?> future : futures) {
    if ((!future.isCancelled() && (!future.isDone()))) {
      future.cancel(true);
    }
  }
}
