{
  final PsiDocumentManager docManager=PsiDocumentManager.getInstance(project);
  final Document document=docManager.getDocument(psiJavaFile);
  if (document == null) {
    return null;
  }
  final MethodDescriptor descriptor=docManager.commitAndRunReadAction(new Computable<MethodDescriptor>(){
    @Nullable public MethodDescriptor compute(){
      PsiMethod method=PositionUtil.getPsiElementAt(project,PsiMethod.class,sourcePosition);
      if (method == null) {
        return null;
      }
      final int methodOffset=method.getTextOffset();
      if (methodOffset < 0) {
        return null;
      }
      if (document.getLineNumber(methodOffset) < sourcePosition.getLine()) {
        return null;
      }
      final PsiIdentifier identifier=method.getNameIdentifier();
      int methodNameOffset=identifier != null ? identifier.getTextOffset() : methodOffset;
      final MethodDescriptor descriptor=new MethodDescriptor();
      descriptor.methodName=method.isConstructor() ? "<init>" : method.getName();
      try {
        descriptor.methodSignature=JVMNameUtil.getJVMSignature(method);
        descriptor.isStatic=method.hasModifierProperty(PsiModifier.STATIC);
      }
 catch (      IndexNotReadyException ignored) {
        return null;
      }
      descriptor.methodLine=document.getLineNumber(methodNameOffset);
      return descriptor;
    }
  }
);
  if (descriptor == null || descriptor.methodName == null || descriptor.methodSignature == null) {
    return null;
  }
  return descriptor;
}
