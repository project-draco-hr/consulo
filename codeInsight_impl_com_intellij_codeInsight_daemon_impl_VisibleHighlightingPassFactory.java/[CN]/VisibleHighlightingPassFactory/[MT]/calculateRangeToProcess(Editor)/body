{
  Document document=editor.getDocument();
  int part=Pass.UPDATE_ALL;
  PsiElement dirtyScope=DaemonCodeAnalyzer.getInstance(editor.getProject()).getFileStatusMap().getFileDirtyScope(document,part);
  if (dirtyScope == null || !dirtyScope.isValid()) {
    return null;
  }
  PsiFile file=dirtyScope.getContainingFile();
  if (file.getTextLength() != document.getTextLength()) {
    LOG.error("Length wrong! dirtyScope:" + dirtyScope,"file length:" + file.getTextLength(),"document length:" + document.getTextLength(),"file stamp:" + file.getModificationStamp(),"document stamp:" + document.getModificationStamp(),"file text     :" + file.getText(),"document text:" + document.getText());
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Dirty block optimization works");
  }
  TextRange range=dirtyScope.getTextRange();
  int startOffset=range.getStartOffset();
  int endOffset=range.getEndOffset();
  Rectangle rect=editor.getScrollingModel().getVisibleArea();
  LogicalPosition startPosition=editor.xyToLogicalPosition(new Point(rect.x,rect.y));
  int visibleStart=editor.logicalPositionToOffset(startPosition);
  if (visibleStart > startOffset) {
    startOffset=visibleStart;
  }
  LogicalPosition endPosition=editor.xyToLogicalPosition(new Point(rect.x + rect.width,rect.y + rect.height));
  int visibleEnd=editor.logicalPositionToOffset(new LogicalPosition(endPosition.line + 1,0));
  if (visibleEnd < endOffset) {
    endOffset=visibleEnd;
  }
  return new TextRange(startOffset,endOffset);
}
