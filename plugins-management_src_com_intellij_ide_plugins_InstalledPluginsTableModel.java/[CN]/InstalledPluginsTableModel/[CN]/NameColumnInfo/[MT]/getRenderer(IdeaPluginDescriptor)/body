{
  final DefaultTableCellRenderer cellRenderer=(DefaultTableCellRenderer)super.getRenderer(ideaPluginDescriptor);
  if (cellRenderer != null && ideaPluginDescriptor != null) {
    final IdeaPluginDescriptorImpl descriptor=(IdeaPluginDescriptorImpl)ideaPluginDescriptor;
    if (descriptor.isDeleted()) {
      cellRenderer.setIcon(IconLoader.getIcon("/actions/clean.png"));
    }
 else     if (hasNewerVersion(ideaPluginDescriptor.getPluginId())) {
      cellRenderer.setIcon(IconLoader.getIcon("/nodes/pluginobsolete.png"));
    }
 else {
      cellRenderer.setIcon(IconLoader.getIcon("/nodes/plugin.png"));
    }
    if (myEnabled.get(ideaPluginDescriptor.getPluginId()).booleanValue()) {
      PluginManager.checkDependants(ideaPluginDescriptor,new Function<PluginId,IdeaPluginDescriptor>(){
        @Nullable public IdeaPluginDescriptor fun(        final PluginId pluginId){
          return PluginManager.getPlugin(pluginId);
        }
      }
,new Condition<PluginId>(){
        public boolean value(        final PluginId pluginId){
          if (!myEnabled.get(pluginId).booleanValue()) {
            cellRenderer.setForeground(Color.red);
            final IdeaPluginDescriptor plugin=PluginManager.getPlugin(pluginId);
            if (plugin != null) {
              cellRenderer.setToolTipText(IdeBundle.message("plugin.manager.tooltip.warning",plugin.getName()));
            }
            return false;
          }
          return true;
        }
      }
);
    }
    if (PluginManager.isIncompatible(ideaPluginDescriptor)) {
      cellRenderer.setToolTipText(IdeBundle.message("plugin.manager.incompatible.tooltip.warning"));
      cellRenderer.setForeground(Color.red);
    }
  }
  return cellRenderer;
}
