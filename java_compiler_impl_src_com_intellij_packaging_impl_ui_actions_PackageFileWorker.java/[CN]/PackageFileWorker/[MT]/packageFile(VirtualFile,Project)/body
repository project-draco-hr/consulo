{
  final Collection<Trinity<Artifact,List<CompositePackagingElement<?>>,String>> items=ArtifactUtil.findContainingArtifactsWithOutputPaths(file,project);
  File ioFile=VfsUtil.virtualToIoFile(file);
  for (  Trinity<Artifact,List<CompositePackagingElement<?>>,String> item : items) {
    final Artifact artifact=item.getFirst();
    final List<CompositePackagingElement<?>> parents=item.getSecond();
    final String outputPath=artifact.getOutputPath();
    if (!StringUtil.isEmpty(outputPath)) {
      PackageFileWorker worker=new PackageFileWorker(ioFile,item.getThird());
      worker.packageFile(outputPath,parents);
    }
  }
}
