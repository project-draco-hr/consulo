{
  myCurrentViewType=typeName;
  final PsiElement element=mySmartPsiElementPointer.getElement();
  if (element == null || !isApplicableElement(element)) {
    return;
  }
  if (myContent != null) {
    final String displayName=getContentDisplayName(typeName,element);
    if (displayName != null) {
      myContent.setDisplayName(displayName);
    }
  }
  myCardLayout.show(myTreePanel,typeName);
  if (!myBuilders.containsKey(typeName)) {
    try {
      setWaitCursor();
      final JTree tree=myType2TreeMap.get(typeName);
      final DefaultTreeModel model=new DefaultTreeModel(new DefaultMutableTreeNode(""));
      tree.setModel(model);
      PsiDocumentManager.getInstance(myProject).commitAllDocuments();
      final HierarchyTreeStructure structure=createHierarchyTreeStructure(typeName,element);
      if (structure == null) {
        return;
      }
      final Comparator<NodeDescriptor> comparator=getComparator();
      final HierarchyTreeBuilder builder=new HierarchyTreeBuilder(myProject,tree,model,structure,comparator);
      myBuilders.put(typeName,builder);
      Disposer.register(this,builder);
      final HierarchyNodeDescriptor descriptor=structure.getBaseDescriptor();
      builder.select(descriptor,new Runnable(){
        @Override public void run(){
          builder.expand(descriptor,null);
        }
      }
);
    }
  finally {
      restoreCursor();
    }
  }
  getCurrentTree().requestFocus();
}
