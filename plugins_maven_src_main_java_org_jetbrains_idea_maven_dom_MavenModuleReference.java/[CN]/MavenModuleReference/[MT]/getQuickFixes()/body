{
  if (resolve() != null)   return LocalQuickFix.EMPTY_ARRAY;
  return new LocalQuickFix[]{new LocalQuickFix(){
    @NotNull public String getName(){
      return "Create pom.xml";
    }
    @NotNull public String getFamilyName(){
      return "Maven";
    }
    public void applyFix(    @NotNull Project project,    @NotNull ProblemDescriptor d){
      try {
        VirtualFile dir=myVirtualFile.getParent();
        String path=PathUtil.getCanonicalPath(dir.getPath() + "/" + myText);
        VirtualFile newDir=VfsUtil.createDirectories(path);
        VirtualFile pom=newDir.createChildData(this,"pom.xml");
        OpenFileDescriptor descriptor=new OpenFileDescriptor(project,pom,0);
        Editor editor=FileEditorManager.getInstance(project).openTextEditor(descriptor,true);
        XmlFile psiFile=(XmlFile)PsiFileFactory.getInstance(project).createFileFromText("pom.xml",StdLanguages.XML,"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n" + "         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n"+ "    <modelVersion>4.0.0</modelVersion>\n"+ "    <groupId>xxx</groupId>\n"+ "    <artifactId>xxx</artifactId>\n"+ "    <version>xxx</version>\n"+ "</project>");
        TemplateBuilder b=new TemplateBuilder(psiFile);
        DomFileElement<MavenModel> parentModel=DomManager.getDomManager(project).getFileElement((XmlFile)myElement.getContainingFile(),MavenModel.class);
        MavenModel parentProject=parentModel.getRootElement();
        String proposedArtifactId=pom.getParent().getName();
        String proposedGroupId=parentProject.getGroupId().getValue();
        String proposedVersion=parentProject.getVersion().getValue();
        if (proposedGroupId == null) {
          proposedGroupId=parentProject.getMavenParent().getGroupId().getValue();
          if (proposedGroupId == null)           proposedGroupId="groupId";
        }
        if (proposedVersion == null) {
          proposedVersion=parentProject.getMavenParent().getVersion().getValue();
          if (proposedVersion == null)           proposedVersion="version";
        }
        b.replaceElement(getTagValueElement(psiFile,"groupId"),new ConstantNode(proposedGroupId));
        b.replaceElement(getTagValueElement(psiFile,"artifactId"),new ConstantNode(proposedArtifactId));
        b.replaceElement(getTagValueElement(psiFile,"version"),new ConstantNode(proposedVersion));
        TemplateManager.getInstance(project).startTemplate(editor,b.buildTemplate());
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
};
}
