{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  @NonNls final String methodName=methodExpression.getReferenceName();
  if (!HardcodedMethodConstants.NOTIFY.equals(methodName) && !HardcodedMethodConstants.NOTIFY_ALL.equals(methodName)) {
    return;
  }
  final PsiMethod method=expression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiParameterList paramList=method.getParameterList();
  final PsiParameter[] parameters=paramList.getParameters();
  final int numParams=parameters.length;
  if (numParams != 0) {
    return;
  }
  final PsiExpression qualifier=methodExpression.getQualifierExpression();
  if (!TypeUtils.expressionHasTypeOrSubtype("java.util.concurrent.locks.Condition",qualifier)) {
    return;
  }
  registerMethodCallError(expression);
}
