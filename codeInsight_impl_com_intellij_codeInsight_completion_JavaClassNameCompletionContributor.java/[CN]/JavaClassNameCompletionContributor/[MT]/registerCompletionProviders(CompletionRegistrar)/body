{
  registrar.extend(CompletionType.CLASS_NAME,psiElement()).withId(JAVA_LEGACY).withProvider(new CompletionProvider<LookupElement,CompletionParameters>(){
    public void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext matchingContext,    @NotNull final CompletionResultSet<LookupElement> result){
      CompletionContext context=parameters.getPosition().getUserData(CompletionContext.COMPLETION_CONTEXT_KEY);
      PsiElement insertedElement=parameters.getPosition();
      result.setPrefixMatcher(CompletionData.findPrefixStatic(insertedElement,context.getStartOffset()));
      AllClassesGetter getter=new AllClassesGetter(TrueFilter.INSTANCE);
      if (AFTER_NEW.accepts(insertedElement)) {
        ElementFilter filter;
        if (AFTER_THROW_NEW.accepts(insertedElement)) {
          filter=new AssignableFromFilter("java.lang.Throwable");
        }
 else {
          filter=TrueFilter.INSTANCE;
        }
        getter=new AllClassesGetterAfterNew(filter);
      }
 else       if (IN_TYPE_PARAMETER.accepts(insertedElement)) {
        getter=new AllClassesGetter(new ExcludeDeclaredFilter(new ClassFilter(PsiTypeParameter.class)));
      }
 else       if (INSIDE_METHOD_THROWS_CLAUSE.accepts(insertedElement)) {
        getter=new AllClassesGetter(new ThisOrAnyInnerFilter(new AssignableFromFilter("java.lang.Throwable")));
      }
      getter.getClasses(insertedElement,context,result);
    }
  }
);
}
