{
  final PsiMethod method=p.getMethod();
  final SearchScope scope=p.getScope();
  final PsiClass parentClass=method.getContainingClass();
  Processor<PsiClass> inheritorsProcessor=new Processor<PsiClass>(){
    public boolean process(    PsiClass inheritor){
      PsiSubstitutor substitutor=TypeConversionUtil.getSuperClassSubstitutor(parentClass,inheritor,PsiSubstitutor.EMPTY);
      MethodSignature signature=method.getSignature(substitutor);
      PsiMethod method1=MethodSignatureUtil.findMethodBySuperSignature(inheritor,signature,false);
      if (method1 == null || method1.hasModifierProperty(PsiModifier.STATIC) || (method.hasModifierProperty(PsiModifier.PACKAGE_LOCAL) && !method1.getManager().arePackagesTheSame(parentClass,inheritor))) {
        return true;
      }
      return consumer.process(method1) && p.isCheckDeep();
    }
  }
;
  return ClassInheritorsSearch.search(parentClass,scope,true).forEach(inheritorsProcessor);
}
