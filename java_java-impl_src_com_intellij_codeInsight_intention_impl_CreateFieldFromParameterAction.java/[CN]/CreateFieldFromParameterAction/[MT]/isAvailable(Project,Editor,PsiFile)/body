{
  PsiParameter psiParameter=findParameterAtCursor(file,editor);
  PsiMethod method=null;
  if (psiParameter == null) {
    final PsiElement elementAt=file.findElementAt(editor.getCaretModel().getOffset());
    if (elementAt instanceof PsiIdentifier) {
      final PsiElement parent=elementAt.getParent();
      if (parent instanceof PsiMethod) {
        method=(PsiMethod)parent;
      }
    }
  }
 else {
    final PsiElement declarationScope=psiParameter.getDeclarationScope();
    if (declarationScope instanceof PsiMethod) {
      method=(PsiMethod)declarationScope;
    }
  }
  if (method == null)   return false;
  final List<PsiParameter> parameters=new ArrayList<PsiParameter>();
  for (  PsiParameter parameter : method.getParameterList().getParameters()) {
    if (isAvailable(parameter)) {
      parameters.add(parameter);
    }
  }
synchronized (LOCK) {
    final Collection<SmartPsiElementPointer<PsiParameter>> params=getUnboundedParams(method);
    params.clear();
    for (    PsiParameter parameter : parameters) {
      params.add(SmartPointerManager.getInstance(project).createSmartPsiElementPointer(parameter));
    }
    if (params.isEmpty())     return false;
    if (psiParameter == null) {
      psiParameter=params.iterator().next().getElement();
      LOG.assertTrue(psiParameter != null);
    }
    myName=params.size() > 1 && !ApplicationManager.getApplication().isUnitTestMode() ? null : psiParameter.getName();
    myConstructor=method.isConstructor();
  }
  return isAvailable(psiParameter);
}
