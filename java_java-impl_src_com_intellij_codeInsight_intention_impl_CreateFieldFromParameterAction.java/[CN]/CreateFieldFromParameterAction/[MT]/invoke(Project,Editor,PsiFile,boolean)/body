{
  PsiParameter myParameter=findParameterAtCursor(file,editor);
  if (!CodeInsightUtilBase.prepareFileForWrite(file))   return;
  final PsiMethod method=myParameter != null ? (PsiMethod)myParameter.getDeclarationScope() : PsiTreeUtil.getParentOfType(file.findElementAt(editor.getCaretModel().getOffset()),PsiMethod.class);
  LOG.assertTrue(method != null);
  final Collection<SmartPsiElementPointer<PsiParameter>> unboundedParams=getUnboundedParams(method);
  if (myParameter == null) {
    myParameter=unboundedParams.iterator().next().getElement();
  }
  if (unboundedParams.size() > 1 && !ApplicationManager.getApplication().isUnitTestMode()) {
    ClassMember[] members=new ClassMember[unboundedParams.size()];
    ClassMember selection=null;
    int i=0;
    for (    SmartPsiElementPointer<PsiParameter> pointer : unboundedParams) {
      final PsiParameter parameter=pointer.getElement();
      final ParameterClassMember classMember=new ParameterClassMember(parameter);
      members[i++]=classMember;
      if (parameter == myParameter) {
        selection=classMember;
      }
    }
    final PsiParameterList parameterList=method.getParameterList();
    Arrays.sort(members,new Comparator<ClassMember>(){
      @Override public int compare(      ClassMember o1,      ClassMember o2){
        return parameterList.getParameterIndex(((ParameterClassMember)o1).getParameter()) - parameterList.getParameterIndex(((ParameterClassMember)o2).getParameter());
      }
    }
);
    final MemberChooser<ClassMember> chooser=new MemberChooser<ClassMember>(members,false,true,project);
    if (selection != null) {
      chooser.selectElements(new ClassMember[]{selection});
    }
    chooser.setTitle("Choose Constructor Parameters to Generate Fields");
    chooser.setCopyJavadocVisible(false);
    chooser.show();
    if (chooser.getExitCode() != DialogWrapper.OK_EXIT_CODE)     return;
    final List<ClassMember> selectedElements=chooser.getSelectedElements();
    if (selectedElements == null)     return;
    if (selectedElements.size() == 1) {
      processParameter(project,((ParameterClassMember)selectedElements.get(0)).getParameter(),isInteractive);
    }
 else {
      for (      ClassMember selectedElement : selectedElements) {
        processParameter(project,((ParameterClassMember)selectedElement).getParameter(),false);
      }
    }
  }
 else {
    processParameter(project,myParameter,isInteractive);
  }
  unboundedParams.clear();
}
