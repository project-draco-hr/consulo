{
  final PsiElement psiElement=parameter.getDeclarationScope();
  if (!(psiElement instanceof PsiMethod))   return Collections.emptyList();
  final PsiMethod psiMethod=(PsiMethod)psiElement;
  Map<SmartPsiElementPointer<PsiParameter>,Boolean> params=psiMethod.getUserData(PARAMS);
  if (params == null)   psiMethod.putUserData(PARAMS,params=new ConcurrentWeakHashMap<SmartPsiElementPointer<PsiParameter>,Boolean>(1));
  final Map<SmartPsiElementPointer<PsiParameter>,Boolean> finalParams=params;
  return new AbstractCollection<SmartPsiElementPointer<PsiParameter>>(){
    @Override public boolean add(    SmartPsiElementPointer<PsiParameter> psiVariable){
      PsiParameter psiParameter=psiVariable.getElement();
      if (psiParameter == null || !isAvailable(psiParameter))       return false;
      return finalParams.put(psiVariable,Boolean.TRUE) == null;
    }
    @Override public Iterator<SmartPsiElementPointer<PsiParameter>> iterator(){
      return finalParams.keySet().iterator();
    }
    @Override public int size(){
      return finalParams.size();
    }
    @Override public void clear(){
      finalParams.clear();
    }
  }
;
}
