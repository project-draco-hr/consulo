{
  final IntObjectCache<String> stringCache=new IntObjectCache<String>(2000);
  final IntObjectCache.DeletedPairsListener listener=new IntObjectCache.DeletedPairsListener(){
    @Override public void objectRemoved(    final int key,    final Object value){
      try {
        assertEquals(myEnumerator.enumerate((String)value),key);
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
;
  PlatformTestUtil.startPerformanceTest("PersistentStringEnumerator performance failed",2500,new ThrowableRunnable(){
    @Override public void run() throws Exception {
      stringCache.addDeletedPairsListener(listener);
      for (int i=0; i < 100000; ++i) {
        final String string=createRandomString();
        stringCache.cacheObject(myEnumerator.enumerate(string),string);
      }
      stringCache.removeDeletedPairsListener(listener);
      stringCache.removeAll();
    }
  }
).assertTiming();
  myEnumerator.close();
  System.out.printf("File size = %d bytes\n",myFile.length());
}
