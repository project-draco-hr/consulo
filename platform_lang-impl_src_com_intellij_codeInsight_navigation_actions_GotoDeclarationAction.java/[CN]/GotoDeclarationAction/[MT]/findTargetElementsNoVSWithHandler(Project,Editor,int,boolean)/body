{
  final Document document=editor.getDocument();
  PsiFile file=PsiDocumentManager.getInstance(project).getPsiFile(document);
  if (file == null)   return Pair.empty();
  if (file instanceof PsiCompiledElement) {
    PsiElement mirror=((PsiCompiledElement)file).getMirror();
    if (mirror instanceof PsiFile)     file=(PsiFile)mirror;
  }
  PsiElement elementAt=file.findElementAt(TargetElementUtil.adjustOffset(file,document,offset));
  for (  GotoDeclarationHandler handler : Extensions.getExtensions(GotoDeclarationHandler.EP_NAME)) {
    try {
      PsiElement[] result=handler.getGotoDeclarationTargets(elementAt,offset,editor);
      if (result != null && result.length > 0) {
        for (        PsiElement element : result) {
          if (element == null) {
            LOG.error("Null target element is returned by " + handler.getClass().getName());
            return Pair.empty();
          }
        }
        return Pair.create(result,handler);
      }
    }
 catch (    AbstractMethodError e) {
      LOG.error(new ExtensionException(handler.getClass()));
    }
  }
  Set<String> flags=ContainerUtil.newHashSet(TargetElementUtil.getAllAccepted());
  flags.remove(TargetElementUtilEx.ELEMENT_NAME_ACCEPTED);
  if (!lookupAccepted) {
    flags.remove(TargetElementUtilEx.LOOKUP_ITEM_ACCEPTED);
  }
  PsiElement element=TargetElementUtil.findTargetElement(editor,flags,offset);
  if (element != null) {
    return Pair.create(new PsiElement[]{element},null);
  }
  if (editor instanceof EditorWindow) {
    EditorWindow window=(EditorWindow)editor;
    return findTargetElementsNoVSWithHandler(project,window.getDelegate(),window.getDocument().injectedToHost(offset),lookupAccepted);
  }
  return Pair.empty();
}
