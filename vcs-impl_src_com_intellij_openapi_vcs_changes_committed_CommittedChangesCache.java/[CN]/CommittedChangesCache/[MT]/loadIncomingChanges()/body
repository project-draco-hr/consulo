{
  final List<CommittedChangeList> result=new ArrayList<CommittedChangeList>();
  final Collection<ChangesCacheFile> caches=getAllCaches();
  final MultiMap<AbstractVcs,Pair<RepositoryLocation,List<CommittedChangeList>>> byVcs=new MultiMap<AbstractVcs,Pair<RepositoryLocation,List<CommittedChangeList>>>();
  for (  ChangesCacheFile cache : caches) {
    try {
      if (!cache.isEmpty()) {
        debug("Loading incoming changes for " + cache.getLocation());
        final List<CommittedChangeList> incomingChanges=cache.loadIncomingChanges();
        byVcs.putValue(cache.getVcs(),new Pair<RepositoryLocation,List<CommittedChangeList>>(cache.getLocation(),incomingChanges));
      }
    }
 catch (    IOException e) {
      LOG.error(e);
    }
  }
  for (  AbstractVcs vcs : byVcs.keySet()) {
    final CommittedChangesProvider committedChangesProvider=vcs.getCommittedChangesProvider();
    VcsCommittedListsZipper vcsZipper=committedChangesProvider.getZipper();
    if (vcsZipper != null) {
      final VcsCommittedListsZipper incomingZipper=new IncomingListsZipper(vcsZipper);
      final CommittedListsSequencesZipper zipper=new CommittedListsSequencesZipper(incomingZipper);
      for (      Pair<RepositoryLocation,List<CommittedChangeList>> pair : byVcs.get(vcs)) {
        zipper.add(pair.getFirst(),pair.getSecond());
      }
      result.addAll(zipper.execute());
    }
 else {
      for (      Pair<RepositoryLocation,List<CommittedChangeList>> pair : byVcs.get(vcs)) {
        result.addAll(pair.getSecond());
      }
    }
  }
  myCachedIncomingChangeLists=result;
  debug("Incoming changes loaded");
  notifyIncomingChangesUpdated(null);
  return result;
}
