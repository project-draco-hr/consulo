{
  final List<CommittedChangeList> newLists=new ArrayList<CommittedChangeList>();
  final CachingCommittedChangesProvider provider=cacheFile.getProvider();
  final RepositoryLocation location=cacheFile.getLocation();
  final Pair<Long,List<CommittedChangeList>> externalLists=myExternallyLoadedChangeLists.get(location.getKey());
  final long latestChangeList=getLatestListForFile(cacheFile);
  if ((externalLists != null) && (latestChangeList == externalLists.first.longValue())) {
    newLists.addAll(appendLoadedChanges(cacheFile,location,externalLists.second));
    myExternallyLoadedChangeLists.clear();
  }
  final ChangeBrowserSettings defaultSettings=provider.createDefaultSettings();
  int maxCount=0;
  if (provider.refreshCacheByNumber()) {
    final long number=cacheFile.getLastCachedChangelist();
    debug("Refreshing cache for " + location + " since #"+ number);
    if (number >= 0) {
      defaultSettings.CHANGE_AFTER=Long.toString(number);
      defaultSettings.USE_CHANGE_AFTER_FILTER=true;
    }
 else {
      maxCount=myState.getInitialCount();
    }
  }
 else {
    final Date date=cacheFile.getLastCachedDate();
    debug("Refreshing cache for " + location + " since "+ date);
    defaultSettings.setDateAfter(date);
    defaultSettings.USE_DATE_AFTER_FILTER=true;
  }
  final List<CommittedChangeList> newChanges=provider.getCommittedChanges(defaultSettings,location,maxCount);
  debug("Loaded " + newChanges.size() + " new changelists");
  newLists.addAll(appendLoadedChanges(cacheFile,location,newChanges));
  return newLists;
}
