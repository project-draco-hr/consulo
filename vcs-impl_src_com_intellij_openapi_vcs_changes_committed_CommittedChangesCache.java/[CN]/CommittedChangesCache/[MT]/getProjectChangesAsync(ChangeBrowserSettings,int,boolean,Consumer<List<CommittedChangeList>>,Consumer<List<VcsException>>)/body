{
  final Task.Backgroundable task=new Task.Backgroundable(myProject,VcsBundle.message("committed.changes.refresh.progress")){
    private final LinkedHashSet<CommittedChangeList> myResult=new LinkedHashSet<CommittedChangeList>();
    private final List<VcsException> myExceptions=new ArrayList<VcsException>();
    public void run(    @NotNull final ProgressIndicator indicator){
      final VcsRoot[] vcsRoots=myVcsManager.getAllVcsRoots();
      for (      VcsRoot root : vcsRoots) {
        try {
          if (myProject.isDisposed()) {
            return;
          }
          myResult.addAll(getChanges(settings,root.path,root.vcs,maxCount,cacheOnly));
        }
 catch (        VcsException e) {
          myExceptions.add(e);
        }
      }
    }
    public void onSuccess(){
      if (myProject.isDisposed()) {
        return;
      }
      if (myExceptions.size() > 0) {
        errorConsumer.consume(myExceptions);
      }
 else {
        consumer.consume(new ArrayList<CommittedChangeList>(myResult));
      }
    }
  }
;
  myTaskQueue.run(task);
}
