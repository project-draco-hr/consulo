{
  final UIDefaults defaults=UIManager.getDefaults();
  Enumeration keys=defaults.keys();
  final Object[][] data=new Object[defaults.size()][2];
  int i=0;
  while (keys.hasMoreElements()) {
    Object key=keys.nextElement();
    data[i][0]=key;
    data[i][1]=defaults.get(key);
    i++;
  }
  new DialogWrapper(getEventProject(e)){
{
      setTitle("Edit LaF Defaults");
      init();
    }
    @Override protected JComponent createCenterPanel(){
      final JBTable table=new JBTable(new DefaultTableModel(data,new Object[]{"Name","Value"}){
        @Override public boolean isCellEditable(        int row,        int column){
          return column == 1 && getValueAt(row,column) instanceof Color;
        }
      }
){
        @Override public boolean editCellAt(        int row,        int column,        EventObject e){
          if (isCellEditable(row,column)) {
            final Object color=getValueAt(row,column);
            final Color newColor=ColorPicker.showDialog(this,"Choose Color",(Color)color,true);
            if (newColor != null) {
              final ColorUIResource colorUIResource=new ColorUIResource(newColor);
              final Object key=getValueAt(row,0);
              UIManager.put(key,colorUIResource);
              setValueAt(colorUIResource,row,column);
            }
          }
          return false;
        }
      }
;
      table.setDefaultRenderer(Object.class,new DefaultTableCellRenderer(){
        @Override public Component getTableCellRendererComponent(        JTable table,        Object value,        boolean isSelected,        boolean hasFocus,        int row,        int column){
          final JPanel panel=new JPanel(new BorderLayout());
          final JLabel label=new JLabel(value == null ? "" : value.toString());
          panel.add(label,BorderLayout.CENTER);
          if (value instanceof Color) {
            panel.setBackground((Color)value);
            return panel;
          }
 else           if (value instanceof Icon) {
            final Icon icon=(Icon)value;
            if (icon.getIconHeight() <= 20) {
              label.setIcon(icon);
            }
            label.setText(String.format("(%dx%d) %s)",icon.getIconWidth(),icon.getIconHeight(),label.getText()));
            return panel;
          }
 else           if (value instanceof Border) {
            try {
              final Insets i=((Border)value).getBorderInsets(null);
              label.setText(String.format("border[%d, %d, %d, %d] %s",i.top,i.left,i.bottom,i.right,label.getText()));
              return panel;
            }
 catch (            Exception ignore) {
            }
          }
          return super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
        }
      }
);
      final JBScrollPane pane=new JBScrollPane(table);
      new TableSpeedSearch(table);
      table.setShowGrid(false);
      final JPanel panel=new JPanel(new BorderLayout());
      panel.add(pane,BorderLayout.CENTER);
      return panel;
    }
  }
.show();
}
