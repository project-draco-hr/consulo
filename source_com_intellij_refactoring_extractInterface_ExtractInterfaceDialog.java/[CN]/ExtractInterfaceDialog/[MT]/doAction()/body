{
  final String[] errorString=new String[]{null};
  final String interfaceName=getInterfaceName();
  final String packageName=getTargetPackageName();
  final PsiManager manager=PsiManager.getInstance(myProject);
  if ("".equals(interfaceName)) {
    errorString[0]=RefactoringBundle.message("no.interface.name.specified");
    myInterfaceNameField.requestFocusInWindow();
  }
 else   if (!manager.getNameHelper().isIdentifier(interfaceName)) {
    errorString[0]=RefactoringMessageUtil.getIncorrectIdentifierMessage(interfaceName);
    myInterfaceNameField.requestFocusInWindow();
  }
 else {
    CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
      public void run(){
        try {
          myTargetDirectory=PackageUtil.findOrCreateDirectoryForPackage(myProject,packageName,myTargetDirectory,true);
          if (myTargetDirectory == null) {
            errorString[0]="";
            return;
          }
        }
 catch (        IncorrectOperationException e) {
          errorString[0]=e.getMessage();
          return;
        }
        final Runnable action=new Runnable(){
          public void run(){
            errorString[0]=RefactoringMessageUtil.checkCanCreateClass(myTargetDirectory,interfaceName);
          }
        }
;
        ApplicationManager.getApplication().runWriteAction(action);
      }
    }
,RefactoringBundle.message("create.directory"),null);
  }
  if (errorString[0] != null) {
    if (errorString[0].length() > 0) {
      RefactoringMessageUtil.showErrorMessage(ExtractInterfaceHandler.REFACTORING_NAME,errorString[0],HelpID.EXTRACT_INTERFACE,myProject);
    }
    return;
  }
  if (!isExtractSuperclass()) {
    final ExtractInterfaceProcessor processor=new ExtractInterfaceProcessor(myProject,false,getTargetDirectory(),interfaceName,myClass,getSelectedMembers(),new JavaDocPolicy(getJavaDocPolicy()));
    invokeRefactoring(processor);
  }
  RefactoringSettings.getInstance().EXTRACT_INTERFACE_JAVADOC=getJavaDocPolicy();
  closeOKAction();
}
