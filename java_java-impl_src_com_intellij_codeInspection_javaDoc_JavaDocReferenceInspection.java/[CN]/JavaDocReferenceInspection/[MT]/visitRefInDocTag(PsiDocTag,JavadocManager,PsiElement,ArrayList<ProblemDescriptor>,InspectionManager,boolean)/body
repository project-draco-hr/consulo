{
  final String tagName=tag.getName();
  final PsiDocTagValue value=tag.getValueElement();
  if (value == null)   return;
  final JavadocTagInfo info=manager.getTagInfo(tagName);
  if (info != null && !info.isValidInContext(context))   return;
  final String message=info == null || !info.isInline() ? null : info.checkTagValue(value);
  if (message != null) {
    problems.add(createDescriptor(value,message,inspectionManager,onTheFly));
  }
  final PsiReference reference=value.getReference();
  if (reference == null)   return;
  final PsiElement element=reference.resolve();
  if (element != null)   return;
  final int textOffset=value.getTextOffset();
  if (textOffset == value.getTextRange().getEndOffset())   return;
  final PsiDocTagValue valueElement=tag.getValueElement();
  if (valueElement == null)   return;
  final CharSequence paramName=value.getContainingFile().getViewProvider().getContents().subSequence(textOffset,value.getTextRange().getEndOffset());
  final String params="<code>" + paramName + "</code>";
  final List<LocalQuickFix> fixes=new ArrayList<LocalQuickFix>();
  if (onTheFly && "param".equals(tagName)) {
    final PsiDocCommentOwner commentOwner=PsiTreeUtil.getParentOfType(tag,PsiDocCommentOwner.class);
    if (commentOwner instanceof PsiMethod) {
      final PsiMethod method=(PsiMethod)commentOwner;
      final PsiParameter[] parameters=method.getParameterList().getParameters();
      final PsiDocTag[] tags=tag.getContainingComment().getTags();
      final Set<String> unboundParams=new HashSet<String>();
      for (      PsiParameter parameter : parameters) {
        if (!JavaDocLocalInspection.isFound(tags,parameter)) {
          unboundParams.add(parameter.getName());
        }
      }
      if (!unboundParams.isEmpty()) {
        fixes.add(new RenameReferenceQuickFix(unboundParams));
      }
    }
  }
  fixes.add(new RemoveTagFix(tagName,paramName));
  problems.add(inspectionManager.createProblemDescriptor(valueElement,reference.getRangeInElement(),cannotResolveSymbolMessage(params),ProblemHighlightType.LIKE_UNKNOWN_SYMBOL,onTheFly,fixes.toArray(new LocalQuickFix[fixes.size()])));
}
