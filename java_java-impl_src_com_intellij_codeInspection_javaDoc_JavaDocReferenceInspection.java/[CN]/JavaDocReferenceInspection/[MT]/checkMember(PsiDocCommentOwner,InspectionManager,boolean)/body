{
  final ArrayList<ProblemDescriptor> problems=new ArrayList<ProblemDescriptor>();
  final PsiDocComment docComment=docCommentOwner.getDocComment();
  if (docComment == null)   return null;
  final Set<PsiJavaCodeReferenceElement> references=new HashSet<PsiJavaCodeReferenceElement>();
  docComment.accept(getVisitor(references,docCommentOwner,problems,manager,isOnTheFly));
  for (  PsiJavaCodeReferenceElement reference : references) {
    final List<PsiClass> classesToImport=new ImportClassFix(reference).getClassesToImport();
    final PsiElement referenceNameElement=reference.getReferenceNameElement();
    problems.add(manager.createProblemDescriptor(referenceNameElement != null ? referenceNameElement : reference,cannotResolveSymbolMessage("<code>" + reference.getText() + "</code>"),!isOnTheFly || classesToImport.isEmpty() ? null : new AddQualifierFix(classesToImport),ProblemHighlightType.LIKE_UNKNOWN_SYMBOL,isOnTheFly));
  }
  return problems.isEmpty() ? null : problems.toArray(new ProblemDescriptor[problems.size()]);
}
