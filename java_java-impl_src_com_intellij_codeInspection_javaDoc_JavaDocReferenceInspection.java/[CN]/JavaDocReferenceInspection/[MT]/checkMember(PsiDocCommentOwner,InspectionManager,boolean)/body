{
  ArrayList<ProblemDescriptor> problems=new ArrayList<ProblemDescriptor>();
  final PsiDocComment docComment=docCommentOwner.getDocComment();
  if (docComment == null)   return null;
  final Set<PsiJavaCodeReferenceElement> references=new HashSet<PsiJavaCodeReferenceElement>();
  docComment.accept(getVisitor(references,docCommentOwner,problems,manager));
  for (  PsiJavaCodeReferenceElement reference : references) {
    final List<PsiClass> classesToImport=new ImportClassFix(reference).getClassesToImport();
    problems.add(manager.createProblemDescriptor(reference,InspectionsBundle.message("inspection.javadoc.problem.cannot.resolve","<code>" + reference.getText() + "</code>"),!isOnTheFly || classesToImport.isEmpty() ? null : new AddImportFix(classesToImport),ProblemHighlightType.LIKE_UNKNOWN_SYMBOL));
  }
  return problems.isEmpty() ? null : problems.toArray(new ProblemDescriptor[problems.size()]);
}
