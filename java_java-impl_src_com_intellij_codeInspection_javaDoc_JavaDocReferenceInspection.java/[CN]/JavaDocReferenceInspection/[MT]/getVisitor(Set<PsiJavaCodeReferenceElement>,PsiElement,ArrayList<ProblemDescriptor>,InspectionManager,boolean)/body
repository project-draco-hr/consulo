{
  return new JavaElementVisitor(){
    @Override public void visitReferenceExpression(    PsiReferenceExpression expression){
      visitElement(expression);
    }
    @Override public void visitReferenceElement(    PsiJavaCodeReferenceElement reference){
      super.visitReferenceElement(reference);
      JavaResolveResult result=reference.advancedResolve(false);
      if (result.getElement() == null && !result.isPackagePrefixPackageReference()) {
        references.add(reference);
      }
    }
    @Override public void visitDocTag(    PsiDocTag tag){
      super.visitDocTag(tag);
      final JavadocManager javadocManager=JavaPsiFacade.getInstance(tag.getProject()).getJavadocManager();
      final JavadocTagInfo info=javadocManager.getTagInfo(tag.getName());
      if (info == null || !info.isInline()) {
        visitRefInDocTag(tag,javadocManager,context,problems,manager,onTheFly);
      }
    }
    @Override public void visitInlineDocTag(    PsiInlineDocTag tag){
      super.visitInlineDocTag(tag);
      final JavadocManager javadocManager=JavaPsiFacade.getInstance(tag.getProject()).getJavadocManager();
      visitRefInDocTag(tag,javadocManager,context,problems,manager,onTheFly);
    }
    @Override public void visitElement(    PsiElement element){
      PsiElement[] children=element.getChildren();
      for (      PsiElement child : children) {
        if (!(child instanceof PsiDocCommentOwner)) {
          child.accept(this);
        }
      }
    }
  }
;
}
