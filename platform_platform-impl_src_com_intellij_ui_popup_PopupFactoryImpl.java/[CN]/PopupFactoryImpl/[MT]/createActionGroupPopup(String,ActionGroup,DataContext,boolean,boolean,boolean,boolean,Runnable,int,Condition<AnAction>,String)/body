{
  final Component component=PlatformDataKeys.CONTEXT_COMPONENT.getData(dataContext);
  final ActionStepBuilder builder=new ActionStepBuilder(dataContext,showNumbers,useAlphaAsNumbers,showDisabledActions,honorActionMnemonics);
  if (actionPlace != null) {
    builder.setActionPlace(actionPlace);
  }
  builder.buildGroup(actionGroup);
  final List<ActionItem> items=builder.getItems();
  int defaultOptionIndex=0;
  if (preselectActionCondition != null) {
    for (int i=0; i < items.size(); i++) {
      final AnAction action=items.get(i).getAction();
      if (preselectActionCondition.value(action)) {
        defaultOptionIndex=i;
        break;
      }
    }
  }
  ListPopupStep step=new ActionPopupStep(items,title,component,showNumbers || honorActionMnemonics && itemsHaveMnemonics(items),defaultOptionIndex,false);
  final ListPopupImpl popup=new ListPopupImpl(step,maxRowCount){
    public void dispose(){
      if (disposeCallback != null) {
        disposeCallback.run();
      }
      ActionMenu.showDescriptionInStatusBar(true,component,null);
      super.dispose();
    }
  }
;
  popup.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      final JList list=(JList)e.getSource();
      final ActionItem actionItem=(ActionItem)list.getSelectedValue();
      if (actionItem == null)       return;
      AnAction action=actionItem.getAction();
      Presentation presentation=new Presentation();
      presentation.setDescription(action.getTemplatePresentation().getDescription());
      final String actualActionPlace=(actionPlace == null) ? ActionPlaces.UNKNOWN : actionPlace;
      action.update(new AnActionEvent(null,DataManager.getInstance().getDataContext(component),actualActionPlace,presentation,ActionManager.getInstance(),0));
      ActionMenu.showDescriptionInStatusBar(true,component,presentation.getDescription());
    }
  }
);
  return popup;
}
