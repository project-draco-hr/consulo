{
  BasicAction.saveAll();
  final List<RepositoryInfo> availableRepos=GithubUtil.getAvailableRepos(project,false);
  if (availableRepos == null) {
    return;
  }
  if (availableRepos.isEmpty()) {
    Messages.showErrorDialog(project,"You don't have any repository available on GitHub.","Cannot clone");
    return;
  }
  Collections.sort(availableRepos,new Comparator<RepositoryInfo>(){
    @Override public int compare(    final RepositoryInfo r1,    final RepositoryInfo r2){
      return r1.getName().compareTo(r2.getName());
    }
  }
);
  final GithubCloneProjectDialog checkoutDialog=new GithubCloneProjectDialog(project,availableRepos);
  final GithubSettings settings=GithubSettings.getInstance();
  String clonePath=settings.getClonePath();
  final String homePath=System.getProperty("user.home");
  if (StringUtil.isEmpty(clonePath)) {
    clonePath=homePath;
  }
 else {
    final File file=new File(clonePath);
    if (!file.exists() || !file.isDirectory()) {
      clonePath=homePath;
    }
  }
  settings.setClonePath(clonePath);
  checkoutDialog.setSelectedPath(clonePath);
  checkoutDialog.show();
  if (!checkoutDialog.isOK()) {
    return;
  }
  final RepositoryInfo selectedRepository=checkoutDialog.getSelectedRepository();
  final String selectedPath=checkoutDialog.getSelectedPath();
  final VirtualFile selectedPathFile=LocalFileSystem.getInstance().findFileByPath(selectedPath);
  final String projectName=checkoutDialog.getProjectName();
  final String repositoryName=selectedRepository.getName();
  final String repositoryOwner=selectedRepository.getOwner();
  final String checkoutUrl=settings.getLogin().equals(repositoryOwner) ? "git@github.com:" + repositoryOwner + "/"+ repositoryName+ ".git" : "https://github.com/" + repositoryOwner + "/"+ repositoryName+ ".git";
  GitCheckoutProvider.checkout(project,listener,selectedPathFile,checkoutUrl,projectName,"master",selectedPath);
}
