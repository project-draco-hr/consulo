{
  BasicAction.saveAll();
  final GithubSettings settings=GithubSettings.getInstance();
  final boolean validCredentials;
  try {
    validCredentials=GithubUtil.accessToGithubWithModalProgress(project,new Computable<Boolean>(){
      @Override public Boolean compute(){
        ProgressManager.getInstance().getProgressIndicator().setText("Trying to login to GitHub");
        return GithubUtil.testConnection(settings.getLogin(),settings.getPassword());
      }
    }
);
  }
 catch (  GithubUtil.CancelledException e) {
    return;
  }
  if (!validCredentials) {
    final GithubLoginDialog dialog=new GithubLoginDialog(project);
    dialog.show();
    if (!dialog.isOK()) {
      return;
    }
  }
  final List<RepositoryInfo> availableRepos;
  try {
    availableRepos=GithubUtil.accessToGithubWithModalProgress(project,new Computable<List<RepositoryInfo>>(){
      @Override public List<RepositoryInfo> compute(){
        ProgressManager.getInstance().getProgressIndicator().setText("Extracting info about available repositories");
        return GithubUtil.getAvailableRepos(settings.getLogin(),settings.getPassword());
      }
    }
);
  }
 catch (  GithubUtil.CancelledException e) {
    return;
  }
  Collections.sort(availableRepos,new Comparator<RepositoryInfo>(){
    @Override public int compare(    final RepositoryInfo r1,    final RepositoryInfo r2){
      return r1.getName().compareTo(r2.getName());
    }
  }
);
  final GithubCloneProjectDialog checkoutDialog=new GithubCloneProjectDialog(project,availableRepos);
  final File work=new File(System.getProperty("user.home"),"work");
  if (work.exists() && work.isDirectory()) {
    checkoutDialog.setSelectedPath(work.getPath());
  }
  checkoutDialog.show();
  if (!checkoutDialog.isOK()) {
    return;
  }
  final RepositoryInfo selectedRepository=checkoutDialog.getSelectedRepository();
  final String selectedPath=checkoutDialog.getSelectedPath();
  final VirtualFile selectedPathFile=LocalFileSystem.getInstance().findFileByPath(selectedPath);
  final String projectName=checkoutDialog.getProjectName();
  final String repositoryName=selectedRepository.getName();
  final String repositoryOwner=selectedRepository.getOwner();
  final String checkoutUrl=settings.getLogin().equals(repositoryOwner) ? "git@github.com:" + repositoryOwner + "/"+ repositoryName+ ".git" : "https://github.com/" + repositoryOwner + "/"+ repositoryName+ ".git";
  GitCheckoutProvider.checkout(project,listener,selectedPathFile,checkoutUrl,projectName,"master",selectedPath);
}
