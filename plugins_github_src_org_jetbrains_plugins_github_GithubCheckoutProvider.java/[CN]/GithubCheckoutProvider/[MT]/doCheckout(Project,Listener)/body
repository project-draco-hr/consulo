{
  BasicAction.saveAll();
  final List<RepositoryInfo> availableRepos=GithubUtil.getAvailableRepos(project,false);
  if (availableRepos == null) {
    return;
  }
  if (availableRepos.isEmpty()) {
    Messages.showErrorDialog(project,"You don't have any repository available on GitHub.\nOnly your own or watched repositories can be cloned.","Cannot clone");
    return;
  }
  Collections.sort(availableRepos,new Comparator<RepositoryInfo>(){
    @Override public int compare(    final RepositoryInfo r1,    final RepositoryInfo r2){
      final int comparedOwners=r1.getOwner().compareTo(r2.getOwner());
      return comparedOwners != 0 ? comparedOwners : r1.getName().compareTo(r2.getName());
    }
  }
);
  String clonePath;
  final String lastProjectLocation=GeneralSettings.getInstance().getLastProjectLocation();
  final String userHome=SystemProperties.getUserHome();
  if (lastProjectLocation != null) {
    clonePath=lastProjectLocation.replace('/',File.separatorChar);
  }
 else {
    clonePath=userHome.replace('/',File.separatorChar) + File.separator + ApplicationNamesInfo.getInstance().getLowercaseProductName()+ "Projects";
  }
  final GithubSettings settings=GithubSettings.getInstance();
  final GithubCloneProjectDialog checkoutDialog=new GithubCloneProjectDialog(project,availableRepos);
  final File file=new File(clonePath);
  if (!file.exists() || !file.isDirectory()) {
    clonePath=userHome;
  }
  checkoutDialog.setSelectedPath(clonePath);
  checkoutDialog.show();
  if (!checkoutDialog.isOK()) {
    return;
  }
  RepositoryInfo selectedRepository=checkoutDialog.getSelectedRepository();
  final String owner=selectedRepository.getOwner();
  final String name=selectedRepository.getName();
  if (selectedRepository instanceof UnknownRepositoryInfo) {
    selectedRepository=GithubUtil.getDetailedRepositoryInfo(project,owner,name);
  }
  if (selectedRepository == null) {
    Messages.showErrorDialog(project,"Selected repository ''" + owner + "/"+ name+ "'' doesn't exist.","Cannot clone repository");
    return;
  }
  final boolean writeAccessAllowed=GithubUtil.isWriteAccessAllowed(project,selectedRepository);
  if (!writeAccessAllowed) {
    Messages.showErrorDialog(project,"It seems that you have only read access to the selected repository.\n" + "GitHub supports only https protocol for readonly access, which is not supported yet.\n" + "As a workaround, please fork it and clone your forked repository instead.\n"+ "More details are available here: http://youtrack.jetbrains.net/issue/IDEA-55298","Cannot clone repository");
    return;
  }
  final String host=writeAccessAllowed ? "git@" + settings.getHost() + ":" : "https://github.com" + settings.getHost() + "/";
  final String selectedPath=checkoutDialog.getSelectedPath();
  final VirtualFile selectedPathFile=LocalFileSystem.getInstance().findFileByPath(selectedPath);
  final String projectName=checkoutDialog.getProjectName();
  final String repositoryName=name;
  final String repositoryOwner=owner;
  final String checkoutUrl=host + repositoryOwner + "/"+ repositoryName+ ".git";
  GitCheckoutProvider.checkout(project,listener,selectedPathFile,checkoutUrl,projectName,selectedPath);
}
