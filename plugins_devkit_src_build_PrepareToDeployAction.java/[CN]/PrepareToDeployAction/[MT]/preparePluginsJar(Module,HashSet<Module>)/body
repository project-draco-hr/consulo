{
  final PluginModuleBuildProperties pluginModuleBuildProperties=((PluginModuleBuildProperties)ModuleBuildProperties.getInstance(module));
  File jarFile=FileUtil.createTempFile("temp","jar");
  jarFile.deleteOnExit();
  final Manifest manifest=new Manifest();
  if (pluginModuleBuildProperties.isUseUserManifest() && pluginModuleBuildProperties.getManifestPath() != null) {
    FileInputStream in=new FileInputStream(new File(pluginModuleBuildProperties.getManifestPath()));
    manifest.read(in);
    in.close();
  }
 else {
    Attributes mainAttributes=manifest.getMainAttributes();
    ManifestBuilder.setGlobalAttributes(mainAttributes);
  }
  ZipOutputStream jarPlugin=new JarOutputStream(new BufferedOutputStream(new FileOutputStream(jarFile)),manifest);
  final HashSet<String> writtenItemRelativePaths=new HashSet<String>();
  for (  Module module1 : modules) {
    final VirtualFile compilerOutputPath=ModuleRootManager.getInstance(module1).getCompilerOutputPath();
    if (compilerOutputPath == null)     continue;
    ZipUtil.addDirToZipRecursively(jarPlugin,jarFile,new File(compilerOutputPath.getPath()),"",new FileFilter(){
      public boolean accept(      File pathname){
        return true;
      }
    }
,writtenItemRelativePaths);
  }
  final String pluginXmlPath=pluginModuleBuildProperties.getPluginXmlPath();
  ZipUtil.addFileToZip(jarPlugin,new File(pluginXmlPath),"/META-INF/plugin.xml",writtenItemRelativePaths,new FileFilter(){
    public boolean accept(    File pathname){
      return true;
    }
  }
);
  jarPlugin.close();
  return jarFile;
}
