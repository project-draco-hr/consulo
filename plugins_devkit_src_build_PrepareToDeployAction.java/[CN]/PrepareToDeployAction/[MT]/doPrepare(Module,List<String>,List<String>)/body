{
  final String name=module.getName();
  final String defaultPath=new File(module.getModuleFilePath()).getParent() + File.separator + name;
  final HashSet<Module> modules=new HashSet<Module>();
  PluginBuildUtil.getDependencies(module,modules);
  modules.add(module);
  final HashSet<Library> libs=new HashSet<Library>();
  for (  Module module1 : modules) {
    PluginBuildUtil.getLibraries(module1,libs);
  }
  final boolean isZip=libs.size() != 0;
  final String oldPath=defaultPath + (isZip ? JAR_EXTENSION : ZIP_EXTENSION);
  final File oldFile=new File(oldPath);
  if (oldFile.exists()) {
    if (Messages.showYesNoDialog(module.getProject(),DevKitBundle.message("suggest.to.delete",oldPath),DevKitBundle.message("info.message"),Messages.getInformationIcon()) == DialogWrapper.OK_EXIT_CODE) {
      FileUtil.delete(oldFile);
    }
  }
  return ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
    public void run(){
      final String dstPath=defaultPath + (isZip ? ZIP_EXTENSION : JAR_EXTENSION);
      final ProgressIndicator progressIndicator=ProgressManager.getInstance().getProgressIndicator();
      if (progressIndicator != null) {
        progressIndicator.setText(DevKitBundle.message("prepare.for.deployment.common"));
        progressIndicator.setIndeterminate(true);
      }
      try {
        final File dstFile=new File(dstPath);
        File jarFile=preparePluginsJar(module,modules);
        if (isZip) {
          processLibraries(jarFile,dstFile,name,libs,progressIndicator);
        }
 else {
          FileUtil.copy(jarFile,dstFile);
        }
        successMessages.add(DevKitBundle.message("saved.message",isZip ? 1 : 2,module.getName(),dstPath));
      }
 catch (      final IOException e) {
        errorMessages.add(e.getMessage() + "\n(" + dstPath+ ")");
      }
    }
  }
,DevKitBundle.message("prepare.for.deployment",module.getName()),true,module.getProject());
}
