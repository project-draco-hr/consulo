{
  final Module module=(Module)e.getDataContext().getData(DataConstants.MODULE);
  if (module == null)   return;
  final String name=module.getName();
  final String defaultPath=new File(module.getModuleFilePath()).getParent() + File.separator + name;
  final HashSet<Module> modules=new HashSet<Module>();
  PluginBuildUtil.getDependencies(module,modules);
  modules.add(module);
  final HashSet<Library> libs=new HashSet<Library>();
  for (  Module module1 : modules) {
    PluginBuildUtil.getLibraries(module1,libs);
  }
  boolean isZip=true;
  final String zipPath=defaultPath + ".zip";
  final File zipFile=new File(zipPath);
  if (libs.size() == 0) {
    if (zipFile.exists()) {
      if (Messages.showYesNoDialog(module.getProject(),"Do you want to delete \'" + zipPath + "\'?","Info",Messages.getInformationIcon()) == DialogWrapper.OK_EXIT_CODE) {
        FileUtil.delete(zipFile);
      }
    }
    isZip=false;
  }
 else   if (new File(defaultPath + ".jar").exists()) {
    if (Messages.showYesNoDialog(module.getProject(),"Do you want to delete \'" + defaultPath + ".jar\'?","Info",Messages.getInformationIcon()) == DialogWrapper.OK_EXIT_CODE) {
      FileUtil.delete(new File(defaultPath + ".jar"));
    }
  }
  final Set<String> errorSet=new HashSet<String>();
  final boolean isOk=ApplicationManager.getApplication().runProcessWithProgressSynchronously(new Runnable(){
    public void run(){
      final ProgressIndicator progressIndicator=ProgressManager.getInstance().getProgressIndicator();
      if (progressIndicator != null) {
        progressIndicator.setText("Preparing For Deployment");
        progressIndicator.setIndeterminate(true);
      }
      try {
        File jarFile=preparePluginsJar(module,modules);
        if (libs.size() == 0) {
          FileUtil.copy(jarFile,new File(defaultPath + ".jar"));
          return;
        }
        if (zipFile.exists() || zipFile.createNewFile()) {
          final ZipOutputStream zos=new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zipFile)));
          ZipUtil.addFileToZip(zos,jarFile,"/" + name + "/lib/"+ name+ ".jar",new HashSet<String>(),new FileFilter(){
            public boolean accept(            File pathname){
              if (progressIndicator != null) {
                progressIndicator.setText2("");
              }
              return true;
            }
          }
);
          Set<String> names=new HashSet<String>();
          for (          Library library : libs) {
            String libraryName=null;
            final VirtualFile[] files=library.getFiles(OrderRootType.CLASSES);
            final HashSet<String> libraryWrittenItems=new HashSet<String>();
            File libraryJar=FileUtil.createTempFile("temp",".jar");
            libraryJar.deleteOnExit();
            ZipOutputStream jar=null;
            for (            VirtualFile virtualFile : files) {
              File ioFile=VfsUtil.virtualToIoFile(virtualFile);
              if (!(virtualFile.getFileSystem() instanceof JarFileSystem)) {
                if (jar == null) {
                  jar=new JarOutputStream(new BufferedOutputStream(new FileOutputStream(libraryJar)));
                }
                ZipUtil.addFileOrDirRecursively(jar,libraryJar,VfsUtil.virtualToIoFile(virtualFile),"",new FileFilter(){
                  public boolean accept(                  File pathname){
                    if (progressIndicator != null) {
                      progressIndicator.setText2("");
                    }
                    return true;
                  }
                }
,libraryWrittenItems);
                if (libraryName == null) {
                  libraryName=library.getName() != null ? library.getName() : virtualFile.getName();
                  if (names.contains(libraryName)) {
                    int i=1;
                    while (true) {
                      if (!names.contains(libraryName + i)) {
                        libraryName=libraryName + i;
                        break;
                      }
                      i++;
                    }
                  }
                  names.add(libraryName);
                }
              }
 else {
                ZipUtil.addFileOrDirRecursively(zos,jarFile,ioFile,"/" + name + "/lib/"+ ioFile.getName(),new FileFilter(){
                  public boolean accept(                  File pathname){
                    if (progressIndicator != null) {
                      progressIndicator.setText2("");
                    }
                    return true;
                  }
                }
,new HashSet<String>());
              }
            }
            if (libraryName != null) {
              jar.close();
              ZipUtil.addFileOrDirRecursively(zos,jarFile,libraryJar,"/" + name + "/lib/"+ libraryName+ ".jar",new FileFilter(){
                public boolean accept(                File pathname){
                  if (progressIndicator != null) {
                    progressIndicator.setText2("");
                  }
                  return true;
                }
              }
,new HashSet<String>());
            }
          }
          zos.close();
        }
      }
 catch (      final IOException e1) {
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          public void run(){
            errorSet.add("error");
            Messages.showErrorDialog(e1.getMessage(),"Error Occured");
          }
        }
,ModalityState.NON_MMODAL);
      }
    }
  }
,"Prepare Plugin Module \'" + module.getName() + "\' for Deployment",true,module.getProject());
  if (isOk && errorSet.isEmpty()) {
    Messages.showInfoMessage((isZip ? "Zip" : "Jar") + " for module \'" + module.getName()+ "\' was saved to "+ defaultPath+ (isZip ? ".zip" : ".jar"),"Plugin Module \'" + module.getName() + "\' Successfully Prepared For Deployment");
  }
}
