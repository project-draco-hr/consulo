{
  final Module module=(Module)e.getDataContext().getData(DataConstants.MODULE);
  if (module == null)   return;
  final String name=module.getName();
  final String defaultPath=new File(module.getModuleFilePath()).getParent() + File.separator + name;
  final HashSet<Module> modules=new HashSet<Module>();
  PluginBuildUtil.getDependencies(module,modules);
  modules.add(module);
  final HashSet<Library> libs=new HashSet<Library>();
  for (  Module module1 : modules) {
    PluginBuildUtil.getLibraries(module1,libs);
  }
  boolean isZip=true;
  final String zipPath=defaultPath + ZIP_EXTENSION;
  final File zipFile=new File(zipPath);
  if (libs.size() == 0) {
    if (zipFile.exists()) {
      if (Messages.showYesNoDialog(module.getProject(),DevKitBundle.message("suggest.to.delete",zipPath),DevKitBundle.message("info.message"),Messages.getInformationIcon()) == DialogWrapper.OK_EXIT_CODE) {
        FileUtil.delete(zipFile);
      }
    }
    isZip=false;
  }
 else   if (new File(defaultPath + JAR_EXTENSION).exists()) {
    if (Messages.showYesNoDialog(module.getProject(),DevKitBundle.message("suggest.to.delete",defaultPath + JAR_EXTENSION),DevKitBundle.message("info.message"),Messages.getInformationIcon()) == DialogWrapper.OK_EXIT_CODE) {
      FileUtil.delete(new File(defaultPath + JAR_EXTENSION));
    }
  }
  @NonNls final Set<String> errorSet=new HashSet<String>();
  final boolean isOk=ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
    public void run(){
      final ProgressIndicator progressIndicator=ProgressManager.getInstance().getProgressIndicator();
      if (progressIndicator != null) {
        progressIndicator.setText(DevKitBundle.message("prepare.for.deployment.common"));
        progressIndicator.setIndeterminate(true);
      }
      try {
        File jarFile=preparePluginsJar(module,modules);
        if (libs.size() == 0) {
          FileUtil.copy(jarFile,new File(defaultPath + JAR_EXTENSION));
          return;
        }
        processLibraries(jarFile,zipFile,name,libs,progressIndicator);
      }
 catch (      final IOException e1) {
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          public void run(){
            errorSet.add("error");
            Messages.showErrorDialog(e1.getMessage(),DevKitBundle.message("error.occured"));
          }
        }
,ModalityState.NON_MMODAL);
      }
    }
  }
,DevKitBundle.message("prepare.for.deployment",module.getName()),true,module.getProject());
  if (isOk && errorSet.isEmpty()) {
    Messages.showInfoMessage(DevKitBundle.message("saved.message",isZip ? 1 : 2,module.getName(),defaultPath + (isZip ? ZIP_EXTENSION : JAR_EXTENSION)),DevKitBundle.message("success.deployment.message",module.getName()));
  }
}
