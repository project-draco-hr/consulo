{
  final PsiFile containingFile=startElement.getContainingFile();
  if (editor == null || !FileModificationService.getInstance().prepareFileForWrite(containingFile))   return;
  PsiJavaCodeReferenceElement classReference=((PsiNewExpression)startElement).getClassReference();
  if (classReference == null)   return;
  final PsiClass psiClass=(PsiClass)classReference.resolve();
  if (psiClass == null)   return;
  final MemberChooser<PsiMethodMember> chooser=chooseMethodsToImplement(editor,startElement,psiClass);
  if (chooser == null)   return;
  final List<PsiMethodMember> selectedElements=chooser.getSelectedElements();
  if (selectedElements == null || selectedElements.isEmpty())   return;
  new WriteCommandAction(project,file){
    @Override protected void run(    final Result result) throws Throwable {
      PsiNewExpression newExpression=(PsiNewExpression)JavaPsiFacade.getElementFactory(project).createExpressionFromText(startElement.getText() + "{}",startElement);
      newExpression=(PsiNewExpression)startElement.replace(newExpression);
      final PsiClass psiClass=newExpression.getAnonymousClass();
      if (psiClass == null)       return;
      PsiClassType baseClassType=((PsiAnonymousClass)psiClass).getBaseClassType();
      PsiClass resolve=baseClassType.resolve();
      if (resolve == null)       return;
      PsiSubstitutor superClassSubstitutor=TypeConversionUtil.getSuperClassSubstitutor(resolve,psiClass,PsiSubstitutor.EMPTY);
      for (      PsiMethodMember selectedElement : selectedElements) {
        selectedElement.setSubstitutor(superClassSubstitutor);
      }
      OverrideImplementUtil.overrideOrImplementMethodsInRightPlace(editor,psiClass,selectedElements,chooser.isCopyJavadoc(),chooser.isInsertOverrideAnnotation());
    }
  }
.execute();
}
