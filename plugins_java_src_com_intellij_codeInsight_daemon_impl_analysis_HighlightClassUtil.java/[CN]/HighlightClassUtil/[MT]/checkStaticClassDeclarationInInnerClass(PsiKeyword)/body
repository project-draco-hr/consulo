{
  if (new PsiMatcherImpl(keyword).parent(PsiMatchers.hasClass(PsiClass.class)).dot(JavaMatchers.hasModifier(PsiModifier.STATIC,true)).parent(PsiMatchers.hasClass(PsiClass.class)).dot(JavaMatchers.hasModifier(PsiModifier.STATIC,false)).parent(PsiMatchers.hasClass(PsiClass.class,PsiDeclarationStatement.class,PsiNewExpression.class,PsiEnumConstant.class)).getElement() == null) {
    return null;
  }
  PsiClass aClass=(PsiClass)keyword.getParent();
  if (PsiUtilCore.hasErrorElementChild(aClass)) {
    return null;
  }
  PsiElement context=null;
  PsiModifierList modifierList=aClass.getModifierList();
  if (modifierList != null) {
    for (    PsiElement element : modifierList.getChildren()) {
      if (Comparing.equal(element.getText(),PsiModifier.STATIC)) {
        context=element;
        break;
      }
    }
  }
  TextRange range=context != null ? context.getTextRange() : HighlightNamesUtil.getClassDeclarationTextRange(aClass);
  String message=JavaErrorMessages.message("static.declaration.in.inner.class");
  HighlightInfo info=HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(range).descriptionAndTooltip(message).create();
  if (context != keyword) {
    QuickFixAction.registerQuickFixAction(info,QUICK_FIX_FACTORY.createModifierListFix(aClass,PsiModifier.STATIC,false,false));
  }
  PsiClass containingClass=aClass.getContainingClass();
  if (containingClass != null) {
    QuickFixAction.registerQuickFixAction(info,QUICK_FIX_FACTORY.createModifierListFix(containingClass,PsiModifier.STATIC,true,false));
  }
  return info;
}
