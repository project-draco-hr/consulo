{
  PsiElement parent=extendRef.getParent();
  if (!(parent instanceof PsiReferenceList)) {
    return null;
  }
  PsiElement grand=parent.getParent();
  if (!(grand instanceof PsiClass)) {
    return null;
  }
  final PsiClass aClass=(PsiClass)grand;
  final PsiClass containerClass;
  if (aClass instanceof PsiTypeParameter) {
    final PsiTypeParameterListOwner owner=((PsiTypeParameter)aClass).getOwner();
    if (!(owner instanceof PsiClass)) {
      return null;
    }
    containerClass=(PsiClass)owner;
  }
 else {
    containerClass=aClass;
  }
  if (aClass.getExtendsList() != parent && aClass.getImplementsList() != parent) {
    return null;
  }
  if (!(resolved instanceof PsiClass)) {
    String description=JavaErrorMessages.message("class.name.expected");
    return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(extendRef).descriptionAndTooltip(description).create();
  }
  final HighlightInfo[] infos=new HighlightInfo[1];
  extendRef.accept(new JavaRecursiveElementWalkingVisitor(){
    @Override public void visitElement(    PsiElement element){
      if (infos[0] != null)       return;
      super.visitElement(element);
    }
    @Override public void visitReferenceElement(    PsiJavaCodeReferenceElement reference){
      super.visitReferenceElement(reference);
      final PsiElement resolve=reference.resolve();
      if (resolve instanceof PsiClass) {
        final PsiClass base=(PsiClass)resolve;
        final PsiClass baseClass=base.getContainingClass();
        if (baseClass != null && base.hasModifierProperty(PsiModifier.PRIVATE) && baseClass == containerClass) {
          String description=JavaErrorMessages.message("private.symbol",HighlightUtil.formatClass(base),HighlightUtil.formatClass(baseClass));
          infos[0]=HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(extendRef).descriptionAndTooltip(description).create();
          return;
        }
        if (!PsiUtil.isInnerClass(base))         return;
        if (resolve == resolved && baseClass != null && (!PsiTreeUtil.isAncestor(baseClass,extendRef,true) || aClass.hasModifierProperty(PsiModifier.STATIC)) && !InheritanceUtil.hasEnclosingInstanceInScope(baseClass,extendRef,!aClass.hasModifierProperty(PsiModifier.STATIC),true) && !qualifiedNewCalledInConstructors(aClass,baseClass)) {
          String description=JavaErrorMessages.message("no.enclosing.instance.in.scope",HighlightUtil.formatClass(baseClass));
          infos[0]=HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(extendRef).descriptionAndTooltip(description).create();
        }
      }
    }
  }
);
  return infos[0];
}
