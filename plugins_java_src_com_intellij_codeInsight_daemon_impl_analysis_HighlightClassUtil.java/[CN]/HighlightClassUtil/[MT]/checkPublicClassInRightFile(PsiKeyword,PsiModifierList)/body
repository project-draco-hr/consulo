{
  if (ApplicationManager.getApplication().isUnitTestMode())   return null;
  if (new PsiMatcherImpl(keyword).dot(PsiMatchers.hasText(PsiModifier.PUBLIC)).parent(PsiMatchers.hasClass(PsiModifierList.class)).parent(PsiMatchers.hasClass(PsiClass.class)).parent(PsiMatchers.hasClass(PsiJavaFile.class)).getElement() == null) {
    return null;
  }
  PsiClass aClass=(PsiClass)keyword.getParent().getParent();
  PsiJavaFile file=(PsiJavaFile)aClass.getContainingFile();
  VirtualFile virtualFile=file.getVirtualFile();
  HighlightInfo errorResult=null;
  if (virtualFile != null && !aClass.getName().equals(virtualFile.getNameWithoutExtension())) {
    String message=JavaErrorMessages.message("public.class.should.be.named.after.file",aClass.getName());
    TextRange range=HighlightNamesUtil.getClassDeclarationTextRange(aClass);
    errorResult=HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(aClass,range.getStartOffset(),range.getEndOffset()).descriptionAndTooltip(message).create();
    QuickFixAction.registerQuickFixAction(errorResult,QUICK_FIX_FACTORY.createModifierListFix(psiModifierList,PsiModifier.PUBLIC,false,false));
    PsiClass[] classes=file.getClasses();
    if (classes.length > 1) {
      QuickFixAction.registerQuickFixAction(errorResult,QUICK_FIX_FACTORY.createMoveClassToSeparateFileFix(aClass));
    }
    for (    PsiClass otherClass : classes) {
      if (!otherClass.getManager().areElementsEquivalent(otherClass,aClass) && otherClass.hasModifierProperty(PsiModifier.PUBLIC) && otherClass.getName().equals(virtualFile.getNameWithoutExtension())) {
        return errorResult;
      }
    }
    QuickFixAction.registerQuickFixAction(errorResult,QUICK_FIX_FACTORY.createRenameFileFix(aClass.getName() + JavaFileType.DOT_DEFAULT_EXTENSION));
    QuickFixAction.registerQuickFixAction(errorResult,QUICK_FIX_FACTORY.createRenameElementFix(aClass));
  }
  return errorResult;
}
