{
  PsiExpression qualifier=expression.getQualifier();
  if (qualifier == null)   return null;
  PsiType type=expression.getType();
  if (type instanceof PsiArrayType) {
    String description=JavaErrorMessages.message("invalid.qualified.new");
    HighlightInfo info=HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(expression).descriptionAndTooltip(description).create();
    QuickFixAction.registerQuickFixAction(info,QUICK_FIX_FACTORY.createRemoveNewQualifierFix(expression,null));
    return info;
  }
  PsiClass aClass=PsiUtil.resolveClassInType(type);
  HighlightInfo info=null;
  if (aClass != null) {
    if (aClass.hasModifierProperty(PsiModifier.STATIC)) {
      String description=JavaErrorMessages.message("qualified.new.of.static.class");
      info=HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(expression).descriptionAndTooltip(description).create();
      if (!aClass.isEnum()) {
        QuickFixAction.registerQuickFixAction(info,QUICK_FIX_FACTORY.createModifierListFix(aClass,PsiModifier.STATIC,false,false));
      }
    }
 else     if (aClass instanceof PsiAnonymousClass) {
      final PsiClass baseClass=PsiUtil.resolveClassInType(((PsiAnonymousClass)aClass).getBaseClassType());
      if (baseClass != null && baseClass.isInterface()) {
        info=HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(expression).descriptionAndTooltip("Anonymous class implements interface; cannot have qualifier for new").create();
      }
    }
    QuickFixAction.registerQuickFixAction(info,QUICK_FIX_FACTORY.createRemoveNewQualifierFix(expression,aClass));
  }
  return info;
}
