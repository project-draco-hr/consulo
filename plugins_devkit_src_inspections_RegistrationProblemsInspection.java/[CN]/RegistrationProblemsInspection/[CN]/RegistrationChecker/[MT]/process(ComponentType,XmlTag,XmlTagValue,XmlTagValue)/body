{
  if (impl == null) {
    addProblem(component,DevKitBundle.message("inspections.registration.problems.missing.implementation.class"),ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
  }
 else {
    String intfName=null;
    PsiClass intfClass=null;
    if (intf != null) {
      intfName=intf.getTrimmedText();
      intfClass=JavaPsiFacade.getInstance(myPsiManager.getProject()).findClass(intfName,myScope);
    }
    final String implClassName=impl.getTrimmedText();
    final PsiClass implClass=JavaPsiFacade.getInstance(myPsiManager.getProject()).findClass(implClassName,myScope);
    if (implClass == null) {
      addProblem(impl,DevKitBundle.message("inspections.registration.problems.cannot.resolve.class",DevKitBundle.message("class.implementation")),ProblemHighlightType.LIKE_UNKNOWN_SYMBOL,((LocalQuickFix)QuickFixFactory.getInstance().createCreateClassOrInterfaceFix(myXmlFile,implClassName,true,intfClass != null ? intfName : type.myClassName)));
    }
 else {
      final PsiClass componentClass=JavaPsiFacade.getInstance(myPsiManager.getProject()).findClass(type.myClassName,myScope);
      if (componentClass != null && !implClass.isInheritor(componentClass,true) && type != ComponentType.APPLICATION) {
        addProblem(impl,DevKitBundle.message("inspections.registration.problems.component.should.implement",type.myClassName),ProblemHighlightType.GENERIC_ERROR_OR_WARNING,ImplementOrExtendFix.createFix(componentClass,implClass,myOnTheFly));
      }
      if (isAbstract(implClass)) {
        addProblem(impl,DevKitBundle.message("inspections.registration.problems.abstract"),ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
      }
    }
    if (intfName != null) {
      if (intfClass == null) {
        addProblem(intf,DevKitBundle.message("inspections.registration.problems.cannot.resolve.class",DevKitBundle.message("class.interface")),ProblemHighlightType.LIKE_UNKNOWN_SYMBOL,((LocalQuickFix)QuickFixFactory.getInstance().createCreateClassOrInterfaceFix(myXmlFile,intfName,false,type.myClassName)),((LocalQuickFix)QuickFixFactory.getInstance().createCreateClassOrInterfaceFix(myXmlFile,intfName,true,type.myClassName)));
      }
 else       if (implClass != null) {
        final String fqn=intfClass.getQualifiedName();
        if (type == ComponentType.MODULE) {
          if (!checkInterface(fqn,intf)) {
            final String[] keys=makeQualifiedModuleInterfaceNames(component,fqn);
            for (            String key : keys) {
              checkInterface(key,intf);
              myInterfaceClasses.add(key);
            }
          }
        }
 else {
          checkInterface(fqn,intf);
          myInterfaceClasses.add(fqn);
        }
        if (intfClass != implClass && !implClass.isInheritor(intfClass,true)) {
          addProblem(impl,DevKitBundle.message("inspections.registration.problems.component.incompatible.interface",fqn),ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
        }
      }
    }
  }
  return true;
}
