{
  final XmlAttribute attribute=action.getAttribute("class",null);
  if (attribute != null) {
    final PsiElement token=getAttValueToken(attribute);
    if (token != null) {
      final PsiClass actionClass=myPsiManager.findClass(attribute.getValue().trim(),myScope);
      if (actionClass == null) {
        addProblem(token,DevKitBundle.message("inspections.registration.problems.cannot.resolve.class",DevKitBundle.message("class.action")),ProblemHighlightType.LIKE_UNKNOWN_SYMBOL);
      }
 else {
        if (!type.isOfType(actionClass)) {
          final PsiClass psiClass=myPsiManager.findClass(type.myClassName,myScope);
          if (psiClass != null && !actionClass.isInheritor(psiClass,true)) {
            addProblem(token,DevKitBundle.message("inspections.registration.problems.action.incompatible.class",type.myClassName),ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
          }
        }
        if (!isPublic(actionClass)) {
          addProblem(token,DevKitBundle.message("inspections.registration.problems.not.public"),ProblemHighlightType.GENERIC_ERROR_OR_WARNING,new MakePublicFix(actionClass,true));
        }
        final ConstructorType noArgCtor=ConstructorType.getNoArgCtor(actionClass);
        if (noArgCtor == null) {
          addProblem(token,DevKitBundle.message("inspections.registration.problems.missing.noarg.ctor"),ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
        }
 else         if (noArgCtor != ConstructorType.DEFAULT && !isPublic(noArgCtor.myCtor)) {
          addProblem(token,DevKitBundle.message("inspections.registration.problems.ctor.not.public"),ProblemHighlightType.GENERIC_ERROR_OR_WARNING,new MakePublicFix(noArgCtor.myCtor,true));
        }
        if (isAbstract(actionClass)) {
          addProblem(token,DevKitBundle.message("inspections.registration.problems.abstract"),ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
        }
      }
    }
  }
  return true;
}
