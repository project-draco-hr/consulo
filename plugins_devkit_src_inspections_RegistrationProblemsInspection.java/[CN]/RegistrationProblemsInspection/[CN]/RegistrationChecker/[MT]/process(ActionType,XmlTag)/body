{
  final XmlAttribute attribute=action.getAttribute("class");
  if (attribute != null) {
    final PsiElement token=getAttValueToken(attribute);
    if (token != null) {
      final String actionClassName=attribute.getValue().trim();
      final PsiClass actionClass=ClassUtil.findPsiClass(myPsiManager,actionClassName,null,true,myScope);
      if (actionClass == null) {
        addProblem(token,DevKitBundle.message("inspections.registration.problems.cannot.resolve.class",DevKitBundle.message("class.action")),ProblemHighlightType.LIKE_UNKNOWN_SYMBOL,myOnTheFly,((LocalQuickFix)QuickFixFactory.getInstance().createCreateClassOrInterfaceFix(token,actionClassName,true,AnAction.class.getName())));
      }
 else {
        if (!type.isOfType(actionClass)) {
          final PsiClass psiClass=JavaPsiFacade.getInstance(myPsiManager.getProject()).findClass(type.myClassName,myScope);
          if (psiClass != null && !actionClass.isInheritor(psiClass,true)) {
            addProblem(token,DevKitBundle.message("inspections.registration.problems.action.incompatible.class",type.myClassName),ProblemHighlightType.GENERIC_ERROR_OR_WARNING,myOnTheFly,ImplementOrExtendFix.createFix(psiClass,actionClass,myOnTheFly));
          }
        }
        final ConstructorType noArgCtor=ConstructorType.getNoArgCtor(actionClass);
        if (noArgCtor == null) {
          addProblem(token,DevKitBundle.message("inspections.registration.problems.missing.noarg.ctor"),ProblemHighlightType.GENERIC_ERROR_OR_WARNING,myOnTheFly,new CreateConstructorFix(actionClass,myOnTheFly));
        }
        if (isAbstract(actionClass)) {
          addProblem(token,DevKitBundle.message("inspections.registration.problems.abstract"),ProblemHighlightType.GENERIC_ERROR_OR_WARNING,myOnTheFly);
        }
      }
    }
  }
  return true;
}
