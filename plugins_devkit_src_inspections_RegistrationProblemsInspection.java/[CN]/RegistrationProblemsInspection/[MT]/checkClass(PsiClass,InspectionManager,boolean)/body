{
  final PsiIdentifier nameIdentifier=checkedClass.getNameIdentifier();
  if (CHECK_JAVA_CODE && nameIdentifier != null && checkedClass.getQualifiedName() != null && checkedClass.getContainingFile().getVirtualFile() != null) {
    final Set<PsiClass> componentClasses=getRegistrationTypes(checkedClass,CHECK_ACTIONS);
    if (componentClasses != null) {
      List<ProblemDescriptor> problems=null;
      for (      PsiClass compClass : componentClasses) {
        if (!checkedClass.isInheritor(compClass,true)) {
          problems=addProblem(problems,manager.createProblemDescriptor(nameIdentifier,DevKitBundle.message("inspections.registration.problems.incompatible.message",compClass.isInterface() ? DevKitBundle.message("keyword.implement") : DevKitBundle.message("keyword.extend"),compClass.getQualifiedName()),ImplementOrExtendFix.createFix(compClass,checkedClass,isOnTheFly),ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
        }
      }
      if (ActionType.ACTION.isOfType(checkedClass)) {
        if (!isPublic(checkedClass)) {
          problems=addProblem(problems,manager.createProblemDescriptor(nameIdentifier,DevKitBundle.message("inspections.registration.problems.not.public"),new MakePublicFix(checkedClass,isOnTheFly),ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
        }
        if (ConstructorType.getNoArgCtor(checkedClass) == null) {
          problems=addProblem(problems,manager.createProblemDescriptor(nameIdentifier,DevKitBundle.message("inspections.registration.problems.missing.noarg.ctor"),new CreateConstructorFix(checkedClass,isOnTheFly),ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
        }
      }
      if (isAbstract(checkedClass)) {
        problems=addProblem(problems,manager.createProblemDescriptor(nameIdentifier,DevKitBundle.message("inspections.registration.problems.abstract"),NO_FIX,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
      }
      return problems != null ? problems.toArray(new ProblemDescriptor[problems.size()]) : null;
    }
  }
  return null;
}
