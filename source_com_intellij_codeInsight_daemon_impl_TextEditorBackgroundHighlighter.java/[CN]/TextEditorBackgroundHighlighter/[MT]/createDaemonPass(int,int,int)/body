{
  LOG.assertTrue(endOffset <= myDocument.getTextLength());
  if (startOffset > endOffset)   return null;
switch (pass) {
case Pass.UPDATE_FOLDING:
    return new CodeFoldingPass(myProject,myEditor);
case Pass.UPDATE_ALL:
case Pass.UPDATE_VISIBLE:
  return new GeneralHighlightingPass(myProject,myFile,myDocument,startOffset,endOffset,myCompiled,pass == Pass.UPDATE_ALL);
case Pass.POST_UPDATE_ALL:
return new PostHighlightingPass(myProject,myFile,myEditor,startOffset,endOffset,myCompiled);
case Pass.UPDATE_OVERRIDEN_MARKERS:
return new OverridenMarkersPass(myProject,myFile,myDocument,startOffset,endOffset);
case Pass.LOCAL_INSPECTIONS:
return myCompiled || !myFile.isPhysical() ? null : new LocalInspectionsPass(myProject,myFile,myDocument,startOffset,endOffset);
case Pass.POPUP_HINTS:
case Pass.POPUP_HINTS2:
if (!myCompiled) {
return new ShowIntentionsPass(myProject,myEditor,IntentionManager.getInstance(myProject).getIntentionActions(),pass == Pass.POPUP_HINTS2);
}
 else {
return null;
}
case Pass.EXTERNAL_TOOLS:
return new ExternalToolPass(myFile,myEditor);
default :
LOG.error(Integer.toString(pass));
return null;
}
}
