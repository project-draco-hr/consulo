def mergeone(self, repo, mergeq, head, patch, rev, diffopts):
    (err, n) = self.apply(repo, [patch], update_status=False, strict=True, merge=rev)
    if (err == 0):
        return (err, n)
    if (n is None):
        raise util.Abort((_('apply failed for patch %s') % patch))
    self.ui.warn((_("patch didn't work out, merging %s\n") % patch))
    hg.clean(repo, head)
    self.strip(repo, n, update=False, backup='strip')
    ctx = repo[rev]
    ret = hg.merge(repo, rev)
    if ret:
        raise util.Abort((_('update returned %d') % ret))
    n = repo.commit(ctx.description(), ctx.user(), force=True)
    if (n is None):
        raise util.Abort(_('repo commit failed'))
    try:
        ph = patchheader(mergeq.join(patch), self.plainmode)
    except:
        raise util.Abort((_('unable to read %s') % patch))
    diffopts = self.patchopts(diffopts, patch)
    patchf = self.opener(patch, 'w')
    comments = str(ph)
    if comments:
        patchf.write(comments)
    self.printdiff(repo, diffopts, head, n, fp=patchf)
    patchf.close()
    self.removeundo(repo)
    return (0, n)
