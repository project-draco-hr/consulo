def _revpatches(self, repo, revs):
    firstrev = repo[self.applied[0].rev].rev()
    patches = []
    for (i, rev) in enumerate(revs):
        if (rev < firstrev):
            raise util.Abort((_('revision %d is not managed') % rev))
        ctx = repo[rev]
        base = bin(self.applied[i].rev)
        if (ctx.node() != base):
            msg = _('cannot delete revision %d above applied patches')
            raise util.Abort((msg % rev))
        patch = self.applied[i].name
        for fmt in ('[mq]: %s', 'imported patch %s'):
            if (ctx.description() == (fmt % patch)):
                msg = _('patch %s finalized without changeset message\n')
                repo.ui.status((msg % patch))
                break
        patches.append(patch)
    return patches
