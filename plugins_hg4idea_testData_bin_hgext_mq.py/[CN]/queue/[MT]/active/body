def active(self):
    if (self.active_guards is None):
        self.active_guards = []
        try:
            guards = self.opener(self.guards_path).read().split()
        except IOError as err:
            if (err.errno != errno.ENOENT):
                raise
            guards = []
        for (i, guard) in enumerate(guards):
            bad = self.check_guard(guard)
            if bad:
                self.ui.warn(('%s:%d: %s\n' % (self.join(self.guards_path), (i + 1), bad)))
            else:
                self.active_guards.append(guard)
    return self.active_guards
