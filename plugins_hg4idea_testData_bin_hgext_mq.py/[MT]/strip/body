def strip(ui, repo, rev, **opts):
    'strip a changeset and all its descendants from the repository\n\n    The strip command removes all changesets whose local revision\n    number is greater than or equal to REV, and then restores any\n    changesets that are not descendants of REV. If the working\n    directory has uncommitted changes, the operation is aborted unless\n    the --force flag is supplied.\n\n    If a parent of the working directory is stripped, then the working\n    directory will automatically be updated to the most recent\n    available ancestor of the stripped parent after the operation\n    completes.\n\n    Any stripped changesets are stored in ``.hg/strip-backup`` as a\n    bundle (see ``hg help bundle`` and ``hg help unbundle``). They can\n    be restored by running ``hg unbundle .hg/strip-backup/BUNDLE``,\n    where BUNDLE is the bundle file created by the strip. Note that\n    the local revision numbers will in general be different after the\n    restore.\n\n    Use the --nobackup option to discard the backup bundle once the\n    operation completes.\n    '
    backup = 'all'
    if opts['backup']:
        backup = 'strip'
    elif opts['nobackup']:
        backup = 'none'
    rev = repo.lookup(rev)
    p = repo.dirstate.parents()
    cl = repo.changelog
    update = True
    if (p[0] == nullid):
        update = False
    elif ((p[1] == nullid) and (rev != cl.ancestor(p[0], rev))):
        update = False
    elif (rev not in (cl.ancestor(p[0], rev), cl.ancestor(p[1], rev))):
        update = False
    repo.mq.strip(repo, rev, backup=backup, update=update, force=opts['force'])
    return 0
