{
  super(new GridBagLayout());
  myHectorLabel.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      Point point=new Point(0,0);
      final PsiFile file=getCurrentFile();
      if (file != null) {
        if (!DaemonCodeAnalyzer.getInstance(file.getProject()).isHighlightingAvailable(file))         return;
        final HectorComponent component=new HectorComponent(file);
        final Dimension dimension=component.getPreferredSize();
        point=new Point(point.x - dimension.width,point.y - dimension.height);
        component.showComponent(new RelativePoint(TogglePopupHintsPanel.this,point));
      }
    }
  }
);
  myHectorLabel.setIconTextGap(0);
  myInspectionProfileLabel.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      final PsiFile file=getCurrentFile();
      if (file != null) {
        if (!DaemonCodeAnalyzer.getInstance(file.getProject()).isHighlightingAvailable(file))         return;
        final Project project=file.getProject();
        final ErrorsConfigurable profileConfigurable=ErrorOptionsConfigurable.getInstance(project);
        ShowSettingsUtil.getInstance().editConfigurable(project,profileConfigurable,new Runnable(){
          public void run(){
            profileConfigurable.selectScopeFor(file);
          }
        }
);
      }
    }
  }
);
  add(myHectorLabel,new GridBagConstraints(0,0,1,1,0,1,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));
  add(myInspectionProfileLabel,new GridBagConstraints(1,0,1,1,1,1,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,3,0,3),0,0));
  StatusBarTooltipper.install(this,myHectorLabel,statusBar);
  StatusBarTooltipper.install(this,myInspectionProfileLabel,statusBar);
}
