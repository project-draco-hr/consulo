{
  BufferedReader buf=new BufferedReader(input);
  Trinity<Pattern,Pattern,Boolean> settings=getParseSettings(surl);
  @NonNls Pattern startSection=settings.first;
  @NonNls Pattern endSection=settings.second;
  boolean useDt=settings.third;
  @NonNls String greatestEndSection="<!-- ========= END OF CLASS DATA ========= -->";
  data.append(HTML);
  data.append("<style type=\"text/css\">" + "  ul.inheritance {\n" + "      margin:0;\n"+ "      padding:0;\n"+ "  }\n"+ "  ul.inheritance li {\n"+ "       display:inline;\n"+ "       list-style:none;\n"+ "  }\n"+ "  ul.inheritance li ul.inheritance {\n"+ "    margin-left:15px;\n"+ "    padding-left:15px;\n"+ "    padding-top:1px;\n"+ "  }\n"+ "</style>");
  String read;
  String contentEncoding=null;
  do {
    read=buf.readLine();
    if (read != null && search4Encoding && read.contains("charset")) {
      String foundEncoding=parseContentEncoding(read);
      if (foundEncoding != null) {
        contentEncoding=foundEncoding;
      }
    }
  }
 while (read != null && !startSection.matcher(StringUtil.toUpperCase(read)).find());
  if (input instanceof MyReader && contentEncoding != null) {
    if (contentEncoding != null && !contentEncoding.equals("UTF-8") && !contentEncoding.equals(((MyReader)input).getEncoding())) {
      Reader stream;
      try {
        stream=getReaderByUrl(surl,myHttpConfigurable,new ProgressIndicatorBase());
      }
 catch (      ProcessCanceledException e) {
        return;
      }
      data.delete(0,data.length());
      doBuildFromStream(surl,new MyReader(((MyReader)stream).getInputStream(),contentEncoding),data,false);
      return;
    }
  }
  if (read == null) {
    data.delete(0,data.length());
    return;
  }
  if (useDt) {
    boolean skip=false;
    do {
      if (StringUtil.toUpperCase(read).contains(H2) && !read.toUpperCase().contains("H2")) {
        data.append(H2);
        skip=true;
      }
 else       if (endSection.matcher(read).find() || StringUtil.indexOfIgnoreCase(read,greatestEndSection,0) != -1) {
        data.append(HTML_CLOSE);
        return;
      }
 else       if (!skip) {
        appendLine(data,read);
      }
    }
 while (((read=buf.readLine()) != null) && !StringUtil.toUpperCase(read).trim().equals(DL) && !StringUtil.containsIgnoreCase(read,"<div class=\"description\""));
    data.append(DL);
    StringBuffer classDetails=new StringBuffer();
    while (((read=buf.readLine()) != null) && !StringUtil.toUpperCase(read).equals(HR) && !StringUtil.toUpperCase(read).equals(P)) {
      if (reachTheEnd(data,read,classDetails))       return;
      appendLine(classDetails,read);
    }
    while (((read=buf.readLine()) != null) && !StringUtil.toUpperCase(read).equals(P) && !StringUtil.toUpperCase(read).equals(HR)) {
      if (reachTheEnd(data,read,classDetails))       return;
      appendLine(data,read.replaceAll(DT,DT + BR));
    }
    data.append(classDetails);
    data.append(P);
  }
 else {
    appendLine(data,read);
  }
  while (((read=buf.readLine()) != null) && !endSection.matcher(read).find() && StringUtil.indexOfIgnoreCase(read,greatestEndSection,0) == -1) {
    if (!StringUtil.toUpperCase(read).contains(HR) && !StringUtil.containsIgnoreCase(read,"<ul class=\"blockList\">") && !StringUtil.containsIgnoreCase(read,"<li class=\"blockList\">")) {
      appendLine(data,read);
    }
  }
  data.append(HTML_CLOSE);
}
