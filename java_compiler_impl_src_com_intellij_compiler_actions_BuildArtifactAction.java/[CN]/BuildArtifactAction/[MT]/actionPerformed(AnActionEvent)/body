{
  final String outputPath=myArtifact.getOutputPath();
  if (StringUtil.isEmpty(outputPath)) {
    final FileChooserDescriptor descriptor=FileChooserDescriptorFactory.createSingleFolderDescriptor();
    descriptor.setTitle(CompilerBundle.message("dialog.title.output.directory.for.artifact"));
    descriptor.setDescription(CompilerBundle.message("chooser.description.select.output.directory.for.0.artifact",myArtifact.getName()));
    final FileChooserDialog chooser=FileChooserFactory.getInstance().createFileChooser(descriptor,myProject);
    final VirtualFile[] files=chooser.choose(null,myProject);
    if (files.length != 1)     return;
    final ModifiableArtifactModel model=ArtifactManager.getInstance(myProject).createModifiableModel();
    model.getOrCreateModifiableArtifact(myArtifact).setOutputPath(files[0].getPath());
    new WriteAction(){
      protected void run(      final Result result){
        model.commit();
      }
    }
.execute();
  }
  CompilerManager.getInstance(myProject).make(ArtifactCompileScope.createArtifactsScope(myProject,Collections.singletonList(myArtifact)),null);
}
