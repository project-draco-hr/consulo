{
  ArrangementSettingsNode newNode=ArrangementUtil.and(mySettingsNode.clone(),node);
  HierarchicalArrangementSettingsNode grouped=myGrouper.group(newNode);
  int newDepth=ArrangementConfigUtil.getDepth(grouped);
  int oldDepth=ArrangementConfigUtil.distance(myTopMost,myBottomMost);
  if (newDepth == oldDepth) {
    mySettingsNode=newNode;
    myBottomMost.setUserObject(ArrangementConfigUtil.getLast(grouped).getCurrent());
    return;
  }
  mySettingsNode=newNode;
  DefaultMutableTreeNode parent=(DefaultMutableTreeNode)myTopMost.getParent();
  parent.remove(myTopMost);
  Pair<DefaultMutableTreeNode,Integer> pair=ArrangementConfigUtil.map(parent,grouped);
  myTopMost=(DefaultMutableTreeNode)ArrangementConfigUtil.getLastBefore(pair.first,parent);
  myBottomMost=pair.first;
  int depthShift=newDepth - oldDepth;
  int[] rows=myRowMappings.keys();
  Arrays.sort(rows);
  for (int i=rows.length - 1; i >= 0; i--) {
    int row=rows[i];
    if (row >= myRow) {
      myRowMappings.put(row + depthShift,myRowMappings.get(row));
      myRowMappings.remove(row);
    }
 else {
      break;
    }
  }
  myRow+=depthShift;
}
