{
  mySettingsNode=newNode;
  HierarchicalArrangementSettingsNode grouped=myGrouper.group(newNode);
  int newDepth=ArrangementConfigUtil.getDepth(grouped);
  int oldDepth=ArrangementConfigUtil.distance(myTopMost,myBottomMost);
  if (oldDepth == newDepth) {
    myBottomMost.setUserObject(ArrangementConfigUtil.getLast(grouped).getCurrent());
    return;
  }
  Pair<DefaultMutableTreeNode,Integer> replacement=ArrangementConfigUtil.map(null,grouped);
  DefaultMutableTreeNode newBottom=replacement.first;
  DefaultMutableTreeNode newTop=ArrangementConfigUtil.getRoot(newBottom);
  final TIntIntHashMap rowChanges=ArrangementConfigUtil.replace(myTopMost,myBottomMost,newTop,myTreeModel);
  myTopMost=newTop;
  myBottomMost=newBottom;
  final TIntObjectHashMap<ArrangementRuleEditingModelImpl> newMappings=new TIntObjectHashMap<ArrangementRuleEditingModelImpl>();
  myRowMappings.forEachEntry(new TIntObjectProcedure<ArrangementRuleEditingModelImpl>(){
    @Override public boolean execute(    int row,    ArrangementRuleEditingModelImpl model){
      if (row == myRow) {
        return true;
      }
      if (rowChanges.containsKey(row - myRowShift)) {
        newMappings.put(rowChanges.get(row - myRowShift) + myRowShift,model);
      }
 else {
        newMappings.put(row,model);
      }
      model.refreshTreeNodes();
      return true;
    }
  }
);
  myRow=ArrangementConfigUtil.getRow(myBottomMost) + myRowShift;
  newMappings.put(myRow,this);
  myRowMappings.clear();
  newMappings.forEachEntry(new TIntObjectProcedure<ArrangementRuleEditingModelImpl>(){
    @Override public boolean execute(    int row,    ArrangementRuleEditingModelImpl model){
      myRowMappings.put(row,model);
      return true;
    }
  }
);
}
