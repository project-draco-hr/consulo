{
  myMatchCondition=newNode;
  HierarchicalArrangementSettingsNode grouped=myGrouper.group(newNode);
  int newDepth=ArrangementConfigUtil.getDepth(grouped);
  int oldDepth=ArrangementConfigUtil.distance(myTopMost,myBottomMost);
  if (oldDepth == newDepth) {
    myBottomMost.setSettings(ArrangementConfigUtil.getLast(grouped).getCurrent());
    return EMPTY_CHANGES;
  }
  Pair<ArrangementTreeNode,Integer> replacement=ArrangementConfigUtil.map(null,grouped,null);
  ArrangementTreeNode newBottom=replacement.first;
  ArrangementTreeNode newTop=ArrangementConfigUtil.getRoot(newBottom);
  final TIntIntHashMap rowChanges=ArrangementConfigUtil.replace(myTopMost,myBottomMost,newTop,myTreeModel,myRootVisible);
  myTopMost=newTop;
  myBottomMost=newBottom;
  rowChanges.remove(myRow);
  int newRow=ArrangementConfigUtil.getRow(myBottomMost,myRootVisible);
  rowChanges.put(myRow,newRow);
  myRow=newRow;
  return rowChanges;
}
