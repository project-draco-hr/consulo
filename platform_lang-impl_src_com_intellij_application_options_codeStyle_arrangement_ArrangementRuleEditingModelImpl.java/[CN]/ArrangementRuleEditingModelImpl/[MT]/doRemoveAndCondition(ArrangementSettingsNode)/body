{
  if (!(mySettingsNode instanceof ArrangementSettingsCompositeNode)) {
    return;
  }
  ArrangementSettingsNode newNode=mySettingsNode.clone();
  ArrangementSettingsCompositeNode composite=(ArrangementSettingsCompositeNode)newNode;
  composite.getOperands().remove(node);
  if (composite.getOperands().size() == 1) {
    newNode=composite.getOperands().iterator().next();
  }
  mySettingsNode=newNode;
  HierarchicalArrangementSettingsNode grouped=myGrouper.group(newNode);
  int newDepth=ArrangementConfigUtil.getDepth(grouped);
  int oldDepth=ArrangementConfigUtil.distance(myTopMost,myBottomMost);
  if (oldDepth == newDepth) {
    myBottomMost.setUserObject(ArrangementConfigUtil.getLast(grouped).getCurrent());
    return;
  }
  Pair<DefaultMutableTreeNode,Integer> replacement=ArrangementConfigUtil.map(null,grouped);
  DefaultMutableTreeNode newTop=replacement.first;
  DefaultMutableTreeNode newBottom=ArrangementConfigUtil.getLast(newTop);
  final TIntIntHashMap rowChanges=ArrangementConfigUtil.replace(myTopMost,myBottomMost,newTop);
  myTopMost=newTop;
  myBottomMost=newBottom;
  if (rowChanges.isEmpty()) {
    int newRow=ArrangementConfigUtil.getRow(myBottomMost);
    if (newRow != myRow) {
      myRowMappings.put(newRow,myRowMappings.remove(myRow));
      myRow=newRow;
    }
    return;
  }
  final TIntObjectHashMap<ArrangementRuleEditingModel> newMappings=new TIntObjectHashMap<ArrangementRuleEditingModel>();
  myRowMappings.forEachEntry(new TIntObjectProcedure<ArrangementRuleEditingModel>(){
    @Override public boolean execute(    int row,    ArrangementRuleEditingModel model){
      if (row == myRow) {
        return true;
      }
      if (rowChanges.containsKey(row)) {
        newMappings.put(rowChanges.get(row),model);
      }
 else {
        newMappings.put(row,model);
      }
      return true;
    }
  }
);
  myRow=ArrangementConfigUtil.getRow(myBottomMost);
  newMappings.put(myRow,this);
  myRowMappings.clear();
  newMappings.forEachEntry(new TIntObjectProcedure<ArrangementRuleEditingModel>(){
    @Override public boolean execute(    int row,    ArrangementRuleEditingModel model){
      myRowMappings.put(row,model);
      return true;
    }
  }
);
}
