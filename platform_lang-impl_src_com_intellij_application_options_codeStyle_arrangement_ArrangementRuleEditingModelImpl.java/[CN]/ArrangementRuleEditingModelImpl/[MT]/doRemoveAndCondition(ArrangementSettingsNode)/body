{
  if (!(mySettingsNode instanceof ArrangementSettingsCompositeNode)) {
    return;
  }
  ArrangementSettingsNode newNode=mySettingsNode.clone();
  ArrangementSettingsCompositeNode composite=(ArrangementSettingsCompositeNode)newNode;
  composite.getOperands().remove(node);
  if (composite.getOperands().size() == 1) {
    newNode=composite.getOperands().iterator().next();
  }
  mySettingsNode=newNode;
  HierarchicalArrangementSettingsNode grouped=myGrouper.group(newNode);
  int newDepth=ArrangementConfigUtil.getDepth(grouped);
  int oldDepth=ArrangementConfigUtil.distance(myTopMost,myBottomMost);
  if (oldDepth == newDepth) {
    myBottomMost.setUserObject(ArrangementConfigUtil.getLast(grouped).getCurrent());
    return;
  }
  DefaultMutableTreeNode parent=(DefaultMutableTreeNode)myTopMost.getParent();
  parent.remove(myTopMost);
  Pair<DefaultMutableTreeNode,Integer> pair=ArrangementConfigUtil.map(parent,grouped);
  myTopMost=(DefaultMutableTreeNode)ArrangementConfigUtil.getLastBefore(pair.first,parent);
  myBottomMost=pair.first;
  int[] rows=myRowMappings.keys();
  Arrays.sort(rows);
  int depthShift=oldDepth - newDepth;
  for (  int row : rows) {
    if (row >= myRow) {
      myRowMappings.put(row - depthShift,myRowMappings.get(row));
      myRowMappings.remove(row);
    }
 else {
      break;
    }
  }
  myRow-=depthShift;
}
