{
  final Project project=CommonDataKeys.PROJECT.getData(dataContext);
  PsiFile file=CommonDataKeys.PSI_FILE.getData(dataContext);
  if (project == null)   return;
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  final Editor editor=getEditor(dataContext);
  PsiElement element=CommonDataKeys.PSI_ELEMENT.getData(dataContext);
  boolean isInvokedFromEditor=CommonDataKeys.EDITOR.getData(dataContext) != null;
  element=getElement(project,file,editor,element);
  if (element == null && file == null)   return;
  PsiFile containingFile=element != null ? element.getContainingFile() : file;
  if (containingFile == null || !containingFile.getViewProvider().isPhysical())   return;
  PsiReference ref=null;
  if (editor != null) {
    ref=TargetElementUtil.findReference(editor,editor.getCaretModel().getOffset());
    if (element == null && ref != null) {
      element=TargetElementUtil.adjustReference(ref);
    }
  }
  String text="";
  PsiElement[] impls=new PsiElement[0];
  if (element != null) {
    impls=getSelfAndImplementations(editor,element,createImplementationsSearcher());
    text=SymbolPresentationUtil.getSymbolPresentableText(element);
  }
  if (impls.length == 0 && ref instanceof PsiPolyVariantReference) {
    final PsiPolyVariantReference polyReference=(PsiPolyVariantReference)ref;
    text=polyReference.getRangeInElement().substring(polyReference.getElement().getText());
    final ResolveResult[] results=polyReference.multiResolve(false);
    final List<PsiElement> implsList=new ArrayList<PsiElement>(results.length);
    for (    ResolveResult result : results) {
      final PsiElement resolvedElement=result.getElement();
      if (resolvedElement != null && resolvedElement.isPhysical()) {
        implsList.add(resolvedElement);
      }
    }
    if (!implsList.isEmpty()) {
      implsList.toArray(impls=new PsiElement[implsList.size()]);
    }
  }
  showImplementations(impls,project,text,editor,file,element,isInvokedFromEditor,invokedByShortcut);
}
