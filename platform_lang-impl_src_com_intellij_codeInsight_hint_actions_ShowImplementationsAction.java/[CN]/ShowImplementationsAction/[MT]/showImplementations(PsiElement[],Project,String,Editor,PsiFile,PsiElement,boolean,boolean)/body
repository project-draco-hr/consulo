{
  if (impls == null || impls.length == 0)   return;
  FeatureUsageTracker.getInstance().triggerFeatureUsed(CODEASSISTS_QUICKDEFINITION_FEATURE);
  if (LookupManager.getInstance(project).getActiveLookup() != null) {
    FeatureUsageTracker.getInstance().triggerFeatureUsed(CODEASSISTS_QUICKDEFINITION_LOOKUP_FEATURE);
  }
  int index=0;
  if (invokedFromEditor && file != null && impls.length > 1) {
    final VirtualFile virtualFile=file.getVirtualFile();
    final PsiFile containingFile=impls[0].getContainingFile();
    if (virtualFile != null && containingFile != null && virtualFile.equals(containingFile.getVirtualFile())) {
      final PsiFile secondContainingFile=impls[1].getContainingFile();
      if (secondContainingFile != containingFile) {
        index=1;
      }
    }
  }
  final String title=CodeInsightBundle.message("implementation.view.title",text);
  if (myPopupRef != null) {
    final JBPopup popup=myPopupRef.get();
    if (popup != null && popup.isVisible() && popup instanceof AbstractPopup) {
      final ImplementationViewComponent component=(ImplementationViewComponent)((AbstractPopup)popup).getComponent();
      ((AbstractPopup)popup).setCaption(title);
      component.update(impls,index);
      updateInBackground(editor,element,component,title,(AbstractPopup)popup);
      if (invokedByShortcut) {
        ((AbstractPopup)popup).focusPreferredComponent();
      }
      return;
    }
  }
  final ImplementationViewComponent component=new ImplementationViewComponent(impls,index);
  if (component.hasElementsToShow()) {
    final PopupUpdateProcessor updateProcessor=new PopupUpdateProcessor(project){
      @Override public void updatePopup(      Object lookupItemObject){
        final PsiElement element=lookupItemObject instanceof PsiElement ? (PsiElement)lookupItemObject : DocumentationManager.getInstance(project).getElementFromLookup(editor,file);
        updateElementImplementations(element,editor,project,file);
      }
    }
;
    final JBPopup popup=JBPopupFactory.getInstance().createComponentPopupBuilder(component,component.getPreferredFocusableComponent()).setRequestFocusCondition(project,NotLookupOrSearchCondition.INSTANCE).setProject(project).addListener(updateProcessor).addUserData(updateProcessor).setDimensionServiceKey(project,DocumentationManager.JAVADOC_LOCATION_AND_SIZE,false).setResizable(true).setMovable(true).setRequestFocus(invokedFromEditor && LookupManager.getActiveLookup(editor) == null).setTitle(title).setCouldPin(new Processor<JBPopup>(){
      @Override public boolean process(      JBPopup popup){
        component.showInUsageView();
        return false;
      }
    }
).createPopup();
    updateInBackground(editor,element,component,title,(AbstractPopup)popup);
    PopupPositionManager.positionPopupInBestPosition(popup,editor,DataManager.getInstance().getDataContext());
    component.setHint(popup,title);
    myPopupRef=new WeakReference<JBPopup>(popup);
  }
}
