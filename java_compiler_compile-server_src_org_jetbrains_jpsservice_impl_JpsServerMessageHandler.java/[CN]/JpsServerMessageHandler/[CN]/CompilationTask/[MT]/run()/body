{
  Channels.write(myChannelContext.getChannel(),ProtoUtil.toMessage(mySessionId,ProtoUtil.createBuildStartedEvent("build started")));
  Throwable error=null;
  try {
    Facade.getInstance().startBuild(myProjectPath,myModules,myParams,new MessagesConsumer(){
      public void consumeProgressMessage(      String message){
        Channels.write(myChannelContext.getChannel(),ProtoUtil.toMessage(mySessionId,ProtoUtil.createCompileProgressMessageResponse(message)));
      }
      public void consumeCompilerMessage(      String compilerName,      String message){
        final JpsRemoteProto.Message.Response.CompileMessage.Kind kind=message.contains("error:") ? JpsRemoteProto.Message.Response.CompileMessage.Kind.ERROR : JpsRemoteProto.Message.Response.CompileMessage.Kind.INFO;
        Channels.write(myChannelContext.getChannel(),ProtoUtil.toMessage(mySessionId,ProtoUtil.createCompileMessageResponse(kind,message,null,-1,-1)));
      }
    }
);
  }
 catch (  Throwable e) {
    error=e;
  }
 finally {
    final JpsRemoteProto.Message lastMessage=error != null ? ProtoUtil.toMessage(mySessionId,ProtoUtil.createFailure("build failed: ",error)) : ProtoUtil.toMessage(mySessionId,ProtoUtil.createBuildCompletedEvent("build completed"));
    Channels.write(myChannelContext.getChannel(),lastMessage).addListener(new ChannelFutureListener(){
      public void operationComplete(      ChannelFuture future) throws Exception {
        myBuildsInProgress.remove(myProjectPath);
      }
    }
);
  }
}
