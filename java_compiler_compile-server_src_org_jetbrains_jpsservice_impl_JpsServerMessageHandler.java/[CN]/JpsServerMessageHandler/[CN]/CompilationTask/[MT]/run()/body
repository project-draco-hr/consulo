{
  Channels.write(myChannelContext.getChannel(),ProtoUtil.toMessage(mySessionId,ProtoUtil.createCommandAcceptedResponse("build started")));
  Throwable error=null;
  try {
    final int size=myModules.size();
    final Map<String,String> pathVars=new HashMap<String,String>();
    pathVars.put("MAVEN_REPOSITORY","C:/Users/jeka/.m2/repository");
    final ProjectWrapper proj=ProjectWrapper.load(new GantBinding(),myProjectPath,getStartupScript(),pathVars,myCompileType == JpsRemoteProto.Message.Request.CompilationRequest.Type.MAKE);
    proj.getProject().getBuilder().setBuildInfoPrinter(new BuildInfoPrinter(){
      public Object printProgressMessage(      Project project,      String message){
        Channels.write(myChannelContext.getChannel(),ProtoUtil.toMessage(mySessionId,ProtoUtil.createCompileProgressMessageResponse(message)));
        return null;
      }
      public Object printCompilationErrors(      Project project,      String compilerName,      String messages){
        Channels.write(myChannelContext.getChannel(),ProtoUtil.toMessage(mySessionId,ProtoUtil.createCompileErrorMessageResponse(messages,null,-1,-1)));
        return null;
      }
    }
);
switch (myCompileType) {
case REBUILD:
      proj.rebuild();
    break;
case MAKE:
  proj.makeModules(null,createMakeFlags());
break;
case CLEAN:
proj.clean();
break;
}
proj.save();
}
 catch (Throwable e) {
error=e;
}
 finally {
final JpsRemoteProto.Message lastMessage=error != null ? ProtoUtil.toMessage(mySessionId,ProtoUtil.createFailure("build failed: ",error)) : ProtoUtil.toMessage(mySessionId,ProtoUtil.createBuildCompletedResponse("build completed"));
Channels.write(myChannelContext.getChannel(),lastMessage).addListener(new ChannelFutureListener(){
public void operationComplete(ChannelFuture future) throws Exception {
myBuildsInProgress.remove(myProjectPath);
}
}
);
}
}
