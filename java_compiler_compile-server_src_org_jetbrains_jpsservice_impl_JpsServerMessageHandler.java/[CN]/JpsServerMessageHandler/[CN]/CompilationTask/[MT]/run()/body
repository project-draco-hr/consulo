{
  Channels.write(myChannelContext.getChannel(),ProtoUtil.toMessage(mySessionId,ProtoUtil.createCommandAcceptedResponse("build started")));
  Throwable error=null;
  try {
    final BuildType buildType=convertCompileType(myCompileType);
    if (buildType == null) {
      throw new Exception("Unsupported build type: " + myCompileType);
    }
    final Map<String,String> pathVars=new HashMap<String,String>();
    pathVars.put("MAVEN_REPOSITORY","C:/Users/jeka/.m2/repository");
    final BuildParameters params=new BuildParameters();
    params.buildType=buildType;
    params.pathVariables=pathVars;
    params.useInProcessJavac=true;
    Facade.getInstance().startBuild(myProjectPath,myModules,params,new MessagesConsumer(){
      public void consumeProgressMessage(      String message){
        Channels.write(myChannelContext.getChannel(),ProtoUtil.toMessage(mySessionId,ProtoUtil.createCompileProgressMessageResponse(message)));
      }
      public void consumeCompilerMessage(      String compilerName,      String message){
        Channels.write(myChannelContext.getChannel(),ProtoUtil.toMessage(mySessionId,ProtoUtil.createCompileErrorMessageResponse(message,null,-1,-1)));
      }
    }
);
  }
 catch (  Throwable e) {
    error=e;
  }
 finally {
    final JpsRemoteProto.Message lastMessage=error != null ? ProtoUtil.toMessage(mySessionId,ProtoUtil.createFailure("build failed: ",error)) : ProtoUtil.toMessage(mySessionId,ProtoUtil.createBuildCompletedResponse("build completed"));
    Channels.write(myChannelContext.getChannel(),lastMessage).addListener(new ChannelFutureListener(){
      public void operationComplete(      ChannelFuture future) throws Exception {
        myBuildsInProgress.remove(myProjectPath);
      }
    }
);
  }
}
