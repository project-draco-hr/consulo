{
  try {
    return new RefsDefs(body){
      protected int nNext(      int index){
        return instructions.get(index).nNext();
      }
      protected int getNext(      int index,      int no){
        return instructions.get(index).getNext(index,no);
      }
      protected boolean defs(){
        return false;
      }
      protected void processInstruction(      final Set<PsiElement> res,      final Instruction instruction,      int index){
        if (instruction instanceof ReadVariableInstruction) {
          ReadVariableInstruction instructionR=(ReadVariableInstruction)instruction;
          if (instructionR.variable == def) {
            final PsiElement element=flow.getElement(index);
            element.accept(new JavaRecursiveElementVisitor(){
              @Override public void visitReferenceExpression(              PsiReferenceExpression ref){
                if (ref.resolve() == def) {
                  res.add(ref);
                }
              }
            }
);
          }
        }
      }
    }
.get(def,ref);
  }
 catch (  AnalysisCanceledException e) {
    return PsiElement.EMPTY_ARRAY;
  }
}
