{
  HashSet<PsiField> reported=new HashSet<PsiField>();
  HashSet<PsiField> accessedForWriting=new HashSet<PsiField>();
  boolean needClassParameter=false;
  for (  InternalUsageInfo usage : internalUsages) {
    final PsiElement referencedElement=usage.getReferencedElement();
    if (usage.isWriting()) {
      accessedForWriting.add((PsiField)referencedElement);
      needClassParameter=true;
    }
 else     if (referencedElement instanceof PsiField) {
      PsiField field=(PsiField)referencedElement;
      reported.add(field);
    }
 else {
      needClassParameter=true;
    }
  }
  final ArrayList<PsiField> psiFields=new ArrayList<PsiField>(reported);
  Collections.sort(psiFields,new Comparator<PsiField>(){
    public int compare(    PsiField psiField,    PsiField psiField1){
      return psiField.getName().compareTo(psiField1.getName());
    }
  }
);
  for (  final PsiField field : psiFields) {
    if (accessedForWriting.contains(field))     continue;
    ParameterTablePanel.VariableData data=new ParameterTablePanel.VariableData(field);
    CodeStyleManager codeStyleManager=CodeStyleManager.getInstance(member.getProject());
    String name=field.getName();
    name=codeStyleManager.variableNameToPropertyName(name,VariableKind.FIELD);
    name=codeStyleManager.propertyNameToVariableName(name,VariableKind.PARAMETER);
    name=RefactoringUtil.suggestUniqueVariableName(name,member,field);
    data.name=name;
    data.passAsParameter=true;
    variableDatum.add(data);
  }
  return needClassParameter;
}
