{
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    @Override public void run(){
      if (project.isDisposed())       return;
      final String name=ref.getName();
      final Set<PsiType> types=GroovyExpectedTypesProvider.getDefaultExpectedTypes(ref);
      final PsiType type;
      if (types.isEmpty()) {
        type=PsiType.getJavaLangObject(PsiManager.getInstance(project),ref.getResolveScope());
      }
 else {
        type=TypesUtil.unboxPrimitiveTypeWrapper(types.iterator().next());
      }
      if (method instanceof GrMethod) {
        new GrChangeSignatureDialog(project,(GrMethod)method){
          @Override protected GrParameterTableModel createParameterTableModel(){
            GrParameterTableModel model=super.createParameterTableModel();
            model.addRow(new GrTableParameterInfo(project,ref,name,type.getPresentableText(),GroovyToJavaGenerator.getDefaultValueText(type.getCanonicalText()),""));
            if (method.isVarArgs()) {
              model.exchangeRows(model.getRowCount() - 1,model.getRowCount() - 2);
            }
            return model;
          }
        }
.show();
      }
 else       if (method != null) {
        JavaChangeSignatureDialog dialog=new JavaChangeSignatureDialog(project,method,false,ref);
        final List<ParameterInfoImpl> parameterInfos=new ArrayList<ParameterInfoImpl>(Arrays.asList(ParameterInfoImpl.fromMethod(method)));
        ParameterInfoImpl parameterInfo=new ParameterInfoImpl(-1,name,type,PsiTypesUtil.getDefaultValueOfType(type),false);
        if (!method.isVarArgs()) {
          parameterInfos.add(parameterInfo);
        }
 else {
          parameterInfos.add(parameterInfos.size() - 1,parameterInfo);
        }
        dialog.setParameterInfos(parameterInfos);
        dialog.show();
      }
    }
  }
);
}
