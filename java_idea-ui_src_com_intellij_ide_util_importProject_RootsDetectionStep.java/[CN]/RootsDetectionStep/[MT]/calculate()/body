{
  final String baseProjectPath=getBaseProjectPath();
  if (baseProjectPath == null) {
    return Collections.emptyList();
  }
  final File baseProjectFile=new File(baseProjectPath);
  Map<ProjectStructureDetector,List<DetectedProjectRoot>> roots=new RootDetectionProcessor(baseProjectFile).findRoots();
  final ProgressIndicator progressIndicator=ProgressManager.getInstance().getProgressIndicator();
  if (progressIndicator != null) {
    progressIndicator.setText2("Processing " + roots.values().size() + " project roots...");
  }
  Map<File,DetectedRootData> rootData=new LinkedHashMap<File,DetectedRootData>();
  for (  ProjectStructureDetector detector : roots.keySet()) {
    for (    DetectedProjectRoot detectedRoot : roots.get(detector)) {
      if (isUnderIncompatibleRoot(detectedRoot,rootData)) {
        continue;
      }
      final DetectedRootData data=rootData.get(detectedRoot.getDirectory());
      if (data == null) {
        rootData.put(detectedRoot.getDirectory(),new DetectedRootData(detector,detectedRoot));
      }
 else {
        detectedRoot=data.addRoot(detector,detectedRoot);
      }
      removeIncompatibleRoots(detectedRoot,rootData);
    }
  }
  if (progressIndicator != null) {
    progressIndicator.setText2("");
  }
  return new ArrayList<DetectedRootData>(rootData.values());
}
