{
  final String contentRootPath=getContentRootPath();
  if (contentRootPath == null) {
    return Collections.emptyList();
  }
  final File entryFile=new File(contentRootPath);
  if (!entryFile.exists()) {
    return Collections.emptyList();
  }
  final File[] children=entryFile.listFiles();
  if (children == null || children.length == 0) {
    return Collections.emptyList();
  }
  Map<File,DetectedRootData> rootData=new LinkedHashMap<File,DetectedRootData>();
  for (  ProjectStructureDetector detector : ProjectStructureDetector.EP_NAME.getExtensions()) {
    final List<DetectedProjectRoot> detectedRoots=detector.detectRoots(entryFile);
    for (    DetectedProjectRoot detectedRoot : detectedRoots) {
      if (isUnderIncompatibleRoot(detectedRoot,rootData)) {
        continue;
      }
      final DetectedRootData data=rootData.get(detectedRoot.getDirectory());
      if (data == null) {
        rootData.put(detectedRoot.getDirectory(),new DetectedRootData(detector,detectedRoot));
      }
 else {
        detectedRoot=data.addRoot(detector,detectedRoot);
      }
      removeIncompatibleRoots(detectedRoot,rootData);
    }
  }
  return new ArrayList<DetectedRootData>(rootData.values());
}
