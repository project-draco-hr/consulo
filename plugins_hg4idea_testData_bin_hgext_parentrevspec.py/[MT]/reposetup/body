def reposetup(ui, repo):
    if (not repo.local()):
        return


    class parentrevspecrepo(repo.__class__):

        def lookup(self, key):
            try:
                _super = super(parentrevspecrepo, self)
                return _super.lookup(key)
            except error.RepoError:
                pass
            circ = key.find('^')
            tilde = key.find('~')
            if ((circ < 0) and (tilde < 0)):
                raise
            elif ((circ >= 0) and (tilde >= 0)):
                end = min(circ, tilde)
            else:
                end = max(circ, tilde)
            cl = self.changelog
            base = key[:end]
            try:
                node = _super.lookup(base)
            except error.RepoError:
                return _super.lookup(key)
            rev = cl.rev(node)
            suffix = key[end:]
            i = 0
            while (i < len(suffix)):
                if (suffix[i] == '^'):
                    j = (i + 1)
                    p = cl.parentrevs(rev)
                    if ((j < len(suffix)) and suffix[j].isdigit()):
                        j += 1
                        n = int(suffix[(i + 1):j])
                        if ((n > 2) or ((n == 2) and (p[1] == (-1)))):
                            raise
                    else:
                        n = 1
                    if n:
                        rev = p[(n - 1)]
                    i = j
                elif (suffix[i] == '~'):
                    j = (i + 1)
                    while ((j < len(suffix)) and suffix[j].isdigit()):
                        j += 1
                    if (j == (i + 1)):
                        raise
                    n = int(suffix[(i + 1):j])
                    for k in xrange(n):
                        rev = cl.parentrevs(rev)[0]
                    i = j
                else:
                    raise
            return cl.node(rev)
    repo.__class__ = parentrevspecrepo
