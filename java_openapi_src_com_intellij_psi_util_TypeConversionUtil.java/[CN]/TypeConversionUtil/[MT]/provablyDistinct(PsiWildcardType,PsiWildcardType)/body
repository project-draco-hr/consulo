{
  if (type1.isSuper() && type2.isSuper())   return false;
  if (type1.isExtends() && type2.isExtends()) {
    final PsiType extendsBound1=type1.getExtendsBound();
    final PsiType extendsBound2=type2.getExtendsBound();
    if (extendsBound1.getArrayDimensions() != extendsBound2.getArrayDimensions())     return true;
    final PsiClass boundClass1=PsiUtil.resolveClassInType(extendsBound1);
    final PsiClass boundClass2=PsiUtil.resolveClassInType(extendsBound2);
    if (boundClass1 != null && boundClass2 != null) {
      if (boundClass1.isInterface() && boundClass2.isInterface())       return false;
      if (boundClass1.isInterface()) {
        return !(boundClass2.hasModifierProperty(PsiModifier.FINAL) ? boundClass2.isInheritor(boundClass1,true) : true);
      }
      if (boundClass2.isInterface()) {
        return !(boundClass1.hasModifierProperty(PsiModifier.FINAL) ? boundClass1.isInheritor(boundClass2,true) : true);
      }
      if (boundClass1 instanceof PsiTypeParameter) {
        return try2ProveTypeParameterDistinct(type2,boundClass1);
      }
      if (boundClass2 instanceof PsiTypeParameter) {
        return try2ProveTypeParameterDistinct(type1,boundClass2);
      }
      return !boundClass1.isInheritor(boundClass2,true) && !boundClass2.isInheritor(boundClass1,true);
    }
    return provablyDistinct(extendsBound1,extendsBound2);
  }
  if (type2.isExtends())   return provablyDistinct(type2,type1);
  if (type1.isExtends() && type2.isSuper()) {
    final PsiType extendsBound=type1.getExtendsBound();
    final PsiType superBound=type2.getSuperBound();
    if (extendsBound.getArrayDimensions() != superBound.getArrayDimensions())     return true;
    final PsiClass extendsBoundClass=PsiUtil.resolveClassInType(extendsBound);
    final PsiClass superBoundClass=PsiUtil.resolveClassInType(superBound);
    if (extendsBoundClass != null && superBoundClass != null) {
      if (extendsBoundClass instanceof PsiTypeParameter) {
        return try2ProveTypeParameterDistinct(type2,extendsBoundClass);
      }
      if (superBoundClass instanceof PsiTypeParameter)       return false;
      return !superBoundClass.isInheritor(extendsBoundClass,true);
    }
    return true;
  }
  return !type1.equals(type2);
}
