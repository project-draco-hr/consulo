{
  try {
    if (myCreateInnerClass) {
      final PsiClass innerClass=(PsiClass)myMethod.getContainingClass().add(myElementFactory.createClass(myInnerClassName));
      final boolean isStatic=copyMethodModifiers(innerClass);
      final @NonNls String staticqualifier=getStaticQualifier(isStatic);
      for (      UsageInfo usage : usages) {
        final PsiMethodCallExpression methodCallExpression=PsiTreeUtil.getParentOfType(usage.getElement(),PsiMethodCallExpression.class);
        if (methodCallExpression != null) {
          replaceMethodCallExpression(staticqualifier,inferTypeArguments(methodCallExpression),methodCallExpression);
        }
      }
      final PsiParameter[] parameters=myMethod.getParameterList().getParameters();
      if (parameters.length > 0) {
        createInnerClassConstructor(innerClass,parameters);
      }
 else       if (isStatic) {
        final PsiMethod copy=(PsiMethod)myMethod.copy();
        copy.setName("invoke");
        innerClass.add(copy);
        processMethodDeclaration(staticqualifier);
        return;
      }
      copyMethodWithoutParameters(innerClass);
      copyMethodTypeParameters(innerClass);
      processMethodDeclaration(staticqualifier);
    }
 else {
      for (      UsageInfo usage : usages) {
        final PsiMethodCallExpression methodCallExpression=PsiTreeUtil.getParentOfType(usage.getElement(),PsiMethodCallExpression.class);
        if (methodCallExpression != null) {
          methodCallExpression.getMethodExpression().replace(myElementFactory.createExpressionFromText("invoke",null));
        }
      }
      final String paramsDeclaration=myMethod.getParameterList().getText();
      final PsiType returnType=myMethod.getReturnType();
      LOG.assertTrue(returnType != null);
      final PsiCodeBlock methodBody=myMethod.getBody();
      LOG.assertTrue(methodBody != null);
      replaceMethodBody(myElementFactory.createExpressionFromText("new Object(){ \n" + "private " + returnType.getPresentableText() + " invoke"+ paramsDeclaration+ methodBody.getText()+ "}.invoke("+ getParametersList()+ ")",null));
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
