{
  try {
    final PsiClass innerClass=(PsiClass)myMethod.getContainingClass().add(myElementFactory.createClass(myInnerClassName));
    final boolean isStatic=copyMethodModifiers(innerClass);
    final @NonNls String staticqualifier=getStaticQualifier(isStatic);
    for (    UsageInfo usage : usages) {
      final PsiMethodCallExpression methodCallExpression=PsiTreeUtil.getParentOfType(usage.getElement(),PsiMethodCallExpression.class);
      if (methodCallExpression != null) {
        replaceMethodCallExpression(staticqualifier,inferTypeArguments(methodCallExpression),methodCallExpression);
      }
    }
    final PsiParameter[] parameters=myMethod.getParameterList().getParameters();
    if (parameters.length > 0) {
      createInnerClassConstructor(innerClass,parameters);
    }
 else     if (isStatic) {
      final PsiMethod copy=(PsiMethod)myMethod.copy();
      copy.setName("invoke");
      innerClass.add(copy);
      processMethodDeclaration(staticqualifier);
      return;
    }
    copyMethodWithoutParameters(innerClass);
    copyMethodTypeParameters(innerClass);
    processMethodDeclaration(staticqualifier);
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
