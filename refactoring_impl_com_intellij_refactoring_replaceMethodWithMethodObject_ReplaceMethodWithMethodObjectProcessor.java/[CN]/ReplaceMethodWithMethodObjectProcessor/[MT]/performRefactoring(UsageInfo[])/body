{
  try {
    final PsiClass innerClass=createInnerClass();
    final PsiModifierList classModifierList=innerClass.getModifierList();
    LOG.assertTrue(classModifierList != null);
    final boolean isStatic=classModifierList.hasModifierProperty(PsiModifier.STATIC);
    @NonNls String staticqualifier=null;
    if (isStatic) {
      final int packageNameLength=((PsiClassOwner)innerClass.getContainingFile()).getPackageName().length();
      final String innerClassName=innerClass.getQualifiedName();
      LOG.assertTrue(innerClassName != null);
      staticqualifier=packageNameLength > 0 ? innerClassName.substring(packageNameLength + 1) : innerClassName;
    }
    for (    UsageInfo usage : usages) {
      final PsiMethodCallExpression methodCallExpression=PsiTreeUtil.getParentOfType(usage.getElement(),PsiMethodCallExpression.class);
      if (methodCallExpression != null) {
        replaceMethodCallExpression(innerClass,isStatic,staticqualifier,methodCallExpression);
      }
    }
    processMethodDeclaration(innerClass);
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
