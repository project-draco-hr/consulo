{
  if (myDeleteOriginalMethod) {
    myMethod.delete();
  }
 else {
    final PsiCodeBlock body=myMethod.getBody();
    LOG.assertTrue(body != null);
    final PsiCodeBlock block=myElementFactory.createCodeBlock();
    final String parametersList=StringUtil.join(Arrays.asList(myMethod.getParameterList().getParameters()),new Function<PsiParameter,String>(){
      public String fun(      final PsiParameter psiParameter){
        final String parameterName=psiParameter.getName();
        LOG.assertTrue(parameterName != null);
        return parameterName;
      }
    }
,", ");
    PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)myElementFactory.createExpressionFromText("invoke(" + parametersList + ")",null);
    final String typeArguments=myMethod.getTypeParameters().length > 0 ? "<" + StringUtil.join(Arrays.asList(myMethod.getTypeParameters()),new Function<PsiTypeParameter,String>(){
      public String fun(      final PsiTypeParameter typeParameter){
        final String typeParameterName=typeParameter.getName();
        LOG.assertTrue(typeParameterName != null);
        return typeParameterName;
      }
    }
,", ") + ">" : "";
    methodCallExpression=replaceMethodCallExpression(staticqualifier,typeArguments,methodCallExpression);
    final PsiStatement innerClassMethodCallStatement=myElementFactory.createStatementFromText((myMethod.getReturnType() == PsiType.VOID ? "" : "return ") + methodCallExpression.getText() + ";",null);
    block.add(innerClassMethodCallStatement);
    body.replace(block);
  }
}
