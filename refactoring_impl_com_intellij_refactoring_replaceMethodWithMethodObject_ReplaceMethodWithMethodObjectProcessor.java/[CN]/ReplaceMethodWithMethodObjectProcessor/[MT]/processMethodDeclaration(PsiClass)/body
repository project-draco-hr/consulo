{
  if (myDeleteOriginalMethod) {
    myMethod.delete();
  }
 else {
    final PsiCodeBlock body=myMethod.getBody();
    LOG.assertTrue(body != null);
    final PsiCodeBlock block=myElementFactory.createCodeBlock();
    final String parametersList=StringUtil.join(Arrays.asList(myMethod.getParameterList().getParameters()),new Function<PsiParameter,String>(){
      public String fun(      final PsiParameter psiParameter){
        final String parameterName=psiParameter.getName();
        LOG.assertTrue(parameterName != null);
        return parameterName;
      }
    }
,", ");
    @NonNls String statementText="";
    if (myMethod.getReturnType() != PsiType.VOID) {
      statementText="return ";
    }
    statementText+="new " + innerClass.getName() + "("+ parametersList+ ")."+ myMethod.getName()+ "();";
    final PsiStatement innerClassMethodCallStatement=myElementFactory.createStatementFromText(statementText,null);
    block.add(innerClassMethodCallStatement);
    body.replace(block);
  }
}
