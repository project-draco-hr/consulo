{
  myApplication=application;
  myStateStorageManager=new StateStorageManagerImpl(pathMacroManager.createTrackingSubstitutor(),ROOT_ELEMENT_NAME,application,application.getPicoContainer()){
    private boolean myConfigDirectoryRefreshed;
    @Override protected StorageData createStorageData(    @NotNull String storageSpec){
      return new FileBasedStorage.FileStorageData(ROOT_ELEMENT_NAME);
    }
    @Nullable @Override protected String getOldStorageSpec(    @NotNull Object component,    @NotNull String componentName,    @NotNull StateStorageOperation operation){
      if (component instanceof NamedJDOMExternalizable) {
        return StoragePathMacros.APP_CONFIG + "/" + ((NamedJDOMExternalizable)component).getExternalFileName()+ XML_EXTENSION;
      }
 else {
        return DEFAULT_STORAGE_SPEC;
      }
    }
    @Override protected String getVersionsFilePath(){
      return getConfigPath() + "/options/appComponentVersions.xml";
    }
    @Override protected TrackingPathMacroSubstitutor getMacroSubstitutor(    @NotNull final String fileSpec){
      if (fileSpec.equals(StoragePathMacros.APP_CONFIG + "/" + PathMacrosImpl.EXT_FILE_NAME+ XML_EXTENSION))       return null;
      return super.getMacroSubstitutor(fileSpec);
    }
    @Override protected boolean isUseXmlProlog(){
      return false;
    }
    @Override protected void beforeFileBasedStorageCreate(){
      if (!myConfigDirectoryRefreshed && (application.isUnitTestMode() || application.isDispatchThread())) {
        try {
          VirtualFile configDir=LocalFileSystem.getInstance().refreshAndFindFileByPath(getConfigPath());
          if (configDir != null) {
            VfsUtilCore.visitChildrenRecursively(configDir,new VirtualFileVisitor(){
              @Override public boolean visitFile(              @NotNull VirtualFile file){
                return !"componentVersions".equals(file.getName());
              }
            }
);
            VfsUtil.markDirtyAndRefresh(false,true,false,configDir);
          }
        }
  finally {
          myConfigDirectoryRefreshed=true;
        }
      }
    }
  }
;
  myDefaultsStateStorage=new DefaultsStateStorage(null);
}
