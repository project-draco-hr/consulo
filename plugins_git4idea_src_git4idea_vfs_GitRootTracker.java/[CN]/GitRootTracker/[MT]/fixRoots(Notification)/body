{
  ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
    @Override public void run(){
      final List<VcsDirectoryMapping> vcsDirectoryMappings=new ArrayList<VcsDirectoryMapping>(myVcsManager.getDirectoryMappings());
      final HashSet<String> mapped=new HashSet<String>();
      final HashSet<String> removed=new HashSet<String>();
      final HashSet<String> added=new HashSet<String>();
      collectRoots(vcsDirectoryMappings,mapped,removed,added);
      final VirtualFile baseDir=myProject.getBaseDir();
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        @Override public void run(){
          if (added.isEmpty() && removed.isEmpty()) {
            Messages.showInfoMessage(myProject,GitBundle.message("fix.roots.valid.message"),GitBundle.message("fix.roots.valid.title"));
            notification.expire();
            return;
          }
          GitFixRootsDialog d=new GitFixRootsDialog(myProject,mapped,added,removed);
          d.show();
          if (!d.isOK()) {
            return;
          }
          for (Iterator<VcsDirectoryMapping> i=vcsDirectoryMappings.iterator(); i.hasNext(); ) {
            VcsDirectoryMapping m=i.next();
            String path=m.getDirectory();
            if (removed.contains(path) || (path.length() == 0 && baseDir != null && removed.contains(baseDir.getPath()))) {
              i.remove();
            }
          }
          for (          String a : added) {
            vcsDirectoryMappings.add(new VcsDirectoryMapping(a,myVcs.getName()));
          }
          myVcsManager.setDirectoryMappings(vcsDirectoryMappings);
          myVcsManager.updateActiveVcss();
          notification.expire();
        }
      }
);
    }
  }
);
}
