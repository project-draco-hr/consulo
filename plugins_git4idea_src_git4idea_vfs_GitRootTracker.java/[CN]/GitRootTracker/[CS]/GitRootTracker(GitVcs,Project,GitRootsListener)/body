{
  myMulticaster=multicaster;
  if (project.isDefault()) {
    throw new IllegalArgumentException("The project must not be default");
  }
  myProject=project;
  myProjectRoots=ProjectRootManager.getInstance(myProject);
  myVcs=vcs;
  myVcsManager=ProjectLevelVcsManager.getInstance(project);
  myVcsManager.addVcsListener(this);
  myLocalFileSystem=LocalFileSystem.getInstance();
  myMessageBusConnection=myProject.getMessageBus().connect();
  myMessageBusConnection.subscribe(ProjectTopics.PROJECT_ROOTS,new ModuleRootListener(){
    public void beforeRootsChange(    ModuleRootEvent event){
    }
    public void rootsChanged(    ModuleRootEvent event){
      invalidate();
    }
  }
);
  myCommandListener=new CommandAdapter(){
    @Override public void commandFinished(    CommandEvent event){
      if (!myRootsInvalidated.compareAndSet(true,false)) {
        return;
      }
      checkRoots(false);
    }
  }
;
  CommandProcessor.getInstance().addCommandListener(myCommandListener);
  myFileListener=new MyFileListener();
  VirtualFileManagerEx fileManager=(VirtualFileManagerEx)VirtualFileManager.getInstance();
  fileManager.addVirtualFileListener(myFileListener);
  myVirtualFileManagerListener=new VirtualFileManagerAdapter(){
    @Override public void afterRefreshFinish(    boolean asynchonous){
      if (!myRootsInvalidated.compareAndSet(true,false)) {
        return;
      }
      checkRoots(false);
    }
  }
;
  fileManager.addVirtualFileManagerListener(myVirtualFileManagerListener);
  StartupManager.getInstance(myProject).runWhenProjectIsInitialized(new Runnable(){
    public void run(){
      myIsEnabled.set(true);
      checkRoots(true);
    }
  }
);
}
