{
  if (project.isDefault()) {
    throw new IllegalArgumentException("The project must not be default");
  }
  myProject=project;
  myVcs=vcs;
  myVcsManager=ProjectLevelVcsManager.getInstance(project);
  myVcsManager.addVcsListener(this);
  myLocalFileSystem=LocalFileSystem.getInstance();
  myCommandListener=new CommandAdapter(){
    @Override public void commandFinished(    CommandEvent event){
      if (!myRootsInvalidated.compareAndSet(true,false)) {
        return;
      }
      directoryMappingChanged();
    }
  }
;
  CommandProcessor.getInstance().addCommandListener(myCommandListener);
  myFileListener=new MyFileListener();
  VirtualFileManagerEx fileManager=(VirtualFileManagerEx)VirtualFileManager.getInstance();
  fileManager.addVirtualFileListener(myFileListener);
  myVirtualFileManagerListener=new VirtualFileManagerAdapter(){
    @Override public void afterRefreshFinish(    boolean asynchonous){
      if (!myRootsInvalidated.compareAndSet(true,false)) {
        return;
      }
      directoryMappingChanged();
    }
  }
;
  fileManager.addVirtualFileManagerListener(myVirtualFileManagerListener);
  directoryMappingChanged();
}
