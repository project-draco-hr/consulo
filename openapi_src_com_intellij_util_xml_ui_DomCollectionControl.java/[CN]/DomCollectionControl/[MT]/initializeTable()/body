{
  JTable table=myCollectionPanel.getTable();
  myCollectionPanel.setTableModel(new AbstractTableModel(){
    public int getRowCount(){
      return myData.size();
    }
    public int getColumnCount(){
      return myColumnInfos.length;
    }
    public boolean isCellEditable(    int rowIndex,    int columnIndex){
      return myColumnInfos[columnIndex].isCellEditable(myData.get(rowIndex));
    }
    public String getColumnName(    int column){
      return myColumnInfos[column].getName();
    }
    public Class getColumnClass(    int columnIndex){
      return myColumnInfos[columnIndex].getColumnClass();
    }
    public void setValueAt(    final Object aValue,    final int rowIndex,    final int columnIndex){
      final Object oldValue=getValueAt(rowIndex,columnIndex);
      if (!Comparing.equal(oldValue,aValue)) {
        performWriteCommandAction(new WriteCommandAction(getProject()){
          protected void run(          final Result result) throws Throwable {
            ((ColumnInfo<T,Object>)myColumnInfos[columnIndex]).setValue(myData.get(rowIndex),aValue);
          }
        }
);
      }
    }
    public Object getValueAt(    int rowIndex,    int columnIndex){
      return myColumnInfos[columnIndex].valueOf(myData.get(rowIndex));
    }
  }
);
  for (int i=0; i < myColumnInfos.length; i++) {
    ColumnInfo<T,?> columnInfo=myColumnInfos[i];
    final TableColumn column=table.getColumnModel().getColumn(i);
    final TableCellRenderer cellRenderer=columnInfo.getRenderer(null);
    if (cellRenderer != null) {
      column.setCellRenderer(cellRenderer);
      int width=-1;
      for (int j=0; j < myData.size(); j++) {
        T t=myData.get(j);
        final Component component=cellRenderer.getTableCellRendererComponent(table,columnInfo.valueOf(t),false,false,j,i);
        final int prefWidth=component.getPreferredSize().width;
        if (prefWidth > width) {
          width=prefWidth;
        }
      }
      if (width > 0) {
        column.setPreferredWidth(width);
      }
    }
    final TableCellEditor cellEditor=columnInfo.getEditor(null);
    if (cellEditor != null) {
      column.setCellEditor(cellEditor);
    }
  }
  reset();
}
