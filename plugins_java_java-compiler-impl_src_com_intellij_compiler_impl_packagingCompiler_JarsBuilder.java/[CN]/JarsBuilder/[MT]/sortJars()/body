{
  final DFSTBuilder<JarInfo> builder=new DFSTBuilder<JarInfo>(GraphGenerator.create(CachingSemiGraph.create(new JarsGraph())));
  if (!builder.isAcyclic()) {
    final Pair<JarInfo,JarInfo> dependency=builder.getCircularDependency();
    String message=CompilerBundle.message("packaging.compiler.error.cannot.build.circular.dependency.found.between.0.and.1",dependency.getFirst().getPresentableDestination(),dependency.getSecond().getPresentableDestination());
    myContext.addMessage(CompilerMessageCategory.ERROR,message,null,-1,-1);
    return null;
  }
  JarInfo[] jars=myJarsToBuild.toArray(new JarInfo[myJarsToBuild.size()]);
  Arrays.sort(jars,builder.comparator());
  jars=ArrayUtil.reverseArray(jars);
  return jars;
}
