{
  final PsiElement refElement=queryParameters.getElementToSearch();
  if (!(refElement instanceof PsiMethod))   return true;
  final PsiMethod method=(PsiMethod)refElement;
  final String propertyName=ApplicationManager.getApplication().runReadAction(new Computable<String>(){
    public String compute(){
      if (!method.isValid())       return null;
      return PropertyUtil.getPropertyName(method);
    }
  }
);
  if (StringUtil.isEmptyOrSpaces(propertyName)) {
    return true;
  }
  SearchScope searchScope=ApplicationManager.getApplication().runReadAction(new Computable<SearchScope>(){
    public SearchScope compute(){
      SearchScope searchScope=queryParameters.getEffectiveSearchScope();
      if (searchScope instanceof GlobalSearchScope) {
        searchScope=GlobalSearchScope.getScopeRestrictedByFileTypes((GlobalSearchScope)searchScope,StdFileTypes.JSP,StdFileTypes.JSPX,StdFileTypes.XML,StdFileTypes.XHTML);
      }
      return searchScope;
    }
  }
);
  final PsiSearchHelper helper=PsiManager.getInstance(refElement.getProject()).getSearchHelper();
  final TextOccurenceProcessor processor=new TextOccurenceProcessor(){
    public boolean execute(    PsiElement element,    int offsetInElement){
      final PsiReference[] refs=element.getReferences();
      for (      PsiReference ref : refs) {
        if (ReferenceRange.containsOffsetInElement(ref,offsetInElement)) {
          if (ref.isReferenceTo(refElement)) {
            return consumer.process(ref);
          }
        }
      }
      return true;
    }
  }
;
  return helper.processElementsWithWord(processor,searchScope,propertyName,UsageSearchContext.IN_FOREIGN_LANGUAGES,false);
}
