{
  if (getAttribute() != null) {
    return EMPTY_ARRAY;
  }
  final AntStructuredElement parent=(AntStructuredElement)getElement().getAntParent();
  if (parent == null) {
    return EMPTY_ARRAY;
  }
  AntTypeDefinition def=parent.getTypeDefinition();
  if (def == null) {
    def=parent.getAntProject().getTypeDefinition();
    if (def == null) {
      return EMPTY_ARRAY;
    }
  }
  final AntFile antFile=parent.getAntFile();
  final Project project=antFile.getProject();
  final Set<PsiElement> ids=PsiElementSetSpinAllocator.alloc();
  try {
    for (    final AntTypeId id : def.getNestedElements()) {
      ids.add(new AntElementCompletionWrapper(parent,id.getName() + " ",project,AntElementRole.TASK_ROLE));
    }
    if (def.isAllTaskContainer()) {
      new Object(){
        final Set<AntFile> processedFiles=new HashSet<AntFile>();
        final Set<AntTypeId> processedTypes=new HashSet<AntTypeId>();
        void walkFiles(        AntFile file){
          if (processedFiles.contains(file)) {
            return;
          }
          processedFiles.add(file);
          for (          final AntTypeDefinition _def : file.getBaseTypeDefinitions()) {
            if (_def.isTask()) {
              final AntTypeId typeId=_def.getTypeId();
              if (!processedTypes.contains(typeId)) {
                processedTypes.add(typeId);
                ids.add(new AntElementCompletionWrapper(parent,typeId.getName() + " ",project,AntElementRole.TASK_ROLE));
              }
            }
          }
          for (          AntFile imported : file.getAntProject().getImportedFiles()) {
            walkFiles(imported);
          }
        }
      }
.walkFiles(antFile);
    }
    return ids.toArray(new Object[ids.size()]);
  }
  finally {
    PsiElementSetSpinAllocator.dispose(ids);
  }
}
