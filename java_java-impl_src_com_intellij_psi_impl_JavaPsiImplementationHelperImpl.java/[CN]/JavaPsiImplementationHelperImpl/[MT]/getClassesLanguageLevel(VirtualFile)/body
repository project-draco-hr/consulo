{
  final ProjectFileIndex index=ProjectRootManager.getInstance(myProject).getFileIndex();
  final VirtualFile sourceRoot=index.getSourceRootForFile(virtualFile);
  final VirtualFile folder=virtualFile.getParent();
  if (sourceRoot != null && folder != null) {
    String relativePath=VfsUtilCore.getRelativePath(folder,sourceRoot,'/');
    LOG.assertTrue(relativePath != null);
    List<OrderEntry> orderEntries=index.getOrderEntriesForFile(virtualFile);
    if (orderEntries.isEmpty()) {
      LOG.error("Inconsistent: " + DirectoryIndex.getInstance(myProject).getInfoForDirectory(folder).toString());
    }
    final VirtualFile[] files=orderEntries.get(0).getFiles(OrderRootType.CLASSES);
    for (    VirtualFile rootFile : files) {
      final VirtualFile classFile=rootFile.findFileByRelativePath(relativePath);
      if (classFile != null) {
        final PsiJavaFile javaFile=getPsiFileInRoot(classFile);
        if (javaFile != null) {
          return javaFile.getLanguageLevel();
        }
      }
    }
    return LanguageLevelProjectExtension.getInstance(myProject).getLanguageLevel();
  }
  return null;
}
