{
  super.visitMethodCallExpression(expression);
  final PsiExpressionList argumentList=expression.getArgumentList();
  if (argumentList == null) {
    return;
  }
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length == 0) {
    return;
  }
  final PsiExpression argument=arguments[0];
  if (!TypeUtils.expressionHasType(argument,"java.lang.String")) {
    return;
  }
  if (!PsiUtil.isConstantExpression(argument)) {
    return;
  }
  final PsiType regexType=argument.getType();
  final String value=(String)ConstantExpressionUtil.computeCastTo(argument,regexType);
  if (value == null) {
    return;
  }
  if (!MethodCallUtils.isCallToRegexMethod(expression)) {
    return;
  }
  try {
    Pattern.compile(value);
  }
 catch (  PatternSyntaxException e) {
    registerError(argument,e.getDescription());
  }
catch (  NullPointerException e) {
    registerError(argument);
  }
}
