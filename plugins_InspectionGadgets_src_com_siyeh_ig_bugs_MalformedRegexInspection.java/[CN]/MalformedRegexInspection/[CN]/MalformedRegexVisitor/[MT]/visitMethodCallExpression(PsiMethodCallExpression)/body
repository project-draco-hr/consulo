{
  super.visitMethodCallExpression(expression);
  if (!callTakesRegex(expression)) {
    return;
  }
  final PsiExpressionList argList=expression.getArgumentList();
  final PsiExpression[] args=argList.getExpressions();
  final PsiExpression regexArg=args[0];
  if (regexArg == null) {
    return;
  }
  final PsiType regexType=regexArg.getType();
  if (regexType == null) {
    return;
  }
  final String regexTypeText=regexType.getCanonicalText();
  if (!"java.lang.String".equals(regexTypeText)) {
    return;
  }
  if (!PsiUtil.isConstantExpression(regexArg)) {
    return;
  }
  final String value=(String)ConstantExpressionUtil.computeCastTo(regexArg,regexType);
  try {
    Pattern.compile(value);
  }
 catch (  PatternSyntaxException e) {
    registerError(regexArg);
  }
}
