{
  myClassChooser.getTextField().getDocument().addDocumentListener(new DocumentAdapter(){
    public void textChanged(    DocumentEvent event){
      updateUI();
    }
  }
);
  myClassChooser.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      PsiClass currentClass=getSelectedClass();
      TreeClassChooser chooser=TreeClassChooserFactory.getInstance(myProject).createAllProjectScopeChooser(DebuggerBundle.message("add.field.breakpoint.dialog.classchooser.title"));
      if (currentClass != null) {
        PsiFile containingFile=currentClass.getContainingFile();
        if (containingFile != null) {
          PsiDirectory containingDirectory=containingFile.getContainingDirectory();
          if (containingDirectory != null) {
            chooser.selectDirectory(containingDirectory);
          }
        }
      }
      chooser.showDialog();
      PsiClass selectedClass=chooser.getSelectedClass();
      if (selectedClass != null) {
        myClassChooser.setText(selectedClass.getQualifiedName());
      }
    }
  }
);
  myFieldChooser.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      PsiClass selectedClass=getSelectedClass();
      if (selectedClass != null) {
        PsiField[] fields=selectedClass.getFields();
        MemberChooser chooser=new MemberChooser(fields,false,false,myProject);
        chooser.setTitle(DebuggerBundle.message("add.field.breakpoint.dialog.field.chooser.title",fields.length));
        chooser.setCopyJavadocVisible(false);
        chooser.show();
        Object[] selectedElements=chooser.getSelectedElements();
        if (selectedElements != null && selectedElements.length == 1) {
          PsiField field=(PsiField)selectedElements[0];
          myFieldChooser.setText(field.getName());
        }
      }
    }
  }
);
  myFieldChooser.setEnabled(false);
  return myPanel;
}
