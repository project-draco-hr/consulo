{
  final List<VirtualFile> dirs=new ArrayList<VirtualFile>();
  String relatPath=packageName.replace(".","/");
  for (  Module moduleIter : myModuleManager.getModules()) {
    final ModuleRootManager moduleRootManager=ModuleRootManager.getInstance(moduleIter);
    for (    ContentEntry contentEntry : moduleRootManager.getContentEntries()) {
      VirtualFile file=contentEntry.getFile();
      if (file == null) {
        continue;
      }
      VirtualFile fileByRelativePath=file.findFileByRelativePath(relatPath);
      if (fileByRelativePath != null) {
        dirs.add(file);
      }
    }
  }
  if (includeLibrarySources) {
    VirtualFile[] libraryRoots=getLibraryRoots(ModuleManager.getInstance(myProject).getModules());
    for (    VirtualFile libraryRoot : libraryRoots) {
      VirtualFile virtualFileForJar=ArchiveVfsUtil.getJarRootForLocalFile(libraryRoot);
      if (virtualFileForJar == null) {
        continue;
      }
      VirtualFile child=virtualFileForJar.findFileByRelativePath(relatPath);
      if (child != null) {
        dirs.add(child);
      }
    }
  }
  LOGGER.warn("Result for " + packageName + " is "+ dirs.size());
  return new AbstractQuery<VirtualFile>(){
    @Override protected boolean processResults(    @NotNull Processor<VirtualFile> consumer){
      for (      VirtualFile dir : dirs) {
        if (!consumer.process(dir)) {
          return false;
        }
      }
      return true;
    }
  }
;
}
