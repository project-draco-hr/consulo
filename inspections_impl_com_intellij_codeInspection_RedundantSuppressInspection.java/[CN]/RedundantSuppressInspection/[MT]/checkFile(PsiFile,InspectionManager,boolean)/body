{
  final Map<PsiElement,Collection<String>> suppressedScopes=new THashMap<PsiElement,Collection<String>>();
  file.accept(new PsiRecursiveElementVisitor(){
    public void visitModifierList(    PsiModifierList list){
      super.visitModifierList(list);
      final PsiElement parent=list.getParent();
      if (parent instanceof PsiModifierListOwner) {
        checkElement(parent);
      }
    }
    public void visitComment(    PsiComment comment){
      checkElement(comment);
    }
    public void visitMethod(    PsiMethod method){
      super.visitMethod(method);
      checkElement(method);
    }
    public void visitClass(    PsiClass aClass){
      super.visitClass(aClass);
      checkElement(aClass);
    }
    public void visitField(    PsiField field){
      super.visitField(field);
      checkElement(field);
    }
    private void checkElement(    final PsiElement owner){
      String idsString=InspectionManagerEx.getSuppressedInspectionIdsIn(owner);
      if (idsString != null && idsString.length() != 0) {
        List<String> ids=StringUtil.split(idsString,",");
        Collection<String> suppressed=suppressedScopes.get(owner);
        if (suppressed == null) {
          suppressed=ids;
        }
 else {
          suppressed.addAll(ids);
        }
        suppressedScopes.put(owner,suppressed);
      }
    }
  }
);
  if (suppressedScopes.values().size() == 0)   return null;
  InspectionProfileImpl profile=InspectionProjectProfileManager.getInstance(manager.getProject()).getProfile((PsiElement)file);
  Collection<InspectionTool> suppressedTools=new THashSet<InspectionTool>();
  for (  Collection<String> ids : suppressedScopes.values()) {
    for (    String id : ids) {
      InspectionTool tool=profile.getInspectionTool(id.trim());
      if (tool != null) {
        suppressedTools.add(tool);
      }
    }
  }
  ((RefManagerImpl)((InspectionManagerEx)manager).getRefManager()).inspectionReadActionStarted();
  final List<ProblemDescriptor> result=new ArrayList<ProblemDescriptor>();
  for (  InspectionTool tool : suppressedTools) {
    tool.initialize((InspectionManagerEx)manager);
    tool.cleanup();
    String toolId=tool.getShortName();
    Collection<CommonProblemDescriptor> descriptors;
    if (tool instanceof LocalInspectionToolWrapper) {
      LocalInspectionToolWrapper local=(LocalInspectionToolWrapper)tool;
      local.processFile(file,false);
      descriptors=local.getProblemDescriptors();
    }
 else     if (tool instanceof GlobalInspectionToolWrapper) {
      GlobalInspectionToolWrapper global=(GlobalInspectionToolWrapper)tool;
      global.processFile(new AnalysisScope(file),manager,(GlobalInspectionContext)manager,false);
      descriptors=global.getProblemDescriptors();
    }
 else {
      continue;
    }
    for (    PsiElement suppressedScope : suppressedScopes.keySet()) {
      Collection<String> suppressedIds=suppressedScopes.get(suppressedScope);
      if (!suppressedIds.contains(toolId))       continue;
      boolean hasErrorInsideSuppressedScope=false;
      for (      CommonProblemDescriptor descriptor : descriptors) {
        if (!(descriptor instanceof ProblemDescriptor))         continue;
        PsiElement element=((ProblemDescriptor)descriptor).getPsiElement();
        if (element == null)         continue;
        PsiElement annotation=InspectionManagerEx.getElementToolSuppressedIn(element,toolId);
        if (annotation != null && PsiTreeUtil.isAncestor(suppressedScope,annotation,false)) {
          hasErrorInsideSuppressedScope=true;
          break;
        }
      }
      if (!hasErrorInsideSuppressedScope) {
        PsiElement element=suppressedScope instanceof PsiComment ? PsiTreeUtil.skipSiblingsForward(suppressedScope,PsiWhiteSpace.class) : suppressedScope.getFirstChild();
        PsiElement annotation=InspectionManagerEx.getElementToolSuppressedIn(element,toolId);
        if (annotation != null && annotation.isValid()) {
          String description=InspectionsBundle.message("inspection.redundant.suppression.description");
          LocalQuickFix fix=new RemoveSuppressWarningAction(toolId,annotation);
          ProblemDescriptor descriptor=manager.createProblemDescriptor(annotation,description,fix,ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
          result.add(descriptor);
        }
      }
    }
  }
  return result.toArray(new ProblemDescriptor[result.size()]);
}
