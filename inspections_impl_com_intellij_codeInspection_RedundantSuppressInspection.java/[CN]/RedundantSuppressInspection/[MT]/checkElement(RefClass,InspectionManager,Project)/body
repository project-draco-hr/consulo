{
  final PsiElement psiElement=refEntity.getElement();
  final Map<PsiElement,Collection<String>> suppressedScopes=new THashMap<PsiElement,Collection<String>>();
  psiElement.accept(new PsiRecursiveElementVisitor(){
    public void visitModifierList(    PsiModifierList list){
      super.visitModifierList(list);
      final PsiElement parent=list.getParent();
      if (parent instanceof PsiModifierListOwner && !(parent instanceof PsiClass)) {
        checkElement(parent);
      }
    }
    public void visitComment(    PsiComment comment){
      checkElement(comment);
    }
    public void visitClass(    PsiClass aClass){
      if (aClass == psiElement) {
        super.visitClass(aClass);
        checkElement(aClass);
      }
    }
    private void checkElement(    final PsiElement owner){
      String idsString=InspectionManagerEx.getSuppressedInspectionIdsIn(owner);
      if (idsString != null && idsString.length() != 0) {
        List<String> ids=StringUtil.split(idsString,",");
        Collection<String> suppressed=suppressedScopes.get(owner);
        if (suppressed == null) {
          suppressed=ids;
        }
 else {
          for (          String id : ids) {
            if (!suppressed.contains(id)) {
              suppressed.add(id);
            }
          }
        }
        suppressedScopes.put(owner,suppressed);
      }
    }
  }
);
  if (suppressedScopes.values().isEmpty())   return null;
  final ModifiableModel model=InspectionProjectProfileManager.getInstance(manager.getProject()).getInspectionProfile(psiElement).getModifiableModel();
  InspectionProfileWrapper profile=new InspectionProfileWrapper((InspectionProfile)model);
  profile.init(manager.getProject());
  Collection<InspectionTool> suppressedTools=new THashSet<InspectionTool>();
  InspectionTool[] tools=profile.getInspectionTools();
  for (  Collection<String> ids : suppressedScopes.values()) {
    for (    String id : ids) {
      String shortName=id.trim();
      for (      InspectionTool tool : tools) {
        if (tool.getShortName().equals(shortName)) {
          suppressedTools.add(tool);
        }
      }
    }
  }
  final AnalysisScope scope=new AnalysisScope(psiElement.getContainingFile());
  final InspectionManagerEx inspectionManagerEx=((InspectionManagerEx)InspectionManager.getInstance(project));
  GlobalInspectionContextImpl globalContext=inspectionManagerEx.createNewGlobalContext(false);
  globalContext.setCurrentScope(scope);
  final RefManagerImpl refManager=((RefManagerImpl)globalContext.getRefManager());
  refManager.inspectionReadActionStarted();
  final List<ProblemDescriptor> result;
  try {
    result=new ArrayList<ProblemDescriptor>();
    for (    InspectionTool tool : suppressedTools) {
      String toolId=tool.getShortName();
      tool.initialize(globalContext);
      Collection<CommonProblemDescriptor> descriptors;
      if (tool instanceof LocalInspectionToolWrapper) {
        LocalInspectionToolWrapper local=(LocalInspectionToolWrapper)tool;
        if (local.getTool() instanceof UnfairLocalInspectionTool)         continue;
        local.processFile(psiElement.getContainingFile(),false,manager);
        descriptors=local.getProblemDescriptors();
      }
 else       if (tool instanceof GlobalInspectionToolWrapper) {
        GlobalInspectionToolWrapper global=(GlobalInspectionToolWrapper)tool;
        if (global.getTool().isGraphNeeded()) {
          refManager.findAllDeclarations();
        }
        global.processFile(scope,manager,globalContext,false);
        descriptors=global.getProblemDescriptors();
      }
 else {
        continue;
      }
      for (      PsiElement suppressedScope : suppressedScopes.keySet()) {
        Collection<String> suppressedIds=suppressedScopes.get(suppressedScope);
        if (!suppressedIds.contains(toolId))         continue;
        boolean hasErrorInsideSuppressedScope=false;
        for (        CommonProblemDescriptor descriptor : descriptors) {
          if (!(descriptor instanceof ProblemDescriptor))           continue;
          PsiElement element=((ProblemDescriptor)descriptor).getPsiElement();
          if (element == null)           continue;
          PsiElement annotation=InspectionManagerEx.getElementToolSuppressedIn(element,toolId);
          if (annotation != null && PsiTreeUtil.isAncestor(suppressedScope,annotation,false)) {
            hasErrorInsideSuppressedScope=true;
            break;
          }
        }
        if (!hasErrorInsideSuppressedScope) {
          PsiMember psiMember;
          String problemLine=null;
          if (suppressedScope instanceof PsiMember) {
            psiMember=(PsiMember)suppressedScope;
          }
 else {
            psiMember=PsiTreeUtil.getParentOfType(suppressedScope,PsiDocCommentOwner.class);
            final PsiStatement statement=PsiTreeUtil.getNextSiblingOfType(suppressedScope,PsiStatement.class);
            problemLine=statement != null ? statement.getText() : null;
          }
          if (psiMember != null && psiMember.isValid()) {
            String description=InspectionsBundle.message("inspection.redundant.suppression.description");
            if (myQuickFixes == null)             myQuickFixes=new BidirectionalMap<String,QuickFix>();
            final String key=toolId + (problemLine != null ? ";" + problemLine : "");
            QuickFix fix=myQuickFixes.get(key);
            if (fix == null) {
              fix=new RemoveSuppressWarningAction(toolId,problemLine);
              myQuickFixes.put(key,fix);
            }
            PsiElement identifier=null;
            if (psiMember instanceof PsiMethod) {
              identifier=((PsiMethod)psiMember).getNameIdentifier();
            }
 else             if (psiMember instanceof PsiField) {
              identifier=((PsiField)psiMember).getNameIdentifier();
            }
 else             if (psiMember instanceof PsiClass) {
              identifier=((PsiClass)psiMember).getNameIdentifier();
            }
            if (identifier == null) {
              identifier=psiMember;
            }
            result.add(manager.createProblemDescriptor(identifier,description,(LocalQuickFix)fix,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
          }
        }
      }
    }
  }
  finally {
    refManager.inspectionReadActionFinished();
    globalContext.close(true);
  }
  return result.toArray(new ProblemDescriptor[result.size()]);
}
