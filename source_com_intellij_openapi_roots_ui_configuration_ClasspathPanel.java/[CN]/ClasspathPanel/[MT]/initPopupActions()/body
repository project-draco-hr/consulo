{
  if (myPopupActions == null) {
    myPopupActions=new PopupAction[]{new ChooseAndAddAction<Library>(1,ProjectBundle.message("classpath.add.jar.directory.action"),Icons.JAR_ICON){
      protected TableItem createTableItem(      final Library item){
        final OrderEntry[] entries=myRootModel.getOrderEntries();
        for (        OrderEntry entry : entries) {
          if (entry instanceof LibraryOrderEntry) {
            final LibraryOrderEntry libraryOrderEntry=(LibraryOrderEntry)entry;
            if (item.equals(libraryOrderEntry.getLibrary())) {
              return new LibItem(libraryOrderEntry);
            }
          }
        }
        LOG.assertTrue(false,"Unknown library " + item);
        return null;
      }
      protected ChooserDialog<Library> createChooserDialog(){
        return new ChooseModuleLibrariesDialog(ClasspathPanel.this,myRootModel.getModuleLibraryTable());
      }
      public List<Library> getChooseItems(){
        return Collections.emptyList();
      }
    }
,new ChooseAndAddAction<Library>(2,ProjectBundle.message("classpath.add.project.library.action"),Icons.LIBRARY_ICON){
      protected TableItem createTableItem(      final Library item){
        return new LibItem(myRootModel.addLibraryEntry(item));
      }
      protected ChooserDialog<Library> createChooserDialog(){
        return new ChooseLibrariesDialog(this,ProjectBundle.message("classpath.chooser.title.add.project.library"),LibraryTablesRegistrar.getInstance().getLibraryTable(myProject));
      }
      @NotNull public List<Library> getChooseItems(){
        return getDependencyLibraries(LibraryTablesRegistrar.getInstance().getLibraryTable(myProject));
      }
    }
,new ChooseAndAddAction<Library>(3,ProjectBundle.message("classpath.add.global.library.action"),Icons.LIBRARY_ICON){
      protected TableItem createTableItem(      final Library item){
        return new LibItem(myRootModel.addLibraryEntry(item));
      }
      protected ChooserDialog<Library> createChooserDialog(){
        return new ChooseLibrariesDialog(this,ProjectBundle.message("classpath.chooser.title.add.global.library"),LibraryTablesRegistrar.getInstance().getLibraryTable());
      }
      @NotNull public List<Library> getChooseItems(){
        return getDependencyLibraries(LibraryTablesRegistrar.getInstance().getLibraryTable());
      }
    }
,new ChooseAndAddAction<Module>(4,ProjectBundle.message("classpath.add.module.dependency.action"),IconUtilEx.getModuleTypeIcon(ModuleType.JAVA,0)){
      protected TableItem createTableItem(      final Module item){
        return new ModuleItem(myRootModel.addModuleOrderEntry(item));
      }
      protected ChooserDialog<Module> createChooserDialog(){
        final List<Module> chooseItems=getChooseItems();
        if (chooseItems.size() == 0) {
          Messages.showMessageDialog(ClasspathPanel.this,ProjectBundle.message("message.no.module.dependency.candidates"),getTitle(),Messages.getInformationIcon());
          return null;
        }
        return new ChooseModulesDialog(new ChooseItemsProvider<Module>(){
          public List<Module> getChooseItems(){
            return chooseItems;
          }
        }
,ProjectBundle.message("classpath.chooser.title.add.module.dependency"));
      }
      public List<Module> getChooseItems(){
        return getDependencyModules();
      }
    }
};
    myIcons=new Icon[myPopupActions.length];
    for (int idx=0; idx < myPopupActions.length; idx++) {
      myIcons[idx]=myPopupActions[idx].getIcon();
    }
  }
}
