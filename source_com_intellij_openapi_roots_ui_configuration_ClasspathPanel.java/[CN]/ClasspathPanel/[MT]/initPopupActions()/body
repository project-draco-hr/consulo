{
  if (myPopupActions == null) {
    final ProjectRootConfigurable projectRootConfigurable=ProjectRootConfigurable.getInstance(myProject);
    final List<PopupAction> actions=new ArrayList<PopupAction>(Arrays.<PopupAction>asList(new ChooseAndAddAction<Library>(1,ProjectBundle.message("classpath.add.module.library.action"),Icons.JAR_ICON){
      protected TableItem createTableItem(      final Library item){
        final OrderEntry[] entries=myRootModel.getOrderEntries();
        for (        OrderEntry entry : entries) {
          if (entry instanceof LibraryOrderEntry) {
            final LibraryOrderEntry libraryOrderEntry=(LibraryOrderEntry)entry;
            if (item.equals(libraryOrderEntry.getLibrary())) {
              projectRootConfigurable.createLibraryNode(libraryOrderEntry,myRootModel);
              return new LibItem(libraryOrderEntry);
            }
          }
        }
        LOG.assertTrue(false,"Unknown library " + item);
        return null;
      }
      protected ChooserDialog<Library> createChooserDialog(){
        return new ChooseModuleLibrariesDialog(ClasspathPanel.this,myRootModel.getModuleLibraryTable(),getFileToSelect());
      }
      private @Nullable VirtualFile getFileToSelect(){
        final int selectedRow=myEntryTable.getSelectedRow();
        if (selectedRow < 0) {
          return null;
        }
        final OrderEntry entry=myModel.getItemAt(selectedRow).getEntry();
        if (!(entry instanceof LibraryOrderEntry)) {
          return null;
        }
        final LibraryOrderEntry libraryOrderEntry=((LibraryOrderEntry)entry);
        if (!LibraryTableImplUtil.MODULE_LEVEL.equals(libraryOrderEntry.getLibraryLevel())) {
          return null;
        }
        final VirtualFile[] files=libraryOrderEntry.getLibrary().getFiles(OrderRootType.CLASSES);
        final VirtualFile file=files.length == 0 ? null : files[0];
        if (file == null) {
          return null;
        }
        return LocalFileSystem.getInstance().findFileByIoFile(VfsUtil.virtualToIoFile(file));
      }
    }
,new ChooseNamedLibraryAction(2,ProjectBundle.message("classpath.add.project.library.action"),projectRootConfigurable.getProjectLibrariesProvider()),new ChooseNamedLibraryAction(3,ProjectBundle.message("classpath.add.global.library.action"),projectRootConfigurable.getGlobalLibrariesProvider())));
    int index=4;
    for (    final LibraryTableModifiableModelProvider provider : projectRootConfigurable.getCustomLibrariesProviders()) {
      actions.add(new ChooseNamedLibraryAction(index++,provider.getLibraryTablePresentation().getDisplayName(false) + "...",provider));
    }
    actions.add(new ChooseAndAddAction<Module>(index,ProjectBundle.message("classpath.add.module.dependency.action"),IconUtilEx.getModuleTypeIcon(ModuleType.JAVA,0)){
      protected TableItem createTableItem(      final Module item){
        return new ModuleItem(myRootModel.addModuleOrderEntry(item));
      }
      protected ChooserDialog<Module> createChooserDialog(){
        final List<Module> chooseItems=getDependencyModules();
        if (chooseItems.size() == 0) {
          Messages.showMessageDialog(ClasspathPanel.this,ProjectBundle.message("message.no.module.dependency.candidates"),getTitle(),Messages.getInformationIcon());
          return null;
        }
        return new ChooseModulesToAddDialog(chooseItems,ProjectBundle.message("classpath.chooser.title.add.module.dependency"));
      }
    }
);
    myPopupActions=actions.toArray(new PopupAction[actions.size()]);
    myIcons=new Icon[myPopupActions.length];
    for (int idx=0; idx < myPopupActions.length; idx++) {
      myIcons[idx]=myPopupActions[idx].getIcon();
    }
  }
}
