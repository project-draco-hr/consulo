{
  final JButton addButton=new JButton(ProjectBundle.message("button.add"));
  final JButton removeButton=new JButton(ProjectBundle.message("button.remove"));
  final JButton editButton=new JButton(ProjectBundle.message("button.edit"));
  final JButton upButton=new JButton(ProjectBundle.message("button.move.up"));
  final JButton downButton=new JButton(ProjectBundle.message("button.move.down"));
  final JPanel panel=new JPanel(new GridBagLayout());
  panel.add(addButton,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(2,2,0,0),0,0));
  panel.add(editButton,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(2,2,0,0),0,0));
  panel.add(removeButton,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(2,2,0,0),0,0));
  panel.add(upButton,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(2,2,0,0),0,0));
  panel.add(downButton,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,1.0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(2,2,0,0),0,0));
  myEntryTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      if (e.getValueIsAdjusting()) {
        return;
      }
      final int[] selectedRows=myEntryTable.getSelectedRows();
      boolean editButtonEnabled=selectedRows.length == 1;
      boolean removeButtonEnabled=true;
      int minRow=myEntryTable.getRowCount() + 1;
      int maxRow=-1;
      for (      final int selectedRow : selectedRows) {
        minRow=Math.min(minRow,selectedRow);
        maxRow=Math.max(maxRow,selectedRow);
        final TableItem item=myModel.getItemAt(selectedRow);
        if (!item.isRemovable()) {
          removeButtonEnabled=false;
        }
        if (!item.isEditable()) {
          editButtonEnabled=false;
        }
      }
      upButton.setEnabled(minRow > 0 && minRow < myEntryTable.getRowCount());
      downButton.setEnabled(maxRow >= 0 && maxRow < myEntryTable.getRowCount() - 1);
      editButton.setEnabled(editButtonEnabled);
      removeButton.setEnabled(removeButtonEnabled);
    }
  }
);
  upButton.addActionListener(new ButtonAction(){
    protected void executeImpl(){
      moveSelectedRows(-1);
    }
  }
);
  downButton.addActionListener(new ButtonAction(){
    protected void executeImpl(){
      moveSelectedRows(+1);
    }
  }
);
  myEntryTable.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == 2 && editButton.isEnabled()) {
        editButton.doClick();
      }
    }
  }
);
  addButton.addActionListener(new ButtonAction(){
    protected void executeImpl(){
      initPopupActions();
      final Popup popup=PopupFactory.getInstance().createWizardStep(new BaseListPopupStep("Add:",myPopupActions,myIcons){
        public boolean isSelectable(        Object value){
          return ((PopupAction)value).isSelectable();
        }
        public PopupStep onChosen(        final Object selectedValue){
          ApplicationManager.getApplication().invokeLater(new Runnable(){
            public void run(){
              ((PopupAction)selectedValue).execute();
            }
          }
,ModalityState.stateForComponent(ClasspathPanel.this));
          return PopupStep.FINAL_CHOICE;
        }
        public String getTextFor(        Object value){
          return ((PopupAction)value).getTitle();
        }
      }
);
      popup.showUnderneathOf(addButton);
    }
  }
);
  editButton.addActionListener(new ButtonAction(){
    protected void executeImpl(){
      final int row=myEntryTable.getSelectedRow();
      final TableItem tableItem=myModel.getItemAt(row);
      if (tableItem instanceof JdkItem) {
        editJdk((JdkItem)tableItem,row);
      }
 else       if (tableItem instanceof LibItem) {
        final LibraryOrderEntry entry=((LibItem)tableItem).getEntry();
        if (entry != null && entry.isValid()) {
          final Library library=entry.getLibrary();
          final LibraryTable moduleLibraryTable=myRootModel.getModuleLibraryTable();
          final boolean isModuleLibrary=moduleLibraryTable.getTableLevel().equals(entry.getLibraryLevel());
          final LibraryTable table=isModuleLibrary ? moduleLibraryTable : library.getTable();
          final Library[] libraries=table.getLibraries();
          final ArrayList<Library> toSelect=new ArrayList<Library>(1);
          for (          final Library lib : libraries) {
            if (lib.equals(library)) {
              toSelect.add(lib);
            }
          }
          LibraryTableEditor.showEditDialog(ClasspathPanel.this,table,toSelect);
          if (isModuleLibrary) {
            forceInitFromModel();
          }
 else {
            myModel.fireTableRowsUpdated(row,row);
          }
        }
      }
    }
  }
);
  removeButton.addActionListener(new ButtonAction(){
    protected void executeImpl(){
      final List removedRows=TableUtil.removeSelectedItems(myEntryTable);
      if (removedRows.size() == 0) {
        return;
      }
      final LibraryTable moduleLibraryTable=myRootModel.getModuleLibraryTable();
      LibraryTable.ModifiableModel modifiableModel=null;
      for (Iterator it=removedRows.iterator(); it.hasNext(); ) {
        final TableItem item=(TableItem)((Object[])it.next())[MyTableModel.ITEM_COLUMN];
        final OrderEntry orderEntry=item.getEntry();
        if (orderEntry == null) {
          continue;
        }
        if (orderEntry instanceof LibraryOrderEntry) {
          final LibraryOrderEntry libEntry=(LibraryOrderEntry)orderEntry;
          if (libEntry.isValid() && moduleLibraryTable.getTableLevel().equals(libEntry.getLibraryLevel())) {
            if (modifiableModel == null) {
              modifiableModel=moduleLibraryTable.getModifiableModel();
            }
            modifiableModel.removeLibrary(libEntry.getLibrary());
            continue;
          }
        }
        myRootModel.removeOrderEntry(orderEntry);
      }
      if (modifiableModel != null) {
        modifiableModel.commit();
      }
      final int[] selectedRows=myEntryTable.getSelectedRows();
      myModel.fireTableDataChanged();
      TableUtil.selectRows(myEntryTable,selectedRows);
    }
  }
);
  return panel;
}
