{
  final JButton addButton=new JButton(ProjectBundle.message("button.add"));
  final JButton removeButton=new JButton(ProjectBundle.message("button.remove"));
  final JButton upButton=new JButton(ProjectBundle.message("button.move.up"));
  final JButton downButton=new JButton(ProjectBundle.message("button.move.down"));
  final JPanel panel=new JPanel(new GridBagLayout());
  panel.add(addButton,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(2,2,0,0),0,0));
  panel.add(removeButton,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(2,2,0,0),0,0));
  panel.add(upButton,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(2,2,0,0),0,0));
  panel.add(downButton,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,1.0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(2,2,0,0),0,0));
  myEntryTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      if (e.getValueIsAdjusting()) {
        return;
      }
      final int[] selectedRows=myEntryTable.getSelectedRows();
      boolean removeButtonEnabled=true;
      int minRow=myEntryTable.getRowCount() + 1;
      int maxRow=-1;
      for (      final int selectedRow : selectedRows) {
        minRow=Math.min(minRow,selectedRow);
        maxRow=Math.max(maxRow,selectedRow);
        final TableItem item=myModel.getItemAt(selectedRow);
        if (!item.isRemovable()) {
          removeButtonEnabled=false;
        }
      }
      upButton.setEnabled(minRow > 0 && minRow < myEntryTable.getRowCount());
      downButton.setEnabled(maxRow >= 0 && maxRow < myEntryTable.getRowCount() - 1);
      removeButton.setEnabled(removeButtonEnabled);
    }
  }
);
  upButton.addActionListener(new ButtonAction(){
    protected void executeImpl(){
      moveSelectedRows(-1);
    }
  }
);
  downButton.addActionListener(new ButtonAction(){
    protected void executeImpl(){
      moveSelectedRows(+1);
    }
  }
);
  addKeyboardShortcut(myEntryTable,removeButton,KeyEvent.VK_DELETE,0);
  addKeyboardShortcut(myEntryTable,addButton,KeyEvent.VK_INSERT,0);
  addKeyboardShortcut(myEntryTable,upButton,KeyEvent.VK_UP,KeyEvent.CTRL_DOWN_MASK);
  addKeyboardShortcut(myEntryTable,downButton,KeyEvent.VK_DOWN,KeyEvent.CTRL_DOWN_MASK);
  addButton.addActionListener(new ButtonAction(){
    protected void executeImpl(){
      initPopupActions();
      final JBPopup popup=JBPopupFactory.getInstance().createWizardStep(new BaseListPopupStep<PopupAction>(null,myPopupActions,myIcons){
        public boolean isMnemonicsNavigationEnabled(){
          return true;
        }
        public boolean isSelectable(        PopupAction value){
          return value.isSelectable();
        }
        public PopupStep onChosen(        final PopupAction selectedValue,        final boolean finalChoice){
          ApplicationManager.getApplication().invokeLater(new Runnable(){
            public void run(){
              selectedValue.execute();
            }
          }
,ModalityState.stateForComponent(ClasspathPanel.this));
          return PopupStep.FINAL_CHOICE;
        }
        @NotNull public String getTextFor(        PopupAction value){
          return "&" + value.getIndex() + "  "+ value.getTitle();
        }
      }
);
      popup.showUnderneathOf(addButton);
    }
  }
);
  removeButton.addActionListener(new ButtonAction(){
    protected void executeImpl(){
      final List removedRows=TableUtil.removeSelectedItems(myEntryTable);
      if (removedRows.size() == 0) {
        return;
      }
      final LibraryTable moduleLibraryTable=myRootModel.getModuleLibraryTable();
      LibraryTable.ModifiableModel modifiableModel=null;
      for (      final Object removedRow : removedRows) {
        final TableItem item=(TableItem)((Object[])removedRow)[MyTableModel.ITEM_COLUMN];
        final OrderEntry orderEntry=item.getEntry();
        if (orderEntry == null) {
          continue;
        }
        final Module module=myRootModel.getModule();
        final Project project=module.getProject();
        final ProjectRootConfigurable rootConfigurable=ProjectRootConfigurable.getInstance(project);
        if (orderEntry instanceof LibraryOrderEntry) {
          final LibraryOrderEntry libEntry=(LibraryOrderEntry)orderEntry;
          if (libEntry.isValid() && moduleLibraryTable.getTableLevel().equals(libEntry.getLibraryLevel())) {
            if (modifiableModel == null) {
              modifiableModel=moduleLibraryTable.getModifiableModel();
            }
            modifiableModel.removeLibrary(libEntry.getLibrary());
            rootConfigurable.deleteLibraryNode(libEntry);
            continue;
          }
          rootConfigurable.clearCaches(module,libEntry);
        }
        rootConfigurable.clearCaches(module);
        myRootModel.removeOrderEntry(orderEntry);
      }
      if (modifiableModel != null) {
        modifiableModel.commit();
      }
      final int[] selectedRows=myEntryTable.getSelectedRows();
      myModel.fireTableDataChanged();
      TableUtil.selectRows(myEntryTable,selectedRows);
    }
  }
);
  return panel;
}
