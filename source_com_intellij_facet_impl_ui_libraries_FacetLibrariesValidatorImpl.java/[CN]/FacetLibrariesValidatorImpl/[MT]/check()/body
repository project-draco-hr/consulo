{
  if (myRequiredLibraries == null) {
    return ValidationResult.OK;
  }
  ModuleRootModel rootModel=myContext.getRootModel();
  List<VirtualFile> usedLibraries=collectRoots(rootModel);
  RequiredLibrariesInfo.RequiredClassesNotFoundInfo info=myRequiredLibraries.checkLibraries(usedLibraries.toArray(new VirtualFile[usedLibraries.size()]));
  if (info == null) {
    return ValidationResult.OK;
  }
  String missingJars=IdeBundle.message("label.missed.libraries.prefix") + " " + info.getMissingJarsText();
  final String text=IdeBundle.message("label.missed.libraries.text",missingJars,info.getClassNames()[0]);
  LibraryInfo[] missingLibraries=info.getLibraryInfos();
  final String baseDir=myContext.getProject().getBaseDir().getPath();
  Set<VirtualFile> addedJars=null;
  if (myLibraryCompositionSettings != null) {
    addedJars=myLibraryCompositionSettings.getAddedJars();
  }
  myLibraryCompositionSettings=new LibraryCompositionSettings(missingLibraries,myDescription.getDefaultLibraryName(),baseDir,myDescription.getDefaultLibraryName(),null);
  if (addedJars != null) {
    myLibraryCompositionSettings.setAddedJars(usedLibraries);
  }
  return new ValidationResult(text,new LibrariesQuickFix(this,myLibraryCompositionSettings,myContext.getLibrariesContainer()));
}
