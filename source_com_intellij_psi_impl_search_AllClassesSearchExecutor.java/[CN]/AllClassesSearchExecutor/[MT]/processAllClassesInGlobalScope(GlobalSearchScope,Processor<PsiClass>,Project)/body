{
  final PsiManagerImpl psiManager=(PsiManagerImpl)PsiManager.getInstance(project);
  final RepositoryManager repositoryManager=psiManager.getRepositoryManager();
  repositoryManager.updateAll();
  final ProjectFileIndex fileIndex=ProjectRootManager.getInstance(psiManager.getProject()).getFileIndex();
  return fileIndex.iterateContent(new ContentIterator(){
    public boolean processFile(    final VirtualFile fileOrDir){
      return ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
        public Boolean compute(){
          if (!fileOrDir.isDirectory() && searchScope.contains(fileOrDir)) {
            final PsiFile psiFile=psiManager.findFile(fileOrDir);
            if (psiFile instanceof PsiJavaFile) {
              long fileId=repositoryManager.getFileId(fileOrDir);
              if (fileId >= 0) {
                long[] allClasses=repositoryManager.getFileView().getAllClasses(fileId);
                for (                long allClass : allClasses) {
                  PsiClass psiClass=(PsiClass)psiManager.getRepositoryElementsManager().findOrCreatePsiElementById(allClass);
                  if (!processor.process(psiClass))                   return false;
                }
              }
 else {
                if (!processScopeRootForAllClasses(psiFile,processor))                 return false;
              }
            }
 else             if (psiFile instanceof PsiClassOwner) {
              for (              PsiClass aClass : ((PsiClassOwner)psiFile).getClasses()) {
                if (!processor.process(aClass))                 return false;
              }
            }
          }
          return true;
        }
      }
).booleanValue();
    }
  }
);
}
