{
  final PsiManager manager=PsiManager.getInstance(parameters.getProject());
  final JavaPsiFacade facade=JavaPsiFacade.getInstance(manager.getProject());
  final PsiShortNamesCache cache=facade.getShortNamesCache();
  final String[] names=ApplicationManager.getApplication().runReadAction(new Computable<String[]>(){
    public String[] compute(){
      return cache.getAllClassNames();
    }
  }
);
  Arrays.sort(names,new Comparator<String>(){
    public int compare(    final String o1,    final String o2){
      return o1.compareToIgnoreCase(o2);
    }
  }
);
  for (  final String name : names) {
    if (!parameters.nameMatches(name))     continue;
    ProgressManager.getInstance().checkCanceled();
    final PsiClass[] classes=ApplicationManager.getApplication().runReadAction(new Computable<PsiClass[]>(){
      public PsiClass[] compute(){
        return cache.getClassesByName(name,scope);
      }
    }
);
    for (    PsiClass psiClass : classes) {
      ProgressManager.getInstance().checkCanceled();
      if (!processor.process(psiClass)) {
        return false;
      }
    }
  }
  return true;
}
