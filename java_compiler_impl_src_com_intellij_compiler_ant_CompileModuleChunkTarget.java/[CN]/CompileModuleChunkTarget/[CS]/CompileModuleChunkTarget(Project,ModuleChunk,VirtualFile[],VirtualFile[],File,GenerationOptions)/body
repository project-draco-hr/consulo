{
  final String moduleChunkName=moduleChunk.getName();
  final Tag compilerArgs=new Tag("compilerarg",Pair.create("line",BuildProperties.propertyRef(BuildProperties.getModuleChunkCompilerArgsProperty(moduleChunkName))));
  final Pair<String,String> classpathRef=Pair.create("refid",BuildProperties.getClasspathProperty(moduleChunkName));
  final Tag classpathTag=new Tag("classpath",classpathRef);
  final Tag bootclasspathTag=new Tag("bootclasspath",Pair.create("refid",BuildProperties.getBootClasspathProperty(moduleChunkName)));
  final PatternSetRef compilerExcludes=new PatternSetRef(BuildProperties.getExcludedFromCompilationProperty(moduleChunkName));
  final String mainTargetName=BuildProperties.getCompileTargetName(moduleChunkName);
  final @NonNls String productionTargetName=mainTargetName + ".production";
  final @NonNls String testsTargetName=mainTargetName + ".tests";
  final int modulesCount=moduleChunk.getModules().length;
  Target mainTarget=new Target(mainTargetName,productionTargetName + "," + testsTargetName,CompilerBundle.message("generated.ant.build.compile.modules.main.target.comment",modulesCount,moduleChunkName),null);
  Target productionTarget=new Target(productionTargetName,getChunkDependenciesString(moduleChunk),CompilerBundle.message("generated.ant.build.compile.modules.production.classes.target.comment",modulesCount,moduleChunkName),null);
  Target testsTarget=new Target(testsTargetName,productionTargetName,CompilerBundle.message("generated.ant.build.compile.modules.tests.target.comment",modulesCount,moduleChunkName),BuildProperties.PROPERTY_SKIP_TESTS);
  final ChunkCustomCompilerExtension[] customCompilers=moduleChunk.getCustomCompilers();
  if (sourceRoots.length > 0) {
    final String outputPathRef=BuildProperties.propertyRef(BuildProperties.getOutputPathProperty(moduleChunkName));
    final Tag srcTag=new Tag("src",Pair.create("refid",BuildProperties.getSourcepathProperty(moduleChunkName)));
    productionTarget.add(new Mkdir(outputPathRef));
    createCustomCompilerTasks(project,moduleChunk,genOptions,false,customCompilers,compilerArgs,bootclasspathTag,classpathTag,compilerExcludes,srcTag,outputPathRef,productionTarget);
    if (customCompilers.length == 0 || genOptions.enableFormCompiler) {
      final Javac javac=new Javac(genOptions,moduleChunk,outputPathRef);
      javac.add(compilerArgs);
      javac.add(bootclasspathTag);
      javac.add(classpathTag);
      javac.add(srcTag);
      javac.add(compilerExcludes);
      productionTarget.add(javac);
    }
    productionTarget.add(createCopyTask(project,moduleChunk,sourceRoots,outputPathRef,baseDir,genOptions));
  }
  if (testSourceRoots.length > 0) {
    final String testOutputPathRef=BuildProperties.propertyRef(BuildProperties.getOutputPathForTestsProperty(moduleChunkName));
    final Tag srcTag=new Tag("src",Pair.create("refid",BuildProperties.getTestSourcepathProperty(moduleChunkName)));
    final Pair<String,String> testClasspathRef=Pair.create("refid",BuildProperties.getTestClasspathProperty(moduleChunkName));
    final Tag testClassPath=new Tag("classpath",testClasspathRef);
    testsTarget.add(new Mkdir(testOutputPathRef));
    createCustomCompilerTasks(project,moduleChunk,genOptions,true,customCompilers,compilerArgs,bootclasspathTag,testClassPath,compilerExcludes,srcTag,testOutputPathRef,testsTarget);
    if (customCompilers.length == 0 || genOptions.enableFormCompiler) {
      final Javac javac=new Javac(genOptions,moduleChunk,testOutputPathRef);
      javac.add(compilerArgs);
      javac.add(bootclasspathTag);
      javac.add(testClassPath);
      javac.add(srcTag);
      javac.add(compilerExcludes);
      testsTarget.add(javac);
    }
    testsTarget.add(createCopyTask(project,moduleChunk,testSourceRoots,testOutputPathRef,baseDir,genOptions));
  }
  add(mainTarget);
  add(productionTarget,1);
  add(testsTarget,1);
}
