{
  final Tag filesSelector=new Tag("type",Pair.create("type","file"));
  final PatternSetRef excludes=CompilerExcludes.isAvailable(project) ? new PatternSetRef(BuildProperties.getExcludedFromCompilationProperty(chunk.getName())) : null;
  final PatternSetRef resourcePatternsPatternSet=new PatternSetRef(BuildProperties.PROPERTY_COMPILER_RESOURCE_PATTERNS);
  final ProjectFileIndex fileIndex=ProjectRootManager.getInstance(project).getFileIndex();
  final CompositeGenerator composite=new CompositeGenerator();
  final Map<String,Copy> outputDirToTaskMap=new HashMap<String,Copy>();
  for (  final VirtualFile root : sourceRoots) {
    final String packagePrefix=fileIndex.getPackageNameByDirectory(root);
    final String targetDir=packagePrefix != null && packagePrefix.length() > 0 ? toDir + "/" + packagePrefix.replace('.','/') : toDir;
    Copy copy=outputDirToTaskMap.get(targetDir);
    if (copy == null) {
      copy=new Copy(targetDir);
      outputDirToTaskMap.put(targetDir,copy);
      composite.add(copy);
    }
    final FileSet fileSet=new FileSet(GenerationUtils.toRelativePath(root,baseDir,BuildProperties.getModuleChunkBasedirProperty(chunk),genOptions));
    fileSet.add(resourcePatternsPatternSet);
    fileSet.add(filesSelector);
    if (excludes != null) {
      fileSet.add(excludes);
    }
    copy.add(fileSet);
  }
  return composite;
}
