{
  if (removed != null) {
    for (    StringCache.S file : removed) {
      affectAll(file,affectedFiles);
    }
  }
  for (  StringCache.S fileName : delta.sourceFileToClasses.keySet()) {
    if (safeFiles.contains(fileName)) {
      continue;
    }
    final Set<ClassRepr> classes=(Set<ClassRepr>)delta.sourceFileToClasses.foxyGet(fileName);
    final Set<ClassRepr> pastClasses=(Set<ClassRepr>)sourceFileToClasses.foxyGet(fileName);
    final Set<StringCache.S> dependants=(Set<StringCache.S>)fileToFileDependency.foxyGet(fileName);
    final Set<UsageRepr.Usage> affectedUsages=new HashSet<UsageRepr.Usage>();
    final Set<UsageRepr.AnnotationUsage> annotationQuery=new HashSet<UsageRepr.AnnotationUsage>();
    final Difference.Specifier<ClassRepr> classDiff=Difference.make(pastClasses,classes);
    for (    Pair<ClassRepr,Difference> changed : classDiff.changed()) {
      final ClassRepr it=changed.fst;
      final ClassRepr.Diff diff=(ClassRepr.Diff)changed.snd;
      if (it.isAnnotation() && it.policy == RetentionPolicy.SOURCE) {
        return false;
      }
      if (diff.base() != Difference.NONE || !diff.interfaces().unchanged() || !diff.nestedClasses().unchanged()) {
        affectedUsages.add(it.createUsage());
      }
      if (it.isAnnotation()) {
        if (diff.retentionChanged()) {
          affectedUsages.add(it.createUsage());
        }
 else {
          final Collection<ElementType> removedtargets=diff.targets().removed();
          if (removedtargets.contains(ElementType.LOCAL_VARIABLE)) {
            return false;
          }
          if (!removedtargets.isEmpty()) {
            annotationQuery.add((UsageRepr.AnnotationUsage)UsageRepr.createAnnotationUsage(TypeRepr.createClassType(it.name),null,removedtargets));
          }
          for (          MethodRepr m : diff.methods().added()) {
            if (!m.hasValue()) {
              affectedUsages.add(it.createUsage());
            }
          }
        }
      }
      for (      MethodRepr m : diff.methods().removed()) {
        affectedUsages.add(m.createUsage(it.name));
      }
      for (      Pair<MethodRepr,Difference> mr : diff.methods().changed()) {
        final MethodRepr m=mr.fst;
        final MethodRepr.Diff d=(MethodRepr.Diff)mr.snd;
        if (it.isAnnotation()) {
          if (d.defaultRemoved()) {
            final List<StringCache.S> l=new LinkedList<StringCache.S>();
            l.add(m.name);
            annotationQuery.add((UsageRepr.AnnotationUsage)UsageRepr.createAnnotationUsage(TypeRepr.createClassType(it.name),l,null));
          }
        }
 else         if (mr.snd.base() != Difference.NONE) {
          affectedUsages.add(mr.fst.createUsage(it.name));
        }
      }
      for (      FieldRepr f : diff.fields().removed()) {
        affectedUsages.add(f.createUsage(it.name));
      }
      for (      Pair<FieldRepr,Difference> f : diff.fields().changed()) {
        final Difference d=f.snd;
        final FieldRepr field=f.fst;
        final int mask=Opcodes.ACC_STATIC | Opcodes.ACC_FINAL;
        if (((field.access & Opcodes.ACC_PUBLIC) > 0 || (field.access & Opcodes.ACC_PROTECTED) > 0) && ((field.access & mask) == mask)) {
          if ((d.base() & Difference.ACCESS) > 0 || (d.base() & Difference.VALUE) > 0) {
            return false;
          }
        }
        if (d.base() != Difference.NONE) {
          affectedUsages.add(field.createUsage(it.name));
        }
      }
    }
    for (    ClassRepr c : classDiff.removed()) {
      affectedUsages.add(c.createUsage());
    }
    if (dependants != null) {
      dependants.removeAll(compiledFiles);
      for (      StringCache.S depFile : dependants) {
        final Collection<UsageRepr.Usage> depUsages=sourceFileToUsages.foxyGet(depFile);
        if (depUsages != null) {
          final Set<UsageRepr.Usage> usages=new HashSet<UsageRepr.Usage>(depUsages);
          usages.retainAll(affectedUsages);
          if (!usages.isEmpty()) {
            affectedFiles.add(depFile);
          }
          if (annotationQuery.size() > 0) {
            final Collection<UsageRepr.Usage> annotationUsages=sourceFileToAnnotationUsages.foxyGet(depFile);
            for (            UsageRepr.Usage usage : annotationUsages) {
              for (              UsageRepr.AnnotationUsage query : annotationQuery) {
                if (query.satisfies(usage)) {
                  affectedFiles.add(depFile);
                  break;
                }
              }
            }
          }
        }
      }
    }
  }
  return true;
}
