{
  return new Callbacks.Backend(){
    public Collection<StringCache.S> getClassFiles(){
      return classToSourceFile.keySet();
    }
    public void associate(    final String classFileName,    final Callbacks.SourceFileNameLookup sourceFileName,    final ClassReader cr){
      final StringCache.S classFileNameS=StringCache.get(project.getRelativePath(classFileName));
      final Pair<ClassRepr,Pair<Set<UsageRepr.Usage>,Set<UsageRepr.Usage>>> result=ClassfileAnalyzer.analyze(classFileNameS,cr);
      final ClassRepr repr=result.fst;
      final Set<UsageRepr.Usage> localUsages=result.snd.fst;
      final Set<UsageRepr.Usage> localAnnotationUsages=result.snd.snd;
      final StringCache.S sourceFileNameS=StringCache.get(project.getRelativePath(sourceFileName.get(repr == null ? null : repr.getSourceFileName().value)));
      for (      UsageRepr.Usage u : localUsages) {
        updateDependency(sourceFileNameS,u.getOwner());
      }
      if (repr != null) {
        updateClassToSource(repr.name,sourceFileNameS);
        updateSourceToClasses(sourceFileNameS,repr);
        for (        StringCache.S s : repr.getSupers()) {
          classToSubclasses.put(s,repr.name);
        }
      }
      if (!localUsages.isEmpty()) {
        updateSourceToUsages(sourceFileNameS,localUsages);
      }
      if (!localAnnotationUsages.isEmpty()) {
        updateSourceToAnnotationUsages(sourceFileNameS,localAnnotationUsages);
      }
    }
    public void associate(    final Set<Pair<ClassRepr,Set<StringCache.S>>> classes,    final Pair<Set<UsageRepr.Usage>,Set<UsageRepr.Usage>> usages,    final String sourceFileName){
      final StringCache.S sourceFileNameS=StringCache.get(sourceFileName);
      sourceFileToUsages.put(sourceFileNameS,usages.fst);
      sourceFileToAnnotationUsages.put(sourceFileNameS,usages.snd);
      for (      Pair<ClassRepr,Set<StringCache.S>> c : classes) {
        final ClassRepr r=c.fst;
        final Set<StringCache.S> s=c.snd;
        updateClassToSource(r.name,sourceFileNameS);
        classToSubclasses.put(r.name,s);
        sourceFileToClasses.put(sourceFileNameS,r);
      }
      for (      UsageRepr.Usage u : usages.fst) {
        updateDependency(sourceFileNameS,u.getOwner());
      }
      for (      UsageRepr.Usage u : usages.snd) {
        updateDependency(sourceFileNameS,u.getOwner());
      }
    }
    public void associateForm(    StringCache.S formName,    StringCache.S className){
      updateFormToClass(formName,className);
    }
  }
;
}
