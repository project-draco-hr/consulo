{
  return new Callbacks.Backend(){
    public Collection<StringCache.S> getClassFiles(){
      return classToSourceFile.keySet();
    }
    public void associate(    final String classFileName,    final Callbacks.SourceFileNameLookup sourceFileName,    final ClassReader cr){
      final StringCache.S classFileNameS=StringCache.get(project.getRelativePath(classFileName));
      final Pair<ClassRepr,Set<UsageRepr.Usage>> result=ClassfileAnalyzer.analyze(classFileNameS,cr);
      final ClassRepr repr=result.fst;
      final Set<UsageRepr.Usage> localUsages=result.snd;
      final StringCache.S sourceFileNameS=StringCache.get(project.getRelativePath(sourceFileName.get(repr == null ? null : repr.getSourceFileName().value)));
      for (      UsageRepr.Usage u : localUsages) {
        updateDependency(sourceFileNameS,u.getOwner());
      }
      if (repr != null) {
        updateClassToSource(repr.name,sourceFileNameS);
        updateSourceToClasses(sourceFileNameS,repr);
      }
      if (!localUsages.isEmpty()) {
        updateSourceToUsages(sourceFileNameS,localUsages);
      }
    }
    public void associate(    final Set<ClassRepr> classes,    final Set<UsageRepr.Usage> usages,    final String sourceFileName){
      final StringCache.S sourceFileNameS=StringCache.get(sourceFileName);
      sourceFileToClasses.put(sourceFileNameS,classes);
      sourceFileToUsages.put(sourceFileNameS,usages);
      for (      ClassRepr r : classes) {
        updateClassToSource(r.name,sourceFileNameS);
      }
      for (      UsageRepr.Usage u : usages) {
        updateDependency(sourceFileNameS,u.getOwner());
      }
    }
  }
;
}
