{
  boolean incremental=true;
  if (removed != null) {
    for (    StringCache.S file : removed) {
      final Set<StringCache.S> dependants=fileToFileDependency.get(file);
      if (dependants != null) {
        for (        StringCache.S d : dependants) {
          affectedFiles.add(d);
        }
      }
    }
  }
  for (  Map.Entry<StringCache.S,Set<ClassRepr>> e : delta.sourceFileToClasses.entrySet()) {
    final StringCache.S fileName=e.getKey();
    final Map<ClassRepr,ClassRepr> classes=new HashMap<ClassRepr,ClassRepr>();
    for (    ClassRepr cr : e.getValue()) {
      classes.put(cr,cr);
    }
    final Set<ClassRepr> pastClasses=sourceFileToClasses.get(fileName);
    final Set<StringCache.S> dependants=fileToFileDependency.get(fileName);
    if (pastClasses != null) {
      for (      ClassRepr past : pastClasses) {
        final ClassRepr present=classes.get(past);
        if (present != null) {
          if (present.differentiate(past)) {
            if (dependants != null)             for (            StringCache.S d : dependants) {
              affectedFiles.add(d);
            }
          }
 else {
            incremental=false;
          }
        }
      }
    }
  }
  return incremental;
}
