{
  super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
  final int modelColumn=myTable.convertColumnIndexToModel(column);
  this.setIconTextGap(0);
  PsiField field=myFields[row];
switch (modelColumn) {
case FIELD_COLUMN:
{
      Icon icon=IconDescriptorUpdaters.getIcon(field,Iconable.ICON_FLAG_VISIBILITY);
      MyTableRenderer.this.setIcon(icon);
      MyTableRenderer.this.setDisabledIcon(icon);
      configureColors(isSelected,table,hasFocus,row,column);
      break;
    }
case GETTER_COLUMN:
case SETTER_COLUMN:
{
    Icon methodIcon=IconUtil.getEmptyIcon(true);
    Icon overrideIcon=EmptyIcon.ICON_16;
    PsiMethod prototype=modelColumn == GETTER_COLUMN ? myGetterPrototypes[row] : mySetterPrototypes[row];
    if (prototype != null) {
      configureColors(isSelected,table,hasFocus,row,column);
      PsiMethod existing=myClass.findMethodBySignature(prototype,false);
      if (existing != null) {
        methodIcon=IconDescriptorUpdaters.getIcon(existing,Iconable.ICON_FLAG_VISIBILITY);
      }
      PsiMethod[] superMethods=prototype.findSuperMethods(myClass);
      if (superMethods.length > 0) {
        if (!superMethods[0].hasModifierProperty(PsiModifier.ABSTRACT)) {
          overrideIcon=AllIcons.General.OverridingMethod;
        }
 else {
          overrideIcon=AllIcons.General.ImplementingMethod;
        }
      }
    }
 else {
      MyTableRenderer.this.setForeground(JBColor.RED);
    }
    RowIcon icon=new RowIcon(2);
    icon.setIcon(methodIcon,0);
    icon.setIcon(overrideIcon,1);
    MyTableRenderer.this.setIcon(icon);
    MyTableRenderer.this.setDisabledIcon(icon);
    break;
  }
default :
{
  MyTableRenderer.this.setIcon(null);
  MyTableRenderer.this.setDisabledIcon(null);
}
}
boolean enabled=myCheckedMarks[row];
if (enabled) {
if (modelColumn == GETTER_COLUMN) {
enabled=myCbEncapsulateGet.isSelected();
}
 else if (modelColumn == SETTER_COLUMN) {
enabled=!myFinalMarks[row] && myCbEncapsulateSet.isSelected();
}
}
this.setEnabled(enabled);
return this;
}
