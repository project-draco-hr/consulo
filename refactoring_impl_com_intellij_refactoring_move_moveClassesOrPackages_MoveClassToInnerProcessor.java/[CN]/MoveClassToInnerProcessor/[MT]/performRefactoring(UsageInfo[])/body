{
  try {
    saveNonCodeUsages(usages);
    ChangeContextUtil.encodeContextInfo(myClassToMove,true);
    PsiClass newClass=(PsiClass)myTargetClass.addBefore(myClassToMove,myTargetClass.getRBrace());
    newClass.getModifierList().setModifierProperty(PsiModifier.STATIC,true);
    newClass=(PsiClass)ChangeContextUtil.decodeContextInfo(newClass,null,null);
    retargetClassRefs(myClassToMove,newClass);
    Map<PsiElement,PsiElement> oldToNewElementsMapping=new HashMap<PsiElement,PsiElement>();
    oldToNewElementsMapping.put(myClassToMove,newClass);
    myNonCodeUsages=MoveClassesOrPackagesProcessor.retargetUsages(usages,oldToNewElementsMapping);
    retargetNonCodeUsages(newClass);
    PsiManager.getInstance(myProject).getCodeStyleManager().removeRedundantImports((PsiJavaFile)newClass.getContainingFile());
    myClassToMove.delete();
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
