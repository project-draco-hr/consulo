{
  if (!prepareWritable(usages))   return;
  try {
    saveNonCodeUsages(usages);
    ChangeContextUtil.encodeContextInfo(myClassToMove,true);
    PsiClass newClass=(PsiClass)myTargetClass.addBefore(myClassToMove,myTargetClass.getRBrace());
    PsiUtil.setModifierProperty(newClass,PsiModifier.STATIC,true);
    newClass=(PsiClass)ChangeContextUtil.decodeContextInfo(newClass,null,null);
    retargetClassRefs(myClassToMove,newClass);
    final List<PsiElement> importStatements=new ArrayList<PsiElement>();
    if (!CodeStyleSettingsManager.getSettings(myProject).INSERT_INNER_CLASS_IMPORTS) {
      usages=filterUsagesInImportStatements(usages,importStatements);
    }
    Map<PsiElement,PsiElement> oldToNewElementsMapping=new HashMap<PsiElement,PsiElement>();
    oldToNewElementsMapping.put(myClassToMove,newClass);
    myNonCodeUsages=MoveClassesOrPackagesProcessor.retargetUsages(usages,oldToNewElementsMapping);
    retargetNonCodeUsages(newClass);
    JavaCodeStyleManager.getInstance(myProject).removeRedundantImports((PsiJavaFile)newClass.getContainingFile());
    myClassToMove.delete();
    for (    PsiElement element : importStatements) {
      if (element.isValid()) {
        element.delete();
      }
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
