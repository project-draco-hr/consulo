{
  attributes.method=(PsiMethod)child;
  attributes.name=attributes.method.getName();
  final PsiTypeElement returnTypeElement=attributes.method.getReturnTypeElement();
  if (returnTypeElement == null) {
    attributes.type="null";
  }
 else {
    attributes.type=returnTypeElement.getText();
  }
  attributes.modifierString=attributes.method.getModifierList().getText();
  attributes.modifiers=ModifierUtils.getModifierMask(attributes.modifierString);
  attributes.nParameters=attributes.method.getParameterList().getParameters().length;
  final PsiClass containingClass=attributes.method.getContainingClass();
  if (containingClass != null && containingClass.isInterface()) {
    attributes.modifiers|=Modifier.PUBLIC;
  }
  attributes.modifiers|=isCanonicalOrInterface(attributes.method,attributes);
  final SearchScope ss=psh.getUseScope(child);
  final Query<PsiMethod> query=OverridingMethodsSearch.search(attributes.method,ss,true);
  final PsiMethod method=query.findFirst();
  if (method != null) {
    final Collection<PsiMethod> overridersCollection=query.findAll();
    final PsiMethod[] overriders=overridersCollection.toArray(new PsiMethod[overridersCollection.size()]);
    LOG.debug("method " + attributes.method.toString() + " is overridden; has "+ overriders.length+ " overriding methods:");
    dumpMethodNames(overriders);
    if (attributes.method.getBody() == null) {
      attributes.modifiers|=ModifierConstants.IMPLEMENTED;
    }
 else {
      attributes.modifiers|=ModifierConstants.OVERRIDDEN;
    }
  }
  final PsiMethod[] superMethods=attributes.method.findSuperMethods(false);
  LOG.debug("method " + attributes.method.toString() + " has "+ superMethods.length+ " supermethods");
  dumpMethodNames(superMethods);
  if (superMethods.length > 0) {
    PsiMethod superMethod=superMethods[0];
    boolean abztract=superMethod.getModifierList().hasModifierProperty(PsiModifier.ABSTRACT);
    PsiClass superclass=superMethod.getContainingClass();
    if (abztract || (superclass != null && superclass.isInterface())) {
      attributes.modifiers|=ModifierConstants.IMPLEMENTING;
    }
 else {
      attributes.modifiers|=ModifierConstants.OVERRIDING;
    }
  }
  if (attributes.method.isConstructor()) {
    attributes.modifiers|=ModifierConstants.CONSTRUCTOR;
  }
 else   if ((attributes.modifiers & ModifierConstants.CANONICAL) == 0) {
    attributes.modifiers|=ModifierConstants.OTHER_METHOD;
  }
  LOG.debug("method " + attributes.name + " attributes: "+ ModifierConstants.toString(attributes.modifiers));
}
