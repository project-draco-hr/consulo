{
  PsiElement methodParent=method.getParent();
  LOG.debug("checking to see if " + method.getName() + " of "+ methodParent+ " is canonical");
  PsiMethod[] superMethods=method.findSuperMethods();
  LOG.debug("result of findSuperMethods for " + method.getName() + ": size="+ superMethods.length);
  for (  PsiMethod m : superMethods) {
    PsiElement parent=m.getParent();
    LOG.debug("supermethod " + m.getName() + " belongs to "+ parent);
    if (parent instanceof PsiClass) {
      final PsiClass psiClass=((PsiClass)parent);
      if (psiClass.isInterface()) {
        LOG.debug("method " + method.toString() + " implements interface");
        attributes.interfaceName=psiClass.getName();
      }
      PsiElement superclass=psiClass.getSuperClass();
      if (superclass == null) {
        LOG.debug("method " + method.toString() + " is canonical");
        return ModifierConstants.CANONICAL;
      }
 else {
        int result=isCanonicalOrInterface(m,attributes);
        if (result > 0) {
          LOG.debug("Returning result from canonical check as " + result);
          return result;
        }
      }
    }
  }
  return 0;
}
