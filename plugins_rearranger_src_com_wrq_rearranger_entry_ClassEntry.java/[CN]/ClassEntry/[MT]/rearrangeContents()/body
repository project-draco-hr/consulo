{
  buildMethodCallGraph();
  LOG.debug("identifying setters and extracted (related) methods");
  for (  ClassContentsEntry contentsEntry : getContents()) {
    if (contentsEntry instanceof IRelatableEntry) {
      ((IRelatableEntry)contentsEntry).determineSettersAndMethodCalls(settings,getContents());
    }
  }
  LOG.debug("relating extracted methods");
  for (  ClassContentsEntry contentsEntry : getContents()) {
    if (contentsEntry instanceof IRelatableEntry) {
      ((IRelatableEntry)contentsEntry).determineExtractedMethod(settings.getExtractedMethodsSettings());
    }
  }
  MethodEntry.eliminateCycles(getContents());
  MethodEntry.handleOverloadedMethods(getContents(),settings);
  final GenericRearranger classContentsRearranger=new GenericRearranger(settings.getItemOrderAttributeList(),contents,nestingLevel,settings){
    public void rearrangeRelatedItems(    List<ClassContentsEntry> entries,    List<RuleInstance> ruleInstanceList){
      for (      RuleInstance ruleInstance : ruleInstanceList) {
        ruleInstance.rearrangeRuleItems(entries,settings);
      }
    }
  }
;
  myResultRuleInstances=classContentsRearranger.rearrangeEntries();
}
