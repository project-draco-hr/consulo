{
  buildMethodCallGraph();
  LOG.debug("identifying setters and extracted (related) methods");
  for (  ClassContentsEntry contentsEntry : getContents()) {
    if (contentsEntry instanceof RelatableEntry) {
      ((RelatableEntry)contentsEntry).determineSettersAndMethodCalls(mySettings,getContents());
    }
  }
  LOG.debug("relating extracted methods");
  for (  ClassContentsEntry contentsEntry : getContents()) {
    if (contentsEntry instanceof RelatableEntry) {
      ((RelatableEntry)contentsEntry).determineExtractedMethod(mySettings.getExtractedMethodsSettings());
    }
  }
  MethodEntry.eliminateCycles(getContents());
  MethodEntry.handleOverloadedMethods(getContents(),mySettings);
  final GenericRearranger classContentsRearranger=new GenericRearranger(mySettings.getItemOrderAttributeList(),myContents,myNestingLevel,mySettings){
    public void rearrangeRelatedItems(    List<ClassContentsEntry> entries,    List<RuleInstance> ruleInstanceList){
      for (      RuleInstance ruleInstance : ruleInstanceList) {
        ruleInstance.rearrangeRuleItems(entries,mySettings);
      }
    }
  }
;
  myResultRuleInstances=classContentsRearranger.rearrangeEntries();
}
