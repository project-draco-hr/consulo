{
  final PsiSearchHelper psh=PsiSearchHelper.SERVICE.getInstance(project);
  int lastIndex=startingIndex;
  if (mySettings.isRearrangeInnerClasses() || myNestingLevel <= 1) {
    for (int i=startingIndex; i < psiClass.getChildren().length; i++) {
      PsiElement child=psiClass.getChildren()[i];
      if (child instanceof PsiJavaToken && child.getText().equals("{")) {
        lastIndex=i + 1;
      }
      LOG.debug(psiClass.toString() + " child " + i+ ":"+ child.toString());
      if (child instanceof PsiField || child instanceof PsiMethod || child instanceof PsiClass|| child instanceof PsiClassInitializer) {
        MemberAttributes attributes=new MemberAttributes();
        PsiElement startElement=psiClass.getChildren()[lastIndex];
        ClassContentsEntry classContentsEntry=null;
        if (child instanceof PsiField) {
          i=parseField(child,attributes,i,(PsiClass)psiClass);
          child=psiClass.getChildren()[i];
          classContentsEntry=new FieldEntry(startElement,child,attributes.modifiers,attributes.modifierString,attributes.name,attributes.type);
        }
        if (child instanceof PsiMethod) {
          parseMethod(child,attributes,psh);
          classContentsEntry=new MethodEntry(startElement,child,attributes.modifiers,attributes.modifierString,attributes.name,attributes.type,attributes.nParameters,attributes.interfaceName);
        }
        if (child instanceof PsiClass) {
          parseClassAttributes((PsiClass)child,attributes);
          PsiClass clazz=(PsiClass)child;
          PsiElement clazzEnd;
          int startElementIndex=0;
          if (clazz.isEnum()) {
            startElementIndex=findLastEnumTerminator(clazz);
            clazzEnd=clazz.getChildren()[startElementIndex];
            startElementIndex++;
          }
 else {
            clazzEnd=clazz.getLBrace();
            startElementIndex=Arrays.asList(clazz.getChildren()).indexOf(clazzEnd) + 1;
          }
          ClassEntry entry=new ClassEntry(startElement,clazzEnd,attributes.modifiers,attributes.modifierString,attributes.name,myNestingLevel + 1,mySettings);
          classContentsEntry=entry;
          entry.parseRemainingClassContents(project,startElementIndex,child);
        }
        if (child instanceof PsiClassInitializer) {
          parseClassInitializer(child,attributes);
          classContentsEntry=new ClassInitializerEntry(startElement,child,attributes.modifiers,attributes.modifierString,attributes.name);
        }
        myContents.add(classContentsEntry);
        classContentsEntry.checkForComment();
        lastIndex=i + 1;
      }
    }
  }
  if (lastIndex < psiClass.getChildren().length) {
    if (lastIndex < 0) {
      lastIndex=0;
    }
    final MiscellaneousTextEntry miscellaneousTextEntry=new MiscellaneousTextEntry(psiClass.getChildren()[lastIndex],psiClass.getChildren()[psiClass.getChildren().length - 1],false,true);
    myContents.add(miscellaneousTextEntry);
    miscellaneousTextEntry.checkForComment();
  }
}
