{
  int index=0;
  final PsiStatement enclosingStatement=PsiTreeUtil.getNonStrictParentOfType(place,PsiStatement.class);
  NextName:   while (true) {
    String name=baseName;
    if (index > 0) {
      name+=index;
    }
    index++;
    if (PsiUtil.isVariableNameUnique(name,place)) {
      if (lookForward) {
        final String name1=name;
        PsiElement scope=enclosingStatement;
        while (scope != null) {
class CancelException extends RuntimeException {
          }
          try {
            scope.accept(new PsiRecursiveElementVisitor(){
              public void visitVariable(              PsiVariable variable){
                if (name1.equals(variable.getName())) {
                  throw new CancelException();
                }
              }
            }
);
          }
 catch (          CancelException e) {
            continue NextName;
          }
          scope=scope.getNextSibling();
        }
      }
      return name;
    }
  }
}
