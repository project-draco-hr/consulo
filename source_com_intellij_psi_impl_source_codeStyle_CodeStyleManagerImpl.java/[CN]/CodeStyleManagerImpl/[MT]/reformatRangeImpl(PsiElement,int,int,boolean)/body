{
  CheckUtil.checkWritable(element);
  if (!SourceTreeToPsiMap.hasTreeElement(element))   return element;
  ASTNode treeElement=SourceTreeToPsiMap.psiElementToTree(element);
  if (treeElement instanceof CompositeElement) {
    ChameleonTransforming.transformChildren(treeElement,true);
  }
  FileType fileType=StdFileTypes.JAVA;
  PsiFile file=element.getContainingFile();
  if (file != null) {
    fileType=file.getFileType();
  }
  Helper helper=new Helper(fileType,myProject);
  final CodeFormatterFacade codeFormatter=new CodeFormatterFacade(getSettings(),helper);
  final PsiElement startElement=element.getContainingFile().findElementAt(startOffset);
  final PsiElement endElement=element.getContainingFile().findElementAt(endOffset);
  final PsiElement formatted=SourceTreeToPsiMap.treeElementToPsi(codeFormatter.processRange(treeElement,startOffset,endOffset));
  if (!canChangeWhiteSpacesOnly && startElement != null && endElement != null && startElement.isValid() && endElement.isValid()) {
    return new BraceEnforcer(getSettings()).process(formatted,startElement.getTextRange().getStartOffset(),endElement.getTextRange().getEndOffset());
  }
 else {
    return formatted;
  }
}
