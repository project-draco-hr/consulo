{
  final PsiImportList importList=file.getImportList();
  if (importList == null)   return;
  final PsiImportStatementBase[] imports=importList.getAllImportStatements();
  if (imports.length == 0)   return;
  Set<PsiImportStatementBase> allImports=new THashSet<PsiImportStatementBase>(Arrays.asList(imports));
  final Collection<PsiImportStatementBase> redundants;
  if (PsiUtil.isInJspFile(file)) {
    redundants=new THashSet<PsiImportStatementBase>(TObjectHashingStrategy.IDENTITY);
    redundants.addAll(Arrays.asList(imports));
    redundants.removeAll(allImports);
  }
 else {
    redundants=allImports;
    final PsiElement[] roots=file.getPsiRoots();
    for (    PsiElement root : roots) {
      root.accept(new PsiRecursiveElementVisitor(){
        public void visitReferenceElement(        PsiJavaCodeReferenceElement reference){
          if (!reference.isQualified()) {
            final JavaResolveResult resolveResult=reference.advancedResolve(false);
            final PsiElement resolveScope=resolveResult.getCurrentFileResolveScope();
            if (resolveScope instanceof PsiImportStatementBase) {
              final PsiImportStatementBase importStatementBase=(PsiImportStatementBase)resolveScope;
              redundants.remove(importStatementBase);
            }
          }
          super.visitReferenceElement(reference);
        }
      }
);
    }
  }
  for (  final PsiImportStatementBase importStatement : redundants) {
    final PsiJavaCodeReferenceElement ref=importStatement.getImportReference();
    if (ref == null || ref.resolve() == null) {
      continue;
    }
    importStatement.delete();
  }
}
