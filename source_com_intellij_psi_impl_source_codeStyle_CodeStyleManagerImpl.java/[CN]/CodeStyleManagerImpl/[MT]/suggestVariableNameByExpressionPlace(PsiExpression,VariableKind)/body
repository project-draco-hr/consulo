{
  if (expr.getParent() instanceof PsiExpressionList) {
    PsiExpressionList list=(PsiExpressionList)expr.getParent();
    PsiElement listParent=list.getParent();
    PsiMethod method=null;
    if (listParent instanceof PsiMethodCallExpression) {
      method=(PsiMethod)((PsiMethodCallExpression)listParent).getMethodExpression().resolve();
    }
 else {
      if (listParent instanceof PsiAnonymousClass) {
        listParent=listParent.getParent();
      }
      if (listParent instanceof PsiNewExpression) {
        method=((PsiNewExpression)listParent).resolveConstructor();
      }
    }
    if (method != null) {
      method=(PsiMethod)method.getNavigationElement();
      PsiExpression[] expressions=list.getExpressions();
      int index=-1;
      for (int i=0; i < expressions.length; i++) {
        if (expressions[i] == expr) {
          index=i;
          break;
        }
      }
      PsiParameter[] parms=method.getParameterList().getParameters();
      if (index < parms.length) {
        PsiIdentifier identifier=parms[index].getNameIdentifier();
        if (identifier != null) {
          String name=identifier.getText();
          if (name != null) {
            name=variableNameToPropertyName(name,VariableKind.PARAMETER);
            String[] names=getSuggestionsByName(name,variableKind,false);
            return new NamesByExprInfo(names,name);
          }
        }
      }
    }
  }
  return new NamesByExprInfo(ArrayUtil.EMPTY_STRING_ARRAY,null);
}
