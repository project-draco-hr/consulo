{
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      getProject().getComponent(PostprocessReformattingAspect.class).doPostponedFormatting();
      if (stripTrailingSpaces) {
        ((DocumentImpl)myEditor.getDocument()).stripTrailingSpaces();
      }
      PsiDocumentManager.getInstance(myProject).commitAllDocuments();
      String fullPath=getTestDataPath() + filePath;
      final VirtualFile vFile=LocalFileSystem.getInstance().findFileByPath(fullPath.replace(File.separatorChar,'/'));
      assertNotNull("Cannot find file " + fullPath,vFile);
      String ft=null;
      try {
        ft=VfsUtil.loadText(vFile);
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
      String fileText=StringUtil.convertLineSeparators(ft);
      Document document=EditorFactory.getInstance().createDocument(fileText);
      int caretIndex=fileText.indexOf(CARET_MARKER);
      int selStartIndex=fileText.indexOf(SELECTION_START_MARKER);
      int selEndIndex=fileText.indexOf(SELECTION_END_MARKER);
      final RangeMarker caretMarker=caretIndex >= 0 ? document.createRangeMarker(caretIndex,caretIndex) : null;
      final RangeMarker selStartMarker=selStartIndex >= 0 ? document.createRangeMarker(selStartIndex,selStartIndex) : null;
      final RangeMarker selEndMarker=selEndIndex >= 0 ? document.createRangeMarker(selEndIndex,selEndIndex) : null;
      if (caretMarker != null) {
        document.deleteString(caretMarker.getStartOffset(),caretMarker.getStartOffset() + CARET_MARKER.length());
      }
      if (selStartMarker != null) {
        document.deleteString(selStartMarker.getStartOffset(),selStartMarker.getStartOffset() + SELECTION_START_MARKER.length());
      }
      if (selEndMarker != null) {
        document.deleteString(selEndMarker.getStartOffset(),selEndMarker.getStartOffset() + SELECTION_END_MARKER.length());
      }
      String newFileText=document.getText();
      String newFileText1=newFileText;
      if (stripTrailingSpaces) {
        Document document1=EditorFactory.getInstance().createDocument(newFileText);
        ((DocumentImpl)document1).stripTrailingSpaces();
        newFileText1=document1.getText();
      }
      if (myEditor instanceof EditorWindow) {
        myEditor=((EditorWindow)myEditor).getDelegate();
        myFile=PsiDocumentManager.getInstance(getProject()).getPsiFile(myEditor.getDocument());
      }
      String text=myFile.getText();
      text=StringUtil.convertLineSeparators(text);
      assertEquals("Text mismatch in file " + filePath,newFileText1,text);
      if (caretMarker != null) {
        int caretLine=StringUtil.offsetToLineNumber(newFileText,caretMarker.getStartOffset());
        int caretCol=caretMarker.getStartOffset() - StringUtil.lineColToOffset(newFileText,caretLine,0);
        assertEquals("caretLine",caretLine + 1,myEditor.getCaretModel().getLogicalPosition().line + 1);
        assertEquals("caretColumn",caretCol + 1,myEditor.getCaretModel().getLogicalPosition().column + 1);
      }
      if (selStartMarker != null && selEndMarker != null) {
        int selStartLine=StringUtil.offsetToLineNumber(newFileText,selStartMarker.getStartOffset());
        int selStartCol=selStartMarker.getStartOffset() - StringUtil.lineColToOffset(newFileText,selStartLine,0);
        int selEndLine=StringUtil.offsetToLineNumber(newFileText,selEndMarker.getEndOffset());
        int selEndCol=selEndMarker.getEndOffset() - StringUtil.lineColToOffset(newFileText,selEndLine,0);
        assertEquals("selectionStartLine",selStartLine + 1,StringUtil.offsetToLineNumber(newFileText,myEditor.getSelectionModel().getSelectionStart()) + 1);
        assertEquals("selectionStartCol",selStartCol + 1,myEditor.getSelectionModel().getSelectionStart() - StringUtil.lineColToOffset(newFileText,selStartLine,0) + 1);
        assertEquals("selectionEndLine",selEndLine + 1,StringUtil.offsetToLineNumber(newFileText,myEditor.getSelectionModel().getSelectionEnd()) + 1);
        assertEquals("selectionEndCol",selEndCol + 1,myEditor.getSelectionModel().getSelectionEnd() - StringUtil.lineColToOffset(newFileText,selEndLine,0) + 1);
      }
 else {
        assertTrue("should has no selection, but was: (" + myEditor.getSelectionModel().getSelectionStart() + ", "+ myEditor.getSelectionModel().getSelectionEnd()+ ")",!myEditor.getSelectionModel().hasSelection());
      }
    }
  }
);
}
