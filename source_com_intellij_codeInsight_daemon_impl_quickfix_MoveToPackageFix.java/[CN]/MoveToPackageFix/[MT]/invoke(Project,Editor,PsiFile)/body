{
  if (!CodeInsightUtil.prepareFileForWrite(myFile))   return;
  try {
    String packageName=myTargetPackage.getQualifiedName();
    final PsiDirectory directory=PackageUtil.findOrCreateDirectoryForPackage(project,packageName,null,true);
    if (directory == null) {
      return;
    }
    final String error=RefactoringMessageUtil.checkCanCreateFile(directory,myFile.getName());
    if (error != null) {
      Messages.showMessageDialog(project,error,"Error",Messages.getErrorIcon());
      return;
    }
    new MoveClassesOrPackagesProcessor(project,new PsiElement[]{((PsiJavaFile)myFile).getClasses()[0]},new SingleSourceRootMoveDestination(PackageWrapper.create(directory.getPackage()),directory),false,false,false,null,new Runnable(){
      public void run(){
      }
    }
).run(null);
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
