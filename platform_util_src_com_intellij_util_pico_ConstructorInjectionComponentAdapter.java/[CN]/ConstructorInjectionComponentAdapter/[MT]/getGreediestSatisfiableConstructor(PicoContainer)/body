{
  final Set<Constructor> conflicts=new HashSet<Constructor>();
  final Set<List<Class>> unsatisfiableDependencyTypes=new HashSet<List<Class>>();
  List<Constructor> sortedMatchingConstructors=getSortedMatchingConstructors();
  Constructor greediestConstructor=null;
  int lastSatisfiableConstructorSize=-1;
  Class unsatisfiedDependencyType=null;
  for (  Constructor constructor : sortedMatchingConstructors) {
    boolean failedDependency=false;
    Class[] parameterTypes=constructor.getParameterTypes();
    Parameter[] currentParameters=parameters != null ? parameters : createDefaultParameters(parameterTypes);
    for (int j=0; j < currentParameters.length; j++) {
      if (currentParameters[j].isResolvable(container,this,parameterTypes[j])) {
        continue;
      }
      unsatisfiableDependencyTypes.add(Arrays.asList(parameterTypes));
      unsatisfiedDependencyType=parameterTypes[j];
      failedDependency=true;
      break;
    }
    if (greediestConstructor != null && parameterTypes.length != lastSatisfiableConstructorSize) {
      if (conflicts.isEmpty()) {
        return greediestConstructor;
      }
 else {
        conflicts.add(constructor);
      }
    }
 else     if (!failedDependency && lastSatisfiableConstructorSize == parameterTypes.length) {
      conflicts.add(constructor);
      conflicts.add(greediestConstructor);
    }
 else     if (!failedDependency) {
      greediestConstructor=constructor;
      lastSatisfiableConstructorSize=parameterTypes.length;
    }
  }
  if (!conflicts.isEmpty()) {
    throw new TooManySatisfiableConstructorsException(getComponentImplementation(),conflicts);
  }
 else   if (greediestConstructor == null && !unsatisfiableDependencyTypes.isEmpty()) {
    throw new UnsatisfiableDependenciesException(this,unsatisfiedDependencyType,unsatisfiableDependencyTypes,container);
  }
 else   if (greediestConstructor == null) {
    final Set<Constructor> nonMatching=ContainerUtil.newHashSet(getConstructors());
    throw new PicoInitializationException("Either do the specified parameters not match any of the following constructors: " + nonMatching.toString() + " or the constructors were not accessible for '"+ getComponentImplementation()+ "'");
  }
  return greediestConstructor;
}
