{
  if (!(element instanceof PsiPolyadicExpression)) {
    return false;
  }
  if (element instanceof PsiLiteralExpression || element instanceof PsiClassObjectAccessExpression) {
    return false;
  }
  final PsiPolyadicExpression expression=(PsiPolyadicExpression)element;
  final PsiType expressionType=expression.getType();
  if (expressionType == null || expressionType.equalsToText("java.lang.String")) {
    return false;
  }
  final PsiExpression[] operands=expression.getOperands();
  for (  PsiExpression operand : operands) {
    if (operand == null) {
      return false;
    }
    final PsiType type=operand.getType();
    if (type == null || type.equalsToText("java.lang.String")) {
      return false;
    }
  }
  if (!PsiUtil.isConstantExpression(expression)) {
    return false;
  }
  try {
    final Object value=ExpressionUtils.computeConstantExpression(expression,true);
    if (value == null) {
      return false;
    }
  }
 catch (  ConstantEvaluationOverflowException ignore) {
    return false;
  }
  final PsiElement parent=element.getParent();
  return !(parent instanceof PsiExpression) || !PsiUtil.isConstantExpression((PsiExpression)parent);
}
