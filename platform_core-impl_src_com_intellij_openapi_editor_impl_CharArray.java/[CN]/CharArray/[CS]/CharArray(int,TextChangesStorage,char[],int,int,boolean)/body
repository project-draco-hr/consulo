{
  myBufferSize=bufferSize;
  myDeferredChangesStorage.set(deferredChangesStorage);
  if (data == null) {
    myOriginalSequence="";
  }
 else {
    myArray=data;
    myCount=end - start;
  }
  if (start >= 0 && end >= 0) {
    myStart=start;
    myEnd=end;
  }
  myDebugDeferredProcessing=debugDeferredProcessing;
  if (myDebugDeferredProcessing) {
    myDebugArray=new CharArray(bufferSize,new TextChangesStorage(),data == null ? null : Arrays.copyOf(data,data.length),start,end,false){
      @NotNull @Override protected DocumentEvent beforeChangedUpdate(      DocumentImpl subj,      int offset,      CharSequence oldString,      CharSequence newString,      boolean wholeTextReplaced){
        return new DocumentEventImpl(subj,offset,oldString,newString,-1,wholeTextReplaced);
      }
      @Override protected void afterChangedUpdate(      @NotNull DocumentEvent event,      long newModificationStamp){
      }
    }
;
    myDebugDeferredChanges=new ArrayList<TextChangeImpl>();
  }
}
