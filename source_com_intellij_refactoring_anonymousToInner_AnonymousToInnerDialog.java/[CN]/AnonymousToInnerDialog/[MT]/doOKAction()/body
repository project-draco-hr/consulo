{
  String errorString=null;
  final String innerClassName=getClassName();
  final PsiManager manager=PsiManager.getInstance(myProject);
  if ("".equals(innerClassName)) {
    errorString=RefactoringBundle.message("anonymousToInner.no.inner.class.name");
  }
 else   if (!manager.getNameHelper().isIdentifier(innerClassName)) {
    errorString=RefactoringMessageUtil.getIncorrectIdentifierMessage(innerClassName);
  }
 else {
    PsiElement targetContainer=AnonymousToInnerHandler.findTargetContainer(myAnonClass);
    if (targetContainer instanceof PsiClass) {
      PsiClass targetClass=(PsiClass)targetContainer;
      PsiClass[] innerClasses=targetClass.getInnerClasses();
      for (      PsiClass innerClass : innerClasses) {
        if (innerClassName.equals(innerClass.getName())) {
          errorString=RefactoringBundle.message("inner.class.exists",innerClassName,targetClass.getName());
          break;
        }
      }
    }
 else {
      LOG.assertTrue(false);
    }
  }
  if (errorString != null) {
    CommonRefactoringUtil.showErrorMessage(AnonymousToInnerHandler.REFACTORING_NAME,errorString,HelpID.ANONYMOUS_TO_INNER,myProject);
    myNameField.requestFocusInWindow();
    return;
  }
  super.doOKAction();
  myNameField.requestFocusInWindow();
}
