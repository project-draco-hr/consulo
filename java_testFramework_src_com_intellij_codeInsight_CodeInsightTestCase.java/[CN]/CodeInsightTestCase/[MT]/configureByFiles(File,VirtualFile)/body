{
  myFile=null;
  myEditor=null;
  final File toDirIO=createTempDirectory();
  final VirtualFile toDir=getVirtualFile(toDirIO);
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      try {
        final ModuleRootManager rootManager=ModuleRootManager.getInstance(myModule);
        final ModifiableRootModel rootModel=rootManager.getModifiableModel();
        if (clearModelBeforeConfiguring()) {
          rootModel.clear();
        }
        VirtualFile[] reversed=ArrayUtil.reverseArray(vFiles);
        final LinkedHashMap<VirtualFile,EditorInfo> editorInfos;
        if (rawProjectRoot != null) {
          final File projectRoot=rawProjectRoot.getCanonicalFile();
          FileUtil.copyDir(projectRoot,toDirIO);
          VirtualFile fromDir=getVirtualFile(projectRoot);
          editorInfos=copyFilesFillingEditorInfos(fromDir,toDir,ContainerUtil.map2Array(reversed,String.class,new Function<VirtualFile,String>(){
            @Override public String fun(            final VirtualFile s){
              return s.getPath().substring(projectRoot.getPath().length());
            }
          }
));
          toDir.refresh(false,true);
        }
 else {
          editorInfos=new LinkedHashMap<VirtualFile,EditorInfo>();
          for (          final VirtualFile vFile : reversed) {
            editorInfos.putAll(copyFilesFillingEditorInfos(vFile.getParent(),toDir,vFile.getName()));
          }
        }
        boolean sourceRootAdded=false;
        if (isAddDirToContentRoot()) {
          final ContentEntry contentEntry=rootModel.addContentEntry(toDir);
          if (isAddDirToSource()) {
            sourceRootAdded=true;
            contentEntry.addSourceFolder(toDir,false);
          }
        }
        doCommitModel(rootModel);
        if (sourceRootAdded) {
          sourceRootAdded(toDir);
        }
        openEditorsAndActivateLast(editorInfos);
      }
 catch (      IOException e) {
        LOG.error(e);
      }
    }
  }
);
  return toDir;
}
