{
  final PsiType declaredType=parameter.getType();
  final LanguageLevel level=PsiUtil.getLanguageLevel(parameter);
  if (level.isAtLeast(LanguageLevel.JDK_1_7)) {
    if (isCatchParameterEffectivelyFinal(parameter,getCatchBlock())) {
      final PsiCodeBlock tryBlock=getTryStatement().getTryBlock();
      if (tryBlock != null) {
        final List<PsiClassType> thrownTypes=ExceptionUtil.getThrownExceptions(tryBlock);
        final PsiParameter[] parameters=getTryStatement().getCatchBlockParameters();
        final List<PsiType> uncaughtTypes=ContainerUtil.mapNotNull(thrownTypes,new NullableFunction<PsiClassType,PsiType>(){
          @Override public PsiType fun(          final PsiClassType thrownType){
            for (int i=0; i < parameters.length && parameters[i] != parameter && thrownTypes.size() > 0; i++) {
              final PsiType catchType=parameters[i].getType();
              if (catchType.isAssignableFrom(thrownType))               return null;
            }
            return thrownType;
          }
        }
);
        boolean passed=true;
        for (        PsiType type : uncaughtTypes) {
          if (!declaredType.isAssignableFrom(type)) {
            passed=false;
            break;
          }
        }
        if (passed)         return uncaughtTypes;
      }
    }
  }
  return Arrays.asList(declaredType);
}
