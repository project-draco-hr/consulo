{
  final ArrayList<HighlightInfo> list=new ArrayList<HighlightInfo>(infos);
  Collections.sort(list,new Comparator<HighlightInfo>(){
    public int compare(    HighlightInfo o1,    HighlightInfo o2){
      return o2.startOffset - o1.startOffset;
    }
  }
);
  StringBuilder sb=new StringBuilder();
  try {
    int end=text.length();
    for (    HighlightInfo info : list) {
      for (      Map.Entry<String,ExpectedHighlightingSet> entry : highlightingTypes.entrySet()) {
        final ExpectedHighlightingSet set=entry.getValue();
        if (set.enabled && set.severity == info.getSeverity() && set.endOfLine == info.isAfterEndOfLine) {
          final String severity=entry.getKey();
          sb.insert(0,text.substring(info.endOffset,end));
          sb.insert(0,"<" + severity + " descr=\""+ info.description+ "\">"+ text.substring(info.startOffset,info.endOffset)+ "</"+ severity+ ">");
          end=info.startOffset;
          break;
        }
      }
    }
    sb.insert(0,text.substring(0,end));
  }
 catch (  IndexOutOfBoundsException e) {
    sb.insert(0,e.getMessage());
  }
  Assert.assertEquals(failMessage + "\n",myText,sb.toString());
  Assert.fail(failMessage);
}
