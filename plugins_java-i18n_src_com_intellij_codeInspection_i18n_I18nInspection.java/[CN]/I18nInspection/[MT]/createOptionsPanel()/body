{
  final GridBagLayout layout=new GridBagLayout();
  final JPanel panel=new JPanel(layout);
  final JCheckBox assertStatementsCheckbox=new JCheckBox(CodeInsightBundle.message("inspection.i18n.option.ignore.assert"),ignoreForAssertStatements);
  assertStatementsCheckbox.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      ignoreForAssertStatements=assertStatementsCheckbox.isSelected();
    }
  }
);
  final JCheckBox exceptionConstructorCheck=new JCheckBox(CodeInsightBundle.message("inspection.i18n.option.ignore.for.exception.constructor.arguments"),ignoreForExceptionConstructors);
  exceptionConstructorCheck.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      ignoreForExceptionConstructors=exceptionConstructorCheck.isSelected();
    }
  }
);
  final JTextField specifiedExceptions=new JTextField(ignoreForSpecifiedExceptionConstructors);
  specifiedExceptions.getDocument().addDocumentListener(new DocumentAdapter(){
    @Override protected void textChanged(    DocumentEvent e){
      ignoreForSpecifiedExceptionConstructors=specifiedExceptions.getText();
    }
  }
);
  final JCheckBox junitAssertCheckbox=new JCheckBox(CodeInsightBundle.message("inspection.i18n.option.ignore.for.junit.assert.arguments"),ignoreForJUnitAsserts);
  junitAssertCheckbox.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      ignoreForJUnitAsserts=junitAssertCheckbox.isSelected();
    }
  }
);
  final JCheckBox classRef=new JCheckBox(CodeInsightBundle.message("inspection.i18n.option.ignore.qualified.class.names"),ignoreForClassReferences);
  classRef.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      ignoreForClassReferences=classRef.isSelected();
    }
  }
);
  final JCheckBox propertyRef=new JCheckBox(CodeInsightBundle.message("inspection.i18n.option.ignore.property.keys"),ignoreForPropertyKeyReferences);
  propertyRef.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      ignoreForPropertyKeyReferences=propertyRef.isSelected();
    }
  }
);
  final JCheckBox nonAlpha=new JCheckBox(CodeInsightBundle.message("inspection.i18n.option.ignore.nonalphanumerics"),ignoreForNonAlpha);
  nonAlpha.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      ignoreForNonAlpha=nonAlpha.isSelected();
    }
  }
);
  final JCheckBox assignedToConstants=new JCheckBox(CodeInsightBundle.message("inspection.i18n.option.ignore.assigned.to.constants"),ignoreAssignedToConstants);
  assignedToConstants.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      ignoreAssignedToConstants=assignedToConstants.isSelected();
    }
  }
);
  final JCheckBox chkToString=new JCheckBox(CodeInsightBundle.message("inspection.i18n.option.ignore.tostring"),ignoreToString);
  chkToString.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      ignoreToString=chkToString.isSelected();
    }
  }
);
  final JCheckBox ignoreEnumConstants=new JCheckBox("Ignore enum constants",ignoreForEnumConstants);
  ignoreEnumConstants.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      ignoreForEnumConstants=ignoreEnumConstants.isSelected();
    }
  }
);
  final GridBagConstraints gc=new GridBagConstraints();
  gc.fill=GridBagConstraints.HORIZONTAL;
  gc.insets.bottom=2;
  gc.gridx=GridBagConstraints.REMAINDER;
  gc.gridy=0;
  gc.weightx=1;
  gc.weighty=0;
  panel.add(assertStatementsCheckbox,gc);
  gc.gridy++;
  panel.add(junitAssertCheckbox,gc);
  gc.gridy++;
  panel.add(exceptionConstructorCheck,gc);
  gc.gridy++;
  final Project[] openProjects=ProjectManager.getInstance().getOpenProjects();
  panel.add(new FieldPanel(specifiedExceptions,null,CodeInsightBundle.message("inspection.i18n.option.ignore.for.specified.exception.constructor.arguments"),openProjects.length == 0 ? null : new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      createIgnoreExceptionsConfigurationDialog(openProjects[0],specifiedExceptions).show();
    }
  }
,null),gc);
  gc.gridy++;
  panel.add(classRef,gc);
  gc.gridy++;
  panel.add(propertyRef,gc);
  gc.gridy++;
  panel.add(assignedToConstants,gc);
  gc.gridy++;
  panel.add(chkToString,gc);
  gc.gridy++;
  panel.add(nonAlpha,gc);
  gc.gridy++;
  panel.add(ignoreEnumConstants,gc);
  gc.gridy++;
  gc.anchor=GridBagConstraints.NORTHWEST;
  gc.weighty=1;
  final JTextField text=new JTextField(nonNlsCommentPattern);
  final FieldPanel nonNlsCommentPatternComponent=new FieldPanel(text,CodeInsightBundle.message("inspection.i18n.option.ignore.comment.pattern"),CodeInsightBundle.message("inspection.i18n.option.ignore.comment.title"),null,new Runnable(){
    @Override public void run(){
      nonNlsCommentPattern=text.getText();
      cacheNonNlsCommentPattern();
    }
  }
);
  panel.add(nonNlsCommentPatternComponent,gc);
  final JScrollPane scrollPane=ScrollPaneFactory.createScrollPane(panel);
  scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
  scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
  scrollPane.setBorder(null);
  scrollPane.setPreferredSize(new Dimension(panel.getPreferredSize().width + scrollPane.getVerticalScrollBar().getPreferredSize().width,panel.getPreferredSize().height + scrollPane.getHorizontalScrollBar().getPreferredSize().height));
  return scrollPane;
}
