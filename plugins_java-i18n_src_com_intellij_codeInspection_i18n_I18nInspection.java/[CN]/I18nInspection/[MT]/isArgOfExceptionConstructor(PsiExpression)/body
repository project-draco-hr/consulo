{
  final PsiElement parent=PsiTreeUtil.getParentOfType(expression,PsiExpressionList.class,PsiClass.class);
  if (!(parent instanceof PsiExpressionList)) {
    return false;
  }
  final PsiElement grandparent=parent.getParent();
  final PsiClass aClass;
  if (RefactoringChangeUtil.isSuperOrThisMethodCall(grandparent)) {
    final PsiMethod method=((PsiMethodCallExpression)grandparent).resolveMethod();
    if (method != null) {
      aClass=method.getContainingClass();
    }
 else {
      return false;
    }
  }
 else {
    if (!(grandparent instanceof PsiNewExpression)) {
      return false;
    }
    final PsiJavaCodeReferenceElement reference=((PsiNewExpression)grandparent).getClassReference();
    if (reference == null) {
      return false;
    }
    final PsiElement referent=reference.resolve();
    if (!(referent instanceof PsiClass)) {
      return false;
    }
    aClass=(PsiClass)referent;
  }
  final Project project=expression.getProject();
  final GlobalSearchScope scope=GlobalSearchScope.allScope(project);
  final PsiClass throwable=JavaPsiFacade.getInstance(project).findClass(CommonClassNames.JAVA_LANG_THROWABLE,scope);
  return throwable != null && aClass.isInheritor(throwable,true);
}
