{
  final PsiElement parent=expression.getParent();
  if (!(parent instanceof PsiExpressionList)) {
    return false;
  }
  final PsiElement grandparent=parent.getParent();
  if (!(grandparent instanceof PsiMethodCallExpression)) {
    return false;
  }
  final PsiMethodCallExpression call=(PsiMethodCallExpression)grandparent;
  final PsiReferenceExpression methodExpression=call.getMethodExpression();
  @NonNls final String methodName=methodExpression.getReferenceName();
  if (methodName == null) {
    return false;
  }
  if (!methodName.startsWith("assert") && !methodName.equals("fail")) {
    return false;
  }
  final PsiMethod method=call.resolveMethod();
  if (method == null) {
    return false;
  }
  final PsiClass containingClass=method.getContainingClass();
  if (containingClass == null) {
    return false;
  }
  final Project project=expression.getProject();
  final GlobalSearchScope scope=GlobalSearchScope.allScope(project);
  final PsiClass junitAssert=JavaPsiFacade.getInstance(project).findClass("junit.framework.Assert",scope);
  return junitAssert != null && !containingClass.isInheritor(junitAssert,true);
}
