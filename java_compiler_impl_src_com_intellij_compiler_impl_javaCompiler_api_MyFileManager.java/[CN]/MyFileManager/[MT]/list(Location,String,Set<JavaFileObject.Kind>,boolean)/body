{
  if (recurse) {
    return super.list(location,packageName,kinds,recurse);
  }
  Iterable<? extends File> path=getLocation(location);
  if (path == null)   return Collections.emptyList();
  String subdirectory=packageName.replace('.','/');
  List<JavaFileObject> results=null;
  for (  File directory : path) {
    VirtualFile dir=LocalFileSystem.getInstance().findFileByIoFile(directory);
    if (dir == null)     continue;
    if (!dir.isDirectory()) {
      dir=JarFileSystem.getInstance().getJarRootForLocalFile(dir);
      if (dir == null)       continue;
    }
    VirtualFile virtualFile=StringUtil.isEmptyOrSpaces(subdirectory) ? dir : dir.findFileByRelativePath(subdirectory);
    if (virtualFile == null)     continue;
    if (!virtualFile.isDirectory())     continue;
    for (    VirtualFile child : virtualFile.getChildren()) {
      JavaFileObject.Kind kind=getKind("." + child.getExtension());
      if (kinds.contains(kind)) {
        if (results == null)         results=new SmartList<JavaFileObject>();
        if (kind == JavaFileObject.Kind.SOURCE && child.getFileSystem() instanceof JarFileSystem)         continue;
        results.add(new JavaVirtualFile(child,kind));
      }
    }
  }
  List<JavaFileObject> ret=results == null ? Collections.<JavaFileObject>emptyList() : results;
  return ret;
}
