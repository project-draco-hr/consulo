{
  PsiDocumentManager.getInstance(myProject).commitAllDocuments();
  final PsiClass[][] result=new PsiClass[1][];
  ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
    public void run(){
      final PsiClass psiClass=myMethod.getContainingClass();
      if (!psiClass.isValid())       return;
      result[0]=getClassImplementations(psiClass);
    }
  }
,CodeInsightBundle.message("intention.implement.abstract.method.searching.for.descendants.progress"),true,myProject);
  if (result[0] == null)   return;
  if (result[0].length == 0) {
    Messages.showMessageDialog(myProject,CodeInsightBundle.message("intention.implement.abstract.method.error.no.classes.message"),CodeInsightBundle.message("intention.implement.abstract.method.error.no.classes.title"),Messages.getInformationIcon());
    return;
  }
  if (result[0].length == 1) {
    implementInClass(result[0][0]);
    return;
  }
  PsiClassListCellRenderer renderer=new PsiClassListCellRenderer();
  Arrays.sort(result[0],renderer.getComparator());
  myList=new JList(result[0]);
  myList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myList.setCellRenderer(renderer);
  renderer.installSpeedSearch(myList);
  final Runnable runnable=new Runnable(){
    public void run(){
      int index=myList.getSelectedIndex();
      if (index < 0)       return;
      PsiElement element=(PsiElement)myList.getSelectedValue();
      implementInClass((PsiClass)element);
    }
  }
;
  JBPopupFactory.getInstance().createListPopupBuilder().setList(myList).setTitle(CodeInsightBundle.message("intention.implement.abstract.method.class.chooser.title")).setItemChoosenCallback(runnable).createPopup().showInBestPositionFor(myEditor);
}
