{
  if (type instanceof PsiWildcardType) {
    final PsiWildcardType wildcard=(PsiWildcardType)type;
    final PsiType var=myTypeVariableFactory.create();
    final PsiType bound=wildcard.getBound();
    if (bound != null) {
      if (wildcard.isExtends()) {
        system.addSubtypeConstraint(Util.banalize(definedSubst.substitute(replaceWildCards(bound,system,definedSubst))),var);
      }
 else {
        system.addSubtypeConstraint(var,Util.banalize(definedSubst.substitute(replaceWildCards(bound,system,definedSubst))));
      }
    }
    return var;
  }
 else   if (type instanceof PsiClassType) {
    final PsiClassType.ClassResolveResult result=Util.resolveType(type);
    final PsiClass aClass=result.getElement();
    final PsiSubstitutor aSubst=result.getSubstitutor();
    if (aClass != null) {
      PsiSubstitutor theSubst=PsiSubstitutor.EMPTY;
      for (      final PsiTypeParameter p : aSubst.getSubstitutionMap().keySet()) {
        theSubst=theSubst.put(p,replaceWildCards(aSubst.substitute(p),system,definedSubst));
      }
      return aClass.getManager().getElementFactory().createType(aClass,theSubst);
    }
  }
  return type;
}
