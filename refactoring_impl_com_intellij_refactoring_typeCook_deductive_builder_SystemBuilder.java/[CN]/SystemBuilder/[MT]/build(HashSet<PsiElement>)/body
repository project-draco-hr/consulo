{
  final PsiSearchHelper helper=myManager.getSearchHelper();
  ReductionSystem system=new ReductionSystem(myProject,victims,myTypes,myTypeVariableFactory,mySettings);
  for (  final PsiElement element : victims) {
    if (element instanceof PsiParameter) {
      if (!verifyMethod(element,victims,helper)) {
        continue;
      }
    }
 else     if (element instanceof PsiMethod) {
      if (!verifyMethod(element,victims,helper)) {
        continue;
      }
    }
  }
  for (  final PsiElement element : victims) {
    PsiType definedType;
    if (element instanceof PsiParameter) {
      final PsiParameter p=myParameters.get(element);
      if (p != null) {
        setType(element,definedType=defineType(p));
      }
 else {
        continue;
      }
    }
 else     if (element instanceof PsiMethod) {
      final PsiMethod m=myMethods.get(element);
      if (m != null) {
        system.addSubtypeConstraint(defineType(element),definedType=defineType(m));
      }
 else {
        continue;
      }
    }
 else {
      definedType=defineType(element);
    }
    addBoundConstraints(system,definedType,element);
  }
  for (  final PsiElement element : victims) {
    if (element instanceof PsiParameter) {
      final PsiParameter p=myParameters.get(element);
      if (p == null)       continue;
    }
 else     if (element instanceof PsiMethod) {
      final PsiMethod m=myMethods.get(element);
      if (m == null)       continue;
    }
    addUsage(system,element);
    if (!(element instanceof PsiExpression)) {
      final PsiReference[] refs=helper.findReferences(element,getScope(helper,element),true);
      for (      PsiReference ref : refs) {
        final PsiElement elt=ref.getElement();
        if (elt != null) {
          addUsage(system,elt);
        }
      }
    }
  }
  return system;
}
