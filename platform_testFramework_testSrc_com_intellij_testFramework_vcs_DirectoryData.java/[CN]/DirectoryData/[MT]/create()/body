{
  final Runnable runnable=new Runnable(){
    @Override public void run(){
      try {
        final List<VirtualFile> currentLevel=new ArrayList<VirtualFile>();
        final List<VirtualFile> nextLevel=new ArrayList<VirtualFile>();
        currentLevel.add(myBase);
        for (int i=0; i < myLevels; i++) {
          for (          VirtualFile file : currentLevel) {
            String numberInRow;
            String prefix;
            if (i == 0) {
              prefix="L";
              numberInRow="0";
            }
 else {
              prefix=file.getName();
              final int endIndex=prefix.indexOf("N");
              numberInRow=prefix.substring(endIndex + 1);
              prefix=prefix.substring(1,endIndex);
            }
            final boolean last=i == (myLevels - 1);
            if (!last) {
              final String dirPrefix="D" + prefix;
              for (int j=0; j < myItemsInLevel; j++) {
                nextLevel.add(file.createChildDirectory(this,dirPrefix + numberInRow + "N"+ j));
              }
            }
            final String filePrefix="F" + prefix;
            for (int j=0; j < myItemsInLevel; j++) {
              file.createChildData(this,filePrefix + numberInRow + "N"+ j+ myFilesExtension);
            }
          }
          currentLevel.clear();
          currentLevel.addAll(nextLevel);
          nextLevel.clear();
        }
      }
 catch (      IOException e) {
        myException=e;
      }
    }
  }
;
  UIUtil.invokeAndWaitIfNeeded(new Runnable(){
    @Override public void run(){
      ApplicationManager.getApplication().runWriteAction(runnable);
    }
  }
);
  if (myException != null)   throw myException;
}
