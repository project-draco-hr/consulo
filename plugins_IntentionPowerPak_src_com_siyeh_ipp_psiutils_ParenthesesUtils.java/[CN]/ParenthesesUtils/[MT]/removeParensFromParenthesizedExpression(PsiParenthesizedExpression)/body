{
  PsiExpression body=parenthesizedExpression.getExpression();
  while (body instanceof PsiParenthesizedExpression) {
    final PsiParenthesizedExpression innerParenthesizedExpression=(PsiParenthesizedExpression)body;
    body=innerParenthesizedExpression.getExpression();
  }
  if (body == null) {
    parenthesizedExpression.delete();
    return;
  }
  final PsiElement parent=parenthesizedExpression.getParent();
  if (!(parent instanceof PsiExpression)) {
    final PsiExpression newExpression=(PsiExpression)parenthesizedExpression.replace(body);
    removeParentheses(newExpression);
    return;
  }
  final PsiExpression parentExpression=(PsiExpression)parent;
  final int parentPrecedence=getPrecedence(parentExpression);
  final int childPrecedence=getPrecedence(body);
  if (parentPrecedence < childPrecedence) {
    final PsiElement bodyParent=body.getParent();
    final PsiParenthesizedExpression newParenthesizedExpression=(PsiParenthesizedExpression)parenthesizedExpression.replace(bodyParent);
    final PsiExpression expression=newParenthesizedExpression.getExpression();
    if (expression != null) {
      removeParentheses(expression);
    }
  }
 else   if (parentPrecedence == childPrecedence) {
    if (parentExpression instanceof PsiBinaryExpression && body instanceof PsiBinaryExpression) {
      final PsiBinaryExpression parentBinaryExpression=(PsiBinaryExpression)parentExpression;
      final IElementType parentOperator=parentBinaryExpression.getOperationTokenType();
      final PsiBinaryExpression bodyBinaryExpression=(PsiBinaryExpression)body;
      final IElementType bodyOperator=bodyBinaryExpression.getOperationTokenType();
      final PsiType parentType=parentBinaryExpression.getType();
      final PsiType bodyType=body.getType();
      if (parentType != null && parentType.equals(bodyType) && parentOperator.equals(bodyOperator)) {
        final PsiExpression rhs=parentBinaryExpression.getROperand();
        if (!PsiTreeUtil.isAncestor(rhs,body,true) || isCommutativeBinaryOperator(bodyOperator)) {
          final PsiExpression newExpression=(PsiExpression)parent.addAfter(body,parenthesizedExpression);
          parenthesizedExpression.delete();
          removeParentheses(newExpression);
          return;
        }
      }
      final PsiExpression newExpression=(PsiExpression)parenthesizedExpression.replace(body);
      removeParentheses(newExpression);
    }
 else {
      final PsiExpression newExpression=(PsiExpression)parenthesizedExpression.replace(body);
      removeParentheses(newExpression);
    }
  }
 else {
    final PsiExpression newExpression=(PsiExpression)parenthesizedExpression.replace(body);
    removeParentheses(newExpression);
  }
}
