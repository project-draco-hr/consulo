{
  PsiExpression body=parenthesizedExpression.getExpression();
  while (body instanceof PsiParenthesizedExpression) {
    final PsiParenthesizedExpression innerParenthesizedExpression=(PsiParenthesizedExpression)body;
    body=innerParenthesizedExpression.getExpression();
  }
  if (!(parenthesizedExpression.getParent() instanceof PsiExpression)) {
    return removeParentheses(body);
  }
  final PsiExpression parentExpression=(PsiExpression)parenthesizedExpression.getParent();
  final int parentPrecedence=getPrecedence(parentExpression);
  final int childPrecedence=getPrecedence(body);
  if (parentPrecedence < childPrecedence) {
    return '(' + removeParentheses(body) + ')';
  }
 else   if (parentPrecedence == childPrecedence) {
    if (parentExpression instanceof PsiBinaryExpression && body instanceof PsiBinaryExpression) {
      final PsiBinaryExpression parentBinaryExpression=(PsiBinaryExpression)parentExpression;
      final PsiJavaToken parentBinaryOperationSign=parentBinaryExpression.getOperationSign();
      final IElementType parentOperator=parentBinaryOperationSign.getTokenType();
      final PsiBinaryExpression bodyBinaryExpression=(PsiBinaryExpression)body;
      final PsiJavaToken bodyBinaryOperationSign=bodyBinaryExpression.getOperationSign();
      final IElementType bodyOperator=bodyBinaryOperationSign.getTokenType();
      final PsiType parentType=parentBinaryExpression.getType();
      final PsiType bodyType=body.getType();
      if (parentType != null && parentType.equals(bodyType) && parentOperator.equals(bodyOperator)) {
        final PsiExpression rhs=parentBinaryExpression.getROperand();
        if (!PsiTreeUtil.isAncestor(rhs,body,true) || isCommutativeBinaryOperator(bodyOperator)) {
          return removeParentheses(body);
        }
      }
      return '(' + removeParentheses(body) + ')';
    }
 else {
      return removeParentheses(body);
    }
  }
 else {
    return removeParentheses(body);
  }
}
