{
  final PsiSwitchStatement switchStatement=(PsiSwitchStatement)element;
  final PsiCodeBlock body=switchStatement.getBody();
  if (body == null) {
    return;
  }
  final PsiExpression switchExpression=switchStatement.getExpression();
  if (switchExpression == null) {
    return;
  }
  final PsiClassType switchType=(PsiClassType)switchExpression.getType();
  if (switchType == null) {
    return;
  }
  final PsiClass enumClass=switchType.resolve();
  if (enumClass == null) {
    return;
  }
  final PsiField[] fields=enumClass.getFields();
  final List<String> missingEnumElements=new ArrayList<String>(fields.length);
  for (  final PsiField field : fields) {
    if (field instanceof PsiEnumConstant) {
      missingEnumElements.add(field.getName());
    }
  }
  final PsiStatement[] statements=body.getStatements();
  for (  final PsiStatement statement : statements) {
    if (!(statement instanceof PsiSwitchLabelStatement)) {
      continue;
    }
    final PsiSwitchLabelStatement labelStatement=(PsiSwitchLabelStatement)statement;
    final PsiExpression value=labelStatement.getCaseValue();
    if (!(value instanceof PsiReferenceExpression)) {
      continue;
    }
    final PsiReferenceExpression reference=(PsiReferenceExpression)value;
    final PsiElement resolved=reference.resolve();
    if (!(resolved instanceof PsiEnumConstant)) {
      continue;
    }
    final PsiEnumConstant enumConstant=(PsiEnumConstant)resolved;
    missingEnumElements.remove(enumConstant.getName());
  }
  @NonNls final StringBuilder buffer=new StringBuilder();
  buffer.append("switch(");
  buffer.append(switchExpression.getText());
  buffer.append("){");
  final PsiElement[] children=body.getChildren();
  for (int i=1; i < children.length - 1; i++) {
    buffer.append(children[i].getText());
  }
  for (  String missingEnumElement : missingEnumElements) {
    buffer.append("case ");
    buffer.append(missingEnumElement);
    buffer.append(": break;");
  }
  buffer.append('}');
  final String newStatement=buffer.toString();
  replaceStatement(newStatement,switchStatement);
}
