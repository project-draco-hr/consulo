{
  final Project project=context.getProject();
  final CompilerManager configuration=CompilerManager.getInstance(project);
  final boolean _forceCompile=forceCompile || isRebuild;
synchronized (myDataLock) {
    if (_forceCompile) {
      if (ourDebugMode) {
        System.out.println("Analysing potentially recompilable files for " + compiler.getDescription());
      }
      while (scopeSrcIterator.hasNext()) {
        final VirtualFile file=scopeSrcIterator.next();
        if (!file.isValid()) {
          if (LOG.isDebugEnabled() || ourDebugMode) {
            LOG.debug("Skipping invalid file " + file.getPresentableUrl());
            if (ourDebugMode) {
              System.out.println("\t SKIPPED(INVALID) " + file.getPresentableUrl());
            }
          }
          continue;
        }
        if (_forceCompile) {
          if (compiler.isCompilableFile(file,context) && !configuration.isExcludedFromCompilation(file)) {
            toCompile.add(file);
            if (ourDebugMode) {
              System.out.println("\t INCLUDED " + file.getPresentableUrl());
            }
          }
 else {
            if (ourDebugMode) {
              System.out.println("\t NOT COMPILABLE OR EXCLUDED " + file.getPresentableUrl());
            }
          }
        }
 else         if (compiler.isCompilableFile(file,context) && !configuration.isExcludedFromCompilation(file)) {
          toCompile.add(file);
          if (ourDebugMode) {
            System.out.println("\t INCLUDED " + file.getPresentableUrl());
          }
        }
 else {
          if (ourDebugMode) {
            System.out.println("\t NOT COMPILABLE OR EXCLUDED " + file.getPresentableUrl());
          }
        }
      }
    }
  }
}
