{
  myProject=project;
  myChangeListManager=changeListManager;
  myEditorNotifications=editorNotifications;
  myDocumentManager=FileDocumentManager.getInstance();
  myFileStatusManager=fileStatusManager;
  myCheckSetLock=new Object();
  myCheckSet=new HashSet<VirtualFile>();
  final Application application=ApplicationManager.getApplication();
  final ZipperUpdater zipperUpdater=new ZipperUpdater(300,Alarm.ThreadToUse.SHARED_THREAD,myProject);
  final Runnable runnable=new Runnable(){
    @Override public void run(){
      if (application.isDisposed() || myProject.isDisposed() || !myProject.isOpen())       return;
      final Set<VirtualFile> localSet;
synchronized (myCheckSetLock) {
        localSet=new HashSet<VirtualFile>();
        localSet.addAll(myCheckSet);
        myCheckSet.clear();
      }
      checkFiles(localSet);
    }
  }
;
  myDocumentListener=new DocumentAdapter(){
    @Override public void documentChanged(    DocumentEvent e){
      if (!myOptions.TRACKING_ENABLED) {
        return;
      }
      Document document=e.getDocument();
      final VirtualFile file=myDocumentManager.getFile(document);
synchronized (myCheckSetLock) {
        myCheckSet.add(file);
      }
      zipperUpdater.queue(runnable);
    }
  }
;
  myChangeListListener=new ChangeListAdapter(){
    @Override public void changeListChanged(    ChangeList list){
      if (myChangeListManager.isDefaultChangeList(list)) {
        clearChanges(list.getChanges());
      }
    }
    @Override public void changesMoved(    Collection<Change> changes,    ChangeList fromList,    ChangeList toList){
      if (myChangeListManager.isDefaultChangeList(toList)) {
        clearChanges(changes);
      }
    }
    @Override public void changesRemoved(    Collection<Change> changes,    ChangeList fromList){
      clearChanges(changes);
    }
    @Override public void defaultListChanged(    ChangeList oldDefaultList,    ChangeList newDefaultList){
      clearChanges(newDefaultList.getChanges());
    }
  }
;
}
