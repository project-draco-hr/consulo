{
  myProject=project;
  myChangeListManager=changeListManager;
  myEditorNotifications=editorNotifications;
  myDocumentManager=FileDocumentManager.getInstance();
  myFileStatusManager=fileStatusManager;
  myDocumentListener=new DocumentAdapter(){
    @Override public void documentChanged(    DocumentEvent e){
      if (!myOptions.TRACKING_ENABLED) {
        return;
      }
      Document document=e.getDocument();
      final VirtualFile file=myDocumentManager.getFile(document);
      if (file == null || isFromActiveChangelist(file) || ChangesUtil.isInternalOperation(file)) {
        return;
      }
      myChangeListManager.invokeAfterUpdate(new Runnable(){
        public void run(){
          if (!isFromActiveChangelist(file)) {
            String path=file.getPath();
            Conflict conflict=myConflicts.get(path);
            boolean newConflict=false;
            if (conflict == null) {
              conflict=new Conflict();
              myConflicts.put(path,conflict);
              newConflict=true;
            }
            conflict.timestamp=System.currentTimeMillis();
            conflict.changelistId=myChangeListManager.getDefaultChangeList().getId();
            if (newConflict && myOptions.HIGHLIGHT_CONFLICTS) {
              myFileStatusManager.fileStatusChanged(file);
              myEditorNotifications.updateNotifications(file);
            }
          }
        }
      }
,InvokeAfterUpdateMode.SILENT,null,null);
    }
  }
;
  myChangeListListener=new ChangeListAdapter(){
    @Override public void changeListChanged(    ChangeList list){
      checkList(list);
    }
    @Override public void changesMoved(    Collection<Change> changes,    ChangeList fromList,    ChangeList toList){
      checkList(toList);
    }
    @Override public void changesRemoved(    Collection<Change> changes,    ChangeList fromList){
      clearChanges(changes,true);
    }
    @Override public void defaultListChanged(    ChangeList oldDefaultList,    ChangeList newDefaultList){
      clearChanges(newDefaultList.getChanges(),true);
    }
  }
;
}
