{
  myProject=project;
  myChangeListManager=changeListManager;
  myDocumentManager=FileDocumentManager.getInstance();
  myFileStatusManager=fileStatusManager;
  myFileEditorManager=FileEditorManager.getInstance(project);
  myDocumentListener=new DocumentAdapter(){
    @Override public void documentChanged(    DocumentEvent e){
      if (!myOptions.TRACKING_ENABLED) {
        return;
      }
      Document document=e.getDocument();
      VirtualFile file=myDocumentManager.getFile(document);
      if (file != null && !isWritingAllowed(file)) {
        boolean old=myConflicts.containsKey(file.getPath());
        Conflict conflict=myConflicts.get(file.getPath());
        conflict.timestamp=System.currentTimeMillis();
        conflict.changelistId=myChangeListManager.getDefaultChangeList().getId();
        if (!old) {
          myFileStatusManager.fileStatusChanged(file);
          addNotification(file,true);
        }
      }
    }
  }
;
  myChangeListListener=new ChangeListAdapter(){
    @Override public void changeListChanged(    ChangeList list){
      checkList(list);
    }
    @Override public void changesMoved(    Collection<Change> changes,    ChangeList fromList,    ChangeList toList){
      checkList(toList);
    }
    @Override public void changesRemoved(    Collection<Change> changes,    ChangeList fromList){
      clearChanges(changes,true);
    }
    @Override public void defaultListChanged(    ChangeList oldDefaultList,    ChangeList newDefaultList){
      clearChanges(newDefaultList.getChanges(),true);
    }
  }
;
  myFileEditorManagerListener=new FileEditorManagerAdapter(){
    @Override public void fileOpened(    FileEditorManager source,    VirtualFile file){
      if (hasConflict(file)) {
        addNotification(file,true);
      }
    }
  }
;
}
