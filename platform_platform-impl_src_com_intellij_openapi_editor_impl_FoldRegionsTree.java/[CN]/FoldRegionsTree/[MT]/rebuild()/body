{
  ArrayList<FoldRegion> topLevels=new ArrayList<FoldRegion>(myRegions.size() / 2);
  ArrayList<FoldRegion> visible=new ArrayList<FoldRegion>(myRegions.size());
  FoldRegion[] regions=toFoldArray(myRegions);
  FoldRegion currentToplevel=null;
  for (  FoldRegion region : regions) {
    if (region.isValid()) {
      visible.add(region);
      if (!region.isExpanded()) {
        if (currentToplevel == null || currentToplevel.getEndOffset() < region.getStartOffset()) {
          currentToplevel=region;
          topLevels.add(region);
        }
      }
    }
  }
  myCachedTopLevelRegions=toFoldArray(topLevels);
  Arrays.sort(myCachedTopLevelRegions,BY_END_OFFSET);
  FoldRegion[] visibleArrayed=toFoldArray(visible);
  for (  FoldRegion visibleRegion : visibleArrayed) {
    for (    FoldRegion topLevelRegion : myCachedTopLevelRegions) {
      if (contains(topLevelRegion,visibleRegion)) {
        visible.remove(visibleRegion);
        break;
      }
    }
  }
  myCachedVisible=toFoldArray(visible);
  Arrays.sort(myCachedVisible,BY_END_OFFSET_REVERSE);
  updateCachedOffsets();
}
