{
  if (!isFoldingEnabled()) {
    return;
  }
  if (visibleRegions == null) {
    rebuild();
    return;
  }
  Set<FoldRegion> distinctRegions=new THashSet<FoldRegion>(visibleRegions.length,OFFSET_BASED_HASHING_STRATEGY);
  for (  FoldRegion foldRegion : visibleRegions) {
    if (!foldRegion.isValid() || !distinctRegions.add(foldRegion)) {
      rebuild();
      return;
    }
  }
  int length=topLevelRegions.length;
  int[] startOffsets=ArrayUtil.newIntArray(length);
  int[] endOffsets=ArrayUtil.newIntArray(length);
  int[] foldedLines=ArrayUtil.newIntArray(length);
  int sum=0;
  for (int i=0; i < length; i++) {
    FoldRegion region=topLevelRegions[i];
    startOffsets[i]=region.getStartOffset();
    endOffsets[i]=region.getEndOffset() - 1;
    Document document=region.getDocument();
    sum+=document.getLineNumber(region.getEndOffset()) - document.getLineNumber(region.getStartOffset());
    foldedLines[i]=sum;
  }
  myCachedData=new CachedData(visibleRegions,topLevelRegions,startOffsets,endOffsets,foldedLines);
}
