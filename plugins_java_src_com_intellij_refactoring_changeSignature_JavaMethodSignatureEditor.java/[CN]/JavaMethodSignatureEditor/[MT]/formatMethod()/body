{
  @NonNls StringBuilder buffer=new StringBuilder();
  PsiMethod method=getMethod();
  PsiModifierList modifierList=method.getModifierList();
  String modifiers=modifierList.getText();
  buffer.append(modifiers);
  if (modifiers.length() > 0 && !StringUtil.endsWithChar(modifiers,'\n') && !StringUtil.endsWithChar(modifiers,'\r') && !StringUtil.endsWithChar(modifiers,' ')) {
    buffer.append(" ");
  }
  if (!method.isConstructor()) {
    final PsiType returnType=method.getReturnType();
    if (returnType != null) {
      buffer.append(returnType.getPresentableText());
    }
    buffer.append(" ");
  }
  buffer.append(method.getName());
  buffer.append("(");
  final String indent="    ";
  PsiParameter[] items=method.getParameterList().getParameters();
  for (int i=0; i < items.length; i++) {
    PsiParameter item=items[i];
    if (i > 0) {
      buffer.append(",");
    }
    buffer.append("\n");
    buffer.append(indent);
    buffer.append(item.getTypeElement().getType().getPresentableText());
    buffer.append(" ");
    buffer.append(item.getName());
  }
  if (items.length != 0) {
    buffer.append("\n");
  }
  buffer.append(")");
  PsiClassType[] thrownExceptionsFragments=method.getThrowsList().getReferencedTypes();
  if (thrownExceptionsFragments.length > 0) {
    buffer.append("\n");
    buffer.append("throws\n");
    for (int i=0; i < thrownExceptionsFragments.length; i++) {
      String text=thrownExceptionsFragments[i].getPresentableText();
      buffer.append(indent);
      buffer.append(text);
      if (i < thrownExceptionsFragments.length - 1) {
        buffer.append(",");
        buffer.append("\n");
      }
    }
  }
  return buffer.toString();
}
