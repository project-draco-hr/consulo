{
  if (!CodeInsightUtilBase.preparePsiElementForWrite(descriptor.getPsiElement()))   return;
  final PsiClass psiClass=PsiTreeUtil.getParentOfType(descriptor.getPsiElement(),PsiClass.class);
  if (!TestNGUtil.checkTestNGInClasspath(psiClass))   return;
  try {
    final PsiManager manager=PsiManager.getInstance(project);
    final PsiElementFactory factory=JavaPsiFacade.getInstance(manager.getProject()).getElementFactory();
    final PsiJavaFile javaFile=(PsiJavaFile)psiClass.getContainingFile();
    for (    PsiMethod method : psiClass.getMethods()) {
      if (method.isConstructor()) {
        convertJUnitConstructor(method);
      }
 else {
        if (!javaFile.getLanguageLevel().hasEnumKeywordAndAutoboxing()) {
          addMethodJavadoc(factory,method);
        }
 else {
          if (TestNGUtil.containsJunitAnnotions(method)) {
            convertJunitAnnotions(factory,method);
          }
          addMethodAnnotations(factory,method);
        }
      }
      final PsiMethodCallExpression[] methodCalls=getTestCaseCalls(method);
      for (      PsiMethodCallExpression methodCall : methodCalls) {
        PsiMethod assertMethod=methodCall.resolveMethod();
        if (assertMethod == null) {
          continue;
        }
        PsiAssertStatement assertStatement=null;
        @NonNls String methodName=assertMethod.getName();
        PsiExpression[] expressions=methodCall.getArgumentList().getExpressions();
        final PsiStatement methodCallStatement=PsiTreeUtil.getParentOfType(methodCall,PsiStatement.class);
        LOG.assertTrue(methodCallStatement != null);
        if ("assertTrue".equals(methodName) || "assertFalse".equals(methodName)) {
          if (expressions.length == 1) {
            assertStatement=createAssert(factory,null,methodCall);
            final PsiExpression assertCondition=assertStatement.getAssertCondition();
            LOG.assertTrue(assertCondition != null);
            assertCondition.replace(expressions[0]);
          }
 else           if (expressions.length == 2) {
            assertStatement=createAssert(factory,expressions[0],methodCall);
            final PsiExpression assertCondition=assertStatement.getAssertCondition();
            LOG.assertTrue(assertCondition != null);
            assertCondition.replace(expressions[1]);
          }
          if ("assertFalse".equals(methodName) && assertStatement != null) {
            PsiExpression assertCondition=assertStatement.getAssertCondition();
            LOG.assertTrue(assertCondition != null);
            assertCondition.replace(factory.createExpressionFromText("!(" + assertCondition.getText() + ')',PsiTreeUtil.getParentOfType(assertCondition,PsiMethodCallExpression.class)));
          }
        }
 else         if ("assertNull".equals(methodName) || "assertNotNull".equals(methodName)) {
          String operator="assertNull".equals(methodName) ? "==" : "!=";
          if (expressions.length == 1) {
            assertStatement=createAssert(factory,null,methodCall);
            PsiExpression expression=factory.createExpressionFromText(expressions[0].getText() + ' ' + operator+ " null",assertStatement);
            final PsiExpression assertCondition=assertStatement.getAssertCondition();
            LOG.assertTrue(assertCondition != null);
            assertCondition.replace(expression);
          }
 else           if (expressions.length == 2) {
            assertStatement=createAssert(factory,expressions[0],methodCall.getParent());
            PsiExpression expression=factory.createExpressionFromText(expressions[1].getText() + ' ' + operator+ " null",assertStatement);
            final PsiExpression assertCondition=assertStatement.getAssertCondition();
            LOG.assertTrue(assertCondition != null);
            assertCondition.replace(expression);
          }
        }
 else         if ("fail".equals(methodName)) {
          if (expressions.length == 0) {
            assertStatement=createAssert(factory,null,methodCall);
          }
 else           if (expressions.length == 1) {
            assertStatement=createAssert(factory,expressions[0],methodCall);
          }
        }
 else {
          PsiElement inserted=null;
          if (expressions.length == 2) {
            inserted=methodCallStatement.replace(factory.createStatementFromText("org.testng.Assert." + methodCall.getText() + ";",methodCall.getParent()));
          }
 else           if (expressions.length == 3) {
            @NonNls String call="org.testng.Assert." + methodName + '('+ expressions[2].getText()+ ", "+ expressions[1].getText()+ ", "+ expressions[0].getText()+ ");";
            inserted=methodCallStatement.replace(factory.createStatementFromText(call,methodCall.getParent()));
          }
          if (inserted != null) {
            JavaCodeStyleManager.getInstance(project).shortenClassReferences(inserted);
          }
        }
        if (assertStatement != null) {
          methodCallStatement.replace(assertStatement);
        }
      }
    }
    final PsiClass superClass=psiClass.getSuperClass();
    if (superClass != null && "junit.framework.TestCase".equals(superClass.getQualifiedName())) {
      final PsiReferenceList extendsList=psiClass.getExtendsList();
      LOG.assertTrue(extendsList != null);
      for (      PsiJavaCodeReferenceElement element : extendsList.getReferenceElements()) {
        element.delete();
      }
    }
    JavaCodeStyleManager.getInstance(project).optimizeImports(javaFile);
  }
 catch (  IncorrectOperationException e) {
    LOG.error("Error converting testcase",e);
  }
}
