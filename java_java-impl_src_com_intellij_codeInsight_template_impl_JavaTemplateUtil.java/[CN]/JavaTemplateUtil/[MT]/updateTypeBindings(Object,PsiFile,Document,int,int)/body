{
  final Project project=file.getProject();
  PsiClass aClass=null;
  if (item instanceof PsiClass) {
    aClass=(PsiClass)item;
  }
 else   if (item instanceof PsiType) {
    aClass=PsiUtil.resolveClassInType((PsiType)item);
  }
  if (aClass != null) {
    if (aClass instanceof PsiTypeParameter) {
      if (((PsiTypeParameter)aClass).getOwner() instanceof PsiMethod) {
        PsiElement element=file.findElementAt(segmentStart);
        PsiMethod method=PsiTreeUtil.getParentOfType(element,PsiMethod.class);
        if (method != null) {
          PsiTypeParameterList paramList=method.getTypeParameterList();
          PsiTypeParameter[] params=paramList != null ? paramList.getTypeParameters() : PsiTypeParameter.EMPTY_ARRAY;
          for (          PsiTypeParameter param : params) {
            if (param.getName().equals(aClass.getName()))             return;
          }
          try {
            if (paramList == null) {
              final PsiTypeParameterList newList=JVMElementFactories.getFactory(method.getLanguage(),project).createTypeParameterList();
              paramList=(PsiTypeParameterList)method.addAfter(newList,method.getModifierList());
            }
            paramList.add(aClass.copy());
            PsiDocumentManager.getInstance(project).doPostponedOperationsAndUnblockDocument(document);
          }
 catch (          IncorrectOperationException e) {
            LOG.error(e);
          }
        }
      }
    }
 else {
      addImportForClass(document,aClass,segmentStart,segmentEnd);
      PsiDocumentManager.getInstance(project).doPostponedOperationsAndUnblockDocument(document);
    }
  }
}
