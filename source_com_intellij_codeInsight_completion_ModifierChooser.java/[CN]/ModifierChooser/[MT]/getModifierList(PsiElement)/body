{
  if (element == null) {
    return null;
  }
  if (element.getParent() instanceof PsiModifierList)   return (PsiModifierList)element.getParent();
  final PsiElement prev=FilterUtil.searchNonSpaceNonCommentBack(element);
  if (prev != null && prev.getParent() instanceof PsiModifierList) {
    return (PsiModifierList)prev.getParent();
  }
  PsiElement parent=element.getParent();
  while (parent != null && (parent instanceof PsiJavaCodeReferenceElement || parent instanceof PsiErrorElement || parent instanceof PsiTypeElement|| parent instanceof PsiMethod|| parent instanceof PsiVariable|| parent instanceof PsiDeclarationStatement|| parent instanceof PsiImportList|| parent instanceof PsiDocComment|| element.getText().equals(parent.getText()))) {
    parent=parent.getParent();
  }
  if (parent == null)   throw new Exception();
  final Iterator iter=myMap.keySet().iterator();
  while (iter.hasNext()) {
    final ElementFilter filter=(ElementFilter)iter.next();
    if (filter.isClassAcceptable(parent.getClass()) && filter.isAcceptable(parent,parent.getParent())) {
      if (parent instanceof PsiParameterList) {
        if (prev == null || Arrays.asList(new String[]{"(",","}).contains(prev.getText()) || Arrays.asList(new String[]{"(",","}).contains(element.getText()))         return null;
      }
 else       if (prev == null || JavaCompletionData.END_OF_BLOCK.isAcceptable(element,prev.getParent()))       return null;
    }
  }
  throw new Exception("Can't find modifier list");
}
