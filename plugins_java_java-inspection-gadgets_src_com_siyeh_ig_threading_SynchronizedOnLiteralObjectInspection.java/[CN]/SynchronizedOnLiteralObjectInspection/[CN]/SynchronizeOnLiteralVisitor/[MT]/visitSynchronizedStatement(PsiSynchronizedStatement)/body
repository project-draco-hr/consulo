{
  super.visitSynchronizedStatement(statement);
  final PsiExpression lockExpression=statement.getLockExpression();
  if (lockExpression == null) {
    return;
  }
  final PsiType type=lockExpression.getType();
  if (type == null) {
    return;
  }
  if (!type.equalsToText(CommonClassNames.JAVA_LANG_STRING) && !type.equalsToText(CommonClassNames.JAVA_LANG_BOOLEAN) && !type.equalsToText(CommonClassNames.JAVA_LANG_CHARACTER)) {
    final PsiClassType javaLangNumberType=TypeUtils.getType(CommonClassNames.JAVA_LANG_NUMBER,statement);
    if (!javaLangNumberType.isAssignableFrom(type)) {
      return;
    }
  }
  if (!(lockExpression instanceof PsiReferenceExpression)) {
    if (ExpressionUtils.isLiteral(lockExpression)) {
      registerError(lockExpression,type,Integer.valueOf(2));
    }
 else     if (warnOnAllPossiblyLiterals) {
      registerError(lockExpression,type,Integer.valueOf(3));
    }
    return;
  }
  final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)lockExpression;
  final PsiElement target=referenceExpression.resolve();
  if (!(target instanceof PsiVariable)) {
    if (warnOnAllPossiblyLiterals) {
      registerError(lockExpression,type,Integer.valueOf(3));
    }
    return;
  }
  final PsiVariable variable=(PsiVariable)target;
  final PsiExpression initializer=variable.getInitializer();
  if (!ExpressionUtils.isLiteral(initializer)) {
    if (warnOnAllPossiblyLiterals) {
      registerError(lockExpression,type,Integer.valueOf(3));
    }
    return;
  }
  registerError(lockExpression,type,Integer.valueOf(1));
}
