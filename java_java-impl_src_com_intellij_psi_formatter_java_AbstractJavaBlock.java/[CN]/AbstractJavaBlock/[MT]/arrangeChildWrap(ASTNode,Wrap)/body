{
  if (myAnnotationWrap != null) {
    try {
      return myAnnotationWrap;
    }
  finally {
      myAnnotationWrap=null;
    }
  }
  final ASTNode parent=child.getTreeParent();
  int role=((CompositeElement)parent).getChildRole(child);
  final IElementType nodeType=myNode.getElementType();
  if (nodeType == JavaElementType.BINARY_EXPRESSION) {
    if (role == ChildRole.OPERATION_SIGN && !mySettings.BINARY_OPERATION_SIGN_ON_NEXT_LINE)     return null;
    if (role == ChildRole.ROPERAND && mySettings.BINARY_OPERATION_SIGN_ON_NEXT_LINE)     return null;
    return defaultWrap;
  }
  final IElementType childType=child.getElementType();
  if (childType == JavaElementType.EXTENDS_LIST || childType == JavaElementType.IMPLEMENTS_LIST) {
    return Wrap.createWrap(getWrapType(mySettings.EXTENDS_KEYWORD_WRAP),true);
  }
 else   if (childType == JavaElementType.THROWS_LIST) {
    return Wrap.createWrap(getWrapType(mySettings.THROWS_KEYWORD_WRAP),true);
  }
 else   if (nodeType == JavaElementType.EXTENDS_LIST || nodeType == JavaElementType.IMPLEMENTS_LIST) {
    if (role == ChildRole.REFERENCE_IN_LIST) {
      return defaultWrap;
    }
 else {
      return null;
    }
  }
 else   if (nodeType == JavaElementType.THROWS_LIST) {
    if (role == ChildRole.REFERENCE_IN_LIST) {
      return defaultWrap;
    }
 else {
      return null;
    }
  }
 else   if (nodeType == JavaElementType.CONDITIONAL_EXPRESSION) {
    if (role == ChildRole.COLON && !mySettings.TERNARY_OPERATION_SIGNS_ON_NEXT_LINE)     return null;
    if (role == ChildRole.QUEST && !mySettings.TERNARY_OPERATION_SIGNS_ON_NEXT_LINE)     return null;
    if (role == ChildRole.THEN_EXPRESSION && mySettings.TERNARY_OPERATION_SIGNS_ON_NEXT_LINE)     return null;
    if (role == ChildRole.ELSE_EXPRESSION && mySettings.TERNARY_OPERATION_SIGNS_ON_NEXT_LINE)     return null;
    return defaultWrap;
  }
 else   if (isAssignment()) {
    if (role == ChildRole.INITIALIZER_EQ && mySettings.PLACE_ASSIGNMENT_SIGN_ON_NEXT_LINE)     return defaultWrap;
    if (role == ChildRole.INITIALIZER_EQ && !mySettings.PLACE_ASSIGNMENT_SIGN_ON_NEXT_LINE)     return null;
    if (role == ChildRole.OPERATION_SIGN && mySettings.PLACE_ASSIGNMENT_SIGN_ON_NEXT_LINE)     return defaultWrap;
    if (role == ChildRole.OPERATION_SIGN && !mySettings.PLACE_ASSIGNMENT_SIGN_ON_NEXT_LINE)     return null;
    if (role == ChildRole.INITIALIZER && !mySettings.PLACE_ASSIGNMENT_SIGN_ON_NEXT_LINE)     return defaultWrap;
    if (role == ChildRole.INITIALIZER && mySettings.PLACE_ASSIGNMENT_SIGN_ON_NEXT_LINE)     return null;
    if (role == ChildRole.ROPERAND && !mySettings.PLACE_ASSIGNMENT_SIGN_ON_NEXT_LINE)     return defaultWrap;
    if (role == ChildRole.ROPERAND && mySettings.PLACE_ASSIGNMENT_SIGN_ON_NEXT_LINE)     return null;
    if (role == ChildRole.CLOSING_SEMICOLON)     return null;
    return defaultWrap;
  }
 else   if (nodeType == JavaElementType.REFERENCE_EXPRESSION) {
    if (role == ChildRole.DOT) {
      return getReservedWrap(JavaElementType.REFERENCE_EXPRESSION);
    }
 else {
      return defaultWrap;
    }
  }
 else   if (nodeType == JavaElementType.FOR_STATEMENT) {
    if (role == ChildRole.FOR_INITIALIZATION || role == ChildRole.CONDITION || role == ChildRole.FOR_UPDATE) {
      return defaultWrap;
    }
    if (role == ChildRole.LOOP_BODY) {
      final boolean dontWrap=(childType == JavaElementType.CODE_BLOCK || childType == JavaElementType.BLOCK_STATEMENT) && mySettings.BRACE_STYLE == CodeStyleSettings.END_OF_LINE;
      return Wrap.createWrap(dontWrap ? WrapType.NONE : WrapType.NORMAL,true);
    }
 else {
      return null;
    }
  }
 else   if (nodeType == JavaElementType.METHOD) {
    if (role == ChildRole.THROWS_LIST) {
      return defaultWrap;
    }
 else {
      return null;
    }
  }
 else   if (nodeType == JavaElementType.MODIFIER_LIST) {
    if (childType == JavaElementType.ANNOTATION) {
      return getReservedWrap(JavaElementType.MODIFIER_LIST);
    }
    ASTNode prevElement=getPrevElement(child);
    if (prevElement != null && prevElement.getElementType() == JavaElementType.ANNOTATION) {
      return getReservedWrap(JavaElementType.MODIFIER_LIST);
    }
 else {
      return null;
    }
  }
 else   if (nodeType == JavaElementType.ASSERT_STATEMENT) {
    if (role == ChildRole.CONDITION) {
      return defaultWrap;
    }
    if (role == ChildRole.ASSERT_DESCRIPTION && !mySettings.ASSERT_STATEMENT_COLON_ON_NEXT_LINE) {
      return defaultWrap;
    }
    if (role == ChildRole.COLON && mySettings.ASSERT_STATEMENT_COLON_ON_NEXT_LINE) {
      return defaultWrap;
    }
    return null;
  }
 else   if (nodeType == JavaElementType.CODE_BLOCK) {
    if (role == ChildRole.STATEMENT_IN_BLOCK) {
      return defaultWrap;
    }
 else {
      return null;
    }
  }
 else   if (nodeType == JavaElementType.IF_STATEMENT) {
    if (childType == JavaElementType.IF_STATEMENT && role == ChildRole.ELSE_BRANCH && getSettings().SPECIAL_ELSE_IF_TREATMENT) {
      return Wrap.createWrap(WrapType.NONE,false);
    }
    if (role == ChildRole.THEN_BRANCH || role == ChildRole.ELSE_BRANCH) {
      if (childType == JavaElementType.BLOCK_STATEMENT) {
        return null;
      }
 else {
        return Wrap.createWrap(WrapType.NORMAL,true);
      }
    }
  }
 else   if (nodeType == JavaElementType.FOREACH_STATEMENT || nodeType == JavaElementType.WHILE_STATEMENT) {
    if (role == ChildRole.LOOP_BODY) {
      if (childType == JavaElementType.BLOCK_STATEMENT) {
        return null;
      }
 else {
        return Wrap.createWrap(WrapType.NORMAL,true);
      }
    }
  }
 else   if (nodeType == JavaElementType.DO_WHILE_STATEMENT) {
    if (role == ChildRole.LOOP_BODY) {
      return Wrap.createWrap(WrapType.NORMAL,true);
    }
 else     if (role == ChildRole.WHILE_KEYWORD) {
      return Wrap.createWrap(WrapType.NORMAL,true);
    }
  }
 else   if (nodeType == JavaElementType.ANNOTATION_ARRAY_INITIALIZER) {
    if (role == ChildRole.ANNOTATION_VALUE) {
      return Wrap.createWrap(WrapType.NORMAL,true);
    }
  }
  return defaultWrap;
}
