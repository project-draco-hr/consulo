{
  final Indent externalIndent=Indent.getNoneIndent();
  final Indent internalIndent=Indent.getContinuationWithoutFirstIndent(myIndentSettings.USE_RELATIVE_INDENTS);
  final Indent internalIndentEnforcedToChildren=Indent.getIndent(Indent.Type.CONTINUATION,myIndentSettings.USE_RELATIVE_INDENTS,true);
  AlignmentStrategy alignmentStrategy=AlignmentStrategy.wrap(createAlignment(doAlign,null),JavaTokenType.COMMA);
  setChildIndent(internalIndent);
  setChildAlignment(alignmentStrategy.getAlignment(null));
  boolean methodParametersBlock=true;
  ASTNode lBracketParent=child.getTreeParent();
  if (lBracketParent != null) {
    ASTNode methodCandidate=lBracketParent.getTreeParent();
    methodParametersBlock=methodCandidate != null && (methodCandidate.getElementType() == JavaElementType.METHOD || methodCandidate.getElementType() == JavaElementType.METHOD_CALL_EXPRESSION);
  }
  Alignment bracketAlignment=methodParametersBlock && mySettings.ALIGN_MULTILINE_METHOD_BRACKETS ? Alignment.createAlignment() : null;
  AlignmentStrategy anonymousClassStrategy=doAlign ? alignmentStrategy : AlignmentStrategy.wrap(Alignment.createAlignment(),false,JavaTokenType.NEW_KEYWORD,JavaElementType.NEW_EXPRESSION,JavaTokenType.RBRACE);
  setChildIndent(internalIndent);
  setChildAlignment(alignmentStrategy.getAlignment(null));
  boolean isAfterIncomplete=false;
  ASTNode prev=child;
  while (child != null) {
    isAfterIncomplete=isAfterIncomplete || child.getElementType() == TokenType.ERROR_ELEMENT || child.getElementType() == JavaElementType.EMPTY_EXPRESSION;
    if (!FormatterUtil.containsWhiteSpacesOnly(child) && child.getTextLength() > 0) {
      if (child.getElementType() == from) {
        result.add(createJavaBlock(child,mySettings,externalIndent,null,bracketAlignment));
      }
 else       if (child.getElementType() == to) {
        result.add(createJavaBlock(child,mySettings,isAfterIncomplete ? internalIndent : externalIndent,null,isAfterIncomplete ? alignmentStrategy.getAlignment(null) : bracketAlignment));
        return child;
      }
 else {
        final IElementType elementType=child.getElementType();
        final boolean enforceIndent=shouldEnforceIndentToChildren(child);
        Indent indentToUse=enforceIndent ? internalIndentEnforcedToChildren : internalIndent;
        AlignmentStrategy alignmentStrategyToUse=canUseAnonymousClassAlignment(child) ? anonymousClassStrategy : alignmentStrategy;
        processChild(result,child,alignmentStrategyToUse.getAlignment(elementType),wrappingStrategy.getWrap(elementType),indentToUse);
        if (to == null) {
          return child;
        }
      }
      isAfterIncomplete=false;
    }
    prev=child;
    child=child.getTreeNext();
  }
  return prev;
}
