{
  final ArrayList<Block> localResult=new ArrayList<Block>();
  processChild(localResult,child,AlignmentStrategy.getNullStrategy(),null,Indent.getNoneIndent());
  child=child.getTreeNext();
  AlignmentStrategy varDeclarationAlignmentStrategy=AlignmentStrategy.createAlignmentPerTypeStrategy(VAR_DECLARATION_ELEMENT_TYPES_TO_ALIGN,true);
  while (child != null) {
    if (!FormatterUtil.containsWhiteSpacesOnly(child)) {
      if (!shouldUseVarDeclarationAlignment(child)) {
        varDeclarationAlignmentStrategy=AlignmentStrategy.createAlignmentPerTypeStrategy(VAR_DECLARATION_ELEMENT_TYPES_TO_ALIGN,true);
      }
      final boolean rBrace=isRBrace(child);
      final Indent childIndent=rBrace ? Indent.getNoneIndent() : getCodeBlockInternalIndent(childrenIndent);
      AlignmentStrategy alignmentStrategyToUse=ALIGN_IN_COLUMNS_ELEMENT_TYPES.contains(child.getElementType()) ? varDeclarationAlignmentStrategy : AlignmentStrategy.getNullStrategy();
      child=processChild(localResult,child,alignmentStrategyToUse,null,childIndent);
      if (rBrace) {
        result.add(createCodeBlockBlock(localResult,indent,childrenIndent));
        return child;
      }
    }
    if (child != null) {
      child=child.getTreeNext();
    }
  }
  result.add(createCodeBlockBlock(localResult,indent,childrenIndent));
  return null;
}
