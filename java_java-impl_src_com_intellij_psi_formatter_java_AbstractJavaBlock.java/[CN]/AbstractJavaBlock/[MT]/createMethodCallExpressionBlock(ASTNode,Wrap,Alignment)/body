{
  final ArrayList<ASTNode> nodes=new ArrayList<ASTNode>();
  final ArrayList<Block> subBlocks=new ArrayList<Block>();
  collectNodes(nodes,node);
  final Wrap wrap=Wrap.createWrap(getWrapType(mySettings.METHOD_CALL_CHAIN_WRAP),false);
  Alignment chainedCallsAlignment=createAlignment(mySettings.ALIGN_MULTILINE_CHAINED_METHODS,null);
  boolean callPointDefined=false;
  List<ASTNode> lookAheadNodes=null;
  boolean afterIdentifier=false;
  while (!nodes.isEmpty() || lookAheadNodes != null) {
    final List<ASTNode> subNodes;
    if (lookAheadNodes == null) {
      subNodes=readToNextDot(nodes);
    }
 else {
      subNodes=new ArrayList<ASTNode>(lookAheadNodes);
      lookAheadNodes=null;
    }
    Alignment alignmentToUseForSubBlock=null;
    if (chainedCallsAlignment == null || subNodes.isEmpty()) {
      subBlocks.add(createSyntheticBlock(subNodes,wrap,alignmentToUseForSubBlock));
      continue;
    }
    IElementType lastNodeType=subNodes.get(subNodes.size() - 1).getElementType();
    boolean currentSubBlockIsMethodCall=lastNodeType == JavaElementType.EXPRESSION_LIST;
    if (callPointDefined && !currentSubBlockIsMethodCall) {
      chainedCallsAlignment=createAlignment(mySettings.ALIGN_MULTILINE_CHAINED_METHODS,null);
    }
    callPointDefined|=!currentSubBlockIsMethodCall;
    if (callPointDefined && currentSubBlockIsMethodCall) {
      alignmentToUseForSubBlock=chainedCallsAlignment;
    }
 else     if (afterIdentifier && lastNodeType == JavaTokenType.IDENTIFIER) {
      lookAheadNodes=readToNextDot(nodes);
      if (lookAheadNodes != null && !lookAheadNodes.isEmpty() && lookAheadNodes.get(lookAheadNodes.size() - 1).getElementType() == JavaElementType.EXPRESSION_LIST) {
        alignmentToUseForSubBlock=chainedCallsAlignment;
      }
    }
    afterIdentifier=lastNodeType == JavaTokenType.IDENTIFIER;
    subBlocks.add(createSyntheticBlock(subNodes,wrap,alignmentToUseForSubBlock));
  }
  return new SyntheticCodeBlock(subBlocks,alignment,mySettings,Indent.getContinuationWithoutFirstIndent(myIndentSettings.USE_RELATIVE_INDENTS),blockWrap);
}
