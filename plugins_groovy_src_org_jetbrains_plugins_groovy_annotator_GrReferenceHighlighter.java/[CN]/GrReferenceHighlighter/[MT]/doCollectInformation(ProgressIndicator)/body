{
  myInfos=new ArrayList<HighlightInfo>();
  myFile.accept(new GroovyRecursiveElementVisitor(){
    @Override public void visitReferenceExpression(    GrReferenceExpression referenceExpression){
      super.visitReferenceExpression(referenceExpression);
      visit(referenceExpression);
      HighlightInfo info=GrUnresolvedAccessInspection.checkReferenceExpression(referenceExpression);
      if (info != null) {
        myInfos.add(info);
      }
    }
    @Override public void visitCodeReferenceElement(    GrCodeReferenceElement refElement){
      super.visitCodeReferenceElement(refElement);
      visit(refElement);
      HighlightInfo info=GrUnresolvedAccessInspection.checkCodeReferenceElement(refElement);
      if (info != null) {
        myInfos.add(info);
      }
    }
    @Override public void visitVariable(    GrVariable variable){
      super.visitVariable(variable);
      if (GroovyRefactoringUtil.isLocalVariable(variable) || variable instanceof GrParameter) {
        final TextAttributesKey attribute=GrHighlightUtil.getDeclarationHighlightingAttribute(variable);
        if (attribute != null) {
          final PsiElement nameElement=variable.getNameIdentifierGroovy();
          myInfos.add(HighlightInfo.createHighlightInfo(HighlightInfoType.INFORMATION,nameElement,null,attribute));
        }
      }
    }
    private void visit(    GrReferenceElement element){
      final PsiElement resolved=element.resolve();
      final TextAttributesKey attribute=GrHighlightUtil.getDeclarationHighlightingAttribute(resolved);
      if (attribute != null) {
        final PsiElement refNameElement=GrHighlightUtil.getElementToHighlight(element);
        myInfos.add(HighlightInfo.createHighlightInfo(HighlightInfoType.INFORMATION,refNameElement,null,attribute));
      }
    }
  }
);
}
