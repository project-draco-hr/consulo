{
  final PsiElement parent=value.getParent();
  if (parent instanceof XmlAttribute) {
    if (!XsltSupport.isXsltFile(parent.getContainingFile())) {
      return;
    }
    final String s=value.getValue();
    if (s == null || s.length() == 0) {
      if (XsltSupport.isXPathAttribute((XmlAttribute)parent)) {
        InjectedLanguageUtil.enumerate(value,new PsiLanguageInjectionHost.InjectedPsiVisitor(){
          @Override public void visit(          @NotNull PsiFile injectedPsi,          @NotNull List<PsiLanguageInjectionHost.Shred> places){
            if (injectedPsi instanceof XPathFile) {
              if (injectedPsi.getTextLength() == 0) {
                myHolder.createErrorAnnotation(value,"Empty XPath expression");
              }
            }
          }
        }
);
      }
    }
 else     if (XsltSupport.mayBeAVT((XmlAttribute)parent)) {
      final List<Integer> singleBraces=collectClosingBraceOffsets(s);
      if (singleBraces != null) {
        InjectedLanguageUtil.enumerate(value,new PsiLanguageInjectionHost.InjectedPsiVisitor(){
          @Override public void visit(          @NotNull PsiFile injectedPsi,          @NotNull List<PsiLanguageInjectionHost.Shred> places){
            if (injectedPsi instanceof XPathFile) {
              for (              PsiLanguageInjectionHost.Shred place : places) {
                final TextRange range=place.getRangeInsideHost();
                for (Iterator<Integer> iterator=singleBraces.iterator(); iterator.hasNext(); ) {
                  final Integer brace=iterator.next();
                  if (range.contains(brace)) {
                    iterator.remove();
                  }
                }
              }
            }
          }
        }
);
        for (        Integer brace : singleBraces) {
          myHolder.createErrorAnnotation(TextRange.from(value.getTextOffset() + brace,1),"Invalid single closing brace. Escape as '}}'");
        }
      }
    }
  }
  super.visitXmlAttributeValue(value);
}
