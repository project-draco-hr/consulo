{
  if (context.getProject().isDisposed()) {
    return EMPTY_GENERATION_ITEM_ARRAY;
  }
  final String genRootPath=FileUtil.toSystemDependentName(outputRootDirectory.getPath());
  final File genRootDir=new File(genRootPath);
  if (genRootDir.exists()) {
    if (!FileUtil.delete(genRootDir)) {
      LOG.error("Cannot delete directory " + genRootPath);
    }
    if (!genRootDir.mkdir()) {
      LOG.error("Cannot create directory " + genRootPath);
    }
  }
  final List<GenerationItem> results=new ArrayList<GenerationItem>(items.length);
  for (  final GenerationItem item : items) {
    if (item instanceof MyGenerationItem) {
      final MyGenerationItem genItem=(MyGenerationItem)item;
      if (!AndroidCompileUtil.isModuleAffected(context,genItem.myModule)) {
        continue;
      }
      for (      final VirtualFile sourceFile : genItem.myFiles) {
        try {
          final Map<CompilerMessageCategory,List<String>> messages=launchRenderscriptCompiler(context.getProject(),genItem.mySdkLocation,genItem.myAndroidTarget,sourceFile,genRootPath,genItem.myRawDirPath);
          ApplicationManager.getApplication().runReadAction(new Runnable(){
            public void run(){
              if (context.getProject().isDisposed()) {
                return;
              }
              addMessages(context,messages,sourceFile.getUrl());
            }
          }
);
          if (messages.get(CompilerMessageCategory.ERROR).isEmpty()) {
            results.add(genItem);
          }
        }
 catch (        final IOException e) {
          ApplicationManager.getApplication().runReadAction(new Runnable(){
            public void run(){
              if (context.getProject().isDisposed())               return;
              context.addMessage(CompilerMessageCategory.ERROR,e.getMessage(),sourceFile.getUrl(),-1,-1);
            }
          }
);
        }
      }
    }
  }
  return results.toArray(new GenerationItem[results.size()]);
}
