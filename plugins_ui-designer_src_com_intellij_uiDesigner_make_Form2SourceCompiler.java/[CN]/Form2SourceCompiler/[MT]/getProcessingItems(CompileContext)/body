{
  final Project project=context.getProject();
  if (GuiDesignerConfiguration.getInstance(project).INSTRUMENT_CLASSES) {
    return ProcessingItem.EMPTY_ARRAY;
  }
  final ArrayList<ProcessingItem> items=new ArrayList<ProcessingItem>();
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    public void run(){
      final CompileScope scope=context.getCompileScope();
      final CompileScope projectScope=context.getProjectCompileScope();
      final VirtualFile[] formFiles=projectScope.getFiles(StdFileTypes.GUI_DESIGNER_FORM,true);
      final CompilerManager compilerManager=CompilerManager.getInstance(project);
      final BindingsCache bindingsCache=new BindingsCache(project);
      try {
        final HashMap<String,VirtualFile> class2form=new HashMap<String,VirtualFile>();
        for (        final VirtualFile formFile : formFiles) {
          if (compilerManager.isExcludedFromCompilation(formFile)) {
            continue;
          }
          final String classToBind;
          try {
            classToBind=bindingsCache.getBoundClassName(formFile);
          }
 catch (          AlienFormFileException e) {
            continue;
          }
catch (          Exception e) {
            addError(context,new FormErrorInfo(null,UIDesignerBundle.message("error.cannot.process.form.file",e)),formFile);
            continue;
          }
          if (classToBind == null) {
            continue;
          }
          final VirtualFile sourceFile=Form2ByteCodeCompiler.findSourceFile(context,formFile,classToBind);
          if (sourceFile == null) {
            if (scope.belongs(formFile.getUrl())) {
              addError(context,new FormErrorInfo(null,UIDesignerBundle.message("error.class.to.bind.does.not.exist",classToBind)),formFile);
            }
            continue;
          }
          final boolean inScope=scope.belongs(sourceFile.getUrl()) || scope.belongs(formFile.getUrl());
          final VirtualFile alreadyProcessedForm=class2form.get(classToBind);
          if (alreadyProcessedForm != null) {
            if (inScope) {
              addError(context,new FormErrorInfo(null,UIDesignerBundle.message("error.duplicate.bind",classToBind,alreadyProcessedForm.getPresentableUrl())),formFile);
            }
            continue;
          }
          class2form.put(classToBind,formFile);
          if (!inScope) {
            continue;
          }
          items.add(new MyInstrumentationItem(sourceFile,formFile));
        }
      }
  finally {
        bindingsCache.close();
      }
    }
  }
);
  return items.toArray(new ProcessingItem[items.size()]);
}
