{
  final PsiElement parent=getElement().getParent();
  LOG.assertTrue(parent instanceof PsiReferenceList);
  final PsiClass refClass=getReferencedElement();
  final PsiElementFactory elementFactory=JavaPsiFacade.getInstance(refClass.getProject()).getElementFactory();
  final PsiReferenceList extendsList=refClass.getExtendsList();
  final PsiReferenceList extendingImplementsList=myExtendingClass.getImplementsList();
  if (extendsList != null) {
    final PsiClassType[] referenceTypes=extendsList.getReferencedTypes();
    final PsiReferenceList listToAddExtends=refClass.isInterface() == myExtendingClass.isInterface() ? myExtendingClass.getExtendsList() : extendingImplementsList;
    final PsiClassType[] existingRefTypes=listToAddExtends.getReferencedTypes();
    for (    PsiClassType referenceType : referenceTypes) {
      if (ArrayUtilRt.find(existingRefTypes,referenceType) > -1)       continue;
      listToAddExtends.add(elementFactory.createReferenceElementByType((PsiClassType)mySubstitutor.substitute(referenceType)));
    }
  }
  final PsiReferenceList implementsList=refClass.getImplementsList();
  if (implementsList != null) {
    final PsiClassType[] existingRefTypes=extendingImplementsList.getReferencedTypes();
    PsiClassType[] referenceTypes=implementsList.getReferencedTypes();
    for (    PsiClassType referenceType : referenceTypes) {
      if (ArrayUtilRt.find(existingRefTypes,referenceType) > -1)       continue;
      extendingImplementsList.add(elementFactory.createReferenceElementByType((PsiClassType)mySubstitutor.substitute(referenceType)));
    }
  }
  getElement().delete();
}
