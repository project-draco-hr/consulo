{
  final Ref<Boolean> isJUnit4=new Ref<Boolean>(Boolean.FALSE);
  final PsiClass testAnnotation=ApplicationManager.getApplication().runReadAction(new Computable<PsiClass>(){
    @Nullable public PsiClass compute(){
      return JavaPsiFacade.getInstance(manager.getProject()).findClass(annotation,GlobalSearchScope.allScope(manager.getProject()));
    }
  }
);
  if (testAnnotation != null) {
    ApplicationManager.getApplication().runReadAction(new Runnable(){
      public void run(){
        AnnotatedMembersSearch.search(testAnnotation,scope).forEach(new Processor<PsiMember>(){
          public boolean process(          final PsiMember annotated){
            PsiClass containingClass=annotated instanceof PsiClass ? (PsiClass)annotated : annotated.getContainingClass();
            if (containingClass != null && annotated instanceof PsiMethod == isMethod) {
              if (testClassFilter.isAccepted(containingClass)) {
                found.add(containingClass);
                isJUnit4.set(Boolean.TRUE);
              }
              ClassInheritorsSearch.search(containingClass,scope,true).forEach(new PsiElementProcessorAdapter<PsiClass>(new PsiElementProcessor<PsiClass>(){
                public boolean execute(                final PsiClass aClass){
                  if (testClassFilter.isAccepted(aClass)) {
                    found.add(aClass);
                    isJUnit4.set(Boolean.TRUE);
                  }
                  return true;
                }
              }
));
            }
            return true;
          }
        }
);
      }
    }
);
  }
  return isJUnit4.get().booleanValue();
}
