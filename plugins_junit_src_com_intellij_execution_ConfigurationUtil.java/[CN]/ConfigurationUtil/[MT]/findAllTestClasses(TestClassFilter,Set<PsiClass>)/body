{
  final PsiManager manager=testClassFilter.getPsiManager();
  GlobalSearchScope projectScopeWithoutLibraries=GlobalSearchScope.projectScope(manager.getProject());
  final GlobalSearchScope scope=projectScopeWithoutLibraries.intersectWith(testClassFilter.getScope());
  ClassInheritorsSearch.search(testClassFilter.getBase(),scope,true).forEach(new PsiElementProcessorAdapter<PsiClass>(new PsiElementProcessor<PsiClass>(){
    public boolean execute(    final PsiClass aClass){
      if (testClassFilter.isAccepted(aClass))       found.add(aClass);
      return true;
    }
  }
));
  final PsiMethod[] suiteMethods=JavaPsiFacade.getInstance(manager.getProject()).getShortNamesCache().getMethodsByName(BaseTestRunner.SUITE_METHODNAME,scope);
  for (  final PsiMethod method : suiteMethods) {
    final PsiClass containingClass=method.getContainingClass();
    if (containingClass == null)     continue;
    if (containingClass instanceof PsiAnonymousClass)     continue;
    if (containingClass.hasModifierProperty(PsiModifier.ABSTRACT))     continue;
    if (containingClass.getContainingClass() != null && !containingClass.hasModifierProperty(PsiModifier.STATIC))     continue;
    if (JUnitUtil.isSuiteMethod(method)) {
      found.add(containingClass);
    }
  }
  boolean hasJunit4=addAnnotatedMethods(manager,scope,testClassFilter,found,"org.junit.Test",true);
  hasJunit4|=addAnnotatedMethods(manager,scope,testClassFilter,found,"org.junit.runner.RunWith",false);
  return hasJunit4;
}
