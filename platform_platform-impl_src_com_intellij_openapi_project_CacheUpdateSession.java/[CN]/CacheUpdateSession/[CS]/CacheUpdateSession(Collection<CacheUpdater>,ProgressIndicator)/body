{
  List<CacheUpdater> processedUpdaters=new ArrayList<CacheUpdater>();
  LinkedHashSet<VirtualFile> set=ContainerUtil.newLinkedHashSet();
  List<Pair<CacheUpdater,Collection<VirtualFile>>> list=new ArrayList<Pair<CacheUpdater,Collection<VirtualFile>>>();
  try {
    int jobsCount=0;
    for (    CacheUpdater each : updaters) {
      indicator.checkCanceled();
      try {
        jobsCount+=each.getNumberOfPendingUpdateJobs();
        List<VirtualFile> updaterFiles=Arrays.asList(each.queryNeededFiles(indicator));
        processedUpdaters.add(each);
        set.addAll(updaterFiles);
        list.add(Pair.create(each,(Collection<VirtualFile>)new THashSet<VirtualFile>(updaterFiles)));
      }
 catch (      ProcessCanceledException e) {
        throw e;
      }
catch (      Throwable e) {
        LOG.error(e);
      }
    }
    myJobsToDo=jobsCount;
  }
 catch (  ProcessCanceledException e) {
    for (    CacheUpdater each : processedUpdaters) {
      each.canceled();
    }
    throw e;
  }
  myUpdatersWithFiles=ContainerUtil.createLockFreeCopyOnWriteList(list);
  myFilesToUpdate=ContainerUtil.newArrayList(set);
}
