{
  String buildNumber=ExtractBuildNumber();
  String url=DOWNLOAD_URL + URLEncoder.encode(pluginNode.getName(),"UTF8") + "&build="+ buildNumber;
  HttpURLConnection connection=(HttpURLConnection)new URL(url).openConnection();
  try {
    final ProgressIndicator pi=ProgressManager.getInstance().getProgressIndicator();
    pi.setText(IdeBundle.message("progress.connecting"));
    InputStream is=UrlConnectionUtil.getConnectionInputStream(connection,pi);
    if (is == null) {
      throw new IOException("Failed to open connection");
    }
    pi.setText(IdeBundle.message("progress.downloading.plugin",pluginNode.getName()));
    File file=File.createTempFile("plugin","download",new File(PathManagerEx.getPluginTempPath()));
    OutputStream fos=new BufferedOutputStream(new FileOutputStream(file,false));
    int responseCode=connection.getResponseCode();
switch (responseCode) {
case HttpURLConnection.HTTP_OK:
      break;
default :
    throw new IOException(IdeBundle.message("error.connection.failed.with.http.code.N",responseCode));
}
if (pluginNode.getSize().equals("-1")) {
  if (connection.getContentLength() == -1)   pi.setIndeterminate(true);
 else   pluginNode.setSize(Integer.toString(connection.getContentLength()));
}
boolean cleanFile=true;
try {
  is=new ProgressStream(packet ? count : 0,packet ? available : Integer.valueOf(pluginNode.getSize()).intValue(),is,pi);
  int c;
  while ((c=is.read()) != -1) {
    if (pi.isCanceled())     throw new RuntimeException(new InterruptedException());
    fos.write(c);
  }
  cleanFile=false;
}
 catch (RuntimeException e) {
  if (e.getCause() != null && e.getCause() instanceof InterruptedException)   return null;
 else   throw e;
}
 finally {
  fos.close();
  if (cleanFile)   file.delete();
}
String fileName=null;
String contentDisposition=connection.getHeaderField("Content-Disposition");
if (contentDisposition == null || contentDisposition.indexOf(FILENAME) < 0) {
  String usedURL=connection.getURL().toString();
  int startPos=usedURL.lastIndexOf("/");
  fileName=usedURL.substring(startPos + 1);
  if (fileName.length() == 0) {
    throw new IOException("No filename returned by server");
  }
}
 else {
  int startIdx=contentDisposition.indexOf(FILENAME);
  fileName=contentDisposition.substring(startIdx + FILENAME.length(),contentDisposition.length());
  if (fileName.startsWith("\"") && fileName.endsWith("\"")) {
    fileName=fileName.substring(1,fileName.length() - 1);
  }
  if (fileName.indexOf('\\') >= 0 || fileName.indexOf('/') >= 0 || fileName.indexOf(File.separatorChar) >= 0 || fileName.indexOf('\"') >= 0) {
    FileUtil.delete(file);
    throw new IOException("Invalid filename returned by server");
  }
}
File newFile=new File(file.getParentFile(),fileName);
FileUtil.rename(file,newFile);
return newFile;
}
  finally {
connection.disconnect();
}
}
