{
  PsiBuilder.Marker marker=builder.mark();
  if (BinaryExpression.EQUALITY.parseBinary(builder,parser)) {
    IElementType type=builder.getTokenType();
    if (ParserUtils.getToken(builder,REGEX_DO)) {
      ParserUtils.getToken(builder,mNLS);
      if (!BinaryExpression.EQUALITY.parseBinary(builder,parser)) {
        builder.error(GroovyBundle.message("expression.expected"));
      }
      PsiBuilder.Marker newMarker=marker.precede();
      marker.done(type == mREGEX_FIND ? REGEX_FIND_EXPRESSION : REGEX_MATCH_EXPRESSION);
      if (REGEX_DO.contains(builder.getTokenType())) {
        subParse(builder,newMarker,parser);
      }
 else {
        newMarker.drop();
      }
    }
 else {
      marker.drop();
    }
    return true;
  }
 else {
    marker.drop();
    return false;
  }
}
