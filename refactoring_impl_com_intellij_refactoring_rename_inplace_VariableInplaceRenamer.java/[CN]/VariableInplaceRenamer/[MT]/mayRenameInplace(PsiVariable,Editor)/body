{
  if (!editor.getSettings().isVariableInplaceRenameEnabled())   return false;
  if (!(elementToRename instanceof PsiLocalVariable) && !(elementToRename instanceof PsiParameter))   return false;
  SearchScope useScope=elementToRename.getUseScope();
  if (!(useScope instanceof LocalSearchScope))   return false;
  PsiElement[] scopeElements=((LocalSearchScope)useScope).getScope();
  if (scopeElements.length > 1)   return false;
  PsiFile containingFile=elementToRename.getContainingFile();
  if (!PsiTreeUtil.isAncestor(containingFile,scopeElements[0],false))   return false;
  String stringToSearch=RefactoringUtil.getStringToSearch(elementToRename,true);
  List<UsageInfo> usages=new ArrayList<UsageInfo>();
  if (stringToSearch != null) {
    RefactoringUtil.addUsagesInStringsAndComments(elementToRename,stringToSearch,usages,new RefactoringUtil.UsageInfoFactory(){
      public UsageInfo createUsageInfo(      PsiElement usage,      int startOffset,      int endOffset){
        return new UsageInfo(usage);
      }
    }
);
  }
  return usages.isEmpty();
}
