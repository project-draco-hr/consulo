{
  if (dataId.equals(DataConstantsEx.INSPECTION_VIEW))   return this;
  TreePath[] paths=myTree.getSelectionPaths();
  if (paths == null)   return null;
  if (paths.length > 1) {
    if (DataConstantsEx.PSI_ELEMENT_ARRAY.equals(dataId)) {
      return collectPsiElements();
    }
 else {
      return null;
    }
  }
  TreePath path=paths[0];
  InspectionTreeNode selectedNode=(InspectionTreeNode)path.getLastPathComponent();
  if (selectedNode instanceof RefElementNode) {
    final RefElementNode refElementNode=(RefElementNode)selectedNode;
    RefElement refElement=refElementNode.getElement();
    final RefElement item;
    if (refElement instanceof RefImplicitConstructor) {
      item=((RefImplicitConstructor)refElement).getOwnerClass();
    }
 else {
      item=refElement;
    }
    if (!item.isValid())     return null;
    PsiElement psiElement=item.getElement();
    if (psiElement == null)     return null;
    if (refElementNode.getProblem() != null) {
      psiElement=refElementNode.getProblem().getPsiElement();
      if (psiElement == null)       return null;
    }
    if (DataConstants.NAVIGATABLE.equals(dataId)) {
      final VirtualFile virtualFile=psiElement.getContainingFile().getVirtualFile();
      if (virtualFile != null && virtualFile.isValid()) {
        return new OpenFileDescriptor(myProject,virtualFile,psiElement.getTextOffset());
      }
    }
 else     if (DataConstants.PSI_ELEMENT.equals(dataId)) {
      return psiElement;
    }
  }
 else   if (selectedNode instanceof ProblemDescriptionNode && DataConstants.NAVIGATABLE.equals(dataId)) {
    PsiElement psiElement=((ProblemDescriptionNode)selectedNode).getDescriptor().getPsiElement();
    if (psiElement == null || !psiElement.isValid())     return null;
    return new OpenFileDescriptor(myProject,psiElement.getContainingFile().getVirtualFile(),psiElement.getTextOffset());
  }
  return null;
}
