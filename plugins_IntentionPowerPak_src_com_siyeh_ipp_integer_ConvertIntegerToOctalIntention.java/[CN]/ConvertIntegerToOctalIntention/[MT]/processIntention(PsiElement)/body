{
  final PsiExpression expression=(PsiExpression)element;
  @NonNls String textString=expression.getText();
  final int textLength=textString.length();
  final char lastChar=textString.charAt(textLength - 1);
  final boolean isLong=lastChar == 'l' || lastChar == 'L';
  if (isLong) {
    textString=textString.substring(0,textLength - 1);
  }
  BigInteger value;
  if (textString.startsWith("0x")) {
    final String rawTextString=textString.substring(2);
    value=new BigInteger(rawTextString,16);
  }
 else {
    value=new BigInteger(textString,10);
    final PsiElement parent=expression.getParent();
    if (parent instanceof PsiPrefixExpression) {
      final PsiPrefixExpression prefixExpression=(PsiPrefixExpression)parent;
      final IElementType tokenType=prefixExpression.getOperationTokenType();
      if (JavaTokenType.MINUS == tokenType) {
        if (isLong) {
          value=value.xor(LONG_BINARY_ONES).add(BigInteger.ONE);
        }
 else {
          value=value.xor(INT_BINARY_ONES).add(BigInteger.ONE);
        }
        @NonNls String hexString='0' + value.toString(8);
        if (isLong) {
          hexString+='L';
        }
        replaceExpression(hexString,prefixExpression);
        return;
      }
    }
  }
  String octString='0' + value.toString(8);
  if (isLong) {
    octString+='L';
  }
  replaceExpression(octString,expression);
}
