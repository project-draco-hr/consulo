{
  Map<PsiFile,Map<DependencyRule,Set<PsiFile>>> result=new HashMap<PsiFile,Map<DependencyRule,Set<PsiFile>>>();
  DependencyValidationManager validator=DependencyValidationManager.getInstance(myProject);
  for (  PsiFile file : getDirectDependencies().keySet()) {
    Set<PsiFile> deps=getDirectDependencies().get(file);
    Map<DependencyRule,Set<PsiFile>> illegal=null;
    for (    PsiFile dependency : deps) {
      final DependencyRule rule=isBackward() ? validator.getViolatorDependencyRule(dependency,file) : validator.getViolatorDependencyRule(file,dependency);
      if (rule != null) {
        if (illegal == null) {
          illegal=new HashMap<DependencyRule,Set<PsiFile>>();
          result.put(file,illegal);
        }
        Set<PsiFile> illegalFilesByRule=illegal.get(rule);
        if (illegalFilesByRule == null) {
          illegalFilesByRule=new HashSet<PsiFile>();
        }
        illegalFilesByRule.add(dependency);
        illegal.put(rule,illegalFilesByRule);
      }
    }
  }
  return result;
}
