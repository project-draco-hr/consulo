{
  final ShapeInfo shape=new ShapeInfo();
  shape.path=getEffectiveLayout().createShapeTransform(getSize());
  shape.insets=shape.path.transformInsets(getLayoutInsets());
  shape.labelPath=shape.path.createTransform(getSelectedLabel().getBounds());
  shape.labelBottomY=shape.labelPath.getMaxY() + shape.labelPath.deltaY(1);
  shape.labelTopY=shape.labelPath.getY();
  shape.labelLeftX=shape.labelPath.getX();
  shape.labelRightX=shape.labelPath.getX() + shape.labelPath.deltaX(shape.labelPath.getWidth());
  Insets border=myBorder.getEffectiveBorder();
  TabInfo selected=getSelectedInfo();
  boolean first=myLastLayoutPass.getPreviousFor(selected) == null;
  boolean last=myLastLayoutPass.getNextFor(selected) == null;
  boolean leftEdge=!isSingleRow() && first && border.left == 0;
  boolean rightEdge=!isSingleRow() && last && Boolean.TRUE.equals(myInfo2Label.get(selected).getClientProperty(STRETCHED_BY_WIDTH))&& border.right == 0;
  if (leftEdge) {
    shape.path.moveTo(shape.insets.left,shape.labelTopY + shape.labelPath.deltaY(getEdgeArcSize()));
    shape.path.quadTo(shape.labelLeftX,shape.labelTopY,shape.labelLeftX + shape.labelPath.deltaX(getEdgeArcSize()),shape.labelTopY);
    shape.path.lineTo(shape.labelRightX - shape.labelPath.deltaX(getArcSize()),shape.labelTopY);
  }
 else {
    shape.path.moveTo(shape.insets.left,shape.labelBottomY);
    shape.path.lineTo(shape.labelLeftX,shape.labelBottomY);
    shape.path.lineTo(shape.labelLeftX,shape.labelTopY + shape.labelPath.deltaY(getArcSize()));
    shape.path.quadTo(shape.labelLeftX,shape.labelTopY,shape.labelLeftX + shape.labelPath.deltaX(getArcSize()),shape.labelTopY);
  }
  int lastX=shape.path.getWidth() - shape.path.deltaX(shape.insets.right + 1);
  if (isStealthModeEffective()) {
    shape.path.lineTo(lastX - shape.path.deltaX(getArcSize()),shape.labelTopY);
    shape.path.quadTo(lastX,shape.labelTopY,lastX,shape.labelTopY + shape.path.deltaY(getArcSize()));
    shape.path.lineTo(lastX,shape.labelBottomY);
  }
 else {
    if (rightEdge) {
      shape.path.lineTo(shape.labelRightX + 1 - shape.path.deltaX(getArcSize()),shape.labelTopY);
      shape.path.quadTo(shape.labelRightX + 1,shape.labelTopY,shape.labelRightX + 1,shape.labelTopY + shape.path.deltaY(getArcSize()));
    }
 else {
      shape.path.lineTo(shape.labelRightX - shape.path.deltaX(getArcSize()),shape.labelTopY);
      shape.path.quadTo(shape.labelRightX,shape.labelTopY,shape.labelRightX,shape.labelTopY + shape.path.deltaY(getArcSize()));
    }
    if (myLastLayoutPass.hasCurveSpaceFor(selected)) {
      shape.path.lineTo(shape.labelRightX,shape.labelBottomY - shape.path.deltaY(getArcSize()));
      shape.path.quadTo(shape.labelRightX,shape.labelBottomY,shape.labelRightX + shape.path.deltaX(getArcSize()),shape.labelBottomY);
    }
 else {
      if (rightEdge) {
        shape.path.lineTo(shape.labelRightX + 1,shape.labelBottomY);
      }
 else {
        shape.path.lineTo(shape.labelRightX,shape.labelBottomY);
      }
    }
  }
  if (!rightEdge) {
    shape.path.lineTo(lastX,shape.labelBottomY);
  }
  if (isStealthModeEffective()) {
    shape.path.closePath();
  }
  shape.fillPath=shape.path.copy();
  if (!isHideTabs()) {
    shape.fillPath.lineTo(lastX,shape.labelBottomY + shape.fillPath.deltaY(1));
    shape.fillPath.lineTo(shape.labelLeftX,shape.labelBottomY + shape.fillPath.deltaY(1));
    shape.fillPath.closePath();
  }
  return shape;
}
