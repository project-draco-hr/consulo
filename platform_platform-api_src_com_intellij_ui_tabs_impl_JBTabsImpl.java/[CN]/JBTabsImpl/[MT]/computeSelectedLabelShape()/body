{
  final ShapeInfo shape=new ShapeInfo();
  shape.path=getEffectiveLayout().createShapeTransform(getSize());
  shape.insets=shape.path.transformInsets(getLayoutInsets());
  shape.labelPath=shape.path.createTransform(getSelectedLabel().getBounds());
  shape.labelBottomY=shape.labelPath.getMaxY() + shape.labelPath.deltaY(1);
  shape.labelTopY=shape.labelPath.getY();
  shape.labelLeftX=shape.labelPath.getX();
  shape.labelRightX=shape.labelPath.getX() + shape.labelPath.deltaX(shape.labelPath.getWidth());
  shape.path.moveTo(shape.insets.left,shape.labelBottomY);
  shape.path.lineTo(shape.labelLeftX,shape.labelBottomY);
  shape.path.lineTo(shape.labelLeftX,shape.labelTopY + shape.labelPath.deltaY(getArcSize()));
  shape.path.quadTo(shape.labelLeftX,shape.labelTopY,shape.labelLeftX + shape.labelPath.deltaX(getArcSize()),shape.labelTopY);
  int lastX=shape.path.getWidth() - shape.path.deltaX(shape.insets.right + 1);
  if (isStealthModeEffective()) {
    shape.path.lineTo(lastX - shape.path.deltaX(getArcSize()),shape.labelTopY);
    shape.path.quadTo(lastX,shape.labelTopY,lastX,shape.labelTopY + shape.path.deltaY(getArcSize()));
    shape.path.lineTo(lastX,shape.labelBottomY);
  }
 else {
    shape.path.lineTo(shape.labelRightX - shape.path.deltaX(getArcSize()),shape.labelTopY);
    shape.path.quadTo(shape.labelRightX,shape.labelTopY,shape.labelRightX,shape.labelTopY + shape.path.deltaY(getArcSize()));
    if (myLastLayoutPass.hasCurveSpaceFor(getSelectedInfo())) {
      shape.path.lineTo(shape.labelRightX,shape.labelBottomY - shape.path.deltaY(getArcSize()));
      shape.path.quadTo(shape.labelRightX,shape.labelBottomY,shape.labelRightX + shape.path.deltaX(getArcSize()),shape.labelBottomY);
    }
 else {
      shape.path.lineTo(shape.labelRightX,shape.labelBottomY);
    }
  }
  shape.path.lineTo(lastX,shape.labelBottomY);
  if (isStealthModeEffective()) {
    shape.path.closePath();
  }
  shape.fillPath=shape.path.copy();
  if (!isHideTabs()) {
    shape.fillPath.lineTo(lastX,shape.labelBottomY + shape.fillPath.deltaY(1));
    shape.fillPath.lineTo(shape.labelLeftX,shape.labelBottomY + shape.fillPath.deltaY(1));
    shape.fillPath.closePath();
  }
  return shape;
}
