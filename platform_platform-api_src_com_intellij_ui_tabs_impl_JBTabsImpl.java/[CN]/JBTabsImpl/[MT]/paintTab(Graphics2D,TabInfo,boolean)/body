{
  int tabIndex=myVisibleInfos.indexOf(each);
  final int arc=getArcSize();
  Color topBlickColor=getTopBlickColor();
  Color rightBlockColor=getRightBlockColor();
  Color boundsColor=getBoundsColor();
  Color backgroundColor=getBackground();
  final Color tabColor=each.getTabColor();
  if (tabColor != null) {
    backgroundColor=tabColor;
    boundsColor=tabColor.darker();
    topBlickColor=tabColor.brighter().brighter();
    rightBlockColor=tabColor;
  }
  final TabInfo selected=getSelectedInfo();
  final int selectionTabVShift=getSelectionTabVShift();
  final TabLabel eachLabel=myInfo2Label.get(each);
  if (eachLabel.getBounds().width == 0)   return;
  final TabInfo prev=myLastLayoutPass.getPreviousFor(myVisibleInfos.get(tabIndex));
  final TabInfo next=myLastLayoutPass.getNextFor(myVisibleInfos.get(tabIndex));
  boolean firstShowing=prev == null;
  if (!firstShowing && !leftGhostExists) {
    firstShowing=myInfo2Label.get(prev).getBounds().width == 0;
  }
  boolean lastShowing=next == null;
  if (!lastShowing) {
    lastShowing=myInfo2Label.get(next).getBounds().width == 0;
  }
  boolean leftFromSelection=selected != null && tabIndex == myVisibleInfos.indexOf(selected) - 1;
  final ShapeTransform shape=getEffectiveLayout().createShapeTransform(eachLabel.getBounds());
  int leftX=firstShowing ? shape.getX() : shape.getX() - shape.deltaX(arc + 1);
  int topY=shape.getY() + shape.deltaY(selectionTabVShift);
  int rigthX=!lastShowing && leftFromSelection ? shape.getMaxX() + shape.deltaX(arc + 1) : shape.getMaxX();
  int bottomY=shape.getMaxY() + shape.deltaY(1);
  shape.moveTo(leftX,bottomY);
  shape.lineTo(leftX,topY + shape.deltaY(arc));
  shape.quadTo(leftX,topY,leftX + shape.deltaX(arc),topY);
  shape.lineTo(rigthX - shape.deltaX(arc),topY);
  shape.quadTo(rigthX,topY,rigthX,topY + shape.deltaY(arc));
  shape.lineTo(rigthX,bottomY);
  if (!isSingleRow()) {
    final TablePassInfo info=myTableLayout.myLastTableLayout;
    if (!info.isInSelectionRow(each)) {
      shape.lineTo(rigthX,bottomY + shape.deltaY(getArcSize()));
      shape.lineTo(leftX,bottomY + shape.deltaY(getArcSize()));
      shape.lineTo(leftX,bottomY);
    }
  }
  shape.closePath();
  g2d.setColor(backgroundColor);
  g2d.fill(shape.getShape());
  final Line2D.Float gradientLine=shape.transformLine(0,topY,0,topY + shape.deltaY((int)(shape.getHeight() / 1.5)));
  final GradientPaint gp=new GradientPaint(gradientLine.x1,gradientLine.y1,shape.transformY1(backgroundColor.brighter().brighter(),backgroundColor),gradientLine.x2,gradientLine.y2,shape.transformY1(backgroundColor,backgroundColor.brighter().brighter()));
  final Paint old=g2d.getPaint();
  g2d.setPaint(gp);
  g2d.fill(shape.getShape());
  g2d.setPaint(old);
  g2d.setColor(topBlickColor);
  g2d.draw(shape.transformLine(leftX + shape.deltaX(arc + 1),topY + shape.deltaY(1),rigthX - shape.deltaX(arc - 1),topY + shape.deltaY(1)));
  g2d.setColor(rightBlockColor);
  g2d.draw(shape.transformLine(rigthX - shape.deltaX(1),topY + shape.deltaY(arc - 1),rigthX - shape.deltaX(1),bottomY));
  g2d.setColor(boundsColor);
  g2d.draw(shape.getShape());
}
