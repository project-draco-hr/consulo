{
  try {
    myHeaderFitSize=computeHeaderFitSize();
    final Collection<TabLabel> labels=myInfo2Label.values();
    for (    TabLabel each : labels) {
      each.setTabActionsAutoHide(myTabLabelActionsAutoHide);
    }
    List<TabInfo> visible=new ArrayList<TabInfo>();
    visible.addAll(myVisibleInfos);
    if (myDropInfo != null && !visible.contains(myDropInfo)) {
      if (getDropInfoIndex() >= 0 && getDropInfoIndex() < visible.size()) {
        visible.add(getDropInfoIndex(),myDropInfo);
      }
 else {
        visible.add(myDropInfo);
      }
    }
    if (isSingleRow()) {
      myLastLayoutPass=mySingleRowLayout.layoutSingleRow(visible);
      myTableLayout.myLastTableLayout=null;
    }
 else {
      myLastLayoutPass=myTableLayout.layoutTable(visible);
      mySingleRowLayout.myLastSingRowLayout=null;
    }
    if (isStealthModeEffective() && !isHideTabs()) {
      final TabLabel label=getSelectedLabel();
      final Rectangle bounds=label.getBounds();
      final Insets insets=getLayoutInsets();
      layout(label,insets.left,bounds.y,getWidth() - insets.right - insets.left,bounds.height);
    }
    moveDraggedTabLabel();
    myTabActionsAutoHideListener.processMouseOver();
  }
  finally {
    myForcedRelayout=false;
  }
  applyResetComponents();
}
