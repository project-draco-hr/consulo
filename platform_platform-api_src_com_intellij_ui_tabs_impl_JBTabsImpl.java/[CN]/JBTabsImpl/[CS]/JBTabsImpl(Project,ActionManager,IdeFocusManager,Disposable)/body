{
  myProject=project;
  myActionManager=actionManager;
  myFocusManager=focusManager != null ? focusManager : IdeFocusManager.getGlobalInstance();
  setOpaque(true);
  setPaintBorder(-1,-1,-1,-1);
  Disposer.register(parent,this);
  myNavigationActions=new DefaultActionGroup();
  if (myActionManager != null) {
    myNextAction=new SelectNextAction(this,myActionManager);
    myPrevAction=new SelectPreviousAction(this,myActionManager);
    myNavigationActions.add(myNextAction);
    myNavigationActions.add(myPrevAction);
  }
  setUiDecorator(null);
  mySingleRowLayout=createSingleRowLayout();
  myLayout=mySingleRowLayout;
  myPopupListener=new PopupMenuListener(){
    @Override public void popupMenuWillBecomeVisible(    final PopupMenuEvent e){
    }
    @Override public void popupMenuWillBecomeInvisible(    final PopupMenuEvent e){
      disposePopupListener();
    }
    @Override public void popupMenuCanceled(    final PopupMenuEvent e){
      disposePopupListener();
    }
  }
;
  addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    final MouseEvent e){
      if (mySingleRowLayout.myLastSingRowLayout != null && mySingleRowLayout.myLastSingRowLayout.moreRect != null && mySingleRowLayout.myLastSingRowLayout.moreRect.contains(e.getPoint())) {
        showMorePopup(e);
      }
    }
  }
);
  addMouseWheelListener(new MouseWheelListener(){
    @Override public void mouseWheelMoved(    MouseWheelEvent e){
      if (mySingleRowLayout.myLastSingRowLayout != null) {
        mySingleRowLayout.scroll(e.getUnitsToScroll() * mySingleRowLayout.getScrollUnitIncrement());
        revalidateAndRepaint(false);
      }
    }
  }
);
  myAnimator=new Animator("JBTabs Attractions",2,500,true){
    @Override public void paintNow(    final int frame,    final int totalFrames,    final int cycle){
      repaintAttractions();
    }
  }
;
  setFocusCycleRoot(true);
  setFocusTraversalPolicy(new LayoutFocusTraversalPolicy(){
    @Override public Component getDefaultComponent(    final Container aContainer){
      return getToFocus();
    }
  }
);
  add(mySingleRowLayout.myLeftGhost);
  add(mySingleRowLayout.myRightGhost);
  new LazyUiDisposable<JBTabsImpl>(parent,this,this){
    @Override protected void initialize(    @NotNull Disposable parent,    @NotNull JBTabsImpl child,    @Nullable Project project){
      if (project != null) {
        myProject=project;
      }
      Disposer.register(child,myAnimator);
      Disposer.register(child,new Disposable(){
        @Override public void dispose(){
          removeTimerUpdate();
        }
      }
);
      if (!myTestMode) {
        final IdeGlassPane gp=IdeGlassPaneUtil.find(child);
        if (gp != null) {
          gp.addMouseMotionPreprocessor(myTabActionsAutoHideListener,child);
          myGlassPane=gp;
        }
        UIUtil.addAwtListener(new AWTEventListener(){
          @Override public void eventDispatched(          final AWTEvent event){
            if (mySingleRowLayout.myMorePopup != null)             return;
            processFocusChange();
          }
        }
,AWTEvent.FOCUS_EVENT_MASK,child);
        myDragHelper=new DragHelper(child);
        myDragHelper.start();
      }
      if (myProject != null && myFocusManager == IdeFocusManager.getGlobalInstance()) {
        myFocusManager=IdeFocusManager.getInstance(myProject);
      }
    }
  }
;
}
