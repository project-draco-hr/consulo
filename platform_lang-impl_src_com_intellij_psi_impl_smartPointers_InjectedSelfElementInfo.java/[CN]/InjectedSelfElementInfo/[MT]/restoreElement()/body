{
  PsiElement hostContext=super.restoreElement();
  if (hostContext == null)   return null;
  Segment segment=myInjectedFileRangeInHostFile.getRange();
  if (segment == null)   return null;
  final TextRange rangeInHostFile=TextRange.create(segment);
  final Ref<PsiElement> result=new Ref<PsiElement>();
  final InjectedLanguageManager manager=InjectedLanguageManager.getInstance(getProject());
  PsiFile hostFile=hostContext.getContainingFile();
  PsiLanguageInjectionHost.InjectedPsiVisitor visitor=new PsiLanguageInjectionHost.InjectedPsiVisitor(){
    @Override public void visit(    @NotNull PsiFile injectedPsi,    @NotNull List<PsiLanguageInjectionHost.Shred> places){
      if (result.get() != null)       return;
      TextRange hostRange=manager.injectedToHost(injectedPsi,new TextRange(0,injectedPsi.getTextLength()));
      Document document=PsiDocumentManager.getInstance(getProject()).getDocument(injectedPsi);
      if (hostRange.contains(rangeInHostFile) && document instanceof DocumentWindow) {
        int start=((DocumentWindow)document).hostToInjected(rangeInHostFile.getStartOffset());
        int end=((DocumentWindow)document).hostToInjected(rangeInHostFile.getEndOffset());
        PsiElement element=findElementInside(injectedPsi,start,end,anchorClass,anchorLanguage);
        result.set(element);
      }
    }
  }
;
  PsiDocumentManager documentManager=PsiDocumentManager.getInstance(hostFile.getProject());
  Document document=documentManager.getDocument(hostFile);
  if (document != null && documentManager.isUncommited(document)) {
    List<DocumentWindow> documents=InjectedLanguageUtil.getCachedInjectedDocuments(hostFile);
    for (    DocumentWindow documentWindow : documents) {
      PsiFile injected=documentManager.getPsiFile(documentWindow);
      if (injected != null) {
        visitor.visit(injected,Collections.<PsiLanguageInjectionHost.Shred>emptyList());
      }
    }
  }
 else {
    InjectedLanguageUtil.enumerate(hostContext,hostFile,true,visitor);
  }
  return result.get();
}
