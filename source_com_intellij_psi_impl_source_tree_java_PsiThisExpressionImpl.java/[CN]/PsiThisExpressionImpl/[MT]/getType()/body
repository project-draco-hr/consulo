{
  PsiJavaCodeReferenceElement qualifier=getQualifier();
  if (qualifier != null) {
    PsiClass qualifierResolve=(PsiClass)qualifier.resolve();
    if (qualifierResolve != null)     return new PsiImmediateClassType(qualifierResolve,PsiSubstitutor.EMPTY);
    return new PsiClassReferenceType(qualifier);
  }
  for (PsiElement scope=getContext(); scope != null; scope=scope.getContext()) {
    if (scope instanceof PsiClass) {
      PsiClass aClass=(PsiClass)scope;
      return new PsiImmediateClassType(aClass,PsiSubstitutor.EMPTY);
    }
 else     if (scope instanceof JspFileImpl) {
      PsiClass baseClass=((JspFileImpl)scope).getBaseClass();
      if (baseClass == null)       baseClass=getManager().findClass("javax.servlet.jsp.HttpJspPage",getResolveScope());
      if (baseClass == null)       return PsiType.getJavaLangObject(getManager(),getResolveScope());
      final PsiClassType type=getManager().getElementFactory().createType(baseClass);
      return type;
    }
 else     if (scope instanceof PsiExpressionList && scope.getParent() instanceof PsiAnonymousClass) {
      scope=scope.getParent();
    }
 else     if (scope instanceof PsiCodeFragment) {
      PsiType fragmentThisType=((PsiCodeFragment)scope).getThisType();
      if (fragmentThisType != null)       return fragmentThisType;
    }
  }
  return null;
}
