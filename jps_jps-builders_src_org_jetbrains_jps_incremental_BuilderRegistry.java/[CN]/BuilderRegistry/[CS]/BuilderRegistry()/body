{
  for (  BuilderCategory category : BuilderCategory.values()) {
    myModuleLevelBuilders.put(category,new ArrayList<ModuleLevelBuilder>());
  }
  Set<String> compilableFileExtensions=new THashSet<String>(FileUtil.PATH_HASHING_STRATEGY);
  for (  BuilderService service : JpsServiceManager.getInstance().getExtensions(BuilderService.class)) {
    myTargetBuilders.addAll(service.createBuilders());
    final List<? extends ModuleLevelBuilder> moduleLevelBuilders=service.createModuleLevelBuilders();
    for (    ModuleLevelBuilder builder : moduleLevelBuilders) {
      List<String> extensions=builder.getCompilableFileExtensions();
      if (extensions == null) {
        LOG.info(builder.getClass().getName() + " builder returns 'null' from 'getCompilableFileExtensions' method so files for module-level builders won't be filtered");
        compilableFileExtensions=null;
      }
 else       if (compilableFileExtensions != null) {
        compilableFileExtensions.addAll(extensions);
      }
      myModuleLevelBuilders.get(builder.getCategory()).add(builder);
    }
    for (    BuildTargetType<?> type : service.getTargetTypes()) {
      String id=type.getTypeId();
      BuildTargetType<?> old=myTargetTypes.put(id,type);
      if (old != null) {
        LOG.error("Two build target types (" + type + ", "+ old+ ") use same id ("+ id+ ")");
      }
    }
  }
  if (compilableFileExtensions == null) {
    myModuleBuilderFileFilter=FileUtilRt.ALL_FILES;
  }
 else {
    final Set<String> finalCompilableFileExtensions=compilableFileExtensions;
    myModuleBuilderFileFilter=new FileFilter(){
      @Override public boolean accept(      File file){
        return finalCompilableFileExtensions.contains(FileUtilRt.getExtension(file.getName()));
      }
    }
;
  }
}
