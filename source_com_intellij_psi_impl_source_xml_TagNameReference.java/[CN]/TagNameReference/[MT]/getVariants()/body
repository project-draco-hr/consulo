{
  final List<XmlElementDescriptor> variants=new ArrayList<XmlElementDescriptor>();
  final XmlTag element=getElement();
  if (element instanceof JspDirective)   return EMPTY_ARRAY;
  if (!myStartTagFlag) {
    XmlTag fromJspTree=null;
    final PsiFile containingFile=element.getContainingFile();
    if (containingFile.getViewProvider().getBaseLanguage() == StdLanguages.JSP) {
      final JspFile jspFile=PsiUtil.getJspFile(containingFile);
      final int startOffset=element.getTextRange().getStartOffset() + getRangeInElement().getStartOffset();
      PsiElement current=jspFile.getDocument().findElementAt(startOffset);
      if (current != element && (current=PsiTreeUtil.getParentOfType(current,XmlText.class)) != null) {
        fromJspTree=((XmlText)current).getParentTag();
        if (XmlChildRole.EMPTY_TAG_END_FINDER.findChild(fromJspTree.getNode()) != null || XmlChildRole.CLOSING_TAG_NAME_FINDER.findChild(fromJspTree.getNode()) != null || fromJspTree instanceof JspXmlRootTag)         fromJspTree=null;
        while ((current=current.getPrevSibling()) != null) {
          if (current instanceof XmlTag) {
            final XmlTag xmlTag=(XmlTag)current;
            if (XmlChildRole.EMPTY_TAG_END_FINDER.findChild(xmlTag.getNode()) == null && XmlChildRole.CLOSING_TAG_NAME_FINDER.findChild(xmlTag.getNode()) == null) {
              fromJspTree=xmlTag;
              break;
            }
          }
        }
      }
    }
    final String name=element.getName();
    if (fromJspTree == null)     return new Object[]{name};
    return new Object[]{name,fromJspTree.getName()};
  }
  final Map<String,XmlElementDescriptor> descriptorsMap=new HashMap<String,XmlElementDescriptor>();
{
    PsiElement curElement=element.getParent();
    while (curElement instanceof XmlTag) {
      final XmlTag declarationTag=(XmlTag)curElement;
      final String namespace=declarationTag.getNamespace();
      if (!descriptorsMap.containsKey(namespace)) {
        final XmlElementDescriptor descriptor=declarationTag.getDescriptor();
        if (descriptor != null)         descriptorsMap.put(namespace,descriptor);
      }
      curElement=curElement.getContext();
    }
  }
  final List<String> namespaces=new ArrayList<String>(Arrays.asList(element.knownNamespaces()));
  namespaces.add(XmlUtil.EMPTY_URI);
  final Iterator<String> nsIterator=namespaces.iterator();
  final Set<XmlNSDescriptor> visited=new HashSet<XmlNSDescriptor>();
  while (nsIterator.hasNext()) {
    final String namespace=nsIterator.next();
    if (descriptorsMap.containsKey(namespace)) {
      final XmlElementDescriptor descriptor=descriptorsMap.get(namespace);
      variants.addAll(Arrays.asList(descriptor.getElementsDescriptors(element)));
      if (element instanceof HtmlTag) {
        HtmlUtil.addHtmlSpecificCompletions(descriptor,element,variants);
      }
      visited.add(descriptor.getNSDescriptor());
    }
 else {
      if (namespace == null)       continue;
      if (namespace.length() == 0 && !visited.isEmpty())       continue;
      XmlNSDescriptor nsDescriptor=element.getNSDescriptor(namespace,false);
      if (nsDescriptor == null && PsiUtil.isInJspFile(element))       nsDescriptor=PsiUtil.getJspFile(element).getDocument().getRootTag().getNSDescriptor(namespace,false);
      if (nsDescriptor != null && !visited.contains(nsDescriptor)) {
        visited.add(nsDescriptor);
        variants.addAll(Arrays.asList(nsDescriptor.getRootElementsDescriptors(PsiTreeUtil.getParentOfType(element,XmlDocument.class))));
      }
    }
  }
  final Iterator<XmlElementDescriptor> iterator=variants.iterator();
  String[] ret=new String[variants.size()];
  int index=0;
  while (iterator.hasNext()) {
    final XmlElementDescriptor descriptor=iterator.next();
    ret[index++]=descriptor.getName(element);
  }
  return ret;
}
