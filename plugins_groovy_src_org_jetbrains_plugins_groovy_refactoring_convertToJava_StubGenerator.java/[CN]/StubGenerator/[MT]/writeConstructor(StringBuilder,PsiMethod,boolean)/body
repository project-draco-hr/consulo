{
  LOG.assertTrue(constructor.isConstructor());
  if (!isEnum) {
    text.append("public ");
  }
  text.append(constructor.getName());
  GenerationUtil.writeParameterList(text,constructor.getParameterList().getParameters(),classNameProvider,null);
  final Set<String> throwsTypes=collectThrowsTypes(constructor,new THashSet<PsiMethod>());
  if (!throwsTypes.isEmpty()) {
    text.append("throws ").append(StringUtil.join(throwsTypes,", ")).append(' ');
  }
  text.append("{\n");
  if (constructor instanceof GrMethod) {
    final GrConstructorInvocation invocation=PsiImplUtil.getChainingConstructorInvocation((GrMethod)constructor);
    if (invocation != null) {
      final GroovyResolveResult resolveResult=resolveChainingConstructor((GrMethod)constructor);
      if (resolveResult != null) {
        text.append(invocation.isSuperCall() ? "super(" : "this(");
        writeStubConstructorInvocation(text,(PsiMethod)resolveResult.getElement(),resolveResult.getSubstitutor(),invocation);
        text.append(");");
      }
    }
  }
  text.append("\n}\n");
}
