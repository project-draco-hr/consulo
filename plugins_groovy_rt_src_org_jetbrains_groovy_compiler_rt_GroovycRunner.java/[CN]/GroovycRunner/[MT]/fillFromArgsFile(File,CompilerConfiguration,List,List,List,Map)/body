{
  String moduleClasspath=null;
  BufferedReader reader=null;
  FileInputStream stream;
  try {
    stream=new FileInputStream(argsFile);
    reader=new BufferedReader(new InputStreamReader(stream));
    String line;
    while ((line=reader.readLine()) != null && !line.equals(OUTPUTPATH)) {
      if (SRC_FILE.equals(line)) {
        final File file=new File(reader.readLine());
        srcFiles.add(file);
        String s;
        while (!END.equals(s=reader.readLine())) {
          class2File.put(s,file);
        }
      }
    }
    while (line != null) {
      if (line.startsWith(PATCHERS)) {
        String s;
        while (!END.equals(s=reader.readLine())) {
          try {
            final CompilationUnitPatcher patcher=(CompilationUnitPatcher)Class.forName(s).newInstance();
            patchers.add(patcher);
          }
 catch (          InstantiationException e) {
            addExceptionInfo(compilerMessages,e,"Couldn't instantiate " + s);
          }
catch (          IllegalAccessException e) {
            addExceptionInfo(compilerMessages,e,"Couldn't instantiate " + s);
          }
catch (          ClassNotFoundException e) {
            addExceptionInfo(compilerMessages,e,"Couldn't instantiate " + s);
          }
        }
      }
      if (line.startsWith(ENCODING)) {
        compilerConfiguration.setSourceEncoding(reader.readLine());
      }
      if (line.startsWith(OUTPUTPATH)) {
        compilerConfiguration.setTargetDirectory(reader.readLine());
      }
      line=reader.readLine();
    }
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    try {
      reader.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
 finally {
      argsFile.delete();
    }
  }
  return moduleClasspath;
}
