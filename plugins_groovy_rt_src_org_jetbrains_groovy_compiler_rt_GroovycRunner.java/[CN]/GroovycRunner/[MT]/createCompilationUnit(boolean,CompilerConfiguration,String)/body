{
  config.setClasspath("");
  final GroovyClassLoader classLoader=buildClassLoaderFor(config);
  final GroovyClassLoader transformLoader=new GroovyClassLoader(classLoader){
    public Enumeration getResources(    String name) throws IOException {
      if (name.endsWith("org.codehaus.groovy.transform.ASTTransformation")) {
        final Enumeration resources=super.getResources(name);
        final ArrayList list=Collections.list(resources);
        for (Iterator iterator=list.iterator(); iterator.hasNext(); ) {
          String file=((URL)iterator.next()).getFile();
          System.out.println("Enumerated:" + file);
          if (file.startsWith(finalOutput) || file.startsWith("/" + finalOutput)) {
            iterator.remove();
          }
        }
        return Collections.enumeration(list);
      }
      return super.getResources(name);
    }
  }
;
  CompilationUnit unit;
  try {
    unit=new CompilationUnit(config,null,classLoader,transformLoader){
      public void gotoPhase(      int phase) throws CompilationFailedException {
        super.gotoPhase(phase);
        if (phase <= Phases.ALL) {
          System.out.println(PRESENTABLE_MESSAGE + (forStubs ? "Groovy stub generator: " : "Groovy compiler: ") + getPhaseDescription());
        }
      }
    }
;
  }
 catch (  NoSuchMethodError e) {
    unit=new CompilationUnit(config,null,classLoader){
      public void gotoPhase(      int phase) throws CompilationFailedException {
        super.gotoPhase(phase);
        if (phase <= Phases.ALL) {
          System.out.println(PRESENTABLE_MESSAGE + (forStubs ? "Groovy stub generator: " : "Groovy compiler: ") + getPhaseDescription());
        }
      }
    }
;
  }
  if (forStubs) {
    try {
      addStubGeneration(config,unit);
    }
 catch (    LinkageError e) {
    }
  }
  return unit;
}
