{
  GroovyClassLoader classLoader=AccessController.doPrivileged(new PrivilegedAction<GroovyClassLoader>(){
    public GroovyClassLoader run(){
      return new GroovyClassLoader(getClass().getClassLoader(),compilerConfiguration){
        public Class loadClass(        String name,        boolean lookupScriptFiles,        boolean preferClassOverScript) throws ClassNotFoundException, CompilationFailedException {
          Class aClass;
          try {
            aClass=super.loadClass(name,lookupScriptFiles,preferClassOverScript);
          }
 catch (          NoClassDefFoundError e) {
            throw new ClassNotFoundException(name);
          }
catch (          LinkageError e) {
            throw new RuntimeException("Problem loading class " + name,e);
          }
          ensureWellFormed(aClass,new HashSet<Class>());
          return aClass;
        }
        private void ensureWellFormed(        Type aClass,        Set<Class> visited) throws ClassNotFoundException {
          if (aClass instanceof Class) {
            ensureWellFormed((Class)aClass,visited);
          }
 else           if (aClass instanceof ParameterizedType) {
            ensureWellFormed(((ParameterizedType)aClass).getOwnerType(),visited);
            for (            Type type : ((ParameterizedType)aClass).getActualTypeArguments()) {
              ensureWellFormed(type,visited);
            }
          }
 else           if (aClass instanceof WildcardType) {
            for (            Type type : ((WildcardType)aClass).getLowerBounds()) {
              ensureWellFormed(type,visited);
            }
            for (            Type type : ((WildcardType)aClass).getUpperBounds()) {
              ensureWellFormed(type,visited);
            }
          }
 else           if (aClass instanceof GenericArrayType) {
            ensureWellFormed(((GenericArrayType)aClass).getGenericComponentType(),visited);
          }
        }
        private void ensureWellFormed(        Class aClass,        Set<Class> visited) throws ClassNotFoundException {
          String name=aClass.getName();
          if (resourceLoader.getSourceFile(name) != null && visited.add(aClass)) {
            try {
              for (              Method method : aClass.getDeclaredMethods()) {
                ensureWellFormed(method.getGenericReturnType(),visited);
                for (                Type type : method.getGenericExceptionTypes()) {
                  ensureWellFormed(type,visited);
                }
                for (                Type type : method.getGenericParameterTypes()) {
                  ensureWellFormed(type,visited);
                }
              }
              for (              Field field : aClass.getDeclaredFields()) {
                ensureWellFormed(field.getGenericType(),visited);
              }
              for (              Class inner : aClass.getDeclaredClasses()) {
                ensureWellFormed(inner,visited);
              }
              Type superclass=aClass.getGenericSuperclass();
              if (superclass != null) {
                ensureWellFormed(aClass,visited);
              }
              for (              Type intf : aClass.getGenericInterfaces()) {
                ensureWellFormed(intf,visited);
              }
            }
 catch (            LinkageError e) {
              throw new ClassNotFoundException(name);
            }
catch (            TypeNotPresentException e) {
              throw new ClassNotFoundException(name);
            }
          }
        }
      }
;
    }
  }
);
  classLoader.setResourceLoader(resourceLoader);
  return classLoader;
}
