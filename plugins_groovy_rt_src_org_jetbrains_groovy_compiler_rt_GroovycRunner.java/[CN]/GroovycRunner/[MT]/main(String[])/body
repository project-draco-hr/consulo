{
  if (ourController != null) {
    try {
      ourController.startCPUProfiling(ProfilingModes.CPU_SAMPLING,null);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  if (args.length != 2) {
    System.err.println("There is no arguments for groovy compiler");
    return;
  }
  final boolean forStubs="stubs".equals(args[0]);
  final File argsFile=new File(args[1]);
  if (!argsFile.exists()) {
    System.err.println("Arguments file for groovy compiler not found");
    return;
  }
  try {
    final CompilerConfiguration compilerConfiguration=new CompilerConfiguration();
    compilerConfiguration.setOutput(new PrintWriter(System.err));
    compilerConfiguration.setWarningLevel(WarningMessage.PARANOIA);
    final List compilerMessages=new ArrayList();
    final List patchers=new ArrayList();
    final List srcFiles=new ArrayList();
    final Map class2File=new HashMap();
    final String moduleClasspath=fillFromArgsFile(argsFile,compilerConfiguration,patchers,compilerMessages,srcFiles,class2File);
    if (srcFiles.isEmpty())     return;
    System.out.println(PRESENTABLE_MESSAGE + "Groovy compiler: loading sources...");
    final CompilationUnit unit=createCompilationUnit(moduleClasspath,forStubs,compilerConfiguration);
    addSources(forStubs,srcFiles,unit);
    runPatchers(patchers,compilerMessages,class2File,unit);
    System.out.println(PRESENTABLE_MESSAGE + "Groovyc: compiling...");
    final List compiledFiles=GroovyCompilerWrapper.compile(compilerMessages,forStubs,unit);
    System.out.println(CLEAR_PRESENTABLE);
    System.out.println();
    reportCompiledItems(compiledFiles);
    System.out.println();
    if (compiledFiles.isEmpty()) {
      reportNotCompiledItems(srcFiles);
    }
    int errorCount=0;
    for (int i=0; i < compilerMessages.size(); i++) {
      CompilerMessage message=(CompilerMessage)compilerMessages.get(i);
      if (message.getCategory() == CompilerMessage.ERROR) {
        if (errorCount > 100) {
          continue;
        }
        errorCount++;
      }
      printMessage(message);
    }
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
 finally {
    if (ourController != null) {
      try {
        ourController.captureSnapshot(ProfilingModes.SNAPSHOT_WITHOUT_HEAP);
        ourController.stopCPUProfiling();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
}
