{
  if (args.length != 2) {
    System.err.println("There is no arguments for groovy compiler");
    return;
  }
  final boolean forStubs="stubs".equals(args[0]);
  final File argsFile=new File(args[1]);
  if (!argsFile.exists()) {
    System.err.println("Arguments file for groovy compiler not found");
    return;
  }
  try {
    final CompilerConfiguration compilerConfiguration=new CompilerConfiguration();
    compilerConfiguration.setOutput(new PrintWriter(System.err));
    compilerConfiguration.setWarningLevel(WarningMessage.PARANOIA);
    final List<CompilerMessage> compilerMessages=new ArrayList<CompilerMessage>();
    final List<CompilationUnitPatcher> patchers=new ArrayList<CompilationUnitPatcher>();
    final List<File> srcFiles=new ArrayList<File>();
    final String[] finalOutput=new String[1];
    fillFromArgsFile(argsFile,compilerConfiguration,patchers,compilerMessages,srcFiles,finalOutput);
    if (srcFiles.isEmpty())     return;
    if (forStubs) {
      Map<String,Object> options=new HashMap<String,Object>();
      options.put("stubDir",compilerConfiguration.getTargetDirectory());
      options.put("keepStubs",Boolean.TRUE);
      compilerConfiguration.setJointCompilationOptions(options);
      compilerConfiguration.setTargetBytecode(CompilerConfiguration.POST_JDK5);
    }
    System.out.println(PRESENTABLE_MESSAGE + "Groovyc: loading sources...");
    final CompilationUnit unit=createCompilationUnit(forStubs,compilerConfiguration,finalOutput[0]);
    addSources(forStubs,srcFiles,unit);
    runPatchers(patchers,compilerMessages,unit);
    System.out.println(PRESENTABLE_MESSAGE + "Groovyc: compiling...");
    final List compiledFiles=GroovyCompilerWrapper.compile(compilerMessages,forStubs,unit);
    System.out.println(CLEAR_PRESENTABLE);
    System.out.println();
    reportCompiledItems(compiledFiles);
    System.out.println();
    if (compiledFiles.isEmpty()) {
      reportNotCompiledItems(srcFiles);
    }
    int errorCount=0;
    for (    CompilerMessage message : compilerMessages) {
      if (message.getCategory() == CompilerMessage.ERROR) {
        if (errorCount > 100) {
          continue;
        }
        errorCount++;
      }
      printMessage(message);
    }
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}
