{
  PsiMethod newMethod;
  if (myIsChainedConstructor) {
    newMethod=myElementFactory.createConstructor();
  }
 else {
    newMethod=myElementFactory.createMethod(myMethodName,myReturnType);
    PsiUtil.setModifierProperty(newMethod,PsiModifier.STATIC,isStatic);
  }
  PsiUtil.setModifierProperty(newMethod,myMethodVisibility,true);
  if (myTypeParameterList != null) {
    newMethod.getTypeParameterList().replace(myTypeParameterList);
  }
  PsiCodeBlock body=newMethod.getBody();
  LOG.assertTrue(body != null);
  boolean isFinal=CodeStyleSettingsManager.getSettings(myProject).GENERATE_FINAL_PARAMETERS;
  PsiParameterList list=newMethod.getParameterList();
  for (  ParameterTablePanel.VariableData data : myVariableDatum) {
    if (data.passAsParameter) {
      PsiParameter parm=myElementFactory.createParameter(data.name,data.type);
      if (isFinal) {
        PsiUtil.setModifierProperty(parm,PsiModifier.FINAL,true);
      }
      list.add(parm);
    }
 else {
      @NonNls StringBuilder buffer=new StringBuilder();
      if (isFinal) {
        buffer.append("final ");
      }
      buffer.append("int ");
      buffer.append(data.name);
      buffer.append("=;");
      String text=buffer.toString();
      PsiDeclarationStatement declaration=(PsiDeclarationStatement)myElementFactory.createStatementFromText(text,null);
      declaration=(PsiDeclarationStatement)myStyleManager.reformat(declaration);
      final PsiTypeElement typeElement=myElementFactory.createTypeElement(data.type);
      ((PsiVariable)declaration.getDeclaredElements()[0]).getTypeElement().replace(typeElement);
      body.add(declaration);
    }
  }
  PsiReferenceList throwsList=newMethod.getThrowsList();
  for (  PsiClassType exception : exceptions) {
    throwsList.add(JavaPsiFacade.getInstance(myManager.getProject()).getElementFactory().createReferenceElementByType(exception));
  }
  if (myNullConditionalCheck) {
    final boolean isNullCheckReturnNull=(myHasExpressionOutput ? 1 : 0) + (myGenerateConditionalExit ? 1 : 0) + myOutputVariables.length <= 1;
    if (isNullCheckReturnNull && PsiUtil.isLanguageLevel5OrHigher(myElements[0])) {
      final PsiClass nullableAnnotationClass=JavaPsiFacade.getInstance(myProject).findClass(AnnotationUtil.NULLABLE,GlobalSearchScope.allScope(myProject));
      if (nullableAnnotationClass != null) {
        new AddNullableNotNullAnnotationFix(AnnotationUtil.NULLABLE,newMethod,AnnotationUtil.NOT_NULL).invoke(myProject,myEditor,myTargetClass.getContainingFile());
      }
    }
  }
  return (PsiMethod)myStyleManager.reformat(newMethod);
}
