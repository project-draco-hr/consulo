{
  if (aClass.isInterface() || aClass instanceof PsiTypeParameter || aClass.getMethods().length != 0 || aClass.hasModifierProperty(PsiModifier.ABSTRACT)) {
    return null;
  }
  final PsiClass superClass=getSuperIfUnique(aClass);
  if (superClass == null)   return null;
  final List<InheritorsStatisticsSearchResult> topInheritors=InheritorsStatisticalDataSearch.search(superClass,aClass,aClass.getResolveScope(),MIN_PERCENT_RATIO);
  if (topInheritors.isEmpty()) {
    return null;
  }
  final Collection<LocalQuickFix> topInheritorsQuickFix=new ArrayList<LocalQuickFix>(topInheritors.size());
  boolean isFirst=true;
  for (  final InheritorsStatisticsSearchResult searchResult : topInheritors) {
    LocalQuickFix quickFix=new ChangeSuperClassFix(searchResult.getPsiClass(),searchResult.getPercent(),superClass);
    if (isFirst) {
      quickFix=ChangeSuperClassFix.highPriority(quickFix);
      isFirst=false;
    }
    topInheritorsQuickFix.add(quickFix);
    if (topInheritorsQuickFix.size() >= MAX_QUICK_FIX_COUNTS) {
      break;
    }
  }
  return new ProblemDescriptor[]{manager.createProblemDescriptor(aClass,"Class may extend a commonly used base class instead of implementing interface or extending abstract class",false,topInheritorsQuickFix.toArray(new LocalQuickFix[topInheritorsQuickFix.size()]),ProblemHighlightType.INFORMATION)};
}
