{
  final PsiElement element=descriptor.getPsiElement();
  final PsiElement parent=element.getParent();
  if (!(parent instanceof PsiMember)) {
    return;
  }
  final PsiMember member=(PsiMember)parent;
  final PsiClass containingClass=member.getContainingClass();
  if (containingClass == null) {
    return;
  }
  final PsiReferenceList extendsList=containingClass.getExtendsList();
  if (extendsList == null) {
    return;
  }
  final PsiMethod[] methods=containingClass.getMethods();
  for (  PsiMethod method : methods) {
    @NonNls final String name=method.getName();
    if (method.hasModifierProperty(PsiModifier.STATIC)) {
      continue;
    }
    final PsiType returnType=method.getReturnType();
    if (!PsiType.VOID.equals(returnType)) {
      continue;
    }
    final PsiModifierList modifierList=method.getModifierList();
    if (name.startsWith("test")) {
      addAnnotationIfNotPresent(modifierList,"org.junit.Test");
    }
 else     if (name.equals("setUp")) {
      transformSetUpOrTearDownMethod(method);
      addAnnotationIfNotPresent(modifierList,"org.junit.Before");
    }
 else     if (name.equals("tearDown")) {
      transformSetUpOrTearDownMethod(method);
      addAnnotationIfNotPresent(modifierList,"org.junit.After");
    }
    method.accept(new MethodCallModifier());
  }
  final PsiJavaCodeReferenceElement[] referenceElements=extendsList.getReferenceElements();
  for (  PsiJavaCodeReferenceElement referenceElement : referenceElements) {
    referenceElement.delete();
  }
}
