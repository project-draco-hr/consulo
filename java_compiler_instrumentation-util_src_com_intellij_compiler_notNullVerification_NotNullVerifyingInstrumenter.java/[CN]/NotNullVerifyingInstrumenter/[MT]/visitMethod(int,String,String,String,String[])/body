{
  final Type[] args=Type.getArgumentTypes(desc);
  final Type returnType=Type.getReturnType(desc);
  final MethodVisitor v=cv.visitMethod(access,name,desc,signature,exceptions);
  return new MethodVisitor(Opcodes.ASM4,v){
    private final List<Integer> myNotNullParams=new ArrayList<Integer>();
    private int mySyntheticCount=0;
    private boolean myIsNotNull=false;
    private Label myStartGeneratedCodeLabel;
    public AnnotationVisitor visitParameterAnnotation(    final int parameter,    final String anno,    final boolean visible){
      final AnnotationVisitor av=mv.visitParameterAnnotation(parameter,anno,visible);
      if (isReferenceType(args[parameter]) && anno.equals(NOT_NULL_TYPE)) {
        myNotNullParams.add(new Integer(parameter));
      }
 else       if (anno.equals(SYNTHETIC_TYPE)) {
        mySyntheticCount++;
      }
      return av;
    }
    @Override public AnnotationVisitor visitAnnotation(    String anno,    boolean isRuntime){
      final AnnotationVisitor av=mv.visitAnnotation(anno,isRuntime);
      if (isReferenceType(returnType) && anno.equals(NOT_NULL_TYPE)) {
        myIsNotNull=true;
      }
      return av;
    }
    @Override public void visitCode(){
      if (myNotNullParams.size() > 0) {
        myStartGeneratedCodeLabel=new Label();
        mv.visitLabel(myStartGeneratedCodeLabel);
      }
      for (      Integer param : myNotNullParams) {
        int var=((access & ACC_STATIC) == 0) ? 1 : 0;
        for (int i=0; i < param; ++i) {
          var+=args[i].getSize();
        }
        mv.visitVarInsn(ALOAD,var);
        Label end=new Label();
        mv.visitJumpInsn(IFNONNULL,end);
        generateThrow(IAE_CLASS_NAME,String.format(NULL_ARG_MESSAGE,param - mySyntheticCount,myClassName,name),end);
      }
    }
    @Override public void visitLocalVariable(    String name,    String desc,    String signature,    Label start,    Label end,    int index){
      final boolean isStatic=(access & ACC_STATIC) != 0;
      final boolean isParameter=isStatic ? index < args.length : index <= args.length;
      final Label label=(isParameter && myStartGeneratedCodeLabel != null) ? myStartGeneratedCodeLabel : start;
      mv.visitLocalVariable(name,desc,signature,label,end,index);
    }
    @Override public void visitInsn(    int opcode){
      if (opcode == ARETURN) {
        if (myIsNotNull) {
          mv.visitInsn(DUP);
          final Label skipLabel=new Label();
          mv.visitJumpInsn(IFNONNULL,skipLabel);
          generateThrow(ISE_CLASS_NAME,String.format(NULL_RESULT_MESSAGE,myClassName,name),skipLabel);
        }
      }
      mv.visitInsn(opcode);
    }
    private void generateThrow(    final String exceptionClass,    final String descr,    final Label end){
      mv.visitTypeInsn(NEW,exceptionClass);
      mv.visitInsn(DUP);
      mv.visitLdcInsn(descr);
      mv.visitMethodInsn(INVOKESPECIAL,exceptionClass,CONSTRUCTOR_NAME,EXCEPTION_INIT_SIGNATURE);
      mv.visitInsn(ATHROW);
      mv.visitLabel(end);
      myIsModification=true;
      processPostponedErrors();
    }
    @Override public void visitMaxs(    final int maxStack,    final int maxLocals){
      try {
        super.visitMaxs(maxStack,maxLocals);
      }
 catch (      Throwable e) {
        registerError(name,"visitMaxs",e);
      }
    }
  }
;
}
