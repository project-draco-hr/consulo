{
  final DFSTBuilder<JarInfo> builder=new DFSTBuilder<JarInfo>(GraphGenerator.create(CachingSemiGraph.create(new JarsGraph())));
  if (!builder.isAcyclic()) {
    final Pair<JarInfo,JarInfo> dependency=builder.getCircularDependency();
    String message="Cannot build: circular dependency found between '" + dependency.getFirst().getPresentableDestination() + "' and '"+ dependency.getSecond().getPresentableDestination()+ "'";
    myContext.processMessage(new CompilerMessage(IncArtifactBuilder.BUILDER_NAME,BuildMessage.Kind.ERROR,message));
    return null;
  }
  JarInfo[] jars=myJarsToBuild.toArray(new JarInfo[myJarsToBuild.size()]);
  Arrays.sort(jars,builder.comparator());
  jars=ArrayUtil.reverseArray(jars);
  return jars;
}
