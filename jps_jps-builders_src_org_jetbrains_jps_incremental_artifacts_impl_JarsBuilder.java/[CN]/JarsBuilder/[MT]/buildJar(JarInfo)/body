{
  if (jar.getPackedJars().isEmpty() && jar.getPackedRoots().isEmpty()) {
    final String message="Archive '" + jar.getPresentableDestination() + "' has no files so it won't be created";
    myContext.processMessage(new CompilerMessage(IncArtifactBuilder.BUILDER_NAME,BuildMessage.Kind.WARNING,message));
    return;
  }
  myContext.processMessage(new ProgressMessage("Building " + jar.getPresentableDestination() + "..."));
  File jarFile=FileUtil.createTempFile("artifactCompiler","tmp");
  myBuiltJars.put(jar,jarFile);
  FileUtil.createParentDirs(jarFile);
  final JarOutputStream jarOutputStream=new JarOutputStream(new BufferedOutputStream(new FileOutputStream(jarFile)));
  try {
    final THashSet<String> writtenPaths=new THashSet<String>();
    for (    Pair<String,ArtifactSourceRoot> pair : jar.getPackedRoots()) {
      final ArtifactSourceRoot root=pair.getSecond();
      final ArtifactBuilderLogger logger=myContext.getLoggingManager().getArtifactBuilderLogger();
      if (root instanceof FileBasedArtifactSourceRoot) {
        addFileToJar(jarOutputStream,jarFile,root.getRootFile(),root.getFilter(),pair.getFirst(),writtenPaths);
      }
 else {
        logger.fileCopied(FileUtil.toSystemIndependentName(root.getRootFile().getAbsolutePath()));
        extractFileAndAddToJar(jarOutputStream,(JarBasedArtifactSourceRoot)root,pair.getFirst(),writtenPaths);
      }
    }
    for (    Pair<String,JarInfo> nestedJar : jar.getPackedJars()) {
      File nestedJarFile=myBuiltJars.get(nestedJar.getSecond());
      if (nestedJarFile != null) {
        addFileToJar(jarOutputStream,jarFile,nestedJarFile,SourceFileFilter.ALL,nestedJar.getFirst(),writtenPaths);
      }
 else {
        LOG.debug("nested jar file " + nestedJar.getFirst() + " for "+ jar.getPresentableDestination()+ " not found");
      }
    }
  }
  finally {
    jarOutputStream.close();
  }
}
