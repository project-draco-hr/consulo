{
  final PsiExpression element=findParameterExpression(place);
  if (element == null)   return null;
  final PsiMethod method;
  final int parameterIndex;
  final int curParameterCount;
  final PsiElement tmp=element.getParent();
  final PsiElement elementParent=tmp instanceof PsiArrayInitializerMemberValue ? tmp.getParent() : tmp;
  if (elementParent instanceof PsiReturnStatement) {
    parameterIndex=-1;
    curParameterCount=0;
    method=PsiTreeUtil.getParentOfType(elementParent,PsiMethod.class,true,true);
  }
 else   if (elementParent instanceof PsiNameValuePair) {
    parameterIndex=-1;
    curParameterCount=0;
    final PsiReference psiReference=elementParent.getReference();
    final PsiElement resolved=psiReference == null ? null : psiReference.resolve();
    method=resolved instanceof PsiMethod ? (PsiMethod)resolved : null;
  }
 else {
    final PsiParameter parameter=PsiUtilEx.getParameterForArgument(element);
    if (parameter == null) {
      return null;
    }
    final PsiElement _parent=parameter.getParent();
    final PsiParameterList list;
    if (_parent instanceof PsiParameterList) {
      list=(PsiParameterList)_parent;
    }
 else {
      return null;
    }
    parameterIndex=list.getParameterIndex(parameter);
    curParameterCount=list.getParametersCount();
    method=PsiTreeUtil.getParentOfType(list,PsiMethod.class,true,true);
  }
  if (method == null)   return null;
  return Pair.create(Trinity.create(method.getName(),curParameterCount,parameterIndex),method);
}
