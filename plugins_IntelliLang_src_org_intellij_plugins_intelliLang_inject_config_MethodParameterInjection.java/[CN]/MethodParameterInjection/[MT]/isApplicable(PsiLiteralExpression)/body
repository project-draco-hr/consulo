{
  PsiElement e=element;
  while (!(e.getParent() instanceof PsiExpressionList)) {
    e=e.getParent();
    if (!(e instanceof PsiExpression)) {
      return false;
    }
  }
  final PsiParameter parameter=PsiUtilEx.getParameterForArgument((PsiExpression)e);
  if (parameter == null) {
    return false;
  }
  final PsiElement _parent=parameter.getParent();
  final PsiParameterList list;
  if (_parent instanceof PsiParameterList) {
    list=(PsiParameterList)_parent;
  }
 else {
    return false;
  }
  if (mySelection.length != list.getParametersCount()) {
    return false;
  }
  if (!mySelection[list.getParameterIndex(parameter)]) {
    return false;
  }
  final PsiMethod method=PsiTreeUtil.getParentOfType(list,PsiMethod.class,true,true);
  if (method == null || !myMethodName.equals(method.getName())) {
    return false;
  }
  final PsiClass psiClass=method.getContainingClass();
  if (psiClass == null) {
    return false;
  }
  if (myClassName.equals(psiClass.getQualifiedName())) {
    return true;
  }
  if (myApplyInHierarchy) {
    final GlobalSearchScope scope=GlobalSearchScope.allScope(element.getProject());
    final PsiClass baseClass=JavaPsiFacade.getInstance(element.getProject()).findClass(myClassName,scope);
    if (baseClass != null && psiClass.isInheritor(baseClass,true)) {
      return true;
    }
  }
  return false;
}
