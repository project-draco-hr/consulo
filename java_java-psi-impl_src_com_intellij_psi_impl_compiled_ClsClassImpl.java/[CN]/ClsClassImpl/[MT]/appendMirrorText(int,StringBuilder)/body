{
  appendText(getDocComment(),indentLevel,buffer,NEXT_LINE);
  appendText(getModifierList(),indentLevel,buffer);
  buffer.append(isEnum() ? "enum " : isAnnotationType() ? "@interface " : isInterface() ? "interface " : "class ");
  appendText(getNameIdentifier(),indentLevel,buffer," ");
  appendText(getTypeParameterList(),indentLevel,buffer," ");
  if (!isEnum() && !isAnnotationType()) {
    appendText(getExtendsList(),indentLevel,buffer," ");
  }
  appendText(getImplementsList(),indentLevel,buffer," ");
  buffer.append('{');
  int newIndentLevel=indentLevel + getIndentSize();
  List<PsiField> fields=getOwnFields();
  List<PsiMethod> methods=getOwnMethods();
  List<PsiClass> classes=getOwnInnerClasses();
  if (fields.size() > 0) {
    goNextLine(newIndentLevel,buffer);
    for (int i=0; i < fields.size(); i++) {
      PsiField field=fields.get(i);
      appendText(field,newIndentLevel,buffer);
      if (field instanceof ClsEnumConstantImpl) {
        if (i < fields.size() - 1 && fields.get(i + 1) instanceof ClsEnumConstantImpl) {
          buffer.append(", ");
        }
 else {
          buffer.append(';');
          if (i < fields.size() - 1) {
            buffer.append('\n');
            goNextLine(newIndentLevel,buffer);
          }
        }
      }
 else       if (i < fields.size() - 1) {
        goNextLine(newIndentLevel,buffer);
      }
    }
  }
 else   if (isEnum() && methods.size() + classes.size() > 0) {
    goNextLine(newIndentLevel,buffer);
    buffer.append(";");
  }
  if (methods.size() > 0) {
    if (isEnum() || fields.size() > 0) {
      buffer.append('\n');
    }
    goNextLine(newIndentLevel,buffer);
    for (int i=0; i < methods.size(); i++) {
      appendText(methods.get(i),newIndentLevel,buffer);
      if (i < methods.size() - 1) {
        buffer.append('\n');
        goNextLine(newIndentLevel,buffer);
      }
    }
  }
  if (classes.size() > 0) {
    if (fields.size() + methods.size() > 0) {
      buffer.append('\n');
    }
    goNextLine(newIndentLevel,buffer);
    for (int i=0; i < classes.size(); i++) {
      appendText(classes.get(i),newIndentLevel,buffer);
      if (i < classes.size() - 1) {
        buffer.append('\n');
        goNextLine(newIndentLevel,buffer);
      }
    }
  }
  goNextLine(indentLevel,buffer);
  buffer.append('}');
}
