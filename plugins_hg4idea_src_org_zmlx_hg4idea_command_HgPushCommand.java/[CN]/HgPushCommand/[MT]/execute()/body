{
  List<String> arguments=new LinkedList<String>();
  if (StringUtils.isNotBlank(revision)) {
    arguments.add("-r");
    arguments.add(revision);
  }
  arguments.add(destination);
  HgCommandResult result=HgCommandService.getInstance(project).execute(repo,"push",arguments);
  if (HgErrorUtil.isAbort(result) && HgErrorUtil.isAuthorizationRequiredAbort(result)) {
    try {
      HgUrl hgUrl=new HgUrl(destination);
      if (hgUrl.supportsAuthentication()) {
        HgUsernamePasswordDialog dialog=new HgUsernamePasswordDialog(project);
        dialog.setUsername(hgUrl.getUsername());
        dialog.show();
        if (dialog.isOK()) {
          hgUrl.setUsername(dialog.getUsername());
          hgUrl.setPassword(String.valueOf(dialog.getPassword()));
          arguments.set(arguments.size() - 1,hgUrl.asString());
          result=HgCommandService.getInstance(project).execute(repo,"push",arguments);
        }
      }
    }
 catch (    URISyntaxException e) {
      VcsUtil.showErrorMessage(project,"Invalid destination: " + destination,"Error");
    }
  }
  project.getMessageBus().syncPublisher(HgVcs.OUTGOING_TOPIC).update(project);
  return result;
}
