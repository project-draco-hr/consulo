{
  if (rebaseConflictDetector.isMergeConflict()) {
    LOG.info("handleRebaseFailure merge conflict");
    return new GitConflictResolver(myProject,Collections.singleton(root),makeParamsForRebaseConflict()){
      @Override protected boolean proceedIfNothingToMerge(){
        return continueRebase(root,"--continue");
      }
      @Override protected boolean proceedAfterAllMerged(){
        return continueRebase(root,"--continue");
      }
    }
.merge();
  }
 else   if (rebaseConflictDetector.isNoChangeError()) {
    LOG.info("handleRebaseFailure no change");
    mySkippedCommits.add(GitRebaseUtils.getCurrentRebaseCommit(root));
    return continueRebase(root,"--skip");
  }
 else {
    LOG.info("handleRebaseFailure error " + h.errors());
    GitUIUtil.notifyImportantError(myProject,"Error rebasing",GitUIUtil.stringifyErrors(h.errors()));
    return false;
  }
}
