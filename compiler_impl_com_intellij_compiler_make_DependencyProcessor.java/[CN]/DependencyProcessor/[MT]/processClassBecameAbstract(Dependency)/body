{
  MemberInfo[] usedMembers=dependency.getUsedMembers();
  for (  MemberInfo usedMember : usedMembers) {
    if (usedMember instanceof MethodInfo && ((MethodInfo)usedMember).isConstructor()) {
      if (myDependencyCache.markTargetClassInfo(dependency)) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Mark dependent class " + myDependencyCache.resolve(dependency.getClassQualifiedName()) + "; reason: "+ myDependencyCache.resolve(myQName)+ " made abstract");
        }
      }
      return true;
    }
  }
  return false;
}
