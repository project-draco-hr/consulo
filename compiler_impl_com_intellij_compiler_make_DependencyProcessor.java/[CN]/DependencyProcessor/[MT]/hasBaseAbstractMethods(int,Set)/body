{
  final SymbolTable symbolTable=myDependencyCache.getSymbolTable();
  final Cache oldCache=myDependencyCache.getCache();
  final Cache newCache=myDependencyCache.getNewClassesCache();
  final Cache cache=newCache.getClassId(qName) != Cache.UNKNOWN ? newCache : oldCache;
  for (Iterator it=methodsToCheck.iterator(); it.hasNext(); ) {
    final MethodInfo methodInfo=(MethodInfo)it.next();
    final int superMethod=cache.findMethodsBySignature(cache.getClassDeclarationId(qName),methodInfo.getDescriptor(symbolTable),symbolTable);
    if (superMethod != Cache.UNKNOWN) {
      if (ClsUtil.isAbstract(cache.getMethodFlags(superMethod))) {
        return true;
      }
      it.remove();
    }
  }
  return false;
}
