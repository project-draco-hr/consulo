{
  myProject=project;
  myDependencyCache=dependencyCache;
  myQName=qName;
  final Cache cache=dependencyCache.getCache();
  final Cache newClassesCache=dependencyCache.getNewClassesCache();
  myBackDependencies=cache.getBackDependencies(qName);
  final TIntObjectHashMap<FieldInfo> oldFields=getFieldInfos(cache,qName);
  final Map<String,MethodInfoContainer> oldMethods=getMethodInfos(cache,qName);
  final TIntObjectHashMap<FieldInfo> newFields=getFieldInfos(newClassesCache,qName);
  final Map<String,MethodInfoContainer> newMethods=getMethodInfos(newClassesCache,qName);
  addAddedMembers(oldFields,oldMethods,newFields,newMethods,myAddedMembers);
  addRemovedMembers(oldFields,oldMethods,newFields,newMethods,myRemovedMembers);
  addChangedMembers(oldFields,oldMethods,newFields,newMethods,myChangedMembers);
  myMembersChanged=myAddedMembers.size() > 0 || myRemovedMembers.size() > 0 || myChangedMembers.size() > 0;
  final int oldCacheClassId=cache.getClassId(qName);
  final int newCacheClassId=newClassesCache.getClassId(qName);
  myIsRemoteInterface=CacheUtils.isInterface(cache,myQName) && cache.isRemote(oldCacheClassId);
  myIsAnnotation=ClsUtil.isAnnotation(cache.getFlags(oldCacheClassId));
  myWereAnnotationTargetsRemoved=myIsAnnotation && wereAnnotationTargesRemoved(cache,newClassesCache);
  myRetentionPolicyChanged=myIsAnnotation && hasRetentionPolicyChanged(cache,newClassesCache);
  int[] oldInterfaces=cache.getSuperInterfaces(oldCacheClassId);
  int[] newInterfaces=newClassesCache.getSuperInterfaces(newCacheClassId);
  mySuperInterfaceRemoved=wereInterfacesRemoved(oldInterfaces,newInterfaces);
  mySuperInterfaceAdded=wereInterfacesRemoved(newInterfaces,oldInterfaces);
  mySuperlistGenericSignatureChanged=isSuperlistGenericSignatureChanged(cache.getGenericSignature(oldCacheClassId),newClassesCache.getGenericSignature(newCacheClassId));
  boolean superclassesDiffer=cache.getSuperQualifiedName(oldCacheClassId) != newClassesCache.getSuperQualifiedName(newCacheClassId);
  boolean wasDerivedFromObject="java.lang.Object".equals(dependencyCache.resolve(cache.getSuperQualifiedName(oldCacheClassId)));
  mySuperClassChanged=!wasDerivedFromObject && superclassesDiffer;
  mySuperClassAdded=wasDerivedFromObject && superclassesDiffer;
}
