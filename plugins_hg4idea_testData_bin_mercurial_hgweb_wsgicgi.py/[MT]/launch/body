def launch(application):
    util.set_binary(sys.stdin)
    util.set_binary(sys.stdout)
    environ = dict(os.environ.iteritems())
    environ.setdefault('PATH_INFO', '')
    if environ.get('SERVER_SOFTWARE', '').startswith('Microsoft-IIS'):
        scriptname = environ['SCRIPT_NAME']
        if environ['PATH_INFO'].startswith(scriptname):
            environ['PATH_INFO'] = environ['PATH_INFO'][len(scriptname):]
    environ['wsgi.input'] = sys.stdin
    environ['wsgi.errors'] = sys.stderr
    environ['wsgi.version'] = (1, 0)
    environ['wsgi.multithread'] = False
    environ['wsgi.multiprocess'] = True
    environ['wsgi.run_once'] = True
    if (environ.get('HTTPS', 'off').lower() in ('on', '1', 'yes')):
        environ['wsgi.url_scheme'] = 'https'
    else:
        environ['wsgi.url_scheme'] = 'http'
    headers_set = []
    headers_sent = []
    out = sys.stdout

    def write(data):
        if (not headers_set):
            raise AssertionError('write() before start_response()')
        elif (not headers_sent):
            (status, response_headers) = headers_sent[:] = headers_set
            out.write(('Status: %s\r\n' % status))
            for header in response_headers:
                out.write(('%s: %s\r\n' % header))
            out.write('\r\n')
        out.write(data)
        out.flush()

    def start_response(status, response_headers, exc_info=None):
        if exc_info:
            try:
                if headers_sent:
                    raise exc_info[0](exc_info[1], exc_info[2])
            finally:
                exc_info = None
        elif headers_set:
            raise AssertionError('Headers already set!')
        headers_set[:] = [status, response_headers]
        return write
    content = application(environ, start_response)
    try:
        for chunk in content:
            write(chunk)
    finally:
        if hasattr(content, 'close'):
            content.close()
