{
  if (myNodePopup != null && myNodePopup.isVisible()) {
    cancelPopup();
    if (myModel.getSelectedIndex() == index) {
      return;
    }
  }
  final Object object=myModel.getElement(index);
  final List<Object> objects=myModel.calcElementChildren(object);
  if (!objects.isEmpty()) {
    final Object[] siblings=new Object[objects.size()];
    final Icon[] icons=new Icon[objects.size()];
    for (int i=0; i < objects.size(); i++) {
      siblings[i]=objects.get(i);
      icons[i]=NavBarModel.getIcon(siblings[i]);
    }
    final NavBarPanel.MyCompositeLabel item=getItem(index);
    LOG.assertTrue(item != null);
    final BaseListPopupStep<Object> step=new BaseListPopupStep<Object>("",siblings,icons){
      public boolean isSpeedSearchEnabled(){
        return true;
      }
      @NotNull public String getTextFor(      final Object value){
        return NavBarModel.getPresentableText(value,null);
      }
      public boolean isSelectable(      Object value){
        return true;
      }
      public PopupStep onChosen(      final Object selectedValue,      final boolean finalChoice){
        if (!myModel.hasChildren(selectedValue)) {
          if (selectedValue instanceof Navigatable) {
            final Navigatable navigatable=(Navigatable)selectedValue;
            if (navigatable.canNavigate()) {
              navigatable.navigate(true);
            }
          }
          hideHint();
        }
 else {
          navigateInsideBar(selectedValue);
        }
        return PopupStep.FINAL_CHOICE;
      }
      public void canceled(){
        super.canceled();
        item.getLabel().setIcon(wrapIcon(NavBarModel.getIcon(object),index,Color.gray));
      }
    }
;
    step.setDefaultOptionIndex(index < myModel.size() - 1 ? objects.indexOf(myModel.getElement(index + 1)) : 0);
    myNodePopup=new ListPopupImpl(step){
      protected ListCellRenderer getListElementRenderer(){
        return new MySiblingsListCellRenderer();
      }
      public boolean canClose(){
        final Component focusedComponent=WindowManagerEx.getInstanceEx().getFocusedComponent(myProject);
        return focusedComponent != NavBarPanel.this && !isAncestorOf(focusedComponent);
      }
    }
;
    myNodePopup.registerAction("left",KeyEvent.VK_LEFT,0,new AbstractAction(){
      public void actionPerformed(      ActionEvent e){
        myNodePopup.goBack();
        shiftFocus(-1);
        restorePopup();
      }
    }
);
    myNodePopup.registerAction("right",KeyEvent.VK_RIGHT,0,new AbstractAction(){
      public void actionPerformed(      ActionEvent e){
        myNodePopup.goBack();
        shiftFocus(1);
        restorePopup();
      }
    }
);
    myNodePopup.showUnderneathOf(item.getColoredComponent());
  }
  repaint();
}
