{
  if (update) {
class ItemDescriptor {
      boolean myHasChildren;
      Icon myIcon;
      String myPresentableText;
      SimpleTextAttributes myTextAttributes;
      ItemDescriptor(      boolean hasChildren,      Icon icon,      String presentableText,      SimpleTextAttributes textAttributes){
        myHasChildren=hasChildren;
        myIcon=icon;
        myPresentableText=presentableText;
        myTextAttributes=textAttributes;
      }
    }
    final ItemDescriptor[] descriptors=new ItemDescriptor[myModel.size()];
    myFirstIndex=0;
    final int selectedIndex=-1;
    myModel.setSelectedIndex(selectedIndex);
    for (int index=0; index < myModel.size(); index++) {
      final Object object=myModel.get(index);
      final boolean hasChildren=myModel.hasChildren(object);
      final Icon icon=NavBarModel.getIcon(object);
      descriptors[index]=new ItemDescriptor(hasChildren,hasChildren ? wrapIcon(icon,index,Color.gray) : icon,NavBarModel.getPresentableText(object,getWindow()),myModel.getTextAttributes(object,false));
    }
    final Runnable updateUI=new Runnable(){
      public void run(){
        myList.clear();
        for (int index=0; index < descriptors.length; index++) {
          final ItemDescriptor descriptor=descriptors[index];
          final MyCompositeLabel label=new MyCompositeLabel(index,descriptor.myIcon,descriptor.myPresentableText,descriptor.myTextAttributes,myModel);
          installActions(index,descriptor.myHasChildren,descriptor.myIcon,label);
          myList.add(label);
        }
        rebuildComponent();
        if (myHint != null) {
          final Dimension dimension=getPreferredSize();
          final Rectangle bounds=myHint.getBounds();
          myHint.setBounds(bounds.x,bounds.y,dimension.width,dimension.height);
        }
        if (!myProject.isDisposed())         IdeFocusManager.getInstance(myProject).requestFocus(NavBarPanel.this,true);
      }
    }
;
    SwingUtilities.invokeLater(updateUI);
  }
}
