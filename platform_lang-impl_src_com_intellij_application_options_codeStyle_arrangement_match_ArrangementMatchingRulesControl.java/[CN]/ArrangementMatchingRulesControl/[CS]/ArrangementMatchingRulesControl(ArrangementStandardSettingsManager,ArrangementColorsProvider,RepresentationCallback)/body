{
  super(new ArrangementMatchingRulesModel());
  myRepresentationCallback=callback;
  myFactory=new ArrangementMatchNodeComponentFactory(settingsManager,colorsProvider,this);
  myRenderer=new MyRenderer();
  setDefaultRenderer(Object.class,myRenderer);
  getColumnModel().getColumn(0).setCellEditor(new MyEditor());
  setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
  setShowColumns(false);
  setShowGrid(false);
  setSurrendersFocusOnKeystroke(true);
  putClientProperty("terminateEditOnFocusLost",Boolean.TRUE);
  ArrangementAtomMatchCondition condition=new ArrangementAtomMatchCondition(StdArrangementTokens.EntryType.CLASS);
  StdArrangementMatchRule rule=new StdArrangementMatchRule(new StdArrangementEntryMatcher(condition));
  ArrangementUiComponent component=myFactory.getComponent(condition,rule,true);
  myMinRowHeight=new ArrangementListRowDecorator(component,this).getPreferredSize().height;
  myEditor=new ArrangementMatchingRuleEditor(settingsManager,colorsProvider,this);
  addMouseMotionListener(new MouseAdapter(){
    @Override public void mouseMoved(    MouseEvent e){
      onMouseMoved(e);
    }
  }
);
  getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      onSelectionChange(e);
    }
  }
);
  getModel().addTableModelListener(new TableModelListener(){
    @Override public void tableChanged(    TableModelEvent e){
      onTableChange(e);
    }
  }
);
}
