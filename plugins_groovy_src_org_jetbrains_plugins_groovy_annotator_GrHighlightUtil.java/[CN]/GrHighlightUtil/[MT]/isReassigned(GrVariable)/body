{
  PsiMethod method=PsiTreeUtil.getParentOfType(var,PsiMethod.class);
  PsiNamedElement scope=method == null ? var.getContainingFile() : method;
  if (scope == null) {
    return false;
  }
  return !PsiTreeUtil.processElements(scope,new PsiElementProcessor(){
    boolean hasAssignment=var.getInitializerGroovy() != null || var instanceof GrParameter;
    @Override public boolean execute(    @NotNull PsiElement element){
      if (element instanceof GrReferenceExpression && var.getName().equals(((GrReferenceExpression)element).getReferenceName()) && ((GrReferenceExpression)element).isReferenceTo(var)) {
        if (PsiUtil.isLValue((GrReferenceExpression)element) || element.getParent() instanceof GrUnaryExpression && ((GrUnaryExpression)element.getParent()).isPostfix()) {
          if (hasAssignment) {
            return false;
          }
          hasAssignment=true;
        }
      }
      return true;
    }
  }
);
}
