{
  final PsiJavaToken switchToken=(PsiJavaToken)element;
  final PsiSwitchStatement switchStatement=(PsiSwitchStatement)switchToken.getParent();
  if (switchStatement == null) {
    return;
  }
  final PsiExpression switchExpression=switchStatement.getExpression();
  if (switchExpression == null) {
    return;
  }
  final PsiType switchExpressionType=switchExpression.getType();
  if (switchExpressionType == null) {
    return;
  }
  final boolean isSwitchOnString=switchExpressionType.equalsToText("java.lang.String");
  final String declarationString;
  final boolean hadSideEffects;
  final String expressionText;
  final Project project=element.getProject();
  if (SideEffectChecker.mayHaveSideEffects(switchExpression)) {
    hadSideEffects=true;
    final JavaCodeStyleManager javaCodeStyleManager=JavaCodeStyleManager.getInstance(project);
    final String variableName;
    if (isSwitchOnString) {
      variableName=javaCodeStyleManager.suggestUniqueVariableName("s",switchExpression,true);
    }
 else {
      variableName=javaCodeStyleManager.suggestUniqueVariableName("i",switchExpression,true);
    }
    expressionText=variableName;
    declarationString=switchExpressionType.getPresentableText() + ' ' + variableName+ " = "+ switchExpression.getText()+ ';';
  }
 else {
    hadSideEffects=false;
    declarationString=null;
    expressionText=switchExpression.getText();
  }
  final PsiCodeBlock body=switchStatement.getBody();
  if (body == null) {
    return;
  }
  final PsiStatement[] statements=body.getStatements();
  boolean renameBreaks=false;
  for (int i=1; i < statements.length - 1; i++) {
    if (CaseUtil.containsHiddenBreak(statements[i])) {
      renameBreaks=true;
      break;
    }
  }
  final List<SwitchStatementBranch> openBranches=new ArrayList<SwitchStatementBranch>();
  final Set<PsiLocalVariable> declaredVariables=new HashSet<PsiLocalVariable>();
  final List<SwitchStatementBranch> allBranches=new ArrayList<SwitchStatementBranch>();
  SwitchStatementBranch currentBranch=null;
  final PsiElement[] children=body.getChildren();
  for (int i=1; i < children.length - 1; i++) {
    final PsiElement statement=children[i];
    if (statement instanceof PsiSwitchLabelStatement) {
      final PsiSwitchLabelStatement label=(PsiSwitchLabelStatement)statement;
      if (currentBranch == null) {
        openBranches.clear();
        currentBranch=new SwitchStatementBranch();
        currentBranch.addPendingVariableDeclarations(declaredVariables);
        allBranches.add(currentBranch);
        openBranches.add(currentBranch);
      }
 else       if (currentBranch.hasStatements()) {
        currentBranch=new SwitchStatementBranch();
        allBranches.add(currentBranch);
        openBranches.add(currentBranch);
      }
      if (label.isDefaultCase()) {
        currentBranch.setDefault();
      }
 else {
        final PsiExpression value=label.getCaseValue();
        final String valueText=getCaseValueText(value);
        currentBranch.addCaseValue(valueText);
      }
    }
 else {
      if (statement instanceof PsiStatement) {
        if (statement instanceof PsiDeclarationStatement) {
          final PsiDeclarationStatement declarationStatement=(PsiDeclarationStatement)statement;
          final PsiElement[] elements=declarationStatement.getDeclaredElements();
          for (          PsiElement varElement : elements) {
            final PsiLocalVariable variable=(PsiLocalVariable)varElement;
            declaredVariables.add(variable);
          }
        }
        for (        SwitchStatementBranch branch : openBranches) {
          branch.addStatement(statement);
        }
        if (!ControlFlowUtils.statementMayCompleteNormally((PsiStatement)statement)) {
          currentBranch=null;
        }
      }
 else {
        for (        SwitchStatementBranch branch : openBranches) {
          if (statement instanceof PsiWhiteSpace) {
            branch.addWhiteSpace(statement);
          }
 else {
            branch.addComment(statement);
          }
        }
      }
    }
  }
  final StringBuilder ifStatementText=new StringBuilder();
  String breakLabel=null;
  if (renameBreaks) {
    breakLabel=CaseUtil.findUniqueLabel(switchStatement,"Label");
    ifStatementText.append(breakLabel);
    ifStatementText.append(':');
  }
  boolean firstBranch=true;
  SwitchStatementBranch defaultBranch=null;
  for (  SwitchStatementBranch branch : allBranches) {
    if (branch.isDefault()) {
      defaultBranch=branch;
    }
 else {
      final List<String> caseValues=branch.getCaseValues();
      final List<PsiElement> bodyElements=branch.getBodyElements();
      final Set<PsiLocalVariable> pendingVariableDeclarations=branch.getPendingVariableDeclarations();
      dumpBranch(expressionText,caseValues,bodyElements,breakLabel,pendingVariableDeclarations,firstBranch,renameBreaks,isSwitchOnString,ifStatementText);
      firstBranch=false;
    }
  }
  if (defaultBranch != null) {
    final List<PsiElement> bodyElements=defaultBranch.getBodyElements();
    final Set<PsiLocalVariable> pendingVariableDeclarations=defaultBranch.getPendingVariableDeclarations();
    dumpDefaultBranch(bodyElements,breakLabel,pendingVariableDeclarations,firstBranch,renameBreaks,ifStatementText);
  }
  final JavaPsiFacade psiFacade=JavaPsiFacade.getInstance(project);
  final PsiElementFactory factory=psiFacade.getElementFactory();
  if (hadSideEffects) {
    final PsiStatement declarationStatement=factory.createStatementFromText(declarationString,switchStatement);
    final PsiStatement ifStatement=factory.createStatementFromText(ifStatementText.toString(),switchStatement);
    final PsiElement parent=switchStatement.getParent();
    parent.addBefore(declarationStatement,switchStatement);
    switchStatement.replace(ifStatement);
  }
 else {
    final PsiStatement newStatement=factory.createStatementFromText(ifStatementText.toString(),switchStatement);
    switchStatement.replace(newStatement);
  }
}
