{
  final Project project=(Project)dataContext.getData(DataConstants.PROJECT);
  final PrinterJob printerJob=PrinterJob.getPrinterJob();
  final PsiDirectory[] psiDirectory=new PsiDirectory[1];
  PsiElement psiElement=(PsiElement)dataContext.getData(DataConstants.PSI_ELEMENT);
  if (psiElement instanceof PsiDirectory) {
    psiDirectory[0]=(PsiDirectory)psiElement;
  }
  final PsiFile psiFile=(PsiFile)dataContext.getData(DataConstants.PSI_FILE);
  final String[] shortFileName=new String[1];
  final String[] directoryName=new String[1];
  if (psiFile != null || psiDirectory[0] != null) {
    if (psiFile != null) {
      shortFileName[0]=psiFile.getVirtualFile().getName();
      if (psiDirectory[0] == null) {
        psiDirectory[0]=psiFile.getContainingDirectory();
      }
    }
    if (psiDirectory[0] != null) {
      directoryName[0]=psiDirectory[0].getVirtualFile().getPresentableUrl();
    }
  }
  Editor editor=(Editor)dataContext.getData(DataConstants.EDITOR);
  boolean isSelectedTextEnabled=false;
  if (editor != null && editor.getSelectionModel().hasSelection()) {
    isSelectedTextEnabled=true;
  }
  PrintDialog printDialog=new PrintDialog(shortFileName[0],directoryName[0],isSelectedTextEnabled,project);
  printDialog.reset();
  printDialog.show();
  if (!printDialog.isOK()) {
    return;
  }
  printDialog.apply();
  final PageFormat pageFormat=createPageFormat();
  PrintSettings printSettings=PrintSettings.getInstance();
  Printable painter;
  if (printSettings.getPrintScope() != PrintSettings.PRINT_DIRECTORY) {
    if (psiFile == null) {
      return;
    }
    TextPainter textPainter=initTextPainter(psiFile,project);
    if (textPainter == null)     return;
    if (printSettings.getPrintScope() == PrintSettings.PRINT_SELECTED_TEXT && editor != null && editor.getSelectionModel().hasSelection()) {
      int firstLine=editor.getDocument().getLineNumber(editor.getSelectionModel().getSelectionStart());
      textPainter.setSegment(editor.getSelectionModel().getSelectionStart(),editor.getSelectionModel().getSelectionEnd(),firstLine + 1);
    }
    painter=textPainter;
  }
 else {
    ArrayList filesList=new ArrayList();
    boolean isRecursive=printSettings.isIncludeSubdirectories();
    addToPsiFileList(psiDirectory[0],filesList,isRecursive);
    painter=new MultiFilePainter(filesList,project);
  }
  final Printable painter0=painter;
  Pageable document=new Pageable(){
    public int getNumberOfPages(){
      return Pageable.UNKNOWN_NUMBER_OF_PAGES;
    }
    public PageFormat getPageFormat(    int pageIndex) throws IndexOutOfBoundsException {
      return pageFormat;
    }
    public Printable getPrintable(    int pageIndex) throws IndexOutOfBoundsException {
      return painter0;
    }
  }
;
  printerJob.setPageable(document);
  printerJob.setPrintable(painter,pageFormat);
  try {
    if (!printerJob.printDialog()) {
      return;
    }
  }
 catch (  Exception e) {
  }
  Runnable runnable=new Runnable(){
    public void run(){
      try {
        ProgressIndicator progress=ProgressManager.getInstance().getProgressIndicator();
        if (painter0 instanceof MultiFilePainter) {
          ((MultiFilePainter)painter0).setProgress(progress);
        }
 else {
          ((TextPainter)painter0).setProgress(progress);
        }
        printerJob.print();
      }
 catch (      PrinterException e) {
        e.printStackTrace();
      }
catch (      ProcessCanceledException e) {
        printerJob.cancel();
      }
    }
  }
;
  ProgressManager.getInstance().runProcessWithProgressSynchronously(runnable,CodeEditorBundle.message("print.progress"),true,project);
}
