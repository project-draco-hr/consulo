{
  if (ApplicationManager.getApplication().isUnitTestMode() && !CompletionAutoPopupHandler.ourTestingAutopopup) {
    return;
  }
  boolean alwaysAutoPopup=editor != null && Boolean.TRUE.equals(editor.getUserData(ALWAYS_AUTO_POPUP));
  if (!CodeInsightSettings.getInstance().AUTO_POPUP_COMPLETION_LOOKUP && !alwaysAutoPopup) {
    return;
  }
  if (PowerSaveMode.isEnabled()) {
    return;
  }
  if (!CompletionServiceImpl.isPhase(CompletionPhase.CommittingDocuments.class,CompletionPhase.NoCompletion.getClass())) {
    return;
  }
  final CompletionProgressIndicator currentCompletion=CompletionServiceImpl.getCompletionService().getCurrentCompletion();
  if (currentCompletion != null) {
    currentCompletion.closeAndFinish(true);
  }
  final CompletionPhase.CommittingDocuments phase=new CompletionPhase.CommittingDocuments(null,editor);
  CompletionServiceImpl.setCompletionPhase(phase);
  phase.ignoreCurrentDocumentChange();
  runTransactionWithEverythingCommitted(myProject,new Runnable(){
    @Override public void run(){
      if (phase.checkExpired())       return;
      PsiFile file=PsiDocumentManager.getInstance(myProject).getPsiFile(editor.getDocument());
      if (file != null && condition != null && !condition.value(file)) {
        CompletionServiceImpl.setCompletionPhase(CompletionPhase.NoCompletion);
        return;
      }
      CompletionAutoPopupHandler.invokeCompletion(completionType,true,myProject,editor,0,false);
    }
  }
);
}
