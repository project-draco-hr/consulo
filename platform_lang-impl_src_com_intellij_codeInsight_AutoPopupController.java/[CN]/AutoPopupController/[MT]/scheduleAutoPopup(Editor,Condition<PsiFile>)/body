{
  if (ApplicationManager.getApplication().isUnitTestMode() && !CompletionAutoPopupHandler.ourTestingAutopopup) {
    return;
  }
  if (!CodeInsightSettings.getInstance().AUTO_POPUP_COMPLETION_LOOKUP) {
    return;
  }
  if (PowerSaveMode.isEnabled()) {
    return;
  }
  if (!CompletionServiceImpl.isPhase(CompletionPhase.CommittingDocuments.class,CompletionPhase.NoCompletion.getClass())) {
    return;
  }
  final CompletionProgressIndicator currentCompletion=CompletionServiceImpl.getCompletionService().getCurrentCompletion();
  if (currentCompletion != null) {
    currentCompletion.closeAndFinish(true);
  }
  final CompletionPhase.CommittingDocuments phase=new CompletionPhase.CommittingDocuments(null,editor);
  CompletionServiceImpl.setCompletionPhase(phase);
  Runnable request=new Runnable(){
    @Override public void run(){
      CompletionAutoPopupHandler.runLaterWithCommitted(myProject,editor.getDocument(),new Runnable(){
        @Override public void run(){
          if (phase.checkExpired())           return;
          PsiFile file=PsiDocumentManager.getInstance(myProject).getPsiFile(editor.getDocument());
          if (file != null && condition != null && !condition.value(file))           return;
          CompletionAutoPopupHandler.invokeCompletion(CompletionType.BASIC,true,myProject,editor,0);
        }
      }
);
    }
  }
;
  addRequest(request,CodeInsightSettings.getInstance().AUTO_LOOKUP_DELAY);
}
