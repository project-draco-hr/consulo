{
  if (ApplicationManager.getApplication().isUnitTestMode())   return;
  if (DumbService.isDumb(myProject))   return;
  if (PowerSaveMode.isEnabled())   return;
  ApplicationManager.getApplication().assertIsDispatchThread();
  final CodeInsightSettings settings=CodeInsightSettings.getInstance();
  if (settings.AUTO_POPUP_PARAMETER_INFO) {
    final PsiDocumentManager documentManager=PsiDocumentManager.getInstance(myProject);
    PsiFile file=documentManager.getPsiFile(editor.getDocument());
    if (file == null)     return;
    if (!documentManager.isUncommited(editor.getDocument())) {
      file=documentManager.getPsiFile(InjectedLanguageUtil.getEditorForInjectedLanguageNoCommit(editor,file).getDocument());
      if (file == null)       return;
    }
    final PsiFile file1=file;
    final Runnable request=new Runnable(){
      @Override @RequiredDispatchThread public void run(){
        if (!myProject.isDisposed() && !DumbService.isDumb(myProject) && !editor.isDisposed()&& editor.getComponent().isShowing()) {
          int lbraceOffset=editor.getCaretModel().getOffset() - 1;
          try {
            ShowParameterInfoHandler.invoke(myProject,editor,file1,lbraceOffset,highlightedMethod,false);
          }
 catch (          IndexNotReadyException ignored) {
          }
        }
      }
    }
;
    addRequest(new Runnable(){
      @Override public void run(){
        documentManager.performLaterWhenAllCommitted(request);
      }
    }
,settings.PARAMETER_INFO_DELAY);
  }
}
