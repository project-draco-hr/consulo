{
  Collection<String> names=new HashSet<String>(getAllSchemeNames(currentSchemeList));
  final StreamProvider[] providers=((ApplicationImpl)ApplicationManager.getApplication()).getStateStore().getStateStorageManager().getStreamProviders(RoamingType.GLOBAL);
  final HashMap<String,SharedScheme<E>> result=new HashMap<String,SharedScheme<E>>();
  if (providers != null) {
    for (    StreamProvider provider : providers) {
      if (provider.isEnabled()) {
        String[] paths=provider.listSubFiles(myFileSpec);
        for (        String subpath : paths) {
          try {
            final Document subDocument=StorageUtil.loadDocument(provider.loadContent(getFileFullPath(subpath),RoamingType.GLOBAL));
            if (subDocument != null) {
              SharedSchemeData original=unwrap(subDocument);
              final E scheme=myProcessor.readScheme(original.original);
              if (!alreadyShared(subpath,currentSchemeList)) {
                String schemeName=original.name;
                String uniqueName=UniqueNameGenerator.generateUniqueName("[shared] " + schemeName,"","",names);
                renameScheme(scheme,uniqueName);
                schemeName=uniqueName;
                scheme.getExternalInfo().setOriginalPath(getFileFullPath(subpath));
                scheme.getExternalInfo().setIsImported(true);
                result.put(schemeName,new SharedScheme<E>(original.user == null ? "unknown" : original.user,original.description,scheme));
              }
            }
          }
 catch (          Exception e) {
            LOG.debug("Cannot load data from IDEAServer: " + e.getLocalizedMessage());
          }
        }
      }
    }
  }
  for (  SharedScheme<E> t : result.values()) {
    myProcessor.initScheme(t.getScheme());
  }
  return result.values();
}
