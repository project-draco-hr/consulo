{
  final String path=expandMacroses(fileSpec);
  if (path == null) {
    return;
  }
  final File baseDir=new File(path);
  baseDir.mkdirs();
  final StreamProvider[] providers=((ApplicationImpl)ApplicationManager.getApplication()).getStateStore().getStateStorageManager().getStreamProviders(roamingType);
  UniqueFileNamesProvider fileNameProvider=new UniqueFileNamesProvider();
  Collection<String> usedNames=new HashSet<String>();
  for (  T scheme : schemes) {
    if (processor.shouldBeSaved(scheme)) {
      String schemeKey=fileSpec + "/" + scheme.getName();
      final String fileName;
      if (mySchemeNameToFileName.containsKey(schemeKey)) {
        fileName=mySchemeNameToFileName.get(schemeKey);
        fileNameProvider.reserveFileName(fileName);
      }
 else {
        fileName=fileNameProvider.suggestName(scheme.getName());
      }
      final File file=new File(baseDir,fileName + EXT);
      usedNames.add(file.getName());
      try {
        final Document document=processor.writeScheme(scheme);
        long newHash=computeHashValue(document);
        Long oldHash=mySchemeNameToHashValue.get(schemeKey);
        if (oldHash == null || newHash != oldHash.longValue() || !file.isFile()) {
          JDOMUtil.writeDocument(document,file,"\n");
          mySchemeNameToHashValue.put(schemeKey,newHash);
          saveFileName(file,schemeKey);
        }
        if (providers != null) {
          for (          StreamProvider provider : providers) {
            try {
              provider.saveContent(fileSpec + "/" + file.getName(),document,roamingType);
            }
 catch (            IOException e) {
              LOG.debug(e);
            }
          }
        }
      }
 catch (      IOException e) {
        processor.showWriteErrorMessage(e,scheme.getName(),file.getPath());
      }
    }
  }
  clearDeletedFiles(fileSpec,roamingType,baseDir,providers,usedNames);
}
