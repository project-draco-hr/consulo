{
  if (ApplicationManager.getApplication() == null || myListenerAdded)   return;
  LocalFileSystem system=LocalFileSystem.getInstance();
  myVFSBaseDir=new WriteAction<VirtualFile>(){
    protected void run(    final Result<VirtualFile> result){
      VirtualFile dir=LocalFileSystem.getInstance().refreshAndFindFileByIoFile(myBaseDir);
      result.setResult(dir);
      if (dir != null) {
        dir.refresh(false,false);
      }
    }
  }
.execute().getResultObject();
  myVFSBaseDir.getChildren();
  system.addVirtualFileListener(new VirtualFileAdapter(){
    @Override public void contentsChanged(    final VirtualFileEvent event){
      onFileContentChanged(event,myVFSBaseDir);
    }
    @Override public void fileCreated(    final VirtualFileEvent event){
      VirtualFile file=event.getFile();
      if (event.getRequestor() == null && isFileUnder(file,myVFSBaseDir)) {
        ArrayList<E> read=new ArrayList<E>();
        readSchemeFromFile(read,file,true);
        if (!read.isEmpty()) {
          E readScheme=read.get(0);
          myProcessor.initScheme(readScheme);
          myProcessor.onSchemeAdded(readScheme);
        }
      }
    }
    @Override public void fileDeleted(    final VirtualFileEvent event){
      VirtualFile parent=event.getParent();
      if (event.getRequestor() == null && parent != null && parent.equals(myVFSBaseDir)) {
        File ioFile=new File(event.getFileName());
        E scheme=findSchemeFor(ioFile.getName());
        T oldCurrentScheme=null;
        if (scheme != null) {
          oldCurrentScheme=getCurrentScheme();
          removeScheme((T)scheme);
          myProcessor.onSchemeDeleted(scheme);
        }
        T newCurrentScheme=getCurrentScheme();
        if (oldCurrentScheme != null && newCurrentScheme == null) {
          if (!mySchemes.isEmpty()) {
            setCurrentSchemeName(mySchemes.get(0).getName());
            newCurrentScheme=getCurrentScheme();
          }
        }
        if (oldCurrentScheme != newCurrentScheme) {
          myProcessor.onCurrentSchemeChanged(oldCurrentScheme);
        }
      }
    }
  }
);
  myListenerAdded=true;
}
