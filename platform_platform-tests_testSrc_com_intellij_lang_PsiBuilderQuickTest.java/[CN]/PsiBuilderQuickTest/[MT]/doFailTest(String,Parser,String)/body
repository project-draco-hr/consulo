{
  final PrintStream std=System.err;
  System.setErr(new PrintStream(new NullStream()));
  try {
    try {
      ParserDefinition parserDefinition=new ParserDefinition(){
        @NotNull @Override public Lexer createLexer(        @NotNull LanguageVersion languageVersion){
          return null;
        }
        @NotNull @Override public PsiParser createParser(        @NotNull LanguageVersion languageVersion){
          return null;
        }
        @NotNull @Override public IFileElementType getFileNodeType(){
          return null;
        }
        @NotNull @Override public TokenSet getWhitespaceTokens(        @NotNull LanguageVersion languageVersion){
          return TokenSet.EMPTY;
        }
        @NotNull @Override public TokenSet getCommentTokens(        LanguageVersion languageVersion){
          return TokenSet.EMPTY;
        }
        @NotNull @Override public TokenSet getStringLiteralElements(        LanguageVersion languageVersion){
          return null;
        }
        @NotNull @Override public PsiElement createElement(        ASTNode node){
          return null;
        }
        @Override public PsiFile createFile(        FileViewProvider viewProvider){
          return null;
        }
        @Override public SpaceRequirements spaceExistanceTypeBetweenTokens(        ASTNode left,        ASTNode right){
          return null;
        }
      }
;
      final PsiBuilder builder=PsiBuilderFactory.getInstance().createBuilder(parserDefinition,new MyTestLexer(),MockPsiFile.DUMMY_LANG_VERSION,text);
      builder.setDebugMode(true);
      parser.parse(builder);
      builder.getLightTree();
      fail("should fail");
    }
 catch (    AssertionError e) {
      assertEquals(expected,e.getMessage());
    }
  }
  finally {
    System.setErr(std);
  }
}
