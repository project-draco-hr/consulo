{
  long start=System.currentTimeMillis();
  suffixes.clear();
  nameCount.clear();
  VirtualFile[] roots=ManagingFS.getInstance().getRoots(LocalFileSystem.getInstance());
  for (  VirtualFile root : roots) {
    compute(root);
  }
  final List<Pair<String,Integer>> names=new ArrayList<Pair<String,Integer>>(nameCount.size());
  nameCount.forEachEntry(new TObjectIntProcedure<String>(){
    @Override public boolean execute(    String name,    int count){
      names.add(Pair.create(name,count));
      return true;
    }
  }
);
  Collections.sort(names,new Comparator<Pair<String,Integer>>(){
    @Override public int compare(    Pair<String,Integer> o1,    Pair<String,Integer> o2){
      return o2.second - o1.second;
    }
  }
);
  System.out.println("Most frequent names (" + names.size() + " total):");
  int saveByIntern=0;
  for (  Pair<String,Integer> pair : names) {
    int count=pair.second;
    String name=pair.first;
    System.out.println(name + " -> " + count);
    saveByIntern+=count * name.length();
    if (count == 1)     break;
  }
  System.out.println("Total save if names were interned: " + saveByIntern + "; ------------");
  System.out.println("Suffix counts:(" + suffixes.size() + " total)");
  show(suffixes);
  final TObjectIntHashMap<String> save=new TObjectIntHashMap<String>();
  suffixes.forEachEntry(new TObjectIntProcedure<String>(){
    @Override public boolean execute(    String s,    int count){
      save.put(s,count * s.length());
      return true;
    }
  }
);
  System.out.println("Supposed save by stripping suffixes: (" + save.size() + " total)");
  final List<Pair<String,Integer>> saveSorted=show(save);
  final List<String> picked=new ArrayList<String>();
  while (picked.size() != 15) {
    Pair<String,Integer> cp=saveSorted.get(0);
    final String candidate=cp.first;
    picked.add(candidate);
    System.out.println("Candidate: '" + candidate + "', save = "+ cp.second);
    Collections.sort(picked,new Comparator<String>(){
      @Override public int compare(      String o1,      String o2){
        return o2.length() - o1.length();
      }
    }
);
    saveSorted.clear();
    suffixes.forEachEntry(new TObjectIntProcedure<String>(){
      @Override public boolean execute(      String s,      int count){
        for (int i=picked.size() - 1; i >= 0; i--) {
          String pick=picked.get(i);
          if (pick.endsWith(s)) {
            count-=suffixes.get(pick);
            break;
          }
        }
        saveSorted.add(Pair.create(s,s.length() * count));
        return true;
      }
    }
);
    Collections.sort(saveSorted,new Comparator<Pair<String,Integer>>(){
      @Override public int compare(      Pair<String,Integer> o1,      Pair<String,Integer> o2){
        return o2.second.compareTo(o1.second);
      }
    }
);
  }
  System.out.println("Picked: " + StringUtil.join(picked,new Function<String,String>(){
    @Override public String fun(    String s){
      return "\"" + s + "\"";
    }
  }
,","));
  Collections.sort(picked,new Comparator<String>(){
    @Override public int compare(    String o1,    String o2){
      return o2.length() - o1.length();
    }
  }
);
  int saved=0;
  for (int i=0; i < picked.size(); i++) {
    String s=picked.get(i);
    int count=suffixes.get(s);
    for (int k=0; k < i; k++) {
      String prev=picked.get(k);
      if (prev.endsWith(s)) {
        count-=suffixes.get(prev);
        break;
      }
    }
    saved+=count * s.length();
  }
  System.out.println("total saved = " + saved);
  System.out.println("Time spent: " + (System.currentTimeMillis() - start));
}
