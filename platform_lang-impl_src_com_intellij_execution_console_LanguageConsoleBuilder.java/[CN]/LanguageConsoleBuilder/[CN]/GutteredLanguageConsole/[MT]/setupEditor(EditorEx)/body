{
  if (editor == getConsoleEditor()) {
    return;
  }
  final ConsoleGutterComponent lineStartGutter=new ConsoleGutterComponent(editor,gutterContentProvider,true);
  final ConsoleGutterComponent lineEndGutter=new ConsoleGutterComponent(editor,gutterContentProvider,false);
  editor.getSoftWrapModel().forceAdditionalColumnsUsage();
  ((SoftWrapModelImpl)editor.getSoftWrapModel()).getApplianceManager().setWidthProvider(new SoftWrapApplianceManager.VisibleAreaWidthProvider(){
    @Override public int getVisibleAreaWidth(){
      int guttersWidth=lineEndGutter.getPreferredWidth() + lineStartGutter.getPreferredWidth();
      EditorEx editor=getHistoryViewer();
      return editor.getScrollingModel().getVisibleArea().width - guttersWidth;
    }
  }
);
  editor.setHorizontalScrollbarVisible(true);
  JLayeredPane layeredPane=new JLayeredPane(){
    @Override public Dimension getPreferredSize(){
      Dimension editorSize=getEditorComponent().getPreferredSize();
      return new Dimension(lineStartGutter.getPreferredSize().width + editorSize.width,editorSize.height);
    }
    @Override public Dimension getMinimumSize(){
      Dimension editorSize=getEditorComponent().getMinimumSize();
      return new Dimension(lineStartGutter.getPreferredSize().width + editorSize.width,editorSize.height);
    }
    @Override public void doLayout(){
      EditorComponentImpl editor=getEditorComponent();
      int w=getWidth();
      int h=getHeight();
      int lineStartGutterWidth=lineStartGutter.getPreferredSize().width;
      lineStartGutter.setBounds(0,0,lineStartGutterWidth + gutterContentProvider.getLineStartGutterOverlap(editor.getEditor()),h);
      editor.setBounds(lineStartGutterWidth,0,w - lineStartGutterWidth,h);
      int lineEndGutterWidth=lineEndGutter.getPreferredSize().width;
      lineEndGutter.setBounds(lineStartGutterWidth + (w - lineEndGutterWidth - editor.getEditor().getScrollPane().getVerticalScrollBar().getWidth()),0,lineEndGutterWidth,h);
    }
    @NotNull private EditorComponentImpl getEditorComponent(){
      for (int i=getComponentCount() - 1; i >= 0; i--) {
        Component component=getComponent(i);
        if (component instanceof EditorComponentImpl) {
          return (EditorComponentImpl)component;
        }
      }
      throw new IllegalStateException();
    }
  }
;
  layeredPane.add(lineStartGutter,JLayeredPane.PALETTE_LAYER);
  JScrollPane scrollPane=editor.getScrollPane();
  layeredPane.add(scrollPane.getViewport().getView(),JLayeredPane.DEFAULT_LAYER);
  layeredPane.add(lineEndGutter,JLayeredPane.PALETTE_LAYER);
  scrollPane.setViewportView(layeredPane);
  GutterUpdateScheduler gutterUpdateScheduler=new GutterUpdateScheduler(lineStartGutter,lineEndGutter);
  getProject().getMessageBus().connect(this).subscribe(DocumentBulkUpdateListener.TOPIC,gutterUpdateScheduler);
  editor.getDocument().addDocumentListener(gutterUpdateScheduler);
}
