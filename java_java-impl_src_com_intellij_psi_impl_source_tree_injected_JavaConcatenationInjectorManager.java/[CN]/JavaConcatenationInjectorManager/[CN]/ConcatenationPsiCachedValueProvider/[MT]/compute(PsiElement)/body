{
  PsiElement element=context;
  PsiElement parent=context.getParent();
  while (parent instanceof PsiPolyadicExpression && ((PsiPolyadicExpression)parent).getOperationTokenType() == JavaTokenType.PLUS || parent instanceof PsiAssignmentExpression && ((PsiAssignmentExpression)parent).getOperationTokenType() == JavaTokenType.PLUSEQ || parent instanceof PsiConditionalExpression && ((PsiConditionalExpression)parent).getCondition() != element || parent instanceof PsiTypeCastExpression || parent instanceof PsiParenthesizedExpression) {
    element=parent;
    parent=parent.getParent();
  }
  PsiElement[] operands;
  PsiElement anchor;
  if (element instanceof PsiPolyadicExpression || element instanceof PsiAssignmentExpression) {
    List<PsiElement> operandList=new ArrayList<PsiElement>();
    collectOperands((PsiExpression)element,operandList);
    operands=PsiUtilBase.toPsiElementArray(operandList);
    anchor=element;
  }
 else {
    operands=new PsiElement[]{context};
    anchor=context;
  }
  Project project=context.getProject();
  MultiHostRegistrarImpl registrar=new MultiHostRegistrarImpl(project,context.getContainingFile(),anchor);
  JavaConcatenationInjectorManager concatenationInjectorManager=getInstance(project);
  for (  ConcatenationAwareInjector concatenationInjector : concatenationInjectorManager.myConcatenationInjectors) {
    concatenationInjector.getLanguagesToInject(registrar,operands);
  }
  CachedValueProvider.Result<MultiHostRegistrarImpl> result=CachedValueProvider.Result.create(registrar,PsiModificationTracker.MODIFICATION_COUNT,concatenationInjectorManager);
  ParameterizedCachedValue<MultiHostRegistrarImpl,PsiElement> cachedValue;
  if (registrar.result != null) {
    cachedValue=CachedValuesManager.getManager(context.getProject()).createParameterizedCachedValue(this,false);
    ((PsiParameterizedCachedValue<MultiHostRegistrarImpl,PsiElement>)cachedValue).setValue(result);
  }
 else {
    cachedValue=InjectedLanguageUtil.NULL_VALUE;
  }
  for (  PsiElement operand : operands) {
    operand.putUserData(INJECTED_PSI_IN_CONCATENATION,cachedValue);
  }
  anchor.putUserData(INJECTED_PSI_IN_CONCATENATION,cachedValue);
  context.putUserData(INJECTED_PSI_IN_CONCATENATION,cachedValue);
  return result;
}
