{
  myProject=project;
  myEditor=editor;
  myHandler=handler;
  myProvider=provider;
  myLbraceMarker=editor.getDocument().createRangeMarker(lbraceOffset,lbraceOffset);
  myHint=hint;
  myComponent=(ParameterInfoComponent)myHint.getComponent();
  List<ParameterInfoController> allControllers=getAllControllers(myEditor);
  allControllers.add(this);
  myEditorCaretListener=new CaretAdapter(){
    @Override public void caretPositionChanged(    CaretEvent e){
      myAlarm.cancelAllRequests();
      addAlarmRequest();
    }
  }
;
  myEditor.getCaretModel().addCaretListener(myEditorCaretListener);
  myEditor.getDocument().addDocumentListener(new DocumentAdapter(){
    @Override public void documentChanged(    DocumentEvent e){
      myAlarm.cancelAllRequests();
      addAlarmRequest();
    }
  }
,this);
  PropertyChangeListener lookupListener=new PropertyChangeListener(){
    @Override public void propertyChange(    PropertyChangeEvent evt){
      if (LookupManager.PROP_ACTIVE_LOOKUP.equals(evt.getPropertyName())) {
        final LookupImpl lookup=(LookupImpl)evt.getNewValue();
        if (lookup != null && lookup.isShown()) {
          adjustPositionForLookup(lookup);
        }
      }
    }
  }
;
  LookupManager.getInstance(project).addPropertyChangeListener(lookupListener,this);
  updateComponent();
  if (myEditor instanceof EditorImpl) {
    Disposer.register(((EditorImpl)myEditor).getDisposable(),this);
  }
}
