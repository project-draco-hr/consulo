{
  myProject=project;
  myEditor=editor;
  myHandler=handler;
  myProvider=provider;
  myParameterCloseChars=handler.getParameterCloseChars();
  myLbraceMarker=editor.getDocument().createRangeMarker(lbraceOffset,lbraceOffset);
  myHint=hint;
  myComponent=(ParameterInfoComponent)myHint.getComponent();
  ArrayList<ParameterInfoController> allControllers=getAllControllers(myEditor);
  allControllers.add(this);
  myEditorCaretListener=new CaretListener(){
    @Override public void caretPositionChanged(    CaretEvent e){
      myAlarm.cancelAllRequests();
      addAlarmRequest();
    }
  }
;
  myEditor.getCaretModel().addCaretListener(myEditorCaretListener);
  myEditorDocumentListener=new DocumentAdapter(){
    @Override public void documentChanged(    DocumentEvent e){
      myAlarm.cancelAllRequests();
      addAlarmRequest();
    }
  }
;
  myEditor.getDocument().addDocumentListener(myEditorDocumentListener);
  myLookupListener=new PropertyChangeListener(){
    @Override public void propertyChange(    PropertyChangeEvent evt){
      if (LookupManager.PROP_ACTIVE_LOOKUP.equals(evt.getPropertyName())) {
        final LookupImpl lookup=(LookupImpl)evt.getNewValue();
        if (lookup != null && lookup.isShown()) {
          adjustPositionForLookup(lookup);
        }
      }
    }
  }
;
  LookupManager.getInstance(project).addPropertyChangeListener(myLookupListener);
  updateComponent();
  if (myEditor instanceof EditorImpl) {
    Disposer.register(((EditorImpl)myEditor).getDisposable(),new Disposable(){
      @Override public void dispose(){
        ParameterInfoController.this.dispose();
      }
    }
);
  }
}
