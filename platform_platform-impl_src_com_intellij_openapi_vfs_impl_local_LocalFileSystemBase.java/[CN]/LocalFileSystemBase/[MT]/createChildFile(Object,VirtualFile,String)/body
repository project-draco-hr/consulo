{
  if (!VirtualFile.isValidName(file)) {
    throw new IOException(VfsBundle.message("file.invalid.name.error",file));
  }
  if (!parent.exists() || !parent.isDirectory()) {
    throw new IOException(VfsBundle.message("vfs.target.not.directory.error",parent.getPath()));
  }
  if (parent.findChild(file) != null) {
    throw new IOException(VfsBundle.message("vfs.target.already.exists.error",parent.getPath() + "/" + file));
  }
  File ioParent=convertToIOFile(parent);
  if (!ioParent.isDirectory()) {
    throw new IOException(VfsBundle.message("target.not.directory.error",ioParent.getPath()));
  }
  if (!auxCreateFile(parent,file)) {
    File ioFile=new File(ioParent,file);
    if (!FileUtil.createIfDoesntExist(ioFile)) {
      throw new IOException(VfsBundle.message("new.file.failed.error",ioFile.getPath()));
    }
  }
  auxNotifyCompleted(new ThrowableConsumer<LocalFileOperationsHandler,IOException>(){
    @Override public void consume(    LocalFileOperationsHandler handler) throws IOException {
      handler.createFile(parent,file);
    }
  }
);
  return new FakeVirtualFile(parent,file);
}
