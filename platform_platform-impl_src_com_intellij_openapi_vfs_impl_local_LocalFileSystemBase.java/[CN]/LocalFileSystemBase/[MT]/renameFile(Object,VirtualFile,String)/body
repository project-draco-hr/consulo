{
  if (!VirtualFile.isValidName(newName)) {
    throw new IOException(VfsBundle.message("file.invalid.name.error",newName));
  }
  boolean sameName=!isCaseSensitive() && newName.equalsIgnoreCase(file.getName());
  if (!file.exists()) {
    throw new IOException(VfsBundle.message("vfs.file.not.exist.error",file.getPath()));
  }
  VirtualFile parent=file.getParent();
  if (parent == null) {
    throw new IOException(VfsBundle.message("cannot.rename.root.directory",file.getPath()));
  }
  if (!sameName && parent.findChild(newName) != null) {
    throw new IOException(VfsBundle.message("vfs.target.already.exists.error",parent.getPath() + "/" + newName));
  }
  File ioFile=convertToIOFile(file);
  if (!ioFile.exists()) {
    throw new FileNotFoundException(VfsBundle.message("file.not.exist.error",ioFile.getPath()));
  }
  File ioTarget=new File(convertToIOFile(parent),newName);
  if (!sameName && ioTarget.exists()) {
    throw new IOException(VfsBundle.message("target.already.exists.error",ioTarget.getPath()));
  }
  if (!auxRename(file,newName)) {
    if (!FileUtil.rename(ioFile,newName)) {
      throw new IOException(VfsBundle.message("rename.failed.error",ioFile.getPath(),newName));
    }
  }
  auxNotifyCompleted(new ThrowableConsumer<LocalFileOperationsHandler,IOException>(){
    @Override public void consume(    LocalFileOperationsHandler handler) throws IOException {
      handler.rename(file,newName);
    }
  }
);
}
