{
  final Map<File,String> result=new LinkedHashMap<File,String>();
  collectPathsRecursively(chunk,ClasspathKind.compile(includeTests),new PathsGetter(){
    public void apply(    Module module,    ClasspathKind kind){
      final Map<String,String> prefixes=module.getSourceRootPrefixes();
      for (      String root : module.getSourceRoots()) {
        addRoot(prefixes,root);
      }
      if (kind.isTestsIncluded()) {
        for (        String root : module.getTestRoots()) {
          addRoot(prefixes,root);
        }
      }
    }
    private void addRoot(    Map<String,String> prefixes,    String root){
      String prefix=prefixes.get(root);
      if (prefix != null) {
        if (!prefix.isEmpty()) {
          prefix=prefix.replace('.','/');
          if (!prefix.endsWith("/")) {
            prefix+="/";
          }
        }
 else {
          prefix=null;
        }
      }
      result.put(new File(root),prefix);
    }
  }
);
  return result;
}
