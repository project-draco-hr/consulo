{
  final Action[] actions=super.createActions();
  return ArrayUtil.append(actions,new AbstractAction("Check Now"){
    public void actionPerformed(    final ActionEvent e){
      final boolean[] result=new boolean[1];
      final Exception[] ex=new Exception[1];
      if (ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
        @Override public void run(){
          try {
            result[0]=UpdateChecker.checkPluginsHost(correctRepositoryRule(getTextField().getText()),new ArrayList<PluginDownloader>());
          }
 catch (          Exception e1) {
            ex[0]=e1;
          }
        }
      }
,"Checking plugins repository...",true,null,getPreferredFocusedComponent())) {
        if (ex[0] != null) {
          showErrorDialog(myField,"Connection failed: " + ex[0].getMessage());
        }
 else         if (result[0]) {
          showInfoMessage(myField,"Plugins repository was successfully checked","Check Plugins Repository");
        }
 else {
          showErrorDialog(myField,"Plugin descriptions contain some errors. Please, check idea.log for details.");
        }
      }
    }
  }
);
}
