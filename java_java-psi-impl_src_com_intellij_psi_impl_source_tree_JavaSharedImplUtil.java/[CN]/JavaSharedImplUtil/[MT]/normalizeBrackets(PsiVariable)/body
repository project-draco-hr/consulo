{
  CompositeElement variableElement=(CompositeElement)variable.getNode();
  PsiTypeElement typeElement=variable.getTypeElement();
  PsiIdentifier nameElement=variable.getNameIdentifier();
  LOG.assertTrue(typeElement != null && nameElement != null);
  ASTNode type=typeElement.getNode();
  ASTNode name=nameElement.getNode();
  ASTNode firstBracket=null;
  ASTNode lastBracket=null;
  int arrayCount=0;
  ASTNode element=name;
  while (element != null) {
    element=PsiImplUtil.skipWhitespaceAndComments(element.getTreeNext());
    if (element == null || element.getElementType() != JavaTokenType.LBRACKET)     break;
    if (firstBracket == null)     firstBracket=element;
    lastBracket=element;
    arrayCount++;
    element=PsiImplUtil.skipWhitespaceAndComments(element.getTreeNext());
    if (element == null || element.getElementType() != JavaTokenType.RBRACKET)     break;
    lastBracket=element;
  }
  if (firstBracket != null) {
    element=firstBracket;
    while (true) {
      ASTNode next=element.getTreeNext();
      variableElement.removeChild(element);
      if (element == lastBracket)       break;
      element=next;
    }
    CompositeElement newType=(CompositeElement)type.clone();
    for (int i=0; i < arrayCount; i++) {
      CompositeElement newType1=ASTFactory.composite(JavaElementType.TYPE);
      newType1.rawAddChildren(newType);
      newType1.rawAddChildren(ASTFactory.leaf(JavaTokenType.LBRACKET,"["));
      newType1.rawAddChildren(ASTFactory.leaf(JavaTokenType.RBRACKET,"]"));
      newType=newType1;
      newType.acceptTree(new GeneratedMarkerVisitor());
    }
    newType.putUserData(CharTable.CHAR_TABLE_KEY,SharedImplUtil.findCharTableByTree(type));
    variableElement.replaceChild(type,newType);
  }
}
