{
  Set<ResourceType> types=EnumSet.noneOf(ResourceType.class);
  for (  AttributeFormat format : formats) {
switch (format) {
case Boolean:
      types.add(ResourceType.BOOL);
    break;
case Color:
  types.add(ResourceType.COLOR);
types.add(ResourceType.DRAWABLE);
break;
case Dimension:
types.add(ResourceType.DIMEN);
break;
case Integer:
types.add(ResourceType.INTEGER);
break;
case String:
types.add(ResourceType.STRING);
break;
case Reference:
types.add(ResourceType.COLOR);
types.add(ResourceType.DRAWABLE);
types.add(ResourceType.STRING);
types.add(ResourceType.ID);
types.add(ResourceType.STYLE);
break;
}
}
myTypes=types.toArray(new ResourceType[types.size()]);
if (formats.contains(AttributeFormat.Enum) || formats.contains(AttributeFormat.Boolean)) {
ComboboxWithBrowseButton editor=new ComboboxWithBrowseButton();
JComboBox comboBox=editor.getComboBox();
DefaultComboBoxModel model;
if (formats.contains(AttributeFormat.Boolean)) {
model=new DefaultComboBoxModel(new String[]{StringsComboEditor.UNSET,"true","false"});
}
 else {
model=new DefaultComboBoxModel(values);
model.insertElementAt(StringsComboEditor.UNSET,0);
}
comboBox.setModel(model);
comboBox.setEditable(true);
comboBox.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
fireValueCommitted(false,true);
}
}
);
ComboEditor.addEditorSupport(this,comboBox);
myEditor=editor;
}
 else {
myEditor=new TextFieldWithBrowseButton();
}
myEditor.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
PropertyParser parser=myRootComponent.getClientProperty(PropertyParser.KEY);
ResourceDialog dialog=parser.createResourceDialog(myTypes);
dialog.show();
if (dialog.getExitCode() == DialogWrapper.OK_EXIT_CODE) {
getComboText().setText(dialog.getResourceName());
fireValueCommitted(false,true);
}
}
}
);
myEditor.addFocusListener(new FocusAdapter(){
@Override public void focusGained(FocusEvent e){
myEditor.getChildComponent().requestFocus();
}
}
);
}
