{
  myTypes=types;
  if (formats.contains(AttributeFormat.Enum) || formats.contains(AttributeFormat.Boolean)) {
    ComboboxWithBrowseButton editor=new ComboboxWithBrowseButton();
    final JComboBox comboBox=editor.getComboBox();
    DefaultComboBoxModel model;
    if (formats.contains(AttributeFormat.Boolean)) {
      model=new DefaultComboBoxModel(new String[]{StringsComboEditor.UNSET,"true","false"});
    }
 else {
      model=new DefaultComboBoxModel(values);
      model.insertElementAt(StringsComboEditor.UNSET,0);
    }
    comboBox.setModel(model);
    comboBox.setEditable(true);
    ComboEditor.addEditorSupport(this,comboBox);
    comboBox.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        if (comboBox.getSelectedItem() == StringsComboEditor.UNSET) {
          comboBox.setSelectedItem(null);
        }
        fireValueCommitted(true,true);
      }
    }
);
    myEditor=editor;
    comboBox.setSelectedIndex(0);
  }
 else {
    myEditor=new TextFieldWithBrowseButton();
    myEditor.registerKeyboardAction(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
      }
    }
,KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
    getComboText().addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        fireValueCommitted(true,true);
      }
    }
);
  }
  myEditor.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      showDialog();
    }
  }
);
  myEditor.addFocusListener(new FocusAdapter(){
    @Override public void focusGained(    FocusEvent e){
      myEditor.getChildComponent().requestFocus();
    }
  }
);
}
