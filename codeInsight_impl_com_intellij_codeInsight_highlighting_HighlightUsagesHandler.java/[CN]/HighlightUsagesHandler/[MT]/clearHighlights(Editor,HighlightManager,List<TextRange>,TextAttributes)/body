{
  RangeHighlighter[] highlighters=((HighlightManagerImpl)highlightManager).getHighlighters(editor);
  Arrays.sort(highlighters,new Comparator<RangeHighlighter>(){
    public int compare(    RangeHighlighter o1,    RangeHighlighter o2){
      return o1.getStartOffset() - o2.getStartOffset();
    }
  }
);
  Collections.sort(rangesToHighlight,new Comparator<TextRange>(){
    public int compare(    TextRange o1,    TextRange o2){
      return o1.getStartOffset() - o2.getStartOffset();
    }
  }
);
  int i=0;
  int j=0;
  while (i < highlighters.length && j < rangesToHighlight.size()) {
    RangeHighlighter highlighter=highlighters[i];
    TextRange highlighterRange=new TextRange(highlighter.getStartOffset(),highlighter.getEndOffset());
    TextRange refRange=rangesToHighlight.get(j);
    if (refRange.equals(highlighterRange) && attributes.equals(highlighter.getTextAttributes()) && highlighter.getLayer() == HighlighterLayer.SELECTION - 1) {
      highlightManager.removeSegmentHighlighter(editor,highlighter);
      i++;
      j++;
    }
 else     if (refRange.getStartOffset() > highlighterRange.getEndOffset()) {
      i++;
    }
 else     if (refRange.getEndOffset() < highlighterRange.getStartOffset()) {
      j++;
    }
 else {
      i++;
      j++;
    }
  }
  return true;
}
