{
  if (file instanceof PsiCompiledElement)   file=(PsiFile)((PsiCompiledElement)file).getMirror();
  PsiElement target=targets[0];
  HighlightManager highlightManager=HighlightManager.getInstance(project);
  boolean clearHighlights=isClearHighlights(editor,highlightManager);
  if (target instanceof PsiKeyword) {
    if (PsiKeyword.TRY.equals(target.getText())) {
      PsiElement parent=target.getParent();
      if (!(parent instanceof PsiTryStatement)) {
        return EMPTY_HIGHLIGHT_RUNNABLE;
      }
      PsiTryStatement tryStatement=(PsiTryStatement)parent;
      final PsiClassType[] psiClassTypes=ExceptionUtil.collectUnhandledExceptions(tryStatement.getTryBlock(),tryStatement.getTryBlock());
      return createChoosingRunnable(project,psiClassTypes,tryStatement.getTryBlock(),target,editor,file,ANY_TYPE,clearHighlights);
    }
    if (PsiKeyword.CATCH.equals(target.getText())) {
      PsiElement parent=target.getParent();
      if (!(parent instanceof PsiCatchSection)) {
        return EMPTY_HIGHLIGHT_RUNNABLE;
      }
      PsiTryStatement tryStatement=((PsiCatchSection)parent).getTryStatement();
      final PsiParameter param=((PsiCatchSection)parent).getParameter();
      if (param == null)       return EMPTY_HIGHLIGHT_RUNNABLE;
      final PsiParameter[] catchBlockParameters=tryStatement.getCatchBlockParameters();
      final PsiClassType[] allThrownExceptions=ExceptionUtil.collectUnhandledExceptions(tryStatement.getTryBlock(),tryStatement.getTryBlock());
      TypeFilter filter=new TypeFilter(){
        public boolean accept(        PsiType type){
          for (          PsiParameter parameter : catchBlockParameters) {
            boolean isAssignable=parameter.getType().isAssignableFrom(type);
            if (parameter != param) {
              if (isAssignable)               return false;
            }
 else {
              return isAssignable;
            }
          }
          return false;
        }
      }
;
      ArrayList<PsiClassType> filtered=new ArrayList<PsiClassType>();
      for (      PsiClassType type : allThrownExceptions) {
        if (filter.accept(type))         filtered.add(type);
      }
      return createChoosingRunnable(project,filtered.toArray(new PsiClassType[filtered.size()]),tryStatement.getTryBlock(),target,editor,file,filter,clearHighlights);
    }
    if (PsiKeyword.THROWS.equals(target.getText())) {
      PsiElement parent=target.getParent().getParent();
      if (!(parent instanceof PsiMethod))       return EMPTY_HIGHLIGHT_RUNNABLE;
      PsiMethod method=(PsiMethod)parent;
      if (method.getBody() == null)       return EMPTY_HIGHLIGHT_RUNNABLE;
      final PsiClassType[] psiClassTypes=ExceptionUtil.collectUnhandledExceptions(method.getBody(),method.getBody());
      return createChoosingRunnable(project,psiClassTypes,method.getBody(),target,editor,file,ANY_TYPE,clearHighlights);
    }
    if (PsiKeyword.RETURN.equals(target.getText()) || PsiKeyword.THROW.equals(target.getText())) {
      PsiElement parent=target.getParent();
      if (!(parent instanceof PsiReturnStatement) && !(parent instanceof PsiThrowStatement))       return EMPTY_HIGHLIGHT_RUNNABLE;
      PsiMethod method=PsiTreeUtil.getParentOfType(target,PsiMethod.class);
      if (method == null)       return EMPTY_HIGHLIGHT_RUNNABLE;
      PsiCodeBlock body=method.getBody();
      try {
        ControlFlow flow=ControlFlowFactory.getInstance(project).getControlFlow(body,LocalsOrMyInstanceFieldsControlFlowPolicy.getInstance(),false);
        List<PsiStatement> exitStatements=new ArrayList<PsiStatement>();
        ControlFlowUtil.findExitPointsAndStatements(flow,flow.getStartOffset(body),flow.getEndOffset(body),new IntArrayList(),exitStatements,new Class[]{PsiReturnStatement.class,PsiBreakStatement.class,PsiContinueStatement.class,PsiThrowStatement.class,PsiExpressionStatement.class});
        if (!exitStatements.contains(parent))         return EMPTY_HIGHLIGHT_RUNNABLE;
        return new DoHighlightExitPointsRunnable(project,editor,exitStatements.toArray(new PsiElement[exitStatements.size()]),clearHighlights);
      }
 catch (      AnalysisCanceledException e) {
        return EMPTY_HIGHLIGHT_RUNNABLE;
      }
    }
  }
  PsiElement context=InjectedLanguageUtil.getTopLevelFile(file);
  SearchScope searchScope=new LocalSearchScope(context);
  Collection<PsiReference> refs;
  if (target instanceof PsiMethod) {
    refs=MethodReferencesSearch.search((PsiMethod)target,searchScope,true).findAll();
  }
 else {
    refs=ReferencesSearch.search(target,searchScope,false).findAll();
  }
  return new DoHighlightRunnable(new ArrayList<PsiReference>(refs),project,target,editor,file,clearHighlights);
}
