{
  final PsiElementFactory factory=PsiManager.getInstance(myProject).getElementFactory();
  if (myExceptionClasses.length == 1) {
    ArrayList<PsiReference> refs=new ArrayList<PsiReference>();
    final ArrayList<PsiElement> otherOccurrences=new ArrayList<PsiElement>();
    addExceptionThrownPlaces(refs,otherOccurrences,factory.createType(myExceptionClasses[0]),myHighlightInPlace,myTypeFilter);
    new DoHighlightRunnable(refs,myProject,myTarget,myEditor,myFile).run();
    highlightOtherOccurrences(otherOccurrences);
  }
 else   if (myExceptionClasses.length > 0) {
    PsiClassListCellRenderer renderer=new PsiClassListCellRenderer();
    Arrays.sort(myExceptionClasses,renderer.getComparator());
    Vector<Object> model=new Vector<Object>(Arrays.asList(myExceptionClasses));
    model.insertElementAt(CodeInsightBundle.message("highlight.thrown.exceptions.chooser.all.entry"),0);
    myList=new JList(model);
    myList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    myList.setCellRenderer(renderer);
    renderer.installSpeedSearch(myList);
    final Runnable callback=new Runnable(){
      public void run(){
        int idx=myList.getSelectedIndex();
        if (idx < 0)         return;
        ArrayList<PsiReference> refs=new ArrayList<PsiReference>();
        final ArrayList<PsiElement> otherOccurrences=new ArrayList<PsiElement>();
        if (idx > 0) {
          addExceptionThrownPlaces(refs,otherOccurrences,factory.createType(myExceptionClasses[idx - 1]),myHighlightInPlace,myTypeFilter);
        }
 else {
          for (          PsiClass exceptionClass : myExceptionClasses) {
            addExceptionThrownPlaces(refs,otherOccurrences,factory.createType(exceptionClass),myHighlightInPlace,myTypeFilter);
          }
        }
        new DoHighlightRunnable(refs,myProject,myTarget,myEditor,myFile).run();
        highlightOtherOccurrences(otherOccurrences);
      }
    }
;
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      public void run(){
        new PopupChooserBuilder(myList).setTitle(CodeInsightBundle.message("highlight.exceptions.thrown.chooser.title")).setItemChoosenCallback(callback).createPopup().showInBestPositionFor(myEditor);
      }
    }
);
  }
}
