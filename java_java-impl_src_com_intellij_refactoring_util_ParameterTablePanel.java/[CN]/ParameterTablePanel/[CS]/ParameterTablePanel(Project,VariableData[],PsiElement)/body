{
  super(new BorderLayout());
  myProject=project;
  myVariableData=variableData;
  myTableModel=new MyTableModel();
  myTable=new JBTable(myTableModel);
  DefaultCellEditor defaultEditor=(DefaultCellEditor)myTable.getDefaultEditor(Object.class);
  defaultEditor.setClickCountToStart(1);
  myTable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myTable.setCellSelectionEnabled(true);
  myTable.getColumnModel().getColumn(MyTableModel.CHECKMARK_COLUMN).setCellRenderer(new CheckBoxTableCellRenderer());
  myTable.getColumnModel().getColumn(MyTableModel.CHECKMARK_COLUMN).setMaxWidth(new JCheckBox().getPreferredSize().width);
  myTable.getColumnModel().getColumn(MyTableModel.PARAMETER_NAME_COLUMN).setCellRenderer(new DefaultTableCellRenderer(){
    public Component getTableCellRendererComponent(    JTable table,    Object value,    boolean isSelected,    boolean hasFocus,    int row,    int column){
      super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
      VariableData data=getVariableData()[row];
      setText(data.name);
      return this;
    }
  }
);
  myParameterTypeSelectors=new TypeSelector[getVariableData().length];
  for (int i=0; i < myParameterTypeSelectors.length; i++) {
    final PsiVariable variable=getVariableData()[i].variable;
    final PsiExpression[] occurrences=findVariableOccurrences(scopeElements,variable);
    final TypeSelectorManager manager=new TypeSelectorManagerImpl(myProject,getVariableData()[i].type,occurrences,areTypesDirected()){
      @Override protected boolean isUsedAfter(){
        return ParameterTablePanel.this.isUsedAfter(variable);
      }
    }
;
    myParameterTypeSelectors[i]=manager.getTypeSelector();
    getVariableData()[i].type=myParameterTypeSelectors[i].getSelectedType();
  }
  myTypeRendererCombo=new JComboBox(getVariableData());
  myTypeRendererCombo.setOpaque(true);
  myTypeRendererCombo.setBorder(null);
  myTypeRendererCombo.setRenderer(new ListCellRendererWrapper<VariableData>(myTypeRendererCombo.getRenderer()){
    @Override public void customize(    JList list,    VariableData value,    int index,    boolean selected,    boolean hasFocus){
      if (value != null) {
        setText(value.type.getPresentableText());
      }
    }
  }
);
  final TableColumn typeColumn=myTable.getColumnModel().getColumn(MyTableModel.PARAMETER_TYPE_COLUMN);
  typeColumn.setCellEditor(new AbstractTableCellEditor(){
    TypeSelector myCurrentSelector;
    final JBComboBoxTableCellEditorComponent myEditorComponent=new JBComboBoxTableCellEditorComponent();
    @Nullable public Object getCellEditorValue(){
      return myEditorComponent.getEditorValue();
    }
    public Component getTableCellEditorComponent(    final JTable table,    final Object value,    final boolean isSelected,    final int row,    final int column){
      myEditorComponent.setCell(table,row,column);
      myEditorComponent.setOptions(myParameterTypeSelectors[row].getTypes());
      myEditorComponent.setDefaultValue(getVariableData()[row].type);
      myEditorComponent.setToString(new Function<Object,String>(){
        @Override public String fun(        Object o){
          return ((PsiType)o).getPresentableText();
        }
      }
);
      myCurrentSelector=myParameterTypeSelectors[row];
      return myEditorComponent;
    }
  }
);
  myTable.getColumnModel().getColumn(MyTableModel.PARAMETER_TYPE_COLUMN).setCellRenderer(new DefaultTableCellRenderer(){
    private JLabel myLabel;
    private JPanel myPanel;
{
      myLabel=new JLabel();
      myPanel=new JPanel(new BorderLayout());
      myPanel.add(myLabel,BorderLayout.CENTER);
      myPanel.add(new JBLabel(PlatformIcons.COMBOBOX_ARROW_ICON),BorderLayout.EAST);
    }
    public Component getTableCellRendererComponent(    JTable table,    Object value,    boolean isSelected,    boolean hasFocus,    int row,    int column){
      myLabel.setText(String.valueOf(value));
      myPanel.setBackground(isSelected ? table.getSelectionBackground() : table.getBackground());
      myLabel.setForeground(isSelected ? table.getSelectionForeground() : table.getForeground());
      return myPanel;
    }
  }
);
  myTable.setPreferredScrollableViewportSize(new Dimension(250,myTable.getRowHeight() * 5));
  myTable.setShowGrid(false);
  myTable.setIntercellSpacing(new Dimension(0,0));
  @NonNls final InputMap inputMap=myTable.getInputMap();
  inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_SPACE,0),"enable_disable");
  @NonNls final ActionMap actionMap=myTable.getActionMap();
  actionMap.put("enable_disable",new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      if (myTable.isEditing())       return;
      int[] rows=myTable.getSelectedRows();
      if (rows.length > 0) {
        boolean valueToBeSet=false;
        for (        int row : rows) {
          if (!getVariableData()[row].passAsParameter) {
            valueToBeSet=true;
            break;
          }
        }
        for (        int row : rows) {
          getVariableData()[row].passAsParameter=valueToBeSet;
        }
        myTableModel.fireTableRowsUpdated(rows[0],rows[rows.length - 1]);
        TableUtil.selectRows(myTable,rows);
      }
    }
  }
);
  actionMap.put("doCancel",new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      TableCellEditor editor=myTable.getCellEditor();
      if (editor != null) {
        editor.stopCellEditing();
      }
 else {
        doCancelAction();
      }
    }
  }
);
  final AddRemoveUpDownPanel.Buttons[] upDownButtons={AddRemoveUpDownPanel.Buttons.UP,AddRemoveUpDownPanel.Buttons.DOWN};
  JPanel listPanel=EditableRowTable.wrapToTableWithButtons(myTable,myTableModel,new CustomLineBorder(0,1,1,1),upDownButtons);
  add(listPanel,BorderLayout.CENTER);
  if (getVariableData().length > 1) {
    myTable.getSelectionModel().setSelectionInterval(0,0);
  }
}
