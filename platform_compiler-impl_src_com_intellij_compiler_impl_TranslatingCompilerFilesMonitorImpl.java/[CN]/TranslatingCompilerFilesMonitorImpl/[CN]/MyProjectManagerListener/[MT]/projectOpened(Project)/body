{
  final MessageBusConnection conn=project.getMessageBus().connect();
  myConnections.put(project,conn);
  final ProjectRef projRef=new ProjectRef(project);
  final int projectId=getProjectId(project);
  if (CompilerWorkspaceConfiguration.getInstance(project).useOutOfProcessBuild()) {
    suspendProject(project);
  }
 else {
    watchProject(project);
  }
  conn.subscribe(ModuleExtension.CHANGE_TOPIC,new ModuleExtensionChangeListener.Adapter(){
    @Override public void afterExtensionChanged(    @NotNull ModuleExtension<?> oldExtension,    @NotNull ModuleExtension<?> newExtension){
      for (      TranslatingCompilerFilesMonitorHelper helper : TranslatingCompilerFilesMonitorHelper.EP_NAME.getExtensions()) {
        if (helper.isModuleExtensionAffectToCompilation(oldExtension)) {
          myForceCompiling=true;
          break;
        }
      }
    }
  }
);
  conn.subscribe(ProjectTopics.PROJECT_ROOTS,new ModuleRootListener(){
    private VirtualFile[] myRootsBefore;
    private Alarm myAlarm=new Alarm(Alarm.ThreadToUse.SWING_THREAD,project);
    @Override public void beforeRootsChange(    final ModuleRootEvent event){
      if (isSuspended(projectId)) {
        return;
      }
      try {
        myRootsBefore=getRootsForScan(projRef.get());
      }
 catch (      ProjectRef.ProjectClosedException e) {
        myRootsBefore=null;
      }
    }
    @Override public void rootsChanged(    final ModuleRootEvent event){
      if (isSuspended(projectId)) {
        return;
      }
      if (LOG.isDebugEnabled()) {
        LOG.debug("Before roots changed for projectId=" + projectId + "; url="+ project.getPresentableUrl());
      }
      try {
        final VirtualFile[] rootsBefore=myRootsBefore;
        myRootsBefore=null;
        final VirtualFile[] rootsAfter=getRootsForScan(projRef.get());
        final Set<VirtualFile> newRoots=new HashSet<VirtualFile>();
        final Set<VirtualFile> oldRoots=new HashSet<VirtualFile>();
{
          if (rootsAfter.length > 0) {
            ContainerUtil.addAll(newRoots,rootsAfter);
          }
          if (rootsBefore != null) {
            newRoots.removeAll(Arrays.asList(rootsBefore));
          }
        }
{
          if (rootsBefore != null) {
            ContainerUtil.addAll(oldRoots,rootsBefore);
          }
          if (!oldRoots.isEmpty() && rootsAfter.length > 0) {
            oldRoots.removeAll(Arrays.asList(rootsAfter));
          }
        }
        myAlarm.cancelAllRequests();
        myAlarm.addRequest(new Runnable(){
          @Override public void run(){
            startAsyncScan(projectId);
            new Task.Backgroundable(project,CompilerBundle.message("compiler.initial.scanning.progress.text"),false){
              @Override public void run(              @NotNull final ProgressIndicator indicator){
                try {
                  if (newRoots.size() > 0) {
                    scanSourceContent(projRef,newRoots,newRoots.size(),true);
                  }
                  if (oldRoots.size() > 0) {
                    scanSourceContent(projRef,oldRoots,oldRoots.size(),false);
                  }
                  markOldOutputRoots(projRef,buildOutputRootsLayout(projRef));
                }
 catch (                ProjectRef.ProjectClosedException swallowed) {
                }
 finally {
                  terminateAsyncScan(projectId,false);
                }
              }
            }
.queue();
          }
        }
,500,ModalityState.NON_MODAL);
      }
 catch (      ProjectRef.ProjectClosedException e) {
        LOG.info(e);
      }
    }
  }
);
  scanSourcesForCompilableFiles(project);
}
