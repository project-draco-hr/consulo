{
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  PsiElement container=null;
  WeakReference<LightweightHint> ref=editor.getUserData(MY_LAST_HINT_KEY);
  if (ref != null) {
    LightweightHint hint=ref.get();
    if (hint != null && hint.isVisible()) {
      hint.hide();
      container=hint.getUserData(CONTAINER_KEY);
      if (!container.isValid()) {
        container=null;
      }
    }
  }
  if (container == null) {
    int offset=editor.getCaretModel().getOffset();
    container=file.findElementAt(offset);
    if (container == null)     return;
  }
  if (file instanceof PsiJavaFile || file instanceof XmlFile) {
    while (true) {
      container=findContainer(container);
      if (container == null)       return;
      if (!isDeclarationVisible(container,editor))       break;
    }
  }
 else {
    container=null;
    StructureViewBuilder builder=LanguageStructureViewBuilder.INSTANCE.getStructureViewBuilder(file);
    if (builder instanceof TreeBasedStructureViewBuilder) {
      StructureViewModel model=((TreeBasedStructureViewBuilder)builder).createStructureViewModel();
      Object element=model.getCurrentEditorElement();
      if (element instanceof PsiElement) {
        container=(PsiElement)element;
        while (true) {
          if (container == null || container instanceof PsiFile) {
            return;
          }
          if (!isDeclarationVisible(container,editor)) {
            break;
          }
          container=container.getParent();
          while (container != null && DeclarationRangeUtil.getPossibleDeclarationAtRange(container) == null) {
            container=container.getParent();
            if (container instanceof PsiFile)             return;
          }
        }
      }
    }
    if (container == null) {
      return;
    }
  }
  final TextRange range=DeclarationRangeUtil.getDeclarationRange(container);
  final PsiElement _container=container;
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    public void run(){
      LightweightHint hint=EditorFragmentComponent.showEditorFragmentHint(editor,range,true);
      if (hint != null) {
        hint.putUserData(CONTAINER_KEY,_container);
        editor.putUserData(MY_LAST_HINT_KEY,new WeakReference<LightweightHint>(hint));
      }
    }
  }
);
}
