{
  PsiReference firstRef=ReferencesSearch.search(variable).findFirst();
  if (firstRef == null) {
    variable.getParent().delete();
    return;
  }
  boolean isAccessedForWriting=false;
  final Collection<PsiReference> refs=ReferencesSearch.search(variable).findAll();
  for (  PsiReference ref : refs) {
    PsiElement refElement=ref.getElement();
    if (refElement instanceof PsiExpression) {
      if (PsiUtil.isAccessedForWriting((PsiExpression)refElement)) {
        isAccessedForWriting=true;
      }
    }
  }
  PsiExpression initializer=variable.getInitializer();
  boolean shouldBeFinal=variable.hasModifierProperty(PsiModifier.FINAL) && strictlyFinal;
  if (canInlineParmOrThisVariable(initializer,shouldBeFinal,strictlyFinal,refs.size(),isAccessedForWriting)) {
    if (shouldBeFinal) {
      declareUsedLocalsFinal(initializer,strictlyFinal);
    }
    for (    PsiReference ref : refs) {
      final PsiJavaCodeReferenceElement javaRef=(PsiJavaCodeReferenceElement)ref;
      if (initializer instanceof PsiThisExpression && ((PsiThisExpression)initializer).getQualifier() == null) {
        final PsiClass varThisClass=RefactoringChangeUtil.getThisClass(variable);
        if (RefactoringChangeUtil.getThisClass(javaRef) != varThisClass) {
          initializer=JavaPsiFacade.getInstance(myManager.getProject()).getElementFactory().createExpressionFromText(varThisClass.getName() + ".this",variable);
        }
      }
      PsiExpression expr=InlineUtil.inlineVariable(variable,initializer,javaRef);
      InlineUtil.tryToInlineArrayCreationForVarargs(expr);
      if (expr instanceof PsiThisExpression) {
        if (expr.getParent() instanceof PsiReferenceExpression) {
          PsiReferenceExpression refExpr=(PsiReferenceExpression)expr.getParent();
          PsiElement refElement=refExpr.resolve();
          PsiExpression exprCopy=(PsiExpression)refExpr.copy();
          refExpr=(PsiReferenceExpression)refExpr.replace(myFactory.createExpressionFromText(refExpr.getReferenceName(),null));
          if (refElement != null) {
            PsiElement newRefElement=refExpr.resolve();
            if (!refElement.equals(newRefElement)) {
              refExpr.replace(exprCopy);
            }
          }
        }
      }
    }
    variable.getParent().delete();
  }
}
