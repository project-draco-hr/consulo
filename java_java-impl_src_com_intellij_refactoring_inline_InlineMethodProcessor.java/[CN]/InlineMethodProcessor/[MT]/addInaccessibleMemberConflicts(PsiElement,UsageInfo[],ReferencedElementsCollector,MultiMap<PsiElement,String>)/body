{
  element.accept(collector);
  final Map<PsiMember,Set<PsiMember>> containersToReferenced=getInaccessible(collector.myReferencedMembers,usages,element);
  final Set<PsiMember> containers=containersToReferenced.keySet();
  for (  PsiMember container : containers) {
    Set<PsiMember> referencedInaccessible=containersToReferenced.get(container);
    for (    PsiMember referenced : referencedInaccessible) {
      final String referencedDescription=RefactoringUIUtil.getDescription(referenced,true);
      final String containerDescription=RefactoringUIUtil.getDescription(container,true);
      String message=RefactoringBundle.message("0.that.is.used.in.inlined.method.is.not.accessible.from.call.site.s.in.1",referencedDescription,containerDescription);
      conflicts.putValue(container,CommonRefactoringUtil.capitalize(message));
    }
  }
}
