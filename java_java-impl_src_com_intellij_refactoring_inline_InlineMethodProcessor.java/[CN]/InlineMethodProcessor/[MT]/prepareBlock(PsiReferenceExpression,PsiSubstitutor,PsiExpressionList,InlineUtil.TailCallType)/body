{
  final PsiCodeBlock block=myMethodCopy.getBody();
  final PsiStatement[] originalStatements=block.getStatements();
  PsiLocalVariable resultVar=null;
  PsiType returnType=callSubstitutor.substitute(myMethod.getReturnType());
  String resultName=null;
  final int applicabilityLevel=PsiUtil.getApplicabilityLevel(myMethod,callSubstitutor,argumentList);
  if (returnType != null && returnType != PsiType.VOID && tailCallType == InlineUtil.TailCallType.None) {
    resultName=myJavaCodeStyle.propertyNameToVariableName("result",VariableKind.LOCAL_VARIABLE);
    resultName=myJavaCodeStyle.suggestUniqueVariableName(resultName,block.getFirstChild(),true);
    PsiDeclarationStatement declaration=myFactory.createVariableDeclarationStatement(resultName,returnType,null);
    declaration=(PsiDeclarationStatement)block.addAfter(declaration,null);
    resultVar=(PsiLocalVariable)declaration.getDeclaredElements()[0];
  }
  PsiParameter[] parms=myMethodCopy.getParameterList().getParameters();
  PsiLocalVariable[] parmVars=new PsiLocalVariable[parms.length];
  for (int i=parms.length - 1; i >= 0; i--) {
    PsiParameter parm=parms[i];
    String parmName=parm.getName();
    String name=parmName;
    name=myJavaCodeStyle.variableNameToPropertyName(name,VariableKind.PARAMETER);
    name=myJavaCodeStyle.propertyNameToVariableName(name,VariableKind.LOCAL_VARIABLE);
    if (!name.equals(parmName)) {
      name=myJavaCodeStyle.suggestUniqueVariableName(name,block.getFirstChild(),true);
    }
    RefactoringUtil.renameVariableReferences(parm,name,new LocalSearchScope(myMethodCopy.getBody()),true);
    PsiType paramType=parm.getType();
    @NonNls String defaultValue;
    if (paramType instanceof PsiEllipsisType) {
      final PsiEllipsisType ellipsisType=(PsiEllipsisType)paramType;
      paramType=callSubstitutor.substitute(ellipsisType.toArrayType());
      if (applicabilityLevel == MethodCandidateInfo.ApplicabilityLevel.VARARGS) {
        defaultValue="new " + ((PsiArrayType)paramType).getComponentType().getCanonicalText() + "[]{}";
      }
 else {
        defaultValue=PsiTypesUtil.getDefaultValueOfType(paramType);
      }
    }
 else {
      defaultValue=PsiTypesUtil.getDefaultValueOfType(paramType);
    }
    PsiExpression initializer=myFactory.createExpressionFromText(defaultValue,null);
    PsiDeclarationStatement declaration=myFactory.createVariableDeclarationStatement(name,callSubstitutor.substitute(paramType),initializer);
    declaration=(PsiDeclarationStatement)block.addAfter(declaration,null);
    parmVars[i]=(PsiLocalVariable)declaration.getDeclaredElements()[0];
    PsiUtil.setModifierProperty(parmVars[i],PsiModifier.FINAL,parm.hasModifierProperty(PsiModifier.FINAL));
  }
  PsiLocalVariable thisVar=null;
  PsiClass containingClass=myMethod.getContainingClass();
  if (!myMethod.hasModifierProperty(PsiModifier.STATIC) && containingClass != null) {
    PsiType thisType=myFactory.createType(containingClass,callSubstitutor);
    String[] names=myJavaCodeStyle.suggestVariableName(VariableKind.LOCAL_VARIABLE,null,null,thisType).names;
    String thisVarName=names[0];
    thisVarName=myJavaCodeStyle.suggestUniqueVariableName(thisVarName,block.getFirstChild(),true);
    PsiExpression initializer=myFactory.createExpressionFromText("null",null);
    PsiDeclarationStatement declaration=myFactory.createVariableDeclarationStatement(thisVarName,thisType,initializer);
    declaration=(PsiDeclarationStatement)block.addAfter(declaration,null);
    thisVar=(PsiLocalVariable)declaration.getDeclaredElements()[0];
  }
  String lockName=null;
  if (thisVar != null) {
    lockName=thisVar.getName();
  }
 else   if (myMethod.hasModifierProperty(PsiModifier.STATIC) && containingClass != null) {
    lockName=containingClass.getQualifiedName() + ".class";
  }
  if (lockName != null && syncNeeded(ref)) {
    PsiSynchronizedStatement synchronizedStatement=(PsiSynchronizedStatement)myFactory.createStatementFromText("synchronized(" + lockName + "){}",block);
    synchronizedStatement=(PsiSynchronizedStatement)CodeStyleManager.getInstance(myProject).reformat(synchronizedStatement);
    synchronizedStatement=(PsiSynchronizedStatement)block.add(synchronizedStatement);
    final PsiCodeBlock synchronizedBody=synchronizedStatement.getBody();
    for (    final PsiStatement originalStatement : originalStatements) {
      synchronizedBody.add(originalStatement);
      originalStatement.delete();
    }
  }
  if (resultName != null || tailCallType == InlineUtil.TailCallType.Simple) {
    PsiReturnStatement[] returnStatements=RefactoringUtil.findReturnStatements(myMethodCopy);
    for (    PsiReturnStatement returnStatement : returnStatements) {
      final PsiExpression returnValue=returnStatement.getReturnValue();
      if (returnValue == null)       continue;
      PsiStatement statement;
      if (tailCallType == InlineUtil.TailCallType.Simple) {
        if (returnValue instanceof PsiExpression) {
          PsiExpressionStatement exprStatement=(PsiExpressionStatement)myFactory.createStatementFromText("a;",null);
          exprStatement.getExpression().replace(returnValue);
          returnStatement.getParent().addBefore(exprStatement,returnStatement);
        }
        statement=myFactory.createStatementFromText("return;",null);
      }
 else {
        statement=myFactory.createStatementFromText(resultName + "=0;",null);
        statement=(PsiStatement)myCodeStyleManager.reformat(statement);
        PsiAssignmentExpression assignment=(PsiAssignmentExpression)((PsiExpressionStatement)statement).getExpression();
        assignment.getRExpression().replace(returnValue);
      }
      returnStatement.replace(statement);
    }
  }
  return new BlockData(block,thisVar,parmVars,resultVar);
}
