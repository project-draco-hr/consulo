{
  XDebuggerEvaluator evaluator=XDebuggerUtilImpl.getEvaluator(suspendContext);
  String condition=breakpoint.getCondition();
  if (condition != null && evaluator != null) {
    LOG.debug("evaluating condition: " + condition);
    boolean result=evaluator.evaluateCondition(condition);
    LOG.debug("condition evaluates to " + result);
    if (!result) {
      return false;
    }
  }
  if (breakpoint.isLogMessage()) {
    String text=StringUtil.decapitalize(XBreakpointUtil.getDisplayText(breakpoint));
    final XSourcePosition position=breakpoint.getSourcePosition();
    final OpenFileHyperlinkInfo hyperlinkInfo=position != null ? new OpenFileHyperlinkInfo(myProject,position.getFile(),position.getLine()) : null;
    printMessage(XDebuggerBundle.message("xbreakpoint.reached.text") + " ",text,hyperlinkInfo);
  }
  if (evaluatedLogExpression != null) {
    printMessage(evaluatedLogExpression,null,null);
  }
 else {
    String expression=breakpoint.getLogExpression();
    if (expression != null && evaluator != null) {
      LOG.debug("evaluating log expression: " + expression);
      final String message=evaluator.evaluateMessage(expression);
      if (message != null) {
        printMessage(message,null,null);
      }
    }
  }
  processDependencies(breakpoint);
  if (breakpoint.getSuspendPolicy() == SuspendPolicy.NONE) {
    return false;
  }
  myActiveNonLineBreakpoint=!(breakpoint instanceof XLineBreakpoint<?>) ? breakpoint : null;
  positionReached(suspendContext);
  if (breakpoint instanceof XLineBreakpoint<?> && ((XLineBreakpoint)breakpoint).isTemporary()) {
    addSessionListener(new XDebugSessionAdapter(){
      @Override public void sessionResumed(){
        DebuggerUIUtil.invokeOnEventDispatch(new Runnable(){
          @Override public void run(){
            XDebuggerManager.getInstance(myProject).getBreakpointManager().removeBreakpoint(breakpoint);
          }
        }
);
        removeSessionListener(this);
      }
    }
);
  }
  return true;
}
