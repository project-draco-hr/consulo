{
  if (doProcessing) {
    XDebuggerEvaluator evaluator=XDebuggerUtilImpl.getEvaluator(suspendContext);
    String condition=breakpoint.getCondition();
    if (condition != null && evaluator != null) {
      LOG.debug("evaluating condition: " + condition);
      boolean result=evaluator.evaluateCondition(condition);
      LOG.debug("condition evaluates to " + result);
      if (!result) {
        return false;
      }
    }
    if (breakpoint.isLogMessage()) {
      String text=StringUtil.decapitalize(XBreakpointUtil.getDisplayText(breakpoint));
      final XSourcePosition position=breakpoint.getSourcePosition();
      final OpenFileHyperlinkInfo hyperlinkInfo=position != null ? new OpenFileHyperlinkInfo(myProject,position.getFile(),position.getLine()) : null;
      printMessage(XDebuggerBundle.message("xbreakpoint.reached.text") + " ",text,hyperlinkInfo);
    }
    if (evaluatedLogExpression != null) {
      printMessage(evaluatedLogExpression,null,null);
    }
 else {
      String expression=breakpoint.getLogExpression();
      if (expression != null && evaluator != null) {
        LOG.debug("evaluating log expression: " + expression);
        final String message=evaluator.evaluateMessage(expression);
        if (message != null) {
          printMessage(message,null,null);
        }
      }
    }
    processDependencies(breakpoint);
    if (breakpoint.getSuspendPolicy() == SuspendPolicy.NONE) {
      return false;
    }
  }
  myActiveNonLineBreakpoint=(!(breakpoint instanceof XLineBreakpoint) || ((XLineBreakpoint)breakpoint).getType().canBeHitInOtherPlaces()) ? breakpoint : null;
  positionReached(suspendContext);
  UIUtil.invokeLaterIfNeeded(new Runnable(){
    @Override public void run(){
      if (mySessionTab != null) {
        if (XDebuggerSettingsManager.getInstanceImpl().getGeneralSettings().isShowDebuggerOnBreakpoint()) {
          mySessionTab.toFront(true);
        }
        mySessionTab.getUi().attractBy(XDebuggerUIConstants.LAYOUT_VIEW_BREAKPOINT_CONDITION);
      }
    }
  }
);
  if (doProcessing && breakpoint instanceof XLineBreakpoint<?> && ((XLineBreakpoint)breakpoint).isTemporary()) {
    handleTemporaryBreakpointHit(breakpoint);
  }
  return true;
}
