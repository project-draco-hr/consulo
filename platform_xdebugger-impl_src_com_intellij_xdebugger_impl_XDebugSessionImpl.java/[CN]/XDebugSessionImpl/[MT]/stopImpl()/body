{
  if (!myStopped.compareAndSet(false,true)) {
    return;
  }
  try {
    if (breakpointsInitialized) {
      XBreakpointManagerImpl breakpointManager=myDebuggerManager.getBreakpointManager();
      if (myBreakpointListener != null) {
        breakpointManager.removeBreakpointListener(myBreakpointListener);
      }
      if (myDependentBreakpointListener != null) {
        breakpointManager.getDependentBreakpointManager().removeListener(myDependentBreakpointListener);
      }
    }
  }
  finally {
    myDebugProcess.stopAsync().done(new Consumer<Object>(){
      @Override public void consume(      Object aVoid){
        if (!myProject.isDisposed()) {
          myProject.getMessageBus().syncPublisher(XDebuggerManager.TOPIC).processStopped(myDebugProcess);
        }
        if (mySessionTab != null) {
          ((XWatchesViewImpl)mySessionTab.getWatchesView()).updateSessionData();
          mySessionTab.detachFromSession();
        }
 else         if (myConsoleView != null) {
          AppUIUtil.invokeOnEdt(new Runnable(){
            @Override public void run(){
              Disposer.dispose(myConsoleView);
            }
          }
);
        }
        myTopFramePosition=null;
        myCurrentExecutionStack=null;
        myCurrentStackFrame=null;
        mySuspendContext=null;
        updateExecutionPosition();
        if (myValueMarkers != null) {
          myValueMarkers.clear();
        }
        if (XDebuggerSettingsManager.getInstanceImpl().getGeneralSettings().isUnmuteOnStop()) {
          mySessionData.setBreakpointsMuted(false);
        }
        myDebuggerManager.removeSession(XDebugSessionImpl.this);
        myDispatcher.getMulticaster().sessionStopped();
        myProject.putUserData(XDebuggerEditorLinePainter.CACHE,null);
      }
    }
);
  }
}
