{
  List<RangeHighlighter> highlighters=new ArrayList<>();
  boolean isEmptyRange=startLine == endLine;
  boolean isLastLine=endLine == getLineCount(editor.getDocument());
  TextRange offsets=DiffUtil.getLinesRange(editor.getDocument(),startLine,endLine);
  int start=offsets.getStartOffset();
  int end=offsets.getEndOffset();
  TextAttributes attributes=isEmptyRange || resolved ? null : getTextAttributes(type,editor,ignored);
  TextAttributes stripeAttributes=isEmptyRange || resolved ? null : getStripeTextAttributes(type,editor);
  RangeHighlighter highlighter=editor.getMarkupModel().addRangeHighlighter(start,end,DEFAULT_LAYER,attributes,HighlighterTargetArea.LINES_IN_RANGE);
  highlighters.add(highlighter);
  highlighter.setLineMarkerRenderer(new DiffLineMarkerRenderer(highlighter,type,ignored,resolved,hideWithoutLineNumbers,isEmptyRange,isLastLine));
  if (isEmptyRange) {
    if (startLine == 0) {
      highlighters.addAll(createLineMarker(editor,0,type,SeparatorPlacement.TOP,true,resolved,false));
    }
 else {
      highlighters.addAll(createLineMarker(editor,startLine - 1,type,SeparatorPlacement.BOTTOM,true,resolved,false));
    }
  }
 else   if (resolved) {
    highlighters.addAll(createLineMarker(editor,startLine,type,SeparatorPlacement.TOP,false,resolved,false));
    highlighters.addAll(createLineMarker(editor,endLine - 1,type,SeparatorPlacement.BOTTOM,false,resolved,false));
  }
  if (stripeAttributes != null) {
    RangeHighlighter stripeHighlighter=editor.getMarkupModel().addRangeHighlighter(start,end,STRIPE_LAYER,stripeAttributes,HighlighterTargetArea.LINES_IN_RANGE);
    highlighters.add(stripeHighlighter);
  }
  return highlighters;
}
