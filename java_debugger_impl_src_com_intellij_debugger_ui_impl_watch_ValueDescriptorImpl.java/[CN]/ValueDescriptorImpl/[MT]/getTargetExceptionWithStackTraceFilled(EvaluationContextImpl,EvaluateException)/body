{
  final ObjectReference exceptionObj=ex.getExceptionFromTargetVM();
  if (exceptionObj != null && evaluationContext != null) {
    try {
      final ReferenceType refType=exceptionObj.referenceType();
      final List<Method> methods=refType.methodsByName("getStackTrace","()[Ljava/lang/StackTraceElement;");
      if (methods.size() > 0) {
        final DebugProcessImpl process=evaluationContext.getDebugProcess();
        process.invokeMethod(evaluationContext,exceptionObj,methods.get(0),Collections.emptyList());
        final Field traceField=refType.fieldByName("stackTrace");
        final Value trace=traceField != null ? exceptionObj.getValue(traceField) : null;
        if (trace instanceof ArrayReference) {
          final ArrayReference traceArray=(ArrayReference)trace;
          final Type componentType=((ArrayType)traceArray.referenceType()).componentType();
          if (componentType instanceof ClassType) {
            process.printToConsole(DebuggerUtils.getValueAsString(evaluationContext,exceptionObj));
            process.printToConsole("\n");
            for (            Value stackElement : traceArray.getValues()) {
              process.printToConsole("\tat ");
              process.printToConsole(DebuggerUtils.getValueAsString(evaluationContext,stackElement));
              process.printToConsole("\n");
            }
          }
        }
      }
    }
 catch (    EvaluateException ignored) {
    }
catch (    ClassNotLoadedException ignored) {
    }
  }
  return exceptionObj;
}
