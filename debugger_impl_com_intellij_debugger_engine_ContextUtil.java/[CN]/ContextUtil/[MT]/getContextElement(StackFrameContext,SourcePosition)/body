{
  if (LOG.isDebugEnabled()) {
    final SourcePosition sourcePosition=getSourcePosition(context);
    LOG.assertTrue(Comparing.equal(sourcePosition,position));
  }
  final PsiElement element=getContextElement(position);
  if (element == null) {
    return null;
  }
  final StackFrameProxyImpl frameProxy=(StackFrameProxyImpl)context.getFrameProxy();
  if (frameProxy == null) {
    return element;
  }
  final StringBuilder buf=StringBuilderSpinAllocator.alloc();
  try {
    List<LocalVariableProxyImpl> list=frameProxy.visibleVariables();
    PsiResolveHelper resolveHelper=element.getManager().getResolveHelper();
    buf.append('{');
    for (    LocalVariableProxyImpl localVariable : list) {
      final String varName=localVariable.name();
      if (resolveHelper.resolveReferencedVariable(varName,element) == null) {
        buf.append(localVariable.getVariable().typeName()).append(" ").append(varName).append(";");
      }
    }
    buf.append('}');
    if (buf.length() <= 2) {
      return element;
    }
    final PsiElementFactory elementFactory=element.getManager().getElementFactory();
    final PsiCodeBlock codeBlockFromText=elementFactory.createCodeBlockFromText(buf.toString(),element);
    final PsiStatement[] statements=codeBlockFromText.getStatements();
    for (    PsiStatement statement : statements) {
      if (statement instanceof PsiDeclarationStatement) {
        PsiDeclarationStatement declStatement=(PsiDeclarationStatement)statement;
        PsiElement[] declaredElements=declStatement.getDeclaredElements();
        for (        PsiElement declaredElement : declaredElements) {
          declaredElement.putUserData(IS_JSP_IMPLICIT,Boolean.TRUE);
        }
      }
    }
    return codeBlockFromText;
  }
 catch (  IncorrectOperationException e) {
    return element;
  }
catch (  EvaluateException e) {
    return element;
  }
 finally {
    StringBuilderSpinAllocator.dispose(buf);
  }
}
