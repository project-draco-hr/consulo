{
  return new BaseInspectionVisitor(){
    @Override public void visitAnnotation(    GrAnnotation annotation){
      checkTarget(annotation);
      checkDelegatesTo(annotation);
    }
    private void checkTarget(    GrAnnotation annotation){
      if (!GroovyCommonClassNames.GROOVY_LANG_DELEGATES_TO_TARGET.equals(annotation.getQualifiedName()))       return;
      final PsiElement owner=annotation.getParent().getParent();
      if (!(owner instanceof GrParameter))       return;
      final boolean isTargetDeclared=annotation.findDeclaredAttributeValue("value") != null;
      String targetName=GrAnnotationUtil.inferStringAttribute(annotation,"value");
      final GrParameterList parameterList=DefaultGroovyMethods.asType(owner.getParent(),GrParameterList.class);
      for (      GrParameter parameter : parameterList.getParameters()) {
        final PsiAnnotation delegatesTo=parameter.getModifierList().findAnnotation(GroovyCommonClassNames.GROOVY_LANG_DELEGATES_TO);
        if (delegatesTo != null) {
          if (isTargetDeclared) {
            final String curTarget=GrAnnotationUtil.inferStringAttribute(delegatesTo,"target");
            if (curTarget != null && curTarget.equals(targetName)) {
              return;
            }
          }
 else {
            if (delegatesTo.findDeclaredAttributeValue("target") == null) {
              return;
            }
          }
        }
      }
      registerError(annotation.getClassReference(),GroovyInspectionBundle.message("target.annotation.is.unused"),LocalQuickFix.EMPTY_ARRAY,ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
    }
    private void checkDelegatesTo(    GrAnnotation annotation){
      if (!GroovyCommonClassNames.GROOVY_LANG_DELEGATES_TO.equals(annotation.getQualifiedName()))       return;
      final PsiElement owner=annotation.getParent().getParent();
      if (!(owner instanceof GrParameter))       return;
      final PsiAnnotationMemberValue targetPair=annotation.findDeclaredAttributeValue("target");
      if (targetPair == null)       return;
      String targetName=GrAnnotationUtil.inferStringAttribute(annotation,"target");
      final GrParameterList parameterList=DefaultGroovyMethods.asType(owner.getParent(),GrParameterList.class);
      for (      GrParameter parameter : parameterList.getParameters()) {
        final PsiAnnotation target=parameter.getModifierList().findAnnotation(GroovyCommonClassNames.GROOVY_LANG_DELEGATES_TO_TARGET);
        if (target != null) {
          final String curTarget=GrAnnotationUtil.inferStringAttribute(target,"value");
          if (curTarget != null && curTarget.equals(targetName)) {
            return;
          }
        }
      }
      registerError(targetPair,GroovyInspectionBundle.message("target.0.does.not.exist",targetName != null ? targetName : "?"),LocalQuickFix.EMPTY_ARRAY,ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
    }
  }
;
}
