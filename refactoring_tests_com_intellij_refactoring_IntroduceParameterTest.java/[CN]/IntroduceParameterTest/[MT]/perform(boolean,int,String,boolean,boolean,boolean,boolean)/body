{
  int startOffset=myEditor.getSelectionModel().getSelectionStart();
  int endOffset=myEditor.getSelectionModel().getSelectionEnd();
  PsiExpression expr=CodeInsightUtil.findExpressionInRange(myFile,startOffset,endOffset);
  PsiLocalVariable localVariable=null;
  if (expr == null) {
    PsiElement element=CodeInsightUtil.findElementInRange(myFile,startOffset,endOffset,PsiElement.class);
    localVariable=PsiTreeUtil.getParentOfType(element,PsiLocalVariable.class);
    if (localVariable == null) {
      return false;
    }
  }
  PsiElement context=expr == null ? localVariable : expr;
  PsiMethod method=Util.getContainingMethod(context);
  if (method == null)   return false;
  final PsiMethod methodToSearchFor;
  if (searchForSuper) {
    methodToSearchFor=method.findDeepestSuperMethod();
  }
 else {
    methodToSearchFor=method;
  }
  PsiExpression initializer=expr == null ? localVariable.getInitializer() : expr;
  TIntArrayList parametersToRemove=removeUnusedParameters ? Util.findParametersToRemove(method,initializer) : new TIntArrayList();
  new IntroduceParameterProcessor(myProject,method,methodToSearchFor,initializer,expr,localVariable,true,parameterName,replaceAllOccurences,replaceFieldsWithGetters,declareFinal,generateDelegate,null,parametersToRemove).run();
  myEditor.getSelectionModel().removeSelection();
  return true;
}
