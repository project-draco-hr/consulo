{
  myAlarm=new Alarm();
  projectManager.addProjectManagerListener(new ProjectManagerAdapter(){
    public void projectOpened(    final Project project){
      myAlarm.cancelAllRequests();
    }
    public void projectClosed(    final Project project){
      myAlarm.cancelAllRequests();
      myAlarm.addRequest(new Runnable(){
        public void run(){
          final IdeFrame frame;
          final Window window=KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusedWindow();
          if (window instanceof IdeFrame) {
            frame=(IdeFrame)window;
          }
 else {
            frame=(IdeFrame)SwingUtilities.getAncestorOfClass(IdeFrame.class,window);
          }
          if (frame != null) {
            ((JComponent)frame.getStatusBar()).requestFocus();
          }
          SwingUtilities.invokeLater(new Runnable(){
            @SuppressWarnings({"HardCodedStringLiteral"}) public void run(){
              try {
                final Field newFocusOwnerField=KeyboardFocusManager.class.getDeclaredField("newFocusOwner");
                newFocusOwnerField.setAccessible(true);
                newFocusOwnerField.set(null,null);
              }
 catch (              final Exception exc) {
                LOG.error(exc);
              }
              final KeyboardFocusManager focusManager=FocusManager.getCurrentKeyboardFocusManager();
              if (focusManager instanceof DefaultKeyboardFocusManager) {
                try {
                  final Field realOppositeComponentField=DefaultKeyboardFocusManager.class.getDeclaredField("realOppositeComponent");
                  realOppositeComponentField.setAccessible(true);
                  realOppositeComponentField.set(focusManager,null);
                  final Field realOppositeWindowField=DefaultKeyboardFocusManager.class.getDeclaredField("realOppositeWindow");
                  realOppositeWindowField.setAccessible(true);
                  realOppositeWindowField.set(focusManager,null);
                }
 catch (                Exception e) {
                  LOG.error(e);
                }
              }
              try {
                final Field menuKeyboardHelperField=BasicPopupMenuUI.class.getDeclaredField("menuKeyboardHelper");
                menuKeyboardHelperField.setAccessible(true);
                final Object helperObject=menuKeyboardHelperField.get(null);
                if (null != helperObject) {
                  final Field lastFocusedField=helperObject.getClass().getDeclaredField("lastFocused");
                  lastFocusedField.setAccessible(true);
                  lastFocusedField.set(helperObject,null);
                }
              }
 catch (              Exception e) {
                LOG.error(e);
              }
              try {
                final Field recognizerField=TransferHandler.class.getDeclaredField("recognizer");
                recognizerField.setAccessible(true);
                final Object recognizerObject=recognizerField.get(null);
                if (recognizerObject != null) {
                  final Method setComponentMethod=DragGestureRecognizer.class.getDeclaredMethod("setComponent",new Class[]{Component.class});
                  setComponentMethod.invoke(recognizerObject,new Object[]{null});
                }
              }
 catch (              Exception e) {
                LOG.error(e);
              }
              try {
                fixJTextComponentMemoryLeak();
              }
 catch (              NoSuchFieldException e) {
              }
catch (              Exception e) {
                LOG.error(e);
              }
              focusManager.setGlobalCurrentFocusCycleRoot(null);
              try {
                final Method m=KeyboardFocusManager.class.getDeclaredMethod("setGlobalFocusOwner",Component.class);
                m.setAccessible(true);
                m.invoke(focusManager,new Object[]{null});
              }
 catch (              Exception e) {
                e.printStackTrace();
              }
              try {
                final Field f=KeyboardFocusManager.class.getDeclaredField("newFocusOwner");
                f.setAccessible(true);
                f.set(null,null);
              }
 catch (              Exception e) {
                e.printStackTrace();
              }
              try {
                final Field f=KeyboardFocusManager.class.getDeclaredField("permanentFocusOwner");
                f.setAccessible(true);
                f.set(null,null);
              }
 catch (              Exception e) {
                e.printStackTrace();
              }
              try {
                final Field f=KeyboardFocusManager.class.getDeclaredField("currentFocusCycleRoot");
                f.setAccessible(true);
                f.set(null,null);
              }
 catch (              Exception e) {
                e.printStackTrace();
              }
            }
          }
);
        }
      }
,2500);
    }
  }
);
}
