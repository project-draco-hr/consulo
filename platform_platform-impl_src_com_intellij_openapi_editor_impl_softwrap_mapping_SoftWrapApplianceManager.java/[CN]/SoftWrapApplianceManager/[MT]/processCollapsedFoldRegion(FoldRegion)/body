{
  Document document=myEditor.getDocument();
  if (!foldRegion.isValid() || foldRegion.getStartOffset() != myContext.tokenStartOffset || foldRegion.getEndOffset() > document.getTextLength()) {
    LOG.error("Inconsistent fold region state: fold region: " + foldRegion + ", soft wrap model state: "+ myEditor.getSoftWrapModel()+ ", folding model state: "+ myEditor.getFoldingModel());
    return true;
  }
  String placeholder=foldRegion.getPlaceholderText();
  int placeholderWidthInPixels=0;
  for (int i=0; i < placeholder.length(); i++) {
    placeholderWidthInPixels+=SoftWrapModelImpl.getEditorTextRepresentationHelper(myEditor).charWidth(placeholder.charAt(i),myContext.fontType);
  }
  if (myContext.delayedSoftWrap == null) {
    int newX=myContext.currentPosition.x + placeholderWidthInPixels;
    notifyListenersOnVisualLineStart(myContext.lineStartPosition);
    if (!myContext.exceedsVisualEdge(newX) || myContext.currentPosition.offset == myContext.lineStartPosition.offset) {
      myContext.advance(foldRegion,placeholderWidthInPixels);
      return false;
    }
  }
  myContext.logicalLineData.update(foldRegion.getStartOffset());
  SoftWrap softWrap=null;
  if (myContext.delayedSoftWrap == null && myContext.exceedsVisualEdge(myContext.currentPosition.x + myContext.reservedWidthInPixels)) {
    softWrap=registerSoftWrap(myContext.softWrapStartOffset,myContext.tokenStartOffset,myContext.tokenStartOffset,myContext.getSpaceWidth(),myContext.logicalLineData);
  }
  if (myContext.delayedSoftWrap != null) {
    myStorage.remove(myContext.delayedSoftWrap);
    myContext.delayedSoftWrap=null;
  }
  if (softWrap == null) {
    softWrap=registerSoftWrap(foldRegion.getStartOffset(),myContext.getSpaceWidth(),myContext.logicalLineData);
  }
  myContext.softWrapStartOffset=softWrap.getStart();
  if (softWrap.getStart() < myContext.tokenStartOffset) {
    revertListeners(softWrap.getStart(),myContext.currentPosition.visualLine);
    for (int j=foldRegion.getStartOffset() - 1; j >= softWrap.getStart(); j--) {
      int pixelsDiff=myOffset2widthInPixels.data[j - myOffset2widthInPixels.anchor];
      int columnsDiff=calculateWidthInColumns(myContext.text.charAt(j),pixelsDiff,myContext.getPlainSpaceWidth());
      myContext.currentPosition.offset--;
      myContext.currentPosition.logicalColumn-=columnsDiff;
      myContext.currentPosition.visualColumn-=columnsDiff;
    }
  }
  notifyListenersOnSoftWrapLineFeed(true);
  myContext.currentPosition.visualColumn=0;
  myContext.currentPosition.softWrapColumnDiff=myContext.currentPosition.visualColumn - myContext.currentPosition.foldingColumnDiff - myContext.currentPosition.logicalColumn;
  myContext.currentPosition.softWrapLinesCurrent++;
  myContext.currentPosition.visualLine++;
  notifyListenersOnSoftWrapLineFeed(false);
  myContext.currentPosition.x=softWrap.getIndentInPixels();
  myContext.currentPosition.visualColumn=softWrap.getIndentInColumns();
  myContext.currentPosition.softWrapColumnDiff+=softWrap.getIndentInColumns();
  myContext.clearLastFoldInfo();
  myContext.skipToLineEnd=false;
  if (checkIsDoneAfterSoftWrap()) {
    return true;
  }
  for (int j=softWrap.getStart(); j < myContext.tokenStartOffset; j++) {
    char c=myContext.text.charAt(j);
    int newX=calculateNewX(c);
    myContext.onNonLineFeedSymbol(c,newX);
  }
  myOffset2fontType.clear();
  myContext.advance(foldRegion,placeholderWidthInPixels);
  return false;
}
