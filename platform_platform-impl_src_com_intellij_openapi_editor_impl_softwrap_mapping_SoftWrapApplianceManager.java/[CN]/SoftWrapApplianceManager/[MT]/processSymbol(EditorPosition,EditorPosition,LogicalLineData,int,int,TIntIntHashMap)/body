{
  int spaceWidth;
  if (fontType2spaceWidth.contains(fontType)) {
    spaceWidth=fontType2spaceWidth.get(fontType);
  }
 else {
    spaceWidth=EditorUtil.getSpaceWidth(fontType,myEditor);
    fontType2spaceWidth.put(fontType,spaceWidth);
  }
  if (position.symbol == '\n') {
    position.symbolWidthInColumns=0;
    position.symbolWidthInPixels=0;
    notifyListenersOnProcessedSymbol(position);
    position.offset++;
    position.onNewLine();
    myOffset2fontType.clear();
    myOffset2widthInPixels.clear();
    startLineContext.from(position);
    logicalLineData.update(position.logicalLine,spaceWidth,myEditor);
    position.x=0;
    return;
  }
  position.symbolWidthInPixels=newX - position.x;
  position.symbolWidthInColumns=calculateWidthInColumns(position.symbol,position.symbolWidthInPixels,spaceWidth);
  notifyListenersOnProcessedSymbol(position);
  position.visualColumn+=position.symbolWidthInColumns;
  position.logicalColumn+=position.symbolWidthInColumns;
  position.x=newX;
  if (myOffset2widthInPixels.anchor <= 0) {
    myOffset2widthInPixels.anchor=position.offset;
  }
  if (position.offset - myOffset2widthInPixels.anchor >= myOffset2widthInPixels.data.length) {
    int[] newData=new int[myOffset2widthInPixels.data.length * 2];
    System.arraycopy(myOffset2widthInPixels.data,0,newData,0,myOffset2widthInPixels.data.length);
    myOffset2widthInPixels.data=newData;
  }
  myOffset2widthInPixels.data[position.offset - myOffset2widthInPixels.anchor]=position.symbolWidthInPixels;
  myOffset2widthInPixels.end++;
  position.offset++;
}
