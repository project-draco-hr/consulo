{
  myContext.reset();
  myOffset2fontType.clear();
  myOffset2widthInPixels.clear();
  int start=event.getNewStartOffset();
  final LogicalPosition logical;
  final Point point;
  if (start == 0 && myEditor.getPrefixTextWidthInPixels() <= 0) {
    logical=new LogicalPosition(0,0,0,0,0,0,0);
    point=new Point(0,0);
  }
 else {
    logical=myDataMapper.offsetToLogicalPosition(start);
    VisualPosition visual=new VisualPosition(myDataMapper.logicalToVisualPosition(logical,myEditor.logicalToVisualPosition(logical,false)).line,0);
    point=myEditor.visualPositionToXY(visual);
    start=myEditor.logicalPositionToOffset(logical);
  }
  Document document=myEditor.getDocument();
  myContext.text=document.getCharsSequence();
  myContext.tokenStartOffset=start;
  IterationState iterationState=new IterationState(myEditor,start,document.getTextLength(),false);
  TextAttributes attributes=iterationState.getMergedAttributes();
  myContext.fontType=attributes.getFontType();
  myContext.rangeEndOffset=event.getNewEndOffset();
  EditorPosition position=new EditorPosition(logical,start,myEditor);
  position.x=point.x;
  int spaceWidth=EditorUtil.getSpaceWidth(myContext.fontType,myEditor);
  int plainSpaceWidth=EditorUtil.getSpaceWidth(Font.PLAIN,myEditor);
  myContext.logicalLineData.update(logical.line,spaceWidth,plainSpaceWidth);
  myContext.currentPosition=position;
  myContext.lineStartPosition=position.clone();
  myContext.fontType2spaceWidth.put(myContext.fontType,spaceWidth);
  myContext.softWrapStartOffset=position.offset;
  myContext.contentComponent=myEditor.getContentComponent();
  myContext.reservedWidthInPixels=myPainter.getMinDrawingWidth(SoftWrapDrawingType.BEFORE_SOFT_WRAP_LINE_FEED);
  while (!iterationState.atEnd() && myContext.currentPosition.offset <= event.getNewEndOffset()) {
    FoldRegion currentFold=iterationState.getCurrentFold();
    if (currentFold == null) {
      myContext.tokenEndOffset=iterationState.getEndOffset();
      processNonFoldToken();
    }
 else {
      boolean continueProcessing=processCollapsedFoldRegion(currentFold);
      if (!continueProcessing) {
        return false;
      }
      myOffset2widthInPixels.clear();
    }
    iterationState.advance();
    attributes=iterationState.getMergedAttributes();
    myContext.fontType=attributes.getFontType();
    myContext.tokenStartOffset=iterationState.getStartOffset();
    myOffset2fontType.fill(myContext.tokenStartOffset,iterationState.getEndOffset(),myContext.fontType);
  }
  notifyListenersOnVisualLineEnd();
  return true;
}
