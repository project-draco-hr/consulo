{
  myEventBeingProcessed=event;
  notifyListenersOnCacheUpdateStart(event);
  myContext.reset();
  myOffset2fontType.clear();
  myOffset2widthInPixels.clear();
  final int start=event.getStartOffset();
  final LogicalPosition logical=event.getStartLogicalPosition();
  Document document=myEditor.getDocument();
  myContext.text=document.getCharsSequence();
  myContext.tokenStartOffset=start;
  IterationState iterationState=new IterationState(myEditor,start,document.getTextLength(),false);
  TextAttributes attributes=iterationState.getMergedAttributes();
  myContext.fontType=attributes.getFontType();
  myContext.rangeEndOffset=event.getMandatoryEndOffset();
  EditorPosition position=myEditor.myUseNewRendering ? new EditorPosition(logical,event.getStartVisualPosition(),start,myEditor) : new EditorPosition(logical,start,myEditor);
  position.x=start == 0 ? myEditor.getPrefixTextWidthInPixels() : 0;
  int spaceWidth=EditorUtil.getSpaceWidth(myContext.fontType,myEditor);
  int plainSpaceWidth=EditorUtil.getSpaceWidth(Font.PLAIN,myEditor);
  myContext.logicalLineData.update(logical.line,spaceWidth,plainSpaceWidth);
  myContext.currentPosition=position;
  myContext.lineStartPosition=position.clone();
  myContext.fontType2spaceWidth.put(myContext.fontType,spaceWidth);
  myContext.softWrapStartOffset=position.offset;
  myContext.reservedWidthInPixels=myPainter.getMinDrawingWidth(SoftWrapDrawingType.BEFORE_SOFT_WRAP_LINE_FEED);
  SoftWrap softWrapAtStartPosition=myStorage.getSoftWrap(start);
  if (softWrapAtStartPosition != null) {
    myContext.currentPosition.x=softWrapAtStartPosition.getIndentInPixels();
    myContext.lineStartPosition.visualColumn=0;
    myContext.lineStartPosition.softWrapColumnDiff-=softWrapAtStartPosition.getIndentInColumns();
    myContext.softWrapStartOffset++;
    notifyListenersOnVisualLineStart(myContext.lineStartPosition);
  }
  while (!iterationState.atEnd()) {
    FoldRegion currentFold=iterationState.getCurrentFold();
    if (currentFold == null) {
      myContext.tokenEndOffset=iterationState.getEndOffset();
      if (processNonFoldToken()) {
        break;
      }
    }
 else {
      if (processCollapsedFoldRegion(currentFold)) {
        break;
      }
      myOffset2widthInPixels.clear();
    }
    iterationState.advance();
    attributes=iterationState.getMergedAttributes();
    myContext.fontType=attributes.getFontType();
    myContext.tokenStartOffset=iterationState.getStartOffset();
    myOffset2fontType.fill(myContext.tokenStartOffset,iterationState.getEndOffset(),myContext.fontType);
  }
  if (myContext.delayedSoftWrap != null) {
    myStorage.remove(myContext.delayedSoftWrap);
  }
  notifyListenersOnVisualLineEnd();
  event.setActualEndOffset(myContext.currentPosition.offset);
  validateFinalPosition(event);
  notifyListenersOnCacheUpdateEnd(event);
  myEventBeingProcessed=null;
}
