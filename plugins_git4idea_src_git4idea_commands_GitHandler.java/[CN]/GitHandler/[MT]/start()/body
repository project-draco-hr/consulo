{
  checkNotStarted();
  RepositoryChangeListener indexChangeListener=null;
  if (myCommand.modifiesIndex()) {
    indexChangeListener=myVcs.getIndexChangeListener();
    indexChangeListener.internalOperationStarted();
  }
  try {
    LOG.info(myCommandLine.getCommandLineString());
    if (!myProject.isDefault() && !mySilent && (myVcs != null)) {
      myVcs.showCommandLine("cd " + myWorkingDirectory);
      myVcs.showCommandLine(printableCommandLine());
    }
    if (!myNoSSHFlag && myProjectSettings.isIdeaSsh()) {
      GitSSHService ssh=GitSSHIdeaService.getInstance();
      myEnv.put(GitSSHHandler.GIT_SSH_ENV,ssh.getScriptPath().getPath());
      myHandlerNo=ssh.registerHandler(new GitSSHGUIHandler(myProject));
      myEnvironmentCleanedUp=false;
      myEnv.put(GitSSHHandler.SSH_HANDLER_ENV,Integer.toString(myHandlerNo));
      myEnv.put(GitSSHHandler.SSH_PORT_ENV,Integer.toString(ssh.getXmlRcpPort()));
    }
    myCommandLine.setEnvParams(myEnv);
    myProcess=startProcess();
    startHandlingStreams();
  }
 catch (  Throwable t) {
    cleanupEnv();
    myListeners.getMulticaster().startFailed(t);
  }
 finally {
    if (indexChangeListener != null) {
      indexChangeListener.internalOperationEnded();
    }
  }
}
