{
  checkNotStarted();
  try {
    if (!myProject.isDefault() && !mySilent) {
      GitVcs.getInstance(myProject).showCommandLine(printableCommandLine());
    }
    if (log.isDebugEnabled()) {
      log.debug("running git: " + myCommandLine.getCommandLineString() + " in "+ myWorkingDirectory);
    }
    if (!myNoSSHFlag) {
      GitSSHService ssh=GitSSHService.getInstance();
      myEnv.put(GitSSHService.GIT_SSH_ENV,ssh.getScriptPath().getPath());
      myHandlerNo=ssh.registerHandler(new GitSSHGUIHandler(myProject));
      myEnvironmentCleanedUp=false;
      myEnv.put(GitSSHService.SSH_HANDLER_ENV,Integer.toString(myHandlerNo));
    }
    myCommandLine.setEnvParams(myEnv);
    myProcess=myCommandLine.createProcess();
    myHandler=new OSProcessHandler(myProcess,myCommandLine.getCommandLineString()){
      @Override public Charset getCharset(){
        return myCharset == null ? super.getCharset() : myCharset;
      }
    }
;
    myHandler.addProcessListener(new ProcessListener(){
      public void startNotified(      final ProcessEvent event){
      }
      public void processTerminated(      final ProcessEvent event){
        final int exitCode=event.getExitCode();
        setExitCode(exitCode);
        cleanupEnv();
        GitHandler.this.processTerminated(exitCode);
        myListeners.getMulticaster().processTerminated(exitCode);
      }
      public void processWillTerminate(      final ProcessEvent event,      final boolean willBeDestroyed){
      }
      public void onTextAvailable(      final ProcessEvent event,      final Key outputType){
        GitHandler.this.onTextAvailable(event.getText(),outputType);
      }
    }
);
    myHandler.startNotify();
  }
 catch (  Throwable t) {
    cleanupEnv();
    myListeners.getMulticaster().startFailed(t);
  }
}
