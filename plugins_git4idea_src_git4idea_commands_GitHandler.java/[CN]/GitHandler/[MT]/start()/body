{
  checkNotStarted();
  try {
    myStartTime=System.currentTimeMillis();
    if (!myProject.isDefault() && !mySilent && (myVcs != null)) {
      myVcs.showCommandLine("cd " + myWorkingDirectory);
      myVcs.showCommandLine(printableCommandLine());
      LOG.info("cd " + myWorkingDirectory);
      LOG.info(printableCommandLine());
    }
 else {
      LOG.debug("cd " + myWorkingDirectory);
      LOG.debug(printableCommandLine());
    }
    if (myRemoteProtocol == GitRemoteProtocol.SSH && myProjectSettings.isIdeaSsh()) {
      GitSSHService ssh=GitSSHService.getInstance();
      myEnv.put(GitSSHHandler.GIT_SSH_ENV,ssh.getScriptPath().getPath());
      myHandlerNo=ssh.registerHandler(new GitSSHGUIHandler(myProject,myState));
      myEnvironmentCleanedUp=false;
      myEnv.put(GitSSHHandler.SSH_HANDLER_ENV,Integer.toString(myHandlerNo));
      int port=ssh.getXmlRcpPort();
      myEnv.put(GitSSHHandler.SSH_PORT_ENV,Integer.toString(port));
      LOG.debug(String.format("handler=%s, port=%s",myHandlerNo,port));
    }
    myCommandLine.setEnvParams(myEnv);
    myProcess=startProcess();
    startHandlingStreams();
  }
 catch (  Throwable t) {
    cleanupEnv();
    myListeners.getMulticaster().startFailed(t);
  }
}
