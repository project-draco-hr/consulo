{
  checkNotStarted();
  try {
    myStartTime=System.currentTimeMillis();
    if (!myProject.isDefault() && !mySilent && (myVcs != null)) {
      myVcs.showCommandLine("cd " + myWorkingDirectory);
      myVcs.showCommandLine(printableCommandLine());
      LOG.info("cd " + myWorkingDirectory);
      LOG.info(printableCommandLine());
    }
 else {
      LOG.debug("cd " + myWorkingDirectory);
      LOG.debug(printableCommandLine());
    }
    if (myRemoteProtocol == GitRemoteProtocol.SSH && myProjectSettings.isIdeaSsh()) {
      GitXmlRpcSshService ssh=ServiceManager.getService(GitXmlRpcSshService.class);
      myEnv.put(GitSSHHandler.GIT_SSH_ENV,ssh.getScriptPath().getPath());
      myHandlerNo=ssh.registerHandler(new GitSSHGUIHandler(myProject,myState));
      myEnvironmentCleanedUp=false;
      myEnv.put(GitSSHHandler.SSH_HANDLER_ENV,Integer.toString(myHandlerNo));
      int port=ssh.getXmlRcpPort();
      myEnv.put(GitSSHHandler.SSH_PORT_ENV,Integer.toString(port));
      LOG.debug(String.format("handler=%s, port=%s",myHandlerNo,port));
    }
 else     if (myRemoteProtocol == GitRemoteProtocol.HTTP) {
      GitHttpAuthService service=ServiceManager.getService(GitHttpAuthService.class);
      myEnv.put(GitAskPassXmlRpcHandler.GIT_ASK_PASS_ENV,service.getScriptPath().getPath());
      GitHttpAuthenticator httpAuthenticator=service.createAuthenticator(myProject,myState,myCommand);
      myHandlerNo=service.registerHandler(httpAuthenticator);
      myEnvironmentCleanedUp=false;
      myEnv.put(GitAskPassXmlRpcHandler.GIT_ASK_PASS_HANDLER_ENV,Integer.toString(myHandlerNo));
      int port=service.getXmlRcpPort();
      myEnv.put(GitAskPassXmlRpcHandler.GIT_ASK_PASS_PORT_ENV,Integer.toString(port));
      LOG.debug(String.format("handler=%s, port=%s",myHandlerNo,port));
      addAuthListener(httpAuthenticator);
    }
    myCommandLine.setEnvParams(myEnv);
    myProcess=startProcess();
    startHandlingStreams();
  }
 catch (  Throwable t) {
    cleanupEnv();
    myListeners.getMulticaster().startFailed(t);
  }
}
