{
  boolean isDeclaredNotNull=AnnotationUtil.isAnnotated(method,AnnotationUtil.NOT_NULL,false);
  boolean isDeclaredNullable=AnnotationUtil.isAnnotated(method,AnnotationUtil.NULLABLE,false);
  if (isDeclaredNullable && isDeclaredNotNull) {
    return manager.createProblemDescriptor(method.getNameIdentifier(),"Cannot annotate with both @Nullable and @NotNull",(LocalQuickFix)null,ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
  }
  PsiParameter[] parameters=method.getParameterList().getParameters();
  for (  MethodSignatureBackedByPsiMethod superMethodSignature : superMethodSignatures) {
    PsiMethod superMethod=superMethodSignature.getMethod();
    if (REPORT_NULLABLE_METHOD_OVERRIDES_NOTNULL && isDeclaredNullable && AnnotationUtil.isNotNull(superMethod)) {
      return manager.createProblemDescriptor(method.getNameIdentifier(),"Method annotated with @Nullable must not override @NotNull method",(LocalQuickFix)null,ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
    }
    if (REPORT_NOT_ANNOTATED_METHOD_OVERRIDES_NOTNULL && !isDeclaredNullable && !isDeclaredNotNull&& AnnotationUtil.isNotNull(superMethod)) {
      return manager.createProblemDescriptor(method.getNameIdentifier(),"Not annotated method overrides method annotated with @NotNull",new AnnotateMethodFix(AnnotationUtil.NOT_NULL),ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
    }
    if (REPORT_NOTNULL_PARAMETER_OVERRIDES_NULLABLE) {
      PsiParameter[] superParameters=superMethod.getParameterList().getParameters();
      if (superParameters.length != parameters.length) {
        continue;
      }
      for (int i=0; i < parameters.length; i++) {
        PsiParameter parameter=parameters[i];
        PsiParameter superParameter=superParameters[i];
        if (AnnotationUtil.isAnnotated(parameter,AnnotationUtil.NOT_NULL,false) && AnnotationUtil.isAnnotated(superParameter,AnnotationUtil.NULLABLE,false)) {
          return manager.createProblemDescriptor(parameter.getNameIdentifier(),"Parameter annotated @NonNull must not override @Nullable parameter",(LocalQuickFix)null,ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
        }
      }
    }
  }
  return null;
}
