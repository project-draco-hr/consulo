{
  final List<LookupElement> items=lookup.getItems();
  final int count=lookup.getPreferredItemsCount();
  final Pattern pattern=Pattern.compile("[\\[ ](([a-zA-Z0-9.@])+)=(([a-zA-Z0-9.@])+)[,\\]]");
  Map<String,String> values=new HashMap<String,String>();
  Set<String> toExclude=new HashSet<String>();
  for (  LookupElement item : items) {
    final String weight=Arrays.toString(item.getUserData(CompletionLookupArranger.WEIGHT));
    final Matcher matcher=pattern.matcher(weight);
    int start=0;
    while (matcher.find(start)) {
      start=matcher.end();
      final String name=matcher.group(1);
      final String value=matcher.group(3);
      values.put(name,values.containsKey(name) && !value.equals(values.get(name)) ? null : value);
    }
  }
  for (  String name : values.keySet()) {
    final String value=values.get(name);
    if (value != null) {
      toExclude.add(name + "=" + value);
    }
  }
  for (int i=0; i < items.size(); i++) {
    LookupElement item=items.get(i);
    String weight=Arrays.toString(item.getUserData(CompletionLookupArranger.WEIGHT));
    for (    String s : toExclude) {
      weight=StringUtil.replace(weight,s,"",false);
    }
    final String s=item.getLookupString() + weight;
    System.out.println(s);
    LOG.info(s);
    if (i == count - 1) {
      final String separator="------------";
      System.out.println(separator);
      LOG.info(separator);
    }
  }
}
