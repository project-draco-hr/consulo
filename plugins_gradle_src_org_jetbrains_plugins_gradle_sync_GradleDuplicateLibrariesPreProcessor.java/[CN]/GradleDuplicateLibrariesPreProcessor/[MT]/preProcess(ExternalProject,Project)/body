{
  final ProjectStructureHelper projectStructureHelper=ServiceManager.getService(ideProject,ProjectStructureHelper.class);
  for (  ExternalModule gradleModule : externalProject.getModules()) {
    final Module ideModule=projectStructureHelper.findIdeModule(gradleModule);
    if (ideModule == null) {
      continue;
    }
    ExternalEntityVisitor visitor=new ExternalEntityVisitorAdapter(){
      @Override public void visit(      @NotNull ExternalLibraryDependency gradleDependency){
        LibraryDependencyId id=EntityIdMapper.mapEntityToId(gradleDependency);
        LibraryOrderEntry ideDependency=projectStructureHelper.findIdeModuleLocalLibraryDependency(id.getOwnerModuleName(),id.getDependencyName());
        if (ideDependency == null) {
          return;
        }
        myDependencyManager.removeDependency(ideDependency,true);
        ideDependency=projectStructureHelper.findIdeLibraryDependency(id);
        if (ideDependency == null) {
          myDependencyManager.importDependency(gradleDependency,ideModule,true);
        }
        ExternalLibrary gradleLibrary=gradleDependency.getTarget();
        Library ideLibrary=projectStructureHelper.findIdeLibrary(gradleLibrary);
        if (ideLibrary == null) {
          myLibraryManager.importLibrary(gradleLibrary,ideProject,true);
        }
 else {
          myLibraryManager.syncPaths(gradleLibrary,ideLibrary,ideProject,true);
        }
      }
    }
;
    for (    ExternalDependency dependency : gradleModule.getDependencies()) {
      dependency.invite(visitor);
    }
  }
  return externalProject;
}
