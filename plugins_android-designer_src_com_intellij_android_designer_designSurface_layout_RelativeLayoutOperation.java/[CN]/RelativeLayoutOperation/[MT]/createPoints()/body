{
  List<RadComponent> children=new ArrayList<RadComponent>(myContainer.getChildren());
  children.removeAll(myComponents);
  Map<RadComponent,RelativeInfo> relativeInfos=myContainer.getClientProperty(RelativeInfo.KEY);
  for (  RadComponent editComponent : myComponents) {
    for (Iterator<RadComponent> I=children.iterator(); I.hasNext(); ) {
      RadComponent child=I.next();
      RelativeInfo info=relativeInfos.get(child);
      if (info.contains(editComponent)) {
        I.remove();
      }
    }
  }
  myHorizontalPoints=new ArrayList<SnapPoint>();
  myVerticalPoints=new ArrayList<SnapPoint>();
  for (  RadComponent component : children) {
    myHorizontalPoints.add(new ComponentSnapPoint((RadViewComponent)component,true));
    myVerticalPoints.add(new ComponentSnapPoint((RadViewComponent)component,false));
    myVerticalPoints.add(new BaselineSnapPoint((RadViewComponent)component));
  }
  RadViewComponent container=(RadViewComponent)myContainer;
  myHorizontalPoints.add(new ContainerSnapPoint(container,true));
  myVerticalPoints.add(new ContainerSnapPoint(container,false));
  myHorizontalPoints.add(new AutoSnapPoint(container,true));
  myVerticalPoints.add(new AutoSnapPoint(container,false));
}
