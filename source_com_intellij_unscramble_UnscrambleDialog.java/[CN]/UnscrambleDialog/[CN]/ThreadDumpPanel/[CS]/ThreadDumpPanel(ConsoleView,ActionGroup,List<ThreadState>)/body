{
  super(new BorderLayout());
  JPanel leftPanel=new JPanel(new BorderLayout());
  leftPanel.add(ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,toolbarActions,false).getComponent(),BorderLayout.WEST);
  final JList threadList=new JList(threadDump.toArray(new ThreadState[threadDump.size()]));
  threadList.setCellRenderer(new ColoredListCellRenderer(){
    protected void customizeCellRenderer(    final JList list,    final Object value,    final int index,    final boolean selected,    final boolean hasFocus){
      ThreadState threadState=(ThreadState)value;
      setIcon(getThreadStateIcon(threadState));
      if (!selected) {
        ThreadState selectedThread=(ThreadState)list.getSelectedValue();
        if (threadState.isDeadlocked()) {
          setBackground(LightColors.RED);
        }
 else         if (selectedThread != null && threadState.isHoldingLock(selectedThread)) {
          setBackground(Color.YELLOW);
        }
 else {
          setBackground(UIUtil.getListBackground());
        }
      }
      SimpleTextAttributes attrs=getAttributes(threadState);
      append(threadState.getName() + " (",attrs);
      String detail=threadState.getThreadStateDetail();
      if (detail != null) {
        append(detail,attrs);
      }
 else {
        append(threadState.getState().trim(),attrs);
      }
      append(")",attrs);
      if (threadState.getExtraState() != null) {
        append(" [" + threadState.getExtraState() + "]",attrs);
      }
    }
  }
);
  threadList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  threadList.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    final ListSelectionEvent e){
      ThreadState selection=threadDump.get(threadList.getSelectedIndex());
      printStacktrace(consoleView,selection.getStackTrace());
      threadList.repaint();
    }
  }
);
  leftPanel.add(new JScrollPane(threadList),BorderLayout.CENTER);
  add(leftPanel,BorderLayout.WEST);
  add(consoleView.getComponent(),BorderLayout.CENTER);
}
