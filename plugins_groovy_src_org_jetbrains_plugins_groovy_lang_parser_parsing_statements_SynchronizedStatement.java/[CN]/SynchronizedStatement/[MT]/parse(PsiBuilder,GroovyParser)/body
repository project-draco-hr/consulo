{
  PsiBuilder.Marker marker=builder.mark();
  ParserUtils.getToken(builder,kSYNCHRONIZED);
  if (!ParserUtils.getToken(builder,mLPAREN,GroovyBundle.message("lparen.expected"))) {
    marker.drop();
    return false;
  }
  if (!StrictContextExpression.parse(builder,parser)) {
    builder.error(GroovyBundle.message("expression.expected"));
  }
  ParserUtils.getToken(builder,mNLS);
  if (!ParserUtils.getToken(builder,mRPAREN,GroovyBundle.message("rparen.expected"))) {
    marker.done(SYNCHRONIZED_STATEMENT);
    return true;
  }
  PsiBuilder.Marker warn=builder.mark();
  ParserUtils.getToken(builder,mNLS);
  if (mLCURLY.equals(builder.getTokenType()) && !OpenOrClosableBlock.parseOpenBlock(builder,parser)) {
    warn.rollbackTo();
    builder.error(GroovyBundle.message("block.expression.expected"));
  }
 else {
    warn.drop();
  }
  marker.done(SYNCHRONIZED_STATEMENT);
  return true;
}
