{
  myReplacementPane=new NonOpaquePanel(new FlowLayout(FlowLayout.LEFT,5,0));
  if (myReplaceUndo != null) {
    myReplaceUndo.dispose();
  }
  myReplaceField=createTextField(BorderLayout.SOUTH);
  revalidate();
  myReplaceUndo=new MyUndoProvider(myReplaceField);
  DocumentListener replaceFieldListener=new DocumentListener(){
    @Override public void insertUpdate(    javax.swing.event.DocumentEvent documentEvent){
      replaceFieldDocumentChanged();
    }
    @Override public void removeUpdate(    javax.swing.event.DocumentEvent documentEvent){
      replaceFieldDocumentChanged();
    }
    @Override public void changedUpdate(    javax.swing.event.DocumentEvent documentEvent){
      replaceFieldDocumentChanged();
    }
  }
;
  myReplaceField.getDocument().addDocumentListener(replaceFieldListener);
  if (!getFindModel().isMultiline()) {
    new ReplaceOnEnterAction(this,myReplaceField);
  }
  myReplaceField.setText(myFindModel.getStringToReplace());
  myRightComponent.add(myReplacementPane,BorderLayout.SOUTH);
  myReplaceButton=new JButton("Replace");
  myReplaceButton.setFocusable(false);
  myReplaceButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      replaceCurrent();
    }
  }
);
  myReplaceButton.setMnemonic('p');
  myReplaceAllButton=new JButton("Replace all");
  myReplaceAllButton.setFocusable(false);
  myReplaceAllButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      myLivePreviewController.performReplaceAll();
    }
  }
);
  myReplaceAllButton.setMnemonic('a');
  myExcludeButton=new JButton("");
  myExcludeButton.setFocusable(false);
  myExcludeButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      myLivePreviewController.exclude();
      moveCursor(SearchResults.Direction.DOWN);
    }
  }
);
  myExcludeButton.setMnemonic('l');
  ActionGroup actionsGroup=new DefaultActionGroup(new ShowHistoryAction(myReplaceFieldGetter,this));
  final ActionToolbar tb=ActionManager.getInstance().createActionToolbar("ReplaceBar",actionsGroup,true);
  tb.setLayoutPolicy(ActionToolbar.AUTO_LAYOUT_POLICY);
  final JComponent tbComponent=tb.getComponent();
  tbComponent.setOpaque(false);
  tbComponent.setBorder(null);
  myReplacementPane.add(tbComponent);
  myReplacementPane.add(myReplaceButton);
  myReplacementPane.add(myReplaceAllButton);
  myReplacementPane.add(myExcludeButton);
  setSmallerFontAndOpaque(myReplaceButton);
  setSmallerFontAndOpaque(myReplaceAllButton);
  setSmallerFontAndOpaque(myExcludeButton);
  Utils.setSmallerFont(myReplaceField);
  new VariantsCompletionAction(this,myReplaceFieldGetter);
  new NextOccurrenceAction(this,myReplaceFieldGetter);
  new PrevOccurrenceAction(this,myReplaceFieldGetter);
}
