{
  JPanel myLeadPanel=createLeadPane();
  add(myLeadPanel,BorderLayout.WEST);
  mySearchField=createTextField(myLeadPanel);
  setupSearchFieldListener();
  DefaultActionGroup myActionsGroup=new DefaultActionGroup("search bar",false);
  myActionsGroup.add(new ShowHistoryAction(mySearchFieldGetter,this));
  myActionsGroup.add(new PrevOccurrenceAction(this,mySearchFieldGetter));
  myActionsGroup.add(new NextOccurrenceAction(this,mySearchFieldGetter));
  myActionsGroup.add(new FindAllAction(this));
  myActionsGroup.add(new ToggleMultiline(this));
  myActionsGroup.add(new ToggleMatchCase(this));
  myActionsGroup.add(new ToggleRegex(this));
  myActionsToolbar=ActionManager.getInstance().createActionToolbar("SearchBar",myActionsGroup,true);
  myActionsToolbar.setSecondaryActionsTooltip("More Options(" + ShowMoreOptions.SHORT_CUT + ")");
  myActionsGroup.addAction(new ToggleWholeWordsOnlyAction(this));
  if (FindManagerImpl.ourHasSearchInCommentsAndLiterals) {
    myActionsGroup.addAction(new ToggleInCommentsAction(this)).setAsSecondary(true);
    myActionsGroup.addAction(new ToggleInLiteralsOnlyAction(this)).setAsSecondary(true);
  }
  myActionsGroup.addAction(new TogglePreserveCaseAction(this)).setAsSecondary(true);
  myActionsGroup.addAction(new ToggleSelectionOnlyAction(this));
  myActionsToolbar.setLayoutPolicy(ActionToolbar.AUTO_LAYOUT_POLICY);
  myToolbarComponent=myActionsToolbar.getComponent();
  myToolbarComponent.setBorder(null);
  myToolbarComponent.setOpaque(false);
  myLeadPanel.add(myToolbarComponent);
  if (myToolbarComponent instanceof ActionToolbarImpl) {
    new ShowMoreOptions(myToolbarComponent,mySearchField);
  }
  JPanel tailPanel=new NonOpaquePanel(new BorderLayout(5,0));
  JPanel tailContainer=new NonOpaquePanel(new BorderLayout(5,0));
  tailContainer.add(tailPanel,BorderLayout.EAST);
  add(tailContainer,BorderLayout.CENTER);
  myMatchInfoLabel=new JLabel();
  setSmallerFontAndOpaque(myMatchInfoLabel);
  myClickToHighlightLabel=new LinkLabel("Click to highlight",null,new LinkListener(){
    @Override public void linkSelected(    LinkLabel aSource,    Object aLinkData){
      setMatchesLimit(Integer.MAX_VALUE);
      updateResults(true);
    }
  }
);
  setSmallerFontAndOpaque(myClickToHighlightLabel);
  myClickToHighlightLabel.setVisible(false);
  JLabel closeLabel=new JLabel(" ",IconLoader.getIcon("/actions/cross.png"),SwingConstants.RIGHT);
  closeLabel.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    final MouseEvent e){
      close();
    }
  }
);
  closeLabel.setToolTipText("Close search bar (Escape)");
  JPanel labelsPanel=new NonOpaquePanel(new FlowLayout());
  labelsPanel.add(myMatchInfoLabel);
  labelsPanel.add(myClickToHighlightLabel);
  tailPanel.add(labelsPanel,BorderLayout.CENTER);
  tailPanel.add(closeLabel,BorderLayout.EAST);
  Utils.setSmallerFont(mySearchField);
  mySearchField.registerKeyboardAction(new ActionListener(){
    @Override public void actionPerformed(    final ActionEvent e){
      if (StringUtil.isEmpty(mySearchField.getText())) {
        close();
      }
 else {
        requestFocus(myEditor.getContentComponent());
        addTextToRecent(EditorSearchComponent.this.mySearchField);
      }
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,SystemInfo.isMac ? InputEvent.META_DOWN_MASK : InputEvent.CTRL_DOWN_MASK),JComponent.WHEN_FOCUSED);
  final String initialText=myFindModel.getStringToFind();
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    @Override public void run(){
      setInitialText(initialText);
    }
  }
);
  new VariantsCompletionAction(this,mySearchFieldGetter);
  Utils.setSmallerFontForChildren(myToolbarComponent);
}
