{
  JPanel myLeadPanel=createLeadPane();
  add(myLeadPanel,BorderLayout.WEST);
  if (mySearchUndo != null) {
    mySearchUndo.dispose();
  }
  mySearchField=createTextField(myLeadPanel);
  mySearchUndo=new MyUndoProvider(mySearchField);
  setupSearchFieldListener();
  if (myActionsToolbar == null) {
    initToolbar();
  }
  JPanel centerPanel=new JPanel(new BorderLayout());
  centerPanel.setOpaque(false);
  centerPanel.add(myToolbarComponent,BorderLayout.CENTER);
  add(centerPanel,BorderLayout.CENTER);
  if (secondaryActionsAvailable()) {
    if (myToolbarComponent instanceof ActionToolbarImpl) {
      new ShowMoreOptions(myToolbarComponent,mySearchField);
    }
  }
  JPanel tailPanel=new NonOpaquePanel(new BorderLayout(5,0));
  tailPanel.setPreferredSize(new Dimension(100,-1));
  JPanel tailContainer=new NonOpaquePanel(new BorderLayout(5,0));
  tailContainer.add(tailPanel,BorderLayout.EAST);
  centerPanel.add(tailContainer,BorderLayout.EAST);
  myMatchInfoLabel=new JLabel();
  setSmallerFontAndOpaque(myMatchInfoLabel);
  myClickToHighlightLabel=new LinkLabel("Click to highlight",null,new LinkListener(){
    @Override public void linkSelected(    LinkLabel aSource,    Object aLinkData){
      setMatchesLimit(Integer.MAX_VALUE);
      updateResults(true);
    }
  }
);
  setSmallerFontAndOpaque(myClickToHighlightLabel);
  myClickToHighlightLabel.setVisible(false);
  JLabel closeLabel=new JLabel(" ",AllIcons.Actions.Cross,SwingConstants.RIGHT);
  closeLabel.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    final MouseEvent e){
      close();
    }
  }
);
  closeLabel.setToolTipText("Close search bar (Escape)");
  JPanel labelsPanel=new NonOpaquePanel(new FlowLayout());
  labelsPanel.add(myMatchInfoLabel);
  labelsPanel.add(myClickToHighlightLabel);
  tailPanel.add(labelsPanel,BorderLayout.CENTER);
  tailPanel.add(closeLabel,BorderLayout.EAST);
  Utils.setSmallerFont(mySearchField);
  mySearchField.registerKeyboardAction(new ActionListener(){
    @Override public void actionPerformed(    final ActionEvent e){
      if (StringUtil.isEmpty(mySearchField.getText())) {
        close();
      }
 else {
        requestFocus(myEditor.getContentComponent());
        addTextToRecent(EditorSearchComponent.this.mySearchField);
      }
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,SystemInfo.isMac ? InputEvent.META_DOWN_MASK : InputEvent.CTRL_DOWN_MASK),JComponent.WHEN_FOCUSED);
  final String initialText=myFindModel.getStringToFind();
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    @Override public void run(){
      setInitialText(initialText);
    }
  }
);
  new RestorePreviousSettingsAction(this,mySearchField);
  new VariantsCompletionAction(this,mySearchFieldGetter);
  Utils.setSmallerFontForChildren(myToolbarComponent);
}
