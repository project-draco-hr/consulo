{
  removeCurrentHighlights();
  myMatchInfoLabel.setFont(myMatchInfoLabel.getFont().deriveFont(Font.PLAIN));
  String text=mySearchField.getText();
  if (text.length() == 0) {
    setRegularBackground();
    myMatchInfoLabel.setText("");
    myClickToHighlightLabel.setVisible(false);
    myOkToSearch=false;
  }
 else {
    myOkToSearch=true;
    FindManager findManager=FindManager.getInstance(myProject);
    FindModel model=new FindModel();
    model.setCaseSensitive(isCaseSensitive());
    model.setInCommentsOnly(isInComments());
    model.setInStringLiteralsOnly(isInLiterals());
    if (isRegexp()) {
      model.setWholeWordsOnly(false);
      model.setRegularExpressions(true);
      try {
        Pattern.compile(text);
      }
 catch (      Exception e) {
        myOkToSearch=false;
        setNotFoundBackground();
        myClickToHighlightLabel.setVisible(false);
        myMatchInfoLabel.setText("Incorrect regular expression");
        boldMatchInfo();
        return;
      }
    }
 else {
      model.setWholeWordsOnly(isWholeWords());
      model.setRegularExpressions(false);
    }
    model.setFromCursor(false);
    model.setStringToFind(text);
    model.setSearchHighlighters(true);
    int offset=0;
    VirtualFile virtualFile=FindUtil.getVirtualFile(myEditor);
    ArrayList<FindResult> results=new ArrayList<FindResult>();
    CharSequence charsSequence=myEditor.getDocument().getCharsSequence();
    while (true) {
      FindResult result=findManager.findString(charsSequence,offset,model,virtualFile);
      if (!result.isStringFound())       break;
      int newOffset=result.getEndOffset();
      if (offset == newOffset) {
        ++offset;
        if (offset >= charsSequence.length())         break;
      }
 else {
        offset=newOffset;
        results.add(result);
      }
      if (results.size() > myMatchesLimit)       break;
    }
    if (allowedToChangedEditorSelection) {
      int currentOffset=myEditor.getCaretModel().getOffset();
      if (myEditor.getSelectionModel().hasSelection()) {
        currentOffset=Math.min(currentOffset,myEditor.getSelectionModel().getSelectionStart());
      }
      if (!findAndSelectFirstUsage(findManager,model,currentOffset,virtualFile)) {
        findAndSelectFirstUsage(findManager,model,0,virtualFile);
      }
    }
    final int count=results.size();
    if (count <= myMatchesLimit) {
      myClickToHighlightLabel.setVisible(false);
      highlightResults(text,results);
      if (count > 0) {
        setRegularBackground();
        if (count > 1) {
          myMatchInfoLabel.setText(count + " matches");
        }
 else {
          myMatchInfoLabel.setText("1 match");
        }
      }
 else {
        setNotFoundBackground();
        myMatchInfoLabel.setText("No matches");
      }
    }
 else {
      setRegularBackground();
      myMatchInfoLabel.setText("More than 100 matches");
      myClickToHighlightLabel.setVisible(true);
      boldMatchInfo();
    }
    if (allowedToChangedEditorSelection) {
      findManager.setFindWasPerformed();
      findManager.setFindNextModel(model);
    }
  }
}
