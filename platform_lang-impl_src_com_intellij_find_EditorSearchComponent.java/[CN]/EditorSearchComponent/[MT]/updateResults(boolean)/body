{
  removeCurrentHighlights();
  myMatchInfoLabel.setFont(myMatchInfoLabel.getFont().deriveFont(Font.PLAIN));
  final String text=mySearchField.getText();
  if (text.length() == 0) {
    setRegularBackground();
    myMatchInfoLabel.setText("");
    myClickToHighlightLabel.setVisible(false);
    myLivePreview.cleanUp();
  }
 else {
    final FindModel model=new FindModel();
    model.setCaseSensitive(isCaseSensitive());
    model.setInCommentsOnly(isInComments());
    model.setInStringLiteralsOnly(isInLiterals());
    setRegularBackground();
    if (isRegexp()) {
      model.setWholeWordsOnly(false);
      model.setRegularExpressions(true);
      try {
        Pattern.compile(text);
      }
 catch (      Exception e) {
        setNotFoundBackground();
        myMatchInfoLabel.setText("Incorrect regular expression");
        boldMatchInfo();
        myClickToHighlightLabel.setVisible(false);
        return;
      }
    }
 else {
      model.setWholeWordsOnly(isWholeWords());
      model.setRegularExpressions(false);
    }
    model.setFromCursor(false);
    model.setStringToFind(text);
    model.setSearchHighlighters(true);
    final FindManager findManager=FindManager.getInstance(myProject);
    if (allowedToChangedEditorSelection) {
      findManager.setFindWasPerformed();
      FindModel copy=new FindModel();
      copy.copyFrom(model);
      findManager.setFindNextModel(copy);
    }
    if (myIsReplace) {
      model.setReplaceState(true);
      model.setStringToReplace(myReplaceField.getText());
      model.setPromptOnReplace(false);
      model.setGlobal(!mySelectionOnly.isSelected());
      model.setPreserveCase(myPreserveCase.isEnabled() && myPreserveCase.isSelected());
    }
    myLivePreviewController.setFindModel(model);
    myLivePreview.update();
    myLivePreview.setContinuation(new Runnable(){
      @Override public void run(){
        final int count=myLivePreview.getSearchResults().size();
        if (count <= myMatchesLimit) {
          myClickToHighlightLabel.setVisible(false);
          if (count > 0) {
            setRegularBackground();
            if (count > 1) {
              myMatchInfoLabel.setText(count + " matches");
            }
 else {
              myMatchInfoLabel.setText("1 match");
            }
          }
 else {
            setNotFoundBackground();
            myMatchInfoLabel.setText("No matches");
          }
        }
 else {
          setRegularBackground();
          myMatchInfoLabel.setText("More than 100 matches");
          myClickToHighlightLabel.setVisible(true);
          boldMatchInfo();
        }
      }
    }
);
  }
}
