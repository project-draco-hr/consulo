{
  removeCurrentHighlights();
  myMatchInfoLabel.setFont(myMatchInfoLabel.getFont().deriveFont(Font.PLAIN));
  String text=mySearchField.getText();
  if (text.length() == 0) {
    setRegularBackground();
    myMatchInfoLabel.setText("");
    myClickToHighlightLabel.setVisible(false);
    myLivePreview.cleanUp();
  }
 else {
    FindModel model=new FindModel();
    model.setCaseSensitive(isCaseSensitive());
    model.setInCommentsOnly(isInComments());
    model.setInStringLiteralsOnly(isInLiterals());
    setRegularBackground();
    if (isRegexp()) {
      model.setWholeWordsOnly(false);
      model.setRegularExpressions(true);
      try {
        Pattern.compile(text);
      }
 catch (      Exception e) {
        setNotFoundBackground();
        myMatchInfoLabel.setText("Incorrect regular expression");
        boldMatchInfo();
        myClickToHighlightLabel.setVisible(false);
        return;
      }
    }
 else {
      model.setWholeWordsOnly(isWholeWords());
      model.setRegularExpressions(false);
    }
    model.setFromCursor(false);
    model.setStringToFind(text);
    model.setSearchHighlighters(true);
    if (myIsReplace) {
      model.setReplaceState(true);
      model.setStringToReplace(myReplaceField.getText());
      model.setPromptOnReplace(false);
      model.setGlobal(!mySelectionOnly.isSelected());
      model.setPreserveCase(myPreserveCase.isSelected());
    }
    myLivePreviewController.setFindModel(model);
    myLivePreview.update();
  }
}
