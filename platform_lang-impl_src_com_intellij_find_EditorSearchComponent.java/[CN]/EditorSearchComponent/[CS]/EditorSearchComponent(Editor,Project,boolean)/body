{
  super(new BorderLayout(0,0));
  myIsReplace=isReplace;
  GRADIENT_C1=getBackground();
  GRADIENT_C2=new Color(Math.max(0,GRADIENT_C1.getRed() - 0x18),Math.max(0,GRADIENT_C1.getGreen() - 0x18),Math.max(0,GRADIENT_C1.getBlue() - 0x18));
  myProject=project;
  myEditor=editor;
  mySearchResults=new SearchResults(myEditor);
  myLivePreview=new LivePreview(mySearchResults);
  myLivePreviewController=new LivePreviewControllerBase(mySearchResults,myLivePreview){
    @Override public void getFocusBack(){
      mySearchField.requestFocus();
    }
    @Override public TextRange performReplace(    LiveOccurrence occurrence,    String replacement,    Editor editor){
      myToChangeSelection=true;
      return super.performReplace(occurrence,replacement,editor);
    }
  }
;
  mySearchResults.addListener(this);
  setMatchesLimit(MATCHES_LIMIT);
  JPanel leadPanel=createLeadPane();
  add(leadPanel,BorderLayout.WEST);
  if (myIsReplace) {
    configureReplacementPane();
    myReplaceField.putClientProperty("AuxEditorComponent",Boolean.TRUE);
  }
  mySearchField=createTextField();
  leadPanel.add(mySearchField);
  mySearchField.putClientProperty("AuxEditorComponent",Boolean.TRUE);
  myDefaultBackground=mySearchField.getBackground();
  DefaultActionGroup group=new DefaultActionGroup("search bar",false);
  group.add(new ShowHistoryAction());
  group.add(new PrevOccurrenceAction());
  group.add(new NextOccurrenceAction());
  group.add(new FindAllAction());
  final ActionToolbar tb=ActionManager.getInstance().createActionToolbar("SearchBar",group,true);
  tb.setLayoutPolicy(ActionToolbar.NOWRAP_LAYOUT_POLICY);
  myToolbarComponent=tb.getComponent();
  myToolbarComponent.setBorder(null);
  myToolbarComponent.setOpaque(false);
  leadPanel.add(myToolbarComponent);
  final JCheckBox cbMatchCase=new NonFocusableCheckBox("Case sensitive");
  myCbWholeWords=new NonFocusableCheckBox("Match whole words only");
  myCbRegexp=new NonFocusableCheckBox("Regex");
  myCbInComments=new NonFocusableCheckBox("In comments");
  myCbInLiterals=new NonFocusableCheckBox("In literals");
  leadPanel.add(cbMatchCase);
  leadPanel.add(myCbWholeWords);
  leadPanel.add(myCbRegexp);
  if (FindManagerImpl.ourHasSearchInCommentsAndLiterals) {
    leadPanel.add(myCbInComments);
    leadPanel.add(myCbInLiterals);
  }
  cbMatchCase.setSelected(isCaseSensitive());
  myCbWholeWords.setSelected(isWholeWords());
  myCbRegexp.setSelected(isRegexp());
  myCbInComments.setSelected(isInComments());
  myCbInLiterals.setSelected(isInLiterals());
  cbMatchCase.setMnemonic('C');
  myCbWholeWords.setMnemonic('M');
  myCbRegexp.setMnemonic('R');
  myCbInComments.setMnemonic('o');
  myCbInLiterals.setMnemonic('l');
  setSmallerFontAndOpaque(myCbWholeWords);
  setSmallerFontAndOpaque(cbMatchCase);
  setSmallerFontAndOpaque(myCbRegexp);
  setSmallerFontAndOpaque(myCbInComments);
  setSmallerFontAndOpaque(myCbInLiterals);
  cbMatchCase.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      final boolean b=cbMatchCase.isSelected();
      FindManager.getInstance(myProject).getFindInFileModel().setCaseSensitive(b);
      FindSettings.getInstance().setLocalCaseSensitive(b);
      updateResults(true);
    }
  }
);
  myCbWholeWords.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      final boolean b=myCbWholeWords.isSelected();
      FindManager.getInstance(myProject).getFindInFileModel().setWholeWordsOnly(b);
      FindSettings.getInstance().setLocalWholeWordsOnly(b);
      updateResults(true);
    }
  }
);
  myCbRegexp.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      final boolean b=myCbRegexp.isSelected();
      FindManager.getInstance(myProject).getFindInFileModel().setRegularExpressions(b);
      myCbWholeWords.setEnabled(!b);
      if (myPreserveCase != null) {
        myPreserveCase.setEnabled(!b);
      }
      updateResults(true);
    }
  }
);
  myCbInComments.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      final boolean b=myCbInComments.isSelected();
      FindManager.getInstance(myProject).getFindInFileModel().setInCommentsOnly(b);
      updateResults(true);
    }
  }
);
  myCbInLiterals.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      final boolean b=myCbInLiterals.isSelected();
      FindManager.getInstance(myProject).getFindInFileModel().setInStringLiteralsOnly(b);
      updateResults(true);
    }
  }
);
  JPanel tailPanel=new NonOpaquePanel(new BorderLayout(5,0));
  JPanel tailContainer=new NonOpaquePanel(new BorderLayout(5,0));
  tailContainer.add(tailPanel,BorderLayout.EAST);
  add(tailContainer,BorderLayout.CENTER);
  myMatchInfoLabel=new JLabel();
  setSmallerFontAndOpaque(myMatchInfoLabel);
  myClickToHighlightLabel=new LinkLabel("Click to highlight",null,new LinkListener(){
    @Override public void linkSelected(    LinkLabel aSource,    Object aLinkData){
      setMatchesLimit(Integer.MAX_VALUE);
      updateResults(true);
    }
  }
);
  setSmallerFontAndOpaque(myClickToHighlightLabel);
  myClickToHighlightLabel.setVisible(false);
  JLabel closeLabel=new JLabel(" ",IconLoader.getIcon("/actions/cross.png"),SwingConstants.RIGHT);
  closeLabel.addMouseListener(new MouseAdapter(){
    public void mousePressed(    final MouseEvent e){
      close();
    }
  }
);
  closeLabel.setToolTipText("Close search bar (Escape)");
  JPanel labelsPanel=new NonOpaquePanel(new FlowLayout());
  labelsPanel.add(myMatchInfoLabel);
  labelsPanel.add(myClickToHighlightLabel);
  tailPanel.add(labelsPanel,BorderLayout.CENTER);
  tailPanel.add(closeLabel,BorderLayout.EAST);
  configureTextField(mySearchField);
  setSmallerFont(mySearchField);
  mySearchField.registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      if ("".equals(mySearchField.getText())) {
        close();
      }
 else {
        requestFocus(myEditor.getContentComponent());
        addCurrentTextToRecents();
      }
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,SystemInfo.isMac ? InputEvent.META_DOWN_MASK : InputEvent.CTRL_DOWN_MASK),JComponent.WHEN_FOCUSED);
  final String initialText=myEditor.getSelectionModel().getSelectedText();
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    public void run(){
      setInitialText(initialText);
    }
  }
);
  new VariantsCompletionAction();
}
