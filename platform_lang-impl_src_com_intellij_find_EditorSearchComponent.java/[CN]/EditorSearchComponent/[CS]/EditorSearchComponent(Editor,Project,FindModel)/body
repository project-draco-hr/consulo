{
  super(new BorderLayout(0,0));
  myFindModel=findModel;
  GRADIENT_C1=getBackground();
  GRADIENT_C2=new Color(Math.max(0,GRADIENT_C1.getRed() - 0x18),Math.max(0,GRADIENT_C1.getGreen() - 0x18),Math.max(0,GRADIENT_C1.getBlue() - 0x18));
  myProject=project;
  myEditor=editor;
  final JPanel leadPanel=createLeadPane();
  add(leadPanel,BorderLayout.WEST);
  mySearchField=createTextField(leadPanel);
  mySearchField.putClientProperty("AuxEditorComponent",Boolean.TRUE);
  myDefaultBackground=new JTextField().getBackground();
  myActionsGroup=new DefaultActionGroup("search bar",false);
  myActionsGroup.add(new PrevOccurrenceAction(this,mySearchField));
  myActionsGroup.add(new NextOccurrenceAction(this,mySearchField));
  myActionsGroup.add(new FindAllAction(this));
  myActionsGroup.addAction(new ToggleWholeWordsOnlyAction(this)).setAsSecondary(true);
  if (FindManagerImpl.ourHasSearchInCommentsAndLiterals) {
    myActionsGroup.addAction(new ToggleInCommentsAction(this)).setAsSecondary(true);
    myActionsGroup.addAction(new ToggleInLiteralsOnlyAction(this)).setAsSecondary(true);
  }
  myActionsGroup.addAction(new TogglePreserveCaseAction(this)).setAsSecondary(true);
  myActionsGroup.addAction(new ToggleSelectionOnlyAction(this)).setAsSecondary(true);
  final ActionToolbar tb=ActionManager.getInstance().createActionToolbar("SearchBar",myActionsGroup,true);
  tb.setLayoutPolicy(ActionToolbar.AUTO_LAYOUT_POLICY);
  myToolbarComponent=tb.getComponent();
  myToolbarComponent.setBorder(null);
  myToolbarComponent.setOpaque(false);
  leadPanel.add(myToolbarComponent);
  myCbMatchCase=new NonFocusableCheckBox("Case sensitive");
  myCbRegexp=new NonFocusableCheckBox("Regex");
  leadPanel.add(myCbMatchCase);
  leadPanel.add(myCbRegexp);
  myFindModel.addObserver(new FindModel.FindModelObserver(){
    @Override public void findModelChanged(    FindModel findModel){
      String stringToFind=myFindModel.getStringToFind();
      if (!wholeWordsApplicable(stringToFind)) {
        myFindModel.setWholeWordsOnly(false);
      }
      updateUIWithFindModel();
      updateResults(true);
      syncFindModels(FindManager.getInstance(myProject).getFindInFileModel(),myFindModel);
    }
  }
);
  updateUIWithFindModel();
  myCbMatchCase.setMnemonic('C');
  myCbRegexp.setMnemonic('e');
  setSmallerFontAndOpaque(myCbMatchCase);
  setSmallerFontAndOpaque(myCbRegexp);
  myCbMatchCase.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      final boolean b=myCbMatchCase.isSelected();
      FindSettings.getInstance().setLocalCaseSensitive(b);
      myFindModel.setCaseSensitive(b);
    }
  }
);
  myCbRegexp.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      final boolean b=myCbRegexp.isSelected();
      myFindModel.setRegularExpressions(b);
    }
  }
);
  JPanel tailPanel=new NonOpaquePanel(new BorderLayout(5,0));
  JPanel tailContainer=new NonOpaquePanel(new BorderLayout(5,0));
  tailContainer.add(tailPanel,BorderLayout.EAST);
  add(tailContainer,BorderLayout.CENTER);
  myMatchInfoLabel=new JLabel();
  setSmallerFontAndOpaque(myMatchInfoLabel);
  myClickToHighlightLabel=new LinkLabel("Click to highlight",null,new LinkListener(){
    @Override public void linkSelected(    LinkLabel aSource,    Object aLinkData){
      setMatchesLimit(Integer.MAX_VALUE);
      updateResults(true);
    }
  }
);
  setSmallerFontAndOpaque(myClickToHighlightLabel);
  myClickToHighlightLabel.setVisible(false);
  JLabel closeLabel=new JLabel(" ",IconLoader.getIcon("/actions/cross.png"),SwingConstants.RIGHT);
  closeLabel.addMouseListener(new MouseAdapter(){
    public void mousePressed(    final MouseEvent e){
      close();
    }
  }
);
  closeLabel.setToolTipText("Close search bar (Escape)");
  JPanel labelsPanel=new NonOpaquePanel(new FlowLayout());
  labelsPanel.add(myMatchInfoLabel);
  labelsPanel.add(myClickToHighlightLabel);
  tailPanel.add(labelsPanel,BorderLayout.CENTER);
  tailPanel.add(closeLabel,BorderLayout.EAST);
  new RegexpFieldController(mySearchField,myFindModel,this);
  setSmallerFont(mySearchField);
  mySearchField.registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      if ("".equals(mySearchField.getText())) {
        close();
      }
 else {
        requestFocus(myEditor.getContentComponent());
        addTextToRecents(EditorSearchComponent.this.mySearchField);
      }
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,SystemInfo.isMac ? InputEvent.META_DOWN_MASK : InputEvent.CTRL_DOWN_MASK),JComponent.WHEN_FOCUSED);
  final String initialText=myFindModel.getStringToFind();
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    public void run(){
      setInitialText(initialText);
    }
  }
);
  new VariantsCompletionAction(this,mySearchField);
  new SwitchToFind(this);
  new SwitchToReplace(this);
}
