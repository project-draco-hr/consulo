{
  List<VcsException> exceptions=new ArrayList<VcsException>();
  Map<VirtualFile,List<Change>> sortedChanges=sortChangesByVcsRoot(changes);
  for (  VirtualFile root : sortedChanges.keySet()) {
    GitCommand command=new GitCommand(project,settings,root);
    Set<FilePath> files=new HashSet<FilePath>();
    for (    Change change : changes) {
switch (change.getType()) {
case NEW:
case MODIFICATION:
        files.add(change.getAfterRevision().getFile());
      break;
case DELETED:
    files.add(change.getBeforeRevision().getFile());
  break;
case MOVED:
files.add(change.getAfterRevision().getFile());
files.add(change.getBeforeRevision().getFile());
break;
default :
throw new IllegalStateException("Unknown change type: " + change.getType());
}
}
try {
command.commit(files.toArray(new FilePath[files.size()]),message);
}
 catch (VcsException e) {
exceptions.add(e);
}
}
return exceptions;
}
