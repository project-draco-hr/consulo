{
  final List<FilePath> filesToDelete=new ArrayList<FilePath>(myDeletedWithoutConfirmFiles);
  final List<FilePath> filesToConfirmDeletion=new ArrayList<FilePath>(myDeletedFiles);
  myDeletedWithoutConfirmFiles.clear();
  myDeletedFiles.clear();
  final ChangeListManagerImpl changeListManager=ChangeListManagerImpl.getInstanceImpl(myProject);
  skipUnversionedAndNotUnderHg(changeListManager,filesToDelete);
  skipUnversionedAndNotUnderHg(changeListManager,filesToConfirmDeletion);
  new Task.ConditionalModal(myProject,HgVcsMessages.message("hg4idea.remove.progress"),false,VcsConfiguration.getInstance(myProject).getAddRemoveOption()){
    @Override public void run(    @NotNull ProgressIndicator indicator){
      for (Iterator<FilePath> it=filesToConfirmDeletion.iterator(); it.hasNext(); ) {
        FilePath file=it.next();
        if (!isDeleteCofirmationNeeded(file)) {
          filesToDelete.add(file);
          it.remove();
        }
      }
      if (myRemoveOption.getValue() != VcsShowConfirmationOption.Value.DO_NOTHING_SILENTLY) {
        if (myRemoveOption.getValue() == VcsShowConfirmationOption.Value.DO_ACTION_SILENTLY || filesToConfirmDeletion.isEmpty()) {
          filesToDelete.addAll(filesToConfirmDeletion);
        }
 else {
          final AtomicReference<Collection<FilePath>> filePaths=new AtomicReference<Collection<FilePath>>();
          ApplicationManager.getApplication().invokeAndWait(new Runnable(){
            @Override public void run(){
              filePaths.set(selectFilePathsToDelete(filesToConfirmDeletion));
            }
          }
,indicator.getModalityState());
          if (filePaths.get() != null) {
            filesToDelete.addAll(filePaths.get());
          }
        }
      }
      if (!filesToDelete.isEmpty()) {
        performDeletion(filesToDelete);
      }
    }
  }
.queue();
}
