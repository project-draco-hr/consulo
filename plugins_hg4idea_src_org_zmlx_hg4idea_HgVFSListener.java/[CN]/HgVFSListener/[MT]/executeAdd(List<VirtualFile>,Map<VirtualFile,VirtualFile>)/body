{
  for (Iterator<Map.Entry<VirtualFile,VirtualFile>> it=copyFromMap.entrySet().iterator(); it.hasNext(); ) {
    final Map.Entry<VirtualFile,VirtualFile> entry=it.next();
    final VirtualFile rootFrom=HgUtil.getHgRootOrNull(myProject,entry.getKey());
    final VirtualFile rootTo=HgUtil.getHgRootOrNull(myProject,entry.getValue());
    if (rootTo == null || !rootTo.equals(rootFrom)) {
      it.remove();
    }
  }
  for (Iterator<VirtualFile> it=addedFiles.iterator(); it.hasNext(); ) {
    if (HgUtil.getHgRootOrNull(myProject,it.next()) == null) {
      it.remove();
    }
  }
  final Map<VirtualFile,Collection<VirtualFile>> sortedFiles=HgUtil.sortByHgRoots(myProject,addedFiles);
  final HashSet<VirtualFile> untrackedFiles=new HashSet<VirtualFile>();
  new Task.Backgroundable(myProject,HgVcsMessages.message("hg4idea.progress.checking.ignored"),false){
    @Override public void run(    @NotNull ProgressIndicator pi){
      for (      Map.Entry<VirtualFile,Collection<VirtualFile>> e : sortedFiles.entrySet()) {
        VirtualFile repo=e.getKey();
        final Collection<VirtualFile> files=e.getValue();
        pi.setText(repo.getPresentableUrl());
        try {
          untrackedFiles.addAll(new HgStatusCommand.Builder(false).unknown(true).build(myProject).getHgUntrackedFiles(repo,new ArrayList<VirtualFile>(files)));
        }
 catch (        final VcsException ex) {
          UIUtil.invokeLaterIfNeeded(new Runnable(){
            public void run(){
              ((HgVcs)myVcs).showMessageInConsole(ex.getMessage(),ConsoleViewContentType.ERROR_OUTPUT.getAttributes());
            }
          }
);
        }
      }
      addedFiles.retainAll(untrackedFiles);
      if (!addedFiles.isEmpty() || !copyFromMap.isEmpty()) {
        AppUIUtil.invokeLaterIfProjectAlive(myProject,new Runnable(){
          @Override public void run(){
            originalExecuteAdd(addedFiles,copyFromMap);
          }
        }
);
      }
    }
  }
.queue();
}
