{
  (new Task.ConditionalModal(myProject,HgVcsMessages.message("hg4idea.add.progress"),false,VcsConfiguration.getInstance(myProject).getAddRemoveOption()){
    @Override public void run(    @NotNull ProgressIndicator aProgressIndicator){
      final ArrayList<VirtualFile> adds=new ArrayList<VirtualFile>();
      final HashMap<VirtualFile,VirtualFile> copies=new HashMap<VirtualFile,VirtualFile>();
      LOG.assertTrue(myProject != null,"Project is null");
      Collection<VirtualFile> unversionedAndIgnoredFiles=new ArrayList<VirtualFile>();
      final Map<VirtualFile,Collection<VirtualFile>> sortedSourceFilesByRepos=HgUtil.sortByHgRoots(myProject,copyFromMap.values());
      HgStatusCommand statusCommand=new HgStatusCommand.Builder(false).includeUnknown(true).includeIgnored(true).build(myProject);
      for (      VirtualFile repo : sortedSourceFilesByRepos.keySet()) {
        Set<HgChange> changes=statusCommand.execute(repo);
        for (        HgChange change : changes) {
          unversionedAndIgnoredFiles.add(change.afterFile().toFilePath().getVirtualFile());
        }
      }
      copyFromMap.values().removeAll(unversionedAndIgnoredFiles);
      for (      VirtualFile file : addedFiles) {
        if (file.isDirectory()) {
          continue;
        }
        final VirtualFile copyFrom=copyFromMap.get(file);
        if (copyFrom != null) {
          copies.put(copyFrom,file);
        }
 else {
          adds.add(file);
        }
      }
      if (!adds.isEmpty()) {
        new HgAddCommand(myProject).execute(adds);
      }
      if (!copies.isEmpty()) {
        for (        Map.Entry<VirtualFile,VirtualFile> copy : copies.entrySet()) {
          new HgCopyCommand(myProject).execute(copy.getKey(),copy.getValue());
        }
      }
      for (      VirtualFile file : addedFiles) {
        dirtyScopeManager.fileDirty(file);
      }
    }
  }
).queue();
}
