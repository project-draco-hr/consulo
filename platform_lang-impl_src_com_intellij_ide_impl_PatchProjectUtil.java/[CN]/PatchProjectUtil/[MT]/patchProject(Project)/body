{
  final Map<Pattern,Set<Pattern>> excludePatterns=loadPatterns("idea.exclude.patterns");
  final Map<Pattern,Set<Pattern>> includePatterns=loadPatterns("idea.include.patterns");
  if (excludePatterns.isEmpty() && includePatterns.isEmpty())   return;
  final ProjectFileIndex index=ProjectRootManager.getInstance(project).getFileIndex();
  final ModifiableModuleModel modulesModel=ModuleManager.getInstance(project).getModifiableModel();
  final Module[] modules=modulesModel.getModules();
  final ModifiableRootModel[] models=new ModifiableRootModel[modules.length];
  for (int i=0; i < modules.length; i++) {
    models[i]=ModuleRootManager.getInstance(modules[i]).getModifiableModel();
    final int idx=i;
    final ContentEntry[] contentEntries=models[i].getContentEntries();
    for (    final ContentEntry contentEntry : contentEntries) {
      final VirtualFile contentRoot=contentEntry.getFile();
      if (contentRoot == null)       continue;
      final Set<VirtualFile> included=new HashSet<VirtualFile>();
      iterate(contentRoot,new ContentIterator(){
        public boolean processFile(        final VirtualFile fileOrDir){
          String relativeName=VfsUtilCore.getRelativePath(fileOrDir,contentRoot,'/');
          for (          Pattern module : excludePatterns.keySet()) {
            if (module == null || module.matcher(modules[idx].getName()).matches()) {
              final Set<Pattern> dirPatterns=excludePatterns.get(module);
              for (              Pattern pattern : dirPatterns) {
                if (pattern.matcher(relativeName).matches()) {
                  contentEntry.addExcludeFolder(fileOrDir);
                  return false;
                }
              }
            }
          }
          if (includePatterns.isEmpty())           return true;
          for (          Pattern module : includePatterns.keySet()) {
            if (module == null || module.matcher(modules[idx].getName()).matches()) {
              final Set<Pattern> dirPatterns=includePatterns.get(module);
              for (              Pattern pattern : dirPatterns) {
                if (pattern.matcher(relativeName).matches()) {
                  included.add(fileOrDir);
                  return true;
                }
              }
            }
          }
          return true;
        }
      }
,index);
      processIncluded(contentEntry,included);
    }
  }
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      ModuleRootManagerImpl.multiCommit(models,modulesModel);
    }
  }
);
}
