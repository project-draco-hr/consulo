{
  String namePattern=getNamePattern(base,pattern);
  String qualifierPattern=getQualifierPattern(base,pattern);
  if (base.isSearchInAnyPlace() && namePattern.trim().length() > 0) {
    namePattern="*" + namePattern + "*";
  }
  boolean empty=namePattern.length() == 0 || namePattern.equals("@");
  if (empty && !base.canShowListForEmptyPattern())   return;
  List<String> namesList=new ArrayList<String>();
  getNamesByPattern(base,base.getNames(everywhere),cancelled,namesList,namePattern);
  if (cancelled.compute()) {
    throw new ProcessCanceledException();
  }
  Collections.sort(namesList,new MatchesComparator(namePattern));
  List<Object> sameNameElements=new SmartList<Object>();
  for (  String name : namesList) {
    if (cancelled.compute()) {
      throw new ProcessCanceledException();
    }
    final Object[] elements=base.getModel().getElementsByName(name,everywhere,namePattern);
    if (elements.length > 1) {
      sameNameElements.clear();
      for (      final Object element : elements) {
        if (matchesQualifier(element,qualifierPattern,base)) {
          sameNameElements.add(element);
        }
      }
      sortByProximity(base,sameNameElements);
      for (      Object element : sameNameElements) {
        if (!consumer.process(element))         return;
      }
    }
 else     if (elements.length == 1 && matchesQualifier(elements[0],qualifierPattern,base)) {
      if (!consumer.process(elements[0]))       return;
    }
  }
}
