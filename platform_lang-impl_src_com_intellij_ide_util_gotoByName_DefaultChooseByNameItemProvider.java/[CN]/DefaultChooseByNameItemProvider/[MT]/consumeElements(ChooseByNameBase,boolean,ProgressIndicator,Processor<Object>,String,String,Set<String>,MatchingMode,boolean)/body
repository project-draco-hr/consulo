{
  ChooseByNameModel model=base.getModel();
  List<String> namesList=new ArrayList<String>();
  getNamesByPattern(base,new ArrayList<String>(allNames),indicator,namesList,namePattern,matchingMode);
  allNames.removeAll(namesList);
  sortNamesList(namePattern,namesList);
  indicator.checkCanceled();
  List<Object> sameNameElements=new SmartList<Object>();
  List<Pair<String,MinusculeMatcher>> patternsAndMatchers=getPatternsAndMatchers(qualifierPattern,base);
  int elementsConsumed=0;
  for (  String name : namesList) {
    indicator.checkCanceled();
    Object[] elements=model instanceof ContributorsBasedGotoByModel ? ((ContributorsBasedGotoByModel)model).getElementsByName(name,everywhere,namePattern,indicator) : model.getElementsByName(name,everywhere,namePattern);
    if (elements.length > 1) {
      sameNameElements.clear();
      for (      final Object element : elements) {
        indicator.checkCanceled();
        if (matchesQualifier(element,base,patternsAndMatchers)) {
          sameNameElements.add(element);
        }
      }
      sortByProximity(base,sameNameElements);
      for (      Object element : sameNameElements) {
        if (needSeparator && !consumer.process(ChooseByNameBase.NON_PREFIX_SEPARATOR))         return null;
        if (!consumer.process(element))         return null;
        needSeparator=false;
        elementsConsumed++;
      }
    }
 else     if (elements.length == 1 && matchesQualifier(elements[0],base,patternsAndMatchers)) {
      if (needSeparator && !consumer.process(ChooseByNameBase.NON_PREFIX_SEPARATOR))       return null;
      if (!consumer.process(elements[0]))       return null;
      needSeparator=false;
      elementsConsumed++;
    }
  }
  return elementsConsumed;
}
