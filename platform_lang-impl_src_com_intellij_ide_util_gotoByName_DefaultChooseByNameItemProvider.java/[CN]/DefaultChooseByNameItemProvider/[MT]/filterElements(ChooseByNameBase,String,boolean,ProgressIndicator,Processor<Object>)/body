{
  String namePattern=getNamePattern(base,pattern);
  String qualifierPattern=getQualifierPattern(base,pattern);
  ChooseByNameModel model=base.getModel();
  boolean empty=namePattern.isEmpty() || namePattern.equals("@") && model instanceof GotoClassModel2;
  if (empty && !base.canShowListForEmptyPattern())   return true;
  Set<String> names=new THashSet<String>(Arrays.asList(base.getNames(everywhere)));
  if (base.isSearchInAnyPlace() && !namePattern.trim().isEmpty()) {
    String middleMatchPattern="*" + namePattern;
    Integer elementsConsumed=consumeElements(base,everywhere,indicator,consumer,namePattern,qualifierPattern,names,MatchingMode.CASE_SENSITIVE,false);
    if (elementsConsumed == null)     return false;
    if (elementsConsumed == 0) {
      elementsConsumed=consumeElements(base,everywhere,indicator,consumer,namePattern,qualifierPattern,names,MatchingMode.STRICT_CASE_INSENSITIVE,false);
      if (elementsConsumed == null)       return false;
      Integer elementsConsumed2=consumeElements(base,everywhere,indicator,consumer,namePattern,qualifierPattern,names,MatchingMode.CASE_INSENSITIVE,false);
      if (elementsConsumed2 == null)       return false;
      elementsConsumed+=elementsConsumed2;
    }
    elementsConsumed=consumeElements(base,everywhere,indicator,consumer,middleMatchPattern,qualifierPattern,names,MatchingMode.CASE_INSENSITIVE,elementsConsumed > 0);
    return elementsConsumed != null;
  }
 else {
    Integer elementsConsumed=consumeElements(base,everywhere,indicator,consumer,namePattern,qualifierPattern,names,MatchingMode.CASE_INSENSITIVE,false);
    return elementsConsumed != null;
  }
}
