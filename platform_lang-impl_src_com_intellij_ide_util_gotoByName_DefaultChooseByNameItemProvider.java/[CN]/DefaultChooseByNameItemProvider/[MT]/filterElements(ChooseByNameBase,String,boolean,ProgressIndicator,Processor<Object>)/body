{
  String namePattern=getNamePattern(base,pattern);
  String qualifierPattern=getQualifierPattern(base,pattern);
  if (removeModelSpecificMarkup(base,namePattern).isEmpty() && !base.canShowListForEmptyPattern())   return true;
  final ChooseByNameModel model=base.getModel();
  String matchingPattern=convertToMatchingPattern(base,namePattern);
  List<MatchResult> namesList=new ArrayList<MatchResult>();
  final CollectConsumer<MatchResult> collect=new SynchronizedCollectConsumer<MatchResult>(namesList);
  long started;
  if (model instanceof ChooseByNameModelEx) {
    indicator.checkCanceled();
    started=System.currentTimeMillis();
    final MinusculeMatcher matcher=buildPatternMatcher(matchingPattern,NameUtil.MatchingCaseSensitivity.NONE);
    ((ChooseByNameModelEx)model).processNames(new Processor<String>(){
      @Override public boolean process(      String sequence){
        ProgressManager.checkCanceled();
        MatchResult result=matches(base,pattern,matcher,sequence);
        if (result != null) {
          collect.consume(result);
          return true;
        }
        return false;
      }
    }
,everywhere);
    if (LOG.isDebugEnabled()) {
      LOG.debug("loaded + matched:" + (System.currentTimeMillis() - started) + ","+ collect.getResult().size());
    }
  }
 else {
    String[] names=base.getNames(everywhere);
    started=System.currentTimeMillis();
    processNamesByPattern(base,names,matchingPattern,indicator,collect);
    if (LOG.isDebugEnabled()) {
      LOG.debug("matched:" + (System.currentTimeMillis() - started) + ","+ names.length);
    }
  }
  indicator.checkCanceled();
  started=System.currentTimeMillis();
  List<MatchResult> results=(List<MatchResult>)collect.getResult();
  sortNamesList(matchingPattern,results);
  if (LOG.isDebugEnabled()) {
    LOG.debug("sorted:" + (System.currentTimeMillis() - started) + ",results:"+ results.size());
  }
  indicator.checkCanceled();
  List<Object> sameNameElements=new SmartList<Object>();
  final Map<Object,MatchResult> qualifierMatchResults=new THashMap<Object,MatchResult>();
  Comparator<Object> weightComparator=new Comparator<Object>(){
    Comparator<Object> modelComparator=model instanceof Comparator ? (Comparator<Object>)model : new PathProximityComparator(myContext.get());
    @Override public int compare(    Object o1,    Object o2){
      int result=modelComparator.compare(o1,o2);
      return result != 0 ? result : qualifierMatchResults.get(o1).compareTo(qualifierMatchResults.get(o2));
    }
  }
;
  List<Object> qualifierMiddleMatched=new ArrayList<Object>();
  List<Pair<String,MinusculeMatcher>> patternsAndMatchers=getPatternsAndMatchers(qualifierPattern,base);
  boolean sortedByMatchingDegree=!(base.getModel() instanceof CustomMatcherModel);
  IdFilter idFilter=null;
  if (model instanceof ContributorsBasedGotoByModel) {
    idFilter=((ContributorsBasedGotoByModel)model).getIdFilter(everywhere);
  }
  GlobalSearchScope searchScope=FindSymbolParameters.searchScopeFor(base.myProject,everywhere);
  FindSymbolParameters parameters=new FindSymbolParameters(pattern,namePattern,searchScope,idFilter);
  boolean afterStartMatch=false;
  for (  MatchResult result : namesList) {
    indicator.checkCanceled();
    String name=result.elementName;
    boolean needSeparator=sortedByMatchingDegree && !result.startMatch && afterStartMatch;
    Object[] elements=model instanceof ContributorsBasedGotoByModel ? ((ContributorsBasedGotoByModel)model).getElementsByName(name,parameters,indicator) : model.getElementsByName(name,everywhere,namePattern);
    if (elements.length > 1) {
      sameNameElements.clear();
      qualifierMatchResults.clear();
      for (      final Object element : elements) {
        indicator.checkCanceled();
        MatchResult qualifierResult=matchQualifier(element,base,patternsAndMatchers);
        if (qualifierResult != null) {
          sameNameElements.add(element);
          qualifierMatchResults.put(element,qualifierResult);
        }
      }
      Collections.sort(sameNameElements,weightComparator);
      for (      Object element : sameNameElements) {
        if (!qualifierMatchResults.get(element).startMatch) {
          qualifierMiddleMatched.add(element);
          continue;
        }
        if (needSeparator && !startMiddleMatchVariants(qualifierMiddleMatched,consumer))         return false;
        if (!consumer.process(element))         return false;
        needSeparator=false;
        afterStartMatch=result.startMatch;
      }
    }
 else     if (elements.length == 1 && matchQualifier(elements[0],base,patternsAndMatchers) != null) {
      if (needSeparator && !startMiddleMatchVariants(qualifierMiddleMatched,consumer))       return false;
      if (!consumer.process(elements[0]))       return false;
      afterStartMatch=result.startMatch;
    }
  }
  return ContainerUtil.process(qualifierMiddleMatched,consumer);
}
