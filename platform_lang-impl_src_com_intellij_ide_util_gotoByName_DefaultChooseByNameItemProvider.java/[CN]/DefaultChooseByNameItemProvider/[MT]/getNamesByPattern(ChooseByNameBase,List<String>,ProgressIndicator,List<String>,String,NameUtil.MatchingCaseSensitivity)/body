{
  if (!base.canShowListForEmptyPattern()) {
    LOG.assertTrue(!pattern.isEmpty(),base);
  }
  if (StringUtil.startsWithChar(pattern,'@') && base.getModel() instanceof GotoClassModel2) {
    pattern=pattern.substring(1);
  }
  final MinusculeMatcher matcher=buildPatternMatcher(pattern,caseSensitivity);
  final String finalPattern=pattern;
  JobLauncher.getInstance().invokeConcurrentlyUnderProgress(names,indicator,false,new Processor<String>(){
    @Override public boolean process(    String name){
      if (matches(base,finalPattern,matcher,name)) {
synchronized (outListFiltered) {
          outListFiltered.add(name);
        }
      }
      return true;
    }
  }
);
}
