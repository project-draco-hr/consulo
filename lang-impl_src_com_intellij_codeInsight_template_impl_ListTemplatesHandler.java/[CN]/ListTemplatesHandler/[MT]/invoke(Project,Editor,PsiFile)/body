{
  if (!file.isWritable())   return;
  EditorUtil.fillVirtualSpaceUntil(editor,editor.getCaretModel().getLogicalPosition().column,editor.getCaretModel().getLogicalPosition().line);
  PsiDocumentManager.getInstance(project).commitDocument(editor.getDocument());
  int offset=editor.getCaretModel().getOffset();
  String prefix=getPrefix(editor.getDocument(),offset);
  TemplateContextType contextType=TemplateManager.getInstance(project).getContextType(file,offset);
  TemplateImpl[] templates=TemplateSettings.getInstance().getTemplates();
  ArrayList<LookupItem> array=new ArrayList<LookupItem>();
  for (  TemplateImpl template : templates) {
    if (template.isDeactivated() || template.isSelectionTemplate())     continue;
    String key=template.getKey();
    if (key.startsWith(prefix) && contextType.isEnabled(template.getTemplateContext())) {
      LookupItem item=new LookupItem(template,key);
      array.add(item);
    }
  }
  LookupItem[] items=array.toArray(new LookupItem[array.size()]);
  if (items.length == 0) {
    String text=prefix.length() == 0 ? CodeInsightBundle.message("templates.no.defined") : CodeInsightBundle.message("templates.no.defined.with.prefix",prefix);
    HintManager.getInstance().showErrorHint(editor,text);
    return;
  }
  Lookup lookup=LookupManager.getInstance(project).showLookup(editor,items,prefix,null,IdentifierCharFilter.INSTANCE);
  lookup.addLookupListener(new LookupAdapter(){
    public void itemSelected(    LookupEvent event){
      TemplateManager.getInstance(project).startTemplate(editor,'\0');
    }
  }
);
}
