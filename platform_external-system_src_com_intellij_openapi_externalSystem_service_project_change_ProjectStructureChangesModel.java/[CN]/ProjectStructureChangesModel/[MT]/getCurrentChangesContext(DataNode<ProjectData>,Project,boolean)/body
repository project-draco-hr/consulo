{
  ProjectSystemId owner=externalProject.getData().getOwner();
  IntegrationKey key=new IntegrationKey(ideProject,owner);
  Set<ExternalProjectStructureChange> knownChanges=myChanges.get(key);
  if (knownChanges == null) {
    knownChanges=Collections.emptySet();
  }
  ExternalProjectChangesCalculationContext context=new ExternalProjectChangesCalculationContext(knownChanges,myPlatformFacade,myLibraryPathTypeMapper);
  for (  ExternalProjectStructureChangesPostProcessor processor : myCommonPostProcessors) {
    processor.processChanges(context.getCurrentChanges(),owner,ideProject,onIdeProjectStructureChange);
  }
  Set<ExternalProjectStructureChangesPostProcessor> postProcessors=mySpecificPostProcessors.get(owner);
  if (postProcessors != null)   for (  ExternalProjectStructureChangesPostProcessor processor : myCommonPostProcessors) {
    processor.processChanges(context.getCurrentChanges(),owner,ideProject,onIdeProjectStructureChange);
  }
  return context;
}
