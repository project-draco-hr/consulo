{
  final AtomicBoolean cloneResult=new AtomicBoolean();
  new Task.Backgroundable(project,GitBundle.message("cloning.repository",sourceRepositoryURL)){
    @Override public void run(    @NotNull ProgressIndicator indicator){
      cloneResult.set(doClone(project,indicator,git,directoryName,parentDirectory,sourceRepositoryURL));
    }
    @Override public void onSuccess(){
      if (!cloneResult.get()) {
        return;
      }
      destinationParent.refresh(true,true,new Runnable(){
        public void run(){
          if (project.isOpen() && (!project.isDisposed()) && (!project.isDefault())) {
            final VcsDirtyScopeManager mgr=VcsDirtyScopeManager.getInstance(project);
            mgr.fileDirty(destinationParent);
          }
        }
      }
);
      listener.directoryCheckedOut(new File(parentDirectory,directoryName),GitVcs.getKey());
      listener.checkoutCompleted();
    }
  }
.queue();
}
