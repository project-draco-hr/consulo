{
  final GitLineHandler handler=clone(project,sourceRepositoryURL,new File(parentDirectory),directoryName,originName);
  handler.addLineListener(new GitHandlerUtil.GitLineHandlerListenerProgress(ProgressManager.getInstance().getProgressIndicator(),handler,"git clone",true));
  GitTask task=new GitTask(project,handler,GitBundle.message("cloning.repository",sourceRepositoryURL));
  task.executeAsync(new GitTask.ResultHandler(){
    @Override public void run(    GitTaskResult result){
      if (result == GitTaskResult.OK) {
        destinationParent.refresh(true,true,new Runnable(){
          public void run(){
            if (project.isOpen() && (!project.isDisposed()) && (!project.isDefault())) {
              final VcsDirtyScopeManager mgr=VcsDirtyScopeManager.getInstance(project);
              mgr.fileDirty(destinationParent);
            }
          }
        }
);
        listener.directoryCheckedOut(new File(parentDirectory,directoryName));
        listener.checkoutCompleted();
      }
    }
  }
);
}
