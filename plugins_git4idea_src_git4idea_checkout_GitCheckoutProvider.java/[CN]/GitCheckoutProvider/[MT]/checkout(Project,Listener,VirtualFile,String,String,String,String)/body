{
  final GitLineHandler handler=clone(project,sourceRepositoryURL,new File(parentDirectory),directoryName,originName);
  GitTask task=new GitTask(project,handler,GitBundle.message("cloning.repository",sourceRepositoryURL));
  task.executeAsync(new GitTaskResultHandlerAdapter(){
    @Override public void onSuccess(){
      destinationParent.refresh(true,true,new Runnable(){
        public void run(){
          if (project.isOpen() && (!project.isDisposed()) && (!project.isDefault())) {
            final VcsDirtyScopeManager mgr=VcsDirtyScopeManager.getInstance(project);
            mgr.fileDirty(destinationParent);
          }
        }
      }
);
      listener.directoryCheckedOut(new File(parentDirectory,directoryName));
      listener.checkoutCompleted();
    }
    @Override protected void onFailure(){
      GitUIUtil.notifyGitErrors(project,"Couldn't clone","Couldn't clone from " + sourceRepositoryURL,handler.errors());
    }
  }
);
}
