{
  final GitLineHandler handler=clone(project,sourceRepositoryURL,new File(parentDirectory),directoryName,originName);
  handler.addLineListener(new GitHandlerUtil.GitLineHandlerListenerProgress(ProgressManager.getInstance().getProgressIndicator(),handler,"git clone",true));
  new Task.Backgroundable(project,GitBundle.message("cloning.repository",sourceRepositoryURL),true){
    @Override public void run(    @NotNull ProgressIndicator indicator){
      GitHandlerUtil.runInCurrentThread(handler,indicator,true,"git clone");
    }
    @Override public void onSuccess(){
      destinationParent.refresh(true,true,new Runnable(){
        public void run(){
          if (project.isOpen() && (!project.isDisposed()) && (!project.isDefault())) {
            final VcsDirtyScopeManager mgr=VcsDirtyScopeManager.getInstance(project);
            mgr.fileDirty(destinationParent);
          }
        }
      }
);
      listener.directoryCheckedOut(new File(parentDirectory,directoryName));
      listener.checkoutCompleted();
    }
  }
.queue();
}
