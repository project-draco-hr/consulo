{
  super.setUp();
  myVcs=new MockAbstractVcs(getProject());
  AllVcses.getInstance(getProject()).registerManually(myVcs);
  myChangeListManager=ChangeListManager.getInstance(getProject());
  addChangeList("Default","");
  final LocalChangeList defaultChangeList=myChangeListManager.findChangeList("Default");
  assertNotNull(defaultChangeList);
  myChangeListManager.setDefaultChangeList(defaultChangeList);
  for (  LocalChangeList changeList : myChangeListManager.getChangeLists()) {
    if (!changeList.isDefault())     myChangeListManager.removeChangeList(changeList);
  }
  ProjectLevelVcsManager.getInstance(getProject()).setDirectoryMapping("",myVcs.getName());
  ProjectLevelVcsManager.getInstance(getProject()).hasActiveVcss();
  myRepository=new TestRepository();
  myRepository.setTasks(new Task(){
    @NotNull @Override public String getId(){
      return "TEST-001";
    }
    @NotNull @Override public String getSummary(){
      return "Summary";
    }
    @Override public String getDescription(){
      return null;
    }
    @NotNull @Override public Comment[] getComments(){
      return new Comment[0];
    }
    @NotNull @Override public Icon getIcon(){
      return TasksIcons.Unknown;
    }
    @NotNull @Override public TaskType getType(){
      return TaskType.BUG;
    }
    @Override public Date getUpdated(){
      return null;
    }
    @Override public Date getCreated(){
      return null;
    }
    @Override public boolean isClosed(){
      return false;
    }
    @Override public boolean isIssue(){
      return false;
    }
    @Override public String getIssueUrl(){
      return null;
    }
    @Override public TaskRepository getRepository(){
      return myRepository;
    }
  }
);
  myManager.setRepositories(Collections.singletonList(myRepository));
}
