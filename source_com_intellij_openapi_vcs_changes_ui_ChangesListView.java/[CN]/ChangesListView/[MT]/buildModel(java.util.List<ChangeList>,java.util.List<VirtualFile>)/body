{
  DefaultMutableTreeNode root=new DefaultMutableTreeNode("root");
  final DefaultTreeModel model=new DefaultTreeModel(root);
  for (  ChangeList list : changeLists) {
    DefaultMutableTreeNode listNode=new DefaultMutableTreeNode(list);
    model.insertNodeInto(listNode,root,0);
    final HashMap<FilePath,DefaultMutableTreeNode> foldersCache=new HashMap<FilePath,DefaultMutableTreeNode>();
    final HashMap<Module,DefaultMutableTreeNode> moduleCache=new HashMap<Module,DefaultMutableTreeNode>();
    for (    Change change : list.getChanges()) {
      final DefaultMutableTreeNode node=new DefaultMutableTreeNode(change);
      model.insertNodeInto(node,getParentNodeFor(node,foldersCache,moduleCache,listNode),0);
    }
  }
  if (!unversionedFiles.isEmpty()) {
    DefaultMutableTreeNode unversionedNode=new DefaultMutableTreeNode("Unversioned Files");
    model.insertNodeInto(unversionedNode,root,root.getChildCount());
    final HashMap<FilePath,DefaultMutableTreeNode> foldersCache=new HashMap<FilePath,DefaultMutableTreeNode>();
    final HashMap<Module,DefaultMutableTreeNode> moduleCache=new HashMap<Module,DefaultMutableTreeNode>();
    for (    VirtualFile file : unversionedFiles) {
      final DefaultMutableTreeNode node=new DefaultMutableTreeNode(file);
      model.insertNodeInto(node,getParentNodeFor(node,foldersCache,moduleCache,unversionedNode),0);
    }
  }
  collapseDirectories(model,root);
  return model;
}
