{
  myTreeExpansionMonitor.freeze();
  myRoot.removeAllChildren();
  for (  ChangeList list : changeLists) {
    DefaultMutableTreeNode listNode=new DefaultMutableTreeNode(list);
    myRoot.add(listNode);
    for (    Change change : list.getChanges()) {
      listNode.add(new DefaultMutableTreeNode(change));
    }
  }
  if (!unversionedFiles.isEmpty()) {
    DefaultMutableTreeNode unversionedNode=new DefaultMutableTreeNode("Unversioned Files");
    myRoot.add(unversionedNode);
    for (    VirtualFile file : unversionedFiles) {
      unversionedNode.add(new DefaultMutableTreeNode(file));
    }
  }
  TreeUtil.sort(myRoot,new Comparator(){
    public int compare(    final Object n1,    final Object n2){
      Object o1=((DefaultMutableTreeNode)n1).getUserObject();
      Object o2=((DefaultMutableTreeNode)n2).getUserObject();
      if (o1 instanceof Change && o2 instanceof Change) {
        return getFilePath((Change)o1).getName().compareToIgnoreCase(getFilePath((Change)o2).getName());
      }
      if (o1 instanceof ChangeList && o2 instanceof ChangeList) {
        return ((ChangeList)o1).getDescription().compareToIgnoreCase(((ChangeList)o2).getDescription());
      }
      return 0;
    }
  }
);
  ((DefaultTreeModel)getModel()).nodeStructureChanged(myRoot);
  myTreeExpansionMonitor.restore();
}
