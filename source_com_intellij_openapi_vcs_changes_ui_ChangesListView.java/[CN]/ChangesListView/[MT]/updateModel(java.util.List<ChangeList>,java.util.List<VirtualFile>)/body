{
  storeState();
  final DefaultTreeModel model=buildModel(changeLists,unversionedFiles);
  TreeUtil.sort((DefaultTreeModel)getModel(),new Comparator(){
    public int compare(    final Object n1,    final Object n2){
      Object o1=((DefaultMutableTreeNode)n1).getUserObject();
      Object o2=((DefaultMutableTreeNode)n2).getUserObject();
      if (o1 instanceof Change && o2 instanceof Change) {
        return getFilePath((Change)o1).getName().compareToIgnoreCase(getFilePath((Change)o2).getName());
      }
      if (o1 instanceof ChangeList && o2 instanceof ChangeList) {
        return ((ChangeList)o1).getDescription().compareToIgnoreCase(((ChangeList)o2).getDescription());
      }
      if (o1 instanceof VirtualFile && o2 instanceof VirtualFile) {
        return ((VirtualFile)o1).getName().compareToIgnoreCase(((VirtualFile)o2).getName());
      }
      if (o1 instanceof FilePath && o2 instanceof FilePath) {
        return ((FilePath)o1).getPath().compareToIgnoreCase(((FilePath)o2).getPath());
      }
      if (o1 instanceof FilePath) {
        return -1;
      }
      if (o2 instanceof FilePath) {
        return 1;
      }
      return 0;
    }
  }
);
  setModel(model);
  expandPath(new TreePath(((DefaultMutableTreeNode)getModel().getRoot()).getPath()));
  restoreState();
}
