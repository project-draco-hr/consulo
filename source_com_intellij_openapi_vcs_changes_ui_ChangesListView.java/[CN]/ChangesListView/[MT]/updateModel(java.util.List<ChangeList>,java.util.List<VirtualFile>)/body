{
  if (!myTreeStateFrozen) {
    myTreeState=TreeState.createOn(this,myRoot);
  }
  myRoot=new DefaultMutableTreeNode("root");
  final DefaultTreeModel model=new DefaultTreeModel(myRoot);
  for (  ChangeList list : changeLists) {
    DefaultMutableTreeNode listNode=new DefaultMutableTreeNode(list);
    model.insertNodeInto(listNode,myRoot,0);
    for (    Change change : list.getChanges()) {
      model.insertNodeInto(new DefaultMutableTreeNode(change),listNode,0);
    }
  }
  if (!unversionedFiles.isEmpty()) {
    DefaultMutableTreeNode unversionedNode=new DefaultMutableTreeNode("Unversioned Files");
    model.insertNodeInto(unversionedNode,myRoot,myRoot.getChildCount());
    for (    VirtualFile file : unversionedFiles) {
      model.insertNodeInto(new DefaultMutableTreeNode(file),unversionedNode,0);
    }
  }
  TreeUtil.sort(myRoot,new Comparator(){
    public int compare(    final Object n1,    final Object n2){
      Object o1=((DefaultMutableTreeNode)n1).getUserObject();
      Object o2=((DefaultMutableTreeNode)n2).getUserObject();
      if (o1 instanceof Change && o2 instanceof Change) {
        return getFilePath((Change)o1).getName().compareToIgnoreCase(getFilePath((Change)o2).getName());
      }
      if (o1 instanceof ChangeList && o2 instanceof ChangeList) {
        return ((ChangeList)o1).getDescription().compareToIgnoreCase(((ChangeList)o2).getDescription());
      }
      if (o1 instanceof VirtualFile && o2 instanceof VirtualFile) {
        return ((VirtualFile)o1).getName().compareToIgnoreCase(((VirtualFile)o2).getName());
      }
      return 0;
    }
  }
);
  setModel(model);
  expandPath(new TreePath(myRoot.getPath()));
  if (myTreeState != null) {
    myTreeState.applyTo(this,myRoot);
  }
}
