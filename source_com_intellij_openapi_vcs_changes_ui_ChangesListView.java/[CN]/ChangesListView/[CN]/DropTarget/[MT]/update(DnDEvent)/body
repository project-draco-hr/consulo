{
  aEvent.hideHighlighter();
  aEvent.setDropPossible(false,"");
  Object attached=aEvent.getAttachedObject();
  if (!(attached instanceof ChangeListDragBean))   return false;
  final ChangeListDragBean dragBean=(ChangeListDragBean)attached;
  if (dragBean.getView() != ChangesListView.this)   return false;
  if (dragBean.getChanges().length == 0 && dragBean.getUnversionedFiles().size() == 0)   return false;
  dragBean.setTargetList(null);
  RelativePoint dropPoint=aEvent.getRelativePoint();
  Point onTree=dropPoint.getPoint(ChangesListView.this);
  final TreePath dropPath=getPathForLocation(onTree.x,onTree.y);
  if (dropPath == null)   return false;
  Object object;
  ChangesBrowserNode dropNode=(ChangesBrowserNode)dropPath.getLastPathComponent();
  do {
    if (dropNode == null || dropNode.isRoot())     return false;
    object=dropNode.getUserObject();
    if (object instanceof ChangeList)     break;
    dropNode=(ChangesBrowserNode)dropNode.getParent();
  }
 while (true);
  LocalChangeList dropList=(LocalChangeList)object;
  final Change[] changes=dragBean.getChanges();
  for (  Change change : dropList.getChanges()) {
    for (    Change incomingChange : changes) {
      if (change == incomingChange)       return false;
    }
  }
  final Rectangle tableCellRect=getPathBounds(new TreePath(dropNode.getPath()));
  aEvent.setHighlighting(new RelativeRectangle(ChangesListView.this,tableCellRect),DnDEvent.DropTargetHighlightingType.RECTANGLE);
  aEvent.setDropPossible(true,null);
  dragBean.setTargetList(dropList);
  return false;
}
