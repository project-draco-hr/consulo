{
  super(project,true);
  myProject=project;
  setTitle("Open Task");
  myTaskName=new TextFieldWithAutoCompletion<Task>(project,new MyTextFieldWithAutoCompletionListProvider(project){
    protected void handleInsert(    @NotNull final Task task){
      mySelectedTask=task;
      taskChanged();
    }
  }
,false);
  myEditorPanel.add(myTaskName);
  myTaskName.getDocument().addDocumentListener(new DocumentAdapter(){
    @Override public void documentChanged(    DocumentEvent e){
      taskChanged();
    }
  }
);
  final Keymap keymap=KeymapManager.getInstance().getActiveKeymap();
  final Shortcut[] shortcuts=keymap.getShortcuts("CodeCompletion");
  if (shortcuts.length > 0) {
    myNameLabel.setText("Enter task name or press " + KeymapUtil.getShortcutText(shortcuts[0]) + " to choose an existing task:");
  }
  myNameLabel.setLabelFor(myTaskName);
  TaskManagerImpl manager=(TaskManagerImpl)TaskManager.getManager(project);
  ControlBinder binder=new ControlBinder(manager.getState());
  binder.bindAnnotations(this);
  binder.reset();
  myVcsEnabled=manager.isVcsEnabled();
  myMarkAsInProgress=manager.getState().markAsInProgress;
  myMarkAsInProgressBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (isMarkAsInProgressApplicable()) {
        myMarkAsInProgress=myMarkAsInProgressBox.isSelected();
      }
    }
  }
);
  taskChanged();
  init();
  if (manager.getState().updateEnabled) {
    manager.updateIssues(new Runnable(){
      public void run(){
        SwingUtilities.invokeLater(new Runnable(){
          public void run(){
            myUpdateIcon.suspend();
            myUpdateIcon.setVisible(false);
            myUpdateLabel.setText("");
          }
        }
);
      }
    }
);
  }
 else {
    myUpdateIcon.setVisible(false);
    myUpdateLabel.setText("");
  }
}
