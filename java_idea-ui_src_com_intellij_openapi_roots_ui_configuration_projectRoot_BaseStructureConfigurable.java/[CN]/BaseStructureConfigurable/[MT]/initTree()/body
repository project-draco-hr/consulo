{
  if (myWasTreeInitialized)   return;
  myWasTreeInitialized=true;
  super.initTree();
  new TreeSpeedSearch(myTree,new Convertor<TreePath,String>(){
    public String convert(    final TreePath treePath){
      return ((MyNode)treePath.getLastPathComponent()).getDisplayName();
    }
  }
,true);
  ToolTipManager.sharedInstance().registerComponent(myTree);
  myTree.setCellRenderer(new ColoredTreeCellRenderer(){
    public void customizeCellRenderer(    JTree tree,    Object value,    boolean selected,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      if (value instanceof MyNode) {
        final MyNode node=(MyNode)value;
        final NamedConfigurable namedConfigurable=node.getConfigurable();
        if (namedConfigurable == null) {
          return;
        }
        final String displayName=node.getDisplayName();
        final Icon icon=namedConfigurable.getIcon(expanded);
        setIcon(icon);
        setToolTipText(null);
        setFont(UIUtil.getTreeFont());
        SimpleTextAttributes textAttributes=selected && hasFocus ? SimpleTextAttributes.SELECTED_SIMPLE_CELL_ATTRIBUTES : SimpleTextAttributes.REGULAR_ATTRIBUTES;
        if (node.isDisplayInBold()) {
          textAttributes=SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES;
        }
 else         if (namedConfigurable instanceof ProjectStructureElementConfigurable) {
          final ProjectStructureElement projectStructureElement=((ProjectStructureElementConfigurable)namedConfigurable).getProjectStructureElement();
          if (projectStructureElement != null) {
            final ProjectStructureDaemonAnalyzer daemonAnalyzer=myContext.getDaemonAnalyzer();
            final boolean unused=daemonAnalyzer.isUnused(projectStructureElement);
            final ProjectStructureProblemsHolderImpl problemsHolder=daemonAnalyzer.getProblemsHolder(projectStructureElement);
            if (problemsHolder == null) {
              daemonAnalyzer.queueUpdate(projectStructureElement,true,false);
            }
            final ProjectStructureProblemType.Severity level=problemsHolder != null ? problemsHolder.getSeverity() : null;
            final boolean invalid=level != null;
            if (unused || invalid) {
              Color fg=unused ? UIUtil.getInactiveTextColor() : selected && hasFocus ? UIUtil.getTreeSelectionForeground() : UIUtil.getTreeForeground();
              textAttributes=new SimpleTextAttributes(invalid ? SimpleTextAttributes.STYLE_WAVED : SimpleTextAttributes.STYLE_PLAIN,fg,level == ProjectStructureProblemType.Severity.ERROR ? Color.RED : Color.GRAY);
              String text=problemsHolder != null ? problemsHolder.composeTooltipMessage() : "";
              if (unused) {
                text+=ProjectBundle.message("project.roots.tooltip.unused",displayName);
              }
              setToolTipText(text);
            }
          }
        }
        append(displayName,textAttributes);
      }
    }
  }
);
}
