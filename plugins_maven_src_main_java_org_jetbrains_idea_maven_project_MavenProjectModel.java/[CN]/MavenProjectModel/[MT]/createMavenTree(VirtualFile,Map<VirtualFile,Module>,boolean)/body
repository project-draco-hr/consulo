{
  ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
  if (indicator != null) {
    indicator.setText2(FileUtil.toSystemDependentName(pomFile.getPath()));
  }
  final Module linkedModule=unprocessedFiles.get(pomFile);
  unprocessedFiles.remove(pomFile);
  MavenProject mavenProject;
  try {
    mavenProject=mavenEmbedder.readProjectWithDependencies(new File(pomFile.getPath()),createTransferListener());
  }
 catch (  Exception e) {
    LOG.info(e);
    return null;
  }
  if (mavenProject == null) {
    LOG.info("Cannot load " + pomFile.getPath());
    return null;
  }
  imported|=linkedModule == null;
  final Node node=new Node(pomFile,mavenProject,imported ? null : linkedModule);
  for (  Object moduleName : mavenProject.getModules()) {
    VirtualFile childFile=getMavenModuleFile(pomFile,(String)moduleName);
    if (childFile != null) {
      final Node existingRoot=findExistingRoot(childFile);
      if (existingRoot != null) {
        rootProjects.remove(existingRoot);
        node.mavenModules.add(existingRoot);
      }
 else       if (imported || unprocessedFiles.containsKey(childFile)) {
        Node module=createMavenTree(childFile,unprocessedFiles,imported);
        if (module != null) {
          node.mavenModules.add(module);
        }
      }
    }
 else {
      LOG.warn("Cannot find maven module " + moduleName);
    }
  }
  return node;
}
