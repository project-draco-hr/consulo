{
  final Set<PsiElement> filesOrDirs=new HashSet<PsiElement>();
  for (  PsiElement element : elements) {
    if (element instanceof PsiPackage)     continue;
    if (MoveClassesOrPackagesHandlerBase.isPackageOrDirectory(element)) {
      filesOrDirs.add(element);
    }
 else {
      final PsiFile containingFile=element.getContainingFile();
      if (containingFile != null) {
        filesOrDirs.add(containingFile);
      }
    }
  }
  Form[] forms=Form.DATA_KEY.getData(dataContext);
  LOG.assertTrue(forms != null);
  PsiClass[] classesToMove=new PsiClass[forms.length];
  PsiFile[] filesToMove=new PsiFile[forms.length];
  for (int i=0; i < forms.length; i++) {
    classesToMove[i]=forms[i].getClassToBind();
    if (classesToMove[i] != null) {
      filesOrDirs.add(classesToMove[i].getContainingFile());
    }
    filesToMove[i]=forms[i].getFormFiles()[0];
    if (filesToMove[i] != null) {
      filesOrDirs.add(filesToMove[i]);
    }
  }
  final PsiElement initialTargetElement=LangDataKeys.TARGET_PSI_ELEMENT.getData(dataContext);
  MoveFilesOrDirectoriesUtil.doMove(project,filesOrDirs.toArray(new PsiElement[filesOrDirs.size()]),new PsiElement[]{initialTargetElement},null);
}
