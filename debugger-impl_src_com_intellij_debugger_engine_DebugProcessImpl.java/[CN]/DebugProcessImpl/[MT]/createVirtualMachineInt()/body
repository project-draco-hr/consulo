{
  try {
    if (myArguments != null) {
      throw new IOException(DebuggerBundle.message("error.debugger.already.listening"));
    }
    final String address=myConnection.getAddress();
    if (myConnection.isServerMode()) {
      ListeningConnector connector=(ListeningConnector)findConnector(myConnection.isUseSockets() ? SOCKET_LISTENING_CONNECTOR_NAME : SHMEM_LISTENING_CONNECTOR_NAME);
      if (connector == null) {
        throw new CantRunException(DebuggerBundle.message("error.debug.connector.not.found",DebuggerBundle.getTransportName(myConnection)));
      }
      myArguments=connector.defaultArguments();
      if (myArguments == null) {
        throw new CantRunException(DebuggerBundle.message("error.no.debug.listen.port"));
      }
      if (address == null) {
        throw new CantRunException(DebuggerBundle.message("error.no.debug.listen.port"));
      }
      Connector.Argument portArg=myConnection.isUseSockets() ? (Connector.Argument)myArguments.get("port") : (Connector.Argument)myArguments.get("name");
      if (portArg != null) {
        portArg.setValue(address);
      }
      final Connector.Argument timeoutArg=(Connector.Argument)myArguments.get("timeout");
      if (timeoutArg != null) {
        timeoutArg.setValue("0");
      }
      connector.startListening(myArguments);
      myDebugProcessDispatcher.getMulticaster().connectorIsReady();
      try {
        return connector.accept(myArguments);
      }
  finally {
        if (myArguments != null) {
          try {
            connector.stopListening(myArguments);
          }
 catch (          IllegalArgumentException e) {
          }
catch (          IllegalConnectorArgumentsException e) {
          }
        }
      }
    }
 else {
      AttachingConnector connector=(AttachingConnector)findConnector(myConnection.isUseSockets() ? SOCKET_ATTACHING_CONNECTOR_NAME : SHMEM_ATTACHING_CONNECTOR_NAME);
      if (connector == null) {
        throw new CantRunException(DebuggerBundle.message("error.debug.connector.not.found",DebuggerBundle.getTransportName(myConnection)));
      }
      myArguments=connector.defaultArguments();
      if (myConnection.isUseSockets()) {
        final Connector.Argument hostnameArg=(Connector.Argument)myArguments.get("hostname");
        if (hostnameArg != null && myConnection.getHostName() != null) {
          hostnameArg.setValue(myConnection.getHostName());
        }
        if (address == null) {
          throw new CantRunException(DebuggerBundle.message("error.no.debug.attach.port"));
        }
        final Connector.Argument portArg=(Connector.Argument)myArguments.get("port");
        if (portArg != null) {
          portArg.setValue(address);
        }
      }
 else {
        if (address == null) {
          throw new CantRunException(DebuggerBundle.message("error.no.shmem.address"));
        }
        final Connector.Argument nameArg=(Connector.Argument)myArguments.get("name");
        if (nameArg != null) {
          nameArg.setValue(address);
        }
      }
      final Connector.Argument timeoutArg=(Connector.Argument)myArguments.get("timeout");
      if (timeoutArg != null) {
        timeoutArg.setValue("0");
      }
      myDebugProcessDispatcher.getMulticaster().connectorIsReady();
      try {
        if (SOCKET_ATTACHING_CONNECTOR_NAME.equals(connector.name()) && Patches.SUN_BUG_338675) {
          String portString=myConnection.getAddress();
          String hostString=myConnection.getHostName();
          if (hostString == null || hostString.length() == 0) {
            hostString="localhost";
          }
          hostString=hostString + ":";
          final TransportServiceWrapper transportServiceWrapper=TransportServiceWrapper.getTransportService(connector.transport());
          myConnectionService=transportServiceWrapper.attach(hostString + portString);
          return myConnectionService.createVirtualMachine();
        }
 else {
          return connector.attach(myArguments);
        }
      }
 catch (      IllegalArgumentException e) {
        throw new CantRunException(e.getLocalizedMessage());
      }
    }
  }
 catch (  IOException e) {
    throw new ExecutionException(processError(e),e);
  }
catch (  IllegalConnectorArgumentsException e) {
    throw new ExecutionException(processError(e),e);
  }
 finally {
    myArguments=null;
    myConnectionService=null;
  }
}
