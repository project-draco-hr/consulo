{
  if (!(refEntity instanceof RefField)) {
    return null;
  }
  if (globalInspectionContext.isSuppressed(refEntity,getShortName())) {
    return null;
  }
  final RefField refField=(RefField)refEntity;
  final PsiField field=refField.getElement();
  if (field == null) {
    return null;
  }
  final PsiType type=field.getType();
  if (!type.equals(PsiType.BOOLEAN)) {
    return null;
  }
  final RefClass fieldClass=refField.getOwnerClass();
  final Collection<RefElement> inReferences=refField.getInReferences();
  final RefUtil refUtil=RefUtil.getInstance();
  final Set<RefClass> classesUsed=new HashSet<RefClass>();
  for (  RefElement inReference : inReferences) {
    final RefClass referringClass=refUtil.getOwnerClass(inReference);
    if (referringClass == null) {
      return null;
    }
    if (referringClass.equals(fieldClass)) {
      return null;
    }
    classesUsed.add(referringClass);
    if (classesUsed.size() > 1) {
      return null;
    }
  }
  if (classesUsed.size() != 1) {
    return null;
  }
  final RefClass referencingClass=classesUsed.iterator().next();
  final String errorString="Field " + refEntity.getName() + " is only accessed in subclass "+ referencingClass.getName();
  return new CommonProblemDescriptor[]{inspectionManager.createProblemDescriptor(errorString)};
}
