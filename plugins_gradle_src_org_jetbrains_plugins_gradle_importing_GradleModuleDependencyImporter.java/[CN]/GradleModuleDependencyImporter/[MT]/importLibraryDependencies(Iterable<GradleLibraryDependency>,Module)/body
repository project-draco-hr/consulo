{
  final LibraryTable libraryTable=myPlatformFacade.getProjectLibraryTable(module.getProject());
  final Map<GradleLibrary,Library> gradle2intellij=new HashMap<GradleLibrary,Library>();
  final Set<GradleLibrary> librariesToCreate=new HashSet<GradleLibrary>();
  for (  final GradleLibraryDependency dependency : dependencies) {
    Library library=libraryTable.getLibraryByName(dependency.getName());
    if (library == null) {
      librariesToCreate.add(dependency.getTarget());
    }
 else {
      gradle2intellij.put(dependency.getTarget(),library);
    }
  }
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      if (!librariesToCreate.isEmpty()) {
        final LibraryTable.ModifiableModel projectLibraryModel=libraryTable.getModifiableModel();
        try {
          for (          GradleLibrary library : librariesToCreate) {
            final Library intellijLibrary=projectLibraryModel.createLibrary(library.getName());
            gradle2intellij.put(library,intellijLibrary);
            final Library.ModifiableModel libraryModel=intellijLibrary.getModifiableModel();
            try {
              registerPaths(library,libraryModel);
            }
  finally {
              libraryModel.commit();
            }
          }
        }
  finally {
          projectLibraryModel.commit();
        }
      }
      ModuleRootManager moduleRootManager=ModuleRootManager.getInstance(module);
      final ModifiableRootModel moduleRootModel=moduleRootManager.getModifiableModel();
      try {
        for (        GradleLibraryDependency dependency : dependencies) {
          LibraryOrderEntry orderEntry=moduleRootModel.addLibraryEntry(gradle2intellij.get(dependency.getTarget()));
          orderEntry.setExported(dependency.isExported());
          orderEntry.setScope(dependency.getScope());
        }
      }
  finally {
        moduleRootModel.commit();
      }
    }
  }
);
}
