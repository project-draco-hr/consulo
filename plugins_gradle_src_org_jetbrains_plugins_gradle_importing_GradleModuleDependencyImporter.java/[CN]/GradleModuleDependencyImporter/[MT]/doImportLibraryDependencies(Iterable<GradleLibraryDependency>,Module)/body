{
  final LibraryTable libraryTable=myPlatformFacade.getProjectLibraryTable(module.getProject());
  final Map<GradleLibrary,Library> gradle2intellij=new HashMap<GradleLibrary,Library>();
  for (  final GradleLibraryDependency dependency : dependencies) {
    Library library=libraryTable.getLibraryByName(dependency.getName());
    if (library != null) {
      gradle2intellij.put(dependency.getTarget(),library);
    }
 else {
      GradleLog.LOG.warn(String.format("Detected situation when target library for the gradle-local library dependency doesn't exist. Dependency: %s",dependency));
    }
  }
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      ModuleRootManager moduleRootManager=ModuleRootManager.getInstance(module);
      final ModifiableRootModel moduleRootModel=moduleRootManager.getModifiableModel();
      final GradleProjectEntityImportListener publisher=module.getProject().getMessageBus().syncPublisher(GradleProjectEntityImportListener.TOPIC);
      try {
        for (        GradleLibraryDependency dependency : dependencies) {
          final Library library=gradle2intellij.get(dependency.getTarget());
          if (library == null) {
            continue;
          }
          publisher.onImportStart(library);
          LibraryOrderEntry orderEntry=moduleRootModel.addLibraryEntry(library);
          orderEntry.setExported(dependency.isExported());
          orderEntry.setScope(dependency.getScope());
        }
      }
  finally {
        moduleRootModel.commit();
        for (        GradleLibraryDependency dependency : dependencies) {
          if (dependency != null) {
            publisher.onImportEnd(dependency);
          }
        }
      }
    }
  }
);
}
