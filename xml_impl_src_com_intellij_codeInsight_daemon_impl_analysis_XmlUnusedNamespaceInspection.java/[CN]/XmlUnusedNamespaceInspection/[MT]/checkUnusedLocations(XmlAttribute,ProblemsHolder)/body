{
  if (XmlUtil.XML_SCHEMA_INSTANCE_URI.equals(attribute.getNamespace())) {
    if (XmlUtil.NO_NAMESPACE_SCHEMA_LOCATION_ATT.equals(attribute.getLocalName())) {
      XmlRefCountHolder refCountHolder=XmlRefCountHolder.getRefCountHolder(attribute);
      if (refCountHolder == null || refCountHolder.isInUse(""))       return;
      holder.registerProblem(attribute,NAMESPACE_LOCATION_IS_NEVER_USED,ProblemHighlightType.LIKE_UNUSED_SYMBOL,new RemoveNamespaceLocationFix(""));
    }
 else     if (XmlUtil.SCHEMA_LOCATION_ATT.equals(attribute.getLocalName())) {
      XmlAttributeValue value=attribute.getValueElement();
      if (value == null)       return;
      PsiReference[] references=value.getReferences();
      for (int i=0, referencesLength=references.length; i < referencesLength; i+=2) {
        PsiReference reference=references[i];
        String ns=getNamespaceFromReference(reference);
        if (ArrayUtil.indexOf(attribute.getParent().knownNamespaces(),ns) == -1) {
          holder.registerProblemForReference(reference,ProblemHighlightType.LIKE_UNUSED_SYMBOL,NAMESPACE_LOCATION_IS_NEVER_USED,new RemoveNamespaceLocationFix(ns));
          if (i + 1 < referencesLength) {
            holder.registerProblemForReference(references[i + 1],ProblemHighlightType.LIKE_UNUSED_SYMBOL,NAMESPACE_LOCATION_IS_NEVER_USED,new RemoveNamespaceLocationFix(ns));
          }
        }
      }
    }
  }
}
