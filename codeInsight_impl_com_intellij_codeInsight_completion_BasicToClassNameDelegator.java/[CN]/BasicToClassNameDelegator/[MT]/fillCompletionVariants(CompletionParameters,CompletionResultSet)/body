{
  if (parameters.getCompletionType() != CompletionType.BASIC)   return true;
  final PsiFile file=parameters.getOriginalFile();
  if (!(file instanceof PsiJavaFile))   return true;
  final PsiElement position=parameters.getPosition();
  if (!(position.getParent() instanceof PsiJavaCodeReferenceElement))   return true;
  final String s=result.getPrefixMatcher().getPrefix();
  if (StringUtil.isEmpty(s) || !Character.isUpperCase(s.charAt(0)))   return true;
  final Ref<Boolean> empty=Ref.create(true);
  CompletionService.getCompletionService().getVariantsFromContributors(EP_NAME,parameters,this,new Consumer<LookupElement>(){
    public void consume(    final LookupElement lookupElement){
      empty.set(false);
      result.addElement(lookupElement);
    }
  }
);
  final CompletionParameters classParams;
  final int invocationCount=parameters.getInvocationCount();
  final int offset=parameters.getOffset();
  if (empty.get().booleanValue()) {
    classParams=new CompletionParameters(position,file,CompletionType.CLASS_NAME,offset,invocationCount);
  }
 else   if (invocationCount > 1) {
    classParams=new CompletionParameters(position,file,CompletionType.CLASS_NAME,offset,invocationCount - 1);
  }
 else {
    return false;
  }
  CompletionService.getCompletionService().getVariantsFromContributors(EP_NAME,classParams,null,new Consumer<LookupElement>(){
    public void consume(    final LookupElement lookupElement){
      result.addElement(lookupElement);
    }
  }
);
  return false;
}
