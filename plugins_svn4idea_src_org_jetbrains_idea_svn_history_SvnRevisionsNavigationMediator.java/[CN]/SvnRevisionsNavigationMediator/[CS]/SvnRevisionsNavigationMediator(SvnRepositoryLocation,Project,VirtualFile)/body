{
  myProject=project;
  final SvnVcs vcs=SvnVcs.getInstance(project);
  myChunks=new LinkedList<List<Fragment>>();
  SVNRepository repository=null;
  final SVNURL repositoryRoot;
  final long youngRevision;
  try {
    repository=vcs.createRepository(location.getURL());
    youngRevision=repository.getLatestRevision();
    repositoryRoot=repository.getRepositoryRoot(false);
  }
 catch (  SVNException e) {
    throw new VcsException(e);
  }
 finally {
    if (repository != null) {
      repository.closeSession();
    }
  }
  final Iterator<ChangesBunch> visualIterator=CommittedChangesCache.getInstance(project).getBackBunchedIterator(vcs,vcsRoot,location,CHUNK_SIZE);
  final Iterator<ChangesBunch> internalIterator=LoadedRevisionsCacheManager.getInstance(project).iterator(location.getURL());
  myInternallyCached=(internalIterator == null) ? null : new InternallyCachedProvider(internalIterator,myProject);
  myVisuallyCached=(visualIterator == null) ? null : new VisuallyCachedProvider(visualIterator,myProject,location);
  myChunkFactory=new BunchFactory(myInternallyCached,myVisuallyCached,new LiveProvider(vcs,location,youngRevision,new SvnLogUtil(myProject,vcs,location,repositoryRoot)));
  myCurrentIdx=-1;
  goBack();
}
