{
  final Application application=ApplicationManager.getApplication();
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      if (application.isDisposed())       return;
      final ApplicationAdapter listener=new ApplicationAdapter(){
        @Override public void beforeWriteActionStart(        Object action){
          if (!progressIndicator.isCanceled()) {
            progressIndicator.cancel();
            readTask.onCanceled(progressIndicator);
          }
        }
      }
;
      application.addApplicationListener(listener);
      try {
        executor.execute(new Runnable(){
          @Override public void run(){
            boolean continued=false;
            try {
              final ReadTask.Continuation continuation=runUnderProgress(progressIndicator,readTask);
              continued=continuation != null;
              if (continuation != null) {
                application.invokeLater(new Runnable(){
                  @Override public void run(){
                    application.removeApplicationListener(listener);
                    if (!progressIndicator.isCanceled()) {
                      continuation.getAction().run();
                    }
                  }
                }
,continuation.getModalityState());
              }
            }
  finally {
              if (!continued) {
                application.removeApplicationListener(listener);
              }
            }
          }
        }
);
      }
 catch (      RuntimeException e) {
        application.removeApplicationListener(listener);
        throw e;
      }
catch (      Error e) {
        application.removeApplicationListener(listener);
        throw e;
      }
    }
  }
);
}
