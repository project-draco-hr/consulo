{
  if (!ApplicationManager.getApplication().isUnitTestMode()) {
    myTimeTrackingTimer=UIUtil.createNamedTimer("TaskManager time tracking",TIME_TRACKING_TIME_UNIT,new ActionListener(){
      @Override public void actionPerformed(      final ActionEvent e){
        final LocalTask activeTask=myTaskManager.getActiveTask();
        if (isTimeTrackingAutoMode()) {
          activeTask.setTimeSpent(activeTask.getTimeSpent() + TIME_TRACKING_TIME_UNIT);
          getState().totallyTimeSpent+=TIME_TRACKING_TIME_UNIT;
        }
 else {
          if (activeTask.isRunning()) {
            activeTask.setTimeSpent(activeTask.getTimeSpent() + TIME_TRACKING_TIME_UNIT);
            getState().totallyTimeSpent+=TIME_TRACKING_TIME_UNIT;
          }
        }
      }
    }
);
    StartupManager.getInstance(myProject).registerStartupActivity(new Runnable(){
      public void run(){
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          @Override public void run(){
            startTimeTrackingTimer();
          }
        }
);
      }
    }
);
    myIdleAlarm=new Alarm(Alarm.ThreadToUse.SWING_THREAD,myProject);
    IdeEventQueue.getInstance().addActivityListener(new Runnable(){
      @Override public void run(){
        final IdeFrame frame=IdeFocusManager.getGlobalInstance().getLastFocusedFrame();
        if (frame == null)         return;
        final Project project=frame.getProject();
        if (project == null || !myProject.equals(project))         return;
        startTimeTrackingTimer();
      }
    }
,myProject);
  }
}
