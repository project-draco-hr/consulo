{
  final PsiElement scope=parameter.getDeclarationScope();
  if (scope instanceof PsiMethod) {
    final PsiMethod method=(PsiMethod)scope;
    final PsiParameter[] parameters=method.getParameterList().getParameters();
    final ParameterInfoImpl[] info=new ParameterInfoImpl[parameters.length - 1];
    for (int i=0; i < parameters.length; i++) {
      PsiParameter psiParameter=parameters[i];
      if (psiParameter == parameter)       continue;
      info[i]=new ParameterInfoImpl(i,psiParameter.getName(),psiParameter.getType());
    }
    final ChangeSignatureProcessor cp=new ChangeSignatureProcessor(project,method,false,VisibilityUtil.getVisibilityModifier(method.getModifierList()),method.getName(),method.getReturnType(),info){
      @Override protected void performRefactoring(      UsageInfo[] usages){
        final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(project);
        final PsiElement newDeclaration=moveDeclaration(elementFactory,localName,parameter,initializer,action,references);
        super.performRefactoring(usages);
        positionCaretToDeclaration(project,newDeclaration.getContainingFile(),newDeclaration);
      }
    }
;
    cp.run();
  }
  return null;
}
