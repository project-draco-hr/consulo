{
  final PsiElement scope=parameter.getDeclarationScope();
  if (scope instanceof PsiMethod) {
    final PsiMethod method=(PsiMethod)scope;
    final PsiParameter[] parameters=method.getParameterList().getParameters();
    final List<ParameterInfoImpl> info=new ArrayList<ParameterInfoImpl>();
    for (int i=0; i < parameters.length; i++) {
      PsiParameter psiParameter=parameters[i];
      if (psiParameter == parameter)       continue;
      info.add(new ParameterInfoImpl(i,psiParameter.getName(),psiParameter.getType()));
    }
    final ParameterInfoImpl[] newParams=info.toArray(new ParameterInfoImpl[info.size()]);
    final String visibilityModifier=VisibilityUtil.getVisibilityModifier(method.getModifierList());
    final ChangeSignatureProcessor cp=new ChangeSignatureProcessor(project,method,false,visibilityModifier,method.getName(),method.getReturnType(),newParams){
      @Override protected void performRefactoring(      UsageInfo[] usages){
        final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(project);
        final PsiElement newDeclaration=moveDeclaration(elementFactory,localName,parameter,initializer,action,references);
        super.performRefactoring(usages);
        positionCaretToDeclaration(project,newDeclaration.getContainingFile(),newDeclaration);
      }
    }
;
    cp.run();
  }
  return null;
}
