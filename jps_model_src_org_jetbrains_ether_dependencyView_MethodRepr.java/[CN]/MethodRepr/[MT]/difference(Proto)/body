{
  final Difference diff=super.difference(past);
  final Difference.Specifier<TypeRepr.AbstractType> excs=Difference.make(((MethodRepr)past).exceptions,exceptions);
  return new Diff(){
    @Override public int addedModifiers(){
      return diff.addedModifiers();
    }
    @Override public int removedModifiers(){
      return diff.removedModifiers();
    }
    @Override public boolean no(){
      return base() == NONE && !defaultAdded() && !defaultRemoved() && excs.unchanged();
    }
    @Override public boolean defaultAdded(){
      return hasValue() && !((MethodRepr)past).hasValue();
    }
    @Override public boolean defaultRemoved(){
      return !hasValue() && ((MethodRepr)past).hasValue();
    }
    @Override public Specifier<TypeRepr.AbstractType> exceptions(){
      return excs;
    }
    @Override public int base(){
      return diff.base();
    }
    @Override public boolean packageLocalOn(){
      return diff.packageLocalOn();
    }
    @Override public boolean hadValue(){
      return ((MethodRepr)past).hasValue();
    }
    @Override public boolean weakedAccess(){
      return diff.weakedAccess();
    }
  }
;
}
