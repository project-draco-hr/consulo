{
  final StringBuilder builder=new StringBuilder();
  final GrForClause clause=forStatement.getClause();
  if (clause instanceof GrForInClause) {
    final GrExpression expression=((GrForInClause)clause).getIteratedExpression();
    final GrVariable declaredVariable=clause.getDeclaredVariable();
    LOG.assertTrue(declaredVariable != null);
    builder.append("for(");
    writeVariableWithoutColon(builder,declaredVariable);
    builder.append(" : ");
    if (expression != null) {
      final ExpressionContext context=this.context.copy();
      expression.accept(new ExpressionGenerator(builder,context));
    }
    builder.append(")");
  }
 else {
    final GrTraditionalForClause cl=(GrTraditionalForClause)clause;
    final GrCondition initialization=cl.getInitialization();
    final GrExpression condition=cl.getCondition();
    final GrExpression update=cl.getUpdate();
    if (initialization instanceof GrParameter) {
      StringBuilder partBuilder=new StringBuilder();
      writeVariableWithoutColon(partBuilder,(GrParameter)initialization);
      final GrExpression initializer=((GrParameter)initialization).getDefaultInitializer();
      if (initializer != null) {
        final ExpressionContext partContext=context.copy();
        initializer.accept(new ExpressionGenerator(partBuilder,partContext));
        for (        String statement : partContext.myStatements) {
          builder.append(statement).append(", ");
        }
        builder.append(partBuilder);
      }
    }
 else {
      if (initialization != null) {
        StringBuilder partBuilder=new StringBuilder();
        final ExpressionContext partContext=this.context.copy();
        genForPart(builder,initialization,new CodeBlockGenerator(partBuilder,partContext));
      }
    }
    builder.append(";");
    if (condition != null) {
      genForPart(builder,condition);
    }
    builder.append(";");
    if (update != null) {
      genForPart(builder,update);
    }
    builder.append(")");
  }
  forStatement.getBody().accept(new CodeBlockGenerator(builder,context));
}
