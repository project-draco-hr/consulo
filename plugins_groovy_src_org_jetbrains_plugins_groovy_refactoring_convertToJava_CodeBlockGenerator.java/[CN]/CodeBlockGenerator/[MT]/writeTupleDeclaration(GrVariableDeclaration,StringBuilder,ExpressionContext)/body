{
  GrVariable[] variables=variableDeclaration.getVariables();
  final GrExpression tupleInitializer=variableDeclaration.getTupleDeclaration().getInitializerGroovy();
  if (tupleInitializer instanceof GrListOrMap) {
    for (    GrVariable variable : variables) {
      GenerationUtil.writeVariableSeparately(variable,builder,expressionContext);
      builder.append(";\n");
    }
  }
 else {
    final PsiType iteratorType=JavaPsiFacade.getElementFactory(context.project).createTypeFromText(CommonClassNames.JAVA_UTIL_ITERATOR,variableDeclaration);
    final String iteratorName=GenerationUtil.suggestVarName(iteratorType,variableDeclaration,expressionContext);
    builder.append("final ").append(CommonClassNames.JAVA_UTIL_ITERATOR).append(" ").append(iteratorName).append(" = ");
    GenerationUtil.invokeMethodByName(tupleInitializer,"iterator",GrExpression.EMPTY_ARRAY,GrNamedArgument.EMPTY_ARRAY,GrClosableBlock.EMPTY_ARRAY,new ExpressionGenerator(builder,expressionContext),variableDeclaration);
    final GrModifierList modifierList=variableDeclaration.getModifierList();
    for (    final GrVariable v : variables) {
      ModifierListGenerator.writeModifiers(builder,modifierList);
      final PsiType type=context.typeProvider.getVarType(v);
      GenerationUtil.writeType(builder,type,variableDeclaration);
      builder.append(" ").append(v.getName());
      builder.append(" = ").append(iteratorName).append(".hasNext() ? ").append(iteratorName).append(".next() : null;");
    }
  }
}
