{
  GrVariable[] variables=variableDeclaration.getVariables();
  final GrTypeElement typeElement=variableDeclaration.getTypeElementGroovy();
  PsiType type=null;
  Set<String> types=new HashSet<String>(variables.length);
  if (typeElement == null) {
    if (variables.length > 1) {
      for (      GrVariable variable : variables) {
        final GrExpression initializer=variable.getInitializerGroovy();
        if (initializer != null) {
          final PsiType varType=initializer.getType();
          if (varType != null) {
            types.add(getTypeText(varType));
            type=varType;
          }
        }
      }
      if (type == null) {
        type=PsiType.getJavaLangObject(variableDeclaration.getManager(),variableDeclaration.getResolveScope());
      }
    }
 else {
      type=getVarType(variables[0]);
    }
  }
 else {
    type=typeElement.getType();
  }
  if (types.size() > 1) {
    if (variableDeclaration.getParent() instanceof GrControlStatement) {
      expressionContext.setInsertCurlyBrackets();
    }
    for (    GrVariable variable : variables) {
      writeVariableSeparately(variable,builder,expressionContext);
      builder.append(";\n");
    }
    return;
  }
  GenerationUtil.writeType(builder,type);
  builder.append(" ");
  for (  GrVariable variable : variables) {
    writeVariableWithoutType(builder,expressionContext,variable);
    builder.append(", ");
  }
  if (variables.length > 0) {
    builder.delete(builder.length() - 2,builder.length());
  }
  builder.append(";");
}
