{
  if (!(value instanceof ObjectReference)) {
    return Collections.emptyMap();
  }
  final ObjectReference objRef=(ObjectReference)value;
  if (objRef instanceof ArrayReference || objRef instanceof ClassObjectReference || objRef instanceof ThreadReference|| objRef instanceof ThreadGroupReference|| objRef instanceof ClassLoaderReference) {
    return Collections.emptyMap();
  }
  final Map<Long,ValueMarkup> result=new HashMap<Long,ValueMarkup>();
  if (debugProcess.getVirtualMachineProxy().canGetInstanceInfo()) {
    for (    ObjectReference ref : getReferringObjects(objRef)) {
      if (!(ref instanceof ClassObjectReference)) {
        continue;
      }
      final ReferenceType refType=((ClassObjectReference)ref).reflectedType();
      if (!refType.isAbstract()) {
        continue;
      }
      for (      Field field : refType.fields()) {
        if (!(field.isStatic() && field.isFinal())) {
          continue;
        }
        final Value fieldValue=refType.getValue(field);
        if (!(fieldValue instanceof ObjectReference)) {
          continue;
        }
        final long id=((ObjectReference)fieldValue).uniqueID();
        final ValueMarkup markup=result.get(id);
        final String fieldName=field.name();
        final Color autoMarkupColor=ValueMarkup.getAutoMarkupColor();
        if (markup == null) {
          result.put(id,new ValueMarkup(fieldName,autoMarkupColor,createMarkupTooltipText(null,refType,fieldName)));
        }
 else {
          final String currentText=markup.getText();
          if (!currentText.contains(fieldName)) {
            final String currentTooltip=markup.getToolTipText();
            final String tooltip=createMarkupTooltipText(currentTooltip,refType,fieldName);
            result.put(id,new ValueMarkup(currentText + ", " + fieldName,autoMarkupColor,tooltip));
          }
        }
      }
    }
  }
  return result;
}
