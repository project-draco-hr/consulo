{
  if (params == null || params.length == 0)   return null;
  PsiManager instance=PsiManager.getInstance(context.getProject());
  final String paramResult=params[0].calculateResult(context).toString();
  if (paramResult == null)   return null;
  final boolean isAllowAbstract=isAllowAbstract(context,params);
  final PsiClass myBaseClass=JavaPsiFacade.getInstance(instance.getProject()).findClass(paramResult,GlobalSearchScope.allScope(context.getProject()));
  if (myBaseClass != null) {
    PsiSearchHelper helper=instance.getSearchHelper();
    final List<PsiClass> classes=new ArrayList<PsiClass>();
    ClassInheritorsSearch.search(myBaseClass,myBaseClass.getUseScope(),true).forEach(new PsiElementProcessorAdapter<PsiClass>(new PsiElementProcessor<PsiClass>(){
      public boolean execute(      PsiClass element){
        if (isAllowAbstract || !isAbstractOrInterface(element)) {
          classes.add(element);
        }
        return true;
      }
    }
));
    return classes;
  }
  return null;
}
