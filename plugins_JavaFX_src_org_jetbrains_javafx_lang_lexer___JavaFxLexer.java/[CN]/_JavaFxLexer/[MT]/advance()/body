{
  int zzInput;
  int zzAction;
  int zzCurrentPosL;
  int zzMarkedPosL;
  int zzEndReadL=zzEndRead;
  CharSequence zzBufferL=zzBuffer;
  char[] zzBufferArrayL=zzBufferArray;
  char[] zzCMapL=ZZ_CMAP;
  int[] zzTransL=ZZ_TRANS;
  int[] zzRowMapL=ZZ_ROWMAP;
  int[] zzAttrL=ZZ_ATTRIBUTE;
  while (true) {
    zzMarkedPosL=zzMarkedPos;
    zzAction=-1;
    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;
    zzState=ZZ_LEXSTATE[zzLexicalState];
    zzForAction: {
      while (true) {
        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++);
 else         if (zzAtEOF) {
          zzInput=YYEOF;
          break zzForAction;
        }
 else {
          zzCurrentPos=zzCurrentPosL;
          zzMarkedPos=zzMarkedPosL;
          boolean eof=zzRefill();
          zzCurrentPosL=zzCurrentPos;
          zzMarkedPosL=zzMarkedPos;
          zzBufferL=zzBuffer;
          zzEndReadL=zzEndRead;
          if (eof) {
            zzInput=YYEOF;
            break zzForAction;
          }
 else {
            zzInput=zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++);
          }
        }
        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
        if (zzNext == -1)         break zzForAction;
        zzState=zzNext;
        int zzAttributes=zzAttrL[zzState];
        if ((zzAttributes & 1) == 1) {
          zzAction=zzState;
          zzMarkedPosL=zzCurrentPosL;
          if ((zzAttributes & 8) == 8)           break zzForAction;
        }
      }
    }
    zzMarkedPos=zzMarkedPosL;
switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
case 65:
{
        return JavaFxTokenTypes.THIS_KEYWORD;
      }
case 119:
    break;
case 99:
{
    return JavaFxTokenTypes.REVERSE_KEYWORD;
  }
case 120:
break;
case 9:
{
return (JavaFxTokenTypes.DOT);
}
case 121:
break;
case 50:
{
yybegin(YYINITIAL);
myQuoteStack=myQuoteStack.enterBrace(STRING,false);
return JavaFxTokenTypes.LBRACE_STRING_LITERAL;
}
case 122:
break;
case 14:
{
zzMarkedPos=zzCurrentPos;
yybegin(CHAR);
}
case 123:
break;
case 116:
{
return JavaFxTokenTypes.INVALIDATE_KEYWORD;
}
case 124:
break;
case 104:
{
return JavaFxTokenTypes.INVERSE_KEYWORD;
}
case 125:
break;
case 107:
{
return JavaFxTokenTypes.ABSTRACT_KEYWORD;
}
case 126:
break;
case 31:
{
return (JavaFxTokenTypes.DIVEQ);
}
case 127:
break;
case 20:
{
return (JavaFxTokenTypes.SEMICOLON);
}
case 128:
break;
case 69:
{
return JavaFxTokenTypes.NULL_KEYWORD;
}
case 129:
break;
case 55:
{
return JavaFxTokenTypes.AND_KEYWORD;
}
case 130:
break;
case 98:
{
return JavaFxTokenTypes.TRIGGER_KEYWORD;
}
case 131:
break;
case 41:
{
return JavaFxTokenTypes.IF_KEYWORD;
}
case 132:
break;
case 57:
{
return JavaFxTokenTypes.FOR_KEYWORD;
}
case 133:
break;
case 59:
{
return JavaFxTokenTypes.NOT_KEYWORD;
}
case 134:
break;
case 16:
{
return (JavaFxTokenTypes.RBRACK);
}
case 135:
break;
case 30:
{
return JavaFxTokenTypes.C_STYLE_COMMENT;
}
case 136:
break;
case 70:
{
return JavaFxTokenTypes.INTO_KEYWORD;
}
case 137:
break;
case 113:
{
return JavaFxTokenTypes.EXCLUSIVE_KEYWORD;
}
case 138:
break;
case 101:
{
return JavaFxTokenTypes.FINALLY_KEYWORD;
}
case 139:
break;
case 110:
{
return JavaFxTokenTypes.OVERRIDE_KEYWORD;
}
case 140:
break;
case 68:
{
return JavaFxTokenTypes.ELSE_KEYWORD;
}
case 141:
break;
case 82:
{
return JavaFxTokenTypes.CATCH_KEYWORD;
}
case 142:
break;
case 35:
{
return (JavaFxTokenTypes.RANGE);
}
case 143:
break;
case 62:
{
return JavaFxTokenTypes.STEP_KEYWORD;
}
case 144:
break;
case 85:
{
return JavaFxTokenTypes.FIRST_KEYWORD;
}
case 145:
break;
case 28:
{
return JavaFxTokenTypes.NUMBER_LITERAL;
}
case 146:
break;
case 105:
{
return JavaFxTokenTypes.PACKAGE_KEYWORD;
}
case 147:
break;
case 75:
{
return JavaFxTokenTypes.MIXIN_KEYWORD;
}
case 148:
break;
case 27:
{
return JavaFxTokenTypes.DURATION_LITERAL;
}
case 149:
break;
case 17:
{
return (JavaFxTokenTypes.MINUS);
}
case 150:
break;
case 56:
{
return JavaFxTokenTypes.TRY_KEYWORD;
}
case 151:
break;
case 88:
{
return JavaFxTokenTypes.STATIC_KEYWORD;
}
case 152:
break;
case 29:
{
return JavaFxTokenTypes.END_OF_LINE_COMMENT;
}
case 153:
break;
case 15:
{
return (JavaFxTokenTypes.LBRACK);
}
case 154:
break;
case 4:
{
return JavaFxTokenTypes.IDENTIFIER;
}
case 155:
break;
case 26:
{
yybegin(YYINITIAL);
myQuoteStack=myQuoteStack.leaveQuote();
return JavaFxTokenTypes.RBRACE_STRING_LITERAL;
}
case 156:
break;
case 86:
{
return JavaFxTokenTypes.WHERE_KEYWORD;
}
case 157:
break;
case 54:
{
return JavaFxTokenTypes.MOD_KEYWORD;
}
case 158:
break;
case 111:
{
return JavaFxTokenTypes.POSTINIT_KEYWORD;
}
case 159:
break;
case 2:
{
return JavaFxTokenTypes.WHITE_SPACE;
}
case 160:
break;
case 33:
{
return (JavaFxTokenTypes.LTEQ);
}
case 161:
break;
case 83:
{
return JavaFxTokenTypes.CLASS_KEYWORD;
}
case 162:
break;
case 80:
{
return JavaFxTokenTypes.THROW_KEYWORD;
}
case 163:
break;
case 42:
{
return JavaFxTokenTypes.IN_KEYWORD;
}
case 164:
break;
case 61:
{
return JavaFxTokenTypes.VAR_KEYWORD;
}
case 165:
break;
case 60:
{
return JavaFxTokenTypes.DEF_KEYWORD;
}
case 166:
break;
case 22:
{
return (JavaFxTokenTypes.COLON);
}
case 167:
break;
case 45:
{
return (JavaFxTokenTypes.MINUSMINUS);
}
case 168:
break;
case 40:
{
return JavaFxTokenTypes.AT_KEYWORD;
}
case 169:
break;
case 37:
{
return (JavaFxTokenTypes.PLUSEQ);
}
case 170:
break;
case 71:
{
return JavaFxTokenTypes.INIT_KEYWORD;
}
case 171:
break;
case 72:
{
return JavaFxTokenTypes.LAST_KEYWORD;
}
case 172:
break;
case 6:
{
return (JavaFxTokenTypes.MULT);
}
case 173:
break;
case 52:
{
yybegin(YYINITIAL);
myQuoteStack=myQuoteStack.enterBrace(CHAR,false);
return JavaFxTokenTypes.LBRACE_STRING_LITERAL;
}
case 174:
break;
case 11:
{
zzMarkedPos=zzCurrentPos;
yybegin(STRING);
}
case 175:
break;
case 53:
{
return JavaFxTokenTypes.DOC_COMMENT;
}
case 176:
break;
case 92:
{
return JavaFxTokenTypes.TYPEOF_KEYWORD;
}
case 177:
break;
case 25:
{
yybegin(YYINITIAL);
return JavaFxTokenTypes.STRING_LITERAL;
}
case 178:
break;
case 114:
{
return JavaFxTokenTypes.PROTECTED_KEYWORD;
}
case 179:
break;
case 21:
{
return (JavaFxTokenTypes.COMMA);
}
case 180:
break;
case 23:
{
return (JavaFxTokenTypes.DELIM);
}
case 181:
break;
case 38:
{
return JavaFxTokenTypes.LOCALIZATION_PREFIX;
}
case 182:
break;
case 34:
{
return (JavaFxTokenTypes.GTEQ);
}
case 183:
break;
case 100:
{
return JavaFxTokenTypes.REPLACE_KEYWORD;
}
case 184:
break;
case 8:
{
return (JavaFxTokenTypes.GT);
}
case 185:
break;
case 94:
{
return JavaFxTokenTypes.DELETE_KEYWORD;
}
case 186:
break;
case 84:
{
return JavaFxTokenTypes.FALSE_KEYWORD;
}
case 187:
break;
case 1:
{
return JavaFxTokenTypes.BAD_CHARACTER;
}
case 188:
break;
case 46:
{
return (JavaFxTokenTypes.MINUSEQ);
}
case 189:
break;
case 112:
{
return JavaFxTokenTypes.ATTRIBUTE_KEYWORD;
}
case 190:
break;
case 106:
{
return JavaFxTokenTypes.PRIVATE_KEYWORD;
}
case 191:
break;
case 103:
{
return JavaFxTokenTypes.INDEXOF_KEYWORD;
}
case 192:
break;
case 90:
{
return JavaFxTokenTypes.ASSERT_KEYWORD;
}
case 193:
break;
case 117:
{
return JavaFxTokenTypes.PUBLIC_READ_KEYWORD;
}
case 194:
break;
case 24:
{
return (JavaFxTokenTypes.EQ);
}
case 195:
break;
case 49:
{
return (JavaFxTokenTypes.NOTEQ);
}
case 196:
break;
case 96:
{
return JavaFxTokenTypes.INSERT_KEYWORD;
}
case 197:
break;
case 78:
{
return JavaFxTokenTypes.BREAK_KEYWORD;
}
case 198:
break;
case 67:
{
return JavaFxTokenTypes.FROM_KEYWORD;
}
case 199:
break;
case 108:
{
return JavaFxTokenTypes.CONTINUE_KEYWORD;
}
case 200:
break;
case 66:
{
return JavaFxTokenTypes.TRUE_KEYWORD;
}
case 201:
break;
case 7:
{
return (JavaFxTokenTypes.LT);
}
case 202:
break;
case 79:
{
return JavaFxTokenTypes.BOUND_KEYWORD;
}
case 203:
break;
case 44:
{
return JavaFxTokenTypes.ON_KEYWORD;
}
case 204:
break;
case 118:
{
return JavaFxTokenTypes.PUBLIC_INIT_KEYWORD;
}
case 205:
break;
case 77:
{
return JavaFxTokenTypes.AFTER_KEYWORD;
}
case 206:
break;
case 12:
{
myQuoteStack.enterBrace();
return (JavaFxTokenTypes.LBRACE);
}
case 207:
break;
case 102:
{
return JavaFxTokenTypes.EXTENDS_KEYWORD;
}
case 208:
break;
case 64:
{
return JavaFxTokenTypes.THEN_KEYWORD;
}
case 209:
break;
case 58:
{
return JavaFxTokenTypes.NEW_KEYWORD;
}
case 210:
break;
case 91:
{
return JavaFxTokenTypes.BEFORE_KEYWORD;
}
case 211:
break;
case 47:
{
return (JavaFxTokenTypes.EQGT);
}
case 212:
break;
case 81:
{
return JavaFxTokenTypes.TWEEN_KEYWORD;
}
case 213:
break;
case 19:
{
return (JavaFxTokenTypes.RPAREN);
}
case 214:
break;
case 5:
{
return (JavaFxTokenTypes.DIV);
}
case 215:
break;
case 63:
{
return JavaFxTokenTypes.BIND_KEYWORD;
}
case 216:
break;
case 48:
{
return (JavaFxTokenTypes.EQEQ);
}
case 217:
break;
case 32:
{
return (JavaFxTokenTypes.MULTEQ);
}
case 218:
break;
case 10:
{
return (JavaFxTokenTypes.PLUS);
}
case 219:
break;
case 36:
{
return (JavaFxTokenTypes.PLUSPLUS);
}
case 220:
break;
case 76:
{
return JavaFxTokenTypes.SUPER_KEYWORD;
}
case 221:
break;
case 39:
{
return JavaFxTokenTypes.AS_KEYWORD;
}
case 222:
break;
case 13:
{
final int state=myQuoteStack.leaveBrace();
if (state == -1) {
return (JavaFxTokenTypes.RBRACE);
}
zzMarkedPos=zzCurrentPos;
yybegin(state);
}
case 223:
break;
case 3:
{
return JavaFxTokenTypes.INTEGER_LITERAL;
}
case 224:
break;
case 73:
{
return JavaFxTokenTypes.LAZY_KEYWORD;
}
case 225:
break;
case 93:
{
return JavaFxTokenTypes.RETURN_KEYWORD;
}
case 226:
break;
case 95:
{
return JavaFxTokenTypes.IMPORT_KEYWORD;
}
case 227:
break;
case 43:
{
return JavaFxTokenTypes.OR_KEYWORD;
}
case 228:
break;
case 74:
{
return JavaFxTokenTypes.WITH_KEYWORD;
}
case 229:
break;
case 87:
{
return JavaFxTokenTypes.WHILE_KEYWORD;
}
case 230:
break;
case 115:
{
return JavaFxTokenTypes.INSTANCEOF_KEYWORD;
}
case 231:
break;
case 109:
{
return JavaFxTokenTypes.FUNCTION_KEYWORD;
}
case 232:
break;
case 89:
{
return JavaFxTokenTypes.SIZEOF_KEYWORD;
}
case 233:
break;
case 51:
{
yybegin(YYINITIAL);
myQuoteStack.enterBrace();
return JavaFxTokenTypes.LBRACE_RBRACE_STRING_LITERAL;
}
case 234:
break;
case 97:
{
return JavaFxTokenTypes.PUBLIC_KEYWORD;
}
case 235:
break;
case 18:
{
return (JavaFxTokenTypes.LPAREN);
}
case 236:
break;
default :
if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
zzAtEOF=true;
zzDoEOF();
return null;
}
 else {
zzScanError(ZZ_NO_MATCH);
}
}
}
}
