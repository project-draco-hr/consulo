{
  final Map<String,FieldInfo> result=new HashMap<String,FieldInfo>();
  constructor.accept(new PsiRecursiveElementVisitor(){
    public void visitAssignmentExpression(    final PsiAssignmentExpression expression){
      super.visitAssignmentExpression(expression);
      if (expression.getLExpression() instanceof PsiReferenceExpression) {
        PsiReferenceExpression lExpr=(PsiReferenceExpression)expression.getLExpression();
        final PsiExpression rExpr=expression.getRExpression();
        final PsiElement psiElement=lExpr.resolve();
        if (psiElement instanceof PsiField && rExpr != null) {
          PsiField field=(PsiField)psiElement;
          if (myClass.getManager().areElementsEquivalent(field.getContainingClass(),myClass)) {
            FieldInfo info=result.get(field.getName());
            if (info == null) {
              info=new FieldInfo(field.getType());
              result.put(field.getName(),info);
            }
            Object constantValue=myClass.getManager().getConstantEvaluationHelper().computeConstantExpression(rExpr);
            final boolean isConstantInitializer=constantValue != null || ourNullPattern.accepts(rExpr);
            if (!isConstantInitializer) {
              final PsiExpression initializer;
              try {
                initializer=replaceParameterReferences(constructor.getParameterList(),(PsiExpression)rExpr.copy(),constructorArguments);
              }
 catch (              IncorrectOperationException e) {
                LOG.error(e);
                return;
              }
              info.initializer=initializer;
              info.replaceWithLocal=true;
            }
 else {
              info.initializer=(PsiExpression)rExpr.copy();
            }
          }
        }
      }
    }
  }
);
  return result;
}
