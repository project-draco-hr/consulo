{
  final PsiElementFactory factory=myClass.getManager().getElementFactory();
  final Map<PsiReferenceExpression,PsiVariable> referencesToReplace=new HashMap<PsiReferenceExpression,PsiVariable>();
  final Map<PsiTypeElement,PsiTypeElement> typesToReplace=new HashMap<PsiTypeElement,PsiTypeElement>();
  method.accept(new PsiRecursiveElementVisitor(){
    public void visitReferenceExpression(    final PsiReferenceExpression expression){
      super.visitReferenceExpression(expression);
      final PsiElement element=expression.resolve();
      if (element instanceof PsiField) {
        PsiField field=(PsiField)element;
        if (field.getContainingClass() == method.getContainingClass()) {
          FieldInfo info=fieldMap.get(field.getName());
          if (info != null && info.replaceWithLocal) {
            referencesToReplace.put(expression,info.localVar);
          }
        }
      }
    }
    public void visitTypeElement(    final PsiTypeElement typeElement){
      super.visitTypeElement(typeElement);
      if (typeElement.getType() instanceof PsiClassType) {
        PsiClassType classType=(PsiClassType)typeElement.getType();
        PsiClass psiClass=classType.resolve();
        if (psiClass instanceof PsiTypeParameter) {
          PsiClass containingClass=method.getContainingClass();
          PsiTypeParameter[] psiTypeParameters=containingClass.getTypeParameters();
          for (int i=0; i < psiTypeParameters.length; i++) {
            if (psiTypeParameters[i] == psiClass) {
              typesToReplace.put(typeElement,factory.createTypeElement(substitutedParameters[i]));
            }
          }
        }
      }
    }
  }
);
  for (  Map.Entry<PsiReferenceExpression,PsiVariable> e : referencesToReplace.entrySet()) {
    final PsiExpression expression=factory.createExpressionFromText(e.getValue().getName(),method);
    e.getKey().replace(expression);
  }
  for (  Map.Entry<PsiTypeElement,PsiTypeElement> e : typesToReplace.entrySet()) {
    e.getKey().replace(e.getValue());
  }
}
