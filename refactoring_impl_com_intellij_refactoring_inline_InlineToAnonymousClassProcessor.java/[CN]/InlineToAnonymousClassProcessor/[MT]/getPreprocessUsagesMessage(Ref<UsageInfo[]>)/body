{
  final UsageInfo[] usages=refUsages.get();
  for (  UsageInfo usage : usages) {
    final PsiElement element=usage.getElement();
    final PsiElement parentElement=element.getParent();
    if (parentElement != null && parentElement.getParent() instanceof PsiClassObjectAccessExpression) {
      return "Class cannot be inlined because it has usages of its class literal";
    }
    final PsiNewExpression newExpression=PsiTreeUtil.getParentOfType(element,PsiNewExpression.class);
    if (newExpression != null) {
      final PsiMethod[] constructors=myClass.getConstructors();
      if (constructors.length == 0) {
        if (newExpression.getArgumentList().getExpressions().length > 0) {
          return "Class cannot be inlined because a call to its constructor is unresolved";
        }
      }
 else {
        final JavaResolveResult resolveResult=newExpression.resolveMethodGenerics();
        if (!resolveResult.isValidResult()) {
          return "Class cannot be inlined because a call to its constructor is unresolved";
        }
      }
    }
  }
  return null;
}
