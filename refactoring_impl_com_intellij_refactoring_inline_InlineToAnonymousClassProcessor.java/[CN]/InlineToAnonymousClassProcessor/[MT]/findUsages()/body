{
  if (myInlineThisOnly) {
    return new UsageInfo[]{new UsageInfo(myCallToInline)};
  }
  final Collection<PsiReference> refCollection=ReferencesSearch.search(myClass).findAll();
  Set<UsageInfo> usages=new HashSet<UsageInfo>();
  for (  PsiReference reference : refCollection) {
    usages.add(new UsageInfo(reference.getElement()));
  }
  List<UsageInfo> nonCodeUsages=new ArrayList<UsageInfo>();
  if (mySearchInComments) {
    RefactoringUtil.addUsagesInStringsAndComments(myClass,myClass.getQualifiedName(),nonCodeUsages,new NonCodeUsageInfoFactory(myClass,myClass.getQualifiedName()));
  }
  if (mySearchInNonJavaFiles) {
    GlobalSearchScope projectScope=GlobalSearchScope.projectScope(myClass.getProject());
    TextOccurrencesUtil.addTextOccurences(myClass,myClass.getQualifiedName(),projectScope,nonCodeUsages,new NonCodeUsageInfoFactory(myClass,myClass.getQualifiedName()));
  }
  usages.addAll(nonCodeUsages);
  return usages.toArray(new UsageInfo[usages.size()]);
}
