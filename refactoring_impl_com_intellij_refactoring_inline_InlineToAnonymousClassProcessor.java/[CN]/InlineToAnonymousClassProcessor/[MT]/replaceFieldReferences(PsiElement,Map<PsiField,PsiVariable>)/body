{
  final Map<PsiReferenceExpression,PsiVariable> referencesToReplace=new HashMap<PsiReferenceExpression,PsiVariable>();
  method.accept(new PsiRecursiveElementVisitor(){
    public void visitReferenceExpression(    final PsiReferenceExpression expression){
      super.visitReferenceExpression(expression);
      final PsiElement element=expression.resolve();
      if (element instanceof PsiField) {
        PsiVariable result=fieldMap.get((PsiField)element);
        if (result != null) {
          referencesToReplace.put(expression,result);
        }
      }
    }
  }
);
  for (  Map.Entry<PsiReferenceExpression,PsiVariable> e : referencesToReplace.entrySet()) {
    final PsiExpression expression=myClass.getManager().getElementFactory().createExpressionFromText(e.getValue().getName(),method);
    e.getKey().replace(expression);
  }
}
