{
  final Map<PsiField,PsiVariable> result=new HashMap<PsiField,PsiVariable>();
  final Map<PsiField,PsiExpression> initializedFields=new HashMap<PsiField,PsiExpression>();
  constructor.accept(new PsiRecursiveElementVisitor(){
    public void visitAssignmentExpression(    final PsiAssignmentExpression expression){
      super.visitAssignmentExpression(expression);
      if (expression.getLExpression() instanceof PsiReferenceExpression) {
        PsiReferenceExpression lExpr=(PsiReferenceExpression)expression.getLExpression();
        final PsiExpression rExpr=expression.getRExpression();
        final PsiElement psiElement=lExpr.resolve();
        if (psiElement instanceof PsiField && rExpr != null) {
          PsiField field=(PsiField)psiElement;
          if (field.getContainingClass() == myClass) {
            final PsiExpression initializer;
            try {
              initializer=replaceParameterReferences(constructor.getParameterList(),(PsiExpression)rExpr.copy(),constructorArguments);
            }
 catch (            IncorrectOperationException e) {
              LOG.error(e);
              return;
            }
            initializedFields.put(field,initializer);
          }
        }
      }
    }
  }
);
  for (  Map.Entry<PsiField,PsiExpression> e : initializedFields.entrySet()) {
    final CodeStyleManager codeStyleManager=myClass.getManager().getCodeStyleManager();
    final PsiField field=e.getKey();
    String varName=codeStyleManager.variableNameToPropertyName(field.getName(),VariableKind.FIELD);
    String localName=codeStyleManager.suggestUniqueVariableName(varName,newExpression,true);
    final PsiElementFactory factory=myClass.getManager().getElementFactory();
    try {
      final PsiDeclarationStatement declaration=factory.createVariableDeclarationStatement(localName,field.getType(),e.getValue());
      PsiVariable variable=(PsiVariable)declaration.getDeclaredElements()[0];
      variable.getModifierList().setModifierProperty(PsiModifier.FINAL,true);
      final PsiStatement newStatement=PsiTreeUtil.getParentOfType(newExpression,PsiStatement.class);
      if (newStatement != null) {
        newStatement.getParent().addBefore(declaration,newStatement);
      }
      result.put(field,variable);
    }
 catch (    IncorrectOperationException ex) {
      LOG.error(ex);
    }
  }
  return result;
}
