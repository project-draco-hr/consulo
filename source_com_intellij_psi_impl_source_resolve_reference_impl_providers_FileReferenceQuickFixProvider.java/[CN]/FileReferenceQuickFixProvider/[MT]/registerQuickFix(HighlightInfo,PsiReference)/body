{
  final FileReference fileReference=((FileReference)reference);
  final FileReferenceSet fileReferenceSet=fileReference.getFileReferenceSet();
  int index=Arrays.asList(fileReferenceSet.getAllReferences()).indexOf(fileReference);
  if (index < 0)   return;
  final String newFileName=fileReference.getCanonicalText();
  final PsiDirectory directory;
  if (index > 0) {
    PsiElement context=fileReferenceSet.getReference(index - 1).resolve();
    if (context == null)     return;
    if (context instanceof PsiDirectory)     directory=(PsiDirectory)context;
 else     if (context instanceof WebDirectoryElement) {
      final VirtualFile originalFile=((WebDirectoryElement)context).getOriginalVirtualFile();
      if (originalFile != null && originalFile.isDirectory()) {
        directory=reference.getElement().getManager().findDirectory(originalFile);
        if (directory == null)         return;
      }
 else {
        return;
      }
    }
 else {
      return;
    }
  }
 else {
    final Collection<PsiElement> defaultContexts=fileReferenceSet.getDefaultContexts(reference.getElement());
    final PsiElement psiElement=(!defaultContexts.isEmpty()) ? defaultContexts.iterator().next() : null;
    if (psiElement instanceof PsiDirectory) {
      directory=(PsiDirectory)psiElement;
    }
 else     if (psiElement instanceof WebDirectoryElement) {
      final VirtualFile originalFile=((WebDirectoryElement)psiElement).getOriginalVirtualFile();
      if (originalFile != null && originalFile.isDirectory()) {
        directory=reference.getElement().getManager().findDirectory(originalFile);
        if (directory == null)         return;
      }
 else {
        return;
      }
    }
 else {
      return;
    }
  }
  boolean differentCase=false;
  if (fileReferenceSet.isCaseSensitive()) {
    boolean original=fileReferenceSet.isCaseSensitive();
    try {
      fileReferenceSet.setCaseSensitive(false);
      final PsiElement psiElement=fileReference.resolve();
      if (psiElement instanceof PsiNamedElement) {
        final String existingElementName=((PsiNamedElement)psiElement).getName();
        differentCase=true;
        QuickFixAction.registerQuickFixAction(info,new RenameFileReferenceIntentionAction(existingElementName,fileReference),null);
        QuickFixAction.registerQuickFixAction(info,new RenameFileFix(newFileName),null);
      }
    }
  finally {
      fileReferenceSet.setCaseSensitive(original);
    }
  }
  if (differentCase && SystemInfo.isWindows)   return;
  final boolean isdirectory;
  final ReferenceType type=fileReference.getType();
  if (type.isAssignableTo(ReferenceType.DIRECTORY)) {
    try {
      directory.checkCreateSubdirectory(newFileName);
    }
 catch (    IncorrectOperationException ex) {
      return;
    }
    isdirectory=true;
  }
 else {
    FileType ft=FileTypeManager.getInstance().getFileTypeByFileName(newFileName);
    if (ft instanceof UnknownFileType)     return;
    try {
      directory.checkCreateFile(newFileName);
    }
 catch (    IncorrectOperationException ex) {
      return;
    }
    isdirectory=false;
  }
  QuickFixAction.registerQuickFixAction(info,new IntentionAction(){
    public String getText(){
      return (isdirectory ? "Create Directory " : "Create File ") + newFileName;
    }
    public String getFamilyName(){
      return "Create";
    }
    public boolean isAvailable(    Project project,    Editor editor,    PsiFile file){
      return true;
    }
    public void invoke(    Project project,    Editor editor,    PsiFile file) throws IncorrectOperationException {
      if (isdirectory) {
        PsiDirectory newdirectory=directory.createSubdirectory(newFileName);
      }
 else {
        PsiFile newfile=directory.createFile(newFileName);
        FileEditorManager.getInstance(directory.getProject()).openFile(newfile.getVirtualFile(),true);
      }
    }
    public boolean startInWriteAction(){
      return true;
    }
  }
,null);
}
