{
  Editor[] editors=EditorFactory.getInstance().getEditors(this,null);
  VisualPosition[] visualCarets=new VisualPosition[editors.length];
  int[] caretLines=new int[editors.length];
  for (int i=0; i < editors.length; i++) {
    visualCarets[i]=editors[i].getCaretModel().getVisualPosition();
    caretLines[i]=editors[i].getCaretModel().getLogicalPosition().line;
  }
  if (!isStripTrailingSpacesEnabled) {
    return;
  }
  boolean isTestMode=ApplicationManager.getApplication().isUnitTestMode();
  lines:   for (int i=0; i < myLineSet.getLineCount(); i++) {
    if (!isTestMode) {
      for (int j=0; j < caretLines.length; j++) {
        if (caretLines[j] == i)         continue lines;
      }
    }
    if (!inChangedLinesOnly || myLineSet.isModified(i)) {
      int start=-1;
      int lineEnd=myLineSet.getLineEnd(i) - myLineSet.getSeparatorLength(i);
      int lineStart=myLineSet.getLineStart(i);
      CharSequence text=myText.getCharArray();
      for (int offset=lineEnd - 1; offset >= lineStart; offset--) {
        char c=text.charAt(offset);
        if (c != ' ' && c != '\t') {
          break;
        }
        start=offset;
      }
      if (start != -1) {
        deleteString(start,lineEnd);
      }
    }
  }
  for (int i=0; i < editors.length; i++) {
    editors[i].getCaretModel().moveToVisualPosition(visualCarets[i]);
  }
}
