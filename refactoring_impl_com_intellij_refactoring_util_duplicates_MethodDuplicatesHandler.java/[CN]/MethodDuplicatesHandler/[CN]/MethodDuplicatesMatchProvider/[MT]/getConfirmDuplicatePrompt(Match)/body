{
  final PsiElement matchStart=match.getMatchStart();
  final boolean needToEscalateVisibility=!PsiUtil.isAccessible(myMethod,matchStart,null);
  if (needToEscalateVisibility) {
    try {
      final String visibility=VisibilityUtil.getPossibleVisibility(myMethod,matchStart);
      @NonNls final String visibilityPresentation=visibility == PsiModifier.PACKAGE_LOCAL ? "package local" : visibility;
      if (isEssentialStaticContextAbsent(match)) {
        return RefactoringBundle.message("replace.this.code.fragment.and.make.method.static.visible",visibilityPresentation);
      }
 else {
        return RefactoringBundle.message("replace.this.code.fragment.and.make.method.visible",visibilityPresentation);
      }
    }
 catch (    IncorrectOperationException e) {
      LOG.error(e);
    }
  }
  if (isEssentialStaticContextAbsent(match)) {
    return RefactoringBundle.message("replace.this.code.fragment.and.make.method.static");
  }
  return RefactoringBundle.message("replace.this.code.fragment");
}
