{
  match.changeSignature(myMethod);
  final PsiClass containingClass=myMethod.getContainingClass();
  if (isEssentialStaticContextAbsent(match)) {
    myMethod.getModifierList().setModifierProperty(PsiModifier.STATIC,true);
  }
  final PsiElementFactory factory=myMethod.getManager().getElementFactory();
  final boolean needQualifier=match.getInstanceExpression() != null;
  final boolean needStaticQualifier=isExternal(match);
  final @NonNls String text=needQualifier || needStaticQualifier ? "q." + myMethod.getName() + "()" : myMethod.getName() + "()";
  PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)factory.createExpressionFromText(text,null);
  methodCallExpression=(PsiMethodCallExpression)CodeStyleManager.getInstance(myMethod.getManager()).reformat(methodCallExpression);
  final PsiParameter[] parameters=myMethod.getParameterList().getParameters();
  for (  final PsiParameter parameter : parameters) {
    methodCallExpression.getArgumentList().add(match.getParameterValue(parameter));
  }
  if (needQualifier || needStaticQualifier) {
    final PsiExpression qualifierExpression=methodCallExpression.getMethodExpression().getQualifierExpression();
    LOG.assertTrue(qualifierExpression != null);
    if (needQualifier) {
      qualifierExpression.replace(match.getInstanceExpression());
    }
 else {
      qualifierExpression.replace(factory.createReferenceExpression(containingClass));
    }
  }
  VisibilityUtil.escalateVisibility(myMethod,match.getMatchStart());
  match.replace(methodCallExpression,null);
}
