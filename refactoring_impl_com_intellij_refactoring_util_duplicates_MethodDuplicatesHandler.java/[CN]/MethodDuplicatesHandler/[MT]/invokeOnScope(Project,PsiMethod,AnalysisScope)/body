{
  final List<Match> duplicates=new ArrayList<Match>();
  scope.accept(new PsiRecursiveElementVisitor(){
    @Override public void visitFile(    final PsiFile file){
      final ProgressIndicator progressIndicator=ProgressManager.getInstance().getProgressIndicator();
      if (progressIndicator != null && progressIndicator.isCanceled())       return;
      duplicates.addAll(hasDuplicates(file,method));
    }
  }
);
  replaceDuplicate(project,duplicates,method);
  final Runnable nothingFoundRunnable=new Runnable(){
    public void run(){
      if (duplicates.isEmpty()) {
        final String message=RefactoringBundle.message("idea.has.not.found.any.code.that.can.be.replaced.with.method.call",ApplicationNamesInfo.getInstance().getProductName());
        Messages.showInfoMessage(project,message,REFACTORING_NAME);
      }
    }
  }
;
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    nothingFoundRunnable.run();
  }
 else {
    ApplicationManager.getApplication().invokeLater(nothingFoundRunnable,ModalityState.NON_MODAL);
  }
}
