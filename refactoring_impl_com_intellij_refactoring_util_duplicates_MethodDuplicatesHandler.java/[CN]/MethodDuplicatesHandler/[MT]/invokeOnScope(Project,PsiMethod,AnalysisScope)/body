{
  final int[] dupCount=new int[]{0};
  scope.accept(new PsiRecursiveElementVisitor(){
    public void visitReferenceExpression(    final PsiReferenceExpression expression){
    }
    public void visitFile(    final PsiFile file){
      final VirtualFile virtualFile=file.getVirtualFile();
      LOG.assertTrue(virtualFile != null);
      if (invokeOnElements(project,file,method)) {
        dupCount[0]++;
      }
    }
  }
);
  if (dupCount[0] == 0) {
    final String message=RefactoringBundle.message("idea.has.not.found.any.code.that.can.be.replaced.with.method.call",ApplicationNamesInfo.getInstance().getProductName());
    Messages.showInfoMessage(project,message,REFACTORING_NAME);
  }
}
