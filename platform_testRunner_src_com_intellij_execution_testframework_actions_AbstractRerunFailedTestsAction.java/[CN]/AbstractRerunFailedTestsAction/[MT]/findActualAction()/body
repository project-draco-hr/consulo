{
  if (myParent != null || registry.isEmpty())   return this;
  List<AbstractRerunFailedTestsAction> candidates=new ArrayList<AbstractRerunFailedTestsAction>(registry);
  Collections.sort(candidates,new Comparator<AbstractRerunFailedTestsAction>(){
    @Override public int compare(    AbstractRerunFailedTestsAction action1,    AbstractRerunFailedTestsAction action2){
      Window window1=SwingUtilities.windowForComponent(action1.myParent);
      Window window2=SwingUtilities.windowForComponent(action2.myParent);
      if (window1 == null)       return 1;
      if (window2 == null)       return -1;
      boolean showing1=action1.myParent.isShowing();
      boolean showing2=action2.myParent.isShowing();
      if (showing1 && !showing2)       return -1;
      if (showing2 && !showing1)       return 1;
      return (window1.isActive() ? -1 : 1);
    }
  }
);
  return candidates.get(0);
}
