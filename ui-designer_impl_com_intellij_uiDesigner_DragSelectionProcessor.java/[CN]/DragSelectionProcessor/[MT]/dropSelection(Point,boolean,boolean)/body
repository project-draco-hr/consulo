{
  LOG.assertTrue(point != null);
  GridInsertProcessor.GridInsertLocation location=null;
  if (mouseReleased) {
    myGridInsertProcessor.removeFeedbackPainter();
    location=myGridInsertProcessor.getGridInsertLocation(point.x,point.y);
    if (!myGridInsertProcessor.isDropInsertAllowed(location,mySelection.size())) {
      location=null;
    }
  }
  if (copyOnDrop) {
    final String serializedComponents=CutCopyPasteSupport.serializeForCopy(myEditor,mySelection);
    cancelDrag();
    TIntArrayList xs=new TIntArrayList();
    TIntArrayList ys=new TIntArrayList();
    mySelection.clear();
    CutCopyPasteSupport.loadComponentsToPaste(myEditor,serializedComponents,xs,ys,mySelection);
  }
  if (!FormEditingUtil.canDrop(myEditor,point.x,point.y,mySelection.size()) && (location == null || location.getMode() == GridInsertProcessor.GridInsertMode.None)) {
    return false;
  }
  final int[] dx=new int[mySelection.size()];
  final int[] dy=new int[mySelection.size()];
  for (int i=0; i < mySelection.size(); i++) {
    final RadComponent component=mySelection.get(i);
    dx[i]=component.getX() - point.x;
    dy[i]=component.getY() - point.y;
  }
  final RadComponent[] components=mySelection.toArray(new RadComponent[mySelection.size()]);
  if (location != null && location.getMode() != GridInsertProcessor.GridInsertMode.None) {
    myDropInfo=myGridInsertProcessor.processGridInsertOnDrop(location,components,myOriginalConstraints);
  }
 else {
    myDropInfo=FormEditingUtil.drop(myEditor,point.x,point.y,components,dx,dy);
  }
  if (copyOnDrop) {
    FormEditingUtil.clearSelection(myEditor.getRootContainer());
    for (    RadComponent component : mySelection) {
      component.setSelected(true);
    }
  }
  if (mouseReleased) {
    for (int i=0; i < myOriginalConstraints.length; i++) {
      if (myOriginalParents[i].isGrid()) {
        FormEditingUtil.deleteEmptyGridCells(myOriginalParents[i],myOriginalConstraints[i]);
      }
    }
  }
  return true;
}
