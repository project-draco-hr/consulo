{
  LOG.assertTrue(point != null);
  GridInsertProcessor.GridInsertLocation location=null;
  if (mouseReleased) {
    myGridInsertProcessor.removeFeedbackPainter();
    if (mySelection.size() == 1) {
      location=myGridInsertProcessor.getGridInsertLocation(point.x,point.y);
    }
  }
  if (!FormEditingUtil.canDrop(myEditor,point.x,point.y,mySelection.size()) && (location == null || location.getMode() == GridInsertProcessor.GridInsertMode.None)) {
    return false;
  }
  final int[] dx=new int[mySelection.size()];
  final int[] dy=new int[mySelection.size()];
  for (int i=0; i < mySelection.size(); i++) {
    final RadComponent component=mySelection.get(i);
    dx[i]=component.getX() - point.x;
    dy[i]=component.getY() - point.y;
  }
  if (location != null && location.getMode() != GridInsertProcessor.GridInsertMode.None) {
    myDropInfo=myGridInsertProcessor.processGridInsertOnDrop(location,mySelection.get(0),myOriginalConstraints);
  }
 else {
    myDropInfo=FormEditingUtil.drop(myEditor,point.x,point.y,mySelection.toArray(new RadComponent[mySelection.size()]),dx,dy);
  }
  if (mouseReleased) {
    for (int i=0; i < myOriginalConstraints.length; i++) {
      FormEditingUtil.deleteEmptyGridCells(myOriginalParents[i],myOriginalConstraints[i]);
    }
  }
  return true;
}
