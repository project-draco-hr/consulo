{
  final java.util.List<RadComponent> dragComponents=draggedComponentList.getComponents();
  for (  final RadComponent c : dragComponents) {
    c.getParent().removeComponent(c);
  }
  Rectangle allBounds=null;
  if (!draggedComponentList.hasDragDelta()) {
    final RadContainer[] originalParents=draggedComponentList.getOriginalParents();
    final Rectangle[] originalBounds=draggedComponentList.getOriginalBounds();
    for (int i=0; i < originalParents.length; i++) {
      Rectangle rc=SwingUtilities.convertRectangle(originalParents[i].getDelegee(),originalBounds[i],myEditor.getDragLayer());
      if (allBounds == null) {
        allBounds=rc;
      }
 else {
        allBounds=allBounds.union(rc);
      }
    }
  }
  for (  final RadComponent c : dragComponents) {
    final JComponent delegee=c.getDelegee();
    final Point point=SwingUtilities.convertPoint(draggedComponentList.getOriginalParent(c).getDelegee(),delegee.getLocation(),myEditor.getDragLayer());
    if (draggedComponentList.hasDragDelta()) {
      delegee.setLocation((int)point.getX() + draggedComponentList.getDragDeltaX(),(int)point.getY() + draggedComponentList.getDragDeltaY());
    }
 else {
      delegee.setLocation((int)(point.getX() - allBounds.getX() + location.getX()),(int)(point.getY() - allBounds.getY() + location.getY()));
    }
    myEditor.getDragLayer().add(delegee);
  }
}
