{
  LOG.assertTrue(myOutOfScopeVariable != null);
  PsiManager manager=file.getManager();
  if (PsiUtil.isAccessedForWriting(myUnresolvedReference)) {
    PsiExpression initializer=myOutOfScopeVariable.getInitializer();
    if (initializer != null) {
      PsiExpressionStatement assignment=(PsiExpressionStatement)manager.getElementFactory().createStatementFromText(myOutOfScopeVariable.getName() + "= e;",null);
      ((PsiAssignmentExpression)assignment.getExpression()).getRExpression().replace(initializer);
      assignment=(PsiExpressionStatement)manager.getCodeStyleManager().reformat(assignment);
      PsiDeclarationStatement declStatement=PsiTreeUtil.getParentOfType(myOutOfScopeVariable,PsiDeclarationStatement.class);
      LOG.assertTrue(declStatement != null);
      declStatement.getParent().addAfter(assignment,declStatement);
      myOutOfScopeVariable.getInitializer().delete();
    }
  }
  myOutOfScopeVariable.getModifierList().setModifierProperty(PsiModifier.FINAL,false);
  PsiElement commonParent=PsiTreeUtil.findCommonParent(myOutOfScopeVariable,myUnresolvedReference);
  LOG.assertTrue(commonParent != null);
  PsiElement child=myOutOfScopeVariable.getTextRange().getStartOffset() < myUnresolvedReference.getTextRange().getStartOffset() ? ((PsiElement)myOutOfScopeVariable) : myUnresolvedReference;
  while (child.getParent() != commonParent)   child=child.getParent();
  PsiDeclarationStatement newDeclaration=(PsiDeclarationStatement)manager.getElementFactory().createStatementFromText("int i = 0",null);
  newDeclaration.getDeclaredElements()[0].replace(myOutOfScopeVariable);
  while (!(child instanceof PsiStatement) || !(child.getParent() instanceof PsiCodeBlock)) {
    child=child.getParent();
    commonParent=commonParent.getParent();
  }
  LOG.assertTrue(commonParent != null);
  commonParent.addBefore(newDeclaration,child);
  myOutOfScopeVariable.delete();
  manager.getCodeStyleManager().reformat(commonParent);
  QuickFixAction.spoilDocument(project,file);
  DaemonCodeAnalyzer.getInstance(project).updateVisibleHighlighters(editor);
}
