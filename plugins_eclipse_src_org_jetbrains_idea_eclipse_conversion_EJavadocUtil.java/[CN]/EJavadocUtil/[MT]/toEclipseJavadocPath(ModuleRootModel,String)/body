{
  final String protocol=VirtualFileManager.extractProtocol(javadocPath);
  if (!Comparing.strEqual(protocol,HttpFileSystem.getInstance().getProtocol())) {
    final String path=VfsUtil.urlToPath(javadocPath);
    final VirtualFile contentRoot=getContentRoot(model);
    final Project project=model.getModule().getProject();
    final VirtualFile baseDir=contentRoot != null ? contentRoot.getParent() : project.getBaseDir();
    if (Comparing.strEqual(protocol,JarFileSystem.getInstance().getProtocol())) {
      final VirtualFile javadocFile=JarFileSystem.getInstance().getVirtualFileForJar(VirtualFileManager.getInstance().findFileByUrl(javadocPath));
      if (javadocFile != null) {
        final String relativeUrl;
        if (contentRoot != null && VfsUtil.isAncestor(contentRoot,javadocFile,false)) {
          relativeUrl="/" + VfsUtil.getRelativePath(javadocFile,baseDir,'/');
        }
 else {
          relativeUrl=collapse2eclipseRelative2OtherModule(project,javadocFile);
        }
        if (relativeUrl != null) {
          if (javadocPath.indexOf(JarFileSystem.JAR_SEPARATOR) == -1) {
            javadocPath=StringUtil.trimEnd(javadocPath,"/") + JarFileSystem.JAR_SEPARATOR;
          }
          javadocPath=JAR_PREFIX + PLATFORM_PROTOCOL + "resource"+ relativeUrl+ javadocPath.substring(javadocFile.getUrl().length() - 1);
        }
 else {
          javadocPath=JAR_PREFIX + FILE_PROTOCOL + StringUtil.trimStart(path,"/");
        }
      }
 else {
        javadocPath=JAR_PREFIX + FILE_PROTOCOL + StringUtil.trimStart(path,"/");
      }
    }
 else     if (new File(path).exists()) {
      javadocPath=FILE_PROTOCOL + StringUtil.trimStart(path,"/");
    }
  }
  return javadocPath;
}
