{
  final MergeData mergeData=new MergeData();
  final VcsRunnable runnable=new VcsRunnable(){
    public void run() throws VcsException {
      final HgWorkingCopyRevisionsCommand command=new HgWorkingCopyRevisionsCommand(myProject);
      final VirtualFile repo=HgUtil.getHgRootOrThrow(myProject,file);
      final HgFile hgFile=new HgFile(myProject,file);
      HgRevisionNumber serverRevisionNumber, baseRevisionNumber=null, localRevisionNumber;
      if (wasFileCheckedIn(repo,file)) {
        final Pair<HgRevisionNumber,HgRevisionNumber> parents=command.parents(repo,file);
        serverRevisionNumber=parents.second;
        localRevisionNumber=parents.first;
        final HgContentRevision local=new HgContentRevision(myProject,hgFile,localRevisionNumber);
        mergeData.CURRENT=local.getContentAsBytes();
        List<String> arguments=new ArrayList<String>();
        arguments.add("-r");
        arguments.add("\"ancestor(" + localRevisionNumber.getRevision() + ','+ serverRevisionNumber.getRevision()+ ")\"");
        final List<HgFileRevision> revisions;
        try {
          revisions=new HgLogCommand(myProject).execute(new HgFile(myProject,file),-1,false,arguments);
          if (revisions != null && !revisions.isEmpty()) {
            baseRevisionNumber=revisions.get(0).getRevisionNumber();
          }
        }
 catch (        HgCommandException e) {
          new HgCommandResultNotifier(myProject).notifyError(null,HgVcsMessages.message("hg4idea.error.log.command.execution"),e.getMessage());
        }
      }
 else {
        serverRevisionNumber=command.parents(repo,file).first;
        baseRevisionNumber=command.parents(repo,file,serverRevisionNumber).first;
        final File origFile=new File(file.getPath() + ".orig");
        try {
          mergeData.CURRENT=VcsUtil.getFileByteContent(origFile);
        }
 catch (        IOException e) {
          LOG.info("Couldn't retrieve byte content of the file: " + origFile.getPath(),e);
        }
      }
      if (baseRevisionNumber != null) {
        final HgContentRevision base=new HgContentRevision(myProject,hgFile,baseRevisionNumber);
        mergeData.ORIGINAL=base.getContentAsBytes();
      }
 else {
        mergeData.ORIGINAL=new byte[0];
      }
      final HgContentRevision server=new HgContentRevision(myProject,hgFile,serverRevisionNumber);
      mergeData.LAST=server.getContentAsBytes();
      file.refresh(false,false);
    }
  }
;
  VcsUtil.runVcsProcessWithProgress(runnable,VcsBundle.message("multiple.file.merge.loading.progress.title"),false,myProject);
  return mergeData;
}
