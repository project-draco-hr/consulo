{
  StringBuffer buffer=new StringBuffer();
  PsiClass parentClass=method.getContainingClass();
  if (parentClass != null) {
    buffer.append(JavaDocUtil.getShortestClassName(parentClass,method));
    newLine(buffer);
  }
  generateModifiers(buffer,method);
  PsiTypeParameter[] params=method.getTypeParameters();
  if (params.length > 0) {
    buffer.append("<");
    for (int i=0; i < params.length; i++) {
      PsiTypeParameter param=params[i];
      buffer.append(param.getName());
      PsiClassType[] extendees=param.getExtendsList().getReferencedTypes();
      if (extendees.length > 0) {
        buffer.append(" extends ");
        for (int j=0; j < extendees.length; j++) {
          generateType(buffer,extendees[j],method);
          if (j < extendees.length - 1) {
            buffer.append(" & ");
          }
        }
      }
      if (i < params.length - 1) {
        buffer.append(", ");
      }
    }
    buffer.append("> ");
  }
  if (method.getReturnType() != null) {
    generateType(buffer,method.getReturnType(),method);
    buffer.append(" ");
  }
  buffer.append(method.getName());
  buffer.append(" (");
  PsiParameter[] parms=method.getParameterList().getParameters();
  for (int i=0; i < parms.length; i++) {
    PsiParameter parm=parms[i];
    generateType(buffer,parm.getType(),method);
    buffer.append(" ");
    if (parm.getName() != null) {
      buffer.append(parm.getName());
    }
    if (i < parms.length - 1) {
      buffer.append(", ");
    }
  }
  buffer.append(")");
  PsiClassType[] refs=method.getThrowsList().getReferencedTypes();
  if (refs.length > 0) {
    newLine(buffer);
    buffer.append(" throws ");
    for (int i=0; i < refs.length; i++) {
      PsiClass throwsClass=refs[i].resolve();
      if (throwsClass != null) {
        buffer.append(JavaDocUtil.getShortestClassName(throwsClass,method));
      }
 else {
        buffer.append(refs[i].getPresentableText());
      }
      if (i < refs.length - 1) {
        buffer.append(", ");
      }
    }
  }
  return buffer.toString();
}
