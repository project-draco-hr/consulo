{
  if (type instanceof PsiPrimitiveType) {
    buffer.append(type.getCanonicalText());
    return;
  }
  if (type instanceof PsiWildcardType) {
    PsiWildcardType wc=((PsiWildcardType)type);
    PsiType bound=wc.getBound();
    buffer.append("?");
    if (bound != null) {
      buffer.append(wc.isExtends() ? " extends " : " super ");
      generateType(buffer,bound,context);
    }
  }
  if (type instanceof PsiArrayType) {
    generateType(buffer,((PsiArrayType)type).getComponentType(),context);
    buffer.append("[]");
    return;
  }
  if (type instanceof PsiClassType) {
    PsiClassType.ClassResolveResult result=((PsiClassType)type).resolveGenerics();
    PsiClass psiClass=result.getElement();
    PsiSubstitutor psiSubst=result.getSubstitutor();
    if (psiClass == null || psiClass instanceof PsiTypeParameter) {
      buffer.append(type.getPresentableText());
      return;
    }
    buffer.append(JavaDocUtil.getShortestClassName(psiClass,context));
    if (psiClass.hasTypeParameters()) {
      StringBuffer subst=new StringBuffer();
      boolean goodSubst=true;
      PsiTypeParameter[] params=psiClass.getTypeParameters();
      subst.append("<");
      for (int i=0; i < params.length; i++) {
        PsiType t=psiSubst.substitute(params[i]);
        if (t == null) {
          goodSubst=false;
          break;
        }
        generateType(subst,t,context);
        if (i < params.length - 1) {
          subst.append(", ");
        }
      }
      if (goodSubst) {
        subst.append(">");
        String text=subst.toString();
        buffer.append(text);
      }
    }
  }
  return;
}
