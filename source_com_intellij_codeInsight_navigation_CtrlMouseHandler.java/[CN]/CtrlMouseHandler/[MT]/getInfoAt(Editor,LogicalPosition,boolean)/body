{
  Document document=editor.getDocument();
  PsiFile file=PsiDocumentManager.getInstance(myProject).getPsiFile(document);
  if (file == null)   return null;
  PsiDocumentManager.getInstance(myProject).commitAllDocuments();
  final int offset=editor.logicalPositionToOffset(pos);
  int selStart=editor.getSelectionModel().getSelectionStart();
  int selEnd=editor.getSelectionModel().getSelectionEnd();
  if (offset >= selStart && offset < selEnd)   return null;
  PsiElement targetElement;
  if (browseType) {
    targetElement=GotoTypeDeclarationAction.findSymbolType(myProject,editor,offset);
  }
 else {
    PsiReference ref=TargetElementUtil.findReference(editor,offset);
    if (ref != null) {
      PsiElement resolvedElement;
      if (ref instanceof PsiPolyVariantReference) {
        final ResolveResult[] psiElements=((PsiPolyVariantReference)ref).multiResolve(false);
        resolvedElement=(psiElements.length > 0) ? psiElements[0].getElement() : null;
      }
 else {
        resolvedElement=ref.resolve();
      }
      if (resolvedElement != null) {
        PsiElement e=ref.getElement();
        return new Info(resolvedElement,e,e.getTextRange().getStartOffset() + ref.getRangeInElement().getStartOffset(),e.getTextRange().getStartOffset() + ref.getRangeInElement().getEndOffset());
      }
    }
    targetElement=GotoDeclarationAction.findTargetElement(myProject,editor,offset);
  }
  if (targetElement != null && targetElement.isPhysical()) {
    PsiElement elementAtPointer=file.findElementAt(offset);
    if (elementAtPointer instanceof PsiIdentifier || elementAtPointer instanceof PsiKeyword || elementAtPointer instanceof PsiDocToken|| elementAtPointer instanceof XmlToken) {
      return new Info(targetElement,elementAtPointer);
    }
  }
  return null;
}
