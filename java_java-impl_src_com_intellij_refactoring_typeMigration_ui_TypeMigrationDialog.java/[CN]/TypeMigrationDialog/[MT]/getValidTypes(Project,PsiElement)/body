{
  final ArrayList<PsiExpression> expressions=new ArrayList<PsiExpression>();
  if (root instanceof PsiField || root instanceof PsiMethod) {
    if (VisibilityUtil.compare(VisibilityUtil.getVisibilityModifier(((PsiModifierListOwner)root).getModifierList()),PsiModifier.PRIVATE) < 0)     return null;
  }
  for (  PsiReference reference : ReferencesSearch.search(root,GlobalSearchScope.fileScope(root.getContainingFile()))) {
    final PsiElement element=reference.getElement();
    final PsiExpression expr=PsiTreeUtil.getParentOfType(element,PsiExpression.class,false);
    if (expr != null) {
      expressions.add(expr);
    }
  }
  try {
    final PsiType[] psiTypes=new TypeSelectorManagerImpl(project,myTypeCodeFragment.getType(),expressions.toArray(new PsiExpression[expressions.size()])).getTypesForAll();
    if (psiTypes.length > 0) {
      final String[] history=new String[psiTypes.length];
      for (int i=0; i < psiTypes.length; i++) {
        PsiType psiType=psiTypes[i];
        history[i]=psiType.getCanonicalText();
      }
      return history;
    }
  }
 catch (  PsiTypeCodeFragment.TypeSyntaxException e) {
    return null;
  }
catch (  PsiTypeCodeFragment.NoTypeException e) {
    return null;
  }
  return null;
}
