{
  final MultiMap<PsiElement,String> conflicts=new MultiMap<PsiElement,String>();
  final PsiMethod[] getterPrototypes=myDescriptor.getGetterPrototypes();
  final PsiMethod[] setterPrototypes=myDescriptor.getSetterPrototypes();
  checkExistingMethods(getterPrototypes,conflicts,true);
  checkExistingMethods(setterPrototypes,conflicts,false);
  final Collection<PsiClass> classes=ClassInheritorsSearch.search(myClass).findAll();
  for (int i=0; i < myFields.length; i++) {
    final PsiField field=myFields[i];
    final Set<PsiMethod> setters=new HashSet<PsiMethod>();
    final Set<PsiMethod> getters=new HashSet<PsiMethod>();
    for (    PsiClass aClass : classes) {
      final PsiMethod getterOverrider=getterPrototypes != null ? aClass.findMethodBySignature(getterPrototypes[i],false) : null;
      if (getterOverrider != null) {
        getters.add(getterOverrider);
      }
      final PsiMethod setterOverrider=setterPrototypes != null ? aClass.findMethodBySignature(setterPrototypes[i],false) : null;
      if (setterOverrider != null) {
        setters.add(setterOverrider);
      }
    }
    if (!getters.isEmpty() || !setters.isEmpty()) {
      for (      PsiReference reference : ReferencesSearch.search(field)) {
        final PsiElement place=reference.getElement();
        LOG.assertTrue(place instanceof PsiReferenceExpression);
        final PsiExpression qualifierExpression=((PsiReferenceExpression)place).getQualifierExpression();
        final PsiClass ancestor;
        if (qualifierExpression == null) {
          ancestor=PsiTreeUtil.getParentOfType(place,PsiClass.class,false);
        }
 else {
          ancestor=PsiUtil.resolveClassInType(qualifierExpression.getType());
        }
        final boolean isGetter=!PsiUtil.isAccessedForWriting((PsiExpression)place);
        for (        PsiMethod overridden : isGetter ? getters : setters) {
          if (InheritanceUtil.isInheritorOrSelf(myClass,ancestor,true)) {
            conflicts.putValue(overridden,"There is already a " + RefactoringUIUtil.getDescription(overridden,true) + " which would hide generated "+ (isGetter ? "getter" : "setter")+ " for "+ place.getText());
            break;
          }
        }
      }
    }
  }
  return showConflicts(conflicts,refUsages.get());
}
