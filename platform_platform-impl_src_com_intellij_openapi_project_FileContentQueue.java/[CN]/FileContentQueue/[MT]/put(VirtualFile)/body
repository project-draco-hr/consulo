{
  final ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
  FileContent content=new FileContent(file);
  if (file.isValid()) {
    final long contentLength=content.getLength();
    boolean counterUpdated=false;
    try {
      if (contentLength < PersistentFS.MAX_INTELLISENSE_FILESIZE) {
synchronized (this) {
          while (myTotalSize > SIZE_THRESHOLD) {
            if (indicator != null) {
              indicator.checkCanceled();
            }
            wait(300);
          }
          myTotalSize+=contentLength;
          counterUpdated=true;
        }
        content.getBytes();
      }
    }
 catch (    IOException e) {
      LOG.info(e);
      if (counterUpdated) {
synchronized (this) {
          myTotalSize-=contentLength;
          notifyAll();
        }
      }
      content.setEmptyContent();
    }
catch (    ProcessCanceledException e) {
      if (counterUpdated) {
synchronized (this) {
          myTotalSize-=contentLength;
          notifyAll();
        }
      }
      throw e;
    }
catch (    InterruptedException e) {
      if (counterUpdated) {
synchronized (this) {
          myTotalSize-=contentLength;
          notifyAll();
        }
      }
      return;
    }
catch (    Throwable e) {
      LOG.error(e);
    }
  }
 else {
    content.setEmptyContent();
  }
  myQueue.put(content);
}
