{
  final FileContent content=doTake();
  if (content != null) {
    final long length=content.getLength();
    while (true) {
      try {
        indicator.checkCanceled();
      }
 catch (      ProcessCanceledException e) {
        pushback(content);
        throw e;
      }
synchronized (this) {
        final boolean requestingLargeSize=length > LARGE_SIZE_REQUEST_THRESHOLD;
        if (requestingLargeSize) {
          myLargeSizeRequested=true;
        }
        try {
          if (myLargeSizeRequested && !requestingLargeSize || myTakenSize + length > Math.max(TAKEN_FILES_THRESHOLD,length)) {
            wait(300L);
          }
 else {
            myTakenSize+=length;
            if (requestingLargeSize) {
              myLargeSizeRequested=false;
            }
            return content;
          }
        }
 catch (        InterruptedException ignore) {
        }
      }
    }
  }
  return content;
}
