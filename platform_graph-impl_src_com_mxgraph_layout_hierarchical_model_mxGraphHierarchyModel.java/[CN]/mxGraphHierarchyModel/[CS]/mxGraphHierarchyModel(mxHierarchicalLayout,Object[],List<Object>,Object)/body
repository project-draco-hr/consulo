{
  mxGraph graph=layout.getGraph();
  this.roots=roots;
  this.parent=parent;
  if (vertices == null) {
    vertices=graph.getChildVertices(parent);
  }
  vertexMapper=new Hashtable<Object,mxGraphHierarchyNode>(vertices.length);
  edgeMapper=new Hashtable<Object,mxGraphHierarchyEdge>(vertices.length);
  maxRank=SOURCESCANSTARTRANK;
  mxGraphHierarchyNode[] internalVertices=new mxGraphHierarchyNode[vertices.length];
  createInternalCells(layout,vertices,internalVertices);
  for (int i=0; i < vertices.length; i++) {
    Collection<mxGraphHierarchyEdge> edges=internalVertices[i].connectsAsSource;
    Iterator<mxGraphHierarchyEdge> iter=edges.iterator();
    while (iter.hasNext()) {
      mxGraphHierarchyEdge internalEdge=iter.next();
      Collection<Object> realEdges=internalEdge.edges;
      Iterator<Object> iter2=realEdges.iterator();
      if (iter2.hasNext()) {
        Object realEdge=iter2.next();
        Object targetCell=graph.getView().getVisibleTerminal(realEdge,false);
        mxGraphHierarchyNode internalTargetCell=vertexMapper.get(targetCell);
        if (internalVertices[i] == internalTargetCell) {
          targetCell=graph.getView().getVisibleTerminal(realEdge,true);
          internalTargetCell=vertexMapper.get(targetCell);
        }
        if (internalTargetCell != null && internalVertices[i] != internalTargetCell) {
          internalEdge.target=internalTargetCell;
          if (internalTargetCell.connectsAsTarget.size() == 0) {
            internalTargetCell.connectsAsTarget=new LinkedHashSet<mxGraphHierarchyEdge>(4);
          }
          internalTargetCell.connectsAsTarget.add(internalEdge);
        }
      }
    }
    internalVertices[i].temp[0]=1;
  }
}
