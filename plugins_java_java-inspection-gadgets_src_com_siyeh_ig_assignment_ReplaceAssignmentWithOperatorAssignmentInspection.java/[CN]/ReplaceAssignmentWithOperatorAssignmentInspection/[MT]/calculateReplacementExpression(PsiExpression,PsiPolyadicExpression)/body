{
  final PsiExpression[] operands=polyadicExpression.getOperands();
  final PsiJavaToken sign=polyadicExpression.getTokenBeforeOperand(operands[1]);
  String signText=sign.getText();
  if ("&&".equals(signText)) {
    signText="&";
  }
 else   if ("||".equals(signText)) {
    signText="|";
  }
  final StringBuilder text=new StringBuilder(lhs.getText());
  text.append(' ');
  text.append(signText);
  text.append("= ");
  boolean addToken=false;
  for (int i=1; i < operands.length; i++) {
    final PsiExpression operand=operands[i];
    if (addToken) {
      final PsiJavaToken token=polyadicExpression.getTokenBeforeOperand(operand);
      text.append(' ');
      if (token != null) {
        text.append(token.getText());
      }
      text.append(' ');
    }
 else {
      addToken=true;
    }
    text.append(operand.getText());
  }
  return text.toString();
}
