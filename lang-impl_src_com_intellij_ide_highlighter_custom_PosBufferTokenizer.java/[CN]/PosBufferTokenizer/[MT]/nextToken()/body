{
  if (pushedBack) {
    pushedBack=false;
    return ttype;
  }
  byte ct[]=ctype;
  sval=null;
  startOffset=0;
  endOffset=0;
  int c=peekc;
  if (c < 0) {
    c=NEED_CHAR;
  }
  if (c == NEED_CHAR) {
    c=read();
    if (c < 0)     return ttype=TT_EOF;
  }
  ttype=c;
  peekc=NEED_CHAR;
  int ctype=c < 256 ? ct[c] : CT_ALPHA;
  if (isWhiteSpace(c)) {
    startOffset=pos - 1;
    do {
      c=read();
      if (c >= 0) {
        ctype=c < 256 ? ct[c] : CT_ALPHA;
      }
 else {
        break;
      }
    }
 while (isWhiteSpace(c));
    peekc=c;
    endOffset=pos - 1;
    return ttype=TT_WHITESPACE;
  }
  if ((ctype & CT_DIGIT) != 0) {
    startOffset=pos - 1;
    if (hexPrefix != null) {
      for (int i=0; i < hexPrefix.length(); i++) {
        if (c == hexPrefix.charAt(i)) {
          c=read();
        }
 else {
          break;
        }
      }
    }
    do {
      c=read();
      if (c < 0)       break;
      ctype=c < 256 ? ct[c] : CT_ALPHA;
      if (!('0' <= c && c <= '9') && c != '.' && (ctype & CT_POSTFIX) == 0) {
        break;
      }
    }
 while (c != -1);
    peekc=c;
    endOffset=pos - 1;
    return ttype=TT_NUMBER;
  }
  if ((ctype & CT_ALPHA) != 0) {
    int i=0;
    do {
      if (i >= buf.length) {
        char nb[]=new char[buf.length * 2];
        System.arraycopy(buf,0,nb,0,buf.length);
        buf=nb;
      }
      buf[i++]=(char)c;
      c=read();
      ctype=c < 0 ? CT_WHITESPACE : c < 256 ? ct[c] : CT_ALPHA;
      if (c == '-')       ctype=CT_ALPHA;
    }
 while ((ctype & (CT_ALPHA | CT_DIGIT)) != 0);
    peekc=c;
    startOffset=pos - i - 1;
    endOffset=pos - 1;
    sval=String.copyValueOf(buf,0,i);
    if (myIgnoreCase) {
      sval=sval.toLowerCase();
    }
    return ttype=TT_WORD;
  }
  if ((ctype & CT_QUOTE) != 0) {
    startOffset=pos - 1;
    ttype=c;
    int prev;
    int d=-1;
    do {
      prev=d;
      d=read();
      if (d == ttype && prev != '\\')       break;
    }
 while (d != '\r' && d != '\n' && d != -1);
    endOffset=(d == ttype) ? pos : pos - 1;
    if (d != ttype) {
      peekc=d;
    }
 else {
      peekc=NEED_CHAR;
    }
    return ttype=TT_QUOTE;
  }
  startOffset=pos - 1;
  endOffset=pos;
  return ttype=c;
}
