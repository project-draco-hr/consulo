{
  model.reset(config);
  commonParameters.reset(config);
  getModuleSelector().reset(config);
  TestData data=config.getPersistantData();
  TestSearchScope scope=data.getScope();
  if (scope == TestSearchScope.SINGLE_MODULE) {
    packagesInModule.setSelected(true);
  }
 else   if (scope == TestSearchScope.MODULE_WITH_DEPENDENCIES) {
    packagesAcrossModules.setSelected(true);
  }
 else {
    packagesInProject.setSelected(true);
  }
  alternateJDK.init(config.ALTERNATIVE_JRE_PATH,config.ALTERNATIVE_JRE_PATH_ENABLED);
  envVariablesComponent.setEnvs(config.getPersistantData().ENV_VARIABLES != null ? FileUtil.toSystemDependentName(config.getPersistantData().ENV_VARIABLES) : "");
  propertiesList=new ArrayList<Map.Entry>();
  propertiesList.addAll(data.TEST_PROPERTIES.entrySet());
  propertiesTableModel.setParameterList(propertiesList);
  propertiesFile.getComponent().getTextField().setDocument(model.getPropertiesFileDocument());
  outputDirectory.getComponent().getTextField().setDocument(model.getOutputDirectoryDocument());
}
