{
  myLock=new Object();
  myData=new HashMap<String,Pair<VcsRoot,VcsRevisionNumber>>();
  myRefreshingQueues=Collections.synchronizedMap(new HashMap<VcsRoot,LazyRefreshingSelfQueue<String>>());
  myLatestRevisionsMap=new HashMap<String,VcsRevisionNumber>();
  myLfs=LocalFileSystem.getInstance();
  myChangeDecorator=new RemoteStatusChangeNodeDecorator(this);
  myVcsManager=ProjectLevelVcsManager.getInstance(project);
  myVcsManager.addVcsListener(this);
  Disposer.register(project,new Disposable(){
    public void dispose(){
      myVcsManager.removeVcsListener(RemoteRevisionsCache.this);
    }
  }
);
  final MyRecursiveUpdateRequest request=new MyRecursiveUpdateRequest(project,new Runnable(){
    public void run(){
      final List<LazyRefreshingSelfQueue<String>> list=new ArrayList<LazyRefreshingSelfQueue<String>>();
synchronized (myLock) {
        list.addAll(myRefreshingQueues.values());
      }
      LOG.debug("queues refresh started, queues: " + list.size());
      for (      LazyRefreshingSelfQueue<String> queue : list) {
        queue.updateStep();
      }
    }
  }
);
  request.start();
}
