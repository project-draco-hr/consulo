{
  final ArrayList<Class> classes=new ArrayList<Class>();
  for (  String patternClass : patternClasses) {
    try {
      classes.add(Class.forName(patternClass,true,getLoaderForClass()));
    }
 catch (    ClassNotFoundException e) {
      LOG.error(e);
    }
  }
  final PatternCompiler<PsiElement> compiler=PatternCompilerFactory.getFactory().getPatternCompiler(classes.toArray(new Class[classes.size()]));
  if (patterns.size() > 1) {
    final ElementPattern[] patterns=new ElementPattern[this.patterns.size()];
    for (int i=0, len=this.patterns.size(); i < len; i++) {
      patterns[i]=compiler.compileElementPattern(this.patterns.get(i));
    }
    return StandardPatterns.or(patterns);
  }
 else   if (!patterns.isEmpty()) {
    return compiler.compileElementPattern(patterns.get(0));
  }
 else {
    LOG.error("At least one pattern should be specified");
    return null;
  }
}
