{
  final PsiClassType.ClassResolveResult resolveResult=classType.resolveGenerics();
  final PsiClass psiClass=resolveResult.getElement();
  if (psiClass == null) {
    return Collections.emptyList();
  }
  List<Pair<PsiMethod,PsiSubstitutor>> over=getMethodsToOverrideImplement(psiClass,false);
  List<Pair<PsiMethod,PsiSubstitutor>> impl=getMethodsToOverrideImplement(psiClass,true);
  for (  PsiMethod method : psiClass.getMethods()) {
    (method.hasModifierProperty(PsiModifier.ABSTRACT) ? impl : over).add(Pair.create(method,PsiSubstitutor.EMPTY));
  }
  for (Iterator<Pair<PsiMethod,PsiSubstitutor>> iterator=impl.iterator(); iterator.hasNext(); ) {
    Pair<PsiMethod,PsiSubstitutor> pair=iterator.next();
    if (hasTraitImplementation(pair.first)) {
      iterator.remove();
      over.add(pair);
    }
  }
  final List<Pair<PsiMethod,PsiSubstitutor>> result=toImplement ? impl : over;
  for (int i=0, resultSize=result.size(); i < resultSize; i++) {
    Pair<PsiMethod,PsiSubstitutor> pair=result.get(i);
    result.set(i,Pair.create(pair.first,resolveResult.getSubstitutor().putAll(pair.second)));
  }
  return result;
}
