{
  if (key == SHELVED_CHANGELIST_KEY) {
    final List<ShelveChangesManager.ShelvedChangeListData> list=TreeUtil.collectSelectedObjectsOfType(this,ShelveChangesManager.ShelvedChangeListData.class);
    if (list != null) {
      sink.put(SHELVED_CHANGELIST_KEY,list.toArray(new ShelveChangesManager.ShelvedChangeListData[list.size()]));
    }
  }
 else   if (key == DataKeys.CHANGES) {
    List<ShelvedChange> shelvedChanges=TreeUtil.collectSelectedObjectsOfType(this,ShelvedChange.class);
    if (shelvedChanges.size() > 0) {
      Change[] changes=new Change[shelvedChanges.size()];
      for (int i=0; i < shelvedChanges.size(); i++) {
        changes[i]=shelvedChanges.get(i).getChange(myProject);
      }
      sink.put(DataKeys.CHANGES,changes);
    }
 else {
      final List<ShelveChangesManager.ShelvedChangeListData> changeLists=TreeUtil.collectSelectedObjectsOfType(this,ShelveChangesManager.ShelvedChangeListData.class);
      if (changeLists.size() > 0) {
        List<Change> changes=new ArrayList<Change>();
        for (        ShelveChangesManager.ShelvedChangeListData changeList : changeLists) {
          shelvedChanges=changeList.getChanges();
          for (          ShelvedChange shelvedChange : shelvedChanges) {
            changes.add(shelvedChange.getChange(myProject));
          }
        }
        sink.put(DataKeys.CHANGES,changes.toArray(new Change[changes.size()]));
      }
    }
  }
}
