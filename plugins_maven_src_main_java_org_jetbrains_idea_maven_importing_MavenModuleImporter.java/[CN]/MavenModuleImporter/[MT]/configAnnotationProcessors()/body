{
  if (Boolean.parseBoolean(System.getProperty("idea.maven.keep.annotation.processors")))   return;
  CompilerConfigurationImpl compilerConfiguration=(CompilerConfigurationImpl)CompilerConfiguration.getInstance(myModule.getProject());
  ProcessorConfigProfile currentProfile=compilerConfiguration.getAnnotationProcessingConfiguration(myModule);
  String moduleProfileName=PROFILE_PREFIX + myModule.getName();
  if (currentProfile != compilerConfiguration.getDefaultProcessorProfile() && !MAVEN_DEFAULT_ANNOTATION_PROFILE.equals(currentProfile.getName()) && !moduleProfileName.equals(currentProfile.getName())) {
    return;
  }
  ProcessorConfigProfile moduleProfile=compilerConfiguration.findModuleProcessorProfile(moduleProfileName);
  ProcessorConfigProfile defaultMavenProfile=compilerConfiguration.findModuleProcessorProfile(MAVEN_DEFAULT_ANNOTATION_PROFILE);
  if (shouldEnableAnnotationProcessors()) {
    String annotationProcessorDirectory=getRelativeAnnotationProcessorDirectory();
    if (annotationProcessorDirectory == null) {
      annotationProcessorDirectory="target/generated-sources/annotations";
    }
    Map<String,String> options=myMavenProject.getAnnotationProcessorOptions();
    List<String> processors=myMavenProject.getDeclaredAnnotationProcessors();
    if (processors == null && options.isEmpty() && "target/generated-sources/annotations".equals(annotationProcessorDirectory)) {
      if (moduleProfile != null) {
        compilerConfiguration.removeModuleProcessorProfile(moduleProfile);
      }
      if (defaultMavenProfile == null) {
        defaultMavenProfile=new ProcessorConfigProfile(MAVEN_DEFAULT_ANNOTATION_PROFILE);
        defaultMavenProfile.setEnabled(true);
        defaultMavenProfile.setObtainProcessorsFromClasspath(true);
        defaultMavenProfile.setGeneratedSourcesDirectoryName("target/generated-sources/annotations");
        compilerConfiguration.addModuleProcessorProfile(defaultMavenProfile);
      }
      defaultMavenProfile.addModuleName(myModule.getName());
    }
 else {
      if (defaultMavenProfile != null) {
        defaultMavenProfile.removeModuleName(myModule.getName());
        if (defaultMavenProfile.getModuleNames().isEmpty()) {
          compilerConfiguration.removeModuleProcessorProfile(defaultMavenProfile);
        }
      }
      if (moduleProfile == null) {
        moduleProfile=new ProcessorConfigProfile(moduleProfileName);
        moduleProfile.setEnabled(true);
        moduleProfile.setObtainProcessorsFromClasspath(true);
        moduleProfile.addModuleName(myModule.getName());
        compilerConfiguration.addModuleProcessorProfile(moduleProfile);
      }
      moduleProfile.setGeneratedSourcesDirectoryName(annotationProcessorDirectory);
      moduleProfile.clearProcessorOptions();
      for (      Map.Entry<String,String> entry : options.entrySet()) {
        moduleProfile.setOption(entry.getKey(),entry.getValue());
      }
      moduleProfile.clearProcessors();
      if (processors != null) {
        for (        String processor : processors) {
          moduleProfile.addProcessor(processor);
        }
      }
    }
  }
 else {
    if (defaultMavenProfile != null) {
      defaultMavenProfile.removeModuleName(myModule.getName());
      if (defaultMavenProfile.getModuleNames().isEmpty()) {
        compilerConfiguration.removeModuleProcessorProfile(defaultMavenProfile);
      }
    }
    if (moduleProfile != null) {
      compilerConfiguration.removeModuleProcessorProfile(moduleProfile);
    }
  }
}
