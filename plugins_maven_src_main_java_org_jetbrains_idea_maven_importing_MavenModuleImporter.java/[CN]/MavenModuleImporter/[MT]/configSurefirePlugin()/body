{
  List<String> urls=new ArrayList<String>();
  AccessToken accessToken=ReadAction.start();
  try {
    MavenDomProjectModel domModel=null;
    Element config=myMavenProject.getPluginConfiguration("org.apache.maven.plugins","maven-surefire-plugin");
    for (    String each : MavenJDOMUtil.findChildrenValuesByPath(config,"additionalClasspathElements","additionalClasspathElement")) {
      String url=VfsUtil.pathToUrl(each);
      if (domModel == null) {
        domModel=MavenDomUtil.getMavenDomProjectModel(myModule.getProject(),myMavenProject.getFile());
      }
      if (domModel != null) {
        url=MavenPropertyResolver.resolve(url,domModel);
      }
      urls.add(url);
    }
  }
  finally {
    accessToken.finish();
  }
  LibraryTable moduleLibraryTable=myRootModelAdapter.getRootModel().getModuleLibraryTable();
  Library library=moduleLibraryTable.getLibraryByName(SUREFIRE_PLUGIN_LIBRARY_NAME);
  if (library == null) {
    if (urls.isEmpty()) {
      return;
    }
    library=moduleLibraryTable.createLibrary(SUREFIRE_PLUGIN_LIBRARY_NAME);
    LibraryOrderEntry orderEntry=myRootModelAdapter.getRootModel().findLibraryOrderEntry(library);
    orderEntry.setScope(DependencyScope.TEST);
  }
 else {
    if (urls.isEmpty()) {
      moduleLibraryTable.removeLibrary(library);
      return;
    }
  }
  String[] oldUrls=library.getUrls(OrderRootType.CLASSES);
  if (!urls.equals(Arrays.asList(oldUrls))) {
    Library.ModifiableModel modifiableModel=library.getModifiableModel();
    for (    String url : oldUrls) {
      modifiableModel.removeRoot(url,OrderRootType.CLASSES);
    }
    for (    String url : urls) {
      modifiableModel.addRoot(url,OrderRootType.CLASSES);
    }
    modifiableModel.commit();
  }
}
