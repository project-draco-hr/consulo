{
  List<Element> elements=groupElement.getChildren("template",ns);
  return ContainerUtil.mapNotNull(elements,new NullableFunction<Element,ProjectTemplate>(){
    @Override public ProjectTemplate fun(    final Element element){
      List<Element> plugins=element.getChildren("requiredPlugin",ns);
      for (      Element plugin : plugins) {
        String id=plugin.getTextTrim();
        if (!PluginManager.isPluginInstalled(PluginId.getId(id))) {
          return null;
        }
      }
      String type=element.getChildText("moduleType");
      final ModuleType moduleType=ModuleTypeManager.getInstance().findByID(type);
      return new ArchivedProjectTemplate(element.getChildTextTrim("name",ns)){
        @Override protected ModuleType getModuleType(){
          return moduleType;
        }
        @Override public ZipInputStream getStream() throws IOException {
          String path=element.getChildText("path",ns);
          final HttpURLConnection connection=getConnection(path);
          return new ZipInputStream(connection.getInputStream()){
            @Override public void close() throws IOException {
              super.close();
              connection.disconnect();
            }
          }
;
        }
        @Nullable @Override public String getDescription(){
          return element.getChildTextTrim("description",ns);
        }
      }
;
    }
  }
);
}
