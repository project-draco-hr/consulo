{
  List<Element> elements=groupElement.getChildren("template",ns);
  return ContainerUtil.mapNotNull(elements,new NullableFunction<Element,ArchivedProjectTemplate>(){
    @Override public ArchivedProjectTemplate fun(    final Element element){
      if (!checkRequiredPlugins(element,ns))       return null;
      String type=element.getChildText("moduleType");
      final ModuleType moduleType=ModuleTypeManager.getInstance().findByID(type);
      List<Element> fields=element.getChildren();
      return new ArchivedProjectTemplate(element.getChildTextTrim("name",ns),ContainerUtil.map(fields,new Function<Element,WizardInputField>(){
        @Override public WizardInputField fun(        Element element){
          return WizardInputField.getFieldById(element.getText());
        }
      }
)){
        @Override protected ModuleType getModuleType(){
          return moduleType;
        }
        @Override public ZipInputStream getStream() throws IOException {
          String path=element.getChildText("path",ns);
          final HttpURLConnection connection=getConnection(path);
          return new ZipInputStream(connection.getInputStream()){
            @Override public void close() throws IOException {
              super.close();
              connection.disconnect();
            }
          }
;
        }
        @Nullable @Override public String getDescription(){
          return element.getChildTextTrim("description",ns);
        }
      }
;
    }
  }
);
}
