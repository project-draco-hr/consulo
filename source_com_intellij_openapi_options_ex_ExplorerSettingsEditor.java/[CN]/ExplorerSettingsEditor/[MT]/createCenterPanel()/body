{
  myComponentPanel=new JPanel(new BorderLayout());
  myOptionsPanel=new JPanel(new BorderLayout()){
    public void updateUI(){
      super.updateUI();
      for (Iterator<Configurable> i=myInitializedConfigurables2Component.keySet().iterator(); i.hasNext(); ) {
        Configurable configurable=i.next();
        if (configurable.equals(mySelectedConfigurable)) {
          continue;
        }
        JComponent component=myInitializedConfigurables2Component.get(configurable);
        SwingUtilities.updateComponentTreeUI(component);
      }
    }
  }
;
  JPanel compoundToolbarPanel=new JPanel(new BorderLayout());
  myGroupTabs=new TabbedPaneWrapper();
  for (int i=0; i < myGroups.length; i++) {
    final ConfigurableGroup group=myGroups[i];
    JComponent toolbar=createGroupToolbar(group,i == 0 ? '1' : 'A');
    myGroupTabs.addTab(group.getShortName(),toolbar);
  }
  myGroupTabs.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      int selectedIndex=myGroupTabs.getSelectedIndex();
      if (selectedIndex >= 0) {
        selectGroup(selectedIndex);
      }
    }
  }
);
  compoundToolbarPanel.add(myGroupTabs.getComponent(),BorderLayout.CENTER);
  myComponentPanel.setBorder(BorderFactory.createRaisedBevelBorder());
  myComponentPanel.add(compoundToolbarPanel,BorderLayout.WEST);
  myOptionsPanel.setBorder(BorderFactory.createEmptyBorder(15,5,2,5));
  myComponentPanel.add(myOptionsPanel,BorderLayout.CENTER);
  myOptionsPanel.setPreferredSize(myPreferredSize);
  myComponentPanel.setFocusable(true);
  myComponentPanel.addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      Configurable[] configurables=mySelectedGroup.getConfigurables();
      int index=myKeySelectedConfigurableIndex;
      if (index == -1)       return;
      int keyCode=e.getKeyCode();
      if (keyCode == KeyEvent.VK_UP) {
        index--;
      }
 else       if (keyCode == KeyEvent.VK_DOWN) {
        index++;
      }
 else {
        Configurable configurableFromMnemonic=ControlPanelMnemonicsUtil.getConfigurableFromMnemonic(e,myGroups);
        if (configurableFromMnemonic == null)         return;
        int keyGroupIndex=-1;
        ConfigurableGroup keyGroup=null;
        int keyIndexInGroup=0;
        for (int i=0; i < myGroups.length; i++) {
          ConfigurableGroup group=myGroups[i];
          int ingroupIdx=ArrayUtil.find(group.getConfigurables(),configurableFromMnemonic);
          if (ingroupIdx != -1) {
            keyGroupIndex=i;
            keyGroup=group;
            keyIndexInGroup=ingroupIdx;
            break;
          }
        }
        if (mySelectedGroup != keyGroup) {
          selectGroup(keyGroupIndex,keyIndexInGroup);
          return;
        }
        index=ControlPanelMnemonicsUtil.getIndexFromKeycode(keyCode,mySelectedGroup == myGroups[0]);
      }
      if (index == -1 || index == configurables.length)       return;
      selectConfigurableLater(configurables[index],index);
    }
  }
);
  return myComponentPanel;
}
