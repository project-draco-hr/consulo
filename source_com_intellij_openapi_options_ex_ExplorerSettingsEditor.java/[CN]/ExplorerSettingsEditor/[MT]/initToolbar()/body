{
  final DefaultActionGroup actionGroup=new DefaultActionGroup();
  char mnemonicStartChar='1';
  for (  ConfigurableGroup group : myGroups) {
    boolean firstActionInGroup=true;
    final Configurable[] configurables=group.getConfigurables();
    for (int i=0; i < configurables.length; i++) {
      Configurable configurable=configurables[i];
      if (myOptionContainers == null || myOptionContainers.contains(configurable)) {
        if (firstActionInGroup) {
          actionGroup.add(new MyHorizontalSeparator(group));
          firstActionInGroup=false;
        }
        actionGroup.add(new MySelectConfigurableAction(configurable,i,(char)(mnemonicStartChar + i)));
      }
    }
    mnemonicStartChar='A';
  }
  final ActionToolbarEx toolbar=(ActionToolbarEx)ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,actionGroup,false);
  toolbar.adjustTheSameSize(true);
  toolbar.setButtonLook(new LeftAlignedIconButtonLook());
  JPanel toolbarPanel=new JPanel(new BorderLayout(2,0));
  toolbarPanel.add(toolbar.getComponent(),BorderLayout.CENTER);
  final JScrollPane scrollPane=new JScrollPane(toolbarPanel,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JScrollPane.HORIZONTAL_SCROLLBAR_NEVER){
    public Dimension getPreferredSize(){
      return actionGroup.getChildrenCount() > 2 ? new Dimension(toolbar.getComponent().getPreferredSize().width + getVerticalScrollBar().getPreferredSize().width + 5,5) : new Dimension(150,-1);
    }
    public Dimension getMinimumSize(){
      return getPreferredSize();
    }
  }
;
  myLeftPane.removeAll();
  scrollPane.getVerticalScrollBar().setUnitIncrement(toolbar.getMaxButtonHeight());
  myLeftPane.add(scrollPane,BorderLayout.CENTER);
}
