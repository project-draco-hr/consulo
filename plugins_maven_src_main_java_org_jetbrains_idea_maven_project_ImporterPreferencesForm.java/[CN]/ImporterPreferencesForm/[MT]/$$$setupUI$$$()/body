{
  panel=new JPanel();
  panel.setLayout(new GridLayoutManager(3,1,new Insets(4,4,4,4),-1,-1));
  final JPanel panel1=new JPanel();
  panel1.setLayout(new GridLayoutManager(5,2,new Insets(0,4,4,4),-1,-1));
  panel.add(panel1,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_NORTH,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));
  panel1.setBorder(BorderFactory.createTitledBorder("Import options"));
  myRegularModulesButton=new JRadioButton();
  myRegularModulesButton.setText("Create regular IntelliJ IDEA modules");
  myRegularModulesButton.setMnemonic('R');
  myRegularModulesButton.setDisplayedMnemonicIndex(7);
  panel1.add(myRegularModulesButton,new GridConstraints(1,0,1,2,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));
  myTemporaryModulesButton=new JRadioButton();
  myTemporaryModulesButton.setText("Create temporary modules (re-import on project opening and synchronization)");
  myTemporaryModulesButton.setMnemonic('C');
  myTemporaryModulesButton.setDisplayedMnemonicIndex(0);
  panel1.add(myTemporaryModulesButton,new GridConstraints(0,0,1,2,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,1,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));
  myModuleDirControl=new TextFieldWithBrowseButton();
  panel1.add(myModuleDirControl,new GridConstraints(2,1,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));
  myModuleDirCheckBox=new JCheckBox();
  myModuleDirCheckBox.setText("Keep .iml files in");
  myModuleDirCheckBox.setMnemonic('I');
  myModuleDirCheckBox.setDisplayedMnemonicIndex(16);
  panel1.add(myModuleDirCheckBox,new GridConstraints(2,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));
  myCreateGroupsCheckBox=new JCheckBox();
  myCreateGroupsCheckBox.setText("Create module groups for multi-module Maven projects");
  myCreateGroupsCheckBox.setMnemonic('M');
  myCreateGroupsCheckBox.setDisplayedMnemonicIndex(7);
  panel1.add(myCreateGroupsCheckBox,new GridConstraints(4,0,1,2,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));
  myLookForNestedCheckBox=new JCheckBox();
  myLookForNestedCheckBox.setText("Exhaustive search (look for Maven projects under other Maven projects)");
  myLookForNestedCheckBox.setMnemonic('X');
  myLookForNestedCheckBox.setDisplayedMnemonicIndex(1);
  panel1.add(myLookForNestedCheckBox,new GridConstraints(3,0,1,2,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));
  final JPanel panel2=new JPanel();
  panel2.setLayout(new GridLayoutManager(4,1,new Insets(0,4,4,4),-1,-1));
  panel.add(panel2,new GridConstraints(1,0,1,1,GridConstraints.ANCHOR_NORTH,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));
  panel2.setBorder(BorderFactory.createTitledBorder("Synchronization"));
  mySynchronizeOnStartCheckBox=new JCheckBox();
  mySynchronizeOnStartCheckBox.setText("Synchronize all modules with Maven projects on project opening");
  mySynchronizeOnStartCheckBox.setMnemonic('Y');
  mySynchronizeOnStartCheckBox.setDisplayedMnemonicIndex(1);
  panel2.add(mySynchronizeOnStartCheckBox,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));
  myDownloadSourcesCheckBox=new JCheckBox();
  myDownloadSourcesCheckBox.setText("Download sources for Maven dependencies");
  myDownloadSourcesCheckBox.setMnemonic('S');
  myDownloadSourcesCheckBox.setDisplayedMnemonicIndex(9);
  panel2.add(myDownloadSourcesCheckBox,new GridConstraints(1,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));
  myDownloadJavadocCheckBox=new JCheckBox();
  myDownloadJavadocCheckBox.setText("Download javadoc for Maven dependencies");
  myDownloadJavadocCheckBox.setMnemonic('J');
  myDownloadJavadocCheckBox.setDisplayedMnemonicIndex(9);
  panel2.add(myDownloadJavadocCheckBox,new GridConstraints(2,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));
  myGenerateSourcesCheckBox=new JCheckBox();
  myGenerateSourcesCheckBox.setText("Generate sources");
  myGenerateSourcesCheckBox.setMnemonic('G');
  myGenerateSourcesCheckBox.setDisplayedMnemonicIndex(0);
  panel2.add(myGenerateSourcesCheckBox,new GridConstraints(3,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));
  final Spacer spacer1=new Spacer();
  panel.add(spacer1,new GridConstraints(2,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_VERTICAL,1,GridConstraints.SIZEPOLICY_WANT_GROW,null,null,null,0,false));
  ButtonGroup buttonGroup;
  buttonGroup=new ButtonGroup();
  buttonGroup.add(myTemporaryModulesButton);
  buttonGroup.add(myRegularModulesButton);
}
