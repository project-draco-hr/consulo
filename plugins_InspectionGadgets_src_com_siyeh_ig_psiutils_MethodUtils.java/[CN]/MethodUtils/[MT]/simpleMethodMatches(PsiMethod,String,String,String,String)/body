{
  final PsiManager manager=method.getManager();
  final PsiElementFactory factory=manager.getElementFactory();
  final GlobalSearchScope scope=method.getResolveScope();
  if (parameterTypeStrings != null) {
    final PsiType[] parameterTypes=new PsiType[parameterTypeStrings.length];
    for (int i=0; i < parameterTypeStrings.length; i++) {
      final String parameterTypeString=parameterTypeStrings[i];
      parameterTypes[i]=factory.createTypeByFQClassName(parameterTypeString,scope);
    }
    if (returnTypeString != null) {
      final PsiType returnType=factory.createTypeByFQClassName(returnTypeString,scope);
      return methodMatches(method,containingClassName,returnType,methodName,parameterTypes);
    }
 else {
      return methodMatches(method,containingClassName,null,methodName,parameterTypes);
    }
  }
 else   if (returnTypeString != null) {
    final PsiType returnType=factory.createTypeByFQClassName(returnTypeString,scope);
    return methodMatches(method,containingClassName,returnType,methodName);
  }
 else {
    return methodMatches(method,containingClassName,null,methodName);
  }
}
