{
  final String name=method.getName();
  if (!methodName.equals(name)) {
    return false;
  }
  final PsiParameterList parameterList=method.getParameterList();
  final PsiParameter[] parameters=parameterList.getParameters();
  if (parameters.length != parameterTypes.length) {
    return false;
  }
  for (int i=0; i < parameters.length; i++) {
    final PsiParameter parameter=parameters[i];
    final PsiType type=parameter.getType();
    final PsiType parameterType=parameterTypes[i];
    if (parameterType != PsiType.NULL && !EquivalenceChecker.typesAreEquivalent(type,parameterType)) {
      return false;
    }
  }
  if (returnType != PsiType.NULL) {
    final PsiType methodReturnType=method.getReturnType();
    if (!EquivalenceChecker.typesAreEquivalent(returnType,methodReturnType)) {
      return false;
    }
  }
  if (containingClassName == null) {
    return true;
  }
  final PsiClass containingClass=method.getContainingClass();
  return ClassUtils.isSubclass(containingClass,containingClassName);
}
