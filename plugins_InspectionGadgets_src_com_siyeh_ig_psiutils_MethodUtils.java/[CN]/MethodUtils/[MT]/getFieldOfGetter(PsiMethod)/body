{
  if (method == null) {
    return null;
  }
  final PsiParameterList parameterList=method.getParameterList();
  final PsiParameter[] parameters=parameterList.getParameters();
  if (parameters.length != 0) {
    return null;
  }
  @NonNls final String name=method.getName();
  if (!name.startsWith("get") && !name.startsWith("is")) {
    return null;
  }
  if (method.hasModifierProperty(PsiModifier.SYNCHRONIZED)) {
    return null;
  }
  final PsiCodeBlock body=method.getBody();
  if (body == null) {
    return null;
  }
  final PsiStatement[] statements=body.getStatements();
  if (statements.length != 1) {
    return null;
  }
  final PsiStatement statement=statements[0];
  if (!(statement instanceof PsiReturnStatement)) {
    return null;
  }
  final PsiReturnStatement returnStatement=(PsiReturnStatement)statement;
  final PsiExpression value=returnStatement.getReturnValue();
  if (value == null) {
    return null;
  }
  if (!(value instanceof PsiReferenceExpression)) {
    return null;
  }
  final PsiReferenceExpression reference=(PsiReferenceExpression)value;
  final PsiExpression qualifier=reference.getQualifierExpression();
  if (qualifier != null && !(qualifier instanceof PsiThisExpression) && !(qualifier instanceof PsiSuperExpression)) {
    return null;
  }
  final PsiElement referent=reference.resolve();
  if (referent == null) {
    return null;
  }
  if (!(referent instanceof PsiField)) {
    return null;
  }
  final PsiField field=(PsiField)referent;
  final PsiType fieldType=field.getType();
  final PsiType returnType=method.getReturnType();
  if (returnType == null) {
    return null;
  }
  if (!fieldType.equalsToText(returnType.getCanonicalText())) {
    return null;
  }
  final PsiClass fieldContainingClass=field.getContainingClass();
  final PsiClass methodContainingClass=method.getContainingClass();
  if (InheritanceUtil.isCorrectDescendant(methodContainingClass,fieldContainingClass,true)) {
    return field;
  }
 else {
    return null;
  }
}
