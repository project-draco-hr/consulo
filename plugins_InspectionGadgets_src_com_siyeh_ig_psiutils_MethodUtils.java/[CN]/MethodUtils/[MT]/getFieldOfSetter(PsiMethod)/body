{
  if (method == null) {
    return null;
  }
  final PsiParameterList parameterList=method.getParameterList();
  final PsiParameter[] parameters=parameterList.getParameters();
  if (parameters.length != 1) {
    return null;
  }
  @NonNls final String name=method.getName();
  if (!name.startsWith("set")) {
    return null;
  }
  if (method.hasModifierProperty(PsiModifier.SYNCHRONIZED)) {
    return null;
  }
  final PsiCodeBlock body=method.getBody();
  if (body == null) {
    return null;
  }
  final PsiStatement[] statements=body.getStatements();
  if (statements.length != 1) {
    return null;
  }
  final PsiStatement statement=statements[0];
  if (!(statement instanceof PsiExpressionStatement)) {
    return null;
  }
  final PsiExpressionStatement possibleAssignmentStatement=(PsiExpressionStatement)statement;
  final PsiExpression possibleAssignment=possibleAssignmentStatement.getExpression();
  if (!(possibleAssignment instanceof PsiAssignmentExpression)) {
    return null;
  }
  final PsiAssignmentExpression assignment=(PsiAssignmentExpression)possibleAssignment;
  final PsiJavaToken sign=assignment.getOperationSign();
  if (!JavaTokenType.EQ.equals(sign.getTokenType())) {
    return null;
  }
  final PsiExpression lhs=assignment.getLExpression();
  if (!(lhs instanceof PsiReferenceExpression)) {
    return null;
  }
  final PsiReferenceExpression reference=(PsiReferenceExpression)lhs;
  final PsiExpression qualifier=reference.getQualifierExpression();
  if (qualifier != null && !(qualifier instanceof PsiThisExpression) && !(qualifier instanceof PsiSuperExpression)) {
    return null;
  }
  final PsiElement referent=reference.resolve();
  if (referent == null) {
    return null;
  }
  if (!(referent instanceof PsiField)) {
    return null;
  }
  final PsiField field=(PsiField)referent;
  final PsiClass fieldContainingClass=field.getContainingClass();
  final PsiClass methodContainingClass=method.getContainingClass();
  if (!InheritanceUtil.isCorrectDescendant(methodContainingClass,fieldContainingClass,true)) {
    return null;
  }
  final PsiExpression rhs=assignment.getRExpression();
  if (!(rhs instanceof PsiReferenceExpression)) {
    return null;
  }
  final PsiReferenceExpression rReference=(PsiReferenceExpression)rhs;
  final PsiExpression rQualifier=rReference.getQualifierExpression();
  if (rQualifier != null) {
    return null;
  }
  final PsiElement rReferent=rReference.resolve();
  if (rReferent == null) {
    return null;
  }
  if (!(rReferent instanceof PsiParameter)) {
    return null;
  }
  final PsiType fieldType=field.getType();
  final PsiType parameterType=((PsiVariable)rReferent).getType();
  if (fieldType.equalsToText(parameterType.getCanonicalText())) {
    return field;
  }
 else {
    return null;
  }
}
