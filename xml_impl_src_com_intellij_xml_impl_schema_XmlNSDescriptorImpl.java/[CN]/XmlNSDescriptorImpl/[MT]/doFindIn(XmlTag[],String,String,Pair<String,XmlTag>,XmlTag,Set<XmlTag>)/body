{
  for (  final XmlTag tag : tags) {
    if (equalsToSchemaName(tag,"complexType")) {
      if (name == null) {
        CachedValue<TypeDescriptor> value=createAndPutTypesCachedValue(tag,pair);
        return value.getValue();
      }
      String nameAttribute=tag.getAttributeValue("name");
      if (isSameName(name,namespace,nameAttribute)) {
        CachedValue<TypeDescriptor> cachedValue=createAndPutTypesCachedValue(tag,pair);
        return cachedValue.getValue();
      }
    }
 else     if (equalsToSchemaName(tag,"simpleType")) {
      if (name == null) {
        CachedValue<TypeDescriptor> value=createAndPutTypesCachedValueSimpleType(tag,pair);
        return value.getValue();
      }
      String nameAttribute=tag.getAttributeValue("name");
      if (isSameName(name,namespace,nameAttribute)) {
        CachedValue<TypeDescriptor> cachedValue=createAndPutTypesCachedValue(tag,pair);
        return cachedValue.getValue();
      }
    }
 else     if (equalsToSchemaName(tag,INCLUDE_TAG_NAME) || (equalsToSchemaName(tag,IMPORT_TAG_NAME) && (namespace == null || !namespace.equals(getDefaultNamespace())))) {
      final String schemaLocation=tag.getAttributeValue("schemaLocation");
      if (schemaLocation != null) {
        final XmlFile xmlFile=XmlUtil.findNamespace(rootTag.getContainingFile(),schemaLocation);
        if (xmlFile != null) {
          final XmlDocument document=xmlFile.getDocument();
          if (document != null) {
            final Set<XmlTag> visited1=visited;
            final CachedValue<TypeDescriptor> value=tag.getManager().getCachedValuesManager().createCachedValue(new CachedValueProvider<TypeDescriptor>(){
              public Result<TypeDescriptor> compute(){
                final String currentName=tag.getAttributeValue("name");
                if ((currentName != null && !currentName.equals(XmlUtil.findLocalNameByQualifiedName(name))) || !xmlFile.isValid() || xmlFile.getDocument() == null) {
                  myTypesMap.remove(pair);
                  return new Result<TypeDescriptor>(null);
                }
                final XmlDocument document=xmlFile.getDocument();
                final XmlNSDescriptorImpl nsDescriptor=findNSDescriptor(tag,document);
                if (nsDescriptor == null) {
                  myTypesMap.remove(pair);
                  return new Result<TypeDescriptor>(null);
                }
                final XmlTag rTag=document.getRootTag();
                final TypeDescriptor complexTypeDescriptor=(nsDescriptor != XmlNSDescriptorImpl.this) ? nsDescriptor.findTypeDescriptor(name,namespace) : nsDescriptor.findTypeDescriptorImpl(rTag,name,namespace,visited1);
                return new Result<TypeDescriptor>(complexTypeDescriptor,rTag);
              }
            }
,false);
            if (value.getValue() != null) {
              myTypesMap.put(pair,value);
              return value.getValue();
            }
          }
        }
      }
    }
 else     if (equalsToSchemaName(tag,REDEFINE_TAG_NAME)) {
      final XmlTag[] subTags=tag.getSubTags();
      TypeDescriptor descriptor=doFindIn(subTags,name,namespace,pair,rootTag,visited);
      if (descriptor != null)       return descriptor;
      final XmlNSDescriptorImpl nsDescriptor=getRedefinedElementDescriptor(tag);
      if (nsDescriptor != null) {
        final XmlTag redefinedRootTag=((XmlDocument)nsDescriptor.getDeclaration()).getRootTag();
        descriptor=doFindIn(redefinedRootTag.getSubTags(),name,namespace,pair,redefinedRootTag,visited);
        if (descriptor != null)         return descriptor;
      }
    }
  }
  return null;
}
