{
  final PsiBinaryExpression exp=(PsiBinaryExpression)element;
  final PsiExpression lhs=exp.getLOperand();
  final PsiExpression rhs=exp.getROperand();
  if (rhs == null) {
    return;
  }
  final PsiExpression strippedLhs=ParenthesesUtils.stripParentheses(lhs);
  if (strippedLhs == null) {
    return;
  }
  final PsiExpression strippedRhs=ParenthesesUtils.stripParentheses(rhs);
  if (strippedRhs == null) {
    return;
  }
  final PsiJavaToken operationSign=exp.getOperationSign();
  final IElementType tokenType=operationSign.getTokenType();
  @NonNls final String expString;
  if (tokenType.equals(JavaTokenType.EQEQ)) {
    if (ParenthesesUtils.getPrecendence(strippedLhs) > ParenthesesUtils.METHOD_CALL_PRECEDENCE) {
      expString='(' + strippedLhs.getText() + ").equals("+ strippedRhs.getText()+ ')';
    }
 else {
      expString=strippedLhs.getText() + ".equals(" + strippedRhs.getText()+ ')';
    }
  }
 else {
    if (ParenthesesUtils.getPrecendence(strippedLhs) > ParenthesesUtils.METHOD_CALL_PRECEDENCE) {
      expString="!(" + strippedLhs.getText() + ").equals("+ strippedRhs.getText()+ ')';
    }
 else {
      expString='!' + strippedLhs.getText() + ".equals("+ strippedRhs.getText()+ ')';
    }
  }
  replaceExpression(expString,exp);
}
