{
  if (element instanceof PsiClass) {
    return PsiClassType.EMPTY_ARRAY;
  }
 else   if (element instanceof PsiMethodCallExpression) {
    PsiReferenceExpression methodRef=((PsiMethodCallExpression)element).getMethodExpression();
    PsiMethod method=(PsiMethod)methodRef.resolve();
    return getExceptionsByMethodAndChildren(element,method);
  }
 else   if (element instanceof PsiNewExpression) {
    PsiMethod constructor=((PsiNewExpression)element).resolveConstructor();
    return getExceptionsByMethodAndChildren(element,constructor);
  }
 else   if (element instanceof PsiThrowStatement) {
    PsiExpression expr=((PsiThrowStatement)element).getException();
    if (expr == null)     return PsiClassType.EMPTY_ARRAY;
    PsiType exception=expr.getType();
    List<PsiClassType> array=new ArrayList<PsiClassType>();
    if (exception instanceof PsiClassType) {
      array.add((PsiClassType)exception);
    }
    addExceptions(array,getThrownExceptions(expr));
    return array.toArray(new PsiClassType[array.size()]);
  }
 else   if (element instanceof PsiTryStatement) {
    PsiTryStatement tryStatement=(PsiTryStatement)element;
    final PsiCodeBlock tryBlock=tryStatement.getTryBlock();
    List<PsiClassType> array=new ArrayList<PsiClassType>();
    if (tryBlock != null) {
      PsiClassType[] exceptions=getThrownExceptions(tryBlock);
      for (      PsiClassType exception : exceptions) {
        array.add(exception);
      }
    }
    PsiParameter[] parameters=tryStatement.getCatchBlockParameters();
    for (    PsiParameter parm : parameters) {
      PsiType exception=parm.getType();
      for (int j=array.size() - 1; j >= 0; j--) {
        PsiClassType exception1=array.get(j);
        if (exception.isAssignableFrom(exception1)) {
          array.remove(exception1);
        }
      }
    }
    PsiCodeBlock[] catchBlocks=tryStatement.getCatchBlocks();
    for (    PsiCodeBlock catchBlock : catchBlocks) {
      addExceptions(array,getThrownExceptions(catchBlock));
    }
    PsiCodeBlock finallyBlock=tryStatement.getFinallyBlock();
    if (finallyBlock != null) {
      try {
        ControlFlow flow=ControlFlowFactory.getControlFlow(finallyBlock,LocalsOrMyInstanceFieldsControlFlowPolicy.getInstance(),false);
        int completionReasons=ControlFlowUtil.getCompletionReasons(flow,0,flow.getSize());
        PsiClassType[] thrownExceptions=getThrownExceptions(finallyBlock);
        if ((completionReasons & ControlFlowUtil.NORMAL_COMPLETION_REASON) == 0) {
          array=new ArrayList<PsiClassType>(Arrays.asList(thrownExceptions));
        }
 else {
          addExceptions(array,thrownExceptions);
        }
      }
 catch (      AnalysisCanceledException e) {
      }
    }
    return array.toArray(new PsiClassType[array.size()]);
  }
 else {
    return getThrownExceptions(element.getChildren());
  }
}
