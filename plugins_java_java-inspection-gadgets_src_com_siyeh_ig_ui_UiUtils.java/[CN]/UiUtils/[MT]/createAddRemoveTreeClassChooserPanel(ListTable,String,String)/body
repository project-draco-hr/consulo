{
  final ClassFilter filter;
  if (ancestorClasses.length == 0) {
    filter=ClassFilter.ALL;
  }
 else {
    filter=new SubclassFilter(ancestorClasses);
  }
  return ToolbarDecorator.createDecorator(table).setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      final DataContext dataContext=DataManager.getInstance().getDataContext(table);
      final Project project=CommonDataKeys.PROJECT.getData(dataContext);
      if (project == null) {
        return;
      }
      final TreeClassChooserFactory chooserFactory=TreeClassChooserFactory.getInstance(project);
      final TreeClassChooser classChooser=chooserFactory.createWithInnerClassesScopeChooser(chooserTitle,GlobalSearchScope.allScope(project),filter,null);
      classChooser.showDialog();
      final PsiClass selectedClass=classChooser.getSelected();
      if (selectedClass == null) {
        return;
      }
      final String qualifiedName=selectedClass.getQualifiedName();
      final ListWrappingTableModel tableModel=table.getModel();
      final int index=tableModel.indexOf(qualifiedName,0);
      final int rowIndex;
      if (index < 0) {
        tableModel.addRow(qualifiedName);
        rowIndex=tableModel.getRowCount() - 1;
      }
 else {
        rowIndex=index;
      }
      final ListSelectionModel selectionModel=table.getSelectionModel();
      selectionModel.setSelectionInterval(rowIndex,rowIndex);
      EventQueue.invokeLater(new Runnable(){
        @Override public void run(){
          final Rectangle rectangle=table.getCellRect(rowIndex,0,true);
          table.scrollRectToVisible(rectangle);
        }
      }
);
    }
  }
).setRemoveAction(new RemoveAction(table)).disableUpDownActions().createPanel();
}
