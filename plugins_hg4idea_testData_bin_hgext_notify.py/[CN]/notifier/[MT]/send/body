def send(self, ctx, count, data):
    'send message.'
    p = email.Parser.Parser()
    try:
        msg = p.parsestr(data)
    except email.Errors.MessageParseError as inst:
        raise util.Abort(inst)
    (sender, subject) = (msg['From'], msg['Subject'])
    del msg['From'], msg['Subject']
    if (not msg.is_multipart()):
        headers = msg.items()
        payload = msg.get_payload()
        msg = mail.mimeencode(self.ui, payload, self.charsets, self.test)
        for (k, v) in headers:
            msg[k] = v
    msg['Date'] = util.datestr(format='%a, %d %b %Y %H:%M:%S %1%2')
    if (not subject):
        if (count > 1):
            subject = (_('%s: %d new changesets') % (self.root, count))
        else:
            s = ctx.description().lstrip().split('\n', 1)[0].rstrip()
            subject = ('%s: %s' % (self.root, s))
    maxsubject = int(self.ui.config('notify', 'maxsubject', 67))
    if (maxsubject and (len(subject) > maxsubject)):
        subject = (subject[:(maxsubject - 3)] + '...')
    msg['Subject'] = mail.headencode(self.ui, subject, self.charsets, self.test)
    if (not sender):
        sender = (self.ui.config('email', 'from') or self.ui.username())
    if (('@' not in sender) or ('@localhost' in sender)):
        sender = self.fixmail(sender)
    msg['From'] = mail.addressencode(self.ui, sender, self.charsets, self.test)
    msg['X-Hg-Notification'] = ('changeset %s' % ctx)
    if (not msg['Message-Id']):
        msg['Message-Id'] = ('<hg.%s.%s.%s@%s>' % (ctx, int(time.time()), hash(self.repo.root), socket.getfqdn()))
    msg['To'] = ', '.join(self.subs)
    msgtext = msg.as_string()
    if self.test:
        self.ui.write(msgtext)
        if (not msgtext.endswith('\n')):
            self.ui.write('\n')
    else:
        self.ui.status((_('notify: sending %d subscribers %d changes\n') % (len(self.subs), count)))
        mail.sendmail(self.ui, util.email(msg['From']), self.subs, msgtext)
