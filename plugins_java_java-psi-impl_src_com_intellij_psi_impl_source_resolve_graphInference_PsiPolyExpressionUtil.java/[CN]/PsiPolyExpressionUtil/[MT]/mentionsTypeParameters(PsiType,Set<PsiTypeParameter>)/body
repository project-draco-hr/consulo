{
  if (returnType == null)   return false;
  return returnType.accept(new PsiTypeVisitor<Boolean>(){
    @Nullable @Override public Boolean visitType(    PsiType type){
      return false;
    }
    @Nullable @Override public Boolean visitWildcardType(    PsiWildcardType wildcardType){
      final PsiType bound=wildcardType.getBound();
      if (bound != null) {
        return bound.accept(this);
      }
      return false;
    }
    @Nullable @Override public Boolean visitClassType(    PsiClassType classType){
      for (      PsiType type : classType.getParameters()) {
        if (type.accept(this))         return true;
      }
      final PsiClass psiClass=classType.resolve();
      return psiClass instanceof PsiTypeParameter && typeParameters.contains(psiClass);
    }
    @Nullable @Override public Boolean visitArrayType(    PsiArrayType arrayType){
      return arrayType.getComponentType().accept(this);
    }
  }
);
}
