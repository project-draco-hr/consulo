{
  super(injection,project);
  $$$setupUI$$$();
  final String[] languageIDs=InjectedLanguage.getAvailableLanguageIDs();
  Arrays.sort(languageIDs);
  myLanguage.setModel(new DefaultComboBoxModel(languageIDs));
  myLanguage.setRenderer(new HtmlListCellRenderer<String>(myLanguage.getRenderer()){
    final Set<String> IDs=new HashSet<String>(Arrays.asList(languageIDs));
    @Override protected void doCustomize(    JList list,    String s,    int index,    boolean selected,    boolean hasFocus){
      final SimpleTextAttributes attributes=IDs.contains(s) ? SimpleTextAttributes.REGULAR_ATTRIBUTES : SimpleTextAttributes.ERROR_ATTRIBUTES;
      append(s,attributes);
      final Language language=InjectedLanguage.findLanguageById(s);
      if (language != null) {
        final FileType fileType=language.getAssociatedFileType();
        if (fileType != null) {
          setIcon(fileType.getIcon());
          append(" ",SimpleTextAttributes.REGULAR_ATTRIBUTES);
          append("(" + fileType.getDescription() + ")",SimpleTextAttributes.GRAYED_ATTRIBUTES);
        }
      }
    }
  }
);
  myLanguage.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      if (e.getStateChange() == ItemEvent.SELECTED) {
        updateHighlighters();
      }
    }
  }
);
  myRoot.addAncestorListener(new AncestorListener(){
    public void ancestorAdded(    AncestorEvent event){
      updateHighlighters();
    }
    public void ancestorRemoved(    AncestorEvent event){
    }
    public void ancestorMoved(    AncestorEvent event){
    }
  }
);
  ShiftTabAction.attachTo(myPrefix);
  ShiftTabAction.attachTo(mySuffix);
}
