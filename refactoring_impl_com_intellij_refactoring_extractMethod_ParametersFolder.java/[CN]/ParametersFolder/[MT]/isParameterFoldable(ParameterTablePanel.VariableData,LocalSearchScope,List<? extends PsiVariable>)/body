{
  final List<PsiExpression> mentionedInExpressions=getMentionedExpressions(data.variable,scope);
  if (mentionedInExpressions == null)   return false;
  int currentRank=0;
  PsiExpression mostRanked=null;
  for (int i=mentionedInExpressions.size() - 1; i >= 0; i--) {
    PsiExpression expression=mentionedInExpressions.get(i);
    if (expression instanceof PsiArrayAccessExpression) {
      mostRanked=expression;
      myFoldingSelectedByDefault=true;
      break;
    }
    final int r=findUsedVariables(data,inputVariables,expression).size();
    if (currentRank < r) {
      currentRank=r;
      mostRanked=expression;
    }
  }
  if (mostRanked != null) {
    myExpressions.put(data.variable,mostRanked);
    data.type=mostRanked.getType();
    final JavaCodeStyleManager codeStyleManager=JavaCodeStyleManager.getInstance(mostRanked.getProject());
    final SuggestedNameInfo nameInfo=codeStyleManager.suggestVariableName(VariableKind.PARAMETER,null,mostRanked,data.type);
    data.name=nameInfo.names[0];
    setUniqueName(data);
  }
  return mostRanked != null;
}
