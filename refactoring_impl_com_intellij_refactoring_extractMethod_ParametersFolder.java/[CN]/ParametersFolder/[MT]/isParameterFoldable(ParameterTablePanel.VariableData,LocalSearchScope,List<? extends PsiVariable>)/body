{
  final Set<PsiExpression> mentionedInExpressions=getMentionedExpressions(data.variable,scope);
  if (mentionedInExpressions == null)   return false;
  final TObjectIntHashMap<PsiExpression> ranking=new TObjectIntHashMap<PsiExpression>();
  for (  PsiExpression expression : mentionedInExpressions) {
    ranking.put(expression,findUsedVariables(data,inputVariables,expression).size());
  }
  PsiExpression mostRanked=null;
  int currenRank=0;
  for (  Object o : ranking.keys()) {
    final int r=ranking.get((PsiExpression)o);
    if (r > currenRank) {
      currenRank=r;
      mostRanked=(PsiExpression)o;
    }
  }
  if (mostRanked != null) {
    myExpressions.put(data.variable,mostRanked);
    data.type=mostRanked.getType();
    final JavaCodeStyleManager codeStyleManager=JavaCodeStyleManager.getInstance(mostRanked.getProject());
    final SuggestedNameInfo nameInfo=codeStyleManager.suggestVariableName(VariableKind.PARAMETER,null,mostRanked,data.type);
    data.name=nameInfo.names[0];
    setUniqueName(data);
  }
  return mostRanked != null;
}
