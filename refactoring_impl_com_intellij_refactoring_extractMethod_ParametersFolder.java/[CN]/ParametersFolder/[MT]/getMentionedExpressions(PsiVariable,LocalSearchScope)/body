{
  if (myMentionedInExpressions.containsKey(var))   return myMentionedInExpressions.get(var);
  final PsiElement[] scopeElements=scope.getScope();
  List<PsiExpression> expressions=null;
  for (  PsiReference reference : ReferencesSearch.search(var,scope)) {
    PsiElement expression=reference.getElement();
    if (expressions == null) {
      expressions=new ArrayList<PsiExpression>();
      while (expression != null) {
        if (PsiUtil.isAccessedForWriting((PsiExpression)expression))         return null;
        for (        PsiElement scopeElement : scopeElements) {
          if (PsiTreeUtil.isAncestor(expression,scopeElement,true)) {
            expression=null;
            break;
          }
        }
        if (expression == null)         break;
        if (((PsiExpression)expression).getType() != PsiType.VOID) {
          expressions.add((PsiExpression)expression);
        }
        expression=PsiTreeUtil.getParentOfType(expression,PsiExpression.class);
      }
    }
 else {
      for (Iterator<PsiExpression> iterator=expressions.iterator(); iterator.hasNext(); ) {
        if (findEquivalent(iterator.next(),expression) == null) {
          iterator.remove();
        }
      }
    }
  }
  myMentionedInExpressions.put(var,expressions);
  return expressions;
}
