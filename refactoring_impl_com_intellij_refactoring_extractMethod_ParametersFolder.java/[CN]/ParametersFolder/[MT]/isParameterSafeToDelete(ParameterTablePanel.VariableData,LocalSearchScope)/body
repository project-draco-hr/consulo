{
  Next:   for (  PsiReference reference : ReferencesSearch.search(data.variable,scope)) {
    PsiElement expression=reference.getElement();
    while (expression != null) {
      for (      PsiExpression psiExpression : myExpressions.values()) {
        if (PsiEquivalenceUtil.areElementsEquivalent(expression,psiExpression)) {
          continue Next;
        }
      }
      expression=PsiTreeUtil.getParentOfType(expression,PsiExpression.class);
    }
    return false;
  }
  final PsiExpression psiExpression=myExpressions.get(data.variable);
  if (psiExpression == null)   return true;
  for (  PsiVariable variable : myExpressions.keySet()) {
    if (variable != data.variable && !myDeleted.contains(variable)) {
      final PsiExpression expr=myExpressions.get(variable);
      if (expr != null && PsiEquivalenceUtil.areElementsEquivalent(expr,psiExpression)) {
        myDeleted.add(data.variable);
        return true;
      }
    }
  }
  return false;
}
