{
  PsiClassType[] superClassTypes=psiClass.getSuperTypes();
  for (  PsiClassType superClassType : superClassTypes) {
    PsiClass resolvedSuperClass=superClassType.resolve();
    if (resolvedSuperClass == null)     continue;
    PsiMethod[] superClassMethods=resolvedSuperClass.getMethods();
    for (    PsiMethod superClassMethod : superClassMethods) {
      MethodSignature superMethodSignature=superClassMethod.getHierarchicalMethodSignature();
      if (superMethodSignature.equals(getHierarchicalMethodSignature())) {
        deepestMethod[0]=superClassMethod;
        break;
      }
    }
    findDeepestSuperMethodForInterface(deepestMethod,resolvedSuperClass);
  }
  return deepestMethod[0];
}
