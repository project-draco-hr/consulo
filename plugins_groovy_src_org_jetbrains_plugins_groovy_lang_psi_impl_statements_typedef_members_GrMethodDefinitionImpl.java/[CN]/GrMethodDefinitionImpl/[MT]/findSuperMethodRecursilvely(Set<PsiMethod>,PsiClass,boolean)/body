{
  PsiClassType[] superClassTypes=psiClass.getSuperTypes();
  for (  PsiClassType superClassType : superClassTypes) {
    PsiClass resolvedSuperClass=superClassType.resolve();
    if (resolvedSuperClass == null)     continue;
    PsiMethod[] superClassMethods=resolvedSuperClass.getMethods();
    for (    PsiMethod superClassMethod : superClassMethods) {
      MethodSignature superMethodSignature=superClassMethod.getHierarchicalMethodSignature();
      MethodSignature thisMethodSignature=getHierarchicalMethodSignature();
      if (superMethodSignature.equals(thisMethodSignature)) {
        if (allowStatic || !superClassMethod.getModifierList().hasExplicitModifier(PsiModifier.STATIC)) {
          methods.add(superClassMethod);
        }
      }
    }
    findSuperMethodRecursilvely(methods,resolvedSuperClass,allowStatic);
  }
}
