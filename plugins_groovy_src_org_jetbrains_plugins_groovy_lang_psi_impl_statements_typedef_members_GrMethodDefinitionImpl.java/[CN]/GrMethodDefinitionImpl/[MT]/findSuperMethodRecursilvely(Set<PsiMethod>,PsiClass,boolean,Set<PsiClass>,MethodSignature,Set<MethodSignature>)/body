{
  if (visited.contains(psiClass))   return;
  visited.add(psiClass);
  PsiClassType[] superClassTypes=psiClass.getSuperTypes();
  for (  PsiClassType superClassType : superClassTypes) {
    PsiClass resolvedSuperClass=superClassType.resolve();
    if (resolvedSuperClass == null)     continue;
    PsiMethod[] superClassMethods=resolvedSuperClass.getMethods();
    final HashSet<MethodSignature> supers=new HashSet<MethodSignature>(3);
    for (    PsiMethod superClassMethod : superClassMethods) {
      MethodSignature superMethodSignature=createMethodSignature(superClassMethod);
      if (PsiImplUtil.isExtendsSignature(superMethodSignature,signature) && !dominated(superMethodSignature,discoveredSupers)) {
        if (allowStatic || !superClassMethod.getModifierList().hasExplicitModifier(PsiModifier.STATIC)) {
          methods.add(superClassMethod);
          supers.add(superMethodSignature);
          discoveredSupers.add(superMethodSignature);
        }
      }
    }
    findSuperMethodRecursilvely(methods,resolvedSuperClass,allowStatic,visited,signature,discoveredSupers);
    discoveredSupers.removeAll(supers);
  }
}
