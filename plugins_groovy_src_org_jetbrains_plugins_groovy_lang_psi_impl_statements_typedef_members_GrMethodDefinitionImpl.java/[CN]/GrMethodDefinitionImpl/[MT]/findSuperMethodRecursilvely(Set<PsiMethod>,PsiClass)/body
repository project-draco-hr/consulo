{
  PsiClassType[] superClassTypes=psiClass.getSuperTypes();
  for (  PsiClassType superClassType : superClassTypes) {
    PsiClass resolvedSuperClass=superClassType.resolve();
    if (resolvedSuperClass == null)     continue;
    PsiMethod[] superClassMethods=resolvedSuperClass.getMethods();
    for (    PsiMethod superClassMethod : superClassMethods) {
      MethodSignature superMethodSignature=superClassMethod.getSignature(PsiSubstitutor.EMPTY);
      MethodSignature thisMethodSignature=getSignature(PsiSubstitutor.EMPTY);
      if (superMethodSignature.equals(thisMethodSignature) && !superClassMethod.getModifierList().hasExplicitModifier(PsiModifier.STATIC)) {
        methods.add(superClassMethod);
      }
    }
    findSuperMethodRecursilvely(methods,resolvedSuperClass);
  }
}
