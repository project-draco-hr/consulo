{
  PsiClassType[] superClassTypes=psiClass.getSuperTypes();
  PsiMethod deepestInterfacesHierarchyMethod=null;
  for (  PsiClassType superClassType : superClassTypes) {
    PsiClass resolvedSuperClass=superClassType.resolve();
    if (resolvedSuperClass == null)     continue;
    if (resolvedSuperClass.isInterface()) {
      deepestInterfacesHierarchyMethod=findDeepestSuperMethodForInterface(new PsiMethod[1],resolvedSuperClass);
      continue;
    }
    PsiMethod[] superClassMethods=resolvedSuperClass.getMethods();
    for (    PsiMethod superClassMethod : superClassMethods) {
      MethodSignature superMethodSignature=superClassMethod.getHierarchicalMethodSignature();
      if (superMethodSignature.equals(getHierarchicalMethodSignature()) && !superClassMethod.getModifierList().hasExplicitModifier(PsiModifier.STATIC)) {
        signaturesToMethods.put(superMethodSignature,superClassMethod);
      }
    }
    findDeepestSuperMethodForClass(signaturesToMethods,resolvedSuperClass);
  }
  List<PsiMethod> values=new ArrayList<PsiMethod>();
  values.addAll(signaturesToMethods.values());
  if (deepestInterfacesHierarchyMethod != null) {
    values.add(deepestInterfacesHierarchyMethod);
  }
  return values.toArray(PsiMethod.EMPTY_ARRAY);
}
