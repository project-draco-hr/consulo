{
  final List<PluginDownloader> downloaded=new ArrayList<PluginDownloader>();
  final Set<String> failed=new HashSet<String>();
  for (  String host : getPluginHosts(hostsConfigurable)) {
    try {
      checkPluginsHost(host,downloaded,true,indicator);
    }
 catch (    ProcessCanceledException e) {
      return null;
    }
catch (    Exception e) {
      LOG.info(e);
      failed.add(host);
    }
  }
  final Map<String,IdeaPluginDescriptor> toUpdate=new HashMap<String,IdeaPluginDescriptor>();
  final IdeaPluginDescriptor[] installedPlugins=PluginManager.getPlugins();
  for (  IdeaPluginDescriptor installedPlugin : installedPlugins) {
    if (!installedPlugin.isBundled()) {
      toUpdate.put(installedPlugin.getPluginId().getIdString(),installedPlugin);
    }
  }
  final PluginManagerUISettings updateSettings=PluginManagerUISettings.getInstance();
  updateSettings.myOutdatedPlugins.clear();
  if (!toUpdate.isEmpty()) {
    try {
      final ArrayList<IdeaPluginDescriptor> process=RepositoryHelper.process(indicator);
      for (      IdeaPluginDescriptor loadedPlugin : process) {
        final String idString=loadedPlugin.getPluginId().getIdString();
        final IdeaPluginDescriptor installedPlugin=toUpdate.get(idString);
        if (installedPlugin != null) {
          if (StringUtil.compareVersionNumbers(loadedPlugin.getVersion(),installedPlugin.getVersion()) > 0) {
            updateSettings.myOutdatedPlugins.add(idString);
            if (installedPlugin.isEnabled()) {
              final PluginDownloader downloader=PluginDownloader.createDownloader(loadedPlugin);
              if (downloader.prepareToInstall()) {
                downloaded.add(downloader);
              }
            }
          }
        }
      }
    }
 catch (    ProcessCanceledException ignore) {
      return null;
    }
catch (    Exception e) {
      showErrorMessage(showErrorDialog,e.getMessage());
    }
  }
  if (!failed.isEmpty()) {
    showErrorMessage(showErrorDialog,IdeBundle.message("connection.failed.message",StringUtil.join(failed,",")));
  }
  return downloaded.isEmpty() ? null : downloaded;
}
