{
  InputStream inputStream=loadVersionInfo(host);
  if (inputStream == null)   return false;
  final Document document;
  try {
    document=JDOMUtil.loadDocument(inputStream);
  }
 catch (  JDOMException e) {
    return false;
  }
  inputStream=loadVersionInfo(host);
  if (inputStream == null)   return false;
  final List<IdeaPluginDescriptor> descriptors=RepositoryHelper.loadPluginsFromDescription(inputStream,indicator);
  for (  IdeaPluginDescriptor descriptor : descriptors) {
    ((PluginNode)descriptor).setRepositoryName(host);
    downloaded.add(PluginDownloader.createDownloader(descriptor));
  }
  boolean success=true;
  for (  Element plugin : document.getRootElement().getChildren("plugin")) {
    final String pluginId=plugin.getAttributeValue("id");
    final String pluginUrl=plugin.getAttributeValue("url");
    final String pluginVersion=plugin.getAttributeValue("version");
    final Element descriptionElement=plugin.getChild("description");
    final String description;
    if (descriptionElement != null) {
      description=descriptionElement.getText();
    }
 else {
      description=null;
    }
    final List<PluginId> dependsPlugins=new ArrayList<PluginId>();
    final List<Element> depends=plugin.getChildren("depends");
    for (    Element depend : depends) {
      dependsPlugins.add(PluginId.getId(depend.getText()));
    }
    if (pluginId == null) {
      LOGGER.info("plugin id should not be null");
      success=false;
      continue;
    }
    if (pluginUrl == null) {
      LOGGER.info("plugin url should not be null");
      success=false;
      continue;
    }
    final VirtualFile pluginFile=PluginDownloader.findPluginFile(pluginUrl,host);
    if (pluginFile == null)     continue;
    if (collectToUpdate) {
      final String finalPluginUrl=getPluginUrl(pluginFile);
      final Runnable updatePluginRunnable=new Runnable(){
        @Override public void run(){
          try {
            final ProgressIndicator progressIndicator=ProgressManager.getInstance().getProgressIndicator();
            if (progressIndicator != null) {
              progressIndicator.setText2(finalPluginUrl);
            }
            final PluginDownloader downloader=new PluginDownloader(pluginId,finalPluginUrl,pluginVersion);
            if (downloader.prepareToInstall()) {
              downloaded.add(downloader);
            }
          }
 catch (          IOException e) {
            LOGGER.info(e);
          }
        }
      }
;
      if (ApplicationManager.getApplication().isDispatchThread()) {
        ProgressManager.getInstance().runProcessWithProgressSynchronously(updatePluginRunnable,IdeBundle.message("update.uploading.plugin.progress.title"),true,null);
      }
 else {
        updatePluginRunnable.run();
      }
    }
 else {
      final PluginDownloader downloader=new PluginDownloader(pluginId,pluginUrl,pluginVersion);
      downloader.setDescription(description);
      downloader.setDepends(dependsPlugins);
      downloaded.add(downloader);
    }
  }
  return success;
}
