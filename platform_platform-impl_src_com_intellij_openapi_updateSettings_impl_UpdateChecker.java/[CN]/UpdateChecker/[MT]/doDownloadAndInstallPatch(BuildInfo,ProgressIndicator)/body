{
  PatchInfo patch=newVersion.findPatchForCurrentBuild();
  if (patch == null)   throw new IOException("No patch is available for current version");
  String productCode=ApplicationInfo.getInstance().getBuild().getProductCode();
  String osSuffix="";
  if (SystemInfo.isWindows)   osSuffix="-win";
 else   if (SystemInfo.isMac)   osSuffix="-mac";
 else   if (SystemInfo.isUnix)   osSuffix="-unix";
  String fromBuildNumber=patch.getFromBuild().asStringWithoutProductCode();
  String toBuildNumber=newVersion.getNumber().asStringWithoutProductCode();
  String fileName=productCode + "-" + fromBuildNumber+ "-"+ toBuildNumber+ "-patch"+ osSuffix+ ".jar";
  String platform=PlatformUtils.getPlatformPrefix();
  File tempFile=FileUtil.createTempFile(platform,"patch",true);
  OutputStream out=new BufferedOutputStream(new FileOutputStream(tempFile));
  try {
    URLConnection connection=new URL(new URL(getPatchesUrl()),fileName).openConnection();
    try {
      InputStream in=UrlConnectionUtil.getConnectionInputStreamWithException(connection,i);
      try {
        int total=connection.getContentLength();
        i.setIndeterminate(total > 0);
        byte[] buffer=new byte[10 * 1024];
        int count;
        int read=0;
        while ((count=in.read(buffer)) > 0) {
          i.checkCanceled();
          out.write(buffer,0,count);
          read+=count;
          if (total > 0) {
            i.setFraction(((double)read) / total);
            i.setText2((read / 1024) + "/" + (total / 1024)+ " KB");
          }
 else {
            i.setText2((read / 1024) + " KB");
          }
        }
      }
  finally {
        in.close();
      }
    }
  finally {
      if (connection instanceof HttpURLConnection) {
        ((HttpURLConnection)connection).disconnect();
      }
    }
  }
  finally {
    out.close();
  }
  String patchFileName=("jetbrains.patch.jar." + platform).toLowerCase();
  File patchFile=new File(FileUtil.getTempDirectory(),patchFileName);
  FileUtil.copy(tempFile,patchFile);
  FileUtil.delete(tempFile);
}
