{
  if (LOG.isDebugEnabled()) {
    LOG.debug("enter: checkForUpdates()");
  }
  final Document document;
  try {
    document=loadVersionInfo(getUpdateUrl());
    if (document == null)     return null;
  }
 catch (  Throwable t) {
    LOG.debug(t);
    throw new ConnectionException(t);
  }
  Element root=document.getRootElement();
  if (root == null) {
    LOG.info("cannot read " + getUpdateUrl());
    return null;
  }
  final String availBuild=root.getChild(ELEMENT_BUILD).getTextTrim();
  final String availVersion=root.getChild(ELEMENT_VERSION).getTextTrim();
  String ourBuild=ApplicationInfo.getInstance().getBuildNumber().trim();
  if (BUILD_NUMBER_STUB.equals(ourBuild))   ourBuild=Integer.toString(Integer.MAX_VALUE);
  if (LOG.isDebugEnabled()) {
    LOG.debug("build available:'" + availBuild + "' ourBuild='"+ ourBuild+ "' ");
  }
  Element patchElements=root.getChild("patches");
  List<PatchInfo> patches=new ArrayList<PatchInfo>();
  if (patchElements != null) {
    for (    Element each : (List<Element>)patchElements.getChildren()) {
      String fromBuild=each.getAttributeValue("from").trim();
      String size=each.getAttributeValue("size").trim();
      patches.add(new PatchInfo(fromBuild,size));
    }
  }
  try {
    final int iAvailBuild=Integer.parseInt(availBuild);
    final int iOurBuild=Integer.parseInt(ourBuild);
    if (iAvailBuild > iOurBuild) {
      return new NewVersion(iAvailBuild,availVersion,patches);
    }
    return null;
  }
 catch (  Throwable t) {
    LOG.debug(t);
    return null;
  }
 finally {
    UpdateSettings.getInstance().LAST_TIME_CHECKED=System.currentTimeMillis();
  }
}
