{
  final Document document=loadVersionInfo(host);
  if (document == null)   return false;
  boolean success=true;
  for (  Object plugin : document.getRootElement().getChildren("plugin")) {
    final Element pluginElement=(Element)plugin;
    final String pluginId=pluginElement.getAttributeValue("id");
    final String pluginUrl=pluginElement.getAttributeValue("url");
    final String pluginVersion=pluginElement.getAttributeValue("version");
    if (pluginId == null) {
      LOG.info("plugin id should not be null");
      success=false;
      continue;
    }
    if (pluginUrl == null) {
      LOG.info("plugin url should not be null");
      success=false;
      continue;
    }
    final VirtualFileManager fileManager=VirtualFileManager.getInstance();
    VirtualFile pluginFile=fileManager.findFileByUrl(pluginUrl);
    if (pluginFile == null) {
      final VirtualFile hostFile=fileManager.findFileByUrl(host);
      if (hostFile == null) {
        LOG.error("can't find file by url '" + host + "'");
        success=false;
        break;
      }
      pluginFile=findPluginByRelativePath(hostFile.getParent(),pluginUrl,hostFile.getFileSystem());
      if (pluginFile == null) {
        LOG.error("can't find '" + pluginUrl + "' relative to '"+ host+ "'");
        success=false;
        continue;
      }
    }
    final String finalPluginUrl=pluginFile.getUrl();
    final Runnable updatePluginRunnable=new Runnable(){
      public void run(){
        try {
          final ProgressIndicator progressIndicator=ProgressManager.getInstance().getProgressIndicator();
          if (progressIndicator != null) {
            progressIndicator.setText(finalPluginUrl);
          }
          final PluginDownloader uploader=new PluginDownloader(pluginId,finalPluginUrl,pluginVersion);
          if (uploader.prepareToInstall()) {
            downloaded.add(uploader);
          }
        }
 catch (        IOException e) {
          LOG.info(e);
        }
      }
    }
;
    if (ApplicationManager.getApplication().isDispatchThread()) {
      ProgressManager.getInstance().runProcessWithProgressSynchronously(updatePluginRunnable,IdeBundle.message("update.uploading.plugin.progress.title"),true,null);
    }
 else {
      updatePluginRunnable.run();
    }
  }
  return success;
}
