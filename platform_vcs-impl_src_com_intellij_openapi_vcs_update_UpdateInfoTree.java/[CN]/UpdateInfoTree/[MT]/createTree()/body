{
  SmartExpander.installOn(myTree);
  SelectionSaver.installOn(myTree);
  refreshTree();
  myTree.addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      AbstractTreeNode treeNode=(AbstractTreeNode)e.getPath().getLastPathComponent();
      if (treeNode instanceof FileTreeNode) {
        final VirtualFilePointer pointer=((FileTreeNode)treeNode).getFilePointer();
        mySelectedUrl=pointer.getUrl();
        mySelectedFile=pointer.getFile();
      }
 else {
        mySelectedUrl=null;
        mySelectedFile=null;
      }
    }
  }
);
  myTree.setCellRenderer(new UpdateTreeCellRenderer());
  TreeUIHelper.getInstance().installToolTipHandler(myTree);
  TreeUtil.installActions(myTree);
  new TreeSpeedSearch(myTree,new Convertor<TreePath,String>(){
    public String convert(    TreePath path){
      Object last=path.getLastPathComponent();
      if (last instanceof AbstractTreeNode) {
        return ((AbstractTreeNode)last).getName();
      }
      return TreeSpeedSearch.NODE_DESCRIPTOR_TOSTRING.convert(path);
    }
  }
);
  myTree.addMouseListener(new PopupHandler(){
    public void invokePopup(    Component comp,    int x,    int y){
      final DefaultActionGroup group=(DefaultActionGroup)ActionManager.getInstance().getAction("UpdateActionGroup");
      if (group != null) {
        ActionPopupMenu popupMenu=ActionManager.getInstance().createActionPopupMenu(ActionPlaces.UPDATE_POPUP,group);
        popupMenu.getComponent().show(comp,x,y);
      }
    }
  }
);
  EditSourceOnDoubleClickHandler.install(myTree);
  EditSourceOnEnterKeyHandler.install(myTree);
  myTree.setSelectionRow(0);
}
