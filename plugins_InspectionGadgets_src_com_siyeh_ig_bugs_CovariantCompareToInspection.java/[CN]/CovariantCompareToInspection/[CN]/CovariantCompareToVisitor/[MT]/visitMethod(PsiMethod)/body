{
  final String name=method.getName();
  if (!HardcodedMethodConstants.COMPARE_TO.equals(name)) {
    return;
  }
  if (!method.hasModifierProperty(PsiModifier.PUBLIC)) {
    return;
  }
  final PsiParameterList parameterList=method.getParameterList();
  if (parameterList.getParametersCount() != 1) {
    return;
  }
  final PsiParameter[] parameters=parameterList.getParameters();
  final PsiType paramType=parameters[0].getType();
  if (TypeUtils.isJavaLangObject(paramType)) {
    return;
  }
  final PsiClass aClass=method.getContainingClass();
  if (aClass == null) {
    return;
  }
  final PsiMethod[] methods=aClass.findMethodsByName(HardcodedMethodConstants.COMPARE_TO,false);
  for (  PsiMethod compareToMethod : methods) {
    if (isNonVariantCompareTo(compareToMethod)) {
      return;
    }
  }
  final Project project=method.getProject();
  final JavaPsiFacade psiFacade=JavaPsiFacade.getInstance(project);
  final GlobalSearchScope scope=method.getResolveScope();
  final PsiClass comparableClass=psiFacade.findClass(CommonClassNames.JAVA_LANG_COMPARABLE,scope);
  if (comparableClass != null && comparableClass.getTypeParameters().length == 1) {
    final PsiSubstitutor superSubstitutor=TypeConversionUtil.getClassSubstitutor(comparableClass,aClass,PsiSubstitutor.EMPTY);
    if (superSubstitutor != null) {
      final PsiType substituted=superSubstitutor.substitute(comparableClass.getTypeParameters()[0]);
      if (paramType.equals(substituted)) {
        return;
      }
    }
  }
  registerMethodError(method);
}
