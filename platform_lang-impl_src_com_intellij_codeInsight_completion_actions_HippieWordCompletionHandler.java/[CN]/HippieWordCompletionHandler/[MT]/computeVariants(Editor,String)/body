{
  final PrefixMatcher matcher=new CamelHumpMatcher(prefix == null ? "" : prefix);
  final CharSequence chars=editor.getDocument().getCharsSequence();
  final ArrayList<CompletionVariant> words=new ArrayList<CompletionVariant>();
  final List<CompletionVariant> afterWords=new ArrayList<CompletionVariant>();
  IdTableBuilding.scanWords(new IdTableBuilding.ScanWordProcessor(){
    public void run(    final CharSequence chars,    @Nullable char[] charsArray,    final int start,    final int end){
      final int caretOffset=editor.getCaretModel().getOffset();
      if (start <= caretOffset && end >= caretOffset)       return;
      final String word=chars.subSequence(start,end).toString();
      if (!matcher.prefixMatches(word))       return;
      final CompletionVariant v=new CompletionVariant(word,start);
      if (end > caretOffset) {
        afterWords.add(v);
      }
 else {
        words.add(v);
      }
    }
  }
,chars,0,chars.length());
  Set<String> allWords=new HashSet<String>();
  List<CompletionVariant> result=new ArrayList<CompletionVariant>();
  Collections.reverse(words);
  for (  CompletionVariant variant : words) {
    if (!allWords.contains(variant.variant)) {
      result.add(variant);
      allWords.add(variant.variant);
    }
  }
  Collections.reverse(result);
  allWords.clear();
  for (  CompletionVariant variant : afterWords) {
    if (!allWords.contains(variant.variant)) {
      result.add(variant);
      allWords.add(variant.variant);
    }
  }
  return result;
}
