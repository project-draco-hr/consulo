{
  final CharSequence chars=editor.getDocument().getCharsSequence();
  final ArrayList<CompletionVariant> words=new ArrayList<CompletionVariant>();
  final List<CompletionVariant> afterWords=new ArrayList<CompletionVariant>();
  final int caretOffset=editor.getCaretModel().getOffset();
  addWordsForEditor((EditorEx)editor,matcher,chars,words,afterWords,caretOffset);
  for (  FileEditor fileEditor : FileEditorManager.getInstance(file.getProject()).getAllEditors()) {
    if (fileEditor instanceof TextEditor) {
      Editor anotherEditor=((TextEditor)fileEditor).getEditor();
      if (anotherEditor != editor) {
        addWordsForEditor((EditorEx)anotherEditor,matcher,anotherEditor.getDocument().getCharsSequence(),words,afterWords,0);
      }
    }
  }
  Set<String> allWords=new HashSet<String>();
  List<CompletionVariant> result=new ArrayList<CompletionVariant>();
  Collections.reverse(words);
  for (  CompletionVariant variant : words) {
    if (!allWords.contains(variant.variant)) {
      result.add(variant);
      allWords.add(variant.variant);
    }
  }
  Collections.reverse(result);
  allWords.clear();
  for (  CompletionVariant variant : afterWords) {
    if (!allWords.contains(variant.variant)) {
      result.add(variant);
      allWords.add(variant.variant);
    }
  }
  return result;
}
