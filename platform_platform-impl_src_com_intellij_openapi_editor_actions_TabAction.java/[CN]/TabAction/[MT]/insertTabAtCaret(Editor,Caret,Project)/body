{
  MacUIUtil.hideCursor();
  int columnNumber;
  if (caret.hasSelection()) {
    columnNumber=editor.visualToLogicalPosition(caret.getSelectionStartPosition()).column;
  }
 else {
    columnNumber=editor.getCaretModel().getLogicalPosition().column;
  }
  CodeStyleSettings settings=CodeStyleSettingsManager.getSettings(project);
  final Document doc=editor.getDocument();
  PsiFile file=PsiDocumentManager.getInstance(project).getPsiFile(doc);
  CommonCodeStyleSettings.IndentOptions indentOptions=settings.getIndentOptionsByFile(file);
  int tabSize=indentOptions.INDENT_SIZE;
  int spacesToAddCount=tabSize - columnNumber % Math.max(1,tabSize);
  boolean useTab=editor.getSettings().isUseTabCharacter(project);
  CharSequence chars=doc.getCharsSequence();
  if (useTab && indentOptions.SMART_TABS) {
    int offset=editor.getCaretModel().getOffset();
    while (offset > 0) {
      offset--;
      if (chars.charAt(offset) == '\t')       continue;
      if (chars.charAt(offset) == '\n')       break;
      useTab=false;
      break;
    }
  }
  doc.startGuardedBlockChecking();
  try {
    if (useTab) {
      EditorModificationUtil.typeInStringAtCaretHonorBlockSelection(editor,"\t",false);
    }
 else {
      EditorModificationUtil.typeInStringAtCaretHonorBlockSelection(editor,StringUtil.repeatSymbol(' ',spacesToAddCount),false);
    }
  }
 catch (  ReadOnlyFragmentModificationException e) {
    EditorActionManager.getInstance().getReadonlyFragmentModificationHandler(doc).handle(e);
  }
 finally {
    doc.stopGuardedBlockChecking();
  }
}
