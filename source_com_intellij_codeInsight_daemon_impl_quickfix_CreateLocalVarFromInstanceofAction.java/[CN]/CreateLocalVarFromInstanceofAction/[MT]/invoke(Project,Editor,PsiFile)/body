{
  PsiInstanceOfExpression instanceOfExpression=getInstanceOfExpression(editor,file);
  try {
    final PsiDeclarationStatement decl=createLocalVariableDeclaration(instanceOfExpression);
    PsiLocalVariable localVariable=(PsiLocalVariable)decl.getDeclaredElements()[0];
    TemplateBuilder builder=new TemplateBuilder(localVariable);
    builder.setEndVariableAfter(localVariable.getNameIdentifier());
    Template template=generateTemplate(project,localVariable.getInitializer(),localVariable.getType());
    Editor newEditor=CreateFromUsageBaseAction.positionCursor(project,file,localVariable.getNameIdentifier());
    TextRange range=localVariable.getNameIdentifier().getTextRange();
    newEditor.getDocument().deleteString(range.getStartOffset(),range.getEndOffset());
    CreateFromUsageBaseAction.startTemplate(newEditor,template,project,new TemplateStateListener(){
      public void templateFinished(      Template template){
        PsiDocumentManager.getInstance(project).commitDocument(editor.getDocument());
        CaretModel caretModel=editor.getCaretModel();
        PsiDeclarationStatement declarationStatement=PsiTreeUtil.getParentOfType(file.findElementAt(caretModel.getOffset()),PsiDeclarationStatement.class);
        caretModel.moveToOffset(declarationStatement.getTextRange().getEndOffset());
        new EnterAction().actionPerformed(editor,DataManager.getInstance().getDataContext());
      }
    }
);
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
