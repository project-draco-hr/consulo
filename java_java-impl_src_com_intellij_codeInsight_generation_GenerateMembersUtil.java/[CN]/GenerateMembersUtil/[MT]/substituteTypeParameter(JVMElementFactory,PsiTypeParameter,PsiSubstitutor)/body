{
  final PsiElement copy=typeParameter.copy();
  final Map<PsiElement,PsiElement> replacementMap=new HashMap<PsiElement,PsiElement>();
  copy.accept(new JavaRecursiveElementVisitor(){
    @Override public void visitReferenceElement(    PsiJavaCodeReferenceElement reference){
      super.visitReferenceElement(reference);
      final PsiElement resolve=reference.resolve();
      if (resolve instanceof PsiTypeParameter) {
        final PsiType type=factory.createType((PsiTypeParameter)resolve);
        replacementMap.put(reference,factory.createReferenceElementByType((PsiClassType)substituteType(substitutor,type)));
      }
    }
  }
);
  return (PsiTypeParameter)RefactoringUtil.replaceElementsWithMap(copy,replacementMap);
}
