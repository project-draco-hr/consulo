{
  final Project project=sourceMethod.getProject();
  final JVMElementFactory factory=getFactory(sourceMethod,target);
  final JavaCodeStyleManager codeStyleManager=JavaCodeStyleManager.getInstance(project);
  final Module module=target != null ? ModuleUtil.findModuleForPsiElement(target) : null;
  final GlobalSearchScope moduleScope=module != null ? GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module) : null;
  try {
    final PsiMethod resultMethod=createMethod(factory,sourceMethod);
    copyDocComment(sourceMethod,resultMethod);
    copyModifiers(sourceMethod.getModifierList(),resultMethod.getModifierList());
    final PsiSubstitutor collisionResolvedSubstitutor=substituteTypeParameters(factory,codeStyleManager,target,sourceMethod.getTypeParameterList(),resultMethod.getTypeParameterList(),substitutor);
    substituteReturnType(PsiManager.getInstance(project),resultMethod,sourceMethod.getReturnType(),collisionResolvedSubstitutor);
    substituteParameters(project,factory,codeStyleManager,moduleScope,sourceMethod.getParameterList(),resultMethod.getParameterList(),collisionResolvedSubstitutor);
    substituteThrows(factory,sourceMethod.getThrowsList(),resultMethod.getThrowsList(),collisionResolvedSubstitutor);
    return resultMethod;
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
    return sourceMethod;
  }
}
