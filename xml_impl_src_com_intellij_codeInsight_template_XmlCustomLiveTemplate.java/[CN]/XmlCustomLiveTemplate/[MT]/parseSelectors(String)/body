{
  String templateKey=null;
  Map<String,String> attribute2value=new HashMap<String,String>();
  final List<String> classes=new ArrayList<String>();
  StringBuilder builder=new StringBuilder();
  char lastDelim=0;
  text+=MARKER;
  for (int i=0, n=text.length(); i < n; i++) {
    char c=text.charAt(i);
    if (c == '#' || c == '.' || c == '[' || c == ']' || i == n - 1) {
      if (c != ']') {
switch (lastDelim) {
case 0:
          templateKey=builder.toString();
        break;
case '#':
      attribute2value.put(ID,builder.toString());
    break;
case '.':
  if (builder.length() > 0) {
    classes.add(builder.toString());
  }
 else {
    return null;
  }
break;
case ']':
if (builder.length() > 0) {
return null;
}
break;
default :
return null;
}
}
 else if (lastDelim != '[') {
return null;
}
 else {
Pair<String,String> pair=parseAttrNameAndValue(builder.toString());
if (pair == null || attribute2value.containsKey(pair.first)) {
return null;
}
attribute2value.put(pair.first,pair.second);
}
lastDelim=c;
builder=new StringBuilder();
}
 else {
builder.append(c);
}
}
if (classes.size() > 0) {
if (attribute2value.containsKey(CLASS)) {
return null;
}
StringBuilder classesAttrValue=new StringBuilder();
for (int i=0; i < classes.size(); i++) {
classesAttrValue.append(classes.get(i));
if (i < classes.size() - 1) {
classesAttrValue.append(' ');
}
}
attribute2value.put(CLASS,classesAttrValue.toString());
}
return new MyTemplateToken(templateKey,attribute2value);
}
