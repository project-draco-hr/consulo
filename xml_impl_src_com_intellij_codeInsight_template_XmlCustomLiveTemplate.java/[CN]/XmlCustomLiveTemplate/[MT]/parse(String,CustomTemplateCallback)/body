{
  text+=MARKER;
  StringBuilder templateKeyBuilder=new StringBuilder();
  List<MyToken> result=new ArrayList<MyToken>();
  for (int i=0, n=text.length(); i < n; i++) {
    char c=text.charAt(i);
    if (i == n - 1 || POSSIBLE_OPERATIONS.indexOf(c) >= 0) {
      String key=templateKeyBuilder.toString();
      templateKeyBuilder=new StringBuilder();
      int num=parseNonNegativeInt(key);
      if (num > 0) {
        result.add(new MyNumberToken(num));
      }
 else {
        if (key.length() == 0) {
          return null;
        }
        String prefix=getPrefix(key);
        if (callback.isLiveTemplateApplicable(prefix)) {
          if (!prefix.equals(key) && !callback.isTemplateContainsVars(prefix,ATTRS)) {
            return null;
          }
        }
 else         if (prefix.indexOf('<') >= 0) {
          return null;
        }
        result.add(new MyTemplateToken(key));
      }
      result.add(i < n - 1 ? new MyOperationToken(c) : new MyMarkerToken());
    }
 else     if (isTemplateKeyPart(c)) {
      templateKeyBuilder.append(c);
    }
 else {
      return null;
    }
  }
  return result;
}
