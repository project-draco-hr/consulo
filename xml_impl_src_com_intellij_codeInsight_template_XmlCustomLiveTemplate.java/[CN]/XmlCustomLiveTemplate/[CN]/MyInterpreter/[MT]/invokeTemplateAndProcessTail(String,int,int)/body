{
  final Object key=new Object();
  myCallback.fixStartOfTemplate(key);
  for (int i=0; i < count; i++) {
    final int finalI=i;
    final boolean[] flag=new boolean[]{false};
    TemplateInvokationListener listener=new TemplateInvokationListener(){
      public void finished(      boolean inSeparateEvent){
        MyInterpreter interpreter=new MyInterpreter(myTokens,myCallback,MyState.WORD,new TemplateInvokationListener(){
          public void finished(          boolean inSeparateEvent){
            fixEndOffset();
            myCallback.gotoEndOfTemplate(key);
            if (inSeparateEvent) {
              invokeTemplateAndProcessTail(templateKey,tailStart,count - finalI - 1);
            }
          }
        }
);
        if (interpreter.invoke(tailStart)) {
          if (inSeparateEvent) {
            invokeTemplateAndProcessTail(templateKey,tailStart,count - finalI - 1);
          }
        }
 else {
          flag[0]=true;
        }
      }
    }
;
    if (!invokeTemplate(templateKey,myCallback,listener) || flag[0]) {
      return false;
    }
  }
  finish(count == 0);
  return true;
}
