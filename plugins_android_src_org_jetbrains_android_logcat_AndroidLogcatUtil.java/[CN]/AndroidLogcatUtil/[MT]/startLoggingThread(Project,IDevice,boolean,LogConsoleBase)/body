{
  UIUtil.invokeAndWaitIfNeeded(new Runnable(){
    public void run(){
      console.clear();
    }
  }
);
  PipedWriter logWriter=new PipedWriter();
  final AndroidLogcatReceiver receiver=new AndroidLogcatReceiver(logWriter);
  final PipedReader logReader;
  try {
    logReader=new PipedReader(logWriter){
      @Override public void close() throws IOException {
        super.close();
        receiver.cancel();
      }
      @Override public synchronized boolean ready(){
        try {
          return super.ready();
        }
 catch (        IOException e) {
          LOG.info(e);
          return false;
        }
      }
    }
;
  }
 catch (  IOException e) {
    LOG.info(e);
    console.writeToConsole("Unable to run logcat. IOException: " + e.getMessage() + '\n',ProcessOutputTypes.STDERR);
    return null;
  }
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    public void run(){
      ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
        public void run(){
          if (clearLogcat) {
            clearLogcat(project,device);
          }
          try {
            startLogging(device,receiver);
          }
 catch (          final Exception e) {
            LOG.info(e);
            console.writeToConsole(e.getMessage() + '\n',ProcessOutputTypes.STDERR);
          }
        }
      }
);
    }
  }
);
  return new Pair<Reader,Writer>(logReader,logWriter);
}
