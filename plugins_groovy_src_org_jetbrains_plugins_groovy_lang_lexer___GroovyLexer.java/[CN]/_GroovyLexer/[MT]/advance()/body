{
  int zzInput;
  int zzAction;
  int zzCurrentPosL;
  int zzMarkedPosL;
  int zzEndReadL=zzEndRead;
  CharSequence zzBufferL=zzBuffer;
  char[] zzBufferArrayL=zzBufferArray;
  char[] zzCMapL=ZZ_CMAP;
  int[] zzTransL=ZZ_TRANS;
  int[] zzRowMapL=ZZ_ROWMAP;
  int[] zzAttrL=ZZ_ATTRIBUTE;
  while (true) {
    zzMarkedPosL=zzMarkedPos;
    zzAction=-1;
    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;
    zzState=ZZ_LEXSTATE[zzLexicalState];
    zzForAction: {
      while (true) {
        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++);
 else         if (zzAtEOF) {
          zzInput=YYEOF;
          break zzForAction;
        }
 else {
          zzCurrentPos=zzCurrentPosL;
          zzMarkedPos=zzMarkedPosL;
          boolean eof=zzRefill();
          zzCurrentPosL=zzCurrentPos;
          zzMarkedPosL=zzMarkedPos;
          zzBufferL=zzBuffer;
          zzEndReadL=zzEndRead;
          if (eof) {
            zzInput=YYEOF;
            break zzForAction;
          }
 else {
            zzInput=zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++);
          }
        }
        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
        if (zzNext == -1)         break zzForAction;
        zzState=zzNext;
        int zzAttributes=zzAttrL[zzState];
        if ((zzAttributes & 1) == 1) {
          zzAction=zzState;
          zzMarkedPosL=zzCurrentPosL;
          if ((zzAttributes & 8) == 8)           break zzForAction;
        }
      }
    }
    zzMarkedPos=zzMarkedPosL;
switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
case 6:
{
        yybegin(WAIT_FOR_REGEX);
        return (mSTAR);
      }
case 172:
    break;
case 76:
{
    yybegin(WAIT_FOR_REGEX);
    return (mNOT_EQUAL);
  }
case 173:
break;
case 56:
{
blockStack.push(mLCURLY);
braceCount.push(mLCURLY);
yybegin(NLS_AFTER_LBRACE);
return (mLCURLY);
}
case 174:
break;
case 4:
{
return mWS;
}
case 175:
break;
case 129:
{
return (kTRUE);
}
case 176:
break;
case 128:
{
return (kNULL);
}
case 177:
break;
case 24:
{
yybegin(WAIT_FOR_REGEX);
return (mCOMMA);
}
case 178:
break;
case 127:
{
return (kENUM);
}
case 179:
break;
case 86:
{
yybegin(WAIT_FOR_REGEX);
return (mDEC);
}
case 180:
break;
case 83:
{
return (kDO);
}
case 181:
break;
case 89:
{
yybegin(WAIT_FOR_REGEX);
return (mRANGE_INCLUSIVE);
}
case 182:
break;
case 75:
{
return mSH_COMMENT;
}
case 183:
break;
case 60:
{
return mWRONG_REGEX_LITERAL;
}
case 184:
break;
case 122:
{
yybegin(WAIT_FOR_REGEX);
return (mSR_ASSIGN);
}
case 185:
break;
case 62:
{
yybegin(IN_REGEX_DOT);
return mIDENT;
}
case 186:
break;
case 58:
{
yypushback(1);
if (blockStack.isEmpty()) {
yybegin(YYINITIAL);
}
 else {
yybegin(IN_INNER_BLOCK);
}
}
case 187:
break;
case 8:
{
return mIDENT;
}
case 188:
break;
case 26:
{
yybegin(WAIT_FOR_REGEX);
return (mGT);
}
case 189:
break;
case 144:
{
return (kSUPER);
}
case 190:
break;
case 118:
{
yybegin(IN_TRIPLE_GSTRING);
gStringStack.push(mLBRACK);
return mGSTRING_BEGIN;
}
case 191:
break;
case 71:
{
yybegin(WAIT_FOR_REGEX);
return (mDIV_ASSIGN);
}
case 192:
break;
case 169:
{
return (kINSTANCEOF);
}
case 193:
break;
case 95:
{
yybegin(WAIT_FOR_REGEX);
return (mEQUAL);
}
case 194:
break;
case 19:
{
yybegin(WAIT_FOR_REGEX);
braceCount.push(mLPAREN);
return (mLPAREN);
}
case 195:
break;
case 23:
{
yybegin(WAIT_FOR_REGEX);
return (mCOLON);
}
case 196:
break;
case 154:
{
return (kSTATIC);
}
case 197:
break;
case 51:
{
if (blockStack.isEmpty()) {
yybegin(YYINITIAL);
}
 else {
yybegin(IN_INNER_BLOCK);
}
return mREGEX_END;
}
case 198:
break;
case 143:
{
return (kCATCH);
}
case 199:
break;
case 30:
{
yybegin(WAIT_FOR_REGEX);
return (mBOR);
}
case 200:
break;
case 54:
{
return mREGEX_CONTENT;
}
case 201:
break;
case 28:
{
yybegin(WAIT_FOR_REGEX);
return (mMOD);
}
case 202:
break;
case 25:
{
yybegin(WAIT_FOR_REGEX);
return (mLT);
}
case 203:
break;
case 168:
{
return (kPROTECTED);
}
case 204:
break;
case 110:
{
return mNUM_BIG_DECIMAL;
}
case 205:
break;
case 73:
{
yybegin(WAIT_FOR_REGEX);
return (mSPREAD_DOT);
}
case 206:
break;
case 148:
{
return (kDOUBLE);
}
case 207:
break;
case 38:
{
yybegin(IN_TRIPLE_DOT);
return mIDENT;
}
case 208:
break;
case 36:
{
blockStack.push(mLPAREN);
braceCount.push(mLCURLY);
yybegin(NLS_AFTER_LBRACE);
return mLCURLY;
}
case 209:
break;
case 53:
{
yypushback(yytext().length());
yybegin(KING_STATE_INNER_CONTENT);
}
case 210:
break;
case 123:
{
if (!gStringStack.isEmpty()) {
gStringStack.pop();
}
if (blockStack.isEmpty()) {
yybegin(YYINITIAL);
}
 else {
yybegin(IN_INNER_BLOCK);
}
return mGSTRING_END;
}
case 211:
break;
case 116:
{
return (kNEW);
}
case 212:
break;
case 48:
{
yypushback(yytext().length());
yybegin(KING_STATE_INNER);
}
case 213:
break;
case 149:
{
return (kNATIVE);
}
case 214:
break;
case 90:
{
yybegin(WAIT_FOR_REGEX);
return (mMEMBER_POINTER);
}
case 215:
break;
case 20:
{
if (!braceCount.isEmpty() && mLPAREN == braceCount.peek()) {
braceCount.pop();
}
return (mRPAREN);
}
case 216:
break;
case 67:
{
yypushback(1);
yybegin(WAIT_FOR_REGEX);
}
case 217:
break;
case 111:
{
return (kFOR);
}
case 218:
break;
case 133:
{
return (kCHAR);
}
case 219:
break;
case 147:
{
return (kIMPORT);
}
case 220:
break;
case 93:
{
yybegin(WAIT_FOR_REGEX);
return (mOPTIONAL_DOT);
}
case 221:
break;
case 103:
{
yybegin(WAIT_FOR_REGEX);
return (mBAND_ASSIGN);
}
case 222:
break;
case 158:
{
return (kEXTENDS);
}
case 223:
break;
case 10:
{
yybegin(WAIT_FOR_REGEX);
return (mPLUS);
}
case 224:
break;
case 3:
{
yybegin(NLS_AFTER_NLS);
afterComment=WAIT_FOR_REGEX;
return !braceCount.isEmpty() && mLPAREN == braceCount.peek() ? mWS : mNLS;
}
case 225:
break;
case 96:
{
yybegin(WAIT_FOR_REGEX);
return (mREGEX_FIND);
}
case 226:
break;
case 27:
{
yybegin(WAIT_FOR_REGEX);
return (mBNOT);
}
case 227:
break;
case 101:
{
yybegin(WAIT_FOR_REGEX);
return (mBOR_ASSIGN);
}
case 228:
break;
case 156:
{
return (kFINALLY);
}
case 229:
break;
case 102:
{
yybegin(WAIT_FOR_REGEX);
return (mLOR);
}
case 230:
break;
case 74:
{
yybegin(WAIT_FOR_REGEX);
return (mSTAR_ASSIGN);
}
case 231:
break;
case 134:
{
return (kVOID);
}
case 232:
break;
case 152:
{
return (kPUBLIC);
}
case 233:
break;
case 126:
{
return (kELSE);
}
case 234:
break;
case 39:
{
blockStack.push(mLBRACK);
braceCount.push(mLCURLY);
yybegin(NLS_AFTER_LBRACE);
return mLCURLY;
}
case 235:
break;
case 14:
{
return mSTRING_LITERAL;
}
case 236:
break;
case 87:
{
yybegin(WAIT_FOR_REGEX);
return (mMINUS_ASSIGN);
}
case 237:
break;
case 88:
{
yybegin(WAIT_FOR_REGEX);
return (mCLOSABLE_BLOCK_OP);
}
case 238:
break;
case 170:
{
return (kIMPLEMENTS);
}
case 239:
break;
case 43:
{
if (!gStringStack.isEmpty()) {
gStringStack.pop();
}
if (blockStack.isEmpty()) {
yybegin(YYINITIAL);
}
 else {
yybegin(IN_INNER_BLOCK);
}
return mGSTRING_END;
}
case 240:
break;
case 99:
{
yybegin(WAIT_FOR_REGEX);
return (mMOD_ASSIGN);
}
case 241:
break;
case 17:
{
yybegin(WAIT_FOR_REGEX);
return (mQUESTION);
}
case 242:
break;
case 9:
{
return mNUM_INT;
}
case 243:
break;
case 166:
{
return (kINTERFACE);
}
case 244:
break;
case 32:
{
yybegin(WAIT_FOR_REGEX);
return (mSEMI);
}
case 245:
break;
case 161:
{
return (kPACKAGE);
}
case 246:
break;
case 140:
{
return (kTHROW);
}
case 247:
break;
case 136:
{
if (blockStack.isEmpty()) {
yybegin(YYINITIAL);
}
 else {
yybegin(IN_INNER_BLOCK);
}
return (mDOLLAR_SLASHY_LITERAL);
}
case 248:
break;
case 18:
{
yybegin(WAIT_FOR_REGEX);
return (mASSIGN);
}
case 249:
break;
case 82:
{
return (kIN);
}
case 250:
break;
case 69:
{
return mSL_COMMENT;
}
case 251:
break;
case 13:
{
yybegin(IN_SINGLE_GSTRING);
gStringStack.push(mLPAREN);
return mGSTRING_BEGIN;
}
case 252:
break;
case 131:
{
return (kBYTE);
}
case 253:
break;
case 104:
{
yybegin(WAIT_FOR_REGEX);
return (mLAND);
}
case 254:
break;
case 124:
{
if (blockStack.isEmpty()) {
yybegin(YYINITIAL);
}
 else {
yybegin(IN_INNER_BLOCK);
}
return (mREGEX_LITERAL);
}
case 255:
break;
case 34:
{
yypushback(1);
yybegin(IN_SINGLE_GSTRING);
}
case 256:
break;
case 29:
{
yybegin(WAIT_FOR_REGEX);
return (mBXOR);
}
case 257:
break;
case 65:
{
yypushback(1);
yybegin(IN_REGEX);
}
case 258:
break;
case 66:
{
yypushback(1);
yybegin(afterComment);
}
case 259:
break;
case 5:
{
if (zzStartRead == 0 || zzBuffer.subSequence(0,zzStartRead).toString().trim().length() == 0) {
yypushback(1);
yybegin(WAIT_FOR_REGEX);
}
 else {
return (mDIV);
}
}
case 260:
break;
case 171:
{
return (kSYNCHRONIZED);
}
case 261:
break;
case 121:
{
yybegin(WAIT_FOR_REGEX);
return (mSL_ASSIGN);
}
case 262:
break;
case 52:
{
yybegin(KING_STATE);
return mREGEX_BEGIN;
}
case 263:
break;
case 37:
{
yypushback(1);
yybegin(IN_TRIPLE_GSTRING);
}
case 264:
break;
case 117:
{
return (kTRY);
}
case 265:
break;
case 11:
{
yybegin(WAIT_FOR_REGEX);
return (mMINUS);
}
case 266:
break;
case 12:
{
yybegin(WAIT_FOR_REGEX);
return (mDOT);
}
case 267:
break;
case 132:
{
return (kCASE);
}
case 268:
break;
case 105:
zzMarkedPos=zzStartRead + 1;
{
yybegin(IN_SINGLE_IDENT);
return mDOT;
}
case 269:
break;
case 80:
{
return mNUM_DOUBLE;
}
case 270:
break;
case 157:
{
return (kDEFAULT);
}
case 271:
break;
case 119:
{
yybegin(WAIT_FOR_REGEX);
return (mREGEX_MATCH);
}
case 272:
break;
case 1:
{
gStringStack.clear();
yybegin(YYINITIAL);
return mWRONG_REGEX_LITERAL;
}
case 273:
break;
case 167:
{
return (kTRANSIENT);
}
case 274:
break;
case 55:
{
yybegin(KING_STATE_CONTENT);
return mREGEX_CONTENT;
}
case 275:
break;
case 84:
{
yybegin(WAIT_FOR_REGEX);
return (mINC);
}
case 276:
break;
case 108:
{
return GROOVY_DOC_COMMENT;
}
case 277:
break;
case 61:
{
yybegin(NLS_AFTER_NLS);
afterComment=YYINITIAL;
clearStacks();
return mNLS;
}
case 278:
break;
case 155:
{
return (kSWITCH);
}
case 279:
break;
case 91:
{
return mGSTRING_LITERAL;
}
case 280:
break;
case 21:
{
yybegin(WAIT_FOR_REGEX);
braceCount.push(mLPAREN);
return (mLBRACK);
}
case 281:
break;
case 46:
{
yypushback(1);
yybegin(IN_TRIPLE_IDENT);
}
case 282:
break;
case 137:
{
return (kFLOAT);
}
case 283:
break;
case 57:
{
if (!blockStack.isEmpty()) {
IElementType br=blockStack.pop();
if (br.equals(mLPAREN)) yybegin(IN_SINGLE_GSTRING);
if (br.equals(mLBRACK)) yybegin(IN_TRIPLE_GSTRING);
if (br.equals(mDIV)) yybegin(IN_REGEX);
}
while (!braceCount.isEmpty() && mLCURLY != braceCount.peek()) {
braceCount.pop();
}
if (!braceCount.isEmpty() && mLCURLY == braceCount.peek()) {
braceCount.pop();
}
return mRCURLY;
}
case 284:
break;
case 135:
{
yybegin(WAIT_FOR_REGEX);
return (mBSR_ASSIGN);
}
case 285:
break;
case 81:
{
return (kIF);
}
case 286:
break;
case 94:
{
yybegin(WAIT_FOR_REGEX);
return (mELVIS);
}
case 287:
break;
case 138:
{
return (kFINAL);
}
case 288:
break;
case 35:
{
yybegin(IN_SINGLE_DOT);
return mIDENT;
}
case 289:
break;
case 98:
{
yybegin(WAIT_FOR_REGEX);
return (mGE);
}
case 290:
break;
case 151:
{
return (kTHROWS);
}
case 291:
break;
case 78:
{
return mNUM_FLOAT;
}
case 292:
break;
case 114:
{
yybegin(WAIT_FOR_REGEX);
return (mTRIPLE_DOT);
}
case 293:
break;
case 49:
{
yypushback(yytext().length());
gStringStack.push(mDIV);
yybegin(IN_REGEX_DOLLAR);
}
case 294:
break;
case 112:
{
return (kINT);
}
case 295:
break;
case 164:
{
return (kSTRICTFP);
}
case 296:
break;
case 68:
{
yypushback(1);
yybegin(NLS_AFTER_COMMENT);
}
case 297:
break;
case 162:
{
return (kABSTRACT);
}
case 298:
break;
case 139:
{
return (kFALSE);
}
case 299:
break;
case 92:
{
return (kAS);
}
case 300:
break;
case 47:
{
yybegin(NLS_AFTER_NLS);
afterComment=IN_TRIPLE_IDENT;
return mNLS;
}
case 301:
break;
case 115:
{
yybegin(WAIT_FOR_REGEX);
return (mRANGE_EXCLUSIVE);
}
case 302:
break;
case 163:
{
return (kCONTINUE);
}
case 303:
break;
case 33:
{
yybegin(WAIT_FOR_REGEX);
return (mAT);
}
case 304:
break;
case 125:
{
return (kLONG);
}
case 305:
break;
case 79:
{
return mNUM_LONG;
}
case 306:
break;
case 141:
{
return (kBREAK);
}
case 307:
break;
case 97:
{
yybegin(WAIT_FOR_REGEX);
return (mLE);
}
case 308:
break;
case 159:
{
return (kBOOLEAN);
}
case 309:
break;
case 153:
{
return (kASSERT);
}
case 310:
break;
case 107:
zzMarkedPos=zzStartRead + 1;
{
yybegin(IN_REGEX_IDENT);
return mDOT;
}
case 311:
break;
case 130:
{
return (kTHIS);
}
case 312:
break;
case 160:
{
return (kPRIVATE);
}
case 313:
break;
case 45:
{
yybegin(IN_TRIPLE_GSTRING_DOLLAR);
return mDOLLAR;
}
case 314:
break;
case 145:
{
return (kSHORT);
}
case 315:
break;
case 22:
{
if (!braceCount.isEmpty() && mLPAREN == braceCount.peek()) {
braceCount.pop();
}
return (mRBRACK);
}
case 316:
break;
case 15:
{
yybegin(NLS_AFTER_LBRACE);
braceCount.push(mLCURLY);
return (mLCURLY);
}
case 317:
break;
case 165:
{
return (kVOLATILE);
}
case 318:
break;
case 106:
zzMarkedPos=zzStartRead + 1;
{
yybegin(IN_TRIPLE_NLS);
return mDOT;
}
case 319:
break;
case 16:
{
while (!braceCount.isEmpty() && mLCURLY != braceCount.peek()) {
braceCount.pop();
}
if (!braceCount.isEmpty() && mLCURLY == braceCount.peek()) {
braceCount.pop();
}
return (mRCURLY);
}
case 320:
break;
case 7:
{
yybegin(WAIT_FOR_REGEX);
return (mLNOT);
}
case 321:
break;
case 72:
{
yybegin(WAIT_FOR_REGEX);
return (mSTAR_STAR);
}
case 322:
break;
case 77:
{
return mNUM_BIG_INT;
}
case 323:
break;
case 64:
{
if (!gStringStack.isEmpty()) {
gStringStack.pop();
}
if (blockStack.isEmpty()) {
yybegin(YYINITIAL);
}
 else {
yybegin(IN_INNER_BLOCK);
}
return mREGEX_END;
}
case 324:
break;
case 142:
{
return (kCLASS);
}
case 325:
break;
case 85:
{
yybegin(WAIT_FOR_REGEX);
return (mPLUS_ASSIGN);
}
case 326:
break;
case 31:
{
yybegin(WAIT_FOR_REGEX);
return (mBAND);
}
case 327:
break;
case 120:
{
yybegin(WAIT_FOR_REGEX);
return (mCOMPARE_TO);
}
case 328:
break;
case 100:
{
yybegin(WAIT_FOR_REGEX);
return (mBXOR_ASSIGN);
}
case 329:
break;
case 59:
{
afterComment=YYINITIAL;
return (mWS);
}
case 330:
break;
case 150:
{
return (kRETURN);
}
case 331:
break;
case 50:
{
return mREGEX_BEGIN;
}
case 332:
break;
case 44:
{
int zzFState=24;
int zzFPos=zzStartRead;
if (zzFin.length <= zzBufferL.length()) {
zzFin=new boolean[zzBufferL.length() + 1];
}
boolean zzFinL[]=zzFin;
while (zzFState != -1 && zzFPos < zzMarkedPos) {
if ((zzAttrL[zzFState] & 1) == 1) {
zzFinL[zzFPos]=true;
}
zzInput=zzBufferL.charAt(zzFPos++);
zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
}
if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) {
zzFinL[zzFPos]=true;
}
zzFState=25;
zzFPos=zzMarkedPos;
while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
zzInput=zzBufferL.charAt(--zzFPos);
zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
}
;
zzMarkedPos=zzFPos;
}
{
return mGSTRING_CONTENT;
}
case 333:
break;
case 40:
{
return mGSTRING_CONTENT;
}
case 334:
break;
case 109:
{
yybegin(WAIT_FOR_REGEX);
return (mSTAR_STAR_ASSIGN);
}
case 335:
break;
case 113:
{
return (kDEF);
}
case 336:
break;
case 42:
{
yybegin(IN_SINGLE_GSTRING_DOLLAR);
return mDOLLAR;
}
case 337:
break;
case 41:
{
clearStacks();
yybegin(NLS_AFTER_NLS);
afterComment=YYINITIAL;
return mNLS;
}
case 338:
break;
case 63:
{
blockStack.push(mDIV);
braceCount.push(mLCURLY);
yybegin(NLS_AFTER_LBRACE);
return mLCURLY;
}
case 339:
break;
case 146:
{
return (kWHILE);
}
case 340:
break;
case 2:
{
return mWRONG;
}
case 341:
break;
case 70:
{
return mML_COMMENT;
}
case 342:
break;
default :
if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
zzAtEOF=true;
zzDoEOF();
return null;
}
 else {
zzScanError(ZZ_NO_MATCH);
}
}
}
}
