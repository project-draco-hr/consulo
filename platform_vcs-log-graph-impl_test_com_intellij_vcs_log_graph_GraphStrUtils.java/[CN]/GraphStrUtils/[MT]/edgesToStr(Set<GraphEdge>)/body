{
  if (edges.isEmpty())   return "none";
  List<GraphEdge> sortedEdges=new ArrayList<GraphEdge>(edges);
  Collections.sort(sortedEdges,new Comparator<GraphEdge>(){
    @Override public int compare(    @NotNull GraphEdge o1,    @NotNull GraphEdge o2){
      if (o1.getUpNodeIndex() == o2.getUpNodeIndex())       return o1.getDownNodeIndex() - o2.getDownNodeIndex();
 else       return o1.getUpNodeIndex() - o2.getUpNodeIndex();
    }
  }
);
  return StringUtil.join(sortedEdges,new Function<GraphEdge,String>(){
    @Override public String fun(    GraphEdge graphEdge){
      return graphEdge.getUpNodeIndex() + "_" + graphEdge.getDownNodeIndex()+ "_"+ toChar(graphEdge.getType());
    }
  }
," ");
}
