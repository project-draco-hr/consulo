{
  try {
    int sharpPos=url.indexOf('#');
    String anchor="";
    if (sharpPos != -1) {
      anchor=url.substring(sharpPos);
      url=url.substring(0,sharpPos);
    }
    Pair<String,String> pair=URLUtil.splitJarUrl(url);
    if (pair == null)     return null;
    File jarFile=new File(FileUtil.toSystemDependentName(pair.first));
    if (!jarFile.canRead())     return null;
    String jarUrl=StandardFileSystems.FILE_PROTOCOL_PREFIX + FileUtil.toSystemIndependentName(jarFile.getPath());
    String jarLocationHash=jarFile.getName() + "." + Integer.toHexString(jarUrl.hashCode());
    final File outputDir=new File(getExtractedFilesDir(),jarLocationHash);
    final String currentTimestamp=String.valueOf(new File(jarFile.getPath()).lastModified());
    final File timestampFile=new File(outputDir,".idea.timestamp");
    String previousTimestamp=null;
    if (timestampFile.exists()) {
      previousTimestamp=FileUtilRt.loadFile(timestampFile);
    }
    if (!currentTimestamp.equals(previousTimestamp)) {
      final Ref<Boolean> extract=new Ref<Boolean>();
      Runnable r=new Runnable(){
        @Override public void run(){
          final ConfirmExtractDialog dialog=new ConfirmExtractDialog();
          if (dialog.isToBeShown()) {
            dialog.show();
            extract.set(dialog.isOK());
          }
 else {
            dialog.close(DialogWrapper.OK_EXIT_CODE);
            extract.set(true);
          }
        }
      }
;
      try {
        GuiUtils.runOrInvokeAndWait(r);
      }
 catch (      InvocationTargetException ignored) {
        extract.set(false);
      }
catch (      InterruptedException ignored) {
        extract.set(false);
      }
      if (!extract.get()) {
        return null;
      }
      boolean closeZip=true;
      final ZipFile zipFile=new ZipFile(jarFile);
      try {
        ZipEntry entry=zipFile.getEntry(pair.second);
        if (entry == null) {
          return null;
        }
        InputStream is=zipFile.getInputStream(entry);
        ZipUtil.extractEntry(entry,is,outputDir);
        closeZip=false;
      }
  finally {
        if (closeZip) {
          zipFile.close();
        }
      }
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        @Override public void run(){
          new Task.Backgroundable(null,"Extracting files...",true){
            @Override public void run(            @NotNull final ProgressIndicator indicator){
              final int size=zipFile.size();
              final int[] counter=new int[]{0};
class MyFilter implements FilenameFilter {
                private final Set<File> myImportantDirs=ContainerUtil.newHashSet(outputDir,new File(outputDir,"resources"));
                private final boolean myImportantOnly;
                private MyFilter(                boolean importantOnly){
                  myImportantOnly=importantOnly;
                }
                @Override public boolean accept(                @NotNull File dir,                @NotNull String name){
                  indicator.checkCanceled();
                  boolean result=myImportantOnly == myImportantDirs.contains(dir);
                  if (result) {
                    indicator.setFraction(((double)counter[0]) / size);
                    counter[0]++;
                  }
                  return result;
                }
              }
              try {
                try {
                  ZipUtil.extract(zipFile,outputDir,new MyFilter(true));
                  ZipUtil.extract(zipFile,outputDir,new MyFilter(false));
                  FileUtil.writeToFile(timestampFile,currentTimestamp);
                }
  finally {
                  zipFile.close();
                }
              }
 catch (              IOException ignore) {
              }
            }
          }
.queue();
        }
      }
);
    }
    return VfsUtilCore.pathToUrl(FileUtil.toSystemIndependentName(new File(outputDir,pair.second).getPath())) + anchor;
  }
 catch (  IOException e) {
    LOG.warn(e);
    Messages.showErrorDialog("Cannot extract files: " + e.getMessage(),"Error");
    return null;
  }
}
