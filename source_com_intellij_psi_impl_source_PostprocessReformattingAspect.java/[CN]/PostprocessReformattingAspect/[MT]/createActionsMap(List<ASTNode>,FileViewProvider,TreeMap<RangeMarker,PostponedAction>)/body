{
  final Set<ASTNode> nodesToProcess=new HashSet<ASTNode>(astNodes);
  final Document document=provider.getDocument();
  for (  final ASTNode node : astNodes) {
    nodesToProcess.remove(node);
    final FileElement fileElement=TreeUtil.getFileElement((TreeElement)node);
    if (fileElement == null || ((PsiFile)fileElement.getPsi()).getViewProvider() != provider)     continue;
    final boolean isGenerated=CodeEditUtil.isNodeGenerated(node);
    ((TreeElement)node).acceptTree(new RecursiveTreeElementVisitor(){
      boolean inGeneratedContext=!isGenerated;
      protected boolean visitNode(      TreeElement current){
        if (nodesToProcess.contains(current))         return false;
        final boolean currentNodeGenerated=CodeEditUtil.isNodeGenerated(current);
        CodeEditUtil.setNodeGenerated(current,false);
        if (currentNodeGenerated && !inGeneratedContext) {
          rangesToProcess.put(document.createRangeMarker(current.getTextRange()),new ReformatAction());
          inGeneratedContext=true;
        }
        if (!currentNodeGenerated && inGeneratedContext) {
          if (current.getElementType() == ElementType.WHITE_SPACE)           return false;
          final int oldIndent=CodeEditUtil.getOldIndentation(current);
          LOG.assertTrue(oldIndent >= 0,"for not generated items old indentation must be defined");
          rangesToProcess.put(document.createRangeMarker(current.getTextRange()),new ReindentAction(oldIndent));
          inGeneratedContext=false;
        }
        return true;
      }
      public void visitComposite(      CompositeElement composite){
        boolean oldGeneratedContext=inGeneratedContext;
        super.visitComposite(composite);
        inGeneratedContext=oldGeneratedContext;
      }
      public void visitLeaf(      LeafElement leaf){
        boolean oldGeneratedContext=inGeneratedContext;
        super.visitLeaf(leaf);
        inGeneratedContext=oldGeneratedContext;
      }
    }
);
  }
}
