{
  if (builder.getTokenType() != GroovyTokenTypes.mLPAREN)   return false;
  final PsiBuilder.Marker marker=builder.mark();
  builder.advanceLexer();
  do {
    while (builder.getTokenType() == GroovyTokenTypes.mCOMMA) {
      builder.advanceLexer();
      builder.error(GroovyBundle.message("identifier.expected"));
    }
    if (hasModifiers) {
      if (TokenSets.BUILT_IN_TYPE.contains(builder.getTokenType())) {
        builder.advanceLexer();
      }
    }
    PsiBuilder.Marker varMarker=builder.mark();
    if (!ParserUtils.getToken(builder,GroovyTokenTypes.mIDENT)) {
      builder.error(GroovyBundle.message("identifier.expected"));
      varMarker.drop();
    }
 else {
      varMarker.done(componentType);
    }
  }
 while (ParserUtils.getToken(builder,GroovyTokenTypes.mCOMMA));
  if (builder.getTokenType() == GroovyTokenTypes.mRPAREN) {
    builder.advanceLexer();
    marker.done(tupleType);
    return true;
  }
 else {
    marker.rollbackTo();
    return false;
  }
}
