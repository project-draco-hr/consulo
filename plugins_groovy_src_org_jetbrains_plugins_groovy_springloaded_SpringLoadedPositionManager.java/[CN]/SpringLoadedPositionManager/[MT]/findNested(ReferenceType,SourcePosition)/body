{
  if (!fromClass.isPrepared())   return null;
  List<ReferenceType> nestedTypes=fromClass.nestedTypes();
  List<ReferenceType> springLoadedGeneratedClasses=new ArrayList<ReferenceType>();
  for (  ReferenceType nested : nestedTypes) {
    if (!nested.isPrepared())     continue;
    if (isSpringLoadedGeneratedClass(fromClass,nested)) {
      if (springLoadedGeneratedClasses.size() > 0 && !springLoadedGeneratedClasses.get(0).name().equals(nested.name())) {
        springLoadedGeneratedClasses.clear();
      }
      springLoadedGeneratedClasses.add(nested);
    }
 else {
      final List<ReferenceType> found=findNested(nested,classPosition);
      if (found != null) {
        return found;
      }
    }
  }
  try {
    final int lineNumber=classPosition.getLine() + 1;
    if (springLoadedGeneratedClasses.isEmpty()) {
      if (fromClass.locationsOfLine(lineNumber).size() > 0) {
        return Collections.singletonList(fromClass);
      }
    }
 else {
      ReferenceType referenceType=springLoadedGeneratedClasses.get(0);
      if (referenceType.locationsOfLine(lineNumber).size() > 0) {
        return springLoadedGeneratedClasses;
      }
    }
  }
 catch (  AbsentInformationException ignored) {
  }
  return null;
}
