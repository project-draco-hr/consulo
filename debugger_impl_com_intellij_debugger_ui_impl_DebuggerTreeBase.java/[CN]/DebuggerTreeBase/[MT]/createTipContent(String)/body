{
  final JToolTip tooltip=new JToolTip();
  if (tipText == null) {
    tooltip.setTipText(tipText);
  }
 else {
    Dimension rootSize=getVisibleRect().getSize();
    Insets borderInsets=tooltip.getBorder().getBorderInsets(tooltip);
    rootSize.width-=(borderInsets.left + borderInsets.right) * 2;
    rootSize.height-=(borderInsets.top + borderInsets.bottom) * 2;
    final Element html=new Element("html");
    final StringBuilder tipBuilder=StringBuilderSpinAllocator.alloc();
    try {
      final StringTokenizer tokenizer=new StringTokenizer(tipText,"\n");
      final FontMetrics metrics=tooltip.getFontMetrics(tooltip.getFont());
      while (tokenizer.hasMoreElements()) {
        String line=tokenizer.nextToken();
        while (line.length() > 0) {
          final int maxChars=Math.max(1,getMaximumChars(line,metrics,rootSize.width));
          if (maxChars == line.length()) {
            tipBuilder.append(line).append('\n');
            break;
          }
 else {
            final String delimiterString="\\\n";
            tipBuilder.append(line.substring(0,maxChars));
            tipBuilder.append(delimiterString);
            line=line.substring(maxChars);
          }
        }
      }
      Element p=new Element("pre");
      html.addContent(p);
      p.setText(JDOMUtil.legalizeText(tipBuilder.toString()));
    }
  finally {
      StringBuilderSpinAllocator.dispose(tipBuilder);
    }
    XMLOutputter outputter=JDOMUtil.createOutputter("\n");
    Format format=outputter.getFormat().setTextMode(Format.TextMode.PRESERVE);
    outputter.setFormat(format);
    tooltip.setTipText(outputter.outputString(html));
  }
  tooltip.setBorder(null);
  return tooltip;
}
