{
  final DebuggerTreeNodeImpl node=getNodeToShowTip(e);
  if (node == null) {
    return null;
  }
  if (myCurrentTooltip != null && myCurrentTooltip.isShowing() && myCurrentTooltipNode == node) {
    return myCurrentTooltip;
  }
  myCurrentTooltipNode=node;
  final String toolTipText=getTipText(node);
  if (toolTipText == null) {
    return null;
  }
  final JComponent tipContent=createTipContent(toolTipText);
  final JScrollPane scrollPane=new JScrollPane(tipContent);
  scrollPane.setBorder(null);
  scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
  scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
  final Point point=e.getPoint();
  SwingUtilities.convertPointToScreen(point,e.getComponent());
  Rectangle tipRectangle=new Rectangle(point,tipContent.getPreferredSize());
  final Rectangle screen=ScreenUtil.getScreenRectangle(point.x,point.y);
  final JToolTip toolTip=new JToolTip();
  tipContent.addMouseListener(new MouseAdapter(){
    @Override public void mouseReleased(    MouseEvent e){
      if (UIUtil.isActionClick(e)) {
        final Window wnd=SwingUtilities.getWindowAncestor(toolTip);
        if (wnd instanceof JWindow) {
          wnd.setVisible(false);
        }
      }
    }
  }
);
  final Border tooltipBorder=toolTip.getBorder();
  if (tooltipBorder != null) {
    final Insets borderInsets=tooltipBorder.getBorderInsets(this);
    tipRectangle.setSize(tipRectangle.width + borderInsets.left + borderInsets.right,tipRectangle.height + borderInsets.top + borderInsets.bottom);
  }
  boolean addScrollers=false;
  if (tipRectangle.height > screen.height / 4) {
    tipRectangle.height=screen.height / 4;
    addScrollers=true;
  }
  toolTip.setLayout(new BorderLayout());
  toolTip.add(scrollPane,BorderLayout.CENTER);
  if (addScrollers) {
    tipRectangle.height+=scrollPane.getHorizontalScrollBar().getPreferredSize().height;
    tipRectangle.width+=scrollPane.getVerticalScrollBar().getPreferredSize().width;
  }
  ScreenUtil.cropRectangleToFitTheScreen(tipRectangle);
  toolTip.setPreferredSize(tipRectangle.getSize());
  myCurrentTooltip=toolTip;
  myCurrentPosition=tipRectangle.getLocation();
  return myCurrentTooltip;
}
