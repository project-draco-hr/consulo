{
  File f=new File(myRoot.getPath(),"f.jar");
  JarOutputStream jar=new JarOutputStream(new FileOutputStream(f));
  jar.putNextEntry(new JarEntry("file.txt"));
  jar.write(1);
  jar.closeEntry();
  jar.close();
  VirtualFile vfile=LocalFileSystem.getInstance().refreshAndFindFileByIoFile(f);
  assertNotNull(vfile);
  VirtualFile jarRoot=JarFileSystem.getInstance().getJarRootForLocalFile(vfile);
  assertEquals(1,jarRoot.findChild("file.txt").contentsToByteArray()[0]);
  assertEquals(2,getRevisionsFor(myRoot).size());
  jar=new JarOutputStream(new FileOutputStream(f));
  JarEntry e=new JarEntry("file.txt");
  e.setTime(f.lastModified() + 10000);
  jar.putNextEntry(e);
  jar.write(2);
  jar.closeEntry();
  jar.close();
  f.setLastModified(f.lastModified() + 10000);
  LocalFileSystem.getInstance().refreshWithoutFileWatcher(false);
  JarFileSystem.getInstance().refreshWithoutFileWatcher(false);
  jarRoot=JarFileSystem.getInstance().getJarRootForLocalFile(vfile);
  assertEquals(2,jarRoot.findChild("file.txt").contentsToByteArray()[0]);
  assertEquals(2,getRevisionsFor(myRoot).size());
  assertEquals(1,getRevisionsFor(jarRoot).size());
}
