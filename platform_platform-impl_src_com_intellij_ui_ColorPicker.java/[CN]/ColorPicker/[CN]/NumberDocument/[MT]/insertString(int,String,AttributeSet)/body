{
  final boolean rgb=isRGBMode();
  char[] source=str.toCharArray();
  if (mySrc != null) {
    final int selected=mySrc.getSelectionEnd() - mySrc.getSelectionStart();
    int newLen=mySrc.getText().length() - selected + str.length();
    if (newLen > (myHex ? 6 : 3)) {
      Toolkit.getDefaultToolkit().beep();
      return;
    }
  }
  char[] result=new char[source.length];
  int j=0;
  for (int i=0; i < result.length; i++) {
    if (myHex ? "0123456789abcdefABCDEF".indexOf(source[i]) >= 0 : Character.isDigit(source[i])) {
      result[j++]=source[i];
    }
 else {
      Toolkit.getDefaultToolkit().beep();
    }
  }
  final String toInsert=StringUtil.toUpperCase(new String(result,0,j));
  final String res=new StringBuilder(mySrc.getText()).insert(offs,toInsert).toString();
  try {
    if (!myHex) {
      final int num=Integer.parseInt(res);
      if (rgb) {
        if (num > 255) {
          Toolkit.getDefaultToolkit().beep();
          return;
        }
      }
 else {
        if ((mySrc == myRed && num > 359) || ((mySrc == myGreen || mySrc == myBlue) && num > 100)) {
          Toolkit.getDefaultToolkit().beep();
          return;
        }
      }
    }
  }
 catch (  NumberFormatException ignore) {
  }
  super.insertString(offs,toInsert,a);
}
