{
  final Insets i=getInsets();
  final Dimension d=getSize();
  final int left=i.left + (d.width - i.left - i.right- getComponentWidth()) / 2;
  final int top=i.top + (d.height - i.top - i.bottom- getComponentHeight()) / 2;
  g.setColor(Color.WHITE);
  g.fillRect(left,top,getComponentWidth(),getComponentHeight());
  g.setColor(Color.GRAY);
  g.drawLine(left + JBUI.scale(1),i.top + getComponentHeight() / 2,left + getComponentWidth() - JBUI.scale(3),i.top + getComponentHeight() / 2);
  g.drawRect(left + JBUI.scale(1),top + JBUI.scale(1),getComponentWidth() - JBUI.scale(3),getComponentHeight() - JBUI.scale(3));
  for (int k=1; k < 10; k++) {
    g.drawLine(left + JBUI.scale(1) + JBUI.scale(k * 31),top + JBUI.scale(1),left + JBUI.scale(1) + JBUI.scale(k * 31),top + getComponentHeight() - JBUI.scale(3));
  }
  for (int r=0; r < myRecentColors.size(); r++) {
    int row=r / 10;
    int col=r % 10;
    Color color=myRecentColors.get(r);
    g.setColor(color);
    g.fillRect(left + JBUI.scale(2) + JBUI.scale(col * 30)+ JBUI.scale(col)+ JBUI.scale(1),top + JBUI.scale(2) + JBUI.scale(row * 30)+ JBUI.scale(row)+ JBUI.scale(1),JBUI.scale(28),JBUI.scale(28));
  }
}
