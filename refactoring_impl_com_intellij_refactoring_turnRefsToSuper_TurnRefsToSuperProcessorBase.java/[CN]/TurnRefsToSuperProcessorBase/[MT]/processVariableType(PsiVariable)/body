{
  final PsiTypeElement type=variable.getTypeElement();
  final PsiExpression initializer=variable.getInitializer();
  if (initializer != null) {
    addLink(type,initializer);
  }
  final PsiReference[] refs=mySearchHelper.findReferences(variable,GlobalSearchScope.projectScope(myProject),false);
  for (  PsiReference ref : refs) {
    final PsiElement element=ref.getElement();
    addLink(element,type);
    addLink(type,element);
  }
  if (variable instanceof PsiParameter) {
    final PsiElement declScope=((PsiParameter)variable).getDeclarationScope();
    if (declScope instanceof PsiCatchSection) {
      markNode(type);
    }
 else     if (declScope instanceof PsiForeachStatement) {
      final PsiExpression iteratedValue=((PsiForeachStatement)declScope).getIteratedValue();
      addLink(type,iteratedValue);
      addLink(iteratedValue,type);
    }
 else     if (declScope instanceof PsiMethod) {
      final PsiMethod method=(PsiMethod)declScope;
      final int index=method.getParameterList().getParameterIndex((PsiParameter)variable);
{
        PsiReference[] calls=mySearchHelper.findReferences(method,GlobalSearchScope.projectScope(myProject),false);
        for (        PsiReference call : calls) {
          PsiElement ref=call.getElement();
          PsiExpressionList argumentList;
          if (ref.getParent() instanceof PsiCall) {
            argumentList=((PsiCall)ref.getParent()).getArgumentList();
          }
 else           if (ref.getParent() instanceof PsiAnonymousClass) {
            argumentList=((PsiConstructorCall)ref.getParent().getParent()).getArgumentList();
          }
 else {
            continue;
          }
          PsiExpression[] args=argumentList.getExpressions();
          if (index >= args.length)           continue;
          addLink(type,args[index]);
        }
      }
final class Inner {
        void linkInheritors(        final PsiMethod[] methods){
          for (          final PsiMethod superMethod : methods) {
            final PsiParameter[] parameters=superMethod.getParameterList().getParameters();
            if (index >= parameters.length)             continue;
            final PsiTypeElement superType=parameters[index].getTypeElement();
            addLink(superType,type);
            addLink(type,superType);
          }
        }
      }
      ;
      final PsiMethod[] superMethods=method.findSuperMethods();
      new Inner().linkInheritors(superMethods);
      final PsiClass[] subClasses=mySearchHelper.findInheritors(method.getContainingClass(),GlobalSearchScope.projectScope(myProject),false);
      for (int i1=0; i1 != subClasses.length; ++i1) {
        final PsiMethod[] mBSs=subClasses[i1].findMethodsBySignature(method,true);
        new Inner().linkInheritors(mBSs);
      }
    }
 else {
      LOG.assertTrue(false);
    }
  }
}
