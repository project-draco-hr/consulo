{
  final String prefix=myNameElement.getText().substring(0,myRangeInNameElement.getStartOffset());
  if (!myStartTag) {
    final ASTNode startTagNode=XmlChildRole.START_TAG_NAME_FINDER.findChild(myElement.getNode());
    if (startTagNode != null) {
      final String startTagName=startTagNode.getText();
      if (startTagName != null) {
        if (startTagName.startsWith(prefix)) {
          return new Object[]{startTagName.substring(prefix.length())};
        }
      }
    }
    return EMPTY_ARRAY;
  }
  final Project project=myModule.getProject();
  final PsiClass baseClass=JavaPsiFacade.getInstance(project).findClass(myBaseClassQName,myModule.getModuleWithDependenciesAndLibrariesScope(false));
  if (baseClass == null) {
    return EMPTY_ARRAY;
  }
  final List<Object> result=new ArrayList<Object>();
  ClassInheritorsSearch.search(baseClass,myModule.getModuleWithDependenciesAndLibrariesScope(false),true,true,false).forEach(new Processor<PsiClass>(){
    @Override public boolean process(    PsiClass psiClass){
      if (psiClass.getContainingClass() != null) {
        return true;
      }
      String name=psiClass.getQualifiedName();
      if (name != null && name.startsWith(prefix)) {
        name=name.substring(prefix.length());
        result.add(JavaLookupElementBuilder.forClass(psiClass,name,true));
      }
      return true;
    }
  }
);
  return ArrayUtil.toObjectArray(result);
}
