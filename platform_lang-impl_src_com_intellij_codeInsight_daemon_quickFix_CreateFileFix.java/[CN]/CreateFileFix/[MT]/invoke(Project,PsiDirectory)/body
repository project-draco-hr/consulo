{
  myIsAvailableTimeStamp=0;
  try {
    if (myIsDirectory) {
      myDirectory.createSubdirectory(myNewFileName);
    }
 else {
      String newFileName=myNewFileName;
      String newDirectories=null;
      if (myNewFileName.contains("/")) {
        int pos=myNewFileName.lastIndexOf("/");
        newFileName=myNewFileName.substring(pos + 1);
        newDirectories=myNewFileName.substring(0,pos);
      }
      PsiDirectory directory=myDirectory;
      if (newDirectories != null) {
        try {
          VfsUtil.createDirectoryIfMissing(myDirectory.getVirtualFile(),newDirectories);
          VirtualFile vfsDir=VfsUtil.findRelativeFile(myDirectory.getVirtualFile(),ArrayUtil.toStringArray(StringUtil.split(newDirectories,"/")));
          directory=new PsiDirectoryImpl((PsiManagerImpl)myDirectory.getManager(),vfsDir);
        }
 catch (        IOException e) {
          throw new IncorrectOperationException(e.getMessage());
        }
      }
      final PsiFile newFile=directory.createFile(newFileName);
      String text=getFileText();
      if (text != null) {
        final FileType type=FileTypeRegistry.getInstance().getFileTypeByFileName(newFileName);
        final PsiFile psiFile=PsiFileFactory.getInstance(project).createFileFromText("_" + newFileName,type,text);
        final PsiElement psiElement=CodeStyleManager.getInstance(project).reformat(psiFile);
        text=psiElement.getText();
      }
      final FileEditorManager editorManager=FileEditorManager.getInstance(directory.getProject());
      final FileEditor[] fileEditors=editorManager.openFile(newFile.getVirtualFile(),true);
      if (text != null) {
        for (        FileEditor fileEditor : fileEditors) {
          if (fileEditor instanceof TextEditor) {
            final Document document=((TextEditor)fileEditor).getEditor().getDocument();
            document.setText(text);
            if (ApplicationManager.getApplication().isUnitTestMode()) {
              FileDocumentManager.getInstance().saveDocument(document);
            }
            PsiDocumentManager.getInstance(project).commitDocument(document);
            break;
          }
        }
      }
    }
  }
 catch (  IncorrectOperationException e) {
    myIsAvailable=false;
  }
}
