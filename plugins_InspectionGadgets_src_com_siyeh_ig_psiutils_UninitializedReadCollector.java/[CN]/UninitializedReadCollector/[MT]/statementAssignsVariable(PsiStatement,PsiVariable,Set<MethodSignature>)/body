{
  if (statement == null) {
    return false;
  }
  if (statement instanceof PsiBreakStatement || statement instanceof PsiContinueStatement || statement instanceof PsiAssertStatement|| statement instanceof PsiEmptyStatement) {
    return false;
  }
 else   if (statement instanceof PsiReturnStatement) {
    final PsiReturnStatement returnStatement=(PsiReturnStatement)statement;
    final PsiExpression returnValue=returnStatement.getReturnValue();
    return expressionAssignsVariable(returnValue,variable,checkedMethods);
  }
 else   if (statement instanceof PsiThrowStatement) {
    final PsiThrowStatement throwStatement=(PsiThrowStatement)statement;
    final PsiExpression exception=throwStatement.getException();
    return expressionAssignsVariable(exception,variable,checkedMethods);
  }
 else   if (statement instanceof PsiExpressionListStatement) {
    final PsiExpressionListStatement list=(PsiExpressionListStatement)statement;
    final PsiExpressionList expressionList=list.getExpressionList();
    final PsiExpression[] expressions=expressionList.getExpressions();
    for (    final PsiExpression expression : expressions) {
      if (expressionAssignsVariable(expression,variable,checkedMethods)) {
        return true;
      }
    }
    return false;
  }
 else   if (statement instanceof PsiExpressionStatement) {
    final PsiExpressionStatement expressionStatement=(PsiExpressionStatement)statement;
    final PsiExpression expression=expressionStatement.getExpression();
    return expressionAssignsVariable(expression,variable,checkedMethods);
  }
 else   if (statement instanceof PsiDeclarationStatement) {
    final PsiDeclarationStatement declarationStatement=(PsiDeclarationStatement)statement;
    return declarationStatementAssignsVariable(declarationStatement,variable,checkedMethods);
  }
 else   if (statement instanceof PsiForStatement) {
    return forStatementAssignsVariable((PsiForStatement)statement,variable,checkedMethods);
  }
 else   if (statement instanceof PsiForeachStatement) {
    final PsiForeachStatement foreachStatement=(PsiForeachStatement)statement;
    return foreachStatementAssignsVariable(foreachStatement,variable);
  }
 else   if (statement instanceof PsiWhileStatement) {
    final PsiWhileStatement whileStatement=(PsiWhileStatement)statement;
    return whileStatementAssignsVariable(whileStatement,variable,checkedMethods);
  }
 else   if (statement instanceof PsiDoWhileStatement) {
    return doWhileAssignsVariable((PsiDoWhileStatement)statement,variable,checkedMethods);
  }
 else   if (statement instanceof PsiSynchronizedStatement) {
    final PsiCodeBlock body=((PsiSynchronizedStatement)statement).getBody();
    return blockAssignsVariable(body,variable,checkedMethods);
  }
 else   if (statement instanceof PsiBlockStatement) {
    final PsiBlockStatement blockStatement=(PsiBlockStatement)statement;
    final PsiCodeBlock codeBlock=blockStatement.getCodeBlock();
    return blockAssignsVariable(codeBlock,variable,checkedMethods);
  }
 else   if (statement instanceof PsiLabeledStatement) {
    final PsiLabeledStatement labeledStatement=(PsiLabeledStatement)statement;
    final PsiStatement statementLabeled=labeledStatement.getStatement();
    return statementAssignsVariable(statementLabeled,variable,checkedMethods);
  }
 else   if (statement instanceof PsiIfStatement) {
    final PsiIfStatement ifStatement=(PsiIfStatement)statement;
    return ifStatementAssignsVariable(ifStatement,variable,checkedMethods);
  }
 else   if (statement instanceof PsiTryStatement) {
    final PsiTryStatement tryStatement=(PsiTryStatement)statement;
    return tryStatementAssignsVariable(tryStatement,variable,checkedMethods);
  }
 else   if (statement instanceof PsiSwitchStatement) {
    final PsiSwitchStatement switchStatement=(PsiSwitchStatement)statement;
    return switchStatementAssignsVariable(switchStatement,variable,checkedMethods);
  }
 else {
    return false;
  }
}
