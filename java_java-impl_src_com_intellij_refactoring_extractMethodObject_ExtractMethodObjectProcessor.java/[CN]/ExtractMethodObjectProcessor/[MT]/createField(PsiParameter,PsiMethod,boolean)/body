{
  final String parameterName=parameter.getName();
  PsiType type=parameter.getType();
  if (type instanceof PsiEllipsisType)   type=((PsiEllipsisType)type).toArrayType();
  try {
    final JavaCodeStyleManager styleManager=JavaCodeStyleManager.getInstance(getMethod().getProject());
    final String fieldName=styleManager.suggestVariableName(VariableKind.FIELD,styleManager.variableNameToPropertyName(parameterName,VariableKind.PARAMETER),null,type).names[0];
    PsiField field=myElementFactory.createField(fieldName,type);
    final PsiModifierList modifierList=field.getModifierList();
    LOG.assertTrue(modifierList != null);
    final NullableNotNullManager manager=NullableNotNullManager.getInstance(myProject);
    if (manager.isNullable(parameter,false)) {
      modifierList.addAfter(myElementFactory.createAnnotationFromText("@" + manager.getDefaultNullable(),field),null);
    }
    modifierList.setModifierProperty(PsiModifier.FINAL,isFinal);
    final PsiCodeBlock methodBody=constructor.getBody();
    LOG.assertTrue(methodBody != null);
    @NonNls final String stmtText;
    if (Comparing.strEqual(parameterName,fieldName)) {
      stmtText="this." + fieldName + " = "+ parameterName+ ";";
    }
 else {
      stmtText=fieldName + " = " + parameterName+ ";";
    }
    PsiStatement assignmentStmt=myElementFactory.createStatementFromText(stmtText,methodBody);
    assignmentStmt=(PsiStatement)CodeStyleManager.getInstance(constructor.getProject()).reformat(assignmentStmt);
    methodBody.add(assignmentStmt);
    field=(PsiField)myInnerClass.add(field);
    return field;
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
  return null;
}
