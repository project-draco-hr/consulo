{
  PsiType type=variable.getType();
  if (!(type instanceof PsiClassType))   return;
  String shortName=((PsiClassType)type).getClassName();
  PsiManager manager=parameterList.getManager();
  final JavaPsiFacade facade=JavaPsiFacade.getInstance(manager.getProject());
  PsiShortNamesCache shortNamesCache=facade.getShortNamesCache();
  PsiClass[] classes=shortNamesCache.getClassesByName(shortName,GlobalSearchScope.allScope(manager.getProject()));
  PsiElementFactory factory=facade.getElementFactory();
  for (  PsiClass aClass : classes) {
    if (GenericsHighlightUtil.checkReferenceTypeArgumentList(aClass,parameterList,PsiSubstitutor.EMPTY,false) == null) {
      PsiType[] actualTypeParameters=parameterList.getTypeArguments();
      PsiTypeParameter[] classTypeParameters=aClass.getTypeParameters();
      HashMap<PsiTypeParameter,PsiType> map=new HashMap<PsiTypeParameter,PsiType>();
      for (int j=0; j < classTypeParameters.length; j++) {
        PsiTypeParameter classTypeParameter=classTypeParameters[j];
        PsiType actualTypeParameter=actualTypeParameters[j];
        map.put(classTypeParameter,actualTypeParameter);
      }
      PsiSubstitutor substitutor=factory.createSubstitutor(map);
      PsiType suggestedType=factory.createType(aClass,substitutor);
      QuickFixAction.registerQuickFixAction(highlightInfo,new VariableTypeFix(variable,suggestedType));
    }
  }
}
