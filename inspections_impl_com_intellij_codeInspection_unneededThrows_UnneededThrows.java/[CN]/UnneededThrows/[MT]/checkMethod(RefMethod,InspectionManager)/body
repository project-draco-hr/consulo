{
  if (refMethod.hasSuperMethods())   return null;
  PsiClassType[] unThrown=refMethod.getUnThrownExceptions();
  if (unThrown == null)   return null;
  PsiMethod psiMethod=(PsiMethod)refMethod.getElement();
  PsiClassType[] throwsList=psiMethod.getThrowsList().getReferencedTypes();
  PsiJavaCodeReferenceElement[] throwsRefs=psiMethod.getThrowsList().getReferenceElements();
  ArrayList<ProblemDescriptor> problems=null;
  for (int i=0; i < throwsList.length; i++) {
    PsiClassType throwsType=throwsList[i];
    PsiJavaCodeReferenceElement throwsRef=throwsRefs[i];
    if (ExceptionUtil.isUncheckedException(throwsType))     continue;
    for (    PsiClassType s : unThrown) {
      if (s.equals(throwsType)) {
        if (problems == null)         problems=new ArrayList<ProblemDescriptor>(1);
        if (refMethod.isAbstract() || refMethod.getOwnerClass().isInterface()) {
          problems.add(manager.createProblemDescriptor(throwsRef,InspectionsBundle.message("inspection.redundant.throws.problem.descriptor","<code>#ref</code>"),getFix(),ProblemHighlightType.LIKE_UNUSED_SYMBOL));
        }
 else         if (refMethod.getDerivedMethods().size() > 0) {
          problems.add(manager.createProblemDescriptor(throwsRef,InspectionsBundle.message("inspection.redundant.throws.problem.descriptor1","<code>#ref</code>"),getFix(),ProblemHighlightType.LIKE_UNUSED_SYMBOL));
        }
 else {
          problems.add(manager.createProblemDescriptor(throwsRef,InspectionsBundle.message("inspection.redundant.throws.problem.descriptor2","<code>#ref</code>"),getFix(),ProblemHighlightType.LIKE_UNUSED_SYMBOL));
        }
      }
    }
  }
  if (problems != null) {
    return problems.toArray(new ProblemDescriptorImpl[problems.size()]);
  }
  return null;
}
