{
  if (exp1 == null && exp2 == null) {
    return true;
  }
  if (exp1 == null || exp2 == null) {
    return false;
  }
  final int type1=getStatementType(exp1);
  final int type2=getStatementType(exp2);
  if (type1 != type2) {
    return false;
  }
switch (type1) {
case ASSERT_STATEMENT:
    return assertStatementsAreEquivalent((PsiAssertStatement)exp1,(PsiAssertStatement)exp2);
case BLOCK_STATEMENT:
  return blockStatementsAreEquivalent((PsiBlockStatement)exp1,(PsiBlockStatement)exp2);
case BREAK_STATEMENT:
return breakStatementsAreEquivalent((PsiBreakStatement)exp1,(PsiBreakStatement)exp2);
case CONTINUE_STATEMENT:
return continueStatementsAreEquivalent((PsiContinueStatement)exp1,(PsiContinueStatement)exp2);
case DECLARATION_STATEMENT:
return declarationStatementsAreEquivalent((PsiDeclarationStatement)exp1,(PsiDeclarationStatement)exp2);
case DO_WHILE_STATEMENT:
return doWhileStatementsAreEquivalent((PsiDoWhileStatement)exp1,(PsiDoWhileStatement)exp2);
case EMPTY_STATEMENT:
return true;
case EXPRESSION_LIST_STATEMENT:
return expressionListStatementsAreEquivalent((PsiExpressionListStatement)exp1,(PsiExpressionListStatement)exp2);
case EXPRESSION_STATEMENT:
return expressionStatementsAreEquivalent((PsiExpressionStatement)exp1,(PsiExpressionStatement)exp2);
case FOR_STATEMENT:
return forStatementsAreEquivalent((PsiForStatement)exp1,(PsiForStatement)exp2);
case FOR_EACH_STATEMENT:
return forEachStatementsAreEquivalent((PsiForeachStatement)exp1,(PsiForeachStatement)exp2);
case IF_STATEMENT:
return ifStatementsAreEquivalent((PsiIfStatement)exp1,(PsiIfStatement)exp2);
case LABELED_STATEMENT:
return labeledStatementsAreEquivalent((PsiLabeledStatement)exp1,(PsiLabeledStatement)exp2);
case RETURN_STATEMENT:
return returnStatementsAreEquivalent((PsiReturnStatement)exp1,(PsiReturnStatement)exp2);
case SWITCH_LABEL_STATEMENT:
return switchLabelStatementsAreEquivalent((PsiSwitchLabelStatement)exp1,(PsiSwitchLabelStatement)exp2);
case SWITCH_STATEMENT:
return switchStatementsAreEquivalent((PsiSwitchStatement)exp1,(PsiSwitchStatement)exp2);
case SYNCHRONIZED_STATEMENT:
return synchronizedStatementsAreEquivalent((PsiSynchronizedStatement)exp1,(PsiSynchronizedStatement)exp2);
case THROW_STATEMENT:
return throwStatementsAreEquivalent((PsiThrowStatement)exp1,(PsiThrowStatement)exp2);
case TRY_STATEMENT:
return tryStatementsAreEquivalent((PsiTryStatement)exp1,(PsiTryStatement)exp2);
case WHILE_STATEMENT:
return whileStatementsAreEquivalent((PsiWhileStatement)exp1,(PsiWhileStatement)exp2);
default :
return false;
}
}
