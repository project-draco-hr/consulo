{
  if (statement1 == null && statement2 == null) {
    return true;
  }
  if (statement1 == null || statement2 == null) {
    return false;
  }
  final int type1=getStatementType(statement1);
  final int type2=getStatementType(statement2);
  if (type1 != type2) {
    return false;
  }
switch (type1) {
case ASSERT_STATEMENT:
    final PsiAssertStatement assertStatement1=(PsiAssertStatement)statement1;
  final PsiAssertStatement assertStatement2=(PsiAssertStatement)statement2;
return assertStatementsAreEquivalent(assertStatement1,assertStatement2);
case BLOCK_STATEMENT:
final PsiBlockStatement blockStatement1=(PsiBlockStatement)statement1;
final PsiBlockStatement blockStatement2=(PsiBlockStatement)statement2;
return blockStatementsAreEquivalent(blockStatement1,blockStatement2);
case BREAK_STATEMENT:
final PsiBreakStatement breakStatement1=(PsiBreakStatement)statement1;
final PsiBreakStatement breakStatement2=(PsiBreakStatement)statement2;
return breakStatementsAreEquivalent(breakStatement1,breakStatement2);
case CONTINUE_STATEMENT:
final PsiContinueStatement continueStatement1=(PsiContinueStatement)statement1;
final PsiContinueStatement continueStatement2=(PsiContinueStatement)statement2;
return continueStatementsAreEquivalent(continueStatement1,continueStatement2);
case DECLARATION_STATEMENT:
final PsiDeclarationStatement declarationStatement1=(PsiDeclarationStatement)statement1;
final PsiDeclarationStatement declarationStatement2=(PsiDeclarationStatement)statement2;
return declarationStatementsAreEquivalent(declarationStatement1,declarationStatement2);
case DO_WHILE_STATEMENT:
final PsiDoWhileStatement doWhileStatement1=(PsiDoWhileStatement)statement1;
final PsiDoWhileStatement doWhileStatement2=(PsiDoWhileStatement)statement2;
return doWhileStatementsAreEquivalent(doWhileStatement1,doWhileStatement2);
case EMPTY_STATEMENT:
return true;
case EXPRESSION_LIST_STATEMENT:
final PsiExpressionListStatement expressionListStatement1=(PsiExpressionListStatement)statement1;
final PsiExpressionListStatement expressionListStatement2=(PsiExpressionListStatement)statement2;
return expressionListStatementsAreEquivalent(expressionListStatement1,expressionListStatement2);
case EXPRESSION_STATEMENT:
final PsiExpressionStatement expressionStatement1=(PsiExpressionStatement)statement1;
final PsiExpressionStatement expressionStatement2=(PsiExpressionStatement)statement2;
return expressionStatementsAreEquivalent(expressionStatement1,expressionStatement2);
case FOR_STATEMENT:
final PsiForStatement forStatement1=(PsiForStatement)statement1;
final PsiForStatement forStatement2=(PsiForStatement)statement2;
return forStatementsAreEquivalent(forStatement1,forStatement2);
case FOR_EACH_STATEMENT:
final PsiForeachStatement forEachStatement1=(PsiForeachStatement)statement1;
final PsiForeachStatement forEachStatement2=(PsiForeachStatement)statement2;
return forEachStatementsAreEquivalent(forEachStatement1,forEachStatement2);
case IF_STATEMENT:
return ifStatementsAreEquivalent((PsiIfStatement)statement1,(PsiIfStatement)statement2);
case LABELED_STATEMENT:
final PsiLabeledStatement labeledStatement1=(PsiLabeledStatement)statement1;
final PsiLabeledStatement labeledStatement2=(PsiLabeledStatement)statement2;
return labeledStatementsAreEquivalent(labeledStatement1,labeledStatement2);
case RETURN_STATEMENT:
final PsiReturnStatement returnStatement1=(PsiReturnStatement)statement1;
final PsiReturnStatement returnStatement2=(PsiReturnStatement)statement2;
return returnStatementsAreEquivalent(returnStatement1,returnStatement2);
case SWITCH_LABEL_STATEMENT:
final PsiSwitchLabelStatement switchLabelStatement1=(PsiSwitchLabelStatement)statement1;
final PsiSwitchLabelStatement switchLabelStatement2=(PsiSwitchLabelStatement)statement2;
return switchLabelStatementsAreEquivalent(switchLabelStatement1,switchLabelStatement2);
case SWITCH_STATEMENT:
final PsiSwitchStatement switchStatement1=(PsiSwitchStatement)statement1;
final PsiSwitchStatement switchStatement2=(PsiSwitchStatement)statement2;
return switchStatementsAreEquivalent(switchStatement1,switchStatement2);
case SYNCHRONIZED_STATEMENT:
final PsiSynchronizedStatement synchronizedStatement1=(PsiSynchronizedStatement)statement1;
final PsiSynchronizedStatement synchronizedStatement2=(PsiSynchronizedStatement)statement2;
return synchronizedStatementsAreEquivalent(synchronizedStatement1,synchronizedStatement2);
case THROW_STATEMENT:
final PsiThrowStatement throwStatement1=(PsiThrowStatement)statement1;
final PsiThrowStatement throwStatement2=(PsiThrowStatement)statement2;
return throwStatementsAreEquivalent(throwStatement1,throwStatement2);
case TRY_STATEMENT:
final PsiTryStatement tryStatement1=(PsiTryStatement)statement1;
final PsiTryStatement tryStatement2=(PsiTryStatement)statement2;
return tryStatementsAreEquivalent(tryStatement1,tryStatement2);
case WHILE_STATEMENT:
final PsiWhileStatement whileStatement1=(PsiWhileStatement)statement1;
final PsiWhileStatement whileStatement2=(PsiWhileStatement)statement2;
return whileStatementsAreEquivalent(whileStatement1,whileStatement2);
default :
final String text1=statement1.getText();
final String text2=statement2.getText();
return text1.equals(text2);
}
}
