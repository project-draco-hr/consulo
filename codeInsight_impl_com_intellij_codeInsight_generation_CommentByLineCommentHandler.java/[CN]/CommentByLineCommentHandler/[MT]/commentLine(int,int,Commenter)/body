{
  if (commenter == null)   commenter=findCommenter(line);
  if (commenter == null)   return;
  String prefix=commenter.getLineCommentPrefix();
  if (prefix != null) {
    myDocument.insertString(offset,prefix);
  }
 else {
    prefix=commenter.getBlockCommentPrefix();
    String suffix=commenter.getBlockCommentSuffix();
    if (prefix == null || suffix == null)     return;
    int endOffset=myDocument.getLineEndOffset(line);
    if (endOffset == offset && myLine1 != myLine2)     return;
    final int textLength=myDocument.getTextLength();
    final CharSequence chars=myDocument.getCharsSequence();
    offset=CharArrayUtil.shiftForward(chars,offset," \t");
    if (endOffset == textLength) {
      final int shifted=CharArrayUtil.shiftBackward(chars,textLength - 1," \t");
      if (shifted < textLength - 1)       endOffset=shifted;
    }
 else {
      endOffset=CharArrayUtil.shiftBackward(chars,endOffset," \t");
    }
    final int suffixLen=suffix.length();
    final int prefixLen=prefix.length();
    if (endOffset - offset > prefixLen + suffixLen) {
      boolean insertPrefix=false;
      int i=endOffset - suffixLen;
      while (i >= offset) {
        if (insertPrefix) {
          if (CharArrayUtil.regionMatches(chars,i,prefix)) {
            i-=suffixLen;
            insertPrefix=false;
            continue;
          }
          if (CharArrayUtil.regionMatches(chars,i,suffix)) {
            myDocument.insertString(i + suffixLen,prefix);
          }
        }
 else {
          if (!CharArrayUtil.regionMatches(chars,i,suffix)) {
            myDocument.insertString(i + suffixLen,suffix);
          }
          insertPrefix=true;
        }
        --i;
      }
      myDocument.insertString(offset,prefix);
    }
 else {
      myDocument.insertString(endOffset,suffix);
      myDocument.insertString(offset,prefix);
    }
  }
}
