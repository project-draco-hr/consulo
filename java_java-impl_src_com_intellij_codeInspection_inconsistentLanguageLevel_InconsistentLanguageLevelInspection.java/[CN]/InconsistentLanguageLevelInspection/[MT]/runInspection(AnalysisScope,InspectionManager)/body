{
  final Set<Module> modules=new HashSet<Module>();
  scope.accept(new PsiElementVisitor(){
    public void visitElement(    PsiElement element){
      final Module module=ModuleUtil.findModuleForPsiElement(element);
      if (module != null) {
        modules.add(module);
      }
    }
  }
);
  if (!modules.isEmpty()) {
    final LanguageLevel projectLanguageLevel=LanguageLevelProjectExtension.getInstance(modules.iterator().next().getProject()).getLanguageLevel();
    for (    Module module : modules) {
      LanguageLevel languageLevel=LanguageLevelModuleExtension.getInstance(module).getLanguageLevel();
      if (languageLevel == null) {
        languageLevel=projectLanguageLevel;
      }
      LOGGER.assertTrue(languageLevel != null);
      final RefModule refModule=getRefManager().getRefModule(module);
      for (      OrderEntry entry : ModuleRootManager.getInstance(module).getOrderEntries()) {
        if (entry instanceof ModuleOrderEntry) {
          final Module dependantModule=((ModuleOrderEntry)entry).getModule();
          if (dependantModule != null) {
            LanguageLevel dependantLanguageLevel=LanguageLevelModuleExtension.getInstance(dependantModule).getLanguageLevel();
            if (dependantLanguageLevel == null) {
              dependantLanguageLevel=projectLanguageLevel;
            }
            LOGGER.assertTrue(dependantLanguageLevel != null);
            if (languageLevel.compareTo(dependantLanguageLevel) < 0) {
              final CommonProblemDescriptor problemDescriptor=manager.createProblemDescriptor("Inconsistent language level settings: module " + module.getName() + " with language level "+ languageLevel+ " depends on module "+ dependantModule.getName()+ " with language level "+ dependantLanguageLevel,new UnnecessaryModuleDependencyInspection.RemoveModuleDependencyFix(module,dependantModule),new OpenModuleSettingsFix(module));
              addProblemElement(refModule,problemDescriptor);
            }
          }
        }
      }
    }
  }
}
