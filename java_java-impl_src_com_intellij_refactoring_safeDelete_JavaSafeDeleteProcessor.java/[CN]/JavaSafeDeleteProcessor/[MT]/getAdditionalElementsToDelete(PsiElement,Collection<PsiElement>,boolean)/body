{
  if (element instanceof PsiField) {
    PsiField field=(PsiField)element;
    final Project project=element.getProject();
    String propertyName=JavaCodeStyleManager.getInstance(project).variableNameToPropertyName(field.getName(),VariableKind.FIELD);
    PsiClass aClass=field.getContainingClass();
    if (aClass != null) {
      boolean isStatic=field.hasModifierProperty(PsiModifier.STATIC);
      PsiMethod getter=PropertyUtil.findPropertyGetter(aClass,propertyName,isStatic,false);
      if (allElementsToDelete.contains(getter) || getter != null && !getter.isPhysical())       getter=null;
      PsiMethod setter=PropertyUtil.findPropertySetter(aClass,propertyName,isStatic,false);
      if (allElementsToDelete.contains(setter) || setter != null && !setter.isPhysical())       setter=null;
      if (askUser && (getter != null || setter != null)) {
        final String message=RefactoringMessageUtil.getGetterSetterMessage(field.getName(),RefactoringBundle.message("delete.title"),getter,setter);
        if (Messages.showYesNoDialog(project,message,RefactoringBundle.message("safe.delete.title"),Messages.getQuestionIcon()) != 0) {
          getter=null;
          setter=null;
        }
      }
      List<PsiElement> elements=new ArrayList<PsiElement>();
      if (setter != null)       elements.add(setter);
      if (getter != null)       elements.add(getter);
      return elements;
    }
  }
  return null;
}
