{
  myProject=project;
  myTreeStructure=new FileTreeStructure(project,descriptor);
  myDescriptor=descriptor;
  myTree=tree;
  final DefaultTreeModel treeModel=new DefaultTreeModel(new DefaultMutableTreeNode());
  myTree.setModel(treeModel);
  addTreeExpansionListener();
  myTreeBuilder=createTreeBuilder(myTree,treeModel,myTreeStructure,FileComparator.getInstance(),descriptor,new Runnable(){
    public void run(){
      myTree.expandPath(new TreePath(treeModel.getRoot()));
      if (onInitialized != null) {
        onInitialized.run();
      }
    }
  }
);
  myTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    final TreeSelectionEvent e){
      processSelectionChange(e);
    }
  }
);
  new TreeSpeedSearch(myTree);
  myTree.setLineStyleAngled();
  TreeToolTipHandler.install(myTree);
  TreeUtil.installActions(myTree);
  myTree.getSelectionModel().setSelectionMode(myTreeStructure.getChooserDescriptor().getChooseMultiple() ? TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION : TreeSelectionModel.SINGLE_TREE_SELECTION);
  registerTreeActions();
  if (renderer == null) {
    renderer=new SimpleNodeRenderer(){
      public void customizeCellRenderer(      JTree tree,      Object value,      boolean selected,      boolean expanded,      boolean leaf,      int row,      boolean hasFocus){
        super.customizeCellRenderer(tree,value,selected,expanded,leaf,row,hasFocus);
        final Object userObject=((DefaultMutableTreeNode)value).getUserObject();
        if (userObject instanceof FileNodeDescriptor) {
          String comment=((FileNodeDescriptor)userObject).getComment();
          if (comment != null) {
            append(comment,SimpleTextAttributes.REGULAR_ATTRIBUTES);
          }
        }
      }
    }
;
  }
  myTree.setCellRenderer(renderer);
}
