{
  PsiBuilder.Marker arrMarker=builder.mark();
  PsiBuilder.Marker typeElementMarker=builder.mark();
  final ReferenceElementResult result=parseReferenceElement(builder,isUpper,expressionPossible);
  if (result == FAIL) {
    typeElementMarker.drop();
    arrMarker.rollbackTo();
    return FAIL;
  }
  typeElementMarker.done(CLASS_TYPE_ELEMENT);
  if (ParserUtils.lookAhead(builder,mLBRACK,mRBRACK)) {
    declarationBracketsParse(builder,arrMarker);
    return REF_WITH_TYPE_PARAMS;
  }
 else {
    arrMarker.drop();
    return result;
  }
}
