{
  String text=getFirstChildNode().getText();
  int textLength=text.length();
  IElementType i=getFirstChildNode().getElementType();
  if (i == INTEGER_LITERAL) {
    try {
      if (text.startsWith(HEXPREFIX) || text.startsWith(HEXPREFIX2)) {
        if (textLength <= 9)         return Integer.valueOf(text.substring(2),16);
        final Long value=parseDigits(text.substring(2),4,32);
        return value == null ? null : Integer.valueOf(value.intValue());
      }
      if (StringUtil.startsWithChar(text,'0')) {
        if (textLength <= 12)         return Integer.valueOf(text,8);
        final Long value=parseDigits(text,3,32);
        return value == null ? null : Integer.valueOf(value.intValue());
      }
      final long l=Long.parseLong(text,10);
      if (text.equals(_2_IN_31))       return Integer.valueOf((int)l);
      long converted=(int)l;
      return l == converted ? Integer.valueOf((int)l) : null;
    }
 catch (    Exception e) {
      return null;
    }
  }
  if (i == LONG_LITERAL) {
    if (StringUtil.endsWithChar(text,'L') || StringUtil.endsWithChar(text,'l')) {
      text=text.substring(0,textLength - 1);
      textLength=text.length();
    }
    try {
      if (text.startsWith(HEXPREFIX) || text.startsWith(HEXPREFIX2)) {
        if (textLength <= 17)         return Long.valueOf(text.substring(2),16);
        return parseDigits(text.substring(2),4,64);
      }
      if (StringUtil.startsWithChar(text,'0')) {
        if (textLength <= 23)         return Long.valueOf(text,8);
        return parseDigits(text,3,64);
      }
      if (_2_IN_63.equals(text))       return Long.valueOf(-1L << 63);
      return Long.valueOf(text,10);
    }
 catch (    Exception e) {
      return null;
    }
  }
  if (i == FLOAT_LITERAL) {
    try {
      return Float.valueOf(text);
    }
 catch (    Exception e) {
      return null;
    }
  }
  if (i == DOUBLE_LITERAL) {
    try {
      return Double.valueOf(text);
    }
 catch (    Exception e) {
      return null;
    }
  }
  if (i == CHARACTER_LITERAL) {
    if (StringUtil.endsWithChar(text,'\'')) {
      if (textLength == 1)       return null;
      text=text.substring(1,textLength - 1);
    }
 else {
      text=text.substring(1,textLength);
    }
    StringBuilder chars=new StringBuilder();
    boolean success=parseStringCharacters(text,chars,null);
    if (!success)     return null;
    if (chars.length() != 1)     return null;
    return new Character(chars.charAt(0));
  }
  if (i == STRING_LITERAL) {
    if (StringUtil.endsWithChar(text,'\"')) {
      if (textLength == 1)       return null;
      text=text.substring(1,textLength - 1);
    }
 else {
      if (text.startsWith(QUOT) && text.endsWith(QUOT) && textLength > QUOT.length()) {
        text=text.substring(QUOT.length(),textLength - QUOT.length());
      }
 else {
        return null;
      }
    }
    return internedParseStringCharacters(text);
  }
  if (i == TRUE_KEYWORD) {
    return Boolean.TRUE;
  }
  if (i == FALSE_KEYWORD) {
    return Boolean.FALSE;
  }
  if (i == NULL_KEYWORD) {
    return null;
  }
  return null;
}
