{
  super(new BorderLayout());
  setFocusable(false);
  myDataIsDirty=false;
  myProject=project;
  myCapableOfExcludingChanges=capableOfExcludingChanges;
  myToSelect=toSelect;
  final ChangeNodeDecorator decorator=MyUseCase.LOCAL_CHANGES.equals(useCase) ? RemoteRevisionsCache.getInstance(myProject).getChangesNodeDecorator() : null;
  myViewer=new ChangesTreeList<Change>(myProject,changes,capableOfExcludingChanges,highlightProblems,inclusionListener,decorator){
    protected DefaultTreeModel buildTreeModel(    final List<Change> changes,    ChangeNodeDecorator changeNodeDecorator){
      TreeModelBuilder builder=new TreeModelBuilder(myProject,false);
      return builder.buildModel(changes,changeNodeDecorator);
    }
    protected List<Change> getSelectedObjects(    final ChangesBrowserNode<Change> node){
      return node.getAllChangesUnder();
    }
    @Nullable protected Change getLeadSelectedObject(    final ChangesBrowserNode node){
      final Object o=node.getUserObject();
      if (o instanceof Change) {
        return (Change)o;
      }
      return null;
    }
  }
;
  myViewer.setDoubleClickHandler(getDoubleClickHandler());
  setInitialSelection(changeLists,changes,initialListSelection);
  rebuildList();
  add(myViewer,BorderLayout.CENTER);
  myHeaderPanel=new JPanel(new BorderLayout());
  myHeaderPanel.add(createToolbar(),BorderLayout.CENTER);
  add(myHeaderPanel,BorderLayout.NORTH);
  myBottomPanel=new JPanel(new BorderLayout());
  add(myBottomPanel,BorderLayout.SOUTH);
  myViewer.installPopupHandler(myToolBarGroup);
}
