{
  if (!myPanel.isOkToExecute()) {
    UIUtil.invokeLaterIfNeeded(new Runnable(){
      @Override public void run(){
        Messages.showErrorDialog(myProject,VcsBundle.message("create.patch.error.title",myPanel.getError()),CommonBundle.getErrorTitle());
      }
    }
);
    return;
  }
  final String fileName=myPanel.getFileName();
  final File file=new File(fileName).getAbsoluteFile();
  if (file.exists()) {
    final int[] result=new int[1];
    UIUtil.invokeAndWaitIfNeeded(new Runnable(){
      @Override public void run(){
        result[0]=Messages.showYesNoDialog(myProject,"File " + file.getName() + " ("+ file.getParent()+ ")"+ " already exists.\nDo you want to overwrite it?",CommonBundle.getWarningTitle(),Messages.getWarningIcon());
      }
    }
);
    if (Messages.NO == result[0])     return;
  }
  myPanel.onOk();
  myCommitContext.putUserData(BaseRevisionTextPatchEP.ourPutBaseRevisionTextKey,myPanel.isStoreTexts());
  final List<FilePath> list=new ArrayList<FilePath>();
  for (  Change change : myPanel.getIncludedChanges()) {
    list.add(ChangesUtil.getFilePath(change));
  }
  myCommitContext.putUserData(BaseRevisionTextPatchEP.ourBaseRevisionPaths,list);
  int binaryCount=0;
  for (  Change change : changes) {
    if (ChangesUtil.isBinaryChange(change)) {
      binaryCount++;
    }
  }
  if (binaryCount == changes.size()) {
    WaitForProgressToShow.runOrInvokeLaterAboveProgress(new Runnable(){
      public void run(){
        Messages.showInfoMessage(myProject,VcsBundle.message("create.patch.all.binary"),VcsBundle.message("create.patch.commit.action.title"));
      }
    }
,null,myProject);
    return;
  }
  try {
    VcsConfiguration.getInstance(myProject).acceptLastCreatedPatchName(file.getName());
    PATCH_PATH=file.getParent();
    final boolean reversePatch=myPanel.isReversePatch();
    List<FilePatch> patches=IdeaTextPatchBuilder.buildPatch(myProject,changes,myProject.getBaseDir().getPresentableUrl(),reversePatch);
    PatchWriter.writePatches(myProject,fileName,patches,myCommitContext,myPanel.getEncoding());
    final String message;
    if (binaryCount == 0) {
      message=VcsBundle.message("create.patch.success.confirmation",file.getPath());
    }
 else {
      message=VcsBundle.message("create.patch.partial.success.confirmation",file.getPath(),binaryCount);
    }
    WaitForProgressToShow.runOrInvokeLaterAboveProgress(new Runnable(){
      public void run(){
        final VcsConfiguration configuration=VcsConfiguration.getInstance(myProject);
        if (Boolean.TRUE.equals(configuration.SHOW_PATCH_IN_EXPLORER)) {
          ShowFilePathAction.openFile(file);
        }
 else         if (Boolean.FALSE.equals(configuration.SHOW_PATCH_IN_EXPLORER)) {
          return;
        }
 else {
          configuration.SHOW_PATCH_IN_EXPLORER=ShowFilePathAction.showDialog(myProject,message,VcsBundle.message("create.patch.commit.action.title"),file);
        }
      }
    }
,null,myProject);
  }
 catch (  ProcessCanceledException e) {
  }
catch (  final Exception ex) {
    LOG.info(ex);
    WaitForProgressToShow.runOrInvokeLaterAboveProgress(new Runnable(){
      public void run(){
        Messages.showErrorDialog(myProject,VcsBundle.message("create.patch.error.title",ex.getMessage()),CommonBundle.getErrorTitle());
      }
    }
,null,myProject);
  }
}
