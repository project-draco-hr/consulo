{
  if (ConflictDescriptor.Reason.edited.name().equals(reason)) {
    return SVNConflictReason.EDITED;
  }
 else   if (ConflictDescriptor.Reason.obstructed.name().equals(reason)) {
    return SVNConflictReason.OBSTRUCTED;
  }
 else   if (ConflictDescriptor.Reason.deleted.name().equals(reason)) {
    return SVNConflictReason.DELETED;
  }
 else   if (ConflictDescriptor.Reason.missing.name().equals(reason)) {
    return SVNConflictReason.MISSING;
  }
 else   if (ConflictDescriptor.Reason.unversioned.name().equals(reason)) {
    return SVNConflictReason.UNVERSIONED;
  }
 else   if (ConflictDescriptor.Reason.added.name().equals(reason)) {
    return SVNConflictReason.ADDED;
  }
 else   if (ConflictDescriptor.Reason.replaced.name().equals(reason)) {
    return SVNConflictReason.REPLACED;
  }
  if ("edit".equals(reason)) {
    return SVNConflictReason.EDITED;
  }
 else   if (reason.contains("obstruct")) {
    return SVNConflictReason.OBSTRUCTED;
  }
 else   if ("delete".equals(reason)) {
    return SVNConflictReason.DELETED;
  }
 else   if (reason.contains("miss")) {
    return SVNConflictReason.MISSING;
  }
 else   if (reason.contains("unversion")) {
    return SVNConflictReason.UNVERSIONED;
  }
 else   if (reason.contains("add")) {
    return SVNConflictReason.ADDED;
  }
 else   if (reason.contains("replace")) {
    return SVNConflictReason.REPLACED;
  }
  throw new SAXException("Can not parse conflict reason: " + reason);
}
