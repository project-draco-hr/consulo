{
  @NonNls final String longName="ThisIsAQuiteLongNameWithParentheses().Dots.-Minuses-_UNDERSCORES_digits239:colons:/slashes\\AndOfCourseManyLetters";
  final List<MinusculeMatcher> matching=new ArrayList<MinusculeMatcher>();
  final List<MinusculeMatcher> nonMatching=new ArrayList<MinusculeMatcher>();
  for (  String s : CollectionFactory.ar("*","*i","*a","*u","T","ti",longName,longName.substring(0,20))) {
    matching.add(new MinusculeMatcher(s,NameUtil.MatchingCaseSensitivity.NONE));
  }
  for (  String s : CollectionFactory.ar("A","aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","tag")) {
    nonMatching.add(new MinusculeMatcher(s,NameUtil.MatchingCaseSensitivity.NONE));
  }
  PlatformTestUtil.startPerformanceTest("Matcher is slow",1700,new ThrowableRunnable(){
    @Override public void run(){
      for (int i=0; i < 100000; i++) {
        for (        MinusculeMatcher matcher : matching) {
          assertTrue(matcher.toString(),matcher.matches(longName));
        }
        for (        MinusculeMatcher matcher : nonMatching) {
          assertFalse(matcher.toString(),matcher.matches(longName));
        }
      }
    }
  }
).cpuBound().assertTiming();
}
