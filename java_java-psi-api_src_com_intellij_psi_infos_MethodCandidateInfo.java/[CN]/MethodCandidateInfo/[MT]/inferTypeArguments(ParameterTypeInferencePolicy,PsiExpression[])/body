{
  PsiMethod method=getElement();
  PsiTypeParameter[] typeParameters=method.getTypeParameters();
  JavaPsiFacade javaPsiFacade=JavaPsiFacade.getInstance(method.getProject());
  if (!method.hasModifierProperty(PsiModifier.STATIC)) {
    final PsiClass containingClass=method.getContainingClass();
    if (containingClass != null && PsiUtil.isRawSubstitutor(containingClass,mySubstitutor)) {
      return javaPsiFacade.getElementFactory().createRawSubstitutor(mySubstitutor,typeParameters);
    }
  }
  final PsiElement parent=getParent();
  if (parent == null)   return PsiSubstitutor.EMPTY;
  return javaPsiFacade.getResolveHelper().inferTypeArguments(typeParameters,method.getParameterList().getParameters(),arguments,mySubstitutor,parent,policy);
}
