{
  if (myCalcedSubstitutor == null) {
    PsiSubstitutor incompleteSubstitutor=super.getSubstitutor();
    PsiMethod method=getElement();
    if (myTypeArguments == null) {
      Map<PsiElement,PsiMethod> map;
synchronized (LOCK) {
        map=CURRENT_CANDIDATE.get();
        if (map == null) {
          map=new ConcurrentWeakHashMap<PsiElement,PsiMethod>();
          CURRENT_CANDIDATE.set(map);
        }
      }
      map.put(myArgumentList,getElement());
      try {
        final Set<PsiParameterList> lists=LambdaUtil.ourParams.get();
        if (lists != null && !lists.isEmpty()) {
          return inferTypeArguments(DefaultParameterTypeInferencePolicy.INSTANCE);
        }
        myCalcedSubstitutor=inferTypeArguments(DefaultParameterTypeInferencePolicy.INSTANCE);
      }
  finally {
        map.remove(myArgumentList);
      }
    }
 else {
      PsiTypeParameter[] typeParams=method.getTypeParameters();
      for (int i=0; i < myTypeArguments.length && i < typeParams.length; i++) {
        incompleteSubstitutor=incompleteSubstitutor.put(typeParams[i],myTypeArguments[i]);
      }
      myCalcedSubstitutor=incompleteSubstitutor;
    }
  }
  return myCalcedSubstitutor;
}
