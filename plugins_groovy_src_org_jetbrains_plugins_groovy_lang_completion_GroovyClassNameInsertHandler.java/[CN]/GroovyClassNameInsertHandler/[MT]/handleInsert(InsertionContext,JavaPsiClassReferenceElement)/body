{
  PsiFile file=context.getFile();
  Editor editor=context.getEditor();
  int endOffset=editor.getCaretModel().getOffset();
  if (PsiTreeUtil.findElementOfClassAtOffset(file,endOffset - 1,GrImportStatement.class,false) != null || !(file instanceof GroovyFileBase)) {
    AllClassesGetter.INSERT_FQN.handleInsert(context,item);
    return;
  }
  PsiElement position=file.findElementAt(endOffset - 1);
  boolean parens=shouldInsertParentheses(position,item.getObject());
  final PsiClass psiClass=item.getObject();
  if (isInVariable(position) || GroovyCompletionContributor.isInPossibleClosureParameter(position)) {
    Project project=context.getProject();
    String qname=psiClass.getQualifiedName();
    String shortName=psiClass.getName();
    if (qname == null)     return;
    PsiClass aClass=JavaPsiFacade.getInstance(project).getResolveHelper().resolveReferencedClass(shortName,position);
    if (aClass == null) {
      ((GroovyFileBase)file).addImportForClass(psiClass);
      return;
    }
 else     if (aClass == CompletionUtil.getOriginalOrSelf(psiClass)) {
      return;
    }
  }
  AllClassesGetter.TRY_SHORTENING.handleInsert(context,item);
  if (parens && context.getCompletionChar() != '[') {
    int identifierEnd=context.getTailOffset();
    GroovyPsiElement place=PsiTreeUtil.findElementOfClassAtOffset(context.getFile(),context.getStartOffset(),GroovyPsiElement.class,false);
    JavaCompletionUtil.insertParentheses(context,item,false,place != null && GroovyCompletionUtil.hasConstructorParameters(psiClass,place));
    if (context.getCompletionChar() == '<' || psiClass.hasTypeParameters()) {
      context.getDocument().insertString(identifierEnd,"<>");
      context.setAddCompletionChar(false);
      context.getEditor().getCaretModel().moveToOffset(identifierEnd + 1);
    }
  }
}
