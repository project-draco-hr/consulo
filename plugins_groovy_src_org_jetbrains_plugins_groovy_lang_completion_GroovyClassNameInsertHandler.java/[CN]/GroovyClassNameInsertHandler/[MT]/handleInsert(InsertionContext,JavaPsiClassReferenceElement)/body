{
  PsiFile file=context.getFile();
  Editor editor=context.getEditor();
  int endOffset=editor.getCaretModel().getOffset();
  if (PsiTreeUtil.findElementOfClassAtOffset(file,endOffset - 1,GrImportStatement.class,false) != null) {
    AllClassesGetter.INSERT_FQN.handleInsert(context,item);
    return;
  }
  PsiElement position=file.findElementAt(endOffset - 1);
  final boolean inNew=position != null && isReferenceInNewExpression(position.getParent());
  final PsiClass psiClass=item.getObject();
  if (isInVariable(position) || GroovyCompletionContributor.isInClosurePropertyParameters(position)) {
    Project project=context.getProject();
    String qname=psiClass.getQualifiedName();
    String shortName=psiClass.getName();
    if (qname == null)     return;
    PsiClass aClass=JavaPsiFacade.getInstance(project).getResolveHelper().resolveReferencedClass(shortName,position);
    if (aClass == null) {
      ((GroovyFileBase)file).addImportForClass(psiClass);
      return;
    }
 else     if (aClass == psiClass) {
      return;
    }
  }
  AllClassesGetter.TRY_SHORTENING.handleInsert(context,item);
  if (inNew && !JavaCompletionUtil.hasAccessibleInnerClass(psiClass,file)) {
    JavaCompletionUtil.insertParentheses(context,item,false,GroovyCompletionUtil.hasConstructorParameters(psiClass));
  }
}
