{
  element.accept(new JavaRecursiveElementVisitor(){
    @Override public void visitReferenceElement(    PsiJavaCodeReferenceElement reference){
      super.visitReferenceElement(reference);
      if (!reference.isQualified()) {
        final PsiElement resolved=reference.resolve();
        if (resolved instanceof PsiTypeParameter) {
          final PsiTypeParameter typeParameter=(PsiTypeParameter)resolved;
          if (PsiTreeUtil.isAncestor(typeParameter.getOwner(),element,false) && filter.value(typeParameter)) {
            used.add(typeParameter);
          }
        }
      }
    }
    @Override public void visitExpression(    final PsiExpression expression){
      super.visitExpression(expression);
      final PsiType type=expression.getType();
      final PsiClass resolved=PsiUtil.resolveClassInType(type);
      if (resolved instanceof PsiTypeParameter && PsiTreeUtil.isAncestor(((PsiTypeParameter)resolved).getOwner(),element,false) && filter.value((PsiTypeParameter)resolved)) {
        used.add((PsiTypeParameter)resolved);
      }
    }
  }
);
}
