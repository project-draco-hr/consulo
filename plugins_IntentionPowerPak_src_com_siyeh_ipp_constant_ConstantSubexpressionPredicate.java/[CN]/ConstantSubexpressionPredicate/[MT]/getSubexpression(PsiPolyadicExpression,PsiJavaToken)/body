{
  final PsiExpression[] operands=expression.getOperands();
  if (operands.length == 2) {
    return expression;
  }
  for (int i=1; i < operands.length; i++) {
    final PsiExpression operand=operands[i];
    final PsiJavaToken currentToken=expression.getTokenBeforeOperand(operand);
    if (currentToken == token) {
      final String binaryExpressionText=operands[i - 1].getText() + ' ' + token.getText()+ ' '+ operand.getText();
      final PsiElementFactory factory=JavaPsiFacade.getElementFactory(expression.getProject());
      return (PsiPolyadicExpression)factory.createExpressionFromText(binaryExpressionText,expression);
    }
  }
  throw null;
}
