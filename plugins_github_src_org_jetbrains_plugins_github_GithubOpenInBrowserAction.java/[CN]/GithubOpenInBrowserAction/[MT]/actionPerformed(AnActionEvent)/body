{
  final Project project=e.getData(PlatformDataKeys.PROJECT);
  while (!GithubUtil.checkCredentials(project)) {
    final GithubLoginDialog dialog=new GithubLoginDialog(project);
    dialog.show();
    if (!dialog.isOK()) {
      return;
    }
  }
  final VirtualFile root=project.getBaseDir();
  final boolean gitDetected=GitUtil.isUnderGit(root);
  if (!gitDetected) {
    Messages.showErrorDialog(project,"Cannot find any git repository configured for the project",CANNOT_OPEN_IN_BROWSER);
    return;
  }
  final VirtualFile virtualFile=e.getData(PlatformDataKeys.VIRTUAL_FILE);
  final String rootPath=root.getPath();
  final String path=virtualFile.getPath();
  if (!path.startsWith(rootPath)) {
    Messages.showErrorDialog(project,"File is not under project root",CANNOT_OPEN_IN_BROWSER);
    return;
  }
  final GitRemote githubRemote=GithubUtil.getGithubBoundRepository(project);
  if (githubRemote == null) {
    Messages.showErrorDialog(project,"Configured github repository is not found",CANNOT_OPEN_IN_BROWSER);
    return;
  }
  final String pushUrl=githubRemote.pushUrl();
  int index=-1;
  if (pushUrl.startsWith(GithubUtil.getHttpsUrl())) {
    index=pushUrl.lastIndexOf('/');
    if (index == -1) {
      Messages.showErrorDialog(project,"Cannot extract info about repository name: " + pushUrl,CANNOT_OPEN_IN_BROWSER);
      return;
    }
    index=pushUrl.substring(0,index).lastIndexOf('/');
    if (index == -1) {
      Messages.showErrorDialog(project,"Cannot extract info about repository owner: " + pushUrl,CANNOT_OPEN_IN_BROWSER);
      return;
    }
  }
 else {
    index=pushUrl.lastIndexOf(':');
    if (index == -1) {
      Messages.showErrorDialog(project,"Cannot extract info about repository name and owner: " + pushUrl,CANNOT_OPEN_IN_BROWSER);
      return;
    }
  }
  String repoInfo=pushUrl.substring(index + 1);
  if (repoInfo.endsWith(".git")) {
    repoInfo=repoInfo.substring(0,repoInfo.length() - 4);
  }
  final GitBranch tracked;
  try {
    final GitBranch current=GitBranch.current(project,root);
    if (current == null) {
      Messages.showErrorDialog(project,"Cannot find local branch",CANNOT_OPEN_IN_BROWSER);
      return;
    }
    tracked=current.tracked(project,root);
    if (tracked == null || !tracked.isRemote()) {
      Messages.showErrorDialog(project,"Cannot find tracked branch for branch: " + current.getFullName(),CANNOT_OPEN_IN_BROWSER);
      return;
    }
  }
 catch (  VcsException e1) {
    Messages.showErrorDialog(project,"Error occured while inspecting branches: " + e1,CANNOT_OPEN_IN_BROWSER);
    return;
  }
  String branch=tracked.getName();
  if (branch.startsWith("origin/")) {
    branch=branch.substring(7);
  }
  final StringBuilder builder=new StringBuilder();
  builder.append("https://github.com/").append(repoInfo).append("/blob/").append(branch).append(path.substring(rootPath.length()));
  final Editor editor=e.getData(PlatformDataKeys.EDITOR);
  if (editor != null) {
    final int line=editor.getCaretModel().getLogicalPosition().line;
    builder.append("#L").append(line);
  }
  BrowserUtil.launchBrowser(builder.toString());
}
