{
  final List<String> invocations=new ArrayList<String>();
  Implementation implementation=AdvancedProxy.createProxy(Implementation.class,new Class[]{Interface3.class},new InvocationHandler(){
    @Override public Object invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {
      invocations.add(method.getName());
      if (Object.class.equals(method.getDeclaringClass())) {
        return method.invoke(this,args);
      }
      return Implementation.class.getMethod("getField").invoke(proxy);
    }
  }
,"239");
  implementation.hashCode();
  implementation.method();
  assertEquals("239",implementation.getFoo());
  implementation.setField("42");
  assertEquals("42",implementation.getBar());
  assertEquals("42",implementation.toString());
  assertEquals(Arrays.asList("hashCode","getFoo","getFoo","getBar"),invocations);
  assertEquals("42",Interface1.class.getMethod("getFoo").invoke(implementation));
  assertEquals("42",Interface3.class.getMethod("bar").invoke(implementation));
  assertEquals("42",Interface1.class.getMethod("foo").invoke(implementation));
  assertEquals("42",Interface2.class.getMethod("foo").invoke(implementation));
  assertEquals("42",Interface2.class.getMethod("foo").invoke(implementation));
  assertEquals("42",Implementation.class.getMethod("foo").invoke(implementation));
}
