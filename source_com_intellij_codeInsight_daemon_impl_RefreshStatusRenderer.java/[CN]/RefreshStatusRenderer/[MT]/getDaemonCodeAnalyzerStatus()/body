{
  DaemonCodeAnalyzerStatus status=new DaemonCodeAnalyzerStatus();
  PsiFile file=null;
  if (myDocument != null) {
    file=PsiDocumentManager.getInstance(myProject).getPsiFile(myDocument);
  }
  if (file == null || !myHighlighter.isHighlightingAvailable(file))   return null;
  ArrayList<String> noInspectionRoots=new ArrayList<String>();
  ArrayList<String> noHighlightingRoots=new ArrayList<String>();
  final PsiFile[] roots=file.getPsiRoots();
  for (  PsiFile root : roots) {
    if (!HighlightUtil.isRootHighlighted(root)) {
      noHighlightingRoots.add(root.getLanguage().getID());
    }
 else     if (!HighlightUtil.isRootInspected(root)) {
      noInspectionRoots.add(root.getLanguage().getID());
    }
  }
  status.noInspectionRoots=noInspectionRoots.isEmpty() ? null : noInspectionRoots.toArray(new String[noInspectionRoots.size()]);
  status.noHighlightingRoots=noHighlightingRoots.isEmpty() ? null : noHighlightingRoots.toArray(new String[noHighlightingRoots.size()]);
  status.rootsNumber=roots.length;
  if (myHighlighter.isErrorAnalyzingFinished(file)) {
    status.errorAnalyzingFinished=true;
    HighlightInfo[] infos=DaemonCodeAnalyzerImpl.getHighlights(myDocument,HighlightSeverity.WARNING,myProject);
    status.warningErrorCount=infos.length;
    infos=DaemonCodeAnalyzerImpl.getHighlights(myDocument,HighlightSeverity.ERROR,myProject);
    status.errorCount=infos.length;
    status.inspectionFinished=myHighlighter.isInspectionCompleted(file);
  }
  return status;
}
