{
  final MergeError error=mergeLineListener.getMergeError();
  LOG.info("doUpdate merge error: " + error);
  if (error == MergeError.CONFLICT) {
    final boolean allMerged=new MyConflictResolver(myProject,merger,myRoot).merge();
    return allMerged ? GitUpdateResult.SUCCESS : GitUpdateResult.INCOMPLETE;
  }
 else   if (error == MergeError.LOCAL_CHANGES) {
    final List<FilePath> paths=getFilesOverwrittenByMerge(mergeLineListener.getOutput());
    final Collection<Change> changes=getLocalChangesFilteredByFiles(paths);
    final ChangeListViewerDialog dialog=new ChangeListViewerDialog(myProject,changes,false){
      @Override protected String getDescription(){
        return "Your local changes to the following files would be overwritten by merge.<br/>" + "Please, commit your changes or stash them before you can merge.";
      }
    }
;
    UIUtil.invokeAndWaitIfNeeded(new Runnable(){
      @Override public void run(){
        dialog.show();
      }
    }
);
    return GitUpdateResult.ERROR;
  }
 else {
    GitUIUtil.notifyImportantError(myProject,"Error merging",GitUIUtil.stringifyErrors(mergeHandler.errors()));
    return GitUpdateResult.ERROR;
  }
}
