{
  final GitMerger merger=new GitMerger(myProject);
  final GitLineHandler pullHandler=makePullHandler(myRoot);
  final AtomicReference<MergeError> mergeError=new AtomicReference<MergeError>(MergeError.OTHER);
  pullHandler.addLineListener(new GitLineHandlerAdapter(){
    @Override public void onLineAvailable(    String line,    Key outputType){
      if (line.contains("Automatic merge failed; fix conflicts and then commit the result")) {
        mergeError.set(MergeError.CONFLICT);
      }
 else       if (line.contains("Please, commit your changes or stash them before you can merge")) {
        mergeError.set(MergeError.LOCAL_CHANGES);
      }
    }
  }
);
  final GitTask pullTask=new GitTask(myProject,pullHandler,"git pull");
  pullTask.setExecuteResultInAwt(false);
  pullTask.setProgressAnalyzer(new GitStandardProgressAnalyzer());
  final AtomicReference<GitUpdateResult> updateResult=new AtomicReference<GitUpdateResult>();
  pullTask.executeInBackground(true,new GitTaskResultHandlerAdapter(){
    @Override protected void onSuccess(){
      updateResult.set(GitUpdateResult.SUCCESS);
    }
    @Override protected void onCancel(){
      cancel();
      updateResult.set(GitUpdateResult.CANCEL);
    }
    @Override protected void onFailure(){
      final MergeError error=mergeError.get();
      if (error == MergeError.CONFLICT) {
        final boolean allMerged=new GitMergeConflictResolver(myProject,true,"Merge conflicts detected. Resolve them before continuing update.","Can't update",""){
          @Override protected boolean proceedIfNothingToMerge() throws VcsException {
            merger.mergeCommit(myRoot);
            return true;
          }
          @Override protected boolean proceedAfterAllMerged() throws VcsException {
            merger.mergeCommit(myRoot);
            return true;
          }
        }
.mergeFiles(Collections.singleton(myRoot));
        updateResult.set(allMerged ? GitUpdateResult.SUCCESS : GitUpdateResult.INCOMPLETE);
      }
 else {
        GitUIUtil.notifyImportantError(myProject,"Error merging",GitUIUtil.stringifyErrors(pullHandler.errors()));
        updateResult.set(GitUpdateResult.ERROR);
      }
    }
  }
);
  return updateResult.get();
}
