{
  if (myProject.isDisposed() || !myProject.isOpen()) {
    return;
  }
  ExternalSystemManager<?,?,?,?,?> manager=ExternalSystemApiUtil.getManager(externalSystemId);
  if (!(manager instanceof ExternalSystemConfigurableAware)) {
    return;
  }
  String title=ExternalSystemBundle.message("notification.project.refresh.fail.title",externalSystemId.getReadableName(),externalProjectName);
  String message=ExternalSystemApiUtil.buildErrorMessage(error);
  NotificationCategory notificationCategory=NotificationCategory.ERROR;
  String filePath=null;
  Integer line=null;
  Integer column=null;
  Throwable unwrapped=RemoteUtil.unwrap(error);
  if (unwrapped instanceof LocationAwareExternalSystemException) {
    LocationAwareExternalSystemException locationAwareExternalSystemException=(LocationAwareExternalSystemException)unwrapped;
    filePath=locationAwareExternalSystemException.getFilePath();
    line=locationAwareExternalSystemException.getLine();
    column=locationAwareExternalSystemException.getColumn();
  }
  NotificationData notificationData=new NotificationData(title,message,notificationCategory,NotificationSource.PROJECT_SYNC,filePath,ObjectUtils.notNull(line,-1),ObjectUtils.notNull(column,-1),false);
  for (  ExternalSystemNotificationExtension extension : ExternalSystemNotificationExtension.EP_NAME.getExtensions()) {
    if (!externalSystemId.equals(extension.getTargetExternalSystemId())) {
      continue;
    }
    extension.customize(notificationData,myProject,error);
  }
  EditorNotifications.getInstance(myProject).updateAllNotifications();
  showNotification(externalSystemId,notificationData);
}
