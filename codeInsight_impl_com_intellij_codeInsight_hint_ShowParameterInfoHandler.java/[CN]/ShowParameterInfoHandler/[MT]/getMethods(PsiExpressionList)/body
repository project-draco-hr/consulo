{
  final PsiCall call=ParameterInfoController.getCall(argList);
  PsiResolveHelper helper=argList.getManager().getResolveHelper();
  if (call instanceof PsiCallExpression) {
    ArrayList<CandidateInfo> result;
    CandidateInfo[] candidates=helper.getReferencedMethodCandidates((PsiCallExpression)call,true);
    result=new ArrayList<CandidateInfo>();
    if (!(argList.getParent() instanceof PsiAnonymousClass)) {
      for (      CandidateInfo candidate : candidates) {
        if (candidate.isStaticsScopeCorrect() && candidate.isAccessible())         result.add(candidate);
      }
    }
 else {
      PsiClass aClass=(PsiAnonymousClass)argList.getParent();
      for (      CandidateInfo candidate : candidates) {
        if (candidate.isStaticsScopeCorrect() && helper.isAccessible(((PsiMethod)candidate.getElement()),argList,aClass)) {
          result.add(candidate);
        }
      }
    }
    return result.toArray(new CandidateInfo[result.size()]);
  }
 else {
    LOG.assertTrue(call instanceof PsiEnumConstant);
    PsiMethod[] constructors=((PsiEnumConstant)call).getContainingClass().getConstructors();
    CandidateInfo[] result=new CandidateInfo[constructors.length];
    for (int i=0; i < constructors.length; i++) {
      result[i]=new CandidateInfo(constructors[i],PsiSubstitutor.EMPTY);
    }
    return result;
  }
}
