{
  if (!(element instanceof PsiMethod))   return false;
  PsiMethod method=(PsiMethod)element;
  if (!method.hasModifierProperty(PsiModifier.STATIC))   return false;
  if (!method.hasModifierProperty(PsiModifier.PUBLIC))   return false;
  final PsiParameter[] parameters=method.getParameterList().getParameters();
  if (parameters.length == 0)   return false;
  if (qualifierType == null)   return true;
  PsiType selfType=parameters[0].getType();
  if (selfType instanceof PsiPrimitiveType)   return false;
  if (substitutor != null) {
    selfType=substitutor.substitute(selfType);
  }
  return TypesUtil.isAssignable(selfType,qualifierType,element.getManager(),element.getResolveScope());
}
