{
  XmlFile containingFile=null;
  XmlFile descriptorFile=null;
  final XmlTag tag=PsiTreeUtil.getParentOfType(context,XmlTag.class);
  if (tag != null) {
    containingFile=(XmlFile)tag.getContainingFile();
    descriptorFile=findDescriptorFile(tag,containingFile);
  }
 else {
    final XmlDocument document=PsiTreeUtil.getParentOfType(context,XmlDocument.class);
    if (document != null) {
      containingFile=(XmlFile)document.getContainingFile();
      final FileType ft=containingFile.getFileType();
      if (ft != StdFileTypes.XML) {
        final String namespace=ft == StdFileTypes.XHTML || ft == StdFileTypes.JSPX ? XmlUtil.XHTML_URI : XmlUtil.HTML_URI;
        final XmlNSDescriptor nsDescriptor=document.getDefaultNSDescriptor(namespace,true);
        if (nsDescriptor != null) {
          descriptorFile=nsDescriptor.getDescriptorFile();
        }
      }
    }
  }
  if (descriptorFile != null) {
    final List<Object> results=new ArrayList<Object>();
    final boolean acceptSystemEntities=containingFile.getFileType() == StdFileTypes.XML;
    final PsiElementProcessor processor=new PsiElementProcessor(){
      public boolean execute(      final PsiElement element){
        if (element instanceof XmlEntityDecl) {
          final XmlEntityDecl xmlEntityDecl=(XmlEntityDecl)element;
          if (xmlEntityDecl.isInternalReference() || acceptSystemEntities) {
            final String name=xmlEntityDecl.getName();
            final Object _item=getLookupItem(xmlEntityDecl);
            results.add(_item == null ? name : _item);
          }
        }
        return true;
      }
    }
;
    XmlUtil.processXmlElements(descriptorFile,processor,true);
    if (descriptorFile != containingFile && containingFile.getFileType() == StdFileTypes.XML) {
      final XmlProlog element=containingFile.getDocument().getProlog();
      if (element != null)       XmlUtil.processXmlElements(element,processor,true);
    }
    return results.toArray(new Object[results.size()]);
  }
  return ArrayUtil.EMPTY_OBJECT_ARRAY;
}
