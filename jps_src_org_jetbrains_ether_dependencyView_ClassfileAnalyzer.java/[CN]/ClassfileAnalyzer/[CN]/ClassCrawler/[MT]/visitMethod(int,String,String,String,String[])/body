{
  processSignature(signature);
  if (notPrivate(access)) {
    methods.add(new MethodRepr(access,n,signature,desc,exceptions));
  }
  return new EmptyVisitor(){
    @Override public AnnotationVisitor visitAnnotation(    String desc,    boolean visible){
      return annotationCrawler;
    }
    @Override public AnnotationVisitor visitAnnotationDefault(){
      return annotationCrawler;
    }
    @Override public AnnotationVisitor visitParameterAnnotation(    int parameter,    String desc,    boolean visible){
      return annotationCrawler;
    }
    @Override public void visitMultiANewArrayInsn(    String desc,    int dims){
      TypeRepr.getType(desc).updateClassUsages(usages);
      super.visitMultiANewArrayInsn(desc,dims);
    }
    @Override public void visitLocalVariable(    String name,    String desc,    String signature,    Label start,    Label end,    int index){
      processSignature(signature);
      TypeRepr.getType(desc).updateClassUsages(usages);
      super.visitLocalVariable(name,desc,signature,start,end,index);
    }
    @Override public void visitTryCatchBlock(    Label start,    Label end,    Label handler,    String type){
      if (type != null)       TypeRepr.createClassType(type).updateClassUsages(usages);
      super.visitTryCatchBlock(start,end,handler,type);
    }
    @Override public void visitTypeInsn(    int opcode,    String type){
      TypeRepr.createClassType(type).updateClassUsages(usages);
      super.visitTypeInsn(opcode,type);
    }
    @Override public void visitFieldInsn(    int opcode,    String owner,    String name,    String desc){
      usages.add(UsageRepr.createFieldUsage(name,owner,desc));
      super.visitFieldInsn(opcode,owner,name,desc);
    }
    @Override public void visitMethodInsn(    int opcode,    String owner,    String name,    String desc){
      usages.add(UsageRepr.createMethodUsage(name,owner,desc));
      super.visitMethodInsn(opcode,owner,name,desc);
    }
  }
;
}
