{
  if (CreateFromUsageUtils.isValidReference(myReferenceExpression,true)) {
    return;
  }
  PsiManager psiManager=myReferenceExpression.getManager();
  Project project=psiManager.getProject();
  PsiElementFactory factory=psiManager.getElementFactory();
  PsiFile targetFile=targetClass.getContainingFile();
  try {
    PsiType[] expectedTypes=CreateFromUsageUtils.guessType(myReferenceExpression,false);
    PsiType type=expectedTypes[0];
    String varName=myReferenceExpression.getReferenceName();
    PsiDeclarationStatement decl;
    PsiExpression initializer=null;
    boolean isInline=false;
    PsiStatement anchor=getAnchor(myReferenceExpression);
    if (anchor instanceof PsiExpressionStatement && ((PsiExpressionStatement)anchor).getExpression() instanceof PsiAssignmentExpression) {
      PsiAssignmentExpression assignment=(PsiAssignmentExpression)((PsiExpressionStatement)anchor).getExpression();
      if (assignment.getLExpression().textMatches(myReferenceExpression)) {
        initializer=assignment.getRExpression();
        isInline=true;
      }
    }
    decl=factory.createVariableDeclarationStatement(varName,type,initializer);
    TypeExpression expression=new TypeExpression(project,expectedTypes);
    if (isInline) {
      decl=(PsiDeclarationStatement)anchor.replace(decl);
    }
 else {
      decl=(PsiDeclarationStatement)anchor.getParent().addBefore(decl,anchor);
    }
    PsiVariable var=(PsiVariable)decl.getDeclaredElements()[0];
    var.getModifierList().setModifierProperty(PsiModifier.FINAL,CodeStyleSettingsManager.getSettings(project).GENERATE_FINAL_LOCALS && !PsiUtil.isAccessedForWriting(myReferenceExpression));
    TemplateBuilder builder=new TemplateBuilder(var);
    builder.replaceElement(var.getTypeElement(),expression);
    builder.setEndVariableAfter(var.getNameIdentifier());
    Template template=builder.buildTemplate();
    Editor newEditor=positionCursor(project,targetFile,var);
    TextRange range=var.getTextRange();
    newEditor.getDocument().deleteString(range.getStartOffset(),range.getEndOffset());
    TemplateManager manager=TemplateManager.getInstance(project);
    manager.startTemplate(newEditor,template);
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
