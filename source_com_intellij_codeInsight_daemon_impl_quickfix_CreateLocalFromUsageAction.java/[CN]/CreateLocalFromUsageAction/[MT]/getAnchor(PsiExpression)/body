{
  Class[] scopes=new Class[]{PsiMethod.class,PsiClassInitializer.class,PsiClass.class,PsiField.class,PsiFile.class};
  PsiExpression[] expressions=CreateFromUsageUtils.collectExpressions(expression,scopes);
  PsiElement parent=expressions[0];
  int minOffset=expressions[0].getTextRange().getStartOffset();
  for (int i=1; i < expressions.length; i++) {
    parent=PsiTreeUtil.findCommonParent(parent,expressions[i]);
    minOffset=Math.min(minOffset,expressions[i].getTextRange().getStartOffset());
  }
  PsiCodeBlock block=(PsiCodeBlock)(parent instanceof PsiCodeBlock ? parent : PsiTreeUtil.getParentOfType(parent,PsiCodeBlock.class));
  LOG.assertTrue(block.getStatements().length > 0);
  PsiStatement[] statements=block.getStatements();
  for (int i=1; i < statements.length; i++) {
    if (statements[i].getTextRange().getStartOffset() > minOffset)     return statements[i - 1];
  }
  return statements[statements.length - 1];
}
