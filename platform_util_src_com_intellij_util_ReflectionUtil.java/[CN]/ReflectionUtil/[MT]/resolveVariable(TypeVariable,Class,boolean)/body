{
  final Class aClass=getRawType(classType);
  int index=ArrayUtilRt.find(aClass.getTypeParameters(),variable);
  if (index >= 0) {
    return variable;
  }
  final Class[] classes=aClass.getInterfaces();
  final Type[] genericInterfaces=aClass.getGenericInterfaces();
  for (int i=0; i <= classes.length; i++) {
    Class anInterface;
    if (i < classes.length) {
      anInterface=classes[i];
    }
 else {
      anInterface=aClass.getSuperclass();
      if (resolveInInterfacesOnly || anInterface == null) {
        continue;
      }
    }
    final Type resolved=resolveVariable(variable,anInterface);
    if (resolved instanceof Class || resolved instanceof ParameterizedType) {
      return resolved;
    }
    if (resolved instanceof TypeVariable) {
      final TypeVariable typeVariable=(TypeVariable)resolved;
      index=ArrayUtilRt.find(anInterface.getTypeParameters(),typeVariable);
      if (index < 0) {
        LOG.error("Cannot resolve type variable:\n" + "typeVariable = " + typeVariable + "\n"+ "genericDeclaration = "+ declarationToString(typeVariable.getGenericDeclaration())+ "\n"+ "searching in "+ declarationToString(anInterface));
      }
      final Type type=i < genericInterfaces.length ? genericInterfaces[i] : aClass.getGenericSuperclass();
      if (type instanceof Class) {
        return Object.class;
      }
      if (type instanceof ParameterizedType) {
        return getActualTypeArguments((ParameterizedType)type)[index];
      }
      throw new AssertionError("Invalid type: " + type);
    }
  }
  return null;
}
