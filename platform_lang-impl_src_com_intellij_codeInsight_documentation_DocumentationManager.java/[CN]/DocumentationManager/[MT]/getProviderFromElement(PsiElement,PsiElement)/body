{
  if (element != null && !element.isValid()) {
    element=null;
  }
  if (originalElement != null && !originalElement.isValid()) {
    originalElement=null;
  }
  if (originalElement == null) {
    originalElement=getOriginalElement(element);
  }
  PsiFile containingFile=originalElement != null ? originalElement.getContainingFile() : element != null ? element.getContainingFile() : null;
  Set<DocumentationProvider> result=new LinkedHashSet<DocumentationProvider>();
  final Language containingFileLanguage=containingFile != null ? containingFile.getLanguage() : null;
  DocumentationProvider originalProvider=containingFile != null ? LanguageDocumentation.INSTANCE.forLanguage(containingFileLanguage) : null;
  final Language elementLanguage=element != null ? element.getLanguage() : null;
  DocumentationProvider elementProvider=element == null || elementLanguage.is(containingFileLanguage) ? null : LanguageDocumentation.INSTANCE.forLanguage(elementLanguage);
  addProviderToResult(result,elementProvider);
  addProviderToResult(result,originalProvider);
  if (containingFile != null) {
    final Language baseLanguage=containingFile.getViewProvider().getBaseLanguage();
    if (!baseLanguage.is(containingFileLanguage)) {
      addProviderToResult(result,LanguageDocumentation.INSTANCE.forLanguage(baseLanguage));
    }
  }
  return new CompositeDocumentationProvider(result);
}
