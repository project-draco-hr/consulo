{
  component.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
  final PsiElement psiElement=component.getElement();
  if (psiElement == null) {
    return;
  }
  final PsiManager manager=PsiManager.getInstance(getProject(psiElement));
  if (url.startsWith("open")) {
    final PsiFile containingFile=psiElement.getContainingFile();
    OrderEntry libraryEntry=null;
    if (containingFile != null) {
      final VirtualFile virtualFile=containingFile.getVirtualFile();
      libraryEntry=LibraryUtil.findLibraryEntry(virtualFile,myProject);
    }
 else     if (psiElement instanceof PsiDirectoryContainer) {
      PsiDirectory[] directories=((PsiDirectoryContainer)psiElement).getDirectories();
      for (      PsiDirectory directory : directories) {
        final VirtualFile virtualFile=directory.getVirtualFile();
        libraryEntry=LibraryUtil.findLibraryEntry(virtualFile,myProject);
        if (libraryEntry != null) {
          break;
        }
      }
    }
    if (libraryEntry != null) {
      ProjectSettingsService.getInstance(myProject).openLibraryOrSdkSettings(libraryEntry);
    }
  }
 else   if (url.startsWith(PSI_ELEMENT_PROTOCOL)) {
    final String refText=url.substring(PSI_ELEMENT_PROTOCOL.length());
    DocumentationProvider provider=getProviderFromElement(psiElement);
    PsiElement targetElement=provider.getDocumentationElementForLink(manager,refText,psiElement);
    if (targetElement == null) {
      for (      DocumentationProvider documentationProvider : Extensions.getExtensions(DocumentationProvider.EP_NAME)) {
        targetElement=documentationProvider.getDocumentationElementForLink(manager,refText,psiElement);
        if (targetElement != null) {
          break;
        }
      }
    }
    if (targetElement == null) {
      for (      Language language : Language.getRegisteredLanguages()) {
        DocumentationProvider documentationProvider=LanguageDocumentation.INSTANCE.forLanguage(language);
        if (documentationProvider != null) {
          targetElement=documentationProvider.getDocumentationElementForLink(manager,refText,psiElement);
          if (targetElement != null) {
            break;
          }
        }
      }
    }
    if (targetElement != null) {
      fetchDocInfo(getDefaultCollector(targetElement,null),component);
    }
  }
 else {
    final DocumentationProvider provider=getProviderFromElement(psiElement);
    boolean processed=false;
    if (provider instanceof CompositeDocumentationProvider) {
      for (      DocumentationProvider p : ((CompositeDocumentationProvider)provider).getAllProviders()) {
        if (!(p instanceof ExternalDocumentationHandler))         continue;
        final ExternalDocumentationHandler externalHandler=(ExternalDocumentationHandler)p;
        if (externalHandler.canFetchDocumentationLink(url)) {
          fetchDocInfo(new DocumentationCollector(){
            @Override public String getDocumentation() throws Exception {
              return externalHandler.fetchExternalDocumentation(url,psiElement);
            }
            @Override public PsiElement getElement(){
              return psiElement;
            }
            @Nullable @Override public String getEffectiveExternalUrl(){
              return url;
            }
          }
,component);
          processed=true;
        }
 else         if (externalHandler.handleExternalLink(manager,url,psiElement)) {
          processed=true;
          break;
        }
      }
    }
    if (!processed) {
      fetchDocInfo(new DocumentationCollector(){
        @Override public String getDocumentation() throws Exception {
          if (url.startsWith(DOC_ELEMENT_PROTOCOL)) {
            final List<String> urls=ApplicationManager.getApplication().runReadAction(new NullableComputable<List<String>>(){
              @Override public List<String> compute(){
                final DocumentationProvider provider=getProviderFromElement(psiElement);
                return provider.getUrlFor(psiElement,getOriginalElement(psiElement));
              }
            }
);
            String url1=urls != null && !urls.isEmpty() ? urls.get(0) : url;
            BrowserUtil.browse(url1);
          }
 else {
            BrowserUtil.browse(url);
          }
          return "";
        }
        @Override public PsiElement getElement(){
          return psiElement;
        }
        @Nullable @Override public String getEffectiveExternalUrl(){
          return url;
        }
      }
,component);
    }
  }
  component.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
}
