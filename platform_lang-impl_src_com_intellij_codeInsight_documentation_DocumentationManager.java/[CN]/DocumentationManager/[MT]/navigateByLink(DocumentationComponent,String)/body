{
  component.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
  final PsiElement psiElement=component.getElement();
  final PsiManager manager=PsiManager.getInstance(getProject(psiElement));
  if (url.startsWith("open")) {
    final PsiFile containingFile=psiElement.getContainingFile();
    if (containingFile != null) {
      final VirtualFile virtualFile=containingFile.getVirtualFile();
      final LibraryOrderEntry libraryEntry=LibraryUtil.findLibraryEntry(virtualFile,myProject);
      if (libraryEntry != null) {
        ProjectSettingsService.getInstance(myProject).openProjectLibrarySettings(new NamedLibraryElement(libraryEntry.getOwnerModule(),libraryEntry));
      }
    }
  }
 else   if (url.startsWith(PSI_ELEMENT_PROTOCOL)) {
    final String refText=url.substring(PSI_ELEMENT_PROTOCOL.length());
    DocumentationProvider provider=getProviderFromElement(psiElement);
    final PsiElement targetElement=provider.getDocumentationElementForLink(manager,refText,psiElement);
    if (targetElement != null) {
      fetchDocInfo(getDefaultCollector(targetElement,null),component);
    }
  }
 else {
    final String docUrl=url;
    fetchDocInfo(new DocumentationCollector(){
      public String getDocumentation() throws Exception {
        if (docUrl.startsWith(DOC_ELEMENT_PROTOCOL)) {
          final List<String> urls=ApplicationManager.getApplication().runReadAction(new Computable<List<String>>(){
            public List<String> compute(){
              final DocumentationProvider provider=getProviderFromElement(psiElement);
              return provider.getUrlFor(psiElement,getOriginalElement(psiElement));
            }
          }
);
          BrowserUtil.launchBrowser(urls != null && !urls.isEmpty() ? urls.get(0) : docUrl);
        }
 else {
          BrowserUtil.launchBrowser(docUrl);
        }
        return "";
      }
      public PsiElement getElement(){
        return psiElement;
      }
    }
,component);
  }
  component.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
}
