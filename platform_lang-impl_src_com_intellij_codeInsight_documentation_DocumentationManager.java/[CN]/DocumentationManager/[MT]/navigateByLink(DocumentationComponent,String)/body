{
  component.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
  final PsiElement psiElement=component.getElement();
  if (psiElement == null) {
    return;
  }
  final PsiManager manager=PsiManager.getInstance(getProject(psiElement));
  if (url.startsWith("open")) {
    final PsiFile containingFile=psiElement.getContainingFile();
    OrderEntry libraryEntry=null;
    if (containingFile != null) {
      final VirtualFile virtualFile=containingFile.getVirtualFile();
      libraryEntry=LibraryUtil.findLibraryEntry(virtualFile,myProject);
    }
 else     if (psiElement instanceof PsiDirectoryContainer) {
      PsiDirectory[] directories=((PsiDirectoryContainer)psiElement).getDirectories();
      for (      PsiDirectory directory : directories) {
        final VirtualFile virtualFile=directory.getVirtualFile();
        libraryEntry=LibraryUtil.findLibraryEntry(virtualFile,myProject);
        if (libraryEntry != null) {
          break;
        }
      }
    }
    if (libraryEntry != null) {
      ProjectSettingsService.getInstance(myProject).openLibraryOrSdkSettings(libraryEntry);
    }
  }
 else   if (url.startsWith(PSI_ELEMENT_PROTOCOL)) {
    final String refText=url.substring(PSI_ELEMENT_PROTOCOL.length());
    DocumentationProvider provider=getProviderFromElement(psiElement);
    final PsiElement targetElement=provider.getDocumentationElementForLink(manager,refText,psiElement);
    if (targetElement != null) {
      fetchDocInfo(getDefaultCollector(targetElement,null),component);
    }
  }
 else {
    final DocumentationProvider provider=getProviderFromElement(psiElement);
    boolean processed=false;
    if (provider instanceof CompositeDocumentationProvider) {
      for (      DocumentationProvider documentationProvider : ((CompositeDocumentationProvider)provider).getProviders()) {
        if (documentationProvider instanceof ExternalDocumentationHandler) {
          final ExternalDocumentationHandler externalDocumentationHandler=(ExternalDocumentationHandler)documentationProvider;
          if (externalDocumentationHandler.canFetchDocumentationLink(url)) {
            fetchDocInfo(new DocumentationCollector(){
              @Override public String getDocumentation() throws Exception {
                return externalDocumentationHandler.fetchExternalDocumentation(url,myProject);
              }
              @Override public PsiElement getElement(){
                return psiElement;
              }
            }
,component);
            processed=true;
          }
 else           if (externalDocumentationHandler.handleExternalLink(manager,url,psiElement)) {
            processed=true;
            break;
          }
        }
      }
    }
    if (!processed) {
      fetchDocInfo(new DocumentationCollector(){
        @Override public String getDocumentation() throws Exception {
          if (url.startsWith(DOC_ELEMENT_PROTOCOL)) {
            final List<String> urls=ApplicationManager.getApplication().runReadAction(new NullableComputable<List<String>>(){
              @Override public List<String> compute(){
                final DocumentationProvider provider=getProviderFromElement(psiElement);
                return provider.getUrlFor(psiElement,getOriginalElement(psiElement));
              }
            }
);
            BrowserUtil.launchBrowser(urls != null && !urls.isEmpty() ? urls.get(0) : url);
          }
 else {
            BrowserUtil.launchBrowser(url);
          }
          return "";
        }
        @Override public PsiElement getElement(){
          return psiElement;
        }
      }
,component);
    }
  }
  component.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
}
