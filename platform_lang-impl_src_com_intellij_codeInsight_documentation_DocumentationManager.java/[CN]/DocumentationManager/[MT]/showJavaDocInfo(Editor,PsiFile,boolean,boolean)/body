{
  myEditor=editor;
  final Project project=getProject(file);
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  final PsiElement list=ParameterInfoController.findArgumentList(file,editor.getCaretModel().getOffset(),-1);
  if (list != null) {
    myParameterInfoController=ParameterInfoController.findControllerAtOffset(editor,list.getTextRange().getStartOffset());
  }
  final PsiElement originalElement=file != null ? file.findElementAt(editor.getCaretModel().getOffset()) : null;
  PsiElement element=findTargetElement(editor,file,originalElement);
  assertSameProject(element);
  if (element == null && myParameterInfoController != null) {
    final Object[] objects=myParameterInfoController.getSelectedElements();
    if (objects != null && objects.length > 0) {
      if (objects[0] instanceof PsiElement) {
        element=(PsiElement)objects[0];
        assertSameProject(element);
      }
    }
  }
  if (element == null && file == null)   return;
  if (element == null) {
    element=originalElement;
    assertSameProject(element);
    if (element == null)     return;
    PsiComment comment=PsiTreeUtil.getParentOfType(element,PsiComment.class);
    if (comment == null)     return;
    element=comment instanceof PsiDocCommentBase ? ((PsiDocCommentBase)comment).getOwner() : comment.getParent();
    if (element == null)     return;
  }
  storeOriginalElement(project,originalElement,element);
  final PopupUpdateProcessor updateProcessor=new PopupUpdateProcessor(project){
    public void updatePopup(    Object lookupIteObject){
      if (lookupIteObject instanceof PsiElement) {
        doShowJavaDocInfo((PsiElement)lookupIteObject,false,this,originalElement,autoupdate);
        return;
      }
      DocumentationProvider documentationProvider=getProviderFromElement(file);
      PsiElement element=documentationProvider.getDocumentationElementForLookupItem(PsiManager.getInstance(myProject),lookupIteObject,originalElement);
      if (element == null)       return;
      if (myEditor != null) {
        final PsiFile file=element.getContainingFile();
        if (file != null) {
          Editor editor=myEditor;
          showJavaDocInfo(myEditor,file,false);
          myEditor=editor;
        }
      }
 else {
        doShowJavaDocInfo(element,false,this,originalElement,autoupdate);
      }
    }
  }
;
  doShowJavaDocInfo(element,requestFocus,updateProcessor,originalElement,autoupdate);
}
