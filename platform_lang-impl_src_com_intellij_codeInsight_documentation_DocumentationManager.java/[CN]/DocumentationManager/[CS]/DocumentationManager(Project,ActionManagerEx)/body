{
  super(project);
  myActionManagerEx=managerEx;
  final AnActionListener actionListener=new AnActionListener(){
    @Override public void beforeActionPerformed(    AnAction action,    DataContext dataContext,    AnActionEvent event){
      final JBPopup hint=getDocInfoHint();
      if (hint != null) {
        if (action instanceof HintManagerImpl.ActionToIgnore)         return;
        if (action == myActionManagerEx.getAction(IdeActions.ACTION_EDITOR_MOVE_CARET_DOWN))         return;
        if (action == myActionManagerEx.getAction(IdeActions.ACTION_EDITOR_MOVE_CARET_UP))         return;
        if (action == myActionManagerEx.getAction(IdeActions.ACTION_EDITOR_MOVE_CARET_PAGE_DOWN))         return;
        if (action == myActionManagerEx.getAction(IdeActions.ACTION_EDITOR_MOVE_CARET_PAGE_UP))         return;
        if (action == ActionManagerEx.getInstanceEx().getAction(IdeActions.ACTION_EDITOR_ESCAPE))         return;
        if (ActionPlaces.JAVADOC_INPLACE_SETTINGS.equals(event.getPlace()))         return;
        closeDocHint();
      }
    }
    @Override public void beforeEditorTyping(    char c,    DataContext dataContext){
      final JBPopup hint=getDocInfoHint();
      if (hint != null) {
        hint.cancel();
      }
    }
    @Override public void afterActionPerformed(    final AnAction action,    final DataContext dataContext,    AnActionEvent event){
    }
  }
;
  myActionManagerEx.addAnActionListener(actionListener,project);
  myUpdateDocAlarm=new Alarm(Alarm.ThreadToUse.OWN_THREAD,myProject);
}
