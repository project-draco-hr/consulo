{
  super(false);
  setTitle(MoveHandler.REFACTORING_NAME);
  myDirectory=directory;
  myElementsToMove=elementsToMove;
  myMoveCallback=moveCallback;
  myDestDirectoryField.setText(FileUtil.toSystemDependentName(directory.getVirtualFile().getPath()));
  final FileChooserDescriptor descriptor=FileChooserDescriptorFactory.createSingleFolderDescriptor();
  myDestDirectoryField.getButton().addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final VirtualFile file=FileChooser.chooseFile(descriptor,myDirectory.getProject(),directory.getVirtualFile());
      if (file != null) {
        myDestDirectoryField.setText(FileUtil.toSystemDependentName(file.getPath()));
      }
    }
  }
);
  if (elementsToMove.length == 1) {
    PsiElement firstElement=elementsToMove[0];
    myNameLabel.setText(RefactoringBundle.message("move.single.class.or.package.name.label",UsageViewUtil.getType(firstElement),UsageViewUtil.getLongName(firstElement)));
  }
 else   if (elementsToMove.length > 1) {
    myNameLabel.setText(elementsToMove[0] instanceof PsiClass ? RefactoringBundle.message("move.specified.classes") : RefactoringBundle.message("move.specified.packages"));
  }
  final JavaRefactoringSettings refactoringSettings=JavaRefactoringSettings.getInstance();
  mySearchInCommentsAndStringsCheckBox.setSelected(refactoringSettings.MOVE_SEARCH_IN_COMMENTS);
  mySearchForTextOccurrencesCheckBox.setSelected(refactoringSettings.MOVE_SEARCH_FOR_TEXT);
  myDestDirectoryField.getTextField().getDocument().addDocumentListener(new DocumentAdapter(){
    public void textChanged(    DocumentEvent event){
      setOKActionEnabled(myDestDirectoryField.getText().length() > 0);
    }
  }
);
  if (canShowPreserveSourceRoots) {
    final Set<VirtualFile> sourceRoots=new HashSet<VirtualFile>();
    final ProjectFileIndex fileIndex=ProjectRootManager.getInstance(directory.getProject()).getFileIndex();
    final Module destinationModule=fileIndex.getModuleForFile(directory.getVirtualFile());
    boolean sameModule=true;
    for (    PsiElement element : elementsToMove) {
      if (element instanceof PsiPackage) {
        for (        PsiDirectory psiDirectory : ((PsiPackage)element).getDirectories()) {
          final VirtualFile virtualFile=psiDirectory.getVirtualFile();
          sourceRoots.add(fileIndex.getSourceRootForFile(virtualFile));
        }
      }
 else       if (element instanceof PsiClass) {
        final VirtualFile virtualFile=element.getContainingFile().getVirtualFile();
        LOG.assertTrue(virtualFile != null);
        sourceRoots.add(fileIndex.getSourceRootForFile(virtualFile));
        sameModule&=destinationModule == fileIndex.getModuleForFile(virtualFile);
      }
    }
    myPreserveSourceRoot.setVisible(sourceRoots.size() > 1);
    myPreserveSourceRoot.setSelected(sameModule);
  }
  init();
}
