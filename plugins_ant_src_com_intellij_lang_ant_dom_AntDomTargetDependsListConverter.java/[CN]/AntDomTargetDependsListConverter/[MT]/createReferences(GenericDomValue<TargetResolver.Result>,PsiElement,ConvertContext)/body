{
  final XmlElement xmlElement=value.getXmlElement();
  if (!(xmlElement instanceof XmlAttribute)) {
    return PsiReference.EMPTY_ARRAY;
  }
  final XmlAttributeValue valueElement=((XmlAttribute)xmlElement).getValueElement();
  if (valueElement == null) {
    return PsiReference.EMPTY_ARRAY;
  }
  final String refsString=value.getStringValue();
  if (refsString == null) {
    return PsiReference.EMPTY_ARRAY;
  }
  final List<PsiReference> refs=new ArrayList<PsiReference>();
  final AntDomTargetReference.ReferenceGroup group=new AntDomTargetReference.ReferenceGroup();
  final TextRange wholeStringRange=ElementManipulators.getValueTextRange(valueElement);
  final StringTokenizer tokenizer=new StringTokenizer(refsString,",",false);
  while (tokenizer.hasMoreTokens()) {
    final String token=tokenizer.nextToken();
    int tokenStartOffset=tokenizer.getCurrentPosition() - token.length();
    final String ref=token.trim();
    if (ref.length() != token.length()) {
      for (int idx=0; idx < token.length(); idx++) {
        if (Character.isWhitespace(token.charAt(idx))) {
          tokenStartOffset++;
        }
 else {
          break;
        }
      }
    }
    refs.add(new AntDomTargetReference(element,TextRange.from(wholeStringRange.getStartOffset() + tokenStartOffset,ref.length()),group));
  }
  return refs.toArray(new PsiReference[refs.size()]);
}
