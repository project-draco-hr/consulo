{
  ColumnInfo[] columnInfos={new ClassColumnInfo(myColumnNames[0]),new PropertyTypeColumnInfo(myColumnNames[1])};
  myTreeTableModel=new ListTreeTableModelOnColumns(myTreeRoot,columnInfos);
  myTreeTable=new TreeTable(myTreeTableModel);
  myTreeTable.setRootVisible(false);
  myTreeTable.registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      storeState(project);
      deleteRow(project);
      restoreState(project);
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_DELETE,0),JComponent.WHEN_FOCUSED);
  myTreeTable.getTree().setShowsRootHandles(true);
  myTreeTable.getTableHeader().setReorderingAllowed(false);
  myTreeTable.setTreeCellRenderer(new ColoredTreeCellRenderer(){
    public void customizeCellRenderer(    JTree tree,    Object value,    boolean selected,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      value=((DefaultMutableTreeNode)value).getUserObject();
      setPaintFocusBorder(false);
      if (value != null) {
        if (value instanceof DPClassNode) {
          append(((DPClassNode)value).getElement().getContainingClassName(),SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES);
        }
 else         if (value instanceof DPPropertyNode) {
          final DPPropertyNode propertyElement=(DPPropertyNode)value;
          final String substringToHighlight=propertyElement.getElement().getHightlightedText();
          final String propertyName=propertyElement.getElement().getPropertyName();
          if (substringToHighlight != null) {
            final int begin=propertyName.indexOf(substringToHighlight);
            final String first=propertyName.substring(0,begin);
            append(first,SimpleTextAttributes.SIMPLE_CELL_ATTRIBUTES);
            final TextAttributes textAttributes=TextAttributes.ERASE_MARKER;
            textAttributes.setBackgroundColor(UIUtil.getListSelectionBackground());
            append(substringToHighlight,SimpleTextAttributes.fromTextAttributes(textAttributes));
            append(propertyName.substring(first.length() + substringToHighlight.length()),SimpleTextAttributes.SIMPLE_CELL_ATTRIBUTES);
          }
 else {
            append(propertyName,SimpleTextAttributes.SIMPLE_CELL_ATTRIBUTES);
          }
        }
      }
    }
  }
);
  myTreeTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myTreeTable.setPreferredScrollableViewportSize(new Dimension(300,myTreeTable.getRowHeight() * 10));
  myTreeTable.getColumn(myColumnNames[0]).setPreferredWidth(200);
  myTreeTable.getColumn(myColumnNames[1]).setPreferredWidth(160);
  myTreeTable.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      final Point point=e.getPoint();
      if (e.getClickCount() == 2 && myTreeTable.columnAtPoint(point) == 1) {
        myTreeTable.editCellAt(myTreeTable.rowAtPoint(point),myTreeTable.columnAtPoint(point),e);
      }
    }
  }
);
  JScrollPane scrollpane=ScrollPaneFactory.createScrollPane(myTreeTable);
  scrollpane.setPreferredSize(new Dimension(600,400));
  return scrollpane;
}
