{
  ColumnInfo[] columnInfos={new ClassColumnInfo(myColumnNames[CLASS_OR_ELEMENT_NAME_COLUMN]),new PropertyTypeColumnInfo(myColumnNames[TYPE_COLUMN])};
  myTreeTableModel=new ListTreeTableModelOnColumns(myTreeRoot,columnInfos);
  myTreeTable=new TreeTable(myTreeTableModel);
  final MyColoredTreeCellRenderer treeCellRenderer=new MyColoredTreeCellRenderer();
  final TreeTableCellRenderer tableCellRenderer=new TreeTableCellRenderer(myTreeTable,myTreeTable.getTree());
  tableCellRenderer.setCellRenderer(treeCellRenderer);
  myTreeTable.setTreeCellRenderer(treeCellRenderer);
  myTreeTable.setRootVisible(false);
  myTreeTable.setSelectionMode(DefaultTreeSelectionModel.CONTIGUOUS_TREE_SELECTION);
  final MyPropertyOrClassCellEditor propertyOrClassCellEditor=new MyPropertyOrClassCellEditor();
  final MyPropertyTypeCellEditor typeCellEditor=new MyPropertyTypeCellEditor();
  typeCellEditor.addCellEditorListener(new CellEditorListener(){
    public void editingStopped(    ChangeEvent e){
      final TreeTableTree tree=getTree();
      final String newTypeValue=((MyPropertyTypeCellEditor)e.getSource()).getCellEditorValue();
      if (newTypeValue == null || tree == null) {
        myTreeTable.editingStopped(e);
        return;
      }
      final TreePath editingTypePath=tree.getSelectionPath();
      final TreePath editingClassPath=editingTypePath.getParentPath();
      Object oldTypeValue=myTreeTable.getValueAt(tree.getRowForPath(editingTypePath),TYPE_COLUMN);
      if (!(oldTypeValue instanceof String)) {
        myTreeTable.editingStopped(e);
        return;
      }
      final Object editingPropertyObject=myTreeTable.getValueAt(tree.getRowForPath(editingTypePath),CLASS_OR_ELEMENT_NAME_COLUMN);
      final Object editingClassObject=myTreeTable.getValueAt(tree.getRowForPath(editingClassPath),CLASS_OR_ELEMENT_NAME_COLUMN);
      if (!(editingPropertyObject instanceof DItemElement) || !(editingClassObject instanceof DClassElement)) {
        myTreeTable.editingStopped(e);
        return;
      }
      final DItemElement dynamicElement=(DItemElement)editingPropertyObject;
      final String name=dynamicElement.getName();
      final String className=((DClassElement)editingClassObject).getName();
      if (dynamicElement instanceof DPropertyElement) {
        DynamicManager.getInstance(project).replaceDynamicPropertyType(className,name,(String)oldTypeValue,newTypeValue);
      }
 else       if (dynamicElement instanceof DMethodElement) {
        final List<MyPair> myPairList=((DMethodElement)dynamicElement).getPairs();
        DynamicManager.getInstance(project).replaceDynamicMethodType(className,name,myPairList,(String)oldTypeValue,newTypeValue);
      }
    }
    public void editingCanceled(    ChangeEvent e){
      System.out.println("editing canceled");
      myTreeTable.editingCanceled(e);
    }
  }
);
  RefactoringListenerManager.getInstance(project).addListenerProvider(new RefactoringElementListenerProvider(){
    private PsiElement myElement;
    @Nullable public RefactoringElementListener getListener(    final PsiElement element){
      myElement=element;
      if (element instanceof GrDynamicImplicitElement) {
        return new RefactoringElementListener(){
          public void elementMoved(          PsiElement newElement){
            renameElement(newElement,project,element);
          }
          public void elementRenamed(          PsiElement newElement){
            renameElement(newElement,project,element);
          }
          private void renameElement(          PsiElement newElement,          Project project,          PsiElement element){
            final PsiClass psiClass=((GrDynamicImplicitElement)element).getContextElement();
            String typeText=psiClass.getQualifiedName();
            if (element instanceof GrDynamicImplicitPropertyImpl) {
              DynamicManager.getInstance(project).replaceDynamicPropertyName(typeText,((GrDynamicImplicitElement)element).getName(),newElement.getText());
            }
 else             if (element instanceof GrDynamicImplicitMethodImpl) {
              final PsiElement declarationScope=((GrDynamicImplicitMethodImpl)element).getDeclarationScope();
              if (!(declarationScope instanceof GrReferenceExpression))               return;
              final PsiElement method=declarationScope.getParent();
              if (!(method instanceof GrMethodCallExpression))               return;
              final String[] types=QuickfixUtil.getMethodArgumentsTypes((GrMethodCallExpression)method);
              DynamicManager.getInstance(project).replaceDynamicMethodName(typeText,((GrDynamicImplicitElement)element).getName(),newElement.getText(),types);
            }
          }
        }
;
      }
      return null;
    }
  }
);
  myTreeTable.setDefaultEditor(TreeTableModel.class,propertyOrClassCellEditor);
  myTreeTable.setDefaultEditor(String.class,typeCellEditor);
  myTreeTable.registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      storeState(project);
      deleteRow(project);
      restoreState(project);
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_DELETE,0),JComponent.WHEN_FOCUSED);
  myTreeTable.registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      storeState(project);
      final int selectionRow=myTreeTable.getTree().getLeadSelectionRow();
      myTreeTable.editCellAt(selectionRow,CLASS_OR_ELEMENT_NAME_COLUMN,event);
      restoreState(project);
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_F2,0),JComponent.WHEN_FOCUSED);
  myTreeTable.registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      storeState(project);
      final int selectionRow=myTreeTable.getTree().getLeadSelectionRow();
      myTreeTable.editCellAt(selectionRow,TYPE_COLUMN,event);
      restoreState(project);
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_F2,KeyEvent.CTRL_MASK),JComponent.WHEN_FOCUSED);
  myTreeTable.getTree().setShowsRootHandles(true);
  myTreeTable.getTableHeader().setReorderingAllowed(false);
  myTreeTable.setPreferredScrollableViewportSize(new Dimension(300,myTreeTable.getRowHeight() * 10));
  myTreeTable.getColumn(myColumnNames[CLASS_OR_ELEMENT_NAME_COLUMN]).setPreferredWidth(200);
  myTreeTable.getColumn(myColumnNames[TYPE_COLUMN]).setPreferredWidth(160);
  JScrollPane scrollpane=ScrollPaneFactory.createScrollPane(myTreeTable);
  scrollpane.setPreferredSize(new Dimension(600,400));
  return scrollpane;
}
