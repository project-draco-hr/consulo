{
  final int[] rows=myTreeTable.getSelectedRows();
  List<Runnable> doRemoveList=new ArrayList<Runnable>();
  for (  int row : rows) {
    final TreePath selectionPath=myTreeTable.getTree().getPathForRow(row);
    final TreePath parent=selectionPath.getParentPath();
    if (parent.getParentPath() == null) {
      final Object containingClassRow=selectionPath.getLastPathComponent();
      if (!(containingClassRow instanceof DefaultMutableTreeNode))       return;
      final Object containingClass=((DefaultMutableTreeNode)containingClassRow).getUserObject();
      if (!(containingClass instanceof DClassElement))       return;
      doRemoveList.add(new Runnable(){
        public void run(){
          DynamicManager.getInstance(project).removeClassElement(((DClassElement)containingClass).getName());
        }
      }
);
    }
 else {
      final Object containingClass=parent.getLastPathComponent();
      final Object dynamicNode=selectionPath.getLastPathComponent();
      if (!(containingClass instanceof DefaultMutableTreeNode))       return;
      if (!(dynamicNode instanceof DefaultMutableTreeNode))       return;
      if (((DefaultMutableTreeNode)containingClass).getChildCount() == 1) {
        doRemoveList.add(new Runnable(){
          public void run(){
            final Object classElement=((DefaultMutableTreeNode)containingClass).getUserObject();
            if (!(classElement instanceof DClassElement))             return;
            DynamicManager.getInstance(project).removeClassElement(((DClassElement)classElement).getName());
          }
        }
);
      }
 else {
        final Object classElement=((DefaultMutableTreeNode)containingClass).getUserObject();
        final Object dynamicElement=((DefaultMutableTreeNode)dynamicNode).getUserObject();
        if (!(classElement instanceof DClassElement))         return;
        if (!(dynamicElement instanceof DItemElement))         return;
        if ((dynamicElement instanceof DPropertyElement)) {
          doRemoveList.add(new Runnable(){
            public void run(){
              DynamicManager.getInstance(project).removePropertyElement(((DPropertyElement)dynamicElement));
            }
          }
);
        }
 else         if ((dynamicElement instanceof DMethodElement)) {
          doRemoveList.add(new Runnable(){
            public void run(){
              DynamicManager.getInstance(project).removeMethodElement(((DMethodElement)dynamicElement));
            }
          }
);
        }
      }
    }
  }
  for (  Runnable removeRowAction : doRemoveList) {
    removeRowAction.run();
  }
}
