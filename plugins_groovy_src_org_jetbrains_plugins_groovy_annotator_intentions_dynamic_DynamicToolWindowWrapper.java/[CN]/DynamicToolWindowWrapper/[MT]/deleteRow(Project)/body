{
  final int[] rows=myTreeTable.getSelectedRows();
  final TreePath selectionPath=myTreeTable.getTree().getAnchorSelectionPath();
  final TreePath parent=selectionPath.getParentPath();
  final Module module=getModule(project);
  if (parent.getParentPath() == null) {
    final Object containingClassRow=parent.getLastPathComponent();
    if (!(containingClassRow instanceof DefaultMutableTreeNode))     return;
    final Object containingClass=((DefaultMutableTreeNode)containingClassRow).getUserObject();
    if (module == null)     return;
    if (!(containingClass instanceof DPClassNode))     return;
    DynamicPropertiesManager.getInstance(project).removeDynamicPropertiesOfClass(module.getName(),((DPClassNode)containingClass).getElement().getContainingClassName());
  }
 else {
    final Object containingClass=parent.getLastPathComponent();
    final Object property=selectionPath.getLastPathComponent();
    if (!(containingClass instanceof DefaultMutableTreeNode))     return;
    if (!(property instanceof DefaultMutableTreeNode))     return;
    final Object classElement=((DefaultMutableTreeNode)containingClass).getUserObject();
    final Object propertyElement=((DefaultMutableTreeNode)property).getUserObject();
    if (!(classElement instanceof DPClassNode))     return;
    if (!(propertyElement instanceof DPPropertyNode))     return;
    final String containingClassName=((DPClassNode)classElement).getElement().getContainingClassName();
    final String propertyName=((DPPropertyNode)propertyElement).getElement().getPropertyName();
    final String propertyType=((DPPropertyNode)propertyElement).getElement().getPropertyType();
    DynamicPropertyVirtual dynamicProperty=new DynamicPropertyVirtual(propertyName,containingClassName,module.getName(),propertyType);
    DynamicPropertiesManager.getInstance(project).removeDynamicProperty(dynamicProperty);
  }
}
