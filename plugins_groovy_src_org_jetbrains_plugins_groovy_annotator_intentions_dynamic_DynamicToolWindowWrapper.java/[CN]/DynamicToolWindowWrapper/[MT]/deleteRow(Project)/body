{
  final int[] rows=myTreeTable.getSelectedRows();
  List<Runnable> doRemoveList=new ArrayList<Runnable>();
  for (  int row : rows) {
    final TreePath selectionPath=myTreeTable.getTree().getPathForRow(row);
    final TreePath parent=selectionPath.getParentPath();
    final Module module=getModule(project);
    if (parent.getParentPath() == null) {
      final Object containingClassRow=parent.getLastPathComponent();
      if (!(containingClassRow instanceof DefaultMutableTreeNode))       return;
      final Object containingClass=((DefaultMutableTreeNode)containingClassRow).getUserObject();
      if (module == null)       return;
      if (!(containingClass instanceof DPClassNode))       return;
      doRemoveList.add(new Runnable(){
        public void run(){
          DynamicManager.getInstance(project).removeDynamicPropertiesOfClass(module.getName(),((DPClassNode)containingClass).getElement().getContainingClassName());
        }
      }
);
    }
 else {
      final Object containingClass=parent.getLastPathComponent();
      final Object property=selectionPath.getLastPathComponent();
      if (!(containingClass instanceof DefaultMutableTreeNode))       return;
      if (!(property instanceof DefaultMutableTreeNode))       return;
      final Object classElement=((DefaultMutableTreeNode)containingClass).getUserObject();
      final Object propertyElement=((DefaultMutableTreeNode)property).getUserObject();
      if (!(classElement instanceof DPClassNode))       return;
      if (!(propertyElement instanceof DPPropertyNode))       return;
      final String containingClassName=((DPClassNode)classElement).getElement().getContainingClassName();
      final String propertyName=((DPPropertyNode)propertyElement).getElement().getDynamicVirtualElement().getName();
      final String propertyType=((DPPropertyNode)propertyElement).getElement().getDynamicVirtualElement().getType();
      final DynamicVirtualProperty dynamicProperty=new DynamicVirtualProperty(propertyName,containingClassName,module.getName(),propertyType);
      doRemoveList.add(new Runnable(){
        public void run(){
          DynamicManager.getInstance(project).removeDynamicElement(dynamicProperty);
        }
      }
);
    }
  }
  for (  Runnable removeRowAction : doRemoveList) {
    removeRowAction.run();
  }
}
