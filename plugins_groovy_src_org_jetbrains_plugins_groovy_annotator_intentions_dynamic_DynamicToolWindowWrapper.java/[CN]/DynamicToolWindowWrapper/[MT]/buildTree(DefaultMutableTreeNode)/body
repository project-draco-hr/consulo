{
  final VirtualFile currentFile=FileEditorManagerEx.getInstanceEx(myProject).getCurrentFile();
  if (currentFile == null) {
    return new DefaultMutableTreeNode();
  }
  Module module=ProjectRootManager.getInstance(myProject).getFileIndex().getModuleForFile(currentFile);
  if (module == null)   return new DefaultMutableTreeNode();
  final Set<String> containingClasses=DynamicPropertiesManager.getInstance(myProject).getAllContainingClasses(module.getName());
  DefaultMutableTreeNode containingClassNode;
  for (  String containingClassName : containingClasses) {
    containingClassNode=new DefaultMutableTreeNode(new DPContainingClassElement(containingClassName));
    final String[] properties=DynamicPropertiesManager.getInstance(myProject).findDynamicPropertiesOfClass(module.getName(),containingClassName);
    DefaultMutableTreeNode propertyTreeNode;
    for (    String propertyName : properties) {
      final String propertyType=DynamicPropertiesManager.getInstance(myProject).findDynamicPropertyType(module.getName(),containingClassName,propertyName);
      propertyTreeNode=new DefaultMutableTreeNode(new DPPropertyElement(new DynamicPropertyVirtual(propertyName,containingClassName,module.getName(),propertyType)));
      containingClassNode.add(propertyTreeNode);
    }
    rootNode.add(containingClassNode);
  }
  return rootNode;
}
