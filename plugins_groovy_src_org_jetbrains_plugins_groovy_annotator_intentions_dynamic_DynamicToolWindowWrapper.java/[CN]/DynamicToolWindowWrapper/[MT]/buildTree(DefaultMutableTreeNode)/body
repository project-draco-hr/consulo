{
  final Module module=getModule();
  if (module == null)   return new DefaultMutableTreeNode();
  final Set<String> containingClasses=DynamicPropertiesManager.getInstance(myProject).getAllContainingClasses(module.getName());
  DefaultMutableTreeNode containingClassNode;
  for (  String containingClassName : containingClasses) {
    containingClassNode=new DefaultMutableTreeNode(new DPClassNode(new DPContainingClassElement(containingClassName)));
    final String[] properties=DynamicPropertiesManager.getInstance(myProject).findDynamicPropertiesOfClass(module.getName(),containingClassName);
    if (properties.length == 0)     continue;
    DefaultMutableTreeNode propertyTreeNode;
    for (    String propertyName : properties) {
      final String propertyType=DynamicPropertiesManager.getInstance(myProject).findDynamicPropertyType(module.getName(),containingClassName,propertyName);
      propertyTreeNode=new DefaultMutableTreeNode(new DPPopertyNode(new DPPropertyElement(new DynamicPropertyVirtual(propertyName,containingClassName,module.getName(),propertyType))));
      containingClassNode.add(propertyTreeNode);
    }
    rootNode.add(containingClassNode);
  }
  return rootNode;
}
