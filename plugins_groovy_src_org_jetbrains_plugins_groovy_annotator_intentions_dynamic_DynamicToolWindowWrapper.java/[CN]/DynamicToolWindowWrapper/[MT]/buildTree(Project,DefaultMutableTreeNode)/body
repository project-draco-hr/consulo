{
  final Module module=getModule(project);
  if (module == null)   return new DefaultMutableTreeNode();
  final Set<String> containingClasses=DynamicManager.getInstance(project).getAllContainingClasses(module.getName());
  DefaultMutableTreeNode containingClassNode;
  for (  String containingClassName : containingClasses) {
    containingClassNode=new DefaultMutableTreeNode(new DPClassNode(new DContainingClassElement(containingClassName)));
    final String[] properties=DynamicManager.getInstance(project).findDynamicPropertiesOfClass(module.getName(),containingClassName);
    if (properties.length == 0)     continue;
    DefaultMutableTreeNode propertyTreeNode;
    for (    String propertyName : properties) {
      final String propertyType=DynamicManager.getInstance(project).getPropertyType(module.getName(),containingClassName,propertyName);
      propertyTreeNode=new DefaultMutableTreeNode(new DPropertyNode(new DPropertyElement(new DynamicVirtualProperty(propertyName,containingClassName,module.getName(),propertyType))));
      containingClassNode.add(propertyTreeNode);
    }
    DefaultMutableTreeNode methodTreeNode=null;
    final Set<MethodSignature> methods=DynamicManager.getInstance(project).findMethodsSignaturesOfClass(module.getName(),containingClassName);
    for (    MethodSignature methodSignature : methods) {
      final PsiType[] psiTypes=methodSignature.getParameterTypes();
      final String returnType=DynamicManager.getInstance(project).getMethodReturnType(module.getName(),containingClassName,methodSignature.getName(),psiTypes);
      List<Pair<String,PsiType>> pairsWithNullNames=new ArrayList<Pair<String,PsiType>>();
    }
    rootNode.add(containingClassNode);
  }
  return rootNode;
}
