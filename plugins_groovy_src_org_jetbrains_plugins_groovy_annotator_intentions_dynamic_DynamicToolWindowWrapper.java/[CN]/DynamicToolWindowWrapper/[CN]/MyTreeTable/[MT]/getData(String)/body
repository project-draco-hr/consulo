{
  if (DataConstantsEx.PSI_ELEMENT.equals(dataId)) {
    final TreePath path=getTree().getSelectionPath();
    final Object selectedObject=path.getLastPathComponent();
    if (!(selectedObject instanceof DefaultMutableTreeNode))     return null;
    final DefaultMutableTreeNode selectedNode=(DefaultMutableTreeNode)selectedObject;
    final Object userObject=selectedNode.getUserObject();
    if (!(userObject instanceof DNamedElement))     return null;
    if (userObject instanceof DClassElement) {
      final DClassElement classElement=(DClassElement)userObject;
      try {
        final GrTypeElement typeElement=GroovyPsiElementFactory.getInstance(myProject).createTypeElement(classElement.getName());
        PsiType type=typeElement.getType();
        if (type instanceof PsiPrimitiveType) {
          type=((PsiPrimitiveType)type).getBoxedType(PsiManager.getInstance(myProject),GlobalSearchScope.allScope(myProject));
        }
        if (!(type instanceof PsiClassType))         return null;
        return ((PsiClassType)type).resolve();
      }
 catch (      IncorrectOperationException e) {
        return null;
      }
    }
 else     if (userObject instanceof DItemElement) {
      final DItemElement itemElement=(DItemElement)userObject;
      final TreeNode parentNode=selectedNode.getParent();
      if (!(parentNode instanceof DefaultMutableTreeNode))       return null;
      final Object classObject=((DefaultMutableTreeNode)parentNode).getUserObject();
      if (!(classObject instanceof DClassElement))       return null;
      final String className=((DClassElement)classObject).getName();
      return itemElement.getPsi(PsiManager.getInstance(myProject),className);
    }
  }
  return null;
}
