{
  DefaultMutableTreeNode rootNode=new DefaultMutableTreeNode();
  buildTree(rootNode);
  String filterText;
  DefaultMutableTreeNode newContainingClassNode;
  TreeNode containingClassNode=rootNode.getFirstChild();
  while (containingClassNode != null) {
    if (!(containingClassNode instanceof DefaultMutableTreeNode))     break;
    TreeNode child=((DefaultMutableTreeNode)containingClassNode).getFirstChild();
    DefaultMutableTreeNode newChild;
    while (child != null) {
      if (!(child instanceof DefaultMutableTreeNode))       break;
      final Object userObject=((DefaultMutableTreeNode)child).getUserObject();
      if (!(userObject instanceof DPPropertyElement))       break;
      filterText=getFilter();
      if (filterText == null)       break;
      final String propertyName=((DPPropertyElement)userObject).getPropertyName();
      if (propertyName == null || "".equals(filterText))       break;
      newChild=((DefaultMutableTreeNode)child).getNextSibling();
      if (!propertyName.contains(filterText)) {
        final TreeNode parent=child.getParent();
        if (!(parent instanceof DefaultMutableTreeNode))         break;
        ((DefaultMutableTreeNode)parent).remove(((DefaultMutableTreeNode)child));
      }
 else {
        ((DPPropertyElement)userObject).setHightlightedText(filterText);
      }
      child=newChild;
    }
    newContainingClassNode=((DefaultMutableTreeNode)containingClassNode).getNextSibling();
    if (containingClassNode.getChildCount() == 0) {
      final TreeNode parent=containingClassNode.getParent();
      if (!(parent instanceof DefaultMutableTreeNode))       break;
      ((DefaultMutableTreeNode)parent).remove(((DefaultMutableTreeNode)containingClassNode));
    }
    containingClassNode=newContainingClassNode;
  }
  rebuildTreeView(rootNode,true);
}
