{
  int index=method.getParameterList().getParameterIndex(parameter);
  final PsiElement element=reference.getElement();
  GrCall call=null;
  if (element instanceof GrCall) {
    call=(GrCall)element;
  }
 else   if (element.getParent() instanceof GrCall) {
    call=(GrCall)element.getParent();
  }
  if (call != null) {
    GrClosureSignature signature=GrClosureSignatureUtil.createSignature(call);
    if (signature == null)     return;
    GrClosureSignatureUtil.ArgInfo<PsiElement>[] argInfos=GrClosureSignatureUtil.mapParametersToArguments(signature,call);
    if (argInfos == null)     return;
    for (    PsiElement arg : argInfos[index].args) {
      usages.add(new SafeDeleteReferenceJavaDeleteUsageInfo(arg,parameter,true));
    }
  }
 else   if (element instanceof GrDocMethodReference) {
    @NonNls final StringBuilder newText=new StringBuilder();
    newText.append("/** @see ");
    GrDocReferenceElement holder=((GrDocMethodReference)element).getReferenceHolder();
    if (holder != null) {
      newText.append(holder.getText());
    }
    newText.append('#');
    newText.append(method.getName());
    newText.append('(');
    final List<PsiParameter> parameters=new ArrayList<PsiParameter>(Arrays.asList(method.getParameterList().getParameters()));
    parameters.remove(parameter);
    newText.append(StringUtil.join(parameters,new Function<PsiParameter,String>(){
      @Override public String fun(      PsiParameter psiParameter){
        return parameter.getType().getCanonicalText();
      }
    }
,","));
    newText.append(")*/");
    usages.add(new SafeDeleteReferenceJavaDeleteUsageInfo(element,parameter,true){
      public void deleteElement() throws IncorrectOperationException {
        ((GrDocMethodReference)element).bindToText(method.getProject(),newText.toString());
      }
    }
);
  }
}
