{
  if (GuiDesignerConfiguration.getInstance(myProject).INSTRUMENT_CLASSES) {
    return ProcessingItem.EMPTY_ARRAY;
  }
  final ArrayList<ProcessingItem> items=new ArrayList<ProcessingItem>();
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    public void run(){
      final CompileScope scope=context.getCompileScope();
      final VirtualFile[] formFiles=scope.getFiles(StdFileTypes.GUI_DESIGNER_FORM,true);
      final CompilerConfiguration compilerConfiguration=CompilerConfiguration.getInstance(myProject);
      final BindingsCache bindingsCache=new BindingsCache(myProject);
      try {
        final HashMap<String,VirtualFile> class2form=new HashMap<String,VirtualFile>();
        for (int i=0; i < formFiles.length; i++) {
          final VirtualFile formFile=formFiles[i];
          if (compilerConfiguration.isExcludedFromCompilation(formFile)) {
            continue;
          }
          final String classToBind;
          try {
            classToBind=bindingsCache.getBoundClassName(formFile);
          }
 catch (          AlienFormFileException e) {
            continue;
          }
catch (          Exception e) {
            addError(context,"Cannot process form file. Reason: " + e,formFile);
            continue;
          }
          if (classToBind == null) {
            continue;
          }
          final VirtualFile sourceFile=findSourceFile(formFile,classToBind);
          if (sourceFile == null) {
            if (context.getCompileScope().belongs(formFile.getUrl())) {
              addError(context,"Class to bind does not exist: " + classToBind,formFile);
            }
            continue;
          }
          final VirtualFile alreadyProcessedForm=class2form.get(classToBind);
          if (alreadyProcessedForm != null) {
            addError(context,"The form is bound to the class " + classToBind + ".\n"+ "Another form "+ alreadyProcessedForm.getPresentableUrl()+ " is also bound to this class.",formFile);
            continue;
          }
          class2form.put(classToBind,formFile);
          final ProcessingItem item=new MyInstrumentationItem(sourceFile,formFile);
          items.add(item);
        }
      }
  finally {
        bindingsCache.save();
      }
    }
  }
);
  return items.toArray(new ProcessingItem[items.size()]);
}
