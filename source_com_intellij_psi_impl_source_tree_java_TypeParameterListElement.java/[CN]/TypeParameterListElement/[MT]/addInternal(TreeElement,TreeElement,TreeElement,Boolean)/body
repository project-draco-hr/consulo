{
  ChameleonTransforming.transformChildren(this);
  TreeElement lt=findChildByRole(ChildRole.LT_IN_TYPE_LIST);
  final CharTable treeCharTab=SharedImplUtil.findCharTableByTree(this);
  if (lt == null) {
    lt=Factory.createSingleLeafElement(LT,new char[]{'<'},0,1,treeCharTab,getManager());
    super.addInternal(lt,lt,firstChild,Boolean.TRUE);
  }
  TreeElement gt=findChildByRole(ChildRole.GT_IN_TYPE_LIST);
  if (gt == null) {
    gt=Factory.createSingleLeafElement(GT,new char[]{'>'},0,1,treeCharTab,getManager());
    super.addInternal(gt,gt,lastChild,Boolean.FALSE);
  }
  if (anchor == null) {
    if (before == null || before.booleanValue()) {
      anchor=gt;
      before=Boolean.TRUE;
    }
 else {
      anchor=lt;
      before=Boolean.FALSE;
    }
  }
  final TreeElement firstAdded=super.addInternal(first,last,anchor,before);
  if (first == last && first.getElementType() == TYPE_PARAMETER) {
    final TreeElement element=first;
    for (TreeElement child=element.getTreeNext(); child != null; child=child.getTreeNext()) {
      if (child.getElementType() == COMMA)       break;
      if (child.getElementType() == TYPE_PARAMETER) {
        final TreeElement comma=Factory.createSingleLeafElement(COMMA,new char[]{','},0,1,treeCharTab,getManager());
        super.addInternal(comma,comma,element,Boolean.FALSE);
        break;
      }
    }
    for (TreeElement child=element.getTreePrev(); child != null; child=child.getTreePrev()) {
      if (child.getElementType() == COMMA)       break;
      if (child.getElementType() == TYPE_PARAMETER) {
        final TreeElement comma=Factory.createSingleLeafElement(COMMA,new char[]{','},0,1,treeCharTab,getManager());
        super.addInternal(comma,comma,child,Boolean.FALSE);
        break;
      }
    }
  }
  return firstAdded;
}
