{
  entry.setSize(bytes.length);
  crc.reset();
  crc.update(bytes);
  entry.setCrc(crc.getValue());
  if (entry.getMethod() == -1) {
    entry.setMethod(method);
  }
  if (entry.getTime() == -1) {
    entry.setTime(System.currentTimeMillis());
  }
  final byte[] outputBytes;
  final int outputBytesLength;
  if (entry.getMethod() == ZipEntry.DEFLATED) {
    def.setLevel(level);
    final BufferExposingByteArrayOutputStream compressedBytesStream=new BufferExposingByteArrayOutputStream();
    final DeflaterOutputStream stream=new DeflaterOutputStream(compressedBytesStream,def);
    try {
      stream.write(bytes);
    }
  finally {
      stream.close();
    }
    outputBytesLength=compressedBytesStream.size();
    outputBytes=compressedBytesStream.getInternalBuffer();
  }
 else {
    outputBytesLength=bytes.length;
    outputBytes=bytes;
  }
  entry.setCompressedSize(outputBytesLength);
  writeLocalFileHeader(entry);
  writeOut(outputBytes,0,outputBytesLength);
}
