{
  super(new CardLayout());
  myInspectorTable=new PropertyInspectorTable(project,componentTree);
  myComponentTree=componentTree;
  final JPanel inspectorCard=new JPanel(new GridBagLayout());
  final JScrollPane inspectorScrollPane=ScrollPaneFactory.createScrollPane(myInspectorTable);
  inspectorScrollPane.setBorder(IdeBorderFactory.createBorder(SideBorder.BOTTOM));
  inspectorCard.add(inspectorScrollPane,new GridBagConstraints(0,0,0,1,1,1,GridBagConstraints.CENTER,GridBagConstraints.BOTH,new Insets(0,0,0,0),0,0));
  final JCheckBox chkShowExpertProperties=new JCheckBox(UIDesignerBundle.message("chk.show.expert.properties"));
  inspectorCard.add(chkShowExpertProperties,new GridBagConstraints(0,1,1,1,1,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));
  chkShowExpertProperties.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      myInspectorTable.setShowExpertProperties(chkShowExpertProperties.isSelected());
    }
  }
);
  add(inspectorCard,INSPECTOR_CARD);
  final MultiLineLabel label=new MultiLineLabel(UIDesignerBundle.message("label.select.single.component.to.edit.its.properties")){
    public void updateUI(){
      super.updateUI();
      setBackground(myInspectorTable.getBackground());
    }
  }
;
  label.setOpaque(true);
  label.setHorizontalAlignment(SwingConstants.CENTER);
  add(label,EMPTY_CARD);
  add(myCustomPropertiesScrollPane,CUSTOM_CARD);
  myComponentSelectionListener=new MyComponentSelectionListener();
  synchWithTree(false);
  myQuickFixManager=new QuickFixManagerImpl(null,myInspectorTable,inspectorScrollPane.getViewport());
  myCustomPropertiesChangeListener=new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      if (myPropertiesPanelContainer != null) {
        myPropertiesPanelContainer.revalidate();
      }
      if (myEditor.ensureEditable()) {
        myEditor.refreshAndSave(true);
      }
    }
  }
;
}
