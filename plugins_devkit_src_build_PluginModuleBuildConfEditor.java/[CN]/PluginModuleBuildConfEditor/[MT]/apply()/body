{
  if (!mySetDependencyOnPluginModule.isEmpty()) {
    throw new ConfigurationException("Unable to set dependency on plugin module.");
  }
  final String toDelete=!myJar.isSelected() ? myBuildProperties.getJarPath() != null ? myBuildProperties.getJarPath().replace('/',File.separatorChar) : null : myBuildProperties.getExplodedPath() != null ? myBuildProperties.getExplodedPath().replace('/',File.separatorChar) : null;
  if (toDelete != null && new File(toDelete).exists()) {
    if (Messages.showYesNoDialog(myModule.getProject(),(!myJar.isSelected() ? "Delete " : "Clear ") + toDelete + "?","Clean up plugin directory",null) == DialogWrapper.OK_EXIT_CODE) {
      CommandProcessor.getInstance().executeCommand(myModule.getProject(),new Runnable(){
        public void run(){
          FileUtil.delete(new File(toDelete));
        }
      }
,"Synchronize plugins directory",null);
    }
  }
  myBuildProperties.setJarPlugin(myJar.isSelected());
  final File plugin=new File(myBuildProperties.getPluginXMLPath());
  if (plugin.exists() && !plugin.getPath().equals(myPluginXML.getText()) && Messages.showYesNoDialog(myModule.getProject(),"Delete " + plugin.getPath() + File.separator+ "META-INF"+ " ?","Clean up META-INF directory",null) == DialogWrapper.OK_EXIT_CODE) {
    CommandProcessor.getInstance().executeCommand(myModule.getProject(),new Runnable(){
      public void run(){
        FileUtil.delete(new File(plugin,"META-INF"));
      }
    }
,"Remove old plugin.xml directory",null);
  }
  myBuildProperties.setPluginXMLPath(myPluginXML.getText());
  myModified=false;
}
