{
  if (!CodeInsightSettings.getInstance().SMART_END_ACTION) {
    return Result.CONTINUE;
  }
  final Project project=PlatformDataKeys.PROJECT.getData(dataContext);
  if (project == null) {
    return Result.CONTINUE;
  }
  final Document document=editor.getDocument();
  PsiFile psiFile=LangDataKeys.PSI_FILE.getData(dataContext);
  if (psiFile == null) {
    psiFile=PsiDocumentManager.getInstance(project).getPsiFile(document);
  }
  if (psiFile == null) {
    return Result.CONTINUE;
  }
  final CaretModel caretModel=editor.getCaretModel();
  final int offset=caretModel.getOffset();
  final CharSequence text=document.getCharsSequence();
  int line=caretModel.getLogicalPosition().line;
  final int endLineOffset=document.getLineEndOffset(line);
  final LogicalPosition endLineLogicalPosition=editor.offsetToLogicalPosition(endLineOffset);
  final int lastNonWsSymbolOffset=CharArrayUtil.shiftBackward(text,endLineOffset," \t");
  if (lastNonWsSymbolOffset > offset || caretModel.getLogicalPosition().column > endLineLogicalPosition.column) {
    return Result.CONTINUE;
  }
  final List<JavadocNavigationHelper.JavadocParameterInfo> infos=myHelper.parse(psiFile,editor,offset);
  JavadocNavigationHelper.JavadocParameterInfo info=null;
  int descriptionStartColumn=-1;
  int parameterNameEndColumn=-1;
  for (  JavadocNavigationHelper.JavadocParameterInfo parameterInfo : infos) {
    parameterNameEndColumn=Math.max(parameterNameEndColumn,parameterInfo.parameterNameEndPosition.column);
    if (parameterInfo.parameterDescriptionStartPosition != null) {
      descriptionStartColumn=Math.max(descriptionStartColumn,parameterInfo.parameterDescriptionStartPosition.column);
    }
    if (line == parameterInfo.parameterNameEndPosition.line) {
      info=parameterInfo;
    }
  }
  if (info == null || info.parameterDescriptionStartPosition != null) {
    return Result.CONTINUE;
  }
  final CodeStyleSettings codeStyleSettings=CodeStyleSettingsManager.getInstance(project).getCurrentSettings();
  final int indentSize=codeStyleSettings.getIndentSize(psiFile.getFileType());
  int column;
  if (codeStyleSettings.JD_ALIGN_PARAM_COMMENTS) {
    column=Math.max(descriptionStartColumn,parameterNameEndColumn);
    if (column <= parameterNameEndColumn) {
      column=parameterNameEndColumn + indentSize;
    }
  }
 else {
    column=info.parameterNameEndPosition.column + indentSize;
  }
  if (!editor.getSettings().isVirtualSpace() && endLineLogicalPosition.column < column && !editor.isViewer()) {
    final String toInsert=StringUtil.repeat(" ",column - endLineLogicalPosition.column);
    ApplicationManager.getApplication().runWriteAction(new Runnable(){
      @Override public void run(){
        document.insertString(endLineOffset,toInsert);
        PsiDocumentManager.getInstance(project).commitDocument(document);
      }
    }
);
  }
  caretModel.moveToLogicalPosition(new LogicalPosition(line,column));
  return Result.STOP;
}
