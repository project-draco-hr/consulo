{
  if (isFileReadOnly(project,file)) {
    return;
  }
  final PsiMethodCallExpression call=(PsiMethodCallExpression)findMatchingElement(file,editor);
  final PsiReferenceExpression expression=call.getMethodExpression();
  final PsiExpression qualifierExp=expression.getQualifierExpression();
  final String qualifier;
  if (qualifierExp == null) {
    qualifier="";
  }
 else {
    qualifier=qualifierExp.getText() + '.';
  }
  final PsiExpressionList argumentList=call.getArgumentList();
  final PsiExpression[] args=argumentList.getExpressions();
  final String callString;
  if (args.length == 2) {
    final PsiExpression otherArg;
    final String argText=args[0].getText();
    if ("true".equals(argText) || "false".equals(argText) || "null".equals(argText)) {
      otherArg=args[1];
    }
 else {
      otherArg=args[0];
    }
    callString=qualifier + getAssertString(argText) + '('+ otherArg.getText()+ ')';
  }
 else {
    final PsiExpression otherArg;
    final String argText=args[1].getText();
    if ("true".equals(argText) || "false".equals(argText) || "null".equals(argText)) {
      otherArg=args[2];
    }
 else {
      otherArg=args[1];
    }
    callString=qualifier + getAssertString(argText) + '('+ args[0].getText()+ ", "+ otherArg.getText()+ ')';
  }
  replaceExpression(project,callString,call);
}
