{
  final PsiMethodCallExpression call=(PsiMethodCallExpression)element;
  final PsiReferenceExpression expression=call.getMethodExpression();
  final PsiElement qualifier=expression.getQualifier();
  final String qualifierText;
  if (qualifier == null) {
    qualifierText="";
  }
 else {
    qualifierText=qualifier.getText() + '.';
  }
  final PsiExpressionList argumentList=call.getArgumentList();
  final PsiExpression[] args=argumentList.getExpressions();
  final String callString;
  final String assertString;
  if (args.length == 2) {
    @NonNls final String argText=args[0].getText();
    final PsiExpression otherArg;
    if ("true".equals(argText) || "false".equals(argText) || "null".equals(argText)) {
      otherArg=args[1];
    }
 else {
      otherArg=args[0];
    }
    assertString=getAssertString(argText);
    callString=qualifierText + assertString + '('+ otherArg.getText()+ ')';
  }
 else {
    @NonNls final String argText=args[1].getText();
    final PsiExpression otherArg;
    if ("true".equals(argText) || "false".equals(argText) || "null".equals(argText)) {
      otherArg=args[2];
    }
 else {
      otherArg=args[1];
    }
    assertString=getAssertString(argText);
    callString=qualifierText + assertString + '('+ args[0].getText()+ ", "+ otherArg.getText()+ ')';
  }
  if (qualifier == null) {
    final PsiMethod containingMethod=PsiTreeUtil.getParentOfType(call,PsiMethod.class);
    if (containingMethod != null && AnnotationUtil.isAnnotated(containingMethod,"org.junit.Test",true)) {
      ImportUtils.addStaticImport(element,"org.junit.Assert",assertString);
    }
  }
  replaceExpression(callString,call);
}
