{
  if (isParentGrouped(parent))   return Collections.EMPTY_LIST;
  Map<Group,SuperTypeGroup> groups=new THashMap<Group,SuperTypeGroup>();
  for (  TreeElement child : children) {
    if (child instanceof PsiMethodTreeElement) {
      PsiMethod method=((PsiMethodTreeElement)child).getMethod();
      PsiMethod[] superMethods=method.findSuperMethods();
      if (superMethods.length > 0) {
        PsiMethod superMethod=superMethods[0];
        method.putUserData(SUPER_METHOD_KEY,new WeakReference<PsiMethod>(superMethod));
        PsiClass superClass=superMethod.getContainingClass();
        boolean overrides=methodOverridesSuper(method,superMethod);
        SuperTypeGroup superTypeGroup=new SuperTypeGroup(superClass,overrides);
        SuperTypeGroup existing=groups.get(superTypeGroup);
        if (existing == null) {
          groups.put(superTypeGroup,superTypeGroup);
          existing=superTypeGroup;
        }
        existing.addMethod(child);
      }
    }
  }
  return groups.keySet();
}
