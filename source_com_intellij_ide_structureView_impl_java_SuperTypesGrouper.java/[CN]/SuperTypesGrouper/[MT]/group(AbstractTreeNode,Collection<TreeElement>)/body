{
  if (isParentGrouped(parent))   return Collections.emptyList();
  Map<Group,SuperTypeGroup> groups=new THashMap<Group,SuperTypeGroup>();
  for (  TreeElement child : children) {
    if (child instanceof PsiMethodTreeElement) {
      final PsiMethodTreeElement element=(PsiMethodTreeElement)child;
      PsiMethod method=((PsiMethodTreeElement)child).getMethod();
      if (element.isInherited()) {
        PsiClass groupClass=method.getContainingClass();
        final SuperTypeGroup group=getOrCreateGroup(groupClass,SuperTypeGroup.OwnershipType.INHERITS,groups);
        group.addMethod(child);
      }
 else {
        PsiMethod[] superMethods=method.findSuperMethods();
        if (superMethods.length > 0) {
          PsiMethod superMethod=superMethods[0];
          method.putUserData(SUPER_METHOD_KEY,new WeakReference<PsiMethod>(superMethod));
          PsiClass groupClass=superMethod.getContainingClass();
          boolean overrides=methodOverridesSuper(method,superMethod);
          final SuperTypeGroup.OwnershipType ownershipType=overrides ? SuperTypeGroup.OwnershipType.OVERRIDES : SuperTypeGroup.OwnershipType.IMPLEMENTS;
          SuperTypeGroup group=getOrCreateGroup(groupClass,ownershipType,groups);
          group.addMethod(child);
        }
      }
    }
  }
  return groups.keySet();
}
