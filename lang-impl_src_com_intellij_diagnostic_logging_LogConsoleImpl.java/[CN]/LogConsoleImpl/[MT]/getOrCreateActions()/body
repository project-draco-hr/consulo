{
  if (myActions != null)   return myActions;
  final LogConsolePreferences prefs=getPreferences();
  DefaultActionGroup group=new DefaultActionGroup();
  final AnAction[] actions=myConsole.createConsoleActions();
  for (  AnAction action : actions) {
    group.add(action);
  }
  group.addSeparator();
  final ArrayList<LogFilter> filters=new ArrayList<LogFilter>();
  if (myShowStandardFilters) {
    filters.add(new LogFilter(DiagnosticBundle.message("log.console.filter.by.type",LogConsolePreferences.INFO),IconLoader.getIcon("/ant/filterInfo.png")){
      public boolean isAcceptable(      String line){
        return prefs.isApplicable(line,myPrevType);
      }
    }
);
    filters.add(new LogFilter(DiagnosticBundle.message("log.console.filter.by.type",LogConsolePreferences.WARNING),IconLoader.getIcon("/ant/filterWarning.png")){
      public boolean isAcceptable(      String line){
        return prefs.isApplicable(line,myPrevType);
      }
    }
);
    filters.add(new LogFilter(DiagnosticBundle.message("log.console.filter.by.type",LogConsolePreferences.ERROR),IconLoader.getIcon("/ant/filterError.png")){
      public boolean isAcceptable(      String line){
        return prefs.isApplicable(line,myPrevType);
      }
    }
);
  }
  filters.addAll(prefs.getRegisteredLogFilters());
  for (  final LogFilter filter : filters) {
    group.add(new ToggleAction(filter.getName(),filter.getName(),filter.getIcon()){
      public boolean isSelected(      AnActionEvent e){
        return prefs.isFilterSelected(filter);
      }
      public void setSelected(      AnActionEvent e,      boolean state){
        prefs.setFilterSelected(filter,state);
      }
    }
);
  }
  myActions=group;
  return myActions;
}
