{
  builder.setTitle(IdeBundle.message("action.create.new.class")).addKind("Class",PlatformIcons.CLASS_ICON,JavaTemplateUtil.INTERNAL_CLASS_TEMPLATE_NAME).addKind("Interface",PlatformIcons.INTERFACE_ICON,JavaTemplateUtil.INTERNAL_INTERFACE_TEMPLATE_NAME);
  if (LanguageLevelProjectExtension.getInstance(project).getLanguageLevel().compareTo(LanguageLevel.JDK_1_5) >= 0) {
    builder.addKind("Enum",PlatformIcons.ENUM_ICON,JavaTemplateUtil.INTERNAL_ENUM_TEMPLATE_NAME);
    builder.addKind("Annotation",PlatformIcons.ANNOTATION_TYPE_ICON,JavaTemplateUtil.INTERNAL_ANNOTATION_TYPE_TEMPLATE_NAME);
  }
  for (  FileTemplate template : FileTemplateManager.getInstance().getAllTemplates()) {
    final JavaCreateFromTemplateHandler handler=new JavaCreateFromTemplateHandler();
    if (handler.handlesTemplate(template) && JavaCreateFromTemplateHandler.canCreate(directory)) {
      builder.addKind(template.getName(),JavaFileType.INSTANCE.getIcon(),template.getName());
    }
  }
  builder.setValidator(new InputValidatorEx(){
    @Override public String getErrorText(    String inputString){
      if (inputString.length() > 0 && !LanguageNamesValidation.INSTANCE.forLanguage(JavaLanguage.INSTANCE).isIdentifier(inputString,project)) {
        return "This is not a valid Java identifier";
      }
      return null;
    }
    @Override public boolean checkInput(    String inputString){
      return true;
    }
    @Override public boolean canClose(    String inputString){
      return !StringUtil.isEmptyOrSpaces(inputString) && getErrorText(inputString) == null;
    }
  }
);
}
