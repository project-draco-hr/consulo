{
  PsiManager manager=getManager();
  final ReferenceKind kind=getKind();
switch (kind) {
case PACKAGE_FQ:
case CLASS_OR_PACKAGE_FQ:
{
      final String refText=PsiUtil.getQualifiedReferenceText(this);
      final int lastDot=refText.lastIndexOf(".");
      String parentPackageFQName=lastDot > 0 ? refText.substring(0,lastDot) : "";
      final PsiPackage parentPackage=manager.findPackage(parentPackageFQName);
      if (parentPackage != null) {
        final GlobalSearchScope scope=getResolveScope();
        if (kind == PACKAGE_FQ) {
          return parentPackage.getSubPackages(scope);
        }
 else {
          final PsiPackage[] subpackages=parentPackage.getSubPackages(scope);
          final PsiClass[] classes=parentPackage.getClasses(scope);
          PsiElement[] result=new PsiElement[subpackages.length + classes.length];
          System.arraycopy(subpackages,0,result,0,subpackages.length);
          System.arraycopy(classes,0,result,subpackages.length,classes.length);
          return result;
        }
      }
    }
case CLASS:
{
    GrTypeOrPackageReferenceElement qualifier=getQualifier();
    if (qualifier != null) {
      PsiElement qualifierResolved=qualifier.resolve();
      if (qualifierResolved instanceof PsiPackage) {
        return ((PsiPackage)qualifierResolved).getClasses();
      }
 else       if (qualifierResolved instanceof PsiClass) {
        return ((PsiClass)qualifierResolved).getInnerClasses();
      }
    }
 else {
      ClassResolver processor=new ClassResolver(null);
      ResolveUtil.treeWalkUp(this,processor);
      List<PsiNamedElement> candidates=processor.getCandidates();
      return candidates.toArray(PsiNamedElement.EMPTY_ARRAY);
    }
  }
}
return ArrayUtil.EMPTY_OBJECT_ARRAY;
}
