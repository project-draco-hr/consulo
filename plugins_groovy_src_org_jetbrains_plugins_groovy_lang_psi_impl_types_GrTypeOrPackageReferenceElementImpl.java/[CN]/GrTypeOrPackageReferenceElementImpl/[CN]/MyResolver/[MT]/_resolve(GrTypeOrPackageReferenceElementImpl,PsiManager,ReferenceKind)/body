{
switch (kind) {
case CLASS_OR_PACKAGE_FQ:
{
      PsiClass aClass=manager.findClass(PsiUtil.getQualifiedReferenceText(ref),ref.getResolveScope());
      if (aClass != null) {
        boolean isAccessible=com.intellij.psi.util.PsiUtil.isAccessible(aClass,ref,null);
        return new GroovyResolveResult[]{new GroovyResolveResultImpl(aClass,isAccessible)};
      }
    }
case PACKAGE_FQ:
  PsiPackage aPackage=manager.findPackage(PsiUtil.getQualifiedReferenceText(ref));
return new GroovyResolveResult[]{new GroovyResolveResultImpl(aPackage,true)};
case CLASS:
case CLASS_OR_PACKAGE:
GrTypeOrPackageReferenceElement qualifier=ref.getQualifier();
String refName=ref.getReferenceName();
if (qualifier != null) {
PsiElement qualifierResolved=qualifier.resolve();
if (qualifierResolved instanceof PsiPackage) {
PsiClass[] classes=((PsiPackage)qualifierResolved).getClasses();
for (final PsiClass aClass : classes) {
if (refName.equals(aClass.getName())) {
  boolean isAccessible=com.intellij.psi.util.PsiUtil.isAccessible(aClass,ref,null);
  return new GroovyResolveResult[]{new GroovyResolveResultImpl(aClass,isAccessible)};
}
}
if (kind == CLASS_OR_PACKAGE) {
for (final PsiPackage subpackage : ((PsiPackage)qualifierResolved).getSubPackages()) {
  if (refName.equals(subpackage.getName()))   return new GroovyResolveResult[]{new GroovyResolveResultImpl(subpackage,true)};
}
}
}
}
 else {
ResolverProcessor processor=new ResolverProcessor(refName,EnumSet.of(ClassHint.ResolveKind.CLASS_OR_PACKAGE),ref,false);
ResolveUtil.treeWalkUp(ref,processor);
GroovyResolveResult[] candidates=processor.getCandidates();
if (candidates.length > 0) return candidates;
if (kind == CLASS_OR_PACKAGE) {
PsiPackage defaultPackage=ref.getManager().findPackage("");
if (defaultPackage != null) {
for (final PsiPackage subpackage : defaultPackage.getSubPackages()) {
  if (refName.equals(subpackage.getName()))   return new GroovyResolveResult[]{new GroovyResolveResultImpl(subpackage,true)};
}
}
}
}
break;
case CONSTRUCTOR:
final GroovyResolveResult[] classResults=_resolve(ref,manager,CLASS);
if (classResults.length == 0) return GroovyResolveResult.EMPTY_ARRAY;
final MethodResolverProcessor processor=new MethodResolverProcessor(ref.getReferenceName(),ref,false,true);
for (GroovyResolveResult classResult : classResults) {
final PsiElement element=classResult.getElement();
if (element instanceof PsiClass) {
if (!element.processDeclarations(processor,PsiSubstitutor.EMPTY,null,ref)) break;
}
}
final GroovyResolveResult[] constructorResults=processor.getCandidates();
return constructorResults.length > 0 ? constructorResults : classResults;
}
return GroovyResolveResult.EMPTY_ARRAY;
}
