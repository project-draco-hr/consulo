{
  String refName=groovyRef.getReferenceName();
  if (refName == null)   return null;
  PsiManager manager=groovyRef.getManager();
  ReferenceKind kind=groovyRef.getKind();
switch (kind) {
case CLASS_OR_PACKAGE_FQ:
{
      PsiClass aClass=manager.findClass(PsiUtil.getQualifiedReferenceText(groovyRef),groovyRef.getResolveScope());
      if (aClass != null) {
        boolean isAccessible=com.intellij.psi.util.PsiUtil.isAccessible(aClass,groovyRef,null);
        return new GroovyResolveResult[]{new GroovyResolveResultImpl(aClass,isAccessible)};
      }
    }
case PACKAGE_FQ:
  PsiPackage aPackage=manager.findPackage(PsiUtil.getQualifiedReferenceText(groovyRef));
return new GroovyResolveResult[]{new GroovyResolveResultImpl(aPackage,true)};
case CLASS:
case CLASS_OR_PACKAGE:
GrTypeOrPackageReferenceElement qualifier=groovyRef.getQualifier();
if (qualifier != null) {
PsiElement qualifierResolved=qualifier.resolve();
if (qualifierResolved instanceof PsiPackage) {
PsiClass[] classes=((PsiPackage)qualifierResolved).getClasses();
for (final PsiClass aClass : classes) {
  if (refName.equals(aClass.getName())) {
    boolean isAccessible=com.intellij.psi.util.PsiUtil.isAccessible(aClass,groovyRef,null);
    return new GroovyResolveResult[]{new GroovyResolveResultImpl(aClass,isAccessible)};
  }
}
if (kind == CLASS_OR_PACKAGE) {
  for (  final PsiPackage subpackage : ((PsiPackage)qualifierResolved).getSubPackages()) {
    if (refName.equals(subpackage.getName()))     return new GroovyResolveResult[]{new GroovyResolveResultImpl(subpackage,true)};
  }
}
}
}
 else {
ResolverProcessor processor=new ResolverProcessor(refName,EnumSet.of(ClassHint.ResolveKind.CLASS),groovyRef,false);
ResolveUtil.treeWalkUp(groovyRef,processor);
GroovyResolveResult[] candidates=processor.getCandidates();
if (candidates.length > 0) return candidates;
if (kind == CLASS_OR_PACKAGE) {
PsiPackage defaultPackage=groovyRef.getManager().findPackage("");
if (defaultPackage != null) {
  for (  final PsiPackage subpackage : defaultPackage.getSubPackages()) {
    if (refName.equals(subpackage.getName()))     return new GroovyResolveResult[]{new GroovyResolveResultImpl(subpackage,true)};
  }
}
}
}
}
return null;
}
