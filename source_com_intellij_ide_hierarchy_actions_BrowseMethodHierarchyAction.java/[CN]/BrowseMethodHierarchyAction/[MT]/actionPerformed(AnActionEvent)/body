{
  final DataContext dataContext=e.getDataContext();
  final Project project=(Project)dataContext.getData(DataConstants.PROJECT);
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  final PsiMethod method=getMethod(dataContext);
  final MethodHierarchyBrowser hierarchyBrowser=new MethodHierarchyBrowser(project,method);
  final Content content;
  final HierarchyBrowserManager hierarchyBrowserManager=project.getComponent(HierarchyBrowserManager.class);
  final ContentManager contentManager=hierarchyBrowserManager.getContentManager();
  final Content selectedContent=contentManager.getSelectedContent();
  if (selectedContent != null && !selectedContent.isPinned()) {
    content=selectedContent;
    final Component component=content.getComponent();
    if (component instanceof MethodHierarchyBrowser) {
      ((MethodHierarchyBrowser)component).dispose();
    }
    content.setComponent(hierarchyBrowser);
  }
 else {
    content=PeerFactory.getInstance().getContentFactory().createContent(hierarchyBrowser,null,true);
    contentManager.addContent(content);
    contentManager.addContentManagerListener(new ContentManagerAdapter(){
      public void contentRemoved(      final ContentManagerEvent event){
        final Content content=event.getContent();
        final Component component=content.getComponent();
        if (component instanceof MethodHierarchyBrowser) {
          ((MethodHierarchyBrowser)component).dispose();
          content.release();
        }
      }
    }
);
  }
  contentManager.setSelectedContent(content);
  hierarchyBrowser.setContent(content);
  final String name=method.getName();
  content.setDisplayName(name);
  final Runnable runnable=new Runnable(){
    public void run(){
      final String typeName=MethodHierarchyTreeStructure.TYPE;
      hierarchyBrowser.changeView(typeName);
    }
  }
;
  ToolWindowManager.getInstance(project).getToolWindow(ToolWindowId.HIERARCHY).activate(runnable);
}
