{
  GrAnnotationNameValuePair nvp=(GrAnnotationNameValuePair)element.getParent();
  String name=nvp.getName();
  if (name != null && !name.equals("value"))   return PsiReference.EMPTY_ARRAY;
  PsiElement argumentList=nvp.getParent();
  if (!(argumentList instanceof GrAnnotationArgumentList))   return PsiReference.EMPTY_ARRAY;
  PsiElement eAnnotation=argumentList.getParent();
  if (!(eAnnotation instanceof GrAnnotation))   return PsiReference.EMPTY_ARRAY;
  GrAnnotation annotation=(GrAnnotation)eAnnotation;
  String shortName=annotation.getShortName();
  if (!shortName.equals("Unroll") && !shortName.equals("spock.lang.Unroll"))   return PsiReference.EMPTY_ARRAY;
  PsiClass aClass=PsiTreeUtil.getParentOfType(annotation,PsiClass.class);
  if (aClass == null)   return PsiReference.EMPTY_ARRAY;
  if (!GroovyPsiManager.isInheritorCached(aClass,SpockUtils.SPEC_CLASS_NAME))   return PsiReference.EMPTY_ARRAY;
  PsiElement modifierList=annotation.getParent();
  if (!(modifierList instanceof GrModifierList))   return PsiReference.EMPTY_ARRAY;
  PsiElement eMethod=modifierList.getParent();
  if (!(eMethod instanceof GrMethod))   return PsiReference.EMPTY_ARRAY;
  final GrMethod method=(GrMethod)eMethod;
  ElementManipulator<PsiElement> manipulator=ElementManipulators.getManipulator(element);
  TextRange rangeInElement=manipulator.getRangeInElement(element);
  String text=rangeInElement.substring(element.getText());
  final List<SpockVariableReference> references=new ArrayList<SpockVariableReference>();
  Matcher matcher=PATTERN.matcher(text);
  while (matcher.find()) {
    TextRange range=new TextRange(rangeInElement.getStartOffset() + matcher.start(1),rangeInElement.getStartOffset() + matcher.end(1));
    references.add(new SpockVariableReference(element,range,references,method));
  }
  return references.toArray(new PsiReference[references.size()]);
}
