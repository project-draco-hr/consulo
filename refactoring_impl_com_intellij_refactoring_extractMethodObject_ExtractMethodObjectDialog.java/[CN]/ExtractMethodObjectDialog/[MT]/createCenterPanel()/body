{
  mySignatureArea.setEditable(false);
  myCreateInnerClassRb.setSelected(true);
  enable(true);
  final ActionListener enableDisableListener=new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      enable(myCreateInnerClassRb.isSelected());
    }
  }
;
  myCreateInnerClassRb.addActionListener(enableDisableListener);
  myCreateAnonymousClassWrapperRb.addActionListener(enableDisableListener);
  myCreateAnonymousClassWrapperRb.setEnabled(!myMultipleExitPoints);
  myFoldCb.setSelected(true);
  myFoldCb.setVisible(myVariableData.isFoldable());
  myFoldCb.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      myVariableData.setFoldingAvailable(myFoldCb.isSelected());
      myParametersTableContainer.removeAll();
      myParametersTableContainer.add(createParametersPanel(),BorderLayout.CENTER);
      updateSignature();
    }
  }
);
  myParametersTableContainer.add(createParametersPanel(),BorderLayout.CENTER);
  final ActionListener updateSugnatureListener=new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      updateSignature();
      IdeFocusManager.getInstance(myProject).requestFocus(myCreateInnerClassRb.isSelected() ? myInnerClassName : myMethodName,false);
    }
  }
;
  if (myStaticFlag || myCanBeStatic) {
    myCbMakeStatic.setEnabled(!myStaticFlag);
    myCbMakeStatic.setSelected(myStaticFlag);
    myCbMakeStatic.addActionListener(updateSugnatureListener);
  }
 else {
    myCbMakeStatic.setSelected(false);
    myCbMakeStatic.setEnabled(false);
  }
  updateVarargsEnabled();
  myCbMakeVarargs.setSelected(myWasStatic);
  myCbMakeVarargs.addActionListener(updateSugnatureListener);
  myCbMakeVarargsAnonymous.setSelected(myWasStatic);
  myCbMakeVarargsAnonymous.addActionListener(updateSugnatureListener);
  final com.intellij.openapi.editor.event.DocumentAdapter nameListener=new com.intellij.openapi.editor.event.DocumentAdapter(){
    @Override public void documentChanged(    final DocumentEvent e){
      update();
    }
  }
;
  myInnerClassName.getDocument().addDocumentListener(nameListener);
  myMethodName.getDocument().addDocumentListener(nameListener);
  myPrivateRadioButton.setSelected(true);
  myCreateInnerClassRb.addActionListener(updateSugnatureListener);
  myCreateAnonymousClassWrapperRb.addActionListener(updateSugnatureListener);
  final Enumeration<AbstractButton> visibilities=myVisibilityGroup.getElements();
  while (visibilities.hasMoreElements()) {
    visibilities.nextElement().addActionListener(updateSugnatureListener);
  }
  update();
  return myWholePanel;
}
