{
  final AtomicBoolean commitSucceeded=new AtomicBoolean();
  final Semaphore sem=new Semaphore(0);
  myPlatformFacade.invokeAndWait(new Runnable(){
    @Override public void run(){
      try {
        cancelCherryPick(repository);
        List<Change> changes=commit.getCommit().getChanges();
        boolean commitNotCancelled=myPlatformFacade.getVcsHelper(myProject).commitChanges(changes,changeList,commitMessage,new CommitResultHandler(){
          @Override public void onSuccess(          @NotNull String commitMessage){
            commit.setActualSubject(commitMessage);
            commitSucceeded.set(true);
            sem.release();
          }
          @Override public void onFailure(){
            commitSucceeded.set(false);
            sem.release();
          }
        }
);
        if (!commitNotCancelled) {
          commitSucceeded.set(false);
          sem.release();
        }
      }
 catch (      Throwable t) {
        LOG.error(t);
        commitSucceeded.set(false);
        sem.release();
      }
    }
  }
,ModalityState.NON_MODAL);
  try {
    sem.acquire();
  }
 catch (  InterruptedException e) {
    LOG.error(e);
    return false;
  }
  return commitSucceeded.get();
}
