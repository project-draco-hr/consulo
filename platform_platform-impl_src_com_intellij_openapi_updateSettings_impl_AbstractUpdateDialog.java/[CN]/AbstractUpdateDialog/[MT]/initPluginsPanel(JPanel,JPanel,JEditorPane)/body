{
  pluginsPanel.setVisible(myUploadedPlugins != null);
  if (myUploadedPlugins != null) {
    final DetectedPluginsPanel foundPluginsPanel=new DetectedPluginsPanel();
    foundPluginsPanel.addStateListener(new DetectedPluginsPanel.Listener(){
      @Override public void stateChanged(){
        setButtonsText();
      }
    }
);
    for (    Couple<IdeaPluginDescriptor> uploadedPlugin : myUploadedPlugins) {
      foundPluginsPanel.add(uploadedPlugin);
    }
    TableUtil.ensureSelectionExists(foundPluginsPanel.getEntryTable());
    pluginsPanel.add(foundPluginsPanel,BorderLayout.CENTER);
  }
  updateLinkPane.setBackground(UIUtil.getPanelBackground());
  String css=UIUtil.getCssFontDeclaration(UIUtil.getLabelFont());
  if (UIUtil.isUnderDarkBuildInLaf()) {
    css+="<style>body {background: #" + ColorUtil.toHex(UIUtil.getPanelBackground()) + ";}</style>";
  }
  updateLinkPane.setBorder(IdeBorderFactory.createEmptyBorder(0));
  updateLinkPane.setText(IdeBundle.message("updates.configure.label",css));
  updateLinkPane.setEditable(false);
  LabelTextReplacingUtil.replaceText(panel);
}
