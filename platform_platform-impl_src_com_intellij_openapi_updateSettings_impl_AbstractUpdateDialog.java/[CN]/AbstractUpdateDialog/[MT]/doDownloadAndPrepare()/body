{
  if (myUploadedPlugins != null) {
    UpdateChecker.saveDisabledToUpdatePlugins();
    final List<IdeaPluginDescriptor> pluginsForDownload=new ArrayList<IdeaPluginDescriptor>();
    Set<String> disabledToUpdatePlugins=UpdateChecker.getDisabledToUpdatePlugins();
    for (    Couple<IdeaPluginDescriptor> uploadedPlugin : myUploadedPlugins) {
      IdeaPluginDescriptor second=uploadedPlugin.getSecond();
      if (disabledToUpdatePlugins.contains(second.getPluginId().getIdString())) {
        continue;
      }
      pluginsForDownload.add(uploadedPlugin.getSecond());
    }
    if (pluginsForDownload.isEmpty()) {
      return false;
    }
    new Task.Backgroundable(null,IdeBundle.message("progress.download.plugins"),true,PluginManagerUISettings.getInstance()){
      @Override public void run(      @NotNull ProgressIndicator indicator){
        for (        IdeaPluginDescriptor pluginDescriptor : pluginsForDownload) {
          try {
            PluginDownloader downloader=PluginDownloader.createDownloader(pluginDescriptor);
            if (downloader.prepareToInstall(indicator)) {
              downloader.install(true);
            }
          }
 catch (          Exception e) {
            LOGGER.error(e);
          }
        }
        UIUtil.invokeLaterIfNeeded(new Runnable(){
          @Override public void run(){
            if (PluginManagerConfigurable.showRestartIDEADialog() == Messages.YES) {
              ApplicationManagerEx.getApplicationEx().restart(true);
            }
          }
        }
);
      }
    }
.queue();
  }
  return false;
}
