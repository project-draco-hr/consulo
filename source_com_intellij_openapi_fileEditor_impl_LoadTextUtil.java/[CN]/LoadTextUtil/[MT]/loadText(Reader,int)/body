{
  char[] buffer=ourSharedBuffer.length >= fileLength ? ourSharedBuffer : new char[fileLength];
  int offset=0;
  do {
    int read=reader.read(buffer,offset,buffer.length - offset);
    if (read < 0)     break;
    offset+=read;
    if (offset >= buffer.length) {
      char[] newBuffer=new char[buffer.length * 2];
      System.arraycopy(buffer,0,newBuffer,0,buffer.length);
      buffer=newBuffer;
    }
  }
 while (true);
  final int LF=1;
  final int CR=2;
  int line_separator=0;
  int dst=0;
  char prev=' ';
  for (int src=0; src < offset; src++) {
    char c=buffer[src];
switch (c) {
case '\r':
      buffer[dst++]='\n';
    line_separator=CR;
  break;
case '\n':
if (prev != '\r') {
  buffer[dst++]='\n';
  line_separator=LF;
}
 else line_separator=CR + LF;
break;
default :
buffer[dst++]=c;
break;
}
prev=c;
}
String detectedLineSeparator=null;
switch (line_separator) {
case CR:
detectedLineSeparator="\r";
break;
case LF:
detectedLineSeparator="\n";
break;
case CR + LF:
detectedLineSeparator="\r\n";
break;
}
char chars[]=new char[dst];
System.arraycopy(buffer,0,chars,0,chars.length);
return new Pair<CharSequence,String>(new CharArrayCharSequence(chars),detectedLineSeparator);
}
