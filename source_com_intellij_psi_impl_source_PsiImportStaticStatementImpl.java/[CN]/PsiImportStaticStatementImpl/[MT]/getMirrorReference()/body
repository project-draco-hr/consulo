{
  if (myOwner != null) {
    PsiJavaCodeReferenceElement refElement=getCachedMirrorReference();
    if (refElement == null) {
      CompositeElement treeElement=getTreeElement();
      if (treeElement != null) {
        refElement=(PsiJavaCodeReferenceElement)treeElement.findChildByRole(ChildRole.IMPORT_REFERENCE);
      }
 else {
        final FileElement holderElement=new DummyHolder(myManager,this).getTreeElement();
        final JavaParsingContext context=new JavaParsingContext(holderElement.getCharTable(),PsiUtil.getLanguageLevel(this));
        final String refText=getRepositoryManager().getFileView().getImportQualifiedName(getRepositoryId(),getIndex());
        if (refText == null)         return null;
        CompositeElement parsedRef=Parsing.parseJavaCodeReferenceText(myManager,refText.toCharArray(),context.getCharTable());
        refElement=(PsiJavaCodeReferenceElement)parsedRef;
        final boolean onDemand=isOnDemand();
        if (onDemand) {
          TreeUtil.addChildren(holderElement,(TreeElement)refElement);
          ((PsiJavaCodeReferenceElementImpl)refElement).setKindWhenDummy(PsiJavaCodeReferenceElementImpl.CLASS_FQ_NAME_KIND);
        }
 else {
          refElement=(PsiImportStaticReferenceElement)context.getImportsTextParsing().convertToImportStaticReference(parsedRef);
          TreeUtil.addChildren(holderElement,(TreeElement)refElement);
        }
      }
      setCachedMirrorReference(refElement);
    }
    return refElement;
  }
 else {
    return (PsiJavaCodeReferenceElement)calcTreeElement().findChildByRoleAsPsiElement(ChildRole.IMPORT_REFERENCE);
  }
}
