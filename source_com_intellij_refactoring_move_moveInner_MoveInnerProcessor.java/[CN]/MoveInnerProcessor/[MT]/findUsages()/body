{
  PsiManager manager=PsiManager.getInstance(myProject);
  PsiSearchHelper helper=manager.getSearchHelper();
  PsiReference[] innerClassRefs=helper.findReferences(myInnerClass,GlobalSearchScope.projectScope(myProject),false);
  ArrayList<UsageInfo> usageInfos=new ArrayList<UsageInfo>(innerClassRefs.length);
  for (  PsiReference innerClassRef : innerClassRefs) {
    PsiElement ref=innerClassRef.getElement();
    if (!PsiTreeUtil.isAncestor(myInnerClass,ref,true)) {
      usageInfos.add(new UsageInfo(ref));
    }
  }
  final String newQName;
  if (myTargetContainer instanceof PsiDirectory) {
    final PsiDirectory targetDirectory=((PsiDirectory)myTargetContainer);
    final PsiPackage aPackage=targetDirectory.getPackage();
    LOG.assertTrue(aPackage != null);
    newQName=aPackage.getQualifiedName() + "." + myNewClassName;
  }
 else   if (myTargetContainer instanceof PsiClass) {
    final String qName=((PsiClass)myTargetContainer).getQualifiedName();
    if (qName != null) {
      newQName=qName + "." + myNewClassName;
    }
 else {
      newQName=myNewClassName;
    }
  }
 else {
    newQName=myNewClassName;
  }
  MoveClassesOrPackagesUtil.findNonCodeUsages(mySearchInComments,mySearchInNonJavaFiles,myInnerClass,newQName,usageInfos);
  UsageInfo[] usages=usageInfos.toArray(new UsageInfo[usageInfos.size()]);
  return usages;
}
