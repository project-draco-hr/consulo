{
  PsiManager manager=PsiManager.getInstance(myProject);
  final PsiElementFactory factory=manager.getElementFactory();
  final RefactoringElementListener elementListener=getTransaction().getElementListener(myInnerClass);
  String newClassName=myNewClassName;
  try {
    PsiField field=null;
    if (myParameterNameOuterClass != null) {
      field=factory.createField(myFieldNameOuterClass,factory.createType(myOuterClass));
      field=(PsiField)myInnerClass.add(field);
      addFieldInitializationToConstructors(myInnerClass,field,myParameterNameOuterClass);
    }
    ChangeContextUtil.encodeContextInfo(myInnerClass,false);
    PsiClass newClass;
    if (myTargetContainer instanceof PsiDirectory) {
      newClass=((PsiDirectory)myTargetContainer).createClass(newClassName);
      PsiDocComment defaultDocComment=newClass.getDocComment();
      if (defaultDocComment != null) {
        defaultDocComment=(PsiDocComment)defaultDocComment.copy();
      }
      newClass=(PsiClass)newClass.replace(myInnerClass);
      if (defaultDocComment != null && myInnerClass.getDocComment() == null) {
        newClass.addBefore(defaultDocComment,newClass.getFirstChild());
      }
      newClass.getModifierList().setModifierProperty(PsiModifier.STATIC,false);
      newClass.getModifierList().setModifierProperty(PsiModifier.PRIVATE,false);
      newClass.getModifierList().setModifierProperty(PsiModifier.PROTECTED,false);
      if (myOuterClass.isInterface()) {
        newClass.getModifierList().setModifierProperty(PsiModifier.PUBLIC,true);
      }
    }
 else {
      newClass=(PsiClass)myTargetContainer.add(myInnerClass);
    }
    newClass.setName(newClassName);
    PsiReference[] refs=manager.getSearchHelper().findReferences(myInnerClass,new LocalSearchScope(newClass),true);
    for (int idx=0; idx < refs.length; idx++) {
      PsiElement ref=refs[idx].getElement();
      if (ref.getParent() instanceof PsiJavaCodeReferenceElement) {
        PsiJavaCodeReferenceElement parentRef=(PsiJavaCodeReferenceElement)ref.getParent();
        PsiElement parentRefElement=parentRef.resolve();
        if (parentRefElement instanceof PsiClass) {
          parentRef.getFirstChild().delete();
          continue;
        }
      }
      ref.getReference().bindToElement(newClass);
    }
    myInnerClass.delete();
    for (int idx=0; idx < usages.length; idx++) {
      UsageInfo usage=usages[idx];
      if (usage.isNonCodeUsage)       continue;
      PsiElement ref=usage.getElement();
      if (myParameterNameOuterClass != null) {
        PsiElement refParent=ref.getParent();
        if (refParent instanceof PsiNewExpression || refParent instanceof PsiAnonymousClass) {
          PsiNewExpression newExpr=refParent instanceof PsiNewExpression ? (PsiNewExpression)refParent : (PsiNewExpression)refParent.getParent();
          PsiExpressionList argList=newExpr.getArgumentList();
          if (argList != null) {
            if (newExpr.getQualifier() == null) {
              PsiThisExpression thisExpr;
              PsiClass parentClass=RefactoringUtil.getThisClass(newExpr);
              if (myOuterClass.equals(parentClass)) {
                thisExpr=RefactoringUtil.createThisExpression(manager,null);
              }
 else {
                thisExpr=RefactoringUtil.createThisExpression(manager,myOuterClass);
              }
              argList.addAfter(thisExpr,null);
            }
 else {
              argList.addAfter(newExpr.getQualifier(),null);
              newExpr.getQualifier().delete();
            }
          }
        }
      }
      ref.getReference().bindToElement(newClass);
    }
    if (field != null) {
      PsiExpression accessExpression=factory.createExpressionFromText(myFieldNameOuterClass,null);
      ChangeContextUtil.decodeContextInfo(newClass,myOuterClass,accessExpression);
    }
 else {
      ChangeContextUtil.decodeContextInfo(newClass,null,null);
    }
    PsiFile targetFile=newClass.getContainingFile();
    OpenFileDescriptor descriptor=new OpenFileDescriptor(myProject,targetFile.getVirtualFile(),newClass.getTextOffset());
    FileEditorManager.getInstance(myProject).openTextEditor(descriptor,true);
    if (myMoveCallback != null) {
      myMoveCallback.refactoringCompleted();
    }
    elementListener.elementMoved(newClass);
    myUsagesAfterRefactoring=usages;
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
