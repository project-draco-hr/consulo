{
  Map<String,NamedArgumentDescriptor> namedArguments=new HashMap<String,NamedArgumentDescriptor>(){
    @Override public NamedArgumentDescriptor put(    String key,    NamedArgumentDescriptor value){
      NamedArgumentDescriptor oldValue=super.put(key,value);
      if (oldValue != null) {
        super.put(key,oldValue);
      }
      return oldValue;
    }
  }
;
  GroovyResolveResult[] callVariants=call.getCallVariants(null);
  if (callVariants.length == 0) {
    for (    GroovyNamedArgumentProvider namedArgumentProvider : EP_NAME.getExtensions()) {
      namedArgumentProvider.getNamedArguments(call,null,null,argumentName,forCompletion,namedArguments);
    }
  }
 else {
    for (    GroovyResolveResult result : callVariants) {
      PsiElement element=result.getElement();
      if (element instanceof GrAccessorMethod)       continue;
      if (element instanceof PsiMethod) {
        PsiMethod method=(PsiMethod)element;
        PsiParameter[] parameters=method.getParameterList().getParameters();
        if (!method.isConstructor() && !(parameters.length > 0 && canBeMap(parameters[0])))         continue;
        for (        GroovyMethodInfo methodInfo : GroovyMethodInfo.getInfos(method)) {
          if (methodInfo.getNamedArguments() != null) {
            if (methodInfo.isApplicable(method)) {
              namedArguments.putAll(methodInfo.getNamedArguments());
            }
          }
 else           if (methodInfo.isNamedArgumentProviderDefined()) {
            if (methodInfo.isApplicable(method)) {
              methodInfo.getNamedArgProvider().getNamedArguments(call,element,result,argumentName,forCompletion,namedArguments);
            }
          }
        }
      }
      for (      GroovyNamedArgumentProvider namedArgumentProvider : EP_NAME.getExtensions()) {
        namedArgumentProvider.getNamedArguments(call,element,result,argumentName,forCompletion,namedArguments);
      }
    }
  }
  return namedArguments;
}
