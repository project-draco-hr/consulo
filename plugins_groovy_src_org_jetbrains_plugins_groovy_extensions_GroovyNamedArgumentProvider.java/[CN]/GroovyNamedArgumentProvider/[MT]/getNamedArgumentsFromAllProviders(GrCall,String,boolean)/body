{
  Map<String,ArgumentDescriptor> namedArguments=new HashMap<String,ArgumentDescriptor>(){
    @Override public ArgumentDescriptor put(    String key,    ArgumentDescriptor value){
      ArgumentDescriptor oldValue=super.put(key,value);
      if (oldValue != null) {
        super.put(key,oldValue);
      }
      return oldValue;
    }
  }
;
  GroovyResolveResult[] callVariants=call.getCallVariants(null);
  if (callVariants.length == 0) {
    for (    GroovyNamedArgumentProvider namedArgumentProvider : EP_NAME.getExtensions()) {
      namedArgumentProvider.getNamedArguments(call,null,argumentName,forCompletion,namedArguments);
    }
  }
 else {
    for (    GroovyResolveResult result : callVariants) {
      PsiElement element=result.getElement();
      if (element instanceof GrAccessorMethod)       continue;
      if (element instanceof PsiMethod) {
        PsiMethod method=(PsiMethod)element;
        PsiParameter[] parameters=method.getParameterList().getParameters();
        if (!method.isConstructor() && !(parameters.length > 0 && canBeMap(parameters[0])))         continue;
        collectVariantsFromSimpleDescriptors(namedArguments,call,method);
      }
      for (      GroovyNamedArgumentProvider namedArgumentProvider : EP_NAME.getExtensions()) {
        namedArgumentProvider.getNamedArguments(call,element,argumentName,forCompletion,namedArguments);
      }
    }
  }
  return namedArguments;
}
