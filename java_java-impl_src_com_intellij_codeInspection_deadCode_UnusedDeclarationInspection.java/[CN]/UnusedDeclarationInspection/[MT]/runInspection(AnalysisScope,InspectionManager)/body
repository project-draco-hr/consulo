{
  getRefManager().iterate(new RefJavaVisitor(){
    @Override public void visitElement(    final RefEntity refEntity){
      if (refEntity instanceof RefJavaElement) {
        final RefElementImpl refElement=(RefElementImpl)refEntity;
        if (!refElement.isSuspicious())         return;
        PsiFile file=refElement.getContainingFile();
        if (file == null)         return;
        final boolean isSuppressed=refElement.isSuppressed(getShortName());
        if (!getContext().isToCheckFile(file,UnusedDeclarationInspection.this) || isSuppressed) {
          if (isSuppressed || !scope.contains(file)) {
            getEntryPointsManager().addEntryPoint(refElement,false);
          }
          return;
        }
        refElement.accept(new RefJavaVisitor(){
          @Override public void visitElement(          final RefEntity elem){
            if (elem instanceof RefElement) {
              final RefElement element=(RefElement)elem;
              if (isEntryPoint(element)) {
                getEntryPointsManager().addEntryPoint(element,false);
              }
            }
          }
          @Override public void visitMethod(          RefMethod method){
            if (isAddMainsEnabled() && method.isAppMain()) {
              getEntryPointsManager().addEntryPoint(method,false);
            }
 else {
              super.visitMethod(method);
            }
          }
          @Override public void visitClass(          RefClass aClass){
            final PsiClass psiClass=aClass.getElement();
            if (psiClass == null)             return;
            if (isAddAppletEnabled() && aClass.isApplet() || isAddServletEnabled() && aClass.isServlet()) {
              getEntryPointsManager().addEntryPoint(aClass,false);
            }
 else             if (psiClass.isAnnotationType()) {
              getEntryPointsManager().addEntryPoint(aClass,false);
              final PsiMethod[] psiMethods=psiClass.getMethods();
              for (              PsiMethod psiMethod : psiMethods) {
                getEntryPointsManager().addEntryPoint(getRefManager().getReference(psiMethod),false);
              }
            }
 else             if (psiClass.isEnum()) {
              getEntryPointsManager().addEntryPoint(aClass,false);
            }
 else {
              super.visitClass(aClass);
            }
          }
        }
);
      }
    }
  }
);
  if (isAddNonJavaUsedEnabled()) {
    checkForReachables();
    ProgressManager.getInstance().runProcess(new Runnable(){
      public void run(){
        final RefFilter filter=new StrictUnreferencedFilter(UnusedDeclarationInspection.this);
        final PsiSearchHelper helper=PsiSearchHelper.SERVICE.getInstance(getRefManager().getProject());
        getRefManager().iterate(new RefJavaVisitor(){
          @Override public void visitElement(          final RefEntity refEntity){
            if (refEntity instanceof RefClass && filter.accepts((RefClass)refEntity)) {
              findExternalClassReferences((RefClass)refEntity);
            }
 else             if (refEntity instanceof RefMethod) {
              RefMethod refMethod=(RefMethod)refEntity;
              if (refMethod.isConstructor() && filter.accepts(refMethod)) {
                findExternalClassReferences(refMethod.getOwnerClass());
              }
            }
          }
          private void findExternalClassReferences(          final RefClass refElement){
            PsiClass psiClass=refElement.getElement();
            String qualifiedName=psiClass.getQualifiedName();
            if (qualifiedName != null) {
              helper.processUsagesInNonJavaFiles(qualifiedName,new PsiNonJavaFileReferenceProcessor(){
                public boolean process(                PsiFile file,                int startOffset,                int endOffset){
                  getEntryPointsManager().addEntryPoint(refElement,false);
                  return false;
                }
              }
,GlobalSearchScope.projectScope(getContext().getProject()));
            }
          }
        }
);
      }
    }
,null);
  }
  myProcessedSuspicious=new HashSet<RefElement>();
  myPhase=1;
}
