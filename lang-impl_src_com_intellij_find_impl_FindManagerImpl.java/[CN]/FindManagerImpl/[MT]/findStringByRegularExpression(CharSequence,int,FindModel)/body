{
  String toFind=model.getStringToFind();
  Pattern pattern;
  try {
    pattern=Pattern.compile(toFind,model.isCaseSensitive() ? Pattern.MULTILINE : Pattern.MULTILINE | Pattern.CASE_INSENSITIVE);
  }
 catch (  PatternSyntaxException e) {
    LOG.error(e);
    return null;
  }
  Matcher matcher=pattern.matcher(text);
  if (model.isForward()) {
    if (matcher.find(startOffset)) {
      if (matcher.end() <= text.length()) {
        return new FindResultImpl(matcher.start(),matcher.end());
      }
    }
    return NOT_FOUND_RESULT;
  }
 else {
    int start=-1;
    int end=-1;
    while (matcher.find() && matcher.end() < startOffset) {
      start=matcher.start();
      end=matcher.end();
    }
    if (start < 0) {
      return NOT_FOUND_RESULT;
    }
    return new FindResultImpl(start,end);
  }
}
