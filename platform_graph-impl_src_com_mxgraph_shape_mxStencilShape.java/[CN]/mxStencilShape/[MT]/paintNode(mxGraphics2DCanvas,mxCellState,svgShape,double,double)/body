{
  Shape associatedShape=shape.shape;
  boolean fill=false;
  boolean stroke=true;
  Color fillColor=null;
  Color strokeColor=null;
  Map<String,Object> style=shape.style;
  if (style != null) {
    String fillStyle=mxUtils.getString(style,CSSConstants.CSS_FILL_PROPERTY);
    String strokeStyle=mxUtils.getString(style,CSSConstants.CSS_STROKE_PROPERTY);
    if (strokeStyle != null && strokeStyle.equals(CSSConstants.CSS_NONE_VALUE)) {
      if (strokeStyle.equals(CSSConstants.CSS_NONE_VALUE)) {
        stroke=false;
      }
 else       if (strokeStyle.trim().startsWith("#")) {
        int hashIndex=strokeStyle.indexOf("#");
        strokeColor=mxUtils.parseColor(strokeStyle.substring(hashIndex + 1));
      }
    }
    if (fillStyle != null) {
      if (fillStyle.equals(CSSConstants.CSS_NONE_VALUE)) {
        fill=false;
      }
 else       if (fillStyle.trim().startsWith("#")) {
        int hashIndex=fillStyle.indexOf("#");
        fillColor=mxUtils.parseColor(fillStyle.substring(hashIndex + 1));
        fill=true;
      }
 else {
        fill=true;
      }
    }
  }
  if (associatedShape != null) {
    boolean wasScaled=false;
    if (widthRatio != 1 || heightRatio != 1) {
      transformShape(associatedShape,0.0,0.0,widthRatio,heightRatio);
      wasScaled=true;
    }
    if (fill && configureGraphics(canvas,state,true)) {
      if (fillColor != null) {
        canvas.getGraphics().setColor(fillColor);
      }
      canvas.getGraphics().fill(associatedShape);
    }
    if (stroke && configureGraphics(canvas,state,false)) {
      if (strokeColor != null) {
        canvas.getGraphics().setColor(strokeColor);
      }
      canvas.getGraphics().draw(associatedShape);
    }
    if (wasScaled) {
      transformShape(associatedShape,0.0,0.0,1.0 / widthRatio,1.0 / heightRatio);
    }
  }
  for (  svgShape subShape : shape.subShapes) {
    paintNode(canvas,state,subShape,widthRatio,heightRatio);
  }
}
