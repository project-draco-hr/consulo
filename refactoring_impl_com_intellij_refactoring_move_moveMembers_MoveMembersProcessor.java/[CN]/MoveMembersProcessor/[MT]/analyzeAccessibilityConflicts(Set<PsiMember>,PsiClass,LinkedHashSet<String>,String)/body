{
  if (VisibilityUtil.MINIMAL_VISIBLE.equals(newVisibility)) {
    newVisibility=PsiModifier.PUBLIC;
  }
  for (  PsiMember member : membersToMove) {
    checkUsedElements(member,member,membersToMove,targetClass,conflicts);
    PsiModifierList modifierList=(PsiModifierList)member.getModifierList().copy();
    if (newVisibility != null) {
      try {
        RefactoringUtil.setVisibility(modifierList,newVisibility);
      }
 catch (      IncorrectOperationException ex) {
      }
    }
    PsiManager manager=member.getManager();
    for (    PsiReference psiReference : ReferencesSearch.search(member).findAll()) {
      PsiElement ref=psiReference.getElement();
      if (!RefactoringHierarchyUtil.willBeInTargetClass(ref,membersToMove,targetClass,false)) {
        if (!manager.getResolveHelper().isAccessible(targetClass,targetClass.getModifierList(),ref,null,null)) {
          String message=RefactoringBundle.message("0.is.1.and.will.not.be.accessible.from.2.in.the.target.class",ConflictsUtil.getDescription(targetClass,true),VisibilityUtil.getVisibilityStringToDisplay(targetClass),ConflictsUtil.getDescription(ConflictsUtil.getContainer(ref),true));
          message=ConflictsUtil.capitalize(message);
          conflicts.add(message);
        }
 else         if (!manager.getResolveHelper().isAccessible(member,modifierList,ref,null,null)) {
          String message=RefactoringBundle.message("0.is.1.and.will.not.be.accessible.from.2.in.the.target.class",ConflictsUtil.getDescription(member,true),VisibilityUtil.getVisibilityStringToDisplay(member),ConflictsUtil.getDescription(ConflictsUtil.getContainer(ref),true));
          message=ConflictsUtil.capitalize(message);
          conflicts.add(message);
        }
      }
    }
  }
  return conflicts.toArray(new String[conflicts.size()]);
}
