{
  try {
    ArrayList<MyUsageInfo> otherUsages=new ArrayList<MyUsageInfo>();
    for (    UsageInfo usageInfo : usages) {
      MyUsageInfo usage=(MyUsageInfo)usageInfo;
      if (!usage.reference.isValid())       continue;
      if (usage.reference instanceof PsiReferenceExpression) {
        PsiReferenceExpression refExpr=(PsiReferenceExpression)usage.reference;
        PsiExpression qualifier=refExpr.getQualifierExpression();
        if (qualifier != null) {
          if (usage.qualifierClass != null) {
            changeQualifier(refExpr,usage.qualifierClass);
          }
 else {
            removeQualifier(refExpr);
          }
        }
 else {
          if (usage.qualifierClass != null) {
            changeQualifier(refExpr,usage.qualifierClass);
          }
        }
      }
 else {
        otherUsages.add(usage);
      }
    }
    for (    PsiMember member : myMembersToMove) {
      if (member instanceof PsiVariable) {
        ((PsiVariable)member).normalizeDeclaration();
      }
      final RefactoringElementListener elementListener=getTransaction().getElementListener(member);
      ChangeContextUtil.encodeContextInfo(member,true);
      final PsiElement memberCopy=member.copy();
      ArrayList<PsiReference> refsToBeRebind=new ArrayList<PsiReference>();
      for (Iterator<MyUsageInfo> iterator=otherUsages.iterator(); iterator.hasNext(); ) {
        MyUsageInfo info=iterator.next();
        if (member.equals(info.member)) {
          PsiReference ref=info.reference.getReference();
          if (ref != null) {
            refsToBeRebind.add(ref);
          }
          iterator.remove();
        }
      }
      member.delete();
      PsiMember newMember=(PsiMember)myTargetClass.add(memberCopy);
      fixVisibility(newMember,usages);
      for (      PsiReference reference : refsToBeRebind) {
        reference.bindToElement(newMember);
      }
      elementListener.elementMoved(newMember);
    }
    ChangeContextUtil.decodeContextInfo(myTargetClass,null,null);
    myMembersToMove.clear();
    if (myMoveCallback != null) {
      myMoveCallback.refactoringCompleted();
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
