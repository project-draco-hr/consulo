{
  if (scope instanceof PsiReferenceExpression) {
    PsiReferenceExpression refExpr=(PsiReferenceExpression)scope;
    PsiElement refElement=refExpr.resolve();
    if (refElement instanceof PsiMember) {
      if (!RefactoringHierarchyUtil.willBeInTargetClass(refElement,membersToMove,newContext,false)) {
        PsiExpression qualifier=refExpr.getQualifierExpression();
        PsiMember accessMember=(PsiMember)(qualifier != null ? PsiUtil.getAccessObjectMember(qualifier).getElement() : null);
        checkAccessibility(((PsiMember)refElement),newContext,accessMember,member,conflicts);
      }
    }
  }
 else   if (scope instanceof PsiNewExpression) {
    final PsiMethod refElement=((PsiNewExpression)scope).resolveConstructor();
    if (refElement != null) {
      if (!RefactoringHierarchyUtil.willBeInTargetClass(refElement,membersToMove,newContext,false)) {
        checkAccessibility(refElement,newContext,null,member,conflicts);
      }
    }
  }
 else   if (scope instanceof PsiJavaCodeReferenceElement) {
    PsiJavaCodeReferenceElement refExpr=(PsiJavaCodeReferenceElement)scope;
    PsiElement refElement=refExpr.resolve();
    if (refElement instanceof PsiMember) {
      if (!RefactoringHierarchyUtil.willBeInTargetClass(refElement,membersToMove,newContext,false)) {
        checkAccessibility(((PsiMember)refElement),newContext,null,member,conflicts);
      }
    }
  }
  PsiElement[] children=scope.getChildren();
  for (  PsiElement child : children) {
    if (!(child instanceof PsiWhiteSpace)) {
      checkUsedElements(member,child,membersToMove,newContext,conflicts);
    }
  }
}
