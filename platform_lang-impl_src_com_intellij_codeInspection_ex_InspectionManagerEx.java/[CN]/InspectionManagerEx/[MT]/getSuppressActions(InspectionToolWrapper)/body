{
  final InspectionProfileEntry tool=toolWrapper.getTool();
  if (tool instanceof CustomSuppressableInspectionTool) {
    return ((CustomSuppressableInspectionTool)tool).getSuppressActions(null);
  }
  final List<LocalQuickFix> actions=new ArrayList<LocalQuickFix>(Arrays.asList(tool.getBatchSuppressActions(null)));
  if (actions.isEmpty()) {
    final Language language=Language.findLanguageByID(toolWrapper.getLanguage());
    if (language != null) {
      final List<InspectionSuppressor> suppressors=LanguageInspectionSuppressors.INSTANCE.allForLanguage(language);
      for (      InspectionSuppressor suppressor : suppressors) {
        final SuppressQuickFix[] suppressActions=suppressor.getSuppressActions(null,tool.getShortName());
        Collections.addAll(actions,suppressActions);
      }
    }
  }
  return ContainerUtil.map2Array(actions,SuppressIntentionAction.class,new Function<LocalQuickFix,SuppressIntentionAction>(){
    @Override public SuppressIntentionAction fun(    final LocalQuickFix fix){
      return SuppressIntentionActionFromFix.convertBatchToSuppressIntentionAction((SuppressQuickFix)fix);
    }
  }
);
}
