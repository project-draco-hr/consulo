{
  return new SuppressIntentionAction(){
    @Override public void invoke(    @NotNull Project project,    Editor editor,    @NotNull PsiElement element) throws IncorrectOperationException {
      PsiElement container=fix instanceof AbstractBatchSuppressByNoInspectionCommentFix ? ((AbstractBatchSuppressByNoInspectionCommentFix)fix).getContainer(element) : null;
      boolean caretWasBeforeStatement=editor != null && container != null && editor.getCaretModel().getOffset() == container.getTextRange().getStartOffset();
      try {
        ProblemDescriptor descriptor=new ProblemDescriptorImpl(element,element,"",null,ProblemHighlightType.GENERIC_ERROR_OR_WARNING,false,null,false);
        fix.applyFix(project,descriptor);
      }
 catch (      IncorrectOperationException e) {
        if (!ApplicationManager.getApplication().isUnitTestMode() && editor != null) {
          Messages.showErrorDialog(editor.getComponent(),InspectionsBundle.message("suppress.inspection.annotation.syntax.error",e.getMessage()));
        }
 else {
          throw e;
        }
      }
      if (caretWasBeforeStatement) {
        editor.getCaretModel().moveToOffset(container.getTextRange().getStartOffset());
      }
    }
    @Override public boolean isAvailable(    @NotNull Project project,    Editor editor,    @NotNull PsiElement element){
      return fix.isAvailable(project,element);
    }
    @NotNull @Override public String getText(){
      return fix.getName();
    }
    @NotNull @Override public String getFamilyName(){
      return fix.getFamilyName();
    }
  }
;
}
