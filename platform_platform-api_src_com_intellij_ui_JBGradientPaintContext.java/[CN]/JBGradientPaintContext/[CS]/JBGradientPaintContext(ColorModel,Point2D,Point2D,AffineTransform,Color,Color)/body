{
  Point2D xvec=new Point2D.Double(1,0);
  Point2D yvec=new Point2D.Double(0,1);
  try {
    AffineTransform inverse=xform.createInverse();
    inverse.deltaTransform(xvec,xvec);
    inverse.deltaTransform(yvec,yvec);
  }
 catch (  NoninvertibleTransformException e) {
    xvec.setLocation(0,0);
    yvec.setLocation(0,0);
  }
  double udx=p2.getX() - p1.getX();
  double udy=p2.getY() - p1.getY();
  double ulenSq=udx * udx + udy * udy;
  if (ulenSq <= Double.MIN_VALUE) {
    myDx=0;
    myDy=0;
  }
 else {
    double dxx=(xvec.getX() * udx + xvec.getY() * udy) / ulenSq;
    double dyy=(yvec.getX() * udx + yvec.getY() * udy) / ulenSq;
    if (dxx < 0) {
      p1=p2;
      Color c=c1;
      c1=c2;
      c2=c;
      myDx=-dxx;
      myDy=-dyy;
    }
 else {
      myDx=dxx;
      myDy=dyy;
    }
  }
  Point2D dp1=xform.transform(p1,null);
  this.myX1=dp1.getX();
  this.myY1=dp1.getY();
  myRgb1=c1.getRGB();
  myRgb2=c2.getRGB();
  int a1=(myRgb1 >> 24) & 0xff;
  int r1=(myRgb1 >> 16) & 0xff;
  int g1=(myRgb1 >> 8) & 0xff;
  int b1=(myRgb1) & 0xff;
  int da=((myRgb2 >> 24) & 0xff) - a1;
  int dr=((myRgb2 >> 16) & 0xff) - r1;
  int dg=((myRgb2 >> 8) & 0xff) - g1;
  int db=((myRgb2) & 0xff) - b1;
  ColorModel m;
  if (a1 == 0xff && da == 0) {
    m=RGBMODEL;
    if (cm instanceof DirectColorModel) {
      DirectColorModel dcm=(DirectColorModel)cm;
      int tmp=dcm.getAlphaMask();
      if ((tmp == 0 || tmp == 0xff) && dcm.getRedMask() == 0xff && dcm.getGreenMask() == 0xff00 && dcm.getBlueMask() == 0xff0000) {
        m=BGRMODEL;
        tmp=r1;
        r1=b1;
        b1=tmp;
        tmp=dr;
        dr=db;
        db=tmp;
      }
    }
  }
 else {
    m=ColorModel.getRGBdefault();
  }
  model=m;
  for (int i=0; i < 256; i++) {
    double rel=i / 256.0f;
    double rValue=r1 + dr * rel;
    double gValue=g1 + dg * rel;
    double bValue=b1 + db * rel;
    DITHER_ARRAYS.get()[0][i]=DITHER_MATRIX[(int)(rValue * 256) % 256];
    DITHER_ARRAYS.get()[1][i]=DITHER_MATRIX[(int)(gValue * 256) % 256];
    DITHER_ARRAYS.get()[2][i]=DITHER_MATRIX[(int)(bValue * 256) % 256];
    RGB_ARRAYS.get()[0][i]=(int)rValue;
    RGB_ARRAYS.get()[1][i]=(int)gValue;
    RGB_ARRAYS.get()[2][i]=(int)bValue;
  }
}
