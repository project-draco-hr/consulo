{
  @NonNls String line=callback.getNextLine();
  if (line == null) {
    return false;
  }
  if (line.trim().length() == 0) {
    return true;
  }
  if (line.startsWith("[parsing ")) {
    Matcher matcher=PATH_PATTERN.matcher(line.substring("[parsing ".length()));
    matcher.matches();
    String path=matcher.group(1);
    callback.setProgressText(CompilerBundle.message("eclipse.compiler.parsing",path));
    callback.fileProcessed(path);
    return true;
  }
  if (line.startsWith("[reading ")) {
    callback.setProgressText(CompilerBundle.message("eclipse.compiler.reading"));
    return true;
  }
  if (line.startsWith("[analyzing ")) {
    Matcher matcher=PATH_PATTERN.matcher(line.substring("[analyzing ".length()));
    matcher.matches();
    String path=matcher.group(1);
    callback.setProgressText(CompilerBundle.message("eclipse.compiler.analyzing",path));
    return true;
  }
  if (line.startsWith("[completed ")) {
    return true;
  }
  if (line.startsWith("[writing ")) {
    Matcher matcher=PATH_PATTERN.matcher(line.substring("[writing ".length()));
    matcher.matches();
    String path=matcher.group(1);
    String absPath=FileUtil.toSystemDependentName(myOutputDir + '/' + path);
    callback.fileGenerated(new FileObject(new File(absPath)));
    return true;
  }
  if (COMPILED_PATTERN.matcher(line).matches() || GENERATED_PATTERN.matcher(line).matches()) {
    return true;
  }
  callback.message(CompilerMessageCategory.INFORMATION,line,null,-1,-1);
  return true;
}
