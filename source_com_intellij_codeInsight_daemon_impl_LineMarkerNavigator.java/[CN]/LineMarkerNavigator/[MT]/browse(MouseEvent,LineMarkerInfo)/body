{
  final PsiElement element=info.elementRef.get();
  if (element == null || !element.isValid())   return;
  if (element instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)element;
    if (info.type == LineMarkerInfo.OVERRIDING_METHOD) {
      PsiMethod[] superMethods=PsiSuperMethodUtil.findSuperMethods(method,false);
      if (superMethods.length == 0)       return;
      boolean showMethodNames=!PsiUtil.allMethodsHaveSameSignature(superMethods);
      openTargets(e,superMethods,"Choose Super Method of " + method.getName(),new MethodCellRenderer(showMethodNames));
    }
 else     if (info.type == LineMarkerInfo.OVERRIDEN_METHOD) {
      PsiManager manager=method.getManager();
      PsiSearchHelper helper=manager.getSearchHelper();
      Project project=manager.getProject();
      GlobalSearchScope scope=GlobalSearchScope.allScope(project);
      PsiMethod[] overridings=helper.findOverridingMethods(method,scope,true);
      if (overridings.length == 0)       return;
      String title=method.hasModifierProperty(PsiModifier.ABSTRACT) ? "Choose Implementation of " : "Choose Overriding Method of ";
      title+=method.getName();
      boolean showMethodNames=!PsiUtil.allMethodsHaveSameSignature(overridings);
      MethodCellRenderer renderer=new MethodCellRenderer(showMethodNames);
      Arrays.sort(overridings,renderer.getComparator());
      openTargets(e,overridings,title,renderer);
    }
 else {
      LOG.assertTrue(false);
    }
  }
 else   if (element instanceof PsiClass) {
    PsiClass aClass=(PsiClass)element;
    PsiManager manager=aClass.getManager();
    PsiSearchHelper helper=manager.getSearchHelper();
    if (info.type == LineMarkerInfo.SUBCLASSED_CLASS) {
      GlobalSearchScope scope=GlobalSearchScope.allScope(manager.getProject());
      PsiClass[] inheritors=helper.findInheritors(aClass,scope,true);
      if (inheritors.length == 0)       return;
      String title=aClass.isInterface() ? "Choose Implementation of " : "Choose Subclass of ";
      title+=aClass.getName();
      PsiClassListCellRenderer renderer=new PsiClassListCellRenderer();
      Arrays.sort(inheritors,renderer.getComparator());
      openTargets(e,inheritors,title,renderer);
    }
 else     if (info.type == LineMarkerInfo.BOUND_CLASS_OR_FIELD) {
      openFormFile(helper,aClass,null,manager);
    }
  }
 else   if (element instanceof PsiField) {
    PsiField field=(PsiField)element;
    PsiClass aClass=field.getContainingClass();
    PsiManager manager=aClass.getManager();
    PsiSearchHelper helper=manager.getSearchHelper();
    openFormFile(helper,aClass,field.getName(),manager);
  }
}
