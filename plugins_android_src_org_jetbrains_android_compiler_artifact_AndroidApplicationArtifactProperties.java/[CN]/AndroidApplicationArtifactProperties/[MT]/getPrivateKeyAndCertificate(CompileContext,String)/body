{
  final String keyStoreFilePath=myKeyStoreUrl != null ? VfsUtilCore.urlToPath(myKeyStoreUrl) : "";
  if (keyStoreFilePath.length() == 0) {
    context.addMessage(CompilerMessageCategory.ERROR,errorPrefix + "Key store file is not specified",null,-1,-1);
    return null;
  }
  if (myKeyStorePassword == null || myKeyStorePassword.length() == 0) {
    context.addMessage(CompilerMessageCategory.ERROR,errorPrefix + "Key store password is not specified",null,-1,-1);
    return null;
  }
  if (myKeyAlias == null || myKeyAlias.length() == 0) {
    context.addMessage(CompilerMessageCategory.ERROR,errorPrefix + "Key alias is not specified",null,-1,-1);
    return null;
  }
  if (myKeyPassword == null || myKeyPassword.length() == 0) {
    context.addMessage(CompilerMessageCategory.ERROR,errorPrefix + "Key password is not specified",null,-1,-1);
    return null;
  }
  final File keyStoreFile=new File(keyStoreFilePath);
  final String keystorePasswordStr=getPlainKeystorePassword();
  final char[] keystorePassword=keystorePasswordStr.toCharArray();
  final String keyPasswordStr=getPlainKeyPassword();
  final char[] keyPassword=keyPasswordStr.toCharArray();
  final KeyStore keyStore;
  InputStream is=null;
  try {
    is=new FileInputStream(keyStoreFile);
    keyStore=KeyStore.getInstance(KeyStore.getDefaultType());
    keyStore.load(is,keystorePassword);
    final KeyStore.PrivateKeyEntry entry=(KeyStore.PrivateKeyEntry)keyStore.getEntry(myKeyAlias,new KeyStore.PasswordProtection(keyPassword));
    if (entry == null) {
      context.addMessage(CompilerMessageCategory.ERROR,errorPrefix + AndroidBundle.message("android.extract.package.cannot.find.key.error",myKeyAlias),null,-1,-1);
      return null;
    }
    final PrivateKey privateKey=entry.getPrivateKey();
    final Certificate certificate=entry.getCertificate();
    if (privateKey == null || certificate == null) {
      context.addMessage(CompilerMessageCategory.ERROR,errorPrefix + AndroidBundle.message("android.extract.package.cannot.find.key.error",myKeyAlias),null,-1,-1);
      return null;
    }
    return Pair.create(privateKey,(X509Certificate)certificate);
  }
 catch (  FileNotFoundException e) {
    return AndroidCompileUtil.handleExceptionError(context,errorPrefix,e);
  }
catch (  KeyStoreException e) {
    return AndroidCompileUtil.handleExceptionError(context,errorPrefix,e);
  }
catch (  CertificateException e) {
    return AndroidCompileUtil.handleExceptionError(context,errorPrefix,e);
  }
catch (  NoSuchAlgorithmException e) {
    return AndroidCompileUtil.handleExceptionError(context,errorPrefix,e);
  }
catch (  IOException e) {
    return AndroidCompileUtil.handleExceptionError(context,errorPrefix,e);
  }
catch (  UnrecoverableEntryException e) {
    return AndroidCompileUtil.handleExceptionError(context,errorPrefix,e);
  }
 finally {
    if (is != null) {
      try {
        is.close();
      }
 catch (      IOException e) {
        LOG.info(e);
      }
    }
  }
}
