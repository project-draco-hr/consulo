{
  PsiReference[] refs=mySearchHelper.findReferences(myClass,GlobalSearchScope.projectScope(myProject),false);
  final ArrayList<UsageInfo> result=new ArrayList<UsageInfo>();
  detectTurnToSuperRefs(refs,result);
  final PsiPackage originalPackage=myClass.getContainingFile().getContainingDirectory().getPackage();
  if (Comparing.equal(myTargetDirectory.getPackage(),originalPackage)) {
    result.clear();
  }
  for (  final PsiReference ref : refs) {
    final PsiElement element=ref.getElement();
    if (!canTurnToSuper(element) && PsiTreeUtil.getParentOfType(element,PsiImportStatement.class) == null) {
      result.add(new BindToOldUsageInfo(element,ref,myClass));
    }
  }
  UsageInfo[] usageInfos=result.toArray(new UsageInfo[result.size()]);
  return UsageViewUtil.removeDuplicatedUsages(usageInfos);
}
