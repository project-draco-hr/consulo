{
  PsiBuilder.Marker marker=builder.mark();
  GroovyElementType result=AdditiveExpression.parse(builder);
  GroovyElementType shiftOrRange=isRangeOrShift(builder);
  if (!result.equals(WRONGWAY) && !shiftOrRange.equals(WRONGWAY)) {
    if (ParserUtils.getToken(builder,RANGES) || getCompositeSign(builder)) {
      ParserUtils.getToken(builder,mNLS);
      result=AdditiveExpression.parse(builder);
      if (result.equals(WRONGWAY)) {
        builder.error(GroovyBundle.message("expression.expected"));
      }
      PsiBuilder.Marker newMarker=marker.precede();
      marker.done(shiftOrRange);
      result=shiftOrRange;
      shiftOrRange=isRangeOrShift(builder);
      if (RANGES.contains(builder.getTokenType()) || getCompositeSign(builder)) {
        subParse(builder,newMarker,shiftOrRange);
      }
 else {
        newMarker.drop();
      }
    }
 else {
      marker.drop();
    }
  }
 else {
    marker.drop();
  }
  return result;
}
