{
  if (original instanceof PsiField) {
    PsiField field=(PsiField)original;
    if (field.hasModifierProperty(PsiModifier.FINAL)) {
      return PsiElement.EMPTY_ARRAY;
    }
    PsiMethod setMethod=PropertyUtil.generateSetterPrototype(field);
    PsiMethod existing=field.getContainingClass().findMethodBySignature(setMethod,false);
    if (existing != null) {
      return PsiElement.EMPTY_ARRAY;
    }
    return new PsiElement[]{setMethod};
  }
 else   if (original instanceof CmpField) {
    CmpField field=(CmpField)original;
    final PsiManager psiManager=aClass.getManager();
    final PsiElementFactory factory=psiManager.getElementFactory();
    CodeStyleManager codeStyleManager=CodeStyleManager.getInstance(psiManager.getProject());
    final PsiType objectType=PsiType.getJavaLangObject(psiManager,aClass.getResolveScope());
    final String methodName=PropertyUtil.suggestSetterName(field.getName());
    final PsiMethod[] methods=aClass.getMethods();
    for (    PsiMethod method : methods) {
      if (method.getName().equals(methodName) && method.getParameterList().getParameters().length == 1 && method.getReturnType() == PsiType.VOID) {
        return ArrayUtil.EMPTY_OBJECT_ARRAY;
      }
    }
    final CmpFieldTypeExpression expression=new CmpFieldTypeExpression(psiManager);
    String parameterName=codeStyleManager.propertyNameToVariableName(field.getName(),VariableKind.PARAMETER);
    final PsiMethod method=factory.createMethod(methodName,objectType);
    method.getModifierList().setModifierProperty(PsiModifier.ABSTRACT,true);
    method.getBody().delete();
    final PsiParameterList parameterList=method.getParameterList();
    final PsiParameter parameter=(PsiParameter)parameterList.add(factory.createParameter(parameterName,objectType));
    method.getReturnTypeElement().replace(factory.createTypeElement(PsiType.VOID));
    TemplateBuilder builder=new TemplateBuilder(method);
    builder.replaceElement(parameter.getTypeElement(),expression);
    TemplateGenerationInfo info=new TemplateGenerationInfo(builder.buildTemplate(),method);
    return new Object[]{info};
  }
  return ArrayUtil.EMPTY_OBJECT_ARRAY;
}
