{
  final GrClosureSignature signature;
  final PsiParameter[] parameters;
  final PsiElement element=resolveResult.getElement();
  final PsiSubstitutor substitutor=resolveResult.getSubstitutor();
  if (element instanceof PsiMethod) {
    signature=eraseArgs ? createSignatureWithErasedParameterTypes((PsiMethod)element) : createSignature((PsiMethod)element,substitutor);
    parameters=((PsiMethod)element).getParameterList().getParameters();
  }
 else   if (element instanceof GrClosableBlock) {
    signature=eraseArgs ? createSignatureWithErasedParameterTypes((GrClosableBlock)element) : createSignature(((GrClosableBlock)element));
    parameters=((GrClosableBlock)element).getAllParameters();
  }
 else {
    return null;
  }
  final ArgInfo<PsiElement>[] argInfos=mapParametersToArguments(signature,namedArgs,expressionArgs,closureArguments,context,partial,eraseArgs);
  if (argInfos == null) {
    return null;
  }
  final HashMap<GrExpression,Pair<PsiParameter,PsiType>> result=new HashMap<GrExpression,Pair<PsiParameter,PsiType>>();
  for (int i=0; i < argInfos.length; i++) {
    ArgInfo<PsiElement> info=argInfos[i];
    if (info == null)     continue;
    for (    PsiElement arg : info.args) {
      if (arg instanceof GrNamedArgument) {
        arg=((GrNamedArgument)arg).getExpression();
      }
      final GrExpression expression=(GrExpression)arg;
      PsiType type=parameters[i].getType();
      if (info.isMultiArg && type instanceof PsiArrayType) {
        type=((PsiArrayType)type).getComponentType();
      }
      result.put(expression,Pair.create(parameters[i],substitutor.substitute(type)));
    }
  }
  return result;
}
