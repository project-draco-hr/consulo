{
  if (language == null)   return;
  final ConcatenationAwareInjector injector=new ConcatenationAwareInjector(){
    @Override public void getLanguagesToInject(    @NotNull MultiHostRegistrar injectionPlacesRegistrar,    @NotNull PsiElement... operands){
      PsiElement operand=operands[0];
      if (!(operand instanceof PsiLiteralExpression))       return;
      if (!(operand.getParent() instanceof PsiExpressionList))       return;
      PsiExpressionList expressionList=(PsiExpressionList)operand.getParent();
      int i=ArrayUtil.indexOf(expressionList.getExpressions(),operand);
      if (!(operand.getParent().getParent() instanceof PsiMethodCallExpression))       return;
      PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)operand.getParent().getParent();
      PsiMethod method=methodCallExpression.resolveMethod();
      if (method == null)       return;
      PsiParameter[] parameters=method.getParameterList().getParameters();
      if (i >= parameters.length)       return;
      PsiParameter parameter=parameters[i];
      if (!paramName.equals(parameter.getName()))       return;
      TextRange textRange=textRangeToInject((PsiLanguageInjectionHost)operand);
      injectionPlacesRegistrar.startInjecting(language).addPlace(null,null,(PsiLanguageInjectionHost)operand,textRange).doneInjecting();
    }
  }
;
  JavaConcatenationInjectorManager.getInstance(project).registerConcatenationInjector(injector);
  Disposer.register(parent,new Disposable(){
    @Override public void dispose(){
      boolean b=JavaConcatenationInjectorManager.getInstance(project).unregisterConcatenationInjector(injector);
      assert b;
    }
  }
);
}
