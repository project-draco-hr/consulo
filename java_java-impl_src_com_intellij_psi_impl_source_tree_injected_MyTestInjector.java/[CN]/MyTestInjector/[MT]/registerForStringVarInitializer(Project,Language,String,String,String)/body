{
  ConcatenationAwareInjector injector=new ConcatenationAwareInjector(){
    public void getLanguagesToInject(    @NotNull MultiHostRegistrar injectionPlacesRegistrar,    @NotNull PsiElement... operands){
      PsiVariable variable=PsiTreeUtil.getParentOfType(operands[0],PsiVariable.class);
      if (variable == null)       return;
      if (!varName.equals(variable.getName()))       return;
      if (!(operands[0] instanceof PsiLiteralExpression))       return;
      boolean started=false;
      String prefixFromPrev="";
      for (int i=0; i < operands.length; i++) {
        PsiElement operand=operands[i];
        if (!(operand instanceof PsiLiteralExpression)) {
          continue;
        }
        Object value=((PsiLiteralExpression)operand).getValue();
        if (!(value instanceof String)) {
          prefixFromPrev+=value;
          continue;
        }
        TextRange textRange=textRangeToInject((PsiLanguageInjectionHost)operand);
        if (!started) {
          injectionPlacesRegistrar.startInjecting(language);
          started=true;
        }
        injectionPlacesRegistrar.addPlace(prefixFromPrev + (i == 0 ? "" : prefix == null ? "" : prefix),i == operands.length - 1 ? null : suffix,(PsiLanguageInjectionHost)operand,textRange);
        prefixFromPrev="";
      }
      if (started) {
        injectionPlacesRegistrar.doneInjecting();
      }
    }
  }
;
  JavaConcatenationInjectorManager.getInstance(project).registerConcatenationInjector(injector);
  return injector;
}
