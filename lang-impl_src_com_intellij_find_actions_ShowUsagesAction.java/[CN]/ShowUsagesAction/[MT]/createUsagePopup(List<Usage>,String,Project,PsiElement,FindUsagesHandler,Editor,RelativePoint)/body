{
  Usage[] arr=usages.toArray(new Usage[usages.size()]);
  UsageViewPresentation presentation=new UsageViewPresentation();
  presentation.setDetachedMode(true);
  final UsageViewSettings usageViewSettings=UsageViewSettings.getInstance();
  final UsageViewSettings save=new UsageViewSettings();
  save.loadState(usageViewSettings);
  usageViewSettings.GROUP_BY_FILE_STRUCTURE=false;
  usageViewSettings.GROUP_BY_MODULE=false;
  usageViewSettings.GROUP_BY_PACKAGE=false;
  usageViewSettings.GROUP_BY_USAGE_TYPE=false;
  final UsageViewImpl usageView=(UsageViewImpl)UsageViewManager.getInstance(project).createUsageView(UsageTarget.EMPTY_ARRAY,arr,presentation,null);
  Disposer.register(usageView,new Disposable(){
    public void dispose(){
      usageViewSettings.GROUP_BY_FILE_STRUCTURE=save.GROUP_BY_FILE_STRUCTURE;
      usageViewSettings.GROUP_BY_MODULE=save.GROUP_BY_MODULE;
      usageViewSettings.GROUP_BY_PACKAGE=save.GROUP_BY_PACKAGE;
      usageViewSettings.GROUP_BY_USAGE_TYPE=save.GROUP_BY_USAGE_TYPE;
    }
  }
);
  final GroupNode root=usageView.getRoot();
  final List<UsageNode> nodes=new ArrayList<UsageNode>();
  final Set<Usage> filteredUsages=new THashSet<Usage>();
  addUsageNodes(root,nodes,usageView,filteredUsages);
  if (nodes.isEmpty()) {
    if (usages.isEmpty()) {
      String text=UsageViewBundle.message("no.usages.found.in",searchScopePresentableName(element,handler));
      showHint(project,text,element,editor,popupPosition,handler);
      Disposer.dispose(usageView);
      return null;
    }
 else {
    }
  }
  if (nodes.size() == 1 && usages.size() == 1) {
    Usage usage=nodes.get(0).getUsage();
    navigateAndHint(usage,UsageViewBundle.message("show.usages.only.usage",searchScopePresentableName(element,handler)),project,element,handler,popupPosition);
    Disposer.dispose(usageView);
    return null;
  }
  if (nodes.size() == 1 && usages.size() >= 1) {
    Usage usage=nodes.get(0).getUsage();
    navigateAndHint(usage,UsageViewBundle.message("all.usages.are.in.this.line",usages.size(),searchScopePresentableName(element,handler)),project,element,handler,popupPosition);
    Disposer.dispose(usageView);
    return null;
  }
  Vector<Object> data=createListModel(nodes,usages);
  final JList list=new JList(data);
  list.setCellRenderer(new ShowUsagesListCellRenderer(usageView));
  final Runnable navigateRunnable=new Runnable(){
    public void run(){
      Object value=list.getSelectedValue();
      if (!(value instanceof UsageNode))       return;
      UsageNode node=(UsageNode)value;
      Usage usage=node.getUsage();
      navigateAndHint(usage,null,project,element,handler,popupPosition);
    }
  }
;
  ListSpeedSearch speedSearch=new ListSpeedSearch(list,SPEED_SEARCH_TEXT);
  speedSearch.setComparator(new SpeedSearchBase.SpeedSearchComparator(false));
  PopupChooserBuilder builder=new PopupChooserBuilder(list);
  if (title != null) {
    builder.setTitle(title + " " + UsageViewBundle.message("some.usages.found",usages.size()));
  }
  builder.setMovable(true).setResizable(true);
  builder.setItemChoosenCallback(navigateRunnable);
  final JBPopup[] popup=new JBPopup[1];
  ActionListener editSettings=new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      popup[0].cancel();
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          showDialogAndFindUsages(handler,project,element,popupPosition,editor);
        }
      }
);
    }
  }
;
  KeyboardShortcut shortcut=getSettingsShortcut();
  if (shortcut != null) {
    builder.registerKeyboardAction(shortcut.getFirstKeyStroke(),editSettings);
  }
  InplaceButton button=createSettingsButton(handler,project,element,popupPosition,editor,new Runnable(){
    public void run(){
      popup[0].cancel();
    }
  }
);
  builder.setCommandButton(button);
  DefaultActionGroup filters=new DefaultActionGroup();
  usageView.addFilteringActions(filters);
  ActionToolbar actionToolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.USAGE_VIEW_TOOLBAR,filters,true);
  actionToolbar.setReservePlaceAutoPopupIcon(false);
  final JComponent toolBar=actionToolbar.getComponent();
  toolBar.setOpaque(false);
  builder.setSettingButton(toolBar);
  popup[0]=builder.createPopup();
  Disposer.register(popup[0],usageView);
  for (  AnAction action : filters.getChildren(null)) {
    action.unregisterCustomShortcutSet(usageView.getComponent());
    action.registerCustomShortcutSet(action.getShortcutSet(),popup[0].getContent());
  }
  final MessageBusConnection messageBusConnection=project.getMessageBus().connect(usageView);
  messageBusConnection.subscribe(UsageFilteringRuleProvider.RULES_CHANGED,new Runnable(){
    public void run(){
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          nodes.clear();
          filteredUsages.clear();
          addUsageNodes(root,nodes,usageView,filteredUsages);
          Vector<Object> data=createListModel(nodes,usages);
          Dimension oldPreferred=list.getPreferredSize();
          list.setListData(data);
          list.setVisibleRowCount(data.size());
          Dimension newPreferred=list.getPreferredSize();
          JComponent content=popup[0].getContent();
          Window window=SwingUtilities.windowForComponent(content);
          Dimension d=new Dimension(window.getSize());
          d.setSize(d.width + newPreferred.width - oldPreferred.width,d.height + newPreferred.height - oldPreferred.height);
          window.setSize(d);
          window.validate();
          window.repaint();
        }
      }
);
    }
  }
);
  return popup[0];
}
