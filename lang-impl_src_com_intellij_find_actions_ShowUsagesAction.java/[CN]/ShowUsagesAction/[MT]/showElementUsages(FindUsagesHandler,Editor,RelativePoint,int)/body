{
  UsageViewPresentation presentation=new UsageViewPresentation();
  presentation.setDetachedMode(true);
  final UsageViewImpl usageView=(UsageViewImpl)UsageViewManager.getInstance(handler.getProject()).createUsageView(UsageTarget.EMPTY_ARRAY,Usage.EMPTY_ARRAY,presentation,null);
  final List<Usage> usages=new ArrayList<Usage>();
  final List<UsageNode> visibleNodes=new ArrayList<UsageNode>();
  Processor<Usage> collect=new Processor<Usage>(){
    public boolean process(    @NotNull Usage usage){
synchronized (usages) {
        if (visibleNodes.size() > maxUsages)         return false;
        UsageNode node=usageView.doAppendUsage(usage);
        if (node != null) {
          if (visibleNodes.size() == maxUsages) {
            usageView.removeUsage(usage);
            visibleNodes.add(UsageViewImpl.NULL_NODE);
            return false;
          }
          visibleNodes.add(node);
        }
        usages.add(usage);
      }
      return true;
    }
  }
;
  FindUsagesManager findUsagesManager=((FindManagerImpl)FindManager.getInstance(handler.getProject())).getFindUsagesManager();
  presentation=findUsagesManager.processUsages(handler,collect);
  if (presentation == null) {
    Disposer.dispose(usageView);
    return;
  }
  final String title=presentation.getTabText();
  JBPopup popup=createUsagePopup(usages,visibleNodes,title,handler,editor,popupPosition,maxUsages,usageView);
  if (popup != null) {
    popup.show(popupPosition);
  }
}
