{
  boolean hasMore=visibleNodes.remove(UsageViewImpl.NULL_NODE);
  final UsageViewSettings usageViewSettings=UsageViewSettings.getInstance();
  final UsageViewSettings save=new UsageViewSettings();
  save.loadState(usageViewSettings);
  usageViewSettings.GROUP_BY_FILE_STRUCTURE=false;
  usageViewSettings.GROUP_BY_MODULE=false;
  usageViewSettings.GROUP_BY_PACKAGE=false;
  usageViewSettings.GROUP_BY_USAGE_TYPE=false;
  final Project project=handler.getProject();
  Disposer.register(usageView,new Disposable(){
    public void dispose(){
      usageViewSettings.GROUP_BY_FILE_STRUCTURE=save.GROUP_BY_FILE_STRUCTURE;
      usageViewSettings.GROUP_BY_MODULE=save.GROUP_BY_MODULE;
      usageViewSettings.GROUP_BY_PACKAGE=save.GROUP_BY_PACKAGE;
      usageViewSettings.GROUP_BY_USAGE_TYPE=save.GROUP_BY_USAGE_TYPE;
    }
  }
);
  if (visibleNodes.isEmpty()) {
    if (usages.isEmpty()) {
      String text=UsageViewBundle.message("no.usages.found.in",searchScopePresentableName(handler));
      showHint(text,editor,popupPosition,handler,maxUsages);
      Disposer.dispose(usageView);
      return null;
    }
 else {
    }
  }
  if (visibleNodes.size() == 1 && usages.size() == 1) {
    Usage usage=visibleNodes.iterator().next().getUsage();
    navigateAndHint(usage,UsageViewBundle.message("show.usages.only.usage",searchScopePresentableName(handler)),handler,popupPosition,maxUsages);
    Disposer.dispose(usageView);
    return null;
  }
  if (visibleNodes.size() == 1 && usages.size() >= 1) {
    Usage usage=visibleNodes.iterator().next().getUsage();
    navigateAndHint(usage,UsageViewBundle.message("all.usages.are.in.this.line",usages.size(),searchScopePresentableName(handler)),handler,popupPosition,maxUsages);
    Disposer.dispose(usageView);
    return null;
  }
  if (hasMore) {
    usages.add(NullUsage.INSTANCE);
    visibleNodes.add(UsageViewImpl.NULL_NODE);
  }
  addUsageNodes(usageView.getRoot(),usageView,new ArrayList<UsageNode>());
  Vector<Object> data=createListModel(visibleNodes,usages);
  final JList list=new JList(data);
  list.setCellRenderer(new ShowUsagesListCellRenderer(usageView));
  final Runnable navigateRunnable=new Runnable(){
    public void run(){
      Object value=list.getSelectedValue();
      if (value instanceof UsageNode) {
        Usage usage=((UsageNode)value).getUsage();
        if (usage == NullUsage.INSTANCE) {
          appendMoreUsages(editor,popupPosition,handler,maxUsages);
          return;
        }
        navigateAndHint(usage,null,handler,popupPosition,maxUsages);
      }
    }
  }
;
  ListSpeedSearch speedSearch=new ListSpeedSearch(list,SPEED_SEARCH_TEXT);
  speedSearch.setComparator(new SpeedSearchBase.SpeedSearchComparator(false));
  PopupChooserBuilder builder=new PopupChooserBuilder(list);
  if (title != null) {
    String s;
    if (hasMore) {
      s="<html><body><b>Some</b> " + title + " "+ "<b>(Only "+ (visibleNodes.size() - 1)+ " usages shown)</b></body></html>";
    }
 else {
      s=title + " (" + usages.size()+ " usages found)";
    }
    builder.setTitle(s);
  }
  builder.setMovable(true).setResizable(true);
  builder.setItemChoosenCallback(navigateRunnable);
  final JBPopup[] popup=new JBPopup[1];
  ActionListener editSettings=new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      popup[0].cancel();
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          showDialogAndFindUsages(handler,popupPosition,editor,maxUsages);
        }
      }
);
    }
  }
;
  KeyboardShortcut shortcut=getSettingsShortcut();
  if (shortcut != null) {
    builder.registerKeyboardAction(shortcut.getFirstKeyStroke(),editSettings);
  }
  InplaceButton button=createSettingsButton(handler,popupPosition,editor,maxUsages,new Runnable(){
    public void run(){
      popup[0].cancel();
    }
  }
);
  builder.setCommandButton(button);
  DefaultActionGroup filters=new DefaultActionGroup();
  usageView.addFilteringActions(filters);
  ActionToolbar actionToolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.USAGE_VIEW_TOOLBAR,filters,true);
  actionToolbar.setReservePlaceAutoPopupIcon(false);
  final JComponent toolBar=actionToolbar.getComponent();
  toolBar.setOpaque(false);
  builder.setSettingButton(toolBar);
  popup[0]=builder.createPopup();
  Disposer.register(popup[0],usageView);
  for (  AnAction action : filters.getChildren(null)) {
    action.unregisterCustomShortcutSet(usageView.getComponent());
    action.registerCustomShortcutSet(action.getShortcutSet(),popup[0].getContent());
  }
  final MessageBusConnection messageBusConnection=project.getMessageBus().connect(usageView);
  messageBusConnection.subscribe(UsageFilteringRuleProvider.RULES_CHANGED,new Runnable(){
    public void run(){
      rebuildPopup(usageView,usages,list,popup[0]);
    }
  }
);
  return popup[0];
}
