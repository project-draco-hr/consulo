{
  final Vector<Object> data=createListModel(visibleNodes,usages);
  Collections.sort(data,USAGE_COMPARATOR);
  AbstractTableModel model=new AbstractTableModel(){
    public int getRowCount(){
      return data.size();
    }
    public int getColumnCount(){
      return data.get(0) instanceof UsageNode ? 3 : 1;
    }
    public Object getValueAt(    int rowIndex,    int columnIndex){
      return data.get(rowIndex);
    }
  }
;
  table.setModel(model);
  table.setRowHeight(Icons.CLASS_ICON.getIconHeight() + 2);
  table.setShowGrid(false);
  table.setShowVerticalLines(false);
  table.setShowHorizontalLines(false);
  table.setTableHeader(null);
  table.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
  ShowUsagesTableCellRenderer renderer=new ShowUsagesTableCellRenderer(usageView);
  for (int i=0; i < table.getColumnModel().getColumnCount(); i++) {
    TableColumn column=table.getColumnModel().getColumn(i);
    column.setCellRenderer(renderer);
  }
  table.setIntercellSpacing(new Dimension(0,0));
  int colNum=table.getColumnModel().getColumnCount();
  int totalWidth=0;
  for (int col=0; col < (colNum == 1 ? 0 : colNum); col++) {
    TableColumn column=table.getColumnModel().getColumn(col);
    int preferred=column.getPreferredWidth();
    int width=Math.max(preferred,calcMaxWidth(table,col));
    totalWidth+=width;
    column.setMinWidth(width);
    column.setMaxWidth(width);
    column.setWidth(width);
    column.setPreferredWidth(width);
  }
  if (colNum == 1) {
    int width=calcMaxWidth(table,colNum - 1);
    totalWidth+=width;
  }
  Dimension dimension=new Dimension(totalWidth,table.getPreferredSize().height);
  table.setMinimumSize(dimension);
  table.setSize(dimension);
  table.setPreferredScrollableViewportSize(new Dimension(Math.max(table.getPreferredScrollableViewportSize().width,totalWidth),table.getPreferredSize().height));
  return data;
}
