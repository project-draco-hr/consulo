{
  String s="<html><body><table border=0>";
  s+="<tr><td colspan=" + (Math.max(1,methodCandidates[0].getElement().getParameterList().getParameters().length) + 2) + ">Ambiguous method call. Both</td></tr>";
  for (int i=0; i < 2; i++) {
    final MethodCandidateInfo methodCandidate=methodCandidates[i];
    final PsiMethod method=methodCandidate.getElement();
    final PsiParameter[] parameters=method.getParameterList().getParameters();
    final PsiSubstitutor substitutor=methodCandidate.getSubstitutor();
    s+="<tr><td><b>" + method.getName() + "</b></td>";
    for (int j=0; j < parameters.length; j++) {
      PsiParameter parameter=parameters[j];
      final PsiType type=substitutor.substitute(parameter.getType());
      s+="<td><b>" + (j == 0 ? "(" : "") + XmlUtil.escapeString(type.getPresentableText())+ (j == parameters.length - 1 ? ")" : ",")+ "</b></td>";
    }
    if (parameters.length == 0) {
      s+="<td><b>()</b></td>";
    }
    PsiClass containingClass=method.getContainingClass();
    String name=containingClass == null ? method.getContainingFile().getName() : HighlightUtil.formatClass(containingClass,false);
    s+="<td>" + "in <b>" + name + "</b>";
    s+="&nbsp;" + (i == 0 ? "and" : "match.") + "</td>";
    s+="</tr>";
  }
  s+="</table></body></html>";
  return s;
}
