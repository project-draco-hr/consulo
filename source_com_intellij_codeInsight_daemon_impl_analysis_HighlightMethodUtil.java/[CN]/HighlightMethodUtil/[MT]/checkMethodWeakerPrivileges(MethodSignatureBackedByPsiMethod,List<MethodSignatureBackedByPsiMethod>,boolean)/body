{
  final PsiMethod method=methodSignature.getMethod();
  final PsiModifierList modifierList=method.getModifierList();
  if (modifierList.hasModifierProperty(PsiModifier.PUBLIC))   return null;
  final int accessLevel=PsiUtil.getAccessLevel(modifierList);
  final String accessModifier=PsiUtil.getAccessModifier(accessLevel);
  for (int i=0; i < superMethodSignatures.size(); i++) {
    final MethodSignatureBackedByPsiMethod superMethodSignature=superMethodSignatures.get(i);
    PsiMethod superMethod=superMethodSignature.getMethod();
    final int superAccessLevel=PsiUtil.getAccessLevel(superMethod.getModifierList());
    if (accessLevel < superAccessLevel) {
      String message=MessageFormat.format("{0}; attempting to assign weaker access privileges (''{1}''); was ''{2}''",new Object[]{createClashMethodMessage(method,superMethod,true),accessModifier,PsiUtil.getAccessModifier(superAccessLevel)});
      TextRange textRange;
      if (includeRealPositionInfo) {
        if (modifierList.hasModifierProperty(PsiModifier.PACKAGE_LOCAL)) {
          textRange=method.getNameIdentifier().getTextRange();
        }
 else {
          PsiElement keyword=PsiUtil.findModifierInList(modifierList,accessModifier);
          textRange=keyword.getTextRange();
        }
      }
 else {
        textRange=new TextRange(0,0);
      }
      HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,textRange,message);
      QuickFixAction.registerQuickFixAction(highlightInfo,new ModifierFix(method,PsiUtil.getAccessModifier(superAccessLevel),true));
      return highlightInfo;
    }
  }
  return null;
}
