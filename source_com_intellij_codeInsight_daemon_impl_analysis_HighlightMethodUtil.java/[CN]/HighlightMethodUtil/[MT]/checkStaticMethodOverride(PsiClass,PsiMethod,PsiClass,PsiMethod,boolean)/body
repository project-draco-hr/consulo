{
  if (superMethod == null)   return null;
  final PsiManager manager=superMethod.getManager();
  final PsiModifierList superModifierList=superMethod.getModifierList();
  final PsiModifierList modifierList=method.getModifierList();
  if (superModifierList.hasModifierProperty(PsiModifier.PRIVATE))   return null;
  if (superModifierList.hasModifierProperty(PsiModifier.PACKAGE_LOCAL) && !manager.arePackagesTheSame(aClass,superClass)) {
    return null;
  }
  final boolean isMethodStatic=modifierList.hasModifierProperty(PsiModifier.STATIC);
  final boolean isSuperMethodStatic=superModifierList.hasModifierProperty(PsiModifier.STATIC);
  if (isMethodStatic != isSuperMethodStatic) {
    TextRange textRange=includeRealPositionInfo ? HighlightUtil.getMethodDeclarationTextRange(method) : new TextRange(0,0);
    String message=MessageFormat.format("{0} method ''{1}'' in ''{2}'' cannot override {3} method ''{4}'' in ''{5}''",new Object[]{isMethodStatic ? "static" : "instance",HighlightUtil.formatMethod(method),HighlightUtil.formatClass(aClass),isSuperMethodStatic ? "static" : "instance",HighlightUtil.formatMethod(superMethod),HighlightUtil.formatClass(superClass)});
    final HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,textRange,message);
    if (!isSuperMethodStatic || HighlightUtil.getIncompatibleModifier(PsiModifier.STATIC,modifierList) == null) {
      QuickFixAction.registerQuickFixAction(highlightInfo,new ModifierFix(method,PsiModifier.STATIC,isSuperMethodStatic));
    }
    if (manager.isInProject(superMethod) && (!isMethodStatic || HighlightUtil.getIncompatibleModifier(PsiModifier.STATIC,superModifierList) == null)) {
      QuickFixAction.registerQuickFixAction(highlightInfo,new ModifierFix(superMethod,PsiModifier.STATIC,isMethodStatic,true));
    }
    return highlightInfo;
  }
  return null;
}
