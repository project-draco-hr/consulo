{
  final PsiManager manager=contextClass.getManager();
  PsiResolveHelper helper=manager.getResolveHelper();
  NextMethod:   for (int i=sameSignatureMethods.size() - 1; i >= 0; i--) {
    final MethodSignatureBackedByPsiMethod signature1=sameSignatureMethods.get(i);
    PsiMethod method1=signature1.getMethod();
    final PsiClass class1=method1.getContainingClass();
    if (manager.areElementsEquivalent(class1,contextClass) || !helper.isAccessible(method1,contextClass,null)) {
      sameSignatureMethods.remove(i);
      continue;
    }
    for (int j=0; j < sameSignatureMethods.size(); j++) {
      if (i != j) {
        final MethodSignatureBackedByPsiMethod signature2=sameSignatureMethods.get(j);
        final PsiClass class2=signature2.getMethod().getContainingClass();
        if (InheritanceUtil.isInheritorOrSelf(class2,class1,true) && (!manager.areElementsEquivalent(class2,contextClass) || !contextClass.isInterface()) && (!"java.lang.Object".equals(class1.getQualifiedName()) || !class2.isInterface())) {
          sameSignatureMethods.remove(i);
          continue NextMethod;
        }
      }
    }
  }
}
