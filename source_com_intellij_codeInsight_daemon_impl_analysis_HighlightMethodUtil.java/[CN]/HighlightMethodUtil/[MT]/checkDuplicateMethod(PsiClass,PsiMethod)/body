{
  if (aClass == null)   return null;
  MethodSignatureUtil.MethodSignatureToMethods allMethods=MethodSignatureUtil.getOverrideEquivalentMethods(aClass);
  MethodSignature methodSignature=method.getSignature(PsiSubstitutor.EMPTY);
  List<MethodSignatureBackedByPsiMethod> overrideEquivalentMethods=allMethods.get(methodSignature);
  int methodCount=0;
  if (overrideEquivalentMethods != null) {
    for (    MethodSignatureBackedByPsiMethod otherSignature : overrideEquivalentMethods) {
      PsiMethod psiMethod=otherSignature.getMethod();
      if (aClass.getManager().areElementsEquivalent(aClass,psiMethod.getContainingClass()) && otherSignature.equals(methodSignature)) {
        if (psiMethod.isConstructor() == method.isConstructor()) {
          methodCount++;
          if (methodCount > 1)           break;
        }
      }
    }
  }
  if (methodCount == 1 && aClass.isEnum() && GenericsHighlightUtil.isEnumSyntheticMethod(methodSignature,aClass.getProject())) {
    methodCount=2;
  }
  if (methodCount > 1) {
    String message=MessageFormat.format("''{0}'' is already defined in ''{1}''",new Object[]{HighlightUtil.formatMethod(method),HighlightUtil.formatClass(aClass)});
    TextRange textRange=HighlightUtil.getMethodDeclarationTextRange(method);
    return HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,textRange,message);
  }
  return null;
}
