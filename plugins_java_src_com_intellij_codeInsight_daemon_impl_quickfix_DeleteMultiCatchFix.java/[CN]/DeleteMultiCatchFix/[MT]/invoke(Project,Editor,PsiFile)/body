{
  if (!FileModificationService.getInstance().prepareFileForWrite(myTypeElement.getContainingFile()))   return;
  final PsiElement parentType=myTypeElement.getParent();
  if (!(parentType instanceof PsiTypeElement))   return;
  final PsiElement first;
  final PsiElement last;
  final PsiElement right=PsiTreeUtil.skipSiblingsForward(myTypeElement,PsiWhiteSpace.class,PsiComment.class);
  if (right instanceof PsiJavaToken && ((PsiJavaToken)right).getTokenType() == JavaTokenType.OR) {
    first=myTypeElement;
    last=right;
  }
 else   if (right == null) {
    final PsiElement left=PsiTreeUtil.skipSiblingsBackward(myTypeElement,PsiWhiteSpace.class,PsiComment.class);
    if (!(left instanceof PsiJavaToken))     return;
    final IElementType leftType=((PsiJavaToken)left).getTokenType();
    if (leftType != JavaTokenType.OR)     return;
    first=left;
    last=myTypeElement;
  }
 else {
    return;
  }
  parentType.deleteChildRange(first,last);
  final List<PsiTypeElement> typeElements=PsiTreeUtil.getChildrenOfTypeAsList(parentType,PsiTypeElement.class);
  if (typeElements.size() == 1) {
    final PsiElement parameter=parentType.getParent();
    parameter.addRangeAfter(parentType.getFirstChild(),parentType.getLastChild(),parentType);
    parentType.delete();
  }
}
