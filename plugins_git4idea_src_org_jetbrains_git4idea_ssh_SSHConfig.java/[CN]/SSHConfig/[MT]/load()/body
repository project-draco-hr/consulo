{
  SSHConfig rc=new SSHConfig();
  File configFile=new File(USER_HOME + File.separatorChar + ".ssh","config");
  if (!configFile.exists()) {
    return rc;
  }
  BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(configFile),"ISO-8859-1"));
  try {
    Host host=null;
    String line;
    while ((line=in.readLine()) != null) {
      line=line.trim();
      if (line.length() == 0 || line.startsWith("#")) {
        continue;
      }
      final String[] parts=line.split("[ \t]*[= \t]",2);
      final String keyword=parts[0];
      final String arg=unqouteIfNeeded(parts[1]);
      if ("Host".equalsIgnoreCase(keyword)) {
        HostEntry entry=new HostEntry(arg);
        rc.myEntries.add(entry);
        host=entry.myHost;
        continue;
      }
      if (host == null) {
        continue;
      }
      if ("BatchMode".equalsIgnoreCase(keyword)) {
        host.myBatchMode=parseBoolean(arg);
      }
 else       if ("HostKeyAlgorithms".equalsIgnoreCase(keyword)) {
        host.myHostKeyAlgorithms=Collections.unmodifiableList(parseList(arg));
      }
 else       if ("HostKeyAlias".equalsIgnoreCase(keyword)) {
        host.myHostKeyAlias=arg;
      }
 else       if ("HostName".equalsIgnoreCase(keyword)) {
        host.myHostName=arg;
      }
 else       if ("IdentityFile".equalsIgnoreCase(keyword)) {
        host.myIdentityFile=arg;
      }
 else       if ("NumberOfPasswordPrompts".equalsIgnoreCase(keyword)) {
        host.myNumberOfPasswordPrompts=parseInt(arg);
      }
 else       if ("PasswordAuthentication".equalsIgnoreCase(keyword)) {
        host.myPasswordAuthentication=parseBoolean(arg);
      }
 else       if ("Port".equalsIgnoreCase(keyword)) {
        host.myPort=parseInt(arg);
      }
 else       if ("PreferredAuthentications".equalsIgnoreCase(keyword)) {
        final LinkedList<String> list=parseList(arg);
        list.retainAll(ALLOWED_METHODS);
        if (!list.isEmpty()) {
          host.myPreferredMethods=Collections.unmodifiableList(list);
        }
      }
 else       if ("PubkeyAuthentication".equalsIgnoreCase(keyword)) {
        host.myPubkeyAuthentication=parseBoolean(arg);
      }
 else       if ("User".equalsIgnoreCase(keyword)) {
        host.myUser=arg;
      }
    }
  }
  finally {
    in.close();
  }
  return rc;
}
