{
  myBreakpoint=breakpoint;
  myShowAllOptions=showAllOptions;
  XBreakpointType<B,?> breakpointType=XBreakpointUtil.getType(breakpoint);
  mySuspendPolicyPanel.init(project,breakpointManager,breakpoint);
  mySuspendPolicyPanel.setDelegate(this);
  mySubPanels.add(mySuspendPolicyPanel);
  myMasterBreakpointPanel.init(project,breakpointManager,breakpoint);
  mySubPanels.add(myMasterBreakpointPanel);
  XDebuggerEditorsProvider debuggerEditorsProvider=breakpointType.getEditorsProvider(breakpoint,project);
  myActionsPanel.init(project,breakpointManager,breakpoint,debuggerEditorsProvider);
  mySubPanels.add(myActionsPanel);
  myCustomPanels=new ArrayList<XBreakpointCustomPropertiesPanel<B>>();
  if (debuggerEditorsProvider != null) {
    myConditionEnabledCheckbox=new JBCheckBox(XDebuggerBundle.message("xbreakpoints.condition.checkbox"));
    JBLabel conditionEnabledLabel=new JBLabel(XDebuggerBundle.message("xbreakpoints.condition.checkbox"));
    conditionEnabledLabel.setBorder(UIUtil.getTextAlignBorder(myConditionEnabledCheckbox));
    myConditionEnabledPanel.add(myConditionEnabledCheckbox,CONDITION_ENABLED_CHECKBOX);
    myConditionEnabledPanel.add(conditionEnabledLabel,CONDITION_ENABLED_LABEL);
    myConditionComboBox=new XDebuggerExpressionComboBox(project,debuggerEditorsProvider,CONDITION_HISTORY_ID,myBreakpoint.getSourcePosition());
    JComponent conditionComponent=myConditionComboBox.getComponent();
    myConditionExpressionPanel.add(conditionComponent,BorderLayout.CENTER);
    myConditionEnabledCheckbox.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        onCheckboxChanged();
      }
    }
);
    DebuggerUIUtil.focusEditorOnCheck(myConditionEnabledCheckbox,myConditionComboBox.getEditorComponent());
  }
 else {
    myConditionPanel.setVisible(false);
  }
  myShowMoreOptions=false;
  for (  XBreakpointPropertiesSubPanel<B> panel : mySubPanels) {
    if (panel.lightVariant(showAllOptions)) {
      myShowMoreOptions=true;
    }
  }
  XBreakpointCustomPropertiesPanel<B> customPropertiesPanel=breakpointType.createCustomPropertiesPanel();
  if (customPropertiesPanel != null) {
    myCustomPropertiesPanelWrapper.add(customPropertiesPanel.getComponent(),BorderLayout.CENTER);
    myCustomPanels.add(customPropertiesPanel);
  }
  XBreakpointCustomPropertiesPanel<B> customConditionPanel=breakpointType.createCustomConditionsPanel();
  if (customConditionPanel != null) {
    myCustomConditionsPanelWrapper.add(customConditionPanel.getComponent(),BorderLayout.CENTER);
    myCustomPanels.add(customConditionPanel);
  }
  XBreakpointCustomPropertiesPanel<B> customRightConditionPanel=breakpointType.createCustomRightPropertiesPanel(project);
  if (customRightConditionPanel != null && (showAllOptions || customRightConditionPanel.isVisibleOnPopup(breakpoint))) {
    myCustomRightPropertiesPanelWrapper.add(customRightConditionPanel.getComponent(),BorderLayout.CENTER);
    myCustomPanels.add(customRightConditionPanel);
  }
 else {
    myCustomRightPropertiesPanelWrapper.getParent().remove(myCustomRightPropertiesPanelWrapper);
  }
  XBreakpointCustomPropertiesPanel<B> customTopPropertiesPanel=breakpointType.createCustomTopPropertiesPanel(project);
  if (customTopPropertiesPanel != null) {
    myCustomTopPropertiesPanelWrapper.add(customTopPropertiesPanel.getComponent(),BorderLayout.CENTER);
    myCustomPanels.add(customTopPropertiesPanel);
  }
  myMainPanel.addFocusListener(new FocusAdapter(){
    @Override public void focusGained(    FocusEvent event){
      if (myConditionComboBox != null) {
        IdeFocusManager.findInstance().requestFocus(myConditionComboBox.getEditorComponent(),false);
      }
    }
  }
);
  myEnabledCheckbox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent event){
      myBreakpoint.setEnabled(myEnabledCheckbox.isSelected());
    }
  }
);
}
