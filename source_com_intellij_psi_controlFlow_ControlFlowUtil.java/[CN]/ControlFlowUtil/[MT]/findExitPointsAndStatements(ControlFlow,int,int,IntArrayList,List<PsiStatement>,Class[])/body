{
  if (end == start) {
    exitPoints.add(end);
    return;
  }
  InstructionClientVisitor visitor=new InstructionClientVisitor(){
    @Override public void visitThrowToInstruction(    ThrowToInstruction instruction,    int offset,    int nextOffset){
      processGotoStatement(flow,offset,classesFilter,exitStatements);
    }
    @Override public void visitBranchingInstruction(    BranchingInstruction instruction,    int offset,    int nextOffset){
      processGoto(flow,start,end,exitPoints,exitStatements,offset,instruction.offset,null,classesFilter);
    }
    @Override public void visitReturnInstruction(    ReturnInstruction instruction,    int offset,    int nextOffset){
    }
    @Override public void visitCallInstruction(    CallInstruction instruction,    int offset,    int nextOffset){
    }
    @Override public void visitConditionalThrowToInstruction(    ConditionalThrowToInstruction instruction,    int offset,    int nextOffset){
      visitInstruction(instruction,offset,nextOffset);
    }
    @Override public void visitInstruction(    Instruction instruction,    int offset,    int nextOffset){
      if (offset >= end - 1) {
        int exitOffset=end;
        exitOffset=promoteThroughGotoChain(flow,exitOffset);
        if (!exitPoints.contains(exitOffset)) {
          exitPoints.add(exitOffset);
        }
      }
    }
    public Object getResult(){
      return null;
    }
  }
;
  depthFirstSearch(flow,visitor,start,end);
}
