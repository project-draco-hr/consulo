{
class MyVisitor extends InstructionClientVisitor<Integer> {
    TIntHashSet[] exitPoints=new TIntHashSet[flow.getSize()];
    public void visitInstruction(    Instruction instruction,    int offset,    int nextOffset){
      if (nextOffset > flow.getSize())       nextOffset=flow.getSize();
      if (exitPoints[offset] == null) {
        exitPoints[offset]=new TIntHashSet();
      }
      if (isLeaf(nextOffset)) {
        exitPoints[offset].add(offset);
      }
 else {
        exitPoints[offset].addAll(exitPoints[nextOffset].toArray());
      }
    }
    public Integer getResult(){
      int minOffset=flow.getSize();
      int maxExitPoints=0;
      nextOffset:       for (int i=sourceOffset; i < exitPoints.length; i++) {
        TIntHashSet exitPointSet=exitPoints[i];
        final int size=exitPointSet == null ? 0 : exitPointSet.size();
        if (size > maxExitPoints) {
          for (int j=0; j < references.size(); j++) {
            PsiElement element=(PsiElement)references.get(j);
            final PsiElement statement=PsiUtil.getEnclosingStatement(element);
            if (statement == null)             continue;
            final int endOffset=flow.getEndOffset(statement);
            if (endOffset == -1)             continue;
            if (i != endOffset && !isInstructionReachable(flow,i,endOffset))             continue nextOffset;
          }
          minOffset=i;
          maxExitPoints=size;
        }
      }
      return new Integer(minOffset);
    }
  }
  MyVisitor visitor=new MyVisitor();
  depthFirstSearch(flow,visitor);
  return visitor.getResult().intValue();
}
