{
class MyVisitor extends InstructionClientVisitor<Boolean> {
    boolean[] maybeUnassigned=new boolean[flow.getSize() + 1];
{
      maybeUnassigned[maybeUnassigned.length - 1]=true;
    }
    @Override public void visitWriteVariableInstruction(    WriteVariableInstruction instruction,    int offset,    int nextOffset){
      if (instruction.variable == variable) {
        maybeUnassigned[offset]=false;
      }
 else {
        visitInstruction(instruction,offset,nextOffset);
      }
    }
    @Override public void visitConditionalThrowToInstruction(    ConditionalThrowToInstruction instruction,    int offset,    int nextOffset){
      if (nextOffset > flow.getSize())       nextOffset=flow.getSize();
      boolean unassigned=offset == flow.getSize() - 1 || !isLeaf(nextOffset) && maybeUnassigned[nextOffset];
      maybeUnassigned[offset]|=unassigned;
    }
    @Override public void visitCallInstruction(    CallInstruction instruction,    int offset,    int nextOffset){
      visitInstruction(instruction,offset,nextOffset);
      for (int i=instruction.procBegin; i < instruction.procEnd + 3; i++) {
        maybeUnassigned[i]=false;
      }
    }
    @Override public void visitThrowToInstruction(    ThrowToInstruction instruction,    int offset,    int nextOffset){
      if (nextOffset > flow.getSize())       nextOffset=flow.getSize();
      boolean unassigned=!isLeaf(nextOffset) && maybeUnassigned[nextOffset];
      maybeUnassigned[offset]|=unassigned;
    }
    @Override public void visitInstruction(    Instruction instruction,    int offset,    int nextOffset){
      if (nextOffset > flow.getSize())       nextOffset=flow.getSize();
      boolean unassigned=isLeaf(nextOffset) || maybeUnassigned[nextOffset];
      maybeUnassigned[offset]|=unassigned;
    }
    public Boolean getResult(){
      return !maybeUnassigned[0];
    }
  }
  if (flow.getSize() == 0)   return false;
  MyVisitor visitor=new MyVisitor();
  depthFirstSearch(flow,visitor);
  return visitor.getResult().booleanValue();
}
