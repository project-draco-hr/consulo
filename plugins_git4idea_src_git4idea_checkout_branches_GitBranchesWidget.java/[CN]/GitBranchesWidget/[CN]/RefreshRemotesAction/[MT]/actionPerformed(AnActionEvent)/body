{
  final String title="Refreshing remotes";
  ProgressManager.getInstance().run(new Task.Backgroundable(myProject,title,false){
    @Override public void run(    @NotNull ProgressIndicator indicator){
      final ArrayList<VcsException> exceptions=new ArrayList<VcsException>();
      try {
        for (        VirtualFile root : GitUtil.getGitRoots(myProject,GitVcs.getInstance(myProject))) {
          GitLineHandler h=new GitLineHandler(myProject,root,GitCommand.FETCH);
          h.addParameters("--all","-v");
          final Collection<VcsException> e=GitHandlerUtil.doSynchronouslyWithExceptions(h,indicator,"Fetching all for " + VcsFileUtil.relativePath(myProject.getBaseDir(),root));
          exceptions.addAll(e);
        }
      }
 catch (      VcsException e1) {
        exceptions.add(e1);
      }
      UIUtil.invokeLaterIfNeeded(new Runnable(){
        @Override public void run(){
          if (!exceptions.isEmpty()) {
            GitUIUtil.showTabErrors(myProject,title,exceptions);
            ToolWindowManager.getInstance(myProject).notifyByBalloon(ChangesViewContentManager.TOOLWINDOW_ID,MessageType.ERROR,"Refreshing remotes failed.");
          }
 else {
            ToolWindowManager.getInstance(myProject).notifyByBalloon(ChangesViewContentManager.TOOLWINDOW_ID,MessageType.INFO,"Refreshing remotes complete.");
          }
          myRemoveConfigurations=null;
          cancelPopup();
        }
      }
);
    }
  }
);
}
