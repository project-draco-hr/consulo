{
  if (!getRefElement().isValid() || !getRefElement().getManager().isInProject(getRefElement()))   return null;
  if (!CreateFromUsageUtils.isValidReference(getRefElement(),true) && getRefElement().getReferenceNameElement() != null && checkClassName(getRefElement().getReferenceName())) {
    PsiElement parent=getRefElement().getParent();
    if (parent instanceof PsiTypeElement) {
      if (parent.getParent() instanceof PsiReferenceParameterList)       return getRefElement();
      while (parent.getParent() instanceof PsiTypeElement)       parent=parent.getParent();
      if (parent.getParent() instanceof PsiVariable || parent.getParent() instanceof PsiMethod || parent.getParent() instanceof PsiClassObjectAccessExpression|| parent.getParent() instanceof PsiTypeCastExpression|| (parent.getParent() instanceof PsiInstanceOfExpression && ((PsiInstanceOfExpression)parent.getParent()).getCheckType() == parent)) {
        return getRefElement();
      }
    }
 else     if (parent instanceof PsiReferenceList) {
      if (parent.getParent() instanceof PsiClass) {
        PsiClass psiClass=(PsiClass)parent.getParent();
        if (psiClass.getExtendsList() == parent) {
          if (!myCreateInterface && !psiClass.isInterface())           return getRefElement();
          if (myCreateInterface && psiClass.isInterface())           return getRefElement();
        }
        if (psiClass.getImplementsList() == parent && myCreateInterface)         return getRefElement();
      }
 else       if (parent.getParent() instanceof PsiMethod) {
        PsiMethod method=(PsiMethod)parent.getParent();
        if (method.getThrowsList() == parent && !myCreateInterface)         return getRefElement();
      }
    }
 else     if (parent instanceof PsiAnonymousClass && ((PsiAnonymousClass)parent).getBaseClassReference() == getRefElement()) {
      return getRefElement();
    }
  }
  if (getRefElement() instanceof PsiReferenceExpression) {
    PsiReferenceExpression referenceExpression=(PsiReferenceExpression)getRefElement();
    PsiElement parent=referenceExpression.getParent();
    if (parent instanceof PsiMethodCallExpression) {
      return null;
    }
    if (parent.getParent() instanceof PsiMethodCallExpression && myCreateInterface)     return null;
    if (referenceExpression.getReferenceNameElement() != null && checkClassName(referenceExpression.getReferenceName()) && !CreateFromUsageUtils.isValidReference(referenceExpression,true)) {
      return referenceExpression;
    }
  }
  return null;
}
