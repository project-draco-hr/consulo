{
  final PsiJavaCodeReferenceElement element=getRefElement();
  if (element == null || !element.isValid() || !element.getManager().isInProject(element))   return null;
  if (!CreateFromUsageUtils.isValidReference(element,true) && element.getReferenceNameElement() != null && checkClassName(element.getReferenceName())) {
    PsiElement parent=element.getParent();
    if (parent instanceof PsiTypeElement) {
      if (parent.getParent() instanceof PsiReferenceParameterList)       return element;
      while (parent.getParent() instanceof PsiTypeElement)       parent=parent.getParent();
      if (parent.getParent() instanceof PsiVariable || parent.getParent() instanceof PsiMethod || parent.getParent() instanceof PsiClassObjectAccessExpression|| parent.getParent() instanceof PsiTypeCastExpression|| (parent.getParent() instanceof PsiInstanceOfExpression && ((PsiInstanceOfExpression)parent.getParent()).getCheckType() == parent)) {
        return element;
      }
    }
 else     if (parent instanceof PsiReferenceList) {
      if (myKind == ENUM)       return null;
      if (parent.getParent() instanceof PsiClass) {
        PsiClass psiClass=(PsiClass)parent.getParent();
        if (psiClass.getExtendsList() == parent) {
          if (myKind == CLASS && !psiClass.isInterface())           return element;
          if (myKind == INTERFACE && psiClass.isInterface())           return element;
        }
        if (psiClass.getImplementsList() == parent && myKind == INTERFACE)         return element;
      }
 else       if (parent.getParent() instanceof PsiMethod) {
        PsiMethod method=(PsiMethod)parent.getParent();
        if (method.getThrowsList() == parent && myKind == CLASS)         return element;
      }
    }
 else     if (parent instanceof PsiAnonymousClass && ((PsiAnonymousClass)parent).getBaseClassReference() == element) {
      return element;
    }
  }
  if (element instanceof PsiReferenceExpression) {
    PsiReferenceExpression referenceExpression=(PsiReferenceExpression)element;
    PsiElement parent=referenceExpression.getParent();
    if (parent instanceof PsiMethodCallExpression) {
      return null;
    }
    if (parent.getParent() instanceof PsiMethodCallExpression && myKind != CLASS)     return null;
    if (referenceExpression.getReferenceNameElement() != null && checkClassName(referenceExpression.getReferenceName()) && !CreateFromUsageUtils.isValidReference(referenceExpression,true)) {
      return referenceExpression;
    }
  }
  return null;
}
