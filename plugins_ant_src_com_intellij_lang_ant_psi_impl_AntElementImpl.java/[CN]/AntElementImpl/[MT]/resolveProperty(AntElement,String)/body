{
  if (propName == null)   return null;
  PsiElement result;
  AntElement temp=element;
  while (temp != null) {
    result=temp.getProperty(propName);
    if (result != null) {
      return result;
    }
    temp=temp.getAntParent();
  }
  final HashSet<PsiElement> projectsStack=PsiElementHashSetSpinAllocator.alloc();
  try {
    result=resolvePropertyInProject(element.getAntProject(),propName,projectsStack);
    if (result != null)     return result;
  }
  finally {
    PsiElementHashSetSpinAllocator.dispose(projectsStack);
  }
  final AntTarget target=PsiTreeUtil.getParentOfType(element,AntTarget.class);
  if (target != null) {
    final HashSet<PsiElement> targetsStack=PsiElementHashSetSpinAllocator.alloc();
    try {
      result=resolveTargetProperty(target,propName,targetsStack);
    }
  finally {
      PsiElementHashSetSpinAllocator.dispose(targetsStack);
    }
  }
  return result;
}
