{
  PsiElement result;
  AntElement temp=element;
  while (temp != null) {
    result=temp.getProperty(propName);
    if (result != null) {
      return result;
    }
    temp=temp.getAntParent();
  }
  final AntProject project=element.getAntProject();
  if ((result=resolvePropertyInElement(project,propName)) != null) {
    return result;
  }
  for (  final AntFile file : project.getImportedFiles()) {
    final AntProject importedProject=file.getAntProject();
    importedProject.getChildren();
    if ((result=resolvePropertyInElement(importedProject,propName)) != null) {
      return result;
    }
  }
  final AntTarget target=PsiTreeUtil.getParentOfType(element,AntTarget.class);
  if (target != null) {
    final HashSet<PsiElement> targetStack=PsiElementHashSetSpinAllocator.alloc();
    try {
      result=resolveTargetProperty(target,propName,targetStack);
    }
  finally {
      PsiElementHashSetSpinAllocator.dispose(targetStack);
    }
  }
  return result;
}
