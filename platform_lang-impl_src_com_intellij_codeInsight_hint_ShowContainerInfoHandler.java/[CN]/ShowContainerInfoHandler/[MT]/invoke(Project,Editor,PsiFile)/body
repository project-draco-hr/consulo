{
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  WeakReference<LightweightHint> ref=editor.getUserData(MY_LAST_HINT_KEY);
  if (ref != null) {
    LightweightHint hint=ref.get();
    if (hint != null && hint.isVisible()) {
      hint.hide();
    }
  }
  PsiElement container=null;
  StructureViewBuilder builder=LanguageStructureViewBuilder.INSTANCE.getStructureViewBuilder(file);
  if (builder instanceof TreeBasedStructureViewBuilder) {
    StructureViewModel model=((TreeBasedStructureViewBuilder)builder).createStructureViewModel();
    Object element=model.getCurrentEditorElement();
    if (element instanceof PsiElement) {
      container=(PsiElement)element;
      while (true) {
        if (container == null || container instanceof PsiFile) {
          return;
        }
        if (!isDeclarationVisible(container,editor)) {
          break;
        }
        container=container.getParent();
        while (container != null && DeclarationRangeUtil.getPossibleDeclarationAtRange(container) == null) {
          container=container.getParent();
          if (container instanceof PsiFile)           return;
        }
      }
    }
  }
  if (container == null) {
    return;
  }
  final TextRange range=DeclarationRangeUtil.getPossibleDeclarationAtRange(container);
  if (range == null) {
    return;
  }
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    public void run(){
      LightweightHint hint=EditorFragmentComponent.showEditorFragmentHint(editor,range,true,true);
      if (hint != null) {
        editor.putUserData(MY_LAST_HINT_KEY,new WeakReference<LightweightHint>(hint));
      }
    }
  }
);
}
