{
  try {
    if (myStart.equals(myFinish)) {
      return Collections.singletonList(Collections.singletonList(myStart));
    }
    computeDistancesToTarget();
    if (!myNextNodes.containsKey(myStart)) {
      return Collections.emptyList();
    }
    buildOutHeaps();
    buildMainHeaps();
    PriorityQueue<Sidetracks<Node>> queue=new PriorityQueue<Sidetracks<Node>>();
    List<FList<HeapNode<Node>>> sidetracks=new ArrayList<FList<HeapNode<Node>>>();
    sidetracks.add(FList.<HeapNode<Node>>emptyList());
    final Heap<Node> heap=myHeaps.get(myStart);
    if (heap != null) {
      queue.add(new Sidetracks<Node>(0,FList.<HeapNode<Node>>emptyList().prepend(heap.getRoot())));
      for (int i=2; i <= k; i++) {
        if (queue.isEmpty())         break;
        myProgressIndicator.checkCanceled();
        final Sidetracks<Node> current=queue.remove();
        sidetracks.add(current.myEdges);
        final HeapNode<Node> e=current.myEdges.getHead();
        final Heap<Node> next=myHeaps.get(e.myEdge.getFinish());
        if (next != null) {
          final HeapNode<Node> f=next.getRoot();
          queue.add(new Sidetracks<Node>(current.myLength + f.myEdge.getDelta(),current.myEdges.prepend(f)));
        }
        for (        HeapNode<Node> child : e.myChildren) {
          if (child != null) {
            queue.add(new Sidetracks<Node>(current.myLength - e.myEdge.getDelta() + child.myEdge.getDelta(),current.myEdges.getTail().prepend(child)));
          }
        }
      }
    }
    return computePathsBySidetracks(sidetracks);
  }
 catch (  ProcessCanceledException e) {
    return Collections.emptyList();
  }
}
