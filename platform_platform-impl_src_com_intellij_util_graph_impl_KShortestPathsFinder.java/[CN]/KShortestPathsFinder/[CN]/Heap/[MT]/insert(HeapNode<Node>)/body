{
  int pos=mySize + 1;
  int pow=1;
  while (pos > pow << 2) {
    pow<<=1;
  }
  HeapNode<Node> place=myRoot;
  while (true) {
    final int ind=(pos & pow) != 0 ? 1 : 0;
    if (pow == 1) {
      HeapNode<Node> placeCopy=place.copy();
      placeCopy.myChildren[ind]=node;
      node.myParent=placeCopy;
      break;
    }
    place=place.myChildren[ind];
    pow>>=1;
  }
  while (true) {
    final HeapNode<Node> parent=node.myParent;
    if (parent == null || parent.myEdge.getDelta() < node.myEdge.getDelta()) {
      break;
    }
    final HeapNode<Node> parentCopy=parent.copy();
    final GraphEdge<Node> t=parentCopy.myEdge;
    parentCopy.myEdge=node.myEdge;
    node.myEdge=t;
    final HeapNode<Node> t2=parentCopy.myChildren[2];
    parentCopy.myChildren[2]=node.myChildren[2];
    node.myChildren[2]=t2;
    node=parentCopy;
  }
  HeapNode<Node> newRoot=node;
  while (newRoot.myParent != null) {
    newRoot=newRoot.myParent;
  }
  return new Heap<Node>(mySize + 1,newRoot);
}
