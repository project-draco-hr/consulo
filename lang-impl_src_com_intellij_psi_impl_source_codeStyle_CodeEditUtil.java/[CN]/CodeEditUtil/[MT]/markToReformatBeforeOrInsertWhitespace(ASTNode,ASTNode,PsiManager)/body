{
  final Language leftLang=left != null ? getNotAnyLanguage(left) : null;
  final Language rightLang=getNotAnyLanguage(right);
  final ParserDefinition parserDefinition=LanguageParserDefinitions.INSTANCE.forLanguage(rightLang);
  LeafElement generatedWhitespace=null;
  if (leftLang == rightLang && parserDefinition != null) {
switch (parserDefinition.spaceExistanceTypeBetweenTokens(left,right)) {
case MUST:
      generatedWhitespace=Factory.createSingleLeafElement(TokenType.WHITE_SPACE," ",0,1,null,manager);
    break;
case MUST_LINE_BREAK:
  generatedWhitespace=Factory.createSingleLeafElement(TokenType.WHITE_SPACE,"\n",0,1,null,manager);
break;
default :
generatedWhitespace=null;
}
}
if (generatedWhitespace != null) {
final TreeUtil.CommonParentState parentState=new TreeUtil.CommonParentState();
TreeUtil.prevLeaf((TreeElement)right,parentState);
parentState.nextLeafBranchStart.getTreeParent().addChild(generatedWhitespace,parentState.nextLeafBranchStart);
}
 else markToReformatBefore(right,true);
}
