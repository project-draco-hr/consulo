{
  if (right == null)   return left;
  markToReformatBefore(right,false);
  if (left == null) {
    markToReformatBefore(right,true);
  }
 else   if (left.getElementType() == TokenType.WHITE_SPACE && left.getTreeNext() == null && normalizeTailingWhitespace) {
    left.getTreeParent().removeChild(left);
    markToReformatBeforeOrInsertWhitespace(left,right,right.getTreeParent().getPsi().getManager());
    left=right;
  }
 else   if (left.getElementType() == TokenType.WHITE_SPACE && right.getElementType() == TokenType.WHITE_SPACE) {
    final String text;
    final int leftBlankLines=getBlankLines(left.getText());
    final int rightBlankLines=getBlankLines(right.getText());
    final boolean leaveRightText=leftBlankLines < rightBlankLines;
    if (leftBlankLines == 0 && rightBlankLines == 0)     text=left.getText() + right.getText();
 else     if (leaveRightText)     text=right.getText();
 else     text=left.getText();
    if (leaveRightText || forceReformat) {
      final LeafElement merged=Factory.createSingleLeafElement(TokenType.WHITE_SPACE,text,0,text.length(),null,left.getPsi().getManager());
      if (!leaveRightText) {
        left.getTreeParent().replaceChild(left,merged);
        right.getTreeParent().removeChild(right);
      }
 else {
        right.getTreeParent().replaceChild(right,merged);
        left.getTreeParent().removeChild(left);
      }
      left=merged;
    }
 else     right.getTreeParent().removeChild(right);
  }
 else   if (left.getElementType() != TokenType.WHITE_SPACE || forceReformat) {
    if (right.getElementType() == TokenType.WHITE_SPACE) {
      markWhitespaceForReformat(right);
    }
 else     if (left.getElementType() == TokenType.WHITE_SPACE) {
      markWhitespaceForReformat(left);
    }
 else     markToReformatBeforeOrInsertWhitespace(left,right,right.getTreeParent().getPsi().getManager());
  }
  return left;
}
