{
  try {
    EventQueue eventQueue=myVmProxy.eventQueue();
    while (!isStopped()) {
      try {
        final EventSet eventSet=eventQueue.remove();
        if (myReturnValueWatcher != null && myReturnValueWatcher.isEnabled()) {
          int processed=0;
          for (EventIterator eventIterator=eventSet.eventIterator(); eventIterator.hasNext(); ) {
            final Event event=eventIterator.nextEvent();
            if (event instanceof MethodExitEvent) {
              if (myReturnValueWatcher.processMethodExitEvent((MethodExitEvent)event)) {
                processed++;
              }
            }
          }
          if (processed == eventSet.size()) {
            eventSet.resume();
            continue;
          }
        }
        getManagerThread().invokeAndWait(new DebuggerCommandImpl(){
          protected void action() throws Exception {
            final SuspendContextImpl suspendContext=getSuspendManager().pushSuspendContext(eventSet);
            for (EventIterator eventIterator=eventSet.eventIterator(); eventIterator.hasNext(); ) {
              final Event event=eventIterator.nextEvent();
              try {
                if (event instanceof VMStartEvent) {
                  processVMStartEvent(suspendContext,(VMStartEvent)event);
                }
 else                 if (event instanceof VMDeathEvent) {
                  processVMDeathEvent(suspendContext,event);
                }
 else                 if (event instanceof VMDisconnectEvent) {
                  processVMDeathEvent(suspendContext,event);
                }
 else                 if (event instanceof ClassPrepareEvent) {
                  processClassPrepareEvent(suspendContext,(ClassPrepareEvent)event);
                }
 else                 if (event instanceof StepEvent) {
                  processStepEvent(suspendContext,(StepEvent)event);
                }
 else                 if (event instanceof LocatableEvent) {
                  processLocatableEvent(suspendContext,(LocatableEvent)event);
                }
 else                 if (event instanceof ClassUnloadEvent) {
                  processDefaultEvent(suspendContext);
                }
              }
 catch (              VMDisconnectedException e) {
                LOG.debug(e);
              }
catch (              InternalException e) {
                LOG.info(e);
              }
catch (              Throwable e) {
                LOG.error(e);
              }
            }
          }
        }
);
      }
 catch (      InternalException e) {
        LOG.debug(e);
      }
catch (      InterruptedException e) {
        throw e;
      }
catch (      VMDisconnectedException e) {
        throw e;
      }
catch (      ProcessCanceledException e) {
        throw e;
      }
catch (      Throwable e) {
        LOG.debug(e);
      }
    }
  }
 catch (  InterruptedException e) {
    invokeVMDeathEvent();
  }
catch (  VMDisconnectedException e) {
    invokeVMDeathEvent();
  }
 finally {
    Thread.interrupted();
  }
}
