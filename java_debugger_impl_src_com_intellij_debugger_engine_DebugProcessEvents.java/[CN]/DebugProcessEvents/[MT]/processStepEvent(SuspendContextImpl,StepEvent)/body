{
  final ThreadReference thread=event.thread();
  preprocessEvent(suspendContext,thread);
  RequestHint hint=(RequestHint)event.request().getProperty("hint");
  deleteStepRequests(event.thread());
  boolean shouldResume=false;
  if (hint != null) {
    final int nextStepDepth=hint.getNextStepDepth(suspendContext);
    if (nextStepDepth != RequestHint.STOP) {
      final ThreadReferenceProxyImpl threadProxy=suspendContext.getThread();
      doStep(suspendContext,threadProxy,nextStepDepth,hint);
      shouldResume=true;
    }
    if (!shouldResume && hint.isRestoreBreakpoints()) {
      DebuggerManagerEx.getInstanceEx(getProject()).getBreakpointManager().enableBreakpoints(this);
    }
  }
  if (shouldResume) {
    getSuspendManager().voteResume(suspendContext);
  }
 else {
    showStatusText("");
    if (myReturnValueWatcher != null) {
      myReturnValueWatcher.disable();
    }
    getSuspendManager().voteSuspend(suspendContext);
    if (hint != null) {
      final RequestHint.SmartStepFilter smartStepFilter=hint.getSmartStepFilter();
      if (smartStepFilter != null && !smartStepFilter.wasMethodExecuted()) {
        ToolWindowManager.getInstance(getProject()).notifyByBalloon(ToolWindowId.DEBUG,MessageType.INFO,"Method <b>" + smartStepFilter.getTargetMethodName() + "()</b> has not been called");
      }
    }
  }
}
