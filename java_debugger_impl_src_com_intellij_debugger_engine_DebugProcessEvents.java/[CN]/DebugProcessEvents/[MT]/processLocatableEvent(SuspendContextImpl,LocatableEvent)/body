{
  if (myReturnValueWatcher != null && event instanceof MethodExitEvent) {
    if (myReturnValueWatcher.processMethodExitEvent(((MethodExitEvent)event))) {
      return;
    }
  }
  ThreadReference thread=event.thread();
  preprocessEvent(suspendContext,thread);
  getManagerThread().schedule(new SuspendContextCommandImpl(suspendContext){
    public void contextAction() throws Exception {
      final SuspendManager suspendManager=getSuspendManager();
      SuspendContextImpl evaluatingContext=SuspendManagerUtil.getEvaluatingContext(suspendManager,getSuspendContext().getThread());
      if (evaluatingContext != null) {
        suspendManager.voteResume(suspendContext);
        return;
      }
      final LocatableEventRequestor requestor=(LocatableEventRequestor)getRequestsManager().findRequestor(event.request());
      boolean resumePreferred=requestor != null && DebuggerSettings.SUSPEND_NONE.equals(requestor.getSuspendPolicy());
      boolean requestHit=false;
      try {
        requestHit=(requestor != null) && requestor.processLocatableEvent(this,event);
      }
 catch (      final LocatableEventRequestor.EventProcessingException ex) {
        if (LOG.isDebugEnabled()) {
          LOG.debug(ex.getMessage());
        }
        final boolean[] considerRequestHit=new boolean[]{true};
        DebuggerInvocationUtil.invokeAndWait(getProject(),new Runnable(){
          public void run(){
            DebuggerPanelsManager.getInstance(getProject()).toFront(mySession);
            final String displayName=requestor instanceof Breakpoint ? ((Breakpoint)requestor).getDisplayName() : requestor.getClass().getSimpleName();
            final String message=DebuggerBundle.message("error.evaluating.breakpoint.condition.or.action",displayName,ex.getMessage());
            considerRequestHit[0]=Messages.showYesNoDialog(getProject(),message,ex.getTitle(),Messages.getQuestionIcon()) == 0;
          }
        }
,ModalityState.NON_MODAL);
        requestHit=considerRequestHit[0];
        resumePreferred=!requestHit;
      }
      if (requestHit && requestor instanceof Breakpoint) {
        myBreakpointManager.processBreakpointHit((Breakpoint)requestor);
      }
      if (!requestHit || resumePreferred) {
        suspendManager.voteResume(suspendContext);
      }
 else {
        if (myReturnValueWatcher != null) {
          myReturnValueWatcher.disable();
        }
        if (suspendContext.getSuspendPolicy() == EventRequest.SUSPEND_ALL) {
          myBreakpointManager.applyThreadFilter(DebugProcessEvents.this,event.thread());
        }
        suspendManager.voteSuspend(suspendContext);
        showStatusText(DebugProcessEvents.this,event);
      }
    }
  }
);
}
