{
  final FutureTask<Boolean> reformatTask=myReformatCodeProcessor.preprocessFile(file);
  final FutureTask<Boolean> optimizeImportsTask=myOptimizeImportsProcessor.preprocessFile(file);
  return new FutureTask<Boolean>(new Callable<Boolean>(){
    @Override public Boolean call() throws Exception {
      reformatTask.run();
      if (!reformatTask.get() || reformatTask.isCancelled()) {
        return false;
      }
      CodeStyleManagerImpl.setSequentialProcessingAllowed(false);
      try {
        optimizeImportsTask.run();
        return optimizeImportsTask.get() && !optimizeImportsTask.isCancelled();
      }
  finally {
        CodeStyleManagerImpl.setSequentialProcessingAllowed(true);
      }
    }
  }
);
}
