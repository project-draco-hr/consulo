{
  int size=15;
  final Map<GroupDescriptor,Set<UsageDescriptor>> allUsages=createDescriptors("g:a1:-1","g2:a2:-2","g2:a3:-3","g:a2:-2","g3:a1:-1","g3:a2:13");
  final SentUsagesPersistence usagesPersistence=new BasicSentUsagesPersistenceComponent();
  Map<GroupDescriptor,Set<PatchedUsage>> patchedUsages=StatisticsUploadAssistant.getPatchedUsages(allUsages,usagesPersistence);
  String first=StatisticsUploadAssistant.getStringPatch(patchedUsages,size);
  StatisticsUploadAssistant.persistSentPatch(first,usagesPersistence);
  assertTrue(first.length() <= size);
  assertMapEquals(ConvertUsagesUtil.convertString(first),ConvertUsagesUtil.convertString("g:a1=-1,a2=-2"));
  patchedUsages=StatisticsUploadAssistant.getPatchedUsages(allUsages,usagesPersistence);
  String second=StatisticsUploadAssistant.getStringPatch(patchedUsages,size);
  StatisticsUploadAssistant.persistSentPatch(second,usagesPersistence);
  assertTrue(second.length() <= size);
  assertFalse(second.contains(first));
  assertMapEquals(ConvertUsagesUtil.convertString(second),ConvertUsagesUtil.convertString("g2:a2=-2,a3=-3"));
  patchedUsages=StatisticsUploadAssistant.getPatchedUsages(allUsages,usagesPersistence);
  String third=StatisticsUploadAssistant.getStringPatch(patchedUsages,size);
  StatisticsUploadAssistant.persistSentPatch(third,usagesPersistence);
  assertTrue(third.length() <= size);
  assertFalse(third.contains(first));
  assertFalse(third.contains(second));
  assertMapEquals(ConvertUsagesUtil.convertString(third),ConvertUsagesUtil.convertString("g3:a1=-1,a2=13"));
  patchedUsages=StatisticsUploadAssistant.getPatchedUsages(allUsages,usagesPersistence);
  assertEquals(patchedUsages.size(),0);
  assertEquals(allUsages.size(),usagesPersistence.getSentUsages().size());
}
