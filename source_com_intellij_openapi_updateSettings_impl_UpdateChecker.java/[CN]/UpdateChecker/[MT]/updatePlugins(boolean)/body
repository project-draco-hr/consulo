{
  final List<String> downloaded=new ArrayList<String>();
  final Set<String> failed=new HashSet<String>();
  for (  String host : UpdateSettingsConfigurable.getInstance().getPluginHosts()) {
    try {
      final Document document=loadVersionInfo(host);
      if (document == null)       continue;
      for (      Object plugin : document.getRootElement().getChildren("plugin")) {
        Element pluginElement=(Element)plugin;
        final String pluginId=pluginElement.getAttributeValue("id");
        final String pluginUrl=pluginElement.getAttributeValue("url");
        final String pluginVersion=pluginElement.getAttributeValue("version");
        if (pluginId == null) {
          LOG.info("plugin id should not be null");
          continue;
        }
        if (pluginUrl == null) {
          LOG.info("plugin url should not be null");
          continue;
        }
        ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
          public void run(){
            try {
              final PluginDownloader uploader=new PluginDownloader(pluginId,pluginUrl,pluginVersion);
              if (uploader.prepareToInstall()) {
                downloaded.add(uploader.getPluginName());
              }
            }
 catch (            IOException e) {
              LOG.info(e);
            }
          }
        }
,IdeBundle.message("update.uploading.plugin.progress.title",pluginUrl),true,null);
      }
    }
 catch (    Exception e) {
      failed.add(host);
    }
  }
  if (!failed.isEmpty()) {
    final String failedMessage=IdeBundle.message("connection.failed.message",StringUtil.join(failed,","));
    if (showErrorDialog) {
      Messages.showErrorDialog(failedMessage,IdeBundle.message("title.connection.error"));
    }
 else {
      LOG.info(failedMessage);
    }
  }
  if (downloaded.isEmpty())   return null;
  return IdeBundle.message("update.plugin.upload.message",StringUtil.join(downloaded,"</li><li>"));
}
