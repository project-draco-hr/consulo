{
  FileDocumentManager.getInstance().saveAllDocuments();
  final MavenConsole console=createConsole(getGeneralSettings(),Pair.create(parameters,settings));
  try {
    final MavenExecutor[] executor=new MavenExecutor[]{createExecutor(parameters,getGeneralSettings(),settings,console)};
    ProgressManager.getInstance().run(new Task.Backgroundable(myProject,executor[0].getCaption(),true){
      public void run(      @NotNull ProgressIndicator indicator){
        try {
          List<MavenProject> processedProjects=new ArrayList<MavenProject>();
          try {
            if (executor[0].execute(processedProjects,indicator)) {
              if (onComplete != null)               onComplete.run();
            }
          }
 catch (          ProcessCanceledException ignore) {
          }
          executor[0]=null;
          updateProjectFolders(processedProjects);
        }
  finally {
          console.finish();
        }
      }
      @Nullable public NotificationInfo getNotificationInfo(){
        return new NotificationInfo("Maven","Maven Task Finished","");
      }
      public boolean shouldStartInBackground(){
        return settings.isRunMavenInBackground();
      }
      public void processSentToBackground(){
        settings.setRunMavenInBackground(true);
      }
      public void processRestoredToForeground(){
        settings.setRunMavenInBackground(false);
      }
    }
);
  }
 catch (  Exception e) {
    MavenConsoleHelper.printException(console,e);
    console.finish();
    MavenLog.LOG.warn(e);
  }
}
