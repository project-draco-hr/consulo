{
  try {
    FileDocumentManager.getInstance().saveAllDocuments();
    ConsoleAdapter console=openConsoleToolWindow(myMavenCore.getState());
    myExecutor=createExecutor(parameters,myMavenCore.getState(),settings,console);
    ProgressManager.getInstance().run(new Task.Backgroundable(myProject,myExecutor.getCaption(),true){
      public void run(      @NotNull ProgressIndicator indicator){
        List<MavenProject> processedProjects=new ArrayList<MavenProject>();
        try {
          if (myExecutor.execute(processedProjects,indicator)) {
            if (onComplete != null)             onComplete.run();
          }
        }
 catch (        ProcessCanceledException ignore) {
        }
        myExecutor=null;
        myLastRunnerParametersAndSettings=Pair.create(parameters,settings);
        updateProjectFolders(processedProjects);
      }
      @Nullable public NotificationInfo getNotificationInfo(){
        return new NotificationInfo("Maven","Maven Task Finished","");
      }
      public boolean shouldStartInBackground(){
        return settings.isRunMavenInBackground();
      }
      public void processSentToBackground(){
        settings.setRunMavenInBackground(true);
      }
      public void processRestoredToForeground(){
        settings.setRunMavenInBackground(false);
      }
    }
);
  }
 catch (  Exception e) {
    MavenLog.LOG.error(e);
    Messages.showErrorDialog(myProject,e.getMessage(),"Maven execution error");
  }
}
