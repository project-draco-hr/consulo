{
  if (myProject == null || myProject.isDisposed() || myVcs == null) {
    return null;
  }
  final List<String> cmdLine=new LinkedList<String>();
  cmdLine.add(myVcs.getHgExecutable());
  if (repo != null) {
    cmdLine.add("--repository");
    cmdLine.add(repo.getPath());
  }
  WarningReceiver warningReceiver=new WarningReceiver();
  PassReceiver passReceiver=new PassReceiver(myProject);
  SocketServer promptServer=new SocketServer(new PromptReceiver());
  SocketServer warningServer=new SocketServer(warningReceiver);
  SocketServer passServer=new SocketServer(passReceiver);
  try {
    int promptPort=promptServer.start();
    int warningPort=warningServer.start();
    int passPort=passServer.start();
    cmdLine.add("--config");
    cmdLine.add("extensions.hg4ideapromptextension=" + myVcs.getPromptHooksExtensionFile().getAbsolutePath());
    cmdLine.add("--config");
    cmdLine.add("hg4ideaprompt.port=" + promptPort);
    cmdLine.add("--config");
    cmdLine.add("hg4ideawarn.port=" + warningPort);
    cmdLine.add("--config");
    cmdLine.add("hg4ideapass.port=" + passPort);
    cmdLine.add("--config");
    cmdLine.add("extensions.mq=");
  }
 catch (  IOException e) {
    showError(e);
    LOG.info("IOException during preparing command",e);
    promptServer.stop();
    warningServer.stop();
    passServer.stop();
    return null;
  }
  cmdLine.addAll(myOptions);
  cmdLine.add(operation);
  if (arguments != null && arguments.size() != 0) {
    cmdLine.addAll(arguments);
  }
  ShellCommand shellCommand=new ShellCommand(myVcs.getGlobalSettings().isRunViaBash());
  HgCommandResult result;
  try {
    String workingDir=repo != null ? repo.getPath() : null;
    result=shellCommand.execute(cmdLine,workingDir,myCharset);
    if (!HgErrorUtil.isAuthorizationError(result)) {
      passReceiver.saveCredentials();
    }
  }
 catch (  ShellCommandException e) {
    if (myVcs.getExecutableValidator().checkExecutableAndNotifyIfNeeded()) {
      showError(e);
      LOG.info(e.getMessage(),e);
    }
    return null;
  }
catch (  InterruptedException e) {
    LOG.info(e.getMessage(),e);
    return null;
  }
 finally {
    promptServer.stop();
    warningServer.stop();
    passServer.stop();
  }
  String warnings=warningReceiver.getWarnings();
  result.setWarnings(warnings);
  log(operation,arguments,result);
  return result;
}
