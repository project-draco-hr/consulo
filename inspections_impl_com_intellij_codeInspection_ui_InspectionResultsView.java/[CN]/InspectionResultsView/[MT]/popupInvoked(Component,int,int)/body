{
  final TreePath path;
  if (myTree.hasFocus()) {
    path=myTree.getLeadSelectionPath();
  }
 else {
    path=null;
  }
  if (path == null)   return;
  final DefaultActionGroup actions=new DefaultActionGroup();
  final ActionManager actionManager=ActionManager.getInstance();
  actions.add(actionManager.getAction(IdeActions.ACTION_EDIT_SOURCE));
  actions.add(actionManager.getAction(IdeActions.ACTION_FIND_USAGES));
  actions.add(new AnAction(InspectionsBundle.message("inspections.result.view.include.action.text")){
{
      registerCustomShortcutSet(CommonShortcuts.INSERT,myTree);
    }
    public void actionPerformed(    AnActionEvent e){
      ((InspectionTreeNode)path.getLastPathComponent()).amnesty();
      updateView(false);
    }
    public void update(    final AnActionEvent e){
      e.getPresentation().setEnabled(!myGlobalInspectionContext.getUIOptions().FILTER_RESOLVED_ITEMS);
    }
  }
);
  actions.add(new AnAction(InspectionsBundle.message("inspections.result.view.exclude.action.text")){
{
      registerCustomShortcutSet(CommonShortcuts.DELETE,myTree);
    }
    public void actionPerformed(    final AnActionEvent e){
      ((InspectionTreeNode)path.getLastPathComponent()).ignoreElement();
      updateView(false);
    }
  }
);
  actions.addSeparator();
  final InspectionTool tool=myTree.getSelectedTool();
  if (tool != null) {
    final QuickFixAction[] quickFixes=myProvider.getQuickFixes(tool,myTree);
    if (quickFixes != null) {
      for (      QuickFixAction quickFixe : quickFixes) {
        actions.add(quickFixe);
      }
    }
    final HighlightDisplayKey key=HighlightDisplayKey.find(tool.getShortName());
    if (key == null)     return;
    actions.addSeparator();
    actions.add(new EditSettingsAction());
    final List<AnAction> options=new InspectionsOptionsToolbarAction(this).createActions();
    for (    AnAction action : options) {
      actions.add(action);
    }
  }
  actions.addSeparator();
  actions.add(actionManager.getAction(IdeActions.GROUP_VERSION_CONTROLS));
  final ActionPopupMenu menu=actionManager.createActionPopupMenu(ActionPlaces.CODE_INSPECTION,actions);
  menu.getComponent().show(component,x,y);
}
