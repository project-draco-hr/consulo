{
  if (!isSingleToolInSelection())   return;
  final TreePath path;
  if (myTree.hasFocus()) {
    path=myTree.getLeadSelectionPath();
  }
 else {
    path=null;
  }
  if (path == null)   return;
  DefaultActionGroup actions=new DefaultActionGroup();
  actions.add(ActionManager.getInstance().getAction(IdeActions.ACTION_EDIT_SOURCE));
  actions.add(ActionManager.getInstance().getAction(IdeActions.ACTION_FIND_USAGES));
  final InspectionTool tool=myTree.getSelectedTool();
  if (tool == null)   return;
  List<RefEntity> selectedElements=new ArrayList<RefEntity>();
  final TreePath[] selectionPaths=myTree.getSelectionPaths();
  for (  TreePath selectionPath : selectionPaths) {
    traverseRefElements((InspectionTreeNode)selectionPath.getLastPathComponent(),selectedElements);
  }
  final QuickFixAction[] quickFixes=tool.getQuickFixes(selectedElements.toArray(new RefElement[selectedElements.size()]));
  if (quickFixes != null) {
    for (    QuickFixAction quickFixe : quickFixes) {
      actions.add(quickFixe);
    }
  }
  final HighlightDisplayKey key=HighlightDisplayKey.find(tool.getShortName());
  if (key == null)   return;
  actions.add(new AnAction(InspectionsBundle.message("inspection.edit.tool.settings")){
    public void actionPerformed(    AnActionEvent e){
      if (new EditInspectionToolsSettingsAction(key).editToolSettings(myProject,(InspectionProfileImpl)myInspectionProfile,false)) {
        InspectionResultsView.this.update();
      }
    }
  }
);
  actions.add(new SuppressInspectionToolbarAction(this));
  actions.add(ActionManager.getInstance().getAction(IdeActions.GROUP_VERSION_CONTROLS));
  ActionPopupMenu menu=ActionManager.getInstance().createActionPopupMenu(ActionPlaces.CODE_INSPECTION,actions);
  menu.getComponent().show(component,x,y);
}
