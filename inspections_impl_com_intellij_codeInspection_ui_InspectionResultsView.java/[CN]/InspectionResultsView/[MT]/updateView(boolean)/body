{
  if (!strict && !myGlobalInspectionContext.getUIOptions().FILTER_RESOLVED_ITEMS)   return false;
  clearTree();
  boolean resultsFound=false;
  final boolean isGroupedBySeverity=myGlobalInspectionContext.getUIOptions().GROUP_BY_SEVERITY;
  myGroups=new HashMap<HighlightDisplayLevel,Map<String,InspectionGroupNode>>();
  Map<InspectionTool,HighlightDisplayLevel> tools=new HashMap<InspectionTool,HighlightDisplayLevel>();
  InspectionProjectProfileManager inspectionProfileManager=InspectionProjectProfileManager.getInstance(myProject);
  if (myGlobalInspectionContext.RUN_WITH_EDITOR_PROFILE) {
    final Set<String> profiles=myScope.getActiveInspectionProfiles();
    for (    String profileName : profiles) {
      processProfile((InspectionProfileImpl)inspectionProfileManager.getProfile(profileName),tools);
    }
  }
 else {
    processProfile(myInspectionProfile,tools);
  }
  for (  InspectionTool tool : tools.keySet()) {
    tool.updateContent();
    final boolean hasProblems=tool.hasReportedProblems();
    if (hasProblems) {
      addTool(tool,tools.get(tool),isGroupedBySeverity);
    }
    resultsFound|=hasProblems;
  }
  myTree.sort();
  myTree.restoreExpantionAndSelection();
  return resultsFound;
}
