{
  if (!strict && !myGlobalInspectionContext.getUIOptions().FILTER_RESOLVED_ITEMS)   return false;
  clearTree();
  boolean resultsFound=false;
  final InspectionProfile profile=myInspectionProfile;
  final boolean isGroupedBySeverity=myGlobalInspectionContext.getUIOptions().GROUP_BY_SEVERITY;
  myGroups=new HashMap<HighlightDisplayLevel,Map<String,InspectionGroupNode>>();
  final Map<String,Set<Pair<InspectionTool,InspectionProfile>>> tools=myGlobalInspectionContext.getTools();
  for (  Set<Pair<InspectionTool,InspectionProfile>> toolsInsideProfile : tools.values()) {
    for (    Pair<InspectionTool,InspectionProfile> toolWithProfile : toolsInsideProfile) {
      final InspectionTool tool=toolWithProfile.first;
      final HighlightDisplayKey key=HighlightDisplayKey.find(tool.getShortName());
      if (profile != null && !profile.isToolEnabled(key)) {
        break;
      }
      tool.updateContent();
      final boolean hasProblems=tool.hasReportedProblems();
      if (hasProblems) {
        addTool(tool,toolWithProfile.second.getErrorLevel(key),isGroupedBySeverity);
      }
      resultsFound|=hasProblems;
    }
  }
  myTree.sort();
  myTree.restoreExpantionAndSelection();
  return resultsFound;
}
