{
  final AnAction suppressAction=new AnAction(InspectionsBundle.message("inspection.quickfix.suppress",tool.getDisplayName())){
    public void actionPerformed(    AnActionEvent e){
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          PsiDocumentManager.getInstance(myProject).commitAllDocuments();
          CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
            public void run(){
              for (              TreePath treePath : selectionPaths) {
                final InspectionTreeNode node=(InspectionTreeNode)treePath.getLastPathComponent();
                final List<RefElement> elementsToSuppress=myTree.getElementsToSuppressInSubTree(node);
                for (                final RefElement refElement : elementsToSuppress) {
                  final PsiElement element=refElement.getElement();
                  final IntentionAction action=getCorrectIntentionAction(tool.getDisplayName(),id,element);
                  ApplicationManager.getApplication().runWriteAction(new Runnable(){
                    public void run(){
                      try {
                        action.invoke(myProject,null,refElement.getElement().getContainingFile());
                      }
 catch (                      IncorrectOperationException e1) {
                        LOG.error(e1);
                      }
                    }
                  }
);
                }
                final List<RefElement> elementsToIgnore=new ArrayList<RefElement>();
                traverseRefElements(node,elementsToIgnore);
                for (                RefElement element : elementsToIgnore) {
                  tool.ignoreElement(element);
                }
              }
              InspectionResultsView.this.update();
            }
          }
,InspectionsBundle.message("inspection.quickfix.suppress"),null);
        }
      }
);
    }
    public void update(    AnActionEvent e){
      e.getPresentation().setEnabled(true);
      for (      TreePath treePath : selectionPaths) {
        final InspectionTreeNode node=(InspectionTreeNode)treePath.getLastPathComponent();
        final List<RefElement> elementsToSuppress=myTree.getElementsToSuppressInSubTree(node);
        for (        RefElement refElement : elementsToSuppress) {
          final PsiElement element=refElement.getElement();
          if (element instanceof PsiFile)           continue;
          final PsiFile file=element.getContainingFile();
          final IntentionAction action=getCorrectIntentionAction(tool.getDisplayName(),id,element);
          if (action.isAvailable(myProject,null,file)) {
            e.getPresentation().setEnabled(true);
            return;
          }
        }
      }
      e.getPresentation().setEnabled(false);
    }
  }
;
  return suppressAction;
}
