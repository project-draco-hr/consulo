{
  if (myDialog.getFieldsVisibility() != null) {
    for (    PsiField field : myFields) {
      setNewFieldVisibility(field);
    }
  }
  myNameToGetter=new com.intellij.util.containers.HashMap<String,PsiMethod>();
  myNameToSetter=new com.intellij.util.containers.HashMap<String,PsiMethod>();
  for (int i=0; i < myFields.length; i++) {
    PsiField field=myFields[i];
    if (myDialog.isToEncapsulateGet()) {
      PsiMethod[] prototypes=myDialog.getGetterPrototypes();
      addOrChangeAccessor(prototypes[i],myNameToGetter);
    }
    if (myDialog.isToEncapsulateSet() && !field.hasModifierProperty(PsiModifier.FINAL)) {
      PsiMethod[] prototypes=myDialog.getSetterPrototypes();
      addOrChangeAccessor(prototypes[i],myNameToSetter);
    }
  }
  Map<PsiFile,List<MyUsageInfo>> usagesInFiles=new HashMap<PsiFile,List<MyUsageInfo>>();
  for (  UsageInfo usage : usages) {
    PsiElement element=usage.getElement();
    if (element == null)     continue;
    final PsiFile file=element.getContainingFile();
    List<MyUsageInfo> usagesInFile=usagesInFiles.get(file);
    if (usagesInFile == null) {
      usagesInFile=new ArrayList<MyUsageInfo>();
      usagesInFiles.put(file,usagesInFile);
    }
    usagesInFile.add(((MyUsageInfo)usage));
  }
  for (  List<MyUsageInfo> usageInfos : usagesInFiles.values()) {
    RefactoringUtil.sortDepthFirstRightLeftOrder(usages);
    for (    MyUsageInfo info : usageInfos) {
      processUsage(info);
    }
  }
}
