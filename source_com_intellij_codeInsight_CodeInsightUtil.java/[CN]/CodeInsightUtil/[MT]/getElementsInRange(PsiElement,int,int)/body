{
  final List<PsiElement> list=new ArrayList<PsiElement>();
  final ASTNode leafElementAt1=root.getNode().findLeafElementAt(startOffset);
  if (leafElementAt1 == null)   return PsiElement.EMPTY_ARRAY;
  ASTNode leafElementAt2=root.getNode().findLeafElementAt(endOffset);
  if (leafElementAt2 == null && endOffset == root.getTextLength())   leafElementAt2=root.getNode().findLeafElementAt(endOffset - 1);
  if (leafElementAt2 == null)   return PsiElement.EMPTY_ARRAY;
  TreeElement commonParent=(TreeElement)TreeUtil.findCommonParent(leafElementAt1,leafElementAt2);
  LOG.assertTrue(commonParent != null);
  LOG.assertTrue(commonParent.getTextRange() != null);
  while (commonParent.getTreeParent() != null && commonParent.getTextRange().equals(commonParent.getTreeParent().getTextRange())) {
    commonParent=commonParent.getTreeParent();
  }
  final int currentOffset=commonParent.getTextRange().getStartOffset();
  final TreeElementVisitor visitor=new TreeElementVisitor(){
    int offset=currentOffset;
    public void visitLeaf(    LeafElement leaf){
      offset+=leaf.getTextLength();
    }
    public void visitComposite(    CompositeElement composite){
      ChameleonTransforming.transformChildren(composite);
      TreeElement child=(TreeElement)composite.getFirstChildNode();
      for (; child != null; child=child.getTreeNext()) {
        int start=offset;
        if (offset > endOffset)         break;
        child.acceptTree(this);
        if (startOffset <= start && offset <= endOffset) {
          list.add(child.getPsi());
        }
      }
    }
  }
;
  commonParent.acceptTree(visitor);
  return list.toArray(new PsiElement[list.size()]);
}
