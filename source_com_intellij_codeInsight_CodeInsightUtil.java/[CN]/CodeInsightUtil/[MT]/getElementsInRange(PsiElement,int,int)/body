{
  final List<PsiElement> list=new ArrayList<PsiElement>();
  PsiElement element1=root.getNode().findLeafElementAt(startOffset).getPsi();
  if (element1 == null)   element1=root;
  ASTNode leafElementAt=root.getNode().findLeafElementAt(endOffset);
  if (leafElementAt == null && endOffset == root.getTextLength())   leafElementAt=root.getNode().findLeafElementAt(endOffset - 1);
  PsiElement element2=leafElementAt.getPsi();
  if (element2 == null)   element2=root;
  PsiElement commonParent=PsiTreeUtil.findCommonParent(element1,element2);
  LOG.assertTrue(commonParent != null);
  LOG.assertTrue(commonParent.getTextRange() != null);
  final int currentOffset=commonParent.getTextRange().getStartOffset();
  final PsiElementVisitor visitor=new PsiElementVisitor(){
    int offset=currentOffset;
    public void visitReferenceExpression(    PsiReferenceExpression expression){
      visitReferenceElement(expression);
    }
    public void visitElement(    PsiElement element){
      PsiElement child=element.getFirstChild();
      if (child == null) {
        offset+=element.getTextLength();
      }
 else {
        for (; child != null; child=child.getNextSibling()) {
          int start=offset;
          if (offset > endOffset)           break;
          child.accept(this);
          if (startOffset <= start && offset <= endOffset) {
            list.add(child);
          }
        }
      }
    }
  }
;
  commonParent.accept(visitor);
  return list.toArray(new PsiElement[list.size()]);
}
