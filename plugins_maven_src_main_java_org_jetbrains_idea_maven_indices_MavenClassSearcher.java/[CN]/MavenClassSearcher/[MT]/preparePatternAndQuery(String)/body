{
  pattern=pattern.toLowerCase();
  if (pattern.trim().length() == 0) {
    return new Pair<String,Query>(pattern,new MatchAllDocsQuery());
  }
  List<String> parts=StringUtil.split(pattern,".");
  StringBuilder newPattern=new StringBuilder();
  for (int i=0; i < parts.size() - 1; i++) {
    String each=parts.get(i);
    newPattern.append(each.trim());
    newPattern.append("*.");
  }
  String className=parts.get(parts.size() - 1);
  boolean exactSearch=className.endsWith(" ");
  newPattern.append(className.trim());
  if (!exactSearch)   newPattern.append("*");
  pattern=newPattern.toString();
  String queryPattern="*/" + pattern.replaceAll("\\.","/");
  return new Pair<String,Query>(pattern,new WildcardQuery(new Term(ArtifactInfo.NAMES,queryPattern)));
}
