{
  final CachedValuesManager manager=CachedValuesManager.getManager(myClass.getProject());
  final Object[] dependencies={PsiModificationTracker.OUT_OF_CODE_BLOCK_MODIFICATION_COUNT,myTreeChangeTracker};
  myConstructorsCache=manager.createCachedValue(new CachedValueProvider<PsiMethod[]>(){
    public Result<PsiMethod[]> compute(){
      return Result.create(PsiImplUtil.getConstructors(myClass),dependencies);
    }
  }
,false);
  myFieldsCache=manager.createCachedValue(new CachedValueProvider<PsiField[]>(){
    public Result<PsiField[]> compute(){
      return Result.create(getAllFields(),dependencies);
    }
  }
,false);
  myMethodsCache=manager.createCachedValue(new CachedValueProvider<PsiMethod[]>(){
    public Result<PsiMethod[]> compute(){
      return Result.create(getAllMethods(),dependencies);
    }
  }
,false);
  myFieldsMapCache=manager.createCachedValue(new CachedValueProvider<Map<String,List<PsiField>>>(){
    public Result<Map<String,List<PsiField>>> compute(){
      return Result.create(getFieldsMap(),dependencies);
    }
  }
,false);
  myMethodsMapCache=manager.createCachedValue(new CachedValueProvider<Map<String,List<PsiMethod>>>(){
    public Result<Map<String,List<PsiMethod>>> compute(){
      return Result.create(getMethodsMap(),dependencies);
    }
  }
,false);
  myInnerClassesMapCache=manager.createCachedValue(new CachedValueProvider<Map<String,PsiClass>>(){
    public Result<Map<String,PsiClass>> compute(){
      return Result.create(getInnerClassesMap(),dependencies);
    }
  }
,false);
}
