{
  final Set<Usage> selectedUsages=replaceContext.getUsageView().getSelectedUsages();
  if (selectedUsages == null) {
    return;
  }
  Set<VirtualFile> readOnlyFiles=null;
  for (Iterator<Usage> i=selectedUsages.iterator(); i.hasNext(); ) {
    final VirtualFile file=((UsageInfo2UsageAdapter)i.next()).getFile();
    if (!file.isWritable()) {
      if (readOnlyFiles == null)       readOnlyFiles=new HashSet<VirtualFile>();
      readOnlyFiles.add(file);
    }
  }
  if (readOnlyFiles != null) {
    ReadonlyStatusHandler.getInstance(myProject).ensureFilesWritable(readOnlyFiles.toArray(new VirtualFile[readOnlyFiles.size()]));
  }
  if (FindInProjectUtil.hasReadOnlyUsages(selectedUsages)) {
    int result=Messages.showOkCancelDialog(replaceContext.getUsageView().getComponent(),"Occurrences found in read-only files.\n" + "The operation will not affect them.\n" + "Continue anyway?","Read-only Files Found",Messages.getWarningIcon());
    if (result != 0) {
      return;
    }
  }
  CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
    public void run(){
      doReplace(replaceContext,selectedUsages);
      for (      final Usage selectedUsage : selectedUsages) {
        replaceContext.getUsageView().removeUsage(selectedUsage);
      }
      if (replaceContext.getUsageView().getUsages().size() == 0) {
        replaceContext.getUsageView().close();
        return;
      }
      replaceContext.getUsageView().getComponent().requestFocus();
    }
  }
,"Replace",null);
}
