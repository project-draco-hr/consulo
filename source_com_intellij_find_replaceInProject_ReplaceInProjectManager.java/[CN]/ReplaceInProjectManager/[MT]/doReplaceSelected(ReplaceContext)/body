{
  final Set<Usage> selectedUsages=replaceContext.getUsageView().getSelectedUsages();
  if (selectedUsages == null) {
    return;
  }
  Set<VirtualFile> readOnlyFiles=null;
  for (  final Usage usage : selectedUsages) {
    final VirtualFile file=((UsageInfo2UsageAdapter)usage).getFile();
    if (!file.isWritable()) {
      if (readOnlyFiles == null)       readOnlyFiles=new HashSet<VirtualFile>();
      readOnlyFiles.add(file);
    }
  }
  if (readOnlyFiles != null) {
    ReadonlyStatusHandler.getInstance(myProject).ensureFilesWritable(readOnlyFiles.toArray(new VirtualFile[readOnlyFiles.size()]));
  }
  if (FindInProjectUtil.hasReadOnlyUsages(selectedUsages)) {
    int result=Messages.showOkCancelDialog(replaceContext.getUsageView().getComponent(),FindBundle.message("find.replace.occurrences.in.read.only.files.prompt"),FindBundle.message("find.replace.occurrences.in.read.only.files.title"),Messages.getWarningIcon());
    if (result != 0) {
      return;
    }
  }
  CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
    public void run(){
      doReplace(replaceContext,selectedUsages);
      for (      final Usage selectedUsage : selectedUsages) {
        replaceContext.getUsageView().removeUsage(selectedUsage);
      }
      if (replaceContext.getUsageView().getUsages().size() == 0) {
        replaceContext.getUsageView().close();
        return;
      }
      replaceContext.getUsageView().getComponent().requestFocus();
    }
  }
,FindBundle.message("find.replace.command"),null);
}
