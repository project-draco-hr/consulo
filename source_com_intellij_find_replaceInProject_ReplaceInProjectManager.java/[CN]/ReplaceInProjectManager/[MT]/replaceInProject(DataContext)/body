{
  final FindManager findManager=FindManager.getInstance(myProject);
  final FindModel findModel=(FindModel)findManager.getFindInProjectModel().clone();
  findModel.setReplaceState(true);
  FindInProjectUtil.setDirectoryName(findModel,dataContext);
  Editor editor=(Editor)dataContext.getData(DataConstants.EDITOR);
  if (editor != null) {
    String s=editor.getSelectionModel().getSelectedText();
    if (s != null && !s.contains("\r") && !s.contains("\n")) {
      findModel.setStringToFind(s);
    }
  }
  if (!findManager.showFindDialog(findModel)) {
    return;
  }
  final PsiDirectory psiDirectory=FindInProjectUtil.getPsiDirectory(findModel,myProject);
  if (!findModel.isProjectScope() && psiDirectory == null && findModel.getModuleName() == null) {
    return;
  }
  UsageViewManager manager=myProject.getComponent(UsageViewManager.class);
  if (manager == null) {
    return;
  }
  findManager.getFindInProjectModel().copyFrom(findModel);
  final FindModel findModelCopy=(FindModel)findModel.clone();
  final UsageViewPresentation presentation=FindInProjectUtil.setupViewPresentation(true,findModelCopy);
  final FindUsagesProcessPresentation processPresentation=FindInProjectUtil.setupProcessPresentation(myProject,true,presentation);
  final ReplaceContext[] context=new ReplaceContext[1];
  manager.searchAndShowUsages(new UsageTarget[]{new FindInProjectUtil.StringUsageTarget(findModelCopy.getStringToFind())},new Factory<UsageSearcher>(){
    public UsageSearcher create(){
      return new UsageSearcher(){
        public void generate(        final Processor<Usage> processor){
          myIsFindInProgress=true;
          FindInProjectUtil.findUsages(findModelCopy,psiDirectory,myProject,new FindInProjectUtil.AsyncFindUsagesProcessListener2ProcessorAdapter(processor));
          myIsFindInProgress=false;
        }
      }
;
    }
  }
,processPresentation,presentation,new UsageViewManager.UsageViewStateListener(){
    public void usageViewCreated(    UsageView usageView){
      context[0]=new ReplaceContext(usageView,findModelCopy);
      addReplaceActions(context[0]);
    }
    public void findingUsagesFinished(    final UsageView usageView){
      if (context[0] != null && findManager.getFindInProjectModel().isPromptOnReplace()) {
        SwingUtilities.invokeLater(new Runnable(){
          public void run(){
            replaceWithPrompt(context[0]);
          }
        }
);
      }
    }
  }
);
}
