{
  final FindManager findManager=FindManager.getInstance(myProject);
  final FindModel findModel=(FindModel)findManager.getFindInProjectModel().clone();
  findModel.setReplaceState(true);
  FindInProjectUtil.setDirectoryName(findModel,dataContext);
  Editor editor=(Editor)dataContext.getData(DataConstants.EDITOR);
  if (editor != null) {
    String s=editor.getSelectionModel().getSelectedText();
    if (s != null && (s.indexOf("\r") == -1) && (s.indexOf("\n") == -1)) {
      findModel.setStringToFind(s);
    }
  }
  if (!findManager.showFindDialog(findModel)) {
    return;
  }
  final PsiDirectory psiDirectory=FindInProjectUtil.getPsiDirectory(findModel,myProject);
  if (!findModel.isProjectScope() && psiDirectory == null && findModel.getModuleName() == null) {
    return;
  }
  com.intellij.usages.UsageViewManager manager=myProject.getComponent(com.intellij.usages.UsageViewManager.class);
  if (manager != null) {
    final UsageViewPresentation presentation=FindInProjectUtil.setupViewPresentation(true,findModel);
    final ReplaceContext context[]=new ReplaceContext[1];
    manager.searchAndShowUsages(new UsageTarget[]{new FindInProjectUtil.StringUsageTarget(findModel.getStringToFind())},new Factory<UsageSearcher>(){
      public UsageSearcher create(){
        return new UsageSearcher(){
          public void generate(          final Processor<Usage> processor){
            myIsFindInProgress=true;
            FindInProjectUtil.findUsages(findModel,psiDirectory,myProject,new AsyncFindUsagesProcessListener(){
              int count;
              public void foundUsage(              UsageInfo info){
                ++count;
                processor.process(new UsageInfo2UsageAdapter(info));
              }
              public void findUsagesCompleted(){
              }
              public int getCount(){
                return count;
              }
            }
);
            myIsFindInProgress=false;
          }
        }
;
      }
    }
,true,true,presentation,new Factory<ProgressIndicator>(){
      public ProgressIndicator create(){
        return new FindProgressIndicator(myProject,FindInProjectUtil.getTitleForScope(findModel));
      }
    }
,new UsageViewManager.UsageViewStateListener(){
      public void usageViewCreated(      UsageView usageView){
        context[0]=new ReplaceContext(usageView,findModel);
        addReplaceActions(context[0]);
      }
      public void findingUsagesFinished(){
        if (context[0] != null && findManager.getFindInProjectModel().isPromptOnReplace()) {
          SwingUtilities.invokeLater(new Runnable(){
            public void run(){
              replaceWithPrompt(context[0]);
            }
          }
);
        }
      }
    }
);
  }
}
