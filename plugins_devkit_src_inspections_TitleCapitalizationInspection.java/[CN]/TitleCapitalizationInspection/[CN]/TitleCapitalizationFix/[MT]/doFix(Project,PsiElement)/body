{
  if (element instanceof PsiLiteralExpression) {
    final PsiLiteralExpression literalExpression=(PsiLiteralExpression)element;
    final Object value=literalExpression.getValue();
    if (!(value instanceof String)) {
      return;
    }
    final String string=(String)value;
    final PsiElementFactory factory=JavaPsiFacade.getElementFactory(project);
    final PsiExpression newExpression=factory.createExpressionFromText('"' + StringUtil.wordsToBeginFromUpperCase(string) + '"',element);
    literalExpression.replace(newExpression);
  }
 else   if (element instanceof PsiMethodCallExpression) {
    final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)element;
    final PsiMethod method=methodCallExpression.resolveMethod();
    final PsiExpression returnValue=PropertyUtils.getGetterReturnExpression(method);
    if (returnValue != null) {
      doFix(project,returnValue);
    }
    final Property property=getPropertyArgument(methodCallExpression);
    if (property == null) {
      return;
    }
    final String value=property.getUnescapedValue();
    if (value == null) {
      return;
    }
    final String capitalizedString=StringUtil.wordsToBeginFromUpperCase(value);
    property.setValue(capitalizedString);
  }
 else   if (element instanceof PsiReferenceExpression) {
    final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)element;
    final PsiElement target=referenceExpression.resolve();
    if (!(target instanceof PsiVariable)) {
      return;
    }
    final PsiVariable variable=(PsiVariable)target;
    if (variable.hasModifierProperty(PsiModifier.FINAL)) {
      doFix(project,variable.getInitializer());
    }
  }
}
