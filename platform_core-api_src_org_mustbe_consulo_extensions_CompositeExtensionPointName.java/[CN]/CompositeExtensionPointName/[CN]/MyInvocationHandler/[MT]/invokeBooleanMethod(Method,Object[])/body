{
  method.setAccessible(true);
  Boolean breakValue=Boolean.TRUE;
  BooleanBreakResult annotation=method.getAnnotation(BooleanBreakResult.class);
  if (annotation != null) {
    breakValue=annotation.breakValue();
  }
  for (  T listener : myExtensions) {
    try {
      Boolean value=(Boolean)method.invoke(listener,args);
      if (breakValue.equals(value)) {
        return value;
      }
    }
 catch (    AbstractMethodError ignored) {
    }
catch (    RuntimeException e) {
      throw e;
    }
catch (    Exception e) {
      final Throwable cause=e.getCause();
      if (cause instanceof RuntimeException) {
        throw (RuntimeException)cause;
      }
 else       if (!(cause instanceof AbstractMethodError)) {
        LOGGER.error(cause);
      }
    }
  }
  return !breakValue;
}
