{
  ArrayList<EditorPlace> editorPlaces=new ArrayList<EditorPlace>();
  EditorPlace.EditorListener placeListener=new EditorPlace.EditorListener(){
    @Override public void onEditorCreated(    EditorPlace place){
      if (myDuringCreation)       return;
      disposeMergeList();
      myDuringCreation=true;
      try {
        tryInitView();
      }
  finally {
        myDuringCreation=false;
      }
    }
    @Override public void onEditorReleased(    Editor releasedEditor){
      LOG.assertTrue(!myDuringCreation);
      disposeMergeList();
    }
  }
;
  for (int i=0; i < EDITORS_COUNT; i++) {
    EditorPlace editorPlace=new EditorPlace(new DiffEditorState(i),indexToColumn(i),this);
    Disposer.register(parent,editorPlace);
    editorPlaces.add(editorPlace);
    editorPlace.addListener(placeListener);
    myEditorsPanels[i]=new LabeledComponent();
    myEditorsPanels[i].setLabelLocation(BorderLayout.NORTH);
    myEditorsPanels[i].setComponent(editorPlace);
  }
  FontSizeSynchronizer.attachTo(editorPlaces);
  myPanel=new DiffPanelOuterComponent(TextDiffType.MERGE_TYPES,createToolbar());
  myPanel.insertDiffComponent(new ThreePanels(myEditorsPanels,myDividers),new MyScrollingPanel());
  myProvider=new MyDataProvider();
  myPanel.setDataProvider(myProvider);
  myBuilder=builder;
}
