{
  setTitle(data.getWindowTitle());
  disposeMergeList();
  for (int i=0; i < EDITORS_COUNT; i++) {
    getEditorPlace(i).setDocument(null);
  }
  LOG.assertTrue(!myDuringCreation);
  myDuringCreation=true;
  myProvider.putData(data.getGenericData());
  try {
    myData=data;
    String[] titles=myData.getContentTitles();
    for (int i=0; i < myEditorsPanels.length; i++) {
      LabeledComponent editorsPanel=myEditorsPanels[i];
      editorsPanel.getLabel().setText(titles[i].isEmpty() ? " " : titles[i]);
    }
    createMergeList();
    data.customizeToolbar(myPanel.resetToolbar());
    myPanel.registerToolbarActions();
    if (data instanceof MergeRequestImpl && myBuilder != null) {
      Convertor<DialogWrapper,Boolean> preOkHook=new Convertor<DialogWrapper,Boolean>(){
        @Override public Boolean convert(        DialogWrapper dialog){
          ChangeCounter counter=ChangeCounter.getOrCreate(myMergeList);
          int changes=counter.getChangeCounter();
          int conflicts=counter.getConflictCounter();
          if (changes == 0 && conflicts == 0)           return true;
          return Messages.showYesNoDialog(dialog.getRootPane(),DiffBundle.message("merge.dialog.apply.partially.resolved.changes.confirmation.message",changes,conflicts),DiffBundle.message("apply.partially.resolved.merge.dialog.title"),Messages.getQuestionIcon()) == Messages.YES;
        }
      }
;
      ((MergeRequestImpl)data).setActions(myBuilder,this,preOkHook);
    }
  }
  finally {
    myDuringCreation=false;
  }
}
