{
  final RequestManagerImpl requestManager=debugProcess.getRequestsManager();
  final ThreadReference oldFilterThread=requestManager.getFilterThread();
  if (Comparing.equal(newFilterThread,oldFilterThread)) {
    return;
  }
  requestManager.setFilterThread(newFilterThread);
  if (newFilterThread == null || oldFilterThread != null) {
    final List<Breakpoint> breakpoints=getBreakpoints();
    for (    Breakpoint breakpoint : breakpoints) {
      if (LineBreakpoint.CATEGORY.equals(breakpoint.getCategory()) || MethodBreakpoint.CATEGORY.equals(breakpoint.getCategory())) {
        requestManager.deleteRequest(breakpoint);
        breakpoint.createRequest(debugProcess);
      }
    }
  }
 else {
abstract class FilterSetter<T extends EventRequest> {
      void applyFilter(      @NotNull final List<T> requests,      final ThreadReference thread){
        for (        T request : requests) {
          try {
            final boolean wasEnabled=request.isEnabled();
            if (wasEnabled) {
              request.disable();
            }
            addFilter(request,thread);
            if (wasEnabled) {
              request.enable();
            }
          }
 catch (          InternalException e) {
            LOG.info(e);
          }
        }
      }
      protected abstract void addFilter(      final T request,      final ThreadReference thread);
    }
    final EventRequestManager eventRequestManager=requestManager.getVMRequestManager();
    new FilterSetter<BreakpointRequest>(){
      @Override protected void addFilter(      @NotNull final BreakpointRequest request,      final ThreadReference thread){
        request.addThreadFilter(thread);
      }
    }
.applyFilter(eventRequestManager.breakpointRequests(),newFilterThread);
    new FilterSetter<MethodEntryRequest>(){
      @Override protected void addFilter(      @NotNull final MethodEntryRequest request,      final ThreadReference thread){
        request.addThreadFilter(thread);
      }
    }
.applyFilter(eventRequestManager.methodEntryRequests(),newFilterThread);
    new FilterSetter<MethodExitRequest>(){
      @Override protected void addFilter(      @NotNull final MethodExitRequest request,      final ThreadReference thread){
        request.addThreadFilter(thread);
      }
    }
.applyFilter(eventRequestManager.methodExitRequests(),newFilterThread);
  }
}
