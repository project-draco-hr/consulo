{
synchronized (lock) {
    LOG.info("Space waste in " + path + " is "+ myDataTable.getWaste()+ " bytes. Compacting now.");
    long start=System.currentTimeMillis();
    try {
      File newDataFile=new File(path + ".data.temp");
      FileUtil.delete(newDataFile);
      newDataFile.createNewFile();
      File oldDataFile=new File(path + ".data");
      DataTable newDataTable=new DataTable(newDataFile,myPool);
      final int count=myRecordsTable.getRecordsCount();
      for (int i=0; i < count; i++) {
        final long addr=myRecordsTable.getAddress(i);
        final int size=myRecordsTable.getSize(i);
        if (addr != 0 && size != 0) {
          final int capacity=calcCapacity(size);
          final long newaddr=newDataTable.allocateSpace(capacity);
          final byte[] bytes=new byte[size];
          myDataTable.readBytes(addr,bytes);
          newDataTable.writeBytes(newaddr,bytes);
          myRecordsTable.setAddress(i,newaddr);
          myRecordsTable.setCapacity(i,capacity);
        }
      }
      myDataTable.dispose();
      newDataTable.dispose();
      if (!FileUtil.delete(oldDataFile)) {
        throw new IOException("Can't delete file: " + oldDataFile);
      }
      newDataFile.renameTo(oldDataFile);
      myDataTable=new DataTable(oldDataFile,myPool);
    }
 catch (    IOException e) {
      LOG.info("Compact failed: " + e.getMessage());
    }
    long timedelta=System.currentTimeMillis() - start;
    LOG.info("Done compacting in " + timedelta + "msec.");
  }
}
