{
  if (memberPrototypes.isEmpty())   return memberPrototypes;
  PsiElement anchor=findAnchor(file,offset);
  if (anchor == null)   return null;
  PsiClass aClass=(PsiClass)anchor.getParent();
  PsiJavaToken lBrace=aClass.getLBrace();
  if (lBrace == null) {
    anchor=null;
  }
 else {
    PsiJavaToken rBrace=aClass.getRBrace();
    if (!isChildInRange(anchor,lBrace.getNextSibling(),rBrace)) {
      anchor=null;
    }
  }
  if (anchor instanceof PsiWhiteSpace) {
    final ASTNode spaceNode=anchor.getNode();
    anchor=anchor.getNextSibling();
    if (spaceNode.getStartOffset() <= offset && spaceNode.getStartOffset() + spaceNode.getTextLength() >= offset) {
      final ASTNode singleNewLineWhitespace=file.getManager().getElementFactory().createWhiteSpaceFromText(spaceNode.getText().substring(0,offset - spaceNode.getStartOffset())).getNode();
      spaceNode.getTreeParent().replaceChild(spaceNode,singleNewLineWhitespace);
    }
  }
  PsiElement element=anchor;
  while (true) {
    if (element == null)     break;
    if (element instanceof PsiField || element instanceof PsiMethod || element instanceof PsiClassInitializer)     break;
    element=element.getNextSibling();
  }
  if (element instanceof PsiField) {
    PsiField field=(PsiField)element;
    if (!field.getTypeElement().getParent().equals(field)) {
      field.normalizeDeclaration();
      anchor=field;
    }
  }
  return insertMembersBeforeAnchor(aClass,anchor,memberPrototypes);
}
