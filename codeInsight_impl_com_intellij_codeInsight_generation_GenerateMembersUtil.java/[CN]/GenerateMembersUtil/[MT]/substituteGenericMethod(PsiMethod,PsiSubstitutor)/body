{
  Project project=method.getProject();
  PsiElementFactory factory=method.getManager().getElementFactory();
  PsiMethod newMethod;
  boolean isRaw=PsiUtil.isRawSubstitutor(method,substitutor);
  PsiTypeParameter[] typeParams=method.getTypeParameters();
  try {
    PsiType returnType=method.getReturnType();
    if (method.isConstructor()) {
      newMethod=factory.createConstructor();
      newMethod.getNameIdentifier().replace(factory.createIdentifier(method.getName()));
    }
 else {
      newMethod=factory.createMethod(method.getName(),substituteType(substitutor,returnType,isRaw));
    }
    RefactoringUtil.setVisibility(newMethod.getModifierList(),VisibilityUtil.getVisibilityModifier(method.getModifierList()));
    PsiDocComment docComment=((PsiMethod)method.getNavigationElement()).getDocComment();
    if (docComment != null) {
      newMethod.addAfter(docComment,null);
    }
    PsiParameter[] parameters=method.getParameterList().getParameters();
    CodeStyleManager codeStyleManager=CodeStyleManager.getInstance(project);
    Map<PsiType,Pair<String,Integer>> m=new HashMap<PsiType,Pair<String,Integer>>();
    for (int i=0; i < parameters.length; i++) {
      PsiParameter parameter=parameters[i];
      PsiType paramType=substituteType(substitutor,parameter.getType(),isRaw);
      @NonNls String paramName=parameter.getName();
      if (paramName == null || !paramType.equals(parameter.getType())) {
        Pair<String,Integer> pair=m.get(paramType);
        if (pair != null) {
          paramName=pair.first + pair.second;
          m.put(paramType,Pair.create(pair.first,pair.second.intValue() + 1));
        }
 else {
          String[] names=codeStyleManager.suggestVariableName(VariableKind.PARAMETER,null,null,paramType).names;
          if (names.length > 0) {
            paramName=names[0];
          }
 else           paramName="p" + i;
          m.put(paramType,new Pair<String,Integer>(paramName,1));
        }
      }
      if (paramName == null)       paramName="p" + i;
      PsiParameter newParameter=factory.createParameter(paramName,paramType);
      newMethod.getParameterList().add(newParameter);
    }
    for (    PsiTypeParameter typeParam : typeParams) {
      if (substitutor.substitute(typeParam) != null)       newMethod.getTypeParameterList().add(typeParam);
    }
    PsiClassType[] thrownTypes=method.getThrowsList().getReferencedTypes();
    for (    PsiClassType thrownType : thrownTypes) {
      newMethod.getThrowsList().add(factory.createReferenceElementByType((PsiClassType)substituteType(substitutor,thrownType,isRaw)));
    }
    return newMethod;
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
  return method;
}
