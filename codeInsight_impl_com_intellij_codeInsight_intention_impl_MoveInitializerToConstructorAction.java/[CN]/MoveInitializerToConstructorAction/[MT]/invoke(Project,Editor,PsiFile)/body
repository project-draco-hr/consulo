{
  if (!CodeInsightUtil.prepareFileForWrite(file))   return;
  int offset=editor.getCaretModel().getOffset();
  PsiElement element=file.findElementAt(offset);
  final PsiField field=PsiTreeUtil.getParentOfType(element,PsiField.class);
  PsiClass aClass=field.getContainingClass();
  PsiMethod[] constructors=aClass.getConstructors();
  Collection<PsiMethod> constructorsToAddInitialization;
  if (constructors.length == 0) {
    IntentionAction addDefaultConstructorFix=QuickFixFactory.getInstance().createAddDefaultConstructorFix(aClass);
    addDefaultConstructorFix.invoke(project,editor,file);
    constructorsToAddInitialization=Arrays.asList(aClass.getConstructors());
  }
 else {
    constructorsToAddInitialization=new ArrayList<PsiMethod>(Arrays.asList(constructors));
    for (Iterator<PsiMethod> iterator=constructorsToAddInitialization.iterator(); iterator.hasNext(); ) {
      PsiMethod ctr=iterator.next();
      List<PsiMethod> chained=HighlightControlFlowUtil.getChainedConstructors(ctr);
      if (chained != null) {
        iterator.remove();
      }
    }
  }
  PsiElement toMove=null;
  for (  PsiMethod constructor : constructorsToAddInitialization) {
    PsiCodeBlock codeBlock=constructor.getBody();
    PsiElement added=addAssignment(codeBlock,field);
    if (toMove == null)     toMove=added;
  }
  field.getInitializer().delete();
  if (toMove != null) {
    editor.getCaretModel().moveToOffset(toMove.getTextOffset());
    editor.getScrollingModel().scrollToCaret(ScrollType.MAKE_VISIBLE);
  }
}
