{
  try {
    if (myInlineThisOnly) {
      if (myMethod.isConstructor() && InlineMethodHandler.isChainingConstructor(myMethod)) {
        PsiCall constructorCall=RefactoringUtil.getEnclosingConstructorCall(myReference);
        if (constructorCall != null) {
          inlineConstructorCall(constructorCall);
        }
      }
 else {
        myReference=addBracesWhenNeeded(new PsiReferenceExpression[]{(PsiReferenceExpression)myReference})[0];
        inlineMethodCall((PsiReferenceExpression)myReference);
      }
    }
 else {
      RefactoringUtil.sortDepthFirstRightLeftOrder(usages);
      if (myMethod.isConstructor()) {
        for (        UsageInfo usage : usages) {
          PsiElement element=usage.getElement();
          if (element instanceof PsiJavaCodeReferenceElement) {
            PsiCall constructorCall=RefactoringUtil.getEnclosingConstructorCall((PsiJavaCodeReferenceElement)element);
            if (constructorCall != null) {
              inlineConstructorCall(constructorCall);
            }
          }
 else           if (element instanceof PsiEnumConstant) {
            inlineConstructorCall((PsiEnumConstant)element);
          }
 else {
            GenericInlineHandler.inlineReference(usage,myMethod,myInliners);
          }
        }
        myMethod.delete();
      }
 else {
        List<PsiReferenceExpression> refExprList=new ArrayList<PsiReferenceExpression>();
        final List<PsiElement> imports2Delete=new ArrayList<PsiElement>();
        for (        final UsageInfo usage : usages) {
          final PsiElement element=usage.getElement();
          if (element instanceof PsiReferenceExpression) {
            refExprList.add((PsiReferenceExpression)element);
          }
 else           if (element instanceof PsiImportStaticReferenceElement) {
            imports2Delete.add(PsiTreeUtil.getParentOfType(element,PsiImportStaticStatement.class));
          }
 else           if (JavaLanguage.INSTANCE != element.getLanguage()) {
            GenericInlineHandler.inlineReference(usage,myMethod,myInliners);
          }
        }
        PsiReferenceExpression[] refs=refExprList.toArray(new PsiReferenceExpression[refExprList.size()]);
        refs=addBracesWhenNeeded(refs);
        for (        PsiReferenceExpression ref : refs) {
          if (ref instanceof PsiMethodReferenceExpression)           continue;
          inlineMethodCall(ref);
        }
        for (        PsiElement psiElement : imports2Delete) {
          if (psiElement != null && psiElement.isValid()) {
            psiElement.delete();
          }
        }
        if (myMethod.isWritable())         myMethod.delete();
      }
    }
    removeAddedBracesWhenPossible();
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
