{
  return of(Ref.create(iterator)).intercept(new Function<Iterator<Ref<Iterator<E>>>,Iterator<E>>(){
    @Override public Iterator<E> fun(    Iterator<Ref<Iterator<E>>> iterator){
      Ref<Iterator<E>> ref=iterator.next();
      Iterator<E> result=ref.get();
      if (result == null)       throw new UnsupportedOperationException();
      ref.set(null);
      return result;
    }
  }
);
}
