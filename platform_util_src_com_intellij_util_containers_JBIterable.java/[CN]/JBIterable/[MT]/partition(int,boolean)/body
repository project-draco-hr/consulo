{
  if (n <= 0)   throw new IllegalArgumentException(n + " <= 0");
  return intercept(new Function<Iterator<E>,Iterator<List<E>>>(){
    @Override public Iterator<List<E>> fun(    Iterator<E> iterator){
      final Iterator<E> orig=iterator;
      return new JBIterator<List<E>>(){
        @Override protected List<E> nextImpl(){
          ArrayList<E> next=ContainerUtilRt.newArrayListWithCapacity(n);
          for (          E e : once(orig).take(n)) {
            next.add(e);
          }
          return next.isEmpty() || strict && next.size() < n ? stop() : next;
        }
      }
;
    }
  }
);
}
