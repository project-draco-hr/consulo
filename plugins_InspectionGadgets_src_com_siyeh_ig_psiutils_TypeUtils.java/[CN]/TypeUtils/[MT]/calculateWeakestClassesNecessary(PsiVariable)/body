{
  final PsiType variableType=variable.getType();
  if (!(variableType instanceof PsiClassType)) {
    return null;
  }
  final PsiClassType variableClassType=(PsiClassType)variableType;
  final PsiClass variableClass=variableClassType.resolve();
  if (variableClass == null) {
    return null;
  }
  final PsiManager manager=variable.getManager();
  final GlobalSearchScope scope=variable.getResolveScope();
  final Set<PsiClass> weakestTypeClasses=new HashSet();
  final PsiClass javaLangObjectClass=manager.findClass("java.lang.Object",scope);
  if (variableClass.equals(javaLangObjectClass)) {
    return null;
  }
  weakestTypeClasses.add(javaLangObjectClass);
  final Query<PsiReference> query=ReferencesSearch.search(variable);
  for (  PsiReference reference : query) {
    if (weakestTypeClasses.contains(variableClass)) {
      return null;
    }
    final PsiElement referenceElement=reference.getElement();
    final PsiElement referenceParent=referenceElement.getParent();
    final PsiElement referenceGrandParent=referenceParent.getParent();
    if (referenceParent instanceof PsiExpressionList) {
      if (!(referenceGrandParent instanceof PsiMethodCallExpression)) {
        return null;
      }
      final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)referenceGrandParent;
      final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
      final PsiElement methodElement=methodExpression.resolve();
      if (!(methodElement instanceof PsiMethod)) {
        return null;
      }
      final PsiMethod method=(PsiMethod)methodElement;
      if (!(referenceElement instanceof PsiExpression)) {
        return null;
      }
      final PsiExpression expression=(PsiExpression)referenceElement;
      final PsiExpressionList expressionList=(PsiExpressionList)referenceParent;
      final int index=getExpressionIndex(expression,expressionList);
      final PsiParameterList parameterList=method.getParameterList();
      final PsiParameter[] parameters=parameterList.getParameters();
      final PsiParameter parameter=parameters[index];
      final PsiType type=parameter.getType();
      if (!(type instanceof PsiClassType)) {
        return null;
      }
      final PsiClassType classType=(PsiClassType)type;
      final PsiClass aClass=classType.resolve();
      if (aClass == null) {
        return null;
      }
      checkClass(weakestTypeClasses,aClass);
    }
 else     if (referenceGrandParent instanceof PsiMethodCallExpression) {
      final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)referenceGrandParent;
      final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
      final PsiElement methodElement=methodExpression.resolve();
      if (!(methodElement instanceof PsiMethod)) {
        return null;
      }
      final PsiMethod method=(PsiMethod)methodElement;
      final PsiMethod[] superMethods=method.findDeepestSuperMethods();
      for (      PsiMethod superMethod : superMethods) {
        final PsiClass containingClass=superMethod.getContainingClass();
        checkClass(weakestTypeClasses,containingClass);
      }
    }
 else     if (referenceParent instanceof PsiAssignmentExpression) {
      final PsiAssignmentExpression assignmentExpression=(PsiAssignmentExpression)referenceParent;
      final PsiExpression lhs=assignmentExpression.getLExpression();
      final PsiExpression rhs=assignmentExpression.getRExpression();
      if (referenceElement.equals(lhs) && rhs != null) {
        final PsiType type=rhs.getType();
        if (!(type instanceof PsiClassType)) {
          return null;
        }
        final PsiClassType classType=(PsiClassType)type;
        final PsiClass aClass=classType.resolve();
        checkClass(weakestTypeClasses,aClass);
      }
 else       if (referenceElement.equals(rhs)) {
        final PsiType type=lhs.getType();
        if (!(type instanceof PsiClassType)) {
          return null;
        }
        final PsiClassType classType=(PsiClassType)type;
        final PsiClass aClass=classType.resolve();
        checkClass(weakestTypeClasses,aClass);
      }
    }
  }
  return Collections.unmodifiableCollection(weakestTypeClasses);
}
