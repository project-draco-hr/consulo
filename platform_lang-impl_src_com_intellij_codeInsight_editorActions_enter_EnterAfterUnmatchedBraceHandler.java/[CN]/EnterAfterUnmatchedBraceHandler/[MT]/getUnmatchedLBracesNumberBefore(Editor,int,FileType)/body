{
  if (offset == 0) {
    return -1;
  }
  CharSequence chars=editor.getDocument().getCharsSequence();
  if (chars.charAt(offset - 1) != '{') {
    return -1;
  }
  EditorHighlighter highlighter=((EditorEx)editor).getHighlighter();
  HighlighterIterator iterator=highlighter.createIterator(offset - 1);
  BraceMatcher braceMatcher=BraceMatchingUtil.getBraceMatcher(fileType,iterator);
  if (!braceMatcher.isLBraceToken(iterator,chars,fileType) || !braceMatcher.isStructuralBrace(iterator,chars,fileType)) {
    return -1;
  }
  Language language=iterator.getTokenType().getLanguage();
  iterator=highlighter.createIterator(0);
  int lBracesBeforeOffset=0;
  int lBracesAfterOffset=0;
  int rBracesBeforeOffset=0;
  int rBracesAfterOffset=0;
  for (; !iterator.atEnd(); iterator.advance()) {
    IElementType tokenType=iterator.getTokenType();
    if (!tokenType.getLanguage().equals(language) || !braceMatcher.isStructuralBrace(iterator,chars,fileType)) {
      continue;
    }
    boolean beforeOffset=iterator.getStart() < offset;
    if (braceMatcher.isLBraceToken(iterator,chars,fileType)) {
      if (beforeOffset) {
        lBracesBeforeOffset++;
      }
 else {
        lBracesAfterOffset++;
      }
    }
 else     if (braceMatcher.isRBraceToken(iterator,chars,fileType)) {
      if (beforeOffset) {
        rBracesBeforeOffset++;
      }
 else {
        rBracesAfterOffset++;
      }
    }
  }
  return lBracesBeforeOffset - rBracesBeforeOffset - (rBracesAfterOffset - lBracesAfterOffset);
}
