{
  final String text=StringUtil.join(failures.values(),new Function<IOException,String>(){
    @Override public String fun(    IOException e){
      return e.getMessage();
    }
  }
,"\n");
  final DialogWrapper dialog=new DialogWrapper(null){
{
      init();
      setTitle(UIBundle.message("cannot.save.files.dialog.title"));
    }
    @Override protected void createDefaultActions(){
      super.createDefaultActions();
      myOKAction.putValue(Action.NAME,UIBundle.message("cannot.save.files.dialog.revert.changes"));
      myOKAction.putValue(DEFAULT_ACTION,null);
      myCancelAction.putValue(Action.NAME,CommonBundle.getCloseButtonText());
    }
    @Override protected JComponent createCenterPanel(){
      final JPanel panel=new JPanel(new BorderLayout(0,5));
      panel.add(new JLabel(UIBundle.message("cannot.save.files.dialog.message")),BorderLayout.NORTH);
      final JTextPane area=new JTextPane();
      area.setText(text);
      area.setEditable(false);
      area.setMinimumSize(new Dimension(area.getMinimumSize().width,50));
      panel.add(new JBScrollPane(area,ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER),BorderLayout.CENTER);
      return panel;
    }
  }
;
  final AsyncResult<Boolean> result=dialog.showAndGetOk();
  result.doWhenDone(new AsyncResult.Handler<Boolean>(){
    @Override public void run(    Boolean isOk){
      if (isOk) {
        for (        Document document : failures.keySet()) {
          reloadFromDisk(document);
        }
      }
    }
  }
);
}
