{
  boolean committed=false;
  try {
    VirtualFile file=getFile(document);
    if (file == null || !file.isValid() || file instanceof LightVirtualFile || !isFileModified(file)) {
      myUnsavedDocuments.remove(document);
      fireUnsavedDocumentsDropped();
      LOG.assertTrue(!myUnsavedDocuments.contains(document));
      return;
    }
    if (needsRefresh(file)) {
      file.refresh(false,false);
      if (!myUnsavedDocuments.contains(document))       return;
      if (!file.isValid())       return;
    }
    for (    FileDocumentSynchronizationVetoer vetoer : Extensions.getExtensions(FileDocumentSynchronizationVetoer.EP_NAME)) {
      if (!vetoer.maySaveDocument(document)) {
        return;
      }
    }
    try {
      myBus.syncPublisher(AppTopics.FILE_DOCUMENT_SYNC).beforeDocumentSaving(document);
    }
 catch (    Exception e) {
      LOG.error(e);
    }
    for (    FileDocumentManagerListener listener : getListeners()) {
      listener.beforeDocumentSaving(document);
    }
    LOG.assertTrue(file.isValid());
    String text=document.getText();
    String lineSeparator=getLineSeparator(document,file);
    if (!lineSeparator.equals("\n")) {
      text=StringUtil.convertLineSeparators(text,lineSeparator);
    }
    Project project=ProjectLocator.getInstance().guessProjectForFile(file);
    Writer writer=null;
    try {
      writer=LoadTextUtil.getWriter(project,file,this,text,document.getModificationStamp());
      writer.write(text);
    }
  finally {
      if (writer != null) {
        writer.close();
      }
    }
    committed=true;
  }
 catch (  IOException e) {
    reportErrorOnSave(e);
    committed=false;
  }
 finally {
    if (committed) {
      myUnsavedDocuments.remove(document);
      LOG.assertTrue(!myUnsavedDocuments.contains(document));
      ((DocumentEx)document).clearLineModificationFlags();
    }
  }
}
