{
  DocumentEx document=(DocumentEx)getCachedDocument(file);
  if (document == null) {
    if (file.isDirectory() || SingleRootFileViewProvider.isTooLargeForContentLoading(file)) {
      return null;
    }
    if (isBinaryWithoutDecompiler(file)) {
      FileType fileType=file.getFileType();
      if (fileType == UnknownFileType.INSTANCE)       fileType=FileTypeManager.getInstance().detectFileTypeFromContent(file);
      if (fileType.isBinary())       return null;
    }
    final CharSequence text=LoadTextUtil.loadText(file);
synchronized (lock) {
      document=(DocumentEx)getCachedDocument(file);
      if (document != null)       return document;
      document=(DocumentEx)createDocument(text,file);
      document.setModificationStamp(file.getModificationStamp());
      final FileType fileType=file.getFileType();
      document.setReadOnly(!file.isWritable() || fileType.isBinary());
      file.putUserData(DOCUMENT_KEY,new WeakReference<Document>(document));
      document.putUserData(FILE_KEY,file);
      if (!(file instanceof LightVirtualFile || file.getFileSystem() instanceof DummyFileSystem)) {
        document.addDocumentListener(new DocumentAdapter(){
          @Override public void documentChanged(          DocumentEvent e){
            final Document document=e.getDocument();
            myUnsavedDocuments.add(document);
            final Runnable currentCommand=CommandProcessor.getInstance().getCurrentCommand();
            Project project=currentCommand == null ? null : CommandProcessor.getInstance().getCurrentCommandProject();
            String lineSeparator=CodeStyleFacade.getInstance(project).getLineSeparator();
            document.putUserData(LINE_SEPARATOR_KEY,lineSeparator);
            if (areTooManyDocumentsInTheQueue(myUnsavedDocuments)) {
              saveAllDocumentsLater();
            }
          }
        }
);
      }
    }
    myMultiCaster.fileContentLoaded(file,document);
  }
  return document;
}
