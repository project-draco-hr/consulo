{
  myTable.getColumnModel().getColumn(NEW_NAME_COLUMN).setCellRenderer(new ColoredTableCellRenderer(){
    protected void customizeCellRenderer(    JTable table,    Object value,    boolean selected,    boolean hasFocus,    int row,    int column){
      T element=getElements().get(row);
      String errorText=getErrorText(element);
      setToolTipText(errorText);
      append(String.valueOf(value),highlightIfNeeded(SimpleTextAttributes.REGULAR_ATTRIBUTES,errorText));
    }
  }
);
  final JTextField textField=new JTextField("");
  textField.setBorder(new EmptyBorder(0,0,0,0));
  myTable.getColumnModel().getColumn(NEW_NAME_COLUMN).setCellEditor(new DefaultCellEditor(textField){
    public boolean stopCellEditing(){
      removeListener(textField);
      return super.stopCellEditing();
    }
    public Component getTableCellEditorComponent(    JTable table,    Object value,    boolean isSelected,    final int row,    final int column){
      super.getTableCellEditorComponent(table,value,isSelected,row,column);
      removeListener(textField);
      myCellEditorListener=new DocumentAdapter(){
        protected void textChanged(        DocumentEvent e){
          myTableModel.setValueAt(getCellEditorValue(),row,column);
          setChecked(row,true);
          String errorText=myRenamer.getErrorText(getElements().get(row));
          textField.setToolTipText(errorText);
          Font font=textField.getFont();
          if (errorText != null) {
            textField.setForeground(SimpleTextAttributes.ERROR_ATTRIBUTES.getFgColor());
            textField.setFont(font.deriveFont(font.getStyle() | Font.ITALIC));
          }
 else {
            textField.setForeground(SimpleTextAttributes.REGULAR_ATTRIBUTES.getFgColor());
            textField.setFont(font.deriveFont(font.getStyle() & (~Font.ITALIC)));
          }
          repaintTable();
        }
      }
;
      textField.getDocument().addDocumentListener(myCellEditorListener);
      return textField;
    }
  }
);
}
