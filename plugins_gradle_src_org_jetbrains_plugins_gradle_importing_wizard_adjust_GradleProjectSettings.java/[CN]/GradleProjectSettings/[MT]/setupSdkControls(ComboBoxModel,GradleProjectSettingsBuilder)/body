{
  final JComboBox sdkComboBox=new JComboBox(model);
  sdkComboBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      Object selectedItem=sdkComboBox.getSelectedItem();
      if (selectedItem == null) {
        return;
      }
      if (myUseOnlyRegisteredSdks) {
        Sdk sdk=ProjectJdkTable.getInstance().findJdk(selectedItem.toString());
        if (sdk != null) {
          myProject.setSdk(sdk);
        }
      }
 else {
        myProject.setJdkVersion(JavaSdkVersion.byDescription(selectedItem.toString()));
      }
    }
  }
);
  JRadioButton registeredSdksButton=new JRadioButton(GradleBundle.message("gradle.import.structure.settings.label.sdk.configured"));
  JRadioButton allSdksButton=new JRadioButton(GradleBundle.message("gradle.import.structure.settings.label.sdk.all"));
  List<Sdk> javaSdks=ProjectJdkTable.getInstance().getSdksOfType(JavaSdk.getInstance());
  if (javaSdks.isEmpty()) {
    builder.add("gradle.import.structure.settings.label.sdk",sdkComboBox);
  }
 else {
    JPanel jdkKeyPanel=new JPanel(new GridBagLayout());
    GridBagConstraints constraints=new GridBagConstraints();
    constraints.anchor=GridBagConstraints.WEST;
    jdkKeyPanel.add(new JLabel(GradleBundle.message("gradle.import.structure.settings.label.sdk")),constraints);
    ButtonGroup buttonGroup=new ButtonGroup();
    buttonGroup.add(allSdksButton);
    buttonGroup.add(registeredSdksButton);
    jdkKeyPanel.add(allSdksButton,constraints);
    constraints.weightx=1;
    jdkKeyPanel.add(registeredSdksButton,constraints);
    registeredSdksButton.addItemListener(new ItemListener(){
      @Override public void itemStateChanged(      ItemEvent e){
        myUseOnlyRegisteredSdks=e.getStateChange() == ItemEvent.SELECTED;
        filterSdksByLanguageLevel();
      }
    }
);
    allSdksButton.setSelected(true);
    builder.add(jdkKeyPanel,sdkComboBox);
  }
  return new Pair<JRadioButton,JRadioButton>(registeredSdksButton,allSdksButton);
}
