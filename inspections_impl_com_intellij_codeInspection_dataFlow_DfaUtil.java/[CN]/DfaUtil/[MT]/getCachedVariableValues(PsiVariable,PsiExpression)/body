{
  if (variable == null || context == null)   return Collections.emptyList();
  CachedValue<MultiValuesMap<PsiVariable,PsiExpression>> cachedValue=context.getUserData(DFA_VARIABLE_INFO_KEY);
  if (cachedValue == null) {
    cachedValue=context.getManager().getCachedValuesManager().createCachedValue(new CachedValueProvider<MultiValuesMap<PsiVariable,PsiExpression>>(){
      public Result<MultiValuesMap<PsiVariable,PsiExpression>> compute(){
        PsiElement codeBlock;
        if (variable instanceof PsiParameter) {
          codeBlock=((PsiParameter)variable).getDeclarationScope();
          if (codeBlock instanceof PsiMethod) {
            codeBlock=((PsiMethod)codeBlock).getBody();
          }
        }
 else         if (variable instanceof PsiLocalVariable) {
          codeBlock=PsiTreeUtil.getParentOfType(variable,PsiCodeBlock.class);
        }
 else {
          codeBlock=PsiTreeUtil.getParentOfType(context,PsiCodeBlock.class);
        }
        while (codeBlock != null) {
          PsiAnonymousClass anon=PsiTreeUtil.getParentOfType(codeBlock,PsiAnonymousClass.class);
          if (anon == null)           break;
          codeBlock=PsiTreeUtil.getParentOfType(anon,PsiCodeBlock.class);
        }
        final MultiValuesMap<PsiVariable,PsiExpression> result;
        if (codeBlock == null) {
          result=null;
        }
 else {
          final ValuableDataFlowRunner runner=new ValuableDataFlowRunner(context);
          if (runner.analyzeMethod(codeBlock,new StandardInstructionVisitor()) == RunnerResult.OK) {
            result=runner.getAllVariableValues();
          }
 else {
            result=null;
          }
        }
        return new Result<MultiValuesMap<PsiVariable,PsiExpression>>(result,codeBlock);
      }
    }
,false);
    context.putUserData(DFA_VARIABLE_INFO_KEY,cachedValue);
  }
  final MultiValuesMap<PsiVariable,PsiExpression> value=cachedValue.getValue();
  final Collection<PsiExpression> expressions=value == null ? null : value.get(variable);
  return expressions == null ? Collections.<PsiExpression>emptyList() : expressions;
}
