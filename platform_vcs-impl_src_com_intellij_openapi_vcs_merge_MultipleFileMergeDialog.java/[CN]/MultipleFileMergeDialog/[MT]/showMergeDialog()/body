{
  final Collection<VirtualFile> files=myTable.getSelection();
  for (  final VirtualFile file : files) {
    final MergeData mergeData;
    try {
      mergeData=myProvider.loadRevisions(file);
    }
 catch (    VcsException ex) {
      Messages.showErrorDialog(myRootPanel,"Error loading revisions to merge: " + ex.getMessage());
      break;
    }
    if (mergeData.CURRENT == null || mergeData.LAST == null || mergeData.ORIGINAL == null) {
      Messages.showErrorDialog(myRootPanel,"Error loading revisions to merge");
      break;
    }
    String leftText=decodeContent(file,mergeData.CURRENT);
    String rightText=decodeContent(file,mergeData.LAST);
    String originalText=decodeContent(file,mergeData.ORIGINAL);
    DiffRequestFactory diffRequestFactory=DiffRequestFactory.getInstance();
    MergeRequest request=diffRequestFactory.createMergeRequest(leftText,rightText,originalText,file,myProject,ActionButtonPresentation.APPLY,ActionButtonPresentation.CANCEL_WITH_PROMPT);
    final VcsRevisionNumber lastRevisionNumber=mergeData.LAST_REVISION_NUMBER;
    request.setVersionTitles(new String[]{myMergeDialogCustomizer.getLeftPanelTitle(file),myMergeDialogCustomizer.getCenterPanelTitle(file),myMergeDialogCustomizer.getRightPanelTitle(file,lastRevisionNumber)});
    request.setWindowTitle(myMergeDialogCustomizer.getMergeWindowTitle(file));
    DiffManager.getInstance().getDiffTool().show(request);
    if (request.getResult() == DialogWrapper.OK_EXIT_CODE) {
      markFileProcessed(file,MergeSession.Resolution.Merged);
      checkMarkModifiedProject(file);
    }
 else {
      request.restoreOriginalContent();
    }
  }
  updateModelFromFiles();
}
