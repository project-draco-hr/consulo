{
  if (document == null) {
    throw new InvalidDataException();
  }
  Element root=document.getRootElement();
  if (root == null || !TEMPLATE_SET.equals(root.getName())) {
    throw new InvalidDataException();
  }
  String groupName=root.getAttributeValue(GROUP);
  if (groupName == null || groupName.length() == 0)   groupName=defGroupName;
  TemplateGroup result=new TemplateGroup(groupName);
  Map<String,TemplateImpl> created=new LinkedHashMap<String,TemplateImpl>();
  for (  final Object o1 : root.getChildren(TEMPLATE)) {
    Element element=(Element)o1;
    String name=element.getAttributeValue(NAME);
    String value=element.getAttributeValue(VALUE);
    String description;
    String resourceBundle=element.getAttributeValue(RESOURCE_BUNDLE);
    String key=element.getAttributeValue(KEY);
    String id=element.getAttributeValue(ID);
    if (resourceBundle != null && key != null) {
      ResourceBundle bundle=ResourceBundle.getBundle(resourceBundle);
      description=bundle.getString(key);
    }
 else {
      description=element.getAttributeValue(DESCRIPTION);
    }
    String shortcut=element.getAttributeValue(SHORTCUT);
    if (isDefault && (myDeletedTemplates.contains(name) || myTemplates.containsKey(name)))     continue;
    TemplateImpl template=addTemplate(name,value,groupName,description,shortcut,isDefault,id);
    template.setToReformat(Boolean.parseBoolean(element.getAttributeValue(TO_REFORMAT)));
    template.setToShortenLongNames(Boolean.parseBoolean(element.getAttributeValue(TO_SHORTEN_FQ_NAMES)));
    template.setDeactivated(Boolean.parseBoolean(element.getAttributeValue(DEACTIVATED)));
    for (    final Object o : element.getChildren(VARIABLE)) {
      Element e=(Element)o;
      String variableName=e.getAttributeValue(NAME);
      String expression=e.getAttributeValue(EXPRESSION);
      String defaultValue=e.getAttributeValue(DEFAULT_VALUE);
      boolean isAlwaysStopAt=Boolean.parseBoolean(e.getAttributeValue(ALWAYS_STOP_AT));
      template.addVariable(variableName,expression,defaultValue,isAlwaysStopAt);
    }
    Element context=element.getChild(CONTEXT);
    if (context != null) {
      DefaultJDOMExternalizer.readExternal(template.getTemplateContext(),context);
    }
    created.put(template.getKey(),template);
  }
  if (registerTemplate) {
    TemplateGroup existingScheme=mySchemesManager.findSchemeByName(result.getName());
    if (existingScheme != null) {
      result=existingScheme;
    }
  }
  for (  TemplateImpl template : created.values()) {
    if (registerTemplate) {
      addTemplate(template);
    }
    result.addTemplate(template);
  }
  if (registerTemplate) {
    TemplateGroup existingScheme=mySchemesManager.findSchemeByName(result.getName());
    if (existingScheme == null && !result.isEmpty()) {
      mySchemesManager.addNewScheme(result,false);
    }
  }
  return result.isEmpty() ? null : result;
}
