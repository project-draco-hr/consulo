{
  myProcessor=new SchemeProcessor<TemplateGroup>(){
    public TemplateGroup readScheme(    final Document schemeContent) throws InvalidDataException, IOException, JDOMException {
      String defGroupName=schemeContent.getRootElement().getAttributeValue("group");
      return readTemplateFile(schemeContent,defGroupName,false);
    }
    public void renameScheme(    final String name,    final TemplateGroup scheme){
      scheme.setName(name);
    }
    public boolean shouldBeSaved(    final TemplateGroup template){
      for (      TemplateImpl t : template.getTemplates()) {
        if (!t.equals(myDefaultTemplates.get(t.getKey()))) {
          return true;
        }
      }
      return false;
    }
    public Document writeScheme(    final TemplateGroup template) throws WriteExternalException {
      Element templateSetElement=new Element(TEMPLATE_SET);
      templateSetElement.setAttribute(GROUP,template.getName());
      for (      TemplateImpl t : template.getTemplates()) {
        if (!t.equals(myDefaultTemplates.get(t.getKey()))) {
          saveTemplate(t,templateSetElement);
        }
      }
      return new Document(templateSetElement);
    }
    public void showReadErrorMessage(    final Exception e,    final String schemeName,    final String filePath){
      LOG.warn(e);
    }
    public void showWriteErrorMessage(    final Exception e,    final String schemeName,    final String filePath){
      LOG.warn(e);
    }
    public void initScheme(    final TemplateGroup scheme){
    }
  }
;
  mySchemesManager=schemesManagerFactory.createSchemesManager(FILE_SPEC,myProcessor,RoamingType.PER_USER);
  loadTemplates();
}
