{
  final Application application=ApplicationManager.getApplication();
  IS_UNIT_TEST_MODE=application.isUnitTestMode();
  myProjectManager=projectManager;
  mySystemCharset=CharsetToolkit.getDefaultSystemCharset();
  final String systemPath=PathManager.getSystemPath();
  File system=new File(systemPath);
  try {
    system=system.getCanonicalFile();
  }
 catch (  IOException e) {
    LOG.info(e);
  }
  mySystemDirectory=system;
  projectManager.addProjectManagerListener(new ProjectWatcher());
  final MessageBusConnection conn=application.getMessageBus().connect();
  conn.subscribe(VirtualFileManager.VFS_CHANGES,new BulkFileListener.Adapter(){
    @Override public void after(    @NotNull List<? extends VFileEvent> events){
      if (shouldTriggerMake(events)) {
        scheduleAutoMake();
      }
    }
    private boolean shouldTriggerMake(    List<? extends VFileEvent> events){
      if (PowerSaveMode.isEnabled()) {
        return false;
      }
      List<Project> activeProjects=null;
      for (      VFileEvent event : events) {
        final VirtualFile eventFile=event.getFile();
        if (eventFile == null || ProjectCoreUtil.isProjectOrWorkspaceFile(eventFile)) {
          continue;
        }
        if (activeProjects == null) {
          activeProjects=getActiveProjects();
          if (activeProjects.isEmpty()) {
            return false;
          }
        }
        for (        Project project : activeProjects) {
          if (ProjectRootManager.getInstance(project).getFileIndex().isInContent(eventFile)) {
            return true;
          }
        }
      }
      return false;
    }
  }
);
  EditorFactory.getInstance().getEventMulticaster().addDocumentListener(new DocumentAdapter(){
    @Override public void documentChanged(    DocumentEvent e){
      scheduleProjectSave();
    }
  }
);
  ShutDownTracker.getInstance().registerShutdownTask(new Runnable(){
    @Override public void run(){
      stopListening();
    }
  }
);
}
