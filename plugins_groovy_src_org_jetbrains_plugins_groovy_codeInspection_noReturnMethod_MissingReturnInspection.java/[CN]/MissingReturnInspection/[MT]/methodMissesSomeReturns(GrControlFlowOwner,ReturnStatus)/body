{
  if (returnStatus == ReturnStatus.shouldNotReturnValue) {
    return false;
  }
  final Ref<Boolean> alwaysHaveReturn=new Ref<Boolean>(true);
  final Ref<Boolean> sometimesHaveReturn=new Ref<Boolean>(false);
  final Ref<Boolean> hasExplicitReturn=new Ref<Boolean>(false);
  ControlFlowUtils.visitAllExitPoints(block,new ControlFlowUtils.ExitPointVisitor(){
    @Override public boolean visitExitPoint(    Instruction instruction,    @Nullable GrExpression returnValue){
      if (instruction instanceof MaybeReturnInstruction) {
        if (((MaybeReturnInstruction)instruction).mayReturnValue()) {
          sometimesHaveReturn.set(true);
        }
 else {
          alwaysHaveReturn.set(false);
        }
        return true;
      }
      final PsiElement element=instruction.getElement();
      if (element instanceof GrReturnStatement) {
        sometimesHaveReturn.set(true);
        if (returnValue != null) {
          hasExplicitReturn.set(true);
        }
      }
 else       if (instruction instanceof ThrowingInstruction) {
      }
 else       if (element instanceof GrAssertStatement) {
        sometimesHaveReturn.set(true);
        int count=0;
        for (        Instruction _i : instruction.allSuccessors()) {
          count++;
        }
        if (count <= 1) {
          alwaysHaveReturn.set(false);
        }
      }
 else {
        alwaysHaveReturn.set(false);
      }
      return true;
    }
  }
);
  if (returnStatus == ReturnStatus.mustReturnValue && !sometimesHaveReturn.get()) {
    return true;
  }
  return sometimesHaveReturn.get() && !alwaysHaveReturn.get();
}
