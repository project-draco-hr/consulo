{
  if (!mustReturnValue) {
    return false;
  }
  final Ref<Boolean> always=new Ref<Boolean>(true);
  final Ref<Boolean> hasExplicitReturn=new Ref<Boolean>(false);
  final Ref<Boolean> sometimes=new Ref<Boolean>(false);
  ControlFlowUtils.visitAllExitPoints(block,new ControlFlowUtils.ExitPointVisitor(){
    @Override public boolean visitExitPoint(    Instruction instruction,    @Nullable GrExpression returnValue){
      if (instruction instanceof MaybeReturnInstruction) {
        if (((MaybeReturnInstruction)instruction).mayReturnValue()) {
          sometimes.set(true);
        }
 else {
          always.set(false);
        }
        return true;
      }
      final PsiElement element=instruction.getElement();
      if (element instanceof GrReturnStatement) {
        sometimes.set(true);
        if (returnValue != null) {
          hasExplicitReturn.set(true);
        }
      }
 else       if (element instanceof GrThrowStatement) {
        sometimes.set(true);
      }
 else       if (element instanceof GrAssertStatement) {
        sometimes.set(true);
        int count=0;
        for (        Instruction _i : instruction.allSucc()) {
          count++;
        }
        if (count <= 1) {
          always.set(false);
        }
      }
 else {
        always.set(false);
      }
      return true;
    }
  }
);
  if (!sometimes.get()) {
    return true;
  }
  return sometimes.get() && !always.get();
}
