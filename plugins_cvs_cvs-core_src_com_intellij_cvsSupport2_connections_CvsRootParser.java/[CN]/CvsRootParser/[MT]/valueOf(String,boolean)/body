{
  final CvsRootParser result=new CvsRootParser();
  if (rootString.isEmpty()) {
    if (check) {
      throw new CvsRootException(CvsBundle.message("message.error.empty.cvs.root"));
    }
    result.METHOD=CvsMethod.PSERVER_METHOD;
    return result;
  }
 else   if (!StringUtil.startsWithChar(rootString,':')) {
    result.METHOD=CvsMethod.LOCAL_METHOD;
    result.REPOSITORY=rootString;
    return result;
  }
  if (rootString.startsWith(LOCAL)) {
    result.METHOD=CvsMethod.LOCAL_METHOD;
    result.REPOSITORY=rootString.substring(LOCAL.length());
    return result;
  }
  final String suffix=result.extractMethod(rootString,result,check);
  if (CvsMethod.LOCAL_METHOD.equals(result.METHOD)) {
    result.REPOSITORY=suffix;
    skipTrailingRepositorySlash(result);
  }
 else {
    if (result.HOST != null && result.HOST.length() > 0 && result.USER_NAME != null && result.USER_NAME.length() > 0) {
      result.REPOSITORY=suffix.trim();
    }
 else     if (suffix.contains("@") || suffix.contains(":")) {
      final Matcher matcher=ourPattern.matcher(suffix);
      if (matcher.matches()) {
        extractUserNameAndPassword(matcher,result);
        extractHostAndPort(matcher,result);
        extractRepository(matcher,result);
      }
 else {
        if (check) {
          throw new CvsRootException(CvsBundle.message("error.message.wrong.remote.repository",rootString));
        }
 else {
          result.REPOSITORY=suffix;
        }
      }
    }
 else {
      result.REPOSITORY=suffix;
    }
  }
  return result;
}
