{
  final Project project=module.getProject();
  for (  VirtualFile file : ModuleRootManager.getInstance(module).getSourceRoots()) {
    PsiDirectory sourceRoot=PsiManager.getInstance(project).findDirectory(file);
    if (sourceRoot != null) {
      if ("griffon-app".equals(file.getParent().getName())) {
        GriffonDirectoryMetadata metadata=DIRECTORY_METADATA.get(file.getName());
        if (metadata == null)         continue;
        result.add(new TopLevelDirectoryNode(module,sourceRoot,viewSettings,metadata.description,metadata.icon,metadata.weight));
      }
    }
  }
  final PsiDirectory srcMain=findDirectory(project,root,"src/main");
  if (srcMain != null) {
    result.add(new TopLevelDirectoryNode(module,srcMain,viewSettings,"Project Sources",JetgroovyIcons.Groovy.Groovy_16x16,AbstractMvcPsiNodeDescriptor.SRC_FOLDERS));
  }
  final PsiDirectory srcCli=findDirectory(project,root,"src/cli");
  if (srcCli != null) {
    result.add(new TopLevelDirectoryNode(module,srcCli,viewSettings,"Build Sources",JetgroovyIcons.Groovy.Groovy_16x16,AbstractMvcPsiNodeDescriptor.SRC_FOLDERS));
  }
  final PsiDirectory testsUnit=findDirectory(project,root,"test/unit");
  if (testsUnit != null) {
    result.add(new TestsTopLevelDirectoryNode(module,testsUnit,viewSettings,"Unit Tests",AllIcons.Nodes.TestPackage,AllIcons.Nodes.TestPackage));
  }
  final PsiDirectory testsIntegration=findDirectory(project,root,"test/integration");
  if (testsIntegration != null) {
    result.add(new TestsTopLevelDirectoryNode(module,testsIntegration,viewSettings,"Integration Tests",AllIcons.Nodes.TestPackage,AllIcons.Nodes.TestPackage));
  }
  final PsiDirectory testsShared=findDirectory(project,root,"test/shared");
  if (testsShared != null) {
    result.add(new TestsTopLevelDirectoryNode(module,testsShared,viewSettings,"Shared Test Sources",AllIcons.Nodes.TestPackage,AllIcons.Nodes.TestPackage));
  }
  for (  VirtualFile file : ModuleRootManager.getInstance(module).getContentRoots()) {
    List<GriffonSourceInspector.GriffonSource> sources=GriffonSourceInspector.processModuleMetadata(module);
    for (    GriffonSourceInspector.GriffonSource source : sources) {
      final PsiDirectory dir=findDirectory(project,file,source.getPath());
      if (dir != null) {
        result.add(new TopLevelDirectoryNode(module,dir,viewSettings,source.getNavigation().getDescription(),source.getNavigation().getIcon(),source.getNavigation().getWeight()));
      }
    }
  }
  final VirtualFile applicationPropertiesFile=GriffonFramework.getInstance().getApplicationPropertiesFile(module);
  addFileNode(result,module,viewSettings,applicationPropertiesFile);
  for (  VirtualFile file : root.getChildren()) {
    String name=file.getNameWithoutExtension();
    if (name.endsWith("GriffonAddon") || name.endsWith("GriffonPlugin")) {
      addFileNode(result,module,viewSettings,file);
    }
  }
}
