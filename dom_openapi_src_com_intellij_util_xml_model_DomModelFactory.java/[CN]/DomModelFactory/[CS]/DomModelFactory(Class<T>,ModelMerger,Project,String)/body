{
  super(aClass,modelMerger);
  myModelCache=new DomModelCache<M,XmlFile>(project,name + " model"){
    @NotNull protected CachedValueProvider.Result<M> computeValue(    @NotNull XmlFile file){
      final PsiFile originalFile=file.getOriginalFile();
      if (originalFile != null) {
        file=(XmlFile)originalFile;
      }
      final Module module=ModuleUtil.findModuleForPsiElement(file);
      final M model=module != null ? computeModel(file,module) : null;
      return new CachedValueProvider.Result<M>(model,computeDependencies(file,module));
    }
  }
;
  myCombinedModelCache=new DomModelCache<M,Module>(project,name + " combined model"){
    @NotNull protected CachedValueProvider.Result<M> computeValue(    @NotNull final Module module){
      final M combinedModel=computeCombinedModel(module);
      return new CachedValueProvider.Result<M>(combinedModel,combinedModel == null ? computeDependencies(module) : computeDependencies(combinedModel,module));
    }
  }
;
  myAllModelsCache=new DomModelCache<List<M>,Module>(project,name + " models list"){
    @NotNull protected CachedValueProvider.Result<List<M>> computeValue(    @NotNull final Module module){
      final List<M> models=computeAllModels(module);
      return new CachedValueProvider.Result<List<M>>(models,computeDependencies(module));
    }
  }
;
}
