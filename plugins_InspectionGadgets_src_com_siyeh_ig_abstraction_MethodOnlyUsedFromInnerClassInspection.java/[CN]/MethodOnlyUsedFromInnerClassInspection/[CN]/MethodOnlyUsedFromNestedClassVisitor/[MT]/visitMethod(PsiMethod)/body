{
  super.visitMethod(method);
  if (!method.hasModifierProperty(PsiModifier.PRIVATE) || method.isConstructor()) {
    return;
  }
  final MethodReferenceFinder processor=new MethodReferenceFinder(method);
  if (!processor.isOnlyAccessedFromInnerClass()) {
    return;
  }
  final PsiClass containingClass=processor.getContainingClass();
  if (containingClass instanceof PsiAnonymousClass) {
    final PsiClass[] interfaces=containingClass.getInterfaces();
    final PsiClass superClass;
    if (interfaces.length == 1) {
      superClass=interfaces[0];
      anonymousExtends=false;
      text=superClass.getName();
    }
 else {
      superClass=containingClass.getSuperClass();
      if (superClass == null) {
        return;
      }
      anonymousExtends=true;
      text=superClass.getName();
    }
    anonymousClass=true;
  }
 else {
    anonymousClass=false;
    text=containingClass.getName();
  }
  registerMethodError(method);
}
