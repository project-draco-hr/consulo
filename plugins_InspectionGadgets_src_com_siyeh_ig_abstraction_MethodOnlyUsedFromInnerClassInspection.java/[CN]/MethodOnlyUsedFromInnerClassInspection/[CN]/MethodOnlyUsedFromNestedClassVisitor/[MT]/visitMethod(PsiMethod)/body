{
  super.visitMethod(method);
  if (!method.hasModifierProperty(PsiModifier.PRIVATE) || method.isConstructor()) {
    return;
  }
  final PsiManager manager=method.getManager();
  final PsiSearchHelper searchHelper=manager.getSearchHelper();
  final PsiClass containingClass=method.getContainingClass();
  final LocalSearchScope scope=new LocalSearchScope(containingClass);
  final PsiReference[] references=searchHelper.findReferences(method,scope,false);
  if (references.length == 0) {
    return;
  }
  final PsiReference firstReference=references[0];
  final PsiElement firstElement=firstReference.getElement();
  final PsiClass firstReferenceClass=ClassUtils.getContainingClass(firstElement);
  if (firstReferenceClass == null || !PsiTreeUtil.isAncestor(containingClass,firstReferenceClass,true)) {
    return;
  }
  for (int i=1; i < references.length; i++) {
    final PsiReference reference=references[i];
    final PsiElement element=reference.getElement();
    final PsiClass referenceClass=PsiTreeUtil.getParentOfType(element,PsiClass.class);
    if (!firstReferenceClass.equals(referenceClass)) {
      return;
    }
  }
  if (firstReferenceClass instanceof PsiAnonymousClass) {
    final PsiClass[] interfaces=firstReferenceClass.getInterfaces();
    final PsiClass superClass;
    if (interfaces.length == 1) {
      superClass=interfaces[0];
      anonymousExtends=false;
      text=superClass.getName();
    }
 else {
      superClass=firstReferenceClass.getSuperClass();
      if (superClass == null) {
        return;
      }
      anonymousExtends=true;
      text=superClass.getName();
    }
    anonymousClass=true;
  }
 else {
    anonymousClass=false;
    text=firstReferenceClass.getName();
  }
  registerMethodError(method);
}
