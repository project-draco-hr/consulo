{
  final PsiElement element=reference.getElement();
  final PsiClass containingClass=ClassUtils.getContainingClass(element);
  if (containingClass == null) {
    onlyAccessedFromInnerClass=false;
    return false;
  }
  if (ignoreMethodsAccessedFromAnonymousClass && containingClass instanceof PsiAnonymousClass) {
    onlyAccessedFromInnerClass=false;
    return false;
  }
  if (cache != null) {
    if (!cache.equals(containingClass)) {
      onlyAccessedFromInnerClass=false;
      return false;
    }
  }
 else   if (!PsiTreeUtil.isAncestor(methodClass,containingClass,true)) {
    onlyAccessedFromInnerClass=false;
    return false;
  }
  onlyAccessedFromInnerClass=true;
  cache=containingClass;
  return true;
}
