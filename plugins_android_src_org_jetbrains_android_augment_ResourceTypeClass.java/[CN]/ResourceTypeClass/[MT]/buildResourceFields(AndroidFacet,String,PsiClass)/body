{
  final LocalResourceManager manager=facet.getLocalResourceManager();
  final Map<String,PsiType> fieldNames=new HashMap<String,PsiType>();
  final boolean styleable=ResourceType.STYLEABLE.getName().equals(resClassName);
  final PsiType basicType=styleable ? PsiType.INT.createArrayType() : PsiType.INT;
  for (  String resName : manager.getResourceNames(resClassName)) {
    fieldNames.put(resName,basicType);
  }
  if (styleable) {
    for (    ResourceEntry entry : manager.getValueResourceEntries(ResourceType.ATTR.getName())) {
      final String resName=entry.getName();
      final String resContext=entry.getContext();
      if (resContext.length() > 0) {
        fieldNames.put(resContext + '_' + resName,PsiType.INT);
      }
    }
  }
  final PsiField[] result=new PsiField[fieldNames.size()];
  final PsiElementFactory factory=JavaPsiFacade.getElementFactory(facet.getModule().getProject());
  final Module circularDepLibWithSamePackage=AndroidCompileUtil.findCircularDependencyOnLibraryWithSamePackage(facet);
  final boolean generateNonFinalFields=facet.getConfiguration().LIBRARY_PROJECT || circularDepLibWithSamePackage != null;
  int i=0;
  for (  Map.Entry<String,PsiType> entry : fieldNames.entrySet()) {
    final String fieldName=AndroidResourceUtil.getFieldNameByResourceName(entry.getKey());
    final PsiType type=entry.getValue();
    final AndroidLightField field=new AndroidLightField(fieldName,context,type,!generateNonFinalFields,generateNonFinalFields ? null : 0);
    field.setInitializer(factory.createExpressionFromText("0",field));
    result[i++]=field;
  }
  return result;
}
