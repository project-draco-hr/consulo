{
  if (!editor.getSelectionModel().hasSelection()) {
    editor.getSelectionModel().selectLineAtCaret();
    if (!editor.getSelectionModel().hasSelection())     return;
  }
  PsiDocumentManager.getInstance(project).commitDocument(editor.getDocument());
  int offset=editor.getCaretModel().getOffset();
  TemplateContextType contextType=TemplateManager.getInstance(project).getContextType(file,offset);
  TemplateImpl[] templates=TemplateSettings.getInstance().getTemplates();
  ArrayList<TemplateImpl> array=new ArrayList<TemplateImpl>();
  for (  TemplateImpl template : templates) {
    if (template.isDeactivated())     continue;
    if (template.getTemplateContext().isEnabled(contextType) && template.isSelectionTemplate()) {
      array.add(template);
    }
  }
  if (array.isEmpty()) {
    HintManager.getInstance().showErrorHint(editor,CodeInsightBundle.message("templates.surround.no.defined"));
    return;
  }
  if (!CodeInsightUtilBase.preparePsiElementForWrite(file))   return;
  Collections.sort(array,new Comparator<TemplateImpl>(){
    public int compare(    TemplateImpl o1,    TemplateImpl o2){
      return o1.getKey().compareTo(o2.getKey());
    }
  }
);
  Set<Character> usedMnemonicsSet=new HashSet<Character>();
  DefaultActionGroup group=new DefaultActionGroup();
  for (  TemplateImpl template : array) {
    group.add(new InvokeTemplateAction(template,editor,project,usedMnemonicsSet));
  }
  final ListPopup popup=JBPopupFactory.getInstance().createActionGroupPopup(CodeInsightBundle.message("templates.select.template.chooser.title"),group,DataManager.getInstance().getDataContext(editor.getContentComponent()),JBPopupFactory.ActionSelectionAid.MNEMONICS,false);
  popup.showInBestPositionFor(editor);
}
