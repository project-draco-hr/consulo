{
  super.visitPolyadicExpression(expression);
  final IElementType sign=expression.getOperationTokenType();
  if (!booleanTokens.contains(sign)) {
    return;
  }
  final PsiExpression[] operands=expression.getOperands();
  for (  PsiExpression operand : operands) {
    if (operand == null) {
      return;
    }
    final PsiType opType=operand.getType();
    if (opType == null) {
      return;
    }
    if (!opType.equals(PsiType.BOOLEAN) && !opType.equalsToText(CommonClassNames.JAVA_LANG_BOOLEAN)) {
      return;
    }
  }
  final boolean isPointless;
  if (sign.equals(JavaTokenType.EQEQ) || sign.equals(JavaTokenType.NE)) {
    isPointless=equalityExpressionIsPointless(operands);
  }
 else   if (sign.equals(JavaTokenType.ANDAND) || sign.equals(JavaTokenType.AND)) {
    isPointless=andExpressionIsPointless(operands);
  }
 else   if (sign.equals(JavaTokenType.OROR) || sign.equals(JavaTokenType.OR)) {
    isPointless=orExpressionIsPointless(operands);
  }
 else   if (sign.equals(JavaTokenType.XOR)) {
    isPointless=xorExpressionIsPointless(operands);
  }
 else {
    isPointless=false;
  }
  if (!isPointless) {
    return;
  }
  registerError(expression,expression);
}
