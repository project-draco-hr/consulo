{
  super.visitBinaryExpression(expression);
  if (!(expression.getROperand() != null)) {
    return;
  }
  final PsiJavaToken sign=expression.getOperationSign();
  final String tokenText=sign.getText();
  if (!booleanTokens.contains(tokenText)) {
    return;
  }
  final PsiExpression rhs=expression.getROperand();
  if (rhs == null) {
    return;
  }
  final PsiType rhsType=rhs.getType();
  if (rhsType == null) {
    return;
  }
  if (!rhsType.equals(PsiType.BOOLEAN) && !rhsType.equalsToText(CommonClassNames.JAVA_LANG_BOOLEAN)) {
    return;
  }
  final PsiExpression lhs=expression.getLOperand();
  final PsiType lhsType=lhs.getType();
  if (lhsType == null) {
    return;
  }
  if (!lhsType.equals(PsiType.BOOLEAN) && !lhsType.equalsToText(CommonClassNames.JAVA_LANG_BOOLEAN)) {
    return;
  }
  final IElementType tokenType=sign.getTokenType();
  final boolean isPointless;
  if (tokenType.equals(JavaTokenType.EQEQ) || tokenType.equals(JavaTokenType.NE)) {
    isPointless=equalityExpressionIsPointless(lhs,rhs);
  }
 else   if (tokenType.equals(JavaTokenType.ANDAND) || tokenType.equals(JavaTokenType.AND)) {
    isPointless=andExpressionIsPointless(lhs,rhs);
  }
 else   if (tokenType.equals(JavaTokenType.OROR) || tokenType.equals(JavaTokenType.OR)) {
    isPointless=orExpressionIsPointless(lhs,rhs);
  }
 else   if (tokenType.equals(JavaTokenType.XOR)) {
    isPointless=xorExpressionIsPointless(lhs,rhs);
  }
 else {
    isPointless=false;
  }
  if (!isPointless) {
    return;
  }
  registerError(expression,expression);
}
