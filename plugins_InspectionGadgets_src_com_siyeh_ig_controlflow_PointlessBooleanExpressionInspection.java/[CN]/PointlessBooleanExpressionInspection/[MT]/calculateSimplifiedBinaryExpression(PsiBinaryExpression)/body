{
  final PsiExpression lhs=expression.getLOperand();
  final PsiExpression rhs=expression.getROperand();
  if (rhs == null) {
    return null;
  }
  final IElementType tokenType=expression.getOperationTokenType();
  final String rhsText=rhs.getText();
  final String lhsText=lhs.getText();
  if (tokenType.equals(JavaTokenType.ANDAND) || tokenType.equals(JavaTokenType.AND)) {
    if (isAlwaysTrue(lhs)) {
      return rhsText;
    }
 else     if (isAlwaysFalse(lhs) || isAlwaysFalse(rhs)) {
      return "false";
    }
 else {
      return lhsText;
    }
  }
 else   if (tokenType.equals(JavaTokenType.OROR) || tokenType.equals(JavaTokenType.OR)) {
    if (isAlwaysFalse(lhs)) {
      return rhsText;
    }
 else {
      return lhsText;
    }
  }
 else   if (tokenType.equals(JavaTokenType.XOR) || tokenType.equals(JavaTokenType.NE)) {
    if (isAlwaysFalse(lhs)) {
      return rhsText;
    }
 else     if (isAlwaysFalse(rhs)) {
      return lhsText;
    }
 else     if (isAlwaysTrue(lhs)) {
      return createStringForNegatedExpression(rhs);
    }
 else {
      return createStringForNegatedExpression(lhs);
    }
  }
 else   if (tokenType.equals(JavaTokenType.EQEQ)) {
    if (isAlwaysTrue(lhs)) {
      return rhsText;
    }
 else     if (isAlwaysTrue(rhs)) {
      return lhsText;
    }
 else     if (isAlwaysFalse(lhs)) {
      return createStringForNegatedExpression(rhs);
    }
 else {
      return createStringForNegatedExpression(lhs);
    }
  }
 else {
    return "";
  }
}
