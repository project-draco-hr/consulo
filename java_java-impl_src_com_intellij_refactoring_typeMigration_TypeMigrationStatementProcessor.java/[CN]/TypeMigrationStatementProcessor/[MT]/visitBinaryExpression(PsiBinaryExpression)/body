{
  super.visitBinaryExpression(expression);
  final PsiExpression lOperand=expression.getLOperand();
  final TypeView left=new TypeView(lOperand);
  final PsiExpression rOperand=expression.getROperand();
  if (rOperand == null)   return;
  final TypeView right=new TypeView(rOperand);
  if (!TypeConversionUtil.isBinaryOperatorApplicable(expression.getOperationTokenType(),left.getType(),right.getType(),false)) {
    if (left.isChanged()) {
      findConversionOrFail(expression,lOperand,left.getTypePair());
    }
    if (right.isChanged()) {
      findConversionOrFail(expression,rOperand,right.getTypePair());
    }
  }
}
