{
  myKeepConnection=keepConnection;
  myAuthManager=authManager;
  myInterrupted=Collections.synchronizedSet(new HashSet<Thread>());
  myCancelThreadProcessor=new Processor<Thread>(){
    @Override public boolean process(    Thread thread){
      return !myInterrupted.contains(thread);
    }
  }
;
  myLog=new ProxySvnLog(SVNDebugLog.getDefaultLog(),myCancelThreadProcessor);
  myCanceller=new ISVNCanceller(){
    @Override public void checkCancelled() throws SVNCancelException {
      final ProgressManager pm=ProgressManager.getInstance();
      final ProgressIndicator pi=pm.getProgressIndicator();
      if (pi != null) {
        if (pi.isCanceled())         throw new SVNCancelException();
      }
      if (!myCancelThreadProcessor.process(Thread.currentThread())) {
        throw new SVNCancelException();
      }
    }
  }
;
  final ThrowableConvertor<SVNURL,SVNRepository,SVNException> creator=new ThrowableConvertor<SVNURL,SVNRepository,SVNException>(){
    @Override public SVNRepository convert(    SVNURL svnurl) throws SVNException {
      final SVNRepository repos=SVNRepositoryFactory.create(svnurl,SvnIdeaRepositoryPoolManager.this);
      repos.setAuthenticationManager(myAuthManager);
      repos.setTunnelProvider(tunnelProvider);
      repos.setDebugLog(myLog);
      repos.setCanceller(myCanceller);
      return repos;
    }
  }
;
  final ThrowableConsumer<Pair<SVNURL,SVNRepository>,SVNException> adjuster=new ThrowableConsumer<Pair<SVNURL,SVNRepository>,SVNException>(){
    @Override public void consume(    Pair<SVNURL,SVNRepository> pair) throws SVNException {
      SVNRepository repository=pair.getSecond();
      SVNURL url=pair.getFirst();
      repository.setLocation(url,false);
      repository.addConnectionListener(myListener);
      repository.setAuthenticationManager(myAuthManager);
      repository.setTunnelProvider(tunnelProvider);
      repository.setDebugLog(myLog);
      repository.setCanceller(myCanceller);
    }
  }
;
  if (keepConnection) {
    CachingSvnRepositoryPool pool=new CachingSvnRepositoryPool(creator,-1,-1,adjuster,myCancelThreadProcessor,ourGuard);
    myPool=pool;
    myListener=new ISVNConnectionListener(){
      @Override public void connectionOpened(      SVNRepository repository){
        ourGuard.connectionOpened();
      }
      @Override public void connectionClosed(      SVNRepository repository){
        myPool.returnRepo(repository);
        ourGuard.connectionClosed();
      }
    }
;
    ourGuard.addRepositoryPool(pool);
  }
 else {
    myListener=null;
    myPool=new NoKeepConnectionPool(creator);
  }
}
