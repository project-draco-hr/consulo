{
  final PsiElement element=descriptor.getPsiElement();
  final PsiElement parent=element.getParent();
  if (!(parent instanceof PsiParameter)) {
    return;
  }
  final PsiParameter parameter=(PsiParameter)parent;
  final PsiElement grandParent=parameter.getParent();
  if (!(grandParent instanceof PsiCatchSection)) {
    return;
  }
  final PsiCatchSection catchSection=(PsiCatchSection)grandParent;
  final PsiTryStatement tryStatement=catchSection.getTryStatement();
  if (removeTryCatch) {
    final PsiCodeBlock codeBlock=tryStatement.getTryBlock();
    if (codeBlock == null) {
      return;
    }
    final PsiStatement[] statements=codeBlock.getStatements();
    if (statements.length == 0) {
      tryStatement.delete();
      return;
    }
    final PsiElement containingElement=tryStatement.getParent();
    final boolean keepBlock;
    if (containingElement instanceof PsiCodeBlock) {
      final PsiCodeBlock parentBlock=(PsiCodeBlock)containingElement;
      keepBlock=VariableSearchUtils.containsConflictingDeclarations(codeBlock,parentBlock);
    }
 else {
      keepBlock=true;
    }
    if (keepBlock) {
      final JavaPsiFacade psiFacade=JavaPsiFacade.getInstance(project);
      final PsiElementFactory factory=psiFacade.getElementFactory();
      final PsiBlockStatement resultStatement=(PsiBlockStatement)factory.createStatementFromText("{}",element);
      final PsiCodeBlock resultBlock=resultStatement.getCodeBlock();
      for (      PsiStatement statement : statements) {
        resultBlock.add(statement);
      }
      tryStatement.replace(resultStatement);
    }
 else {
      for (      PsiStatement statement : statements) {
        containingElement.addBefore(statement,tryStatement);
      }
      tryStatement.delete();
    }
  }
 else {
    catchSection.delete();
  }
}
