{
  final TextRange base=range.getBase();
  final TextRange changed=range.getChanged();
  final int changedLength=changed.getEndOffset() - changed.getStartOffset();
  model.processRangeHighlightersOverlappingWith(changed.getStartOffset(),changed.getEndOffset(),new Processor<RangeHighlighterEx>(){
    @Override public boolean process(    RangeHighlighterEx marker){
      int relativeStart=Math.max(marker.getStartOffset() - changed.getStartOffset(),0);
      int relativeEnd=Math.min(marker.getEndOffset() - changed.getStartOffset(),changedLength);
      int newStart=base.getStartOffset() + relativeStart;
      int newEnd=base.getStartOffset() + relativeEnd;
      if (newEnd - newStart <= 0)       return true;
      myPieces.add(new Element(marker,newStart,newEnd));
      return true;
    }
  }
);
}
