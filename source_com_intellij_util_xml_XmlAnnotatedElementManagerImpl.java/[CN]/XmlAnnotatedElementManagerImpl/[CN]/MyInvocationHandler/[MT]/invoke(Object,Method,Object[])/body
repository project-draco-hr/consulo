{
  final AttributeValue attributeValue=method.getAnnotation(AttributeValue.class);
  if (attributeValue != null) {
    return myTag.getAttributeValue(guessName(attributeValue.value(),method));
  }
  final TagValue tagValue=method.getAnnotation(TagValue.class);
  if (tagValue != null || isGetValueMethod(method)) {
    return myTag.getValue().getText();
  }
  final SubTagValue subTagValue=method.getAnnotation(SubTagValue.class);
  if (subTagValue != null) {
    final String qname=guessName(subTagValue.value(),method);
    if (qname != null) {
      final XmlTag subTag=myTag.findFirstSubTag(qname);
      if (subTag != null) {
        return subTag.getValue().getText();
      }
    }
    return null;
  }
  checkInitialized();
  if (XmlAnnotatedElement.class.isAssignableFrom(method.getReturnType())) {
    final String qname=getSubTagName(method);
    final XmlTag subTag=myTag.findFirstSubTag(qname);
    if (subTag != null) {
      return getCachedElement(subTag);
    }
  }
  if (extractElementType(method.getGenericReturnType()) != null) {
    final XmlTag[] subTags=myTag.findSubTags(getSubTagNameForCollection(method));
    final ArrayList<XmlAnnotatedElement> list=new ArrayList<XmlAnnotatedElement>(subTags.length);
    for (    XmlTag xmlTag : subTags) {
      list.add(getCachedElement(xmlTag));
    }
    return Collections.unmodifiableList(list);
  }
  if (Object.class.equals(method.getDeclaringClass())) {
    final String name=method.getName();
    if ("toString".equals(name)) {
      return StringUtil.getShortName(myClass) + " on tag " + myTag.getText()+ " @"+ System.identityHashCode(proxy);
    }
    if ("equals".equals(name)) {
      return proxy == args[0];
    }
    if ("hashCode".equals(name)) {
      return System.identityHashCode(proxy);
    }
  }
  throw new UnsupportedOperationException("Cannot call " + method.toString());
}
