{
  final PsiType type=element.getType();
  if (type instanceof PsiDisjunctionType)   return tokenizeComplexType(element);
  final PsiClass psiClass=PsiUtil.resolveClassInType(type);
  if (psiClass == null || psiClass.getContainingFile() == null || psiClass.getContainingFile().getVirtualFile() == null) {
    return null;
  }
  final VirtualFile virtualFile=psiClass.getContainingFile().getVirtualFile();
  final ProjectFileIndex fileIndex=ProjectRootManager.getInstance(element.getProject()).getFileIndex();
  final boolean isInSource=(virtualFile != null) && fileIndex.isInContent(virtualFile);
  return !isInSource ? null : new Token[]{new Token<PsiTypeElement>(element,element.getText(),true,0,getRangeToCheck(element.getText(),psiClass.getName()),SplitterFactory.getInstance().getIdentifierSplitter())};
}
