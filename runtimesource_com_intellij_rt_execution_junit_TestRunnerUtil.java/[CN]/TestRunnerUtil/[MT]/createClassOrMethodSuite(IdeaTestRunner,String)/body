{
  String methodName=null;
  int index=suiteClassName.indexOf(',');
  if (index != -1) {
    methodName=suiteClassName.substring(index + 1);
    suiteClassName=suiteClassName.substring(0,index);
  }
  Class testClass=loadTestClass(runner,suiteClassName);
  if (testClass == null)   return null;
  Test test=null;
  if (methodName != null) {
    test=createMethodSuite(runner,testClass,methodName);
  }
 else {
    if (runner.JUNIT4_API != null) {
      test=runner.JUNIT4_API.createClassSuite(testClass);
    }
    if (test == null) {
      try {
        Method suiteMethod=testClass.getMethod(BaseTestRunner.SUITE_METHODNAME,new Class[0]);
        if (!Modifier.isStatic(suiteMethod.getModifiers())) {
          runFailed(ourBundle.getString("junit.suite.must.be.static"));
          return null;
        }
        try {
          test=(Test)suiteMethod.invoke(null,new Class[0]);
        }
 catch (        InvocationTargetException e) {
          runner.runFailed(MessageFormat.format(ourBundle.getString("junit.failed.to.invoke.suite"),new Object[]{e.getTargetException().toString()}));
          return null;
        }
catch (        IllegalAccessException e) {
          runner.runFailed(MessageFormat.format(ourBundle.getString("junit.failed.to.invoke.suite"),new Object[]{e.toString()}));
          return null;
        }
      }
 catch (      Exception e) {
        runner.clearStatus();
        test=new TestSuite(testClass);
      }
    }
  }
  return test;
}
