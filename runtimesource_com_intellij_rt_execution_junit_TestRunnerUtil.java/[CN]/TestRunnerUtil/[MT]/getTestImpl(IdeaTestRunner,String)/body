{
  if (suiteClassName.length() <= 0) {
    runner.clearStatus();
    return null;
  }
  if (suiteClassName.startsWith("@")) {
    try {
      BufferedReader reader=new BufferedReader(new FileReader(suiteClassName.substring(1)));
      String packageName=reader.readLine();
      Vector vector=new Vector();
      String line;
      while ((line=reader.readLine()) != null) {
        vector.addElement(line);
      }
      reader.close();
      String[] classNames=new String[vector.size()];
      for (int i=0; i < classNames.length; i++) {
        classNames[i]=(String)vector.elementAt(i);
      }
      TestAllInPackage2 testPackage=new TestAllInPackage2(packageName,classNames);
      return testPackage;
    }
 catch (    Exception e) {
      runner.runFailed("Error: " + e.toString());
      return null;
    }
  }
  String methodName=null;
  int index=suiteClassName.indexOf(',');
  if (index != -1) {
    methodName=suiteClassName.substring(index + 1);
    suiteClassName=suiteClassName.substring(0,index);
  }
  Class testClass;
  try {
    testClass=runner.loadSuiteClass(suiteClassName);
  }
 catch (  ClassNotFoundException e) {
    String clazz=e.getMessage();
    if (clazz == null) {
      clazz=suiteClassName;
    }
    runner.runFailed("Class not found \"" + clazz + "\"");
    return null;
  }
catch (  Exception e) {
    runner.runFailed("Cannot instantiate test(s): " + e.toString());
    return null;
  }
  if (methodName != null) {
    runner.clearStatus();
    try {
      Constructor constructor=testClass.getConstructor(new Class[]{String.class});
      TestCase test=(TestCase)constructor.newInstance(new Object[]{methodName});
      TestSuite testSuite=new TestSuite();
      testSuite.addTest(test);
      return testSuite;
    }
 catch (    NoSuchMethodException e) {
      try {
        Constructor constructor=testClass.getConstructor(new Class[0]);
        TestCase test=(TestCase)constructor.newInstance(new Object[0]);
        test.setName(methodName);
        TestSuite testSuite=new TestSuite();
        testSuite.addTest(test);
        return testSuite;
      }
 catch (      ClassCastException e1) {
        runner.runFailed(testClass.getName() + " is not derived from TestCase. Do not provide method name.");
        return null;
      }
catch (      Exception e1) {
        runner.runFailed("Cannot instantiate test(s): " + e1.toString());
        return null;
      }
    }
catch (    Exception e) {
      runner.runFailed("Cannot instantiate test(s): " + e.toString());
      return null;
    }
  }
  Method suiteMethod;
  try {
    suiteMethod=testClass.getMethod(BaseTestRunner.SUITE_METHODNAME,new Class[0]);
  }
 catch (  Exception e) {
    runner.clearStatus();
    return new TestSuite(testClass);
  }
  if (!Modifier.isStatic(suiteMethod.getModifiers())) {
    runFailed("Suite() method must be static");
    return null;
  }
  Test test;
  try {
    test=(Test)suiteMethod.invoke(null,new Class[0]);
    if (test == null)     return test;
  }
 catch (  InvocationTargetException e) {
    runner.runFailed("Failed to invoke suite():" + e.getTargetException().toString());
    return null;
  }
catch (  IllegalAccessException e) {
    runner.runFailed("Failed to invoke suite():" + e.toString());
    return null;
  }
  runner.clearStatus();
  return test;
}
