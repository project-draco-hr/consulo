{
  if (suiteClassName.length() == 0) {
    runner.clearStatus();
    return null;
  }
  if (suiteClassName.charAt(0) == '@') {
    try {
      BufferedReader reader=new BufferedReader(new FileReader(suiteClassName.substring(1)));
      String packageName;
      Vector vector;
      try {
        packageName=reader.readLine();
        vector=new Vector();
        String line;
        while ((line=reader.readLine()) != null) {
          vector.addElement(line);
        }
      }
  finally {
        reader.close();
      }
      String[] classNames=new String[vector.size()];
      for (int i=0; i < classNames.length; i++) {
        classNames[i]=(String)vector.elementAt(i);
      }
      return new TestAllInPackage2(packageName,classNames,runner.IS_JUNIT4);
    }
 catch (    Exception e) {
      runner.runFailed(MessageFormat.format(ourBundle.getString("junit.runner.error"),new Object[]{e.toString()}));
      return null;
    }
  }
  String methodName=null;
  int index=suiteClassName.indexOf(',');
  if (index != -1) {
    methodName=suiteClassName.substring(index + 1);
    suiteClassName=suiteClassName.substring(0,index);
  }
  Class testClass;
  try {
    testClass=runner.loadSuiteClass(suiteClassName);
  }
 catch (  ClassNotFoundException e) {
    String clazz=e.getMessage();
    if (clazz == null) {
      clazz=suiteClassName;
    }
    runner.runFailed(MessageFormat.format(ourBundle.getString("junit.class.not.found"),new Object[]{clazz}));
    return null;
  }
catch (  Exception e) {
    runner.runFailed(MessageFormat.format(ourBundle.getString("junit.cannot.instantiate.tests"),new Object[]{e.toString()}));
    return null;
  }
  if (methodName != null) {
    runner.clearStatus();
    try {
      Method method=testClass.getMethod(methodName,new Class[0]);
      if (method != null && runner.IS_JUNIT4 && JUnit4Util.isTestMethod(method)) {
        return new Junit4TestMethodAdapter(testClass,methodName);
      }
    }
 catch (    NoSuchMethodException e) {
    }
    try {
      Constructor constructor=testClass.getConstructor(new Class[]{String.class});
      TestCase test=(TestCase)constructor.newInstance(new Object[]{methodName});
      TestSuite testSuite=new TestSuite();
      testSuite.addTest(test);
      return testSuite;
    }
 catch (    NoSuchMethodException e) {
      try {
        Constructor constructor=testClass.getConstructor(new Class[0]);
        TestCase test=(TestCase)constructor.newInstance(new Object[0]);
        test.setName(methodName);
        TestSuite testSuite=new TestSuite();
        testSuite.addTest(test);
        return testSuite;
      }
 catch (      ClassCastException e1) {
        runner.runFailed(MessageFormat.format(ourBundle.getString("junit.class.not.derived"),new Object[]{testClass.getName()}));
        return null;
      }
catch (      Exception e1) {
        runner.runFailed(MessageFormat.format(ourBundle.getString("junit.cannot.instantiate.tests"),new Object[]{e1.toString()}));
        return null;
      }
    }
catch (    Exception e) {
      runner.runFailed(MessageFormat.format(ourBundle.getString("junit.cannot.instantiate.tests"),new Object[]{e.toString()}));
      return null;
    }
  }
  if (runner.IS_JUNIT4) {
    Junit4ClassSuite junit4ClassSuite=new Junit4ClassSuite(testClass);
    if (junit4ClassSuite.testCount() != 0) {
      runner.clearStatus();
      return junit4ClassSuite;
    }
  }
  Method suiteMethod;
  try {
    suiteMethod=testClass.getMethod(BaseTestRunner.SUITE_METHODNAME,new Class[0]);
  }
 catch (  Exception e) {
    runner.clearStatus();
    return new TestSuite(testClass);
  }
  if (!Modifier.isStatic(suiteMethod.getModifiers())) {
    runFailed(ourBundle.getString("junit.suite.must.be.static"));
    return null;
  }
  Test test;
  try {
    test=(Test)suiteMethod.invoke(null,new Class[0]);
    if (test == null)     return test;
  }
 catch (  InvocationTargetException e) {
    runner.runFailed(MessageFormat.format(ourBundle.getString("junit.failed.to.invoke.suite"),new Object[]{e.getTargetException().toString()}));
    return null;
  }
catch (  IllegalAccessException e) {
    runner.runFailed(MessageFormat.format(ourBundle.getString("junit.failed.to.invoke.suite"),new Object[]{e.toString()}));
    return null;
  }
  runner.clearStatus();
  return test;
}
