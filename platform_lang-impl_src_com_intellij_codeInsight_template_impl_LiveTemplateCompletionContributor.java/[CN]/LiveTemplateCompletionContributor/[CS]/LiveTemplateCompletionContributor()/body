{
  extend(CompletionType.BASIC,PlatformPatterns.psiElement(),new CompletionProvider<CompletionParameters>(){
    @RequiredReadAction @Override protected void addCompletions(    @NotNull final CompletionParameters parameters,    ProcessingContext context,    @NotNull CompletionResultSet result){
      final PsiFile file=parameters.getPosition().getContainingFile();
      if (file instanceof PsiPlainTextFile && parameters.getEditor().getComponent().getParent() instanceof EditorTextField) {
        return;
      }
      Editor editor=parameters.getEditor();
      int offset=editor.getCaretModel().getOffset();
      final List<TemplateImpl> availableTemplates=TemplateManagerImpl.listApplicableTemplates(file,offset,false);
      final Map<TemplateImpl,String> templates=filterTemplatesByPrefix(availableTemplates,editor,offset,false,false);
      if (showAllTemplates()) {
        final AtomicBoolean templatesShown=new AtomicBoolean(false);
        final CompletionResultSet finalResult=result;
        result.runRemainingContributors(parameters,new Consumer<CompletionResult>(){
          @Override public void consume(          CompletionResult completionResult){
            finalResult.passResult(completionResult);
            ensureTemplatesShown(templatesShown,templates,parameters,finalResult);
          }
        }
);
        ensureTemplatesShown(templatesShown,templates,parameters,result);
        return;
      }
      if (parameters.getInvocationCount() > 0)       return;
      if (!customTemplateAvailableAndHasCompletionItem(null,editor,file,offset)) {
        TemplateImpl template=findFullMatchedApplicableTemplate(editor,offset,availableTemplates);
        if (template != null) {
          result.withPrefixMatcher(result.getPrefixMatcher().cloneWithPrefix(template.getKey())).addElement(new LiveTemplateLookupElementImpl(template,true));
        }
      }
      for (      Map.Entry<TemplateImpl,String> possible : templates.entrySet()) {
        String templateKey=possible.getKey().getKey();
        String currentPrefix=possible.getValue();
        result.withPrefixMatcher(result.getPrefixMatcher().cloneWithPrefix(currentPrefix)).restartCompletionOnPrefixChange(templateKey);
      }
    }
  }
);
}
