{
  extend(CompletionType.BASIC,PlatformPatterns.psiElement(),new CompletionProvider<CompletionParameters>(){
    @Override protected void addCompletions(    @NotNull final CompletionParameters parameters,    ProcessingContext context,    @NotNull CompletionResultSet result){
      final PsiFile file=parameters.getPosition().getContainingFile();
      if (file instanceof PsiPlainTextFile && parameters.getEditor().getComponent().getParent() instanceof EditorTextField) {
        return;
      }
      final int offset=parameters.getOffset();
      final List<TemplateImpl> templates=listApplicableTemplates(file,offset);
      Editor editor=parameters.getEditor();
      if (showAllTemplates()) {
        final MultiMap<String,CustomLiveTemplateLookupElement> customTemplates=listApplicableCustomTemplates(editor,file,offset);
        final Ref<Boolean> templatesShown=Ref.create(false);
        final CompletionResultSet finalResult=result;
        result.runRemainingContributors(parameters,new Consumer<CompletionResult>(){
          @Override public void consume(          CompletionResult completionResult){
            finalResult.passResult(completionResult);
            ensureTemplatesShown(templatesShown,templates,customTemplates,finalResult);
          }
        }
);
        ensureTemplatesShown(templatesShown,templates,customTemplates,result);
        return;
      }
      if (parameters.getInvocationCount() > 0)       return;
      String templatePrefix=findLiveTemplatePrefix(file,editor,result.getPrefixMatcher().getPrefix());
      final TemplateImpl template=findApplicableTemplate(file,offset,templatePrefix);
      if (template != null) {
        result=result.withPrefixMatcher(template.getKey());
        result.addElement(new LiveTemplateLookupElementImpl(template,true));
      }
      for (      final TemplateImpl possible : templates) {
        result.restartCompletionOnPrefixChange(possible.getKey());
      }
    }
  }
);
}
