{
  myModules.clear();
  myModuleDependencies.clear();
  DefaultMutableTreeNode root=new DefaultMutableTreeNode(buildDescriptor(getProject()));
  final Module[] modules=ModuleManager.getInstance(getProject()).getModules();
  RootPolicy<LibraryOrderEntry> policy=new RootPolicy<LibraryOrderEntry>(){
    @Override public LibraryOrderEntry visitLibraryOrderEntry(    LibraryOrderEntry libraryOrderEntry,    LibraryOrderEntry value){
      return libraryOrderEntry;
    }
  }
;
  for (  Module module : modules) {
    final DefaultMutableTreeNode moduleNode=new DefaultMutableTreeNode(buildDescriptor(module));
    myModules.put(module.getName(),moduleNode);
    List<LibraryOrderEntry> libraryDependencies=new ArrayList<LibraryOrderEntry>();
    final ModuleRootManager moduleRootManager=ModuleRootManager.getInstance(module);
    for (    OrderEntry orderEntry : moduleRootManager.getOrderEntries()) {
      final LibraryOrderEntry library=orderEntry.accept(policy,null);
      if (library != null) {
        libraryDependencies.add(library);
      }
    }
    if (!libraryDependencies.isEmpty()) {
      DefaultMutableTreeNode dependenciesNode=getDependenciesNode(module.getName());
      for (      LibraryOrderEntry dependency : libraryDependencies) {
        dependenciesNode.add(new DefaultMutableTreeNode(buildDescriptor(dependency)));
      }
    }
    root.add(moduleNode);
  }
  myTreeModel.setRoot(root);
  updateTree(myChangesModel.getChanges());
}
