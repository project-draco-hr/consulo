{
  JPanel result=new JPanel(new GridBagLayout());
  myTreeModel=new GradleProjectStructureTreeModel(getProject(),myContext,false);
  myTree=new Tree(myTreeModel);
  myTree.addTreeWillExpandListener(new TreeWillExpandListener(){
    @Override public void treeWillExpand(    TreeExpansionEvent event) throws ExpandVetoException {
      if (!mySuppressCollapseTracking) {
        mySettings.getExpandStates().put(getPath(event.getPath()),true);
      }
    }
    @Override public void treeWillCollapse(    TreeExpansionEvent event) throws ExpandVetoException {
      if (!mySuppressCollapseTracking) {
        mySettings.getExpandStates().put(getPath(event.getPath()),false);
      }
    }
  }
);
  myTreeModel.addTreeModelListener(new TreeModelAdapter(){
    @Override public void treeStructureChanged(    TreeModelEvent e){
      scheduleCollapseStateAppliance(e.getTreePath());
    }
    @Override public void treeNodesInserted(    TreeModelEvent e){
      scheduleCollapseStateAppliance(e.getTreePath());
    }
  }
);
  myTreeModel.rebuild();
  GridBagConstraints constraints=new GridBagConstraints();
  constraints.gridwidth=GridBagConstraints.REMAINDER;
  constraints.anchor=GridBagConstraints.WEST;
  constraints.fill=GridBagConstraints.BOTH;
  constraints.weightx=constraints.weighty=1;
  result.add(myTree,constraints);
  result.setBackground(myTree.getBackground());
  CustomizationUtil.installPopupHandler(myTree,GradleConstants.ACTION_GROUP_SYNC_TREE,GradleConstants.SYNC_TREE_CONTEXT_MENU_PLACE);
  setupToolbar();
  return result;
}
