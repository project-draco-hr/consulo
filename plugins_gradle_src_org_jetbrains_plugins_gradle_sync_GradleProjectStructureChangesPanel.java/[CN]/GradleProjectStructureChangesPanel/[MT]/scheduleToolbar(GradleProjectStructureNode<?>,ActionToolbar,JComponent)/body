{
  if (mySuppressToolbar || node == myNodeWithActiveToolbar) {
    return;
  }
  myToolbarAppearanceAlarm.cancelAllRequests();
  myToolbarAppearanceAlarm.addRequest(new Runnable(){
    @Override public void run(){
      if (myNodeUnderMouse != node) {
        return;
      }
      final Point mouseLocation=MouseInfo.getPointerInfo().getLocation();
      SwingUtilities.convertPointFromScreen(mouseLocation,myTree);
      final TreePath path=myTree.getPathForLocation(mouseLocation.x,mouseLocation.y);
      if (path == null) {
        hideToolbar();
        return;
      }
      Balloon activeToolbar=myToolbar;
      if (activeToolbar instanceof IdeTooltip.Ui && ((IdeTooltip.Ui)(activeToolbar)).isInside(new RelativePoint(myTree,mouseLocation))) {
        return;
      }
      hideToolbar();
      final ActionManagerEx actionManager=ActionManagerEx.getInstanceEx();
      if (!actionManager.isActionPopupStackEmpty()) {
        hideToolbar();
        return;
      }
      toolbar.updateActionsImmediately();
      if (!toolbar.hasVisibleActions()) {
        hideToolbar();
        return;
      }
      final Balloon balloon=JBPopupFactory.getInstance().createBalloonBuilder(toolbarComponent).setFillColor(myTree.getBackground()).createBalloon();
      Disposer.register(getProject(),balloon);
      Point hintPosition=GradleUtil.getHintPosition(node,myTree);
      myToolbar=balloon;
      myNodeWithActiveToolbar=node;
      balloon.show(new RelativePoint(myTree,hintPosition),Balloon.Position.below);
      startToolbarTracking();
    }
  }
,TOOLTIP_DELAY_MILLIS);
}
