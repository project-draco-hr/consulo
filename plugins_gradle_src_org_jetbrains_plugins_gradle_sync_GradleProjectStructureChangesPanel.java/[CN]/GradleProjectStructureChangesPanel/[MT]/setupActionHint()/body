{
  final ActionManagerEx actionManager=ActionManagerEx.getInstanceEx();
  actionManager.addAnActionListener(new AnActionListener.Adapter(){
    @Override public void afterActionPerformed(    AnAction action,    DataContext dataContext,    AnActionEvent event){
      if (event != null && GradleConstants.SYNC_TREE_FLOATING_TOOLBAR_PLACE.equals(event.getPlace())) {
        hideHint();
      }
    }
  }
,getProject());
  final ActionGroup actionGroup=(ActionGroup)actionManager.getAction(GradleConstants.ACTION_GROUP_SYNC_TREE);
  final ActionToolbar toolbar=actionManager.createActionToolbar(GradleConstants.SYNC_TREE_FLOATING_TOOLBAR_PLACE,actionGroup,true);
  toolbar.setTargetComponent(this);
  final JComponent toolbarComponent=toolbar.getComponent();
  toolbarComponent.setOpaque(true);
  final Color foreground=myTree.getForeground();
  toolbarComponent.setForeground(foreground);
  toolbarComponent.setBackground(myTree.getBackground());
  myTree.addMouseMotionListener(new MouseMotionAdapter(){
    Object activeNode;
    @Override public void mouseMoved(    MouseEvent e){
      final TreePath path=myTree.getPathForLocation(e.getX(),e.getY());
      if (path == null) {
        hideHint();
        return;
      }
      Balloon activeToolbar=myToolbar;
      if (activeToolbar instanceof IdeTooltip.Ui && ((IdeTooltip.Ui)(activeToolbar)).isInside(new RelativePoint(e))) {
        return;
      }
      final Object node=path.getLastPathComponent();
      myNodeUnderMouse=node;
      if (node == activeNode && activeToolbar != null && !activeToolbar.isDisposed()) {
        return;
      }
      hideHint();
      if (!actionManager.isActionPopupStackEmpty()) {
        return;
      }
      toolbar.updateActionsImmediately();
      if (!toolbar.hasVisibleActions()) {
        activeNode=null;
        return;
      }
      activeNode=node;
      final Balloon balloon=JBPopupFactory.getInstance().createBalloonBuilder(toolbarComponent).setFillColor(myTree.getBackground()).createBalloon();
      Disposer.register(getProject(),balloon);
      Point hintPosition=GradleUtil.getHintPosition((GradleProjectStructureNode<?>)node,myTree);
      myToolbar=balloon;
      balloon.show(new RelativePoint(myTree,hintPosition),Balloon.Position.below);
      startToolbarTracking();
    }
  }
);
  myTree.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    MouseEvent e){
      hideHint();
    }
  }
);
}
