{
  super(project,GradleConstants.TOOL_WINDOW_TOOLBAR_PLACE);
  myContext=context;
  myToolbarControls.add(new GradleProjectStructureFiltersPanel());
  mySettings=GradleLocalSettings.getInstance(project);
  initContent();
  MessageBusConnection connection=project.getMessageBus().connect(project);
  connection.subscribe(GradleSettingsListener.TOPIC,new GradleSettingsListener(){
    private boolean myRefresh;
    private boolean myInBulk;
    @Override public void onBulkChangeStart(){
      myInBulk=true;
    }
    @Override public void onBulkChangeEnd(){
      myInBulk=false;
      if (myRefresh) {
        myRefresh=false;
        refreshAll();
      }
    }
    @Override public void onLinkedProjectPathChange(    @Nullable String oldPath,    @Nullable String newPath){
      refreshAll();
    }
    @Override public void onPreferLocalGradleDistributionToWrapperChange(    boolean currentValue){
      refreshAll();
    }
    @Override public void onGradleHomeChange(    @Nullable String oldPath,    @Nullable String newPath){
      refreshAll();
    }
    @Override public void onServiceDirectoryPathChange(    @Nullable String oldPath,    @Nullable String newPath){
      refreshAll();
    }
    @Override public void onUseAutoImportChange(    boolean oldValue,    boolean newValue){
      if (newValue) {
        update();
      }
    }
    private void refreshAll(){
      if (myInBulk) {
        myRefresh=true;
        return;
      }
      GradleUtil.refreshProject(getProject(),new Consumer<String>(){
        @Override public void consume(        String s){
          GradleConfigNotificationManager notificationManager=ServiceManager.getService(getProject(),GradleConfigNotificationManager.class);
          notificationManager.processRefreshError(s);
          UIUtil.invokeLaterIfNeeded(new Runnable(){
            @Override public void run(){
              update();
            }
          }
);
        }
      }
);
      update();
    }
  }
);
}
