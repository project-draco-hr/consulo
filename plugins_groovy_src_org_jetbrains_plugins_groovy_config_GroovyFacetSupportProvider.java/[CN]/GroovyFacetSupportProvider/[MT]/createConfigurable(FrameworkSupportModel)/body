{
  final Project project=model.getProject();
  final GroovyFacetEditor facetEditor=new GroovyFacetEditor(project);
  return new FrameworkSupportConfigurable(){
    public JComponent getComponent(){
      return facetEditor.getComponent();
    }
    public void addSupport(    final Module module,    final ModifiableRootModel rootModel,    @Nullable Library library){
      FacetManager facetManager=FacetManager.getInstance(module);
      ModifiableFacetModel model=facetManager.createModifiableModel();
      Facet underlyingFacet=null;
      final GroovyFacetType facetType=GroovyFacetType.getInstance();
      GroovyFacet facet=facetManager.createFacet(facetType,facetType.getDefaultFacetName(),underlyingFacet);
      model.addFacet(facet);
      model.commit();
      if (!facetEditor.addNewSdk()) {
        final Library selectedLibrary=facetEditor.getSelectedLibrary();
        if (selectedLibrary != null) {
          LibrariesUtil.placeEntryToCorrectPlace(rootModel,rootModel.addLibraryEntry(selectedLibrary));
        }
        return;
      }
      final String path=facetEditor.getNewSdkPath();
      final AbstractGroovyLibraryManager libraryManager=facetEditor.getChosenManager();
      if (path != null && libraryManager != null) {
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          public void run(){
            if (module.isDisposed()) {
              return;
            }
            final Library lib=libraryManager.createLibrary(path,LibrariesContainerFactory.createContainer(module),false);
            if (lib != null) {
              ApplicationManager.getApplication().runWriteAction(new Runnable(){
                public void run(){
                  ModifiableRootModel rootModel=ModuleRootManager.getInstance(module).getModifiableModel();
                  LibrariesUtil.placeEntryToCorrectPlace(rootModel,rootModel.addLibraryEntry(lib));
                  rootModel.commit();
                }
              }
);
            }
          }
        }
);
      }
    }
  }
;
}
