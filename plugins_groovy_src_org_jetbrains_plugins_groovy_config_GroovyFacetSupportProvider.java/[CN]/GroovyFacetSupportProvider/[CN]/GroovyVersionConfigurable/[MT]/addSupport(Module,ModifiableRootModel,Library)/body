{
  final Library selectedLibrary=myFacetEditor.getSelectedLibrary();
  if (selectedLibrary != null && !myFacetEditor.addNewSdk()) {
    final String selectedName=selectedLibrary.getName();
    LibrariesUtil.placeEntryToCorrectPlace(rootModel,rootModel.addLibraryEntry(selectedLibrary));
    GroovyFacetSupportProvider.this.addSupport(module,rootModel,selectedName,selectedLibrary);
  }
 else   if (myFacetEditor.getNewSdkPath() != null) {
    final String path=myFacetEditor.getNewSdkPath();
    final AbstractConfigUtils configUtils=getFrameworkCreatorByPath(path);
    if (configUtils != null && path != null) {
      final Project project=module.getProject();
      final String selectedName=configUtils.generateNewSDKLibName(configUtils.getSDKVersion(path),project);
      final CreateLibraryDialog dialog=new CreateLibraryDialog(project,GroovyBundle.message("facet.create.lib.title"),GroovyBundle.message("facet.create.project.lib",selectedName),GroovyBundle.message("facet.create.application.lib",selectedName)){
        @Override protected void doOKAction(){
          ApplicationManager.getApplication().runWriteAction(new Runnable(){
            public void run(){
              ModuleRootManager manager=ModuleRootManager.getInstance(module);
              ModifiableRootModel rootModel=manager.getModifiableModel();
              final Library lib=configUtils.createSDKLibrary(path,selectedName,project,false,isInProject());
              LibrariesUtil.placeEntryToCorrectPlace(rootModel,rootModel.addLibraryEntry(lib));
              if (lib != null) {
                configUtils.saveSDKDefaultLibName(selectedName);
              }
              GroovyFacetSupportProvider.this.addSupport(module,rootModel,selectedName,lib);
              rootModel.commit();
            }
          }
);
          super.doOKAction();
        }
        @Override public void doCancelAction(){
          ApplicationManager.getApplication().runWriteAction(new Runnable(){
            public void run(){
              GroovyFacetSupportProvider.this.addSupport(module,rootModel,"unknown",null);
            }
          }
);
          super.doCancelAction();
        }
      }
;
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          dialog.show();
        }
      }
);
    }
 else {
      GroovyFacetSupportProvider.this.addSupport(module,rootModel,"unknown",null);
    }
  }
}
