{
  Library selectedLibrary=myFacetEditor.getSelectedLibrary();
  String selectedName=null;
  if (selectedLibrary != null && !myFacetEditor.addNewSdk()) {
    selectedName=selectedLibrary.getName();
    LibrariesUtil.placeEntryToCorrectPlace(rootModel,rootModel.addLibraryEntry(selectedLibrary));
  }
 else   if (myFacetEditor.getNewSdkPath() != null) {
    final String path=myFacetEditor.getNewSdkPath();
    ValidationResult result=GroovyConfigUtils.isGroovySdkHome(path);
    if (path != null && ValidationResult.OK == result) {
      final Project project=module.getProject();
      selectedName=GroovyConfigUtils.generateNewGroovyLibName(GroovyConfigUtils.getGroovyVersion(path),project);
      final CreateLibraryDialog dialog=new CreateLibraryDialog(project,selectedName);
      dialog.show();
      if (dialog.isOK()) {
        final Library lib=GroovyConfigUtils.createGroovyLibrary(path,selectedName,project,false,dialog.isInProject());
        LibrariesUtil.placeEntryToCorrectPlace(rootModel,rootModel.addLibraryEntry(lib));
      }
    }
 else {
      Messages.showErrorDialog(GroovyBundle.message("invalid.groovy.sdk.path.message"),GroovyBundle.message("invalid.groovy.sdk.path.text"));
      selectedLibrary=null;
    }
  }
  if (selectedLibrary != null) {
    GroovyConfigUtils.saveGroovyDefaultLibName(selectedName);
  }
  GroovyFacetSupportProvider.this.addSupport(module,rootModel,selectedName,selectedLibrary);
}
