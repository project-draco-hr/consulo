{
  String selectedName=null;
  Library selectedLibrary=myFacetEditor.getSelectedLibrary();
  if (selectedLibrary != null && !myFacetEditor.addNewSdk()) {
    selectedName=selectedLibrary.getName();
    LibrariesUtil.placeEntryToCorrectPlace(rootModel,rootModel.addLibraryEntry(selectedLibrary));
    GroovyFacetSupportProvider.this.addSupport(module,rootModel,selectedName,selectedLibrary);
  }
 else   if (myFacetEditor.getNewSdkPath() != null) {
    final String path=myFacetEditor.getNewSdkPath();
    ValidationResult result=GroovyConfigUtils.getInstance().isSDKHome(path);
    if (path != null && ValidationResult.OK == result) {
      final Project project=module.getProject();
      selectedName=GroovyConfigUtils.getInstance().generateNewSDKLibName(GroovyConfigUtils.getInstance().getSDKVersion(path),project);
      final String selected=selectedName;
      final CreateLibraryDialog dialog=new CreateLibraryDialog(project,GroovyBundle.message("facet.create.lib.title"),GroovyBundle.message("facet.create.project.lib",selectedName),GroovyBundle.message("facet.create.application.lib",selectedName)){
        @Override protected void doOKAction(){
          ApplicationManager.getApplication().runWriteAction(new Runnable(){
            public void run(){
              ModuleRootManager manager=ModuleRootManager.getInstance(module);
              ModifiableRootModel rootModel=manager.getModifiableModel();
              final Library lib=GroovyConfigUtils.getInstance().createSDKLibrary(path,selected,project,false,isInProject());
              LibrariesUtil.placeEntryToCorrectPlace(rootModel,rootModel.addLibraryEntry(lib));
              if (lib != null) {
                GroovyConfigUtils.getInstance().saveSDKDefaultLibName(selected);
              }
              GroovyFacetSupportProvider.this.addSupport(module,rootModel,selected,lib);
              rootModel.commit();
            }
          }
);
          super.doOKAction();
        }
      }
;
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          dialog.show();
        }
      }
);
    }
 else {
      Messages.showErrorDialog(GroovyBundle.message("invalid.groovy.sdk.path.message"),GroovyBundle.message("invalid.groovy.sdk.path.text"));
      selectedLibrary=null;
    }
  }
}
