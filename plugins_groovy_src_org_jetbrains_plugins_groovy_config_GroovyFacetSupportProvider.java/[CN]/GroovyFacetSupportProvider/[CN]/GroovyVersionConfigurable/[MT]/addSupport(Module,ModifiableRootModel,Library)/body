{
  String version=myFacetEditor.getSelectedVersion();
  if (version != null && !myFacetEditor.addNewSdk()) {
    library=LibrariesUtil.getLibraryByName(version);
    if (library != null) {
      LibrariesUtil.placeEntryToCorrectPlace(rootModel,rootModel.addLibraryEntry(library));
    }
  }
 else   if (myFacetEditor.getNewSdkPath() != null) {
    String path=myFacetEditor.getNewSdkPath();
    ValidationResult result=GroovyConfigUtils.isGroovySdkHome(path);
    if (path != null && ValidationResult.OK == result) {
      String name=GroovyConfigUtils.generateNewGroovyLibName(GroovyConfigUtils.getGroovyVersion(path));
      version=name;
      library=GroovyConfigUtils.createGroovyLibrary(path,name,module.getProject(),false);
      LibrariesUtil.placeEntryToCorrectPlace(rootModel,rootModel.addLibraryEntry(library));
    }
 else {
      Messages.showErrorDialog(GroovyBundle.message("invalid.groovy.sdk.path.message"),GroovyBundle.message("invalid.groovy.sdk.path.text"));
      version=null;
    }
  }
  if (version != null) {
    GroovyConfigUtils.saveGroovyDefaultLibName(version);
  }
  GroovyFacetSupportProvider.this.addSupport(module,rootModel,version,library);
}
