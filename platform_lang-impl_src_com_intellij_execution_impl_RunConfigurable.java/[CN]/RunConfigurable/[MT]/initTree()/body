{
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(true);
  UIUtil.setLineStyleAngled(myTree);
  TreeUtil.installActions(myTree);
  new TreeSpeedSearch(myTree,new Convertor<TreePath,String>(){
    @Override public String convert(    TreePath o){
      DefaultMutableTreeNode node=(DefaultMutableTreeNode)o.getLastPathComponent();
      final Object userObject=node.getUserObject();
      if (userObject instanceof RunnerAndConfigurationSettingsImpl) {
        return ((RunnerAndConfigurationSettingsImpl)userObject).getName();
      }
 else       if (userObject instanceof SingleConfigurationConfigurable) {
        return ((SingleConfigurationConfigurable)userObject).getNameText();
      }
 else {
        if (userObject instanceof ConfigurationType) {
          return ((ConfigurationType)userObject).getDisplayName();
        }
 else         if (userObject instanceof String) {
          return (String)userObject;
        }
      }
      return o.toString();
    }
  }
);
  myTree.setCellRenderer(new ColoredTreeCellRenderer(){
    public void customizeCellRenderer(    JTree tree,    Object value,    boolean selected,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      if (value instanceof DefaultMutableTreeNode) {
        final DefaultMutableTreeNode node=(DefaultMutableTreeNode)value;
        final DefaultMutableTreeNode parent=(DefaultMutableTreeNode)node.getParent();
        final Object userObject=node.getUserObject();
        Boolean shared=null;
        if (userObject instanceof ConfigurationType) {
          final ConfigurationType configurationType=(ConfigurationType)userObject;
          append(configurationType.getDisplayName(),parent.isRoot() ? SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES : SimpleTextAttributes.REGULAR_ATTRIBUTES);
          setIcon(configurationType.getIcon());
        }
 else         if (userObject == DEFAULTS) {
          append("Defaults",SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES);
          setIcon(AllIcons.General.Settings);
        }
 else         if (userObject instanceof String) {
          append((String)userObject,SimpleTextAttributes.REGULAR_ATTRIBUTES);
          setIcon(AllIcons.Nodes.Folder);
        }
 else         if (userObject instanceof ConfigurationFactory) {
          append(((ConfigurationFactory)userObject).getName());
          setIcon(((ConfigurationFactory)userObject).getIcon());
        }
 else {
          final RunManagerImpl runManager=getRunManager();
          RunConfiguration configuration=null;
          String name=null;
          if (userObject instanceof SingleConfigurationConfigurable) {
            final SingleConfigurationConfigurable<?> settings=(SingleConfigurationConfigurable)userObject;
            RunnerAndConfigurationSettings snapshot;
            snapshot=settings.getSettings();
            configuration=settings.getConfiguration();
            name=settings.getNameText();
            shared=runManager.isConfigurationShared(snapshot);
            setIcon(ProgramRunnerUtil.getConfigurationIcon(snapshot,!settings.isValid(),runManager.isTemporary(configuration)));
          }
 else           if (userObject instanceof RunnerAndConfigurationSettingsImpl) {
            RunnerAndConfigurationSettings settings=(RunnerAndConfigurationSettings)userObject;
            shared=runManager.isConfigurationShared(settings);
            setIcon(RunManagerEx.getInstanceEx(myProject).getConfigurationIcon(settings));
            configuration=settings.getConfiguration();
            name=configuration.getName();
          }
          if (configuration != null) {
            append(name,runManager.isTemporary(configuration) ? SimpleTextAttributes.GRAY_ATTRIBUTES : SimpleTextAttributes.REGULAR_ATTRIBUTES);
          }
        }
        if (shared != null) {
          Icon icon=getIcon();
          LayeredIcon layeredIcon=new LayeredIcon(2);
          layeredIcon.setIcon(icon,0,0,0);
          layeredIcon.setIcon(shared ? SHARED_ICON : NON_SHARED_ICON,1,8,0);
          setIcon(layeredIcon);
          setIconTextGap(0);
        }
 else {
          setIconTextGap(2);
        }
      }
    }
  }
);
  final RunManagerEx manager=getRunManager();
  final ConfigurationType[] factories=manager.getConfigurationFactories();
  for (  ConfigurationType type : factories) {
    final RunnerAndConfigurationSettings[] configurations=manager.getConfigurationSettings(type);
    if (configurations.length > 0) {
      final DefaultMutableTreeNode typeNode=new DefaultMutableTreeNode(type);
      myRoot.add(typeNode);
      Map<String,DefaultMutableTreeNode> folderMapping=new HashMap<String,DefaultMutableTreeNode>();
      int folderCounter=0;
      for (      RunnerAndConfigurationSettings configuration : configurations) {
        String folder=configuration.getFolderName();
        if (folder != null) {
          DefaultMutableTreeNode node=folderMapping.get(folder);
          if (node == null) {
            node=new DefaultMutableTreeNode(folder);
            typeNode.insert(node,folderCounter);
            folderCounter++;
            folderMapping.put(folder,node);
          }
          node.add(new DefaultMutableTreeNode(configuration));
        }
 else {
          typeNode.add(new DefaultMutableTreeNode(configuration));
        }
      }
    }
  }
  final DefaultMutableTreeNode defaults=new DefaultMutableTreeNode(DEFAULTS);
  final ConfigurationType[] configurationTypes=RunManagerImpl.getInstanceImpl(myProject).getConfigurationFactories();
  for (  final ConfigurationType type : configurationTypes) {
    if (!(type instanceof UnknownConfigurationType)) {
      ConfigurationFactory[] configurationFactories=type.getConfigurationFactories();
      DefaultMutableTreeNode typeNode=new DefaultMutableTreeNode(type);
      defaults.add(typeNode);
      if (configurationFactories.length != 1) {
        for (        ConfigurationFactory factory : configurationFactories) {
          typeNode.add(new DefaultMutableTreeNode(factory));
        }
      }
    }
  }
  if (defaults.getChildCount() > 0)   myRoot.add(defaults);
  myTree.addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      final TreePath selectionPath=myTree.getSelectionPath();
      if (selectionPath != null) {
        DefaultMutableTreeNode node=(DefaultMutableTreeNode)selectionPath.getLastPathComponent();
        final Object userObject=getSafeUserObject(node);
        if (userObject instanceof RunnerAndConfigurationSettingsImpl) {
          final SingleConfigurationConfigurable<RunConfiguration> configurationConfigurable=SingleConfigurationConfigurable.editSettings((RunnerAndConfigurationSettings)userObject,null);
          installUpdateListeners(configurationConfigurable);
          node.setUserObject(configurationConfigurable);
          updateRightPanel(configurationConfigurable);
        }
 else         if (userObject instanceof SingleConfigurationConfigurable) {
          updateRightPanel((SingleConfigurationConfigurable<RunConfiguration>)userObject);
        }
 else         if (userObject instanceof String && userObject != DEFAULTS) {
          showFolderField(getSelectedConfigurationType(),node,(String)userObject);
        }
 else {
          if (userObject instanceof ConfigurationType || userObject == DEFAULTS) {
            final DefaultMutableTreeNode parent=(DefaultMutableTreeNode)node.getParent();
            if (parent.isRoot()) {
              drawPressAddButtonMessage(userObject instanceof String || userObject == DEFAULTS ? null : (ConfigurationType)userObject);
            }
 else {
              final ConfigurationType type=(ConfigurationType)userObject;
              ConfigurationFactory[] factories=type.getConfigurationFactories();
              if (factories.length == 1) {
                final ConfigurationFactory factory=factories[0];
                showTemplateConfigurable(factory);
              }
 else {
                drawPressAddButtonMessage((ConfigurationType)userObject);
              }
            }
          }
 else           if (userObject instanceof ConfigurationFactory) {
            showTemplateConfigurable((ConfigurationFactory)userObject);
          }
        }
      }
      updateDialog();
    }
  }
);
  myTree.registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      clickDefaultButton();
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),JComponent.WHEN_FOCUSED);
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      if (isDisposed)       return;
      myTree.requestFocusInWindow();
      final RunnerAndConfigurationSettings settings=manager.getSelectedConfiguration();
      if (settings != null) {
        final Enumeration enumeration=myRoot.breadthFirstEnumeration();
        while (enumeration.hasMoreElements()) {
          final DefaultMutableTreeNode node=(DefaultMutableTreeNode)enumeration.nextElement();
          final Object userObject=node.getUserObject();
          if (userObject instanceof RunnerAndConfigurationSettingsImpl) {
            final RunnerAndConfigurationSettings runnerAndConfigurationSettings=(RunnerAndConfigurationSettings)userObject;
            final ConfigurationType configurationType=settings.getType();
            if (configurationType != null && Comparing.strEqual(runnerAndConfigurationSettings.getConfiguration().getType().getId(),configurationType.getId()) && Comparing.strEqual(runnerAndConfigurationSettings.getConfiguration().getName(),settings.getName())) {
              TreeUtil.selectInTree(node,true,myTree);
              return;
            }
          }
        }
      }
 else {
        mySelectedConfigurable=null;
      }
      TreeUtil.selectInTree(defaults,true,myTree);
      drawPressAddButtonMessage(null);
    }
  }
);
  sortTopLevelBranches();
  ((DefaultTreeModel)myTree.getModel()).reload();
}
