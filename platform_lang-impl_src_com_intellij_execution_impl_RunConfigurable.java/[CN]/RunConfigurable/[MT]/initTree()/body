{
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(true);
  UIUtil.setLineStyleAngled(myTree);
  TreeUtil.installActions(myTree);
  PopupHandler.installFollowingSelectionTreePopup(myTree,createActionsGroup(),ActionPlaces.UNKNOWN,ActionManager.getInstance());
  myTree.setCellRenderer(new ColoredTreeCellRenderer(){
    public void customizeCellRenderer(    JTree tree,    Object value,    boolean selected,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      if (value instanceof DefaultMutableTreeNode) {
        final DefaultMutableTreeNode node=(DefaultMutableTreeNode)value;
        final Object userObject=node.getUserObject();
        if (userObject instanceof ConfigurationType) {
          final ConfigurationType configurationType=(ConfigurationType)userObject;
          append(configurationType.getDisplayName(),SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES);
          setIcon(configurationType.getIcon());
        }
 else {
          final RunManager runManager=getRunManager();
          RunConfiguration configuration=null;
          String name=null;
          if (userObject instanceof SingleConfigurationConfigurable) {
            final SingleConfigurationConfigurable<?> settings=(SingleConfigurationConfigurable)userObject;
            RunnerAndConfigurationSettings snapshot;
            try {
              snapshot=settings.getSnapshot();
            }
 catch (            ConfigurationException e) {
              snapshot=settings.getSettings();
            }
            configuration=settings.getConfiguration();
            name=settings.getNameText();
            setIcon(ProgramRunnerUtil.getConfigurationIcon(snapshot,!settings.isValid(),runManager.isTemporary(configuration)));
          }
 else           if (userObject instanceof RunnerAndConfigurationSettingsImpl) {
            RunnerAndConfigurationSettings settings=(RunnerAndConfigurationSettings)userObject;
            setIcon(ProgramRunnerUtil.getConfigurationIcon(getProject(),settings));
            configuration=settings.getConfiguration();
            name=configuration.getName();
          }
          if (configuration != null) {
            append(name,runManager.isTemporary(configuration) ? SimpleTextAttributes.GRAY_ATTRIBUTES : SimpleTextAttributes.REGULAR_ATTRIBUTES);
          }
        }
      }
    }
  }
);
  final RunManagerEx manager=getRunManager();
  final ConfigurationType[] factories=manager.getConfigurationFactories();
  for (  ConfigurationType type : factories) {
    final RunnerAndConfigurationSettings[] configurations=manager.getConfigurationSettings(type);
    if (configurations != null && configurations.length > 0) {
      final DefaultMutableTreeNode typeNode=new DefaultMutableTreeNode(type);
      myRoot.add(typeNode);
      for (      RunnerAndConfigurationSettings configuration : configurations) {
        typeNode.add(new DefaultMutableTreeNode(configuration));
      }
    }
  }
  myTree.addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      final TreePath selectionPath=myTree.getSelectionPath();
      if (selectionPath != null) {
        DefaultMutableTreeNode node=(DefaultMutableTreeNode)selectionPath.getLastPathComponent();
        final Object userObject=node.getUserObject();
        if (userObject instanceof RunnerAndConfigurationSettingsImpl) {
          final SingleConfigurationConfigurable<RunConfiguration> configurationConfigurable=SingleConfigurationConfigurable.editSettings((RunnerAndConfigurationSettings)userObject);
          installUpdateListeners(configurationConfigurable);
          node.setUserObject(configurationConfigurable);
          updateRightPanel(configurationConfigurable);
        }
 else         if (userObject instanceof SingleConfigurationConfigurable) {
          updateRightPanel((SingleConfigurationConfigurable<RunConfiguration>)userObject);
        }
 else         if (userObject instanceof ConfigurationType) {
          drawPressAddButtonMessage((ConfigurationType)userObject);
        }
      }
      updateDialog();
    }
  }
);
  myTree.registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      clickDefaultButton();
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),JComponent.WHEN_FOCUSED);
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      myTree.requestFocusInWindow();
      final RunnerAndConfigurationSettings settings=manager.getSelectedConfiguration();
      if (settings != null) {
        final Enumeration enumeration=myRoot.breadthFirstEnumeration();
        while (enumeration.hasMoreElements()) {
          final DefaultMutableTreeNode node=(DefaultMutableTreeNode)enumeration.nextElement();
          final Object userObject=node.getUserObject();
          if (userObject instanceof RunnerAndConfigurationSettingsImpl) {
            final RunnerAndConfigurationSettings runnerAndConfigurationSettings=(RunnerAndConfigurationSettings)userObject;
            final ConfigurationType configurationType=settings.getType();
            if (configurationType != null && Comparing.strEqual(runnerAndConfigurationSettings.getConfiguration().getType().getId(),configurationType.getId()) && Comparing.strEqual(runnerAndConfigurationSettings.getConfiguration().getName(),settings.getName())) {
              TreeUtil.selectInTree(node,true,myTree);
              return;
            }
          }
        }
      }
 else {
        mySelectedConfigurable=null;
      }
      TreeUtil.selectFirstNode(myTree);
      drawPressAddButtonMessage(null);
    }
  }
);
  sortTree(myRoot);
  ((DefaultTreeModel)myTree.getModel()).reload();
}
