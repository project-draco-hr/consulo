{
  updateActiveConfigurationFromSelected();
  final RunManagerImpl manager=getRunManager();
  final ConfigurationType[] types=manager.getConfigurationFactories();
  List<ConfigurationType> configurationTypes=new ArrayList<ConfigurationType>();
  for (int i=0; i < myRoot.getChildCount(); i++) {
    final DefaultMutableTreeNode node=(DefaultMutableTreeNode)myRoot.getChildAt(i);
    Object userObject=node.getUserObject();
    if (userObject instanceof ConfigurationType) {
      configurationTypes.add((ConfigurationType)userObject);
    }
  }
  for (  ConfigurationType type : types) {
    if (!configurationTypes.contains(type))     configurationTypes.add(type);
  }
  for (  ConfigurationType configurationType : configurationTypes) {
    applyByType(configurationType);
  }
  try {
    int i=Math.max(RunManagerConfig.MIN_RECENT_LIMIT,Integer.parseInt(myRecentsLimit.getText()));
    int oldLimit=manager.getConfig().getRecentsLimit();
    if (oldLimit != i) {
      manager.getConfig().setRecentsLimit(i);
      manager.checkRecentsLimit();
    }
  }
 catch (  NumberFormatException e) {
  }
  manager.getConfig().setRestartRequiresConfirmation(myConfirmation.isSelected());
  for (  Configurable configurable : myStoredComponents.values()) {
    if (configurable.isModified()) {
      configurable.apply();
    }
  }
  for (  Pair<UnnamedConfigurable,JComponent> each : myAdditionalSettings) {
    each.first.apply();
  }
  manager.saveOrder();
  setModified(false);
  myTree.repaint();
}
