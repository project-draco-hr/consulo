{
  RunnerAndConfigurationSettings selectedSettings=getSelectedSettings();
  int indexToMove=-1;
  DefaultMutableTreeNode typeNode=getConfigurationTypeNode(type);
  final RunManagerImpl manager=getRunManager();
  final ArrayList<RunConfigurationBean> stableConfigurations=new ArrayList<RunConfigurationBean>();
  if (typeNode != null) {
    final Set<String> names=new HashSet<String>();
    List<DefaultMutableTreeNode> configurationNodes=new ArrayList<DefaultMutableTreeNode>();
    collectNodesRecursively(typeNode,configurationNodes,CONFIGURATION,TEMPORARY_CONFIGURATION);
    for (    DefaultMutableTreeNode node : configurationNodes) {
      final Object userObject=node.getUserObject();
      RunConfigurationBean configurationBean=null;
      RunnerAndConfigurationSettings settings=null;
      if (userObject instanceof SingleConfigurationConfigurable) {
        final SingleConfigurationConfigurable configurable=(SingleConfigurationConfigurable)userObject;
        settings=(RunnerAndConfigurationSettings)configurable.getSettings();
        if (settings.isTemporary()) {
          applyConfiguration(typeNode,configurable);
        }
        configurationBean=new RunConfigurationBean(configurable);
      }
 else       if (userObject instanceof RunnerAndConfigurationSettingsImpl) {
        settings=(RunnerAndConfigurationSettings)userObject;
        configurationBean=new RunConfigurationBean(settings,manager.isConfigurationShared(settings),manager.getBeforeRunTasks(settings.getConfiguration()));
      }
      if (configurationBean != null) {
        final SingleConfigurationConfigurable configurable=configurationBean.getConfigurable();
        final String nameText=configurable != null ? configurable.getNameText() : configurationBean.getSettings().getName();
        if (!names.add(nameText)) {
          TreeUtil.selectNode(myTree,node);
          throw new ConfigurationException(type.getDisplayName() + " with name \'" + nameText+ "\' already exists");
        }
        stableConfigurations.add(configurationBean);
        if (settings == selectedSettings) {
          indexToMove=stableConfigurations.size() - 1;
        }
      }
    }
    List<DefaultMutableTreeNode> folderNodes=new ArrayList<DefaultMutableTreeNode>();
    collectNodesRecursively(typeNode,folderNodes,FOLDER);
    names.clear();
    for (    DefaultMutableTreeNode node : folderNodes) {
      String folderName=(String)node.getUserObject();
      if (folderName.isEmpty()) {
        TreeUtil.selectNode(myTree,node);
        throw new ConfigurationException("Folder name shouldn't be empty");
      }
      if (!names.add(folderName)) {
        TreeUtil.selectNode(myTree,node);
        throw new ConfigurationException("Folders name \'" + folderName + "\' is duplicated");
      }
    }
  }
  for (  RunConfigurationBean bean : stableConfigurations) {
    final SingleConfigurationConfigurable configurable=bean.getConfigurable();
    if (configurable != null) {
      applyConfiguration(typeNode,configurable);
    }
  }
  Set<RunnerAndConfigurationSettings> toDeleteSettings=new THashSet<RunnerAndConfigurationSettings>();
  for (  RunConfiguration each : manager.getConfigurationsList(type)) {
    ContainerUtil.addIfNotNull(toDeleteSettings,manager.getSettings(each));
  }
  int shift=0;
  if (selectedSettings != null && selectedSettings.getType() == type) {
    shift=adjustOrder();
  }
  if (shift != 0 && indexToMove != -1) {
    stableConfigurations.add(indexToMove - shift,stableConfigurations.remove(indexToMove));
  }
  for (  RunConfigurationBean each : stableConfigurations) {
    toDeleteSettings.remove(each.getSettings());
    manager.addConfiguration(each.getSettings(),each.isShared(),each.getStepsBeforeLaunch(),false);
  }
  for (  RunnerAndConfigurationSettings each : toDeleteSettings) {
    manager.removeConfiguration(each);
  }
}
