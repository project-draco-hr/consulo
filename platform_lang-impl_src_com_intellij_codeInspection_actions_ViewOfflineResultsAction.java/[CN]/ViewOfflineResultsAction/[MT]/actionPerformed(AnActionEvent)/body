{
  final Project project=event.getData(PlatformDataKeys.PROJECT);
  LOG.assertTrue(project != null);
  final FileChooserDescriptor descriptor=new FileChooserDescriptor(false,true,false,false,false,false){
    @Override public Icon getIcon(    VirtualFile file){
      if (file.isDirectory()) {
        if (file.findChild(InspectionApplication.DESCRIPTIONS + "." + StdFileTypes.XML.getDefaultExtension()) != null) {
          return AllIcons.Nodes.InspectionResults;
        }
      }
      return super.getIcon(file);
    }
  }
;
  descriptor.setTitle("Select Path");
  descriptor.setDescription("Select directory which contains exported inspections results");
  final VirtualFile virtualFile=FileChooser.chooseFile(descriptor,project,null);
  if (virtualFile == null || !virtualFile.isDirectory())   return;
  final Map<String,Map<String,Set<OfflineProblemDescriptor>>> resMap=new HashMap<String,Map<String,Set<OfflineProblemDescriptor>>>();
  final String[] profileName=new String[1];
  final Runnable process=new Runnable(){
    public void run(){
      final VirtualFile[] files=virtualFile.getChildren();
      try {
        for (        final VirtualFile inspectionFile : files) {
          if (inspectionFile.isDirectory())           continue;
          final String shortName=inspectionFile.getNameWithoutExtension();
          final String extension=inspectionFile.getExtension();
          if (shortName.equals(InspectionApplication.DESCRIPTIONS)) {
            profileName[0]=ApplicationManager.getApplication().runReadAction(new Computable<String>(){
              @Nullable public String compute(){
                return OfflineViewParseUtil.parseProfileName(LoadTextUtil.loadText(inspectionFile).toString());
              }
            }
);
          }
 else           if (XML_EXTENSION.equals(extension)) {
            resMap.put(shortName,ApplicationManager.getApplication().runReadAction(new Computable<Map<String,Set<OfflineProblemDescriptor>>>(){
              public Map<String,Set<OfflineProblemDescriptor>> compute(){
                return OfflineViewParseUtil.parse(LoadTextUtil.loadText(inspectionFile).toString());
              }
            }
));
          }
        }
      }
 catch (      final Exception e) {
        SwingUtilities.invokeLater(new Runnable(){
          public void run(){
            Messages.showInfoMessage(e.getMessage(),InspectionsBundle.message("offline.view.parse.exception.title"));
          }
        }
);
        throw new ProcessCanceledException();
      }
    }
  }
;
  ProgressManager.getInstance().runProcessWithProgressAsynchronously(project,InspectionsBundle.message("parsing.inspections.dump.progress.title"),process,new Runnable(){
    public void run(){
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          final String name=profileName[0];
          showOfflineView(project,name,resMap,InspectionsBundle.message("offline.view.title") + " (" + (name != null ? name : InspectionsBundle.message("offline.view.editor.settings.title"))+ ")");
        }
      }
);
    }
  }
,null,new PerformAnalysisInBackgroundOption(project));
}
