{
  super.visitAssignmentExpression(assignment);
  final IElementType assignmentTokenType=assignment.getOperationToken();
  if (!assignmentTokenType.equals(GroovyTokenTypes.mASSIGN)) {
    return;
  }
  final GrExpression lhs=assignment.getLValue();
  final GrExpression rhs=(GrExpression)PsiUtil.skipParentheses(assignment.getRValue(),false);
  if (!(rhs instanceof GrBinaryExpression)) {
    return;
  }
  final GrBinaryExpression binaryRhs=(GrBinaryExpression)rhs;
  if (binaryRhs.getRightOperand() == null) {
    return;
  }
  final IElementType expressionTokenType=binaryRhs.getOperationTokenType();
  if (getTextForOperator(expressionTokenType) == null) {
    return;
  }
  if (JavaTokenType.EQEQ.equals(expressionTokenType)) {
    return;
  }
  if (ignoreLazyOperators) {
    if (GroovyTokenTypes.mLAND.equals(expressionTokenType) || GroovyTokenTypes.mLOR.equals(expressionTokenType)) {
      return;
    }
  }
  if (ignoreObscureOperators) {
    if (GroovyTokenTypes.mBXOR.equals(expressionTokenType) || GroovyTokenTypes.mMOD.equals(expressionTokenType)) {
      return;
    }
  }
  final GrExpression lOperand=binaryRhs.getLeftOperand();
  if (SideEffectChecker.mayHaveSideEffects(lhs)) {
    return;
  }
  if (!EquivalenceChecker.expressionsAreEquivalent(lhs,lOperand)) {
    return;
  }
  registerError(assignment,assignment);
}
