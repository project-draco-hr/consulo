{
  super(new BorderLayout());
  myProject=project;
  myToolWindowManager=toolWindowManager;
  final AbstractAction backAction=new AbstractAction(){
    public void actionPerformed(    final ActionEvent e){
      myHistory.back();
    }
  }
;
  final AbstractAction fwdAction=new AbstractAction(){
    public void actionPerformed(    final ActionEvent e){
      myHistory.forward();
    }
  }
;
  final ActionMap actionMap=getActionMap();
  actionMap.put(ACTION_BACKCOMMAND,backAction);
  actionMap.put(ACTION_FORWARDCOMMAND,fwdAction);
  final KeyStroke[] backStrokes=getKeyStrokes(IdeActions.ACTION_GOTO_BACK,keymapManager);
  for (int idx=0; idx < backStrokes.length; idx++) {
    KeyStroke stroke=backStrokes[idx];
    registerKeyboardAction(backAction,ACTION_BACKCOMMAND,stroke,JComponent.WHEN_IN_FOCUSED_WINDOW);
    registerKeyboardAction(backAction,ACTION_BACKCOMMAND,stroke,JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  }
  final KeyStroke[] fwdStrokes=getKeyStrokes(IdeActions.ACTION_GOTO_FORWARD,keymapManager);
  for (int idx=0; idx < fwdStrokes.length; idx++) {
    KeyStroke stroke=fwdStrokes[idx];
    registerKeyboardAction(fwdAction,ACTION_FORWARDCOMMAND,stroke,JComponent.WHEN_IN_FOCUSED_WINDOW);
    registerKeyboardAction(fwdAction,ACTION_FORWARDCOMMAND,stroke,JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  }
  myHistory=new CommanderHistory(this);
  setupImpl();
}
