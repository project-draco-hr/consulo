{
  final CommanderPanel panel=new CommanderPanel(myProject,true,false);
  panel.getList().addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    final KeyEvent e){
      if (KeyEvent.VK_ESCAPE == e.getKeyCode()) {
        if (e.isConsumed())         return;
        final PsiCopyPasteManager copyPasteManager=PsiCopyPasteManager.getInstance();
        final boolean[] isCopied=new boolean[1];
        if (copyPasteManager.getElements(isCopied) != null && !isCopied[0]) {
          copyPasteManager.clear();
          e.consume();
        }
      }
    }
  }
);
  final ProjectAbstractTreeStructureBase treeStructure=createProjectTreeStructure();
  panel.setBuilder(new ProjectListBuilder(myProject,panel,treeStructure,AlphaComparator.INSTANCE,true));
  panel.setProjectTreeStructure(treeStructure);
  final FocusAdapter focusListener=new FocusAdapter(){
    @Override public void focusGained(    final FocusEvent e){
      updateToolWindowTitle(panel);
    }
  }
;
  final JList list=panel.getList();
  list.addFocusListener(focusListener);
  list.getSelectionModel().addListSelectionListener(mySelectionListener);
  list.getModel().addListDataListener(myListDataListener);
  Disposer.register(this,new Disposable(){
    @Override public void dispose(){
      list.removeFocusListener(focusListener);
      list.getSelectionModel().removeListSelectionListener(mySelectionListener);
      list.getModel().removeListDataListener(myListDataListener);
    }
  }
);
  return panel;
}
