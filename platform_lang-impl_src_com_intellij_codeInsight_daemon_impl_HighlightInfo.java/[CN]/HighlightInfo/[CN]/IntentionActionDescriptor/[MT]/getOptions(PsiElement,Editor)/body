{
  if (editor != null && Boolean.FALSE.equals(editor.getUserData(IntentionManager.SHOW_INTENTION_OPTIONS_KEY))) {
    return null;
  }
  List<IntentionAction> options=myOptions;
  HighlightDisplayKey key=myKey;
  if (options != null || key == null) {
    return options;
  }
  List<IntentionAction> newOptions=IntentionManager.getInstance().getStandardIntentionOptions(key,element);
  InspectionProfile profile=InspectionProjectProfileManager.getInstance(element.getProject()).getInspectionProfile();
  InspectionProfileEntry tool=profile.getInspectionTool(key.toString(),element);
  if (!(tool instanceof LocalInspectionToolWrapper)) {
    HighlightDisplayKey idkey=HighlightDisplayKey.findById(key.toString());
    if (idkey != null) {
      tool=profile.getInspectionTool(idkey.toString(),element);
    }
  }
  InspectionProfileEntry wrappedTool=tool;
  if (tool instanceof LocalInspectionToolWrapper) {
    wrappedTool=((LocalInspectionToolWrapper)tool).getTool();
    Class aClass=myAction.getClass();
    if (myAction instanceof QuickFixWrapper) {
      aClass=((QuickFixWrapper)myAction).getFix().getClass();
    }
    newOptions.add(new CleanupInspectionIntention((LocalInspectionToolWrapper)tool,aClass));
  }
 else   if (tool instanceof GlobalInspectionToolWrapper) {
    wrappedTool=((GlobalInspectionToolWrapper)tool).getTool();
    if (wrappedTool instanceof GlobalSimpleInspectionTool && (myAction instanceof LocalQuickFix || myAction instanceof QuickFixWrapper)) {
      Class aClass=myAction.getClass();
      if (myAction instanceof QuickFixWrapper) {
        aClass=((QuickFixWrapper)myAction).getFix().getClass();
      }
      newOptions.add(new CleanupInspectionIntention((GlobalInspectionToolWrapper)tool,aClass));
    }
  }
  if (wrappedTool instanceof CustomSuppressableInspectionTool) {
    final IntentionAction[] suppressActions=((CustomSuppressableInspectionTool)wrappedTool).getSuppressActions(element);
    if (suppressActions != null) {
      ContainerUtil.addAll(newOptions,suppressActions);
    }
  }
  if (wrappedTool instanceof BatchSuppressableTool) {
    final SuppressQuickFix[] suppressActions=((BatchSuppressableTool)wrappedTool).getBatchSuppressActions(element);
    ContainerUtil.addAll(newOptions,ContainerUtil.map(suppressActions,new Function<SuppressQuickFix,IntentionAction>(){
      @Override public IntentionAction fun(      SuppressQuickFix fix){
        return InspectionManagerEx.convertBatchToSuppressIntentionAction(fix);
      }
    }
));
  }
synchronized (this) {
    options=myOptions;
    if (options == null) {
      myOptions=options=newOptions;
    }
    myKey=null;
  }
  return options;
}
