{
  final MultiMap<ConfigurationErrorType,ConfigurationErrorDescription> descriptionsMap=new MultiMap<ConfigurationErrorType,ConfigurationErrorDescription>();
synchronized (myLock) {
    if (myErrors.isEmpty())     return;
    descriptionsMap.putAllValues(myErrors);
    myErrors.clear();
  }
  for (  final ConfigurationErrorType type : descriptionsMap.keySet()) {
    final Collection<ConfigurationErrorDescription> descriptions=descriptionsMap.get(type);
    if (descriptions.isEmpty())     continue;
    final String invalidElements=getInvalidElementsString(type,descriptions);
    final String errorText=ProjectBundle.message("error.message.configuration.cannot.load") + " " + invalidElements+ " <a href=\"\">Details...</a>";
    Notifications.Bus.notify(new Notification("Project Loading Error","Error Loading Project",errorText,NotificationType.ERROR,new NotificationListener(){
      @Override public void hyperlinkUpdate(      @NotNull Notification notification,      @NotNull HyperlinkEvent event){
        final List<ConfigurationErrorDescription> validDescriptions=ContainerUtil.findAll(descriptions,new Condition<ConfigurationErrorDescription>(){
          @Override public boolean value(          ConfigurationErrorDescription errorDescription){
            return errorDescription.isValid();
          }
        }
);
        RemoveInvalidElementsDialog.showDialog(myProject,CommonBundle.getErrorTitle(),type,invalidElements,validDescriptions);
        notification.expire();
      }
    }
),myProject);
  }
}
