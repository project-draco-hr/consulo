{
  final Module module=configurationModule.getModule();
  if (module == null)   throw CantRunException.noModuleConfigured(configurationModule.getModuleName());
  final PsiClass psiClass=JavaExecutionUtil.findMainClass(module,mainClassName);
  if (psiClass == null) {
    if (!classMustHaveSource)     return JavaParameters.JDK_AND_CLASSES_AND_TESTS;
    throw CantRunException.classNotFound(mainClassName,module);
  }
  final PsiFile psiFile=psiClass.getContainingFile();
  if (psiFile == null)   throw CantRunException.classNotFound(mainClassName,module);
  final VirtualFile virtualFile=psiFile.getVirtualFile();
  if (virtualFile == null)   throw CantRunException.classNotFound(mainClassName,module);
  Module classModule=psiClass.isValid() ? ModuleUtilCore.findModuleForPsiElement(psiClass) : null;
  if (classModule == null)   classModule=module;
  ModuleFileIndex fileIndex=ModuleRootManager.getInstance(classModule).getFileIndex();
  if (fileIndex.isInSourceContent(virtualFile)) {
    return fileIndex.isInTestSourceContent(virtualFile) ? JavaParameters.JDK_AND_CLASSES_AND_TESTS : JavaParameters.JDK_AND_CLASSES;
  }
  final List<OrderEntry> entriesForFile=fileIndex.getOrderEntriesForFile(virtualFile);
  for (  OrderEntry entry : entriesForFile) {
    if (entry instanceof ExportableOrderEntry && ((ExportableOrderEntry)entry).getScope() == DependencyScope.TEST)     return JavaParameters.JDK_AND_CLASSES_AND_TESTS;
  }
  return JavaParameters.JDK_AND_CLASSES;
}
