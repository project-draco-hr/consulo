{
  HashMap<VirtualFile,List<FilePath>> toUnindex=new HashMap<VirtualFile,List<FilePath>>();
  HashMap<VirtualFile,List<FilePath>> toUnversion=new HashMap<VirtualFile,List<FilePath>>();
  HashMap<VirtualFile,List<FilePath>> toRevert=new HashMap<VirtualFile,List<FilePath>>();
  List<FilePath> toDelete=new ArrayList<FilePath>();
  listener.determinate();
  for (  Change c : changes) {
switch (c.getType()) {
case NEW:
      registerFile(toUnversion,c.getAfterRevision().getFile(),exceptions);
    break;
case MOVED:
  registerFile(toRevert,c.getBeforeRevision().getFile(),exceptions);
registerFile(toUnindex,c.getAfterRevision().getFile(),exceptions);
toDelete.add(c.getAfterRevision().getFile());
break;
case MODIFICATION:
registerFile(toUnindex,c.getBeforeRevision().getFile(),exceptions);
registerFile(toRevert,c.getBeforeRevision().getFile(),exceptions);
break;
case DELETED:
registerFile(toRevert,c.getBeforeRevision().getFile(),exceptions);
break;
}
}
for (Map.Entry<VirtualFile,List<FilePath>> entry : toUnindex.entrySet()) {
listener.accept(entry.getValue());
try {
unindex(entry.getKey(),entry.getValue(),false);
}
 catch (VcsException e) {
exceptions.add(e);
}
}
for (Map.Entry<VirtualFile,List<FilePath>> entry : toUnversion.entrySet()) {
listener.accept(entry.getValue());
try {
unindex(entry.getKey(),entry.getValue(),true);
}
 catch (VcsException e) {
exceptions.add(e);
}
}
for (FilePath file : toDelete) {
listener.accept(file);
try {
final File ioFile=file.getIOFile();
if (ioFile.exists()) {
if (!ioFile.delete()) {
exceptions.add(new VcsException("Unable to delete file: " + file));
}
}
}
 catch (Exception e) {
exceptions.add(new VcsException("Unable to delete file: " + file,e));
}
}
for (Map.Entry<VirtualFile,List<FilePath>> entry : toRevert.entrySet()) {
listener.accept(entry.getValue());
try {
revert(entry.getKey(),entry.getValue());
}
 catch (VcsException e) {
exceptions.add(e);
}
}
LocalFileSystem lfs=LocalFileSystem.getInstance();
HashSet<File> filesToRefresh=new HashSet<File>();
for (Change c : changes) {
ContentRevision before=c.getBeforeRevision();
if (before != null) {
filesToRefresh.add(new File(before.getFile().getPath()));
}
ContentRevision after=c.getAfterRevision();
if (after != null) {
filesToRefresh.add(new File(after.getFile().getPath()));
}
}
lfs.refreshIoFiles(filesToRefresh);
for (GitRepository repo : GitRepositoryManager.getInstance(myProject).getRepositories()) {
repo.update(GitRepository.TrackedTopic.ALL_CURRENT);
}
}
