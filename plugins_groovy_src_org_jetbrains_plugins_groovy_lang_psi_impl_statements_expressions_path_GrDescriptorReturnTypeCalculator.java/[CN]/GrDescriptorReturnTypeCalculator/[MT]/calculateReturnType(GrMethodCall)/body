{
  PsiMethod method=callExpression.resolveMethod();
  if (method == null)   return null;
  PsiClass containingClass=method.getContainingClass();
  if (containingClass == null)   return null;
  Map<String,List<Pair<GrMethodReturnTypeDescriptor.Param[],String>>> methodMap=getMap().get(containingClass.getQualifiedName());
  if (methodMap == null)   return null;
  List<Pair<GrMethodReturnTypeDescriptor.Param[],String>> pairs=methodMap.get(method.getName());
  if (pairs == null)   return null;
  String typeName=null;
  mainLoop:   for (  Pair<GrMethodReturnTypeDescriptor.Param[],String> pair : pairs) {
    if (pair.first == null) {
      typeName=pair.second;
      break;
    }
 else {
      GrMethodReturnTypeDescriptor.Param[] params=pair.first;
      PsiParameterList parameterList=method.getParameterList();
      if (parameterList.getParametersCount() == params.length) {
        PsiParameter[] parameters=parameterList.getParameters();
        for (int i=0; i < parameters.length; i++) {
          if (!TypesUtil.isClassType(parameters[i].getType(),params[i].type)) {
            continue mainLoop;
          }
        }
        typeName=pair.second;
        break;
      }
    }
  }
  if (typeName == null)   return null;
  if (typeName.endsWith("[]")) {
    PsiClassType type=TypesUtil.createType(typeName.substring(0,typeName.length() - 2),callExpression);
    return type.createArrayType();
  }
  return JavaPsiFacade.getElementFactory(callExpression.getProject()).createTypeByFQClassName(typeName,callExpression.getResolveScope());
}
