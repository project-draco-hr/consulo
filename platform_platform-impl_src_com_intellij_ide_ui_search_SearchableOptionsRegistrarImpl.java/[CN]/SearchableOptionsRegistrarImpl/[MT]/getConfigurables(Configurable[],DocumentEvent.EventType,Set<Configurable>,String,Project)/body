{
  final ConfigurableHit hits=new ConfigurableHit();
  final Set<Configurable> contentHits=hits.getContentHits();
  Set<String> options=getProcessedWordsWithoutStemming(option);
  if (configurables == null) {
    contentHits.addAll(SearchUtil.expandGroup(allConfigurables));
  }
 else {
    contentHits.addAll(configurables);
  }
  String optionToCheck=option.trim().toLowerCase();
  for (  Configurable each : contentHits) {
    if (each.getDisplayName() == null)     continue;
    final String displayName=each.getDisplayName().toLowerCase();
    final List<String> allWords=StringUtil.getWordsIn(displayName);
    if (displayName.contains(optionToCheck)) {
      hits.getNameFullHits().add(each);
      hits.getNameHits().add(each);
    }
    for (    String eachWord : allWords) {
      if (eachWord.startsWith(optionToCheck)) {
        hits.getNameHits().add(each);
        break;
      }
    }
    if (options.isEmpty()) {
      hits.getNameHits().add(each);
      hits.getNameFullHits().add(each);
    }
  }
  final Set<Configurable> currentConfigurables=new HashSet<Configurable>(contentHits);
  if (options.isEmpty()) {
    String[] components=REG_EXP.split(optionToCheck);
    if (components.length > 0) {
      Collections.addAll(options,components);
    }
 else {
      options.add(option);
    }
  }
  Set<String> helpIds=null;
  for (  String opt : options) {
    final Set<OptionDescription> optionIds=getAcceptableDescriptions(opt);
    if (optionIds == null) {
      contentHits.clear();
      return hits;
    }
    final Set<String> ids=new HashSet<String>();
    for (    OptionDescription id : optionIds) {
      ids.add(id.getConfigurableId());
    }
    if (helpIds == null) {
      helpIds=ids;
    }
    helpIds.retainAll(ids);
  }
  if (helpIds != null) {
    for (Iterator<Configurable> it=contentHits.iterator(); it.hasNext(); ) {
      Configurable configurable=it.next();
      if (CodeStyleFacade.getInstance(project).isUnsuitableCodeStyleConfigurable(configurable)) {
        it.remove();
        continue;
      }
      if (!(configurable instanceof SearchableConfigurable && helpIds.contains(((SearchableConfigurable)configurable).getId()))) {
        it.remove();
      }
    }
  }
  if (currentConfigurables.equals(contentHits) && !(configurables == null && type == DocumentEvent.EventType.CHANGE)) {
    return getConfigurables(allConfigurables,DocumentEvent.EventType.CHANGE,null,option,project);
  }
  return hits;
}
