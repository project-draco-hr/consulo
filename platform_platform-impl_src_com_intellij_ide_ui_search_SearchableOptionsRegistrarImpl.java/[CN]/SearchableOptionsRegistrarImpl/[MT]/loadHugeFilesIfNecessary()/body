{
  if (allTheseHugeFilesAreLoaded) {
    return;
  }
  allTheseHugeFilesAreLoaded=true;
  try {
    final URL indexResource=ResourceUtil.getResource(SearchableOptionsRegistrar.class,"/search/","searchableOptions.xml");
    if (indexResource == null) {
      LOG.info("No /search/searchableOptions.xml found, settings search won't work!");
      return;
    }
    Document document=JDOMUtil.loadDocument(indexResource);
    Element root=document.getRootElement();
    List configurables=root.getChildren("configurable");
    for (    final Object o : configurables) {
      final Element configurable=(Element)o;
      final String id=configurable.getAttributeValue("id");
      final String groupName=configurable.getAttributeValue("configurable_name");
      final List options=configurable.getChildren("option");
      for (      Object o1 : options) {
        Element optionElement=(Element)o1;
        final String option=optionElement.getAttributeValue("name");
        final String path=optionElement.getAttributeValue("path");
        final String hit=optionElement.getAttributeValue("hit");
        putOptionWithHelpId(option,id,groupName,hit,path);
      }
    }
    document=JDOMUtil.loadDocument(ResourceUtil.getResource(SearchableOptionsRegistrar.class,"/search/","synonyms.xml"));
    root=document.getRootElement();
    configurables=root.getChildren("configurable");
    for (    final Object o : configurables) {
      final Element configurable=(Element)o;
      final String id=configurable.getAttributeValue("id");
      final String groupName=configurable.getAttributeValue("configurable_name");
      final List synonyms=configurable.getChildren("synonym");
      for (      Object o1 : synonyms) {
        Element synonymElement=(Element)o1;
        final String synonym=synonymElement.getTextNormalize();
        if (synonym != null) {
          Set<String> words=getProcessedWords(synonym);
          for (          String word : words) {
            putOptionWithHelpId(word,id,groupName,synonym,null);
          }
        }
      }
      final List options=configurable.getChildren("option");
      for (      Object o1 : options) {
        Element optionElement=(Element)o1;
        final String option=optionElement.getAttributeValue("name");
        final List list=optionElement.getChildren("synonym");
        for (        Object o2 : list) {
          Element synonymElement=(Element)o2;
          final String synonym=synonymElement.getTextNormalize();
          if (synonym != null) {
            Set<String> words=getProcessedWords(synonym);
            for (            String word : words) {
              putOptionWithHelpId(word,id,groupName,synonym,null);
            }
            final Pair<String,String> key=Pair.create(option,id);
            Set<String> foundSynonyms=myHighlightOption2Synonym.get(key);
            if (foundSynonyms == null) {
              foundSynonyms=new THashSet<String>();
              myHighlightOption2Synonym.put(key,foundSynonyms);
            }
            foundSynonyms.add(synonym);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    LOG.error(e);
  }
  for (  IdeaPluginDescriptor plugin : PluginManager.getPlugins()) {
    final Set<String> words=getProcessedWordsWithoutStemming(plugin.getName());
    final String description=plugin.getDescription();
    if (description != null) {
      words.addAll(getProcessedWordsWithoutStemming(description));
    }
    for (    String word : words) {
      addOption(word,null,plugin.getName(),PluginManagerConfigurable.ID,PluginManagerConfigurable.DISPLAY_NAME);
    }
  }
}
