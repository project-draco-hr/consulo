{
  JavaPsiFacade facade=JavaPsiFacade.getInstance(listOrMap.getProject());
  GlobalSearchScope scope=listOrMap.getResolveScope();
  if (initializers.length == 0) {
    PsiType lType=PsiImplUtil.inferExpectedTypeForDiamond(listOrMap);
    if (lType instanceof PsiClassType && InheritanceUtil.isInheritor(lType,CommonClassNames.JAVA_UTIL_LIST)) {
      PsiClass arrayList=facade.findClass(CommonClassNames.JAVA_UTIL_ARRAY_LIST,scope);
      if (arrayList == null)       arrayList=facade.findClass(CommonClassNames.JAVA_UTIL_LIST,scope);
      if (arrayList != null) {
        PsiSubstitutor arrayListSubstitutor=PsiSubstitutor.EMPTY.put(arrayList.getTypeParameters()[0],com.intellij.psi.util.PsiUtil.substituteTypeParameter(lType,CommonClassNames.JAVA_UTIL_LIST,0,false));
        return facade.getElementFactory().createType(arrayList,arrayListSubstitutor);
      }
    }
  }
  PsiType[] result=new PsiType[initializers.length];
  for (int i=0; i < result.length; i++) {
    result[i]=initializers[i].getType();
  }
  return new GrTupleType(result,facade,scope);
}
