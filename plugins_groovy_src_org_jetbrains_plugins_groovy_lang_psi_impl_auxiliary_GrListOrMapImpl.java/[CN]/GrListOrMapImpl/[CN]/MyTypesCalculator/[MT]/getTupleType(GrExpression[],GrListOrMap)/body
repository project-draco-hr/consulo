{
  JavaPsiFacade facade=JavaPsiFacade.getInstance(listOrMap.getProject());
  GlobalSearchScope scope=listOrMap.getResolveScope();
  if (initializers.length == 0) {
    PsiType lType=PsiImplUtil.inferExpectedTypeForDiamond(listOrMap);
    if (lType instanceof PsiClassType && InheritanceUtil.isInheritor(lType,CommonClassNames.JAVA_UTIL_LIST)) {
      PsiClassType.ClassResolveResult classResolveResult=((PsiClassType)lType).resolveGenerics();
      PsiSubstitutor substitutor=classResolveResult.getSubstitutor();
      PsiClass list=facade.findClass(CommonClassNames.JAVA_UTIL_LIST,scope);
      PsiClass arrayList=facade.findClass(CommonClassNames.JAVA_UTIL_ARRAY_LIST,scope);
      if (list != null && arrayList != null) {
        PsiSubstitutor arrayListSubstitutor=PsiSubstitutor.EMPTY.put(arrayList.getTypeParameters()[0],substitutor.substitute(list.getTypeParameters()[0]));
        return facade.getElementFactory().createType(arrayList,arrayListSubstitutor);
      }
    }
  }
  PsiType[] result=new PsiType[initializers.length];
  for (int i=0; i < result.length; i++) {
    result[i]=initializers[i].getType();
  }
  return new GrTupleType(result,facade,scope);
}
