{
  final HashMap<String,PsiType> stringEntries=new HashMap<String,PsiType>();
  final ArrayList<Pair<PsiType,PsiType>> otherEntries=new ArrayList<Pair<PsiType,PsiType>>();
  GrNamedArgument[] namedArgs=listOrMap.getNamedArguments();
  if (namedArgs.length == 0) {
    PsiType lType=PsiImplUtil.inferExpectedTypeForDiamond(listOrMap);
    if (lType instanceof PsiClassType && InheritanceUtil.isInheritor(lType,CommonClassNames.JAVA_UTIL_MAP)) {
      PsiClassType.ClassResolveResult classResolveResult=((PsiClassType)lType).resolveGenerics();
      PsiSubstitutor substitutor=classResolveResult.getSubstitutor();
      PsiClass map=facade.findClass(CommonClassNames.JAVA_UTIL_MAP,scope);
      PsiClass hashMap=facade.findClass(GroovyCommonClassNames.JAVA_UTIL_LINKED_HASH_MAP,scope);
      if (map != null && hashMap != null) {
        PsiSubstitutor mapSubstitutor=PsiSubstitutor.EMPTY.put(hashMap.getTypeParameters()[0],substitutor.substitute(map.getTypeParameters()[0])).put(hashMap.getTypeParameters()[1],substitutor.substitute(map.getTypeParameters()[1]));
        return facade.getElementFactory().createType(hashMap,mapSubstitutor);
      }
    }
  }
  for (  GrNamedArgument namedArg : namedArgs) {
    final GrArgumentLabel label=namedArg.getLabel();
    final GrExpression expression=namedArg.getExpression();
    if (label == null || expression == null) {
      continue;
    }
    final String name=label.getName();
    if (name != null) {
      stringEntries.put(name,expression.getType());
    }
 else {
      otherEntries.add(Pair.create(label.getLabelType(),expression.getType()));
    }
  }
  return new GrMapType(facade,scope,stringEntries,otherEntries);
}
