{
  Rectangle cellRect=insertLocation.getCellRect();
  if (componentCount > 1) {
    int lastCol=insertLocation.getColumn() + componentCount - 1;
    final GridLayoutManager layoutManager=(GridLayoutManager)insertLocation.getContainer().getLayout();
    int[] xs=layoutManager.getXs();
    int[] widths=layoutManager.getWidths();
    cellRect.setBounds(xs[insertLocation.getColumn()],(int)cellRect.getY(),xs[lastCol] + widths[lastCol] - xs[insertLocation.getColumn()],(int)cellRect.getHeight());
  }
  cellRect=SwingUtilities.convertRectangle(insertLocation.getContainer().getDelegee(),cellRect,myEditor.getActiveDecorationLayer());
  FeedbackPainter painter=(insertLocation.getMode() == GridInsertLocation.GridInsertMode.ColumnBefore || insertLocation.getMode() == GridInsertLocation.GridInsertMode.ColumnAfter) ? myVertInsertFeedbackPainter : myHorzInsertFeedbackPainter;
  Rectangle rc;
  int w=4;
switch (insertLocation.getMode()) {
case ColumnBefore:
    rc=new Rectangle(cellRect.x - w,cellRect.y - INSERT_ARROW_SIZE,2 * w,cellRect.height + 2 * INSERT_ARROW_SIZE);
  break;
case ColumnAfter:
rc=new Rectangle((int)cellRect.getMaxX() - w,(int)cellRect.getMinY() - INSERT_ARROW_SIZE,2 * w,(int)cellRect.getHeight() + 2 * INSERT_ARROW_SIZE);
break;
case RowBefore:
rc=new Rectangle((int)cellRect.getMinX() - INSERT_ARROW_SIZE,(int)cellRect.getMinY() - w,(int)cellRect.getWidth() + 2 * INSERT_ARROW_SIZE,2 * w);
break;
case RowAfter:
rc=new Rectangle((int)cellRect.getMinX() - INSERT_ARROW_SIZE,(int)cellRect.getMaxY() - w,(int)cellRect.getWidth() + 2 * INSERT_ARROW_SIZE,2 * w);
break;
default :
rc=cellRect;
painter=null;
}
myEditor.getActiveDecorationLayer().putFeedback(rc,painter);
}
