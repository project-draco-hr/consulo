{
  if (myFunctionalInterface == null)   return null;
  for (Iterator<CandidateInfo> iterator=conflicts.iterator(); iterator.hasNext(); ) {
    CandidateInfo conflict=iterator.next();
    if (!(conflict instanceof MethodCandidateInfo))     continue;
    final PsiMethod psiMethod=((MethodCandidateInfo)conflict).getElement();
    if (psiMethod == null)     continue;
    if (!LambdaUtil.areAcceptable(myFunctionalInterface.getSignature(mySubstitutor),psiMethod.getSignature(conflict.getSubstitutor()),myContainingClass)) {
      iterator.remove();
    }
  }
  if (conflicts.size() == 1)   return conflicts.get(0);
  return null;
}
