{
  PsiClass containingClass=null;
  final PsiExpression expression=getQualifierExpression();
  if (expression != null) {
    containingClass=PsiUtil.resolveClassInType(expression.getType());
    if (containingClass == null && expression instanceof PsiReferenceExpression) {
      final PsiElement resolve=((PsiReferenceExpression)expression).resolve();
      if (resolve instanceof PsiClass) {
        containingClass=(PsiClass)resolve;
      }
    }
  }
 else {
    final PsiTypeElement typeElement=getQualifierType();
    if (typeElement != null) {
      containingClass=PsiUtil.resolveClassInType(typeElement.getType());
    }
  }
  if (containingClass != null) {
    final PsiElement element=getReferenceNameElement();
    if (element instanceof PsiIdentifier) {
      final PsiType functionalInterfaceType=getFunctionalInterfaceType();
      final PsiClassType.ClassResolveResult resolveResult=PsiUtil.resolveGenericsClassInType(functionalInterfaceType);
      final PsiMethod interfaceMethod=LambdaUtil.getFunctionalInterfaceMethod(resolveResult);
      if (interfaceMethod == null)       return JavaResolveResult.EMPTY_ARRAY;
      final MethodSignature interfaceMethodSignature=interfaceMethod.getSignature(resolveResult.getSubstitutor());
      final PsiMethod[] psiMethods=containingClass.findMethodsByName(element.getText(),false);
      List<JavaResolveResult> result=new ArrayList<JavaResolveResult>();
      for (      PsiMethod method : psiMethods) {
        if (LambdaUtil.areAcceptable(interfaceMethodSignature,method.getSignature(PsiSubstitutor.EMPTY))) {
          result.add(new CandidateInfo(method,PsiSubstitutor.EMPTY));
        }
      }
      return result.toArray(new JavaResolveResult[result.size()]);
    }
  }
  return JavaResolveResult.EMPTY_ARRAY;
}
