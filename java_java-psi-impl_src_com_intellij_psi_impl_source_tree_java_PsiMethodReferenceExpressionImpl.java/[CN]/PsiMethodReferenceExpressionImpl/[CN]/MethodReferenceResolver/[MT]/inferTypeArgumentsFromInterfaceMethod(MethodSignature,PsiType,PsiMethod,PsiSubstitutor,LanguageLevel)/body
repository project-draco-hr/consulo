{
  if (signature == null)   return PsiSubstitutor.EMPTY;
  final PsiType[] types=method.getSignature(PsiUtil.isRawSubstitutor(method,substitutor) ? PsiSubstitutor.EMPTY : substitutor).getParameterTypes();
  final PsiType[] rightTypes=signature.getParameterTypes();
  if (types.length < rightTypes.length) {
    return PsiUtil.resolveGenericsClassInType(rightTypes[0]).getSubstitutor();
  }
 else   if (types.length > rightTypes.length) {
    return PsiUtil.resolveGenericsClassInType(types[0]).getSubstitutor();
  }
  for (int i=0; i < rightTypes.length; i++) {
    rightTypes[i]=GenericsUtil.eliminateWildcards(rightTypes[i]);
  }
  final PsiResolveHelper resolveHelper=JavaPsiFacade.getInstance(getProject()).getResolveHelper();
  PsiSubstitutor psiSubstitutor=resolveHelper.inferTypeArguments(method.getTypeParameters(),types,rightTypes,languageLevel);
  psiSubstitutor=psiSubstitutor.putAll(substitutor);
  if (method.isConstructor()) {
    psiSubstitutor=psiSubstitutor.putAll(resolveHelper.inferTypeArguments(method.getContainingClass().getTypeParameters(),types,rightTypes,languageLevel));
  }
  return LambdaUtil.inferFromReturnType(method.getTypeParameters(),psiSubstitutor.substitute(method.getReturnType()),interfaceMethodReturnType,psiSubstitutor,languageLevel,PsiMethodReferenceExpressionImpl.this.getProject());
}
