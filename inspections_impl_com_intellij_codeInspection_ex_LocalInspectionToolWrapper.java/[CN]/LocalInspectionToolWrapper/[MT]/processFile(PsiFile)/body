{
  file.accept(new PsiRecursiveElementVisitor(){
    public void visitReferenceExpression(    PsiReferenceExpression expression){
      visitElement(expression);
    }
    @Override public void visitJspFile(    JspFile file){
      final PsiElement[] roots=file.getPsiRoots();
      for (      PsiElement root : roots) {
        visitElement(root);
      }
    }
    public void visitField(    PsiField field){
      super.visitField(field);
      if (InspectionManagerEx.isToCheckMember(field,myTool.getID())) {
        ProblemDescriptor[] problemDescriptions=myTool.checkField(field,getManager(),false);
        addProblemDescriptors(field,problemDescriptions);
      }
    }
    private ProblemDescriptor[] filterUnsuppressedProblemDescriptions(    ProblemDescriptor[] problemDescriptions){
      Set<ProblemDescriptor> set=null;
      for (      ProblemDescriptor description : problemDescriptions) {
        if (InspectionManagerEx.inspectionResultSuppressed(description.getPsiElement(),myTool.getID())) {
          if (set == null)           set=new LinkedHashSet<ProblemDescriptor>(Arrays.asList(problemDescriptions));
          set.remove(description);
        }
      }
      return set == null ? problemDescriptions : set.toArray(new ProblemDescriptor[set.size()]);
    }
    public void visitClass(    PsiClass aClass){
      super.visitClass(aClass);
      if (InspectionManagerEx.isToCheckMember(aClass,myTool.getID()) && !(aClass instanceof PsiTypeParameter)) {
        ProblemDescriptor[] problemDescriptions=myTool.checkClass(aClass,getManager(),false);
        addProblemDescriptors(aClass,problemDescriptions);
      }
    }
    public void visitMethod(    PsiMethod method){
      super.visitMethod(method);
      if (InspectionManagerEx.isToCheckMember(method,myTool.getID())) {
        ProblemDescriptor[] problemDescriptions=myTool.checkMethod(method,getManager(),false);
        addProblemDescriptors(method,problemDescriptions);
      }
    }
    private void addProblemDescriptors(    PsiElement element,    ProblemDescriptor[] problemDescriptions){
      if (problemDescriptions != null) {
        problemDescriptions=filterUnsuppressedProblemDescriptions(problemDescriptions);
        if (problemDescriptions.length != 0) {
          RefManager refManager=getManager().getRefManager();
          RefElement refElement=refManager.getReference(element);
          if (refElement != null) {
            addProblemElement(refElement,problemDescriptions);
          }
        }
      }
    }
    public void visitFile(    PsiFile file){
      super.visitFile(file);
      ProblemDescriptor[] problemDescriptions=myTool.checkFile(file,getManager(),false);
      addProblemDescriptors(file,problemDescriptions);
    }
  }
);
}
