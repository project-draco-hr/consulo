{
  final ProblemsHolder holder=new ProblemsHolder(getManager());
  final PsiElementVisitor customVisitor=myTool.buildVisitor(holder,false);
  file.accept(new PsiRecursiveElementVisitor(){
    public void visitElement(    PsiElement element){
      if (customVisitor != null) {
        element.accept(customVisitor);
      }
      super.visitElement(element);
    }
    public void visitReferenceExpression(    PsiReferenceExpression expression){
      visitElement(expression);
    }
    @Override public void visitJspFile(    JspFile file){
      final PsiElement[] roots=file.getPsiRoots();
      for (      PsiElement root : roots) {
        visitElement(root);
      }
    }
    public void visitField(    PsiField field){
      super.visitField(field);
      if (!filterSuppressed || InspectionManagerEx.isToCheckMember(field,myTool.getID())) {
        ProblemDescriptor[] problemDescriptions=myTool.checkField(field,getManager(),false);
        addProblemDescriptors(field,problemDescriptions,filterSuppressed);
      }
    }
    public void visitClass(    PsiClass aClass){
      super.visitClass(aClass);
      if (!filterSuppressed || InspectionManagerEx.isToCheckMember(aClass,myTool.getID()) && !(aClass instanceof PsiTypeParameter)) {
        ProblemDescriptor[] problemDescriptions=myTool.checkClass(aClass,getManager(),false);
        addProblemDescriptors(aClass,problemDescriptions,filterSuppressed);
      }
    }
    public void visitMethod(    PsiMethod method){
      super.visitMethod(method);
      if (!filterSuppressed || InspectionManagerEx.isToCheckMember(method,myTool.getID())) {
        ProblemDescriptor[] problemDescriptions=myTool.checkMethod(method,getManager(),false);
        addProblemDescriptors(method,problemDescriptions,filterSuppressed);
      }
    }
    public void visitFile(    PsiFile file){
      super.visitFile(file);
      ProblemDescriptor[] problemDescriptions=myTool.checkFile(file,getManager(),false);
      addProblemDescriptors(file,problemDescriptions,filterSuppressed);
    }
  }
);
  addProblemDescriptors(holder.getResults(),filterSuppressed);
}
