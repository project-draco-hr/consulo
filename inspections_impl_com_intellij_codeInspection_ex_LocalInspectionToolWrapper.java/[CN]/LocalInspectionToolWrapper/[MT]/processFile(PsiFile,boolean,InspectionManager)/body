{
  final ProblemsHolder holder=new ProblemsHolder(manager);
  final PsiElementVisitor customVisitor=myTool.buildVisitor(holder,false);
  file.accept(new PsiRecursiveElementVisitor(){
    public void visitElement(    PsiElement element){
      if (customVisitor != null) {
        element.accept(customVisitor);
      }
      super.visitElement(element);
    }
    public void visitReferenceExpression(    PsiReferenceExpression expression){
      visitElement(expression);
    }
    @Override public void visitJspFile(    JspFile file){
      final FileViewProvider viewProvider=file.getViewProvider();
      final Set<Language> relevantLanguages=viewProvider.getPrimaryLanguages();
      for (      Language language : relevantLanguages) {
        visitElement(viewProvider.getPsi(language));
      }
    }
    public void visitField(    PsiField field){
      super.visitField(field);
      if (!filterSuppressed || !getContext().isSuppressed(field,myTool.getID())) {
        ProblemDescriptor[] problemDescriptions=myTool.checkField(field,manager,false);
        addProblemDescriptors(field,problemDescriptions,filterSuppressed);
      }
    }
    public void visitClass(    PsiClass aClass){
      super.visitClass(aClass);
      if (!filterSuppressed || !getContext().isSuppressed(aClass,myTool.getID()) && !(aClass instanceof PsiTypeParameter)) {
        ProblemDescriptor[] problemDescriptions=myTool.checkClass(aClass,manager,false);
        addProblemDescriptors(aClass,problemDescriptions,filterSuppressed);
      }
    }
    public void visitMethod(    PsiMethod method){
      super.visitMethod(method);
      if (!filterSuppressed || !getContext().isSuppressed(method,myTool.getID())) {
        ProblemDescriptor[] problemDescriptions=myTool.checkMethod(method,manager,false);
        addProblemDescriptors(method,problemDescriptions,filterSuppressed);
      }
    }
    public void visitFile(    PsiFile file){
      super.visitFile(file);
      ProblemDescriptor[] problemDescriptions=myTool.checkFile(file,manager,false);
      addProblemDescriptors(file,problemDescriptions,filterSuppressed);
    }
  }
);
  addProblemDescriptors(holder.getResults(),filterSuppressed);
}
