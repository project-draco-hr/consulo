{
  if (psiClass.getConstructors().length > 0) {
    final Project project=psiClass.getProject();
    final PsiElementFactory factory=JavaPsiFacade.getElementFactory(project);
    final PsiMethod noArgConstructor=psiClass.findMethodBySignature(factory.createConstructor(psiClass.getName()),false);
    if (noArgConstructor == null) {
      final PsiMethod valueOf=findValueOfMethod(psiClass);
      if (valueOf == null) {
        final PsiClass builderClass=JavaPsiFacade.getInstance(project).findClass(JavaFxCommonClassNames.JAVAFX_FXML_BUILDER,GlobalSearchScope.allScope(project));
        if (builderClass != null) {
          final PsiTypeParameter typeParameter=builderClass.getTypeParameters()[0];
          if (ClassInheritorsSearch.search(builderClass).forEach(new Processor<PsiClass>(){
            @Override public boolean process(            PsiClass aClass){
              final PsiType initType=TypeConversionUtil.getSuperClassSubstitutor(builderClass,aClass,PsiSubstitutor.EMPTY).substitute(typeParameter);
              return !Comparing.equal(psiClass,PsiUtil.resolveClassInClassTypeOnly(initType));
            }
          }
)) {
            return "Unable to instantiate";
          }
        }
      }
    }
  }
  return null;
}
