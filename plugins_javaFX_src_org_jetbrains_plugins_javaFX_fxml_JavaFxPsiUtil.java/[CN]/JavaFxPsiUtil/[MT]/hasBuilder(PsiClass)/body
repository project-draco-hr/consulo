{
  final Project project=psiClass.getProject();
  return CachedValuesManager.getManager(project).getCachedValue(psiClass,new CachedValueProvider<Boolean>(){
    @Nullable @Override public Result<Boolean> compute(){
      final PsiClass builderClass=JavaPsiFacade.getInstance(project).findClass(JavaFxCommonClassNames.JAVAFX_FXML_BUILDER,GlobalSearchScope.allScope(project));
      if (builderClass != null) {
        final PsiMethod[] buildMethods=builderClass.findMethodsByName("build",false);
        if (buildMethods.length == 1 && buildMethods[0].getParameterList().getParametersCount() == 0) {
          if (ClassInheritorsSearch.search(builderClass).forEach(new Processor<PsiClass>(){
            @Override public boolean process(            PsiClass aClass){
              PsiType returnType=null;
              final PsiMethod method=MethodSignatureUtil.findMethodBySuperMethod(aClass,buildMethods[0],false);
              if (method != null) {
                returnType=method.getReturnType();
              }
              return !Comparing.equal(psiClass,PsiUtil.resolveClassInClassTypeOnly(returnType));
            }
          }
)) {
            return Result.create(false,PsiModificationTracker.JAVA_STRUCTURE_MODIFICATION_COUNT);
          }
        }
      }
      return Result.create(true,PsiModificationTracker.JAVA_STRUCTURE_MODIFICATION_COUNT);
    }
  }
);
}
