{
  PsiType substitute=null;
  final PsiType fieldType=field.getType();
  for (  String typeName : typeMap.keySet()) {
    if (InheritanceUtil.isInheritor(fieldType,typeName)) {
      substitute=typeMap.get(typeName);
      break;
    }
  }
  if (substitute == null) {
    final PsiClass aClass=JavaPsiFacade.getInstance(project).findClass(JavaFxCommonClassNames.JAVAFX_BEANS_VALUE_OBSERVABLE_VALUE,GlobalSearchScope.allScope(project));
    LOG.assertTrue(aClass != null);
    final PsiClassType.ClassResolveResult resolveResult=PsiUtil.resolveGenericsClassInType(fieldType);
    final PsiClass fieldClass=resolveResult.getElement();
    LOG.assertTrue(fieldClass != null);
    final PsiSubstitutor substitutor=TypeConversionUtil.getSuperClassSubstitutor(aClass,fieldClass,resolveResult.getSubstitutor());
    final PsiMethod[] values=aClass.findMethodsByName("getValue",false);
    substitute=substitutor.substitute(values[0].getReturnType());
  }
  return substitute;
}
