{
  final PsiType fieldType=field.getType();
  final PsiClassType.ClassResolveResult resolveResult=PsiUtil.resolveGenericsClassInType(fieldType);
  final PsiClass fieldClass=resolveResult.getElement();
  if (fieldClass == null)   return fieldType;
  return CachedValuesManager.getManager(project).getCachedValue(fieldClass,new CachedValueProvider<PsiType>(){
    @Nullable @Override public Result<PsiType> compute(){
      PsiType substitute=null;
      for (      String typeName : typeMap.keySet()) {
        if (InheritanceUtil.isInheritor(fieldType,typeName)) {
          substitute=typeMap.get(typeName);
          break;
        }
      }
      if (substitute == null) {
        if (!InheritanceUtil.isInheritor(fieldType,JavaFxCommonClassNames.JAVAFX_BEANS_VALUE_OBSERVABLE_VALUE)) {
          return Result.create(fieldType,PsiModificationTracker.JAVA_STRUCTURE_MODIFICATION_COUNT);
        }
        final PsiClass aClass=JavaPsiFacade.getInstance(project).findClass(JavaFxCommonClassNames.JAVAFX_BEANS_VALUE_OBSERVABLE_VALUE,GlobalSearchScope.allScope(project));
        LOG.assertTrue(aClass != null);
        final PsiSubstitutor substitutor=TypeConversionUtil.getSuperClassSubstitutor(aClass,fieldClass,resolveResult.getSubstitutor());
        final PsiMethod[] values=aClass.findMethodsByName("getValue",false);
        substitute=substitutor.substitute(values[0].getReturnType());
      }
      return Result.create(substitute,PsiModificationTracker.JAVA_STRUCTURE_MODIFICATION_COUNT);
    }
  }
);
}
