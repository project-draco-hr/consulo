{
  LogicalPosition pos=new LogicalPosition(state.LINE,state.COLUMN);
  editor.getCaretModel().moveToLogicalPosition(pos);
  editor.getSelectionModel().removeSelection();
  editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
  if (state.VERTICAL_SCROLL_PROPORTION != -1) {
    EditorUtil.setVerticalScrollProportion(editor,state.VERTICAL_SCROLL_PROPORTION);
  }
  final Document document=editor.getDocument();
  if (state.SELECTION_START == state.SELECTION_END) {
    editor.getSelectionModel().removeSelection();
  }
 else {
    int startOffset=Math.min(state.SELECTION_START,document.getTextLength());
    int endOffset=Math.min(state.SELECTION_END,document.getTextLength());
    editor.getSelectionModel().setSelection(startOffset,endOffset);
  }
  ((EditorEx)editor).stopOptimizedScrolling();
  editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
  if (project != null && state.FOLDING_STATE != null) {
    PsiDocumentManager.getInstance(project).commitDocument(document);
    editor.getFoldingModel().runBatchFoldingOperation(new Runnable(){
      public void run(){
        CodeFoldingManager.getInstance(project).restoreFoldingState(editor,state.FOLDING_STATE);
      }
    }
);
  }
}
