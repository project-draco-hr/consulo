{
  try {
    DebugProcess debugProcess=evaluationContext.getDebugProcess();
    List<Value> values=new ArrayList<Value>();
    for (Iterator<ToStringCommand> iterator=requests.iterator(); iterator.hasNext(); ) {
      ToStringCommand toStringCommand=iterator.next();
      final Value value=toStringCommand.getValue();
      values.add(value instanceof ObjectReference ? ObjectReferenceCachingProxy.unwrap(((ObjectReference)value)) : value);
    }
    ArrayType objectArrayClass=(ArrayType)debugProcess.findClass(evaluationContext,"java.lang.Object[]",evaluationContext.getClassLoader());
    if (objectArrayClass == null) {
      return false;
    }
    ArrayReference argArray=debugProcess.newInstance(objectArrayClass,values.size());
    ((SuspendContextImpl)evaluationContext.getSuspendContext()).keep(argArray);
    argArray.setValues(values);
    List argList=new ArrayList(1);
    argList.add(argArray);
    Value value=debugProcess.invokeMethod(evaluationContext,myBatchEvaluatorObject,myBatchEvaluatorMethod,argList);
    if (value instanceof ArrayReference) {
      ((SuspendContextImpl)evaluationContext.getSuspendContext()).keep((ArrayReference)value);
      final ArrayReference strings=(ArrayReference)value;
      final List<Value> allValuesArray=strings.getValues();
      final Value[] allValues=allValuesArray.toArray(new Value[allValuesArray.size()]);
      int idx=0;
      for (Iterator<ToStringCommand> iterator=requests.iterator(); iterator.hasNext(); idx++) {
        ToStringCommand request=iterator.next();
        final Value strValue=allValues[idx];
        if (strValue == null || strValue instanceof StringReference) {
          try {
            String str=(strValue == null) ? null : ((StringReference)strValue).value();
            request.evaluationResult(str);
          }
 catch (          ObjectCollectedException e) {
          }
        }
 else         if (strValue instanceof ObjectReference) {
          request.evaluationError(EvaluateExceptionUtil.createEvaluateException(new InvocationException((ObjectReference)strValue)).getMessage());
        }
 else {
          LOG.assertTrue(false);
        }
        request.setEvaluated();
      }
    }
    return true;
  }
 catch (  ClassNotLoadedException e) {
  }
catch (  InvalidTypeException e) {
  }
catch (  EvaluateException e) {
  }
catch (  ObjectCollectedException e) {
  }
  return false;
}
