{
  if (!super.isAvailable(project,editor,element)) {
    return false;
  }
  final PsiNewExpression expression=PsiTreeUtil.getParentOfType(element,PsiNewExpression.class,false);
  if (expression == null) {
    return false;
  }
  final PsiExpressionList arguments=expression.getArgumentList();
  if (arguments == null) {
    return false;
  }
  final PsiMethod constructor=expression.resolveConstructor();
  if (constructor == null) {
    return false;
  }
  final PsiExpressionList newArguments=createNewArguments(JavaPsiFacade.getElementFactory(project),constructor.getParameterList().getParameters(),arguments.getExpressions());
  if (newArguments == null) {
    return false;
  }
  setText(CodeInsightBundle.message("intention.convert.color.representation.text",newArguments.getText()));
  return true;
}
