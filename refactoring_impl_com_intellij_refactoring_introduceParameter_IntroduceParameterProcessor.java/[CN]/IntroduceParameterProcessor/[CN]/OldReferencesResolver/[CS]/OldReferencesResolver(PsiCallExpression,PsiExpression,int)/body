{
  myContext=context;
  myExpr=expr;
  myTempVars=new HashMap<PsiExpression,String>();
  myActualArgs=myContext.getArgumentList().getExpressions();
  PsiElementFactory factory=myManager.getElementFactory();
  if (myContext instanceof PsiMethodCallExpression) {
    final PsiMethodCallExpression methodCall=(PsiMethodCallExpression)myContext;
    final PsiReferenceExpression methodExpression=methodCall.getMethodExpression();
    myInstanceRef=methodExpression.getQualifierExpression();
    if (myInstanceRef == null) {
      final PsiClass thisResolveClass=RefactoringUtil.getThisResolveClass(methodExpression);
      if (thisResolveClass != null && !(thisResolveClass instanceof PsiAnonymousClass) && !thisResolveClass.equals(PsiTreeUtil.getParentOfType(methodExpression,PsiClass.class))) {
        try {
          myInstanceRef=factory.createExpressionFromText(thisResolveClass.getName() + ".this",null);
        }
 catch (        IncorrectOperationException e) {
          LOG.error(e);
        }
      }
    }
  }
 else {
    myInstanceRef=null;
  }
  myReplaceFieldsWithGetters=replaceFieldsWithGetters;
}
