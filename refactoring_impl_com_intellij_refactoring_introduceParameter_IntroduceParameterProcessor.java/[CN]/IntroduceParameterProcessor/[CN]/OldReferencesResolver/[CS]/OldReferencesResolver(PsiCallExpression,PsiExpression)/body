{
  myContext=context;
  myExpr=expr;
  myTempVars=new HashMap<PsiExpression,String>();
  myActualArgs=myContext.getArgumentList().getExpressions();
  if (myActualArgs.length < myMethodToReplaceIn.getParameterList().getParametersCount()) {
    LOG.debug(myContext.getText() + "\n-----\n" + myMethodToReplaceIn.getText());
  }
  PsiElementFactory factory=myManager.getElementFactory();
  PsiExpression instanceRef;
  if (myContext instanceof PsiMethodCallExpression) {
    final PsiMethodCallExpression methodCall=(PsiMethodCallExpression)myContext;
    final PsiReferenceExpression methodExpression=methodCall.getMethodExpression();
    instanceRef=methodExpression.getQualifierExpression();
    if (instanceRef == null) {
      final PsiClass thisResolveClass=RefactoringUtil.getThisResolveClass(methodExpression);
      if (thisResolveClass != null && !(thisResolveClass instanceof PsiAnonymousClass) && !thisResolveClass.equals(PsiTreeUtil.getParentOfType(methodExpression,PsiClass.class))) {
        instanceRef=factory.createExpressionFromText(thisResolveClass.getName() + ".this",null);
      }
    }
  }
 else {
    instanceRef=null;
  }
  myInstanceRef=instanceRef;
}
