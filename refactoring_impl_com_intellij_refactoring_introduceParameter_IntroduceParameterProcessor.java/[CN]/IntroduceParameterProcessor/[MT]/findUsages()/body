{
  ArrayList<UsageInfo> result=new ArrayList<UsageInfo>();
  PsiSearchHelper helper=myManager.getSearchHelper();
  PsiMethod[] overridingMethods=OverridingMethodsSearch.search(myMethodToSearchFor,myMethodToSearchFor.getUseScope(),true).toArray(PsiMethod.EMPTY_ARRAY);
  for (  PsiMethod overridingMethod : overridingMethods) {
    result.add(new UsageInfo(overridingMethod));
  }
  PsiReference[] refs=MethodReferencesSearch.search(myMethodToSearchFor,GlobalSearchScope.projectScope(myProject),true).toArray(PsiReference.EMPTY_ARRAY);
  for (  PsiReference ref1 : refs) {
    PsiElement ref=ref1.getElement();
    if (ref instanceof PsiMethod && ((PsiMethod)ref).isConstructor()) {
      DefaultConstructorImplicitUsageInfo implicitUsageInfo=new DefaultConstructorImplicitUsageInfo((PsiMethod)ref,myMethodToSearchFor);
      result.add(implicitUsageInfo);
    }
 else     if (ref instanceof PsiClass) {
      result.add(new NoConstructorClassUsageInfo((PsiClass)ref));
    }
 else     if (!insideMethodToBeReplaced(ref)) {
      result.add(new ExternalUsageInfo(ref));
    }
 else {
      result.add(new ChangedMethodCallInfo(ref));
    }
  }
  if (myReplaceAllOccurences) {
    final OccurenceManager occurenceManager;
    if (myLocalVariable == null) {
      occurenceManager=new ExpressionOccurenceManager(myExpressionToSearch,myMethodToReplaceIn,null);
    }
 else {
      occurenceManager=new LocalVariableOccurenceManager(myLocalVariable,null);
    }
    PsiElement[] exprs=occurenceManager.getOccurences();
    for (    PsiElement expr : exprs) {
      result.add(new InternalUsageInfo(expr));
    }
  }
 else {
    if (myExpressionToSearch != null) {
      result.add(new InternalUsageInfo(myExpressionToSearch));
    }
  }
  final UsageInfo[] usageInfos=result.toArray(new UsageInfo[result.size()]);
  return UsageViewUtil.removeDuplicatedUsages(usageInfos);
}
