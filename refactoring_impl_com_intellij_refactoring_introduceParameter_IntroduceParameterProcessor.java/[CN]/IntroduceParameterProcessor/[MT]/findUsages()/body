{
  ArrayList<UsageInfo> result=new ArrayList<UsageInfo>();
  PsiSearchHelper helper=myManager.getSearchHelper();
  PsiMethod[] overridingMethods=helper.findOverridingMethods(myMethodToSearchFor,myMethodToSearchFor.getUseScope(),true);
  for (  PsiMethod overridingMethod : overridingMethods) {
    result.add(new UsageInfo(overridingMethod));
  }
  if (myMethodToSearchFor.isConstructor()) {
    final PsiParameter[] parameters=myMethodToSearchFor.getParameterList().getParameters();
    if (parameters.length == 0) {
      addImplicitDefaultConstructorUsages(result,myMethodToSearchFor.getContainingClass());
    }
  }
  PsiReference[] refs=helper.findReferencesIncludingOverriding(myMethodToSearchFor,GlobalSearchScope.projectScope(myProject),true);
  int i;
  for (i=0; i < refs.length; i++) {
    PsiElement ref=refs[i].getElement();
    if (!insideMethodToBeReplaced(ref)) {
      result.add(new ExternalUsageInfo(ref));
    }
 else {
      result.add(new ChangedMethodCallInfo(ref));
    }
  }
  if (myReplaceAllOccurences) {
    final OccurenceManager occurenceManager;
    if (myLocalVariable == null) {
      occurenceManager=new ExpressionOccurenceManager(myExpressionToSearch,myMethodToReplaceIn,null);
    }
 else {
      occurenceManager=new LocalVariableOccurenceManager(myLocalVariable,null);
    }
    PsiElement[] exprs=occurenceManager.getOccurences();
    for (i=0; i < exprs.length; i++) {
      PsiElement expr=exprs[i];
      result.add(new InternalUsageInfo(expr));
    }
  }
 else {
    if (myExpressionToSearch != null) {
      result.add(new InternalUsageInfo(myExpressionToSearch));
    }
  }
  final UsageInfo[] usageInfos=result.toArray(new UsageInfo[0]);
  return UsageViewUtil.removeDuplicatedUsages(usageInfos);
}
