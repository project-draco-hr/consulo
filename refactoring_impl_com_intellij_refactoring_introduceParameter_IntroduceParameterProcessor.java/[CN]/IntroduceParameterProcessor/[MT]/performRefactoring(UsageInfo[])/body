{
  try {
    PsiElementFactory factory=myManager.getElementFactory();
    PsiType initializerType=getInitializerType(myForcedType,myParameterInitializer,myLocalVariable);
    if (myParameterInitializer != null) {
      myParameterInitializer=RefactoringUtil.convertInitializerToNormalExpression(myParameterInitializer,initializerType);
    }
 else {
      LOG.assertTrue(myLocalVariable != null);
      myParameterInitializer=factory.createExpressionFromText(myLocalVariable.getName(),myLocalVariable);
    }
    ChangeContextUtil.encodeContextInfo(myParameterInitializer,true);
    for (    UsageInfo usage : usages) {
      if (!(usage instanceof InternalUsageInfo)) {
        if (usage instanceof DefaultConstructorImplicitUsageInfo) {
          addSuperCall(((DefaultConstructorImplicitUsageInfo)usage).getConstructor());
        }
 else         if (usage instanceof NoConstructorClassUsageInfo) {
          addDefaultConstructor(((NoConstructorClassUsageInfo)usage).getPsiClass());
        }
 else         if (usage.getElement() instanceof PsiMethod) {
          if (!myManager.areElementsEquivalent(usage.getElement(),myMethodToReplaceIn)) {
            changeMethodSignatureAndResolveFieldConflicts((PsiMethod)usage.getElement(),initializerType);
          }
        }
 else {
          changeExternalUsage(usage);
        }
      }
    }
    LOG.assertTrue(initializerType.isValid());
    final FieldConflictsResolver fieldConflictsResolver=new FieldConflictsResolver(myParameterName,myMethodToReplaceIn.getBody());
    changeMethodSignature(myMethodToReplaceIn,initializerType);
    if (myMethodToSearchFor != myMethodToReplaceIn) {
      changeMethodSignatureAndResolveFieldConflicts(myMethodToSearchFor,initializerType);
    }
    ChangeContextUtil.clearContextInfo(myParameterInitializer);
    for (    UsageInfo usage : usages) {
      if (usage instanceof ChangedMethodCallInfo) {
        PsiElement element=usage.getElement();
        processChangedMethodCall(element);
      }
 else       if (usage instanceof InternalUsageInfo) {
        PsiElement element=usage.getElement();
        if (element instanceof PsiExpression) {
          element=RefactoringUtil.outermostParenthesizedExpression((PsiExpression)element);
        }
        if (element.getParent() instanceof PsiStatement) {
          element.getParent().delete();
        }
 else {
          PsiElement newExpr=factory.createExpressionFromText(myParameterName,element);
          element.replace(newExpr);
        }
      }
    }
    if (myLocalVariable != null && myRemoveLocalVariable) {
      myLocalVariable.normalizeDeclaration();
      myLocalVariable.getParent().delete();
    }
    fieldConflictsResolver.fix();
  }
 catch (  IncorrectOperationException ex) {
    LOG.assertTrue(false);
  }
}
