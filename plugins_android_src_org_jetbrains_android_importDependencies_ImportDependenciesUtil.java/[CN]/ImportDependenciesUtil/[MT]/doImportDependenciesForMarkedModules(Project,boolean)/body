{
  if (project.getUserData(WAIT_FOR_IMPORTING_DEPENDENCIES_KEY) != Boolean.TRUE) {
    return;
  }
  project.putUserData(WAIT_FOR_IMPORTING_DEPENDENCIES_KEY,null);
  final List<Module> modulesToProcess=new ArrayList<Module>();
  for (  Module module : ModuleManager.getInstance(project).getModules()) {
    if (module.getUserData(WAIT_FOR_IMPORTING_DEPENDENCIES_KEY) == Boolean.TRUE) {
      module.putUserData(WAIT_FOR_IMPORTING_DEPENDENCIES_KEY,null);
      modulesToProcess.add(module);
    }
  }
  final List<ImportDependenciesTask> tasks=new OrderedSet<ImportDependenciesTask>();
  final List<MyUnresolvedDependency> unresolvedDependencies=new ArrayList<MyUnresolvedDependency>();
  for (  Module module : modulesToProcess) {
    importDependencies(module,updateBackwardDependencies,tasks,unresolvedDependencies);
  }
  final Map<VirtualFile,ModuleProvidingTask> libDir2ModuleProvidingTask=new HashMap<VirtualFile,ModuleProvidingTask>();
  for (  ImportDependenciesTask task : tasks) {
    if (task instanceof ModuleProvidingTask) {
      final ModuleProvidingTask moduleProvidingTask=(ModuleProvidingTask)task;
      libDir2ModuleProvidingTask.put(moduleProvidingTask.getContentRoot(),moduleProvidingTask);
    }
  }
  for (  MyUnresolvedDependency unresolvedDependency : unresolvedDependencies) {
    final ModuleProvidingTask taskProvidingDepModule=libDir2ModuleProvidingTask.get(unresolvedDependency.myLibDir);
    if (taskProvidingDepModule != null) {
      tasks.add(new AddModuleDependencyTask(unresolvedDependency.myModuleProvider,ModuleProvider.create(taskProvidingDepModule)));
    }
  }
  if (tasks.size() > 0) {
    doImportDependencies(project,tasks);
  }
}
