{
  for (  VirtualFile libDir : getLibDirs(defaultProperties)) {
    final Module depModule=ModuleUtil.findModuleForFile(libDir,project);
    if (depModule != null) {
      if ((allowedDepModule == null || allowedDepModule == depModule) && ArrayUtil.find(ModuleRootManager.getInstance(depModule).getContentRoots(),libDir) >= 0 && !(module != null && ModuleRootManager.getInstance(module).isDependsOn(depModule))) {
        tasks.add(new AddModuleDependencyTask(moduleProvider,ModuleProvider.create(depModule)));
      }
    }
 else {
      final VirtualFile libModuleFile=findModuleFileChild(libDir);
      final ModuleProvidingTask task=libModuleFile != null && new File(libModuleFile.getPath()).exists() ? new ImportModuleTask(project,libModuleFile.getPath(),libDir) : new CreateNewModuleTask(project,libDir);
      if (!tasks.contains(task)) {
        tasks.add(task);
        final ModuleProvider newModuleProvider=ModuleProvider.create(task);
        tasks.add(new AddModuleDependencyTask(moduleProvider,newModuleProvider));
        importDependenciesForNewModule(project,newModuleProvider,libDir,tasks,unresolvedDependencies);
      }
 else {
        unresolvedDependencies.add(new MyUnresolvedDependency(moduleProvider,libDir));
      }
    }
  }
}
