{
  myGroup=group;
  setModel(new AbstractListModel(){
    @Override public int getSize(){
      return myGroup.getItems().size();
    }
    @Override public Object getElementAt(    int index){
      return myGroup.getItems().get(index);
    }
  }
);
  ColoredListCellRenderer renderer=new ColoredListCellRenderer(){
    @Override protected void customizeCellRenderer(    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      clear();
      PaletteItem item=(PaletteItem)value;
      setIcon(item.getIcon());
      append(item.getTitle(),SimpleTextAttributes.REGULAR_ATTRIBUTES);
      setToolTipText(item.getTooltip());
    }
  }
;
  renderer.getIpad().left=UIUtil.getTreeLeftChildIndent();
  renderer.getIpad().right=UIUtil.getTreeRightChildIndent();
  setCellRenderer(renderer);
  setVisibleRowCount(0);
  setLayoutOrientation(HORIZONTAL_WRAP);
  setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    MouseEvent e){
      myNeedClearSelection=SwingUtilities.isLeftMouseButton(e) && myBeforeClickSelectedRow >= 0 && locationToIndex(e.getPoint()) == myBeforeClickSelectedRow && !UIUtil.isControlKeyDown(e) && !e.isShiftDown();
    }
    @Override public void mouseReleased(    MouseEvent e){
      if (SwingUtilities.isLeftMouseButton(e) && myBeforeClickSelectedRow >= 0 && locationToIndex(e.getPoint()) == myBeforeClickSelectedRow && !UIUtil.isControlKeyDown(e) && !e.isShiftDown() && myNeedClearSelection) {
        clearSelection();
      }
    }
  }
);
  initActions();
}
