{
  if (!(myDelegateIcon instanceof DeferredIconImpl && ((DeferredIconImpl)myDelegateIcon).myDelegateIcon instanceof DeferredIconImpl)) {
    myDelegateIcon.paintIcon(c,g,x,y);
  }
  if (isDone() || myIsScheduled || PowerSaveMode.isEnabled()) {
    return;
  }
  myIsScheduled=true;
  final Component target=getTarget(c);
  final Component paintingParent=SwingUtilities.getAncestorOfClass(PaintingParent.class,c);
  final Rectangle paintingParentRec=paintingParent == null ? null : ((PaintingParent)paintingParent).getChildRec(c);
  ourIconsCalculatingExecutor.execute(new Runnable(){
    @Override public void run(){
      int oldWidth=myDelegateIcon.getIconWidth();
      final Icon[] evaluated=new Icon[1];
      final long startTime=System.currentTimeMillis();
      if (myNeedReadAction) {
        boolean result=ProgressIndicatorUtils.runInReadActionWithWriteActionPriority(new Runnable(){
          @Override public void run(){
            IconDeferrerImpl.evaluateDeferred(new Runnable(){
              @Override public void run(){
                evaluated[0]=evaluate();
              }
            }
);
            if (myAutoUpdatable) {
              myLastCalcTime=System.currentTimeMillis();
              myLastTimeSpent=myLastCalcTime - startTime;
            }
          }
        }
);
        if (!result) {
          myIsScheduled=false;
          return;
        }
      }
 else {
        IconDeferrerImpl.evaluateDeferred(new Runnable(){
          @Override public void run(){
            evaluated[0]=evaluate();
          }
        }
);
        if (myAutoUpdatable) {
          myLastCalcTime=System.currentTimeMillis();
          myLastTimeSpent=myLastCalcTime - startTime;
        }
      }
      final Icon result=evaluated[0];
      myDelegateIcon=result;
      checkDelegationDepth();
      final boolean shouldRevalidate=Registry.is("ide.tree.deferred.icon.invalidates.cache") && myDelegateIcon.getIconWidth() != oldWidth;
      ourLaterInvocator.offer(new Runnable(){
        @Override public void run(){
          setDone(result);
          Component actualTarget=target;
          if (actualTarget != null && SwingUtilities.getWindowAncestor(actualTarget) == null) {
            actualTarget=paintingParent;
            if (actualTarget == null || SwingUtilities.getWindowAncestor(actualTarget) == null) {
              actualTarget=null;
            }
          }
          if (actualTarget == null)           return;
          if (shouldRevalidate) {
            if (actualTarget instanceof JTree) {
              final TreeUI ui=((JTree)actualTarget).getUI();
              if (ui instanceof BasicTreeUI) {
                ((BasicTreeUI)ui).setLeftChildIndent(UIUtil.getTreeLeftChildIndent());
              }
            }
          }
          if (c == actualTarget) {
            c.repaint(x,y,getIconWidth(),getIconHeight());
          }
 else {
            ourRepaintScheduler.pushDirtyComponent(actualTarget,paintingParentRec);
          }
        }
      }
);
    }
  }
);
}
