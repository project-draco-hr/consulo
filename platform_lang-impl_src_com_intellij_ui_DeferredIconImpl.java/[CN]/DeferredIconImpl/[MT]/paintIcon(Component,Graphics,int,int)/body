{
  myDelegateIcon.paintIcon(c,g,x,y);
  if (!myIsScheduled) {
    myIsScheduled=true;
    final Component target;
    final Container list=SwingUtilities.getAncestorOfClass(JList.class,c);
    if (list != null) {
      target=list;
    }
 else {
      final Container tree=SwingUtilities.getAncestorOfClass(JTree.class,c);
      if (tree != null) {
        target=tree;
      }
 else {
        final Container table=SwingUtilities.getAncestorOfClass(JTable.class,c);
        if (table != null) {
          target=table;
        }
 else {
          target=c;
        }
      }
    }
    myLastTarget=new WeakReference<Component>(target);
    JobUtil.submitToJobThread(new Runnable(){
      public void run(){
        int oldWidth=myDelegateIcon.getIconWidth();
        myDelegateIcon=evaluate();
        final boolean shouldRevalidate=myDelegateIcon.getIconWidth() != oldWidth;
        SwingUtilities.invokeLater(new Runnable(){
          public void run(){
            if (shouldRevalidate) {
              if (target instanceof JTree) {
                final TreeUI ui=((JTree)target).getUI();
                if (ui instanceof BasicTreeUI) {
                  ((BasicTreeUI)ui).setLeftChildIndent(((Integer)UIManager.get("Tree.leftChildIndent")).intValue());
                }
              }
            }
            if (c == target) {
              c.repaint(x,y,getIconWidth(),getIconHeight());
            }
 else {
              ourRepaintScheduler.pushDirtyComponent(target);
            }
          }
        }
);
      }
    }
,Job.DEFAULT_PRIORITY);
  }
}
