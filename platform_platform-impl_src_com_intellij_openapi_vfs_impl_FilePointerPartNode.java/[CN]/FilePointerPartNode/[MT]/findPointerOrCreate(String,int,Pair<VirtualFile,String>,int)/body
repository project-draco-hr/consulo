{
  int index=indexOfFirstDifferentChar(path,start);
  if (index == path.length() && index - start == part.length()) {
    if (leaves == null) {
      pointersUnder+=pointersToStore;
    }
    return this;
  }
  if (index - start == part.length()) {
    for (    FilePointerPartNode child : children) {
      int i=child.indexOfFirstDifferentChar(path,index);
      if (i != index && (i > index + 1 || path.charAt(index) != '/' || index == 0)) {
        FilePointerPartNode node=child.findPointerOrCreate(path,index,fileAndUrl,pointersToStore);
        if (node.leaves == null) {
          pointersUnder+=pointersToStore;
        }
        return node;
      }
    }
    String pathRest=path.substring(index);
    FilePointerPartNode newNode=new FilePointerPartNode(pathRest,this,fileAndUrl);
    newNode.pointersUnder+=pointersToStore;
    children=ArrayUtil.append(children,newNode);
    pointersUnder+=pointersToStore;
    return newNode;
  }
  if (index > start + 1 && index != path.length() && path.charAt(index - 1) == '/')   index--;
  String pathRest=path.substring(index);
  FilePointerPartNode newNode=pathRest.isEmpty() ? this : new FilePointerPartNode(pathRest,this,fileAndUrl);
  if (newNode != this) {
    newNode.pointersUnder=pointersToStore;
  }
  String commonPredecessor=StringUtil.first(part,index - start,false);
  FilePointerPartNode splittedAway=new FilePointerPartNode(part.substring(index - start),this,myFileAndUrl);
  splittedAway.children=children;
  for (  FilePointerPartNode child : children) {
    child.parent=splittedAway;
  }
  splittedAway.pointersUnder=pointersUnder;
  splittedAway.useCount=useCount;
  splittedAway.associate(leaves,myFileAndUrl);
  associate(null,null);
  useCount=0;
  part=commonPredecessor;
  children=newNode == this ? new FilePointerPartNode[]{splittedAway} : new FilePointerPartNode[]{splittedAway,newNode};
  pointersUnder+=pointersToStore;
  return newNode;
}
