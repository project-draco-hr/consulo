{
  int index=indexOfFirstDifferentChar(path,start);
  if (index == path.length() && index - start == part.length()) {
    if (leaf == null)     pointersUnder++;
    return this;
  }
  if (index - start == part.length()) {
    for (    FilePointerPartNode child : children) {
      int i=child.indexOfFirstDifferentChar(path,index);
      if (i != index && (i > index + 1 || path.charAt(index) != '/')) {
        FilePointerPartNode node=child.findPointerOrCreate(path,index,fileAndUrl);
        if (node.leaf == null)         pointersUnder++;
        return node;
      }
    }
    String pathRest=path.substring(index);
    FilePointerPartNode newNode=new FilePointerPartNode(pathRest,this,fileAndUrl);
    children=ArrayUtil.append(children,newNode);
    pointersUnder++;
    return newNode;
  }
  if (index > start && index != path.length() && path.charAt(index - 1) == '/')   index--;
  String pathRest=path.substring(index);
  FilePointerPartNode newNode=pathRest.isEmpty() ? this : new FilePointerPartNode(pathRest,this,fileAndUrl);
  String commonPredecessor=StringUtil.first(part,index - start,false);
  FilePointerPartNode splittedAway=new FilePointerPartNode(part.substring(index - start),this,null);
  splittedAway.children=children;
  for (  FilePointerPartNode child : children) {
    child.parent=splittedAway;
  }
  splittedAway.pointersUnder=pointersUnder;
  splittedAway.useCount=useCount;
  splittedAway.associate(leaf,myFileAndUrl);
  associate(null,null);
  useCount=0;
  part=commonPredecessor;
  children=newNode == this ? new FilePointerPartNode[]{splittedAway} : new FilePointerPartNode[]{splittedAway,newNode};
  pointersUnder++;
  return newNode;
}
