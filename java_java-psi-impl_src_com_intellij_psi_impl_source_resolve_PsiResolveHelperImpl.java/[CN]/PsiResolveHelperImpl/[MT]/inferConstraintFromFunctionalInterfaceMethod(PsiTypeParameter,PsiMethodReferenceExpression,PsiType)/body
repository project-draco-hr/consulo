{
  final PsiClassType.ClassResolveResult resolveResult=PsiUtil.resolveGenericsClassInType(functionalInterfaceType);
  final PsiMethod method=LambdaUtil.getFunctionalInterfaceMethod(resolveResult);
  if (method != null) {
    final PsiSubstitutor subst=LambdaUtil.getSubstitutor(method,resolveResult);
    final PsiParameter[] methodParameters=method.getParameterList().getParameters();
    PsiType[] methodParamTypes=new PsiType[methodParameters.length];
    for (int i=0; i < methodParameters.length; i++) {
      methodParamTypes[i]=subst.substitute(methodParameters[i].getType());
    }
    final PsiType[] args=new PsiType[methodParameters.length];
    final PsiElement resolved=methodReferenceExpression.resolve();
    if (resolved instanceof PsiMethod) {
      final PsiParameter[] parameters=((PsiMethod)resolved).getParameterList().getParameters();
      if (parameters.length != methodParameters.length)       return null;
      for (int i=0; i < parameters.length; i++) {
        args[i]=subst.substitute(parameters[i].getType());
      }
      final Pair<PsiType,ConstraintType> constraint=inferTypeForMethodTypeParameterInner(typeParam,methodParamTypes,args,subst,null,DefaultParameterTypeInferencePolicy.INSTANCE);
      if (constraint != null) {
        return constraint;
      }
      return getSubstitutionForTypeParameterConstraint(typeParam,GenericsUtil.eliminateWildcards(subst.substitute(method.getReturnType())),((PsiMethod)resolved).getReturnType(),true,PsiUtil.getLanguageLevel(method));
    }
  }
  return null;
}
