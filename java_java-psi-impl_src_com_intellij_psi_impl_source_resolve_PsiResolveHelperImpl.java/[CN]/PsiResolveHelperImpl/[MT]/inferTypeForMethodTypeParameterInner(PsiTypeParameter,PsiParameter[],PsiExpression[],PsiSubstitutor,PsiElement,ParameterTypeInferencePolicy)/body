{
  PsiType[] paramTypes=new PsiType[arguments.length];
  PsiType[] argTypes=new PsiType[arguments.length];
  if (parameters.length > 0) {
    for (int j=0; j < argTypes.length; j++) {
      final PsiExpression argument=arguments[j];
      if (argument == null)       continue;
      if (argument instanceof PsiMethodCallExpression && ourGuard.currentStack().contains(argument))       continue;
      final RecursionGuard.StackStamp stackStamp=PsiDiamondType.ourDiamondGuard.markStack();
      argTypes[j]=argument.getType();
      if (!stackStamp.mayCacheNow()) {
        argTypes[j]=null;
        continue;
      }
      final PsiParameter parameter=parameters[Math.min(j,parameters.length - 1)];
      if (j >= parameters.length && !parameter.isVarArgs())       break;
      paramTypes[j]=parameter.getType();
      if (paramTypes[j] instanceof PsiEllipsisType) {
        paramTypes[j]=((PsiEllipsisType)paramTypes[j]).getComponentType();
        if (arguments.length == parameters.length && argTypes[j] instanceof PsiArrayType && !(((PsiArrayType)argTypes[j]).getComponentType() instanceof PsiPrimitiveType)) {
          argTypes[j]=((PsiArrayType)argTypes[j]).getComponentType();
        }
      }
    }
  }
  return inferTypeForMethodTypeParameterInner(typeParameter,paramTypes,argTypes,partialSubstitutor,parent,policy);
}
