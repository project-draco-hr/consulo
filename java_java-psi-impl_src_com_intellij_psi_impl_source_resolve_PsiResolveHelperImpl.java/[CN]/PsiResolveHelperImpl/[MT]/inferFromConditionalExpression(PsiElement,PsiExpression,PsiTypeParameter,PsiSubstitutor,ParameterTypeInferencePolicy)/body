{
  Pair<PsiType,ConstraintType> pair=inferMethodTypeParameterFromParent(PsiUtil.skipParenthesizedExprUp(parent.getParent()),(PsiExpression)parent,typeParameter,substitutor,policy);
  if (pair == null) {
    final PsiExpression thenExpression=((PsiConditionalExpression)parent).getThenExpression();
    final PsiExpression elseExpression=((PsiConditionalExpression)parent).getElseExpression();
    final PsiType[] paramTypes={((PsiMethod)typeParameter.getOwner()).getReturnType()};
    if (methodCall.equals(PsiUtil.skipParenthesizedExprDown(elseExpression)) && thenExpression != null) {
      final PsiType thenType=ourGraphGuard.doPreventingRecursion(thenExpression,true,new Computable<PsiType>(){
        @Override public PsiType compute(){
          return thenExpression.getType();
        }
      }
);
      if (thenType != null) {
        pair=inferTypeForMethodTypeParameterInner(typeParameter,paramTypes,new PsiType[]{thenType},substitutor,null,policy);
      }
    }
 else     if (methodCall.equals(PsiUtil.skipParenthesizedExprDown(thenExpression)) && elseExpression != null) {
      final PsiType elseType=ourGraphGuard.doPreventingRecursion(elseExpression,true,new Computable<PsiType>(){
        @Override public PsiType compute(){
          return elseExpression.getType();
        }
      }
);
      if (elseType != null) {
        pair=inferTypeForMethodTypeParameterInner(typeParameter,paramTypes,new PsiType[]{elseType},substitutor,null,policy);
      }
    }
  }
  return pair;
}
