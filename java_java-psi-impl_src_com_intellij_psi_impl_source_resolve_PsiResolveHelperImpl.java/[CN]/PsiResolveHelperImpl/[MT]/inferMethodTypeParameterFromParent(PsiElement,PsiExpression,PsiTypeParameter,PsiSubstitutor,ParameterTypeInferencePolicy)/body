{
  Pair<PsiType,ConstraintType> constraint=null;
  PsiType expectedType=PsiTypesUtil.getExpectedTypeByParent(methodCall);
  if (expectedType == null) {
    if (parent instanceof PsiReturnStatement) {
      final PsiLambdaExpression lambdaExpression=PsiTreeUtil.getParentOfType(parent,PsiLambdaExpression.class);
      if (lambdaExpression != null) {
        return getFailedInferenceConstraint(typeParameter);
      }
    }
 else     if (parent instanceof PsiExpressionList) {
      final PsiElement pParent=parent.getParent();
      if (pParent instanceof PsiCallExpression && parent.equals(((PsiCallExpression)pParent).getArgumentList())) {
        constraint=policy.inferTypeConstraintFromCallContext(methodCall,(PsiExpressionList)parent,(PsiCallExpression)pParent,typeParameter);
        if (constraint == null && PsiUtil.isLanguageLevel8OrHigher(methodCall)) {
          constraint=graphInferenceFromCallContext(methodCall,typeParameter,(PsiCallExpression)pParent);
          if (constraint != null) {
            final PsiType constraintFirst=constraint.getFirst();
            if (constraintFirst == null || constraintFirst.equalsToText(CommonClassNames.JAVA_LANG_OBJECT)) {
              constraint=null;
            }
          }
        }
      }
    }
 else     if (parent instanceof PsiLambdaExpression) {
      expectedType=ourGraphGuard.doPreventingRecursion(methodCall,true,new Computable<PsiType>(){
        @Override public PsiType compute(){
          return LambdaUtil.getFunctionalInterfaceReturnType(((PsiLambdaExpression)parent).getFunctionalInterfaceType());
        }
      }
);
      if (expectedType == null) {
        return null;
      }
    }
 else     if (parent instanceof PsiConditionalExpression) {
      if (PsiUtil.isLanguageLevel8OrHigher(parent)) {
        try {
          final Pair<PsiType,ConstraintType> pair=inferFromConditionalExpression(parent,methodCall,typeParameter,substitutor,policy);
          if (pair != null) {
            return pair;
          }
        }
  finally {
          GraphInferencePolicy.forget(parent);
        }
      }
    }
  }
  final PsiManager manager=typeParameter.getManager();
  final GlobalSearchScope scope=parent.getResolveScope();
  PsiType returnType=null;
  if (constraint == null) {
    if (expectedType == null) {
      expectedType=methodCall instanceof PsiCallExpression ? policy.getDefaultExpectedType((PsiCallExpression)methodCall) : null;
    }
    returnType=((PsiMethod)typeParameter.getOwner()).getReturnType();
    constraint=getSubstitutionForTypeParameterConstraint(typeParameter,returnType,expectedType,false,PsiUtil.getLanguageLevel(parent));
    if (constraint != null) {
      PsiType guess=constraint.getFirst();
      if (guess != null && !guess.equals(PsiType.NULL) && constraint.getSecond() == ConstraintType.SUPERTYPE && guess instanceof PsiIntersectionType) {
        for (        PsiType conjuct : ((PsiIntersectionType)guess).getConjuncts()) {
          if (!conjuct.isAssignableFrom(expectedType)) {
            return FAILED_INFERENCE;
          }
        }
      }
    }
  }
  final Pair<PsiType,ConstraintType> result;
  if (constraint == null) {
    if (methodCall instanceof PsiCallExpression) {
      final PsiExpressionList argumentList=((PsiCallExpression)methodCall).getArgumentList();
      if (argumentList != null && PsiUtil.getLanguageLevel(argumentList).isAtLeast(LanguageLevel.JDK_1_8)) {
        for (        PsiExpression expression : argumentList.getExpressions()) {
          if (expression instanceof PsiLambdaExpression || expression instanceof PsiMethodReferenceExpression) {
            final PsiType functionalInterfaceType=LambdaUtil.getFunctionalInterfaceType(expression,false);
            if (functionalInterfaceType == null || PsiUtil.resolveClassInType(functionalInterfaceType) == typeParameter) {
              return getFailedInferenceConstraint(typeParameter);
            }
            final PsiMethod method=LambdaUtil.getFunctionalInterfaceMethod(functionalInterfaceType);
            final PsiClassType.ClassResolveResult resolveResult=PsiUtil.resolveGenericsClassInType(functionalInterfaceType);
            if (method == null || methodParamsDependOn(typeParameter,expression,functionalInterfaceType,method.getParameterList().getParameters(),LambdaUtil.getSubstitutor(method,resolveResult))) {
              if (expression instanceof PsiMethodReferenceExpression) {
                return getFailedInferenceConstraint(typeParameter);
              }
              return null;
            }
            final Pair<PsiType,ConstraintType> inferredExceptionTypeConstraint=inferExceptionConstrains(typeParameter,expression,method,resolveResult.getSubstitutor());
            if (inferredExceptionTypeConstraint != null) {
              return inferredExceptionTypeConstraint;
            }
          }
        }
      }
      PsiClassType[] superTypes=typeParameter.getSuperTypes();
      if (superTypes.length == 0)       return null;
      PsiType superType=substitutor.substitute(superTypes[0]);
      if (superType instanceof PsiClassType && ((PsiClassType)superType).isRaw()) {
        superType=TypeConversionUtil.erasure(superType);
      }
      if (superType == null)       superType=PsiType.getJavaLangObject(manager,scope);
      if (superType == null)       return null;
      return policy.getInferredTypeWithNoConstraint(manager,superType);
    }
    return null;
  }
  PsiType guess=constraint.getFirst();
  guess=policy.adjustInferredType(manager,guess,constraint.getSecond());
  if (returnType instanceof PsiClassType && typeParameter.equals(((PsiClassType)returnType).resolve())) {
    PsiClassType[] extendsTypes=typeParameter.getExtendsListTypes();
    PsiSubstitutor newSubstitutor=substitutor.put(typeParameter,guess);
    for (    PsiClassType extendsType1 : extendsTypes) {
      PsiType extendsType=newSubstitutor.substitute(extendsType1);
      if (guess != null && !extendsType.isAssignableFrom(guess)) {
        if (guess.isAssignableFrom(extendsType)) {
          guess=extendsType;
          newSubstitutor=substitutor.put(typeParameter,guess);
        }
 else {
          break;
        }
      }
    }
  }
  result=new Pair<PsiType,ConstraintType>(guess,constraint.getSecond());
  return result;
}
