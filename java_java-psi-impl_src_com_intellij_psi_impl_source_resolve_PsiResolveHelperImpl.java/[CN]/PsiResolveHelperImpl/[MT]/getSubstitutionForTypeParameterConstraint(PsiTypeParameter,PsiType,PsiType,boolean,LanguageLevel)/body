{
  if (param instanceof PsiArrayType && arg instanceof PsiArrayType) {
    return getSubstitutionForTypeParameterConstraint(typeParam,((PsiArrayType)param).getComponentType(),((PsiArrayType)arg).getComponentType(),isContraVariantPosition,languageLevel);
  }
  if (!(param instanceof PsiClassType))   return null;
  PsiManager manager=typeParam.getManager();
  if (arg instanceof PsiPrimitiveType) {
    if (!JavaVersionService.getInstance().isAtLeast(typeParam,JavaSdkVersion.JDK_1_7) && !isContraVariantPosition)     return null;
    arg=((PsiPrimitiveType)arg).getBoxedType(typeParam);
    if (arg == null)     return null;
  }
  JavaResolveResult paramResult=((PsiClassType)param).resolveGenerics();
  PsiClass paramClass=(PsiClass)paramResult.getElement();
  if (typeParam == paramClass) {
    final PsiClass psiClass=PsiUtil.resolveClassInType(arg);
    if (arg == null || arg.getDeepComponentType() instanceof PsiPrimitiveType || arg instanceof PsiIntersectionType || (psiClass != null && (isContraVariantPosition || !CommonClassNames.JAVA_LANG_OBJECT.equals(psiClass.getQualifiedName()) || (arg instanceof PsiArrayType)))) {
      PsiType bound=intersectAllExtends(typeParam,arg);
      return new Pair<PsiType,ConstraintType>(bound,ConstraintType.SUPERTYPE);
    }
    if (psiClass == null && arg instanceof PsiClassType) {
      return Pair.create(arg,ConstraintType.EQUALS);
    }
    return null;
  }
  if (paramClass == null)   return null;
  if (!(arg instanceof PsiClassType))   return null;
  JavaResolveResult argResult=((PsiClassType)arg).resolveGenerics();
  PsiClass argClass=(PsiClass)argResult.getElement();
  if (argClass == null)   return null;
  PsiElementFactory factory=JavaPsiFacade.getInstance(manager.getProject()).getElementFactory();
  PsiType patternType=factory.createType(typeParam);
  if (isContraVariantPosition) {
    PsiSubstitutor substitutor=TypeConversionUtil.getClassSubstitutor(paramClass,argClass,argResult.getSubstitutor());
    if (substitutor == null)     return null;
    arg=factory.createType(paramClass,substitutor,languageLevel);
  }
 else {
    PsiSubstitutor substitutor=TypeConversionUtil.getClassSubstitutor(argClass,paramClass,paramResult.getSubstitutor());
    if (substitutor == null)     return null;
    param=factory.createType(argClass,substitutor,languageLevel);
  }
  return getSubstitutionForTypeParameterInner(param,arg,patternType,ConstraintType.SUPERTYPE,0);
}
