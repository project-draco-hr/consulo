{
  final PsiClassType.ClassResolveResult resolveResult=PsiUtil.resolveGenericsClassInType(functionalInterfaceType);
  final PsiMethod method=LambdaUtil.getFunctionalInterfaceMethod(functionalInterfaceType);
  if (method != null) {
    final Pair<PsiType,ConstraintType> constraintFromFormalParams=inferConstraintFromLambdaFormalParams(typeParam,resolveResult,method,lambdaExpression);
    if (constraintFromFormalParams != null)     return constraintFromFormalParams;
    final PsiParameter[] methodParameters=method.getParameterList().getParameters();
    final PsiSubstitutor subst=TypeConversionUtil.getSuperClassSubstitutor(method.getContainingClass(),resolveResult.getElement(),resolveResult.getSubstitutor());
    final boolean methodParamsDependOnTypeParams=methodParamsDependOnTypeParams(lambdaExpression,methodParameters,subst,typeParam);
    final PsiType returnType=subst.substitute(method.getReturnType());
    if (returnType != null && returnType != PsiType.VOID) {
      Pair<PsiType,ConstraintType> constraint=null;
      final List<PsiExpression> expressions=lambdaExpression.getReturnExpressions();
      for (      final PsiExpression expression : expressions) {
        final boolean independent=LambdaUtil.isFreeFromTypeInferenceArgs(methodParameters,lambdaExpression,expression);
        if (independent && methodParamsDependOnTypeParams)         return FAILED_INFERENCE;
        if (!independent) {
          if (lowerBound != PsiType.NULL) {
            return null;
          }
          continue;
        }
        PsiType exprType=expression.getType();
        if (exprType instanceof PsiLambdaParameterType) {
          final PsiParameter parameter=((PsiLambdaParameterType)exprType).getParameter();
          final int parameterIndex=lambdaExpression.getParameterList().getParameterIndex(parameter);
          if (parameterIndex > -1) {
            exprType=subst.substitute(methodParameters[parameterIndex].getType());
          }
        }
 else         if (exprType instanceof PsiLambdaExpressionType) {
          return inferConstraintFromFunctionalInterfaceMethod(typeParam,((PsiLambdaExpressionType)exprType).getExpression(),returnType,lowerBound);
        }
        if (exprType == null) {
          return FAILED_INFERENCE;
        }
        final Pair<PsiType,ConstraintType> returnExprConstraint=getSubstitutionForTypeParameterConstraint(typeParam,returnType,exprType,false,PsiUtil.getLanguageLevel(method));
        if (returnExprConstraint != null) {
          if (returnExprConstraint == FAILED_INFERENCE)           return returnExprConstraint;
          if (constraint != null) {
            final PsiType leastUpperBound=GenericsUtil.getLeastUpperBound(constraint.getFirst(),returnExprConstraint.getFirst(),typeParam.getManager());
            constraint=new Pair<PsiType,ConstraintType>(leastUpperBound,ConstraintType.SUPERTYPE);
          }
 else {
            constraint=returnExprConstraint;
          }
        }
      }
      if (constraint != null)       return constraint;
    }
    if (methodParamsDependOnTypeParams)     return getFailedInferenceConstraint(typeParam);
  }
  return null;
}
