{
  if (arg instanceof PsiCapturedWildcardType)   arg=((PsiCapturedWildcardType)arg).getWildcard();
  if (patternType.equals(param)) {
    return processArgType(arg,constraintType,depth < 2);
  }
  if (param instanceof PsiWildcardType) {
    final PsiWildcardType wildcardParam=(PsiWildcardType)param;
    final PsiType paramBound=wildcardParam.getBound();
    if (paramBound == null)     return null;
    ConstraintType constrType=wildcardParam.isExtends() ? ConstraintType.SUPERTYPE : ConstraintType.SUBTYPE;
    if (arg instanceof PsiWildcardType) {
      if (((PsiWildcardType)arg).isExtends() == wildcardParam.isExtends() && ((PsiWildcardType)arg).isBounded() == wildcardParam.isBounded()) {
        Pair<PsiType,ConstraintType> res=getSubstitutionForTypeParameterInner(paramBound,((PsiWildcardType)arg).getBound(),patternType,constrType,depth);
        if (res != null)         return res;
      }
    }
 else     if (patternType.equals(paramBound)) {
      Pair<PsiType,ConstraintType> res=getSubstitutionForTypeParameterInner(paramBound,arg,patternType,constrType,depth);
      if (res != null)       return res;
    }
 else     if (paramBound instanceof PsiArrayType && arg instanceof PsiArrayType) {
      Pair<PsiType,ConstraintType> res=getSubstitutionForTypeParameterInner(((PsiArrayType)paramBound).getComponentType(),((PsiArrayType)arg).getComponentType(),patternType,constrType,depth);
      if (res != null)       return res;
    }
 else     if (paramBound instanceof PsiClassType && arg instanceof PsiClassType) {
      final PsiClassType.ClassResolveResult boundResult=((PsiClassType)paramBound).resolveGenerics();
      final PsiClass boundClass=boundResult.getElement();
      if (boundClass != null) {
        final PsiClassType.ClassResolveResult argResult=((PsiClassType)arg).resolveGenerics();
        final PsiClass argClass=argResult.getElement();
        if (argClass != null) {
          if (wildcardParam.isExtends()) {
            PsiSubstitutor superSubstitutor=TypeConversionUtil.getClassSubstitutor(boundClass,argClass,argResult.getSubstitutor());
            if (superSubstitutor != null) {
              for (              PsiTypeParameter typeParameter : PsiUtil.typeParametersIterable(boundClass)) {
                PsiType substituted=superSubstitutor.substitute(typeParameter);
                if (substituted != null) {
                  Pair<PsiType,ConstraintType> res=getSubstitutionForTypeParameterInner(boundResult.getSubstitutor().substitute(typeParameter),substituted,patternType,ConstraintType.EQUALS,depth + 1);
                  if (res != null)                   return res;
                }
              }
            }
          }
 else {
            PsiSubstitutor superSubstitutor=TypeConversionUtil.getClassSubstitutor(argClass,boundClass,boundResult.getSubstitutor());
            if (superSubstitutor != null) {
              for (              PsiTypeParameter typeParameter : PsiUtil.typeParametersIterable(argClass)) {
                PsiType substituted=argResult.getSubstitutor().substitute(typeParameter);
                if (substituted != null) {
                  Pair<PsiType,ConstraintType> res=getSubstitutionForTypeParameterInner(superSubstitutor.substitute(typeParameter),substituted,patternType,ConstraintType.EQUALS,depth + 1);
                  if (res != null)                   return res;
                }
              }
            }
          }
        }
      }
    }
  }
  if (param instanceof PsiArrayType && arg instanceof PsiArrayType) {
    return getSubstitutionForTypeParameterInner(((PsiArrayType)param).getComponentType(),((PsiArrayType)arg).getComponentType(),patternType,constraintType,depth);
  }
  if (param instanceof PsiClassType && arg instanceof PsiClassType) {
    PsiClassType.ClassResolveResult paramResult=((PsiClassType)param).resolveGenerics();
    PsiClass paramClass=paramResult.getElement();
    if (paramClass == null)     return null;
    PsiClassType.ClassResolveResult argResult=((PsiClassType)arg).resolveGenerics();
    PsiClass argClass=argResult.getElement();
    if (argClass != paramClass)     return null;
    Pair<PsiType,ConstraintType> wildcardCaptured=null;
    for (    PsiTypeParameter typeParameter : PsiUtil.typeParametersIterable(paramClass)) {
      PsiType paramType=paramResult.getSubstitutor().substitute(typeParameter);
      PsiType argType=argResult.getSubstitutor().substituteWithBoundsPromotion(typeParameter);
      if (wildcardCaptured != null) {
        boolean alreadyFound=false;
        for (        PsiTypeParameter typeParam : PsiUtil.typeParametersIterable(paramClass)) {
          if (typeParam != typeParameter && paramType != null && argResult.getSubstitutor().substituteWithBoundsPromotion(typeParam) == argType && paramType.equals(paramResult.getSubstitutor().substitute(typeParam))) {
            alreadyFound=true;
          }
        }
        if (alreadyFound)         continue;
      }
      Pair<PsiType,ConstraintType> res=getSubstitutionForTypeParameterInner(paramType,argType,patternType,ConstraintType.EQUALS,depth + 1);
      if (res != null) {
        PsiType type=res.getFirst();
        if (!(type instanceof PsiWildcardType))         return res;
        if (wildcardCaptured != null)         return FAILED_INFERENCE;
        wildcardCaptured=res;
      }
    }
    return wildcardCaptured;
  }
  return null;
}
