{
  final String base=project.getBasePath();
  for (  final ShelvedChange shelvedChange : changesFromFirstList) {
    final String beforePath=shelvedChange.getBeforePath();
    try {
      final VirtualFile f=ApplyTextFilePatch.findPatchTarget(context,beforePath,shelvedChange.getAfterPath(),FileStatus.ADDED.equals(shelvedChange.getFileStatus()));
      if ((!FileStatus.ADDED.equals(shelvedChange.getFileStatus())) && ((f == null) || (!f.exists()))) {
        if (beforePath != null) {
          missing.add(beforePath);
        }
        continue;
      }
      diffRequestPresentables.add(new DiffRequestPresentableProxy(){
        @NotNull @Override protected DiffRequestPresentable init() throws VcsException {
          if (shelvedChange.isConflictingChange(project)) {
            final CommitContext commitContext=new CommitContext();
            final TextFilePatch patch=preloader.getPatch(shelvedChange,commitContext);
            final FilePath pathBeforeRename=context.getPathBeforeRename(f);
            final String relativePath=patch.getAfterName() == null ? patch.getBeforeName() : patch.getAfterName();
            final Getter<ApplyPatchForBaseRevisionTexts> revisionTextsGetter=new Getter<ApplyPatchForBaseRevisionTexts>(){
              @Override public ApplyPatchForBaseRevisionTexts get(){
                return ApplyPatchForBaseRevisionTexts.create(project,f,pathBeforeRename,patch,new Getter<CharSequence>(){
                  @Override public CharSequence get(){
                    final BaseRevisionTextPatchEP baseRevisionTextPatchEP=Extensions.findExtension(PatchEP.EP_NAME,project,BaseRevisionTextPatchEP.class);
                    if (baseRevisionTextPatchEP != null && commitContext != null) {
                      return baseRevisionTextPatchEP.provideContent(relativePath,commitContext);
                    }
                    return null;
                  }
                }
);
              }
            }
;
            return new MergedDiffRequestPresentable(project,revisionTextsGetter,f,"Shelved Version");
          }
 else {
            final Change change=shelvedChange.getChange(project);
            return new ChangeDiffRequestPresentable(project,change);
          }
        }
        @Override public String getPathPresentation(){
          return FileUtil.toSystemDependentName(new File(base,shelvedChange.getAfterPath() == null ? shelvedChange.getBeforePath() : shelvedChange.getAfterPath()).getPath());
        }
      }
);
    }
 catch (    IOException e) {
      continue;
    }
  }
}
