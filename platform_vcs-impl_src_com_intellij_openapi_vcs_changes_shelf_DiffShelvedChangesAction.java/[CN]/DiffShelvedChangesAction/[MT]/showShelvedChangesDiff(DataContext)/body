{
  final Project project=CommonDataKeys.PROJECT.getData(dc);
  if (project == null)   return;
  if (ChangeListManager.getInstance(project).isFreezedWithNotification(null))   return;
  ShelvedChangeList[] changeLists=ShelvedChangesViewManager.SHELVED_CHANGELIST_KEY.getData(dc);
  if (changeLists == null)   changeLists=ShelvedChangesViewManager.SHELVED_RECYCLED_CHANGELIST_KEY.getData(dc);
  if (changeLists == null || changeLists.length != 1)   return;
  final List<ShelvedChange> textChanges=changeLists[0].getChanges(project);
  final List<ShelvedBinaryFile> binaryChanges=changeLists[0].getBinaryFiles();
  final List<MyDiffRequestProducer> diffRequestProducers=new ArrayList<MyDiffRequestProducer>();
  processTextChanges(project,textChanges,diffRequestProducers);
  processBinaryFiles(project,binaryChanges,diffRequestProducers);
  Collections.sort(diffRequestProducers,ChangeDiffRequestComparator.getInstance());
  final Set<Object> selectedChanges=new HashSet<Object>();
  selectedChanges.addAll(ContainerUtil.notNullize(ShelvedChangesViewManager.SHELVED_CHANGE_KEY.getData(dc)));
  selectedChanges.addAll(ContainerUtil.notNullize(ShelvedChangesViewManager.SHELVED_BINARY_FILE_KEY.getData(dc)));
  int index=0;
  for (int i=0; i < diffRequestProducers.size(); i++) {
    MyDiffRequestProducer producer=diffRequestProducers.get(i);
    if (selectedChanges.contains(producer.getBinaryChange()) || selectedChanges.contains(producer.getTextChange())) {
      index=i;
      break;
    }
  }
  MyDiffRequestChain chain=new MyDiffRequestChain(diffRequestProducers,index);
  DiffManager.getInstance().showDiff(project,chain,DiffDialogHints.FRAME);
}
