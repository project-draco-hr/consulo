{
  final Project project=CommonDataKeys.PROJECT.getData(dc);
  if (project == null)   return;
  if (ChangeListManager.getInstance(project).isFreezedWithNotification(null))   return;
  ShelvedChangeList[] changeLists=ShelvedChangesViewManager.SHELVED_CHANGELIST_KEY.getData(dc);
  if (changeLists == null) {
    changeLists=ShelvedChangesViewManager.SHELVED_RECYCLED_CHANGELIST_KEY.getData(dc);
  }
  if (changeLists == null)   return;
  final List<ShelvedChange> changesFromFirstList=changeLists[0].getChanges(project);
  final ArrayList<DiffRequestPresentable> diffRequestPresentables=new ArrayList<DiffRequestPresentable>();
  final ApplyPatchContext context=new ApplyPatchContext(project.getBaseDir(),0,false,false);
  final PatchesPreloader preloader=new PatchesPreloader(project);
  final List<String> missing=new LinkedList<String>();
  processTextChanges(project,changesFromFirstList,diffRequestPresentables,context,preloader,missing);
  final List<ShelvedBinaryFile> files=changeLists[0].getBinaryFiles();
  processBinaryFiles(project,files,diffRequestPresentables);
  if (!missing.isEmpty()) {
    VcsBalloonProblemNotifier.showOverChangesView(project,"Show Diff: Cannot find base for: " + StringUtil.join(missing,",\n"),MessageType.WARNING);
  }
  Collections.sort(diffRequestPresentables,ChangeDiffRequestComparator.getInstance());
  final Set<String> selectedPaths=new HashSet<String>();
  final List<ShelvedChange> shelvedChanges=ShelvedChangesViewManager.SHELVED_CHANGE_KEY.getData(dc);
  final List<ShelvedBinaryFile> binaryFiles=ShelvedChangesViewManager.SHELVED_BINARY_FILE_KEY.getData(dc);
  for (  ShelvedChange change : shelvedChanges) {
    selectedPaths.add(FilePathsHelper.convertPath(ChangesUtil.getFilePath(change.getChange(project)).getPath()));
  }
  for (  ShelvedBinaryFile file : binaryFiles) {
    selectedPaths.add(FilePathsHelper.convertPath(ChangesUtil.getFilePath(file.createChange(project))));
  }
  int idx=0;
  for (  DiffRequestPresentable presentable : diffRequestPresentables) {
    final String path=FilePathsHelper.convertPath(presentable.getPathPresentation());
    if (selectedPaths.contains(path)) {
      break;
    }
    ++idx;
  }
  idx=idx >= diffRequestPresentables.size() ? 0 : idx;
  ShowDiffAction.showDiffImpl(project,diffRequestPresentables,idx,new ShowDiffUIContext(true));
}
