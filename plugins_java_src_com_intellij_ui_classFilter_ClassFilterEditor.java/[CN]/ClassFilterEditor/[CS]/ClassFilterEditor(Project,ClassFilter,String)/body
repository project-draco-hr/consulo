{
  super(new BorderLayout());
  myPatternsHelpId=patternsHelpId;
  myTable=new JBTable();
  final ToolbarDecorator decorator=ToolbarDecorator.createDecorator(myTable).addExtraAction(new AnActionButton(getAddButtonText(),getAddButtonIcon()){
    @Override public void actionPerformed(    AnActionEvent e){
      addClassFilter();
    }
    @Override public void updateButton(    AnActionEvent e){
      super.updateButton(e);
      setEnabled(!myProject.isDefault());
    }
  }
);
  if (addPatternButtonVisible()) {
    decorator.addExtraAction(new AnActionButton(getAddPatternButtonText(),getAddPatternButtonIcon()){
      @Override public void actionPerformed(      AnActionEvent e){
        addPatternFilter();
      }
      @Override public void updateButton(      AnActionEvent e){
        super.updateButton(e);
        setEnabled(!myProject.isDefault());
      }
    }
);
  }
  add(decorator.setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      TableUtil.removeSelectedItems(myTable);
    }
  }
).setButtonComparator(getAddButtonText(),getAddPatternButtonText(),"Remove").disableUpDownActions().createPanel(),BorderLayout.CENTER);
  myChooserFilter=classFilter;
  myProject=project;
  myTableModel=new FilterTableModel();
  myTable.setModel(myTableModel);
  myTable.setShowGrid(false);
  myTable.setIntercellSpacing(new Dimension(0,0));
  myTable.setTableHeader(null);
  myTable.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
  myTable.setColumnSelectionAllowed(false);
  myTable.setPreferredScrollableViewportSize(new Dimension(200,100));
  TableColumnModel columnModel=myTable.getColumnModel();
  TableColumn column=columnModel.getColumn(FilterTableModel.CHECK_MARK);
  int width=new JCheckBox().getPreferredSize().width;
  column.setPreferredWidth(width);
  column.setMaxWidth(width);
  column.setCellRenderer(new EnabledCellRenderer(myTable.getDefaultRenderer(Boolean.class)));
  columnModel.getColumn(FilterTableModel.FILTER).setCellRenderer(new FilterCellRenderer());
  getEmptyText().setText(UIBundle.message("no.patterns"));
}
