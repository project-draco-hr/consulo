{
  myDx=0;
  myDy=0;
  if (dx > 0) {
    myXCycles=CYCLE_SIZE / dx + 1;
    myDx=1 + dx / CYCLE_SIZE;
  }
 else {
    if (dx < 0) {
      myXCycles=-CYCLE_SIZE / dx + 1;
      myDx=-1 + dx / CYCLE_SIZE;
    }
  }
  if (dy > 0) {
    myYCycles=CYCLE_SIZE / dy + 1;
    myDy=1 + dy / CYCLE_SIZE;
  }
 else {
    if (dy < 0) {
      myYCycles=-CYCLE_SIZE / dy + 1;
      myDy=-1 + dy / CYCLE_SIZE;
    }
  }
  if (myTimer != null) {
    return;
  }
  myTimer=new Timer(TIMER_PERIOD,new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      myCommandProcessor.executeCommand(myProject,new DocumentRunnable(myDocument,myProject){
        public void run(){
          int oldSelectionStart=mySelectionModel.getLeadSelectionOffset();
          LogicalPosition caretPosition=getCaretModel().getLogicalPosition();
          int columnNumber=caretPosition.column;
          xPassedCycles++;
          if (xPassedCycles >= myXCycles) {
            xPassedCycles=0;
            columnNumber+=myDx;
          }
          int lineNumber=caretPosition.line;
          yPassedCycles++;
          if (yPassedCycles >= myYCycles) {
            yPassedCycles=0;
            lineNumber+=myDy;
          }
          LogicalPosition pos=new LogicalPosition(lineNumber,columnNumber);
          getCaretModel().moveToLogicalPosition(pos);
          getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
          int newCaretOffset=getCaretModel().getOffset();
          int caretShift=newCaretOffset - mySavedSelectionStart;
          if (getMouseSelectionState() != MOUSE_SELECTION_STATE_NONE) {
            if (caretShift < 0) {
              int newSelection=newCaretOffset;
              if (getMouseSelectionState() == MOUSE_SELECTION_STATE_WORD_SELECTED) {
                newSelection=mySelectionModel.getWordAtCaretStart();
              }
 else {
                if (getMouseSelectionState() == MOUSE_SELECTION_STATE_LINE_SELECTED) {
                  newSelection=logicalPositionToOffset(visualToLogicalPosition(new VisualPosition(getCaretModel().getVisualPosition().line,0)));
                }
              }
              if (newSelection < 0)               newSelection=newCaretOffset;
              mySelectionModel.setSelection(validateOffset(mySavedSelectionEnd),newSelection);
              getCaretModel().moveToOffset(newSelection);
            }
 else {
              int newSelection=newCaretOffset;
              if (getMouseSelectionState() == MOUSE_SELECTION_STATE_WORD_SELECTED) {
                newSelection=mySelectionModel.getWordAtCaretEnd();
              }
 else {
                if (getMouseSelectionState() == MOUSE_SELECTION_STATE_LINE_SELECTED) {
                  newSelection=logicalPositionToOffset(visualToLogicalPosition(new VisualPosition(getCaretModel().getVisualPosition().line + 1,0)));
                }
              }
              if (newSelection < 0)               newSelection=newCaretOffset;
              mySelectionModel.setSelection(validateOffset(mySavedSelectionStart),newSelection);
              getCaretModel().moveToOffset(newSelection);
            }
            return;
          }
          if (mySelectionModel.hasBlockSelection()) {
            mySelectionModel.setBlockSelection(mySelectionModel.getBlockStart(),getCaretModel().getLogicalPosition());
          }
 else {
            mySelectionModel.setSelection(oldSelectionStart,getCaretModel().getOffset());
          }
        }
      }
,EditorBundle.message("move.cursor.command.name"),CommandProcessor.noneGroupId(getDocument()),UndoConfirmationPolicy.DEFAULT,getDocument());
    }
  }
);
  myTimer.start();
}
