{
  if (getMouseSelectionState() != MOUSE_SELECTION_STATE_NONE) {
    if (myMousePressedEvent != null && myMousePressedEvent.getComponent() == e.getComponent()) {
      Point lastPoint=myMousePressedEvent.getPoint();
      Point point=e.getPoint();
      int deadZone=Registry.intValue("editor.mouseSelectionStateResetDeadZone");
      if (Math.abs(lastPoint.x - point.x) >= deadZone || Math.abs(lastPoint.y - point.y) >= deadZone) {
        resetMouseSelectionState(e);
      }
    }
 else {
      validateMousePointer(e);
    }
  }
 else {
    validateMousePointer(e);
  }
  myMouseMovedEvent=e;
  EditorMouseEvent event=new EditorMouseEvent(EditorImpl.this,e,getMouseEventArea(e));
  if (e.getSource() == myGutterComponent) {
    myGutterComponent.mouseMoved(e);
  }
  if (event.getArea() == EditorMouseEventArea.EDITING_AREA) {
    FoldRegion fold=myFoldingModel.getFoldingPlaceholderAt(e.getPoint());
    TooltipController controller=TooltipController.getInstance();
    if (fold != null && !fold.shouldNeverExpand()) {
      DocumentFragment range=createDocumentFragment(fold);
      final Point p=SwingUtilities.convertPoint((Component)e.getSource(),e.getPoint(),getComponent().getRootPane().getLayeredPane());
      controller.showTooltip(EditorImpl.this,p,new DocumentFragmentTooltipRenderer(range),false,FOLDING_TOOLTIP_GROUP);
    }
 else {
      controller.cancelTooltip(FOLDING_TOOLTIP_GROUP,e,true);
    }
  }
  for (  EditorMouseMotionListener listener : myMouseMotionListeners) {
    listener.mouseMoved(event);
  }
}
