{
  if (data == null)   return;
  final Component last=DnDManager.getInstance().getLastDropHandler();
  if (last != null && !(last instanceof EditorComponentImpl))   return;
  final Editor editor=getEditor(source);
  if (action == MOVE && !editor.isViewer()) {
    if (!editor.getDocument().isWritable()) {
      if (!FileDocumentManager.fileForDocumentCheckedOutSuccessfully(editor.getDocument(),editor.getProject())) {
        return;
      }
    }
    CommandProcessor.getInstance().executeCommand(((EditorImpl)editor).myProject,new Runnable(){
      public void run(){
        ApplicationManager.getApplication().runWriteAction(new Runnable(){
          public void run(){
            Document doc=editor.getDocument();
            doc.startGuardedBlockChecking();
            try {
              doc.deleteString(myDraggedRange.getStartOffset(),myDraggedRange.getEndOffset());
            }
 catch (            ReadOnlyFragmentModificationException e) {
              EditorActionManager.getInstance().getReadonlyFragmentModificationHandler(doc).handle(e);
            }
 finally {
              doc.stopGuardedBlockChecking();
            }
          }
        }
);
      }
    }
,EditorBundle.message("move.selection.command.name"),DND_COMMAND_KEY,UndoConfirmationPolicy.DEFAULT,editor.getDocument());
  }
  myDraggedRange=null;
}
