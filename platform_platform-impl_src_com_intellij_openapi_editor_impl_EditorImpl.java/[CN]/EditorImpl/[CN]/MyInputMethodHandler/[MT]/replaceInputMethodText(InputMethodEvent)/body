{
  int commitCount=e.getCommittedCharacterCount();
  AttributedCharacterIterator text=e.getText();
  final Document doc=getDocument();
  if (composedText != null) {
    if (!isViewer() && doc.isWritable()) {
      runUndoTransparent(new Runnable(){
        @Override public void run(){
          doc.deleteString(Math.max(0,composedTextStart),Math.min(composedTextEnd,doc.getTextLength()));
        }
      }
);
    }
    composedText=null;
  }
  if (text != null) {
    text.first();
    if (commitCount > 0) {
      for (char c=text.current(); commitCount > 0; c=text.next(), commitCount--) {
        if (c >= 0x20 && c != 0x7F) {
          processKeyTyped(c);
        }
      }
    }
    if (!isViewer() && doc.isWritable()) {
      int composedTextIndex=text.getIndex();
      if (composedTextIndex < text.getEndIndex()) {
        createComposedString(composedTextIndex,text);
        runUndoTransparent(new Runnable(){
          @Override public void run(){
            EditorModificationUtil.insertStringAtCaret(EditorImpl.this,composedText,false,false);
          }
        }
);
        composedTextStart=getCaretModel().getOffset();
        composedTextEnd=getCaretModel().getOffset() + composedText.length();
      }
    }
  }
}
