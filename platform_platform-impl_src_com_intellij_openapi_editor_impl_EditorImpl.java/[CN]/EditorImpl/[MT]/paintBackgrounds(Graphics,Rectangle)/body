{
  boolean locateBeforeSoftWrap=!SoftWrapHelper.isCaretAfterSoftWrap(this);
  Color defaultBackground=getBackgroundColor();
  g.setColor(defaultBackground);
  g.fillRect(clip.x,clip.y,clip.width,clip.height);
  int lineHeight=getLineHeight();
  int visibleLineNumber=clip.y / lineHeight;
  VisualPosition visualPosition=xyToVisualPosition(new Point(0,clip.y));
  LogicalPosition logicalPosition=visualToLogicalPosition(visualPosition);
  Point position=new Point(0,visibleLineNumber * lineHeight);
  if (visualPosition.line == 0 && myPrefixText != null) {
    position.x=drawBackground(g,myPrefixAttributes.getBackgroundColor(),new String(myPrefixText),position,myPrefixAttributes.getFontType(),defaultBackground,clip);
  }
  if (logicalPosition.line >= myDocument.getLineCount() || logicalPosition.line < 0) {
    if (position.x > 0)     flushBackground(g,clip);
    return;
  }
  int start=logicalPositionToOffset(logicalPosition);
  getSoftWrapModel().registerSoftWrapsIfNecessary(clip,start);
  TIntHashSet softWrapsToSkip=new TIntHashSet();
  SoftWrap softWrap=getSoftWrapModel().getSoftWrap(start);
  if (softWrap != null) {
    position.x=softWrap.getIndentInPixels();
    softWrapsToSkip.add(softWrap.getStart());
  }
  AtomicBoolean caretRowPainted=new AtomicBoolean();
  IterationState iterationState=new IterationState(this,start,paintSelection());
  LineIterator lIterator=createLineIterator();
  lIterator.start(start);
  if (lIterator.atEnd()) {
    return;
  }
  myLastBackgroundPosition=null;
  myLastBackgroundColor=null;
  TextAttributes attributes=iterationState.getMergedAttributes();
  Color backColor=getBackgroundColor(attributes);
  int fontType=attributes.getFontType();
  CharSequence text=myDocument.getCharsNoThreadCheck();
  int lastLineIndex=Math.max(0,myDocument.getLineCount() - 1);
  while (!iterationState.atEnd() && !lIterator.atEnd()) {
    int hEnd=iterationState.getEndOffset();
    int lEnd=lIterator.getEnd();
    if (hEnd >= lEnd) {
      FoldRegion collapsedFolderAt=myFoldingModel.getCollapsedRegionAtOffset(start);
      if (collapsedFolderAt == null) {
        position.x=drawSoftWrapAwareBackground(g,backColor,text,start,lEnd - lIterator.getSeparatorLength(),position,fontType,defaultBackground,clip,softWrapsToSkip,caretRowPainted);
        if (lIterator.getLineNumber() < lastLineIndex) {
          if (backColor != null && !backColor.equals(defaultBackground)) {
            g.setColor(backColor);
            g.fillRect(position.x,position.y,clip.x + clip.width - position.x,lineHeight);
          }
        }
 else {
          paintAfterFileEndBackground(iterationState,g,position,clip,lineHeight,defaultBackground,caretRowPainted);
          break;
        }
        position.x=0;
        if (position.y > clip.y + clip.height)         break;
        position.y+=lineHeight;
        start=lEnd;
      }
      lIterator.advance();
    }
 else {
      FoldRegion collapsedFolderAt=iterationState.getCurrentFold();
      if (collapsedFolderAt != null) {
        position.x=drawBackground(g,backColor,collapsedFolderAt.getPlaceholderText(),position,fontType,defaultBackground,clip);
      }
 else {
        if (hEnd > lEnd - lIterator.getSeparatorLength()) {
          position.x=drawSoftWrapAwareBackground(g,backColor,text,start,lEnd - lIterator.getSeparatorLength(),position,fontType,defaultBackground,clip,softWrapsToSkip,caretRowPainted);
        }
 else {
          position.x=drawSoftWrapAwareBackground(g,backColor,text,start,hEnd,position,fontType,defaultBackground,clip,softWrapsToSkip,caretRowPainted);
        }
      }
      iterationState.advance();
      attributes=iterationState.getMergedAttributes();
      backColor=getBackgroundColor(attributes);
      fontType=attributes.getFontType();
      start=iterationState.getStartOffset();
    }
  }
  flushBackground(g,clip);
  if (lIterator.getLineNumber() >= lastLineIndex && position.y <= clip.y + clip.height) {
    paintAfterFileEndBackground(iterationState,g,position,clip,lineHeight,defaultBackground,caretRowPainted);
  }
}
