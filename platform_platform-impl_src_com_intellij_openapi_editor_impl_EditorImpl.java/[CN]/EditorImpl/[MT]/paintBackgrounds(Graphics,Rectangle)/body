{
  Color defaultBackground=getBackroundColor();
  g.setColor(defaultBackground);
  g.fillRect(clip.x,clip.y,clip.width,clip.height);
  int lineHeight=getLineHeight();
  int visibleLineNumber=clip.y / lineHeight;
  int startLineNumber=xyToLogicalPosition(new Point(0,clip.y)).line;
  Point position=new Point(0,visibleLineNumber * lineHeight);
  if (startLineNumber == 0 && myPrefixText != null) {
    position.x=drawBackground(g,myPrefixAttributes.getBackgroundColor(),new String(myPrefixText),position,myPrefixAttributes.getFontType(),defaultBackground,clip);
  }
  if (startLineNumber >= myDocument.getLineCount() || startLineNumber < 0) {
    if (position.x > 0)     flushBackground(g,clip);
    return;
  }
  int start=myDocument.getLineStartOffset(startLineNumber);
  IterationState iterationState=new IterationState(this,start,paintSelection());
  LineIterator lIterator=createLineIterator();
  lIterator.start(start);
  if (lIterator.atEnd()) {
    return;
  }
  myLastBackgroundPosition=null;
  myLastBackgroundColor=null;
  TextAttributes attributes=iterationState.getMergedAttributes();
  Color backColor=getBackgroundColor(attributes);
  int fontType=attributes.getFontType();
  CharSequence text=myDocument.getCharsNoThreadCheck();
  int lastLineIndex=Math.max(0,myDocument.getLineCount() - 1);
  int newSoftWrapOffset=-1;
  outer:   while (!iterationState.atEnd() && !lIterator.atEnd()) {
    int hEnd=iterationState.getEndOffset();
    int lEnd=lIterator.getEnd();
    if (hEnd >= lEnd) {
      FoldRegion collapsedFolderAt=myFoldingModel.getCollapsedRegionAtOffset(start);
      if (collapsedFolderAt == null) {
        position.x=drawBackground(g,backColor,text.subSequence(start,lEnd - lIterator.getSeparatorLength()),position,fontType,defaultBackground,clip);
        if (lIterator.getLineNumber() < lastLineIndex) {
          if (backColor != null && !backColor.equals(defaultBackground)) {
            g.setColor(backColor);
            g.fillRect(position.x,position.y,clip.x + clip.width - position.x,lineHeight);
          }
        }
 else {
          paintAfterFileEndBackground(iterationState,g,position,clip,lineHeight,defaultBackground);
          break;
        }
        position.x=0;
        if (position.y > clip.y + clip.height)         break;
        position.y+=lineHeight;
        start=lEnd;
      }
      lIterator.advance();
    }
 else {
      FoldRegion collapsedFolderAt=iterationState.getCurrentFold();
      if (collapsedFolderAt != null) {
        position.x=drawBackground(g,backColor,collapsedFolderAt.getPlaceholderText(),position,fontType,defaultBackground,clip);
      }
 else {
        TextChange softWrap=getSoftWrapModel().getSoftWrap(start);
        if (softWrap == null && getSoftWrapModel().shouldWrap(myDocument.getRawChars(),start,hEnd,position)) {
          softWrap=getSoftWrapModel().wrap(start);
          if (newSoftWrapOffset < 0)           newSoftWrapOffset=start;
        }
        if (softWrap != null) {
          CharSequence softWrapText=softWrap.getText();
          int softWrapStart=0;
          int softWrapEnd=0;
          while (softWrapEnd < softWrapText.length()) {
            for (; softWrapEnd < softWrapText.length() && softWrapText.charAt(softWrapEnd) != '\n'; softWrapEnd++)             ;
            if (softWrapStart >= softWrapText.length() || softWrapEnd >= softWrapText.length()) {
              position.x=drawBackground(g,backColor,softWrapText.subSequence(softWrapStart,softWrapText.length()),position,fontType,defaultBackground,clip);
            }
 else {
              if (softWrapEnd > softWrapStart + 1) {
                drawBackground(g,backColor,softWrapText.subSequence(softWrapStart,softWrapEnd - 1),position,fontType,defaultBackground,clip);
              }
              if (position.y > clip.y + clip.height)               break outer;
              position.x=0;
              position.y+=lineHeight;
              softWrapStart=softWrapEnd + 1;
              softWrapEnd=softWrapStart;
            }
          }
        }
        if (hEnd > lEnd - lIterator.getSeparatorLength()) {
          position.x=drawBackground(g,backColor,text.subSequence(start,lEnd - lIterator.getSeparatorLength()),position,fontType,defaultBackground,clip);
        }
 else {
          position.x=drawBackground(g,backColor,text.subSequence(start,hEnd),position,fontType,defaultBackground,clip);
        }
      }
      iterationState.advance();
      attributes=iterationState.getMergedAttributes();
      backColor=getBackgroundColor(attributes);
      fontType=attributes.getFontType();
      start=iterationState.getStartOffset();
    }
  }
  flushBackground(g,clip);
  if (lIterator.getLineNumber() >= lastLineIndex && position.y <= clip.y + clip.height) {
    paintAfterFileEndBackground(iterationState,g,position,clip,lineHeight,defaultBackground);
  }
  if (newSoftWrapOffset >= 0) {
    myGutterComponent.repaint(0,position.y,myGutterComponent.getWidth(),myGutterComponent.getHeight() - position.y);
    if (getCaretModel().getOffset() >= newSoftWrapOffset) {
      getCaretModel().moveToOffset(getCaretModel().getOffset());
    }
  }
}
