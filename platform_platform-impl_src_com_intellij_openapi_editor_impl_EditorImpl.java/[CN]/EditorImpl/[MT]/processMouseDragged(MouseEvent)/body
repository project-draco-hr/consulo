{
  if (!JBSwingUtilities.isLeftMouseButton(e) && !JBSwingUtilities.isMiddleMouseButton(e)) {
    return;
  }
  if (getMouseEventArea(e) == EditorMouseEventArea.LINE_MARKERS_AREA) {
    if (myDragOnGutterSelectionStartLine >= 0) {
      mySelectionModel.removeSelection();
      myCaretModel.moveToOffset(myDragOnGutterSelectionStartLine < myDocument.getLineCount() ? myDocument.getLineStartOffset(myDragOnGutterSelectionStartLine) : myDocument.getTextLength());
    }
    myDragOnGutterSelectionStartLine=-1;
  }
  boolean columnSelectionDragEvent=isColumnSelectionDragEvent(e);
  boolean toggleCaretEvent=isToggleCaretEvent(e);
  boolean addRectangularSelectionEvent=isAddRectangularSelectionEvent(e);
  boolean columnSelectionDrag=isColumnMode() && !myLastPressCreatedCaret || columnSelectionDragEvent;
  if (!columnSelectionDragEvent && toggleCaretEvent && !myLastPressCreatedCaret) {
    return;
  }
  Rectangle visibleArea=getScrollingModel().getVisibleArea();
  int x=e.getX();
  if (e.getSource() == myGutterComponent) {
    x=0;
  }
  int dx=0;
  if (x < visibleArea.x && visibleArea.x > 0) {
    dx=x - visibleArea.x;
  }
 else {
    if (x > visibleArea.x + visibleArea.width) {
      dx=x - visibleArea.x - visibleArea.width;
    }
  }
  int dy=0;
  int y=e.getY();
  if (y < visibleArea.y && visibleArea.y > 0) {
    dy=y - visibleArea.y;
  }
 else {
    if (y > visibleArea.y + visibleArea.height) {
      dy=y - visibleArea.y - visibleArea.height;
    }
  }
  if (dx == 0 && dy == 0) {
    myScrollingTimer.stop();
    SelectionModel selectionModel=getSelectionModel();
    Caret leadCaret=getLeadCaret();
    int oldSelectionStart=leadCaret.getLeadSelectionOffset();
    VisualPosition oldVisLeadSelectionStart=leadCaret.getLeadSelectionPosition();
    int oldCaretOffset=getCaretModel().getOffset();
    boolean multiCaretSelection=columnSelectionDrag || toggleCaretEvent;
    VisualPosition newVisualCaret=myUseNewRendering ? getTargetPosition(x,y,!multiCaretSelection) : null;
    LogicalPosition newLogicalCaret=myUseNewRendering ? visualToLogicalPosition(newVisualCaret) : getLogicalPositionForScreenPos(x,y,!multiCaretSelection);
    if (multiCaretSelection) {
      myMultiSelectionInProgress=true;
      myRectangularSelectionInProgress=columnSelectionDrag || addRectangularSelectionEvent;
      myTargetMultiSelectionPosition=xyToVisualPosition(new Point(Math.max(x,0),Math.max(y,0)));
    }
 else {
      if (myUseNewRendering) {
        getCaretModel().moveToVisualPosition(newVisualCaret);
      }
 else {
        getCaretModel().moveToLogicalPosition(newLogicalCaret);
      }
    }
    int newCaretOffset=getCaretModel().getOffset();
    newVisualCaret=getCaretModel().getVisualPosition();
    int caretShift=newCaretOffset - mySavedSelectionStart;
    if (myMousePressedEvent != null && getMouseEventArea(myMousePressedEvent) != EditorMouseEventArea.EDITING_AREA && getMouseEventArea(myMousePressedEvent) != EditorMouseEventArea.LINE_NUMBERS_AREA) {
      selectionModel.setSelection(oldSelectionStart,newCaretOffset);
    }
 else {
      if (multiCaretSelection) {
        if (myLastMousePressedLocation != null && (myCurrentDragIsSubstantial || !newLogicalCaret.equals(myLastMousePressedLocation))) {
          createSelectionTill(newLogicalCaret);
          blockActionsIfNeeded(e,myLastMousePressedLocation,newLogicalCaret);
        }
      }
 else {
        if (getMouseSelectionState() != MOUSE_SELECTION_STATE_NONE) {
          if (caretShift < 0) {
            int newSelection=newCaretOffset;
            if (getMouseSelectionState() == MOUSE_SELECTION_STATE_WORD_SELECTED) {
              newSelection=myCaretModel.getWordAtCaretStart();
            }
 else {
              if (getMouseSelectionState() == MOUSE_SELECTION_STATE_LINE_SELECTED) {
                newSelection=logicalPositionToOffset(visualToLogicalPosition(new VisualPosition(getCaretModel().getVisualPosition().line,0)));
              }
            }
            if (newSelection < 0)             newSelection=newCaretOffset;
            selectionModel.setSelection(mySavedSelectionEnd,newSelection);
            getCaretModel().moveToOffset(newSelection);
          }
 else {
            int newSelection=newCaretOffset;
            if (getMouseSelectionState() == MOUSE_SELECTION_STATE_WORD_SELECTED) {
              newSelection=myCaretModel.getWordAtCaretEnd();
            }
 else {
              if (getMouseSelectionState() == MOUSE_SELECTION_STATE_LINE_SELECTED) {
                newSelection=logicalPositionToOffset(visualToLogicalPosition(new VisualPosition(getCaretModel().getVisualPosition().line + 1,0)));
              }
            }
            if (newSelection < 0)             newSelection=newCaretOffset;
            selectionModel.setSelection(mySavedSelectionStart,newSelection);
            getCaretModel().moveToOffset(newSelection);
          }
          cancelAutoResetForMouseSelectionState();
          return;
        }
        if (!myMousePressedInsideSelection) {
          if ((myMousePressArea == EditorMouseEventArea.LINE_NUMBERS_AREA || myMousePressArea == EditorMouseEventArea.LINE_MARKERS_AREA) && selectionModel.hasSelection()) {
            if (newCaretOffset >= selectionModel.getSelectionEnd()) {
              oldSelectionStart=selectionModel.getSelectionStart();
              oldVisLeadSelectionStart=selectionModel.getSelectionStartPosition();
            }
 else             if (newCaretOffset <= selectionModel.getSelectionStart()) {
              oldSelectionStart=selectionModel.getSelectionEnd();
              oldVisLeadSelectionStart=selectionModel.getSelectionEndPosition();
            }
          }
          if (oldVisLeadSelectionStart != null) {
            setSelectionAndBlockActions(e,oldVisLeadSelectionStart,oldSelectionStart,newVisualCaret,newCaretOffset);
          }
 else {
            setSelectionAndBlockActions(e,oldSelectionStart,newCaretOffset);
          }
          cancelAutoResetForMouseSelectionState();
        }
 else {
          if (caretShift != 0) {
            if (myMousePressedEvent != null) {
              if (mySettings.isDndEnabled()) {
                boolean isCopy=UIUtil.isControlKeyDown(e) || isViewer() || !getDocument().isWritable();
                mySavedCaretOffsetForDNDUndoHack=oldCaretOffset;
                getContentComponent().getTransferHandler().exportAsDrag(getContentComponent(),e,isCopy ? TransferHandler.COPY : TransferHandler.MOVE);
              }
 else {
                selectionModel.removeSelection();
              }
            }
          }
        }
      }
    }
  }
 else {
    myScrollingTimer.start(dx,dy);
    onSubstantialDrag(e);
  }
}
