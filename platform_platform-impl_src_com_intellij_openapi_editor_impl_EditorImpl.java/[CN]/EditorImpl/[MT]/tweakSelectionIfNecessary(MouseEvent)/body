{
  if (!tweakSelectionEvent(e)) {
    return false;
  }
  int startSelectionOffset=getSelectionModel().getSelectionStart();
  int startVisLine=offsetToVisualLine(startSelectionOffset);
  int endSelectionOffset=getSelectionModel().getSelectionEnd();
  int endVisLine=offsetToVisualLine(endSelectionOffset - 1);
  int clickVisLine=xyToVisualPosition(e.getPoint()).line;
  if (clickVisLine < startVisLine) {
    int startOffset=logicalPositionToOffset(visualToLogicalPosition(new VisualPosition(clickVisLine,0)));
    getSelectionModel().setSelection(startOffset,endSelectionOffset);
    getCaretModel().moveToOffset(startOffset);
  }
 else   if (clickVisLine > endVisLine) {
    int endLineOffset=EditorUtil.getVisualLineEndOffset(this,clickVisLine);
    getSelectionModel().setSelection(getSelectionModel().getSelectionStart(),endLineOffset);
    getCaretModel().moveToOffset(endLineOffset,true);
  }
 else   if (startVisLine == endVisLine) {
    getSelectionModel().removeSelection();
  }
 else {
    if (getSelectionModel().getLeadSelectionOffset() == endSelectionOffset) {
      if (clickVisLine == startVisLine) {
        clickVisLine++;
      }
      int startOffset=logicalPositionToOffset(visualToLogicalPosition(new VisualPosition(clickVisLine,0)));
      getSelectionModel().setSelection(startOffset,endSelectionOffset);
      getCaretModel().moveToOffset(startOffset);
    }
 else {
      if (clickVisLine == endVisLine) {
        clickVisLine--;
      }
      int endLineOffset=EditorUtil.getVisualLineEndOffset(this,clickVisLine);
      getSelectionModel().setSelection(startSelectionOffset,endLineOffset);
      getCaretModel().moveToOffset(endLineOffset);
    }
  }
  e.consume();
  return true;
}
