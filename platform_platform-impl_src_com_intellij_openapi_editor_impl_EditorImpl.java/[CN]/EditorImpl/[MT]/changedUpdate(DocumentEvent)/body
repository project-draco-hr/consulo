{
  if (myScrollPane == null || myDocument.isInBulkUpdate())   return;
  stopOptimizedScrolling();
  mySelectionModel.removeBlockSelection();
  if (!mySoftWrapModel.isSoftWrappingEnabled()) {
    mySizeContainer.changedUpdate(e);
  }
  validateSize();
  int startLine=calcLogicalLineNumber(e.getOffset());
  int endLine=calcLogicalLineNumber(e.getOffset() + e.getNewLength());
  boolean painted=false;
  if (myDocument.getTextLength() > 0) {
    int startDocLine=myDocument.getLineNumber(e.getOffset());
    int endDocLine=myDocument.getLineNumber(e.getOffset() + e.getNewLength());
    if (e.getOldLength() > e.getNewLength() || startDocLine != endDocLine) {
      updateGutterSize();
    }
    if (countLineFeeds(e.getOldFragment()) != countLineFeeds(e.getNewFragment())) {
      repaintToScreenBottom(startLine);
      painted=true;
    }
  }
  updateCaretCursor();
  if (!painted) {
    repaintLines(startLine,endLine);
  }
  if (!myDocument.isInBulkUpdate()) {
    Point caretLocation=visualPositionToXY(getCaretModel().getVisualPosition());
    int scrollOffset=caretLocation.y - myCaretUpdateVShift;
    getScrollingModel().scrollVertically(scrollOffset);
  }
}
