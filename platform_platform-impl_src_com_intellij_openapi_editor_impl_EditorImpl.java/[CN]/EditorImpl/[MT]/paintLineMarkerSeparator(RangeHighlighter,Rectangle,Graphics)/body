{
  if (!marker.isValid()) {
    return;
  }
  Color separatorColor=marker.getLineSeparatorColor();
  if (separatorColor != null) {
    int lineNumber=marker.getLineSeparatorPlacement() == SeparatorPlacement.TOP ? marker.getDocument().getLineNumber(marker.getStartOffset()) : marker.getDocument().getLineNumber(marker.getEndOffset());
    if (lineNumber < 0 || lineNumber >= myDocument.getLineCount()) {
      return;
    }
    int y;
    SeparatorPlacement placement=marker.getLineSeparatorPlacement();
    if (placement == SeparatorPlacement.TOP) {
      y=visibleLineNumberToYPosition(logicalToVisualLine(lineNumber));
    }
 else {
      if (lineNumber + 1 >= myDocument.getLineCount()) {
        y=visibleLineNumberToYPosition(offsetToVisualLine(myDocument.getTextLength()));
      }
 else {
        y=logicalLineToY(lineNumber + 1);
      }
    }
    if (y < clip.y || y > clip.y + clip.height)     return;
    int endShift=clip.x + clip.width;
    g.setColor(separatorColor);
    if (mySettings.isRightMarginShown() && myScheme.getColor(EditorColors.RIGHT_MARGIN_COLOR) != null) {
      endShift=Math.min(endShift,mySettings.getRightMargin(myProject) * EditorUtil.getSpaceWidth(Font.PLAIN,this));
    }
    UIUtil.drawLine(g,0,y - 1,endShift,y - 1);
  }
}
