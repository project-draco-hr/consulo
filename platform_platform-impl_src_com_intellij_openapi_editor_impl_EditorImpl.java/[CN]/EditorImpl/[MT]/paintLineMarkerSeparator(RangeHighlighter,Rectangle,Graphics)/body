{
  Color separatorColor=marker.getLineSeparatorColor();
  if (separatorColor == null) {
    return;
  }
  int line=marker.getLineSeparatorPlacement() == SeparatorPlacement.TOP ? marker.getDocument().getLineNumber(marker.getStartOffset()) : marker.getDocument().getLineNumber(marker.getEndOffset());
  if (line < 0 || line >= myDocument.getLineCount()) {
    return;
  }
  int y;
  SeparatorPlacement placement=marker.getLineSeparatorPlacement();
  if (placement == SeparatorPlacement.TOP) {
    y=visibleLineToY(logicalToVisualLine(line));
  }
 else   if (line + 1 >= myDocument.getLineCount()) {
    y=visibleLineToY(offsetToVisualLine(myDocument.getTextLength()));
  }
 else {
    y=logicalLineToY(line + 1);
  }
  if (y < clip.y || y > clip.y + clip.height)   return;
  int endShift=clip.x + clip.width;
  g.setColor(separatorColor);
  if (mySettings.isRightMarginShown() && myScheme.getColor(EditorColors.RIGHT_MARGIN_COLOR) != null) {
    endShift=Math.min(endShift,mySettings.getRightMargin(myProject) * EditorUtil.getSpaceWidth(Font.PLAIN,this));
  }
  final LineSeparatorRenderer lineSeparatorRenderer=marker.getLineSeparatorRenderer();
  if (lineSeparatorRenderer != null) {
    lineSeparatorRenderer.drawLine(g,0,endShift,y - 1);
  }
 else {
    UIUtil.drawLine(g,0,y - 1,endShift,y - 1);
  }
}
