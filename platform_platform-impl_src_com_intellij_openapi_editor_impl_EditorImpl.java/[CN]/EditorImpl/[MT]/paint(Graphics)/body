{
  startOptimizedScrolling();
  if (myUpdateCursor) {
    setCursorPosition();
    myUpdateCursor=false;
  }
  Rectangle clip=g.getClipBounds();
  if (clip == null) {
    return;
  }
  Rectangle visibleArea=getScrollingModel().getVisibleArea();
  if (visibleArea == null) {
    return;
  }
  if (isReleased) {
    g.setColor(new Color(128,255,128));
    g.fillRect(clip.x,clip.y,clip.width,clip.height);
    return;
  }
  if (myProject != null && myProject.isDisposed())   return;
  VisualPosition clipStartVisualPos=xyToVisualPosition(new Point(0,clip.y));
  LogicalPosition clipStartPosition=visualToLogicalPosition(clipStartVisualPos);
  int clipStartOffset=logicalPositionToOffset(clipStartPosition);
  LogicalPosition clipEndPosition=xyToLogicalPosition(new Point(0,clip.y + clip.height + getLineHeight()));
  int clipEndOffset=logicalPositionToOffset(clipEndPosition);
  paintBackgrounds(g,clip,clipStartPosition,clipStartVisualPos,clipStartOffset,clipEndOffset);
  paintRectangularSelection(g);
  paintRightMargin(g,clip);
  paintCustomRenderers((Graphics2D)g,clipStartOffset,clipEndOffset);
  MarkupModelEx docMarkup=(MarkupModelEx)myDocument.getMarkupModel(myProject);
  paintLineMarkersSeparators(g,clip,docMarkup,clipStartOffset,clipEndOffset);
  paintLineMarkersSeparators(g,clip,myMarkupModel,clipStartOffset,clipEndOffset);
  paintText(g,clip,clipStartPosition,clipStartOffset,clipEndOffset);
  paintPlaceholderText(g,clip);
  paintSegmentHighlightersBorderAndAfterEndOfLine(g,clip,clipStartOffset,clipEndOffset,docMarkup);
  BorderEffect borderEffect=new BorderEffect(this,g,clipStartOffset,clipEndOffset);
  borderEffect.paintHighlighters(getHighlighter());
  borderEffect.paintHighlighters(docMarkup);
  borderEffect.paintHighlighters(myMarkupModel);
  paintCaretCursor(g);
  paintComposedTextDecoration((Graphics2D)g);
}
