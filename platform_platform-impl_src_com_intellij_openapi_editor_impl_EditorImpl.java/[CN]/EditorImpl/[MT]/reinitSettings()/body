{
  assertIsDispatchThread();
  myCharHeight=-1;
  myLineHeight=-1;
  myDescent=-1;
  myPlainFontMetrics=null;
  boolean softWrapsUsedBefore=mySoftWrapModel.isSoftWrappingEnabled();
  mySoftWrapModel.reinitSettings();
  myCaretModel.reinitSettings();
  mySelectionModel.reinitSettings();
  mySettings.reinitSettings();
  ourCaretBlinkingCommand.setBlinkCaret(mySettings.isBlinkCaret());
  ourCaretBlinkingCommand.setBlinkPeriod(mySettings.getCaretBlinkPeriod());
  mySizeContainer.reset();
  myFoldingModel.refreshSettings();
  myFoldingModel.rebuild();
  if (softWrapsUsedBefore ^ mySoftWrapModel.isSoftWrappingEnabled()) {
    mySizeContainer.reset();
    validateSize();
  }
  final EditorColorsScheme scheme=myScheme instanceof DelegateColorScheme ? ((DelegateColorScheme)myScheme).getDelegate() : myScheme;
  if (scheme instanceof MyColorSchemeDelegate) {
    ((MyColorSchemeDelegate)scheme).updateGlobalScheme();
  }
  myHighlighter.setColorScheme(myScheme);
  myGutterComponent.reinitSettings();
  myGutterComponent.revalidate();
  myEditorComponent.repaint();
  initTabPainter();
  updateCaretCursor();
  if (myInitialMouseEvent != null) {
    myIgnoreMouseEventsConsecutiveToInitial=true;
  }
  repaintToScreenBottom(getCaretModel().getLogicalPosition().line);
  int y=getCaretModel().getVisualLineStart() * getLineHeight();
  myGutterComponent.repaint(0,y,myGutterComponent.getWidth(),myGutterComponent.getHeight() - y);
  getCaretModel().moveToOffset(getCaretModel().getOffset());
}
