{
  assertReadAccess();
  if (!myFoldingModel.isFoldingEnabled() && !mySoftWrapModel.isSoftWrappingEnabled()) {
    return new LogicalPosition(visiblePos.line,visiblePos.column);
  }
  int line=visiblePos.line;
  int column=visiblePos.column;
  FoldRegion lastCollapsedBefore=getLastCollapsedBeforePosition(visiblePos);
  if (lastCollapsedBefore != null) {
    LogicalPosition softWrapAwareLogFoldEnd=offsetToLogicalPosition(lastCollapsedBefore.getEndOffset());
    VisualPosition softWrapAwareVisFoldEnd=logicalToVisualPosition(softWrapAwareLogFoldEnd);
    if (softWrapAwareVisFoldEnd.line == visiblePos.line) {
      if (visiblePos.column == softWrapAwareVisFoldEnd.column) {
        return softWrapAwareLogFoldEnd;
      }
 else       if (visiblePos.column > softWrapAwareVisFoldEnd.column) {
        int columnToUse=softWrapAwareLogFoldEnd.column + visiblePos.column - softWrapAwareVisFoldEnd.column;
        return new LogicalPosition(softWrapAwareLogFoldEnd.line,columnToUse,softWrapAwareLogFoldEnd.softWrapLinesBeforeCurrentLogicalLine,softWrapAwareLogFoldEnd.softWrapLinesOnCurrentLogicalLine,visiblePos.column - columnToUse - softWrapAwareLogFoldEnd.foldingColumnDiff,softWrapAwareLogFoldEnd.foldedLines,softWrapAwareLogFoldEnd.foldingColumnDiff);
      }
 else {
        return offsetToLogicalPosition(lastCollapsedBefore.getStartOffset());
      }
    }
    LogicalPosition softWrapUnawareLogFoldEnd=offsetToLogicalPosition(lastCollapsedBefore.getEndOffset(),false);
    VisualPosition softWrapUnawareVisFoldEnd=logicalToVisualPosition(softWrapUnawareLogFoldEnd,false);
    line=softWrapUnawareLogFoldEnd.line + (visiblePos.line - softWrapUnawareVisFoldEnd.line);
  }
  if (column < 0)   column=0;
  line=Math.min(line,myDocument.getLineCount() - 1);
  LogicalPosition softWrapUnawareResult=new LogicalPosition(line,column);
  return mySoftWrapModel.adjustLogicalPosition(softWrapUnawareResult,visiblePos);
}
