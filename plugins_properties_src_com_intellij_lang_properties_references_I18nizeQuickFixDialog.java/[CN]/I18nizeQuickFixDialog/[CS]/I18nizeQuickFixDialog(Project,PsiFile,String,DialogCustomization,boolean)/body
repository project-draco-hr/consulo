{
  super(false);
  myProject=project;
  myContext=context;
  myDefaultPropertyValue=defaultPropertyValue;
  myCustomization=customization != null ? customization : new DialogCustomization();
  setTitle(myCustomization.title != null ? myCustomization.title : CodeInsightBundle.message("i18nize.dialog.title"));
  myPropertiesFile=new TextFieldWithHistory();
  myPropertiesFile.setHistorySize(-1);
  myPropertiesFilePanel.add(GuiUtils.constructFieldWithBrowseButton(myPropertiesFile,new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      TreeClassChooserFactory chooserFactory=TreeClassChooserFactory.getInstance(myProject);
      TreeFileChooser fileChooser=chooserFactory.createFileChooser(CodeInsightBundle.message("i18nize.dialog.property.file.chooser.title"),getPropertiesFile(),StdFileTypes.PROPERTIES,null);
      fileChooser.showDialog();
      PsiFile selectedFile=fileChooser.getSelectedFile();
      if (selectedFile == null)       return;
      myPropertiesFile.setText(FileUtil.toSystemDependentName(selectedFile.getVirtualFile().getPath()));
    }
  }
),BorderLayout.CENTER);
  myPropertiesFile.addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    DocumentEvent e){
      propertiesFileChanged();
      somethingChanged();
    }
  }
);
  getKeyTextField().getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    DocumentEvent e){
      somethingChanged();
    }
  }
);
  myValue.getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    DocumentEvent e){
      somethingChanged();
    }
  }
);
  @NonNls final String KEY="I18NIZE_DIALOG_USE_RESOURCE_BUNDLE";
  final boolean useBundleByDefault=!PropertiesComponent.getInstance().isValueSet(KEY) || PropertiesComponent.getInstance().isTrueValue(KEY);
  myUseResourceBundle.setSelected(useBundleByDefault);
  myUseResourceBundle.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      PropertiesComponent.getInstance().setValue(KEY,Boolean.valueOf(myUseResourceBundle.isSelected()).toString());
    }
  }
);
  if (!ancestorResponsible)   init();
}
