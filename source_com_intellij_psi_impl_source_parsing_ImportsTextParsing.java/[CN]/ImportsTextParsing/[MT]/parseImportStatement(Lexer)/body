{
  if (lexer.getTokenType() != IMPORT_KEYWORD)   return null;
  final TreeElement importToken=ParseUtil.createTokenElement(lexer,myContext.getCharTable());
  lexer.advance();
  final CompositeElement statement;
  final boolean isStatic;
  if (lexer.getTokenType() != STATIC_KEYWORD) {
    statement=ASTFactory.composite(IMPORT_STATEMENT);
    statement.rawAddChildren(importToken);
    isStatic=false;
  }
 else {
    statement=ASTFactory.composite(IMPORT_STATIC_STATEMENT);
    statement.rawAddChildren(importToken);
    statement.rawAddChildren(ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
    lexer.advance();
    isStatic=true;
  }
  if (lexer.getTokenType() != IDENTIFIER) {
    statement.rawAddChildren(Factory.createErrorElement(JavaErrorMessages.message("expected.identifier")));
    return statement;
  }
  CompositeElement refElement=parseJavaCodeReference(lexer,true,false);
  final TreeElement refParameterList=refElement.getLastChildNode();
  if (refParameterList.getTreePrev().getElementType() == ERROR_ELEMENT) {
    final ASTNode qualifier=refElement.findChildByRole(ChildRole.QUALIFIER);
    LOG.assertTrue(qualifier != null);
    refParameterList.getTreePrev().rawRemove();
    refParameterList.rawRemove();
    statement.rawAddChildren((TreeElement)qualifier);
    if (lexer.getTokenType() == ASTERISK) {
      statement.rawAddChildren(ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
      lexer.advance();
    }
 else {
      statement.rawAddChildren(Factory.createErrorElement(JavaErrorMessages.message("import.statement.identifier.or.asterisk.expected.")));
      return statement;
    }
  }
 else {
    if (isStatic) {
      refElement=convertToImportStaticReference(refElement);
    }
    statement.rawAddChildren(refElement);
  }
  if (lexer.getTokenType() == SEMICOLON) {
    statement.rawAddChildren(ParseUtil.createTokenElement(lexer,myContext.getCharTable()));
    lexer.advance();
  }
 else {
    statement.rawAddChildren(Factory.createErrorElement(JavaErrorMessages.message("expected.semicolon")));
  }
  return statement;
}
