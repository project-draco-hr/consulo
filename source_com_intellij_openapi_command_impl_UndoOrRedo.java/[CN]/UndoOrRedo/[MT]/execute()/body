{
  if (containsAnotherChanges() || containsNonUndoableActions()) {
    reportCannotUndo();
    return;
  }
  if (myUndoableGroup.askConfirmation()) {
    if (canceledByUser()) {
      return;
    }
  }
 else {
    if (restore(getBeforeState())) {
      setBeforeState(new EditorAndState(myEditor,myEditor.getState(FileEditorStateLevel.UNDO)));
      return;
    }
  }
  Collection<VirtualFile> readOnlyFiles=collectReadOnlyAffectedFiles();
  if (!readOnlyFiles.isEmpty()) {
    final Project project=myManager.getProject();
    final VirtualFile[] files=readOnlyFiles.toArray(new VirtualFile[readOnlyFiles.size()]);
    if (project == null) {
      VirtualFileManager.getInstance().fireReadOnlyModificationAttempt(files);
      return;
    }
    final ReadonlyStatusHandler.OperationStatus operationStatus=ReadonlyStatusHandler.getInstance(project).ensureFilesWritable(files);
    if (operationStatus.hasReadonlyFiles())     return;
  }
  Collection<Document> readOnlyDocuments=collectReadOnlyDocuments();
  if (!readOnlyDocuments.isEmpty()) {
    for (Iterator<Document> iterator=readOnlyDocuments.iterator(); iterator.hasNext(); ) {
      Document document=iterator.next();
      document.fireReadOnlyModificationAttempt();
    }
    return;
  }
  removeLastFromMyStacks();
  addLastToReverseStacks();
  performAction();
  restore(getAfterState());
}
