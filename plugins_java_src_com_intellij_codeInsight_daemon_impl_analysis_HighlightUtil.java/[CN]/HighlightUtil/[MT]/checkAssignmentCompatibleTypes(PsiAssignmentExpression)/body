{
  PsiExpression lExpr=assignment.getLExpression();
  PsiExpression rExpr=assignment.getRExpression();
  if (rExpr == null)   return null;
  PsiType lType=lExpr.getType();
  PsiType rType=rExpr.getType();
  if (rType == null)   return null;
  final IElementType sign=assignment.getOperationTokenType();
  HighlightInfo highlightInfo;
  if (JavaTokenType.EQ.equals(sign)) {
    highlightInfo=checkAssignability(lType,rType,rExpr,assignment);
  }
 else {
    final IElementType opSign=TypeConversionUtil.convertEQtoOperation(sign);
    final PsiType type=TypeConversionUtil.calcTypeForBinaryExpression(lType,rType,opSign,true);
    if (type == null || lType == null || TypeConversionUtil.areTypesConvertible(type,lType)) {
      return null;
    }
    highlightInfo=createIncompatibleTypeHighlightInfo(lType,type,assignment.getTextRange(),0);
    QuickFixAction.registerQuickFixAction(highlightInfo,QUICK_FIX_FACTORY.createChangeToAppendFix(sign,lType,assignment));
  }
  if (highlightInfo == null) {
    return null;
  }
  registerChangeVariableTypeFixes(lExpr,rType,highlightInfo);
  if (lType != null) {
    registerChangeVariableTypeFixes(rExpr,lType,highlightInfo);
  }
  return highlightInfo;
}
