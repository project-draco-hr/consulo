{
  PsiClass referencedClass;
  @NonNls String resolvedName;
  PsiType type;
  if (expression instanceof PsiJavaCodeReferenceElement) {
    if (PsiKeyword.THIS.equals(((PsiJavaCodeReferenceElement)expression).getReferenceName()) && resolved instanceof PsiMethod && ((PsiMethod)resolved).isConstructor()) {
      return null;
    }
    PsiElement qualifier=((PsiJavaCodeReferenceElement)expression).getQualifier();
    type=qualifier instanceof PsiExpression ? ((PsiExpression)qualifier).getType() : null;
    referencedClass=PsiUtil.resolveClassInType(type);
    boolean isSuperCall=RefactoringChangeUtil.isSuperMethodCall(expression.getParent());
    if (resolved == null && isSuperCall) {
      if (qualifier instanceof PsiReferenceExpression) {
        resolved=((PsiReferenceExpression)qualifier).resolve();
        expression=qualifier;
        type=((PsiReferenceExpression)qualifier).getType();
        referencedClass=PsiUtil.resolveClassInType(type);
      }
 else       if (qualifier == null) {
        resolved=PsiTreeUtil.getParentOfType(expression,PsiMethod.class,true,PsiMember.class);
        if (resolved != null) {
          referencedClass=((PsiMethod)resolved).getContainingClass();
        }
      }
 else       if (qualifier instanceof PsiThisExpression) {
        referencedClass=PsiUtil.resolveClassInType(((PsiThisExpression)qualifier).getType());
      }
    }
    if (resolved instanceof PsiField) {
      PsiField referencedField=(PsiField)resolved;
      if (referencedField.hasModifierProperty(PsiModifier.STATIC))       return null;
      resolvedName=PsiFormatUtil.formatVariable(referencedField,PsiFormatUtilBase.SHOW_CONTAINING_CLASS | PsiFormatUtilBase.SHOW_NAME,PsiSubstitutor.EMPTY);
      referencedClass=referencedField.getContainingClass();
    }
 else     if (resolved instanceof PsiMethod) {
      PsiMethod method=(PsiMethod)resolved;
      if (method.hasModifierProperty(PsiModifier.STATIC))       return null;
      PsiElement nameElement=expression instanceof PsiThisExpression ? expression : ((PsiJavaCodeReferenceElement)expression).getReferenceNameElement();
      String name=nameElement == null ? null : nameElement.getText();
      if (isSuperCall) {
        if (referencedClass == null)         return null;
        if (qualifier == null) {
          PsiClass superClass=referencedClass.getSuperClass();
          if (superClass != null && PsiUtil.isInnerClass(superClass) && InheritanceUtil.isInheritorOrSelf(referencedClass,superClass.getContainingClass(),true)) {
            resolvedName=PsiKeyword.THIS;
          }
 else {
            return null;
          }
        }
 else {
          resolvedName=qualifier.getText();
        }
      }
 else       if (PsiKeyword.THIS.equals(name)) {
        resolvedName=PsiKeyword.THIS;
      }
 else {
        resolvedName=PsiFormatUtil.formatMethod(method,PsiSubstitutor.EMPTY,PsiFormatUtilBase.SHOW_CONTAINING_CLASS | PsiFormatUtilBase.SHOW_NAME,0);
        if (referencedClass == null)         referencedClass=method.getContainingClass();
      }
    }
 else     if (resolved instanceof PsiClass) {
      PsiClass aClass=(PsiClass)resolved;
      if (aClass.hasModifierProperty(PsiModifier.STATIC))       return null;
      referencedClass=aClass.getContainingClass();
      if (referencedClass == null)       return null;
      resolvedName=PsiFormatUtil.formatClass(aClass,PsiFormatUtilBase.SHOW_NAME);
    }
 else {
      return null;
    }
  }
 else   if (expression instanceof PsiThisExpression) {
    PsiThisExpression thisExpression=(PsiThisExpression)expression;
    type=thisExpression.getType();
    referencedClass=PsiUtil.resolveClassInType(type);
    if (thisExpression.getQualifier() != null) {
      resolvedName=referencedClass == null ? null : PsiFormatUtil.formatClass(referencedClass,PsiFormatUtilBase.SHOW_NAME) + ".this";
    }
 else {
      resolvedName="this";
    }
  }
 else {
    return null;
  }
  if (referencedClass == null)   return null;
  return checkReferenceToOurInstanceInsideThisOrSuper(expression,referencedClass,resolvedName,containingFile);
}
