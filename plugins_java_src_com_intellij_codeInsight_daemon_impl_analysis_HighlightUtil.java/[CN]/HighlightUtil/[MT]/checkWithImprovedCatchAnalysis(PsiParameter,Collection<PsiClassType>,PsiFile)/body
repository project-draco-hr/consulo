{
  final PsiElement scope=parameter.getDeclarationScope();
  if (!(scope instanceof PsiCatchSection))   return null;
  final PsiCatchSection catchSection=(PsiCatchSection)scope;
  final PsiCatchSection[] allCatchSections=catchSection.getTryStatement().getCatchSections();
  final int idx=ArrayUtilRt.find(allCatchSections,catchSection);
  if (idx <= 0)   return null;
  final Collection<PsiClassType> thrownTypes=ContainerUtil.newHashSet(thrownInTryStatement);
  final PsiManager manager=containingFile.getManager();
  final GlobalSearchScope parameterResolveScope=parameter.getResolveScope();
  thrownTypes.add(PsiType.getJavaLangError(manager,parameterResolveScope));
  thrownTypes.add(PsiType.getJavaLangRuntimeException(manager,parameterResolveScope));
  final Collection<HighlightInfo> result=ContainerUtil.newArrayList();
  final List<PsiTypeElement> parameterTypeElements=PsiUtil.getParameterTypeElements(parameter);
  final boolean isMultiCatch=parameterTypeElements.size() > 1;
  for (  PsiTypeElement catchTypeElement : parameterTypeElements) {
    final PsiType catchType=catchTypeElement.getType();
    if (ExceptionUtil.isGeneralExceptionType(catchType))     continue;
    Collection<PsiClassType> caught=ContainerUtil.findAll(thrownTypes,new Condition<PsiClassType>(){
      @Override public boolean value(      @NotNull PsiClassType type){
        return catchType.isAssignableFrom(type);
      }
    }
);
    if (caught.isEmpty())     continue;
    final Collection<PsiClassType> caughtCopy=ContainerUtil.newHashSet(caught);
    for (int i=0; i < idx; i++) {
      final PsiParameter prevCatchParameter=allCatchSections[i].getParameter();
      if (prevCatchParameter == null)       continue;
      for (      PsiTypeElement prevCatchTypeElement : PsiUtil.getParameterTypeElements(prevCatchParameter)) {
        final PsiType prevCatchType=prevCatchTypeElement.getType();
        for (Iterator<PsiClassType> iterator=caught.iterator(); iterator.hasNext(); ) {
          if (prevCatchType.isAssignableFrom(iterator.next()))           iterator.remove();
        }
        if (caught.isEmpty())         break;
      }
    }
    if (caught.isEmpty()) {
      final String message=JavaErrorMessages.message("exception.already.caught.warn",formatTypes(caughtCopy),caughtCopy.size());
      final HighlightInfo highlightInfo=HighlightInfo.newHighlightInfo(HighlightInfoType.WARNING).range(catchSection).descriptionAndTooltip(message).create();
      if (isMultiCatch) {
        QuickFixAction.registerQuickFixAction(highlightInfo,QUICK_FIX_FACTORY.createDeleteMultiCatchFix(catchTypeElement));
      }
 else {
        QuickFixAction.registerQuickFixAction(highlightInfo,QUICK_FIX_FACTORY.createDeleteCatchFix(parameter));
      }
      result.add(highlightInfo);
    }
  }
  return result;
}
