{
  PsiElement resolved=resolveResult.getElement();
  HighlightInfo highlightInfo=null;
  PsiElement refGrandParent=referenceList.getParent();
  if (resolved instanceof PsiClass) {
    PsiClass aClass=(PsiClass)resolved;
    if (refGrandParent instanceof PsiClass) {
      if (refGrandParent instanceof PsiTypeParameter) {
        highlightInfo=GenericsHighlightUtil.checkElementInTypeParameterExtendsList(referenceList,(PsiClass)refGrandParent,resolveResult,ref,languageLevel);
      }
 else {
        highlightInfo=HighlightClassUtil.checkExtendsClassAndImplementsInterface(referenceList,resolveResult,ref);
        if (highlightInfo == null) {
          highlightInfo=HighlightClassUtil.checkCannotInheritFromFinal(aClass,ref);
        }
        if (highlightInfo == null) {
          highlightInfo=GenericsHighlightUtil.checkCannotInheritFromEnum(aClass,ref);
        }
        if (highlightInfo == null) {
          highlightInfo=GenericsHighlightUtil.checkCannotInheritFromTypeParameter(aClass,ref);
        }
      }
    }
 else     if (refGrandParent instanceof PsiMethod && ((PsiMethod)refGrandParent).getThrowsList() == referenceList) {
      highlightInfo=checkMustBeThrowable(aClass,ref);
    }
  }
 else   if (refGrandParent instanceof PsiMethod && referenceList == ((PsiMethod)refGrandParent).getThrowsList()) {
    String description=JavaErrorMessages.message("class.name.expected");
    highlightInfo=HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(ref).descriptionAndTooltip(description).create();
  }
  return highlightInfo;
}
