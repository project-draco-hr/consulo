{
  if (errorResult == null)   return;
  PsiClass accessObjectClass=null;
  PsiElement qualifier=place.getQualifier();
  if (qualifier instanceof PsiExpression) {
    accessObjectClass=(PsiClass)PsiUtil.getAccessObjectClass((PsiExpression)qualifier).getElement();
  }
  ReplaceInaccessibleFieldWithGetterSetterFix.registerQuickFix(refElement,place,accessObjectClass,errorResult);
  if (refElement instanceof PsiCompiledElement)   return;
  PsiModifierList modifierList=refElement.getModifierList();
  if (modifierList == null)   return;
  PsiClass packageLocalClassInTheMiddle=getPackageLocalClassInTheMiddle(place);
  if (packageLocalClassInTheMiddle != null) {
    IntentionAction fix=QUICK_FIX_FACTORY.createModifierListFix(packageLocalClassInTheMiddle,PsiModifier.PUBLIC,true,true);
    QuickFixAction.registerQuickFixAction(errorResult,fix);
    return;
  }
  try {
    Project project=refElement.getProject();
    JavaPsiFacade facade=JavaPsiFacade.getInstance(project);
    PsiModifierList modifierListCopy=facade.getElementFactory().createFieldFromText("int a;",null).getModifierList();
    modifierListCopy.setModifierProperty(PsiModifier.STATIC,modifierList.hasModifierProperty(PsiModifier.STATIC));
    String minModifier=PsiModifier.PACKAGE_LOCAL;
    if (refElement.hasModifierProperty(PsiModifier.PACKAGE_LOCAL)) {
      minModifier=PsiModifier.PROTECTED;
    }
    if (refElement.hasModifierProperty(PsiModifier.PROTECTED)) {
      minModifier=PsiModifier.PUBLIC;
    }
    String[] modifiers={PsiModifier.PACKAGE_LOCAL,PsiModifier.PROTECTED,PsiModifier.PUBLIC};
    for (int i=ArrayUtil.indexOf(modifiers,minModifier); i < modifiers.length; i++) {
      @PsiModifier.ModifierConstant String modifier=modifiers[i];
      modifierListCopy.setModifierProperty(modifier,true);
      if (facade.getResolveHelper().isAccessible(refElement,modifierListCopy,place,accessObjectClass,fileResolveScope)) {
        IntentionAction fix=QUICK_FIX_FACTORY.createModifierListFix(refElement,modifier,true,true);
        TextRange fixRange=new TextRange(errorResult.startOffset,errorResult.endOffset);
        PsiElement ref=place.getReferenceNameElement();
        if (ref != null) {
          fixRange=fixRange.union(ref.getTextRange());
        }
        QuickFixAction.registerQuickFixAction(errorResult,fixRange,fix);
      }
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
