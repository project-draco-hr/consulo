{
  PsiJavaToken operationSign=assignment.getOperationSign();
  IElementType eqOpSign=operationSign.getTokenType();
  IElementType opSign=TypeConversionUtil.convertEQtoOperation(eqOpSign);
  if (opSign == null)   return null;
  final PsiType lType=assignment.getLExpression().getType();
  final PsiExpression rExpression=assignment.getRExpression();
  if (rExpression == null)   return null;
  final PsiType rType=rExpression.getType();
  HighlightInfo errorResult=null;
  if (!TypeConversionUtil.isBinaryOperatorApplicable(opSign,lType,rType,true) || PsiType.getJavaLangObject(containingFile.getManager(),assignment.getResolveScope()).equals(lType)) {
    String operatorText=operationSign.getText().substring(0,operationSign.getText().length() - 1);
    String message=JavaErrorMessages.message("binary.operator.not.applicable",operatorText,JavaHighlightUtil.formatType(lType),JavaHighlightUtil.formatType(rType));
    errorResult=HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(assignment).descriptionAndTooltip(message).create();
  }
  return errorResult;
}
