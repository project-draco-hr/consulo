{
  final PsiExpression expression=statement.getExpression();
  PsiType type=expression == null ? null : expression.getType();
  if (type == null) {
    return null;
  }
  HighlightInfo errorResult=null;
  if (!isValidTypeForSwitchSelector(type,PsiUtil.isLanguageLevel7OrHigher(expression))) {
    String message=JavaErrorMessages.message("incompatible.types",JavaErrorMessages.message("valid.switch.selector.types"),JavaHighlightUtil.formatType(type));
    errorResult=HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(expression).descriptionAndTooltip(message).create();
    QuickFixAction.registerQuickFixAction(errorResult,QUICK_FIX_FACTORY.createConvertSwitchToIfIntention(statement));
    if (PsiType.LONG.equals(type) || PsiType.FLOAT.equals(type) || PsiType.DOUBLE.equals(type)) {
      QuickFixAction.registerQuickFixAction(errorResult,QUICK_FIX_FACTORY.createAddTypeCastFix(PsiType.INT,expression));
    }
  }
 else {
    final PsiClass member=PsiUtil.resolveClassInClassTypeOnly(type);
    if (member != null && !PsiUtil.isAccessible(member.getProject(),member,expression,null)) {
      String message=PsiFormatUtil.formatClass(member,PsiFormatUtilBase.SHOW_NAME | PsiFormatUtilBase.SHOW_FQ_NAME) + " is inaccessible here";
      errorResult=HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(expression).descriptionAndTooltip(message).create();
    }
  }
  return errorResult;
}
