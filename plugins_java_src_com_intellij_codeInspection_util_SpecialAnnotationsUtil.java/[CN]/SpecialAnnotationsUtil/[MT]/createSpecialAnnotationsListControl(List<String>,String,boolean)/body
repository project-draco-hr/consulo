{
  final SortedListModel<String> listModel=new SortedListModel<String>(new Comparator<String>(){
    @Override public int compare(    final String o1,    final String o2){
      return o1.compareTo(o2);
    }
  }
);
  final JList injectionList=new JBList(listModel);
  for (  String s : list) {
    listModel.add(s);
  }
  injectionList.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
  injectionList.getModel().addListDataListener(new ListDataListener(){
    @Override public void intervalAdded(    ListDataEvent e){
      listChanged();
    }
    private void listChanged(){
      list.clear();
      for (int i=0; i < listModel.getSize(); i++) {
        list.add((String)listModel.getElementAt(i));
      }
    }
    @Override public void intervalRemoved(    ListDataEvent e){
      listChanged();
    }
    @Override public void contentsChanged(    ListDataEvent e){
      listChanged();
    }
  }
);
  ToolbarDecorator toolbarDecorator=ToolbarDecorator.createDecorator(injectionList).setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      Project project=CommonDataKeys.PROJECT.getData(DataManager.getInstance().getDataContext(injectionList));
      if (project == null)       project=ProjectManager.getInstance().getDefaultProject();
      TreeClassChooser chooser=TreeClassChooserFactory.getInstance(project).createWithInnerClassesScopeChooser(InspectionsBundle.message("special.annotations.list.annotation.class"),GlobalSearchScope.allScope(project),new ClassFilter(){
        @Override public boolean isAccepted(        PsiClass aClass){
          return aClass.isAnnotationType();
        }
      }
,null);
      chooser.showDialog();
      final PsiClass selected=chooser.getSelected();
      if (selected != null) {
        listModel.add(selected.getQualifiedName());
      }
    }
  }
).setAddActionName(InspectionsBundle.message("special.annotations.list.add.annotation.class")).disableUpDownActions();
  if (acceptPatterns) {
    toolbarDecorator.setAddIcon(IconUtil.getAddClassIcon()).addExtraAction(new AnActionButton(InspectionsBundle.message("special.annotations.list.annotation.pattern"),IconUtil.getAddPatternIcon()){
      @Override public void actionPerformed(      AnActionEvent e){
        String selectedPattern=Messages.showInputDialog(InspectionsBundle.message("special.annotations.list.annotation.pattern"),InspectionsBundle.message("special.annotations.list.annotation.pattern"),Messages.getQuestionIcon());
        if (selectedPattern != null) {
          listModel.add(selectedPattern);
        }
      }
    }
).setButtonComparator(InspectionsBundle.message("special.annotations.list.add.annotation.class"),InspectionsBundle.message("special.annotations.list.annotation.pattern"),"Remove");
  }
  JPanel panel=new JPanel(new BorderLayout());
  panel.add(SeparatorFactory.createSeparator(borderTitle,null),BorderLayout.NORTH);
  panel.add(toolbarDecorator.createPanel(),BorderLayout.CENTER);
  return panel;
}
