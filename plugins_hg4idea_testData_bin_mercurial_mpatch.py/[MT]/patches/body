def patches(a, bins):
    if (not bins):
        return a
    plens = [len(x) for x in bins]
    pl = sum(plens)
    bl = (len(a) + pl)
    tl = ((bl + bl) + pl)
    (b1, b2) = (0, bl)
    if (not tl):
        return a
    m = StringIO()

    def move(dest, src, count):
        'move count bytes from src to dest\n\n        The file pointer is left at the end of dest.\n        '
        m.seek(src)
        buf = m.read(count)
        m.seek(dest)
        m.write(buf)
    m.write(a)
    frags = [(len(a), b1)]
    pos = (b2 + bl)
    m.seek(pos)
    for p in bins:
        m.write(p)

    def pull(dst, src, l):
        while l:
            f = src.pop(0)
            if (f[0] > l):
                src.insert(0, ((f[0] - l), (f[1] + l)))
                dst.append((l, f[1]))
                return
            dst.append(f)
            l -= f[0]

    def collect(buf, list):
        start = buf
        for (l, p) in list:
            move(buf, p, l)
            buf += l
        return ((buf - start), start)
    for plen in plens:
        if (len(frags) > 128):
            (b2, b1) = (b1, b2)
            frags = [collect(b1, frags)]
        new = []
        end = (pos + plen)
        last = 0
        while (pos < end):
            m.seek(pos)
            (p1, p2, l) = struct.unpack('>lll', m.read(12))
            pull(new, frags, (p1 - last))
            pull([], frags, (p2 - p1))
            new.append((l, (pos + 12)))
            pos += (l + 12)
            last = p2
        frags = (new + frags)
    t = collect(b2, frags)
    m.seek(t[1])
    return m.read(t[0])
