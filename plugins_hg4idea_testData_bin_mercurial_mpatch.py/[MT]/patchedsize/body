def patchedsize(orig, delta):
    (outlen, last, bin) = (0, 0, 0)
    binend = len(delta)
    data = 12
    while (data <= binend):
        decode = delta[bin:(bin + 12)]
        (start, end, length) = struct.unpack('>lll', decode)
        if (start > end):
            break
        bin = (data + length)
        data = (bin + 12)
        outlen += (start - last)
        last = end
        outlen += length
    if (bin != binend):
        raise Exception('patch cannot be decoded')
    outlen += (orig - last)
    return outlen
