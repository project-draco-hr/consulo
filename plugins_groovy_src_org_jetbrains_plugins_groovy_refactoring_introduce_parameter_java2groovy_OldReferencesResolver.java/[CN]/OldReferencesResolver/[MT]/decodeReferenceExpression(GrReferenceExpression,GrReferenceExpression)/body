{
  PsiManager manager=refExpr.getManager();
  GroovyPsiElementFactory factory=GroovyPsiElementFactory.getInstance(manager.getProject());
  GrExpression qualifier=refExpr.getQualifier();
  if (qualifier == null) {
    PsiMember refMember=refExpr.getCopyableUserData(REF_MEMBER_KEY);
    refExpr.putCopyableUserData(REF_MEMBER_KEY,null);
    if (refMember != null && refMember.isValid()) {
      PsiClass containingClass=refMember.getContainingClass();
      if (refMember.hasModifierProperty(PsiModifier.STATIC)) {
        PsiElement refElement=newExpr.resolve();
        if (!manager.areElementsEquivalent(refMember,refElement)) {
          newExpr.setQualifier(factory.createReferenceExpressionFromText("" + containingClass.getQualifiedName()));
        }
      }
    }
 else {
      PsiClass refClass=refExpr.getCopyableUserData(REF_CLASS_KEY);
      refExpr.putCopyableUserData(REF_CLASS_KEY,null);
      if (refClass != null && refClass.isValid()) {
        newExpr=(GrReferenceExpression)newExpr.bindToElement(refClass);
      }
    }
  }
 else {
    Boolean couldRemove=refExpr.getCopyableUserData(CAN_REMOVE_QUALIFIER_KEY);
    refExpr.putCopyableUserData(CAN_REMOVE_QUALIFIER_KEY,null);
    if (couldRemove == Boolean.FALSE && canRemoveQualifier(refExpr)) {
      GrReferenceExpression newRefExpr=(GrReferenceExpression)factory.createExpressionFromText(refExpr.getReferenceName());
      newExpr=(GrReferenceExpression)newExpr.replace(newRefExpr);
    }
  }
  return newExpr;
}
