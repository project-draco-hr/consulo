{
  final String testName=getTestName(false);
  configureByFile("/refactoring/extractMethodObject/" + testName + ".java");
  PsiElement element=TargetElementUtilBase.findTargetElement(myEditor,TargetElementUtilBase.ELEMENT_NAME_ACCEPTED);
  assertTrue(element instanceof PsiMethod);
  final PsiMethod method=(PsiMethod)element;
  new WriteCommandAction.Simple(getProject()){
    @Override protected void run() throws Throwable {
      final ExtractMethodObjectProcessor processor=new ExtractMethodObjectProcessor(getProject(),getEditor(),method.getBody().getStatements(),"InnerClass");
      final ExtractMethodObjectProcessor.MyExtractMethodProcessor extractProcessor=processor.getExtractProcessor();
      extractProcessor.setShowErrorDialogs(false);
      extractProcessor.prepare();
      extractProcessor.testRun();
      processor.setCreateInnerClass(createInnerClass);
      processor.run();
      if (createInnerClass) {
        processor.moveUsedMethodsToInner();
      }
      DuplicatesImpl.processDuplicates(extractProcessor,getProject(),getEditor());
      PsiDocumentManager.getInstance(getProject()).commitAllDocuments();
      processor.getMethod().delete();
    }
  }
.execute().throwException();
  checkResultByFile("/refactoring/extractMethodObject/" + testName + ".java"+ ".after");
}
