{
  return new PsiPolyVariantCachingReference(){
    @NotNull public JavaResolveResult[] resolveInner(    boolean incompleteCode){
      ASTNode classRef=findChildByRole(ChildRole.TYPE_REFERENCE);
      if (classRef != null) {
        ASTNode argumentList=TreeUtil.skipElements(classRef.getTreeNext(),StdTokenSets.WHITE_SPACE_OR_COMMENT_BIT_SET);
        if (argumentList != null && argumentList.getElementType() == JavaElementType.EXPRESSION_LIST) {
          final JavaPsiFacade facade=JavaPsiFacade.getInstance(getProject());
          PsiType aClass=facade.getElementFactory().createType((PsiJavaCodeReferenceElement)SourceTreeToPsiMap.treeElementToPsi(classRef));
          return facade.getResolveHelper().multiResolveConstructor((PsiClassType)aClass,(PsiExpressionList)SourceTreeToPsiMap.treeElementToPsi(argumentList),PsiNewExpressionImpl.this);
        }
      }
 else {
        ASTNode anonymousClassElement=findChildByType(JavaElementType.ANONYMOUS_CLASS);
        if (anonymousClassElement != null) {
          final JavaPsiFacade facade=JavaPsiFacade.getInstance(getProject());
          final PsiAnonymousClass anonymousClass=(PsiAnonymousClass)SourceTreeToPsiMap.treeElementToPsi(anonymousClassElement);
          PsiType aClass=anonymousClass.getBaseClassType();
          ASTNode argumentList=anonymousClassElement.findChildByType(JavaElementType.EXPRESSION_LIST);
          return facade.getResolveHelper().multiResolveConstructor((PsiClassType)aClass,(PsiExpressionList)SourceTreeToPsiMap.treeElementToPsi(argumentList),anonymousClass);
        }
      }
      return JavaResolveResult.EMPTY_ARRAY;
    }
    public PsiElement getElement(){
      return PsiNewExpressionImpl.this;
    }
    public TextRange getRangeInElement(){
      return null;
    }
    @NotNull public String getCanonicalText(){
      return null;
    }
    public PsiElement handleElementRename(    String newElementName){
      return null;
    }
    public PsiElement bindToElement(    @NotNull PsiElement element){
      return null;
    }
    @NotNull public Object[] getVariants(){
      return ArrayUtil.EMPTY_OBJECT_ARRAY;
    }
    @Override public int hashCode(){
      PsiJavaCodeReferenceElement ref=getClassOrAnonymousClassReference();
      return ref == null ? 0 : ref.hashCode();
    }
    @Override public boolean equals(    Object obj){
      return obj instanceof PsiPolyVariantCachingReference && getElement() == ((PsiReference)obj).getElement();
    }
  }
;
}
