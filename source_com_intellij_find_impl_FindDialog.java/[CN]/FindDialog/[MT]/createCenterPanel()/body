{
  JPanel optionsPanel=new JPanel();
  optionsPanel.setLayout(new GridBagLayout());
  GridBagConstraints gbConstraints=new GridBagConstraints();
  gbConstraints.weightx=1;
  gbConstraints.weighty=1;
  gbConstraints.fill=GridBagConstraints.BOTH;
  gbConstraints.gridwidth=GridBagConstraints.REMAINDER;
  JPanel topOptionsPanel=new JPanel();
  topOptionsPanel.setLayout(new GridLayout(1,2,8,0));
  optionsPanel.add(topOptionsPanel,gbConstraints);
  topOptionsPanel.add(createFindOptionsPanel());
  if (!myModel.isMultipleFiles()) {
    topOptionsPanel.add(createDirectionPanel());
    gbConstraints.gridwidth=GridBagConstraints.RELATIVE;
    JPanel bottomOptionsPanel=new JPanel();
    bottomOptionsPanel.setLayout(new GridLayout(1,2,8,0));
    optionsPanel.add(bottomOptionsPanel,gbConstraints);
    bottomOptionsPanel.add(createScopePanel());
    bottomOptionsPanel.add(createOriginPanel());
  }
 else {
    optionsPanel.add(createGlobalScopePanel(),gbConstraints);
    gbConstraints.weightx=1;
    gbConstraints.weighty=1;
    gbConstraints.fill=GridBagConstraints.BOTH;
    gbConstraints.gridwidth=GridBagConstraints.REMAINDER;
    optionsPanel.add(createFilterPanel(),gbConstraints);
    if (!myModel.isReplaceState()) {
      myCbToSkipResultsWhenOneUsage=new StateRestoringCheckBox(FindBundle.message("find.options.skip.results.tab.with.one.usage.checkbox"),FindSettings.getInstance().isSkipResultsWithOneUsage());
      optionsPanel.add(myCbToSkipResultsWhenOneUsage,gbConstraints);
    }
  }
  if (myModel.isOpenInNewTabVisible()) {
    JPanel openInNewTabWindowPanel=new JPanel(new BorderLayout());
    myCbToOpenInNewTab=new JCheckBox(FindBundle.message("find.open.in.new.tab.checkbox"));
    myCbToOpenInNewTab.setFocusable(false);
    myCbToOpenInNewTab.setSelected(myModel.isOpenInNewTab());
    myCbToOpenInNewTab.setEnabled(myModel.isOpenInNewTabEnabled());
    openInNewTabWindowPanel.add(myCbToOpenInNewTab,BorderLayout.EAST);
    optionsPanel.add(openInNewTabWindowPanel,gbConstraints);
  }
  return optionsPanel;
}
