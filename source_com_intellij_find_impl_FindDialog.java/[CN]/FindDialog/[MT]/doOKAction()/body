{
  FindModel validateModel=(FindModel)myModel.clone();
  doApply(validateModel);
  if (!validateModel.isProjectScope() && myDirectoryComboBox != null && validateModel.getModuleName() == null) {
    PsiDirectory directory=FindInProjectUtil.getPsiDirectory(validateModel,myProject);
    if (directory == null) {
      Messages.showMessageDialog(myProject,"Directory " + validateModel.getDirectoryName() + " is not found","Error",Messages.getErrorIcon());
      return;
    }
  }
  if (validateModel.isRegularExpressions()) {
    String toFind=validateModel.getStringToFind();
    try {
      if (validateModel.isCaseSensitive()) {
        Pattern.compile(toFind,Pattern.MULTILINE);
      }
 else {
        Pattern.compile(toFind,Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);
      }
    }
 catch (    PatternSyntaxException e) {
      Messages.showMessageDialog(myProject,"Bad pattern \"" + toFind + "\"","Information",Messages.getErrorIcon());
      return;
    }
  }
  myModel.setFileFilter(null);
  if (useFileFilter != null && useFileFilter.isSelected() && myFileFilter.getSelectedItem() != null) {
    final String mask=(String)myFileFilter.getSelectedItem();
    if (mask.length() > 0) {
      try {
        Pattern.compile(PatternUtil.convertToRegex(mask));
        myModel.setFileFilter(mask);
      }
 catch (      PatternSyntaxException ex) {
        Messages.showMessageDialog(myProject,"Bad file mask \"" + myFileFilter.getSelectedItem() + "\"","Information",Messages.getErrorIcon());
        return;
      }
    }
 else {
      Messages.showMessageDialog(myProject,"Empty file mask","Information",Messages.getErrorIcon());
      return;
    }
  }
  super.doOKAction();
}
