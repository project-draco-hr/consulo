{
  FindModel validateModel=(FindModel)myModel.clone();
  doApply(validateModel);
  myModel.setFindAll(findAll);
  if (!validateModel.isProjectScope() && myDirectoryComboBox != null && validateModel.getModuleName() == null) {
    PsiDirectory directory=FindInProjectUtil.getPsiDirectory(validateModel,myProject);
    if (directory == null) {
      Messages.showMessageDialog(myProject,FindBundle.message("find.directory.not.found.error",validateModel.getDirectoryName()),CommonBundle.getErrorTitle(),Messages.getErrorIcon());
      return;
    }
  }
  if (validateModel.isRegularExpressions()) {
    String toFind=validateModel.getStringToFind();
    try {
      if (validateModel.isCaseSensitive()) {
        Pattern.compile(toFind,Pattern.MULTILINE);
      }
 else {
        Pattern.compile(toFind,Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);
      }
    }
 catch (    PatternSyntaxException e) {
      Messages.showMessageDialog(myProject,FindBundle.message("find.invalid.regular.expression.error",toFind),CommonBundle.getErrorTitle(),Messages.getErrorIcon());
      return;
    }
  }
  myModel.setFileFilter(null);
  if (useFileFilter != null && useFileFilter.isSelected() && myFileFilter.getSelectedItem() != null) {
    final String mask=(String)myFileFilter.getSelectedItem();
    if (mask.length() > 0) {
      try {
        Pattern.compile(PatternUtil.convertToRegex(mask));
        myModel.setFileFilter(mask);
      }
 catch (      PatternSyntaxException ex) {
        Messages.showMessageDialog(myProject,FindBundle.message("find.filter.invalid.file.mask.error",myFileFilter.getSelectedItem()),CommonBundle.getErrorTitle(),Messages.getErrorIcon());
        return;
      }
    }
 else {
      Messages.showMessageDialog(myProject,FindBundle.message("find.filter.empty.file.mask.error"),CommonBundle.getErrorTitle(),Messages.getErrorIcon());
      return;
    }
  }
  if (myCbToSkipResultsWhenOneUsage != null) {
    FindSettings.getInstance().setSkipResultsWithOneUsage(isSkipResultsWhenOneUsage());
  }
  super.doOKAction();
}
