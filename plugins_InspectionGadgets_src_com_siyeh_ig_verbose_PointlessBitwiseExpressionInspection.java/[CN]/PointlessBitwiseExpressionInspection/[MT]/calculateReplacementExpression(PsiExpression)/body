{
  final PsiBinaryExpression exp=(PsiBinaryExpression)expression;
  final PsiExpression lhs=exp.getLOperand();
  final PsiExpression rhs=exp.getROperand();
  final PsiJavaToken sign=exp.getOperationSign();
  final IElementType tokenType=sign.getTokenType();
  final PsiType expressionType=exp.getType();
  if (tokenType.equals(JavaTokenType.AND)) {
    if (isZero(lhs,expressionType) || isAllOnes(rhs,expressionType)) {
      return lhs.getText();
    }
 else {
      return rhs.getText();
    }
  }
 else   if (tokenType.equals(JavaTokenType.OR)) {
    if (isZero(lhs,expressionType) || isAllOnes(rhs,expressionType)) {
      return rhs.getText();
    }
 else {
      return lhs.getText();
    }
  }
 else   if (tokenType.equals(JavaTokenType.XOR)) {
    if (isAllOnes(lhs,expressionType)) {
      return '~' + rhs.getText();
    }
 else     if (isAllOnes(rhs,expressionType)) {
      return '~' + lhs.getText();
    }
 else     if (isZero(rhs,expressionType)) {
      return lhs.getText();
    }
 else {
      return rhs.getText();
    }
  }
 else   if (tokenType.equals(JavaTokenType.LTLT) || tokenType.equals(JavaTokenType.GTGT) || tokenType.equals(JavaTokenType.GTGTGT)) {
    return lhs.getText();
  }
 else {
    return "";
  }
}
