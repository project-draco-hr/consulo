{
  super.visitBinaryExpression(expression);
  final PsiType expressionType=expression.getType();
  if (expressionType == null) {
    return;
  }
  final PsiJavaToken sign=expression.getOperationSign();
  if (sign == null) {
    return;
  }
  final PsiExpression rhs=expression.getROperand();
  if (rhs == null) {
    return;
  }
  final PsiType rhsType=rhs.getType();
  if (rhsType == null) {
    return;
  }
  if (rhsType.equals(PsiType.BOOLEAN) || "java.lang.Boolean".equals(rhsType.getCanonicalText())) {
    return;
  }
  final PsiExpression lhs=expression.getLOperand();
  if (lhs == null) {
    return;
  }
  final PsiType lhsType=lhs.getType();
  if (lhsType == null) {
    return;
  }
  if (lhsType.equals(PsiType.BOOLEAN) || "java.lang.Boolean".equals(lhsType.getCanonicalText())) {
    return;
  }
  final IElementType tokenType=sign.getTokenType();
  final boolean isPointless;
  if (tokenType.equals(JavaTokenType.AND)) {
    isPointless=andExpressionIsPointless(lhs,rhs,expressionType);
  }
 else   if (tokenType.equals(JavaTokenType.OR)) {
    isPointless=orExpressionIsPointless(lhs,rhs,expressionType);
  }
 else   if (tokenType.equals(JavaTokenType.XOR)) {
    isPointless=xorExpressionIsPointless(lhs,rhs,expressionType);
  }
 else   if (tokenType.equals(JavaTokenType.LTLT) || tokenType.equals(JavaTokenType.GTGT) || tokenType.equals(JavaTokenType.GTGTGT)) {
    isPointless=shiftExpressionIsPointless(rhs,expressionType);
  }
 else {
    isPointless=false;
  }
  if (!isPointless) {
    return;
  }
  registerError(expression);
}
