{
  PsiDocumentManager.getInstance(myProject).commitAllDocuments();
  final Ref<UsageInfo[]> refUsages=new Ref<UsageInfo[]>();
  final Runnable findUsagesRunnable=new Runnable(){
    public void run(){
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        public void run(){
          refUsages.set(findUsages());
        }
      }
);
    }
  }
;
  if (!ProgressManager.getInstance().runProcessWithProgressSynchronously(findUsagesRunnable,RefactoringBundle.message("progress.text"),true,myProject))   return;
  LOG.assertTrue(!refUsages.isNull());
  if (!preprocessUsages(refUsages))   return;
  final UsageInfo[] usages=refUsages.get();
  UsageViewDescriptor descriptor=createUsageViewDescriptor(usages);
  if (!myIsPreviewUsages && !ensureFilesWritable(usages,descriptor))   return;
  if (isPreviewUsages(usages)) {
    final PsiElement[] elements=descriptor.getElements();
    final PsiElement2UsageTargetAdapter[] targets=PsiElement2UsageTargetAdapter.convert(elements);
    Factory<UsageSearcher> factory=new Factory<UsageSearcher>(){
      public UsageSearcher create(){
        return new UsageSearcher(){
          public void generate(          final Processor<Usage> processor){
            for (int i=0; i < elements.length; i++) {
              elements[i]=targets[i].getElement();
            }
            refreshElements(elements);
            findUsagesRunnable.run();
            final Usage[] usages=UsageInfo2UsageAdapter.convert(refUsages.get());
            for (            Usage usage : usages) {
              processor.process(usage);
            }
          }
        }
;
      }
    }
;
    showUsageView(descriptor,factory,usages);
  }
 else {
    execute(usages);
  }
}
