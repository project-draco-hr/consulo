{
  ApplicationManager.getApplication().assertWriteAccessAllowed();
  for (Iterator<UsageInfo> iterator=usageInfoSet.iterator(); iterator.hasNext(); ) {
    UsageInfo usageInfo=iterator.next();
    final PsiElement element=usageInfo.getElement();
    if (element == null || !element.isWritable()) {
      iterator.remove();
    }
  }
  LocalHistoryAction action=LocalHistory.startAction(myProject,getCommandName());
  final UsageInfo[] writableUsageInfos=usageInfoSet.toArray(new UsageInfo[usageInfoSet.size()]);
  try {
    PsiDocumentManager.getInstance(myProject).commitAllDocuments();
    RefactoringListenerManagerImpl listenerManager=(RefactoringListenerManagerImpl)RefactoringListenerManager.getInstance(myProject);
    myTransaction=listenerManager.startTransaction();
    Set<PsiJavaFile> touchedJavaFiles=getTouchedJavaFiles(writableUsageInfos);
    performRefactoring(writableUsageInfos);
    removeRedundantImports(touchedJavaFiles);
    myTransaction.commit();
    performPsiSpoilingRefactoring();
  }
  finally {
    action.finish();
  }
  int count=writableUsageInfos.length;
  if (count > 0) {
    WindowManager.getInstance().getStatusBar(myProject).setInfo(RefactoringBundle.message("statusBar.refactoring.result",count));
  }
 else {
    if (!isPreviewUsages(writableUsageInfos)) {
      WindowManager.getInstance().getStatusBar(myProject).setInfo(RefactoringBundle.message("statusBar.noUsages"));
    }
  }
}
