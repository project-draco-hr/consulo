{
  if (preprocessing)   return;
  final String artifactName=artifact.getName();
  String tempPathToFileSet=BuildProperties.propertyRef("artifact.temp.output." + artifactName);
  final List<PackagingElement<?>> children=artifact.getRootElement().getChildren();
  final PackagingElementResolvingContext resolvingContext=ArtifactManager.getInstance(context.getProject()).getResolvingContext();
  for (  Generator childGenerator : computeChildrenGenerators(resolvingContext,new DirectoryAntCopyInstructionCreator(tempPathToFileSet),context,artifact.getArtifactType(),children)) {
    generator.add(childGenerator);
  }
  final Sdk[] jdks=BuildProperties.getUsedJdks(context.getProject());
  Sdk javaSdk=null;
  for (  Sdk jdk : jdks) {
    if (jdk.getSdkType() instanceof JavaSdkType) {
      javaSdk=jdk;
      break;
    }
  }
  final String artifactFileName=artifactName + ".jar";
  if (javaSdk != null) {
    final Tag taskdef=new Tag("taskdef",new Pair<String,String>("resource","com/sun/javafx/tools/ant/antlib.xml"),new Pair<String,String>("uri","javafx:com.sun.javafx.tools.ant"),new Pair<String,String>("classpath",BuildProperties.propertyRef(BuildProperties.getJdkHomeProperty(javaSdk.getName())) + "/lib/ant-javafx.jar"));
    generator.add(taskdef);
    final JavaFxArtifactProperties properties=(JavaFxArtifactProperties)artifact.getProperties(JavaFxArtifactPropertiesProvider.getInstance());
    final String appId=artifactName + "_id";
    final Tag applicationTag=new Tag("fx:application",new Pair<String,String>("id",appId),new Pair<String,String>("name",artifactName),new Pair<String,String>("mainClass",properties.getAppClass()));
    generator.add(applicationTag);
    final Tag createJarTag=new Tag("fx:jar",new Pair<String,String>("destfile",tempPathToFileSet + "/" + artifactFileName));
    createJarTag.add(new Tag("fx:application",new Pair<String,String>("refid",appId)));
    createJarTag.add(new Tag("fileset",new Pair<String,String>("dir",tempPathToFileSet)));
    generator.add(createJarTag);
    final Tag deployTag=new Tag("fx:deploy",new Pair<String,String>("width",properties.getWidth()),new Pair<String,String>("height",properties.getHeight()),new Pair<String,String>("updatemode",properties.getUpdateMode()),new Pair<String,String>("outdir",tempPathToFileSet + "/deploy"),new Pair<String,String>("outfile",artifactName));
    deployTag.add(new Tag("fx:application",new Pair<String,String>("refid",appId)));
    deployTag.add(new Tag("fx:info",new Pair<String,String>("title",properties.getTitle()),new Pair<String,String>("vendor",properties.getVendor()),new Pair<String,String>("description",properties.getDescription())));
    final Tag deployResourcesTag=new Tag("fx:resources");
    deployResourcesTag.add(new Tag("fx:fileset",new Pair<String,String>("dir",tempPathToFileSet),new Pair<String,String>("includes",artifactFileName)));
    deployTag.add(deployResourcesTag);
    generator.add(deployTag);
  }
  final DirectoryAntCopyInstructionCreator creator=new DirectoryAntCopyInstructionCreator(tempPathToFileSet);
  generator.add(creator.createDirectoryContentCopyInstruction(tempPathToFileSet + "/deploy"));
  final Tag deleteTag=new Tag("delete",new Pair<String,String>("includeemptydirs","true"));
  final Tag deleteFileSetTag=new Tag("fileset",new Pair<String,String>("dir","${artifact.temp.output.unnamed}"));
  deleteFileSetTag.add(new Tag("exclude",new Pair<String,String>("name",artifactFileName)));
  deleteFileSetTag.add(new Tag("exclude",new Pair<String,String>("name",artifactName + ".jnlp")));
  deleteFileSetTag.add(new Tag("exclude",new Pair<String,String>("name",artifactName + ".html")));
  deleteTag.add(deleteFileSetTag);
  generator.add(deleteTag);
}
