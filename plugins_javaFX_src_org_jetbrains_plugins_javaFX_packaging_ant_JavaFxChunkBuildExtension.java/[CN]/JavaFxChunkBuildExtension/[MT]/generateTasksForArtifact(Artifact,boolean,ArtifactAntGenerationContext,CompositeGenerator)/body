{
  if (preprocessing)   return;
  if (!(artifact.getArtifactType() instanceof JavaFxApplicationArtifactType))   return;
  final CompositePackagingElement<?> rootElement=artifact.getRootElement();
  final List<PackagingElement<?>> children=new ArrayList<PackagingElement<?>>();
  String artifactFileName=rootElement.getName();
  for (  PackagingElement<?> child : rootElement.getChildren()) {
    if (child instanceof ArchivePackagingElement) {
      artifactFileName=((ArchivePackagingElement)child).getArchiveFileName();
      children.addAll(((ArchivePackagingElement)child).getChildren());
    }
 else {
      children.add(child);
    }
  }
  final String artifactName=FileUtil.getNameWithoutExtension(artifactFileName);
  final String tempDirPath=BuildProperties.propertyRef(context.createNewTempFileProperty("artifact.temp.output." + artifactName,artifactFileName));
  final PackagingElementResolvingContext resolvingContext=ArtifactManager.getInstance(context.getProject()).getResolvingContext();
  for (  Generator childGenerator : computeChildrenGenerators(resolvingContext,new DirectoryAntCopyInstructionCreator(tempDirPath),context,artifact.getArtifactType(),children)) {
    generator.add(childGenerator);
  }
  final JavaFxArtifactProperties properties=(JavaFxArtifactProperties)artifact.getProperties(JavaFxArtifactPropertiesProvider.getInstance());
  final JavaFxArtifactProperties.JavaFxPackager javaFxPackager=new JavaFxArtifactProperties.JavaFxPackager(artifact,properties,context.getProject()){
    @Override protected void registerJavaFxPackagerError(    String message){
    }
  }
;
  final List<JavaFxAntGenerator.SimpleTag> tags=JavaFxAntGenerator.createJarAndDeployTasks(javaFxPackager,artifactFileName,artifact.getName(),tempDirPath);
  for (  JavaFxAntGenerator.SimpleTag tag : tags) {
    buildTags(generator,tag);
  }
  if (properties.isEnabledSigning()) {
    final boolean selfSigning=properties.isSelfSigning();
    String vendor=properties.getVendor();
    if (vendor != null) {
      vendor=vendor.replaceAll(",","\\\\,");
    }
    generator.add(new Property(artifactBasedProperty(ARTIFACT_VENDOR_SIGN_PROPERTY,artifactName),"CN=" + vendor));
    final String alias=selfSigning ? "jb" : properties.getAlias();
    generator.add(new Property(artifactBasedProperty(ARTIFACT_ALIAS_SIGN_PROPERTY,artifactName),alias));
    final String keystore=selfSigning ? tempDirPath + File.separator + "jb-key.jks" : properties.getKeystore();
    generator.add(new Property(artifactBasedProperty(ARTIFACT_KEYSTORE_SIGN_PROPERTY,artifactName),keystore));
    final String storepass=selfSigning ? "storepass" : Base64Converter.decode(properties.getStorepass());
    generator.add(new Property(artifactBasedProperty(ARTIFACT_STOREPASS_SIGN_PROPERTY,artifactName),storepass));
    final String keypass=selfSigning ? "keypass" : Base64Converter.decode(properties.getKeypass());
    generator.add(new Property(artifactBasedProperty(ARTIFACTKEYPASS_SIGN_PROPERTY,artifactName),keypass));
    final Pair[] keysDescriptions=createKeysDescriptions(artifactName);
    if (selfSigning) {
      generator.add(new Tag("genkey",ArrayUtil.prepend(new Pair<String,String>("dname",BuildProperties.propertyRef(artifactBasedProperty(ARTIFACT_VENDOR_SIGN_PROPERTY,artifactName))),keysDescriptions)));
    }
    final Tag signjar=new Tag("signjar",keysDescriptions);
    final Tag fileset=new Tag("fileset",new Pair<String,String>("dir",tempDirPath + "/deploy"));
    fileset.add(new Tag("include",new Pair<String,String>("name","*.jar")));
    signjar.add(fileset);
    generator.add(signjar);
  }
  final DirectoryAntCopyInstructionCreator creator=new DirectoryAntCopyInstructionCreator(BuildProperties.propertyRef(context.getConfiguredArtifactOutputProperty(artifact)));
  generator.add(creator.createDirectoryContentCopyInstruction(tempDirPath + "/deploy"));
  final Tag deleteTag=new Tag("delete",new Pair<String,String>("includeemptydirs","true"));
  deleteTag.add(new Tag("fileset",new Pair<String,String>("dir",tempDirPath)));
  generator.add(deleteTag);
}
