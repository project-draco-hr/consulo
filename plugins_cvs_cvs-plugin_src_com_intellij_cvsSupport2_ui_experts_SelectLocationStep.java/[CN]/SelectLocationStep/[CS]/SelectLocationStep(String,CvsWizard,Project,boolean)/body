{
  super(description,wizard);
  myChooserDescriptor=new FileChooserDescriptor(showFiles,true,false,false,false,false){
    public boolean isFileVisible(    final VirtualFile file,    final boolean showHiddenFiles){
      if (!super.isFileVisible(file,showHiddenFiles))       return false;
      final boolean ignored=ProjectRootManager.getInstance(project).getFileIndex().isIgnored(file);
      if (!showHiddenFiles && project != null && !project.isDefault() && ignored) {
        return false;
      }
      return true;
    }
  }
;
  myFileSystemTree=FileSystemTreeFactory.SERVICE.getInstance().createFileSystemTree(project,myChooserDescriptor);
  myFileSystemTree.updateTree();
  myPathTextField=new FileTextFieldImpl.Vfs(myChooserDescriptor,myFileSystemTree.areHiddensShown(),FileChooserFactoryImpl.getMacroMap(),myFileSystemTree){
    protected void onTextChanged(    final String newValue){
      updateTreeFromPath(newValue);
    }
  }
;
  myPathTextFieldWrapper=new JPanel(new BorderLayout());
  myPathTextFieldWrapper.setBorder(new EmptyBorder(0,0,2,0));
  myPathTextFieldWrapper.add(myPathTextField.getField(),BorderLayout.CENTER);
  myTextFieldAction=new TextFieldAction();
  JTree tree=myFileSystemTree.getTree();
  tree.addSelectionPath(tree.getPathForRow(0));
  new FileDrop(tree,new FileDrop.Target(){
    public FileChooserDescriptor getDescriptor(){
      return myChooserDescriptor;
    }
    public boolean isHiddenShown(){
      return myFileSystemTree.areHiddensShown();
    }
    public void dropFiles(    final List<VirtualFile> files){
      if (files.size() > 0) {
        selectInTree(files.get(0));
      }
    }
  }
);
}
