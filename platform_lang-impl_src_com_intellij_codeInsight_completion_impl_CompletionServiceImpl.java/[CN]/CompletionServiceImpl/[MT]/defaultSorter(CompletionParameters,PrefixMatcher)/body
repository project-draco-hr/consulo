{
  final CompletionLocation location=new CompletionLocation(parameters);
  CompletionSorterImpl sorter=emptySorter();
  final String prefix=matcher.getPrefix();
  if (!prefix.isEmpty()) {
    final String prefixHumps=StringUtil.capitalsOnly(prefix);
    if (prefixHumps.length() > 0) {
      sorter=sorter.weigh(new LookupElementWeigher("prefixHumps"){
        @NotNull @Override public Comparable weigh(        @NotNull LookupElement element){
          for (          String itemString : element.getAllLookupStrings()) {
            if (StringUtil.capitalsOnly(itemString).startsWith(prefixHumps)) {
              return false;
            }
          }
          return true;
        }
      }
);
    }
  }
  for (  final Weigher weigher : WeighingService.getWeighers(CompletionService.RELEVANCE_KEY)) {
    sorter=sorter.weigh(new LookupElementWeigher(weigher.toString()){
      @NotNull @Override public Comparable weigh(      @NotNull LookupElement element){
        return new NegatingComparable(weigher.weigh(element,location));
      }
    }
);
  }
  return sorter.withClassifier("priority",true,new ClassifierFactory<LookupElement>("liftShorter"){
    @Override public Classifier<LookupElement> createClassifier(    final Classifier<LookupElement> next){
      return new LiftShorterItemsClassifier(next);
    }
  }
);
}
