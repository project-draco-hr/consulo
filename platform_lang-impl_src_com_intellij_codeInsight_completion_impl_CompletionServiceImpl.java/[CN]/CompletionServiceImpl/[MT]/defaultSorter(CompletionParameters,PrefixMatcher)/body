{
  final CompletionLocation location=new CompletionLocation(parameters);
  CompletionSorterImpl sorter=emptySorter();
  sorter=sorter.withClassifier(new PreferStartMatching(location));
  for (  final Weigher weigher : WeighingService.getWeighers(CompletionService.RELEVANCE_KEY)) {
    final String id=weigher.toString();
    if ("prefix".equals(id)) {
      sorter=sorter.withClassifier(new PrefixMatchingClassifier(id,location));
    }
 else {
      sorter=sorter.weigh(new LookupElementWeigher(id){
        @NotNull @Override public Comparable weigh(        @NotNull LookupElement element){
          return new NegatingComparable(weigher.weigh(element,location));
        }
      }
);
    }
  }
  if (parameters.getCompletionType() == CompletionType.SMART) {
    return sorter;
  }
  return sorter.withClassifier("priority",true,new ClassifierFactory<LookupElement>("liftShorter"){
    @Override public Classifier<LookupElement> createClassifier(    final Classifier<LookupElement> next){
      return new LiftShorterItemsClassifier(next,new LiftShorterItemsClassifier.LiftingCondition());
    }
  }
);
}
