{
  GrOpenBlock block=method.getBlock();
  if (block == null)   return;
  GrStatement[] statements=block.getStatements();
  final GroovyElementFactory factory=GroovyElementFactory.getInstance(helper.getProject());
  for (  ParameterInfo info : helper.getParameterInfos()) {
    final String oldName=info.getOldName();
    final String newName=info.getName();
    final ArrayList<GrExpression> result=new ArrayList<GrExpression>();
    if (!oldName.equals(newName)) {
      for (      final GrStatement statement : statements) {
        statement.accept(new PsiRecursiveElementVisitor(){
          public void visitElement(          final PsiElement element){
            super.visitElement(element);
            if (element instanceof GrReferenceExpression) {
              GrReferenceExpression expr=(GrReferenceExpression)element;
              if (!expr.isQualified() && oldName.equals(expr.getName())) {
                result.add(expr);
              }
            }
          }
        }
);
        for (        GrExpression expr : result) {
          expr.replaceWithExpression(factory.createExpressionFromText(newName),false);
        }
      }
    }
  }
}
