{
  AbstractCommand cmd;
  String actualString=string;
  if (actualString.startsWith(RegistryValueCommand.PREFIX)) {
    cmd=new RegistryValueCommand(string,line);
  }
 else   if (actualString.startsWith(AbstractCommand.CMD_PREFIX + AbstractCommand.CMD_PREFIX)) {
    cmd=new EmptyCommand(line);
  }
 else   if (actualString.startsWith(KeyCodeTypeCommand.PREFIX)) {
    cmd=new KeyCodeTypeCommand(string,line);
  }
 else   if (actualString.startsWith(DelayCommand.PREFIX)) {
    cmd=new DelayCommand(string,line);
  }
 else   if (actualString.startsWith(KeyShortcutCommand.PREFIX)) {
    cmd=new KeyShortcutCommand(string,line);
  }
 else   if (actualString.startsWith(ActionCommand.PREFIX)) {
    cmd=new ActionCommand(string,line);
  }
 else   if (actualString.startsWith(ToggleActionCommand.PREFIX)) {
    cmd=new ToggleActionCommand(string,line);
  }
 else   if (actualString.startsWith(StopCommand.PREFIX)) {
    cmd=new StopCommand(string,line);
  }
 else   if (actualString.startsWith(AssertFocused.PREFIX)) {
    return new AssertFocused(string,line);
  }
 else   if (actualString.startsWith(CallCommand.PREFIX)) {
    cmd=new CallCommand(string,line);
  }
 else   if (actualString.startsWith(CdCommand.PREFIX)) {
    cmd=new CdCommand(string,line);
  }
 else   if (actualString.startsWith(PushStage.PREFIX)) {
    cmd=new PushStage(string,line);
  }
 else   if (actualString.startsWith(PopStage.PREFIX)) {
    cmd=new PopStage(string,line);
  }
 else {
    cmd=new AlphaNumericTypeCommand(string,line);
  }
  cmd.setScriptDir(scriptDir);
  return cmd;
}
