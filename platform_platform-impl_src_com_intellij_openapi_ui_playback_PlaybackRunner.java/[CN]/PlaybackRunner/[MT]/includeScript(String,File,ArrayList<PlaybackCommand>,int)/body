{
  final StringTokenizer tokens=new StringTokenizer(scriptText,"\n");
  while (tokens.hasMoreTokens()) {
    final String eachLine=tokens.nextToken();
    String includeCmd=AbstractCommand.CMD_PREFIX + "include";
    String importCallCmd=AbstractCommand.CMD_PREFIX + "importCall";
    if (eachLine.startsWith(includeCmd)) {
      File file=new PathMacro().setScriptDir(scriptDir).resolveFile(eachLine.substring(includeCmd.length()).trim(),scriptDir);
      if (!file.exists()) {
        commandList.add(new ErrorCommand("Cannot find file to include: " + file.getAbsolutePath(),line));
        return;
      }
      try {
        String include=FileUtil.loadFile(file);
        myCommands.add(new PrintCommand(eachLine,line));
        includeScript(include,file.getParentFile(),commandList,0);
      }
 catch (      IOException e) {
        commandList.add(new ErrorCommand("Error reading file: " + file.getAbsolutePath(),line));
        return;
      }
    }
 else     if (eachLine.startsWith(importCallCmd)) {
      String className=eachLine.substring(importCallCmd.length()).trim();
      try {
        Class<?> facadeClass=Class.forName(className);
        myFacadeClasses.add(facadeClass);
        myCommands.add(new PrintCommand(eachLine,line++));
      }
 catch (      ClassNotFoundException e) {
        commandList.add(new ErrorCommand("Cannot find class: " + className,line));
        return;
      }
    }
 else {
      final PlaybackCommand cmd=createCommand(eachLine,line++,scriptDir);
      commandList.add(cmd);
    }
  }
}
