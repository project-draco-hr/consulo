{
  if (cmdIndex < myCommands.size()) {
    final PlaybackCommand cmd=myCommands.get(cmdIndex);
    if (myStopRequested) {
      myCallback.message(null,"Stopped",cmdIndex,StatusCallback.Type.message);
      myActionCallback.setRejected();
      return;
    }
    final PlaybackContext context=new PlaybackContext(this,myCallback,cmdIndex,myRobot,myUseDirectActionCall,cmd,baseDir,(Set<Class>)myFacadeClasses.clone()){
      private long myTimeStamp=myContextTimestamp;
      public void pushStage(      StageInfo info){
        myStages.add(info);
      }
      public StageInfo popStage(){
        if (myStages.size() > 0) {
          return myStages.remove(myStages.size() - 1);
        }
        return null;
      }
      public int getStageCount(){
        return myStages.size();
      }
      @Override public void addPassed(      StageInfo stage){
        myPassedStages.add(stage);
      }
      @Override public boolean isDisposed(){
        return myTimeStamp != myContextTimestamp;
      }
    }
;
    final ActionCallback cmdCallback=cmd.execute(context);
    cmdCallback.doWhenDone(new Runnable(){
      public void run(){
        if (cmd.canGoFurther()) {
          executeFrom(cmdIndex + 1,context.getBaseDir());
        }
 else {
          myCallback.message(null,"Stopped",cmdIndex,StatusCallback.Type.message);
          myActionCallback.setDone();
        }
      }
    }
).doWhenRejected(new Runnable(){
      public void run(){
        myCallback.message(null,"Stopped",cmdIndex,StatusCallback.Type.message);
        myActionCallback.setRejected();
      }
    }
);
  }
 else {
    myCallback.message(null,"Finished OK " + myPassedStages.size() + " tests",myCommands.size() - 1,StatusCallback.Type.message);
    myActionCallback.setDone();
  }
}
