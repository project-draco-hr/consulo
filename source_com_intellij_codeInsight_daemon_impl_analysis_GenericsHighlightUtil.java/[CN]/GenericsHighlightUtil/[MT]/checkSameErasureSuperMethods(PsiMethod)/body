{
  if (method.isConstructor())   return null;
  final PsiClass aClass=method.getContainingClass();
  if (aClass == null)   return null;
  final List<MethodSignatureBackedByPsiMethod> sameNameMethodSignatures=MethodSignatureUtil.findMethodSignaturesByName(aClass,method.getName(),true);
  final MethodSignatureUtil.MethodSignatureToMethods sameSignatureMethods=MethodSignatureUtil.getSameSignatureMethods(aClass);
  MethodSignature originalMethodSignature=method.getSignature(PsiSubstitutor.EMPTY);
  final List<MethodSignatureBackedByPsiMethod> sameSignatureMethodList1=sameSignatureMethods.get(originalMethodSignature);
  if (sameSignatureMethodList1 == null)   return null;
  for (int i=0; i < sameNameMethodSignatures.size(); i++) {
    final MethodSignatureBackedByPsiMethod methodSignature=sameNameMethodSignatures.get(i);
    if (methodSignature.equals(originalMethodSignature))     continue;
    final List<MethodSignatureBackedByPsiMethod> sameSignatureMethodList2=sameSignatureMethods.get(methodSignature);
    for (int j=0; j < sameSignatureMethodList1.size(); j++) {
      final MethodSignatureBackedByPsiMethod methodSignature1=sameSignatureMethodList1.get(j);
      if (methodSignature1 == null)       continue;
      PsiMethod method1=methodSignature1.getMethod();
      for (int k=0; k < sameSignatureMethodList2.size(); k++) {
        final MethodSignatureBackedByPsiMethod methodSignature2=sameSignatureMethodList2.get(k);
        if (methodSignature2 == null)         continue;
        PsiMethod method2=methodSignature2.getMethod();
        if (method1 != method2 && MethodSignatureUtil.areParametersErasureEqual(method1,method2)) {
          String description=MessageFormat.format("{0}; both methods have same erasure, yet neither overrides the other",new Object[]{HighlightMethodUtil.createClashMethodMessage(method1,method2,true)});
          TextRange textRange=HighlightUtil.getMethodDeclarationTextRange(method);
          return HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,textRange,description);
        }
      }
    }
  }
  return null;
}
