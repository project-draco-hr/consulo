{
  if (typeCast.getManager().getEffectiveLanguageLevel().compareTo(LanguageLevel.JDK_1_5) < 0)   return null;
  if (!DaemonCodeAnalyzerSettings.getInstance().getInspectionProfile().isToolEnabled(HighlightDisplayKey.UNCHECKED_WARNING))   return null;
  final PsiTypeElement typeElement=typeCast.getCastType();
  if (typeElement == null)   return null;
  final PsiType castType=typeElement.getType();
  final PsiExpression expression=typeCast.getOperand();
  if (expression == null || castType == null)   return null;
  final PsiType exprType=expression.getType();
  if (exprType == null)   return null;
  if (isUncheckedTypeCast(castType,exprType)) {
    String description=MessageFormat.format("Unchecked cast: ''{0}'' to ''{1}''",new Object[]{HighlightUtil.formatType(exprType),HighlightUtil.formatType(castType)});
    if (InspectionManagerEx.inspectionResultSuppressed(expression,HighlightDisplayKey.UNCHECKED_WARNING.toString()))     return null;
    HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.UNCHECKED_WARNING,typeCast,description);
    List<IntentionAction> options=new ArrayList<IntentionAction>();
    options.add(new AddNoInspectionCommentAction(HighlightDisplayKey.UNCHECKED_WARNING,expression));
    options.add(new AddNoInspectionDocTagAction(HighlightDisplayKey.UNCHECKED_WARNING,expression));
    options.add(new AddSuppressWarningsAnnotationAction(HighlightDisplayKey.UNCHECKED_WARNING,expression));
    options.add(new AddNoInspectionAllForClassAction(expression));
    options.add(new AddSuppressWarningsAnnotationForAllAction(expression));
    options.add(new SwitchOffToolAction(HighlightDisplayKey.UNCHECKED_WARNING));
    QuickFixAction.registerQuickFixAction(highlightInfo,new GenerifyFileFix(expression.getContainingFile()),options);
    return highlightInfo;
  }
  return null;
}
