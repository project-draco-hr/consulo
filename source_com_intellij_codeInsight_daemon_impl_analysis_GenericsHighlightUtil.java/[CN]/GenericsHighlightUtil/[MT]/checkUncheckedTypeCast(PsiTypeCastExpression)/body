{
  if (typeCast.getManager().getEffectiveLanguageLevel().compareTo(LanguageLevel.JDK_1_5) < 0)   return null;
  final PsiTypeElement typeElement=typeCast.getCastType();
  if (typeElement == null)   return null;
  final PsiType castType=typeElement.getType();
  final PsiExpression expression=typeCast.getOperand();
  if (expression == null || castType == null)   return null;
  final PsiType exprType=expression.getType();
  if (exprType == null)   return null;
  if (isUncheckedTypeCast(castType,exprType)) {
    String description=MessageFormat.format("Unchecked cast: ''{0}'' to ''{1}''",new Object[]{HighlightUtil.formatType(exprType),HighlightUtil.formatType(castType)});
    if (DaemonCodeAnalyzerSettings.getInstance().getInspectionProfile().isToolEnabled(HighlightDisplayKey.UNCHECKED_WARNING)) {
      final InspectionManagerEx iManager=(InspectionManagerEx)InspectionManager.getInstance(expression.getProject());
      if (iManager.inspectionResultSuppressed(expression,HighlightDisplayKey.UNCHECKED_WARNING.toString()))       return null;
      HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.UNCHECKED_WARNING,typeCast,description);
      QuickFixAction.registerQuickFixAction(highlightInfo,new GenerifyFileFix(expression.getContainingFile()));
      QuickFixAction.registerQuickFixAction(highlightInfo,new AddNoInspectionCommentAction(HighlightDisplayKey.UNCHECKED_WARNING,expression));
      QuickFixAction.registerQuickFixAction(highlightInfo,new SwitchOffToolAction(HighlightDisplayKey.UNCHECKED_WARNING));
      return highlightInfo;
    }
  }
  return null;
}
