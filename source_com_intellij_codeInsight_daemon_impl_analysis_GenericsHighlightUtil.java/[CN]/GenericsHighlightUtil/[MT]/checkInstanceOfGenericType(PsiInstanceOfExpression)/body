{
  PsiType type=expression.getCheckType().getType();
  if (type instanceof PsiClassType) {
    PsiClassType.ClassResolveResult resolveResult=((PsiClassType)type).resolveGenerics();
    if (resolveResult.getElement() == null)     return null;
    if (resolveResult.getElement() instanceof PsiTypeParameter) {
      return HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,expression.getCheckType(),"Class or array expected");
    }
 else {
      Iterator<PsiTypeParameter> iterator=PsiUtil.typeParametersIterator(resolveResult.getElement());
      while (iterator.hasNext()) {
        PsiType substituted=resolveResult.getSubstitutor().substitute(iterator.next());
        if (substituted != null && (!(substituted instanceof PsiWildcardType) || ((PsiWildcardType)substituted).getBound() != null)) {
          return HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,expression.getCheckType(),"Illegal generic type for instanceof");
        }
      }
      return null;
    }
  }
  return null;
}
