{
  if (overrider.getManager().getEffectiveLanguageLevel().compareTo(LanguageLevel.JDK_1_5) < 0)   return null;
  if (!DaemonCodeAnalyzerSettings.getInstance().getInspectionProfile().isToolEnabled(HighlightDisplayKey.UNCHECKED_WARNING))   return null;
  for (  MethodSignatureBackedByPsiMethod signature : superMethodSignatures) {
    PsiMethod baseMethod=signature.getMethod();
    PsiSubstitutor substitutor=signature.getSubstitutor();
    if (PsiUtil.isRawSubstitutor(baseMethod,substitutor))     continue;
    final PsiType baseReturnType=substitutor.substitute(baseMethod.getReturnType());
    final PsiType overriderReturnType=overrider.getReturnType();
    if (baseReturnType == null || overriderReturnType == null)     return null;
    if (isGenericToRaw(baseReturnType,overriderReturnType)) {
      final String message=MessageFormat.format("Unchecked overriding: return type requires unchecked conversion. Found ''{0}'', required ''{1}''",new Object[]{HighlightUtil.formatType(overriderReturnType),HighlightUtil.formatType(baseReturnType)});
      final HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.UNCHECKED_WARNING,overrider.getReturnTypeElement(),message);
      List<IntentionAction> options=new ArrayList<IntentionAction>();
      options.add(new AddNoInspectionDocTagAction(HighlightDisplayKey.UNCHECKED_WARNING,overrider.getReturnTypeElement()));
      options.add(new AddNoInspectionAllForClassAction(overrider.getReturnTypeElement()));
      options.add(new SwitchOffToolAction(HighlightDisplayKey.UNCHECKED_WARNING));
      QuickFixAction.registerQuickFixAction(highlightInfo,new EmptyIntentionAction("Unchecked overriding",options),options);
      return highlightInfo;
    }
  }
  return null;
}
