{
  final PsiClass aClass=method.getContainingClass();
  if (aClass == null)   return null;
  final List<MethodSignatureBackedByPsiMethod> sameNameMethodSignatures=MethodSignatureUtil.findMethodSignaturesByName(aClass,method.getName(),false);
  for (int i=0; i < sameNameMethodSignatures.size(); i++) {
    final MethodSignatureBackedByPsiMethod methodSignature=sameNameMethodSignatures.get(i);
    PsiMethod otherMethod=methodSignature.getMethod();
    if (otherMethod == method || method.isConstructor() != otherMethod.isConstructor())     continue;
    if (MethodSignatureUtil.areParametersErasureEqual(otherMethod,method)) {
      String description=MessageFormat.format("{0}; both methods have same erasure.",new Object[]{HighlightMethodUtil.createClashMethodMessage(method,otherMethod,false)});
      TextRange textRange=HighlightUtil.getMethodDeclarationTextRange(method);
      return HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,textRange,description);
    }
  }
  return null;
}
