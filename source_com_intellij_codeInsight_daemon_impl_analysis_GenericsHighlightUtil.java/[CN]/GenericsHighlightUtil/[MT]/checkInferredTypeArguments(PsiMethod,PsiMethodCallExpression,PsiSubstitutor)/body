{
  PsiTypeParameter[] typeParameters=genericMethod.getTypeParameterList().getTypeParameters();
  for (int i=0; i < typeParameters.length; i++) {
    PsiTypeParameter typeParameter=typeParameters[i];
    PsiType substituted=substitutor.substitute(typeParameter);
    if (substituted == null)     return null;
    PsiClassType[] extendsTypes=typeParameter.getExtendsListTypes();
    for (int j=0; j < extendsTypes.length; j++) {
      PsiType extendsType=substitutor.substitute(extendsTypes[j]);
      if (!TypeConversionUtil.isAssignable(extendsType,substituted)) {
        PsiClass boundClass=extendsType instanceof PsiClassType ? ((PsiClassType)extendsType).resolve() : null;
        String description=MessageFormat.format("Inferred type ''{3}'' for type parameter ''{0}'' is not within its bound; should {1} ''{2}''",new Object[]{HighlightUtil.formatClass(typeParameter),(boundClass == null || typeParameter.isInterface() == boundClass.isInterface() ? "extend" : "implement"),HighlightUtil.formatType(extendsType),HighlightUtil.formatType(substituted)});
        return HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,call,description);
      }
    }
  }
  return null;
}
