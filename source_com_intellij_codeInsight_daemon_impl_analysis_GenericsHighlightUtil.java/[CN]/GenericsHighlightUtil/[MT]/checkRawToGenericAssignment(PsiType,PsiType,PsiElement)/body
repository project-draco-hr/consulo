{
  if (elementToHighlight.getManager().getEffectiveLanguageLevel().compareTo(LanguageLevel.JDK_1_5) < 0)   return null;
  if (!DaemonCodeAnalyzerSettings.getInstance().getInspectionProfile().isToolEnabled(HighlightDisplayKey.UNCHECKED_WARNING))   return null;
  if (!isGenericToRaw(lType,rType))   return null;
  String description=MessageFormat.format("Unchecked assignment: ''{0}'' to ''{1}''",new Object[]{HighlightUtil.formatType(rType),HighlightUtil.formatType(lType)});
  if (InspectionManagerEx.inspectionResultSuppressed(elementToHighlight,HighlightDisplayKey.UNCHECKED_WARNING.toString()))   return null;
  HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.UNCHECKED_WARNING,elementToHighlight,description);
  List<IntentionAction> options=new ArrayList<IntentionAction>();
  options.add(new AddNoInspectionCommentAction(HighlightDisplayKey.UNCHECKED_WARNING,elementToHighlight));
  options.add(new AddNoInspectionDocTagAction(HighlightDisplayKey.UNCHECKED_WARNING,elementToHighlight));
  options.add(new AddSuppressWarningsAnnotationAction(HighlightDisplayKey.UNCHECKED_WARNING,elementToHighlight));
  options.add(new AddNoInspectionAllForClassAction(elementToHighlight));
  options.add(new AddSuppressWarningsAnnotationForAllAction(elementToHighlight));
  options.add(new SwitchOffToolAction(HighlightDisplayKey.UNCHECKED_WARNING));
  QuickFixAction.registerQuickFixAction(highlightInfo,new GenerifyFileFix(elementToHighlight.getContainingFile()),options);
  return highlightInfo;
}
