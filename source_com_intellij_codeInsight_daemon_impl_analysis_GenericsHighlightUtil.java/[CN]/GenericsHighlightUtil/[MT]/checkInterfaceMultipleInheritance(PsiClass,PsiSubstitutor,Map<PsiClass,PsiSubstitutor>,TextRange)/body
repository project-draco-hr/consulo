{
  final PsiClassType[] types=aClass.getSuperTypes();
  for (int i=0; i < types.length; i++) {
    PsiClassType superType=types[i];
    final PsiClassType.ClassResolveResult result=superType.resolveGenerics();
    final PsiClass superClass=result.getElement();
    if (superClass == null)     continue;
    PsiSubstitutor superTypeSubstitutor=result.getSubstitutor();
    superTypeSubstitutor=MethodSignatureUtil.combineSubstitutors(superTypeSubstitutor,parentSubstitutor);
    final PsiSubstitutor inheritedSubstitutor=inheritedClasses.get(superClass);
    if (inheritedSubstitutor != null) {
      final PsiTypeParameter[] typeParameters=superClass.getTypeParameterList().getTypeParameters();
      for (int j=0; j < typeParameters.length; j++) {
        PsiTypeParameter typeParameter=typeParameters[j];
        PsiType type1=inheritedSubstitutor.substitute(typeParameter);
        PsiType type2=superTypeSubstitutor.substitute(typeParameter);
        if (!Comparing.equal(type1,type2)) {
          String description=MessageFormat.format("''{0}'' cannot be inherited with different type arguments: ''{1}'' and ''{2}''",new Object[]{HighlightUtil.formatClass(superClass),HighlightUtil.formatType(type1),HighlightUtil.formatType(type2)});
          return HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,textRange,description);
        }
      }
    }
    inheritedClasses.put(superClass,superTypeSubstitutor);
    final HighlightInfo highlightInfo=checkInterfaceMultipleInheritance(superClass,superTypeSubstitutor,inheritedClasses,textRange);
    if (highlightInfo != null)     return highlightInfo;
  }
  return null;
}
