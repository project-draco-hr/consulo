{
  PsiTypeParameter[] typeParameters=parameterList.getTypeParameters();
  if (typeParameters.length == 0)   return null;
  final PsiElement parent=parameterList.getParent();
  if (parent instanceof PsiClass && ((PsiClass)parent).isEnum()) {
    return HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,parameterList,"Enum may not have type parameters");
  }
  if (parent instanceof PsiAnnotationMethod) {
    return HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,parameterList,"@interface members may not have type parameters");
  }
 else   if (parent instanceof PsiClass && ((PsiClass)parent).isAnnotationType()) {
    return HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,parameterList,"@interface may not have type parameters");
  }
  for (int i=0; i < typeParameters.length; i++) {
    final PsiTypeParameter typeParameter1=typeParameters[i];
    String name1=typeParameter1.getName();
    for (int j=i + 1; j < typeParameters.length; j++) {
      final PsiTypeParameter typeParameter2=typeParameters[j];
      String name2=typeParameter2.getName();
      if (Comparing.strEqual(name1,name2)) {
        String message=MessageFormat.format("Duplicate type parameter: ''{0}''",new Object[]{name1});
        return HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,typeParameter2,message);
      }
    }
  }
  return null;
}
