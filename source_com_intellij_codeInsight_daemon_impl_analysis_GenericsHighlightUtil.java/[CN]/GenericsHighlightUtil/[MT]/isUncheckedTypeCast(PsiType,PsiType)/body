{
  if (exprType instanceof PsiPrimitiveType || castType instanceof PsiPrimitiveType)   return false;
  if (exprType.equals(castType))   return false;
  if (exprType instanceof PsiArrayType && castType instanceof PsiArrayType) {
    return isUncheckedTypeCast(((PsiArrayType)castType).getComponentType(),((PsiArrayType)exprType).getComponentType());
  }
  if (exprType instanceof PsiArrayType || castType instanceof PsiArrayType)   return false;
  if (exprType instanceof PsiIntersectionType) {
    final PsiType[] conjuncts=((PsiIntersectionType)exprType).getConjuncts();
    for (int i=0; i < conjuncts.length; i++) {
      if (isUncheckedTypeCast(castType,conjuncts[i]))       return true;
    }
    return false;
  }
  LOG.assertTrue(exprType instanceof PsiClassType && castType instanceof PsiClassType,"Invalid types: castType =" + castType + ", exprType="+ exprType);
  PsiClassType.ClassResolveResult resolveResult1=((PsiClassType)exprType).resolveGenerics();
  PsiClassType.ClassResolveResult resolveResult2=((PsiClassType)castType).resolveGenerics();
  PsiClass aClass=resolveResult1.getElement();
  PsiClass bClass=resolveResult2.getElement();
  PsiSubstitutor substitutor1=resolveResult1.getSubstitutor();
  PsiSubstitutor substitutor2=resolveResult2.getSubstitutor();
  if (aClass == null || bClass == null)   return false;
  if (aClass instanceof PsiTypeParameter || bClass instanceof PsiTypeParameter)   return true;
  PsiClass base;
  if (!aClass.getManager().areElementsEquivalent(aClass,bClass)) {
    if (aClass.isInheritor(bClass,true)) {
      base=bClass;
      substitutor1=TypeConversionUtil.getSuperClassSubstitutor(bClass,aClass,substitutor1);
    }
 else     if (bClass.isInheritor(aClass,true)) {
      base=aClass;
      substitutor2=TypeConversionUtil.getSuperClassSubstitutor(aClass,bClass,substitutor2);
    }
 else {
      return false;
    }
  }
 else {
    base=aClass;
  }
  LOG.assertTrue(substitutor1 != null && substitutor2 != null);
  Iterator<PsiTypeParameter> it=PsiUtil.typeParametersIterator(base);
  while (it.hasNext()) {
    PsiTypeParameter parameter=it.next();
    PsiType typeArg1=substitutor1.substitute(parameter);
    PsiType typeArg2=substitutor2.substitute(parameter);
    if (typeArg2 != null && typeArg1 == null)     return true;
    if (typeArg2 == null)     continue;
    if (isUncheckedTypeArgumentConversion(typeArg1,typeArg2))     return true;
  }
  return false;
}
