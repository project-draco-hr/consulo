{
  final Collection<HierarchicalMethodSignature> signaturesWithSupers=aClass.getVisibleSignatures();
  PsiManager manager=aClass.getManager();
  HighlightInfo classInfo=null;
  List<HighlightInfo> result=new ArrayList<HighlightInfo>();
  Map<MethodSignature,MethodSignatureBackedByPsiMethod> sameErasureMethods=new THashMap<MethodSignature,MethodSignatureBackedByPsiMethod>(MethodSignatureUtil.METHOD_PARAMETERS_ERASURE_EQUALITY);
  Map<MethodSignature,MethodSignatureBackedByPsiMethod> toCheckSubsignature=new HashMap<MethodSignature,MethodSignatureBackedByPsiMethod>();
  MethodSignatureBackedByPsiMethod sameErasure;
  for (  HierarchicalMethodSignature signature : signaturesWithSupers) {
    PsiMethod method=signature.getMethod();
    MethodSignature signatureToErase=method.getSignature(PsiSubstitutor.EMPTY);
    sameErasure=sameErasureMethods.get(signatureToErase);
    if (sameErasure != null) {
      classInfo=checkSameErasureNotSubsignature(sameErasure,toCheckSubsignature,signature,aClass,method,result,classInfo);
    }
    sameErasureMethods.put(signatureToErase,signature);
    toCheckSubsignature.put(signature,signature);
    List<HierarchicalMethodSignature> supers=signature.getSuperSignatures();
    for (    HierarchicalMethodSignature superSignature : supers) {
      PsiMethod superMethod=superSignature.getMethod();
      if (!manager.getResolveHelper().isAccessible(superMethod,aClass,null))       continue;
      classInfo=checkSameErasureNotSubsignature(signature,toCheckSubsignature,superSignature,aClass,superMethod,result,classInfo);
      MethodSignature inOwnClass=superMethod.getSignature(PsiSubstitutor.EMPTY);
      sameErasure=sameErasureMethods.get(inOwnClass);
      if (sameErasure != null) {
        classInfo=checkSameErasureNotSubsignature(sameErasure,toCheckSubsignature,superSignature,aClass,superMethod,result,classInfo);
      }
      sameErasureMethods.put(inOwnClass,superSignature);
      toCheckSubsignature.put(superSignature,signature);
    }
  }
  if (classInfo != null)   result.add(classInfo);
  return result;
}
