{
  String newName=prototype.getName();
  PsiMethod[] methods=clazz.findMethodsByName(newName,false);
  MultiMap<MethodSignature,PsiMethod> signatures=GrClosureSignatureUtil.findMethodSignatures(methods);
  List<MethodSignature> prototypeSignatures=GrClosureSignatureUtil.generateAllSignaturesForMethod(prototype,PsiSubstitutor.EMPTY);
  for (  MethodSignature prototypeSignature : prototypeSignatures) {
    for (    PsiMethod method : signatures.get(prototypeSignature)) {
      if (method != refactoredMethod) {
        String signaturePresentation=GroovyPresentationUtil.getSignaturePresentation(prototypeSignature);
        conflicts.putValue(method,GroovyRefactoringBundle.message("method.duplicate",signaturePresentation,RefactoringUIUtil.getDescription(clazz,false)));
        break;
      }
    }
  }
}
