{
  final PsiReference psiReference=file.findReferenceAt(editor.getCaretModel().getOffset());
  if (psiReference == null)   return;
  final PsiReferenceList referenceList=PsiTreeUtil.getParentOfType(psiReference.getElement(),PsiReferenceList.class);
  if (referenceList == null)   return;
  final PsiClass psiClass=PsiTreeUtil.getParentOfType(referenceList,PsiClass.class);
  if (psiClass == null)   return;
  if (psiClass.getExtendsList() != referenceList && psiClass.getImplementsList() != referenceList)   return;
  final PsiElement target=psiReference.resolve();
  if (target == null || !(target instanceof PsiClass))   return;
  PsiClass targetClass=(PsiClass)target;
  psiReference.getElement().delete();
  final PsiMethod[] psiMethods=targetClass.getAllMethods();
  for (  PsiMethod psiMethod : psiMethods) {
    final PsiMethod[] implementingMethods=psiClass.findMethodsBySignature(psiMethod,false);
    for (    PsiMethod implementingMethod : implementingMethods) {
      implementingMethod.delete();
    }
  }
}
