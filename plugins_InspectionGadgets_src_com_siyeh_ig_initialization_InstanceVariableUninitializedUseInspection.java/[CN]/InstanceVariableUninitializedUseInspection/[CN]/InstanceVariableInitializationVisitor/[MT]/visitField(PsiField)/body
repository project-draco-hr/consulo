{
  if (field.hasModifierProperty(PsiModifier.STATIC)) {
    return;
  }
  if (field.getInitializer() != null) {
    return;
  }
  if (m_ignorePrimitives) {
    final PsiType fieldType=field.getType();
    if (ClassUtils.isPrimitive(fieldType)) {
      return;
    }
  }
  final PsiClass aClass=field.getContainingClass();
  if (aClass == null) {
    return;
  }
  final PsiManager manager=field.getManager();
  final PsiSearchHelper searchHelper=manager.getSearchHelper();
  if (searchHelper.isFieldBoundToForm(field)) {
    return;
  }
  if (!isInitializedInInitializer(field)) {
    final PsiMethod[] constructors=aClass.getConstructors();
    for (int i=0; i < constructors.length; i++) {
      final PsiMethod constructor=constructors[i];
      final PsiCodeBlock body=constructor.getBody();
      iru.blockMustAssignVariable(field,body);
    }
  }
  final List badReads=iru.getUninitializedReads();
  for (int i=0; i < badReads.size(); i++) {
    final PsiElement element=(PsiElement)badReads.get(i);
    registerError(element);
  }
}
