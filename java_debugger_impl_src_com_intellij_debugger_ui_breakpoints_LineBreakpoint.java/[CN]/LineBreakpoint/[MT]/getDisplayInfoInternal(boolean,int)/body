{
  final RangeHighlighter highlighter=getHighlighter();
  if (highlighter.isValid() && isValid()) {
    final int lineNumber=(highlighter.getDocument().getLineNumber(highlighter.getStartOffset()) + 1);
    String className=getClassName();
    final boolean hasClassInfo=className != null && className.length() > 0;
    final boolean hasMethodInfo=myMethodName != null && myMethodName.length() > 0;
    if (hasClassInfo || hasMethodInfo) {
      final StringBuilder info=StringBuilderSpinAllocator.alloc();
      try {
        boolean isFile=getSourcePosition().getFile().getName().equals(className);
        String packageName=null;
        if (hasClassInfo) {
          final int dotIndex=className.lastIndexOf(".");
          if (dotIndex >= 0 && !isFile) {
            packageName=className.substring(0,dotIndex);
            className=className.substring(dotIndex + 1);
          }
          if (totalTextLength != -1) {
            if (className.length() + (hasMethodInfo ? myMethodName.length() : 0) > totalTextLength + 3) {
              int offset=totalTextLength - (hasMethodInfo ? myMethodName.length() : 0);
              if (offset > 0 && offset < className.length()) {
                className=className.substring(className.length() - offset);
                info.append("...");
              }
            }
          }
          info.append(className);
        }
        if (hasMethodInfo) {
          if (isFile) {
            info.append(":");
          }
 else           if (hasClassInfo) {
            info.append(".");
          }
          info.append(myMethodName);
        }
        if (showPackageInfo && packageName != null) {
          info.append(" (").append(packageName).append(")");
        }
        return DebuggerBundle.message("line.breakpoint.display.name.with.class.or.method",lineNumber,info.toString());
      }
  finally {
        StringBuilderSpinAllocator.dispose(info);
      }
    }
    return DebuggerBundle.message("line.breakpoint.display.name",lineNumber);
  }
  return DebuggerBundle.message("status.breakpoint.invalid");
}
