{
  final int lineNumber=(getHighlighter().getDocument().getLineNumber(getHighlighter().getStartOffset()) + 1);
  if (isValid()) {
    final String className=getClassName();
    final boolean hasClassInfo=className != null && className.length() > 0;
    final boolean hasMethodInfo=myMethodName != null && myMethodName.length() > 0;
    if (hasClassInfo || hasMethodInfo) {
      final StringBuilder info=StringBuilderSpinAllocator.alloc();
      try {
        String packageName=null;
        if (hasClassInfo) {
          final int dotIndex=className.lastIndexOf(".");
          if (dotIndex >= 0) {
            info.append(className.substring(dotIndex + 1));
            packageName=className.substring(0,dotIndex);
          }
 else {
            info.append(className);
          }
        }
        if (hasMethodInfo) {
          if (hasClassInfo) {
            info.append(".");
          }
          info.append(myMethodName);
        }
        if (packageName != null) {
          info.append(" (").append(packageName).append(")");
        }
        return DebuggerBundle.message("line.breakpoint.display.name.with.class.or.method",lineNumber,info.toString());
      }
  finally {
        StringBuilderSpinAllocator.dispose(info);
      }
    }
    return DebuggerBundle.message("line.breakpoint.display.name",lineNumber);
  }
  return DebuggerBundle.message("status.breakpoint.invalid");
}
