{
  final PsiDirectory psiDirectory=FindInProjectUtil.getPsiDirectory(findModel,myProject);
  if (findModel.getDirectoryName() != null && psiDirectory == null) {
    return;
  }
  com.intellij.usages.UsageViewManager manager=com.intellij.usages.UsageViewManager.getInstance(myProject);
  if (manager == null)   return;
  final FindManager findManager=FindManager.getInstance(myProject);
  findManager.getFindInProjectModel().copyFrom(findModel);
  final FindModel findModelCopy=(FindModel)findModel.clone();
  final UsageViewPresentation presentation=FindInProjectUtil.setupViewPresentation(myToOpenInNewTab,findModelCopy);
  final boolean showPanelIfOnlyOneUsage=!FindSettings.getInstance().isSkipResultsWithOneUsage();
  final FindUsagesProcessPresentation processPresentation=FindInProjectUtil.setupProcessPresentation(myProject,showPanelIfOnlyOneUsage,presentation);
  ConfigurableUsageTarget usageTarget=new FindInProjectUtil.StringUsageTarget(myProject,findModel);
  ((FindManagerImpl)FindManager.getInstance(myProject)).getFindUsagesManager().addToHistory(usageTarget);
  manager.searchAndShowUsages(new UsageTarget[]{usageTarget},new Factory<UsageSearcher>(){
    @Override public UsageSearcher create(){
      return new UsageSearcher(){
        @Override public void generate(        @NotNull final Processor<Usage> processor){
          myIsFindInProgress=true;
          try {
            Processor<UsageInfo> consumer=new Processor<UsageInfo>(){
              @Override public boolean process(              UsageInfo info){
                Usage usage=UsageInfo2UsageAdapter.CONVERTER.fun(info);
                usage.getPresentation().getIcon();
                return processor.process(usage);
              }
            }
;
            FindInProjectUtil.findUsages(findModelCopy,psiDirectory,myProject,true,consumer,processPresentation);
          }
  finally {
            myIsFindInProgress=false;
          }
        }
      }
;
    }
  }
,processPresentation,presentation,null);
}
