{
  final boolean isOpenInNewTabEnabled;
  final boolean toOpenInNewTab;
  Content selectedContent=UsageViewManager.getInstance(myProject).getSelectedContent(true);
  if (selectedContent != null && selectedContent.isPinned()) {
    toOpenInNewTab=true;
    isOpenInNewTabEnabled=false;
  }
 else {
    toOpenInNewTab=FindSettings.getInstance().isShowResultsInSeparateView();
    isOpenInNewTabEnabled=UsageViewManager.getInstance(myProject).getReusableContentsCount() > 0;
  }
  final FindManager findManager=FindManager.getInstance(myProject);
  final FindModel findModel=findManager.getFindInProjectModel().clone();
  findModel.setReplaceState(false);
  findModel.setOpenInNewTabVisible(true);
  findModel.setOpenInNewTabEnabled(isOpenInNewTabEnabled);
  findModel.setOpenInNewTab(toOpenInNewTab);
  FindInProjectUtil.setDirectoryName(findModel,dataContext);
  String text=PlatformDataKeys.PREDEFINED_TEXT.getData(dataContext);
  if (text != null) {
    FindModel.initStringToFindNoMultiline(findModel,text);
  }
 else {
    Editor editor=CommonDataKeys.EDITOR.getData(dataContext);
    FindUtil.initStringToFindWithSelection(findModel,editor);
  }
  findManager.showFindDialog(findModel,new Runnable(){
    @Override public void run(){
      findModel.setOpenInNewTabVisible(false);
      if (isOpenInNewTabEnabled) {
        FindSettings.getInstance().setShowResultsInSeparateView(findModel.isOpenInNewTab());
      }
      startFindInProject(findModel);
    }
  }
);
  findModel.setOpenInNewTabVisible(false);
}
