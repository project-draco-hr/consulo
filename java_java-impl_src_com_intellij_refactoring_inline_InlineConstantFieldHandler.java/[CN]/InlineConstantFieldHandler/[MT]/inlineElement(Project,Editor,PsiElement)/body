{
  final PsiField field=(PsiField)element;
  if (!field.hasInitializer()) {
    String message=RefactoringBundle.message("no.initializer.present.for.the.field");
    CommonRefactoringUtil.showErrorHint(project,editor,message,REFACTORING_NAME,HelpID.INLINE_FIELD);
    return;
  }
  if (field instanceof PsiEnumConstant) {
    String message=REFACTORING_NAME + " is not supported for enum constants";
    CommonRefactoringUtil.showErrorHint(project,editor,message,REFACTORING_NAME,HelpID.INLINE_FIELD);
    return;
  }
  if (ReferencesSearch.search(field,ProjectScope.getProjectScope(project),false).findFirst() == null) {
    String message=RefactoringBundle.message("field.0.is.never.used",field.getName());
    CommonRefactoringUtil.showErrorHint(project,editor,message,REFACTORING_NAME,HelpID.INLINE_FIELD);
    return;
  }
  if (!field.hasModifierProperty(PsiModifier.FINAL)) {
    final Ref<Boolean> hasWriteUsages=new Ref<Boolean>(false);
    if (!ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
      @Override public void run(){
        for (        PsiReference reference : ReferencesSearch.search(field)) {
          final PsiElement referenceElement=reference.getElement();
          if (!(referenceElement instanceof PsiExpression && PsiUtil.isAccessedForReading((PsiExpression)referenceElement))) {
            hasWriteUsages.set(true);
            break;
          }
        }
      }
    }
,"Check if inline is possible...",true,project)) {
      return;
    }
    if (hasWriteUsages.get()) {
      String message=RefactoringBundle.message("0.refactoring.is.supported.only.for.final.fields",REFACTORING_NAME);
      CommonRefactoringUtil.showErrorHint(project,editor,message,REFACTORING_NAME,HelpID.INLINE_FIELD);
      return;
    }
  }
  PsiReference reference=editor != null ? TargetElementUtilBase.findReference(editor,editor.getCaretModel().getOffset()) : null;
  if (reference != null && !field.equals(reference.resolve())) {
    reference=null;
  }
  if (!CommonRefactoringUtil.checkReadOnlyStatus(project,field))   return;
  PsiReferenceExpression refExpression=reference instanceof PsiReferenceExpression ? (PsiReferenceExpression)reference : null;
  InlineFieldDialog dialog=new InlineFieldDialog(project,field,refExpression);
  dialog.show();
}
