{
  myProperties=properties;
  myIndentLabel.setPreferredSize(new Dimension(20,1));
  myIndentLabel.setMinimumSize(new Dimension(20,1));
  myIndentLabel.setMaximumSize(new Dimension(20,1));
  myKeyStoreButtonsPanel.setBorder(IdeBorderFactory.createEmptyBorder(0,0,5,0));
  myProGuardPanel.setBorder(IdeBorderFactory.createEmptyBorder(10,0,0,0));
  final ActionListener listener=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      UIUtil.setEnabled(myReleaseKeyPanel,myReleaseSignedRadio.isSelected(),true);
    }
  }
;
  myDebugRadio.addActionListener(listener);
  myReleaseUnsignedRadio.addActionListener(listener);
  myReleaseSignedRadio.addActionListener(listener);
  myLoadKeyStoreButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final String defaultPath=getKeyStorePath();
      final VirtualFile defaultFile=LocalFileSystem.getInstance().findFileByPath(defaultPath);
      final FileChooserDescriptor descriptor=FileChooserDescriptorFactory.createSingleFileNoJarsDescriptor();
      final VirtualFile file=FileChooser.chooseFile(descriptor,myPanel,project,defaultFile);
      if (file != null) {
        myKeyStorePathField.setText(FileUtil.toSystemDependentName(file.getPath()));
      }
    }
  }
);
  myCreateKeyStoreButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final NewKeyStoreDialog dialog=new NewKeyStoreDialog(project,myKeyStorePathField.getText());
      dialog.show();
      if (dialog.getExitCode() == DialogWrapper.OK_EXIT_CODE) {
        myKeyStorePathField.setText(dialog.getKeyStorePath());
        myKeyStorePasswordField.setText(String.valueOf(dialog.getKeyStorePassword()));
        myKeyAliasField.setText(dialog.getKeyAlias());
        myKeyPasswordField.setText(String.valueOf(dialog.getKeyPassword()));
      }
    }
  }
);
  myKeyAliasField.getButton().addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final List<String> keys=loadExistingKeys();
      if (keys == null) {
        return;
      }
      final ChooseKeyDialog dialog=new ChooseKeyDialog(project,getKeyStorePath(),myKeyStorePasswordField.getPassword(),keys,getKeyAlias());
      dialog.show();
      if (dialog.getExitCode() == DialogWrapper.OK_EXIT_CODE) {
        final String chosenKey=dialog.getChosenKey();
        if (chosenKey != null) {
          myKeyAliasField.setText(chosenKey);
        }
        final char[] password=dialog.getChosenKeyPassword();
        if (password != null) {
          myKeyPasswordField.setText(String.valueOf(password));
        }
      }
    }
  }
);
  myProGuardCheckBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      UIUtil.setEnabled(myProGuardConfigPanel,myProGuardCheckBox.isSelected(),true);
    }
  }
);
  myProGuardConfigFilePathField.getButton().addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final String path=myProGuardConfigFilePathField.getText().trim();
      VirtualFile defaultFile=path != null && path.length() > 0 ? LocalFileSystem.getInstance().findFileByPath(path) : null;
      if (defaultFile == null) {
        final AndroidFacet facet=AndroidArtifactUtil.getPackagedFacet(project,artifact);
        if (facet != null) {
          defaultFile=AndroidRootUtil.getMainContentRoot(facet);
        }
      }
      final FileChooserDescriptor descriptor=FileChooserDescriptorFactory.createSingleFileNoJarsDescriptor();
      final VirtualFile file=FileChooser.chooseFile(descriptor,myPanel,project,defaultFile);
      if (file != null) {
        myProGuardConfigFilePathField.setText(FileUtil.toSystemDependentName(file.getPath()));
      }
    }
  }
);
}
