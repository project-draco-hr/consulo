{
  if (myRecentSearchText != null && myRecentSearchText.equals(pattern)) {
    if (NameUtil.isUseMinusculeHumpMatcher()) {
      return myMinusculeMatcher.matches(text);
    }
    myRecentSearchMatcher.reset(text);
    return myRecentSearchMatcher.find();
  }
 else {
    myRecentSearchText=pattern;
    @NonNls final StringBuilder buf=StringBuilderSpinAllocator.alloc();
    try {
      translatePattern(buf,pattern);
      try {
        boolean allLowercase=pattern.equals(pattern.toLowerCase());
        final Pattern recentSearchPattern=Pattern.compile(buf.toString(),allLowercase ? Pattern.CASE_INSENSITIVE : 0);
        myRecentSearchMatcher=recentSearchPattern.matcher(text);
        if (NameUtil.isUseMinusculeHumpMatcher()) {
          myMinusculeMatcher=new NameUtil.MinusculeMatcher(myShouldMatchFromTheBeginning ? pattern : "*" + pattern,false,false);
          return myMinusculeMatcher.matches(text);
        }
        return myRecentSearchMatcher.find();
      }
 catch (      PatternSyntaxException ex) {
        myRecentSearchText=null;
      }
    }
  finally {
      StringBuilderSpinAllocator.dispose(buf);
    }
    return false;
  }
}
