{
  final List<String> arguments=new ArrayList<String>();
  final File client=new File(myClientBinaryPath,SystemInfo.isWindows ? exeName + ".exe" : exeName);
  if (client.exists()) {
    arguments.add(client.toString());
  }
 else {
    arguments.add(exeName);
  }
  Collections.addAll(arguments,commandLine);
  if (myTraceClient) {
    System.out.println("*** running:\n" + StringUtil.join(arguments," "));
  }
  final ProcessBuilder builder=new ProcessBuilder().command(arguments);
  if (workingDir != null) {
    builder.directory(workingDir);
  }
  Process clientProcess=builder.start();
  if (stdin != null) {
    OutputStream outputStream=clientProcess.getOutputStream();
    try {
      byte[] bytes=stdin.getBytes();
      outputStream.write(bytes);
    }
  finally {
      outputStream.close();
    }
  }
  CapturingProcessHandler handler=new CapturingProcessHandler(clientProcess,CharsetToolkit.getDefaultSystemCharset());
  ProcessOutput result=handler.runProcess(60 * 1000);
  if (myTraceClient || result.isTimeout()) {
    System.out.println("*** result: " + result.getExitCode());
    final String out=result.getStdout().trim();
    if (out.length() > 0) {
      System.out.println("*** output:\n" + out);
    }
    final String err=result.getStderr().trim();
    if (err.length() > 0) {
      System.out.println("*** error:\n" + err);
    }
  }
  if (result.isTimeout()) {
    throw new RuntimeException("Timeout waiting for VCS client to finish execution");
  }
  return result;
}
