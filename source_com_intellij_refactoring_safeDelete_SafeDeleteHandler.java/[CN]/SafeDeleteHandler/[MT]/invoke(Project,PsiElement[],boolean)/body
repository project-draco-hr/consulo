{
  for (int i=0; i < elements.length; i++) {
    PsiElement element=elements[i];
    if (!SafeDeleteProcessor.validElement(element)) {
      return;
    }
  }
  final PsiElement[] elementsToDelete=DeleteUtil.filterElements(elements);
  Set<PsiElement> elementsSet=new HashSet<PsiElement>(Arrays.asList(elementsToDelete));
  if (checkSuperMethods) {
    for (int i=0; i < elementsToDelete.length; i++) {
      PsiElement element=elementsToDelete[i];
      if (element instanceof PsiMethod) {
        final PsiMethod deepestSuperMethod=PsiSuperMethodUtil.findDeepestSuperMethod((PsiMethod)element);
        if (!elementsSet.contains(deepestSuperMethod)) {
          final PsiMethod method=SuperMethodWarningUtil.checkSuperMethod((PsiMethod)element,"delete (with usage search)");
          if (method == null)           return;
          elementsToDelete[i]=method;
        }
      }
    }
  }
  for (int i=0; i < elementsToDelete.length; i++) {
    PsiElement psiElement=elementsToDelete[i];
    if (!psiElement.isWritable()) {
      RefactoringMessageUtil.showReadOnlyElementRefactoringMessage(project,psiElement);
      return;
    }
  }
  SafeDeleteDialog dialog=new SafeDeleteDialog(project,elementsToDelete,new SafeDeleteDialog.Callback(){
    public void run(    final SafeDeleteDialog dialog){
      SafeDeleteProcessor.createInstance(project,new Runnable(){
        public void run(){
          dialog.close(SafeDeleteDialog.CANCEL_EXIT_CODE);
        }
      }
,elementsToDelete,dialog.isSearchInComments(),dialog.isSearchInNonJava(),true).run(null);
    }
  }
);
  dialog.show();
}
