{
  expression=ParenthesesUtils.stripParentheses(expression);
  if (!(expression instanceof PsiMethodCallExpression)) {
    return false;
  }
  final PsiMethodCallExpression reference=(PsiMethodCallExpression)expression;
  final PsiReferenceExpression methodExpression=reference.getMethodExpression();
  final PsiElement resolved=methodExpression.resolve();
  if (!(resolved instanceof PsiMethod)) {
    return false;
  }
  final PsiMethod method=(PsiMethod)resolved;
  if (!HardcodedMethodConstants.GET.equals(method.getName())) {
    return false;
  }
  final PsiClass aClass=method.getContainingClass();
  return ClassUtils.isSubclass(aClass,CommonClassNames.JAVA_UTIL_LIST);
}
