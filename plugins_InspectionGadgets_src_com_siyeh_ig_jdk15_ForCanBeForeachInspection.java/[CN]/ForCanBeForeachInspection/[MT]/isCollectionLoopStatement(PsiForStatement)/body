{
  final PsiStatement initialization=forStatement.getInitialization();
  if (!(initialization instanceof PsiDeclarationStatement)) {
    return false;
  }
  final PsiDeclarationStatement declaration=(PsiDeclarationStatement)initialization;
  if (declaration.getDeclaredElements().length != 1) {
    return false;
  }
  final PsiLocalVariable variable=(PsiLocalVariable)declaration.getDeclaredElements()[0];
  if (variable == null) {
    return false;
  }
  final PsiType variableType=variable.getType();
  if (!(variableType instanceof PsiClassType)) {
    return false;
  }
  final PsiClassType classType=(PsiClassType)variableType;
  final PsiClass declaredClass=classType.resolve();
  if (declaredClass == null) {
    return false;
  }
  if (!ClassUtils.isSubclass(declaredClass,"java.util.Iterator")) {
    return false;
  }
  final PsiExpression initialValue=variable.getInitializer();
  if (initialValue == null) {
    return false;
  }
  if (!(initialValue instanceof PsiMethodCallExpression)) {
    return false;
  }
  final PsiMethodCallExpression initialCall=(PsiMethodCallExpression)initialValue;
  final PsiReferenceExpression initialMethodExpression=initialCall.getMethodExpression();
  final String initialCallName=initialMethodExpression.getReferenceName();
  if (!HardcodedMethodConstants.ITERATOR.equals(initialCallName)) {
    return false;
  }
  final PsiExpression qualifier=initialMethodExpression.getQualifierExpression();
  final PsiClass qualifierClass;
  if (qualifier == null) {
    qualifierClass=PsiTreeUtil.getParentOfType(initialMethodExpression,PsiClass.class);
  }
 else {
    final PsiType qualifierType=qualifier.getType();
    if (!(qualifierType instanceof PsiClassType)) {
      return false;
    }
    qualifierClass=((PsiClassType)qualifierType).resolve();
  }
  if (qualifierClass == null) {
    return false;
  }
  if (!ClassUtils.isSubclass(qualifierClass,"java.lang.Iterable") && !ClassUtils.isSubclass(qualifierClass,"java.util.Collection")) {
    return false;
  }
  final String iteratorName=variable.getName();
  final PsiExpression condition=forStatement.getCondition();
  if (!isHasNext(condition,iteratorName)) {
    return false;
  }
  final PsiStatement update=forStatement.getUpdate();
  if (update != null && !(update instanceof PsiEmptyStatement)) {
    return false;
  }
  final PsiStatement body=forStatement.getBody();
  if (body == null) {
    return false;
  }
  if (calculateCallsToIteratorNext(iteratorName,body) != 1) {
    return false;
  }
  if (isIteratorRemoveCalled(iteratorName,body)) {
    return false;
  }
  if (isIteratorHasNextCalled(iteratorName,body)) {
    return false;
  }
  return !VariableAccessUtils.variableIsAssigned(variable,body);
}
