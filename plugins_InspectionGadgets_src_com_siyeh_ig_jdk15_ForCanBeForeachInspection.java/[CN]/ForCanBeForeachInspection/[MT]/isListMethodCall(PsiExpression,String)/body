{
  final PsiExpression strippedExpression=ParenthesesUtils.stripParentheses(expression);
  if (!(strippedExpression instanceof PsiMethodCallExpression)) {
    return false;
  }
  final PsiMethodCallExpression reference=(PsiMethodCallExpression)strippedExpression;
  final PsiReferenceExpression methodExpression=reference.getMethodExpression();
  if (!(methodExpression.getQualifierExpression() instanceof PsiReferenceExpression)) {
    return false;
  }
  final PsiElement resolved=methodExpression.resolve();
  if (!(resolved instanceof PsiMethod)) {
    return false;
  }
  final PsiMethod method=(PsiMethod)resolved;
  if (!methodName.equals(method.getName())) {
    return false;
  }
  final PsiClass aClass=method.getContainingClass();
  if (aClass == null) {
    return false;
  }
  final Project project=expression.getProject();
  final PsiManager manager=PsiManager.getInstance(project);
  final PsiClass javaUtilList=manager.findClass("java.util.List",GlobalSearchScope.allScope(project));
  if (javaUtilList == null) {
    return false;
  }
  return InheritanceUtil.isInheritorOrSelf(aClass,javaUtilList,true);
}
