{
  Project project=element.getProject();
  if (element instanceof PsiPackage && module != null) {
    final PsiDirectory[] directories=((PsiPackage)element).getDirectories(module.getModuleScope());
    if (directories.length == 0)     return null;
    return Arrays.asList(directories);
  }
 else   if (element instanceof PsiMethod) {
    final PsiMethod[] methods=SuperMethodWarningUtil.checkSuperMethods((PsiMethod)element,RefactoringBundle.message("to.delete.with.usage.search"),allElementsToDelete);
    if (methods.length == 0)     return null;
    final ArrayList<PsiMethod> psiMethods=new ArrayList<PsiMethod>(Arrays.asList(methods));
    psiMethods.add((PsiMethod)element);
    return psiMethods;
  }
 else   if (element instanceof PsiParameter && ((PsiParameter)element).getDeclarationScope() instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)((PsiParameter)element).getDeclarationScope();
    final Set<PsiParameter> parametersToDelete=new HashSet<PsiParameter>();
    parametersToDelete.add((PsiParameter)element);
    final int parameterIndex=method.getParameterList().getParameterIndex((PsiParameter)element);
    final List<PsiMethod> superMethods=new ArrayList<PsiMethod>(Arrays.asList(method.findDeepestSuperMethods()));
    if (superMethods.isEmpty()) {
      superMethods.add(method);
    }
    for (    PsiMethod superMethod : superMethods) {
      parametersToDelete.add(superMethod.getParameterList().getParameters()[parameterIndex]);
      OverridingMethodsSearch.search(superMethod).forEach(new Processor<PsiMethod>(){
        public boolean process(        PsiMethod overrider){
          parametersToDelete.add(overrider.getParameterList().getParameters()[parameterIndex]);
          return true;
        }
      }
);
    }
    if (parametersToDelete.size() > 1 && !ApplicationManager.getApplication().isUnitTestMode()) {
      String message=RefactoringBundle.message("0.is.a.part.of.method.hierarchy.do.you.want.to.delete.multiple.parameters",UsageViewUtil.getLongName(method));
      if (Messages.showYesNoDialog(project,message,SafeDeleteHandler.REFACTORING_NAME,Messages.getQuestionIcon()) != DialogWrapper.OK_EXIT_CODE)       return null;
    }
    return parametersToDelete;
  }
 else {
    return Collections.singletonList(element);
  }
}
