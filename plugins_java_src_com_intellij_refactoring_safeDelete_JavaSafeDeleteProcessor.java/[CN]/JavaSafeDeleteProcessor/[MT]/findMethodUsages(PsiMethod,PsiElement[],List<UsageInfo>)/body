{
  final Collection<PsiReference> references=ReferencesSearch.search(psiMethod).findAll();
  if (psiMethod.isConstructor()) {
    return findConstructorUsages(psiMethod,references,usages,allElementsToDelete);
  }
  final PsiMethod[] overridingMethods=removeDeletedMethods(OverridingMethodsSearch.search(psiMethod,true).toArray(PsiMethod.EMPTY_ARRAY),allElementsToDelete);
  final HashMap<PsiMethod,Collection<PsiReference>> methodToReferences=new HashMap<PsiMethod,Collection<PsiReference>>();
  for (  PsiMethod overridingMethod : overridingMethods) {
    final Collection<PsiReference> overridingReferences=ReferencesSearch.search(overridingMethod).findAll();
    methodToReferences.put(overridingMethod,overridingReferences);
  }
  final Set<PsiMethod> validOverriding=validateOverridingMethods(psiMethod,references,Arrays.asList(overridingMethods),methodToReferences,usages,allElementsToDelete);
  for (  PsiReference reference : references) {
    final PsiElement element=reference.getElement();
    if (!isInside(element,allElementsToDelete) && !isInside(element,validOverriding)) {
      usages.add(new SafeDeleteReferenceJavaDeleteUsageInfo(element,psiMethod,PsiTreeUtil.getParentOfType(element,PsiImportStaticStatement.class) != null));
    }
  }
  return new Condition<PsiElement>(){
    public boolean value(    PsiElement usage){
      if (usage instanceof PsiFile)       return false;
      return isInside(usage,allElementsToDelete) || isInside(usage,validOverriding);
    }
  }
;
}
