{
  myChannelFactory=new NioClientSocketChannelFactory(Executors.newCachedThreadPool(),Executors.newCachedThreadPool(),1);
  myPipelineFactory=new ChannelPipelineFactory(){
    public ChannelPipeline getPipeline() throws Exception {
      return Channels.pipeline(new ProtobufVarint32FrameDecoder(),new ProtobufDecoder(JpsRemoteProto.Message.getDefaultInstance()),new ProtobufVarint32LengthFieldPrepender(),new ProtobufEncoder(),new ClientMessageHandler(){
        protected JpsServerResponseHandler getHandler(        UUID sessionId){
          final RequestFuture future=myHandlers.get(sessionId);
          return future != null ? future.getHandler() : null;
        }
        protected void terminateSession(        UUID sessionId){
          final RequestFuture future=myHandlers.remove(sessionId);
          if (future != null) {
            final JpsServerResponseHandler handler=future.getHandler();
            try {
              if (handler != null) {
                try {
                  handler.sessionTerminated();
                }
 catch (                Throwable ignored) {
                  ignored.printStackTrace();
                }
              }
            }
  finally {
              future.setDone();
            }
          }
        }
        public void channelClosed(        ChannelHandlerContext ctx,        ChannelStateEvent e) throws Exception {
          try {
            super.channelClosed(ctx,e);
          }
  finally {
            for (            UUID uuid : new ArrayList<UUID>(myHandlers.keySet())) {
              terminateSession(uuid);
            }
          }
        }
      }
);
    }
  }
;
}
