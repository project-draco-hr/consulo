{
  if (lastParent instanceof GrReferenceList || PsiTreeUtil.getParentOfType(place,GrReferenceList.class) != null) {
    return Arrays.asList(grType.getInnerClasses());
  }
  List<PsiClass> classes=RecursionManager.doPreventingRecursion(grType,true,new Computable<List<PsiClass>>(){
    @Override public List<PsiClass> compute(){
      List<PsiClass> result=new ArrayList<PsiClass>();
      for (      CandidateInfo info : CollectClassMembersUtil.getAllInnerClasses(grType,false).values()) {
        final PsiClass inner=(PsiClass)info.getElement();
        if (lastParent == null || !inner.getContainingClass().isInterface()) {
          ContainerUtil.addIfNotNull(result,inner);
        }
      }
      return result;
    }
  }
);
  if (classes == null) {
    return Arrays.asList(grType.getInnerClasses());
  }
  return classes;
}
