{
  return RecursionManager.createGuard("groovyDelegateFields").doPreventingRecursion(grType,true,new Computable<List<PsiClassType>>(){
    @Override public List<PsiClassType> compute(){
      List<PsiClassType> result=new ArrayList<PsiClassType>();
      final GrField[] fields=grType.getCodeFields();
      for (      GrField field : fields) {
        final PsiAnnotation delegate=PsiImplUtil.getAnnotation(field,GroovyCommonClassNames.GROOVY_LANG_DELEGATE);
        if (delegate == null)         continue;
        final boolean shouldImplement=shouldImplementDelegatedInterfaces(delegate);
        if (!shouldImplement)         continue;
        final PsiType type=field.getDeclaredType();
        if (!(type instanceof PsiClassType))         continue;
        final PsiClass psiClass=((PsiClassType)type).resolve();
        if (psiClass == null)         continue;
        if (psiClass instanceof GrTypeDefinition) {
          getImplementListsInner((GrTypeDefinition)psiClass,result,visited);
        }
 else {
          result.addAll(Arrays.asList(psiClass.getImplementsListTypes()));
        }
        if (psiClass.isInterface()) {
          result.add((PsiClassType)type);
        }
      }
      return result;
    }
  }
);
}
