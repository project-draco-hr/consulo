{
  CachedValue<Collection<PsiMethod>> cachedValue=clazz.getUserData(DELEGATE_METHOD_CACHE_KEY);
  if (cachedValue == null) {
    final CachedValuesManager cachedValuesManager=CachedValuesManager.getManager(clazz.getProject());
    cachedValue=cachedValuesManager.createCachedValue(new CachedValueProvider<Collection<PsiMethod>>(){
      @Override public Result<Collection<PsiMethod>> compute(){
        List<PsiMethod> result=new ArrayList<PsiMethod>();
        final GrField[] fields=clazz.getFields();
        for (        GrField field : fields) {
          final PsiAnnotation delegate=getAnnotation(field,GroovyCommonClassNames.GROOVY_LANG_DELEGATE);
          if (delegate == null)           continue;
          final PsiType type=field.getDeclaredType();
          if (!(type instanceof PsiClassType))           continue;
          final PsiClass psiClass=((PsiClassType)type).resolve();
          if (psiClass == null)           continue;
          final boolean deprecated=shouldDelegateDeprecated(delegate);
          final List<PsiMethod> methods;
          if (psiClass instanceof GrTypeDefinition) {
            methods=((GrTypeDefinition)psiClass).getBody().getMethods();
          }
 else {
            methods=Arrays.asList(psiClass.getMethods());
          }
          for (          PsiMethod method : methods) {
            if (method.isConstructor())             continue;
            if (!deprecated && getAnnotation(method,"java.lang.Deprecated") != null)             continue;
            result.add(generateDelegateMethod(method,clazz));
          }
        }
        return new Result<Collection<PsiMethod>>(result,PsiModificationTracker.JAVA_STRUCTURE_MODIFICATION_COUNT);
      }
    }
,false);
    clazz.putUserData(DELEGATE_METHOD_CACHE_KEY,cachedValue);
  }
  return cachedValue.getValue();
}
