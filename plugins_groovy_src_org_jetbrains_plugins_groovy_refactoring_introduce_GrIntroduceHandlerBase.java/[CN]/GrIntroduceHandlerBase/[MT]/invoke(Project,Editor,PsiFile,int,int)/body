{
  try {
    PsiDocumentManager.getInstance(project).commitAllDocuments();
    if (!(file instanceof GroovyFileBase)) {
      throw new GrRefactoringError(GroovyRefactoringBundle.message("only.in.groovy.files"));
    }
    if (!CommonRefactoringUtil.checkReadOnlyStatus(project,file)) {
      throw new GrRefactoringError(RefactoringBundle.message("readonly.occurences.found"));
    }
    GrExpression selectedExpr=findExpression(file,startOffset,endOffset);
    final GrVariable variable=findVariable(file,startOffset,endOffset);
    if (variable != null) {
      checkVariable(variable);
    }
 else     if (selectedExpr != null) {
      checkExpression(selectedExpr);
    }
 else {
      throw new GrRefactoringError(null);
    }
    final GrIntroduceContext context=getContext(project,editor,selectedExpr,variable);
    checkOccurrences(context.occurrences);
    final Settings settings=showDialog(context);
    if (settings == null)     return false;
    CommandProcessor.getInstance().executeCommand(context.project,new Runnable(){
      public void run(){
        AccessToken accessToken=WriteAction.start();
        try {
          runRefactoring(context,settings);
        }
  finally {
          accessToken.finish();
        }
      }
    }
,getRefactoringName(),null);
    return true;
  }
 catch (  GrRefactoringError e) {
    CommonRefactoringUtil.showErrorHint(project,editor,RefactoringBundle.getCannotRefactorMessage(e.getMessage()),getRefactoringName(),getHelpID());
    return false;
  }
}
