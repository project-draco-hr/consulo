{
  if (myOnValidateAttempt) {
    myOnValidateAttempt=false;
    return;
  }
  clear();
  GradleProjectImportBuilder builder=getBuilder();
  if (builder == null) {
    return;
  }
  GradleProject project=builder.getGradleProject();
  if (project == null) {
    throw new IllegalStateException(String.format("Can't init 'adjust importing settings' step. Reason: no project is defined. Context: '%s', builder: '%s'",getWizardContext(),getBuilder()));
  }
  Map<GradleEntity,Pair<String,Collection<GradleProjectStructureNode>>> entity2nodes=new HashMap<GradleEntity,Pair<String,Collection<GradleProjectStructureNode>>>();
  int counter=0;
  GradleProjectStructureNode<GradleProject> root=buildNode(project,entity2nodes,counter++);
  List<GradleModule> modules=new ArrayList<GradleModule>(project.getModules());
  Collections.sort(modules,Named.COMPARATOR);
  List<MutableTreeNode> moduleNodes=new ArrayList<MutableTreeNode>();
  Map<GradleModule,GradleModule> moduleMappings=new HashMap<GradleModule,GradleModule>();
  GradleEntityCloneContext cloneContext=new GradleEntityCloneContext();
  for (  GradleModule module : modules) {
    GradleModule moduleCopy=module.clone(cloneContext);
    moduleMappings.put(module,moduleCopy);
    GradleProjectStructureNode<GradleModule> moduleNode=buildNode(module,entity2nodes,counter++);
    moduleNodes.add(moduleNode);
    for (    GradleContentRoot contentRoot : moduleCopy.getContentRoots()) {
      moduleNode.add(buildNode(contentRoot,entity2nodes,counter++));
    }
    Collection<GradleDependency> dependencies=module.getDependencies();
    if (!dependencies.isEmpty()) {
      GradleProjectStructureNode<String> dependenciesNode=new GradleProjectStructureNode<String>(GradleConstants.DEPENDENCIES_NODE_DESCRIPTOR,GradleEntityType.SYNTHETIC);
      final List<GradleModuleDependency> moduleDependencies=new ArrayList<GradleModuleDependency>();
      final List<GradleLibraryDependency> libraryDependencies=new ArrayList<GradleLibraryDependency>();
      GradleEntityVisitor visitor=new GradleEntityVisitorAdapter(){
        @Override public void visit(        @NotNull GradleModuleDependency dependency){
          moduleDependencies.add(dependency);
        }
        @Override public void visit(        @NotNull GradleLibraryDependency dependency){
          libraryDependencies.add(dependency);
        }
      }
;
      for (      GradleDependency dependency : dependencies) {
        dependency.invite(visitor);
      }
      Collections.sort(moduleDependencies,GradleModuleDependency.COMPARATOR);
      Collections.sort(libraryDependencies,Named.COMPARATOR);
      for (      GradleModuleDependency dependency : moduleDependencies) {
        dependenciesNode.add(buildNode(dependency,entity2nodes,counter++));
      }
      for (      GradleLibraryDependency dependency : libraryDependencies) {
        dependenciesNode.add(buildNode(dependency,entity2nodes,counter++));
      }
      moduleNode.add(dependenciesNode);
    }
  }
  myTreeModel.setRoot(root);
  myTree.setSelectionPath(new TreePath(root));
  Collection<? extends GradleLibrary> libraries=project.getLibraries();
  if (libraries.isEmpty()) {
    for (    MutableTreeNode node : moduleNodes) {
      root.add(node);
    }
  }
 else {
    GradleProjectStructureNode<String> modulesNode=new GradleProjectStructureNode<String>(GradleConstants.MODULES_NODE_DESCRIPTOR,GradleEntityType.SYNTHETIC);
    for (    MutableTreeNode node : moduleNodes) {
      modulesNode.add(node);
    }
    root.add(modulesNode);
    List<GradleLibrary> sortedLibraries=new ArrayList<GradleLibrary>(libraries);
    Collections.sort(sortedLibraries,Named.COMPARATOR);
    GradleProjectStructureNode<String> librariesNode=new GradleProjectStructureNode<String>(GradleConstants.LIBRARIES_NODE_DESCRIPTOR,GradleEntityType.SYNTHETIC);
    for (    GradleLibrary library : sortedLibraries) {
      librariesNode.add(buildNode(library,entity2nodes,counter++));
    }
    root.add(librariesNode);
    myTree.expandPath(new TreePath(modulesNode.getPath()));
    myTree.expandPath(new TreePath(librariesNode.getPath()));
  }
  myTree.expandPath(new TreePath(root.getPath()));
  builder.setModuleMappings(moduleMappings);
}
