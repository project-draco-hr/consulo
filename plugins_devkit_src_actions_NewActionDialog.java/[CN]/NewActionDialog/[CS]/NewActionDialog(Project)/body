{
  super(project,false);
  myProject=project;
  init();
  setTitle(DevKitBundle.message("new.action.dialog.title"));
  final ActionManager actionManager=ActionManager.getInstance();
  final String[] actionIds=actionManager.getActionIds("");
  Arrays.sort(actionIds);
  final List<ActionGroup> actionGroups=new ArrayList<ActionGroup>();
  for (  String actionId : actionIds) {
    if (actionManager.isGroup(actionId)) {
      final AnAction anAction=actionManager.getAction(actionId);
      if (anAction instanceof DefaultActionGroup) {
        actionGroups.add((ActionGroup)anAction);
      }
    }
  }
  myGroupList.setListData(actionGroups.toArray());
  myGroupList.setCellRenderer(new MyActionRenderer());
  myGroupList.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      ActionGroup group=(ActionGroup)myGroupList.getSelectedValue();
      if (group == null) {
        myActionList.setListData(new Object[0]);
      }
 else {
        final AnAction[] actions=group.getChildren(null);
        List<AnAction> realActions=new ArrayList<AnAction>();
        for (        AnAction action : actions) {
          if (actionManager.getId(action) != null) {
            realActions.add(action);
          }
        }
        myActionList.setListData(realActions.toArray());
      }
    }
  }
);
  myActionList.setCellRenderer(new MyActionRenderer());
  myActionList.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      updateControls();
    }
  }
);
  final MyDocumentListener listener=new MyDocumentListener();
  myActionIdEdit.getDocument().addDocumentListener(listener);
  myActionNameEdit.getDocument().addDocumentListener(listener);
  myActionTextEdit.getDocument().addDocumentListener(listener);
  myAnchorButtonGroup=new ButtonGroup();
  myAnchorButtonGroup.add(myAnchorFirstRadio);
  myAnchorButtonGroup.add(myAnchorLastRadio);
  myAnchorButtonGroup.add(myAnchorBeforeRadio);
  myAnchorButtonGroup.add(myAnchorAfterRadio);
  myAnchorButtonGroup.setSelected(myAnchorFirstRadio.getModel(),true);
  myFirstKeystrokeEdit=new ShortcutTextField();
  myFirstKeystrokeEditPlaceholder.setLayout(new BorderLayout());
  myFirstKeystrokeEditPlaceholder.add(myFirstKeystrokeEdit,BorderLayout.CENTER);
  myClearFirstKeystroke.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      myFirstKeystrokeEdit.setKeyStroke(null);
    }
  }
);
  myFirstKeystrokeEdit.getDocument().addDocumentListener(listener);
  myClearFirstKeystroke.setText(null);
  final Icon icon=IconLoader.findIcon("/actions/cancel.png");
  final Dimension size=new Dimension(icon.getIconWidth(),icon.getIconHeight());
  myClearFirstKeystroke.setIcon(icon);
  myClearFirstKeystroke.setPreferredSize(size);
  myClearFirstKeystroke.setMaximumSize(size);
  mySecondKeystrokeEdit=new ShortcutTextField();
  mySecondKeystrokeEditPlaceholder.setLayout(new BorderLayout());
  mySecondKeystrokeEditPlaceholder.add(mySecondKeystrokeEdit,BorderLayout.CENTER);
  myClearSecondKeystroke.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      mySecondKeystrokeEdit.setKeyStroke(null);
    }
  }
);
  mySecondKeystrokeEdit.getDocument().addDocumentListener(listener);
  myClearSecondKeystroke.setText(null);
  myClearSecondKeystroke.setIcon(icon);
  myClearSecondKeystroke.setPreferredSize(size);
  myClearSecondKeystroke.setMaximumSize(size);
  updateControls();
}
