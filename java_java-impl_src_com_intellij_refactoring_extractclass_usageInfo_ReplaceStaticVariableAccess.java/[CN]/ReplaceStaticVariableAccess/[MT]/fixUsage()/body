{
  if (myEnumConstant) {
    final PsiSwitchLabelStatement switchStatement=PsiTreeUtil.getParentOfType(expression,PsiSwitchLabelStatement.class);
    if (switchStatement != null) {
      MutationUtils.replaceExpression(expression.getReferenceName(),expression);
      return;
    }
  }
  boolean replaceWithGetEnumValue=myEnumConstant;
  if (replaceWithGetEnumValue) {
    final PsiMethodCallExpression callExpression=PsiTreeUtil.getParentOfType(expression,PsiMethodCallExpression.class);
    if (callExpression != null) {
      final PsiElement resolved=callExpression.getMethodExpression().resolve();
      if (resolved instanceof PsiMethod) {
        final PsiParameter[] parameters=((PsiMethod)resolved).getParameterList().getParameters();
        final PsiExpression[] args=callExpression.getArgumentList().getExpressions();
        final int idx=ArrayUtil.find(args,expression);
        if (idx != -1 && parameters[idx].getType().getCanonicalText().equals(delegateClass)) {
          replaceWithGetEnumValue=false;
        }
      }
    }
 else {
      final PsiReturnStatement returnStatement=PsiTreeUtil.getParentOfType(expression,PsiReturnStatement.class);
      if (returnStatement != null) {
        final PsiMethod psiMethod=PsiTreeUtil.getParentOfType(expression,PsiMethod.class);
        LOGGER.assertTrue(psiMethod != null);
        final PsiType returnType=psiMethod.getReturnType();
        if (returnType != null && returnType.getCanonicalText().equals(delegateClass)) {
          replaceWithGetEnumValue=false;
        }
      }
    }
  }
  final String link=replaceWithGetEnumValue ? "." + PropertyUtil.suggestGetterName("value",expression.getType()) + "()" : "";
  MutationUtils.replaceExpression(delegateClass + '.' + expression.getReferenceName()+ link,expression);
}
