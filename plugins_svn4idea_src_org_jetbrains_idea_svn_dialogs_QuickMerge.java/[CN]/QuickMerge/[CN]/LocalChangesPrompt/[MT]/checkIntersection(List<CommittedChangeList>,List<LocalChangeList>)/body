{
  if (lists == null || lists.isEmpty()) {
    return null;
  }
  final Set<FilePath> mergePaths=new HashSet<FilePath>();
  for (  CommittedChangeList list : lists) {
    final SvnChangeList svnList=(SvnChangeList)list;
    final List<String> paths=new ArrayList<String>(svnList.getAddedPaths());
    paths.addAll(svnList.getChangedPaths());
    paths.addAll(svnList.getDeletedPaths());
    for (    String path : paths) {
      final File localPath=getLocalPath(path);
      if (localPath != null) {
        mergePaths.add(new FilePathImpl(localPath,false));
      }
    }
  }
  final Intersection intersection=new Intersection();
  for (  LocalChangeList localChangeList : localChangeLists) {
    final Collection<Change> localChanges=localChangeList.getChanges();
    for (    Change localChange : localChanges) {
      final FilePath before=localChange.getBeforeRevision() == null ? null : localChange.getBeforeRevision().getFile();
      final FilePath after=localChange.getAfterRevision() == null ? null : localChange.getAfterRevision().getFile();
      if ((before != null && mergePaths.contains(before)) || (after != null && mergePaths.contains(after))) {
        intersection.add(localChangeList.getName(),localChangeList.getComment(),localChange);
      }
    }
  }
  return intersection;
}
