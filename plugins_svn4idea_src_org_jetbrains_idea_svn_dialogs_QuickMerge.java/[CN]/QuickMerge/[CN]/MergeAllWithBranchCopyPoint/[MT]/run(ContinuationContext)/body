{
  SvnBranchPointsCalculator.WrapperInvertor<SvnBranchPointsCalculator.BranchCopyData> invertor;
  try {
    final TransparentlyFailedValueI<SvnBranchPointsCalculator.WrapperInvertor<SvnBranchPointsCalculator.BranchCopyData>,SVNException> transparentlyFailedValueI=myData.get();
    if (transparentlyFailedValueI == null) {
      finishWithError(context,"Merge start wasn't found",true);
      return;
    }
    invertor=transparentlyFailedValueI.get();
  }
 catch (  SVNException e) {
    finishWithError(context,"Merge start wasn't found",Collections.singletonList(new VcsException(e)));
    return;
  }
  if (invertor == null) {
    finishWithError(context,"Merge start wasn't found",true);
    return;
  }
  final boolean reintegrate=invertor.isInvertedSense();
  if (reintegrate && (!prompt("<html><body>You are going to reintegrate changes.<br><br>This will make branch '" + mySourceUrl + "' <b>no longer usable for further work</b>."+ "<br>It will not be able to correctly absorb new trunk ("+ invertor.inverted().getTarget()+ ") changes,<br>nor can this branch be properly reintegrated to trunk again.<br><br>Are you sure?</body></html>"))) {
    context.cancelEverything();
    return;
  }
  final MergerFactory mergerFactory=createBranchMergerFactory(reintegrate,invertor);
  final String title="Merging all from " + myBranchName + (reintegrate ? " (reintegrate)" : "");
  context.next(new MergeTask(mergerFactory,title));
}
