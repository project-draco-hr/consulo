{
  myVcs.getSvnBranchPointsCalculator().getFirstCopyPoint(myWcInfo.getRepositoryRoot(),mySourceUrl,myWcInfo.getRootUrl(),new Consumer<SvnBranchPointsCalculator.WrapperInvertor<SvnBranchPointsCalculator.BranchCopyData>>(){
    public void consume(    final SvnBranchPointsCalculator.WrapperInvertor<SvnBranchPointsCalculator.BranchCopyData> result){
      if (result == null) {
        showErrorBalloon("Merge start wasn't found");
        return;
      }
      final boolean reintegrate=result.isInvertedSense();
      if (reintegrate && (!prompt("You are going to reintegrate changes.\nThis will make " + mySourceUrl + " no longer usable for further work."+ "\nAre you sure?")))       return;
      final MergerFactory mergerFactory=new MergerFactory(){
        public IMerger createMerger(        SvnVcs vcs,        File target,        UpdateEventHandler handler,        SVNURL currentBranchUrl,        String branchName){
          return new BranchMerger(vcs,currentBranchUrl,myWcInfo.getUrl(),myWcInfo.getPath(),handler,reintegrate,myBranchName,reintegrate ? result.getWrapped().getTargetRevision() : result.getWrapped().getSourceRevision());
        }
      }
;
      final String title="Merging all from " + myBranchName + (reintegrate ? " (reintegrate)" : "");
      doMerge(mergerFactory,title);
    }
  }
);
}
