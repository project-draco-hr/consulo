{
  super.visitClassObjectAccessExpression(expression);
  final PsiElement parent=expression.getParent();
  if (!(parent instanceof PsiExpressionList)) {
    return;
  }
  final PsiElement grandParent=parent.getParent();
  if (!(grandParent instanceof PsiMethodCallExpression)) {
    return;
  }
  final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)grandParent;
  final PsiExpressionList argumentList=methodCallExpression.getArgumentList();
  final PsiExpression[] expressions=argumentList.getExpressions();
  if (expressions.length != 1) {
    return;
  }
  final PsiClass containingClass=PsiTreeUtil.getParentOfType(expression,PsiClass.class);
  if (containingClass == null) {
    return;
  }
  final String containingClassName=containingClass.getName();
  if (containingClassName == null) {
    return;
  }
  final PsiMethod method=methodCallExpression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiClass aClass=method.getContainingClass();
  if (aClass == null) {
    return;
  }
  final String className=aClass.getQualifiedName();
  final int index=loggerFactoryClassNames.indexOf(className);
  if (index < 0) {
    return;
  }
  final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
  final String referenceName=methodExpression.getReferenceName();
  final String loggerFactoryMethodName=loggerFactoryMethodNames.get(index);
  if (!loggerFactoryMethodName.equals(referenceName)) {
    return;
  }
  final PsiTypeElement operand=expression.getOperand();
  final PsiType type=operand.getType();
  if (!(type instanceof PsiClassType)) {
    return;
  }
  final PsiClassType classType=(PsiClassType)type;
  final PsiClass initializerClass=classType.resolve();
  if (initializerClass == null) {
    return;
  }
  if (containingClass.equals(initializerClass)) {
    return;
  }
  registerError(expression,containingClassName);
}
