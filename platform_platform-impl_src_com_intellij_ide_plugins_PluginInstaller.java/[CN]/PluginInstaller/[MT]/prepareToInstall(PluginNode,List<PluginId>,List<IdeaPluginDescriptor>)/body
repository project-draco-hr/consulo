{
  val depends=new ArrayListSet<PluginNode>();
  val unknownDepends=new ArrayListSet<String>();
  collectDepends(toInstall,toInstallAll,depends,allPlugins,unknownDepends);
  if (!unknownDepends.isEmpty()) {
    val ref=new boolean[1];
    UIUtil.invokeAndWaitIfNeeded(new Runnable(){
      @Override public void run(){
        String mergedIds=StringUtil.join(unknownDepends,", ");
        String title=IdeBundle.message("plugin.manager.unknown.dependencies.detected.title");
        String message=IdeBundle.message("plugin.manager.unknown.dependencies.detected.message",unknownDepends.size(),mergedIds);
        ref[0]=Messages.showYesNoDialog(message,title,Messages.getWarningIcon()) == Messages.YES;
      }
    }
);
    if (!ref[0]) {
      return null;
    }
  }
  val toDownloadList=new ArrayListSet<PluginNode>();
  if (!depends.isEmpty()) {
    UIUtil.invokeAndWaitIfNeeded(new Runnable(){
      @Override public void run(){
        String mergedIds=StringUtil.join(depends,new Function<PluginNode,String>(){
          @Override public String fun(          PluginNode pluginNode){
            return pluginNode.getName();
          }
        }
,", ");
        String title=IdeBundle.message("plugin.manager.dependencies.detected.title");
        String message=IdeBundle.message("plugin.manager.dependencies.detected.message",depends.size(),mergedIds);
        if (Messages.showYesNoDialog(message,title,Messages.getWarningIcon()) == Messages.YES) {
          toDownloadList.addAll(depends);
        }
      }
    }
);
  }
  toDownloadList.add(toInstall);
  for (  PluginNode pluginNode : toDownloadList) {
    PluginDownloader downloader=null;
    final String repositoryName=pluginNode.getRepositoryName();
    if (repositoryName != null) {
      try {
        final List<PluginDownloader> downloaders=new ArrayList<PluginDownloader>();
        if (!UpdateChecker.checkPluginsHost(repositoryName,downloaders)) {
          return null;
        }
        for (        PluginDownloader pluginDownloader : downloaders) {
          if (Comparing.strEqual(pluginDownloader.getPluginId(),pluginNode.getPluginId().getIdString())) {
            downloader=pluginDownloader;
            break;
          }
        }
        if (downloader == null)         return null;
      }
 catch (      Exception e) {
        return null;
      }
    }
 else {
      downloader=PluginDownloader.createDownloader(pluginNode);
    }
    if (downloader.prepareToInstall(ProgressManager.getInstance().getProgressIndicator())) {
      downloader.install(true);
      pluginNode.setStatus(PluginNode.STATUS_DOWNLOADED);
    }
 else {
      return null;
    }
  }
  return toDownloadList;
}
