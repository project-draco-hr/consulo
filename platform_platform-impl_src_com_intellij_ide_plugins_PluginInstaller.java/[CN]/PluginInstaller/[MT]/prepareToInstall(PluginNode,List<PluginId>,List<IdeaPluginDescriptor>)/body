{
  if (pluginNode.getDepends() != null && pluginNode.getDepends().size() > 0) {
    final PluginId[] optionalDependentPluginIds=pluginNode.getOptionalDependentPluginIds();
    final List<PluginNode> depends=new ArrayList<PluginNode>();
    final List<PluginNode> optionalDeps=new ArrayList<PluginNode>();
    for (int i=0; i < pluginNode.getDepends().size(); i++) {
      PluginId depPluginId=pluginNode.getDepends().get(i);
      if (PluginManager.isPluginInstalled(depPluginId) || (pluginIds != null && pluginIds.contains(depPluginId))) {
        continue;
      }
      PluginNode depPlugin=new PluginNode(depPluginId);
      depPlugin.setSize("-1");
      depPlugin.setName(depPluginId.getIdString());
      if (isPluginInRepo(depPluginId,allPlugins)) {
        if (ArrayUtil.indexOf(optionalDependentPluginIds,depPluginId) != -1) {
          optionalDeps.add(depPlugin);
        }
 else {
          depends.add(depPlugin);
        }
      }
    }
    if (depends.size() > 0) {
      final boolean[] proceed=new boolean[1];
      final StringBuilder buf=new StringBuilder();
      for (      PluginNode depend : depends) {
        buf.append(depend.getName()).append(",");
      }
      try {
        GuiUtils.runOrInvokeAndWait(new Runnable(){
          @Override public void run(){
            String title=IdeBundle.message("plugin.manager.dependencies.detected.title");
            String message=IdeBundle.message("plugin.manager.dependencies.detected.message",depends.size(),buf.substring(0,buf.length() - 1));
            proceed[0]=Messages.showYesNoDialog(message,title,Messages.getWarningIcon()) == Messages.YES;
          }
        }
);
      }
 catch (      Exception e) {
        return false;
      }
      if (proceed[0]) {
        if (!prepareToInstall(depends,allPlugins)) {
          return false;
        }
      }
 else {
        return false;
      }
    }
    if (optionalDeps.size() > 0) {
      final StringBuilder buf=new StringBuilder();
      for (      PluginNode depend : optionalDeps) {
        buf.append(depend.getName()).append(",");
      }
      final boolean[] proceed=new boolean[1];
      try {
        GuiUtils.runOrInvokeAndWait(new Runnable(){
          @Override public void run(){
            proceed[0]=Messages.showYesNoDialog(IdeBundle.message("plugin.manager.optional.dependencies.detected.message",optionalDeps.size(),buf.substring(0,buf.length() - 1)),IdeBundle.message("plugin.manager.dependencies.detected.title"),Messages.getWarningIcon()) == Messages.YES;
          }
        }
);
      }
 catch (      Exception e) {
        return false;
      }
      if (proceed[0]) {
        if (!prepareToInstall(optionalDeps,allPlugins)) {
          return false;
        }
      }
    }
  }
synchronized (myLock) {
    PluginDownloader downloader=null;
    final String repositoryName=pluginNode.getRepositoryName();
    if (repositoryName != null) {
      try {
        final List<PluginDownloader> downloaders=new ArrayList<PluginDownloader>();
        if (!UpdateChecker.checkPluginsHost(repositoryName,downloaders)) {
          return false;
        }
        for (        PluginDownloader pluginDownloader : downloaders) {
          if (Comparing.strEqual(pluginDownloader.getPluginId(),pluginNode.getPluginId().getIdString())) {
            downloader=pluginDownloader;
            break;
          }
        }
        if (downloader == null)         return false;
      }
 catch (      Exception e) {
        return false;
      }
    }
 else {
      downloader=PluginDownloader.createDownloader(pluginNode);
    }
    if (downloader.prepareToInstall(ProgressManager.getInstance().getProgressIndicator())) {
      downloader.install();
      pluginNode.setStatus(PluginNode.STATUS_DOWNLOADED);
    }
 else {
      return false;
    }
  }
  return true;
}
