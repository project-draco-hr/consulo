{
  myManager=manager;
  myIsEmpty=true;
  myIsShown=false;
  myEditorPane=new JEditorPane(UIUtil.HTML_MIME,""){
    public Dimension getPreferredScrollableViewportSize(){
      if (getWidth() == 0 || getHeight() == 0) {
        setSize(MAX_WIDTH,MAX_HEIGHT);
      }
      Insets ins=myEditorPane.getInsets();
      View rootView=myEditorPane.getUI().getRootView(myEditorPane);
      rootView.setSize(MAX_WIDTH,MAX_HEIGHT);
      int prefHeight=(int)rootView.getPreferredSpan(View.Y_AXIS);
      prefHeight+=ins.bottom + ins.top + myScrollPane.getHorizontalScrollBar().getMaximumSize().height;
      return new Dimension(MAX_WIDTH,Math.max(MIN_HEIGHT,Math.min(MAX_HEIGHT,prefHeight)));
    }
{
      enableEvents(KeyEvent.KEY_EVENT_MASK);
    }
    protected void processKeyEvent(    KeyEvent e){
      KeyStroke keyStroke=KeyStroke.getKeyStrokeForEvent(e);
      ActionListener listener=myKeyboardActions.get(keyStroke);
      if (listener != null) {
        listener.actionPerformed(new ActionEvent(DocumentationComponent.this,0,""));
        e.consume();
        return;
      }
      super.processKeyEvent(e);
    }
    @Override protected void paintComponent(    Graphics g){
      UISettings.setupAntialiasing(g);
      super.paintComponent(g);
    }
  }
;
  myText="";
  myEditorPane.setEditable(false);
  myEditorPane.setBackground(HintUtil.INFORMATION_COLOR);
  myEditorPane.setEditorKit(UIUtil.getHTMLEditorKit());
  myScrollPane=new JBScrollPane(myEditorPane){
    @Override protected void processMouseWheelEvent(    MouseWheelEvent e){
      if (!EditorSettingsExternalizable.getInstance().isWheelFontChangeEnabled() || !EditorUtil.isChangeFontSize(e)) {
        super.processMouseWheelEvent(e);
        return;
      }
      int change=Math.abs(e.getWheelRotation());
      boolean increase=e.getWheelRotation() <= 0;
      EditorColorsManager colorsManager=EditorColorsManager.getInstance();
      EditorColorsScheme scheme=colorsManager.getGlobalScheme();
      FontSize newFontSize=scheme.getQuickDocFontSize();
      for (; change > 0; change--) {
        if (increase) {
          newFontSize=newFontSize.larger();
        }
 else {
          newFontSize=newFontSize.smaller();
        }
      }
      if (newFontSize == scheme.getQuickDocFontSize()) {
        return;
      }
      scheme.setQuickDocFontSize(newFontSize);
      applyFontSize();
    }
  }
;
  myScrollPane.setBorder(null);
  final MouseAdapter mouseAdapter=new MouseAdapter(){
    public void mousePressed(    MouseEvent e){
      myManager.requestFocus();
    }
  }
;
  myEditorPane.addMouseListener(mouseAdapter);
  Disposer.register(this,new Disposable(){
    public void dispose(){
      myEditorPane.removeMouseListener(mouseAdapter);
    }
  }
);
  final FocusAdapter focusAdapter=new FocusAdapter(){
    public void focusLost(    FocusEvent e){
      Component previouslyFocused=WindowManagerEx.getInstanceEx().getFocusedComponent(manager.getProject(getElement()));
      if (!(previouslyFocused == myEditorPane)) {
        if (myHint != null && !myHint.isDisposed())         myHint.cancel();
      }
    }
  }
;
  myEditorPane.addFocusListener(focusAdapter);
  Disposer.register(this,new Disposable(){
    public void dispose(){
      myEditorPane.removeFocusListener(focusAdapter);
    }
  }
);
  setLayout(new BorderLayout());
  add(myScrollPane,BorderLayout.CENTER);
  myScrollPane.setViewportBorder(JBScrollPane.createIndentBorder());
  final DefaultActionGroup actions=new DefaultActionGroup();
  actions.add(new BackAction());
  actions.add(new ForwardAction());
  actions.add(myExternalDocAction=new ExternalDocAction());
  if (additionalActions != null) {
    for (    final AnAction action : additionalActions) {
      actions.add(action);
    }
  }
  myToolBar=ActionManager.getInstance().createActionToolbar(ActionPlaces.JAVADOC_TOOLBAR,actions,true);
  myControlPanel=new JPanel();
  myControlPanel.setLayout(new BorderLayout());
  myControlPanel.setBorder(IdeBorderFactory.createBorder(SideBorder.BOTTOM));
  JPanel dummyPanel=new JPanel();
  myElementLabel=new JLabel();
  dummyPanel.setLayout(new BorderLayout());
  dummyPanel.setBorder(BorderFactory.createEmptyBorder(0,0,0,5));
  dummyPanel.add(myElementLabel,BorderLayout.EAST);
  myControlPanel.add(myToolBar.getComponent(),BorderLayout.WEST);
  myControlPanel.add(dummyPanel,BorderLayout.CENTER);
  myControlPanelVisible=false;
  final HyperlinkListener hyperlinkListener=new HyperlinkListener(){
    public void hyperlinkUpdate(    HyperlinkEvent e){
      HyperlinkEvent.EventType type=e.getEventType();
      if (type == HyperlinkEvent.EventType.ACTIVATED) {
        manager.navigateByLink(DocumentationComponent.this,e.getDescription());
      }
 else       if (type == HyperlinkEvent.EventType.ENTERED) {
        myEditorPane.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
      }
 else       if (type == HyperlinkEvent.EventType.EXITED) {
        myEditorPane.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
      }
    }
  }
;
  myEditorPane.addHyperlinkListener(hyperlinkListener);
  Disposer.register(this,new Disposable(){
    public void dispose(){
      myEditorPane.removeHyperlinkListener(hyperlinkListener);
    }
  }
);
  registerActions();
  updateControlState();
}
