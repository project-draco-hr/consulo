{
  JPanel result=new JPanel(new FlowLayout(FlowLayout.RIGHT,3,0));
  result.add(new JLabel(ApplicationBundle.message("label.font.size")));
  myFontSizeSlider=new JSlider(JSlider.HORIZONTAL,0,FontSize.values().length - 1,3);
  myFontSizeSlider.setMinorTickSpacing(1);
  myFontSizeSlider.setPaintTicks(true);
  myFontSizeSlider.setPaintTrack(true);
  myFontSizeSlider.setSnapToTicks(true);
  UIUtil.setSliderIsFilled(myFontSizeSlider,true);
  result.add(myFontSizeSlider);
  myFontSizeSlider.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      if (myIgnoreFontSizeSliderChange) {
        return;
      }
      EditorColorsManager colorsManager=EditorColorsManager.getInstance();
      EditorColorsScheme scheme=colorsManager.getGlobalScheme();
      scheme.setQuickDocFontSize(FontSize.values()[myFontSizeSlider.getValue()]);
      applyFontSize();
    }
  }
);
  String tooltipText=ApplicationBundle.message("quickdoc.tooltip.font.size.by.wheel");
  result.setToolTipText(tooltipText);
  myFontSizeSlider.setToolTipText(tooltipText);
  result.setBorder(IdeBorderFactory.createRoundedBorder());
  result.setVisible(false);
  result.setOpaque(true);
  myFontSizeSlider.setOpaque(true);
  return result;
}
