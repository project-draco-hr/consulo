{
  List<Block> subBlocks=state.parentBlock.getSubBlocks();
  final int subBlocksCount=subBlocks.size();
  int childBlockIndex=state.getIndexOfChildBlockToProcess();
  final Block block=subBlocks.get(childBlockIndex);
  if (state.previousBlock != null) {
    myCurrentSpaceProperty=(SpacingImpl)state.parentBlock.getSpacing(state.previousBlock,block);
  }
  boolean childBlockIsRightBlock=false;
  if (childBlockIndex == subBlocksCount - 1 && state.parentBlockIsRightBlock) {
    childBlockIsRightBlock=true;
  }
  final AbstractBlockWrapper wrapper=buildFrom(block,childBlockIndex,state.wrappedBlock,state.parentBlockWrap,state.parentBlock,childBlockIsRightBlock);
  if (wrapper.getIndent() == null) {
    wrapper.setIndent((IndentImpl)block.getIndent());
  }
  if (!state.readOnly && !(subBlocks instanceof Unmodifiable) && !(subBlocks instanceof ImmutableCollection)) {
    subBlocks.set(childBlockIndex,null);
  }
  if (state.childBlockProcessed(block,wrapper)) {
    while (!myStates.isEmpty() && myStates.peek().isProcessed()) {
      myStates.pop();
    }
  }
}
