{
  if (lineIndex < 0) {
    lineIndex=0;
  }
  Editor editor=getEditor(psiFile,lineIndex);
  if (editor == null) {
    return;
  }
  if (myExecutionPointDescription != null) {
    myExecutionPointDescription.remove();
  }
  myExecutionPointDescription=SelectionDescription.createExecutionPoint(editor,lineIndex);
  myExecutionPointDescription.select();
  RangeHighlighter highlighter=myExecutionPointDescription.getHighlighter();
  if (highlighter != null) {
    final List<Pair<Breakpoint,Event>> eventsOutOfLine=new ArrayList<Pair<Breakpoint,Event>>();
    for (Iterator<Pair<Breakpoint,Event>> iterator=events.iterator(); iterator.hasNext(); ) {
      Pair<Breakpoint,Event> eventDescriptor=iterator.next();
      Breakpoint breakpoint=eventDescriptor.getFirst();
      if (breakpoint instanceof BreakpointWithHighlighter) {
        breakpoint.reload();
        SourcePosition sourcePosition=((BreakpointWithHighlighter)breakpoint).getSourcePosition();
        if (sourcePosition == null || sourcePosition.getLine() != lineIndex) {
          eventsOutOfLine.add(eventDescriptor);
        }
      }
 else {
        eventsOutOfLine.add(eventDescriptor);
      }
    }
    if (eventsOutOfLine.size() > 0) {
      highlighter.setGutterIconRenderer(new GutterIconRenderer(){
        public Icon getIcon(){
          return eventsOutOfLine.get(0).getFirst().getIcon();
        }
        public String getTooltipText(){
          DebugProcessImpl debugProcess=DebuggerManagerEx.getInstanceEx(myProject).getContext().getDebugProcess();
          if (debugProcess != null) {
            StringBuffer buf=new StringBuffer();
            buf.append("<html><body>");
            for (Iterator<Pair<Breakpoint,Event>> iterator=eventsOutOfLine.iterator(); iterator.hasNext(); ) {
              Pair<Breakpoint,Event> eventDescriptor=iterator.next();
              buf.append(DebugProcessEvents.getEventText(eventDescriptor));
              if (iterator.hasNext()) {
                buf.append("<br>");
              }
            }
            buf.append("</body></html>");
            return buf.toString();
          }
 else {
            return null;
          }
        }
        public ActionGroup getPopupMenuActions(){
          DefaultActionGroup group=new DefaultActionGroup();
          for (Iterator<Pair<Breakpoint,Event>> iterator=eventsOutOfLine.iterator(); iterator.hasNext(); ) {
            Pair<Breakpoint,Event> eventDescriptor=iterator.next();
            Breakpoint breakpoint=eventDescriptor.getFirst();
            ViewBreakpointsAction viewBreakpointsAction=new ViewBreakpointsAction(breakpoint.getDisplayName());
            viewBreakpointsAction.setInitialBreakpoint(breakpoint);
            group.add(viewBreakpointsAction);
          }
          return group;
        }
      }
);
    }
  }
}
