{
  myProject=project;
  myDaemonCodeAnalyzer=daemonCodeAnalyzer;
  final MessageBusConnection connection=myProject.getMessageBus().connect();
  EditorEventMulticaster eventMulticaster=EditorFactory.getInstance().getEventMulticaster();
  myDocumentListener=new DocumentAdapter(){
    public void documentChanged(    DocumentEvent e){
      stopDaemon(true);
      UpdateHighlightersUtil.updateHighlightersByTyping(myProject,e);
    }
  }
;
  eventMulticaster.addDocumentListener(myDocumentListener);
  myCaretListener=new CaretListener(){
    public void caretPositionChanged(    CaretEvent e){
      stopDaemon(true);
    }
  }
;
  eventMulticaster.addCaretListener(myCaretListener);
  eventMulticaster.addEditorMouseMotionListener(myEditorMouseMotionListener);
  eventMulticaster.addEditorMouseListener(myEditorMouseListener);
  myEditorTracker=editorTracker;
  myEditorTrackerListener=new EditorTrackerListener(){
    public void activeEditorsChanged(    final Editor[] editors){
      if (editors.length > 0) {
        myIsFrameFocused=true;
      }
      List<Editor> list=Arrays.asList(editors);
      stopDaemon(true);
    }
  }
;
  myEditorTracker.addEditorTrackerListener(myEditorTrackerListener);
  myEditorFactoryListener=new EditorFactoryAdapter(){
    public void editorCreated(    EditorFactoryEvent event){
      Editor editor=event.getEditor();
      Document document=editor.getDocument();
      PsiFile file=PsiDocumentManager.getInstance(myProject).getPsiFile(document);
      if (file != null) {
        myDaemonCodeAnalyzer.repaintErrorStripeRenderer(editor);
      }
    }
  }
;
  EditorFactory.getInstance().addEditorFactoryListener(myEditorFactoryListener);
  PsiManager.getInstance(myProject).addPsiTreeChangeListener(new PsiChangeHandler(myProject,daemonCodeAnalyzer));
  connection.subscribe(ProjectTopics.PROJECT_ROOTS,new ModuleRootListener(){
    public void beforeRootsChange(    ModuleRootEvent event){
    }
    public void rootsChanged(    ModuleRootEvent event){
      final FileEditor[] editors=FileEditorManager.getInstance(myProject).getSelectedEditors();
      if (editors.length == 0)       return;
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          if (myProject.isDisposed())           return;
          for (          FileEditor fileEditor : editors) {
            if (fileEditor instanceof TextEditor) {
              myDaemonCodeAnalyzer.repaintErrorStripeRenderer(((TextEditor)fileEditor).getEditor());
            }
          }
        }
      }
,ModalityState.stateForComponent(editors[0].getComponent()));
    }
  }
);
  CommandProcessor.getInstance().addCommandListener(myCommandListener);
  ApplicationManager.getApplication().addApplicationListener(myApplicationListener);
  EditorColorsManager.getInstance().addEditorColorsListener(myEditorColorsListener);
  InspectionProfileManager.getInstance().addProfileChangeListener(myProfileChangeListener);
  TodoConfiguration.getInstance().addPropertyChangeListener(myTodoListener);
  ActionManagerEx.getInstanceEx().addAnActionListener(myAnActionListener);
  ExternalResourceManagerEx.getInstanceEx().addExteralResourceListener(myExternalResourceListener);
  myVirtualFileListener=new VirtualFileAdapter(){
    public void propertyChanged(    VirtualFilePropertyEvent event){
      if (VirtualFile.PROP_NAME.equals(event.getPropertyName())) {
        myDaemonCodeAnalyzer.restart();
        PsiFile psiFile=PsiManager.getInstance(myProject).findFile(event.getFile());
        if (psiFile != null && !myDaemonCodeAnalyzer.isHighlightingAvailable(psiFile)) {
          Document document=FileDocumentManager.getInstance().getCachedDocument(event.getFile());
          if (document != null) {
            UpdateHighlightersUtil.setHighlightersToEditor(myProject,document,0,document.getTextLength(),Collections.<HighlightInfo>emptyList(),Pass.UPDATE_ALL);
          }
        }
      }
    }
  }
;
  VirtualFileManager.getInstance().addVirtualFileListener(myVirtualFileListener);
  if (myProject.hasComponent(AntConfiguration.class)) {
    AntConfiguration.getInstance(myProject).addAntConfigurationListener(myAntConfigurationListener);
  }
  myErrorStripeHandler=new ErrorStripeHandler(myProject);
  ((EditorEventMulticasterEx)eventMulticaster).addErrorStripeListener(myErrorStripeHandler);
  final NamedScopesHolder[] holders=myProject.getComponents(NamedScopesHolder.class);
  NamedScopesHolder.ScopeListener scopeListener=new NamedScopesHolder.ScopeListener(){
    public void scopesChanged(){
      myDaemonCodeAnalyzer.reloadScopes();
    }
  }
;
  for (  NamedScopesHolder holder : holders) {
    holder.addScopeListener(scopeListener);
  }
}
