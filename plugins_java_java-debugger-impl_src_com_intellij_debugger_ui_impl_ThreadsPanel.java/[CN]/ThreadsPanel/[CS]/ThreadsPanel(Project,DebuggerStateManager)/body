{
  super(project,stateManager);
  final Disposable disposable=DebuggerAction.installEditAction(getThreadsTree(),DebuggerActions.EDIT_FRAME_SOURCE);
  registerDisposable(disposable);
  getThreadsTree().addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_ENTER && getThreadsTree().getSelectionCount() == 1) {
        DebuggerTreeNodeImpl node=(DebuggerTreeNodeImpl)getThreadsTree().getLastSelectedPathComponent();
        if (node != null) {
          NodeDescriptorImpl descriptor=node.getDescriptor();
          if (descriptor instanceof StackFrameDescriptorImpl) {
            selectFrame(node);
          }
        }
      }
    }
  }
);
  add(ScrollPaneFactory.createScrollPane(getThreadsTree()),BorderLayout.CENTER);
  stateManager.addListener(new DebuggerContextListener(){
    public void changeEvent(    DebuggerContextImpl newContext,    int event){
      if (DebuggerSession.EVENT_ATTACHED == event || DebuggerSession.EVENT_RESUME == event) {
        startLabelsUpdate();
      }
 else       if (DebuggerSession.EVENT_PAUSE == event || DebuggerSession.EVENT_DETACHED == event || DebuggerSession.EVENT_DISPOSE == event) {
        myUpdateLabelsAlarm.cancelAllRequests();
      }
      if (DebuggerSession.EVENT_DETACHED == event || DebuggerSession.EVENT_DISPOSE == event) {
        stateManager.removeListener(this);
      }
    }
  }
);
  startLabelsUpdate();
}
