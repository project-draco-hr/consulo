{
  List children=parentNode.getChildren("option");
  for (Iterator iterator=children.iterator(); iterator.hasNext(); ) {
    Element element=(Element)iterator.next();
    String name=element.getAttributeValue("name");
    String value=element.getAttributeValue("value");
    if ("browserPath".equals(name)) {
      myBrowserPath=value;
    }
    if ("lastTip".equals(name)) {
      try {
        myLastTip=new Integer(value).intValue();
      }
 catch (      NumberFormatException ex) {
        myLastTip=0;
      }
    }
    if ("showTipsOnStartup".equals(name)) {
      try {
        myShowTipsOnStartup=Boolean.valueOf(value).booleanValue();
      }
 catch (      Exception ex) {
        myShowTipsOnStartup=true;
      }
    }
    if ("showOccupiedMemory".equals(name)) {
      try {
        myShowOccupiedMemory=Boolean.valueOf(value).booleanValue();
      }
 catch (      Exception ex) {
        myShowOccupiedMemory=false;
      }
    }
    if ("reopenLastProject".equals(name)) {
      try {
        myReopenLastProject=Boolean.valueOf(value).booleanValue();
      }
 catch (      Exception ex) {
        myReopenLastProject=true;
      }
    }
    if ("autoSyncFiles".equals(name)) {
      try {
        mySyncOnFrameActivation=Boolean.valueOf(value).booleanValue();
      }
 catch (      Exception ex) {
        mySyncOnFrameActivation=true;
      }
    }
    if ("autoSaveFiles".equals(name)) {
      try {
        mySaveOnFrameDeactivation=Boolean.valueOf(value).booleanValue();
      }
 catch (      Exception ex) {
        mySaveOnFrameDeactivation=true;
      }
    }
    if ("autoSaveIfInactive".equals(name) && value != null) {
      myAutoSaveIfInactive=Boolean.valueOf(value).booleanValue();
    }
    if ("inactiveTimeout".equals(name)) {
      try {
        int inactiveTimeout=Integer.parseInt(value);
        if (inactiveTimeout > 0) {
          myInactiveTimeout=inactiveTimeout;
        }
      }
 catch (      Exception ignored) {
      }
    }
    if ("charset".equals(name)) {
      try {
        if (!"Default".equals(value)) {
          myCharsetName=value;
        }
 else {
          myCharsetName="System Default";
        }
      }
 catch (      Exception ex) {
        myCharsetName="System Default";
      }
    }
    if ("UTFGuessing".equals(name)) {
      try {
        myUseUTFGuessing=Boolean.valueOf(value).booleanValue();
      }
 catch (      Exception ex) {
        myUseUTFGuessing=true;
      }
    }
    if ("useDefaultBrowser".equals(name)) {
      try {
        myUseDefaultBrowser=Boolean.valueOf(value).booleanValue();
      }
 catch (      Exception ex) {
        myUseDefaultBrowser=true;
      }
    }
    if ("useCyclicBuffer".equals(name)) {
      try {
        myUseCyclicBuffer=Boolean.valueOf(value).booleanValue();
      }
 catch (      Exception ex) {
        myUseCyclicBuffer=false;
      }
    }
    if ("cyclicBufferSize".equals(name)) {
      try {
        myCyclicBufferSize=Integer.parseInt(value);
      }
 catch (      Exception ex) {
        myCyclicBufferSize=0;
      }
    }
    if ("lastProjectLocation".equals(name)) {
      try {
        myLastProjectLocation=value;
      }
 catch (      Exception ex) {
        myLastProjectLocation=null;
      }
    }
  }
}
