{
  extend(CompletionType.CLASS_NAME,psiElement(),new CompletionProvider<CompletionParameters>(){
    @Override protected void addCompletions(    @NotNull CompletionParameters parameters,    ProcessingContext context,    @NotNull CompletionResultSet result){
      final String prefix=result.getPrefixMatcher().getPrefix();
      if (prefix.length() == 0) {
        return;
      }
      final PsiElement e=parameters.getPosition();
      final PsiReference psiReference=parameters.getOriginalFile().findReferenceAt(parameters.getOffset());
      if (getReference(psiReference) != null) {
        final Project project=e.getProject();
        final String[] fileNames=getAllNames(project);
        final List<String> resultNames=new ArrayList<String>();
        for (        String fileName : fileNames) {
          if (StringUtil.startsWithIgnoreCase(fileName,prefix)) {
            resultNames.add(fileName);
          }
        }
        final LogicalRootsManager logicalRootsManager=LogicalRootsManager.getLogicalRootsManager(project);
        final PsiManager psiManager=PsiManager.getInstance(project);
        final ProjectFileIndex index=ProjectRootManager.getInstance(project).getFileIndex();
        final VirtualFile contextFile=parameters.getOriginalFile().getVirtualFile();
        if (contextFile != null) {
          final Module contextModule=index.getModuleForFile(contextFile);
          final Module[] dependencies=ModuleRootManager.getInstance(contextModule).getDependencies();
          final Set<Module> modules=new HashSet<Module>(dependencies.length + 1);
          modules.addAll(Arrays.asList(dependencies));
          modules.add(contextModule);
          final LogicalRoot contextRoot=logicalRootsManager.findLogicalRoot(contextFile);
          if (contextRoot != null) {
            final VirtualFile contextRootFile=contextRoot.getVirtualFile();
            final LogicalRootType contextRootType=contextRoot.getType();
            final GlobalSearchScope scope=ProjectScope.getProjectScope(project);
            for (            String name : resultNames) {
              ProgressManager.getInstance().checkCanceled();
              final PsiFile[] files=FilenameIndex.getFilesByName(project,name,scope);
              if (files.length > 0) {
                for (                PsiFile file : files) {
                  final VirtualFile virtualFile=file.getVirtualFile();
                  if (virtualFile != null && virtualFile.isValid()) {
                    final Module module=index.getModuleForFile(virtualFile);
                    if (modules.contains(module)) {
                      final LogicalRoot logicalRoot=logicalRootsManager.findLogicalRoot(virtualFile);
                      if (logicalRoot != null && contextRootType == logicalRoot.getType()) {
                        final VirtualFile _context=contextRoot == logicalRoot ? contextRootFile : project.getBaseDir();
                        if (_context != null) {
                          final PsiDirectory psiFile=psiManager.findDirectory(_context);
                          if (psiFile != null) {
                            result.addElement(new FilePathLookupItem(file,psiFile));
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
);
}
