{
  context.getProgressIndicator().pushState();
  context.getProgressIndicator().setText(CompilerBundle.message("progress.copying.resources"));
  final List<OutputItem> processed=new ArrayList<OutputItem>(files.length);
  final List<CopyCommand> copyCommands=new ArrayList<CopyCommand>(files.length);
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    public void run(){
      final ProjectFileIndex fileIndex=ProjectRootManager.getInstance(myProject).getFileIndex();
      for (      final VirtualFile file : files) {
        if (context.getProgressIndicator().isCanceled()) {
          break;
        }
        final Module module=context.getModuleByFile(file);
        if (module == null) {
          continue;
        }
        final VirtualFile fileRoot=MakeUtil.getSourceRoot(context,module,file);
        if (fileRoot == null) {
          continue;
        }
        final String sourcePath=file.getPath();
        final String relativePath=VfsUtil.getRelativePath(file,fileRoot,'/');
        final String outputPath=CompilerPaths.getModuleOutputPath(module,((CompileContextEx)context).isInTestSourceContent(file));
        if (outputPath == null) {
          continue;
        }
        final String packagePrefix=fileIndex.getPackageNameByDirectory(fileRoot);
        final String targetPath;
        final StringBuilder builder=StringBuilderSpinAllocator.alloc();
        try {
          if (packagePrefix != null && packagePrefix.length() > 0) {
            targetPath=builder.append(outputPath).append("/").append(packagePrefix.replace('.','/')).append("/").append(relativePath).toString();
          }
 else {
            targetPath=builder.append(outputPath).append("/").append(relativePath).toString();
          }
        }
  finally {
          StringBuilderSpinAllocator.dispose(builder);
        }
        if (!sourcePath.equals(targetPath)) {
          copyCommands.add(new CopyCommand(outputPath,sourcePath,targetPath,file));
        }
 else {
          processed.add(new MyOutputItem(outputPath,targetPath,file));
        }
      }
    }
  }
);
  final List<File> filesToRefresh=new ArrayList<File>();
  for (int i=0; i < copyCommands.size(); i++) {
    CopyCommand command=copyCommands.get(i);
    if (context.getProgressIndicator().isCanceled()) {
      break;
    }
    context.getProgressIndicator().setFraction(i * 1.0 / copyCommands.size());
    try {
      final MyOutputItem outputItem=command.copy(filesToRefresh);
      processed.add(outputItem);
    }
 catch (    IOException e) {
      context.addMessage(CompilerMessageCategory.ERROR,CompilerBundle.message("error.copying",command.getFromPath(),command.getToPath(),e.getMessage()),command.getSourceFileUrl(),-1,-1);
    }
  }
  if (filesToRefresh.size() > 0) {
    CompilerUtil.refreshIOFiles(filesToRefresh);
  }
  context.getProgressIndicator().popState();
  final OutputItem[] itemsArray=processed.toArray(new OutputItem[processed.size()]);
  return new MyExitStatus(itemsArray);
}
