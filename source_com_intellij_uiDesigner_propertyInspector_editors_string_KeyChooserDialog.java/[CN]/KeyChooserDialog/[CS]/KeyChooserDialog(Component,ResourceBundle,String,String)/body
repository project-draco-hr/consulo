{
  super(parent,true);
  if (bundle == null) {
    throw new IllegalArgumentException();
  }
  if (bundleName == null) {
    throw new IllegalArgumentException();
  }
  myBundleName=bundleName;
  setTitle("Chooser Value");
  myPairs=new ArrayList<Pair<String,String>>();
  for (Enumeration keys=bundle.getKeys(); keys.hasMoreElements(); ) {
    final String key=(String)keys.nextElement();
    final String value=bundle.getString(key);
    myPairs.add(new Pair<String,String>(key,value));
  }
  Collections.sort(myPairs,new MyPairComparator());
  final MyTableModel model=new MyTableModel();
  myTable=new Table(model);
  myTable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myCenterPanel=ScrollPaneFactory.createScrollPane(myTable);
  final FontMetrics metrics=myTable.getFontMetrics(myTable.getFont());
  int width=0;
  for (int i=myPairs.size() - 1; i >= 0; i--) {
    final Pair<String,String> pair=myPairs.get(i);
    width=Math.max(width,metrics.stringWidth(pair.getFirst()));
  }
  width+=30;
  width=Math.max(width,metrics.stringWidth(model.getColumnName(0)));
  final TableColumn keyColumn=myTable.getColumnModel().getColumn(0);
  keyColumn.setMaxWidth(width);
  keyColumn.setMinWidth(width);
  int indexToPreselect=-1;
  for (int i=myPairs.size() - 1; i >= 0; i--) {
    final Pair<String,String> pair=myPairs.get(i);
    if (pair.getFirst().equals(keyToPreselect)) {
      indexToPreselect=i;
      break;
    }
  }
  if (indexToPreselect != -1) {
    myTable.getSelectionModel().setSelectionInterval(indexToPreselect,indexToPreselect);
    myTable.scrollRectToVisible(myTable.getCellRect(indexToPreselect,0,true));
  }
  init();
}
