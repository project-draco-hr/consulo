{
  myMockery=new JUnit4Mockery(){
{
      setImposteriser(ClassImposteriser.INSTANCE);
    }
  }
;
  myStorage=myMockery.mock(SoftWrapsStorage.class);
  myEditor=myMockery.mock(EditorEx.class);
  mySettings=myMockery.mock(EditorSettings.class);
  myPainter=myMockery.mock(SoftWrapPainter.class);
  myDocument=myMockery.mock(Document.class);
  myScrollingModel=myMockery.mock(ScrollingModel.class);
  myMockery.checking(new Expectations(){
{
      allowing(myEditor).isViewer();
      will(returnValue(false));
      allowing(myEditor).getSettings();
      will(returnValue(mySettings));
      allowing(mySettings).isUseCustomSoftWrapIndent();
      will(returnValue(false));
      allowing(mySettings).getCustomSoftWrapIndent();
      will(returnValue(0));
      allowing(myEditor).getDocument();
      will(returnValue(myDocument));
      allowing(myDocument).addDocumentListener(with(any(DocumentListener.class)));
      allowing(myDocument).getLineNumber(with(any(int.class)));
      will(returnValue(0));
      allowing(myDocument).getLineStartOffset(0);
      will(returnValue(0));
      allowing(myDocument).isWritable();
      will(returnValue(true));
      allowing(myEditor).getScrollingModel();
      will(returnValue(myScrollingModel));
      allowing(myStorage).removeAll();
      allowing(myStorage).removeInRange(with(any(int.class)),with(any(int.class)));
      allowing(myPainter).getMinDrawingWidth(with(any(SoftWrapDrawingType.class)));
      will(returnValue(SOFT_WRAP_DRAWING_SIZE));
    }
  }
);
  myManager=new DefaultSoftWrapApplianceManager(myStorage,myEditor,myPainter,new MockEditorTextRepresentationHelper());
}
