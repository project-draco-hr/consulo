{
  return new Iterator<Component>(){
    private Container myCurrentParent=component;
    private final TIntStack myState=new TIntStack();
    private int myCurrentIndex=0;
    public boolean hasNext(){
      return hasNextChild();
    }
    public Component next(){
      Component next=myCurrentParent.getComponent(myCurrentIndex);
      myCurrentIndex++;
      if (next instanceof Container) {
        Container container=((Container)next);
        if (container.getComponentCount() > 0) {
          myState.push(myCurrentIndex);
          myCurrentIndex=0;
          myCurrentParent=container;
        }
      }
      while (!hasNextChild()) {
        if (myState.size() == 0)         break;
        myCurrentIndex=myState.pop();
        myCurrentParent=myCurrentParent.getParent();
      }
      return next;
    }
    public void remove(){
      throw new UnsupportedOperationException();
    }
    private boolean hasNextChild(){
      return myCurrentParent.getComponentCount() > myCurrentIndex;
    }
  }
;
}
