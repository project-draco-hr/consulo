{
  JPanel panelForTable=ToolbarDecorator.createDecorator(myDirectoryMappingTable,null).setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      if (onlyRegisteredRootsInSelection()) {
        addMapping();
      }
 else {
        addSelectedUnregisteredMappings(getSelectedUnregisteredRoots());
      }
      updateRootCheckers();
    }
  }
).setEditAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      editMapping();
      updateRootCheckers();
    }
  }
).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      removeMapping();
      updateRootCheckers();
    }
  }
).setAddActionUpdater(new AnActionButtonUpdater(){
    @Override public boolean isEnabled(    AnActionEvent e){
      return !myIsDisabled && rootsOfOneKindInSelection();
    }
  }
).setEditActionUpdater(new AnActionButtonUpdater(){
    @Override public boolean isEnabled(    AnActionEvent e){
      return !myIsDisabled && onlyRegisteredRootsInSelection();
    }
  }
).setRemoveActionUpdater(new AnActionButtonUpdater(){
    @Override public boolean isEnabled(    AnActionEvent e){
      return !myIsDisabled && onlyRegisteredRootsInSelection();
    }
  }
).disableUpDownActions().createPanel();
  panelForTable.setPreferredSize(new Dimension(-1,200));
  return panelForTable;
}
