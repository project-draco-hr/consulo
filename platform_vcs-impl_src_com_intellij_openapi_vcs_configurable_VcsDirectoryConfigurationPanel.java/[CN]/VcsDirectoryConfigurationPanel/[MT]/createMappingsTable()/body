{
  JPanel panelForTable=ToolbarDecorator.createDecorator(myDirectoryMappingTable,null).setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      addMapping();
      updateRootCheckers();
    }
  }
).setEditAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      editMapping();
      updateRootCheckers();
    }
  }
).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      removeMapping();
      updateRootCheckers();
    }
  }
).setAddActionUpdater(new AnActionButtonUpdater(){
    @Override public boolean isEnabled(    AnActionEvent e){
      return !myIsDisabled;
    }
  }
).setEditActionUpdater(new AnActionButtonUpdater(){
    @Override public boolean isEnabled(    AnActionEvent e){
      final boolean hasSelection=myDirectoryMappingTable.getSelectedObject() != null;
      return (!myIsDisabled) && hasSelection;
    }
  }
).setRemoveActionUpdater(new AnActionButtonUpdater(){
    @Override public boolean isEnabled(    AnActionEvent e){
      final boolean hasSelection=myDirectoryMappingTable.getSelectedObject() != null;
      return (!myIsDisabled) && hasSelection;
    }
  }
).disableUpDownActions().createPanel();
  panelForTable.setPreferredSize(new Dimension(-1,200));
  return panelForTable;
}
