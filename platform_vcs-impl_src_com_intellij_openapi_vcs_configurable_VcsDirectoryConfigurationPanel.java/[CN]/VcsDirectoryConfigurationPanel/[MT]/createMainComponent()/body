{
  JPanel panel=new JPanel(new BorderLayout());
  JPanel panelForTable=ToolbarDecorator.createDecorator(myDirectoryMappingTable,null).setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      addMapping();
    }
  }
).setEditAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      editMapping();
    }
  }
).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      removeMapping();
    }
  }
).disableUpDownActions().createPanel();
  panel.add(panelForTable,BorderLayout.CENTER);
  ToolbarDecorator.findAddButton(panelForTable).addCustomUpdater(new AnActionButtonUpdater(){
    @Override public boolean isEnabled(    AnActionEvent e){
      return !myIsDisabled;
    }
  }
);
  ToolbarDecorator.findEditButton(panelForTable).addCustomUpdater(new AnActionButtonUpdater(){
    @Override public boolean isEnabled(    AnActionEvent e){
      final boolean hasSelection=myDirectoryMappingTable.getSelectedObject() != null;
      return (!myIsDisabled) && hasSelection;
    }
  }
);
  ToolbarDecorator.findRemoveButton(panelForTable).addCustomUpdater(new AnActionButtonUpdater(){
    @Override public boolean isEnabled(    AnActionEvent e){
      final boolean hasSelection=myDirectoryMappingTable.getSelectedObject() != null;
      return (!myIsDisabled) && hasSelection;
    }
  }
);
  final JPanel wrapper=new JPanel(new BorderLayout());
  myRecentlyChangedConfigurable=new VcsContentAnnotationConfigurable(myProject);
  final JBLabel label=new JBLabel(myProjectMessage);
  label.setComponentStyle(UIUtil.ComponentStyle.SMALL);
  label.setFontColor(UIUtil.FontColor.BRIGHTER);
  label.setBorder(BorderFactory.createEmptyBorder(2,5,2,0));
  wrapper.add(label,BorderLayout.CENTER);
  final JBLabel noteLabel=new JBLabel("File texts bigger than " + VcsConfiguration.ourMaximumFileForBaseRevisionSize / 1000 + "K are not stored");
  noteLabel.setComponentStyle(UIUtil.ComponentStyle.SMALL);
  noteLabel.setFontColor(UIUtil.FontColor.BRIGHTER);
  noteLabel.setBorder(BorderFactory.createEmptyBorder(2,25,5,0));
  final JPanel twoPanel=new JPanel(new BorderLayout());
  twoPanel.add(myBaseRevisionTexts,BorderLayout.NORTH);
  twoPanel.add(noteLabel,BorderLayout.SOUTH);
  final JPanel wr2=new JPanel(new BorderLayout());
  wr2.add(twoPanel,BorderLayout.WEST);
  myBaseRevisionTexts.setBorder(BorderFactory.createEmptyBorder(5,0,0,0));
  final JPanel wr3=new JPanel(new BorderLayout());
  wr3.add(wr2,BorderLayout.NORTH);
  wr3.add(myRecentlyChangedConfigurable.createComponent(),BorderLayout.SOUTH);
  wrapper.add(wr3,BorderLayout.SOUTH);
  panel.add(wrapper,BorderLayout.SOUTH);
  return panel;
}
