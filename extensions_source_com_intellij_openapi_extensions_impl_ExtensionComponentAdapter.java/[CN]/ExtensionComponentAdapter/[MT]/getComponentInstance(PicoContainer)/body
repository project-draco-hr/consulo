{
  if (myComponentInstance == null) {
    if (!Element.class.equals(getComponentImplementation())) {
      Object componentInstance=getDelegate().getComponentInstance(container);
      final CompositeClassLoader classLoader=new CompositeClassLoader();
      if (myPluginDescriptor.getPluginClassLoader() != null) {
        classLoader.add(myPluginDescriptor.getPluginClassLoader());
      }
      XStream xStream=new XStream(){
        @Override protected void setupConverters(){
          final Mapper mapper=getMapper();
          final ReflectionProvider reflectionProvider=getReflectionProvider();
          registerConverter(new AnnotationReflectionConverter(mapper,reflectionProvider,new AnnotationProvider()),PRIORITY_LOW);
          registerConverter(new SerializableConverter(mapper,reflectionProvider),PRIORITY_LOW);
          registerConverter(new ExternalizableConverter(mapper),PRIORITY_LOW);
          registerConverter(new NullConverter(),PRIORITY_VERY_HIGH);
          registerConverter(new IntConverter(),PRIORITY_NORMAL);
          registerConverter(new FloatConverter(),PRIORITY_NORMAL);
          registerConverter(new DoubleConverter(),PRIORITY_NORMAL);
          registerConverter(new LongConverter(),PRIORITY_NORMAL);
          registerConverter(new ShortConverter(),PRIORITY_NORMAL);
          registerConverter(new CharConverter(),PRIORITY_NORMAL);
          registerConverter(new BooleanConverter(),PRIORITY_NORMAL);
          registerConverter(new ByteConverter(),PRIORITY_NORMAL);
          registerConverter(new StringConverter(),PRIORITY_NORMAL);
          registerConverter(new StringBufferConverter(),PRIORITY_NORMAL);
          registerConverter(new DateConverter(),PRIORITY_NORMAL);
          registerConverter(new BitSetConverter(),PRIORITY_NORMAL);
          registerConverter(new URLConverter(),PRIORITY_NORMAL);
          registerConverter(new BigIntegerConverter(),PRIORITY_NORMAL);
          registerConverter(new BigDecimalConverter(),PRIORITY_NORMAL);
          registerConverter(new ArrayConverter(mapper),PRIORITY_NORMAL);
          registerConverter(new CharArrayConverter(),PRIORITY_NORMAL);
          registerConverter(new CollectionConverter(mapper),PRIORITY_NORMAL);
          registerConverter(new MapConverter(mapper),PRIORITY_NORMAL);
          registerConverter(new TreeMapConverter(mapper),PRIORITY_NORMAL);
          registerConverter(new TreeSetConverter(mapper),PRIORITY_NORMAL);
          registerConverter(new PropertiesConverter(),PRIORITY_NORMAL);
          registerConverter(new EncodedByteArrayConverter(),PRIORITY_NORMAL);
          registerConverter(new FileConverter(),PRIORITY_NORMAL);
          registerConverter(new LocaleConverter(),PRIORITY_NORMAL);
          registerConverter(new GregorianCalendarConverter(),PRIORITY_NORMAL);
          registerConverter(new EnumConverter(),PRIORITY_NORMAL);
          registerConverter(new EnumSetConverter(mapper),PRIORITY_NORMAL);
          registerConverter(new EnumMapConverter(mapper),PRIORITY_NORMAL);
        }
      }
;
      xStream.setClassLoader(classLoader);
      if (componentInstance instanceof ReaderConfigurator) {
        ReaderConfigurator readerConfigurator=(ReaderConfigurator)componentInstance;
        readerConfigurator.configureReader(xStream);
      }
      Annotations.configureAliases(xStream,componentInstance.getClass());
      xStream.alias(myExtensionElement.getName(),componentInstance.getClass());
      myComponentInstance=xStream.unmarshal(new JDomReader(myExtensionElement),componentInstance);
    }
 else {
      myComponentInstance=myExtensionElement;
    }
    if (myComponentInstance instanceof PluginAware) {
      PluginAware pluginAware=(PluginAware)myComponentInstance;
      pluginAware.setPluginDescriptor(myPluginDescriptor);
    }
  }
  return myComponentInstance;
}
