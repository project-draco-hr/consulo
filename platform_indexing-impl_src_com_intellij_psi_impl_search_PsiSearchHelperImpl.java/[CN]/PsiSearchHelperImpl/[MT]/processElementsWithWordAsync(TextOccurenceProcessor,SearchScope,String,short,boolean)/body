{
  if (text.isEmpty()) {
    return AsyncFutureFactory.wrapException(new IllegalArgumentException("Cannot search for elements with empty text"));
  }
  final ProgressIndicator progress=ProgressIndicatorProvider.getGlobalProgressIndicator();
  if (searchScope instanceof GlobalSearchScope) {
    StringSearcher searcher=new StringSearcher(text,caseSensitively,true,searchContext == UsageSearchContext.IN_STRINGS);
    return processElementsWithTextInGlobalScopeAsync(processor,(GlobalSearchScope)searchScope,searcher,searchContext,caseSensitively,progress);
  }
 else {
    LocalSearchScope scope=(LocalSearchScope)searchScope;
    PsiElement[] scopeElements=scope.getScope();
    final boolean ignoreInjectedPsi=scope.isIgnoreInjectedPsi();
    return JobLauncher.getInstance().invokeConcurrentlyUnderProgressAsync(Arrays.asList(scopeElements),progress,false,new Processor<PsiElement>(){
      @Override public boolean process(      PsiElement scopeElement){
        return processElementsWithWordInScopeElement(scopeElement,processor,text,caseSensitively,ignoreInjectedPsi,searchContext == UsageSearchContext.IN_STRINGS,progress);
      }
    }
);
  }
}
