{
  final AtomicInteger count=new AtomicInteger();
  final Processor<VirtualFile> processor=new Processor<VirtualFile>(){
    private final VirtualFile virtualFileToIgnoreOccurrencesIn=fileToIgnoreOccurrencesIn == null ? null : fileToIgnoreOccurrencesIn.getVirtualFile();
    @Override public boolean process(    VirtualFile file){
      checkCanceled(progress);
      if (Comparing.equal(file,virtualFileToIgnoreOccurrencesIn))       return true;
      final int value=count.incrementAndGet();
      return value < 10;
    }
  }
;
  List<IdIndexEntry> keys=getWordEntries(name,true);
  boolean cheap=keys.isEmpty() || processFilesContainingAllKeys(myManager.getProject(),scope,null,keys,processor);
  if (!cheap) {
    return SearchCostResult.TOO_MANY_OCCURRENCES;
  }
  return count.get() == 0 ? SearchCostResult.ZERO_OCCURRENCES : SearchCostResult.FEW_OCCURRENCES;
}
