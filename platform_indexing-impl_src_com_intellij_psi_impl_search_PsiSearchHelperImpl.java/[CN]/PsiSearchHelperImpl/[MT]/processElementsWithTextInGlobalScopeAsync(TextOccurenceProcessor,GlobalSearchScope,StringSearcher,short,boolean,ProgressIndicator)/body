{
  LOG.assertTrue(!Thread.holdsLock(PsiLock.LOCK),"You must not run search from within updating PSI activity. Please consider invokeLatering it instead.");
  if (progress != null) {
    progress.pushState();
    progress.setText(PsiBundle.message("psi.scanning.files.progress"));
  }
  String text=searcher.getPattern();
  List<VirtualFile> fileSet=getFilesWithText(scope,searchContext,caseSensitively,text,progress);
  if (progress != null) {
    progress.setText(PsiBundle.message("psi.search.for.word.progress",text));
  }
  final AsyncFuture<Boolean> result=processPsiFileRootsAsync(fileSet,new Processor<PsiElement>(){
    @Override public boolean process(    PsiElement psiRoot){
      return LowLevelSearchUtil.processElementsContainingWordInElement(processor,psiRoot,searcher,true,progress);
    }
  }
,progress);
  return new FinallyFuture<Boolean>(result,new Runnable(){
    @Override public void run(){
      if (progress != null) {
        progress.popState();
      }
    }
  }
);
}
