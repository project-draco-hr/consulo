{
  Map<SearchRequestCollector,Processor<PsiReference>> collectors=CollectionFactory.hashMap();
  collectors.put(collector,processor);
  appendCollectorsFromQueryRequests(collectors);
  ProgressIndicator progress=ProgressIndicatorProvider.getInstance().getProgressIndicator();
  do {
    final MultiMap<Set<IdIndexEntry>,RequestWithProcessor> globals=new MultiMap<Set<IdIndexEntry>,RequestWithProcessor>();
    final List<Computable<Boolean>> customs=CollectionFactory.arrayList();
    final LinkedHashSet<RequestWithProcessor> locals=CollectionFactory.linkedHashSet();
    distributePrimitives(collectors,locals,globals,customs);
    if (!processGlobalRequestsOptimized(globals,progress)) {
      return false;
    }
    for (    RequestWithProcessor local : locals) {
      if (!processSingleRequest(local.request,local.refProcessor)) {
        return false;
      }
    }
    for (    Computable<Boolean> custom : customs) {
      if (!custom.compute()) {
        return false;
      }
    }
  }
 while (appendCollectorsFromQueryRequests(collectors));
  return true;
}
