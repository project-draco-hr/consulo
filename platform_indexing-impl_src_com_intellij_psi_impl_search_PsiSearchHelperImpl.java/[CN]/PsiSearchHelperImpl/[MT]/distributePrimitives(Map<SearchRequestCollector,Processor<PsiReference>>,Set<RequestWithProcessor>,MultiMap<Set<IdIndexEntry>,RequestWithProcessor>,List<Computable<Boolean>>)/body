{
  for (  final Map.Entry<SearchRequestCollector,Processor<PsiReference>> entry : collectors.entrySet()) {
    final Processor<PsiReference> processor=entry.getValue();
    SearchRequestCollector collector=entry.getKey();
    for (    final PsiSearchRequest primitive : collector.takeSearchRequests()) {
      final SearchScope scope=primitive.searchScope;
      if (scope instanceof LocalSearchScope) {
        registerRequest(locals,primitive,processor);
      }
 else {
        final List<String> words=StringUtil.getWordsInStringLongestFirst(primitive.word);
        final Set<IdIndexEntry> key=new HashSet<IdIndexEntry>(words.size() * 2);
        for (        String word : words) {
          key.add(new IdIndexEntry(word,primitive.caseSensitive));
        }
        registerRequest(singles.getModifiable(key),primitive,processor);
      }
    }
    for (    final Processor<Processor<PsiReference>> customAction : collector.takeCustomSearchActions()) {
      customs.add(new Computable<Boolean>(){
        @Override public Boolean compute(){
          return customAction.process(processor);
        }
      }
);
    }
  }
}
