{
  if (qName.isEmpty()) {
    throw new IllegalArgumentException("Cannot search for elements with empty text. Element: " + originalElement + "; "+ (originalElement == null ? null : originalElement.getClass()));
  }
  final ProgressIndicator progress=ProgressIndicatorProvider.getGlobalProgressIndicator();
  int dotIndex=qName.lastIndexOf('.');
  int dollarIndex=qName.lastIndexOf('$');
  int maxIndex=Math.max(dotIndex,dollarIndex);
  final String wordToSearch=maxIndex >= 0 ? qName.substring(maxIndex + 1) : qName;
  final GlobalSearchScope theSearchScope=ApplicationManager.getApplication().runReadAction(new Computable<GlobalSearchScope>(){
    @Override public GlobalSearchScope compute(){
      if (originalElement != null && myManager.isInProject(originalElement) && initialScope.isSearchInLibraries()) {
        return initialScope.intersectWith(GlobalSearchScope.projectScope(myManager.getProject()));
      }
      return initialScope;
    }
  }
);
  PsiFile[] files=ApplicationManager.getApplication().runReadAction(new Computable<PsiFile[]>(){
    @Override public PsiFile[] compute(){
      return CacheManager.SERVICE.getInstance(myManager.getProject()).getFilesWithWord(wordToSearch,UsageSearchContext.IN_PLAIN_TEXT,theSearchScope,true);
    }
  }
);
  final StringSearcher searcher=new StringSearcher(qName,true,true,false);
  final int patternLength=searcher.getPattern().length();
  if (progress != null) {
    progress.pushState();
    progress.setText(PsiBundle.message("psi.search.in.non.java.files.progress"));
  }
  final SearchScope useScope=new ReadAction<SearchScope>(){
    @Override protected void run(    final Result<SearchScope> result){
      if (originalElement != null) {
        result.setResult(getUseScope(originalElement));
      }
    }
  }
.execute().getResultObject();
  final Ref<Boolean> cancelled=new Ref<Boolean>(Boolean.FALSE);
  for (int i=0; i < files.length; i++) {
    checkCanceled(progress);
    final PsiFile psiFile=files[i];
    if (psiFile instanceof PsiBinaryFile)     continue;
    final CharSequence text=ApplicationManager.getApplication().runReadAction(new Computable<CharSequence>(){
      @Override public CharSequence compute(){
        return psiFile.getViewProvider().getContents();
      }
    }
);
    final char[] textArray=ApplicationManager.getApplication().runReadAction(new Computable<char[]>(){
      @Override public char[] compute(){
        return CharArrayUtil.fromSequenceWithoutCopying(text);
      }
    }
);
    for (int index=LowLevelSearchUtil.searchWord(text,textArray,0,text.length(),searcher,progress); index >= 0; ) {
      final int finalIndex=index;
      boolean isReferenceOK=ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
        @Override public Boolean compute(){
          PsiReference referenceAt=psiFile.findReferenceAt(finalIndex);
          return referenceAt == null || useScope == null || !PsiSearchScopeUtil.isInScope(useScope.intersectWith(initialScope),psiFile);
        }
      }
);
      if (isReferenceOK && !processor.process(psiFile,index,index + patternLength)) {
        cancelled.set(Boolean.TRUE);
        break;
      }
      index=LowLevelSearchUtil.searchWord(text,textArray,index + patternLength,text.length(),searcher,progress);
    }
    if (cancelled.get())     break;
    if (progress != null) {
      progress.setFraction((double)(i + 1) / files.length);
    }
  }
  if (progress != null) {
    progress.popState();
  }
  return !cancelled.get();
}
