{
  if (qName.isEmpty()) {
    throw new IllegalArgumentException("Cannot search for elements with empty text. Element: " + originalElement + "; "+ (originalElement == null ? null : originalElement.getClass()));
  }
  final ProgressIndicator progress=getOrCreateIndicator();
  int dotIndex=qName.lastIndexOf('.');
  int dollarIndex=qName.lastIndexOf('$');
  int maxIndex=Math.max(dotIndex,dollarIndex);
  final String wordToSearch=maxIndex >= 0 ? qName.substring(maxIndex + 1) : qName;
  final GlobalSearchScope theSearchScope=ApplicationManager.getApplication().runReadAction(new Computable<GlobalSearchScope>(){
    @Override public GlobalSearchScope compute(){
      if (originalElement != null && myManager.isInProject(originalElement) && initialScope.isSearchInLibraries()) {
        return initialScope.intersectWith(GlobalSearchScope.projectScope(myManager.getProject()));
      }
      return initialScope;
    }
  }
);
  PsiFile[] files=ApplicationManager.getApplication().runReadAction(new Computable<PsiFile[]>(){
    @Override public PsiFile[] compute(){
      return CacheManager.getInstance(myManager.getProject()).getFilesWithWord(wordToSearch,UsageSearchContext.IN_PLAIN_TEXT,theSearchScope,true);
    }
  }
);
  final StringSearcher searcher=new StringSearcher(qName,true,true,false);
  final int patternLength=searcher.getPattern().length();
  progress.pushState();
  progress.setText(PsiBundle.message("psi.search.in.non.java.files.progress"));
  final SearchScope useScope=originalElement == null ? null : ApplicationManager.getApplication().runReadAction(new Computable<SearchScope>(){
    @Override public SearchScope compute(){
      return getUseScope(originalElement);
    }
  }
);
  final Ref<Boolean> cancelled=new Ref<Boolean>(Boolean.FALSE);
  for (int i=0; i < files.length; i++) {
    progress.checkCanceled();
    final PsiFile psiFile=files[i];
    if (psiFile instanceof PsiBinaryFile)     continue;
    final CharSequence text=ApplicationManager.getApplication().runReadAction(new Computable<CharSequence>(){
      @Override public CharSequence compute(){
        return psiFile.getViewProvider().getContents();
      }
    }
);
    LowLevelSearchUtil.processTextOccurrences(text,0,text.length(),searcher,progress,new TIntProcedure(){
      @Override public boolean execute(      final int index){
        boolean isReferenceOK=ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
          @Override public Boolean compute(){
            PsiReference referenceAt=psiFile.findReferenceAt(index);
            return referenceAt == null || useScope == null || !PsiSearchScopeUtil.isInScope(useScope.intersectWith(initialScope),psiFile);
          }
        }
);
        if (isReferenceOK && !processor.process(psiFile,index,index + patternLength)) {
          cancelled.set(Boolean.TRUE);
          return false;
        }
        return true;
      }
    }
);
    if (cancelled.get())     break;
    progress.setFraction((double)(i + 1) / files.length);
  }
  progress.popState();
  return !cancelled.get();
}
