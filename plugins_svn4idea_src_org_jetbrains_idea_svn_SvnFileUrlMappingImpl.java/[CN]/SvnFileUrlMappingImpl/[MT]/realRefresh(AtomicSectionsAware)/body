{
  final boolean goIntoNested=SvnConfiguration.getInstance(myProject).DETECT_NESTED_COPIES;
  final SvnVcs vcs=SvnVcs.getInstance(myProject);
  final VirtualFile[] roots=myHelper.executeDefended();
  final SvnMapping mapping=new SvnMapping();
  final List<Real> allRoots=new ArrayList<Real>();
  for (  final VirtualFile root : roots) {
    final List<Real> foundRoots=ForNestedRootChecker.getAllNestedWorkingCopies(root,vcs,goIntoNested,new Getter<Boolean>(){
      public Boolean get(){
        return atomicSectionsAware.shouldExitAsap();
      }
    }
);
    if (foundRoots.isEmpty()) {
      mapping.reportLonelyRoot(root);
    }
    allRoots.addAll(foundRoots);
    for (    Real foundRoot : foundRoots) {
      addRoot(mapping,foundRoot);
    }
  }
  final SvnMapping groupedMapping=new SvnMapping();
  final List<Real> filtered=new ArrayList<Real>();
  ForNestedRootChecker.filterOutSuperfluousChildren(vcs,allRoots,filtered);
  for (  Real copy : filtered) {
    addRoot(groupedMapping,copy);
  }
  try {
    atomicSectionsAware.enter();
synchronized (myMonitor) {
      myMapping.copyFrom(mapping);
      myMoreRealMapping.copyFrom(groupedMapping);
    }
  }
  finally {
    atomicSectionsAware.exit();
  }
}
