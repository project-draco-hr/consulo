{
  myTreeRoot.removeAllChildren();
  myTemplateGroups.clear();
  for (  TemplateGroup group : groups) {
    myTemplateGroups.add((TemplateGroup)group.copy());
  }
  DefaultMutableTreeNode nodeToSelect=null;
  for (  TemplateGroup group : myTemplateGroups) {
    CheckedTreeNode groupNode=new CheckedTreeNode(group);
    List<TemplateImpl> templates=new ArrayList<TemplateImpl>(group.getElements());
    Collections.sort(templates,new Comparator<TemplateImpl>(){
      public int compare(      final TemplateImpl o1,      final TemplateImpl o2){
        return o1.getKey().compareTo(o2.getKey());
      }
    }
);
    for (    final Object groupTemplate : templates) {
      TemplateImpl template=(TemplateImpl)groupTemplate;
      myTemplateOptions.put(getKey(template),template.createOptions());
      myTemplateContext.put(getKey(template),template.createContext());
      CheckedTreeNode node=new CheckedTreeNode(template);
      node.setChecked(!template.isDeactivated());
      groupNode.add(node);
      if (lastSelectedKey != null && lastSelectedKey.equals(template.getKey())) {
        nodeToSelect=node;
      }
    }
    myTreeRoot.add(groupNode);
  }
  ((DefaultTreeModel)myTree.getModel()).nodeStructureChanged(myTreeRoot);
  if (nodeToSelect != null) {
    JTree tree=myTree;
    TreePath path=new TreePath(nodeToSelect.getPath());
    tree.expandPath(path.getParentPath());
    int rowToSelect=tree.getRowForPath(path);
    myTree.setSelectionInterval(rowToSelect,rowToSelect);
  }
}
