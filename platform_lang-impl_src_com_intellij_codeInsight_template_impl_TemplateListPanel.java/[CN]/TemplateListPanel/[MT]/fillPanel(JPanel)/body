{
  JPanel tablePanel=new JPanel(new BorderLayout());
  tablePanel.add(createTable(),BorderLayout.CENTER);
  JPanel tableButtonsPanel=new JPanel();
  tableButtonsPanel.setBorder(BorderFactory.createEmptyBorder(10,10,10,10));
  tableButtonsPanel.setLayout(new GridBagLayout());
  GridBagConstraints gbConstraints=new GridBagConstraints();
  gbConstraints.gridwidth=GridBagConstraints.REMAINDER;
  gbConstraints.fill=GridBagConstraints.HORIZONTAL;
  gbConstraints.insets=new Insets(0,0,4,0);
  final JButton addButton=createButton(tableButtonsPanel,gbConstraints,CodeInsightBundle.message("templates.dialog.table.action.add"));
  addButton.setEnabled(true);
  myCopyButton=createButton(tableButtonsPanel,gbConstraints,CodeInsightBundle.message("templates.dialog.table.action.copy"));
  myRemoveButton=createButton(tableButtonsPanel,gbConstraints,CodeInsightBundle.message("templates.dialog.table.action.remove"));
  if (getSchemesManager().isExportAvailable()) {
    myExportButton=createButton(tableButtonsPanel,gbConstraints,"Share...");
    myExportButton.addActionListener(new ActionListener(){
      public void actionPerformed(      final ActionEvent e){
        exportCurrentGroup();
      }
    }
);
  }
  if (getSchemesManager().isImportAvailable()) {
    myImportButton=createButton(tableButtonsPanel,gbConstraints,"Import Shared...");
    myImportButton.setMnemonic('I');
    myImportButton.setEnabled(true);
    myImportButton.addActionListener(new ActionListener(){
      public void actionPerformed(      final ActionEvent e){
        new SchemesToImportPopup<TemplateGroup,TemplateGroup>(TemplateListPanel.this){
          protected void onSchemeSelected(          final TemplateGroup scheme){
            for (            TemplateImpl newTemplate : scheme.getElements()) {
              for (              TemplateImpl existingTemplate : collectAllTemplates()) {
                if (existingTemplate.getKey().equals(newTemplate.getKey())) {
                  Messages.showMessageDialog(TemplateListPanel.this,CodeInsightBundle.message("dialog.edit.template.error.already.exists",existingTemplate.getKey(),existingTemplate.getGroupName()),CodeInsightBundle.message("dialog.edit.template.error.title"),Messages.getErrorIcon());
                  return;
                }
              }
            }
            insertNewGroup(scheme);
            for (            TemplateImpl template : scheme.getElements()) {
              addTemplate(template);
            }
          }
        }
.show(getSchemesManager(),myTemplateGroups);
      }
    }
);
  }
  gbConstraints.weighty=1;
  tableButtonsPanel.add(new JPanel(),gbConstraints);
  tablePanel.add(tableButtonsPanel,BorderLayout.EAST);
  optionsPanel.add(tablePanel,BorderLayout.CENTER);
  optionsPanel.add(myDetailsPanel,BorderLayout.SOUTH);
  optionsPanel.add(createExpandByPanel(),BorderLayout.NORTH);
  addButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      addRow();
    }
  }
);
  myCopyButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      copyRow();
    }
  }
);
  myRemoveButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      removeRow();
    }
  }
);
}
