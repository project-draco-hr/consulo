{
  myTreeRoot=new CheckedTreeNode(null);
  myTree=new CheckboxTree(new CheckboxTree.CheckboxTreeCellRenderer(){
    public void customizeRenderer(    final JTree tree,    Object value,    final boolean selected,    final boolean expanded,    final boolean leaf,    final int row,    final boolean hasFocus){
      if (!(value instanceof DefaultMutableTreeNode))       return;
      value=((DefaultMutableTreeNode)value).getUserObject();
      if (value instanceof TemplateImpl) {
        getTextRenderer().append(((TemplateImpl)value).getKey(),SimpleTextAttributes.REGULAR_ATTRIBUTES);
        String description=((TemplateImpl)value).getDescription();
        if (description != null && description.length() > 0) {
          getTextRenderer().append(" (" + description + ")",SimpleTextAttributes.GRAY_ATTRIBUTES);
        }
      }
 else       if (value instanceof TemplateGroup) {
        getTextRenderer().append(((TemplateGroup)value).getName(),SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES);
      }
    }
  }
,myTreeRoot){
    @Override protected void onNodeStateChanged(    final CheckedTreeNode node){
      Object obj=node.getUserObject();
      if (obj instanceof TemplateImpl) {
        ((TemplateImpl)obj).setDeactivated(!node.isChecked());
      }
    }
    @Override protected void installSpeedSearch(){
      new TreeSpeedSearch(this,new Convertor<TreePath,String>(){
        @Override public String convert(        TreePath o){
          Object object=((DefaultMutableTreeNode)o.getLastPathComponent()).getUserObject();
          if (object instanceof TemplateGroup) {
            return ((TemplateGroup)object).getName();
          }
          if (object instanceof TemplateImpl) {
            return ((TemplateImpl)object).getKey();
          }
          return "";
        }
      }
,true);
    }
  }
;
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(true);
  DefaultTreeSelectionModel selModel=new DefaultTreeSelectionModel();
  myTree.setSelectionModel(selModel);
  selModel.setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  myTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    final TreeSelectionEvent e){
      boolean enableRemoveButton=false;
      boolean enableCopyButton=false;
      boolean enableExportButton=false;
      int selected=getSelectedIndex();
      if (selected >= 0 && selected < myTree.getRowCount()) {
        TemplateSettings templateSettings=TemplateSettings.getInstance();
        TemplateImpl template=getTemplate(selected);
        if (template != null) {
          templateSettings.setLastSelectedTemplate(template.getGroupName(),template.getKey());
        }
 else {
          templateSettings.setLastSelectedTemplate(null,null);
        }
        DefaultMutableTreeNode node=(DefaultMutableTreeNode)myTree.getPathForRow(selected).getLastPathComponent();
        enableExportButton=false;
        enableCopyButton=false;
        if (node.getUserObject() instanceof TemplateImpl) {
          enableCopyButton=true;
          if (template != null) {
            TemplateGroup group=getTemplateGroup(template.getGroupName());
            if (group != null && !getSchemesManager().isShared(group)) {
              enableRemoveButton=true;
            }
          }
        }
        if (node.getUserObject() instanceof TemplateGroup) {
          enableRemoveButton=true;
          TemplateGroup group=(TemplateGroup)node.getUserObject();
          enableExportButton=!getSchemesManager().isShared(group);
        }
      }
      updateTemplateTextArea();
      if (!enableRemoveButton) {
        ((CardLayout)myDetailsPanel.getLayout()).show(myDetailsPanel,NO_SELECTION);
      }
      if (myCopyButton != null) {
        myCopyButton.setEnabled(enableCopyButton);
        myRemoveButton.setEnabled(enableRemoveButton);
      }
      if (myExportButton != null) {
        myExportButton.setEnabled(enableExportButton);
      }
      if (myImportButton != null) {
        myImportButton.setEnabled(true);
      }
    }
  }
);
  myTree.registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      addRow();
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_INSERT,0),JComponent.WHEN_FOCUSED);
  myTree.registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      removeRow();
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_DELETE,0),JComponent.WHEN_FOCUSED);
  installPopup();
  DnDSupport.createBuilder(myTree).setBeanProvider(new NullableFunction<DnDActionInfo,DnDDragStartBean>(){
    @Override public DnDDragStartBean fun(    DnDActionInfo dnDActionInfo){
      int selectedIndex=getSelectedIndex();
      TemplateImpl template=getTemplate(selectedIndex);
      return template != null ? new DnDDragStartBean(Pair.create(template,getNode(selectedIndex))) : null;
    }
  }
).setDisposableParent(this).setTargetChecker(new DnDTargetChecker(){
    @Override public boolean update(    DnDEvent event){
      Pair<TemplateImpl,DefaultMutableTreeNode> pair=(Pair<TemplateImpl,DefaultMutableTreeNode>)event.getAttachedObject();
      TemplateImpl template=pair.first;
      String oldGroupName=template.getGroupName();
      TemplateGroup group=getDropGroup(event);
      boolean possible=group != null && !oldGroupName.equals(group.getName());
      event.setDropPossible(possible,"");
      return true;
    }
  }
).setDropHandler(new DnDDropHandler(){
    @Override public void drop(    DnDEvent event){
      Pair<TemplateImpl,DefaultMutableTreeNode> pair=(Pair<TemplateImpl,DefaultMutableTreeNode>)event.getAttachedObject();
      TemplateImpl template=pair.first;
      String oldGroupName=template.getGroupName();
      template.setGroupName(getDropGroup(event).getName());
      moveTemplate(template,oldGroupName,pair.second);
    }
  }
).setImageProvider(new Function<DnDActionInfo,DnDImage>(){
    @Override public DnDImage fun(    DnDActionInfo dnDActionInfo){
      Point point=dnDActionInfo.getPoint();
      return new DnDImage(DnDAwareTree.getDragImage(myTree,myTree.getPathForLocation(point.x,point.y),point).first);
    }
  }
).install();
  JScrollPane scrollPane=ScrollPaneFactory.createScrollPane(myTree);
  if (myTemplateGroups.size() > 0) {
    myTree.setSelectionInterval(0,0);
  }
  return scrollPane;
}
