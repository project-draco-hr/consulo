{
  final IElementType childType=child.getElementType();
  if (childType == ElementType.CLASS_KEYWORD || childType == ElementType.INTERFACE_KEYWORD) {
    myIsAfterClassKeyword=true;
  }
  if (childType == ElementType.METHOD_CALL_EXPRESSION) {
    result.add(createMethodCallExpressiobBlock(child,arrangeChildWrap(child,defaultWrap),arrangeChildAlignment(child,defaultAlignment)));
  }
 else {
    final IElementType nodeType=myNode.getElementType();
    if (childType == ElementType.LBRACE && nodeType == ElementType.ARRAY_INITIALIZER_EXPRESSION) {
      final Wrap wrap=Wrap.createWrap(getWrapType(mySettings.ARRAY_INITIALIZER_WRAP),false);
      child=processParenBlock(ElementType.LBRACE,ElementType.RBRACE,result,child,WrappingStrategy.createDoNotWrapCommaStrategy(wrap),mySettings.ALIGN_MULTILINE_ARRAY_INITIALIZER_EXPRESSION);
    }
 else     if (childType == ElementType.LPARENTH && nodeType == ElementType.EXPRESSION_LIST) {
      final Wrap wrap=Wrap.createWrap(getWrapType(mySettings.CALL_PARAMETERS_WRAP),false);
      if (mySettings.PREFER_PARAMETERS_WRAP) {
        wrap.ignoreParentWraps();
      }
      child=processParenBlock(result,child,WrappingStrategy.createDoNotWrapCommaStrategy(wrap),mySettings.ALIGN_MULTILINE_PARAMETERS_IN_CALLS);
    }
 else     if (childType == ElementType.LPARENTH && nodeType == ElementType.PARAMETER_LIST) {
      final Wrap wrap=Wrap.createWrap(getWrapType(mySettings.METHOD_PARAMETERS_WRAP),false);
      child=processParenBlock(result,child,WrappingStrategy.createDoNotWrapCommaStrategy(wrap),mySettings.ALIGN_MULTILINE_PARAMETERS);
    }
 else     if (childType == ElementType.LPARENTH && nodeType == ElementType.ANNOTATION_PARAMETER_LIST) {
      final Wrap wrap=Wrap.createWrap(getWrapType(mySettings.CALL_PARAMETERS_WRAP),false);
      child=processParenBlock(result,child,WrappingStrategy.createDoNotWrapCommaStrategy(wrap),mySettings.ALIGN_MULTILINE_PARAMETERS_IN_CALLS);
    }
 else     if (childType == ElementType.LPARENTH && nodeType == ElementType.PARENTH_EXPRESSION) {
      child=processParenBlock(result,child,WrappingStrategy.DO_NOT_WRAP,mySettings.ALIGN_MULTILINE_PARENTHESIZED_EXPRESSION);
    }
 else     if (childType == ElementType.ENUM_CONSTANT && myNode instanceof ClassElement) {
      child=processEnumBlock(result,child,((ClassElement)myNode).findEnumConstantListDelimiterPlace());
    }
 else     if (mySettings.TERNARY_OPERATION_SIGNS_ON_NEXT_LINE && isTernaryOperationSign(child)) {
      child=processTernaryOperationRange(result,child,defaultAlignment,defaultWrap,childIndent);
    }
 else     if (childType == ElementType.FIELD) {
      child=processField(result,child,defaultAlignment,defaultWrap,childIndent);
    }
 else {
      final Block block=createJavaBlock(child,mySettings,childIndent,arrangeChildWrap(child,defaultWrap),arrangeChildAlignment(child,defaultAlignment),childOffset);
      if (childType == ElementType.MODIFIER_LIST && containsAnnotations(child)) {
        myAnnotationWrap=Wrap.createWrap(getWrapType(getAnnotationWrapType()),true);
      }
      if (block instanceof AbstractJavaBlock) {
        final AbstractJavaBlock javaBlock=((AbstractJavaBlock)block);
        if (nodeType == ElementType.METHOD_CALL_EXPRESSION && childType == ElementType.REFERENCE_EXPRESSION) {
          javaBlock.setReservedWrap(getReservedWrap());
        }
 else         if (nodeType == ElementType.REFERENCE_EXPRESSION && childType == ElementType.METHOD_CALL_EXPRESSION) {
          javaBlock.setReservedWrap(getReservedWrap());
        }
 else         if (nodeType == ElementType.BINARY_EXPRESSION) {
          javaBlock.setReservedWrap(defaultWrap);
        }
 else         if (childType == ElementType.MODIFIER_LIST) {
          javaBlock.setReservedWrap(myAnnotationWrap);
          if (!lastChildIsAnnotation(child)) {
            myAnnotationWrap=null;
          }
        }
      }
      result.add(block);
    }
  }
  return child;
}
