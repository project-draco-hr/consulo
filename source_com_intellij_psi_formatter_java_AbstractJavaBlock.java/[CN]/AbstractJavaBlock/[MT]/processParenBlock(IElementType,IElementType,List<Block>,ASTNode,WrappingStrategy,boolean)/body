{
  final Indent externalIndent=Indent.getNoneIndent();
  final Indent internalIndent=Indent.getContinuationIndent();
  AlignmentStrategy alignmentStrategy=AlignmentStrategy.createDoNotAlingCommaStrategy(createAlignment(doAlign,null));
  setChildIndent(internalIndent);
  setChildAlignment(alignmentStrategy.getAlignment(null));
  boolean isAfterIncomplete=false;
  ASTNode prev=child;
  int startOffset=child.getTextRange().getStartOffset();
  while (child != null) {
    isAfterIncomplete=isAfterIncomplete || child.getElementType() == TokenType.ERROR_ELEMENT || child.getElementType() == JavaElementType.EMPTY_EXPRESSION;
    if (!FormatterUtil.containsWhiteSpacesOnly(child) && child.getTextLength() > 0) {
      if (child.getElementType() == from) {
        result.add(createJavaBlock(child,mySettings,externalIndent,null,null));
      }
 else       if (child.getElementType() == to) {
        result.add(createJavaBlock(child,mySettings,isAfterIncomplete ? internalIndent : externalIndent,null,isAfterIncomplete ? alignmentStrategy.getAlignment(null) : null));
        return child;
      }
 else {
        final IElementType elementType=child.getElementType();
        result.add(createJavaBlock(child,mySettings,internalIndent,wrappingStrategy.getWrap(elementType),alignmentStrategy.getAlignment(elementType),startOffset));
        if (to == null) {
          return child;
        }
      }
      isAfterIncomplete=false;
    }
    prev=child;
    startOffset+=child.getTextLength();
    child=child.getTreeNext();
  }
  return prev;
}
