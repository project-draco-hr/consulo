{
  if (builder.getTokenType() == null)   return null;
  final TypeInfo typeInfo=new TypeInfo();
  PsiBuilder.Marker type=builder.mark();
  PsiBuilder.Marker anno=myParser.getDeclarationParser().parseAnnotations(builder);
  final IElementType tokenType=builder.getTokenType();
  if (expect(builder,ElementType.PRIMITIVE_TYPE_BIT_SET)) {
    typeInfo.isPrimitive=true;
  }
 else   if (tokenType == JavaTokenType.IDENTIFIER) {
    parseJavaCodeReference(builder,isSet(flags,EAT_LAST_DOT),true,false,false,false,isSet(flags,DIAMONDS),typeInfo);
  }
 else   if ((isSet(flags,WILDCARD) || badWildcard) && tokenType == JavaTokenType.QUEST) {
    builder.advanceLexer();
    completeWildcardType(builder,isSet(flags,WILDCARD),type);
    typeInfo.marker=type;
    return typeInfo;
  }
 else   if (isSet(flags,DIAMONDS) && tokenType == JavaTokenType.GT) {
    emptyElement(builder,JavaElementType.DIAMOND_TYPE);
    type.done(JavaElementType.TYPE);
    typeInfo.marker=type;
    return typeInfo;
  }
 else {
    type.drop();
    if (anno != null && isSet(flags,INCOMPLETE_ANNO)) {
      error(builder,JavaErrorMessages.message("expected.type"));
      typeInfo.hasErrors=true;
      return typeInfo;
    }
    return null;
  }
  while (true) {
    type.done(JavaElementType.TYPE);
    myParser.getDeclarationParser().parseAnnotations(builder);
    final PsiBuilder.Marker bracket=builder.mark();
    if (!expect(builder,JavaTokenType.LBRACKET)) {
      bracket.drop();
      break;
    }
    if (!expect(builder,JavaTokenType.RBRACKET)) {
      bracket.rollbackTo();
      break;
    }
    bracket.drop();
    typeInfo.isArray=true;
    type=type.precede();
  }
  if (isSet(flags,ELLIPSIS) && builder.getTokenType() == JavaTokenType.ELLIPSIS) {
    type=type.precede();
    builder.advanceLexer();
    type.done(JavaElementType.TYPE);
    typeInfo.isVarArg=true;
  }
  typeInfo.marker=type;
  return typeInfo;
}
