{
  final FileIndex fileIndex;
  if (myModule != null) {
    fileIndex=ModuleRootManager.getInstance(myModule).getFileIndex();
  }
 else   if (myModules != null && !myModules.isEmpty()) {
    fileIndex=ProjectRootManager.getInstance(myModules.get(0).getProject()).getFileIndex();
  }
 else   if (myElement != null) {
    fileIndex=ProjectRootManager.getInstance(myElement.getProject()).getFileIndex();
  }
 else   if (myProject != null) {
    fileIndex=ProjectRootManager.getInstance(myProject).getFileIndex();
  }
 else {
    fileIndex=null;
  }
  final ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
  return new PsiRecursiveElementVisitor(){
    @Override public void visitFile(    @NotNull PsiFile file){
      if (mySearchInLibraries || !(file instanceof PsiCompiledElement)) {
        final VirtualFile virtualFile=file.getVirtualFile();
        if (virtualFile == null)         return;
        if (!myIncludeTestSource) {
          if (fileIndex == null || fileIndex.isInTestSourceContent(virtualFile)) {
            return;
          }
        }
        if (!shouldHighlightFile(file))         return;
        myFilesSet.add(virtualFile);
        if (indicator != null) {
          indicator.setText(AnalysisScopeBundle.message("scanning.scope.progress.title"));
          indicator.setText2(ProjectUtil.calcRelativeToProjectPath(virtualFile,file.getProject()));
        }
      }
    }
  }
;
}
