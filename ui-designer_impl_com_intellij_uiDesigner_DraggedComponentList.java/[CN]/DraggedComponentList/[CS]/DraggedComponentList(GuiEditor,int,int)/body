{
  mySelection=FormEditingUtil.getSelectedComponents(editor);
  Collections.sort(mySelection,new Comparator<RadComponent>(){
    public int compare(    final RadComponent o1,    final RadComponent o2){
      if (o1.getParent() == o2.getParent()) {
        int result=o1.getConstraints().getRow() - o2.getConstraints().getRow();
        if (result == 0) {
          result=o1.getConstraints().getColumn() - o2.getConstraints().getColumn();
        }
        return result;
      }
      return 0;
    }
  }
);
  myOriginalConstraints=new GridConstraints[mySelection.size()];
  myOriginalBounds=new Rectangle[mySelection.size()];
  myOriginalParents=new RadContainer[mySelection.size()];
  for (int i=0; i < mySelection.size(); i++) {
    final RadComponent component=mySelection.get(i);
    myOriginalConstraints[i]=component.getConstraints().store();
    myOriginalBounds[i]=component.getBounds();
    myOriginalParents[i]=component.getParent();
  }
  final RadComponent componentUnderMouse=FormEditingUtil.getRadComponentAt(editor,x,y);
  myDragRelativeColumn=0;
  if (mySelection.size() > 1) {
    boolean sameRow=true;
    for (int i=1; i < myOriginalParents.length; i++) {
      if (myOriginalParents[i] != myOriginalParents[0] || myOriginalConstraints[i].getRow() != myOriginalConstraints[0].getRow()) {
        sameRow=false;
        break;
      }
    }
    if (sameRow) {
      for (      GridConstraints constraints : myOriginalConstraints) {
        myDragRelativeColumn=Math.max(myDragRelativeColumn,componentUnderMouse.getConstraints().getColumn() - constraints.getColumn());
      }
    }
  }
  for (  RadComponent c : mySelection) {
    JComponent delegee=c.getDelegee();
    if (c == componentUnderMouse) {
      if (delegee.getX() > x && delegee.getX() + delegee.getWidth() < x) {
        myDragDeltaX=x - (delegee.getX() + delegee.getWidth() / 2);
      }
      if (delegee.getY() > y && delegee.getY() + delegee.getHeight() < y) {
        myDragDeltaY=y - (delegee.getY() + delegee.getHeight() / 2);
      }
    }
  }
}
