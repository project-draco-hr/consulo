{
  UsageInfo[] usages=u[0];
  ArrayList<String> conflicts=new ArrayList<String>();
  for (int i=0; i < myElements.length; i++) {
    PsiElement element=myElements[i];
    if (element instanceof PsiMethod) {
      final PsiClass containingClass=((PsiMethod)element).getContainingClass();
      if (!containingClass.hasModifierProperty(PsiModifier.ABSTRACT)) {
        final PsiMethod[] superMethods=PsiSuperMethodUtil.findSuperMethods((PsiMethod)element);
        for (int j=0; j < superMethods.length; j++) {
          PsiMethod superMethod=superMethods[j];
          if (isInside(superMethod,myElements))           continue;
          if (superMethod.hasModifierProperty(PsiModifier.ABSTRACT)) {
            String message=ConflictsUtil.getDescription(element,true) + " implements " + ConflictsUtil.getDescription(superMethod,true)+ ".";
            conflicts.add(message);
            break;
          }
        }
      }
    }
  }
  final HashMap<PsiElement,UsageHolder> elementsToUsageHolders=sortUsages(usages);
  final Collection<UsageHolder> usageHolders=elementsToUsageHolders.values();
  for (Iterator<UsageHolder> iterator=usageHolders.iterator(); iterator.hasNext(); ) {
    UsageHolder usageHolder=iterator.next();
    if (usageHolder.getNonCodeUsagesNumber() != usageHolder.getUnsafeUsagesNumber()) {
      final String description=usageHolder.getDescription();
      if (description != null) {
        conflicts.add(description);
      }
    }
  }
  if (conflicts.size() > 0) {
    UnsafeUsagesDialog dialog=new UnsafeUsagesDialog(conflicts.toArray(new String[conflicts.size()]),myProject);
    dialog.show();
    if (!dialog.isOK()) {
      final int exitCode=dialog.getExitCode();
      prepareSuccessful();
      if (exitCode == UnsafeUsagesDialog.VIEW_USAGES_EXIT_CODE) {
        showUsages(usages);
      }
      return false;
    }
 else {
      myPreviewNonCodeUsages=false;
    }
  }
  final UsageInfo[] filteredUsages=filterAndQueryOverriding(usages);
  prepareSuccessful();
  if (filteredUsages == null) {
    return false;
  }
  u[0]=filteredUsages;
  return true;
}
