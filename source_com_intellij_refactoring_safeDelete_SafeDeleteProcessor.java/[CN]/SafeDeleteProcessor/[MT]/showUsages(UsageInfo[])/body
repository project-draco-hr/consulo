{
class Descriptor extends UsageViewDescriptorAdapter {
    Descriptor(){
      super(usages,null);
    }
    public PsiElement[] getElements(){
      return myElements;
    }
    public void refresh(    PsiElement[] elements){
      refreshUsages(elements);
    }
    public String getProcessedElementsHeader(){
      return "Attempting to delete";
    }
    public String getCodeReferencesText(    int usagesCount,    int filesCount){
      return "References in code " + UsageViewUtil.getUsageCountInfo(usagesCount,filesCount,"reference");
    }
    public String getCommentReferencesText(    int usagesCount,    int filesCount){
      return "Occurrences found in comments, strings and non-java files " + UsageViewUtil.getUsageCountInfo(usagesCount,filesCount,"occurrence");
    }
    public boolean isSearchInText(){
      return mySearchInCommentsAndStrings || mySearchNonJava;
    }
    public boolean canRefresh(){
      return false;
    }
    public boolean isCancelInCommonGroup(){
      return true;
    }
  }
  final UsageView usageView=UsageViewManager.getInstance(myProject).addContent("Unsuccessful safe delete",new Descriptor(),false,true,true,true,true);
  usageView.addDoProcessAction(new RerunSafeDelete(myProject,myElements,usageView),"Retry",null,"&Rerun Safe Delete");
}
