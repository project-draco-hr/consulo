{
  try {
    for (int i=0; i < usages.length; i++) {
      UsageInfo usage=usages[i];
      if (usage instanceof SafeDeleteReferenceUsageInfo && ((SafeDeleteReferenceUsageInfo)usage).isSafeDelete()) {
        ((SafeDeleteReferenceUsageInfo)usage).deleteElement();
      }
 else       if (usage instanceof SafeDeletePrivatizeMethod) {
        ((SafeDeletePrivatizeMethod)usage).getMethod().getModifierList().setModifierProperty(PsiModifier.PRIVATE,true);
      }
 else       if (usage instanceof SafeDeleteOverridingMethodUsageInfo) {
        ((SafeDeleteOverridingMethodUsageInfo)usage).getOverridingMethod().delete();
      }
    }
    for (int i=0; i < myElements.length; i++) {
      PsiElement element=myElements[i];
      if (element instanceof PsiVariable) {
        ((PsiVariable)element).normalizeDeclaration();
      }
      if (element instanceof PsiTypeParameter) {
        deleteTypeParameterExternalUsages((PsiTypeParameter)element);
      }
      element.delete();
    }
  }
 catch (  IncorrectOperationException e) {
    RefactoringUtil.processIncorrectOperation(myProject,e);
  }
}
