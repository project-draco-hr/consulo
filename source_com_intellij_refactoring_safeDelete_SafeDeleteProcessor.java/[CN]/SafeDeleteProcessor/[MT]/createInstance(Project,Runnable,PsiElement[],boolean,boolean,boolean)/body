{
  PsiManager manager=PsiManager.getInstance(project);
  ArrayList<PsiElement> elements=new ArrayList<PsiElement>(Arrays.asList(elementsToDelete));
  HashSet<PsiElement> elementsToDeleteSet=new HashSet<PsiElement>(Arrays.asList(elementsToDelete));
  for (  PsiElement psiElement : elementsToDelete) {
    if (psiElement instanceof PsiField) {
      PsiField field=(PsiField)psiElement;
      final String propertyName=manager.getCodeStyleManager().variableNameToPropertyName(field.getName(),VariableKind.FIELD);
      PsiClass aClass=field.getContainingClass();
      if (aClass != null) {
        boolean isStatic=field.hasModifierProperty(PsiModifier.STATIC);
        PsiMethod getter=PropertyUtil.findPropertyGetter(aClass,propertyName,isStatic,false);
        if (elementsToDeleteSet.contains(getter))         getter=null;
        PsiMethod setter=PropertyUtil.findPropertySetter(aClass,propertyName,isStatic,false);
        if (elementsToDeleteSet.contains(setter))         setter=null;
        if (askForAccessors && (getter != null || setter != null)) {
          final String message=RefactoringMessageUtil.getGetterSetterMessage(field.getName(),"Delete",getter,setter);
          if (Messages.showYesNoDialog(project,message,"Safe Delete",Messages.getQuestionIcon()) != 0) {
            getter=null;
            setter=null;
          }
        }
        if (setter != null)         elements.add(setter);
        if (getter != null)         elements.add(getter);
      }
    }
  }
  return new SafeDeleteProcessor(project,prepareSuccessfulCallBack,elements.toArray(new PsiElement[elements.size()]),isSearchInComments,isSearchNonJava);
}
