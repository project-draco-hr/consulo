{
  super(new BorderLayout());
  myProject=project;
  loadProfiles();
  myTree=new Tree(new MyTreeModel());
  myTree.setRootVisible(false);
  final JPanel treePanel=ToolbarDecorator.createDecorator(myTree).addExtraAction(new AnActionButton("Move to",IconLoader.getIcon("/actions/nextfile.png")){
    @Override public void actionPerformed(    AnActionEvent e){
      final MyModuleNode node=(MyModuleNode)myTree.getSelectionPath().getLastPathComponent();
      final TreePath[] selectedNodes=myTree.getSelectionPaths();
      final String key=((MyProfileNode)node.getParent()).myKey;
      final List<String> profileNames=new ArrayList<String>();
      profileNames.add(DEFAULT_PROFILE);
      profileNames.addAll(profiles.keySet());
      profileNames.remove(key);
      final JBList list=new JBList(profileNames);
      final JBPopup popup=JBPopupFactory.getInstance().createListPopupBuilder(list).setTitle("Move to").setItemChoosenCallback(new Runnable(){
        @Override public void run(){
          final Object value=list.getSelectedValue();
          if (value instanceof String) {
            final Module toSelect=(Module)node.getUserObject();
            if (selectedNodes != null) {
              for (              TreePath selectedNode : selectedNodes) {
                final Object n=selectedNode.getLastPathComponent();
                if (n instanceof MyModuleNode) {
                  Module module=(Module)((MyModuleNode)n).getUserObject();
                  if (!DEFAULT_PROFILE.equals(key)) {
                    profiles.get(key).remove(module);
                  }
                  if (!DEFAULT_PROFILE.equals(value)) {
                    profiles.get(value).add(module);
                  }
                }
              }
            }
            final MyRootNode root=(MyRootNode)myTree.getModel().getRoot();
            root.sync();
            final DefaultMutableTreeNode node=TreeUtil.findNodeWithObject(root,toSelect);
            if (node != null) {
              TreeUtil.selectNode(myTree,node);
            }
          }
        }
      }
).createPopup();
      RelativePoint point=e.getInputEvent() instanceof MouseEvent ? getPreferredPopupPoint() : TreeUtil.getPointForSelection(myTree);
      popup.show(point);
    }
    @Override public ShortcutSet getShortcut(){
      return ActionManager.getInstance().getAction("Move").getShortcutSet();
    }
    @Override public boolean isEnabled(){
      return myTree.getSelectionPath() != null && myTree.getSelectionPath().getLastPathComponent() instanceof MyModuleNode && !profiles.isEmpty();
    }
  }
).createPanel();
  add(treePanel,BorderLayout.WEST);
  myTree.setCellRenderer(new MyCellRenderer());
  ((MyRootNode)myTree.getModel().getRoot()).sync();
  myContentPanel=new JPanel(new BorderLayout());
  myTree.addTreeSelectionListener(new TreeSelectionListener(){
    String currentProfile=null;
    @Override public void valueChanged(    TreeSelectionEvent e){
      final TreePath path=myTree.getSelectionPath();
      if (path != null) {
        Object node=path.getLastPathComponent();
        if (node instanceof MyModuleNode) {
          node=((MyModuleNode)node).getParent();
        }
        if (node instanceof MyProfileNode) {
          if (!StringUtil.equals(currentProfile,((MyProfileNode)node).myKey)) {
            currentProfile=((MyProfileNode)node).myKey;
            myContentPanel.removeAll();
            myContentPanel.add(getComponentForProfile(currentProfile),BorderLayout.CENTER);
            revalidate();
            repaint();
          }
        }
      }
    }
  }
);
  add(myContentPanel,BorderLayout.CENTER);
}
