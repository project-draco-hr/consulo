{
  FindResult result;
  String message="\"" + stringToFind + "\" not found";
  if (model.isGlobal()) {
    final FindModel newModel=(FindModel)model.clone();
    FindManager findManager=FindManager.getInstance(project);
    Document document=editor.getDocument();
    if (newModel.isForward()) {
      result=findManager.findString(document.getCharsSequence(),0,model);
    }
 else {
      result=findManager.findString(document.getCharsSequence(),document.getTextLength(),model);
    }
    if (result != null && !result.isStringFound()) {
      result=null;
    }
    FindModel modelForNextSearch=findManager.getFindNextModel();
    if (modelForNextSearch == null) {
      modelForNextSearch=findManager.getFindInFileModel();
    }
    if (result != null) {
      if (newModel.isForward()) {
        AnAction action=ActionManager.getInstance().getAction(modelForNextSearch.isForward() ? IdeActions.ACTION_FIND_NEXT : IdeActions.ACTION_FIND_PREVIOUS);
        String shortcutsText=KeymapUtil.getFirstKeyboardShortcutText(action);
        if (shortcutsText.length() > 0) {
          message+=", press " + shortcutsText;
        }
 else {
          message+=", perform \"Find Next\" again ";
        }
        message+=" to search from the top";
        editor.putUserData(KEY,DOWN);
      }
 else {
        AnAction action=ActionManager.getInstance().getAction(modelForNextSearch.isForward() ? IdeActions.ACTION_FIND_PREVIOUS : IdeActions.ACTION_FIND_NEXT);
        String shortcutsText=KeymapUtil.getFirstKeyboardShortcutText(action);
        if (shortcutsText.length() > 0) {
          message+=", press " + shortcutsText;
        }
 else {
          message+=", perform \"Find Previous\" again ";
        }
        message+=" to search from the bottom";
        editor.putUserData(KEY,UP);
      }
    }
    CaretListener listener=new CaretListener(){
      public void caretPositionChanged(      CaretEvent e){
        editor.putUserData(KEY,null);
        editor.getCaretModel().removeCaretListener(this);
      }
    }
;
    editor.getCaretModel().addCaretListener(listener);
  }
  HintManager hintManager=HintManager.getInstance();
  JComponent component=HintUtil.createInformationLabel(message);
  final LightweightHint hint=new LightweightHint(component);
  hintManager.showEditorHint(hint,editor,HintManager.UNDER,HintManager.HIDE_BY_ANY_KEY | HintManager.HIDE_BY_TEXT_CHANGE | HintManager.HIDE_BY_SCROLLING,0,false);
}
