{
  super.visitTryStatement(statement);
  if (!PsiUtil.isLanguageLevel7OrHigher(statement)) {
    return;
  }
  PsiCatchSection[] catchSections=statement.getCatchSections();
  boolean[] duplicates=new boolean[catchSections.length];
  for (int i=0; i < catchSections.length; i++) {
    if (duplicates[i])     continue;
    final PsiCatchSection catchSection=catchSections[i];
    final PsiCodeBlock catchBlock=catchSection.getCatchBlock();
    if (catchBlock == null)     continue;
    final PsiParameter parameter=catchSection.getParameter();
    if (parameter == null)     continue;
    InputVariables inputVariables=new InputVariables(Collections.singletonList(parameter),statement.getProject(),new LocalSearchScope(catchBlock),false);
    DuplicatesFinder finder=new DuplicatesFinder(new PsiElement[]{catchBlock},inputVariables,null,Collections.<PsiVariable>emptyList());
    for (int j=0; j < catchSections.length; j++) {
      if (i == j || duplicates[j])       continue;
      final PsiCatchSection otherSection=catchSections[j];
      final PsiCodeBlock otherCatchBlock=otherSection.getCatchBlock();
      if (otherCatchBlock == null)       continue;
      Match match=finder.isDuplicate(otherCatchBlock,true);
      if (match != null && match.getReturnValue() == null) {
        PsiJavaToken rParenth=otherSection.getRParenth();
        if (rParenth != null) {
          registerError(otherSection,0,rParenth.getStartOffsetInParent() + 1,i);
        }
        duplicates[i]=true;
        duplicates[j]=true;
      }
    }
  }
}
