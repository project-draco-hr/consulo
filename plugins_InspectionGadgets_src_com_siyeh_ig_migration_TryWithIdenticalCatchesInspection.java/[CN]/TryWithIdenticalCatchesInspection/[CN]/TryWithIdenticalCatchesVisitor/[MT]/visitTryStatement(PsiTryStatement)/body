{
  super.visitTryStatement(statement);
  if (!PsiUtil.isLanguageLevel7OrHigher(statement)) {
    return;
  }
  final PsiCatchSection[] catchSections=statement.getCatchSections();
  if (catchSections.length < 2) {
    return;
  }
  final boolean[] duplicates=new boolean[catchSections.length];
  for (int i=0; i < catchSections.length - 1; i++) {
    final PsiCatchSection catchSection=catchSections[i];
    final PsiCodeBlock catchBlock=catchSection.getCatchBlock();
    if (catchBlock == null) {
      continue;
    }
    final PsiParameter parameter=catchSection.getParameter();
    if (parameter == null) {
      continue;
    }
    final InputVariables inputVariables=new InputVariables(Collections.singletonList(parameter),statement.getProject(),new LocalSearchScope(catchBlock),false);
    final DuplicatesFinder finder=new DuplicatesFinder(new PsiElement[]{catchBlock},inputVariables,null,Collections.<PsiVariable>emptyList());
    final PsiParameter[] parameters=statement.getCatchBlockParameters();
    for (int j=i + 1; j < catchSections.length; j++) {
      if (duplicates[j]) {
        continue;
      }
      final PsiCatchSection otherSection=catchSections[j];
      final PsiCodeBlock otherCatchBlock=otherSection.getCatchBlock();
      if (otherCatchBlock == null) {
        continue;
      }
      final Match match=finder.isDuplicate(otherCatchBlock,true);
      if (match == null || match.getReturnValue() != null) {
        continue;
      }
      final List<PsiElement> parameterValues=match.getParameterValues(parameter);
      if (parameterValues != null && (parameterValues.size() != 1 || !(parameterValues.get(0) instanceof PsiReferenceExpression))) {
        continue;
      }
      if (!canCollapse(parameters,i,j)) {
        continue;
      }
      final PsiJavaToken rParenth=otherSection.getRParenth();
      if (rParenth != null) {
        registerErrorAtOffset(otherSection,0,rParenth.getStartOffsetInParent() + 1,Integer.valueOf(i),parameter.getType());
      }
      duplicates[i]=true;
      duplicates[j]=true;
    }
  }
}
