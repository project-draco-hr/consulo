{
  InspectionTreeNode node1=(InspectionTreeNode)o1;
  InspectionTreeNode node2=(InspectionTreeNode)o2;
  if (node1 instanceof InspectionSeverityGroupNode && node2 instanceof InspectionSeverityGroupNode) {
    final InspectionSeverityGroupNode groupNode1=(InspectionSeverityGroupNode)node1;
    final InspectionSeverityGroupNode groupNode2=(InspectionSeverityGroupNode)node2;
    return -SeverityRegistrar.getInstance(groupNode1.getProject()).compare(groupNode1.getSeverityLevel().getSeverity(),groupNode2.getSeverityLevel().getSeverity());
  }
  if (node1 instanceof InspectionGroupNode && node2 instanceof InspectionGroupNode) {
    return ((InspectionGroupNode)node1).getGroupTitle().compareToIgnoreCase(((InspectionGroupNode)node2).getGroupTitle());
  }
  if (node1 instanceof InspectionPackageNode && node2 instanceof InspectionPackageNode) {
    return ((InspectionPackageNode)node1).getPackageName().compareToIgnoreCase(((InspectionPackageNode)node2).getPackageName());
  }
  if (node1 instanceof InspectionNode && node2 instanceof InspectionNode)   return InspectionsConfigTreeComparator.getDisplayTextToSort(node1.toString()).compareToIgnoreCase(InspectionsConfigTreeComparator.getDisplayTextToSort(node2.toString()));
  if (node1 instanceof InspectionNode)   return -1;
  if (node2 instanceof InspectionNode)   return 1;
  if (node1 instanceof OfflineRefElementNode && node2 instanceof OfflineRefElementNode || node1 instanceof OfflineProblemDescriptorNode && node2 instanceof OfflineProblemDescriptorNode) {
    final Object userObject1=node1.getUserObject();
    final Object userObject2=node2.getUserObject();
    if (userObject1 instanceof OfflineProblemDescriptor && userObject2 instanceof OfflineProblemDescriptor) {
      final OfflineProblemDescriptor descriptor1=(OfflineProblemDescriptor)userObject1;
      final OfflineProblemDescriptor descriptor2=(OfflineProblemDescriptor)userObject2;
      if (descriptor1.getLine() != descriptor2.getLine())       return descriptor1.getLine() - descriptor2.getLine();
      return descriptor1.getFQName().compareTo(descriptor2.getFQName());
    }
    if (userObject1 instanceof OfflineProblemDescriptor) {
      return compareLineNumbers(userObject2,(OfflineProblemDescriptor)userObject1);
    }
    if (userObject2 instanceof OfflineProblemDescriptor) {
      return -compareLineNumbers(userObject1,(OfflineProblemDescriptor)userObject2);
    }
  }
  if (node1 instanceof RefElementNode && node2 instanceof RefElementNode) {
    return compareEntities(((RefElementNode)node1).getElement(),((RefElementNode)node2).getElement());
  }
  if (node1 instanceof ProblemDescriptionNode && node2 instanceof ProblemDescriptionNode) {
    final CommonProblemDescriptor descriptor1=((ProblemDescriptionNode)node1).getDescriptor();
    final CommonProblemDescriptor descriptor2=((ProblemDescriptionNode)node2).getDescriptor();
    if (descriptor1 instanceof ProblemDescriptor && descriptor2 instanceof ProblemDescriptor) {
      return ((ProblemDescriptor)descriptor1).getLineNumber() - ((ProblemDescriptor)descriptor2).getLineNumber();
    }
    if (descriptor1 != null && descriptor2 != null) {
      return descriptor1.getDescriptionTemplate().compareToIgnoreCase(descriptor2.getDescriptionTemplate());
    }
    return 0;
  }
  if (node1 instanceof RefElementNode && node2 instanceof ProblemDescriptionNode) {
    final CommonProblemDescriptor descriptor=((ProblemDescriptionNode)node2).getDescriptor();
    if (descriptor instanceof ProblemDescriptor) {
      return compareEntity(((RefElementNode)node1).getElement(),((ProblemDescriptor)descriptor).getPsiElement());
    }
    return compareEntities(((RefElementNode)node1).getElement(),((ProblemDescriptionNode)node2).getElement());
  }
  if (node2 instanceof RefElementNode && node1 instanceof ProblemDescriptionNode) {
    final CommonProblemDescriptor descriptor=((ProblemDescriptionNode)node1).getDescriptor();
    if (descriptor instanceof ProblemDescriptor) {
      return -compareEntity(((RefElementNode)node2).getElement(),((ProblemDescriptor)descriptor).getPsiElement());
    }
    return -compareEntities(((RefElementNode)node2).getElement(),((ProblemDescriptionNode)node1).getElement());
  }
  return 0;
}
