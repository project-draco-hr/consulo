{
  final Project project=e.getData(PlatformDataKeys.PROJECT);
  final IdeView view=e.getData(LangDataKeys.IDE_VIEW);
  if (project == null || view == null) {
    return;
  }
  final PsiDirectory dir=view.getOrChooseDirectory();
  if (dir == null)   return;
  final SnapShotClient client=new SnapShotClient();
  List<RunnerAndConfigurationSettings> appConfigurations=new ArrayList<RunnerAndConfigurationSettings>();
  RunnerAndConfigurationSettings snapshotConfiguration=null;
  boolean connected=false;
  ApplicationConfigurationType cfgType=ApplicationConfigurationType.getInstance();
  List<RunnerAndConfigurationSettings> racsi=RunManager.getInstance(project).getConfigurationSettingsList(cfgType);
  for (  RunnerAndConfigurationSettings config : racsi) {
    if (config.getConfiguration() instanceof ApplicationConfiguration) {
      ApplicationConfiguration appConfig=(ApplicationConfiguration)config.getConfiguration();
      appConfigurations.add(config);
      if (appConfig.ENABLE_SWING_INSPECTOR) {
        SnapShooterConfigurationSettings settings=SnapShooterConfigurationSettings.get(appConfig);
        snapshotConfiguration=config;
        if (settings.getLastPort() > 0) {
          try {
            client.connect(settings.getLastPort());
            connected=true;
          }
 catch (          IOException ex) {
            connected=false;
          }
        }
      }
      if (connected)       break;
    }
  }
  if (snapshotConfiguration == null) {
    snapshotConfiguration=promptForSnapshotConfiguration(project,appConfigurations);
    if (snapshotConfiguration == null)     return;
  }
  if (!connected) {
    int rc=Messages.showYesNoDialog(project,UIDesignerBundle.message("snapshot.run.prompt"),UIDesignerBundle.message("snapshot.title"),Messages.getQuestionIcon());
    if (rc == 1)     return;
    final ApplicationConfiguration appConfig=(ApplicationConfiguration)snapshotConfiguration.getConfiguration();
    final SnapShooterConfigurationSettings settings=SnapShooterConfigurationSettings.get(appConfig);
    settings.setNotifyRunnable(new Runnable(){
      public void run(){
        SwingUtilities.invokeLater(new Runnable(){
          public void run(){
            Messages.showMessageDialog(project,UIDesignerBundle.message("snapshot.prepare.notice"),UIDesignerBundle.message("snapshot.title"),Messages.getInformationIcon());
            try {
              client.connect(settings.getLastPort());
            }
 catch (            IOException ex) {
              Messages.showMessageDialog(project,UIDesignerBundle.message("snapshot.connection.error"),UIDesignerBundle.message("snapshot.title"),Messages.getErrorIcon());
              return;
            }
            runSnapShooterSession(client,project,dir,view);
          }
        }
);
      }
    }
);
    try {
      final ProgramRunner runner=RunnerRegistry.getInstance().getRunner(DefaultRunExecutor.EXECUTOR_ID,appConfig);
      LOG.assertTrue(runner != null,"Runner MUST not be null!");
      Executor executor=DefaultRunExecutor.getRunExecutorInstance();
      runner.execute(new ExecutionEnvironment(executor,runner,snapshotConfiguration,project));
    }
 catch (    ExecutionException ex) {
      Messages.showMessageDialog(project,UIDesignerBundle.message("snapshot.run.error",ex.getMessage()),UIDesignerBundle.message("snapshot.title"),Messages.getErrorIcon());
    }
  }
 else {
    runSnapShooterSession(client,project,dir,view);
  }
}
