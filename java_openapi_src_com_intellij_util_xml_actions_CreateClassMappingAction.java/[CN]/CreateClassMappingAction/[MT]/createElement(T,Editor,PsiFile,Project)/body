{
  PsiClass selectedClass;
  PsiClass baseClass=getBaseClass(context,project);
  if (!ApplicationManager.getApplication().isUnitTestMode()) {
    TreeClassChooser chooser=TreeClassChooserFactory.getInstance(project).createInheritanceClassChooser(getChooserTitle(),GlobalSearchScope.allScope(project),baseClass,null,new TreeClassChooser.ClassFilter(){
      @Override public boolean isAccepted(      PsiClass aClass){
        return !aClass.isInterface() && !aClass.hasModifierProperty(PsiModifier.ABSTRACT);
      }
    }
);
    chooser.showDialog();
    selectedClass=chooser.getSelectedClass();
  }
 else {
    selectedClass=baseClass;
  }
  if (selectedClass == null)   return null;
  final Map<String,String> map=new HashMap<String,String>();
  map.put("CLASS_NAME",selectedClass.getQualifiedName());
  new WriteCommandAction.Simple(project,file){
    @Override protected void run() throws Throwable {
      DomTemplateRunner.getInstance(project).runTemplate(createElement(context),myTemplate,editor,map);
    }
  }
.execute();
  return null;
}
