{
  occurrencesMap.put(ReplaceChoice.NO,new PsiExpression[]{expr});
  final List<PsiExpression> nonWrite=new ArrayList<PsiExpression>();
  for (  PsiExpression occurrence : occurrences) {
    if (!RefactoringUtil.isAssignmentLHS(occurrence)) {
      nonWrite.add(occurrence);
    }
  }
  final boolean hasWriteAccess=occurrences.length > nonWrite.size() && occurrences.length > 1;
  if (hasWriteAccess) {
    occurrencesMap.put(ReplaceChoice.NO_WRITE,nonWrite.toArray(new PsiExpression[nonWrite.size()]));
  }
  if (occurrences.length > 1) {
    occurrencesMap.put(ReplaceChoice.ALL,occurrences);
  }
  return hasWriteAccess;
}
