{
  if (occurrencesMap.size() == 1) {
    callback.pass(occurrencesMap.keySet().iterator().next());
    return;
  }
  final DefaultListModel model=new DefaultListModel();
  for (  ReplaceChoice choice : occurrencesMap.keySet()) {
    model.addElement(choice);
  }
  final JList list=new JBList(model);
  list.setCellRenderer(new DefaultListCellRenderer(){
    @Override public Component getListCellRendererComponent(    final JList list,    final Object value,    final int index,    final boolean isSelected,    final boolean cellHasFocus){
      final Component rendererComponent=super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
      final ReplaceChoice choices=(ReplaceChoice)value;
      if (choices != null) {
        String text=choices.getDescription();
        if (choices == ReplaceChoice.ALL) {
          text=MessageFormat.format(text,occurrencesMap.get(choices).length);
        }
        setText(text);
      }
      return rendererComponent;
    }
  }
);
  list.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    final ListSelectionEvent e){
      final ReplaceChoice value=(ReplaceChoice)list.getSelectedValue();
      if (value == null)       return;
      dropHighlighters();
      final MarkupModel markupModel=myEditor.getMarkupModel();
      final PsiExpression[] psiExpressions=occurrencesMap.get(value);
      for (      PsiExpression psiExpression : psiExpressions) {
        final TextRange textRange=psiExpression.getTextRange();
        final RangeHighlighter rangeHighlighter=markupModel.addRangeHighlighter(textRange.getStartOffset(),textRange.getEndOffset(),HighlighterLayer.SELECTION - 1,myAttributes,HighlighterTargetArea.EXACT_RANGE);
        myRangeHighlighters.add(rangeHighlighter);
      }
    }
  }
);
  JBPopupFactory.getInstance().createListPopupBuilder(list).setTitle("Multiple occurrences found").setMovable(false).setResizable(false).setRequestFocus(true).setItemChoosenCallback(new Runnable(){
    public void run(){
      callback.pass((ReplaceChoice)list.getSelectedValue());
    }
  }
).addListener(new JBPopupAdapter(){
    @Override public void onClosed(    LightweightWindowEvent event){
      dropHighlighters();
    }
  }
).createPopup().showInBestPositionFor(myEditor);
}
