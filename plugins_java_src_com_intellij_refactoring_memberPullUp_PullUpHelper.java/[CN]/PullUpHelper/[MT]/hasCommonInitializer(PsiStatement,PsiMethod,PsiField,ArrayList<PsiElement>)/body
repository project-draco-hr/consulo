{
  final PsiCodeBlock body=subConstructor.getBody();
  if (body == null)   return null;
  final PsiStatement[] statements=body.getStatements();
  PsiStatement commonInitializerCandidate=null;
  for (  PsiStatement statement : statements) {
    final HashSet<PsiStatement> collectedStatements=new HashSet<PsiStatement>();
    collectPsiStatements(statement,collectedStatements);
    boolean doLookup=true;
    for (    PsiStatement collectedStatement : collectedStatements) {
      if (collectedStatement instanceof PsiExpressionStatement) {
        final PsiExpression expression=((PsiExpressionStatement)collectedStatement).getExpression();
        if (expression instanceof PsiAssignmentExpression) {
          final PsiAssignmentExpression assignmentExpression=(PsiAssignmentExpression)expression;
          final PsiExpression lExpression=assignmentExpression.getLExpression();
          if (lExpression instanceof PsiReferenceExpression) {
            final PsiReferenceExpression lRef=(PsiReferenceExpression)lExpression;
            if (lRef.getQualifierExpression() == null || lRef.getQualifierExpression() instanceof PsiThisExpression) {
              final PsiElement resolved=lRef.resolve();
              if (resolved == field) {
                doLookup=false;
                if (commonInitializerCandidate == null) {
                  final PsiExpression initializer=assignmentExpression.getRExpression();
                  if (initializer == null)                   return null;
                  if (commonInitializer == null) {
                    final IsMovableInitializerVisitor visitor=new IsMovableInitializerVisitor();
                    statement.accept(visitor);
                    if (visitor.isMovable()) {
                      ChangeContextUtil.encodeContextInfo(statement,true);
                      PsiStatement statementCopy=(PsiStatement)statement.copy();
                      ChangeContextUtil.clearContextInfo(statement);
                      statementsToRemove.add(statement);
                      commonInitializerCandidate=statementCopy;
                    }
 else {
                      return null;
                    }
                  }
 else {
                    if (PsiEquivalenceUtil.areElementsEquivalent(commonInitializer,statement)) {
                      statementsToRemove.add(statement);
                      commonInitializerCandidate=commonInitializer;
                    }
 else {
                      return null;
                    }
                  }
                }
 else                 if (!PsiEquivalenceUtil.areElementsEquivalent(commonInitializerCandidate,statement)) {
                  return null;
                }
              }
            }
          }
        }
      }
    }
    if (doLookup) {
      final PsiReference[] references=ReferencesSearch.search(field,new LocalSearchScope(statement),false).toArray(new PsiReference[0]);
      if (commonInitializerCandidate == null && references.length > 0) {
        return null;
      }
      for (      PsiReference reference : references) {
        if (RefactoringUtil.isAssignmentLHS(reference.getElement()))         return null;
      }
    }
  }
  return commonInitializerCandidate;
}
