{
  if (!myTargetSuperClass.isValid())   return;
  ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
    @Override public void run(){
      final Query<PsiClass> search=ClassInheritorsSearch.search(myTargetSuperClass);
      final Set<VirtualFile> hierarchyFiles=new HashSet<VirtualFile>();
      for (      PsiClass aClass : search) {
        final PsiFile containingFile=aClass.getContainingFile();
        if (containingFile != null) {
          final VirtualFile virtualFile=containingFile.getVirtualFile();
          if (virtualFile != null) {
            hierarchyFiles.add(virtualFile);
          }
        }
      }
      final Set<PsiMember> methodsToSearchDuplicates=new HashSet<PsiMember>();
      for (      PsiMember psiMember : myMembersAfterMove) {
        if (psiMember instanceof PsiMethod && ((PsiMethod)psiMember).getBody() != null) {
          methodsToSearchDuplicates.add(psiMember);
        }
      }
      MethodDuplicatesHandler.invokeOnScope(myProject,methodsToSearchDuplicates,new AnalysisScope(myProject,hierarchyFiles),true);
    }
  }
,MethodDuplicatesHandler.REFACTORING_NAME,true,myProject);
}
