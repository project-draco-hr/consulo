{
  final Set<PsiMember> movedMembers=ContainerUtil.newHashSet();
  myMembersAfterMove=ContainerUtil.newHashSet();
  for (  MemberInfo info : myMembersToMove) {
    movedMembers.add(info.getMember());
  }
  for (  MemberInfo info : myMembersToMove) {
    if (info.getMember() instanceof PsiClass && info.getOverrides() != null)     continue;
    setCorrectVisibility(movedMembers,info);
    ChangeContextUtil.encodeContextInfo(info.getMember(),true);
  }
  final PsiSubstitutor substitutor=upDownSuperClassSubstitutor();
  for (  MemberInfo info : myMembersToMove) {
    if (info.getMember() instanceof PsiMethod) {
      doMoveMethod(movedMembers,substitutor,info);
    }
 else     if (info.getMember() instanceof PsiField) {
      doMoveField(movedMembers,substitutor,info);
    }
 else     if (info.getMember() instanceof PsiClass) {
      doMoveClass(movedMembers,substitutor,info);
    }
  }
  ExplicitSuperDeleter explicitSuperDeleter=new ExplicitSuperDeleter();
  for (  PsiMember member : myMembersAfterMove) {
    member.accept(explicitSuperDeleter);
  }
  explicitSuperDeleter.fixSupers();
  final QualifiedThisSuperAdjuster qualifiedThisSuperAdjuster=new QualifiedThisSuperAdjuster();
  for (  PsiMember member : myMembersAfterMove) {
    member.accept(qualifiedThisSuperAdjuster);
  }
  ChangeContextUtil.decodeContextInfo(myTargetSuperClass,null,null);
  for (  final PsiMember movedMember : myMembersAfterMove) {
    movedMember.accept(new JavaRecursiveElementWalkingVisitor(){
      @Override public void visitReferenceExpression(      PsiReferenceExpression expression){
        final PsiExpression qualifierExpression=expression.getQualifierExpression();
        if (qualifierExpression != null) {
          final Boolean preserveQualifier=qualifierExpression.getCopyableUserData(PRESERVE_QUALIFIER);
          if (preserveQualifier != null && !preserveQualifier) {
            qualifierExpression.delete();
            return;
          }
        }
        super.visitReferenceExpression(expression);
      }
    }
);
    final JavaRefactoringListenerManager listenerManager=JavaRefactoringListenerManager.getInstance(movedMember.getProject());
    ((JavaRefactoringListenerManagerImpl)listenerManager).fireMemberMoved(mySourceClass,movedMember);
  }
}
