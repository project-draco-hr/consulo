{
  return with(new PatternCondition<T>("methodCallParameter"){
    public boolean accepts(    @NotNull final T literal,    final ProcessingContext context){
      final PsiElement parent=literal.getParent();
      if (parent instanceof GrArgumentList) {
        final GrArgumentList psiExpressionList=(GrArgumentList)parent;
        final GrExpression[] psiExpressions=psiExpressionList.getExpressionArguments();
        if (!(psiExpressions.length > index && psiExpressions[index] == literal))         return false;
        final PsiElement element=psiExpressionList.getParent();
        if (element instanceof GrCall) {
          final GroovyPsiElement expression=element instanceof GrMethodCall ? ((GrMethodCall)element).getInvokedExpression() : element instanceof GrNewExpression ? ((GrNewExpression)element).getReferenceElement() : null;
          if (expression instanceof GrReferenceElement) {
            final GrReferenceElement ref=(GrReferenceElement)expression;
            final PsiNamePatternCondition nameCondition=ContainerUtil.findInstance(methodPattern.getCondition().getConditions(),PsiNamePatternCondition.class);
            if (nameCondition != null && "withName".equals(nameCondition.getDebugMethodName())) {
              final String methodName=ref.getReferenceName();
              if (methodName != null && !nameCondition.getNamePattern().accepts(methodName,context)) {
                return false;
              }
            }
            for (            GroovyResolveResult result : ref.multiResolve(false)) {
              final PsiElement psiElement=result.getElement();
              if (methodPattern.getCondition().accepts(psiElement,context)) {
                return true;
              }
            }
          }
        }
      }
      return false;
    }
  }
);
}
