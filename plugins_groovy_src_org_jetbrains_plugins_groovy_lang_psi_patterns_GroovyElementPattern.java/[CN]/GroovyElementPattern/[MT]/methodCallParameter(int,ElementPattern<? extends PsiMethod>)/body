{
  return with(new PatternCondition<T>("methodCallParameter"){
    public boolean accepts(    @NotNull final T literal,    final ProcessingContext context){
      final PsiElement parent=literal.getParent();
      if (parent instanceof GrArgumentList) {
        final GrArgumentList psiExpressionList=(GrArgumentList)parent;
        final GrExpression[] psiExpressions=psiExpressionList.getExpressionArguments();
        if (!(psiExpressions.length > index && psiExpressions[index] == literal))         return false;
        final PsiElement element=psiExpressionList.getParent();
        if (element instanceof GrMethodCallExpression) {
          final GroovyResolveResult[] results=((GrMethodCallExpression)element).getMethodVariants();
          for (          GroovyResolveResult result : results) {
            final PsiElement psiElement=result.getElement();
            if (methodPattern.getCondition().accepts(psiElement,context)) {
              return true;
            }
          }
        }
      }
      return false;
    }
  }
);
}
