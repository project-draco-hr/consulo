{
  ASTNode leftNode=child1.getNode();
  ASTNode rightNode=child2.getNode();
  final PsiElement left=leftNode.getPsi();
  final PsiElement right=rightNode.getPsi();
  IElementType leftType=leftNode.getElementType();
  IElementType rightType=rightNode.getElementType();
  final CommonCodeStyleSettings settings=context.getSettings();
  final GroovyCodeStyleSettings groovySettings=context.getGroovySettings();
  if (!(mirrorsAst(child1) && mirrorsAst(child2))) {
    return NO_SPACING;
  }
  if (child2 instanceof ClosureBodyBlock) {
    return settings.SPACE_WITHIN_BRACES ? COMMON_SPACING : NO_SPACING_WITH_NEWLINE;
  }
  if (child1 instanceof ClosureBodyBlock) {
    return createDependentSpacingForClosure(settings,groovySettings,(GrClosableBlock)left.getParent(),false);
  }
  if (leftType == mGDOC_COMMENT_START && rightType == mGDOC_COMMENT_DATA || leftType == mGDOC_COMMENT_DATA && rightType == mGDOC_COMMENT_END) {
    return LAZY_SPACING;
  }
  if (leftType == GROOVY_DOC_COMMENT) {
    return COMMON_SPACING_WITH_NL;
  }
  if (right instanceof GrTypeArgumentList) {
    return NO_SPACING_WITH_NEWLINE;
  }
  if (mCOMMA == leftType) {
    return settings.SPACE_AFTER_COMMA ? COMMON_SPACING : NO_SPACING_WITH_NEWLINE;
  }
  if (mCOMMA == rightType) {
    return settings.SPACE_BEFORE_COMMA ? COMMON_SPACING : NO_SPACING_WITH_NEWLINE;
  }
  if (mSEMI == leftType) {
    return settings.SPACE_AFTER_SEMICOLON ? COMMON_SPACING : NO_SPACING_WITH_NEWLINE;
  }
  if (mSEMI == rightType) {
    return settings.SPACE_BEFORE_SEMICOLON ? COMMON_SPACING : NO_SPACING_WITH_NEWLINE;
  }
  if ((DOTS.contains(rightType)) || (mCOLON.equals(rightType) && !(right.getParent() instanceof GrConditionalExpression))) {
    return NO_SPACING_WITH_NEWLINE;
  }
  if (DOTS.contains(leftType)) {
    return NO_SPACING_WITH_NEWLINE;
  }
  if ((VARIABLE_DEFINITION.equals(leftType) || VARIABLE_DEFINITION.equals(rightType)) && !(leftNode.getTreeNext() instanceof PsiErrorElement)) {
    return Spacing.createSpacing(0,0,1,false,100);
  }
  if (leftNode.getTreeParent().getElementType() == mREGEX_LITERAL || leftNode.getTreeParent().getElementType() == mDOLLAR_SLASH_REGEX_LITERAL) {
    return NO_SPACING;
  }
  if ((mLT.equals(leftType) && mLT.equals(rightType)) || (mGT.equals(leftType) && mGT.equals(rightType))) {
    return NO_SPACING_WITH_NEWLINE;
  }
  if (PREFIXES.contains(leftType) || POSTFIXES.contains(rightType) || (PREFIXES_OPTIONAL.contains(leftType) && left.getParent() instanceof GrUnaryExpression)) {
    return NO_SPACING_WITH_NEWLINE;
  }
  if (RANGES.contains(leftType) || RANGES.contains(rightType)) {
    return NO_SPACING_WITH_NEWLINE;
  }
  if (mGDOC_ASTERISKS == leftType && mGDOC_COMMENT_DATA == rightType) {
    String text=rightNode.getText();
    if (text.length() > 0 && !StringUtil.startsWithChar(text,' ')) {
      return COMMON_SPACING;
    }
    return NO_SPACING;
  }
  if (leftType == mGDOC_TAG_VALUE_TOKEN && rightType == mGDOC_COMMENT_DATA) {
    return LAZY_SPACING;
  }
  if (left instanceof GrStatement && right instanceof GrStatement && left.getParent() instanceof GrStatementOwner&& right.getParent() instanceof GrStatementOwner) {
    return COMMON_SPACING_WITH_NL;
  }
  if (rightType == mGDOC_INLINE_TAG_END || leftType == mGDOC_INLINE_TAG_START || rightType == mGDOC_INLINE_TAG_START || leftType == mGDOC_INLINE_TAG_END) {
    return NO_SPACING;
  }
  if ((leftType == GDOC_INLINED_TAG && rightType == mGDOC_COMMENT_DATA) || (leftType == mGDOC_COMMENT_DATA && rightType == GDOC_INLINED_TAG)) {
    return NO_SPACING;
  }
  if (leftType == CLASS_TYPE_ELEMENT && rightType == mTRIPLE_DOT) {
    return NO_SPACING;
  }
  if (rightType == mLT || rightType == mGT) {
    if (right.getParent() instanceof GrCodeReferenceElement) {
      PsiElement p=right.getParent().getParent();
      if (p instanceof GrNewExpression || p instanceof GrAnonymousClassDefinition) {
        return NO_SPACING;
      }
    }
  }
  return COMMON_SPACING;
}
