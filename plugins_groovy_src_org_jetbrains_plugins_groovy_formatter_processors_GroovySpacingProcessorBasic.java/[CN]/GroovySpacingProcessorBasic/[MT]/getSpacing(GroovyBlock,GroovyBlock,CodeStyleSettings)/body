{
  ASTNode leftNode=child1.getNode();
  ASTNode rightNode=child2.getNode();
  if (!child1.getNode().getTextRange().equals(child1.getTextRange()) || !child2.getNode().getTextRange().equals(child2.getTextRange())) {
    return NO_SPACING;
  }
  IElementType leftType=leftNode.getElementType();
  if (mLT == leftType && rightNode.getPsi() instanceof GrTypeParameter || mGT == rightNode.getElementType() && leftNode.getPsi() instanceof GrTypeParameter || mIDENT == leftType && rightNode.getPsi() instanceof GrTypeParameterList) {
    return NO_SPACING;
  }
  if (mLPAREN.equals(rightNode.getElementType()) && rightNode.getPsi().getParent().getNode() != null && METHOD_DEFS.contains(rightNode.getPsi().getParent().getNode().getElementType())) {
    return NO_SPACING;
  }
  if (ARGUMENTS.equals(rightNode.getElementType())) {
    return NO_SPACING;
  }
  if ((mLBRACK.equals(rightNode.getElementType()) && rightNode.getPsi().getParent().getNode() != null && INDEX_OR_ARRAY.contains(rightNode.getPsi().getParent().getNode().getElementType())) || ARRAY_DECLARATOR.equals(rightNode.getElementType())) {
    return NO_SPACING;
  }
  if (METHOD_DEFS.contains(leftType)) {
    return Spacing.createSpacing(0,0,settings.BLANK_LINES_AROUND_METHOD + 1,settings.KEEP_LINE_BREAKS,100);
  }
  if (METHOD_DEFS.contains(rightNode.getElementType())) {
    if (leftNode.getElementType() == GROOVY_DOC_COMMENT) {
      return Spacing.createSpacing(0,0,settings.BLANK_LINES_AROUND_METHOD,settings.KEEP_LINE_BREAKS,0);
    }
    return Spacing.createSpacing(0,0,settings.BLANK_LINES_AROUND_METHOD + 1,settings.KEEP_LINE_BREAKS,100);
  }
  if (LEFT_BRACES.contains(leftType) || RIGHT_BRACES.contains(rightNode.getElementType())) {
    return NO_SPACING_WITH_NEWLINE;
  }
  if ((mLT.equals(leftType) || mGT.equals(rightNode.getElementType())) && leftNode.getPsi().getParent() != null && leftNode.getPsi().getParent() instanceof GrTypeArgumentList) {
    return NO_SPACING_WITH_NEWLINE;
  }
  if (rightNode.getPsi() != null && rightNode.getPsi() instanceof GrTypeArgumentList) {
    return NO_SPACING_WITH_NEWLINE;
  }
  if ((PUNCTUATION_SIGNS.contains(rightNode.getElementType())) || (mCOLON.equals(rightNode.getElementType()) && !(rightNode.getPsi().getParent() instanceof GrConditionalExpression))) {
    return NO_SPACING;
  }
  if (GroovyTokenTypes.DOTS.contains(leftType)) {
    return NO_SPACING_WITH_NEWLINE;
  }
  if (IMPORT_STATEMENT.equals(leftType) && IMPORT_STATEMENT.equals(rightNode.getElementType())) {
    return IMPORT_BETWEEN_SPACING;
  }
  if ((IMPORT_STATEMENT.equals(leftType) && (!IMPORT_STATEMENT.equals(rightNode.getElementType()) && !mSEMI.equals(rightNode.getElementType()))) || ((!IMPORT_STATEMENT.equals(leftType) && !mSEMI.equals(leftType)) && IMPORT_STATEMENT.equals(rightNode.getElementType()))) {
    return IMPORT_OTHER_SPACING;
  }
  if ((VARIABLE_DEFINITION.equals(leftType) || VARIABLE_DEFINITION.equals(rightNode.getElementType())) && !(leftNode.getTreeNext() instanceof PsiErrorElement)) {
    return Spacing.createSpacing(0,0,1,false,100);
  }
  if ((mLT.equals(leftType) && mLT.equals(rightNode.getElementType())) || (mGT.equals(leftType) && mGT.equals(rightNode.getElementType()))) {
    return NO_SPACING_WITH_NEWLINE;
  }
  if (PREFIXES.contains(leftType) || POSTFIXES.contains(rightNode.getElementType()) || (PREFIXES_OPTIONAL.contains(leftType) && leftNode.getPsi().getParent() instanceof GrUnaryExpression)) {
    return NO_SPACING_WITH_NEWLINE;
  }
  if (RANGES.contains(leftType) || RANGES.contains(rightNode.getElementType())) {
    return NO_SPACING_WITH_NEWLINE;
  }
  if (leftNode.getPsi().getParent() != null && leftNode.getPsi().getParent().equals(rightNode.getPsi().getParent()) && leftNode.getPsi().getParent() instanceof GrString) {
    return null;
  }
  if (mGDOC_ASTERISKS == leftType && mGDOC_COMMENT_DATA == rightNode.getElementType()) {
    String text=rightNode.getText();
    if (text.length() > 0 && !text.startsWith(" ")) {
      return COMMON_SPACING;
    }
    return NO_SPACING;
  }
  IElementType rightType=rightNode.getElementType();
  if (leftType == mGDOC_TAG_VALUE_TOKEN && rightType == mGDOC_COMMENT_DATA) {
    return LAZY_SPACING;
  }
  if (leftNode.getPsi() instanceof GrStatement && rightNode.getPsi() instanceof GrStatement) {
    return COMMON_SPACING_WITH_NL;
  }
  if (rightType == mGDOC_INLINE_TAG_END || leftType == mGDOC_INLINE_TAG_START || rightType == mGDOC_INLINE_TAG_START || leftType == mGDOC_INLINE_TAG_END) {
    return NO_SPACING;
  }
  return COMMON_SPACING;
}
