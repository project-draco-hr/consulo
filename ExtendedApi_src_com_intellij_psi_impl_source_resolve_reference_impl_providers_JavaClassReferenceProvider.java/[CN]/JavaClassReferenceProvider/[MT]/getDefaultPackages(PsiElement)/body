{
  List<PsiElement> cachedPackages=myDefaultPackageContent.get();
  if (cachedPackages == null) {
    final List<PsiElement> psiPackages=new ArrayList<PsiElement>();
    final PsiManager manager=position.getManager();
    final BaseScopeProcessor processor=new BaseScopeProcessor(){
      public boolean execute(      PsiElement element,      PsiSubstitutor substitutor){
        psiPackages.add(element);
        return true;
      }
    }
;
    final String defPackageName=DEFAULT_PACKAGE.getValue(myOptions);
    if (StringUtil.isNotEmpty(defPackageName)) {
      final PsiPackage defaultPackage=manager.findPackage(defPackageName);
      if (defaultPackage != null) {
        defaultPackage.processDeclarations(processor,PsiSubstitutor.EMPTY,position,position);
      }
    }
    final PsiPackage rootPackage=manager.findPackage("");
    if (rootPackage != null) {
      rootPackage.processDeclarations(processor,PsiSubstitutor.EMPTY,position,position);
    }
    if (myPackagesEraser == null) {
      myPackagesEraser=new Runnable(){
        public void run(){
          myDefaultPackageContent=NULL_REFERENCE;
        }
      }
;
    }
    cachedPackages=psiPackages;
    ((PsiManagerEx)manager).registerWeakRunnableToRunOnChange(myPackagesEraser);
    myDefaultPackageContent=new SoftReference<List<PsiElement>>(cachedPackages);
  }
  return cachedPackages;
}
