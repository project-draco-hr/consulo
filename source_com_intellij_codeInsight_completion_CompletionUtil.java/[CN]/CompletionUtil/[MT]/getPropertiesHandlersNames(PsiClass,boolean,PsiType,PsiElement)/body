{
  final List<String> propertyHandlers=new ArrayList<String>();
  final PsiField[] fields=psiClass.getFields();
  for (  final PsiField field : fields) {
    if (field == element)     continue;
    final PsiModifierList modifierList=field.getModifierList();
    if (staticContext && (modifierList != null && !modifierList.hasModifierProperty("static")))     continue;
    final PsiMethod getter=PropertyUtil.generateGetterPrototype(field);
    if (getter.getReturnType().equals(varType) && psiClass.findMethodBySignature(getter,true) == null) {
      propertyHandlers.add(getter.getName());
    }
    final PsiMethod setter=PropertyUtil.generateSetterPrototype(field);
    if (setter.getReturnType().equals(varType) && psiClass.findMethodBySignature(setter,true) == null) {
      propertyHandlers.add(setter.getName());
    }
  }
  return propertyHandlers.toArray(new String[propertyHandlers.size()]);
}
