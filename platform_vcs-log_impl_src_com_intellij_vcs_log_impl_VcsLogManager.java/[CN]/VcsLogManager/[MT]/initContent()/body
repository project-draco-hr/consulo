{
  final Map<VirtualFile,VcsLogProvider> logProviders=findLogProviders();
  final VcsLogContainer mainPanel=new VcsLogContainer(myProject);
  myLogDataHolder=new VcsLogDataHolder(myProject,this,logProviders,mySettings);
  myLogDataHolder.initialize(new PairConsumer<VcsLogDataHolder,DataPack>(){
    @Override public void consume(    VcsLogDataHolder vcsLogDataHolder,    DataPack dataPack){
      VcsLogUiImpl logUI=new VcsLogUiImpl(vcsLogDataHolder,myProject,mySettings,new VcsLogColorManagerImpl(logProviders.keySet()),myUiProperties,dataPack);
      myLogDataHolder=vcsLogDataHolder;
      myUi=logUI;
      mainPanel.init(logUI.getMainFrame().getMainComponent());
      final VcsLogGraphTable graphTable=logUI.getTable();
      if (graphTable.getRowCount() > 0) {
        IdeFocusManager.getInstance(myProject).requestFocus(graphTable,true).doWhenProcessed(new Runnable(){
          @Override public void run(){
            graphTable.setRowSelectionInterval(0,0);
          }
        }
);
      }
      myLogRefresher=new PostponeableLogRefresher(myProject,vcsLogDataHolder);
      refreshLogOnVcsEvents(logProviders);
    }
  }
);
  return mainPanel;
}
