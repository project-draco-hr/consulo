{
  if (!settings.getInspectionProfile(elementToHighlight).isToolEnabled(HighlightDisplayKey.DEPRECATED_SYMBOL))   return null;
  if (!(refElement instanceof PsiDocCommentOwner))   return null;
  if (!((PsiDocCommentOwner)refElement).isDeprecated())   return null;
  if (InspectionManagerEx.inspectionResultSuppressed(elementToHighlight,HighlightDisplayKey.DEPRECATED_SYMBOL.getID()))   return null;
  String description=JavaErrorMessages.message("deprecated.symbol",HighlightMessageUtil.getSymbolName(refElement,PsiSubstitutor.EMPTY));
  TextAttributes attributes=EditorColorsManager.getInstance().getGlobalScheme().getAttributes(CodeInsightColors.DEPRECATED_ATTRIBUTES);
  HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.DEPRECATED,elementToHighlight.getTextRange(),description,attributes);
  List<IntentionAction> options=new ArrayList<IntentionAction>();
  options.add(new EditInspectionToolsSettingsAction(HighlightDisplayKey.DEPRECATED_SYMBOL));
  options.add(new AddNoInspectionCommentAction(HighlightDisplayKey.DEPRECATED_SYMBOL,elementToHighlight));
  options.add(new AddNoInspectionDocTagAction(HighlightDisplayKey.DEPRECATED_SYMBOL,elementToHighlight));
  options.add(new AddNoInspectionForClassAction(HighlightDisplayKey.DEPRECATED_SYMBOL,elementToHighlight));
  options.add(new AddNoInspectionAllForClassAction(elementToHighlight));
  options.add(new AddSuppressWarningsAnnotationAction(HighlightDisplayKey.DEPRECATED_SYMBOL,elementToHighlight));
  options.add(new AddSuppressWarningsAnnotationForClassAction(HighlightDisplayKey.DEPRECATED_SYMBOL,elementToHighlight));
  options.add(new AddSuppressWarningsAnnotationForAllAction(elementToHighlight));
  QuickFixAction.registerQuickFixAction(highlightInfo,new EmptyIntentionAction(HighlightDisplayKey.getDisplayNameByKey(HighlightDisplayKey.DEPRECATED_SYMBOL),options),options);
  return highlightInfo;
}
