{
  final String name=method.getName();
  if (!HardcodedMethodConstants.EQUALS.equals(name)) {
    return;
  }
  if (!method.hasModifierProperty(PsiModifier.PUBLIC)) {
    return;
  }
  final PsiParameterList paramList=method.getParameterList();
  final PsiParameter[] parameters=paramList.getParameters();
  if (parameters.length != 1) {
    return;
  }
  final PsiType argType=parameters[0].getType();
  if (TypeUtils.isJavaLangObject(argType)) {
    return;
  }
  final PsiClass aClass=method.getContainingClass();
  if (aClass == null) {
    return;
  }
  final PsiMethod[] methods=aClass.getMethods();
  for (  PsiMethod method1 : methods) {
    if (isNonVariantEquals(method1)) {
      return;
    }
  }
  registerMethodError(method);
}
