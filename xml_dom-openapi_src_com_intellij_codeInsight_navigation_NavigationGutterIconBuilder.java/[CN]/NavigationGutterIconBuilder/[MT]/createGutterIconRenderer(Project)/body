{
  final SmartPointerManager manager=SmartPointerManager.getInstance(project);
  NotNullLazyValue<List<SmartPsiElementPointer>> pointers=new NotNullLazyValue<List<SmartPsiElementPointer>>(){
    @NotNull public List<SmartPsiElementPointer> compute(){
      Set<PsiElement> elements=new THashSet<PsiElement>();
      final ArrayList<SmartPsiElementPointer> list=new ArrayList<SmartPsiElementPointer>();
      for (      final T target : myTargets.getValue()) {
        for (        final PsiElement psiElement : myConvertor.fun(target)) {
          if (elements.add(psiElement)) {
            list.add(manager.createSmartPsiElementPointer(psiElement));
          }
        }
      }
      return list;
    }
  }
;
  if (!myLazy) {
    pointers.getValue();
  }
  if (myTooltipText == null && !myLazy) {
    final SortedSet<String> names=new TreeSet<String>();
    for (    T t : myTargets.getValue()) {
      final String text=myNamer.fun(t);
      if (text != null) {
        names.add(MessageFormat.format(PATTERN,text));
      }
    }
    @NonNls StringBuilder sb=new StringBuilder("<html><body>");
    if (myTooltipTitle != null) {
      sb.append(myTooltipTitle).append("<br>");
    }
    for (    String name : names) {
      sb.append(name).append("<br>");
    }
    sb.append("</body></html>");
    myTooltipText=sb.toString();
  }
  if (myCellRenderer == null) {
    myCellRenderer=new DefaultPsiElementCellRenderer();
  }
  return new MyNavigationGutterIconRenderer(this,myAlignment,myIcon,myTooltipText,pointers);
}
