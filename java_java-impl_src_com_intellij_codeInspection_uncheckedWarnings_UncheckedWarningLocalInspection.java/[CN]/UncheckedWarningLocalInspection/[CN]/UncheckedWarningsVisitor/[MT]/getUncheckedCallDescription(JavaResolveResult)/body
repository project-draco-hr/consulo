{
  final PsiMethod method=(PsiMethod)resolveResult.getElement();
  if (method == null)   return null;
  final PsiSubstitutor substitutor=resolveResult.getSubstitutor();
  if (!PsiUtil.isRawSubstitutor(method,substitutor))   return null;
  final PsiParameter[] parameters=method.getParameterList().getParameters();
  for (  final PsiParameter parameter : parameters) {
    final PsiType parameterType=parameter.getType();
    if (parameterType.accept(new PsiTypeVisitor<Boolean>(){
      @Override public Boolean visitPrimitiveType(      PsiPrimitiveType primitiveType){
        return Boolean.FALSE;
      }
      @Override public Boolean visitArrayType(      PsiArrayType arrayType){
        return arrayType.getComponentType().accept(this);
      }
      @Override public Boolean visitClassType(      PsiClassType classType){
        PsiClass psiClass=classType.resolve();
        if (psiClass instanceof PsiTypeParameter) {
          if (((PsiTypeParameter)psiClass).getOwner() == method)           return Boolean.FALSE;
          return substitutor.substitute((PsiTypeParameter)psiClass) == null ? Boolean.TRUE : Boolean.FALSE;
        }
        PsiType[] parameters=classType.getParameters();
        for (        PsiType parameter : parameters) {
          if (parameter.accept(this).booleanValue())           return Boolean.TRUE;
        }
        return Boolean.FALSE;
      }
      @Override public Boolean visitWildcardType(      PsiWildcardType wildcardType){
        PsiType bound=wildcardType.getBound();
        if (bound != null)         return bound.accept(this);
        return Boolean.TRUE;
      }
      @Override public Boolean visitEllipsisType(      PsiEllipsisType ellipsisType){
        return ellipsisType.getComponentType().accept(this);
      }
    }
).booleanValue()) {
      final PsiElementFactory elementFactory=JavaPsiFacade.getInstance(method.getProject()).getElementFactory();
      PsiType type=elementFactory.createType(method.getContainingClass(),substitutor);
      return JavaErrorMessages.message("generics.unchecked.call.to.member.of.raw.type",HighlightUtil.formatMethod(method),HighlightUtil.formatType(type));
    }
  }
  return null;
}
