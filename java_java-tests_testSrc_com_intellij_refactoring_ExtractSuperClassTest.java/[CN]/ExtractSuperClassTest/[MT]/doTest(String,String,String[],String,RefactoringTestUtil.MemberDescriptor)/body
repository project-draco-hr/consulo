{
  String rootBefore=getRoot() + "/before";
  PsiTestUtil.removeAllRoots(myModule,IdeaTestUtil.getMockJdk14());
  final VirtualFile rootDir=PsiTestUtil.createTestProjectStructure(myProject,myModule,rootBefore,myFilesToDelete);
  PsiClass psiClass=myJavaFacade.findClass(className,ProjectScope.getAllScope(myProject));
  assertNotNull(psiClass);
  final MemberInfo[] members=RefactoringTestUtil.findMembers(psiClass,membersToFind);
  PsiDirectory targetDirectory;
  if (targetPackageName == null) {
    targetDirectory=psiClass.getContainingFile().getContainingDirectory();
  }
 else {
    final PsiPackage aPackage=myJavaFacade.findPackage(targetPackageName);
    assertNotNull(aPackage);
    targetDirectory=aPackage.getDirectories()[0];
  }
  ExtractSuperClassProcessor processor=new ExtractSuperClassProcessor(myProject,targetDirectory,newClassName,psiClass,members,false,new DocCommentPolicy<PsiComment>(DocCommentPolicy.ASIS));
  final PsiPackage targetPackage;
  if (targetDirectory != null) {
    targetPackage=JavaDirectoryService.getInstance().getPackage(targetDirectory);
  }
 else {
    targetPackage=null;
  }
  final PsiClass superClass=psiClass.getExtendsListTypes().length > 0 ? psiClass.getSuperClass() : null;
  final MultiMap<PsiElement,String> conflictsMap=PullUpConflictsUtil.checkConflicts(members,psiClass,superClass,targetPackage,targetDirectory,new InterfaceContainmentVerifier(){
    @Override public boolean checkedInterfacesContain(    PsiMethod psiMethod){
      return PullUpHelper.checkedInterfacesContain(Arrays.asList(members),psiMethod);
    }
  }
,false);
  if (conflicts != null) {
    if (conflictsMap.isEmpty()) {
      fail("Conflicts were not detected");
    }
    final HashSet<String> expectedConflicts=new HashSet<String>(Arrays.asList(conflicts));
    final HashSet<String> actualConflicts=new HashSet<String>(conflictsMap.values());
    assertEquals(expectedConflicts.size(),actualConflicts.size());
    for (    String actualConflict : actualConflicts) {
      if (!expectedConflicts.contains(actualConflict)) {
        fail("Unexpected conflict: " + actualConflict);
      }
    }
  }
 else   if (!conflictsMap.isEmpty()) {
    fail("Unexpected conflicts!!!");
  }
  processor.run();
  PsiDocumentManager.getInstance(myProject).commitAllDocuments();
  FileDocumentManager.getInstance().saveAllDocuments();
  String rootAfter=getRoot() + "/after";
  VirtualFile rootDir2=LocalFileSystem.getInstance().findFileByPath(rootAfter.replace(File.separatorChar,'/'));
  myProject.getComponent(PostprocessReformattingAspect.class).doPostponedFormatting();
  IdeaTestUtil.assertDirectoriesEqual(rootDir2,rootDir,IdeaTestUtil.CVS_FILE_FILTER);
}
