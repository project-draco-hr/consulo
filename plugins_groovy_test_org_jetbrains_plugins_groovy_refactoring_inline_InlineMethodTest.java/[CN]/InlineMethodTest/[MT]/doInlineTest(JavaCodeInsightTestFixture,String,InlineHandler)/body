{
  final List<String> data=TestUtils.readInput(testFile);
  String fileText=data.get(0);
  fixture.configureByText(GroovyFileType.GROOVY_FILE_TYPE,fileText);
  final PsiFile file=fixture.getFile();
  final Editor editor=fixture.getEditor();
  setIndentationToNode(file.getNode());
  int startOffset=editor.getSelectionModel().getSelectionStart();
  int endOffset=editor.getSelectionModel().getSelectionEnd();
  editor.getCaretModel().moveToOffset(endOffset);
  GroovyPsiElement selectedArea=GroovyRefactoringUtil.findElementInRange(file,startOffset,endOffset,GrReferenceExpression.class);
  if (selectedArea == null) {
    PsiElement identifier=GroovyRefactoringUtil.findElementInRange(file,startOffset,endOffset,PsiElement.class);
    if (identifier != null) {
      Assert.assertTrue("Selected area doesn't point to method",identifier.getParent() instanceof GrVariable);
      selectedArea=(GroovyPsiElement)identifier.getParent();
    }
  }
  Assert.assertNotNull("Selected area reference points to nothing",selectedArea);
  PsiElement element=selectedArea instanceof GrExpression ? selectedArea.getReference().resolve() : selectedArea;
  Assert.assertNotNull("Cannot resolve selected reference expression",element);
  try {
    GenericInlineHandler.invoke(element,editor,inlineHandler);
    editor.getSelectionModel().removeSelection();
    fixture.checkResult(data.get(1),true);
  }
 catch (  CommonRefactoringUtil.RefactoringErrorHintException e) {
    assertEquals(data.get(1),"FAIL: " + e.getMessage());
  }
}
