{
  final List<String> data=TestUtils.readInput(testFile);
  String fileText=data.get(0);
  int startOffset=fileText.indexOf(BEGIN_MARKER);
  fileText=TestUtils.removeBeginMarker(fileText);
  int endOffset=fileText.indexOf(END_MARKER);
  fileText=TestUtils.removeEndMarker(fileText);
  fixture.configureByText(GroovyFileType.GROOVY_FILE_TYPE,fileText);
  final PsiFile file=fixture.getFile();
  final Editor myEditor=fixture.getEditor();
  setIndentationToNode(file.getNode());
  myEditor.getSelectionModel().setSelection(startOffset,endOffset);
  myEditor.getCaretModel().moveToOffset(endOffset);
  GroovyPsiElement selectedArea=GroovyRefactoringUtil.findElementInRange(((GroovyFileBase)file),startOffset,endOffset,GrReferenceExpression.class);
  if (selectedArea == null) {
    PsiElement identifier=GroovyRefactoringUtil.findElementInRange(((GroovyFileBase)file),startOffset,endOffset,PsiElement.class);
    if (identifier != null) {
      Assert.assertTrue("Selected area doesn't point to method",identifier.getParent() instanceof GrVariable);
      selectedArea=(GroovyPsiElement)identifier.getParent();
    }
  }
  Assert.assertNotNull("Selected area reference points to nothing",selectedArea);
  PsiElement element=selectedArea instanceof GrExpression ? selectedArea.getReference().resolve() : selectedArea;
  Assert.assertNotNull("Cannot resolve selected reference expression",element);
  GenericInlineHandler.invoke(element,myEditor,new GroovyInlineHandler());
  String result=myEditor.getDocument().getText();
  String invokedResult=GroovyInlineMethodUtil.getInvokedResult();
  final int caretOffset=myEditor.getCaretModel().getOffset();
  result="ok".equals(invokedResult) ? (withCaret ? result.substring(0,caretOffset) + CARET_MARKER + result.substring(caretOffset) : result) : "FAIL: " + invokedResult;
  assertEquals(data.get(1),result);
}
