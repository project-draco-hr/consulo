{
  FileTemplateManager templatesManager=FileTemplateManager.getInstance();
  if (listId == TEMPLATE_ID) {
    FileTemplate[] internals=templatesManager.getInternalTemplates();
    templates=ArrayUtil.mergeArrays(internals,templates,FileTemplate.class);
  }
  ArrayList<FileTemplate> savedTemplates=new ArrayList<FileTemplate>();
  for (  FileTemplate aTemplate : templates) {
    FileTemplate aModifiedTemplate=savedTemplate2ModifiedTemplate.get(aTemplate);
    if (newModifiedItems.contains(aModifiedTemplate)) {
      savedTemplates.add(aTemplate);
    }
 else {
      removeTemplate(aTemplate,listId,false);
      savedTemplate2ModifiedTemplate.remove(aTemplate);
    }
  }
  for (  FileTemplate aTemplate : savedTemplates) {
    FileTemplate aModifiedTemplate=savedTemplate2ModifiedTemplate.get(aTemplate);
    LOG.assertTrue(aModifiedTemplate != null);
    aTemplate.setAdjust(aModifiedTemplate.isAdjust());
    if (!aModifiedTemplate.isDefault()) {
      FileTemplateUtil.copyTemplate(aModifiedTemplate,aTemplate);
    }
 else {
      if (!aTemplate.isDefault()) {
        removeTemplate(aTemplate,listId,true);
      }
    }
  }
  for (  FileTemplate aModifiedTemplate : newModifiedItems) {
    LOG.assertTrue(aModifiedTemplate != null);
    if (!savedTemplate2ModifiedTemplate.containsValue(aModifiedTemplate)) {
      if (listId == TEMPLATE_ID) {
        templatesManager.addTemplate(aModifiedTemplate.getName(),aModifiedTemplate.getExtension()).setText(aModifiedTemplate.getText());
      }
 else       if (listId == PATTERN_ID) {
        templatesManager.addPattern(aModifiedTemplate.getName(),aModifiedTemplate.getExtension()).setText(aModifiedTemplate.getText());
      }
 else       if (listId == CODE_ID) {
        templatesManager.addCodeTemplate(aModifiedTemplate.getName(),aModifiedTemplate.getExtension()).setText(aModifiedTemplate.getText());
      }
 else       if (listId == J2EE_ID) {
        templatesManager.addJ2eeTemplate(aModifiedTemplate.getName(),aModifiedTemplate.getExtension()).setText(aModifiedTemplate.getText());
      }
    }
  }
}
