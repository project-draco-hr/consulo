{
  myUIDisposable=Disposer.newDisposable();
  myTemplatesList=new FileTemplateTabAsList(TEMPLATES_TITLE){
    @Override public void onTemplateSelected(){
      onListSelectionChanged();
    }
  }
;
  myIncludesList=new FileTemplateTabAsList(INCLUDES_TITLE){
    @Override public void onTemplateSelected(){
      onListSelectionChanged();
    }
  }
;
  myCurrentTab=myTemplatesList;
  final List<FileTemplateTab> allTabs=new ArrayList<FileTemplateTab>(Arrays.asList(myTemplatesList,myIncludesList));
  if (FileTemplateManager.getInstance().getAllCodeTemplates().length > 0) {
    myCodeTemplatesList=new FileTemplateTabAsList(CODE_TITLE){
      @Override public void onTemplateSelected(){
        onListSelectionChanged();
      }
    }
;
    allTabs.add(myCodeTemplatesList);
  }
  final Set<FileTemplateGroupDescriptorFactory> factories=new THashSet<FileTemplateGroupDescriptorFactory>();
  ContainerUtil.addAll(factories,ApplicationManager.getApplication().getComponents(FileTemplateGroupDescriptorFactory.class));
  ContainerUtil.addAll(factories,Extensions.getExtensions(FileTemplateGroupDescriptorFactory.EXTENSION_POINT_NAME));
  if (!factories.isEmpty()) {
    myJ2eeTemplatesList=new FileTemplateTabAsTree(J2EE_TITLE){
      @Override public void onTemplateSelected(){
        onListSelectionChanged();
      }
      @Override protected FileTemplateNode initModel(){
        SortedSet<FileTemplateGroupDescriptor> categories=new TreeSet<FileTemplateGroupDescriptor>(new Comparator<FileTemplateGroupDescriptor>(){
          @Override public int compare(          FileTemplateGroupDescriptor o1,          FileTemplateGroupDescriptor o2){
            return o1.getTitle().compareTo(o2.getTitle());
          }
        }
);
        for (        FileTemplateGroupDescriptorFactory templateGroupFactory : factories) {
          ContainerUtil.addIfNotNull(templateGroupFactory.getFileTemplatesDescriptor(),categories);
        }
        return new FileTemplateNode("ROOT",null,ContainerUtil.map2List(categories,new Function<FileTemplateGroupDescriptor,FileTemplateNode>(){
          @Override public FileTemplateNode fun(          FileTemplateGroupDescriptor s){
            return new FileTemplateNode(s);
          }
        }
));
      }
    }
;
    allTabs.add(myJ2eeTemplatesList);
  }
  myTabs=allTabs.toArray(new FileTemplateTab[allTabs.size()]);
  myTabbedPane=new TabbedPaneWrapper(myUIDisposable);
  myTabbedPane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);
  for (  FileTemplateTab tab : myTabs) {
    myTabbedPane.addTab(tab.getTitle(),ScrollPaneFactory.createScrollPane(tab.getComponent()));
  }
  myTabbedPane.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      onTabChanged();
    }
  }
);
  DefaultActionGroup group=new DefaultActionGroup();
  AnAction removeAction=new AnAction(IdeBundle.message("action.remove.template"),null,AllIcons.General.Remove){
    @Override public void actionPerformed(    AnActionEvent e){
      onRemove();
    }
    @Override public void update(    AnActionEvent e){
      super.update(e);
      FileTemplate selectedItem=myCurrentTab.getSelectedTemplate();
      e.getPresentation().setEnabled(selectedItem != null && !isInternalTemplate(selectedItem.getName(),myCurrentTab.getTitle()));
    }
  }
;
  AnAction addAction=new AnAction(IdeBundle.message("action.create.template"),null,AllIcons.General.Add){
    @Override public void actionPerformed(    AnActionEvent e){
      onAdd();
    }
    @Override public void update(    AnActionEvent e){
      super.update(e);
      e.getPresentation().setEnabled(!(myCurrentTab == myCodeTemplatesList || myCurrentTab == myJ2eeTemplatesList));
    }
  }
;
  AnAction cloneAction=new AnAction(IdeBundle.message("action.copy.template"),null,AllIcons.Actions.Copy){
    @Override public void actionPerformed(    AnActionEvent e){
      onClone();
    }
    @Override public void update(    AnActionEvent e){
      super.update(e);
      e.getPresentation().setEnabled(myCurrentTab != myCodeTemplatesList && myCurrentTab != myJ2eeTemplatesList && myCurrentTab.getSelectedTemplate() != null);
    }
  }
;
  AnAction resetAction=new AnAction(IdeBundle.message("action.reset.to.default"),null,AllIcons.Actions.Reset){
    @Override public void actionPerformed(    AnActionEvent e){
      onReset();
    }
    @Override public void update(    AnActionEvent e){
      super.update(e);
      final FileTemplate selectedItem=myCurrentTab.getSelectedTemplate();
      e.getPresentation().setEnabled(selectedItem instanceof BundledFileTemplate && !selectedItem.isDefault());
    }
  }
;
  group.add(addAction);
  group.add(removeAction);
  group.add(cloneAction);
  group.add(resetAction);
  addAction.registerCustomShortcutSet(CommonShortcuts.INSERT,myCurrentTab.getComponent());
  removeAction.registerCustomShortcutSet(CommonShortcuts.DELETE,myCurrentTab.getComponent());
  myToolBar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,group,true).getComponent();
  myEditor=new FileTemplateConfigurable();
  myEditor.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      onEditorChanged();
    }
  }
);
  myMainPanel=new JPanel(new BorderLayout());
  Splitter splitter=new OnePixelSplitter();
  JPanel leftPanel=new JPanel(new BorderLayout());
  leftPanel.add(myToolBar,BorderLayout.NORTH);
  leftPanel.add(myTabbedPane.getComponent(),BorderLayout.CENTER);
  splitter.setFirstComponent(leftPanel);
  myEditorComponent=myEditor.createComponent();
  splitter.setSecondComponent(myEditorComponent);
  myMainPanel.add(splitter,BorderLayout.CENTER);
  return myMainPanel;
}
