{
  return new JavaElementVisitor(){
    @Override public void visitNewExpression(    PsiNewExpression expression){
      final ProblemDescriptor descriptor=checkNewExpression(expression,holder.getManager(),isOnTheFly);
      if (descriptor != null) {
        holder.registerProblem(descriptor);
      }
      super.visitNewExpression(expression);
    }
    @Override public void visitReferenceExpression(    PsiReferenceExpression expression){
      super.visitReferenceExpression(expression);
      final PsiElement colorField=expression.resolve();
      if (colorField != null && colorField instanceof PsiField && ((PsiField)colorField).hasModifierProperty(PsiModifier.STATIC)) {
        final PsiClass colorClass=((PsiField)colorField).getContainingClass();
        if (colorClass != null && Color.class.getName().equals(colorClass.getQualifiedName())) {
          String text=expression.getText();
          if (text.contains(".")) {
            text=text.substring(text.lastIndexOf('.'));
          }
          if (text.startsWith(".")) {
            text=text.substring(1);
          }
          if (text.equalsIgnoreCase("lightGray")) {
            text="LIGHT_GRAY";
          }
 else           if (text.equalsIgnoreCase("darkGray")) {
            text="DARK_GRAY";
          }
          final ProblemDescriptor descriptor=holder.getManager().createProblemDescriptor(expression,"Change to JBColor." + text.toUpperCase(),new ConvertToJBColorConstantQuickFix(text.toUpperCase()),ProblemHighlightType.GENERIC_ERROR_OR_WARNING,isOnTheFly);
          holder.registerProblem(descriptor);
        }
      }
    }
  }
;
}
