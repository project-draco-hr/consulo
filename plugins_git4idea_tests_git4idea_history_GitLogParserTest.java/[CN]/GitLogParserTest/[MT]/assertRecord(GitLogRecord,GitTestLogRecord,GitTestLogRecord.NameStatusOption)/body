{
  assertEquals(actual.getHash(),expected.getHash());
  assertEquals(actual.getShortHash(),expected.shortHash());
  assertEquals(actual.getCommitterName(),expected.getCommitterName());
  assertEquals(actual.getCommitterEmail(),expected.getCommitterEmail());
  assertEquals(actual.getDate(),expected.getCommitTime());
  assertEquals(actual.getAuthorName(),expected.getAuthorName());
  assertEquals(actual.getAuthorEmail(),expected.getAuthorEmail());
  assertEquals(actual.getAuthorTimeStamp(),expected.getAuthorTime().getTime() / 1000);
  assertEquals(actual.getAuthorAndCommitter(),GitUtil.adjustAuthorName(String.format("%s <%s>",expected.getAuthorName(),expected.getAuthorEmail()),String.format("%s <%s>",expected.getCommitterName(),expected.getCommitterEmail())));
  assertEquals(actual.getSubject(),expected.getSubject());
  assertEquals(actual.getBody(),expected.getBody());
  assertEquals(actual.getRawBody(),expected.rawBody());
  assertEquals(actual.getParentsHashes(),expected.getParents());
  assertEquals(actual.getParentsShortHashes(),expected.shortParents());
  if (option == GitTestLogRecord.NameStatusOption.NAME) {
    assertPaths(actual.getFilePaths(myRoot),expected.paths());
  }
 else   if (option == GitTestLogRecord.NameStatusOption.STATUS) {
    assertPaths(actual.getFilePaths(myRoot),expected.paths());
    assertChanges(actual.coolChangesParser(myProject,myRoot),expected.changes());
  }
}
