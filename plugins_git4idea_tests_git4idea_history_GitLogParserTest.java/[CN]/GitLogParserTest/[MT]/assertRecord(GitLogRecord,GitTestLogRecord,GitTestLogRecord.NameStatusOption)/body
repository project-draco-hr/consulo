{
  assertEquals(actual.getHash(),expected.myHash);
  assertEquals(actual.getShortHash(),expected.shortHash());
  assertEquals(actual.getCommitterName(),expected.myCommitterName);
  assertEquals(actual.getCommitterEmail(),expected.myCommitterEmail);
  assertEquals(actual.getDate(),expected.myCommitTime);
  assertEquals(actual.getAuthorName(),expected.myAuthorName);
  assertEquals(actual.getAuthorEmail(),expected.myAuthorEmail);
  assertEquals(actual.getAuthorTimeStamp(),expected.myAuthorTime.getTime() / 1000);
  assertEquals(actual.getAuthorAndCommitter(),GitUtil.adjustAuthorName(String.format("%s <%s>",expected.myAuthorName,expected.myAuthorEmail),String.format("%s <%s>",expected.myCommitterName,expected.myCommitterEmail)));
  assertEquals(actual.getSubject(),expected.mySubject);
  assertEquals(actual.getBody(),expected.myBody);
  assertEquals(actual.getRawBody(),expected.rawBody());
  assertEquals(actual.getParentsHashes(),expected.myParents);
  assertEquals(actual.getParentsShortHashes(),expected.shortParents());
  if (option == GitTestLogRecord.NameStatusOption.NAME) {
    assertPaths(actual.getFilePaths(myRoot),expected.paths());
  }
 else   if (option == GitTestLogRecord.NameStatusOption.STATUS) {
    assertPaths(actual.getFilePaths(myRoot),expected.paths());
    assertChanges(actual.coolChangesParser(myProject,myRoot),expected.changes());
  }
}
