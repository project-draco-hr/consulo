{
  LOG.assertTrue(psiElement.isValid());
  String ret="";
  if (ThrowSearchUtil.isSearchable(psiElement)) {
    ret=ThrowSearchUtil.getSearchableTypeName(psiElement);
  }
  if (psiElement instanceof PsiDirectory) {
    ret=getPackageName((PsiDirectory)psiElement,false);
  }
 else   if (psiElement instanceof PsiPackage) {
    ret=getPackageName((PsiPackage)psiElement);
  }
 else   if (psiElement instanceof PsiFile) {
    ret=((PsiFile)psiElement).getVirtualFile().getPresentableUrl();
  }
 else   if (psiElement instanceof PsiClass) {
    if (psiElement instanceof PsiAnonymousClass) {
      ret="anonymous class";
    }
 else {
      ret=((PsiClass)psiElement).getQualifiedName();
      if (ret == null) {
        ret=((PsiClass)psiElement).getName();
      }
    }
  }
 else   if (psiElement instanceof PsiMethod) {
    PsiMethod psiMethod=(PsiMethod)psiElement;
    ret=PsiFormatUtil.formatMethod(psiMethod,PsiSubstitutor.EMPTY,PsiFormatUtil.SHOW_NAME | PsiFormatUtil.SHOW_PARAMETERS,PsiFormatUtil.SHOW_TYPE);
    PsiClass psiClass=psiMethod.getContainingClass();
    if (psiClass != null) {
      if (psiClass instanceof PsiAnonymousClass) {
        ret=ret + " of anonymous class";
      }
 else {
        String className=psiClass.getName();
        if (!psiClass.isInterface()) {
          ret=ret + " of class " + className;
        }
 else         if (psiClass.isInterface()) {
          ret=ret + " of interface " + className;
        }
      }
    }
  }
 else   if (psiElement instanceof PsiField) {
    PsiField psiField=(PsiField)psiElement;
    ret=PsiFormatUtil.formatVariable(psiField,PsiFormatUtil.SHOW_NAME,PsiSubstitutor.EMPTY);
    PsiClass psiClass=psiField.getContainingClass();
    if (psiClass != null) {
      if (psiClass instanceof PsiAnonymousClass) {
        ret=ret + " of anonymous class";
      }
 else {
        String className=psiClass.getName();
        if (!psiClass.isInterface()) {
          ret=ret + " of class " + className;
        }
 else         if (psiClass.isInterface()) {
          ret=ret + " of interface " + className;
        }
      }
    }
  }
 else   if (psiElement instanceof PsiVariable) {
    PsiVariable psiVariable=(PsiVariable)psiElement;
    ret=PsiFormatUtil.formatVariable(psiVariable,PsiFormatUtil.SHOW_NAME,PsiSubstitutor.EMPTY);
  }
 else   if (psiElement instanceof PsiPointcutDef) {
    PsiPointcutDef psiPointcut=(PsiPointcutDef)psiElement;
    ret=PsiFormatUtil.formatPointcut(psiPointcut,PsiFormatUtil.SHOW_NAME | PsiFormatUtil.SHOW_PARAMETERS,PsiFormatUtil.SHOW_TYPE);
    PsiClass psiClass=psiPointcut.getContainingClass();
    if (psiClass != null) {
      ret=ret + " of aspect " + psiClass.getName();
    }
  }
 else   if (psiElement instanceof PsiErrorIntroduction) {
    PsiErrorIntroduction introduction=(PsiErrorIntroduction)psiElement;
    PsiLiteralExpression message=introduction.getMessage();
    ret="error \"" + (message == null ? "<no message>" : message.getValue()) + "\"";
    PsiFile psiFile=introduction.getContainingFile();
    if (psiFile != null) {
      ret=ret + " in file " + psiFile.getName();
    }
  }
 else   if (psiElement instanceof PsiWarningIntroduction) {
    PsiWarningIntroduction introduction=(PsiWarningIntroduction)psiElement;
    PsiLiteralExpression message=introduction.getMessage();
    ret="warning \"" + (message == null ? "<no message>" : message.getValue()) + "\"";
    PsiFile psiFile=introduction.getContainingFile();
    if (psiFile != null) {
      ret=ret + " in file " + psiFile.getName();
    }
  }
 else   if (psiElement instanceof XmlTag) {
    ret=((XmlTag)psiElement).getName();
  }
 else   if (psiElement instanceof XmlAttributeValue) {
    ret=((XmlAttributeValue)psiElement).getValue();
  }
 else   if (psiElement instanceof PsiLabeledStatement) {
    ret=((PsiLabeledStatement)psiElement).getName();
  }
 else {
    final Language lang=psiElement.getLanguage();
    if (lang != null) {
      FindUsagesProvider provider=lang.getFindUsagesProvider();
      if (provider != null) {
        return provider.getDescriptiveName(psiElement);
      }
    }
  }
  return ret;
}
