{
  boolean queueForDispose=getParent() == null;
  String name=e.getPropertyName();
  if (mySynchronized.contains(name))   return;
  mySynchronized.add(name);
  try {
    if (Presentation.PROP_VISIBLE.equals(name)) {
      final boolean visible=myPresentation.isVisible();
      if (!visible && SystemInfo.isMacSystemMenu && myPlace == ActionPlaces.MAIN_MENU) {
        setEnabled(false);
      }
 else {
        setVisible(visible);
      }
    }
 else     if (Presentation.PROP_ENABLED.equals(name)) {
      setEnabled(myPresentation.isEnabled());
      updateIcon();
    }
 else     if (Presentation.PROP_MNEMONIC_KEY.equals(name)) {
      setMnemonic(myPresentation.getMnemonic());
    }
 else     if (Presentation.PROP_MNEMONIC_INDEX.equals(name)) {
      setDisplayedMnemonicIndex(myPresentation.getDisplayedMnemonicIndex());
    }
 else     if (Presentation.PROP_TEXT.equals(name)) {
      setText(myPresentation.getText());
    }
 else     if (Presentation.PROP_ICON.equals(name) || Presentation.PROP_DISABLED_ICON.equals(name)) {
      updateIcon();
    }
 else     if (SELECTED.equals(name)) {
      updateIcon();
    }
  }
  finally {
    mySynchronized.remove(name);
    if (queueForDispose) {
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          if (getParent() == null) {
            uninstallSynchronizer();
          }
        }
      }
);
    }
  }
}
