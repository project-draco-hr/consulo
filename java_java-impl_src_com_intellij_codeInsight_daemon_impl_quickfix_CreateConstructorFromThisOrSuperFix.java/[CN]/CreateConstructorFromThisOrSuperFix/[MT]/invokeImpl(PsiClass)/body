{
  final PsiFile callSite=myMethodCall.getContainingFile();
  final Project project=myMethodCall.getProject();
  PsiElementFactory elementFactory=JavaPsiFacade.getInstance(project).getElementFactory();
  IdeDocumentHistory.getInstance(project).includeCurrentPlaceAsChangePlace();
  try {
    PsiMethod constructor=elementFactory.createConstructor();
    constructor=(PsiMethod)targetClass.add(constructor);
    final TemplateBuilderImpl templateBuilder=new TemplateBuilderImpl(constructor);
    CreateFromUsageUtils.setupMethodParameters(constructor,templateBuilder,myMethodCall.getArgumentList(),getTargetSubstitutor(myMethodCall));
    final PsiFile psiFile=myMethodCall.getContainingFile();
    templateBuilder.setEndVariableAfter(constructor.getBody().getLBrace());
    final RangeMarker rangeMarker=psiFile.getViewProvider().getDocument().createRangeMarker(myMethodCall.getTextRange());
    constructor=CodeInsightUtilBase.forcePsiPostprocessAndRestoreElement(constructor);
    targetClass=constructor.getContainingClass();
    myMethodCall=CodeInsightUtil.findElementInRange(psiFile,rangeMarker.getStartOffset(),rangeMarker.getEndOffset(),myMethodCall.getClass());
    rangeMarker.dispose();
    Template template=templateBuilder.buildTemplate();
    final Editor editor=positionCursor(project,targetClass.getContainingFile(),targetClass);
    if (editor == null)     return;
    final TextRange textRange=constructor.getTextRange();
    final PsiFile file=targetClass.getContainingFile();
    editor.getDocument().deleteString(textRange.getStartOffset(),textRange.getEndOffset());
    editor.getCaretModel().moveToOffset(textRange.getStartOffset());
    startTemplate(editor,template,project,new TemplateEditingAdapter(){
      @Override public void templateFinished(      Template template,      boolean brokenOff){
        ApplicationManager.getApplication().runWriteAction(new Runnable(){
          @Override public void run(){
            try {
              PsiDocumentManager.getInstance(project).commitDocument(editor.getDocument());
              final int offset=editor.getCaretModel().getOffset();
              PsiMethod constructor=PsiTreeUtil.findElementOfClassAtOffset(file,offset,PsiMethod.class,false);
              CreateFromUsageUtils.setupMethodBody(constructor);
              CreateFromUsageUtils.setupEditor(constructor,editor);
              UndoUtil.markPsiFileForUndo(callSite);
            }
 catch (            IncorrectOperationException e) {
              LOG.error(e);
            }
          }
        }
);
      }
    }
);
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
