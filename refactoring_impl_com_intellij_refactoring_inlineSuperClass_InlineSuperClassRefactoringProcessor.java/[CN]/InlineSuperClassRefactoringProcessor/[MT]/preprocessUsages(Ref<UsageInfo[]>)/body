{
  final List<String> conflicts=new ArrayList<String>();
  final PushDownConflicts pushDownConflicts=new PushDownConflicts(mySuperClass,myMemberInfos);
  for (  MemberInfo info : myMemberInfos) {
    final PsiMember member=info.getMember();
    pushDownConflicts.checkMemberPlacementInTargetClassConflict(myTargetClass,member);
  }
  for (  UsageInfo info : refUsages.get()) {
    if (info instanceof ReplaceWithSubtypeUsageInfo) {
      if (!TypeConversionUtil.isAssignable(((ReplaceWithSubtypeUsageInfo)info).getOriginalType(),((ReplaceWithSubtypeUsageInfo)info).getTargetClassType())) {
        conflicts.add("No consistent substitution found for " + info.getElement().getText());
      }
    }
  }
  conflicts.addAll(pushDownConflicts.getConflicts());
  return showConflicts(conflicts);
}
