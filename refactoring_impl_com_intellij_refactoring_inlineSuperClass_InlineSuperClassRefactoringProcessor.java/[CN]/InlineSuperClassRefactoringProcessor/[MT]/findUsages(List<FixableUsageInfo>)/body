{
  final JavaPsiFacade facade=JavaPsiFacade.getInstance(myProject);
  final PsiElementFactory elementFactory=facade.getElementFactory();
  final PsiResolveHelper resolveHelper=facade.getResolveHelper();
  final PsiSubstitutor superClassSubstitutor=TypeConversionUtil.getSuperClassSubstitutor(mySuperClass,myTargetClass,PsiSubstitutor.EMPTY);
  final PsiClassType targetClassType=elementFactory.createType(myTargetClass,superClassSubstitutor);
  ReferencesSearch.search(mySuperClass).forEach(new Processor<PsiReference>(){
    public boolean process(    final PsiReference reference){
      final PsiElement element=reference.getElement();
      if (element instanceof PsiJavaCodeReferenceElement) {
        final PsiImportStatement importStatement=PsiTreeUtil.getParentOfType(element,PsiImportStatement.class);
        if (importStatement != null) {
          usages.add(new RemoveImportUsageInfo(importStatement));
        }
 else {
          final PsiElement parent=element.getParent();
          if (parent instanceof PsiTypeElement) {
            final PsiType superClassType=((PsiTypeElement)parent).getType();
            PsiSubstitutor subst=PsiSubstitutor.EMPTY;
            for (            PsiTypeParameter typeParameter : PsiUtil.typeParametersIterable(myTargetClass)) {
              subst=subst.put(typeParameter,resolveHelper.getSubstitutionForTypeParameter(typeParameter,targetClassType,superClassType,false,PsiUtil.getLanguageLevel(parent)));
            }
            usages.add(new ReplaceWithSubtypeUsageInfo(((PsiTypeElement)parent),elementFactory.createType(myTargetClass,subst)));
          }
 else           if (parent instanceof PsiReferenceList) {
            final PsiElement pparent=parent.getParent();
            if (pparent instanceof PsiClass) {
              final PsiClass inheritor=(PsiClass)pparent;
              if (parent.equals(inheritor.getExtendsList()) || parent.equals(inheritor.getImplementsList())) {
                usages.add(new ReplaceExtendsListUsageInfo((PsiJavaCodeReferenceElement)element,mySuperClass,myTargetClass));
              }
            }
          }
        }
      }
      return true;
    }
  }
);
}
