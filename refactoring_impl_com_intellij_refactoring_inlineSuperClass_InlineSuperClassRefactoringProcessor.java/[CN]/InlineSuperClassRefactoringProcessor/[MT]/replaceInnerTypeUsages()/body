{
  final JavaPsiFacade facade=JavaPsiFacade.getInstance(myProject);
  final PsiElementFactory elementFactory=facade.getElementFactory();
  final PsiResolveHelper resolveHelper=facade.getResolveHelper();
  final PsiSubstitutor superClassSubstitutor=TypeConversionUtil.getSuperClassSubstitutor(mySuperClass,myTargetClass,PsiSubstitutor.EMPTY);
  final PsiClassType targetClassType=elementFactory.createType(myTargetClass,superClassSubstitutor);
  final Map<UsageInfo,PsiElement> replacementMap=new HashMap<UsageInfo,PsiElement>();
  myTargetClass.accept(new JavaRecursiveElementVisitor(){
    @Override public void visitTypeElement(    final PsiTypeElement typeElement){
      super.visitTypeElement(typeElement);
      final PsiType superClassType=typeElement.getType();
      if (PsiUtil.resolveClassInType(superClassType) == mySuperClass) {
        PsiSubstitutor subst=getSuperClassSubstitutor(superClassType,targetClassType,resolveHelper);
        replacementMap.put(new UsageInfo(typeElement),elementFactory.createTypeElement(elementFactory.createType(myTargetClass,subst)));
      }
    }
    @Override public void visitNewExpression(    final PsiNewExpression expression){
      super.visitNewExpression(expression);
      final PsiType superClassType=expression.getType();
      if (PsiUtil.resolveClassInType(superClassType) == mySuperClass) {
        PsiSubstitutor subst=getSuperClassSubstitutor(superClassType,targetClassType,resolveHelper);
        try {
          replacementMap.put(new UsageInfo(expression),elementFactory.createExpressionFromText("new " + elementFactory.createType(myTargetClass,subst).getCanonicalText() + expression.getArgumentList().getText(),expression));
        }
 catch (        IncorrectOperationException e) {
          LOG.error(e);
        }
      }
    }
  }
);
  try {
    for (    Map.Entry<UsageInfo,PsiElement> elementEntry : replacementMap.entrySet()) {
      final PsiElement element=elementEntry.getKey().getElement();
      if (element != null) {
        element.replace(elementEntry.getValue());
      }
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
