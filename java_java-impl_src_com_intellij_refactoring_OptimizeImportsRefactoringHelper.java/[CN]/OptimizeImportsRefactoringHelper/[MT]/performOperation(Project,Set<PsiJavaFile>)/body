{
  CodeStyleManager.getInstance(project).performActionWithFormatterDisabled(new Runnable(){
    @Override public void run(){
      PsiDocumentManager.getInstance(project).commitAllDocuments();
    }
  }
);
  final Set<SmartPsiElementPointer<PsiImportStatementBase>> redundants=new HashSet<SmartPsiElementPointer<PsiImportStatementBase>>();
  final Runnable findRedundantImports=new Runnable(){
    @Override public void run(){
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        @Override public void run(){
          final JavaCodeStyleManager styleManager=JavaCodeStyleManager.getInstance(project);
          final ProgressIndicator progressIndicator=ProgressManager.getInstance().getProgressIndicator();
          final SmartPointerManager pointerManager=SmartPointerManager.getInstance(project);
          int i=0;
          final int fileCount=javaFiles.size();
          for (          PsiJavaFile file : javaFiles) {
            if (file.isValid()) {
              final VirtualFile virtualFile=file.getVirtualFile();
              if (virtualFile != null) {
                if (progressIndicator != null) {
                  progressIndicator.setText2(virtualFile.getPresentableUrl());
                  progressIndicator.setFraction((double)i++ / fileCount);
                }
                final Collection<PsiImportStatementBase> perFile=styleManager.findRedundantImports(file);
                if (perFile != null) {
                  for (                  PsiImportStatementBase redundant : perFile) {
                    redundants.add(pointerManager.createSmartPsiElementPointer(redundant));
                  }
                }
              }
            }
          }
        }
      }
);
    }
  }
;
  if (!ProgressManager.getInstance().runProcessWithProgressSynchronously(findRedundantImports,"Removing redundant imports",false,project))   return;
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      try {
        for (        final SmartPsiElementPointer<PsiImportStatementBase> pointer : redundants) {
          final PsiImportStatementBase importStatement=pointer.getElement();
          if (importStatement != null && importStatement.isValid()) {
            final PsiJavaCodeReferenceElement ref=importStatement.getImportReference();
            if (ref == null || ref.resolve() == null) {
              continue;
            }
            importStatement.delete();
          }
        }
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
    }
  }
);
}
