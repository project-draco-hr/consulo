{
  final SelectionModel selectionModel=editor.getSelectionModel();
  if (!selectionModel.hasSelection()) {
    return Collections.emptyList();
  }
  int sentenceStart=selectionModel.getSelectionStart();
  final int elementStart=e.getTextRange().getStartOffset();
  if (sentenceStart <= elementStart)   return Collections.emptyList();
  int paragraphStart=editorText.subSequence(elementStart,sentenceStart).toString().lastIndexOf("\n\n");
  if (paragraphStart < 0)   paragraphStart=elementStart;
 else   paragraphStart+=2 + elementStart;
  boolean isParagraph=paragraphStart == sentenceStart;
  while (sentenceStart > paragraphStart) {
    final char c=editorText.charAt(sentenceStart - 1);
    if (!isNatural(c)) {
      return Collections.emptyList();
    }
    if (SENTENCE_END.contains(c)) {
      break;
    }
    sentenceStart--;
  }
  while (Character.isWhitespace(editorText.charAt(sentenceStart))) {
    sentenceStart++;
  }
  int sentenceEnd=selectionModel.getSelectionEnd();
  final int elementEnd=e.getTextRange().getEndOffset();
  if (sentenceEnd > elementEnd) {
    return Collections.emptyList();
  }
  int paragraphEnd=editorText.subSequence(sentenceEnd,elementEnd).toString().indexOf("\n\n");
  if (paragraphEnd < 0)   paragraphEnd=elementEnd;
 else   paragraphEnd+=sentenceEnd;
  isParagraph&=paragraphEnd == sentenceEnd;
  if (isParagraph) {
    return Collections.emptyList();
  }
  if (sentenceEnd > elementStart)   sentenceEnd--;
  while (sentenceEnd < paragraphEnd) {
    final char c=editorText.charAt(sentenceEnd);
    if (!isNatural(c)) {
      return Collections.emptyList();
    }
    sentenceEnd++;
    if (SENTENCE_END.contains(c)) {
      break;
    }
  }
  if (sentenceStart == selectionModel.getSelectionStart() && sentenceEnd == selectionModel.getSelectionEnd()) {
    return Arrays.asList(new TextRange(paragraphStart,paragraphEnd));
  }
  return Arrays.asList(new TextRange(sentenceStart,sentenceEnd));
}
