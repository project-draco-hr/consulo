{
  if (data.TEST_OBJECT.equals(TestType.PACKAGE.getType())) {
    if (!(element instanceof PsiPackage))     return null;
    final RefactoringElementListener listener=RefactoringListeners.getListener((PsiPackage)element,myPackage);
    return RunConfigurationExtension.wrapRefactoringElementListener(element,this,listener);
  }
 else   if (data.TEST_OBJECT.equals(TestType.CLASS.getType())) {
    if (!(element instanceof PsiClass) && !(element instanceof PsiPackage))     return null;
    final RefactoringElementListener listener=RefactoringListeners.getClassOrPackageListener(element,myClass);
    return RunConfigurationExtension.wrapRefactoringElementListener(element,this,listener);
  }
 else   if (data.TEST_OBJECT.equals(TestType.METHOD.getType())) {
    if (!(element instanceof PsiMethod)) {
      final RefactoringElementListener listener=RefactoringListeners.getClassOrPackageListener(element,myClass);
      return RunConfigurationExtension.wrapRefactoringElementListener(element,this,listener);
    }
    final PsiMethod method=(PsiMethod)element;
    if (!method.getName().equals(data.getMethodName()))     return null;
    if (!method.getContainingClass().equals(myClass.getPsiElement()))     return null;
class Listener extends RefactoringElementAdapter implements UndoRefactoringElementListener {
      public void elementRenamedOrMoved(      @NotNull final PsiElement newElement){
        final boolean generatedName=isGeneratedName();
        data.setTestMethod(PsiLocation.fromPsiElement((PsiMethod)newElement));
        if (generatedName)         setGeneratedName();
      }
      @Override public void undoElementMovedOrRenamed(      @NotNull PsiElement newElement,      @NotNull String oldQualifiedName){
        final int methodIdx=oldQualifiedName.indexOf("#") + 1;
        if (methodIdx <= 0 || methodIdx >= oldQualifiedName.length())         return;
        final boolean generatedName=isGeneratedName();
        data.METHOD_NAME=oldQualifiedName.substring(methodIdx);
        if (generatedName)         setGeneratedName();
      }
    }
    return RunConfigurationExtension.wrapRefactoringElementListener(element,this,new Listener());
  }
  return null;
}
