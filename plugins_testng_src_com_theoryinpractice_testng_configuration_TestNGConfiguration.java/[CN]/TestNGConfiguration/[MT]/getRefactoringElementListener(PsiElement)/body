{
  if (data.TEST_OBJECT.equals(TestType.PACKAGE.getType())) {
    if (!(element instanceof PsiPackage))     return null;
    final RefactoringElementListener listener=RefactoringListeners.getListener((PsiPackage)element,myPackage);
    return RunConfigurationExtension.wrapRefactoringElementListener(element,this,listener);
  }
 else   if (data.TEST_OBJECT.equals(TestType.CLASS.getType())) {
    if (!(element instanceof PsiClass))     return null;
    final RefactoringElementListener listener=RefactoringListeners.getClassOrPackageListener(element,myClass);
    return RunConfigurationExtension.wrapRefactoringElementListener(element,this,listener);
  }
 else   if (data.TEST_OBJECT.equals(TestType.METHOD.getType())) {
    if (!(element instanceof PsiMethod)) {
      final RefactoringElementListener listener=RefactoringListeners.getClassOrPackageListener(element,myClass);
      return RunConfigurationExtension.wrapRefactoringElementListener(element,this,listener);
    }
    final PsiMethod method=(PsiMethod)element;
    if (!method.getName().equals(data.getMethodName()))     return null;
    if (!method.getContainingClass().equals(myClass.getPsiElement()))     return null;
    final RefactoringElementListener listener=new RefactoringElementAdapter(){
      public void elementRenamedOrMoved(      @NotNull final PsiElement newElement){
        final boolean generatedName=isGeneratedName();
        data.setTestMethod(PsiLocation.fromPsiElement((PsiMethod)newElement));
        if (generatedName)         setGeneratedName();
      }
    }
;
    return RunConfigurationExtension.wrapRefactoringElementListener(element,this,listener);
  }
  return null;
}
