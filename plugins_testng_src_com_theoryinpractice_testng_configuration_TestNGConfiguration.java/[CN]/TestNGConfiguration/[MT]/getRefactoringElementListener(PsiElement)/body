{
  if (data.TEST_OBJECT.equals(TestType.PACKAGE.getType())) {
    if (!(element instanceof PsiPackage))     return null;
    return RefactoringListeners.getListener((PsiPackage)element,myPackage);
  }
 else   if (data.TEST_OBJECT.equals(TestType.CLASS.getType())) {
    if (!(element instanceof PsiClass))     return null;
    return RefactoringListeners.getClassOrPackageListener(element,myClass);
  }
 else   if (data.TEST_OBJECT.equals(TestType.METHOD.getType())) {
    if (!(element instanceof PsiMethod)) {
      return RefactoringListeners.getClassOrPackageListener(element,myClass);
    }
    final PsiMethod method=(PsiMethod)element;
    if (!method.getName().equals(data.getMethodName()))     return null;
    if (!method.getContainingClass().equals(myClass.getPsiElement()))     return null;
    return new RefactoringElementListener(){
      public void elementMoved(      final PsiElement newElement){
        setMethod((PsiMethod)newElement);
      }
      public void elementRenamed(      final PsiElement newElement){
        setMethod((PsiMethod)newElement);
      }
      private void setMethod(      final PsiMethod psiMethod){
        final boolean generatedName=isGeneratedName();
        data.setTestMethod(PsiLocation.fromPsiElement(psiMethod));
        if (generatedName)         setGeneratedName();
      }
    }
;
  }
  return null;
}
