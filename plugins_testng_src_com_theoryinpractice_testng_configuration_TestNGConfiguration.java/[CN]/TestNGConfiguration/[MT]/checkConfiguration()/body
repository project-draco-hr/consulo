{
  if (data.TEST_OBJECT.equals(TestType.CLASS.getType()) || data.TEST_OBJECT.equals(TestType.METHOD.getType())) {
    final SourceScope scope=data.getScope().getSourceScope(this);
    if (scope == null) {
      throw new RuntimeConfigurationException("Invalid scope specified");
    }
    PsiClass psiClass=JavaPsiFacade.getInstance(project).findClass(data.getMainClassName(),scope.getGlobalSearchScope());
    if (psiClass == null)     throw new RuntimeConfigurationException("Invalid class '" + data.getMainClassName() + "'specified");
    if (data.TEST_OBJECT.equals(TestType.METHOD.getType())) {
      PsiMethod[] methods=psiClass.findMethodsByName(data.getMethodName(),true);
      if (methods.length == 0) {
        throw new RuntimeConfigurationException("Invalid method '" + data.getMethodName() + "'specified");
      }
      for (      PsiMethod method : methods) {
        if (!method.getModifierList().hasModifierProperty(PsiModifier.PUBLIC)) {
          throw new RuntimeConfigurationException("Non public method '" + data.getMethodName() + "'specified");
        }
      }
    }
  }
 else   if (data.TEST_OBJECT.equals(TestType.PACKAGE.getType())) {
    PsiPackage psiPackage=PsiManager.getInstance(project).findPackage(data.getPackageName());
    if (psiPackage == null)     throw new RuntimeConfigurationException("Invalid package '" + data.getMainClassName() + "'specified");
  }
 else   if (data.TEST_OBJECT.equals(TestType.SUITE.getType())) {
    try {
      new Parser(data.getSuiteName()).parse();
    }
 catch (    Exception e) {
      throw new RuntimeConfigurationException("Unable to parse '" + data.getSuiteName() + "' specified");
    }
  }
}
