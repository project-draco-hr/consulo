{
  if (expression instanceof PsiNewExpression) {
    final PsiNewExpression newExpression=(PsiNewExpression)expression;
    final PsiExpressionList argumentList=newExpression.getArgumentList();
    if (argumentList == null) {
      return null;
    }
    final PsiExpression[] arguments=argumentList.getExpressions();
    if (arguments.length == 1) {
      final PsiExpression argument=arguments[0];
      final PsiType type=argument.getType();
      if (!PsiType.INT.equals(type)) {
        result.append(argument.getText());
        if (type != null && type.equalsToText("java.lang.CharSequence")) {
          result.append(".toString()");
        }
      }
    }
    final PsiElement parent=expression.getParent();
    if (result.length() == 0 && parent instanceof PsiVariable) {
      result.append("\"\"");
    }
    return result;
  }
 else   if (expression instanceof PsiMethodCallExpression) {
    final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)expression;
    final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
    final PsiExpression qualifier=methodExpression.getQualifierExpression();
    result=buildStringExpression(qualifier,result);
    if (result == null) {
      return null;
    }
    if ("toString".equals(methodExpression.getReferenceName())) {
      if (result.length() == 0) {
        result.append("\"\"");
      }
    }
 else {
      final PsiExpressionList argumentList=methodCallExpression.getArgumentList();
      final PsiExpression[] arguments=argumentList.getExpressions();
      if (arguments.length != 1) {
        return null;
      }
      final PsiExpression argument=arguments[0];
      final PsiType type=argument.getType();
      if (result.length() != 0) {
        result.append('+');
        if (ParenthesesUtils.getPrecedence(argument) > ParenthesesUtils.ADDITIVE_PRECEDENCE || (type instanceof PsiPrimitiveType && ParenthesesUtils.getPrecedence(argument) == ParenthesesUtils.ADDITIVE_PRECEDENCE)) {
          result.append('(').append(argument.getText()).append(')');
        }
 else {
          result.append(argument.getText());
        }
      }
 else {
        if (type instanceof PsiPrimitiveType) {
          if (argument instanceof PsiLiteralExpression) {
            final PsiLiteralExpression literalExpression=(PsiLiteralExpression)argument;
            result.append('"').append(literalExpression.getValue()).append('"');
          }
 else {
            result.append("String.valueOf(").append(argument.getText()).append(")");
          }
        }
 else {
          if (ParenthesesUtils.getPrecedence(argument) >= ParenthesesUtils.ADDITIVE_PRECEDENCE) {
            result.append('(').append(argument.getText()).append(')');
          }
 else {
            if (type != null && !type.equalsToText(CommonClassNames.JAVA_LANG_STRING)) {
              result.append("String.valueOf(").append(argument.getText()).append(")");
            }
 else {
              result.append(argument.getText());
            }
          }
        }
      }
    }
    return result;
  }
  return null;
}
