{
  for (  Map.Entry<String,GradleProjectStructureNode<GradleSyntheticId>> entry : myModuleDependencies.entrySet()) {
    for (    GradleProjectStructureNode<?> dependencyNode : entry.getValue()) {
      if (!change.getEntityId().equals(nodeIdMapper.fun(dependencyNode.getDescriptor().getElement()))) {
        continue;
      }
      if (obsolete) {
        dependencyNode.removeConflictChange(change);
      }
 else {
        dependencyNode.addConflictChange(change);
      }
      if (!passFilters(dependencyNode)) {
        dependencyNode.removeFromParent();
        final GradleProjectStructureNode<GradleModuleId> moduleNode=myModules.get(entry.getKey());
        final GradleModuleId moduleId=moduleNode.getDescriptor().getElement();
        removeModuleDependencyNodeIfEmpty(entry.getValue(),moduleId);
        removeModuleNodeIfEmpty(moduleNode);
      }
      break;
    }
  }
}
