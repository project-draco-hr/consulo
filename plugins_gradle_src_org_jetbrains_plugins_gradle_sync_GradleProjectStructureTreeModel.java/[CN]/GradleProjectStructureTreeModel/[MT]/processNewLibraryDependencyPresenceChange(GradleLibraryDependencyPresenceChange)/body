{
  GradleProjectStructureNode<GradleLibraryDependencyId> dependencyNode=processNewDependencyPresenceChange(change);
  GradleLibraryDependencyId id=change.getGradleEntity();
  if (dependencyNode == null || id == null) {
    return;
  }
  GradleLibrary gradleLibrary=myProjectStructureHelper.findGradleLibrary(id.getLibraryId());
  if (gradleLibrary == null) {
    return;
  }
  Map<GradleJarId,GradleProjectStructureNode<GradleJarId>> existingJarNodes=ContainerUtilRt.newHashMap();
  for (  GradleProjectStructureNode<GradleJarId> jarNode : dependencyNode.getChildren(GradleJarId.class)) {
    existingJarNodes.put(jarNode.getDescriptor().getElement(),jarNode);
  }
  Map<GradleJarId,GradleProjectStructureNode<GradleJarId>> gradleJarIds=ContainerUtilRt.newHashMap();
  GradleLibraryId libraryId=dependencyNode.getDescriptor().getElement().getLibraryId();
  for (  String path : gradleLibrary.getPaths(LibraryPathType.BINARY)) {
    GradleJarId jarId=new GradleJarId(path,LibraryPathType.BINARY,libraryId);
    GradleProjectStructureNode<GradleJarId> jarNode=existingJarNodes.get(jarId);
    if (jarNode == null) {
      jarNode=buildNode(jarId,GradleUtil.extractNameFromPath(jarId.getPath()));
      jarNode.setAttributes(GradleTextAttributes.NO_CHANGE);
      jarNode.getDescriptor().setToolTip(jarId.getPath());
      dependencyNode.add(jarNode);
    }
    gradleJarIds.put(jarId,jarNode);
  }
  Library intellijLibrary=myProjectStructureHelper.findIdeLibrary(gradleLibrary);
  if (intellijLibrary == null) {
    for (    GradleProjectStructureNode<?> jarNode : dependencyNode) {
      jarNode.setAttributes(GradleTextAttributes.GRADLE_LOCAL_CHANGE);
    }
  }
 else {
    Set<GradleJarId> intellijJarIds=ContainerUtilRt.newHashSet();
    for (    VirtualFile jarFile : intellijLibrary.getFiles(OrderRootType.CLASSES)) {
      GradleJarId jarId=new GradleJarId(GradleUtil.getLocalFileSystemPath(jarFile),LibraryPathType.BINARY,libraryId);
      if (gradleJarIds.remove(jarId) == null) {
        intellijJarIds.add(jarId);
      }
    }
    for (    GradleProjectStructureNode<GradleJarId> jarNode : gradleJarIds.values()) {
      jarNode.setAttributes(GradleTextAttributes.GRADLE_LOCAL_CHANGE);
    }
    for (    GradleJarId jarId : intellijJarIds) {
      GradleProjectStructureNode<GradleJarId> jarNode=buildNode(jarId,GradleUtil.extractNameFromPath(jarId.getPath()));
      jarNode.setAttributes(GradleTextAttributes.INTELLIJ_LOCAL_CHANGE);
      jarNode.getDescriptor().setToolTip(jarId.getPath());
      dependencyNode.add(jarNode);
    }
  }
}
