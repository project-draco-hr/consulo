{
  if (myFilters.isEmpty()) {
    return;
  }
  Deque<GradleProjectStructureNode<?>> toRemove=new ArrayDeque<GradleProjectStructureNode<?>>();
  Stack<GradleProjectStructureNode<?>> toProcess=new Stack<GradleProjectStructureNode<?>>();
  toProcess.push(root);
  while (!toProcess.isEmpty()) {
    final GradleProjectStructureNode<?> current=toProcess.pop();
    toRemove.add(current);
    if (passFilters(current)) {
      toRemove.remove(current);
      for (GradleProjectStructureNode<?> parent=current.getParent(); parent != null; parent=parent.getParent()) {
        if (!toRemove.remove(parent)) {
          break;
        }
      }
    }
    for (    GradleProjectStructureNode<?> child : current) {
      toProcess.push(child);
    }
  }
  for (GradleProjectStructureNode<?> node=toRemove.pollLast(); node != null; node=toRemove.pollLast()) {
    final GradleProjectStructureNode<?> parent=node.getParent();
    if (parent == null) {
      continue;
    }
    parent.remove(node);
    final GradleEntityId id=node.getDescriptor().getElement();
    if (id instanceof GradleModuleId) {
      String moduleName=((GradleModuleId)id).getModuleName();
      myModules.remove(moduleName);
      myModuleDependencies.remove(moduleName);
    }
  }
}
