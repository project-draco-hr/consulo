{
  final GradleProjectStructureNode<GradleSyntheticId> holder=myModuleDependencies.get(id.getOwnerModuleName());
  if (holder == null) {
    return;
  }
  for (  GradleProjectStructureNode<? extends AbstractGradleDependencyId> node : holder.getChildren(id.getClass())) {
    GradleProjectStructureNodeDescriptor<? extends AbstractGradleDependencyId> descriptor=node.getDescriptor();
    if (!id.equals(descriptor.getElement())) {
      continue;
    }
    if (removeNode) {
      holder.remove(node);
    }
 else {
      descriptor.setAttributes(GradleTextAttributes.NO_CHANGE);
      holder.correctChildPositionIfNecessary(node);
      if (!passFilters(node)) {
        node.removeFromParent();
        removeModuleDependencyNodeIfEmpty(holder,id.getOwnerModuleId());
        removeModuleNodeIfEmpty(myModules.get(id.getOwnerModuleName()));
      }
    }
    return;
  }
}
