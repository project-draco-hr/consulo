{
  myModuleDependencies.clear();
  myModules.clear();
  GradleProjectId projectId=GradleEntityIdMapper.mapEntityToId(getProject());
  GradleProjectStructureNode<GradleProjectId> root=buildNode(projectId,getProject().getName());
  setRoot(root);
  final Collection<Module> modules=myPlatformFacade.getModules(getProject());
  final List<GradleProjectStructureNode<?>> dependencies=ContainerUtilRt.newArrayList();
  final List<Pair<GradleProjectStructureNode<GradleLibraryDependencyId>,Library>> libraryDependencies=ContainerUtilRt.newArrayList();
  RootPolicy<Object> visitor=new RootPolicy<Object>(){
    @Override public Object visitModuleOrderEntry(    ModuleOrderEntry moduleOrderEntry,    Object value){
      GradleModuleDependencyId id=GradleEntityIdMapper.mapEntityToId(moduleOrderEntry);
      dependencies.add(buildNode(id,moduleOrderEntry.getModuleName()));
      return value;
    }
    @Override public Object visitLibraryOrderEntry(    LibraryOrderEntry libraryOrderEntry,    Object value){
      if (libraryOrderEntry.getLibraryName() == null) {
        return value;
      }
      GradleLibraryDependencyId id=GradleEntityIdMapper.mapEntityToId(libraryOrderEntry);
      GradleProjectStructureNode<GradleLibraryDependencyId> dependencyNode=buildNode(id,id.getDependencyName());
      libraryDependencies.add(Pair.create(dependencyNode,libraryOrderEntry.getLibrary()));
      dependencies.add(dependencyNode);
      return value;
    }
  }
;
  for (  Module module : modules) {
    dependencies.clear();
    libraryDependencies.clear();
    final GradleModuleId moduleId=GradleEntityIdMapper.mapEntityToId(module);
    final GradleProjectStructureNode<GradleModuleId> moduleNode=buildNode(moduleId,moduleId.getModuleName());
    myModules.put(module.getName(),moduleNode);
    root.add(moduleNode);
    final Collection<ModuleAwareContentRoot> contentRoots=myPlatformFacade.getContentRoots(module);
    for (    ContentEntry entry : contentRoots) {
      GradleContentRootId contentRootId=GradleEntityIdMapper.mapEntityToId(entry);
      moduleNode.add(buildContentRootNode(contentRootId,contentRoots.size() <= 1));
    }
    for (    OrderEntry orderEntry : myPlatformFacade.getOrderEntries(module)) {
      orderEntry.accept(visitor,null);
    }
    if (dependencies.isEmpty()) {
      continue;
    }
    GradleProjectStructureNode<GradleSyntheticId> dependenciesNode=getDependenciesNode(moduleId);
    for (    GradleProjectStructureNode<?> dependency : dependencies) {
      dependenciesNode.add(dependency);
    }
    if (!libraryDependencies.isEmpty()) {
      for (      Pair<GradleProjectStructureNode<GradleLibraryDependencyId>,Library> p : libraryDependencies) {
        populateLibraryDependencyNode(p.first,p.second);
      }
    }
  }
  GradleProject project=myChangesModel.getGradleProject();
  if (project != null) {
    GradleChangesCalculationContext context=myChangesModel.getCurrentChangesContext(project,false);
    processChanges(Collections.<GradleProjectStructureChange>emptyList(),context.getCurrentChanges());
    filterNodes(root);
  }
}
