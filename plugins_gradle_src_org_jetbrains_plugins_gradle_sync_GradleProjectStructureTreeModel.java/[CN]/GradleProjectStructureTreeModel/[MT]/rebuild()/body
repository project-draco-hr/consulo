{
  myModuleDependencies.clear();
  myModules.clear();
  GradleProjectId projectId=GradleEntityIdMapper.mapEntityToId(getProject());
  GradleProjectStructureNode<GradleProjectId> root=buildNode(projectId,getProject().getName());
  final Collection<Module> modules=myPlatformFacade.getModules(getProject());
  final List<GradleProjectStructureNode<?>> dependencies=new ArrayList<GradleProjectStructureNode<?>>();
  RootPolicy<Object> visitor=new RootPolicy<Object>(){
    @Override public Object visitModuleOrderEntry(    ModuleOrderEntry moduleOrderEntry,    Object value){
      GradleModuleDependencyId id=GradleEntityIdMapper.mapEntityToId(moduleOrderEntry);
      dependencies.add(buildNode(id,moduleOrderEntry.getModuleName()));
      return value;
    }
    @Override public Object visitLibraryOrderEntry(    LibraryOrderEntry libraryOrderEntry,    Object value){
      if (libraryOrderEntry.getLibraryName() == null) {
        return value;
      }
      GradleLibraryDependencyId id=GradleEntityIdMapper.mapEntityToId(libraryOrderEntry);
      dependencies.add(buildNode(id,id.getLibraryName()));
      return value;
    }
  }
;
  for (  Module module : modules) {
    dependencies.clear();
    final GradleModuleId moduleId=GradleEntityIdMapper.mapEntityToId(module);
    final GradleProjectStructureNode<GradleModuleId> moduleNode=buildNode(moduleId,moduleId.getModuleName());
    myModules.put(module.getName(),moduleNode);
    root.add(moduleNode);
    for (    OrderEntry orderEntry : myPlatformFacade.getOrderEntries(module)) {
      orderEntry.accept(visitor,null);
    }
    if (dependencies.isEmpty()) {
      continue;
    }
    GradleProjectStructureNode<String> dependenciesNode=getDependenciesNode(moduleId);
    for (    GradleProjectStructureNode<?> dependency : dependencies) {
      dependenciesNode.add(dependency);
    }
    moduleNode.add(dependenciesNode);
  }
  setRoot(root);
}
