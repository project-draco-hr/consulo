{
  myModuleDependencies.clear();
  myModules.clear();
  GradleProjectStructureNode<Project> root=buildNode(getProject(),GradleEntityType.PROJECT,getProject().getName(),myPlatformFacade.getProjectIcon());
  final Collection<Module> modules=myPlatformFacade.getModules(getProject());
  RootPolicy<LibraryOrderEntry> policy=new RootPolicy<LibraryOrderEntry>(){
    @Override public LibraryOrderEntry visitLibraryOrderEntry(    LibraryOrderEntry libraryOrderEntry,    LibraryOrderEntry value){
      return libraryOrderEntry;
    }
  }
;
  for (  Module module : modules) {
    final GradleProjectStructureNode<String> moduleNode=buildNode(GradleEntityType.MODULE,module.getName(),GradleIcons.MODULE_ICON);
    myModules.put(module.getName(),moduleNode);
    List<LibraryOrderEntry> libraryDependencies=new ArrayList<LibraryOrderEntry>();
    for (    OrderEntry orderEntry : myPlatformFacade.getOrderEntries(module)) {
      final LibraryOrderEntry libraryDependency=orderEntry.accept(policy,null);
      libraryDependencies.add(libraryDependency);
    }
    if (!libraryDependencies.isEmpty()) {
      GradleProjectStructureNode<String> dependenciesNode=getDependenciesNode(module.getName());
      for (      LibraryOrderEntry dependency : libraryDependencies) {
        GradleLibraryDependencyId id=GradleLibraryDependencyId.of(dependency);
        if (id == null) {
          continue;
        }
        dependenciesNode.add(buildNode(id,GradleEntityType.LIBRARY_DEPENDENCY,id.getLibraryName(),GradleIcons.LIB_ICON));
      }
      moduleNode.add(dependenciesNode);
    }
    root.add(moduleNode);
  }
  setRoot(root);
}
