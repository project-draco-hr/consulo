{
  myModuleDependencies.clear();
  myModules.clear();
  DefaultMutableTreeNode root=new DefaultMutableTreeNode(buildDescriptor(getProject()));
  final Collection<Module> modules=myPlatformFacade.getModules(getProject());
  RootPolicy<LibraryOrderEntry> policy=new RootPolicy<LibraryOrderEntry>(){
    @Override public LibraryOrderEntry visitLibraryOrderEntry(    LibraryOrderEntry libraryOrderEntry,    LibraryOrderEntry value){
      return libraryOrderEntry;
    }
  }
;
  for (  Module module : modules) {
    final DefaultMutableTreeNode moduleNode=new DefaultMutableTreeNode(buildDescriptor(module));
    myModules.put(module.getName(),moduleNode);
    List<LibraryOrderEntry> libraryDependencies=new ArrayList<LibraryOrderEntry>();
    for (    OrderEntry orderEntry : myPlatformFacade.getOrderEntries(module)) {
      final LibraryOrderEntry libraryDependency=orderEntry.accept(policy,null);
      if (libraryDependency != null && !StringUtil.isEmpty(libraryDependency.getLibraryName())) {
        libraryDependencies.add(libraryDependency);
      }
    }
    if (!libraryDependencies.isEmpty()) {
      DefaultMutableTreeNode dependenciesNode=getDependenciesNode(module.getName());
      for (      LibraryOrderEntry dependency : libraryDependencies) {
        dependenciesNode.add(new DefaultMutableTreeNode(buildDescriptor(dependency)));
      }
      moduleNode.add(dependenciesNode);
    }
    root.add(moduleNode);
  }
  setRoot(root);
}
