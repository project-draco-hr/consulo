{
  for (  Module module : myPlatformFacade.getModules(myProject)) {
    String moduleName=module.getName();
    LibraryOrderEntry dependency=myProjectStructureHelper.findIdeLibraryDependency(moduleName,change.getIdeLibraryId().getLibraryName());
    if (dependency == null) {
      continue;
    }
    GradleProjectStructureNode<GradleSyntheticId> dependenciesNode=getDependenciesNode(new GradleModuleId(GradleEntityOwner.IDE,moduleName));
    Collection<GradleProjectStructureNode<GradleLibraryDependencyId>> dependencyNodes=dependenciesNode.getChildren(GradleLibraryDependencyId.class);
    for (    GradleProjectStructureNode<GradleLibraryDependencyId> dependencyNode : dependencyNodes) {
      GradleLibraryDependencyId id=dependencyNode.getDescriptor().getElement();
      if (id.getLibraryId().equals(change.getGradleLibraryId()) || id.getLibraryId().equals(change.getIdeLibraryId())) {
        dependenciesNode.remove(dependencyNode);
      }
    }
    GradleCompositeLibraryDependencyId libraryDependencyId=new GradleCompositeLibraryDependencyId(new GradleLibraryDependencyId(GradleEntityOwner.GRADLE,moduleName,change.getGradleLibraryId().getLibraryName()),new GradleLibraryDependencyId(GradleEntityOwner.IDE,moduleName,change.getIdeLibraryId().getLibraryName()));
    String libraryDependencyNodeName=GradleUtil.getOutdatedEntityName(change.getBaseLibraryName(),change.getGradleLibraryVersion(),change.getIdeLibraryVersion());
    GradleProjectStructureNode<GradleCompositeLibraryDependencyId> libraryDependencyNode=buildNode(libraryDependencyId,libraryDependencyNodeName);
    libraryDependencyNode.setAttributes(GradleTextAttributes.OUTDATED_ENTITY);
    if (passFilters(libraryDependencyNode)) {
      dependenciesNode.add(libraryDependencyNode);
    }
  }
}
