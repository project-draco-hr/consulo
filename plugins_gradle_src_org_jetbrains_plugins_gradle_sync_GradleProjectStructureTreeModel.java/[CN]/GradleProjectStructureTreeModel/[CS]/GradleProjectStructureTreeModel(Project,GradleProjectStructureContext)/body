{
  super(null);
  myProject=project;
  myPlatformFacade=context.getPlatformFacade();
  myProjectStructureHelper=context.getProjectStructureHelper();
  myChangesModel=context.getChangesModel();
  myNodeComparator=new GradleProjectStructureNodeComparator(context);
  rebuild();
  context.getChangesModel().addListener(new GradleProjectStructureChangeListener(){
    @Override public void onChanges(    @NotNull final Collection<GradleProjectStructureChange> oldChanges,    @NotNull final Collection<GradleProjectStructureChange> currentChanges){
      final Runnable task=new Runnable(){
        @Override public void run(){
          Collection<GradleProjectStructureChange> c=ContainerUtil.subtract(oldChanges,currentChanges);
          if (myChangesComparator != null) {
            List<GradleProjectStructureChange> toSort=new ArrayList<GradleProjectStructureChange>(c);
            Collections.sort(toSort,myChangesComparator);
            c=toSort;
          }
          processObsoleteChanges(c);
          processCurrentChanges(currentChanges);
        }
      }
;
      if (myProcessChangesAtTheSameThread) {
        task.run();
      }
 else {
        UIUtil.invokeLaterIfNeeded(task);
      }
    }
  }
);
}
