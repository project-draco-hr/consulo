{
  final LibraryOrderEntry intellijDependency=myProjectStructureHelper.findIdeLibraryDependency(dependency.getOwnerModule().getName(),dependency.getName(),context.project);
  Set<String> intellijPaths=ContainerUtilRt.newHashSet();
  ExternalLibrary gradleLibrary=dependency.getTarget();
  Library intellijLibrary=null;
  if (intellijDependency == null) {
    context.entities.add(dependency);
  }
 else {
    intellijLibrary=intellijDependency.getLibrary();
  }
  if (intellijLibrary == null) {
    intellijLibrary=myProjectStructureHelper.findIdeLibrary(gradleLibrary,context.project);
  }
  if (intellijLibrary == null) {
    context.entities.add(gradleLibrary);
  }
 else {
    for (    VirtualFile jarFile : intellijLibrary.getFiles(OrderRootType.CLASSES)) {
      intellijPaths.add(ExternalSystemUtil.getLocalFileSystemPath(jarFile));
    }
  }
  for (  String gradleJarPath : gradleLibrary.getPaths(LibraryPathType.BINARY)) {
    if (!intellijPaths.contains(gradleJarPath)) {
      context.entities.add(new Jar(gradleJarPath,LibraryPathType.BINARY,null,gradleLibrary,dependency.getOwner()));
    }
  }
}
