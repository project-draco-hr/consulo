{
  if (fileImpl instanceof PsiCodeFragment) {
    final FileElement holderElement=new DummyHolder(fileImpl.getManager(),null).getTreeElement();
    holderElement.rawAddChildren(fileImpl.createContentLeafElement(holderElement.getCharTable().intern(newFileText,0,textLength)));
    DiffLog diffLog=new DiffLog();
    diffLog.appendReplaceFileElement((FileElement)parent,(FileElement)holderElement.getFirstChildNode());
    return diffLog;
  }
 else {
    FileViewProvider viewProvider=fileImpl.getViewProvider();
    viewProvider.getLanguages();
    FileType fileType=viewProvider.getVirtualFile().getFileType();
    String fileName=fileImpl.getName();
    final LightVirtualFile lightFile=new LightVirtualFile(fileName,fileType,newFileText,viewProvider.getVirtualFile().getCharset(),fileImpl.getViewProvider().getModificationStamp());
    lightFile.setOriginalFile(viewProvider.getVirtualFile());
    FileViewProvider copy=viewProvider.createCopy(lightFile);
    if (copy.isEventSystemEnabled()) {
      throw new AssertionError("Copied view provider must be non-physical for reparse to deliver correct events: " + viewProvider);
    }
    copy.getLanguages();
    SingleRootFileViewProvider.doNotCheckFileSizeLimit(lightFile);
    PsiFileImpl newFile=getFileCopy(fileImpl,copy);
    newFile.setOriginalFile(fileImpl);
    final FileElement newFileElement=(FileElement)newFile.getNode();
    final FileElement oldFileElement=(FileElement)fileImpl.getNode();
    DiffLog diffLog=mergeTrees(fileImpl,oldFileElement,newFileElement,indicator,oldFileElement.getText());
    ((PsiManagerEx)fileImpl.getManager()).getFileManager().setViewProvider(lightFile,null);
    return diffLog;
  }
}
