{
  ExternalActionUtil.MyInfo info=ExternalActionUtil.getProcessingInfo(e.getDataContext());
  if (info.settings == null || info.localSettings == null || info.externalProject == null || info.ideProject == null || info.externalSystemId == null) {
    return;
  }
  ProjectSystemId externalSystemId=ExternalSystemDataKeys.EXTERNAL_SYSTEM_ID.getData(e.getDataContext());
  if (externalSystemId == null) {
    return;
  }
  final Project project=CommonDataKeys.PROJECT.getData(e.getDataContext());
  if (project == null) {
    e.getPresentation().setEnabled(false);
    return;
  }
  FileDocumentManager.getInstance().saveAllDocuments();
  final ProjectDataManager projectDataManager=ServiceManager.getService(ProjectDataManager.class);
  ExternalSystemUtil.refreshProject(project,externalSystemId,info.externalProject.getPath(),new ExternalProjectRefreshCallback(){
    @Override public void onSuccess(    @Nullable final DataNode<ProjectData> externalProject){
      if (externalProject == null) {
        return;
      }
      ExternalSystemApiUtil.executeProjectChangeAction(true,new DisposeAwareProjectChange(project){
        @Override public void execute(){
          ProjectRootManagerEx.getInstanceEx(project).mergeRootsChangesDuring(new Runnable(){
            @Override public void run(){
              projectDataManager.importData(externalProject.getKey(),Collections.singleton(externalProject),project,true);
            }
          }
);
        }
      }
);
    }
    @Override public void onFailure(    @NotNull String errorMessage,    @Nullable String errorDetails){
    }
  }
,false,ProgressExecutionMode.IN_BACKGROUND_ASYNC);
}
