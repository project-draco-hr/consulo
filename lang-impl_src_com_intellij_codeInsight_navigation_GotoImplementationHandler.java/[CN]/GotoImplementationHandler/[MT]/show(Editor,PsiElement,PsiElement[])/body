{
  if (elements == null || elements.length == 0) {
    return;
  }
  if (elements.length == 1) {
    Navigatable descriptor=EditSourceUtil.getDescriptor(elements[0]);
    if (descriptor != null && descriptor.canNavigate()) {
      descriptor.navigate(true);
    }
  }
 else {
    PsiElementListCellRenderer renderer=null;
    GotoImplementationRendererProvider rendererProvider=null;
    for (    GotoImplementationRendererProvider provider : Extensions.getExtensions(GotoImplementationRendererProvider.EP_NAME)) {
      renderer=provider.getRenderer(elements);
      if (renderer != null) {
        rendererProvider=provider;
        break;
      }
    }
    if (renderer == null) {
      renderer=new DefaultPsiElementListCellRenderer();
    }
    Arrays.sort(elements,renderer.getComparator());
    final JList list=new JList(elements);
    list.setCellRenderer(renderer);
    renderer.installSpeedSearch(list);
    final Runnable runnable=new Runnable(){
      public void run(){
        int[] ids=list.getSelectedIndices();
        if (ids == null || ids.length == 0)         return;
        Object[] selectedElements=list.getSelectedValues();
        for (        Object element : selectedElements) {
          Navigatable descriptor=EditSourceUtil.getDescriptor((PsiElement)element);
          if (descriptor != null && descriptor.canNavigate()) {
            descriptor.navigate(true);
          }
        }
      }
    }
;
    final String name=((PsiNamedElement)sourceElement).getName();
    final String title;
    if (rendererProvider != null) {
      title=rendererProvider.getChooserTitle(name,elements);
    }
 else {
      title=CodeInsightBundle.message("goto.implementation.in.file.chooser.title",name,elements.length);
    }
    new PopupChooserBuilder(list).setTitle(title).setItemChoosenCallback(runnable).createPopup().showInBestPositionFor(editor);
  }
}
