{
  final List<Future<?>> copy;
synchronized (myLock) {
    debug("starting shutdown: " + myFutureList.size());
    myDisposeStarted=true;
    myExecutorService.shutdown();
    copy=new ArrayList<Future<?>>(myFutureList.size());
    for (    Future<?> future : myFutureList) {
      if (future.isDone())       continue;
      copy.add(future);
    }
  }
  debug("waiting for gets");
  boolean wasCanceled=false;
  for (  Future<?> future : copy) {
    if (wasCanceled)     break;
    while (true) {
      try {
        if (indicator == null) {
          future.get();
        }
 else {
          future.get(500,TimeUnit.MILLISECONDS);
        }
      }
 catch (      CancellationException e) {
        break;
      }
catch (      InterruptedException e) {
        break;
      }
catch (      ExecutionException e) {
        break;
      }
catch (      TimeoutException e) {
        if (indicator != null) {
          wasCanceled|=indicator.isCanceled();
          if (wasCanceled) {
            break;
          }
          debug("was canceled");
        }
        continue;
      }
      break;
    }
  }
  debug("finishing " + myInUninterruptibleState);
synchronized (myLock) {
    for (    Future<?> future : myFutureList) {
      future.cancel(true);
    }
    myFutureList.clear();
    myFinished=true;
  }
  debug("done");
}
