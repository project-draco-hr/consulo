{
  if (element instanceof PsiField) {
    int options=PsiFormatUtil.SHOW_NAME;
    if (includeParent) {
      options|=PsiFormatUtil.SHOW_CONTAINING_CLASS;
    }
    return "field " + htmlEmphasize(PsiFormatUtil.formatVariable((PsiVariable)element,options,PsiSubstitutor.EMPTY));
  }
  if (element instanceof PsiMethod) {
    int options=PsiFormatUtil.SHOW_NAME | PsiFormatUtil.SHOW_PARAMETERS;
    if (includeParent) {
      options|=PsiFormatUtil.SHOW_CONTAINING_CLASS;
    }
    final PsiMethod method=(PsiMethod)element;
    final String descr=method.isConstructor() ? "constructor" : "method";
    return descr + " " + htmlEmphasize(PsiFormatUtil.formatMethod(method,PsiSubstitutor.EMPTY,options,PsiFormatUtil.SHOW_TYPE));
  }
  if (element instanceof PsiClassInitializer) {
    PsiClassInitializer initializer=(PsiClassInitializer)element;
    boolean isStatic=initializer.hasModifierProperty(PsiModifier.STATIC);
    String s=isStatic ? "static initializer" : "instance initializer";
    if (includeParent) {
      s+=" of class " + getDescription(initializer.getContainingClass(),false);
    }
    return s;
  }
  if (element instanceof PsiParameter) {
    return "parameter " + htmlEmphasize(((PsiParameter)element).getName());
  }
  if (element instanceof PsiLocalVariable) {
    return "local variable " + htmlEmphasize(((PsiVariable)element).getName());
  }
  if (element instanceof PsiPackage) {
    return "package " + htmlEmphasize(((PsiPackage)element).getName());
  }
  if ((element instanceof PsiClass)) {
    PsiClass psiClass=(PsiClass)element;
    String qualifiedName=psiClass.getQualifiedName();
    if (qualifiedName != null) {
      return htmlEmphasize(qualifiedName);
    }
 else     if (psiClass.getName() == null) {
      return htmlEmphasize("anonymous class");
    }
 else {
      return htmlEmphasize(psiClass.getName());
    }
  }
  final String typeString=UsageViewUtil.getType(element);
  final String name=UsageViewUtil.getDescriptiveName(element);
  return typeString + " " + htmlEmphasize(name);
}
