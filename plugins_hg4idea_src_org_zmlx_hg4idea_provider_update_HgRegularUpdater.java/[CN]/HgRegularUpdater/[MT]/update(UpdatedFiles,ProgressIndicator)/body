{
  indicator.setText(HgVcsMessages.message("hg4idea.progress.updating",repository.getPath()));
  HgShowConfigCommand configCommand=new HgShowConfigCommand(project);
  String defaultPath=configCommand.getDefaultPath(repository);
  if (StringUtils.isBlank(defaultPath)) {
    VcsException e=new VcsException(HgVcsMessages.message("hg4idea.warning.no-default-update-path",repository.getPath()));
    e.setIsWarning(true);
    throw e;
  }
  pull(repository,indicator);
  String currentBranch=new HgTagBranchCommand(project,repository).getCurrentBranch();
  if (StringUtils.isBlank(currentBranch)) {
    throw new VcsException(HgVcsMessages.message("hg4idea.update.error.currentBranch"));
  }
  List<HgRevisionNumber> heads=new HgHeadsCommand(project,repository).execute(currentBranch);
  indicator.setText2(HgVcsMessages.message("hg4idea.progress.countingHeads"));
  if (heads.size() < 2) {
    return;
  }
  if (heads.size() > 2) {
    throw new VcsException(HgVcsMessages.message("hg4idea.update.error.manyHeads",heads.size()));
  }
  new HgHeadMerger(project,new HgMergeCommand(project,repository)).merge(repository,updatedFiles,indicator,heads.get(heads.size() - 1));
}
