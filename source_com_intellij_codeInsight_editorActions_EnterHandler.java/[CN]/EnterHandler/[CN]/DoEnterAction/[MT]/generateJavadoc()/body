{
  CodeInsightSettings settings=CodeInsightSettings.getInstance();
  final String lineSeparator="\n";
  StringBuffer buffer=new StringBuffer();
  buffer.append("*");
  buffer.append(lineSeparator);
  buffer.append("*/");
  myDocument.insertString(myOffset,buffer.toString());
  final Project project=myFile.getProject();
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  CodeStyleManager.getInstance(project).adjustLineIndent(myFile,myOffset + buffer.length() - 2);
  PsiDocComment comment=PsiTreeUtil.getParentOfType(myFile.findElementAt(myOffset),PsiDocComment.class);
  final PsiElement context=comment.getParent();
  if (settings.JAVADOC_STUB_ON_ENTER) {
    if (context instanceof PsiMethod) {
      PsiMethod psiMethod=(PsiMethod)context;
      if (psiMethod.getDocComment() != comment)       return;
      buffer=new StringBuffer();
      final PsiParameter[] parameters=psiMethod.getParameterList().getParameters();
      for (int i=0; i < parameters.length; i++) {
        PsiParameter parameter=parameters[i];
        buffer.append("* @param ");
        buffer.append(parameter.getName());
        buffer.append(lineSeparator);
      }
      if (psiMethod.getReturnType() != null && psiMethod.getReturnType() != PsiType.VOID) {
        buffer.append("* @return");
        buffer.append(lineSeparator);
      }
      final PsiJavaCodeReferenceElement[] references=psiMethod.getThrowsList().getReferenceElements();
      for (int i=0; i < references.length; i++) {
        PsiJavaCodeReferenceElement reference=references[i];
        buffer.append("* @throws ");
        buffer.append(reference.getText());
        buffer.append(lineSeparator);
      }
      if (buffer.length() != 0) {
        myOffset=CharArrayUtil.shiftForwardUntil(myDocument.getCharsSequence(),myOffset,lineSeparator);
        myOffset=CharArrayUtil.shiftForward(myDocument.getCharsSequence(),myOffset,lineSeparator);
        myDocument.insertString(myOffset,buffer.toString());
      }
    }
    PsiDocumentManager.getInstance(project).commitAllDocuments();
    comment=PsiTreeUtil.getParentOfType(myFile.findElementAt(myOffset),PsiDocComment.class);
  }
  CodeStyleManager codeStyleManager=CodeStyleManager.getInstance(myFile.getProject());
  comment=(PsiDocComment)codeStyleManager.reformat(comment);
  PsiElement next=comment.getNextSibling();
  if (!(next instanceof PsiWhiteSpace) || -1 == next.getText().indexOf(lineSeparator)) {
    int lineBreakOffset=comment.getTextRange().getEndOffset();
    myDocument.insertString(lineBreakOffset,lineSeparator);
    PsiDocumentManager.getInstance(project).commitAllDocuments();
    codeStyleManager.adjustLineIndent(myFile,lineBreakOffset + 1);
    comment=PsiTreeUtil.getParentOfType(myFile.findElementAt(myOffset),PsiDocComment.class);
  }
  myOffset=comment.getTextRange().getStartOffset();
  myOffset=CharArrayUtil.shiftForwardUntil(myDocument.getCharsSequence(),myOffset,lineSeparator);
  myOffset=CharArrayUtil.shiftForward(myDocument.getCharsSequence(),myOffset,lineSeparator);
  myOffset=CharArrayUtil.shiftForwardUntil(myDocument.getCharsSequence(),myOffset,lineSeparator);
  myDocument.insertString(myOffset," ");
  myOffset++;
  PsiDocumentManager.getInstance(project).commitAllDocuments();
}
