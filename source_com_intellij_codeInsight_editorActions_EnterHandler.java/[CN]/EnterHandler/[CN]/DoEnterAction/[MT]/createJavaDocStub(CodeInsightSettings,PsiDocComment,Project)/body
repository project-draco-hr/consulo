{
  final PsiElement context=comment.getParent();
  final StringBuffer buffer;
  if (settings.JAVADOC_STUB_ON_ENTER) {
    if (context instanceof PsiMethod) {
      PsiMethod psiMethod=(PsiMethod)context;
      if (psiMethod.getDocComment() != comment)       return comment;
      buffer=new StringBuffer();
      final PsiParameter[] parameters=psiMethod.getParameterList().getParameters();
      for (int i=0; i < parameters.length; i++) {
        PsiParameter parameter=parameters[i];
        buffer.append(createDocCommentLine(" @param ",getProject()));
        buffer.append(parameter.getName());
        buffer.append(LINE_SEPARATOR);
      }
      if (psiMethod.getReturnType() != null && psiMethod.getReturnType() != PsiType.VOID) {
        buffer.append(createDocCommentLine(" @return",getProject()));
        buffer.append(LINE_SEPARATOR);
      }
      final PsiJavaCodeReferenceElement[] references=psiMethod.getThrowsList().getReferenceElements();
      for (int i=0; i < references.length; i++) {
        PsiJavaCodeReferenceElement reference=references[i];
        buffer.append(createDocCommentLine(" @throws ",getProject()));
        buffer.append(reference.getText());
        buffer.append(LINE_SEPARATOR);
      }
      if (buffer.length() != 0) {
        myOffset=CharArrayUtil.shiftForwardUntil(myDocument.getCharsSequence(),myOffset,LINE_SEPARATOR);
        myOffset=CharArrayUtil.shiftForward(myDocument.getCharsSequence(),myOffset,LINE_SEPARATOR);
        myDocument.insertString(myOffset,buffer.toString());
      }
    }
    PsiDocumentManager.getInstance(project).commitAllDocuments();
    return PsiTreeUtil.getParentOfType(myFile.findElementAt(myOffset),PsiDocComment.class);
  }
  return comment;
}
