{
  try {
    final ExpandMacroToPathMap expandMacroToPathMap=createExpandMacroToPathMap();
    GeneralCommandLine commandLine=new GeneralCommandLine();
    commandLine.setExePath(myParameters.getExePath());
    String programParameters=myParameters.getProgramParameters();
    if (programParameters != null) {
      commandLine.addParameters(StringUtil.split(expandMacroToPathMap.substitute(programParameters,false)," "));
    }
    commandLine.setWorkDirectory(expandMacroToPathMap.substitute(myParameters.getWorkingDirectory(),false));
    commandLine.setPassParentEnvironment(myParameters.isPassParentEnvs());
    commandLine.getEnvironment().putAll(myParameters.getEnvs());
    CapturingProcessHandler processHandler=new CapturingProcessHandler(commandLine.createProcess());
    processHandler.addProcessListener(new ProcessAdapter(){
      @Override public void processTerminated(      ProcessEvent event){
        actionCallback.setDone();
        String outPath=myParameters.getOutPath();
        if (outPath == null) {
          return;
        }
        String substitute=expandMacroToPathMap.substitute(outPath,false);
        final VirtualFile fileByPath=LocalFileSystem.getInstance().findFileByPath(substitute);
        if (fileByPath != null) {
          new WriteAction<Object>(){
            @Override protected void run(            Result<Object> result) throws Throwable {
              fileByPath.refresh(false,true);
            }
          }
.execute();
        }
      }
    }
);
    if (myParameters.isShowConsole()) {
      final RunContentExecutor contentExecutor=new RunContentExecutor(myProject,processHandler).withTitle(myProviderName).withActivateToolWindow(false);
      UIUtil.invokeLaterIfNeeded(new Runnable(){
        @Override public void run(){
          contentExecutor.run();
        }
      }
);
    }
 else {
      processHandler.addProcessListener(new ToolProcessAdapter(myProject,true,myName));
      processHandler.startNotify();
    }
  }
 catch (  ExecutionException e) {
    actionCallback.setRejected();
    BackgroundTaskByVfsChangeTaskImpl.LOGGER.error(e);
  }
}
