{
  if (!FileModificationService.getInstance().preparePsiElementForWrite(descriptor.getPsiElement()))   return;
  final PsiFile psiFile=myClass.getContainingFile();
  LOG.assertTrue(psiFile != null);
  final Module module=ModuleUtil.findModuleForFile(psiFile.getVirtualFile(),project);
  Runnable command=new Runnable(){
    public void run(){
      try {
        if (ModuleUtil.getExtension(module,PluginModuleExtension.class) != null) {
          final XmlFile pluginXml=PluginModuleUtil.getPluginXml(module);
          if (pluginXml != null) {
            DescriptorUtil.patchPluginXml(AbstractRegisterFix.this,myClass,pluginXml);
          }
        }
 else {
          List<Module> modules=PluginModuleUtil.getCandidateModules(module);
          if (modules.size() > 1) {
            final ChooseModulesDialog dialog=new ChooseModulesDialog(project,modules,getName());
            dialog.show();
            if (!dialog.isOK()) {
              return;
            }
            modules=dialog.getSelectedModules();
          }
          final XmlFile[] pluginXmls=new XmlFile[modules.size()];
          for (int i=0; i < pluginXmls.length; i++) {
            pluginXmls[i]=PluginModuleUtil.getPluginXml(modules.get(i));
          }
          DescriptorUtil.patchPluginXml(AbstractRegisterFix.this,myClass,pluginXmls);
        }
        CommandProcessor.getInstance().markCurrentCommandAsGlobal(project);
      }
 catch (      IncorrectOperationException e) {
        Messages.showMessageDialog(project,filterMessage(e.getMessage()),DevKitBundle.message("inspections.component.not.registered.quickfix.error",getType()),Messages.getErrorIcon());
      }
    }
  }
;
  CommandProcessor.getInstance().executeCommand(project,command,getName(),null);
}
