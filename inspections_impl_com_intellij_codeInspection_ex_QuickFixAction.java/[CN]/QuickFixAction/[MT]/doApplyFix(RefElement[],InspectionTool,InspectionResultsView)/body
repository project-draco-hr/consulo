{
  Set<VirtualFile> readOnlyFiles=getReadOnlyFiles(refElements);
  if (!readOnlyFiles.isEmpty()) {
    final Project project=refElements[0].getRefManager().getProject();
    final ReadonlyStatusHandler.OperationStatus operationStatus=ReadonlyStatusHandler.getInstance(project).ensureFilesWritable(readOnlyFiles.toArray(new VirtualFile[readOnlyFiles.size()]));
    if (operationStatus.hasReadonlyFiles())     return;
  }
  final RefManagerImpl refManager=((RefManagerImpl)tool.getContext().getRefManager());
  final boolean initial=refManager.isInProcess();
  refManager.inspectionReadActionFinished();
  try {
    final boolean[] refreshNeeded=new boolean[]{false};
    if (refElements.length > 0) {
      final Project project=refElements[0].getRefManager().getProject();
      CommandProcessor.getInstance().executeCommand(project,new Runnable(){
        public void run(){
          CommandProcessor.getInstance().markCurrentCommandAsComplex(project);
          ApplicationManager.getApplication().runWriteAction(new Runnable(){
            public void run(){
              refreshNeeded[0]=applyFix(refElements);
            }
          }
);
        }
      }
,getTemplatePresentation().getText(),null);
    }
    if (refreshNeeded[0]) {
      final Set<PsiElement> ignoredElements=new HashSet<PsiElement>();
      for (      RefElement element : refElements) {
        final PsiElement psiElement=element.getElement();
        if (psiElement != null && psiElement.isValid()) {
          ignoredElements.add(psiElement);
        }
      }
      refreshViews(view.getProject(),ignoredElements,myTool);
    }
  }
  finally {
    if (initial)     refManager.inspectionReadActionStarted();
  }
}
