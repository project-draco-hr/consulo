{
  final Set<VirtualFile> readOnlyFiles=new THashSet<VirtualFile>();
  for (  CommonProblemDescriptor descriptor : descriptors) {
    final PsiElement psiElement=descriptor instanceof ProblemDescriptor ? ((ProblemDescriptor)descriptor).getPsiElement() : null;
    if (psiElement != null && !psiElement.isWritable()) {
      readOnlyFiles.add(psiElement.getContainingFile().getVirtualFile());
    }
  }
  if (!readOnlyFiles.isEmpty()) {
    final ReadonlyStatusHandler.OperationStatus operationStatus=ReadonlyStatusHandler.getInstance(project).ensureFilesWritable(readOnlyFiles.toArray(new VirtualFile[readOnlyFiles.size()]));
    if (operationStatus.hasReadonlyFiles())     return;
  }
  CommandProcessor.getInstance().executeCommand(project,new Runnable(){
    public void run(){
      CommandProcessor.getInstance().markCurrentCommandAsComplex(project);
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        public void run(){
          for (          CommonProblemDescriptor descriptor : descriptors) {
            final QuickFix[] fixes=descriptor.getFixes();
            if (fixes != null) {
              for (              QuickFix fix : fixes) {
                if (fix != null) {
                  final QuickFixAction quickFixAction=QuickFixAction.this;
                  if (quickFixAction instanceof LocalQuickFixWrapper && !((LocalQuickFixWrapper)quickFixAction).getFix().getClass().isInstance(fix)) {
                    continue;
                  }
                  fix.applyFix(project,descriptor);
                  DaemonCodeAnalyzer.getInstance(project).restart();
                  tool.ignoreProblem(descriptor,fix);
                }
              }
            }
          }
        }
      }
);
    }
  }
,getTemplatePresentation().getText(),null);
  final RefElement[] selectedElements=getSelectedElements(e);
  refreshViews(project,selectedElements,tool);
}
