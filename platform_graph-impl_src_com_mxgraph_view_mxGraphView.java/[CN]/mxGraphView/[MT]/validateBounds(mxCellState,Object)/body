{
  mxIGraphModel model=graph.getModel();
  mxCellState state=getState(cell,true);
  if (state != null && state.isInvalid()) {
    if (!graph.isCellVisible(cell)) {
      removeState(cell);
    }
 else     if (cell != currentRoot && parentState != null) {
      state.getAbsoluteOffset().setX(0);
      state.getAbsoluteOffset().setY(0);
      state.setOrigin(new mxPoint(parentState.getOrigin()));
      mxGeometry geo=graph.getCellGeometry(cell);
      if (geo != null) {
        if (!model.isEdge(cell)) {
          mxPoint origin=state.getOrigin();
          mxPoint offset=geo.getOffset();
          if (offset == null) {
            offset=EMPTY_POINT;
          }
          if (geo.isRelative()) {
            origin.setX(origin.getX() + geo.getX() * parentState.getWidth() / scale + offset.getX());
            origin.setY(origin.getY() + geo.getY() * parentState.getHeight() / scale + offset.getY());
          }
 else {
            state.setAbsoluteOffset(new mxPoint(scale * offset.getX(),scale * offset.getY()));
            origin.setX(origin.getX() + geo.getX());
            origin.setY(origin.getY() + geo.getY());
          }
        }
        state.setX(scale * (translate.getX() + state.getOrigin().getX()));
        state.setY(scale * (translate.getY() + state.getOrigin().getY()));
        state.setWidth(scale * geo.getWidth());
        state.setHeight(scale * geo.getHeight());
        if (model.isVertex(cell)) {
          updateVertexLabelOffset(state);
        }
        updateLabel(state);
      }
    }
    mxPoint offset=graph.getChildOffsetForCell(cell);
    if (offset != null) {
      state.getOrigin().setX(state.getOrigin().getX() + offset.getX());
      state.getOrigin().setY(state.getOrigin().getY() + offset.getY());
    }
  }
  if (state != null && (!graph.isCellCollapsed(cell) || cell == currentRoot)) {
    int childCount=model.getChildCount(cell);
    for (int i=0; i < childCount; i++) {
      validateBounds(state,model.getChildAt(cell,i));
    }
  }
}
