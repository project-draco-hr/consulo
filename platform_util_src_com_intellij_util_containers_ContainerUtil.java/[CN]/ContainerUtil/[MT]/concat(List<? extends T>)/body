{
  int size=0;
  for (  List<? extends T> each : lists) {
    size+=each.size();
  }
  if (size == 0)   return emptyList();
  final int finalSize=size;
  return new AbstractList<T>(){
    @Override public T get(    final int index){
      if (index >= 0 && index < finalSize) {
        int from=0;
        for (        List<? extends T> each : lists) {
          if (from <= index && index < from + each.size()) {
            return each.get(index - from);
          }
          from+=each.size();
        }
        if (from != finalSize) {
          throw new ConcurrentModificationException("The list has changed. Its size was " + finalSize + "; now it's "+ from);
        }
      }
      throw new IndexOutOfBoundsException("index: " + index + "size: "+ size());
    }
    @Override public int size(){
      return finalSize;
    }
  }
;
}
