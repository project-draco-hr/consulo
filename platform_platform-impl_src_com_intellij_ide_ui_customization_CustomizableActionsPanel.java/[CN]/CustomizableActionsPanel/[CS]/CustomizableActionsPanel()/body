{
  Group rootGroup=new Group("root",null,null);
  final DefaultMutableTreeNode root=new DefaultMutableTreeNode(rootGroup);
  DefaultTreeModel model=new DefaultTreeModel(root);
  myActionsTree.setModel(model);
  myActionsTree.setRootVisible(false);
  myActionsTree.setShowsRootHandles(true);
  UIUtil.setLineStyleAngled(myActionsTree);
  myActionsTree.setCellRenderer(new MyTreeCellRenderer());
  setButtonsDisabled();
  final ActionManager actionManager=ActionManager.getInstance();
  myActionsTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      final TreePath[] selectionPaths=myActionsTree.getSelectionPaths();
      final boolean isSingleSelection=selectionPaths != null && selectionPaths.length == 1;
      myAddActionButton.setEnabled(isSingleSelection);
      if (isSingleSelection) {
        final DefaultMutableTreeNode node=(DefaultMutableTreeNode)selectionPaths[0].getLastPathComponent();
        String actionId=getActionId(node);
        if (actionId != null) {
          final AnAction action=actionManager.getAction(actionId);
          myEditIconButton.setEnabled(action != null && action.getTemplatePresentation() != null);
        }
 else {
          myEditIconButton.setEnabled(false);
        }
      }
 else {
        myEditIconButton.setEnabled(false);
      }
      myAddSeparatorButton.setEnabled(isSingleSelection);
      myRemoveActionButton.setEnabled(selectionPaths != null);
      if (selectionPaths != null) {
        for (        TreePath selectionPath : selectionPaths) {
          if (selectionPath.getPath() != null && selectionPath.getPath().length <= 2) {
            setButtonsDisabled();
            return;
          }
        }
      }
      myMoveActionUpButton.setEnabled(isMoveSupported(myActionsTree,-1));
      myMoveActionDownButton.setEnabled(isMoveSupported(myActionsTree,1));
      myRestoreDefaultButton.setEnabled(!findActionsUnderSelection().isEmpty());
    }
  }
);
  myAddActionButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final List<TreePath> expandedPaths=TreeUtil.collectExpandedPaths(myActionsTree);
      final TreePath selectionPath=myActionsTree.getLeadSelectionPath();
      if (selectionPath != null) {
        DefaultMutableTreeNode node=(DefaultMutableTreeNode)selectionPath.getLastPathComponent();
        final FindAvailableActionsDialog dlg=new FindAvailableActionsDialog();
        dlg.show();
        if (dlg.isOK()) {
          final Set<Object> toAdd=dlg.getTreeSelectedActionIds();
          if (toAdd == null)           return;
          for (          final Object o : toAdd) {
            final ActionUrl url=new ActionUrl(ActionUrl.getGroupPath(new TreePath(node.getPath())),o,ActionUrl.ADDED,node.getParent().getIndex(node) + 1);
            addCustomizedAction(url);
            ActionUrl.changePathInActionsTree(myActionsTree,url);
            if (o instanceof String) {
              DefaultMutableTreeNode current=new DefaultMutableTreeNode(url.getComponent());
              current.setParent((DefaultMutableTreeNode)node.getParent());
              editToolbarIcon((String)o,current);
            }
          }
          ((DefaultTreeModel)myActionsTree.getModel()).reload();
        }
      }
      TreeUtil.restoreExpandedPaths(myActionsTree,expandedPaths);
    }
  }
);
  myEditIconButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      myRestoreAllDefaultButton.setEnabled(true);
      final List<TreePath> expandedPaths=TreeUtil.collectExpandedPaths(myActionsTree);
      final TreePath selectionPath=myActionsTree.getLeadSelectionPath();
      if (selectionPath != null) {
        EditIconDialog dlg=new EditIconDialog((DefaultMutableTreeNode)selectionPath.getLastPathComponent());
        dlg.show();
        if (dlg.isOK()) {
          myActionsTree.repaint();
        }
      }
      TreeUtil.restoreExpandedPaths(myActionsTree,expandedPaths);
    }
  }
);
  myAddSeparatorButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final List<TreePath> expandedPaths=TreeUtil.collectExpandedPaths(myActionsTree);
      final TreePath selectionPath=myActionsTree.getLeadSelectionPath();
      if (selectionPath != null) {
        DefaultMutableTreeNode node=(DefaultMutableTreeNode)selectionPath.getLastPathComponent();
        final ActionUrl url=new ActionUrl(ActionUrl.getGroupPath(selectionPath),AnSeparator.getInstance(),ActionUrl.ADDED,node.getParent().getIndex(node) + 1);
        ActionUrl.changePathInActionsTree(myActionsTree,url);
        addCustomizedAction(url);
        ((DefaultTreeModel)myActionsTree.getModel()).reload();
      }
      TreeUtil.restoreExpandedPaths(myActionsTree,expandedPaths);
    }
  }
);
  myRemoveActionButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final List<TreePath> expandedPaths=TreeUtil.collectExpandedPaths(myActionsTree);
      final TreePath[] selectionPath=myActionsTree.getSelectionPaths();
      if (selectionPath != null) {
        for (        TreePath treePath : selectionPath) {
          final ActionUrl url=CustomizationUtil.getActionUrl(treePath,ActionUrl.DELETED);
          ActionUrl.changePathInActionsTree(myActionsTree,url);
          addCustomizedAction(url);
        }
        ((DefaultTreeModel)myActionsTree.getModel()).reload();
      }
      TreeUtil.restoreExpandedPaths(myActionsTree,expandedPaths);
    }
  }
);
  myMoveActionUpButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final List<TreePath> expandedPaths=TreeUtil.collectExpandedPaths(myActionsTree);
      final TreePath[] selectionPath=myActionsTree.getSelectionPaths();
      if (selectionPath != null) {
        for (        TreePath treePath : selectionPath) {
          final ActionUrl url=CustomizationUtil.getActionUrl(treePath,ActionUrl.MOVE);
          final int absolutePosition=url.getAbsolutePosition();
          url.setInitialPosition(absolutePosition);
          url.setAbsolutePosition(absolutePosition - 1);
          ActionUrl.changePathInActionsTree(myActionsTree,url);
          addCustomizedAction(url);
        }
        ((DefaultTreeModel)myActionsTree.getModel()).reload();
        TreeUtil.restoreExpandedPaths(myActionsTree,expandedPaths);
        for (        TreePath path : selectionPath) {
          myActionsTree.addSelectionPath(path);
        }
      }
    }
  }
);
  myMoveActionDownButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final List<TreePath> expandedPaths=TreeUtil.collectExpandedPaths(myActionsTree);
      final TreePath[] selectionPath=myActionsTree.getSelectionPaths();
      if (selectionPath != null) {
        for (int i=selectionPath.length - 1; i >= 0; i--) {
          TreePath treePath=selectionPath[i];
          final ActionUrl url=CustomizationUtil.getActionUrl(treePath,ActionUrl.MOVE);
          final int absolutePosition=url.getAbsolutePosition();
          url.setInitialPosition(absolutePosition);
          url.setAbsolutePosition(absolutePosition + 1);
          ActionUrl.changePathInActionsTree(myActionsTree,url);
          addCustomizedAction(url);
        }
        ((DefaultTreeModel)myActionsTree.getModel()).reload();
        TreeUtil.restoreExpandedPaths(myActionsTree,expandedPaths);
        for (        TreePath path : selectionPath) {
          myActionsTree.addSelectionPath(path);
        }
      }
    }
  }
);
  myRestoreAllDefaultButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      mySelectedSchema.copyFrom(new CustomActionsSchema());
      patchActionsTreeCorrespondingToSchema(root);
      myRestoreAllDefaultButton.setEnabled(false);
    }
  }
);
  myRestoreDefaultButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final List<ActionUrl> otherActions=new ArrayList<ActionUrl>(mySelectedSchema.getActions());
      otherActions.removeAll(findActionsUnderSelection());
      mySelectedSchema.copyFrom(new CustomActionsSchema());
      for (      ActionUrl otherAction : otherActions) {
        mySelectedSchema.addAction(otherAction);
      }
      final List<TreePath> treePaths=TreeUtil.collectExpandedPaths(myActionsTree);
      patchActionsTreeCorrespondingToSchema(root);
      restorePathsAfterTreeOptimization(treePaths);
      myRestoreDefaultButton.setEnabled(false);
    }
  }
);
  patchActionsTreeCorrespondingToSchema(root);
  myTreeExpansionMonitor=TreeExpansionMonitor.install(myActionsTree);
}
