{
  final List<Descriptor> descriptors=new ArrayList<Descriptor>();
  final InspectionConfigTreeNode[] selectedNodes=myTree.getSelectedNodes(InspectionConfigTreeNode.class,null);
  LOG.assertTrue(selectedNodes != null);
  final List<InspectionConfigTreeNode> nodes=new ArrayList<InspectionConfigTreeNode>(Arrays.asList(selectedNodes));
  for (  InspectionConfigTreeNode node : selectedNodes) {
    collect(descriptors,nodes,node);
  }
  final Project project=getProject(e);
  final List<String> availableScopes=getAvailableScopes(project,descriptors);
  final int idx=Messages.showChooseDialog(myTree,"Scope:","Choose Scope",ArrayUtil.toStringArray(availableScopes),availableScopes.get(0),Messages.getQuestionIcon());
  if (idx == -1)   return;
  final NamedScope chosenScope=NamedScopesHolder.getScope(project,availableScopes.get(idx));
  for (  InspectionConfigTreeNode node : nodes) {
    final Descriptor descriptor=node.getDescriptor();
    if (node.getScopeName() != null || descriptor == null)     continue;
    final InspectionToolWrapper toolWrapper=descriptor.getToolWrapper();
    InspectionProfileImpl selectedProfile=getSelectedProfile();
    HighlightDisplayLevel level=selectedProfile.getErrorLevel(descriptor.getKey(),chosenScope,project);
    boolean enabled=selectedProfile.isToolEnabled(descriptor.getKey());
    final ScopeToolState scopeToolState=selectedProfile.addScope(toolWrapper,chosenScope,level,enabled,project);
    final Descriptor addedDescriptor=new Descriptor(scopeToolState,selectedProfile,project);
    if (node.getChildCount() == 0) {
      node.add(new InspectionConfigTreeNode(descriptor,selectedProfile.getToolDefaultState(descriptor.getKey().toString(),project),true,true,false));
    }
    node.insert(new InspectionConfigTreeNode(addedDescriptor,scopeToolState,false,false),0);
    node.setInspectionNode(false);
    node.dropCache();
    ((DefaultTreeModel)myTree.getModel()).reload(node);
    myTree.expandPath(new TreePath(node.getPath()));
  }
  myTree.revalidate();
}
