{
  final InspectionConfigTreeNode[] nodes=myTree.getSelectedNodes(InspectionConfigTreeNode.class,null);
  final InspectionConfigTreeNode node=nodes[0];
  final Descriptor descriptor=node.getDesriptor();
  LOG.assertTrue(descriptor != null);
  final Project project=PlatformDataKeys.PROJECT.getData(e.getDataContext());
  final InspectionProfileEntry tool=descriptor.getTool();
  final List<String> availableScopes=getAvailableScopes(descriptor,project);
  final int idx=Messages.showChooseDialog(myTree,"Scope:","Choose Scope",ArrayUtil.toStringArray(availableScopes),availableScopes.get(0),Messages.getQuestionIcon());
  if (idx == -1)   return;
  final NamedScope chosenScope=NamedScopesHolder.getScope(project,availableScopes.get(idx));
  final ScopeToolState scopeToolState=getSelectedProfile().addScope(tool,chosenScope,getSelectedProfile().getErrorLevel(descriptor.getKey(),chosenScope),getSelectedProfile().isToolEnabled(descriptor.getKey()));
  final Descriptor addedDescriptor=new Descriptor(scopeToolState,getSelectedProfile());
  if (node.getChildCount() == 0) {
    node.add(new InspectionConfigTreeNode(descriptor,scopeToolState,true,true,false));
  }
  node.insert(new InspectionConfigTreeNode(addedDescriptor,scopeToolState,false,true,false),0);
  node.setInspectionNode(false);
  node.isProperSetting=getSelectedProfile().isProperSetting(HighlightDisplayKey.find(tool.getShortName()));
  ((DefaultTreeModel)myTree.getModel()).reload(node);
  myTree.expandPath(new TreePath(node.getPath()));
  myTree.revalidate();
}
