{
  GlobalSearchScope projectScope=GlobalSearchScope.projectScope(method.getProject());
  PsiMethod[] overridingMethods=OverridingMethodsSearch.search(method,method.getUseScope(),true).toArray(PsiMethod.EMPTY_ARRAY);
  for (  PsiMethod overridingMethod : overridingMethods) {
    if (GroovyFileType.GROOVY_LANGUAGE.equals(overridingMethod.getLanguage())) {
      result.add(new OverriderUsageInfo(overridingMethod,method,isOriginal,isToModifyArgs,isToThrowExceptions));
    }
  }
  boolean needToChangeCalls=!myChangeInfo.isGenerateDelegate() && (myChangeInfo.isNameChanged() || myChangeInfo.isParameterSetOrOrderChanged() || myChangeInfo.isExceptionSetOrOrderChanged()|| myChangeInfo.isVisibilityChanged());
  if (needToChangeCalls) {
    PsiReference[] refs=MethodReferencesSearch.search(method,projectScope,true).toArray(PsiReference.EMPTY_ARRAY);
    for (    PsiReference ref : refs) {
      PsiElement element=ref.getElement();
      if (!GroovyFileType.GROOVY_LANGUAGE.equals(element.getLanguage()))       continue;
      boolean isToCatchExceptions=isToThrowExceptions && needToCatchExceptions(RefactoringUtil.getEnclosingMethod(element));
      if (PsiUtil.isMethodUsage(element)) {
        GrClosureSignature signature=GrClosureSignatureUtil.createSignature(method);
        GrClosureSignatureUtil.ArgInfo[] map=GrClosureSignatureUtil.mapParametersToArguments(signature,PsiUtil.getArgumentsList(element),method.getManager(),method.getResolveScope());
        result.add(new GrMethodCallUsageInfo(element,GrClosureSignatureUtil.createSignature(method),isToModifyArgs,isToCatchExceptions,map));
      }
 else       if (element instanceof GrDocTagValueToken) {
        result.add(new UsageInfo(ref.getElement()));
      }
 else       if (element instanceof GrMethod && ((GrMethod)element).isConstructor()) {
        DefaultConstructorImplicitUsageInfo implicitUsageInfo=new DefaultConstructorImplicitUsageInfo((GrMethod)element,((GrMethod)element).getContainingClass(),method);
        result.add(implicitUsageInfo);
      }
 else       if (element instanceof PsiClass) {
        LOG.assertTrue(method.isConstructor());
        final PsiClass psiClass=(PsiClass)element;
        if (psiClass instanceof GrAnonymousClassDefinition) {
          GrClosureSignature signature=GrClosureSignatureUtil.createSignature(method);
          GrClosureSignatureUtil.ArgInfo[] map=GrClosureSignatureUtil.mapParametersToArguments(signature,PsiUtil.getArgumentsList(element),method.getManager(),method.getResolveScope());
          result.add(new GrMethodCallUsageInfo(element,GrClosureSignatureUtil.createSignature(method),isToModifyArgs,isToCatchExceptions,map));
          continue;
        }
        result.add(new NoConstructorClassUsageInfo(psiClass));
      }
 else       if (ref instanceof PsiCallReference) {
        result.add(new CallReferenceUsageInfo((PsiCallReference)ref));
      }
 else {
        result.add(new MoveRenameUsageInfo(element,ref,method));
      }
    }
  }
 else   if (myChangeInfo.isParameterTypesChanged()) {
    PsiReference[] refs=MethodReferencesSearch.search(method,projectScope,true).toArray(PsiReference.EMPTY_ARRAY);
    for (    PsiReference reference : refs) {
      final PsiElement element=reference.getElement();
      if (element instanceof GrDocTagValueToken) {
        result.add(new UsageInfo(reference));
      }
    }
  }
  if (method instanceof GrMethod) {
    detectLocalsCollisionsInMethod((GrMethod)method,result,isOriginal);
  }
  for (  final PsiMethod overridingMethod : overridingMethods) {
    if (overridingMethod instanceof GrMethod) {
      detectLocalsCollisionsInMethod((GrMethod)overridingMethod,result,isOriginal);
    }
  }
  return overridingMethods;
}
