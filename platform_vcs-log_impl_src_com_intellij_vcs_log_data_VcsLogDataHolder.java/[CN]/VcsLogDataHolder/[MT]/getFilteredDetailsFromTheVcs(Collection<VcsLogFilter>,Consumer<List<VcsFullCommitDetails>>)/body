{
  runInBackground(new ThrowableConsumer<ProgressIndicator,VcsException>(){
    @Override public void consume(    ProgressIndicator indicator) throws VcsException {
      Collection<List<TimedVcsCommit>> logs=ContainerUtil.newArrayList();
      final Map<Hash,VcsFullCommitDetails> allDetails=ContainerUtil.newHashMap();
      for (      Map.Entry<VirtualFile,VcsLogProvider> entry : myLogProviders.entrySet()) {
        List<? extends VcsFullCommitDetails> details=entry.getValue().getFilteredDetails(entry.getKey(),filters);
        logs.add(getCommitsFromDetails(details));
        for (        VcsFullCommitDetails detail : details) {
          allDetails.put(detail.getHash(),detail);
        }
      }
      final List<TimedVcsCommit> compoundLog=myMultiRepoJoiner.join(logs);
      final List<VcsFullCommitDetails> list=ContainerUtil.mapNotNull(compoundLog,new Function<TimedVcsCommit,VcsFullCommitDetails>(){
        @Override public VcsFullCommitDetails fun(        TimedVcsCommit commit){
          VcsFullCommitDetails detail=allDetails.get(commit.getHash());
          if (detail == null) {
            String message="Details not stored for commit " + commit;
            if (LOG.isDebugEnabled()) {
              LOG.error(message,new Attachment("filtered_details",allDetails.toString()),new Attachment("compound_log",compoundLog.toString()));
            }
 else {
              LOG.error(message);
            }
          }
          return detail;
        }
      }
);
      myDetailsGetter.saveInCache(list);
      myMiniDetailsGetter.saveInCache(list);
      invokeAndWait(new Runnable(){
        @Override public void run(){
          success.consume(list);
        }
      }
);
    }
  }
,"Looking for more results...");
}
