{
  runInBackground(new ThrowableConsumer<ProgressIndicator,VcsException>(){
    @Override public void consume(    ProgressIndicator indicator) throws VcsException {
      Collection<List<? extends TimedVcsCommit>> logs=ContainerUtil.newArrayList();
      for (      Map.Entry<VirtualFile,VcsLogProvider> entry : myLogProviders.entrySet()) {
        final VirtualFile root=entry.getKey();
        if (filterCollection.getStructureFilter() != null && filterCollection.getStructureFilter().getFiles(root).isEmpty() || filterCollection.getUserFilter() != null && filterCollection.getUserFilter().getUserNames(root).isEmpty()) {
          continue;
        }
        List<TimedVcsCommit> matchingCommits=entry.getValue().getCommitsMatchingFilter(root,filterCollection,maxCount);
        logs.add(matchingCommits);
      }
      final List<? extends TimedVcsCommit> compoundLog=myMultiRepoJoiner.join(logs);
      final List<Hash> list=ContainerUtil.map(compoundLog,new Function<TimedVcsCommit,Hash>(){
        @Override public Hash fun(        TimedVcsCommit commit){
          return commit.getHash();
        }
      }
);
      invokeAndWait(new Runnable(){
        @Override public void run(){
          success.consume(list);
        }
      }
);
    }
  }
,"Looking for more results...");
}
