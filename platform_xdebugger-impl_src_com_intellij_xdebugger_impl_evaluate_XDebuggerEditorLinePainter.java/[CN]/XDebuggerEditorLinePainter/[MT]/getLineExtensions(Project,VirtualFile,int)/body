{
  if (!XDebuggerSettingsManager.getInstance().getDataViewSettings().isShowValuesInline()) {
    return null;
  }
  XVariablesView.InlineVariablesInfo data=project.getUserData(XVariablesView.DEBUG_VARIABLES);
  final ObjectLongHashMap<VirtualFile> timestamps=project.getUserData(XVariablesView.DEBUG_VARIABLES_TIMESTAMPS);
  final Document doc=FileDocumentManager.getInstance().getDocument(file);
  if (data == null || timestamps == null || doc == null) {
    return null;
  }
  Map<Variable,VariableValue> oldValues=project.getUserData(CACHE);
  if (oldValues == null) {
    oldValues=new HashMap<Variable,VariableValue>();
    project.putUserData(CACHE,oldValues);
  }
  final Long timestamp=timestamps.get(file);
  if (timestamp == -1 || timestamp < doc.getModificationStamp()) {
    return null;
  }
  List<XValueNodeImpl> values=data.get(file,lineNumber);
  if (values != null && !values.isEmpty()) {
    XDebugSession session=XDebugView.getSession(values.iterator().next().getTree());
    final int bpLine=getCurrentBreakPointLineInFile(session,file);
    boolean isTopFrame=session instanceof XDebugSessionImpl && ((XDebugSessionImpl)session).isTopFrameSelected();
    final TextAttributes attributes=bpLine == lineNumber && isTopFrame && ((XDebuggerManagerImpl)XDebuggerManager.getInstance(project)).isFullLineHighlighter() ? getTopFrameSelectedAttributes() : getNormalAttributes();
    ArrayList<VariableText> result=new ArrayList<VariableText>();
    for (    XValueNodeImpl value : values) {
      SimpleColoredText text=new SimpleColoredText();
      XValueTextRendererImpl renderer=new XValueTextRendererImpl(text);
      final XValuePresentation presentation=value.getValuePresentation();
      if (presentation == null)       continue;
      try {
        if (presentation instanceof XValueCompactPresentation && !value.getTree().isUnderRemoteDebug()) {
          ((XValueCompactPresentation)presentation).renderValue(renderer,value);
        }
 else {
          presentation.renderValue(renderer);
        }
        if (StringUtil.isEmpty(text.toString())) {
          final String type=value.getValuePresentation().getType();
          if (!StringUtil.isEmpty(type)) {
            text.append(type,SimpleTextAttributes.REGULAR_ATTRIBUTES);
          }
        }
      }
 catch (      Exception ignored) {
        continue;
      }
      final String name=value.getName();
      if (StringUtil.isEmpty(text.toString())) {
        continue;
      }
      final VariableText res=new VariableText();
      result.add(res);
      res.add(new LineExtensionInfo("  " + name + ": ",attributes));
      Variable var=new Variable(name,lineNumber);
      VariableValue variableValue=oldValues.get(var);
      if (variableValue == null) {
        variableValue=new VariableValue(text.toString(),null,value.hashCode());
        oldValues.put(var,variableValue);
      }
      if (variableValue.valueNodeHashCode != value.hashCode()) {
        variableValue.old=variableValue.actual;
        variableValue.actual=text.toString();
        variableValue.valueNodeHashCode=value.hashCode();
      }
      if (!variableValue.isChanged()) {
        for (        String s : text.getTexts()) {
          res.add(new LineExtensionInfo(s,attributes));
        }
      }
 else {
        variableValue.produceChangedParts(res.infos);
      }
    }
    final List<LineExtensionInfo> infos=new ArrayList<LineExtensionInfo>();
    for (    VariableText text : result) {
      infos.addAll(text.infos);
    }
    return infos.size() > LINE_EXTENSIONS_MAX_COUNT ? infos.subList(0,LINE_EXTENSIONS_MAX_COUNT) : infos;
  }
  return null;
}
