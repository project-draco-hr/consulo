{
  URL jarUrl=new File(EclipseCompiler.PATH_TO_COMPILER_JAR).toURI().toURL();
  final ClassLoader classLoader=PluginManager.class.getClassLoader();
  final Class<? extends ClassLoader> pluginClass=classLoader.getClass();
  if (!pluginClass.getName().equals(IdeaClassLoader.class.getName()))   return null;
  ArrayList<URL> urls=null;
  try {
    urls=new ArrayList<URL>((ArrayList<URL>)pluginClass.getDeclaredMethod("getUrls").invoke(classLoader));
  }
 catch (  IllegalAccessException e) {
    LOG.error(e);
  }
catch (  InvocationTargetException e) {
    LOG.error(e);
  }
catch (  NoSuchMethodException e) {
    LOG.error(e);
  }
  urls.add(jarUrl);
  ClassLoader myclassLoader=new MyClassLoader(urls.toArray(new URL[urls.size()]),classLoader);
  try {
    String name=EclipseCompilerDriver.class.getName();
    Class<?> aClass=myclassLoader.loadClass(name);
    myEclipseCompilerDriver=(IEclipseCompilerDriver)aClass.newInstance();
  }
 catch (  InstantiationException e) {
    LOG.error(e);
  }
catch (  IllegalAccessException e) {
    LOG.error(e);
  }
catch (  ClassNotFoundException e) {
    LOG.error(e);
  }
  final String[] commands=myEclipseExternalCompiler.createStartupCommand(chunk,compileContext,outputDir);
  final String[] modifiedCmds=JavacEmbeddedCompiler.createCommandsForEmbeddedCall(commands,EclipseCompiler.getCompilerClass());
  Process process=new Process(){
    public OutputStream getOutputStream(){
      throw new UnsupportedOperationException();
    }
    public InputStream getInputStream(){
      return null;
    }
    public InputStream getErrorStream(){
      return null;
    }
    public void destroy(){
    }
    public int waitFor(){
      try {
        List<String> cmds=new ArrayList<String>(modifiedCmds.length);
        for (        @NonNls String cmd : modifiedCmds) {
          if (cmd.equals("-verbose"))           continue;
          cmds.add(cmd);
        }
        String[] finalCmds=cmds.toArray(new String[cmds.size()]);
        myEclipseCompilerDriver.parseCommandLineAndCompile(finalCmds);
        myExitCode=0;
        return myExitCode;
      }
 catch (      Exception e) {
        LOG.error(e);
        myExitCode=-1;
        return -1;
      }
    }
    public int exitValue(){
      return myExitCode;
    }
  }
;
  return process;
}
