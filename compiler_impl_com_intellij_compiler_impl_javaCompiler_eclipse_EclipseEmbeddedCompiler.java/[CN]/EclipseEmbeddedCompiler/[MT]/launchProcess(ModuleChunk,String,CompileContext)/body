{
  final PipedInputStream errIn=new PipedInputStream();
  PipedOutputStream errOut=new PipedOutputStream(errIn);
  final PrintWriter errWriter=new PrintWriter(errOut);
  final PipedInputStream outIn=new PipedInputStream();
  PipedOutputStream outOut=new PipedOutputStream(outIn);
  final PrintWriter outWriter=new PrintWriter(outOut);
  final String[] commands=myEclipseExternalCompiler.createStartupCommand(chunk,compileContext,outputDir);
  final String[] modifiedCmds=JavacEmbeddedCompiler.createCommandsForEmbeddedCall(commands,EclipseCompiler.getCompilerClass());
  Process process=new Process(){
    public OutputStream getOutputStream(){
      throw new UnsupportedOperationException("Not Implemented in: " + getClass().getName());
    }
    public InputStream getInputStream(){
      return outIn;
    }
    public InputStream getErrorStream(){
      return errIn;
    }
    public void destroy(){
    }
    public int waitFor(){
      try {
        URL url=new File("C:\\java\\eclipse\\plugins\\org.eclipse.jdt.core_3.1.0.jar").toURI().toURL();
        URLClassLoader classLoader=new URLClassLoader(new URL[]{url});
        Class<?> aClass=classLoader.loadClass(EclipseCompiler.getCompilerClass());
        Constructor<?> constructor=aClass.getDeclaredConstructor(PrintWriter.class,PrintWriter.class,boolean.class);
        Object compiler=constructor.newInstance(outWriter,errWriter,Boolean.FALSE);
        Method compileMethod=aClass.getDeclaredMethod("compile",String[].class);
        compileMethod.setAccessible(true);
        Object argument=modifiedCmds;
        Boolean result=(Boolean)compileMethod.invoke(compiler,argument);
        myExitCode=result.booleanValue() ? 0 : 1;
        errWriter.println(CompilerParsingThread.TERMINATION_STRING);
        errWriter.flush();
        return myExitCode;
      }
 catch (      Exception e) {
        LOG.error(e);
        myExitCode=-1;
        return -1;
      }
    }
    public int exitValue(){
      return myExitCode;
    }
  }
;
  return process;
}
