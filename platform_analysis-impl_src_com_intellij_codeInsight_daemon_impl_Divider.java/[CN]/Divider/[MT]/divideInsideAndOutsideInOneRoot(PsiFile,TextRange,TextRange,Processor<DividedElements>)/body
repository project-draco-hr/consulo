{
  long modificationStamp=root.getModificationStamp();
  DividedElements cached=SoftReference.dereference(root.getUserData(DIVIDED_ELEMENTS_KEY));
  DividedElements elements;
  if (cached == null || cached.modificationStamp != modificationStamp || !cached.restrictRange.equals(restrictRange) || !cached.priorityRange.contains(priorityRange)) {
    elements=new DividedElements(modificationStamp,root,restrictRange,priorityRange);
    divideInsideAndOutsideInOneRoot(root,restrictRange,priorityRange,elements.inside,elements.insideRanges,elements.outside,elements.outsideRanges,elements.parents,elements.parentRanges,true);
    root.putUserData(DIVIDED_ELEMENTS_KEY,new java.lang.ref.SoftReference<>(elements));
  }
 else {
    elements=cached;
  }
  processor.process(elements);
}
