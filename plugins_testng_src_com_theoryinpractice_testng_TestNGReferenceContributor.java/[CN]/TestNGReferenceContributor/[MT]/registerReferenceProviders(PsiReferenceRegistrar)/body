{
  registrar.registerReferenceProvider(getElementPattern("dependsOnMethods"),new PsiReferenceProviderBase(){
    @NotNull public PsiReference[] getReferencesByElement(    @NotNull PsiElement element,    @NotNull final ProcessingContext context){
      return new MethodReference[]{new MethodReference((PsiLiteralExpression)element)};
    }
  }
);
  registrar.registerReferenceProvider(getElementPattern("dataProvider"),new PsiReferenceProviderBase(){
    @NotNull public PsiReference[] getReferencesByElement(    @NotNull PsiElement element,    @NotNull final ProcessingContext context){
      return new DataProviderReference[]{new DataProviderReference((PsiLiteralExpression)element)};
    }
  }
);
  registrar.registerReferenceProvider(getElementPattern("groups"),new PsiReferenceProviderBase(){
    @NotNull public PsiReference[] getReferencesByElement(    @NotNull PsiElement element,    @NotNull final ProcessingContext context){
      return new GroupReference[]{new GroupReference(element.getProject(),(PsiLiteralExpression)element)};
    }
  }
);
  registrar.registerReferenceProvider(getElementPattern("dependsOnGroups"),new PsiReferenceProviderBase(){
    @NotNull public PsiReference[] getReferencesByElement(    @NotNull PsiElement element,    @NotNull final ProcessingContext context){
      return new GroupReference[]{new GroupReference(element.getProject(),(PsiLiteralExpression)element)};
    }
  }
);
}
