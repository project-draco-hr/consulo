def _process(self, tmpl, map):
    'Render a template. Returns a generator.'

    def get(key):
        v = map.get(key)
        if (v is None):
            v = self.defaults.get(key, '')
        if hasattr(v, '__call__'):
            v = v(**map)
        return v
    while tmpl:
        m = self.template_re.search(tmpl)
        if (not m):
            yield tmpl
            break
        (start, end) = m.span(0)
        variants = m.groups()
        expr = (variants[0] or variants[1])
        if start:
            yield tmpl[:start]
        tmpl = tmpl[end:]
        if ('%' in expr):
            yield self._format(expr, get, map)
        elif ('|' in expr):
            yield self._filter(expr, get, map)
        else:
            yield get(expr)
