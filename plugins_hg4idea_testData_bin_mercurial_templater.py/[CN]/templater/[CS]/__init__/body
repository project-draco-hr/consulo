def __init__(self, mapfile, filters={}, defaults={}, cache={}, minchunk=1024, maxchunk=65536):
    'set up template engine.\n        mapfile is name of file to read map definitions from.\n        filters is dict of functions. each transforms a value into another.\n        defaults is dict of default map definitions.'
    self.mapfile = (mapfile or 'template')
    self.cache = cache.copy()
    self.map = {}
    self.base = ((mapfile and os.path.dirname(mapfile)) or '')
    self.filters = templatefilters.filters.copy()
    self.filters.update(filters)
    self.defaults = defaults
    (self.minchunk, self.maxchunk) = (minchunk, maxchunk)
    self.engines = {}
    if (not mapfile):
        return
    if (not os.path.exists(mapfile)):
        raise util.Abort((_('style not found: %s') % mapfile))
    conf = config.config()
    conf.read(mapfile)
    for (key, val) in conf[''].items():
        if (val[0] in '\'"'):
            try:
                self.cache[key] = parsestring(val)
            except SyntaxError as inst:
                raise SyntaxError(('%s: %s' % (conf.source('', key), inst.args[0])))
        else:
            val = ('default', val)
            if (':' in val[1]):
                val = val[1].split(':', 1)
            self.map[key] = (val[0], os.path.join(self.base, val[1]))
