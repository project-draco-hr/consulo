{
  myProject=project;
  myAutoScrollToSourceHandler=new AutoScrollToSourceHandler(){
    protected boolean isAutoScrollMode(){
      return HierarchyBrowserManager.getInstance(myProject).getState().IS_AUTOSCROLL_TO_SOURCE;
    }
    protected void setAutoScrollMode(    final boolean state){
      HierarchyBrowserManager.getInstance(myProject).getState().IS_AUTOSCROLL_TO_SOURCE=state;
    }
  }
;
  setHierarchyBase(method);
  setLayout(new BorderLayout());
  final ActionToolbar toolbar=createToolbar();
  add(toolbar.getComponent(),BorderLayout.NORTH);
  myCardLayout=new CardLayout();
  myTreePanel=new JPanel(myCardLayout);
  createTrees(myType2TreeMap);
  for (  String type : myType2TreeMap.keySet()) {
    myType2ScopeMap.put(type,SCOPE_ALL);
  }
  for (  String key : myType2TreeMap.keySet()) {
    final JTree tree=myType2TreeMap.get(key);
    myOccurenceNavigators.put(key,new OccurenceNavigatorSupport(tree){
      @Nullable protected Navigatable createDescriptorForNode(      DefaultMutableTreeNode node){
        final PsiElement psiElement=getTargetElementFromNode(node);
        if (psiElement == null || !psiElement.isValid())         return null;
        return new OpenFileDescriptor(psiElement.getProject(),psiElement.getContainingFile().getVirtualFile(),psiElement.getTextOffset());
      }
      public String getNextOccurenceActionName(){
        return IdeBundle.message("hierarchy.call.next.occurence.name");
      }
      public String getPreviousOccurenceActionName(){
        return IdeBundle.message("hierarchy.call.prev.occurence.name");
      }
    }
);
    myTreePanel.add(new JScrollPane(tree),key);
  }
  add(myTreePanel,BorderLayout.CENTER);
}
