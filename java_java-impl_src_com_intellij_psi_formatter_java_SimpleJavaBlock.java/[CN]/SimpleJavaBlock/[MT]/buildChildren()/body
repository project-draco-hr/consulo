{
  ASTNode child=myNode.getFirstChildNode();
  int offset=myStartOffset != -1 ? myStartOffset : child != null ? child.getTextRange().getStartOffset() : 0;
  final ArrayList<Block> result=new ArrayList<Block>();
  Indent indent=null;
  while (child != null) {
    if (StdTokenSets.COMMENT_BIT_SET.contains(child.getElementType()) || child.getElementType() == JavaDocElementType.DOC_COMMENT) {
      result.add(createJavaBlock(child,mySettings,Indent.getNoneIndent(),null,AlignmentStrategy.getNullStrategy()));
      indent=Indent.getNoneIndent();
    }
 else     if (!FormatterUtil.containsWhiteSpacesOnly(child)) {
      break;
    }
    offset+=child.getTextLength();
    child=child.getTreeNext();
  }
  myReservedAlignment=createChildAlignment();
  myReservedAlignment2=createChildAlignment2(myReservedAlignment);
  Wrap childWrap=createChildWrap();
  while (child != null) {
    if (!FormatterUtil.containsWhiteSpacesOnly(child) && child.getTextLength() > 0) {
      final ASTNode astNode=child;
      AlignmentStrategy alignmentStrategyToUse=ALIGN_IN_COLUMNS_ELEMENT_TYPES.contains(myNode.getElementType()) ? myAlignmentStrategy : AlignmentStrategy.wrap(chooseAlignment(myReservedAlignment,myReservedAlignment2,child));
      child=processChild(result,astNode,alignmentStrategyToUse,childWrap,indent,offset);
      if (astNode != child && child != null) {
        offset=child.getTextRange().getStartOffset();
      }
      if (indent != null && !(myNode.getPsi() instanceof PsiFile) && child != null && child.getElementType() != ElementType.MODIFIER_LIST) {
        indent=Indent.getContinuationIndent(myIndentSettings.USE_RELATIVE_INDENTS);
      }
    }
    if (child != null) {
      offset+=child.getTextLength();
      child=child.getTreeNext();
    }
  }
  return result;
}
