def _read_chunked(self, amt):
    chunk_left = self.chunk_left
    value = ''
    while True:
        if (chunk_left is None):
            line = self.fp.readline()
            i = line.find(';')
            if (i >= 0):
                line = line[:i]
            try:
                chunk_left = int(line, 16)
            except ValueError:
                self.close()
                raise httplib.IncompleteRead(value)
            if (chunk_left == 0):
                break
        if (amt is None):
            value += self._safe_read(chunk_left)
        elif (amt < chunk_left):
            value += self._safe_read(amt)
            self.chunk_left = (chunk_left - amt)
            return value
        elif (amt == chunk_left):
            value += self._safe_read(amt)
            self._safe_read(2)
            self.chunk_left = None
            return value
        else:
            value += self._safe_read(chunk_left)
            amt -= chunk_left
        self._safe_read(2)
        chunk_left = None
    while True:
        line = self.fp.readline()
        if (not line):
            break
        if (line == '\r\n'):
            break
    self.close()
    return value
