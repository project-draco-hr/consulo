def do_open(self, http_class, req):
    host = req.get_host()
    if (not host):
        raise urllib2.URLError('no host given')
    try:
        h = self._cm.get_ready_conn(host)
        while h:
            r = self._reuse_connection(h, req, host)
            if r:
                break
            h.close()
            self._cm.remove(h)
            h = self._cm.get_ready_conn(host)
        else:
            h = http_class(host)
            if DEBUG:
                DEBUG.info('creating new connection to %s (%d)', host, id(h))
            self._cm.add(host, h, 0)
            self._start_transaction(h, req)
            r = h.getresponse()
    except (socket.error, httplib.HTTPException) as err:
        raise urllib2.URLError(err)
    if r.will_close:
        self._cm.remove(h)
    if DEBUG:
        DEBUG.info('STATUS: %s, %s', r.status, r.reason)
    r._handler = self
    r._host = host
    r._url = req.get_full_url()
    r._connection = h
    r.code = r.status
    r.headers = r.msg
    r.msg = r.reason
    if ((r.status == 200) or (not HANDLE_ERRORS)):
        return r
    else:
        return self.parent.error('http', req, r, r.status, r.msg, r.headers)
