{
  final File originalFile=getOriginalFile();
  try {
    @SuppressWarnings("IOResourceOpenedButNotSafelyClosed") final ZipFile zipFile=new ZipFile(getMirrorFile(originalFile));
class MyJarEntry implements JarFile.JarEntry {
      private ZipEntry myEntry;
      MyJarEntry(      ZipEntry entry){
        myEntry=entry;
      }
      public ZipEntry getEntry(){
        return myEntry;
      }
      @Override public String getName(){
        return myEntry.getName();
      }
      @Override public long getSize(){
        return myEntry.getSize();
      }
      @Override public long getTime(){
        return myEntry.getTime();
      }
      @Override public boolean isDirectory(){
        return myEntry.isDirectory();
      }
    }
    return new JarFile(){
      @Override public JarFile.JarEntry getEntry(      String name){
        ZipEntry entry=zipFile.getEntry(name);
        if (entry == null)         return null;
        return new MyJarEntry(entry);
      }
      @Override public InputStream getInputStream(      JarFile.JarEntry entry) throws IOException {
        return zipFile.getInputStream(((MyJarEntry)entry).myEntry);
      }
      @Override public Enumeration<? extends JarFile.JarEntry> entries(){
        final Enumeration<? extends ZipEntry> entries=zipFile.entries();
        return new Enumeration<JarEntry>(){
          @Override public boolean hasMoreElements(){
            return entries.hasMoreElements();
          }
          @Override public JarEntry nextElement(){
            ZipEntry entry=entries.nextElement();
            if (entry == null)             return null;
            return new MyJarEntry(entry);
          }
        }
;
      }
      @Override public ZipFile getZipFile(){
        return zipFile;
      }
    }
;
  }
 catch (  IOException e) {
    LOG.warn(e.getMessage() + ": " + originalFile.getPath());
    return null;
  }
}
