{
  if (!(element instanceof PsiJavaToken))   return null;
  int i=4;
  while (element != null && i > 0) {
    final ASTNode node=element.getNode();
    if (node != null && node.getUserData(KEY) != null) {
      break;
    }
 else {
      i--;
      element=element.getParent();
    }
  }
  if (element instanceof PsiLiteralExpression) {
    return resolve(element);
  }
  if (element instanceof PsiMethodCallExpression) {
    final PsiMethodCallExpression methodCall=(PsiMethodCallExpression)element;
    final Editor editor=FileEditorManager.getInstance(element.getProject()).getSelectedTextEditor();
    if (editor == null)     return null;
    FoldRegion foldRegion=null;
    for (    FoldRegion region : editor.getFoldingModel().getAllFoldRegions()) {
      final PsiElement psiElement=EditorFoldingInfo.get(editor).getPsiElement(region);
      if (methodCall.equals(psiElement)) {
        foldRegion=region;
      }
    }
    if (foldRegion == null || foldRegion.isExpanded())     return null;
    for (    PsiExpression expression : methodCall.getArgumentList().getExpressions()) {
      if (expression instanceof PsiLiteralExpression && PropertyFoldingBuilder.isI18nProperty((PsiLiteralExpression)expression)) {
        return resolve(expression);
      }
    }
  }
  return null;
}
