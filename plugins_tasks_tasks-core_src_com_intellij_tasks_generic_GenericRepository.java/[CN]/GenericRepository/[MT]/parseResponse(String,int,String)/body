{
  final List<String> placeholders=getPlaceholders(getTaskPattern());
  if (!placeholders.contains(ID_PLACEHOLDER) || !placeholders.contains(SUMMARY_PLACEHOLDER)) {
    throw new Exception("Incorrect Task Pattern");
  }
  final String taskPatternWithoutPlaceholders=getTaskPattern().replaceAll("\\{.+?\\}","");
  Matcher matcher=Pattern.compile(taskPatternWithoutPlaceholders,Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL| Pattern.UNICODE_CASE| Pattern.CANON_EQ).matcher(response);
  List<Task> tasks=new ArrayList<Task>();
  while (matcher.find()) {
    String id=matcher.group(placeholders.indexOf(ID_PLACEHOLDER) + 1);
    String summary=matcher.group(placeholders.indexOf(SUMMARY_PLACEHOLDER) + 1);
    if (myResponseType == ResponseType.XML && summary != null) {
      final String finalSummary=summary;
      summary=ApplicationManager.getApplication().runReadAction(new Computable<String>(){
        @Override public String compute(){
          XmlElementFactory factory=XmlElementFactory.getInstance(ProjectManager.getInstance().getDefaultProject());
          XmlTag text=factory.createTagFromText("<a>" + finalSummary + "</a>");
          return XmlUtil.decode(text.getValue().getTrimmedText());
        }
      }
);
    }
    tasks.add(new GenericTask(id,summary,this));
  }
  final boolean searchSupported=getTasksListURL().contains(QUERY_PLACEHOLDER);
  if (!searchSupported) {
    tasks=TaskSearchSupport.filterTasks(query != null ? query : "",tasks);
  }
  tasks=tasks.subList(0,Math.min(max,tasks.size()));
  return tasks.toArray(new Task[tasks.size()]);
}
