{
  final HttpClient httpClient=getHttpClient();
  if (!isLoginAnonymously() && !isUseHttpAuthentication())   login(httpClient);
  final List<String> placeholders=getPlaceholders(getTaskPattern());
  if (!placeholders.contains(ID_PLACEHOLDER) || !placeholders.contains(SUMMARY_PLACEHOLDER)) {
    throw new Exception("Incorrect Task Pattern");
  }
  final HttpMethod method=getTaskListsMethod(query != null ? query : "",max);
  httpClient.executeMethod(method);
  if (method.getStatusCode() != 200)   throw new Exception("Cannot get tasks: HTTP status code " + method.getStatusCode());
  final String response=method.getResponseBodyAsString();
  final String taskPatternWithoutPlaceholders=getTaskPattern().replaceAll("\\{.+?\\}","");
  Matcher matcher=Pattern.compile(taskPatternWithoutPlaceholders,Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL| Pattern.UNICODE_CASE| Pattern.CANON_EQ).matcher(response);
  List<Task> tasks=new ArrayList<Task>();
  while (matcher.find()) {
    final String id=matcher.group(placeholders.indexOf(ID_PLACEHOLDER) + 1);
    final String summary=matcher.group(placeholders.indexOf(SUMMARY_PLACEHOLDER) + 1);
    tasks.add(new GenericTask(id,summary,this));
  }
  tasks=TaskSearchSupport.filterTasks(query != null ? query : "",tasks);
  tasks=tasks.subList(0,Math.min(max,tasks.size()));
  return tasks.toArray(new Task[tasks.size()]);
}
