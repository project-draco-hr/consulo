{
  mxIGraphModel model=graph.getModel();
  boolean isCollapsed=graph.isCellCollapsed(cell);
  List<Object> edges=new ArrayList<Object>();
  int childCount=model.getChildCount(cell);
  for (int i=0; i < childCount; i++) {
    Object child=model.getChildAt(cell,i);
    if (isCollapsed || !graph.isCellVisible(child)) {
      edges.addAll(Arrays.asList(mxGraphModel.getEdges(model,child,true,true,false)));
    }
  }
  edges.addAll(Arrays.asList(mxGraphModel.getEdges(model,cell,true,true,false)));
  List<Object> result=new ArrayList<Object>(edges.size());
  Iterator<Object> it=edges.iterator();
  while (it.hasNext()) {
    Object edge=it.next();
    mxCellState state=graph.getView().getState(edge);
    Object source=(state != null) ? state.getVisibleTerminal(true) : graph.getView().getVisibleTerminal(edge,true);
    Object target=(state != null) ? state.getVisibleTerminal(false) : graph.getView().getVisibleTerminal(edge,false);
    if (((source != target) && ((target == cell && (parent == null || graph.isValidAncestor(source,parent,traverseAncestors))) || (source == cell && (parent == null || graph.isValidAncestor(target,parent,traverseAncestors)))))) {
      result.add(edge);
    }
  }
  return result.toArray();
}
