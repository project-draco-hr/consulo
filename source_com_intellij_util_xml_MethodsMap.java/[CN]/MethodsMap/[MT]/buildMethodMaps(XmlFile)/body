{
  if (myFixedChildrenMethods != null)   return;
  myFixedChildrenMethods=new HashMap<Method,Pair<String,Integer>>();
  myVariableChildrenMethods=new HashMap<Method,Pair<String,Class<? extends DomElement>>>();
  myFixedChildrenCounts=new HashMap<String,Integer>();
  for (  Method method : myClass.getMethods()) {
    if (!isCoreMethod(method)) {
      final Class<?> returnType=method.getReturnType();
      if (DomElement.class.isAssignableFrom(returnType)) {
        final String qname=getSubTagName(method,file);
        if (qname != null) {
          int index=0;
          final SubTag subTagAnnotation=method.getAnnotation(SubTag.class);
          if (subTagAnnotation != null && subTagAnnotation.index() != 0) {
            index=subTagAnnotation.index();
          }
          myFixedChildrenMethods.put(method,new Pair<String,Integer>(qname,index));
          final Integer integer=myFixedChildrenCounts.get(qname);
          if (integer == null || integer < index + 1) {
            myFixedChildrenCounts.put(qname,index + 1);
          }
        }
      }
      final Class<? extends DomElement> aClass=extractElementType(method.getGenericReturnType());
      if (aClass != null) {
        final String qname=getSubTagNameForCollection(method,file);
        if (qname != null) {
          myVariableChildrenMethods.put(method,new Pair<String,Class<? extends DomElement>>(qname,aClass));
        }
      }
    }
  }
}
