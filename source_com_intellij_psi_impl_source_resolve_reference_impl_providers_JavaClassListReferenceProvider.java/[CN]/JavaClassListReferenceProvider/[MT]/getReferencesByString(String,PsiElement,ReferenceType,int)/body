{
  final List results=new ArrayList();
  final Set<String> knownTopLevelPackages=new HashSet<String>();
  final List<PsiElement> defaultPackages=getDefaultPackages(position);
  final Iterator<PsiElement> iterator=defaultPackages.iterator();
  while (iterator.hasNext()) {
    final PsiElement pack=iterator.next();
    if (pack instanceof PsiPackage)     knownTopLevelPackages.add(((PsiPackage)pack).getName());
  }
  final Matcher matcher=pattern.matcher(str);
  while (matcher.find()) {
    final String identifier=matcher.group().trim();
    final int dotPosition=identifier.indexOf('.');
    if (identifier.lastIndexOf('.') != dotPosition || knownTopLevelPackages.contains(identifier.substring(0,identifier.indexOf('.')))) {
      results.addAll(Arrays.asList(new ReferenceSet(identifier,position,offsetInPosition + matcher.start(),type){
        protected boolean isSoft(){
          return true;
        }
      }
.getAllReferences()));
    }
  }
  return (GenericReference[])results.toArray(new GenericReference[results.size()]);
}
