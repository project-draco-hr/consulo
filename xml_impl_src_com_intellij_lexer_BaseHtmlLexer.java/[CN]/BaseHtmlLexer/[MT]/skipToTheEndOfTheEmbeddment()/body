{
  Lexer base=getDelegate();
  int tokenEnd=base.getTokenEnd();
  int lastState=0;
  int lastStart=0;
  final CharSequence buf=base.getBufferSequence();
  final char[] bufArray=CharArrayUtil.fromSequenceWithoutCopying(buf);
  if (seenTag) {
    FoundEnd:     while (true) {
      FoundEndOfTag:       while (base.getTokenType() != XmlTokenType.XML_END_TAG_START) {
        if (base.getTokenType() == XmlTokenType.XML_COMMENT_CHARACTERS) {
          final int end=base.getTokenEnd();
          for (int i=base.getTokenStart(); i < end; ++i) {
            if ((bufArray != null ? bufArray[i] : buf.charAt(i)) == '<' && i + 1 < end && (bufArray != null ? bufArray[i + 1] : buf.charAt(i + 1)) == '/') {
              tokenEnd=i;
              lastStart=i - 1;
              lastState=0;
              break FoundEndOfTag;
            }
          }
        }
        lastState=base.getState();
        tokenEnd=base.getTokenEnd();
        lastStart=base.getTokenStart();
        if (tokenEnd == getBufferEnd())         break FoundEnd;
        base.advance();
      }
      if (base.getTokenType() != XmlTokenType.XML_END_TAG_START) {
        base.start(buf,lastStart + 1,getBufferEnd(),lastState);
        base.getTokenType();
        base.advance();
      }
 else {
        base.advance();
      }
      while (XmlTokenType.WHITESPACES.contains(base.getTokenType())) {
        base.advance();
      }
      if (base.getTokenType() == XmlTokenType.XML_NAME) {
        String name=TreeUtil.getTokenText(base);
        if (caseInsensitive)         name=name.toLowerCase();
        if ((hasSeenScript() && XmlNameHandler.TOKEN_SCRIPT.equals(name)) || (hasSeenStyle() && XmlNameHandler.TOKEN_STYLE.equals(name)) || CompletionUtil.DUMMY_IDENTIFIER_TRIMMED.equalsIgnoreCase(name)) {
          break;
        }
      }
    }
    base.start(buf,lastStart,getBufferEnd(),lastState);
    base.getTokenType();
  }
 else   if (seenAttribute) {
    while (true) {
      if (!isValidAttributeValueTokenType(base.getTokenType()))       break;
      tokenEnd=base.getTokenEnd();
      lastState=base.getState();
      lastStart=base.getTokenStart();
      if (tokenEnd == getBufferEnd())       break;
      base.advance();
    }
    base.start(buf,lastStart,getBufferEnd(),lastState);
    base.getTokenType();
  }
  return tokenEnd;
}
