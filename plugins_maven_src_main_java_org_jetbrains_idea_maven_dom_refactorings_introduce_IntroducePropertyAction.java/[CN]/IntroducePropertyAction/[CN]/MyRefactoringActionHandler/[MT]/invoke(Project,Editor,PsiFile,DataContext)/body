{
  if (!editor.getSelectionModel().hasSelection())   return;
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  final int startOffset=editor.getSelectionModel().getSelectionStart();
  final int endOffset=editor.getSelectionModel().getSelectionEnd();
  XmlElement selectedElement=getSelectedElement(file,startOffset,endOffset);
  if (selectedElement != null) {
    String stringValue=selectedElement.getText();
    if (stringValue != null) {
      final MavenDomProjectModel model=MavenDomUtil.getMavenDomModel(file,MavenDomProjectModel.class);
      final String selectedString=editor.getSelectionModel().getSelectedText();
      Set<TextRange> ranges=getPropertiesTextRanges(stringValue);
      int offsetInElement=startOffset - selectedElement.getTextOffset();
      if (model == null || StringUtil.isEmptyOrSpaces(selectedString) || isInsideTextRanges(ranges,offsetInElement,offsetInElement + selectedString.length())) {
        return;
      }
      IntroducePropertyDialog dialog=new IntroducePropertyDialog(project,selectedElement,model,null,selectedString);
      dialog.show();
      if (dialog.getExitCode() == DialogWrapper.OK_EXIT_CODE) {
        final String propertyName=dialog.getEnteredName();
        final String replaceWith=PREFIX + propertyName + SUFFIX;
        final MavenDomProjectModel selectedProject=dialog.getSelectedProject();
        new WriteCommandAction(project){
          @Override protected void run(          Result result) throws Throwable {
            editor.getDocument().replaceString(startOffset,endOffset,replaceWith);
            PsiDocumentManager.getInstance(project).commitAllDocuments();
            createMavenProperty(selectedProject,propertyName,selectedString);
            PsiDocumentManager.getInstance(project).commitAllDocuments();
          }
        }
.execute();
        showFindUsages(project,propertyName,selectedString,replaceWith,selectedProject);
      }
    }
  }
}
