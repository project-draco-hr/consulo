{
  return new UsageSearcher(){
    Set<UsageInfo> usages=new HashSet<UsageInfo>();
    public void generate(    final Processor<Usage> processor){
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        public void run(){
          collectUsages(myModel);
          for (          MavenDomProjectModel model : MavenDomProjectProcessorUtils.collectChildrenProjects(myModel)) {
            collectUsages(model);
          }
        }
        private void collectUsages(        @NotNull MavenDomProjectModel model){
          if (model.isValid()) {
            XmlElement root=model.getXmlElement();
            if (root != null) {
              root.accept(new XmlElementVisitor(){
                @Override public void visitXmlText(                XmlText text){
                  XmlTag xmlTag=PsiTreeUtil.getParentOfType(text,XmlTag.class);
                  if (xmlTag != null && !xmlTag.getName().equals(mySelectedString)) {
                    usages.addAll(getUsages(text));
                  }
                }
                @Override public void visitXmlAttributeValue(                XmlAttributeValue value){
                  usages.addAll(getUsages(value));
                }
                @Override public void visitXmlElement(                XmlElement element){
                  element.acceptChildren(this);
                }
              }
);
            }
          }
        }
      }
);
      for (      UsageInfo2UsageAdapter adapter : UsageInfo2UsageAdapter.convert(usages.toArray(new UsageInfo[usages.size()]))) {
        processor.process(adapter);
      }
    }
  }
;
}
