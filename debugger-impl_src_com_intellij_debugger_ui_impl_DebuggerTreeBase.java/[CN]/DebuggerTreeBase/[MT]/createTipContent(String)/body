{
  JToolTip tooltip=new JToolTip();
  if (tipText == null) {
    tooltip.setTipText(tipText);
  }
 else {
    Dimension rootSize=getVisibleRect().getSize();
    Insets borderInsets=tooltip.getBorder().getBorderInsets(tooltip);
    rootSize.width-=(borderInsets.left + borderInsets.right) * 2;
    rootSize.height-=(borderInsets.top + borderInsets.bottom) * 2;
    StringBuffer tipBuffer=new StringBuffer(tipText.length());
    StringTokenizer tokenizer=new StringTokenizer(tipText,"\n");
    while (tokenizer.hasMoreElements()) {
      String line=tokenizer.nextToken();
      for (; ; ) {
        int maximumChars=getMaximumChars(line,tooltip.getFontMetrics(tooltip.getFont()),rootSize.width);
        if (maximumChars == line.length()) {
          tipBuffer.append(line.substring(0,maximumChars));
          tipBuffer.append('\n');
          break;
        }
 else {
          int chars;
          for (chars=maximumChars - 2; chars > 1; chars--) {
            if (getMaximumChars(line.substring(0,chars),tooltip.getFontMetrics(tooltip.getFont()),rootSize.width) < maximumChars)             break;
          }
          tipBuffer.append(line.substring(0,chars));
          tipBuffer.append('\\');
          tipBuffer.append('\n');
          line=line.substring(maximumChars - 2);
        }
      }
    }
    Element html=new Element("html");
    String text=tipBuffer.toString();
    Element p=new Element("pre");
    html.addContent(p);
    p.setText(text);
    XMLOutputter outputter=JDOMUtil.createOutputter("\n");
    Format format=outputter.getFormat().setTextMode(Format.TextMode.PRESERVE);
    outputter.setFormat(format);
    tooltip.setTipText(outputter.outputString(html));
  }
  tooltip.setBorder(null);
  return tooltip;
}
