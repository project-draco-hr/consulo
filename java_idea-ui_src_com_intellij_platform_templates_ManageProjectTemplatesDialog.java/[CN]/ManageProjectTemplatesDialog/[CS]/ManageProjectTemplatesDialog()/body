{
  super(false);
  setTitle("Manage Project Templates");
  final ProjectTemplate[] templates=new ArchivedTemplatesFactory().createTemplates(ProjectTemplatesFactory.CUSTOM_GROUP,new WizardContext(null));
  final CollectionListModel<ProjectTemplate> model=new CollectionListModel<ProjectTemplate>(Arrays.asList(templates));
  myTemplatesList=new JBList(model);
  myTemplatesList.setEmptyText("No user-defined project templates");
  myTemplatesList.setPreferredSize(new Dimension(300,100));
  myTemplatesList.setCellRenderer(new ColoredListCellRenderer(){
    @Override protected void customizeCellRenderer(    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      append(((ProjectTemplate)value).getName());
    }
  }
);
  myTemplatesList.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      ProjectTemplate template=getSelectedTemplate();
      myDescriptionPane.setText(template == null ? null : template.getDescription());
    }
  }
);
  model.addListDataListener(new ListDataAdapter(){
    @Override public void intervalRemoved(    ListDataEvent e){
      ArchivedTemplatesFactory.getTemplateFile(templates[e.getIndex0()].getName()).delete();
    }
  }
);
  myPanel=new JPanel(new BorderLayout(0,5));
  myPanel.add(ToolbarDecorator.createDecorator(myTemplatesList).disableUpDownActions().createPanel());
  myDescriptionPane=new JTextPane();
  myDescriptionPane.setPreferredSize(new Dimension(300,50));
  Messages.installHyperlinkSupport(myDescriptionPane);
  myPanel.add(ScrollPaneFactory.createScrollPane(myDescriptionPane,ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED),BorderLayout.SOUTH);
  if (templates.length > 0) {
    myTemplatesList.setSelectedValue(templates[0],true);
  }
  init();
}
