{
  PsiMethod method=candidate.getElement();
  PsiSubstitutor substitutor=candidate.getSubstitutor();
  if (incompatibilitiesCount >= 3)   return;
  for (int i=minIncompatibleIndex; i < maxIncompatibleIndex; i++) {
    for (int j=i + 1; j <= maxIncompatibleIndex; j++) {
      ArrayUtil.swap(expressions,i,j);
      if (PsiUtil.isApplicable(method,substitutor,expressions)) {
        PsiCall copy=(PsiCall)callExpression.copy();
        PsiExpression[] copyExpressions=copy.getArgumentList().getExpressions();
        copyExpressions[i].replace(expressions[i]);
        copyExpressions[j].replace(expressions[j]);
        JavaResolveResult result=copy.resolveMethodGenerics();
        if (result.getElement() != null && result.isValidResult()) {
          permutations.add(copy);
          if (permutations.size() > 1)           return;
        }
      }
      ArrayUtil.swap(expressions,i,j);
    }
  }
}
