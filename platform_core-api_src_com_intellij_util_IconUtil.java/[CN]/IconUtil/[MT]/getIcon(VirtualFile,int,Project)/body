{
  Icon lastIcon=Iconable.LastComputedIcon.get(file,flags);
  return IconDeferrer.getInstance().defer(lastIcon != null ? lastIcon : VirtualFilePresentation.getIcon(file),new FileIconKey(file,project,flags),new Function<FileIconKey,Icon>(){
    public Icon fun(    final FileIconKey key){
      VirtualFile file=key.getFile();
      int flags=key.getFlags();
      Project project=key.getProject();
      if (!file.isValid() || project != null && (project.isDisposed() || !wasEverInitialized(project)))       return null;
      Icon providersIcon=getProvidersIcon(file,flags,project);
      Icon icon=providersIcon == null ? VirtualFilePresentation.getIcon(file) : providersIcon;
      final boolean dumb=project != null && DumbService.getInstance(project).isDumb();
      for (      FileIconPatcher patcher : getPatchers()) {
        if (dumb && !DumbService.isDumbAware(patcher)) {
          continue;
        }
        icon=patcher.patchIcon(icon,file,flags,project);
      }
      if ((flags & Iconable.ICON_FLAG_READ_STATUS) != 0 && !file.isWritable()) {
        icon=new LayeredIcon(icon,PlatformIcons.LOCKED_ICON);
      }
      if (file.isSymLink()) {
        icon=new LayeredIcon(icon,PlatformIcons.SYMLINK_ICON);
      }
      Iconable.LastComputedIcon.put(file,icon,flags);
      return icon;
    }
  }
);
}
