{
  Icon lastIcon=Iconable.LastComputedIcon.get(file,flags);
  final Icon base=lastIcon != null ? lastIcon : VirtualFilePresentation.getIcon(file);
  return IconDeferrer.getInstance().defer(base,new FileIconKey(file,project,flags),new NullableFunction<FileIconKey,Icon>(){
    @Override public Icon fun(    final FileIconKey key){
      final VirtualFile file=key.getFile();
      final int flags=key.getFlags();
      final Project project=key.getProject();
      if (!file.isValid() || project != null && (project.isDisposed() || !wasEverInitialized(project)))       return null;
      final Icon nativeIcon=NativeFileIconUtil.INSTANCE.getIcon(file);
      IconDescriptor iconDescriptor=new IconDescriptor(nativeIcon == null ? base : nativeIcon);
      if (project != null) {
        PsiManager manager=PsiManager.getInstance(project);
        final PsiElement element=file.isDirectory() ? manager.findDirectory(file) : manager.findFile(file);
        if (element != null) {
          IconDescriptorUpdaters.processExistingDescriptor(iconDescriptor,element,flags);
        }
      }
      if (file.is(VFileProperty.SYMLINK)) {
        iconDescriptor.addLayerIcon(AllIcons.Nodes.Symlink);
      }
      final Icon icon=iconDescriptor.toIcon();
      Iconable.LastComputedIcon.put(file,icon,flags);
      return icon;
    }
  }
);
}
