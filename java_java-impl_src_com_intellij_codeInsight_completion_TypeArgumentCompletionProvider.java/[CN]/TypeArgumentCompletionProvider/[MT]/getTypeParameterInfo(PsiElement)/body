{
  final PsiReferenceParameterList parameterList=PsiTreeUtil.getContextOfType(context,PsiReferenceParameterList.class,true);
  if (parameterList == null)   return null;
  PsiElement parent=parameterList.getParent();
  if (!(parent instanceof PsiJavaCodeReferenceElement))   return null;
  final PsiJavaCodeReferenceElement referenceElement=(PsiJavaCodeReferenceElement)parent;
  final int parameterIndex;
  int index=0;
  final PsiTypeElement typeElement=PsiTreeUtil.getContextOfType(context,PsiTypeElement.class,true);
  if (typeElement != null) {
    final PsiTypeElement[] elements=referenceElement.getParameterList().getTypeParameterElements();
    while (index < elements.length) {
      final PsiTypeElement element=elements[index++];
      if (element == typeElement)       break;
    }
  }
  parameterIndex=index - 1;
  if (parameterIndex < 0)   return null;
  final PsiElement target=referenceElement.resolve();
  if (!(target instanceof PsiClass))   return null;
  final PsiClass referencedClass=(PsiClass)target;
  final PsiTypeParameter[] typeParameters=referencedClass.getTypeParameters();
  if (typeParameters.length <= parameterIndex)   return null;
  return Pair.create(referencedClass,parameterIndex);
}
