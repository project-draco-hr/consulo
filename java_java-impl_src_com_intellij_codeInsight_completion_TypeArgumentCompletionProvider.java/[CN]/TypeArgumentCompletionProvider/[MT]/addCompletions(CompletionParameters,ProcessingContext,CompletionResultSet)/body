{
  final PsiElement context=parameters.getPosition();
  final Pair<PsiClass,Integer> pair=getTypeParameterInfo(context);
  if (pair == null)   return;
  PsiExpression expression=PsiTreeUtil.getContextOfType(context,PsiExpression.class,true);
  if (expression != null) {
    ExpectedTypeInfo[] types=ExpectedTypesProvider.getExpectedTypes(expression,true,false,false);
    if (types.length > 0) {
      for (      ExpectedTypeInfo info : types) {
        PsiType type=info.getType();
        if (type instanceof PsiClassType && !type.equals(expression.getType())) {
          fillExpectedTypeArgs(resultSet,context,pair.first,pair.second,((PsiClassType)type).resolveGenerics(),mySmart ? info.getTailType() : TailType.NONE);
        }
      }
      return;
    }
  }
  if (mySmart) {
    addInheritors(parameters,resultSet,pair.first,pair.second);
  }
}
