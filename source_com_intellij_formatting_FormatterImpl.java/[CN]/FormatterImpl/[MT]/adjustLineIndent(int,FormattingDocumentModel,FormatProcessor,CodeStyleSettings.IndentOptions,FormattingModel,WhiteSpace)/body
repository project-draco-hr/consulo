{
  boolean wsContainsCaret=whiteSpace.getTextRange().getStartOffset() <= offset && whiteSpace.getTextRange().getEndOffset() > offset;
  final CharSequence text=getCharSequence(documentModel);
  int lineStartOffset=getLineStartOffset(offset,whiteSpace,text,documentModel);
  processor.setAllWhiteSpacesAreReadOnly();
  whiteSpace.setLineFeedsAreReadOnly(true);
  final IndentInfo indent;
  if (documentModel.getLineNumber(offset) == documentModel.getLineNumber(whiteSpace.getTextRange().getEndOffset())) {
    whiteSpace.setReadOnly(false);
    processor.formatWithoutRealModifications();
    indent=new IndentInfo(0,whiteSpace.getIndentOffset(),whiteSpace.getSpaces());
  }
 else {
    indent=processor.getIndentAt(offset);
  }
  final String newWS=whiteSpace.generateWhiteSpace(indentOptions,lineStartOffset,indent);
  try {
    model.replaceWhiteSpace(whiteSpace.getTextRange(),newWS);
  }
  finally {
    model.commitChanges();
  }
  if (wsContainsCaret) {
    return whiteSpace.getTextRange().getStartOffset() + CharArrayUtil.shiftForward(newWS.toCharArray(),lineStartOffset - whiteSpace.getTextRange().getStartOffset()," \t");
  }
 else {
    return offset - whiteSpace.getTextRange().getLength() + newWS.length();
  }
}
