{
  if (!(getUI() instanceof BasicTreeUI))   return;
  final AbstractTreeBuilder builder=AbstractTreeBuilder.getBuilderFor(this);
  if (builder == null || builder.isDisposed())   return;
  GraphicsConfig config=new GraphicsConfig(g);
  config.setAntialiasing(true);
  final AbstractTreeStructure structure=builder.getTreeStructure();
  for (int eachRow=0; eachRow < getRowCount(); eachRow++) {
    final TreePath path=getPathForRow(eachRow);
    PresentableNodeDescriptor node=toPresentableNode(path.getLastPathComponent());
    if (node == null)     continue;
    if (!node.isContentHighlighted())     continue;
    if (highlightSingleNode()) {
      if (node.isContentHighlighted()) {
        final TreePath nodePath=getPath(node);
        Rectangle rect;
        final Rectangle parentRect=getPathBounds(nodePath);
        if (isExpanded(nodePath)) {
          Object[] kids=structure.getChildElements(node);
          if (kids.length > 0) {
            Object lastChild=kids[kids.length - 1];
            int[] max=getMax(kids,(int)parentRect.getMaxY(),(int)parentRect.getMaxX());
            if (lastChild instanceof PresentableNodeDescriptor) {
              while (isExpanded(getPath((PresentableNodeDescriptor)lastChild))) {
                kids=structure.getChildElements(lastChild);
                if (kids.length == 0) {
                  break;
                }
                lastChild=kids[kids.length - 1];
                max=getMax(kids,max[0],max[1]);
              }
            }
            rect=new Rectangle(parentRect.x,parentRect.y,max[1] - parentRect.x + 1,max[0] - parentRect.y - 1);
          }
 else {
            rect=parentRect;
          }
        }
 else {
          rect=parentRect;
        }
        if (rect != null) {
          final Color highlightColor=node.getHighlightColor();
          g.setColor(highlightColor);
          g.fillRoundRect(rect.x,rect.y,rect.width,rect.height,4,4);
          g.setColor(highlightColor.darker());
          g.drawRoundRect(rect.x,rect.y,rect.width,rect.height,4,4);
        }
      }
    }
 else {
      if (node.getParentDescriptor() == null)       continue;
      final Object[] kids=structure.getChildElements(node);
      if (kids.length == 0)       continue;
      PresentableNodeDescriptor first=null;
      PresentableNodeDescriptor last=null;
      int lastIndex=-1;
      for (int i=0; i < kids.length; i++) {
        final Object kid=kids[i];
        if (kid instanceof PresentableNodeDescriptor) {
          PresentableNodeDescriptor eachKid=(PresentableNodeDescriptor)kid;
          if (!node.isHighlightableContentNode(eachKid))           continue;
          if (first == null) {
            first=eachKid;
          }
          last=eachKid;
          lastIndex=i;
        }
      }
      if (first == null || last == null)       continue;
      Rectangle firstBounds=getPathBounds(getPath(first));
      if (isExpanded(getPath(last))) {
        if (lastIndex + 1 < kids.length) {
          final Object child=kids[lastIndex + 1];
          if (child instanceof PresentableNodeDescriptor) {
            PresentableNodeDescriptor nextKid=(PresentableNodeDescriptor)child;
            int nextRow=getRowForPath(getPath(nextKid));
            last=toPresentableNode(getPathForRow(nextRow - 1).getLastPathComponent());
          }
        }
 else {
          NodeDescriptor parentNode=node.getParentDescriptor();
          if (parentNode instanceof PresentableNodeDescriptor) {
            final PresentableNodeDescriptor ppd=(PresentableNodeDescriptor)parentNode;
            int nodeIndex=node.getIndex();
            if (nodeIndex + 1 < structure.getChildElements(ppd).length) {
              PresentableNodeDescriptor nextChild=ppd.getChildToHighlightAt(nodeIndex + 1);
              int nextRow=getRowForPath(getPath(nextChild));
              last=toPresentableNode(getPathForRow(nextRow - 1).getLastPathComponent());
            }
 else {
              int lastRow=getRowForPath(getPath(last));
              PresentableNodeDescriptor lastParent=last;
              boolean lastWasFound=false;
              for (int i=lastRow + 1; i < getRowCount(); i++) {
                PresentableNodeDescriptor eachNode=toPresentableNode(getPathForRow(i).getLastPathComponent());
                if (!node.isParentOf(eachNode)) {
                  last=lastParent;
                  lastWasFound=true;
                  break;
                }
                lastParent=eachNode;
              }
              if (!lastWasFound) {
                last=toPresentableNode(getPathForRow(getRowCount() - 1).getLastPathComponent());
              }
            }
          }
        }
      }
      Rectangle lastBounds=getPathBounds(getPath(last));
      if (firstBounds == null || lastBounds == null)       continue;
      Rectangle toPaint=new Rectangle(firstBounds.x,firstBounds.y,0,(int)lastBounds.getMaxY() - firstBounds.y - 1);
      toPaint.width=getWidth() - toPaint.x - 4;
      final Color highlightColor=first.getHighlightColor();
      g.setColor(highlightColor);
      g.fillRoundRect(toPaint.x,toPaint.y,toPaint.width,toPaint.height,4,4);
      g.setColor(highlightColor.darker());
      g.drawRoundRect(toPaint.x,toPaint.y,toPaint.width,toPaint.height,4,4);
    }
  }
  config.restore();
}
