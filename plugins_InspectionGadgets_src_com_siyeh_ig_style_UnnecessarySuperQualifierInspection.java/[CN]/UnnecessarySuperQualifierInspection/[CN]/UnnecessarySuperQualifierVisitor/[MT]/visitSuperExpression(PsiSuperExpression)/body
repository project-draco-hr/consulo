{
  super.visitSuperExpression(expression);
  final PsiJavaCodeReferenceElement qualifier=expression.getQualifier();
  if (qualifier != null) {
    return;
  }
  final PsiElement parent=expression.getParent();
  if (!(parent instanceof PsiReferenceExpression)) {
    return;
  }
  final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)parent;
  final PsiElement grandParent=referenceExpression.getParent();
  if (!(grandParent instanceof PsiMethodCallExpression)) {
    return;
  }
  final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)grandParent;
  final PsiMethod superMethod=methodCallExpression.resolveMethod();
  if (superMethod == null) {
    return;
  }
  final PsiClass parentClass=PsiTreeUtil.getParentOfType(expression,PsiClass.class);
  if (parentClass == null) {
    return;
  }
  final PsiMethod[] methods=parentClass.findMethodsBySignature(superMethod,false);
  for (  PsiMethod method : methods) {
    if (superMethod.equals(method)) {
      return;
    }
  }
  registerError(expression);
}
