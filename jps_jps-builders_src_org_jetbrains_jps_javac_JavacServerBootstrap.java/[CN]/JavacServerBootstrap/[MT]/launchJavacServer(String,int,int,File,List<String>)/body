{
  final List<String> cmdLine=new ArrayList<String>();
  appendParam(cmdLine,getVMExecutablePath(sdkHomePath));
  appendParam(cmdLine,"-XX:MaxPermSize=150m");
  appendParam(cmdLine,"-Djava.awt.headless=true");
  final int xms=heapSize / 2;
  if (xms > 32) {
    appendParam(cmdLine,"-Xms" + xms + "m");
  }
  appendParam(cmdLine,"-Xmx" + heapSize + "m");
  final String lang=System.getProperty("user.language");
  if (lang != null) {
    appendParam(cmdLine,"-Duser.language=" + lang);
  }
  final String country=System.getProperty("user.country");
  if (country != null) {
    appendParam(cmdLine,"-Duser.country=" + country);
  }
  final String region=System.getProperty("user.region");
  if (region != null) {
    appendParam(cmdLine,"-Duser.region=" + region);
  }
  for (  String option : vmOptions) {
    appendParam(cmdLine,option);
  }
  appendParam(cmdLine,"-classpath");
  final List<File> cp=ClasspathBootstrap.getJavacServerClasspath(sdkHomePath);
  final StringBuilder classpath=new StringBuilder();
  for (  File file : cp) {
    if (classpath.length() > 0) {
      classpath.append(File.pathSeparator);
    }
    classpath.append(file.getPath());
  }
  appendParam(cmdLine,classpath.toString());
  appendParam(cmdLine,org.jetbrains.jps.javac.JavacServer.class.getName());
  appendParam(cmdLine,Integer.toString(port));
  workingDir.mkdirs();
  appendParam(cmdLine,FileUtil.toSystemIndependentName(workingDir.getPath()));
  final ProcessBuilder builder=new ProcessBuilder(cmdLine);
  builder.directory(workingDir);
  final Process process=builder.start();
  final BaseOSProcessHandler processHandler=new BaseOSProcessHandler(process,null,null){
    @Override protected Future<?> executeOnPooledThread(    Runnable task){
      return SharedThreadPool.getInstance().executeOnPooledThread(task);
    }
  }
;
  configureProcessHandler(processHandler);
  return processHandler;
}
