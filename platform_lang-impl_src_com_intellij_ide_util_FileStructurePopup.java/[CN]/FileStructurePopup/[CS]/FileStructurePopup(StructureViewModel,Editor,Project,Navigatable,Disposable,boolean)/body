{
  myProject=project;
  myEditor=editor;
  myNavigatable=navigatable;
  myBaseTreeModel=structureViewModel;
  myDisposable=auxDisposable;
  if (applySortAndFilter) {
    myTreeActionsOwner=new MyTreeActionsOwner();
    myTreeModel=new TreeModelWrapper(structureViewModel,myTreeActionsOwner);
  }
 else {
    myTreeActionsOwner=null;
    myTreeModel=structureViewModel;
  }
  PsiFile psiFile=getPsiFile(project);
  final PsiElement psiElement=getCurrentElement(psiFile);
  if (psiElement != null) {
    if (structureViewModel.shouldEnterElement(psiElement)) {
    }
 else {
    }
  }
  mySmartTreeStructure=new SmartTreeStructure(project,myTreeModel){
    public void rebuildTree(){
      if (!myPopup.isDisposed()) {
        super.rebuildTree();
      }
    }
    public boolean isToBuildChildrenInBackground(    final Object element){
      return getRootElement() == element;
    }
    protected TreeElementWrapper createTree(){
      return new StructureViewComponent.StructureViewTreeElementWrapper(myProject,myModel.getRoot(),myModel);
    }
    @Override public String toString(){
      return "structure view tree structure(model=" + myTreeModel + ")";
    }
  }
;
  ElementFilter filter=new FileStructurePopupFilter();
  myStructure=new FilteringTreeStructure(project,filter,mySmartTreeStructure);
  myTree=new Tree(new DefaultMutableTreeNode(myStructure.getRootElement()));
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(true);
  mySpeedSearch=new TreeSpeedSearch(myTree,TreeSpeedSearch.NODE_DESCRIPTOR_TOSTRING,true);
  myAbstractTreeBuilder=new FilteringTreeBuilder(project,myTree,filter,myStructure,null){
    @Override protected boolean validateNode(    Object child){
      return StructureViewComponent.isValid(child);
    }
  }
;
}
