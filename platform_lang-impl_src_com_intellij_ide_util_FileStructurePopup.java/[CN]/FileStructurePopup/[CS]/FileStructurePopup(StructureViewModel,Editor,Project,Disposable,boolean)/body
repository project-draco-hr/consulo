{
  myProject=project;
  myEditor=editor;
  myBaseTreeModel=structureViewModel;
  Disposer.register(this,auxDisposable);
  if (applySortAndFilter) {
    myTreeActionsOwner=new MyTreeActionsOwner();
    myTreeModel=new TreeModelWrapper(structureViewModel,myTreeActionsOwner);
  }
 else {
    myTreeActionsOwner=null;
    myTreeModel=structureViewModel;
  }
  myTreeStructure=new SmartTreeStructure(project,myTreeModel){
    public void rebuildTree(){
      if (!myPopup.isDisposed()) {
        super.rebuildTree();
      }
    }
    public boolean isToBuildChildrenInBackground(    final Object element){
      return getRootElement() == element;
    }
    protected TreeElementWrapper createTree(){
      return new StructureViewComponent.StructureViewTreeElementWrapper(myProject,myModel.getRoot(),myModel);
    }
    @Override public String toString(){
      return "structure view tree structure(model=" + myTreeModel + ")";
    }
  }
;
  myTree=new Tree(new DefaultMutableTreeNode(myTreeStructure.getRootElement()));
  myTree.setCellRenderer(new NodeRenderer(){
    @Override protected void doAppend(    @NotNull @Nls String fragment,    @NotNull SimpleTextAttributes attributes,    boolean isMainText,    boolean selected){
      SpeedSearchUtil.appendFragmentsForSpeedSearch(myTree,fragment,attributes,selected,this);
    }
    @Override public void doAppend(    @NotNull String fragment,    @NotNull SimpleTextAttributes attributes,    boolean selected){
      SpeedSearchUtil.appendFragmentsForSpeedSearch(myTree,fragment,attributes,selected,this);
    }
    @Override public void doAppend(    String fragment,    boolean selected){
      SpeedSearchUtil.appendFragmentsForSpeedSearch(myTree,fragment,SimpleTextAttributes.REGULAR_ATTRIBUTES,selected,this);
    }
  }
);
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(true);
  mySpeedSearch=new TreeSpeedSearch(myTree,TreeSpeedSearch.NODE_DESCRIPTOR_TOSTRING,true){
    @Override protected Point getComponentLocationOnScreen(){
      return myPopup.getContent().getLocationOnScreen();
    }
    @Override protected Rectangle getComponentVisibleRect(){
      return myPopup.getContent().getVisibleRect();
    }
  }
;
  mySpeedSearch.setComparator(new SpeedSearchComparator(false,true));
  myAbstractTreeBuilder=new FilteringTreeBuilder(myTree,new FileStructurePopupFilter(),myTreeStructure,null){
    @Override protected boolean validateNode(    Object child){
      return StructureViewComponent.isValid(child);
    }
    @Override public void revalidateTree(){
    }
    @Override public boolean isToEnsureSelectionOnFocusGained(){
      return false;
    }
  }
;
  myAbstractTreeBuilder.getUi().getUpdater().setDelay(1);
  Disposer.register(this,myAbstractTreeBuilder);
}
