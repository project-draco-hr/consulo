{
  myProject=project;
  myEditor=editor;
  IdeFocusManager.getInstance(myProject).typeAheadUntil(myTreeHasBuilt);
  myBaseTreeModel=structureViewModel;
  Disposer.register(this,auxDisposable);
  if (applySortAndFilter) {
    myTreeActionsOwner=new TreeStructureActionsOwner(myBaseTreeModel);
    myTreeModel=new TreeModelWrapper(structureViewModel,myTreeActionsOwner);
  }
 else {
    myTreeActionsOwner=null;
    myTreeModel=structureViewModel;
  }
  myTreeStructure=new SmartTreeStructure(project,myTreeModel){
    public void rebuildTree(){
      if (ApplicationManager.getApplication().isUnitTestMode() || !myPopup.isDisposed()) {
        super.rebuildTree();
      }
    }
    public boolean isToBuildChildrenInBackground(    final Object element){
      return getRootElement() == element;
    }
    protected TreeElementWrapper createTree(){
      return new StructureViewComponent.StructureViewTreeElementWrapper(myProject,myModel.getRoot(),myModel);
    }
    @Override public String toString(){
      return "structure view tree structure(model=" + myTreeModel + ")";
    }
  }
;
  myTree=new JBTreeWithHintProvider(new DefaultMutableTreeNode(myTreeStructure.getRootElement())){
    @Override protected PsiElement getPsiElementForHint(    Object selectedValue){
      return getPsi((FilteringTreeStructure.FilteringNode)((DefaultMutableTreeNode)selectedValue).getUserObject());
    }
  }
;
  myTree.setCellRenderer(new NodeRenderer(){
    @Override protected void doAppend(    @NotNull @Nls String fragment,    @NotNull SimpleTextAttributes attributes,    boolean isMainText,    boolean selected){
      SpeedSearchUtil.appendFragmentsForSpeedSearch(myTree,fragment,attributes,selected,this);
    }
    @Override public void doAppend(    @NotNull String fragment,    @NotNull SimpleTextAttributes attributes,    boolean selected){
      SpeedSearchUtil.appendFragmentsForSpeedSearch(myTree,fragment,attributes,selected,this);
    }
    @Override public void doAppend(    String fragment,    boolean selected){
      SpeedSearchUtil.appendFragmentsForSpeedSearch(myTree,fragment,SimpleTextAttributes.REGULAR_ATTRIBUTES,selected,this);
    }
  }
);
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(true);
  mySpeedSearch=new MyTreeSpeedSearch();
  mySpeedSearch.setComparator(new SpeedSearchComparator(false,true));
  final FileStructurePopupFilter filter=new FileStructurePopupFilter();
  myFilteringStructure=new FilteringTreeStructure(filter,myTreeStructure,ApplicationManager.getApplication().isUnitTestMode());
  myAbstractTreeBuilder=new FilteringTreeBuilder(myTree,filter,myFilteringStructure,null){
    @Override protected boolean validateNode(    Object child){
      return StructureViewComponent.isValid(child);
    }
    @Override public void revalidateTree(){
    }
    @Override public boolean isToEnsureSelectionOnFocusGained(){
      return false;
    }
  }
;
  myAbstractTreeBuilder.getUi().getUpdater().setPassThroughMode(true);
  myInitialPsiElement=getCurrentElement(getPsiFile(myProject));
  Disposer.register(this,myAbstractTreeBuilder);
}
