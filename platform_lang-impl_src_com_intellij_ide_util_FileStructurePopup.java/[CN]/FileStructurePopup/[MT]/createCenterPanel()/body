{
  List<FileStructureFilter> fileStructureFilters=new ArrayList<FileStructureFilter>();
  List<FileStructureNodeProvider> fileStructureNodeProviders=new ArrayList<FileStructureNodeProvider>();
  if (myTreeActionsOwner != null) {
    for (    Filter filter : myBaseTreeModel.getFilters()) {
      if (filter instanceof FileStructureFilter) {
        final FileStructureFilter fsFilter=(FileStructureFilter)filter;
        myTreeActionsOwner.setActionIncluded(fsFilter,true);
        fileStructureFilters.add(fsFilter);
      }
    }
    if (myBaseTreeModel instanceof ProvidingTreeModel) {
      for (      NodeProvider provider : ((ProvidingTreeModel)myBaseTreeModel).getNodeProviders()) {
        if (provider instanceof FileStructureNodeProvider) {
          fileStructureNodeProviders.add((FileStructureNodeProvider)provider);
        }
      }
    }
  }
  final JPanel panel=new JPanel(new BorderLayout());
  JPanel comboPanel=new JPanel(new GridLayout(0,2,0,0));
  final Shortcut[] F4=ActionManager.getInstance().getAction(IdeActions.ACTION_EDIT_SOURCE).getShortcutSet().getShortcuts();
  final Shortcut[] ENTER=CustomShortcutSet.fromString("ENTER").getShortcuts();
  final CustomShortcutSet shortcutSet=new CustomShortcutSet(ArrayUtil.mergeArrays(F4,ENTER));
  new AnAction(){
    @Override public void actionPerformed(    AnActionEvent e){
      final boolean succeeded=navigateSelectedElement();
      if (succeeded) {
        unregisterCustomShortcutSet(panel);
      }
    }
  }
.registerCustomShortcutSet(shortcutSet,panel);
  new AnAction(){
    @Override public void actionPerformed(    AnActionEvent e){
      if (mySpeedSearch != null && mySpeedSearch.isPopupActive()) {
        mySpeedSearch.hidePopup();
      }
 else {
        myPopup.cancel();
      }
    }
  }
.registerCustomShortcutSet(CustomShortcutSet.fromString("ESCAPE"),myTree);
  new ClickListener(){
    @Override public boolean onClick(    MouseEvent e,    int clickCount){
      final TreePath path=myTree.getPathForLocation(e.getX(),e.getY());
      if (path == null)       return false;
      navigateSelectedElement();
      return true;
    }
  }
.installOn(myTree);
  for (  FileStructureFilter filter : fileStructureFilters) {
    addCheckbox(comboPanel,filter);
  }
  for (  FileStructureNodeProvider provider : fileStructureNodeProviders) {
    addCheckbox(comboPanel,provider);
  }
  myPreferredWidth=Math.max(comboPanel.getPreferredSize().width,JBUI.scale(350));
  panel.add(comboPanel,BorderLayout.NORTH);
  JScrollPane scrollPane=ScrollPaneFactory.createScrollPane(myAbstractTreeBuilder.getTree());
  scrollPane.setBorder(IdeBorderFactory.createBorder(SideBorder.TOP | SideBorder.BOTTOM));
  panel.add(scrollPane,BorderLayout.CENTER);
  panel.add(createSouthPanel(),BorderLayout.SOUTH);
  DataManager.registerDataProvider(panel,new DataProvider(){
    @Override public Object getData(    @NonNls String dataId){
      if (CommonDataKeys.PROJECT.is(dataId)) {
        return myProject;
      }
      if (PlatformDataKeys.FILE_EDITOR.is(dataId)) {
        return myFileEditor;
      }
      if (CommonDataKeys.PSI_ELEMENT.is(dataId)) {
        Object node=ContainerUtil.getFirstItem(myAbstractTreeBuilder.getSelectedElements());
        if (!(node instanceof FilteringTreeStructure.FilteringNode))         return null;
        return getPsi((FilteringTreeStructure.FilteringNode)node);
      }
      if (LangDataKeys.PSI_ELEMENT_ARRAY.is(dataId)) {
        Set<Object> nodes=myAbstractTreeBuilder.getSelectedElements();
        if (nodes.isEmpty())         return PsiElement.EMPTY_ARRAY;
        ArrayList<PsiElement> result=new ArrayList<PsiElement>();
        for (        Object o : nodes) {
          if (!(o instanceof FilteringTreeStructure.FilteringNode))           continue;
          ContainerUtil.addIfNotNull(result,getPsi((FilteringTreeStructure.FilteringNode)o));
        }
        return ContainerUtil.toArray(result,PsiElement.ARRAY_FACTORY);
      }
      if (LangDataKeys.POSITION_ADJUSTER_POPUP.is(dataId)) {
        return myPopup;
      }
      if (PlatformDataKeys.TREE_EXPANDER.is(dataId)) {
        return myTreeExpander;
      }
      return null;
    }
  }
);
  panel.addFocusListener(new FocusAdapter(){
    @Override public void focusLost(    FocusEvent e){
      myPopup.cancel();
    }
  }
);
  return panel;
}
