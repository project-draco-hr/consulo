{
  JComponent panel=createCenterPanel();
  new MnemonicHelper().register(panel);
  boolean shouldSetWidth=DimensionService.getInstance().getSize(getDimensionServiceKey(),myProject) == null;
  myPopup=JBPopupFactory.getInstance().createComponentPopupBuilder(panel,null).setTitle(myTitle).setResizable(true).setModalContext(false).setFocusable(true).setRequestFocus(true).setMovable(true).setBelongsToGlobalPopupStack(true).setCancelKeyEnabled(false).setDimensionServiceKey(null,getDimensionServiceKey(),false).setCancelCallback(new Computable<Boolean>(){
    @Override public Boolean compute(){
      DimensionService.getInstance().setLocation(getDimensionServiceKey(),myPopup.getLocationOnScreen(),myProject);
      return true;
    }
  }
).createPopup();
  myTree.addTreeSelectionListener(new TreeSelectionListener(){
    @Override public void valueChanged(    TreeSelectionEvent e){
      if (myPopup.isVisible()) {
        final PopupUpdateProcessor updateProcessor=myPopup.getUserData(PopupUpdateProcessor.class);
        if (updateProcessor != null) {
          final AbstractTreeNode node=getSelectedNode();
          updateProcessor.updatePopup(node);
        }
      }
    }
  }
);
  Disposer.register(myPopup,this);
  Disposer.register(myPopup,new Disposable(){
    @Override public void dispose(){
      if (!myTreeHasBuilt.isDone()) {
        myTreeHasBuilt.setRejected();
      }
    }
  }
);
  myTree.getEmptyText().setText("Loading...");
  final Point location=DimensionService.getInstance().getLocation(getDimensionServiceKey(),myProject);
  if (location != null) {
    myPopup.showInScreenCoordinates(myFileEditor.getComponent(),location);
  }
 else {
    myPopup.showCenteredInCurrentWindow(myProject);
  }
  ((AbstractPopup)myPopup).setShowHints(true);
  if (shouldSetWidth) {
    myPopup.setSize(new Dimension(myPreferredWidth + 10,myPopup.getSize().height));
  }
  IdeFocusManager.getInstance(myProject).requestFocus(myTree,true);
  SwingUtilities.windowForComponent(myPopup.getContent()).addWindowFocusListener(new WindowFocusListener(){
    @Override public void windowGainedFocus(    WindowEvent e){
    }
    @Override public void windowLostFocus(    WindowEvent e){
      myPopup.cancel();
    }
  }
);
  ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
    @Override public void run(){
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        @Override public void run(){
          myFilteringStructure.rebuild();
        }
      }
);
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          myAbstractTreeBuilder.queueUpdate().doWhenDone(new Runnable(){
            @Override public void run(){
              myTreeHasBuilt.setDone();
              SwingUtilities.invokeLater(new Runnable(){
                @Override public void run(){
                  if (myAbstractTreeBuilder.isDisposed())                   return;
                  if (selectPsiElement(myInitialPsiElement) == null) {
                    TreeUtil.ensureSelection(myAbstractTreeBuilder.getTree());
                    myAbstractTreeBuilder.revalidateTree();
                  }
                }
              }
);
            }
          }
);
          installUpdater();
        }
      }
);
    }
  }
);
}
