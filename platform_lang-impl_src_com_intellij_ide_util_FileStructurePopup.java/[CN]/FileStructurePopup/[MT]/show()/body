{
  final ActionCallback treeHasBuilt=new ActionCallback();
  IdeFocusManager.getInstance(myProject).typeAheadUntil(treeHasBuilt);
  JComponent panel=createCenterPanel();
  new MnemonicHelper().register(panel);
  boolean shouldSetWidth=DimensionService.getInstance().getSize(getDimensionServiceKey(),myProject) == null;
  myPopup=JBPopupFactory.getInstance().createComponentPopupBuilder(panel,null).setTitle(myTitle).setResizable(true).setModalContext(false).setFocusable(true).setMovable(true).setBelongsToGlobalPopupStack(true).setCancelKeyEnabled(false).setDimensionServiceKey(null,getDimensionServiceKey(),false).setCancelCallback(new Computable<Boolean>(){
    @Override public Boolean compute(){
      DimensionService.getInstance().setLocation(getDimensionServiceKey(),myPopup.getLocationOnScreen(),myProject);
      return true;
    }
  }
).createPopup();
  myTree.addTreeSelectionListener(new TreeSelectionListener(){
    @Override public void valueChanged(    TreeSelectionEvent e){
      if (myPopup.isVisible()) {
        final PopupUpdateProcessor updateProcessor=myPopup.getUserData(PopupUpdateProcessor.class);
        if (updateProcessor != null) {
          final AbstractTreeNode node=getSelectedNode();
          updateProcessor.updatePopup(node);
        }
      }
    }
  }
);
  Disposer.register(myPopup,this);
  Disposer.register(myPopup,new Disposable(){
    @Override public void dispose(){
      if (!treeHasBuilt.isDone()) {
        treeHasBuilt.setRejected();
      }
    }
  }
);
  final Point location=DimensionService.getInstance().getLocation(getDimensionServiceKey(),myProject);
  if (location != null) {
    myPopup.showInScreenCoordinates(myEditor.getContentComponent(),location);
  }
 else {
    myPopup.showCenteredInCurrentWindow(myProject);
  }
  ((AbstractPopup)myPopup).setShowHints(true);
  if (shouldSetWidth) {
    myPopup.setSize(new Dimension(myPreferredWidth + 10,myPopup.getSize().height));
  }
  myAbstractTreeBuilder.expandAll(new Runnable(){
    @Override public void run(){
      IdeFocusManager.getInstance(myProject).requestFocus(myTree,true);
      myAbstractTreeBuilder.queueUpdate().doWhenDone(new Runnable(){
        @Override public void run(){
          selectPsiElement(myInitialPsiElement);
          treeHasBuilt.setDone();
        }
      }
);
    }
  }
);
  if (!ApplicationManager.getApplication().isUnitTestMode()) {
    final Alarm alarm=new Alarm(Alarm.ThreadToUse.SHARED_THREAD,myPopup);
    alarm.addRequest(new Runnable(){
      String filter="";
      @Override public void run(){
        alarm.cancelAllRequests();
        String prefix=mySpeedSearch.getEnteredPrefix();
        myTree.getEmptyText().setText(StringUtil.isEmpty(prefix) ? "Nothing to show" : "Can't find '" + prefix + "'");
        if (prefix == null)         prefix="";
        if (!filter.equals(prefix)) {
          filter=prefix;
          final AccessToken token=ApplicationManager.getApplication().acquireReadActionLock();
          try {
            myAbstractTreeBuilder.refilter(null,false,false).doWhenProcessed(new Runnable(){
              @Override public void run(){
                myTree.repaint();
              }
            }
);
          }
  finally {
            token.finish();
          }
        }
        alarm.addRequest(this,300);
      }
    }
,300);
  }
}
