{
  final ActionCallback treeHasBuilt=new ActionCallback();
  IdeFocusManager.getInstance(myProject).typeAheadUntil(treeHasBuilt);
  JComponent panel=createCenterPanel();
  new MnemonicHelper().register(panel);
  boolean shouldSetWidth=DimensionService.getInstance().getSize(getDimensionServiceKey(),myProject) == null;
  myPopup=JBPopupFactory.getInstance().createComponentPopupBuilder(panel,null).setTitle(myTitle).setResizable(true).setFocusable(true).setMovable(true).setCancelKeyEnabled(false).setDimensionServiceKey(null,getDimensionServiceKey(),false).createPopup();
  Disposer.register(myPopup,this);
  Disposer.register(myPopup,new Disposable(){
    @Override public void dispose(){
      if (!treeHasBuilt.isDone()) {
        treeHasBuilt.setRejected();
      }
    }
  }
);
  myPopup.showCenteredInCurrentWindow(myProject);
  ((AbstractPopup)myPopup).setShowHints(true);
  if (shouldSetWidth) {
    myPopup.setSize(new Dimension(myPrefferedWidth + 10,myPopup.getSize().height));
  }
  myAbstractTreeBuilder.expandAll(new Runnable(){
    @Override public void run(){
      IdeFocusManager.getInstance(myProject).requestFocus(myTree,true);
      myAbstractTreeBuilder.queueUpdate().doWhenDone(new Runnable(){
        @Override public void run(){
          selectPsiElement(getCurrentElement(getPsiFile(myProject)));
          treeHasBuilt.setDone();
        }
      }
);
    }
  }
);
  final Alarm alarm=new Alarm(Alarm.ThreadToUse.SHARED_THREAD,myPopup);
  alarm.addRequest(new Runnable(){
    String filter="";
    @Override public void run(){
      alarm.cancelAllRequests();
      String prefix=mySpeedSearch.getEnteredPrefix();
      myTree.getEmptyText().setText(StringUtil.isEmpty(prefix) ? "Nothing to show" : "Can't find '" + prefix + "'");
      if (prefix == null)       prefix="";
      if (!filter.equals(prefix)) {
        filter=prefix;
        myAbstractTreeBuilder.refilter(null,false,false);
        myTree.repaint();
      }
      alarm.addRequest(this,300);
    }
  }
,300);
}
