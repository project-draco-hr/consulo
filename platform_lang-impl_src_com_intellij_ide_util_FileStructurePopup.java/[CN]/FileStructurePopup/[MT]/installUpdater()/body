{
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    return;
  }
  final Alarm alarm=new Alarm(Alarm.ThreadToUse.SWING_THREAD,myPopup);
  alarm.addRequest(new Runnable(){
    String filter="";
    @Override public void run(){
      alarm.cancelAllRequests();
      String prefix=mySpeedSearch.getEnteredPrefix();
      myTree.getEmptyText().setText(StringUtil.isEmpty(prefix) ? "Nothing to show" : "Can't find '" + prefix + "'");
      if (prefix == null)       prefix="";
      if (!filter.equals(prefix)) {
        final boolean isBackspace=prefix.length() < filter.length();
        filter=prefix;
        myAbstractTreeBuilder.refilter(null,false,false).doWhenProcessed(new Runnable(){
          @Override public void run(){
            SwingUtilities.invokeLater(new Runnable(){
              @Override public void run(){
                myTree.repaint();
                if (isBackspace && handleBackspace(filter)) {
                  return;
                }
                if (myFilteringStructure.getRootElement().getChildren().length == 0) {
                  for (                  JCheckBox box : myCheckBoxes.values()) {
                    if (!box.isSelected()) {
                      myAutoClicked.add(box);
                      myTriggeredCheckboxes.add(0,Pair.create(filter,box));
                      box.doClick();
                      filter="";
                      break;
                    }
                  }
                }
              }
            }
);
          }
        }
);
      }
      if (!alarm.isDisposed()) {
        alarm.addRequest(this,300);
      }
    }
  }
,300);
}
