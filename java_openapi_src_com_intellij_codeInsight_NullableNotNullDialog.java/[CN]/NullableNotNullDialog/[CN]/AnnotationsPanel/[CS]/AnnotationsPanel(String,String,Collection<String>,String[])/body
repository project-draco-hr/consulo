{
  myDefaultAnnotation=defaultAnnotation;
  myDefaultAnnotations=new HashSet(Arrays.asList(defaultAnnotations));
  myList=new JBList(annotations);
  myList.setCellRenderer(new ColoredListCellRenderer(){
    @Override protected void customizeCellRenderer(    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      append((String)value,SimpleTextAttributes.REGULAR_ATTRIBUTES);
      if (value.equals(myDefaultAnnotation)) {
        setIcon(SELECTED_ICON);
      }
 else {
        setIcon(EmptyIcon.ICON_16);
      }
    }
  }
);
  final AnActionButton selectButton=new AnActionButton("Select annotation used for code generation",SELECT_ICON){
    @Override public void actionPerformed(    AnActionEvent e){
      final String selectedValue=(String)myList.getSelectedValue();
      if (selectedValue == null)       return;
      myDefaultAnnotation=selectedValue;
      final DefaultListModel model=(DefaultListModel)myList.getModel();
      model.setElementAt(myList.getSelectedValue(),myList.getSelectedIndex());
    }
    @Override public void updateButton(    AnActionEvent e){
      final String selectedValue=(String)myList.getSelectedValue();
      final boolean enabled=selectedValue != null && !selectedValue.equals(myDefaultAnnotation);
      if (!enabled) {
        e.getPresentation().setEnabled(enabled);
      }
    }
  }
;
  final ToolbarDecorator toolbarDecorator=ToolbarDecorator.createDecorator(myList).disableUpDownActions().setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      chooseAnnotation(name,myList);
    }
  }
).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton anActionButton){
      final String selectedValue=(String)myList.getSelectedValue();
      if (selectedValue == null)       return;
      if (myDefaultAnnotation.equals(selectedValue))       myDefaultAnnotation=(String)myList.getModel().getElementAt(0);
      ((DefaultListModel)myList.getModel()).removeElement(selectedValue);
    }
  }
).addExtraAction(selectButton);
  final JPanel panel=toolbarDecorator.createPanel();
  myComponent=new JPanel(new BorderLayout());
  myComponent.setBorder(IdeBorderFactory.createTitledBorder(name + " annotations",true,false,true,new Insets(10,0,0,0)));
  myComponent.add(panel);
  final AnActionButton removeButton=ToolbarDecorator.findRemoveButton(myComponent);
  myList.addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      if (e.getValueIsAdjusting())       return;
      final String selectedValue=(String)myList.getSelectedValue();
      if (myDefaultAnnotations.contains(selectedValue)) {
        SwingUtilities.invokeLater(new Runnable(){
          @Override public void run(){
            removeButton.setEnabled(false);
          }
        }
);
      }
    }
  }
);
  myList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myList.setSelectedValue(myDefaultAnnotation,true);
}
