{
  final PsiElement parent=place.getParent();
  GroovyResolveResult[] variants=GroovyResolveResult.EMPTY_ARRAY;
  if (parent instanceof GrCallExpression) {
    variants=((GrCallExpression)parent).getMethodVariants();
  }
 else   if (parent instanceof GrConstructorInvocation) {
    final PsiClass clazz=((GrConstructorInvocation)parent).getDelegatedClass();
    if (clazz != null) {
      final PsiMethod[] constructors=clazz.getConstructors();
      variants=new GroovyResolveResult[constructors.length];
      for (int i=0; i < constructors.length; i++) {
        final boolean isAccessible=com.intellij.psi.util.PsiUtil.isAccessible(constructors[i],place,null);
        variants[i]=new GroovyResolveResultImpl(constructors[i],isAccessible);
      }
    }
  }
 else   if (parent instanceof GrApplicationStatement) {
    final GrExpression funExpr=((GrApplicationStatement)parent).getFunExpression();
    if (funExpr instanceof GrReferenceExpression) {
      variants=((GrReferenceExpression)funExpr).getSameNameVariants();
    }
  }
 else   if (place instanceof GrReferenceExpression) {
    variants=((GrReferenceExpression)place).getSameNameVariants();
  }
  context.setItemsToShow(variants);
  context.showHint(place,place.getTextRange().getStartOffset(),this);
}
