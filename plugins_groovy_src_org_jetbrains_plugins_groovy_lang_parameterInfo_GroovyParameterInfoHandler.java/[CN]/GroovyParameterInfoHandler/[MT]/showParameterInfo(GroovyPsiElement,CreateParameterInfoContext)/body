{
  final PsiElement parent=place.getParent();
  GroovyResolveResult[] variants=GroovyResolveResult.EMPTY_ARRAY;
  if (parent instanceof GrCallExpression) {
    variants=((GrCallExpression)parent).getMethodVariants();
  }
 else   if (parent instanceof GrConstructorInvocation) {
    final PsiClass clazz=((GrConstructorInvocation)parent).getDelegatedClass();
    if (clazz != null) {
      final PsiMethod[] constructors=clazz.getConstructors();
      variants=getConstructorResolveResult(constructors,place);
    }
  }
 else   if (parent instanceof GrAnonymousClassDefinition) {
    final PsiElement element=((GrAnonymousClassDefinition)parent).getBaseClassReferenceGroovy().resolve();
    if (element instanceof PsiClass) {
      final PsiMethod[] constructors=((PsiClass)element).getConstructors();
      variants=getConstructorResolveResult(constructors,place);
    }
  }
 else   if (parent instanceof GrApplicationStatement) {
    final GrExpression funExpr=((GrApplicationStatement)parent).getFunExpression();
    if (funExpr instanceof GrReferenceExpression) {
      variants=((GrReferenceExpression)funExpr).getSameNameVariants();
    }
  }
 else   if (place instanceof GrReferenceExpression) {
    variants=((GrReferenceExpression)place).getSameNameVariants();
  }
  final List<GroovyResolveResult> namedElements=ContainerUtil.findAll(variants,new Condition<GroovyResolveResult>(){
    public boolean value(    GroovyResolveResult groovyResolveResult){
      return groovyResolveResult.getElement() instanceof PsiNamedElement;
    }
  }
);
  context.setItemsToShow(namedElements);
  context.showHint(place,place.getTextRange().getStartOffset(),this);
}
