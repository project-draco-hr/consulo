{
  GroovyResolveResult[] variants=ResolveUtil.getCallVariants(place);
  final Condition<GroovyResolveResult> condition=new Condition<GroovyResolveResult>(){
    public boolean value(    GroovyResolveResult groovyResolveResult){
      final PsiElement element=groovyResolveResult.getElement();
      return element instanceof PsiMethod && !groovyResolveResult.isInvokedOnProperty() || element instanceof GrVariable && ((GrVariable)element).getTypeGroovy() instanceof GrClosureType;
    }
  }
;
  final List elementToShow=new ArrayList();
  final PsiElement parent=place.getParent();
  if (parent instanceof GrMethodCall) {
    final GrExpression invoked=((GrMethodCall)parent).getInvokedExpression();
    if (isSimpleMethodInvoked(invoked)) {
      elementToShow.addAll(ContainerUtil.findAll(variants,condition));
    }
 else {
      final PsiType type=invoked.getType();
      if (type instanceof GrClosureType) {
        elementToShow.add(type);
      }
 else       if (type != null) {
        elementToShow.addAll(ContainerUtil.findAll(ResolveUtil.getMethodCandidates(type,"call",place,PsiUtil.getArgumentTypes(place,true)),condition));
      }
    }
  }
 else {
    elementToShow.addAll(Arrays.asList(variants));
  }
  context.setItemsToShow(ArrayUtil.toObjectArray(elementToShow));
  context.showHint(place,place.getTextRange().getStartOffset(),this);
}
