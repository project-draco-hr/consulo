{
  final int currIndex=getCurrentParameterIndex(place,context.getEditor().getCaretModel().getOffset());
  context.setCurrentParameter(currIndex);
  final Object[] objects=context.getObjectsToView();
  Outer:   for (int i=0; i < objects.length; i++) {
    Object object=objects[i];
    final PsiNamedElement namedElement=(PsiNamedElement)object;
    if (!namedElement.isValid()) {
      context.setUIComponentEnabled(i,false);
    }
 else {
      final PsiType[] constructorTypes=PsiUtil.getArgumentTypes(place,true);
      final PsiType[] methodTypes=PsiUtil.getArgumentTypes(place,false);
      if (namedElement instanceof PsiMethod) {
        final PsiMethod method=(PsiMethod)namedElement;
        final PsiParameter[] parameters=method.getParameterList().getParameters();
        PsiType[] argTypes=method.isConstructor() ? constructorTypes : methodTypes;
        if (argTypes == null)         continue;
        if (parameters.length <= currIndex) {
          context.setUIComponentEnabled(i,false);
          continue;
        }
 else {
          for (int j=0; j < currIndex; j++) {
            PsiType argType=argTypes[j];
            final PsiType paramType=TypeConversionUtil.erasure(parameters[j].getType());
            if (!TypesUtil.isAssignable(paramType,argType,place.getManager(),place.getResolveScope())) {
              context.setUIComponentEnabled(i,false);
              break Outer;
            }
          }
        }
        context.setUIComponentEnabled(i,true);
      }
    }
  }
}
