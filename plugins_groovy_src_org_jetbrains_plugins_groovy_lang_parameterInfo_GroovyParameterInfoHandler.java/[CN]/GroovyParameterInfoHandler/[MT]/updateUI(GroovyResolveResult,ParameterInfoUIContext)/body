{
  CodeInsightSettings settings=CodeInsightSettings.getInstance();
  PsiNamedElement element=(PsiNamedElement)resolveResult.getElement();
  if (element == null || !element.isValid()) {
    context.setUIComponentEnabled(false);
    return;
  }
  int highlightStartOffset=-1;
  int highlightEndOffset=-1;
  StringBuffer buffer=new StringBuffer();
  if (element instanceof PsiMethod) {
    final PsiMethod method=(PsiMethod)element;
    if (settings.SHOW_FULL_SIGNATURES_IN_PARAMETER_INFO) {
      if (!method.isConstructor()) {
        PsiType returnType=PsiUtil.getSmartReturnType(method);
        if (returnType != null) {
          buffer.append(returnType.getPresentableText());
          buffer.append(" ");
        }
      }
      buffer.append(element.getName());
      buffer.append("(");
    }
    final int currentParameter=context.getCurrentParameterIndex();
    PsiParameter[] parms=method.getParameterList().getParameters();
    if (resolveResult.getCurrentFileResolveContext() instanceof GrMethodCallExpression) {
      parms=ArrayUtil.remove(parms,0);
    }
    int numParams=parms.length;
    if (numParams > 0) {
      final PsiSubstitutor substitutor=resolveResult.getSubstitutor();
      for (int j=0; j < numParams; j++) {
        PsiParameter parm=parms[j];
        int startOffset=buffer.length();
        appendParameterText(parm,substitutor,buffer);
        int endOffset=buffer.length();
        if (j < numParams - 1) {
          buffer.append(", ");
        }
        if (context.isUIComponentEnabled() && (j == currentParameter || (j == numParams - 1 && parm.isVarArgs() && currentParameter >= numParams))) {
          highlightStartOffset=startOffset;
          highlightEndOffset=endOffset;
        }
      }
    }
 else {
      buffer.append("no parameters");
    }
    if (settings.SHOW_FULL_SIGNATURES_IN_PARAMETER_INFO) {
      buffer.append(")");
    }
  }
 else   if (element instanceof PsiClass) {
    buffer.append("no parameters");
  }
 else   if (element instanceof GrVariable) {
    final PsiElement parent=context.getParameterOwner().getParent();
    if (parent == null || !parent.isValid()) {
      context.setUIComponentEnabled(false);
      return;
    }
    final PsiType type;
    if (parent instanceof GrMethodCallExpression) {
      type=((GrMethodCallExpression)parent).getInvokedExpression().getType();
    }
 else {
      type=((GrVariable)element).getTypeGroovy();
    }
    if (type instanceof GrClosureType) {
      GrClosureParameter[] parameters=((GrClosureType)type).getSignature().getParameters();
      if (parameters.length > 0) {
        for (int i=0; i < parameters.length; i++) {
          if (i > 0)           buffer.append(", ");
          final PsiType psiType=parameters[i].getType();
          if (psiType == null) {
            buffer.append("def");
          }
 else {
            buffer.append(psiType.getPresentableText());
          }
          final GrExpression initializer=parameters[i].getDefaultInitializer();
          if (initializer != null) {
            buffer.append(" = ").append(initializer.getText());
          }
        }
      }
 else {
        buffer.append("no parameters");
      }
    }
  }
  final boolean isDeprecated=resolveResult instanceof PsiDocCommentOwner && ((PsiDocCommentOwner)resolveResult).isDeprecated();
  context.setupUIComponentPresentation(buffer.toString(),highlightStartOffset,highlightEndOffset,!context.isUIComponentEnabled(),isDeprecated,false,context.getDefaultParameterColor());
}
