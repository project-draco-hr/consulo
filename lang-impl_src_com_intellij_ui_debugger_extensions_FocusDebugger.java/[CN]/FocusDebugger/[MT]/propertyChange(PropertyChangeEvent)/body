{
  final Object newValue=evt.getNewValue();
  final Object oldValue=evt.getOldValue();
  boolean affectsDebugger=false;
  if (newValue instanceof Component && isInsideDebuggerDialog((Component)newValue)) {
    affectsDebugger|=true;
  }
  if (oldValue instanceof Component && isInsideDebuggerDialog((Component)oldValue)) {
    affectsDebugger|=true;
  }
  final SimpleColoredText text=new SimpleColoredText();
  text.append(evt.getPropertyName(),maybeGrayOut(new SimpleTextAttributes(SimpleTextAttributes.STYLE_UNDERLINE,null),affectsDebugger));
  text.append(" newValue=",maybeGrayOut(SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES,affectsDebugger));
  text.append(evt.getNewValue() + "",maybeGrayOut(SimpleTextAttributes.REGULAR_ATTRIBUTES,affectsDebugger));
  text.append(" oldValue=" + evt.getOldValue(),maybeGrayOut(SimpleTextAttributes.REGULAR_ATTRIBUTES,affectsDebugger));
  myLogModel.addElement(new FocusElement(text,new Throwable()));
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      if (myLog != null && myLog.isShowing()) {
        final int h=myLog.getFixedCellHeight();
        myLog.scrollRectToVisible(new Rectangle(0,myLog.getPreferredSize().height - h,myLog.getWidth(),h));
        if (myLog.getModel().getSize() > 0) {
          myLog.setSelectedIndex(myLog.getModel().getSize() - 1);
        }
      }
    }
  }
);
}
