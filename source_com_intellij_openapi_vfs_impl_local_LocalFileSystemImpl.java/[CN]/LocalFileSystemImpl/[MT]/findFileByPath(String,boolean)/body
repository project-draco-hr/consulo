{
  if (SystemInfo.isWindows || SystemInfo.isOS2) {
    if (path.endsWith(":/")) {
      path=Character.toUpperCase(path.charAt(0)) + path.substring(1);
    }
  }
synchronized (LOCK) {
    for (    VirtualFile root : myRoots) {
      String rootPath=root.getPath();
      if (!FileUtil.startsWith(path,rootPath))       continue;
      if (path.length() == rootPath.length())       return root;
      String tail;
      if (path.charAt(rootPath.length()) == '/') {
        tail=path.substring(rootPath.length() + 1);
      }
 else       if (StringUtil.endsWithChar(rootPath,'/')) {
        tail=path.substring(rootPath.length());
      }
 else {
        continue;
      }
      StringTokenizer tokenizer=new StringTokenizer(tail,"/");
      while (tokenizer.hasMoreTokens()) {
        final String name=tokenizer.nextToken();
        if (".".equals(name))         continue;
        if ("..".equals(name)) {
          root=root.getParent();
        }
 else {
          if (!createIfNoCache && !((VirtualFileImpl)root).areChildrenCached())           return null;
          if (!root.isDirectory())           return null;
          root=root.findChild(name);
        }
        if (root == null)         return null;
      }
      return root;
    }
    boolean isPhysicalRoot=isPhysicalRoot(path);
    File file=new File(path.replace('/',File.separatorChar));
    boolean exists;
    if (!isPhysicalRoot) {
      exists=file.exists();
    }
 else {
      exists=true;
    }
    if (!isPhysicalRoot && exists) {
      String newPath=getCanonicalPath(file);
      if (newPath == null)       return null;
      newPath=newPath.replace(File.separatorChar,'/');
      if (!path.equals(newPath))       return findFileByPath(newPath,createIfNoCache);
    }
    if (!createIfNoCache)     return null;
    if (!isPhysicalRoot && !exists)     return null;
    VirtualFileImpl newRoot=new VirtualFileImpl(this,path);
    for (int i=0; i < myRoots.size(); i++) {
      VirtualFile root=myRoots.get(i);
      String rootPath=root.getPath();
      if (!FileUtil.startsWith(rootPath,path))       continue;
      if (rootPath.length() == path.length())       return root;
      String tail;
      if (rootPath.charAt(path.length()) == '/') {
        tail=rootPath.substring(path.length() + 1);
      }
 else       if (StringUtil.endsWithChar(path,'/')) {
        tail=rootPath.substring(path.length());
      }
 else {
        continue;
      }
      StringTokenizer tokenizer=new StringTokenizer(tail,"/");
      VirtualFileImpl vFile=newRoot;
      while (tokenizer.hasMoreTokens()) {
        String name=tokenizer.nextToken();
        VirtualFile child=vFile.findChild(name);
        if (child == null)         break;
        if (!tokenizer.hasMoreTokens()) {
          vFile.replaceChild((VirtualFileImpl)child,(VirtualFileImpl)root);
          ((VirtualFileImpl)root).setParent(vFile);
          myRoots.remove(i);
          i--;
        }
        vFile=(VirtualFileImpl)child;
      }
    }
    myRoots.add(newRoot);
    updateFileWatcher();
    return newRoot;
  }
}
