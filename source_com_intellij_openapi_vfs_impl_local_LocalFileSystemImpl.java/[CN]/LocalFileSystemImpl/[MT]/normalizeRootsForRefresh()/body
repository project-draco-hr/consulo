{
  if (myCachedNormalizedRequests != null)   return myCachedNormalizedRequests;
  List<WatchRequest> result=new ArrayList<WatchRequest>();
synchronized (LOCK) {
    NextRoot:     for (Iterator<WatchRequest> iterator=myRootsToWatch.iterator(); iterator.hasNext(); ) {
      WatchRequest request=iterator.next();
      VirtualFile root=request.getRoot();
      if (!root.isValid())       iterator.remove();
      boolean recursively=request.isToWatchRecursively();
      for (Iterator<WatchRequest> iterator1=result.iterator(); iterator1.hasNext(); ) {
        final WatchRequest otherRequest=iterator1.next();
        final VirtualFile otherRoot=otherRequest.getRoot();
        final boolean otherRecursively=otherRequest.isToWatchRecursively();
        if (root.equals(otherRoot) || (VfsUtil.isAncestor(otherRoot,root,true) && otherRecursively)) {
          continue NextRoot;
        }
 else         if (VfsUtil.isAncestor(root,otherRoot,true) && recursively) {
          iterator1.remove();
        }
      }
      result.add(request);
    }
  }
  myCachedNormalizedRequests=result.toArray(new WatchRequest[result.size()]);
  return myCachedNormalizedRequests;
}
