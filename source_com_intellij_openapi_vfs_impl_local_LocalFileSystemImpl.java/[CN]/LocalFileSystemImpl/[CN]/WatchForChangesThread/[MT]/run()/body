{
  updateFileWatcher();
  while (true) {
    FileWatcher.ChangeInfo[] infos=FileWatcher.waitForChange();
    if (infos == null) {
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        public void run(){
synchronized (LOCK) {
            String[] dirPaths=new String[myRoots.size()];
            for (int i=0; i < myRoots.size(); i++) {
              VirtualFile root=myRoots.get(i);
              dirPaths[i]=root.getPath();
            }
            final Vector<String> watchManual=new Vector<String>();
            int numDir=FileWatcher.setup(dirPaths,true,watchManual);
            if (numDir == 0) {
              try {
                FileWatcher.setup(new String[]{FileUtil.getTempDirectory()},true,new Vector());
              }
 catch (              IOException e) {
                LOG.error(e);
              }
            }
            myFilesToWatchManual.clear();
            for (int i=0; i < watchManual.size(); i++) {
              String path=watchManual.elementAt(i);
              path=path.replace(File.separatorChar,'/');
              VirtualFile file=findFileByPath(path);
              if (file != null) {
                myFilesToWatchManual.add(file);
              }
            }
          }
        }
      }
);
    }
 else {
      for (      FileWatcher.ChangeInfo info : infos) {
        String path=info.getFilePath();
        int changeType=info.getChangeType();
        if (changeType == FileWatcher.FILE_MODIFIED) {
synchronized (myDirtyFiles) {
            myDirtyFiles.add(path);
          }
        }
 else         if (changeType == FileWatcher.FILE_ADDED) {
synchronized (myDirtyFiles) {
            String parent=new File(path).getParent();
            if (parent != null) {
              myDirtyFiles.add(parent);
            }
          }
        }
 else         if (changeType == FileWatcher.FILE_REMOVED || changeType == FileWatcher.FILE_RENAMED_OLD_NAME) {
synchronized (myDeletedFiles) {
            myDeletedFiles.add(path);
          }
        }
      }
    }
  }
}
