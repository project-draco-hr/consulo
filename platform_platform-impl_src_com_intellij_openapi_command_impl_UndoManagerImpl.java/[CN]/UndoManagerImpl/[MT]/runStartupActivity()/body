{
  myEditorProvider=new FocusBasedCurrentEditorProvider();
  CommandListener commandListener=new CommandAdapter(){
    private boolean myStarted=false;
    public void commandStarted(    CommandEvent event){
      onCommandStarted(event.getProject(),event.getUndoConfirmationPolicy());
    }
    public void commandFinished(    CommandEvent event){
      onCommandFinished(event.getProject(),event.getCommandName(),event.getCommandGroupId());
    }
    public void undoTransparentActionStarted(){
      if (!isInsideCommand()) {
        myStarted=true;
        onCommandStarted(myProject,UndoConfirmationPolicy.DEFAULT);
      }
    }
    public void undoTransparentActionFinished(){
      if (myStarted) {
        myStarted=false;
        onCommandFinished(myProject,"",null);
      }
    }
  }
;
  myCommandProcessor.addCommandListener(commandListener,this);
  Disposer.register(this,new DocumentUndoProvider(myProject));
  myUndoProviders=myProject == null ? Extensions.getExtensions(UndoProvider.EP_NAME) : Extensions.getExtensions(UndoProvider.PROJECT_EP_NAME,myProject);
  for (  UndoProvider undoProvider : myUndoProviders) {
    if (undoProvider instanceof Disposable) {
      Disposer.register(this,(Disposable)undoProvider);
    }
  }
}
