{
  final boolean[] changes=new boolean[1];
  final Node root=new Node("root",null){
    @Override Node[] getChildren(){
      if (changes[0]) {
        return new Node[]{new Node("node1",this,"node1id","changedNode1"){
          @Override Node[] getChildren(){
            return new Node[]{new Node("newNode11",this,"node11id"),new Node("node13",this,"node13id")};
          }
        }
,new Node("node2",this,"node2id")};
      }
 else {
        return new Node[]{new Node("node1",this,"node1id"){
          @Override Node[] getChildren(){
            return new Node[]{new Node("node11",this,"node11id"),new Node("node12",this,"node12id")};
          }
        }
,new Node("node2",this,"node2id")};
      }
    }
  }
;
  initTree(root);
  updateFromRoot();
  assertTree("-root\n" + " -node1\n" + "  node11\n"+ "  node12\n"+ " node2\n");
  collapsePath(new TreePath(myTreeModel.getRoot()));
  getBuilder().expand(root,null);
  assertTree("-root\n" + " -node1\n" + "  node11\n"+ "  node12\n"+ " node2\n");
  updateFromRoot();
  assertTree("-root\n" + " -node1\n" + "  node11\n"+ "  node12\n"+ " node2\n");
  changes[0]=true;
  updateFromRoot();
  assertTree("-root\n" + " -node1\n" + "  newNode11\n"+ "  node13\n"+ " node2\n");
}
