{
  myStructure=new BaseStructure(){
    @Override public Object getRootElement(){
      return root;
    }
    @Override public Object[] doGetChildElements(    final Object element){
      return ((Node)element).getChildren();
    }
    @Override public Object getParentElement(    final Object element){
      return ((Node)element).getParent();
    }
    @Override @NotNull public NodeDescriptor doCreateDescriptor(    final Object element,    final NodeDescriptor parentDescriptor){
      return (NodeDescriptor)element;
    }
    @Override public void commit(){
    }
    @Override public boolean hasSomethingToCommit(){
      return false;
    }
  }
;
  myTreeModel=new DefaultTreeModel(new DefaultMutableTreeNode());
  myTree=new Tree(myTreeModel);
  myTree.setRootVisible(false);
  initBuilder(new BaseTreeBuilder(myTree,myTreeModel,myStructure,AlphaComparator.INSTANCE){
    @Override protected boolean isAutoExpandNode(    final NodeDescriptor nodeDescriptor){
      return true;
    }
    @Override protected boolean isDisposeOnCollapsing(    final NodeDescriptor nodeDescriptor){
      return false;
    }
  }
);
  Disposer.register(getRootDisposable(),getBuilder());
  showTree();
}
