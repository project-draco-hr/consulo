{
  PsiSubstitutor result=getSuperMethodSignatureSubstitutorImpl(methodSignature,superMethodSignature);
  if (result == null)   return null;
  PsiTypeParameter[] methoTypeParameters=methodSignature.getTypeParameters();
  PsiTypeParameter[] superTypeParameters=superMethodSignature.getTypeParameters();
  PsiSubstitutor methodSubstitutor=methodSignature.getSubstitutor();
  for (int i=0; i < methoTypeParameters.length; i++) {
    PsiTypeParameter methoTypeParameter=methoTypeParameters[i];
    PsiTypeParameter superTypeParameter=superTypeParameters[i];
    final PsiClassType[] methoSupers=methoTypeParameter.getSuperTypes();
    final PsiClassType[] superSupers=superTypeParameter.getSuperTypes();
    if (methoSupers.length != superSupers.length)     return null;
    for (int j=0; j < methoSupers.length; j++) {
      PsiType type1=methodSubstitutor.substitute(methoSupers[j]);
      PsiType type2=methodSubstitutor.substitute(PsiUtil.captureToplevelWildcards(result.substitute(superSupers[j]),methoTypeParameter));
      if (!type1.equals(type2))       return null;
    }
  }
  return result;
}
