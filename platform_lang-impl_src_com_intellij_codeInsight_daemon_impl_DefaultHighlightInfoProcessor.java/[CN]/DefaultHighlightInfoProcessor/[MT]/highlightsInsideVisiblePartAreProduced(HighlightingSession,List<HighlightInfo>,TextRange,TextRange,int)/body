{
  final PsiFile psiFile=session.getPsiFile();
  final Project project=psiFile.getProject();
  final Document document=PsiDocumentManager.getInstance(project).getDocument(psiFile);
  if (document == null)   return;
  final long modificationStamp=document.getModificationStamp();
  final TextRange priorityIntersection=priorityRange.intersection(restrictRange);
  final Editor editor=session.getEditor();
  UIUtil.invokeLaterIfNeeded(new Runnable(){
    @Override public void run(){
      if (project.isDisposed() || modificationStamp != document.getModificationStamp())       return;
      if (priorityIntersection != null) {
        MarkupModel markupModel=DocumentMarkupModel.forDocument(document,project,true);
        EditorColorsScheme scheme=session.getColorsScheme();
        UpdateHighlightersUtil.setHighlightersInRange(project,document,priorityIntersection,scheme,infos,(MarkupModelEx)markupModel,groupId);
      }
      if (editor != null && !editor.isDisposed()) {
        new ShowAutoImportPass(project,psiFile,editor).applyInformationToEditor();
        DaemonListeners.repaintErrorStripeRenderer(editor,project);
      }
    }
  }
);
}
