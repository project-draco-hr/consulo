{
  if (e instanceof RunCanceledByUserException)   return;
  String title=ExecutionBundle.message("error.running.configuration.with.error.error.message",taskName);
  String message=e.getMessage();
  NotificationDisplayType type=NotificationDisplayType.BALLOON;
  NotificationListener listener=null;
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    LOG.error(message + ":" + message);
  }
 else {
    if (message.contains("87") && e instanceof ProcessNotCreatedException) {
      final String commandLineString=((ProcessNotCreatedException)e).getCommandLine().getCommandLineString();
      if (commandLineString.length() > 1024 * 32) {
        type=NotificationDisplayType.STICKY_BALLOON;
        message+="\n" + "Command line is too long. In order to reduce its length classpath file can be used.<br>" + "Would you like to enable classpath file mode for all run configurations of your project?<br>"+ "<a href=\"\">Enable</a>";
        listener=new NotificationListener(){
          public void hyperlinkUpdate(          @NotNull Notification notification,          @NotNull HyperlinkEvent event){
            PropertiesComponent.getInstance(project).setValue("dynamic.classpath","true");
            notification.expire();
          }
        }
;
      }
    }
  }
  Notification n=new Notification(NOTIFICATION_GROUP_ID,title,message,NotificationType.ERROR,listener);
  Notifications.Bus.notify(n,type,project);
}
