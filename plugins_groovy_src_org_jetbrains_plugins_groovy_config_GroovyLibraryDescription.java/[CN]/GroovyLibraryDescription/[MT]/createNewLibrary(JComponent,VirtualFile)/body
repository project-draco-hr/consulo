{
  VirtualFile initial=findFile(System.getenv(myEnvVariable));
  if (initial == null && GROOVY_FRAMEWORK_NAME.equals(myFrameworkName) && SystemInfo.isLinux) {
    initial=findFile("/usr/share/groovy");
  }
  final FileChooserDescriptor descriptor=new FileChooserDescriptor(false,true,false,false,false,false){
    @Override public boolean isFileSelectable(    VirtualFile file){
      if (!super.isFileSelectable(file)) {
        return false;
      }
      return findManager(file) != null;
    }
  }
;
  descriptor.setTitle(myFrameworkName + " SDK");
  descriptor.setDescription("Choose a directory containing " + myFrameworkName + " distribution");
  final VirtualFile[] files=FileChooser.chooseFiles(parentComponent,descriptor,initial);
  if (files.length != 1)   return null;
  final VirtualFile dir=files[0];
  final GroovyLibraryPresentationProviderBase provider=findManager(dir);
  if (provider == null) {
    return null;
  }
  final String path=dir.getPath();
  final String sdkVersion=provider.getSDKVersion(path);
  if (AbstractConfigUtils.UNDEFINED_VERSION.equals(sdkVersion)) {
    return null;
  }
  return new NewLibraryConfiguration(provider.getLibraryPrefix() + "-" + sdkVersion){
    @Override public void addRoots(    @NotNull LibraryEditor editor){
      provider.fillLibrary(path,editor);
    }
  }
;
}
