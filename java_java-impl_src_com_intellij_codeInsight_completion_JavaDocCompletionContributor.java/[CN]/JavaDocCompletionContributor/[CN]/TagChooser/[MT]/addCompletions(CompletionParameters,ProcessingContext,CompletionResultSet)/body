{
  List<String> ret=new ArrayList<String>();
  final PsiElement position=parameters.getPosition();
  final PsiDocComment comment=PsiTreeUtil.getParentOfType(position,PsiDocComment.class);
  final PsiElement parent=comment.getContext();
  final boolean isInline=position.getContext() instanceof PsiInlineDocTag;
  final JavadocManager manager=JavadocManager.SERVICE.getInstance(position.getProject());
  final JavadocTagInfo[] infos=manager.getTagInfos(parent);
  for (  JavadocTagInfo info : infos) {
    if (info.getName().equals(SuppressionUtil.SUPPRESS_INSPECTIONS_TAG_NAME))     continue;
    if (isInline != (info.isInline()))     continue;
    ret.add(info.getName());
  }
  InspectionProfile inspectionProfile=InspectionProjectProfileManager.getInstance(position.getProject()).getInspectionProfile();
  final InspectionProfileEntry inspectionTool=inspectionProfile.getInspectionTool(JavaDocLocalInspection.SHORT_NAME,position);
  JavaDocLocalInspection inspection=(JavaDocLocalInspection)((LocalInspectionToolWrapper)inspectionTool).getTool();
  final StringTokenizer tokenizer=new StringTokenizer(inspection.myAdditionalJavadocTags,", ");
  while (tokenizer.hasMoreTokens()) {
    ret.add(tokenizer.nextToken());
  }
  for (  final String s : ret) {
    if (isInline) {
      result.addElement(TailTypeDecorator.withInsertHandler(LookupElementBuilder.create(s),new InlineInsertHandler()));
    }
 else {
      result.addElement(TailTypeDecorator.withTail(LookupElementBuilder.create(s),TailType.SPACE));
    }
  }
}
