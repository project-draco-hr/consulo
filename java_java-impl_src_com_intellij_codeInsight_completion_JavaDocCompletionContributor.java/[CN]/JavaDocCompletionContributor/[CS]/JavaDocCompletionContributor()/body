{
  extend(CompletionType.BASIC,PsiJavaPatterns.psiElement(PsiDocToken.DOC_TAG_NAME),new TagChooser());
  extend(CompletionType.BASIC,PsiJavaPatterns.psiElement().inside(PsiDocTagValue.class),new CompletionProvider<CompletionParameters>(true){
    protected void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext context,    @NotNull final CompletionResultSet result){
      final PsiElement position=parameters.getPosition();
      boolean isArg=PsiJavaPatterns.psiElement().afterLeaf("(").accepts(position);
      PsiDocTag tag=PsiTreeUtil.getParentOfType(position,PsiDocTag.class);
      boolean onlyConstants=!isArg && tag != null && tag.getName().equals(VALUE_TAG);
      final PsiReference ref=position.getContainingFile().findReferenceAt(parameters.getOffset());
      if (ref instanceof PsiJavaReference) {
        result.stopHere();
        final JavaCompletionProcessor processor=new JavaCompletionProcessor(position,TrueFilter.INSTANCE,false,null);
        ((PsiJavaReference)ref).processVariants(processor);
        for (        final CompletionElement _item : processor.getResults()) {
          final Object element=_item.getElement();
          LookupItem item=element instanceof PsiMethod ? new JavaMethodCallElement((PsiMethod)element){
            @Override public void handleInsert(            InsertionContext context){
              new MethodSignatureInsertHandler().handleInsert(context,this);
            }
          }
 : (LookupItem)LookupItemUtil.objectToLookupItem(element);
          if (onlyConstants) {
            Object o=item.getObject();
            if (!(o instanceof PsiField))             continue;
            PsiField field=(PsiField)o;
            if (!(field.hasModifierProperty(PsiModifier.STATIC) && field.getInitializer() != null && JavaConstantExpressionEvaluator.computeConstantExpression(field.getInitializer(),false) != null))             continue;
          }
          item.putUserData(LookupItem.FORCE_SHOW_SIGNATURE_ATTR,Boolean.TRUE);
          if (isArg) {
            item.setAutoCompletionPolicy(AutoCompletionPolicy.NEVER_AUTOCOMPLETE);
          }
          result.addElement(item);
        }
      }
    }
  }
);
}
