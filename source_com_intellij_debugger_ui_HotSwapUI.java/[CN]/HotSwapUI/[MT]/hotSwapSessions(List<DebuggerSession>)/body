{
  final boolean askBeforeHotswap=myAskBeforeHotswap;
  myAskBeforeHotswap=true;
  PsiDocumentManager.getInstance(myProject).commitAllDocuments();
  new Thread(){
    public void run(){
      final HashMap<DebuggerSession,HashMap<String,HotSwapFile>> modifiedClasses=getModifiedClasses(sessions);
      if (modifiedClasses.isEmpty())       return;
      final HashMap<DebuggerSession,HashMap<String,HotSwapFile>> classesToReload=new HashMap<DebuggerSession,HashMap<String,HotSwapFile>>();
      if (askBeforeHotswap) {
        String runHotswap=DebuggerSettings.getInstance().RUN_HOTSWAP_AFTER_COMPILE;
        if (DebuggerSettings.RUN_HOTSWAP_ALWAYS.equals(runHotswap)) {
          classesToReload.putAll(modifiedClasses);
        }
 else         if (DebuggerSettings.RUN_HOTSWAP_NEVER.equals(runHotswap)) {
        }
 else {
          ApplicationManager.getApplication().invokeAndWait(new Runnable(){
            public void run(){
              RunHotswapDialog dialog=new RunHotswapDialog(myProject,sessions);
              dialog.show();
              if (dialog.isOK()) {
                for (Iterator<DebuggerSession> iterator=dialog.getSessionsToReload().iterator(); iterator.hasNext(); ) {
                  DebuggerSession debuggerSession=iterator.next();
                  classesToReload.put(debuggerSession,modifiedClasses.get(debuggerSession));
                }
              }
            }
          }
,ApplicationManager.getApplication().getDefaultModalityState());
        }
      }
 else {
        classesToReload.putAll(modifiedClasses);
      }
      reloadModifiedClasses(classesToReload);
    }
  }
.start();
}
