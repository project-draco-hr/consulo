{
  final InputStream stderr=process.getErrorStream();
  final InputStream stdout=process.getInputStream();
  final Reader errReader=new InputStreamReader(stderr);
  final Reader outReader=new InputStreamReader(stdout);
  final StringBuilder err=new StringBuilder();
  final StringBuilder out=new StringBuilder();
  final CharBuffer buffer=CharBuffer.allocate(1024);
  int curOutIndex=0;
  while (true) {
    while (stderr.available() > 0) {
      final int count=errReader.read(buffer);
      err.append(buffer.array(),0,count);
    }
    while (stdout.available() > 0) {
      final int count=outReader.read(buffer);
      out.append(buffer.array(),0,count);
    }
    if (err.length() > 0) {
      if (result.isNull()) {
        break;
      }
      System.out.println(err);
      err.setLength(0);
    }
    if (out.length() > 0) {
      int nlIndex;
      while ((nlIndex=out.indexOf("\n",curOutIndex)) >= 0) {
        final String text=out.substring(curOutIndex,nlIndex);
        curOutIndex=nlIndex + 1;
        if (text.startsWith(PORT_ID_PREFIX)) {
          final String pair=text.substring(PORT_ID_PREFIX.length()).trim();
          final int idx=pair.indexOf("/");
          final int port=Integer.parseInt(pair.substring(0,idx));
          final String name=pair.substring(idx + 1);
          System.out.println("Connecting to: localhost:" + port + ". Looking up: "+ name);
synchronized (result) {
            result.set(Pair.create(port,name));
            result.notifyAll();
          }
        }
      }
      curOutIndex=0;
      out.setLength(0);
    }
    Thread.sleep(1000L);
  }
  System.out.println("Destroying process");
  process.destroy();
  if (result.isNull()) {
synchronized (result) {
      result.notifyAll();
    }
  }
}
