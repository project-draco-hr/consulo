{
  final ProjectFileIndex projectFileIndex=ProjectRootManager.getInstance(getProject()).getFileIndex();
  getScope().accept(new PsiRecursiveElementVisitor(){
    @Override public void visitFile(    PsiFile file){
      if (file instanceof PsiJavaFile) {
        PsiJavaFile psiJavaFile=(PsiJavaFile)file;
        if (getScope().contains(psiJavaFile)) {
          final PsiPackage aPackage=findPackage(psiJavaFile.getPackageName());
          if (aPackage != null) {
            myPackages.put(psiJavaFile.getPackageName(),aPackage);
          }
        }
        final Set<PsiPackage> packs=getPackageHierarhy(psiJavaFile.getPackageName());
        final ForwardDependenciesBuilder builder=new ForwardDependenciesBuilder(getProject(),new AnalysisScope(psiJavaFile));
        builder.setTotalFileCount(getScope().getFileCount());
        builder.setInitialFileCount(++myFileCount);
        builder.analyze();
        final Set<PsiFile> psiFiles=builder.getDependencies().get(psiJavaFile);
        if (psiFiles == null)         return;
        for (        PsiPackage pack : packs) {
          Set<PsiPackage> pack2Packages=myPackageDependencies.get(pack);
          if (pack2Packages == null) {
            pack2Packages=new HashSet<PsiPackage>();
            myPackageDependencies.put(pack,pack2Packages);
          }
          for (          PsiFile psiFile : psiFiles) {
            if (!(psiFile instanceof PsiJavaFile) || !projectFileIndex.isInSourceContent(psiFile.getVirtualFile()) || !getScope().contains(psiFile)) {
              continue;
            }
            final String packageName=((PsiJavaFile)psiFile).getPackageName();
            if (packageName.startsWith(pack.getQualifiedName())) {
              continue;
            }
            final PsiPackage depPackage=findPackage(packageName);
            if (depPackage == null) {
              continue;
            }
            pack2Packages.add(depPackage);
            constractFilesInDependenciesPackagesMap(pack,depPackage,psiFile,myFilesInDependentPackages);
            constractFilesInDependenciesPackagesMap(depPackage,pack,psiJavaFile,myBackwardFilesInDependentPackages);
            constractWholeDependenciesMap(psiJavaFile,psiFile);
          }
        }
      }
    }
  }
);
  ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
  if (indicator != null) {
    if (indicator.isCanceled()) {
      throw new ProcessCanceledException();
    }
    indicator.setText(AnalysisScopeBundle.message("cyclic.dependencies.progress.text"));
    indicator.setText2("");
    indicator.setIndeterminate(true);
  }
  myCyclicDependencies=getCycles(myPackages.values());
}
