{
  String id=element.getAttributeValue("ixBug");
  String title=element.getChildTextTrim("sTitle");
  TaskType type=getType(element);
  LocalTaskImpl task=new LocalTaskImpl(id,title){
    @Nullable @Override public String getDescription(){
      return null;
    }
    @NotNull @Override @SuppressWarnings("unchecked") public Comment[] getComments(){
      List<Element> nodes;
      try {
        nodes=commentPath.selectNodes(element);
      }
 catch (      Exception e) {
        throw new RuntimeException("Error selecting comment nodes",e);
      }
      List<Comment> comments=ContainerUtil.mapNotNull(nodes,new NotNullFunction<Element,Comment>(){
        @NotNull @Override public Comment fun(        Element element){
          return createComment(element);
        }
        private Comment createComment(        final Element element){
          return new Comment(){
            @Override public String getText(){
              return element.getChildTextTrim("s");
            }
            @Nullable @Override public String getAuthor(){
              return element.getChildTextTrim("sPerson");
            }
            @Nullable @Override public Date getDate(){
              return parseDate(element.getChildTextTrim("dt"));
            }
          }
;
        }
      }
);
      return comments.toArray(new Comment[comments.size()]);
    }
    @Nullable @Override public Date getUpdated(){
      return parseDate(element.getChildText("dtLastUpdated"));
    }
    @Nullable @Override public Date getCreated(){
      return parseDate(element.getChildTextTrim("dtOpened"));
    }
    @Override public boolean isClosed(){
      return !Boolean.valueOf(element.getChildTextTrim("fOpen"));
    }
    @Override public boolean isIssue(){
      return true;
    }
    @Nullable @Override public String getIssueUrl(){
      return getUrl() + "/default.asp?" + getId();
    }
  }
;
  task.setType(type);
  return task;
}
