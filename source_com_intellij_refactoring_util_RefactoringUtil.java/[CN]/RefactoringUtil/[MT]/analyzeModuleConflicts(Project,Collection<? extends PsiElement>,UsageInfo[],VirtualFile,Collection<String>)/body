{
  if (scopes == null)   return;
  for (  final PsiElement scope : scopes) {
    if (scope instanceof PsiPackage || scope instanceof PsiDirectory)     return;
  }
  final Module targetModule=ModuleUtil.getModuleForFile(project,vFile);
  if (targetModule == null)   return;
  final GlobalSearchScope resolveScope=GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(targetModule);
  final HashSet<PsiElement> reported=new HashSet<PsiElement>();
  for (  final PsiElement scope : scopes) {
    scope.accept(new PsiRecursiveElementVisitor(){
      public void visitReferenceElement(      PsiJavaCodeReferenceElement reference){
        super.visitReferenceElement(reference);
        final PsiElement resolved=reference.resolve();
        if (resolved != null && !reported.contains(resolved) && !isAncestor(resolved,scopes) && !PsiSearchScopeUtil.isInScope(resolveScope,resolved)) {
          final String scopeDescription=ConflictsUtil.htmlEmphasize(ConflictsUtil.getDescription(ConflictsUtil.getContainer(reference),true));
          final String message=RefactoringBundle.message("0.referenced.in.1.will.not.be.accessible.in.module.2",ConflictsUtil.capitalize(ConflictsUtil.htmlEmphasize(ConflictsUtil.getDescription(resolved,true))),scopeDescription,ConflictsUtil.htmlEmphasize(targetModule.getName()));
          conflicts.add(message);
          reported.add(resolved);
        }
      }
    }
);
  }
  NextUsage:   for (  UsageInfo usage : usages) {
    if (usage instanceof MoveRenameUsageInfo) {
      final MoveRenameUsageInfo moveRenameUsageInfo=((MoveRenameUsageInfo)usage);
      final PsiElement element=usage.getElement();
      if (element != null && PsiTreeUtil.getParentOfType(element,PsiImportStatement.class,false) == null) {
        for (        PsiElement scope : scopes) {
          if (PsiTreeUtil.isAncestor(scope,element,false))           continue NextUsage;
        }
        final GlobalSearchScope resolveScope1=element.getResolveScope();
        if (!resolveScope1.isSearchInModuleContent(targetModule)) {
          final PsiMember container=ConflictsUtil.getContainer(element);
          LOG.assertTrue(container != null);
          final String scopeDescription=ConflictsUtil.htmlEmphasize(ConflictsUtil.getDescription(container,true));
          Module module=ProjectRootManager.getInstance(project).getFileIndex().getModuleForFile(element.getContainingFile().getVirtualFile());
          final String message=RefactoringBundle.message("0.referenced.in.1.will.not.be.accessible.from.module.2",ConflictsUtil.capitalize(ConflictsUtil.htmlEmphasize(ConflictsUtil.getDescription(moveRenameUsageInfo.referencedElement,true))),scopeDescription,ConflictsUtil.htmlEmphasize(module.getName()));
          conflicts.add(message);
        }
      }
    }
  }
}
