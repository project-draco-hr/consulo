{
  PsiType type=expr.getType();
  if (type == null) {
    if (expr instanceof PsiArrayInitializerExpression) {
      PsiExpression[] initializers=((PsiArrayInitializerExpression)expr).getInitializers();
      if (initializers != null && initializers.length > 0) {
        PsiType initType=getTypeByExpression(initializers[0]);
        if (initType == null)         return null;
        return initType.createArrayType();
      }
    }
    return null;
  }
  PsiClass refClass=PsiUtil.resolveClassInType(type);
  if (refClass instanceof PsiAnonymousClass) {
    type=((PsiAnonymousClass)refClass).getBaseClassType();
  }
  if (type == PsiType.NULL) {
    ExpectedTypeInfo[] infos=ExpectedTypesProvider.getInstance(expr.getProject()).getExpectedTypes(expr,false);
    if (infos.length == 1) {
      type=infos[0].getType();
    }
 else {
      type=factory.createTypeByFQClassName("java.lang.Object",expr.getResolveScope());
    }
  }
  type=type.accept(new PsiTypeVisitor<PsiType>(){
    public PsiType visitArrayType(    PsiArrayType arrayType){
      PsiType componentType=arrayType.getComponentType();
      PsiType type=componentType.accept(this);
      if (type == componentType)       return arrayType;
      return type.createArrayType();
    }
    public PsiType visitType(    PsiType type){
      return type;
    }
    public PsiType visitCapturedWildcardType(    PsiCapturedWildcardType capturedWildcardType){
      return capturedWildcardType.getWildcard();
    }
    public PsiType visitClassType(    PsiClassType classType){
      PsiClassType.ClassResolveResult resolveResult=classType.resolveGenerics();
      PsiClass aClass=resolveResult.getElement();
      if (aClass == null)       return classType;
      boolean toExtend=false;
      Iterator<PsiTypeParameter> iterator=PsiUtil.typeParametersIterator(aClass);
      PsiSubstitutor substitutor=PsiSubstitutor.EMPTY;
      while (iterator.hasNext()) {
        PsiTypeParameter typeParameter=iterator.next();
        PsiType typeArgument=resolveResult.getSubstitutor().substitute(typeParameter);
        if (typeArgument instanceof PsiCapturedWildcardType)         toExtend=true;
        substitutor=substitutor.put(typeParameter,typeArgument == null ? null : typeArgument.accept(this));
      }
      PsiType result=factory.createType(aClass,substitutor);
      if (toExtend)       result=PsiWildcardType.createExtends(aClass.getManager(),result);
      return result;
    }
  }
);
  PsiType componentType=type.getDeepComponentType();
  if (componentType instanceof PsiWildcardType) {
    componentType=((PsiWildcardType)componentType).getExtendsBound();
    int dims=type.getArrayDimensions();
    for (int i=0; i < dims; i++)     componentType=componentType.createArrayType();
    return componentType;
  }
  return type;
}
