{
  final PsiMethod baseDefaultConstructor=findDefaultConstructor(superClass);
  final PsiMethod[] constructors=subClass.getConstructors();
  if (constructors.length > 0) {
    for (int j=0; j < constructors.length; j++) {
      PsiMethod constructor=constructors[j];
      final PsiStatement[] statements=constructor.getBody().getStatements();
      if (statements.length < 1 || !isSuperOrThisCall(statements[0],true,true)) {
        implicitConstructorUsageVistor.visitConstructor(constructor,baseDefaultConstructor);
      }
    }
  }
 else {
    implicitConstructorUsageVistor.visitClassWithoutConstructors(subClass);
  }
}
