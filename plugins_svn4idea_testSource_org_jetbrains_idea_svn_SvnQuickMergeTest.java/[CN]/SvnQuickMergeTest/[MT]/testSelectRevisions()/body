{
  final SVNInfo info=myVcs.createWCClient().doInfo(new File(myBranchTree.myS1File.getPath()),SVNRevision.WORKING);
  Assert.assertNotNull(info);
  final long numberBefore=info.getRevision().getNumber();
  final int totalChanges=10;
  final StringBuilder sb=new StringBuilder(FileUtil.loadFile(new File(myBranchTree.myS1File.getPath())));
  for (int i=0; i < totalChanges; i++) {
    sb.append("\nedited in branch ").append(i);
    editFileInCommand(myProject,myBranchTree.myS1File,sb.toString());
    runInAndVerifyIgnoreOutput(myBranchRoot,"ci","-m","change in branch " + i,myBranchTree.myS1File.getPath());
    Thread.sleep(10);
  }
  final WCInfo found=getWcInfo();
  final QuickMerge quickMerge=new QuickMerge(myProject,myBranchUrl,found,SVNPathUtil.tail(myBranchUrl),myWorkingCopyDir);
  final QuickMergeTestInteraction testInteraction=new QuickMergeTestInteraction(){
    @Override public boolean shouldReintegrate(    @NotNull String sourceUrl,    @NotNull String targetUrl){
      return true;
    }
    @NotNull @Override public SelectMergeItemsResult selectMergeItems(    final List<CommittedChangeList> lists,    String mergeTitle,    MergeChecker mergeChecker){
      return new SelectMergeItemsResult(){
        @Override public QuickMergeContentsVariants getResultCode(){
          return QuickMergeContentsVariants.select;
        }
        @Override public List<CommittedChangeList> getSelectedLists(){
          final List<CommittedChangeList> result=new ArrayList<CommittedChangeList>();
          for (          CommittedChangeList list : lists) {
            if (numberBefore + 1 == list.getNumber() || numberBefore + 2 == list.getNumber()) {
              result.add(list);
            }
          }
          return result;
        }
      }
;
    }
  }
;
  testInteraction.setMergeVariant(QuickMergeContentsVariants.select);
  final WaitingTaskDescriptor descriptor=new WaitingTaskDescriptor();
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    @Override public void run(){
      quickMerge.execute(testInteraction,descriptor);
    }
  }
);
  descriptor.waitForCompletion();
  testInteraction.throwIfExceptions();
  Assert.assertTrue(descriptor.isCompleted());
  VcsDirtyScopeManager.getInstance(myProject).markEverythingDirty();
  myChangeListManager.ensureUpToDate(false);
  final Change fileChange=myChangeListManager.getChange(myTree.myS1File);
  Assert.assertNotNull(fileChange);
  Assert.assertEquals(FileStatus.MODIFIED,fileChange.getFileStatus());
  final Change dirChange=myChangeListManager.getChange(myWorkingCopyDir);
  Assert.assertNotNull(dirChange);
  Assert.assertEquals(FileStatus.MODIFIED,dirChange.getFileStatus());
  final SVNPropertyData data=myVcs.createWCClient().doGetProperty(new File(myWorkingCopyDir.getPath()),"svn:mergeinfo",SVNRevision.UNDEFINED,SVNRevision.WORKING);
  System.out.println(data.getValue().getString());
  Assert.assertEquals("/branches/b1:" + (numberBefore + 1) + "-"+ (numberBefore + 2),data.getValue().getString());
}
