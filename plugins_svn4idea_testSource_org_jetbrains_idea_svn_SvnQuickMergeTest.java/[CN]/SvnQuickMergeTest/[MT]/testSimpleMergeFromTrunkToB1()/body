{
  editFileInCommand(myProject,myTree.myS1File,"903403240328");
  final File workingIoFile=new File(myWorkingCopyDir.getPath());
  runInAndVerifyIgnoreOutput(workingIoFile,"ci","-m","change in trunk",myTree.myS1File.getPath());
  final String trunkUrl=myRepoUrl + "/trunk";
  runInAndVerifyIgnoreOutput(workingIoFile,"switch",myBranchUrl,workingIoFile.getPath());
  myTree=new SubTree(myWorkingCopyDir);
  refreshSvnMappingsSynchronously();
  final WCInfo found=getWcInfo();
  final QuickMerge quickMerge=new QuickMerge(myProject,trunkUrl,found,SVNPathUtil.tail(trunkUrl),myWorkingCopyDir);
  final QuickMergeTestInteraction testInteraction=new QuickMergeTestInteraction();
  final WaitingTaskDescriptor descriptor=new WaitingTaskDescriptor();
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    @Override public void run(){
      quickMerge.execute(testInteraction,descriptor);
    }
  }
);
  descriptor.waitForCompletion();
  testInteraction.throwIfExceptions();
  Assert.assertTrue(descriptor.isCompleted());
  VcsDirtyScopeManager.getInstance(myProject).markEverythingDirty();
  myChangeListManager.ensureUpToDate(false);
  final Change fileChange=myChangeListManager.getChange(myTree.myS1File);
  Assert.assertNotNull(fileChange);
  Assert.assertEquals(FileStatus.MODIFIED,fileChange.getFileStatus());
  final Change dirChange=myChangeListManager.getChange(myWorkingCopyDir);
  Assert.assertNotNull(dirChange);
  Assert.assertEquals(FileStatus.MODIFIED,dirChange.getFileStatus());
}
