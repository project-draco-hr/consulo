{
  if (element instanceof PsiLocalVariableImpl) {
    return true;
  }
  if (myResolveTargetKinds.contains(getResolveKind(element))) {
    if (element instanceof PsiVariable && !(element instanceof PsiField) && myName != null && !myName.equals(((PsiVariable)element).getName())) {
      return true;
    }
    PsiNamedElement namedElement=(PsiNamedElement)element;
    PsiSubstitutor substitutor=state.get(PsiSubstitutor.KEY);
    if (substitutor == null)     substitutor=PsiSubstitutor.EMPTY;
    if (myTypeArguments.length > 0 && namedElement instanceof PsiClass) {
      substitutor=substitutor.putAll((PsiClass)namedElement,myTypeArguments);
    }
    if (namedElement instanceof PsiClass && !(namedElement instanceof PsiTypeParameter)) {
      final PsiClass aClass=(PsiClass)namedElement;
      if (myProcessedClasses == null)       myProcessedClasses=new HashSet<String>();
      if (!myProcessedClasses.add(aClass.getQualifiedName())) {
        return true;
      }
    }
    boolean isAccessible=isAccessible(namedElement);
    final PsiElement resolveContext=state.get(RESOLVE_CONTEXT);
    final SpreadState spreadState=state.get(SpreadState.SPREAD_STATE);
    boolean isStaticsOK=isStaticsOK(namedElement,resolveContext,true);
    addCandidate(new GroovyResolveResultImpl(namedElement,resolveContext,spreadState,substitutor,isAccessible,isStaticsOK));
    return !isAccessible || !isStaticsOK;
  }
  return true;
}
