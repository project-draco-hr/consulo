{
  final Set<Module> alreadyVisited=new HashSet<Module>();
  final List<CommandLineEntry> entries=new ArrayList<CommandLineEntry>();
  final ModuleRootManager moduleRootManager=ModuleRootManager.getInstance(module);
  moduleRootManager.processOrder(new RootPolicy<Module>(){
    public Module visitJdkOrderEntry(    final JdkOrderEntry jdkOrderEntry,    final Module module){
      entries.add(JavaParametersUtil.JDK_ENTRY);
      return module;
    }
    public Module visitLibraryOrderEntry(    final LibraryOrderEntry libraryOrderEntry,    final Module module){
      addUrls(Arrays.asList(libraryOrderEntry.getUrls(OrderRootType.CLASSES_AND_OUTPUT)));
      return module;
    }
    public Module visitModuleOrderEntry(    final ModuleOrderEntry moduleOrderEntry,    final Module module){
      if (withDependencies) {
        final Module moduleDep=moduleOrderEntry.getModule();
        if (!alreadyVisited.contains(moduleDep)) {
          alreadyVisited.add(moduleDep);
          ModuleRootManager.getInstance(moduleDep).processOrder(this,moduleDep);
        }
      }
      return module;
    }
    public Module visitModuleSourceOrderEntry(    final ModuleSourceOrderEntry moduleSourceOrderEntry,    final Module module){
      addUrls(ProjectRootsTraversing.RootTraversePolicy.ALL_OUTPUTS.getOutputs(module));
      return module;
    }
    private void addUrls(    final Iterable<String> urls){
      for (      final String url : urls) {
        entries.add(new ClassPathEntry(PathUtil.toPresentableUrl(url)));
      }
    }
  }
,module);
  return entries;
}
