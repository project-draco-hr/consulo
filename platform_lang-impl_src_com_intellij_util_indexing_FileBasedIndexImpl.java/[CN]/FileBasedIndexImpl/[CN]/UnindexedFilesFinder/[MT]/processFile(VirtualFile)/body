{
  if (!file.isValid()) {
    return true;
  }
  if (file instanceof VirtualFileSystemEntry && ((VirtualFileSystemEntry)file).isFileIndexed()) {
    return true;
  }
  if (file instanceof VirtualFileWithId) {
    try {
      FileTypeManagerImpl.cacheFileType(file,file.getFileType());
      boolean oldStuff=true;
      if (file.isDirectory() || !isTooLarge(file)) {
        final List<ID<?,?>> affectedIndexCandidates=getAffectedIndexCandidates(file);
        for (int i=0, size=affectedIndexCandidates.size(); i < size; ++i) {
          final ID<?,?> indexId=affectedIndexCandidates.get(i);
          try {
            if (needsFileContentLoading(indexId) && shouldIndexFile(null,file,indexId)) {
              myFiles.add(file);
              oldStuff=false;
              break;
            }
          }
 catch (          RuntimeException e) {
            final Throwable cause=e.getCause();
            if (cause instanceof IOException || cause instanceof StorageException) {
              LOG.info(e);
              requestRebuild(indexId);
            }
 else {
              throw e;
            }
          }
        }
      }
      FileContent fileContent=null;
      for (      ID<?,?> indexId : myNotRequiringContentIndices) {
        if (shouldIndexFile(null,file,indexId)) {
          oldStuff=false;
          try {
            if (fileContent == null) {
              fileContent=new FileContentImpl(file);
            }
            updateSingleIndex(indexId,file,fileContent);
          }
 catch (          StorageException e) {
            LOG.info(e);
            requestRebuild(indexId);
          }
        }
      }
      IndexingStamp.flushCache(file);
      if (oldStuff && file instanceof VirtualFileSystemEntry) {
        ((VirtualFileSystemEntry)file).setFileIndexed(true);
      }
    }
  finally {
      FileTypeManagerImpl.cacheFileType(file,null);
    }
    if (myProgressIndicator != null && file.isDirectory()) {
      myProgressIndicator.checkCanceled();
      myProgressIndicator.setText("Scanning files to index");
    }
  }
  return true;
}
