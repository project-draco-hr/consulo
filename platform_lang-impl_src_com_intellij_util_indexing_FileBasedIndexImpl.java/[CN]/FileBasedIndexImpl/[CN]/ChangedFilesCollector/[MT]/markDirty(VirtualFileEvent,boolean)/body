{
  final VirtualFile eventFile=event.getFile();
  cleanProcessedFlag(eventFile);
  if (!contentChange) {
    myUpdatingFiles.incrementAndGet();
  }
  iterateIndexableFiles(eventFile,new Processor<VirtualFile>(){
    @Override public boolean process(    @NotNull final VirtualFile file){
      boolean fileIsDirectory=file.isDirectory();
      if (!contentChange) {
        FileContent fileContent=null;
        for (        ID<?,?> indexId : fileIsDirectory ? myIndicesForDirectories : myNotRequiringContentIndices) {
          if (getInputFilter(indexId).acceptInput(null,file)) {
            try {
              if (fileContent == null) {
                fileContent=new FileContentImpl(file);
              }
              updateSingleIndex(indexId,file,fileContent);
            }
 catch (            StorageException e) {
              LOG.info(e);
              requestRebuild(indexId);
            }
          }
        }
      }
      if (!fileIsDirectory && !isTooLarge(file)) {
        FileTypeManagerImpl.cacheFileType(file,file.getFileType());
        try {
          final List<ID<?,?>> candidates=getAffectedIndexCandidates(file);
          boolean scheduleForUpdate=false;
          boolean resetStamp=false;
          for (int i=0, size=candidates.size(); i < size; ++i) {
            final ID<?,?> indexId=candidates.get(i);
            if (needsFileContentLoading(indexId) && getInputFilter(indexId).acceptInput(null,file)) {
              if (IndexingStamp.isFileIndexedStateCurrent(file,indexId)) {
                IndexingStamp.setFileIndexedStateOutdated(file,indexId);
                resetStamp=true;
              }
              scheduleForUpdate=true;
            }
          }
          if (scheduleForUpdate) {
            if (resetStamp)             IndexingStamp.flushCache(file);
            scheduleForUpdate(file);
          }
        }
  finally {
          FileTypeManagerImpl.cacheFileType(file,null);
        }
      }
      return true;
    }
  }
);
  IndexingStamp.flushCaches();
  if (!contentChange) {
    if (myUpdatingFiles.decrementAndGet() == 0) {
      ++myFilesModCount;
    }
  }
}
