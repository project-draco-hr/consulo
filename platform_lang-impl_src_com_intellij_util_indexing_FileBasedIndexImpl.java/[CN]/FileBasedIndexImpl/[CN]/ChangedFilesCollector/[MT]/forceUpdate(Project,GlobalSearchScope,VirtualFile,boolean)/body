{
  myChangedFilesCollector.ensureAllInvalidateTasksCompleted();
  ProjectIndexableFilesFilter indexableFilesFilter=projectIndexableFiles(project);
  for (  VirtualFile file : getAllFilesToUpdate()) {
    if (indexableFilesFilter != null && file instanceof VirtualFileWithId && !indexableFilesFilter.contains(((VirtualFileWithId)file).getId())) {
      continue;
    }
    if (filter == null || filter.accept(file) || Comparing.equal(file,restrictedTo)) {
      try {
        myForceUpdateSemaphore.down();
        processFileImpl(project,new com.intellij.ide.caches.FileContent(file),onlyRemoveOutdatedData);
      }
 catch (      ProcessCanceledException ex) {
        LOG.assertTrue(!onlyRemoveOutdatedData);
        myChangedFilesCollector.scheduleForUpdate(file);
        throw ex;
      }
 finally {
        myForceUpdateSemaphore.up();
      }
    }
  }
  while (!myForceUpdateSemaphore.waitFor(500)) {
    if (Thread.holdsLock(PsiLock.LOCK)) {
      break;
    }
  }
}
