{
  final MapReduceIndex<K,V,FileContent> index;
  if (extension instanceof CustomImplementationFileBasedIndexExtension) {
    final UpdatableIndex<K,V,FileContent> custom=((CustomImplementationFileBasedIndexExtension<K,V,FileContent>)extension).createIndexImplementation(indexId,this,storage);
    if (!(custom instanceof MapReduceIndex)) {
      return custom;
    }
    index=(MapReduceIndex<K,V,FileContent>)custom;
  }
 else {
    index=new MapReduceIndex<K,V,FileContent>(indexId,extension.getIndexer(),storage);
  }
  final KeyDescriptor<K> keyDescriptor=extension.getKeyDescriptor();
  index.setInputIdToDataKeysIndex(new Factory<PersistentHashMap<Integer,Collection<K>>>(){
    @Override public PersistentHashMap<Integer,Collection<K>> create(){
      try {
        return ProgressManager.getInstance().runProcessWithProgressSynchronously(new ThrowableComputable<PersistentHashMap<Integer,Collection<K>>,IOException>(){
          @Override public PersistentHashMap<Integer,Collection<K>> compute() throws IOException {
            return createIdToDataKeysIndex(indexId,keyDescriptor,storage);
          }
        }
,LangBundle.message("compacting.indices.title"),false,null);
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
);
  return index;
}
