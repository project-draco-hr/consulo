{
  if (project == null || myUpdatingFiles.get() > 0)   return null;
  SoftReference<ProjectIndexableFilesFilter> reference=project.getUserData(ourProjectFilesSetKey);
  ProjectIndexableFilesFilter data=reference != null ? reference.get() : null;
  if (data != null && data.myModificationCount == myFilesModCount)   return data;
  if (myCalcIndexableFilesLock.tryLock()) {
    try {
      reference=project.getUserData(ourProjectFilesSetKey);
      data=reference != null ? reference.get() : null;
      if (data != null && data.myModificationCount == myFilesModCount) {
        return data;
      }
      long start=System.currentTimeMillis();
      final TIntHashSet filesSet=new TIntHashSet();
      iterateIndexableFiles(new ContentIterator(){
        @Override public boolean processFile(        @NotNull VirtualFile fileOrDir){
          filesSet.add(((VirtualFileWithId)fileOrDir).getId());
          return true;
        }
      }
,project,ProgressManager.getInstance().getProgressIndicator());
      ProjectIndexableFilesFilter filter=new ProjectIndexableFilesFilter(filesSet,myFilesModCount);
      project.putUserData(ourProjectFilesSetKey,new SoftReference<ProjectIndexableFilesFilter>(filter));
      long finish=System.currentTimeMillis();
      LOG.debug(filesSet.size() + " files iterated in " + (finish - start)+ " ms");
      return filter;
    }
  finally {
      myCalcIndexableFilesLock.unlock();
    }
  }
  return null;
}
