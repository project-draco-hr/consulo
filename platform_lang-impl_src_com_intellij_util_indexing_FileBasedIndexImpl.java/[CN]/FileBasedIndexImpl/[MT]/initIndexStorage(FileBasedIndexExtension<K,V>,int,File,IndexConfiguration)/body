{
  MapIndexStorage<K,V> storage=null;
  final ID<K,V> name=extension.getName();
  boolean contentHashesEnumeratorOk=false;
  for (int attempt=0; attempt < 2; attempt++) {
    try {
      if (extension.hasSnapshotMapping()) {
        ContentHashesSupport.initContentHashesEnumerator();
        contentHashesEnumeratorOk=true;
      }
      storage=new MapIndexStorage<K,V>(IndexInfrastructure.getStorageFile(name),extension.getKeyDescriptor(),extension.getValueExternalizer(),extension.getCacheSize(),extension.keyIsUniqueForIndexedFile(),extension.traceKeyHashToVirtualFileMapping());
      final InputFilter inputFilter=extension.getInputFilter();
      final Set<FileType> addedTypes=new THashSet<FileType>();
      if (inputFilter instanceof FileBasedIndex.FileTypeSpecificInputFilter) {
        ((FileBasedIndex.FileTypeSpecificInputFilter)inputFilter).registerFileTypesUsedForIndexing(new Consumer<FileType>(){
          @Override public void consume(          FileType type){
            if (type != null)             addedTypes.add(type);
          }
        }
);
      }
      state.registerIndex(name,createIndex(extension,new MemoryIndexStorage<K,V>(storage,name)),new FileBasedIndex.InputFilter(){
        @Override public boolean acceptInput(        @Nullable Project project,        @NotNull VirtualFile file){
          return file instanceof VirtualFileWithId && inputFilter.acceptInput(project,file);
        }
      }
,version,addedTypes);
      break;
    }
 catch (    Exception e) {
      LOG.info(e);
      boolean instantiatedStorage=storage != null;
      try {
        if (storage != null)         storage.close();
        storage=null;
      }
 catch (      Exception ignored) {
      }
      FileUtil.deleteWithRenaming(IndexInfrastructure.getIndexRootDir(name));
      if (extension.hasSnapshotMapping() && (!contentHashesEnumeratorOk || instantiatedStorage)) {
        FileUtil.deleteWithRenaming(IndexInfrastructure.getPersistentIndexRootDir(name));
      }
      IndexingStamp.rewriteVersion(versionFile,version);
    }
  }
}
