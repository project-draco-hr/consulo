{
  final VirtualFile vFile=myFileDocumentManager.getFile(document);
  if (!(vFile instanceof VirtualFileWithId) || !vFile.isValid()) {
    return true;
  }
  if (restrictedFile != null) {
    if (!Comparing.equal(vFile,restrictedFile)) {
      return false;
    }
  }
 else   if (filter != null && !filter.accept(vFile)) {
    return false;
  }
  final PsiFile dominantContentFile=findDominantPsiForDocument(document,project);
  final DocumentContent content;
  if (dominantContentFile != null && dominantContentFile.getViewProvider().getModificationStamp() != document.getModificationStamp()) {
    content=new PsiContent(document,dominantContentFile);
  }
 else {
    content=new AuthenticContent(document);
  }
  final long currentDocStamp=content.getModificationStamp();
  final long previousDocStamp=myLastIndexedDocStamps.getAndSet(document,requestedIndexId,currentDocStamp);
  if (currentDocStamp != previousDocStamp) {
    final String contentText=content.getText();
    if (!isTooLarge(vFile,contentText.length()) && getInputFilter(requestedIndexId).acceptInput(vFile)) {
      WeakReference<FileContentImpl> previousContentRef=document.getUserData(ourFileContentKey);
      FileContentImpl previousContent=previousContentRef != null ? previousContentRef.get() : null;
      final FileContentImpl newFc;
      if (previousContent != null && previousContent.getStamp() == currentDocStamp) {
        newFc=previousContent;
      }
 else {
        newFc=new FileContentImpl(vFile,contentText,vFile.getCharset(),currentDocStamp);
        document.putUserData(ourFileContentKey,new WeakReference<FileContentImpl>(newFc));
      }
      initFileContent(newFc,project,dominantContentFile);
      if (content instanceof AuthenticContent) {
        newFc.putUserData(EDITOR_HIGHLIGHTER,EditorHighlighterCache.getEditorHighlighterForCachesBuilding(document));
      }
      final int inputId=Math.abs(getFileId(vFile));
      try {
        getIndex(requestedIndexId).update(inputId,newFc);
      }
 catch (      ProcessCanceledException pce) {
        myLastIndexedDocStamps.getAndSet(document,requestedIndexId,previousDocStamp);
        throw pce;
      }
 finally {
        cleanFileContent(newFc,dominantContentFile);
      }
    }
  }
  return true;
}
