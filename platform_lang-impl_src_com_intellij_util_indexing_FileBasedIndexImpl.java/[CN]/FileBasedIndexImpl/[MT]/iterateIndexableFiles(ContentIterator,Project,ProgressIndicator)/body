{
  if (project.isDisposed()) {
    return;
  }
  final ProjectFileIndex projectFileIndex=ProjectRootManager.getInstance(project).getFileIndex();
  projectFileIndex.iterateContent(processor);
  if (project.isDisposed()) {
    return;
  }
  Set<VirtualFile> visitedRoots=new THashSet<VirtualFile>();
  for (  IndexedRootsProvider provider : Extensions.getExtensions(IndexedRootsProvider.EP_NAME)) {
    if (project.isDisposed()) {
      return;
    }
    for (    VirtualFile root : IndexableSetContributor.getRootsToIndex(provider)) {
      if (visitedRoots.add(root)) {
        iterateRecursively(root,processor,indicator);
      }
    }
    for (    VirtualFile root : IndexableSetContributor.getProjectRootsToIndex(provider,project)) {
      if (visitedRoots.add(root)) {
        iterateRecursively(root,processor,indicator);
      }
    }
  }
  if (project.isDisposed()) {
    return;
  }
  for (  Module module : ModuleManager.getInstance(project).getModules()) {
    if (module.isDisposed()) {
      return;
    }
    OrderEntry[] orderEntries=ModuleRootManager.getInstance(module).getOrderEntries();
    for (    OrderEntry orderEntry : orderEntries) {
      if (orderEntry instanceof LibraryOrSdkOrderEntry) {
        if (orderEntry.isValid()) {
          final LibraryOrSdkOrderEntry entry=(LibraryOrSdkOrderEntry)orderEntry;
          final VirtualFile[] libSources=entry.getRootFiles(OrderRootType.SOURCES);
          final VirtualFile[] libClasses=entry.getRootFiles(OrderRootType.CLASSES);
          for (          VirtualFile[] roots : new VirtualFile[][]{libSources,libClasses}) {
            for (            VirtualFile root : roots) {
              if (visitedRoots.add(root)) {
                iterateRecursively(root,processor,indicator);
              }
            }
          }
        }
      }
    }
  }
}
