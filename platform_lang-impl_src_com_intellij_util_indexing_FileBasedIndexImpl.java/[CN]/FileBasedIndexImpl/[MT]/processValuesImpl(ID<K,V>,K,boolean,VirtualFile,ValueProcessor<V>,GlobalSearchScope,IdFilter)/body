{
  ThrowableConvertor<UpdatableIndex<K,V,FileContent>,Boolean,StorageException> keyProcessor=new ThrowableConvertor<UpdatableIndex<K,V,FileContent>,Boolean,StorageException>(){
    @Override public Boolean convert(    @NotNull UpdatableIndex<K,V,FileContent> index) throws StorageException {
      final ValueContainer<V> container=index.getData(dataKey);
      boolean shouldContinue=true;
      if (restrictToFile != null) {
        if (restrictToFile instanceof VirtualFileWithId) {
          final int restrictedFileId=getFileId(restrictToFile);
          for (final ValueContainer.ValueIterator<V> valueIt=container.getValueIterator(); valueIt.hasNext(); ) {
            final V value=valueIt.next();
            if (valueIt.getValueAssociationPredicate().contains(restrictedFileId)) {
              shouldContinue=processor.process(restrictToFile,value);
              if (!shouldContinue) {
                break;
              }
            }
          }
        }
      }
 else {
        final PersistentFS fs=(PersistentFS)ManagingFS.getInstance();
        final IdFilter filter=idFilter != null ? idFilter : projectIndexableFiles(scope.getProject());
        VALUES_LOOP:         for (final ValueContainer.ValueIterator<V> valueIt=container.getValueIterator(); valueIt.hasNext(); ) {
          final V value=valueIt.next();
          for (final ValueContainer.IntIterator inputIdsIterator=valueIt.getInputIdsIterator(); inputIdsIterator.hasNext(); ) {
            final int id=inputIdsIterator.next();
            if (filter != null && !filter.containsFileId(id))             continue;
            VirtualFile file=IndexInfrastructure.findFileByIdIfCached(fs,id);
            if (file != null && scope.accept(file)) {
              shouldContinue=processor.process(file,value);
              if (!shouldContinue) {
                break VALUES_LOOP;
              }
              if (ensureValueProcessedOnce) {
                break;
              }
            }
          }
        }
      }
      return shouldContinue;
    }
  }
;
  final Boolean result=processExceptions(indexId,restrictToFile,scope,keyProcessor);
  return result == null || result.booleanValue();
}
