{
  final ThrowableConvertor<UpdatableIndex<K,V,FileContent>,TIntHashSet,StorageException> convertor=new ThrowableConvertor<UpdatableIndex<K,V,FileContent>,TIntHashSet,StorageException>(){
    @Nullable @Override public TIntHashSet convert(    @NotNull UpdatableIndex<K,V,FileContent> index) throws StorageException {
      TIntHashSet mainIntersection=null;
      for (      K dataKey : dataKeys) {
        ProgressManager.checkCanceled();
        final TIntHashSet copy=new TIntHashSet();
        final ValueContainer<V> container=index.getData(dataKey);
        for (final Iterator<V> valueIt=container.getValueIterator(); valueIt.hasNext(); ) {
          final V value=valueIt.next();
          if (valueChecker != null && !valueChecker.value(value)) {
            continue;
          }
          ValueContainer.IntIterator iterator=container.getInputIdsIterator(value);
          if (mainIntersection == null || iterator.size() < mainIntersection.size()) {
            while (iterator.hasNext()) {
              final int id=iterator.next();
              if (mainIntersection == null && (projectFilesFilter == null || projectFilesFilter.contains(id)) || mainIntersection != null && mainIntersection.contains(id)) {
                copy.add(id);
              }
            }
          }
 else {
            mainIntersection.forEach(new TIntProcedure(){
              final ValueContainer.IntPredicate predicate=container.getValueAssociationPredicate(value);
              @Override public boolean execute(              int id){
                if (predicate.contains(id))                 copy.add(id);
                return true;
              }
            }
);
          }
        }
        mainIntersection=copy;
        if (mainIntersection.isEmpty()) {
          return new TIntHashSet();
        }
      }
      return mainIntersection;
    }
  }
;
  return processExceptions(indexId,null,filter,convertor);
}
