{
  ArrayList<PsiExpression> array=new ArrayList<PsiExpression>();
  PsiElementFactory factory=place.getManager().getElementFactory();
  try {
    array.add(factory.createExpressionFromText("true",null));
    array.add(factory.createExpressionFromText("false",null));
    PsiElement scope=place;
    boolean firstClass=true;
    boolean static_flag=false;
    while (scope != null) {
      if (scope instanceof PsiModifierListOwner && ((PsiModifierListOwner)scope).getModifierList() != null) {
        if (((PsiModifierListOwner)scope).hasModifierProperty(PsiModifier.STATIC)) {
          static_flag=true;
        }
      }
      if (scope instanceof PsiClass) {
        PsiClass aClass=(PsiClass)scope;
        String name=aClass.getName();
        PsiExpression expr=null;
        if (!static_flag) {
          if (firstClass) {
            expr=factory.createExpressionFromText("this",place);
          }
 else {
            if (name != null) {
              expr=factory.createExpressionFromText(name + ".this",place);
            }
          }
          if (expr != null) {
            array.add(expr);
          }
        }
        firstClass=false;
        if (aClass.hasModifierProperty(PsiModifier.STATIC))         break;
      }
 else       if (scope instanceof PsiMember) {
        if (((PsiMember)scope).hasModifierProperty(PsiModifier.STATIC))         break;
      }
      scope=scope.getParent();
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
  return array.toArray(new PsiExpression[array.size()]);
}
