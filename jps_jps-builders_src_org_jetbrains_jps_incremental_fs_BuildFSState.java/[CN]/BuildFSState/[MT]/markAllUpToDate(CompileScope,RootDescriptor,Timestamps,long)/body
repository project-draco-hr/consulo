{
  boolean marked=false;
  final FilesDelta delta=getDelta(rd.target);
  final Set<File> files=delta.clearRecompile(rd.root);
  if (files != null) {
    final JpsCompilerExcludes excludes=JpsJavaExtensionService.getInstance().getOrCreateCompilerConfiguration(scope.getJpsProject()).getCompilerExcludes();
    for (    File file : files) {
      if (!excludes.isExcluded(file)) {
        if (scope.isAffected(rd.target,file)) {
          final long stamp=FileSystemUtil.lastModified(file);
          if (!rd.isGeneratedSources && stamp > compilationStartStamp) {
            delta.markRecompile(rd.root,file);
            if (Utils.IS_TEST_MODE) {
              LOG.info("Timestamp after compilation started; marking dirty again: " + file.getPath());
            }
          }
 else {
            marked=true;
            stamps.saveStamp(file,stamp);
          }
        }
 else {
          if (Utils.IS_TEST_MODE) {
            LOG.info("Not affected by compile scope; marking dirty again: " + file.getPath());
          }
          delta.markRecompile(rd.root,file);
        }
      }
 else {
        stamps.removeStamp(file);
      }
    }
  }
  return marked;
}
