{
  boolean marked=false;
  final FilesDelta delta=getDelta(rd.getTarget());
  final Set<File> files=delta.clearRecompile(rd);
  if (files != null) {
    FileFilter filter=context.getProjectDescriptor().getBuildRootIndex().getRootFilter(rd);
    CompileScope scope=context.getScope();
    final long compilationStartStamp=context.getCompilationStartStamp();
    for (    File file : files) {
      if (filter.accept(file)) {
        if (scope.isAffected(rd.getTarget(),file)) {
          final long stamp=FileSystemUtil.lastModified(file);
          if (!rd.isGenerated() && stamp > compilationStartStamp) {
            delta.markRecompile(rd,file);
            if (Utils.IS_TEST_MODE) {
              LOG.info("Timestamp after compilation started; marking dirty again: " + file.getPath());
            }
          }
 else {
            marked=true;
            stamps.saveStamp(file,rd.getTarget(),stamp);
          }
        }
 else {
          if (Utils.IS_TEST_MODE) {
            LOG.info("Not affected by compile scope; marking dirty again: " + file.getPath());
          }
          delta.markRecompile(rd,file);
        }
      }
 else {
        stamps.removeStamp(file,rd.getTarget());
      }
    }
  }
  return marked;
}
