{
  super(BuildProperties.getClasspathProperty(chunk.getName()));
  final OrderedSet<ClasspathItem> pathItems=new OrderedSet<ClasspathItem>((TObjectHashingStrategy<ClasspathItem>)TObjectHashingStrategy.CANONICAL);
  final String compilerOutputPathUrl=chunk.getOutputDirUrl();
  final String compilerOutputPathForTestsUrl=chunk.getTestsOutputDirUrl();
  final String moduleChunkBasedirProperty=BuildProperties.getModuleChunkBasedirProperty(chunk);
  final Module[] modules=chunk.getModules();
  for (int moduleIdx=0; moduleIdx < modules.length; moduleIdx++) {
    final Module module=modules[moduleIdx];
    final OrderEntry[] orderEntries=ModuleRootManager.getInstance(module).getOrderEntries();
    for (int idx=0; idx < orderEntries.length; idx++) {
      final OrderEntry orderEntry=orderEntries[idx];
      if (!orderEntry.isValid()) {
        continue;
      }
      if (orderEntry instanceof JdkOrderEntry) {
        if (genOptions.forceTargetJdk) {
          pathItems.add(new PathRefItem(BuildProperties.propertyRef(BuildProperties.getModuleChunkJdkClasspathProperty(chunk.getName()))));
        }
      }
 else       if (orderEntry instanceof LibraryOrderEntry && !((LibraryOrderEntry)orderEntry).isModuleLevel()) {
        final String libraryName=((LibraryOrderEntry)orderEntry).getLibraryName();
        pathItems.add(new PathRefItem(BuildProperties.getLibraryPathId(libraryName)));
      }
 else {
        final String[] files=orderEntry.getUrls(OrderRootType.COMPILATION_CLASSES);
        for (int i=0; i < files.length; i++) {
          String url=files[i];
          if (url.endsWith(JarFileSystem.JAR_SEPARATOR)) {
            url=url.substring(0,url.length() - JarFileSystem.JAR_SEPARATOR.length());
          }
          if (compilerOutputPathUrl != null) {
            if (url.equals(compilerOutputPathUrl)) {
              continue;
            }
          }
          if (compilerOutputPathForTestsUrl != null) {
            if (url.equals(compilerOutputPathForTestsUrl)) {
              continue;
            }
          }
          final String propertyRef=genOptions.getPropertyRefForUrl(url);
          if (propertyRef != null) {
            pathItems.add(new PathElementItem(propertyRef));
          }
 else {
            final String path=VirtualFileManager.extractPath(url);
            pathItems.add(new PathElementItem(GenerationUtils.toRelativePath(path,chunk.getBaseDir(),moduleChunkBasedirProperty,genOptions,!chunk.isSavePathsRelative())));
          }
        }
      }
    }
  }
  for (Iterator<ClasspathItem> it=pathItems.iterator(); it.hasNext(); ) {
    add(it.next().toGenerator());
  }
}
