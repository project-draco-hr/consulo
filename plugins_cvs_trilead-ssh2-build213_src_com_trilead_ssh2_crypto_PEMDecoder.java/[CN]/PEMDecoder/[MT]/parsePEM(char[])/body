{
  PEMStructure ps=new PEMStructure();
  String line=null;
  BufferedReader br=new BufferedReader(new CharArrayReader(pem));
  String endLine=null;
  while (true) {
    line=br.readLine();
    if (line == null)     throw new IOException("Invalid PEM structure, '-----BEGIN...' missing");
    line=line.trim();
    if (line.startsWith("-----BEGIN DSA PRIVATE KEY-----")) {
      endLine="-----END DSA PRIVATE KEY-----";
      ps.pemType=PEM_DSA_PRIVATE_KEY;
      break;
    }
    if (line.startsWith("-----BEGIN RSA PRIVATE KEY-----")) {
      endLine="-----END RSA PRIVATE KEY-----";
      ps.pemType=PEM_RSA_PRIVATE_KEY;
      break;
    }
  }
  while (true) {
    line=br.readLine();
    if (line == null)     throw new IOException("Invalid PEM structure, " + endLine + " missing");
    line=line.trim();
    int sem_idx=line.indexOf(':');
    if (sem_idx == -1)     break;
    String name=line.substring(0,sem_idx + 1);
    String value=line.substring(sem_idx + 1);
    String values[]=value.split(",");
    for (int i=0; i < values.length; i++)     values[i]=values[i].trim();
    if ("Proc-Type:".equals(name)) {
      ps.procType=values;
      continue;
    }
    if ("DEK-Info:".equals(name)) {
      ps.dekInfo=values;
      continue;
    }
  }
  StringBuffer keyData=new StringBuffer();
  while (true) {
    if (line == null)     throw new IOException("Invalid PEM structure, " + endLine + " missing");
    line=line.trim();
    if (line.startsWith(endLine))     break;
    keyData.append(line);
    line=br.readLine();
  }
  char[] pem_chars=new char[keyData.length()];
  keyData.getChars(0,pem_chars.length,pem_chars,0);
  ps.data=Base64.decode(pem_chars);
  if (ps.data.length == 0)   throw new IOException("Invalid PEM structure, no data available");
  return ps;
}
