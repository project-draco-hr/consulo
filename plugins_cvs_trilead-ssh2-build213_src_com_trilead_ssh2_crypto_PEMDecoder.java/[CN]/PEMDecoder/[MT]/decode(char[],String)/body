{
  PEMStructure ps=parsePEM(pem);
  if (isPEMEncrypted(ps)) {
    if (password == null)     throw new IOException("PEM is encrypted, but no password was specified");
    decryptPEM(ps,password.getBytes("ISO-8859-1"));
  }
  if (ps.pemType == PEM_DSA_PRIVATE_KEY) {
    SimpleDERReader dr=new SimpleDERReader(ps.data);
    byte[] seq=dr.readSequenceAsByteArray();
    if (dr.available() != 0)     throw new IOException("Padding in DSA PRIVATE KEY DER stream.");
    dr.resetInput(seq);
    BigInteger version=dr.readInt();
    if (version.compareTo(BigInteger.ZERO) != 0)     throw new IOException("Wrong version (" + version + ") in DSA PRIVATE KEY DER stream.");
    BigInteger p=dr.readInt();
    BigInteger q=dr.readInt();
    BigInteger g=dr.readInt();
    BigInteger y=dr.readInt();
    BigInteger x=dr.readInt();
    if (dr.available() != 0)     throw new IOException("Padding in DSA PRIVATE KEY DER stream.");
    return new DSAPrivateKey(p,q,g,y,x);
  }
  if (ps.pemType == PEM_RSA_PRIVATE_KEY) {
    SimpleDERReader dr=new SimpleDERReader(ps.data);
    byte[] seq=dr.readSequenceAsByteArray();
    if (dr.available() != 0)     throw new IOException("Padding in RSA PRIVATE KEY DER stream.");
    dr.resetInput(seq);
    BigInteger version=dr.readInt();
    if ((version.compareTo(BigInteger.ZERO) != 0) && (version.compareTo(BigInteger.ONE) != 0))     throw new IOException("Wrong version (" + version + ") in RSA PRIVATE KEY DER stream.");
    BigInteger n=dr.readInt();
    BigInteger e=dr.readInt();
    BigInteger d=dr.readInt();
    return new RSAPrivateKey(d,e,n);
  }
  throw new IOException("PEM problem: it is of unknown type");
}
