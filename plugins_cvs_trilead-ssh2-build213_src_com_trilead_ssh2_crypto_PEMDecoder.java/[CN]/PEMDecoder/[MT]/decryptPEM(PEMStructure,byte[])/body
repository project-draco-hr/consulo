{
  if (ps.dekInfo == null)   throw new IOException("Broken PEM, no mode and salt given, but encryption enabled");
  if (ps.dekInfo.length != 2)   throw new IOException("Broken PEM, DEK-Info is incomplete!");
  String algo=ps.dekInfo[0];
  byte[] salt=hexToByteArray(ps.dekInfo[1]);
  BlockCipher bc=null;
  if (algo.equals("DES-EDE3-CBC")) {
    DESede des3=new DESede();
    des3.init(false,generateKeyFromPasswordSaltWithMD5(pw,salt,24));
    bc=new CBCMode(des3,salt,false);
  }
 else   if (algo.equals("DES-CBC")) {
    DES des=new DES();
    des.init(false,generateKeyFromPasswordSaltWithMD5(pw,salt,8));
    bc=new CBCMode(des,salt,false);
  }
 else   if (algo.equals("AES-128-CBC")) {
    AES aes=new AES();
    aes.init(false,generateKeyFromPasswordSaltWithMD5(pw,salt,16));
    bc=new CBCMode(aes,salt,false);
  }
 else   if (algo.equals("AES-192-CBC")) {
    AES aes=new AES();
    aes.init(false,generateKeyFromPasswordSaltWithMD5(pw,salt,24));
    bc=new CBCMode(aes,salt,false);
  }
 else   if (algo.equals("AES-256-CBC")) {
    AES aes=new AES();
    aes.init(false,generateKeyFromPasswordSaltWithMD5(pw,salt,32));
    bc=new CBCMode(aes,salt,false);
  }
 else {
    throw new IOException("Cannot decrypt PEM structure, unknown cipher " + algo);
  }
  if ((ps.data.length % bc.getBlockSize()) != 0)   throw new IOException("Invalid PEM structure, size of encrypted block is not a multiple of " + bc.getBlockSize());
  byte[] dz=new byte[ps.data.length];
  for (int i=0; i < ps.data.length / bc.getBlockSize(); i++) {
    bc.transformBlock(ps.data,i * bc.getBlockSize(),dz,i * bc.getBlockSize());
  }
  dz=removePadding(dz,bc.getBlockSize());
  ps.data=dz;
  ps.dekInfo=null;
  ps.procType=null;
}
