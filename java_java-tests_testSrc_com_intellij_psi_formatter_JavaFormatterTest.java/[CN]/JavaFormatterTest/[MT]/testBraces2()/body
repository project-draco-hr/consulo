{
  getSettings().BRACE_STYLE=CodeStyleSettings.NEXT_LINE_IF_WRAPPED;
  doTextTest("class Foo {\n" + "    void foo() {\n" + "         if (clientSocket == null)\n"+ "        {\n"+ "            return false;\n"+ "        }"+ "    }\n"+ "}","class Foo {\n" + "    void foo() {\n" + "        if (clientSocket == null) {\n"+ "            return false;\n"+ "        }\n"+ "    }\n"+ "}");
  doTextTest("class Foo {\n" + "    void foo() {\n" + "         for (int i = 0; i < 10; i++)\n"+ "        {\n"+ "            return false;\n"+ "        }"+ "    }\n"+ "}","class Foo {\n" + "    void foo() {\n" + "        for (int i = 0; i < 10; i++) {\n"+ "            return false;\n"+ "        }\n"+ "    }\n"+ "}");
  doTextTest("class Foo {\n" + "    void foo() {\n" + "         for (Object i : collection)\n"+ "        {\n"+ "            return false;\n"+ "        }"+ "    }\n"+ "}","class Foo {\n" + "    void foo() {\n" + "        for (Object i : collection) {\n"+ "            return false;\n"+ "        }\n"+ "    }\n"+ "}");
  doTextTest("class Foo {\n" + "    void foo() {\n" + "         while (i  >0)\n"+ "        {\n"+ "            return false;\n"+ "        }"+ "    }\n"+ "}","class Foo {\n" + "    void foo() {\n" + "        while (i > 0) {\n"+ "            return false;\n"+ "        }\n"+ "    }\n"+ "}");
  getSettings().METHOD_BRACE_STYLE=CodeStyleSettings.NEXT_LINE_IF_WRAPPED;
  doTextTest("class Foo{\n" + "    /**\n" + "     *\n"+ "     */\n"+ "    void foo() {\n"+ "    }\n"+ "}","class Foo {\n" + "    /**\n" + "     *\n"+ "     */\n"+ "    void foo() {\n"+ "    }\n"+ "}");
  getSettings().CLASS_BRACE_STYLE=CodeStyleSettings.NEXT_LINE_IF_WRAPPED;
  doTextTest("/**\n" + " *\n" + " */\n"+ "class Foo\n{\n"+ "}","/**\n" + " *\n" + " */\n"+ "class Foo {\n"+ "}");
  doTextTest("/**\n" + " *\n" + " */\n"+ "class Foo\n extends B\n{\n"+ "}","/**\n" + " *\n" + " */\n"+ "class Foo\n        extends B\n"+ "{\n"+ "}");
}
