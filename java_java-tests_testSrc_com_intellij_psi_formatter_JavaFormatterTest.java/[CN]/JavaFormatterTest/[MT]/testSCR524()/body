{
  getSettings().METHOD_BRACE_STYLE=CodeStyleSettings.NEXT_LINE_SHIFTED;
  getSettings().KEEP_SIMPLE_METHODS_IN_ONE_LINE=true;
  getSettings().KEEP_SIMPLE_BLOCKS_IN_ONE_LINE=false;
  doTextTest("class Foo {\n" + "    void foo() { return;}" + "}","class Foo {\n" + "    void foo() { return;}\n" + "}");
  getSettings().BRACE_STYLE=CodeStyleSettings.NEXT_LINE_SHIFTED2;
  getSettings().KEEP_SIMPLE_METHODS_IN_ONE_LINE=false;
  getSettings().KEEP_SIMPLE_BLOCKS_IN_ONE_LINE=true;
  getSettings().METHOD_BRACE_STYLE=CodeStyleSettings.END_OF_LINE;
  doTextTest("class Foo{\n" + "void foo() {\n" + "if(a) {return;}\n"+ "for(a = 0; a < 10; a++) {return;}\n"+ "switch(a) {case 1: return;}\n"+ "do{return;} while (a);\n"+ "while(a){return;}\n"+ "try{return;} catch(Ex e){return;} finally{return;}\n"+ "}\n"+ "}","class Foo {\n" + "    void foo() {\n" + "        if (a) {return;}\n"+ "        for (a = 0; a < 10; a++) {return;}\n"+ "        switch (a)\n"+ "            {\n"+ "                case 1:\n"+ "                    return;\n"+ "            }\n"+ "        do {return;} while (a);\n"+ "        while (a) {return;}\n"+ "        try {return;} catch (Ex e) {return;} finally {return;}\n"+ "    }\n"+ "}");
}
