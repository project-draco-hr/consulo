{
  getSettings().ASSERT_STATEMENT_WRAP=CodeStyleSettings.WRAP_AS_NEEDED;
  getSettings().BINARY_OPERATION_WRAP=CodeStyleSettings.DO_NOT_WRAP;
  getSettings().RIGHT_MARGIN=40;
  final JavaPsiFacade facade=getJavaFacade();
  final LanguageLevel effectiveLanguageLevel=LanguageLevelProjectExtension.getInstance(facade.getProject()).getLanguageLevel();
  try {
    LanguageLevelProjectExtension.getInstance(facade.getProject()).setLanguageLevel(LanguageLevel.JDK_1_5);
    getSettings().ASSERT_STATEMENT_COLON_ON_NEXT_LINE=false;
    doTextTest("class Foo {\n" + "    void foo() {\n" + "        assert methodWithVeryVeryLongName() : foo;\n"+ "        assert i + j + k + l + n + m <= 2 : \"assert description\";\n"+ "    }\n"+ "}\n","class Foo {\n" + "    void foo() {\n" + "        assert methodWithVeryVeryLongName() :\n"+ "                foo;\n"+ "        assert i + j + k + l + n + m <= 2 :\n"+ "                \"assert description\";\n"+ "    }\n"+ "}\n");
    getSettings().ASSERT_STATEMENT_COLON_ON_NEXT_LINE=true;
    doTextTest("class Foo {\n" + "    void foo() {\n" + "        assert methodWithVeryVeryLongName() : foo;\n"+ "        assert i + j + k + l + n + m <= 2 : \"assert description\";\n"+ "    }\n"+ "}\n","class Foo {\n" + "    void foo() {\n" + "        assert methodWithVeryVeryLongName()\n"+ "                : foo;\n"+ "        assert i + j + k + l + n + m <= 2\n"+ "                : \"assert description\";\n"+ "    }\n"+ "}\n");
  }
  finally {
    LanguageLevelProjectExtension.getInstance(facade.getProject()).setLanguageLevel(effectiveLanguageLevel);
  }
}
