{
  final JavaPsiFacade facade=getJavaFacade();
  final LanguageLevel level=LanguageLevelProjectExtension.getInstance(facade.getProject()).getLanguageLevel();
  LanguageLevelProjectExtension.getInstance(facade.getProject()).setLanguageLevel(LanguageLevel.JDK_1_5);
  try {
    doTextTest("class C<Y, X> {\n" + "}","class C<Y, X> {\n" + "}");
    getSettings().SPACE_BEFORE_METHOD_LBRACE=true;
    getSettings().KEEP_SIMPLE_METHODS_IN_ONE_LINE=true;
    doTextTest("enum En {\n" + "    A(10) {},\n" + "    B(10) {},\n"+ "    C(10);\n"+ "\n"+ "    En(int i) { }\n"+ "}","enum En {\n" + "    A(10) {},\n" + "    B(10) {},\n"+ "    C(10);\n"+ "\n"+ "    En(int i) { }\n"+ "}");
    doTextTest("class C {\n" + "    void foo (Map<?, String> s) {\n" + "        Set<? extends Map<?, String>.Entry<?, String>> temp = s.entries();\n"+ "    }\n"+ "}","class C {\n" + "    void foo(Map<?, String> s) {\n" + "        Set<? extends Map<?, String>.Entry<?, String>> temp = s.entries();\n"+ "    }\n"+ "}");
    doTextTest("class B {\n" + "    public final A<String> myDelegate = new A<String>();\n" + "\n"+ "    public List<? extends String> method1() {\n"+ "        return myDelegate.method1();\n"+ "    }\n"+ "\n"+ "    public String method2(String t) {\n"+ "        return myDelegate.method2(t);\n"+ "    }\n"+ "}","class B {\n" + "    public final A<String> myDelegate = new A<String>();\n" + "\n"+ "    public List<? extends String> method1() {\n"+ "        return myDelegate.method1();\n"+ "    }\n"+ "\n"+ "    public String method2(String t) {\n"+ "        return myDelegate.method2(t);\n"+ "    }\n"+ "}");
  }
  finally {
    LanguageLevelProjectExtension.getInstance(facade.getProject()).setLanguageLevel(level);
  }
}
