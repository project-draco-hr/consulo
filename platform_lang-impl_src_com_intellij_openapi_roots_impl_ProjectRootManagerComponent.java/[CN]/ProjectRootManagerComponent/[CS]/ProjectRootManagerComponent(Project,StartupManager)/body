{
  super(project);
  myConnection=project.getMessageBus().connect(project);
  myConnection.subscribe(FileTypeManager.TOPIC,new FileTypeListener(){
    @Override @RequiredWriteAction public void beforeFileTypesChanged(    @NotNull FileTypeEvent event){
      beforeRootsChange(true);
    }
    @Override @RequiredWriteAction public void fileTypesChanged(    @NotNull FileTypeEvent event){
      rootsChanged(true);
    }
  }
);
  VirtualFileManager.getInstance().addVirtualFileManagerListener(new VirtualFileManagerAdapter(){
    @Override public void afterRefreshFinish(    boolean asynchronous){
      doUpdateOnRefresh();
    }
  }
,project);
  startupManager.registerStartupActivity(new Runnable(){
    @Override public void run(){
      myStartupActivityPerformed=true;
    }
  }
);
  myHandler=new BatchUpdateListener(){
    @Override public void onBatchUpdateStarted(){
      myRootsChanged.levelUp();
      myFileTypesChanged.levelUp();
    }
    @Override @RequiredWriteAction public void onBatchUpdateFinished(){
      myRootsChanged.levelDown();
      myFileTypesChanged.levelDown();
    }
  }
;
  myConnection.subscribe(SdkTable.SDK_TABLE_TOPIC,new SdkTableListener(){
    private Map<OrderEntryWithTracking,Object> myMap=new HashMap<OrderEntryWithTracking,Object>();
    @Override public void beforeSdkAdded(    @NotNull Sdk sdk){
      beforeSdkChanged();
    }
    @Override public void sdkAdded(    @NotNull Sdk sdk){
      afterSdkChanged();
    }
    @Override public void beforeSdkRemoved(    @NotNull Sdk sdk){
      beforeSdkChanged();
    }
    @Override public void sdkRemoved(    @NotNull Sdk sdk){
      afterSdkChanged();
    }
    @Override public void beforeSdkNameChanged(    @NotNull Sdk sdk,    @NotNull String previousName){
      beforeSdkChanged();
    }
    @Override public void sdkNameChanged(    @NotNull Sdk sdk,    @NotNull String previousName){
      afterSdkChanged();
    }
    private void beforeSdkChanged(){
      for (      OrderEntryWithTracking orderEntry : myModuleExtensionWithSdkOrderEntries) {
        myMap.put(orderEntry,orderEntry.getEqualObject());
      }
    }
    private void afterSdkChanged(){
      for (      Map.Entry<OrderEntryWithTracking,Object> entry : myMap.entrySet()) {
        OrderEntryWithTracking key=entry.getKey();
        Object oldValue=entry.getValue();
        Object currentValue=key.getEqualObject();
        if (!Comparing.equal(currentValue,oldValue)) {
          makeRootsChange(EmptyRunnable.INSTANCE,false,true);
        }
      }
      myMap.clear();
    }
  }
);
  myConnection.subscribe(VirtualFilePointerListener.TOPIC,new MyVirtualFilePointerListener());
  myDoLogCachesUpdate=ApplicationManager.getApplication().isInternal() && !ApplicationManager.getApplication().isUnitTestMode();
}
