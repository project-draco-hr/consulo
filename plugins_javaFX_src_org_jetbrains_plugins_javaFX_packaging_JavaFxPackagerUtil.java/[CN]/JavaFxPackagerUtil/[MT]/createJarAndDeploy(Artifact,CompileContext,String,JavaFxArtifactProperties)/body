{
  final String zipPath=artifact.getOutputFilePath();
  final File tempUnzippedArtifactOutput;
  try {
    tempUnzippedArtifactOutput=FileUtil.createTempDirectory("artifact","unzipped");
    ZipUtil.extract(new File(zipPath),tempUnzippedArtifactOutput,null);
  }
 catch (  IOException e) {
    registerJavaFxPackagerError(compileContext,e);
    return;
  }
  final GeneralCommandLine commandLine=new GeneralCommandLine();
  try {
    commandLine.setExePath(binPath + File.separator + "javafxpackager");
    commandLine.addParameter("-createJar");
    commandLine.addParameter("-appclass");
    commandLine.addParameter(properties.getAppClass());
    commandLine.addParameter("-srcdir");
    commandLine.addParameter(tempUnzippedArtifactOutput.getPath());
    commandLine.addParameter("-outdir");
    final File tempDirWithJar;
    try {
      tempDirWithJar=FileUtil.createTempDirectory("javafxpackager","out");
    }
 catch (    IOException e) {
      registerJavaFxPackagerError(compileContext,e);
      return;
    }
    commandLine.addParameter(tempDirWithJar.getPath());
    commandLine.addParameter("-outfile");
    commandLine.addParameter(artifact.getName());
    commandLine.addParameter("-v");
    commandLine.addParameter("-nocss2bin");
    appendManifestProperties(commandLine,properties);
    final MyOnTerminatedProcessAdapter adapter=new MyOnTerminatedProcessAdapter(compileContext){
      @Override protected void onTerminated(){
        deploy(artifact,compileContext,binPath,properties,tempDirWithJar,tempUnzippedArtifactOutput);
      }
    }
;
    startProcess(commandLine,adapter);
  }
 catch (  ExecutionException ex) {
    registerJavaFxPackagerError(compileContext,ex);
  }
}
