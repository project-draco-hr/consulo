{
  UsageViewPresentation presentation=new UsageViewPresentation();
  presentation.setDetachedMode(true);
  final UsageViewSettings usageViewSettings=UsageViewSettings.getInstance();
  final UsageViewSettings save=new UsageViewSettings();
  save.loadState(usageViewSettings);
  usageViewSettings.GROUP_BY_FILE_STRUCTURE=false;
  usageViewSettings.GROUP_BY_MODULE=false;
  usageViewSettings.GROUP_BY_PACKAGE=false;
  usageViewSettings.GROUP_BY_USAGE_TYPE=false;
  usageViewSettings.GROUP_BY_SCOPE=false;
  UsageViewManager manager=UsageViewManager.getInstance(handler.getProject());
  final UsageViewImpl usageView=(UsageViewImpl)manager.createUsageView(UsageTarget.EMPTY_ARRAY,Usage.EMPTY_ARRAY,presentation,null);
  Disposer.register(usageView,new Disposable(){
    public void dispose(){
      usageViewSettings.GROUP_BY_FILE_STRUCTURE=save.GROUP_BY_FILE_STRUCTURE;
      usageViewSettings.GROUP_BY_MODULE=save.GROUP_BY_MODULE;
      usageViewSettings.GROUP_BY_PACKAGE=save.GROUP_BY_PACKAGE;
      usageViewSettings.GROUP_BY_USAGE_TYPE=save.GROUP_BY_USAGE_TYPE;
      usageViewSettings.GROUP_BY_SCOPE=save.GROUP_BY_SCOPE;
    }
  }
);
  final List<Usage> usages=new ArrayList<Usage>();
  final Set<UsageNode> visibleNodes=new LinkedHashSet<UsageNode>();
  Processor<Usage> collect=new Processor<Usage>(){
    public boolean process(    @NotNull Usage usage){
synchronized (usages) {
        if (visibleNodes.size() > maxUsages)         return false;
        UsageNode node=usageView.doAppendUsage(usage);
        if (node != null) {
          if (visibleNodes.size() == maxUsages) {
            usageView.removeUsage(usage);
            visibleNodes.add(UsageViewImpl.NULL_NODE);
            return false;
          }
          visibleNodes.add(node);
        }
        usages.add(usage);
      }
      return true;
    }
  }
;
  FindUsagesManager findUsagesManager=((FindManagerImpl)FindManager.getInstance(handler.getProject())).getFindUsagesManager();
  presentation=findUsagesManager.processUsages(handler,collect);
  if (presentation == null) {
    Disposer.dispose(usageView);
    return;
  }
  final String title=presentation.getTabText();
  JBPopup popup=createUsagePopup(usages,visibleNodes,title,handler,editor,popupPosition,maxUsages,usageView);
  if (popup == null) {
    Disposer.dispose(usageView);
  }
 else {
    Disposer.register(popup,usageView);
    popup.show(popupPosition);
  }
}
