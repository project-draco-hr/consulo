{
  ApplicationManager.getApplication().assertIsDispatchThread();
  boolean shouldShowMoreSeparator=usages.contains(MORE_USAGES_SEPARATOR);
  if (shouldShowMoreSeparator) {
    nodes.add(MORE_USAGES_SEPARATOR_NODE);
  }
  boolean hasOutsideScopeUsages=usages.contains(USAGES_OUTSIDE_SCOPE_SEPARATOR);
  if (hasOutsideScopeUsages && !shouldShowMoreSeparator) {
    nodes.add(USAGES_OUTSIDE_SCOPE_NODE);
  }
  String title=presentation.getTabText();
  String fullTitle=getFullTitle(usages,title,shouldShowMoreSeparator || hasOutsideScopeUsages,nodes.size() - (shouldShowMoreSeparator || hasOutsideScopeUsages ? 1 : 0),findUsagesInProgress);
  if (popup != null) {
    ((AbstractPopup)popup).setCaption(fullTitle);
  }
  List<UsageNode> data=collectData(usages,nodes,usageView,presentation);
  MyModel tableModel=setTableModel(table,usageView,data,outOfScopeUsages,searchScope);
  List<UsageNode> existingData=tableModel.getItems();
  int row=table.getSelectedRow();
  int newSelection=updateModel(tableModel,existingData,data,row == -1 ? 0 : row);
  if (newSelection < 0 || newSelection >= tableModel.getRowCount()) {
    TableScrollingUtil.ensureSelectionExists(table);
    newSelection=table.getSelectedRow();
  }
 else {
    table.getSelectionModel().setSelectionInterval(newSelection,newSelection);
  }
  TableScrollingUtil.ensureIndexIsVisible(table,newSelection,0);
  if (popup != null) {
    setSizeAndDimensions(table,popup,popupPosition,data);
  }
}
