{
  ApplicationManager.getApplication().assertIsDispatchThread();
  if (popup.isDisposed())   return;
  final List<UsageNode> nodes=new ArrayList<UsageNode>();
  String fullTitle;
synchronized (usages) {
    if (!popup.isVisible() && (usages.size() <= 1 || !showPopupIfNeedTo(popup,popupPosition))) {
      return;
    }
    addUsageNodes(usageView.getRoot(),usageView,nodes);
    boolean shouldShowMoreSeparator=usages.contains(MORE_USAGES_SEPARATOR);
    if (shouldShowMoreSeparator) {
      nodes.add(MORE_USAGES_SEPARATOR_NODE);
    }
    String title=presentation.getTabText();
    fullTitle=getFullTitle(usages,title,shouldShowMoreSeparator,nodes.size() - (shouldShowMoreSeparator ? 1 : 0),findUsagesInProgress);
  }
  ((AbstractPopup)popup).setCaption(fullTitle);
  List<UsageNode> data=collectData(usages,nodes,usageView,presentation);
  MyModel tableModel=setTableModel(table,usageView,data);
  List<UsageNode> existingData=tableModel.getItems();
  int row=table.getSelectedRow();
  int newSelection=updateModel(tableModel,existingData,data,row == -1 ? 0 : row);
  if (newSelection < 0 || newSelection >= tableModel.getRowCount()) {
    TableScrollingUtil.ensureSelectionExists(table);
    newSelection=table.getSelectedRow();
  }
 else {
    table.getSelectionModel().setSelectionInterval(newSelection,newSelection);
  }
  TableScrollingUtil.ensureIndexIsVisible(table,newSelection,0);
  setSizeAndDimensions(table,popup,popupPosition,data);
}
