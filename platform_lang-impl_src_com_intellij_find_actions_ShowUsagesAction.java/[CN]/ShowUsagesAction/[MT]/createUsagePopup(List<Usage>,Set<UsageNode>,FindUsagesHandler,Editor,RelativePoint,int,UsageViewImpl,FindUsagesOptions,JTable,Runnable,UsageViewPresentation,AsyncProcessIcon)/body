{
  PopupChooserBuilder builder=new PopupChooserBuilder(table);
  final String title=presentation.getTabText();
  if (title != null) {
    String result=getFullTitle(usages,title,false,visibleNodes.size() - 1,true);
    builder.setTitle(result);
    builder.setAdText(getSecondInvocationTitle(options,handler));
  }
  builder.setMovable(true).setResizable(true);
  builder.setMovable(true).setResizable(true);
  builder.setItemChoosenCallback(itemChoseCallback);
  final JBPopup[] popup=new JBPopup[1];
  KeyboardShortcut shortcut=UsageViewImpl.getShowUsagesWithSettingsShortcut();
  if (shortcut != null) {
    new DumbAwareAction(){
      @Override public void actionPerformed(      @NotNull AnActionEvent e){
        cancel(popup);
        showDialogAndFindUsages(handler,popupPosition,editor,maxUsages);
      }
    }
.registerCustomShortcutSet(new CustomShortcutSet(shortcut.getFirstKeyStroke()),table);
  }
  shortcut=getShowUsagesShortcut();
  if (shortcut != null) {
    new DumbAwareAction(){
      @Override public void actionPerformed(      @NotNull AnActionEvent e){
        cancel(popup);
        searchEverywhere(options,handler,editor,popupPosition,maxUsages);
      }
    }
.registerCustomShortcutSet(new CustomShortcutSet(shortcut.getFirstKeyStroke()),table);
  }
  InplaceButton settingsButton=createSettingsButton(handler,popupPosition,editor,maxUsages,new Runnable(){
    @Override public void run(){
      cancel(popup);
    }
  }
);
  ActiveComponent spinningProgress=new ActiveComponent(){
    @Override public void setActive(    boolean active){
    }
    @Override public JComponent getComponent(){
      return processIcon;
    }
  }
;
  final DefaultActionGroup pinGroup=new DefaultActionGroup();
  final ActiveComponent pin=createPinButton(handler,usageView,options,popup,pinGroup);
  builder.setCommandButton(new CompositeActiveComponent(spinningProgress,settingsButton,pin));
  DefaultActionGroup toolbar=new DefaultActionGroup();
  usageView.addFilteringActions(toolbar);
  toolbar.add(UsageGroupingRuleProviderImpl.createGroupByFileStructureAction(usageView));
  ActionToolbar actionToolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.USAGE_VIEW_TOOLBAR,toolbar,true);
  actionToolbar.setReservePlaceAutoPopupIcon(false);
  final JComponent toolBar=actionToolbar.getComponent();
  toolBar.setOpaque(false);
  builder.setSettingButton(toolBar);
  popup[0]=builder.createPopup();
  JComponent content=popup[0].getContent();
  myWidth=(int)(toolBar.getPreferredSize().getWidth() + new JLabel(getFullTitle(usages,title,false,visibleNodes.size() - 1,true)).getPreferredSize().getWidth() + settingsButton.getPreferredSize().getWidth());
  myWidth=-1;
  for (  AnAction action : toolbar.getChildren(null)) {
    action.unregisterCustomShortcutSet(usageView.getComponent());
    action.registerCustomShortcutSet(action.getShortcutSet(),content);
  }
  for (  AnAction action : pinGroup.getChildren(null)) {
    action.unregisterCustomShortcutSet(usageView.getComponent());
    action.registerCustomShortcutSet(action.getShortcutSet(),content);
  }
  return popup[0];
}
