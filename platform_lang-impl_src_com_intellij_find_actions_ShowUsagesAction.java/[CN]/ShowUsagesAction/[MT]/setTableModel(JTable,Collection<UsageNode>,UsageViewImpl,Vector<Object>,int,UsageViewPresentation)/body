{
  ApplicationManager.getApplication().assertIsDispatchThread();
  if (filtered != 0) {
    data.add(UsageViewBundle.message("usages.were.filtered.out",filtered));
  }
  data.addAll(visibleNodes);
  if (data.isEmpty()) {
    String progressText=UsageViewManagerImpl.getProgressTitle(presentation);
    data.add(progressText);
  }
  Collections.sort(data,USAGE_NODE_COMPARATOR);
  AbstractTableModel model=new AbstractTableModel(){
    @Override public int getRowCount(){
      return data.size();
    }
    @Override public int getColumnCount(){
      return !data.isEmpty() && data.get(0) instanceof UsageNode ? 3 : 1;
    }
    @Override public Object getValueAt(    int rowIndex,    int columnIndex){
      return data.get(rowIndex);
    }
  }
;
  table.setModel(model);
  ShowUsagesTableCellRenderer renderer=new ShowUsagesTableCellRenderer(usageView);
  for (int i=0; i < table.getColumnModel().getColumnCount(); i++) {
    TableColumn column=table.getColumnModel().getColumn(i);
    column.setCellRenderer(renderer);
  }
  int colsNum=table.getColumnModel().getColumnCount();
  int totalWidth=0;
  for (int col=0; col < colsNum - 1; col++) {
    TableColumn column=table.getColumnModel().getColumn(col);
    int preferred=column.getPreferredWidth();
    int width=Math.max(preferred,calcMaxWidth(table,col));
    totalWidth+=width;
    column.setMinWidth(width);
    column.setMaxWidth(width);
    column.setWidth(width);
    column.setPreferredWidth(width);
  }
  totalWidth+=calcMaxWidth(table,colsNum - 1);
  return totalWidth;
}
