{
  table.setRowHeight(PlatformIcons.CLASS_ICON.getIconHeight() + 2);
  table.setShowGrid(false);
  table.setShowVerticalLines(false);
  table.setShowHorizontalLines(false);
  table.setTableHeader(null);
  table.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
  table.setIntercellSpacing(new Dimension(0,0));
  PopupChooserBuilder builder=new PopupChooserBuilder(table);
  final String title=presentation.getTabText();
  if (title != null) {
    String result=getFullTitle(usages,title,hadMoreSeparator,visibleNodes.size() - 1,true);
    builder.setTitle(result);
    builder.setAdText(getSecondInvocationTitle(options,handler));
  }
  builder.setMovable(true).setResizable(true);
  final AtomicReference<UsageInfo> selectedUsage=new AtomicReference<UsageInfo>();
  final AtomicBoolean moreUsages=new AtomicBoolean();
  table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      selectedUsage.set(null);
      int[] selected=table.getSelectedRows();
      for (      int i : selected) {
        Object value=table.getValueAt(i,0);
        if (value instanceof UsageNode) {
          Usage usage=((UsageNode)value).getUsage();
          if (usage == MORE_USAGES_SEPARATOR) {
            moreUsages.set(true);
            selectedUsage.set(null);
          }
 else {
            moreUsages.set(false);
            selectedUsage.set(usage instanceof UsageInfo2UsageAdapter ? ((UsageInfo2UsageAdapter)usage).getUsageInfo().copy() : null);
          }
          break;
        }
      }
    }
  }
);
  builder.setMovable(true).setResizable(true);
  builder.setItemChoosenCallback(new Runnable(){
    @Override public void run(){
      if (moreUsages.get()) {
        appendMoreUsages(editor,popupPosition,handler,maxUsages,options);
        return;
      }
      UsageInfo usage=selectedUsage.get();
      if (usage != null) {
        UsageViewUtil.navigateTo(usage,true);
      }
    }
  }
);
  final JBPopup[] popup=new JBPopup[1];
  KeyboardShortcut shortcut=UsageViewImpl.getShowUsagesWithSettingsShortcut();
  if (shortcut != null) {
    new DumbAwareAction(){
      @Override public void actionPerformed(      AnActionEvent e){
        popup[0].cancel();
        showDialogAndFindUsages(handler,popupPosition,editor,maxUsages);
      }
    }
.registerCustomShortcutSet(new CustomShortcutSet(shortcut.getFirstKeyStroke()),table);
  }
  shortcut=getShowUsagesShortcut();
  if (shortcut != null) {
    new DumbAwareAction(){
      @Override public void actionPerformed(      AnActionEvent e){
        popup[0].cancel();
        searchEverywhere(options,handler,editor,popupPosition,maxUsages);
      }
    }
.registerCustomShortcutSet(new CustomShortcutSet(shortcut.getFirstKeyStroke()),table);
  }
  InplaceButton settingsButton=createSettingsButton(handler,popupPosition,editor,maxUsages,new Runnable(){
    @Override public void run(){
      popup[0].cancel();
    }
  }
);
  ActiveComponent spinningProgress=new ActiveComponent(){
    @Override public void setActive(    boolean active){
    }
    @Override public JComponent getComponent(){
      return processIcon;
    }
  }
;
  final DefaultActionGroup pinGroup=new DefaultActionGroup();
  final ActiveComponent pin=createPinButton(handler,usageView,options,popup,pinGroup);
  builder.setCommandButton(new CompositeActiveComponent(spinningProgress,settingsButton,pin));
  DefaultActionGroup toolbar=new DefaultActionGroup();
  usageView.addFilteringActions(toolbar);
  toolbar.add(UsageGroupingRuleProviderImpl.createGroupByFileStructureAction(usageView));
  ActionToolbar actionToolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.USAGE_VIEW_TOOLBAR,toolbar,true);
  actionToolbar.setReservePlaceAutoPopupIcon(false);
  final JComponent toolBar=actionToolbar.getComponent();
  toolBar.setOpaque(false);
  builder.setSettingButton(toolBar);
  popup[0]=builder.createPopup();
  JComponent content=popup[0].getContent();
  myWidth=(int)(toolBar.getPreferredSize().getWidth() + new JLabel(getFullTitle(usages,title,hadMoreSeparator,visibleNodes.size() - 1,true)).getPreferredSize().getWidth() + settingsButton.getPreferredSize().getWidth());
  myWidth=-1;
  for (  AnAction action : toolbar.getChildren(null)) {
    action.unregisterCustomShortcutSet(usageView.getComponent());
    action.registerCustomShortcutSet(action.getShortcutSet(),content);
  }
  for (  AnAction action : pinGroup.getChildren(null)) {
    action.unregisterCustomShortcutSet(usageView.getComponent());
    action.registerCustomShortcutSet(action.getShortcutSet(),content);
  }
  return popup[0];
}
