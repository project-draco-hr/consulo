{
  File tempDir=new WriteAction<File>(){
    @Override protected void run(    Result<File> result) throws Throwable {
      File res=createTempDirectory();
      new File(res,"x.jar").createNewFile();
      result.setResult(res);
    }
  }
.execute().getResultObject();
  final VirtualFile vDir=LocalFileSystem.getInstance().refreshAndFindFileByIoFile(tempDir);
  final VirtualFile jar=vDir.findChild("x.jar");
  assertNotNull(jar);
  final NewVirtualFile root=ManagingFS.getInstance().findRoot(jar.getPath() + "!/",(NewVirtualFileSystem)StandardFileSystems.jar());
  PlatformTestUtil.startPerformanceTest("find root is slow",500,new ThrowableRunnable(){
    @Override public void run() throws Throwable {
      final String path=jar.getPath() + "!/";
      final NewVirtualFileSystem fileSystem=(NewVirtualFileSystem)StandardFileSystems.jar();
      JobLauncher.getInstance().invokeConcurrentlyUnderProgress(Collections.nCopies(500,null),null,false,new Processor<Object>(){
        @Override public boolean process(        Object o){
          for (int i=0; i < 1000; i++) {
            NewVirtualFile rootJar=ManagingFS.getInstance().findRoot(path,fileSystem);
            assertNotNull(rootJar);
            assertSame(root,rootJar);
          }
          return true;
        }
      }
);
    }
  }
).assertTiming();
}
