{
  final AstPath parentPath=getNodePath(parent);
  if (parentPath == null) {
    return;
  }
  final int depth=parentPath.getDepth() + 1;
  final List<CompositeElement> children=ContainerUtil.newArrayList();
  parent.acceptTree(new RecursiveTreeElementWalkingVisitor(false){
    @Override public void visitComposite(    CompositeElement composite){
      if (composite != parent && (composite instanceof LazyParseableElement || composite.getElementType() instanceof IStubElementType)) {
        int index=children.size();
        composite.putUserData(NODE_PATH,depth % 4 == 0 ? new MilestoneChildPath(parentPath,index,depth) : new ChildPath(parentPath,index));
        children.add(composite);
      }
      super.visitComposite(composite);
    }
  }
);
  parent.putUserData(PATH_CHILDREN,children.toArray(new CompositeElement[0]));
}
