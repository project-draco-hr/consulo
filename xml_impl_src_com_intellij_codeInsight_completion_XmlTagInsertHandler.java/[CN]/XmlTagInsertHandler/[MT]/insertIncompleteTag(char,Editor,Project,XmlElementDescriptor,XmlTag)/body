{
  TemplateManager templateManager=TemplateManager.getInstance(project);
  Template template=templateManager.createTemplate("","");
  template.setToIndent(true);
  PsiFile containingFile=tag.getContainingFile();
  boolean htmlCode=HtmlUtil.hasHtml(containingFile);
  template.setToReformat(!htmlCode);
  StringBuilder indirectRequiredAttrs=addRequiredAttributes(descriptor,tag,template,containingFile);
  final boolean chooseAttributeName=addTail(completionChar,descriptor,tag,template,indirectRequiredAttrs);
  templateManager.startTemplate(editor,template,new TemplateEditingAdapter(){
    private RangeMarker myAttrValueMarker;
    @Override public void waitingForInput(    Template template){
      int offset=editor.getCaretModel().getOffset();
      myAttrValueMarker=editor.getDocument().createRangeMarker(offset + 1,offset + 4);
    }
    public void templateFinished(    final Template template,    boolean brokenOff){
      final int offset=editor.getCaretModel().getOffset();
      if (chooseAttributeName && offset >= 3) {
        char c=editor.getDocument().getCharsSequence().charAt(offset - 3);
        if (c == '/' || (c == ' ' && brokenOff)) {
          new WriteCommandAction.Simple(project){
            protected void run() throws Throwable {
              editor.getDocument().replaceString(offset - 2,offset + 1,">");
            }
          }
.execute();
        }
      }
    }
    public void templateCancelled(    final Template template){
      if (myAttrValueMarker == null) {
        return;
      }
      if (chooseAttributeName) {
        final int startOffset=myAttrValueMarker.getStartOffset();
        final int endOffset=myAttrValueMarker.getEndOffset();
        new WriteCommandAction.Simple(project){
          protected void run() throws Throwable {
            editor.getDocument().replaceString(startOffset,endOffset,">");
          }
        }
.execute();
      }
    }
  }
);
}
