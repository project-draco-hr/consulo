{
  TemplateManager templateManager=TemplateManager.getInstance(project);
  Template template=templateManager.createTemplate("","");
  template.setToIndent(true);
  boolean htmlCode=HtmlUtil.hasHtml(tag.getContainingFile());
  Set<String> notRequiredAttributes=Collections.emptySet();
  if (tag instanceof HtmlTag) {
    final InspectionProfile profile=InspectionProjectProfileManager.getInstance(tag.getProject()).getInspectionProfile(tag);
    LocalInspectionToolWrapper localInspectionToolWrapper=(LocalInspectionToolWrapper)profile.getInspectionTool(RequiredAttributesInspection.SHORT_NAME);
    RequiredAttributesInspection inspection=localInspectionToolWrapper != null ? (RequiredAttributesInspection)localInspectionToolWrapper.getTool() : null;
    if (inspection != null) {
      StringTokenizer tokenizer=new StringTokenizer(inspection.getAdditionalEntries(0));
      notRequiredAttributes=new HashSet<String>(1);
      while (tokenizer.hasMoreElements())       notRequiredAttributes.add(tokenizer.nextToken());
    }
  }
  boolean toReformat=true;
  boolean weInsertedSomeCodeThatCouldBeInvalidated=false;
  if (htmlCode) {
    toReformat=false;
  }
  template.setToReformat(toReformat);
  XmlAttributeDescriptor[] attributes=descriptor.getAttributesDescriptors(tag);
  StringBuilder indirectRequiredAttrs=null;
  final XmlExtension extension=XmlExtension.getExtension((XmlFile)tag.getContainingFile());
  if (WebEditorOptions.getInstance().isAutomaticallyInsertRequiredAttributes()) {
    for (    XmlAttributeDescriptor attributeDecl : attributes) {
      String attributeName=attributeDecl.getName(tag);
      if (attributeDecl.isRequired() && tag.getAttributeValue(attributeName) == null) {
        if (!notRequiredAttributes.contains(attributeName)) {
          if (!extension.isIndirectSyntax(attributeDecl)) {
            template.addTextSegment(" " + attributeName + "=\"");
            Expression expression=new MacroCallNode(MacroFactory.createMacro("complete"));
            template.addVariable(attributeName,expression,expression,true);
            template.addTextSegment("\"");
          }
 else {
            if (indirectRequiredAttrs == null)             indirectRequiredAttrs=new StringBuilder();
            indirectRequiredAttrs.append("\n<jsp:attribute name=\"").append(attributeName).append("\"></jsp:attribute>\n");
          }
        }
      }
 else       if (attributeDecl.isFixed() && attributeDecl.getDefaultValue() != null && !htmlCode) {
        template.addTextSegment(" " + attributeName + "=\""+ attributeDecl.getDefaultValue()+ "\"");
      }
    }
  }
  if (completionChar == '>' || (completionChar == '/' && indirectRequiredAttrs != null)) {
    template.addTextSegment(">");
    boolean toInsertCDataEnd=false;
    if (descriptor instanceof XmlElementDescriptorWithCDataContent) {
      final XmlElementDescriptorWithCDataContent cDataContainer=(XmlElementDescriptorWithCDataContent)descriptor;
      if (cDataContainer.requiresCdataBracesInContext(tag)) {
        template.addTextSegment("<![CDATA[\n");
        toInsertCDataEnd=true;
      }
    }
    if (indirectRequiredAttrs != null)     template.addTextSegment(indirectRequiredAttrs.toString());
    template.addEndVariable();
    if (toInsertCDataEnd)     template.addTextSegment("\n]]>");
    if ((!(tag instanceof HtmlTag) || !HtmlUtil.isSingleHtmlTag(tag.getName())) && tag.getAttributes().length == 0) {
      if (WebEditorOptions.getInstance().isAutomaticallyInsertClosingTag()) {
        template.addTextSegment("</");
        template.addTextSegment(descriptor.getName(tag));
        template.addTextSegment(">");
      }
    }
  }
 else   if (completionChar == '/') {
    template.addTextSegment("/>");
  }
 else   if (completionChar == ' ' && template.getSegmentsCount() == 0) {
    if (WebEditorOptions.getInstance().isAutomaticallyStartAttribute() && (attributes.length > 0 || isTagFromHtml(tag) && !HtmlUtil.isTagWithoutAttributes(tag.getName()))) {
      template.addTextSegment(" ");
      final MacroCallNode completeAttrExpr=new MacroCallNode(MacroFactory.createMacro("complete"));
      template.addVariable("attrComplete",completeAttrExpr,completeAttrExpr,true);
      weInsertedSomeCodeThatCouldBeInvalidated=true;
      template.addTextSegment("=\"");
      template.addEndVariable();
      template.addTextSegment("\"");
    }
  }
 else   if ((completionChar == Lookup.AUTO_INSERT_SELECT_CHAR || completionChar == Lookup.NORMAL_SELECT_CHAR) && WebEditorOptions.getInstance().isAutomaticallyInsertClosingTag() && HtmlUtil.isSingleHtmlTag(tag.getName())) {
    template.addTextSegment(tag instanceof HtmlTag ? ">" : "/>");
  }
  final boolean weInsertedSomeCodeThatCouldBeInvalidated1=weInsertedSomeCodeThatCouldBeInvalidated;
  templateManager.startTemplate(editor,template,new TemplateEditingAdapter(){
    public void templateFinished(    final Template template){
      final int offset=editor.getCaretModel().getOffset();
      if (weInsertedSomeCodeThatCouldBeInvalidated1 && offset >= 3 && editor.getDocument().getCharsSequence().charAt(offset - 3) == '/') {
        new WriteCommandAction.Simple(project){
          protected void run() throws Throwable {
            editor.getDocument().replaceString(offset - 2,offset + 1,">");
          }
        }
.execute();
      }
    }
    public void templateCancelled(    final Template template){
    }
  }
);
}
