{
  if (duplicates.size() > 0) {
    final String message=RefactoringBundle.message("0.has.detected.1.code.fragments.in.this.file.that.can.be.replaced.with.a.call.to.extracted.method",ApplicationNamesInfo.getInstance().getProductName(),duplicates.size());
    final boolean isUnittest=ApplicationManager.getApplication().isUnitTestMode();
    final Project project=callElement.getProject();
    final int exitCode=!isUnittest ? Messages.showYesNoDialog(project,message,RefactoringBundle.message("refactoring.extract.method.dialog.title"),Messages.getInformationIcon()) : Messages.YES;
    if (exitCode == Messages.YES) {
      boolean replaceAll=false;
      final Map<SimpleMatch,RangeHighlighter> highlighterMap=new HashMap<SimpleMatch,RangeHighlighter>();
      for (      SimpleMatch match : duplicates) {
        final Pair<SimpleMatch,PsiElement> replacement=Pair.create(match,callElement);
        if (!replaceAll) {
          highlightInEditor(project,match,editor,highlighterMap);
          int promptResult=FindManager.PromptResult.ALL;
          if (!isUnittest) {
            ReplacePromptDialog promptDialog=new ReplacePromptDialog(false,RefactoringBundle.message("replace.fragment"),project);
            promptDialog.show();
            promptResult=promptDialog.getExitCode();
          }
          if (promptResult == FindManager.PromptResult.SKIP) {
            final HighlightManager highlightManager=HighlightManager.getInstance(project);
            final RangeHighlighter highlighter=highlighterMap.get(match);
            if (highlighter != null)             highlightManager.removeSegmentHighlighter(editor,highlighter);
            continue;
          }
          if (promptResult == FindManager.PromptResult.CANCEL)           break;
          if (promptResult == FindManager.PromptResult.OK) {
            replaceDuplicate(project,replacer,replacement);
          }
 else           if (promptResult == FindManager.PromptResult.ALL) {
            replaceDuplicate(project,replacer,replacement);
            replaceAll=true;
          }
        }
 else {
          replaceDuplicate(project,replacer,replacement);
        }
      }
    }
  }
}
