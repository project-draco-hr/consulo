{
  if (isPopupShowing())   return;
  final ActionGroup group;
  if (myOrientation == SwingConstants.HORIZONTAL) {
    group=myActionGroup;
  }
 else {
    final DefaultActionGroup outside=new DefaultActionGroup();
    for (int i=myFirstOusideIndex; i < myVisibleActions.size(); i++) {
      outside.add(myVisibleActions.get(i));
    }
    group=outside;
  }
  myPopupToolbar=new PopupToolbar(myPlace,group,true,myDataManager,myActionManager,myKeymapManager){
    protected void onOtherActionPerformed(){
      hidePopup();
    }
    protected DataContext getDataContext(){
      return ActionToolbarImpl.this.getDataContext();
    }
  }
;
  myPopupToolbar.setLayoutPolicy(ActionToolbar.NOWRAP_LAYOUT_POLICY);
  Point location;
  if (myOrientation == SwingConstants.HORIZONTAL) {
    location=getLocationOnScreen();
  }
 else {
    location=getLocationOnScreen();
    location.y=location.y + getHeight() - myPopupToolbar.getPreferredSize().height;
  }
  final ComponentPopupBuilder builder=JBPopupFactory.getInstance().createComponentPopupBuilder(myPopupToolbar,null);
  builder.setResizable(false).setRequestFocus(false).setTitle(null).setCancelOnClickOutside(true).setCancelOnOtherWindowOpen(true).setCancelCallback(new Computable<Boolean>(){
    public Boolean compute(){
      return myActionManager.isActionPopupStackEmpty();
    }
  }
).setCancelOnMouseOutCallback(new MouseChecker(){
    public boolean check(    final MouseEvent event){
      if (myActionManager.isActionPopupStackEmpty()) {
        return !new RelativeRectangle(ActionToolbarImpl.this,myAutoPopupRec).contains(new RelativePoint(event));
      }
      return false;
    }
  }
);
  builder.addListener(new JBPopupListener(){
    public void onClosed(    final JBPopup popup){
      processClosed();
    }
  }
);
  myPopup=builder.createPopup();
  Disposer.register(myPopup,myPopupToolbar);
  myPopup.showInScreenCoordinates(this,location);
}
