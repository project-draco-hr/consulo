{
  ArrangementCompositeMatchCondition condition=new ArrangementCompositeMatchCondition(ArrangementOperator.AND);
  condition.addOperand(new ArrangementAtomMatchCondition(ArrangementSettingType.TYPE,ArrangementEntryType.FIELD));
  condition.addOperand(new ArrangementAtomMatchCondition(ArrangementSettingType.MODIFIER,ArrangementModifier.PUBLIC));
  StandardArrangementEntryMatcher matcher=new StandardArrangementEntryMatcher(condition);
  assertEquals(condition,matcher.getCondition());
  final TypeAwareArrangementEntry fieldEntry=myMockery.mock(TypeAwareArrangementEntry.class,"field");
  final ModifierAwareArrangementEntry publicEntry=myMockery.mock(ModifierAwareArrangementEntry.class,"public");
  final TypeAndModifierAware privateFieldEntry=myMockery.mock(TypeAndModifierAware.class,"private field");
  final TypeAndModifierAware publicMethodEntry=myMockery.mock(TypeAndModifierAware.class,"public method");
  final TypeAndModifierAware publicFieldEntry=myMockery.mock(TypeAndModifierAware.class,"public field");
  final TypeAndModifierAware publicStaticFieldEntry=myMockery.mock(TypeAndModifierAware.class,"public static field");
  myMockery.checking(new Expectations(){
{
      allowing(fieldEntry).getTypes();
      will(returnValue(EnumSet.of(ArrangementEntryType.FIELD)));
      allowing(publicEntry).getModifiers();
      will(returnValue(EnumSet.of(ArrangementModifier.PUBLIC)));
      allowing(privateFieldEntry).getTypes();
      will(returnValue(EnumSet.of(ArrangementEntryType.FIELD)));
      allowing(privateFieldEntry).getModifiers();
      will(returnValue(EnumSet.of(ArrangementModifier.PRIVATE)));
      allowing(publicMethodEntry).getTypes();
      will(returnValue(EnumSet.of(ArrangementEntryType.METHOD)));
      allowing(publicMethodEntry).getModifiers();
      will(returnValue(EnumSet.of(ArrangementModifier.PUBLIC)));
      allowing(publicFieldEntry).getTypes();
      will(returnValue(EnumSet.of(ArrangementEntryType.FIELD)));
      allowing(publicFieldEntry).getModifiers();
      will(returnValue(EnumSet.of(ArrangementModifier.PUBLIC)));
      allowing(publicStaticFieldEntry).getTypes();
      will(returnValue(EnumSet.of(ArrangementEntryType.FIELD)));
      allowing(publicStaticFieldEntry).getModifiers();
      will(returnValue(EnumSet.of(ArrangementModifier.PUBLIC,ArrangementModifier.STATIC)));
    }
  }
);
  assertFalse(matcher.isMatched(fieldEntry));
  assertFalse(matcher.isMatched(publicEntry));
  assertFalse(matcher.isMatched(privateFieldEntry));
  assertFalse(matcher.isMatched(publicMethodEntry));
  assertTrue(matcher.isMatched(publicFieldEntry));
  assertTrue(matcher.isMatched(publicStaticFieldEntry));
}
