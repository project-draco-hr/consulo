{
  ArrangementAtomMatchCondition condition=new ArrangementAtomMatchCondition(ArrangementSettingType.TYPE,ArrangementEntryType.FIELD);
  StdArrangementEntryMatcher matcher=new StdArrangementEntryMatcher(condition);
  assertEquals(condition,matcher.getCondition());
  final TypeAwareArrangementEntry fieldEntry=myMockery.mock(TypeAwareArrangementEntry.class,"field");
  final TypeAwareArrangementEntry classEntry=myMockery.mock(TypeAwareArrangementEntry.class,"class");
  final ModifierAwareArrangementEntry publicEntry=myMockery.mock(ModifierAwareArrangementEntry.class,"public");
  myMockery.checking(new Expectations(){
{
      allowing(fieldEntry).getTypes();
      will(returnValue(EnumSet.of(ArrangementEntryType.FIELD)));
      allowing(classEntry).getTypes();
      will(returnValue(EnumSet.of(ArrangementEntryType.CLASS)));
      allowing(publicEntry).getModifiers();
      will(returnValue(EnumSet.of(ArrangementModifier.PUBLIC)));
    }
  }
);
  assertTrue(matcher.isMatched(fieldEntry));
  assertFalse(matcher.isMatched(classEntry));
  assertFalse(matcher.isMatched(publicEntry));
}
