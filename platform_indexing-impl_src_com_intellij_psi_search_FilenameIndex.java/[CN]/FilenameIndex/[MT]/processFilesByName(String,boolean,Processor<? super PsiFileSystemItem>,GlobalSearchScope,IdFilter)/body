{
  final Set<VirtualFile> files=new THashSet<VirtualFile>();
  FileBasedIndex.getInstance().processValues(NAME,name,null,new FileBasedIndex.ValueProcessor<Void>(){
    @Override public boolean process(    final VirtualFile file,    final Void value){
      files.add(file);
      return true;
    }
  }
,scope,idFilter);
  if (files.isEmpty())   return false;
  PsiManager psiManager=PsiManager.getInstance(scope.getProject());
  int processedFiles=0;
  for (  VirtualFile file : files) {
    if (!file.isValid())     continue;
    if (!includeDirs && !file.isDirectory()) {
      PsiFile psiFile=psiManager.findFile(file);
      if (psiFile != null) {
        if (!processor.process(psiFile))         return true;
        ++processedFiles;
      }
    }
 else     if (includeDirs && file.isDirectory()) {
      PsiDirectory dir=psiManager.findDirectory(file);
      if (dir != null) {
        if (!processor.process(dir))         return true;
        ++processedFiles;
      }
    }
  }
  return processedFiles > 0;
}
