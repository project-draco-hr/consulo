{
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    public void run(){
      final HashSet<FilePath> newFiles=new HashSet<FilePath>(files);
      newFiles.removeAll(dirs);
      final MultiMap<VirtualFile,FileOrDir> perRoot=new MultiMap<VirtualFile,FileOrDir>(){
        @Override protected Collection<FileOrDir> createCollection(){
          return new THashSet<FileOrDir>();
        }
      }
;
      for (      Map.Entry<VirtualFile,THashSet<FilePath>> entry : myDirtyDirectoriesRecursively.entrySet()) {
        newFiles.removeAll(entry.getValue());
        for (        FilePath path : entry.getValue()) {
          perRoot.putValue(entry.getKey(),new FileOrDir(path,true));
        }
      }
      for (      Map.Entry<VirtualFile,THashSet<FilePath>> entry : myDirtyFiles.entrySet()) {
        for (        FilePath path : entry.getValue()) {
          perRoot.putValue(entry.getKey(),new FileOrDir(path,false));
        }
      }
      for (      FilePath dir : dirs) {
        addFilePathToMap(perRoot,dir,true);
      }
      for (      FilePath file : newFiles) {
        addFilePathToMap(perRoot,file,false);
      }
      for (      Map.Entry<VirtualFile,Collection<FileOrDir>> entry : perRoot.entrySet()) {
        final Collection<FileOrDir> set=entry.getValue();
        final Collection<FileOrDir> newCollection=FileUtil.removeAncestors(set,new Convertor<FileOrDir,String>(){
          @Override public String convert(          FileOrDir o){
            return o.myPath.getPath();
          }
        }
,PairProcessor.TRUE);
        set.retainAll(newCollection);
      }
      myAffectedContentRoots.addAll(perRoot.keySet());
      for (      Map.Entry<VirtualFile,Collection<FileOrDir>> entry : perRoot.entrySet()) {
        final VirtualFile root=entry.getKey();
        final THashSet<FilePath> curFiles=new THashSet<FilePath>();
        final THashSet<FilePath> curDirs=new THashSet<FilePath>();
        final Collection<FileOrDir> value=entry.getValue();
        for (        FileOrDir fileOrDir : value) {
          if (fileOrDir.myRecursive) {
            curDirs.add(fileOrDir.myPath);
          }
 else {
            curFiles.add(fileOrDir.myPath);
          }
        }
        if (!curDirs.isEmpty()) {
          myDirtyDirectoriesRecursively.put(root,curDirs);
        }
        if (!curFiles.isEmpty()) {
          myDirtyFiles.put(root,curFiles);
        }
      }
    }
  }
);
}
