{
  myProject=project;
  myVcs=vcs;
  myVcsManager=ProjectLevelVcsManager.getInstance(project);
  myWasEverythingDirty=false;
  myVcsDirtyScopeModifier=new VcsDirtyScopeModifier(){
    @Override public Collection<VirtualFile> getAffectedVcsRoots(){
      return Collections.unmodifiableCollection(myDirtyDirectoriesRecursively.keySet());
    }
    @Override public Iterator<FilePath> getDirtyFilesIterator(){
      if (myDirtyFiles.isEmpty()) {
        return Collections.<FilePath>emptyList().iterator();
      }
      final ArrayList<Iterator<FilePath>> iteratorList=new ArrayList<Iterator<FilePath>>(myDirtyFiles.size());
      for (      THashSet<FilePath> paths : myDirtyFiles.values()) {
        iteratorList.add(paths.iterator());
      }
      return ContainerUtil.concatIterators(iteratorList);
    }
    @Nullable @Override public Iterator<FilePath> getDirtyDirectoriesIterator(    final VirtualFile root){
      final THashSet<FilePath> filePaths=myDirtyDirectoriesRecursively.get(root);
      if (filePaths != null) {
        return filePaths.iterator();
      }
      return null;
    }
    @Override public void recheckDirtyKeys(){
      recheckMap(myDirtyDirectoriesRecursively);
      recheckMap(myDirtyFiles);
    }
    private void recheckMap(    Map<VirtualFile,THashSet<FilePath>> map){
      for (Iterator<THashSet<FilePath>> iterator=map.values().iterator(); iterator.hasNext(); ) {
        final THashSet<FilePath> next=iterator.next();
        if (next.isEmpty()) {
          iterator.remove();
        }
      }
    }
  }
;
}
