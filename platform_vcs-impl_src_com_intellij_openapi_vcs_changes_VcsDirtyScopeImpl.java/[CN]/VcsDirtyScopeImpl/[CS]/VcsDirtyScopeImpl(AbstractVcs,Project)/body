{
  myProject=project;
  myVcs=vcs;
  myVcsManager=ProjectLevelVcsManager.getInstance(project);
  myVcsDirtyScopeModifier=new VcsDirtyScopeModifier(){
    @Override public Collection<VirtualFile> getAffectedVcsRoots(){
      return Collections.unmodifiableCollection(myDirtyDirectoriesRecursively.keySet());
    }
    @Override public Iterator<FilePath> getDirtyFilesIterator(){
      return myDirtyFiles.iterator();
    }
    @Nullable @Override public Iterator<FilePath> getDirtyDirectoriesIterator(    final VirtualFile root){
      final THashSet<FilePath> filePaths=myDirtyDirectoriesRecursively.get(root);
      if (filePaths != null) {
        return filePaths.iterator();
      }
      return null;
    }
    @Override public void recheckDirtyDirKeys(){
      for (Iterator<THashSet<FilePath>> iterator=myDirtyDirectoriesRecursively.values().iterator(); iterator.hasNext(); ) {
        final THashSet<FilePath> next=iterator.next();
        if (next.isEmpty()) {
          iterator.remove();
        }
      }
    }
  }
;
}
