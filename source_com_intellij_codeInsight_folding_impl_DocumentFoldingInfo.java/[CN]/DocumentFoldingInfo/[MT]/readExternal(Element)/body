{
  mySmartPointersOrRangeMarkers.clear();
  myExpandedStates.clear();
  PsiFile psiFile=PsiDocumentManager.getInstance(myProject).getPsiFile(myDocument);
  if (psiFile == null)   return;
  String date=null;
  for (Iterator i=element.getChildren().iterator(); i.hasNext(); ) {
    Element e=(Element)i.next();
    if ("element".equals(e.getName())) {
      String signature=e.getAttributeValue("signature");
      if (signature == null) {
        continue;
      }
      PsiElement restoredElement=FoldingPolicy.restoreBySignature(psiFile,signature);
      if (restoredElement != null) {
        mySmartPointersOrRangeMarkers.add(SmartPointerManager.getInstance(myProject).createSmartPsiElementPointer(restoredElement));
        myExpandedStates.add(Boolean.valueOf(e.getAttributeValue("expanded")));
      }
    }
 else     if ("marker".equals(e.getName())) {
      if (date == null) {
        date=getTimeStamp();
      }
      if ("".equals(date))       continue;
      if (!date.equals(e.getAttributeValue("date")) || FileDocumentManager.getInstance().isDocumentUnsaved(myDocument))       continue;
      StringTokenizer tokenizer=new StringTokenizer(e.getAttributeValue("signature"),":");
      try {
        int start=Integer.valueOf(tokenizer.nextToken()).intValue();
        int end=Integer.valueOf(tokenizer.nextToken()).intValue();
        if (start < 0 || end >= myDocument.getTextLength() || start > end)         continue;
        RangeMarker marker=myDocument.createRangeMarker(start,end);
        mySmartPointersOrRangeMarkers.add(marker);
        myExpandedStates.add(Boolean.valueOf(e.getAttributeValue("expanded")));
        String placeHolderText=e.getAttributeValue("placeholder");
        if (placeHolderText == null)         placeHolderText=DEFAULT_PLACEHOLDER;
        myPlaceholderTexts.put(marker,placeHolderText);
      }
 catch (      NoSuchElementException exc) {
        LOG.error(exc);
        continue;
      }
    }
 else {
      throw new IllegalStateException("unknown tag: " + e.getName());
    }
  }
}
