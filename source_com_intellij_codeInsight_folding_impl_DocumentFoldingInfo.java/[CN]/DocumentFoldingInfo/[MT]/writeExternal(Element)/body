{
  PsiDocumentManager.getInstance(myProject).commitAllDocuments();
  if (mySmartPointersOrRangeMarkers.size() == 0) {
    throw new WriteExternalException();
  }
  String date=null;
  for (int i=0; i < mySmartPointersOrRangeMarkers.size(); i++) {
    Object o=mySmartPointersOrRangeMarkers.get(i);
    Boolean state=myExpandedStates.get(i);
    if (o instanceof SmartPsiElementPointer) {
      SmartPsiElementPointer pointer=(SmartPsiElementPointer)o;
      PsiElement psiElement=pointer.getElement();
      if (psiElement == null)       continue;
      String signature=FoldingPolicy.getSignature(psiElement);
      if (signature == null)       continue;
      PsiElement restoredElement=FoldingPolicy.restoreBySignature(psiElement.getContainingFile(),signature);
      if (!psiElement.equals(restoredElement)) {
        restoredElement=FoldingPolicy.restoreBySignature(psiElement.getContainingFile(),signature);
        LOG.assertTrue(false,"element:" + psiElement + ", signature:"+ signature+ ", file:"+ psiElement.getContainingFile());
      }
      Element e=new Element("element");
      e.setAttribute("signature",signature);
      e.setAttribute("expanded",state.toString());
      element.addContent(e);
    }
 else {
      RangeMarker marker=(RangeMarker)o;
      Element e=new Element("marker");
      if (date == null) {
        date=getTimeStamp();
      }
      if ("".equals(date))       continue;
      e.setAttribute("date",date);
      e.setAttribute("expanded",state.toString());
      String signature=new Integer(marker.getStartOffset()) + ":" + new Integer(marker.getEndOffset());
      e.setAttribute("signature",signature);
      String placeHolderText=myPlaceholderTexts.get(marker);
      e.setAttribute("placeholder",placeHolderText);
      element.addContent(e);
    }
  }
}
