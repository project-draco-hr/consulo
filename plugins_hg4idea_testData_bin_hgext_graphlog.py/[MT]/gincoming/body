def gincoming(ui, repo, source='default', **opts):
    'show the incoming changesets alongside an ASCII revision graph\n\n    Print the incoming changesets alongside a revision graph drawn with\n    ASCII characters.\n\n    Nodes printed as an @ character are parents of the working\n    directory.\n    '
    check_unsupported_flags(opts)
    (source, branches) = hg.parseurl(ui.expandpath(source), opts.get('branch'))
    other = hg.repository(cmdutil.remoteui(repo, opts), source)
    (revs, checkout) = hg.addbranchrevs(repo, other, branches, opts.get('rev'))
    ui.status((_('comparing with %s\n') % url.hidepassword(source)))
    if revs:
        revs = [other.lookup(rev) for rev in revs]
    incoming = repo.findincoming(other, heads=revs, force=opts['force'])
    if (not incoming):
        try:
            os.unlink(opts['bundle'])
        except:
            pass
        ui.status(_('no changes found\n'))
        return
    cleanup = None
    try:
        fname = opts['bundle']
        if (fname or (not other.local())):
            if (revs is None):
                cg = other.changegroup(incoming, 'incoming')
            else:
                cg = other.changegroupsubset(incoming, revs, 'incoming')
            bundletype = ((other.local() and 'HG10BZ') or 'HG10UN')
            fname = cleanup = changegroup.writebundle(cg, fname, bundletype)
            if opts['bundle']:
                cleanup = None
            if (not other.local()):
                other = bundlerepo.bundlerepository(ui, repo.root, fname)
        chlist = other.changelog.nodesbetween(incoming, revs)[0]
        revdag = graphrevs(other, chlist, opts)
        displayer = show_changeset(ui, other, opts, buffered=True)
        showparents = [ctx.node() for ctx in repo[None].parents()]
        generate(ui, revdag, displayer, showparents, asciiedges)
    finally:
        if hasattr(other, 'close'):
            other.close()
        if cleanup:
            os.unlink(cleanup)
