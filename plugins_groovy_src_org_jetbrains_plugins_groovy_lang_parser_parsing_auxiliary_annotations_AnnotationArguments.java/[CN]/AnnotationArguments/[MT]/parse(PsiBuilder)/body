{
  PsiBuilder.Marker annArgs=builder.mark();
  if (!ParserUtils.getToken(builder,mLPAREN)) {
    annArgs.done(ANNOTATION_ARGUMENTS);
    return;
  }
  if (ParserUtils.lookAhead(builder,mIDENT,mASSIGN)) {
    if (!parseAnnotationMemberValuePairs(builder)) {
      annArgs.rollbackTo();
      return;
    }
  }
 else {
    PsiBuilder.Marker pairMarker=builder.mark();
    if (!parseAnnotationMemberValueInitializer(builder)) {
      pairMarker.drop();
    }
 else {
      pairMarker.done(ANNOTATION_MEMBER_VALUE_PAIR);
    }
  }
  ParserUtils.getToken(builder,mNLS);
  if (!ParserUtils.getToken(builder,mRPAREN)) {
    builder.error(GroovyBundle.message("rparen.expected"));
  }
  annArgs.done(ANNOTATION_ARGUMENTS);
}
