{
  final Dimension size=getSize();
  final int w=size.width - BORDER_SIZE * 2;
  int h=size.height - BORDER_SIZE * 2;
  int _size=Math.min(size.width,size.height);
  _size=Math.min(_size,400);
  if (myImage != null && myShouldInvalidate) {
    if (myImage.getWidth(null) != _size) {
      myImage=null;
    }
  }
  myShouldInvalidate=false;
  if (myImage == null) {
    myImage=new BufferedImage(_size,_size,BufferedImage.TYPE_INT_ARGB);
    int rw=w / 8;
    int rb=w / 16;
    if (rw > 20)     rw=20;
    rw=0;
    int r=h;
    if (h > w - rw - 2 * rb) {
      r=w - rw - 2 * rb;
    }
 else {
      r=h;
    }
    r=r * 9 / 10;
    myWheel=new Rectangle(BORDER_SIZE,BORDER_SIZE,_size - BORDER_SIZE * 2,_size - BORDER_SIZE * 2);
    int saturation_step=1;
    int hue_step=1;
    if (r < 350) {
      hue_step=2;
    }
    if (r <= 280) {
      saturation_step=3;
      hue_step=2;
    }
    if (r <= 150) {
      saturation_step=5;
      hue_step=3;
    }
    Graphics g=myImage.getGraphics();
    int s;
    int midx=BORDER_SIZE + myWheel.width / 2;
    int midy=BORDER_SIZE + myWheel.height / 2;
    for (s=100; s > 20; s-=saturation_step) {
      int arcw=myWheel.width * s / 100;
      int arch=myWheel.height * s / 100;
      float sat=s / 100F;
      for (h=0; h <= 360; h+=hue_step) {
        float hue=h / 360F;
        if (hue >= 1f)         hue=0f;
        Color c=Color.getHSBColor(hue,sat,myBrightness);
        g.setColor(c);
        g.fillArc(midx - arcw / 2,midy - arch / 2,arcw,arch,h,hue_step);
      }
    }
  }
  _g.setColor(UIManager.getColor("Panel.background"));
  _g.fillRect(0,0,getWidth(),getHeight());
  _g.drawImage(myImage,0,0,null);
  int midx=myWheel.x + myWheel.width / 2;
  int midy=myWheel.y + myWheel.height / 2;
  _g.setColor(Color.white);
  int arcw=(int)(myWheel.width * mySaturation / 2);
  int arch=(int)(myWheel.height * mySaturation / 2);
  double th=myHue * 2 * Math.PI;
  final int x=(int)(midx + arcw * Math.cos(th));
  final int y=(int)(midy - arch * Math.sin(th));
  _g.fillRect(x - 2,y - 2,4,4);
  _g.setColor(Color.BLACK);
  _g.drawRect(x - 2,y - 2,4,4);
}
