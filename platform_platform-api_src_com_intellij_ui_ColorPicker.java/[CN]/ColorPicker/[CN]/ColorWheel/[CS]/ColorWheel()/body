{
  setOpaque(true);
  addComponentListener(new ComponentAdapter(){
    @Override public void componentResized(    ComponentEvent e){
      myShouldInvalidate=true;
    }
  }
);
  addMouseMotionListener(new MouseAdapter(){
    @Override public void mouseDragged(    MouseEvent e){
      final int x=e.getX();
      final int y=e.getY();
      int midx=myWheel.x + myWheel.width / 2;
      int midy=myWheel.y + myWheel.height / 2;
      double s, h;
      s=Math.sqrt((double)((x - midx) * (x - midx) + (y - midy) * (y - midy))) / (myWheel.height / 2);
      h=-Math.atan2((double)(y - midy),(double)(x - midx)) / (2 * Math.PI);
      if (h < 0)       h+=1.0;
      if (s > 1)       s=1.0;
      setHSBValue((float)h,(float)s,myBrightness);
    }
  }
);
  addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    MouseEvent e){
      final int x=e.getX();
      final int y=e.getY();
      int midx=myWheel.x + myWheel.width / 2;
      int midy=myWheel.y + myWheel.height / 2;
      double s, h;
      s=Math.sqrt((double)((x - midx) * (x - midx) + (y - midy) * (y - midy))) / (myWheel.height / 2);
      h=-Math.atan2((double)(y - midy),(double)(x - midx)) / (2 * Math.PI);
      if (h < 0)       h+=1.0;
      if (s <= 1) {
        setHSBValue((float)h,(float)s,myBrightness);
      }
    }
  }
);
}
