{
  if (myPickerFrame == null) {
    Window owner=SwingUtilities.getWindowAncestor(myParent);
    if (owner instanceof Dialog) {
      myPickerFrame=new JDialog((Dialog)owner);
    }
 else     if (owner instanceof Frame) {
      myPickerFrame=new JDialog((Frame)owner);
    }
 else {
      myPickerFrame=new JDialog(new JFrame());
    }
    myPickerFrame.addMouseListener(new MouseAdapter(){
      @Override public void mousePressed(      MouseEvent e){
        e.consume();
        pickDone();
      }
      @Override public void mouseClicked(      MouseEvent e){
        e.consume();
      }
      @Override public void mouseExited(      MouseEvent e){
        updatePipette();
      }
    }
);
    myPickerFrame.addMouseMotionListener(new MouseAdapter(){
      @Override public void mouseMoved(      MouseEvent e){
        updatePipette();
      }
    }
);
    myPickerFrame.addFocusListener(new FocusAdapter(){
      @Override public void focusLost(      FocusEvent e){
        cancelPipette();
      }
    }
);
    myPickerFrame.setSize(100,100);
    myPickerFrame.setUndecorated(true);
    myPickerFrame.setAlwaysOnTop(true);
    AWTUtilities.setWindowOpacity(myPickerFrame,0.05f);
    JRootPane rootPane=((JDialog)myPickerFrame).getRootPane();
    rootPane.putClientProperty("Window.shadow",Boolean.FALSE);
    myGlassRect=new Rectangle(2,2,28,28);
    myPickOffset=new Point(0,0);
    myCaptureRect=new Rectangle(-4,-4,8,8);
    myCaptureOffset=new Point(myCaptureRect.x,myCaptureRect.y);
    myHotspot=new Point(16,16);
    myZoomRect=new Rectangle(0,0,32,32);
    myMaskImage=new BufferedImage(32,32,BufferedImage.TYPE_INT_ARGB);
    Graphics2D maskG=myMaskImage.createGraphics();
    maskG.setColor(Color.BLUE);
    maskG.fillRect(0,0,32,32);
    maskG.setColor(Color.RED);
    maskG.setComposite(AlphaComposite.SrcOut);
    maskG.fillOval(myGlassRect.x,myGlassRect.y,myGlassRect.width,myGlassRect.height);
    maskG.dispose();
    myMagnifierImage=new BufferedImage(32,32,BufferedImage.TYPE_INT_ARGB);
    Graphics2D graphics=myMagnifierImage.createGraphics();
    graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
    graphics.setRenderingHint(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
    graphics.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR);
    graphics.setColor(Color.BLACK);
    graphics.drawOval(1,1,30,30);
    graphics.drawOval(2,2,28,28);
    graphics.drawLine(2,16,12,16);
    graphics.drawLine(20,16,30,16);
    graphics.drawLine(16,2,16,12);
    graphics.drawLine(16,20,16,30);
    graphics.dispose();
    myImage=myParent.getGraphicsConfiguration().createCompatibleImage(myMagnifierImage.getWidth(),myMagnifierImage.getHeight(),Transparency.TRANSLUCENT);
    myGraphics=(Graphics2D)myImage.getGraphics();
    myGraphics.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR);
    myPickerFrame.addKeyListener(new KeyAdapter(){
      public void keyPressed(      KeyEvent e){
switch (e.getKeyCode()) {
case KeyEvent.VK_ESCAPE:
          cancelPipette();
        break;
case KeyEvent.VK_ENTER:
      pickDone();
    break;
}
}
}
);
myTimer=new Timer(5,new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
updatePipette();
}
}
);
}
return myPickerFrame;
}
