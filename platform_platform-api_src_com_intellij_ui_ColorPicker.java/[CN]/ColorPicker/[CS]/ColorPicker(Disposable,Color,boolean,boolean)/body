{
  myUpdateQueue=new Alarm(Alarm.ThreadToUse.SWING_THREAD,parent);
  myRed=createColorField(false);
  myGreen=createColorField(false);
  myBlue=createColorField(false);
  myHex=createColorField(true);
  setLayout(new BorderLayout());
  setBorder(BorderFactory.createEmptyBorder(5,5,0,5));
  myColorWheelPanel=new ColorWheelPanel(this,enableOpacity);
  myPicker=new ColorPipette(this,getColor());
  myPicker.setListener(new ColorListener(){
    @Override public void colorChanged(    Color color,    Object source){
      setColor(color,source);
    }
  }
);
  try {
    add(buildTopPanel(true),BorderLayout.NORTH);
    add(myColorWheelPanel,BorderLayout.CENTER);
    myRecentColorsComponent=new RecentColorsComponent(new ColorListener(){
      @Override public void colorChanged(      Color color,      Object source){
        setColor(color,source);
      }
    }
,restoreColors);
    add(myRecentColorsComponent,BorderLayout.SOUTH);
  }
 catch (  ParseException ignore) {
  }
  Color c=color == null ? myRecentColorsComponent.getMostRecentColor() : color;
  if (c == null) {
    c=Color.WHITE;
  }
  setColor(c,this);
  setSize(300,350);
}
