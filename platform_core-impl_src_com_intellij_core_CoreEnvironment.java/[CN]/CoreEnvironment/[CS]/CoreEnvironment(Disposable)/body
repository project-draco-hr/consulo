{
  Extensions.cleanRootArea(parentDisposable);
  myFileTypeRegistry=new CoreFileTypeRegistry();
  FileTypeRegistry.ourInstanceGetter=new Getter<FileTypeRegistry>(){
    @Override public FileTypeRegistry get(){
      return myFileTypeRegistry;
    }
  }
;
  myEncodingRegistry=new CoreEncodingRegistry();
  EncodingRegistry.ourInstanceGetter=new Getter<EncodingRegistry>(){
    @Override public EncodingRegistry get(){
      return myEncodingRegistry;
    }
  }
;
  myApplication=new MockApplication(parentDisposable);
  ApplicationManager.setApplication(myApplication,parentDisposable);
  myLocalFileSystem=new CoreLocalFileSystem();
  myJarFileSystem=new CoreJarFileSystem();
  Extensions.registerAreaClass("IDEA_PROJECT",null);
  myProject=new MockProject(myApplication.getPicoContainer(),parentDisposable);
  final MutablePicoContainer appContainer=myApplication.getPicoContainer();
  registerComponentInstance(appContainer,FileDocumentManager.class,new MockFileDocumentManagerImpl(new Function<CharSequence,Document>(){
    @Override public Document fun(    CharSequence charSequence){
      return new DocumentImpl(charSequence);
    }
  }
,null));
  myApplication.registerService(DefaultASTFactory.class,new CoreASTFactory());
  myApplication.registerService(PsiBuilderFactory.class,new PsiBuilderFactoryImpl());
  myApplication.registerService(ReferenceProvidersRegistry.class,new MockReferenceProvidersRegistry());
  myApplication.registerService(StubTreeLoader.class,new CoreStubTreeLoader());
  registerExtensionPoint(Extensions.getRootArea(),ContentBasedFileSubstitutor.EP_NAME,ContentBasedFileSubstitutor.class);
  registerExtensionPoint(Extensions.getRootArea(),BinaryFileStubBuilders.EP_NAME,FileTypeExtensionPoint.class);
  myFileIndexFacade=new MockFileIndexFacade(myProject);
  final MutablePicoContainer projectContainer=myProject.getPicoContainer();
  myProject.registerService(PsiModificationTracker.class,new PsiModificationTrackerImpl(myProject));
  myProject.registerService(FileIndexFacade.class,myFileIndexFacade);
  myProject.registerService(ResolveScopeManager.class,new MockResolveScopeManager(myProject));
  myProject.registerService(ResolveCache.class,new ResolveCache(null));
  registerProjectExtensionPoint(PsiTreeChangePreprocessor.EP_NAME,PsiTreeChangePreprocessor.class);
  myPsiManager=new PsiManagerImpl(myProject,null,null,myFileIndexFacade,null);
  ((FileManagerImpl)myPsiManager.getFileManager()).markInitialized();
  registerComponentInstance(projectContainer,PsiManager.class,myPsiManager);
  myProject.registerService(PsiFileFactory.class,new PsiFileFactoryImpl(myPsiManager));
  myProject.registerService(CachedValuesManager.class,new CachedValuesManagerImpl(myProject,new PsiCachedValuesFactory(myPsiManager)));
  myProject.registerService(PsiDirectoryFactory.class,new PsiDirectoryFactoryImpl(myPsiManager));
  myProject.registerService(ProjectScopeBuilder.class,new CoreProjectScopeBuilder(myProject,myFileIndexFacade));
  myProject.registerService(DumbService.class,new MockDumbService(myProject));
}
