{
  myFileTypeRegistry=new CoreFileTypeRegistry();
  FileTypeRegistry.ourInstanceGetter=new Getter<FileTypeRegistry>(){
    @Override public FileTypeRegistry get(){
      return myFileTypeRegistry;
    }
  }
;
  myEncodingRegistry=new CoreEncodingRegistry();
  EncodingRegistry.ourInstanceGetter=new Getter<EncodingRegistry>(){
    @Override public EncodingRegistry get(){
      return myEncodingRegistry;
    }
  }
;
  myApplication=new MockApplication(parentDisposable);
  new ApplicationManager(){
{
      ourApplication=myApplication;
    }
  }
;
  ApplicationComponentLocator.setInstance(myApplication);
  myLocalFileSystem=new CoreLocalFileSystem();
  myProject=new MockProject(myApplication.getPicoContainer(),parentDisposable);
  final MutablePicoContainer appContainer=myApplication.getPicoContainer();
  registerComponentInstance(appContainer,FileDocumentManager.class,new MockFileDocumentManagerImpl(new Function<CharSequence,Document>(){
    @Override public Document fun(    CharSequence charSequence){
      return new DocumentImpl(charSequence);
    }
  }
,null));
  myApplication.registerService(DefaultASTFactory.class,new CoreASTFactory());
  myApplication.registerService(PsiBuilderFactory.class,new PsiBuilderFactoryImpl());
  myApplication.registerService(ReferenceProvidersRegistry.class,new MockReferenceProvidersRegistry());
  myFileIndexFacade=new MockFileIndexFacade(myProject);
  final MutablePicoContainer projectContainer=myProject.getPicoContainer();
  PsiManagerImpl psiManager=new PsiManagerImpl(myProject,null,null,myFileIndexFacade,null);
  ((FileManagerImpl)psiManager.getFileManager()).markInitialized();
  registerComponentInstance(projectContainer,PsiManager.class,psiManager);
  myProject.registerService(PsiFileFactory.class,new PsiFileFactoryImpl(psiManager));
  myProject.registerService(CachedValuesManager.class,new CachedValuesManagerImpl(myProject,new PsiCachedValuesFactory(psiManager)));
  myProject.registerService(PsiDirectoryFactory.class,new PsiDirectoryFactoryImpl(psiManager));
}
