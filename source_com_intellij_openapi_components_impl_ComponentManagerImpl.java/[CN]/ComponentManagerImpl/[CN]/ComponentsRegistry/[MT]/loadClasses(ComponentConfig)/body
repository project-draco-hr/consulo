{
  ClassLoader loader=config.getClassLoader();
  try {
    final Class<?> interfaceClass=Class.forName(config.interfaceClass,true,loader);
    final Class<?> implementationClass=Class.forName(config.implementationClass,true,loader);
    if (myInterfaceToClassMap.get(interfaceClass) != null) {
      throw new Error("ComponentSetup for component " + interfaceClass.getName() + " already registered");
    }
    getPicoContainer().registerComponent(new ComponentConfigComponentAdapter(config));
    myInterfaceToClassMap.put(interfaceClass,implementationClass);
    myComponentInterfaces.add(interfaceClass);
  }
 catch (  Exception e) {
    @NonNls final String message="Error while registering component: " + config;
    if (config.pluginDescriptor != null) {
      LOG.error(message,new PluginException(e,config.pluginDescriptor.getPluginId()));
    }
 else {
      LOG.error(message,e);
    }
  }
catch (  Error e) {
    if (config.pluginDescriptor != null) {
      LOG.error(new PluginException(e,config.pluginDescriptor.getPluginId()));
    }
 else {
      throw e;
    }
  }
}
