{
  if (element == null)   return;
  final boolean headless=ApplicationManager.getApplication().isHeadlessEnvironment();
  for (  final Object o : element.getChildren(COMPONENT_ELEMENT)) {
    @NonNls Element child=(Element)o;
    boolean skipForDummyProject=child.getChild("skipForDummyProject") != null;
    if (!loadDummies && skipForDummyProject) {
      continue;
    }
    String interfaceClass=child.getChildText(INTERFACE_CLASS_ELEMENT);
    String implClass=child.getChildText(IMPLEMENTATION_CLASS_ELEMENT);
    if (headless) {
      String headlessImplClass=child.getChildText(HEADLESS_IMPLEMENTATION_CLASS_ELEMENT);
      if (headlessImplClass != null) {
        if (headlessImplClass.trim().length() == 0)         continue;
        implClass=headlessImplClass;
      }
    }
    if (interfaceClass == null)     interfaceClass=implClass;
    Map<String,String> options=null;
    final List optionElements=child.getChildren(OPTION_ELEMENT);
    if (!optionElements.isEmpty()) {
      options=new HashMap<String,String>();
      for (      final Object optionElement : optionElements) {
        Element e=(Element)optionElement;
        String name=e.getAttributeValue(NAME_ATTR);
        String value=e.getAttributeValue(VALUE_ATTR);
        options.put(name,value);
      }
    }
    if (!isComponentSuitable(options))     continue;
    ClassLoader loader=null;
    if (descriptor != null) {
      loader=descriptor.getPluginClassLoader();
    }
    if (loader == null) {
      loader=getClass().getClassLoader();
    }
    interfaceClass=interfaceClass.trim();
    implClass=implClass.trim();
    try {
      registerComponent(Class.forName(interfaceClass,true,loader),Class.forName(implClass,true,loader),options,true,isTrue(options,"lazy"));
    }
 catch (    Exception e) {
      final String message="Error while initializing component: " + interfaceClass + ":"+ implClass;
      if (descriptor != null) {
        LOG.error(message,new PluginException(e,descriptor.getPluginId()));
      }
 else {
        LOG.error(message,e);
      }
    }
catch (    Error e) {
      if (descriptor != null) {
        LOG.error(new PluginException(e,descriptor.getPluginId()));
      }
 else {
        throw e;
      }
    }
  }
}
