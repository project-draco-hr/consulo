{
  final Application app=ApplicationManager.getApplication();
  final boolean headless=app.isHeadlessEnvironment();
  final ComponentDescriptor[] componentDescriptors=(ComponentDescriptor[])extensionsArea.getExtensionPoint(ExtensionPoints.COMPONENT).getExtensions();
  for (  ComponentDescriptor descriptor : componentDescriptors) {
    final Map<String,String> options=descriptor.getOptionsMap();
    if (isComponentSuitable(options)) {
      ClassLoader loader=findLoader(descriptor.getPluginId());
      try {
        final String implementation=headless ? descriptor.getHeadlessImplementation() : descriptor.getImplementation();
        if (!StringUtil.isEmpty(implementation)) {
          registerComponent(Class.forName(descriptor.getInterface(),true,loader),Class.forName(implementation,true,loader),options,true,isTrue(options,"lazy"));
        }
      }
 catch (      Exception e) {
        LOG.error(new PluginException(e,app.getPlugin(descriptor.getPluginId())));
      }
catch (      Error e) {
        LOG.error(new PluginException(e,app.getPlugin(descriptor.getPluginId())));
      }
    }
  }
}
