{
  if (element == null)   return;
  final boolean headless=ApplicationManager.getApplication().isHeadlessEnvironment();
  for (Iterator i=element.getChildren().iterator(); i.hasNext(); ) {
    try {
      Element child=(Element)i.next();
      if (COMPONENT_ELEMENT.equals(child.getName())) {
        String interfaceClass=child.getChildText(INTERFACE_CLASS_ELEMENT);
        String implClass=child.getChildText(IMPLEMENTATION_CLASS_ELEMENT);
        if (headless) {
          String headlessImplClass=child.getChildText(HEADLESS_IMPLEMENTATION_CLASS_ELEMENT);
          if (headlessImplClass != null) {
            if (headlessImplClass.trim().length() == 0)             continue;
            implClass=headlessImplClass;
          }
        }
        if (interfaceClass == null)         interfaceClass=implClass;
        Map<String,String> options=null;
        final List optionElements=child.getChildren(OPTION_ELEMENT);
        if (optionElements.size() != 0) {
          options=new HashMap<String,String>();
          for (Iterator j=optionElements.iterator(); j.hasNext(); ) {
            Element e=(Element)j.next();
            String name=e.getAttributeValue(NAME_ATTR);
            String value=e.getAttributeValue(VALUE_ATTR);
            options.put(name,value);
          }
        }
        if (!isComponentSuitable(options))         continue;
        ClassLoader loader=null;
        if (descriptor != null) {
          loader=descriptor.getLoader();
        }
        if (loader == null) {
          loader=getClass().getClassLoader();
        }
        interfaceClass=interfaceClass.trim();
        implClass=implClass.trim();
        registerComponent(Class.forName(interfaceClass,true,loader),Class.forName(implClass,true,loader),options,true,isTrue(options,"lazy"));
      }
    }
 catch (    Exception e) {
      if (descriptor != null) {
        LOG.error(new PluginException(e,descriptor));
      }
 else {
        LOG.error(e);
      }
    }
catch (    Error e) {
      if (descriptor != null) {
        LOG.error(new PluginException(e,descriptor));
      }
 else {
        throw e;
      }
    }
  }
}
