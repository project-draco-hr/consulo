{
synchronized (this) {
    final Object initializedComponent=myInitializedComponents.get(interfaceClass);
    if (initializedComponent != null)     return (T)initializedComponent;
  }
  if (!myInterfaceToClassMap.containsKey(interfaceClass)) {
    return null;
  }
  Object lock=getLock(interfaceClass);
synchronized (lock) {
    if (myLazyComponents.contains(interfaceClass)) {
      createComponent(interfaceClass);
      myLazyComponents.remove(interfaceClass);
    }
    Object component=myInterfaceToComponentMap.get(interfaceClass);
    if (component == null) {
      component=createComponent(interfaceClass);
    }
    if (component == null) {
      LOG.error("Cant create " + interfaceClass);
      return null;
    }
synchronized (this) {
      if (myInitializingComponents.contains(component)) {
        LOG.error("Component  " + interfaceClass + " is being requested during its own initializing procedure");
        return (T)component;
      }
      myInitializingComponents.add(component);
    }
    try {
    }
  finally {
synchronized (this) {
        myInitializingComponents.remove(component);
        myInitializedComponents.put(interfaceClass,component);
      }
    }
    return (T)component;
  }
}
