{
  final FilterScopeProcessor<PsiElement> processor=new FilterScopeProcessor<PsiElement>(new OrFilter(new ClassFilter(PsiCompiledElement.class,false),new ModifierFilter(PsiModifier.PRIVATE,false)));
  final Object[] elements=myBaseGetter.get(context,completionContext);
  final PsiAnnotation annotation=PsiTreeUtil.getParentOfType(context,PsiAnnotation.class);
  final List<PsiElement> results=new ArrayList<PsiElement>();
  for (  final Object element : elements) {
    final PsiClass psiClass;
    final ElementFilter filter;
    if (element instanceof PsiClass) {
      psiClass=(PsiClass)context;
      psiClass.processDeclarations(processor,ResolveState.initial(),null,context);
      filter=new AssignableFromFilter(JavaPsiFacade.getInstance(psiClass.getProject()).getElementFactory().createType(psiClass,PsiSubstitutor.EMPTY));
    }
 else     if (element instanceof PsiType) {
      final PsiType type=(PsiType)element;
      psiClass=PsiUtil.resolveClassInType(type);
      if (psiClass != null) {
        psiClass.processDeclarations(processor,ResolveState.initial(),null,context);
      }
      filter=new AssignableFromFilter(type);
    }
 else {
      ((PsiElement)element).processDeclarations(processor,ResolveState.initial(),null,context);
      filter=TrueFilter.INSTANCE;
    }
    for (    final PsiElement result : processor.getResults()) {
      if (result instanceof PsiMember) {
        final PsiMember member=(PsiMember)result;
        if (member.hasModifierProperty(PsiModifier.STATIC) && !PsiTreeUtil.isAncestor(member.getContainingClass(),context,false)) {
          if (result instanceof PsiField && !member.hasModifierProperty(PsiModifier.FINAL))           continue;
          if (result instanceof PsiMethod && annotation != null)           continue;
          if (filter.isAcceptable(result,context)) {
            results.add(result);
          }
        }
      }
    }
    processor.getResults().clear();
  }
  return results.toArray(new PsiElement[results.size()]);
}
