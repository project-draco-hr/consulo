{
  final FilterScopeProcessor<PsiElement> processor=new FilterScopeProcessor<PsiElement>(new OrFilter(new ClassFilter(PsiCompiledElement.class,false),new ModifierFilter(PsiModifier.PRIVATE,false)));
  final Object[] elements=myBaseGetter.get(context,completionContext);
  final List<PsiElement> results=new ArrayList<PsiElement>();
  for (  final Object element : elements) {
    final PsiClass psiClass;
    if (element instanceof PsiClass) {
      psiClass=(PsiClass)context;
      psiClass.processDeclarations(processor,ResolveState.initial(),null,context);
    }
 else     if (element instanceof PsiType) {
      psiClass=PsiUtil.resolveClassInType((PsiType)element);
      if (psiClass != null) {
        psiClass.processDeclarations(processor,ResolveState.initial(),null,context);
      }
    }
 else {
      ((PsiElement)element).processDeclarations(processor,ResolveState.initial(),null,context);
    }
    for (    final PsiElement result : processor.getResults()) {
      if (result instanceof PsiMember && !PsiTreeUtil.isAncestor(((PsiMember)result).getContainingClass(),context,false)) {
        if (result instanceof PsiField && !((PsiField)result).hasModifierProperty(PsiModifier.FINAL))         continue;
        if (result instanceof PsiMethod && PsiTreeUtil.getParentOfType(context,PsiAnnotation.class) != null)         continue;
        results.add(result);
      }
    }
    processor.getResults().clear();
  }
  return results.toArray(new PsiElement[results.size()]);
}
