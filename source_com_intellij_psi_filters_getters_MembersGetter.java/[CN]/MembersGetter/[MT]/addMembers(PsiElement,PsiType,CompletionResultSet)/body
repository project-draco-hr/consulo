{
  final FilterScopeProcessor<PsiElement> processor=new FilterScopeProcessor<PsiElement>(new OrFilter(new ClassFilter(PsiCompiledElement.class,false),new ModifierFilter(PsiModifier.PRIVATE,false)));
  final PsiAnnotation annotation=PsiTreeUtil.getParentOfType(context,PsiAnnotation.class);
  final PsiClass psiClass=PsiUtil.resolveClassInType(expectedType);
  if (psiClass != null) {
    psiClass.processDeclarations(processor,ResolveState.initial(),null,context);
  }
  for (  final PsiElement result : processor.getResults()) {
    if (result instanceof PsiMember && !(result instanceof PsiClass)) {
      final PsiMember member=(PsiMember)result;
      if (member.hasModifierProperty(PsiModifier.STATIC) && !PsiTreeUtil.isAncestor(member.getContainingClass(),context,false)) {
        if (result instanceof PsiField && !member.hasModifierProperty(PsiModifier.FINAL))         continue;
        if (result instanceof PsiMethod && annotation != null)         continue;
        final LookupItem item=LookupItemUtil.objectToLookupItem(result);
        item.setAutoCompletionPolicy(AutoCompletionPolicy.NEVER_AUTOCOMPLETE);
        JavaAwareCompletionData.qualify(item);
        results.addElement(item);
      }
    }
  }
}
