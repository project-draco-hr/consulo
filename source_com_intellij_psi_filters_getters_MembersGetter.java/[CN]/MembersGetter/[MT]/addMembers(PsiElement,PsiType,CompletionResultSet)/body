{
  final PsiClass psiClass=PsiUtil.resolveClassInType(expectedType);
  if (psiClass != null) {
    processMembers(position,results,psiClass,PsiTreeUtil.getParentOfType(position,PsiAnnotation.class) != null);
  }
  if (expectedType instanceof PsiPrimitiveType && PsiType.DOUBLE.isAssignableFrom(expectedType)) {
    if (position.getParent() instanceof PsiReferenceExpression && position.getParent().getParent() instanceof PsiExpressionList && position.getParent().getParent().getParent() instanceof PsiMethodCallExpression) {
      PsiMethodCallExpression call=(PsiMethodCallExpression)position.getParent().getParent().getParent();
      final JavaResolveResult[] resolveResults=call.getMethodExpression().multiResolve(true);
      for (      final JavaResolveResult result : resolveResults) {
        final PsiElement element=result.getElement();
        if (element instanceof PsiMethod) {
          final PsiClass aClass=((PsiMethod)element).getContainingClass();
          if (aClass != null) {
            processMembers(position,results,aClass,false);
            return;
          }
        }
      }
    }
  }
}
