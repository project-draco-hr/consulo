{
  final PsiJavaCodeReferenceElement classReference=newExpression.getClassOrAnonymousClassReference();
  if (classReference != null) {
    final String text=classReference.getReferenceName();
    if (text != null) {
      final Project project=newExpression.getProject();
      final JavaPsiFacade facade=JavaPsiFacade.getInstance(project);
      final PsiResolveHelper resolveHelper=facade.getResolveHelper();
      final PsiExpression newExpressionQualifier=newExpression.getQualifier();
      final PsiElement qualifierElement=classReference.getQualifier();
      final String qualifier=qualifierElement != null ? qualifierElement.getText() : "";
      final String qualifiedName=StringUtil.getQualifiedName(qualifier,text);
      if (newExpressionQualifier != null) {
        final String newExpressionQualifierText=newExpressionQualifier.getText();
        if (newExpressionQualifier instanceof PsiReferenceExpression) {
          final PsiVariable variable=resolveHelper.resolveReferencedVariable(newExpressionQualifierText,newExpression);
          if (variable != null) {
            final PsiClass aClass=PsiUtil.resolveClassInType(variable.getType());
            if (aClass != null) {
              return aClass.findInnerClassByName(qualifiedName,false);
            }
          }
        }
 else         if (newExpressionQualifier instanceof PsiCallExpression) {
          final JavaResolveResult resolveResult=((PsiCallExpression)newExpressionQualifier).resolveMethodGenerics();
          final PsiElement method=resolveResult.getElement();
          if (method instanceof PsiMethod) {
            final PsiClass aClass=PsiUtil.resolveClassInType(resolveResult.getSubstitutor().substitute(((PsiMethod)method).getReturnType()));
            if (aClass != null) {
              return aClass.findInnerClassByName(qualifiedName,false);
            }
          }
        }
      }
      return resolveHelper.resolveReferencedClass(qualifiedName,newExpression);
    }
 else {
      return null;
    }
  }
  return null;
}
