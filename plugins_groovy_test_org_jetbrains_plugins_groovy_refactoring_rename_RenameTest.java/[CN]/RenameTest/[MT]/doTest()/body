{
  final String testFile=getTestName(true).replace('$','/') + ".test";
  final List<String> list=TestUtils.readInput(PathManager.getHomePath() + "/svnPlugins/groovy/testdata/groovy/refactoring/rename/" + testFile);
  myFixture.configureByText(GroovyFileType.GROOVY_FILE_TYPE,list.get(0));
  PsiReference ref=myFixture.getFile().findReferenceAt(myFixture.getEditor().getCaretModel().getOffset());
  final PsiElement resolved=ref == null ? null : ref.resolve();
  if (resolved instanceof PsiMethod && !(resolved instanceof GrAccessorMethod)) {
    PsiMethod method=(PsiMethod)resolved;
    String name=method.getName();
    String newName=createNewNameForMethod(name);
    myFixture.renameElementAtCaret(newName);
  }
 else   if (resolved instanceof GrAccessorMethod) {
    GrField field=((GrAccessorMethod)resolved).getProperty();
    RenameProcessor processor=new RenameProcessor(myFixture.getProject(),field,"newName",true,true);
    processor.addElement(resolved,createNewNameForMethod(((GrAccessorMethod)resolved).getName()));
    processor.run();
  }
 else {
    myFixture.renameElementAtCaret("newName");
  }
  PostprocessReformattingAspect.getInstance(getProject()).doPostponedFormatting();
  myFixture.checkResult(list.get(1));
}
