{
  symbol=c;
  addData();
  if (insideFolding) {
    myFoldedOffsets.add(offset);
    onNonSoftWrapSymbol(c);
    if (c == '\n') {
      foldedLines++;
      offset++;
      x=0;
      softWrapColumnDiff=0;
      softWrapLinesBefore+=softWrapLinesCurrent;
      softWrapLinesCurrent=0;
      foldingColumnDiff=foldingStartVisualColumn;
    }
 else     if (c == '\t') {
      int tabWidthInColumns=myRepresentationHelper.toVisualColumnSymbolsNumber(c,x);
      x+=myRepresentationHelper.charWidth(c,x);
      insideTab=true;
      for (int i=tabWidthInColumns - 1; i > 0; i--) {
        logicalColumn++;
        addData(false);
      }
      insideTab=false;
      logicalColumn++;
      offset++;
      foldingColumnDiff-=tabWidthInColumns;
    }
 else {
      logicalColumn++;
      offset++;
      x+=myRepresentationHelper.charWidth(c,x);
      foldingColumnDiff--;
    }
    return;
  }
  if (insideSoftWrap) {
    if (c == '\n') {
      myMapper.beforeSoftWrap(this);
      visualColumn++;
      softWrapColumnDiff++;
      x+=SPACE_SIZE;
      addData(true);
      visualColumn++;
      softWrapColumnDiff++;
      x+=SPACE_SIZE;
      addData(true);
      visualLine++;
      x=0;
      softWrapLinesCurrent++;
      softWrapColumnDiff=-logicalColumn - foldingColumnDiff;
      visualColumn=0;
      myMapper.afterSoftWrapLineFeed(this);
      visualColumn=1;
      softWrapColumnDiff++;
      softWrapSymbolsOnCurrentVisualLine=0;
    }
 else {
      mySoftWrapBuffer.append(c);
      visualColumn++;
      softWrapColumnDiff++;
      softWrapSymbolsOnCurrentVisualLine++;
      x+=myRepresentationHelper.charWidth(c,x);
    }
    return;
  }
  if (c == '\n') {
    myMapper.onProcessedSymbol(this);
  }
  onNonSoftWrapSymbol(c);
  if (c == '\n') {
    visualLine++;
    visualColumn=0;
    foldingColumnDiff=0;
    softWrapColumnDiff=0;
    x=0;
    softWrapLinesBefore+=softWrapLinesCurrent;
    softWrapLinesCurrent=0;
    softWrapSymbolsOnCurrentVisualLine=0;
    foldingColumnDiff=0;
    offset++;
  }
 else   if (c == '\t') {
    symbolWidthInColumns=myRepresentationHelper.toVisualColumnSymbolsNumber(c,x);
    int oldX=x;
    x+=myRepresentationHelper.charWidth(c,x);
    symbolWidthInPixels=x - oldX;
    myMapper.onProcessedSymbol(this);
    insideTab=true;
    for (int i=symbolWidthInColumns - 1; i > 0; i--) {
      visualColumn++;
      logicalColumn++;
      addData(false);
    }
    insideTab=false;
    visualColumn++;
    logicalColumn++;
    offset++;
  }
 else {
    myMapper.onProcessedSymbol(this);
    visualColumn++;
    logicalColumn++;
    offset++;
    x+=myRepresentationHelper.charWidth(c,x);
  }
}
