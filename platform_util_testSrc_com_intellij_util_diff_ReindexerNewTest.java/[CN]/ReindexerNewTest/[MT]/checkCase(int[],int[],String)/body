{
  final BitSet[] reindexChanges=new BitSet[]{new BitSet(),new BitSet()};
  LCSBuilder builder=new LCSBuilder(){
    private int myIndex1=0;
    private int myIndex2=0;
    @Override public void addEqual(    int length){
      myIndex1+=length;
      myIndex2+=length;
    }
    @Override public void addChange(    int first,    int second){
      reindexChanges[0].set(myIndex1,myIndex1 + first);
      reindexChanges[1].set(myIndex2,myIndex2 + second);
      myIndex1+=first;
      myIndex2+=second;
    }
  }
;
  IntLCS lcs=new IntLCS(ints1,ints2);
  lcs.execute();
  BitSet[] expectedChanges=lcs.getChanges();
  Reindexer reindexer=new Reindexer();
  int[][] discarded=reindexer.discardUnique(ints1,ints2);
  lcs=new IntLCS(discarded[0],discarded[1]);
  lcs.execute();
  BitSet[] changes=lcs.getChanges();
  reindexer.reindex(changes,builder);
  if (message != null) {
    assertEquals(message,expectedChanges[0],reindexChanges[0]);
    assertEquals(message,expectedChanges[1],reindexChanges[1]);
  }
 else {
    assertEquals(expectedChanges[0],reindexChanges[0]);
    assertEquals(expectedChanges[1],reindexChanges[1]);
  }
}
