{
  if (!CodeInsightUtilBase.preparePsiElementsForWrite(element))   return;
  final XmlAttribute attr=(XmlAttribute)element.getParent();
  final String name=attr.getName();
  final XmlAttributeDescriptor descriptor=attr.getDescriptor();
  LOG.assertTrue(descriptor != null);
  String value=attr.getValue();
  final PsiElement declaration=descriptor.getDeclaration();
  if (declaration instanceof PsiField) {
    final PsiType fieldType=((PsiField)declaration).getType();
    final PsiType itemType=GenericsHighlightUtil.getCollectionItemType(fieldType,declaration.getResolveScope());
    if (itemType != null) {
      final String typeNode=itemType.getPresentableText();
      JavaFxPsiUtil.insertImportWhenNeeded((XmlFile)attr.getContainingFile(),typeNode,itemType.getCanonicalText());
      final String[] vals=value.split(",");
      value=StringUtil.join(vals,new Function<String,String>(){
        @Override public String fun(        String s){
          return "<" + typeNode + " "+ FxmlConstants.FX_VALUE+ "=\""+ s.trim()+ "\"/>";
        }
      }
,"\n");
    }
  }
  final XmlTag childTag=XmlElementFactory.getInstance(project).createTagFromText("<" + name + ">"+ value+ "</"+ name+ ">");
  attr.getParent().add(childTag);
  attr.delete();
}
