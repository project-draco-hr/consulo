{
  if (element instanceof PsiType) {
    return (PsiType)element;
  }
  if (element instanceof PsiClass) {
    return element.getManager().getElementFactory().createType((PsiClass)element);
  }
 else   if (element instanceof PsiMethod) {
    return ((PsiMethod)element).getReturnType();
  }
 else   if (element instanceof PsiVariable) {
    return ((PsiVariable)element).getType();
  }
 else   if (element instanceof PsiKeyword) {
    if ("class".equals(element.getText())) {
      return PsiType.getJavaLangClass(element.getManager(),element.getResolveScope());
    }
 else     if ("true".equals(element.getText()) || "false".equals(element.getText())) {
      return PsiType.BOOLEAN;
    }
 else     if ("this".equals(element.getText())) {
      PsiElement previousElement=getPreviousElement(context,false);
      if (".".equals(previousElement.getText())) {
        previousElement=getPreviousElement(previousElement,false);
        final String className=previousElement.getText();
        PsiElement walker=context;
        while (walker != null) {
          if (walker instanceof PsiClass && !(walker instanceof PsiAnonymousClass)) {
            if (className.equals(((PsiClass)walker).getName()))             return getTypeByElement(walker,context);
          }
          walker=walker.getContext();
        }
      }
 else {
        final PsiClass owner=PsiTreeUtil.getContextOfType(context,PsiClass.class,true);
        return getTypeByElement(owner,context);
      }
    }
  }
 else   if (element instanceof PsiExpression) {
    return ((PsiExpression)element).getType();
  }
  return null;
}
