{
  PsiBuilder.Marker declmMarker=builder.mark();
  IElementType modifiers=Modifiers.parse(builder);
  if (!WRONGWAY.equals(modifiers)) {
    PsiBuilder.Marker checkMarker=builder.mark();
    if (WRONGWAY.equals(TypeSpec.parse(builder,false))) {
      checkMarker.rollbackTo();
      GroovyElementType varDecl=VariableDefinitions.parse(builder,isInClass);
      if (WRONGWAY.equals(varDecl)) {
        builder.error(GroovyBundle.message("variable.definitions.expected"));
        declmMarker.rollbackTo();
        return WRONGWAY;
      }
 else {
        declmMarker.done(varDecl);
        return varDecl;
      }
    }
 else {
      GroovyElementType varDeclarationTop=VariableDefinitions.parse(builder,isInClass);
      if (WRONGWAY.equals(varDeclarationTop)) {
        checkMarker.rollbackTo();
        GroovyElementType varDecl=VariableDefinitions.parse(builder,isInClass);
        if (WRONGWAY.equals(varDecl)) {
          builder.error(GroovyBundle.message("variable.definitions.expected"));
          declmMarker.rollbackTo();
          return WRONGWAY;
        }
 else {
          declmMarker.done(varDecl);
          return varDecl;
        }
      }
 else {
        checkMarker.drop();
        declmMarker.done(varDeclarationTop);
        return varDeclarationTop;
      }
    }
  }
 else {
    if (!builder.eof() && !TokenSets.BUILT_IN_TYPE.contains(builder.getTokenType()) && builder.getTokenText() != null && Character.isLowerCase(builder.getTokenText().charAt(0)) && (ParserUtils.lookAhead(builder,mIDENT,mIDENT) || ParserUtils.lookAhead(builder,mIDENT,mLPAREN))) {
      return WRONGWAY;
    }
    if (!ParserUtils.lookAhead(builder,mIDENT,mLPAREN)) {
      if (WRONGWAY.equals(TypeSpec.parse(builder,true))) {
        builder.error(GroovyBundle.message("type.specification.expected"));
        declmMarker.rollbackTo();
        return WRONGWAY;
      }
    }
    GroovyElementType varDef=VariableDefinitions.parse(builder,isInClass);
    if (varDef != WRONGWAY) {
      declmMarker.done(varDef);
      return varDef;
    }
    declmMarker.rollbackTo();
    return WRONGWAY;
  }
}
