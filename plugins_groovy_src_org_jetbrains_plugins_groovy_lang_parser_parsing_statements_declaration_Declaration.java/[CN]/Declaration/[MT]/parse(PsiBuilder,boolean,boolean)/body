{
  PsiBuilder.Marker declMarker=builder.mark();
  IElementType modifiers=Modifiers.parse(builder);
  if (WRONGWAY != modifiers && mLT == builder.getTokenType()) {
    TypeParameters.parse(builder);
    PsiBuilder.Marker checkMarker=builder.mark();
    if (WRONGWAY.equals(TypeSpec.parse(builder,true))) {
      checkMarker.rollbackTo();
    }
 else {
      checkMarker.drop();
    }
    GroovyElementType decl=VariableDefinitions.parseDefinitions(builder,isInClass,false,false,true);
    if (WRONGWAY.equals(decl)) {
      declMarker.error(GroovyBundle.message("method.definitions.expected"));
    }
 else {
      declMarker.done(METHOD_DEFINITION);
    }
    return METHOD_DEFINITION;
  }
 else   if (!WRONGWAY.equals(modifiers)) {
    PsiBuilder.Marker checkMarker=builder.mark();
    if (WRONGWAY.equals(TypeSpec.parse(builder,false))) {
      checkMarker.rollbackTo();
      if (isInAnnotation) {
        builder.error(GroovyBundle.message("type.expected"));
      }
      GroovyElementType varDecl=VariableDefinitions.parse(builder,isInClass);
      if (WRONGWAY.equals(varDecl)) {
        builder.error(GroovyBundle.message("variable.definitions.expected"));
        declMarker.rollbackTo();
        return WRONGWAY;
      }
 else {
        declMarker.done(varDecl);
        return varDecl;
      }
    }
 else {
      GroovyElementType varDeclarationTop=VariableDefinitions.parse(builder,isInClass);
      if (WRONGWAY.equals(varDeclarationTop)) {
        checkMarker.rollbackTo();
        if (isInAnnotation) {
          builder.error(GroovyBundle.message("type.expected"));
        }
        GroovyElementType varDecl=VariableDefinitions.parse(builder,isInClass);
        if (WRONGWAY.equals(varDecl)) {
          builder.error(GroovyBundle.message("variable.definitions.expected"));
          declMarker.rollbackTo();
          return WRONGWAY;
        }
 else {
          declMarker.done(varDecl);
          return varDecl;
        }
      }
 else {
        checkMarker.drop();
        declMarker.done(varDeclarationTop);
        return varDeclarationTop;
      }
    }
  }
 else {
    String text=builder.getTokenText();
    if (!builder.eof() && !TokenSets.BUILT_IN_TYPE.contains(builder.getTokenType()) && text != null && Character.isLowerCase(text.charAt(0)) && (ParserUtils.lookAhead(builder,mIDENT,mIDENT) || ParserUtils.lookAhead(builder,mIDENT,mLPAREN))) {
      declMarker.rollbackTo();
      return WRONGWAY;
    }
    GroovyElementType typeParseResult=null;
    if (!ParserUtils.lookAhead(builder,mIDENT,mLPAREN)) {
      typeParseResult=TypeSpec.parse(builder,true);
      if (WRONGWAY.equals(typeParseResult)) {
        builder.error(GroovyBundle.message("type.specification.expected"));
        declMarker.rollbackTo();
        return WRONGWAY;
      }
    }
    GroovyElementType varDef=VariableDefinitions.parse(builder,isInClass);
    if (varDef != WRONGWAY) {
      declMarker.done(varDef);
      return varDef;
    }
 else     if (isInClass && typeParseResult != null) {
      declMarker.drop();
      return typeParseResult;
    }
    declMarker.rollbackTo();
    return WRONGWAY;
  }
}
