{
  PsiBuilder.Marker declMarker=builder.mark();
  boolean modifiersParsed=Modifiers.parse(builder);
  if (modifiersParsed && mLT == builder.getTokenType()) {
    TypeParameters.parse(builder);
    PsiBuilder.Marker checkMarker=builder.mark();
    if (!TypeSpec.parse(builder,true)) {
      checkMarker.rollbackTo();
    }
 else {
      checkMarker.drop();
    }
    IElementType decl=VariableDefinitions.parseDefinitions(builder,isInClass,false,false,true,modifiersParsed,false);
    if (WRONGWAY.equals(decl)) {
      declMarker.error(GroovyBundle.message("method.definitions.expected"));
    }
 else {
      declMarker.done(METHOD_DEFINITION);
    }
    return true;
  }
 else   if (modifiersParsed) {
    PsiBuilder.Marker checkMarker=builder.mark();
    if (!TypeSpec.parse(builder,false)) {
      checkMarker.rollbackTo();
      if (isInAnnotation) {
        builder.error(GroovyBundle.message("type.expected"));
      }
      IElementType varDecl=VariableDefinitions.parse(builder,isInClass,modifiersParsed);
      if (WRONGWAY.equals(varDecl)) {
        builder.error(GroovyBundle.message("variable.definitions.expected"));
        declMarker.rollbackTo();
        return false;
      }
 else {
        declMarker.done(varDecl);
        return true;
      }
    }
 else {
      IElementType varDeclarationTop=VariableDefinitions.parse(builder,isInClass,modifiersParsed,false);
      if (WRONGWAY.equals(varDeclarationTop)) {
        checkMarker.rollbackTo();
        if (isInAnnotation) {
          builder.error(GroovyBundle.message("type.expected"));
        }
        IElementType varDecl=VariableDefinitions.parse(builder,isInClass,modifiersParsed,false);
        if (WRONGWAY.equals(varDecl)) {
          builder.error(GroovyBundle.message("variable.definitions.expected"));
          declMarker.rollbackTo();
          return false;
        }
 else {
          declMarker.done(varDecl);
          return true;
        }
      }
 else {
        checkMarker.drop();
        declMarker.done(varDeclarationTop);
        return true;
      }
    }
  }
 else {
    String text=builder.getTokenText();
    if (!builder.eof() && !TokenSets.BUILT_IN_TYPE.contains(builder.getTokenType()) && text != null && (Character.isLowerCase((text.charAt(0))) || !Character.isLetter(text.charAt(0))) && (ParserUtils.lookAhead(builder,mIDENT,mIDENT) || ParserUtils.lookAhead(builder,mIDENT,mLPAREN))) {
      declMarker.rollbackTo();
      return false;
    }
    if (modifiersParsed && builder.getTokenType() == mLPAREN) {
      IElementType tupleDef=VariableDefinitions.parse(builder,isInClass,modifiersParsed,true);
      if (tupleDef == WRONGWAY) {
        declMarker.rollbackTo();
        return false;
      }
 else {
        declMarker.done(tupleDef);
        return true;
      }
    }
    boolean typeParsed=false;
    if (!ParserUtils.lookAhead(builder,mIDENT,mLPAREN)) {
      typeParsed=TypeSpec.parse(builder,true);
      if (!typeParsed) {
        builder.error(GroovyBundle.message("type.specification.expected"));
        declMarker.rollbackTo();
        return false;
      }
    }
    IElementType varDef=VariableDefinitions.parse(builder,isInClass,typeParsed);
    if (varDef != WRONGWAY) {
      declMarker.done(varDef);
      return true;
    }
 else     if (isInClass && typeParsed) {
      declMarker.drop();
      return typeParsed;
    }
    declMarker.rollbackTo();
    return false;
  }
}
