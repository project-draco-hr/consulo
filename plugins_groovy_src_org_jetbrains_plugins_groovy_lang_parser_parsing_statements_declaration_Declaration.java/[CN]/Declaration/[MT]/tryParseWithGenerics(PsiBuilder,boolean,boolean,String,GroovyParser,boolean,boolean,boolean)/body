{
  if (acceptTypeParameters) {
    TypeParameters.parse(builder);
  }
 else {
    final PsiBuilder.Marker error=builder.mark();
    TypeParameters.parse(builder);
    error.error(GroovyBundle.message("type.parameters.are.unexpected"));
  }
  PsiBuilder.Marker checkMarker=builder.mark();
switch (TypeSpec.parse(builder,false,expressionPossible)) {
case PATH_REF:
case REF_WITH_TYPE_PARAMS:
    checkMarker.drop();
  break;
case FAIL:
checkMarker.rollbackTo();
break;
case IDENTIFIER:
IElementType result=VariableDefinitions.parseDefinitions(builder,isInClass,isInAnnotation,typeDefinitionName,modifiersParsed,false,parser);
if (result == WRONGWAY) {
checkMarker.rollbackTo();
}
 else {
checkMarker.drop();
return result;
}
}
return VariableDefinitions.parseDefinitions(builder,isInClass,isInAnnotation,typeDefinitionName,modifiersParsed,false,parser);
}
