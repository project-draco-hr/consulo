{
  PsiBuilder.Marker checkMarker=builder.mark();
  ReferenceElement.ReferenceElementResult typeResult=TypeSpec.parse(builder,false,expressionPossible);
  if (typeResult == FAIL) {
    checkMarker.rollbackTo();
    if (isInAnnotation) {
      builder.error(GroovyBundle.message("type.expected"));
    }
    return VariableDefinitions.parseDefinitions(builder,isInClass,isInAnnotation,typeDefinitionName,modifiersParsed,true,parser);
  }
 else {
    IElementType varDeclarationTop=VariableDefinitions.parseDefinitions(builder,isInClass,isInAnnotation,typeDefinitionName,modifiersParsed,false,parser);
    if (varDeclarationTop == WRONGWAY) {
      if (typeResult == REF_WITH_TYPE_PARAMS) {
        checkMarker.drop();
        return VARIABLE_DEFINITION_ERROR;
      }
      checkMarker.rollbackTo();
      if (isInAnnotation) {
        builder.error(GroovyBundle.message("type.expected"));
      }
      return VariableDefinitions.parseDefinitions(builder,isInClass,isInAnnotation,typeDefinitionName,modifiersParsed,false,parser);
    }
 else {
      checkMarker.drop();
      return varDeclarationTop;
    }
  }
}
