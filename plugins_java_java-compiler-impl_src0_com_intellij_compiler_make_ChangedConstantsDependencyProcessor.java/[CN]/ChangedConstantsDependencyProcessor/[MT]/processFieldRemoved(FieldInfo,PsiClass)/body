{
  if (info.isPrivate()) {
    return;
  }
  SearchScope searchScope=GlobalSearchScope.projectScope(myProject);
  if (info.isPackageLocal()) {
    final PsiFile containingFile=aClass.getContainingFile();
    if (containingFile instanceof PsiJavaFile) {
      final String packageName=((PsiJavaFile)containingFile).getPackageName();
      final PsiJavaPackage aPackage=JavaPsiFacade.getInstance(myProject).findPackage(packageName);
      if (aPackage != null) {
        searchScope=PackageScope.packageScope(aPackage,false);
        searchScope=searchScope.intersectWith(aClass.getUseScope());
      }
    }
  }
  final PsiSearchHelper psiSearchHelper=PsiSearchHelper.SERVICE.getInstance(myProject);
  final Ref<CacheCorruptedException> exRef=new Ref<CacheCorruptedException>(null);
  processIdentifiers(psiSearchHelper,new PsiElementProcessor<PsiIdentifier>(){
    @Override public synchronized boolean execute(    @NotNull PsiIdentifier identifier){
      try {
        final PsiElement parent=identifier.getParent();
        if (parent instanceof PsiReferenceExpression) {
          final PsiClass ownerClass=getOwnerClass(parent);
          if (ownerClass != null && !ownerClass.equals(aClass)) {
            final String _qName=ownerClass.getQualifiedName();
            if (_qName != null) {
              int qualifiedName=myDependencyCache.getSymbolTable().getId(_qName);
              if (myDependencyCache.markClass(qualifiedName,true)) {
                if (LOG.isDebugEnabled()) {
                  LOG.debug("Mark dependent class " + myDependencyCache.resolve(qualifiedName) + "; reason: some constants were removed from "+ myDependencyCache.resolve(myQName));
                }
              }
            }
 else {
              LOG.warn("Class with null qualified name was not expected here: " + ownerClass);
            }
          }
        }
        return true;
      }
 catch (      CacheCorruptedException e) {
        exRef.set(e);
        return false;
      }
    }
  }
,myDependencyCache.resolve(info.getName()),searchScope,UsageSearchContext.IN_CODE);
  final CacheCorruptedException cacheCorruptedException=exRef.get();
  if (cacheCorruptedException != null) {
    throw cacheCorruptedException;
  }
}
