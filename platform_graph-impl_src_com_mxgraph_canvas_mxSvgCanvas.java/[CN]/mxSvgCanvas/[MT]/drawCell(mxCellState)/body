{
  Map<String,Object> style=state.getStyle();
  Element elem=null;
  if (state.getAbsolutePointCount() > 1) {
    List<mxPoint> pts=state.getAbsolutePoints();
    pts=mxUtils.translatePoints(pts,translate.x,translate.y);
    elem=drawLine(pts,style);
    float opacity=mxUtils.getFloat(style,mxConstants.STYLE_OPACITY,100);
    if (opacity != 100) {
      String value=String.valueOf(opacity / 100);
      elem.setAttribute("fill-opacity",value);
      elem.setAttribute("stroke-opacity",value);
    }
  }
 else {
    int x=(int)state.getX() + translate.x;
    int y=(int)state.getY() + translate.y;
    int w=(int)state.getWidth();
    int h=(int)state.getHeight();
    if (!mxUtils.getString(style,mxConstants.STYLE_SHAPE,"").equals(mxConstants.SHAPE_SWIMLANE)) {
      elem=drawShape(x,y,w,h,style);
    }
 else {
      int start=(int)Math.round(mxUtils.getInt(style,mxConstants.STYLE_STARTSIZE,mxConstants.DEFAULT_STARTSIZE) * scale);
      Map<String,Object> cloned=new Hashtable<String,Object>(style);
      cloned.remove(mxConstants.STYLE_FILLCOLOR);
      cloned.remove(mxConstants.STYLE_ROUNDED);
      if (mxUtils.isTrue(style,mxConstants.STYLE_HORIZONTAL,true)) {
        elem=drawShape(x,y,w,start,style);
        drawShape(x,y + start,w,h - start,cloned);
      }
 else {
        elem=drawShape(x,y,start,h,style);
        drawShape(x + start,y,w - start,h,cloned);
      }
    }
  }
  return elem;
}
