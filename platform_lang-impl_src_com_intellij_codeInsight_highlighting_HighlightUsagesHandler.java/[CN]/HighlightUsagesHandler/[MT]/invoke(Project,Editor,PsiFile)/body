{
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  final SelectionModel selectionModel=editor.getSelectionModel();
  if (file == null && !selectionModel.hasSelection()) {
    selectionModel.selectWordAtCaret(false);
  }
  if (file == null || selectionModel.hasSelection()) {
    doRangeHighlighting(editor,project);
    return;
  }
  final HighlightUsagesHandlerBase handler=createCustomHandler(editor,file);
  if (handler != null) {
    final String featureId=handler.getFeatureId();
    if (featureId != null) {
      FeatureUsageTracker.getInstance().triggerFeatureUsed(featureId);
    }
    handler.highlightUsages();
    return;
  }
  DumbService.getInstance(project).withAlternativeResolveEnabled(new Runnable(){
    @Override public void run(){
      UsageTarget[] usageTargets=getUsageTargets(editor,file);
      if (usageTargets == null) {
        handleNoUsageTargets(file,editor,selectionModel,project);
        return;
      }
      boolean clearHighlights=isClearHighlights(editor);
      for (      UsageTarget target : usageTargets) {
        target.highlightUsages(file,editor,clearHighlights);
      }
    }
  }
);
}
