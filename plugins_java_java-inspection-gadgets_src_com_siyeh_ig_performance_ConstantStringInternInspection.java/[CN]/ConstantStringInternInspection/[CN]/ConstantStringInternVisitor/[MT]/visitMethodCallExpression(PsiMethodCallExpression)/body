{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  @NonNls final String methodName=methodExpression.getReferenceName();
  if (!"intern".equals(methodName)) {
    return;
  }
  final PsiExpressionList argList=expression.getArgumentList();
  final PsiExpression[] args=argList.getExpressions();
  if (args.length != 0) {
    return;
  }
  final PsiExpression qualifier=methodExpression.getQualifierExpression();
  if (qualifier == null) {
    return;
  }
  if (!PsiUtil.isConstantExpression(qualifier)) {
    return;
  }
  final PsiMethod method=expression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiClass aClass=method.getContainingClass();
  if (aClass == null) {
    return;
  }
  final String className=aClass.getQualifiedName();
  if (!CommonClassNames.JAVA_LANG_STRING.equals(className)) {
    return;
  }
  registerMethodCallError(expression);
}
