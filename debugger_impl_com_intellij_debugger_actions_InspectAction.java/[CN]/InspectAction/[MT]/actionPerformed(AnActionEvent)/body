{
  final Project project=DataKeys.PROJECT.getData(e.getDataContext());
  final DebuggerTreeNodeImpl node=getSelectedNode(e.getDataContext());
  if (node == null)   return;
  final NodeDescriptorImpl descriptor=node.getDescriptor();
  final DebuggerStateManager stateManager=getContextManager(e.getDataContext());
  if (!(descriptor instanceof ValueDescriptorImpl) || stateManager == null)   return;
  final DebuggerContextImpl context=stateManager.getContext();
  if (!canInspect((ValueDescriptorImpl)descriptor,context)) {
    return;
  }
  context.getDebugProcess().getManagerThread().invokeLater(new DebuggerContextCommandImpl(context){
    public void threadAction(){
      try {
        final TextWithImports evaluationText=DebuggerTreeNodeExpression.createEvaluationText(node,context);
        final NodeDescriptorImpl inspectDescriptor;
        if (descriptor instanceof WatchItemDescriptor) {
          inspectDescriptor=(NodeDescriptorImpl)((WatchItemDescriptor)descriptor).getModifier().getInspectItem(project);
        }
 else {
          inspectDescriptor=descriptor;
        }
        DebuggerInvocationUtil.invokeLater(project,new Runnable(){
          public void run(){
            final InspectDialog dialog=new InspectDialog(project,stateManager,ActionsBundle.actionText(DebuggerActions.INSPECT) + " '" + evaluationText+ "'",inspectDescriptor);
            dialog.show();
          }
        }
);
      }
 catch (      final EvaluateException e1) {
        DebuggerInvocationUtil.invokeLater(project,new Runnable(){
          public void run(){
            Messages.showErrorDialog(project,e1.getMessage(),ActionsBundle.actionText(DebuggerActions.INSPECT));
          }
        }
);
      }
    }
  }
);
}
