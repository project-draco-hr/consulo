{
  final MultiMap<File,Module> outputToModulesMap=new MultiMap<File,Module>();
  for (  Module module : ModuleManager.getInstance(myProject).getModules()) {
    final CompilerModuleExtension compilerModuleExtension=CompilerModuleExtension.getInstance(module);
    if (compilerModuleExtension == null) {
      continue;
    }
    final String outputPathUrl=compilerModuleExtension.getCompilerOutputUrl();
    if (outputPathUrl != null) {
      final String path=VirtualFileManager.extractPath(outputPathUrl);
      outputToModulesMap.putValue(new File(path),module);
    }
    final String outputPathForTestsUrl=compilerModuleExtension.getCompilerOutputUrlForTests();
    if (outputPathForTestsUrl != null) {
      final String path=VirtualFileManager.extractPath(outputPathForTestsUrl);
      outputToModulesMap.putValue(new File(path),module);
    }
  }
  final Set<Module> affectedModules=new HashSet<Module>(Arrays.asList(context.getCompileScope().getAffectedModules()));
  final List<File> scopeOutputs=new ArrayList<File>(affectedModules.size() * 2);
  for (  File output : outputToModulesMap.keySet()) {
    final Collection<Module> modules=outputToModulesMap.get(output);
    boolean shouldInclude=true;
    for (    Module module : modules) {
      if (!affectedModules.contains(module)) {
        shouldInclude=false;
        break;
      }
    }
    if (shouldInclude) {
      scopeOutputs.add(output);
    }
  }
  if (scopeOutputs.size() > 0) {
    CompilerUtil.runInContext(context,CompilerBundle.message("progress.clearing.output"),new ThrowableRunnable<RuntimeException>(){
      public void run(){
        clearOutputDirectories(scopeOutputs);
      }
    }
);
  }
}
