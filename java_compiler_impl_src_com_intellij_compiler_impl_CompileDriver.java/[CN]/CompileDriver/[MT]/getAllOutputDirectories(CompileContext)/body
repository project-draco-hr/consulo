{
  final Set<File> outputDirs=new OrderedSet<File>((TObjectHashingStrategy<File>)TObjectHashingStrategy.CANONICAL);
  final Module[] modules=ModuleManager.getInstance(myProject).getModules();
  for (  final String path : CompilerPathsEx.getOutputPaths(modules)) {
    outputDirs.add(new File(path));
  }
  for (  Pair<IntermediateOutputCompiler,Module> pair : myGenerationCompilerModuleToOutputDirMap.keySet()) {
    outputDirs.add(new File(CompilerPaths.getGenerationOutputPath(pair.getFirst(),pair.getSecond(),false)));
    outputDirs.add(new File(CompilerPaths.getGenerationOutputPath(pair.getFirst(),pair.getSecond(),true)));
  }
  final CompilerConfiguration config=CompilerConfiguration.getInstance(myProject);
  if (context.isAnnotationProcessorsEnabled()) {
    for (    Module module : modules) {
      if (config.isAnnotationProcessingEnabled(module)) {
        final String path=CompilerPaths.getAnnotationProcessorsGenerationPath(module);
        if (path != null) {
          outputDirs.add(new File(path));
        }
      }
    }
  }
  return outputDirs;
}
