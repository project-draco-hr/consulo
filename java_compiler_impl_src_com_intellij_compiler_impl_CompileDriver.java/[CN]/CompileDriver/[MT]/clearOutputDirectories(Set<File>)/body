{
  final long start=System.currentTimeMillis();
  final List<File> outputDirectories=new ArrayList<File>(_outputDirectories);
  for (  Pair<IntermediateOutputCompiler,Module> pair : myGenerationCompilerModuleToOutputDirMap.keySet()) {
    outputDirectories.add(new File(CompilerPaths.getGenerationOutputPath(pair.getFirst(),pair.getSecond(),false)));
    outputDirectories.add(new File(CompilerPaths.getGenerationOutputPath(pair.getFirst(),pair.getSecond(),true)));
  }
  Collection<File> filesToDelete=new ArrayList<File>(outputDirectories.size() * 2);
  for (  File outputDirectory : outputDirectories) {
    File[] files=outputDirectory.listFiles();
    if (files != null) {
      filesToDelete.addAll(Arrays.asList(files));
    }
  }
  FileUtil.asyncDelete(filesToDelete);
  for (  final File file : outputDirectories) {
    file.mkdirs();
  }
  final long clearStop=System.currentTimeMillis();
  CompilerUtil.refreshIODirectories(outputDirectories);
  final long refreshStop=System.currentTimeMillis();
  CompilerUtil.logDuration("Clearing output dirs",clearStop - start);
  CompilerUtil.logDuration("Refreshing output directories",refreshStop - clearStop);
}
