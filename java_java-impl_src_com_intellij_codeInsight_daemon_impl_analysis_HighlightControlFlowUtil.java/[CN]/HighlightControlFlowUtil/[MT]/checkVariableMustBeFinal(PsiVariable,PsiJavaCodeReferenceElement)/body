{
  if (variable.hasModifierProperty(PsiModifier.FINAL))   return null;
  final PsiClass innerClass=getInnerClassVariableReferencedFrom(variable,context);
  if (innerClass != null) {
    if (variable instanceof PsiParameter) {
      final PsiElement parent=variable.getParent();
      if (parent instanceof PsiParameterList && parent.getParent() instanceof PsiLambdaExpression && notAccessedForWriting(variable,new LocalSearchScope(((PsiParameter)variable).getDeclarationScope()))) {
        return null;
      }
    }
    String description=JavaErrorMessages.message("variable.must.be.final",context.getText());
    final HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,context,description);
    QuickFixAction.registerQuickFixAction(highlightInfo,new VariableAccessFromInnerClassFix(variable,innerClass));
    return highlightInfo;
  }
 else {
    final PsiLambdaExpression lambdaExpression=PsiTreeUtil.getParentOfType(context,PsiLambdaExpression.class);
    if (lambdaExpression != null && !PsiTreeUtil.isAncestor(lambdaExpression,variable,true)) {
      boolean effectivelyFinal;
      if (variable instanceof PsiParameter) {
        final PsiElement parent=variable.getParent();
        if (parent instanceof PsiParameterList && parent.getParent() == lambdaExpression) {
          return null;
        }
        effectivelyFinal=notAccessedForWriting(variable,new LocalSearchScope(((PsiParameter)variable).getDeclarationScope()));
      }
 else {
        final ControlFlow controlFlow;
        try {
          controlFlow=getControlFlow(PsiUtil.getVariableCodeBlock(variable,context));
        }
 catch (        AnalysisCanceledException e) {
          return null;
        }
        if (ControlFlowUtil.isVariableDefinitelyAssigned(variable,controlFlow)) {
          final Collection<ControlFlowUtil.VariableInfo> initializedTwice=ControlFlowUtil.getInitializedTwice(controlFlow);
          effectivelyFinal=!initializedTwice.contains(new ControlFlowUtil.VariableInfo(variable,null));
          if (effectivelyFinal) {
            effectivelyFinal=notAccessedForWriting(variable,new LocalSearchScope(lambdaExpression));
          }
        }
 else {
          effectivelyFinal=false;
        }
      }
      if (!effectivelyFinal) {
        return HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,context,"Variable used in lambda expression should be effectively final");
      }
    }
  }
  return null;
}
