{
  return new JavaElementVisitor(){
    @Override public void visitReferenceExpression(    PsiReferenceExpression expression){
    }
    @Override public void visitComment(    PsiComment comment){
      super.visitComment(comment);
      if (!PsiUtil.getLanguageLevel(comment).isAtLeast(LanguageLevel.JDK_1_7))       return;
      final HashSet<String> tools2Suppress=new HashSet<String>();
      collectCommentSuppresses(comment,tools2Suppress);
      if (tools2Suppress.contains(RemoveUncheckedWarningFix.UNCHECKED)) {
        final PsiElement statement=PsiTreeUtil.skipSiblingsForward(comment,PsiWhiteSpace.class);
        if (statement instanceof PsiStatement) {
          checkIfSafeToRemoveWarning(comment,statement,holder);
        }
      }
    }
    @Override public void visitAnnotation(    PsiAnnotation annotation){
      super.visitAnnotation(annotation);
      if (!PsiUtil.getLanguageLevel(annotation).isAtLeast(LanguageLevel.JDK_1_7))       return;
      if (Comparing.strEqual(annotation.getQualifiedName(),SuppressWarnings.class.getName())) {
        final PsiAnnotationOwner owner=annotation.getOwner();
        if (owner instanceof PsiModifierList) {
          final PsiModifierListOwner modifierListOwner=PsiTreeUtil.getParentOfType(((PsiModifierList)owner),PsiModifierListOwner.class);
          if (modifierListOwner != null) {
            final Collection<String> suppressedIds=SuppressManager.getInstance().getInspectionIdsSuppressedInAnnotation(modifierListOwner);
            if (suppressedIds.contains(RemoveUncheckedWarningFix.UNCHECKED)) {
              checkIfSafeToRemoveWarning(annotation,modifierListOwner,holder);
            }
          }
        }
      }
    }
  }
;
}
