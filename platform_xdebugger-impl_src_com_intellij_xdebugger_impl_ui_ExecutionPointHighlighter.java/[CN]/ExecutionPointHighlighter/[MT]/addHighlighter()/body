{
  adjustCounter(myEditor,1);
  int line=mySourcePosition.getLine();
  Document document=myEditor.getDocument();
  if (line < 0 || line >= document.getLineCount())   return;
  if (myRangeHighlighter != null)   return;
  EditorColorsScheme scheme=EditorColorsManager.getInstance().getGlobalScheme();
  TextAttributes attributes=myNotTopFrame ? scheme.getAttributes(DebuggerColors.NOT_TOP_FRAME_ATTRIBUTES) : scheme.getAttributes(DebuggerColors.EXECUTIONPOINT_ATTRIBUTES);
  MarkupModel markupModel=DocumentMarkupModel.forDocument(document,myProject,true);
  if (mySourcePosition instanceof HighlighterProvider) {
    TextRange range=((HighlighterProvider)mySourcePosition).getHighlightRange();
    if (range != null) {
      TextRange lineRange=DocumentUtil.getLineTextRange(document,line);
      range=range.intersection(lineRange);
      if (range != null && !range.isEmpty() && !range.equals(lineRange)) {
        myRangeHighlighter=markupModel.addRangeHighlighter(range.getStartOffset(),range.getEndOffset(),DebuggerColors.EXECUTION_LINE_HIGHLIGHTERLAYER,attributes,HighlighterTargetArea.EXACT_RANGE);
      }
    }
  }
  if (myRangeHighlighter == null) {
    myRangeHighlighter=markupModel.addLineHighlighter(line,DebuggerColors.EXECUTION_LINE_HIGHLIGHTERLAYER,attributes);
  }
  myRangeHighlighter.putUserData(EXECUTION_POINT_HIGHLIGHTER_KEY,true);
  myRangeHighlighter.setEditorFilter(MarkupEditorFilterFactory.createIsNotDiffFilter());
  myRangeHighlighter.setGutterIconRenderer(myGutterIconRenderer);
}
