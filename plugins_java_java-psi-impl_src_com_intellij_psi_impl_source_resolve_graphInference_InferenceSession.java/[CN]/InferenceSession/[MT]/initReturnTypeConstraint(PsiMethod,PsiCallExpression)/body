{
  if (PsiPolyExpressionUtil.isMethodCallPolyExpression(context,method) || context instanceof PsiNewExpression && PsiDiamondType.ourDiamondGuard.currentStack().contains(context)) {
    final PsiType returnType=method.getReturnType();
    if (!PsiType.VOID.equals(returnType) && returnType != null) {
      PsiType targetType=PsiTypesUtil.getExpectedTypeByParent(context);
      if (targetType == null) {
        final PsiElement parent=PsiUtil.skipParenthesizedExprUp(context.getParent());
        if (parent instanceof PsiExpressionList) {
          final PsiElement gParent=parent.getParent();
          if (gParent instanceof PsiCallExpression) {
            final PsiExpressionList argumentList=((PsiCallExpression)gParent).getArgumentList();
            if (argumentList != null) {
              final Pair<PsiMethod,PsiSubstitutor> pair=MethodCandidateInfo.getCurrentMethod(argumentList);
              final JavaResolveResult resolveResult=pair == null ? ((PsiCallExpression)gParent).resolveMethodGenerics() : null;
              final PsiElement parentMethod=pair != null ? pair.first : resolveResult.getElement();
              if (parentMethod instanceof PsiMethod) {
                final PsiParameter[] parameters=((PsiMethod)parentMethod).getParameterList().getParameters();
                PsiElement arg=context;
                while (arg.getParent() instanceof PsiParenthesizedExpression) {
                  arg=parent.getParent();
                }
                final PsiExpression[] args=argumentList.getExpressions();
                targetType=getParameterType(parameters,args,ArrayUtilRt.find(args,arg),pair != null ? pair.second : resolveResult.getSubstitutor());
              }
            }
          }
        }
 else         if (parent instanceof PsiConditionalExpression) {
          targetType=PsiTypesUtil.getExpectedTypeByParent((PsiExpression)parent);
        }
 else         if (parent instanceof PsiLambdaExpression) {
          targetType=LambdaUtil.getFunctionalInterfaceReturnType(((PsiLambdaExpression)parent).getFunctionalInterfaceType());
        }
      }
      if (targetType != null) {
        myConstraints.add(new TypeCompatibilityConstraint(GenericsUtil.eliminateWildcards(targetType,false),PsiImplUtil.normalizeWildcardTypeByPosition(returnType,context)));
      }
    }
  }
}
