{
  repeatInferencePhases();
  if (parameters != null && args != null) {
    final Set<ConstraintFormula> additionalConstraints=new HashSet<ConstraintFormula>();
    if (parameters.length > 0) {
      final Pair<PsiMethod,PsiCallExpression> pair=getPair(parent);
      for (int i=0; i < args.length; i++) {
        PsiType parameterType=getParameterType(parameters,args,i,mySiteSubstitutor);
        if (args[i] != null) {
          if (pair == null || !isPertinentToApplicability(args[i],pair.first,mySiteSubstitutor,parameterType,this)) {
            additionalConstraints.add(new ExpressionCompatibilityConstraint(args[i],parameterType));
          }
          additionalConstraints.add(new CheckedExceptionCompatibilityConstraint(args[i],parameterType));
        }
      }
    }
    if (!additionalConstraints.isEmpty()) {
      for (      InferenceVariable inferenceVariable : myInferenceVariables.values()) {
        inferenceVariable.ignoreInstantiation();
      }
      proceedWithAdditionalConstraints(additionalConstraints);
    }
  }
  mySiteSubstitutor=resolveBounds(myInferenceVariables.values(),mySiteSubstitutor);
  for (  InferenceVariable inferenceVariable : myInferenceVariables.values()) {
    if (inferenceVariable.isCaptured())     continue;
    final PsiTypeParameter typeParameter=inferenceVariable.getParameter();
    PsiType instantiation=inferenceVariable.getInstantiation();
    if (instantiation == PsiType.NULL) {
      mySiteSubstitutor=mySiteSubstitutor.put(typeParameter,JavaPsiFacade.getInstance(typeParameter.getProject()).getElementFactory().createType(typeParameter));
    }
  }
  return mySiteSubstitutor;
}
