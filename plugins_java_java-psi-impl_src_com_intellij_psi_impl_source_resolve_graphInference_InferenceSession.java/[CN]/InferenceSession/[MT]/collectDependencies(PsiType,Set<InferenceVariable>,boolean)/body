{
  if (type == null)   return true;
  final Boolean isProper=type.accept(new PsiTypeVisitor<Boolean>(){
    @Nullable @Override public Boolean visitType(    PsiType type){
      return true;
    }
    @Nullable @Override public Boolean visitArrayType(    PsiArrayType arrayType){
      return arrayType.getComponentType().accept(this);
    }
    @Nullable @Override public Boolean visitWildcardType(    PsiWildcardType wildcardType){
      final PsiType bound=wildcardType.getBound();
      if (bound == null)       return true;
      return bound.accept(this);
    }
    @Nullable @Override public Boolean visitClassType(    PsiClassType classType){
      final InferenceVariable inferenceVariable=getInferenceVariable(classType,acceptCaptured);
      if (inferenceVariable != null) {
        if (dependencies != null) {
          dependencies.add(inferenceVariable);
          return true;
        }
        return false;
      }
      for (      PsiType psiType : classType.getParameters()) {
        if (!psiType.accept(this))         return false;
      }
      return true;
    }
  }
);
  return dependencies != null ? !dependencies.isEmpty() : isProper;
}
