{
  final List<AbstractTreeNode> children=new ArrayList<AbstractTreeNode>();
  ProjectFileIndex fileIndex=ProjectRootManager.getInstance(getProject()).getFileIndex();
  Module[] modules=ModuleManager.getInstance(getProject()).getModules();
  Set<Library> processedLibraries=new THashSet<Library>();
  Set<Sdk> processedSdk=new THashSet<Sdk>();
  Set<OrderEntry> processedCustomOrderEntries=new THashSet<OrderEntry>();
  for (  Module module : modules) {
    final ModuleRootManager moduleRootManager=ModuleRootManager.getInstance(module);
    final OrderEntry[] orderEntries=moduleRootManager.getOrderEntries();
    loop:     for (    final OrderEntry orderEntry : orderEntries) {
      if (orderEntry instanceof LibraryOrderEntry) {
        final LibraryOrderEntry libraryOrderEntry=(LibraryOrderEntry)orderEntry;
        final Library library=libraryOrderEntry.getLibrary();
        if (library == null)         continue;
        if (processedLibraries.contains(library))         continue;
        processedLibraries.add(library);
        if (!hasExternalEntries(fileIndex,libraryOrderEntry))         continue;
        final String libraryName=library.getName();
        if (libraryName == null || libraryName.length() == 0) {
          addLibraryChildren(libraryOrderEntry,children,getProject(),this);
        }
 else {
          children.add(new NamedLibraryElementNode(getProject(),new NamedLibraryElement(null,libraryOrderEntry),getSettings()));
        }
      }
 else       if (orderEntry instanceof ModuleExtensionWithSdkOrderEntry) {
        final ModuleExtensionWithSdkOrderEntry sdkOrderEntry=(ModuleExtensionWithSdkOrderEntry)orderEntry;
        final Sdk sdk=sdkOrderEntry.getSdk();
        if (sdk != null) {
          if (processedSdk.contains(sdk))           continue;
          processedSdk.add(sdk);
          children.add(new NamedLibraryElementNode(getProject(),new NamedLibraryElement(null,sdkOrderEntry),getSettings()));
        }
      }
 else       if (orderEntry instanceof OrderEntryWithTracking) {
        if (!orderEntry.isValid()) {
          continue;
        }
        for (        OrderEntry processedCustomOrderEntry : processedCustomOrderEntries) {
          if (processedCustomOrderEntry.isEquivalentTo(orderEntry)) {
            continue loop;
          }
        }
        processedCustomOrderEntries.add(orderEntry);
        children.add(new NamedLibraryElementNode(getProject(),new NamedLibraryElement(null,orderEntry),getSettings()));
      }
    }
  }
  return children;
}
