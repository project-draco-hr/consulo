{
  final boolean headless=ApplicationManager.getApplication().isHeadlessEnvironment();
  for (  ComponentConfig config : configs) {
    if (!loadDummies && config.skipForDummyProject) {
      continue;
    }
    String interfaceClass=config.interfaceClass;
    String implClass=config.implementationClass;
    if (headless) {
      String headlessImplClass=config.headlessImplementationClass;
      if (headlessImplClass != null) {
        if (headlessImplClass.trim().length() == 0)         continue;
        implClass=headlessImplClass;
      }
    }
    if (interfaceClass == null)     interfaceClass=implClass;
    Map<String,String> options=config.options;
    if (!myComponentManager.isComponentSuitable(options))     continue;
    ClassLoader loader=null;
    if (descriptor != null) {
      loader=descriptor.getPluginClassLoader();
    }
    if (loader == null) {
      loader=myComponentManager.getClass().getClassLoader();
    }
    interfaceClass=interfaceClass.trim();
    implClass=implClass.trim();
    try {
      myComponentManager.registerComponent(Class.forName(interfaceClass,true,loader),Class.forName(implClass,true,loader),options,true,isTrue(options,"lazy"));
    }
 catch (    Exception e) {
      @NonNls final String message="Error while initializing component: " + interfaceClass + ":"+ implClass;
      if (descriptor != null) {
        LOG.error(message,new PluginException(e,descriptor.getPluginId()));
      }
 else {
        LOG.error(message,e);
      }
    }
catch (    Error e) {
      if (descriptor != null) {
        LOG.error(new PluginException(e,descriptor.getPluginId()));
      }
 else {
        throw e;
      }
    }
  }
}
