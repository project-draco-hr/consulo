{
  final CommonProblemDescriptor[] originalProblemDescriptors=super.checkElement(refEntity,scope,manager,globalContext);
  if (!(refEntity instanceof RefMethod)) {
    return null;
  }
  final RefMethod refMethod=(RefMethod)refEntity;
  if (methodReturnUsed(refMethod)) {
    markSiblings(refMethod);
    return originalProblemDescriptors;
  }
  if (!(refMethod.getElement() instanceof PsiMethod)) {
    return originalProblemDescriptors;
  }
  final PsiMethod method=(PsiMethod)refMethod.getElement();
  if (method == null) {
    return originalProblemDescriptors;
  }
  if (MethodInheritanceUtils.inheritsFromLibraryMethod(method)) {
    markSiblings(refMethod);
    return originalProblemDescriptors;
  }
  final ProblemDescriptor descriptor=manager.createProblemDescriptor(method,InspectionGadgetsBundle.message("method.return.always.ignored.problem.descriptor"),(LocalQuickFix[])null,ProblemHighlightType.GENERIC_ERROR_OR_WARNING,false);
  if (originalProblemDescriptors == null) {
    return new ProblemDescriptor[]{descriptor};
  }
 else {
    final int numDescriptors=originalProblemDescriptors.length;
    final ProblemDescriptor[] descriptors=new ProblemDescriptor[numDescriptors + 1];
    System.arraycopy(originalProblemDescriptors,0,numDescriptors + 1,0,numDescriptors);
    descriptors[numDescriptors]=descriptor;
    return descriptors;
  }
}
