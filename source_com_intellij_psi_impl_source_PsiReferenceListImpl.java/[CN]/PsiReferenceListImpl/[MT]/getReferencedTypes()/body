{
  PsiClassType[] types=myRepositoryTypesRef == null ? null : myRepositoryTypesRef.get();
  if (types == null) {
    ASTNode treeElement=getTreeElement();
    final PsiElementFactory factory=getManager().getElementFactory();
    long repositoryId=getRepositoryId();
    if (treeElement == null && repositoryId > 0) {
      RepositoryManager repositoryManager=getRepositoryManager();
      String[] refTexts;
      if (myElementType == JavaElementType.EXTENDS_LIST) {
        refTexts=repositoryManager.getClassView().getExtendsList(repositoryId);
      }
 else       if (myElementType == JavaElementType.IMPLEMENTS_LIST) {
        refTexts=repositoryManager.getClassView().getImplementsList(repositoryId);
      }
 else       if (myElementType == JavaElementType.THROWS_LIST) {
        refTexts=repositoryManager.getMethodView().getThrowsList(repositoryId);
      }
 else {
        LOG.error("Unknown element type:" + myElementType);
        return null;
      }
      types=new PsiClassType[refTexts.length];
      for (int i=0; i < types.length; i++) {
        final PsiElement parent=getParent();
        PsiElement context=this;
        if (parent instanceof PsiClass) {
          context=((PsiClassImpl)parent).calcBasesResolveContext(PsiNameHelper.getShortClassName(refTexts[i]),this);
        }
        final FileElement holderElement=new DummyHolder(myManager,context).getTreeElement();
        final PsiJavaCodeReferenceElementImpl ref=(PsiJavaCodeReferenceElementImpl)Parsing.parseJavaCodeReferenceText(myManager,refTexts[i],holderElement.getCharTable());
        TreeUtil.addChildren(holderElement,ref);
        ref.setKindWhenDummy(PsiJavaCodeReferenceElementImpl.CLASS_NAME_KIND);
        types[i]=factory.createType(ref);
      }
    }
 else {
      final PsiJavaCodeReferenceElement[] refs=getReferenceElements();
      types=new PsiClassType[refs.length];
      for (int i=0; i < types.length; i++) {
        types[i]=factory.createType(refs[i]);
      }
    }
    myRepositoryTypesRef=myManager.isBatchFilesProcessingMode() ? new PatchedWeakReference<PsiClassType[]>(types) : new PatchedSoftReference<PsiClassType[]>(types);
  }
  return types;
}
