{
  final Set<String> removed=new HashSet<String>();
  final Set<String> changed=new HashSet<String>();
  final Set<String> unmerged=new HashSet<String>();
  for (StringScanner sc=new StringScanner(list); sc.hasMoreData(); ) {
    if (sc.isEol()) {
      sc.nextLine();
      continue;
    }
    final char status=sc.peek();
    sc.skipChars(2);
    if ('?' == status) {
      VirtualFile file=myVcsRoot.findFileByRelativePath(GitUtil.unescapePath(sc.line()));
      myUnversioned.add(file);
    }
 else {
      sc.boundedToken('\t');
      final String filePath=GitUtil.unescapePath(sc.line());
      if ('R' == status) {
        removed.add(filePath);
      }
 else       if ('C' == status) {
        changed.add(filePath);
      }
 else       if ('M' == status) {
        unmerged.add(filePath);
      }
 else {
        LOG.info("Unexpected type of the file status returned by git ls-file: [" + status + "]. Line: "+ sc.line());
      }
    }
  }
  changed.removeAll(removed);
  changed.removeAll(unmerged);
  final Set<String> changedPaths=new HashSet<String>(myChanges.size());
  for (Iterator<Change> it=myChanges.iterator(); it.hasNext(); ) {
    boolean alreadyRemoved=false;
    final Change c=it.next();
    final ContentRevision before=c.getBeforeRevision();
    final ContentRevision after=c.getAfterRevision();
    if (after != null) {
      String path=after.getFile().getPath();
      if (path != null) {
        path=GitUtil.relativePath(VfsUtil.virtualToIoFile(myVcsRoot),new File(path));
        if (removed.contains(path)) {
          it.remove();
          alreadyRemoved=true;
          if (before == null) {
            removed.remove(path);
          }
        }
 else {
          changedPaths.add(path);
        }
      }
    }
    if (before != null) {
      String path=before.getFile().getPath();
      if (path != null) {
        path=GitUtil.relativePath(VfsUtil.virtualToIoFile(myVcsRoot),new File(path));
        if (removed.contains(path)) {
          if (!alreadyRemoved) {
            it.remove();
          }
        }
 else {
          changedPaths.add(path);
        }
      }
    }
  }
  for (  String removedPath : removed) {
    ContentRevision before=GitContentRevision.createRevision(myVcsRoot,removedPath,myHeadRevision,myProject,true,true);
    myChanges.add(new Change(before,null,FileStatus.DELETED));
  }
  for (  String changedPath : changed) {
    if (changedPaths.contains(changedPath)) {
      continue;
    }
    ContentRevision before=GitContentRevision.createRevision(myVcsRoot,changedPath,myHeadRevision,myProject,false,true);
    ContentRevision after=GitContentRevision.createRevision(myVcsRoot,changedPath,null,myProject,false,false);
    myChanges.add(new Change(before,after,FileStatus.MODIFIED));
  }
}
