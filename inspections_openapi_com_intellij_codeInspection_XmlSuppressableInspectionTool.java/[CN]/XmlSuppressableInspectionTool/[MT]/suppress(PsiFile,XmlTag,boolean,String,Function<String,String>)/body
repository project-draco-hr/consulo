{
  final Project project=file.getProject();
  if (ReadonlyStatusHandler.getInstance(project).ensureFilesWritable(file.getVirtualFile()).hasReadonlyFiles()) {
    return;
  }
  final Document doc=PsiDocumentManager.getInstance(project).getDocument(file);
  LOG.assertTrue(doc != null);
  PsiElement leaf=rootTag != null ? rootTag.getPrevSibling() : file.findElementAt(0);
  while (leaf instanceof PsiWhiteSpace)   leaf=leaf.getPrevSibling();
  while (leaf instanceof PsiComment || leaf instanceof XmlProlog || leaf instanceof XmlText) {
    @NonNls String text=leaf.getText();
    if (text.contains(SUPPRESS_PREFIX)) {
      final TextRange textRange=leaf.getTextRange();
      doc.replaceString(textRange.getStartOffset(),textRange.getEndOffset(),replace.fun(text));
      return;
    }
    leaf=leaf.getPrevSibling();
  }
  int offset=0;
  if (!firstLine && rootTag != null) {
    offset=rootTag.getTextRange().getStartOffset();
  }
  doc.insertString(offset,suppressComment);
  CodeStyleManager.getInstance(project).adjustLineIndent(doc,offset + suppressComment.length());
  UndoManager.getInstance(file.getProject()).markDocumentForUndo(file);
}
