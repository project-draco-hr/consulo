{
  if (!myAutodetectionFilter.isAutodetectionEnabled(module,myFacetType,virtualFile.getUrl())) {
    LOG.debug("Autodetection disabled for " + myFacetType.getPresentableName() + " facets in module "+ module.getName());
    return null;
  }
  Facet underlyingFacet=null;
  FacetTypeId underlyingFacetType=myFacetType.getUnderlyingFacetType();
  if (underlyingFacetType != null) {
    underlyingFacet=FacetFinder.getInstance(module.getProject()).findFacet(virtualFile,underlyingFacetType);
    if (underlyingFacet == null) {
      LOG.debug("Underlying " + underlyingFacetType + " facet not found for "+ virtualFile.getUrl());
      return null;
    }
  }
  Collection<F> facets=FacetManager.getInstance(module).getFacetsByType(myFacetType.getId());
  Map<C,F> configurations=new HashMap<C,F>();
  for (  F facet : facets) {
    configurations.put(facet.getConfiguration(),facet);
  }
  final C detectedConfiguration=myFacetDetector.detectFacet(source,Collections.unmodifiableCollection(configurations.keySet()));
  if (detectedConfiguration == null) {
    return null;
  }
  if (configurations.containsKey(detectedConfiguration)) {
    return configurations.get(detectedConfiguration);
  }
  final String name=generateName(module);
  final Facet underlyingFacet1=underlyingFacet;
  return new WriteAction<Facet>(){
    protected void run(    final Result<Facet> result){
      final Facet facet=FacetManager.getInstance(module).createFacet(myFacetType,name,detectedConfiguration,underlyingFacet1);
      facet.setImplicit(true);
      ModifiableFacetModel model=FacetManager.getInstance(facet.getModule()).createModifiableModel();
      ModifiableRootModel rootModel=ModuleRootManager.getInstance(module).getModifiableModel();
      myFacetDetector.beforeFacetAdded(facet,model,rootModel);
      model.addFacet(facet);
      if (rootModel.isChanged()) {
        rootModel.commit();
      }
 else {
        rootModel.dispose();
      }
      model.commit();
      myFacetDetector.afterFacetAdded(facet);
      result.setResult(facet);
    }
  }
.execute().getResultObject();
}
