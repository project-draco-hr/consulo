{
  if (myChild1.getElementType() == JavaDocElementType.DOC_COMMENT) {
    myResult=Spacing.createSpacing(0,0,1,mySettings.KEEP_LINE_BREAKS,mySettings.KEEP_BLANK_LINES_IN_DECLARATIONS);
    return;
  }
  if (myRole2 == ChildRole.PARAMETER_LIST) {
    createSpaceInCode(mySettings.SPACE_BEFORE_METHOD_PARENTHESES);
  }
 else   if (myRole1 == ChildRole.PARAMETER_LIST && myRole2 == ChildRole.THROWS_LIST || myRole1 == ChildRole.TYPE_PARAMETER_LIST) {
    createSpaceInCode(true);
  }
 else   if (myRole2 == ChildRole.METHOD_BODY) {
    PsiElement methodName=method.getNameIdentifier();
    int dependencyStart=methodName == null ? myParent.getTextRange().getStartOffset() : methodName.getTextRange().getStartOffset();
    PsiModifierList modifierList=method.getModifierList();
    PsiAnnotation[] annotations=modifierList.getAnnotations();
    boolean useParentBlockAsDependencyAllTheTime=true;
    if (annotations.length > 0) {
      useParentBlockAsDependencyAllTheTime=false;
      PsiAnnotation annotation=annotations[annotations.length - 1];
      ASTNode nextModifier=FormattingAstUtil.getNextNonWhiteSpaceNode(annotation.getNode());
      if (nextModifier == null) {
        PsiElement element=modifierList.getNextSibling();
        if (element != null)         dependencyStart=element.getTextRange().getStartOffset();
      }
 else {
        dependencyStart=nextModifier.getStartOffset();
      }
    }
    ASTNode dependencyEndAnchor=mySettings.METHOD_BRACE_STYLE == CodeStyleSettings.NEXT_LINE ? myChild2 : myChild1;
    int dependencyEnd=dependencyEndAnchor.getTextRange().getEndOffset();
    myResult=getSpaceBeforeLBrace(mySettings.SPACE_BEFORE_METHOD_LBRACE,mySettings.METHOD_BRACE_STYLE,new TextRange(dependencyStart,dependencyEnd),mySettings.KEEP_SIMPLE_METHODS_IN_ONE_LINE,useParentBlockAsDependencyAllTheTime);
  }
 else   if (myRole1 == ChildRole.MODIFIER_LIST) {
    processModifierList();
  }
 else   if (StdTokenSets.COMMENT_BIT_SET.contains(myChild1.getElementType()) && (myRole2 == ChildRole.MODIFIER_LIST || myRole2 == ChildRole.TYPE_REFERENCE)) {
    myResult=Spacing.createSpacing(0,0,1,mySettings.KEEP_LINE_BREAKS,0);
  }
 else   if (myRole2 == ChildRole.DEFAULT_KEYWORD || myRole2 == ChildRole.ANNOTATION_DEFAULT_VALUE) {
    createSpaceInCode(true);
  }
 else   if (myChild2.getElementType() == JavaTokenType.SEMICOLON) {
    createSpaceInCode(false);
  }
 else   if (myRole1 == ChildRole.TYPE) {
    createSpaceInCode(true);
  }
}
