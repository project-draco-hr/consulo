{
  if (context == null) {
    return;
  }
  final Set<Module> affectedModules=new HashSet<Module>();
  Collections.addAll(affectedModules,context.getCompileScope().getAffectedModules());
  ApplicationManager.getApplication().invokeAndWait(new Runnable(){
    @Override public void run(){
      for (      Module module : affectedModules) {
        if (module.isDisposed() || module.getProject().isDisposed()) {
          continue;
        }
        final AndroidFacet facet=AndroidFacet.getInstance(module);
        if (facet != null) {
          AndroidCompileUtil.createGenModulesAndSourceRoots(facet);
        }
      }
    }
  }
,ModalityState.defaultModalityState());
  List<GeneratingCompiler.GenerationItem> itemsToGenerate=new ArrayList<GeneratingCompiler.GenerationItem>();
  for (  GeneratingCompiler.GenerationItem item : compiler.getGenerationItems(context)) {
    if (affectedModules.contains(item.getModule())) {
      itemsToGenerate.add(item);
    }
  }
  GeneratingCompiler.GenerationItem[] items=itemsToGenerate.toArray(new GeneratingCompiler.GenerationItem[itemsToGenerate.size()]);
  final boolean[] run={true};
  final VirtualFile[] files=getFilesToCheckReadonlyStatus(items);
  if (files.length > 0) {
    ApplicationManager.getApplication().invokeAndWait(new Runnable(){
      @Override public void run(){
        ApplicationManager.getApplication().runReadAction(new Runnable(){
          @Override public void run(){
            final Project project=context.getProject();
            run[0]=!project.isDisposed() && ReadonlyStatusHandler.ensureFilesWritable(project,files);
          }
        }
);
      }
    }
,ModalityState.defaultModalityState());
  }
  if (run[0]) {
    compiler.generate(context,items,null);
  }
}
