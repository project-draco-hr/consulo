{
  String path=context.getCompileScope().getUserData(AndroidProguardCompiler.PROGUARD_CFG_PATH_KEY);
  if (path != null) {
    final Boolean includeSystemProguardFile=context.getCompileScope().getUserData(AndroidProguardCompiler.INCLUDE_SYSTEM_PROGUARD_FILE);
    return new ProguardRunningOptions(path,Boolean.TRUE.equals(includeSystemProguardFile));
  }
  final Project project=context.getProject();
  final Set<Artifact> artifacts=ArtifactCompileScope.getArtifactsToBuild(project,context.getCompileScope(),false);
  for (  Artifact artifact : artifacts) {
    if (artifact.getArtifactType() instanceof AndroidApplicationArtifactType && facet.equals(AndroidArtifactUtil.getPackagedFacet(project,artifact))) {
      final ArtifactProperties<?> properties=artifact.getProperties(AndroidArtifactPropertiesProvider.getInstance());
      if (properties instanceof AndroidApplicationArtifactProperties) {
        final AndroidApplicationArtifactProperties p=(AndroidApplicationArtifactProperties)properties;
        if (p.isRunProGuard()) {
          path=FileUtil.toSystemDependentName(VfsUtilCore.urlToPath(p.getProGuardCfgFileUrl()));
          return new ProguardRunningOptions(path,p.isIncludeSystemProGuardCfgFile());
        }
      }
    }
  }
  final AndroidFacetConfiguration configuration=facet.getConfiguration();
  if (configuration.RUN_PROGUARD) {
    final VirtualFile proguardCfgFile=AndroidRootUtil.getProguardCfgFile(facet);
    final String proguardCfgPath=proguardCfgFile != null ? FileUtil.toSystemDependentName(proguardCfgFile.getPath()) : null;
    return new ProguardRunningOptions(proguardCfgPath,configuration.isIncludeSystemProguardCfgPath());
  }
  return null;
}
