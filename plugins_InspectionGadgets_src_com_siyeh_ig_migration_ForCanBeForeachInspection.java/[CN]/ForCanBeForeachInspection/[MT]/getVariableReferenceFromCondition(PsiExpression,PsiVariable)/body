{
  System.out.println("ForCanBeForeachInspection.getVariableReferenceFromCondition(" + condition + ")");
  condition=ParenthesesUtils.stripParentheses(condition);
  if (!(condition instanceof PsiBinaryExpression)) {
    return null;
  }
  final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)condition;
  final IElementType tokenType=binaryExpression.getOperationTokenType();
  final PsiExpression lhs=ParenthesesUtils.stripParentheses(binaryExpression.getLOperand());
  final PsiExpression rhs=ParenthesesUtils.stripParentheses(binaryExpression.getROperand());
  if (rhs == null) {
    return null;
  }
  final PsiReferenceExpression referenceExpression;
  if (tokenType.equals(JavaTokenType.LT)) {
    if (!VariableAccessUtils.evaluatesToVariable(lhs,variable) || !expressionIsArrayLengthLookup(rhs)) {
      return null;
    }
    if (rhs instanceof PsiMethodCallExpression) {
      final PsiMethodCallExpression expression=(PsiMethodCallExpression)rhs;
      referenceExpression=expression.getMethodExpression();
    }
 else     if (rhs instanceof PsiReferenceExpression) {
      referenceExpression=(PsiReferenceExpression)rhs;
    }
 else {
      return null;
    }
  }
 else   if (tokenType.equals(JavaTokenType.GT)) {
    if (!VariableAccessUtils.evaluatesToVariable(rhs,variable) || !expressionIsArrayLengthLookup(lhs)) {
      return null;
    }
    if (lhs instanceof PsiMethodCallExpression) {
      final PsiMethodCallExpression expression=(PsiMethodCallExpression)lhs;
      referenceExpression=expression.getMethodExpression();
    }
 else     if (lhs instanceof PsiReferenceExpression) {
      referenceExpression=(PsiReferenceExpression)lhs;
    }
 else {
      return null;
    }
  }
 else {
    return null;
  }
  final PsiExpression qualifierExpression=referenceExpression.getQualifierExpression();
  if (qualifierExpression instanceof PsiReferenceExpression) {
    return (PsiReferenceExpression)qualifierExpression;
  }
 else   if (qualifierExpression instanceof PsiThisExpression || qualifierExpression instanceof PsiSuperExpression || qualifierExpression == null) {
    return referenceExpression;
  }
 else {
    return null;
  }
}
