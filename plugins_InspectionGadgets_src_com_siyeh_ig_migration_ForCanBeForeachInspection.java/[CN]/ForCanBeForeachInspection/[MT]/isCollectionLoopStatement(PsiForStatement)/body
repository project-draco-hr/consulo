{
  final PsiStatement initialization=forStatement.getInitialization();
  if (!(initialization instanceof PsiDeclarationStatement)) {
    return false;
  }
  final PsiDeclarationStatement declaration=(PsiDeclarationStatement)initialization;
  final PsiElement[] declaredElements=declaration.getDeclaredElements();
  if (declaredElements.length != 1) {
    return false;
  }
  final PsiElement declaredElement=declaredElements[0];
  if (!(declaredElement instanceof PsiVariable)) {
    return false;
  }
  final PsiVariable variable=(PsiVariable)declaredElement;
  if (variable == null) {
    return false;
  }
  final PsiType variableType=variable.getType();
  if (!(variableType instanceof PsiClassType)) {
    return false;
  }
  final PsiClassType classType=(PsiClassType)variableType;
  final PsiClass declaredClass=classType.resolve();
  if (declaredClass == null) {
    return false;
  }
  if (!InheritanceUtil.isInheritor(declaredClass,CommonClassNames.JAVA_UTIL_ITERATOR)) {
    return false;
  }
  final PsiExpression initialValue=variable.getInitializer();
  if (initialValue == null) {
    return false;
  }
  if (!(initialValue instanceof PsiMethodCallExpression)) {
    return false;
  }
  final PsiMethodCallExpression initialCall=(PsiMethodCallExpression)initialValue;
  final PsiReferenceExpression initialMethodExpression=initialCall.getMethodExpression();
  final String initialCallName=initialMethodExpression.getReferenceName();
  if (!HardcodedMethodConstants.ITERATOR.equals(initialCallName)) {
    return false;
  }
  final PsiExpressionList argumentList=initialCall.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length != 0) {
    return false;
  }
  final PsiExpression qualifier=initialMethodExpression.getQualifierExpression();
  final PsiClass qualifierClass;
  if (qualifier == null) {
    qualifierClass=ClassUtils.getContainingClass(initialMethodExpression);
  }
 else {
    final PsiType qualifierType=qualifier.getType();
    if (!(qualifierType instanceof PsiClassType)) {
      return false;
    }
    qualifierClass=((PsiClassType)qualifierType).resolve();
  }
  if (qualifierClass == null) {
    return false;
  }
  if (!InheritanceUtil.isInheritor(qualifierClass,CommonClassNames.JAVA_LANG_ITERABLE) && !InheritanceUtil.isInheritor(qualifierClass,CommonClassNames.JAVA_UTIL_COLLECTION)) {
    return false;
  }
  final String iteratorName=variable.getName();
  final PsiExpression condition=forStatement.getCondition();
  if (!isHasNext(condition,iteratorName)) {
    return false;
  }
  final PsiStatement update=forStatement.getUpdate();
  if (update != null && !(update instanceof PsiEmptyStatement)) {
    return false;
  }
  final PsiStatement body=forStatement.getBody();
  if (body == null) {
    return false;
  }
  if (calculateCallsToIteratorNext(iteratorName,body) != 1) {
    return false;
  }
  if (isIteratorRemoveCalled(iteratorName,body)) {
    return false;
  }
  if (isIteratorHasNextCalled(iteratorName,body)) {
    return false;
  }
  return !VariableAccessUtils.variableIsReturned(variable,body) && !VariableAccessUtils.variableIsAssigned(variable,body) && !VariableAccessUtils.variableIsPassedAsMethodArgument(variable,body);
}
