{
  PsiClass listClass=PsiTreeUtil.getParentOfType(element,PsiClass.class);
  if (listClass == null) {
    return null;
  }
  final PsiMethod[] getMethods=listClass.findMethodsByName("get",true);
  if (getMethods.length == 0) {
    return null;
  }
  final PsiType type=getMethods[0].getReturnType();
  if (!(type instanceof PsiClassType)) {
    return null;
  }
  final PsiClassType classType=(PsiClassType)type;
  final PsiClass parameterClass=classType.resolve();
  if (parameterClass == null) {
    return null;
  }
  PsiClass subClass=null;
  while (listClass != null && !listClass.hasTypeParameters()) {
    subClass=listClass;
    listClass=listClass.getSuperClass();
  }
  if (listClass == null || subClass == null) {
    return PsiType.getJavaLangObject(element.getManager(),element.getResolveScope());
  }
  final PsiTypeParameter[] typeParameters=listClass.getTypeParameters();
  if (!parameterClass.equals(typeParameters[0])) {
    return PsiType.getJavaLangObject(element.getManager(),element.getResolveScope());
  }
  final PsiReferenceList extendsList=subClass.getExtendsList();
  if (extendsList == null) {
    return null;
  }
  final PsiJavaCodeReferenceElement[] referenceElements=extendsList.getReferenceElements();
  if (referenceElements.length == 0) {
    return null;
  }
  final PsiType[] types=referenceElements[0].getTypeParameters();
  if (types.length == 0) {
    return PsiType.getJavaLangObject(element.getManager(),element.getResolveScope());
  }
  return types[0];
}
