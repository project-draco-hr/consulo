{
  JPanel warningPanel=new JPanel(new HorizontalLayout()){
    @Override public Color getBackground(){
      return JBColor.YELLOW;
    }
  }
;
  warningPanel.setBorder(BorderFactory.createLineBorder(JBColor.ORANGE,1));
  JPanel mainPanel=new JPanel(new VerticalFlowLayout(true,true));
  warningPanel.add(new JBLabel(AllIcons.General.WarningDialog));
  warningPanel.add(new JBLabel(IdeBundle.message("eap.configurable.warning")));
  mainPanel.add(warningPanel);
  myList=new CheckBoxList<EarlyAccessProgramDescriptor>();
  myList.setItems(Arrays.asList(EarlyAccessProgramDescriptor.EP_NAME.getExtensions()),new Function<EarlyAccessProgramDescriptor,String>(){
    @Override public String fun(    EarlyAccessProgramDescriptor earlyAccessProgramDescriptor){
      return earlyAccessProgramDescriptor.getName();
    }
  }
,new Function<EarlyAccessProgramDescriptor,Boolean>(){
    @Override public Boolean fun(    EarlyAccessProgramDescriptor earlyAccessProgramDescriptor){
      return EarlyAccessProgramManager.getInstance().getState(earlyAccessProgramDescriptor.getClass());
    }
  }
);
  final JBSplitter splitter=new JBSplitter(false,0.3f);
  splitter.setSplitterProportionKey("#EarlyAccessProgramConfigurable");
  splitter.setFirstComponent(myList);
  final JTextArea textField=new JTextArea();
  textField.setEditable(false);
  JPanel panel=new JPanel(new BorderLayout());
  panel.add(textField,BorderLayout.NORTH);
  splitter.setSecondComponent(panel);
  myList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myList.addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      Object itemAt=myList.getItemAt(myList.getSelectedIndex());
      if (itemAt instanceof EarlyAccessProgramDescriptor) {
        textField.setText(((EarlyAccessProgramDescriptor)itemAt).getDescription());
      }
 else {
        textField.setText(null);
      }
    }
  }
);
  mainPanel.add(splitter);
  return mainPanel;
}
