{
  List<MergeableLineMarkerInfo> forMerge=new ArrayList<MergeableLineMarkerInfo>();
  final Iterator<LineMarkerInfo> iterator=markers.iterator();
  while (iterator.hasNext()) {
    final LineMarkerInfo marker=iterator.next();
    if (marker instanceof MergeableLineMarkerInfo) {
      iterator.remove();
      forMerge.add((MergeableLineMarkerInfo)marker);
    }
  }
  if (forMerge.isEmpty() || myEditor == null)   return markers;
  final List<LineMarkerInfo> result=new ArrayList<LineMarkerInfo>(markers);
  final HashMap<Integer,List<MergeableLineMarkerInfo>> map=new HashMap<Integer,List<MergeableLineMarkerInfo>>();
  for (  MergeableLineMarkerInfo info : forMerge) {
    final LogicalPosition position=myEditor.offsetToLogicalPosition(info.startOffset);
    List<MergeableLineMarkerInfo> infos=map.get(position.line);
    if (infos == null) {
      infos=new ArrayList<MergeableLineMarkerInfo>();
      map.put(position.line,infos);
    }
    infos.add(info);
  }
  for (  List<MergeableLineMarkerInfo> infos : map.values()) {
    result.addAll(MergeableLineMarkerInfo.merge(infos));
  }
  return result;
}
