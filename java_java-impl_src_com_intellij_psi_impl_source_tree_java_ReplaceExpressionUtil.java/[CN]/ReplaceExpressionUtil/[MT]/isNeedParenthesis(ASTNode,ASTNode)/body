{
  final ASTNode oldParent=oldExpr.getTreeParent();
  if (!ElementType.EXPRESSION_BIT_SET.contains(oldParent.getElementType()))   return false;
  int priority=getExpressionPriority(newExpr);
  int parentPriority=getExpressionPriority(oldParent);
  if (priority > parentPriority)   return false;
  IElementType i=oldParent.getElementType();
  if (i == JavaElementType.ASSIGNMENT_EXPRESSION) {
    return priority < parentPriority || ((CompositeElement)oldParent).getChildRole(oldExpr) == ChildRole.LOPERAND;
  }
 else   if (i == JavaElementType.CONDITIONAL_EXPRESSION) {
    int role=((CompositeElement)oldParent).getChildRole(oldExpr);
    if (role == ChildRole.THEN_EXPRESSION)     return false;
    return priority < parentPriority || role != ChildRole.ELSE_EXPRESSION;
  }
 else   if (i == JavaElementType.BINARY_EXPRESSION || i == JavaElementType.POLYADIC_EXPRESSION) {
    if (priority < parentPriority)     return true;
    PsiElement element=SourceTreeToPsiMap.treeElementToPsi(oldParent);
    IElementType opType=i == JavaElementType.BINARY_EXPRESSION ? ((PsiBinaryExpression)element).getOperationTokenType() : ((PsiPolyadicExpression)element).getOperationTokenType();
    return ((CompositeElement)oldParent).getChildRole(oldExpr) != ChildRole.LOPERAND && opType != JavaTokenType.PLUS && opType != JavaTokenType.ASTERISK && opType != JavaTokenType.ANDAND && opType != JavaTokenType.OROR;
  }
 else   if (i == JavaElementType.INSTANCE_OF_EXPRESSION) {
    return priority < parentPriority;
  }
 else   if (i == JavaElementType.PREFIX_EXPRESSION || i == JavaElementType.TYPE_CAST_EXPRESSION) {
    return priority < parentPriority;
  }
 else   if (i == JavaElementType.POSTFIX_EXPRESSION) {
    return priority <= parentPriority;
  }
 else   if (i == JavaElementType.REFERENCE_EXPRESSION) {
    return priority < parentPriority;
  }
 else   if (i == JavaElementType.METHOD_CALL_EXPRESSION) {
    return false;
  }
 else   if (i == JavaElementType.NEW_EXPRESSION) {
    return false;
  }
 else   if (i == JavaElementType.ARRAY_ACCESS_EXPRESSION) {
    int role=((CompositeElement)oldParent).getChildRole(oldExpr);
    return role != ChildRole.ARRAY_DIMENSION && priority < parentPriority;
  }
 else   if (i == JavaElementType.ARRAY_INITIALIZER_EXPRESSION) {
    return false;
  }
 else   if (i == JavaElementType.PARENTH_EXPRESSION) {
    return false;
  }
 else   if (i == JavaElementType.LITERAL_EXPRESSION || i == JavaElementType.THIS_EXPRESSION || i == JavaElementType.SUPER_EXPRESSION || i == JavaElementType.CLASS_OBJECT_ACCESS_EXPRESSION) {
    return false;
  }
  LOG.assertTrue(false);
  return false;
}
