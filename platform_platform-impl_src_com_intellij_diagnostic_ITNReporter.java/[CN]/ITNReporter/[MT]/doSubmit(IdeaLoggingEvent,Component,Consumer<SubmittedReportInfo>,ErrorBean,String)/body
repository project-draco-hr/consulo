{
  final DataContext dataContext=DataManager.getInstance().getDataContext(parentComponent);
  final Project project=PlatformDataKeys.PROJECT.getData(dataContext);
  final ErrorReportConfigurable errorReportConfigurable=ErrorReportConfigurable.getInstance();
  if (!errorReportConfigurable.KEEP_ITN_PASSWORD && !StringUtil.isEmpty(errorReportConfigurable.ITN_LOGIN) && StringUtil.isEmpty(errorReportConfigurable.getPlainItnPassword())) {
    final JetBrainsAccountDialog dlg=new JetBrainsAccountDialog(parentComponent);
    dlg.show();
    if (!dlg.isOK()) {
      return false;
    }
  }
  errorBean.setDescription(description);
  errorBean.setMessage(event.getMessage());
  if (previousExceptionThreadId != 0) {
    errorBean.setPreviousException(previousExceptionThreadId);
  }
  Throwable t=event.getThrowable();
  if (t != null) {
    final PluginId pluginId=IdeErrorsDialog.findPluginId(t);
    if (pluginId != null) {
      final IdeaPluginDescriptor ideaPluginDescriptor=PluginManager.getPlugin(pluginId);
      if (ideaPluginDescriptor != null && !ideaPluginDescriptor.isBundled()) {
        errorBean.setPluginName(ideaPluginDescriptor.getName());
        errorBean.setPluginVersion(ideaPluginDescriptor.getVersion());
      }
    }
  }
  Object data=event.getData();
  if (data instanceof AbstractMessage) {
    errorBean.setAssigneeId(((AbstractMessage)data).getAssigneeId());
  }
  if (data instanceof LogMessageEx) {
    errorBean.setAttachments(((LogMessageEx)data).getAttachments());
  }
  @NonNls String login=errorReportConfigurable.ITN_LOGIN;
  @NonNls String password=errorReportConfigurable.getPlainItnPassword();
  if (login.trim().length() == 0 && password.trim().length() == 0) {
    login="idea_anonymous";
    password="guest";
  }
  ErrorReportSender.sendError(project,login,password,errorBean,new Consumer<Integer>(){
    @SuppressWarnings({"AssignmentToStaticFieldFromInstanceMethod"}) @Override public void consume(    Integer threadId){
      previousExceptionThreadId=threadId;
      wasException=true;
      final SubmittedReportInfo reportInfo=new SubmittedReportInfo(URL_HEADER + threadId,String.valueOf(threadId),SubmittedReportInfo.SubmissionStatus.NEW_ISSUE);
      callback.consume(reportInfo);
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        @Override public void run(){
          StringBuilder text=new StringBuilder("<html>");
          final String url=IdeErrorsDialog.getUrl(reportInfo,true);
          IdeErrorsDialog.appendSubmissionInformation(reportInfo,text,url);
          text.append(".");
          if (reportInfo.getStatus() != SubmittedReportInfo.SubmissionStatus.FAILED) {
            text.append("<br/>").append(DiagnosticBundle.message("error.report.gratitude"));
          }
          text.append("</html>");
          NotificationType type=reportInfo.getStatus() == SubmittedReportInfo.SubmissionStatus.FAILED ? NotificationType.ERROR : NotificationType.INFORMATION;
          NotificationListener listener=url != null ? new NotificationListener(){
            @Override public void hyperlinkUpdate(            @NotNull Notification notification,            @NotNull HyperlinkEvent event){
              BrowserUtil.launchBrowser(url);
              notification.expire();
            }
          }
 : null;
          ReportMessages.GROUP.createNotification(ReportMessages.ERROR_REPORT,text.toString(),type,listener).setImportant(false).notify(project);
        }
      }
);
    }
  }
,new Consumer<Exception>(){
    @Override public void consume(    final Exception e){
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        @Override public void run(){
          String msg;
          if (e instanceof NoSuchEAPUserException) {
            msg=DiagnosticBundle.message("error.report.authentication.failed");
          }
 else           if (e instanceof InternalEAPException) {
            msg=DiagnosticBundle.message("error.report.posting.failed",e.getMessage());
          }
 else {
            msg=DiagnosticBundle.message("error.report.sending.failure");
          }
          if (e instanceof UpdateAvailableException) {
            ApplicationInfoEx appInfo=(ApplicationInfoEx)ApplicationManager.getApplication().getComponent(ApplicationInfo.class);
            String message=DiagnosticBundle.message(appInfo.isEAP() ? "error.report.new.eap.build.message" : "error.report.new.build.message",e.getMessage());
            showMessageDialog(parentComponent,project,message,CommonBundle.getWarningTitle(),Messages.getWarningIcon());
            callback.consume(new SubmittedReportInfo(null,"0",SubmittedReportInfo.SubmissionStatus.FAILED));
          }
 else           if (showYesNoDialog(parentComponent,project,msg,ReportMessages.ERROR_REPORT,Messages.getErrorIcon()) != 0) {
            callback.consume(new SubmittedReportInfo(null,"0",SubmittedReportInfo.SubmissionStatus.FAILED));
          }
 else {
            if (e instanceof NoSuchEAPUserException) {
              final JetBrainsAccountDialog dialog;
              if (parentComponent.isShowing()) {
                dialog=new JetBrainsAccountDialog(parentComponent);
              }
 else {
                dialog=new JetBrainsAccountDialog(project);
              }
              dialog.show();
            }
            ApplicationManager.getApplication().invokeLater(new Runnable(){
              @Override public void run(){
                doSubmit(event,parentComponent,callback,errorBean,description);
              }
            }
);
          }
        }
      }
);
    }
  }
);
  return true;
}
