{
  List<String> cmdLine=new LinkedList<String>();
  cmdLine.add(HgVcs.getInstance(project).getHgExecutable());
  if (repo != null) {
    cmdLine.add("--repository");
    cmdLine.add(repo.getPath());
  }
  SocketServer promptServer=new SocketServer(new PromptReceiver());
  WarningReceiver warningReceiver=new WarningReceiver();
  SocketServer warningServer=new SocketServer(warningReceiver);
  if (PROMPT_HOOKS_PLUGIN == null) {
    throw new RuntimeException("Could not hook into the prompt mechanism of Mercurial");
  }
  try {
    int promptPort=promptServer.start();
    int warningPort=warningServer.start();
    cmdLine.add("--config");
    cmdLine.add("extensions.hg4ideapromptextension=" + PROMPT_HOOKS_PLUGIN.getAbsolutePath());
    cmdLine.add("--config");
    cmdLine.add("hg4ideaprompt.port=" + promptPort);
    cmdLine.add("--config");
    cmdLine.add("hg4ideawarn.port=" + warningPort);
    cmdLine.add("--config");
    cmdLine.add("extensions.mq=");
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  cmdLine.addAll(hgOptions);
  cmdLine.add(operation);
  if (arguments != null && arguments.size() != 0) {
    cmdLine.addAll(arguments);
  }
  ShellCommand shellCommand=new ShellCommand();
  HgCommandResult result;
  try {
    LOG.debug(cmdLine.toString());
    String workingDir=repo != null ? repo.getPath() : null;
    result=shellCommand.execute(cmdLine,workingDir,charset);
  }
 catch (  ShellCommandException e) {
    showError(e);
    LOG.error(e.getMessage(),e);
    result=HgCommandResult.EMPTY;
  }
 finally {
    promptServer.stop();
    warningServer.stop();
  }
  String warnings=warningReceiver.getWarnings();
  result.setWarnings(warnings);
  return result;
}
