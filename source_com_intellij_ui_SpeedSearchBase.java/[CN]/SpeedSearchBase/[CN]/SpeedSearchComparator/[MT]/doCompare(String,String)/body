{
  if (myRecentSearchText != null && myRecentSearchText.equals(pattern)) {
    myRecentSearchMatcher.reset(text);
    return myRecentSearchMatcher.find();
  }
 else {
    myRecentSearchText=pattern;
    final StringBuffer buf=new StringBuffer(pattern.length());
    final int len=pattern.length();
    boolean hasCapitals=false;
    buf.append('^');
    for (int i=0; i < len; ++i) {
      final char ch=pattern.charAt(i);
      if (ch == '*' && (i != len - 1 || i == 0)) {
        buf.append("\\w");
      }
 else       if ("{}[].+^$*()?".indexOf(ch) != -1) {
        buf.append('\\');
      }
      if (Character.isUpperCase(ch)) {
        buf.append("[a-z]*");
        hasCapitals=true;
      }
      buf.append(ch);
    }
    try {
      final Pattern recentSearchPattern;
      recentSearchPattern=Pattern.compile(buf.toString(),hasCapitals ? 0 : Pattern.CASE_INSENSITIVE);
      return (myRecentSearchMatcher=recentSearchPattern.matcher(text)).find();
    }
 catch (    PatternSyntaxException ex) {
    }
    return false;
  }
}
