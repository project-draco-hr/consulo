{
  DataContext dataContext=event.getDataContext();
  Project project=(Project)dataContext.getData(DataConstants.PROJECT);
  String lastFilePath=getLastFilePath(project);
  String path=lastFilePath != null ? lastFilePath : RecentProjectsManager.getInstance().getLastProjectPath();
  JFileChooser fileChooser=new JFileChooser(path);
  FileView fileView=new FileView(){
    public Icon getIcon(    File f){
      if (f.isDirectory())       return super.getIcon(f);
      if (f.getName().endsWith(".ipr")) {
        return Icons.PROJECT_ICON;
      }
      FileType fileType=FileTypeManager.getInstance().getFileTypeByFileName(f.getName());
      return fileType.getIcon();
    }
  }
;
  fileChooser.setFileView(fileView);
  fileChooser.setAcceptAllFileFilterUsed(false);
  fileChooser.setDialogTitle("Open File");
  fileChooser.addChoosableFileFilter(new FileTypeFilter(StdFileTypes.XML));
  if (fileChooser.showOpenDialog(WindowManager.getInstance().suggestParentWindow(project)) != JFileChooser.APPROVE_OPTION)   return;
  File file=fileChooser.getSelectedFile();
  if (file == null)   return;
  setLastFilePath(project,file.getParent());
  Document doc;
  try {
    doc=JDOMUtil.loadDocument(file);
    ((ProjectEx)project).getExpandMacroReplacements().substitute(doc.getRootElement(),SystemInfo.isFileSystemCaseSensitive);
  }
 catch (  JDOMException e) {
    Messages.showMessageDialog(project,"Error parsing the results file","Error",Messages.getErrorIcon());
    return;
  }
catch (  IOException e) {
    Messages.showMessageDialog(project,"Error loading the results file","Error",Messages.getErrorIcon());
    return;
  }
  new OfflineViewerHandler(project).execute(doc);
}
