{
  List<T> results=new ArrayList<T>(myFutures.size());
  Throwable ex=null;
  for (  Future<T> f : myFutures) {
    try {
      T result=null;
      while (true) {
        try {
          result=f.get(10,TimeUnit.MILLISECONDS);
          break;
        }
 catch (        TimeoutException e) {
          if (f.isDone() || f.isCancelled())           break;
        }
      }
      results.add(result);
    }
 catch (    CancellationException ignore) {
    }
catch (    ExecutionException e) {
      cancel();
      Throwable cause=e.getCause();
      if (cause != null) {
        ex=cause;
      }
    }
  }
  for (  PrioritizedFutureTask<T> future : myFutures) {
    future.awaitTermination();
  }
  if (ex != null)   throw ex;
  return results;
}
