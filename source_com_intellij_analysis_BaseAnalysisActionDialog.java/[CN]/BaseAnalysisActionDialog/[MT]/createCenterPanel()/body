{
  final UIOptions uiOptions=((InspectionManagerEx)InspectionManagerEx.getInstance(myProject)).getUIOptions();
  myPanel.setBorder(IdeBorderFactory.createTitledBorder(myAnalysisNoon));
  myInspectTestSource.setSelected(uiOptions.ANALYZE_TEST_SOURCES);
  myModuleButton.setText(AnalysisScopeBundle.message("scope.option.module.with.mnemonic",myModuleName));
  boolean useModuleScope=false;
  if (myModuleName != null) {
    useModuleScope=uiOptions.SCOPE_TYPE == AnalysisScope.MODULE;
    myModuleButton.setSelected(myRememberScope && useModuleScope);
  }
  myModuleButton.setVisible(myModuleName != null);
  boolean useUncommitedFiles=false;
  final ChangeListManager changeListManager=ChangeListManager.getInstance(myProject);
  final boolean hasVCS=changeListManager.getAffectedFiles().size() > 0;
  if (hasVCS) {
    useUncommitedFiles=uiOptions.SCOPE_TYPE == AnalysisScope.UNCOMMITED_FILES;
    myUncommitedFilesButton.setSelected(myRememberScope && useUncommitedFiles);
  }
  myUncommitedFilesButton.setVisible(hasVCS);
  DefaultComboBoxModel model=new DefaultComboBoxModel();
  model.addElement(ALL);
  final List<ChangeList> changeLists=changeListManager.getChangeLists();
  for (  ChangeList changeList : changeLists) {
    model.addElement(changeList.getDescription());
  }
  myChangeLists.setModel(model);
  myChangeLists.setEnabled(myUncommitedFilesButton.isSelected());
  myChangeLists.setVisible(hasVCS);
  myFileButton.setText(myFileName);
  myFileButton.setMnemonic(myFileName.charAt(0));
  myCustomScopeButton.setSelected(myRememberScope && uiOptions.SCOPE_TYPE == AnalysisScope.CUSTOM);
  myScopeCombo.init(myProject,uiOptions.CUSTOM_SCOPE_NAME.length() > 0 ? uiOptions.CUSTOM_SCOPE_NAME : FindSettings.getInstance().getDefaultScopeName());
  myProjectButton.setSelected(myRememberScope && uiOptions.SCOPE_TYPE == AnalysisScope.PROJECT);
  myFileButton.setSelected(!myRememberScope || (uiOptions.SCOPE_TYPE != AnalysisScope.PROJECT && !useModuleScope && uiOptions.SCOPE_TYPE != AnalysisScope.CUSTOM && !useUncommitedFiles));
  myScopeCombo.setEnabled(myCustomScopeButton.isSelected());
  compoundGroup();
  final ActionListener updater=new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      myScopeCombo.setEnabled(myCustomScopeButton.isSelected());
      myChangeLists.setEnabled(myUncommitedFilesButton.isSelected());
    }
  }
;
  final Enumeration<AbstractButton> enumeration=myGroup.getElements();
  while (enumeration.hasMoreElements()) {
    enumeration.nextElement().addActionListener(updater);
  }
  JPanel wholePanel=new JPanel(new BorderLayout());
  wholePanel.add(myPanel,BorderLayout.NORTH);
  final JComponent additionalPanel=getAdditionalActionSettings(myProject);
  if (additionalPanel != null) {
    wholePanel.add(additionalPanel,BorderLayout.CENTER);
  }
  return wholePanel;
}
