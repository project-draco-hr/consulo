{
  if (isProjectScopeSelected()) {
    scope=new AnalysisScope(project);
    uiOptions.SCOPE_TYPE=AnalysisScope.PROJECT;
  }
 else {
    final SearchScope customScope=getCustomScope();
    if (customScope != null) {
      scope=new AnalysisScope(customScope,project);
      uiOptions.SCOPE_TYPE=AnalysisScope.CUSTOM;
      uiOptions.CUSTOM_SCOPE_NAME=customScope.getDisplayName();
    }
 else     if (isModuleScopeSelected()) {
      scope=new AnalysisScope(module);
      uiOptions.SCOPE_TYPE=AnalysisScope.MODULE;
    }
 else     if (isUncommitedFilesSelected()) {
      final ChangeListManager changeListManager=ChangeListManager.getInstance(project);
      List<VirtualFile> files=new ArrayList<VirtualFile>();
      if (myChangeLists.getSelectedItem() == ALL) {
        files=changeListManager.getAffectedFiles();
      }
 else {
        for (        ChangeList list : changeListManager.getChangeLists()) {
          if (!Comparing.strEqual(list.getName(),(String)myChangeLists.getSelectedItem()))           continue;
          final Collection<Change> changes=list.getChanges();
          for (          Change change : changes) {
            final ContentRevision afterRevision=change.getAfterRevision();
            if (afterRevision != null) {
              final VirtualFile vFile=afterRevision.getFile().getVirtualFile();
              if (vFile != null) {
                files.add(vFile);
              }
            }
          }
        }
      }
      scope=new AnalysisScope(project,new HashSet<VirtualFile>(files));
      uiOptions.SCOPE_TYPE=AnalysisScope.UNCOMMITED_FILES;
    }
 else {
      uiOptions.SCOPE_TYPE=AnalysisScope.FILE;
    }
  }
  uiOptions.ANALYZE_TEST_SOURCES=isInspectTestSources();
  scope.setIncludeTestSource(isInspectTestSources());
  return scope;
}
