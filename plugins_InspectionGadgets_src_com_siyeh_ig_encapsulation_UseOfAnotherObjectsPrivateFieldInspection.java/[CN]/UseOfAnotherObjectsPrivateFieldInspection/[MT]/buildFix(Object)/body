{
  final PsiField field=(PsiField)infos[0];
  final String propertyName=field.getName();
  final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)infos[1];
  final boolean isStatic=field.hasModifierProperty(PsiModifier.STATIC);
  final PsiClass containingClass=field.getContainingClass();
  if (PsiUtil.isAccessedForReading(referenceExpression)) {
    if (PsiUtil.isAccessedForWriting(referenceExpression)) {
      return null;
    }
    final PsiMethod getter=PropertyUtil.findPropertyGetter(containingClass,propertyName,isStatic,true);
    if (getter == null) {
      return null;
    }
    return new UseOfAnotherObjectsPrivateFieldFix(getter);
  }
 else   if (PsiUtil.isAccessedForWriting(referenceExpression)) {
    final PsiMethod setter=PropertyUtil.findPropertySetter(containingClass,propertyName,isStatic,true);
    if (setter == null) {
      return null;
    }
    return new UseOfAnotherObjectsPrivateFieldFix(setter);
  }
  return null;
}
