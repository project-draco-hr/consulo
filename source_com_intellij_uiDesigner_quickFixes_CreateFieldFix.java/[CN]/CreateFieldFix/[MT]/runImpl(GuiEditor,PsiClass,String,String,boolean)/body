{
  LOG.assertTrue(editor != null);
  LOG.assertTrue(boundClass != null);
  LOG.assertTrue(fieldClassName != null);
  LOG.assertTrue(fieldName != null);
  final Project project=editor.getProject();
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  if (!boundClass.isValid()) {
    return;
  }
  if (!boundClass.isWritable()) {
    if (showErrors) {
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          RefactoringMessageUtil.showReadOnlyElementMessage(boundClass,project,"Cannot create field '" + fieldClassName + "'");
        }
      }
);
    }
    return;
  }
  final PsiClass fieldClass=PsiManager.getInstance(project).findClass(fieldClassName,GlobalSearchScope.moduleWithLibrariesScope(editor.getModule()));
  if (fieldClass == null) {
    if (showErrors) {
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          Messages.showErrorDialog(editor,"Cannot create field '" + fieldName + "' because\nclass '"+ fieldClassName+ "' does not exist.","Error");
        }
      }
);
    }
    return;
  }
  final PsiElementFactory factory=PsiManager.getInstance(project).getElementFactory();
  final PsiType type=factory.createType(fieldClass);
  LOG.assertTrue(type != null);
  try {
    final PsiField field=factory.createField(fieldName,type);
    boundClass.add(field);
  }
 catch (  final IncorrectOperationException exc) {
    if (showErrors) {
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          Messages.showErrorDialog(editor,"Cannot create field '" + fieldName + "'.\nReason: "+ exc.getMessage(),"Error");
        }
      }
);
    }
    return;
  }
}
