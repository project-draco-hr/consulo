{
  JPanel panel=new JPanel(new BorderLayout());
  panel.setBorder(BorderFactory.createEmptyBorder(8,0,0,0));
  JPanel buttonPanel=new JPanel();
  if (SystemInfo.isMac) {
    panel.add(buttonPanel,BorderLayout.EAST);
    buttonPanel.setLayout(new BoxLayout(buttonPanel,BoxLayout.X_AXIS));
    myHelpButton.putClientProperty("JButton.buttonType","help");
    if (UIUtil.isUnderAquaLookAndFeel()) {
      myHelpButton.setText("");
    }
    JPanel leftPanel=new JPanel();
    if (ApplicationInfo.contextHelpAvailable()) {
      leftPanel.add(myHelpButton);
    }
    leftPanel.add(myCancelButton);
    panel.add(leftPanel,BorderLayout.WEST);
    buttonPanel.add(myFinishButton);
    if (mySteps.size() > 1) {
      buttonPanel.add(Box.createHorizontalStrut(5));
      buttonPanel.add(myPreviousButton);
      buttonPanel.add(Box.createHorizontalStrut(5));
      buttonPanel.add(myNextButton);
    }
  }
 else {
    panel.add(buttonPanel,BorderLayout.EAST);
    GroupLayout layout=new GroupLayout(buttonPanel);
    buttonPanel.setLayout(layout);
    layout.setAutoCreateGaps(true);
    final GroupLayout.SequentialGroup hGroup=layout.createSequentialGroup();
    final GroupLayout.ParallelGroup vGroup=layout.createParallelGroup();
    final Collection<Component> buttons=Lists.newArrayListWithExpectedSize(5);
    final boolean helpAvailable=ApplicationInfo.contextHelpAvailable();
    if (mySteps.size() > 1) {
      add(hGroup,vGroup,buttons,myPreviousButton,myNextButton);
    }
    add(hGroup,vGroup,buttons,myFinishButton,myCancelButton);
    if (helpAvailable) {
      add(hGroup,vGroup,buttons,myHelpButton);
    }
    layout.setHorizontalGroup(hGroup);
    layout.setVerticalGroup(vGroup);
    layout.linkSize(buttons.toArray(new Component[buttons.size()]));
  }
  myPreviousButton.setEnabled(false);
  myPreviousButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      doPreviousAction();
    }
  }
);
  myNextButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      doNextAction();
    }
  }
);
  myFinishButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      final Step currentStep=mySteps.get(myCurrentStep);
      LOG.assertTrue(currentStep != null);
      try {
        currentStep._commit(true);
        doOKAction();
      }
 catch (      final CommitStepException exc) {
        String message=exc.getMessage();
        if (message != null) {
          Messages.showErrorDialog(myContentPanel,message);
        }
      }
    }
  }
);
  myCancelButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      doCancelAction();
    }
  }
);
  myHelpButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      helpAction();
    }
  }
);
  return panel;
}
