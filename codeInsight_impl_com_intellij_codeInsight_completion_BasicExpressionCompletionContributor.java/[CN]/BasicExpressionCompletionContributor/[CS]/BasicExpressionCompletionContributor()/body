{
  extend(PsiJavaPatterns.psiElement().afterLeaf(PsiJavaPatterns.psiElement().withText(".").afterLeaf(PsiJavaPatterns.psiElement().withParent(PsiJavaPatterns.psiElement().referencing(psiClass())))),new CompletionProvider<JavaSmartCompletionParameters>(){
    public void addCompletions(    @NotNull final JavaSmartCompletionParameters parameters,    final ProcessingContext context,    @NotNull final CompletionResultSet result){
      final PsiElement element=parameters.getPosition();
      addKeyword(result,element,PsiKeyword.CLASS);
      addKeyword(result,element,PsiKeyword.THIS);
    }
  }
);
  extend(PsiJavaPatterns.psiElement().withSuperParent(2,or(PsiJavaPatterns.psiElement(PsiConditionalExpression.class).withParent(PsiReturnStatement.class),PsiJavaPatterns.psiElement(PsiReturnStatement.class))),new CompletionProvider<JavaSmartCompletionParameters>(){
    public void addCompletions(    @NotNull final JavaSmartCompletionParameters parameters,    final ProcessingContext context,    @NotNull final CompletionResultSet result){
      final PsiElement element=parameters.getPosition();
      final PsiElement parent=element.getParent();
      if (parent instanceof PsiReferenceExpression && ((PsiReferenceExpression)parent).getQualifierExpression() != null)       return;
      final PsiClass collectionsClass=JavaPsiFacade.getInstance(element.getProject()).findClass(CommonClassNames.JAVA_UTIL_COLLECTIONS,element.getResolveScope());
      if (collectionsClass == null)       return;
      final PsiType type=parameters.getExpectedType();
      final PsiType defaultType=parameters.getDefaultType();
      addCollectionMethod(result,type,defaultType,CommonClassNames.JAVA_UTIL_LIST,"emptyList",collectionsClass);
      addCollectionMethod(result,type,defaultType,CommonClassNames.JAVA_UTIL_SET,"emptySet",collectionsClass);
      addCollectionMethod(result,type,defaultType,CommonClassNames.JAVA_UTIL_MAP,"emptyMap",collectionsClass);
    }
    private void addCollectionMethod(    final CompletionResultSet result,    final PsiType expectedType,    final PsiType defaultType,    final String baseClassName,    @NonNls final String method,    @NotNull final PsiClass collectionsClass){
      if (isClassType(expectedType,baseClassName) || isClassType(expectedType,CommonClassNames.JAVA_UTIL_COLLECTION) || isClassType(defaultType,baseClassName)|| isClassType(defaultType,CommonClassNames.JAVA_UTIL_COLLECTION)) {
        final PsiMethod[] methods=collectionsClass.findMethodsByName(method,false);
        if (methods.length != 0) {
          result.addElement(JavaAwareCompletionData.qualify(LookupItemUtil.objectToLookupItem(methods[0]).setAutoCompletionPolicy(AutoCompletionPolicy.NEVER_AUTOCOMPLETE).setTailType(TailType.NONE)));
        }
      }
    }
  }
);
  extend(not(psiElement().afterLeaf(".")),new CompletionProvider<JavaSmartCompletionParameters>(){
    protected void addCompletions(    @NotNull final JavaSmartCompletionParameters parameters,    final ProcessingContext context,    @NotNull final CompletionResultSet result){
      final PsiElement position=parameters.getPosition();
      final PsiType expectedType=parameters.getExpectedType();
      final FilterGetter baseGetter=new FilterGetter(new ContextGetter(){
        public Object[] get(        final PsiElement context,        final CompletionContext completionContext){
          return new Object[]{expectedType};
        }
      }
,new ExcludeDeclaredFilter(ElementClassFilter.CLASS));
      for (      final LookupElement element : ClassLiteralGetter.getClassLiterals(position,null,result.getPrefixMatcher(),baseGetter)) {
        result.addElement(element);
      }
      for (      final Object o : new TemplatesGetter().get(position,null)) {
        result.addElement(LookupItemUtil.objectToLookupItem(o));
      }
      addKeyword(result,position,PsiKeyword.TRUE);
      addKeyword(result,position,PsiKeyword.FALSE);
      final PsiElement parent=position.getParent();
      if (parent != null && !(parent.getParent() instanceof PsiSwitchLabelStatement)) {
        MembersGetter.addMembers(parameters.getPosition(),expectedType,result);
        if (!parameters.getDefaultType().equals(expectedType)) {
          MembersGetter.addMembers(parameters.getPosition(),parameters.getDefaultType(),result);
        }
        for (        final PsiExpression expression : ThisGetter.getThisExpressionVariants(position)) {
          result.addElement(LookupItemUtil.objectToLookupItem(expression));
        }
      }
      processDataflowExpressionTypes(position,expectedType,new Consumer<LookupElement>(){
        public void consume(        LookupElement decorator){
          result.addElement(decorator);
        }
      }
);
    }
  }
);
  final ReferenceExpressionCompletionContributor referenceContributor=new ReferenceExpressionCompletionContributor();
  extend(psiElement(),new CompletionProvider<JavaSmartCompletionParameters>(){
    protected void addCompletions(    @NotNull final JavaSmartCompletionParameters parameters,    final ProcessingContext context,    @NotNull final CompletionResultSet result){
      referenceContributor.fillCompletionVariants(parameters,result);
    }
  }
);
}
