{
  PsiBuilder.Marker varAssMarker=builder.mark();
  final IElementType declarator=parseDeclarator(builder,LParenth);
  if (declarator != WRONGWAY) {
    final boolean wasAssignment=parseAssignment(builder,parser);
    if (declarator == TUPLE_DECLARATION) {
      varAssMarker.drop();
      if (!wasAssignment && !hasModifiers) {
        builder.error(GroovyBundle.message("assignment.expected"));
        return WRONGWAY;
      }
    }
 else     if (isInClass) {
      varAssMarker.done(FIELD);
    }
 else {
      varAssMarker.done(VARIABLE);
    }
    while (ParserUtils.getToken(builder,mCOMMA)) {
      ParserUtils.getToken(builder,mNLS);
      if (WRONGWAY.equals(parseVariableOrField(builder,isInClass,parser)) && declarator == mIDENT) {
        return VARIABLE_DEFINITION_ERROR;
      }
    }
    if (isInClass && declarator == TUPLE_DECLARATION) {
      builder.error(GroovyBundle.message("tuple.cant.be.placed.in.class"));
    }
    return VARIABLE_DEFINITION;
  }
 else {
    varAssMarker.drop();
    builder.error(GroovyBundle.message("identifier.expected"));
    return WRONGWAY;
  }
}
