{
  if (builder.getTokenType() == mLPAREN && !canBeTuple) {
    builder.error(GroovyBundle.message("indentifier.or.string.or.left.parenth.literal.expected"));
    return WRONGWAY;
  }
  if (!(builder.getTokenType() == mIDENT || builder.getTokenType() == mSTRING_LITERAL || builder.getTokenType() == mGSTRING_LITERAL || builder.getTokenType() == mLPAREN)) {
    builder.error(GroovyBundle.message("indentifier.or.string.or.left.parenth.literal.expected"));
    return WRONGWAY;
  }
  PsiBuilder.Marker varMarker=builder.mark();
  boolean isStringName=builder.getTokenType() == mSTRING_LITERAL || builder.getTokenType() == mGSTRING_LITERAL;
  if (isAnnotationMember && isStringName) {
    builder.error(GroovyBundle.message("string.name.unexpected"));
  }
  boolean isTuple=builder.getTokenType() == mLPAREN;
  boolean eaten=ParserUtils.getToken(builder,mIDENT) || ParserUtils.getToken(builder,mSTRING_LITERAL) || ParserUtils.getToken(builder,mGSTRING_LITERAL)|| ParserUtils.getToken(builder,mLPAREN);
  if (!eaten && !isTuple)   return WRONGWAY;
  if (mustBeMethod && mLPAREN != builder.getTokenType()) {
    varMarker.drop();
    return WRONGWAY;
  }
  if (!hasModifiers && mLPAREN == builder.getTokenType()) {
    builder.error(GroovyBundle.message("method.definition.without.modifier"));
    varMarker.drop();
    return WRONGWAY;
  }
  if (ParserUtils.getToken(builder,mLPAREN)) {
    ParameterList.parse(builder,mRPAREN);
    if (isEnumConstantMember && !isStringName) {
      builder.error(GroovyBundle.message("string.name.unexpected"));
    }
    ParserUtils.getToken(builder,mNLS);
    if (!ParserUtils.getToken(builder,mRPAREN)) {
      builder.error(GroovyBundle.message("rparen.expected"));
      varMarker.drop();
      ThrowClause.parse(builder);
      return METHOD_DEFINITION;
    }
    varMarker.drop();
    if (builder.getTokenType() == kDEFAULT) {
      PsiBuilder.Marker defaultValueMarker=builder.mark();
      ParserUtils.getToken(builder,GroovyTokenTypes.kDEFAULT);
      ParserUtils.getToken(builder,GroovyTokenTypes.mNLS);
      if (!AnnotationArguments.parseAnnotationMemberValueInitializer(builder)) {
        builder.error(GroovyBundle.message("annotation.initializer.expected"));
      }
      defaultValueMarker.done(DEFAULT_ANNOTATION_VALUE);
      return ANNOTATION_METHOD;
    }
    if (ParserUtils.lookAhead(builder,mNLS,kTHROWS) || ParserUtils.lookAhead(builder,mNLS,mLCURLY)) {
      ParserUtils.getToken(builder,mNLS);
    }
    ThrowClause.parse(builder);
    if (builder.getTokenType() == mLCURLY || ParserUtils.lookAhead(builder,mNLS,mLCURLY)) {
      ParserUtils.getToken(builder,mNLS);
      OpenOrClosableBlock.parseOpenBlock(builder);
    }
    return METHOD_DEFINITION;
  }
 else {
    varMarker.rollbackTo();
    PsiBuilder.Marker varAssMarker=builder.mark();
    final IElementType declarator=parseDeclarator(builder,isInClass,isTuple,hasModifiers);
    if (declarator != WRONGWAY) {
      final boolean wasAssingment=parseAssignment(builder);
      if (declarator == TUPLE || declarator == TUPLE_ERROR) {
        varAssMarker.drop();
        if (!wasAssingment && !hasModifiers) {
          builder.error(GroovyBundle.message("assignment.expected"));
        }
      }
 else       if (isInClass) {
        varAssMarker.done(FIELD);
      }
 else {
        varAssMarker.done(VARIABLE);
      }
      while (ParserUtils.getToken(builder,mCOMMA)) {
        ParserUtils.getToken(builder,mNLS);
        if (WRONGWAY.equals(parseVariableOrField(builder,isInClass)) && declarator == mIDENT) {
          return VARIABLE_DEFINITION_ERROR;
        }
      }
      if (isInClass && declarator == TUPLE) {
        builder.error(GroovyBundle.message("tuple.cant.be.placed.in.class"));
      }
      return declarator == TUPLE ? MULTIPLE_VARIABLE_DEFINITION : VARIABLE_DEFINITION;
    }
 else {
      varAssMarker.drop();
      builder.error(GroovyBundle.message("identifier.expected"));
      return WRONGWAY;
    }
  }
}
