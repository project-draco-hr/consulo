{
  if (!isTuple) {
    if (builder.getTokenType() == mIDENT) {
      ParserUtils.getToken(builder,mIDENT);
      return mIDENT;
    }
 else {
      return WRONGWAY;
    }
  }
 else   if (ParserUtils.getToken(builder,mLPAREN)) {
    PsiBuilder.Marker tupleMarker=builder.mark();
    final PsiBuilder.Marker firstVarMarker=builder.mark();
    if (!ParserUtils.getToken(builder,mIDENT)) {
      tupleMarker.drop();
      firstVarMarker.drop();
      return WRONGWAY;
    }
 else {
      firstVarMarker.done(VARIABLE);
    }
    while (!builder.eof() && builder.getTokenType() != mRPAREN && builder.getTokenType() != mASSIGN) {
      if (!ParserUtils.getToken(builder,mCOMMA)) {
        builder.error(GroovyBundle.message("comma.expected"));
        if (!hasModifiers) {
          tupleMarker.drop();
          return WRONGWAY;
        }
      }
 else {
        PsiBuilder.Marker varMarker=builder.mark();
        if (!ParserUtils.getToken(builder,mIDENT)) {
          builder.error(GroovyBundle.message("identifier.expected"));
          varMarker.drop();
        }
 else {
          varMarker.done(VARIABLE);
        }
      }
    }
    if (ParserUtils.getToken(builder,mRPAREN)) {
      if (builder.getTokenType() != mASSIGN) {
        if (!hasModifiers) {
          tupleMarker.drop();
          return WRONGWAY;
        }
      }
      tupleMarker.done(TUPLE);
      return TUPLE;
    }
    if (builder.getTokenType() == mASSIGN) {
      builder.error("rparen.expected");
      tupleMarker.done(TUPLE_ERROR);
      return TUPLE_ERROR;
    }
    tupleMarker.drop();
    return WRONGWAY;
  }
 else {
    return WRONGWAY;
  }
}
