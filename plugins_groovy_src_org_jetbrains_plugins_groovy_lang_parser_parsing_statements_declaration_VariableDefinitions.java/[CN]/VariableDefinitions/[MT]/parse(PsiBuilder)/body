{
  if (!(ParserUtils.lookAhead(builder,mIDENT) || ParserUtils.lookAhead(builder,mSTRING_LITERAL) || ParserUtils.lookAhead(builder,mGSTRING_LITERAL))) {
    builder.error(GroovyBundle.message("indentifier.or.string.literal.expected"));
    return WRONGWAY;
  }
  PsiBuilder.Marker varMarker=builder.mark();
  boolean isStringName=ParserUtils.lookAhead(builder,mSTRING_LITERAL) || ParserUtils.lookAhead(builder,mGSTRING_LITERAL);
  boolean eaten=ParserUtils.getToken(builder,mIDENT) || ParserUtils.getToken(builder,mSTRING_LITERAL) || ParserUtils.getToken(builder,mGSTRING_LITERAL);
  if (eaten && ParserUtils.getToken(builder,mLPAREN)) {
    GroovyElementType paramDeclList=ParameterDeclarationList.parse(builder,mRPAREN);
    boolean isEmptyParamDeclList=NONE.equals(paramDeclList);
    if (!ParserUtils.getToken(builder,mRPAREN)) {
      ParserUtils.waitNextRCurly(builder);
      builder.error(GroovyBundle.message("rparen.expected"));
    }
    if (!isStringName && isEmptyParamDeclList && ParserUtils.getToken(builder,kDEFAULT)) {
      ParserUtils.getToken(builder,mNLS);
      if (parseAnnotationMemberValueInitializer(builder)) {
        varMarker.done(DEFAULT_ANNOTATION_MEMBER);
        return DEFAULT_ANNOTATION_MEMBER;
      }
    }
    ThrowClause.parse(builder);
    PsiBuilder.Marker nlsMarker=builder.mark();
    if (mNLS.equals(NlsWarn.parse(builder)) && !ParserUtils.lookAhead(builder,mLPAREN)) {
      nlsMarker.rollbackTo();
    }
 else {
      nlsMarker.drop();
    }
    OpenOrClosableBlock.parse(builder);
    varMarker.drop();
    return METHOD_DEFINITION;
  }
 else {
    varMarker.rollbackTo();
    if (parseVariableDeclarator(builder)) {
      while (ParserUtils.getToken(builder,mCOMMA)) {
        ParserUtils.getToken(builder,mNLS);
        parseVariableDeclarator(builder);
      }
      return VARIABLE_DEFINITION;
    }
 else {
      builder.error(GroovyBundle.message("indentifier.or.string.literal.expected"));
      return WRONGWAY;
    }
  }
}
