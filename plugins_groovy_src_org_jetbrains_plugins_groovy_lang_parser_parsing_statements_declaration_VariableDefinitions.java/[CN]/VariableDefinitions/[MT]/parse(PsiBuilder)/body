{
  if (!(ParserUtils.lookAhead(builder,mIDENT) || ParserUtils.lookAhead(builder,mSTRING_LITERAL))) {
    builder.error(GroovyBundle.message("indentifier.or.string.literal.expected"));
    return WRONGWAY;
  }
  PsiBuilder.Marker varMarker=builder.mark();
  if ((ParserUtils.getToken(builder,mIDENT) || ParserUtils.getToken(builder,mSTRING_LITERAL)) && ParserUtils.getToken(builder,mLPAREN)) {
    ParameterDeclarationList.parse(builder);
    if (!ParserUtils.getToken(builder,mRPAREN)) {
      ParserUtils.waitNextRCurly(builder);
      builder.error(GroovyBundle.message("rparen.expected"));
    }
    ThrowClause.parse(builder);
    NlsWarn.parse(builder);
    OpenBlock.parse(builder);
    varMarker.drop();
    return METHOD_DEFINITION;
  }
 else {
    varMarker.rollbackTo();
  }
  if (parseVariableDeclarator(builder)) {
    while (ParserUtils.getToken(builder,mCOMMA)) {
      ParserUtils.getToken(builder,mNLS);
      parseVariableDeclarator(builder);
    }
    return VARIABLE_DEFINITION;
  }
  builder.error(GroovyBundle.message("indentifier.or.string.literal.expected"));
  return WRONGWAY;
}
