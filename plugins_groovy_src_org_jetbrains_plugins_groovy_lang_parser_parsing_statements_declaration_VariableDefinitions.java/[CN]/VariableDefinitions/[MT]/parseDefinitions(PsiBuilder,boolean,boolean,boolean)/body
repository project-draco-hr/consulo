{
  if (!(ParserUtils.lookAhead(builder,mIDENT) || ParserUtils.lookAhead(builder,mSTRING_LITERAL) || ParserUtils.lookAhead(builder,mGSTRING_LITERAL))) {
    builder.error(GroovyBundle.message("indentifier.or.string.literal.expected"));
    return WRONGWAY;
  }
  PsiBuilder.Marker varMarker=builder.mark();
  boolean isStringName=ParserUtils.lookAhead(builder,mSTRING_LITERAL) || ParserUtils.lookAhead(builder,mGSTRING_LITERAL);
  if (isAnnotationMember && isStringName) {
    builder.error(GroovyBundle.message("string.name.unexpected"));
  }
  boolean eaten=ParserUtils.getToken(builder,mIDENT) || ParserUtils.getToken(builder,mSTRING_LITERAL) || ParserUtils.getToken(builder,mGSTRING_LITERAL);
  if (!eaten)   return WRONGWAY;
  if (ParserUtils.getToken(builder,mLPAREN)) {
    GroovyElementType paramDeclList=ParameterDeclarationList.parse(builder,mRPAREN);
    if (isEnumConstantMember && !isStringName) {
      builder.error(GroovyBundle.message("string.name.unexpected"));
    }
    if (isAnnotationMember && !NONE.equals(paramDeclList)) {
      builder.error(GroovyBundle.message("empty.parameter.list.expected"));
    }
    boolean isEmptyParamDeclList=NONE.equals(paramDeclList);
    ParserUtils.getToken(builder,mNLS);
    if (!ParserUtils.getToken(builder,mRPAREN)) {
      ThrowClause.parse(builder);
      ParserUtils.waitNextRCurly(builder);
      builder.error(GroovyBundle.message("rparen.expected"));
    }
    ThrowClause.parse(builder);
    PsiBuilder.Marker nlsMarker=builder.mark();
    if (mNLS.equals(NlsWarn.parse(builder)) && !ParserUtils.lookAhead(builder,mLPAREN)) {
      nlsMarker.rollbackTo();
    }
 else {
      nlsMarker.drop();
    }
    OpenOrClosableBlock.parseOpenBlock(builder);
    varMarker.drop();
    return METHOD_DEFINITION;
  }
 else {
    varMarker.rollbackTo();
    PsiBuilder.Marker varAssMarker=builder.mark();
    if (ParserUtils.getToken(builder,mIDENT)) {
      if (parseAssignment(builder)) {
        if (isInClass) {
          varAssMarker.done(FIELD);
        }
 else {
          varAssMarker.done(VARIABLE);
        }
        while (ParserUtils.getToken(builder,mCOMMA)) {
          ParserUtils.getToken(builder,mNLS);
          if (WRONGWAY.equals(parseVariableDeclarator(builder,isInClass)))           return VARIABLE_DEFINITION_ERROR;
        }
        return VARIABLE_DEFINITION;
      }
 else {
        if (isInClass) {
          varAssMarker.done(FIELD);
        }
 else {
          varAssMarker.done(VARIABLE);
        }
        boolean isManyDef=false;
        while (ParserUtils.getToken(builder,mCOMMA)) {
          ParserUtils.getToken(builder,mNLS);
          if (WRONGWAY.equals(parseVariableDeclarator(builder,isInClass)))           return VARIABLE_DEFINITION_ERROR;
          isManyDef=true;
        }
        return VARIABLE_DEFINITION;
      }
    }
 else {
      varAssMarker.drop();
      builder.error(GroovyBundle.message("identifier.expected"));
      return VARIABLE_DEFINITION_ERROR;
    }
  }
}
