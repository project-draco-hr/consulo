{
  if (myProject.isDisposed())   return;
  if (ExternalSystemDebugEnvironment.DEBUG_ORPHAN_MODULES_PROCESSING) {
    LOG.info(String.format("Checking for orphan modules. External paths returned by external system: '%s'",myExternalModulePaths));
  }
  List<Module> orphanIdeModules=ContainerUtilRt.newArrayList();
  String externalSystemIdAsString=myExternalSystemId.toString();
  for (  Module module : ModuleManager.getInstance(myProject).getModules()) {
    String s=module.getOptionValue(ExternalSystemConstants.EXTERNAL_SYSTEM_ID_KEY);
    String p=module.getOptionValue(ExternalSystemConstants.LINKED_PROJECT_PATH_KEY);
    if (ExternalSystemDebugEnvironment.DEBUG_ORPHAN_MODULES_PROCESSING) {
      LOG.info(String.format("IDE module: EXTERNAL_SYSTEM_ID_KEY - '%s', LINKED_PROJECT_PATH_KEY - '%s'.",s,p));
    }
    if (externalSystemIdAsString.equals(s) && !myExternalModulePaths.contains(p)) {
      orphanIdeModules.add(module);
      if (ExternalSystemDebugEnvironment.DEBUG_ORPHAN_MODULES_PROCESSING) {
        LOG.info(String.format("External paths doesn't contain IDE module LINKED_PROJECT_PATH_KEY anymore => add to orphan IDE modules."));
      }
    }
  }
  if (!orphanIdeModules.isEmpty()) {
    ruleOrphanModules(orphanIdeModules,myProject,myExternalSystemId);
  }
}
