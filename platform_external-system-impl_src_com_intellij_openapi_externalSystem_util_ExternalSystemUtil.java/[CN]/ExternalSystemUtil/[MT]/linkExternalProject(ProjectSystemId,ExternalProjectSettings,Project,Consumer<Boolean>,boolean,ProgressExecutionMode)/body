{
  ExternalProjectRefreshCallback callback=new ExternalProjectRefreshCallback(){
    @SuppressWarnings("unchecked") @Override public void onSuccess(    @Nullable final DataNode<ProjectData> externalProject){
      if (externalProject == null) {
        if (executionResultCallback != null) {
          executionResultCallback.consume(false);
        }
        return;
      }
      AbstractExternalSystemSettings systemSettings=ExternalSystemApiUtil.getSettings(project,externalSystemId);
      Set<ExternalProjectSettings> projects=ContainerUtilRt.newHashSet(systemSettings.getLinkedProjectsSettings());
      projects.add(projectSettings);
      systemSettings.setLinkedProjectsSettings(projects);
      ensureToolWindowInitialized(project,externalSystemId);
      ExternalSystemApiUtil.executeProjectChangeAction(new DisposeAwareProjectChange(project){
        @Override public void execute(){
          ProjectRootManagerEx.getInstanceEx(project).mergeRootsChangesDuring(new Runnable(){
            @Override public void run(){
              ProjectDataManager dataManager=ServiceManager.getService(ProjectDataManager.class);
              dataManager.importData(externalProject.getKey(),Collections.singleton(externalProject),project,true);
            }
          }
);
        }
      }
);
      if (executionResultCallback != null) {
        executionResultCallback.consume(true);
      }
    }
    @Override public void onFailure(    @NotNull String errorMessage,    @Nullable String errorDetails){
      if (executionResultCallback != null) {
        executionResultCallback.consume(false);
      }
    }
  }
;
  refreshProject(project,externalSystemId,projectSettings.getExternalProjectPath(),callback,isPreviewMode,progressExecutionMode);
}
