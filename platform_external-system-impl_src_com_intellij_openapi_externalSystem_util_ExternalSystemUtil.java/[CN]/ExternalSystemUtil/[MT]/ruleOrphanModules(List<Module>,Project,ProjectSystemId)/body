{
  UIUtil.invokeLaterIfNeeded(new Runnable(){
    @Override public void run(){
      final JPanel content=new JPanel(new GridBagLayout());
      content.add(new JLabel(ExternalSystemBundle.message("orphan.modules.text",externalSystemId.getReadableName())),ExternalSystemUiUtil.getFillLineConstraints(0));
      final CheckBoxList<Module> orphanModulesList=new CheckBoxList<Module>();
      orphanModulesList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
      orphanModulesList.setItems(orphanModules,new Function<Module,String>(){
        @Override public String fun(        Module module){
          return module.getName();
        }
      }
);
      for (      Module module : orphanModules) {
        orphanModulesList.setItemSelected(module,true);
      }
      orphanModulesList.setBorder(IdeBorderFactory.createEmptyBorder(8));
      content.add(orphanModulesList,ExternalSystemUiUtil.getFillLineConstraints(0));
      content.setBorder(IdeBorderFactory.createEmptyBorder(0,0,8,0));
      DialogWrapper dialog=new DialogWrapper(project){
{
          setTitle(ExternalSystemBundle.message("import.title",externalSystemId.getReadableName()));
          init();
        }
        @Nullable @Override protected JComponent createCenterPanel(){
          return new JBScrollPane(content);
        }
      }
;
      boolean ok=dialog.showAndGet();
      if (!ok) {
        return;
      }
      List<Module> toRemove=ContainerUtilRt.newArrayList();
      for (int i=0; i < orphanModules.size(); i++) {
        Module module=orphanModules.get(i);
        if (orphanModulesList.isItemSelected(i)) {
          toRemove.add(module);
        }
 else {
          ModuleDataService.unlinkModuleFromExternalSystem(module);
        }
      }
      if (!toRemove.isEmpty()) {
        ServiceManager.getService(ProjectDataManager.class).removeData(ProjectKeys.MODULE,toRemove,project,true);
      }
    }
  }
);
}
