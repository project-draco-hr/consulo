{
  @NonNls final ParametersList parameters=cmdLine.getParametersList();
  if (OPTION_SCOPE != null) {
    parameters.add("-" + OPTION_SCOPE);
  }
  if (!OPTION_HIERARCHY) {
    parameters.add("-notree");
  }
  if (!OPTION_NAVIGATOR) {
    parameters.add("-nonavbar");
  }
  if (!OPTION_INDEX) {
    parameters.add("-noindex");
  }
 else   if (OPTION_SEPARATE_INDEX) {
    parameters.add("-splitindex");
  }
  if (OPTION_DOCUMENT_TAG_USE) {
    parameters.add("-use");
  }
  if (OPTION_DOCUMENT_TAG_AUTHOR) {
    parameters.add("-author");
  }
  if (OPTION_DOCUMENT_TAG_VERSION) {
    parameters.add("-version");
  }
  if (!OPTION_DOCUMENT_TAG_DEPRECATED) {
    parameters.add("-nodeprecated");
  }
 else   if (!OPTION_DEPRECATED_LIST) {
    parameters.add("-nodeprecatedlist");
  }
  parameters.addParametersString(OTHER_OPTIONS);
  final String classPath=jdk.getSdkType() instanceof JavaSdk ? ProjectRootsTraversing.collectRoots(myProject,ProjectRootsTraversing.PROJECT_LIBRARIES).getPathsString() : ProjectRootsTraversing.collectRoots(myProject,ProjectRootsTraversing.LIBRARIES_AND_JDK).getPathsString();
  if (classPath.length() > 0) {
    parameters.add("-classpath");
    parameters.add(classPath);
  }
  parameters.add("-sourcepath");
  parameters.add(ProjectRootsTraversing.collectRoots(myProject,ProjectRootsTraversing.PROJECT_SOURCES).getPathsString());
  if (OUTPUT_DIRECTORY != null) {
    parameters.add("-d");
    parameters.add(OUTPUT_DIRECTORY.replace('/',File.separatorChar));
  }
  final Collection<String> packages=new HashSet<String>();
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    public void run(){
      FileIndex fileIndex=ProjectRootManager.getInstance(myProject).getFileIndex();
      VirtualFile startingFile=null;
      if (myGenerationOptions.isGenerationForPackage) {
        if (!myGenerationOptions.isGenerationWithSubpackages) {
          packages.add(myGenerationOptions.myPackageFQName);
          return;
        }
        startingFile=myGenerationOptions.myDirectory.getVirtualFile();
      }
      MyContentIterator contentIterator=new MyContentIterator(myProject,packages);
      if (startingFile == null) {
        fileIndex.iterateContent(contentIterator);
      }
 else {
        fileIndex.iterateContentUnderDirectory(startingFile,contentIterator);
      }
    }
  }
);
  if (packages.size() == 0) {
    throw new CantRunException(JavadocBundle.message("javadoc.generate.no.classes.in.selected.packages.error"));
  }
  parameters.addAll(new ArrayList<String>(packages));
}
