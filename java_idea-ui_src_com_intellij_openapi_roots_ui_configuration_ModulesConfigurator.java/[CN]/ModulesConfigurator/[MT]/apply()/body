{
  final Map<VirtualFile,String> contentRootToModuleNameMap=new com.intellij.util.containers.HashMap<VirtualFile,String>();
  final Map<VirtualFile,VirtualFile> srcRootsToContentRootMap=new com.intellij.util.containers.HashMap<VirtualFile,VirtualFile>();
  for (  final ModuleEditor moduleEditor : myModuleEditors) {
    final ModifiableRootModel rootModel=moduleEditor.getModifiableRootModel();
    final ContentEntry[] contents=rootModel.getContentEntries();
    for (    ContentEntry contentEntry : contents) {
      final VirtualFile contentRoot=contentEntry.getFile();
      if (contentRoot == null) {
        continue;
      }
      final String moduleName=moduleEditor.getName();
      final String previousName=contentRootToModuleNameMap.put(contentRoot,moduleName);
      if (previousName != null && !previousName.equals(moduleName)) {
        throw new ConfigurationException(ProjectBundle.message("module.paths.validation.duplicate.content.error",contentRoot.getPresentableUrl(),previousName,moduleName));
      }
      for (      VirtualFile srcRoot : contentEntry.getSourceFolderFiles()) {
        final VirtualFile anotherContentRoot=srcRootsToContentRootMap.put(srcRoot,contentRoot);
        if (anotherContentRoot != null) {
          final String problematicModule;
          final String correctModule;
          if (VfsUtil.isAncestor(anotherContentRoot,contentRoot,true)) {
            problematicModule=contentRootToModuleNameMap.get(anotherContentRoot);
            correctModule=contentRootToModuleNameMap.get(contentRoot);
          }
 else {
            problematicModule=contentRootToModuleNameMap.get(contentRoot);
            correctModule=contentRootToModuleNameMap.get(anotherContentRoot);
          }
          throw new ConfigurationException(ProjectBundle.message("module.paths.validation.duplicate.source.root.error",problematicModule,srcRoot.getPresentableUrl(),correctModule));
        }
      }
    }
  }
  for (  Map.Entry<VirtualFile,VirtualFile> entry : srcRootsToContentRootMap.entrySet()) {
    final VirtualFile srcRoot=entry.getKey();
    final VirtualFile correspondingContent=entry.getValue();
    final String expectedModuleName=contentRootToModuleNameMap.get(correspondingContent);
    for (VirtualFile candidateContent=srcRoot; !candidateContent.equals(correspondingContent); candidateContent=candidateContent.getParent()) {
      final String moduleName=contentRootToModuleNameMap.get(candidateContent);
      if (moduleName != null && !moduleName.equals(expectedModuleName)) {
        throw new ConfigurationException(ProjectBundle.message("module.paths.validation.source.root.belongs.to.another.module.error",srcRoot.getPresentableUrl(),expectedModuleName,moduleName));
      }
    }
  }
  final ProjectRootManagerImpl projectRootManager=ProjectRootManagerImpl.getInstanceImpl(myProject);
  final List<ModifiableRootModel> models=new ArrayList<ModifiableRootModel>(myModuleEditors.size());
  for (  ModuleEditor moduleEditor : myModuleEditors) {
    moduleEditor.canApply();
  }
  for (  final ModuleEditor moduleEditor : myModuleEditors) {
    final ModifiableRootModel model=moduleEditor.apply();
    if (model != null) {
      models.add(model);
    }
  }
  myFacetsConfigurator.applyEditors();
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      try {
        final ModifiableRootModel[] rootModels=models.toArray(new ModifiableRootModel[models.size()]);
        projectRootManager.multiCommit(myModuleModel,rootModels);
        myFacetsConfigurator.commitFacets();
      }
  finally {
        ModuleStructureConfigurable.getInstance(myProject).getFacetEditorFacade().clearMaps(false);
        for (        final ModuleEditor moduleEditor : myModuleEditors) {
          moduleEditor.removeChangeListener(myFacetsConfigurator);
        }
        myFacetsConfigurator=createFacetsConfigurator();
        myModuleModel=ModuleManager.getInstance(myProject).getModifiableModel();
        final ProjectFacetsConfigurator configurator=myFacetsConfigurator;
        for (        final ModuleEditor moduleEditor : myModuleEditors) {
          moduleEditor.addChangeListener(configurator);
          Disposer.register(moduleEditor,new Disposable(){
            public void dispose(){
              moduleEditor.removeChangeListener(configurator);
            }
          }
);
        }
      }
    }
  }
);
  myModified=false;
}
