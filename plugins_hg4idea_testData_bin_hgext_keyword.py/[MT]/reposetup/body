def reposetup(ui, repo):
    'Sets up repo as kwrepo for keyword substitution.\n    Overrides file method to return kwfilelog instead of filelog\n    if file matches user configuration.\n    Wraps commit to overwrite configured files with updated\n    keyword substitutions.\n    Monkeypatches patch and webcommands.'
    try:
        if ((not repo.local()) or (not kwtools['inc']) or (kwtools['hgcmd'] in nokwcommands.split()) or ('.hg' in util.splitpath(repo.root)) or repo._url.startswith('bundle:')):
            return
    except AttributeError:
        pass
    kwtools['templater'] = kwt = kwtemplater(ui, repo)


    class kwrepo(repo.__class__):

        def file(self, f):
            if (f[0] == '/'):
                f = f[1:]
            return kwfilelog(self.sopener, kwt, f)

        def wread(self, filename):
            data = super(kwrepo, self).wread(filename)
            return kwt.wread(filename, data)

        def commit(self, *args, **opts):
            self.commitctx = self.kwcommitctx
            try:
                return super(kwrepo, self).commit(*args, **opts)
            finally:
                del self.commitctx

        def kwcommitctx(self, ctx, error=False):
            wlock = lock = None
            try:
                wlock = self.wlock()
                lock = self.lock()
                n = super(kwrepo, self).commitctx(ctx, error)
                kwt.overwrite(n, True, None)
                return n
            finally:
                release(lock, wlock)

    def kwpatchfile_init(orig, self, ui, fname, opener, missing=False, eol=None):
        'Monkeypatch/wrap patch.patchfile.__init__ to avoid\n        rejects or conflicts due to expanded keywords in working dir.'
        orig(self, ui, fname, opener, missing, eol)
        self.lines = kwt.shrinklines(self.fname, self.lines)

    def kw_diff(orig, repo, node1=None, node2=None, match=None, changes=None, opts=None):
        'Monkeypatch patch.diff to avoid expansion except when\n        comparing against working dir.'
        if (node2 is not None):
            kwt.match = util.never
        elif ((node1 is not None) and (node1 != repo['.'].node())):
            kwt.restrict = True
        return orig(repo, node1, node2, match, changes, opts)

    def kwweb_skip(orig, web, req, tmpl):
        'Wraps webcommands.x turning off keyword expansion.'
        kwt.match = util.never
        return orig(web, req, tmpl)
    repo.__class__ = kwrepo
    extensions.wrapfunction(patch.patchfile, '__init__', kwpatchfile_init)
    if (not kwt.restrict):
        extensions.wrapfunction(patch, 'diff', kw_diff)
    for c in 'annotate changeset rev filediff diff'.split():
        extensions.wrapfunction(webcommands, c, kwweb_skip)
