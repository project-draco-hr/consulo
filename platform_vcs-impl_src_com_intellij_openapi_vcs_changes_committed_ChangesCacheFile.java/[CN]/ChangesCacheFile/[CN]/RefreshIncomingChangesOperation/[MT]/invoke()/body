{
  if (myProject.isDisposed()) {
    return false;
  }
  myClManager=ChangeListManagerImpl.getInstanceImpl(myProject);
  final DiffProvider diffProvider=myVcs.getDiffProvider();
  if (diffProvider == null)   return false;
  myLocation.onBeforeBatch();
  final Collection<FilePath> incomingFiles=myChangesProvider.getIncomingFiles(myLocation);
  myAnyChanges=false;
  openStreams();
  loadHeader();
  myCurrentRevisions=new FactoryMap<VirtualFile,VcsRevisionNumber>(){
    protected VcsRevisionNumber create(    final VirtualFile key){
      return diffProvider.getCurrentRevision(key);
    }
  }
;
  try {
    IncomingChangeState.header(myLocation.toPresentableString());
    final List<IncomingChangeListData> list=loadIncomingChangeListData();
    boolean shouldChangeHeader;
    if (incomingFiles != null && incomingFiles.isEmpty()) {
      shouldChangeHeader=!list.isEmpty();
      for (      IncomingChangeListData data : list) {
        saveIncoming(data,true);
      }
    }
 else {
      shouldChangeHeader=refreshIncomingInFile(incomingFiles,list);
    }
    IncomingChangeState.footer();
    if (shouldChangeHeader) {
      writeHeader();
    }
  }
  finally {
    myLocation.onAfterBatch();
    closeStreams();
  }
  return myAnyChanges;
}
