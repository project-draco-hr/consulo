{
  HashSet<Change> result=new HashSet<Change>();
  try {
    File partialFile=getPartialPath(data.indexEntry.offset);
    if (partialFile.exists()) {
      RandomAccessFile file=new RandomAccessFile(partialFile,"r");
      try {
        int count=file.readInt();
        if (count > 0) {
          final Collection<Change> changes=data.changeList.getChanges();
          final Set<String> beforePaths=new HashSet<String>();
          final Set<String> afterPaths=new HashSet<String>();
          for (          Change change : changes) {
            if (change.getBeforeRevision() != null) {
              beforePaths.add(FilePathsHelper.convertPath(change.getBeforeRevision().getFile()));
            }
            if (change.getAfterRevision() != null) {
              afterPaths.add(FilePathsHelper.convertPath(change.getAfterRevision().getFile()));
            }
          }
          for (int i=0; i < count; i++) {
            boolean isAfterRevision=(file.readByte() != 0);
            String path=file.readUTF();
            final String converted=FilePathsHelper.convertPath(path);
            for (            Change c : changes) {
              if (isAfterRevision && afterPaths.contains(converted) || beforePaths.contains(converted)) {
                result.add(c);
              }
            }
          }
        }
      }
  finally {
        file.close();
      }
    }
  }
 catch (  IOException ex) {
    LOG.error(ex);
  }
  data.accountedChanges=result;
}
