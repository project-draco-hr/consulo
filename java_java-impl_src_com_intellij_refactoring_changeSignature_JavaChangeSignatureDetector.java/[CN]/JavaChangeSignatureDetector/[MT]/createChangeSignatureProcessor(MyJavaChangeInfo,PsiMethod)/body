{
  return new ChangeSignatureProcessor(method.getProject(),new MyJavaChangeInfo(info.getNewVisibility(),info.getSuperMethod(),info.getNewReturnType(),(ParameterInfoImpl[])info.getNewParameters(),info.getNewExceptions(),info.getNewName(),method.getName()){
    @Override protected void fillOldParams(    PsiMethod method){
      super.fillOldParams(method);
      oldParameterNames=info.getOldParameterNames();
      oldParameterTypes=info.getOldParameterTypes();
    }
  }
){
    @Override protected void performRefactoring(    UsageInfo[] usages){
      super.performRefactoring(usages);
      final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(method.getProject());
      final PsiParameter[] parameters=method.getParameterList().getParameters();
      for (int i=0; i < info.getModifiers().length; i++) {
        final String modifier=info.getModifiers()[i];
        final PsiModifierList modifierList=parameters[i].getModifierList();
        if (modifierList != null && !Comparing.strEqual(modifier,modifierList.getText())) {
          final PsiModifierList newModifierList=elementFactory.createParameterFromText(modifier + " type name",method).getModifierList();
          if (newModifierList != null) {
            modifierList.replace(newModifierList);
          }
        }
      }
    }
  }
;
}
