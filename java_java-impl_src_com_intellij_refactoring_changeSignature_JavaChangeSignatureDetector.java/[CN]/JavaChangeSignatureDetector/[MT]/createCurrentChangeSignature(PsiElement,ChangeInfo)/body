{
  PsiMethod method=PsiTreeUtil.getParentOfType(element,PsiMethod.class,false);
  if (method != null && isInsideMethodSignature(element,method)) {
    if (PsiTreeUtil.hasErrorElements(method.getParameterList()))     return changeInfo;
    final PsiTypeElement returnTypeElement=method.getReturnTypeElement();
    if (returnTypeElement != null && PsiTreeUtil.hasErrorElements(returnTypeElement))     return changeInfo;
    final String newVisibility=VisibilityUtil.getVisibilityModifier(method.getModifierList());
    final PsiType returnType=method.getReturnType();
    final CanonicalTypes.Type newReturnType;
    final ParameterInfoImpl[] parameterInfos;
    try {
      newReturnType=returnType != null ? CanonicalTypes.createTypeWrapper(returnType) : null;
      parameterInfos=ParameterInfoImpl.fromMethod(method);
    }
 catch (    IncorrectOperationException e) {
      return null;
    }
    final MyJavaChangeInfo fromMethod=new MyJavaChangeInfo(newVisibility,method,newReturnType,parameterInfos,null,method.getName());
    if (changeInfo == null) {
      fromMethod.setSuperMethod(method.findDeepestSuperMethod());
      return fromMethod;
    }
 else {
      final MyJavaChangeInfo info=(MyJavaChangeInfo)changeInfo;
      if (!info.getMethod().equals(method))       return null;
      if (!info.equals(fromMethod)) {
        createParametersInfo(element,parameterInfos,info);
        if (info.isReturnTypeChanged()) {
          final String visibility=info.getNewVisibility();
          if (Comparing.strEqual(visibility,PsiModifier.PRIVATE) && !info.isArrayToVarargs() && !info.isExceptionSetOrOrderChanged()&& !info.isExceptionSetChanged()&& !info.isNameChanged()&& !info.isParameterSetOrOrderChanged()&& !info.isParameterNamesChanged()&& !info.isParameterTypesChanged()) {
            return null;
          }
        }
        final MyJavaChangeInfo javaChangeInfo=new MyJavaChangeInfo(newVisibility,method,newReturnType,parameterInfos,info.getNewExceptions(),info.getOldName()){
          @Override protected void fillOldParams(          PsiMethod method){
            oldParameterNames=info.getOldParameterNames();
            oldParameterTypes=info.getOldParameterTypes();
            if (!method.isConstructor()) {
              try {
                isReturnTypeChanged=info.isReturnTypeChanged || (info.getNewReturnType() != null ? !Comparing.strEqual(info.getNewReturnType().getTypeText(),newReturnType.getTypeText()) : newReturnType != null);
              }
 catch (              IncorrectOperationException e) {
                isReturnTypeChanged=true;
              }
            }
          }
        }
;
        javaChangeInfo.setSuperMethod(info.getSuperMethod());
        return javaChangeInfo;
      }
      return changeInfo;
    }
  }
  return null;
}
