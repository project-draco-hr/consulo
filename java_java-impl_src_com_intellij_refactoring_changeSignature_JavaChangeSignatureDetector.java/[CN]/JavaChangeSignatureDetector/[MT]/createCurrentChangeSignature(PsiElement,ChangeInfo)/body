{
  PsiMethod method=PsiTreeUtil.getParentOfType(element,PsiMethod.class,false);
  if (method != null && isInsideMethodSignature(element,method)) {
    final String newVisibility=VisibilityUtil.getVisibilityModifier(method.getModifierList());
    final PsiType returnType=method.getReturnType();
    final CanonicalTypes.Type newReturnType;
    final ParameterInfoImpl[] parameterInfos;
    try {
      newReturnType=returnType != null ? CanonicalTypes.createTypeWrapper(returnType) : null;
      parameterInfos=ParameterInfoImpl.fromMethod(method);
    }
 catch (    IncorrectOperationException e) {
      return null;
    }
    final MyJavaChangeInfo fromMethod=new MyJavaChangeInfo(newVisibility,method,newReturnType,parameterInfos,null,method.getName());
    if (changeInfo == null) {
      fromMethod.setSuperMethod(method.findDeepestSuperMethod());
      return fromMethod;
    }
 else {
      final MyJavaChangeInfo info=(MyJavaChangeInfo)changeInfo;
      if (!info.getMethod().equals(method))       return null;
      if (!info.equals(fromMethod)) {
        final JavaParameterInfo[] oldParameters=info.getNewParameters();
        for (int i=0; i < parameterInfos.length; i++) {
          ParameterInfoImpl parameterInfo=parameterInfos[i];
          JavaParameterInfo oldParameter=null;
          for (          JavaParameterInfo parameter : oldParameters) {
            if (Comparing.strEqual(parameter.getName(),parameterInfo.getName()) && Comparing.strEqual(parameter.getTypeText(),parameterInfo.getTypeText())) {
              oldParameter=parameter;
              break;
            }
          }
          if (oldParameter == null && oldParameters.length > i && info.getOldParameterNames().length > i) {
            if (Comparing.strEqual(info.getOldParameterNames()[i],parameterInfo.getName()) || Comparing.strEqual(info.getOldParameterTypes()[i],parameterInfo.getTypeText())) {
              oldParameter=oldParameters[i];
            }
          }
          final int oldParameterIndex=oldParameter != null ? oldParameter.getOldIndex() : -1;
          parameterInfos[i]=new ParameterInfoImpl(oldParameterIndex,parameterInfo.getName(),parameterInfo.getTypeWrapper().getType(element,element.getManager()),oldParameterIndex == -1 ? "intellijidearulezzz" : "");
        }
        if (info.isReturnTypeChanged()) {
          final String visibility=info.getNewVisibility();
          if (Comparing.strEqual(visibility,PsiModifier.PRIVATE) && !info.isArrayToVarargs() && !info.isExceptionSetOrOrderChanged()&& !info.isExceptionSetChanged()&& !info.isNameChanged()&& !info.isParameterSetOrOrderChanged()&& !info.isParameterNamesChanged()&& !info.isParameterTypesChanged()) {
            return null;
          }
        }
        final MyJavaChangeInfo javaChangeInfo=new MyJavaChangeInfo(newVisibility,method,newReturnType,parameterInfos,info.getNewExceptions(),info.getOldName()){
          @Override protected void fillOldParams(          PsiMethod method){
            oldParameterNames=info.getOldParameterNames();
            oldParameterTypes=info.getOldParameterTypes();
            if (!method.isConstructor()) {
              try {
                isReturnTypeChanged=info.isReturnTypeChanged || !info.getNewReturnType().equals(newReturnType);
              }
 catch (              IncorrectOperationException e) {
                isReturnTypeChanged=true;
              }
            }
          }
        }
;
        javaChangeInfo.setSuperMethod(info.getSuperMethod());
        return javaChangeInfo;
      }
    }
  }
  return null;
}
