{
  if (changeInfo instanceof MyJavaChangeInfo) {
    final MyJavaChangeInfo info=(MyJavaChangeInfo)changeInfo;
    final PsiMethod method=info.getSuperMethod();
    if (silently || ApplicationManager.getApplication().isUnitTestMode()) {
      temporallyRevertChanges(info.getMethod(),oldText);
      createChangeSignatureProcessor(info,method).run();
      return true;
    }
    final JavaChangeSignatureDialog dialog=new JavaChangeSignatureDialog(method.getProject(),new JavaMethodDescriptor(info.getMethod()){
      @Override public String getReturnTypeText(){
        return info.getNewReturnType().getTypeText();
      }
    }
,true,method){
      protected BaseRefactoringProcessor createRefactoringProcessor(){
        return createChangeSignatureProcessor(info,method);
      }
      @Override protected void invokeRefactoring(      final BaseRefactoringProcessor processor){
        CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
          @Override public void run(){
            temporallyRevertChanges(method,oldText);
            doRefactor(processor);
          }
        }
,RefactoringBundle.message("changing.signature.of.0",UsageViewUtil.getDescriptiveName(info.getMethod())),null);
      }
      private void doRefactor(      BaseRefactoringProcessor processor){
        super.invokeRefactoring(processor);
      }
    }
;
    dialog.show();
    return dialog.isOK();
  }
 else   if (changeInfo instanceof RenameChangeInfo) {
    ((RenameChangeInfo)changeInfo).perform();
    return true;
  }
  return false;
}
