{
  if (elements.length != 1)   return;
  myProject=project;
  PsiElement element=elements[0];
  PsiClass aClass;
  PsiElement aMember=null;
  if (element instanceof PsiClass) {
    aClass=(PsiClass)element;
  }
 else   if (element instanceof PsiMethod) {
    aClass=((PsiMethod)element).getContainingClass();
    aMember=element;
  }
 else   if (element instanceof PsiField) {
    aClass=((PsiField)element).getContainingClass();
    aMember=element;
  }
 else   return;
  if (aClass == null) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("is.not.supported.in.the.current.context",REFACTORING_NAME));
    CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,message,null,project);
    return;
  }
  ArrayList<PsiClass> bases=RefactoringHierarchyUtil.createBasesList(aClass,false,true);
  if (bases.isEmpty()) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("class.does.not.have.base.classes.interfaces.in.current.project",aClass.getQualifiedName()));
    CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,message,null,project);
    return;
  }
  mySubclass=aClass;
  MemberInfoStorage memberInfoStorage=new MemberInfoStorage(mySubclass,new MemberInfo.Filter(){
    public boolean includeMember(    PsiMember element){
      return true;
    }
  }
);
  List<MemberInfo> members=memberInfoStorage.getClassMemberInfos(mySubclass);
  PsiManager manager=mySubclass.getManager();
  for (  MemberInfo member : members) {
    if (manager.areElementsEquivalent(member.getMember(),aMember)) {
      member.setChecked(true);
      break;
    }
  }
  final PullUpDialog dialog=new PullUpDialog(project,aClass,bases,memberInfoStorage,this);
  dialog.show();
  if (!dialog.isOK())   return;
  CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
    public void run(){
      final Runnable action=new Runnable(){
        public void run(){
          doRefactoring(dialog);
        }
      }
;
      ApplicationManager.getApplication().runWriteAction(action);
    }
  }
,REFACTORING_NAME,null);
}
