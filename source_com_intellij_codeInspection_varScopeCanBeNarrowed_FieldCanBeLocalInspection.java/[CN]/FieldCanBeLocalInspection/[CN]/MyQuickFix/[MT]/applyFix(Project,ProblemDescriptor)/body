{
  PsiManager manager=PsiManager.getInstance(project);
  PsiSearchHelper helper=manager.getSearchHelper();
  Set<PsiMethod> methodSet=new HashSet<PsiMethod>();
  final PsiReference[] allRefs=helper.findReferences(myField,GlobalSearchScope.allScope(project),false);
  for (  PsiReference ref : allRefs) {
    if (ref instanceof PsiReferenceExpression) {
      final PsiMethod method=PsiTreeUtil.getParentOfType((PsiReferenceExpression)ref,PsiMethod.class);
      LOG.assertTrue(method != null);
      methodSet.add(method);
    }
  }
  PsiElement newCaretPosition=null;
  for (  PsiMethod method : methodSet) {
    final PsiReference[] refs=helper.findReferences(myField,new LocalSearchScope(method),true);
    LOG.assertTrue(refs.length > 0);
    PsiCodeBlock anchorBlock=findAnchorBlock(refs);
    LOG.assertTrue(anchorBlock != null);
    final PsiElementFactory elementFactory=manager.getElementFactory();
    final CodeStyleManager styleManager=manager.getCodeStyleManager();
    final String propertyName=styleManager.variableNameToPropertyName(myField.getName(),VariableKind.FIELD);
    String localName=styleManager.propertyNameToVariableName(propertyName,VariableKind.LOCAL_VARIABLE);
    localName=RefactoringUtil.suggestUniqueVariableName(localName,anchorBlock,myField);
    try {
      final PsiDeclarationStatement decl=elementFactory.createVariableDeclarationStatement(localName,myField.getType(),null);
      final PsiElement anchor=getAnchorElement(anchorBlock,refs);
      final PsiElement newVariable=anchorBlock.addAfter(decl,anchor);
      if (newCaretPosition == null) {
        newCaretPosition=newVariable;
      }
      final PsiReferenceExpression refExpr=(PsiReferenceExpression)elementFactory.createExpressionFromText(localName,null);
      for (      PsiReference ref : refs) {
        if (ref instanceof PsiReferenceExpression) {
          ((PsiReferenceExpression)ref).replace(refExpr);
        }
      }
    }
 catch (    IncorrectOperationException e) {
      LOG.error(e);
    }
  }
  if (newCaretPosition != null) {
    final PsiFile psiFile=myField.getContainingFile();
    final Editor editor=FileEditorManager.getInstance(project).getSelectedTextEditor();
    if (editor != null && IJSwingUtilities.hasFocus(editor.getComponent())) {
      final PsiFile file=PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument());
      if (file == psiFile) {
        editor.getCaretModel().moveToOffset(newCaretPosition.getTextOffset());
        editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
      }
    }
  }
  try {
    myField.normalizeDeclaration();
    myField.delete();
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
