{
  registrar.extend(CompletionType.BASIC,psiElement(PsiIdentifier.class).andNot(INSIDE_TYPE_PARAMS_PATTERN).withParent(or(psiElement(PsiLocalVariable.class),psiElement(PsiParameter.class)))).withId(VARIABLE_NAME).dependingOn(LegacyCompletionContributor.LEGACY).withProvider(new CompletionProvider<LookupElement,CompletionParameters>(){
    public void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext matchingContext,    @NotNull final CompletionResultSet<LookupElement> result){
      CompletionContext context=parameters.getPosition().getUserData(CompletionContext.COMPLETION_CONTEXT_KEY);
      final PsiFile file=parameters.getOriginalFile();
      final PsiElement lastElement=file.findElementAt(context.startOffset - 1);
      PsiElement insertedElement=parameters.getPosition();
      CompletionData completionData=CompletionUtil.getCompletionDataByElement(lastElement,file,context.startOffset);
      context.setPrefix(insertedElement,context.startOffset,completionData);
      result.setPrefixMatcher(context.getPrefix());
      Set<LookupItem> lookupSet=new THashSet<LookupItem>();
      final PsiVariable variable=(PsiVariable)parameters.getPosition().getParent();
      JavaCompletionUtil.completeLocalVariableName(lookupSet,result.getPrefixMatcher(),variable);
      result.addAllElements(lookupSet);
    }
  }
);
  registrar.extend(CompletionType.BASIC,psiElement(PsiIdentifier.class).withParent(PsiField.class)).withId(VARIABLE_NAME).withProvider(new CompletionProvider<LookupElement,CompletionParameters>(){
    public void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext matchingContext,    @NotNull final CompletionResultSet<LookupElement> result){
      CompletionContext context=parameters.getPosition().getUserData(CompletionContext.COMPLETION_CONTEXT_KEY);
      final PsiFile file=parameters.getOriginalFile();
      final PsiElement lastElement=file.findElementAt(context.startOffset - 1);
      PsiElement insertedElement=parameters.getPosition();
      CompletionData completionData=CompletionUtil.getCompletionDataByElement(lastElement,file,context.startOffset);
      context.setPrefix(insertedElement,context.startOffset,completionData);
      result.setPrefixMatcher(context.getPrefix());
      Set<LookupItem> lookupSet=new THashSet<LookupItem>();
      final PsiVariable variable=(PsiVariable)parameters.getPosition().getParent();
      JavaCompletionUtil.completeFieldName(lookupSet,variable,result.getPrefixMatcher());
      JavaCompletionUtil.completeMethodName(lookupSet,variable,result.getPrefixMatcher());
      result.addAllElements(lookupSet);
    }
  }
);
  registrar.extend(CompletionType.BASIC,PsiJavaPatterns.psiElement().nameIdentifierOf(PsiJavaPatterns.psiMethod().withParent(PsiClass.class))).withId(METHOD_NAME).dependingOn(LegacyCompletionContributor.LEGACY).withProvider(new CompletionProvider<LookupElement,CompletionParameters>(){
    public void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext matchingContext,    @NotNull final CompletionResultSet<LookupElement> result){
      CompletionContext context=parameters.getPosition().getUserData(CompletionContext.COMPLETION_CONTEXT_KEY);
      final PsiFile file=parameters.getOriginalFile();
      final PsiElement lastElement=file.findElementAt(context.startOffset - 1);
      PsiElement insertedElement=parameters.getPosition();
      CompletionData completionData=CompletionUtil.getCompletionDataByElement(lastElement,file,context.startOffset);
      context.setPrefix(insertedElement,context.startOffset,completionData);
      result.setPrefixMatcher(context.getPrefix());
      Set<LookupItem> lookupSet=new THashSet<LookupItem>();
      JavaCompletionUtil.completeMethodName(lookupSet,parameters.getPosition().getParent(),result.getPrefixMatcher());
      result.addAllElements(lookupSet);
    }
  }
);
  registrar.extend(CompletionType.BASIC,psiElement()).withId(ANALYZE_ITEM).dependingOn(LegacyCompletionContributor.LEGACY,VARIABLE_NAME,METHOD_NAME).withProvider(new CompletionProvider<LookupElement,CompletionParameters>(){
    public void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext context,    @NotNull final CompletionResultSet<LookupElement> result){
      result.processResults(new Processor<LookupElement>(){
        public boolean process(        final LookupElement lookupElement){
          LookupItem item=(LookupItem)lookupElement;
          CompletionUtil.highlightMemberOfContainer(item);
          if (item.getInsertHandler() != null)           return true;
          item.setAttribute(LookupItem.INSERT_HANDLER_ATTR,new InsertHandler(){
            public void handleInsert(            final CompletionContext context,            final int startOffset,            final LookupData data,            final LookupItem item,            final boolean signatureSelected,            final char completionChar){
              analyzeItem(context,item,item.getObject(),parameters.getPosition());
              new DefaultInsertHandler().handleInsert(context,startOffset,data,item,signatureSelected,completionChar);
            }
          }
);
          return true;
        }
      }
);
    }
  }
);
  registrar.extend(CompletionType.SMART,psiElement()).withId(JAVA_LEGACY).withProvider(new CompletionProvider<LookupElement,CompletionParameters>(){
    public void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext matchingContext,    @NotNull final CompletionResultSet<LookupElement> result){
      final Set<LookupItem> set=new LinkedHashSet<LookupItem>();
      final PsiElement identifierCopy=parameters.getPosition();
      final Set<CompletionVariant> keywordVariants=new HashSet<CompletionVariant>();
      final CompletionContext context=parameters.getPosition().getUserData(CompletionContext.COMPLETION_CONTEXT_KEY);
      PsiFile file=parameters.getOriginalFile();
      final PsiReference ref=identifierCopy.getContainingFile().findReferenceAt(identifierCopy.getTextRange().getStartOffset());
      if (ref != null) {
        SMART_DATA.completeReference(ref,set,identifierCopy,result.getPrefixMatcher(),file,context.offset);
      }
      SMART_DATA.addKeywordVariants(keywordVariants,identifierCopy,file);
      SMART_DATA.completeKeywordsBySet(set,keywordVariants,identifierCopy,result.getPrefixMatcher(),file);
      CompletionUtil.highlightMembersOfContainer(set);
      result.addAllElements(set);
    }
  }
);
  registrar.extend(CompletionType.CLASS_NAME,PlatformPatterns.psiElement()).withId(JAVA_LEGACY).withProvider(new CompletionProvider<LookupElement,CompletionParameters>(){
    public void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext matchingContext,    @NotNull final CompletionResultSet<LookupElement> result){
      CompletionContext context=parameters.getPosition().getUserData(CompletionContext.COMPLETION_CONTEXT_KEY);
      final PsiFile file=parameters.getOriginalFile();
      PsiElement insertedElement=parameters.getPosition();
      CompletionData completionData=CLASS_NAME_DATA;
      context.setPrefix(insertedElement,context.startOffset,completionData);
      result.setPrefixMatcher(context.getPrefix());
      final Set<LookupItem> lookupSet=new LinkedHashSet<LookupItem>();
      final PsiReference ref=insertedElement.getContainingFile().findReferenceAt(context.offset);
      final PrefixMatcher matcher=result.getPrefixMatcher();
      if (ref != null) {
        completionData.completeReference(ref,lookupSet,insertedElement,matcher,file,context.offset);
      }
      if (lookupSet.isEmpty() || !CodeInsightUtil.isAntFile(file)) {
        final Set<CompletionVariant> keywordVariants=new HashSet<CompletionVariant>();
        completionData.addKeywordVariants(keywordVariants,insertedElement,file);
        completionData.completeKeywordsBySet(lookupSet,keywordVariants,insertedElement,matcher,file);
      }
      result.addAllElements(lookupSet);
    }
  }
);
  registrar.extend(CompletionType.BASIC,psiElement()).withId(JAVA_LEGACY).withAdvertiser(new CompletionAdvertiser(){
    public String advertise(    @NotNull final CompletionParameters parameters,    final ProcessingContext context,    final PrefixMatcher matcher){
      if (shouldSuggestSmartCompletion(parameters.getPosition(),matcher.getPrefix())) {
        return CompletionBundle.message("completion.smart.hint",KeymapUtil.getFirstKeyboardShortcutText(ActionManager.getInstance().getAction(IdeActions.ACTION_SMART_TYPE_COMPLETION)));
      }
      if (shouldSuggestClassNameCompletion(parameters.getPosition(),matcher.getPrefix())) {
        return CompletionBundle.message("completion.class.name.hint",KeymapUtil.getFirstKeyboardShortcutText(ActionManager.getInstance().getAction(IdeActions.ACTION_CLASS_NAME_COMPLETION)));
      }
      return null;
    }
  }
);
  registrar.extend(CompletionType.SMART,psiElement()).withId(JAVA_LEGACY).withAdvertiser(new CompletionAdvertiser(){
    public String advertise(    @NotNull final CompletionParameters parameters,    final ProcessingContext context,    final PrefixMatcher matcher){
      if (shouldSuggestClassNameCompletion(parameters.getPosition(),matcher.getPrefix())) {
        return CompletionBundle.message("completion.class.name.hint",KeymapUtil.getFirstKeyboardShortcutText(ActionManager.getInstance().getAction(IdeActions.ACTION_CLASS_NAME_COMPLETION)));
      }
      return null;
    }
  }
);
  registrar.extend(CompletionType.CLASS_NAME,psiElement()).withId(JAVA_LEGACY).withAdvertiser(new CompletionAdvertiser(){
    public String advertise(    @NotNull final CompletionParameters parameters,    final ProcessingContext context,    final PrefixMatcher matcher){
      if (shouldSuggestSmartCompletion(parameters.getPosition(),matcher.getPrefix())) {
        return CompletionBundle.message("completion.smart.hint",KeymapUtil.getFirstKeyboardShortcutText(ActionManager.getInstance().getAction(IdeActions.ACTION_SMART_TYPE_COMPLETION)));
      }
      return null;
    }
  }
);
  final CompletionProvider<LookupElement,CompletionParameters> methodMerger=new CompletionProvider<LookupElement,CompletionParameters>(){
    public void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext context,    @NotNull final CompletionResultSet<LookupElement> result){
      final List<LookupItem> nonGrouped=new ArrayList<LookupItem>();
      final Map<String,LookupItem<PsiMethod>> methodNameToItem=new LinkedHashMap<String,LookupItem<PsiMethod>>();
      result.processResults(new Processor<LookupElement>(){
        public boolean process(        final LookupElement element){
          LookupItem item=(LookupItem)element;
          if (item.getAttribute(LookupItem.FORCE_SHOW_SIGNATURE_ATTR) != null) {
            nonGrouped.add(item);
            return true;
          }
          Object o=item.getObject();
          if (o instanceof PsiMethod) {
            PsiMethod method=(PsiMethod)o;
            String name=method.getName();
            LookupItem<PsiMethod> existing=methodNameToItem.get(name);
            ArrayList<PsiMethod> allMethods;
            if (existing != null) {
              if (existing.getObject().getParameterList().getParametersCount() == 0 && method.getParameterList().getParametersCount() > 0) {
                methodNameToItem.put(name,item);
              }
              allMethods=(ArrayList<PsiMethod>)existing.getAttribute(LookupImpl.ALL_METHODS_ATTRIBUTE);
            }
 else {
              methodNameToItem.put(name,item);
              allMethods=new ArrayList<PsiMethod>();
            }
            allMethods.add(method);
            item.setAttribute(LookupImpl.ALL_METHODS_ATTRIBUTE,allMethods);
            return true;
          }
          nonGrouped.add(item);
          return true;
        }
      }
);
      final boolean justOneMethodName=nonGrouped.isEmpty() && methodNameToItem.size() == 1;
      if (!CodeInsightSettings.getInstance().SHOW_SIGNATURES_IN_LOOKUPS || justOneMethodName) {
        result.clearResults();
        result.addAllElements(nonGrouped);
        for (        final LookupItem<PsiMethod> item : methodNameToItem.values()) {
          result.addElement(item);
          ArrayList<PsiMethod> list=(ArrayList<PsiMethod>)item.getAttribute(LookupImpl.ALL_METHODS_ATTRIBUTE);
          item.setAttribute(LookupImpl.ALL_METHODS_ATTRIBUTE,list.toArray(new PsiMethod[list.size()]));
        }
      }
 else {
        result.processResults(new Processor<LookupElement>(){
          public boolean process(          final LookupElement element){
            ((LookupItem)element).setAttribute(LookupImpl.ALL_METHODS_ATTRIBUTE,null);
            return true;
          }
        }
);
      }
    }
  }
;
  registrar.extend(CompletionType.BASIC,psiElement()).dependingOn(ANALYZE_ITEM).withProvider(methodMerger);
  registrar.extend(CompletionType.SMART,psiElement()).dependingOn(JAVA_LEGACY).withProvider(methodMerger);
  registrar.extend(CompletionType.CLASS_NAME,psiElement()).dependingOn(JAVA_LEGACY).withProvider(methodMerger);
}
