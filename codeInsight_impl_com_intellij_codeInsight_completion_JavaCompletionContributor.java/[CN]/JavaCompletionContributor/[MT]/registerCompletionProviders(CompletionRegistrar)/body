{
  registrar.extend(CompletionType.BASIC,psiElement().inFile(PlatformPatterns.psiFile().withLanguage(StdLanguages.JAVA)),new CompletionProvider<LookupElement,CompletionParameters>(){
    public void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext matchingContext,    @NotNull final CompletionResultSet<LookupElement> result){
      result.stopHere();
      CompletionContext context=parameters.getPosition().getUserData(CompletionContext.COMPLETION_CONTEXT_KEY);
      final PsiFile file=parameters.getOriginalFile();
      final int startOffset=context.getStartOffset();
      final PsiElement lastElement=file.findElementAt(startOffset - 1);
      PsiElement insertedElement=parameters.getPosition();
      CompletionData completionData=CompletionUtil.getCompletionData(lastElement,file,startOffset,getCompletionDataByElementInner(lastElement));
      result.setPrefixMatcher(completionData.findPrefix(insertedElement,startOffset));
      final Set<LookupItem> lookupSet=new LinkedHashSet<LookupItem>();
      final PsiReference ref=insertedElement.getContainingFile().findReferenceAt(context.getStartOffset());
      if (ref != null) {
        completionData.completeReference(ref,lookupSet,insertedElement,result.getPrefixMatcher(),context.file,context.getStartOffset());
      }
      final Set<CompletionVariant> keywordVariants=new HashSet<CompletionVariant>();
      completionData.addKeywordVariants(keywordVariants,insertedElement,context.file);
      completionData.completeKeywordsBySet(lookupSet,keywordVariants,insertedElement,result.getPrefixMatcher(),context.file);
      for (      final LookupItem item : lookupSet) {
        ApplicationManager.getApplication().runReadAction(new Runnable(){
          public void run(){
            JavaCompletionUtil.highlightMemberOfContainer(item);
          }
        }
);
        if (item.getInsertHandler() == null) {
          item.setInsertHandler(new InsertHandler(){
            public void handleInsert(            final CompletionContext context,            final int startOffset,            final LookupData data,            final LookupItem item,            final boolean signatureSelected,            final char completionChar){
              analyzeItem(context,item,item.getObject(),parameters.getPosition());
              new DefaultInsertHandler().handleInsert(context,startOffset,data,item,signatureSelected,completionChar);
            }
          }
);
        }
        result.addElement(item);
      }
    }
    private CompletionData getCompletionDataByElementInner(    PsiElement element){
      if (element != null && PsiTreeUtil.getParentOfType(element,PsiDocComment.class) != null) {
        return JavaCompletionUtil.ourJavaDocCompletionData.getValue();
      }
      return element != null && PsiUtil.getLanguageLevel(element).equals(LanguageLevel.JDK_1_5) ? JavaCompletionUtil.ourJava15CompletionData.getValue() : JavaCompletionUtil.ourJavaCompletionData.getValue();
    }
  }
);
  registrar.extend(psiElement().inFile(PlatformPatterns.psiFile().withLanguage(StdLanguages.JAVA)),new CompletionAdvertiser(){
    public String advertise(    @NotNull final CompletionParameters parameters,    final ProcessingContext context,    final PrefixMatcher matcher){
      if (parameters.getCompletionType() != CompletionType.SMART && shouldSuggestSmartCompletion(parameters.getPosition(),matcher.getPrefix())) {
        return CompletionBundle.message("completion.smart.hint",KeymapUtil.getFirstKeyboardShortcutText(ActionManager.getInstance().getAction(IdeActions.ACTION_SMART_TYPE_COMPLETION)));
      }
      if (parameters.getCompletionType() != CompletionType.CLASS_NAME && shouldSuggestClassNameCompletion(parameters.getPosition(),matcher.getPrefix())) {
        return CompletionBundle.message("completion.class.name.hint",KeymapUtil.getFirstKeyboardShortcutText(ActionManager.getInstance().getAction(IdeActions.ACTION_CLASS_NAME_COMPLETION)));
      }
      return null;
    }
  }
);
}
