{
  registrar.extendBasicCompletion(psiElement(PsiIdentifier.class).andNot(INSIDE_TYPE_PARAMS_PATTERN).withParent(or(psiElement(PsiLocalVariable.class),psiElement(PsiParameter.class)))).onPriority(Double.POSITIVE_INFINITY).withProvider(new CompletionProvider<LookupElement,CompletionParameters>(){
    public void addCompletions(    @NotNull final CompletionParameters parameters,    final MatchingContext matchingContext,    @NotNull final QueryResultSet<LookupElement> result){
      Set<LookupItem> lookupSet=new THashSet<LookupItem>();
      final CompletionContext context=parameters.getPosition().getUserData(CompletionContext.COMPLETION_CONTEXT_KEY);
      final PsiVariable variable=(PsiVariable)parameters.getPosition().getParent();
      JavaCompletionUtil.completeLocalVariableName(lookupSet,context,variable);
      result.addAllElements(lookupSet);
    }
  }
);
  registrar.extendBasicCompletion(psiElement(PsiIdentifier.class).withParent(PsiField.class)).onPriority(Double.POSITIVE_INFINITY).withProvider(new CompletionProvider<LookupElement,CompletionParameters>(){
    public void addCompletions(    @NotNull final CompletionParameters parameters,    final MatchingContext matchingContext,    @NotNull final QueryResultSet<LookupElement> result){
      Set<LookupItem> lookupSet=new THashSet<LookupItem>();
      final CompletionContext context=parameters.getPosition().getUserData(CompletionContext.COMPLETION_CONTEXT_KEY);
      final PsiVariable variable=(PsiVariable)parameters.getPosition().getParent();
      JavaCompletionUtil.completeFieldName(lookupSet,context,variable);
      JavaCompletionUtil.completeMethodName(lookupSet,context,variable);
      result.addAllElements(lookupSet);
    }
  }
);
  registrar.extendBasicCompletion(psiElement(PsiIdentifier.class).withParent(PsiMethod.class)).onPriority(Double.POSITIVE_INFINITY).withProvider(new CompletionProvider<LookupElement,CompletionParameters>(){
    public void addCompletions(    @NotNull final CompletionParameters parameters,    final MatchingContext matchingContext,    @NotNull final QueryResultSet<LookupElement> result){
      Set<LookupItem> lookupSet=new THashSet<LookupItem>();
      final CompletionContext context=parameters.getPosition().getUserData(CompletionContext.COMPLETION_CONTEXT_KEY);
      JavaCompletionUtil.completeMethodName(lookupSet,context,parameters.getPosition().getParent());
      result.addAllElements(lookupSet);
    }
  }
);
  registrar.extendBasicCompletion(psiElement()).onPriority(Double.MAX_VALUE).withProvider(new CompletionProvider<LookupElement,CompletionParameters>(){
    public void addCompletions(    @NotNull final CompletionParameters parameters,    final MatchingContext context,    @NotNull final QueryResultSet<LookupElement> result){
      result.processResults(new Processor<LookupElement>(){
        public boolean process(        final LookupElement lookupElement){
          LookupItem item=(LookupItem)lookupElement;
          CompletionUtil.highlightMemberOfContainer(item);
          if (item.getInsertHandler() != null)           return true;
          item.setAttribute(LookupItem.INSERT_HANDLER_ATTR,new InsertHandler(){
            public void handleInsert(            final CompletionContext context,            final int startOffset,            final LookupData data,            final LookupItem item,            final boolean signatureSelected,            final char completionChar){
              analyzeItem(context,item,item.getObject(),parameters.getPosition());
              new DefaultInsertHandler().handleInsert(context,startOffset,data,item,signatureSelected,completionChar);
            }
          }
);
          return true;
        }
      }
);
    }
  }
);
  registrar.extendSmartCompletion(psiElement()).onPriority(Double.POSITIVE_INFINITY).withProvider(new CompletionProvider<LookupElement,CompletionParameters>(){
    public void addCompletions(    @NotNull final CompletionParameters parameters,    final MatchingContext matchingContext,    @NotNull final QueryResultSet<LookupElement> result){
      final Set<LookupItem> set=new LinkedHashSet<LookupItem>();
      final PsiElement identifierCopy=parameters.getPosition();
      final Set<CompletionVariant> keywordVariants=new HashSet<CompletionVariant>();
      final CompletionContext context=parameters.getPosition().getUserData(CompletionContext.COMPLETION_CONTEXT_KEY);
      final PsiReference ref=identifierCopy.getContainingFile().findReferenceAt(identifierCopy.getTextRange().getStartOffset());
      if (ref != null) {
        myData.completeReference(ref,set,context,identifierCopy);
      }
      myData.addKeywordVariants(keywordVariants,context,identifierCopy);
      CompletionData.completeKeywordsBySet(set,keywordVariants,context,identifierCopy);
      CompletionUtil.highlightMembersOfContainer(set);
      result.addAllElements(set);
    }
  }
);
}
