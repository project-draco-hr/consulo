{
  registrar.extend(CompletionType.BASIC,psiElement().inFile(PlatformPatterns.psiFile().withLanguage(StdLanguages.JAVA))).withId(JAVA_LEGACY).dependingOn(LegacyCompletionContributor.LEGACY).withProvider(new CompletionProvider<LookupElement,CompletionParameters>(){
    public void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext matchingContext,    @NotNull final CompletionResultSet<LookupElement> result){
      result.stopHere();
      CompletionContext context=parameters.getPosition().getUserData(CompletionContext.COMPLETION_CONTEXT_KEY);
      final PsiFile file=parameters.getOriginalFile();
      final int startOffset=context.getStartOffset();
      final PsiElement lastElement=file.findElementAt(startOffset - 1);
      PsiElement insertedElement=parameters.getPosition();
      CompletionData completionData=CompletionUtil.getCompletionData(lastElement,file,startOffset,getCompletionDataByElementInner(lastElement));
      result.setPrefixMatcher(completionData.findPrefix(insertedElement,startOffset));
      final Set<LookupItem> lookupSet=new LinkedHashSet<LookupItem>();
      final PsiReference ref=insertedElement.getContainingFile().findReferenceAt(context.getStartOffset());
      if (ref != null) {
        completionData.completeReference(ref,lookupSet,insertedElement,result.getPrefixMatcher(),context.file,context.getStartOffset());
      }
      final Set<CompletionVariant> keywordVariants=new HashSet<CompletionVariant>();
      completionData.addKeywordVariants(keywordVariants,insertedElement,context.file);
      completionData.completeKeywordsBySet(lookupSet,keywordVariants,insertedElement,result.getPrefixMatcher(),context.file);
      for (      final LookupItem item : lookupSet) {
        result.addElement(item);
      }
    }
    private CompletionData getCompletionDataByElementInner(    PsiElement element){
      if (element != null && PsiTreeUtil.getParentOfType(element,PsiDocComment.class) != null) {
        return JavaCompletionUtil.ourJavaDocCompletionData.getValue();
      }
      return element != null && PsiUtil.getLanguageLevel(element).equals(LanguageLevel.JDK_1_5) ? JavaCompletionUtil.ourJava15CompletionData.getValue() : JavaCompletionUtil.ourJavaCompletionData.getValue();
    }
  }
);
  registrar.extend(CompletionType.BASIC,psiElement(PsiIdentifier.class).andNot(INSIDE_TYPE_PARAMS_PATTERN).withParent(or(psiElement(PsiLocalVariable.class),psiElement(PsiParameter.class)))).withId(VARIABLE_NAME).dependingOn(JAVA_LEGACY).withProvider(new CompletionProvider<LookupElement,CompletionParameters>(){
    public void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext matchingContext,    @NotNull final CompletionResultSet<LookupElement> result){
      CompletionContext context=parameters.getPosition().getUserData(CompletionContext.COMPLETION_CONTEXT_KEY);
      final PsiFile file=parameters.getOriginalFile();
      final PsiElement lastElement=file.findElementAt(context.getStartOffset() - 1);
      PsiElement insertedElement=parameters.getPosition();
      CompletionData completionData=CompletionUtil.getCompletionDataByElement(lastElement,file,context.getStartOffset());
      context.setPrefix(insertedElement,context.getStartOffset(),completionData);
      result.setPrefixMatcher(context.getPrefix());
      Set<LookupItem> lookupSet=new THashSet<LookupItem>();
      final PsiVariable variable=(PsiVariable)parameters.getPosition().getParent();
      JavaCompletionUtil.completeLocalVariableName(lookupSet,result.getPrefixMatcher(),variable);
      for (      final LookupItem item : lookupSet) {
        result.addElement(item);
      }
    }
  }
);
  registrar.extend(CompletionType.BASIC,psiElement(PsiIdentifier.class).withParent(PsiField.class)).withId(VARIABLE_NAME).withProvider(new CompletionProvider<LookupElement,CompletionParameters>(){
    public void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext matchingContext,    @NotNull final CompletionResultSet<LookupElement> result){
      CompletionContext context=parameters.getPosition().getUserData(CompletionContext.COMPLETION_CONTEXT_KEY);
      final PsiFile file=parameters.getOriginalFile();
      final PsiElement lastElement=file.findElementAt(context.getStartOffset() - 1);
      PsiElement insertedElement=parameters.getPosition();
      CompletionData completionData=CompletionUtil.getCompletionDataByElement(lastElement,file,context.getStartOffset());
      context.setPrefix(insertedElement,context.getStartOffset(),completionData);
      result.setPrefixMatcher(context.getPrefix());
      Set<LookupItem> lookupSet=new THashSet<LookupItem>();
      final PsiVariable variable=(PsiVariable)parameters.getPosition().getParent();
      JavaCompletionUtil.completeFieldName(lookupSet,variable,result.getPrefixMatcher());
      JavaCompletionUtil.completeMethodName(lookupSet,variable,result.getPrefixMatcher());
      for (      final LookupItem item : lookupSet) {
        result.addElement(item);
      }
    }
  }
);
  registrar.extend(CompletionType.BASIC,PsiJavaPatterns.psiElement().nameIdentifierOf(PsiJavaPatterns.psiMethod().withParent(PsiClass.class))).withId(METHOD_NAME).dependingOn(JAVA_LEGACY).withProvider(new CompletionProvider<LookupElement,CompletionParameters>(){
    public void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext matchingContext,    @NotNull final CompletionResultSet<LookupElement> result){
      CompletionContext context=parameters.getPosition().getUserData(CompletionContext.COMPLETION_CONTEXT_KEY);
      final PsiFile file=parameters.getOriginalFile();
      final PsiElement lastElement=file.findElementAt(context.getStartOffset() - 1);
      PsiElement insertedElement=parameters.getPosition();
      CompletionData completionData=CompletionUtil.getCompletionDataByElement(lastElement,file,context.getStartOffset());
      context.setPrefix(insertedElement,context.getStartOffset(),completionData);
      result.setPrefixMatcher(context.getPrefix());
      Set<LookupItem> lookupSet=new THashSet<LookupItem>();
      JavaCompletionUtil.completeMethodName(lookupSet,parameters.getPosition().getParent(),result.getPrefixMatcher());
      for (      final LookupItem item : lookupSet) {
        result.addElement(item);
      }
    }
  }
);
  registrar.extend(CompletionType.BASIC,psiElement()).withId(ANALYZE_ITEM).dependingOn(JAVA_LEGACY,VARIABLE_NAME,METHOD_NAME).withProvider(new CompletionProvider<LookupElement,CompletionParameters>(){
    public void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext context,    @NotNull final CompletionResultSet<LookupElement> result){
      result.setSuccessorFilter(new AsyncConsumer<LookupElement>(){
        public void consume(        final LookupElement lookupElement){
          LookupItem item=(LookupItem)lookupElement;
          JavaCompletionUtil.highlightMemberOfContainer(item);
          if (item.getInsertHandler() == null) {
            item.setInsertHandler(new InsertHandler(){
              public void handleInsert(              final CompletionContext context,              final int startOffset,              final LookupData data,              final LookupItem item,              final boolean signatureSelected,              final char completionChar){
                analyzeItem(context,item,item.getObject(),parameters.getPosition());
                new DefaultInsertHandler().handleInsert(context,startOffset,data,item,signatureSelected,completionChar);
              }
            }
);
          }
          result.addElement(item);
        }
      }
);
    }
  }
);
  registrar.extend(CompletionType.BASIC,psiElement()).withId(JAVA_LEGACY).withAdvertiser(new CompletionAdvertiser(){
    public String advertise(    @NotNull final CompletionParameters parameters,    final ProcessingContext context,    final PrefixMatcher matcher){
      if (shouldSuggestSmartCompletion(parameters.getPosition(),matcher.getPrefix())) {
        return CompletionBundle.message("completion.smart.hint",KeymapUtil.getFirstKeyboardShortcutText(ActionManager.getInstance().getAction(IdeActions.ACTION_SMART_TYPE_COMPLETION)));
      }
      if (shouldSuggestClassNameCompletion(parameters.getPosition(),matcher.getPrefix())) {
        return CompletionBundle.message("completion.class.name.hint",KeymapUtil.getFirstKeyboardShortcutText(ActionManager.getInstance().getAction(IdeActions.ACTION_CLASS_NAME_COMPLETION)));
      }
      return null;
    }
  }
);
  registrar.extend(CompletionType.SMART,psiElement()).withId(JAVA_LEGACY).withAdvertiser(new CompletionAdvertiser(){
    public String advertise(    @NotNull final CompletionParameters parameters,    final ProcessingContext context,    final PrefixMatcher matcher){
      if (shouldSuggestClassNameCompletion(parameters.getPosition(),matcher.getPrefix())) {
        return CompletionBundle.message("completion.class.name.hint",KeymapUtil.getFirstKeyboardShortcutText(ActionManager.getInstance().getAction(IdeActions.ACTION_CLASS_NAME_COMPLETION)));
      }
      return null;
    }
  }
);
  registrar.extend(CompletionType.CLASS_NAME,psiElement()).withId(JAVA_LEGACY).withAdvertiser(new CompletionAdvertiser(){
    public String advertise(    @NotNull final CompletionParameters parameters,    final ProcessingContext context,    final PrefixMatcher matcher){
      if (shouldSuggestSmartCompletion(parameters.getPosition(),matcher.getPrefix())) {
        return CompletionBundle.message("completion.smart.hint",KeymapUtil.getFirstKeyboardShortcutText(ActionManager.getInstance().getAction(IdeActions.ACTION_SMART_TYPE_COMPLETION)));
      }
      return null;
    }
  }
);
  final CompletionProvider<LookupElement,CompletionParameters> methodMerger=new CompletionProvider<LookupElement,CompletionParameters>(){
    public void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext context,    @NotNull final CompletionResultSet<LookupElement> result){
      final Ref<Boolean> wereNonGrouped=Ref.create(false);
      final Map<String,LookupItem<PsiMethod>> methodNameToItem=new LinkedHashMap<String,LookupItem<PsiMethod>>();
      final List<LookupItem<PsiMethod>> allMethodItems=new ArrayList<LookupItem<PsiMethod>>();
      result.setSuccessorFilter(new AsyncConsumer<LookupElement>(){
        public void consume(        final LookupElement element){
          LookupItem item=(LookupItem)element;
          item.setAttribute(JavaCompletionUtil.ALL_METHODS_ATTRIBUTE,null);
          Object o=item.getObject();
          if (item.getAttribute(LookupItem.FORCE_SHOW_SIGNATURE_ATTR) != null || !(o instanceof PsiMethod)) {
            result.addElement(item);
            wereNonGrouped.set(true);
            return;
          }
          allMethodItems.add(item);
          PsiMethod method=(PsiMethod)o;
          String name=method.getName();
          LookupItem<PsiMethod> existing=methodNameToItem.get(name);
          ArrayList<PsiMethod> allMethods;
          if (existing != null) {
            if (existing.getObject().getParameterList().getParametersCount() == 0 && method.getParameterList().getParametersCount() > 0) {
              methodNameToItem.put(name,item);
            }
            allMethods=(ArrayList<PsiMethod>)existing.getAttribute(JavaCompletionUtil.ALL_METHODS_ATTRIBUTE);
          }
 else {
            methodNameToItem.put(name,item);
            allMethods=new ArrayList<PsiMethod>();
          }
          allMethods.add(method);
          item.setAttribute(JavaCompletionUtil.ALL_METHODS_ATTRIBUTE,allMethods);
        }
        public void finished(){
          final boolean justOneMethodName=!wereNonGrouped.get() && methodNameToItem.size() == 1;
          if (!CodeInsightSettings.getInstance().SHOW_SIGNATURES_IN_LOOKUPS || justOneMethodName) {
            for (            final LookupItem<PsiMethod> item : methodNameToItem.values()) {
              result.addElement(item);
            }
          }
 else {
            for (            final LookupItem<PsiMethod> item : allMethodItems) {
              result.addElement(item);
            }
          }
        }
      }
);
    }
  }
;
  registrar.extend(CompletionType.BASIC,psiElement()).dependingOn(ANALYZE_ITEM).withProvider(methodMerger);
  registrar.extend(CompletionType.SMART,psiElement()).dependingOn(JAVA_LEGACY).withProvider(methodMerger);
  registrar.extend(CompletionType.CLASS_NAME,psiElement()).dependingOn(JAVA_LEGACY).withProvider(methodMerger);
}
