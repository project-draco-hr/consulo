{
  final PsiFile file=context.getFile();
  final Project project=context.getProject();
  JavaCompletionUtil.initOffsets(file,project,context.getOffsetMap());
  PsiReference reference=file.findReferenceAt(context.getStartOffset());
  if (reference instanceof PsiMultiReference) {
    for (    final PsiReference psiReference : ((PsiMultiReference)reference).getReferences()) {
      if (psiReference instanceof JavaClassReference) {
        reference=psiReference;
        break;
      }
    }
  }
  if (reference instanceof JavaClassReference) {
    final JavaClassReference classReference=(JavaClassReference)reference;
    if (classReference.getExtendClassNames() != null) {
      final PsiReference[] references=classReference.getJavaClassReferenceSet().getReferences();
      final PsiReference lastReference=references[references.length - 1];
      final int endOffset=lastReference.getRangeInElement().getEndOffset() + lastReference.getElement().getTextRange().getStartOffset();
      context.getOffsetMap().addOffset(CompletionInitializationContext.IDENTIFIER_END_OFFSET,endOffset);
    }
  }
  if (file instanceof PsiJavaFile) {
    final JavaElementVisitor visitor=new JavaRecursiveElementWalkingVisitor(){
      @Override public void visitClass(      PsiClass aClass){
        aClass.putCopyableUserData(CompletionUtil.ORIGINAL_KEY,aClass);
        super.visitClass(aClass);
      }
      @Override public void visitVariable(      PsiVariable variable){
        variable.putCopyableUserData(CompletionUtil.ORIGINAL_KEY,variable);
        super.visitVariable(variable);
      }
      @Override public void visitMethod(      PsiMethod method){
        method.putCopyableUserData(CompletionUtil.ORIGINAL_KEY,method);
        super.visitMethod(method);
      }
    }
;
    visitor.visitFile(file);
    autoImport(file,context.getStartOffset() - 1,context.getEditor());
  }
  if (context.getCompletionType() == CompletionType.BASIC && file instanceof PsiJavaFile) {
    final PsiElement element=file.findElementAt(context.getStartOffset());
    if (METHOD_START.accepts(element)) {
      PsiElement decl=PsiTreeUtil.getParentOfType(element,PsiMethod.class);
      if (decl == null)       decl=PsiTreeUtil.getParentOfType(element,PsiVariable.class);
      if (decl != null) {
        PsiElement sibling=decl.getPrevSibling();
        while (sibling != null && (sibling instanceof PsiWhiteSpace || sibling instanceof PsiErrorElement)) {
          sibling=sibling.getPrevSibling();
        }
        if (sibling instanceof PsiClassInitializer && ((PsiClassInitializer)sibling).getBody().getRBrace() == null || sibling instanceof PsiMethod && ((PsiMethod)sibling).getBody() != null && ((PsiMethod)sibling).getBody().getRBrace() == null) {
          final int textOffset=decl.getTextOffset();
          context.setFileCopyPatcher(new FileCopyPatcher(){
            public void patchFileCopy(            @NotNull final PsiFile fileCopy,            @NotNull final Document document,            @NotNull final OffsetMap map){
              document.replaceString(map.getOffset(CompletionInitializationContext.START_OFFSET),Math.max(map.getOffset(CompletionInitializationContext.SELECTION_END_OFFSET),textOffset),CompletionInitializationContext.DUMMY_IDENTIFIER.trim());
            }
          }
);
          return;
        }
      }
    }
    if (psiElement(PsiIdentifier.class).withParent(PsiMethod.class).accepts(element)) {
      return;
    }
    context.setFileCopyPatcher(new DummyIdentifierPatcher(CompletionInitializationContext.DUMMY_IDENTIFIER.trim()));
  }
}
