{
  final PsiFile file=context.getFile();
  final Project project=context.getProject();
  JavaCompletionUtil.initOffsets(file,project,context.getOffsetMap(),context.getCompletionType());
  PsiReference reference=file.findReferenceAt(context.getStartOffset());
  if (reference instanceof PsiMultiReference) {
    for (    final PsiReference psiReference : ((PsiMultiReference)reference).getReferences()) {
      if (psiReference instanceof JavaClassReference) {
        reference=psiReference;
        break;
      }
    }
  }
  if (reference instanceof JavaClassReference) {
    final JavaClassReference classReference=(JavaClassReference)reference;
    if (classReference.getExtendClassNames() != null) {
      final PsiReference[] references=classReference.getJavaClassReferenceSet().getReferences();
      final PsiReference lastReference=references[references.length - 1];
      final int endOffset=lastReference.getRangeInElement().getEndOffset() + lastReference.getElement().getTextRange().getStartOffset();
      context.getOffsetMap().addOffset(CompletionInitializationContext.IDENTIFIER_END_OFFSET,endOffset);
    }
  }
  if (file instanceof PsiJavaFile) {
    autoImport(file,context.getStartOffset() - 1,context.getEditor());
  }
  if (context.getCompletionType() == CompletionType.BASIC && file instanceof PsiJavaFile) {
    if (semicolonNeeded(context)) {
      context.setFileCopyPatcher(new DummyIdentifierPatcher(CompletionInitializationContext.DUMMY_IDENTIFIER.trim() + ";"));
      return;
    }
    final PsiElement element=file.findElementAt(context.getStartOffset());
    if (psiElement().inside(PsiAnnotation.class).accepts(element)) {
      return;
    }
    context.setFileCopyPatcher(new DummyIdentifierPatcher(CompletionInitializationContext.DUMMY_IDENTIFIER.trim()));
  }
}
