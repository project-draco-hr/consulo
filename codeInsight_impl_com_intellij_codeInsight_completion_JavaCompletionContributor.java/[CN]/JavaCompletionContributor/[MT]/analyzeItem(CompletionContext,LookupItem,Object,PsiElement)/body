{
  if (completion instanceof PsiKeyword) {
    if (PsiKeyword.BREAK.equals(((PsiKeyword)completion).getText()) || PsiKeyword.CONTINUE.equals(((PsiKeyword)completion).getText())) {
      PsiElement scope=position;
      while (true) {
        if (scope instanceof PsiFile || scope instanceof PsiMethod || scope instanceof PsiClassInitializer) {
          item.setTailType(TailType.SEMICOLON);
          break;
        }
 else         if (scope instanceof PsiLabeledStatement) {
          item.setTailType(TailType.NONE);
          break;
        }
        scope=scope.getParent();
      }
    }
    if (PsiKeyword.RETURN.equals(((PsiKeyword)completion).getText())) {
      PsiElement scope=position;
      while (true) {
        if (scope instanceof PsiFile || scope instanceof PsiClassInitializer) {
          item.setTailType(TailType.NONE);
          break;
        }
 else         if (scope instanceof PsiMethod) {
          final PsiMethod method=(PsiMethod)scope;
          if (method.isConstructor() || PsiType.VOID == method.getReturnType()) {
            item.setTailType(TailType.SEMICOLON);
          }
 else           item.setTailType(TailType.SPACE);
          break;
        }
        scope=scope.getParent();
      }
    }
    if (PsiKeyword.DEFAULT.equals(((PsiKeyword)completion).getText())) {
      if (!(position.getParent() instanceof PsiAnnotationMethod)) {
        item.setTailType(TailType.CASE_COLON);
      }
    }
    if (PsiKeyword.SYNCHRONIZED.equals(((PsiKeyword)completion).getText())) {
      if (PsiTreeUtil.getParentOfType(position,PsiMember.class,PsiCodeBlock.class) instanceof PsiCodeBlock) {
        item.setTailType(TailTypes.SYNCHRONIZED_LPARENTH);
      }
    }
  }
  if (completion instanceof PsiClass) {
    final PsiElement prevElement=FilterPositionUtil.searchNonSpaceNonCommentBack(position);
    if (prevElement != null && prevElement.getParent() instanceof PsiNewExpression) {
      ExpectedTypeInfo[] infos=ExpectedTypesProvider.getInstance(context.project).getExpectedTypes((PsiExpression)prevElement.getParent(),true);
      boolean flag=true;
      PsiTypeParameter[] typeParameters=((PsiClass)completion).getTypeParameters();
      for (      ExpectedTypeInfo info : infos) {
        final PsiType type=info.getType();
        if (info.isArrayTypeInfo()) {
          flag=false;
          break;
        }
        if (typeParameters.length > 0 && type instanceof PsiClassType) {
          if (!((PsiClassType)type).isRaw()) {
            flag=false;
          }
        }
      }
      if (flag) {
        item.setAttribute(LookupItem.NEW_OBJECT_ATTR,"");
      }
    }
  }
  if (completion instanceof PsiElement && JavaCompletionUtil.isCompletionOfAnnotationMethod((PsiElement)completion,position)) {
    item.setTailType(TailType.EQ);
  }
}
