{
  if (parameters.getCompletionType() != CompletionType.BASIC)   return;
  if (parameters.getPosition().getContainingFile().getLanguage() == StdLanguages.JAVA) {
    final PsiFile file=parameters.getOriginalFile();
    final int startOffset=parameters.getOffset();
    final PsiElement lastElement=file.findElementAt(startOffset - 1);
    final PsiElement insertedElement=parameters.getPosition();
    final JavaAwareCompletionData completionData=ApplicationManager.getApplication().runReadAction(new Computable<JavaAwareCompletionData>(){
      public JavaAwareCompletionData compute(){
        return getCompletionDataByElementInner(lastElement);
      }
    }
);
    final boolean checkAccess=parameters.getInvocationCount() == 1;
    if (ANNOTATION_ATTRIBUTE_NAME.accepts(insertedElement)) {
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        public void run(){
          completeAnnotationAttributeName(_result,file,insertedElement,completionData,checkAccess);
        }
      }
);
      _result.stopHere();
      return;
    }
    LegacyCompletionContributor.processReferences(parameters,_result,completionData,new PairConsumer<PsiReference,CompletionResultSet>(){
      public void consume(      final PsiReference reference,      final CompletionResultSet result){
        ApplicationManager.getApplication().runReadAction(new Runnable(){
          public void run(){
            if (reference instanceof PsiJavaReference) {
              final ElementFilter filter=getReferenceFilter(insertedElement);
              if (filter != null) {
                final boolean isSwitchLabel=SWITCH_LABEL.accepts(insertedElement);
                for (                LookupElement element : JavaCompletionUtil.processJavaReference(insertedElement,(PsiJavaReference)reference,new ElementExtractorFilter(filter),checkAccess,result.getPrefixMatcher())) {
                  JavaCompletionUtil.highlightMemberOfContainer(element.as(LookupItem.class));
                  if (isSwitchLabel) {
                    result.addElement(TailTypeDecorator.createDecorator(element,TailType.createSimpleTailType(';')));
                  }
 else {
                    setTailTypeByFile(element,file);
                    result.addElement(element);
                  }
                }
              }
              return;
            }
            final Object[] variants=reference.getVariants();
            if (variants == null) {
              LOG.assertTrue(false,"Reference=" + reference);
            }
            for (            Object completion : variants) {
              if (completion == null) {
                LOG.assertTrue(false,"Position=" + insertedElement + "\n;Reference="+ reference+ "\n;variants="+ Arrays.toString(variants));
              }
              result.addElement(LookupItemUtil.objectToLookupItem(completion));
            }
          }
        }
);
      }
    }
);
    final Set<LookupElement> lookupSet=new LinkedHashSet<LookupElement>();
    final Set<CompletionVariant> keywordVariants=new HashSet<CompletionVariant>();
    completionData.addKeywordVariants(keywordVariants,insertedElement,parameters.getOriginalFile());
    final CompletionResultSet result=_result.withPrefixMatcher(completionData.findPrefix(insertedElement,startOffset));
    completionData.completeKeywordsBySet(lookupSet,keywordVariants,insertedElement,result.getPrefixMatcher(),parameters.getOriginalFile());
    ApplicationManager.getApplication().runReadAction(new Runnable(){
      public void run(){
        completionData.fillCompletions(parameters,result);
      }
    }
);
    for (    final LookupElement item : lookupSet) {
      if (item.getInsertHandler() == null) {
        ((LookupItem)item).setInsertHandler(new InsertHandler(){
          public void handleInsert(          final InsertionContext context,          final LookupElement item){
            analyzeItem((LookupItem)item,item.getObject(),parameters.getPosition());
            new DefaultInsertHandler().handleInsert(context,item);
          }
        }
);
      }
      result.addElement(item);
    }
    result.stopHere();
  }
}
