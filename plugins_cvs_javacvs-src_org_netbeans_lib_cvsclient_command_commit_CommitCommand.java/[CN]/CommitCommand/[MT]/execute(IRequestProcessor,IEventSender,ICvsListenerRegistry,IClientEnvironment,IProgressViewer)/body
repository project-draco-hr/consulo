{
  final ICvsFiles cvsFiles;
  try {
    cvsFiles=scanFileSystem(clientEnvironment);
  }
 catch (  IOException ex) {
    throw new IOCommandException(ex);
  }
  final Requests requests=new Requests(CommandRequest.COMMIT,clientEnvironment);
  requests.addArgumentRequest(isForceCommit(),"-f");
  requests.addArgumentRequest(isRecursive(),"-R");
  requests.addArgumentRequest(isNoModuleProgram(),"-n");
  requests.addArgumentRequest(getToRevisionOrBranch(),"-r");
  addFileRequests(cvsFiles,requests,clientEnvironment);
  requests.addMessageRequests(CommandUtils.getMessageNotNull(getMessage()));
  requests.addLocalPathDirectoryRequest();
  addArgumentRequests(requests);
  final IRequestsProgressHandler requestsProgressHandler=new FileStateRequestsProgressHandler(new RangeProgressViewer(progressViewer,0.0,0.5),cvsFiles);
  final ICvsListener responseProgressHandler=new FileInfoAndMessageResponseProgressHandler(new RangeProgressViewer(progressViewer,0.5,1.0),cvsFiles,EXAM_DIR);
  final ICvsListener commitParser=new CommitParser(eventSender,clientEnvironment.getCvsFileSystem());
  final ICvsListener parser=new DualListener(commitParser,responseProgressHandler);
  parser.registerListeners(listenerRegistry);
  try {
    return requestProcessor.processRequests(requests,requestsProgressHandler);
  }
  finally {
    parser.unregisterListeners(listenerRegistry);
  }
}
