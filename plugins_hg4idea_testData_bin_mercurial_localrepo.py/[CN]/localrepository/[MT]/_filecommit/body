def _filecommit(self, fctx, manifest1, manifest2, linkrev, tr, changelist):
    '\n        commit an individual file as part of a larger transaction\n        '
    fname = fctx.path()
    text = fctx.data()
    flog = self.file(fname)
    fparent1 = manifest1.get(fname, nullid)
    fparent2 = fparent2o = manifest2.get(fname, nullid)
    meta = {}
    copy = fctx.renamed()
    if (copy and (copy[0] != fname)):
        cfname = copy[0]
        crev = manifest1.get(cfname)
        newfparent = fparent2
        if manifest2:
            if ((fparent2 == nullid) or (crev is None)):
                if (cfname in manifest2):
                    crev = manifest2[cfname]
                    newfparent = fparent1
        if (not crev):
            self.ui.debug((' %s: searching for copy revision for %s\n' % (fname, cfname)))
            for ancestor in self['.'].ancestors():
                if (cfname in ancestor):
                    crev = ancestor[cfname].filenode()
                    break
        self.ui.debug((' %s: copy %s:%s\n' % (fname, cfname, hex(crev))))
        meta['copy'] = cfname
        meta['copyrev'] = hex(crev)
        (fparent1, fparent2) = (nullid, newfparent)
    elif (fparent2 != nullid):
        fparentancestor = flog.ancestor(fparent1, fparent2)
        if (fparentancestor == fparent1):
            (fparent1, fparent2) = (fparent2, nullid)
        elif (fparentancestor == fparent2):
            fparent2 = nullid
    if ((fparent2 != nullid) or flog.cmp(fparent1, text) or meta):
        changelist.append(fname)
        return flog.add(text, meta, tr, linkrev, fparent1, fparent2)
    if ((fparent1 != fparent2o) and (manifest1.flags(fname) != fctx.flags())):
        changelist.append(fname)
    return fparent1
