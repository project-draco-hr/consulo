def _tag(self, names, node, message, local, user, date, extra={}):
    if isinstance(names, str):
        allchars = names
        names = (names,)
    else:
        allchars = ''.join(names)
    for c in self.tag_disallowed:
        if (c in allchars):
            raise util.Abort((_('%r cannot be used in a tag name') % c))
    for name in names:
        self.hook('pretag', throw=True, node=hex(node), tag=name, local=local)

    def writetags(fp, names, munge, prevtags):
        fp.seek(0, 2)
        if (prevtags and (prevtags[(-1)] != '\n')):
            fp.write('\n')
        for name in names:
            m = ((munge and munge(name)) or name)
            if (self._tagtypes and (name in self._tagtypes)):
                old = self._tags.get(name, nullid)
                fp.write(('%s %s\n' % (hex(old), m)))
            fp.write(('%s %s\n' % (hex(node), m)))
        fp.close()
    prevtags = ''
    if local:
        try:
            fp = self.opener('localtags', 'r+')
        except IOError:
            fp = self.opener('localtags', 'a')
        else:
            prevtags = fp.read()
        writetags(fp, names, None, prevtags)
        for name in names:
            self.hook('tag', node=hex(node), tag=name, local=local)
        return
    try:
        fp = self.wfile('.hgtags', 'rb+')
    except IOError:
        fp = self.wfile('.hgtags', 'ab')
    else:
        prevtags = fp.read()
    writetags(fp, names, encoding.fromlocal, prevtags)
    if ('.hgtags' not in self.dirstate):
        self.add(['.hgtags'])
    m = match_.exact(self.root, '', ['.hgtags'])
    tagnode = self.commit(message, user, date, extra=extra, match=m)
    for name in names:
        self.hook('tag', node=hex(node), tag=name, local=local)
    return tagnode
