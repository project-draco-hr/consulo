def commitctx(self, ctx, error=False):
    'Add a new revision to current repository.\n        Revision information is passed via the context argument.\n        '
    tr = lock = None
    removed = ctx.removed()
    (p1, p2) = (ctx.p1(), ctx.p2())
    m1 = p1.manifest().copy()
    m2 = p2.manifest()
    user = ctx.user()
    lock = self.lock()
    try:
        tr = self.transaction()
        trp = weakref.proxy(tr)
        new = {}
        changed = []
        linkrev = len(self)
        for f in sorted((ctx.modified() + ctx.added())):
            self.ui.note((f + '\n'))
            try:
                fctx = ctx[f]
                new[f] = self._filecommit(fctx, m1, m2, linkrev, trp, changed)
                m1.set(f, fctx.flags())
            except OSError as inst:
                self.ui.warn((_('trouble committing %s!\n') % f))
                raise
            except IOError as inst:
                errcode = getattr(inst, 'errno', errno.ENOENT)
                if (error or (errcode and (errcode != errno.ENOENT))):
                    self.ui.warn((_('trouble committing %s!\n') % f))
                    raise
                else:
                    removed.append(f)
        m1.update(new)
        removed = [f for f in sorted(removed) if ((f in m1) or (f in m2))]
        drop = [f for f in removed if (f in m1)]
        for f in drop:
            del m1[f]
        mn = self.manifest.add(m1, trp, linkrev, p1.manifestnode(), p2.manifestnode(), (new, drop))
        self.changelog.delayupdate()
        n = self.changelog.add(mn, (changed + removed), ctx.description(), trp, p1.node(), p2.node(), user, ctx.date(), ctx.extra().copy())
        p = (lambda : ((self.changelog.writepending() and self.root) or ''))
        (xp1, xp2) = (p1.hex(), ((p2 and p2.hex()) or ''))
        self.hook('pretxncommit', throw=True, node=hex(n), parent1=xp1, parent2=xp2, pending=p)
        self.changelog.finalize(trp)
        tr.close()
        if self._branchcache:
            self.branchtags()
        return n
    finally:
        del tr
        lock.release()
