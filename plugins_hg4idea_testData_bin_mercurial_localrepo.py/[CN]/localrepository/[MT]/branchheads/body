def branchheads(self, branch=None, start=None, closed=False):
    'return a (possibly filtered) list of heads for the given branch\n\n        Heads are returned in topological order, from newest to oldest.\n        If branch is None, use the dirstate branch.\n        If start is not None, return only heads reachable from start.\n        If closed is True, return heads that are marked as closed as well.\n        '
    if (branch is None):
        branch = self[None].branch()
    branches = self.branchmap()
    if (branch not in branches):
        return []
    bheads = list(reversed(branches[branch]))
    if (start is not None):
        fbheads = set(self.changelog.nodesbetween([start], bheads)[2])
        bheads = [h for h in bheads if (h in fbheads)]
    if (not closed):
        bheads = [h for h in bheads if ('close' not in self.changelog.read(h)[5])]
    return bheads
