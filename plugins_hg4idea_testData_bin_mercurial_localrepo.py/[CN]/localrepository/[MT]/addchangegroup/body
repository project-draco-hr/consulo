def addchangegroup(self, source, srctype, url, emptyok=False):
    'add changegroup to repo.\n\n        return values:\n        - nothing changed or no source: 0\n        - more heads than before: 1+added heads (2..n)\n        - less heads than before: -1-removed heads (-2..-n)\n        - number of heads stays the same: 1\n        '

    def csmap(x):
        self.ui.debug(('add changeset %s\n' % short(x)))
        return len(cl)

    def revmap(x):
        return cl.rev(x)
    if (not source):
        return 0
    self.hook('prechangegroup', throw=True, source=srctype, url=url)
    changesets = files = revisions = 0
    cl = self.changelog
    cl.delayupdate()
    oldheads = len(cl.heads())
    tr = self.transaction()
    try:
        trp = weakref.proxy(tr)
        self.ui.status(_('adding changesets\n'))
        clstart = len(cl)


        class prog(object):
            step = _('changesets')
            count = 1
            ui = self.ui

            def __call__(self):
                self.ui.progress(self.step, self.count, unit=_('chunks'))
                self.count += 1
        pr = prog()
        chunkiter = changegroup.chunkiter(source, progress=pr)
        if ((cl.addgroup(chunkiter, csmap, trp) is None) and (not emptyok)):
            raise util.Abort(_('received changelog group is empty'))
        clend = len(cl)
        changesets = (clend - clstart)
        self.ui.progress(_('changesets'), None)
        self.ui.status(_('adding manifests\n'))
        pr.step = _('manifests')
        pr.count = 1
        chunkiter = changegroup.chunkiter(source, progress=pr)
        self.manifest.addgroup(chunkiter, revmap, trp)
        self.ui.progress(_('manifests'), None)
        needfiles = {}
        if self.ui.configbool('server', 'validate', default=False):
            for cset in xrange(clstart, clend):
                mfest = self.changelog.read(self.changelog.node(cset))[0]
                mfest = self.manifest.readdelta(mfest)
                for (f, n) in mfest.iteritems():
                    needfiles.setdefault(f, set()).add(n)
        self.ui.status(_('adding file changes\n'))
        pr.step = 'files'
        pr.count = 1
        while 1:
            f = changegroup.getchunk(source)
            if (not f):
                break
            self.ui.debug(('adding %s revisions\n' % f))
            fl = self.file(f)
            o = len(fl)
            chunkiter = changegroup.chunkiter(source, progress=pr)
            if (fl.addgroup(chunkiter, revmap, trp) is None):
                raise util.Abort(_('received file revlog group is empty'))
            revisions += (len(fl) - o)
            files += 1
            if (f in needfiles):
                needs = needfiles[f]
                for new in xrange(o, len(fl)):
                    n = fl.node(new)
                    if (n in needs):
                        needs.remove(n)
                if (not needs):
                    del needfiles[f]
        self.ui.progress(_('files'), None)
        for (f, needs) in needfiles.iteritems():
            fl = self.file(f)
            for n in needs:
                try:
                    fl.rev(n)
                except error.LookupError:
                    raise util.Abort((_('missing file data for %s:%s - run hg verify') % (f, hex(n))))
        newheads = len(cl.heads())
        heads = ''
        if (oldheads and (newheads != oldheads)):
            heads = (_(' (%+d heads)') % (newheads - oldheads))
        self.ui.status((_('added %d changesets with %d changes to %d files%s\n') % (changesets, revisions, files, heads)))
        if (changesets > 0):
            p = (lambda : ((cl.writepending() and self.root) or ''))
            self.hook('pretxnchangegroup', throw=True, node=hex(cl.node(clstart)), source=srctype, url=url, pending=p)
        cl.finalize(trp)
        tr.close()
    finally:
        del tr
    if (changesets > 0):
        self.ui.debug('updating the branch cache\n')
        self.branchtags()
        self.hook('changegroup', node=hex(cl.node(clstart)), source=srctype, url=url)
        for i in xrange(clstart, clend):
            self.hook('incoming', node=hex(cl.node(i)), source=srctype, url=url)
    if (newheads < oldheads):
        return ((newheads - oldheads) - 1)
    else:
        return ((newheads - oldheads) + 1)
