def add(self, list):
    wlock = self.wlock()
    try:
        rejected = []
        for f in list:
            p = self.wjoin(f)
            try:
                st = os.lstat(p)
            except:
                self.ui.warn((_('%s does not exist!\n') % f))
                rejected.append(f)
                continue
            if (st.st_size > 10000000):
                self.ui.warn((_("%s: up to %d MB of RAM may be required to manage this file\n(use 'hg revert %s' to cancel the pending addition)\n") % (f, ((3 * st.st_size) // 1000000), f)))
            if (not (stat.S_ISREG(st.st_mode) or stat.S_ISLNK(st.st_mode))):
                self.ui.warn((_('%s not added: only files and symlinks supported currently\n') % f))
                rejected.append(p)
            elif (self.dirstate[f] in 'amn'):
                self.ui.warn((_('%s already tracked!\n') % f))
            elif (self.dirstate[f] == 'r'):
                self.dirstate.normallookup(f)
            else:
                self.dirstate.add(f)
        return rejected
    finally:
        wlock.release()
