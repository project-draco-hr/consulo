def stream_in(self, remote):
    fp = remote.stream_out()
    l = fp.readline()
    try:
        resp = int(l)
    except ValueError:
        raise error.ResponseError(_('Unexpected response from remote server:'), l)
    if (resp == 1):
        raise util.Abort(_('operation forbidden by server'))
    elif (resp == 2):
        raise util.Abort(_('locking the remote repository failed'))
    elif (resp != 0):
        raise util.Abort(_('the server sent an unknown error code'))
    self.ui.status(_('streaming all changes\n'))
    l = fp.readline()
    try:
        (total_files, total_bytes) = map(int, l.split(' ', 1))
    except (ValueError, TypeError):
        raise error.ResponseError(_('Unexpected response from remote server:'), l)
    self.ui.status((_('%d files to transfer, %s of data\n') % (total_files, util.bytecount(total_bytes))))
    start = time.time()
    for i in xrange(total_files):
        l = fp.readline()
        try:
            (name, size) = l.split('\x00', 1)
            size = int(size)
        except (ValueError, TypeError):
            raise error.ResponseError(_('Unexpected response from remote server:'), l)
        self.ui.debug(('adding %s (%s)\n' % (name, util.bytecount(size))))
        ofp = self.sopener(store.decodedir(name), 'w')
        for chunk in util.filechunkiter(fp, limit=size):
            ofp.write(chunk)
        ofp.close()
    elapsed = (time.time() - start)
    if (elapsed <= 0):
        elapsed = 0.001
    self.ui.status((_('transferred %s in %.1f seconds (%s/sec)\n') % (util.bytecount(total_bytes), elapsed, util.bytecount((total_bytes / elapsed)))))
    self.invalidate()
    return (len(self.heads()) + 1)
