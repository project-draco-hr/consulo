def _findtags(self):
    "Do the hard work of finding tags.  Return a pair of dicts\n        (tags, tagtypes) where tags maps tag name to node, and tagtypes\n        maps tag name to a string like 'global' or 'local'.\n        Subclasses or extensions are free to add their own tags, but\n        should be aware that the returned dicts will be retained for the\n        duration of the localrepo object."
    alltags = {}
    tagtypes = {}
    tags_.findglobaltags(self.ui, self, alltags, tagtypes)
    tags_.readlocaltags(self.ui, self, alltags, tagtypes)
    tags = {}
    for (name, (node, hist)) in alltags.iteritems():
        if (node != nullid):
            tags[encoding.tolocal(name)] = node
    tags['tip'] = self.changelog.tip()
    tagtypes = dict([(encoding.tolocal(name), value) for (name, value) in tagtypes.iteritems()])
    return (tags, tagtypes)
