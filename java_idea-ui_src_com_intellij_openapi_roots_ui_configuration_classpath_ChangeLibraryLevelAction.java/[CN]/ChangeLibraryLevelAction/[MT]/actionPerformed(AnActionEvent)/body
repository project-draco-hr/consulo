{
  final OrderEntry entry=myPanel.getSelectedEntry();
  if (!(entry instanceof LibraryOrderEntry))   return;
  final LibraryEx library=(LibraryEx)((LibraryOrderEntry)entry).getLibrary();
  if (library == null)   return;
  final boolean copy=isConvertingToModuleLibrary();
  final Project project=myPanel.getProject();
  final VirtualFile baseDir=getBaseDir();
  final String libPath=baseDir != null ? baseDir.getPath() + "/lib" : "";
  boolean allowEmptyName=isConvertingToModuleLibrary() && library.getFiles(OrderRootType.CLASSES).length == 1;
  final String libraryName=allowEmptyName ? "" : StringUtil.notNullize(library.getName(),"Unnamed");
  final LibraryTableModifiableModelProvider provider=myPanel.getModifiableModelProvider(myTargetTableLevel);
  final ChangeLibraryLevelDialog dialog=new ChangeLibraryLevelDialog(myPanel.getComponent(),project,copy,libraryName,libPath,allowEmptyName,provider);
  dialog.show();
  if (!dialog.isOK()) {
    return;
  }
  final Set<File> fileToCopy=new LinkedHashSet<File>();
  final Map<String,String> copiedFiles=new HashMap<String,String>();
  final String targetDirectoryPath=dialog.getDirectoryForFilesPath();
  if (targetDirectoryPath != null) {
    for (    OrderRootType type : OrderRootType.getAllTypes()) {
      for (      VirtualFile root : library.getFiles(type)) {
        fileToCopy.add(VfsUtil.virtualToIoFile(PathUtil.getLocalFile(root)));
      }
    }
    if (!copyOrMoveFiles(copy,project,fileToCopy,targetDirectoryPath,copiedFiles)) {
      return;
    }
  }
  final Library copied=((LibraryTableBase.ModifiableModelEx)provider.getModifiableModel()).createLibrary(dialog.getLibraryName(),library.getType());
  final LibraryEx.ModifiableModelEx model=(LibraryEx.ModifiableModelEx)copied.getModifiableModel();
  model.setProperties(library.getProperties());
  for (  OrderRootType type : OrderRootType.getAllTypes()) {
    final String[] urls=library.getUrls(type);
    for (    String url : urls) {
      final String protocol=VirtualFileManager.extractProtocol(url);
      if (protocol == null)       continue;
      final String fullPath=VirtualFileManager.extractPath(url);
      final int sep=fullPath.indexOf(JarFileSystem.JAR_SEPARATOR);
      String localPath;
      String pathInJar;
      if (sep != -1) {
        localPath=fullPath.substring(0,sep);
        pathInJar=fullPath.substring(sep);
      }
 else {
        localPath=fullPath;
        pathInJar="";
      }
      final String targetPath=copiedFiles.get(localPath);
      String targetUrl=targetPath != null ? VirtualFileManager.constructUrl(protocol,targetPath + pathInJar) : url;
      if (library.isJarDirectory(url,type)) {
        model.addJarDirectory(targetUrl,false,type);
      }
 else {
        model.addRoot(targetUrl,type);
      }
    }
  }
  AccessToken token=WriteAction.start();
  try {
    model.commit();
  }
  finally {
    token.finish();
  }
  myPanel.getRootModel().removeOrderEntry(entry);
  if (!isConvertingToModuleLibrary()) {
    myPanel.getRootModel().addLibraryEntry(copied);
  }
}
