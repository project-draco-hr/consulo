{
  FeatureUsageTracker.getInstance().triggerFeatureUsed("editing.completion.variable.name");
  Project project=var.getProject();
  final JavaCodeStyleManager codeStyleManager=JavaCodeStyleManager.getInstance(project);
  final VariableKind variableKind=codeStyleManager.getVariableKind(var);
  String propertyName=null;
  if (variableKind == VariableKind.PARAMETER) {
    final PsiMethod method=PsiTreeUtil.getParentOfType(var,PsiMethod.class);
    propertyName=PropertyUtil.getPropertyName(method);
    if (method != null && method.getName().startsWith("with")) {
      propertyName=StringUtil.decapitalize(method.getName().substring(4));
    }
  }
  final PsiType type=var.getType();
  SuggestedNameInfo suggestedNameInfo=codeStyleManager.suggestVariableName(variableKind,propertyName,null,type,StringUtil.isEmpty(matcher.getPrefix()));
  suggestedNameInfo=codeStyleManager.suggestUniqueVariableName(suggestedNameInfo,var,false);
  final String[] suggestedNames=suggestedNameInfo.names;
  addLookupItems(set,suggestedNameInfo,matcher,project,suggestedNames);
  if (set.isEmpty()) {
    if (type.equalsToText(CommonClassNames.JAVA_LANG_OBJECT) && matcher.prefixMatches("object")) {
      set.add(LookupElementBuilder.create("object"));
    }
    if (type.equalsToText(CommonClassNames.JAVA_LANG_STRING) && matcher.prefixMatches("string")) {
      set.add(LookupElementBuilder.create("string"));
    }
  }
  if (set.isEmpty() && includeOverlapped) {
    addLookupItems(set,null,matcher,project,getOverlappedNameVersions(matcher.getPrefix(),suggestedNames,""));
  }
  PsiElement parent=PsiTreeUtil.getParentOfType(var,PsiCodeBlock.class);
  if (parent == null)   parent=PsiTreeUtil.getParentOfType(var,PsiMethod.class);
  addLookupItems(set,suggestedNameInfo,matcher,project,getUnresolvedReferences(parent,false));
  if (var instanceof PsiParameter && parent instanceof PsiMethod) {
    addSuggestionsInspiredByFieldNames(set,matcher,var,project,codeStyleManager);
  }
  PsiExpression initializer=var.getInitializer();
  if (initializer != null) {
    SuggestedNameInfo initializerSuggestions=IntroduceVariableBase.getSuggestedName(type,initializer);
    addLookupItems(set,initializerSuggestions,matcher,project,initializerSuggestions.names);
  }
}
