{
  FeatureUsageTracker.getInstance().triggerFeatureUsed("editing.completion.variable.name");
  final JavaCodeStyleManager codeStyleManager=JavaCodeStyleManager.getInstance(var.getProject());
  final VariableKind variableKind=codeStyleManager.getVariableKind(var);
  String propertyName=null;
  if (variableKind == VariableKind.PARAMETER) {
    final PsiMethod method=PsiTreeUtil.getParentOfType(var,PsiMethod.class);
    propertyName=PropertyUtil.getPropertyName(method);
  }
  final PsiType type=var.getType();
  SuggestedNameInfo suggestedNameInfo=codeStyleManager.suggestVariableName(variableKind,propertyName,null,type,StringUtil.isEmpty(matcher.getPrefix()));
  final String[] suggestedNames=suggestedNameInfo.names;
  tunePreferencePolicy(LookupItemUtil.addLookupItems(set,suggestedNames,matcher),suggestedNameInfo);
  if (set.isEmpty()) {
    if (type.equalsToText(CommonClassNames.JAVA_LANG_OBJECT) && matcher.prefixMatches("object")) {
      set.add(LookupElementBuilder.create("object"));
    }
    if (type.equalsToText(CommonClassNames.JAVA_LANG_STRING) && matcher.prefixMatches("string")) {
      set.add(LookupElementBuilder.create("string"));
    }
  }
  if (set.isEmpty() && includeOverlapped) {
    suggestedNameInfo=new SuggestedNameInfo(getOverlappedNameVersions(matcher.getPrefix(),suggestedNames,"")){
      public void nameChoosen(      String name){
      }
    }
;
    tunePreferencePolicy(LookupItemUtil.addLookupItems(set,suggestedNameInfo.names,matcher),suggestedNameInfo);
  }
  PsiElement parent=PsiTreeUtil.getParentOfType(var,PsiCodeBlock.class);
  if (parent == null)   parent=PsiTreeUtil.getParentOfType(var,PsiMethod.class);
  tunePreferencePolicy(LookupItemUtil.addLookupItems(set,getUnresolvedReferences(parent,false),matcher),suggestedNameInfo);
}
