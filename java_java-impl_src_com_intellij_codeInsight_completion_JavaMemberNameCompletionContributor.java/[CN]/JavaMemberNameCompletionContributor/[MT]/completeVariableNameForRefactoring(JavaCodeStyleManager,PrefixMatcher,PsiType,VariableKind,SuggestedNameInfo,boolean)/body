{
  Set<String> result=new LinkedHashSet<String>();
  final String[] suggestedNames=suggestedNameInfo.names;
  for (  final String suggestedName : suggestedNames) {
    if (matcher.prefixMatches(suggestedName)) {
      result.add(suggestedName);
    }
  }
  if (result.isEmpty() && PsiType.VOID != varType && includeOverlapped) {
    final String requiredSuffix=codeStyleManager.getSuffixByVariableKind(varKind);
    final String prefix=matcher.getPrefix();
    final boolean isMethodPrefix=prefix.startsWith(JavaCompletionUtil.IS_PREFIX) || prefix.startsWith(JavaCompletionUtil.GET_PREFIX) || prefix.startsWith(JavaCompletionUtil.SET_PREFIX);
    if (varKind != VariableKind.STATIC_FINAL_FIELD || isMethodPrefix) {
      for (int i=0; i < suggestedNames.length; i++) {
        suggestedNames[i]=codeStyleManager.variableNameToPropertyName(suggestedNames[i],varKind);
      }
    }
    ContainerUtil.addAll(result,getOverlappedNameVersions(prefix,suggestedNames,requiredSuffix));
  }
  return ArrayUtil.toStringArray(result);
}
