{
class Change implements Runnable {
    private String[] result;
    public void run(){
      final List<String> propertyHandlers=new ArrayList<String>();
      final PsiField[] fields=psiClass.getFields();
      for (      final PsiField field : fields) {
        if (field == element)         continue;
        final PsiModifierList modifierList=field.getModifierList();
        if (staticContext && (modifierList != null && !modifierList.hasModifierProperty(PsiModifier.STATIC)))         continue;
        if (field.getType().equals(varType)) {
          final String getterName=PropertyUtil.suggestGetterName(field.getProject(),field);
          if ((psiClass.findMethodsByName(getterName,true).length == 0 || psiClass.findMethodBySignature(PropertyUtil.generateGetterPrototype(field),true) == null)) {
            propertyHandlers.add(getterName);
          }
        }
        if (PsiType.VOID.equals(varType)) {
          final String setterName=PropertyUtil.suggestSetterName(field.getProject(),field);
          if ((psiClass.findMethodsByName(setterName,true).length == 0 || psiClass.findMethodBySignature(PropertyUtil.generateSetterPrototype(field),true) == null)) {
            propertyHandlers.add(setterName);
          }
        }
      }
      result=ArrayUtil.toStringArray(propertyHandlers);
    }
  }
  final Change result=new Change();
  CodeStyleManager.getInstance(element.getProject()).performActionWithFormatterDisabled(result);
  return result.result;
}
