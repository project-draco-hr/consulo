{
  FeatureUsageTracker.getInstance().triggerFeatureUsed("editing.completion.variable.name");
  JavaCodeStyleManager codeStyleManager=JavaCodeStyleManager.getInstance(var.getProject());
  final VariableKind variableKind=JavaCodeStyleManager.getInstance(var.getProject()).getVariableKind(var);
  final String prefix=matcher.getPrefix();
  if (PsiType.VOID.equals(var.getType()) || prefix.startsWith(JavaCompletionUtil.IS_PREFIX) || prefix.startsWith(JavaCompletionUtil.GET_PREFIX)|| prefix.startsWith(JavaCompletionUtil.SET_PREFIX)) {
    completeVariableNameForRefactoring(var.getProject(),set,matcher,var.getType(),variableKind);
    return;
  }
  SuggestedNameInfo suggestedNameInfo=codeStyleManager.suggestVariableName(variableKind,null,null,var.getType());
  final String[] suggestedNames=suggestedNameInfo.names;
  tunePreferencePolicy(LookupItemUtil.addLookupItems(set,suggestedNames,matcher),suggestedNameInfo);
  if (set.isEmpty()) {
    final String requiredSuffix=codeStyleManager.getSuffixByVariableKind(variableKind);
    if (variableKind != VariableKind.STATIC_FINAL_FIELD) {
      for (int i=0; i < suggestedNames.length; i++)       suggestedNames[i]=codeStyleManager.variableNameToPropertyName(suggestedNames[i],variableKind);
    }
    suggestedNameInfo=new SuggestedNameInfo(getOverlappedNameVersions(prefix,suggestedNames,requiredSuffix)){
      public void nameChoosen(      String name){
      }
    }
;
    tunePreferencePolicy(LookupItemUtil.addLookupItems(set,suggestedNameInfo.names,matcher),suggestedNameInfo);
  }
  tunePreferencePolicy(LookupItemUtil.addLookupItems(set,JavaStatisticsManager.getNameSuggestions(var.getType(),JavaStatisticsManager.getContext(var),matcher.getPrefix()),matcher),suggestedNameInfo);
  tunePreferencePolicy(LookupItemUtil.addLookupItems(set,getUnresolvedReferences(var.getParent(),false),matcher),suggestedNameInfo);
}
