{
  final PsiLambdaExpression lambdaExpression=PsiTreeUtil.getParentOfType(element,PsiLambdaExpression.class);
  LOG.assertTrue(lambdaExpression != null);
  PsiType functionalInterfaceType=lambdaExpression.getFunctionalInterfaceType();
  LOG.assertTrue(functionalInterfaceType != null);
  functionalInterfaceType=GenericsUtil.eliminateWildcards(functionalInterfaceType);
  final PsiMethod method=LambdaUtil.getFunctionalInterfaceMethod(functionalInterfaceType);
  LOG.assertTrue(method != null);
  final String blockText=getBodyText(lambdaExpression);
  if (blockText == null)   return;
  final PsiElementFactory psiElementFactory=JavaPsiFacade.getElementFactory(element.getProject());
  PsiNewExpression newExpression=(PsiNewExpression)psiElementFactory.createExpressionFromText("new " + functionalInterfaceType.getCanonicalText() + "(){}",lambdaExpression);
  newExpression=(PsiNewExpression)lambdaExpression.replace(newExpression);
  final PsiAnonymousClass anonymousClass=newExpression.getAnonymousClass();
  LOG.assertTrue(anonymousClass != null);
  final List<PsiGenerationInfo<PsiMethod>> infos=OverrideImplementUtil.overrideOrImplement(anonymousClass,method);
  if (infos != null && infos.size() == 1) {
    final PsiMethod member=infos.get(0).getPsiMember();
    PsiCodeBlock codeBlock=member.getBody();
    LOG.assertTrue(codeBlock != null);
    codeBlock=(PsiCodeBlock)codeBlock.replace(psiElementFactory.createCodeBlockFromText(blockText,null));
    final Set<PsiVariable> vars2BeFinal=new HashSet<PsiVariable>();
    codeBlock.accept(new JavaRecursiveElementWalkingVisitor(){
      @Override public void visitReferenceExpression(      PsiReferenceExpression expression){
        super.visitReferenceExpression(expression);
        final PsiElement resolve=expression.resolve();
        if (resolve instanceof PsiVariable) {
          final PsiVariable variable=(PsiVariable)resolve;
          final PsiClass innerClass=HighlightControlFlowUtil.getInnerClassVariableReferencedFrom(variable,expression);
          if (innerClass != null) {
            vars2BeFinal.add(variable);
          }
        }
      }
    }
);
    for (    PsiVariable var : vars2BeFinal) {
      PsiUtil.setModifierProperty(var,PsiModifier.FINAL,true);
    }
    GenerateMembersUtil.positionCaret(editor,member,true);
  }
}
