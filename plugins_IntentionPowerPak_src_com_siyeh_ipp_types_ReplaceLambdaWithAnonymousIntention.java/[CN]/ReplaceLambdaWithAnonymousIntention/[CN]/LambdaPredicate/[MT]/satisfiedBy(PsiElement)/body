{
  final PsiLambdaExpression lambdaExpression=PsiTreeUtil.getParentOfType(element,PsiLambdaExpression.class);
  if (lambdaExpression != null && PsiTreeUtil.isAncestor(lambdaExpression.getParameterList(),element,false)) {
    final PsiClass thisClass=PsiTreeUtil.getParentOfType(lambdaExpression,PsiClass.class,true);
    if (thisClass == null || thisClass instanceof PsiAnonymousClass) {
      final PsiElement body=lambdaExpression.getBody();
      if (body == null)       return false;
      final boolean[] disabled=new boolean[1];
      body.accept(new JavaRecursiveElementWalkingVisitor(){
        @Override public void visitThisExpression(        PsiThisExpression expression){
          disabled[0]=true;
        }
        @Override public void visitSuperExpression(        PsiSuperExpression expression){
          disabled[0]=true;
        }
      }
);
      if (disabled[0])       return false;
    }
    final PsiType functionalInterfaceType=lambdaExpression.getFunctionalInterfaceType();
    return functionalInterfaceType != null && LambdaUtil.getFunctionalInterfaceMethod(functionalInterfaceType) != null && LambdaUtil.isLambdaFullyInferred(lambdaExpression,functionalInterfaceType) && LambdaHighlightingUtil.checkInterfaceFunctional(functionalInterfaceType) == null;
  }
  return false;
}
