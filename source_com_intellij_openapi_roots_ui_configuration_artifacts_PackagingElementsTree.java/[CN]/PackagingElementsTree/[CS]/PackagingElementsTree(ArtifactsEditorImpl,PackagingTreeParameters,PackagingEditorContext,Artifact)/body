{
  myArtifactsEditor=artifactsEditor;
  myTreeParameters=treeParameters;
  myContext=context;
  myOriginalArtifact=originalArtifact;
  myRoot=new PackagingElementNode(getArtifact().getRootElement(),myContext);
  myTreeModel=new DefaultTreeModel(myRoot);
  myTree=new Tree(myTreeModel){
    @Override public String getToolTipText(    final MouseEvent event){
      TreePath path=myTree.getPathForLocation(event.getX(),event.getY());
      if (path != null) {
        return ((PackagingElementNode)path.getLastPathComponent()).getPresentation().getTooltipText();
      }
      return super.getToolTipText();
    }
  }
;
  myTree.setRootVisible(true);
  myTree.setShowsRootHandles(false);
  myTree.setCellRenderer(new ArtifactsTreeCellRenderer());
  myTree.addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      updatePropertiesPanel();
    }
  }
);
  myPropertiesPanel=createPropertiesPanel();
  myTreePanel=new JPanel(new BorderLayout());
  myTreePanel.add(ScrollPaneFactory.createScrollPane(myTree),BorderLayout.CENTER);
  myTreePanel.add(myPropertiesPanel,BorderLayout.SOUTH);
  new TreeSpeedSearch(myTree,SPEED_SEARCH_CONVERTOR,true);
  myTree.addMouseListener(new ArtifactsTreeMouseListener());
  DnDManager.getInstance().registerTarget(this,myTree);
}
