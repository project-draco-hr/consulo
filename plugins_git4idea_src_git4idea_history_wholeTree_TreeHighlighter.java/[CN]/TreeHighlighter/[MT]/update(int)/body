{
  if (recountFrom <= myInitIdx) {
    reset();
  }
 else {
    final NavigableMap<Integer,Set<Integer>> tailIdx=myIndexOfGrey.tailMap(recountFrom,true);
    final Iterator<Integer> iterator=tailIdx.keySet().iterator();
    while (iterator.hasNext()) {
      Integer next=iterator.next();
      iterator.remove();
    }
    final NavigableMap<Integer,Set<Integer>> tailNotReadyIdx=myIndexOfGreyNotReady.tailMap(recountFrom,true);
    final Iterator<Integer> iterator1=tailNotReadyIdx.keySet().iterator();
    while (iterator1.hasNext()) {
      Integer next=iterator1.next();
      iterator1.remove();
    }
  }
  if (myPoint == null)   return;
  if (!myInitialized) {
    myInitialized=init();
    if (!myInitialized)     return;
  }
  final Map<VirtualFile,WireEventsIterator> groupIterators=myModel.getAllGroupIterators(myIdx);
  final WireEventsIterator eventsIterator=groupIterators.get(myRoot);
  myIterator=eventsIterator.getWireEventsIterator();
  int runningIdx=myIdx;
  final Set<Integer> includedWires=new HashSet<Integer>();
  includedWires.addAll(myIncludedWires);
  myIncludedWires.clear();
  while (myIterator.hasNext() && !includedWires.isEmpty()) {
    final WireEventI event=myIterator.next();
    final Set<Integer> ends=new HashSet<Integer>();
    final int self=myModel.getCommitAt(event.getCommitIdx()).getWireNumber();
    ends.add(self);
    final int[] wireEnds=event.getWireEnds();
    if (wireEnds != null) {
      for (      int wireEnd : wireEnds) {
        if (wireEnd == -1)         continue;
        ends.add(myModel.getCommitAt(wireEnd).getWireNumber());
      }
    }
    boolean containsAny=false;
    for (    Integer end : ends) {
      if (includedWires.contains(end)) {
        containsAny=true;
        break;
      }
    }
    if (!containsAny)     continue;
    fillCommits(runningIdx,event.getCommitIdx(),includedWires);
    if (event.getWaitStartsNumber() > 0 && myIncludedWires.isEmpty()) {
      myIncludedWires.addAll(includedWires);
    }
    includedWires.removeAll(ends);
    includedWires.add(self);
    final int[] commitsStarts=event.getCommitsStarts();
    if (commitsStarts != null) {
      for (      int commitsStart : commitsStarts) {
        if (commitsStart == -1)         continue;
        includedWires.add(myModel.getCommitAt(commitsStart).getWireNumber());
      }
    }
    runningIdx=event.getCommitIdx();
    if (event.getWaitStartsNumber() == 0 && myIncludedWires.isEmpty()) {
      myIdx=event.getCommitIdx();
    }
  }
  if (myIncludedWires.isEmpty()) {
    myIncludedWires.addAll(includedWires);
  }
  recalcIndex();
}
