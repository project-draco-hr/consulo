{
  if (myBaseProfile != null) {
    myBaseProfile.initInspectionTools(project);
  }
  final List<InspectionToolWrapper> tools;
  try {
    tools=createTools(project);
  }
 catch (  ProcessCanceledException e) {
    return false;
  }
  for (  InspectionToolWrapper toolWrapper : tools) {
    final String shortName=toolWrapper.getShortName();
    HighlightDisplayKey key=HighlightDisplayKey.find(shortName);
    if (key == null) {
      final InspectionEP extension=toolWrapper.getExtension();
      Computable<String> computable=extension == null ? new Computable.PredefinedValueComputable<String>(toolWrapper.getDisplayName()) : new Computable<String>(){
        @Override public String compute(){
          return extension.getDisplayName();
        }
      }
;
      if (toolWrapper instanceof LocalInspectionToolWrapper) {
        key=HighlightDisplayKey.register(shortName,computable,((LocalInspectionToolWrapper)toolWrapper).getID(),((LocalInspectionToolWrapper)toolWrapper).getAlternativeID());
      }
 else {
        key=HighlightDisplayKey.register(shortName,computable);
      }
    }
    LOG.assertTrue(key != null,shortName + " ; number of initialized tools: " + myTools.size());
    HighlightDisplayLevel level=myBaseProfile != null ? myBaseProfile.getErrorLevel(key,project) : toolWrapper.getDefaultLevel();
    boolean enabled=myBaseProfile != null ? myBaseProfile.isToolEnabled(key) : toolWrapper.isEnabledByDefault();
    final ToolsImpl toolsList=new ToolsImpl(toolWrapper,level,!myLockedProfile && enabled,enabled);
    final Element element=myDeinstalledInspectionsSettings.remove(toolWrapper.getShortName());
    if (element != null) {
      try {
        toolsList.readExternal(element,this);
      }
 catch (      InvalidDataException e) {
        LOG.error("Can't read settings for " + toolWrapper,e);
      }
    }
    myTools.put(toolWrapper.getShortName(),toolsList);
  }
  if (mySource != null) {
    copyToolsConfigurations(mySource,project);
  }
  return true;
}
