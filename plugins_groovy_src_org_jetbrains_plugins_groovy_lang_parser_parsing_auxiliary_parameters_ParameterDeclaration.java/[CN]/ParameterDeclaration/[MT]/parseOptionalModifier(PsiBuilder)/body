{
  Set<IElementType> modSet=new HashSet<IElementType>();
  PsiBuilder.Marker marker=builder.mark();
  while (ParserUtils.lookAhead(builder,kFINAL) || ParserUtils.lookAhead(builder,kDEF) || ParserUtils.lookAhead(builder,mAT)) {
    if (kFINAL.equals(builder.getTokenType())) {
      if (modSet.contains(kFINAL)) {
        ParserUtils.wrapError(builder,GroovyBundle.message("duplicate.modifier"));
      }
 else {
        builder.advanceLexer();
        modSet.add(kFINAL);
      }
      ParserUtils.getToken(builder,mNLS);
    }
 else     if (kDEF.equals(builder.getTokenType())) {
      if (modSet.contains(kDEF)) {
        ParserUtils.wrapError(builder,GroovyBundle.message("duplicate.modifier"));
      }
 else {
        builder.advanceLexer();
        modSet.add(kDEF);
      }
      ParserUtils.getToken(builder,mNLS);
    }
 else     if (!WRONGWAY.equals(Annotation.parse(builder))) {
      ParserUtils.getToken(builder,mNLS);
    }
  }
  marker.done(PARAMETER_MODIFIERS);
}
