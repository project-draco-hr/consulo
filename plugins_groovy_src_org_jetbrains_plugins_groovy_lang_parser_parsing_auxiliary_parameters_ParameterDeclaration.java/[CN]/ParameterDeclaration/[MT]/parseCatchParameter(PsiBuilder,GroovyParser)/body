{
  PsiBuilder.Marker pdMarker=builder.mark();
  parseOptionalModifier(builder,parser);
  final PsiBuilder.Marker disjunctionMarker=builder.mark();
  PsiBuilder.Marker rb=builder.mark();
  int typeCount=0;
  do {
    typeCount++;
    rb.drop();
    rb=builder.mark();
    final ReferenceElement.ReferenceElementResult result=TypeSpec.parseStrict(builder,false);
    if (result == ReferenceElement.ReferenceElementResult.fail && ParserUtils.lookAhead(builder,mBOR)) {
      builder.error(GroovyBundle.message("type.expected"));
    }
 else {
      if (builder.getTokenType() == mTRIPLE_DOT) {
        builder.error(GroovyBundle.message("triple.is.not.expected.here"));
        builder.advanceLexer();
      }
    }
  }
 while (ParserUtils.getToken(builder,mBOR));
  if (mIDENT == builder.getTokenType()) {
    rb.drop();
  }
 else   if (typeCount == 1) {
    rb.rollbackTo();
    typeCount--;
  }
 else {
    builder.error(GroovyBundle.message("identifier.expected"));
    rb.drop();
  }
  if (typeCount > 1) {
    disjunctionMarker.done(DISJUNCTION_TYPE_ELEMENT);
  }
 else {
    disjunctionMarker.drop();
  }
  if (ParserUtils.getToken(builder,mIDENT)) {
    pdMarker.done(PARAMETER);
    return true;
  }
 else {
    pdMarker.drop();
    return false;
  }
}
