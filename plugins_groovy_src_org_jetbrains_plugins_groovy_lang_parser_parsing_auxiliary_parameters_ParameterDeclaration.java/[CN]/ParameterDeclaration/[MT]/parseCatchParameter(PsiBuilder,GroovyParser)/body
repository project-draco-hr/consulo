{
  PsiBuilder.Marker pdMarker=builder.mark();
  parseOptionalModifier(builder,parser);
  PsiBuilder.Marker rb=builder.mark();
  int typeCount=0;
  do {
    typeCount++;
    rb.drop();
    rb=builder.mark();
    final ReferenceElement.ReferenceElementResult result=TypeSpec.parseStrict(builder);
    if (result == ReferenceElement.ReferenceElementResult.fail && ParserUtils.lookAhead(builder,mBOR)) {
      builder.error(GroovyBundle.message("type.expected"));
    }
  }
 while (ParserUtils.getToken(builder,mBOR));
  if (mIDENT.equals(builder.getTokenType()) || (mTRIPLE_DOT.equals(builder.getTokenType()))) {
    rb.drop();
  }
 else {
    rb.rollbackTo();
    typeCount--;
    if (typeCount > 0) {
      builder.error(GroovyBundle.message("type.expected"));
    }
  }
  if (ParserUtils.getToken(builder,mIDENT)) {
    if (typeCount > 1) {
      pdMarker.done(MULTI_TYPE_PARAMETER);
    }
 else {
      pdMarker.done(PARAMETER);
    }
    return true;
  }
 else {
    pdMarker.rollbackTo();
    return false;
  }
}
