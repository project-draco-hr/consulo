{
  super(project,true);
  setTitle("Create New Project");
  init();
  myLocationLabel.setLabelFor(myLocationField.getChildComponent());
  myBaseDir=getBaseDir();
  File suggestedProjectDirectory=FileUtil.findSequentNonexistentFile(new File(myBaseDir),"untitled","");
  myLocationField.setText(suggestedProjectDirectory.toString());
  myProjectNameTextField.setText(suggestedProjectDirectory.getName());
  FileChooserDescriptor descriptor=FileChooserDescriptorFactory.createSingleFolderDescriptor();
  ComponentWithBrowseButton.BrowseFolderActionListener<JTextField> listener=new ComponentWithBrowseButton.BrowseFolderActionListener<JTextField>("Select Location for Project Directory","",myLocationField,project,descriptor,TextComponentAccessor.TEXT_FIELD_WHOLE_TEXT){
    protected void onFileChoosen(    VirtualFile chosenFile){
      myBaseDir=chosenFile.getPath();
      if (myProjectNameWasChanged && !myProjectNameTextField.getText().equals(chosenFile.getName())) {
        myExternalModify=true;
        myLocationField.setText(new File(chosenFile.getPath(),myProjectNameTextField.getText()).toString());
        myExternalModify=false;
      }
 else {
        myExternalModify=true;
        myLocationField.setText(chosenFile.getPath());
        myProjectNameTextField.setText(chosenFile.getName());
        myExternalModify=false;
      }
    }
  }
;
  myLocationField.addActionListener(listener);
  myLocationField.getTextField().getDocument().addDocumentListener(new DocumentAdapter(){
    @Override protected void textChanged(    DocumentEvent e){
      if (myExternalModify) {
        return;
      }
      myModifyingLocation=true;
      String path=myLocationField.getText().trim();
      if (path.endsWith(File.separator)) {
        path=path.substring(0,path.length() - File.separator.length());
      }
      int ind=path.lastIndexOf(File.separator);
      if (ind != -1) {
        String projectName=path.substring(ind + 1,path.length());
        if (!myProjectNameTextField.getText().trim().isEmpty()) {
          myBaseDir=path.substring(0,ind);
        }
        if (!projectName.equals(myProjectNameTextField.getText())) {
          if (!myModifyingProjectName) {
            myProjectNameTextField.setText(projectName);
          }
        }
      }
      myModifyingLocation=false;
    }
  }
);
  myProjectNameTextField.setDocument(new NameFieldDocument());
  myProjectNameTextField.selectAll();
  final DirectoryProjectGenerator[] generators=Extensions.getExtensions(DirectoryProjectGenerator.EP_NAME);
  if (generators.length == 0) {
    myProjectTypePanel.setVisible(false);
  }
 else {
    DefaultComboBoxModel model=new DefaultComboBoxModel();
    model.addElement(EMPTY_PROJECT_GENERATOR);
    for (    DirectoryProjectGenerator generator : generators) {
      model.addElement(generator);
    }
    myProjectTypeComboBox.setModel(model);
    myProjectTypeComboBox.setRenderer(new ListCellRendererWrapper(myProjectTypeComboBox.getRenderer()){
      @Override public void customize(      final JList list,      final Object value,      final int index,      final boolean selected,      final boolean cellHasFocus){
        if (value == null)         return;
        if (value == EMPTY_PROJECT_GENERATOR) {
          setText("Empty project");
        }
 else {
          setText(((DirectoryProjectGenerator)value).getName());
        }
      }
    }
);
  }
  registerValidators(new FacetValidatorsManager(){
    public void registerValidator(    FacetEditorValidator validator,    JComponent... componentsToWatch){
    }
    public void validate(){
      checkValid();
    }
  }
);
}
