{
  super(project,true);
  setTitle("Create New Project");
  init();
  myBaseDir=getBaseDir();
  File projectName=FileUtil.findSequentNonexistentFile(new File(myBaseDir),"untitled","");
  myLocationField.setText(projectName.toString());
  myProjectNameTextField.setText(projectName.getName());
  FileChooserDescriptor descriptor=new FileChooserDescriptor(false,true,false,false,false,false);
  ComponentWithBrowseButton.BrowseFolderActionListener<JTextField> listener=new ComponentWithBrowseButton.BrowseFolderActionListener<JTextField>("Select Location for Project Directory","",myLocationField,project,descriptor,TextComponentAccessor.TEXT_FIELD_WHOLE_TEXT){
    protected void onFileChoosen(    VirtualFile chosenFile){
      super.onFileChoosen(chosenFile);
      myBaseDir=chosenFile.getPath();
      myLocationField.setText(new File(chosenFile.getPath(),myProjectNameTextField.getText()).toString());
    }
  }
;
  myLocationField.addActionListener(listener);
  myProjectNameTextField.getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    final DocumentEvent e){
      File f=new File(myLocationField.getText());
      myLocationField.setText(new File(f.getParent(),myProjectNameTextField.getText()).getPath());
    }
  }
);
  myProjectNameTextField.getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    final DocumentEvent e){
      if (!myModifyingLocation) {
        myModifyingProjectName=true;
        File f=new File(myBaseDir);
        myLocationField.setText(new File(f,myProjectNameTextField.getText()).getPath());
        myModifyingProjectName=false;
      }
    }
  }
);
  myProjectNameTextField.selectAll();
  final DirectoryProjectGenerator[] generators=Extensions.getExtensions(DirectoryProjectGenerator.EP_NAME);
  if (generators.length == 0) {
    myProjectTypePanel.setVisible(false);
  }
 else {
    DefaultComboBoxModel model=new DefaultComboBoxModel();
    model.addElement(EMPTY_PROJECT_GENERATOR);
    for (    DirectoryProjectGenerator generator : generators) {
      model.addElement(generator);
    }
    myProjectTypeComboBox.setModel(model);
    myProjectTypeComboBox.setRenderer(new ListCellRendererWrapper(myProjectTypeComboBox.getRenderer()){
      @Override public void customize(      final JList list,      final Object value,      final int index,      final boolean selected,      final boolean cellHasFocus){
        if (value == null)         return;
        if (value == EMPTY_PROJECT_GENERATOR) {
          setText("Empty project");
        }
 else {
          setText(((DirectoryProjectGenerator)value).getName());
        }
      }
    }
);
  }
  registerValidators(new FacetValidatorsManager(){
    public void registerValidator(    FacetEditorValidator validator,    JComponent... componentsToWatch){
    }
    public void validate(){
      doValidate();
    }
  }
);
}
