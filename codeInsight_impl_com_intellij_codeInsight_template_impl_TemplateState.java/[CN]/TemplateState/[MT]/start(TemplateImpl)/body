{
  PsiDocumentManager.getInstance(myProject).commitAllDocuments();
  UndoManager.getInstance(myProject).undoableActionPerformed(new UndoableAction(){
    public void undo() throws UnexpectedUndoException {
      if (myDocument != null) {
        finishTemplateEditing();
      }
    }
    public void redo() throws UnexpectedUndoException {
    }
    public DocumentReference[] getAffectedDocuments(){
      if (myDocument == null)       return new DocumentReference[0];
      return new DocumentReference[]{DocumentReferenceByDocument.createDocumentReference(myDocument)};
    }
    public boolean isComplex(){
      return false;
    }
  }
);
  myTemplateIndented=false;
  myCurrentVariableNumber=-1;
  mySegments=new TemplateSegments(myEditor);
  myTemplate=template;
  preprocessTemplate(PsiDocumentManager.getInstance(myProject).getPsiFile(myDocument),myEditor.getCaretModel().getOffset());
  int caretOffset=myEditor.getCaretModel().getOffset();
  if (template.isInline()) {
    myTemplateRange=myDocument.createRangeMarker(caretOffset,caretOffset + template.getTemplateText().length());
  }
 else {
    myTemplateRange=myDocument.createRangeMarker(caretOffset,caretOffset);
  }
  myTemplateRange.setGreedyToLeft(true);
  myTemplateRange.setGreedyToRight(true);
  processAllExpressions(template);
}
