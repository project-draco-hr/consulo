{
  try {
    myErrorMessageProcessor.clear();
    CvsExecutionEnvironment executionEnvironment=new CvsExecutionEnvironment(myCompositeListener,getProgressListener(),myErrorMessageProcessor,executor,getPostActivityHandler());
    myCvsOperation.execute(executionEnvironment);
    onOperationFinished(executor);
    while (!myPostActivities.isEmpty()) {
      CvsOperation cvsOperation=myPostActivities.get(0);
      if (cvsOperation.login(executor)) {
        cvsOperation.execute(executionEnvironment);
      }
      myPostActivities.remove(cvsOperation);
    }
  }
 catch (  VcsException e) {
    myErrors.add(e);
  }
catch (  ProcessCanceledException e) {
    myIsCanceled=true;
  }
catch (  InvalidModuleDescriptionException ex) {
    myErrors.add(new CvsException(ex,ex.getCvsRoot()));
  }
catch (  InvalidEntryFormatException e) {
    myErrors.add(new VcsException(com.intellij.CvsBundle.message("exception.text.entries.file.is.corrupted",e.getEntriesFile())));
  }
catch (  CvsProcessException ex) {
    myErrors.add(new CvsException(ex,myCvsOperation.getLastProcessedCvsRoot()));
  }
catch (  Exception ex) {
    LOG.error(ex);
    myErrors.add(new CvsException(ex,myCvsOperation.getLastProcessedCvsRoot()));
  }
}
