{
  final Map<String,ObjectReference> reverseMap=new HashMap<String,ObjectReference>();
  final StringBuilder buffer=StringBuilderSpinAllocator.alloc();
  try {
    for (Iterator<Map.Entry<ObjectReference,ValueMarkup>> it=markupMap.entrySet().iterator(); it.hasNext(); ) {
      Map.Entry<ObjectReference,ValueMarkup> entry=it.next();
      final ObjectReference objectRef=entry.getKey();
      final ValueMarkup markup=entry.getValue();
      String labelName=markup.getText();
      if (!StringUtil.isJavaIdentifier(labelName)) {
        continue;
      }
      try {
        final String typeName=objectRef.type().name();
        labelName+=DEBUG_LABEL_SUFFIX;
        if (buffer.length() > 0) {
          buffer.append("\n");
        }
        buffer.append(typeName).append(" ").append(labelName).append(";");
        reverseMap.put(labelName,objectRef);
      }
 catch (      ObjectCollectedException e) {
        it.remove();
      }
    }
    buffer.append(" ");
    return new Pair<String,Map<String,ObjectReference>>(buffer.toString(),reverseMap);
  }
  finally {
    StringBuilderSpinAllocator.dispose(buffer);
  }
}
