{
  if (CreateMethodFromUsageFix.hasErrorsInArgumentList(myMethodCall))   return false;
  PsiReferenceExpression ref=myMethodCall.getMethodExpression();
  String methodName=myMethodCall.getMethodExpression().getReferenceName();
  LOG.assertTrue(methodName != null);
  String propertyName=PropertyUtil.getPropertyName(methodName);
  if (propertyName == null || propertyName.length() == 0)   return false;
  String getterOrSetter=null;
  if (methodName.startsWith(GET_PREFIX) || methodName.startsWith(IS_PREFIX)) {
    if (myMethodCall.getArgumentList().getExpressions().length != 0)     return false;
    getterOrSetter=QuickFixBundle.message("create.getter");
  }
 else   if (methodName.startsWith(SET_PREFIX)) {
    if (myMethodCall.getArgumentList().getExpressions().length != 1)     return false;
    getterOrSetter=QuickFixBundle.message("create.setter");
  }
 else {
    LOG.error("Internal error in create property intention");
  }
  List<PsiClass> classes=getTargetClasses(myMethodCall);
  if (classes.isEmpty())   return false;
  for (  PsiClass aClass : classes) {
    if (!aClass.isInterface()) {
      if (CreateFromUsageUtils.shouldShowTag(offset,ref.getReferenceNameElement(),myMethodCall)) {
        setText(getterOrSetter);
        return true;
      }
 else {
        return false;
      }
    }
  }
  return false;
}
