{
  PsiManager manager=myMethodCall.getManager();
  final Project project=manager.getProject();
  PsiElementFactory factory=JavaPsiFacade.getInstance(manager.getProject()).getElementFactory();
  boolean isStatic=false;
  PsiExpression qualifierExpression=myMethodCall.getMethodExpression().getQualifierExpression();
  if (qualifierExpression != null) {
    PsiReference reference=qualifierExpression.getReference();
    if (reference != null) {
      isStatic=reference.resolve() instanceof PsiClass;
    }
  }
 else {
    PsiMethod method=PsiTreeUtil.getParentOfType(myMethodCall,PsiMethod.class);
    if (method != null) {
      isStatic=method.hasModifierProperty(PsiModifier.STATIC);
    }
  }
  String fieldName=getVariableName(myMethodCall,isStatic);
  LOG.assertTrue(fieldName != null);
  String callText=myMethodCall.getMethodExpression().getReferenceName();
  LOG.assertTrue(callText != null,myMethodCall.getMethodExpression());
  PsiType[] expectedTypes;
  PsiType type;
  PsiField field=targetClass.findFieldByName(fieldName,true);
  if (callText.startsWith(GET_PREFIX)) {
    expectedTypes=field != null ? new PsiType[]{field.getType()} : CreateFromUsageUtils.guessType(myMethodCall,false);
    type=expectedTypes[0];
  }
 else   if (callText.startsWith(IS_PREFIX)) {
    type=PsiType.BOOLEAN;
    expectedTypes=new PsiType[]{type};
  }
 else {
    type=myMethodCall.getArgumentList().getExpressions()[0].getType();
    if (type == null || PsiType.NULL.equals(type))     type=PsiType.getJavaLangObject(manager,myMethodCall.getResolveScope());
    expectedTypes=new PsiType[]{type};
  }
  positionCursor(project,targetClass.getContainingFile(),targetClass);
  IdeDocumentHistory.getInstance(project).includeCurrentPlaceAsChangePlace();
  if (field == null) {
    field=factory.createField(fieldName,type);
    PsiUtil.setModifierProperty(field,PsiModifier.STATIC,isStatic);
  }
  PsiMethod accessor;
  PsiElement fieldReference;
  PsiElement typeReference;
  PsiCodeBlock body;
  if (callText.startsWith(GET_PREFIX) || callText.startsWith(IS_PREFIX)) {
    accessor=(PsiMethod)targetClass.add(PropertyUtil.generateGetterPrototype(field));
    body=accessor.getBody();
    LOG.assertTrue(body != null,accessor.getText());
    fieldReference=((PsiReturnStatement)body.getStatements()[0]).getReturnValue();
    typeReference=accessor.getReturnTypeElement();
  }
 else {
    accessor=(PsiMethod)targetClass.add(PropertyUtil.generateSetterPrototype(field,targetClass));
    body=accessor.getBody();
    LOG.assertTrue(body != null,accessor.getText());
    PsiAssignmentExpression expr=(PsiAssignmentExpression)((PsiExpressionStatement)body.getStatements()[0]).getExpression();
    fieldReference=((PsiReferenceExpression)expr.getLExpression()).getReferenceNameElement();
    typeReference=accessor.getParameterList().getParameters()[0].getTypeElement();
  }
  accessor.setName(callText);
  PsiUtil.setModifierProperty(accessor,PsiModifier.STATIC,isStatic);
  TemplateBuilderImpl builder=new TemplateBuilderImpl(accessor);
  builder.replaceElement(typeReference,TYPE_VARIABLE,new TypeExpression(project,expectedTypes),true);
  builder.replaceElement(fieldReference,FIELD_VARIABLE,new FieldExpression(field,targetClass,expectedTypes),true);
  builder.setEndVariableAfter(body.getLBrace());
  accessor=CodeInsightUtilBase.forcePsiPostprocessAndRestoreElement(accessor);
  LOG.assertTrue(accessor != null);
  targetClass=accessor.getContainingClass();
  LOG.assertTrue(targetClass != null);
  Template template=builder.buildTemplate();
  TextRange textRange=accessor.getTextRange();
  final PsiFile file=targetClass.getContainingFile();
  final Editor editor=positionCursor(project,targetClass.getContainingFile(),accessor);
  editor.getDocument().deleteString(textRange.getStartOffset(),textRange.getEndOffset());
  editor.getCaretModel().moveToOffset(textRange.getStartOffset());
  final boolean isStatic1=isStatic;
  startTemplate(editor,template,project,new TemplateEditingAdapter(){
    @Override public void beforeTemplateFinished(    final TemplateState state,    Template template){
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        @Override public void run(){
          String fieldName=state.getVariableValue(FIELD_VARIABLE).getText();
          if (!JavaPsiFacade.getInstance(project).getNameHelper().isIdentifier(fieldName))           return;
          String fieldType=state.getVariableValue(TYPE_VARIABLE).getText();
          PsiElement element=file.findElementAt(editor.getCaretModel().getOffset());
          PsiClass aClass=PsiTreeUtil.getParentOfType(element,PsiClass.class);
          if (aClass == null)           return;
          if (aClass.findFieldByName(fieldName,true) != null)           return;
          PsiElementFactory factory=JavaPsiFacade.getInstance(aClass.getProject()).getElementFactory();
          try {
            PsiType type=factory.createTypeFromText(fieldType,aClass);
            try {
              PsiField field=factory.createField(fieldName,type);
              field=(PsiField)aClass.add(field);
              PsiUtil.setModifierProperty(field,PsiModifier.STATIC,isStatic1);
              positionCursor(project,field.getContainingFile(),field);
            }
 catch (            IncorrectOperationException e) {
              LOG.error(e);
            }
          }
 catch (          IncorrectOperationException e) {
          }
        }
      }
);
    }
    @Override public void templateFinished(    Template template,    boolean brokenOff){
      PsiDocumentManager.getInstance(project).commitDocument(editor.getDocument());
      final int offset=editor.getCaretModel().getOffset();
      final PsiMethod generatedMethod=PsiTreeUtil.findElementOfClassAtOffset(file,offset,PsiMethod.class,false);
      if (generatedMethod != null) {
        ApplicationManager.getApplication().runWriteAction(new Runnable(){
          @Override public void run(){
            CodeStyleManager.getInstance(project).reformat(generatedMethod);
          }
        }
);
      }
    }
  }
);
}
