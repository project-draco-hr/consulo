{
  final FileChooserDescriptor descriptor=new OpenProjectFileChooserDescriptor(true);
  descriptor.setTitle(IdeBundle.message("title.open.project"));
  final Set<String> extensions=new LinkedHashSet<String>();
  for (  ProjectOpenProcessor openProcessor : ProjectOpenProcessor.EXTENSION_POINT_NAME.getExtensions()) {
    if (openProcessor instanceof ProjectOpenProcessorBase) {
      final String[] supportedExtensions=((ProjectOpenProcessorBase)openProcessor).getSupportedExtensions();
      if (supportedExtensions != null) {
        Collections.addAll(extensions,supportedExtensions);
      }
    }
  }
  if (extensions.isEmpty()) {
    descriptor.setDescription(IdeBundle.message("filter.project.directories"));
  }
 else {
    descriptor.setDescription(IdeBundle.message("filter.project.files",StringUtil.join(extensions,", ")));
  }
  VirtualFile userHomeDir=null;
  if (SystemInfo.isUnix) {
    userHomeDir=VfsUtil.getUserHomeDir();
  }
  descriptor.putUserData(PathChooserDialog.PREFER_LAST_OVER_EXPLICIT,Boolean.TRUE);
  final Project project=CommonDataKeys.PROJECT.getData(e.getDataContext());
  FileChooser.chooseFiles(descriptor,project,userHomeDir,new Consumer<List<VirtualFile>>(){
    @Override public void consume(    final List<VirtualFile> files){
      if (files.size() == 1) {
        ProjectUtil.openOrImport(files.get(0).getPath(),project,false);
      }
    }
  }
);
}
