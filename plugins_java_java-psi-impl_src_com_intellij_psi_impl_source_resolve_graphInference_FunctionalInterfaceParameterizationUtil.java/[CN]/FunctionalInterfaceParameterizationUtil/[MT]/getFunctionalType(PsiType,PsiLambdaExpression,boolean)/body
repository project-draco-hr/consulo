{
  if (!expr.hasFormalParameterTypes() || expr.getParameterList().getParametersCount() == 0)   return psiClassType;
  if (!isWildcardParameterized(psiClassType)) {
    return psiClassType;
  }
  final PsiParameter[] lambdaParams=expr.getParameterList().getParameters();
  if (psiClassType instanceof PsiIntersectionType) {
    for (    PsiType psiType : ((PsiIntersectionType)psiClassType).getConjuncts()) {
      final PsiType functionalType=getFunctionalType(psiType,expr,false);
      if (functionalType != null)       return functionalType;
    }
    return null;
  }
  LOG.assertTrue(psiClassType instanceof PsiClassType,"Unexpected type: " + psiClassType);
  final PsiType[] parameters=((PsiClassType)psiClassType).getParameters();
  final PsiClassType.ClassResolveResult resolveResult=((PsiClassType)psiClassType).resolveGenerics();
  PsiClass psiClass=resolveResult.getElement();
  if (psiClass != null) {
    final PsiMethod interfaceMethod=LambdaUtil.getFunctionalInterfaceMethod(resolveResult);
    if (interfaceMethod == null)     return null;
    final InferenceSession session=new InferenceSession(PsiSubstitutor.EMPTY);
    PsiTypeParameter[] typeParameters=psiClass.getTypeParameters();
    if (typeParameters.length != parameters.length) {
      return null;
    }
    for (int i=0; i < typeParameters.length; i++) {
      session.addVariable(typeParameters[i],parameters[i]);
    }
    final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(psiClass.getProject());
    final PsiParameter[] targetMethodParams=interfaceMethod.getParameterList().getParameters();
    for (int i=0; i < targetMethodParams.length; i++) {
      if (resolve) {
        session.addConstraint(new TypeEqualityConstraint(lambdaParams[i].getType(),targetMethodParams[i].getType()));
      }
    }
    final PsiClassType parameterization=elementFactory.createType(psiClass,session.infer());
    if (!isWildcardParameterized(parameterization))     return parameterization;
  }
  return null;
}
