{
  p.checkCanceled();
  p.setText(ProjectBundle.message("maven.reading",project.getPath()));
  p.setText2("");
  List<MavenProjectModel> oldModules=project.getModules();
  List<MavenProjectModel> newModules=new ArrayList<MavenProjectModel>();
  Set<MavenProjectModel> childrenToUpdate=isNew ? new HashSet<MavenProjectModel>() : findChildProjects(project);
  if (!updatedFiles.contains(project.getFile())) {
    if (!isNew)     myMavenIdToProject.remove(project.getMavenId());
    project.read(embedder,myProfiles);
    myMavenIdToProject.put(project.getMavenId(),project);
    updatedFiles.add(project.getFile());
  }
  if (isNew) {
    fireAdded(project);
  }
 else {
    fireUpdated(project);
  }
  for (  VirtualFile each : project.getExistingModuleFiles()) {
    MavenProjectModel child=findProject(each);
    boolean isNewChildProject=child == null;
    if (isNewChildProject) {
      child=new MavenProjectModel(each,null);
    }
    if (isNewChildProject || force) {
      doUpdate(child,embedder,true,updatedFiles,p,force);
    }
    newModules.add(child);
    myRootProjects.remove(child);
  }
  oldModules.removeAll(newModules);
  for (  MavenProjectModel each : oldModules) {
    doRemove(each);
  }
  project.setModules(newModules);
  childrenToUpdate.addAll(findChildProjects(project));
  for (  MavenProjectModel each : childrenToUpdate) {
    doUpdate(each,embedder,false,updatedFiles,p,force);
  }
}
