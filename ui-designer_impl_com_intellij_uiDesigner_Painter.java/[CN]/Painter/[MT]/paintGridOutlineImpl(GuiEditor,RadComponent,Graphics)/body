{
  if (component == null) {
    throw new IllegalArgumentException("component cannot be null");
  }
  if (!(component instanceof RadContainer)) {
    return;
  }
  final RadContainer container=(RadContainer)component;
  if (!container.isGrid()) {
    return;
  }
  final Point point=SwingUtilities.convertPoint(component.getDelegee(),0,0,editor.getRootContainer().getDelegee());
  g.translate(point.x,point.y);
  try {
    final GridLayoutManager gridLayout=(GridLayoutManager)container.getLayout();
    if (component.isSelected()) {
      g.setColor(SELECTED_GRID_COLOR);
    }
 else {
      g.setColor(NON_SELECTED_GRID_COLOR);
    }
    final int width=component.getWidth();
    final int[] horzGridLines=gridLayout.getHorizontalGridLines();
    for (int i=1; i < horzGridLines.length - 1; i++) {
      final int y=horzGridLines[i];
      for (int x=0; x < width; x+=4) {
        UIUtil.drawLine(g,x,y,Math.min(x + 2,width - 1),y);
      }
    }
    final int height=component.getHeight();
    final int[] vertGridLines=gridLayout.getVerticalGridLines();
    for (int i=1; i < vertGridLines.length - 1; i++) {
      final int x=vertGridLines[i];
      for (int y=0; y < height; y+=4) {
        UIUtil.drawLine(g,x,y,x,Math.min(y + 2,height - 1));
      }
    }
  }
  finally {
    g.translate(-point.x,-point.y);
  }
}
