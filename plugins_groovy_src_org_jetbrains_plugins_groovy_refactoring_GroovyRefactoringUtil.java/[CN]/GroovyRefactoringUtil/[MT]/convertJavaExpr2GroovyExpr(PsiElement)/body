{
  final GroovyPsiElementFactory factory=GroovyPsiElementFactory.getInstance(expr.getProject());
  final List<PsiLocalVariable> localVariables=new ArrayList<PsiLocalVariable>();
  final List<PsiField> fields=new ArrayList<PsiField>();
  final List<PsiParameter> parameters=new ArrayList<PsiParameter>();
  expr.accept(new JavaRecursiveElementVisitor(){
    @Override public void visitReferenceExpression(    PsiReferenceExpression expression){
      final PsiExpression qualifierExpression=expression.getQualifierExpression();
      if (qualifierExpression != null && !(qualifierExpression instanceof PsiThisExpression))       return;
      PsiElement el=expression.resolve();
      if (el instanceof PsiField) {
        fields.add((PsiField)el);
      }
 else       if (el instanceof PsiParameter) {
        parameters.add((PsiParameter)el);
      }
 else       if (el instanceof PsiLocalVariable) {
        localVariables.add((PsiLocalVariable)el);
      }
      super.visitReferenceExpression(expression);
    }
  }
);
  PsiJavaFile file=(PsiJavaFile)expr.getContainingFile();
  StringBuilder cf=new StringBuilder();
  final PsiPackageStatement packageStatement=file.getPackageStatement();
  if (packageStatement != null)   cf.append(packageStatement.getText());
  final PsiImportList importList=file.getImportList();
  if (importList != null)   cf.append(importList.getText());
  cf.append("class A{");
  for (  PsiField field : fields) {
    cf.append(field.getText());
  }
  cf.append("void foo(");
  for (int i=0, parametersSize=parameters.size() - 1; i < parametersSize; i++) {
    PsiParameter parameter=parameters.get(i);
    cf.append(parameter.getText()).append(',');
  }
  if (parameters.size() > 0) {
    cf.append(parameters.get(parameters.size() - 1).getText());
  }
  cf.append("){");
  for (  PsiLocalVariable localVariable : localVariables) {
    cf.append(localVariable.getText());
  }
  cf.append("Object _________________ooooooo_______________=");
  cf.append(expr.getText());
  cf.append(";}}");
  final GroovyFile grFile=factory.createGroovyFile(cf.toString(),false,expr);
  final GrMethod method=(GrMethod)grFile.getClasses()[0].getMethods()[0];
  final GrVariableDeclaration variableDeclaration=(GrVariableDeclaration)method.getBlock().getStatements()[0];
  return variableDeclaration.getVariables()[0].getInitializerGroovy();
}
