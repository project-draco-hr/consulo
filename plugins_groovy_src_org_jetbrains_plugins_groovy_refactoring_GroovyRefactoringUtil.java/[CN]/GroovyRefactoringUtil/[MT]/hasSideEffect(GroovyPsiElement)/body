{
  final Ref<Boolean> hasSideEffect=new Ref<Boolean>(false);
  statement.accept(new GroovyRecursiveElementVisitor(){
    @Override public void visitMethodCallExpression(    GrMethodCallExpression methodCallExpression){
      hasSideEffect.set(true);
    }
    @Override public void visitCallExpression(    GrCallExpression callExpression){
      hasSideEffect.set(true);
    }
    @Override public void visitApplicationStatement(    GrApplicationStatement applicationStatement){
      hasSideEffect.set(true);
    }
    @Override public void visitClosure(    GrClosableBlock closure){
      hasSideEffect.set(true);
    }
    @Override public void visitUnaryExpression(    GrUnaryExpression expression){
      hasSideEffect.set(true);
    }
    @Override public void visitElement(    GroovyPsiElement element){
      if (hasSideEffect.get())       return;
      super.visitElement(element);
    }
  }
);
  return hasSideEffect.get();
}
