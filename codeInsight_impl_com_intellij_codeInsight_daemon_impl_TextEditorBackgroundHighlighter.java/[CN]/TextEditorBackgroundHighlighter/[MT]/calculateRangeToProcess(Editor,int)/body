{
  if (pass == Pass.POPUP_HINTS || pass == Pass.POPUP_HINTS2) {
    Rectangle rect=editor.getScrollingModel().getVisibleArea();
    LogicalPosition startPosition=editor.xyToLogicalPosition(new Point(rect.x,rect.y));
    LogicalPosition endPosition=editor.xyToLogicalPosition(new Point(rect.x + rect.width,rect.y + rect.height));
    int visibleStart=editor.logicalPositionToOffset(startPosition);
    int visibleEnd=editor.logicalPositionToOffset(new LogicalPosition(endPosition.line + 1,0));
    return new TextRange(visibleStart,visibleEnd);
  }
  Document document=editor.getDocument();
  int part;
  if (pass == Pass.UPDATE_OVERRIDEN_MARKERS) {
    part=FileStatusMap.OVERRIDEN_MARKERS;
  }
 else   if (pass == Pass.LOCAL_INSPECTIONS) {
    part=FileStatusMap.LOCAL_INSPECTIONS;
  }
 else {
    part=FileStatusMap.NORMAL_HIGHLIGHTERS;
  }
  PsiElement dirtyScope=DaemonCodeAnalyzer.getInstance(myProject).getFileStatusMap().getFileDirtyScope(document,part);
  int startOffset;
  int endOffset;
  if (dirtyScope != null && dirtyScope.isValid()) {
    if (pass != Pass.POST_UPDATE_ALL) {
      PsiFile file=dirtyScope.getContainingFile();
      if (file.getTextLength() != document.getTextLength()) {
        LOG.error("Length wrong! dirtyScope:" + dirtyScope,"file length:" + file.getTextLength(),"document length:" + document.getTextLength(),"file stamp:" + file.getModificationStamp(),"document stamp:" + document.getModificationStamp(),"file text     :" + file.getText(),"document text:" + document.getText());
      }
      if (LOG.isDebugEnabled()) {
        LOG.debug("Dirty block optimization works");
      }
      TextRange range=dirtyScope.getTextRange();
      startOffset=range.getStartOffset();
      endOffset=range.getEndOffset();
    }
 else {
      startOffset=0;
      endOffset=document.getTextLength();
    }
  }
 else {
    startOffset=Integer.MAX_VALUE;
    endOffset=Integer.MIN_VALUE;
  }
  if (pass == Pass.UPDATE_VISIBLE) {
    Rectangle rect=editor.getScrollingModel().getVisibleArea();
    LogicalPosition startPosition=editor.xyToLogicalPosition(new Point(rect.x,rect.y));
    int visibleStart=editor.logicalPositionToOffset(startPosition);
    if (visibleStart > startOffset) {
      startOffset=visibleStart;
    }
    LogicalPosition endPosition=editor.xyToLogicalPosition(new Point(rect.x + rect.width,rect.y + rect.height));
    int visibleEnd=editor.logicalPositionToOffset(new LogicalPosition(endPosition.line + 1,0));
    if (visibleEnd < endOffset) {
      endOffset=visibleEnd;
    }
  }
  return new TextRange(startOffset,endOffset);
}
