{
  renewFile();
  if (myFile == null)   return TextEditorHighlightingPass.EMPTY_ARRAY;
  List<TextEditorHighlightingPass> passes=new ArrayList<TextEditorHighlightingPass>();
  if (myCompiled && myFile instanceof PsiJavaFile) {
    appendPass(passes,Pass.UPDATE_OVERRIDEN_MARKERS);
  }
 else   if (DaemonCodeAnalyzer.getInstance(myProject).isHighlightingAvailable(myFile)) {
    PsiDocumentManager.getInstance(myProject).commitAllDocuments();
    for (    int passToPerform : passesToPerform) {
      appendPass(passes,passToPerform);
    }
  }
  final TextEditorHighlightingPassRegistrarEx passRegistrar=TextEditorHighlightingPassRegistrarEx.getInstanceEx(myProject);
  passRegistrar.modifyHighlightingPasses(passes,myFile,myEditor);
  if (passRegistrar.needAdditionalIntentionsPass()) {
    TextRange range=calculateRangeToProcess(myEditor,Pass.POPUP_HINTS2);
    int startOffset=range.getStartOffset();
    int endOffset=range.getEndOffset();
    TextEditorHighlightingPass daemonPass=createDaemonPass(startOffset,endOffset,Pass.POPUP_HINTS2);
    passes.add(daemonPass);
  }
  return passes.toArray(new TextEditorHighlightingPass[passes.size()]);
}
