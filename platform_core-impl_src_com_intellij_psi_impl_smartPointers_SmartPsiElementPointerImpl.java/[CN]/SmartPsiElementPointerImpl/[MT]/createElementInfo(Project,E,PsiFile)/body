{
  if (element instanceof PsiDirectory) {
    return new DirElementInfo((PsiDirectory)element);
  }
  if (element instanceof PsiCompiledElement || containingFile == null || !containingFile.isPhysical() || !element.isPhysical()) {
    if (element instanceof StubBasedPsiElement && element instanceof PsiCompiledElement) {
      if (element instanceof PsiFile) {
        return new FileElementInfo((PsiFile)element);
      }
      PsiAnchor.StubIndexReference stubReference=PsiAnchor.createStubReference(element,containingFile);
      if (stubReference != null) {
        return new ClsElementInfo(stubReference);
      }
    }
    return new HardElementInfo(project,element);
  }
  FileViewProvider viewProvider=containingFile.getViewProvider();
  if (viewProvider instanceof FreeThreadedFileViewProvider) {
    PsiLanguageInjectionHost hostContext=InjectedLanguageManager.getInstance(containingFile.getProject()).getInjectionHost(containingFile);
    TextRange elementRange=element.getTextRange();
    if (hostContext != null && elementRange != null) {
      SmartPsiElementPointer<PsiLanguageInjectionHost> hostPointer=SmartPointerManager.getInstance(project).createSmartPsiElementPointer(hostContext);
      return new InjectedSelfElementInfo(project,element,elementRange,containingFile,hostPointer);
    }
  }
  for (  SmartPointerElementInfoFactory factory : Extensions.getExtensions(SmartPointerElementInfoFactory.EP_NAME)) {
    final SmartPointerElementInfo result=factory.createElementInfo(element);
    if (result != null)     return result;
  }
  if (element instanceof PsiFile) {
    return new FileElementInfo((PsiFile)element);
  }
  TextRange elementRange=element.getTextRange();
  if (elementRange == null) {
    return new HardElementInfo(project,element);
  }
  ProperTextRange proper=ProperTextRange.create(elementRange);
  return new SelfElementInfo(project,proper,element.getClass(),containingFile,LanguageUtil.getRootLanguage(element),false);
}
