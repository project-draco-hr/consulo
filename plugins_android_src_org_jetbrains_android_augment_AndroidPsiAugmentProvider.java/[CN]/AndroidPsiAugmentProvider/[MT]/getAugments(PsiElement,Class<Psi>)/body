{
  if ((type != PsiClass.class && type != PsiField.class) || !(element instanceof PsiExtensibleClass) || DumbService.isDumb(element.getProject())) {
    return Collections.emptyList();
  }
  final PsiExtensibleClass aClass=(PsiExtensibleClass)element;
  final String className=aClass.getName();
  final AndroidFacet facet=AndroidFacet.getInstance(element);
  if (facet == null) {
    return Collections.emptyList();
  }
  final PsiFile containingFile=element.getContainingFile();
  if (containingFile == null) {
    return Collections.emptyList();
  }
  if (type == PsiClass.class) {
    if (AndroidUtils.R_CLASS_NAME.equals(className) && AndroidResourceUtil.isRJavaFile(facet,containingFile)) {
      final Set<String> existingInnerClasses=getOwnInnerClasses(aClass);
      final Set<String> types=ResourceReferenceConverter.getResourceTypesInCurrentModule(facet);
      final List<Psi> result=new ArrayList<Psi>();
      for (      String resType : types) {
        if (!existingInnerClasses.contains(resType)) {
          final AndroidLightClass resClass=new ResourceTypeClass(facet,resType,aClass);
          result.add((Psi)resClass);
        }
      }
      return result;
    }
 else     if (AndroidUtils.MANIFEST_CLASS_NAME.equals(className) && AndroidResourceUtil.isManifestJavaFile(facet,containingFile)) {
      return Arrays.asList((Psi)new PermissionClass(facet,aClass),(Psi)new PermissionGroupClass(facet,aClass));
    }
  }
 else   if (type == PsiField.class && !(aClass instanceof AndroidLightClass)) {
    final PsiClass parentClass=aClass.getContainingClass();
    if (parentClass != null && AndroidUtils.R_CLASS_NAME.equals(parentClass.getName()) && AndroidResourceUtil.isRJavaFile(facet,containingFile)) {
      final String resClassName=aClass.getName();
      if (resClassName != null && ResourceType.getEnum(resClassName) != null) {
        final Set<String> existingFields=getOwnFields(aClass);
        final PsiField[] newFields=ResourceTypeClass.buildResourceFields(facet,resClassName,aClass);
        final List<Psi> result=new ArrayList<Psi>();
        for (        PsiField field : newFields) {
          if (!existingFields.contains(field.getName())) {
            result.add((Psi)field);
          }
        }
        return result;
      }
    }
  }
  return Collections.emptyList();
}
