{
  try {
    myProjectPath=myProjectPath.replace(File.separatorChar,'/');
    VirtualFile vfsProject=LocalFileSystem.getInstance().findFileByPath(myProjectPath);
    if (vfsProject == null) {
      logError(InspectionsBundle.message("inspection.application.file.cannot.be.found",myProjectPath));
      InspectionMain.printHelp();
    }
    logMessage(1,InspectionsBundle.message("inspection.application.opening.project"));
    if (!ProjectConversionUtil.convertSilently(myProjectPath,createConversionListener())) {
      System.exit(1);
    }
    myProject=ProjectManagerEx.getInstanceEx().loadAndOpenProject(myProjectPath,false);
    Profile inspectionProfile=InspectionProjectProfileManager.getInstance(myProject).getProfiles().get(myProfileName);
    if (inspectionProfile == null) {
      inspectionProfile=InspectionProfileManager.getInstance().loadProfile(myProfileName);
    }
    if (inspectionProfile == null) {
      logError(InspectionsBundle.message("inspection.application.file.cannot.be.found",myProfileName));
      InspectionMain.printHelp();
    }
    ideaProjectPreparations();
    logMessageLn(1,InspectionsBundle.message("inspection.done"));
    logMessage(1,InspectionsBundle.message("inspection.application.initializing.project"));
    final InspectionManagerEx im=(InspectionManagerEx)InspectionManager.getInstance(myProject);
    final AnalysisScope scope;
    final GlobalInspectionContextImpl inspectionContext=im.createNewGlobalContext(true);
    inspectionContext.setExternalProfile((InspectionProfile)inspectionProfile);
    im.setProfile(inspectionProfile.getName());
    if (mySourceDirectory == null) {
      scope=new AnalysisScope(myProject);
    }
 else {
      mySourceDirectory=mySourceDirectory.replace(File.separatorChar,'/');
      VirtualFile vfsDir=LocalFileSystem.getInstance().findFileByPath(mySourceDirectory);
      if (vfsDir == null) {
        logError(InspectionsBundle.message("inspection.application.directory.cannot.be.found",mySourceDirectory));
        InspectionMain.printHelp();
      }
      PsiDirectory psiDirectory=PsiManager.getInstance(myProject).findDirectory(vfsDir);
      scope=new AnalysisScope(psiDirectory);
    }
    logMessageLn(1,InspectionsBundle.message("inspection.done"));
    ProgressManager.getInstance().runProcess(new Runnable(){
      public void run(){
        PsiClass psiObjectClass=PsiManager.getInstance(myProject).findClass("java.lang.Object",GlobalSearchScope.allScope(myProject));
        if (psiObjectClass == null) {
          if (ModuleManager.getInstance(myProject).getModules().length == 0) {
            logError(InspectionsBundle.message("inspection.no.modules.error.message"));
            if (myErrorCodeRequired)             System.exit(1);
            return;
          }
          logError(InspectionsBundle.message("inspection.no.jdk.error.message"));
          logError(InspectionsBundle.message("offline.inspections.jdk.not.found",ProjectRootManager.getInstance(myProject).getProjectJdkName()));
          if (myErrorCodeRequired)           System.exit(1);
          return;
        }
        final Module[] modules=ModuleManager.getInstance(myProject).getModules();
        for (        Module module : modules) {
          final ModuleRootManager rootManager=ModuleRootManager.getInstance(module);
          final ProjectJdk jdk=rootManager.getJdk();
          final OrderEntry[] entries=rootManager.getOrderEntries();
          for (          OrderEntry entry : entries) {
            if (entry instanceof JdkOrderEntry) {
              if (jdk == null) {
                logError(InspectionsBundle.message("offline.inspections.module.jdk.not.found",((JdkOrderEntry)entry).getJdkName(),module.getName()));
                if (myErrorCodeRequired)                 System.exit(1);
                return;
              }
            }
 else             if (entry instanceof LibraryOrderEntry) {
              final LibraryOrderEntry libraryOrderEntry=(LibraryOrderEntry)entry;
              final Library library=libraryOrderEntry.getLibrary();
              if (library == null || library.getFiles(OrderRootType.CLASSES).length != library.getUrls(OrderRootType.CLASSES).length) {
                logError(InspectionsBundle.message("offline.inspections.library.was.not.resolved",libraryOrderEntry.getLibraryName(),module.getName()));
              }
            }
          }
        }
        inspectionContext.launchInspectionsOffline(scope,myOutPath,myRunWithEditorSettings,myRunGlobalToolsOnly,im);
        logMessageLn(1,"\n" + InspectionsBundle.message("inspection.capitalized.done") + "\n");
      }
    }
,new ProgressIndicatorBase(){
      private String lastPrefix="";
      private int myLastPercent=-1;
      public void setText(      String text){
        if (myVerboseLevel == 0)         return;
        if (myVerboseLevel == 1) {
          String prefix=getPrefix(text);
          if (prefix == null)           return;
          if (prefix.equals(lastPrefix)) {
            logMessage(1,".");
            return;
          }
          lastPrefix=prefix;
          logMessageLn(1,"");
          logMessageLn(1,prefix);
          return;
        }
        if (myVerboseLevel == 3) {
          if (!isIndeterminate() && getFraction() > 0) {
            final StringBuilder buf=StringBuilderSpinAllocator.alloc();
            try {
              final int percent=(int)(getFraction() * 100);
              if (myLastPercent == percent)               return;
              myLastPercent=percent;
              buf.append(InspectionsBundle.message("inspection.display.name")).append(" ").append(percent).append("%");
              logMessageLn(2,buf.toString());
            }
  finally {
              StringBuilderSpinAllocator.dispose(buf);
            }
          }
          return;
        }
        logMessageLn(2,text);
      }
    }
);
    describeInspections(myOutPath + File.separatorChar + DESCRIPTIONS+ XmlFileType.DOT_DEFAULT_EXTENSION,!myRunWithEditorSettings ? inspectionProfile.getName() : null);
  }
 catch (  IOException e) {
    LOG.error(e);
    logError(e.getMessage());
    InspectionMain.printHelp();
  }
catch (  Throwable e) {
    LOG.error(e);
    logError(e.getMessage());
    if (myErrorCodeRequired)     System.exit(1);
  }
}
