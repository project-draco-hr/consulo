{
  try {
    myProjectPath=myProjectPath.replace(File.separatorChar,'/');
    VirtualFile vfsProject=LocalFileSystem.getInstance().findFileByPath(myProjectPath);
    if (vfsProject == null) {
      logError(InspectionsBundle.message("inspection.application.file.cannot.be.found",myProjectPath));
      InspectionMain.printHelp();
    }
    final Profile inspectionProfile=InspectionProfileManager.getInstance().loadProfile(myProfileName);
    if (inspectionProfile == null) {
      logError(InspectionsBundle.message("inspection.application.file.cannot.be.found",myProfileName));
      InspectionMain.printHelp();
    }
    logMessage(1,InspectionsBundle.message("inspection.application.opening.project"));
    myProject=ProjectManagerEx.getInstanceEx().loadAndOpenProject(myProjectPath);
    ideaProjectPreparations();
    logMessageLn(1,InspectionsBundle.message("inspection.done"));
    logMessage(1,InspectionsBundle.message("inspection.application.initializing.project"));
    final InspectionManagerEx im=(InspectionManagerEx)InspectionManager.getInstance(myProject);
    final AnalysisScope scope;
    final GlobalInspectionContextImpl inspectionContext=im.createNewGlobalContext(true);
    inspectionContext.setExternalProfile((InspectionProfile)inspectionProfile);
    im.setProfile(inspectionProfile.getName());
    if (mySourceDirectory == null) {
      scope=new AnalysisScope(myProject);
    }
 else {
      mySourceDirectory=mySourceDirectory.replace(File.separatorChar,'/');
      VirtualFile vfsDir=LocalFileSystem.getInstance().findFileByPath(mySourceDirectory);
      if (vfsDir == null) {
        logError(InspectionsBundle.message("inspection.application.directory.cannot.be.found",mySourceDirectory));
        InspectionMain.printHelp();
      }
      PsiDirectory psiDirectory=PsiManager.getInstance(myProject).findDirectory(vfsDir);
      scope=new AnalysisScope(psiDirectory);
    }
    logMessageLn(1,InspectionsBundle.message("inspection.done"));
    ProgressManager.getInstance().runProcess(new Runnable(){
      public void run(){
        PsiClass psiObjectClass=PsiManager.getInstance(myProject).findClass("java.lang.Object",GlobalSearchScope.allScope(myProject));
        if (psiObjectClass == null) {
          logError(InspectionsBundle.message("inspection.no.jdk.error.message"));
          System.exit(1);
          return;
        }
        inspectionContext.launchInspectionsOffline(scope,myOutPath,myRunWithEditorSettings,myRunGlobalToolsOnly,im);
        logMessageLn(1,"\n" + InspectionsBundle.message("inspection.capitalized.done") + "\n");
      }
    }
,new ProgressIndicatorBase(){
      private String lastPrefix="";
      public void setText(      String text){
        if (myVerboseLevel == 0)         return;
        if (myVerboseLevel == 1) {
          String prefix=getPrefix(text);
          if (prefix == null)           return;
          if (prefix.equals(lastPrefix)) {
            logMessage(1,".");
            return;
          }
          lastPrefix=prefix;
          logMessageLn(1,"");
          logMessageLn(1,prefix);
          return;
        }
        if (myVerboseLevel == 3) {
          final String prefix=getPrefix(text);
          final StringBuilder buf=StringBuilderSpinAllocator.alloc();
          try {
            buf.append(prefix == null ? text : prefix);
            if (!isIndeterminate()) {
              buf.append("... ").append((int)(getFraction() * 100)).append("%");
            }
            logMessageLn(2,buf.toString());
          }
  finally {
            StringBuilderSpinAllocator.dispose(buf);
          }
          return;
        }
        logMessageLn(2,text);
      }
    }
);
    describeInspections(myOutPath + File.separatorChar + ".descriptions.xml");
  }
 catch (  IOException e) {
    LOG.error(e);
    logError(e.getMessage());
    InspectionMain.printHelp();
  }
catch (  Throwable e) {
    LOG.error(e);
    logError(e.getMessage());
    System.exit(1);
  }
}
