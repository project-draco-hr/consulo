{
  if (excludePatterns.isEmpty() && includePatterns.isEmpty())   return;
  final ProjectFileIndex index=ProjectRootManager.getInstance(myProject).getFileIndex();
  final ModifiableModuleModel modulesModel=ModuleManager.getInstance(myProject).getModifiableModel();
  final Module[] modules=modulesModel.getModules();
  final ModifiableRootModel[] models=new ModifiableRootModel[modules.length];
  for (int i=0; i < modules.length; i++) {
    models[i]=ModuleRootManager.getInstance(modules[i]).getModifiableModel();
    final ContentEntry[] contentEntries=models[i].getContentEntries();
    for (    final ContentEntry contentEntry : contentEntries) {
      final VirtualFile contentRoot=contentEntry.getFile();
      if (contentRoot == null)       continue;
      final Set<VirtualFile> included=new HashSet<VirtualFile>();
      iterate(contentRoot,new ContentIterator(){
        public boolean processFile(        final VirtualFile fileOrDir){
          String relativeName=VfsUtil.getRelativePath(fileOrDir,contentRoot,'/');
          for (          Pattern excludePattern : excludePatterns) {
            if (excludePattern.matcher(relativeName).matches()) {
              contentEntry.addExcludeFolder(fileOrDir);
              return false;
            }
          }
          if (includePatterns.isEmpty())           return true;
          for (          Pattern includePattern : includePatterns) {
            if (includePattern.matcher(relativeName).matches()) {
              included.add(fileOrDir);
              return true;
            }
          }
          return true;
        }
      }
,index);
      processIncluded(contentEntry,included);
    }
  }
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      ProjectRootManagerEx.getInstanceEx(myProject).multiCommit(modulesModel,models);
    }
  }
);
}
