{
  final PsiElement element=descriptor.getPsiElement();
  final PsiElement parent=element.getParent();
  final PsiElement grandParent=parent.getParent();
  if (!(grandParent instanceof PsiMethodCallExpression)) {
    return;
  }
  final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)grandParent;
  final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
  @NonNls final StringBuilder newExpression=new StringBuilder();
  final PsiExpression qualifierExpression=methodExpression.getQualifierExpression();
  if (qualifierExpression != null) {
    newExpression.append(qualifierExpression.getText());
    newExpression.append('.');
  }
  if (put) {
    newExpression.append("setProperty(");
  }
 else {
    newExpression.append("getProperty(");
  }
  final PsiExpressionList argumentList=methodCallExpression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  boolean first=true;
  for (  PsiExpression argument : arguments) {
    if (!first) {
      newExpression.append(',');
    }
 else {
      first=false;
    }
    newExpression.append(argument.getText());
  }
  newExpression.append(')');
  replaceExpression(methodCallExpression,newExpression.toString());
}
