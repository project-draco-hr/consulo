{
  final DefaultPsiElementCellRenderer renderer=new DefaultPsiElementCellRenderer(){
{
      setFocusBorderEnabled(false);
    }
    @Override public String getElementText(    PsiElement element){
      String customName=itemsMap.get(element).getCustomName();
      return customName != null ? customName : super.getElementText(element);
    }
    @Override protected Icon getIcon(    PsiElement element){
      Icon customIcon=itemsMap.get(element).getCustomIcon();
      return customIcon != null ? customIcon : super.getIcon(element);
    }
    @Override public String getContainerText(    PsiElement element,    String name){
      PsiFile file=element.getContainingFile();
      return file != null && !getElementText(element).equals(file.getName()) ? "(" + file.getName() + ")" : null;
    }
    @Override protected DefaultListCellRenderer getRightCellRenderer(){
      return null;
    }
    @Override protected boolean customizeNonPsiElementLeftRenderer(    ColoredListCellRenderer renderer,    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      final GotoRelatedItem item=(GotoRelatedItem)value;
      Color color=list.getForeground();
      final SimpleTextAttributes nameAttributes=new SimpleTextAttributes(Font.PLAIN,color);
      final String name=item.getCustomName();
      if (name == null)       return false;
      renderer.append(name,nameAttributes);
      renderer.setIcon(item.getCustomIcon());
      return true;
    }
  }
;
  if (false) {
    final ListPopupImpl popup=new ListPopupImpl(new BaseListPopupStep<Object>(title,Arrays.asList(elements)){
      @Override public boolean isSpeedSearchEnabled(){
        return true;
      }
    }
){
      @Override protected ListCellRenderer getListElementRenderer(){
        return renderer;
      }
    }
;
    popup.setMinimumSize(new Dimension(200,-1));
    return popup;
  }
  final JList list=new JBList(elements);
  list.setCellRenderer(renderer);
  final Runnable runnable=new Runnable(){
    public void run(){
      int[] ids=list.getSelectedIndices();
      if (ids == null || ids.length == 0)       return;
      for (      Object element : list.getSelectedValues()) {
        if (element != null) {
          processor.process(element);
        }
      }
    }
  }
;
  PopupChooserBuilder builder=new PopupChooserBuilder(list);
  if (title != null) {
    builder.setTitle(title);
  }
  renderer.installSpeedSearch(builder,true);
  builder.setMinSize(new Dimension(200,-1));
  return builder.setItemChoosenCallback(runnable).createPopup();
}
