{
  final Ref<Boolean> hasMnemonic=Ref.create(false);
  final DefaultPsiElementCellRenderer renderer=new DefaultPsiElementCellRenderer(){
{
      setFocusBorderEnabled(false);
    }
    @Override public String getElementText(    PsiElement element){
      String customName=itemsMap.get(element).getCustomName();
      return (customName != null ? customName : super.getElementText(element));
    }
    @Override protected Icon getIcon(    PsiElement element){
      Icon customIcon=itemsMap.get(element).getCustomIcon();
      return customIcon != null ? customIcon : super.getIcon(element);
    }
    @Override public String getContainerText(    PsiElement element,    String name){
      PsiFile file=element.getContainingFile();
      return file != null && !getElementText(element).equals(file.getName()) ? "(" + file.getName() + ")" : null;
    }
    @Override protected DefaultListCellRenderer getRightCellRenderer(    Object value){
      return null;
    }
    @Override protected boolean customizeNonPsiElementLeftRenderer(    ColoredListCellRenderer renderer,    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      final GotoRelatedItem item=(GotoRelatedItem)value;
      Color color=list.getForeground();
      final SimpleTextAttributes nameAttributes=new SimpleTextAttributes(Font.PLAIN,color);
      final String name=item.getCustomName();
      if (name == null)       return false;
      renderer.append(name,nameAttributes);
      renderer.setIcon(item.getCustomIcon());
      return true;
    }
    @Override public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean isSelected,    boolean cellHasFocus){
      final JPanel component=(JPanel)super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
      if (!hasMnemonic.get())       return component;
      final JPanel panelWithMnemonic=new JPanel(new BorderLayout());
      final int mnemonic=getMnemonic(value,itemsMap);
      final JLabel label=new JLabel("");
      if (mnemonic != -1) {
        label.setText(mnemonic + ".");
        label.setDisplayedMnemonicIndex(0);
      }
      label.setPreferredSize(new JLabel("8.").getPreferredSize());
      final JComponent leftRenderer=(JComponent)component.getComponents()[0];
      component.remove(leftRenderer);
      panelWithMnemonic.setBackground(leftRenderer.getBackground());
      label.setBackground(leftRenderer.getBackground());
      panelWithMnemonic.add(label,BorderLayout.WEST);
      panelWithMnemonic.add(leftRenderer,BorderLayout.CENTER);
      component.add(panelWithMnemonic);
      return component;
    }
  }
;
  final ListPopupImpl popup=new ListPopupImpl(new BaseListPopupStep<Object>(title,Arrays.asList(elements)){
    @Override public boolean isSpeedSearchEnabled(){
      return true;
    }
    @Override public PopupStep onChosen(    Object selectedValue,    boolean finalChoice){
      processor.process(selectedValue);
      return super.onChosen(selectedValue,finalChoice);
    }
  }
){
    @Override protected ListCellRenderer getListElementRenderer(){
      return renderer;
    }
  }
;
  popup.setMinimumSize(new Dimension(200,-1));
  for (  Object item : elements) {
    final int mnemonic=getMnemonic(item,itemsMap);
    if (mnemonic != -1) {
      final Action action=createNumberAction(mnemonic,popup,itemsMap,processor);
      popup.registerAction(mnemonic + "Action",KeyStroke.getKeyStroke(String.valueOf(mnemonic)),action);
      popup.registerAction(mnemonic + "Action",KeyStroke.getKeyStroke("NUMPAD" + String.valueOf(mnemonic)),action);
      hasMnemonic.set(true);
    }
  }
  return popup;
}
