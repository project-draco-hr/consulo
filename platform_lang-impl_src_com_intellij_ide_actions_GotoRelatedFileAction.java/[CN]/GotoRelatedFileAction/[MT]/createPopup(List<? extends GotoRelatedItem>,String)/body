{
  Object[] elements=new Object[items.size()];
  final Map<PsiElement,GotoRelatedItem> itemsMap=new HashMap<PsiElement,GotoRelatedItem>();
  for (int i=0; i < items.size(); i++) {
    GotoRelatedItem item=items.get(i);
    elements[i]=item.getElement() != null ? item.getElement() : item;
    itemsMap.put(item.getElement(),item);
  }
  return getPsiElementPopup(elements,new DefaultPsiElementCellRenderer(){
{
      setFocusBorderEnabled(false);
    }
    @Override public String getElementText(    PsiElement element){
      String customName=itemsMap.get(element).getCustomName();
      return customName != null ? customName : super.getElementText(element);
    }
    @Override protected Icon getIcon(    PsiElement element){
      Icon customIcon=itemsMap.get(element).getCustomIcon();
      return customIcon != null ? customIcon : super.getIcon(element);
    }
    @Override public String getContainerText(    PsiElement element,    String name){
      PsiFile file=element.getContainingFile();
      return file != null && !getElementText(element).equals(file.getName()) ? "(" + file.getName() + ")" : null;
    }
    @Override protected DefaultListCellRenderer getRightCellRenderer(){
      return null;
    }
    @Override protected boolean customizeNonPsiElementLeftRenderer(    ColoredListCellRenderer renderer,    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      final GotoRelatedItem item=(GotoRelatedItem)value;
      Color color=list.getForeground();
      final SimpleTextAttributes nameAttributes=new SimpleTextAttributes(Font.PLAIN,color);
      final String name=item.getCustomName();
      if (name == null)       return false;
      renderer.append(name,nameAttributes);
      renderer.setIcon(item.getCustomIcon());
      return true;
    }
  }
,title,new Processor<Object>(){
    @Override public boolean process(    Object element){
      if (element instanceof PsiElement) {
        itemsMap.get(element).navigate();
      }
 else {
        ((GotoRelatedItem)element).navigate();
      }
      return true;
    }
  }
);
}
