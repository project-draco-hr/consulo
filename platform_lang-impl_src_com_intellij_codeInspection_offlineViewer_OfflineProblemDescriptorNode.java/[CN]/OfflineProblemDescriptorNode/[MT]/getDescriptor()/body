{
  if (userObject == null)   return null;
  if (userObject instanceof CommonProblemDescriptor) {
    return (CommonProblemDescriptor)userObject;
  }
  final InspectionManager inspectionManager=InspectionManager.getInstance(myPresentation.getContext().getProject());
  final OfflineProblemDescriptor offlineProblemDescriptor=(OfflineProblemDescriptor)userObject;
  final RefEntity element=getElement();
  if (myToolWrapper instanceof LocalInspectionToolWrapper) {
    if (element instanceof RefElement) {
      final PsiElement psiElement=((RefElement)element).getElement();
      if (psiElement != null) {
        PsiFile containingFile=psiElement.getContainingFile();
        final ProblemsHolder holder=new ProblemsHolder(inspectionManager,containingFile,false);
        final LocalInspectionTool localTool=((LocalInspectionToolWrapper)myToolWrapper).getTool();
        final int startOffset=psiElement.getTextRange().getStartOffset();
        final int endOffset=psiElement.getTextRange().getEndOffset();
        LocalInspectionToolSession session=new LocalInspectionToolSession(containingFile,startOffset,endOffset);
        final PsiElementVisitor visitor=localTool.buildVisitor(holder,false,session);
        localTool.inspectionStarted(session,false);
        final PsiElement[] elementsInRange=getElementsIntersectingRange(containingFile,startOffset,endOffset);
        for (        PsiElement el : elementsInRange) {
          el.accept(visitor);
        }
        localTool.inspectionFinished(session,holder);
        if (holder.hasResults()) {
          final List<ProblemDescriptor> list=holder.getResults();
          final int idx=offlineProblemDescriptor.getProblemIndex();
          int curIdx=0;
          for (          ProblemDescriptor descriptor : list) {
            final PsiNamedElement member=localTool.getProblemElement(descriptor.getPsiElement());
            if (psiElement instanceof PsiFile || member != null && member.equals(psiElement)) {
              if (curIdx == idx) {
                setUserObject(descriptor);
                return descriptor;
              }
              curIdx++;
            }
          }
        }
      }
    }
    setUserObject(null);
    return null;
  }
  final List<String> hints=offlineProblemDescriptor.getHints();
  if (element instanceof RefElement) {
    final PsiElement psiElement=((RefElement)element).getElement();
    if (psiElement == null)     return null;
    ProblemDescriptor descriptor=inspectionManager.createProblemDescriptor(psiElement,offlineProblemDescriptor.getDescription(),(LocalQuickFix)null,ProblemHighlightType.GENERIC_ERROR_OR_WARNING,false);
    final LocalQuickFix[] quickFixes=getFixes(descriptor,hints);
    if (quickFixes != null) {
      descriptor=inspectionManager.createProblemDescriptor(psiElement,offlineProblemDescriptor.getDescription(),false,quickFixes,ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
    }
    setUserObject(descriptor);
    return descriptor;
  }
  CommonProblemDescriptor descriptor=inspectionManager.createProblemDescriptor(offlineProblemDescriptor.getDescription(),(QuickFix)null);
  final QuickFix[] quickFixes=getFixes(descriptor,hints);
  if (quickFixes != null) {
    descriptor=inspectionManager.createProblemDescriptor(offlineProblemDescriptor.getDescription(),quickFixes);
  }
  setUserObject(descriptor);
  return descriptor;
}
