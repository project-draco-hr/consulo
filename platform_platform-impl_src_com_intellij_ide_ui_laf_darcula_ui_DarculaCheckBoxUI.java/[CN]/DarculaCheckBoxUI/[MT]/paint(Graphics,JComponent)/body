{
  Graphics2D g=(Graphics2D)g2d;
  JCheckBox b=(JCheckBox)c;
  final ButtonModel model=b.getModel();
  final Dimension size=c.getSize();
  final Font font=c.getFont();
  g.setFont(font);
  FontMetrics fm=SwingUtilities2.getFontMetrics(c,g,font);
  Rectangle viewRect=new Rectangle(size);
  Rectangle iconRect=new Rectangle();
  Rectangle textRect=new Rectangle();
  Insets i=c.getInsets();
  viewRect.x+=i.left;
  viewRect.y+=i.top;
  viewRect.width-=(i.right + viewRect.x);
  viewRect.height-=(i.bottom + viewRect.y);
  String text=SwingUtilities.layoutCompoundLabel(c,fm,b.getText(),getDefaultIcon(),b.getVerticalAlignment(),b.getHorizontalAlignment(),b.getVerticalTextPosition(),b.getHorizontalTextPosition(),viewRect,iconRect,textRect,b.getIconTextGap());
  if (c.isOpaque()) {
    g.setColor(b.getBackground());
    g.fillRect(0,0,size.width,size.height);
  }
  final int x=iconRect.x + 3;
  final int y=iconRect.y + 3;
  final int w=iconRect.width - 6;
  final int h=iconRect.height - 6;
  final int u=1;
  g.translate(x,y);
  final GradientPaint paint=new GradientPaint(w / 2,0,b.getBackground().brighter(),w / 2,h,b.getBackground());
  g.setPaint(paint);
  g.fillRect(u,u,w - 2 * u,h - 2 * u);
  final GraphicsConfig config=new GraphicsConfig(g);
  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  g.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,RenderingHints.VALUE_STROKE_DEFAULT);
  final boolean armed=b.getModel().isArmed();
  if (c.hasFocus()) {
    g.setPaint(new GradientPaint(w / 2,1,armed ? Gray._100 : Gray._120,w / 2,h,armed ? Gray._55 : Gray._75));
    g.fillRoundRect(0,0,w - 2,h - 2,4,4);
    DarculaUIUtil.paintFocusRing(g,1,1,w - 2,h - 2);
  }
 else {
    g.setPaint(new GradientPaint(w / 2,1,Gray._110,w / 2,h,Gray._95));
    g.fillRoundRect(0,0,w,h,4,4);
    g.setPaint(new GradientPaint(w / 2,1,Gray._120.withAlpha(90),w / 2,h,Gray._105.withAlpha(90)));
    g.drawRoundRect(0,1,w,h - 1,4,4);
    g.setPaint(Gray._40.withAlpha(180));
    g.drawRoundRect(0,0,w,h - 1,4,4);
  }
  if (b.getModel().isSelected()) {
    g.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,RenderingHints.VALUE_STROKE_PURE);
    g.setStroke(new BasicStroke(u * 2.0f,BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND));
    g.setPaint(Gray._30);
    g.drawLine(4 * u,7 * u,7 * u,11 * u);
    g.drawLine(7 * u,11 * u,w,2 * u);
    g.setPaint(Gray._200);
    g.drawLine(4 * u,5 * u,7 * u,9 * u);
    g.drawLine(7 * u,9 * u,w,0);
  }
  g.translate(-x,-y);
  config.restore();
  if (text != null) {
    View view=(View)c.getClientProperty(BasicHTML.propertyKey);
    if (view != null) {
      view.paint(g,textRect);
    }
 else {
      g.setColor(model.isEnabled() ? b.getForeground() : getDisabledTextColor());
      SwingUtilities2.drawStringUnderlineCharAt(c,g,text,b.getDisplayedMnemonicIndex(),textRect.x,textRect.y + fm.getAscent());
    }
  }
}
