{
  Graphics2D g=(Graphics2D)g2d;
  JCheckBox b=(JCheckBox)c;
  final ButtonModel model=b.getModel();
  final Dimension size=c.getSize();
  final Font font=c.getFont();
  g.setFont(font);
  FontMetrics fm=SwingUtilities2.getFontMetrics(c,g,font);
  Rectangle viewRect=new Rectangle(size);
  Rectangle iconRect=new Rectangle();
  Rectangle textRect=new Rectangle();
  Insets i=c.getInsets();
  viewRect.x+=i.left;
  viewRect.y+=i.top;
  viewRect.width-=(i.right + viewRect.x);
  viewRect.height-=(i.bottom + viewRect.y);
  String text=SwingUtilities.layoutCompoundLabel(c,fm,b.getText(),getDefaultIcon(),b.getVerticalAlignment(),b.getHorizontalAlignment(),b.getVerticalTextPosition(),b.getHorizontalTextPosition(),viewRect,iconRect,textRect,b.getIconTextGap());
  if (c.isOpaque()) {
    g.setColor(b.getBackground());
    g.fillRect(0,0,size.width,size.height);
  }
  if (b.isSelected() && b.getSelectedIcon() != null) {
    b.getSelectedIcon().paintIcon(b,g,iconRect.x + 4,iconRect.y + 2);
  }
 else   if (!b.isSelected() && b.getIcon() != null) {
    b.getIcon().paintIcon(b,g,iconRect.x + 4,iconRect.y + 2);
  }
 else {
    final int x=iconRect.x + 3;
    final int y=iconRect.y + 3;
    final int w=iconRect.width - 6;
    final int h=iconRect.height - 6;
    g.translate(x,y);
    final Paint paint=UIUtil.getGradientPaint(w / 2,0,b.getBackground().brighter(),w / 2,h,b.getBackground());
    g.setPaint(paint);
    g.fillRect(1,1,w - 2,h - 2);
    final GraphicsConfig config=new GraphicsConfig(g);
    g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
    g.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,RenderingHints.VALUE_STROKE_DEFAULT);
    final boolean armed=b.getModel().isArmed();
    if (c.hasFocus()) {
      g.setPaint(UIUtil.getGradientPaint(w / 2,1,getFocusedBackgroundColor1(armed),w / 2,h,getFocusedBackgroundColor2(armed)));
      g.fillRoundRect(0,0,w - 2,h - 2,4,4);
      DarculaUIUtil.paintFocusRing(g,1,1,w - 2,h - 2);
    }
 else {
      g.setPaint(UIUtil.getGradientPaint(w / 2,1,getBackgroundColor1(),w / 2,h,getBackgroundColor2()));
      g.fillRoundRect(0,0,w,h - 1,4,4);
      g.setPaint(UIUtil.getGradientPaint(w / 2,1,getBorderColor1(b.isEnabled()),w / 2,h,getBorderColor2(b.isEnabled())));
      g.drawRoundRect(0,(UIUtil.isUnderDarcula() ? 1 : 0),w,h - 1,4,4);
      g.setPaint(getInactiveFillColor());
      g.drawRoundRect(0,0,w,h - 1,4,4);
    }
    if (b.getModel().isSelected()) {
      g.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,RenderingHints.VALUE_STROKE_PURE);
      g.setStroke(new BasicStroke(1 * 2.0f,BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND));
      g.setPaint(getShadowColor(b.isEnabled()));
      g.drawLine(4,7,7,11);
      g.drawLine(7,11,w,2);
      g.setPaint(getCheckSignColor(b.isEnabled()));
      g.drawLine(4,5,7,9);
      g.drawLine(7,9,w,0);
    }
    g.translate(-x,-y);
    config.restore();
  }
  if (text != null) {
    View view=(View)c.getClientProperty(BasicHTML.propertyKey);
    if (view != null) {
      view.paint(g,textRect);
    }
 else {
      g.setColor(model.isEnabled() ? b.getForeground() : getDisabledTextColor());
      SwingUtilities2.drawStringUnderlineCharAt(c,g,text,b.getDisplayedMnemonicIndex(),textRect.x,textRect.y + fm.getAscent());
    }
  }
}
