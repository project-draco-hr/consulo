{
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  int offset=getOffset(editor);
  PsiElement element=findTargetElement(project,editor,offset);
  if (element == null) {
    FeatureUsageTracker.getInstance().triggerFeatureUsed("navigation.goto.declaration");
    chooseAmbigousTarget(project,editor,offset);
    return;
  }
  if (element instanceof JspImplicitVariable) {
    final JspImplicitVariable variable=(JspImplicitVariable)element;
    element=variable.getDeclaration();
  }
  if (element == null)   return;
  FeatureUsageTracker.getInstance().triggerFeatureUsed("navigation.goto.declaration");
  PsiElement navElement=element.getNavigationElement();
  if (navElement == element && element instanceof PsiCompiledElement && element instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)element;
    if (method.isConstructor() && method.getParameterList().getParameters().length == 0) {
      PsiClass aClass=method.getContainingClass();
      PsiElement navClass=aClass.getNavigationElement();
      if (aClass != navClass)       navElement=navClass;
    }
  }
  PsiFile targetFile=navElement.getContainingFile();
  if (targetFile == null || targetFile.getVirtualFile() == null)   return;
  OpenFileDescriptor descriptor=new OpenFileDescriptor(project,targetFile.getVirtualFile(),navElement.getTextOffset());
  FileEditorManager.getInstance(project).openTextEditor(descriptor,true);
}
