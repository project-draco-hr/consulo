{
  PsiReference reference=TargetElementUtil.findReference(editor,offset);
  if (reference != null) {
    PsiElement parent=reference.getElement().getParent();
    if (parent instanceof PsiMethodCallExpression) {
      PsiMethodCallExpression callExpr=(PsiMethodCallExpression)parent;
      boolean allowStatics=false;
      PsiExpression qualifier=callExpr.getMethodExpression().getQualifierExpression();
      if (qualifier == null) {
        allowStatics=true;
      }
 else       if (qualifier instanceof PsiJavaCodeReferenceElement) {
        PsiElement referee=((PsiJavaCodeReferenceElement)qualifier).advancedResolve(true).getElement();
        if (referee instanceof PsiClass)         allowStatics=true;
      }
      PsiManager manager=PsiManager.getInstance(project);
      PsiResolveHelper helper=manager.getResolveHelper();
      PsiElement[] candidates=PsiUtil.mapElements(helper.getReferencedMethodCandidates(callExpr,false));
      ArrayList<PsiElement> methods=new ArrayList<PsiElement>();
      for (int i=0; i < candidates.length; i++) {
        PsiMethod candidate=(PsiMethod)candidates[i];
        if (candidate.hasModifierProperty(PsiModifier.STATIC) && !allowStatics)         continue;
        List<PsiMethod> supers=Arrays.asList(PsiSuperMethodUtil.findSuperMethods(candidate));
        if (supers.isEmpty()) {
          methods.add(candidate);
        }
 else {
          methods.addAll(supers);
        }
      }
      return methods.toArray(new PsiElement[methods.size()]);
    }
    if (reference instanceof PropertyReference) {
      List<Property> properties=((PropertyReference)reference).suggestProperties();
      return properties.toArray(new PsiElement[properties.size()]);
    }
 else     if (reference instanceof PsiMultipleTargetsReference) {
      return ((PsiMultipleTargetsReference)reference).multiResolve();
    }
  }
  return PsiElement.EMPTY_ARRAY;
}
