{
  Task.Backgroundable backgroundTask=new Task.Backgroundable(myProject,"Processing: " + myVirtualFilePointer.getFileName()){
    @Override public void run(    @NotNull ProgressIndicator indicator){
      try {
        final ExpandMacroToPathMap expandMacroToPathMap=createExpandMacroToPathMap();
        GeneralCommandLine commandLine=new GeneralCommandLine();
        commandLine.setExePath(myParameters.getExePath());
        String programParameters=myParameters.getProgramParameters();
        if (programParameters != null) {
          commandLine.addParameters(StringUtil.split(expandMacroToPathMap.substitute(programParameters,false)," "));
        }
        commandLine.setWorkDirectory(expandMacroToPathMap.substitute(myParameters.getWorkingDirectory(),false));
        commandLine.setPassParentEnvironment(myParameters.isPassParentEnvs());
        commandLine.getEnvironment().putAll(myParameters.getEnvs());
        final Ref<Boolean> b=new Ref<Boolean>(false);
        final TextConsoleBuilder consoleBuilder=TextConsoleBuilderFactory.getInstance().createBuilder(myProject);
        OSProcessHandler processHandler=new OSProcessHandler(commandLine.createProcess());
        consoleBuilder.getConsole().attachToProcess(processHandler);
        processHandler.addProcessListener(new ProcessAdapter(){
          @Override public void processTerminated(          ProcessEvent event){
            myProgress.set(false);
            String outPath=myParameters.getOutPath();
            if (outPath == null) {
              return;
            }
            String substitute=expandMacroToPathMap.substitute(outPath,false);
            final VirtualFile fileByPath=LocalFileSystem.getInstance().findFileByPath(substitute);
            if (fileByPath != null) {
              new WriteAction<Object>(){
                @Override protected void run(                Result<Object> result) throws Throwable {
                  fileByPath.refresh(false,true);
                }
              }
.execute();
            }
          }
          @Override public void onTextAvailable(          ProcessEvent event,          Key outputType){
            if (outputType == ProcessOutputTypes.STDERR && !b.get()) {
              UIUtil.invokeLaterIfNeeded(new Runnable(){
                @Override public void run(){
                  ContentManager contentManager=MessageView.SERVICE.getInstance(myProject).getContentManager();
                  Content content=ContentFactory.SERVICE.getInstance().createContent(consoleBuilder.getConsole().getComponent(),myProviderName,false);
                  contentManager.addContent(content);
                }
              }
);
            }
          }
        }
);
        processHandler.startNotify();
      }
 catch (      ExecutionException e) {
        LOGGER.error(e);
      }
    }
  }
;
  backgroundTask.queue();
}
