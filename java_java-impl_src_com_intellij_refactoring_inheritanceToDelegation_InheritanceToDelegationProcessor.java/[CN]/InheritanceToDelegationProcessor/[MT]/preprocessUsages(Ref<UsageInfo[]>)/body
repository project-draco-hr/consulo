{
  final UsageInfo[] usagesIn=refUsages.get();
  ArrayList<UsageInfo> oldUsages=new ArrayList<UsageInfo>();
  addAll(oldUsages,usagesIn);
  final ObjectUpcastedUsageInfo[] objectUpcastedUsageInfos=objectUpcastedUsages(usagesIn);
  if (myPrepareSuccessfulSwingThreadCallback != null) {
    MultiMap<PsiElement,String> conflicts=new MultiMap<PsiElement,String>();
    if (objectUpcastedUsageInfos.length > 0) {
      final String message=RefactoringBundle.message("instances.of.0.upcasted.to.1.were.found",RefactoringUIUtil.getDescription(myClass,true),CommonRefactoringUtil.htmlEmphasize(CommonClassNames.JAVA_LANG_OBJECT));
      conflicts.putValue(myClass,message);
    }
    analyzeConflicts(usagesIn,conflicts);
    if (!conflicts.isEmpty()) {
      ConflictsDialog conflictsDialog=prepareConflictsDialog(conflicts,usagesIn);
      conflictsDialog.show();
      if (!conflictsDialog.isOK()) {
        if (conflictsDialog.isShowConflicts())         prepareSuccessful();
        return false;
      }
    }
    if (objectUpcastedUsageInfos.length > 0) {
      showObjectUpcastedUsageView(objectUpcastedUsageInfos);
      setPreviewUsages(true);
    }
  }
  ArrayList<UsageInfo> filteredUsages=filterUsages(oldUsages);
  refUsages.set(filteredUsages.toArray(new UsageInfo[filteredUsages.size()]));
  prepareSuccessful();
  return true;
}
