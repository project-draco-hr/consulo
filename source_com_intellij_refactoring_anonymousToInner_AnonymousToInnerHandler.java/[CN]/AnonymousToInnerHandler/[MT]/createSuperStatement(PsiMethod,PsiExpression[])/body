{
  PsiCodeBlock body=constructor.getBody();
  final PsiElementFactory factory=constructor.getManager().getElementFactory();
  PsiStatement statement=factory.createStatementFromText("super();",null);
  statement=(PsiStatement)CodeStyleManager.getInstance(myProject).reformat(statement);
  statement=(PsiStatement)body.add(statement);
  PsiMethodCallExpression methodCall=(PsiMethodCallExpression)((PsiExpressionStatement)statement).getExpression();
  PsiExpressionList exprList=methodCall.getArgumentList();
{
    final PsiThisExpression qualifiedThis=(PsiThisExpression)factory.createExpressionFromText("A.this",null);
    final PsiJavaCodeReferenceElement targetClassRef=factory.createClassReferenceElement(myTargetClass);
    qualifiedThis.getQualifier().replace(targetClassRef);
    for (int idx=0; idx < paramExpressions.length; idx++) {
      PsiExpression expr=paramExpressions[idx];
      ChangeContextUtil.encodeContextInfo(expr,true);
      final PsiElement newExpr=exprList.add(expr);
      ChangeContextUtil.decodeContextInfo(newExpr,myTargetClass,qualifiedThis);
    }
  }
class SupersConvertor extends PsiRecursiveElementVisitor {
    public void visitThisExpression(    PsiThisExpression expression){
      try {
        final PsiThisExpression qualifiedThis=(PsiThisExpression)factory.createExpressionFromText("A.this",null);
        final PsiJavaCodeReferenceElement targetClassRef=factory.createClassReferenceElement(myTargetClass);
        qualifiedThis.getQualifier().replace(targetClassRef);
        expression.replace(qualifiedThis);
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
    }
    public void visitReferenceExpression(    PsiReferenceExpression expression){
    }
  }
  final SupersConvertor supersConvertor=new SupersConvertor();
  methodCall.getArgumentList().accept(supersConvertor);
}
