{
  PsiBuilder.Marker declStartMarker=builder.mark();
  if (ParserUtils.getToken(builder,kDEF)) {
    if (parseNextTokenInDeclaration(builder)) {
      declStartMarker.rollbackTo();
      return true;
    }
 else {
      declStartMarker.rollbackTo();
      return false;
    }
  }
  if (Modifiers.parse(builder)) {
    if (parseNextTokenInDeclaration(builder)) {
      declStartMarker.rollbackTo();
      return true;
    }
 else {
      declStartMarker.rollbackTo();
      return false;
    }
  }
  if (ParserUtils.getToken(builder,mAT)) {
    declStartMarker.rollbackTo();
    return builder.getTokenType() == mIDENT;
  }
  if (UpperCaseIdent.parse(builder) || !WRONGWAY.equals(BuiltInType.parse(builder)) || !WRONGWAY.equals(QualifiedTypeName.parse(builder))) {
    IElementType balancedTokens;
    do {
      balancedTokens=parseBalancedTokensInBrackets(builder);
    }
 while (!NONE.equals(balancedTokens) && !WRONGWAY.equals(balancedTokens));
    if (ParserUtils.getToken(builder,mIDENT) && !ParserUtils.getToken(builder,mDOT)) {
      declStartMarker.rollbackTo();
      return true;
    }
 else {
      declStartMarker.rollbackTo();
      return false;
    }
  }
 else {
    declStartMarker.rollbackTo();
    return false;
  }
}
