{
  TextRange range=element.getTextRange();
  if (range.getLength() > 0) {
    final HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,range,element.getErrorDescription());
    for (    ErrorQuickFixProvider provider : Extensions.getExtensions(ErrorQuickFixProvider.EP_NAME)) {
      provider.registerErrorQuickFix(element,highlightInfo);
    }
    return highlightInfo;
  }
  int offset=range.getStartOffset();
  PsiFile containingFile=element.getContainingFile();
  int fileLength=containingFile.getTextLength();
  FileViewProvider viewProvider=containingFile.getViewProvider();
  PsiElement elementAtOffset=viewProvider.findElementAt(offset,viewProvider.getBaseLanguage());
  String text=elementAtOffset == null ? null : elementAtOffset.getText();
  HighlightInfo info;
  if (offset < fileLength && text != null && !StringUtil.startsWithChar(text,'\n') && !StringUtil.startsWithChar(text,'\r')) {
    int start=offset;
    PsiElement prevElement=containingFile.findElementAt(offset - 1);
    int end=offset + 1;
    info=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,start,end,element.getErrorDescription());
    info.navigationShift=offset - start;
  }
 else {
    int start;
    int end;
    if (offset > 0) {
      start=offset;
      end=offset;
    }
 else {
      start=offset;
      end=offset < fileLength ? offset + 1 : offset;
    }
    info=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,element,start,end,element.getErrorDescription(),element.getErrorDescription(),true,null);
  }
  return info;
}
