{
  File base=path.isDirectory() ? path : path.getParentFile();
  base=correctUpToExistingParent(base);
  if (base == null) {
    throw new SVNException(SVNErrorMessage.create(SVNErrorCode.IO_ERROR),new RuntimeException("Can not find existing parent file"));
  }
  final SvnSimpleCommand command=new SvnSimpleCommand(myProject,base,SvnCommandName.info);
  if (depth != null) {
    command.addParameters("--depth",depth.getName());
  }
  if (revision != null && !SVNRevision.UNDEFINED.equals(revision) && !SVNRevision.WORKING.equals(revision)) {
    command.addParameters("-r",revision.toString());
  }
  command.addParameters("--xml");
  SvnCommandLineStatusClient.changelistsToCommand(changeLists,command);
  if (pegRevision != null && !SVNRevision.UNDEFINED.equals(pegRevision) && !SVNRevision.WORKING.equals(pegRevision)) {
    command.addParameters(path.getPath() + "@" + pegRevision.toString());
  }
 else {
    command.addParameters(path.getPath());
  }
  final SvnInfoHandler[] infoHandler=new SvnInfoHandler[1];
  infoHandler[0]=new SvnInfoHandler(base,new Consumer<SVNInfo>(){
    @Override public void consume(    SVNInfo info){
      try {
        handler.handleInfo(info);
      }
 catch (      SVNException e) {
        throw new SvnExceptionWrapper(e);
      }
    }
  }
);
  try {
    final String result=command.run();
    SAXParser parser=SAXParserFactory.newInstance().newSAXParser();
    parser.parse(new StringBufferInputStream(result),infoHandler[0]);
  }
 catch (  SvnExceptionWrapper e) {
    throw (SVNException)e.getCause();
  }
catch (  IOException e) {
    throw new SVNException(SVNErrorMessage.create(SVNErrorCode.IO_ERROR),e);
  }
catch (  ParserConfigurationException e) {
    throw new SVNException(SVNErrorMessage.create(SVNErrorCode.IO_ERROR),e);
  }
catch (  SAXException e) {
    throw new SVNException(SVNErrorMessage.create(SVNErrorCode.IO_ERROR),e);
  }
catch (  VcsException e) {
    final String text=e.getMessage();
    if (!StringUtil.isEmptyOrSpaces(text) && text.contains("W155010")) {
      return;
    }
    throw new SVNException(SVNErrorMessage.create(SVNErrorCode.IO_ERROR),e);
  }
}
