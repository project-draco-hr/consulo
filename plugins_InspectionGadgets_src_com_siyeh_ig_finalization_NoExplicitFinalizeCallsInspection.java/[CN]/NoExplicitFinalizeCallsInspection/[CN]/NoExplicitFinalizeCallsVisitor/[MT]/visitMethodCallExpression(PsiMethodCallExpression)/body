{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  if (methodExpression == null) {
    return;
  }
  final String methodName=methodExpression.getReferenceName();
  if (!HardcodedMethodConstants.FINALIZE.equals(methodName)) {
    return;
  }
  final PsiExpressionList argumentList=expression.getArgumentList();
  if (argumentList == null) {
    return;
  }
  if (argumentList.getExpressions().length != 0) {
    return;
  }
  final PsiMethod containingMethod=PsiTreeUtil.getParentOfType(expression,PsiMethod.class);
  if (containingMethod == null) {
    return;
  }
  final String containingMethodName=containingMethod.getName();
  final PsiParameterList parameterList=containingMethod.getParameterList();
  if (HardcodedMethodConstants.FINALIZE.equals(containingMethodName) && parameterList.getParameters().length == 0) {
    return;
  }
  registerMethodCallError(expression);
}
