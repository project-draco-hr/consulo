{
  JPanel north=new JPanel(new BorderLayout());
  north.add(myBox,BorderLayout.NORTH);
  setLayout(new BorderLayout());
  add(north,BorderLayout.WEST);
  myEnabled=new JCheckBox("Enable Quick Access");
  myEnabled.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      myQaEnabled=myEnabled.isSelected();
      processEnabled();
    }
  }
);
  myBox.add(myEnabled);
  VerticalBox kbConfig=new VerticalBox();
  JPanel modifiers=new JPanel(new FlowLayout(FlowLayout.CENTER)){
    @Override public Dimension getPreferredSize(){
      Dimension size=super.getPreferredSize();
      size.width*=1.5;
      return size;
    }
  }
;
  myCtrl=new ModifierBox("control",KeyEvent.getKeyModifiersText(KeyEvent.CTRL_MASK));
  myAlt=new ModifierBox("alt",KeyEvent.getKeyModifiersText(KeyEvent.ALT_MASK));
  myShift=new ModifierBox("shift",KeyEvent.getKeyModifiersText(KeyEvent.SHIFT_MASK));
  myMeta=new ModifierBox("meta",KeyEvent.getKeyModifiersText(KeyEvent.META_MASK));
  modifiers.add(new JLabel("Modifiers:"));
  modifiers.add(myCtrl);
  modifiers.add(myAlt);
  modifiers.add(myShift);
  if (SystemInfo.isMac) {
    modifiers.add(myMeta);
  }
  JPanel hold=new JPanel(new FlowLayout(FlowLayout.CENTER));
  hold.add(new JLabel("Hold time:"));
  myHoldTime=new JFormattedTextField(NumberFormat.getIntegerInstance());
  myHoldTime.setColumns(5);
  myHoldTime.setHorizontalAlignment(JTextField.RIGHT);
  myHoldTime.getDocument().addDocumentListener(new DocumentAdapter(){
    @Override protected void textChanged(    DocumentEvent e){
      String txt=myHoldTime.getText();
      if (txt != null) {
        try {
          Integer value=Integer.valueOf(txt);
          myDelay=value.intValue();
        }
 catch (        NumberFormatException e1) {
        }
      }
    }
  }
);
  hold.add(myHoldTime);
  hold.add(new JLabel("ms"));
  kbConfig.add(modifiers);
  kbConfig.add(hold);
  kbConfig.setBorder(new TitledBorder("Keyboard Configuration"));
  myBox.add(kbConfig);
  myConflicts=new JPanel();
  myBox.add(myConflicts);
  updateConflicts();
}
