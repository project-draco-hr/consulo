{
  JPanel north=new JPanel(new BorderLayout()){
    @Override public Dimension getMaximumSize(){
      return super.getPreferredSize();
    }
  }
;
  north.add(myBox,BorderLayout.NORTH);
  setLayout(new BorderLayout());
  add(north,BorderLayout.WEST);
  myEnabled=new JCheckBox("Enable Quick Access");
  myEnabled.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      myQaEnabled=myEnabled.isSelected();
      processEnabled();
    }
  }
);
  myBox.add(myEnabled);
  VerticalBox kbConfig=new VerticalBox();
  JPanel modifiers=new JPanel(new FlowLayout(FlowLayout.CENTER));
  myCtrl=new ModifierBox("control","Control");
  myAlt=new ModifierBox("alt","Alt");
  myShift=new ModifierBox("shift","Shift");
  myMeta=new ModifierBox("meta","Meta");
  modifiers.add(new JLabel("Modifiers:"));
  modifiers.add(myCtrl);
  modifiers.add(myAlt);
  modifiers.add(myShift);
  if (SystemInfo.isMac) {
    modifiers.add(myMeta);
  }
  JPanel hold=new JPanel(new FlowLayout(FlowLayout.CENTER));
  hold.add(new JLabel("Hold time:"));
  myHoldTime=new JFormattedTextField(NumberFormat.getIntegerInstance());
  myHoldTime.getDocument().addDocumentListener(new DocumentAdapter(){
    @Override protected void textChanged(    DocumentEvent e){
      String txt=myHoldTime.getText();
      if (txt != null) {
        try {
          Integer value=Integer.valueOf(txt);
          myDelay=value.intValue();
        }
 catch (        NumberFormatException e1) {
        }
      }
    }
  }
);
  hold.add(myHoldTime);
  hold.add(new JLabel("ms"));
  kbConfig.add(modifiers);
  kbConfig.add(hold);
  kbConfig.setBorder(new TitledBorder("Keyboard Configuration"));
  myBox.add(kbConfig);
  myConflicts=new VerticalBox();
  myBox.add(myConflicts);
}
