{
  final Map<Key,Set<Value>> oldData=oldContent != null ? processInput(oldContent) : Collections.<Key,Set<Value>>emptyMap();
  final Map<Key,Set<Value>> data=content != null ? processInput(content) : Collections.<Key,Set<Value>>emptyMap();
  final Set<Key> allKeys=new HashSet<Key>(oldData.size() + data.size());
  allKeys.addAll(oldData.keySet());
  allKeys.addAll(data.keySet());
  if (allKeys.size() > 0) {
    for (    Key key : allKeys) {
      final Set<Value> oldValues=oldData.get(key);
      final Lock writeLock=getWriteLock();
      if (oldValues != null && oldValues.size() > 0) {
        writeLock.lock();
        try {
          for (          Value oldValue : oldValues) {
            myStorage.removeValue(key,inputId,oldValue);
          }
        }
  finally {
          writeLock.unlock();
        }
      }
      final Set<Value> newValues=data.get(key);
      if (newValues != null) {
        writeLock.lock();
        try {
          for (          Value value : newValues) {
            myStorage.addValue(key,inputId,value);
          }
        }
  finally {
          writeLock.unlock();
        }
      }
    }
    scheduleFlush();
  }
}
