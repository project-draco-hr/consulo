{
  PsiFile file=aClass.getContainingFile();
  PsiDirectory newDirectory=moveDestination.getTargetDirectory(file);
  PsiClass newClass;
  if (file instanceof PsiJavaFile && ((PsiJavaFile)file).getClasses().length > 1) {
    correctSelfReferences(aClass,newDirectory.getPackage());
    final PsiClass created=newDirectory.createClass(aClass.getName());
    if (aClass.getDocComment() == null && created.getDocComment() != null) {
      aClass.addAfter(created.getDocComment(),null);
    }
    newClass=(PsiClass)created.replace(aClass);
    aClass.delete();
  }
 else {
    newClass=aClass;
    if (!newDirectory.equals(file.getContainingDirectory())) {
      aClass.getManager().moveFile(file,newDirectory);
      if (file instanceof PsiJavaFile) {
        setPackageStatement((PsiJavaFile)file,newDirectory.getPackage());
      }
    }
  }
  if (!newDirectory.equals(file.getContainingDirectory())) {
    for (int i=0; i < usages.length; i++) {
      MoveRenameUsageInfo usage=(MoveRenameUsageInfo)usages[i];
      if (usage.getElement() == null)       continue;
      PsiReference reference=usage.reference;
      if (reference != null) {
        PsiElement parent=reference.getElement().getParent();
        if (parent instanceof PsiImportStatement) {
          if (parent.getContainingFile().getContainingDirectory().equals(newDirectory)) {
            parent.delete();
            continue;
          }
        }
        reference.bindToElement(newClass);
      }
    }
  }
  return newClass;
}
