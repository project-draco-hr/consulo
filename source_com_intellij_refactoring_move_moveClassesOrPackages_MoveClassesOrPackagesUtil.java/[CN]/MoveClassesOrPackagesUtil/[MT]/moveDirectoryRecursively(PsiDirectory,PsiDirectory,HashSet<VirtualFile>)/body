{
  final PsiManager manager=dir.getManager();
  final VirtualFile destVFile=destination.getVirtualFile();
  final VirtualFile sourceVFile=dir.getVirtualFile();
  if (movedPaths.contains(sourceVFile))   return;
  String targetName=dir.getName();
  final PsiPackage aPackage=dir.getPackage();
  if (aPackage != null) {
    final String sourcePackageName=aPackage.getName();
    if (!targetName.equals(sourcePackageName)) {
      targetName=sourcePackageName;
    }
  }
  final PsiDirectory subdirectoryInDest;
  final boolean isSourceRoot=RefactoringUtil.isSourceRoot(dir);
  if (VfsUtil.isAncestor(sourceVFile,destVFile,false) || isSourceRoot) {
    PsiDirectory exitsingSubdir=destination.findSubdirectory(targetName);
    if (exitsingSubdir == null) {
      subdirectoryInDest=destination.createSubdirectory(targetName);
      movedPaths.add(subdirectoryInDest.getVirtualFile());
    }
 else {
      subdirectoryInDest=exitsingSubdir;
    }
  }
 else {
    subdirectoryInDest=destination.findSubdirectory(targetName);
  }
  if (subdirectoryInDest == null) {
    VirtualFile virtualFile=dir.getVirtualFile();
    manager.moveDirectory(dir,destination);
    movedPaths.add(virtualFile);
  }
 else {
    final PsiFile[] files=dir.getFiles();
    for (int i=0; i < files.length; i++) {
      PsiFile file=files[i];
      try {
        subdirectoryInDest.checkAdd(file);
      }
 catch (      IncorrectOperationException e) {
        continue;
      }
      manager.moveFile(file,subdirectoryInDest);
    }
    final PsiDirectory[] subdirectories=dir.getSubdirectories();
    for (int i=0; i < subdirectories.length; i++) {
      PsiDirectory subdirectory=subdirectories[i];
      if (!subdirectory.equals(subdirectoryInDest)) {
        moveDirectoryRecursively(subdirectory,subdirectoryInDest,movedPaths);
      }
    }
    if (!isSourceRoot && dir.getFiles().length == 0 && dir.getSubdirectories().length == 0) {
      dir.delete();
    }
  }
}
