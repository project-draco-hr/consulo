{
  final Context context=isAnnotation ? Context.ANNOTATION_INTERFACE : Context.CLASS;
  PsiBuilder.Marker invalidElements=null;
  while (true) {
    final IElementType tokenType=builder.getTokenType();
    if (tokenType == null || tokenType == JavaTokenType.RBRACE)     break;
    if (tokenType == JavaTokenType.SEMICOLON) {
      if (invalidElements != null) {
        invalidElements.error(JavaErrorMessages.message("unexpected.token"));
        invalidElements=null;
      }
      builder.advanceLexer();
      continue;
    }
    final PsiBuilder.Marker declaration=parse(builder,context);
    if (declaration != null) {
      if (invalidElements != null) {
        invalidElements.errorBefore(JavaErrorMessages.message("unexpected.token"),declaration);
        invalidElements=null;
      }
      continue;
    }
    if (invalidElements == null) {
      invalidElements=builder.mark();
    }
    final PsiBuilder.Marker ref=myReferenceParser.parseJavaCodeReference(builder,true,true,false,false,false);
    if (ref == null) {
      builder.advanceLexer();
    }
  }
  if (invalidElements != null) {
    invalidElements.error(JavaErrorMessages.message("unexpected.token"));
  }
}
