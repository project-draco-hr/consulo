{
  final PsiBuilder.Marker param=builder.mark();
  final Pair<PsiBuilder.Marker,Boolean> modListInfo=parseModifierList(builder);
  ReferenceParser.TypeInfo typeInfo=null;
  if (typed) {
    int flags=ReferenceParser.EAT_LAST_DOT | ReferenceParser.WILDCARD;
    if (ellipsis)     flags|=ReferenceParser.ELLIPSIS;
    if (disjunctiveType)     flags|=ReferenceParser.DISJUNCTIONS;
    typeInfo=myParser.getReferenceParser().parseTypeInfo(builder,flags);
    if (typeInfo == null) {
      if (modListInfo.second) {
        param.rollbackTo();
        return null;
      }
 else {
        error(builder,JavaErrorMessages.message("expected.type"));
        emptyElement(builder,JavaElementType.TYPE);
      }
    }
  }
  if (expect(builder,JavaTokenType.IDENTIFIER)) {
    if (!resource) {
      eatBrackets(builder,typeInfo != null && typeInfo.isVarArg,"expected.rparen");
      done(param,JavaElementType.PARAMETER);
      return param;
    }
  }
 else {
    error(builder,JavaErrorMessages.message("expected.identifier"));
    param.drop();
    return modListInfo.first;
  }
  if (expectOrError(builder,JavaTokenType.EQ,"expected.eq")) {
    if (myParser.getExpressionParser().parse(builder) == null) {
      error(builder,JavaErrorMessages.message("expected.expression"));
    }
  }
  done(param,JavaElementType.RESOURCE_VARIABLE);
  return param;
}
