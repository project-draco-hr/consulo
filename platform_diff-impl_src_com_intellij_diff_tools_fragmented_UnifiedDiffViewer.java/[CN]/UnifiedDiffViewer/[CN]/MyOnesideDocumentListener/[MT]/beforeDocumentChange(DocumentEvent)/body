{
  if (myDuringOnesideDocumentModification)   return;
  if (myChangedBlockData == null) {
    LOG.warn("oneside beforeDocumentChange - myChangedBlockData == null");
    return;
  }
  try {
    myDuringTwosideDocumentModification=true;
    Document twosideDocument=getDocument(myMasterSide);
    LineCol onesideStartPosition=LineCol.fromOffset(myDocument,e.getOffset());
    LineCol onesideEndPosition=LineCol.fromOffset(myDocument,e.getOffset() + e.getOldLength());
    int line1=onesideStartPosition.line;
    int line2=onesideEndPosition.line + 1;
    int shift=DiffUtil.countLinesShift(e);
    int twosideStartLine=transferLineFromOnesideStrict(myMasterSide,onesideStartPosition.line);
    int twosideEndLine=transferLineFromOnesideStrict(myMasterSide,onesideEndPosition.line);
    if (twosideStartLine == -1 || twosideEndLine == -1) {
      logDebugInfo(e,onesideStartPosition,onesideEndPosition,twosideStartLine,twosideEndLine);
      markSuppressEditorTyping();
      return;
    }
    int twosideStartOffset=twosideDocument.getLineStartOffset(twosideStartLine) + onesideStartPosition.column;
    int twosideEndOffset=twosideDocument.getLineStartOffset(twosideEndLine) + onesideEndPosition.column;
    twosideDocument.replaceString(twosideStartOffset,twosideEndOffset,e.getNewFragment());
    for (    UnifiedDiffChange change : myChangedBlockData.getDiffChanges()) {
      change.processChange(line1,line2,shift);
    }
    LineNumberConvertor lineNumberConvertor=myChangedBlockData.getLineNumberConvertor();
    lineNumberConvertor.handleOnesideChange(line1,line2,shift,myMasterSide);
  }
  finally {
    markStateIsOutOfDate();
    myFoldingModel.onDocumentChanged(e);
    scheduleRediff();
    myDuringTwosideDocumentModification=false;
  }
}
