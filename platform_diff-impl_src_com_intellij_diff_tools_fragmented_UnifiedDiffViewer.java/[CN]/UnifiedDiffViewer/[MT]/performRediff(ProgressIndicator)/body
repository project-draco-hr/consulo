{
  try {
    indicator.checkCanceled();
    final Document document1=getContent1().getDocument();
    final Document document2=getContent2().getDocument();
    final CharSequence[] texts=ApplicationManager.getApplication().runReadAction(new Computable<CharSequence[]>(){
      @Override public CharSequence[] compute(){
        return new CharSequence[]{document1.getImmutableCharSequence(),document2.getImmutableCharSequence()};
      }
    }
);
    final boolean innerFragments=getDiffConfig().innerFragments;
    final List<LineFragment> fragments=DiffUtil.compare(texts[0],texts[1],getDiffConfig(),indicator);
    final DocumentContent content1=getContent1();
    final DocumentContent content2=getContent2();
    indicator.checkCanceled();
    TwosideDocumentData data=ApplicationManager.getApplication().runReadAction(new Computable<TwosideDocumentData>(){
      @Override public TwosideDocumentData compute(){
        indicator.checkCanceled();
        UnifiedFragmentBuilder builder=new UnifiedFragmentBuilder(fragments,document1,document2,myMasterSide);
        builder.exec();
        indicator.checkCanceled();
        EditorHighlighter highlighter=buildHighlighter(myProject,content1,content2,texts[0],texts[1],builder.getRanges(),builder.getText().length());
        UnifiedEditorRangeHighlighter rangeHighlighter=new UnifiedEditorRangeHighlighter(myProject,document1,document2,builder.getRanges());
        return new TwosideDocumentData(builder,highlighter,rangeHighlighter);
      }
    }
);
    UnifiedFragmentBuilder builder=data.getBuilder();
    FileType fileType=content2.getContentType() == null ? content1.getContentType() : content2.getContentType();
    LineNumberConvertor convertor=builder.getConvertor();
    List<LineRange> changedLines=builder.getChangedLines();
    boolean isEqual=builder.isEqual();
    CombinedEditorData editorData=new CombinedEditorData(builder.getText(),data.getHighlighter(),data.getRangeHighlighter(),fileType,convertor.createConvertor1(),convertor.createConvertor2());
    return apply(editorData,builder.getBlocks(),convertor,changedLines,isEqual,innerFragments);
  }
 catch (  DiffTooBigException e) {
    return new Runnable(){
      @Override public void run(){
        clearDiffPresentation();
        myPanel.setTooBigContent();
      }
    }
;
  }
catch (  ProcessCanceledException e) {
    throw e;
  }
catch (  Throwable e) {
    LOG.error(e);
    return new Runnable(){
      @Override public void run(){
        clearDiffPresentation();
        myPanel.setErrorContent();
      }
    }
;
  }
}
