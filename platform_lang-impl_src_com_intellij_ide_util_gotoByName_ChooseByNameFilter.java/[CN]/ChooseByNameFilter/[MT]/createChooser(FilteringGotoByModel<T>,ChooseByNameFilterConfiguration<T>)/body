{
  List<T> elements=new ArrayList<T>(getAllFilterValues());
  final ElementsChooser<T> chooser=new ElementsChooser<T>(elements,true){
    @Override protected String getItemText(    @NotNull final T value){
      return textForFilterValue(value);
    }
    @Override protected Icon getItemIcon(    @NotNull final T value){
      return iconForFilterValue(value);
    }
  }
;
  chooser.setFocusable(false);
  final int count=chooser.getElementCount();
  for (int i=0; i < count; i++) {
    T type=chooser.getElementAt(i);
    if (!DumbService.getInstance(myProject).isDumb() && !filterConfiguration.isFileTypeVisible(type)) {
      chooser.setElementMarked(type,false);
    }
  }
  updateModel(model,chooser,true);
  chooser.addElementsMarkListener(new ElementsChooser.ElementsMarkListener<T>(){
    @Override public void elementMarkChanged(    final T element,    final boolean isMarked){
      filterConfiguration.setVisible(element,isMarked);
      updateModel(model,chooser,false);
    }
  }
);
  return chooser;
}
