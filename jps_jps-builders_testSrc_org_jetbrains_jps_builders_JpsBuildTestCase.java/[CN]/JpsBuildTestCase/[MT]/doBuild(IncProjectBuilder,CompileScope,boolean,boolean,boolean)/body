{
  final List<BuildMessage> errorMessages=new ArrayList<BuildMessage>();
  final List<BuildMessage> infoMessages=new ArrayList<BuildMessage>();
  builder.addMessageHandler(new MessageHandler(){
    @Override public void processMessage(    BuildMessage msg){
      if (msg.getKind() == BuildMessage.Kind.ERROR) {
        errorMessages.add(msg);
      }
 else {
        infoMessages.add(msg);
      }
    }
  }
);
  try {
    builder.build(scope,isMake,isRebuild,false);
  }
 catch (  RebuildRequestedException e) {
    Assert.fail(e.getMessage());
  }
  if (shouldFail) {
    Assert.assertFalse("Build not failed as expected",errorMessages.isEmpty());
  }
 else {
    final Function<BuildMessage,String> toStringFunction=StringUtil.createToStringFunction(BuildMessage.class);
    Assert.assertTrue("Build failed. \nErrors:\n" + StringUtil.join(errorMessages,toStringFunction,"\n") + "\nInfo messages:\n"+ StringUtil.join(infoMessages,toStringFunction,"\n"),errorMessages.isEmpty());
  }
}
