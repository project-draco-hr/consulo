{
  if (myRecommendedWidth <= 0) {
    int n=Math.min(SAMPLE_SIZE,myLinearGraph.nodesCount());
    double sum=0;
    double sumSquares=0;
    int edgesCount=0;
    Set<NormalEdge> currentNormalEdges=ContainerUtil.newHashSet();
    for (int i=0; i < n; i++) {
      List<GraphEdge> adjacentEdges=myLinearGraph.getAdjacentEdges(i,EdgeFilter.ALL);
      int upArrows=0;
      int downArrows=0;
      for (      GraphEdge e : adjacentEdges) {
        NormalEdge normalEdge=asNormalEdge(e);
        if (normalEdge != null) {
          if (isEdgeUp(e,i)) {
            currentNormalEdges.remove(normalEdge);
          }
 else {
            currentNormalEdges.add(normalEdge);
          }
        }
 else {
          if (e.getType() == GraphEdgeType.DOTTED_ARROW_UP) {
            upArrows++;
          }
 else {
            downArrows++;
          }
        }
      }
      int newEdgesCount=0;
      for (      NormalEdge e : currentNormalEdges) {
        if (isEdgeVisibleInRow(e,i)) {
          newEdgesCount++;
        }
 else {
          RowElementType arrow=getArrowType(e,i);
          if (arrow == RowElementType.DOWN_ARROW) {
            downArrows++;
          }
 else           if (arrow == RowElementType.UP_ARROW) {
            upArrows++;
          }
        }
      }
      int width=Math.max(edgesCount + upArrows,newEdgesCount + downArrows);
      sum+=width;
      sumSquares+=width * width;
      edgesCount=newEdgesCount;
    }
    double average=sum / n;
    double deviation=Math.sqrt(sumSquares / n - average * average);
    myRecommendedWidth=(int)Math.round(average + deviation);
  }
  return myRecommendedWidth;
}
