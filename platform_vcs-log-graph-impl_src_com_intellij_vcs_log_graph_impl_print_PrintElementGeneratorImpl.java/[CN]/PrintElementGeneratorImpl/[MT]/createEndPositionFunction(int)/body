{
  List<GraphElement> visibleElementsInNextRow=getSortedVisibleElementsInRow(visibleRowIndex + 1);
  final Map<GraphElement,Integer> toPosition=new HashMap<GraphElement,Integer>();
  for (int position=0; position < visibleElementsInNextRow.size(); position++)   toPosition.put(visibleElementsInNextRow.get(position),position);
  return new Function<GraphEdge,Integer>(){
    @Override public Integer fun(    GraphEdge edge){
      Integer position=toPosition.get(edge);
      if (position == null) {
        int downNodeVisibleIndex=edge.getDownNodeIndex();
        if (downNodeVisibleIndex != LinearGraph.NOT_LOAD_COMMIT)         position=toPosition.get(new GraphNode(downNodeVisibleIndex));
      }
      if (position == null) {
        return -1;
      }
 else {
        return position;
      }
    }
  }
;
}
