{
  final Palette palette=Palette.getInstance(editor.getProject());
  IntrospectedProperty[] props=palette.getIntrospectedProperties(component.getComponentClass());
  List<ErrorInfo> result=null;
  for (  IntrospectedProperty prop : props) {
    if (component.isMarkedAsModified(prop) && prop instanceof IntroStringProperty) {
      StringDescriptor descriptor=(StringDescriptor)prop.getValue(component);
      if (descriptor != null && isHardCodedStringDescriptor(descriptor)) {
        if (isSetterNonNls(editor.getProject(),GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(editor.getModule()),component.getComponentClassName(),prop.getName())) {
          continue;
        }
        if (result == null) {
          result=new ArrayList<ErrorInfo>();
        }
        result.add(new ErrorInfo(prop.getName(),CodeInsightBundle.message("inspection.i18n.message.general"),new QuickFix[]{new I18nizeFormPropertyQuickFix(editor,CodeInsightBundle.message("inspection.i18n.quickfix"),component,prop)}));
      }
    }
  }
  if (component instanceof RadContainer) {
    RadContainer container=(RadContainer)component;
    StringDescriptor descriptor=container.getBorderTitle();
    if (descriptor != null && isHardCodedStringDescriptor(descriptor)) {
      if (result == null) {
        result=new ArrayList<ErrorInfo>();
      }
      result.add(new ErrorInfo(myBorderProperty.getName(),CodeInsightBundle.message("inspection.i18n.message.general"),new QuickFix[]{new I18nizeFormBorderQuickFix(editor,CodeInsightBundle.message("inspection.i18n.quickfix"),container)}));
    }
  }
  if (component.getParent() instanceof RadTabbedPane) {
    RadTabbedPane parentTabbedPane=(RadTabbedPane)component.getParent();
    final StringDescriptor descriptor=parentTabbedPane.getChildTitle(component);
    if (descriptor != null && isHardCodedStringDescriptor(descriptor)) {
      if (result == null) {
        result=new ArrayList<ErrorInfo>();
      }
      result.add(new ErrorInfo(null,CodeInsightBundle.message("inspection.i18n.message.general"),new QuickFix[]{new I18nizeTabTitleQuickFix(editor,CodeInsightBundle.message("inspection.i18n.quickfix"),component)}));
    }
  }
  return result == null ? null : result.toArray(new ErrorInfo[result.size()]);
}
