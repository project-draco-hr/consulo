{
  InspectionManager manager=InspectionManager.getInstance(file.getProject());
  for (int i=0; i < container.getComponentCount(); i++) {
    LwComponent component=(LwComponent)container.getComponent(i);
    LwIntrospectedProperty[] props=component.getAssignedIntrospectedProperties();
    for (    LwIntrospectedProperty prop : props) {
      if (prop instanceof LwRbIntroStringProperty) {
        StringDescriptor descriptor=(StringDescriptor)component.getPropertyValue(prop);
        if (isHardCodedStringDescriptor(descriptor)) {
          if (isSetterNonNls(file.getProject(),file.getResolveScope(),component.getComponentClassName(),prop.getName())) {
            continue;
          }
          problems.add(manager.createProblemDescriptor(file,CodeInsightBundle.message("inspection.i18n.message.in.form",JDOMUtil.escapeText(descriptor.getValue())),(LocalQuickFix)null,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
        }
      }
    }
    if (container instanceof LwTabbedPane) {
      LwTabbedPane.Constraints constraints=(LwTabbedPane.Constraints)component.getCustomLayoutConstraints();
      if (constraints != null && isHardCodedStringDescriptor(constraints.myTitle)) {
        problems.add(manager.createProblemDescriptor(file,CodeInsightBundle.message("inspection.i18n.message.in.form",JDOMUtil.escapeText(constraints.myTitle.getValue())),(LocalQuickFix)null,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
      }
    }
    if (component instanceof LwContainer) {
      final LwContainer childContainer=(LwContainer)component;
      final StringDescriptor borderTitle=childContainer.getBorderTitle();
      if (borderTitle != null && isHardCodedStringDescriptor(borderTitle)) {
        problems.add(manager.createProblemDescriptor(file,CodeInsightBundle.message("inspection.i18n.message.in.form",JDOMUtil.escapeText(borderTitle.getValue())),(LocalQuickFix)null,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
      }
      checkGuiFormContainer(file,childContainer,problems);
    }
  }
}
