{
  if (isReferenceTo(element))   return this;
  final boolean fullyQualified=isFullyQualified();
  final boolean preserveQualification=CodeStyleSettingsManager.getSettings(getProject()).USE_FQ_CLASS_NAMES && fullyQualified;
  if (element instanceof PsiClass) {
    final String qualifiedName=((PsiClass)element).getQualifiedName();
    if (!preserveQualification || qualifiedName == null) {
      final String newName=((PsiClass)element).getName();
      setQualifier(null);
      final GrReferenceElementImpl newElement=((GrReferenceElementImpl)handleElementRenameSimple(newName));
      if (newElement.isReferenceTo(element) || qualifiedName == null || JavaPsiFacade.getInstance(getProject()).findClass(qualifiedName,getResolveScope()) == null) {
        return newElement;
      }
    }
    final GrReferenceElement<Q> qualifiedRef=bindWithQualifiedRef(qualifiedName);
    if (!preserveQualification) {
      GrReferenceAdjuster.shortenReferences(qualifiedRef);
    }
    return qualifiedRef;
  }
 else   if (element instanceof PsiMember) {
    PsiMember member=(PsiMember)element;
    if (!isPhysical()) {
      return this;
    }
    final PsiClass psiClass=member.getContainingClass();
    if (psiClass == null)     throw new IncorrectOperationException();
    String qName=psiClass.getQualifiedName() + "." + member.getName();
    final GrReferenceElement<Q> qualifiedRef=bindWithQualifiedRef(qName);
    if (!preserveQualification) {
      GrReferenceAdjuster.shortenReferences(qualifiedRef);
    }
    return qualifiedRef;
  }
 else   if (element instanceof PsiPackage) {
    return bindWithQualifiedRef(((PsiPackage)element).getQualifiedName());
  }
  throw new IncorrectOperationException("Cannot bind to:" + element + " of class "+ element.getClass());
}
