{
  if (isReferenceTo(element))   return this;
  if (element instanceof PsiClass) {
    final GroovyFile file=(GroovyFile)getContainingFile();
    final PsiClass clazz=(PsiClass)element;
    final String qName=clazz.getQualifiedName();
    if (qName != null) {
      final GrImportStatement added=file.addImportForClass(clazz);
      if (!isReferenceTo(element)) {
        file.removeImport(added);
        final GrTypeOrPackageReferenceElement qualifiedRef=GroovyElementFactory.getInstance(getProject()).createTypeOrPackageReference(qName);
        getNode().getTreeParent().replaceChild(getNode(),qualifiedRef.getNode());
        return qualifiedRef;
      }
      return this;
    }
  }
 else   if (element instanceof PsiPackage) {
    final String qName=((PsiPackage)element).getQualifiedName();
    final GrTypeOrPackageReferenceElement qualifiedRef=GroovyElementFactory.getInstance(getProject()).createTypeOrPackageReference(qName);
    getNode().getTreeParent().replaceChild(getNode(),qualifiedRef.getNode());
    return qualifiedRef;
  }
  throw new IncorrectOperationException("Cannot bind");
}
