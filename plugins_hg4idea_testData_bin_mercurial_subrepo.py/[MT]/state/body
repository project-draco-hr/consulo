def state(ctx):
    p = config.config()

    def read(f, sections=None, remap=None):
        if (f in ctx):
            p.parse(f, ctx[f].data(), sections, remap, read)
        else:
            raise util.Abort((_('subrepo spec file %s not found') % f))
    if ('.hgsub' in ctx):
        read('.hgsub')
    rev = {}
    if ('.hgsubstate' in ctx):
        try:
            for l in ctx['.hgsubstate'].data().splitlines():
                (revision, path) = l.split(' ', 1)
                rev[path] = revision
        except IOError as err:
            if (err.errno != errno.ENOENT):
                raise
    state = {}
    for (path, src) in p[''].items():
        kind = 'hg'
        if src.startswith('['):
            if (']' not in src):
                raise util.Abort(_('missing ] in subrepo source'))
            (kind, src) = src.split(']', 1)
            kind = kind[1:]
        state[path] = (src.strip(), rev.get(path, ''), kind)
    return state
