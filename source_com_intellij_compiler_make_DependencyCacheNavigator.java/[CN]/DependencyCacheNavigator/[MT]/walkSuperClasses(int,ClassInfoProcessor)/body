{
  final int classId=myCache.getClassId(classQName);
  if (classId == Cache.UNKNOWN) {
    return;
  }
  int superQName=myCache.getSuperQualifiedName(classId);
  if (classQName == superQName) {
    LOG.assertTrue(false,"Superclass qualified name is the same as class' name: " + classQName);
    return;
  }
  if (superQName != Cache.UNKNOWN) {
    int superInfoId=myCache.getClassId(superQName);
    if (superInfoId != Cache.UNKNOWN) {
      if (processor.process(superQName)) {
        walkSuperClasses(superQName,processor);
      }
    }
  }
  int[] superInterfaces=myCache.getSuperInterfaces(classId);
  for (int idx=0; idx < superInterfaces.length; idx++) {
    int superInterfaceQName=superInterfaces[idx];
    int superInfoId=myCache.getClassId(superInterfaceQName);
    if (superInfoId != Cache.UNKNOWN) {
      if (processor.process(superInterfaceQName)) {
        walkSuperClasses(superInterfaceQName,processor);
      }
    }
  }
}
