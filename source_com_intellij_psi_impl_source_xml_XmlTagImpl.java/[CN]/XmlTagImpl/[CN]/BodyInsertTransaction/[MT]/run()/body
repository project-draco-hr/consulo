{
  ASTNode treeElement;
  if (myChild.getElementType() == XmlElementType.XML_TEXT) {
    final XmlText xmlChildAsText=(XmlText)myChild;
    ASTNode left;
    ASTNode right;
    if (myBeforeFlag) {
      left=myAnchor != null ? myAnchor.getTreePrev() : getLastChildNode();
      right=myAnchor;
    }
 else {
      left=myAnchor != null ? myAnchor : getLastChildNode();
      right=myAnchor != null ? myAnchor.getTreeNext() : null;
    }
    if (left != null && left.getElementType() == XmlElementType.XML_TEXT) {
      final XmlText xmlText=(XmlText)left;
      xmlText.insertText(xmlChildAsText.getValue(),xmlText.getValue().length());
      myNewElement=left;
      return null;
    }
    if (right != null && right.getElementType() == XmlElementType.XML_TEXT) {
      final XmlText xmlText=(XmlText)right;
      xmlText.insertText(xmlChildAsText.getValue(),0);
      myNewElement=right;
      return null;
    }
  }
  if (myAnchor == null) {
    ASTNode anchor=expandTag();
    if (myChild.getElementType() == XmlElementType.XML_TAG) {
      final XmlElementDescriptor parentDescriptor=getDescriptor();
      final XmlTag[] subTags=getSubTags();
      if (parentDescriptor != null && subTags.length > 0) {
        final XmlElementDescriptor[] childElementDescriptors=parentDescriptor.getElementsDescriptors(XmlTagImpl.this);
        int subTagNum=-1;
        for (int i=0; i < childElementDescriptors.length; i++) {
          final XmlElementDescriptor childElementDescriptor=childElementDescriptors[i];
          final String childElementName=childElementDescriptor.getName();
          while (subTagNum < subTags.length - 1 && subTags[subTagNum + 1].getName().equals(childElementName)) {
            subTagNum++;
          }
          if (childElementName.equals(XmlChildRole.START_TAG_NAME_FINDER.findChild(myChild).getText())) {
            if (subTagNum >= 0) {
              final ASTNode subTag=(ASTNode)subTags[subTagNum];
              if (subTag.getTreeParent() != XmlTagImpl.this) {
                final XmlEntityRef entityRef=PsiTreeUtil.getParentOfType(subTags[subTagNum],XmlEntityRef.class);
                throw new IncorrectOperationException("Can't insert subtag to entity! Entity reference text: " + entityRef.getText());
              }
              treeElement=addInternalHack(myChild,myChild,subTag,Boolean.FALSE,myFileType);
            }
 else {
              final ASTNode child=XmlChildRole.START_TAG_END_FINDER.findChild(XmlTagImpl.this);
              treeElement=addInternalHack(myChild,myChild,child,Boolean.FALSE,myFileType);
            }
            myNewElement=treeElement;
            return XmlTagChildAdd.createXmlTagChildAdd(myModel,XmlTagImpl.this,(XmlTagChild)SourceTreeToPsiMap.treeElementToPsi(treeElement));
          }
        }
      }
    }
    treeElement=addInternalHack(myChild,myChild,anchor,Boolean.TRUE,myFileType);
  }
 else {
    treeElement=addInternalHack(myChild,myChild,myAnchor,Boolean.valueOf(myBeforeFlag),myFileType);
  }
  if (treeElement.getElementType() == XmlTokenType.XML_END_TAG_START) {
    treeElement=treeElement.getTreePrev();
    if (treeElement.getElementType() == XmlTokenType.XML_TAG_END) {
      final XmlElement parent=getParent();
      if (parent instanceof XmlTag)       return XmlTagChildChanged.createXmlTagChildChanged(myModel,(XmlTag)parent,XmlTagImpl.this);
      return XmlDocumentChanged.createXmlDocumentChanged(myModel,(XmlDocument)parent);
    }
  }
  myNewElement=treeElement;
  return XmlTagChildAdd.createXmlTagChildAdd(myModel,XmlTagImpl.this,(XmlTagChild)SourceTreeToPsiMap.treeElementToPsi(treeElement));
}
