{
  boolean exceptionOccurred=false;
  if (myNSDescriptorsMap == null) {
    try {
{
        final String noNamespaceDeclaration=getAttributeValue("noNamespaceSchemaLocation",XmlUtil.XML_SCHEMA_INSTANCE_URI);
        final String schemaLocationDeclaration=getAttributeValue("schemaLocation",XmlUtil.XML_SCHEMA_INSTANCE_URI);
        if (noNamespaceDeclaration != null) {
          initializeSchema(XmlUtil.EMPTY_URI,noNamespaceDeclaration);
        }
        if (schemaLocationDeclaration != null) {
          final StringTokenizer tokenizer=new StringTokenizer(schemaLocationDeclaration);
          while (tokenizer.hasMoreTokens()) {
            final String uri=tokenizer.nextToken();
            if (tokenizer.hasMoreTokens()) {
              initializeSchema(uri,tokenizer.nextToken());
            }
          }
        }
      }
{
        if (containNamespaceDeclarations()) {
          final XmlAttribute[] attributes=getAttributes();
          for (int i=0; i < attributes.length; i++) {
            final XmlAttribute attribute=attributes[i];
            if (attribute.isNamespaceDeclaration()) {
              String ns=attribute.getValue();
              if (ns == null)               ns=XmlUtil.EMPTY_URI;
              if (myNSDescriptorsMap == null || !myNSDescriptorsMap.containsKey(ns))               initializeSchema(ns,ns);
            }
          }
        }
      }
    }
 catch (    RuntimeException e) {
      myNSDescriptorsMap=null;
      exceptionOccurred=true;
      throw e;
    }
 finally {
      if (myNSDescriptorsMap == null && !exceptionOccurred) {
        myNSDescriptorsMap=Collections.EMPTY_MAP;
      }
    }
  }
  return myNSDescriptorsMap;
}
