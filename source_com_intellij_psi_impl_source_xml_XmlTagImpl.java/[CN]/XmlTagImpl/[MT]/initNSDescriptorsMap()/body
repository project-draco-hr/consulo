{
  boolean exceptionOccurred=false;
  if (myNSDescriptorsMap == null) {
    try {
{
        final String noNamespaceDeclaration=getAttributeValue("noNamespaceSchemaLocation",XmlUtil.XML_SCHEMA_INSTANCE_URI);
        final String schemaLocationDeclaration=getAttributeValue("schemaLocation",XmlUtil.XML_SCHEMA_INSTANCE_URI);
        if (noNamespaceDeclaration != null) {
          initializeSchema(XmlUtil.EMPTY_NAMESPACE,noNamespaceDeclaration);
        }
        if (schemaLocationDeclaration != null) {
          final StringTokenizer tokenizer=new StringTokenizer(schemaLocationDeclaration);
          while (tokenizer.hasMoreTokens()) {
            final String uri=tokenizer.nextToken();
            if (tokenizer.hasMoreTokens()) {
              initializeSchema(uri,tokenizer.nextToken());
            }
          }
        }
      }
{
        if (containNamespaceDeclarations()) {
          final XmlAttribute[] attributes=getAttributes();
          for (int i=0; i < attributes.length; i++) {
            final XmlAttribute attribute=attributes[i];
            if (attribute.isNamespaceDeclaration()) {
              String ns=attribute.getValue();
              if (ns == null)               ns=XmlUtil.EMPTY_NAMESPACE;
              if (myNSDescriptorsMap == null || !myNSDescriptorsMap.containsKey(ns))               initializeSchema(ns,ns);
            }
          }
        }
      }
      final PsiElement parent=getParent();
      if ((myNSDescriptorsMap == null || myNSDescriptorsMap.isEmpty()) && parent instanceof XmlDocument) {
        final XmlDocument document=(XmlDocument)parent;
        myNSDescriptorsMap=new HashMap<String,CachedValue<XmlNSDescriptor>>(1);
        final String defaultNamespace=XmlUtil.getDefaultNamespace(document);
        if (XmlUtil.ANT_URI.equals(defaultNamespace)) {
          myNSDescriptorsMap.put(defaultNamespace,getManager().getCachedValuesManager().createCachedValue(new CachedValueProvider<XmlNSDescriptor>(){
            public Result<XmlNSDescriptor> compute(){
              final XmlNSDescriptor antNSDescriptor=new AntDOMNSDescriptor();
              antNSDescriptor.init(document);
              return new Result<XmlNSDescriptor>(antNSDescriptor,antNSDescriptor.getDependences());
            }
          }
,false));
        }
 else         if (XmlUtil.XHTML_URI.equals(defaultNamespace)) {
          initializeSchema(defaultNamespace,defaultNamespace);
          if (document.getContainingFile().getFileType() == StdFileTypes.HTML) {
            final XmlNSDescriptor xhtmlDescriptor=myNSDescriptorsMap.get(defaultNamespace).getValue();
            myNSDescriptorsMap.put(defaultNamespace,getManager().getCachedValuesManager().createCachedValue(new CachedValueProvider<XmlNSDescriptor>(){
              public Result<XmlNSDescriptor> compute(){
                final XmlNSDescriptor htmlNSDescriptor=new HtmlNSDescriptorImpl(xhtmlDescriptor);
                return new Result<XmlNSDescriptor>(htmlNSDescriptor,htmlNSDescriptor.getDependences());
              }
            }
,false));
          }
        }
 else         if (defaultNamespace != null && defaultNamespace != XmlUtil.EMPTY_NAMESPACE) {
          initializeSchema(defaultNamespace,defaultNamespace);
        }
        myNSDescriptorsMap.put(XmlUtil.ALL_NAMESPACE,getManager().getCachedValuesManager().createCachedValue(new CachedValueProvider<XmlNSDescriptor>(){
          public Result<XmlNSDescriptor> compute(){
            XmlNSDescriptor descr=null;
            final XmlDoctype doctype=document.getProlog().getDoctype();
            if (doctype != null) {
              if (doctype.getMarkupDecl() != null) {
                descr=(XmlNSDescriptor)doctype.getMarkupDecl().getMetaData();
              }
              if (doctype.getDtdUri() != null) {
                final XmlFile xmlFile=XmlUtil.findXmlFile(XmlUtil.getContainingFile(document),doctype.getDtdUri());
                final XmlNSDescriptor descr1=xmlFile == null ? null : (XmlNSDescriptor)xmlFile.getDocument().getMetaData();
                if (descr != null && descr1 != null) {
                  descr=new XmlNSDescriptorSequence(new XmlNSDescriptor[]{descr,descr1});
                }
 else                 if (descr1 != null) {
                  descr=descr1;
                }
              }
            }
            if (descr == null && myNSDescriptorsMap.size() == 1) {
              String dtdStructure=XmlUtil.generateDocumentDTD(document);
              try {
                final PsiFile fileFromText=getManager().getElementFactory().createFileFromText(XmlUtil.getContainingFile(document).getName() + ".dtd",dtdStructure);
                if (fileFromText instanceof XmlFile) {
                  final XmlFile file=(XmlFile)fileFromText;
                  return new Result<XmlNSDescriptor>((XmlNSDescriptor)file.getDocument().getMetaData(),new Object[]{new WeakReference<XmlDocument>(document)});
                }
              }
 catch (              IncorrectOperationException e) {
                LOG.error(e);
              }
            }
            if (descr != null)             return new Result<XmlNSDescriptor>(descr,new Object[]{new WeakReference<XmlDoctype>(doctype),descr.getDependences()});
            return new Result<XmlNSDescriptor>(null,new Object[0]);
          }
        }
,false));
      }
    }
 catch (    RuntimeException e) {
      myNSDescriptorsMap=null;
      exceptionOccurred=true;
      throw e;
    }
 finally {
      if (myNSDescriptorsMap == null && !exceptionOccurred) {
        myNSDescriptorsMap=Collections.EMPTY_MAP;
      }
    }
  }
  return myNSDescriptorsMap;
}
