{
  if (displayOffset == 0)   return childText;
  if (displayOffset >= childText.getValue().length())   return null;
  final PomModel model=getProject().getModel();
  final XmlAspect aspect=model.getModelAspect(XmlAspect.class);
class MyTransaction extends PomTransactionBase {
    private XmlTextImpl myRight;
    public MyTransaction(){
      super(XmlTagImpl.this);
    }
    public PomModelEvent run() throws IncorrectOperationException {
      final PsiFile containingFile=getContainingFile();
      final FileElement holder=new DummyHolder(containingFile.getManager(),null,((PsiFileImpl)containingFile).getTreeElement().getCharTable()).getTreeElement();
      final XmlTextImpl rightText=(XmlTextImpl)Factory.createCompositeElement(XmlElementType.XML_TEXT);
      TreeUtil.addChildren(holder,rightText);
      addChild(rightText,childText.getTreeNext());
      final String value=childText.getValue();
      final String text=childText.getText();
      childText.setValue(value.substring(0,displayOffset));
      rightText.setValue(value.substring(displayOffset));
      final PomModelEvent event=new PomModelEvent(model);
{
        final XmlAspectChangeSetImpl change=new XmlAspectChangeSetImpl(model,(XmlFile)(containingFile instanceof XmlFile ? containingFile : null));
        change.add(new XmlTextChangedImpl(childText,text));
        change.add(new XmlTagChildAddImpl(XmlTagImpl.this,rightText));
        event.registerChangeSet(aspect,change);
      }
      myRight=rightText;
      return event;
    }
    public XmlText getResult(){
      return myRight;
    }
  }
  final MyTransaction transaction=new MyTransaction();
  model.runTransaction(transaction,aspect);
  return transaction.getResult();
}
