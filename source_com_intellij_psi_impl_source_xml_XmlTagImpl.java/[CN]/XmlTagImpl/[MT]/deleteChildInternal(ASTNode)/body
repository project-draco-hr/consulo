{
  final PsiFile containingFile=getContainingFile();
  final FileType fileType=containingFile.getFileType();
  final PomModel model=getProject().getModel();
  final XmlAspect aspect=model.getModelAspect(XmlAspect.class);
  try {
    final ASTNode treePrev=child.getTreePrev();
    final ASTNode treeNext=child.getTreeNext();
    if (child.getElementType() != XmlElementType.XML_TEXT) {
      if (treePrev.getElementType() == XmlElementType.XML_TEXT && treeNext.getElementType() == XmlElementType.XML_TEXT) {
        final XmlTextImpl xmlText=(XmlTextImpl)SourceTreeToPsiMap.treeElementToPsi(treePrev);
        final String oldText=xmlText.getText();
        model.runTransaction(new PomTransactionBase(this){
          public PomModelEvent run() throws IncorrectOperationException {
            final int displayOffset=xmlText.getValue().length();
            xmlText.insertText(((XmlText)treeNext).getValue(),displayOffset);
            removeChild(treeNext);
            removeChild(child);
{
              final LeafElement leafElementAt=xmlText.findLeafElementAt(displayOffset);
              if (leafElementAt != null && leafElementAt.getElementType() == XmlTokenType.XML_WHITE_SPACE) {
                final String wsText=CodeEditUtil.getStringWhiteSpaceBetweenTokens(ParseUtil.prevLeaf(leafElementAt,null),ParseUtil.nextLeaf(leafElementAt,null),getLanguage());
                final LeafElement newWhitespace=Factory.createSingleLeafElement(XmlTokenType.XML_WHITE_SPACE,wsText.toCharArray(),0,wsText.length(),null,null);
                xmlText.replaceChild(leafElementAt,newWhitespace);
              }
            }
            final PomModelEvent event=new PomModelEvent(model);
{
              final XmlAspectChangeSet xmlAspectChangeSet=new XmlAspectChangeSet(model,(XmlFile)getContainingFile());
              xmlAspectChangeSet.add(new XmlTagChildRemoved(XmlTagImpl.this,(XmlTagChild)treeNext));
              xmlAspectChangeSet.add(new XmlTagChildRemoved(XmlTagImpl.this,(XmlTagChild)child));
              xmlAspectChangeSet.add(new XmlTextChanged(xmlText,oldText));
              event.registerChangeSet(model.getModelAspect(XmlAspect.class),xmlAspectChangeSet);
            }
            return event;
          }
        }
,aspect);
        return;
      }
    }
    model.runTransaction(new PomTransactionBase(this){
      public PomModelEvent run(){
        if (child.getElementType() == XmlElementType.XML_ATTRIBUTE) {
          final String name=((XmlAttribute)child).getName();
          XmlTagImpl.super.deleteChildInternal(child);
          return XmlAttributeSet.createXmlAttributeSet(model,XmlTagImpl.this,name,null);
        }
        XmlTagImpl.super.deleteChildInternal(child);
        return XmlTagChildRemoved.createXmlTagChildRemoved(model,XmlTagImpl.this,(XmlTagChild)SourceTreeToPsiMap.treeElementToPsi(child));
      }
    }
,aspect);
  }
 catch (  IncorrectOperationException e) {
  }
}
