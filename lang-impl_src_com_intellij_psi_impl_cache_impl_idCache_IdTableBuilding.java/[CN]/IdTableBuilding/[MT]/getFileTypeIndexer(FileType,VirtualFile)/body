{
  final FileTypeIdIndexer idIndexer=ourIdIndexers.get(fileType);
  if (idIndexer != null) {
    return idIndexer;
  }
  final WordsScanner customWordsScanner=CacheBuilderRegistry.getInstance().getCacheBuilder(fileType);
  if (customWordsScanner != null) {
    return new WordsScannerFileTypeIdIndexerAdapter(customWordsScanner,null,null,virtualFile);
  }
  final SyntaxHighlighter highlighter=SyntaxHighlighter.PROVIDER.create(fileType,null,virtualFile);
  if (fileType instanceof LanguageFileType) {
    final Language lang=((LanguageFileType)fileType).getLanguage();
    final FindUsagesProvider findUsagesProvider=LanguageFindUsages.INSTANCE.forLanguage(lang);
    WordsScanner scanner=findUsagesProvider == null ? null : findUsagesProvider.getWordsScanner();
    if (scanner == null) {
      scanner=new SimpleWordsScanner();
    }
    final ParserDefinition parserDef=LanguageParserDefinitions.INSTANCE.forLanguage(lang);
    final TokenSet commentTokens=parserDef != null ? parserDef.getCommentTokens() : null;
    return new WordsScannerFileTypeIdIndexerAdapter(scanner,highlighter,commentTokens,virtualFile);
  }
  if (fileType instanceof CustomFileType) {
    final TokenSet commentTokens=TokenSet.create(CustomHighlighterTokenType.LINE_COMMENT,CustomHighlighterTokenType.MULTI_LINE_COMMENT);
    return new WordsScannerFileTypeIdIndexerAdapter(((CustomFileType)fileType).getWordsScanner(),highlighter,commentTokens,virtualFile);
  }
  return null;
}
