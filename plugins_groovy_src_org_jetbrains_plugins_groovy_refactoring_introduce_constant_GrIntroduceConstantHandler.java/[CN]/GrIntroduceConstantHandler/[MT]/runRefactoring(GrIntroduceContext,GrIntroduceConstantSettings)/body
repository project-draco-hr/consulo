{
  final PsiClass targetClass=settings.getTargetClass();
  if (targetClass == null)   return null;
  final GrVariableDeclaration declaration=createField(context,settings);
  if (targetClass.isInterface()) {
    declaration.getModifierList().setModifierProperty(PsiModifier.STATIC,false);
    declaration.getModifierList().setModifierProperty(PsiModifier.FINAL,false);
  }
  final GrVariableDeclaration added;
  if (targetClass instanceof GrEnumTypeDefinition) {
    final GrEnumConstantList enumConstants=((GrEnumTypeDefinition)targetClass).getEnumConstantList();
    added=(GrVariableDeclaration)targetClass.addAfter(declaration,enumConstants);
  }
 else {
    added=((GrVariableDeclaration)targetClass.add(declaration));
  }
  GrReferenceAdjuster.shortenReferences(added);
  if (context.var != null) {
    deleteLocalVar(context);
  }
  final GrField field=(GrField)added.getVariables()[0];
  if (settings.replaceAllOccurrences()) {
    GroovyRefactoringUtil.sortOccurrences(context.occurrences);
    for (    PsiElement occurrence : context.occurrences) {
      replaceOccurrence(field,occurrence,isEscalateVisibility(settings.getVisibilityModifier()));
    }
  }
 else {
    replaceOccurrence(field,context.expression,isEscalateVisibility(settings.getVisibilityModifier()));
  }
  return (GrField)added.getVariables()[0];
}
