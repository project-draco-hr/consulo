{
  final PsiClass targetClass=settings.getTargetClass();
  if (targetClass == null)   return null;
  String fieldName=settings.getName();
  String errorString=check(targetClass,fieldName,context);
  if (errorString != null) {
    String message=RefactoringBundle.getCannotRefactorMessage(errorString);
    CommonRefactoringUtil.showErrorMessage(getRefactoringName(),message,getHelpID(),context.getProject());
    return null;
  }
  PsiField oldField=targetClass.findFieldByName(fieldName,true);
  if (oldField != null) {
    String message=RefactoringBundle.message("field.exists",fieldName,oldField.getContainingClass().getQualifiedName());
    int answer=Messages.showYesNoDialog(context.getProject(),message,getRefactoringName(),Messages.getWarningIcon());
    if (answer != 0) {
      return null;
    }
  }
  final GrVariableDeclaration declaration=createField(context,settings);
  if (targetClass.isInterface()) {
    declaration.getModifierList().setModifierProperty(PsiModifier.STATIC,false);
    declaration.getModifierList().setModifierProperty(PsiModifier.FINAL,false);
  }
  final GrVariableDeclaration added;
  if (targetClass instanceof GrEnumTypeDefinition) {
    final GrEnumConstantList enumConstants=((GrEnumTypeDefinition)targetClass).getEnumConstantList();
    added=(GrVariableDeclaration)targetClass.addAfter(declaration,enumConstants);
  }
 else {
    added=((GrVariableDeclaration)targetClass.add(declaration));
  }
  GrReferenceAdjuster.shortenReferences(added);
  if (context.getVar() != null) {
    deleteLocalVar(context);
  }
  final GrField field=(GrField)added.getVariables()[0];
  if (settings.replaceAllOccurrences()) {
    GroovyRefactoringUtil.sortOccurrences(context.getOccurrences());
    for (    PsiElement occurrence : context.getOccurrences()) {
      replaceOccurrence(field,occurrence,isEscalateVisibility(settings.getVisibilityModifier()));
    }
  }
 else {
    replaceOccurrence(field,context.getExpression(),isEscalateVisibility(settings.getVisibilityModifier()));
  }
  return (GrField)added.getVariables()[0];
}
