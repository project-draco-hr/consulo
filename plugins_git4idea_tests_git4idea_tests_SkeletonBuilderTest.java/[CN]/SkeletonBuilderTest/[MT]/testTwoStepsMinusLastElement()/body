{
  final List<CommitHashPlusParents> list=read("1 2 3\n2 4\n3 5\n4 6\n5 6\n6 7\n7 8 9");
  final List<CommitHashPlusParents> step2=read("8 10\n9 11\n10 12\n11 13\n12 14\n13 14");
  final TreeNavigationImpl navigation=new TreeNavigationImpl(2,2);
  final SkeletonBuilder builder=new SkeletonBuilder(navigation);
  final ReadonlyList.ArrayListWrapper<CommitI> commits=new ReadonlyList.ArrayListWrapper<CommitI>();
  fillData(list,navigation,builder,commits);
  testFirstStepResults(navigation,commits);
  fillData(step2,navigation,builder,commits);
  testFirstStepResults(navigation,commits);
  for (int i=7; i < 13; i++) {
    final CommitI commitI=(CommitI)commits.get(i);
    Assert.assertEquals("" + (i + 1),commitI.getHash().getString());
  }
  Assert.assertEquals(0,commits.get(7).getWireNumber());
  Assert.assertEquals(1,commits.get(8).getWireNumber());
  Assert.assertEquals(0,commits.get(9).getWireNumber());
  Assert.assertEquals(1,commits.get(10).getWireNumber());
  Assert.assertEquals(0,commits.get(11).getWireNumber());
  Assert.assertEquals(1,commits.get(12).getWireNumber());
  final Iterator<WireEvent> iterator=navigation.createWireEventsIterator(0);
  testFirstIteratorPart(iterator);
  WireEvent we=iterator.next();
  Assert.assertEquals(6,we.getCommitIdx());
  final int[] commitsStarts=we.getCommitsStarts();
  Assert.assertEquals(2,commitsStarts.length);
  Assert.assertEquals(7,commitsStarts[0]);
  Assert.assertEquals(8,commitsStarts[1]);
  Assert.assertNull(we.getWireEnds());
  assertWires(navigation.getUsedWires(7,commits).getUsed(),0,1);
  assertWires(navigation.getUsedWires(8,commits).getUsed(),0,1);
  assertWires(navigation.getUsedWires(9,commits).getUsed(),0,1);
  assertWires(navigation.getUsedWires(10,commits).getUsed(),0,1);
  assertWires(navigation.getUsedWires(11,commits).getUsed(),0,1);
  assertWires(navigation.getUsedWires(12,commits).getUsed(),0,1);
}
