{
  final List<CommitHashPlusParents> list=read("1 2 4\n2 3 6\n3 8\n4 5 6\n5 7\n6 9\n7 10\n8 10\n9 10\n 10");
  final TreeNavigationImpl navigation=new TreeNavigationImpl(2,2);
  final SkeletonBuilder builder=new SkeletonBuilder(navigation);
  final ReadonlyList.ArrayListWrapper<CommitI> commits=new ReadonlyList.ArrayListWrapper<CommitI>();
  fillData(list,navigation,builder,commits);
  final int[] expectedWireNumbers={0,0,0,1,1,2,1,0,2,1,1};
  for (int i=0; i < 5; i++) {
    final CommitI commitI=(CommitI)commits.get(i);
    Assert.assertEquals("" + (i + 1),commitI.getHash().getString());
    Assert.assertEquals(expectedWireNumbers[i],commitI.getWireNumber());
  }
  final Iterator<WireEvent> iterator=navigation.createWireEventsIterator(0);
  WireEvent we=iterator.next();
  Assert.assertEquals(true,we.isStart());
  Assert.assertEquals(0,we.getCommitIdx());
  int[] commitsStarts=we.getCommitsStarts();
  Assert.assertEquals(2,commitsStarts.length);
  Assert.assertEquals(1,commitsStarts[0]);
  Assert.assertEquals(3,commitsStarts[1]);
  we=iterator.next();
  commitsStarts=we.getCommitsStarts();
  Assert.assertEquals(2,commitsStarts.length);
  Assert.assertEquals(2,commitsStarts[0]);
  Assert.assertEquals(5,commitsStarts[1]);
  Assert.assertNull(we.getWireEnds());
  Assert.assertEquals(1,we.getCommitIdx());
  we=iterator.next();
  commitsStarts=we.getCommitsStarts();
  Assert.assertEquals(2,commitsStarts.length);
  Assert.assertEquals(4,commitsStarts[0]);
  Assert.assertEquals(5,commitsStarts[1]);
  Assert.assertNull(we.getWireEnds());
  Assert.assertEquals(3,we.getCommitIdx());
  we=iterator.next();
  Assert.assertNull(we.getWireEnds());
  Assert.assertEquals(5,we.getCommitIdx());
  int[] commitsEnds=we.getCommitsEnds();
  Assert.assertEquals(2,commitsEnds.length);
  Assert.assertEquals(1,commitsEnds[0]);
  Assert.assertEquals(3,commitsEnds[1]);
  we=iterator.next();
  Assert.assertEquals(7,we.getWireEnds()[0]);
  Assert.assertEquals(8,we.getWireEnds()[1]);
  Assert.assertEquals(9,we.getCommitIdx());
  Assert.assertEquals(true,we.isEnd());
  commitsEnds=we.getCommitsEnds();
  Assert.assertEquals(3,commitsEnds.length);
  Arrays.sort(commitsEnds);
  Assert.assertEquals(6,commitsEnds[0]);
  Assert.assertEquals(7,commitsEnds[1]);
  Assert.assertEquals(8,commitsEnds[2]);
  assertWires(navigation.getUsedWires(0,commits,builder.getFutureConvertor()).getUsed());
  assertWires(navigation.getUsedWires(1,commits,builder.getFutureConvertor()).getUsed(),0,1);
  assertWires(navigation.getUsedWires(2,commits,builder.getFutureConvertor()).getUsed(),0,1,2);
  assertWires(navigation.getUsedWires(3,commits,builder.getFutureConvertor()).getUsed(),0,1,2);
  assertWires(navigation.getUsedWires(4,commits,builder.getFutureConvertor()).getUsed(),0,1,2);
  assertWires(navigation.getUsedWires(5,commits,builder.getFutureConvertor()).getUsed(),0,1,2);
  assertWires(navigation.getUsedWires(6,commits,builder.getFutureConvertor()).getUsed(),0,1,2);
  assertWires(navigation.getUsedWires(7,commits,builder.getFutureConvertor()).getUsed(),0,1,2);
  assertWires(navigation.getUsedWires(8,commits,builder.getFutureConvertor()).getUsed(),0,1,2);
  assertWires(navigation.getUsedWires(9,commits,builder.getFutureConvertor()).getUsed(),0,1,2);
  final Iterator<WireEvent> iterator1=navigation.createWireEventsIterator(5);
  WireEvent we1=iterator1.next();
  Assert.assertNull(we1.getWireEnds());
  Assert.assertEquals(5,we1.getCommitIdx());
  int[] commitsEnds1=we1.getCommitsEnds();
  Assert.assertEquals(2,commitsEnds1.length);
  Assert.assertEquals(1,commitsEnds1[0]);
  Assert.assertEquals(3,commitsEnds1[1]);
  we1=iterator1.next();
  Assert.assertEquals(7,we.getWireEnds()[0]);
  Assert.assertEquals(8,we.getWireEnds()[1]);
  Assert.assertEquals(9,we.getCommitIdx());
  Assert.assertEquals(true,we.isEnd());
  commitsEnds=we.getCommitsEnds();
  Assert.assertEquals(3,commitsEnds.length);
  Arrays.sort(commitsEnds);
  Assert.assertEquals(6,commitsEnds[0]);
  Assert.assertEquals(7,commitsEnds[1]);
  Assert.assertEquals(8,commitsEnds[2]);
}
