{
  addAction(new ResetFilterAction());
  addSeparator();
  addAction(new ShowEnabledOrDisabledInspectionsAction(true));
  addAction(new ShowEnabledOrDisabledInspectionsAction(false));
  addSeparator();
  final SortedSet<HighlightSeverity> severities=LevelChooserAction.getSeverities(mySeverityRegistrar);
  for (  final HighlightSeverity severity : severities) {
    add(new ShowWithSpecifiedSeverityInspectionsAction(severity));
  }
  addSeparator();
  final Set<String> languageIds=new HashSet<String>();
  for (  ScopeToolState state : profile.getDefaultStates(project)) {
    ContainerUtil.addIfNotNull(languageIds,state.getTool().getLanguage());
  }
  final Set<Language> languages=new TreeSet<Language>(LanguageUtil.LANGUAGE_COMPARATOR);
  for (  String id : languageIds) {
    final Language language=Language.findLanguageByID(id);
    if (language != null) {
      languages.add(language);
    }
  }
  languages.addAll(myInspectionsFilter.getSuitableLanguages());
  if (!languages.isEmpty()) {
    for (    Language language : languages) {
      add(new LanguageFilterAction(language));
    }
    addSeparator();
  }
  add(new ShowAvailableOnlyOnAnalyzeInspectionsAction());
  add(new ShowOnlyCleanupInspectionsAction());
}
