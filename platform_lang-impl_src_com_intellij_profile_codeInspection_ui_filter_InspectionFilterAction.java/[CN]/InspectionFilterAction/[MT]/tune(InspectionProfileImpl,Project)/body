{
  addAction(new ResetFilterAction());
  addSeparator();
  addAction(new ShowEnabledOrDisabledInspectionsAction(true));
  addAction(new ShowEnabledOrDisabledInspectionsAction(false));
  addSeparator();
  final SortedSet<HighlightSeverity> severities=LevelChooserAction.getSeverities(mySeverityRegistrar);
  for (  final HighlightSeverity severity : severities) {
    add(new ShowWithSpecifiedSeverityInspectionsAction(severity));
  }
  addSeparator();
  final Set<String> languageIds=new HashSet<String>();
  for (  ScopeToolState state : profile.getDefaultStates(project)) {
    final String languageId=state.getTool().getLanguage();
    languageIds.add(languageId);
  }
  final List<Language> languages=new ArrayList<Language>();
  for (  String id : languageIds) {
    if (id != null) {
      final Language language=Language.findLanguageByID(id);
      if (language != null) {
        languages.add(language);
      }
    }
  }
  if (!languages.isEmpty()) {
    Collections.sort(languages,new Comparator<Language>(){
      @Override public int compare(      Language l1,      Language l2){
        return l1.getDisplayName().compareTo(l2.getDisplayName());
      }
    }
);
    for (    Language language : languages) {
      add(new LanguageFilterAction(language));
    }
    addSeparator();
  }
  add(new ShowAvailableOnlyOnAnalyzeInspectionsAction());
  add(new ShowOnlyCleanupInspectionsAction());
}
