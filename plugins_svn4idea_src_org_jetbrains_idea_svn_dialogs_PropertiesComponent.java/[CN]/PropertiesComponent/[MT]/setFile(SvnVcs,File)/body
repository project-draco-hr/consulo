{
  final Map props=new TreeMap();
  boolean firstTime=myFile == null;
  myFile=file;
  myVcs=vcs;
  if (file != null) {
    try {
      vcs.createWCClient().doGetProperty(file,null,SVNRevision.UNDEFINED,SVNRevision.WORKING,false,new ISVNPropertyHandler(){
        public void handleProperty(        File path,        SVNPropertyData property) throws SVNException {
          props.put(property.getName(),property.getValue());
        }
        public void handleProperty(        SVNURL url,        SVNPropertyData property) throws SVNException {
        }
        public void handleProperty(        long revision,        SVNPropertyData property) throws SVNException {
        }
      }
);
    }
 catch (    SVNException e) {
      props.clear();
    }
  }
  DefaultTableModel model=(DefaultTableModel)myTable.getModel();
  model.setDataVector(createTableModel(props),new Object[]{"Name","Value"});
  myTable.getColumnModel().setColumnSelectionAllowed(false);
  myTable.getColumnModel().getColumn(1).setCellRenderer(new DefaultTableCellRenderer(){
    protected void setValue(    Object value){
      if (value != null) {
        if (value.toString().indexOf('\r') >= 0) {
          value=value.toString().substring(0,value.toString().indexOf('\r')) + " [...]";
        }
        if (value.toString().indexOf('\n') >= 0) {
          value=value.toString().substring(0,value.toString().indexOf('\n')) + " [...]";
        }
      }
      super.setValue(value);
    }
  }
);
  if (firstTime) {
    mySplitPane.setDividerLocation(.5);
  }
  if (myTable.getRowCount() > 0) {
    myTable.getSelectionModel().setSelectionInterval(0,0);
  }
}
