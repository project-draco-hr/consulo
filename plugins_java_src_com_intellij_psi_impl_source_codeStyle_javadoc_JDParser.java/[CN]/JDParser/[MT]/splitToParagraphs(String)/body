{
  if (s == null)   return null;
  s=s.trim();
  if (s == null || s.isEmpty())   return null;
  List<Pair<String,Boolean>> result=new ArrayList<Pair<String,Boolean>>();
  StringBuilder sb=new StringBuilder();
  ArrayList<Boolean> markers=new ArrayList<Boolean>();
  ArrayList<String> list=toArray(s,"\n",markers);
  Boolean[] marks=markers.toArray(new Boolean[markers.size()]);
  markers.clear();
  for (int i=0; i < list.size(); i++) {
    String s1=list.get(i);
    if (marks[i].booleanValue()) {
      if (sb.length() != 0) {
        result.add(new Pair<String,Boolean>(sb.toString(),false));
        sb.setLength(0);
      }
      result.add(new Pair<String,Boolean>(s1,marks[i]));
    }
 else {
      if (s1.isEmpty()) {
        if (sb.length() != 0) {
          result.add(new Pair<String,Boolean>(sb.toString(),false));
          sb.setLength(0);
        }
        result.add(new Pair<String,Boolean>("",marks[i]));
      }
 else       if (mySettings.JD_PRESERVE_LINE_FEEDS) {
        result.add(new Pair<String,Boolean>(s1,marks[i]));
      }
 else {
        if (sb.length() != 0)         sb.append(' ');
        sb.append(s1);
      }
    }
  }
  if (!mySettings.JD_PRESERVE_LINE_FEEDS && sb.length() != 0) {
    result.add(new Pair<String,Boolean>(sb.toString(),false));
  }
  return result;
}
