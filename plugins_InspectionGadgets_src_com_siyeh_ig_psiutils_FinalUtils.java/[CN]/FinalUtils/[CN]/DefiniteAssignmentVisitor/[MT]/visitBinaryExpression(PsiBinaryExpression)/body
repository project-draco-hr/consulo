{
  final IElementType tokenType=expression.getOperationTokenType();
  if (JavaTokenType.ANDAND.equals(tokenType)) {
    final PsiExpression lhs=expression.getLOperand();
    constant=NOT_CONSTANT;
    lhs.accept(this);
    final byte constant=this.constant;
    final boolean da=definitelyAssigned;
    final boolean du=definitelyUnassigned;
    if (constant == CONSTANT_FALSE) {
      satisfyVacuously();
    }
    final PsiExpression rhs=expression.getROperand();
    if (rhs != null) {
      rhs.accept(this);
    }
    if (this.constant == CONSTANT_TRUE) {
      this.constant=constant;
    }
 else     if (constant == CONSTANT_FALSE) {
      this.constant=CONSTANT_FALSE;
      definitelyAssigned=da;
      definitelyUnassigned=du;
    }
 else     if (constant == NOT_CONSTANT) {
      this.constant=NOT_CONSTANT;
    }
  }
 else   if (JavaTokenType.OROR.equals(tokenType)) {
    final PsiExpression lhs=expression.getLOperand();
    constant=NOT_CONSTANT;
    lhs.accept(this);
    final int constant=this.constant;
    final boolean da=definitelyAssigned;
    final boolean du=definitelyUnassigned;
    if (constant == CONSTANT_TRUE) {
      satisfyVacuously();
    }
    final PsiExpression rhs=expression.getROperand();
    if (rhs != null) {
      rhs.accept(this);
    }
    if (constant == CONSTANT_TRUE) {
      this.constant=CONSTANT_TRUE;
    }
 else     if (constant == NOT_CONSTANT) {
      this.constant=NOT_CONSTANT;
    }
    if (constant == CONSTANT_TRUE) {
      definitelyAssigned=da;
      definitelyUnassigned=du;
    }
  }
 else {
    final PsiType type=expression.getType();
    if (PsiType.BOOLEAN.equals(type)) {
      final Object constant=ExpressionUtils.computeConstantExpression(expression);
      if (constant instanceof Boolean) {
        if (Boolean.TRUE == constant) {
          this.constant=CONSTANT_TRUE;
        }
 else         if (Boolean.FALSE == constant) {
          this.constant=CONSTANT_FALSE;
        }
 else {
          this.constant=NOT_CONSTANT;
        }
      }
 else {
        this.constant=NOT_CONSTANT;
      }
    }
    if (constant == NOT_CONSTANT) {
      super.visitBinaryExpression(expression);
    }
  }
}
