{
  final PsiMethod[] methods=containingClass.getMethods();
  for (  PsiMethod method : methods) {
    if (method.isConstructor()) {
      continue;
    }
    method.accept(visitor);
    if (!visitor.isFinalCandidate()) {
      return;
    }
  }
  final PsiClass[] innerClasses=containingClass.getInnerClasses();
  for (  PsiClass innerClass : innerClasses) {
    if (innerClass == skipClass) {
      continue;
    }
    if (fieldIsStatic ^ innerClass.hasModifierProperty(PsiModifier.STATIC)) {
      continue;
    }
    innerClass.accept(visitor);
    if (!visitor.isFinalCandidate()) {
      return;
    }
  }
}
