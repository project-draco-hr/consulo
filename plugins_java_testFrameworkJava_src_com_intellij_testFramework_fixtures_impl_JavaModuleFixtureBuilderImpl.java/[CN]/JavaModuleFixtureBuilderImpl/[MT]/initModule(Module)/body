{
  super.initModule(module);
  final ModifiableRootModel model=ModuleRootManager.getInstance(module).getModifiableModel();
  final LibraryTable libraryTable=model.getModuleLibraryTable();
  for (  Lib lib : myLibraries) {
    String libraryName=lib.getName();
    final Library library=libraryTable.createLibrary(libraryName);
    final Library.ModifiableModel libraryModel=library.getModifiableModel();
    for (    OrderRootType rootType : OrderRootType.getAllTypes()) {
      final String[] roots=lib.getRoots(rootType);
      for (      String root : roots) {
        VirtualFile vRoot=LocalFileSystem.getInstance().refreshAndFindFileByPath(root);
        if (vRoot != null && OrderRootType.CLASSES.equals(rootType) && !vRoot.isDirectory()) {
          final VirtualFile jar=JarFileSystem.getInstance().refreshAndFindFileByPath(root + "!/");
          if (jar != null)           vRoot=jar;
        }
        if (vRoot != null) {
          libraryModel.addRoot(vRoot,rootType);
        }
      }
    }
    libraryModel.commit();
  }
  final Sdk jdk;
  if (myJdk != null) {
    jdk=JavaSdk.getInstance().createJdk(module.getName() + "_jdk",myJdk,false);
    ((ProjectJdkImpl)jdk).setVersionString("java 1.5");
  }
 else {
    jdk=IdeaTestUtil.getMockJdk17();
  }
  if (jdk != null) {
    model.setSdk(new MockJdkWrapper(CompilerConfigurationImpl.getTestsExternalCompilerHome(),jdk));
  }
  if (myLanguageLevel != null) {
    model.getModuleExtensionOld(LanguageLevelModuleExtension.class).setLanguageLevel(myLanguageLevel);
  }
 else   if (myMockJdkLevel == MockJdkLevel.jdk15) {
    model.getModuleExtensionOld(LanguageLevelModuleExtension.class).setLanguageLevel(LanguageLevel.JDK_1_5);
  }
  model.commit();
  for (  OrderEntry entry : ModuleRootManager.getInstance(module).getOrderEntries()) {
    if (entry instanceof LibraryOrderEntry) {
      Library library=((LibraryOrderEntry)entry).getLibrary();
      libraryCreated(library,module);
    }
  }
}
