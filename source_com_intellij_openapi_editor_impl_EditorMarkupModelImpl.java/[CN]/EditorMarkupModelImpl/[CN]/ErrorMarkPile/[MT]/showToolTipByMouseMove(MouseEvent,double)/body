{
  if (!inside(e,width)) {
    return false;
  }
  LineTooltipRenderer bigRenderer=null;
  List<HighlightInfo> infos=new SmartList<HighlightInfo>();
  for (int i=0; i < markers.size(); i++) {
    RangeHighlighter marker=markers.get(i);
    final Object tooltipObject=marker.getErrorStripeTooltip();
    if (tooltipObject == null)     continue;
    if (tooltipObject instanceof HighlightInfo) {
      infos.add((HighlightInfo)tooltipObject);
    }
 else {
      final String text=tooltipObject.toString();
      if (bigRenderer == null) {
        bigRenderer=new LineTooltipRenderer(text);
      }
 else {
        bigRenderer.addBelow(text);
      }
    }
  }
  if (infos.size() != 0) {
    Collections.sort(infos,new Comparator<HighlightInfo>(){
      public int compare(      final HighlightInfo o1,      final HighlightInfo o2){
        return o2.getSeverity().compareTo(o1.getSeverity());
      }
    }
);
    final HighlightInfoComposite composite=new HighlightInfoComposite(infos);
    if (bigRenderer == null) {
      bigRenderer=new LineTooltipRenderer(composite.toolTip);
    }
 else {
      bigRenderer.addBelow(composite.toolTip);
    }
  }
  if (bigRenderer != null) {
    showTooltip(e,bigRenderer);
  }
  return true;
}
