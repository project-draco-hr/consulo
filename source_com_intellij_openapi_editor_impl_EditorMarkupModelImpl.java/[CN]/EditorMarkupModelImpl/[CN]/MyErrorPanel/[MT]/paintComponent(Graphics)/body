{
  ((ApplicationImpl)ApplicationManager.getApplication()).editorPaintStart();
  try {
    LafManager lafManager=LafManager.getInstance();
    if (lafManager == null || lafManager.isUnderAquaLookAndFeel()) {
      g.setColor(new Color(0xF0F0F0));
      Rectangle clipBounds=g.getClipBounds();
      g.fillRect(clipBounds.x,clipBounds.y,clipBounds.width,clipBounds.height);
    }
 else {
      super.paintComponent(g);
    }
    EditorImpl.MyScrollBar scrollBar=myEditor.getVerticalScrollBar();
    if (myErrorStripeRenderer != null) {
      int top=scrollBar.getDecScrollButtonHeight();
      myErrorStripeRenderer.paint(this,g,new Rectangle(0,0,top,getWidth()));
    }
    int scrollBarHeight=scrollBar.getSize().height;
    ArrayList<RangeHighlighter> sortedHighlighters=getSortedHighlighters();
    for (int i=0; i < sortedHighlighters.size(); i++) {
      RangeHighlighter highlighter=sortedHighlighters.get(i);
      if (!highlighter.isValid())       continue;
      int visStartLine=myEditor.logicalToVisualPosition(new LogicalPosition(highlighter.getDocument().getLineNumber(highlighter.getStartOffset()),0)).line;
      int visEndLine=myEditor.logicalToVisualPosition(new LogicalPosition(highlighter.getDocument().getLineNumber(highlighter.getEndOffset()),0)).line;
      int yStartPosition=visibleLineToYPosition(visStartLine,scrollBarHeight);
      int yEndPosition=visibleLineToYPosition(visEndLine,scrollBarHeight);
      final int height=Math.max(yEndPosition - yStartPosition,2);
      g.setColor(highlighter.getErrorStripeMarkColor());
      int width=getWidth();
      int x=1;
      if (highlighter.isThinErrorStripeMark()) {
        width/=2;
        x+=width / 2;
      }
      g.fill3DRect(x,yStartPosition,width - 1,height,true);
    }
  }
  finally {
    ((ApplicationImpl)ApplicationManager.getApplication()).editorPaintFinish();
  }
}
