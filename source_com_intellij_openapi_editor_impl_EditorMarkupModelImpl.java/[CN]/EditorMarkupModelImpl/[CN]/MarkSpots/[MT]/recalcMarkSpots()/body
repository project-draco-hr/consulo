{
  if (mySpots != null)   return;
  final List<RangeHighlighter> sortedHighlighters=getSortedHighlighters();
  mySpots=new ArrayList<MarkSpot>();
  if (sortedHighlighters.isEmpty())   return;
  Queue<PositionedRangeHighlighter> startQueue=new PriorityQueue<PositionedRangeHighlighter>(5,new Comparator<PositionedRangeHighlighter>(){
    public int compare(    final PositionedRangeHighlighter o1,    final PositionedRangeHighlighter o2){
      return o1.yStart - o2.yStart;
    }
  }
);
  Queue<PositionedRangeHighlighter> endQueue=new PriorityQueue<PositionedRangeHighlighter>(5,new Comparator<PositionedRangeHighlighter>(){
    public int compare(    final PositionedRangeHighlighter o1,    final PositionedRangeHighlighter o2){
      return o1.yEnd - o2.yEnd;
    }
  }
);
  int index=0;
  MarkSpot currentSpot=null;
  while (!startQueue.isEmpty() || !endQueue.isEmpty() || index != sortedHighlighters.size()) {
    LOG.assertTrue(startQueue.size() == endQueue.size());
    final THashSet<PositionedRangeHighlighter> set=new THashSet<PositionedRangeHighlighter>(startQueue);
    LOG.assertTrue(set.containsAll(endQueue));
    final PositionedRangeHighlighter positionedMark;
    boolean addingNew;
    if (index != sortedHighlighters.size()) {
      RangeHighlighter mark=sortedHighlighters.get(index);
      if (!mark.isValid() || mark.getErrorStripeMarkColor() == null) {
        sortedHighlighters.remove(index);
        continue;
      }
      PositionedRangeHighlighter positioned=getPositionedRangeHighlighter(mark);
      if (!endQueue.isEmpty() && endQueue.peek().yEnd <= positioned.yStart) {
        positionedMark=endQueue.peek();
        addingNew=false;
      }
 else {
        positionedMark=positioned;
        addingNew=true;
      }
    }
 else     if (!endQueue.isEmpty()) {
      positionedMark=endQueue.peek();
      addingNew=false;
    }
 else {
      LOG.error("cant be");
      return;
    }
    if (addingNew) {
      if (currentSpot == null) {
        currentSpot=new MarkSpot(positionedMark.yStart,-1);
      }
 else {
        currentSpot.yEnd=positionedMark.yStart;
        if (currentSpot.yEnd != currentSpot.yStart) {
          spitOutMarkSpot(currentSpot,startQueue);
        }
        currentSpot=new MarkSpot(positionedMark.yStart,-1);
      }
      while (index != sortedHighlighters.size()) {
        PositionedRangeHighlighter positioned=getPositionedRangeHighlighter(sortedHighlighters.get(index));
        if (positioned.yStart != positionedMark.yStart)         break;
        startQueue.add(positioned);
        endQueue.add(positioned);
        index++;
      }
    }
 else {
      currentSpot.yEnd=positionedMark.yEnd;
      spitOutMarkSpot(currentSpot,startQueue);
      currentSpot=new MarkSpot(positionedMark.yEnd,-1);
      while (!endQueue.isEmpty() && endQueue.peek().yEnd == positionedMark.yEnd) {
        final PositionedRangeHighlighter highlighter=endQueue.remove();
        for (Iterator<PositionedRangeHighlighter> iterator=startQueue.iterator(); iterator.hasNext(); ) {
          PositionedRangeHighlighter positioned=iterator.next();
          if (positioned == highlighter) {
            iterator.remove();
            break;
          }
        }
      }
      if (startQueue.isEmpty()) {
        currentSpot=null;
      }
    }
  }
}
