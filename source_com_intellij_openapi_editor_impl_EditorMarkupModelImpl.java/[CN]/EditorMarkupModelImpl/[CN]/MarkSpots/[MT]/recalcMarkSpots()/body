{
  if (mySpots != null)   return;
  final List<RangeHighlighter> sortedHighlighters=getSortedHighlighters();
  mySpots=new ArrayList<MarkSpot>();
  int prevEndPosition=0;
  boolean prevIsThin=false;
  for (int i=0; i < sortedHighlighters.size(); i++) {
    RangeHighlighter mark=sortedHighlighters.get(i);
    if (!mark.isValid() || mark.getErrorStripeMarkColor() == null)     return;
    int visStartLine=myEditor.logicalToVisualPosition(new LogicalPosition(mark.getDocument().getLineNumber(mark.getStartOffset()),0)).line;
    int visEndLine=myEditor.logicalToVisualPosition(new LogicalPosition(mark.getDocument().getLineNumber(mark.getEndOffset()),0)).line;
    int yStartPosition=visibleLineToYPosition(visStartLine,myScrollBarHeight);
    int yEndPosition=visibleLineToYPosition(visEndLine,myScrollBarHeight);
    if (yEndPosition - yStartPosition < getMinHeight()) {
      yEndPosition=yStartPosition + getMinHeight();
    }
    final MarkSpot markSpot=new MarkSpot(yStartPosition,yEndPosition,mark);
    markSpot.drawTopBorder=mark.isThinErrorStripeMark() != prevIsThin || prevEndPosition < yStartPosition;
    mySpots.add(markSpot);
    if (i != 0 && mySpots.get(i - 1).yEnd < yStartPosition) {
      mySpots.get(i - 1).drawBottomBorder=true;
    }
    prevEndPosition=yEndPosition;
    prevIsThin=mark.isThinErrorStripeMark();
  }
  mySpotsSortedByLayer=new ArrayList<MarkSpot>(mySpots);
  Collections.sort(mySpotsSortedByLayer,new Comparator<MarkSpot>(){
    public int compare(    final MarkSpot o1,    final MarkSpot o2){
      return o1.highlighter.getLayer() - o2.highlighter.getLayer();
    }
  }
);
}
