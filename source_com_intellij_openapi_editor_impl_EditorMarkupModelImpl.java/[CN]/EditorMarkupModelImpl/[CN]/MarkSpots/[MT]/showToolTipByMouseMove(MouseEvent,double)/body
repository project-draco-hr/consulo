{
  LineTooltipRenderer bigRenderer=null;
  List<RangeHighlighter> highlighters=new SmartList<RangeHighlighter>();
  boolean wereInsideMarkSpot=false;
  for (int i=0; i < mySpots.size(); i++) {
    MarkSpot markSpot=mySpots.get(i);
    if (!markSpot.near(e,width)) {
      if (wereInsideMarkSpot)       break;
      continue;
    }
    wereInsideMarkSpot=true;
    RangeHighlighter marker=markSpot.highlighter;
    highlighters.add(marker);
  }
  Collections.sort(highlighters,new Comparator<RangeHighlighter>(){
    public int compare(    final RangeHighlighter o1,    final RangeHighlighter o2){
      return o2.getLayer() - o1.getLayer();
    }
  }
);
  List<HighlightInfo> infos=new SmartList<HighlightInfo>();
  for (int i=0; i < highlighters.size(); i++) {
    RangeHighlighter marker=highlighters.get(i);
    final Object tooltipObject=marker.getErrorStripeTooltip();
    if (tooltipObject == null)     continue;
    if (tooltipObject instanceof HighlightInfo) {
      infos.add((HighlightInfo)tooltipObject);
    }
 else {
      final String text=tooltipObject.toString();
      if (bigRenderer == null) {
        bigRenderer=new LineTooltipRenderer(text);
      }
 else {
        bigRenderer.addBelow(text);
      }
    }
  }
  if (infos.size() != 0) {
    Collections.sort(infos,new Comparator<HighlightInfo>(){
      public int compare(      final HighlightInfo o1,      final HighlightInfo o2){
        return o2.getSeverity().compareTo(o1.getSeverity());
      }
    }
);
    final HighlightInfoComposite composite=new HighlightInfoComposite(infos);
    if (bigRenderer == null) {
      bigRenderer=new LineTooltipRenderer(composite.toolTip);
    }
 else {
      final LineTooltipRenderer renderer=new LineTooltipRenderer(composite);
      renderer.addBelow(bigRenderer.getText());
      bigRenderer=renderer;
    }
  }
  if (bigRenderer != null) {
    showTooltip(e,bigRenderer);
    return true;
  }
  return false;
}
