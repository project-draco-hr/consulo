{
  recalcMarkSpots();
  LineTooltipRenderer bigRenderer=null;
  final List<MarkSpot> nearestMarkSpots=getNearestMarkSpots(e,width);
  Set<RangeHighlighter> highlighters=new THashSet<RangeHighlighter>();
  for (int i=0; i < nearestMarkSpots.size(); i++) {
    MarkSpot markSpot=nearestMarkSpots.get(i);
    highlighters.addAll(markSpot.highlighters);
  }
  List<HighlightInfo> infos=new SmartList<HighlightInfo>();
  for (  RangeHighlighter marker : highlighters) {
    final Object tooltipObject=marker.getErrorStripeTooltip();
    if (tooltipObject == null)     continue;
    if (tooltipObject instanceof HighlightInfo) {
      infos.add((HighlightInfo)tooltipObject);
    }
 else {
      final String text=tooltipObject.toString();
      if (bigRenderer == null) {
        bigRenderer=new LineTooltipRenderer(text);
      }
 else {
        bigRenderer.addBelow(text);
      }
    }
  }
  if (infos.size() != 0) {
    Collections.sort(infos,new Comparator<HighlightInfo>(){
      public int compare(      final HighlightInfo o1,      final HighlightInfo o2){
        return o2.getSeverity().compareTo(o1.getSeverity());
      }
    }
);
    final HighlightInfoComposite composite=new HighlightInfoComposite(infos);
    if (bigRenderer == null) {
      bigRenderer=new LineTooltipRenderer(composite.toolTip);
    }
 else {
      final LineTooltipRenderer renderer=new LineTooltipRenderer(composite);
      renderer.addBelow(bigRenderer.getText());
      bigRenderer=renderer;
    }
  }
  if (bigRenderer != null) {
    showTooltip(e,bigRenderer);
    return true;
  }
  return false;
}
