{
  final Component owner=KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();
  if (owner == null) {
    throw new AssertionError("No component focused");
  }
  Component eachParent=owner;
  final LinkedHashMap<String,String> actual=new LinkedHashMap<String,String>();
  while (eachParent != null) {
    if (eachParent instanceof Queryable) {
      ((Queryable)eachParent).putInfo(actual);
    }
    eachParent=eachParent.getParent();
  }
  Set testedKeys=new LinkedHashSet<String>();
  for (  String eachKey : expected.keySet()) {
    testedKeys.add(eachKey);
    final String actualValue=actual.get(eachKey);
    final String expectedValue=expected.get(eachKey);
    if (!expectedValue.equals(actualValue)) {
      throw new AssertionError(eachKey + " expected: " + expectedValue+ " but was: "+ actualValue);
    }
  }
  Map<String,String> untested=new HashMap<String,String>();
  for (  String eachKey : actual.keySet()) {
    if (testedKeys.contains(eachKey))     continue;
    untested.put(eachKey,actual.get(eachKey));
  }
  StringBuffer untestedText=new StringBuffer();
  for (  String each : untested.keySet()) {
    if (untestedText.length() > 0) {
      untestedText.append(",");
    }
    untestedText.append(each).append("=").append(untested.get(each));
  }
  context.message("Untested info: " + untestedText.toString(),getLine());
}
