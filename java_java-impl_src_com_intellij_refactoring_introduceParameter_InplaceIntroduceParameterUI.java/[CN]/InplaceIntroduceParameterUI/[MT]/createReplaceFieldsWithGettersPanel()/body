{
  final LabeledComponent<JComboBox> component=new LabeledComponent<JComboBox>();
  myReplaceFieldsCb=new JComboBox(new Integer[]{IntroduceParameterRefactoring.REPLACE_FIELDS_WITH_GETTERS_ALL,IntroduceParameterRefactoring.REPLACE_FIELDS_WITH_GETTERS_INACCESSIBLE,IntroduceParameterRefactoring.REPLACE_FIELDS_WITH_GETTERS_NONE});
  myReplaceFieldsCb.setRenderer(new ListCellRendererWrapper<Integer>(myReplaceFieldsCb){
    @Override public void customize(    JList list,    Integer value,    int index,    boolean selected,    boolean hasFocus){
switch (value) {
case IntroduceParameterRefactoring.REPLACE_FIELDS_WITH_GETTERS_NONE:
        setText(UIUtil.removeMnemonic(RefactoringBundle.message("do.not.replace")));
      break;
case IntroduceParameterRefactoring.REPLACE_FIELDS_WITH_GETTERS_INACCESSIBLE:
    setText(UIUtil.removeMnemonic(RefactoringBundle.message("replace.fields.inaccessible.in.usage.context")));
  break;
default :
setText(UIUtil.removeMnemonic(RefactoringBundle.message("replace.all.fields")));
}
}
}
);
myReplaceFieldsCb.setSelectedItem(JavaRefactoringSettings.getInstance().INTRODUCE_PARAMETER_REPLACE_FIELDS_WITH_GETTERS);
InplaceCombosUtil.appendActions(myReplaceFieldsCb,myProject);
component.setComponent(myReplaceFieldsCb);
component.setText(RefactoringBundle.message("replace.fields.used.in.expressions.with.their.getters"));
component.getLabel().setDisplayedMnemonic('u');
component.setLabelLocation(BorderLayout.NORTH);
component.setBorder(IdeBorderFactory.createEmptyBorder(3,3,2,2));
return component;
}
