{
  final Set<VirtualFile> readOnlyFiles=new com.intellij.util.containers.HashSet<VirtualFile>();
  for (int i=0; i < descriptors.length; i++) {
    ProblemDescriptor descriptor=descriptors[i];
    final PsiElement psiElement=descriptor.getPsiElement();
    if (psiElement != null && !psiElement.isWritable()) {
      readOnlyFiles.add(psiElement.getContainingFile().getVirtualFile());
    }
  }
  if (!readOnlyFiles.isEmpty()) {
    final ReadonlyStatusHandler.OperationStatus operationStatus=ReadonlyStatusHandler.getInstance(project).ensureFilesWritable(readOnlyFiles.toArray(new VirtualFile[readOnlyFiles.size()]));
    if (operationStatus.hasReadonlyFiles())     return;
  }
  CommandProcessor.getInstance().executeCommand(project,new Runnable(){
    public void run(){
      CommandProcessor.getInstance().markCurrentCommandAsComplex(project);
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        public void run(){
          for (int i=0; i < descriptors.length; i++) {
            ProblemDescriptor descriptor=descriptors[i];
            if (descriptor.getPsiElement() != null && descriptor.getFix() != null) {
              descriptor.getFix().applyFix(project,descriptor);
              tool.ignoreProblem(descriptor);
            }
          }
        }
      }
);
    }
  }
,getTemplatePresentation().getText(),null);
  ((InspectionManagerEx)InspectionManager.getInstance(project)).refreshViews();
}
