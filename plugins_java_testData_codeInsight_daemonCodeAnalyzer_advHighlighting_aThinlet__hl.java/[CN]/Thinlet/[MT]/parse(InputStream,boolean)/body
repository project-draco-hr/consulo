{
  BufferedReader reader=new BufferedReader(new InputStreamReader(inputstream));
  Object[] parentlist=null;
  Object current=null;
  Hashtable attributelist=null;
  StringBuffer text=new StringBuffer();
  for (int c=reader.read(); c != -1; ) {
    if (c == '<') {
      if ((c=reader.read()) == '/') {
        if (text.length() > 0) {
          if (text.charAt(text.length() - 1) == ' ') {
            text.setLength(text.length() - 1);
          }
          if (!validate) {
            characters(text.toString());
          }
          text.setLength(0);
        }
        String tagname=(String)parentlist[2];
        for (int i=0; i < tagname.length(); i++) {
          if ((c=reader.read()) != tagname.charAt(i)) {
            throw new IllegalArgumentException(tagname);
          }
        }
        while (" \t\n\r".indexOf(c=reader.read()) != -1)         ;
        if (c != '>')         throw new IllegalArgumentException();
        c=reader.read();
        if (!validate) {
          endElement();
        }
        if (parentlist[0] == null) {
          reader.close();
          return current;
        }
        current=parentlist[0];
        parentlist=(Object[])parentlist[1];
      }
 else {
        boolean instruction=(c == '?');
        if (c == '!') {
          while ((c=reader.read()) != '>')           ;
          continue;
        }
        if (instruction) {
          c=reader.read();
        }
        text.setLength(0);
        boolean iscomment=false;
        while (">/ \t\n\r".indexOf(c) == -1) {
          text.append((char)c);
          if ((text.length() == 3) && (text.charAt(0) == '!') && (text.charAt(1) == '-')&& (text.charAt(2) == '-')) {
            int m=0;
            while (true) {
              c=reader.read();
              if (c == '-') {
                m++;
              }
 else               if ((c == '>') && (m >= 2)) {
                break;
              }
 else {
                m=0;
              }
            }
            iscomment=true;
          }
          c=reader.read();
        }
        if (iscomment) {
          continue;
        }
        if (!instruction) {
          String tagname=text.toString();
          parentlist=new Object[]{current,parentlist,tagname};
          if (validate) {
            current=(current != null) ? addElement(current,tagname) : create(tagname);
          }
 else {
            current=tagname;
          }
        }
        text.setLength(0);
        while (true) {
          boolean whitespace=false;
          while (" \t\n\r".indexOf(c) != -1) {
            c=reader.read();
            whitespace=true;
          }
          if (c == '>') {
            if (instruction)             throw new IllegalArgumentException();
            if (!validate) {
              startElement((String)current,attributelist);
              attributelist=null;
            }
            c=reader.read();
            break;
          }
 else           if (c == '/') {
            if (instruction)             throw new IllegalArgumentException();
            if ((c=reader.read()) != '>') {
              throw new IllegalArgumentException();
            }
            if (!validate) {
              startElement((String)current,attributelist);
              attributelist=null;
              endElement();
            }
            if (parentlist[0] == null) {
              reader.close();
              return current;
            }
            current=parentlist[0];
            parentlist=(Object[])parentlist[1];
            c=reader.read();
            break;
          }
 else           if (instruction && (c == '?')) {
            if ((c=reader.read()) != '>') {
              throw new IllegalArgumentException();
            }
            c=reader.read();
            break;
          }
 else           if (whitespace) {
            while ("= \t\n\r".indexOf(c) == -1) {
              text.append((char)c);
              c=reader.read();
            }
            String key=text.toString();
            text.setLength(0);
            while (" \t\n\r".indexOf(c) != -1)             c=reader.read();
            if (c != '=')             throw new IllegalArgumentException();
            while (" \t\n\r".indexOf(c=reader.read()) != -1)             ;
            char quote=(char)c;
            if ((c != '\"') && (c != '\''))             throw new IllegalArgumentException();
            while (quote != (c=reader.read())) {
              if (c == '&') {
                StringBuffer eb=new StringBuffer();
                while (';' != (c=reader.read())) {
                  eb.append((char)c);
                }
                String entity=eb.toString();
                if ("lt".equals(entity)) {
                  text.append('<');
                }
 else                 if ("gt".equals(entity)) {
                  text.append('>');
                }
 else                 if ("amp".equals(entity)) {
                  text.append('&');
                }
 else                 if ("quot".equals(entity)) {
                  text.append('"');
                }
 else                 if ("apos".equals(entity)) {
                  text.append('\'');
                }
 else                 if (entity.startsWith("#")) {
                  text.append((char)Integer.parseInt(entity.substring(1)));
                }
 else                 throw new IllegalArgumentException("unknown " + "entity " + entity);
              }
 else               text.append((char)c);
            }
            if (!instruction) {
              if (validate) {
                addAttribute(current,key,text.toString());
              }
 else {
                if (attributelist == null) {
                  attributelist=new Hashtable();
                }
                attributelist.put(key,text.toString());
              }
            }
            text.setLength(0);
            c=reader.read();
          }
 else           throw new IllegalArgumentException();
        }
      }
    }
 else {
      if (" \t\n\r".indexOf(c) != -1) {
        if ((text.length() > 0) && (text.charAt(text.length() - 1) != ' ')) {
          text.append(' ');
        }
      }
 else {
        text.append((char)c);
      }
      c=reader.read();
    }
  }
  throw new IllegalArgumentException();
}
