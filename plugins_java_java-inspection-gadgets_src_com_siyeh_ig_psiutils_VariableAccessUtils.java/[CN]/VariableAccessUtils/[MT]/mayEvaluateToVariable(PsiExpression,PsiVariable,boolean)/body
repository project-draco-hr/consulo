{
  if (expression == null) {
    return false;
  }
  if (expression instanceof PsiParenthesizedExpression) {
    final PsiParenthesizedExpression parenthesizedExpression=(PsiParenthesizedExpression)expression;
    final PsiExpression containedExpression=parenthesizedExpression.getExpression();
    return mayEvaluateToVariable(containedExpression,variable,builderPattern);
  }
  if (expression instanceof PsiTypeCastExpression) {
    final PsiTypeCastExpression typeCastExpression=(PsiTypeCastExpression)expression;
    final PsiExpression containedExpression=typeCastExpression.getOperand();
    return mayEvaluateToVariable(containedExpression,variable,builderPattern);
  }
  if (expression instanceof PsiConditionalExpression) {
    final PsiConditionalExpression conditional=(PsiConditionalExpression)expression;
    final PsiExpression thenExpression=conditional.getThenExpression();
    final PsiExpression elseExpression=conditional.getElseExpression();
    return mayEvaluateToVariable(thenExpression,variable,builderPattern) || mayEvaluateToVariable(elseExpression,variable,builderPattern);
  }
  if (expression instanceof PsiArrayAccessExpression) {
    final PsiElement parent=expression.getParent();
    if (parent instanceof PsiArrayAccessExpression) {
      return false;
    }
    final PsiType type=variable.getType();
    if (!(type instanceof PsiArrayType)) {
      return false;
    }
    final PsiArrayType arrayType=(PsiArrayType)type;
    final int dimensions=arrayType.getArrayDimensions();
    if (dimensions <= 1) {
      return false;
    }
    PsiArrayAccessExpression arrayAccessExpression=(PsiArrayAccessExpression)expression;
    PsiExpression arrayExpression=arrayAccessExpression.getArrayExpression();
    int count=1;
    while (arrayExpression instanceof PsiArrayAccessExpression) {
      arrayAccessExpression=(PsiArrayAccessExpression)arrayExpression;
      arrayExpression=arrayAccessExpression.getArrayExpression();
      count++;
    }
    return count != dimensions && mayEvaluateToVariable(arrayExpression,variable,builderPattern);
  }
  if (builderPattern && expression instanceof PsiMethodCallExpression) {
    final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)expression;
    final PsiMethod method=methodCallExpression.resolveMethod();
    if (method == null) {
      return false;
    }
    final PsiType returnType=method.getReturnType();
    final PsiType variableType=variable.getType();
    if (!variableType.equals(returnType)) {
      return false;
    }
    final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
    final PsiExpression qualifier=methodExpression.getQualifierExpression();
    return mayEvaluateToVariable(qualifier,variable,builderPattern);
  }
  return evaluatesToVariable(expression,variable);
}
