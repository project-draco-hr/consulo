{
  JPanel panel=new JPanel(new BorderLayout());
  MultiMap<TemplateContextType,TemplateContextType> hierarchy=new MultiMap<TemplateContextType,TemplateContextType>(){
    @Override protected Map<TemplateContextType,Collection<TemplateContextType>> createMap(){
      return new LinkedHashMap<TemplateContextType,Collection<TemplateContextType>>();
    }
  }
;
  for (  TemplateContextType type : myContext.keySet()) {
    hierarchy.putValue(type.getBaseContextType(),type);
  }
  final CheckedTreeNode root=new CheckedTreeNode(Pair.create(null,"Hi"));
  final CheckboxTree checkboxTree=new CheckboxTree(new CheckboxTree.CheckboxTreeCellRenderer(){
    @Override public void customizeRenderer(    JTree tree,    Object value,    boolean selected,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      final Object o=((DefaultMutableTreeNode)value).getUserObject();
      if (o instanceof Pair) {
        getTextRenderer().append((String)((Pair)o).second);
      }
    }
  }
,root){
    @Override protected void onNodeStateChanged(    CheckedTreeNode node){
      final TemplateContextType type=(TemplateContextType)((Pair)node.getUserObject()).first;
      if (type != null) {
        myContext.put(type,node.isChecked());
      }
      myExpandByCombo.setEnabled(isExpandableFromEditor());
      updateHighlighter();
      onChange.run();
    }
  }
;
  for (  TemplateContextType type : hierarchy.get(null)) {
    addContextNode(hierarchy,root,type);
  }
  ((DefaultTreeModel)checkboxTree.getModel()).nodeStructureChanged(root);
  TreeUtil.traverse(root,new TreeUtil.Traverse(){
    @Override public boolean accept(    Object _node){
      final CheckedTreeNode node=(CheckedTreeNode)_node;
      if (node.isChecked()) {
        checkboxTree.expandPath(new TreePath(node.getPath()).getParentPath());
      }
      return true;
    }
  }
);
  panel.add(ScrollPaneFactory.createScrollPane(checkboxTree));
  final Dimension size=checkboxTree.getPreferredSize();
  panel.setPreferredSize(new Dimension(size.width + 30,Math.min(size.height + 10,500)));
  return panel;
}
