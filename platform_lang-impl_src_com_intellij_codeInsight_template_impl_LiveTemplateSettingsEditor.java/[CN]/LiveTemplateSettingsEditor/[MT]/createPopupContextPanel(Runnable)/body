{
  ChangeListener listener=new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      myExpandByCombo.setEnabled(isExpandableFromEditor());
    }
  }
;
  JPanel panel=new JPanel();
  panel.setLayout(new GridBagLayout());
  GridBagConstraints gbConstraints=new GridBagConstraints();
  gbConstraints.fill=GridBagConstraints.BOTH;
  gbConstraints.weightx=1;
  gbConstraints.weighty=1;
  int row=0;
  int col=0;
  for (  TemplateContextType contextType : myContext.keySet()) {
    gbConstraints.gridy=row;
    gbConstraints.gridx=col;
    JCheckBox cb=new JCheckBox(contextType.getPresentableName());
    cb.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        updateContextTypesEnabledState();
      }
    }
);
    cb.getModel().addChangeListener(listener);
    panel.add(cb,gbConstraints);
    myCbContextMap.put(contextType,cb);
    if (row == (myContext.size() + 1) / 2 - 1) {
      row=0;
      col=1;
    }
 else {
      row++;
    }
  }
  for (  JCheckBox checkBox : myCbContextMap.values()) {
    checkBox.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        updateHighlighter();
        onChange.run();
      }
    }
);
  }
  for (  TemplateContextType type : myCbContextMap.keySet()) {
    JCheckBox cb=myCbContextMap.get(type);
    cb.setSelected(myContext.get(type).booleanValue());
  }
  updateContextTypesEnabledState();
  new MnemonicHelper().register(panel);
  return panel;
}
