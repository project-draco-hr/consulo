{
  double energy=0.0;
  if (isOptimizeNodeDistribution == true) {
    if (approxNodeDimensions) {
      for (int j=0; j < v.length; j++) {
        if (i != j) {
          double vx=v[i].x - v[j].x;
          double vy=v[i].y - v[j].y;
          double distanceSquared=vx * vx + vy * vy;
          distanceSquared-=v[i].radiusSquared;
          distanceSquared-=v[j].radiusSquared;
          if (distanceSquared < minDistanceLimitSquared) {
            distanceSquared=minDistanceLimitSquared;
          }
          energy+=nodeDistributionCostFactor / distanceSquared;
        }
      }
    }
 else {
      for (int j=0; j < v.length; j++) {
        if (i != j) {
          double vx=v[i].x - v[j].x;
          double vy=v[i].y - v[j].y;
          double distanceSquared=vx * vx + vy * vy;
          distanceSquared-=v[i].radiusSquared;
          distanceSquared-=v[j].radiusSquared;
          if (distanceSquared < minDistanceLimitSquared) {
            distanceSquared=minDistanceLimitSquared;
          }
          energy+=nodeDistributionCostFactor / distanceSquared;
        }
      }
    }
  }
  return energy;
}
