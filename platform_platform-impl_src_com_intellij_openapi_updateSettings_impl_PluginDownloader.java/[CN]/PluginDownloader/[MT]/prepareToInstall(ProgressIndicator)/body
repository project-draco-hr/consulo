{
  IdeaPluginDescriptor ideaPluginDescriptor=null;
  if (PluginManager.isPluginInstalled(PluginId.getId(myPluginId))) {
    ideaPluginDescriptor=PluginManager.getPlugin(PluginId.getId(myPluginId));
    LOG.assertTrue(ideaPluginDescriptor != null);
    if (myPluginVersion != null && StringUtil.compareVersionNumbers(ideaPluginDescriptor.getVersion(),myPluginVersion) >= 0) {
      LOG.info("Plugin " + myPluginId + ": current version (max) "+ myPluginVersion);
      return false;
    }
    myOldFile=ideaPluginDescriptor.getPath();
  }
  String errorMessage=IdeBundle.message("unknown.error");
  try {
    myFile=downloadPlugin(pi);
  }
 catch (  IOException ex) {
    myFile=null;
    errorMessage=ex.getMessage();
  }
  if (myFile == null) {
    final String errorMessage1=errorMessage;
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      public void run(){
        Messages.showErrorDialog(IdeBundle.message("error.plugin.was.not.installed",getPluginName(),errorMessage1),IdeBundle.message("title.failed.to.download"));
      }
    }
);
    return false;
  }
  IdeaPluginDescriptorImpl descriptor=PluginManager.loadDescriptorFromJar(myFile);
  if (descriptor == null) {
    if (myFile.getName().endsWith(".zip")) {
      final File outputDir=FileUtil.createTempDirectory("plugin","");
      try {
        ZipUtil.extract(myFile,outputDir,new FilenameFilter(){
          public boolean accept(          final File dir,          final String name){
            return true;
          }
        }
);
        descriptor=PluginManager.loadDescriptor(new File(outputDir,FileUtil.getNameWithoutExtension(myFile)),PluginManager.PLUGIN_XML);
      }
  finally {
        FileUtil.delete(outputDir);
      }
    }
  }
  if (descriptor != null) {
    myPluginVersion=descriptor.getVersion();
    if (ideaPluginDescriptor != null && StringUtil.compareVersionNumbers(ideaPluginDescriptor.getVersion(),descriptor.getVersion()) >= 0) {
      LOG.info("Plugin " + myPluginId + ": current version (max) "+ myPluginVersion);
      return false;
    }
    final BuildNumber currentBuildNumber=ApplicationInfo.getInstance().getBuild();
    String sinceBuildString=descriptor.getSinceBuild();
    final BuildNumber sinceBuild=StringUtil.isEmptyOrSpaces(sinceBuildString) ? null : BuildNumber.fromString(sinceBuildString,descriptor.getName());
    if (sinceBuild != null && sinceBuild.compareTo(currentBuildNumber) > 0) {
      return false;
    }
    String untilBuildString=descriptor.getUntilBuild();
    final BuildNumber untilBuild=StringUtil.isEmptyOrSpaces(untilBuildString) ? null : BuildNumber.fromString(untilBuildString,descriptor.getName());
    if (untilBuild != null && untilBuild.compareTo(currentBuildNumber) < 0) {
      return false;
    }
  }
  return true;
}
