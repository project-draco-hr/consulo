{
  IdeaPluginDescriptor descriptor=null;
  if (!Boolean.getBoolean(StartupActionScriptManager.STARTUP_WIZARD_MODE) && PluginManager.isPluginInstalled(PluginId.getId(myPluginId))) {
    descriptor=PluginManager.getPlugin(PluginId.getId(myPluginId));
    LOG.assertTrue(descriptor != null);
    if (myPluginVersion != null && StringUtil.compareVersionNumbers(descriptor.getVersion(),myPluginVersion) >= 0) {
      LOG.info("Plugin " + myPluginId + ": current version (max) "+ myPluginVersion);
      return false;
    }
    myOldFile=descriptor.getPath();
  }
  String errorMessage=IdeBundle.message("unknown.error");
  try {
    myFile=downloadPlugin(pi);
  }
 catch (  IOException ex) {
    myFile=null;
    errorMessage=ex.getMessage();
  }
  if (myFile == null) {
    final String text=IdeBundle.message("error.plugin.was.not.installed",getPluginName(),errorMessage);
    final String title=IdeBundle.message("title.failed.to.download");
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      @Override public void run(){
        Messages.showErrorDialog(text,title);
      }
    }
);
    return false;
  }
  IdeaPluginDescriptorImpl actualDescriptor=loadDescriptionFromJar(myFile);
  if (actualDescriptor != null) {
    if (InstalledPluginsTableModel.wasUpdated(actualDescriptor.getPluginId())) {
      return false;
    }
    myPluginVersion=actualDescriptor.getVersion();
    if (descriptor != null && StringUtil.compareVersionNumbers(descriptor.getVersion(),actualDescriptor.getVersion()) >= 0) {
      LOG.info("Plugin " + myPluginId + ": current version (max) "+ myPluginVersion);
      return false;
    }
    if (PluginManagerCore.isIncompatible(actualDescriptor)) {
      LOG.info("Plugin " + myPluginId + " is incompatible with current installation (platformVersion: "+ actualDescriptor.getPlatformVersion()+ ")");
      return false;
    }
    setDescriptor(actualDescriptor);
  }
  return true;
}
