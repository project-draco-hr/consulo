{
  HttpURLConnection connection=(HttpURLConnection)new URL(myPluginUrl).openConnection();
  try {
    pi.setText(IdeBundle.message("progress.connecting"));
    InputStream is=UrlConnectionUtil.getConnectionInputStream(connection,pi);
    if (is == null) {
      throw new IOException("Failed to open connection");
    }
    pi.setText(IdeBundle.message("progress.downloading.plugin",getPluginName()));
    final File pluginsTemp=new File(PathManager.getPluginTempPath());
    if (!pluginsTemp.exists()) {
      pluginsTemp.mkdirs();
    }
    File file=FileUtil.createTempFile(pluginsTemp,"plugin","download",true,false);
    int responseCode=connection.getResponseCode();
switch (responseCode) {
case HttpURLConnection.HTTP_OK:
      break;
default :
    throw new IOException(IdeBundle.message("error.connection.failed.with.http.code.N",responseCode));
}
pi.setIndeterminate(connection.getContentLength() == -1);
OutputStream fos=null;
try {
  fos=new BufferedOutputStream(new FileOutputStream(file,false));
  StreamUtil.copyStreamContent(is,fos);
}
  finally {
  if (fos != null) {
    fos.close();
  }
  is.close();
}
if (myFileName == null) {
  String contentDisposition=connection.getHeaderField("Content-Disposition");
  if (contentDisposition == null || contentDisposition.indexOf(FILENAME) < 0) {
    String usedURL=connection.getURL().toString();
    int startPos=usedURL.lastIndexOf("/");
    myFileName=usedURL.substring(startPos + 1);
    if (myFileName.length() == 0 || myFileName.contains("?")) {
      myFileName=myPluginUrl.substring(myPluginUrl.lastIndexOf("/") + 1);
    }
  }
 else {
    int startIdx=contentDisposition.indexOf(FILENAME);
    myFileName=contentDisposition.substring(startIdx + FILENAME.length(),contentDisposition.length());
    if (myFileName.startsWith("\"") && myFileName.endsWith("\"")) {
      myFileName=myFileName.substring(1,myFileName.length() - 1);
    }
    if (myFileName.indexOf('\\') >= 0 || myFileName.indexOf('/') >= 0 || myFileName.indexOf(File.separatorChar) >= 0 || myFileName.indexOf('\"') >= 0) {
      FileUtil.delete(file);
      throw new IOException("Invalid filename returned by server");
    }
  }
}
File newFile=new File(file.getParentFile(),myFileName);
FileUtil.rename(file,newFile);
return newFile;
}
  finally {
connection.disconnect();
}
}
