{
  LOG.assertTrue(myFile != null);
  if (myOldFile != null) {
    StartupActionScriptManager.ActionCommand deleteOld=new StartupActionScriptManager.DeleteCommand(myOldFile);
    StartupActionScriptManager.addActionCommand(deleteOld);
  }
  if (myIsPlatform) {
    if (indicator != null) {
      indicator.setText2(IdeBundle.message("progress.extracting.platform"));
    }
    String prefix=SystemInfo.isMac ? "Consulo.app/Contents/platform/" : "Consulo/platform/";
    File platformDirectory=PathManager.getPlatformDirectory();
    try (TarArchiveInputStream ais=new TarArchiveInputStream(new GzipCompressorInputStream(new FileInputStream(myFile)))){
      TarArchiveEntry tempEntry;
      while ((tempEntry=(TarArchiveEntry)ais.getNextEntry()) != null) {
        String name=tempEntry.getName();
        if (name.startsWith(prefix) && name.length() != prefix.length()) {
          File targetFile=new File(platformDirectory,name.substring(prefix.length(),name.length()));
          Path targetPath=targetFile.toPath();
          if (tempEntry.isDirectory()) {
            Files.createDirectories(targetPath);
          }
 else {
            try (OutputStream stream=Files.newOutputStream(targetPath)){
              StreamUtil.copyStreamContent(ais,stream);
            }
             Files.setLastModifiedTime(targetPath,FileTime.fromMillis(tempEntry.getLastModifiedDate().getTime()));
            PathUtil.setPosixFilePermissions(targetPath,PathUtil.convertModeToFilePermissions(tempEntry.getMode()));
          }
        }
      }
    }
     FileUtil.delete(myFile);
    myFile=null;
  }
 else {
    install(myFile,getPluginName(),deleteTempFile);
  }
}
