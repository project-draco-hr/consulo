{
  final ColorAndFontOptions colorAndFontOptions=new ColorAndFontOptions(){
    @Override protected List<ColorAndFontPanelFactory> createPanelFactories(){
      final GeneralColorsPage colorsPage=new GeneralColorsPage();
      final ColorAndFontPanelFactory panelFactory=new ColorAndFontPanelFactory(){
        @NotNull @Override public NewColorAndFontPanel createPanel(        @NotNull ColorAndFontOptions options){
          final SimpleEditorPreview preview=new SimpleEditorPreview(options,colorsPage);
          return NewColorAndFontPanel.create(preview,colorsPage.getDisplayName(),options,null,colorsPage);
        }
        @NotNull @Override public String getPanelDisplayName(){
          return "Editor | " + getDisplayName() + " | "+ colorsPage.getDisplayName();
        }
      }
;
      return Collections.singletonList(panelFactory);
    }
  }
;
  final Configurable[] configurables=colorAndFontOptions.buildConfigurables();
  try {
    final SearchableConfigurable general=colorAndFontOptions.findSubConfigurable(GeneralColorsPage.class);
    if (general != null) {
      final LineData lineData=getLineData(myLineNumber);
      ShowSettingsUtil.getInstance().editConfigurable(myEditor.getProject(),general,general.enableSearch(getAttributesKey(lineData).getExternalName()));
    }
  }
  finally {
    for (    Configurable configurable : configurables) {
      configurable.disposeUIResources();
    }
    colorAndFontOptions.disposeUIResources();
  }
}
