{
  if (!CodeInsightSettings.getInstance().SMART_INDENT_ON_ENTER) {
    return Result.Continue;
  }
  final CaretModel caretModel=editor.getCaretModel();
  final int caretOffset=caretModel.getOffset();
  final Pair<JavadocHelper.JavadocParameterInfo,List<JavadocHelper.JavadocParameterInfo>> pair=myHelper.parse(file,editor,caretOffset);
  if (pair.first == null || pair.first.parameterDescriptionStartPosition == null) {
    return Result.Continue;
  }
  final LogicalPosition caretPosition=caretModel.getLogicalPosition();
  final int descriptionStartColumn=pair.first.parameterDescriptionStartPosition.column;
  final LogicalPosition desiredPosition=new LogicalPosition(caretPosition.line,descriptionStartColumn);
  final Document document=editor.getDocument();
  final CharSequence text=document.getCharsSequence();
  final int offsetAfterLastWs=CharArrayUtil.shiftForward(text,caretOffset," \t");
  if (editor.offsetToLogicalPosition(offsetAfterLastWs).column < desiredPosition.column) {
    final int lineStartOffset=document.getLineStartOffset(desiredPosition.line);
    final String toInsert=StringUtil.repeat(" ",desiredPosition.column - (offsetAfterLastWs - lineStartOffset));
    ApplicationManager.getApplication().runWriteAction(new Runnable(){
      @Override public void run(){
        document.insertString(caretOffset,toInsert);
        PsiDocumentManager.getInstance(file.getProject()).commitDocument(document);
      }
    }
);
  }
  myHelper.navigate(desiredPosition,editor,file.getProject());
  return Result.Stop;
}
