{
  final PsiElement element=descriptor.getPsiElement();
  final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)element.getParent().getParent();
  final PsiStatement statement=PsiTreeUtil.getParentOfType(methodCallExpression,PsiStatement.class);
  if (statement == null) {
    return;
  }
  final List<PsiStatement> logStatements=new ArrayList();
  logStatements.add(statement);
  final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
  final String referenceName=methodExpression.getReferenceName();
  if (referenceName == null) {
    return;
  }
  PsiStatement previousStatement=PsiTreeUtil.getPrevSiblingOfType(statement,PsiStatement.class);
  while (previousStatement != null && isSameLogMethodCall(previousStatement,referenceName)) {
    logStatements.add(0,previousStatement);
    previousStatement=PsiTreeUtil.getPrevSiblingOfType(previousStatement,PsiStatement.class);
  }
  PsiStatement nextStatement=PsiTreeUtil.getNextSiblingOfType(statement,PsiStatement.class);
  while (nextStatement != null && isSameLogMethodCall(nextStatement,referenceName)) {
    logStatements.add(nextStatement);
    nextStatement=PsiTreeUtil.getNextSiblingOfType(nextStatement,PsiStatement.class);
  }
  final PsiElementFactory factory=JavaPsiFacade.getInstance(project).getElementFactory();
  final PsiExpression qualifier=methodExpression.getQualifierExpression();
  if (qualifier == null) {
    return;
  }
  @NonNls final StringBuilder ifStatementText=new StringBuilder("if (");
  ifStatementText.append(qualifier.getText());
  ifStatementText.append('.');
  final int index=logMethodNameList.indexOf(referenceName);
  final String conditionMethodText=logConditionMethodNameList.get(index);
  ifStatementText.append(conditionMethodText);
  ifStatementText.append(") {}");
  final PsiIfStatement ifStatement=(PsiIfStatement)factory.createStatementFromText(ifStatementText.toString(),statement);
  final PsiBlockStatement blockStatement=(PsiBlockStatement)ifStatement.getThenBranch();
  if (blockStatement == null) {
    return;
  }
  final PsiCodeBlock codeBlock=blockStatement.getCodeBlock();
  for (  PsiStatement logStatement : logStatements) {
    codeBlock.add(logStatement);
  }
  final PsiStatement firstStatement=logStatements.get(0);
  final PsiElement parent=firstStatement.getParent();
  final PsiElement result=parent.addBefore(ifStatement,firstStatement);
  final JavaCodeStyleManager codeStyleManager=JavaCodeStyleManager.getInstance(project);
  codeStyleManager.shortenClassReferences(result);
  for (  PsiStatement logStatement : logStatements) {
    logStatement.delete();
  }
}
