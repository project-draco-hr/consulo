{
  final MyKey key;
  if (connectionSettings.isUseProxy()) {
    key=new MyKey(repository,authentication.getLogin(),connectionSettings.getHostName(),connectionSettings.getPort(),connectionSettings.getProxyHostName(),connectionSettings.getProxyPort(),connectionSettings.getProxyLogin());
  }
 else {
    key=new MyKey(repository,authentication.getLogin(),connectionSettings.getHostName(),connectionSettings.getPort(),null,-1,null);
  }
synchronized (myLock) {
    SshSharedConnection connection=myPool.get(key);
    if ((connection != null) && (!connection.isValid())) {
      SshLogger.debug("removing invalid connection from pool: " + connectionSettings.getHostName());
      myPool.remove(key);
      connection=null;
    }
    SshLogger.debug("(group of) connections found in pool: " + (connection != null));
    if (connection == null) {
      connection=new SshSharedConnection(repository,connectionSettings,authentication);
      myPool.put(key,connection);
    }
    SshLogger.debug("returning a ticket...");
    return connection.getTicket();
  }
}
