{
  if (myInputIdMapping != null) {
    if (!(myInputIdMapping instanceof THashMap)) {
      return new ValueIterator<Value>(){
        private Value value=(Value)myInputIdMapping;
        @NotNull @Override public IntIterator getInputIdsIterator(){
          return getIntIteratorOutOfFileSetObject(getFileSetObject());
        }
        @NotNull @Override public IntPredicate getValueAssociationPredicate(){
          return getPredicateOutOfFileSetObject(getFileSetObject());
        }
        @Override public Object getFileSetObject(){
          return myInputIdMappingValue;
        }
        @Override public boolean hasNext(){
          return value != null;
        }
        @Override public Value next(){
          Value next=value;
          if (next == myNullValue)           next=null;
          value=null;
          return next;
        }
        @Override public void remove(){
          throw new UnsupportedOperationException();
        }
      }
;
    }
 else {
      return new ValueIterator<Value>(){
        private Value current;
        private Object currentValue;
        private final THashMap<Value,Object> myMapping=((THashMap<Value,Object>)myInputIdMapping);
        private final Iterator<Value> iterator=myMapping.keySet().iterator();
        @Override public boolean hasNext(){
          return iterator.hasNext();
        }
        @Override public Value next(){
          current=iterator.next();
          Value next=current;
          currentValue=myMapping.get(next);
          if (next == myNullValue)           next=null;
          return next;
        }
        @Override public void remove(){
          throw new UnsupportedOperationException();
        }
        @NotNull @Override public IntIterator getInputIdsIterator(){
          return getIntIteratorOutOfFileSetObject(getFileSetObject());
        }
        @NotNull @Override public IntPredicate getValueAssociationPredicate(){
          return getPredicateOutOfFileSetObject(getFileSetObject());
        }
        @Override public Object getFileSetObject(){
          if (current == null)           throw new IllegalStateException();
          return currentValue;
        }
      }
;
    }
  }
 else {
    return emptyIterator;
  }
}
