{
  FileId2ValueMapping<Value> mapping=null;
  while (stream.available() > 0) {
    final int valueCount=DataInputOutputUtil.readINT(stream);
    if (valueCount < 0) {
      final int inputId=-valueCount;
      if (mapping == null && size() > NUMBER_OF_VALUES_THRESHOLD) {
        mapping=new FileId2ValueMapping<Value>(this);
      }
      boolean doCompact;
      if (mapping != null) {
        doCompact=mapping.removeFileId(inputId);
      }
 else {
        removeAssociatedValue(inputId);
        doCompact=true;
      }
      if (doCompact)       setNeedsCompacting(true);
    }
 else {
      for (int valueIdx=0; valueIdx < valueCount; valueIdx++) {
        final Value value=externalizer.read(stream);
        int idCountOrSingleValue=DataInputOutputUtil.readINT(stream);
        if (idCountOrSingleValue > 0) {
          addValue(idCountOrSingleValue,value);
          if (mapping != null)           mapping.associateFileIdToValue(idCountOrSingleValue,value);
        }
 else {
          idCountOrSingleValue=-idCountOrSingleValue;
          ensureFileSetCapacityForValue(value,idCountOrSingleValue);
          int prev=0;
          for (int i=0; i < idCountOrSingleValue; i++) {
            final int id=DataInputOutputUtil.readINT(stream);
            addValue(prev + id,value);
            if (mapping != null)             mapping.associateFileIdToValue(prev + id,value);
            prev+=id;
          }
        }
      }
    }
  }
}
