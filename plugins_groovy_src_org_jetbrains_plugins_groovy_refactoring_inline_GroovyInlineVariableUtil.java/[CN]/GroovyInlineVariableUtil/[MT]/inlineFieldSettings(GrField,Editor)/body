{
  final String localName=field.getName();
  final Project project=field.getProject();
  if (!field.hasModifierProperty(GrModifier.FINAL)) {
    String message=RefactoringBundle.message("0.refactoring.is.supported.only.for.final.fields",REFACTORING_NAME);
    CommonRefactoringUtil.showErrorHint(project,editor,message,REFACTORING_NAME,HelpID.INLINE_FIELD);
    return null;
  }
  if (field.getInitializerGroovy() == null) {
    String message=GroovyRefactoringBundle.message("cannot.find.a.single.definition.to.inline.field");
    CommonRefactoringUtil.showErrorHint(project,editor,message,REFACTORING_NAME,HelpID.INLINE_FIELD);
    return null;
  }
  final Collection<PsiReference> refs=ReferencesSearch.search(field).findAll();
  ArrayList<PsiElement> exprs=new ArrayList<PsiElement>();
  for (  PsiReference ref : refs) {
    exprs.add(ref.getElement());
  }
  GroovyRefactoringUtil.highlightOccurrences(project,editor,PsiUtilBase.toPsiElementArray(exprs));
  if (refs.isEmpty()) {
    String message=GroovyRefactoringBundle.message("field.is.never.used.0",field.getName());
    CommonRefactoringUtil.showErrorHint(project,editor,message,REFACTORING_NAME,HelpID.INLINE_FIELD);
    return null;
  }
  return inlineDialogResult(localName,project,refs,true,false);
}
