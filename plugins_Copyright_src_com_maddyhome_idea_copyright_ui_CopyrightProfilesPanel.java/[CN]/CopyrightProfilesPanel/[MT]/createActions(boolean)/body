{
  ArrayList<AnAction> result=new ArrayList<AnAction>();
  result.add(new AnAction("Add","Add",Icons.ADD_ICON){
{
      registerCustomShortcutSet(CommonShortcuts.INSERT,myTree);
    }
    public void actionPerformed(    AnActionEvent event){
      final String name=askForProfileName("Create new copyright profile");
      if (name == null)       return;
      final CopyrightProfile copyrightProfile=new CopyrightProfile(name);
      addProfileNode(copyrightProfile);
    }
  }
);
  result.add(new MyDeleteAction(Conditions.alwaysTrue()));
  result.add(new AnAction("Copy","Copy",COPY_ICON){
{
      registerCustomShortcutSet(new CustomShortcutSet(KeyStroke.getKeyStroke(KeyEvent.VK_D,KeyEvent.CTRL_MASK)),myTree);
    }
    public void actionPerformed(    AnActionEvent event){
      final String profileName=askForProfileName("Copy copyright profile");
      if (profileName == null)       return;
      final CopyrightProfile clone=new CopyrightProfile();
      clone.copyFrom((CopyrightProfile)getSelectedObject());
      clone.setName(profileName);
      addProfileNode(clone);
    }
    public void update(    AnActionEvent event){
      super.update(event);
      event.getPresentation().setEnabled(getSelectedObject() != null);
    }
  }
);
  result.add(new AnAction("Import","Import",Icons.ADVICE_ICON){
    public void actionPerformed(    AnActionEvent event){
      final OpenProjectFileChooserDescriptor descriptor=new OpenProjectFileChooserDescriptor(true){
        @Override public boolean isFileVisible(        VirtualFile file,        boolean showHiddenFiles){
          return super.isFileVisible(file,showHiddenFiles) || canContainCopyright(file);
        }
        @Override public boolean isFileSelectable(        VirtualFile file){
          return super.isFileSelectable(file) || canContainCopyright(file);
        }
        private boolean canContainCopyright(        VirtualFile file){
          return !file.isDirectory() && (file.getFileType() == StdFileTypes.IDEA_MODULE || file.getFileType() == StdFileTypes.XML);
        }
      }
;
      descriptor.setTitle("Choose file containing copyright notice");
      final VirtualFile[] files=FileChooser.chooseFiles(myProject,descriptor);
      if (files.length != 1)       return;
      final CopyrightProfile copyrightProfile=new CopyrightProfile();
      if (ExternalOptionHelper.loadOptions(VfsUtil.virtualToIoFile(files[0]),copyrightProfile)) {
        final String profileName=askForProfileName("Import copyright profile");
        if (profileName == null)         return;
        copyrightProfile.setName(profileName);
        addProfileNode(copyrightProfile);
        Messages.showInfoMessage(myProject,"The copyright settings have been successfully imported.","Import Complete");
      }
 else {
        Messages.showWarningDialog(myProject,"The selected file did not contain any copyright settings.","Import Failure");
      }
    }
  }
);
  return result;
}
