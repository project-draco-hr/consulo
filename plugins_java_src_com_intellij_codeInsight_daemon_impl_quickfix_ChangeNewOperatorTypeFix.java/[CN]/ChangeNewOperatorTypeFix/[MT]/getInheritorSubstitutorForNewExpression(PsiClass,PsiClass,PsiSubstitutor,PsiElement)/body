{
  final Project project=baseClass.getProject();
  JavaPsiFacade facade=JavaPsiFacade.getInstance(project);
  final PsiResolveHelper resolveHelper=facade.getResolveHelper();
  PsiSubstitutor superSubstitutor=TypeConversionUtil.getClassSubstitutor(baseClass,inheritor,PsiSubstitutor.EMPTY);
  if (superSubstitutor == null)   return null;
  PsiSubstitutor inheritorSubstitutor=PsiSubstitutor.EMPTY;
  for (  PsiTypeParameter inheritorParameter : PsiUtil.typeParametersIterable(inheritor)) {
    for (    PsiTypeParameter baseParameter : PsiUtil.typeParametersIterable(baseClass)) {
      final PsiType substituted=superSubstitutor.substitute(baseParameter);
      PsiType arg=baseSubstitutor.substitute(baseParameter);
      if (arg instanceof PsiWildcardType)       arg=((PsiWildcardType)arg).getBound();
      PsiType substitution=resolveHelper.getSubstitutionForTypeParameter(inheritorParameter,substituted,arg,true,PsiUtil.getLanguageLevel(context));
      if (PsiType.NULL.equals(substitution))       continue;
      if (substitution == null) {
        return facade.getElementFactory().createRawSubstitutor(inheritor);
      }
      inheritorSubstitutor=inheritorSubstitutor.put(inheritorParameter,substitution);
      break;
    }
  }
  return inheritorSubstitutor;
}
