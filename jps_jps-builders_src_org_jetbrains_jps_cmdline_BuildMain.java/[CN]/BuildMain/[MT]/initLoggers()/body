{
  try {
    final String logDir=System.getProperty(GlobalOptions.LOG_DIR_OPTION,null);
    final File configFile=logDir != null ? new File(logDir,LOG_CONFIG_FILE_NAME) : new File(LOG_CONFIG_FILE_NAME);
    ensureLogConfigExists(configFile);
    String text=FileUtil.loadFile(configFile);
    final String logFile=logDir != null ? new File(logDir,LOG_FILE_NAME).getAbsolutePath() : LOG_FILE_NAME;
    text=StringUtil.replace(text,LOG_FILE_MACRO,StringUtil.replace(logFile,"\\","\\\\"));
    new DOMConfigurator().doConfigure(new StringReader(text),LogManager.getLoggerRepository());
  }
 catch (  IOException e) {
    System.err.println("Failed to configure logging: ");
    e.printStackTrace(System.err);
  }
  Logger.setFactory(new Logger.Factory(){
    @Override public Logger getLoggerInstance(    String category){
      final org.apache.log4j.Logger logger=org.apache.log4j.Logger.getLogger(category);
      return new Logger(){
        @Override public boolean isDebugEnabled(){
          return logger.isDebugEnabled();
        }
        @Override public void debug(        @NonNls String message){
          logger.debug(message);
        }
        @Override public void debug(        @Nullable Throwable t){
          logger.debug("",t);
        }
        @Override public void debug(        @NonNls String message,        @Nullable Throwable t){
          logger.debug(message,t);
        }
        @Override public void error(        @NonNls String message,        @Nullable Throwable t,        @NonNls String... details){
          logger.error(message,t);
        }
        @Override public void info(        @NonNls String message){
          logger.info(message);
        }
        @Override public void info(        @NonNls String message,        @Nullable Throwable t){
          logger.info(message,t);
        }
        @Override public void warn(        @NonNls String message,        @Nullable Throwable t){
          logger.warn(message,t);
        }
        @Override public void setLevel(        Level level){
          logger.setLevel(level);
        }
      }
;
    }
  }
);
}
