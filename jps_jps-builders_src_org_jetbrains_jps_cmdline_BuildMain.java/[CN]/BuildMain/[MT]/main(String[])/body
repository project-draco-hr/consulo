{
  final String host=args[0];
  final int port=Integer.parseInt(args[1]);
  final UUID sessionId=UUID.fromString(args[2]);
  final File systemDir=new File(FileUtil.toCanonicalPath(args[3]));
  Utils.setSystemRoot(systemDir);
  initLoggers();
  final ClientBootstrap bootstrap=new ClientBootstrap(new NioClientSocketChannelFactory(SharedThreadPool.INSTANCE,SharedThreadPool.INSTANCE,1));
  bootstrap.setPipelineFactory(new ChannelPipelineFactory(){
    public ChannelPipeline getPipeline() throws Exception {
      return Channels.pipeline(new ProtobufVarint32FrameDecoder(),new ProtobufDecoder(CmdlineRemoteProto.Message.getDefaultInstance()),new ProtobufVarint32LengthFieldPrepender(),new ProtobufEncoder(),new MyMessageHandler(sessionId));
    }
  }
);
  bootstrap.setOption("tcpNoDelay",true);
  bootstrap.setOption("keepAlive",true);
  final ChannelFuture future=bootstrap.connect(new InetSocketAddress(host,port));
  future.awaitUninterruptibly();
  final boolean success=future.isSuccess();
  if (success) {
    Channels.write(future.getChannel(),CmdlineProtoUtil.toMessage(sessionId,CmdlineProtoUtil.createParamRequest()));
  }
 else {
    final Throwable reason=future.getCause();
    if (reason != null) {
      System.err.println("Error connecting to " + host + ":"+ port+ "; "+ reason.getMessage());
      reason.printStackTrace(System.err);
    }
    System.exit(-1);
  }
}
