{
  System.out.println("Build process started. Classpath: " + System.getProperty("java.class.path"));
  final String host=args[0];
  final int port=Integer.parseInt(args[1]);
  final UUID sessionId=UUID.fromString(args[2]);
  final File systemDir=new File(FileUtil.toCanonicalPath(args[3]));
  Utils.setSystemRoot(systemDir);
  initLoggers();
  ourChannelFactory=new NioClientSocketChannelFactory(SharedThreadPool.INSTANCE,SharedThreadPool.INSTANCE,1);
  final ClientBootstrap bootstrap=new ClientBootstrap(ourChannelFactory);
  bootstrap.setPipelineFactory(new ChannelPipelineFactory(){
    public ChannelPipeline getPipeline() throws Exception {
      return Channels.pipeline(new ProtobufVarint32FrameDecoder(),new ProtobufDecoder(CmdlineRemoteProto.Message.getDefaultInstance()),new ProtobufVarint32LengthFieldPrepender(),new ProtobufEncoder(),new MyMessageHandler(sessionId));
    }
  }
);
  bootstrap.setOption("tcpNoDelay",true);
  bootstrap.setOption("keepAlive",true);
  final ChannelFuture future=bootstrap.connect(new InetSocketAddress(host,port));
  future.awaitUninterruptibly();
  final boolean success=future.isSuccess();
  if (success) {
    Channels.write(future.getChannel(),CmdlineProtoUtil.toMessage(sessionId,CmdlineProtoUtil.createParamRequest()));
  }
 else {
    final Throwable reason=future.getCause();
    System.err.println("Error connecting to " + host + ":"+ port+ "; reason: "+ (reason != null ? reason.getMessage() : "unknown"));
    if (reason != null) {
      reason.printStackTrace(System.err);
    }
    System.err.println("Exiting.");
    System.exit(-1);
  }
}
