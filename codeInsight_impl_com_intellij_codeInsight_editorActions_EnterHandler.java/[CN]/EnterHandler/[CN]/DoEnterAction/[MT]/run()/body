{
  try {
    final CharSequence chars=myDocument.getCharsSequence();
    int offset=CharArrayUtil.shiftBackwardUntil(chars,myOffset - 1,LINE_SEPARATOR) - 1;
    offset=CharArrayUtil.shiftBackwardUntil(chars,offset,LINE_SEPARATOR) + 1;
    if (offset < 0)     offset=0;
    int lineStart=CharArrayUtil.shiftForward(chars,offset," \t");
    final Commenter langCommenter=PsiUtil.getLanguageAtOffset(myFile,offset).getCommenter();
    final boolean isInsideJavalikeCode=langCommenter instanceof CodeDocumentationAwareCommenter;
    final CodeDocumentationAwareCommenter commenter=isInsideJavalikeCode ? (CodeDocumentationAwareCommenter)langCommenter : null;
    boolean docStart=isInsideJavalikeCode && commenter.getDocumentationCommentPrefix() != null && CharArrayUtil.regionMatches(chars,lineStart,commenter.getDocumentationCommentPrefix());
    boolean cStyleStart=isInsideJavalikeCode && commenter.getBlockCommentPrefix() != null && CharArrayUtil.regionMatches(chars,lineStart,commenter.getBlockCommentPrefix());
    boolean docAsterisk=isInsideJavalikeCode && commenter.getDocumentationCommentLinePrefix() != null && CharArrayUtil.regionMatches(chars,lineStart,commenter.getDocumentationCommentLinePrefix());
    final int firstNonSpaceInLine=CharArrayUtil.shiftForward(chars,myOffset," \t");
    boolean slashSlash=isInsideJavalikeCode && commenter.getLineCommentPrefix() != null && CharArrayUtil.regionMatches(chars,lineStart,commenter.getLineCommentPrefix()) && firstNonSpaceInLine < chars.length() && chars.charAt(firstNonSpaceInLine) != '\n';
    if (docStart) {
      PsiElement element=myFile.findElementAt(lineStart);
      final String text=element.getText();
      final PsiElement parent=element.getParent();
      if (text.equals(commenter.getDocumentationCommentPrefix()) && parent instanceof PsiDocComment || text.startsWith(commenter.getDocumentationCommentPrefix()) && element instanceof PsiComment) {
        PsiComment comment=parent instanceof PsiDocComment ? (PsiDocComment)parent : (PsiComment)element;
        int commentEnd=comment.getTextRange().getEndOffset();
        if (myOffset >= commentEnd) {
          docStart=false;
        }
 else {
          if (isCommentComplete(comment,commenter)) {
            if (myOffset >= commentEnd) {
              docAsterisk=false;
              docStart=false;
            }
 else {
              docAsterisk=true;
              docStart=false;
            }
          }
 else {
            generateJavadoc(commenter);
          }
        }
      }
 else {
        docStart=false;
      }
    }
 else     if (cStyleStart) {
      PsiElement element=myFile.findElementAt(lineStart);
      if (element instanceof PsiComment && commenter.getBlockCommentTokenType() == ((PsiComment)element).getTokenType()) {
        final PsiComment comment=(PsiComment)element;
        int commentEnd=comment.getTextRange().getEndOffset();
        if (myOffset >= commentEnd) {
          docStart=false;
        }
 else {
          if (isCommentComplete(comment,commenter)) {
            if (myOffset >= commentEnd) {
              docAsterisk=false;
              docStart=false;
            }
 else {
              docAsterisk=true;
              docStart=false;
            }
          }
 else {
            final int currentEndOfLine=CharArrayUtil.shiftForwardUntil(chars,myOffset,"\n");
            myDocument.insertString(currentEndOfLine," " + commenter.getBlockCommentSuffix());
            int lstart=CharArrayUtil.shiftBackwardUntil(chars,myOffset,"\n");
            myDocument.insertString(currentEndOfLine,chars.subSequence(lstart,myOffset));
          }
        }
      }
 else {
        docStart=false;
      }
    }
    if (docAsterisk) {
      docAsterisk=insertDocAsterisk(lineStart,docAsterisk,commenter);
    }
    if (CodeInsightSettings.getInstance().SMART_INDENT_ON_ENTER || myForceIndent || docStart|| docAsterisk|| slashSlash) {
      myOffset=CodeStyleManager.getInstance(getProject()).adjustLineIndent(myFile,myOffset);
    }
    if (docAsterisk || docStart || slashSlash) {
      if (myInsertSpace) {
        if (myOffset == myDocument.getTextLength()) {
          myDocument.insertString(myOffset," ");
        }
        myDocument.insertString(myOffset + 1," ");
      }
      final char c=myDocument.getCharsSequence().charAt(myOffset);
      if (c != '\n') {
        myOffset+=1;
      }
    }
    if ((docAsterisk || slashSlash) && !docStart) {
      myCaretAdvance=slashSlash ? commenter.getLineCommentPrefix().length() : 1;
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
  myEditor.getCaretModel().moveToOffset(myOffset);
  myEditor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
  myEditor.getSelectionModel().removeSelection();
  if (myCaretAdvance != 0) {
    LogicalPosition caretPosition=myEditor.getCaretModel().getLogicalPosition();
    LogicalPosition pos=new LogicalPosition(caretPosition.line,caretPosition.column + myCaretAdvance);
    myEditor.getCaretModel().moveToLogicalPosition(pos);
  }
}
