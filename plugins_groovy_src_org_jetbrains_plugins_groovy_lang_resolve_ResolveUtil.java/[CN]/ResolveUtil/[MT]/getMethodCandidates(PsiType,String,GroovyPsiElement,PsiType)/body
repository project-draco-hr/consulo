{
  if (methodName == null)   return GroovyResolveResult.EMPTY_ARRAY;
  MethodResolverProcessor processor=new MethodResolverProcessor(methodName,place,false,thisType,argumentTypes,PsiType.EMPTY_ARRAY);
  processCandidatesInner(thisType,place,processor);
  boolean hasApplicableMethods=processor.hasApplicableCandidates();
  final GroovyResolveResult[] methodCandidates=processor.getCandidates();
  if (hasApplicableMethods && methodCandidates.length == 1)   return methodCandidates;
  PropertyResolverProcessor propertyResolver=new PropertyResolverProcessor(methodName,place);
  processCandidatesInner(thisType,place,propertyResolver);
  final GroovyResolveResult[] allPropertyCandidates=propertyResolver.getCandidates();
  List<GroovyResolveResult> propertyCandidates=new ArrayList<GroovyResolveResult>(allPropertyCandidates.length);
  for (  GroovyResolveResult candidate : allPropertyCandidates) {
    final PsiElement resolved=candidate.getElement();
    if (!(resolved instanceof GrField))     continue;
    final PsiType type=((GrField)resolved).getTypeGroovy();
    if (isApplicableClosureType(type,argumentTypes,place)) {
      propertyCandidates.add(candidate);
    }
  }
  for (  GroovyResolveResult candidate : propertyCandidates) {
    final PsiElement element=candidate.getElement();
    if (element instanceof GrField) {
      final PsiClass containingClass=((PsiField)element).getContainingClass();
      if (containingClass != null && PsiTreeUtil.isContextAncestor(containingClass,place,true)) {
        return new GroovyResolveResult[]{candidate};
      }
    }
  }
  List<GroovyResolveResult> allCandidates=new ArrayList<GroovyResolveResult>();
  if (hasApplicableMethods) {
    ContainerUtil.addAll(allCandidates,methodCandidates);
  }
  ContainerUtil.addAll(allCandidates,propertyCandidates);
  for (  String getterName : GroovyPropertyUtils.suggestGettersName(methodName)) {
    AccessorResolverProcessor getterResolver=new AccessorResolverProcessor(getterName,place,true);
    processCandidatesInner(thisType,place,getterResolver);
    final GroovyResolveResult[] candidates=getterResolver.getCandidates();
    final List<GroovyResolveResult> applicable=new ArrayList<GroovyResolveResult>();
    for (    GroovyResolveResult candidate : candidates) {
      final PsiType type=getSmartReturnType((PsiMethod)candidate.getElement());
      if (isApplicableClosureType(type,argumentTypes,place)) {
        applicable.add(candidate);
      }
    }
    if (applicable.size() == 1) {
      return applicable.toArray(new GroovyResolveResult[applicable.size()]);
    }
    ContainerUtil.addAll(allCandidates,applicable);
  }
  if (allCandidates.size() > 0) {
    return allCandidates.toArray(new GroovyResolveResult[allCandidates.size()]);
  }
  return GroovyResolveResult.EMPTY_ARRAY;
}
