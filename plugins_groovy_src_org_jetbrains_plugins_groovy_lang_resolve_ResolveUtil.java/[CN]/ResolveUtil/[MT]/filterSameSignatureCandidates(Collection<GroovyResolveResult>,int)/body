{
  GroovyResolveResult[] array=candidates.toArray(new GroovyResolveResult[candidates.size()]);
  if (array.length == 1)   return array;
  List<GroovyResolveResult> result=new ArrayList<GroovyResolveResult>();
  result.add(array[0]);
  Outer:   for (int i=1; i < array.length; i++) {
    PsiElement currentElement=array[i].getElement();
    if (currentElement instanceof PsiMethod) {
      PsiMethod currentMethod=(PsiMethod)currentElement;
      for (Iterator<GroovyResolveResult> iterator=result.iterator(); iterator.hasNext(); ) {
        final GroovyResolveResult otherResolveResult=iterator.next();
        PsiElement element=otherResolveResult.getElement();
        if (element instanceof PsiMethod) {
          PsiMethod method=(PsiMethod)element;
          if (dominated(currentMethod,array[i].getSubstitutor(),method,otherResolveResult.getSubstitutor(),argumentCount)) {
            continue Outer;
          }
 else           if (dominated(method,otherResolveResult.getSubstitutor(),currentMethod,array[i].getSubstitutor(),argumentCount)) {
            iterator.remove();
          }
        }
      }
    }
    result.add(array[i]);
  }
  return result.toArray(new GroovyResolveResult[result.size()]);
}
