{
  final Map<String,Map<String,PsiType>> cache=CachedValuesManager.getManager(project).getCachedValue(project,new CachedValueProvider<Map<String,Map<String,PsiType>>>(){
    @Override public Result<Map<String,Map<String,PsiType>>> compute(){
      final Map<String,Map<String,PsiType>> result=new ConcurrentHashMap<String,Map<String,PsiType>>();
      return Result.create(result,PsiModificationTracker.JAVA_STRUCTURE_MODIFICATION_COUNT,ProjectRootManager.getInstance(project));
    }
  }
);
  final PsiClass cls=PsiUtil.resolveClassInType(base);
  String key;
  if (cls instanceof PsiTypeParameter) {
    final PsiClass superClass=cls.getSuperClass();
    key=cls.getName() + (superClass == null ? CommonClassNames.JAVA_LANG_OBJECT : superClass.getName());
  }
 else {
    key=TypeConversionUtil.erasure(base).getCanonicalText();
  }
  if (key == null)   key="";
  Map<String,PsiType> result=cache.get(key);
  if (result == null) {
    result=new HashMap<String,PsiType>();
    collectSuperTypes(base,result,project);
    cache.put(key,result);
  }
  return result;
}
