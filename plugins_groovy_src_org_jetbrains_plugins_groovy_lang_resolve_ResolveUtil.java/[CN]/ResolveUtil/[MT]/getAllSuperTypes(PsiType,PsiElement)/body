{
  final Project project=place.getProject();
  return CachedValuesManager.getManager(project).getCachedValue(project,SUPER_TYPES,new CachedValueProvider<FactoryMap<PsiType,Map<String,PsiType>>>(){
    @Override public Result<FactoryMap<PsiType,Map<String,PsiType>>> compute(){
      final FactoryMap<PsiType,Map<String,PsiType>> map=new ConcurrentFactoryMap<PsiType,Map<String,PsiType>>(){
        @Override protected Map<PsiType,Map<String,PsiType>> createMap(){
          return new ConcurrentHashMap<PsiType,Map<String,PsiType>>(RAW_TYPE_HASHING_STRATEGY);
        }
        @Override protected Map<String,PsiType> create(        PsiType key){
          final HashMap<String,PsiType> visited=new HashMap<String,PsiType>();
          collectSuperTypes(key,visited);
          if (key instanceof PsiArrayType) {
            final PsiElementFactory factory=JavaPsiFacade.getElementFactory(project);
            collectSuperTypes(factory.createTypeFromText(CommonClassNames.JAVA_LANG_COMPARABLE,null),visited);
            collectSuperTypes(factory.createTypeFromText(CommonClassNames.JAVA_IO_SERIALIZABLE,null),visited);
          }
          return visited;
        }
      }
;
      return Result.create(map,PsiModificationTracker.JAVA_STRUCTURE_MODIFICATION_COUNT,ProjectRootManager.getInstance(project));
    }
  }
,false).get(base);
}
