{
  final PsiManager manager=PsiManager.getInstance(myProject);
  final String fqName=getTargetClassName();
  if ("".equals(fqName)) {
    return "No destination class specified";
  }
 else   if (!manager.getNameHelper().isQualifiedName(fqName)) {
    return "'" + fqName + "' is not a legal FQ-name";
  }
 else {
    final PsiClass[] targetClass=new PsiClass[]{null};
    CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
      public void run(){
        try {
          targetClass[0]=findOrCreateTargetClass(manager,fqName);
        }
 catch (        IncorrectOperationException e) {
          RefactoringMessageUtil.showErrorMessage(MoveMembersImpl.REFACTORING_NAME,e.getMessage(),HelpID.MOVE_MEMBERS,myProject);
        }
      }
    }
,"Create class " + fqName,null);
    if (targetClass[0] == null) {
      return "";
    }
    if (mySourceClass.equals(targetClass[0])) {
      return "Source and destination classes should be different";
    }
 else {
      for (int i=0; i < myMemberInfos.length; i++) {
        MemberInfo info=myMemberInfos[i];
        if (!info.isChecked())         continue;
        if (PsiTreeUtil.isAncestor(info.getMember(),targetClass[0],false)) {
          return "Cannot move inner class " + info.getDisplayName() + " into itself.";
        }
      }
      if (!targetClass[0].isWritable()) {
        RefactoringMessageUtil.showReadOnlyElementRefactoringMessage(myProject,targetClass[0]);
        return "";
      }
      return null;
    }
  }
}
