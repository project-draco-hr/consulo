{
  final PsiManager manager=PsiManager.getInstance(myProject);
  final String fqName=getTargetClassName();
  if ("".equals(fqName)) {
    return RefactoringBundle.message("no.destination.class.specified");
  }
 else   if (!manager.getNameHelper().isQualifiedName(fqName)) {
    return RefactoringBundle.message("0.is.not.a.legal.fq.name",fqName);
  }
 else {
    RecentsManager.getInstance(myProject).registerRecentEntry(RECENTS_KEY,fqName);
    final PsiClass[] targetClass=new PsiClass[]{null};
    CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
      public void run(){
        try {
          targetClass[0]=findOrCreateTargetClass(manager,fqName);
        }
 catch (        IncorrectOperationException e) {
          RefactoringMessageUtil.showErrorMessage(MoveMembersImpl.REFACTORING_NAME,e.getMessage(),HelpID.MOVE_MEMBERS,myProject);
        }
      }
    }
,RefactoringBundle.message("create.class.command",fqName),null);
    if (targetClass[0] == null) {
      return "";
    }
    if (mySourceClass.equals(targetClass[0])) {
      return RefactoringBundle.message("source.and.destination.classes.should.be.different");
    }
 else {
      for (      MemberInfo info : myMemberInfos) {
        if (!info.isChecked())         continue;
        if (PsiTreeUtil.isAncestor(info.getMember(),targetClass[0],false)) {
          return RefactoringBundle.message("cannot.move.inner.class.0.into.itself",info.getDisplayName());
        }
      }
      if (!targetClass[0].isWritable()) {
        if (!RefactoringMessageUtil.checkReadOnlyStatus(myProject,targetClass[0]))         return "";
        return "";
      }
      return null;
    }
  }
}
