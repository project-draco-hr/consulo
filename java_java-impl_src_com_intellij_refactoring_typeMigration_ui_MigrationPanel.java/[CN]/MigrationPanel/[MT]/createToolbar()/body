{
  final JPanel panel=new JPanel(new GridBagLayout());
  GridBagConstraints gc=new GridBagConstraints(GridBagConstraints.RELATIVE,0,1,1,0,1,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(5,10,5,0),0,0);
  final JButton performButton=new JButton(RefactoringBundle.message("type.migration.migrate.button.text"));
  performButton.addActionListener(new ActionListener(){
    private void expandTree(    MigrationNode migrationNode){
      if (!migrationNode.getInfo().isExcluded() || migrationNode.areChildrenInitialized()) {
        final Collection<? extends AbstractTreeNode> nodes=migrationNode.getChildren();
        for (        AbstractTreeNode node : nodes) {
          expandTree((MigrationNode)node);
        }
      }
    }
    public void actionPerformed(    final ActionEvent e){
      final Object root=myRootsTree.getModel().getRoot();
      if (root instanceof DefaultMutableTreeNode) {
        final Object userObject=((DefaultMutableTreeNode)root).getUserObject();
        if (userObject instanceof MigrationRootNode) {
          ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
            public void run(){
              new WriteCommandAction(myProject){
                protected void run(                Result result) throws Throwable {
                  final Collection<? extends AbstractTreeNode> children=((MigrationRootNode)userObject).getChildren();
                  for (                  AbstractTreeNode child : children) {
                    expandTree((MigrationNode)child);
                  }
                  final TypeMigrationUsageInfo[] usages=myLabeler.getMigratedUsages();
                  final HashSet<VirtualFile> files=new HashSet<VirtualFile>();
                  for (                  TypeMigrationUsageInfo usage : usages) {
                    if (!usage.isExcluded()) {
                      final PsiElement element=usage.getElement();
                      if (element != null) {
                        files.add(element.getContainingFile().getVirtualFile());
                      }
                    }
                  }
                  if (ReadonlyStatusHandler.getInstance(myProject).ensureFilesWritable(VfsUtil.toVirtualFileArray(files)).hasReadonlyFiles())                   return;
                  TypeMigrationProcessor.change(myLabeler,usages);
                }
              }
.execute();
            }
          }
,"Type Migration",false,myProject);
        }
      }
      UsageViewManager.getInstance(myProject).closeContent(myContent);
    }
  }
);
  panel.add(performButton,gc);
  final JButton closeButton=new JButton(CommonBundle.getCancelButtonText());
  closeButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      UsageViewManager.getInstance(myProject).closeContent(myContent);
    }
  }
);
  panel.add(closeButton,gc);
  final JButton rerunButton=new JButton(RefactoringBundle.message("type.migration.rerun.button.text"));
  rerunButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      UsageViewManager.getInstance(myProject).closeContent(myContent);
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          ChangeTypeSignatureHandler.invoke(myProject,myInitialRoot,myLabeler.getRules(),null);
        }
      }
);
    }
  }
);
  panel.add(rerunButton,gc);
  final JButton helpButton=new JButton(CommonBundle.getHelpButtonText());
  helpButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      HelpManager.getInstance().invokeHelp("reference.typeMigrationPreview");
    }
  }
);
  gc.weightx=1;
  panel.add(helpButton,gc);
  return panel;
}
