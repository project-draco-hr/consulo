{
  PsiPolyadicExpression concatenation=getEnclosingLiteralConcatenation(literalExpression);
  StringBuilder formatString=new StringBuilder();
  final List<PsiExpression> args=new ArrayList<PsiExpression>();
  try {
    ConcatenationToMessageFormatAction.buildMessageFormatString(concatenation,formatString,args);
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
  return new JavaI18nizeQuickFixDialog(project,context,literalExpression,formatString.toString(),null,true,true){
    @Nullable protected String getTemplateName(){
      return myResourceBundleManager.getConcatenationTemplateName();
    }
    protected String generateText(    final I18nizedTextGenerator textGenerator,    final String propertyKey,    final PropertiesFile propertiesFile,    final PsiLiteralExpression literalExpression){
      return textGenerator.getI18nizedConcatenationText(propertyKey,composeParametersText(args),propertiesFile,literalExpression);
    }
    public PsiExpression[] getParameters(){
      return args.toArray(new PsiExpression[args.size()]);
    }
    protected void addAdditionalAttributes(    final Map<String,String> attributes){
      attributes.put(PARAMETERS_OPTION_KEY,composeParametersText(args));
    }
  }
;
}
