{
  PsiPolyadicExpression element=PsiTreeUtil.getParentOfType(psiElement,PsiPolyadicExpression.class,false,PsiMember.class);
  if (element == null)   return null;
  PsiPolyadicExpression concatenation=null;
  boolean stringLiteralOccured=false;
  while (true) {
    if (element.getOperationTokenType() != JavaTokenType.PLUS)     return concatenation;
    for (    PsiExpression operand : element.getOperands()) {
      stringLiteralOccured|=operand instanceof PsiLiteralExpression && ((PsiLiteralExpression)operand).getValue() instanceof String;
    }
    if (stringLiteralOccured) {
      concatenation=element;
    }
    PsiElement parent=element.getParent();
    if (!(parent instanceof PsiPolyadicExpression))     return concatenation;
    element=(PsiPolyadicExpression)parent;
  }
}
