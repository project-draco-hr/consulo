{
  if (myType == PROJECT || myType == CUSTOM) {
    return new AnalysisScope[]{new AnalysisScope(defaultProject)};
  }
  final ProjectFileIndex fileIndex=ProjectRootManager.getInstance(defaultProject).getFileIndex();
  final HashSet<Module> modules=new HashSet<Module>();
  if (myType == FILE) {
    if (myElement instanceof PsiJavaFile && !PsiUtil.isInJspFile(myElement)) {
      PsiJavaFile psiJavaFile=(PsiJavaFile)myElement;
      final PsiClass[] classes=psiJavaFile.getClasses();
      boolean onlyPackLocalClasses=true;
      for (      final PsiClass aClass : classes) {
        if (aClass.hasModifierProperty(PsiModifier.PUBLIC)) {
          onlyPackLocalClasses=false;
        }
      }
      if (onlyPackLocalClasses) {
        final PsiDirectory psiDirectory=psiJavaFile.getContainingDirectory();
        if (psiDirectory != null) {
          return new AnalysisScope[]{new AnalysisScope(psiDirectory.getPackage())};
        }
      }
    }
    final VirtualFile vFile=((PsiFileSystemItem)myElement).getVirtualFile();
    modules.addAll(getAllInterestingModules(fileIndex,vFile));
  }
 else   if (myType == DIRECTORY) {
    final VirtualFile vFile=((PsiFileSystemItem)myElement).getVirtualFile();
    modules.addAll(getAllInterestingModules(fileIndex,vFile));
  }
 else   if (myType == PACKAGE) {
    final PsiDirectory[] directories=((PsiPackage)myElement).getDirectories();
    for (    PsiDirectory directory : directories) {
      modules.addAll(getAllInterestingModules(fileIndex,directory.getVirtualFile()));
    }
  }
 else   if (myType == MODULE) {
    modules.add(myModule);
  }
 else   if (myType == MODULES) {
    modules.addAll(myModules);
  }
  if (modules.isEmpty()) {
    return new AnalysisScope[]{new AnalysisScope(defaultProject)};
  }
  HashSet<AnalysisScope> result=new HashSet<AnalysisScope>();
  final Module[] allModules=ModuleManager.getInstance(defaultProject).getModules();
  for (  final Module module : modules) {
    Set<Module> modulesToAnalyze=getDirectBackwardDependencies(module,allModules);
    modulesToAnalyze.addAll(getExportBackwardDependencies(module,allModules));
    modulesToAnalyze.add(module);
    result.add(new AnalysisScope(modulesToAnalyze.toArray(new Module[modulesToAnalyze.size()])));
  }
  return result.toArray(new AnalysisScope[result.size()]);
}
