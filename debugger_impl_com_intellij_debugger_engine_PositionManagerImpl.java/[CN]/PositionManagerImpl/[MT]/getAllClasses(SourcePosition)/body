{
  return ApplicationManager.getApplication().runReadAction(new Computable<List<ReferenceType>>(){
    public List<ReferenceType> compute(){
      final PsiClass psiClass=JVMNameUtil.getClassAt(classPosition);
      if (psiClass == null) {
        return Collections.emptyList();
      }
      if (PsiUtil.isLocalOrAnonymousClass(psiClass)) {
        final PsiClass parentNonLocal=JVMNameUtil.getTopLevelParentClass(psiClass);
        if (parentNonLocal == null) {
          LOG.assertTrue(false,"Local class has no non-local parent");
          return Collections.emptyList();
        }
        final String parentClassName=JVMNameUtil.getNonAnonymousClassName(parentNonLocal);
        final List<ReferenceType> outer=myDebugProcess.getVirtualMachineProxy().classesByName(parentClassName);
        final List<ReferenceType> result=new ArrayList<ReferenceType>();
        findNested(outer,classPosition,result);
        if (result.size() == 0) {
          for (          ReferenceType refType : outer) {
            final ReferenceType closest=findClosestClassAt(refType,classPosition,psiClass);
            if (closest != null) {
              result.add(closest);
            }
          }
        }
        return result;
      }
 else {
        final String className=JVMNameUtil.getNonAnonymousClassName(psiClass);
        if (className == null) {
          return Collections.emptyList();
        }
        return myDebugProcess.getVirtualMachineProxy().classesByName(className);
      }
    }
  }
);
}
