{
  final VirtualMachineProxyImpl vmProxy=myDebugProcess.getVirtualMachineProxy();
  if (fromClass.isPrepared()) {
    final List<ReferenceType> nestedTypes=vmProxy.nestedTypes(fromClass);
    for (    ReferenceType nested : nestedTypes) {
      final ReferenceType found=findNested(nested,classToFind,classPosition);
      if (found != null) {
        return found;
      }
    }
    try {
      final int lineNumber=classPosition.getLine() + 1;
      if (fromClass.locationsOfLine(lineNumber).size() > 0) {
        return fromClass;
      }
      int line=-1;
      for (      Location location : fromClass.allLineLocations()) {
        final int locationLine=location.lineNumber() - 1;
        if (line < 0) {
          line=locationLine;
        }
 else {
          if (locationLine != line) {
            line=locationLine;
            break;
          }
        }
      }
      if (line >= 0) {
        final SourcePosition candidatePosition=SourcePosition.createFromLine(classToFind.getContainingFile(),line);
        if (classToFind.equals(JVMNameUtil.getClassAt(candidatePosition))) {
          return fromClass;
        }
      }
    }
 catch (    AbsentInformationException ignored) {
    }
  }
  return null;
}
