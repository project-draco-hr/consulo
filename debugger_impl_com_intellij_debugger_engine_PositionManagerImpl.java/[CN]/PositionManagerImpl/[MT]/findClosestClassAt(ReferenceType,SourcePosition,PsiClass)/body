{
  if (from.isPrepared()) {
    final List<ReferenceType> nested=myDebugProcess.getVirtualMachineProxy().nestedTypes(from);
    for (    ReferenceType nestedType : nested) {
      final ReferenceType foundType=findClosestClassAt(nestedType,classPosition,psiClass);
      if (foundType != null) {
        return foundType;
      }
    }
    try {
      final int lineNumber=classPosition.getLine() + 1;
      final List<Location> locations=from.allLineLocations();
      boolean isGreater=false;
      boolean isLess=false;
      for (      Location location : locations) {
        isGreater|=location.lineNumber() <= lineNumber;
        isLess|=lineNumber <= location.lineNumber();
        if (isGreater && isLess) {
          final SourcePosition position=SourcePosition.createFromLine(psiClass.getContainingFile(),location.lineNumber() - 1);
          return psiClass.equals(JVMNameUtil.getClassAt(position)) ? from : null;
        }
      }
    }
 catch (    AbsentInformationException e) {
    }
  }
  return null;
}
