{
  if (!(element.getParent() instanceof PsiReferenceList))   return null;
  PsiReferenceList list=(PsiReferenceList)element.getParent();
  if (!(list.getParent() instanceof PsiClass))   return null;
  if (!(resolved instanceof PsiClass))   return null;
  PsiClass aClass=(PsiClass)resolved;
  final PsiClassType[] referencedTypes=list.getReferencedTypes();
  int dupCount=0;
  for (int i=0; i < referencedTypes.length; i++) {
    PsiClassType referencedType=referencedTypes[i];
    PsiClass resolvedElement=referencedType.resolve();
    if (resolvedElement != null && list.getManager().areElementsEquivalent(resolvedElement,aClass)) {
      dupCount++;
    }
  }
  if (dupCount > 1) {
    String description=MessageFormat.format(DUPLICATE_CLASS,new Object[]{HighlightUtil.formatClass(aClass)});
    final HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,element,description);
    return highlightInfo;
  }
  return null;
}
