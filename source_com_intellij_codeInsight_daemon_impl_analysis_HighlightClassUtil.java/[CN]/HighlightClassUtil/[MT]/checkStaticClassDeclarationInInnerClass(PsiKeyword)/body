{
  if (new PsiMatcherImpl(keyword).parent(PsiMatcherImpl.hasClass(PsiClass.class)).dot(PsiMatcherImpl.hasModifier(PsiModifier.STATIC,true)).parent(PsiMatcherImpl.hasClass(PsiClass.class)).dot(PsiMatcherImpl.hasModifier(PsiModifier.STATIC,false)).parent(PsiMatcherImpl.hasClass(new Class[]{PsiClass.class,PsiDeclarationStatement.class,PsiNewExpression.class,PsiEnumConstant.class})).getElement() == null) {
    return null;
  }
  PsiClass aClass=(PsiClass)keyword.getParent();
  if (PsiUtil.hasErrorElementChild(aClass))   return null;
  PsiElement context=null;
  PsiModifierList modifierList=aClass.getModifierList();
  PsiElement[] children=modifierList.getChildren();
  for (  PsiElement element : children) {
    if (Comparing.equal(element.getText(),PsiModifier.STATIC)) {
      context=element;
      break;
    }
  }
  TextRange textRange=context == null ? null : context.getTextRange();
  if (textRange == null) {
    textRange=ClassUtil.getClassDeclarationTextRange(aClass);
  }
  HighlightInfo errorResult=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,textRange,STATIC_DECLARATION_IN_INNER_CLASS);
  if (context != keyword) {
    QuickFixAction.registerQuickFixAction(errorResult,new ModifierFix(aClass,PsiModifier.STATIC,false));
  }
  QuickFixAction.registerQuickFixAction(errorResult,new ModifierFix(aClass.getContainingClass(),PsiModifier.STATIC,true));
  return errorResult;
}
