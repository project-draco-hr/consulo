{
  if (aClass == null)   return null;
  PsiElement parent=aClass;
  if (aClass.getParent() instanceof PsiDeclarationStatement) {
    parent=aClass.getParent();
  }
  String name=aClass.getName();
  if (name == null)   return null;
  boolean duplicateFound=false;
  boolean checkSiblings=true;
  while (parent != null) {
    if (parent instanceof PsiFile)     break;
    PsiElement element=checkSiblings ? parent.getPrevSibling() : null;
    if (element == null) {
      element=parent.getParent();
      if (element instanceof PsiMethod || element instanceof PsiClass) {
        checkSiblings=false;
      }
    }
    parent=element;
    if (element instanceof PsiDeclarationStatement)     element=PsiTreeUtil.getChildOfType(element,PsiClass.class);
    if (element instanceof PsiClass && name.equals(((PsiClass)element).getName())) {
      duplicateFound=true;
      break;
    }
  }
  if (duplicateFound) {
    String message=MessageFormat.format(DUPLICATE_CLASS,new Object[]{name});
    TextRange textRange=ClassUtil.getClassDeclarationTextRange(aClass);
    return HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,textRange,message);
  }
  return null;
}
