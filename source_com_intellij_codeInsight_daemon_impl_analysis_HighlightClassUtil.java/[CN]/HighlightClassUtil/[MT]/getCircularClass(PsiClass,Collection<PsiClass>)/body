{
  if (usedClasses.contains(aClass)) {
    return aClass;
  }
  try {
    usedClasses.add(aClass);
    final PsiClass[] superTypes=aClass.getSupers();
    for (int i=0; i < superTypes.length; i++) {
      PsiElement superType=superTypes[i];
      while (superType instanceof PsiClass) {
        if (!"java.lang.Object".equals(((PsiClass)superType).getQualifiedName())) {
          final PsiClass circularClass=getCircularClass((PsiClass)superType,usedClasses);
          if (circularClass != null)           return circularClass;
        }
        superType=superType.getParent();
      }
    }
  }
  finally {
    usedClasses.remove(aClass);
  }
  return null;
}
