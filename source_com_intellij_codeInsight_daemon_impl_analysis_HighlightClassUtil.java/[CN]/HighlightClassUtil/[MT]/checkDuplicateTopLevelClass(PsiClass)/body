{
  if (!(aClass.getParent() instanceof PsiFile))   return null;
  String qualifiedName=aClass.getQualifiedName();
  if (qualifiedName == null)   return null;
  int numOfClassesToFind=2;
  if (qualifiedName.indexOf("$") != -1) {
    qualifiedName=qualifiedName.replaceAll("\\$",".");
    numOfClassesToFind=1;
  }
  PsiManager manager=aClass.getManager();
  Module module=ModuleUtil.findModuleForPsiElement(aClass);
  if (module == null)   return null;
  PsiClass[] classes=manager.findClasses(qualifiedName,GlobalSearchScope.moduleScope(module));
  if (classes.length < numOfClassesToFind)   return null;
  String dupFileName=null;
  for (  PsiClass dupClass : classes) {
    if (dupClass != aClass) {
      VirtualFile file=dupClass.getContainingFile().getVirtualFile();
      if (file != null && manager.isInProject(dupClass)) {
        dupFileName=FileUtil.toSystemDependentName(file.getPath());
        break;
      }
    }
  }
  if (dupFileName == null)   return null;
  String message=MessageFormat.format("Duplicate class found in the file ''{0}''",new Object[]{dupFileName});
  TextRange textRange=ClassUtil.getClassDeclarationTextRange(aClass);
  return HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,textRange,message);
}
