{
  final PsiElement parent=ref.getParent();
  HighlightInfo highlightInfo=null;
  if (parent instanceof PsiNewExpression && !PsiUtil.hasErrorElementChild(parent)) {
    if (((PsiNewExpression)parent).getType() instanceof PsiArrayType)     return null;
    PsiElement refElement=ref.resolve();
    if (refElement instanceof PsiClass) {
      highlightInfo=checkInstantiationOfAbstractClass((PsiClass)refElement,ref);
    }
  }
 else   if (parent instanceof PsiAnonymousClass && parent.getParent() instanceof PsiNewExpression && !PsiUtil.hasErrorElementChild(parent.getParent())) {
    PsiAnonymousClass aClass=(PsiAnonymousClass)parent;
    final MethodSignatureUtil.MethodSignatureToMethods allMethods=MethodSignatureUtil.getSameSignatureMethods(aClass);
    final PsiMethod abstractMethod=ClassUtil.getAnyAbstractMethod(aClass,allMethods);
    if (abstractMethod != null && abstractMethod.getContainingClass() != null) {
      String baseClassName=HighlightUtil.formatClass((PsiClass)parent,false);
      String methodName=HighlightUtil.formatMethod(abstractMethod);
      String message=MessageFormat.format(CLASS_MUST_BE_ABSTRACT,new Object[]{baseClassName,methodName,HighlightUtil.formatClass(abstractMethod.getContainingClass(),false)});
      highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,ref,message);
      if (ClassUtil.getAnyMethodToImplement(aClass,allMethods) != null) {
        QuickFixAction.registerQuickFixAction(highlightInfo,new ImplementMethodsFix(aClass));
      }
    }
  }
  return highlightInfo;
}
