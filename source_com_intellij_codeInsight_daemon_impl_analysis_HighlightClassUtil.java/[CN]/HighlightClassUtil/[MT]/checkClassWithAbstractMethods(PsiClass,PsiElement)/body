{
  MethodSignatureUtil.MethodSignatureToMethods allMethods=MethodSignatureUtil.getSameSignatureMethods(aClass);
  PsiMethod abstractMethod=ClassUtil.getAnyAbstractMethod(aClass,allMethods);
  if (abstractMethod != null && abstractMethod.getContainingClass() != null) {
    String baseClassName=HighlightUtil.formatClass(aClass,false);
    String methodName=HighlightUtil.formatMethod(abstractMethod);
    String message=MessageFormat.format(CLASS_MUST_BE_ABSTRACT,new Object[]{baseClassName,methodName,HighlightUtil.formatClass(abstractMethod.getContainingClass(),false)});
    HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,highlightElement,message);
    if (ClassUtil.getAnyMethodToImplement(aClass,allMethods) != null) {
      QuickFixAction.registerQuickFixAction(highlightInfo,new ImplementMethodsFix(aClass));
    }
    return highlightInfo;
  }
  return null;
}
