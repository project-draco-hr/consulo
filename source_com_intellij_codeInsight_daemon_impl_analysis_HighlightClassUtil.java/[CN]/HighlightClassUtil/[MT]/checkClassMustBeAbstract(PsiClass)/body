{
  if (aClass.hasModifierProperty(PsiModifier.ABSTRACT) || aClass.getRBrace() == null || (aClass.isEnum() && hasEnumConstants(aClass))) {
    return null;
  }
  HighlightInfo errorResult=null;
  Collection<HierarchicalMethodSignature> allMethods=aClass.getVisibleSignatures();
  PsiMethod abstractMethod=ClassUtil.getAnyAbstractMethod(aClass,allMethods);
  if (abstractMethod != null) {
    String message=JavaErrorMessages.message("class.must.be.abstract",HighlightUtil.formatClass(aClass,false),HighlightUtil.formatMethod(abstractMethod),HighlightUtil.formatClass(abstractMethod.getContainingClass()));
    TextRange textRange=ClassUtil.getClassDeclarationTextRange(aClass);
    errorResult=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,textRange,message);
    if (ClassUtil.getAnyMethodToImplement(aClass,allMethods) != null) {
      QuickFixAction.registerQuickFixAction(errorResult,new ImplementMethodsFix(aClass),null);
    }
    if (!(aClass instanceof PsiAnonymousClass) && HighlightUtil.getIncompatibleModifier(PsiModifier.ABSTRACT,aClass.getModifierList()) == null) {
      QuickFixAction.registerQuickFixAction(errorResult,new ModifierFix(aClass,PsiModifier.ABSTRACT,true),null);
    }
  }
  return errorResult;
}
