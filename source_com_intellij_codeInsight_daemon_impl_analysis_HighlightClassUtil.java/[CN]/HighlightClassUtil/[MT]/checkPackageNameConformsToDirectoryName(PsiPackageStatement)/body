{
  if (!DaemonCodeAnalyzerSettings.getInstance().getInspectionProfile().isToolEnabled(HighlightDisplayKey.WRONG_PACKAGE_STATEMENT)) {
    return null;
  }
  if (ApplicationManager.getApplication().isUnitTestMode())   return null;
  PsiJavaFile file=(PsiJavaFile)statement.getContainingFile();
  PsiDirectory directory=file.getContainingDirectory();
  if (directory == null)   return null;
  PsiPackage dirPackage=directory.getPackage();
  if (dirPackage == null)   return null;
  PsiPackage classPackage=(PsiPackage)statement.getPackageReference().resolve();
  if (!Comparing.equal(dirPackage.getQualifiedName(),statement.getPackageReference().getText(),true)) {
    String description=MessageFormat.format("Package name ''{0}'' does not correspond to the file path ''{1}''",new Object[]{statement.getPackageReference().getText(),dirPackage.getQualifiedName()});
    HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.WRONG_PACKAGE_STATEMENT,statement,description);
    if (classPackage != null)     QuickFixAction.registerQuickFixAction(highlightInfo,new MoveToPackageFix(file,classPackage));
    QuickFixAction.registerQuickFixAction(highlightInfo,new AdjustPackageNameFix(file,statement,dirPackage));
    QuickFixAction.registerQuickFixAction(highlightInfo,new SwitchOffToolAction(HighlightDisplayKey.WRONG_PACKAGE_STATEMENT));
    return highlightInfo;
  }
  return null;
}
