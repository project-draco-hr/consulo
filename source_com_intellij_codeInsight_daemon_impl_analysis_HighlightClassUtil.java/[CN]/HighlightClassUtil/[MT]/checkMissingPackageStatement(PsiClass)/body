{
  if (!DaemonCodeAnalyzerSettings.getInstance().getInspectionProfile(aClass).isToolEnabled(HighlightDisplayKey.WRONG_PACKAGE_STATEMENT)) {
    return null;
  }
  if (ApplicationManager.getApplication().isUnitTestMode())   return null;
  PsiFile file=aClass.getContainingFile();
  if (!(file instanceof PsiJavaFile))   return null;
  PsiJavaFile javaFile=(PsiJavaFile)file;
  PsiClass[] classes=javaFile.getClasses();
  if (classes == null || classes.length == 0 || !aClass.getManager().areElementsEquivalent(aClass,classes[0]))   return null;
  PsiDirectory directory=javaFile.getContainingDirectory();
  if (directory == null)   return null;
  PsiPackage dirPackage=directory.getPackage();
  if (dirPackage == null)   return null;
  PsiPackageStatement packageStatement=javaFile.getPackageStatement();
  String packageName=dirPackage.getQualifiedName();
  if (!Comparing.strEqual(packageName,"",true) && packageStatement == null) {
    String description=JavaErrorMessages.message("missing.package.statement",packageName);
    TextRange textRange=ClassUtil.getClassDeclarationTextRange(aClass);
    HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.WRONG_PACKAGE_STATEMENT,textRange,description);
    List<IntentionAction> options=new ArrayList<IntentionAction>();
    options.add(new EditInspectionToolsSettingsAction(HighlightDisplayKey.WRONG_PACKAGE_STATEMENT));
    QuickFixAction.registerQuickFixAction(highlightInfo,new AdjustPackageNameFix(javaFile,null,dirPackage),options);
    return highlightInfo;
  }
  return null;
}
