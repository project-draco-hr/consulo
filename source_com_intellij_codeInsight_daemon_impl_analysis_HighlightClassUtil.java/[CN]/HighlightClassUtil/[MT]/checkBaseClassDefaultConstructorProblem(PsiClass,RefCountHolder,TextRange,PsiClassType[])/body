{
  PsiClass baseClass=aClass.getSuperClass();
  if (baseClass == null)   return null;
  PsiMethod[] constructors=baseClass.getConstructors();
  if (constructors.length == 0)   return null;
  PsiResolveHelper resolveHelper=aClass.getManager().getResolveHelper();
  for (  PsiMethod constructor : constructors) {
    if (resolveHelper.isAccessible(constructor,aClass,null)) {
      if (constructor.getParameterList().getParameters().length == 0 || constructor.getParameterList().getParameters().length == 1 && constructor.isVarArgs()) {
        String description=checkDefaultConstructorThrowsException(constructor,handledExceptions);
        if (description != null) {
          return HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,textRange,description);
        }
        if (refCountHolder != null) {
          refCountHolder.registerLocallyReferenced(constructor);
        }
        return null;
      }
    }
  }
  String description=JavaErrorMessages.message("no.default.constructor.available",HighlightUtil.formatClass(baseClass));
  HighlightInfo info=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,textRange,description);
  QuickFixAction.registerQuickFixAction(info,new CreateConstructorMatchingSuperAction(aClass),null);
  return info;
}
