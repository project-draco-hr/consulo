{
  final PsiClass baseClass=aClass.getSuperClass();
  if (baseClass == null)   return null;
  final PsiMethod[] constructors=baseClass.getConstructors();
  if (constructors.length == 0)   return null;
  PsiResolveHelper resolveHelper=aClass.getManager().getResolveHelper();
  for (int j=0; j < constructors.length; j++) {
    PsiMethod constructor=constructors[j];
    if (resolveHelper.isAccessible(constructor,aClass,null)) {
      if (constructor.getParameterList().getParameters().length == 0 || constructor.getParameterList().getParameters().length == 1 && constructor.isVarArgs()) {
        String description=checkDefaultConstructorThrowsException(constructor,handledExceptions);
        if (description != null) {
          HighlightInfo info=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,textRange,description);
          return info;
        }
        if (refCountHolder != null) {
          refCountHolder.registerReference(aClass,new MethodCandidateInfo(constructor,PsiSubstitutor.EMPTY));
        }
        return null;
      }
    }
  }
  String description=MessageFormat.format(HighlightUtil.NO_DEFAULT_CONSTRUCTOR,new Object[]{HighlightUtil.formatClass(baseClass)});
  HighlightInfo info=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,textRange,description);
  QuickFixAction.registerQuickFixAction(info,new CreateConstructorMatchingSuperAction(aClass));
  return info;
}
