{
  return new InspectionGadgetsFix(){
    @Override protected void doFix(    final Project project,    ProblemDescriptor descriptor) throws IncorrectOperationException {
      final PsiElement element=descriptor.getPsiElement();
      final PsiMethod method=PsiTreeUtil.getParentOfType(element,PsiMethod.class);
      if (method != null) {
        PsiType type=(PsiType)infos[1];
        if (type == null)         type=method.getReturnType();
        final PsiType finalType=type;
        Runnable runnable=new Runnable(){
          public void run(){
            final ChangeSignatureProcessor csp=new ChangeSignatureProcessor(project,method,false,PsiModifier.PUBLIC,method.getName(),finalType,new ParameterInfoImpl[0]);
            csp.run();
          }
        }
;
        if (ApplicationManager.getApplication().isUnitTestMode()) {
          runnable.run();
        }
 else {
          ApplicationManager.getApplication().invokeLater(runnable,project.getDisposed());
        }
      }
 else {
        final PsiClass psiClass=PsiTreeUtil.getParentOfType(element,PsiClass.class);
        if (psiClass != null) {
          final CreateMethodQuickFix fix=CreateMethodQuickFix.createFix(psiClass,"@" + PARAMETERS_FQN + " public static java.util.Collection parameters()","");
          if (fix != null) {
            fix.applyFix(project,descriptor);
          }
        }
      }
    }
    @NotNull public String getName(){
      return infos.length > 0 ? (String)infos[0] : "Create @Parameterized.Parameters data provider";
    }
  }
;
}
