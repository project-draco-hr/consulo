{
  final Project project=e.getData(CommonDataKeys.PROJECT);
  if (project == null)   return;
  final VcsKey vcsKey=e.getData(VcsDataKeys.VCS);
  if (vcsKey == null || !SvnVcs.getKey().equals(vcsKey))   return;
  final VcsFileRevision revision=e.getData(VcsDataKeys.VCS_FILE_REVISION);
  final VirtualFile revisionVirtualFile=e.getData(VcsDataKeys.VCS_VIRTUAL_FILE);
  if (revision == null || revisionVirtualFile == null)   return;
  final SvnFileRevision svnFileRevision=(SvnFileRevision)revision;
  final Consumer<String> listener=VcsDataKeys.REMOTE_HISTORY_CHANGED_LISTENER.getData(e.getDataContext());
  SvnEditCommitMessageAction.askAndEditRevision(svnFileRevision.getRevision().getNumber(),svnFileRevision.getCommitMessage(),(SvnRepositoryLocation)svnFileRevision.getChangedRepositoryPath(),project,new Consumer<String>(){
    @Override public void consume(    final String newMessage){
      svnFileRevision.setCommitMessage(newMessage);
      if (listener != null) {
        listener.consume(newMessage);
      }
      ProjectLevelVcsManager.getInstance(project).getVcsHistoryCache().editCached(new FilePathImpl(revisionVirtualFile),vcsKey,new Consumer<List<VcsFileRevision>>(){
        @Override public void consume(        List<VcsFileRevision> revisions){
          for (          VcsFileRevision fileRevision : revisions) {
            if (!(fileRevision instanceof SvnFileRevision))             continue;
            if (((SvnFileRevision)fileRevision).getRevision().getNumber() == svnFileRevision.getRevision().getNumber()) {
              ((SvnFileRevision)fileRevision).setCommitMessage(newMessage);
              break;
            }
          }
        }
      }
);
    }
  }
,true);
}
