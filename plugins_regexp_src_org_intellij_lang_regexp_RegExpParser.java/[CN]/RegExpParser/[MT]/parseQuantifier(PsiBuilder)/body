{
  final PsiBuilder.Marker marker=builder.mark();
  if (builder.getTokenType() == RegExpTT.LBRACE) {
    builder.advanceLexer();
    boolean minOmitted=false;
    if (builder.getTokenType() == RegExpTT.COMMA && myCapabilities.contains(RegExpCapability.OMIT_NUMBERS_IN_QUANTIFIERS)) {
      minOmitted=true;
      builder.advanceLexer();
    }
 else     if (builder.getTokenType() != RegExpTT.NUMBER && myCapabilities.contains(RegExpCapability.DANGLING_METACHARACTERS)) {
      marker.done(RegExpTT.CHARACTER);
      return true;
    }
 else {
      checkMatches(builder,RegExpTT.NUMBER,"Number expected");
    }
    if (builder.getTokenType() == RegExpTT.RBRACE) {
      builder.advanceLexer();
      parseQuantifierType(builder);
      marker.done(RegExpElementTypes.QUANTIFIER);
    }
 else {
      if (!minOmitted) {
        checkMatches(builder,RegExpTT.COMMA,"',' expected");
      }
      if (builder.getTokenType() == RegExpTT.RBRACE) {
        builder.advanceLexer();
        parseQuantifierType(builder);
        marker.done(RegExpElementTypes.QUANTIFIER);
      }
 else       if (builder.getTokenType() == RegExpTT.NUMBER) {
        builder.advanceLexer();
        checkMatches(builder,RegExpTT.RBRACE,"'}' expected");
        parseQuantifierType(builder);
        marker.done(RegExpElementTypes.QUANTIFIER);
      }
 else {
        builder.error("'}' or number expected");
        marker.done(RegExpElementTypes.QUANTIFIER);
        return true;
      }
    }
  }
 else   if (RegExpTT.QUANTIFIERS.contains(builder.getTokenType())) {
    builder.advanceLexer();
    parseQuantifierType(builder);
    marker.done(RegExpElementTypes.QUANTIFIER);
  }
 else {
    marker.drop();
    return false;
  }
  return true;
}
