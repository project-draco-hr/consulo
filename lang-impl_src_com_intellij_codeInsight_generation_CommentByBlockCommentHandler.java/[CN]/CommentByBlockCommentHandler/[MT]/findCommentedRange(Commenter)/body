{
  final CharSequence text=myDocument.getCharsSequence();
  final FileType fileType=myFile.getFileType();
  if (fileType instanceof AbstractFileType) {
    Lexer lexer=new CustomFileTypeLexer(((AbstractFileType)fileType).getSyntaxTable());
    final int caretOffset=myEditor.getCaretModel().getOffset();
    int commentStart=CharArrayUtil.lastIndexOf(text,commenter.getBlockCommentPrefix(),caretOffset);
    if (commentStart == -1)     return null;
    lexer.start(text,commentStart,text.length(),0);
    if (lexer.getTokenType() == CustomHighlighterTokenType.MULTI_LINE_COMMENT && lexer.getTokenEnd() >= caretOffset) {
      return new TextRange(commentStart,lexer.getTokenEnd());
    }
    return null;
  }
  final String prefix=commenter.getBlockCommentPrefix();
  final String suffix=commenter.getBlockCommentSuffix();
  TextRange commentedRange=null;
  PsiElement comment=findCommentAtCaret();
  if (comment != null) {
    String commentText=comment.getText();
    if (!commentText.startsWith(prefix) || !commentText.endsWith(suffix)) {
      return null;
    }
    commentedRange=comment.getTextRange();
  }
 else {
    final SelectionModel selectionModel=myEditor.getSelectionModel();
    if (selectionModel.hasSelection()) {
      int selectionStart=selectionModel.getSelectionStart();
      int selectionEnd=selectionModel.getSelectionEnd();
      if (selectionEnd - selectionStart >= prefix.length() + suffix.length() && CharArrayUtil.regionMatches(text,selectionStart,prefix) && CharArrayUtil.regionMatches(text,selectionEnd - suffix.length(),suffix)) {
        commentedRange=new TextRange(selectionStart,selectionEnd);
      }
    }
  }
  return commentedRange;
}
