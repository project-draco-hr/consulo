{
  String normalizedPrefix=commentPrefix.trim();
  String normalizedSuffix=commentSuffix.trim();
  IntArrayList nestedCommentPrefixes=new IntArrayList();
  IntArrayList nestedCommentSuffixes=new IntArrayList();
  for (int i=startOffset; i < endOffset; ++i) {
    if (CharArrayUtil.regionMatches(chars,i,normalizedPrefix)) {
      nestedCommentPrefixes.add(i);
    }
 else {
      if (CharArrayUtil.regionMatches(chars,i,normalizedSuffix)) {
        nestedCommentSuffixes.add(i);
      }
    }
  }
  myDocument.insertString(endOffset,commentSuffix);
  int i=nestedCommentPrefixes.size() - 1, j=nestedCommentSuffixes.size() - 1;
  while (i >= 0 && j >= 0) {
    final int prefixIndex=nestedCommentPrefixes.get(i);
    final int suffixIndex=nestedCommentSuffixes.get(j);
    if (prefixIndex > suffixIndex) {
      myDocument.insertString(prefixIndex,commentSuffix);
      --i;
    }
 else {
      myDocument.insertString(suffixIndex + commentSuffix.length(),commentPrefix);
      --j;
    }
  }
  while (i >= 0) {
    final int prefixIndex=nestedCommentPrefixes.get(i);
    myDocument.insertString(prefixIndex,commentSuffix);
    --i;
  }
  while (j >= 0) {
    final int suffixIndex=nestedCommentSuffixes.get(j);
    myDocument.insertString(suffixIndex + commentSuffix.length(),commentPrefix);
    --j;
  }
  myDocument.insertString(startOffset,commentPrefix);
}
