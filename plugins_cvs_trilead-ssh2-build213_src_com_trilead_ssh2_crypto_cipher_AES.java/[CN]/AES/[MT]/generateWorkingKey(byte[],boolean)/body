{
  int KC=key.length / 4;
  int t;
  if (((KC != 4) && (KC != 6) && (KC != 8)) || ((KC * 4) != key.length)) {
    throw new IllegalArgumentException("Key length not 128/192/256 bits.");
  }
  ROUNDS=KC + 6;
  int[][] W=new int[ROUNDS + 1][4];
  t=0;
  for (int i=0; i < key.length; t++) {
    W[t >> 2][t & 3]=(key[i] & 0xff) | ((key[i + 1] & 0xff) << 8) | ((key[i + 2] & 0xff) << 16)| (key[i + 3] << 24);
    i+=4;
  }
  int k=(ROUNDS + 1) << 2;
  for (int i=KC; (i < k); i++) {
    int temp=W[(i - 1) >> 2][(i - 1) & 3];
    if ((i % KC) == 0) {
      temp=subWord(shift(temp,8)) ^ rcon[(i / KC) - 1];
    }
 else     if ((KC > 6) && ((i % KC) == 4)) {
      temp=subWord(temp);
    }
    W[i >> 2][i & 3]=W[(i - KC) >> 2][(i - KC) & 3] ^ temp;
  }
  if (!forEncryption) {
    for (int j=1; j < ROUNDS; j++) {
      for (int i=0; i < 4; i++) {
        W[j][i]=inv_mcol(W[j][i]);
      }
    }
  }
  return W;
}
