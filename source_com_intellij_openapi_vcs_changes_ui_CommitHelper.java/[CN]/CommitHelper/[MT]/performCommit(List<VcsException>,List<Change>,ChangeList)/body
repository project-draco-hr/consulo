{
  try {
    ApplicationManager.getApplication().runReadAction(new Runnable(){
      public void run(){
        markCommittingDocuments();
      }
    }
);
    final List<FilePath> pathsToRefresh=new ArrayList<FilePath>();
    ChangesUtil.processChangesByVcs(myProject,myIncludedChanges,new ChangesUtil.PerVcsProcessor<Change>(){
      public void process(      AbstractVcs vcs,      List<Change> changes){
        final CheckinEnvironment environment=vcs.getCheckinEnvironment();
        if (environment != null) {
          Collection<FilePath> paths=ChangesUtil.getPaths(changes);
          pathsToRefresh.addAll(paths);
          final List<VcsException> exceptions=environment.commit(changes,myCommitMessage);
          if (exceptions.size() > 0) {
            vcsExceptions.addAll(exceptions);
            changesFailedToCommit.addAll(changes);
          }
        }
      }
    }
);
    ApplicationManager.getApplication().runReadAction(new Runnable(){
      public void run(){
        unmarkCommittingDocuments();
      }
    }
);
    final LocalHistoryAction lvcsAction=ApplicationManager.getApplication().runReadAction(new Computable<LocalHistoryAction>(){
      public LocalHistoryAction compute(){
        return LocalVcs.getInstance(myProject).startAction(myActionName,"",true);
      }
    }
);
    VirtualFileManager.getInstance().refresh(true,new Runnable(){
      public void run(){
        lvcsAction.finish();
        FileStatusManager.getInstance(myProject).fileStatusesChanged();
        for (        FilePath path : pathsToRefresh) {
          VcsDirtyScopeManager.getInstance(myProject).fileDirty(path);
        }
      }
    }
);
    AbstractVcsHelper.getInstance(myProject).showErrors(vcsExceptions,myActionName);
  }
  finally {
    commitCompleted(vcsExceptions,changeList,changesFailedToCommit,VcsConfiguration.getInstance(myProject),myHandlers,myCommitMessage);
  }
}
