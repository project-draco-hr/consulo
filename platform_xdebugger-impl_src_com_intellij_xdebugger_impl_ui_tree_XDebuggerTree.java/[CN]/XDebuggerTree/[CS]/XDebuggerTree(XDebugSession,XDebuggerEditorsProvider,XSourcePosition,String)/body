{
  mySession=session;
  myProject=session.getProject();
  myEditorsProvider=editorsProvider;
  mySourcePosition=sourcePosition;
  myTreeModel=new DefaultTreeModel(null);
  setModel(myTreeModel);
  setCellRenderer(new XDebuggerTreeRenderer());
  new TreeLinkMouseListener(new XDebuggerTreeRenderer()){
    @Override protected void handleTagClick(    Object tag,    MouseEvent event){
      if (tag instanceof XDebuggerTreeNodeHyperlink) {
        ((XDebuggerTreeNodeHyperlink)tag).onClick(event);
      }
    }
  }
.install(this);
  setRootVisible(false);
  setShowsRootHandles(true);
  addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    final MouseEvent e){
      if (e.getClickCount() == 2) {
        MessageTreeNode[] treeNodes=getSelectedNodes(MessageTreeNode.class,null);
        if (treeNodes.length == 1) {
          MessageTreeNode node=treeNodes[0];
          if (node.isEllipsis()) {
            TreeNode parent=node.getParent();
            if (parent instanceof XValueContainerNode) {
              ((XValueContainerNode)parent).startComputingChildren();
            }
          }
        }
      }
    }
  }
);
  new TreeSpeedSearch(this,SPEED_SEARCH_CONVERTER);
  final ActionManager actionManager=ActionManager.getInstance();
  myPopupHandler=new PopupHandler(){
    public void invokePopup(    final Component comp,    final int x,    final int y){
      final ActionGroup group=(ActionGroup)actionManager.getAction(popupActionGroupId);
      ActionPopupMenu popupMenu=actionManager.createActionPopupMenu(ActionPlaces.UNKNOWN,group);
      popupMenu.getComponent().show(comp,x,y);
    }
  }
;
  addMouseListener(myPopupHandler);
  registerShortcuts();
}
