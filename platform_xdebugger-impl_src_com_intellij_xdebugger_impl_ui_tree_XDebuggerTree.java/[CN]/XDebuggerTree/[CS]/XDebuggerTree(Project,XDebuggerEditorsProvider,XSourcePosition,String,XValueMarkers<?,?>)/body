{
  myValueMarkers=valueMarkers;
  myProject=project;
  myEditorsProvider=editorsProvider;
  mySourcePosition=sourcePosition;
  myTreeModel=new DefaultTreeModel(null);
  setModel(myTreeModel);
  setCellRenderer(new XDebuggerTreeRenderer());
  new TreeLinkMouseListener(new XDebuggerTreeRenderer()){
    @Override protected boolean doCacheLastNode(){
      return false;
    }
    @Override protected void handleTagClick(    @Nullable Object tag,    @NotNull MouseEvent event){
      if (tag instanceof XDebuggerTreeNodeHyperlink) {
        ((XDebuggerTreeNodeHyperlink)tag).onClick(event);
      }
    }
  }
.installOn(this);
  setRootVisible(false);
  setShowsRootHandles(true);
  new DoubleClickListener(){
    @Override protected boolean onDoubleClick(    MouseEvent e){
      return expandIfEllipsis();
    }
  }
.installOn(this);
  addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      int key=e.getKeyCode();
      if (key == KeyEvent.VK_ENTER || key == KeyEvent.VK_SPACE || key == KeyEvent.VK_RIGHT) {
        expandIfEllipsis();
      }
    }
  }
);
  if (Boolean.valueOf(System.getProperty("xdebugger.variablesView.rss"))) {
    new XDebuggerTreeSpeedSearch(this,SPEED_SEARCH_CONVERTER);
  }
 else {
    new TreeSpeedSearch(this,SPEED_SEARCH_CONVERTER);
  }
  final ActionManager actionManager=ActionManager.getInstance();
  addMouseListener(new PopupHandler(){
    @Override public void invokePopup(    final Component comp,    final int x,    final int y){
      ActionGroup group=(ActionGroup)actionManager.getAction(popupActionGroupId);
      actionManager.createActionPopupMenu(ActionPlaces.UNKNOWN,group).getComponent().show(comp,x,y);
    }
  }
);
  registerShortcuts();
  setTransferHandler(DEFAULT_TRANSFER_HANDLER);
  addComponentListener(myMoveListener);
}
