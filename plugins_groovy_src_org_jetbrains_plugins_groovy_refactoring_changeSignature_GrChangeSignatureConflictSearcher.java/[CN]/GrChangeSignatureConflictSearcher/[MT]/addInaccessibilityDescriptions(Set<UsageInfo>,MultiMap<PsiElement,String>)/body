{
  PsiMethod method=myChangeInfo.getMethod();
  PsiModifierList modifierList=(PsiModifierList)method.getModifierList().copy();
  VisibilityUtil.setVisibility(modifierList,myChangeInfo.getNewVisibility());
  for (Iterator<UsageInfo> iterator=usages.iterator(); iterator.hasNext(); ) {
    UsageInfo usageInfo=iterator.next();
    PsiElement element=usageInfo.getElement();
    if (element != null) {
      if (element instanceof GrReferenceExpression) {
        PsiClass accessObjectClass=null;
        GrExpression qualifier=((GrReferenceExpression)element).getQualifierExpression();
        if (qualifier != null) {
          accessObjectClass=getAccessObjectClass(qualifier);
        }
        PsiResolveHelper helper=JavaPsiFacade.getInstance(element.getProject()).getResolveHelper();
        if (!helper.isAccessible(method,modifierList,element,accessObjectClass,null)) {
          String message=RefactoringBundle.message("0.with.1.visibility.is.not.accessible.from.2",RefactoringUIUtil.getDescription(method,true),myChangeInfo.getNewVisibility(),RefactoringUIUtil.getDescription(ConflictsUtil.getContainer(element),true));
          conflictDescriptions.putValue(method,message);
          if (!needToChangeCalls()) {
            iterator.remove();
          }
        }
      }
    }
  }
}
