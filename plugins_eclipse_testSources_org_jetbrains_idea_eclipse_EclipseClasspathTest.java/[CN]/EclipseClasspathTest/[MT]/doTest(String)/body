{
  final String path=getProject().getBaseDir().getPath() + relativePath;
  final File classpathFile=new File(path,EclipseXml.DOT_CLASSPATH_EXT);
  String fileText=new String(FileUtil.loadFileText(classpathFile)).replaceAll("\\$ROOT\\$",getProject().getBaseDir().getPath());
  if (!SystemInfo.isWindows) {
    fileText=fileText.replaceAll(EclipseXml.FILE_PROTOCOL + "/",EclipseXml.FILE_PROTOCOL);
  }
  final Element classpathElement=JDOMUtil.loadDocument(fileText).getRootElement();
  final Module module=ApplicationManager.getApplication().runWriteAction(new Computable<Module>(){
    public Module compute(){
      return ModuleManager.getInstance(getProject()).newModule(path + "/" + EclipseProjectFinder.findProjectName(path)+ IdeaXml.IML_EXT,StdModuleTypes.JAVA);
    }
  }
);
  final ModifiableRootModel rootModel=ModuleRootManager.getInstance(module).getModifiableModel();
  final EclipseClasspathReader classpathReader=new EclipseClasspathReader(path,getProject());
  classpathReader.init(rootModel);
  classpathReader.readClasspath(rootModel,new ArrayList<String>(),new ArrayList<String>(),new HashSet<String>(),new HashSet<String>(),null,classpathElement);
  rootModel.commit();
  final ModifiableRootModel model=ModuleRootManager.getInstance(module).getModifiableModel();
  final Element resultClasspathElement=new Element(EclipseXml.CLASSPATH_TAG);
  new EclipseClasspathWriter(model).writeClasspath(resultClasspathElement,classpathElement);
  model.dispose();
  String resulted=new String(JDOMUtil.printDocument(new Document(resultClasspathElement),"\n"));
  Assert.assertTrue(resulted.replaceAll(StringUtil.escapeToRegexp(getProject().getBaseDir().getPath()),"\\$ROOT\\$"),JDOMUtil.areElementsEqual(classpathElement,resultClasspathElement));
}
