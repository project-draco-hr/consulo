{
  final File classpathFile=new File(path,EclipseXml.DOT_CLASSPATH_EXT);
  String fileText=FileUtil.loadFile(classpathFile).replaceAll("\\$ROOT\\$",project.getBaseDir().getPath());
  if (!SystemInfo.isWindows) {
    fileText=fileText.replaceAll(EclipseXml.FILE_PROTOCOL + "/",EclipseXml.FILE_PROTOCOL);
  }
  final Element classpathElement=JDOMUtil.loadDocument(fileText).getRootElement();
  final Module module=ApplicationManager.getApplication().runWriteAction(new Computable<Module>(){
    @Override public Module compute(){
      return ModuleManager.getInstance(project).newModule(path + "/" + EclipseProjectFinder.findProjectName(path)+ ModuleFileType.DOT_DEFAULT_EXTENSION);
    }
  }
);
  final ModifiableRootModel rootModel=ModuleRootManager.getInstance(module).getModifiableModel();
  final EclipseClasspathReader classpathReader=new EclipseClasspathReader(path,project,null);
  classpathReader.init(rootModel);
  classpathReader.readClasspath(rootModel,new ArrayList<String>(),new ArrayList<String>(),new HashSet<String>(),new HashSet<String>(),null,classpathElement);
  new EclipseClasspathStorageProvider().assertCompatible(rootModel);
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      rootModel.commit();
    }
  }
);
  return module;
}
