{
  ArrayList<UsageInfo> result=new ArrayList<UsageInfo>();
  if (!mySettings.generateDelegate() && toSearchFor != null) {
    Collection<PsiReference> refs=ReferencesSearch.search(toSearchFor,toSearchFor.getResolveScope(),true).findAll();
    if (toSearchFor instanceof GrField) {
      final GrAccessorMethod[] getters=((GrField)toSearchFor).getGetters();
      for (      GrAccessorMethod getter : getters) {
        refs.addAll(MethodReferencesSearch.search(getter,getter.getResolveScope(),true).findAll());
      }
    }
    for (    PsiReference ref1 : refs) {
      PsiElement ref=ref1.getElement();
      if (!PsiTreeUtil.isAncestor(toReplaceIn,ref,false)) {
        result.add(new ExternalUsageInfo(ref));
      }
 else {
        result.add(new ChangedMethodCallInfo(ref));
      }
    }
  }
  if (mySettings.replaceAllOccurrences()) {
    PsiElement[] exprs=myContext.occurrences;
    for (    PsiElement expr : exprs) {
      result.add(new InternalUsageInfo(expr));
    }
  }
 else {
    if (myContext.expression != null) {
      result.add(new InternalUsageInfo(myContext.expression));
    }
  }
  final UsageInfo[] usageInfos=result.toArray(new UsageInfo[result.size()]);
  return UsageViewUtil.removeDuplicatedUsages(usageInfos);
}
