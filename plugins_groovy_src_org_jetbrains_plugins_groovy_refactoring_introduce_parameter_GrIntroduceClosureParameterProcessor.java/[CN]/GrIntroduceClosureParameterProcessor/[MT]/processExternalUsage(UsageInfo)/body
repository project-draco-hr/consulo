{
  GrCall callExpression=GroovyRefactoringUtil.getCallExpressionByMethodReference(usage.getElement());
  LOG.assertTrue(callExpression != null);
  if (callExpression instanceof GrMethodCall) {
    final GrExpression invoked=((GrMethodCall)callExpression).getInvokedExpression();
    if (invoked instanceof GrReferenceExpression) {
      final GroovyResolveResult result=((GrReferenceExpression)invoked).advancedResolve();
      final PsiElement resolved=result.getElement();
      if (resolved instanceof GrAccessorMethod && !result.isInvokedOnProperty()) {
        PsiElement actualCallExpression=callExpression.getParent();
        if (actualCallExpression instanceof GrCall) {
          callExpression=(GrCall)actualCallExpression;
        }
      }
    }
  }
  GrArgumentList argList=callExpression.getArgumentList();
  LOG.assertTrue(argList != null);
  GrExpression[] oldArgs=argList.getExpressionArguments();
  final GrExpression anchor=getAnchorForArgument(oldArgs,toReplaceIn.isVarArgs(),toReplaceIn.getParameterList());
  GrClosureSignature signature=GrClosureSignatureUtil.createSignature(callExpression);
  if (signature == null)   signature=GrClosureSignatureUtil.createSignature(toReplaceIn);
  final GrClosureSignatureUtil.ArgInfo<PsiElement>[] actualArgs=GrClosureSignatureUtil.mapParametersToArguments(signature,argList,callExpression,callExpression.getClosureArguments(),true);
  if (PsiTreeUtil.isAncestor(toReplaceIn,callExpression,false)) {
    argList.addAfter(myFactory.createExpressionFromText(mySettings.getName()),anchor);
  }
 else {
    PsiElement initializer=ExpressionConverter.getExpression(myParameterInitializer.getExpression(),GroovyFileType.GROOVY_LANGUAGE,myProject);
    LOG.assertTrue(initializer instanceof GrExpression);
    GrExpression newArg=(GrExpression)argList.addAfter(initializer,anchor);
    new OldReferencesResolver(callExpression,newArg,toReplaceIn,mySettings.replaceFieldsWithGetters(),initializer,signature,actualArgs,toReplaceIn.getParameters()).resolve();
    ChangeContextUtil.clearContextInfo(initializer);
  }
  if (actualArgs == null) {
    GroovyIntroduceParameterUtil.removeParamsFromUnresolvedCall(callExpression,toReplaceIn.getParameters(),mySettings.parametersToRemove());
  }
 else {
    GroovyIntroduceParameterUtil.removeParametersFromCall(actualArgs,mySettings.parametersToRemove());
  }
}
