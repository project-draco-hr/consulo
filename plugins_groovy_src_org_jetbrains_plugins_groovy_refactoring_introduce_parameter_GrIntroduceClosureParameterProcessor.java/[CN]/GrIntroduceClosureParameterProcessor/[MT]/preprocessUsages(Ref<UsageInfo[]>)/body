{
  UsageInfo[] usagesIn=refUsages.get();
  MultiMap<PsiElement,String> conflicts=new MultiMap<PsiElement,String>();
  if (!mySettings.generateDelegate()) {
    detectAccessibilityConflicts(usagesIn,conflicts);
  }
  final GrExpression expression=mySettings.getExpression();
  if (expression != null && toSearchFor instanceof PsiMember) {
    final AnySupers anySupers=new AnySupers();
    expression.accept(anySupers);
    if (anySupers.isResult()) {
      final PsiElement containingClass=PsiUtil.getFileOrClassContext(toReplaceIn);
      for (      UsageInfo usageInfo : usagesIn) {
        if (!(usageInfo.getElement() instanceof PsiMethod) && !(usageInfo instanceof InternalUsageInfo)) {
          if (!PsiTreeUtil.isAncestor(containingClass,usageInfo.getElement(),false)) {
            conflicts.putValue(expression,RefactoringBundle.message("parameter.initializer.contains.0.but.not.all.calls.to.method.are.in.its.class",CommonRefactoringUtil.htmlEmphasize(PsiKeyword.SUPER)));
            break;
          }
        }
      }
    }
  }
  return showConflicts(conflicts,usagesIn);
}
