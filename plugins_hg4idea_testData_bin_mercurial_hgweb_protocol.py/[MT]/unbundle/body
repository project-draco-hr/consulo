def unbundle(repo, req):
    proto = (req.env.get('wsgi.url_scheme') or 'http')
    their_heads = req.form['heads'][0].split(' ')

    def check_heads():
        heads = map(hex, repo.heads())
        return ((their_heads == [hex('force')]) or (their_heads == heads))
    if (not check_heads()):
        req.drain()
        raise ErrorResponse(HTTP_OK, 'unsynced changes')
    (fd, tempname) = tempfile.mkstemp(prefix='hg-unbundle-')
    fp = os.fdopen(fd, 'wb+')
    try:
        length = int(req.env['CONTENT_LENGTH'])
        for s in util.filechunkiter(req, limit=length):
            fp.write(s)
        try:
            lock = repo.lock()
            try:
                if (not check_heads()):
                    raise ErrorResponse(HTTP_OK, 'unsynced changes')
                fp.seek(0)
                header = fp.read(6)
                if (header.startswith('HG') and (not header.startswith('HG10'))):
                    raise ValueError('unknown bundle version')
                elif (header not in changegroupmod.bundletypes):
                    raise ValueError('unknown bundle compression type')
                gen = changegroupmod.unbundle(header, fp)
                oldio = (sys.stdout, sys.stderr)
                sys.stderr = sys.stdout = cStringIO.StringIO()
                try:
                    url = ('remote:%s:%s:%s' % (proto, urllib.quote(req.env.get('REMOTE_HOST', '')), urllib.quote(req.env.get('REMOTE_USER', ''))))
                    try:
                        ret = repo.addchangegroup(gen, 'serve', url)
                    except util.Abort as inst:
                        sys.stdout.write(('abort: %s\n' % inst))
                        ret = 0
                finally:
                    val = sys.stdout.getvalue()
                    (sys.stdout, sys.stderr) = oldio
                req.respond(HTTP_OK, HGTYPE)
                return (('%d\n%s' % (ret, val)),)
            finally:
                lock.release()
        except ValueError as inst:
            raise ErrorResponse(HTTP_OK, inst)
        except (OSError, IOError) as inst:
            error = getattr(inst, 'strerror', 'Unknown error')
            if (not isinstance(error, str)):
                error = ('Error: %s' % str(error))
            if (inst.errno == errno.ENOENT):
                code = HTTP_NOT_FOUND
            else:
                code = HTTP_SERVER_ERROR
            filename = getattr(inst, 'filename', '')
            if (filename and filename.startswith(repo.root)):
                filename = filename[(len(repo.root) + 1):]
                text = ('%s: %s' % (error, filename))
            else:
                text = error.replace((repo.root + os.path.sep), '')
            raise ErrorResponse(code, text)
    finally:
        fp.close()
        os.unlink(tempname)
