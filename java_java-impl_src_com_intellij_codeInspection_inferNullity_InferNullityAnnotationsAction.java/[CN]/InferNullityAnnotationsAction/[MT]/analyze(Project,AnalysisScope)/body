{
  final PsiClass annotationClass=JavaPsiFacade.getInstance(project).findClass(AnnotationUtil.NULLABLE,GlobalSearchScope.allScope(project));
  if (annotationClass == null) {
    Messages.showErrorDialog(project,"Infer Nullity Annotations requires that the JetBrains nullity annotations" + " be available to your project.\n\nYou will need to add annotations.jar (available in your IDEA distribution) as a library. " + " The IDEA nullity annotations are freely usable and redistributable under the Apache 2.0 license.",INFER_NULLITY_ANNOTATIONS);
    return;
  }
  final LanguageLevel languageLevel=PsiUtil.getLanguageLevel(annotationClass);
  if (languageLevel.compareTo(LanguageLevel.JDK_1_5) < 0) {
    Messages.showErrorDialog(project,"Infer Nullity Annotations requires the project language level be set to 1.5 or greater.",INFER_NULLITY_ANNOTATIONS);
    return;
  }
  if (scope.checkScopeWritable(project))   return;
  final NullityInferrer inferrer=new NullityInferrer(myAnnotateLocalVariablesCb.isSelected(),project);
  final ProgressManager progressManager=ProgressManager.getInstance();
  final int totalFiles=scope.getFileCount();
  final ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
  if (indicator != null) {
    indicator.setText(INFER_NULLITY_ANNOTATIONS);
  }
  if (progressManager.runProcessWithProgressSynchronously(new Runnable(){
    @Override public void run(){
      scope.accept(new PsiElementVisitor(){
        int myFileCount=0;
        @Override public void visitFile(        final PsiFile file){
          myFileCount++;
          if (indicator != null) {
            final VirtualFile virtualFile=file.getVirtualFile();
            if (virtualFile != null) {
              indicator.setText2(ProjectUtil.calcRelativeToProjectPath(virtualFile,project));
            }
            indicator.setFraction(((double)myFileCount) / totalFiles);
          }
          if (file instanceof PsiJavaFile) {
            inferrer.collect(file);
          }
        }
      }
);
    }
  }
,INFER_NULLITY_ANNOTATIONS,true,project))   return;
  final Runnable applyRunnable=new Runnable(){
    @Override public void run(){
      new WriteCommandAction(project,INFER_NULLITY_ANNOTATIONS){
        @Override protected void run(        Result result) throws Throwable {
          inferrer.apply(project);
        }
      }
.execute();
    }
  }
;
  SwingUtilities.invokeLater(applyRunnable);
}
