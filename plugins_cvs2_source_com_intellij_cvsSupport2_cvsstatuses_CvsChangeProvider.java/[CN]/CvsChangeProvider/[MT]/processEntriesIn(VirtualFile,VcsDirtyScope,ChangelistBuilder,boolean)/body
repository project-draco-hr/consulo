{
  final FilePath path=PeerFactory.getInstance().getVcsContextFactory().createFilePathOn(dir);
  if (!scope.belongsTo(path))   return;
  final DirectoryContent dirContent=getDirectoryContent(dir);
  for (  VirtualFile file : dirContent.getUnknownFiles()) {
    builder.processUnversionedFile(file);
  }
  for (  VirtualFile file : dirContent.getIgnoredFiles()) {
    builder.processIgnoredFile(file);
  }
  for (  Entry entry : dirContent.getDeletedDirectories()) {
    builder.processLocallyDeletedFile(VcsUtil.getFilePath(CvsVfsUtil.getFileFor(dir,entry.getFileName()),true));
  }
  for (  Entry entry : dirContent.getDeletedFiles()) {
    builder.processLocallyDeletedFile(VcsUtil.getFilePath(CvsVfsUtil.getFileFor(dir,entry.getFileName()),false));
  }
  checkSwitchedDir(dir,builder,scope);
  if (CvsUtil.fileIsUnderCvs(dir) && dir.getChildren().length == 1 && dirContent.getDeletedFiles().isEmpty() && hasRemovedFiles(dirContent.getFiles())) {
    builder.processChange(new Change(CurrentContentRevision.create(path),CurrentContentRevision.create(path),FileStatus.DELETED));
  }
  for (  VirtualFileEntry fileEntry : dirContent.getFiles()) {
    processFile(dir,fileEntry.getVirtualFile(),fileEntry.getEntry(),builder);
  }
  if (recursively) {
    for (    VirtualFile file : dir.getChildren()) {
      if (file.isDirectory() && !ProjectRootManager.getInstance(myVcs.getProject()).getFileIndex().isIgnored(file)) {
        processEntriesIn(file,scope,builder,true);
      }
    }
  }
}
