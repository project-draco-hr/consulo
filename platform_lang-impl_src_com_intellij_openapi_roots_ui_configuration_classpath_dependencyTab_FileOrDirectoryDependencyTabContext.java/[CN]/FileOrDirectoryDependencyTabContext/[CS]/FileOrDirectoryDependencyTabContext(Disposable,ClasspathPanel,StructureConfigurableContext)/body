{
  super(panel,context);
  myLibraryTypes=new HashMap<LibraryRootsComponentDescriptor,LibraryType>();
  myDefaultDescriptor=new DefaultLibraryRootsComponentDescriptor();
  for (  LibraryType<?> libraryType : LibraryEditingUtil.getSuitableTypes(myClasspathPanel)) {
    LibraryRootsComponentDescriptor descriptor=null;
    if (libraryType != null) {
      descriptor=libraryType.createLibraryRootsComponentDescriptor();
    }
    if (descriptor == null) {
      descriptor=myDefaultDescriptor;
    }
    if (!myLibraryTypes.containsKey(descriptor)) {
      myLibraryTypes.put(descriptor,libraryType);
    }
  }
  Module module=myClasspathPanel.getRootModel().getModule();
  myFileChooserDescriptor=createFileChooserDescriptor();
  myFileSystemTree=new FileSystemTreeImpl(module.getProject(),myFileChooserDescriptor);
  Disposer.register(parent,myFileSystemTree);
  myFileSystemTree.showHiddens(true);
  final VirtualFile dirForSelect=ObjectUtil.chooseNotNull(module.getModuleDir(),module.getProject().getBaseDir());
  if (dirForSelect != null) {
    myFileSystemTree.select(dirForSelect,new Runnable(){
      @Override public void run(){
        myFileSystemTree.expand(dirForSelect,null);
      }
    }
);
  }
}
