{
  super(panel,context);
  myLibraryTypes=new HashMap<LibraryRootsComponentDescriptor,LibraryType>();
  myDefaultDescriptor=new DefaultLibraryRootsComponentDescriptor();
  for (  LibraryType<?> libraryType : LibraryEditingUtil.getSuitableTypes(myClasspathPanel)) {
    LibraryRootsComponentDescriptor descriptor=null;
    if (libraryType != null) {
      descriptor=libraryType.createLibraryRootsComponentDescriptor();
    }
    if (descriptor == null) {
      descriptor=myDefaultDescriptor;
    }
    if (!myLibraryTypes.containsKey(descriptor)) {
      myLibraryTypes.put(descriptor,libraryType);
    }
  }
  Module module=myClasspathPanel.getRootModel().getModule();
  myFileSystemTree=new FileSystemTreeImpl(module.getProject(),createFileChooserDescriptor());
  Disposer.register(parent,myFileSystemTree);
  myFileSystemTree.showHiddens(true);
  final VirtualFile moduleDir=module.getModuleDir();
  myFileSystemTree.select(moduleDir,new Runnable(){
    @Override public void run(){
      myFileSystemTree.expand(moduleDir,null);
    }
  }
);
}
