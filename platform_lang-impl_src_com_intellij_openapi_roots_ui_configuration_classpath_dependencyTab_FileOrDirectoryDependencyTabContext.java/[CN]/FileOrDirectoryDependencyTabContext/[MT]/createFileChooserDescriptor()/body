{
  final FileChooserDescriptor chooserDescriptor;
  final List<Pair<LibraryRootsComponentDescriptor,FileChooserDescriptor>> descriptors=new ArrayList<Pair<LibraryRootsComponentDescriptor,FileChooserDescriptor>>();
  for (  LibraryRootsComponentDescriptor componentDescriptor : myLibraryTypes.keySet()) {
    descriptors.add(Pair.create(componentDescriptor,componentDescriptor.createAttachFilesChooserDescriptor(null)));
  }
  if (descriptors.size() == 1) {
    chooserDescriptor=descriptors.get(0).getSecond();
  }
 else {
    chooserDescriptor=new FileChooserDescriptor(true,true,true,false,true,false){
      @Override public boolean isFileSelectable(      VirtualFile file){
        for (        Pair<LibraryRootsComponentDescriptor,FileChooserDescriptor> pair : descriptors) {
          if (pair.getSecond().isFileSelectable(file)) {
            return true;
          }
        }
        return false;
      }
      @Override public boolean isFileVisible(      VirtualFile file,      boolean showHiddenFiles){
        for (        Pair<LibraryRootsComponentDescriptor,FileChooserDescriptor> pair : descriptors) {
          if (pair.getSecond().isFileVisible(file,showHiddenFiles)) {
            return true;
          }
        }
        return false;
      }
    }
;
  }
  chooserDescriptor.putUserData(LangDataKeys.MODULE_CONTEXT,myClasspathPanel.getRootModel().getModule());
  return chooserDescriptor;
}
