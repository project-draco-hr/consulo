{
  super.addProblemElement(refElement,filterSuppressed,descriptions);
  final InspectionResultsView view=getContext().getView();
  if (view != null && refElement instanceof RefElement) {
    if (myToolNode == null) {
      final HighlightSeverity currentSeverity=getCurrentSeverity((RefElement)refElement);
      view.addTool(this,HighlightDisplayLevel.find(currentSeverity),getContext().getUIOptions().GROUP_BY_SEVERITY);
    }
 else     if (myToolNode.getProblemCount() > 1000) {
      return;
    }
    final HashMap<RefEntity,CommonProblemDescriptor[]> problems=new HashMap<RefEntity,CommonProblemDescriptor[]>();
    problems.put(refElement,descriptions);
    final HashMap<String,Set<RefEntity>> contents=new HashMap<String,Set<RefEntity>>();
    final String groupName=refElement.getRefManager().getGroupName((RefElement)refElement);
    Set<RefEntity> content=contents.get(groupName);
    if (content == null) {
      content=new HashSet<RefEntity>();
      contents.put(groupName,content);
    }
    content.add(refElement);
    UIUtil.invokeLaterIfNeeded(new Runnable(){
      public void run(){
        final GlobalInspectionContextImpl context=getContext();
        if (context != null) {
          view.getProvider().appendToolNodeContent(myToolNode,(InspectionTreeNode)myToolNode.getParent(),context.getUIOptions().SHOW_STRUCTURE,contents,problems,(DefaultTreeModel)view.getTree().getModel());
          context.addView(view);
        }
      }
    }
);
  }
}
