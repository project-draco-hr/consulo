{
  final Document document=new SAXBuilder().build(new File(PathManager.getPluginsPath() + "/RegExpSupport/testData/RETest.xml"));
  final List<Element> list=XPath.selectNodes(document.getRootElement(),"//test");
  OUT.mkdirs();
  int i=0;
  for (  Element element : list) {
    final String name;
    final String s=((Element)element.getParent()).getName();
    if (!"tests".equals(s)) {
      name=s + "/test-" + ++i+ ".regexp";
    }
 else {
      name="test-" + ++i + ".regexp";
    }
    final Result result=Result.valueOf((String)XPath.selectSingleNode(element,"string(expected)"));
    final boolean warn=!"false".equals(element.getAttributeValue("warning"));
    final boolean info="true".equals(element.getAttributeValue("info"));
    myMap.put(name,new Test(result,warn,info));
    final File file=new File(OUT,name);
    file.getParentFile().mkdirs();
    final FileWriter stream=new FileWriter(file);
    final String pattern=(String)XPath.selectSingleNode(element,"string(pattern)");
    if (!"false".equals(element.getAttributeValue("verify")))     try {
      Pattern.compile(pattern);
      if (result == Result.ERR) {
        System.out.println("Incorrect FAIL value for " + pattern);
      }
    }
 catch (    PatternSyntaxException e) {
      if (result == Result.OK) {
        System.out.println("Incorrect OK value for " + pattern);
      }
    }
    stream.write(pattern);
    stream.close();
  }
  super.setUp();
  myOut=new ByteArrayOutputStream();
  System.setErr(new PrintStream(myOut));
}
