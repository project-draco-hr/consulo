{
  int n=0;
  int failed=0;
  for (  String name : myMap.keySet()) {
    if (prefix == null && name.contains("/")) {
      continue;
    }
    if (prefix != null && !name.startsWith(prefix)) {
      continue;
    }
    System.out.print("filename = " + name);
    n++;
    final MainParseTest.Test test=myMap.get(name);
    try {
      myFixture.testHighlighting(test.showWarnings,true,test.showInfo,name);
      if (test.expectedResult == Result.ERR) {
        System.out.println("  FAILED. Expression incorrectly parsed OK: " + FileUtil.loadFile(new File(getTestDataPath(),name)));
        failed++;
      }
 else {
        System.out.println("  OK");
      }
    }
 catch (    Throwable e) {
      if (test.expectedResult == Result.ERR) {
        System.out.println("  OK");
      }
 else {
        e.printStackTrace();
        System.out.println("  FAILED. Expression = " + FileUtil.loadFile(new File(getTestDataPath(),name)));
        if (myOut.size() > 0) {
          String line;
          final BufferedReader reader=new BufferedReader(new StringReader(myOut.toString()));
          do {
            line=reader.readLine();
          }
 while (line != null && (line.trim().length() == 0 || line.trim().equals("ERROR:")));
          if (line != null) {
            if (line.matches(".*java.lang.Error: junit.framework.AssertionFailedError:.*")) {
              System.out.println("ERROR: " + line.replace("java.lang.Error: junit.framework.AssertionFailedError:",""));
            }
          }
 else {
            System.out.println("ERROR: " + myOut.toString());
          }
        }
        failed++;
      }
    }
    myOut.reset();
  }
  System.out.println("");
  System.out.println(n + " Tests executed, " + failed+ " failed");
  assertFalse(failed > 0);
}
