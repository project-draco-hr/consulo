{
  VirtualFile root=((HgRepositoryLocation)repositoryLocation).getRoot();
  HgFile hgFile=new HgFile(root,VcsUtil.getFilePath(root.getPath()));
  List<CommittedChangeList> result=new LinkedList<CommittedChangeList>();
  HgLogCommand hgLogCommand=new HgLogCommand(project);
  hgLogCommand.setLogFile(false);
  List<HgFileRevision> localRevisions=hgLogCommand.execute(hgFile,maxCount > 0 ? maxCount : DEFAULT_MAX_COUNT);
  for (  HgFileRevision revision : localRevisions) {
    HgRevisionNumber vcsRevisionNumber=revision.getRevisionNumber();
    List<Change> changes=new LinkedList<Change>();
    for (    String file : revision.getFilesModified()) {
      changes.add(createChange(root,vcsRevisionNumber,file,file));
    }
    for (    String file : revision.getFilesAdded()) {
      changes.add(createChange(root,vcsRevisionNumber,null,file));
    }
    for (    String file : revision.getFilesDeleted()) {
      changes.add(createChange(root,vcsRevisionNumber,file,null));
    }
    for (    Map.Entry<String,String> copiedFile : revision.getFilesCopied().entrySet()) {
      changes.add(createChange(root,vcsRevisionNumber,copiedFile.getKey(),copiedFile.getValue()));
    }
    result.add(new HgCommitedChangeList(revision.getCommitMessage(),revision.getAuthor(),vcsRevisionNumber,revision.getRevisionDate(),changes));
  }
  return result;
}
