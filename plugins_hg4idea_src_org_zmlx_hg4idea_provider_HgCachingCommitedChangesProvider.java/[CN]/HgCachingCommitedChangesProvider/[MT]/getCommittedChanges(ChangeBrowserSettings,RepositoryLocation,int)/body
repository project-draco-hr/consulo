{
  VirtualFile root=((HgRepositoryLocation)repositoryLocation).getRoot();
  HgFile hgFile=new HgFile(root,VcsUtil.getFilePath(root.getPath()));
  List<CommittedChangeList> result=new LinkedList<CommittedChangeList>();
  HgLogCommand hgLogCommand=new HgLogCommand(project);
  hgLogCommand.setLogFile(false);
  List<HgFileRevision> localRevisions=hgLogCommand.execute(hgFile,maxCount == 0 ? -1 : maxCount,true);
  Collections.reverse(localRevisions);
  for (  HgFileRevision revision : localRevisions) {
    HgRevisionNumber vcsRevisionNumber=revision.getRevisionNumber();
    List<HgRevisionNumber> parents=vcsRevisionNumber.getParents();
    HgRevisionNumber firstParent=parents.isEmpty() ? null : parents.get(0);
    List<Change> changes=new ArrayList<Change>();
    for (    String file : revision.getModifiedFiles()) {
      changes.add(createChange(root,file,firstParent,file,vcsRevisionNumber,FileStatus.MODIFIED));
    }
    for (    String file : revision.getAddedFiles()) {
      changes.add(createChange(root,null,null,file,vcsRevisionNumber,FileStatus.ADDED));
    }
    for (    String file : revision.getDeletedFiles()) {
      changes.add(createChange(root,file,firstParent,null,vcsRevisionNumber,FileStatus.DELETED));
    }
    for (    Map.Entry<String,String> copiedFile : revision.getCopiedFiles().entrySet()) {
      changes.add(createChange(root,copiedFile.getKey(),firstParent,copiedFile.getValue(),vcsRevisionNumber,FileStatus.ADDED));
    }
    result.add(new HgCommittedChangeList(myVcs,vcsRevisionNumber,revision.getBranchName(),revision.getCommitMessage(),revision.getAuthor(),revision.getRevisionDate(),changes));
  }
  Collections.reverse(result);
  return result;
}
