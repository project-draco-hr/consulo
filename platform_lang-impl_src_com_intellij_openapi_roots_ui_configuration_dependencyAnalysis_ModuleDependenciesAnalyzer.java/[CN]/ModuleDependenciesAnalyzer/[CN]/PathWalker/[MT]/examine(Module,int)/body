{
  if (myVisited.contains(m)) {
    return;
  }
  myVisited.add(m);
  try {
    final OrderEnumerator e=ModuleRootManager.getInstance(m).orderEntries();
    if (!mySdk || level != 0) {
      e.withoutSdk();
    }
    if (myCompile && level != 0) {
      e.exportedOnly();
    }
    if (myProduction) {
      e.productionOnly();
    }
    if (myCompile) {
      e.compileOnly();
    }
 else {
      e.runtimeOnly();
    }
    e.forEach(new Processor<OrderEntry>(){
      @Override public boolean process(      OrderEntry orderEntry){
        myStack.add(new OrderEntryPathElement(orderEntry));
        try {
          if (orderEntry instanceof ModuleOrderEntry) {
            ModuleOrderEntry o=(ModuleOrderEntry)orderEntry;
            examine(o.getModule(),level + 1);
          }
 else           if (orderEntry instanceof ModuleSourceOrderEntry) {
            if (!myProduction || !myCompile) {
              CompilerPathsManager e=CompilerPathsManager.getInstance(m.getProject());
              final OrderPath p=new OrderPath(myStack);
              addUrlPath(p,e.getCompilerOutputUrl(m,ContentFolderType.SOURCE));
              addUrlPath(p,e.getCompilerOutputUrl(m,ContentFolderType.RESOURCE));
              boolean includeTests=!myCompile ? !myProduction : level > 0 && !myProduction;
              if (includeTests) {
                addUrlPath(p,e.getCompilerOutputUrl(m,ContentFolderType.TEST));
              }
              addEntryPath(orderEntry,p);
            }
          }
 else {
            final OrderPath p=new OrderPath(myStack);
            for (            String u : orderEntry.getUrls(OrderRootType.CLASSES)) {
              addUrlPath(p,u);
            }
            addEntryPath(orderEntry,p);
          }
        }
  finally {
          myStack.remove(myStack.size() - 1);
        }
        return true;
      }
    }
);
  }
  finally {
    myVisited.remove(m);
  }
}
