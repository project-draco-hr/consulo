{
  final SubTree tree=new SubTree(myWorkingCopyDir);
  checkin();
  disableSilentOperation(VcsConfiguration.StandardConfirmation.ADD);
  VirtualFile ignored=createFileInCommand(tree.mySourceDir,"ign.txt","ignored");
  final File wasIgnored=new File(ignored.getPath());
  final FileGroupInfo groupInfo=new FileGroupInfo();
  groupInfo.onFileEnabled(ignored);
  SvnPropertyService.doAddToIgnoreProperty(myVcs,myProject,false,new VirtualFile[]{ignored},groupInfo);
  checkin();
  myDirtyScopeManager.markEverythingDirty();
  myChangeListManager.ensureUpToDate(false);
  Assert.assertTrue(FileStatus.IGNORED.equals(myChangeListManager.getStatus(ignored)));
  renameFileInCommand(myProject,tree.mySourceDir,"renamed");
  myDirtyScopeManager.markEverythingDirty();
  myChangeListManager.ensureUpToDate(false);
  final Change dirChange=assertRenamedChange(tree.mySourceDir);
  final Change s1Change=assertMovedChange(tree.myS1File);
  final Change s2Change=assertMovedChange(tree.myS2File);
  Assert.assertTrue(!wasIgnored.exists());
  Assert.assertTrue(FileStatus.IGNORED.equals(myChangeListManager.getStatus(ignored)));
  rollbackIMpl(Collections.singletonList(dirChange),Collections.<Change>emptyList());
  ignored=LocalFileSystem.getInstance().refreshAndFindFileByIoFile(wasIgnored);
  Assert.assertTrue(FileStatus.IGNORED.equals(myChangeListManager.getStatus(ignored)));
  Assert.assertTrue(wasIgnored.exists());
}
