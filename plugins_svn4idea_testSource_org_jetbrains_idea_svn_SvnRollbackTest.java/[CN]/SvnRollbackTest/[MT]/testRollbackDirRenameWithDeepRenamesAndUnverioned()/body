{
  final SubTree tree=new SubTree(myWorkingCopyDir);
  checkin();
  final VirtualFile inner=createDirInCommand(tree.mySourceDir,"inner");
  final VirtualFile inner1=createDirInCommand(inner,"inner1");
  final VirtualFile inner2=createDirInCommand(inner1,"inner2");
  final VirtualFile innerFile_=createFileInCommand(inner1,"inInner38432.txt","kdfjsdisdjiuewjfew wefn w");
  final VirtualFile inner3=createDirInCommand(inner2,"inner3");
  final VirtualFile innerFile=createFileInCommand(inner3,"inInner.txt","kdfjsdisdjiuewjfew wefn w");
  final VirtualFile innerFile1=createFileInCommand(inner3,"inInner1.txt","kdfjsdisdjiuewjfew wefn w");
  disableSilentOperation(VcsConfiguration.StandardConfirmation.ADD);
  final VirtualFile deepUNversioned=createFileInCommand(inner3,"deep.txt","deep");
  final File wasU=new File(deepUNversioned.getPath());
  final File wasLowestDir=new File(inner3.getPath());
  final File wasInnerFile1=new File(innerFile1.getPath());
  final File wasInnerFile=new File(innerFile.getPath());
  checkin();
  runAndVerifyStatus("? root" + File.separator + "source"+ File.separator+ "inner"+ File.separator+ "inner1"+ File.separator+ "inner2"+ File.separator+ "inner3"+ File.separator+ "deep.txt");
  editFileInCommand(myProject,innerFile,"some content");
  final File inner2Before=new File(inner2.getPath());
  renameFileInCommand(myProject,inner2,"newName2");
  final File wasU2=new File(deepUNversioned.getPath());
  final File inner2After=new File(inner2.getPath());
  final File wasInnerFileAfter=new File(innerFile.getPath());
  final File wasInnerFile1After=new File(innerFile1.getPath());
  final File wasLowestDirAfter=new File(inner3.getPath());
  renameFileInCommand(myProject,tree.mySourceDir,"newNameSource");
  Assert.assertTrue(!wasU.exists());
  Assert.assertTrue(!wasU2.exists());
  myDirtyScopeManager.markEverythingDirty();
  myChangeListManager.ensureUpToDate(false);
  final Change change=assertRenamedChange(tree.mySourceDir);
  final Change s1Change=assertMovedChange(tree.myS1File);
  final Change s2Change=assertMovedChange(tree.myS2File);
  final Change inner2Change=assertMovedChange(inner2);
  assertMovedChange(inner);
  final Change innerChange=assertMovedChange(innerFile);
  final Change fantomDelete1=new Change(new SimpleContentRevision("1",new FilePathImpl(wasLowestDir,true),"2"),new SimpleContentRevision("1",new FilePathImpl(wasLowestDirAfter,true),"2"));
  final Change fantomDelete2=new Change(new SimpleContentRevision("1",new FilePathImpl(wasInnerFile1,false),"2"),new SimpleContentRevision("1",new FilePathImpl(wasInnerFile1After,false),SVNRevision.WORKING.getName()));
  rollbackIMpl(Arrays.asList(change),Arrays.asList(new Change(new SimpleContentRevision("1",new FilePathImpl(wasInnerFile,false),"2"),new SimpleContentRevision("1",new FilePathImpl(wasInnerFileAfter,false),SVNRevision.WORKING.getName())),new Change(new SimpleContentRevision("1",new FilePathImpl(inner2Before,true),"2"),new SimpleContentRevision("1",new FilePathImpl(inner2After,true),SVNRevision.WORKING.getName())),fantomDelete1,fantomDelete2));
  Assert.assertTrue(wasU2.exists());
}
