{
  final SubTree tree=new SubTree(myWorkingCopyDir);
  checkin();
  final VirtualFile inner=createDirInCommand(tree.mySourceDir,"inner");
  final VirtualFile innerFile=createFileInCommand(inner,"inInner.txt","kdfjsdisdjiuewjfew wefn w");
  checkin();
  runAndVerifyStatus();
  final File fileBefore=new File(innerFile.getPath());
  setProperty(fileBefore,"abc","cde");
  Assert.assertEquals("cde",getProperty(new File(innerFile.getPath()),"abc"));
  final File innerBefore=new File(inner.getPath());
  renameFileInCommand(myProject,inner,"innerNew");
  final File innerAfter=new File(inner.getPath());
  final File fileAfter=new File(innerFile.getPath());
  renameFileInCommand(myProject,tree.mySourceDir,"newName");
  myDirtyScopeManager.markEverythingDirty();
  myChangeListManager.ensureUpToDate(false);
  final Change change=assertRenamedChange(tree.mySourceDir);
  final Change s1Change=assertMovedChange(tree.myS1File);
  final Change s2Change=assertMovedChange(tree.myS2File);
  assertMovedChange(inner);
  final Change innerChange=assertMovedChange(innerFile);
  Assert.assertEquals("cde",getProperty(new File(innerFile.getPath()),"abc"));
  rollbackIMpl(Arrays.asList(change),Arrays.asList(new Change(new SimpleContentRevision("1",new FilePathImpl(innerBefore,true),"2"),new SimpleContentRevision("1",new FilePathImpl(innerAfter,true),SVNRevision.WORKING.getName())),new Change(new SimpleContentRevision("1",new FilePathImpl(fileBefore,false),"2"),new SimpleContentRevision("1",new FilePathImpl(fileAfter,false),SVNRevision.WORKING.getName()))));
  Assert.assertEquals("cde",getProperty(fileAfter,"abc"));
}
