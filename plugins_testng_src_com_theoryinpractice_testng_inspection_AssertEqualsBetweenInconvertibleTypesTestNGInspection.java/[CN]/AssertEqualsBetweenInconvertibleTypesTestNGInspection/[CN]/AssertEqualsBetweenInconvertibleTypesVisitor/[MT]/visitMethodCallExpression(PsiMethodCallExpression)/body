{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  @NonNls final String methodName=methodExpression.getReferenceName();
  if (!"assertEquals".equals(methodName)) {
    return;
  }
  final PsiMethod method=expression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiClass containingClass=method.getContainingClass();
  final boolean junit;
  if (InheritanceUtil.isInheritor(containingClass,"org.testng.Assert")) {
    junit=false;
  }
 else   if (InheritanceUtil.isInheritor(containingClass,"org.testng.AssertJUnit")) {
    junit=true;
  }
 else {
    return;
  }
  final PsiParameterList parameterList=method.getParameterList();
  final PsiParameter[] parameters=parameterList.getParameters();
  if (parameters.length < 2) {
    return;
  }
  final PsiType firstParameterType=parameters[0].getType();
  final PsiExpressionList argumentList=expression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  final PsiExpression expression1;
  final PsiExpression expression2;
  final PsiType parameterType1;
  final PsiType parameterType2;
  if (junit && firstParameterType.equalsToText(CommonClassNames.JAVA_LANG_STRING)) {
    if (arguments.length < 3) {
      return;
    }
    expression1=arguments[1];
    expression2=arguments[2];
    parameterType1=parameters[1].getType();
    parameterType2=parameters[2].getType();
  }
 else {
    if (arguments.length < 2) {
      return;
    }
    expression1=arguments[0];
    expression2=arguments[1];
    parameterType1=parameters[0].getType();
    parameterType2=parameters[1].getType();
  }
  final PsiType type1=expression1.getType();
  if (type1 == null) {
    return;
  }
  final PsiType type2=expression2.getType();
  if (type2 == null) {
    return;
  }
  final PsiManager manager=expression.getManager();
  final GlobalSearchScope scope=expression.getResolveScope();
  final PsiClassType objectType=PsiType.getJavaLangObject(manager,scope);
  if (!objectType.equals(parameterType1) || !objectType.equals(parameterType2)) {
    return;
  }
  if (TypeConversionUtil.areTypesConvertible(type1,type2)) {
    return;
  }
  final PsiElement referenceNameElement=methodExpression.getReferenceNameElement();
  if (referenceNameElement == null) {
    return;
  }
  myProblemsHolder.registerProblem(referenceNameElement,"<code>#ref()</code> between objects of inconvertible types '" + StringUtil.escapeXml(type1.getPresentableText()) + "' and '"+ StringUtil.escapeXml(type2.getPresentableText())+ "' #loc");
}
