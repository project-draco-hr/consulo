{
  super.visitMethod(method);
  if (!method.hasModifierProperty(PsiModifier.STATIC)) {
    return;
  }
  if (method.hasModifierProperty(PsiModifier.PRIVATE)) {
    return;
  }
  if (method.getNameIdentifier() == null) {
    return;
  }
  final UsageProcessor usageProcessor=new UsageProcessor();
  final PsiClass usageClass=usageProcessor.getUsageClass(method);
  if (usageClass == null) {
    return;
  }
  if (usageClass.equals(method.getContainingClass())) {
    return;
  }
  if (usageClass instanceof PsiAnonymousClass) {
    final PsiClass[] interfaces=usageClass.getInterfaces();
    final PsiClass superClass;
    if (interfaces.length == 1) {
      superClass=interfaces[0];
      registerMethodError(method,superClass,Boolean.FALSE);
    }
 else {
      superClass=usageClass.getSuperClass();
      if (superClass == null) {
        return;
      }
      registerMethodError(method,superClass,Boolean.TRUE);
    }
  }
 else {
    registerMethodError(method,usageClass);
  }
}
