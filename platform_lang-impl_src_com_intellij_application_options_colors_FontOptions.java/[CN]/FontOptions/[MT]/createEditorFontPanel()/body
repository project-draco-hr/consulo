{
  JPanel editorFontPanel=new JPanel();
  editorFontPanel.setBorder(IdeBorderFactory.createTitledBorder(ApplicationBundle.message("group.editor.font")));
  editorFontPanel.setLayout(new GridBagLayout());
  GridBagConstraints gbConstraints=new GridBagConstraints();
  gbConstraints.fill=GridBagConstraints.HORIZONTAL;
  gbConstraints.weightx=0;
  gbConstraints.weighty=1;
  gbConstraints.gridx=0;
  gbConstraints.gridy=0;
  gbConstraints.gridwidth=1;
  gbConstraints.insets=new Insets(0,0,0,0);
  gbConstraints.gridwidth=1;
  editorFontPanel.add(new JLabel(ApplicationBundle.message("label.font.name")),gbConstraints);
  myFontNameField=new MyTextField(20);
  myFontNameField.setEditable(false);
  myFontNameField.setFocusable(false);
  gbConstraints.gridx=1;
  gbConstraints.insets=new Insets(0,0,0,2);
  editorFontPanel.add(myFontNameField,gbConstraints);
  JButton myFontNameButton=new FixedSizeButton(myFontNameField);
  gbConstraints.gridx=2;
  gbConstraints.insets=new Insets(0,0,0,8);
  editorFontPanel.add(myFontNameButton,gbConstraints);
  gbConstraints.gridx=3;
  gbConstraints.insets=new Insets(0,0,0,0);
  editorFontPanel.add(new JLabel(ApplicationBundle.message("editbox.font.size")),gbConstraints);
  gbConstraints.gridx=4;
  gbConstraints.insets=new Insets(0,0,0,8);
  myEditorFontSizeField=new MyTextField(4);
  gbConstraints.gridx=5;
  editorFontPanel.add(myEditorFontSizeField,gbConstraints);
  gbConstraints.insets=new Insets(0,0,0,0);
  gbConstraints.gridx=6;
  editorFontPanel.add(new JLabel(ApplicationBundle.message("editbox.line.spacing")),gbConstraints);
  gbConstraints.insets=new Insets(0,0,0,0);
  gbConstraints.gridx=7;
  myLineSpacingField=new MyTextField(4);
  editorFontPanel.add(myLineSpacingField,gbConstraints);
  gbConstraints.weightx=1;
  gbConstraints.gridx=8;
  editorFontPanel.add(new TailPanel(),gbConstraints);
  myFontNameButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      EditorColorsScheme current=getCurrentScheme();
      if (ColorAndFontOptions.isReadOnly(current) || ColorSettingsUtil.isSharedScheme(current)) {
        showReadOnlyMessage(FontOptions.this,ColorSettingsUtil.isSharedScheme(current));
        return;
      }
      selectFont();
    }
  }
);
  myEditorFontSizeField.getDocument().addDocumentListener(new DocumentAdapter(){
    public void textChanged(    DocumentEvent event){
      if (myIsInSchemeChange)       return;
      int fontSize=12;
      try {
        fontSize=Integer.parseInt(myEditorFontSizeField.getText());
      }
 catch (      NumberFormatException e) {
      }
 finally {
        if (fontSize < 1)         fontSize=1;
        if (fontSize > 30)         fontSize=30;
        getCurrentScheme().setEditorFontSize(fontSize);
        updateDescription(true);
      }
    }
  }
);
  myLineSpacingField.getDocument().addDocumentListener(new DocumentAdapter(){
    public void textChanged(    DocumentEvent event){
      if (myIsInSchemeChange)       return;
      float lineSpacing=1;
      try {
        lineSpacing=Float.parseFloat(myLineSpacingField.getText());
      }
 catch (      NumberFormatException e) {
      }
 finally {
        if (lineSpacing <= 0)         lineSpacing=1;
        if (lineSpacing > 30)         lineSpacing=30;
        if (getCurrentScheme().getLineSpacing() != lineSpacing) {
          getCurrentScheme().setLineSpacing(lineSpacing);
        }
        updateDescription(true);
      }
    }
  }
);
  return editorFontPanel;
}
