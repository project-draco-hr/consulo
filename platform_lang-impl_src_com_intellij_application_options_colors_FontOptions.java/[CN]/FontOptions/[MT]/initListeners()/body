{
  myOnlyMonospacedCheckBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      boolean onlyMonospaced=myOnlyMonospacedCheckBox.isSelected();
      EditorColorsManager.getInstance().setUseOnlyMonospacedFonts(onlyMonospaced);
      onFontsInit();
    }
  }
);
  mySelectedFontsModel.addListDataListener(new ListDataListener(){
    @Override public void intervalAdded(    ListDataEvent e){
      syncFontFamilies();
    }
    @Override public void intervalRemoved(    ListDataEvent e){
      syncFontFamilies();
    }
    @Override public void contentsChanged(    ListDataEvent e){
      syncFontFamilies();
    }
    private void syncFontFamilies(){
      if (myIsInSchemeChange) {
        return;
      }
      FontPreferences fontPreferences=getFontPreferences();
      fontPreferences.clearFonts();
      Enumeration elements=mySelectedFontsModel.elements();
      while (elements.hasMoreElements()) {
        String fontFamily=(String)elements.nextElement();
        if (mySelectedFontsModel.getSize() > 1 || !FontPreferences.DEFAULT_FONT_NAME.equals(fontFamily)) {
          fontPreferences.addFontFamily(fontFamily);
        }
      }
    }
  }
);
  mySelectedFontsList.addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      Object value=mySelectedFontsList.getSelectedValue();
      if (value != null) {
        boolean toRestore=myIsInSchemeChange;
        myIsInSchemeChange=true;
        try {
          myEditorFontSizeField.setText(String.valueOf(getFontPreferences().getSize((String)value)));
        }
  finally {
          myIsInSchemeChange=toRestore;
        }
      }
    }
  }
);
  myEditorFontSizeField.getDocument().addDocumentListener(new DocumentAdapter(){
    @Override public void textChanged(    DocumentEvent event){
      if (myIsInSchemeChange || !SwingUtilities.isEventDispatchThread())       return;
      try {
        int fontSize=Integer.parseInt(myEditorFontSizeField.getText());
        if (fontSize < 1)         fontSize=1;
        if (fontSize > OptionsConstants.MAX_EDITOR_FONT_SIZE)         fontSize=OptionsConstants.MAX_EDITOR_FONT_SIZE;
        Object selectedFont=mySelectedFontsList.getSelectedValue();
        if (selectedFont != null) {
          FontPreferences fontPreferences=getFontPreferences();
          fontPreferences.register((String)selectedFont,fontSize);
        }
      }
 catch (      NumberFormatException e) {
      }
 finally {
        updateDescription(true);
      }
    }
  }
);
  myLineSpacingField.getDocument().addDocumentListener(new DocumentAdapter(){
    @Override public void textChanged(    DocumentEvent event){
      if (myIsInSchemeChange)       return;
      float lineSpacing=1;
      try {
        lineSpacing=Float.parseFloat(myLineSpacingField.getText());
      }
 catch (      NumberFormatException e) {
      }
 finally {
        if (lineSpacing <= 0)         lineSpacing=1;
        if (lineSpacing > 30)         lineSpacing=30;
        if (getLineSpacing() != lineSpacing) {
          setCurrentLineSpacing(lineSpacing);
        }
        updateDescription(true);
      }
    }
  }
);
}
