{
  myIsInSchemeChange=true;
  myLineSpacingField.setText(Float.toString(getLineSpacing()));
  mySelectedFontsModel.clear();
  FontPreferences fontPreferences=getFontPreferences();
  List<String> fontFamilies=fontPreferences.getEffectiveFontFamilies();
  Set<String> selectedFonts=ContainerUtilRt.newHashSet();
  Object selectedValue=mySelectedFontsList.getSelectedValue();
  mySelectedFontsModel.clear();
  if (fontFamilies.isEmpty()) {
    mySelectedFontsModel.addElement(fontPreferences.getFontFamily());
    selectedFonts.add(fontPreferences.getFontFamily());
  }
 else {
    for (    String fontFamily : fontFamilies) {
      mySelectedFontsModel.addElement(fontFamily);
      selectedFonts.add(fontFamily);
    }
  }
  int newSelectionIndex=0;
  if (selectedValue != null) {
    newSelectionIndex=Math.max(0,mySelectedFontsModel.indexOf(selectedValue));
  }
  mySelectedFontsList.setSelectedIndex(newSelectionIndex);
  for (int i=myAllFontsModel.size() - 1; i >= 0; i--) {
    if (selectedFonts.contains(myAllFontsModel.getElementAt(i))) {
      myAllFontsModel.remove(i);
    }
  }
  myEditorFontSizeField.setText(String.valueOf(fontPreferences.getSize(fontPreferences.getFontFamily())));
  boolean enabled=!ColorAndFontOptions.isReadOnly(myOptions.getSelectedScheme());
  myOnlyMonospacedCheckBox.setEnabled(enabled);
  myLineSpacingField.setEnabled(enabled);
  myEditorFontSizeField.setEditable(enabled);
  myFontsControl.setEnabled(enabled);
  myIsInSchemeChange=false;
}
