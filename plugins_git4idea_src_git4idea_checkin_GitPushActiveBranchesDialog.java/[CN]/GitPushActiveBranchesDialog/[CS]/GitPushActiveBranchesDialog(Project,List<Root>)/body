{
  super(project,true);
  myRoots=roots;
  myCommitTree.setModel(new DefaultTreeModel(createTree()));
  TreeUtil.expandAll(myCommitTree);
  for (  Root r : roots) {
    if (r.branch == null) {
      setErrorText(GitBundle.getString("push.active.error.no.branch"));
      setOKActionEnabled(false);
      break;
    }
    if (r.remoteCommits != 0 && r.commits.size() != 0) {
      setErrorText(GitBundle.getString("push.active.error.behind"));
      setOKActionEnabled(false);
      break;
    }
  }
  myCommitTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      TreePath path=myCommitTree.getSelectionModel().getSelectionPath();
      if (path == null) {
        myViewButton.setEnabled(false);
        return;
      }
      DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();
      myViewButton.setEnabled(node != null && myCommitTree.getSelectionCount() == 1 && node.getUserObject() instanceof Commit);
    }
  }
);
  myViewButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      TreePath path=myCommitTree.getSelectionModel().getSelectionPath();
      if (path == null) {
        return;
      }
      DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();
      if (node == null || !(node.getUserObject() instanceof Commit)) {
        return;
      }
      Commit c=(Commit)node.getUserObject();
      GitShowAllSubmittedFilesAction.showSubmittedFiles(project,c.revision.asString(),c.root.root);
    }
  }
);
  setTitle(GitBundle.getString("push.active.title"));
  setOKButtonText(GitBundle.getString("push.active.button"));
  init();
}
