{
  super(project,true);
  myVcs=GitVcs.getInstance(project);
  myProject=project;
  myVcsRoots=vcsRoots;
  myGeneralSettings=GeneralSettings.getInstance();
  myProjectManager=ProjectManagerEx.getInstanceEx();
  updateTree(roots,null);
  updateUI();
  final GitVcsSettings settings=GitVcsSettings.getInstance(project);
  if (settings != null) {
    UpdatePolicyUtils.updatePolicyItem(settings.getPushActiveBranchesRebaseSavePolicy(),myStashRadioButton,myShelveRadioButton);
  }
  ChangeListener listener=new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      if (settings != null) {
        settings.setPushActiveBranchesRebaseSavePolicy(UpdatePolicyUtils.getUpdatePolicy(myStashRadioButton,myShelveRadioButton));
      }
    }
  }
;
  myStashRadioButton.addChangeListener(listener);
  myShelveRadioButton.addChangeListener(listener);
  myCommitTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      TreePath path=myCommitTree.getSelectionModel().getSelectionPath();
      if (path == null) {
        myViewButton.setEnabled(false);
        return;
      }
      DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();
      myViewButton.setEnabled(node != null && myCommitTree.getSelectionCount() == 1 && node.getUserObject() instanceof Commit);
    }
  }
);
  myViewButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      TreePath path=myCommitTree.getSelectionModel().getSelectionPath();
      if (path == null) {
        return;
      }
      DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();
      if (node == null || !(node.getUserObject() instanceof Commit)) {
        return;
      }
      Commit c=(Commit)node.getUserObject();
      GitShowAllSubmittedFilesAction.showSubmittedFiles(project,c.revision.asString(),c.root.root);
    }
  }
);
  myFetchButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      fetch();
    }
  }
);
  myRebaseButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      rebase();
    }
  }
);
  myPushButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      push();
    }
  }
);
  setTitle(GitBundle.getString("push.active.title"));
  setOKButtonText(GitBundle.getString("push.active.rebase.and.push"));
  setCancelButtonText(GitBundle.getString("git.push.active.close"));
  init();
}
