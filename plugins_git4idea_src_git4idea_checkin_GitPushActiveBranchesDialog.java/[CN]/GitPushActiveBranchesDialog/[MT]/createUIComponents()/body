{
  myTreeRoot=new CheckedTreeNode("ROOT");
  myCommitTree=new CheckboxTree(new CheckboxTree.CheckboxTreeCellRenderer(){
    @Override public void customizeRenderer(    JTree tree,    Object value,    boolean selected,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      if (UIUtil.isUnderGTKLookAndFeel()) {
        final Color background=selected ? UIUtil.getTreeSelectionBackground() : UIUtil.getTreeTextBackground();
        UIUtil.changeBackGround(this,background);
      }
      ColoredTreeCellRenderer r=getTextRenderer();
      if (!(value instanceof DefaultMutableTreeNode)) {
        renderUnknown(r,value);
        return;
      }
      DefaultMutableTreeNode node=(DefaultMutableTreeNode)value;
      if (!(node.getUserObject() instanceof Node)) {
        renderUnknown(r,node.getUserObject());
        return;
      }
      ((Node)node.getUserObject()).render(r);
    }
    /** 
 * Render unknown node
 * @param r     a renderer to use
 * @param value the unknown value
 */
    private void renderUnknown(    ColoredTreeCellRenderer r,    Object value){
      r.append("UNSUPPORTED NODE TYPE: " + (value == null ? "null" : value.getClass().getName()),SimpleTextAttributes.ERROR_ATTRIBUTES);
    }
  }
,myTreeRoot){
    @Override protected void onNodeStateChanged(    CheckedTreeNode node){
      updateButtons();
      super.onNodeStateChanged(node);
    }
  }
;
}
