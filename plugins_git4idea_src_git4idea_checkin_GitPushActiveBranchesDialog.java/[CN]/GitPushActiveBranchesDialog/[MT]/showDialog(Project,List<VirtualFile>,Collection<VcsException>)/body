{
  final List<Root> roots=loadRoots(project,vcsRoots,exceptions);
  if (!exceptions.isEmpty()) {
    Messages.showErrorDialog(project,GitBundle.getString("push.active.fetch.failed"),GitBundle.getString("push.active.fetch.failed.title"));
    return;
  }
  GitPushActiveBranchesDialog d=new GitPushActiveBranchesDialog(project,roots);
  d.show();
  if (d.isOK()) {
    final ProgressManager manager=ProgressManager.getInstance();
    manager.runProcessWithProgressSynchronously(new Runnable(){
      public void run(){
        for (        Root r : roots) {
          if (r.remote != null && r.commits.size() != 0) {
            GitLineHandler h=new GitLineHandler(project,r.root,GitHandler.PUSH);
            h.addParameters("-v",r.remote,r.branch + ":" + r.remoteBranch);
            GitHandlerUtil.doSynchronouslyWithExceptions(h);
          }
        }
      }
    }
,GitBundle.getString("push.active.pushing"),false,project);
  }
}
