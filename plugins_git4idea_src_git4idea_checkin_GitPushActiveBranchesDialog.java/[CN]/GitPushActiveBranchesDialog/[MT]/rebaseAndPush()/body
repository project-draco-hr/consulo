{
  final Task.Backgroundable rebaseAndPushTask=new Task.Backgroundable(myProject,GitBundle.getString("push.active.fetching")){
    public void run(    @NotNull ProgressIndicator indicator){
      List<VcsException> exceptions=new ArrayList<VcsException>();
      List<VcsException> pushExceptions=new ArrayList<VcsException>();
      for (int i=0; i < 3; i++) {
        RebaseInfo rebaseInfo=collectRebaseInfo();
        if (rebaseInfo.reorderedCommits.isEmpty()) {
          final Collection<Root> rootsToPush=getRootsToPush();
          exceptions=executePushCommand(rootsToPush);
          if (exceptions.isEmpty() && !rootsToPush.isEmpty()) {
            int commitsNum=0;
            for (            Root root : rootsToPush) {
              commitsNum+=root.commits.size();
              Set<String> unchecked=rebaseInfo.uncheckedCommits.get(root.root);
              if (unchecked != null) {
                commitsNum-=unchecked.size();
              }
            }
            final String pushMessage="Pushed " + commitsNum + " "+ StringUtil.pluralize("commit",commitsNum)+ ".";
            GitUIUtil.notifySuccess(myProject,"",pushMessage);
            VcsBalloonProblemNotifier.showOverVersionControlView(myVcs.getProject(),pushMessage,MessageType.INFO);
            return;
          }
          pushExceptions=new ArrayList<VcsException>(exceptions);
          exceptions.clear();
        }
        final List<Root> roots=loadRoots(myProject,myVcsRoots,exceptions,true);
        if (!exceptions.isEmpty()) {
          notifyMessage(myProject,"Failed to fetch",null,NotificationType.ERROR,true,exceptions);
          return;
        }
        updateTree(roots,rebaseInfo.uncheckedCommits);
        if (isRebaseNeeded()) {
          rebaseInfo=collectRebaseInfo();
          executeRebase(exceptions,rebaseInfo);
          if (!exceptions.isEmpty()) {
            notifyMessage(myProject,"Failed to rebase",null,NotificationType.ERROR,true,exceptions);
            return;
          }
          GitUtil.refreshFiles(myProject,rebaseInfo.roots);
        }
      }
      notifyMessage(myProject,"Failed to push","Update project and push again",NotificationType.ERROR,true,pushExceptions);
    }
  }
;
  GitVcs.runInBackground(rebaseAndPushTask);
}
