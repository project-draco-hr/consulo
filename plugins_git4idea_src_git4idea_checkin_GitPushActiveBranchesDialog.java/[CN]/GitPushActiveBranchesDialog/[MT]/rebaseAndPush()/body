{
  final Task.Backgroundable rebaseAndPushTask=new Task.Backgroundable(myProject,GitBundle.getString("push.active.fetching")){
    public void run(    @NotNull ProgressIndicator indicator){
      List<VcsException> exceptions=new ArrayList<VcsException>(1);
      do {
        final RebaseInfo rebaseInfo=collectRebaseInfo();
        final List<Root> roots=loadRoots(myProject,myVcsRoots,exceptions,true);
        if (!exceptions.isEmpty()) {
          notifyExceptionWhenClosed("Failed to fetch.",exceptions);
          return;
        }
        updateTree(roots,rebaseInfo.uncheckedCommits);
        executeRebase(exceptions,rebaseInfo);
        if (!exceptions.isEmpty()) {
          notifyExceptionWhenClosed("Failed to rebase.",exceptions);
          return;
        }
        GitUtil.refreshFiles(myProject,rebaseInfo.roots);
      }
 while (isRebaseNeeded());
      final Collection<Root> rootsToPush=getRootsToPush();
      exceptions=executePushCommand(rootsToPush);
      if (!exceptions.isEmpty()) {
        notifyExceptionWhenClosed("Failed to push",exceptions);
        return;
      }
    }
  }
;
  myVcs.runInBackground(rebaseAndPushTask);
}
