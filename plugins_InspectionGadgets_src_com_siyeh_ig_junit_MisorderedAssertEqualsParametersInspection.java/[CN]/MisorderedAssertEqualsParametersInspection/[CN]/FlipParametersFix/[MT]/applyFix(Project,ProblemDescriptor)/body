{
  final PsiElement methodNameIdentifier=descriptor.getPsiElement();
  final PsiMethodCallExpression callExpression=(PsiMethodCallExpression)methodNameIdentifier.getParent().getParent();
  final PsiReferenceExpression methodExpression=callExpression.getMethodExpression();
  final PsiMethod method=(PsiMethod)methodExpression.resolve();
  final PsiParameterList paramList=method.getParameterList();
  final PsiParameter[] parameters=paramList.getParameters();
  final PsiManager psiManager=callExpression.getManager();
  final GlobalSearchScope scope=GlobalSearchScope.allScope(project);
  final PsiType stringType=PsiType.getJavaLangString(psiManager,scope);
  final PsiType paramType1=parameters[0].getType();
  final int expectedPosition;
  final int actualPosition;
  if (paramType1.equals(stringType) && parameters.length > 2) {
    expectedPosition=1;
    actualPosition=2;
  }
 else {
    expectedPosition=0;
    actualPosition=1;
  }
  final PsiExpressionList argumentList=callExpression.getArgumentList();
  final PsiExpression[] args=argumentList.getExpressions();
  final PsiExpression expectedArg=args[expectedPosition];
  final PsiExpression actualArg=args[actualPosition];
  final String actualArgText=actualArg.getText();
  final String expectedArgText=expectedArg.getText();
  replaceExpression(project,expectedArg,actualArgText);
  replaceExpression(project,actualArg,expectedArgText);
}
