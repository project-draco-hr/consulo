{
  super.visitMethodCallExpression(expression);
  if (!isAssertEquals(expression)) {
    return;
  }
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  final PsiMethod method=(PsiMethod)methodExpression.resolve();
  if (method == null) {
    return;
  }
  final PsiParameterList paramList=method.getParameterList();
  if (paramList == null) {
    return;
  }
  final PsiParameter[] parameters=paramList.getParameters();
  if (parameters.length == 0) {
    return;
  }
  final PsiManager psiManager=expression.getManager();
  final Project project=psiManager.getProject();
  final GlobalSearchScope scope=GlobalSearchScope.allScope(project);
  final PsiType stringType=PsiType.getJavaLangString(psiManager,scope);
  final PsiType paramType1=parameters[0].getType();
  final int expectedPosition;
  final int actualPosition;
  if (paramType1.equals(stringType) && parameters.length > 2) {
    expectedPosition=1;
    actualPosition=2;
  }
 else {
    expectedPosition=0;
    actualPosition=1;
  }
  final PsiExpressionList argumentList=expression.getArgumentList();
  if (argumentList == null) {
    return;
  }
  final PsiExpression[] args=argumentList.getExpressions();
  if (actualPosition >= args.length) {
    return;
  }
  final PsiExpression expectedArg=args[expectedPosition];
  final PsiExpression actualArg=args[actualPosition];
  if (expectedArg == null || actualArg == null) {
    return;
  }
  if (expectedArg instanceof PsiLiteralExpression) {
    return;
  }
  if (!(actualArg instanceof PsiLiteralExpression)) {
    return;
  }
  registerMethodCallError(expression);
}
