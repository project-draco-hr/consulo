{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  @NonNls final String methodName=methodExpression.getReferenceName();
  if (!"assertEquals".equals(methodName) && !"assertArrayEquals".equals(methodName)) {
    return;
  }
  final PsiMethod method=expression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiClass containingClass=method.getContainingClass();
  if (!InheritanceUtil.isInheritor(containingClass,"junit.framework.Assert") && !InheritanceUtil.isInheritor(containingClass,"org.junit.Assert")) {
    return;
  }
  final PsiExpressionList argumentList=expression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length < 2) {
    return;
  }
  final PsiManager psiManager=expression.getManager();
  final Project project=psiManager.getProject();
  final GlobalSearchScope scope=GlobalSearchScope.allScope(project);
  final PsiType stringType=PsiType.getJavaLangString(psiManager,scope);
  final PsiType argumentType1=arguments[0].getType();
  final PsiExpression expectedArgument;
  final PsiExpression actualArgument;
  if (stringType.equals(argumentType1) && arguments.length > 2) {
    expectedArgument=arguments[1];
    actualArgument=arguments[2];
  }
 else {
    expectedArgument=arguments[0];
    actualArgument=arguments[1];
  }
  if (expectedArgument == null || actualArgument == null) {
    return;
  }
  if (isLiteralOrConstant(expectedArgument)) {
    return;
  }
  if (!isLiteralOrConstant(actualArgument)) {
    return;
  }
  registerMethodCallError(expression);
}
