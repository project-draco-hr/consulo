{
  super.visitMethodCallExpression(expression);
  if (!isAssertEquals(expression)) {
    return;
  }
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  final PsiMethod method=(PsiMethod)methodExpression.resolve();
  if (method == null) {
    return;
  }
  final PsiParameterList parameterList=method.getParameterList();
  if (parameterList.getParametersCount() == 0) {
    return;
  }
  final PsiManager psiManager=expression.getManager();
  final Project project=psiManager.getProject();
  final GlobalSearchScope scope=GlobalSearchScope.allScope(project);
  final PsiType stringType=PsiType.getJavaLangString(psiManager,scope);
  final PsiParameter[] parameters=parameterList.getParameters();
  final PsiType parameterType1=parameters[0].getType();
  final int expectedPosition;
  final int actualPosition;
  if (parameterType1.equals(stringType) && parameters.length > 2) {
    expectedPosition=1;
    actualPosition=2;
  }
 else {
    expectedPosition=0;
    actualPosition=1;
  }
  final PsiExpressionList argumentList=expression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (actualPosition >= arguments.length) {
    return;
  }
  final PsiExpression expectedArgument=arguments[expectedPosition];
  final PsiExpression actualArgument=arguments[actualPosition];
  if (expectedArgument == null || actualArgument == null) {
    return;
  }
  if (isLiteralOrConstant(expectedArgument)) {
    return;
  }
  if (!isLiteralOrConstant(actualArgument)) {
    return;
  }
  registerMethodCallError(expression);
}
