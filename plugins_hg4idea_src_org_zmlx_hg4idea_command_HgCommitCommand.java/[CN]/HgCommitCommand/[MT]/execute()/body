{
  if (StringUtil.isEmptyOrSpaces(myMessage)) {
    throw new HgCommandException(HgVcsMessages.message("hg4idea.commit.error.messageEmpty"));
  }
  if (myFiles.isEmpty()) {
    commitChunkFiles(Collections.<String>emptyList(),false);
  }
 else {
    List<String> relativePaths=ContainerUtil.map2List(myFiles,new Function<HgFile,String>(){
      @Override public String fun(      HgFile file){
        return file.getRelativePath();
      }
    }
);
    List<List<String>> chunkedCommits=VcsFileUtil.chunkRelativePaths(relativePaths);
    int size=chunkedCommits.size();
    commitChunkFiles(chunkedCommits.get(0),false);
    HgVcs vcs=HgVcs.getInstance(myProject);
    boolean amendCommit=vcs != null && vcs.getVersion().isAmendSupported();
    for (int i=1; i < size; i++) {
      List<String> chunk=chunkedCommits.get(i);
      commitChunkFiles(chunk,amendCommit);
    }
  }
  final MessageBus messageBus=myProject.getMessageBus();
  messageBus.syncPublisher(HgVcs.REMOTE_TOPIC).update(myProject,null);
  messageBus.syncPublisher(HgVcs.BRANCH_TOPIC).update(myProject,null);
}
