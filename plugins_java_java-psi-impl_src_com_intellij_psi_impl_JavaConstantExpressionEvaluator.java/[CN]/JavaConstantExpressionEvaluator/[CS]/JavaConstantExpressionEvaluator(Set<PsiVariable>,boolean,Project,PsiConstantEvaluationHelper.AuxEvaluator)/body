{
  myMapFactory=auxEvaluator != null ? new Factory<ConcurrentMap<PsiElement,Object>>(){
    @Override public ConcurrentMap<PsiElement,Object> create(){
      return auxEvaluator.getCacheMap(throwExceptionOnOverflow);
    }
  }
 : new Factory<ConcurrentMap<PsiElement,Object>>(){
    @Override public ConcurrentMap<PsiElement,Object> create(){
      final Key<CachedValue<ConcurrentMap<PsiElement,Object>>> key=throwExceptionOnOverflow ? CONSTANT_VALUE_WITH_OVERFLOW_MAP_KEY : CONSTANT_VALUE_WO_OVERFLOW_MAP_KEY;
      return CachedValuesManager.getManager(myProject).getCachedValue(myProject,key,PROVIDER,false);
    }
  }
;
  myProject=project;
  myConstantExpressionVisitor=new ConstantExpressionVisitor(visitedVars,throwExceptionOnOverflow,auxEvaluator);
}
