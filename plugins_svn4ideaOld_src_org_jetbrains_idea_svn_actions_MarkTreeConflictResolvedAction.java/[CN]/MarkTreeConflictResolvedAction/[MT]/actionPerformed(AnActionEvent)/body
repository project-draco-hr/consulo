{
  final MyChecker checker=new MyChecker(e);
  if (!checker.isEnabled())   return;
  final String markText=SvnBundle.message("action.mark.tree.conflict.resolved.confirmation.title");
  final int result=Messages.showYesNoDialog(checker.getProject(),SvnBundle.message("action.mark.tree.conflict.resolved.confirmation.text"),markText,Messages.getQuestionIcon());
  if (result == DialogWrapper.OK_EXIT_CODE) {
    final Ref<VcsException> exception=new Ref<VcsException>();
    ProgressManager.getInstance().run(new Task.Backgroundable(checker.getProject(),markText,true,BackgroundFromStartOption.getInstance()){
      public void run(      @NotNull ProgressIndicator indicator){
        final ConflictedSvnChange change=checker.getChange();
        final FilePath path=change.getTreeConflictMarkHolder();
        final SVNWCClient client=SvnVcs.getInstance(checker.getProject()).createWCClient();
        try {
          client.doResolve(path.getIOFile(),SVNDepth.EMPTY,false,false,true,SVNConflictChoice.MERGED);
        }
 catch (        SVNException e1) {
          exception.set(new VcsException(e1));
        }
        VcsDirtyScopeManager.getInstance(checker.getProject()).filePathsDirty(getDistinctFiles(change),null);
      }
    }
);
    if (!exception.isNull()) {
      AbstractVcsHelper.getInstance(checker.getProject()).showError(exception.get(),markText);
    }
  }
}
