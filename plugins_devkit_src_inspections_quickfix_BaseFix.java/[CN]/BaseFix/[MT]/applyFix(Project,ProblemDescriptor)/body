{
  if (!myElement.isValid())   return;
  final boolean external=descriptor.getPsiElement().getContainingFile() != myElement.getContainingFile();
  if (external) {
    final PsiClass clazz=PsiTreeUtil.getParentOfType(myElement,PsiClass.class,false);
    final ReadonlyStatusHandler readonlyStatusHandler=ReadonlyStatusHandler.getInstance(project);
    final VirtualFile[] files=new VirtualFile[]{myElement.getContainingFile().getVirtualFile()};
    final ReadonlyStatusHandler.OperationStatus status=readonlyStatusHandler.ensureFilesWritable(files);
    if (status.hasReadonlyFiles()) {
      final String className=clazz != null ? clazz.getQualifiedName() : myElement.getContainingFile().getName();
      Messages.showMessageDialog(project,DevKitBundle.message("inspections.registration.problems.quickfix.read-only",className),getName(),Messages.getErrorIcon());
      return;
    }
  }
  try {
    doFix(project,descriptor,external);
  }
 catch (  IncorrectOperationException e) {
    Logger.getInstance("#" + getClass().getName()).error(e);
  }
}
