{
  final PropertyInspectorTable inspector=(PropertyInspectorTable)e.getDataContext().getData(PropertyInspectorTable.class.getName());
  final IntrospectedProperty introspectedProperty=inspector.getSelectedIntrospectedProperty();
  final PsiClass aClass=inspector.getComponentClass();
  final PsiMethod getter=PropertyUtil.findPropertyGetter(aClass,introspectedProperty.getName(),false,true);
  LOG.assertTrue(getter != null);
  final PsiMethod setter=PropertyUtil.findPropertySetter(aClass,introspectedProperty.getName(),false,true);
  LOG.assertTrue(setter != null);
  final JavaDocManager javaDocManager=JavaDocManager.getInstance(aClass.getProject());
  final JavaDocInfoComponent component1=new JavaDocInfoComponent(javaDocManager);
  final JavaDocInfoComponent component2=new JavaDocInfoComponent(javaDocManager);
  final TabbedPaneWrapper tabbedPane=new TabbedPaneWrapper();
  tabbedPane.addTab(UIDesignerBundle.message("tab.getter"),component1);
  tabbedPane.addTab(UIDesignerBundle.message("tab.setter"),component2);
  final LightweightHint hint=new LightweightHint(tabbedPane.getComponent()){
    public void hide(){
      super.hide();
      inspector.requestFocusInWindow();
    }
  }
;
  component1.setHint(hint);
  component2.setHint(hint);
  javaDocManager.fetchDocInfo(javaDocManager.getDefaultProvider(getter),component1);
  javaDocManager.fetchDocInfo(javaDocManager.getDefaultProvider(setter),component2);
  final FocusWatcher focusWatcher=new FocusWatcher(){
    protected void focusLostImpl(    final FocusEvent e){
      hint.hide();
    }
  }
;
  focusWatcher.install(hint.getComponent());
  hint.show(inspector,0,0,inspector);
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      component1.requestFocus();
    }
  }
);
}
