{
  myContentManager=PeerFactory.getInstance().getContentFactory().createContentManager(true,project);
  myProject=project;
  myContentManager.addContentManagerListener(new ContentManagerAdapter(){
    public void contentRemoved(    ContentManagerEvent event){
      JComponent component=event.getContent().getComponent();
      JComponent removedComponent=component instanceof CvsTabbedWindowComponent ? ((CvsTabbedWindowComponent)component).getComponent() : component;
      if (removedComponent == myErrorsView) {
        myErrorsView.dispose();
        myErrorsView=null;
      }
 else       if (myOutput != null && removedComponent == myOutput.getComponent()) {
        EditorFactory.getInstance().releaseEditor(myOutput);
        myOutput=null;
      }
    }
  }
);
  StartupManager.getInstance(myProject).runWhenProjectIsInitialized(new Runnable(){
    public void run(){
      myIsInitialized=true;
      myIsDisposed=false;
      ToolWindowManager toolWindowManager=ToolWindowManager.getInstance(myProject);
      ToolWindow toolWindow=toolWindowManager.registerToolWindow(ToolWindowId.CVS,myContentManager.getComponent(),ToolWindowAnchor.BOTTOM);
      toolWindow.setIcon(IconLoader.getIcon("/_cvs/cvs.png"));
      toolWindow.installWatcher(myContentManager);
    }
  }
);
  Disposer.register(project,new Disposable(){
    public void dispose(){
      if (myOutput != null) {
        EditorFactory.getInstance().releaseEditor(myOutput);
        myOutput=null;
      }
      LOG.assertTrue(!myIsDisposed);
      try {
        if (!myIsInitialized)         return;
        ToolWindowManager toolWindowManager=ToolWindowManager.getInstance(myProject);
        toolWindowManager.unregisterToolWindow(ToolWindowId.CVS);
      }
  finally {
        myIsDisposed=true;
      }
    }
  }
);
}
