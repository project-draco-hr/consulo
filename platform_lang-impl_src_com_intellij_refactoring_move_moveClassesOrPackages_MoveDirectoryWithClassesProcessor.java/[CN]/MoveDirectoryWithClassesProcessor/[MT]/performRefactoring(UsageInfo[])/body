{
  try {
    for (    PsiDirectory directory : myDirectories) {
      getResultDirectory(directory).findOrCreateTargetDirectory();
    }
    for (    PsiFile psiFile : myFilesToMove.keySet()) {
      myFilesToMove.get(psiFile).findOrCreateTargetDirectory();
    }
  }
 catch (  IncorrectOperationException e) {
    Messages.showErrorDialog(myProject,e.getMessage(),CommonBundle.getErrorTitle());
    return;
  }
  try {
    final List<PsiFile> movedFiles=new ArrayList<PsiFile>();
    final Map<PsiElement,PsiElement> oldToNewElementsMapping=new HashMap<PsiElement,PsiElement>();
    for (    PsiFile psiFile : myFilesToMove.keySet()) {
      for (      MoveDirectoryWithClassesHelper helper : MoveDirectoryWithClassesHelper.findAll()) {
        helper.beforeMove(psiFile);
      }
      final RefactoringElementListener listener=getTransaction().getElementListener(psiFile);
      final PsiDirectory moveDestination=myFilesToMove.get(psiFile).getTargetDirectory();
      for (      MoveDirectoryWithClassesHelper helper : MoveDirectoryWithClassesHelper.findAll()) {
        boolean processed=helper.move(psiFile,moveDestination,oldToNewElementsMapping,movedFiles,listener);
        if (processed) {
          break;
        }
      }
    }
    for (    PsiElement newElement : oldToNewElementsMapping.values()) {
      for (      MoveDirectoryWithClassesHelper helper : MoveDirectoryWithClassesHelper.findAll()) {
        helper.afterMove(newElement);
      }
    }
    for (    PsiFile movedFile : movedFiles) {
      MoveFileHandler.forElement(movedFile).updateMovedFile(movedFile);
      FileReferenceContextUtil.decodeFileReferences(movedFile);
    }
    myNonCodeUsages=CommonMoveUtil.retargetUsages(usages,oldToNewElementsMapping);
    for (    MoveDirectoryWithClassesHelper helper : MoveDirectoryWithClassesHelper.findAll()) {
      helper.postProcessUsages(usages,new Function<PsiDirectory,PsiDirectory>(){
        @Override public PsiDirectory fun(        PsiDirectory dir){
          return getResultDirectory(dir).getTargetDirectory();
        }
      }
);
    }
    for (    PsiDirectory directory : myDirectories) {
      directory.delete();
    }
  }
 catch (  IncorrectOperationException e) {
    myNonCodeUsages=new NonCodeUsageInfo[0];
    RefactoringUIUtil.processIncorrectOperation(myProject,e);
  }
}
