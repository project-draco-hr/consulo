{
  if (document instanceof DocumentWindow) {
    final Document delegate=((DocumentWindow)document).getDelegate();
    final MarkupModelEx baseMarkupModel=(MarkupModelEx)forDocument(delegate,project,true);
    return new MarkupModelWindow(baseMarkupModel,(DocumentWindow)document);
  }
  if (project == null) {
    MarkupModelEx markupModel=document.getUserData(MARKUP_MODEL_KEY);
    if (create && markupModel == null) {
synchronized (lock) {
        markupModel=document.getUserData(MARKUP_MODEL_KEY);
        if (markupModel == null) {
          markupModel=new MarkupModelImpl((DocumentImpl)document);
          document.putUserData(MARKUP_MODEL_KEY,markupModel);
        }
      }
    }
    return markupModel;
  }
  final DocumentMarkupModelManager documentMarkupModelManager=project.isDisposed() ? null : DocumentMarkupModelManager.getInstance(project);
  if (documentMarkupModelManager == null || documentMarkupModelManager.isDisposed() || project.isDisposed()) {
    return new EmptyMarkupModel(document);
  }
  ConcurrentMap<Project,MarkupModelImpl> markupModelMap=getMarkupModelMap(document);
  MarkupModelImpl model=markupModelMap.get(project);
  if (create && model == null) {
synchronized (lock) {
      model=markupModelMap.get(project);
      if (model == null) {
        model=new MarkupModelImpl((DocumentImpl)document);
        markupModelMap.put(project,model);
        documentMarkupModelManager.registerDocument((DocumentImpl)document);
      }
    }
  }
  return model;
}
