{
  final String packageName=myTfPackage.getText();
  final String className=getClassName();
  final String[] errorString=new String[1];
  final PsiManager manager=PsiManager.getInstance(myProject);
  final PsiNameHelper nameHelper=JavaPsiFacade.getInstance(manager.getProject()).getNameHelper();
  if (packageName.length() > 0 && !nameHelper.isQualifiedName(packageName)) {
    errorString[0]=RefactoringBundle.message("invalid.target.package.name.specified");
  }
 else   if ("".equals(className)) {
    errorString[0]=RefactoringBundle.message("no.class.name.specified");
  }
 else {
    if (!nameHelper.isIdentifier(className)) {
      errorString[0]=RefactoringMessageUtil.getIncorrectIdentifierMessage(className);
    }
 else     if (!myDoClone) {
      try {
        if (myCbMoveToAnotherSourceFolder.isSelected() && myCbMoveToAnotherSourceFolder.isEnabled()) {
          final PackageWrapper targetPackage=new PackageWrapper(manager,packageName);
          final VirtualFile sourceRoot=MoveClassesOrPackagesUtil.chooseSourceRoot(targetPackage,ProjectRootManager.getInstance(myProject).getContentSourceRoots(),myDefaultTargetDirectory);
          if (sourceRoot == null)           return;
          new WriteCommandAction(myProject,CodeInsightBundle.message("create.directory.command")){
            @Override protected void run(            Result objectResult) throws Throwable {
              myTargetDirectory=RefactoringUtil.createPackageDirectoryInSourceRoot(targetPackage,sourceRoot);
            }
          }
.execute();
        }
 else {
          final PsiPackage aPackage=myDefaultTargetDirectory != null ? JavaDirectoryService.getInstance().getPackage(myDefaultTargetDirectory) : null;
          if (aPackage != null && Comparing.strEqual(aPackage.getQualifiedName(),packageName)) {
            myTargetDirectory=myDefaultTargetDirectory;
          }
 else {
            final Module module=ModuleUtil.findModuleForFile(myDefaultTargetDirectory.getVirtualFile(),myProject);
            if (module != null) {
              myTargetDirectory=MoveClassesOrPackagesUtil.chooseDestinationPackage(myProject,packageName,myDefaultTargetDirectory);
            }
 else {
              errorString[0]="No module found for directory \'" + myDefaultTargetDirectory.getVirtualFile().getPresentableUrl() + "\'";
            }
          }
        }
        if (myTargetDirectory == null) {
          if (errorString[0] == null) {
            errorString[0]="";
          }
        }
 else {
          CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
            public void run(){
              ApplicationManager.getApplication().runWriteAction(new Runnable(){
                public void run(){
                  errorString[0]=RefactoringMessageUtil.checkCanCreateClass(myTargetDirectory,className);
                }
              }
);
            }
          }
,RefactoringBundle.message("create.directory"),null);
        }
      }
 catch (      IncorrectOperationException e) {
        errorString[0]=e.getMessage();
      }
    }
    RecentsManager.getInstance(myProject).registerRecentEntry(RECENTS_KEY,packageName);
  }
  if (errorString[0] != null) {
    if (errorString[0].length() > 0) {
      Messages.showMessageDialog(myProject,errorString[0],RefactoringBundle.message("error.title"),Messages.getErrorIcon());
    }
    myNameField.requestFocusInWindow();
    return;
  }
  super.doOKAction();
}
