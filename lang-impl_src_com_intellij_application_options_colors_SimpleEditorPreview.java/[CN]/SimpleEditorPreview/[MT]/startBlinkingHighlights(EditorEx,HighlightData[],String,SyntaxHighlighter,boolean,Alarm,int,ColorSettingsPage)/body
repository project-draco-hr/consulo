{
  if (show && count <= 0)   return Collections.emptyList();
  editor.getMarkupModel().removeAllHighlighters();
  boolean found=false;
  java.util.List<HighlightData> highlights=new ArrayList<HighlightData>();
  java.util.List<HighlightData> matchingHighlights=new ArrayList<HighlightData>();
  for (int i=0; highlightDatum != null && i < highlightDatum.length; i++) {
    HighlightData highlightData=highlightDatum[i];
    String type=highlightData.getHighlightType();
    highlights.add(highlightData);
    if (show && type.equals(attrKey)) {
      highlightData=new HighlightData(highlightData.getStartOffset(),highlightData.getEndOffset(),CodeInsightColors.BLINKING_HIGHLIGHTS_ATTRIBUTES);
      highlights.add(highlightData);
      matchingHighlights.add(highlightData);
      found=true;
    }
  }
  if (!found && highlighter != null) {
    HighlighterIterator iterator=editor.getHighlighter().createIterator(0);
    do {
      IElementType tokenType=iterator.getTokenType();
      TextAttributesKey[] tokenHighlights=highlighter.getTokenHighlights(tokenType);
      for (      final TextAttributesKey tokenHighlight : tokenHighlights) {
        String type=tokenHighlight.getExternalName();
        if (show && type != null && type.equals(attrKey)) {
          HighlightData highlightData=new HighlightData(iterator.getStart(),iterator.getEnd(),CodeInsightColors.BLINKING_HIGHLIGHTS_ATTRIBUTES);
          highlights.add(highlightData);
          matchingHighlights.add(highlightData);
        }
      }
      iterator.advance();
    }
 while (!iterator.atEnd());
  }
  final Map<TextAttributesKey,String> displayText=ColorSettingsUtil.keyToDisplayTextMap(page);
  Collections.sort(highlights,new Comparator<HighlightData>(){
    public int compare(    HighlightData highlightData1,    HighlightData highlightData2){
      return highlightData1.getStartOffset() - highlightData2.getStartOffset();
    }
  }
);
  for (int i=highlights.size() - 1; i >= 0; i--) {
    HighlightData highlightData=highlights.get(i);
    int startOffset=highlightData.getStartOffset();
    HighlightData prevHighlightData=i == 0 ? null : highlights.get(i - 1);
    if (prevHighlightData != null && startOffset <= prevHighlightData.getEndOffset() && highlightData.getHighlightType().equals(prevHighlightData.getHighlightType())) {
      prevHighlightData.setEndOffset(highlightData.getEndOffset());
    }
 else {
      highlightData.addHighlToView(editor,myOptions.getSelectedScheme(),displayText);
    }
  }
  alarm.cancelAllRequests();
  alarm.addComponentRequest(new Runnable(){
    public void run(){
      startBlinkingHighlights(editor,highlightDatum,attrKey,highlighter,!show,alarm,count - 1,page);
    }
  }
,400);
  return matchingHighlights;
}
