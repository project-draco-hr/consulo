{
  final Project project=PlatformDataKeys.PROJECT.getData(e.getDataContext());
  if (project == null) {
    LOG.warn("Can't import gradle-local entities. Reason: target intellij project is undefined");
    return;
  }
  final Collection<GradleProjectStructureNode<?>> nodes=getInterestedNodes(e.getDataContext());
  List<GradleProjectStructureNode<?>> nodesToImport=new ArrayList<GradleProjectStructureNode<?>>();
  for (  GradleProjectStructureNode<?> node : nodes) {
    collectHierarchyToImport(node,nodesToImport);
  }
  GradleProjectStructureHelper projectStructureHelper=project.getComponent(GradleProjectStructureHelper.class);
  GradleModuleImporter moduleImporter=ServiceManager.getService(GradleModuleImporter.class);
  GradleModuleDependencyImporter dependencyImporter=ServiceManager.getService(GradleModuleDependencyImporter.class);
  for (  GradleProjectStructureNode<?> node : nodesToImport) {
switch (node.getType()) {
case MODULE:
      final GradleModule gradleModule=projectStructureHelper.findGradleModuleByName(node.getDescriptor().getName());
    if (gradleModule != null) {
      moduleImporter.importModule(gradleModule,project);
    }
  break;
case LIBRARY_DEPENDENCY:
final Object element=node.getDescriptor().getElement();
if (!(element instanceof GradleLibraryDependencyId)) {
break;
}
GradleLibraryDependencyId id=(GradleLibraryDependencyId)element;
final GradleLibraryDependency dependency=projectStructureHelper.findLibraryDependency(id);
final Module intellijModule=projectStructureHelper.findIntellijModuleByName(id.getModuleName());
if (dependency != null && intellijModule != null) {
dependencyImporter.importDependency(dependency,intellijModule);
}
break;
default :
}
}
}
