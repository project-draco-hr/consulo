{
  super(new BorderLayout());
  if (showLabel) {
    add(new JLabel(InspectionsBundle.message("inspection.tools.action.filter")),BorderLayout.WEST);
  }
  myFilter=new TextFieldWithStoredHistory(propertyName);
  myFilter.getEditor().getEditorComponent().addKeyListener(new KeyAdapter(){
    public void keyPressed(    final KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_ENTER) {
        e.consume();
      }
      if (e.getKeyCode() == KeyEvent.VK_ESCAPE && getFilter().length() > 0) {
        myFilter.setText("");
        e.consume();
      }
      myUpdateAlarm.cancelAllRequests();
      myUpdateAlarm.addRequest(new Runnable(){
        public void run(){
          if (e.getKeyCode() == KeyEvent.VK_ENTER) {
            myFilter.addCurrentTextToHistory();
            filter();
          }
 else {
            onlineFilter();
          }
        }
      }
,100,ModalityState.stateForComponent(myFilter));
    }
  }
);
  myFilter.setEditable(true);
  myFilter.setHistorySize(historySize);
  add(myFilter,BorderLayout.CENTER);
  DefaultActionGroup group=new DefaultActionGroup();
  group.add(new AnAction(InspectionsBundle.message("inspection.tools.action.filter"),InspectionsBundle.message("inspection.tools.action.filter"),IconLoader.getIcon("/ant/filter.png")){
    public void actionPerformed(    AnActionEvent e){
      myFilter.addCurrentTextToHistory();
      filter();
    }
  }
);
}
