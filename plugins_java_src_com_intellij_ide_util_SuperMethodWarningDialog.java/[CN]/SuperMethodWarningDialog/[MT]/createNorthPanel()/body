{
  JPanel panel=new JPanel(new BorderLayout());
  panel.setBorder(BorderFactory.createEmptyBorder(5,10,5,10));
  Icon icon=Messages.getWarningIcon();
  if (icon != null) {
    JLabel iconLabel=new JLabel(Messages.getQuestionIcon());
    panel.add(iconLabel,BorderLayout.WEST);
  }
  JPanel labelsPanel=new JPanel(new GridLayout(0,1,0,0));
  labelsPanel.setBorder(BorderFactory.createEmptyBorder(0,20,0,10));
  String classType=myIsParentInterface ? IdeBundle.message("element.of.interface") : IdeBundle.message("element.of.class");
  String methodString=IdeBundle.message("element.method");
  labelsPanel.add(new JLabel(IdeBundle.message("label.method",myName)));
  if (myClassNames.length == 1) {
    final String className=myClassNames[0];
    labelsPanel.add(new JLabel(myIsContainedInInterface || !myIsSuperAbstract ? IdeBundle.message("label.overrides.method.of_class_or_interface.name",methodString,classType,className) : IdeBundle.message("label.implements.method.of_class_or_interface.name",methodString,classType,className)));
  }
 else {
    labelsPanel.add(new JLabel(IdeBundle.message("label.implements.method.of_interfaces")));
    for (    final String className : myClassNames) {
      labelsPanel.add(new JLabel("    " + className));
    }
  }
  labelsPanel.add(new JLabel(IdeBundle.message("prompt.do.you.want.to.action_verb.the.method.from_class",myActionString,myClassNames.length > 1 ? 2 : 1)));
  panel.add(labelsPanel,BorderLayout.CENTER);
  return panel;
}
