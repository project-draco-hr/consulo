{
  final Project project=CommonDataKeys.PROJECT.getData(e.getDataContext());
  if (project == null) {
    return;
  }
  final Editor editor=PlatformDataKeys.EDITOR.getData(e.getDataContext());
  if (editor == null) {
    return;
  }
  PsiDocumentManager documentManager=PsiDocumentManager.getInstance(project);
  Document document=editor.getDocument();
  documentManager.commitDocument(document);
  final PsiFile file=documentManager.getPsiFile(document);
  if (file == null) {
    return;
  }
  final List<TextRange> ranges=new ArrayList<TextRange>();
  SelectionModel selectionModel=editor.getSelectionModel();
  if (selectionModel.hasSelection()) {
    ranges.add(TextRange.create(selectionModel.getSelectionStart(),selectionModel.getSelectionEnd()));
  }
 else   if (selectionModel.hasBlockSelection()) {
    int[] starts=selectionModel.getBlockSelectionStarts();
    int[] ends=selectionModel.getBlockSelectionEnds();
    for (int i=0; i < starts.length; i++) {
      ranges.add(TextRange.create(starts[i],ends[i]));
    }
  }
 else {
    ranges.add(TextRange.create(0,document.getTextLength()));
  }
  final ArrangementEngine engine=ServiceManager.getService(project,ArrangementEngine.class);
  try {
    CommandProcessor.getInstance().executeCommand(project,new Runnable(){
      @Override public void run(){
        engine.arrange(editor,file,ranges);
      }
    }
,getTemplatePresentation().getText(),null);
  }
  finally {
    documentManager.commitDocument(document);
  }
}
