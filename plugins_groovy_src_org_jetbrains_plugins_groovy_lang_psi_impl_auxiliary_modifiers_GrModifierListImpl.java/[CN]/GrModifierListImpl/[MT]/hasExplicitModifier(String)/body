{
  final GrModifierListStub stub=getStub();
  if (stub != null) {
    final int flag=NAME_TO_MODIFIER_FLAG_MAP.get(name);
    return (stub.getModifiersFlags() & flag) != 0;
  }
  if (name.equals(GrModifier.PUBLIC))   return findChildByType(GroovyElementTypes.kPUBLIC) != null;
  if (name.equals(GrModifier.ABSTRACT))   return findChildByType(GroovyElementTypes.kABSTRACT) != null;
  if (name.equals(GrModifier.NATIVE))   return findChildByType(GroovyElementTypes.kNATIVE) != null;
  if (name.equals(GrModifier.PRIVATE))   return findChildByType(GroovyElementTypes.kPRIVATE) != null;
  if (name.equals(GrModifier.PROTECTED))   return findChildByType(GroovyElementTypes.kPROTECTED) != null;
  if (name.equals(GrModifier.SYNCHRONIZED))   return findChildByType(GroovyElementTypes.kSYNCHRONIZED) != null;
  if (name.equals(GrModifier.STRICTFP))   return findChildByType(GroovyElementTypes.kSTRICTFP) != null;
  if (name.equals(GrModifier.STATIC))   return findChildByType(GroovyElementTypes.kSTATIC) != null;
  if (name.equals(GrModifier.FINAL))   return findChildByType(GroovyElementTypes.kFINAL) != null;
  if (name.equals(GrModifier.TRANSIENT))   return findChildByType(GroovyElementTypes.kTRANSIENT) != null;
  if (name.equals(GrModifier.NATIVE))   return findChildByType(GroovyElementTypes.kNATIVE) != null;
  return name.equals(GrModifier.VOLATILE) && findChildByType(GroovyElementTypes.kVOLATILE) != null;
}
