{
  final PsiElement owner=modifierList.getParent();
  if (owner instanceof GrVariableDeclaration && owner.getParent() instanceof GrTypeDefinitionBody) {
    PsiElement pParent=owner.getParent().getParent();
    if (!modifierList.hasExplicitVisibilityModifiers()) {
      if (!(pParent instanceof PsiClass) || !((PsiClass)pParent).isInterface()) {
        if (modifier.equals(GrModifier.PRIVATE))         return true;
        if (modifier.equals(GrModifier.PROTECTED))         return false;
        if (modifier.equals(GrModifier.PUBLIC))         return false;
      }
    }
    if (pParent instanceof PsiClass && ((PsiClass)pParent).isInterface()) {
      if (modifier.equals(GrModifier.STATIC))       return true;
      if (modifier.equals(GrModifier.FINAL))       return true;
    }
    if (pParent instanceof GrTypeDefinition) {
      PsiModifierList pModifierList=((GrTypeDefinition)pParent).getModifierList();
      if (pModifierList != null && (pModifierList.findAnnotation(GroovyCommonClassNames.GROOVY_LANG_IMMUTABLE) != null || pModifierList.findAnnotation(GroovyCommonClassNames.GROOVY_TRANSFORM_IMMUTABLE) != null)) {
        if (modifier.equals(GrModifier.FINAL))         return true;
      }
    }
  }
  if (modifierList.hasExplicitModifier(modifier)) {
    return true;
  }
  if (modifier.equals(GrModifier.PUBLIC)) {
    if (owner instanceof GrPackageDefinition)     return false;
    if (owner instanceof GrVariableDeclaration && !(owner.getParent() instanceof GrTypeDefinitionBody) || owner instanceof GrVariable) {
      return false;
    }
    return !modifierList.hasExplicitModifier(GrModifier.PRIVATE) && !modifierList.hasExplicitModifier(GrModifier.PROTECTED);
  }
  if (owner instanceof GrTypeDefinition) {
    final GrTypeDefinition clazz=(GrTypeDefinition)owner;
    if (modifier.equals(GrModifier.STATIC)) {
      final PsiClass containingClass=clazz.getContainingClass();
      return containingClass != null && containingClass.isInterface();
    }
    if (modifier.equals(GrModifier.ABSTRACT)) {
      if (clazz.isInterface())       return true;
      if (clazz.isEnum() && GroovyConfigUtils.getInstance().isVersionAtLeast(modifierList,GroovyConfigUtils.GROOVY2_0)) {
        for (        GrMethod method : clazz.getCodeMethods()) {
          if (method.hasModifierProperty(PsiModifier.ABSTRACT))           return true;
        }
      }
    }
    if (modifier.equals(GrModifier.FINAL)) {
      if (clazz.isEnum()) {
        final GrField[] fields=clazz.getFields();
        for (        GrField field : fields) {
          if (field instanceof GrEnumConstant && ((GrEnumConstant)field).getInitializingClass() != null) {
            return false;
          }
        }
        return true;
      }
    }
  }
  return false;
}
