{
  if (resolved == null && !"class".equals(getReferenceName())) {
    resolved=resolve();
  }
  if (resolved instanceof PsiClass) {
    final PsiElementFactory factory=JavaPsiFacade.getInstance(getProject()).getElementFactory();
    if (PsiUtil.isInstanceThisRef(this)) {
      final PsiClassType categoryType=GdkMethodUtil.getCategoryType((PsiClass)resolved);
      if (categoryType != null) {
        return categoryType;
      }
 else {
        return factory.createType((PsiClass)resolved);
      }
    }
    if (getParent() instanceof GrReferenceExpression || PsiUtil.isSuperReference(this)) {
      return factory.createType((PsiClass)resolved);
    }
 else {
      return TypesUtil.createJavaLangClassType(factory.createType((PsiClass)resolved),getProject(),getResolveScope());
    }
  }
  if (resolved instanceof GrVariable) {
    return ((GrVariable)resolved).getDeclaredType();
  }
  if (resolved instanceof PsiVariable) {
    return ((PsiVariable)resolved).getType();
  }
  if (resolved instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)resolved;
    if (PropertyUtil.isSimplePropertySetter(method) && !method.getName().equals(getReferenceName())) {
      return method.getParameterList().getParameters()[0].getType();
    }
    PsiClass containingClass=method.getContainingClass();
    if (containingClass != null && CommonClassNames.JAVA_LANG_OBJECT.equals(containingClass.getQualifiedName()) && "getClass".equals(method.getName())) {
      return TypesUtil.createJavaLangClassType(GrReferenceResolveUtil.getQualifierType(this),getProject(),getResolveScope());
    }
    return PsiUtil.getSmartReturnType(method);
  }
  if (resolved == null) {
    final PsiType fromClassRef=getTypeFromClassRef(this);
    if (fromClassRef != null) {
      return fromClassRef;
    }
    final PsiType fromMapAccess=getTypeFromMapAccess(this);
    if (fromMapAccess != null) {
      return fromMapAccess;
    }
    final PsiType fromSpreadOperator=getTypeFromSpreadOperator(this);
    if (fromSpreadOperator != null) {
      return fromSpreadOperator;
    }
  }
  return null;
}
