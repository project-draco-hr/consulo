{
  PsiType qualifierType=qualifier.getType();
  if (qualifierType == null) {
    if (qualifier instanceof GrReferenceExpression) {
      PsiElement resolved=((GrReferenceExpression)qualifier).resolve();
      if (resolved instanceof PsiPackage) {
        return resolved.processDeclarations(processor,ResolveState.initial().put(ResolverProcessor.RESOLVE_CONTEXT,qualifier),null,this);
      }
 else {
        qualifierType=TypesUtil.getJavaLangObject(this);
        return processClassQualifierType(processor,qualifierType,qualifier);
      }
    }
  }
 else {
    if (qualifierType instanceof PsiIntersectionType) {
      for (      PsiType conjunct : ((PsiIntersectionType)qualifierType).getConjuncts()) {
        if (!processClassQualifierType(processor,conjunct,qualifier))         return false;
      }
    }
 else {
      if (!processClassQualifierType(processor,qualifierType,qualifier))       return false;
      if (qualifier instanceof GrReferenceExpression) {
        PsiElement resolved=((GrReferenceExpression)qualifier).resolve();
        if (resolved instanceof PsiClass) {
          PsiClass javaLangClass=PsiUtil.getJavaLangClass(resolved,getResolveScope());
          if (javaLangClass != null) {
            ResolveState state=ResolveState.initial();
            PsiTypeParameter[] typeParameters=javaLangClass.getTypeParameters();
            PsiSubstitutor substitutor=state.get(PsiSubstitutor.KEY);
            if (substitutor == null)             substitutor=PsiSubstitutor.EMPTY;
            if (typeParameters.length == 1) {
              substitutor=substitutor.put(typeParameters[0],qualifierType);
              state=state.put(PsiSubstitutor.KEY,substitutor);
            }
            if (!javaLangClass.processDeclarations(processor,state,null,this))             return false;
            PsiType javaLangClassType=JavaPsiFacade.getInstance(getProject()).getElementFactory().createType(javaLangClass,substitutor);
            if (!ResolveUtil.processNonCodeMethods(javaLangClassType,processor,this,state))             return false;
          }
        }
      }
    }
  }
  return true;
}
