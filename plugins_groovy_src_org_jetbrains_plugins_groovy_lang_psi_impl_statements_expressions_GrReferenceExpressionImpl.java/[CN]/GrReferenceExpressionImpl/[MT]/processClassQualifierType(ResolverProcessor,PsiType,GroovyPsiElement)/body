{
  final ResolveState state;
  if (qualifierType instanceof PsiClassType) {
    PsiClassType.ClassResolveResult qualifierResult=((PsiClassType)qualifierType).resolveGenerics();
    PsiClass qualifierClass=qualifierResult.getElement();
    state=ResolveState.initial().put(PsiSubstitutor.KEY,qualifierResult.getSubstitutor()).put(ResolverProcessor.RESOLVE_CONTEXT,resolveContext);
    if (qualifierClass != null) {
      if (!qualifierClass.processDeclarations(processor,state,null,this)) {
        return;
      }
    }
    if (!ResolveUtil.processCategoryMembers(this,processor))     return;
  }
 else   if (qualifierType instanceof PsiArrayType) {
    final GrTypeDefinition arrayClass=GroovyPsiManager.getInstance(getProject()).getArrayClass();
    state=ResolveState.initial();
    if (!arrayClass.processDeclarations(processor,state,null,this))     return;
  }
 else   if (qualifierType instanceof PsiIntersectionType) {
    for (    PsiType conjunct : ((PsiIntersectionType)qualifierType).getConjuncts()) {
      processClassQualifierType(processor,conjunct,resolveContext);
    }
    return;
  }
 else {
    state=ResolveState.initial();
  }
  ResolveUtil.processNonCodeMethods(qualifierType,processor,this,state);
}
