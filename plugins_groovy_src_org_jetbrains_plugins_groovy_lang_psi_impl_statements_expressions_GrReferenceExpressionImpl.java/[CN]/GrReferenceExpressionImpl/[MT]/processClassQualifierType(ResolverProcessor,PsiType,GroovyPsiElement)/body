{
  if (qualifierType instanceof PsiClassType) {
    PsiClassType.ClassResolveResult qualifierResult=((PsiClassType)qualifierType).resolveGenerics();
    PsiClass qualifierClass=qualifierResult.getElement();
    if (qualifierClass != null) {
      if (!qualifierClass.processDeclarations(processor,ResolveState.initial().put(PsiSubstitutor.KEY,qualifierResult.getSubstitutor()).put(ResolverProcessor.RESOLVE_CONTEXT,resolveContext),null,this))       return;
    }
    if (!ResolveUtil.processCategoryMembers(this,processor))     return;
  }
 else   if (qualifierType instanceof PsiArrayType) {
    final GrTypeDefinition arrayClass=GroovyPsiManager.getInstance(getProject()).getArrayClass();
    if (!arrayClass.processDeclarations(processor,ResolveState.initial(),null,this))     return;
  }
 else   if (qualifierType instanceof PsiIntersectionType) {
    for (    PsiType conjunct : ((PsiIntersectionType)qualifierType).getConjuncts()) {
      processClassQualifierType(processor,conjunct,resolveContext);
    }
    return;
  }
  ResolveUtil.processNonCodeMethods(qualifierType,processor,this);
}
