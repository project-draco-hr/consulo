{
  String name=getReferenceName();
  if (name == null)   return GroovyResolveResult.EMPTY_ARRAY;
  EnumSet<ClassHint.ResolveKind> kinds=getParent() instanceof GrReferenceExpression ? ResolverProcessor.RESOLVE_KINDS_CLASS_PACKAGE : ResolverProcessor.RESOLVE_KINDS_CLASS;
  GroovyResolveResult[] classCandidates=null;
  if (findClassOrPackageAtFirst()) {
    ResolverProcessor classProcessor=new ClassResolverProcessor(name,this,kinds);
    resolveImpl(classProcessor);
    classCandidates=classProcessor.getCandidates();
    if (classCandidates.length > 0)     return classCandidates;
  }
  ResolverProcessor processor=new PropertyResolverProcessor(name,this);
  resolveImpl(processor);
  final GroovyResolveResult[] fieldCandidates=processor.getCandidates();
  if (hasAt()) {
    return fieldCandidates;
  }
  for (  GroovyResolveResult candidate : fieldCandidates) {
    final PsiElement element=candidate.getElement();
    if (element instanceof PsiField) {
      final PsiClass containingClass=((PsiField)element).getContainingClass();
      if (containingClass != null && PsiTreeUtil.isAncestor(containingClass,this,true))       return fieldCandidates;
    }
 else {
      return fieldCandidates;
    }
  }
  final boolean isPropertyName=GroovyPropertyUtils.isPropertyName(name);
  final boolean isLValue=PsiUtil.isLValue(this);
  String[] accessorNames=isLValue ? GroovyPropertyUtils.suggestSettersName(name) : GroovyPropertyUtils.suggestGettersName(name);
  List<GroovyResolveResult> accessorResults=new ArrayList<GroovyResolveResult>();
  for (  String accessorName : accessorNames) {
    AccessorResolverProcessor accessorResolver=new AccessorResolverProcessor(accessorName,this,!isLValue);
    resolveImpl(accessorResolver);
    final GroovyResolveResult[] candidates=accessorResolver.getCandidates();
    if (candidates.length == 1 && candidates[0].isStaticsOK()) {
      if (isPropertyName || candidates[0].getElement() instanceof GrAccessorMethod) {
        return candidates;
      }
    }
 else {
      ContainerUtil.addAll(accessorResults,candidates);
    }
  }
  if (fieldCandidates.length > 0)   return fieldCandidates;
  if (classCandidates == null) {
    ResolverProcessor classProcessor=new ClassResolverProcessor(name,this,kinds);
    resolveImpl(classProcessor);
    classCandidates=classProcessor.getCandidates();
  }
  if (classCandidates.length > 0)   return classCandidates;
  if (accessorResults.size() > 0)   return new GroovyResolveResult[]{accessorResults.get(0)};
  return GroovyResolveResult.EMPTY_ARRAY;
}
