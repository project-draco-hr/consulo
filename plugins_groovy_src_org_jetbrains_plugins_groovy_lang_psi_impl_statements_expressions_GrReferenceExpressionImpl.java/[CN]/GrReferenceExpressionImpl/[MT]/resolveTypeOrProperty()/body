{
  String name=getReferenceName();
  if (name == null)   return GroovyResolveResult.EMPTY_ARRAY;
  EnumSet<ClassHint.ResolveKind> kinds=getParent() instanceof GrReferenceExpression ? ResolverProcessor.RESOLVE_KINDS_CLASS_PACKAGE : ResolverProcessor.RESOLVE_KINDS_CLASS;
  boolean hasAt=hasAt();
  GroovyResolveResult[] classCandidates=GroovyResolveResult.EMPTY_ARRAY;
  if (!hasAt) {
    ResolverProcessor classProcessor=new ClassResolverProcessor(name,this,kinds);
    resolveImpl(classProcessor);
    classCandidates=classProcessor.getCandidates();
    for (    GroovyResolveResult classCandidate : classCandidates) {
      final PsiElement element=classCandidate.getElement();
      if (element instanceof PsiClass && ((PsiClass)element).isEnum()) {
        return classCandidates;
      }
    }
  }
  ResolverProcessor processor=new PropertyResolverProcessor(name,this);
  resolveImpl(processor);
  final GroovyResolveResult[] fieldCandidates=processor.getCandidates();
  if (hasAt) {
    return fieldCandidates;
  }
  for (  GroovyResolveResult candidate : fieldCandidates) {
    final PsiElement element=candidate.getElement();
    if (element instanceof PsiField) {
      final PsiClass containingClass=((PsiField)element).getContainingClass();
      if (containingClass != null && PsiTreeUtil.isAncestor(containingClass,this,true))       return fieldCandidates;
    }
 else {
      return fieldCandidates;
    }
  }
  final boolean isLValue=PsiUtil.isLValue(this);
  String[] names;
  names=isLValue ? GroovyPropertyUtils.suggestSettersName(name) : GroovyPropertyUtils.suggestGettersName(name);
  List<GroovyResolveResult> accessorResults=new ArrayList<GroovyResolveResult>();
  for (  String getterName : names) {
    AccessorResolverProcessor accessorResolver=new AccessorResolverProcessor(getterName,this,!isLValue);
    resolveImpl(accessorResolver);
    final GroovyResolveResult[] candidates=accessorResolver.getCandidates();
    if (candidates.length == 1 && candidates[0].isStaticsOK()) {
      return candidates;
    }
 else {
      ContainerUtil.addAll(accessorResults,candidates);
    }
  }
  if (fieldCandidates.length > 0)   return fieldCandidates;
  if (accessorResults.size() > 0)   return new GroovyResolveResult[]{accessorResults.get(0)};
  return classCandidates;
}
