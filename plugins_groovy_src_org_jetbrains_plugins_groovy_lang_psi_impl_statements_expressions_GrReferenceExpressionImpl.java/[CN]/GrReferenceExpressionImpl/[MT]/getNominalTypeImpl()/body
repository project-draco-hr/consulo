{
  IElementType dotType=getDotTokenType();
  final GroovyResolveResult resolveResult=advancedResolve();
  PsiElement resolved=resolveResult.getElement();
  if (dotType == GroovyTokenTypes.mMEMBER_POINTER) {
    if (resolved instanceof PsiMethod) {
      return GrClosureType.create((PsiMethod)resolved,resolveResult.getSubstitutor());
    }
    return JavaPsiFacade.getInstance(getProject()).getElementFactory().createTypeByFQClassName(GrClosableBlock.GROOVY_LANG_CLOSURE,getResolveScope());
  }
  PsiType result=null;
  JavaPsiFacade facade=JavaPsiFacade.getInstance(getProject());
  if (resolved == null && !"class".equals(getReferenceName())) {
    resolved=getReference().resolve();
  }
  if (resolved instanceof PsiClass) {
    if (getParent() instanceof GrReferenceExpression) {
      result=facade.getElementFactory().createType((PsiClass)resolved);
    }
 else {
      result=createJavaLangClassType(facade,facade.getElementFactory().createType((PsiClass)resolved));
    }
  }
 else   if (resolved instanceof GrVariable) {
    result=((GrVariable)resolved).getDeclaredType();
  }
 else   if (resolved instanceof PsiVariable) {
    result=((PsiVariable)resolved).getType();
  }
 else   if (resolved instanceof PsiMethod && !GroovyPsiManager.isTypeBeingInferred(resolved)) {
    if (dotType == GroovyTokenTypes.mMEMBER_POINTER) {
      return facade.getElementFactory().createTypeByFQClassName(GrClosableBlock.GROOVY_LANG_CLOSURE,getResolveScope());
    }
    PsiMethod method=(PsiMethod)resolved;
    if (PropertyUtil.isSimplePropertySetter(method) && !method.getName().equals(getReferenceName())) {
      result=method.getParameterList().getParameters()[0].getType();
    }
 else {
      PsiClass containingClass=method.getContainingClass();
      if (containingClass != null && CommonClassNames.JAVA_LANG_OBJECT.equals(containingClass.getQualifiedName()) && "getClass".equals(method.getName())) {
        result=getTypeForObjectGetClass(facade,method);
      }
 else {
        result=PsiUtil.getSmartReturnType(method);
      }
    }
  }
 else   if (resolved instanceof GrReferenceExpression) {
    PsiElement parent=resolved.getParent();
    if (parent instanceof GrAssignmentExpression) {
      GrAssignmentExpression assignment=(GrAssignmentExpression)parent;
      if (resolved.equals(assignment.getLValue())) {
        GrExpression rValue=assignment.getRValue();
        if (rValue != null) {
          PsiType rType=rValue.getType();
          if (rType != null)           result=rType;
        }
      }
    }
  }
 else   if (resolved == null) {
    if ("class".equals(getReferenceName())) {
      result=createJavaLangClassType(JavaPsiFacade.getInstance(getProject()),JavaPsiFacade.getElementFactory(getProject()).createTypeByFQClassName(getText(),getResolveScope()));
    }
 else {
      GrExpression qualifier=getQualifierExpression();
      if (qualifier != null) {
        PsiType qType=qualifier.getType();
        if (qType instanceof PsiClassType) {
          PsiClassType.ClassResolveResult qResult=((PsiClassType)qType).resolveGenerics();
          PsiClass clazz=qResult.getElement();
          if (clazz != null) {
            PsiClass mapClass=facade.findClass(CommonClassNames.JAVA_UTIL_MAP,getResolveScope());
            if (mapClass != null && mapClass.getTypeParameters().length == 2) {
              PsiSubstitutor substitutor=TypeConversionUtil.getClassSubstitutor(mapClass,clazz,qResult.getSubstitutor());
              if (substitutor != null) {
                result=TypeConversionUtil.erasure(substitutor.substitute(mapClass.getTypeParameters()[1]));
              }
            }
          }
        }
      }
    }
  }
  if (result != null) {
    result=resolveResult.getSubstitutor().substitute(result);
    result=TypesUtil.boxPrimitiveType(result,getManager(),getResolveScope());
  }
  if (dotType != GroovyTokenTypes.mSPREAD_DOT) {
    return result;
  }
 else {
    return ResolveUtil.getListTypeForSpreadOperator(this,result);
  }
}
