{
  IElementType dotType=getDotTokenType();
  final GroovyResolveResult resolveResult=advancedResolve();
  PsiElement resolved=resolveResult.getElement();
  if (dotType == GroovyTokenTypes.mMEMBER_POINTER) {
    if (resolved instanceof PsiMethod) {
      PsiMethod method=(PsiMethod)resolved;
      PsiType returnType=resolveResult.getSubstitutor().substitute(method.getReturnType());
      return GrClosureType.create(getResolveScope(),returnType,method.getParameterList().getParameters(),getManager());
    }
    return getManager().getElementFactory().createTypeByFQClassName(GrClosableBlock.GROOVY_LANG_CLOSURE,getResolveScope());
  }
  PsiType result=null;
  PsiManager manager=getManager();
  if (resolved == null && !"class".equals(getReferenceName())) {
    resolved=getReference().resolve();
  }
  if (resolved instanceof PsiClass) {
    if (getParent() instanceof GrReferenceExpression) {
      result=manager.getElementFactory().createType((PsiClass)resolved);
    }
 else {
      PsiClass javaLangClass=manager.findClass("java.lang.Class",getResolveScope());
      if (javaLangClass != null) {
        PsiSubstitutor substitutor=PsiSubstitutor.EMPTY;
        final PsiTypeParameter[] typeParameters=javaLangClass.getTypeParameters();
        if (typeParameters.length == 1) {
          substitutor=substitutor.put(typeParameters[0],manager.getElementFactory().createType((PsiClass)resolved));
        }
        result=manager.getElementFactory().createType(javaLangClass,substitutor);
      }
    }
  }
 else   if (resolved instanceof GrVariableBase) {
    result=((GrVariableBase)resolved).getDeclaredType();
  }
 else   if (resolved instanceof PsiVariable) {
    result=((PsiVariable)resolved).getType();
  }
 else   if (resolved instanceof PsiMethod && !GroovyPsiManager.getInstance(resolved.getProject()).isTypeBeingInferred(resolved)) {
    if (dotType == GroovyTokenTypes.mMEMBER_POINTER) {
      return manager.getElementFactory().createTypeByFQClassName("groovy.lang.Closure",getResolveScope());
    }
    PsiMethod method=(PsiMethod)resolved;
    if (PropertyUtil.isSimplePropertySetter(method) && !method.getName().equals(getReferenceName())) {
      result=method.getParameterList().getParameters()[0].getType();
    }
 else {
      PsiClass containingClass=method.getContainingClass();
      if (containingClass != null && "java.lang.Object".equals(containingClass.getQualifiedName()) && "getClass".equals(method.getName())) {
        result=getTypeForObjectGetClass(manager,method);
      }
 else {
        if (method instanceof GrAccessorMethod) {
          result=((GrAccessorMethodImpl)method).getReturnTypeGroovy();
        }
 else {
          result=method.getReturnType();
        }
      }
    }
  }
 else   if (resolved instanceof GrReferenceExpression) {
    PsiElement parent=resolved.getParent();
    if (parent instanceof GrAssignmentExpression) {
      GrAssignmentExpression assignment=(GrAssignmentExpression)parent;
      if (resolved.equals(assignment.getLValue())) {
        GrExpression rValue=assignment.getRValue();
        if (rValue != null) {
          PsiType rType=rValue.getType();
          if (rType != null)           result=rType;
        }
      }
    }
  }
 else   if (resolved == null) {
    if ("class".equals(getReferenceName())) {
      return getManager().getElementFactory().createTypeByFQClassName("java.lang.Class",getResolveScope());
    }
    GrExpression qualifier=getQualifierExpression();
    if (qualifier != null) {
      PsiType qType=qualifier.getType();
      if (qType instanceof PsiClassType) {
        PsiClassType.ClassResolveResult qResult=((PsiClassType)qType).resolveGenerics();
        PsiClass clazz=qResult.getElement();
        if (clazz != null) {
          PsiClass mapClass=manager.findClass("java.util.Map",getResolveScope());
          if (mapClass != null && mapClass.getTypeParameters().length == 2) {
            PsiSubstitutor substitutor=TypeConversionUtil.getClassSubstitutor(mapClass,clazz,qResult.getSubstitutor());
            if (substitutor != null) {
              return substitutor.substitute(mapClass.getTypeParameters()[1]);
            }
          }
        }
      }
    }
  }
  if (result != null) {
    result=resolveResult.getSubstitutor().substitute(result);
    result=TypesUtil.boxPrimitiveType(result,manager,getResolveScope());
  }
  if (dotType != GroovyTokenTypes.mSPREAD_DOT) {
    return result;
  }
 else {
    return ResolveUtil.getListTypeForSpreadOperator(this,result);
  }
}
