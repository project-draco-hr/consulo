{
  PsiElement nameElement=getReferenceNameElement();
  String name=getReferenceName();
  if (name == null || nameElement == null)   return GroovyResolveResult.EMPTY_ARRAY;
  IElementType nameType=nameElement.getNode().getElementType();
  if (nameType == GroovyTokenTypes.kTHIS) {
    ArrayList<GroovyResolveResult> results=new ArrayList<GroovyResolveResult>();
    if (GrReferenceResolveUtil.resolveThisExpression(this,results)) {
      return results.toArray(new GroovyResolveResult[results.size()]);
    }
  }
 else   if (nameType == GroovyTokenTypes.kSUPER) {
    ArrayList<GroovyResolveResult> results=new ArrayList<GroovyResolveResult>();
    if (GrReferenceResolveUtil.resolveSuperExpression(this,results)) {
      return results.toArray(new GroovyResolveResult[results.size()]);
    }
  }
  EnumSet<ClassHint.ResolveKind> kinds=getParent() instanceof GrReferenceExpression ? ResolverProcessor.RESOLVE_KINDS_CLASS_PACKAGE : ResolverProcessor.RESOLVE_KINDS_CLASS;
  GroovyResolveResult[] classCandidates=null;
  ResolverProcessor processor=new PropertyResolverProcessor(name,this);
  GrReferenceResolveUtil.resolveImpl(processor,this);
  final GroovyResolveResult[] fieldCandidates=processor.getCandidates();
  if (hasAt()) {
    return fieldCandidates;
  }
  boolean canBeClassOrPackage=ResolveUtil.canBeClassOrPackage(this);
  if (canBeClassOrPackage && findClassOrPackageAtFirst()) {
    boolean preferVar=containsLocalVar(fieldCandidates);
    if (!preferVar) {
      ResolverProcessor classProcessor=new ClassResolverProcessor(name,this,kinds);
      GrReferenceResolveUtil.resolveImpl(classProcessor,this);
      classCandidates=classProcessor.getCandidates();
      if (classCandidates.length > 0)       return classCandidates;
    }
  }
  for (  GroovyResolveResult candidate : fieldCandidates) {
    final PsiElement element=candidate.getElement();
    if (element instanceof PsiField) {
      final PsiClass containingClass=((PsiField)element).getContainingClass();
      if (containingClass != null && PsiTreeUtil.isContextAncestor(containingClass,this,true))       return fieldCandidates;
    }
 else     if (!(element instanceof GrBindingVariable)) {
      return fieldCandidates;
    }
  }
  final boolean isLValue=PsiUtil.isLValue(this);
  String[] accessorNames=isLValue ? GroovyPropertyUtils.suggestSettersName(name) : GroovyPropertyUtils.suggestGettersName(name);
  List<GroovyResolveResult> accessorResults=new ArrayList<GroovyResolveResult>();
  for (  String accessorName : accessorNames) {
    AccessorResolverProcessor accessorResolver=new AccessorResolverProcessor(accessorName,name,this,!isLValue,false,GrReferenceResolveUtil.getQualifierType(this),getTypeArguments());
    GrReferenceResolveUtil.resolveImpl(accessorResolver,this);
    final GroovyResolveResult[] candidates=accessorResolver.getCandidates();
    if (candidates.length == 1 && candidates[0].isStaticsOK() && candidates[0].isAccessible()) {
      return candidates;
    }
 else {
      ContainerUtil.addAll(accessorResults,candidates);
    }
  }
  final ArrayList<GroovyResolveResult> fieldList=ContainerUtil.newArrayList(fieldCandidates);
  filterOutBindings(fieldList);
  if (!fieldList.isEmpty()) {
    return fieldList.toArray(new GroovyResolveResult[fieldList.size()]);
  }
  if (classCandidates == null && canBeClassOrPackage) {
    ResolverProcessor classProcessor=new ClassResolverProcessor(name,this,kinds);
    GrReferenceResolveUtil.resolveImpl(classProcessor,this);
    classCandidates=classProcessor.getCandidates();
  }
  if (classCandidates != null && classCandidates.length > 0)   return classCandidates;
  if (accessorResults.size() > 0)   return new GroovyResolveResult[]{accessorResults.get(0)};
  return GroovyResolveResult.EMPTY_ARRAY;
}
