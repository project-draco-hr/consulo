{
  final PsiType[] argTypes=PsiUtil.getArgumentTypes(refExpr,false);
  PsiType thisType=getThisType(refExpr);
  MethodResolverProcessor methodResolver=new MethodResolverProcessor(name,refExpr,false,thisType,argTypes,refExpr.getTypeArguments());
  resolveImpl(refExpr,methodResolver);
  if (methodResolver.hasApplicableCandidates())   return methodResolver.getCandidates();
  final String[] names=GroovyPropertyUtils.suggestGettersName(name);
  List<GroovyResolveResult> list=new ArrayList<GroovyResolveResult>();
  for (  String getterName : names) {
    AccessorResolverProcessor getterResolver=new AccessorResolverProcessor(getterName,refExpr,true);
    resolveImpl(refExpr,getterResolver);
    final GroovyResolveResult[] candidates=getterResolver.getCandidates();
    if (candidates.length == 1 && candidates[0].isStaticsOK()) {
      refExpr.putUserData(IS_RESOLVED_TO_GETTER,true);
      return candidates;
    }
 else {
      list.addAll(Arrays.asList(candidates));
    }
  }
  PropertyResolverProcessor propertyResolver=new PropertyResolverProcessor(name,refExpr);
  resolveImpl(refExpr,propertyResolver);
  if (propertyResolver.hasCandidates())   return propertyResolver.getCandidates();
  if (methodResolver.hasCandidates()) {
    return methodResolver.getCandidates();
  }
 else   if (list.size() > 0) {
    refExpr.putUserData(IS_RESOLVED_TO_GETTER,true);
    return list.toArray(new GroovyResolveResult[list.size()]);
  }
  return GroovyResolveResult.EMPTY_ARRAY;
}
