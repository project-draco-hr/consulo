{
  Project project=refExpr.getProject();
  if (qualifierType instanceof PsiClassType) {
    PsiClassType.ClassResolveResult qualifierResult=((PsiClassType)qualifierType).resolveGenerics();
    PsiClass qualifierClass=qualifierResult.getElement();
    if (qualifierClass != null) {
      if (!qualifierClass.processDeclarations(processor,qualifierResult.getSubstitutor(),null,refExpr))       return;
    }
    if (!ResolveUtil.processCategoryMembers(refExpr,processor,(PsiClassType)qualifierType))     return;
  }
 else   if (qualifierType instanceof PsiArrayType) {
    final GrTypeDefinition arrayClass=GroovyPsiManager.getInstance(project).getArrayClass();
    if (!arrayClass.processDeclarations(processor,PsiSubstitutor.EMPTY,null,refExpr))     return;
  }
 else   if (qualifierType instanceof PsiIntersectionType) {
    for (    PsiType conjunct : ((PsiIntersectionType)qualifierType).getConjuncts()) {
      processClassQualifierType(refExpr,processor,conjunct);
    }
    return;
  }
  ResolveUtil.processDefaultMethods(qualifierType,processor,project);
}
