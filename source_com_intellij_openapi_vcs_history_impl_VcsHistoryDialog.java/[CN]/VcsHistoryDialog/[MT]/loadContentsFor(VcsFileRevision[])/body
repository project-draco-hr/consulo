{
  if (myIsInLoading)   return;
  myIsInLoading=true;
synchronized (myCachedContents) {
    final VcsFileRevision[] revisionsToLoad=revisionsNeededToBeLoaded(revisions);
    ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
      public void run(){
        ProgressIndicator progressIndicator=ProgressManager.getInstance().getProgressIndicator();
        progressIndicator.pushState();
        try {
          for (int i=0; i < revisionsToLoad.length; i++) {
            final VcsFileRevision vcsFileRevision=revisionsToLoad[i];
            progressIndicator.setText2(VcsBundle.message("progress.text2.loading.revision",vcsFileRevision.getRevisionNumber()));
            progressIndicator.setFraction((double)i / (double)revisionsToLoad.length);
            if (!myCachedContents.containsKey(vcsFileRevision)) {
              try {
                vcsFileRevision.loadContent();
              }
 catch (              final VcsException e) {
                ApplicationManager.getApplication().invokeLater(new Runnable(){
                  public void run(){
                    Messages.showErrorDialog(VcsBundle.message("message.text.cannot.load.version.bocause.of.error",vcsFileRevision.getRevisionNumber(),e.getLocalizedMessage()),VcsBundle.message("message.title.load.version"));
                  }
                }
);
              }
catch (              ProcessCanceledException ex) {
                return;
              }
              String content=null;
              try {
                content=new String(vcsFileRevision.getContent(),myFile.getCharset().name());
              }
 catch (              IOException e) {
                LOG.error(e);
              }
              myCachedContents.put(vcsFileRevision,content);
            }
          }
        }
  finally {
          myIsInLoading=false;
          progressIndicator.popState();
        }
      }
    }
,VcsBundle.message("progress.title.loading.contents"),false,myProject);
  }
}
