{
  final PsiExpression expr=PsiTreeUtil.getContextOfType(parameters.getPosition(),PsiExpression.class,true);
  if (expr != null) {
    final ExpectedTypeInfo[] expectedInfos=ExpectedTypesProvider.getInstance(parameters.getPosition().getProject()).getExpectedTypes(expr,true);
    if (expectedInfos != null) {
      final Map<PsiType,ExpectedTypeInfo> map=new HashMap<PsiType,ExpectedTypeInfo>(expectedInfos.length);
      for (      final ExpectedTypeInfo expectedInfo : expectedInfos) {
        if (!map.containsKey(expectedInfo.getType())) {
          map.put(expectedInfo.getType(),expectedInfo);
        }
      }
      return map.values().toArray(new ExpectedTypeInfo[map.size()]);
    }
  }
  return null;
}
