{
  if (ConstructorDefinition.parse(builder,className))   return CONSTRUCTOR_DEFINITION;
  PsiBuilder.Marker declMarker=builder.mark();
  GroovyElementType declType=Declaration.parse(builder,true);
  if (WRONGWAY.equals(declType)) {
    declMarker.rollbackTo();
  }
 else {
    declMarker.drop();
    return declType;
  }
  PsiBuilder.Marker typeDeclStartMarker=builder.mark();
  if (TypeDeclarationStart.parse(builder)) {
    typeDeclStartMarker.rollbackTo();
    IElementType typeDef=TypeDefinition.parse(builder);
    if (WRONGWAY.equals(typeDef)) {
      builder.error(GroovyBundle.message("type.definition.expected"));
      return WRONGWAY;
    }
    return typeDef;
  }
  typeDeclStartMarker.rollbackTo();
  if (ParserUtils.getToken(builder,kSTATIC)) {
    if (!WRONGWAY.equals(OpenOrClosableBlock.parseOpenBlock(builder))) {
      return STATIC_COMPOUND_STATEMENT;
    }
 else {
      builder.error(GroovyBundle.message("compound.statemenet.expected"));
      return WRONGWAY;
    }
  }
  if (!WRONGWAY.equals(OpenOrClosableBlock.parseOpenBlock(builder))) {
    return COMPOUND_STATEMENT;
  }
  return WRONGWAY;
}
