{
  if (ConstructorDefinition.parse(builder,className))   return CONSTRUCTOR_DEFINITION;
  PsiBuilder.Marker declMarker=builder.mark();
  GroovyElementType declType=Declaration.parse(builder,true);
  if (WRONGWAY.equals(declType)) {
    declMarker.rollbackTo();
  }
 else {
    declMarker.drop();
    return declType;
  }
  PsiBuilder.Marker typeDeclStartMarker=builder.mark();
  if (TypeDeclarationStart.parse(builder)) {
    typeDeclStartMarker.rollbackTo();
    IElementType typeDef=TypeDefinition.parse(builder);
    if (WRONGWAY.equals(typeDef)) {
      builder.error(GroovyBundle.message("type.definition.expected"));
      return WRONGWAY;
    }
    return typeDef;
  }
  typeDeclStartMarker.rollbackTo();
  PsiBuilder.Marker initMarker=builder.mark();
  if (kSTATIC == builder.getTokenType()) {
    PsiBuilder.Marker modMarker=builder.mark();
    ParserUtils.getToken(builder,kSTATIC);
    modMarker.done(MODIFIERS);
    if (!WRONGWAY.equals(OpenOrClosableBlock.parseOpenBlock(builder))) {
      initMarker.done(CLASS_INITIALIZER);
      return CLASS_INITIALIZER;
    }
 else {
      initMarker.rollbackTo();
      ParserUtils.getToken(builder,kSTATIC);
      builder.error(GroovyBundle.message("compound.statemenet.expected"));
      return WRONGWAY;
    }
  }
  builder.mark().done(MODIFIERS);
  if (!WRONGWAY.equals(OpenOrClosableBlock.parseOpenBlock(builder))) {
    initMarker.done(CLASS_INITIALIZER);
    return COMPOUND_STATEMENT;
  }
  initMarker.rollbackTo();
  return WRONGWAY;
}
