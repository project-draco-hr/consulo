{
  PsiBuilder.Marker constructorStartMarker=builder.mark();
  if (ConstructorStart.parse(builder)) {
    constructorStartMarker.rollbackTo();
    PsiBuilder.Marker cmMarker=builder.mark();
    if (WRONGWAY.equals(ModifiersOptional.parse(builder))) {
      cmMarker.drop();
      return WRONGWAY;
    }
    IElementType methodDef=MethodDefinition.parse(builder);
    if (WRONGWAY.equals(methodDef)) {
      cmMarker.drop();
      return WRONGWAY;
    }
    cmMarker.done(methodDef);
    return methodDef;
  }
  constructorStartMarker.rollbackTo();
  PsiBuilder.Marker declMarker=builder.mark();
  if (DeclarationStart.parse(builder)) {
    declMarker.rollbackTo();
    return Declaration.parse(builder);
  }
  declMarker.rollbackTo();
  PsiBuilder.Marker typeDeclStartMarker=builder.mark();
  if (TypeDeclarationStart.parse(builder)) {
    typeDeclStartMarker.rollbackTo();
    IElementType typeDef=TypeDefinition.parse(builder);
    if (WRONGWAY.equals(typeDef)) {
      return WRONGWAY;
    }
    return typeDef;
  }
  typeDeclStartMarker.rollbackTo();
  if (ParserUtils.getToken(builder,kSTATIC)) {
    if (!WRONGWAY.equals(OpenOrClosableBlock.parseOpenBlock(builder))) {
      return STATIC_COMPOUND_STATEMENT;
    }
 else {
      builder.error(GroovyBundle.message("compound.statemenet.expected"));
      return WRONGWAY;
    }
  }
  if (!WRONGWAY.equals(OpenOrClosableBlock.parseOpenBlock(builder))) {
    return COMPOUND_STATEMENT;
  }
  return WRONGWAY;
}
