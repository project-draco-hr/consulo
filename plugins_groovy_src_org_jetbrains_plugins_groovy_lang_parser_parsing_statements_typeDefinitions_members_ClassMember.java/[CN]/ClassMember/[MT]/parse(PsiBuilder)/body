{
  PsiBuilder.Marker cmMarker=builder.mark();
  PsiBuilder.Marker constructorStartMarker=builder.mark();
  if (ConstructorStart.parse(builder)) {
    constructorStartMarker.rollbackTo();
    if (tWRONG_SET.contains(Modifier.parse(builder))) {
      cmMarker.rollbackTo();
      return WRONGWAY;
    }
    if (tWRONG_SET.contains(ConstructorDefinition.parse(builder))) {
      cmMarker.rollbackTo();
      return WRONGWAY;
    }
    cmMarker.done(CONSTRUCTOR_DEFINITION);
  }
  constructorStartMarker.rollbackTo();
  PsiBuilder.Marker declMarker=builder.mark();
  if (DeclarationStart.parse(builder)) {
    declMarker.rollbackTo();
    return Declaration.parse(builder);
  }
  declMarker.rollbackTo();
  PsiBuilder.Marker typeDeclStartMarker=builder.mark();
  if (TypeDeclarationStart.parse(builder)) {
    typeDeclStartMarker.rollbackTo();
    if (tWRONG_SET.contains(ModifiersOptional.parse(builder))) {
      cmMarker.rollbackTo();
      return WRONGWAY;
    }
    IElementType typeDef=TypeDefinitionInternal.parse(builder);
    if (tWRONG_SET.contains(typeDef)) {
      cmMarker.rollbackTo();
      return WRONGWAY;
    }
    cmMarker.done(typeDef);
    return typeDef;
  }
  typeDeclStartMarker.rollbackTo();
  ParserUtils.getToken(builder,kSTATIC);
  GroovyElementType openBlock=OpenBlock.parse(builder);
  if (tWRONG_SET.contains(openBlock)) {
    cmMarker.rollbackTo();
    return WRONGWAY;
  }
  cmMarker.done(COMPOUND_STATEMENT);
  return COMPOUND_STATEMENT;
}
