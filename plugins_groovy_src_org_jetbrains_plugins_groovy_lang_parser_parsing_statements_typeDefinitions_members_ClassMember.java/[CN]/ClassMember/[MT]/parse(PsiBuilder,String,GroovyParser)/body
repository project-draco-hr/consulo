{
  if (ConstructorDefinition.parse(builder,className,parser))   return true;
  PsiBuilder.Marker declMarker=builder.mark();
  if (Declaration.parse(builder,true,parser)) {
    declMarker.drop();
    return true;
  }
 else {
    declMarker.rollbackTo();
  }
  PsiBuilder.Marker typeDeclStartMarker=builder.mark();
  if (TypeDeclarationStart.parse(builder,parser)) {
    typeDeclStartMarker.rollbackTo();
    if (!TypeDefinition.parse(builder,parser)) {
      builder.error(GroovyBundle.message("type.definition.expected"));
      return false;
    }
    return true;
  }
  typeDeclStartMarker.rollbackTo();
  PsiBuilder.Marker initMarker=builder.mark();
  if (kSTATIC == builder.getTokenType()) {
    PsiBuilder.Marker modMarker=builder.mark();
    ParserUtils.getToken(builder,kSTATIC);
    modMarker.done(MODIFIERS);
    if (OpenOrClosableBlock.parseOpenBlock(builder,parser)) {
      initMarker.done(CLASS_INITIALIZER);
      return true;
    }
 else {
      initMarker.rollbackTo();
      ParserUtils.getToken(builder,kSTATIC);
      builder.error(GroovyBundle.message("compound.statemenet.expected"));
      return false;
    }
  }
  builder.mark().done(MODIFIERS);
  if (OpenOrClosableBlock.parseOpenBlock(builder,parser)) {
    initMarker.done(CLASS_INITIALIZER);
    return true;
  }
  initMarker.rollbackTo();
  return false;
}
