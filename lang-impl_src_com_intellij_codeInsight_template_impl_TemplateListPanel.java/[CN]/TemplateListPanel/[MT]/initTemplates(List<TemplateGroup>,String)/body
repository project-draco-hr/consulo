{
  myTreeRoot.removeAllChildren();
  myTemplateGroups.clear();
  for (  TemplateGroup group : groups) {
    myTemplateGroups.add(group.copy());
  }
  DefaultMutableTreeNode nodeToSelect=null;
  for (  TemplateGroup group : myTemplateGroups) {
    DefaultMutableTreeNode groupNode=new DefaultMutableTreeNode(group);
    List<TemplateImpl> templates=new ArrayList<TemplateImpl>(group.getTemplates());
    Collections.sort(templates,new Comparator<TemplateImpl>(){
      public int compare(      final TemplateImpl o1,      final TemplateImpl o2){
        return o1.getKey().compareTo(o2.getKey());
      }
    }
);
    for (    final Object groupTemplate : templates) {
      TemplateImpl template=(TemplateImpl)groupTemplate;
      DefaultMutableTreeNode node=new DefaultMutableTreeNode(template);
      groupNode.add(node);
      if (lastSelectedKey != null && lastSelectedKey.equals(template.getKey())) {
        nodeToSelect=node;
      }
    }
    myTreeRoot.add(groupNode);
  }
  myTreeTableModel.nodeStructureChanged(myTreeRoot);
  if (nodeToSelect != null) {
    JTree tree=myTreeTable.getTree();
    TreePath path=new TreePath(nodeToSelect.getPath());
    tree.expandPath(path.getParentPath());
    int rowToSelect=tree.getRowForPath(path);
    myTreeTable.getSelectionModel().setSelectionInterval(rowToSelect,rowToSelect);
    final Rectangle rect=myTreeTable.getCellRect(rowToSelect,0,true);
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      public void run(){
        myTreeTable.scrollRectToVisible(rect);
      }
    }
);
  }
}
