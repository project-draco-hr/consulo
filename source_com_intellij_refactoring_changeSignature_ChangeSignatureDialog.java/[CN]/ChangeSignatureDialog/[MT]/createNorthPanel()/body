{
  JPanel panel=new JPanel(new VerticalFlowLayout(VerticalFlowLayout.TOP));
  JPanel top=new JPanel(new BorderLayout());
  if (myAllowDelegation) {
    myDelegationPanel=createDelegationPanel();
    top.add(myDelegationPanel,BorderLayout.WEST);
  }
  JPanel propagatePanel=new JPanel();
  myPropagateParamChangesButton=new JButton("Propagate Parameters");
  myPropagateParamChangesButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      new CallerChooser(myMethod,"Select New Parameters Propagation End Points"){
        protected void callersChosen(        Set<PsiMethod> callers){
          myMethodsToPropagateParameters=callers;
        }
      }
.show();
    }
  }
);
  propagatePanel.add(myPropagateParamChangesButton);
  myPropagateExnChangesButton=new JButton("Propagate Exceptions");
  myPropagateExnChangesButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      new CallerChooser(myMethod,"Select New Thrown Exceptions Propagation End Points"){
        protected void callersChosen(        Set<PsiMethod> callers){
          myMethodsToPropagateExceptions=callers;
        }
      }
.show();
    }
  }
);
  propagatePanel.add(myPropagateExnChangesButton);
  top.add(propagatePanel,BorderLayout.EAST);
  panel.add(top);
  if (!myMethod.isConstructor()) {
    JLabel namePrompt=new JLabel("Name:");
    panel.add(namePrompt);
    myNameField=new EditorTextField(myMethod.getName());
    namePrompt.setLabelFor(myNameField);
    namePrompt.setDisplayedMnemonic('N');
    panel.add(myNameField);
    JLabel typePrompt=new JLabel("Return type:");
    panel.add(typePrompt);
    final PsiElementFactory factory=myMethod.getManager().getElementFactory();
    myReturnTypeCodeFragment=factory.createTypeCodeFragment(myMethod.getReturnTypeElement().getText(),myMethod.getParameterList(),true,true);
    final Document document=PsiDocumentManager.getInstance(myProject).getDocument(myReturnTypeCodeFragment);
    myReturnTypeField=new EditorTextField(document,myProject,StdFileTypes.JAVA);
    typePrompt.setLabelFor(myReturnTypeField);
    typePrompt.setDisplayedMnemonic('t');
    panel.add(myReturnTypeField);
    myReturnTypeField.setText(factory.createTypeElement(myMethod.getReturnType()).getText());
    final DocumentListener documentListener=new DocumentListener(){
      public void beforeDocumentChange(      DocumentEvent event){
      }
      public void documentChanged(      DocumentEvent event){
        updateSignature();
      }
    }
;
    myNameField.addDocumentListener(documentListener);
    myReturnTypeField.addDocumentListener(documentListener);
  }
  return panel;
}
