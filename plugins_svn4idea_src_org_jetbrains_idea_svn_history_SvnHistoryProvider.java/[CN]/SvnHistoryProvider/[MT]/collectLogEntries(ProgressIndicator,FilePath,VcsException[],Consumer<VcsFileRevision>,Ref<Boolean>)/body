{
  SVNWCClient wcClient=myVcs.createWCClient();
  SVNInfo info=wcClient.doInfo(new File(file.getIOFile().getAbsolutePath()),SVNRevision.WORKING);
  wcClient.setEventHandler(new ISVNEventHandler(){
    public void handleEvent(    SVNEvent event,    double progress) throws SVNException {
    }
    public void checkCancelled() throws SVNCancelException {
      indicator.checkCanceled();
    }
  }
);
  if (info == null || info.getRepositoryRootURL() == null) {
    exception[0]=new VcsException("File ''{0}'' is not under version control" + file.getIOFile());
    return;
  }
  final String url=info.getURL() == null ? null : info.getURL().toString();
  String relativeUrl=url;
  final SVNURL repoRootURL=info.getRepositoryRootURL();
  final String root=repoRootURL.toString();
  if (url != null && url.startsWith(root)) {
    relativeUrl=url.substring(root.length());
  }
  if (indicator != null) {
    indicator.setText2(SvnBundle.message("progress.text2.changes.establishing.connection",url));
  }
  final SVNRevision pegRevision=info.getRevision();
  SVNLogClient client=myVcs.createLogClient();
  final boolean supports15=SvnUtil.checkRepositoryVersion15(myVcs,url);
  supports15Ref.set(supports15);
  client.doLog(new File[]{new File(file.getIOFile().getAbsolutePath())},SVNRevision.HEAD,SVNRevision.create(1),SVNRevision.UNDEFINED,false,true,supports15,0,null,new MyLogEntryHandler(myVcs,url,pegRevision,relativeUrl,result,repoRootURL));
}
