{
  final FilePath committedPath=ChangesUtil.getCommittedPath(myVcs.getProject(),path);
  final LogLoader logLoader;
  if (path.isNonLocal()) {
    logLoader=new RepositoryLoader(myVcs,path);
  }
 else {
    logLoader=new LocalLoader(myVcs,path);
  }
  try {
    logLoader.preliminary();
  }
 catch (  SVNCancelException e) {
    return;
  }
catch (  SVNException e) {
    throw new VcsException(e);
  }
  logLoader.initSupports15();
  final MyHistorySession historySession=new MyHistorySession(Collections.<VcsFileRevision>emptyList(),committedPath,Boolean.TRUE.equals(logLoader.mySupport15),null,false);
  final Ref<Boolean> sessionReported=new Ref<Boolean>();
  final ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
  if (indicator != null) {
    indicator.setText(SvnBundle.message("progress.text2.collecting.history",path.getName()));
  }
  final Consumer<VcsFileRevision> consumer=new Consumer<VcsFileRevision>(){
    public void consume(    VcsFileRevision vcsFileRevision){
      if (!Boolean.TRUE.equals(sessionReported.get())) {
        partner.reportCreatedEmptySession(historySession);
        sessionReported.set(true);
      }
      partner.acceptRevision(vcsFileRevision);
    }
  }
;
  logLoader.setConsumer(consumer);
  logLoader.load();
  logLoader.check();
}
