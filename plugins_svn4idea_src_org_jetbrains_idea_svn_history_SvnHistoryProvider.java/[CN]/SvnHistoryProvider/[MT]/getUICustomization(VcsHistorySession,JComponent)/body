{
  final ColumnInfo[] columns;
  final Consumer<VcsFileRevision> listener;
  final JComponent addComp;
  if (((MyHistorySession)session).isSupports15()) {
    final MergeSourceColumnInfo mergeSourceColumn=new MergeSourceColumnInfo((MyHistorySession)session);
    columns=new ColumnInfo[]{new CopyFromColumnInfo(),mergeSourceColumn};
    final JPanel panel=new JPanel(new BorderLayout());
    final JTextArea field=new JTextArea();
    field.setEditable(false);
    field.setBackground(UIUtil.getComboBoxDisabledBackground());
    field.setWrapStyleWord(true);
    listener=new Consumer<VcsFileRevision>(){
      public void consume(      VcsFileRevision vcsFileRevision){
        field.setText(mergeSourceColumn.getText(vcsFileRevision));
      }
    }
;
    final MergeSourceDetailsAction sourceAction=new MergeSourceDetailsAction();
    sourceAction.registerSelf(forShortcutRegistration);
    JPanel fieldPanel=new ToolbarDecorator(){
      @Override protected JComponent getComponent(){
        return field;
      }
      @Override protected void updateButtons(){
      }
    }
.initPositionAndBorder().addExtraAction(AnActionButton.fromAction(sourceAction)).createPanel();
    fieldPanel.setBorder(IdeBorderFactory.createBorder(SideBorder.LEFT | SideBorder.TOP));
    panel.add(fieldPanel,BorderLayout.CENTER);
    panel.add(new JLabel("Merge Sources:"),BorderLayout.NORTH);
    addComp=panel;
  }
 else {
    columns=new ColumnInfo[]{new CopyFromColumnInfo()};
    addComp=null;
    listener=null;
  }
  return new VcsDependentHistoryComponents(columns,listener,addComp);
}
