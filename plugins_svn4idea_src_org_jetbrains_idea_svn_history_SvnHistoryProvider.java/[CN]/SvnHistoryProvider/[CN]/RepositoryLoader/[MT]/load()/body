{
  if (myPI != null) {
    myPI.setText2(SvnBundle.message("progress.text2.changes.establishing.connection",myUrl));
  }
  try {
    if (myForceBackwards) {
      SVNURL svnurl=SVNURL.parseURIEncoded(myUrl);
      if (!existsNow(svnurl)) {
        loadBackwards(svnurl);
        return;
      }
    }
    SVNWCClient wcClient=myVcs.createWCClient();
    final SVNURL svnurl=SVNURL.parseURIEncoded(myUrl);
    SVNRevision operationalFrom=myFrom == null ? SVNRevision.HEAD : myFrom;
    final SVNURL rootURL=getRepositoryRoot(svnurl,myFrom);
    if (rootURL == null) {
      throw new VcsException("Could not find repository root for URL: " + myUrl);
    }
    final String root=rootURL.toString();
    String relativeUrl=myUrl;
    if (myUrl.startsWith(root)) {
      relativeUrl=myUrl.substring(root.length());
    }
    SVNLogClient client=myVcs.createLogClient();
    client.doLog(svnurl,new String[]{},myPeg == null ? myFrom : myPeg,operationalFrom,myTo == null ? SVNRevision.create(1) : myTo,false,true,mySupport15,myLimit,null,new RepositoryLogEntryHandler(myVcs,myUrl,SVNRevision.UNDEFINED,relativeUrl,createConsumerAdapter(myConsumer),rootURL));
  }
 catch (  SVNCancelException e) {
  }
catch (  SVNException e) {
    myException=new VcsException(e);
  }
catch (  VcsException e) {
    myException=e;
  }
}
