{
  for (  final FilePatch patch : list) {
    final String fileName=patch.getBeforeFileName();
    if (patch.isNewFile() || (patch.getBeforeName() == null)) {
      newOrWithoutMatches.add(patch);
      continue;
    }
    final Collection<VirtualFile> files=new ArrayList<>(findFilesFromIndex(directoryDetector,fileName));
    if (patch.getBeforeName() != null && patch.getBeforeName().startsWith("..")) {
      final VirtualFile relativeFile=VfsUtil.findRelativeFile(myBaseDir,patch.getBeforeName().replace('\\','/').split("/"));
      if (relativeFile != null) {
        files.add(relativeFile);
      }
    }
    if (files.isEmpty()) {
      newOrWithoutMatches.add(patch);
    }
 else {
      final List<AbstractFilePatchInProgress> variants=ObjectsConvertor.convert(files,new Convertor<VirtualFile,AbstractFilePatchInProgress>(){
        @Override public AbstractFilePatchInProgress convert(        VirtualFile o){
          return processMatch(patch,o);
        }
      }
,ObjectsConvertor.NOT_NULL);
      if (variants.isEmpty()) {
        newOrWithoutMatches.add(patch);
      }
 else {
        candidates.add(new PatchAndVariants(variants));
      }
    }
  }
}
