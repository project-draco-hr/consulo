{
  final AnalysisScope scope=getScope();
  LOG.assertTrue(scope != null);
  final DependenciesBuilder builder;
  if (!myForward) {
    builder=new BackwardDependenciesBuilder(myProject,scope,myScopeOfInterest);
  }
 else {
    builder=new ForwardDependenciesBuilder(myProject,scope);
  }
  ProgressManager.getInstance().runProcessWithProgressAsynchronously(myProject,AnalysisScopeBundle.message("package.dependencies.progress.title"),new Runnable(){
    public void run(){
      builder.analyze();
    }
  }
,new Runnable(){
    public void run(){
      myBuilders.add(builder);
      myDependencies.putAll(builder.getDependencies());
      myIllegalDependencies.putAll(builder.getIllegalDependencies());
      exclude(myExcluded);
      rebuild();
    }
  }
,null,new PerformAnalysisInBackgroundOption(myProject));
}
