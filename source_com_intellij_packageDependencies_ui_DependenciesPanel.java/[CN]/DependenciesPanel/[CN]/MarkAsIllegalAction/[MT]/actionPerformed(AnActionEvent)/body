{
  final PackageDependenciesNode leftNode=myLeftTree.getSelectedNode();
  final PackageDependenciesNode rightNode=myRightTree.getSelectedNode();
  if (leftNode != null && rightNode != null) {
    boolean hasDirectDependencies=myTransitiveBorder == 0;
    if (myTransitiveBorder > 0) {
      final Set<PsiFile> searchIn=getSelectedScope(myLeftTree);
      final Set<PsiFile> searchFor=getSelectedScope(myRightTree);
      for (      DependenciesBuilder builder : myBuilders) {
        if (hasDirectDependencies)         break;
        for (        PsiFile from : searchIn) {
          if (hasDirectDependencies)           break;
          for (          PsiFile to : searchFor) {
            if (hasDirectDependencies)             break;
            final List<List<PsiFile>> paths=builder.findPaths(from,to);
            for (            List<PsiFile> path : paths) {
              if (path.isEmpty()) {
                hasDirectDependencies=true;
                break;
              }
            }
          }
        }
      }
    }
    PackageSet leftPackageSet=ScopeEditorPanel.getNodePackageSet(leftNode,true);
    if (leftPackageSet == null) {
      leftPackageSet=ScopeEditorPanel.getNodePackageSet(leftNode,false);
    }
    LOG.assertTrue(leftPackageSet != null);
    PackageSet rightPackageSet=ScopeEditorPanel.getNodePackageSet(rightNode,true);
    if (rightPackageSet == null) {
      rightPackageSet=ScopeEditorPanel.getNodePackageSet(rightNode,false);
    }
    LOG.assertTrue(rightPackageSet != null);
    if (hasDirectDependencies) {
      DependencyValidationManager.getInstance(myProject).addRule(new DependencyRule(new NamedScope.UnnamedScope(leftPackageSet),new NamedScope.UnnamedScope(rightPackageSet),true));
      rebuild();
    }
 else {
      Messages.showErrorDialog(DependenciesPanel.this,"Rule was not added.\n There is no direct dependency between \'" + leftPackageSet.getText() + "\' and \'"+ rightPackageSet.getText()+ "\'",AnalysisScopeBundle.message("mark.dependency.illegal.text"));
    }
  }
}
