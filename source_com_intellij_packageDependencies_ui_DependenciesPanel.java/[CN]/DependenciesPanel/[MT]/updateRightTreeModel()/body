{
  Set<PsiFile> deps=new HashSet<PsiFile>();
  Set<PsiFile> scope=getSelectedScope(myLeftTree);
  myIllegalsInRightTree=new HashSet<PsiFile>();
  for (Iterator<PsiFile> iterator=scope.iterator(); iterator.hasNext(); ) {
    PsiFile psiFile=iterator.next();
    Map<DependencyRule,Set<PsiFile>> illegalDeps=myIllegalDependencies.get(psiFile);
    if (illegalDeps != null) {
      for (Iterator<DependencyRule> iterator1=illegalDeps.keySet().iterator(); iterator1.hasNext(); ) {
        final DependencyRule rule=iterator1.next();
        myIllegalsInRightTree.addAll(illegalDeps.get(rule));
      }
    }
    deps.addAll(myDependencies.get(psiFile));
  }
  deps.removeAll(scope);
  myRightTreeExpansionMonitor.freeze();
  myRightTree.setModel(buildTreeModel(deps,myRightTreeMarker));
  myRightTreeExpansionMonitor.restore();
  expandFirstLevel(myRightTree);
}
