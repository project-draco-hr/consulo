{
  Set<PsiFile> deps=new HashSet<PsiFile>();
  Set<PsiFile> scope=getSelectedScope(myLeftTree);
  myIllegalsInRightTree=new HashSet<PsiFile>();
  for (  PsiFile psiFile : scope) {
    Map<DependencyRule,Set<PsiFile>> illegalDeps=myIllegalDependencies.get(psiFile);
    if (illegalDeps != null) {
      for (      final DependencyRule rule : illegalDeps.keySet()) {
        myIllegalsInRightTree.addAll(illegalDeps.get(rule));
      }
    }
    deps.addAll(myDependencies.get(psiFile));
  }
  deps.removeAll(scope);
  myRightTreeExpansionMonitor.freeze();
  myRightTree.setModel(buildTreeModel(deps,myRightTreeMarker));
  myRightTreeExpansionMonitor.restore();
  expandFirstLevel(myRightTree);
}
