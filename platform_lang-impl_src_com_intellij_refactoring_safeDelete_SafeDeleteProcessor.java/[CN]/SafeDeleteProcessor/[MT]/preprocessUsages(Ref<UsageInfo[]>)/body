{
  UsageInfo[] usages=refUsages.get();
  ArrayList<String> conflicts=new ArrayList<String>();
  for (  PsiElement element : myElements) {
    for (    SafeDeleteProcessorDelegate delegate : Extensions.getExtensions(SafeDeleteProcessorDelegate.EP_NAME)) {
      if (delegate.handlesElement(element)) {
        Collection<String> foundConflicts=delegate.findConflicts(element,myElements);
        if (foundConflicts != null) {
          conflicts.addAll(foundConflicts);
        }
        break;
      }
    }
  }
  final HashMap<PsiElement,UsageHolder> elementsToUsageHolders=sortUsages(usages);
  final Collection<UsageHolder> usageHolders=elementsToUsageHolders.values();
  for (  UsageHolder usageHolder : usageHolders) {
    if (usageHolder.hasUnsafeUsagesInCode()) {
      conflicts.add(usageHolder.getDescription());
    }
  }
  if (!conflicts.isEmpty()) {
    if (ApplicationManager.getApplication().isUnitTestMode()) {
      if (!ConflictsInTestsException.isTestIgnore())       throw new ConflictsInTestsException(conflicts);
    }
 else {
      UnsafeUsagesDialog dialog=new UnsafeUsagesDialog(ArrayUtil.toStringArray(conflicts),myProject);
      if (!dialog.showAndGet()) {
        final int exitCode=dialog.getExitCode();
        prepareSuccessful();
        if (exitCode == UnsafeUsagesDialog.VIEW_USAGES_EXIT_CODE) {
          showUsages(usages);
        }
        return false;
      }
 else {
        myPreviewNonCodeUsages=false;
      }
    }
  }
  UsageInfo[] preprocessedUsages=usages;
  for (  SafeDeleteProcessorDelegate delegate : Extensions.getExtensions(SafeDeleteProcessorDelegate.EP_NAME)) {
    preprocessedUsages=delegate.preprocessUsages(myProject,preprocessedUsages);
    if (preprocessedUsages == null)     return false;
  }
  final UsageInfo[] filteredUsages=UsageViewUtil.removeDuplicatedUsages(preprocessedUsages);
  prepareSuccessful();
  if (filteredUsages == null) {
    return false;
  }
  refUsages.set(filteredUsages);
  return true;
}
