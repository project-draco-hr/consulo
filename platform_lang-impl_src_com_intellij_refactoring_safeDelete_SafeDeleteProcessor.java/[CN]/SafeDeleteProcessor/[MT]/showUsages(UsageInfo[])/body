{
  UsageViewPresentation presentation=new UsageViewPresentation();
  presentation.setTabText(RefactoringBundle.message("safe.delete.title"));
  presentation.setTargetsNodeText(RefactoringBundle.message("attempting.to.delete.targets.node.text"));
  presentation.setShowReadOnlyStatusAsRed(true);
  presentation.setShowCancelButton(true);
  presentation.setCodeUsagesString(RefactoringBundle.message("references.found.in.code"));
  presentation.setNonCodeUsagesString(RefactoringBundle.message("occurrences.found.in.comments.strings.and.non.java.files"));
  presentation.setUsagesString(RefactoringBundle.message("usageView.usagesText"));
  UsageViewManager manager=UsageViewManager.getInstance(myProject);
  UsageTarget[] targets=new UsageTarget[myElements.length];
  for (int i=0; i < targets.length; i++) {
    targets[i]=new PsiElement2UsageTargetAdapter(myElements[i]);
  }
  final UsageView usageView=manager.showUsages(targets,UsageInfoToUsageConverter.convert(new UsageInfoToUsageConverter.TargetElementsDescriptor(myElements),usages),presentation);
  usageView.addPerformOperationAction(new RerunSafeDelete(myProject,myElements,usageView),RefactoringBundle.message("retry.command"),null,RefactoringBundle.message("rerun.safe.delete"));
  usageView.addPerformOperationAction(new Runnable(){
    public void run(){
      UsageInfo[] preprocessedUsages=usages;
      for (      SafeDeleteProcessorDelegate delegate : Extensions.getExtensions(SafeDeleteProcessorDelegate.EP_NAME)) {
        preprocessedUsages=delegate.preprocessUsages(myProject,preprocessedUsages);
        if (preprocessedUsages == null)         return;
      }
      final UsageInfo[] filteredUsages=UsageViewUtil.removeDuplicatedUsages(preprocessedUsages);
      execute(filteredUsages);
    }
  }
,"Delete Anyway",RefactoringBundle.message("usageView.need.reRun"),RefactoringBundle.message("usageView.doAction"));
}
