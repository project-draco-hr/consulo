{
  String message=(modifiedWithoutEditing.size() == 1) ? VcsBundle.message("rollback.modified.without.editing.confirm.single",modifiedWithoutEditing.get(0).getPresentableUrl()) : VcsBundle.message("rollback.modified.without.editing.confirm.multiple",modifiedWithoutEditing.size());
  int rc=Messages.showYesNoDialog(project,message,VcsBundle.message("changes.action.rollback.title"),Messages.getQuestionIcon());
  if (rc != 0) {
    return;
  }
  final List<VcsException> exceptions=new ArrayList<VcsException>();
  final ProgressManager progressManager=ProgressManager.getInstance();
  final Runnable action=new Runnable(){
    public void run(){
      final ProgressIndicator indicator=progressManager.getProgressIndicator();
      ChangesUtil.processVirtualFilesByVcs(project,modifiedWithoutEditing,new ChangesUtil.PerVcsProcessor<VirtualFile>(){
        public void process(        final AbstractVcs vcs,        final List<VirtualFile> items){
          final RollbackEnvironment rollbackEnvironment=vcs.getRollbackEnvironment();
          if (rollbackEnvironment != null) {
            if (indicator != null) {
              indicator.setText(vcs.getDisplayName() + ": doing rollback...");
              indicator.setIndeterminate(false);
            }
            rollbackEnvironment.rollbackModifiedWithoutCheckout(items,exceptions,new RollbackProgressModifier(items.size(),indicator));
            if (indicator != null) {
              indicator.setText2("");
            }
          }
        }
      }
);
      if (!exceptions.isEmpty()) {
        AbstractVcsHelper.getInstance(project).showErrors(exceptions,VcsBundle.message("rollback.modified.without.checkout.error.tab"));
      }
      VirtualFileManager.getInstance().refresh(true,new Runnable(){
        public void run(){
          for (          VirtualFile virtualFile : modifiedWithoutEditing) {
            VcsDirtyScopeManager.getInstance(project).fileDirty(virtualFile);
          }
        }
      }
);
    }
  }
;
  progressManager.runProcessWithProgressSynchronously(action,VcsBundle.message("changes.action.rollback.text"),true,project);
}
