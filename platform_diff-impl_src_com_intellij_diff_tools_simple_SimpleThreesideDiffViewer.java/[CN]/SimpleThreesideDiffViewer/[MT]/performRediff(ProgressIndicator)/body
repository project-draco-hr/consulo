{
  try {
    indicator.checkCanceled();
    List<DiffContent> contents=myRequest.getContents();
    final Document[] documents=new Document[3];
    documents[0]=((DocumentContent)contents.get(0)).getDocument();
    documents[1]=((DocumentContent)contents.get(1)).getDocument();
    documents[2]=((DocumentContent)contents.get(2)).getDocument();
    CharSequence[] sequences=ApplicationManager.getApplication().runReadAction(new Computable<CharSequence[]>(){
      @Override public CharSequence[] compute(){
        CharSequence[] sequences=new CharSequence[3];
        sequences[0]=documents[0].getImmutableCharSequence();
        sequences[1]=documents[1].getImmutableCharSequence();
        sequences[2]=documents[2].getImmutableCharSequence();
        return sequences;
      }
    }
);
    ComparisonPolicy comparisonPolicy=getIgnorePolicy().getComparisonPolicy();
    FairDiffIterable fragments1=ByLine.compareTwoStepFair(sequences[1],sequences[0],comparisonPolicy,indicator);
    FairDiffIterable fragments2=ByLine.compareTwoStepFair(sequences[1],sequences[2],comparisonPolicy,indicator);
    List<MergeLineFragment> mergeFragments=ComparisonMergeUtil.buildFair(fragments1,fragments2,indicator);
    return apply(mergeFragments,comparisonPolicy);
  }
 catch (  DiffTooBigException e) {
    return applyNotification(DiffNotifications.createDiffTooBig());
  }
catch (  ProcessCanceledException e) {
    throw e;
  }
catch (  Throwable e) {
    LOG.error(e);
    return applyNotification(DiffNotifications.createError());
  }
}
