{
  try {
    indicator.checkCanceled();
    List<DiffContent> contents=myRequest.getContents();
    final Document[] documents=new Document[3];
    documents[0]=((DocumentContent)contents.get(0)).getDocument();
    documents[1]=((DocumentContent)contents.get(1)).getDocument();
    documents[2]=((DocumentContent)contents.get(2)).getDocument();
    CharSequence[] sequences=ApplicationManager.getApplication().runReadAction(new Computable<CharSequence[]>(){
      @Override public CharSequence[] compute(){
        CharSequence[] sequences=new CharSequence[3];
        sequences[0]=documents[0].getImmutableCharSequence();
        sequences[1]=documents[1].getImmutableCharSequence();
        sequences[2]=documents[2].getImmutableCharSequence();
        return sequences;
      }
    }
);
    final ComparisonPolicy comparisonPolicy=getIgnorePolicy().getComparisonPolicy();
    List<MergeLineFragment> lineFragments=ByLine.compareTwoStep(sequences[0],sequences[1],sequences[2],comparisonPolicy,indicator);
    if (getHighlightPolicy().isFineFragments()) {
      List<MergeLineFragment> fineLineFragments=new ArrayList<MergeLineFragment>(lineFragments.size());
      for (      final MergeLineFragment fragment : lineFragments) {
        CharSequence[] chunks=ApplicationManager.getApplication().runReadAction(new Computable<CharSequence[]>(){
          @Override public CharSequence[] compute(){
            indicator.checkCanceled();
            CharSequence[] chunks=new CharSequence[3];
            chunks[0]=getChunkContent(fragment,documents,ThreeSide.LEFT);
            chunks[1]=getChunkContent(fragment,documents,ThreeSide.BASE);
            chunks[2]=getChunkContent(fragment,documents,ThreeSide.RIGHT);
            ConflictType type=ThreesideDiffChangeBase.calcType(fragment,Arrays.asList(documents),comparisonPolicy);
            if (!type.isChange(Side.LEFT))             chunks[0]=null;
            if (!type.isChange(Side.RIGHT))             chunks[2]=null;
            return chunks;
          }
        }
);
        List<MergeWordFragment> wordFragments=DiffUtil.compareThreesideInner(chunks,comparisonPolicy,indicator);
        fineLineFragments.add(new MergeLineFragmentImpl(fragment,wordFragments));
      }
      lineFragments=fineLineFragments;
    }
    return apply(lineFragments,comparisonPolicy);
  }
 catch (  DiffTooBigException e) {
    return applyNotification(DiffNotifications.createDiffTooBig());
  }
catch (  ProcessCanceledException e) {
    throw e;
  }
catch (  Throwable e) {
    LOG.error(e);
    return applyNotification(DiffNotifications.createError());
  }
}
