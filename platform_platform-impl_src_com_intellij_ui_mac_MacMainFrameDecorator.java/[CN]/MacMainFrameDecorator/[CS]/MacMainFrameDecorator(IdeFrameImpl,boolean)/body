{
  super(frame);
  if (CURRENT_SETTER == null) {
    CURRENT_SETTER=navBar ? NAVBAR_SETTER : TOOLBAR_SETTER;
    CURRENT_GETTER=navBar ? NAVBAR_GETTER : TOOLBAR_GETTER;
    SHOWN=CURRENT_GETTER.fun(null);
  }
  UISettings.getInstance().addUISettingsListener(this,this);
  final ID pool=invoke("NSAutoreleasePool","new");
  int v=UNIQUE_COUNTER.incrementAndGet();
  if (Patches.APPLE_BUG_ID_10514018) {
    frame.addWindowListener(new WindowAdapter(){
      @Override public void windowDeiconified(      WindowEvent e){
        if (e.getWindow() == frame && frame.getState() == Frame.ICONIFIED) {
          frame.setState(Frame.NORMAL);
        }
      }
    }
);
  }
  try {
    if (SystemInfo.isMacOSLion) {
      if (!FULL_SCREEN_AVAILABLE)       return;
      FullScreenUtilities.setWindowCanFullScreen(frame,true);
      FullScreenUtilities.addFullScreenListenerTo(frame,new FullScreenListener(){
        @Override public void windowEnteringFullScreen(        AppEvent.FullScreenEvent event){
          myDispatcher.getMulticaster().windowEnteringFullScreen(event);
        }
        @Override public void windowEnteredFullScreen(        AppEvent.FullScreenEvent event){
          myDispatcher.getMulticaster().windowEnteredFullScreen(event);
        }
        @Override public void windowExitingFullScreen(        AppEvent.FullScreenEvent event){
          myDispatcher.getMulticaster().windowExitingFullScreen(event);
        }
        @Override public void windowExitedFullScreen(        AppEvent.FullScreenEvent event){
          myDispatcher.getMulticaster().windowExitedFullScreen(event);
        }
      }
);
      myDispatcher.addListener(new FSAdapter(){
        @Override public void windowEnteredFullScreen(        AppEvent.FullScreenEvent event){
          JRootPane rootPane=frame.getRootPane();
          if (rootPane != null)           rootPane.putClientProperty(FULL_SCREEN,Boolean.TRUE);
          enterFullscreen();
          myFrame.validate();
        }
        @Override public void windowExitedFullScreen(        AppEvent.FullScreenEvent event){
          if (myFrame == null)           return;
          exitFullscreen();
          myFrame.validate();
        }
      }
);
    }
 else {
      final ID window=MacUtil.findWindowForTitle(frame.getTitle());
      if (window == null)       return;
      String className="IdeaToolbar" + v;
      final ID ownToolbar=Foundation.allocateObjcClassPair(Foundation.getObjcClass("NSToolbar"),className);
      Foundation.registerObjcClassPair(ownToolbar);
      final ID toolbar=invoke(invoke(className,"alloc"),"initWithIdentifier:",Foundation.nsString(className));
      Foundation.cfRetain(toolbar);
      invoke(toolbar,"setVisible:",0);
      Foundation.addMethod(ownToolbar,Foundation.createSelector("setVisible:"),SET_VISIBLE_CALLBACK,"v*");
      Foundation.addMethod(ownToolbar,Foundation.createSelector("isVisible"),IS_VISIBLE,"B*");
      Foundation.executeOnMainThread(new Runnable(){
        @Override public void run(){
          invoke(window,"setToolbar:",toolbar);
          invoke(window,"setShowsToolbarButton:",1);
        }
      }
,true,true);
    }
  }
  finally {
    invoke(pool,"release");
  }
  if (ourProtocolHandler == null) {
    final ID mainBundle=invoke("NSBundle","mainBundle");
    final ID urlTypes=invoke(mainBundle,"objectForInfoDictionaryKey:",Foundation.nsString("CFBundleURLTypes"));
    final ApplicationInfoEx info=ApplicationInfoImpl.getShadowInstance();
    final BuildNumber build=info != null ? info.getBuild() : null;
    if (urlTypes.equals(ID.NIL) && build != null && !build.isSnapshot()) {
      LOG.warn("no url bundle present. \n" + "To use platform protocol handler to open external links specify required protocols in the mac app layout section of the build file\n" + "Example: args.urlSchemes = [\"your-protocol\"] will handle following links: your-protocol://open?file=file&line=line");
      return;
    }
    ourProtocolHandler=new CustomProtocolHandler();
    Application.getApplication().setOpenURIHandler(new OpenURIHandler(){
      @Override public void openURI(      AppEvent.OpenURIEvent event){
        ourProtocolHandler.openLink(event.getURI());
      }
    }
);
  }
}
