{
  super(frame);
  if (CURRENT_SETTER == null) {
    CURRENT_SETTER=navBar ? NAVBAR_SETTER : TOOLBAR_SETTER;
    CURRENT_GETTER=navBar ? NAVBAR_GETTER : TOOLBAR_GETTER;
    SHOWN=CURRENT_GETTER.fun(null);
  }
  UISettings.getInstance().addUISettingsListener(this,this);
  final ID pool=invoke("NSAutoreleasePool","new");
  if (SystemInfo.isMac) {
    ID awtWindow=Foundation.getObjcClass("AWTWindow");
    Pointer windowWillEnterFullScreenMethod=Foundation.createSelector("windowWillEnterFullScreen:");
    ID originalWindowWillEnterFullScreen=Foundation.class_replaceMethod(awtWindow,windowWillEnterFullScreenMethod,windowWillEnterFullScreenCallBack,"v@::@");
    Foundation.addMethodByID(awtWindow,Foundation.createSelector("oldWindowWillEnterFullScreen:"),originalWindowWillEnterFullScreen,"v@::@");
    Pointer windowWillExitFullScreenMethod=Foundation.createSelector("windowWillExitFullScreen:");
    ID originalWindowWillExitFullScreen=Foundation.class_replaceMethod(awtWindow,windowWillExitFullScreenMethod,windowWillExitFullScreenCallBack,"v@::@");
    Foundation.addMethodByID(awtWindow,Foundation.createSelector("oldWindowWillExitFullScreen:"),originalWindowWillExitFullScreen,"v@::@");
  }
  int v=UNIQUE_COUNTER.incrementAndGet();
  if (Patches.APPLE_BUG_ID_10514018) {
    frame.addWindowListener(new WindowAdapter(){
      @Override public void windowDeiconified(      WindowEvent e){
        if (e.getWindow() == frame && frame.getState() == Frame.ICONIFIED) {
          frame.setState(Frame.NORMAL);
        }
      }
    }
);
  }
  try {
    if (SystemInfo.isMacOSLion) {
      if (!FULL_SCREEN_AVAILABLE)       return;
      FullScreenUtilities.setWindowCanFullScreen(frame,true);
      FullScreenUtilities.addFullScreenListenerTo(frame,new FullScreenAdapter(){
        @Override public void windowEnteredFullScreen(        AppEvent.FullScreenEvent event){
          LOG.assertTrue(SystemInfo.isMac,"For mac we set myInFullScreen in the windowWillEnterFullScreenCallBack methods");
        }
        @Override public void windowExitedFullScreen(        AppEvent.FullScreenEvent event){
          LOG.assertTrue(SystemInfo.isMac,"For mac we set myInFullScreen in the windowWillExitFullScreenCallBack methods");
        }
      }
);
    }
 else {
      String className="IdeaToolbar" + v;
      final ID ownToolbar=Foundation.allocateObjcClassPair(Foundation.getObjcClass("NSToolbar"),className);
      Foundation.registerObjcClassPair(ownToolbar);
      final ID toolbar=invoke(invoke(className,"alloc"),"initWithIdentifier:",Foundation.nsString(className));
      Foundation.cfRetain(toolbar);
      invoke(toolbar,"setVisible:",0);
      Foundation.addMethod(ownToolbar,Foundation.createSelector("setVisible:"),SET_VISIBLE_CALLBACK,"v*");
      Foundation.addMethod(ownToolbar,Foundation.createSelector("isVisible"),IS_VISIBLE,"B*");
      final ID window=MacUtil.findWindowForTitle(frame.getTitle());
      if (window == null)       return;
      Foundation.executeOnMainThread(new Runnable(){
        @Override public void run(){
          invoke(window,"setToolbar:",toolbar);
          invoke(window,"setShowsToolbarButton:",1);
        }
      }
,true,true);
    }
  }
  finally {
    invoke(pool,"release");
  }
  if (ourProtocolHandler == null) {
    final ID mainBundle=invoke("NSBundle","mainBundle");
    final ID urlTypes=invoke(mainBundle,"objectForInfoDictionaryKey:",Foundation.nsString("CFBundleURLTypes"));
    if (urlTypes.equals(ID.NIL)) {
      LOG.warn("no url bundle present");
      return;
    }
    ourProtocolHandler=new CustomProtocolHandler();
    Application.getApplication().setOpenURIHandler(new OpenURIHandler(){
      @Override public void openURI(      AppEvent.OpenURIEvent event){
        ourProtocolHandler.openLink(event.getURI());
      }
    }
);
  }
}
