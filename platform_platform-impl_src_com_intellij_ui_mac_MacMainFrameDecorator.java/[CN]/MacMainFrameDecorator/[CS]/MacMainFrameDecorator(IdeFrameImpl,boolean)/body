{
  myFrame=frame;
  final ID window=MacUtil.findWindowForTitle(frame.getTitle());
  if (window == null)   return;
  if (CURRENT_SETTER == null) {
    CURRENT_SETTER=navBar ? NAVBAR_SETTER : TOOLBAR_SETTER;
    CURRENT_GETTER=navBar ? NAVBAR_GETTER : TOOLBAR_GETTER;
    SHOWN=CURRENT_GETTER.fun(null);
  }
  UISettings.getInstance().addUISettingsListener(this,this);
  final ID pool=invoke("NSAutoreleasePool","new");
  int v=UNIQUE_COUNTER.incrementAndGet();
  try {
    if (SystemInfo.isMacOSLion) {
      frame.addWindowListener(new WindowAdapter(){
        @Override public void windowDeiconified(        WindowEvent e){
          Window window1=e.getWindow();
          if (window1 instanceof JFrame) {
            ID w=MacUtil.findWindowForTitle(((JFrame)window1).getTitle());
            if (w != null && w.intValue() > 0) {
              try {
                Thread.sleep(300);
              }
 catch (              InterruptedException e1) {
              }
              invoke(w,"setCollectionBehavior:",1 << 7);
            }
          }
        }
      }
);
      final ID delegateClass=Foundation.allocateObjcClassPair(Foundation.getClass("NSObject"),"IdeaNSWindowDelegate" + v);
      Foundation.registerObjcClassPair(delegateClass);
      myWindowWillMiniaturize=new Callback(){
        public void callback(        ID caller,        ID notification){
          ID w=MacUtil.findWindowForTitle(frame.getTitle());
          if (w != null && w.intValue() > 0) {
            invoke(w,"setCollectionBehavior:",0);
          }
        }
      }
;
      Foundation.addMethod(delegateClass,Foundation.createSelector("windowWillMiniaturize:"),myWindowWillMiniaturize,"v*");
      myDidExit=new Callback(){
        public void callback(        ID caller,        ID notification){
          SwingUtilities.invokeLater(new Runnable(){
            @Override public void run(){
              myInFullScreen=false;
              frame.storeFullScreenStateIfNeeded(false);
              JRootPane rootPane=frame.getRootPane();
              if (rootPane != null)               rootPane.putClientProperty(FULL_SCREEN,null);
            }
          }
);
        }
      }
;
      Foundation.addMethod(delegateClass,Foundation.createSelector("windowDidExitFullScreen:"),myDidExit,"v*");
      myDidEnter=new Callback(){
        public void callback(        ID caller,        ID notification){
          SwingUtilities.invokeLater(new Runnable(){
            @Override public void run(){
              myInFullScreen=true;
              Timer timer=new Timer(300,new ActionListener(){
                @Override public void actionPerformed(                ActionEvent e){
                  SwingUtilities.invokeLater(new Runnable(){
                    @Override public void run(){
                      frame.setSize(frame.getWidth(),frame.getHeight() + frame.getInsets().top);
                    }
                  }
);
                }
              }
);
              JRootPane rootPane=frame.getRootPane();
              if (rootPane != null)               rootPane.putClientProperty(FULL_SCREEN,Boolean.TRUE);
              timer.setRepeats(false);
              timer.start();
            }
          }
);
        }
      }
;
      Foundation.addMethod(delegateClass,Foundation.createSelector("windowDidEnterFullScreen:"),myDidEnter,"v*");
      invoke(window,"setCollectionBehavior:",1 << 7);
      ID notificationCenter=invoke("NSNotificationCenter","defaultCenter");
      ID delegate=invoke(invoke("IdeaNSWindowDelegate" + v,"alloc"),"init");
      invoke(notificationCenter,"addObserver:selector:name:object:",delegate,Foundation.createSelector("windowDidEnterFullScreen:"),Foundation.nsString("NSWindowDidEnterFullScreenNotification"),window);
      invoke(notificationCenter,"addObserver:selector:name:object:",delegate,Foundation.createSelector("windowDidExitFullScreen:"),Foundation.nsString("NSWindowDidExitFullScreenNotification"),window);
      invoke(notificationCenter,"addObserver:selector:name:object:",delegate,Foundation.createSelector("windowWillMiniaturize:"),Foundation.nsString("NSWindowWillMiniaturizeNotification"),window);
    }
 else {
      String className="IdeaToolbar" + v;
      final ID ownToolbar=Foundation.allocateObjcClassPair(Foundation.getClass("NSToolbar"),className);
      Foundation.registerObjcClassPair(ownToolbar);
      ID toolbar=invoke(invoke(className,"alloc"),"initWithIdentifier:",Foundation.nsString(className));
      Foundation.cfRetain(toolbar);
      invoke(toolbar,"setVisible:",0);
      Foundation.addMethod(ownToolbar,Foundation.createSelector("setVisible:"),SET_VISIBLE_CALLBACK,"v*");
      Foundation.addMethod(ownToolbar,Foundation.createSelector("isVisible"),IS_VISIBLE,"B*");
      invoke(window,"setToolbar:",toolbar);
      invoke(window,"setShowsToolbarButton:",1);
    }
  }
  finally {
    invoke(pool,"release");
  }
}
