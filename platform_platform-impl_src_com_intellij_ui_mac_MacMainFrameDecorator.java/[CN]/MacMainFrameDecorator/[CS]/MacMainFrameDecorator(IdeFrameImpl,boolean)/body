{
  myFrame=frame;
  final ID window=MacUtil.findWindowForTitle(frame.getTitle());
  if (window == null)   return;
  if (CURRENT_SETTER == null) {
    CURRENT_SETTER=navBar ? NAVBAR_SETTER : TOOLBAR_SETTER;
    CURRENT_GETTER=navBar ? NAVBAR_GETTER : TOOLBAR_GETTER;
    SHOWN=CURRENT_GETTER.fun(null);
  }
  UISettings.getInstance().addUISettingsListener(this,this);
  final ID pool=invoke("NSAutoreleasePool","new");
  int v=UNIQUE_COUNTER.incrementAndGet();
  if (Patches.APPLE_BUG_ID_10514018) {
    frame.addWindowListener(new WindowAdapter(){
      @Override public void windowDeiconified(      WindowEvent e){
        if (e.getWindow() == frame && frame.getState() == Frame.ICONIFIED) {
          frame.setState(Frame.NORMAL);
        }
      }
    }
);
  }
  try {
    if (SystemInfo.isMacOSLion) {
      if (!FULL_SCREEN_AVAILABLE)       return;
      try {
        Class<?> clazz=Class.forName("com.apple.eawt.FullScreenUtilities");
        clazz.getMethod("addFullScreenListenerTo").invoke(null,frame,new MacFullScreenListener(this,frame));
      }
 catch (      Exception ignored) {
      }
    }
 else {
      String className="IdeaToolbar" + v;
      final ID ownToolbar=Foundation.allocateObjcClassPair(Foundation.getObjcClass("NSToolbar"),className);
      Foundation.registerObjcClassPair(ownToolbar);
      ID toolbar=invoke(invoke(className,"alloc"),"initWithIdentifier:",Foundation.nsString(className));
      Foundation.cfRetain(toolbar);
      invoke(toolbar,"setVisible:",0);
      Foundation.addMethod(ownToolbar,Foundation.createSelector("setVisible:"),SET_VISIBLE_CALLBACK,"v*");
      Foundation.addMethod(ownToolbar,Foundation.createSelector("isVisible"),IS_VISIBLE,"B*");
      invoke(window,"setToolbar:",toolbar);
      invoke(window,"setShowsToolbarButton:",1);
    }
  }
  finally {
    invoke(pool,"release");
  }
}
