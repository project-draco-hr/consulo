{
  final PsiElement psiElement=descriptor.getPsiElement();
  PsiParameter parameter=PsiTreeUtil.getParentOfType(psiElement,PsiParameter.class,false);
  if (parameter == null)   return;
  PsiMethod method=PsiTreeUtil.getParentOfType(parameter,PsiMethod.class);
  if (method == null)   return;
  PsiParameter[] parameters=method.getParameterList().getParameters();
  int index=ArrayUtil.find(parameters,parameter);
  List<PsiParameter> toAnnotate=new ArrayList<PsiParameter>();
  PsiMethod[] methods=OverridingMethodsSearch.search(method,GlobalSearchScope.allScope(project),true).toArray(PsiMethod.EMPTY_ARRAY);
  for (  PsiMethod psiMethod : methods) {
    PsiParameter[] psiParameters=psiMethod.getParameterList().getParameters();
    if (index >= psiParameters.length)     continue;
    PsiParameter psiParameter=psiParameters[index];
    if (!AnnotationUtil.isAnnotated(psiParameter,myAnnotation,false) && psiMethod.getManager().isInProject(psiMethod)) {
      toAnnotate.add(psiParameter);
    }
  }
  CodeInsightUtil.preparePsiElementsForWrite(toAnnotate);
  for (  PsiParameter psiParam : toAnnotate) {
    try {
      new AddAnnotationFix(myAnnotation,psiParam,myAnnosToRemove).invoke(project,null,psiParam.getContainingFile());
    }
 catch (    IncorrectOperationException e) {
      LOG.error(e);
    }
  }
}
