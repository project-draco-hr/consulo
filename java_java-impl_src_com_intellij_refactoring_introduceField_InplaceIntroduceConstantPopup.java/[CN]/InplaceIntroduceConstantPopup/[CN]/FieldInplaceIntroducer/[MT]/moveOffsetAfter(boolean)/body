{
  if (success) {
    final PsiField psiField=(PsiField)getVariable();
    if (psiField == null) {
      super.moveOffsetAfter(false);
      return;
    }
    myFieldTypePointer=SmartTypePointerManager.getInstance(myProject).createSmartTypePointer(psiField.getType());
    PsiDocumentManager.getInstance(myProject).commitAllDocuments();
    myConstantName=psiField.getName();
    ApplicationManager.getApplication().runWriteAction(new Runnable(){
      public void run(){
        final PsiFile containingFile=myParentClass.getContainingFile();
        final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(myProject);
        final RangeMarker exprMarker=getExprMarker();
        if (exprMarker != null) {
          myExpr=restoreExpression(containingFile,psiField,elementFactory,exprMarker,myExprText);
          if (myExpr != null && myExpr.isPhysical()) {
            myExprMarker=myEditor.getDocument().createRangeMarker(myExpr.getTextRange());
          }
        }
        final List<RangeMarker> occurrenceMarkers=getOccurrenceMarkers();
        for (int i=0, occurrenceMarkersSize=occurrenceMarkers.size(); i < occurrenceMarkersSize; i++) {
          RangeMarker marker=occurrenceMarkers.get(i);
          if (getExprMarker() != null && marker.getStartOffset() == getExprMarker().getStartOffset()) {
            myOccurrences[i]=myExpr;
            continue;
          }
          final PsiExpression psiExpression=restoreExpression(containingFile,psiField,elementFactory,marker,myLocalVariable != null ? myLocalName : myExprText);
          if (psiExpression != null) {
            myOccurrences[i]=psiExpression;
          }
        }
        if (myAnchorIdxIfAll != -1 && myOccurrences[myAnchorIdxIfAll] != null) {
          myAnchorElementIfAll=myOccurrences[myAnchorIdxIfAll].getParent();
        }
        if (myAnchorIdx != -1 && myOccurrences[myAnchorIdx] != null) {
          myAnchorElement=myOccurrences[myAnchorIdx].getParent();
        }
        myOccurrenceMarkers=null;
        if (psiField.isValid()) {
          psiField.delete();
        }
      }
    }
);
    if (myLocalVariable == null && myExpr == null) {
      super.moveOffsetAfter(false);
      return;
    }
    final BaseExpressionToFieldHandler.Settings settings=new BaseExpressionToFieldHandler.Settings(myConstantName,isReplaceAllOccurrences(),true,true,BaseExpressionToFieldHandler.InitializationPlace.IN_FIELD_DECLARATION,getSelectedVisibility(),myLocalVariable,myFieldTypePointer.getType(),isDeleteVariable(),myParentClass,isAnnotateNonNls(),false);
    final Runnable runnable=new Runnable(){
      public void run(){
        if (myLocalVariable != null) {
          final LocalToFieldHandler.IntroduceFieldRunnable fieldRunnable=new LocalToFieldHandler.IntroduceFieldRunnable(false,myLocalVariable,myParentClass,settings,true,myOccurrences);
          fieldRunnable.run();
        }
 else {
          final BaseExpressionToFieldHandler.ConvertToFieldRunnable convertToFieldRunnable=new BaseExpressionToFieldHandler.ConvertToFieldRunnable(myExpr,settings,settings.getForcedType(),myOccurrences,myOccurenceManager,myAnchorElementIfAll,myAnchorElement,myEditor,myParentClass);
          convertToFieldRunnable.run();
        }
      }
    }
;
    ApplicationManager.getApplication().runWriteAction(runnable);
  }
  super.moveOffsetAfter(false);
  if (myMoveToAnotherClassCb.isSelected()) {
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      @Override public void run(){
        MoveMembersImpl.doMove(myProject,new PsiElement[]{myParentClass.findFieldByName(myConstantName,false)},null,null);
      }
    }
);
  }
}
