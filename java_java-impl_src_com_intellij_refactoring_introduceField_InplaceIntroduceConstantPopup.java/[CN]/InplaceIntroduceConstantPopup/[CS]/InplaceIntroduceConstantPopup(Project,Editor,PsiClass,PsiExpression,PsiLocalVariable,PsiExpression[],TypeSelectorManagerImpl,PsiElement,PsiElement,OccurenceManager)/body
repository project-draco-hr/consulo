{
  myProject=project;
  myEditor=editor;
  myParentClass=parentClass;
  myExpr=expr;
  myLocalVariable=localVariable;
  myOccurrences=occurrences;
  myTypeSelectorManager=typeSelectorManager;
  myAnchorElement=anchorElement;
  myAnchorElementIfAll=anchorElementIfAll;
  for (int i=0, occurrencesLength=occurrences.length; i < occurrencesLength; i++) {
    PsiExpression occurrence=occurrences[i];
    PsiElement parent=occurrence.getParent();
    if (parent == myAnchorElement) {
      myAnchorIdx=i;
    }
    if (parent == myAnchorElementIfAll) {
      myAnchorIdxIfAll=i;
    }
  }
  myOccurenceManager=occurenceManager;
  myExprMarker=expr != null && expr.isPhysical() ? myEditor.getDocument().createRangeMarker(expr.getTextRange()) : null;
  myExprText=expr != null ? expr.getText() : null;
  myLocalName=localVariable != null ? localVariable.getName() : null;
  myWholePanel=new JPanel(new GridBagLayout());
  GridBagConstraints gc=new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1,0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,0,0),0,0);
  final TitlePanel titlePanel=new TitlePanel();
  titlePanel.setBorder(null);
  titlePanel.setText(IntroduceConstantHandler.REFACTORING_NAME);
  myWholePanel.add(titlePanel,gc);
  gc.insets=new Insets(5,5,5,5);
  myVisibilityPanel=new JavaVisibilityPanel(false,false);
  myVisibilityPanel.setVisibility(JavaRefactoringSettings.getInstance().INTRODUCE_CONSTANT_VISIBILITY);
  myWholePanel.add(myVisibilityPanel,gc);
  myReplaceAllCb=new JCheckBox("Replace all occurrences");
  myReplaceAllCb.setMnemonic('a');
  myReplaceAllCb.setFocusable(false);
  myWholePanel.add(myReplaceAllCb,gc);
  myReplaceAllCb.setVisible(myOccurrences.length > 1);
  myCbDeleteVariable=new StateRestoringCheckBox("Delete variable declaration");
  myCbDeleteVariable.setMnemonic('d');
  myCbDeleteVariable.setFocusable(false);
  myWholePanel.add(myCbDeleteVariable,gc);
  if (myLocalVariable != null) {
    if (myReplaceAllCb != null) {
      myReplaceAllCb.setEnabled(false);
      myReplaceAllCb.setSelected(true);
      myCbDeleteVariable.setSelected(true);
      myCbDeleteVariable.setEnabled(false);
    }
  }
 else {
    myCbDeleteVariable.setVisible(false);
  }
  myAnnotateNonNls=new JCheckBox("Annotate field as @NonNls");
  myAnnotateNonNls.setMnemonic('f');
  myAnnotateNonNls.setFocusable(false);
  myWholePanel.add(myAnnotateNonNls,gc);
  final PsiManager psiManager=PsiManager.getInstance(myProject);
  if ((myTypeSelectorManager.isSuggestedType("java.lang.String") || (myLocalVariable != null && AnnotationUtil.isAnnotated(myLocalVariable,AnnotationUtil.NON_NLS,false))) && LanguageLevelProjectExtension.getInstance(psiManager.getProject()).getLanguageLevel().hasEnumKeywordAndAutoboxing() && JavaPsiFacade.getInstance(psiManager.getProject()).findClass(AnnotationUtil.NON_NLS,myParentClass.getResolveScope()) != null) {
    final PropertiesComponent component=PropertiesComponent.getInstance(myProject);
    myAnnotateNonNls.setSelected(component.isTrueValue(IntroduceConstantDialog.NONNLS_SELECTED_PROPERTY));
    myAnnotateNonNls.addItemListener(new ItemListener(){
      public void itemStateChanged(      ItemEvent e){
        component.setValue(IntroduceConstantDialog.NONNLS_SELECTED_PROPERTY,Boolean.toString(myAnnotateNonNls.isSelected()));
      }
    }
);
  }
 else {
    myAnnotateNonNls.setVisible(false);
  }
  myMoveToAnotherClassCb=new JCheckBox("Move to another class");
  myMoveToAnotherClassCb.setMnemonic('m');
  myMoveToAnotherClassCb.setFocusable(false);
  myWholePanel.add(myMoveToAnotherClassCb,gc);
}
