{
  final Ref<Boolean> result=new Ref<Boolean>();
  CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
    public void run(){
      myTypeSelectorManager.setAllOccurences(replaceAllOccurrences);
      PsiType defaultType=myTypeSelectorManager.getTypeSelector().getSelectedType();
      if (fieldDefaultType != null) {
        if (replaceAllOccurrences) {
          if (ArrayUtil.find(myTypeSelectorManager.getTypesForAll(),fieldDefaultType) != -1) {
            defaultType=fieldDefaultType;
          }
        }
 else         if (ArrayUtil.find(myTypeSelectorManager.getTypesForOne(),fieldDefaultType) != -1) {
          defaultType=fieldDefaultType;
        }
      }
      final String propName=myLocalVariable != null ? JavaCodeStyleManager.getInstance(myProject).variableNameToPropertyName(myLocalVariable.getName(),VariableKind.LOCAL_VARIABLE) : null;
      final String[] names=IntroduceConstantDialog.createNameSuggestionGenerator(propName,myExpr,JavaCodeStyleManager.getInstance(myProject)).getSuggestedNameInfo(defaultType).names;
      final PsiField field=createFieldToStartTemplateOn(names,defaultType);
      boolean started=false;
      if (field != null) {
        myEditor.getCaretModel().moveToOffset(field.getTextOffset());
        myEditor.getScrollingModel().scrollToCaret(ScrollType.MAKE_VISIBLE);
        final LinkedHashSet<String> nameSuggestions=new LinkedHashSet<String>();
        nameSuggestions.add(field.getName());
        nameSuggestions.addAll(Arrays.asList(names));
        final VariableInplaceRenamer renamer=new FieldInplaceIntroducer(field);
        started=renamer.performInplaceRename(false,nameSuggestions);
      }
      result.set(started);
      if (!started && field != null) {
        ApplicationManager.getApplication().runWriteAction(new Runnable(){
          @Override public void run(){
            field.delete();
          }
        }
);
      }
    }
  }
,IntroduceConstantHandler.REFACTORING_NAME,IntroduceConstantHandler.REFACTORING_NAME);
  return result.get();
}
