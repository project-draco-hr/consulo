{
  final JPanel left=new JPanel(new GridBagLayout());
  final GridBagConstraints lgc=new GridBagConstraints(0,0,1,1,0,0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(5,5,0,0),0,0);
  final JLabel label=new JLabel("Visibility:");
  label.setDisplayedMnemonic('V');
  left.add(label,lgc);
  myVisibilityCombo=new JComboBox(new String[]{PsiModifier.PUBLIC,PsiModifier.PACKAGE_LOCAL,PsiModifier.PROTECTED,PsiModifier.PRIVATE});
  myVisibilityCombo.setRenderer(new ListCellRendererWrapper<String>(myVisibilityCombo.getRenderer()){
    @Override public void customize(    JList list,    String value,    int index,    boolean selected,    boolean hasFocus){
      setText(PsiBundle.visibilityPresentation(value));
    }
  }
);
  label.setLabelFor(myVisibilityCombo);
  myVisibilityCombo.setSelectedItem(JavaRefactoringSettings.getInstance().INTRODUCE_CONSTANT_VISIBILITY);
  myVisibilityCombo.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {
        ToolWindowManager.getInstance(myProject).activateEditorComponent();
      }
    }
  }
);
  final AnAction arrow=new AnAction(){
    @Override public void actionPerformed(    AnActionEvent e){
      if (e.getInputEvent() instanceof KeyEvent) {
        final int code=((KeyEvent)e.getInputEvent()).getKeyCode();
        final int delta=code == KeyEvent.VK_DOWN ? 1 : code == KeyEvent.VK_UP ? -1 : 0;
        if (delta == 0)         return;
        final int size=myVisibilityCombo.getModel().getSize();
        int next=myVisibilityCombo.getSelectedIndex() + delta;
        if (next < 0 || next >= size) {
          if (!UISettings.getInstance().CYCLE_SCROLLING) {
            return;
          }
          next=(next + size) % size;
        }
        myVisibilityCombo.setSelectedIndex(next);
      }
    }
  }
;
  arrow.registerCustomShortcutSet(new CustomShortcutSet(new KeyboardShortcut(KeyStroke.getKeyStroke(KeyEvent.VK_UP,0),null),new KeyboardShortcut(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,0),null)),myVisibilityCombo);
  lgc.gridx=1;
  lgc.insets.top=2;
  lgc.insets.left=0;
  left.add(myVisibilityCombo,lgc);
  myMoveToAnotherClassCb=new JCheckBox("Move to another class");
  myMoveToAnotherClassCb.setMnemonic('m');
  myMoveToAnotherClassCb.setFocusable(false);
  lgc.gridx=0;
  lgc.gridy=1;
  lgc.gridwidth=2;
  lgc.insets.top=0;
  left.add(myMoveToAnotherClassCb,lgc);
  return left;
}
