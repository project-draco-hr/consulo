{
  final VisibilityListener visibilityListener=new VisibilityListener(myEditor){
    @Override protected String getVisibility(){
      return getSelectedVisibility();
    }
  }
;
  myVisibilityCombo.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      new WriteCommandAction(myProject,IntroduceConstantHandler.REFACTORING_NAME,IntroduceConstantHandler.REFACTORING_NAME){
        @Override protected void run(        Result result) throws Throwable {
          PsiDocumentManager.getInstance(myProject).commitDocument(myEditor.getDocument());
          visibilityListener.perform(getVariable());
          myBalloon.setTitle(getVariable().getText());
        }
      }
.execute();
    }
  }
);
  myReplaceAllCb.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      restartInplaceIntroduceTemplate();
    }
  }
);
  myAnnotateNonNls.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
    }
  }
);
  return myWholePanel;
}
