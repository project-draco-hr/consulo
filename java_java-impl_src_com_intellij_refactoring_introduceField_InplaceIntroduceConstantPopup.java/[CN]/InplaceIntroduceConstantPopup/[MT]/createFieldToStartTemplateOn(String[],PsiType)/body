{
  final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(myProject);
  return ApplicationManager.getApplication().runWriteAction(new Computable<PsiField>(){
    @Override public PsiField compute(){
      final Ref<PsiField> ref=new Ref<PsiField>();
      final Runnable runnable=new Runnable(){
        public void run(){
          PsiField field=elementFactory.createFieldFromText(psiType.getCanonicalText() + " " + (myConstantName != null ? myConstantName : names[0])+ " = "+ myInitializerText+ ";",myParentClass);
          PsiUtil.setModifierProperty(field,PsiModifier.FINAL,true);
          PsiUtil.setModifierProperty(field,PsiModifier.STATIC,true);
          final String visibility=getSelectedVisibility();
          if (visibility != null) {
            PsiUtil.setModifierProperty(field,visibility,true);
          }
          field=BaseExpressionToFieldHandler.ConvertToFieldRunnable.appendField(myExpr,BaseExpressionToFieldHandler.InitializationPlace.IN_FIELD_DECLARATION,myParentClass,myParentClass,myAnchorElementIfAll,field);
          ref.set(field);
        }
      }
;
      PostprocessReformattingAspect.getInstance(myProject).postponeFormattingInside(runnable);
      return ref.get();
    }
  }
);
}
