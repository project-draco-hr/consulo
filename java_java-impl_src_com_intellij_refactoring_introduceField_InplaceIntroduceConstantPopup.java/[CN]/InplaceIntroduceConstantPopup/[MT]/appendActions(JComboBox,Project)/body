{
  final boolean[] moveFocusBack=new boolean[]{true};
  visibilityCombo.addFocusListener(new FocusAdapter(){
    @Override public void focusGained(    FocusEvent e){
      if (!moveFocusBack[0]) {
        moveFocusBack[0]=true;
        return;
      }
      final int size=visibilityCombo.getModel().getSize();
      int next=visibilityCombo.getSelectedIndex() + 1;
      if (next < 0 || next >= size) {
        if (!UISettings.getInstance().CYCLE_SCROLLING) {
          return;
        }
        next=(next + size) % size;
      }
      visibilityCombo.setSelectedIndex(next);
      ToolWindowManager.getInstance(project).activateEditorComponent();
    }
  }
);
  visibilityCombo.addMouseListener(new MouseAdapter(){
    @Override public void mouseEntered(    MouseEvent e){
      moveFocusBack[0]=false;
    }
  }
);
  visibilityCombo.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      moveFocusBack[0]=true;
    }
  }
);
  visibilityCombo.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      moveFocusBack[0]=true;
      ToolWindowManager.getInstance(project).activateEditorComponent();
    }
  }
);
}
