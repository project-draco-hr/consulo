{
  super.setUp();
  myStructure=new TestProjectTreeStructure(myProject){
    public boolean isShowMembers(){
      return myShowMembers;
    }
  }
;
  myPane=new AbstractProjectViewPSIPane(myProject){
    protected ProjectViewSelectInTarget createSelectInTarget(){
      return null;
    }
    protected AbstractTreeUpdater createTreeUpdater(    AbstractTreeBuilder treeBuilder){
      return new AbstractTreeUpdater(treeBuilder);
    }
    protected BaseProjectTreeBuilder createBuilder(    DefaultTreeModel treeModel){
      return new ProjectTreeBuilder(myProject,myTree,treeModel,AlphaComparator.INSTANCE,(ProjectAbstractTreeStructureBase)myTreeStructure){
        protected AbstractTreeUpdater createUpdater(){
          return createTreeUpdater(this);
        }
        protected void addTaskToWorker(        final Runnable runnable,        boolean first,        final Runnable postRunnable){
          runnable.run();
          postRunnable.run();
        }
      }
;
    }
    protected ProjectAbstractTreeStructureBase createStructure(){
      return (ProjectAbstractTreeStructureBase)myStructure;
    }
    protected ProjectViewTree createTree(    DefaultTreeModel treeModel){
      return new ProjectViewTree(treeModel){
        public DefaultMutableTreeNode getSelectedNode(){
          return null;
        }
      }
;
    }
    public Icon getIcon(){
      return null;
    }
    public String getId(){
      return null;
    }
    public String getTitle(){
      return null;
    }
  }
;
  myPane.initTree();
}
