{
  if (!(iteratedExpression instanceof PsiMethodCallExpression)) {
    return false;
  }
  final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)iteratedExpression;
  final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
  final String methodName=methodExpression.getReferenceName();
  if (!"keySet".equals(methodName)) {
    return false;
  }
  final PsiExpression expression=methodExpression.getQualifierExpression();
  if (!(expression instanceof PsiReferenceExpression)) {
    return false;
  }
  final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)expression;
  final PsiElement target=referenceExpression.resolve();
  if (!(target instanceof PsiVariable)) {
    return false;
  }
  final PsiVariable targetVariable=(PsiVariable)target;
  final PsiType type=targetVariable.getType();
  if (!(type instanceof PsiClassType)) {
    return false;
  }
  final PsiClassType classType=(PsiClassType)type;
  if (!classType.equalsToText("java.util.Map")) {
    return false;
  }
  final GetValueFromMapChecker checker=new GetValueFromMapChecker(targetVariable,key);
  context.accept(checker);
  return checker.isGetValueFromMap();
}
