{
  List<Object> result=CollectionFactory.arrayList();
  Outer:   for (  GroovyResolveResult candidate : candidates) {
    final PsiElement element=candidate.getElement();
    final PsiElement context=candidate.getCurrentFileResolveContext();
    if (context instanceof GrImportStatement && element != null) {
      final String importedName=((GrImportStatement)context).getImportedName();
      if (importedName != null) {
        final GrCodeReferenceElement importReference=((GrImportStatement)context).getImportReference();
        if (importReference != null) {
          for (          GroovyResolveResult r : importReference.multiResolve(false)) {
            final PsiElement resolved=r.getElement();
            if (context.getManager().areElementsEquivalent(resolved,element)) {
              result.add(generateLookupForImportedElement(candidate,importedName));
              continue Outer;
            }
 else {
              if (resolved instanceof PsiField && element instanceof PsiMethod && isAccessorFor((PsiMethod)element,(PsiField)resolved)) {
                result.add(generateLookupForImportedElement(candidate,getAccessorPrefix((PsiMethod)element) + capitalize(importedName)));
                continue Outer;
              }
            }
          }
        }
      }
    }
 else     if (context instanceof GrMethodCallExpression && element instanceof PsiMethod) {
      final PsiMethod method=generateMethodInCategory(candidate);
      result.add(setupLookupBuilder(method,candidate.getSubstitutor(),LookupElementBuilder.create((PsiNamedElement)element)));
      continue;
    }
    if (element instanceof PsiClass) {
      result.add(AllClassesGetter.createLookupItem((PsiClass)element));
      continue;
    }
    if (element instanceof PsiNamedElement) {
      result.add(setupLookupBuilder(element,candidate.getSubstitutor(),LookupElementBuilder.create((PsiNamedElement)element)));
      continue;
    }
    result.add(element);
  }
  return result;
}
