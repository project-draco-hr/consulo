{
  Object[] result=new Object[candidates.length];
  Outer:   for (int i=0; i < result.length; i++) {
    final PsiElement element=candidates[i].getElement();
    final PsiElement context=candidates[i].getCurrentFileResolveContext();
    if (context instanceof GrImportStatement && element != null) {
      final String importedName=((GrImportStatement)context).getImportedName();
      if (importedName != null) {
        final GrCodeReferenceElement importReference=((GrImportStatement)context).getImportReference();
        if (importReference != null) {
          final GroovyResolveResult[] results=importReference.multiResolve(false);
          for (          GroovyResolveResult r : results) {
            final PsiElement resolved=r.getElement();
            if (PsiManager.getInstance(context.getProject()).areElementsEquivalent(resolved,element)) {
              result[i]=generateLookupForImportedElement(candidates[i],importedName);
              continue Outer;
            }
 else {
              if (resolved instanceof PsiField && element instanceof PsiMethod && isAccessorFor((PsiMethod)element,(PsiField)resolved)) {
                result[i]=generateLookupForImportedElement(candidates[i],getAccessorPrefix((PsiMethod)element) + capitalize(importedName));
                continue Outer;
              }
            }
          }
        }
      }
    }
    result[i]=element;
  }
  return result;
}
