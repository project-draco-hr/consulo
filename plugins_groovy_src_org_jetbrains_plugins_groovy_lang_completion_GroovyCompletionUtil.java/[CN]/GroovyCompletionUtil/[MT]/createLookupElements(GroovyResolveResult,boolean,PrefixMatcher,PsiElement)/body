{
  final PsiElement element=candidate.getElement();
  final PsiElement context=candidate.getCurrentFileResolveContext();
  if (context instanceof GrImportStatement && element != null) {
    if (element instanceof PsiPackage) {
      return Collections.emptyList();
    }
    final String importedName=((GrImportStatement)context).getImportedName();
    if (importedName != null) {
      if (!matcher.prefixMatches(importedName)) {
        return Collections.emptyList();
      }
      final GrCodeReferenceElement importReference=((GrImportStatement)context).getImportReference();
      if (importReference != null) {
        boolean alias=((GrImportStatement)context).isAliasedImport();
        for (        GroovyResolveResult r : importReference.multiResolve(false)) {
          final PsiElement resolved=r.getElement();
          if (context.getManager().areElementsEquivalent(resolved,element) && (alias || !(element instanceof PsiClass))) {
            return generateLookupForImportedElement(candidate,importedName,alias);
          }
 else {
            if (resolved instanceof PsiField && element instanceof PsiMethod && isAccessorFor((PsiMethod)element,(PsiField)resolved)) {
              return generateLookupForImportedElement(candidate,getAccessorPrefix((PsiMethod)element) + capitalize(importedName),alias);
            }
          }
        }
      }
    }
  }
  String name=element instanceof PsiNamedElement ? ((PsiNamedElement)element).getName() : element.getText();
  if (name == null || !matcher.prefixMatches(name)) {
    return Collections.emptyList();
  }
  if (element instanceof PsiClass) {
    return JavaClassNameCompletionContributor.createClassLookupItems((PsiClass)element,afterNew,new GroovyClassNameInsertHandler(),Condition.TRUE);
  }
  LookupElementBuilder builder=LookupElementBuilder.create(element instanceof PsiPackage ? element : candidate,name);
  return Arrays.asList(setupLookupBuilder(element,candidate.getSubstitutor(),builder,position));
}
