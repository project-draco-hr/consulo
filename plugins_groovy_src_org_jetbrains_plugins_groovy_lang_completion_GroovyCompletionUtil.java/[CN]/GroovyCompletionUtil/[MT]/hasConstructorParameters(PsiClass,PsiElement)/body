{
  final GroovyResolveResult[] constructors=ResolveUtil.getAllClassConstructors(clazz,PsiSubstitutor.EMPTY,null,place);
  boolean hasSetters=ContainerUtil.find(clazz.getAllMethods(),new Condition<PsiMethod>(){
    @Override public boolean value(    PsiMethod method){
      return isSimplePropertySetter(method);
    }
  }
) != null;
  boolean hasParameters=false;
  boolean hasAccessibleConstructors=false;
  for (  GroovyResolveResult result : constructors) {
    final PsiElement element=result.getElement();
    if (element instanceof PsiMethod) {
      if (((PsiMethod)element).getParameterList().getParametersCount() > 0) {
        hasParameters=true;
      }
      if (result.isAccessible()) {
        hasAccessibleConstructors=true;
      }
      if (hasAccessibleConstructors && hasParameters)       return true;
    }
  }
  return !hasAccessibleConstructors && (hasParameters || hasSetters);
}
