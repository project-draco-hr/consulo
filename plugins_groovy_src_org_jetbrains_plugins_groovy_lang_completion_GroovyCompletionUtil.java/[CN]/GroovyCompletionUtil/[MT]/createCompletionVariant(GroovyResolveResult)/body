{
  final PsiElement element=candidate.getElement();
  final PsiElement context=candidate.getCurrentFileResolveContext();
  if (context instanceof GrImportStatement && element != null) {
    final String importedName=((GrImportStatement)context).getImportedName();
    if (importedName != null) {
      final GrCodeReferenceElement importReference=((GrImportStatement)context).getImportReference();
      if (importReference != null) {
        for (        GroovyResolveResult r : importReference.multiResolve(false)) {
          final PsiElement resolved=r.getElement();
          if (context.getManager().areElementsEquivalent(resolved,element)) {
            return generateLookupForImportedElement(candidate,importedName);
          }
 else {
            if (resolved instanceof PsiField && element instanceof PsiMethod && isAccessorFor((PsiMethod)element,(PsiField)resolved)) {
              return generateLookupForImportedElement(candidate,getAccessorPrefix((PsiMethod)element) + capitalize(importedName));
            }
          }
        }
      }
    }
  }
 else   if (element instanceof PsiMethod) {
    final PsiMethod method;
    if (ResolveUtil.isInUseScope(candidate)) {
      method=generateMethodInCategory(candidate);
    }
 else {
      method=(PsiMethod)element;
    }
    return setupLookupBuilder(method,candidate.getSubstitutor(),LookupElementBuilder.create(candidate,((PsiMethod)element).getName()));
  }
  if (element instanceof PsiClass) {
    return createClassLookupItem((PsiClass)element);
  }
  if (element instanceof PsiNamedElement) {
    return setupLookupBuilder(element,candidate.getSubstitutor(),LookupElementBuilder.create(candidate,((PsiNamedElement)element).getName()));
  }
  return candidate;
}
