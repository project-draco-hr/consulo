{
  myPathMacroSubstitutor=pathMacroSubstitutor;
  myDir=new File(dir);
  mySplitter=splitter;
  Disposer.register(parentDisposable,this);
  VirtualFileTracker virtualFileTracker=(VirtualFileTracker)picoContainer.getComponentInstanceOfType(VirtualFileTracker.class);
  MessageBus messageBus=(MessageBus)picoContainer.getComponentInstanceOfType(MessageBus.class);
  if (virtualFileTracker != null && messageBus != null) {
    final String path=myDir.getAbsolutePath();
    final String fileUrl=LocalFileSystem.PROTOCOL_PREFIX + path.replace(File.separatorChar,'/');
    final Listener listener=messageBus.syncPublisher(STORAGE_TOPIC);
    virtualFileTracker.addTracker(fileUrl,new VirtualFileAdapter(){
      @Override public void contentsChanged(      @NotNull final VirtualFileEvent event){
        if (!StringUtil.endsWithIgnoreCase(event.getFile().getName(),".xml"))         return;
        listener.storageFileChanged(event,DirectoryBasedStorage.this);
      }
      @Override public void fileDeleted(      @NotNull final VirtualFileEvent event){
        if (!StringUtil.endsWithIgnoreCase(event.getFile().getName(),".xml"))         return;
        listener.storageFileChanged(event,DirectoryBasedStorage.this);
      }
      @Override public void fileCreated(      @NotNull final VirtualFileEvent event){
        if (!StringUtil.endsWithIgnoreCase(event.getFile().getName(),".xml"))         return;
        listener.storageFileChanged(event,DirectoryBasedStorage.this);
      }
    }
,false,this);
  }
  myFileTypeManager=FileTypeManager.getInstance();
}
