{
  final DataContext dataContext=e.getDataContext();
  final ConfigurationContext context=new ConfigurationContext(dataContext);
  final RunnerAndConfigurationSettingsImpl existing=context.findExisting();
  if (existing == null) {
    final List<RuntimeConfigurationProducer> producers=PreferedProducerFind.findPreferedProducers(context.getLocation(),context);
    if (producers == null)     return;
    if (producers.size() > 1) {
      final Editor editor=PlatformDataKeys.EDITOR.getData(dataContext);
      Collections.sort(producers,new Comparator<RuntimeConfigurationProducer>(){
        public int compare(        final RuntimeConfigurationProducer p1,        final RuntimeConfigurationProducer p2){
          return p1.getConfigurationType().getDisplayName().compareTo(p2.getConfigurationType().getDisplayName());
        }
      }
);
      final ListPopup popup=JBPopupFactory.getInstance().createListPopup(new BaseListPopupStep<RuntimeConfigurationProducer>(ExecutionBundle.message("configuration.action.chooser.title"),producers){
        @NotNull public String getTextFor(        final RuntimeConfigurationProducer producer){
          return producer.getConfigurationType().getDisplayName();
        }
        public Icon getIconFor(        final RuntimeConfigurationProducer producer){
          return producer.getConfigurationType().getIcon();
        }
        public PopupStep onChosen(        final RuntimeConfigurationProducer producer,        final boolean finalChoice){
          perform(producer,context);
          return PopupStep.FINAL_CHOICE;
        }
      }
);
      final InputEvent event=e.getInputEvent();
      if (event instanceof MouseEvent) {
        popup.show(new RelativePoint((MouseEvent)event));
      }
 else       if (editor != null) {
        popup.showInBestPositionFor(editor);
      }
 else {
        popup.showInBestPositionFor(dataContext);
      }
    }
 else {
      perform(producers.get(0),context);
    }
    return;
  }
  perform(context);
}
