{
  SvnVcs vcs=SvnVcs.getInstance(project);
  ApplicationManager.getApplication().saveAll();
  Collection paths=collectResolvablePaths(files);
  if (paths.isEmpty()) {
    Messages.showInfoMessage(project,SvnBundle.message("message.text.no.conflicts.found"),SvnBundle.message("message.title.no.conflicts.found"));
    return;
  }
  String[] pathsArray=(String[])paths.toArray(new String[paths.size()]);
  SelectFilesDialog dialog=new SelectFilesDialog(project,SvnBundle.message("label.select.files.and.directories.to.mark.resolved"),SvnBundle.message("dialog.title.mark.resolved"),SvnBundle.message("action.name.mark.resolved"),pathsArray,"vcs.subversion.resolve");
  dialog.show();
  if (!dialog.isOK()) {
    return;
  }
  pathsArray=dialog.getSelectedPaths();
  try {
    SVNWCClient wcClient=vcs.createWCClient();
    for (int i=0; i < pathsArray.length; i++) {
      String path=pathsArray[i];
      File ioFile=new File(path);
      wcClient.doResolve(ioFile,false);
    }
  }
 catch (  SVNException e) {
    throw new VcsException(e);
  }
 finally {
    for (int i=0; i < files.length; i++) {
      VcsDirtyScopeManager.getInstance(project).fileDirty(files[i]);
    }
  }
}
