{
  if (StableElement.class.equals(method.getDeclaringClass())) {
    try {
      return method.invoke(this,args);
    }
 catch (    InvocationTargetException e) {
      throw e.getCause();
    }
  }
  if (AdvancedProxy.FINALIZE_METHOD.equals(method))   return null;
  if (isNotValid(myCachedValue)) {
    if (myCachedValue != null) {
      myOldValue=myCachedValue;
    }
    myCachedValue=myProvider.create();
    if (isNotValid(myCachedValue)) {
      if (AdvancedProxy.EQUALS_METHOD.equals(method)) {
        final Object arg=args[0];
        if (!(arg instanceof StableElement))         return false;
        final StableInvocationHandler handler=DomManagerImpl.getStableInvocationHandler(arg);
        if (handler == null || handler.getWrappedElement() != null)         return false;
        return Comparing.equal(myOldValue,handler.myOldValue);
      }
      if (myOldValue != null && Object.class.equals(method.getDeclaringClass())) {
        return method.invoke(myOldValue,args);
      }
      if ("isValid".equals(method.getName())) {
        return Boolean.FALSE;
      }
      throw new AssertionError("Calling methods on invalid value");
    }
  }
  if (AdvancedProxy.EQUALS_METHOD.equals(method)) {
    final Object arg=args[0];
    if (!(arg instanceof StableElement))     return false;
    myCachedValue.equals(((StableElement)arg).getWrappedElement());
  }
  if (AdvancedProxy.HASHCODE_METHOD.equals(method)) {
    return myCachedValue.hashCode();
  }
  try {
    return method.invoke(myCachedValue,args);
  }
 catch (  InvocationTargetException e) {
    throw e.getCause();
  }
}
