{
  FileDocumentManager.getInstance().saveAllDocuments();
  final MavenConsole console=createConsole();
  try {
    final MavenExecutor[] executor=new MavenExecutor[]{createExecutor(parameters,null,settings,console)};
    ProgressManager.getInstance().run(new Task.Backgroundable(myProject,executor[0].getCaption(),true){
      public void run(      @NotNull ProgressIndicator indicator){
        try {
          try {
            if (executor[0].execute(indicator)) {
              if (onComplete != null)               onComplete.run();
            }
          }
 catch (          ProcessCanceledException ignore) {
          }
          executor[0]=null;
          updateTargetFolders();
        }
  finally {
          console.finish();
        }
      }
      @Nullable public NotificationInfo getNotificationInfo(){
        return new NotificationInfo("Maven","Maven Task Finished","");
      }
      public boolean shouldStartInBackground(){
        return settings.isRunMavenInBackground();
      }
      public void processSentToBackground(){
        settings.setRunMavenInBackground(true);
      }
      public void processRestoredToForeground(){
        settings.setRunMavenInBackground(false);
      }
    }
);
  }
 catch (  Exception e) {
    console.printException(e);
    console.finish();
    MavenLog.LOG.warn(e);
  }
}
