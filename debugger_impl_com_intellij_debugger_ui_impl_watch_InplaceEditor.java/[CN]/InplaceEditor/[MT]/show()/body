{
  LOG.assertTrue(myInplaceEditorComponent == null,"editor is not released");
  final DebuggerTree tree=myNode.getTree();
  final JLayeredPane layeredPane=tree.getRootPane().getLayeredPane();
  Rectangle bounds=getEditorBounds();
  Point layeredPanePoint=SwingUtilities.convertPoint(tree,bounds.x,bounds.y,layeredPane);
  myInplaceEditorComponent=createInplaceEditorComponent();
  LOG.assertTrue(myInplaceEditorComponent != null);
  myInplaceEditorComponent.setBounds(layeredPanePoint.x,layeredPanePoint.y,bounds.width,Math.max(bounds.height,myInplaceEditorComponent.getPreferredSize().height));
  layeredPane.add(myInplaceEditorComponent,new Integer(250));
  myInplaceEditorComponent.validate();
  myInplaceEditorComponent.paintImmediately(0,0,myInplaceEditorComponent.getWidth(),myInplaceEditorComponent.getHeight());
  getPreferredFocusedComponent().requestFocus();
  tree.getRootPane().addComponentListener(myComponentListener);
  ExecutionManager.getInstance(getProject()).getContentManager().addRunContentListener(myRunContentListener);
  final JComponent editorComponent=getEditorComponent();
  editorComponent.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),"enterStroke");
  editorComponent.getActionMap().put("enterStroke",new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      doOKAction();
    }
  }
);
  editorComponent.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0),"escapeStroke");
  editorComponent.getActionMap().put("escapeStroke",new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      cancelEditing();
    }
  }
);
  Toolkit.getDefaultToolkit().addAWTEventListener(this,AWTEvent.MOUSE_EVENT_MASK);
}
