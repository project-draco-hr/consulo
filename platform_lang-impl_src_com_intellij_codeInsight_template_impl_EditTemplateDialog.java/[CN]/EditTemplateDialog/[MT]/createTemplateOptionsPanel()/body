{
  JPanel panel=new JPanel();
  panel.setBorder(IdeBorderFactory.createTitledBorder(CodeInsightBundle.message("dialog.edit.template.options.title")));
  panel.setLayout(new GridBagLayout());
  GridBagConstraints gbConstraints=new GridBagConstraints();
  gbConstraints.fill=GridBagConstraints.BOTH;
  gbConstraints.weighty=0;
  gbConstraints.weightx=0;
  gbConstraints.gridy=0;
  panel.add(new JLabel(CodeInsightBundle.message("dialog.edit.template.label.expand.with")),gbConstraints);
  gbConstraints.gridx=1;
  myExpandByCombo=new JComboBox();
  myExpandByCombo.addItem(myDefaultShortcutItem);
  myExpandByCombo.addItem(SPACE);
  myExpandByCombo.addItem(TAB);
  myExpandByCombo.addItem(ENTER);
  panel.add(myExpandByCombo,gbConstraints);
  gbConstraints.weightx=1;
  gbConstraints.gridx=2;
  panel.add(new JPanel(),gbConstraints);
  gbConstraints.gridx=0;
  gbConstraints.gridy++;
  gbConstraints.gridwidth=3;
  myCbReformat=new JCheckBox(CodeInsightBundle.message("dialog.edit.template.checkbox.reformat.according.to.style"));
  panel.add(myCbReformat,gbConstraints);
  for (  TemplateOptionalProcessor processor : myOptions.keySet()) {
    if (!processor.isVisible(myTemplate))     continue;
    gbConstraints.gridy++;
    JCheckBox cb=new JCheckBox(processor.getOptionName());
    panel.add(cb,gbConstraints);
    myCbOptionalProcessorMap.put(processor,cb);
  }
  gbConstraints.weighty=1;
  gbConstraints.gridy++;
  panel.add(new JPanel(),gbConstraints);
  return panel;
}
