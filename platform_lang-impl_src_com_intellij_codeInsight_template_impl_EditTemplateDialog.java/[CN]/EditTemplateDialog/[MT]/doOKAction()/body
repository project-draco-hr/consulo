{
  String key=myKeyField.getText().trim();
  final String newGroup=(String)myGroupCombo.getSelectedItem();
  for (  TemplateGroup templateGroup : myTemplateGroups) {
    if (templateGroup.getName().equals(newGroup)) {
      for (      TemplateImpl template : templateGroup.getElements()) {
        if (template.getKey().equals(key) && myTemplate != template) {
          Messages.showMessageDialog(getContentPane(),CodeInsightBundle.message("dialog.edit.template.error.already.exists",key,template.getGroupName()),CodeInsightBundle.message("dialog.edit.template.error.title"),Messages.getErrorIcon());
          return;
        }
      }
    }
  }
  if (!TemplateImplUtil.validateTemplateText(myTemplateEditor.getDocument().getText())) {
    Messages.showMessageDialog(getContentPane(),CodeInsightBundle.message("dialog.edit.template.error.malformed.template"),CodeInsightBundle.message("dialog.edit.template.error.title"),Messages.getErrorIcon());
    return;
  }
  SchemesManager<TemplateGroup,TemplateGroup> schemesManager=TemplateSettings.getInstance().getSchemesManager();
  TemplateGroup group=schemesManager.findSchemeByName(newGroup);
  if (group != null && schemesManager.isShared(group)) {
    Messages.showMessageDialog(getContentPane(),"Group " + group.getName() + " is shared, cannot be modified",CodeInsightBundle.message("dialog.edit.template.error.title"),Messages.getErrorIcon());
    return;
  }
  boolean anyChecked=false;
  for (  JCheckBox contextCheckBox : myCbContextMap.values()) {
    if (contextCheckBox.isSelected()) {
      anyChecked=true;
      break;
    }
  }
  if (!anyChecked) {
    Messages.showMessageDialog(getContentPane(),"Please enable at least one context checkbox. Otherwise the live template will never ber active.",CodeInsightBundle.message("dialog.edit.template.error.title"),Messages.getErrorIcon());
    return;
  }
  super.doOKAction();
}
