{
  markRows(from);
  if (from == to) {
    DefaultMutableTreeNode parent=(DefaultMutableTreeNode)from.getParent();
    int index=parent.getIndex(from);
    treeModel.removeNodeFromParent(from);
    treeModel.insertNodeInto(replacement,parent,index);
    return collectRowChangesAndUnmark(parent);
  }
  final DefaultMutableTreeNode root=(DefaultMutableTreeNode)from.getParent();
  DefaultMutableTreeNode cutHierarchy=null;
  for (DefaultMutableTreeNode current=to; current != root; current=(DefaultMutableTreeNode)current.getParent()) {
    DefaultMutableTreeNode parent=(DefaultMutableTreeNode)current.getParent();
    int i=parent.getIndex(current);
    int childCount=parent.getChildCount();
    if (i >= childCount - 1) {
      continue;
    }
    DefaultMutableTreeNode parentCopy=new DefaultMutableTreeNode(childCount > 0 ? extractUserObject(parent.getUserObject()) : parent.getUserObject());
    if (cutHierarchy != null) {
      parentCopy.add(cutHierarchy);
    }
    for (int j=i + 1; j < childCount; j++) {
      DefaultMutableTreeNode child=(DefaultMutableTreeNode)parent.getChildAt(j);
      treeModel.removeNodeFromParent(child);
      child.setUserObject(child.getChildCount() > 0 ? extractUserObject(child.getUserObject()) : child.getUserObject());
      parentCopy.add(child);
    }
    cutHierarchy=parentCopy;
  }
  int insertionIndex=root.getIndex(from) + 1;
  for (DefaultMutableTreeNode current=to; current != root; ) {
    DefaultMutableTreeNode parent=(DefaultMutableTreeNode)current.getParent();
    treeModel.removeNodeFromParent(current);
    current=parent;
    if (current != to) {
      current.setUserObject(extractUserObject(current.getUserObject()));
    }
    if (parent.getChildCount() > 0) {
      break;
    }
  }
  boolean merged=insert(root,insertionIndex,replacement,treeModel);
  if (cutHierarchy != null) {
    insert(root,insertionIndex + (merged ? 0 : 1),cutHierarchy,treeModel);
  }
  return collectRowChangesAndUnmark(root);
}
