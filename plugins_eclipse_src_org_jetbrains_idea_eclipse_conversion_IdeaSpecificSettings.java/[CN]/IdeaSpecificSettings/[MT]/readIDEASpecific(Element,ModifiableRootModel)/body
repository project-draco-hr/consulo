{
  PathMacroManager.getInstance(model.getModule()).expandPaths(root);
  model.getModuleExtension(LanguageLevelModuleExtension.class).readExternal(root);
  final CompilerModuleExtension compilerModuleExtension=model.getModuleExtension(CompilerModuleExtension.class);
  final Element testOutputElement=root.getChild(IdeaXml.OUTPUT_TEST_TAG);
  if (testOutputElement != null) {
    compilerModuleExtension.setCompilerOutputPathForTests(testOutputElement.getAttributeValue(IdeaXml.URL_ATTR));
  }
  final String inheritedOutput=root.getAttributeValue(IdeaXml.INHERIT_COMPILER_OUTPUT_ATTR);
  if (inheritedOutput != null && Boolean.valueOf(inheritedOutput).booleanValue()) {
    compilerModuleExtension.inheritCompilerOutputPath(true);
  }
  compilerModuleExtension.setExcludeOutput(root.getChild(IdeaXml.EXCLUDE_OUTPUT_TAG) != null);
  final List entriesElements=root.getChildren(IdeaXml.CONTENT_ENTRY_TAG);
  if (!entriesElements.isEmpty()) {
    for (    Object o : entriesElements) {
      readContentEntry((Element)o,model.addContentEntry(((Element)o).getAttributeValue(IdeaXml.URL_ATTR)));
    }
  }
 else {
    final ContentEntry[] entries=model.getContentEntries();
    if (entries.length > 0) {
      readContentEntry(root,entries[0]);
    }
  }
  final String inheritJdk=root.getAttributeValue(INHERIT_JDK);
  if (inheritJdk != null && Boolean.parseBoolean(inheritJdk)) {
    model.inheritSdk();
  }
  for (  Object o : root.getChildren("lib")) {
    Element libElement=(Element)o;
    final String libName=libElement.getAttributeValue("name");
    Library libraryByName=model.getModuleLibraryTable().getLibraryByName(libName);
    if (libraryByName != null) {
      appendLibraryScope(model,libElement,libraryByName);
      final Library.ModifiableModel modifiableModel=libraryByName.getModifiableModel();
      replaceCollapsedByEclipseSourceRoots(libElement,modifiableModel);
      for (      Object r : libElement.getChildren(JAVADOCROOT_ATTR)) {
        final String url=((Element)r).getAttributeValue("url");
        modifiableModel.addRoot(url,JavadocOrderRootType.getInstance());
      }
      replaceModuleRelatedRoots(model.getProject(),modifiableModel,libElement,OrderRootType.SOURCES,RELATIVE_MODULE_SRC);
      replaceModuleRelatedRoots(model.getProject(),modifiableModel,libElement,OrderRootType.CLASSES,RELATIVE_MODULE_CLS);
      replaceModuleRelatedRoots(model.getProject(),modifiableModel,libElement,JavadocOrderRootType.getInstance(),RELATIVE_MODULE_JAVADOC);
      modifiableModel.commit();
    }
 else {
      final Library library=EclipseClasspathReader.findLibraryByName(model.getProject(),libName);
      if (library != null) {
        appendLibraryScope(model,libElement,library);
      }
    }
  }
  overrideModulesScopes(root,model);
}
