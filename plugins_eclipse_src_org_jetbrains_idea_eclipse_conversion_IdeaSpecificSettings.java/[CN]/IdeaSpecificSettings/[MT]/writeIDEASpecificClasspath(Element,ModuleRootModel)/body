{
  boolean isModified=false;
  final CompilerModuleExtension compilerModuleExtension=model.getModuleExtension(CompilerModuleExtension.class);
  if (compilerModuleExtension.getCompilerOutputUrlForTests() != null) {
    final Element pathElement=new Element(IdeaXml.OUTPUT_TEST_TAG);
    pathElement.setAttribute(IdeaXml.URL_ATTR,compilerModuleExtension.getCompilerOutputUrlForTests());
    root.addContent(pathElement);
    isModified=true;
  }
  if (compilerModuleExtension.isCompilerOutputPathInherited()) {
    root.setAttribute(IdeaXml.INHERIT_COMPILER_OUTPUT_ATTR,String.valueOf(true));
    isModified=true;
  }
  if (compilerModuleExtension.isExcludeOutput()) {
    root.addContent(new Element(IdeaXml.EXCLUDE_OUTPUT_TAG));
    isModified=true;
  }
  final LanguageLevelModuleExtension languageLevelModuleExtension=model.getModuleExtension(LanguageLevelModuleExtension.class);
  final LanguageLevel languageLevel=languageLevelModuleExtension.getLanguageLevel();
  if (languageLevel != null) {
    languageLevelModuleExtension.writeExternal(root);
    isModified=true;
  }
  for (  ContentEntry entry : model.getContentEntries()) {
    final Element contentEntryElement=new Element(IdeaXml.CONTENT_ENTRY_TAG);
    contentEntryElement.setAttribute(IdeaXml.URL_ATTR,entry.getUrl());
    root.addContent(contentEntryElement);
    for (    SourceFolder sourceFolder : entry.getSourceFolders()) {
      if (sourceFolder.isTestSource()) {
        Element element=new Element(IdeaXml.TEST_FOLDER_TAG);
        contentEntryElement.addContent(element);
        element.setAttribute(IdeaXml.URL_ATTR,sourceFolder.getUrl());
        isModified=true;
      }
    }
    final VirtualFile entryFile=entry.getFile();
    exclude:     for (    ExcludeFolder excludeFolder : entry.getExcludeFolders()) {
      final String exludeFolderUrl=excludeFolder.getUrl();
      final VirtualFile excludeFile=excludeFolder.getFile();
      for (      DirectoryIndexExcludePolicy excludePolicy : Extensions.getExtensions(DirectoryIndexExcludePolicy.EP_NAME,model.getModule().getProject())) {
        final VirtualFilePointer[] excludeRootsForModule=excludePolicy.getExcludeRootsForModule(model);
        for (        VirtualFilePointer pointer : excludeRootsForModule) {
          if (Comparing.strEqual(pointer.getUrl(),exludeFolderUrl)) {
            continue exclude;
          }
        }
      }
      if (entryFile == null || excludeFile == null || VfsUtil.isAncestor(entryFile,excludeFile,false)) {
        Element element=new Element(IdeaXml.EXCLUDE_FOLDER_TAG);
        contentEntryElement.addContent(element);
        element.setAttribute(IdeaXml.URL_ATTR,exludeFolderUrl);
        isModified=true;
      }
    }
  }
  for (  OrderEntry entry : model.getOrderEntries()) {
    if (!(entry instanceof LibraryOrderEntry))     continue;
    final Element element=new Element("lib");
    element.setAttribute("name",entry.getPresentableName());
    final LibraryOrderEntry libraryEntry=(LibraryOrderEntry)entry;
    final DependencyScope scope=libraryEntry.getScope();
    element.setAttribute("scope",scope.name());
    if (libraryEntry.isModuleLevel()) {
      final String[] urls=libraryEntry.getRootUrls(OrderRootType.SOURCES);
      for (      String url : urls) {
        Element srcElement=new Element(SRCROOT_ATTR);
        srcElement.setAttribute("url",url);
        element.addContent(srcElement);
      }
      final String[] javadocUrls=libraryEntry.getRootUrls(JavadocOrderRootType.getInstance());
      for (int i=1; i < javadocUrls.length; i++) {
        Element javadocElement=new Element(JAVADOCROOT_ATTR);
        javadocElement.setAttribute("url",javadocUrls[i]);
        element.addContent(javadocElement);
      }
      for (      String srcUrl : libraryEntry.getRootUrls(OrderRootType.SOURCES)) {
        appendModuleRelatedRoot(element,srcUrl,RELATIVE_MODULE_SRC,model);
      }
      for (      String classesUrl : libraryEntry.getRootUrls(OrderRootType.CLASSES)) {
        appendModuleRelatedRoot(element,classesUrl,RELATIVE_MODULE_CLS,model);
      }
      for (      String javadocUrl : libraryEntry.getRootUrls(JavadocOrderRootType.getInstance())) {
        appendModuleRelatedRoot(element,javadocUrl,RELATIVE_MODULE_JAVADOC,model);
      }
      if (!element.getChildren().isEmpty()) {
        root.addContent(element);
        isModified=true;
        continue;
      }
    }
    if (!scope.equals(DependencyScope.COMPILE)) {
      root.addContent(element);
      isModified=true;
    }
  }
  PathMacroManager.getInstance(model.getModule()).collapsePaths(root);
  return isModified;
}
