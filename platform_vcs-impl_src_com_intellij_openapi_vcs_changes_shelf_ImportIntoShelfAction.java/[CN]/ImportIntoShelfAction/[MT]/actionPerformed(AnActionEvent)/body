{
  final Project project=PlatformDataKeys.PROJECT.getData(e.getDataContext());
  if (project == null)   return;
  FileChooser.chooseFilesWithSlideEffect(new FileChooserDescriptor(true,true,false,false,false,true),project,null,new Consumer<VirtualFile[]>(){
    @Override public void consume(    final VirtualFile[] virtualFiles){
      if (virtualFiles.length == 0)       return;
      ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
        @Override public void run(){
          final List<VcsException> exceptions=new ArrayList<VcsException>();
          final List<ShelvedChangeList> lists=ShelveChangesManager.getInstance(project).importChangeLists(Arrays.asList(virtualFiles),new Consumer<VcsException>(){
            @Override public void consume(            VcsException e){
              exceptions.add(e);
            }
          }
);
          if (!lists.isEmpty()) {
            ShelvedChangesViewManager.getInstance(project).activateView(lists.get(lists.size() - 1));
          }
          if (!exceptions.isEmpty()) {
            AbstractVcsHelper.getInstance(project).showErrors(exceptions,"Import patches into shelf");
          }
          if (lists.isEmpty() && exceptions.isEmpty()) {
            VcsBalloonProblemNotifier.showOverChangesView(project,"No patches found",MessageType.WARNING);
          }
        }
      }
,"Import patches into shelf",true,project);
    }
  }
);
}
