{
  super.visitMethod(method);
  if (method.getNameIdentifier() == null) {
    return;
  }
  final PsiClass containingClass=method.getContainingClass();
  if (containingClass == null) {
    return;
  }
  if (!containingClass.isInterface() && !method.hasModifierProperty(PsiModifier.ABSTRACT)) {
    return;
  }
  final InheritorFinder inheritorFinder=new InheritorFinder(containingClass);
  final PsiClass[] inheritors=inheritorFinder.getInheritors();
  for (  final PsiClass inheritor : inheritors) {
    if (!inheritor.isInterface() && !inheritor.hasModifierProperty(PsiModifier.ABSTRACT)) {
      if (!hasMatchingImplementation(inheritor,method)) {
        registerMethodError(method);
        return;
      }
    }
  }
}
