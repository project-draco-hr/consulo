{
  if (where == null)   return null;
  final ArrayList[] problemList=new ArrayList[]{null};
  where.accept(new PsiRecursiveElementVisitor(){
    public void visitReferenceExpression(    PsiReferenceExpression expression){
      super.visitElement(expression);
    }
    public void visitMethod(    PsiMethod method){
    }
    public void visitClass(    PsiClass aClass){
    }
    public void visitBinaryExpression(    PsiBinaryExpression expression){
      super.visitBinaryExpression(expression);
      IElementType opSign=expression.getOperationSign().getTokenType();
      if (opSign == JavaTokenType.EQEQ || opSign == JavaTokenType.NE) {
        PsiExpression lOperand=expression.getLOperand();
        PsiExpression rOperand=expression.getROperand();
        if (lOperand == null || rOperand == null || isNullLiteral(lOperand) || isNullLiteral(rOperand))         return;
        PsiType lType=lOperand.getType();
        PsiType rType=rOperand.getType();
        if (isCheckedType(lType) || isCheckedType(rType)) {
          if (problemList[0] == null)           problemList[0]=new ArrayList();
          problemList[0].add(manager.createProblemDescriptor(expression,"Suspicious comparison #ref #loc",myQuickFix,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
        }
      }
    }
  }
);
  return problemList[0] == null ? null : (ProblemDescriptor[])problemList[0].toArray(new ProblemDescriptor[problemList[0].size()]);
}
