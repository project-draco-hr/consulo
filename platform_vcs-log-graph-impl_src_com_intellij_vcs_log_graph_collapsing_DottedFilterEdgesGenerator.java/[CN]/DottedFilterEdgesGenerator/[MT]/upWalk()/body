{
  for (int currentNodeIndex=myDownIndex; currentNodeIndex >= myUpIndex; currentNodeIndex--) {
    if (nodeIsVisible(currentNodeIndex)) {
      int nearlyDown=Integer.MAX_VALUE;
      int minAdjNumber=Integer.MAX_VALUE;
      for (      int downNode : myLiteDelegateGraph.getNodes(currentNodeIndex,NodeFilter.DOWN)) {
        if (downNode > myDownIndex) {
          addEdgeOrArrow(currentNodeIndex,downNode,false);
          continue;
        }
        if (nodeIsVisible(downNode)) {
          minAdjNumber=Math.min(minAdjNumber,myNumbers.getNumber(downNode));
        }
 else {
          nearlyDown=Math.min(nearlyDown,myNumbers.getNumber(downNode));
        }
      }
      if (nearlyDown == minAdjNumber || nearlyDown == Integer.MAX_VALUE) {
        myNumbers.setNumber(currentNodeIndex,minAdjNumber);
      }
 else {
        addDottedEdge(currentNodeIndex,nearlyDown);
        myNumbers.setNumber(currentNodeIndex,nearlyDown);
      }
    }
 else {
      int nearlyDown=Integer.MAX_VALUE;
      for (      int downNode : myLiteDelegateGraph.getNodes(currentNodeIndex,NodeFilter.DOWN)) {
        if (nodeIsVisible(downNode)) {
          nearlyDown=Math.min(nearlyDown,downNode);
        }
 else {
          if (downNode <= myDownIndex)           nearlyDown=Math.min(nearlyDown,myNumbers.getNumber(downNode));
        }
      }
      myNumbers.setNumber(currentNodeIndex,nearlyDown);
    }
  }
}
