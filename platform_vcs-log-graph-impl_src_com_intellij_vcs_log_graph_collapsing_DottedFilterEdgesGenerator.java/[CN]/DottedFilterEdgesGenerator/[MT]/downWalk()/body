{
  for (int currentNodeIndex=myUpIndex; currentNodeIndex <= myDownIndex; currentNodeIndex++) {
    if (nodeIsVisible(currentNodeIndex)) {
      int nearlyUp=Integer.MIN_VALUE;
      int maxAdjNumber=Integer.MIN_VALUE;
      for (      int upNode : myLiteDelegateGraph.getNodes(currentNodeIndex,NodeFilter.UP)) {
        if (upNode < myUpIndex) {
          addEdgeOrArrow(currentNodeIndex,upNode,true);
          continue;
        }
        if (nodeIsVisible(upNode)) {
          maxAdjNumber=Math.max(maxAdjNumber,myNumbers.getNumber(upNode));
        }
 else {
          nearlyUp=Math.max(nearlyUp,myNumbers.getNumber(upNode));
        }
      }
      if (nearlyUp == maxAdjNumber || nearlyUp == Integer.MIN_VALUE) {
        myNumbers.setNumber(currentNodeIndex,maxAdjNumber);
      }
 else {
        addDottedEdge(currentNodeIndex,nearlyUp);
        myNumbers.setNumber(currentNodeIndex,nearlyUp);
      }
    }
 else {
      int nearlyUp=Integer.MIN_VALUE;
      for (      int upNode : myLiteDelegateGraph.getNodes(currentNodeIndex,NodeFilter.UP)) {
        if (nodeIsVisible(upNode)) {
          nearlyUp=Math.max(nearlyUp,upNode);
        }
 else {
          if (upNode >= myUpIndex)           nearlyUp=Math.max(nearlyUp,myNumbers.getNumber(upNode));
        }
      }
      myNumbers.setNumber(currentNodeIndex,nearlyUp);
    }
  }
}
