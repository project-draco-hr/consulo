{
  if (expression instanceof PsiPolyadicExpression) {
    final PsiPolyadicExpression polyadicExpression=(PsiPolyadicExpression)expression;
    final PsiExpression[] operands=polyadicExpression.getOperands();
    final IElementType tokenType=polyadicExpression.getOperationTokenType();
    if (JavaTokenType.ANDAND.equals(tokenType)) {
      for (      PsiExpression operand : operands) {
        buildIf(operand,out);
      }
      if (!StringUtil.endsWith(out,"return true;")) {
        out.append("return true;");
      }
      return out;
    }
 else     if (JavaTokenType.OROR.equals(tokenType)) {
      boolean insertElse=false;
      for (      PsiExpression operand : operands) {
        if (insertElse) {
          out.append("else ");
        }
 else {
          insertElse=true;
        }
        buildIf(operand,out);
        if (!StringUtil.endsWith(out,"return true;")) {
          out.append("return true;");
        }
      }
      return out;
    }
  }
 else   if (expression instanceof PsiParenthesizedExpression) {
    final PsiParenthesizedExpression parenthesizedExpression=(PsiParenthesizedExpression)expression;
    buildIf(parenthesizedExpression.getExpression(),out);
    return out;
  }
  if (expression != null) {
    out.append("if(").append(expression.getText()).append(")");
  }
  return out;
}
