{
  JPanel filterComponent=new JPanel(new GridBagLayout());
  filterComponent.setBorder(BorderFactory.createEmptyBorder(0,2,2,2));
  final JLabel titleLabel=new JLabel(KeyMapBundle.message("filter.settings.popup.title"));
  titleLabel.setHorizontalAlignment(SwingConstants.CENTER);
  titleLabel.setOpaque(true);
  titleLabel.setBackground(UIUtil.getListBackground());
  filterComponent.add(titleLabel,new GridBagConstraints(0,GridBagConstraints.RELATIVE,2,1,1,0,GridBagConstraints.CENTER,GridBagConstraints.HORIZONTAL,new Insets(0,-2,8,-2),0,0));
  final JRadioButton textFilter=new JRadioButton(KeyMapBundle.message("filter.text.title"));
  filterComponent.add(textFilter,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,0,0,GridBagConstraints.NORTH,GridBagConstraints.HORIZONTAL,new Insets(0,0,0,0),0,0));
  myFilterComponent=new FilterComponent("KEYMAP",5,false,false){
    protected void filter(){
      myActionsTree.filter(getFilter(),getCurrentQuickListIds());
    }
  }
;
  filterComponent.add(myFilterComponent,new GridBagConstraints(1,GridBagConstraints.RELATIVE,1,1,0,0,GridBagConstraints.NORTH,GridBagConstraints.HORIZONTAL,new Insets(0,0,0,0),0,0));
  JRadioButton shortcutFilter=new JRadioButton(KeyMapBundle.message("filter.shortcut.title"));
  filterComponent.add(shortcutFilter,new GridBagConstraints(0,GridBagConstraints.RELATIVE,2,1,1,0,GridBagConstraints.NORTH,GridBagConstraints.HORIZONTAL,new Insets(0,0,0,0),0,0));
  final ShortcutTextField firstShortcut=new ShortcutTextField();
  final ShortcutTextField secondShortcut=new ShortcutTextField();
  final JCheckBox enable2Shortcut=new JCheckBox(KeyMapBundle.message("filter.enable.second.stroke.checkbox"));
  firstShortcut.getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    DocumentEvent e){
      filterTreeByShortcut(firstShortcut,enable2Shortcut,secondShortcut);
    }
  }
);
  secondShortcut.getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    DocumentEvent e){
      filterTreeByShortcut(firstShortcut,enable2Shortcut,secondShortcut);
    }
  }
);
  final JLabel firstLabel=new JLabel(KeyMapBundle.message("filter.first.stroke.input"));
  filterComponent.add(firstLabel,new GridBagConstraints(0,GridBagConstraints.RELATIVE,2,1,1,0,GridBagConstraints.NORTH,GridBagConstraints.HORIZONTAL,new Insets(5,20,0,0),0,0));
  filterComponent.add(firstShortcut,new GridBagConstraints(0,GridBagConstraints.RELATIVE,2,1,1,0,GridBagConstraints.NORTH,GridBagConstraints.HORIZONTAL,new Insets(0,20,0,0),0,0));
  enable2Shortcut.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      secondShortcut.setEnabled(enable2Shortcut.isSelected());
    }
  }
);
  filterComponent.add(enable2Shortcut,new GridBagConstraints(0,GridBagConstraints.RELATIVE,2,1,1,0,GridBagConstraints.NORTH,GridBagConstraints.HORIZONTAL,new Insets(0,15,0,0),0,0));
  final JLabel secondLabel=new JLabel(KeyMapBundle.message("filter.second.stroke.input"));
  filterComponent.add(secondLabel,new GridBagConstraints(0,GridBagConstraints.RELATIVE,2,1,1,0,GridBagConstraints.NORTH,GridBagConstraints.HORIZONTAL,new Insets(0,20,0,0),0,0));
  filterComponent.add(secondShortcut,new GridBagConstraints(0,GridBagConstraints.RELATIVE,2,1,1,0,GridBagConstraints.NORTH,GridBagConstraints.HORIZONTAL,new Insets(0,20,0,0),0,0));
  enable2Shortcut.setSelected(false);
  secondShortcut.setEnabled(false);
  ActionListener enabledListener=new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      enableFilterComponents(textFilter.isSelected(),firstShortcut,secondShortcut,enable2Shortcut,secondLabel,firstLabel);
    }
  }
;
  ButtonGroup group=new ButtonGroup();
  group.add(textFilter);
  group.add(shortcutFilter);
  textFilter.setSelected(myTextFilterUsed);
  shortcutFilter.setSelected(!myTextFilterUsed);
  textFilter.addActionListener(enabledListener);
  shortcutFilter.addActionListener(enabledListener);
  enableFilterComponents(myTextFilterUsed,firstShortcut,secondShortcut,enable2Shortcut,secondLabel,firstLabel);
  return filterComponent;
}
