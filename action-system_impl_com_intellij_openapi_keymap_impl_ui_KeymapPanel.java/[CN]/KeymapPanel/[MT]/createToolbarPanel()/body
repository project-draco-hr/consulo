{
  final JPanel panel=new JPanel(new GridBagLayout());
  DefaultActionGroup group=new DefaultActionGroup();
  final JComponent toolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,group,true).getComponent();
  final CommonActionsManager commonActionsManager=CommonActionsManager.getInstance();
  final TreeExpander treeExpander=new TreeExpander(){
    public void expandAll(){
      TreeUtil.expandAll(myActionsTree.getTree());
    }
    public boolean canExpand(){
      return true;
    }
    public void collapseAll(){
      TreeUtil.collapseAll(myActionsTree.getTree(),0);
    }
    public boolean canCollapse(){
      return true;
    }
  }
;
  group.add(commonActionsManager.createExpandAllAction(treeExpander,myActionsTree.getTree()));
  group.add(commonActionsManager.createCollapseAllAction(treeExpander,myActionsTree.getTree()));
  panel.add(toolbar,new GridBagConstraints(0,0,1,1,1,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(8,0,0,0),0,0));
  group=new DefaultActionGroup();
  final JComponent searchToolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,group,true).getComponent();
  final Alarm alarm=new Alarm();
  myFilterComponent=new FilterComponent("KEYMAP",5){
    public void filter(){
      alarm.cancelAllRequests();
      alarm.addRequest(new Runnable(){
        public void run(){
          if (!myFilterComponent.isShowing())           return;
          if (!myTreeExpansionMonitor.isFreeze())           myTreeExpansionMonitor.freeze();
          final String filter=getFilter();
          myActionsTree.filter(filter,myQuickListsPanel.getCurrentQuickListIds());
          final JTree tree=myActionsTree.getTree();
          TreeUtil.expandAll(tree);
          if (filter == null || filter.length() == 0) {
            TreeUtil.collapseAll(tree,0);
            myTreeExpansionMonitor.restore();
          }
        }
      }
,300);
    }
  }
;
  myFilterComponent.reset();
  panel.add(myFilterComponent,new GridBagConstraints(1,0,1,1,0,0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(8,0,0,0),0,0));
  group.add(new AnAction(KeyMapBundle.message("filter.shortcut.action.text"),KeyMapBundle.message("filter.shortcut.action.text"),IconLoader.getIcon("/ant/shortcutFilter.png")){
    public void actionPerformed(    AnActionEvent e){
      if (myPopup == null || myPopup.getContent() == null) {
        myPopup=JBPopupFactory.getInstance().createComponentPopupBuilder(createFilteringPanel(),null).setRequestFocus(true).setTitle(KeyMapBundle.message("filter.settings.popup.title")).setMovable(true).createPopup();
      }
      myPopup.showUnderneathOf(searchToolbar);
    }
  }
);
  group.add(new AnAction(KeyMapBundle.message("filter.clear.action.text"),KeyMapBundle.message("filter.clear.action.text"),IconLoader.getIcon("/actions/gc.png")){
    public void actionPerformed(    AnActionEvent e){
      myActionsTree.filter(null,myQuickListsPanel.getCurrentQuickListIds());
      TreeUtil.collapseAll(myActionsTree.getTree(),0);
      myTreeExpansionMonitor.restore();
    }
  }
);
  panel.add(searchToolbar,new GridBagConstraints(2,0,1,1,0,0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(8,0,0,0),0,0));
  return panel;
}
