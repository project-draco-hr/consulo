{
  JPanel panel=new JPanel(new GridBagLayout());
  panel.add(new JLabel(KeyMapBundle.message("key.map.name.label")),new GridBagConstraints(0,0,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,0,8),0,0));
  myKeymapNameField=new JTextField();
  Dimension dimension=new Dimension(150,myKeymapNameField.getPreferredSize().height);
  myKeymapNameField.setPreferredSize(dimension);
  myKeymapNameField.setMinimumSize(dimension);
  panel.add(myKeymapNameField,new GridBagConstraints(1,0,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,8,0,0),0,0));
  myBaseKeymapLabel=new JLabel(KeyMapBundle.message("parent.keymap.label"));
  Dimension preferredSize=myBaseKeymapLabel.getPreferredSize();
  myBaseKeymapLabel.setPreferredSize(new Dimension(preferredSize.width * 2,preferredSize.height));
  panel.add(myBaseKeymapLabel,new GridBagConstraints(2,0,1,1,1,0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,16,0,8),0,0));
  myDisableMnemonicsCheckbox=new JCheckBox(KeyMapBundle.message("disable.mnemonic.in.menu.check.box"));
  myDisableMnemonicsCheckbox.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      if (mySelectedKeymap != null) {
        mySelectedKeymap.setDisableMnemonics(myDisableMnemonicsCheckbox.isSelected());
      }
    }
  }
);
  panel.add(myDisableMnemonicsCheckbox,new GridBagConstraints(3,0,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));
  DefaultActionGroup group=new DefaultActionGroup();
  final JComponent toolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,group,true).getComponent();
  final CommonActionsManager commonActionsManager=CommonActionsManager.getInstance();
  final TreeExpander treeExpander=new TreeExpander(){
    public void expandAll(){
      TreeUtil.expandAll(myActionsTree.getTree());
    }
    public boolean canExpand(){
      return true;
    }
    public void collapseAll(){
      TreeUtil.collapseAll(myActionsTree.getTree(),0);
    }
    public boolean canCollapse(){
      return true;
    }
  }
;
  group.add(commonActionsManager.createCollapseAllAction(treeExpander));
  group.add(commonActionsManager.createExpandAllAction(treeExpander));
  group.add(new AnAction(InspectionsBundle.message("inspection.tools.action.filter"),InspectionsBundle.message("inspection.tools.action.filter"),IconLoader.getIcon("/ant/filter.png")){
    public void actionPerformed(    AnActionEvent e){
      if (myPopup == null || myPopup.getContent() == null) {
        myPopup=JBPopupFactory.getInstance().createComponentPopupBuilder(createFilteringPanel(),null).setRequestFocus(true).createPopup();
      }
      myPopup.showUnderneathOf(toolbar);
    }
  }
);
  group.add(new AnAction(KeyMapBundle.message("filter.clear.action.text"),KeyMapBundle.message("filter.clear.action.text"),IconLoader.getIcon("/actions/gc.png")){
    public void actionPerformed(    AnActionEvent e){
      myActionsTree.filter(null,getCurrentQuickListIds());
      TreeUtil.collapseAll(myActionsTree.getTree(),0);
      myTreeExpansionMonitor.restore();
    }
  }
);
  panel.add(toolbar,new GridBagConstraints(0,1,4,1,1,1,GridBagConstraints.EAST,GridBagConstraints.VERTICAL,new Insets(8,8,0,10),0,0));
  return panel;
}
