{
  super(new BorderLayout());
  myProject=project;
  final List<ChangeList> changeLists1;
  changeLists1=changeLists;
  myAllChanges=new ArrayList<Change>();
  ChangeList initalListSelection=null;
  for (  ChangeList list : changeLists) {
    myAllChanges.addAll(list.getChanges());
    if (list.isDefault()) {
      initalListSelection=list;
    }
  }
  if (initalListSelection == null) {
    initalListSelection=changeLists.get(0);
  }
  myIncludedChanges=new HashSet<Change>(changes);
  myChangesList=new JList(new DefaultListModel());
  new ListSpeedSearch(myChangesList){
    protected String getElementText(    Object element){
      if (element instanceof Change) {
        return getFilePath((Change)element).getName();
      }
      return super.getElementText(element);
    }
  }
;
  setSelectedList(initalListSelection);
  myChangesList.setCellRenderer(new MyListCellRenderer());
  myChangesList.registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      toggleSelection();
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_SPACE,0),JComponent.WHEN_FOCUSED);
  final int checkboxWidth=new JCheckBox().getPreferredSize().width;
  myChangesList.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      final int idx=myChangesList.locationToIndex(e.getPoint());
      if (idx >= 0) {
        final Rectangle baseRect=myChangesList.getCellBounds(idx,idx);
        baseRect.setSize(checkboxWidth,baseRect.height);
        if (baseRect.contains(e.getPoint())) {
          final Change currentSelection=(Change)myChangesList.getModel().getElementAt(idx);
          toggleChange(currentSelection);
        }
 else         if (e.getClickCount() == 2) {
          showDiff();
        }
      }
    }
  }
);
  myFileStatusListener=new FileStatusListener(){
    public void fileStatusesChanged(){
      myChangesList.repaint();
    }
    public void fileStatusChanged(    VirtualFile virtualFile){
      myChangesList.repaint();
    }
  }
;
  FileStatusManager.getInstance(project).addFileStatusListener(myFileStatusListener);
  myChangesList.setVisibleRowCount(10);
  final JScrollPane pane=new JScrollPane(myChangesList);
  pane.setPreferredSize(new Dimension(400,400));
  JPanel listPanel=new JPanel(new BorderLayout());
  listPanel.add(pane);
  listPanel.setBorder(IdeBorderFactory.createTitledHeaderBorder(VcsBundle.message("commit.dialog.changed.files.label")));
  add(listPanel,BorderLayout.CENTER);
  JPanel headerPanel=new JPanel(new BorderLayout());
  headerPanel.add(new ChangeListChooser(changeLists1),BorderLayout.EAST);
  headerPanel.add(createToolbar(),BorderLayout.WEST);
  add(headerPanel,BorderLayout.NORTH);
}
