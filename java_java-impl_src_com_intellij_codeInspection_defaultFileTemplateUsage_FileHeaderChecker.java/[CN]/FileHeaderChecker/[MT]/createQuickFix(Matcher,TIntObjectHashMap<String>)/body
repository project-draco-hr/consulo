{
  final FileTemplate template=FileTemplateManager.getInstance().getPattern(FileTemplateManager.FILE_HEADER_TEMPLATE_NAME);
  final ReplaceWithFileTemplateFix replaceTemplateFix=new ReplaceWithFileTemplateFix(){
    public void applyFix(    @NotNull final Project project,    @NotNull final ProblemDescriptor descriptor){
      PsiElement element=descriptor.getPsiElement();
      if (element == null || !element.isValid())       return;
      if (!CodeInsightUtil.preparePsiElementsForWrite(element))       return;
      String newText;
      try {
        newText=template.getText(computeProperties(matcher,offsetToProperty));
      }
 catch (      IOException e) {
        LOG.error(e);
        return;
      }
      try {
        int offset=element.getTextRange().getStartOffset();
        PsiFile psiFile=element.getContainingFile();
        if (psiFile == null)         return;
        PsiDocumentManager documentManager=PsiDocumentManager.getInstance(psiFile.getProject());
        Document document=documentManager.getDocument(psiFile);
        if (document == null)         return;
        element.delete();
        documentManager.doPostponedOperationsAndUnblockDocument(document);
        documentManager.commitDocument(document);
        document.insertString(offset,newText);
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
catch (      IllegalStateException e) {
        LOG.error("Cannot create doc comment from text: '" + newText + "'",e);
      }
    }
  }
;
  final LocalQuickFix editFileTemplateFix=DefaultFileTemplateUsageInspection.createEditFileTemplateFix(template,replaceTemplateFix);
  if (template.isDefault()) {
    return new LocalQuickFix[]{editFileTemplateFix};
  }
  return new LocalQuickFix[]{replaceTemplateFix,editFileTemplateFix};
}
