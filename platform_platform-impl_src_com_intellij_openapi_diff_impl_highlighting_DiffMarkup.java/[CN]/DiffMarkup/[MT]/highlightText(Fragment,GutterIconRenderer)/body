{
  MarkupModel markupModel=getMarkupModel();
  EditorEx editor=getEditor();
  TextDiffTypeEnum diffTypeEnum=fragment.getType();
  if (diffTypeEnum == null || markupModel == null || editor == null) {
    return;
  }
  TextDiffType type=fragment instanceof LineFragment ? DiffUtil.makeTextDiffType((LineFragment)fragment) : TextDiffType.create(diffTypeEnum);
  final TextRange range=fragment.getRange(getSide());
  final TextAttributes attributes=type.getTextAttributes(editor);
  if (attributes == null) {
    return;
  }
  RangeHighlighter rangeMarker;
  if (range.getLength() == 0) {
    final int offset=range.getStartOffset();
    rangeMarker=markupModel.addRangeHighlighter(offset,offset,LAYER,attributes,HighlighterTargetArea.EXACT_RANGE);
    rangeMarker.setCustomRenderer(new CustomHighlighterRenderer(){
      @Override public void paint(      @NotNull Editor ed,      @NotNull RangeHighlighter highlighter,      @NotNull Graphics g){
        g.setColor(attributes.getBackgroundColor());
        Point point=ed.logicalPositionToXY(ed.offsetToLogicalPosition(offset));
        int endy=point.y + ed.getLineHeight() - 1;
        g.drawLine(point.x,point.y,point.x,endy);
        g.drawLine(point.x - 1,point.y,point.x - 1,endy);
      }
    }
);
  }
 else {
    rangeMarker=markupModel.addRangeHighlighter(range.getStartOffset(),range.getEndOffset(),LAYER,attributes,HighlighterTargetArea.EXACT_RANGE);
  }
  if (gutterIconRenderer != null) {
    rangeMarker.setGutterIconRenderer(gutterIconRenderer);
  }
  setLineMarkerRenderer(rangeMarker,fragment,type);
  setErrorStripes(rangeMarker,fragment,attributes.getErrorStripeColor());
  saveHighlighter(rangeMarker);
}
