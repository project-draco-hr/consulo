{
  myArtifactsEditor=artifactsEditor;
  myTreeParameters=treeParameters;
  myContext=context;
  myOriginalArtifact=originalArtifact;
  myRoot=new PackagingElementNode(getArtifact().getRootElement(),myContext);
  myTreeModel=new DefaultTreeModel(myRoot);
  myTree=new LayoutTree(myTreeModel);
  Disposer.register(this,myTree);
  myTree.setCellEditor(new DefaultCellEditor(new JTextField()){
    @Override public Component getTreeCellEditorComponent(    JTree tree,    Object value,    boolean isSelected,    boolean expanded,    boolean leaf,    int row){
      final JTextField field=(JTextField)super.getTreeCellEditorComponent(tree,value,isSelected,expanded,leaf,row);
      final PackagingElement<?> element=((PackagingElementNode)value).getPackagingElement();
      final String name=((CompositePackagingElement)element).getName();
      field.setText(name);
      int i=name.lastIndexOf('.');
      field.setSelectionStart(0);
      field.setSelectionEnd(i != -1 ? i : name.length());
      return field;
    }
    @Override public boolean stopCellEditing(){
      final String newValue=((JTextField)editorComponent).getText();
      final TreePath path=myTree.getEditingPath();
      final Object node=path.getLastPathComponent();
      CompositePackagingElement currentElement=null;
      if (node instanceof PackagingElementNode) {
        final PackagingElement<?> element=((PackagingElementNode)node).getPackagingElement();
        if (element instanceof CompositePackagingElement) {
          currentElement=(CompositePackagingElement)element;
        }
      }
      final boolean stopped=super.stopCellEditing();
      if (stopped && currentElement != null) {
        currentElement.rename(newValue);
        myTreeModel.nodeChanged((TreeNode)node);
      }
      return stopped;
    }
  }
);
  myTree.setRootVisible(true);
  myTree.setShowsRootHandles(false);
  myTree.setCellRenderer(new ArtifactsTreeCellRenderer());
  myTree.addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      updatePropertiesPanel();
    }
  }
);
  myPropertiesPanel=createPropertiesPanel();
  myTreePanel=new JPanel(new BorderLayout());
  myTreePanel.add(ScrollPaneFactory.createScrollPane(myTree),BorderLayout.CENTER);
  myTreePanel.add(myPropertiesPanel,BorderLayout.SOUTH);
  myTree.addMouseListener(new ArtifactsTreeMouseListener());
  DnDManager.getInstance().registerTarget(this,myTree);
}
