{
  int documentOffset=0;
  int effectiveOffset=0;
  StringBuffer text=new StringBuffer();
  Iterator<Pair<TextRange,StringBuffer>> iterator=myAffectedFragments.iterator();
  while (iterator.hasNext() && effectiveOffset < end) {
    final Pair<TextRange,StringBuffer> pair=iterator.next();
    final TextRange range=pair.getFirst();
    final StringBuffer buffer=pair.getSecond();
    final int effectiveFragmentEnd=range.getStartOffset() + buffer.length();
    if (range.getStartOffset() <= start && effectiveFragmentEnd >= end) {
      return buffer.substring(start - range.getStartOffset(),end - range.getStartOffset());
    }
    if (range.getStartOffset() >= start) {
      final int effectiveStart=Math.max(effectiveOffset,start);
      text.append(myDocument.getChars(),effectiveStart - effectiveOffset + documentOffset,Math.min(range.getStartOffset(),end) - effectiveStart);
      if (end > range.getStartOffset()) {
        text.append(buffer.substring(0,Math.min(end - range.getStartOffset(),buffer.length())));
      }
    }
    documentOffset+=range.getEndOffset() - effectiveOffset;
    effectiveOffset=range.getStartOffset() + buffer.length();
  }
  if (effectiveOffset < end) {
    final int effectiveStart=Math.max(effectiveOffset,start);
    text.append(myDocument.getChars(),effectiveStart - effectiveOffset + documentOffset,end - effectiveStart);
  }
  return text.toString();
}
