{
  final int startInFragment;
  final StringBuffer fragmentReplaceText;
{
{
      final int oldStart=start;
      int end=start + length;
      final int newStringLength=str.length();
      final String chars=getText(start,end);
      int newStartInString=0;
      int newEndInString=newStringLength;
      while (newStartInString < newStringLength && start < end && str.charAt(newStartInString) == chars.charAt(start - oldStart)) {
        start++;
        newStartInString++;
      }
      while (end > start && newEndInString > newStartInString && str.charAt(newEndInString - 1) == chars.charAt(end - oldStart - 1)) {
        newEndInString--;
        end--;
      }
      str=str.substring(newStartInString,newEndInString);
      length=end - start;
    }
    final Pair<MutableTextRange,StringBuffer> fragment=getFragmentByRange(start,length);
    fragmentReplaceText=fragment.getSecond();
    startInFragment=start - fragment.getFirst().getStartOffset();
{
      final int lengthDiff=str.length() - length;
      final Iterator<Pair<MutableTextRange,StringBuffer>> iterator=myAffectedFragments.iterator();
      boolean adjust=false;
      while (iterator.hasNext()) {
        final Pair<MutableTextRange,StringBuffer> pair=iterator.next();
        if (adjust)         pair.getFirst().shift(lengthDiff);
        if (pair == fragment)         adjust=true;
      }
    }
  }
  fragmentReplaceText.replace(startInFragment,startInFragment + length,str);
}
