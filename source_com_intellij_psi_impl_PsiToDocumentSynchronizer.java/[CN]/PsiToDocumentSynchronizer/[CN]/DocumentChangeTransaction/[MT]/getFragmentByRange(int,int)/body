{
  final StringBuffer fragmentBuffer=new StringBuffer();
  int end=start + length;
{
    int documentOffset=0;
    int effectiveOffset=0;
    Iterator<Pair<TextRange,StringBuffer>> iterator=myAffectedFragments.iterator();
    while (iterator.hasNext() && effectiveOffset < end) {
      final Pair<TextRange,StringBuffer> pair=iterator.next();
      final TextRange range=pair.getFirst();
      final StringBuffer buffer=pair.getSecond();
      final int effectiveFragmentEnd=range.getStartOffset() + buffer.length();
      if (range.getStartOffset() <= start && effectiveFragmentEnd >= end)       return pair;
      if (effectiveFragmentEnd >= start) {
        final int effectiveStart=Math.max(effectiveOffset,start);
        if (range.getStartOffset() > start) {
          fragmentBuffer.append(myDocument.getChars(),effectiveStart - effectiveOffset + documentOffset,Math.min(range.getStartOffset(),end) - effectiveStart);
        }
        if (end > range.getStartOffset()) {
          fragmentBuffer.append(buffer);
          end=end > effectiveFragmentEnd ? end - (buffer.length() - range.getLength()) : range.getEndOffset();
          start=Math.min(start,range.getStartOffset());
          iterator.remove();
        }
      }
      documentOffset+=range.getEndOffset() - effectiveOffset;
      effectiveOffset=effectiveFragmentEnd;
    }
    if (effectiveOffset < end) {
      final int effectiveStart=Math.max(effectiveOffset,start);
      fragmentBuffer.append(myDocument.getChars(),effectiveStart - effectiveOffset + documentOffset,end - effectiveStart);
    }
  }
  final Pair<TextRange,StringBuffer> pair=new Pair<TextRange,StringBuffer>(new TextRange(start,end),fragmentBuffer);
  int i;
  for (i=0; i < myAffectedFragments.size(); i++) {
    if (start > pair.getFirst().getStartOffset()) {
      myAffectedFragments.add(i,pair);
      break;
    }
  }
  if (i == myAffectedFragments.size())   myAffectedFragments.add(pair);
  return pair;
}
