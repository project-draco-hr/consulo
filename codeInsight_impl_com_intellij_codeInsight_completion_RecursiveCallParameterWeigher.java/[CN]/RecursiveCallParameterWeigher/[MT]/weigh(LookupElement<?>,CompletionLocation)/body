{
  if (location.getCompletionType() != CompletionType.BASIC && location.getCompletionType() != CompletionType.SMART)   return 0;
  final Object object=element.getObject();
  if (!(object instanceof PsiModifierListOwner) && !(object instanceof PsiExpression))   return 0;
  final PsiMethod positionMethod=JavaCompletionUtil.POSITION_METHOD.getValue(location);
  if (positionMethod == null)   return 0;
  final PsiElement position=location.getCompletionParameters().getPosition();
  final PsiMethodCallExpression expression=PsiTreeUtil.getParentOfType(position,PsiMethodCallExpression.class,true,PsiClass.class);
  final PsiReferenceExpression reference=expression != null ? expression.getMethodExpression() : PsiTreeUtil.getParentOfType(position,PsiReferenceExpression.class);
  if (reference == null)   return 0;
  final PsiExpression qualifier=reference.getQualifierExpression();
  boolean isDelegate=qualifier != null && !(qualifier instanceof PsiThisExpression) && !(qualifier instanceof PsiSuperExpression);
  if (expression != null) {
    final ExpectedTypeInfo[] expectedInfos=JavaCompletionUtil.EXPECTED_TYPES.getValue(location);
    if (expectedInfos != null) {
      final PsiType itemType=JavaCompletionUtil.getPsiType(object);
      if (itemType != null) {
        for (        final ExpectedTypeInfo expectedInfo : expectedInfos) {
          if (positionMethod.equals(expectedInfo.getCalledMethod()) && expectedInfo.getType().isAssignableFrom(itemType)) {
            return isDelegate ? 2 : -1;
          }
        }
      }
    }
    return 0;
  }
  if (positionMethod.equals(object) && PsiTreeUtil.isAncestor(positionMethod,position,false) && PsiTreeUtil.isAncestor(reference,position,false)) {
    return isDelegate ? 2 : -1;
  }
  return 1;
}
