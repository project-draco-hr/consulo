{
  if (myUpdaterState != null) {
    myUpdaterState.clearSelection();
  }
  final TreePath[] currentSelection=myTree.getSelectionPaths();
  if (currentSelection != null) {
    List<Object> selectedObjects=new ArrayList<Object>();
    for (    TreePath eachPath : currentSelection) {
      if (eachPath.getLastPathComponent() instanceof DefaultMutableTreeNode) {
        final DefaultMutableTreeNode eachNode=(DefaultMutableTreeNode)eachPath.getLastPathComponent();
        final Object eachElement=getElementFor(eachNode);
        if (eachElement != null) {
          selectedObjects.add(eachElement);
        }
      }
    }
    if (currentSelection.length > 0 && currentSelection.length == selectedObjects.size()) {
      boolean runSelection=false;
      for (      Object toSelect : elements) {
        if (!selectedObjects.contains(toSelect)) {
          runSelection=true;
          break;
        }
      }
      if (!runSelection) {
        if (onDone != null) {
          onDone.run();
        }
        return;
      }
    }
  }
  if (wasRootNodeInitialized()) {
    final int[] originalRows=myTree.getSelectionRows();
    if (!addToSelection) {
      myTree.clearSelection();
    }
    addNext(elements,0,onDone,originalRows);
  }
 else {
    myDeferredSelections.clear();
    myDeferredSelections.add(new Runnable(){
      public void run(){
        select(elements,onDone);
      }
    }
);
  }
}
