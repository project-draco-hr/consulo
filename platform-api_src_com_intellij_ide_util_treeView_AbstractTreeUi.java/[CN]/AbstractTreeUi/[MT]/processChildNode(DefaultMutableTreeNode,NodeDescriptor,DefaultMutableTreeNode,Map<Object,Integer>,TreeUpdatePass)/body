{
  if (pass.isExpired()) {
    return new ActionCallback.Rejected();
  }
  if (childDescr == null) {
    pass.expire();
    return new ActionCallback.Rejected();
  }
  Object oldElement=getElementFromDescriptor(childDescr);
  if (oldElement == null) {
    pass.expire();
    return new ActionCallback.Rejected();
  }
  boolean changes=update(childDescr,false);
  Object newElement=getElementFromDescriptor(childDescr);
  Integer index=newElement != null ? elementToIndexMap.get(getBuilder().getTreeStructureElement(childDescr)) : null;
  if (index != null) {
    if (childDescr.getIndex() != index.intValue()) {
      changes=true;
    }
    childDescr.setIndex(index.intValue());
  }
  if (index != null && changes) {
    updateNodeImageAndPosition(childNode);
  }
  if (!oldElement.equals(newElement)) {
    removeMapping(oldElement,childNode);
    if (newElement != null) {
      createMapping(newElement,childNode);
    }
  }
  if (index == null) {
    int selectedIndex=-1;
    if (TreeBuilderUtil.isNodeOrChildSelected(myTree,childNode)) {
      selectedIndex=node.getIndex(childNode);
    }
    if (childNode.getParent() instanceof DefaultMutableTreeNode) {
      final DefaultMutableTreeNode parent=(DefaultMutableTreeNode)childNode.getParent();
      if (myTree.isExpanded(new TreePath(parent.getPath()))) {
        if (parent.getChildCount() == 1 && parent.getChildAt(0) == childNode) {
          insertLoadingNode(parent,false);
        }
      }
    }
    Object disposedElement=getElementFor(childNode);
    removeNodeFromParent(childNode,selectedIndex >= 0);
    disposeNode(childNode);
    if (selectedIndex >= 0) {
      if (node.getChildCount() > 0) {
        if (node.getChildCount() > selectedIndex) {
          TreeNode newChildNode=node.getChildAt(selectedIndex);
          if (isValidForSelectionAdjusting(newChildNode)) {
            addSelectionPath(new TreePath(myTreeModel.getPathToRoot(newChildNode)),true,getExpiredElementCondition(disposedElement));
          }
        }
 else {
          TreeNode newChild=node.getChildAt(node.getChildCount() - 1);
          if (isValidForSelectionAdjusting(newChild)) {
            addSelectionPath(new TreePath(myTreeModel.getPathToRoot(newChild)),true,getExpiredElementCondition(disposedElement));
          }
        }
      }
 else {
        addSelectionPath(new TreePath(myTreeModel.getPathToRoot(node)),true,getExpiredElementCondition(disposedElement));
      }
    }
  }
 else {
    elementToIndexMap.remove(getBuilder().getTreeStructureElement(childDescr));
    updateNodeChildren(childNode,pass,null);
  }
  if (node.equals(getRootNode())) {
    myTreeModel.nodeChanged(getRootNode());
  }
  return new ActionCallback.Done();
}
