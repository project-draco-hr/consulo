{
  final NodeDescriptor descriptor=(NodeDescriptor)node.getUserObject();
  if (!getBuilder().isAlwaysShowPlus(descriptor)) {
    if (getTreeStructure().isToBuildChildrenInBackground(getBuilder().getTreeStructureElement(descriptor))) {
      final boolean[] hasNoChildren=new boolean[1];
      Runnable runnable=new Runnable(){
        public void run(){
          if (isDisposed())           return;
          getBuilder().updateNodeDescriptor(descriptor);
          Object element=getBuilder().getTreeStructureElement(descriptor);
          if (element == null)           return;
          Object[] children=getTreeStructure().getChildElements(element);
          hasNoChildren[0]=children.length == 0;
        }
      }
;
      Runnable postRunnable=new Runnable(){
        public void run(){
          if (isDisposed())           return;
          if (hasNoChildren[0]) {
            getBuilder().updateNodeDescriptor(descriptor);
            Object element=descriptor.getElement();
            if (element != null) {
              DefaultMutableTreeNode node=getNodeForElement(element,false);
              if (node != null) {
                expand(node);
              }
            }
          }
        }
      }
;
      addTaskToWorker(runnable,false,postRunnable);
    }
 else {
      Object[] children=getTreeStructure().getChildElements(getBuilder().getTreeStructureElement(descriptor));
      if (children.length == 0)       return;
    }
  }
  myTreeModel.insertNodeInto(new LoadingNode(),node,0);
  myUnbuiltNodes.add(node);
}
