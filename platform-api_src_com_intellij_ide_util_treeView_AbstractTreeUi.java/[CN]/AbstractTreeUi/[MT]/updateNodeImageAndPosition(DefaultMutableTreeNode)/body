{
  if (!(node.getUserObject() instanceof NodeDescriptor))   return;
  NodeDescriptor descriptor=(NodeDescriptor)node.getUserObject();
  if (descriptor.getElement() == null)   return;
  DefaultMutableTreeNode parentNode=(DefaultMutableTreeNode)node.getParent();
  if (parentNode != null) {
    int oldIndex=parentNode.getIndex(node);
    int newIndex=0;
    for (int i=0; i < parentNode.getChildCount(); i++) {
      DefaultMutableTreeNode node1=(DefaultMutableTreeNode)parentNode.getChildAt(i);
      if (node == node1)       continue;
      if (node1.getUserObject() instanceof NodeDescriptor && ((NodeDescriptor)node1.getUserObject()).getElement() == null)       continue;
      if (myNodeComparator.compare(node,node1) > 0 || isLoadingNode(node1))       newIndex++;
    }
    if (oldIndex != newIndex) {
      List<Object> pathsToExpand=new ArrayList<Object>();
      List<Object> selectionPaths=new ArrayList<Object>();
      TreeBuilderUtil.storePaths(getBuilder(),node,pathsToExpand,selectionPaths,false);
      removeNodeFromParent(node);
      myTreeModel.insertNodeInto(node,parentNode,newIndex);
      TreeBuilderUtil.restorePaths(getBuilder(),pathsToExpand,selectionPaths,false);
    }
 else {
      myTreeModel.nodeChanged(node);
    }
  }
 else {
    myTreeModel.nodeChanged(node);
  }
}
