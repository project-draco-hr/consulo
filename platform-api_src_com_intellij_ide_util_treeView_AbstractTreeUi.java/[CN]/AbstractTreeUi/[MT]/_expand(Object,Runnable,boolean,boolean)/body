{
  if (checkIfInStructure && !isInStructure(element)) {
    onDone.run();
    return;
  }
  if (wasRootNodeInitialized()) {
    List<Object> kidsToExpand=new ArrayList<Object>();
    Object eachElement=element;
    DefaultMutableTreeNode firstVisible;
    while (true) {
      firstVisible=getNodeForElement(eachElement,false);
      if (eachElement != element || !parentsOnly) {
        kidsToExpand.add(eachElement);
      }
      if (firstVisible != null)       break;
      eachElement=getTreeStructure().getParentElement(eachElement);
      if (eachElement == null) {
        firstVisible=null;
        break;
      }
    }
    if (firstVisible == null) {
      onDone.run();
    }
 else     if (kidsToExpand.size() == 0) {
      final DefaultMutableTreeNode parentNode=(DefaultMutableTreeNode)firstVisible.getParent();
      if (parentNode != null) {
        final TreePath parentPath=new TreePath(parentNode.getPath());
        if (!myTree.isExpanded(parentPath)) {
          expand(parentPath);
        }
      }
      onDone.run();
    }
 else {
      processExpand(firstVisible,kidsToExpand,kidsToExpand.size() - 1,onDone);
    }
  }
 else {
    myDeferredExpansions.add(new Runnable(){
      public void run(){
        _expand(element,onDone,parentsOnly,false);
      }
    }
);
  }
}
