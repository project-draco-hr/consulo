{
  final ReadProcessThread stdoutThread=new ReadProcessThread(createProcessOutReader()){
    protected void textAvailable(    String s){
      notifyTextAvailable(s,ProcessOutputTypes.STDOUT);
    }
  }
;
  final ReadProcessThread stderrThread=new ReadProcessThread(createProcessErrReader()){
    protected void textAvailable(    String s){
      notifyTextAvailable(s,ProcessOutputTypes.STDERR);
    }
  }
;
  notifyTextAvailable(myCommandLine + '\n',ProcessOutputTypes.SYSTEM);
  addProcessListener(new ProcessAdapter(){
    public void startNotified(    final ProcessEvent event){
      try {
        final Future<?> stdOutReadingFuture=executeOnPooledThread(stdoutThread);
        final Future<?> stdErrReadingFuture=executeOnPooledThread(stderrThread);
        final Runnable action=new Runnable(){
          public void run(){
            int exitCode=0;
            try {
              exitCode=myWaitFor.waitFor();
              stderrThread.setProcessTerminated(true);
              stdoutThread.setProcessTerminated(true);
              stdErrReadingFuture.get();
              stdOutReadingFuture.get();
            }
 catch (            InterruptedException e) {
            }
catch (            ExecutionException e) {
            }
            onOSProcessTerminated(exitCode);
          }
        }
;
        executeOnPooledThread(action);
      }
  finally {
        removeProcessListener(this);
      }
    }
  }
);
  super.startNotify();
}
