{
  final IdeaPluginDescriptor plugin=PluginsFacade.INSTANCE.getPlugin(pluginId);
  ResourceBundle bundle=getActionsResourceBundle(loader,plugin);
  if (!GROUP_ELEMENT_NAME.equals(element.getName())) {
    reportActionError(pluginId,"unexpected name of element \"" + element.getName() + "\"");
    return null;
  }
  String className=element.getAttributeValue(CLASS_ATTR_NAME);
  if (className == null) {
    className=DefaultActionGroup.class.getName();
  }
  try {
    Class aClass=Class.forName(className,true,loader);
    Object obj=new ConstructorInjectionComponentAdapter(className,aClass).getComponentInstance(ApplicationManager.getApplication().getPicoContainer());
    if (!(obj instanceof ActionGroup)) {
      reportActionError(pluginId,"class with name \"" + className + "\" should be instance of "+ ActionGroup.class.getName());
      return null;
    }
    if (element.getChildren().size() != element.getChildren(ADD_TO_GROUP_ELEMENT_NAME).size()) {
      if (!(obj instanceof DefaultActionGroup)) {
        reportActionError(pluginId,"class with name \"" + className + "\" should be instance of "+ DefaultActionGroup.class.getName()+ " because there are children specified");
        return null;
      }
    }
    ActionGroup group=(ActionGroup)obj;
    String id=element.getAttributeValue(ID_ATTR_NAME);
    if (id != null && id.length() == 0) {
      reportActionError(pluginId,"ID of the group cannot be an empty string");
      return null;
    }
    if (Boolean.valueOf(element.getAttributeValue(INTERNAL_ATTR_NAME)).booleanValue() && !ApplicationManagerEx.getApplicationEx().isInternal()) {
      myNotRegisteredInternalActionIds.add(id);
      return null;
    }
    if (id != null) {
      registerAction(id,group);
    }
    Presentation presentation=group.getTemplatePresentation();
    String text=loadTextForElement(element,bundle,id,GROUP_ELEMENT_NAME);
    if (!StringUtil.isEmpty(text) || presentation.getText() == null) {
      presentation.setText(text);
    }
    String description=loadDescriptionForElement(element,bundle,id,GROUP_ELEMENT_NAME);
    if (!StringUtil.isEmpty(description) || presentation.getDescription() == null) {
      presentation.setDescription(description);
    }
    setIcon(element.getAttributeValue(ICON_ATTR_NAME),className,loader,presentation,pluginId);
    String popup=element.getAttributeValue(POPUP_ATTR_NAME);
    if (popup != null) {
      group.setPopup(Boolean.valueOf(popup).booleanValue());
    }
    for (    final Object o : element.getChildren()) {
      Element child=(Element)o;
      String name=child.getName();
      if (ACTION_ELEMENT_NAME.equals(name)) {
        AnAction action=processActionElement(child,loader,pluginId);
        if (action != null) {
          assertActionIsGroupOrStub(action);
          ((DefaultActionGroup)group).addAction(action,Constraints.LAST,this).setAsSecondary(isSecondary(child));
        }
      }
 else       if (SEPARATOR_ELEMENT_NAME.equals(name)) {
        processSeparatorNode((DefaultActionGroup)group,child,pluginId);
      }
 else       if (GROUP_ELEMENT_NAME.equals(name)) {
        AnAction action=processGroupElement(child,loader,pluginId);
        if (action != null) {
          ((DefaultActionGroup)group).add(action,this);
        }
      }
 else       if (ADD_TO_GROUP_ELEMENT_NAME.equals(name)) {
        processAddToGroupNode(group,child,pluginId,isSecondary(child));
      }
 else       if (REFERENCE_ELEMENT_NAME.equals(name)) {
        AnAction action=processReferenceElement(child,pluginId);
        if (action != null) {
          ((DefaultActionGroup)group).addAction(action,Constraints.LAST,this).setAsSecondary(isSecondary(child));
        }
      }
 else {
        reportActionError(pluginId,"unexpected name of element \"" + name + "\n");
        return null;
      }
    }
    return group;
  }
 catch (  ClassNotFoundException e) {
    reportActionError(pluginId,"class with name \"" + className + "\" not found");
    return null;
  }
catch (  NoClassDefFoundError e) {
    reportActionError(pluginId,"class with name \"" + e.getMessage() + "\" not found");
    return null;
  }
catch (  UnsupportedClassVersionError e) {
    reportActionError(pluginId,"unsupported class version for " + className);
    return null;
  }
catch (  Exception e) {
    final String message="cannot create class \"" + className + "\"";
    if (pluginId == null) {
      LOG.error(message,e);
    }
 else {
      LOG.error(new PluginException(message,e,pluginId));
    }
    return null;
  }
}
