{
  final IdeaPluginDescriptor plugin=PluginManager.getPlugin(pluginId);
  ResourceBundle bundle=getActionsResourceBundle(loader,plugin);
  if (!ACTION_ELEMENT_NAME.equals(element.getName())) {
    reportActionError(pluginId,"unexpected name of element \"" + element.getName() + "\"");
    return null;
  }
  String className=element.getAttributeValue(CLASS_ATTR_NAME);
  if (className == null || className.length() == 0) {
    reportActionError(pluginId,"action element should have specified \"class\" attribute");
    return null;
  }
  String id=element.getAttributeValue(ID_ATTR_NAME);
  if (id == null || id.length() == 0) {
    reportActionError(pluginId,"ID of the action cannot be an empty string");
    return null;
  }
  if (Boolean.valueOf(element.getAttributeValue(INTERNAL_ATTR_NAME)).booleanValue() && !ApplicationManagerEx.getApplicationEx().isInternal()) {
    myNotRegisteredInternalActionIds.add(id);
    return null;
  }
  String text=loadTextForElement(element,bundle,id,ACTION_ELEMENT_NAME);
  String iconPath=element.getAttributeValue(ICON_ATTR_NAME);
  if (text == null) {
    @NonNls String message="'text' attribute is mandatory (action ID=" + id + ";"+ (plugin == null ? "" : " plugin path: " + plugin.getPath())+ ")";
    reportActionError(pluginId,message);
    return null;
  }
  ActionStub stub=new ActionStub(className,id,text,loader,pluginId,iconPath);
  Presentation presentation=stub.getTemplatePresentation();
  presentation.setText(text);
  presentation.setDescription(loadDescriptionForElement(element,bundle,id,ACTION_ELEMENT_NAME));
  for (  final Object o : element.getChildren()) {
    Element e=(Element)o;
    if (ADD_TO_GROUP_ELEMENT_NAME.equals(e.getName())) {
      processAddToGroupNode(stub,e,pluginId,isSecondary(e));
    }
 else     if (SHORTCUT_ELEMENT_NAME.equals(e.getName())) {
      processKeyboardShortcutNode(e,id,pluginId);
    }
 else     if (MOUSE_SHORTCUT_ELEMENT_NAME.equals(e.getName())) {
      processMouseShortcutNode(e,id,pluginId);
    }
 else {
      reportActionError(pluginId,"unexpected name of element \"" + e.getName() + "\"");
      return null;
    }
  }
  if (element.getAttributeValue(USE_SHORTCUT_OF_ATTR_NAME) != null) {
    ((KeymapManagerEx)myKeymapManager).bindShortcuts(element.getAttributeValue(USE_SHORTCUT_OF_ATTR_NAME),id);
  }
  registerAction(id,stub,pluginId);
  return stub;
}
