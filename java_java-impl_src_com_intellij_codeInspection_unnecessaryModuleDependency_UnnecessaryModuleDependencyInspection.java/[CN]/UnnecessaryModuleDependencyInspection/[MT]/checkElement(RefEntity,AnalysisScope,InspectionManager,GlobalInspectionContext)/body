{
  if (refEntity instanceof RefModule) {
    final RefModule refModule=(RefModule)refEntity;
    final Module module=refModule.getModule();
    final Module[] declaredDependencies=ModuleRootManager.getInstance(module).getDependencies();
    List<CommonProblemDescriptor> descriptors=new ArrayList<CommonProblemDescriptor>();
    final Set<Module> modules=refModule.getUserData(UnnecessaryModuleDependencyAnnotator.DEPENDENCIES);
    for (    final Module dependency : declaredDependencies) {
      if (scope.contains(dependency.getModuleFile())) {
        if (modules == null || !modules.contains(dependency)) {
          descriptors.add(manager.createProblemDescriptor(InspectionsBundle.message("unnecessary.module.dependency.problem.descriptor",module.getName(),dependency.getName()),new QuickFix(){
            @NotNull public String getName(){
              return "Remove dependency";
            }
            @NotNull public String getFamilyName(){
              return getName();
            }
            public void applyFix(            @NotNull Project project,            @NotNull CommonProblemDescriptor descriptor){
              final ModifiableRootModel model=ModuleRootManager.getInstance(module).getModifiableModel();
              for (              OrderEntry entry : model.getOrderEntries()) {
                if (entry instanceof ModuleOrderEntry) {
                  final Module mDependency=((ModuleOrderEntry)entry).getModule();
                  if (Comparing.equal(mDependency,dependency)) {
                    model.removeOrderEntry(entry);
                    break;
                  }
                }
              }
              model.commit();
            }
          }
));
        }
      }
    }
    return descriptors.isEmpty() ? null : descriptors.toArray(new CommonProblemDescriptor[descriptors.size()]);
  }
  return null;
}
