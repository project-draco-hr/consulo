{
  if (e.getArea() != EditorMouseEventArea.EDITING_AREA) {
    closeAutoQuickDocComponentIfNecessary();
    return;
  }
  if (e.getMouseEvent().getModifiers() != 0) {
    return;
  }
  Editor editor=e.getEditor();
  Project project=editor.getProject();
  if (project == null) {
    return;
  }
  JFrame frame=myWindowManager.getFrame(project);
  if (frame != null && !frame.isFocused()) {
    return;
  }
  DocumentationManager documentationManager=DocumentationManager.getInstance(project);
  JBPopup hint=documentationManager.getDocInfoHint();
  if (hint != null) {
    WeakReference<DocumentationManager> ref=myDocumentationManager;
    if (ref == null || ref.get() == null) {
      return;
    }
    Point hintLocation=hint.getLocationOnScreen();
    Dimension hintSize=hint.getSize();
    int mouseX=e.getMouseEvent().getXOnScreen();
    int mouseY=e.getMouseEvent().getYOnScreen();
    if (mouseX >= hintLocation.x && mouseX <= hintLocation.x + hintSize.width && mouseY >= hintLocation.y && mouseY <= hintLocation.y + hintSize.height) {
      return;
    }
  }
  PsiFile psiFile=PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument());
  if (psiFile == null) {
    closeAutoQuickDocComponentIfNecessary();
    return;
  }
  int mouseOffset=editor.logicalPositionToOffset(editor.xyToLogicalPosition(e.getMouseEvent().getPoint()));
  PsiElement elementUnderMouse=psiFile.findElementAt(mouseOffset);
  if (elementUnderMouse == null || elementUnderMouse instanceof PsiWhiteSpace) {
    closeAutoQuickDocComponentIfNecessary();
    return;
  }
  PsiElement targetElementUnderMouse=documentationManager.findTargetElement(editor,mouseOffset,psiFile,elementUnderMouse);
  if (targetElementUnderMouse == null) {
    closeAutoQuickDocComponentIfNecessary();
    return;
  }
  PsiElement activeElement=myActiveElements.get(editor);
  if (targetElementUnderMouse.equals(activeElement) && (myAlarm.getActiveRequestCount() > 0 || hint != null)) {
    return;
  }
  closeAutoQuickDocComponentIfNecessary();
  myActiveElements.put(editor,targetElementUnderMouse);
  myDelayedQuickDocInfo=new DelayedQuickDocInfo(documentationManager,editor,targetElementUnderMouse,elementUnderMouse);
  myAlarm.cancelAllRequests();
  myAlarm.addRequest(myRequest,EditorSettingsExternalizable.getInstance().getQuickDocOnMouseOverElementDelayMillis());
}
