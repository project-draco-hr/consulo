{
  if (super.isModified())   return true;
  final RunManagerImpl runManager=getRunManager();
  final RunnerAndConfigurationSettingsImpl settings=runManager.getSelectedConfiguration();
  if (mySelectedConfigurable == null) {
    return settings != null;
  }
  if (settings == null || !Comparing.strEqual(mySelectedConfigurable.getConfiguration().getType().getId(),settings.getType().getId()) || (Comparing.strEqual(mySelectedConfigurable.getConfiguration().getType().getId(),settings.getType().getId()) && !Comparing.strEqual(mySelectedConfigurable.getNameText(),settings.getConfiguration().getName()))) {
    return true;
  }
  final RunConfiguration[] allConfigurations=runManager.getAllConfigurations();
  final Set<RunConfiguration> currentConfigurations=new HashSet<RunConfiguration>();
  for (int i=0; i < myRoot.getChildCount(); i++) {
    DefaultMutableTreeNode typeNode=(DefaultMutableTreeNode)myRoot.getChildAt(i);
    final RunnerAndConfigurationSettingsImpl[] configurationSettings=runManager.getConfigurationSettings((ConfigurationType)typeNode.getUserObject());
    if (configurationSettings.length != typeNode.getChildCount())     return true;
    for (int j=0; j < typeNode.getChildCount(); j++) {
      final Object userObject=((DefaultMutableTreeNode)typeNode.getChildAt(j)).getUserObject();
      if (userObject instanceof SingleConfigurationConfigurable) {
        SingleConfigurationConfigurable configurable=(SingleConfigurationConfigurable)userObject;
        if (!Comparing.strEqual(configurationSettings[j].getConfiguration().getName(),configurable.getConfiguration().getName()))         return true;
        if (configurable.isModified())         return true;
        currentConfigurations.add(configurable.getConfiguration());
      }
 else       if (userObject instanceof RunnerAndConfigurationSettingsImpl) {
        currentConfigurations.add(((RunnerAndConfigurationSettingsImpl)userObject).getConfiguration());
      }
    }
  }
  for (  RunConfiguration configuration : allConfigurations) {
    if (!currentConfigurations.contains(configuration))     return true;
  }
  return false;
}
