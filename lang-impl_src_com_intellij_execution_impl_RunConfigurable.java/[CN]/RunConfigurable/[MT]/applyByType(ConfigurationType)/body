{
  DefaultMutableTreeNode typeNode=getConfigurationTypeNode(type);
  final RunManagerImpl manager=getRunManager();
  final ArrayList<RunConfigurationBean> stableConfigurations=new ArrayList<RunConfigurationBean>();
  RunnerAndConfigurationSettingsImpl tempConfiguration=null;
  if (typeNode != null) {
    for (int i=0; i < typeNode.getChildCount(); i++) {
      final Object userObject=((DefaultMutableTreeNode)typeNode.getChildAt(i)).getUserObject();
      if (userObject instanceof SingleConfigurationConfigurable) {
        final SingleConfigurationConfigurable configurable=(SingleConfigurationConfigurable)userObject;
        final RunnerAndConfigurationSettingsImpl settings=(RunnerAndConfigurationSettingsImpl)configurable.getSettings();
        if (manager.isTemporary(settings)) {
          applyConfiguration(typeNode,configurable);
          tempConfiguration=settings;
        }
 else {
          stableConfigurations.add(new RunConfigurationBean(configurable));
        }
      }
 else       if (userObject instanceof RunnerAndConfigurationSettingsImpl) {
        RunnerAndConfigurationSettingsImpl settings=(RunnerAndConfigurationSettingsImpl)userObject;
        if (manager.isTemporary(settings)) {
          tempConfiguration=settings;
        }
 else {
          stableConfigurations.add(new RunConfigurationBean(settings,manager.isConfigurationShared(settings),manager.getStepsBeforeRun(settings.getConfiguration())));
        }
      }
    }
  }
  for (  RunConfigurationBean bean : stableConfigurations) {
    final SingleConfigurationConfigurable configurable=bean.getConfigurable();
    if (configurable != null) {
      applyConfiguration(typeNode,configurable);
    }
  }
  manager.removeConfigurations(type);
  for (  final RunConfigurationBean stableConfiguration : stableConfigurations) {
    manager.addConfiguration(stableConfiguration.getSettings(),stableConfiguration.isShared(),stableConfiguration.getStepsBeforeLaunch());
  }
  if (tempConfiguration != null) {
    manager.setTemporaryConfiguration(tempConfiguration);
  }
}
