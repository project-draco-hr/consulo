{
  super.visitClass(aClass);
  if (aClass.isInterface() || aClass.isEnum() || aClass.isAnnotationType()|| aClass.hasModifierProperty(PsiModifier.ABSTRACT)) {
    return;
  }
  if (aClass instanceof PsiTypeParameter || aClass instanceof PsiAnonymousClass) {
    return;
  }
  final PsiMethod[] methods=aClass.getMethods();
  for (  final PsiMethod method : methods) {
    if (isTest(method)) {
      return;
    }
  }
  if (!ClassUtils.isSubclass(aClass,"junit.framework.TestCase")) {
    return;
  }
  registerClassError(aClass);
}
