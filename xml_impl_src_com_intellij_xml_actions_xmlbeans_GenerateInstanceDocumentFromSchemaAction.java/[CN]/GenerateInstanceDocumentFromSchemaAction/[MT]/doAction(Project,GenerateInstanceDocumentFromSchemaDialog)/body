{
  FileDocumentManager.getInstance().saveAllDocuments();
  @NonNls List<String> parameters=new LinkedList<String>();
  final String url=dialog.getUrl().getText();
  final VirtualFile relativeFile=VfsUtil.findRelativeFile(ExternalResourceManager.getInstance().getResourceLocation(url),null);
  VirtualFile relativeFileDir;
  if (relativeFile == null) {
    Messages.showErrorDialog(project,XmlBundle.message("file.doesnt.exist",url),XmlBundle.message("error"));
    return;
  }
 else {
    relativeFileDir=relativeFile.getParent();
  }
  if (relativeFileDir == null) {
    Messages.showErrorDialog(project,XmlBundle.message("file.doesnt.exist",url),XmlBundle.message("error"));
    return;
  }
  if (!dialog.enableRestrictionCheck()) {
    parameters.add("-nopvr");
  }
  if (!dialog.enableUniquenessCheck()) {
    parameters.add("-noupa");
  }
  String pathToUse;
  try {
    final File tempDir=File.createTempFile("xsd2inst","");
    tempDir.delete();
    tempDir.mkdir();
    pathToUse=tempDir.getPath() + File.separatorChar + Xsd2InstanceUtils.processAndSaveAllSchemas((XmlFile)PsiManager.getInstance(project).findFile(relativeFile),new THashMap<String,String>(),new Xsd2InstanceUtils.SchemaReferenceProcessor(){
      public void processSchema(      String schemaFileName,      String schemaContent){
        try {
          final String fullFileName=tempDir.getPath() + File.separatorChar + schemaFileName;
          FileUtils.saveStreamContentAsFile(fullFileName,new StringBufferInputStream(schemaContent));
        }
 catch (        IOException e) {
          throw new RuntimeException(e);
        }
      }
    }
);
  }
 catch (  IOException e) {
    return;
  }
  parameters.add(pathToUse);
  parameters.add("-name");
  parameters.add(dialog.getElementName());
  String xml;
  try {
    xml=Xsd2InstanceUtils.generate(ArrayUtil.toStringArray(parameters));
  }
 catch (  IllegalArgumentException e) {
    Messages.showErrorDialog(project,StringUtil.getMessage(e),XmlBundle.message("error"));
    return;
  }
  final VirtualFile baseDirForCreatedInstanceDocument1=relativeFileDir;
  String xmlFileName=baseDirForCreatedInstanceDocument1.getPath() + File.separatorChar + dialog.getOutputFileName();
  FileOutputStream fileOutputStream=null;
  try {
    fileOutputStream=new FileOutputStream(xmlFileName);
    fileOutputStream.write(xml.getBytes());
    fileOutputStream.close();
    fileOutputStream=null;
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  final File xmlFile=new File(xmlFileName);
  VirtualFile virtualFile=ApplicationManager.getApplication().runWriteAction(new Computable<VirtualFile>(){
    @Nullable public VirtualFile compute(){
      return LocalFileSystem.getInstance().refreshAndFindFileByIoFile(xmlFile);
    }
  }
);
  FileEditorManager.getInstance(project).openFile(virtualFile,true);
}
