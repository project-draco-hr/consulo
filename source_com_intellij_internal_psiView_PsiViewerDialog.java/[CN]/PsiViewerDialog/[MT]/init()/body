{
  EditorFactory editorFactory=EditorFactory.getInstance();
  Document document=editorFactory.createDocument("");
  myEditor=editorFactory.createEditor(document,myProject);
  myEditor.getSettings().setFoldingOutlineShown(false);
  FileType[] fileTypes=FileTypeManager.getInstance().getRegisteredFileTypes();
  List<FileType> customFileTypes=new ArrayList<FileType>();
  for (int i=0; i < fileTypes.length; i++) {
    FileType fileType=fileTypes[i];
    if (fileType != StdFileTypes.GUI_DESIGNER_FORM && fileType != StdFileTypes.IDEA_MODULE && fileType != StdFileTypes.IDEA_PROJECT && fileType != StdFileTypes.IDEA_WORKSPACE && fileType != StdFileTypes.ARCHIVE && fileType != StdFileTypes.UNKNOWN && fileType != StdFileTypes.PLAIN_TEXT && !(fileType instanceof CustomFileType) && !fileType.isBinary() && !fileType.isReadOnly()) {
      customFileTypes.add(fileType);
    }
  }
  myFileTypes=customFileTypes.toArray(new FileType[customFileTypes.size()]);
  myFileTypeButtons=new JRadioButton[myFileTypes.length];
  ButtonGroup bg=new ButtonGroup();
  bg.add(myRbMethod);
  bg.add(myRbCodeBlock);
  bg.add(myRbExpression);
  Box choicesBox=Box.createHorizontalBox();
  for (int i=0; i < myFileTypes.length; i++) {
    FileType fileType=myFileTypes[i];
    JRadioButton button=new JRadioButton(fileType.getName() + " file");
    bg.add(button);
    choicesBox.add(button);
    myFileTypeButtons[i]=button;
  }
  myRbExpression.setSelected(true);
  myChoicesPanel.setLayout(new BorderLayout());
  myChoicesPanel.add(choicesBox,BorderLayout.CENTER);
  final ViewerTreeStructure treeStructure=(ViewerTreeStructure)myTreeBuilder.getTreeStructure();
  myShowWhiteSpacesBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      treeStructure.setShowWhiteSpaces(myShowWhiteSpacesBox.isSelected());
      myTreeBuilder.updateFromRoot();
    }
  }
);
  myTextPanel.setLayout(new BorderLayout());
  myTextPanel.add(myEditor.getComponent(),BorderLayout.CENTER);
  super.init();
}
