{
  UIUtil.putClientProperty(myComponent,EXPANDED_RENDERER,true);
  Pair<Component,Rectangle> rendererAndBounds=getCellRendererAndBounds(key);
  UIUtil.putClientProperty(myComponent,EXPANDED_RENDERER,null);
  if (rendererAndBounds == null)   return null;
  JComponent renderer=ObjectUtil.tryCast(rendererAndBounds.first,JComponent.class);
  if (renderer == null)   return null;
  if (UIUtil.isClientPropertyTrue(renderer,RENDERER_DISABLED))   return null;
  if (UIUtil.isClientPropertyTrue(rendererAndBounds.getFirst(),USE_RENDERER_BOUNDS)) {
    rendererAndBounds.getSecond().translate(renderer.getX(),renderer.getY());
    rendererAndBounds.getSecond().setSize(renderer.getSize());
  }
  myKeyItemBounds=rendererAndBounds.second;
  Rectangle cellBounds=myKeyItemBounds;
  Rectangle visibleRect=getVisibleRect(key);
  if (cellBounds.y < visibleRect.y)   return null;
  int cellMaxY=cellBounds.y + cellBounds.height;
  int visMaxY=visibleRect.y + visibleRect.height;
  if (cellMaxY > visMaxY)   return null;
  int cellMaxX=cellBounds.x + cellBounds.width;
  int visMaxX=visibleRect.x + visibleRect.width;
  Point location=new Point(visMaxX,cellBounds.y);
  SwingUtilities.convertPointToScreen(location,myComponent);
  Rectangle screen=getScreenRectangle(location);
  int borderWidth=isPaintBorder() ? 1 : 0;
  int width=Math.min(screen.width + screen.x - location.x - borderWidth,cellMaxX - visMaxX);
  int height=cellBounds.height;
  if (width <= 0 || height <= 0)   return null;
  Dimension size=getImageSize(width,height);
  myImage=UIUtil.createImage(size.width,size.height,BufferedImage.TYPE_INT_RGB);
  Graphics2D g=myImage.createGraphics();
  g.setClip(null);
  doFillBackground(height,width,g);
  g.translate(cellBounds.x - visMaxX,0);
  doPaintTooltipImage(renderer,cellBounds,g,key);
  CustomLineBorder border=null;
  if (borderWidth > 0) {
    border=new CustomLineBorder(getBorderColor(),borderWidth,0,borderWidth,borderWidth);
    location.y-=borderWidth;
    size.width+=borderWidth;
    size.height+=borderWidth + borderWidth;
  }
  g.dispose();
  myRendererPane.remove(renderer);
  myTipComponent.setBorder(border);
  myTipComponent.setPreferredSize(size);
  return location;
}
