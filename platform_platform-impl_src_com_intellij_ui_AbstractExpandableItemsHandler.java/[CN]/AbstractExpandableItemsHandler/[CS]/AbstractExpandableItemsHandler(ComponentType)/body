{
  myComponent=component;
  myComponent.add(myRendererPane);
  myComponent.validate();
  myPopup=new MovablePopup(myComponent,myTipComponent);
  MouseAdapter tipMouseAdapter=new MouseAdapter(){
    @Override public void mouseExited(    MouseEvent e){
      if (myComponent.getMousePosition() == null) {
        hideHint();
      }
    }
    @Override public void mouseWheelMoved(    MouseWheelEvent e){
      Point p=e.getLocationOnScreen();
      SwingUtilities.convertPointFromScreen(p,myComponent);
      myComponent.dispatchEvent(new MouseWheelEvent(myComponent,e.getID(),e.getWhen(),e.getModifiers(),p.x,p.y,e.getClickCount(),e.isPopupTrigger(),e.getScrollType(),e.getScrollAmount(),e.getWheelRotation()));
    }
    @Override public void mouseClicked(    MouseEvent e){
      Point p=e.getLocationOnScreen();
      SwingUtilities.convertPointFromScreen(p,myComponent);
      myComponent.dispatchEvent(new MouseEvent(myComponent,e.getID(),e.getWhen(),e.getModifiers(),p.x,p.y,e.getClickCount(),e.isPopupTrigger(),e.getButton()));
    }
    @Override public void mousePressed(    MouseEvent e){
      mouseClicked(e);
    }
    @Override public void mouseReleased(    MouseEvent e){
      mouseClicked(e);
    }
    @Override public void mouseMoved(    MouseEvent e){
      mouseClicked(e);
    }
    @Override public void mouseDragged(    MouseEvent e){
      mouseClicked(e);
    }
  }
;
  myTipComponent.addMouseListener(tipMouseAdapter);
  myTipComponent.addMouseWheelListener(tipMouseAdapter);
  myTipComponent.addMouseMotionListener(tipMouseAdapter);
  myComponent.addMouseListener(new MouseListener(){
    @Override public void mouseEntered(    MouseEvent e){
      handleMouseEvent(e);
    }
    @Override public void mouseExited(    MouseEvent e){
      if (myTipComponent.getMousePosition() == null) {
        hideHint();
      }
    }
    @Override public void mouseClicked(    MouseEvent e){
    }
    @Override public void mousePressed(    MouseEvent e){
      handleMouseEvent(e);
    }
    @Override public void mouseReleased(    MouseEvent e){
      handleMouseEvent(e);
    }
  }
);
  myComponent.addMouseMotionListener(new MouseMotionListener(){
    @Override public void mouseDragged(    MouseEvent e){
      handleMouseEvent(e);
    }
    @Override public void mouseMoved(    MouseEvent e){
      handleMouseEvent(e,false);
    }
  }
);
  myComponent.addFocusListener(new FocusAdapter(){
    @Override public void focusLost(    FocusEvent e){
      onFocusLost();
    }
    @Override public void focusGained(    FocusEvent e){
      updateCurrentSelection();
    }
  }
);
  myComponent.addComponentListener(new ComponentAdapter(){
    @Override public void componentHidden(    ComponentEvent e){
      hideHint();
    }
    @Override public void componentMoved(    ComponentEvent e){
      updateCurrentSelection();
    }
    @Override public void componentResized(    ComponentEvent e){
      updateCurrentSelection();
    }
  }
);
  myComponent.addHierarchyBoundsListener(new HierarchyBoundsAdapter(){
    @Override public void ancestorMoved(    HierarchyEvent e){
      updateCurrentSelection();
    }
    @Override public void ancestorResized(    HierarchyEvent e){
      updateCurrentSelection();
    }
  }
);
  myComponent.addHierarchyListener(new HierarchyListener(){
    @Override public void hierarchyChanged(    HierarchyEvent e){
      hideHint();
      myPopup.dispose();
    }
  }
);
}
