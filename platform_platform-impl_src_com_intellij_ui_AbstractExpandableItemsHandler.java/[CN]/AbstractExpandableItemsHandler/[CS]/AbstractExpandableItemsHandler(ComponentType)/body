{
  myComponent=component;
  myComponent.add(myRendererPane);
  myComponent.validate();
  myTipComponent=new TipComponent();
  myComponent.addMouseListener(new MouseListener(){
    @Override public void mouseEntered(    MouseEvent e){
      handleMouseEvent(e);
    }
    @Override public void mouseExited(    MouseEvent e){
      hideHint();
    }
    @Override public void mouseClicked(    MouseEvent e){
    }
    @Override public void mousePressed(    MouseEvent e){
      handleMouseEvent(e);
    }
    @Override public void mouseReleased(    MouseEvent e){
      handleMouseEvent(e);
    }
  }
);
  myComponent.addMouseMotionListener(new MouseMotionListener(){
    @Override public void mouseDragged(    MouseEvent e){
      handleMouseEvent(e);
    }
    @Override public void mouseMoved(    MouseEvent e){
      handleMouseEvent(e,false);
    }
  }
);
  myComponent.addFocusListener(new FocusAdapter(){
    @Override public void focusLost(    FocusEvent e){
      onFocusLost();
    }
    @Override public void focusGained(    FocusEvent e){
      updateCurrentSelection();
    }
  }
);
  myComponent.addComponentListener(new ComponentAdapter(){
    @Override public void componentHidden(    ComponentEvent e){
      hideHint();
    }
    @Override public void componentMoved(    ComponentEvent e){
      updateCurrentSelection();
    }
    @Override public void componentResized(    ComponentEvent e){
      updateCurrentSelection();
    }
  }
);
  myComponent.addHierarchyBoundsListener(new HierarchyBoundsAdapter(){
    @Override public void ancestorMoved(    HierarchyEvent e){
      updateCurrentSelection();
    }
    @Override public void ancestorResized(    HierarchyEvent e){
      updateCurrentSelection();
    }
  }
);
  myComponent.addHierarchyListener(new HierarchyListener(){
    @Override public void hierarchyChanged(    HierarchyEvent e){
      hideHint();
    }
  }
);
}
