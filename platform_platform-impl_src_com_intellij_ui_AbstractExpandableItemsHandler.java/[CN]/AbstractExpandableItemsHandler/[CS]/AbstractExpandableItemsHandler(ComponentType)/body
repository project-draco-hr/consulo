{
  myComponent=component;
  myComponent.add(myRendererPane);
  myComponent.validate();
  myPopup=new MovablePopup(myComponent,myTipComponent);
  MouseEventHandler dispatcher=new MouseEventHandler(){
    @Override protected void handle(    MouseEvent event){
      myComponent.dispatchEvent(MouseEventAdapter.convert(event,myComponent));
    }
    @Override public void mouseEntered(    MouseEvent event){
    }
    @Override public void mouseExited(    MouseEvent event){
      if (myComponent.getMousePosition() == null) {
        hideHint();
      }
    }
  }
;
  myTipComponent.addMouseListener(dispatcher);
  myTipComponent.addMouseMotionListener(dispatcher);
  myTipComponent.addMouseWheelListener(dispatcher);
  MouseEventHandler handler=new MouseEventHandler(){
    @Override protected void handle(    MouseEvent event){
      handleMouseEvent(event,MouseEvent.MOUSE_MOVED != event.getID());
    }
    @Override public void mouseClicked(    MouseEvent event){
    }
    @Override public void mouseExited(    MouseEvent event){
      if (myTipComponent.getMousePosition() == null) {
        hideHint();
      }
    }
  }
;
  myComponent.addMouseListener(handler);
  myComponent.addMouseMotionListener(handler);
  myComponent.addFocusListener(new FocusAdapter(){
    @Override public void focusLost(    FocusEvent e){
      onFocusLost();
    }
    @Override public void focusGained(    FocusEvent e){
      updateCurrentSelection();
    }
  }
);
  myComponent.addComponentListener(new ComponentAdapter(){
    @Override public void componentHidden(    ComponentEvent e){
      hideHint();
    }
    @Override public void componentMoved(    ComponentEvent e){
      updateCurrentSelection();
    }
    @Override public void componentResized(    ComponentEvent e){
      updateCurrentSelection();
    }
  }
);
  myComponent.addHierarchyBoundsListener(new HierarchyBoundsAdapter(){
    @Override public void ancestorMoved(    HierarchyEvent e){
      updateCurrentSelection();
    }
    @Override public void ancestorResized(    HierarchyEvent e){
      updateCurrentSelection();
    }
  }
);
  myComponent.addHierarchyListener(new HierarchyListener(){
    @Override public void hierarchyChanged(    HierarchyEvent e){
      hideHint();
    }
  }
);
}
