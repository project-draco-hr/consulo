{
  final AlienDirtyScope dirtyScope=new AlienDirtyScope();
  if (myMergeTarget != null) {
    dirtyScope.addDir(myMergeTarget);
  }
 else {
    UpdateFilesHelper.iterateFileGroupFiles(myAccomulatedFiles.getUpdatedFiles(),new UpdateFilesHelper.Callback(){
      public void onFile(      final String filePath,      final String groupId){
        final FilePath file=FilePathImpl.create(new File(filePath));
        dirtyScope.addFile(file);
      }
    }
);
  }
  final SvnChangeProvider provider=new SvnChangeProvider(myVcs);
  final GatheringChangelistBuilder clb=new GatheringChangelistBuilder(myProject,myAccomulatedFiles,myMergeTarget == null ? null : myMergeTarget.getVirtualFile());
  try {
    provider.getChanges(dirtyScope,clb,ProgressManager.getInstance().getProgressIndicator(),null);
  }
 catch (  VcsException e) {
    Messages.showErrorDialog(SvnBundle.message("action.Subversion.integrate.changes.error.unable.to.collect.changes.text",e.getMessage()),SvnBundle.message("action.Subversion.integrate.changes.alien.commit.changelist.title"));
    return;
  }
  if (!clb.getChanges().isEmpty()) {
    CommitChangeListDialog.commitAlienChanges(myProject,clb.getChanges(),myVcs,myMerger.getComment(),myMerger.getComment());
  }
}
