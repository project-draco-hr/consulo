{
  final VcsDirtyScopeImpl dirtyScope=new VcsDirtyScopeImpl(myVcs,myProject);
  UpdateFilesHelper.iterateFileGroupFiles(myAccomulatedFiles.getUpdatedFiles(),new UpdateFilesHelper.Callback(){
    public void onFile(    final String filePath,    final String groupId){
      final FilePath file=FilePathImpl.create(new File(filePath));
      dirtyScope.addDirtyFile(file);
    }
  }
);
  if (myMergeTarget != null) {
    dirtyScope.addDirtyFile(myMergeTarget);
  }
  final SvnChangeProvider provider=new SvnChangeProvider(myVcs);
  final GatheringChangelistBuilder clb=new GatheringChangelistBuilder();
  try {
    provider.getChanges(dirtyScope,clb,ProgressManager.getInstance().getProgressIndicator());
  }
 catch (  VcsException e) {
    Messages.showErrorDialog(SvnBundle.message("action.Subversion.integrate.changes.error.unable.to.collect.changes.text",e.getMessage()),SvnBundle.message("action.Subversion.integrate.changes.alien.commit.changelist.title"));
    return;
  }
  if (!clb.getChanges().isEmpty()) {
    CommitChangeListDialog.commitAlienChanges(myProject,clb.getChanges(),myVcs,SvnBundle.message("action.Subversion.integrate.changes.alien.commit.changelist.title"),myMerger.getComment());
  }
}
