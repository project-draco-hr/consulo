{
  final Collection<FilePath> files=new ArrayList<FilePath>();
  UpdateFilesHelper.iterateFileGroupFiles(myAccomulatedFiles.getUpdatedFiles(),new UpdateFilesHelper.Callback(){
    public void onFile(    final String filePath,    final String groupId){
      final FilePath file=FilePathImpl.create(new File(filePath));
      files.add(file);
    }
  }
);
  if (myMergeTarget != null) {
    files.add(myMergeTarget);
  }
  final ChangeListManager clManager=ChangeListManager.getInstance(myProject);
  clManager.invokeAfterUpdate(new Runnable(){
    public void run(){
      final Collection<Change> changes=new ArrayList<Change>();
      for (      FilePath file : files) {
        final Change change=clManager.getChange(file);
        if (change != null) {
          changes.add(change);
        }
      }
      CommitChangeListDialog.commitChanges(myProject,changes,null,null,myMerger.getComment());
      prepareAndShowResults();
    }
  }
,InvokeAfterUpdateMode.SYNCHRONOUS_CANCELLABLE,SvnBundle.message("action.Subversion.integrate.changes.messages.title"),new Consumer<VcsDirtyScopeManager>(){
    public void consume(    final VcsDirtyScopeManager vcsDirtyScopeManager){
      vcsDirtyScopeManager.filePathsDirty(files,null);
    }
  }
,null);
}
