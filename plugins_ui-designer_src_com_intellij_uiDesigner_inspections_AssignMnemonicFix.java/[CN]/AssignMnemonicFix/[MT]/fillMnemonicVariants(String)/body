{
  final StringBuffer usedMnemonics=new StringBuffer();
  RadContainer container=myComponent.getParent();
  if (container != null) {
    while (container.getParent() != null) {
      container=container.getParent();
    }
    FormEditingUtil.iterate(container,new FormEditingUtil.ComponentVisitor(){
      public boolean visit(      final IComponent component){
        SupportCode.TextWithMnemonic twm=DuplicateMnemonicInspection.getTextWithMnemonic(myEditor.getModule(),component);
        if (twm != null) {
          usedMnemonics.append(twm.getMnemonicChar());
        }
        return true;
      }
    }
);
  }
  ArrayList<String> variants=new ArrayList<String>();
  for (int i=0; i < value.length(); i++) {
    final char ch=value.charAt(i);
    if (i == 0 || Character.isUpperCase(ch) || (i > 0 && value.charAt(i - 1) == ' ')) {
      if (Character.isLetter(ch) && usedMnemonics.indexOf(String.valueOf(ch).toUpperCase()) < 0) {
        variants.add(value.substring(0,i) + "&" + value.substring(i));
      }
    }
  }
  if (variants.size() == 0) {
    for (int i=0; i < value.length(); i++) {
      final char ch=value.charAt(i);
      if (Character.isLetter(ch) && usedMnemonics.indexOf(String.valueOf(ch).toUpperCase()) < 0) {
        variants.add(value.substring(0,i) + "&" + value.substring(i));
      }
    }
  }
  if (variants.size() == 0) {
    variants.add(value);
  }
  return ArrayUtil.toStringArray(variants);
}
