{
  myWarnings=new ArrayList<String>();
  final FileDocumentManager fileDocumentManager=FileDocumentManager.getInstance();
  Document document=fileDocumentManager.getDocument(file);
  if (document != null) {
    fileDocumentManager.saveDocument(document);
  }
  myLocal=LoadTextUtil.loadText(file);
  final List<PatchHunk> hunks=patch.getHunks();
  if (provider != null) {
    try {
      provider.getBaseVersionContent(pathBeforeRename,new Processor<CharSequence>(){
        public boolean process(        final CharSequence text){
          final GenericPatchApplier applier=new GenericPatchApplier(text,hunks);
          if (!applier.execute()) {
            return true;
          }
          myBase=text;
          setPatched(applier.getAfter());
          return false;
        }
      }
,myWarnings);
    }
 catch (    VcsException e) {
      myWarnings.add(e.getMessage());
    }
    myBaseRevisionLoaded=myPatched != null;
    if (myBaseRevisionLoaded)     return;
  }
  CharSequence contents=baseContents.get();
  if (contents != null) {
    contents=StringUtil.convertLineSeparators(contents.toString());
    myBase=contents;
    myBaseRevisionLoaded=true;
    final GenericPatchApplier applier=new GenericPatchApplier(contents,hunks);
    if (!applier.execute()) {
      applier.trySolveSomehow();
    }
    setPatched(applier.getAfter());
    return;
  }
  final GenericPatchApplier applier=new GenericPatchApplier(myLocal,hunks);
  if (!applier.execute()) {
    applier.trySolveSomehow();
  }
  setPatched(applier.getAfter());
}
