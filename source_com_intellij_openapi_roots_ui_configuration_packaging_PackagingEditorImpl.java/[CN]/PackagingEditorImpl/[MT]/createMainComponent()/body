{
  myMainPanel.setMinimumSize(new Dimension(-1,250));
  myRoot=new RootNode();
  myTreeModel=new DefaultTreeModel(myRoot);
  myTree=new Tree(myTreeModel){
    @Override public String getToolTipText(    final MouseEvent event){
      TreePath path=myTree.getPathForLocation(event.getX(),event.getY());
      if (path != null) {
        return ((PackagingTreeNode)path.getLastPathComponent()).getTooltipText();
      }
      return super.getToolTipText();
    }
  }
;
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(true);
  myTree.setCellRenderer(new PackagingTreeCellRenderer());
  myTreePanel.add(ScrollPaneFactory.createScrollPane(myTree),BorderLayout.CENTER);
  new TreeSpeedSearch(myTree,SPEED_SEARCH_CONVERTOR,true);
  myTree.addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    final TreeSelectionEvent e){
      updateButtons();
    }
  }
);
  myTree.addMouseListener(new PackagingTreeMouseListener());
  DefaultActionGroup actionGroup=new DefaultActionGroup();
  actionGroup.add(new MyNavigateAction());
  actionGroup.add(new MyFindUsagesAction());
  actionGroup.add(Separator.getInstance());
  CommonActionsManager actionsManager=CommonActionsManager.getInstance();
  DefaultTreeExpander treeExpander=new DefaultTreeExpander(myTree);
  actionGroup.add(actionsManager.createExpandAllAction(treeExpander,myTree));
  actionGroup.add(actionsManager.createCollapseAllAction(treeExpander,myTree));
  PopupHandler.installPopupHandler(myTree,actionGroup,ActionPlaces.UNKNOWN,ActionManager.getInstance());
  TreeToolTipHandler.install(myTree);
  ToolTipManager.sharedInstance().registerComponent(myTree);
  rebuildTree();
  TreeUtil.expandAll(myTree);
  updateButtons();
  return myMainPanel;
}
