{
  myRoot=new RootNode();
  myTreeModel=new DefaultTreeModel(myRoot);
  myTree=new Tree(myTreeModel);
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(true);
  myTree.setCellRenderer(new PackagingTreeCellRenderer());
  myTreePanel.add(ScrollPaneFactory.createScrollPane(myTree),BorderLayout.CENTER);
  new TreeSpeedSearch(myTree,SPEED_SEARCH_CONVERTOR,true);
  myTree.addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    final TreeSelectionEvent e){
      updateButtons();
    }
  }
);
  myTree.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    final MouseEvent e){
      if (e.getClickCount() == 2) {
        PackagingTreeNode[] nodes=myTree.getSelectedNodes(PackagingTreeNode.class,null);
        if (nodes.length == 1) {
          PackagingTreeNode node=nodes[0];
          if (node.getChildren().isEmpty()) {
            ContainerElement element=node.getContainerElement();
            if (element != null && node.getOwner() == null) {
              editElement(element);
            }
          }
        }
      }
    }
  }
);
  DefaultActionGroup actionGroup=new DefaultActionGroup();
  actionGroup.add(new MyNavigateAction());
  actionGroup.add(new MyFindUsagesAction());
  actionGroup.add(Separator.getInstance());
  CommonActionsManager actionsManager=CommonActionsManager.getInstance();
  DefaultTreeExpander treeExpander=new DefaultTreeExpander(myTree);
  actionGroup.add(actionsManager.createExpandAllAction(treeExpander,myTree));
  actionGroup.add(actionsManager.createCollapseAllAction(treeExpander,myTree));
  PopupHandler.installPopupHandler(myTree,actionGroup,ActionPlaces.UNKNOWN,ActionManager.getInstance());
  rebuildTree();
  TreeUtil.expandAll(myTree);
  updateButtons();
  return myMainPanel;
}
