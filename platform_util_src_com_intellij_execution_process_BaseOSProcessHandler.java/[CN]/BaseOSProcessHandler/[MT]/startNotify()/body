{
  if (myCommandLine != null) {
    notifyTextAvailable(myCommandLine + '\n',ProcessOutputTypes.SYSTEM);
  }
  addProcessListener(new ProcessAdapter(){
    @Override public void startNotified(    final ProcessEvent event){
      try {
        final BaseOutputReader stdoutReader=new BaseOutputReader(createProcessOutReader()){
          @Override protected void onTextAvailable(          @NotNull String text){
            notifyTextAvailable(text,ProcessOutputTypes.STDOUT);
          }
          @Override protected Future<?> executeOnPooledThread(          Runnable runnable){
            return BaseOSProcessHandler.this.executeOnPooledThread(runnable);
          }
        }
;
        final BaseOutputReader stderrReader=new BaseOutputReader(createProcessErrReader()){
          @Override protected void onTextAvailable(          @NotNull String text){
            notifyTextAvailable(text,ProcessOutputTypes.STDERR);
          }
          @Override protected Future<?> executeOnPooledThread(          Runnable runnable){
            return BaseOSProcessHandler.this.executeOnPooledThread(runnable);
          }
        }
;
        myWaitFor.setTerminationCallback(new Consumer<Integer>(){
          @Override public void consume(          Integer exitCode){
            try {
              stderrReader.stop();
              stdoutReader.stop();
              try {
                stderrReader.waitFor();
                stdoutReader.waitFor();
              }
 catch (              InterruptedException ignore) {
              }
            }
  finally {
              onOSProcessTerminated(exitCode);
            }
          }
        }
);
      }
  finally {
        removeProcessListener(this);
      }
    }
  }
);
  super.startNotify();
}
