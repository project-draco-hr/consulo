{
  final OutputReader stdoutReader=new OutputReader(createProcessOutReader()){
    protected void onTextAvailable(    @NotNull String text){
      notifyTextAvailable(text,ProcessOutputTypes.STDOUT);
    }
    @Override protected Future<?> executeOnPooledThread(    Runnable runnable){
      return BaseOSProcessHandler.this.executeOnPooledThread(runnable);
    }
  }
;
  final OutputReader stderrReader=new OutputReader(createProcessErrReader()){
    protected void onTextAvailable(    @NotNull String text){
      notifyTextAvailable(text,ProcessOutputTypes.STDERR);
    }
    @Override protected Future<?> executeOnPooledThread(    Runnable runnable){
      return BaseOSProcessHandler.this.executeOnPooledThread(runnable);
    }
  }
;
  if (myCommandLine != null) {
    notifyTextAvailable(myCommandLine + '\n',ProcessOutputTypes.SYSTEM);
  }
  addProcessListener(new ProcessAdapter(){
    public void startNotified(    final ProcessEvent event){
      try {
        myWaitFor.setTerminationCallback(new Consumer<Integer>(){
          @Override public void consume(          Integer exitCode){
            try {
              stderrReader.stop();
              stdoutReader.stop();
              try {
                stderrReader.waitFor();
                stdoutReader.waitFor();
              }
 catch (              InterruptedException ignore) {
              }
            }
  finally {
              onOSProcessTerminated(exitCode);
            }
          }
        }
);
      }
  finally {
        removeProcessListener(this);
      }
    }
  }
);
  super.startNotify();
}
