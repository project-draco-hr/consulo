{
  TemplateManager manager=TemplateManager.getInstance(myContainerElement.getProject());
  final Template template=manager.createTemplate("","");
  String text=myContainerElement.getText();
  final int containerStart=myContainerElement.getTextRange().getStartOffset();
  int start=0;
  for (  final PsiElement element : myElements) {
    int offset=element.getTextRange().getStartOffset() - containerStart;
    template.addTextSegment(text.substring(start,offset));
    if (element == mySelection) {
      template.addSelectionStartVariable();
      template.addTextSegment(mySelection.getText());
      template.addSelectionEndVariable();
    }
 else     if (element == myEndElement) {
      template.addEndVariable();
      start=offset;
      continue;
    }
 else {
      final boolean alwaysStopAt=myAlwaysStopAtMap.get(element) == null ? true : myAlwaysStopAtMap.get(element).booleanValue();
      final Expression expression=myExpressions.get(element);
      final String variableName=myVariableNamesMap.get(element) == null ? String.valueOf(expression.hashCode()) : myVariableNamesMap.get(element);
      if (expression != null) {
        template.addVariable(variableName,expression,expression,alwaysStopAt);
      }
 else {
        template.addVariableSegment(variableName);
      }
    }
    start=element.getTextRange().getEndOffset() - containerStart;
  }
  template.addTextSegment(text.substring(start));
  for (  PsiElement element : myElements) {
    final String dependantVariable=myVariableExpressions.get(element);
    if (dependantVariable != null) {
      final boolean alwaysStopAt=myAlwaysStopAtMap.get(element) == null ? true : myAlwaysStopAtMap.get(element).booleanValue();
      final Expression expression=myExpressions.get(element);
      final String variableName=myVariableNamesMap.get(element) == null ? String.valueOf(expression.hashCode()) : myVariableNamesMap.get(element);
      template.addVariable(variableName,dependantVariable,dependantVariable,alwaysStopAt);
    }
  }
  template.setToIndent(false);
  template.setToReformat(false);
  return template;
}
