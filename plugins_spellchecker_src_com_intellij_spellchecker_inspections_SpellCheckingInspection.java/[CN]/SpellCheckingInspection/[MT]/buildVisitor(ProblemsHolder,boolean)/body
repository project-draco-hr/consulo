{
  final SpellCheckerManager manager=SpellCheckerManager.getInstance(holder.getProject());
  return new PsiElementVisitor(){
    private final NamesValidator[] NAMES_VALIDATORS=getNamesValidators();
{
      ensureFactoriesAreLoaded();
    }
    @Override public void visitElement(    final PsiElement element){
      final ASTNode node=element.getNode();
      if (node == null) {
        return;
      }
      final Language language=element.getLanguage();
      final IElementType elementType=node.getElementType();
      final ParserDefinition parserDefinition=LanguageParserDefinitions.INSTANCE.forLanguage(language);
      if (parserDefinition != null) {
        if (parserDefinition.getStringLiteralElements().contains(elementType)) {
          if (!processLiterals) {
            return;
          }
        }
 else         if (parserDefinition.getCommentTokens().contains(elementType)) {
          if (!processComments) {
            return;
          }
        }
 else         if (!processCode) {
          return;
        }
      }
      @SuppressWarnings({"unchecked"}) final Token[] tokens=tokenize(element,language);
      if (tokens == null)       return;
      Set<String> alreadyChecked=new THashSet<String>();
      for (      Token token : tokens) {
        inspect(token,holder,isOnTheFly,alreadyChecked,manager,NAMES_VALIDATORS);
      }
    }
  }
;
}
