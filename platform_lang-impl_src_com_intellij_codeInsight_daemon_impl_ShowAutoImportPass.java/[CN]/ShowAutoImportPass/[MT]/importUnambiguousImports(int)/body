{
  if (!DaemonCodeAnalyzerSettings.getInstance().isImportHintEnabled())   return;
  if (!DaemonCodeAnalyzer.getInstance(myProject).isImportHintsEnabled(myFile))   return;
  if (!CodeInsightSettings.getInstance().ADD_UNAMBIGIOUS_IMPORTS_ON_THE_FLY)   return;
  Document document=getDocument();
  final List<HighlightInfo> infos=new ArrayList<HighlightInfo>();
  DaemonCodeAnalyzerImpl.processHighlights(document,myProject,null,0,document.getTextLength(),new Processor<HighlightInfo>(){
    @Override public boolean process(    HighlightInfo info){
      if (!info.hasHint() || info.getSeverity() != HighlightSeverity.ERROR) {
        return true;
      }
      PsiReference reference=myFile.findReferenceAt(info.getActualStartOffset());
      if (reference != null && reference.getElement().getTextRange().containsOffset(caretOffset))       return true;
      infos.add(info);
      return true;
    }
  }
);
  ReferenceImporter[] importers=Extensions.getExtensions(ReferenceImporter.EP_NAME);
  for (  HighlightInfo info : infos) {
    for (    ReferenceImporter importer : importers) {
      if (importer.autoImportReferenceAt(myEditor,myFile,info.getActualStartOffset()))       break;
    }
  }
}
