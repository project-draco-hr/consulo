{
  final SliceLeafAnalyzer.SliceNodeGuide guide=new SliceLeafAnalyzer.SliceNodeGuide(treeStructure);
  WalkingState<SliceNode> walkingState=new WalkingState<SliceNode>(guide){
    @Override public void visit(    @NotNull SliceNode element){
      element.calculateDupNode();
      node(element,map).clear();
      SliceNode duplicate=element.getDuplicate();
      if (duplicate != null) {
        node(element,map).add(node(duplicate,map));
      }
 else {
        SliceUsage sliceUsage=element.getValue();
        final PsiElement value=sliceUsage.getElement();
        DfaUtil.Nullness nullness=ApplicationManager.getApplication().runReadAction(new Computable<DfaUtil.Nullness>(){
          public DfaUtil.Nullness compute(){
            return checkNullness(value);
          }
        }
);
        if (nullness == DfaUtil.Nullness.NULL) {
          group(element,map,NullAnalysisResult.NULLS).add(value);
        }
 else         if (nullness == DfaUtil.Nullness.NOT_NULL) {
          group(element,map,NullAnalysisResult.NOT_NULLS).add(value);
        }
 else {
          Collection<? extends AbstractTreeNode> children=element.getChildren();
          if (children.isEmpty()) {
            group(element,map,NullAnalysisResult.UNKNOWNS).add(value);
          }
          super.visit(element);
        }
      }
    }
    @Override public void elementFinished(    @NotNull SliceNode element){
      SliceNode parent=guide.getParent(element);
      if (parent != null) {
        node(parent,map).add(node(element,map));
      }
    }
  }
;
  walkingState.visit(root);
  return node(root,map);
}
