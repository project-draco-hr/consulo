{
  Object wasDisposed=getDisposalInfo(parent);
  if (wasDisposed != null) {
    throw new IncorrectOperationException("Sorry but parent: " + parent + " has already been disposed "+ "(see the cause for stacktrace) so the child: "+ child+ " will never be disposed",wasDisposed instanceof Throwable ? (Throwable)wasDisposed : null);
  }
synchronized (treeLock) {
    myDisposedObjects.remove(child);
    ObjectNode<T> parentNode=getNode(parent);
    if (parentNode == null)     parentNode=createNodeFor(parent,null);
    ObjectNode<T> childNode=getNode(child);
    if (childNode == null) {
      childNode=createNodeFor(child,parentNode);
    }
 else {
      ObjectNode<T> oldParent=childNode.getParent();
      if (oldParent != null) {
        oldParent.removeChild(childNode);
      }
    }
    myRootObjects.remove(child);
    checkWasNotAddedAlready(parentNode,childNode);
    parentNode.addChild(childNode);
    fireRegistered(childNode.getObject());
  }
}
