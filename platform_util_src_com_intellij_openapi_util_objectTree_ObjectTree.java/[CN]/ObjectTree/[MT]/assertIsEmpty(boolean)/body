{
synchronized (treeLock) {
    for (    T object : myRootObjects) {
      if (object == null)       continue;
      ObjectNode<T> objectNode=getNode(object);
      if (objectNode == null)       continue;
      while (objectNode.getParent() != null) {
        objectNode=objectNode.getParent();
      }
      final Throwable trace=objectNode.getTrace();
      RuntimeException exception=new RuntimeException("Memory leak detected: " + object + " of class "+ object.getClass()+ "\nSee the cause for the corresponding Disposer.register() stacktrace:\n",trace);
      if (throwError) {
        throw exception;
      }
      LOG.error(exception);
    }
  }
}
