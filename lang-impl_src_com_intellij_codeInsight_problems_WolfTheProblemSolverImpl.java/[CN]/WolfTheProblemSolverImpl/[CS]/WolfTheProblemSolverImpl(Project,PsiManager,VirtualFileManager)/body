{
  myProject=project;
  myChangeListener=new PsiTreeChangeAdapter(){
    public void childAdded(    PsiTreeChangeEvent event){
      childrenChanged(event);
    }
    public void childRemoved(    PsiTreeChangeEvent event){
      childrenChanged(event);
    }
    public void childReplaced(    PsiTreeChangeEvent event){
      childrenChanged(event);
    }
    public void childMoved(    PsiTreeChangeEvent event){
      childrenChanged(event);
    }
    public void propertyChanged(    PsiTreeChangeEvent event){
      childrenChanged(event);
    }
    public void childrenChanged(    PsiTreeChangeEvent event){
      clearSyntaxErrorFlag(event);
    }
  }
;
  psiManager.addPsiTreeChangeListener(myChangeListener);
  virtualFileManager.addVirtualFileListener(myVirtualFileListener);
  FileStatusManager fileStatusManager=FileStatusManager.getInstance(myProject);
  if (fileStatusManager != null) {
    fileStatusManager.addFileStatusListener(new FileStatusListener(){
      public void fileStatusesChanged(){
        clearInvalidFiles();
      }
      public void fileStatusChanged(      @NotNull VirtualFile virtualFile){
        fileStatusesChanged();
      }
    }
);
  }
}
