{
  final Project project=CommonDataKeys.PROJECT.getData(e.getDataContext());
  if (project == null) {
    e.getPresentation().setEnabled(false);
    return;
  }
  final List<ProjectSystemId> systemIds=getSystemIds(e);
  if (systemIds.isEmpty()) {
    e.getPresentation().setEnabled(false);
    return;
  }
  final String name=StringUtil.join(systemIds,new Function<ProjectSystemId,String>(){
    @Override public String fun(    ProjectSystemId projectSystemId){
      return projectSystemId.getReadableName();
    }
  }
,",");
  e.getPresentation().setText(ExternalSystemBundle.message("action.refresh.all.projects.text",name));
  e.getPresentation().setDescription(ExternalSystemBundle.message("action.refresh.all.projects.description",name));
  ExternalSystemProcessingManager processingManager=ServiceManager.getService(ExternalSystemProcessingManager.class);
  e.getPresentation().setEnabled(!processingManager.hasTaskOfTypeInProgress(ExternalSystemTaskType.RESOLVE_PROJECT,project));
}
