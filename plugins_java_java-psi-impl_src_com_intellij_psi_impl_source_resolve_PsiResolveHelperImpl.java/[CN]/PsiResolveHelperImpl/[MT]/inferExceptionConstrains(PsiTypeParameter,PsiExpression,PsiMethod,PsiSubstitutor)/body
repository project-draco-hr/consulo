{
  final PsiClassType[] declaredExceptions=method.getThrowsList().getReferencedTypes();
  for (  PsiClassType exception : declaredExceptions) {
    final PsiType substitute=substitutor.substitute(exception);
    if (PsiUtil.resolveClassInType(substitute) == typeParameter) {
      if (expression instanceof PsiLambdaExpression) {
        final PsiElement body=((PsiLambdaExpression)expression).getBody();
        if (body != null) {
          final List<PsiClassType> unhandledExceptions=ExceptionUtil.getUnhandledExceptions(body);
          if (unhandledExceptions.isEmpty()) {
            return inferUncheckedException(typeParameter,exception,method);
          }
        }
      }
 else       if (expression instanceof PsiMethodReferenceExpression) {
        final PsiElement resolve=((PsiMethodReferenceExpression)expression).resolve();
        if (resolve instanceof PsiMethod) {
          final PsiClassType[] declaredThrowsList=((PsiMethod)resolve).getThrowsList().getReferencedTypes();
          for (          PsiClassType psiClassType : declaredThrowsList) {
            if (!ExceptionUtil.isUncheckedException(psiClassType))             return null;
          }
          return inferUncheckedException(typeParameter,exception,method);
        }
      }
      break;
    }
  }
  return null;
}
