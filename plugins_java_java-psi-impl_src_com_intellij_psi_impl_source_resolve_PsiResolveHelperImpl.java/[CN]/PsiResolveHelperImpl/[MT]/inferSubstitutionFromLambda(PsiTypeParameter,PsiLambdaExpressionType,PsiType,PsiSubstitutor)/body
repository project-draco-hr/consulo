{
  final PsiLambdaExpression lambdaExpression=arg.getExpression();
  if (PsiUtil.getLanguageLevel(lambdaExpression).isAtLeast(LanguageLevel.JDK_1_8)) {
    final PsiElement parent=PsiUtil.skipParenthesizedExprUp(lambdaExpression.getParent());
    if (parent instanceof PsiExpressionList) {
      final PsiExpressionList expressionList=(PsiExpressionList)parent;
      final Map<PsiElement,Pair<PsiMethod,PsiSubstitutor>> methodMap=MethodCandidateInfo.CURRENT_CANDIDATE.get();
      final Pair<PsiMethod,PsiSubstitutor> pair=methodMap != null ? methodMap.get(expressionList) : null;
      if (pair != null) {
        final int i=LambdaUtil.getLambdaIdx(expressionList,lambdaExpression);
        if (i < 0)         return null;
        final PsiParameter[] parameters=pair.first.getParameterList().getParameters();
        if (parameters.length <= i)         return null;
        final PsiSubstitutor combinedSubst=pair.second.putAll(partialSubstitutor);
        methodMap.put(expressionList,Pair.create(pair.first,combinedSubst));
        return inferConstraintFromFunctionalInterfaceMethod(typeParam,lambdaExpression,combinedSubst.substitute(parameters[i].getType()),lowerBound);
      }
    }
 else {
      return inferConstraintFromFunctionalInterfaceMethod(typeParam,lambdaExpression,partialSubstitutor.substitute(lambdaExpression.getFunctionalInterfaceType()),lowerBound);
    }
  }
  return null;
}
