{
  if (myXmlIndex == null) {
    myXmlIndex=CachedValuesManager.getManager(myProject).createCachedValue(new CachedValueProvider<Collection<String>>(){
      public Result<Collection<String>> compute(){
        final Collection<String> result=new THashSet<String>();
        final PatternBasedInjectionHelper helper=new PatternBasedInjectionHelper(JavaLanguageInjectionSupport.JAVA_SUPPORT_ID){
          @Override protected void preInvoke(          Object target,          String methodName,          Object[] arguments){
            if (arguments.length == 1 && arguments[0] instanceof String) {
              if ("withName".equals(methodName)) {
                result.add((String)arguments[0]);
              }
 else               if ("definedInClass".equals(methodName)) {
                result.add(StringUtil.getShortName((Class)arguments[0]));
              }
            }
          }
        }
;
        for (        BaseInjection injection : myConfiguration.getInjections(JavaLanguageInjectionSupport.JAVA_SUPPORT_ID)) {
          for (          InjectionPlace place : injection.getInjectionPlaces()) {
            if (!place.isEnabled())             continue;
            try {
              helper.compileElementPattern(place.getText());
            }
 catch (            Exception e) {
            }
          }
        }
        final Result<Collection<String>> r=new Result<Collection<String>>(result,myConfiguration);
        r.setLockValue(true);
        return r;
      }
    }
,false);
  }
  return myXmlIndex.getValue();
}
