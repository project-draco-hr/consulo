{
  final Language language=InjectedLanguage.findLanguageById(injection.getInjectedLanguageId());
  if (language == null)   return;
  final boolean separateFiles=!injection.isSingleFile() && StringUtil.isNotEmpty(injection.getValuePattern());
  final Ref<Boolean> unparsableRef=Ref.create(myUnparsable);
  final List<Object> objects=ContextComputationProcessor.collectOperands(injection.getPrefix(),injection.getSuffix(),unparsableRef,myOperands);
  if (objects.isEmpty())   return;
  final List<Trinity<PsiLanguageInjectionHost,InjectedLanguage,TextRange>> result=new ArrayList<Trinity<PsiLanguageInjectionHost,InjectedLanguage,TextRange>>();
  final int len=objects.size();
  for (int i=0; i < len; i++) {
    String curPrefix=null;
    Object o=objects.get(i);
    if (o instanceof String) {
      curPrefix=(String)o;
      if (i == len - 1)       return;
      o=objects.get(++i);
    }
    String curSuffix=null;
    PsiLanguageInjectionHost curHost=null;
    if (o instanceof PsiLanguageInjectionHost) {
      curHost=(PsiLanguageInjectionHost)o;
      if (i == len - 2) {
        final Object next=objects.get(i + 1);
        if (next instanceof String) {
          i++;
          curSuffix=(String)next;
        }
      }
    }
    if (curHost == null) {
      unparsableRef.set(Boolean.TRUE);
    }
 else {
      if (!(curHost instanceof PsiLiteralExpression)) {
        result.add(Trinity.create(curHost,InjectedLanguage.create(injection.getInjectedLanguageId(),curPrefix,curSuffix,true),ElementManipulators.getManipulator(curHost).getRangeInElement(curHost)));
      }
 else {
        final List<TextRange> injectedArea=injection.getInjectedArea(curHost);
        for (int j=0, injectedAreaSize=injectedArea.size(); j < injectedAreaSize; j++) {
          final TextRange textRange=injectedArea.get(j);
          result.add(Trinity.create(curHost,InjectedLanguage.create(injection.getInjectedLanguageId(),(separateFiles || j == 0 ? curPrefix : ""),(separateFiles || j == injectedAreaSize - 1 ? curSuffix : ""),true),textRange));
        }
      }
    }
  }
  if (!result.isEmpty()) {
    if (separateFiles) {
      for (      Trinity<PsiLanguageInjectionHost,InjectedLanguage,TextRange> trinity : result) {
        processInjection(language,Collections.singletonList(trinity),xmlInjection,false);
      }
    }
 else {
      processInjection(language,result,xmlInjection,unparsableRef.get());
    }
  }
}
