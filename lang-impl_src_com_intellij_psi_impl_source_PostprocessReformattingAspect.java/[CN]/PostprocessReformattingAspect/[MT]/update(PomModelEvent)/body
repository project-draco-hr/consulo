{
synchronized (PsiLock.LOCK) {
    if (isDisabled() || myPostponedCounter == 0 && !ApplicationManager.getApplication().isUnitTestMode())     return;
    final TreeChangeEvent changeSet=(TreeChangeEvent)event.getChangeSet(myTreeAspect);
    if (changeSet == null)     return;
    final PsiElement psiElement=changeSet.getRootElement().getPsi();
    if (psiElement == null)     return;
    PsiFile containingFile=InjectedLanguageUtil.getTopLevelFile(psiElement);
    final FileViewProvider viewProvider=containingFile.getViewProvider();
    if (!viewProvider.isEventSystemEnabled())     return;
    myUpdatedProviders.add(viewProvider);
    for (    final ASTNode node : changeSet.getChangedElements()) {
      final TreeChange treeChange=changeSet.getChangesByElement(node);
      for (      final ASTNode affectedChild : treeChange.getAffectedChildren()) {
        final ChangeInfo childChange=treeChange.getChangeByChild(affectedChild);
switch (childChange.getChangeType()) {
case ChangeInfo.ADD:
case ChangeInfo.REPLACE:
          postponeFormatting(viewProvider,affectedChild);
        break;
case ChangeInfo.CONTENTS_CHANGED:
      if (!CodeEditUtil.isNodeGenerated(affectedChild))       ((TreeElement)affectedChild).acceptTree(new RecursiveTreeElementVisitor(){
        protected boolean visitNode(        TreeElement element){
          if (CodeEditUtil.isNodeGenerated(element)) {
            postponeFormatting(viewProvider,element);
            return false;
          }
          return true;
        }
      }
);
    break;
}
}
}
}
}
