{
  final List<ASTNode> astNodes=myReformatElements.remove(key);
  final Document document=key.getDocument();
  if (document == null)   return;
  final TreeMap<RangeMarker,PostponedAction> rangesToProcess=new TreeMap<RangeMarker,PostponedAction>(new Comparator<RangeMarker>(){
    public int compare(    final RangeMarker o1,    final RangeMarker o2){
      if (o1.equals(o2))       return 0;
      final int diff=o2.getEndOffset() - o1.getEndOffset();
      if (diff == 0) {
        if (o1.getStartOffset() == o2.getStartOffset())         return 0;
        if (o1.getStartOffset() == o1.getEndOffset())         return -1;
        if (o2.getStartOffset() == o2.getEndOffset())         return 1;
        return o1.getStartOffset() - o2.getStartOffset();
      }
      return diff;
    }
  }
);
  handleReformatMarkers(key,rangesToProcess);
  if (astNodes != null)   createActionsMap(astNodes,key,rangesToProcess);
  while (!rangesToProcess.isEmpty()) {
    final List<Pair<RangeMarker,? extends PostponedAction>> normalizedActions=normalizeAndReorderPostponedActions(rangesToProcess,document);
    for (    final Pair<RangeMarker,? extends PostponedAction> normalizedAction : normalizedActions) {
      CodeStyleSettings settings=CodeStyleSettingsManager.getSettings(myPsiManager.getProject());
      boolean old=settings.ENABLE_JAVADOC_FORMATTING;
      settings.ENABLE_JAVADOC_FORMATTING=false;
      try {
        normalizedAction.getSecond().processRange(normalizedAction.getFirst(),key);
      }
  finally {
        settings.ENABLE_JAVADOC_FORMATTING=old;
      }
    }
  }
}
