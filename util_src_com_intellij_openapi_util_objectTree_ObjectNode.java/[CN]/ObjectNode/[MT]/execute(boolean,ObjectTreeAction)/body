{
  final Object object=myReference.get();
  if (object == null)   return;
  if (myTree.getExecutedObjects().contains(this)) {
    return;
  }
  myTree.getExecutedObjects().add(this);
  if (myChildren != null) {
    final ObjectNode[] children=myChildren.toArray(new ObjectNode[myChildren.size()]);
    for (int i=children.length - 1; i >= 0; i--) {
      children[i].execute(disposeTree,action);
    }
  }
  if (disposeTree) {
    myChildren=null;
  }
  try {
    action.execute(object);
  }
 catch (  Throwable e) {
    LOG.error(e);
  }
  if (disposeTree) {
    myTree.getObject2NodeMap().remove(object);
    if (myParent != null) {
      myParent.removeChild(this);
    }
 else {
      myTree.getRootObjects().remove(object);
    }
  }
  myTree.getExecutedObjects().remove(this);
}
