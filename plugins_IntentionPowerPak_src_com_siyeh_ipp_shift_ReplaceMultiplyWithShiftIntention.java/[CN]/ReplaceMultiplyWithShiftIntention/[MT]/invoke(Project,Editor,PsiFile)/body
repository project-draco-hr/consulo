{
  final PsiElement matchingElement=findMatchingElement(file,editor);
  if (matchingElement instanceof PsiBinaryExpression) {
    final PsiBinaryExpression exp=(PsiBinaryExpression)matchingElement;
    final PsiExpression lhs=exp.getLOperand();
    final PsiExpression rhs=exp.getROperand();
    final PsiJavaToken sign=exp.getOperationSign();
    final IElementType tokenType=sign.getTokenType();
    final String operatorString;
    if (tokenType.equals(JavaTokenType.ASTERISK)) {
      operatorString="<<";
    }
 else {
      operatorString=">>";
    }
    final String expString=lhs.getText() + operatorString + ShiftUtils.getLogBase2(rhs);
    replaceExpression(project,expString,exp);
  }
 else {
    final PsiAssignmentExpression exp=(PsiAssignmentExpression)findMatchingElement(file,editor);
    final PsiExpression lhs=exp.getLExpression();
    final PsiExpression rhs=exp.getRExpression();
    final PsiJavaToken sign=exp.getOperationSign();
    final IElementType tokenType=sign.getTokenType();
    final String assignString;
    if (tokenType.equals(JavaTokenType.ASTERISKEQ)) {
      assignString="<<=";
    }
 else {
      assignString=">>=";
    }
    final String expString=lhs.getText() + assignString + ShiftUtils.getLogBase2(rhs);
    replaceExpression(project,expString,exp);
  }
}
