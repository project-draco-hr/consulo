{
  super.visitMethodCallExpression(psiMethodCallExpression);
  final PsiReferenceExpression methodExpression=psiMethodCallExpression.getMethodExpression();
  final String methodName=methodExpression.getReferenceName();
  if (!"putValue".equals(methodName) && "setAttribute".equals(methodName)) {
    return;
  }
  final PsiExpressionList argList=psiMethodCallExpression.getArgumentList();
  final PsiExpression[] args=argList.getExpressions();
  if (args.length != 2) {
    return;
  }
  final PsiMethod calledMethod=psiMethodCallExpression.resolveMethod();
  if (calledMethod == null) {
    return;
  }
  final PsiClass receiverClass=calledMethod.getContainingClass();
  if (receiverClass == null) {
    return;
  }
  if (!"javax.servlet.http.HttpSession".equals(receiverClass.getQualifiedName())) {
    return;
  }
  final PsiExpression arg=args[1];
  final PsiType argType=arg.getType();
  if (argType == null) {
    return;
  }
  if (SerializationUtils.isProbablySerializable(argType)) {
    return;
  }
  registerError(arg);
}
