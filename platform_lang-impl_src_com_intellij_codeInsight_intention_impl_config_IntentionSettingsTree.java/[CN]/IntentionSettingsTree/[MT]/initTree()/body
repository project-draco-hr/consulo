{
  myTree=new CheckboxTree(new CheckboxTree.CheckboxTreeCellRenderer(true){
    public void customizeRenderer(    JTree tree,    Object value,    boolean selected,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      if (!(value instanceof CheckedTreeNode))       return;
      CheckedTreeNode node=(CheckedTreeNode)value;
      SimpleTextAttributes attributes=node.getUserObject() instanceof IntentionActionMetaData ? SimpleTextAttributes.REGULAR_ATTRIBUTES : SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES;
      final String text=getNodeText(node);
      final Color background=selected ? UIUtil.getTreeSelectionBackground() : UIUtil.getTreeTextBackground();
      UIUtil.changeBackGround(this,background);
      if (text != null) {
        SearchUtil.appendFragments(myFilter != null ? myFilter.getFilter() : null,text,attributes.getStyle(),attributes.getFgColor(),background,getTextRenderer());
      }
    }
  }
,new CheckedTreeNode(null));
  myTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      TreePath path=e.getPath();
      Object userObject=((DefaultMutableTreeNode)path.getLastPathComponent()).getUserObject();
      selectionChanged(userObject);
    }
  }
);
  myFilter=new MyFilterComponent();
  myComponent=new JPanel(new BorderLayout());
  JScrollPane scrollPane=ScrollPaneFactory.createScrollPane(myTree);
  myComponent.add(myFilter,BorderLayout.NORTH);
  myComponent.add(scrollPane,BorderLayout.CENTER);
  myFilter.reset();
}
