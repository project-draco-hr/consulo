{
  LOG.assertTrue(tokenNode != null);
  final PsiElement secondAsPsiElement=SourceTreeToPsiMap.treeElementToPsi(tokenNode);
  LOG.assertTrue(secondAsPsiElement != null);
  final PsiFile file=secondAsPsiElement.getContainingFile();
  final Project project=secondAsPsiElement.getProject();
  final CodeStyleSettings settings=CodeStyleSettingsManager.getInstance(project).getCurrentSettings();
  final int tokenStartOffset=tokenNode.getStartOffset();
  final boolean oldValue=settings.XML_KEEP_LINE_BREAKS;
  final int oldKeepBlankLines=settings.XML_KEEP_BLANK_LINES;
  settings.XML_KEEP_BLANK_LINES=0;
  try {
    final FormattingModelBuilder builder=language.getFormattingModelBuilder();
    final PsiElement element=file.findElementAt(tokenStartOffset);
    if (builder != null && element.getLanguage().getFormattingModelBuilder() != null) {
      final TextRange textRange=element.getTextRange();
      final FormattingModel model=builder.createModel(file,settings);
      return Formatter.getInstance().getWhiteSpaceBefore(model.getDocumentModel(),model.getRootBlock(),settings,settings.getIndentOptions(file.getFileType()),textRange,mayChangeLineFeeds);
    }
 else {
      return new IndentInfo(0,0,0);
    }
  }
  finally {
    settings.XML_KEEP_LINE_BREAKS=oldValue;
    settings.XML_KEEP_BLANK_LINES=oldKeepBlankLines;
  }
}
