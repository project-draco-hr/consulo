{
  if (DO_OUTPUT) {
    System.out.println("CodeEditUtil.removeChildrenBefore\n" + parent.getPsi().getContainingFile().getText());
  }
  checkAllWhiteSpaces(parent);
  ASTNode lastChild=last == null ? null : last.getTreeNext();
  final ASTNode prevElement=TreeUtil.prevLeaf(first);
  ASTNode nextElement=findElementAfter(last == null ? parent : last,false);
  if (nextElement != null) {
    saveIndents(nextElement);
  }
  boolean adjustWSBefore=containLineBreaks(first,lastChild);
  if (!mustKeepFirstIndent(prevElement,parent)) {
    adjustWSBefore=true;
  }
  parent.removeRange(first,lastChild);
  if (!adjustWSBefore && parent.getTextLength() == 0 && prevElement != null && isWS(prevElement) && !prevElement.textContains('\n')) {
    adjustWSBefore=true;
  }
  final PsiFile file=parent.getPsi().getContainingFile();
  final CodeStyleSettings.IndentOptions options=CodeStyleSettingsManager.getSettings(file.getProject()).getIndentOptions(file.getFileType());
  if (nextElement != null) {
    ASTNode elementBeforeNext=TreeUtil.prevLeaf(nextElement);
    if (prevElement != null && isWS(prevElement) && isWS(elementBeforeNext) && prevElement != elementBeforeNext) {
      if (!elementBeforeNext.textContains('\n') && prevElement.textContains('\n')) {
        delete(elementBeforeNext);
      }
 else {
        final String text=composeNewWS(prevElement.getText(),elementBeforeNext.getText(),options);
        final ASTNode elementBeforeNext1=elementBeforeNext;
        final Runnable action=new Runnable(){
          public void run(){
            delete(elementBeforeNext1);
            replace(prevElement,text);
          }
        }
;
        final PomModel model=prevElement.getPsi().getProject().getModel();
        try {
          model.runTransaction(new PomTransactionBase(TreeUtil.findCommonParent(elementBeforeNext1,prevElement).getPsi()){
            public PomModelEvent runInner(){
              action.run();
              return null;
            }
          }
,model.getModelAspect(TreeAspect.class));
        }
 catch (        IncorrectOperationException e) {
        }
      }
    }
    elementBeforeNext=TreeUtil.prevLeaf(nextElement);
    if (isWS(elementBeforeNext) && whiteSpaceHasInvalidPosition(elementBeforeNext)) {
      final String text=elementBeforeNext.getText();
      delete(elementBeforeNext);
      FormatterUtil.replaceWhiteSpace(text,nextElement,ElementType.WHITE_SPACE);
    }
    if (adjustWSBefore) {
      adjustWhiteSpaceBefore(nextElement,true,true,true,false);
    }
  }
 else {
    final ASTNode fileNode=SourceTreeToPsiMap.psiElementToTree(parent.getPsi().getContainingFile());
    ASTNode lastLeaf=TreeUtil.findLastLeaf(fileNode);
    if (isWS(lastLeaf)) {
      delete(lastLeaf);
    }
  }
  checkAllWhiteSpaces(parent);
  if (DO_OUTPUT) {
    System.out.println("CodeEditUtil.removeChildren\n" + parent.getPsi().getContainingFile().getText());
  }
}
