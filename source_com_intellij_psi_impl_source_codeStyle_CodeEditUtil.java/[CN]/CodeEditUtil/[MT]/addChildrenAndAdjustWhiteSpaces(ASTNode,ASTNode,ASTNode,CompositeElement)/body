{
  final ArrayList<PsiElement> dirtyElements=new ArrayList<PsiElement>();
  final List<ASTNode> treePrev;
  try {
    ASTNode nextElement=saveIndentsBeforeAdd(first,lastChild,anchorBefore,parent,dirtyElements);
    first=trimWhiteSpaces(first,lastChild);
    ASTNode lastAdded=findLastAdded(first,lastChild);
    boolean keepLastLineBreaks=containsWhiteSpacesOnly(lastAdded) && lastAdded.textContains('\n');
    if (first == null) {
      return null;
    }
    boolean keepFirstIndent=keepFirstIndent(parent,anchorBefore,first,lastChild);
    parent.addChildren(first,lastChild,anchorBefore);
    checkAllTrees(parent.getPsi().getContainingFile());
    treePrev=getPreviousElements(first);
    if (!FormatterUtil.join(TreeUtil.prevLeaf(first),first)) {
      adjustWhiteSpaces(first,anchorBefore,keepFirstIndent,true);
    }
    if (nextElement != null) {
      if (!FormatterUtil.join(TreeUtil.prevLeaf(nextElement),nextElement)) {
        adjustWhiteSpaces(nextElement,nextElement.getTreeNext(),false,keepLastLineBreaks);
      }
    }
  }
  finally {
    clearIndentInfo(dirtyElements);
  }
  return returnFirstChangedNode(treePrev,parent);
}
