{
  final CompositeElement element=createPlainReformatMarker(manager);
  final Language leftLang=left != null ? left.getElementType().getLanguage() : null;
  final Language rightLang=right != null ? right.getElementType().getLanguage() : null;
  final ParserDefinition parserDefinition=leftLang != null ? leftLang.getParserDefinition() : null;
  if (leftLang == rightLang && parserDefinition != null) {
switch (parserDefinition.spaceExistanceTypeBetweenTokens(left,right)) {
case MUST:
{
        final LeafElement generatedWhitespace=Factory.createSingleLeafElement(ElementType.WHITE_SPACE,new char[]{' '},0,1,null,manager);
        TreeUtil.addChildren(element,generatedWhitespace);
        break;
      }
case MUST_LINE_BREAK:
{
      final LeafElement generatedWhitespace=Factory.createSingleLeafElement(ElementType.WHITE_SPACE,new char[]{'\n'},0,1,null,manager);
      TreeUtil.addChildren(element,generatedWhitespace);
      break;
    }
}
}
final ASTNode commonParent=TreeUtil.findCommonParent(left,right);
if (element.getTextLength() == 0 && isNodeGenerated(left) && isNodeGenerated(right) && isNodeGenerated(commonParent) && checkPassGenerated(left,commonParent) && checkPassGenerated(right,commonParent)) return null;
return element;
}
