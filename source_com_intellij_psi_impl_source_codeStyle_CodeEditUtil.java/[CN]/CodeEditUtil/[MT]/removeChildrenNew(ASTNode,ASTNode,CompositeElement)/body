{
  boolean doNotAdjust=first == parent.getFirstChildNode();
  ASTNode lastChild=last == null ? null : last.getTreeNext();
  ASTNode prevElement=findElementBefore(first);
  ASTNode nextElement=findElementAfter(last == null ? parent : last,false);
  if (nextElement != null) {
    saveIndents(nextElement);
  }
  boolean adjustWSBefore=containLineBreaks(first,lastChild);
  if (!isWS(prevElement) || (prevElement != null && !prevElement.textContains('\n'))) {
    adjustWSBefore=true;
  }
  parent.removeRange(first,lastChild);
  final PsiFile file=parent.getPsi().getContainingFile();
  final CodeStyleSettings.IndentOptions options=CodeStyleSettingsManager.getSettings(file.getProject()).getIndentOptions(file.getFileType());
  if (nextElement != null) {
    ASTNode elementBeforeNext=findElementBefore(nextElement);
    if (isWS(prevElement) && isWS(elementBeforeNext) && prevElement != elementBeforeNext) {
      if (adjustWSBefore) {
        String text=composeNewWS(prevElement.getText(),elementBeforeNext.getText(),options);
        if (prevElement == parent.getFirstChildNode()) {
          delete(prevElement);
        }
 else {
          delete(elementBeforeNext);
        }
        FormatterUtil.replaceWhiteSpace(text,nextElement,ElementType.WHITE_SPACE);
      }
 else {
        if (elementBeforeNext.textContains('\n')) {
          delete(prevElement);
        }
 else {
          delete(elementBeforeNext);
        }
      }
    }
    if (isWS(parent.getFirstChildNode())) {
      final String text=parent.getFirstChildNode().getText();
      final ASTNode element=findElementAfter(parent.getFirstChildNode(),false);
      delete(parent.getFirstChildNode());
      if (element != null) {
        FormatterUtil.replaceWhiteSpace(text,element,ElementType.WHITE_SPACE);
      }
    }
 else     if (isWS(parent.getLastChildNode())) {
      final String text=parent.getLastChildNode().getText();
      final ASTNode element=findElementAfter(parent.getLastChildNode(),false);
      delete(parent.getLastChildNode());
      if (element != null) {
        FormatterUtil.replaceWhiteSpace(text,element,ElementType.WHITE_SPACE);
      }
    }
    final boolean keepFormatting=parent.getFirstChildNode() != null;
    if (!keepFormatting) {
      doNotAdjust=false;
    }
    if (adjustWSBefore) {
      adjustWhiteSpaceBefore(nextElement,keepFormatting,keepFormatting,true,!doNotAdjust);
    }
  }
 else {
    final ASTNode fileNode=SourceTreeToPsiMap.psiElementToTree(parent.getPsi().getContainingFile());
    ASTNode lastLeaf=TreeUtil.findLastLeaf(fileNode);
    if (isWS(lastLeaf)) {
      delete(lastLeaf);
    }
  }
  System.out.println("CodeEditUtil.removeChildrenNew " + parent.getPsi().getContainingFile().getText());
}
