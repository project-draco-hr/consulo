{
  first=transform(first);
  if (first != null) {
    final PsiElement psi=first.getPsi();
    CodeStyleSettings settings=CodeStyleSettingsManager.getSettings(psi.getProject());
    final FormattingModelBuilder builder=file.getViewProvider().getBaseLanguage().getFormattingModelBuilder();
    final FormattingModelBuilder elementBuilder=psi.getLanguage().getFormattingModelBuilder();
    final boolean keepWhiteSpaces=settings.HTML_KEEP_WHITESPACES;
    boolean canModifyWhiteSpaces=canModifyWS(file);
    if (!canModifyWhiteSpaces) {
      settings.HTML_KEEP_WHITESPACES=true;
    }
    try {
      if (builder != null && elementBuilder != null) {
        ASTNode firstNonSpaceLeaf=TreeUtil.findFirstLeaf(first);
        while (firstNonSpaceLeaf != null && firstNonSpaceLeaf.getElementType() == ElementType.WHITE_SPACE) {
          firstNonSpaceLeaf=TreeUtil.nextLeaf(firstNonSpaceLeaf);
        }
        if (firstNonSpaceLeaf != null) {
          final int startOffset=firstNonSpaceLeaf.getStartOffset();
          final int endOffset=first.getTextRange().getEndOffset();
          if (startOffset < endOffset) {
            FormattingModel model=builder.createModel(file,settings);
            if (model instanceof PsiBasedFormattingModel) {
              ((PsiBasedFormattingModel)model).doNotUseallTrees();
            }
            Block block=model.getRootBlock();
            if (block instanceof XmlBlock && !isJavaFile(file)) {
              ((XmlBlock)block).getPolicy().dontProcessJavaTree();
            }
            FormatterEx.getInstanceEx().adjustTextRange(model,settings,settings.getIndentOptions(file.getFileType()),new TextRange(startOffset,endOffset),keepBlankLines,keepLineBreaks,changeWSBeforeFirstElement,changeLineFeedsBeforeFirstElement,canModifyWhiteSpaces ? new MyIndentInfoStorage(file,null) : null);
          }
        }
      }
    }
  finally {
      settings.HTML_KEEP_WHITESPACES=keepWhiteSpaces;
    }
  }
}
