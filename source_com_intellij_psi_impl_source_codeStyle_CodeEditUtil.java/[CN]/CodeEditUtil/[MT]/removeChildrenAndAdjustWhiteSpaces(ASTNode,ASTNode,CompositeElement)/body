{
  ASTNode lastChild=findLastChild(last);
  final ASTNode prevElement=TreeUtil.prevLeaf(first);
  ASTNode nextElement=findElementAfter(last == null ? parent : last,false);
  final ArrayList<PsiElement> dirtyElements=new ArrayList<PsiElement>();
  if (nextElement != null) {
    saveIndents(nextElement,dirtyElements);
  }
  try {
    boolean adjustWSBefore=containLineBreaks(first,lastChild);
    if (!mustKeepFirstIndent(prevElement,parent)) {
      adjustWSBefore=true;
    }
    parent.removeRange(first,lastChild);
    if (!adjustWSBefore && parent.getTextLength() == 0 && prevElement != null && isWS(prevElement) && !prevElement.textContains('\n')) {
      adjustWSBefore=true;
    }
    final PsiFile file=parent.getPsi().getContainingFile();
    final CodeStyleSettings.IndentOptions options=CodeStyleSettingsManager.getSettings(file.getProject()).getIndentOptions(file.getFileType());
    if (nextElement != null) {
      adjustSpacePositions(nextElement,prevElement,options);
      if (prevElement != null) {
        FormatterUtil.join(prevElement,TreeUtil.nextLeaf(prevElement));
      }
      if (!nextElement.getPsi().isValid()) {
        nextElement=findElementAfter(last == null ? parent : last,false);
      }
      if (nextElement != null && adjustWSBefore) {
        adjustWhiteSpaceBefore(nextElement,true,true,true,false);
      }
    }
 else {
      final ASTNode fileNode=TreeUtil.getFileElement(parent);
      ASTNode lastLeaf=TreeUtil.findLastLeaf(fileNode);
      if (isWS(lastLeaf)) {
        delete(lastLeaf);
      }
    }
  }
  finally {
    clearIndentInfo(dirtyElements);
  }
}
