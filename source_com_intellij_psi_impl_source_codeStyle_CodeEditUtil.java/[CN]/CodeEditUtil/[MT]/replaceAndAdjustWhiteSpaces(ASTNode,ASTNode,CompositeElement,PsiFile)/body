{
  final ASTNode elementAfter=findElementAfter(oldChild,true);
  boolean changeFirstWS=newChild.textContains('\n') || oldChild.textContains('\n');
  ASTNode firstNonEmpty=findFirstNonEmpty(newChild,newChild.getTreeNext(),parent,newChild.getTreeNext());
  if (!canStickChildrenTogether(TreeUtil.prevLeaf(oldChild),firstNonEmpty)) {
    changeFirstWS=true;
  }
  Collection<PsiElement> dirtyElements=new ArrayList<PsiElement>();
  if (changeFirstWS) {
    saveIndents(newChild,dirtyElements,file);
  }
  if (elementAfter != null && !isWS(elementAfter)) {
    saveIndents(elementAfter,dirtyElements,file);
  }
  try {
    boolean checkWhiteSpaces=oldChild.getTextLength() > 0 && newChild.getTextLength() == 0;
    parent.replaceChild(oldChild,newChild);
    adjustWSPositionsAfterReplacement(checkWhiteSpaces,newChild,file);
    final List<ASTNode> treePrev=getPreviousElements(newChild);
    adjustWhiteSpaceBefore(newChild,true,false,changeFirstWS,false,file);
    if (shouldInsertNewLineBefore(findElementAfter(newChild,false))) {
      adjustWhiteSpaceBefore(findElementAfter(newChild,false),true,true,true,true,file);
    }
 else     if (elementAfter != null && !isWS(elementAfter)) {
      adjustWhiteSpaceBefore(elementAfter,true,true,true,false,file);
    }
    return returnFirstChangedNode(treePrev,parent);
  }
  finally {
    clearIndentInfo(dirtyElements);
  }
}
