{
  if (left == null && right == null)   return left;
  if (left == null) {
    final ASTNode parent=right.getTreeParent();
    final CompositeElement element=createPlainReformatMarker(parent.getPsi().getManager());
    parent.addChild(element,right);
    left=element;
  }
 else   if (right == null) {
    final ASTNode parent=left.getTreeParent();
    final PsiManager psiManager=parent.getPsi().getManager();
    final CompositeElement element=createPlainReformatMarker(psiManager);
    parent.addChild(element,left.getTreeNext());
  }
 else   if (left.getElementType() == ElementType.WHITE_SPACE && left.getTreeParent().getLastChildNode() == left && normalizeTailingWhitespace) {
    final ParseUtil.CommonParentState parentState=new ParseUtil.CommonParentState();
    ParseUtil.nextLeaf((TreeElement)left,parentState);
    final CompositeElement element=createReformatMarker(left,right,left.getTreeParent().getPsi().getManager());
    if (element != null)     parentState.nextLeafBranchStart.getTreeParent().addChild(element,parentState.nextLeafBranchStart);
    left.getTreeParent().removeChild(left);
    left=right;
  }
 else   if (left.getElementType() == ElementType.WHITE_SPACE && right.getElementType() == ElementType.WHITE_SPACE) {
    final String text;
    final int leftBlankLines=getBlankLines(left.getText());
    final int rightBlankLines=getBlankLines(right.getText());
    final boolean leaveRightText=leftBlankLines < rightBlankLines;
    if (leftBlankLines == 0 && rightBlankLines == 0)     text=left.getText() + right.getText();
 else     if (leaveRightText)     text=right.getText();
 else     text=left.getText();
    if (leaveRightText || forceReformat) {
      final LeafElement merged=Factory.createSingleLeafElement(ElementType.WHITE_SPACE,text.toCharArray(),0,text.length(),null,left.getPsi().getManager());
      if (!leaveRightText) {
        left.getTreeParent().replaceChild(left,merged);
        right.getTreeParent().removeChild(right);
      }
 else {
        right.getTreeParent().replaceChild(right,merged);
        left.getTreeParent().removeChild(left);
      }
      left=merged;
    }
 else     right.getTreeParent().removeChild(right);
  }
 else   if (left.getElementType() != ElementType.WHITE_SPACE || forceReformat) {
    final ParseUtil.CommonParentState parentState=new ParseUtil.CommonParentState();
    ParseUtil.nextLeaf((TreeElement)left,parentState);
    final CompositeElement element=createReformatMarker(left,right,left.getTreeParent().getPsi().getManager());
    if (element != null)     parentState.nextLeafBranchStart.getTreeParent().addChild(element,parentState.nextLeafBranchStart);
  }
  return left;
}
