{
  LOG.assertTrue(first != null);
  LOG.assertTrue(last != null);
  ASTNode lastChild=last.getTreeNext();
  ASTNode current=first;
  while (current != lastChild) {
    saveWhitespacesInfo(current);
    checkForOuters(current);
    current=current.getTreeNext();
  }
  if (anchorBefore != null && isComment(anchorBefore.getElementType())) {
    final ASTNode anchorPrev=anchorBefore.getTreePrev();
    if (anchorPrev != null && anchorPrev.getElementType() == TokenType.WHITE_SPACE) {
      anchorBefore=anchorPrev;
    }
  }
  parent.addChildren(first,lastChild,anchorBefore);
  final ASTNode firstAddedLeaf=findFirstLeaf(first,last);
  final ASTNode prevLeaf=TreeUtil.prevLeaf(first);
  if (firstAddedLeaf != null) {
    ASTNode placeHolderEnd=makePlaceHolderBetweenTokens(prevLeaf,firstAddedLeaf,isFormattingRequiered(prevLeaf,first),false);
    if (placeHolderEnd != prevLeaf && first == firstAddedLeaf)     first=placeHolderEnd;
    final ASTNode lastAddedLeaf=findLastLeaf(first,last);
    placeHolderEnd=makePlaceHolderBetweenTokens(lastAddedLeaf,TreeUtil.nextLeaf(last),true,false);
    if (placeHolderEnd != lastAddedLeaf && lastAddedLeaf == first)     first=placeHolderEnd;
  }
 else   makePlaceHolderBetweenTokens(prevLeaf,TreeUtil.nextLeaf(last),isFormattingRequiered(prevLeaf,first),false);
  return first;
}
