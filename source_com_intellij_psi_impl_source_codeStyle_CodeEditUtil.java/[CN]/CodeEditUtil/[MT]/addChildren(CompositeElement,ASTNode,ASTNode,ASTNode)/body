{
  checkAllWhiteSpaces(parent);
  ASTNode lastChild=last != null ? last.getTreeNext() : null;
  first=trimWhiteSpaces(first,lastChild);
  if (first == null) {
    return null;
  }
  boolean keepFirstIndent=false;
  final ASTNode elemBeforeAnchor=getElementBeforeAnchor(parent,anchorBefore);
  if (elemBeforeAnchor != null) {
    ASTNode firstNonEmpty=first;
    while (firstNonEmpty != lastChild && firstNonEmpty.getTextLength() == 0) {
      firstNonEmpty=firstNonEmpty.getTreeNext();
    }
    if (firstNonEmpty == null || canKeepFirstIndent(elemBeforeAnchor,firstNonEmpty,parent)) {
      keepFirstIndent=true;
    }
  }
  saveIndents(first,lastChild);
  ASTNode nextElement=anchorBefore;
  if (nextElement == null) {
    nextElement=findElementAfter(parent,false);
  }
 else   if (isWS(nextElement)) {
    nextElement=findElementAfter(anchorBefore,false);
  }
  if (nextElement != null) {
    saveIndents(nextElement);
  }
  parent.addChildren(first,lastChild,anchorBefore);
  final List<ASTNode> treePrev=getPreviousElements(first);
  adjustWhiteSpaces(first,anchorBefore,keepFirstIndent);
  if (nextElement != null) {
    adjustWhiteSpaces(nextElement,nextElement.getTreeNext(),false);
  }
  checkAllWhiteSpaces(parent);
  if (treePrev == null) {
    return (TreeElement)parent.getFirstChildNode();
  }
 else {
    ASTNode firstValid=findFirstValid(treePrev);
    if (firstValid == null) {
      return (TreeElement)parent.getFirstChildNode();
    }
 else {
      return (TreeElement)firstValid.getTreeNext();
    }
  }
}
