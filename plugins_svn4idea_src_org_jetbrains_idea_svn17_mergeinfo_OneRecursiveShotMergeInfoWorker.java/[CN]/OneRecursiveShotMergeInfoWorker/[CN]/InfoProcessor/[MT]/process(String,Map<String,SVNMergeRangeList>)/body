{
  boolean processed=false;
  final boolean self=relativeFileSubpath.equals(myFilePathAsked);
  if (map.isEmpty()) {
    myMerged=false;
    return true;
  }
  for (  Map.Entry<String,SVNMergeRangeList> entry : map.entrySet()) {
    String relativeUrl=entry.getKey();
    boolean urlMatches=false;
    if (".".equals(relativeUrl) || "".equals(relativeUrl)) {
      urlMatches=true;
    }
 else {
      relativeUrl=(relativeUrl.startsWith("/")) ? relativeUrl : "/" + relativeUrl;
      urlMatches=SVNPathUtil.isAncestor(myWcLevelRelativeSourceUrl,relativeUrl);
    }
    if (!urlMatches)     continue;
    processed=true;
    final SVNMergeRangeList rangesList=entry.getValue();
    for (    SVNMergeRange range : rangesList.getRanges()) {
      final long startRevision=range.getStartRevision() + 1;
      final long endRevision=range.getEndRevision();
      final boolean isInheritable=range.isInheritable();
      final boolean inInterval=(myRevisionAsked >= startRevision) && (myRevisionAsked <= endRevision);
      if ((isInheritable || self) && inInterval) {
        myMerged=true;
        break;
      }
    }
    break;
  }
  return processed;
}
