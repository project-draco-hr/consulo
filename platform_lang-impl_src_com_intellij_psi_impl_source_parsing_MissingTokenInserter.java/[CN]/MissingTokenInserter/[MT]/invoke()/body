{
  if (myState < 0) {
    myLexer.start(myLexer.getBufferSequence(),myStartOffset,myEndOffset);
  }
 else {
    myLexer.start(myLexer.getBufferSequence(),myStartOffset,myEndOffset,myState);
  }
  TreeElement leaf=TreeUtil.findFirstLeafOrChameleon(myRoot);
  if (leaf == null) {
    final TreeElement firstMissing=myProcessor.process(myLexer,myContext);
    if (firstMissing != null) {
      myRoot.rawAddChildren(firstMissing);
    }
    return;
  }
 else {
    final IElementType tokenType=getNextTokenType();
    if (tokenType != leaf.getElementType() && myProcessor.isTokenValid(tokenType)) {
      final TreeElement firstMissing=myProcessor.process(myLexer,myContext);
      if (firstMissing != null) {
        myRoot.getFirstChildNode().rawInsertBeforeMe(firstMissing);
      }
    }
    passTokenOrChameleon(leaf);
  }
  insertMissingTokensInTreeBody(leaf);
  if (myLexer.getTokenType() != null) {
    final TreeElement firstMissing=myProcessor.process(myLexer,myContext);
    if (firstMissing != null) {
      ASTNode current=myRoot;
      while (current instanceof CompositeElement) {
        if (current.getUserData(TreeUtil.UNCLOSED_ELEMENT_PROPERTY) != null)         break;
        current=current.getLastChildNode();
      }
      if (current instanceof CompositeElement) {
        ((CompositeElement)current).rawAddChildren(firstMissing);
      }
 else {
        myRoot.getLastChildNode().rawInsertAfterMe(firstMissing);
      }
    }
  }
}
