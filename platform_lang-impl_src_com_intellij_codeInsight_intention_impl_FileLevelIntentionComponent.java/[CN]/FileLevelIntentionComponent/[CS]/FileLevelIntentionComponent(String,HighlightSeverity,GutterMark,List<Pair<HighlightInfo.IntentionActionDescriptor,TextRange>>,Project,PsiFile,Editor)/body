{
  myProject=project;
  myBackground=getColor(severity);
  final ShowIntentionsPass.IntentionsInfo info=new ShowIntentionsPass.IntentionsInfo();
  if (intentions != null) {
    for (    Pair<HighlightInfo.IntentionActionDescriptor,TextRange> intention : intentions) {
      final HighlightInfo.IntentionActionDescriptor descriptor=intention.getFirst();
      info.intentionsToShow.add(descriptor);
      final IntentionAction action=descriptor.getAction();
      if (action instanceof EmptyIntentionAction) {
        continue;
      }
      final String text=action.getText();
      createActionLabel(text,new Runnable(){
        @Override public void run(){
          PsiDocumentManager.getInstance(myProject).commitAllDocuments();
          ShowIntentionActionsHandler.chooseActionAndInvoke(psiFile,editor,action,text);
        }
      }
);
    }
  }
  myLabel.setText(description);
  if (gutterMark != null) {
    myLabel.setIcon(gutterMark.getIcon());
  }
  if (intentions != null && !intentions.isEmpty()) {
    myGearLabel.setIcon(AllIcons.General.Gear);
    new ClickListener(){
      @Override public boolean onClick(      @NotNull MouseEvent e,      int clickCount){
        IntentionListStep step=new IntentionListStep(null,editor,psiFile,project);
        HighlightInfo.IntentionActionDescriptor descriptor=intentions.get(0).getFirst();
        IntentionActionWithTextCaching actionWithTextCaching=step.wrapAction(descriptor,psiFile,psiFile,editor);
        if (step.hasSubstep(actionWithTextCaching)) {
          step=step.getSubStep(actionWithTextCaching,null);
        }
        ListPopup popup=JBPopupFactory.getInstance().createListPopup(step);
        Dimension dimension=popup.getContent().getPreferredSize();
        Point at=new Point(-dimension.width + myGearLabel.getWidth(),FileLevelIntentionComponent.this.getHeight());
        popup.show(new RelativePoint(e.getComponent(),at));
        return true;
      }
    }
.installOn(myGearLabel);
  }
}
