{
  myProject=project;
  myHolder=holder;
  myPackageTree=new Tree(new RootNode(project));
  myButtonsPanel.add(createActionsPanel());
  myTreePanel.setLayout(new BorderLayout());
  myTreePanel.add(ScrollPaneFactory.createScrollPane(myPackageTree),BorderLayout.CENTER);
  myTreeToolbar.setLayout(new BorderLayout());
  myTreeToolbar.add(createTreeToolbar(),BorderLayout.WEST);
  myTreeExpansionMonitor=PackageTreeExpansionMonitor.install(myPackageTree,myProject);
  myTreeMarker=new Marker(){
    @Override public boolean isMarked(    VirtualFile file){
      return myCurrentScope != null && (myCurrentScope instanceof PackageSetBase ? ((PackageSetBase)myCurrentScope).contains(file,myHolder) : myCurrentScope.contains(PackageSetBase.getPsiFile(file,myHolder),myHolder));
    }
  }
;
  myPatternField.setDialogCaption("Pattern");
  myPatternField.getDocument().addDocumentListener(new DocumentAdapter(){
    @Override public void textChanged(    DocumentEvent event){
      onTextChange();
    }
  }
);
  myPatternField.getTextField().addCaretListener(new CaretListener(){
    @Override public void caretUpdate(    CaretEvent e){
      myCaretPosition=e.getDot();
      updateCaretPositionText();
    }
  }
);
  myPatternField.getTextField().addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
      if (myErrorMessage != null) {
        myPositionPanel.setVisible(true);
        myPanel.revalidate();
      }
    }
    @Override public void focusLost(    FocusEvent e){
      myPositionPanel.setVisible(false);
      myPanel.revalidate();
    }
  }
);
  initTree(myPackageTree);
  new UiNotifyConnector(myPanel,new Activatable(){
    @Override public void showNotify(){
    }
    @Override public void hideNotify(){
      cancelCurrentProgress();
    }
  }
);
  myPartiallyIncluded.setBackground(MyTreeCellRenderer.PARTIAL_INCLUDED);
  myRecursivelyIncluded.setBackground(MyTreeCellRenderer.WHOLE_INCLUDED);
}
