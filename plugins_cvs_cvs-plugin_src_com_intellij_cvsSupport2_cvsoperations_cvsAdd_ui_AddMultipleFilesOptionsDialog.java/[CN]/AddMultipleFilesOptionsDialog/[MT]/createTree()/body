{
  DefaultMutableTreeNode root=new DefaultMutableTreeNode();
  for (  AddedFileInfo myRoot : myRoots) {
    root.add(myRoot);
  }
  myModel=new ListTreeTableModelOnColumns(root,COLUMNS);
  myTreeTable=new TreeTableView(myModel);
  int comboHeight=new JComboBox().getPreferredSize().height;
  int checkBoxHeight=new JCheckBox().getPreferredSize().height;
  myTreeTable.setMinRowHeight(Math.max(comboHeight,checkBoxHeight) + 2);
  myTreeTable.setRootVisible(false);
  final JTableHeader tableHeader=myTreeTable.getTableHeader();
  tableHeader.setReorderingAllowed(false);
  tableHeader.setResizingAllowed(false);
  final TreeTableTree tree=myTreeTable.getTree();
  myTreeTable.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      final int keyCode=e.getKeyCode();
      if (keyCode == KeyEvent.VK_SPACE) {
        final int selectedColumn=myTreeTable.getSelectedColumn();
        if (selectedColumn == 0) {
          return;
        }
        final int[] selectedRows=myTreeTable.getSelectedRows();
        if (selectedRows.length == 0) {
          return;
        }
        final boolean included=!((AddedFileInfo)myTreeTable.getValueAt(selectedRows[0],1)).included();
        for (        int selectedRow : selectedRows) {
          final AddedFileInfo addedFileInfo=(AddedFileInfo)myTreeTable.getValueAt(selectedRow,1);
          addedFileInfo.setIncluded(included);
          myModel.nodeChanged(addedFileInfo);
        }
      }
    }
  }
);
  tree.setCellRenderer(new AddedFileCellRenderer());
  TreeUtil.installActions(tree);
}
