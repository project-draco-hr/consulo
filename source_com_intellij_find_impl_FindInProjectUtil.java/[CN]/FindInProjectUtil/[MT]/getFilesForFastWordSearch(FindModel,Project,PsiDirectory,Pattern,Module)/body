{
  CacheManager cacheManager=((PsiManagerEx)PsiManager.getInstance(project)).getCacheManager();
  SearchScope customScope=findModel.getCustomScope();
  @NotNull GlobalSearchScope scope=psiDirectory != null ? GlobalSearchScope.directoryScope(psiDirectory,true) : module != null ? moduleContentScope(module) : customScope instanceof GlobalSearchScope ? (GlobalSearchScope)customScope : GlobalSearchScope.projectScope(project);
  List<String> words=StringUtil.getWordsIn(findModel.getStringToFind());
  if (words.isEmpty())   return null;
  Collections.sort(words,new Comparator<String>(){
    public int compare(    final String o1,    final String o2){
      return o2.length() - o1.length();
    }
  }
);
  Set<PsiFile> resultFiles=new THashSet<PsiFile>();
  for (int i=0; i < words.size(); i++) {
    String word=words.get(i);
    PsiFile[] files=cacheManager.getFilesWithWord(word,UsageSearchContext.ANY,scope,findModel.isCaseSensitive());
    if (files.length == 0) {
      resultFiles.clear();
      break;
    }
    final List<PsiFile> psiFiles=Arrays.asList(files);
    if (i == 0) {
      resultFiles.addAll(psiFiles);
    }
 else {
      resultFiles.retainAll(psiFiles);
    }
    filterMaskedFiles(resultFiles,fileMaskRegExp);
    if (resultFiles.isEmpty())     break;
  }
  PsiFile[] allWordsFiles=cacheManager.getFilesWithWord(findModel.getStringToFind(),UsageSearchContext.ANY,scope,findModel.isCaseSensitive());
  resultFiles.addAll(Arrays.asList(allWordsFiles));
  filterMaskedFiles(resultFiles,fileMaskRegExp);
  return resultFiles;
}
