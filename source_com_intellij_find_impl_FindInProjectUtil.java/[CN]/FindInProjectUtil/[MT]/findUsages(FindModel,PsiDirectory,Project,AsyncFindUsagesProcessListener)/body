{
  final ProgressIndicator progress=ProgressManager.getInstance().getProgressIndicator();
  final Collection<PsiFile> psiFiles=getFilesToSearchIn(findModel,project,psiDirectory);
  final FileDocumentManager manager=FileDocumentManager.getInstance();
  boolean skipAllLarge=false;
  boolean processAllLarge=false;
  try {
    int i=0;
    long totalFilesSize=0;
    final int[] count=new int[]{0};
    boolean warningShown=false;
    for (    final PsiFile psiFile : psiFiles) {
      ProgressManager.getInstance().checkCanceled();
      final VirtualFile virtualFile=psiFile.getVirtualFile();
      final int index=i++;
      if (virtualFile == null)       continue;
      long fileLength=getFileLength(virtualFile);
      if (fileLength == -1)       continue;
      if (fileLength > SINGLE_FILE_SIZE_LIMIT) {
        if (skipAllLarge)         continue;
        if (!processAllLarge) {
          int retCode=showMessage(project,FindBundle.message("find.skip.large.file.prompt",ApplicationNamesInfo.getInstance().getProductName(),getPresentablePath(virtualFile),presentableSize(fileLength)),FindBundle.message("find.skip.large.file.title"));
          if (retCode == SKIP_ALL) {
            skipAllLarge=true;
            continue;
          }
 else           if (retCode == SKIP) {
            continue;
          }
 else           if (retCode == PROCESS_ALL) {
            processAllLarge=true;
          }
        }
      }
      int countBefore=count[0];
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        public void run(){
          if (virtualFile.isValid()) {
            if (FileTypeManager.getInstance().getFileTypeByFile(virtualFile).isBinary())             return;
            final Document document=manager.getDocument(virtualFile);
            if (document != null) {
              addToUsages(project,document,consumer,findModel,psiFile,count);
              if (progress != null) {
                progress.setFraction((double)index / psiFiles.size());
                String text=FindBundle.message("find.searching.for.string.in.file.progress",findModel.getStringToFind(),virtualFile.getPresentableUrl());
                progress.setText(text);
                int size=consumer.getCount();
                progress.setText2(FindBundle.message("find.searching.for.string.in.file.occurrences.progress",size));
              }
            }
          }
        }
      }
);
      if (countBefore < count[0]) {
        totalFilesSize+=fileLength;
        if (totalFilesSize > FILES_SIZE_LIMIT && !warningShown) {
          showTooManyUsagesWaring(project,FindBundle.message("find.excessive.total.size.prompt",presentableSize(totalFilesSize),ApplicationNamesInfo.getInstance().getProductName()));
          warningShown=true;
        }
      }
      if (count[0] > USAGES_LIMIT && !warningShown) {
        showTooManyUsagesWaring(project,FindBundle.message("find.excessive.usage.count.prompt",count[0]));
        warningShown=true;
      }
    }
  }
 catch (  ProcessCanceledException e) {
  }
  if (progress != null) {
    progress.setText(FindBundle.message("find.progress.search.completed"));
  }
  consumer.findUsagesCompleted();
}
