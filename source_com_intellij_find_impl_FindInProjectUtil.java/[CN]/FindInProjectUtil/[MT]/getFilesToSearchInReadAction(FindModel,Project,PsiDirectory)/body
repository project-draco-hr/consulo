{
  final FileIndex fileIndex=findModel.getModuleName() == null ? (FileIndex)ProjectRootManager.getInstance(project).getFileIndex() : ModuleRootManager.getInstance(ModuleManager.getInstance(project).findModuleByName(findModel.getModuleName())).getFileIndex();
  final Pattern fileMaskRegExp=createFileMaskRegExp(findModel);
  if (psiDirectory == null || (findModel.isWithSubdirectories() && fileIndex.isInContent(psiDirectory.getVirtualFile()))) {
    if (canOptimizeForFastWordSearch(findModel)) {
      final CacheManager cacheManager=((PsiManagerImpl)PsiManager.getInstance(project)).getCacheManager();
      final GlobalSearchScope scope=psiDirectory == null || psiDirectory.getPackage() == null ? GlobalSearchScope.projectScope(project) : GlobalSearchScope.directoryScope(psiDirectory,true);
      final List<String> words=StringUtil.getWordsIn(findModel.getStringToFind());
      Collections.sort(words,new Comparator<String>(){
        public int compare(        final String o1,        final String o2){
          return o2.length() - o1.length();
        }
      }
);
      Set<PsiFile> resultFiles=new THashSet<PsiFile>();
      for (int i=0; i < words.size(); i++) {
        String word=words.get(i);
        PsiFile[] files=cacheManager.getFilesWithWord(word,UsageSearchContext.ANY,scope);
        final List<PsiFile> psiFiles=Arrays.asList(files);
        if (i == 0) {
          resultFiles.addAll(psiFiles);
        }
 else {
          resultFiles.retainAll(psiFiles);
        }
        filterMaskedFiles(resultFiles,fileMaskRegExp);
        if (resultFiles.size() == 0)         break;
      }
      return resultFiles;
    }
class EnumContentIterator implements ContentIterator {
      List<VirtualFile> myVirtualFiles=new ArrayList<VirtualFile>();
      public boolean processFile(      VirtualFile fileOrDir){
        if (!fileOrDir.isDirectory() && (fileMaskRegExp == null || fileMaskRegExp.matcher(fileOrDir.getName()).matches())) {
          myVirtualFiles.add(fileOrDir);
        }
        return true;
      }
      public Collection<PsiFile> getFiles(){
        final ArrayList<PsiFile> psiFiles=new ArrayList<PsiFile>(myVirtualFiles.size());
        final PsiManager manager=PsiManager.getInstance(project);
        for (int i=0; i < myVirtualFiles.size(); i++) {
          VirtualFile virtualFile=myVirtualFiles.get(i);
          final PsiFile psiFile=manager.findFile(virtualFile);
          if (psiFile != null) {
            psiFiles.add(psiFile);
          }
        }
        return psiFiles;
      }
    }
    final EnumContentIterator iterator=new EnumContentIterator();
    if (psiDirectory == null) {
      fileIndex.iterateContent(iterator);
    }
 else {
      fileIndex.iterateContentUnderDirectory(psiDirectory.getVirtualFile(),iterator);
    }
    return iterator.getFiles();
  }
 else {
    ArrayList<PsiFile> fileList=new ArrayList<PsiFile>();
    addFilesUnderDirectory(psiDirectory,fileList,findModel.isWithSubdirectories(),createFileMaskRegExp(findModel));
    return fileList;
  }
}
