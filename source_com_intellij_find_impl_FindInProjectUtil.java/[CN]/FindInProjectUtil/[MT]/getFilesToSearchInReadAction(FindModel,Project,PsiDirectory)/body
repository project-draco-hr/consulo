{
  final FileIndex fileIndex=findModel.getModuleName() == null ? (FileIndex)ProjectRootManager.getInstance(project).getFileIndex() : ModuleRootManager.getInstance(ModuleManager.getInstance(project).findModuleByName(findModel.getModuleName())).getFileIndex();
  if (psiDirectory == null || (findModel.isWithSubdirectories() && fileIndex.isInContent(psiDirectory.getVirtualFile()))) {
    if (canBeOptimizedForWordSearching(findModel)) {
      final CacheManager cacheManager=((PsiManagerImpl)PsiManager.getInstance(project)).getCacheManager();
      final GlobalSearchScope scope=psiDirectory == null || psiDirectory.getPackage() == null ? GlobalSearchScope.projectScope(project) : GlobalSearchScope.packageScope(psiDirectory.getPackage(),findModel.isWithSubdirectories());
      final List<String> words=StringUtil.getWordsIn(findModel.getStringToFind());
      Collections.sort(words,new Comparator<String>(){
        public int compare(        final String o1,        final String o2){
          return o2.length() - o1.length();
        }
      }
);
      Set<VirtualFile> resultFiles=new THashSet<VirtualFile>();
      for (int i=0; i < words.size(); i++) {
        String word=words.get(i);
        List<VirtualFile> virtualFiles=cacheManager.getVirtualFilesWithWord(word,UsageSearchContext.ANY,scope);
        if (i == 0) {
          resultFiles.addAll(virtualFiles);
        }
 else {
          resultFiles.retainAll(virtualFiles);
        }
        if (resultFiles.size() == 0)         break;
      }
      return resultFiles.toArray(new VirtualFile[resultFiles.size()]);
    }
class EnumContentIterator implements ContentIterator {
      List<VirtualFile> myVirtualFiles=new ArrayList<VirtualFile>();
      Pattern fileMaskRegExp=createFileMaskRegExp(findModel);
      public boolean processFile(      VirtualFile fileOrDir){
        if (!fileOrDir.isDirectory() && (fileMaskRegExp == null || fileMaskRegExp.matcher(fileOrDir.getName()).matches())) {
          myVirtualFiles.add(fileOrDir);
        }
        return true;
      }
      public VirtualFile[] getVirtualFiles(){
        return myVirtualFiles.toArray(new VirtualFile[myVirtualFiles.size()]);
      }
    }
    final EnumContentIterator iterator=new EnumContentIterator();
    if (psiDirectory == null) {
      fileIndex.iterateContent(iterator);
    }
 else {
      fileIndex.iterateContentUnderDirectory(psiDirectory.getVirtualFile(),iterator);
    }
    return iterator.getVirtualFiles();
  }
 else {
    List<VirtualFile> vFileList=new ArrayList<VirtualFile>();
    VirtualFile virtualFile=psiDirectory.getVirtualFile();
    addVirtualFilesUnderDirectory(virtualFile,vFileList,findModel.isWithSubdirectories(),createFileMaskRegExp(findModel));
    return vFileList.toArray(new VirtualFile[vFileList.size()]);
  }
}
