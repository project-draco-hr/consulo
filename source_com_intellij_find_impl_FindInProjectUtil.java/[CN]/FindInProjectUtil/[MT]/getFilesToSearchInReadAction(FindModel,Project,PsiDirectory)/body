{
  final FileIndex fileIndex=findModel.getModuleName() == null ? (FileIndex)ProjectRootManager.getInstance(project).getFileIndex() : ModuleRootManager.getInstance(ModuleManager.getInstance(project).findModuleByName(findModel.getModuleName())).getFileIndex();
  if (psiDirectory == null || (findModel.isWithSubdirectories() && fileIndex.isInContent(psiDirectory.getVirtualFile()))) {
    if (!findModel.isRegularExpressions() && findModel.isWholeWordsOnly() && findModel.isCaseSensitive()) {
      final CacheManager cacheManager=((PsiManagerImpl)PsiManager.getInstance(project)).getCacheManager();
      final GlobalSearchScope scope=psiDirectory == null || psiDirectory.getPackage() == null ? GlobalSearchScope.projectScope(project) : GlobalSearchScope.packageScope(psiDirectory.getPackage(),findModel.isWithSubdirectories());
      List<VirtualFile> virtualFiles=cacheManager.getVirtualFilesWithWord(findModel.getStringToFind(),UsageSearchContext.ANY,scope);
      return virtualFiles.toArray(new VirtualFile[virtualFiles.size()]);
    }
class EnumContentIterator implements ContentIterator {
      List<VirtualFile> myVirtualFiles=new ArrayList<VirtualFile>();
      Pattern fileMaskRegExp=createFileMaskRegExp(findModel);
      public boolean processFile(      VirtualFile fileOrDir){
        if (!fileOrDir.isDirectory() && (fileMaskRegExp == null || fileMaskRegExp.matcher(fileOrDir.getName()).matches())) {
          myVirtualFiles.add(fileOrDir);
        }
        return true;
      }
      public VirtualFile[] getVirtualFiles(){
        return myVirtualFiles.toArray(new VirtualFile[myVirtualFiles.size()]);
      }
    }
    final EnumContentIterator iterator=new EnumContentIterator();
    if (psiDirectory == null) {
      fileIndex.iterateContent(iterator);
    }
 else {
      fileIndex.iterateContentUnderDirectory(psiDirectory.getVirtualFile(),iterator);
    }
    return iterator.getVirtualFiles();
  }
 else {
    List<VirtualFile> vFileList=new ArrayList<VirtualFile>();
    VirtualFile virtualFile=psiDirectory.getVirtualFile();
    addVirtualFilesUnderDirectory(virtualFile,vFileList,findModel.isWithSubdirectories(),createFileMaskRegExp(findModel));
    return vFileList.toArray(new VirtualFile[vFileList.size()]);
  }
}
