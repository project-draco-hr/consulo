{
  Document document=editor.getDocument();
  int selectionStart=editor.getSelectionModel().getLeadSelectionOffset();
  PsiFile file=PsiDocumentManager.getInstance(project).getPsiFile(document);
  if (file == null)   return;
  int offset=editor.getCaretModel().getOffset();
  final FileType fileType=file.getFileType();
  HighlighterIterator iterator=((EditorEx)editor).getHighlighter().createIterator(offset);
  int depth=0;
  Language braceType;
  boolean isBeforeLBrace=false;
  if (isLStructuralBrace(fileType,iterator,document.getCharsSequence())) {
    isBeforeLBrace=true;
    depth=-1;
    braceType=getBraceType(iterator);
  }
 else {
    braceType=null;
  }
  boolean moved=false;
  while (true) {
    if (iterator.atEnd())     return;
    if (isRStructuralBrace(fileType,iterator,document.getCharsSequence()) && (braceType == getBraceType(iterator) || braceType == null)) {
      if (moved) {
        if (depth == 0)         break;
        depth--;
      }
      if (braceType == null) {
        braceType=getBraceType(iterator);
      }
    }
 else     if (isLStructuralBrace(fileType,iterator,document.getCharsSequence()) && (braceType == getBraceType(iterator) || braceType == null)) {
      if (braceType == null) {
        braceType=getBraceType(iterator);
      }
      depth++;
    }
    moved=true;
    iterator.advance();
  }
  int end=isBeforeLBrace ? iterator.getEnd() : iterator.getStart();
  editor.getCaretModel().moveToOffset(end);
  editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
  if (isWithSelection) {
    editor.getSelectionModel().setSelection(selectionStart,editor.getCaretModel().getOffset());
  }
 else {
    editor.getSelectionModel().removeSelection();
  }
}
