{
  final Ref<Exception> refEx=new Ref<Exception>();
  final HashSet<String> variables=new HashSet<String>();
  ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
    public void run(){
      try {
        for (        String path : getParameters().projectsToConvert) {
          final File classpathfile=new File(path,EclipseXml.DOT_CLASSPATH_EXT);
          if (classpathfile.exists()) {
            final Element classpathElement=JDOMUtil.loadDocument(classpathfile).getRootElement();
            EclipseClasspathReader.collectVariables(variables,classpathElement);
          }
        }
      }
 catch (      IOException e) {
        refEx.set(e);
      }
catch (      JDOMException e) {
        refEx.set(e);
      }
    }
  }
,EclipseBundle.message("eclipse.import.converting"),false,currentProject);
  if (!refEx.isNull()) {
    Messages.showErrorDialog(dstProject,refEx.get().getMessage(),getTitle());
    return false;
  }
  final HashMap<String,String> map=new HashMap<String,String>();
  for (  String v : variables) {
    map.put(v,null);
  }
  if (!ProjectMacrosUtil.checkMacros(dstProject,map)) {
    return false;
  }
  return true;
}
