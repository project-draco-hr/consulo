{
  final List<Pair<Element,VirtualFile>> files=new ArrayList<Pair<Element,VirtualFile>>();
  final VirtualFileManager vfManager=VirtualFileManager.getInstance();
  for (  final Object o : parentNode.getChildren(BUILD_FILE)) {
    final Element element=(Element)o;
    final String url=element.getAttributeValue(URL);
    final VirtualFile file=vfManager.findFileByUrl(url);
    if (file != null) {
      files.add(new Pair<Element,VirtualFile>(element,file));
    }
  }
  myAntFileToContextFileMap.clear();
  for (  final Object o : parentNode.getChildren(CONTEXT_MAPPING)) {
    final Element element=(Element)o;
    final String url=element.getAttributeValue(URL);
    final String contextUrl=element.getAttributeValue(CONTEXT);
    final VirtualFile file=vfManager.findFileByUrl(url);
    final VirtualFile contextFile=vfManager.findFileByUrl(contextUrl);
    if (file != null && contextFile != null) {
      myAntFileToContextFileMap.put(file,contextFile);
    }
  }
  final String title=AntBundle.message("loading.ant.config.progress");
  queueLater(new Task.Backgroundable(getProject(),title,false){
    public void run(    @NotNull final ProgressIndicator indicator){
      indicator.setIndeterminate(true);
      indicator.pushState();
      try {
        indicator.setText(title);
        ApplicationManager.getApplication().runReadAction(new Runnable(){
          public void run(){
            try {
              myInitializing=true;
              final AntBuildFile[] currentFiles=getBuildFiles();
              for (              AntBuildFile file : currentFiles) {
                removeBuildFile(file);
              }
              List<Pair<Element,AntBuildFileBase>> buildFiles=new ArrayList<Pair<Element,AntBuildFileBase>>(files.size());
              for (              Pair<Element,VirtualFile> pair : files) {
                final Element element=pair.getFirst();
                final VirtualFile file=pair.getSecond();
                try {
                  final AntBuildFileBase buildFile=addBuildFileImpl(file);
                  buildFile.readProperties(element);
                  buildFiles.add(new Pair<Element,AntBuildFileBase>(element,buildFile));
                }
 catch (                AntNoFileException ignored) {
                }
catch (                InvalidDataException e) {
                  LOG.error(e);
                }
              }
              for (              Pair<Element,AntBuildFileBase> pair : buildFiles) {
                final AntBuildFileBase buildFile=pair.getSecond();
                buildFile.updateProperties();
                final VirtualFile vFile=buildFile.getVirtualFile();
                final String buildFileUrl=vFile != null ? vFile.getUrl() : null;
                for (                final Object o1 : pair.getFirst().getChildren(EXECUTE_ON_ELEMENT)) {
                  final Element e=(Element)o1;
                  final String eventId=e.getAttributeValue(EVENT_ELEMENT);
                  ExecutionEvent event=null;
                  final String targetName=e.getAttributeValue(TARGET_ELEMENT);
                  if (ExecuteBeforeCompilationEvent.TYPE_ID.equals(eventId)) {
                    event=ExecuteBeforeCompilationEvent.getInstance();
                  }
 else                   if (ExecuteAfterCompilationEvent.TYPE_ID.equals(eventId)) {
                    event=ExecuteAfterCompilationEvent.getInstance();
                  }
 else                   if ("beforeRun".equals(eventId)) {
                    final String configType=e.getAttributeValue("runConfigurationType");
                    final String configName=e.getAttributeValue("runConfigurationName");
                    convertToBeforeRunTask(myProject,buildFileUrl,targetName,configType,configName);
                  }
 else                   if (ExecuteCompositeTargetEvent.TYPE_ID.equals(eventId)) {
                    try {
                      event=new ExecuteCompositeTargetEvent(targetName);
                    }
 catch (                    WrongNameFormatException e1) {
                      LOG.info(e1);
                      event=null;
                    }
                  }
                  if (event != null) {
                    try {
                      event.readExternal(e,getProject());
                      setTargetForEvent(buildFile,targetName,event);
                    }
 catch (                    InvalidDataException readFailed) {
                      LOG.info(readFailed.getMessage());
                    }
                  }
                }
              }
              AntWorkspaceConfiguration.getInstance(getProject()).loadFileProperties();
            }
 catch (            InvalidDataException e) {
              LOG.error(e);
            }
 finally {
              updateRegisteredActions();
              myInitializing=false;
              myIsInitialized=Boolean.TRUE;
              ApplicationManager.getApplication().invokeLater(new Runnable(){
                public void run(){
                  myEventDispatcher.getMulticaster().configurationLoaded();
                }
              }
);
            }
          }
        }
);
      }
  finally {
        indicator.popState();
      }
    }
  }
);
}
