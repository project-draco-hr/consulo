{
  super(project);
  getProperties().registerProperty(DEFAULT_ANT,AntReference.EXTERNALIZER);
  getProperties().rememberKey(INSTANCE);
  getProperties().rememberKey(DEFAULT_JDK_NAME);
  INSTANCE.set(getProperties(),this);
  myAntWorkspaceConfiguration=antWorkspaceConfiguration;
  myPsiManager=PsiManager.getInstance(project);
  myStartupManager=StartupManager.getInstance(project);
  addAntConfigurationListener(new AntConfigurationListener(){
    public void configurationLoaded(){
      restartDaemon();
    }
    public void buildFileChanged(    final AntBuildFile buildFile){
      restartDaemon();
    }
    public void buildFileAdded(    final AntBuildFile buildFile){
      restartDaemon();
    }
    public void buildFileRemoved(    final AntBuildFile buildFile){
      restartDaemon();
    }
    private void restartDaemon(){
      if (ApplicationManager.getApplication().isDispatchThread()) {
        daemon.restart();
      }
 else {
        SwingUtilities.invokeLater(new Runnable(){
          public void run(){
            daemon.restart();
          }
        }
);
      }
    }
  }
);
  VirtualFileManager.getInstance().addVirtualFileListener(new VirtualFileAdapter(){
    public void beforeFileDeletion(    final VirtualFileEvent event){
      final VirtualFile vFile=event.getFile();
      for (      AntBuildFile file : getBuildFiles()) {
        if (vFile.equals(file.getVirtualFile())) {
          removeBuildFile(file);
          break;
        }
      }
      for (Iterator<Map.Entry<VirtualFile,VirtualFile>> it=myAntFileToContextFileMap.entrySet().iterator(); it.hasNext(); ) {
        final Map.Entry<VirtualFile,VirtualFile> entry=it.next();
        if (vFile.equals(entry.getKey()) || vFile.equals(entry.getValue())) {
          it.remove();
        }
      }
    }
  }
,project);
}
