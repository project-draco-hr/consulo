{
  List<PsiElement> comments=new ArrayList<PsiElement>();
  PsiElement elem=first;
  while (elem != last && elem != null) {
    if (elem instanceof PsiComment) {
      comments.add(elem);
      logger.debug("found comment");
    }
    elem=getNextSibling(elem);
  }
  try {
    ArrayList<CommentRange> found=new ArrayList<CommentRange>();
    Pattern pattern=Pattern.compile(langOpts.getKeyword());
    Document doc=FileDocumentManager.getInstance().getDocument(getFile().getVirtualFile());
    for (int i=0; i < comments.size(); i++) {
      PsiElement comment=comments.get(i);
      String text=comment.getText();
      Matcher match=pattern.matcher(text);
      if (match.find()) {
        PsiElement firstComment=comment;
        PsiElement lastComment=comment;
        int sline=doc.getLineNumber(comment.getTextRange().getStartOffset());
        int eline=doc.getLineNumber(comment.getTextRange().getEndOffset());
        for (int j=i - 1; j >= 0; j--) {
          PsiElement cmt=comments.get(j);
          if (doc.getLineNumber(cmt.getTextRange().getEndOffset()) == sline - 1) {
            firstComment=cmt;
            sline=doc.getLineNumber(cmt.getTextRange().getStartOffset());
          }
 else {
            break;
          }
        }
        for (i=i + 1; i < comments.size(); i++) {
          PsiElement cmt=comments.get(i);
          if (doc.getLineNumber(cmt.getTextRange().getStartOffset()) == eline + 1) {
            lastComment=cmt;
            eline=doc.getLineNumber(cmt.getTextRange().getEndOffset());
          }
 else {
            i--;
            break;
          }
        }
        found.add(new CommentRange(firstComment,lastComment));
      }
    }
    PsiElement point=last;
    if (commentHere && comments.size() > 0 && langOpts.isRelativeBefore()) {
      point=comments.get(0);
    }
    if (commentHere && found.size() == 1) {
      CommentRange range=found.get(0);
      if ((langOpts.isRelativeBefore() && range.getFirst() == comments.get(0)) || (!langOpts.isRelativeBefore() && range.getLast() == comments.get(comments.size() - 1))) {
        String newComment=getCommentText("","");
        resetCommentText();
        String oldComment=doc.getCharsSequence().subSequence(range.getFirst().getTextRange().getStartOffset(),range.getLast().getTextRange().getEndOffset()).toString().trim();
        if (newComment.trim().equals(oldComment)) {
          if (!getLanguageOptions().isAddBlankAfter()) {
            return;
          }
 else {
            PsiElement next=getNextSibling(range.getLast());
            if (next instanceof PsiWhiteSpace && countNewline(next.getText()) > 1) {
              return;
            }
          }
          point=range.getFirst();
        }
 else         if (newComment.length() > 0) {
          int start=range.getFirst().getTextRange().getStartOffset();
          int end=range.getLast().getTextRange().getEndOffset();
          addAction(new CommentAction(CommentAction.ACTION_REPLACE,start,end));
          return;
        }
      }
    }
    for (    CommentRange range : found) {
      int start=range.getFirst().getTextRange().getStartOffset();
      int end=range.getLast().getTextRange().getEndOffset();
      if (range.getFirst() == comments.get(0) && range.getLast() == comments.get(comments.size() - 1)) {
        int startLen=0;
        if (getPreviousSibling(range.getFirst()) instanceof PsiWhiteSpace) {
          startLen=countNewline(getPreviousSibling(range.getFirst()).getText());
        }
        int endLen=0;
        if (getNextSibling(range.getLast()) instanceof PsiWhiteSpace) {
          endLen=countNewline(getNextSibling(range.getLast()).getText());
        }
        if (startLen == 1 && getPreviousSibling(range.getFirst()).getTextRange().getStartOffset() > 0) {
          start=getPreviousSibling(range.getFirst()).getTextRange().getStartOffset();
        }
 else         if (endLen > 0) {
          end=getNextSibling(range.getLast()).getTextRange().getEndOffset();
        }
      }
 else       if (range.getLast() == comments.get(comments.size() - 1)) {
        if (getPreviousSibling(range.getFirst()) instanceof PsiWhiteSpace && countNewline(getPreviousSibling(range.getFirst()).getText()) > 1) {
          start=getPreviousSibling(range.getFirst()).getTextRange().getStartOffset();
        }
      }
 else       if (getNextSibling(range.getLast()) instanceof PsiWhiteSpace) {
        end=getNextSibling(range.getLast()).getTextRange().getEndOffset();
      }
      addAction(new CommentAction(CommentAction.ACTION_DELETE,start,end));
    }
    if (commentHere) {
      String suffix="\n";
      if (point != last && getPreviousSibling(point) != null && getPreviousSibling(point) instanceof PsiWhiteSpace) {
        suffix=getPreviousSibling(point).getText();
        if (countNewline(suffix) == 1) {
          suffix='\n' + suffix;
        }
      }
      if (point != last && getPreviousSibling(point) == null) {
        suffix="\n\n";
      }
      if (getLanguageOptions().isAddBlankAfter() && countNewline(suffix) == 1) {
        suffix+="\n";
      }
      String prefix="";
      if (getPreviousSibling(point) != null) {
        if (getPreviousSibling(point) instanceof PsiComment) {
          prefix="\n\n";
        }
        if (getPreviousSibling(point) instanceof PsiWhiteSpace && getPreviousSibling(getPreviousSibling(point)) != null && getPreviousSibling(getPreviousSibling(point)) instanceof PsiComment) {
          String ws=getPreviousSibling(point).getText();
          int cnt=countNewline(ws);
          if (cnt == 1) {
            prefix="\n";
          }
        }
      }
      addAction(new CommentAction(point == null ? 0 : point.getTextRange().getStartOffset(),prefix,suffix));
    }
  }
 catch (  Exception e) {
    logger.error(e);
  }
}
