{
  final PsiElement element=queryParameters.getElementToSearch();
  if (!GrCucumberUtil.isStepDefinition(element))   return true;
  final GrMethodCall stepDefinition=(GrMethodCall)element;
  final String regexp=GrCucumberUtil.getStepDefinitionPatternText(stepDefinition);
  final String word=CucumberUtil.getTheBiggestWordToSearchByIndex(regexp);
  if (StringUtil.isEmpty(word))   return true;
  final SearchScope searchScope=CucumberStepSearchUtil.restrictScopeToGherkinFiles(new Computable<SearchScope>(){
    public SearchScope compute(){
      return queryParameters.getEffectiveSearchScope();
    }
  }
);
  final TextOccurenceProcessor processor=new TextOccurenceProcessor(){
    @Override public boolean execute(    PsiElement element,    int offsetInElement){
      PsiElement parent=element.getParent();
      if (parent == null)       return true;
      for (      PsiReference ref : parent.getReferences()) {
        if (ref != null && ref.isReferenceTo(stepDefinition)) {
          if (!consumer.process(ref)) {
            return false;
          }
        }
      }
      return true;
    }
  }
;
  short context=UsageSearchContext.IN_STRINGS | UsageSearchContext.IN_CODE;
  PsiSearchHelper instance=PsiSearchHelper.SERVICE.getInstance(element.getProject());
  return instance.processElementsWithWord(processor,searchScope,word,context,true);
}
