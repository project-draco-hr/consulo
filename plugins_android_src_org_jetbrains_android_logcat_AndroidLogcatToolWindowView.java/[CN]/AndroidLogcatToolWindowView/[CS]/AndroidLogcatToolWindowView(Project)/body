{
  myProject=project;
  Disposer.register(myProject,this);
  myDeviceCombo.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      updateLogConsole();
    }
  }
);
  myDeviceCombo.setRenderer(new ListCellRendererWrapper(myDeviceCombo.getRenderer()){
    @Override public void customize(    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      if (value == null) {
        setText("<html><font color='red'>[none]</font></html>");
      }
    }
  }
);
  AndroidLogFilterModel logFilterModel=new AndroidLogFilterModel(AndroidLogcatFiltersPreferences.getInstance(project).TOOL_WINDOW_LOG_LEVEL){
    @Override protected void setCustomFilter(    String filter){
      AndroidLogcatFiltersPreferences.getInstance(project).TOOL_WINDOW_CUSTOM_FILTER=filter;
    }
    @Override protected void saveLogLevel(    Log.LogLevel logLevel){
      AndroidLogcatFiltersPreferences.getInstance(project).TOOL_WINDOW_LOG_LEVEL=logLevel.name();
    }
    @Override public String getCustomFilter(){
      return AndroidLogcatFiltersPreferences.getInstance(project).TOOL_WINDOW_CUSTOM_FILTER;
    }
    @Override protected void setTagFilter(    String tag){
      AndroidLogcatFiltersPreferences.getInstance(project).TOOL_WINDOW_LOG_TAG_FILTER=tag;
    }
    @NotNull @Override protected String getTagFilter(){
      return AndroidLogcatFiltersPreferences.getInstance(project).TOOL_WINDOW_LOG_TAG_FILTER;
    }
  }
;
  myLogConsole=new MyLogConsole(project,logFilterModel);
  myLogConsole.addListener(new LogConsoleListener(){
    @Override public void loggingWillBeStopped(){
      if (myCurrentWriter != null) {
        try {
          myCurrentWriter.close();
        }
 catch (        IOException e) {
          LOG.error(e);
        }
      }
    }
  }
);
  mySearchComponentWrapper.add(myLogConsole.getSearchComponent());
  JComponent consoleComponent=myLogConsole.getComponent();
  DefaultActionGroup group=new DefaultActionGroup();
  group.addAll(myLogConsole.getToolbarActions());
  group.add(new AndroidEnableDdmsAction(AndroidUtils.DDMS_ICON));
  group.add(new MyRestartAction());
  final JComponent tbComp=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,group,false).getComponent();
  myConsoleWrapper.add(tbComp,BorderLayout.WEST);
  myConsoleWrapper.add(consoleComponent,BorderLayout.CENTER);
  Disposer.register(this,myLogConsole);
  myClearLogButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      IDevice device=(IDevice)myDeviceCombo.getSelectedItem();
      if (device != null) {
        AndroidLogcatUtil.clearLogcat(project,device);
        myLogConsole.clear();
      }
    }
  }
);
  AndroidDebugBridge.addDeviceChangeListener(myDeviceChangeListener);
  updateDevices();
  updateLogConsole();
}
