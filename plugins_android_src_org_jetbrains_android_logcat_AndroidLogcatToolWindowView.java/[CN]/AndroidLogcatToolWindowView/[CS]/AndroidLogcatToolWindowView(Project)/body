{
  myProject=project;
  Disposer.register(myProject,this);
  myDeviceCombo.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      updateLogConsole();
    }
  }
);
  myDeviceCombo.setRenderer(new DefaultListCellRenderer(){
    @Override public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean isSelected,    boolean cellHasFocus){
      super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
      if (value == null) {
        setText("<html><font color='red'>[none]</font></html>");
      }
      return this;
    }
  }
);
  LogFilterModel logFilterModel=new AndroidLogFilterModel(AndroidLogcatFiltersPreferences.getInstance(project).TOOL_WINDOW_LOG_LEVEL){
    @Override protected void setCustomFilter(    String filter){
      AndroidLogcatFiltersPreferences.getInstance(project).TOOL_WINDOW_CUSTOM_FILTER=filter;
    }
    @Override protected void saveLogLevel(    Log.LogLevel logLevel){
      AndroidLogcatFiltersPreferences.getInstance(project).TOOL_WINDOW_LOG_LEVEL=logLevel.name();
    }
    @Override public String getCustomFilter(){
      return AndroidLogcatFiltersPreferences.getInstance(project).TOOL_WINDOW_CUSTOM_FILTER;
    }
  }
;
  myLogConsole=new LogConsoleBase(project,new MyLoggingReader(){
  }
,null,false,logFilterModel){
    @Override public boolean isActive(){
      return AndroidLogcatToolWindowView.this.isActive();
    }
  }
;
  mySearchComponentWrapper.add(myLogConsole.getSearchComponent());
  JComponent consoleComponent=myLogConsole.getComponent();
  DefaultActionGroup group=new DefaultActionGroup();
  group.addAll(myLogConsole.getToolbarActions());
  group.add(new AndroidEnableDdmsAction(AndroidUtils.DDMS_ICON));
  group.add(new MyRestartAction());
  final JComponent tbComp=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,group,false).getComponent();
  myConsoleWrapper.add(tbComp,BorderLayout.WEST);
  myConsoleWrapper.add(consoleComponent,BorderLayout.CENTER);
  Disposer.register(this,myLogConsole);
  myClearLogButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      IDevice device=(IDevice)myDeviceCombo.getSelectedItem();
      if (device != null) {
        AndroidLogcatUtil.clearLogcat(project,device);
        myLogConsole.clear();
      }
    }
  }
);
  try {
    AdbManager.run(new Runnable(){
      public void run(){
        AndroidDebugBridge.addDeviceChangeListener(myDeviceChangeListener);
      }
    }
,false);
  }
 catch (  AdbNotRespondingException e) {
    Messages.showErrorDialog(e.getMessage(),CommonBundle.getErrorTitle());
  }
  updateDevices();
  updateLogConsole();
}
