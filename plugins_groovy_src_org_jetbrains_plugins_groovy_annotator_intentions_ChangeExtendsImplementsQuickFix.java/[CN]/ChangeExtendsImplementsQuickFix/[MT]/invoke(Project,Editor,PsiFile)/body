{
  GrCodeReferenceElement[] extendsReferenceElements=GrCodeReferenceElement.EMPTY_ARRAY;
  GrCodeReferenceElement[] implementsReferenceElements=GrCodeReferenceElement.EMPTY_ARRAY;
  if (myExtendsClause != null) {
    extendsReferenceElements=myExtendsClause.getReferenceElements();
  }
  if (myImplementsClause != null) {
    implementsReferenceElements=myImplementsClause.getReferenceElements();
  }
  List<String> classes=new ArrayList<String>();
  List<String> interfaces=new ArrayList<String>();
  for (  GrCodeReferenceElement extendsReferenceElement : extendsReferenceElements) {
    final PsiElement extendsElement=extendsReferenceElement.resolve();
    if (!(extendsElement instanceof PsiClass))     continue;
    if (((PsiClass)extendsElement).isInterface()) {
      interfaces.add(extendsReferenceElement.getCanonicalText());
    }
 else {
      classes.add(extendsReferenceElement.getCanonicalText());
    }
  }
  for (  GrCodeReferenceElement implementsReferenceElement : implementsReferenceElements) {
    final PsiElement implementsElement=implementsReferenceElement.resolve();
    if (!(implementsElement instanceof PsiClass))     continue;
    if (((PsiClass)implementsElement).isInterface()) {
      interfaces.add(implementsReferenceElement.getCanonicalText());
    }
 else {
      classes.add(implementsReferenceElement.getCanonicalText());
    }
  }
  if (myExtendsClause != null) {
    final ASTNode extendsClauseNode=myExtendsClause.getNode();
    extendsClauseNode.getTreeParent().removeChild(extendsClauseNode);
  }
  if (myImplementsClause != null) {
    final ASTNode implClauseNode=myImplementsClause.getNode();
    implClauseNode.getTreeParent().removeChild(implClauseNode);
  }
  if (!classes.isEmpty()) {
    addNewClause(classes,project,true);
  }
  if (!interfaces.isEmpty()) {
    addNewClause(interfaces,project,false);
  }
  CodeStyleManager.getInstance(project).reformatText(myClass.getContainingFile(),myClass.getTextRange().getStartOffset(),myClass.getBody().getTextOffset() + 2);
}
