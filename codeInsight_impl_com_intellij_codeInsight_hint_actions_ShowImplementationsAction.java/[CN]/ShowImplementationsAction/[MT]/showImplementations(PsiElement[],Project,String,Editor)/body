{
  if (impls == null || impls.length == 0)   return;
  FeatureUsageTracker.getInstance().triggerFeatureUsed("codeassists.quickdefinition");
  if (LookupManager.getInstance(project).getActiveLookup() != null) {
    FeatureUsageTracker.getInstance().triggerFeatureUsed("codeassists.quickdefinition.lookup");
  }
  final ImplementationViewComponent component=new ImplementationViewComponent(impls);
  if (component.hasElementsToShow()) {
    final JBPopup popup=JBPopupFactory.getInstance().createComponentPopupBuilder(component,component.getPrefferedFocusableComponent()).setRequestFocusIfNotLookupOrSearch(project).setLookupAndSearchUpdater(new Condition<PsiElement>(){
      public boolean value(      final PsiElement element){
        updateElementImplementations(element,editor,project);
        return false;
      }
    }
,project).setDimensionServiceKey(project,"ShowImplementationPopup",false).setResizable(true).setMovable(true).setTitle(CodeInsightBundle.message("implementation.view.title",text)).createPopup();
    popup.showInBestPositionFor(DataManager.getInstance().getDataContext());
    component.setHint(popup);
  }
}
