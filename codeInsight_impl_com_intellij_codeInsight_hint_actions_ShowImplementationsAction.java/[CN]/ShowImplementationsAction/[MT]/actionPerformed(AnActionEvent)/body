{
  final DataContext dataContext=e.getDataContext();
  Project project=(Project)dataContext.getData(DataConstants.PROJECT);
  Editor editor=(Editor)dataContext.getData(DataConstants.EDITOR);
  PsiFile file=(PsiFile)dataContext.getData(DataConstants.PSI_FILE);
  final RelativePoint hintPosition=JBPopupFactory.getInstance().guessBestPopupLocation(dataContext);
  if (project == null || file == null)   return;
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  PsiElement element;
  if (editor != null) {
    element=TargetElementUtil.findTargetElement(editor,TargetElementUtil.ELEMENT_NAME_ACCEPTED | TargetElementUtil.REFERENCED_ELEMENT_ACCEPTED | TargetElementUtil.LOOKUP_ITEM_ACCEPTED| TargetElementUtil.NEW_AS_CONSTRUCTOR| TargetElementUtil.THIS_ACCEPTED| TargetElementUtil.SUPER_ACCEPTED);
  }
 else {
    element=(PsiElement)dataContext.getData(DataConstants.PSI_ELEMENT);
  }
  final PsiReference ref;
  if (element == null && editor != null) {
    ref=TargetElementUtil.findReference(editor,editor.getCaretModel().getOffset());
    if (ref != null) {
      final PsiElement parent=ref.getElement().getParent();
      if (parent instanceof PsiMethodCallExpression) {
        element=parent;
      }
    }
  }
 else {
    ref=null;
  }
  if (element instanceof PsiAnonymousClass) {
    element=((PsiAnonymousClass)element).getBaseClassType().resolve();
  }
  PsiElement[] impls=null;
  if (element != null) {
    if (element instanceof PsiPackage)     return;
    impls=getSelfAndImplementations(editor,file,element);
  }
 else   if (ref instanceof PsiPolyVariantReference) {
    final PsiPolyVariantReference polyReference=(PsiPolyVariantReference)ref;
    final ResolveResult[] results=polyReference.multiResolve(false);
    impls=new PsiElement[results.length];
    for (int i=0; i < results.length; i++) {
      ResolveResult result=results[i];
      impls[i]=result.getElement();
    }
  }
  if (impls == null || impls.length == 0)   return;
  FeatureUsageTracker.getInstance().triggerFeatureUsed("codeassists.quickdefinition");
  if (LookupManager.getInstance(project).getActiveLookup() != null) {
    FeatureUsageTracker.getInstance().triggerFeatureUsed("codeassists.quickdefinition.lookup");
  }
  final PsiElement[] implsFinal=impls;
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          final ImplementationViewComponent component=new ImplementationViewComponent(implsFinal);
          final JBPopup popup=JBPopupFactory.getInstance().createComponentPopup(component,component.getPrefferedFocusableComponent());
          popup.show(hintPosition);
          component.setHint(popup);
        }
      }
);
    }
  }
);
}
