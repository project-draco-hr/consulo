{
  if (hasSyntaxErrors(file)) {
    return;
  }
  final Document document=FileDocumentManager.getInstance().getDocument(file);
  if (willBeHighlightedAnyway(file))   return;
  final PsiFile psiFile=PsiManager.getInstance(myProject).findFile(file);
  if (psiFile == null)   return;
  if (!myProject.isOpen())   return;
  StatusBar statusBar=WindowManager.getInstance().getStatusBar(myProject);
  try {
    if (statusBar != null) {
      statusBar.setInfo("Checking '" + file.getPresentableUrl() + "'");
    }
    GeneralHighlightingPass pass=new GeneralHighlightingPass(myProject,psiFile,document,0,document.getTextLength(),false,true){
      protected HighlightInfoHolder createInfoHolder(){
        final HighlightInfoFilter[] filters=ApplicationManager.getApplication().getComponents(HighlightInfoFilter.class);
        return new HighlightInfoHolder(psiFile,filters){
          public boolean add(          HighlightInfo info){
            if (info != null && info.getSeverity() == HighlightSeverity.ERROR) {
              throw new HaveGotErrorException(info,myHasErrorElement);
            }
            return super.add(info);
          }
        }
;
      }
    }
;
    pass.doCollectInformation(progressIndicator);
  }
 catch (  HaveGotErrorException e) {
    ProblemImpl problem=new ProblemImpl(file,e.myHighlightInfo,e.myHasErrorElement);
    reportProblems(file,Collections.<Problem>singleton(problem));
  }
 finally {
    if (statusBar != null) {
      statusBar.setInfo("");
    }
  }
}
