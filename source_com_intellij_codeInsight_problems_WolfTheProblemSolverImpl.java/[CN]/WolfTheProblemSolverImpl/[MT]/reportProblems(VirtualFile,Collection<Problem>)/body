{
  if (problems.isEmpty()) {
    clearProblems(file);
    return;
  }
  if (!isToBeHighlighted(file))   return;
  boolean hasProblemsBefore;
  boolean fireChanged;
synchronized (myProblems) {
    final ProblemFileInfo oldInfo=myProblems.remove(file);
    hasProblemsBefore=oldInfo != null;
    ProblemFileInfo storedProblems=new ProblemFileInfo();
    myProblems.put(file,storedProblems);
    for (    Problem problem : problems) {
      storedProblems.problems.add(problem);
      storedProblems.hasSyntaxErrors|=((ProblemImpl)problem).isSyntaxOnly();
      myCheckingQueue.addIfAbsent(file);
    }
    fireChanged=hasProblemsBefore && !oldInfo.equals(storedProblems);
  }
  if (!hasProblemsBefore) {
    fireProblemListeners.problemsAppeared(file);
  }
 else   if (fireChanged) {
    fireProblemListeners.problemsChanged(file);
  }
}
