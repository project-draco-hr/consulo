{
  final ExecutorService taskRunner=Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());
  final EmbeddedJavac javac=new EmbeddedJavac(taskRunner);
  final File srcRootUtil=new File("C:/tmp/MoveClassProblem/util/src");
  final File srcRootMain=new File("C:/tmp/MoveClassProblem/main/src");
  final List<File> sources=new ArrayList<File>();
  collectFiles(srcRootUtil,sources,new FileFilter(){
    public boolean accept(    File pathname){
      return pathname.getName().endsWith(".java");
    }
  }
);
  collectFiles(srcRootMain,sources,new FileFilter(){
    public boolean accept(    File pathname){
      return pathname.getName().endsWith(".java");
    }
  }
);
  final Map<File,Set<File>> outputs=new HashMap<File,Set<File>>();
  outputs.put(new File("C:/tmp/MoveClassProblem/_util_out_"),Collections.singleton(srcRootUtil));
  outputs.put(new File("C:/tmp/MoveClassProblem/_main_out_"),Collections.singleton(srcRootMain));
  for (  File file : outputs.keySet()) {
    file.mkdirs();
  }
  final List<String> options=Arrays.asList(new String[]{});
  final List<File> classpath=Collections.emptyList();
  final List<File> platformCp=Collections.emptyList();
  javac.compile(options,sources,classpath,platformCp,outputs,new EmbeddedJavac.OutputConsumer(){
    public void outputLineAvailable(    String line){
      System.out.println("OUTPUT: " + line);
    }
    public void report(    Diagnostic<? extends JavaFileObject> diagnostic){
      System.out.println("DIAGNOSTIC: " + diagnostic.getKind().name() + "/"+ diagnostic.getMessage(Locale.US));
    }
  }
);
  taskRunner.shutdownNow();
}
