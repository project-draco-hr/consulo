{
  if (files.isEmpty()) {
    return ExitCode.OK;
  }
  final ProjectPaths paths=new ProjectPaths(context.getScope().getProject());
  final Collection<File> classpath=paths.getCompilationClasspath(chunk,context.isCompilingTests(),!context.isMake());
  final Collection<File> platformCp=paths.getPlatformCompilationClasspath(chunk,context.isCompilingTests(),!context.isMake());
  final Map<File,Set<File>> outs=buildOutputDirectoriesMap(context,chunk);
  final List<String> options=getCompilationOptions(context,chunk);
  final int ERROR=0, WARNING=1;
  final int[] statistics=new int[]{0,0};
  final boolean compilationOk=myJavacCompiler.compile(options,files,classpath,platformCp,outs,new EmbeddedJavac.OutputConsumer(){
    public void outputLineAvailable(    String line){
      context.processMessage(new CompilerMessage(JAVAC_COMPILER_NAME,BuildMessage.Kind.INFO,line));
    }
    public void report(    Diagnostic<? extends JavaFileObject> diagnostic){
      final CompilerMessage.Kind kind;
switch (diagnostic.getKind()) {
case ERROR:
        kind=BuildMessage.Kind.ERROR;
      statistics[ERROR]++;
    break;
case MANDATORY_WARNING:
case WARNING:
  kind=BuildMessage.Kind.WARNING;
statistics[WARNING]++;
break;
default :
kind=BuildMessage.Kind.INFO;
}
final String srcPath;
final JavaFileObject source=diagnostic.getSource();
if (source != null) {
srcPath=PathUtil.toSystemIndependentPath(new File(source.toUri()).getPath());
}
 else {
srcPath=null;
}
context.processMessage(new CompilerMessage(JAVAC_COMPILER_NAME,kind,diagnostic.getKind().name() + "/" + diagnostic.getMessage(Locale.US),srcPath,diagnostic.getStartPosition(),diagnostic.getEndPosition(),diagnostic.getPosition(),diagnostic.getLineNumber(),diagnostic.getColumnNumber()));
}
}
);
if (!compilationOk || statistics[ERROR] > 0) {
throw new ProjectBuildException("Compilation failed: errors: " + statistics[ERROR] + "; warnings: "+ statistics[WARNING]);
}
return ExitCode.OK;
}
