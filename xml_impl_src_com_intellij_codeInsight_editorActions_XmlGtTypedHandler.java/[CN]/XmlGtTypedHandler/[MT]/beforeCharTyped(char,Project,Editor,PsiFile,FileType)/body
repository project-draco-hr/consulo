{
  final WebEditorOptions webEditorOptions=WebEditorOptions.getInstance();
  if (c == '>' && webEditorOptions != null && webEditorOptions.isAutomaticallyInsertClosingTag() && (editedFile.getLanguage() instanceof XMLLanguage || editedFile.getViewProvider().getBaseLanguage() instanceof XMLLanguage)) {
    PsiDocumentManager.getInstance(project).commitAllDocuments();
    PsiFile file=PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument());
    FileViewProvider provider=editedFile.getViewProvider();
    int offset=editor.getCaretModel().getOffset();
    PsiElement element;
    if (offset < editor.getDocument().getTextLength()) {
      element=provider.findElementAt(offset,XMLLanguage.class);
      if (!(element instanceof PsiWhiteSpace)) {
        boolean nonAcceptableDelimiter=true;
        if (element instanceof XmlToken) {
          IElementType tokenType=((XmlToken)element).getTokenType();
          if (tokenType == XmlTokenType.XML_START_TAG_START || tokenType == XmlTokenType.XML_END_TAG_START) {
            if (offset > 0) {
              PsiElement previousElement=provider.findElementAt(offset - 1,XMLLanguage.class);
              if (previousElement instanceof XmlToken) {
                tokenType=((XmlToken)previousElement).getTokenType();
                element=previousElement;
                nonAcceptableDelimiter=false;
              }
            }
          }
          if (tokenType == XmlTokenType.XML_TAG_END || tokenType == XmlTokenType.XML_EMPTY_ELEMENT_END && element.getTextOffset() == offset - 1) {
            editor.getCaretModel().moveToOffset(offset + 1);
            editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
            return Result.STOP;
          }
        }
        if (nonAcceptableDelimiter)         return Result.CONTINUE;
      }
 else {
        PsiElement previousElement=provider.findElementAt(offset - 1,XMLLanguage.class);
        if (previousElement instanceof XmlToken) {
          final IElementType tokenType=((XmlToken)previousElement).getTokenType();
          if (tokenType == XmlTokenType.XML_EMPTY_ELEMENT_END) {
            return Result.STOP;
          }
        }
      }
      PsiElement parent=element.getParent();
      if (parent instanceof XmlText) {
        final String text=parent.getText();
        final int index=offset - parent.getTextOffset() - 1;
        if (index >= 0 && text.charAt(index) == '/') {
          return Result.CONTINUE;
        }
        element=parent.getPrevSibling();
      }
 else       if (parent instanceof XmlTag && !(element.getPrevSibling() instanceof XmlTag)) {
        element=parent;
      }
 else       if (parent instanceof XmlAttributeValue) {
        element=parent;
      }
    }
 else {
      element=provider.findElementAt(editor.getDocument().getTextLength() - 1,XMLLanguage.class);
      if (element == null)       return Result.CONTINUE;
      element=element.getParent();
    }
    if (element instanceof XmlAttributeValue) {
      element=element.getParent().getParent();
    }
    while (element instanceof PsiWhiteSpace)     element=element.getPrevSibling();
    if (element instanceof XmlDocument) {
      element=element.getLastChild();
    }
    if (element == null)     return Result.CONTINUE;
    if (!(element instanceof XmlTag)) {
      if (element instanceof XmlTokenImpl && element.getPrevSibling() != null && element.getPrevSibling().getText().equals("<")) {
        editor.getDocument().insertString(offset,"</" + element.getText() + ">");
      }
      return Result.CONTINUE;
    }
    XmlTag tag=(XmlTag)element;
    if (XmlUtil.getTokenOfType(tag,XmlTokenType.XML_TAG_END) != null)     return Result.CONTINUE;
    if (XmlUtil.getTokenOfType(tag,XmlTokenType.XML_EMPTY_ELEMENT_END) != null)     return Result.CONTINUE;
    final XmlToken startToken=XmlUtil.getTokenOfType(tag,XmlTokenType.XML_START_TAG_START);
    if (startToken == null || !startToken.getText().equals("<"))     return Result.CONTINUE;
    final String name=tag.getName();
    if (tag instanceof HtmlTag && HtmlUtil.isSingleHtmlTag(name))     return Result.CONTINUE;
    if ("".equals(name))     return Result.CONTINUE;
    int tagOffset=tag.getTextRange().getStartOffset();
    final XmlToken nameToken=XmlUtil.getTokenOfType(tag,XmlTokenType.XML_NAME);
    if (nameToken != null && nameToken.getTextRange().getStartOffset() > offset)     return Result.CONTINUE;
    HighlighterIterator iterator=((EditorEx)editor).getHighlighter().createIterator(tagOffset);
    if (BraceMatchingUtil.matchBrace(editor.getDocument().getCharsSequence(),editedFile.getFileType(),iterator,true,true))     return Result.CONTINUE;
    boolean insertedCData=false;
    if (name.indexOf(':') != -1) {
      final XmlElementDescriptor descriptor=tag.getDescriptor();
      if (descriptor instanceof XmlElementDescriptorWithCDataContent) {
        final XmlElementDescriptorWithCDataContent cDataContainer=(XmlElementDescriptorWithCDataContent)descriptor;
        if (cDataContainer.requiresCdataBracesInContext(tag)) {
          @NonNls final String cDataStart="><![CDATA[\n";
          final String inserted=cDataStart + "\n]]>";
          editor.getDocument().insertString(offset,inserted);
          final int newoffset=offset + cDataStart.length();
          editor.getCaretModel().moveToOffset(newoffset);
          offset+=inserted.length();
          insertedCData=true;
        }
      }
    }
    editor.getDocument().insertString(offset,"</" + name + ">");
    if (insertedCData) {
      PsiDocumentManager.getInstance(project).commitDocument(editor.getDocument());
      try {
        CodeStyleManager.getInstance(project).adjustLineIndent(file,editor.getCaretModel().getOffset());
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
    }
    return insertedCData ? Result.STOP : Result.CONTINUE;
  }
  return Result.CONTINUE;
}
