{
  final DefaultListModel model=new DefaultListModel();
  model.addElement(CODE_OCCURRENCES);
  model.addElement(ALL_OCCURRENCES);
  final JList list=new JBList(model);
  list.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    final ListSelectionEvent e){
      final String selectedValue=(String)list.getSelectedValue();
      if (selectedValue == null)       return;
      dropHighlighters();
      final MarkupModel markupModel=myEditor.getMarkupModel();
      if (selectedValue == ALL_OCCURRENCES) {
        for (        Pair<PsiElement,TextRange> pair : stringUsages) {
          final TextRange textRange=pair.second.shiftRight(pair.first.getTextOffset());
          final RangeHighlighter rangeHighlighter=markupModel.addRangeHighlighter(textRange.getStartOffset(),textRange.getEndOffset(),HighlighterLayer.SELECTION - 1,myAttributes,HighlighterTargetArea.EXACT_RANGE);
          myRangeHighlighters.add(rangeHighlighter);
        }
      }
      for (      PsiReference reference : refs) {
        final PsiElement element=reference.getElement();
        if (element == null)         continue;
        final TextRange textRange=element.getTextRange();
        final RangeHighlighter rangeHighlighter=markupModel.addRangeHighlighter(textRange.getStartOffset(),textRange.getEndOffset(),HighlighterLayer.SELECTION - 1,myAttributes,HighlighterTargetArea.EXACT_RANGE);
        myRangeHighlighters.add(rangeHighlighter);
      }
    }
  }
);
  JBPopupFactory.getInstance().createListPopupBuilder(list).setTitle("String occurrences found").setMovable(false).setResizable(false).setRequestFocus(true).setItemChoosenCallback(new Runnable(){
    public void run(){
      runRenameTemplate(nameSuggestions,refs,list.getSelectedValue() == ALL_OCCURRENCES ? stringUsages : new ArrayList<Pair<PsiElement,TextRange>>(),scope,containingFile);
    }
  }
).addListener(new JBPopupAdapter(){
    @Override public void onClosed(    LightweightWindowEvent event){
      dropHighlighters();
    }
  }
).createPopup().showInBestPositionFor(myEditor);
}
