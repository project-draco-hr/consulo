{
  for (  AutomaticRenamerFactory renamerFactory : Extensions.getExtensions(AutomaticRenamerFactory.EP_NAME)) {
    if (renamerFactory.isApplicable(elementToRename)) {
      final List<UsageInfo> usages=new ArrayList<UsageInfo>();
      final AutomaticRenamer renamer=renamerFactory.createRenamer(elementToRename,newName,new ArrayList<UsageInfo>());
      if (renamer.hasAnythingToRename()) {
        if (!ApplicationManager.getApplication().isUnitTestMode()) {
          final AutomaticRenamingDialog renamingDialog=new AutomaticRenamingDialog(myProject,renamer);
          renamingDialog.show();
          if (!renamingDialog.isOK())           return;
        }
        final Runnable runnable=new Runnable(){
          public void run(){
            renamer.findUsages(usages,false,false);
          }
        }
;
        if (!ProgressManager.getInstance().runProcessWithProgressSynchronously(runnable,RefactoringBundle.message("searching.for.variables"),true,myProject)) {
          return;
        }
        final UsageInfo[] usageInfos=usages.toArray(new UsageInfo[usages.size()]);
        for (        final PsiNamedElement element : renamer.getElements()) {
          ApplicationManager.getApplication().runWriteAction(new Runnable(){
            public void run(){
              RenameUtil.doRenameGenericNamedElement(element,renamer.getRenames().get(element),RenameProcessor.extractUsagesForElement(element,usageInfos),null);
            }
          }
);
        }
      }
    }
  }
}
