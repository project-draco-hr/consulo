{
  EditorColorsManager colorsManager=EditorColorsManager.getInstance();
  if (myElementToRename instanceof PsiNameIdentifierOwner) {
    PsiElement nameId=((PsiNameIdentifierOwner)myElementToRename).getNameIdentifier();
    LOG.assertTrue(nameId != null);
    TextRange range=InjectedLanguageManager.getInstance(myProject).injectedToHost(nameId,nameId.getTextRange());
    rangesToHighlight.put(range,colorsManager.getGlobalScheme().getAttributes(EditorColors.WRITE_SEARCH_RESULT_ATTRIBUTES));
  }
  for (  PsiReference ref : refs) {
    final PsiElement element=ref.getElement();
    TextRange range=ref.getRangeInElement().shiftRight(InjectedLanguageManager.getInstance(element.getProject()).injectedToHost(element,element.getTextRange().getStartOffset()));
    ReadWriteAccessDetector writeAccessDetector=ReadWriteAccessDetector.findDetector(element);
    boolean isForWrite=writeAccessDetector != null && ReadWriteAccessDetector.Access.Write == writeAccessDetector.getExpressionAccess(element);
    TextAttributes attributes=colorsManager.getGlobalScheme().getAttributes(isForWrite ? EditorColors.WRITE_SEARCH_RESULT_ATTRIBUTES : EditorColors.SEARCH_RESULT_ATTRIBUTES);
    rangesToHighlight.put(range,attributes);
  }
  for (  Pair<PsiElement,TextRange> usage : stringUsages) {
    final TextRange range=usage.second.shiftRight(usage.first.getTextOffset());
    final TextAttributes attributes=colorsManager.getGlobalScheme().getAttributes(EditorColors.SEARCH_RESULT_ATTRIBUTES);
    rangesToHighlight.put(range,attributes);
  }
}
