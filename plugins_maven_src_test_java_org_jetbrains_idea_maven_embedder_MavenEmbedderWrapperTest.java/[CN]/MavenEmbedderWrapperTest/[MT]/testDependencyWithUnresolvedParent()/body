{
  File repo=new File(myDir,"/repo");
  setRepositoryPath(repo.getPath());
  initEmbedder();
  VirtualFile m=createModulePom("foo-parent","<groupId>test</groupId>" + "<artifactId>foo-parent</artifactId>" + "<version>1</version>"+ "<packaging>pom</packaging>");
  myEmbedder.customizeForResolve(new SoutMavenConsole(),EMPTY_MAVEN_PROCESS);
  myEmbedder.execute(m,Collections.EMPTY_LIST,Arrays.asList("install"));
  myEmbedder.reset();
  File fooParentFile=new File(repo,"test/foo-parent/1/foo-parent-1.pom");
  assertTrue(fooParentFile.exists());
  m=createModulePom("foo","<artifactId>foo</artifactId>" + "<version>1</version>" + "<parent>"+ "  <groupId>test</groupId>"+ "  <artifactId>foo-parent</artifactId>"+ "  <version>1</version>"+ "</parent>");
  myEmbedder.customizeForResolve(new SoutMavenConsole(),EMPTY_MAVEN_PROCESS);
  myEmbedder.execute(m,Collections.EMPTY_LIST,Arrays.asList("install"));
  myEmbedder.reset();
  assertTrue(new File(repo,"test/foo/1/foo-1.pom").exists());
  FileUtil.delete(fooParentFile);
  initEmbedder();
  createProjectPom("<groupId>test</groupId>" + "<artifactId>project</artifactId>" + "<version>1</version>"+ "<dependencies>"+ "  <dependency>"+ "    <groupId>test</groupId>"+ "    <artifactId>foo</artifactId>"+ "    <version>1</version>"+ "  </dependency>"+ "</dependencies>");
  myEmbedder.customizeForResolve(new SoutMavenConsole(),EMPTY_MAVEN_PROCESS);
  MavenExecutionResult result=myEmbedder.resolveProject(myProjectPom,Collections.EMPTY_LIST);
  assertOrderedElementsAreEqual(result.getExceptions());
  assertOrderedElementsAreEqual(result.getUnresolvedArtifactIds(),new MavenId("test","foo-parent","1"));
}
