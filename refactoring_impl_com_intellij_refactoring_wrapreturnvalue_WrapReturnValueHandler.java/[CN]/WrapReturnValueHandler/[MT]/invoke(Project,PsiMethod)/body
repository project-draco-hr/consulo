{
  if (method.isConstructor()) {
    CommonRefactoringUtil.showErrorMessage(null,RefactorJBundle.message("cannot.perform.the.refactoring") + RefactorJBundle.message("constructor.returns.can.not.be.wrapped"),this.getHelpID(),project);
    return;
  }
  final PsiType returnType=method.getReturnType();
  if (PsiType.VOID.equals(returnType)) {
    CommonRefactoringUtil.showErrorMessage(null,RefactorJBundle.message("cannot.perform.the.refactoring") + RefactorJBundle.message("method.selected.returns.void"),this.getHelpID(),project);
    return;
  }
  method=SuperMethodWarningUtil.checkSuperMethod(method,RefactoringBundle.message("to.refactor"));
  if (method == null)   return;
  if (method instanceof PsiCompiledElement) {
    CommonRefactoringUtil.showErrorMessage(null,RefactorJBundle.message("cannot.perform.the.refactoring") + RefactorJBundle.message("the.selected.method.cannot.be.wrapped.because.it.is.defined.in.a.non.project.class"),this.getHelpID(),project);
    return;
  }
  new WrapReturnValueDialog(method).show();
}
