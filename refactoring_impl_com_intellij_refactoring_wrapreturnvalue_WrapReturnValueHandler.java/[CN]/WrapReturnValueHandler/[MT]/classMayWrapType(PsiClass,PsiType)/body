{
  final String existingClassName=existingClass.getQualifiedName();
  if (specialNames.containsKey(returnType)) {
    if (specialNames.get(returnType).equals(existingClassName)) {
      return true;
    }
  }
  PsiField instanceField=null;
  final PsiField[] fields=existingClass.getFields();
  int numInstanceFields=0;
  for (  PsiField field : fields) {
    if (!field.hasModifierProperty(PsiModifier.STATIC)) {
      numInstanceFields++;
      instanceField=field;
    }
  }
  if (numInstanceFields != 1) {
    return false;
  }
  final PsiMethod[] constructors=existingClass.getConstructors();
  boolean foundConstructor=false;
  for (  PsiMethod constructor : constructors) {
    final PsiParameter[] parameters=constructor.getParameterList().getParameters();
    if (parameters.length == 1) {
      final PsiParameter parameter=parameters[0];
      final PsiType parameterType=parameter.getType();
      if (parameterType.equals(returnType)) {
        foundConstructor=true;
        break;
      }
    }
  }
  if (!foundConstructor) {
    return false;
  }
  final PsiMethod getter=PropertyUtils.findGetterForField(instanceField);
  return getter != null;
}
