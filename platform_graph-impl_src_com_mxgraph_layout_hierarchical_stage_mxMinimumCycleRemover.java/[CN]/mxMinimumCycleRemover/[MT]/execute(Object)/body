{
  mxGraphHierarchyModel model=layout.getModel();
  final Set<mxGraphHierarchyNode> seenNodes=new HashSet<mxGraphHierarchyNode>();
  final Set<mxGraphHierarchyNode> unseenNodes=new HashSet<mxGraphHierarchyNode>(model.getVertexMapper().values());
  mxGraphHierarchyNode[] rootsArray=null;
  if (model.roots != null) {
    Object[] modelRoots=model.roots.toArray();
    rootsArray=new mxGraphHierarchyNode[modelRoots.length];
    for (int i=0; i < modelRoots.length; i++) {
      Object node=modelRoots[i];
      mxGraphHierarchyNode internalNode=model.getVertexMapper().get(node);
      rootsArray[i]=internalNode;
    }
  }
  model.visit(new mxGraphHierarchyModel.CellVisitor(){
    public void visit(    mxGraphHierarchyNode parent,    mxGraphHierarchyNode cell,    mxGraphHierarchyEdge connectingEdge,    int layer,    int seen){
      if ((cell).isAncestor(parent)) {
        connectingEdge.invert();
        parent.connectsAsSource.remove(connectingEdge);
        parent.connectsAsTarget.add(connectingEdge);
        cell.connectsAsTarget.remove(connectingEdge);
        cell.connectsAsSource.add(connectingEdge);
      }
      seenNodes.add(cell);
      unseenNodes.remove(cell);
    }
  }
,rootsArray,true,null);
  Set<Object> possibleNewRoots=null;
  if (unseenNodes.size() > 0) {
    possibleNewRoots=new HashSet<Object>(unseenNodes);
  }
  Set<mxGraphHierarchyNode> seenNodesCopy=new HashSet<mxGraphHierarchyNode>(seenNodes);
  mxGraphHierarchyNode[] unseenNodesArray=new mxGraphHierarchyNode[1];
  unseenNodes.toArray(unseenNodesArray);
  model.visit(new mxGraphHierarchyModel.CellVisitor(){
    public void visit(    mxGraphHierarchyNode parent,    mxGraphHierarchyNode cell,    mxGraphHierarchyEdge connectingEdge,    int layer,    int seen){
      if ((cell).isAncestor(parent)) {
        connectingEdge.invert();
        parent.connectsAsSource.remove(connectingEdge);
        parent.connectsAsTarget.add(connectingEdge);
        cell.connectsAsTarget.remove(connectingEdge);
        cell.connectsAsSource.add(connectingEdge);
      }
      seenNodes.add(cell);
      unseenNodes.remove(cell);
    }
  }
,unseenNodesArray,true,seenNodesCopy);
  mxGraph graph=layout.getGraph();
  if (possibleNewRoots != null && possibleNewRoots.size() > 0) {
    Iterator<Object> iter=possibleNewRoots.iterator();
    List<Object> roots=model.roots;
    while (iter.hasNext()) {
      mxGraphHierarchyNode node=(mxGraphHierarchyNode)iter.next();
      Object realNode=node.cell;
      int numIncomingEdges=graph.getIncomingEdges(realNode).length;
      if (numIncomingEdges == 0) {
        roots.add(realNode);
      }
    }
  }
}
