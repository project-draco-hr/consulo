{
  max=ParenthesesUtils.stripParentheses(max);
  if (max == null) {
    return null;
  }
  min=ParenthesesUtils.stripParentheses(min);
  if (min == null) {
    return buildExpressionText(max,plusOne,false);
  }
  final Object minConstant=ExpressionUtils.computeConstantExpression(min);
  if (minConstant instanceof Number) {
    final Number minNumber=(Number)minConstant;
    final int minValue;
    if (plusOne) {
      minValue=minNumber.intValue() - 1;
    }
 else {
      minValue=minNumber.intValue();
    }
    if (minValue == 0) {
      return buildExpressionText(max,false,false);
    }
    if (max instanceof PsiLiteralExpression) {
      final Object maxConstant=ExpressionUtils.computeConstantExpression(max);
      if (maxConstant instanceof Number) {
        final Number number=(Number)maxConstant;
        return String.valueOf(number.intValue() - minValue);
      }
    }
    final String maxText=buildExpressionText(max,false,false);
    if (minValue > 0) {
      return maxText + '-' + minValue;
    }
 else {
      return maxText + '+' + -minValue;
    }
  }
  final int precedence=ParenthesesUtils.getPrecedence(min);
  final String minText;
  if (precedence >= ParenthesesUtils.ADDITIVE_PRECEDENCE) {
    minText='(' + min.getText() + ')';
  }
 else {
    minText=min.getText();
  }
  final String maxText=buildExpressionText(max,plusOne,false);
  return maxText + '-' + minText;
}
