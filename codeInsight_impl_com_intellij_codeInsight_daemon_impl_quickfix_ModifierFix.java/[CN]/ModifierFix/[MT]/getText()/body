{
  String name=null;
  PsiElement parent=myVariable == null ? myModifierList.getParent() : myVariable;
  if (parent instanceof PsiClass) {
    name=((PsiClass)parent).getName();
  }
 else   if (parent instanceof PsiMethod) {
    name=PsiFormatUtil.formatMethod((PsiMethod)parent,PsiSubstitutor.EMPTY,PsiFormatUtil.SHOW_NAME | (myShowContainingClass ? PsiFormatUtil.SHOW_CONTAINING_CLASS : 0),0);
  }
 else   if (parent instanceof PsiVariable) {
    name=PsiFormatUtil.formatVariable((PsiVariable)parent,PsiFormatUtil.SHOW_NAME | (myShowContainingClass ? PsiFormatUtil.SHOW_CONTAINING_CLASS : 0),PsiSubstitutor.EMPTY);
  }
 else   if (parent instanceof PsiClassInitializer) {
    PsiClass containingClass=((PsiClassInitializer)parent).getContainingClass();
    String className=containingClass instanceof PsiAnonymousClass ? QuickFixBundle.message("anonymous.class.presentation",((PsiAnonymousClass)containingClass).getBaseClassType().getPresentableText()) : containingClass.getName();
    name=QuickFixBundle.message("class.initializer.presentation",className);
  }
  final String modifierText=myModifier.equals(PsiModifier.PACKAGE_LOCAL) ? QuickFixBundle.message("package.local.visibility.presentation") : myModifier;
  return QuickFixBundle.message(myShouldHave ? "add.modifier.fix" : "remove.modifier.fix",name,modifierText);
}
