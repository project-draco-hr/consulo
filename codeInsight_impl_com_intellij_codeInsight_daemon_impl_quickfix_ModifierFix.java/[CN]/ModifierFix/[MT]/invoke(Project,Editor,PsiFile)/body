{
  final List<PsiModifierList> modifierLists=new ArrayList<PsiModifierList>();
  PsiElement owner=myModifierList.getParent();
  if (owner instanceof PsiMethod) {
    PsiSearchHelper helper=PsiManager.getInstance(project).getSearchHelper();
    PsiModifierList copy=(PsiModifierList)myModifierList.copy();
    changeModifierList(copy);
    final int accessLevel=PsiUtil.getAccessLevel(copy);
    helper.processOverridingMethods(new PsiElementProcessor<PsiMethod>(){
      public boolean execute(      PsiMethod element){
        PsiMethod inheritor=element;
        PsiModifierList list=inheritor.getModifierList();
        if (element.getManager().isInProject(element) && PsiUtil.getAccessLevel(list) < accessLevel) {
          modifierLists.add(list);
        }
        return true;
      }
    }
,(PsiMethod)owner,owner.getResolveScope(),true);
  }
  if (!CodeInsightUtil.prepareFileForWrite(myModifierList.getContainingFile()))   return;
  if (modifierLists.size() > 0) {
    if (Messages.showYesNoDialog(project,QuickFixBundle.message("change.inheritors.visibility.warning.text"),QuickFixBundle.message("change.inheritors.visibility.warning.title"),Messages.getQuestionIcon()) == DialogWrapper.OK_EXIT_CODE) {
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        public void run(){
          for (          final PsiModifierList modifierList : modifierLists) {
            changeModifierList(modifierList);
          }
        }
      }
);
    }
  }
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      changeModifierList(myModifierList);
      UndoManager.getInstance(file.getProject()).markDocumentForUndo(file);
    }
  }
);
}
