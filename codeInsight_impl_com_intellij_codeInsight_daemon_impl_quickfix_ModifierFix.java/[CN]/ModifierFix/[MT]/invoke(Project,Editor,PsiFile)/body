{
  final List<PsiModifierList> modifierLists=new ArrayList<PsiModifierList>();
  PsiElement owner=myModifierList.getParent();
  if (owner instanceof PsiMethod) {
    PsiSearchHelper helper=PsiManager.getInstance(project).getSearchHelper();
    PsiModifierList copy=(PsiModifierList)myModifierList.copy();
    changeModifierList(copy);
    final int accessLevel=PsiUtil.getAccessLevel(copy);
    OverridingMethodsSearch.search((PsiMethod)owner,owner.getResolveScope(),true).forEach(new PsiElementProcessorAdapter<PsiMethod>(new PsiElementProcessor<PsiMethod>(){
      public boolean execute(      PsiMethod inheritor){
        PsiModifierList list=inheritor.getModifierList();
        if (inheritor.getManager().isInProject(inheritor) && PsiUtil.getAccessLevel(list) < accessLevel) {
          modifierLists.add(list);
        }
        return true;
      }
    }
));
  }
  if (!CodeInsightUtilBase.prepareFileForWrite(myModifierList.getContainingFile()))   return;
  if (!modifierLists.isEmpty()) {
    if (Messages.showYesNoDialog(project,QuickFixBundle.message("change.inheritors.visibility.warning.text"),QuickFixBundle.message("change.inheritors.visibility.warning.title"),Messages.getQuestionIcon()) == DialogWrapper.OK_EXIT_CODE) {
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        public void run(){
          for (          final PsiModifierList modifierList : modifierLists) {
            changeModifierList(modifierList);
          }
        }
      }
);
    }
  }
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      changeModifierList(myModifierList);
      UndoUtil.markPsiFileForUndo(file);
    }
  }
);
}
