{
  if (kCASE.equals(builder.getTokenType()) || kDEFAULT.equals(builder.getTokenType()) || mRCURLY.equals(builder.getTokenType())) {
    return;
  }
  GroovyElementType result=Statement.parse(builder);
  if (result.equals(WRONGWAY)) {
    builder.error(GroovyBundle.message("wrong.statement"));
    return;
  }
  if (mSEMI.equals(builder.getTokenType()) || mNLS.equals(builder.getTokenType())) {
    Separators.parse(builder);
  }
  if (kCASE.equals(builder.getTokenType()) || kDEFAULT.equals(builder.getTokenType()) || mRCURLY.equals(builder.getTokenType())) {
    return;
  }
  result=Statement.parse(builder);
  while (!result.equals(WRONGWAY) && (mSEMI.equals(builder.getTokenType()) || mNLS.equals(builder.getTokenType()))) {
    Separators.parse(builder);
    if (kCASE.equals(builder.getTokenType()) || kDEFAULT.equals(builder.getTokenType()) || mRCURLY.equals(builder.getTokenType())) {
      break;
    }
    result=Statement.parse(builder);
    OpenOrClosableBlock.cleanAfterError(builder);
  }
  Separators.parse(builder);
}
