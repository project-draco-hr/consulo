{
  PsiBuilder.Marker marker=builder.mark();
  ParserUtils.getToken(builder,kSWITCH);
  if (!ParserUtils.getToken(builder,mLPAREN,GroovyBundle.message("lparen.expected"))) {
    marker.done(SWITCH_STATEMENT);
    return true;
  }
  if (!StrictContextExpression.parse(builder)) {
    builder.error(GroovyBundle.message("expression.expected"));
  }
  ParserUtils.getToken(builder,mNLS);
  if (!ParserUtils.getToken(builder,mRPAREN,GroovyBundle.message("rparen.expected"))) {
    while (!builder.eof() && !mNLS.equals(builder.getTokenType()) && !mRPAREN.equals(builder.getTokenType())) {
      builder.error(GroovyBundle.message("rparen.expected"));
      builder.advanceLexer();
    }
    if (!ParserUtils.getToken(builder,mRPAREN)) {
      marker.done(SWITCH_STATEMENT);
      return true;
    }
  }
  PsiBuilder.Marker warn=builder.mark();
  ParserUtils.getToken(builder,mNLS);
  if (!mLCURLY.equals(builder.getTokenType())) {
    warn.rollbackTo();
    builder.error(GroovyBundle.message("case.block.expected"));
    marker.done(SWITCH_STATEMENT);
    return true;
  }
  warn.drop();
  parseCaseBlock(builder);
  marker.done(SWITCH_STATEMENT);
  return true;
}
