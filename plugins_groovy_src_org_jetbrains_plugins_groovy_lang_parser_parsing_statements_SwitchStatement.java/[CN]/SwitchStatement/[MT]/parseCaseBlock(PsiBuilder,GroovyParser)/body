{
  ParserUtils.getToken(builder,mLCURLY);
  ParserUtils.getToken(builder,mNLS);
  while (!ParserUtils.getToken(builder,mRCURLY)) {
    if (builder.getTokenType() != kCASE && builder.getTokenType() != kDEFAULT) {
      builder.error("case, default or } expected");
      ParserUtils.skipCountingBraces(builder,TokenSet.create(kCASE,kDEFAULT,mRCURLY));
      if (builder.eof() || ParserUtils.getToken(builder,mRCURLY)) {
        return;
      }
    }
    PsiBuilder.Marker sectionMarker=builder.mark();
    parseCaseLabel(builder,parser);
    ParserUtils.getToken(builder,mNLS);
    if (builder.getTokenType() == mRCURLY) {
      builder.error(GroovyBundle.message("expression.expected"));
    }
 else {
      parser.parseSwitchCaseList(builder);
    }
    sectionMarker.done(CASE_SECTION);
    ParserUtils.getToken(builder,mNLS);
  }
}
