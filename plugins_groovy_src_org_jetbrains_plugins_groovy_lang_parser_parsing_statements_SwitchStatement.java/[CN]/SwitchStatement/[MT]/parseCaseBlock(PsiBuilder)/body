{
  PsiBuilder.Marker marker=builder.mark();
  ParserUtils.getToken(builder,mLCURLY);
  ParserUtils.getToken(builder,mNLS);
  if (ParserUtils.getToken(builder,mRCURLY)) {
    marker.done(CASE_BLOCK);
    return;
  }
  if (!kCASE.equals(builder.getTokenType()) && !kDEFAULT.equals(builder.getTokenType())) {
    builder.error(GroovyBundle.message("case.expected"));
    marker.done(CASE_BLOCK);
    return;
  }
  while (kCASE.equals(builder.getTokenType()) || kDEFAULT.equals(builder.getTokenType())) {
    parseCaseLabel(builder);
    if (ParserUtils.lookAhead(builder,mRCURLY) || ParserUtils.lookAhead(builder,mNLS,mRCURLY)) {
      builder.error(GroovyBundle.message("expression.expected"));
    }
 else {
      parseCaseList(builder);
    }
  }
  ParserUtils.getToken(builder,mRCURLY,GroovyBundle.message("rcurly.expected"));
  marker.done(CASE_BLOCK);
}
