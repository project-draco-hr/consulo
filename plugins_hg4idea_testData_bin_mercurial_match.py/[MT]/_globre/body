def _globre(pat):
    'convert a glob pattern into a regexp'
    (i, n) = (0, len(pat))
    res = ''
    group = 0
    escape = re.escape

    def peek():
        return ((i < n) and pat[i])
    while (i < n):
        c = pat[i]
        i += 1
        if (c not in '*?[{},\\'):
            res += escape(c)
        elif (c == '*'):
            if (peek() == '*'):
                i += 1
                res += '.*'
            else:
                res += '[^/]*'
        elif (c == '?'):
            res += '.'
        elif (c == '['):
            j = i
            if ((j < n) and (pat[j] in '!]')):
                j += 1
            while ((j < n) and (pat[j] != ']')):
                j += 1
            if (j >= n):
                res += '\\['
            else:
                stuff = pat[i:j].replace('\\', '\\\\')
                i = (j + 1)
                if (stuff[0] == '!'):
                    stuff = ('^' + stuff[1:])
                elif (stuff[0] == '^'):
                    stuff = ('\\' + stuff)
                res = ('%s[%s]' % (res, stuff))
        elif (c == '{'):
            group += 1
            res += '(?:'
        elif ((c == '}') and group):
            res += ')'
            group -= 1
        elif ((c == ',') and group):
            res += '|'
        elif (c == '\\'):
            p = peek()
            if p:
                i += 1
                res += escape(p)
            else:
                res += escape(c)
        else:
            res += escape(c)
    return res
