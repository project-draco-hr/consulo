def _buildmatch(pats, tail):
    'build a matching function from a set of patterns'
    try:
        pat = ('(?:%s)' % '|'.join([_regex(k, p, tail) for (k, p) in pats]))
        if (len(pat) > 20000):
            raise OverflowError()
        return re.compile(pat).match
    except OverflowError:
        l = len(pats)
        if (l < 2):
            raise
        (a, b) = (_buildmatch(pats[:(l // 2)], tail), _buildmatch(pats[(l // 2):], tail))
        return (lambda s: (a(s) or b(s)))
    except re.error:
        for (k, p) in pats:
            try:
                re.compile(('(?:%s)' % _regex(k, p, tail)))
            except re.error:
                raise util.Abort(('invalid pattern (%s): %s' % (k, p)))
        raise util.Abort('invalid pattern')
