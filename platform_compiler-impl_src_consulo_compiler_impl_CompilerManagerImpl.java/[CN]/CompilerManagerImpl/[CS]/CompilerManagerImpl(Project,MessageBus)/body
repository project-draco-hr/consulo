{
  myProject=project;
  if (myProject.isDefault()) {
    return;
  }
  myEventPublisher=messageBus.syncPublisher(CompilerTopics.COMPILATION_STATUS);
  List<TranslatingCompiler> translatingCompilers=new ArrayList<TranslatingCompiler>();
  for (  Compiler compiler : Compiler.EP_NAME.getExtensions(project)) {
    compiler.init(this);
    if (compiler instanceof TranslatingCompiler) {
      TranslatingCompiler translatingCompiler=(TranslatingCompiler)compiler;
      translatingCompilers.add(translatingCompiler);
      myTranslatingCompilerInputFileTypes.put(translatingCompiler,Arrays.asList(translatingCompiler.getInputFileTypes()));
      myTranslatingCompilerOutputFileTypes.put(translatingCompiler,Arrays.asList(translatingCompiler.getOutputFileTypes()));
    }
 else {
      myCompilers.add(compiler);
    }
  }
  final List<Chunk<TranslatingCompiler>> chunks=ModuleCompilerUtil.getSortedChunks(createCompilerGraph(translatingCompilers));
  for (  Chunk<TranslatingCompiler> chunk : chunks) {
    myTranslatingCompilers.addAll(chunk.getNodes());
  }
  final File projectGeneratedSrcRoot=CompilerPaths.getGeneratedDataDirectory(project);
  projectGeneratedSrcRoot.mkdirs();
  final LocalFileSystem lfs=LocalFileSystem.getInstance();
  myWatchRoots=lfs.addRootsToWatch(Collections.singletonList(FileUtil.toCanonicalPath(projectGeneratedSrcRoot.getPath())),true);
  Disposer.register(project,new Disposable(){
    @Override public void dispose(){
      lfs.removeWatchedRoots(myWatchRoots);
      if (ApplicationManager.getApplication().isUnitTestMode()) {
        FileUtil.delete(CompilerPaths.getCompilerSystemDirectory(project));
      }
    }
  }
);
}
