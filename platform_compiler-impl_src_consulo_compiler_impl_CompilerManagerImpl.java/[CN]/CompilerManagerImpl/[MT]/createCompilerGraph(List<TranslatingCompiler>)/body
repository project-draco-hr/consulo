{
  return GraphGenerator.create(CachingSemiGraph.create(new GraphGenerator.SemiGraph<TranslatingCompiler>(){
    @Override public Collection<TranslatingCompiler> getNodes(){
      return compilers;
    }
    @Override public Iterator<TranslatingCompiler> getIn(    TranslatingCompiler compiler){
      final Collection<FileType> compilerInput=myTranslatingCompilerInputFileTypes.get(compiler);
      if (compilerInput == null || compilerInput.isEmpty()) {
        return Collections.<TranslatingCompiler>emptySet().iterator();
      }
      final Set<TranslatingCompiler> inCompilers=new HashSet<TranslatingCompiler>();
      for (      Map.Entry<TranslatingCompiler,Collection<FileType>> entry : myTranslatingCompilerOutputFileTypes.entrySet()) {
        final Collection<FileType> outputs=entry.getValue();
        TranslatingCompiler comp=entry.getKey();
        if (outputs != null && ContainerUtil.intersects(compilerInput,outputs)) {
          inCompilers.add(comp);
        }
      }
      return inCompilers.iterator();
    }
  }
));
}
