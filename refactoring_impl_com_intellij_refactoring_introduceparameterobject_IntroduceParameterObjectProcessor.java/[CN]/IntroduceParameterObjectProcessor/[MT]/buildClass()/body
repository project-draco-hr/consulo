{
  final PsiManager manager=method.getManager();
  final Project project=method.getProject();
  if (existingClass != null) {
    return true;
  }
  final ParameterObjectBuilder beanClassBuilder=new ParameterObjectBuilder();
  beanClassBuilder.setProject(myProject);
  beanClassBuilder.setTypeArguments(typeParams);
  beanClassBuilder.setClassName(className);
  beanClassBuilder.setPackageName(packageName);
  for (  PsiParameter parameter : parameters) {
    final boolean setterRequired=paramsNeedingSetters.contains(parameter);
    beanClassBuilder.addField(parameter,setterRequired);
  }
  final String classString;
  try {
    classString=beanClassBuilder.buildBeanClass();
  }
 catch (  IOException e) {
    logger.error(e);
    return false;
  }
  try {
    final PsiJavaFile newFile=(PsiJavaFile)PsiFileFactory.getInstance(project).createFileFromText(className + ".java",classString);
    if (myCreateInnerClass) {
      final PsiClass containingClass=method.getContainingClass();
      final PsiElement innerClass=containingClass.add(newFile.getClasses()[0]);
      JavaCodeStyleManager.getInstance(newFile.getProject()).shortenClassReferences(innerClass);
    }
 else {
      final PsiFile containingFile=method.getContainingFile();
      final PsiDirectory containingDirectory=containingFile.getContainingDirectory();
      final Module module=ModuleUtil.findModuleForPsiElement(containingFile);
      final PsiDirectory directory=PackageUtil.findOrCreateDirectoryForPackage(module,packageName,containingDirectory,true);
      if (directory != null) {
        final CodeStyleManager codeStyleManager=manager.getCodeStyleManager();
        final PsiElement shortenedFile=JavaCodeStyleManager.getInstance(newFile.getProject()).shortenClassReferences(newFile);
        final PsiElement reformattedFile=codeStyleManager.reformat(shortenedFile);
        directory.add(reformattedFile);
      }
 else {
        return false;
      }
    }
  }
 catch (  IncorrectOperationException e) {
    logger.info(e);
    return false;
  }
  return true;
}
