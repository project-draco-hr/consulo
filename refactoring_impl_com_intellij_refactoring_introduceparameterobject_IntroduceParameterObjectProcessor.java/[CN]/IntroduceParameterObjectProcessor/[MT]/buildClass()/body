{
  final PsiManager manager=method.getManager();
  final Project project=method.getProject();
  if (existingClass != null) {
    return;
  }
  final ParameterObjectBuilder beanClassBuilder=new ParameterObjectBuilder();
  final CodeStyleSettingsManager settingsManager=CodeStyleSettingsManager.getInstance(project);
  final CodeStyleSettings settings=settingsManager.getCurrentSettings();
  beanClassBuilder.setCodeStyleSettings(settings);
  beanClassBuilder.setTypeArguments(typeParams);
  beanClassBuilder.setClassName(className);
  beanClassBuilder.setPackageName(packageName);
  for (  PsiParameter parameter : parameters) {
    final boolean setterRequired=paramsNeedingSetters.contains(parameter);
    beanClassBuilder.addField(parameter,setterRequired);
  }
  final String classString;
  try {
    classString=beanClassBuilder.buildBeanClass();
  }
 catch (  IOException e) {
    logger.error(e);
    return;
  }
  try {
    final PsiFile containingFile=method.getContainingFile();
    final PsiDirectory containingDirectory=containingFile.getContainingDirectory();
    final Module module=ModuleUtil.findModuleForPsiElement(containingFile);
    final PsiDirectory directory=PackageUtil.findOrCreateDirectoryForPackage(module,packageName,containingDirectory,true);
    if (directory != null) {
      final PsiFile newFile=PsiFileFactory.getInstance(project).createFileFromText(className + ".java",classString);
      final CodeStyleManager codeStyleManager=manager.getCodeStyleManager();
      final PsiElement shortenedFile=JavaCodeStyleManager.getInstance(newFile.getProject()).shortenClassReferences(newFile);
      final PsiElement reformattedFile=codeStyleManager.reformat(shortenedFile);
      directory.add(reformattedFile);
    }
  }
 catch (  IncorrectOperationException e) {
    logger.error(e);
  }
}
