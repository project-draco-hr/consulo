{
  buildMethodMaps();
  if (myAttributeChildrenMethods.containsKey(method)) {
    return new GetAttributeChildInvocation(method);
  }
  if (myFixedChildrenMethods.containsKey(method)) {
    return new GetFixedChildInvocation(method);
  }
  String qname=myCollectionChildrenGetterMethods.get(method);
  if (qname != null) {
    return new GetCollectionChildInvocation(qname,getFixedChildrenCount(qname));
  }
  qname=myCollectionChildrenAdditionMethods.get(method);
  if (qname != null) {
    final Distinguish annotation=method.getAnnotation(Distinguish.class);
    Distinguisher distinguisher=null;
    if (annotation != null) {
      try {
        distinguisher=annotation.value().newInstance();
      }
 catch (      Exception e) {
        LOG.error(e);
      }
    }
    return new AddChildInvocation(method.getGenericReturnType(),qname,getFixedChildrenCount(qname),distinguisher);
  }
  throw new UnsupportedOperationException("No implementation for method " + method.toString());
}
