{
  final PsiElement position=parameters.getPosition();
  final PsiElement originalPosition=parameters.getOriginalPosition();
  final StaticMemberProcessor processor=new StaticMemberProcessor(position){
    @NotNull @Override protected LookupElement createLookupElement(    @NotNull PsiMember member,    @NotNull final PsiClass containingClass,    boolean shouldImport){
      shouldImport|=originalPosition != null && PsiTreeUtil.isAncestor(containingClass,originalPosition,false);
      if (member instanceof PsiMethod) {
        final JavaMethodCallElement element=new JavaMethodCallElement((PsiMethod)member,true,false);
        element.setShouldBeImported(shouldImport);
        return element;
      }
      return new StaticFieldLookupItem((PsiField)member,shouldImport,containingClass);
    }
    @Override protected LookupElement createLookupElement(    @NotNull List<PsiMethod> overloads,    @NotNull PsiClass containingClass,    boolean shouldImport){
      shouldImport|=originalPosition != null && PsiTreeUtil.isAncestor(containingClass,originalPosition,false);
      final JavaMethodCallElement element=new JavaMethodCallElement(overloads.get(0),true,true);
      element.putUserData(JavaCompletionUtil.ALL_METHODS_ATTRIBUTE,overloads);
      element.setShouldBeImported(shouldImport);
      return element;
    }
  }
;
  final PsiFile file=position.getContainingFile();
  if (file instanceof PsiJavaFile) {
    final PsiImportList importList=((PsiJavaFile)file).getImportList();
    if (importList != null) {
      for (      PsiImportStaticStatement statement : importList.getImportStaticStatements()) {
        processor.importMembersOf(statement.resolveTargetClass());
      }
    }
  }
  return processor;
}
