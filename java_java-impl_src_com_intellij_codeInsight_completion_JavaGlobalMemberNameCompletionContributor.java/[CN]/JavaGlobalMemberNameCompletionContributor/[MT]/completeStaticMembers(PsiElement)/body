{
  final StaticMemberProcessor processor=new StaticMemberProcessor(position){
    @NotNull @Override protected LookupElement createLookupElement(    @NotNull PsiMember member,    @NotNull final PsiClass containingClass,    boolean shouldImport){
      if (member instanceof PsiMethod) {
        final JavaMethodCallElement element=new JavaMethodCallElement((PsiMethod)member,true);
        element.setShouldBeImported(shouldImport);
        return element;
      }
      return new VariableLookupItem((PsiVariable)member){
        @Override public void handleInsert(        InsertionContext context){
          context.commitDocument();
          final PsiReferenceExpression ref=PsiTreeUtil.findElementOfClassAtOffset(context.getFile(),context.getStartOffset(),PsiReferenceExpression.class,false);
          if (ref != null) {
            ref.bindToElementViaStaticImport(containingClass);
            PostprocessReformattingAspect.getInstance(ref.getProject()).doPostponedFormatting();
          }
          super.handleInsert(context);
        }
      }
;
    }
    @Override protected LookupElement createLookupElement(    @NotNull List<PsiMethod> overloads,    @NotNull PsiClass containingClass,    boolean shouldImport){
      final JavaMethodCallElement element=new JavaMethodCallElement(overloads.get(0),true);
      element.putUserData(JavaCompletionUtil.ALL_METHODS_ATTRIBUTE,overloads);
      element.setShouldBeImported(shouldImport);
      return element;
    }
  }
;
  final PsiFile file=position.getContainingFile();
  if (file instanceof PsiJavaFile) {
    final PsiImportList importList=((PsiJavaFile)file).getImportList();
    if (importList != null) {
      for (      PsiImportStaticStatement statement : importList.getImportStaticStatements()) {
        processor.importMembersOf(statement.resolveTargetClass());
      }
    }
  }
  return processor;
}
