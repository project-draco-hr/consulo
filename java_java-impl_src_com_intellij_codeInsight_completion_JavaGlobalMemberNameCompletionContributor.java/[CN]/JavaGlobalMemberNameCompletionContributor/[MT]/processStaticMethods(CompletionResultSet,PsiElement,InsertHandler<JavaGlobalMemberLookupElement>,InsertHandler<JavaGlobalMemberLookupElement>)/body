{
  PrefixMatcher matcher=result.getPrefixMatcher();
  final Project project=position.getProject();
  final GlobalSearchScope scope=GlobalSearchScope.allScope(project);
  final PsiShortNamesCache namesCache=JavaPsiFacade.getInstance(project).getShortNamesCache();
  final PsiResolveHelper resolveHelper=JavaPsiFacade.getInstance(project).getResolveHelper();
  final String[] methodNames=ApplicationManager.getApplication().runReadAction(new Computable<String[]>(){
    public String[] compute(){
      return namesCache.getAllMethodNames();
    }
  }
);
  final boolean[] hintShown={false};
  for (  final String methodName : methodNames) {
    if (matcher.prefixMatches(methodName)) {
      final PsiMethod[] methods=ApplicationManager.getApplication().runReadAction(new Computable<PsiMethod[]>(){
        public PsiMethod[] compute(){
          return namesCache.getMethodsByName(methodName,scope);
        }
      }
);
      for (      final PsiMethod method : methods) {
        ApplicationManager.getApplication().runReadAction(new Runnable(){
          public void run(){
            if (method.hasModifierProperty(PsiModifier.STATIC) && resolveHelper.isAccessible(method,position,null)) {
              final PsiClass containingClass=method.getContainingClass();
              if (containingClass != null) {
                if (!JavaCompletionUtil.isInExcludedPackage(containingClass) && !StaticImportMethodFix.isExcluded(method)) {
                  if (!hintShown[0] && FeatureUsageTracker.getInstance().isToBeShown(JavaCompletionFeatures.IMPORT_STATIC,project) && CompletionService.getCompletionService().getAdvertisementText() == null) {
                    final String shortcut=getActionShortcut("EditorRight");
                    if (shortcut != null) {
                      CompletionService.getCompletionService().setAdvertisementText("To import the method statically, press " + shortcut);
                    }
                    hintShown[0]=true;
                  }
                  result.addElement(new JavaGlobalMemberLookupElement(method,containingClass,qualifiedInsert,importInsert));
                }
              }
            }
          }
        }
);
      }
    }
  }
}
