{
  super.visitExpressionStatement(statement);
  final PsiExpression expression=statement.getExpression();
  if (!(expression instanceof PsiMethodCallExpression)) {
    return;
  }
  final PsiMethodCallExpression call=(PsiMethodCallExpression)expression;
  final PsiMethod method=call.resolveMethod();
  if (method == null || method.isConstructor()) {
    return;
  }
  final PsiType returnType=method.getReturnType();
  if (PsiType.VOID.equals(returnType)) {
    return;
  }
  final PsiClass aClass=method.getContainingClass();
  if (aClass == null) {
    return;
  }
  if (m_reportAllNonLibraryCalls && !LibraryUtil.classIsInLibrary(aClass)) {
    registerMethodCallError(call,aClass);
    return;
  }
  final PsiReferenceExpression methodExpression=call.getMethodExpression();
  final String methodName=methodExpression.getReferenceName();
  if (methodName == null) {
    return;
  }
  for (int i=0; i < methodNamePatterns.size(); i++) {
    final String methodNamePattern=methodNamePatterns.get(i);
    if (!methodNamesMatch(methodName,methodNamePattern)) {
      continue;
    }
    final String className=classNames.get(i);
    if (!ClassUtils.isSubclass(aClass,className)) {
      continue;
    }
    registerMethodCallError(call,aClass);
    return;
  }
}
