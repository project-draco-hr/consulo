{
  super.visitExpressionStatement(statement);
  if (!(statement.getExpression() instanceof PsiMethodCallExpression)) {
    return;
  }
  final PsiMethodCallExpression call=(PsiMethodCallExpression)statement.getExpression();
  final PsiMethod method=call.resolveMethod();
  if (method == null) {
    return;
  }
  if (method.isConstructor()) {
    return;
  }
  final PsiType retType=method.getReturnType();
  if (PsiType.VOID.equals(retType)) {
    return;
  }
  final PsiClass aClass=method.getContainingClass();
  if (aClass == null) {
    return;
  }
  if (m_reportAllNonLibraryCalls && !LibraryUtil.classIsInLibrary(aClass)) {
    registerMethodCallError(call);
    return;
  }
  final PsiReferenceExpression methodExpression=call.getMethodExpression();
  final String methodName=methodExpression.getReferenceName();
  if (methodName == null) {
    return;
  }
  final List<ReturnCheckSpecification> callsToCheckCopy;
synchronized (lock) {
    callsToCheckCopy=new ArrayList<ReturnCheckSpecification>(callsToCheck);
  }
  for (  ReturnCheckSpecification spec : callsToCheckCopy) {
    final Pattern methodNamePattern=spec.getMethodNamePattern();
    if (methodNamePattern != null && methodNamesMatch(methodName,methodNamePattern)) {
      final String classNameToCompare=spec.getClassName();
      if (ClassUtils.isSubclass(aClass,classNameToCompare)) {
        registerMethodCallError(call);
        return;
      }
    }
  }
}
