{
  processor.handleEvent(PsiScopeProcessor.Event.SET_DECLARATION_HOLDER,this);
  final ElementClassHint classHint=processor.getHint(ElementClassHint.KEY);
  final NameHint nameHint=processor.getHint(NameHint.KEY);
  final String name=nameHint != null ? nameHint.getName(state) : null;
  final PsiImportList importList=getImportList();
  if (classHint == null || classHint.shouldProcess(ElementClassHint.DeclarationKind.CLASS)) {
    final PsiClass[] classes=getClasses();
    for (    PsiClass aClass : classes) {
      if (!processor.execute(aClass,state))       return false;
    }
    final PsiImportStatement[] importStatements=importList.getImportStatements();
    for (    PsiImportStatement statement : importStatements) {
      if (!statement.isOnDemand()) {
        if (name != null) {
          final String refText=statement.getQualifiedName();
          if (refText == null || !refText.endsWith(name))           continue;
        }
        final PsiElement resolved=statement.resolve();
        if (resolved instanceof PsiClass) {
          processor.handleEvent(JavaScopeProcessorEvent.SET_CURRENT_FILE_CONTEXT,statement);
          if (!processor.execute(resolved,state))           return false;
        }
      }
    }
    processor.handleEvent(JavaScopeProcessorEvent.SET_CURRENT_FILE_CONTEXT,null);
    final PsiPackage aPackage=JavaPsiFacade.getInstance(myManager.getProject()).findPackage(getPackageName());
    if (aPackage != null) {
      if (!aPackage.processDeclarations(processor,state,null,place)) {
        return false;
      }
    }
    for (    PsiImportStatement statement : importStatements) {
      if (statement.isOnDemand()) {
        final PsiElement resolved=statement.resolve();
        if (resolved != null) {
          processor.handleEvent(JavaScopeProcessorEvent.SET_CURRENT_FILE_CONTEXT,statement);
          processOnDemandTarget(resolved,processor,state,place);
        }
      }
    }
  }
  final PsiImportStaticStatement[] importStaticStatements=importList.getImportStaticStatements();
  if (importStaticStatements.length > 0) {
    final StaticImportFilteringProcessor staticImportProcessor=new StaticImportFilteringProcessor(processor);
    final boolean forCompletion=Boolean.TRUE == processor.getHint(JavaCompletionHints.JAVA_COMPLETION);
    for (    PsiImportStaticStatement importStaticStatement : importStaticStatements) {
      if (importStaticStatement.isOnDemand() || forCompletion)       continue;
      final PsiJavaCodeReferenceElement reference=importStaticStatement.getImportReference();
      if (reference != null) {
        final JavaResolveResult[] results=reference.multiResolve(false);
        if (results.length > 0) {
          staticImportProcessor.handleEvent(JavaScopeProcessorEvent.SET_CURRENT_FILE_CONTEXT,importStaticStatement);
          for (          JavaResolveResult result : results) {
            if (!staticImportProcessor.execute(result.getElement(),state))             return false;
          }
        }
      }
    }
    for (    PsiImportStaticStatement importStaticStatement : importStaticStatements) {
      if (!importStaticStatement.isOnDemand())       continue;
      final PsiClass targetElement=importStaticStatement.resolveTargetClass();
      if (targetElement != null) {
        staticImportProcessor.handleEvent(JavaScopeProcessorEvent.SET_CURRENT_FILE_CONTEXT,importStaticStatement);
        if (!targetElement.processDeclarations(staticImportProcessor,state,lastParent,place))         return false;
      }
    }
  }
  if (classHint == null || classHint.shouldProcess(ElementClassHint.DeclarationKind.CLASS)) {
    processor.handleEvent(JavaScopeProcessorEvent.SET_CURRENT_FILE_CONTEXT,null);
    final PsiJavaCodeReferenceElement[] implicitlyImported=getImplicitlyImportedPackageReferences();
    for (    PsiJavaCodeReferenceElement aImplicitlyImported : implicitlyImported) {
      final PsiElement resolved=aImplicitlyImported.resolve();
      if (resolved != null) {
        if (!processOnDemandTarget(resolved,processor,state,place))         return false;
      }
    }
  }
  return true;
}
