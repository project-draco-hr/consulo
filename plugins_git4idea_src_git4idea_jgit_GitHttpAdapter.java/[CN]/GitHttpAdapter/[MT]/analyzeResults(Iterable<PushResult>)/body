{
  Collection<String> rejectedBranches=new ArrayList<String>();
  StringBuilder errorReport=new StringBuilder();
  for (  PushResult result : results) {
    for (    RemoteRefUpdate update : result.getRemoteUpdates()) {
switch (update.getStatus()) {
case REJECTED_NONFASTFORWARD:
        rejectedBranches.add(update.getSrcRef());
case NON_EXISTING:
case REJECTED_NODELETE:
case REJECTED_OTHER_REASON:
case REJECTED_REMOTE_CHANGED:
      errorReport.append(update.getSrcRef() + ": " + update.getStatus()+ "<br/>");
default :
  }
}
}
if (!rejectedBranches.isEmpty()) {
return GitSimplePushResult.reject(rejectedBranches);
}
 else if (errorReport.toString().isEmpty()) {
return GitSimplePushResult.success();
}
 else {
return GitSimplePushResult.error(errorReport.toString());
}
}
