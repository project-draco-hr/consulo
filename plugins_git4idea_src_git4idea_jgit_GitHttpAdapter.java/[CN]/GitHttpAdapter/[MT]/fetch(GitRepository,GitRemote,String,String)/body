{
  GitFetchResult.Type resultType;
  try {
    final Git git=convertToGit(repository);
    final GitHttpCredentialsProvider provider=new GitHttpCredentialsProvider(repository.getProject(),remoteUrl);
    List<String> specs;
    if (remoteBranch == null) {
      specs=remote.getFetchRefSpecs();
    }
 else {
      specs=Collections.singletonList(GitFetcher.getFetchSpecForBranch(remoteBranch,remote.getName()));
    }
    GeneralResult result=callWithAuthRetry(new GitHttpRemoteCommand.Fetch(git,provider,remoteUrl,convertRefSpecs(specs)),repository.getProject());
    resultType=convertToFetchResultType(result);
  }
 catch (  IOException e) {
    logException(repository,remote.getName(),remoteUrl,e,"fetching");
    return GitFetchResult.error(e);
  }
catch (  InvalidRemoteException e) {
    logException(repository,remote.getName(),remoteUrl,e,"fetching");
    return GitFetchResult.error(e);
  }
catch (  URISyntaxException e) {
    logException(repository,remote.getName(),remoteUrl,e,"fetching");
    return GitFetchResult.error(e);
  }
  return new GitFetchResult(resultType);
}
