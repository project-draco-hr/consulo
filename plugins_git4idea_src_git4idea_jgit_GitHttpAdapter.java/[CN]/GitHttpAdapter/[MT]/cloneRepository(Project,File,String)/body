{
  GitFetchResult.Type resultType;
  try {
    final GitHttpCredentialsProvider provider=new GitHttpCredentialsProvider(project,url);
    GitHttpRemoteCommand.Clone command=new GitHttpRemoteCommand.Clone(directory,provider,url);
    GeneralResult result=callWithAuthRetry(command,project);
    resultType=convertToFetchResultType(result);
    if (resultType.equals(GitFetchResult.Type.SUCCESS)) {
      updateCoreIgnoreCaseSetting(command.getGit());
    }
    return new GitFetchResult(resultType);
  }
 catch (  InvalidRemoteException e) {
    LOG.info("Exception while cloning " + url + " to "+ directory,e);
    return GitFetchResult.error(e);
  }
catch (  IOException e) {
    LOG.info("Exception while cloning " + url + " to "+ directory,e);
    return GitFetchResult.error(e);
  }
catch (  URISyntaxException e) {
    LOG.info("Exception while cloning " + url + " to "+ directory,e);
    return GitFetchResult.error(e);
  }
}
