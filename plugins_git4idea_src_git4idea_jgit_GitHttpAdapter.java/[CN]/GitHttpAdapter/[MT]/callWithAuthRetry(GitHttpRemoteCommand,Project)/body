{
  ProxySelector defaultProxySelector=ProxySelector.getDefault();
  boolean httpTransportErrorFixTried=false;
  boolean noRemoteWithoutGitErrorFixTried=false;
  String url=command.getUrl();
  GitHttpCredentialsProvider provider=command.getCredentialsProvider();
  try {
    for (int i=0; i < 3; i++) {
      try {
        AuthData authData=getUsernameAndPassword(provider.getProject(),provider.getUrl());
        if (authData != null) {
          provider.fillAuthDataIfNotFilled(authData.getLogin(),authData.getPassword());
        }
        if (i == 0) {
          provider.setAlwaysShowDialog(false);
        }
 else {
          provider.setAlwaysShowDialog(true);
        }
        command.run();
        rememberPassword(provider);
        return GeneralResult.SUCCESS;
      }
 catch (      GitAPIException e) {
        if (!noRemoteWithoutGitErrorFixTried && isNoRemoteWithoutDotGitError(e,url)) {
          url=addDotGitToUrl(url);
          command.setUrl(url);
          provider.setUrl(url);
          noRemoteWithoutGitErrorFixTried=true;
          i--;
        }
        command.cleanup();
      }
catch (      JGitInternalException e) {
        try {
          if (authError(e)) {
            if (provider.wasCancelled()) {
              return GeneralResult.CANCELLED;
            }
          }
 else           if (!httpTransportErrorFixTried && isTransportExceptionForHttp(e,url)) {
            url=url.replaceFirst("http","https");
            command.setUrl(url);
            provider.setUrl(url);
            httpTransportErrorFixTried=true;
            i--;
          }
 else           if (!noRemoteWithoutGitErrorFixTried && isNoRemoteWithoutDotGitError(e,url)) {
            url=addDotGitToUrl(url);
            command.setUrl(url);
            provider.setUrl(url);
            noRemoteWithoutGitErrorFixTried=true;
            i--;
          }
 else           if (smartHttpPushNotSupported(e)) {
            throw new SmartPushNotSupportedException(e.getCause().getMessage());
          }
 else {
            throw e;
          }
        }
  finally {
          command.cleanup();
        }
      }
    }
    return GeneralResult.NOT_AUTHORIZED;
  }
  finally {
    log(command,project);
  }
}
