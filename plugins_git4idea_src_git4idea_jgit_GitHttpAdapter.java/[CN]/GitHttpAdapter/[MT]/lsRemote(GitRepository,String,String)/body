{
  try {
    final Git git=convertToGit(repository);
    final GitHttpCredentialsProvider provider=new GitHttpCredentialsProvider(repository.getProject(),remoteUrl);
    GitHttpRemoteCommand.LsRemote lsRemoteCommand=new GitHttpRemoteCommand.LsRemote(git,provider,remoteUrl);
    callWithAuthRetry(lsRemoteCommand,repository.getProject());
    return convertRefsToStrings(lsRemoteCommand.getRefs());
  }
 catch (  IOException e) {
    logException(repository,remoteName,remoteUrl,e,"ls-remote");
  }
catch (  InvalidRemoteException e) {
    logException(repository,remoteName,remoteUrl,e,"ls-remote");
  }
catch (  URISyntaxException e) {
    logException(repository,remoteName,remoteUrl,e,"ls-remote");
  }
  return Collections.emptyList();
}
