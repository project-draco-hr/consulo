{
  XLineBreakpoint<MyBreakpointProperties> breakpoint=myBreakpointManager.addLineBreakpoint(MY_LINE_BREAKPOINT_TYPE,"myurl",239,new MyBreakpointProperties("z1"));
  breakpoint.setCondition("cond");
  breakpoint.setLogExpression("log");
  breakpoint.setSuspendPolicy(SuspendPolicy.NONE);
  breakpoint.setLogMessage(true);
  myBreakpointManager.addBreakpoint(MY_SIMPLE_BREAKPOINT_TYPE,new MyBreakpointProperties("z2"));
  reload();
  List<XBreakpoint<?>> breakpoints=getAllBreakpoints();
  assertEquals("Expected 3 breakpoints, actual: " + breakpoints,3,breakpoints.size());
  assertTrue(myBreakpointManager.isDefaultBreakpoint(breakpoints.get(0)));
  assertEquals("default",assertInstanceOf(breakpoints.get(0).getProperties(),MyBreakpointProperties.class).myOption);
  assertTrue(breakpoints.get(0).isEnabled());
  XLineBreakpoint lineBreakpoint=assertInstanceOf(breakpoints.get(1),XLineBreakpoint.class);
  assertEquals(239,lineBreakpoint.getLine());
  assertEquals("myurl",lineBreakpoint.getFileUrl());
  assertEquals("z1",assertInstanceOf(lineBreakpoint.getProperties(),MyBreakpointProperties.class).myOption);
  assertEquals("cond",lineBreakpoint.getCondition());
  assertEquals("log",lineBreakpoint.getLogExpression());
  assertTrue(lineBreakpoint.isLogMessage());
  assertEquals(SuspendPolicy.NONE,lineBreakpoint.getSuspendPolicy());
  assertEquals("z2",assertInstanceOf(breakpoints.get(2).getProperties(),MyBreakpointProperties.class).myOption);
  assertEquals(SuspendPolicy.ALL,breakpoints.get(2).getSuspendPolicy());
  assertFalse(breakpoints.get(2).isLogMessage());
}
