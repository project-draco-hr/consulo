{
  final Entry<K,V>[] table=this.table;
  final int hash=HashUtil.hash(key,hashingStrategy);
  final int index=hash % table.length;
  for (Entry<K,V> e=table[index]; e != null; e=e.hashNext) {
    final K entryKey;
    if (e.keyHash == hash && ((entryKey=e.key) == key || hashingStrategy.equals(entryKey,key))) {
      moveToTop(e);
      return e.setValue(value);
    }
  }
  final Entry<K,V> e=new Entry<K,V>(key,value,hash);
  e.hashNext=table[index];
  table[index]=e;
  final Entry<K,V> top=this.top;
  e.next=top;
  if (top != null) {
    top.previous=e;
  }
 else {
    back=e;
  }
  this.top=e;
  size++;
  if (removeEldestEntry(back,back.key,back.value)) {
    doRemoveEldestEntry();
  }
 else   if (size > capacity) {
    rehash((int)(capacity * HashUtil.CAPACITY_MULTIPLE));
  }
  return null;
}
