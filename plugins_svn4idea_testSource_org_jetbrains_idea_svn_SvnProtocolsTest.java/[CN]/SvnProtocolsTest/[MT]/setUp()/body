{
  super.setUp();
  myVcs=SvnVcs.getInstance(myProject);
  final SvnConfiguration configuration=SvnConfiguration.getInstance(myProject);
  final SvnAuthenticationManager interactiveManager=configuration.getInteractiveManager(myVcs);
  final SvnTestInteractiveAuthentication authentication=new SvnTestInteractiveAuthentication(interactiveManager){
    @Override public int acceptServerAuthentication(    SVNURL url,    String realm,    Object certificate,    boolean resultMayBeStored){
      return ISVNAuthenticationProvider.ACCEPTED;
    }
  }
;
  interactiveManager.setAuthenticationProvider(authentication);
  final SvnAuthenticationManager manager=configuration.getAuthenticationManager(myVcs);
  manager.setAuthenticationProvider(authentication);
  authentication.addAuthentication(ISVNAuthenticationManager.SSH,new Convertor<SVNURL,SVNAuthentication>(){
    @Override public SVNAuthentication convert(    SVNURL o){
      return new SVNSSHAuthentication(SSH_USER_NAME,SSH_PASSWORD,SSH_PORT_NUMBER,true,o,false);
    }
  }
);
  authentication.addAuthentication(ISVNAuthenticationManager.USERNAME,new Convertor<SVNURL,SVNAuthentication>(){
    @Override public SVNAuthentication convert(    SVNURL o){
      return new SVNUserNameAuthentication(SSH_USER_NAME,true,o,false);
    }
  }
);
  authentication.addAuthentication(ISVNAuthenticationManager.PASSWORD,new Convertor<SVNURL,SVNAuthentication>(){
    @Override public SVNAuthentication convert(    SVNURL o){
      return new SVNPasswordAuthentication("sally","abcde",true,o,false);
    }
  }
);
}
