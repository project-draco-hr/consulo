{
  final InspectionProfileEntry[] usedTools=inspectionProfile.getInspectionProfile().getModifiableModel().getInspectionTools();
  final List<InspectionProfileEntry> profileTools=new ArrayList<InspectionProfileEntry>();
  tools.put(inspectionProfile.getName(),profileTools);
  final List<InspectionProfileEntry> localProfileTools=new ArrayList<InspectionProfileEntry>();
  localTools.put(inspectionProfile.getName(),localProfileTools);
  for (  InspectionProfileEntry entry : usedTools) {
    final InspectionTool tool=(InspectionTool)entry;
    final String shortName=tool.getShortName();
    final HighlightDisplayKey key=HighlightDisplayKey.find(shortName);
    if (inspectionProfile.isToolEnabled(key)) {
      tool.initialize(this);
      Set<Pair<InspectionTool,InspectionProfile>> sertainTools=myTools.get(shortName);
      if (sertainTools == null) {
        sertainTools=new HashSet<Pair<InspectionTool,InspectionProfile>>();
        myTools.put(shortName,sertainTools);
      }
      sertainTools.add(Pair.create(tool,inspectionProfile.getInspectionProfile()));
      if (tool instanceof LocalInspectionToolWrapper) {
        localProfileTools.add(tool);
        appendJobDescriptor(LOCAL_ANALYSIS);
      }
 else {
        profileTools.add(tool);
        JobDescriptor[] jobDescriptors=tool.getJobDescriptors();
        for (        JobDescriptor jobDescriptor : jobDescriptors) {
          appendJobDescriptor(jobDescriptor);
        }
      }
    }
  }
  for (  GlobalInspectionContextExtension extension : myExtensions.values()) {
    extension.performPreRunActivities(profileTools,localProfileTools,this);
  }
}
