{
  final List<Pair<InspectionProfileEntry,NamedScope>> usedTools=new ArrayList<Pair<InspectionProfileEntry,NamedScope>>();
  final List<Pair<InspectionProfileEntry,NamedScope>> localTools=new ArrayList<Pair<InspectionProfileEntry,NamedScope>>();
  initializeTools(usedTools,localTools);
  ((RefManagerImpl)getRefManager()).initializeAnnotators();
  for (  Pair<InspectionProfileEntry,NamedScope> tools : usedTools) {
    final InspectionTool tool=(InspectionTool)tools.first;
    try {
      if (tool.isGraphNeeded()) {
        ((RefManagerImpl)tool.getRefManager()).findAllDeclarations();
      }
      tool.runInspection(scope,manager);
      if (tool.queryExternalUsagesRequests(manager)) {
        needRepeatSearchRequest.add(tool);
      }
    }
 catch (    ProcessCanceledException e) {
      throw e;
    }
catch (    Exception e) {
      LOG.error(e);
    }
  }
  for (  GlobalInspectionContextExtension extension : myExtensions.values()) {
    try {
      extension.performPostRunActivities(needRepeatSearchRequest,this);
    }
 catch (    ProcessCanceledException e) {
      throw e;
    }
catch (    Exception e) {
      LOG.error(e);
    }
  }
  if (RUN_GLOBAL_TOOLS_ONLY)   return;
  if (RUN_WITH_EDITOR_PROFILE || !localTools.isEmpty()) {
    final PsiManager psiManager=PsiManager.getInstance(myProject);
    final InspectionProjectProfileManager profileManager=InspectionProjectProfileManager.getInstance(myProject);
    scope.accept(new PsiRecursiveElementVisitor(){
      @Override public void visitFile(      PsiFile file){
        final VirtualFile virtualFile=file.getVirtualFile();
        if (virtualFile != null) {
          incrementJobDoneAmount(LOCAL_ANALYSIS,ProjectUtil.calcRelativeToProjectPath(virtualFile,myProject));
        }
        final FileViewProvider viewProvider=psiManager.findViewProvider(virtualFile);
        final com.intellij.openapi.editor.Document document=viewProvider != null ? viewProvider.getDocument() : null;
        if (document == null)         return;
        final LocalInspectionsPass pass=new LocalInspectionsPass(file,document,0,file.getTextLength());
        try {
          final List<InspectionProfileEntry> lTools=new ArrayList<InspectionProfileEntry>();
          for (          Pair<InspectionProfileEntry,NamedScope> tool : localTools) {
            if (tool.second == null || tool.second.getValue().contains(file,getCurrentProfile().getProfileManager().getScopesManager())) {
              lTools.add(tool.first);
            }
          }
          pass.doInspectInBatch((InspectionManagerEx)manager,lTools.toArray(new InspectionProfileEntry[localTools.size()]),myProgressIndicator,true);
        }
 catch (        ProcessCanceledException e) {
          throw e;
        }
catch (        Exception e) {
          LOG.error(e);
        }
      }
    }
);
  }
}
