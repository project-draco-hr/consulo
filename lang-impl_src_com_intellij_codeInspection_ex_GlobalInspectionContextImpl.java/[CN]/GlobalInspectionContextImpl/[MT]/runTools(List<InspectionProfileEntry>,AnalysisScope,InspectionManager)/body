{
  final HashMap<String,List<InspectionProfileEntry>> usedTools=new HashMap<String,List<InspectionProfileEntry>>();
  final Map<String,List<InspectionProfileEntry>> localTools=new HashMap<String,List<InspectionProfileEntry>>();
  initializeTools(scope,usedTools,localTools);
  ((RefManagerImpl)getRefManager()).initializeAnnotators();
  for (  List<InspectionProfileEntry> tools : usedTools.values()) {
    for (    InspectionProfileEntry entry : tools) {
      final InspectionTool tool=(InspectionTool)entry;
      try {
        if (tool.isGraphNeeded()) {
          ((RefManagerImpl)tool.getRefManager()).findAllDeclarations();
        }
        tool.runInspection(scope,manager);
        if (tool.queryExternalUsagesRequests(manager)) {
          needRepeatSearchRequest.add(tool);
        }
      }
 catch (      ProcessCanceledException e) {
        throw e;
      }
catch (      Exception e) {
        LOG.error(e);
      }
    }
  }
  for (  GlobalInspectionContextExtension extension : myExtensions.values()) {
    try {
      extension.performPostRunActivities(needRepeatSearchRequest,this);
    }
 catch (    ProcessCanceledException e) {
      throw e;
    }
catch (    Exception e) {
      LOG.error(e);
    }
  }
  if (RUN_GLOBAL_TOOLS_ONLY)   return;
  final List<InspectionProfileEntry> currentProfileLocalTools=localTools.get(getCurrentProfile().getName());
  if (RUN_WITH_EDITOR_PROFILE || currentProfileLocalTools != null && !currentProfileLocalTools.isEmpty()) {
    final PsiManager psiManager=PsiManager.getInstance(myProject);
    final InspectionProjectProfileManager profileManager=InspectionProjectProfileManager.getInstance(myProject);
    scope.accept(new PsiRecursiveElementVisitor(){
      @Override public void visitFile(      PsiFile file){
        InspectionProfile profile;
        if (RUN_WITH_EDITOR_PROFILE) {
          profile=profileManager.getInspectionProfile(file);
        }
 else {
          profile=getCurrentProfile();
        }
        final VirtualFile virtualFile=file.getVirtualFile();
        if (virtualFile != null) {
          incrementJobDoneAmount(LOCAL_ANALYSIS,ProjectUtil.calcRelativeToProjectPath(virtualFile,myProject));
        }
        final List<InspectionProfileEntry> tools=localTools.get(profile.getName());
        final FileViewProvider viewProvider=psiManager.findViewProvider(virtualFile);
        final com.intellij.openapi.editor.Document document=viewProvider != null ? viewProvider.getDocument() : null;
        if (document == null)         return;
        final LocalInspectionsPass pass=new LocalInspectionsPass(file,document,0,file.getTextLength());
        try {
          pass.doInspectInBatch((InspectionManagerEx)manager,tools.toArray(new InspectionProfileEntry[tools.size()]),myProgressIndicator);
        }
 catch (        ProcessCanceledException e) {
          throw e;
        }
catch (        Exception e) {
          LOG.error(e);
        }
      }
    }
);
  }
}
