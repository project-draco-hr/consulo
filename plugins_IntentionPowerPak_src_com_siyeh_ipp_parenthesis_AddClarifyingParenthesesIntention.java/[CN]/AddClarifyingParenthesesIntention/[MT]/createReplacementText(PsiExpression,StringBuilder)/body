{
  if (element instanceof PsiBinaryExpression) {
    final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)element;
    final PsiExpression lhs=binaryExpression.getLOperand();
    final PsiJavaToken operationSign=binaryExpression.getOperationSign();
    final PsiExpression rhs=binaryExpression.getROperand();
    final PsiElement parent=element.getParent();
    final String signText=operationSign.getText();
    final PsiElement lhsNextSibling=lhs.getNextSibling();
    final PsiElement rhsPrevSibling;
    if (rhs != null) {
      rhsPrevSibling=rhs.getPrevSibling();
    }
 else {
      rhsPrevSibling=null;
    }
    if (parent instanceof PsiBinaryExpression) {
      final PsiBinaryExpression parentBinaryExpression=(PsiBinaryExpression)parent;
      final PsiJavaToken parentOperationSign=parentBinaryExpression.getOperationSign();
      final IElementType tokenType=operationSign.getTokenType();
      if (!operationSign.equals(parentOperationSign) || !ParenthesesUtils.isCommutativeBinaryOperator(tokenType)) {
        out.append('(');
        createReplacementText(lhs,out);
        if (lhsNextSibling instanceof PsiWhiteSpace) {
          out.append(lhsNextSibling.getText());
        }
        out.append(signText);
        if (rhsPrevSibling instanceof PsiWhiteSpace) {
          out.append(rhsPrevSibling.getText());
        }
        createReplacementText(rhs,out);
        out.append(')');
        return out;
      }
    }
    createReplacementText(lhs,out);
    if (lhsNextSibling instanceof PsiWhiteSpace) {
      out.append(lhsNextSibling.getText());
    }
    out.append(signText);
    if (rhsPrevSibling instanceof PsiWhiteSpace) {
      out.append(rhsPrevSibling.getText());
    }
    createReplacementText(rhs,out);
  }
 else   if (element instanceof PsiParenthesizedExpression) {
    final PsiParenthesizedExpression parenthesizedExpression=(PsiParenthesizedExpression)element;
    final PsiExpression expression=parenthesizedExpression.getExpression();
    out.append('(');
    createReplacementText(expression,out);
    out.append(')');
  }
 else   if (element instanceof PsiInstanceOfExpression) {
    out.append('(');
    out.append(element.getText());
    out.append(')');
  }
 else   if (element != null) {
    out.append(element.getText());
  }
  return out;
}
