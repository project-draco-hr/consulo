{
  if (element instanceof PsiPolyadicExpression) {
    final PsiPolyadicExpression polyadicExpression=(PsiPolyadicExpression)element;
    final IElementType tokenType=polyadicExpression.getOperationTokenType();
    final PsiElement parent=element.getParent();
    if (parent instanceof PsiPolyadicExpression) {
      final PsiPolyadicExpression parentPolyadicExpression=(PsiPolyadicExpression)parent;
      final IElementType parentOperationSign=parentPolyadicExpression.getOperationTokenType();
      if (!tokenType.equals(parentOperationSign)) {
        out.append('(');
        createReplacementText(polyadicExpression,out);
        out.append(')');
        return out;
      }
    }
    createReplacementText(polyadicExpression,out);
  }
 else   if (element instanceof PsiParenthesizedExpression) {
    final PsiParenthesizedExpression parenthesizedExpression=(PsiParenthesizedExpression)element;
    final PsiExpression expression=parenthesizedExpression.getExpression();
    out.append('(');
    createReplacementText(expression,out);
    out.append(')');
  }
 else   if (element instanceof PsiInstanceOfExpression) {
    out.append('(');
    out.append(element.getText());
    out.append(')');
  }
 else   if (element != null) {
    out.append(element.getText());
  }
  return out;
}
