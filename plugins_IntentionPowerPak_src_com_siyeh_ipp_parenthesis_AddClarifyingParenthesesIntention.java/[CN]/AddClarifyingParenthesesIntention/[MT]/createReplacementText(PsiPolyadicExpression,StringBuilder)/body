{
  final PsiExpression[] operands=polyadicExpression.getOperands();
  for (  PsiExpression operand : operands) {
    if (operand == null) {
      continue;
    }
    final PsiJavaToken token=polyadicExpression.getTokenBeforeOperand(operand);
    if (token != null) {
      final PsiElement beforeToken=operand.getNextSibling();
      if (beforeToken instanceof PsiWhiteSpace) {
        out.append(beforeToken.getText());
      }
      out.append(token.getText());
      final PsiElement afterToken=token.getNextSibling();
      if (afterToken instanceof PsiWhiteSpace) {
        out.append(afterToken.getText());
      }
    }
    createReplacementText(operand,out);
  }
}
