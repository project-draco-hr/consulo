{
  List<Class> configuredClasses=myManager.getConfiguredClasses();
  Collections.sort(configuredClasses,new Comparator<Class>(){
    public int compare(    final Class o1,    final Class o2){
      return getInheritanceLevel(o1) - getInheritanceLevel(o2);
    }
    private int getInheritanceLevel(    Class aClass){
      int level=0;
      while (aClass.getSuperclass() != null) {
        level++;
        aClass=aClass.getSuperclass();
      }
      return level;
    }
  }
);
  DefaultMutableTreeNode root=new DefaultMutableTreeNode();
  DefaultTreeModel treeModel=new DefaultTreeModel(root);
  Map<Class,DefaultMutableTreeNode> classToNodeMap=new HashMap<Class,DefaultMutableTreeNode>();
  for (  Class cls : configuredClasses) {
    DefaultMutableTreeNode parentNode=root;
    Class superClass=cls.getSuperclass();
    while (superClass != null) {
      if (classToNodeMap.containsKey(superClass)) {
        parentNode=classToNodeMap.get(superClass);
        break;
      }
      superClass=superClass.getSuperclass();
    }
    DefaultMutableTreeNode childNode=new DefaultMutableTreeNode(cls);
    classToNodeMap.put(cls,childNode);
    parentNode.add(childNode);
  }
  myClassTree.setModel(treeModel);
  myClassTree.expandRow(0);
  myClassTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  myClassTree.getSelectionModel().setSelectionPath(new TreePath(new Object[]{root,root.getFirstChild()}));
}
