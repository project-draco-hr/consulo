{
  myProject=project;
  mySettings=daemonCodeAnalyzerSettings;
  myEditorTracker=editorTracker;
  myLastSettings=(DaemonCodeAnalyzerSettings)mySettings.clone();
  myFileStatusMap=new FileStatusMap(myProject);
  myPassExecutorService=new PassExecutorService(myProject){
    protected void applyInformationToEditor(    final TextEditorHighlightingPass pass,    final FileEditor fileEditor,    final ProgressIndicator updateProgress){
      if (ApplicationManager.getApplication().isUnitTestMode())       return;
      final boolean wasCanceled=updateProgress.isCanceled();
      if (fileEditor != null && !wasCanceled) {
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          public void run(){
            if (myDisposed || myProject.isDisposed())             return;
            if (fileEditor.getComponent().isDisplayable()) {
              pass.applyInformationToEditor();
              if (fileEditor instanceof TextEditor) {
                log(updateProgress,pass,"Apply ");
                Editor editor=((TextEditor)fileEditor).getEditor();
                repaintErrorStripeRenderer(editor);
              }
            }
          }
        }
,ModalityState.stateForComponent(fileEditor.getComponent()));
      }
    }
  }
;
}
