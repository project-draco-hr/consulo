{
  final CanBeFinalFilter filter=new CanBeFinalFilter(this);
  getRefManager().iterate(new RefVisitor(){
    public void visitElement(    RefEntity refEntity){
      if (!(refEntity instanceof RefElement))       return;
      if (filter.accepts((RefElement)refEntity)) {
        refEntity.accept(new RefVisitor(){
          public void visitMethod(          final RefMethod refMethod){
            if (!refMethod.isStatic() && refMethod.getAccessModifier() != PsiModifier.PRIVATE && !(refMethod instanceof RefImplicitConstructor)) {
              getManager().enqueueDerivedMethodsProcessor(refMethod,new InspectionManagerEx.DerivedMethodsProcessor(){
                public boolean process(                PsiMethod derivedMethod){
                  ((RefElementImpl)refMethod).setFlag(false,CanBeFinalAnnotator.CAN_BE_FINAL_MASK);
                  return false;
                }
              }
);
            }
          }
          public void visitClass(          final RefClass refClass){
            if (!refClass.isAnonymous()) {
              getManager().enqueueDerivedClassesProcessor(refClass,new InspectionManagerEx.DerivedClassesProcessor(){
                public boolean process(                PsiClass inheritor){
                  ((RefClassImpl)refClass).setFlag(false,CanBeFinalAnnotator.CAN_BE_FINAL_MASK);
                  return false;
                }
              }
);
            }
          }
          public void visitField(          final RefField refField){
            getManager().enqueueFieldUsagesProcessor(refField,new InspectionManagerEx.UsagesProcessor(){
              public boolean process(              PsiReference psiReference){
                PsiElement expression=psiReference.getElement();
                if (expression instanceof PsiReferenceExpression && PsiUtil.isAccessedForWriting((PsiExpression)expression)) {
                  ((RefFieldImpl)refField).setFlag(false,CanBeFinalAnnotator.CAN_BE_FINAL_MASK);
                  return false;
                }
                return true;
              }
            }
);
          }
        }
);
      }
    }
  }
);
  return false;
}
