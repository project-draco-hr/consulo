{
  myProject=project;
  myDocument=(DocumentImpl)document;
  myScheme=new MyColorSchemeDelegate();
  myIsViewer=viewer;
  mySettings=new SettingsImpl(this);
  mySelectionModel=new SelectionModelImpl(this);
  myMarkupModel=new EditorMarkupModelImpl(this);
  myFoldingModel=new FoldingModelImpl(this);
  myCaretModel=new CaretModelImpl(this);
  mySizeContainer.reset();
  myCommandProcessor=CommandProcessor.getInstance();
  myEditorDocumentAdapter=new EditorDocumentAdapter();
  myMarkupModelListener=new MarkupModelListener(){
    public void rangeHighlighterChanged(    MarkupModelEvent event){
      RangeHighlighterImpl rangeHighlighter=(RangeHighlighterImpl)event.getHighlighter();
      if (rangeHighlighter.isValid()) {
        int start=rangeHighlighter.getAffectedAreaStartOffset();
        int end=rangeHighlighter.getAffectedAreaEndOffset();
        int startLine=myDocument.getLineNumber(start);
        int endLine=myDocument.getLineNumber(end);
        repaintLines(Math.max(0,startLine - 1),Math.min(endLine + 1,getDocument().getLineCount()));
      }
 else {
        repaint(0,getDocument().getTextLength());
      }
      ((EditorMarkupModelImpl)getMarkupModel()).repaint();
      ((EditorMarkupModelImpl)getMarkupModel()).markDirtied();
      GutterIconRenderer renderer=rangeHighlighter.getGutterIconRenderer();
      if (renderer != null) {
        updateGutterSize();
      }
      updateCaretCursor();
    }
  }
;
  ((MarkupModelEx)myDocument.getMarkupModel(myProject)).addMarkupModelListener(myMarkupModelListener);
  ((MarkupModelEx)getMarkupModel()).addMarkupModelListener(myMarkupModelListener);
  myDocument.addDocumentListener(myFoldingModel);
  myDocument.addDocumentListener(myCaretModel);
  myDocument.addDocumentListener(mySelectionModel);
  myDocument.addDocumentListener(myEditorDocumentAdapter);
  myCaretCursor=new CaretCursor();
  myFoldingModel.flushCaretShift();
  myScrollbarOrientation=EditorEx.VERTICAL_SCROLLBAR_RIGHT;
  EditorHighlighter highlighter=new EmptyEditorHighlighter(myScheme.getAttributes(HighlighterColors.TEXT));
  setHighlighter(highlighter);
  initComponent();
  myScrollingModel=new ScrollingModelImpl(this);
  myGutterComponent.updateSize();
  Dimension preferredSize=getPreferredSize();
  myEditorComponent.setSize(preferredSize);
  if (Patches.APPLE_BUG_ID_3716835) {
    myScrollingModel.addVisibleAreaListener(new VisibleAreaListener(){
      public void visibleAreaChanged(      VisibleAreaEvent e){
        if (myAppleRepaintAlarm == null) {
          myAppleRepaintAlarm=new Alarm(Alarm.ThreadToUse.SWING_THREAD);
        }
        myAppleRepaintAlarm.cancelAllRequests();
        myAppleRepaintAlarm.addRequest(new Runnable(){
          public void run(){
            repaint(0,myDocument.getTextLength());
          }
        }
,50,ModalityState.stateForComponent(myEditorComponent));
      }
    }
);
  }
  updateCaretCursor();
  if (!ourIsUnitTestMode) {
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        if (!isDisposed()) {
          myScrollingModel.disableAnimation();
          myScrollingModel.scrollHorizontally(0);
          myScrollingModel.enableAnimation();
        }
      }
    }
);
  }
  myMouseMotionListeners=new CopyOnWriteArrayList<EditorMouseMotionListener>();
}
