{
  final EditorImpl editor=(EditorImpl)getEditor(comp);
  final EditorDropHandler dropHandler=editor.getDropHandler();
  if (dropHandler != null && dropHandler.canHandleDrop(t.getTransferDataFlavors())) {
    dropHandler.handleDrop(t,editor);
    return true;
  }
  final int caretOffset=editor.getCaretModel().getOffset();
  if (myDraggedRange != null && myDraggedRange.getStartOffset() <= caretOffset && caretOffset < myDraggedRange.getEndOffset()) {
    return false;
  }
  if (myDraggedRange != null) {
    editor.getCaretModel().moveToOffset(editor.mySavedCaretOffsetForDNDUndoHack);
  }
  CommandProcessor.getInstance().executeCommand(editor.myProject,new Runnable(){
    public void run(){
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        public void run(){
          try {
            editor.getSelectionModel().removeSelection();
            final int offset;
            if (myDraggedRange != null) {
              editor.getCaretModel().moveToOffset(caretOffset);
              offset=caretOffset;
            }
 else {
              offset=editor.getCaretModel().getOffset();
            }
            if (editor.getDocument().getRangeGuard(offset,offset) != null)             return;
            EditorActionHandler pasteHandler=EditorActionManager.getInstance().getActionHandler(IdeActions.ACTION_EDITOR_PASTE);
            Clipboard clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();
            Transferable backup=null;
            try {
              backup=clipboard.getContents(this);
              clipboard.setContents(t,EmptyClipboardOwner.INSTANCE);
            }
 catch (            Exception e) {
              LOG.info("Error communicating with system clipboard",e);
            }
            editor.putUserData(LAST_PASTED_REGION,null);
            pasteHandler.execute(editor,editor.getDataContext());
            try {
              if (backup != null) {
                clipboard.setContents(backup,EmptyClipboardOwner.INSTANCE);
              }
            }
 catch (            IllegalStateException e) {
              LOG.info(e);
            }
            TextRange range=editor.getUserData(LAST_PASTED_REGION);
            if (range != null) {
              editor.getCaretModel().moveToOffset(range.getStartOffset());
              editor.getSelectionModel().setSelection(range.getStartOffset(),range.getEndOffset());
            }
          }
 catch (          Exception exception) {
            LOG.error(exception);
          }
        }
      }
);
    }
  }
,EditorBundle.message("paste.command.name"),DND_COMMAND_KEY,UndoConfirmationPolicy.DEFAULT,editor.getDocument());
  return true;
}
