{
  PsiMethod method=(PsiMethod)psiElement;
  Set<PsiMethod> methodAndOverriders=new HashSet<PsiMethod>();
  Set<PsiClass> containingClasses=new HashSet<PsiClass>();
  LinkedHashSet<PsiElement> renamedReferences=new LinkedHashSet<PsiElement>();
  List<MemberHidesOuterMemberUsageInfo> outerHides=new ArrayList<MemberHidesOuterMemberUsageInfo>();
  List<MemberHidesStaticImportUsageInfo> staticImportHides=new ArrayList<MemberHidesStaticImportUsageInfo>();
  methodAndOverriders.add(method);
  containingClasses.add(method.getContainingClass());
  for (  UsageInfo usage : usages) {
    PsiElement element=usage.getElement();
    if (element == null)     continue;
    if (usage instanceof MemberHidesStaticImportUsageInfo) {
      staticImportHides.add((MemberHidesStaticImportUsageInfo)usage);
    }
 else     if (usage instanceof MemberHidesOuterMemberUsageInfo) {
      PsiJavaCodeReferenceElement collidingRef=(PsiJavaCodeReferenceElement)element;
      PsiMethod resolved=(PsiMethod)collidingRef.resolve();
      outerHides.add(new MemberHidesOuterMemberUsageInfo(element,resolved));
    }
 else     if (!(element instanceof PsiMethod)) {
      final PsiReference ref;
      if (usage instanceof MoveRenameUsageInfo) {
        ref=usage.getReference();
      }
 else {
        ref=element.getReference();
      }
      if (ref instanceof PsiImportStaticReferenceElement && ((PsiImportStaticReferenceElement)ref).multiResolve(false).length > 1) {
        continue;
      }
      if (ref != null) {
        PsiElement e=processRef(ref,newName);
        if (e != null) {
          renamedReferences.add(e);
        }
      }
    }
 else {
      PsiMethod overrider=(PsiMethod)element;
      methodAndOverriders.add(overrider);
      containingClasses.add(overrider.getContainingClass());
    }
  }
  method.setName(newName);
  for (  UsageInfo usage : usages) {
    PsiElement element=usage.getElement();
    if (element instanceof PsiMethod) {
      ((PsiMethod)element).setName(newName);
    }
  }
  if (listener != null) {
    listener.elementRenamed(method);
  }
  for (  PsiElement element : renamedReferences) {
    fixNameCollisionsWithInnerClassMethod(element,newName,methodAndOverriders,containingClasses,method.hasModifierProperty(PsiModifier.STATIC));
  }
  qualifyOuterMemberReferences(outerHides);
  qualifyStaticImportReferences(staticImportHides);
}
