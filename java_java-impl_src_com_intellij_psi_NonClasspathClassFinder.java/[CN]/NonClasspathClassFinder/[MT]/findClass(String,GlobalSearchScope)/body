{
  final List<VirtualFile> classRoots=getClassRoots();
  if (classRoots.isEmpty()) {
    return null;
  }
  for (  final VirtualFile classRoot : classRoots) {
    if (scope.contains(classRoot)) {
      final VirtualFile classFile=classRoot.findFileByRelativePath(qualifiedName.replace('.','/') + ".class");
      if (classFile != null) {
        if (!classFile.isValid()) {
          throw new AssertionError("Invalid child of valid parent: " + classFile.getPath() + "; "+ classRoot.isValid()+ " path="+ classRoot.getPath());
        }
        final PsiFile file=PsiManager.getInstance(myProject).findFile(classFile);
        if (file instanceof PsiClassOwner) {
          final PsiClass[] classes=((PsiClassOwner)file).getClasses();
          if (classes.length == 1) {
            return classes[0];
          }
        }
      }
    }
  }
  return null;
}
