{
  if (builder.getTokenType() == null)   return null;
  final TypeInfo typeInfo=new TypeInfo();
  final boolean annotationsSupported=areTypeAnnotationsSupported(builder);
  PsiBuilder.Marker type=builder.mark();
  if (annotationsSupported) {
    DeclarationParser.parseAnnotations(builder);
  }
  final IElementType tokenType=builder.getTokenType();
  if (expect(builder,ElementType.PRIMITIVE_TYPE_BIT_SET)) {
    typeInfo.isPrimitive=true;
  }
 else   if (tokenType == JavaTokenType.IDENTIFIER) {
    parseJavaCodeReference(builder,eatLastDot,true,annotationsSupported,false,false,typeInfo);
  }
 else   if (wildcard && tokenType == JavaTokenType.QUEST) {
    type.drop();
    typeInfo.marker=parseWildcardType(builder);
    return typeInfo.marker != null ? typeInfo : null;
  }
 else {
    type.drop();
    return null;
  }
  while (true) {
    type.done(JavaElementType.TYPE);
    if (annotationsSupported) {
      DeclarationParser.parseAnnotations(builder);
    }
    if (!expect(builder,JavaTokenType.LBRACKET)) {
      break;
    }
    typeInfo.isArray=true;
    if (!expectOrError(builder,JavaTokenType.RBRACKET,JavaErrorMessages.message("expected.rbracket"))) {
      break;
    }
    type=type.precede();
  }
  typeInfo.marker=type;
  return typeInfo;
}
