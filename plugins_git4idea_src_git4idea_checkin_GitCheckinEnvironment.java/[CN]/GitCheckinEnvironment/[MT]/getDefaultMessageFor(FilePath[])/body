{
  StringBuilder rc=new StringBuilder();
  for (  VirtualFile root : GitUtil.gitRoots(Arrays.asList(filesToCheckin))) {
    VirtualFile mergeMsg=root.findFileByRelativePath(GitRepositoryFiles.GIT_MERGE_MSG);
    VirtualFile squashMsg=root.findFileByRelativePath(GitRepositoryFiles.GIT_SQUASH_MSG);
    if (mergeMsg != null || squashMsg != null) {
      try {
        String encoding=GitConfigUtil.getCommitEncoding(myProject,root);
        if (mergeMsg != null) {
          rc.append(FileUtil.loadFileText(new File(mergeMsg.getPath()),encoding));
        }
        if (squashMsg != null) {
          rc.append(FileUtil.loadFileText(new File(squashMsg.getPath()),encoding));
        }
      }
 catch (      IOException e) {
        if (log.isDebugEnabled()) {
          log.debug("Unable to load merge message",e);
        }
      }
    }
  }
  if (rc.length() != 0) {
    return rc.toString();
  }
  return null;
}
