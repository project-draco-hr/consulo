{
  HashSet<FilePath> realAdded=new HashSet<FilePath>();
  HashSet<FilePath> realRemoved=new HashSet<FilePath>();
  GitSimpleHandler diff=new GitSimpleHandler(project,root,GitCommand.DIFF);
  diff.setNoSSH(true);
  diff.setSilent(true);
  diff.setStdoutSuppressed(true);
  diff.addParameters("--diff-filter=ADMRUX","--name-status","HEAD");
  diff.endOptions();
  String output;
  try {
    output=diff.run();
  }
 catch (  VcsException ex) {
    exceptions.add(ex);
    return false;
  }
  String rootPath=root.getPath();
  for (StringTokenizer lines=new StringTokenizer(output,"\n",false); lines.hasMoreTokens(); ) {
    String line=lines.nextToken().trim();
    if (line.length() == 0) {
      continue;
    }
    String[] tk=line.split("\t");
switch (tk[0].charAt(0)) {
case 'M':
case 'A':
      realAdded.add(VcsUtil.getFilePath(rootPath + "/" + tk[1]));
    break;
case 'D':
  realRemoved.add(VcsUtil.getFilePathForDeletedFile(rootPath + "/" + tk[1],false));
break;
default :
throw new IllegalStateException("Unexpected status: " + line);
}
}
realAdded.removeAll(added);
realRemoved.removeAll(removed);
if (realAdded.size() != 0 || realRemoved.size() != 0) {
final List<FilePath> files=new ArrayList<FilePath>();
files.addAll(realAdded);
files.addAll(realRemoved);
final Ref<Boolean> mergeAll=new Ref<Boolean>();
try {
GuiUtils.runOrInvokeAndWait(new Runnable(){
public void run(){
String message=GitBundle.message("commit.partial.merge.message",partialOperation.getName());
SelectFilePathsDialog dialog=new SelectFilePathsDialog(project,files,message,null,"Commit All Files",CommonBundle.getCancelButtonText(),false);
dialog.setTitle(GitBundle.getString("commit.partial.merge.title"));
dialog.show();
mergeAll.set(dialog.isOK());
}
}
);
}
 catch (RuntimeException ex) {
throw ex;
}
catch (Exception ex) {
throw new RuntimeException("Unable to invoke a message box on AWT thread",ex);
}
if (!mergeAll.get()) {
return false;
}
if (!updateIndex(project,root,realAdded,realRemoved,exceptions)) {
return false;
}
for (FilePath f : realAdded) {
VcsDirtyScopeManager.getInstance(project).fileDirty(f);
}
for (FilePath f : realRemoved) {
VcsDirtyScopeManager.getInstance(project).fileDirty(f);
}
}
try {
GitSimpleHandler handler=new GitSimpleHandler(project,root,GitCommand.COMMIT);
handler.setNoSSH(true);
handler.addParameters("-F",messageFile.getAbsolutePath());
if (author != null) {
handler.addParameters("--author=" + author);
}
handler.endOptions();
handler.run();
GitRepositoryManager manager=GitUtil.getRepositoryManager(project);
manager.updateRepository(root);
}
 catch (VcsException ex) {
exceptions.add(ex);
return false;
}
return true;
}
