{
  final Project project=e.getProject();
  final List<GitHeavyCommit> commits=e.getData(GitVcs.SELECTED_COMMITS);
  if (project == null || commits == null || commits.isEmpty()) {
    LOG.info(String.format("Cherry-pick action should be disabled. Project: %s, commits: %s",project,commits));
    return;
  }
  for (  GitHeavyCommit commit : commits) {
    myIdsInProgress.add(commit.getShortHash());
  }
  FileDocumentManager.getInstance().saveAllDocuments();
  myPlatformFacade.getChangeListManager(project).blockModalNotifications();
  new Task.Backgroundable(project,"Cherry-picking",false){
    public void run(    @NotNull ProgressIndicator indicator){
      try {
        boolean autoCommit=GitVcsSettings.getInstance(myProject).isAutoCommitOnCherryPick();
        Map<GitRepository,List<GitHeavyCommit>> commitsInRoots=sortCommits(groupCommitsByRoots(project,commits));
        new GitCherryPicker(myProject,myGit,myPlatformFacade,autoCommit).cherryPick(commitsInRoots);
      }
  finally {
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          public void run(){
            myPlatformFacade.getChangeListManager(project).unblockModalNotifications();
            for (            GitHeavyCommit commit : commits) {
              myIdsInProgress.remove(commit.getShortHash());
            }
          }
        }
);
      }
    }
  }
.queue();
}
