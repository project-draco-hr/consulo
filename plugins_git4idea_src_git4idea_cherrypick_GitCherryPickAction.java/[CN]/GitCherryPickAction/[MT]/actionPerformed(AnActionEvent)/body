{
  final Project project=e.getProject();
  final List<GitCommit> commits=e.getData(GitVcs.SELECTED_COMMITS);
  if (project == null || commits == null || commits.isEmpty()) {
    LOG.info(String.format("Cherry-pick action should be disabled. Project: %s, commits: %s",project,commits));
    return;
  }
  for (  GitCommit commit : commits) {
    myIdsInProgress.add(commit.getShortHash());
  }
  FileDocumentManager.getInstance().saveAllDocuments();
  new Task.Backgroundable(project,"Cherry-picking",false){
    public void run(    @NotNull ProgressIndicator indicator){
      boolean autoCommit=GitVcsSettings.getInstance(myProject).isAutoCommitOnCherryPick();
      Map<GitRepository,List<GitCommit>> commitsInRoots=sortCommits(groupCommitsByRoots(project,commits));
      new GitCherryPicker(myProject,myGit,myPlatformFacade,autoCommit).cherryPick(commitsInRoots);
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          for (          GitCommit commit : commits) {
            myIdsInProgress.remove(commit.getShortHash());
          }
        }
      }
);
    }
  }
.queue();
}
