{
  final IElementType tokenType=root.getTokenType();
  if (skipWhiteSpaces && tokenType == TokenType.WHITE_SPACE)   return;
  final Ref<LighterASTNode[]> kids=new Ref<LighterASTNode[]>();
  final int numKids=tree.getChildren(tree.prepareForGetChildren(root),kids);
  final boolean composite=numKids > 0 || root.getStartOffset() == root.getEndOffset();
  StringUtil.repeatSymbol(buffer,' ',indent);
  if (tokenType == TokenType.ERROR_ELEMENT) {
    buffer.append("PsiErrorElement");
  }
 else   if (tokenType == TokenType.WHITE_SPACE) {
    buffer.append("PsiWhiteSpace");
  }
 else {
    buffer.append(composite ? "Element" : "PsiElement").append('(').append(tokenType).append(')');
  }
  if (!composite) {
    final String text=source.substring(chameleonShift + root.getStartOffset(),chameleonShift + root.getEndOffset());
    buffer.append("('").append(fixWhiteSpaces(text)).append("')");
  }
  buffer.append('\n');
  if (composite) {
    if (numKids == 0) {
      StringUtil.repeatSymbol(buffer,' ',indent + 2);
      buffer.append("<empty list>\n");
    }
 else {
      final int shift=root instanceof LighterLazyParseableNode ? root.getStartOffset() : 0;
      for (int i=0; i < numKids; i++) {
        lightTreeToBuffer(tree,source,buffer,kids.get()[i],indent + 2,skipWhiteSpaces,chameleonShift + shift);
      }
    }
  }
}
