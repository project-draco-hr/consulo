{
  final IElementType tokenType=node.getTokenType();
  if (skipWhiteSpaces && tokenType == TokenType.WHITE_SPACE)   return;
  final boolean isLeaf=(node instanceof LighterASTTokenNode);
  StringUtil.repeatSymbol(buffer,' ',indent);
  if (tokenType == TokenType.ERROR_ELEMENT) {
    buffer.append("PsiErrorElement");
  }
 else   if (tokenType == TokenType.WHITE_SPACE) {
    buffer.append("PsiWhiteSpace");
  }
 else {
    buffer.append(isLeaf ? "PsiElement" : "Element").append('(').append(tokenType).append(')');
  }
  if (isLeaf) {
    final String text=((LighterASTTokenNode)node).getText().toString();
    buffer.append("('").append(fixWhiteSpaces(text)).append("')");
  }
  buffer.append('\n');
  if (!isLeaf) {
    final Ref<LighterASTNode[]> kids=new Ref<LighterASTNode[]>();
    final int numKids=tree.getChildren(tree.prepareForGetChildren(node),kids);
    if (numKids == 0) {
      StringUtil.repeatSymbol(buffer,' ',indent + 2);
      buffer.append("<empty list>\n");
    }
 else {
      for (int i=0; i < numKids; i++) {
        lightTreeToBuffer(tree,kids.get()[i],buffer,indent + 2,skipWhiteSpaces);
      }
    }
  }
}
