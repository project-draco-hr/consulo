{
  final Set<MavenDomDependency> usages=new HashSet<MavenDomDependency>();
  final MavenDomProjectModel model=dependency.getParentOfType(MavenDomProjectModel.class,false);
  if (model != null) {
    final String artifactId=dependency.getArtifactId().getStringValue();
    final String groupId=dependency.getGroupId().getStringValue();
    if (artifactId != null && groupId != null) {
      Processor<MavenDomProjectModel> collectProcessor=new Processor<MavenDomProjectModel>(){
        public boolean process(        MavenDomProjectModel mavenDomProjectModel){
          if (!model.equals(mavenDomProjectModel)) {
            for (            MavenDomDependency domDependency : mavenDomProjectModel.getDependencies().getDependencies()) {
              if (domDependency.equals(dependency))               continue;
              if (artifactId.equals(domDependency.getArtifactId().getStringValue()) && groupId.equals(domDependency.getGroupId().getStringValue())) {
                usages.add(domDependency);
              }
            }
          }
          return false;
        }
      }
;
      processProjectDependenciesRecursively(model,collectProcessor,project);
    }
  }
  return usages;
}
