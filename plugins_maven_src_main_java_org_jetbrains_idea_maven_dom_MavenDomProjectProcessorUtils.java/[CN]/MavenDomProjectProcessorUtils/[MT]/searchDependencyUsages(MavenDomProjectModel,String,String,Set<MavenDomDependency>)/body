{
  if (groupId == null || artifactId == null)   return Collections.emptySet();
  Project project=model.getManager().getProject();
  final Set<MavenDomDependency> usages=new HashSet<MavenDomDependency>();
  Processor<MavenDomProjectModel> collectProcessor=new Processor<MavenDomProjectModel>(){
    public boolean process(    MavenDomProjectModel mavenDomProjectModel){
      if (!model.equals(mavenDomProjectModel)) {
        for (        MavenDomDependency domDependency : mavenDomProjectModel.getDependencies().getDependencies()) {
          if (excludes.contains(domDependency))           continue;
          if (artifactId.equals(domDependency.getArtifactId().getStringValue()) && groupId.equals(domDependency.getGroupId().getStringValue())) {
            usages.add(domDependency);
          }
        }
      }
      return false;
    }
  }
;
  processChildrenRecursively(model,collectProcessor,project,new HashSet<MavenDomProjectModel>(),true);
  return usages;
}
