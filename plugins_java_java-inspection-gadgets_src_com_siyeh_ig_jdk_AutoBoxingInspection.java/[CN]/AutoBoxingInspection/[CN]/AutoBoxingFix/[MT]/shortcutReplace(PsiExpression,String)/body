{
  if (!(expression instanceof PsiMethodCallExpression)) {
    return false;
  }
  final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)expression;
  final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
  final PsiExpression qualifierExpression=methodExpression.getQualifierExpression();
  if (qualifierExpression == null) {
    return false;
  }
  if (classToConstruct.equals(CommonClassNames.JAVA_LANG_INTEGER)) {
    if (MethodCallUtils.isCallToMethod(methodCallExpression,CommonClassNames.JAVA_LANG_INTEGER,PsiType.INT,"intValue")) {
      expression.replace(qualifierExpression);
      return true;
    }
  }
 else   if (classToConstruct.equals(CommonClassNames.JAVA_LANG_SHORT)) {
    if (MethodCallUtils.isCallToMethod(methodCallExpression,CommonClassNames.JAVA_LANG_SHORT,PsiType.SHORT,"shortValue")) {
      expression.replace(qualifierExpression);
      return true;
    }
  }
 else   if (classToConstruct.equals(CommonClassNames.JAVA_LANG_BYTE)) {
    if (MethodCallUtils.isCallToMethod(methodCallExpression,CommonClassNames.JAVA_LANG_BYTE,PsiType.BYTE,"byteValue")) {
      expression.replace(qualifierExpression);
      return true;
    }
  }
 else   if (classToConstruct.equals(CommonClassNames.JAVA_LANG_CHARACTER)) {
    if (MethodCallUtils.isCallToMethod(methodCallExpression,CommonClassNames.JAVA_LANG_CHARACTER,PsiType.CHAR,"charValue")) {
      expression.replace(qualifierExpression);
      return true;
    }
  }
 else   if (classToConstruct.equals(CommonClassNames.JAVA_LANG_LONG)) {
    if (MethodCallUtils.isCallToMethod(methodCallExpression,CommonClassNames.JAVA_LANG_LONG,PsiType.LONG,"longValue")) {
      expression.replace(qualifierExpression);
      return true;
    }
  }
 else   if (classToConstruct.equals(CommonClassNames.JAVA_LANG_FLOAT)) {
    if (MethodCallUtils.isCallToMethod(methodCallExpression,CommonClassNames.JAVA_LANG_FLOAT,PsiType.FLOAT,"floatValue")) {
      expression.replace(qualifierExpression);
      return true;
    }
  }
 else   if (classToConstruct.equals(CommonClassNames.JAVA_LANG_DOUBLE)) {
    if (MethodCallUtils.isCallToMethod(methodCallExpression,CommonClassNames.JAVA_LANG_DOUBLE,PsiType.DOUBLE,"doubleValue")) {
      expression.replace(qualifierExpression);
      return true;
    }
  }
  return false;
}
