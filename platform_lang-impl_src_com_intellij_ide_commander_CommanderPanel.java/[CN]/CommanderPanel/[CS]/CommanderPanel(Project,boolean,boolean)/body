{
  super(new BorderLayout());
  myProject=project;
  myEnableSearchHighlighting=enableSearchHighlighting;
  myModel=new MyModel();
  myList=new JBList(myModel);
  myList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
  if (enablePopupMenu) {
    myCopyPasteDelegator=new CopyPasteDelegator(myProject,myList){
      @NotNull protected PsiElement[] getSelectedElements(){
        return CommanderPanel.this.getSelectedElements();
      }
    }
;
  }
  myListSpeedSearch=new ListSpeedSearch(myList);
  ListScrollingUtil.installActions(myList);
  myList.registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      if (myBuilder == null)       return;
      myBuilder.buildRoot();
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_BACK_SLASH,SystemInfo.isMac ? KeyEvent.META_MASK : KeyEvent.CTRL_MASK),JComponent.WHEN_FOCUSED);
  myList.getInputMap(WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),ACTION_DRILL_DOWN);
  myList.getInputMap(WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_DOWN,SystemInfo.isMac ? KeyEvent.META_MASK : KeyEvent.CTRL_MASK),ACTION_DRILL_DOWN);
  myList.getActionMap().put(ACTION_DRILL_DOWN,new AbstractAction(){
    public void actionPerformed(    final ActionEvent e){
      drillDown();
    }
  }
);
  myList.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    final MouseEvent e){
      if (e.getClickCount() == 2) {
        drillDown();
      }
    }
  }
);
  myList.getInputMap(WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_UP,SystemInfo.isMac ? KeyEvent.META_MASK : KeyEvent.CTRL_MASK),ACTION_GO_UP);
  myList.getInputMap(WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_BACK_SPACE,0),ACTION_GO_UP);
  myList.getActionMap().put(ACTION_GO_UP,new AbstractAction(){
    public void actionPerformed(    final ActionEvent e){
      goUp();
    }
  }
);
  myList.getActionMap().put("selectAll",new AbstractAction(){
    public void actionPerformed(    final ActionEvent e){
    }
  }
);
  if (enablePopupMenu) {
    myList.addMouseListener(new PopupHandler(){
      public void invokePopup(      final Component comp,      final int x,      final int y){
        CommanderPanel.this.invokePopup(comp,x,y);
      }
    }
);
  }
  myList.addFocusListener(new FocusAdapter(){
    public void focusGained(    final FocusEvent e){
      setActive(true);
    }
    public void focusLost(    final FocusEvent e){
      setActive(false);
    }
  }
);
}
