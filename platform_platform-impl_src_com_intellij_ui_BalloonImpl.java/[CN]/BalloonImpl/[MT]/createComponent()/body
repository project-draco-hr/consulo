{
  myComp=new MyComponent(myContent,this,myShadowBorderProvider != null ? null : myShowPointer ? myPosition.createBorder(this) : getPointlessBorder());
  if (myActionProvider == null) {
    final Consumer<MouseEvent> listener=new Consumer<MouseEvent>(){
      @Override public void consume(      MouseEvent event){
        SwingUtilities.invokeLater(new Runnable(){
          @Override public void run(){
            BalloonImpl.this.hide();
          }
        }
);
      }
    }
;
    myActionProvider=new ActionProvider(){
      private BalloonActionButton myCloseButton;
      @NotNull @Override public List<BalloonActionButton> createActions(){
        myCloseButton=new CloseButton(listener);
        return Collections.singletonList(myCloseButton);
      }
      @Override public void layout(      @NotNull Rectangle lpBounds){
        if (!myCloseButton.isVisible()) {
          return;
        }
        Icon icon=getCloseButton();
        int iconWidth=icon.getIconWidth();
        int iconHeight=icon.getIconHeight();
        Rectangle r=new Rectangle(lpBounds.x + lpBounds.width - iconWidth + (int)(iconWidth * 0.3),lpBounds.y - (int)(iconHeight * 0.3),iconWidth,iconHeight);
        Insets border=getShadowBorderInsets();
        r.x-=border.left;
        r.y-=border.top;
        myCloseButton.setBounds(r);
      }
    }
;
  }
  myComp.clear();
  myComp.myAlpha=isAnimationEnabled() ? 0f : -1;
  myComp.setBorder(new EmptyBorder(getShadowBorderInsets()));
  myLayeredPane.add(myComp);
  myLayeredPane.setLayer(myComp,getLayer(),0);
  myPosition.updateBounds(this);
  if (myBlockClicks) {
    myComp.addMouseListener(new MouseAdapter(){
      @Override public void mouseClicked(      MouseEvent e){
        e.consume();
      }
      @Override public void mousePressed(      MouseEvent e){
        e.consume();
      }
      @Override public void mouseReleased(      MouseEvent e){
        e.consume();
      }
    }
);
  }
}
