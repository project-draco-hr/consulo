{
  myBorderColor=borderColor;
  myFillColor=fillColor;
  myContent=content;
  myHideOnMouse=hideOnMouse;
  myHideOnKey=hideOnKey;
  myHideOnAction=hideOnAction;
  myShowPointer=showPointer;
  myEnableCloseButton=enableCloseButton;
  myHideOnFrameResize=hideOnFrameResize;
  myClickHandler=clickHandler;
  myCloseOnClick=closeOnClick;
  myCalloutshift=calloutShift;
  myPositionChangeXShift=positioChangeXShfit;
  myPositionChangeYShift=positionChangeYShift;
  myDialogMode=dialogMode;
  myTitle=title;
  myLayer=layer != null ? layer : Layer.normal;
  if (!myDialogMode) {
    new AwtVisitor(content){
      @Override public boolean visit(      Component component){
        if (component instanceof JLabel) {
          JLabel label=(JLabel)component;
          if (label.getDisplayedMnemonic() != '\0' || label.getDisplayedMnemonicIndex() >= 0) {
            myDialogMode=true;
            return true;
          }
        }
 else         if (component instanceof JCheckBox) {
          JCheckBox checkBox=(JCheckBox)component;
          if (checkBox.getMnemonic() >= 0 || checkBox.getDisplayedMnemonicIndex() >= 0) {
            myDialogMode=true;
            return true;
          }
        }
        return false;
      }
    }
;
  }
  myShadow=shadow;
  myContainerInsets=contentInsets;
  myFadeoutTime=fadeoutTime;
  myAnimationCycle=animationCycle;
  if (smallVariant) {
    new AwtVisitor(myContent){
      @Override public boolean visit(      Component component){
        UIUtil.applyStyle(UIUtil.ComponentStyle.SMALL,component);
        return false;
      }
    }
;
  }
}
