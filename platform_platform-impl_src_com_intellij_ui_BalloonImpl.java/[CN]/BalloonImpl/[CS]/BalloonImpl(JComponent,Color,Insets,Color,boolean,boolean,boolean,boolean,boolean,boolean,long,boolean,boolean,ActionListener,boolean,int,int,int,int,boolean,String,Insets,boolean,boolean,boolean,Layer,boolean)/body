{
  myBorderColor=borderColor;
  myBorderInsets=borderInsets != null ? borderInsets : JBUI.insets(3);
  myFillColor=fillColor;
  myContent=content;
  myHideOnMouse=hideOnMouse;
  myHideOnKey=hideOnKey;
  myHideOnAction=hideOnAction;
  myHideOnCloseClick=hideOnCloseClick;
  myShowPointer=showPointer;
  myEnableButtons=enableButtons;
  myHideOnFrameResize=hideOnFrameResize;
  myHideOnLinkClick=hideOnLinkClick;
  myClickHandler=clickHandler;
  myCloseOnClick=closeOnClick;
  myCalloutShift=calloutShift;
  myPositionChangeXShift=positionChangeXShift;
  myPositionChangeYShift=positionChangeYShift;
  myDialogMode=dialogMode;
  myTitle=title;
  myLayer=layer != null ? layer : Layer.normal;
  myBlockClicks=blockClicks;
  myRequestFocus=requestFocus;
  MnemonicHelper.init(content);
  if (!myDialogMode) {
    for (    Component component : UIUtil.uiTraverser(myContent)) {
      if (component instanceof JLabel) {
        JLabel label=(JLabel)component;
        if (label.getDisplayedMnemonic() != '\0' || label.getDisplayedMnemonicIndex() >= 0) {
          myDialogMode=true;
          break;
        }
      }
 else       if (component instanceof JCheckBox) {
        JCheckBox checkBox=(JCheckBox)component;
        if (checkBox.getMnemonic() >= 0 || checkBox.getDisplayedMnemonicIndex() >= 0) {
          myDialogMode=true;
          break;
        }
      }
    }
  }
  myShadow=shadow;
  myShadowSize=Registry.intValue("ide.balloon.shadow.size");
  myContainerInsets=contentInsets;
  myFadeoutTime=fadeoutTime;
  myAnimationCycle=animationCycle;
  if (smallVariant) {
    for (    Component component : UIUtil.uiTraverser(myContent)) {
      UIUtil.applyStyle(UIUtil.ComponentStyle.SMALL,component);
    }
  }
}
