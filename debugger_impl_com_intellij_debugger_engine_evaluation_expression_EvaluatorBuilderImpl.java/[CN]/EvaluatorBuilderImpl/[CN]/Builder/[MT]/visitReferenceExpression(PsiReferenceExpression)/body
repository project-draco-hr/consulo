{
  if (LOG.isDebugEnabled()) {
    LOG.debug("visitReferenceExpression " + expression);
  }
  PsiExpression qualifier=expression.getQualifierExpression();
  PsiElement element=expression.resolve();
  if (element instanceof PsiLocalVariable || element instanceof PsiParameter) {
    final PsiFile containingFile=element.getContainingFile();
    if (containingFile instanceof PsiCodeFragment && myCurrentFragmentEvaluator != null && myVisitedFragments.contains(((PsiCodeFragment)containingFile))) {
      myResult=new SyntheticVariableEvaluator(myCurrentFragmentEvaluator,((PsiVariable)element).getName());
      return;
    }
    PsiVariable psiVar=(PsiVariable)element;
    String localName=psiVar.getName();
    PsiClass variableClass=getContainingClass(psiVar);
    if (getContextPsiClass() == null || getContextPsiClass().equals(variableClass)) {
      myResult=new LocalVariableEvaluator(localName,ContextUtil.isJspImplicit(element));
      return;
    }
    int iterationCount=0;
    PsiClass aClass=getOuterClass(getContextPsiClass());
    while (aClass != null && !aClass.equals(variableClass)) {
      iterationCount++;
      aClass=getOuterClass(aClass);
    }
    if (aClass != null) {
      if (psiVar.getInitializer() != null) {
        Object value=JavaPsiFacade.getInstance(psiVar.getProject()).getConstantEvaluationHelper().computeConstantExpression(psiVar.getInitializer());
        if (value != null) {
          myResult=new LiteralEvaluator(value,psiVar.getType().getCanonicalText());
          return;
        }
      }
      Evaluator objectEvaluator=new ThisEvaluator(iterationCount);
      final JVMName contextClassName=JVMNameUtil.getContextClassJVMQualifiedName(SourcePosition.createFromElement(myContextElement));
      myResult=new FieldEvaluator(objectEvaluator,contextClassName != null ? contextClassName : JVMNameUtil.getJVMQualifiedName(getContextPsiClass()),"val$" + localName);
      return;
    }
    throw new EvaluateRuntimeException(EvaluateExceptionUtil.createEvaluateException(DebuggerBundle.message("evaluation.error.local.variable.missing.from.class.closure",localName)));
  }
 else   if (element instanceof PsiField) {
    final PsiField psiField=(PsiField)element;
    final PsiClass fieldClass=psiField.getContainingClass();
    if (fieldClass == null) {
      throw new EvaluateRuntimeException(EvaluateExceptionUtil.createEvaluateException(DebuggerBundle.message("evaluation.error.cannot.resolve.field.class",psiField.getName())));
    }
    Evaluator objectEvaluator;
    if (psiField.hasModifierProperty(PsiModifier.STATIC)) {
      objectEvaluator=new TypeEvaluator(JVMNameUtil.getContextClassJVMQualifiedName(SourcePosition.createFromElement(psiField)));
    }
 else     if (qualifier != null) {
      qualifier.accept(this);
      objectEvaluator=myResult;
    }
 else     if (fieldClass.equals(getContextPsiClass()) || getContextPsiClass().isInheritor(fieldClass,true)) {
      objectEvaluator=new ThisEvaluator();
    }
 else {
      int iterationCount=0;
      PsiClass aClass=getContextPsiClass();
      while (aClass != null && !(aClass.equals(fieldClass) || aClass.isInheritor(fieldClass,true))) {
        iterationCount++;
        aClass=getOuterClass(aClass);
      }
      if (aClass == null) {
        throw new EvaluateRuntimeException(EvaluateExceptionUtil.createEvaluateException(DebuggerBundle.message("evaluation.error.cannot.sources.for.field.class",psiField.getName())));
      }
      objectEvaluator=new ThisEvaluator(iterationCount);
    }
    myResult=new FieldEvaluator(objectEvaluator,JVMNameUtil.getJVMQualifiedName(fieldClass),psiField.getName());
  }
 else {
    PsiElement nameElement=expression.getReferenceNameElement();
    String name;
    if (nameElement instanceof PsiIdentifier) {
      name=nameElement.getText();
    }
 else {
      final String elementDisplayString=(nameElement != null ? nameElement.getText() : "(null)");
      throw new EvaluateRuntimeException(EvaluateExceptionUtil.createEvaluateException(DebuggerBundle.message("evaluation.error.identifier.expected",elementDisplayString)));
    }
    if (qualifier != null) {
      final PsiElement qualifierTarget=(qualifier instanceof PsiReferenceExpression) ? ((PsiReferenceExpression)qualifier).resolve() : null;
      if (qualifierTarget instanceof PsiClass) {
        PsiClass psiClass=(PsiClass)qualifierTarget;
        final JVMName typeName=JVMNameUtil.getJVMQualifiedName(psiClass);
        myResult=new FieldEvaluator(new TypeEvaluator(typeName),typeName,name);
      }
 else {
        PsiType type=qualifier.getType();
        if (type == null)         throw new EvaluateRuntimeException(EvaluateExceptionUtil.createEvaluateException(DebuggerBundle.message("evaluation.error.qualifier.type.unknown",qualifier.getText())));
        qualifier.accept(this);
        if (myResult == null) {
          throw new EvaluateRuntimeException(EvaluateExceptionUtil.createEvaluateException(DebuggerBundle.message("evaluation.error.cannot.evaluate.qualifier",qualifier.getText())));
        }
        myResult=new FieldEvaluator(myResult,JVMNameUtil.getJVMQualifiedName(type),name);
      }
    }
 else {
      myResult=new LocalVariableEvaluator(name,false);
    }
  }
}
