{
  if (paths.length == 0)   return -1;
  final List<String> parameters=new ArrayList<String>();
  parameters.add("--depth");
  parameters.add(Util.getDepthName(depth));
  if (noUnlock) {
    parameters.add("--no-unlock");
  }
  if (keepChangelist) {
    parameters.add("--keep-changelists");
  }
  if (changelists != null && changelists.length > 0) {
    Util.changelistsToCommand(changelists,parameters);
  }
  if (revpropTable != null && !revpropTable.isEmpty()) {
    final Set<Map.Entry<Object,Object>> set=revpropTable.entrySet();
    for (    Map.Entry<Object,Object> entry : set) {
      parameters.add("--with-revprop");
      parameters.add(entry.getKey() + "=" + entry.getValue());
    }
  }
  parameters.add("-m");
  parameters.add(message);
  Arrays.sort(paths);
  parameters.addAll(Arrays.asList(paths));
  try {
    SvnLineCommand.runAndWaitProcessErrorsIntoExceptions(myExePath,new File(paths[0]),SvnCommandName.ci,new CommandListener(),myAuthenticationCallback,ArrayUtil.toStringArray(parameters));
  }
 catch (  SvnBindException e) {
    throw BindClientException.create(e,-1);
  }
  if (myException != null) {
    throw BindClientException.create(myException,-1);
  }
  return myCommittedRevision;
}
