{
  if (StringUtil.isEmptyOrSpaces(line))   return;
  if (line.startsWith(ourTransmittingData)) {
    if (myHandler != null) {
      myHandler.commitEvent(CommitEventType.transmittingDeltas,myBase);
    }
    return;
  }
  if (line.startsWith(ourCommittedRevision)) {
    final String substring=line.substring(ourCommittedRevision.length());
    int cnt=0;
    while (StringUtil.isWhiteSpace(substring.charAt(cnt))) {
      ++cnt;
    }
    final StringBuilder num=new StringBuilder();
    while (Character.isDigit(substring.charAt(cnt))) {
      num.append(substring.charAt(cnt));
      ++cnt;
    }
    if (num.length() > 0) {
      try {
        myCommittedRevision=Long.parseLong(num.toString());
      }
 catch (      NumberFormatException e) {
        final String message="Wrong committed revision number: " + num.toString() + ", string: "+ line;
        LOG.info(message,e);
        throw new SvnBindException(message);
      }
    }
 else {
      final String message="Missing committed revision number: " + num.toString() + ", string: "+ line;
      LOG.info(message);
      throw new SvnBindException(message);
    }
  }
 else {
    if (myHandler == null)     return;
    final int idxSpace=line.indexOf(' ');
    if (idxSpace == -1) {
      LOG.info("Can not parse event type: " + line);
      return;
    }
    final CommitEventType type=CommitEventType.create(line.substring(0,idxSpace));
    if (type == null) {
      LOG.info("Can not parse event type: " + line);
      return;
    }
    final File target=new File(myBase,new String(line.substring(idxSpace + 1).trim()));
    myHandler.commitEvent(type,target);
  }
}
