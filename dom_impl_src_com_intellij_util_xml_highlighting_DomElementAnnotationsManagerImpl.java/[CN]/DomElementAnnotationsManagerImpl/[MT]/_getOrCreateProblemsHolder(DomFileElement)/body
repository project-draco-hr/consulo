{
  final DomElementsProblemsHolderImpl holder;
  final DomElement rootElement=element.getRootElement();
  if (isHolderOutdated(element)) {
    holder=new DomElementsProblemsHolderImpl(element);
    rootElement.putUserData(DOM_PROBLEM_HOLDER_KEY,holder);
    final CachedValue<Boolean> cachedValue=myCachedValuesManager.createCachedValue(new CachedValueProvider<Boolean>(){
      public Result<Boolean> compute(){
        return new Result<Boolean>(Boolean.FALSE,element,PsiModificationTracker.OUT_OF_CODE_BLOCK_MODIFICATION_COUNT,myModificationTracker,myProjectRootManager);
      }
    }
,false);
    cachedValue.getValue();
    rootElement.putUserData(CACHED_VALUE_KEY,cachedValue);
  }
 else {
    holder=rootElement.getUserData(DOM_PROBLEM_HOLDER_KEY);
    LOG.assertTrue(holder != null);
  }
  return holder;
}
