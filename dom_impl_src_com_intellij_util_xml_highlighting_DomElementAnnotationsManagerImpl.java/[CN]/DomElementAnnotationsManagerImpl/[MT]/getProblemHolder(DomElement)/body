{
  if (element == null || !element.isValid())   return EMPTY_PROBLEMS_HOLDER;
  final DomFileElement<DomElement> fileElement=element.getRoot();
  if (!isCalculating(fileElement) || SwingUtilities.isEventDispatchThread()) {
synchronized (PsiLock.LOCK) {
      final DomElementsProblemsHolder readyHolder=myReadyHolders.get(fileElement);
      if (isHighlightingFinished(fileElement)) {
        return readyHolder;
      }
      if (myCalculatingHolders.containsKey(fileElement)) {
        return readyHolder == null ? EMPTY_PROBLEMS_HOLDER : readyHolder;
      }
      myCalculatingHolders.put(fileElement,new Boolean(true));
    }
    try {
      final DomElementsProblemsHolderImpl holder=new DomElementsProblemsHolderImpl(fileElement);
      holder.calculateAllProblems();
synchronized (PsiLock.LOCK) {
        final Project project=fileElement.getManager().getProject();
        final CachedValuesManager cachedValuesManager=PsiManager.getInstance(project).getCachedValuesManager();
        myReadyHolders.put(fileElement,holder);
        final CachedValue<Boolean> cachedValue=cachedValuesManager.createCachedValue(new CachedValueProvider<Boolean>(){
          public Result<Boolean> compute(){
            return new Result<Boolean>(Boolean.FALSE,fileElement,ProjectRootManager.getInstance(project),myModificationTracker);
          }
        }
,false);
        myCachedValues.put(fileElement,cachedValue);
        cachedValue.getValue();
      }
      myDispatcher.getMulticaster().highlightingFinished(fileElement);
      return holder;
    }
  finally {
      final Boolean aBoolean;
synchronized (PsiLock.LOCK) {
        aBoolean=myCalculatingHolders.remove(fileElement);
      }
synchronized (aBoolean) {
        aBoolean.notifyAll();
      }
    }
  }
 else {
    final Boolean value;
synchronized (PsiLock.LOCK) {
      value=myCalculatingHolders.get(fileElement);
    }
    if (value != null) {
synchronized (value) {
        try {
          value.wait();
        }
 catch (        InterruptedException e) {
        }
      }
    }
    return getProblemHolder(fileElement);
  }
}
