{
  super(project,true);
  myProject=project;
  myPsiElement=element;
  myFindUsagesOptions=findUsagesOptions;
  myToShowInNewTab=toShowInNewTab;
  myIsShowInNewTabEnabled=isShowInNewTabEnabled;
  myIsShowInNewTabVisible=!isSingleFile;
  if (!isSingleFile) {
    if (myPsiElement instanceof PsiClass) {
      mySearchInNonJavaFilesAvailable=((PsiClass)myPsiElement).getQualifiedName() != null;
    }
 else     if (myPsiElement instanceof PsiPackage) {
      mySearchInNonJavaFilesAvailable=true;
    }
 else {
      mySearchInNonJavaFilesAvailable=false;
    }
  }
 else {
    mySearchInNonJavaFilesAvailable=false;
  }
  if (!isSingleFile) {
    mySearchInLibrariesAvailable=!myPsiElement.getManager().isInProject(myPsiElement);
  }
 else {
    mySearchInLibrariesAvailable=false;
  }
  if (element instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)element;
    myIncludeOverloadedMethodsAvailable=MethodSignatureUtil.hasOverloads(method);
  }
  myUpdateAction=new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      update();
    }
  }
;
  setButtonsMargin(null);
  init();
  setOKButtonText("Find");
  setOKButtonIcon(IconLoader.getIcon("/actions/find.png"));
  setTitle(isSingleFile ? "Find Usages in File" : "Find Usages");
  update();
}
