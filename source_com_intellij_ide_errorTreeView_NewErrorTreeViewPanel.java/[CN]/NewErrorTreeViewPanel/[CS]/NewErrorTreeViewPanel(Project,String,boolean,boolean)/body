{
  myProject=project;
  myHelpId=helpId;
  myCreateExitAction=createExitAction;
  setLayout(new BorderLayout());
  myAutoScrollToSourceHandler=new AutoScrollToSourceHandler(myProject){
    protected boolean isAutoScrollMode(){
      return ErrorTreeViewConfiguration.getInstance(myProject).isAutoscrollToSource();
    }
    protected void setAutoScrollMode(    boolean state){
      ErrorTreeViewConfiguration.getInstance(myProject).setAutoscrollToSource(state);
    }
  }
;
  myMessagePanel=new JPanel(new BorderLayout());
  myErrorViewStructure=new ErrorViewStructure(project);
  DefaultMutableTreeNode root=new DefaultMutableTreeNode();
  root.setUserObject(myErrorViewStructure.createDescriptor(myErrorViewStructure.getRootElement(),null));
  final DefaultTreeModel treeModel=new DefaultTreeModel(root);
  myTree=new Tree(treeModel){
    public void setRowHeight(    int i){
      super.setRowHeight(0);
    }
  }
;
  myBuilder=new ErrorViewTreeBuilder(myTree,treeModel,myErrorViewStructure);
  myExporterToTextFile=new ErrorViewTextExporter(myErrorViewStructure);
  myOccurenceNavigatorSupport=new MyOccurenceNavigatorSupport(myTree);
  myAutoScrollToSourceHandler.install(myTree);
  TreeUtil.installActions(myTree);
  myTree.putClientProperty("JTree.lineStyle","Angled");
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(true);
  myTree.setLargeModel(true);
  myTree.setLargeModel(true);
  JScrollPane scrollPane=NewErrorTreeRenderer.install(myTree);
  myMessagePanel.add(scrollPane,BorderLayout.CENTER);
  if (createToolbar) {
    add(createToolbarPanel(),BorderLayout.WEST);
  }
  add(myMessagePanel,BorderLayout.CENTER);
  myTree.addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_ENTER) {
        navigateToSource(false);
      }
    }
  }
);
  myTree.addMouseListener(new PopupHandler(){
    public void invokePopup(    Component comp,    int x,    int y){
      popupInvoked(comp,x,y);
    }
  }
);
  EditSourceOnDoubleClickHandler.install(myTree);
}
