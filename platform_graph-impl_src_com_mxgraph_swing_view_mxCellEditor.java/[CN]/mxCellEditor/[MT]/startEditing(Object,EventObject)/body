{
  if (editingCell != null) {
    stopEditing(true);
  }
  mxCellState state=graphComponent.getGraph().getView().getState(cell);
  if (state != null) {
    editingCell=cell;
    trigger=evt;
    double scale=Math.max(minimumEditorScale,graphComponent.getGraph().getView().getScale());
    scrollPane.setBounds(getEditorBounds(state,scale));
    scrollPane.setVisible(true);
    String value=getInitialValue(state,evt);
    JTextComponent currentEditor=null;
    if (graphComponent.getGraph().isHtmlLabel(cell)) {
      if (isExtractHtmlBody()) {
        value=mxUtils.getBodyMarkup(value,isReplaceHtmlLinefeeds());
      }
      editorPane.setDocument(mxUtils.createHtmlDocumentObject(state.getStyle(),scale));
      editorPane.setText(value);
      JPanel wrapper=new JPanel(new BorderLayout());
      wrapper.setOpaque(false);
      wrapper.add(editorPane,BorderLayout.CENTER);
      scrollPane.setViewportView(wrapper);
      currentEditor=editorPane;
    }
 else {
      textArea.setFont(mxUtils.getFont(state.getStyle(),scale));
      Color fontColor=mxUtils.getColor(state.getStyle(),mxConstants.STYLE_FONTCOLOR,Color.black);
      textArea.setForeground(fontColor);
      textArea.setText(value);
      scrollPane.setViewportView(textArea);
      currentEditor=textArea;
    }
    graphComponent.getGraphControl().add(scrollPane,0);
    if (isHideLabel(state)) {
      graphComponent.redraw(state);
    }
    currentEditor.revalidate();
    currentEditor.requestFocusInWindow();
    currentEditor.selectAll();
    configureActionMaps();
  }
}
