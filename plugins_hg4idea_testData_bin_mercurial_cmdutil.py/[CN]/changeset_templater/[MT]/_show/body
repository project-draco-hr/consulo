def _show(self, ctx, copies, props):
    'show a single changeset or file revision'
    showlist = templatekw.showlist

    def showparents(**args):
        ctx = args['ctx']
        parents = [[('rev', p.rev()), ('node', p.hex())] for p in self._meaningful_parentrevs(ctx)]
        return showlist('parent', parents, **args)
    props = props.copy()
    props.update(templatekw.keywords)
    props['parents'] = showparents
    props['templ'] = self.t
    props['ctx'] = ctx
    props['repo'] = self.repo
    props['revcache'] = {'copies': copies, }
    props['cache'] = self.cache
    tmplmodes = [(True, None), (self.ui.verbose, 'verbose'), (self.ui.quiet, 'quiet'), (self.ui.debugflag, 'debug')]
    types = {'header': '', 'footer': '', 'changeset': 'changeset', }
    for (mode, postfix) in tmplmodes:
        for type in types:
            cur = ((postfix and ('%s_%s' % (type, postfix))) or type)
            if (mode and (cur in self.t)):
                types[type] = cur
    try:
        if types['header']:
            h = templater.stringify(self.t(types['header'], **props))
            if self.buffered:
                self.header[ctx.rev()] = h
            else:
                self.ui.write(h)
        key = types['changeset']
        self.ui.write(templater.stringify(self.t(key, **props)))
        self.showpatch(ctx.node())
        if types['footer']:
            if (not self.footer):
                self.footer = templater.stringify(self.t(types['footer'], **props))
    except KeyError as inst:
        msg = _("%s: no key named '%s'")
        raise util.Abort((msg % (self.t.mapfile, inst.args[0])))
    except SyntaxError as inst:
        raise util.Abort((_('%s: %s') % (self.t.mapfile, inst.args[0])))
