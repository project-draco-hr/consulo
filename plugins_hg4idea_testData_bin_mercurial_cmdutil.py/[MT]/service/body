def service(opts, parentfn=None, initfn=None, runfn=None, logfile=None, runargs=None, appendpid=False):
    'Run a command as a service.'
    if (opts['daemon'] and (not opts['daemon_pipefds'])):
        (lockfd, lockpath) = tempfile.mkstemp(prefix='hg-service-')
        os.close(lockfd)
        try:
            if (not runargs):
                runargs = (util.hgcmd() + sys.argv[1:])
            runargs.append(('--daemon-pipefds=%s' % lockpath))
            for i in xrange(1, len(runargs)):
                if runargs[i].startswith('--cwd='):
                    del runargs[i]
                    break
                elif runargs[i].startswith('--cwd'):
                    del runargs[i:(i + 2)]
                    break

            def condfn():
                return (not os.path.exists(lockpath))
            pid = util.rundetached(runargs, condfn)
            if (pid < 0):
                raise util.Abort(_('child process failed to start'))
        finally:
            try:
                os.unlink(lockpath)
            except OSError as e:
                if (e.errno != errno.ENOENT):
                    raise
        if parentfn:
            return parentfn(pid)
        else:
            return
    if initfn:
        initfn()
    if opts['pid_file']:
        mode = ((appendpid and 'a') or 'w')
        fp = open(opts['pid_file'], mode)
        fp.write((str(os.getpid()) + '\n'))
        fp.close()
    if opts['daemon_pipefds']:
        lockpath = opts['daemon_pipefds']
        try:
            os.setsid()
        except AttributeError:
            pass
        os.unlink(lockpath)
        util.hidewindow()
        sys.stdout.flush()
        sys.stderr.flush()
        nullfd = os.open(util.nulldev, os.O_RDWR)
        logfilefd = nullfd
        if logfile:
            logfilefd = os.open(logfile, ((os.O_RDWR | os.O_CREAT) | os.O_APPEND))
        os.dup2(nullfd, 0)
        os.dup2(logfilefd, 1)
        os.dup2(logfilefd, 2)
        if (nullfd not in (0, 1, 2)):
            os.close(nullfd)
        if (logfile and (logfilefd not in (0, 1, 2))):
            os.close(logfilefd)
    if runfn:
        return runfn()
