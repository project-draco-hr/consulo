def revrange(repo, revs):
    'Yield revision as strings from a list of revision specifications.'

    def revfix(repo, val, defval):
        if ((not val) and (val != 0) and (defval is not None)):
            return defval
        return repo.changelog.rev(repo.lookup(val))
    (seen, l) = (set(), [])
    for spec in revs:
        if (revrangesep in spec):
            (start, end) = spec.split(revrangesep, 1)
            start = revfix(repo, start, 0)
            end = revfix(repo, end, (len(repo) - 1))
            step = (((start > end) and (-1)) or 1)
            for rev in xrange(start, (end + step), step):
                if (rev in seen):
                    continue
                seen.add(rev)
                l.append(rev)
        else:
            rev = revfix(repo, spec, None)
            if (rev in seen):
                continue
            seen.add(rev)
            l.append(rev)
    return l
