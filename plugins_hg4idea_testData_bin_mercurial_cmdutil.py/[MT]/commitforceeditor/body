def commitforceeditor(repo, ctx, subs):
    edittext = []
    (modified, added, removed) = (ctx.modified(), ctx.added(), ctx.removed())
    if ctx.description():
        edittext.append(ctx.description())
    edittext.append('')
    edittext.append('')
    edittext.append(_("HG: Enter commit message.  Lines beginning with 'HG:' are removed."))
    edittext.append(_('HG: Leave message empty to abort commit.'))
    edittext.append('HG: --')
    edittext.append((_('HG: user: %s') % ctx.user()))
    if ctx.p2():
        edittext.append(_('HG: branch merge'))
    if ctx.branch():
        edittext.append((_("HG: branch '%s'") % encoding.tolocal(ctx.branch())))
    edittext.extend([(_('HG: subrepo %s') % s) for s in subs])
    edittext.extend([(_('HG: added %s') % f) for f in added])
    edittext.extend([(_('HG: changed %s') % f) for f in modified])
    edittext.extend([(_('HG: removed %s') % f) for f in removed])
    if ((not added) and (not modified) and (not removed)):
        edittext.append(_('HG: no files changed'))
    edittext.append('')
    olddir = os.getcwd()
    os.chdir(repo.root)
    text = repo.ui.edit('\n'.join(edittext), ctx.user())
    text = re.sub('(?m)^HG:.*\n', '', text)
    os.chdir(olddir)
    if (not text.strip()):
        raise util.Abort(_('empty commit message'))
    return text
