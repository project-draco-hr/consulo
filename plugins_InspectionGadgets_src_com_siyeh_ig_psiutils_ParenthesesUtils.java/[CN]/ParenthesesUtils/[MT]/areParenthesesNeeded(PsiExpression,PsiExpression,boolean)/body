{
  if (parentExpression instanceof PsiParenthesizedExpression) {
    return false;
  }
 else   if (parentExpression instanceof PsiPolyadicExpression && expression instanceof PsiPolyadicExpression) {
    final PsiPolyadicExpression parentBinaryExpression=(PsiPolyadicExpression)parentExpression;
    final PsiType parentType=parentBinaryExpression.getType();
    if (parentType == null) {
      return true;
    }
    final PsiPolyadicExpression childBinaryExpression=(PsiPolyadicExpression)expression;
    final PsiType childType=childBinaryExpression.getType();
    if (!parentType.equals(childType)) {
      return true;
    }
    final IElementType parentOperator=parentBinaryExpression.getOperationTokenType();
    final IElementType childOperator=childBinaryExpression.getOperationTokenType();
    if (ignoreClarifyingParentheses && !childOperator.equals(parentOperator)) {
      return true;
    }
    final PsiExpression[] parentOperands=parentBinaryExpression.getOperands();
    if (!PsiTreeUtil.isAncestor(parentOperands[0],expression,false)) {
      if (!isCommutativeOperator(parentOperator)) {
        return true;
      }
    }
    return false;
  }
  final int parentPrecedence=getPrecedence(parentExpression);
  final int childPrecedence=getPrecedence(expression);
  return parentPrecedence < childPrecedence;
}
