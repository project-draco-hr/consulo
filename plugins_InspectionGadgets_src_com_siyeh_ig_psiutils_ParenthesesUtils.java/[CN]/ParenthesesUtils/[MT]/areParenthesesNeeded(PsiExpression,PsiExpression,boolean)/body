{
  if (parentExpression instanceof PsiParenthesizedExpression || parentExpression instanceof PsiArrayAccessExpression || parentExpression instanceof PsiArrayInitializerExpression) {
    return false;
  }
  final int parentPrecedence=getPrecedence(parentExpression);
  final int childPrecedence=getPrecedence(expression);
  if (parentPrecedence > childPrecedence) {
    return false;
  }
  if (parentExpression instanceof PsiPolyadicExpression && expression instanceof PsiPolyadicExpression) {
    final PsiPolyadicExpression parentPolyadicExpression=(PsiPolyadicExpression)parentExpression;
    final PsiType parentType=parentPolyadicExpression.getType();
    if (parentType == null) {
      return true;
    }
    final PsiPolyadicExpression childPolyadicExpression=(PsiPolyadicExpression)expression;
    final PsiType childType=childPolyadicExpression.getType();
    if (!parentType.equals(childType)) {
      return true;
    }
    if (childType.equalsToText(CommonClassNames.JAVA_LANG_STRING) && !PsiTreeUtil.isAncestor(parentPolyadicExpression.getOperands()[0],childPolyadicExpression,true)) {
      final PsiExpression[] operands=childPolyadicExpression.getOperands();
      for (      PsiExpression operand : operands) {
        if (!childType.equals(operand.getType())) {
          return true;
        }
      }
    }
 else     if (childType.equals(PsiType.BOOLEAN)) {
      final PsiExpression[] operands=childPolyadicExpression.getOperands();
      for (      PsiExpression operand : operands) {
        if (!PsiType.BOOLEAN.equals(operand.getType())) {
          return true;
        }
      }
    }
    final IElementType parentOperator=parentPolyadicExpression.getOperationTokenType();
    final IElementType childOperator=childPolyadicExpression.getOperationTokenType();
    if (ignoreClarifyingParentheses && !childOperator.equals(parentOperator)) {
      return true;
    }
    final PsiExpression[] parentOperands=parentPolyadicExpression.getOperands();
    if (!PsiTreeUtil.isAncestor(parentOperands[0],expression,false)) {
      if (!isCommutativeOperator(parentOperator)) {
        return true;
      }
    }
    return false;
  }
  return parentPrecedence != childPrecedence;
}
