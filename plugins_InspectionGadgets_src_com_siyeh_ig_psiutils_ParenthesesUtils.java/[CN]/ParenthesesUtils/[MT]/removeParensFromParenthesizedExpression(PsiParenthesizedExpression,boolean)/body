{
  final PsiExpression body=parenthesizedExpression.getExpression();
  if (body == null) {
    parenthesizedExpression.delete();
    return;
  }
  final PsiElement parent=parenthesizedExpression.getParent();
  if (!(parent instanceof PsiExpression) || parent instanceof PsiParenthesizedExpression) {
    final PsiExpression newExpression=(PsiExpression)parenthesizedExpression.replace(body);
    removeParentheses(newExpression,ignoreClarifyingParentheses);
    return;
  }
  final PsiExpression parentExpression=(PsiExpression)parent;
  final int parentPrecedence=getPrecedence(parentExpression);
  final int childPrecedence=getPrecedence(body);
  if (parentPrecedence < childPrecedence) {
    final PsiElement bodyParent=body.getParent();
    final PsiParenthesizedExpression newParenthesizedExpression=(PsiParenthesizedExpression)parenthesizedExpression.replace(bodyParent);
    final PsiExpression expression=newParenthesizedExpression.getExpression();
    if (expression != null) {
      removeParentheses(expression,ignoreClarifyingParentheses);
    }
  }
 else   if (parentPrecedence == childPrecedence) {
    if (parentExpression instanceof PsiPolyadicExpression && body instanceof PsiPolyadicExpression) {
      final PsiPolyadicExpression parentPolyadicExpression=(PsiPolyadicExpression)parentExpression;
      final IElementType parentOperator=parentPolyadicExpression.getOperationTokenType();
      final PsiPolyadicExpression bodyPolyadicExpression=(PsiPolyadicExpression)body;
      final IElementType bodyOperator=bodyPolyadicExpression.getOperationTokenType();
      final PsiType parentType=parentPolyadicExpression.getType();
      final PsiType bodyType=body.getType();
      if (parentType != null && parentType.equals(bodyType) && parentOperator.equals(bodyOperator)) {
        final PsiExpression[] parentOperands=parentPolyadicExpression.getOperands();
        if (PsiTreeUtil.isAncestor(parentOperands[0],body,true) || isCommutativeOperator(bodyOperator)) {
          final PsiExpression newExpression=(PsiExpression)parent.addAfter(body,parenthesizedExpression);
          parenthesizedExpression.delete();
          removeParentheses(newExpression,ignoreClarifyingParentheses);
          return;
        }
      }
      if (ignoreClarifyingParentheses) {
        if (parentOperator.equals(bodyOperator)) {
          removeParentheses(body,ignoreClarifyingParentheses);
        }
      }
 else {
        final PsiExpression newExpression=(PsiExpression)parenthesizedExpression.replace(body);
        removeParentheses(newExpression,ignoreClarifyingParentheses);
      }
    }
 else {
      final PsiExpression newExpression=(PsiExpression)parenthesizedExpression.replace(body);
      removeParentheses(newExpression,ignoreClarifyingParentheses);
    }
  }
 else {
    if (ignoreClarifyingParentheses && parent instanceof PsiPolyadicExpression && (body instanceof PsiPolyadicExpression || body instanceof PsiInstanceOfExpression)) {
      removeParentheses(body,ignoreClarifyingParentheses);
    }
 else {
      final PsiExpression newExpression=(PsiExpression)parenthesizedExpression.replace(body);
      removeParentheses(newExpression,ignoreClarifyingParentheses);
    }
  }
}
