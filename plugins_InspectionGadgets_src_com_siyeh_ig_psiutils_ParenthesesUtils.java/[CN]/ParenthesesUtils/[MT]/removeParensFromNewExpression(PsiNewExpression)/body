{
  final PsiExpression[] dimensions=newExp.getArrayDimensions();
  final String[] strippedDimensions=new String[dimensions.length];
  for (int i=0; i < dimensions.length; i++) {
    strippedDimensions[i]=removeParentheses(dimensions[i]);
  }
  final PsiExpression qualifier=newExp.getQualifier();
  final PsiExpression arrayInitializer=newExp.getArrayInitializer();
  String strippedInitializer=null;
  if (arrayInitializer != null) {
    strippedInitializer=removeParentheses(arrayInitializer);
  }
  final PsiExpressionList argumentList=newExp.getArgumentList();
  String[] strippedArgs=null;
  if (argumentList != null) {
    final PsiExpression[] args=argumentList.getExpressions();
    if (args != null) {
      strippedArgs=new String[args.length];
      for (int i=0; i < args.length; i++) {
        strippedArgs[i]=removeParentheses(args[i]);
      }
    }
  }
  final String expressionText=newExp.getText();
  if (qualifier != null) {
    return expressionText;
  }
  final PsiElement[] children=newExp.getChildren();
  for (  final PsiElement child : children) {
    if (child instanceof PsiAnonymousClass) {
      return expressionText;
    }
  }
  final int length=expressionText.length();
  final StringBuffer out=new StringBuffer(length);
  out.append(PsiKeyword.NEW + " ");
  final PsiType type=newExp.getType();
  final PsiType deepType=type.getDeepComponentType();
  final String text=deepType.getPresentableText();
  out.append(text);
  if (strippedArgs != null) {
    out.append('(');
    for (int i=0; i < strippedArgs.length; i++) {
      if (i != 0) {
        out.append(',');
      }
      out.append(strippedArgs[i]);
    }
    out.append(')');
  }
  if (strippedDimensions.length > 0) {
    for (    String strippedDimension : strippedDimensions) {
      out.append('[');
      out.append(strippedDimension);
      out.append(']');
    }
  }
 else {
    final int dimensionCount=type.getArrayDimensions();
    for (int i=0; i < dimensionCount; i++) {
      out.append("[]");
    }
  }
  if (strippedInitializer != null) {
    out.append(strippedInitializer);
  }
  return out.toString();
}
