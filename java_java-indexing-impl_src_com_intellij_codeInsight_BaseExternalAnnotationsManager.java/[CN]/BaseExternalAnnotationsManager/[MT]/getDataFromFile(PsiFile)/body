{
  Pair<MultiMap<String,AnnotationData>,Long> cached=annotationsFileToDataAndModificationStamp.get(file);
  if (cached != null && cached.getSecond() == file.getModificationStamp()) {
    return cached.getFirst();
  }
  Document document;
  try {
    VirtualFile virtualFile=file.getVirtualFile();
    if (virtualFile == null)     return EMPTY;
    document=JDOMUtil.loadDocument(escapeAttributes(StreamUtil.readText(virtualFile.getInputStream())));
  }
 catch (  IOException e) {
    LOG.error(e);
    return EMPTY;
  }
catch (  JDOMException e) {
    LOG.error(e);
    return EMPTY;
  }
  Element rootElement=document.getRootElement();
  if (rootElement == null)   return EMPTY;
  MultiMap<String,AnnotationData> data=new MultiMap<String,AnnotationData>();
  for (  Element element : (List<Element>)rootElement.getChildren()) {
    String ownerName=element.getAttributeValue("name");
    if (ownerName == null)     continue;
    for (    Element annotationElement : (List<Element>)element.getChildren()) {
      String annotationFQN=annotationElement.getAttributeValue("name");
      if (StringUtil.isEmpty(annotationFQN))       continue;
      StringBuilder buf=new StringBuilder();
      for (      Element annotationParameter : (List<Element>)annotationElement.getChildren()) {
        buf.append(",");
        String nameValue=annotationParameter.getAttributeValue("name");
        if (nameValue != null) {
          buf.append(nameValue).append("=");
        }
        buf.append(annotationParameter.getAttributeValue("val"));
      }
      String annotationText="@" + annotationFQN + (buf.length() > 0 ? "(" + StringUtil.trimStart(buf.toString(),",") + ")" : "");
      data.putValue(ownerName,new AnnotationData(annotationFQN,annotationText));
    }
  }
  Pair<MultiMap<String,AnnotationData>,Long> pair=Pair.create(data,file.getModificationStamp());
  pair=ConcurrencyUtil.cacheOrGet(annotationsFileToDataAndModificationStamp,file,pair);
  data=pair.first;
  return data;
}
