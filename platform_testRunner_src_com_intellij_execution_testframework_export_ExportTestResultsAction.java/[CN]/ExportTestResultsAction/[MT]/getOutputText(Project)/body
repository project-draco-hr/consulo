{
  ExportTestResultsConfiguration config=ExportTestResultsConfiguration.getInstance(project);
  ExportTestResultsConfiguration.ExportFormat exportFormat=config.getExportFormat();
  SAXTransformerFactory transformerFactory=(SAXTransformerFactory)SAXTransformerFactory.newInstance();
  TransformerHandler handler;
  if (exportFormat == ExportTestResultsConfiguration.ExportFormat.Xml) {
    handler=transformerFactory.newTransformerHandler();
    handler.getTransformer().setOutputProperty(OutputKeys.INDENT,"yes");
    handler.getTransformer().setOutputProperty("{http://xml.apache.org/xslt}indent-amount","4");
  }
 else {
    Source xslSource;
    if (config.getExportFormat() == ExportTestResultsConfiguration.ExportFormat.BundledTemplate) {
      URL bundledXsltUrl=getClass().getResource("junit-noframes.xsl");
      xslSource=new StreamSource(URLUtil.openStream(bundledXsltUrl));
    }
 else {
      File xslFile=new File(config.getUserTemplatePath());
      if (!xslFile.isFile()) {
        showBalloon(myRunConfiguration.getProject(),MessageType.ERROR,ExecutionBundle.message("export.test.results.custom.template.not.found",xslFile.getPath()),null);
        return null;
      }
      xslSource=new StreamSource(xslFile);
    }
    handler=transformerFactory.newTransformerHandler(xslSource);
    handler.getTransformer().setParameter("TITLE",ExecutionBundle.message("export.test.results.filename",myRunConfiguration.getName(),myRunConfiguration.getType().getDisplayName()));
  }
  StringWriter w=new StringWriter();
  handler.setResult(new StreamResult(w));
  TestResultsXmlFormatter.execute(myModel.getRoot(),myRunConfiguration,handler);
  return w.toString();
}
