{
  final Project project=CommonDataKeys.PROJECT.getData(e.getDataContext());
  LOG.assertTrue(project != null);
  final ExportTestResultsConfiguration config=ExportTestResultsConfiguration.getInstance(project);
  final String name=ExecutionBundle.message("export.test.results.filename",PathUtil.suggestFileName(myRunConfiguration.getName()));
  String filename=name + "." + config.getExportFormat().getDefaultExtension();
  boolean showDialog=true;
  while (showDialog) {
    final ExportTestResultsDialog d=new ExportTestResultsDialog(project,config,filename);
    if (!d.showAndGet()) {
      return;
    }
    filename=d.getFileName();
    showDialog=getOutputFile(config,project,filename).exists() && Messages.showOkCancelDialog(project,ExecutionBundle.message("export.test.results.file.exists.message",filename),ExecutionBundle.message("export.test.results.file.exists.title"),Messages.getQuestionIcon()) != Messages.OK;
  }
  final String filename_=filename;
  ProgressManager.getInstance().run(new Task.Backgroundable(project,ExecutionBundle.message("export.test.results.task.name"),false,new PerformInBackgroundOption(){
    @Override public boolean shouldStartInBackground(){
      return true;
    }
    @Override public void processSentToBackground(){
    }
  }
){
    @Override public void run(    @NotNull ProgressIndicator indicator){
      indicator.setIndeterminate(true);
      final File outputFile=getOutputFile(config,project,filename_);
      final String outputText;
      try {
        outputText=getOutputText(config);
        if (outputText == null) {
          return;
        }
      }
 catch (      IOException ex) {
        LOG.warn(ex);
        showBalloon(project,MessageType.ERROR,ExecutionBundle.message("export.test.results.failed",ex.getMessage()),null);
        return;
      }
catch (      TransformerException ex) {
        LOG.warn(ex);
        showBalloon(project,MessageType.ERROR,ExecutionBundle.message("export.test.results.failed",ex.getMessage()),null);
        return;
      }
catch (      SAXException ex) {
        LOG.warn(ex);
        showBalloon(project,MessageType.ERROR,ExecutionBundle.message("export.test.results.failed",ex.getMessage()),null);
        return;
      }
catch (      RuntimeException ex) {
        ExportTestResultsConfiguration c=new ExportTestResultsConfiguration();
        c.setExportFormat(ExportTestResultsConfiguration.ExportFormat.Xml);
        c.setOpenResults(false);
        try {
          String xml=getOutputText(c);
          LOG.error(LogMessageEx.createEvent("Failed to export test results",ExceptionUtil.getThrowableText(ex),null,null,new Attachment("dump.xml",xml)));
        }
 catch (        Throwable ignored) {
          LOG.error("Failed to export test results",ex);
        }
        return;
      }
      final Ref<VirtualFile> result=new Ref<VirtualFile>();
      final Ref<String> error=new Ref<String>();
      ApplicationManager.getApplication().invokeAndWait(new Runnable(){
        @Override public void run(){
          result.set(ApplicationManager.getApplication().runWriteAction(new Computable<VirtualFile>(){
            @Override public VirtualFile compute(){
              outputFile.getParentFile().mkdirs();
              final VirtualFile parent=LocalFileSystem.getInstance().refreshAndFindFileByIoFile(outputFile.getParentFile());
              if (parent == null || !parent.isValid()) {
                error.set(ExecutionBundle.message("failed.to.create.output.file",outputFile.getPath()));
                return null;
              }
              try {
                VirtualFile result=parent.findChild(outputFile.getName());
                if (result == null) {
                  result=parent.createChildData(this,outputFile.getName());
                }
                VfsUtil.saveText(result,outputText);
                return result;
              }
 catch (              IOException e) {
                LOG.warn(e);
                error.set(e.getMessage());
                return null;
              }
            }
          }
));
        }
      }
,ModalityState.defaultModalityState());
      if (!result.isNull()) {
        if (config.isOpenResults()) {
          openEditorOrBrowser(result.get(),project,config.getExportFormat() == ExportTestResultsConfiguration.ExportFormat.Xml);
        }
 else {
          HyperlinkListener listener=new HyperlinkListener(){
            @Override public void hyperlinkUpdate(            HyperlinkEvent e){
              if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                openEditorOrBrowser(result.get(),project,config.getExportFormat() == ExportTestResultsConfiguration.ExportFormat.Xml);
              }
            }
          }
;
          showBalloon(project,MessageType.INFO,ExecutionBundle.message("export.test.results.succeeded",outputFile.getName()),listener);
        }
      }
 else {
        showBalloon(project,MessageType.ERROR,ExecutionBundle.message("export.test.results.failed",error.get()),null);
      }
    }
  }
);
}
