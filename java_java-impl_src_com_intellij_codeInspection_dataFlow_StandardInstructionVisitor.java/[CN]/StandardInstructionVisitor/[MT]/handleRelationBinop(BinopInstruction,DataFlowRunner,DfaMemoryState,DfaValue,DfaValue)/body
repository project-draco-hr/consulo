{
  DfaValueFactory factory=runner.getFactory();
  final Instruction next=runner.getInstruction(instruction.getIndex() + 1);
  boolean negated=memState.canBeNaN(dfaLeft) || memState.canBeNaN(dfaRight);
  DfaRelationValue dfaRelation=factory.getRelationFactory().createRelation(dfaLeft,dfaRight,instruction.getOperationSign(),negated);
  if (dfaRelation == null) {
    return null;
  }
  if (isViaMethods(dfaLeft) || isViaMethods(dfaRight)) {
    myNotToReportReachability.add(instruction);
  }
  myCanBeNullInInstanceof.add(instruction);
  ArrayList<DfaInstructionState> states=new ArrayList<DfaInstructionState>();
  final DfaMemoryState trueCopy=memState.createCopy();
  if (trueCopy.applyCondition(dfaRelation)) {
    if (!dfaRelation.isNegated()) {
      checkOneOperandNotNull(dfaRight,dfaLeft,factory,trueCopy);
    }
    trueCopy.push(factory.getConstFactory().getTrue());
    instruction.setTrueReachable();
    states.add(new DfaInstructionState(next,trueCopy));
  }
  DfaMemoryState falseCopy=memState;
  if (falseCopy.applyCondition(dfaRelation.createNegated())) {
    if (dfaRelation.isNegated()) {
      checkOneOperandNotNull(dfaRight,dfaLeft,factory,falseCopy);
    }
    falseCopy.push(factory.getConstFactory().getFalse());
    instruction.setFalseReachable();
    states.add(new DfaInstructionState(next,falseCopy));
    if (instruction instanceof InstanceofInstruction && !falseCopy.isNull(dfaLeft)) {
      myUsefulInstanceofs.add((InstanceofInstruction)instruction);
    }
  }
  return states.toArray(new DfaInstructionState[states.size()]);
}
