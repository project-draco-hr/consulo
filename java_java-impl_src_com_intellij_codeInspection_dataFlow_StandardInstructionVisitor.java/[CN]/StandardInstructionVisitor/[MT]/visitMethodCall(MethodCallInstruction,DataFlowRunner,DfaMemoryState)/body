{
  final PsiExpression[] args=instruction.getArgs();
  Map<PsiExpression,Boolean> map=myParametersNullability.get(instruction);
  final DfaNotNullValue.Factory factory=runner.getFactory().getNotNullFactory();
  for (int i=0; i < args.length; i++) {
    final DfaValue arg=memState.pop();
    PsiExpression expr=args[(args.length - i - 1)];
    if (map.get(expr) == Boolean.FALSE) {
      if (!memState.applyNotNull(arg)) {
        onPassingNullParameter(runner,expr);
        if (arg instanceof DfaVariableValue) {
          memState.setVarValue((DfaVariableValue)arg,factory.create(((DfaVariableValue)arg).getVariableType()));
        }
      }
    }
 else     if (map.containsKey(expr) && map.get(expr) == null && !memState.checkNotNullable(arg)) {
      onPassingNullParameterToNonAnnotated(runner,expr);
    }
  }
  @NotNull final DfaValue qualifier=memState.pop();
  try {
    if (!memState.applyNotNull(qualifier)) {
      if (instruction.getMethodType() == MethodCallInstruction.MethodType.UNBOXING) {
        onUnboxingNullable(instruction,runner);
      }
 else {
        onInstructionProducesNPE(instruction,runner);
      }
      if (qualifier instanceof DfaVariableValue) {
        memState.setVarValue((DfaVariableValue)qualifier,factory.create(((DfaVariableValue)qualifier).getVariableType()));
      }
    }
    return nextInstruction(instruction,runner,memState);
  }
  finally {
    memState.push(getMethodResultValue(instruction,qualifier,runner.getFactory()));
    if (instruction.shouldFlushFields()) {
      memState.flushFields(runner);
    }
  }
}
