{
  final PsiExpression[] args=instruction.getArgs();
  final boolean[] parametersNotNull=myParametersNotNull.get(instruction);
  final DfaNotNullValue.Factory factory=runner.getFactory().getNotNullFactory();
  for (int i=0; i < args.length; i++) {
    final DfaValue arg=memState.pop();
    final int revIdx=args.length - i - 1;
    if (args.length <= parametersNotNull.length && revIdx < parametersNotNull.length && parametersNotNull[revIdx] && !memState.applyNotNull(arg)) {
      onPassingNullParameter(runner,args[revIdx]);
      if (arg instanceof DfaVariableValue) {
        memState.setVarValue((DfaVariableValue)arg,factory.create(((DfaVariableValue)arg).getVariableType()));
      }
    }
  }
  @NotNull final DfaValue qualifier=memState.pop();
  try {
    if (!memState.applyNotNull(qualifier)) {
      if (instruction.getMethodType() == MethodCallInstruction.MethodType.UNBOXING) {
        onUnboxingNullable(instruction,runner);
      }
 else {
        onInstructionProducesNPE(instruction,runner);
      }
      if (qualifier instanceof DfaVariableValue) {
        memState.setVarValue((DfaVariableValue)qualifier,factory.create(((DfaVariableValue)qualifier).getVariableType()));
      }
    }
    return nextInstruction(instruction,runner,memState);
  }
  finally {
    memState.push(getMethodResultValue(instruction,qualifier,runner.getFactory()));
    if (instruction.shouldFlushFields()) {
      memState.flushFields(runner);
    }
  }
}
