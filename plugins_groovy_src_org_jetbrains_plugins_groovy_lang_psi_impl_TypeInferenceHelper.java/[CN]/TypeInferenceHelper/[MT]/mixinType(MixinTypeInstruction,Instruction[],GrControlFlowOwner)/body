{
  return RecursionManager.doPreventingRecursion(instruction,false,new NullableComputable<PsiType>(){
    @Override @Nullable public PsiType compute(){
      String varName=instruction.getVariableName();
      if (varName == null)       return null;
      ReadWriteVariableInstruction originalInstr=instruction.getInstructionToMixin(flow);
      LOG.assertTrue(originalInstr != null,scope.getContainingFile().getName() + ":" + scope.getText());
      final PsiType original=getInferredType(varName,originalInstr,flow,scope);
      final PsiType mixin=instruction.inferMixinType();
      if (mixin == null)       return original;
      if (original == null)       return mixin;
      if (TypesUtil.isAssignableByMethodCallConversion(mixin,original,scope))       return original;
      return PsiIntersectionType.createIntersection(mixin,original);
    }
  }
);
}
