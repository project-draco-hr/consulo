{
  return CachedValuesManager.getManager(scope.getProject()).getCachedValue(scope,new CachedValueProvider<Pair<ReachingDefinitionsDfaInstance,List<TIntObjectHashMap<TIntHashSet>>>>(){
    @Override public Result<Pair<ReachingDefinitionsDfaInstance,List<TIntObjectHashMap<TIntHashSet>>>> compute(){
      final Instruction[] flow=scope.getControlFlow();
      final ReachingDefinitionsDfaInstance dfaInstance=new ReachingDefinitionsDfaInstance(flow){
        @Override public void fun(        TIntObjectHashMap<TIntHashSet> m,        Instruction instruction){
          if (instruction instanceof InstanceOfInstruction) {
            final InstanceOfInstruction instanceOfInstruction=(InstanceOfInstruction)instruction;
            final PsiElement element=instanceOfInstruction.getElement();
            if (element instanceof GrInstanceOfExpression) {
              final GrExpression operand=((GrInstanceOfExpression)element).getOperand();
              final GrTypeElement typeElement=((GrInstanceOfExpression)element).getTypeElement();
              if (typeElement != null) {
                final int varIndex=getVarIndex(operand.getText());
                if (varIndex >= 0) {
                  registerDef(m,instruction,varIndex);
                }
              }
            }
          }
 else           if (instruction instanceof ArgumentInstruction) {
            final int varIndex=getVarIndex(((ArgumentInstruction)instruction).getVariableName());
            registerDef(m,instruction,varIndex);
          }
 else {
            super.fun(m,instruction);
          }
        }
      }
;
      final ReachingDefinitionsSemilattice lattice=new ReachingDefinitionsSemilattice();
      final DFAEngine<TIntObjectHashMap<TIntHashSet>> engine=new DFAEngine<TIntObjectHashMap<TIntHashSet>>(flow,dfaInstance,lattice);
      final List<TIntObjectHashMap<TIntHashSet>> dfaResult=engine.performDFAWithTimeout();
      return Result.create(Pair.create(dfaInstance,dfaResult),PsiModificationTracker.MODIFICATION_COUNT);
    }
  }
);
}
