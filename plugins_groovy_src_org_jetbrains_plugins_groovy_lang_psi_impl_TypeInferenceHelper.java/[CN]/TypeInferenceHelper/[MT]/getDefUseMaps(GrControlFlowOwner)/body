{
  return CachedValuesManager.getManager(scope.getProject()).getCachedValue(scope,new CachedValueProvider<Pair<ReachingDefinitionsDfaInstance,List<DefinitionMap>>>(){
    @Override public Result<Pair<ReachingDefinitionsDfaInstance,List<DefinitionMap>>> compute(){
      final Instruction[] flow=scope.getControlFlow();
      final ReachingDefinitionsDfaInstance dfaInstance=new ReachingDefinitionsDfaInstance(flow){
        @Override public void fun(        DefinitionMap m,        Instruction instruction){
          if (instruction instanceof InstanceOfInstruction) {
            final InstanceOfInstruction instanceOfInstruction=(InstanceOfInstruction)instruction;
            ReadWriteVariableInstruction i=instanceOfInstruction.getInstructionToMixin(flow);
            if (i != null) {
              int varIndex=getVarIndex(i.getVariableName());
              if (varIndex >= 0) {
                m.registerDef(instruction,varIndex);
              }
            }
          }
 else           if (instruction instanceof ArgumentInstruction) {
            final int varIndex=getVarIndex(((ArgumentInstruction)instruction).getVariableName());
            m.registerDef(instruction,varIndex);
          }
 else {
            super.fun(m,instruction);
          }
        }
      }
;
      final ReachingDefinitionsSemilattice lattice=new ReachingDefinitionsSemilattice();
      final DFAEngine<DefinitionMap> engine=new DFAEngine<DefinitionMap>(flow,dfaInstance,lattice);
      final List<DefinitionMap> dfaResult=engine.performDFAWithTimeout();
      return Result.create(Pair.create(dfaInstance,dfaResult),PsiModificationTracker.MODIFICATION_COUNT);
    }
  }
);
}
