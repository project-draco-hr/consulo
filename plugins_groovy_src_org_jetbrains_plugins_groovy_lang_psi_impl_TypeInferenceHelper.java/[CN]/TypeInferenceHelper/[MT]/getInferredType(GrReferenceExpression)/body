{
  GroovyPsiElement scope=PsiTreeUtil.getParentOfType(refExpr,GrMethod.class,GrClosableBlock.class,GrClassInitializer.class,GroovyFileBase.class);
  if (scope instanceof GrMethod) {
    scope=((GrMethod)scope).getBlock();
  }
 else   if (scope instanceof GrClassInitializer) {
    scope=((GrClassInitializer)scope).getBlock();
  }
  if (scope != null) {
    Set<GroovyPsiElement> scopes=myScopesBeingInferred.get();
    if (scopes == null) {
      scopes=new HashSet<GroovyPsiElement>();
      myScopesBeingInferred.set(scopes);
    }
    if (scopes.contains(scope)) {
      return getTypeBinding(refExpr);
    }
    try {
      scopes.add(scope);
      Map<GrReferenceExpression,PsiType> map=myCalculatedTypeInferences.get(scope);
      if (map == null) {
        map=inferTypes((GrControlFlowOwner)scope);
        myCalculatedTypeInferences.put(scope,map);
      }
      return map.get(refExpr);
    }
  finally {
      scopes.remove(scope);
    }
  }
  return null;
}
