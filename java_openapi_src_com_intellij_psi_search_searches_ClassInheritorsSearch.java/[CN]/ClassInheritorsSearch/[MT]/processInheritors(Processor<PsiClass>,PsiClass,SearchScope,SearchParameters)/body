{
  if (baseClass instanceof PsiAnonymousClass || isFinal(baseClass))   return true;
  final String qname=ApplicationManager.getApplication().runReadAction(new Computable<String>(){
    public String compute(){
      return baseClass.getQualifiedName();
    }
  }
);
  if (CommonClassNames.JAVA_LANG_OBJECT.equals(qname)) {
    return AllClassesSearch.search(searchScope,baseClass.getProject(),parameters.getNameCondition()).forEach(new Processor<PsiClass>(){
      public boolean process(      final PsiClass aClass){
        ProgressManager.checkCanceled();
        final String qname1=ApplicationManager.getApplication().runReadAction(new Computable<String>(){
          @Nullable public String compute(){
            return aClass.getQualifiedName();
          }
        }
);
        return CommonClassNames.JAVA_LANG_OBJECT.equals(qname1) || consumer.process(aClass);
      }
    }
);
  }
  final Ref<PsiClass> currentBase=Ref.create(null);
  final Stack<Pair<Reference<PsiClass>,String>> stack=new Stack<Pair<Reference<PsiClass>,String>>();
  final Set<String> processedFqns=new THashSet<String>();
  final Set<PsiClass> processed=new THashSet<PsiClass>();
  final Processor<PsiClass> processor=new Processor<PsiClass>(){
    public boolean process(    final PsiClass candidate){
      ProgressManager.checkCanceled();
      final Ref<Boolean> result=new Ref<Boolean>();
      final String[] fqn=new String[1];
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        public void run(){
          fqn[0]=candidate.getQualifiedName();
          if (parameters.isCheckInheritance() || parameters.isCheckDeep() && !(candidate instanceof PsiAnonymousClass)) {
            if (!candidate.isInheritor(currentBase.get(),false)) {
              result.set(true);
              return;
            }
          }
          if (PsiSearchScopeUtil.isInScope(searchScope,candidate)) {
            if (candidate instanceof PsiAnonymousClass) {
              result.set(consumer.process(candidate));
            }
 else {
              final String name=candidate.getName();
              if (name != null && parameters.getNameCondition().value(name) && !consumer.process(candidate))               result.set(false);
            }
          }
        }
      }
);
      if (!result.isNull())       return result.get().booleanValue();
      if (parameters.isCheckDeep() && !(candidate instanceof PsiAnonymousClass) && !isFinal(candidate)) {
        Reference<PsiClass> ref=fqn[0] == null ? createHardReference(candidate) : new SoftReference<PsiClass>(candidate);
        stack.push(Pair.create(ref,fqn[0]));
      }
      return true;
    }
  }
;
  stack.push(Pair.create(createHardReference(baseClass),qname));
  final GlobalSearchScope projectScope=GlobalSearchScope.allScope(baseClass.getProject());
  final JavaPsiFacade facade=JavaPsiFacade.getInstance(projectScope.getProject());
  while (!stack.isEmpty()) {
    ProgressManager.checkCanceled();
    Pair<Reference<PsiClass>,String> pair=stack.pop();
    PsiClass psiClass=pair.getFirst().get();
    final String fqn=pair.getSecond();
    if (psiClass == null) {
      psiClass=ApplicationManager.getApplication().runReadAction(new Computable<PsiClass>(){
        public PsiClass compute(){
          return facade.findClass(fqn,projectScope);
        }
      }
);
      if (psiClass == null)       continue;
    }
    if (fqn == null) {
      if (!processed.add(psiClass))       continue;
    }
 else {
      if (!processedFqns.add(fqn))       continue;
    }
    currentBase.set(psiClass);
    if (!DirectClassInheritorsSearch.search(psiClass,projectScope,parameters.isIncludeAnonymous()).forEach(processor))     return false;
  }
  return true;
}
