{
  if (baseClass instanceof PsiAnonymousClass)   return true;
  if (isFinal(baseClass))   return true;
  final String qname=ApplicationManager.getApplication().runReadAction(new Computable<String>(){
    public String compute(){
      return baseClass.getQualifiedName();
    }
  }
);
  if (CommonClassNames.JAVA_LANG_OBJECT.equals(qname)) {
    return AllClassesSearch.search(searchScope,baseClass.getProject(),parameters.getNameCondition()).forEach(new Processor<PsiClass>(){
      public boolean process(      final PsiClass aClass){
        ProgressManager.checkCanceled();
        final String qname1=ApplicationManager.getApplication().runReadAction(new Computable<String>(){
          @Nullable public String compute(){
            return aClass.getQualifiedName();
          }
        }
);
        if (CommonClassNames.JAVA_LANG_OBJECT.equals(qname1)) {
          return true;
        }
        return consumer.process(aClass);
      }
    }
);
  }
  final Ref<PsiClass> currentBase=Ref.create(null);
  final Stack<PsiClass> stack=new Stack<PsiClass>();
  final Set<PsiClass> processed=new HashSet<PsiClass>();
  final Processor<PsiClass> processor=new Processor<PsiClass>(){
    public boolean process(    final PsiClass candidate){
      ProgressManager.checkCanceled();
      final Ref<Boolean> result=new Ref<Boolean>();
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        public void run(){
          if (parameters.isCheckInheritance() || parameters.isCheckDeep() && !(candidate instanceof PsiAnonymousClass)) {
            if (!candidate.isInheritor(currentBase.get(),false)) {
              result.set(true);
              return;
            }
          }
          if (PsiSearchScopeUtil.isInScope(searchScope,candidate)) {
            if (candidate instanceof PsiAnonymousClass) {
              result.set(consumer.process(candidate));
            }
 else {
              final String name=candidate.getName();
              if (name != null && parameters.getNameCondition().value(name) && !consumer.process(candidate))               result.set(false);
            }
          }
        }
      }
);
      if (!result.isNull())       return result.get().booleanValue();
      if (parameters.isCheckDeep() && !(candidate instanceof PsiAnonymousClass) && !isFinal(candidate)) {
        stack.push(candidate);
      }
      return true;
    }
  }
;
  stack.push(baseClass);
  final GlobalSearchScope scope=GlobalSearchScope.allScope(baseClass.getProject());
  while (!stack.isEmpty()) {
    ProgressManager.checkCanceled();
    final PsiClass psiClass=stack.pop();
    if (!processed.add(psiClass))     continue;
    currentBase.set(psiClass);
    if (!DirectClassInheritorsSearch.search(psiClass,scope,parameters.isIncludeAnonymous()).forEach(processor))     return false;
  }
  return true;
}
