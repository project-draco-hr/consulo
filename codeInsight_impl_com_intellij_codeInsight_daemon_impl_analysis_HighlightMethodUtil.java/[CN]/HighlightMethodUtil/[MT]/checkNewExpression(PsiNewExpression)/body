{
  PsiType type=expression.getType();
  if (!(type instanceof PsiClassType))   return null;
  PsiClassType.ClassResolveResult typeResult=((PsiClassType)type).resolveGenerics();
  PsiClass aClass=typeResult.getElement();
  if (aClass == null)   return null;
  if (aClass instanceof PsiAnonymousClass) {
    type=((PsiAnonymousClass)aClass).getBaseClassType();
    typeResult=((PsiClassType)type).resolveGenerics();
    aClass=typeResult.getElement();
    if (aClass == null)     return null;
  }
  PsiJavaCodeReferenceElement classReference=expression.getClassReference();
  if (classReference == null) {
    PsiAnonymousClass anonymousClass=expression.getAnonymousClass();
    if (anonymousClass != null)     classReference=anonymousClass.getBaseClassReference();
  }
  return checkConstructorCall(typeResult,expression,type,classReference);
}
