{
  HighlightInfo errorResult=null;
  PsiClass aClass=method.getContainingClass();
  if (method.hasModifierProperty(PsiModifier.ABSTRACT) && aClass != null && !aClass.hasModifierProperty(PsiModifier.ABSTRACT) && !aClass.isEnum() && !PsiUtil.hasErrorElementChild(method)) {
    errorResult=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,elementToHighlight,JavaErrorMessages.message("abstract.method.in.non.abstract.class"));
    if (method.getBody() != null) {
      IntentionAction fix=QUICK_FIX_FACTORY.createModifierListFix(method,PsiModifier.ABSTRACT,false,false);
      QuickFixAction.registerQuickFixAction(errorResult,fix);
    }
    QuickFixAction.registerQuickFixAction(errorResult,new AddMethodBodyFix(method));
    IntentionAction fix=QUICK_FIX_FACTORY.createModifierListFix(aClass,PsiModifier.ABSTRACT,true,false);
    QuickFixAction.registerQuickFixAction(errorResult,fix);
  }
  return errorResult;
}
