{
  PsiExpressionList list=methodCall.getArgumentList();
  PsiReferenceExpression referenceToMethod=methodCall.getMethodExpression();
  JavaResolveResult resolveResult=referenceToMethod.advancedResolve(true);
  PsiElement element=resolveResult.getElement();
  boolean isDummy=false;
  boolean isThisOrSuper=referenceToMethod.getReferenceNameElement() instanceof PsiKeyword;
  if (isThisOrSuper) {
    if (list.getExpressions().length == 0) {
      CandidateInfo[] candidates=resolveHelper.getReferencedMethodCandidates(methodCall,true);
      if (candidates.length == 1 && !candidates[0].getElement().isPhysical()) {
        isDummy=true;
      }
    }
  }
  if (isDummy)   return null;
  HighlightInfo highlightInfo;
  if (element instanceof PsiMethod && resolveResult.isValidResult()) {
    TextRange fixRange=getFixRange(methodCall);
    highlightInfo=HighlightUtil.checkUnhandledExceptions(methodCall,fixRange);
    if (highlightInfo == null) {
      highlightInfo=GenericsHighlightUtil.checkUncheckedCall(resolveResult,methodCall);
    }
    if (highlightInfo == null) {
      highlightInfo=GenericsHighlightUtil.checkGenericCallWithRawArguments(resolveResult,methodCall);
    }
  }
 else {
    PsiMethod resolvedMethod=null;
    MethodCandidateInfo info=null;
    if (resolveResult instanceof MethodCandidateInfo) {
      info=(MethodCandidateInfo)resolveResult;
      resolvedMethod=info.getElement();
    }
    if (!resolveResult.isAccessible() || !resolveResult.isStaticsScopeCorrect()) {
      highlightInfo=checkAmbiguousMethodCall(referenceToMethod,list,element,resolveResult,methodCall,resolveHelper);
    }
 else     if (info != null && !info.isApplicable()) {
      if (info.isTypeArgumentsApplicable()) {
        String methodName=HighlightMessageUtil.getSymbolName(element,resolveResult.getSubstitutor());
        PsiElement parent=element.getParent();
        String containerName=parent == null ? "" : HighlightMessageUtil.getSymbolName(parent,resolveResult.getSubstitutor());
        String argTypes=buildArgTypesList(list);
        String description=JavaErrorMessages.message("wrong.method.arguments",methodName,containerName,argTypes);
        String toolTip=parent instanceof PsiClass ? createMismatchedArgumentsHtmlTooltip(info,list) : description;
        highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,list,description,toolTip);
        registerMethodCallIntentions(highlightInfo,methodCall,list,resolveHelper);
        highlightInfo.navigationShift=+1;
      }
 else {
        PsiReferenceExpression methodExpression=methodCall.getMethodExpression();
        PsiReferenceParameterList typeArgumentList=methodCall.getTypeArgumentList();
        if (typeArgumentList.getTypeArguments().length == 0 && resolvedMethod.getTypeParameters().length > 0) {
          highlightInfo=GenericsHighlightUtil.checkInferredTypeArguments(resolvedMethod,methodCall,resolveResult.getSubstitutor());
        }
 else {
          highlightInfo=GenericsHighlightUtil.checkParameterizedReferenceTypeArguments(element,methodExpression,resolveResult.getSubstitutor());
        }
      }
    }
 else {
      highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,methodCall,JavaErrorMessages.message("method.call.expected"));
      if (element instanceof PsiClass) {
        QuickFixAction.registerQuickFixAction(highlightInfo,new InsertNewFix(methodCall,(PsiClass)element));
      }
 else {
        TextRange range=getFixRange(methodCall);
        QuickFixAction.registerQuickFixAction(highlightInfo,range,new CreateMethodFromUsageAction(methodCall),null,null);
        QuickFixAction.registerQuickFixAction(highlightInfo,range,new CreatePropertyFromUsageAction(methodCall),null,null);
      }
    }
  }
  if (highlightInfo == null) {
    highlightInfo=GenericsHighlightUtil.checkParameterizedReferenceTypeArguments(element,referenceToMethod,resolveResult.getSubstitutor());
  }
  return highlightInfo;
}
