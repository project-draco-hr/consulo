{
  PsiMethod method=methodSignature.getMethod();
  if (!settings.getInspectionProfile(method).isToolEnabled(HighlightDisplayKey.DEPRECATED_SYMBOL))   return null;
  if (!InspectionManagerEx.isToCheckMember(method,HighlightDisplayKey.DEPRECATED_SYMBOL.getID()))   return null;
  PsiElement methodName=method.getNameIdentifier();
  for (  MethodSignatureBackedByPsiMethod superMethodSignature : superMethodSignatures) {
    PsiMethod superMethod=superMethodSignature.getMethod();
    PsiClass aClass=superMethod.getContainingClass();
    if (aClass == null)     continue;
    if (!aClass.isDeprecated() && superMethod.hasModifierProperty(PsiModifier.ABSTRACT))     continue;
    if (superMethod.isDeprecated()) {
      String description=JavaErrorMessages.message("overrides.deprecated.method",HighlightMessageUtil.getSymbolName(aClass,PsiSubstitutor.EMPTY));
      HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.DEPRECATED,methodName,description);
      List<IntentionAction> options=IntentionManager.getInstance(method.getProject()).getStandardIntentionOptions(HighlightDisplayKey.DEPRECATED_SYMBOL,method);
      QuickFixAction.registerQuickFixAction(highlightInfo,new EmptyIntentionAction(HighlightDisplayKey.getDisplayNameByKey(HighlightDisplayKey.DEPRECATED_SYMBOL),options),options);
      return highlightInfo;
    }
  }
  return null;
}
