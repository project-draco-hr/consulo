{
  if (superMethod == null)   return null;
  PsiManager manager=superMethod.getManager();
  PsiModifierList superModifierList=superMethod.getModifierList();
  PsiModifierList modifierList=method.getModifierList();
  if (superModifierList.hasModifierProperty(PsiModifier.PRIVATE))   return null;
  if (superModifierList.hasModifierProperty(PsiModifier.PACKAGE_LOCAL) && !manager.arePackagesTheSame(aClass,superClass)) {
    return null;
  }
  boolean isMethodStatic=modifierList.hasModifierProperty(PsiModifier.STATIC);
  boolean isSuperMethodStatic=superModifierList.hasModifierProperty(PsiModifier.STATIC);
  if (isMethodStatic != isSuperMethodStatic) {
    TextRange textRange=HighlightNamesUtil.getMethodDeclarationTextRange(method);
    @NonNls final String messageKey=isMethodStatic ? "static.method.cannot.override.instance.method" : "instance.method.cannot.override.static.method";
    String message=JavaErrorMessages.message(messageKey,HighlightUtil.formatMethod(method),HighlightUtil.formatClass(aClass),HighlightUtil.formatMethod(superMethod),HighlightUtil.formatClass(superClass));
    HighlightInfo info=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,textRange,message);
    if (!isSuperMethodStatic || HighlightUtil.getIncompatibleModifier(PsiModifier.STATIC,modifierList) == null) {
      IntentionAction fix=QUICK_FIX_FACTORY.createModifierListFix(method.getModifierList(),PsiModifier.STATIC,isSuperMethodStatic,false);
      QuickFixAction.registerQuickFixAction(info,fix);
    }
    if (manager.isInProject(superMethod) && (!isMethodStatic || HighlightUtil.getIncompatibleModifier(PsiModifier.STATIC,superModifierList) == null)) {
      IntentionAction fix=QUICK_FIX_FACTORY.createModifierListFix(superMethod.getModifierList(),PsiModifier.STATIC,isMethodStatic,true);
      QuickFixAction.registerQuickFixAction(info,fix);
    }
    return info;
  }
  if (isMethodStatic && isSuperMethodStatic) {
    int accessLevel=PsiUtil.getAccessLevel(modifierList);
    String accessModifier=PsiUtil.getAccessModifier(accessLevel);
    HighlightInfo info=isWeaker(method,modifierList,accessModifier,accessLevel,superMethod,true);
    if (info != null)     return info;
  }
  return null;
}
