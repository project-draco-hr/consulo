{
  if (superReturnType == null)   return null;
  PsiType substitutedSuperReturnType;
  final boolean isJdk15=PsiUtil.isLanguageLevel5OrHigher(method);
  if (isJdk15 && !superMethodSignature.isRaw() && superMethodSignature.equals(methodSignature)) {
    PsiSubstitutor unifyingSubstitutor=MethodSignatureUtil.getSuperMethodSignatureSubstitutor(methodSignature,superMethodSignature);
    substitutedSuperReturnType=unifyingSubstitutor == null ? superReturnType : unifyingSubstitutor.substitute(superMethodSignature.getSubstitutor().substitute(superReturnType));
  }
 else {
    substitutedSuperReturnType=TypeConversionUtil.erasure(superReturnType);
  }
  if (returnType.equals(substitutedSuperReturnType))   return null;
  if (!(returnType instanceof PsiPrimitiveType) && substitutedSuperReturnType.getDeepComponentType() instanceof PsiClassType) {
    if (isJdk15 && TypeConversionUtil.isAssignable(substitutedSuperReturnType,returnType)) {
      return null;
    }
  }
  return createIncompatibleReturnTypeMessage(methodToHighlight,method,superMethod,includeRealPositionInfo,substitutedSuperReturnType,returnType,detailMessage);
}
