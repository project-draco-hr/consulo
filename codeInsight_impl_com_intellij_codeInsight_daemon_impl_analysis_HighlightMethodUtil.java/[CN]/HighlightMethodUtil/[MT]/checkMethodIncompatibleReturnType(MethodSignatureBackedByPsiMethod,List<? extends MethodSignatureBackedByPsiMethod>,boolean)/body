{
  PsiMethod method=methodSignature.getMethod();
  PsiType returnType=methodSignature.getSubstitutor().substitute(method.getReturnType());
  PsiClass aClass=method.getContainingClass();
  if (aClass == null)   return null;
  for (  MethodSignatureBackedByPsiMethod superMethodSignature : superMethodSignatures) {
    if (!MethodSignatureUtil.isSubsignature(superMethodSignature,methodSignature))     continue;
    PsiMethod superMethod=superMethodSignature.getMethod();
    PsiType superReturnType=superMethodSignature.getSubstitutor().substitute(superMethod.getReturnType());
    if (returnType == null || superReturnType == null || method == superMethod)     continue;
    PsiClass superClass=superMethod.getContainingClass();
    if (superClass == null)     continue;
    if (!Comparing.strEqual(method.getName(),superMethod.getName()) || method.getParameterList().getParameters().length != superMethod.getParameterList().getParameters().length) {
      continue;
    }
    HighlightInfo highlightInfo=checkSuperMethodSignature(superMethod,superMethodSignature,superReturnType,method,methodSignature,returnType,includeRealPositionInfo,JavaErrorMessages.message("incompatible.return.type"),method);
    if (highlightInfo != null)     return highlightInfo;
  }
  return null;
}
