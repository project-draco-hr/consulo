{
  PsiExpressionList list=constructorCall.getArgumentList();
  if (list == null)   return null;
  PsiClass aClass=typeResolveResult.getElement();
  if (aClass == null)   return null;
  final PsiResolveHelper resolveHelper=constructorCall.getManager().getResolveHelper();
  PsiClass accessObjectClass=null;
  if (constructorCall instanceof PsiNewExpression) {
    PsiExpression qualifier=((PsiNewExpression)constructorCall).getQualifier();
    if (qualifier != null) {
      accessObjectClass=(PsiClass)PsiUtil.getAccessObjectClass(qualifier).getElement();
    }
  }
  if (classReference != null && !resolveHelper.isAccessible(aClass,constructorCall,accessObjectClass)) {
    String description=HighlightUtil.buildProblemWithAccessDescription(classReference,typeResolveResult);
    HighlightInfo info=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,classReference.getReferenceNameElement(),description);
    HighlightUtil.registerAccessQuickFixAction(aClass,classReference,info,null);
    return info;
  }
  PsiMethod[] constructors=aClass.getConstructors();
  if (constructors.length == 0) {
    if (list.getExpressions().length != 0) {
      String constructorName=aClass.getName();
      String argTypes=buildArgTypesList(list);
      String description=JavaErrorMessages.message("wrong.constructor.arguments",constructorName + "()",argTypes);
      String tooltip=createMismatchedArgumentsHtmlTooltip(list,PsiParameter.EMPTY_ARRAY,constructorName,PsiSubstitutor.EMPTY,aClass);
      HighlightInfo info=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,list,description,tooltip);
      QuickFixAction.registerQuickFixAction(info,constructorCall.getTextRange(),new CreateConstructorFromCallFix(constructorCall),null,null);
      if (classReference != null) {
        CastConstructorParametersFix.registerCastActions(classReference,constructorCall,info,getFixRange(list));
      }
      info.navigationShift=+1;
      return info;
    }
  }
 else {
    PsiElement place=list;
    if (constructorCall instanceof PsiNewExpression) {
      final PsiAnonymousClass anonymousClass=((PsiNewExpression)constructorCall).getAnonymousClass();
      if (anonymousClass != null)       place=anonymousClass;
    }
    JavaResolveResult[] results=resolveHelper.multiResolveConstructor((PsiClassType)type,list,place);
    MethodCandidateInfo result=null;
    if (results.length == 1)     result=(MethodCandidateInfo)results[0];
    PsiMethod constructor=result == null ? null : result.getElement();
    if (constructor == null) {
      String name=aClass.getName();
      name+=buildArgTypesList(list);
      String description=JavaErrorMessages.message("cannot.resolve.constructor",name);
      HighlightInfo info=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,list,description);
      QuickFixAction.registerQuickFixAction(info,constructorCall.getTextRange(),new CreateConstructorFromCallFix(constructorCall),null,null);
      if (classReference != null) {
        CastConstructorParametersFix.registerCastActions(classReference,constructorCall,info,getFixRange(list));
      }
      WrapExpressionFix.registerWrapAction(results,list.getExpressions(),info);
      info.navigationShift=+1;
      return info;
    }
 else {
      if (!result.isAccessible() || callingProtectedConstructorFromDerivedClass(constructor,constructorCall)) {
        String description=HighlightUtil.buildProblemWithAccessDescription(classReference,result);
        HighlightInfo info=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,list,description);
        info.navigationShift=+1;
        if (classReference != null && result.isStaticsScopeCorrect()) {
          HighlightUtil.registerAccessQuickFixAction(constructor,classReference,info,result.getCurrentFileResolveScope());
        }
        return info;
      }
 else       if (!result.isApplicable()) {
        String constructorName=HighlightMessageUtil.getSymbolName(constructor,result.getSubstitutor());
        String containerName=HighlightMessageUtil.getSymbolName(constructor.getContainingClass(),result.getSubstitutor());
        String argTypes=buildArgTypesList(list);
        String description=JavaErrorMessages.message("wrong.method.arguments",constructorName,containerName,argTypes);
        String toolTip=createMismatchedArgumentsHtmlTooltip(result,list);
        PsiElement infoElement=list.getTextLength() > 0 ? list : constructorCall;
        HighlightInfo info=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,infoElement,description,toolTip);
        QuickFixAction.registerQuickFixAction(info,constructorCall.getTextRange(),new CreateConstructorFromCallFix(constructorCall),null,null);
        if (classReference != null) {
          CastConstructorParametersFix.registerCastActions(classReference,constructorCall,info,getFixRange(infoElement));
          ChangeMethodSignatureFromUsageFix.registerIntentions(results,list,info,null);
        }
        info.navigationShift=+1;
        return info;
      }
 else {
        HighlightInfo highlightInfo=GenericsHighlightUtil.checkUncheckedCall(result,constructorCall);
        if (highlightInfo != null)         return highlightInfo;
        if (constructorCall instanceof PsiNewExpression) {
          highlightInfo=GenericsHighlightUtil.checkReferenceTypeArgumentList(constructor,((PsiNewExpression)constructorCall).getTypeArgumentList(),result.getSubstitutor(),false);
          if (highlightInfo != null)           return highlightInfo;
          highlightInfo=GenericsHighlightUtil.checkGenericCallWithRawArguments(result,(PsiCallExpression)constructorCall);
        }
        if (highlightInfo != null)         return highlightInfo;
      }
    }
  }
  return null;
}
