{
  String errorDescription=null;
  final Collection<HierarchicalMethodSignature> visibleSignatures=aClass.getVisibleSignatures();
  PsiResolveHelper resolveHelper=aClass.getManager().getResolveHelper();
  Ultimate:   for (  HierarchicalMethodSignature signature : visibleSignatures) {
    PsiMethod method=signature.getMethod();
    if (!resolveHelper.isAccessible(method,aClass,null))     continue;
    List<HierarchicalMethodSignature> superSignatures=signature.getSuperSignatures();
    boolean allAbstracts=method.hasModifierProperty(PsiModifier.ABSTRACT);
    final PsiClass containingClass=method.getContainingClass();
    if (aClass.equals(containingClass))     continue;
    if (aClass.isInterface() && !containingClass.isInterface())     continue;
    HighlightInfo highlightInfo=null;
    if (!allAbstracts) {
      if (!aClass.equals(containingClass)) {
        highlightInfo=checkMethodIncompatibleReturnType(signature,superSignatures,false);
      }
    }
 else {
      if (!containingClass.equals(aClass)) {
        superSignatures=new ArrayList<HierarchicalMethodSignature>(superSignatures);
        superSignatures.add(signature);
      }
      highlightInfo=checkInterfaceInheritedMethodsReturnTypes(superSignatures);
    }
    if (highlightInfo != null)     errorDescription=highlightInfo.description;
    if (aClass.equals(containingClass))     continue;
    if (method.hasModifierProperty(PsiModifier.STATIC)) {
      for (      HierarchicalMethodSignature superSignature : superSignatures) {
        PsiMethod superMethod=superSignature.getMethod();
        if (!superMethod.hasModifierProperty(PsiModifier.STATIC)) {
          errorDescription=JavaErrorMessages.message("static.method.cannot.override.instance.method",HighlightUtil.formatMethod(method),HighlightUtil.formatClass(containingClass),HighlightUtil.formatMethod(superMethod),HighlightUtil.formatClass(superMethod.getContainingClass()));
          break Ultimate;
        }
      }
      continue;
    }
    if (errorDescription == null) {
      highlightInfo=checkMethodIncompatibleThrows(signature,superSignatures,false,aClass);
      if (highlightInfo != null)       errorDescription=highlightInfo.description;
    }
    if (errorDescription == null) {
      highlightInfo=checkMethodWeakerPrivileges(signature,superSignatures,false);
      if (highlightInfo != null)       errorDescription=highlightInfo.description;
    }
    if (errorDescription != null)     break;
  }
  if (errorDescription != null) {
    TextRange textRange=HighlightNamesUtil.getClassDeclarationTextRange(aClass);
    return HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,textRange,errorDescription);
  }
  return null;
}
