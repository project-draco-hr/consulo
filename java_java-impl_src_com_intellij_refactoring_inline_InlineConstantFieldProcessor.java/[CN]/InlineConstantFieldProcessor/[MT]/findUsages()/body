{
  if (myInlineThisOnly)   return new UsageInfo[]{new UsageInfo(myRefExpr)};
  List<UsageInfo> usages=new ArrayList<UsageInfo>();
  for (  PsiReference ref : ReferencesSearch.search(myField,GlobalSearchScope.projectScope(myProject),false)) {
    PsiElement element=ref.getElement();
    UsageInfo info=new UsageInfo(element);
    if (!(element instanceof PsiExpression) && PsiTreeUtil.getParentOfType(element,PsiImportStaticStatement.class) == null) {
      info=new UsageFromJavaDoc(element);
    }
    usages.add(info);
  }
  if (mySearchInCommentsAndStrings || mySearchForTextOccurrences) {
    TextOccurrencesUtil.UsageInfoFactory nonCodeUsageFactory=new NonCodeUsageInfoFactory(myField,myField.getName()){
      @Override public UsageInfo createUsageInfo(      @NotNull PsiElement usage,      int startOffset,      int endOffset){
        if (PsiTreeUtil.isAncestor(myField,usage,false))         return null;
        return super.createUsageInfo(usage,startOffset,endOffset);
      }
    }
;
    if (mySearchInCommentsAndStrings) {
      String stringToSearch=ElementDescriptionUtil.getElementDescription(myField,NonCodeSearchDescriptionLocation.STRINGS_AND_COMMENTS);
      TextOccurrencesUtil.addUsagesInStringsAndComments(myField,stringToSearch,usages,nonCodeUsageFactory);
    }
    if (mySearchForTextOccurrences) {
      String stringToSearch=ElementDescriptionUtil.getElementDescription(myField,NonCodeSearchDescriptionLocation.NON_JAVA);
      TextOccurrencesUtil.addTextOccurences(myField,stringToSearch,GlobalSearchScope.projectScope(myProject),usages,nonCodeUsageFactory);
    }
  }
  return usages.toArray(new UsageInfo[usages.size()]);
}
