{
  super(tabName,helpId,Breakpoint.class);
  myProject=project;
  myPropertiesPanel=propertiesPanel;
  myActions=actions;
  myBreakpointCategory=breakpointCategory;
  myTable=new BreakpointTable(project);
  myTree=new BreakpointTree(project);
  myTablePlace.setLayout(new CardLayout());
  JScrollPane pane=ScrollPaneFactory.createScrollPane(myTable);
  pane.putClientProperty(UIUtil.KEEP_BORDER_SIDES,SideBorder.ALL);
  myTablePlace.add(pane,TABLE_VIEW);
  final ListSelectionListener listSelectionListener=new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      if (!e.getValueIsAdjusting()) {
        updateCurrentBreakpointPropertiesPanel();
      }
    }
  }
;
  final ListSelectionModel tableSelectionModel=myTable.getSelectionModel();
  tableSelectionModel.addListSelectionListener(listSelectionListener);
  myDisposeActions.add(new Runnable(){
    public void run(){
      tableSelectionModel.removeListSelectionListener(listSelectionListener);
    }
  }
);
  final TreeSelectionModel treeSelectionModel=myTree.getSelectionModel();
  final TreeSelectionListener treeSelectionListener=new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      updateCurrentBreakpointPropertiesPanel();
    }
  }
;
  treeSelectionModel.addTreeSelectionListener(treeSelectionListener);
  myDisposeActions.add(new Runnable(){
    public void run(){
      treeSelectionModel.removeTreeSelectionListener(treeSelectionListener);
    }
  }
);
  final BreakpointTableModel tableModel=myTable.getModel();
  final TableModelListener tableModelListener=new TableModelListener(){
    public void tableChanged(    TableModelEvent e){
      if (e.getType() == TableModelEvent.UPDATE) {
        updateCurrentBreakpointPropertiesPanel();
      }
      fireBreakpointsChanged();
    }
  }
;
  tableModel.addTableModelListener(tableModelListener);
  myDisposeActions.add(new Runnable(){
    public void run(){
      tableModel.removeTableModelListener(tableModelListener);
    }
  }
);
  final TreeModel treeModel=myTree.getModel();
  final TreeModelListener treeModelListener=new TreeModelListener(){
    public void treeNodesChanged(    TreeModelEvent e){
    }
    public void treeNodesInserted(    TreeModelEvent e){
    }
    public void treeNodesRemoved(    TreeModelEvent e){
    }
    public void treeStructureChanged(    TreeModelEvent e){
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          ensureSelectionExists();
          updateButtons();
        }
      }
);
    }
  }
;
  treeModel.addTreeModelListener(treeModelListener);
  myDisposeActions.add(new Runnable(){
    public void run(){
      treeModel.removeTreeModelListener(treeModelListener);
    }
  }
);
  myPropertiesPanelPlace.setLayout(new CardLayout());
  final JPanel stubPanel=new JPanel();
  stubPanel.setMinimumSize(myPropertiesPanel.getPanel().getMinimumSize());
  myPropertiesPanelPlace.add(stubPanel,PROPERTIES_STUB);
  myPropertiesPanelPlace.add(myPropertiesPanel.getPanel(),PROPERTIES_DATA);
  myBreakPointsPanel.setBorder(IdeBorderFactory.createEmptyBorder(6,6,0,6));
  myButtonsPanel.setLayout(new GridBagLayout());
  for (int idx=0; idx < actions.length; idx++) {
    final BreakpointPanelAction action=actions[idx];
    action.setPanel(this);
    final AbstractButton button=action.isStateAction() ? new JCheckBox(action.getName()) : new JButton(action.getName());
    action.setButton(button);
    button.addActionListener(action);
    myDisposeActions.add(new Runnable(){
      public void run(){
        button.removeActionListener(action);
      }
    }
);
    final double weighty=(idx == actions.length - 1) ? 1.0 : 0.0;
    myButtonsPanel.add(button,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,weighty,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(0,2,2,2),0,0));
  }
  final ListSelectionListener tableSelectionListener=new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      updateButtons();
    }
  }
;
  tableSelectionModel.addListSelectionListener(tableSelectionListener);
  myDisposeActions.add(new Runnable(){
    public void run(){
      tableSelectionModel.removeListSelectionListener(tableSelectionListener);
    }
  }
);
  pane=ScrollPaneFactory.createScrollPane(myTree);
  pane.putClientProperty(UIUtil.KEEP_BORDER_SIDES,SideBorder.ALL);
  myTablePlace.add(pane,TREE_VIEW);
  updateCurrentBreakpointPropertiesPanel();
  final BreakpointManager breakpointManager=DebuggerManagerEx.getInstanceEx(project).getBreakpointManager();
  final BreakpointManagerListener breakpointManagerListener=new BreakpointManagerListener(){
    public void breakpointsChanged(){
      if (isTreeShowing()) {
        myTree.repaint();
      }
 else {
        myTable.repaint();
      }
    }
  }
;
  breakpointManager.addBreakpointManagerListener(breakpointManagerListener);
  myDisposeActions.add(new Runnable(){
    public void run(){
      breakpointManager.removeBreakpointManagerListener(breakpointManagerListener);
    }
  }
);
}
