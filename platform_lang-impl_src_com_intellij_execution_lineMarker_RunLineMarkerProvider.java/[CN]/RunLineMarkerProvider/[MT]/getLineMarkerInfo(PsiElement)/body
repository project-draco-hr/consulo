{
  List<RunLineMarkerContributor> contributors=RunLineMarkerContributor.EXTENSION.allForLanguage(element.getLanguage());
  DefaultActionGroup actionGroup=null;
  Icon icon=null;
  for (  RunLineMarkerContributor contributor : contributors) {
    RunLineMarkerContributor.Info info=contributor.getInfo(element);
    if (info == null) {
      continue;
    }
    if (icon == null) {
      icon=info.icon;
    }
    if (actionGroup == null) {
      actionGroup=new DefaultActionGroup();
    }
    for (    AnAction action : info.actions) {
      actionGroup.add(new LineMarkerActionWrapper(element,action));
    }
    actionGroup.add(new AnSeparator());
  }
  if (icon == null)   return null;
  final DefaultActionGroup finalActionGroup=actionGroup;
  return new LineMarkerInfo<PsiElement>(element,element.getTextOffset(),icon,Pass.UPDATE_ALL,null,null,GutterIconRenderer.Alignment.CENTER){
    @Nullable @Override public GutterIconRenderer createGutterRenderer(){
      return new LineMarkerGutterIconRenderer<PsiElement>(this){
        @Override public AnAction getClickAction(){
          return null;
        }
        @Override public boolean isNavigateAction(){
          return true;
        }
        @Nullable @Override public ActionGroup getPopupMenuActions(){
          return finalActionGroup;
        }
      }
;
    }
  }
;
}
