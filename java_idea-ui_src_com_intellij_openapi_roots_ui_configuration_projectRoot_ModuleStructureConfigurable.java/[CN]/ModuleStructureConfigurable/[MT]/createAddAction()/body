{
  return new AbstractAddGroup(ProjectBundle.message("add.new.header.text")){
    @NotNull public AnAction[] getChildren(    @Nullable final AnActionEvent e){
      AnAction module=new AddModuleAction();
      ArrayList<AnAction> result=new ArrayList<AnAction>();
      result.add(module);
      final AnAction[] facets=AddFacetToModuleAction.createAddFacetActions(myFacetEditorFacade,myProject);
      if (facets.length > 0) {
        result.add(new Separator(ProjectBundle.message("add.group.facet.separator")));
        ContainerUtil.addAll(result,facets);
      }
      final List<AnAction> libraryActions=CreateCustomLibraryAction.getActions(myContext,ModuleStructureConfigurable.this);
      if (!libraryActions.isEmpty()) {
        result.add(new Separator("Library"));
        result.addAll(libraryActions);
      }
      final NullableComputable<MyNode> selectedNodeRetriever=new NullableComputable<MyNode>(){
        public MyNode compute(){
          final TreePath selectionPath=myTree.getSelectionPath();
          final Object lastPathComponent=selectionPath == null ? null : selectionPath.getLastPathComponent();
          if (lastPathComponent instanceof MyNode) {
            return (MyNode)lastPathComponent;
          }
          return null;
        }
      }
;
      for (      final ModuleStructureExtension extension : ModuleStructureExtension.EP_NAME.getExtensions()) {
        result.addAll(extension.createAddActions(selectedNodeRetriever,TREE_UPDATER,myContext.myModulesConfigurator));
      }
      return result.toArray(new AnAction[result.size()]);
    }
  }
;
}
