{
  if (prevLines.length == 0)   return curLines;
  ArrayList<String> merged=new ArrayList<String>();
  int curIdx=0, prevIdx=0;
  String cur, prev;
  boolean classScope=false;
  boolean importMerged=false;
  for (int i=0; i < Math.max(curLines.length,prevLines.length); i++) {
    cur=curIdx < curLines.length ? curLines[curIdx] : "";
    prev=prevIdx < prevLines.length ? prevLines[prevIdx] : "";
    if (classScope) {
      merged.addAll(Arrays.asList(curLines).subList(curIdx,curLines.length));
      break;
    }
 else     if (prev.trim().startsWith("import ") || cur.trim().startsWith("import ")) {
      if (importMerged)       continue;
      importMerged=true;
      int[] indices=new int[]{curIdx,prevIdx};
      mergeImports(merged,curLines,prevLines,indices);
      curIdx=indices[0];
      prevIdx=indices[1];
    }
 else     if (cur.equals(prev)) {
      if (cur.trim().startsWith("public interface ") || cur.trim().startsWith("public enum "))       classScope=true;
      merged.add(cur);
      curIdx++;
      prevIdx++;
    }
 else     if (prev.trim().startsWith("@")) {
      merged.add(prev);
      prevIdx++;
    }
 else     if (cur.trim().startsWith("@")) {
      merged.add(cur);
      curIdx++;
    }
 else     if (cur.trim().startsWith("package  ") && prev.trim().startsWith("package ")) {
      merged.add(prev);
      curIdx++;
      prevIdx++;
    }
 else     if (cur.trim().startsWith("public interface ") && prev.trim().startsWith("public interface ")) {
      classScope=true;
      prevIdx=addAllStringsUpTo(merged,prevLines,prevIdx,"{");
      curIdx=addAllStringsUpTo(null,curLines,curIdx,"{");
    }
 else     if (cur.trim().startsWith("* ")) {
      curIdx=addAllStringsUpTo(merged,curLines,curIdx,"*/");
      if (prev.trim().startsWith("* ") || prev.trim().endsWith("*/")) {
        prevIdx=addAllStringsUpTo(null,prevLines,prevIdx,"*/");
      }
    }
 else {
      merged.add(cur);
      curIdx++;
      prevIdx++;
    }
  }
  String[] mergedLines=merged.toArray(new String[merged.size()]);
  if (compareLines(mergedLines,prevLines,2) == 0) {
    return prevLines;
  }
 else   if (compareLines(mergedLines,curLines,2) == 0) {
    return curLines;
  }
 else {
    return mergedLines;
  }
}
