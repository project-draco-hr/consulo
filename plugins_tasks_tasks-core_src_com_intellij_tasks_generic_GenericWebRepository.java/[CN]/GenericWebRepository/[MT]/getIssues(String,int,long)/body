{
  final HttpClient httpClient=getHttpClient();
  if (!isLoginAnonymously())   login(httpClient);
  final GetMethod getMethod=new GetMethod(getFullTasksUrl());
  httpClient.executeMethod(getMethod);
  final String response=getMethod.getResponseBodyAsString(Integer.MAX_VALUE);
  final String taskPatternWithoutPlaceholders=myTaskPattern.replaceAll("\\{.+?\\}","");
  Matcher matcher=Pattern.compile(taskPatternWithoutPlaceholders,Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL| Pattern.UNICODE_CASE| Pattern.CANON_EQ).matcher(response);
  final List<String> placeholders=getPlaceholders(myTaskPattern);
  if (matcher.groupCount() != 2 || !placeholders.contains(ID_PLACEHOLDER) || !placeholders.contains(SUMMARY_PLACEHOLDER)) {
    throw new Exception("Incorrect Task Pattern");
  }
  List<Task> tasks=new ArrayList<Task>();
  while (matcher.find()) {
    final String id=matcher.group(placeholders.indexOf(ID_PLACEHOLDER) + 1);
    final String summary=matcher.group(placeholders.indexOf(SUMMARY_PLACEHOLDER) + 1);
    tasks.add(new GenericWebTask(id,summary));
  }
  tasks=TaskSearchSupport.filterTasks(query != null ? query : "",tasks);
  tasks=tasks.subList(0,Math.min(max,tasks.size()));
  return tasks;
}
