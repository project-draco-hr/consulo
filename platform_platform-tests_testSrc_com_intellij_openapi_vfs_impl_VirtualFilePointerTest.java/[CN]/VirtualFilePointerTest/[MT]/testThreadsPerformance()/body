{
  final File ioTempDir=createTempDirectory();
  final File ioPtrBase=new File(ioTempDir,"parent");
  final File ioPtr=new File(ioPtrBase,"f1");
  final File ioSand=new File(ioTempDir,"sand");
  final File ioSandPtr=new File(ioSand,"f2");
  ioSandPtr.getParentFile().mkdirs();
  ioSandPtr.createNewFile();
  ioPtr.getParentFile().mkdirs();
  ioPtr.createNewFile();
  doVfsRefresh();
  final VirtualFilePointer pointer=createPointerByFile(ioPtr,null);
  assertTrue(pointer.isValid());
  final VirtualFile virtualFile=pointer.getFile();
  assertNotNull(virtualFile);
  assertTrue(virtualFile.isValid());
  VirtualFileAdapter listener=new VirtualFileAdapter(){
    @Override public void fileCreated(    VirtualFileEvent event){
      stressRead(pointer);
    }
    @Override public void fileDeleted(    VirtualFileEvent event){
      stressRead(pointer);
    }
  }
;
  Disposable disposable=Disposer.newDisposable();
  VirtualFileManager.getInstance().addVirtualFileListener(listener,disposable);
  int N=Timings.adjustAccordingToMySpeed(1000,false);
  System.out.println("N = " + N);
  for (int i=0; i < N; i++) {
    assertNotNull(pointer.getFile());
    FileUtil.delete(ioPtrBase);
    doVfsRefresh();
    final VirtualFile v=LocalFileSystem.getInstance().findFileByIoFile(ioSandPtr);
    new WriteCommandAction.Simple(getProject()){
      @Override protected void run() throws Throwable {
        v.delete(this);
        LocalFileSystem.getInstance().findFileByIoFile(ioSand).createChildData(this,ioSandPtr.getName());
      }
    }
.execute().throwException();
    assertTrue(ioPtrBase.mkdirs());
    assertTrue(ioPtr.createNewFile());
    stressRead(pointer);
    doVfsRefresh();
  }
  Disposer.dispose(disposable);
}
