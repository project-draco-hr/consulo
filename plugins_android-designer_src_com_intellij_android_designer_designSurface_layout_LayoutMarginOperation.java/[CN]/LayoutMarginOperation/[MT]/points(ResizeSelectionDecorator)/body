{
  decorator.addPoint(new ResizePoint(){
    @Override protected void paint(    DecorationLayer layer,    Graphics2D g,    RadComponent component){
      Rectangle bounds=component.getBounds(layer);
      applyMargins(bounds,((RadViewComponent)component).getMargins());
      g.setStroke(STROKE);
      g.setColor(Color.red);
      g.drawRect(bounds.x,bounds.y,bounds.width,bounds.height);
    }
    @Override public InputTool findTargetTool(    DecorationLayer layer,    RadComponent component,    int x,    int y){
      return null;
    }
    @Override public Object getType(){
      return null;
    }
    @Override protected InputTool createTool(    RadComponent component){
      return null;
    }
    @Override protected Point getLocation(    DecorationLayer layer,    RadComponent component){
      return null;
    }
  }
);
  decorator.addPoint(new DirectionResizePoint(Color.orange,Color.black,Position.WEST,LayoutMarginOperation.TYPE){
    @Override protected Point getLocation(    DecorationLayer layer,    RadComponent component){
      Point location=super.getLocation(layer,component);
      location.x-=((RadViewComponent)component).getMargins().x;
      return location;
    }
  }
);
  decorator.addPoint(new DirectionResizePoint(Color.orange,Color.black,Position.EAST,LayoutMarginOperation.TYPE){
    @Override protected Point getLocation(    DecorationLayer layer,    RadComponent component){
      Point location=super.getLocation(layer,component);
      location.x+=((RadViewComponent)component).getMargins().width;
      return location;
    }
  }
.move(1,0.25));
  decorator.addPoint(new DirectionResizePoint(Color.orange,Color.black,Position.NORTH,LayoutMarginOperation.TYPE){
    @Override protected Point getLocation(    DecorationLayer layer,    RadComponent component){
      Point location=super.getLocation(layer,component);
      location.y-=((RadViewComponent)component).getMargins().y;
      return location;
    }
  }
);
  decorator.addPoint(new DirectionResizePoint(Color.orange,Color.black,Position.SOUTH,LayoutMarginOperation.TYPE){
    @Override protected Point getLocation(    DecorationLayer layer,    RadComponent component){
      Point location=super.getLocation(layer,component);
      location.y+=((RadViewComponent)component).getMargins().height;
      return location;
    }
  }
.move(0.25,1));
}
