{
  final HighlightInfo[] infos=new HighlightInfo[1];
  final PsiAnnotationOwner owner=annotation.getOwner();
  if (owner instanceof PsiModifierList) {
    final PsiElement parent=((PsiModifierList)owner).getParent();
    if (parent instanceof PsiClass) {
      annotation.accept(new JavaRecursiveElementWalkingVisitor(){
        @Override public void visitElement(        PsiElement element){
          if (infos[0] != null)           return;
          super.visitElement(element);
        }
        @Override public void visitReferenceExpression(        PsiReferenceExpression expression){
          super.visitReferenceExpression(expression);
          final PsiElement resolve=expression.resolve();
          if (resolve instanceof PsiField && ((PsiMember)resolve).hasModifierProperty(PsiModifier.PRIVATE) && PsiTreeUtil.isAncestor(parent,resolve,true)) {
            String description=JavaErrorMessages.message("private.symbol",HighlightUtil.formatField((PsiField)resolve),HighlightUtil.formatClass((PsiClass)parent));
            HighlightInfo result=HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(expression).descriptionAndTooltip(description).create();
            infos[0]=result;
          }
        }
      }
);
    }
  }
  return infos[0];
}
