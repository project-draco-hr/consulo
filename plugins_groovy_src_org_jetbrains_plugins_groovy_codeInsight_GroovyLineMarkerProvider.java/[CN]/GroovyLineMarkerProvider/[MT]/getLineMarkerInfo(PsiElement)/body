{
  final PsiElement parent=element.getParent();
  if (parent instanceof PsiNameIdentifierOwner) {
    final ASTNode node=element.getNode();
    if (node != null && TokenSets.PROPERTY_NAMES.contains(node.getElementType())) {
      return super.getLineMarkerInfo(((PsiNameIdentifierOwner)parent).getNameIdentifier());
    }
  }
  if (myDaemonSettings.SHOW_METHOD_SEPARATORS && element.getFirstChild() == null) {
    PsiElement element1=element;
    boolean isMember=false;
    while (element1 != null && !(element1 instanceof PsiFile) && element1.getPrevSibling() == null) {
      element1=element1.getParent();
      if (element1 instanceof PsiMember || element1 instanceof GrVariableDeclarationBase) {
        isMember=true;
        break;
      }
    }
    if (isMember && !(element1 instanceof PsiAnonymousClass || element1.getParent() instanceof PsiAnonymousClass)) {
      boolean drawSeparator=false;
      int category=getGroovyCategory(element1);
      for (PsiElement child=element1.getPrevSibling(); child != null; child=child.getPrevSibling()) {
        int category1=getGroovyCategory(child);
        if (category1 == 0)         continue;
        drawSeparator=category != 1 || category1 != 1;
        break;
      }
      if (drawSeparator) {
        GrDocComment comment=null;
        if (element1 instanceof GrDocCommentOwner) {
          comment=((GrDocCommentOwner)element1).getDocComment();
        }
        LineMarkerInfo info=new LineMarkerInfo<PsiElement>(element,comment != null ? comment.getTextRange() : element.getTextRange(),null,Pass.UPDATE_ALL,NullableFunction.NULL,null,GutterIconRenderer.Alignment.RIGHT);
        EditorColorsScheme scheme=myColorsManager.getGlobalScheme();
        info.separatorColor=scheme.getColor(CodeInsightColors.METHOD_SEPARATORS_COLOR);
        info.separatorPlacement=SeparatorPlacement.TOP;
        return info;
      }
    }
  }
  return super.getLineMarkerInfo(element);
}
