{
  final Set<GrField> overridden=new HashSet<GrField>();
  final HashSet<GrAccessorMethod> accessors=new HashSet<GrAccessorMethod>();
  Set<PsiClass> classes=new THashSet<PsiClass>();
  for (  GrField field : fields) {
    ProgressManager.checkCanceled();
    final PsiClass parentClass=field.getContainingClass();
    if (!"java.lang.Object".equals(parentClass.getQualifiedName())) {
      classes.add(parentClass);
    }
    accessors.addAll(GroovyPropertyUtils.getFieldAccessors(field));
  }
  for (  final PsiClass aClass : classes) {
    try {
      AllOverridingMethodsSearch.search(aClass).forEach(new Processor<Pair<PsiMethod,PsiMethod>>(){
        public boolean process(        final Pair<PsiMethod,PsiMethod> pair){
          ProgressManager.checkCanceled();
          final PsiMethod superMethod=pair.getFirst();
          if (isCorrectTarget(superMethod) && isCorrectTarget(pair.getSecond())) {
            if (accessors.remove(superMethod)) {
              LOG.assertTrue(superMethod instanceof GrAccessorMethod);
              overridden.add(((GrAccessorMethod)superMethod).getProperty());
            }
          }
          return !fields.isEmpty();
        }
      }
);
    }
 catch (    IndexNotReadyException ignored) {
    }
  }
  for (  GrField field : overridden) {
    final Icon icon=OVERRIDEN_METHOD_MARKER_RENDERER;
    PsiElement range;
    range=field.getNameIdentifierGroovy();
    final MarkerType type=OVERRIDEN_PROPERTY_TYPE;
    LineMarkerInfo info=new LineMarkerInfo<PsiElement>(range,range.getTextRange(),icon,Pass.UPDATE_OVERRIDEN_MARKERS,type.getTooltip(),type.getNavigationHandler(),GutterIconRenderer.Alignment.RIGHT);
    result.add(info);
  }
}
