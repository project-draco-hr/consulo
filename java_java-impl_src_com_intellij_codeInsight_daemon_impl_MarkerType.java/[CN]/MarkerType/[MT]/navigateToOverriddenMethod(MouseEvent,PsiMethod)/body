{
  if (DumbService.isDumb(method.getProject())) {
    DumbService.getInstance(method.getProject()).showDumbModeNotification("Navigation to overriding classes is not possible during index update");
    return;
  }
  final PsiElementProcessor.CollectElementsWithLimit<PsiMethod> collectProcessor=new PsiElementProcessor.CollectElementsWithLimit<PsiMethod>(2,new THashSet<PsiMethod>());
  if (!ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
    @Override public void run(){
      OverridingMethodsSearch.search(method,true).forEach(new PsiElementProcessorAdapter<PsiMethod>(collectProcessor));
    }
  }
,SEARCHING_FOR_OVERRIDING_METHODS,true,method.getProject(),(JComponent)e.getComponent())) {
    return;
  }
  PsiMethod[] overridings=collectProcessor.toArray(PsiMethod.EMPTY_ARRAY);
  if (overridings.length == 0)   return;
  boolean showMethodNames=!PsiUtil.allMethodsHaveSameSignature(overridings);
  MethodCellRenderer renderer=new MethodCellRenderer(showMethodNames);
  Arrays.sort(overridings,renderer.getComparator());
  final OverridingMethodsUpdater methodsUpdater=new OverridingMethodsUpdater(method,renderer);
  PsiElementListNavigator.openTargets(e,overridings,methodsUpdater.getCaption(overridings.length),"Overriding methods of " + method.getName(),renderer,methodsUpdater);
}
