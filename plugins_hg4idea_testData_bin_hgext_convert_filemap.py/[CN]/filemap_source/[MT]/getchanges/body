def getchanges(self, rev):
    parents = self.commits[rev].parents
    if (len(parents) > 1):
        self.rebuild()
    mparents = []
    wp = None
    for (i, p1) in enumerate(parents):
        mp1 = self.parentmap[p1]
        if ((mp1 == SKIPREV) or (mp1 in mparents)):
            continue
        for p2 in parents:
            if ((p1 == p2) or (mp1 == self.parentmap[p2])):
                continue
            if (mp1 in self.wantedancestors[p2]):
                break
        else:
            mparents.append(mp1)
            wp = i
    if ((wp is None) and parents):
        wp = 0
    self.origparents[rev] = parents
    if ((len(mparents) < 2) and (not self.wanted(rev, wp))):
        p = None
        if parents:
            p = parents[wp]
        self.mark_not_wanted(rev, p)
        self.convertedorder.append((rev, False, p))
        self._discard(*parents)
        return self.parentmap[rev]
    self.commits[rev].parents = mparents
    self.mark_wanted(rev, parents)
    self.convertedorder.append((rev, True, None))
    self._discard(*parents)
    (changes, copies) = self.base.getchanges(rev)
    newnames = {}
    files = []
    for (f, r) in changes:
        newf = self.filemapper(f)
        if newf:
            files.append((newf, (f, r)))
            newnames[f] = newf
    ncopies = {}
    for c in copies:
        newc = self.filemapper(c)
        if newc:
            newsource = self.filemapper(copies[c])
            if newsource:
                ncopies[newc] = newsource
    return (files, ncopies)
