{
  if (myHighlights == null)   return;
  UpdateHighlightersUtil.setHighlightersToEditor(myProject,myDocument,myStartOffset,myEndOffset,myHighlights,UpdateHighlightersUtil.POST_HIGHLIGHTERS_GROUP);
  DaemonCodeAnalyzerImpl daemonCodeAnalyzer=(DaemonCodeAnalyzerImpl)DaemonCodeAnalyzer.getInstance(myProject);
  daemonCodeAnalyzer.getFileStatusMap().markFileUpToDate(myDocument,FileStatusMap.NORMAL_HIGHLIGHTERS);
  if (timeToOptimizeImports()) {
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      public void run(){
        CommandProcessor.getInstance().runUndoTransparentAction(new Runnable(){
          public void run(){
            ApplicationManager.getApplication().runWriteAction(new Runnable(){
              public void run(){
                OptimizeImportsFix optimizeImportsFix=new OptimizeImportsFix();
                PsiDocumentManager.getInstance(myProject).commitAllDocuments();
                if ((myHasRedundantImports || myHasMissortedImports) && optimizeImportsFix.isAvailable(myProject,myEditor,myFile) && myFile.isWritable()) {
                  optimizeImportsFix.invoke(myProject,myEditor,myFile);
                }
              }
            }
);
          }
        }
);
      }
    }
);
  }
  ErrorStripeRenderer renderer=new RefreshStatusRenderer(myProject,daemonCodeAnalyzer,myDocument,myFile);
  Editor[] editors=EditorFactory.getInstance().getEditors(myDocument,myProject);
  for (  Editor editor : editors) {
    ((EditorMarkupModel)editor.getMarkupModel()).setErrorStripeRenderer(renderer);
  }
}
