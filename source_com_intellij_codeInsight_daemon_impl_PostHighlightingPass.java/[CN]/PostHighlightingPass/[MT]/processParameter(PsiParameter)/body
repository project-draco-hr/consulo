{
  PsiElement declarationScope=parameter.getDeclarationScope();
  if (declarationScope instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)declarationScope;
    if (PsiUtil.hasErrorElementChild(method))     return null;
    if ((method.isConstructor() || method.hasModifierProperty(PsiModifier.PRIVATE) || method.hasModifierProperty(PsiModifier.STATIC)) && !method.hasModifierProperty(PsiModifier.NATIVE)) {
      if (isMainMethod(method))       return null;
      int count=myRefCountHolder.getRefCount(parameter);
      if (count == 0) {
        PsiIdentifier identifier=parameter.getNameIdentifier();
        String message=MessageFormat.format(PARAMETER_IS_NOT_USED,new Object[]{identifier.getText()});
        final HighlightInfo highlightInfo=createUnusedSymbolInfo(identifier,message);
        if (method.isConstructor()) {
          QuickFixAction.registerQuickFixAction(highlightInfo,new CreateFieldFromParameterAction(parameter));
        }
        QuickFixAction.registerQuickFixAction(highlightInfo,new RemoveUnusedParameterFix(parameter));
        return highlightInfo;
      }
    }
  }
 else   if (declarationScope instanceof PsiForeachStatement) {
    if (myRefCountHolder.getRefCount(parameter) == 0) {
      PsiIdentifier identifier=parameter.getNameIdentifier();
      String message=MessageFormat.format(PARAMETER_IS_NOT_USED,new Object[]{identifier.getText()});
      return createUnusedSymbolInfo(identifier,message);
    }
  }
  return null;
}
