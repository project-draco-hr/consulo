{
  if (field.hasModifierProperty(PsiModifier.PRIVATE)) {
    PsiIdentifier identifier=field.getNameIdentifier();
    int count=myRefCountHolder.getRefCount(field);
    if (count == 0) {
      if (isSerialVersionUIDField(field))       return null;
      String message=MessageFormat.format(PRIVATE_FIELD_IS_NOT_USED,new Object[]{identifier.getText()});
      final HighlightInfo highlightInfo=createUnusedSymbolInfo(identifier,message);
      QuickFixAction.registerQuickFixAction(highlightInfo,new RemoveUnusedVariableFix(field));
      QuickFixAction.registerQuickFixAction(highlightInfo,new CreateGetterOrSetterAction(true,false,field));
      QuickFixAction.registerQuickFixAction(highlightInfo,new CreateGetterOrSetterAction(false,true,field));
      QuickFixAction.registerQuickFixAction(highlightInfo,new CreateGetterOrSetterAction(true,true,field));
      return highlightInfo;
    }
    count=myRefCountHolder.getReadRefCount(field);
    if (count == 0) {
      String message=MessageFormat.format(PRIVATE_FIELD_IS_NOT_USED_FOR_READING,new Object[]{identifier.getText()});
      final HighlightInfo highlightInfo=createUnusedSymbolInfo(identifier,message);
      QuickFixAction.registerQuickFixAction(highlightInfo,new RemoveUnusedVariableFix(field));
      QuickFixAction.registerQuickFixAction(highlightInfo,new CreateGetterOrSetterAction(true,false,field));
      return highlightInfo;
    }
    if (!field.hasInitializer()) {
      count=myRefCountHolder.getWriteRefCount(field);
      if (count == 0) {
        if (!assignedByUIForm(field)) {
          String message=MessageFormat.format(PRIVATE_FIELD_IS_NOT_ASSIGNED,new Object[]{identifier.getText()});
          HighlightInfo info=createUnusedSymbolInfo(identifier,message);
          QuickFixAction.registerQuickFixAction(info,new CreateGetterOrSetterAction(false,true,field));
          return info;
        }
      }
    }
 else {
      if (assignedByUIForm(field)) {
        String message=MessageFormat.format(FIELD_IS_OVERWRITTEN,new Object[]{identifier.getText()});
        return HighlightInfo.createHighlightInfo(HighlightInfoType.WARNING,field.getInitializer(),message);
      }
    }
  }
  return null;
}
