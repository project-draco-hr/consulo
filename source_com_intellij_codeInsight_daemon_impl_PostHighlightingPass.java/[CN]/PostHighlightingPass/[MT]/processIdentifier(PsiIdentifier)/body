{
  if (!mySettings.getInspectionProfile().isToolEnabled(HighlightDisplayKey.UNUSED_SYMBOL))   return null;
  final InspectionManagerEx manager=((InspectionManagerEx)InspectionManager.getInstance(myProject));
  if (manager.inspectionResultSuppressed(identifier,HighlightDisplayKey.UNUSED_SYMBOL.toString()))   return null;
  if (!manager.isToCheckMember(identifier,HighlightDisplayKey.UNUSED_SYMBOL.toString()))   return null;
  HighlightInfo info;
  PsiElement parent=identifier.getParent();
  if (PsiUtil.hasErrorElementChild(parent))   return null;
  if (parent instanceof PsiLocalVariable) {
    info=processLocalVariable((PsiLocalVariable)parent);
  }
 else   if (parent instanceof PsiField) {
    info=processField((PsiField)parent);
  }
 else   if (parent instanceof PsiParameter) {
    info=processParameter((PsiParameter)parent);
  }
 else   if (parent instanceof PsiMethod) {
    info=processMethod((PsiMethod)parent);
  }
 else   if (parent instanceof PsiClass && identifier.equals(((PsiClass)parent).getNameIdentifier())) {
    info=processClass((PsiClass)parent);
  }
 else {
    return null;
  }
  QuickFixAction.registerQuickFixAction(info,new AddNoInspectionCommentAction(HighlightDisplayKey.UNUSED_SYMBOL,identifier));
  QuickFixAction.registerQuickFixAction(info,new AddNoInspectionDocTagAction(HighlightDisplayKey.UNUSED_SYMBOL,identifier));
  QuickFixAction.registerQuickFixAction(info,new SwitchOffToolAction(HighlightDisplayKey.UNUSED_SYMBOL));
  return info;
}
