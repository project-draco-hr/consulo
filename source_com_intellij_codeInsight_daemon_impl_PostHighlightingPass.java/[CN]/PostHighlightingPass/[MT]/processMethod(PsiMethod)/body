{
  if (myRefCountHolder.isReferenced(method))   return null;
  boolean isPrivate=method.hasModifierProperty(PsiModifier.PRIVATE);
  if (!isPrivate) {
    PsiClass containingClass=method.getContainingClass();
    if (containingClass != null && method.isConstructor() && containingClass.getConstructors().length == 1 && !isClassUnused(containingClass))     return null;
    if (!method.getHierarchicalMethodSignature().getSuperSignatures().isEmpty() || !weAreSureThereAreNoUsages(method)) {
      return null;
    }
  }
  if (HighlightMethodUtil.isSerializationRelatedMethod(method) || isIntentionalPrivateConstructor(method) || isImplicitUsage(method)) {
    return null;
  }
  String key=isPrivate ? method.isConstructor() ? "private.constructor.is.not.used" : "private.method.is.not.used" : method.isConstructor() ? "constructor.is.not.used" : "method.is.not.used";
  String symbolName=HighlightMessageUtil.getSymbolName(method,PsiSubstitutor.EMPTY);
  String message=JavaErrorMessages.message(key,symbolName);
  PsiIdentifier identifier=method.getNameIdentifier();
  final HighlightInfo highlightInfo=createUnusedSymbolInfo(identifier,message);
  QuickFixAction.registerQuickFixAction(highlightInfo,new SafeDeleteFix(method),myUnusedSymbolKey);
  if (PropertyUtil.isSimplePropertySetter(method)) {
    SpecialAnnotationsUtil.createAddToSpecialAnnotationFixes(method,new Processor<String>(){
      public boolean process(      final String annoName){
        QuickFixAction.registerQuickFixAction(highlightInfo,myUnusedSymbolInspection.createQuickFix(annoName,method));
        return true;
      }
    }
);
  }
  return highlightInfo;
}
