{
  DaemonCodeAnalyzer daemonCodeAnalyzer=DaemonCodeAnalyzer.getInstance(myProject);
  final FileStatusMap fileStatusMap=((DaemonCodeAnalyzerImpl)daemonCodeAnalyzer).getFileStatusMap();
  final List<HighlightInfo> highlights=new ArrayList<HighlightInfo>();
  final FileViewProvider viewProvider=myFile.getViewProvider();
  final Set<Language> relevantLanguages=viewProvider.getLanguages();
  final Set<PsiElement> elementSet=new THashSet<PsiElement>();
  for (  Language language : relevantLanguages) {
    PsiElement psiRoot=viewProvider.getPsi(language);
    if (!HighlightLevelUtil.shouldHighlight(psiRoot))     continue;
    List<PsiElement> elements=CollectHighlightsUtil.getElementsInRange(psiRoot,myStartOffset,myEndOffset);
    elementSet.addAll(elements);
  }
  Runnable doCollectInfo=new Runnable(){
    public void run(){
      collectHighlights(elementSet,highlights);
      myHighlights=highlights;
      for (      HighlightInfo info : highlights) {
        if (info.getSeverity() == HighlightSeverity.ERROR) {
          fileStatusMap.setErrorFoundFlag(myDocument,true);
          break;
        }
      }
    }
  }
;
  myRefCountHolder=RefCountHolder.getInstance(myFile);
  if (!myRefCountHolder.retrieveUnusedReferencesInfo(doCollectInfo)) {
    progress.cancel();
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      public void run(){
        try {
          Thread.sleep(new Random().nextInt(100));
        }
 catch (        InterruptedException e) {
          LOG.error(e);
        }
        DaemonCodeAnalyzer.getInstance(myProject).restart();
      }
    }
,myProject.getDisposed());
    throw new ProcessCanceledException();
  }
}
