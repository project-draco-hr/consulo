{
  configureByFile(filePath);
  PsiFile file=myFile;
  final MultiMap<PsiReference,ResolveResult> refs=new LinkedMultiMap<PsiReference,ResolveResult>();
  file.accept(new PsiRecursiveElementVisitor(){
    @Override public void visitElement(    final PsiElement element){
      super.visitElement(element);
      PsiReference[] references=element.getReferences();
      for (      final PsiReference reference : references) {
        final ResolveResult[] resolveResults;
        if (reference instanceof PsiPolyVariantReference) {
          resolveResults=((PsiPolyVariantReference)reference).multiResolve(false);
        }
 else {
          resolveResults=new ResolveResult[]{new ResolveResult(){
            @Nullable @Override public PsiElement getElement(){
              return reference.resolve();
            }
            @Override public boolean isValidResult(){
              return true;
            }
          }
};
        }
        refs.putValues(reference,Arrays.asList(resolveResults));
      }
    }
  }
);
  StringBuilder builder=new StringBuilder();
  for (  Map.Entry<PsiReference,Collection<ResolveResult>> entry : refs.entrySet()) {
    PsiReference reference=entry.getKey();
    Collection<ResolveResult> results=entry.getValue();
    PsiElement element=reference.getElement();
    builder.append(element.getText()).append(element.getTextRange()).append(": ");
    if (results.isEmpty()) {
      builder.append("empty");
    }
 else {
      builder.append(StringUtil.join(results,new Function<ResolveResult,String>(){
        @Override @RequiredReadAction public String fun(        ResolveResult resolveResult){
          return buildReferenceResultText(resolveResult);
        }
      }
,", "));
    }
    builder.append("\n");
  }
  doCheckResult(getTestDataPath() + filePath + ".txt",builder.toString());
}
