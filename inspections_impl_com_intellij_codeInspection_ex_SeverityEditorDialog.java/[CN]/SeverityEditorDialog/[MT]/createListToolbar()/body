{
  DefaultActionGroup group=new DefaultActionGroup();
  final ReorderableListController<MyHighlightInfoTypeWithAtrributesDescription> controller=ReorderableListController.create(myOptionsList,group);
  controller.addAddAction(IdeBundle.message("action.add"),new Factory<MyHighlightInfoTypeWithAtrributesDescription>(){
    public MyHighlightInfoTypeWithAtrributesDescription create(){
      final String name=Messages.showInputDialog(myPanel,InspectionsBundle.message("highlight.severity.create.dialog.name.label"),InspectionsBundle.message("highlight.severity.create.dialog.title"),Messages.getQuestionIcon());
      if (name == null)       return null;
      final TextAttributes textAttributes=CodeInsightColors.WARNINGS_ATTRIBUTES.getDefaultAttributes();
      HighlightInfoType.HighlightInfoTypeImpl info=new HighlightInfoType.HighlightInfoTypeImpl(new HighlightSeverity(name,0),TextAttributesKey.createTextAttributesKey(name,textAttributes.clone()));
      return new MyHighlightInfoTypeWithAtrributesDescription(textAttributes.clone(),info);
    }
  }
,true);
  final ReorderableListController<MyHighlightInfoTypeWithAtrributesDescription>.RemoveActionDescription removeAction=controller.addRemoveAction(IdeBundle.message("action.remove"));
  removeAction.setEnableCondition(new Condition<MyHighlightInfoTypeWithAtrributesDescription>(){
    public boolean value(    final MyHighlightInfoTypeWithAtrributesDescription pair){
      final HighlightInfoType info=pair.getHighlightInfoType();
      if (info == null) {
        return false;
      }
      return !isDefaultSetting(info);
    }
  }
);
  controller.addAction(new AnAction(ExecutionBundle.message("move.up.action.name"),null,IconLoader.getIcon("/actions/moveUp.png")){
    public void actionPerformed(    final AnActionEvent e){
      processListValueChanged((MyHighlightInfoTypeWithAtrributesDescription)myOptionsList.getSelectedValue(),true);
      myCurrentSelection=-1;
      ListUtil.moveSelectedItemsUp(myOptionsList);
    }
    public void update(    final AnActionEvent e){
      boolean canMove=ListUtil.canMoveSelectedItemsUp(myOptionsList);
      MyHighlightInfoTypeWithAtrributesDescription pair=(MyHighlightInfoTypeWithAtrributesDescription)myOptionsList.getSelectedValue();
      if (pair != null && pair.getSeverity() == HighlightSeverity.WARNING) {
        final int newPosition=myOptionsList.getSelectedIndex() - 1;
        if (newPosition >= 0) {
          pair=(MyHighlightInfoTypeWithAtrributesDescription)myOptionsList.getModel().getElementAt(newPosition);
          if (pair.getSeverity() == HighlightSeverity.ERROR) {
            canMove=false;
          }
        }
      }
      e.getPresentation().setEnabled(canMove);
    }
  }
);
  controller.addAction(new AnAction(ExecutionBundle.message("move.down.action.name"),null,IconLoader.getIcon("/actions/moveDown.png")){
    public void actionPerformed(    final AnActionEvent e){
      processListValueChanged((MyHighlightInfoTypeWithAtrributesDescription)myOptionsList.getSelectedValue(),true);
      myCurrentSelection=-1;
      ListUtil.moveSelectedItemsDown(myOptionsList);
    }
    public void update(    final AnActionEvent e){
      boolean canMove=ListUtil.canMoveSelectedItemsDown(myOptionsList);
      MyHighlightInfoTypeWithAtrributesDescription pair=(MyHighlightInfoTypeWithAtrributesDescription)myOptionsList.getSelectedValue();
      if (pair != null && pair.getSeverity() == HighlightSeverity.ERROR) {
        final int newPosition=myOptionsList.getSelectedIndex() + 1;
        final ListModel model=myOptionsList.getModel();
        if (newPosition < model.getSize()) {
          pair=(MyHighlightInfoTypeWithAtrributesDescription)model.getElementAt(newPosition);
          if (pair.getSeverity() == HighlightSeverity.WARNING) {
            canMove=false;
          }
        }
      }
      e.getPresentation().setEnabled(canMove);
    }
  }
);
  ActionToolbar toolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,group,true);
  return toolbar.getComponent();
}
