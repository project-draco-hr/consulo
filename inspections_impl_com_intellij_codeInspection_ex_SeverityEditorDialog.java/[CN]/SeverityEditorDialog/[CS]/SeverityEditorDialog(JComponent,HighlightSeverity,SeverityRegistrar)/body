{
  super(parent,true);
  mySeverityRegistrar=severityRegistrar;
  myOptionsList.setCellRenderer(new DefaultListCellRenderer(){
    public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean isSelected,    boolean cellHasFocus){
      final Component rendererComponent=super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
      if (value instanceof MyHighlightInfoTypeWithAtrributesDescription) {
        setText(((MyHighlightInfoTypeWithAtrributesDescription)value).getSeverity().toString());
      }
      return rendererComponent;
    }
  }
);
  myOptionsList.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      final ListModel model=myOptionsList.getModel();
      if (myCurrentSelection != -1 && myCurrentSelection < model.getSize()) {
        processListValueChanged((MyHighlightInfoTypeWithAtrributesDescription)model.getElementAt(myCurrentSelection),true);
      }
      final int index=myOptionsList.getSelectedIndex();
      if (index == -1) {
        myCurrentSelection=index;
      }
 else       if (myCurrentSelection != index) {
        processListValueChanged((MyHighlightInfoTypeWithAtrributesDescription)myOptionsList.getSelectedValue(),false);
        myCurrentSelection=index;
      }
    }
  }
);
  myOptionsList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  JScrollPane scrollPane=new JScrollPane(myOptionsList);
  scrollPane.setPreferredSize(new Dimension(230,60));
  JPanel leftPanel=new JPanel(new BorderLayout());
  leftPanel.add(scrollPane,BorderLayout.CENTER);
  leftPanel.add(createListToolbar(),BorderLayout.NORTH);
  myPanel=new JPanel(new BorderLayout());
  myPanel.add(leftPanel,BorderLayout.WEST);
  myPanel.add(myOptionsPanel,BorderLayout.CENTER);
  fillList(severity);
  init();
  setTitle(InspectionsBundle.message("severities.editor.dialog.title"));
}
