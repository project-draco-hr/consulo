{
  registrar.registerReferenceProvider(literalExpression().annotationParam(StandardPatterns.string().with(new PatternCondition<String>("isLanguageAnnotation"){
    @Override public boolean accepts(    @NotNull final String s,    final ProcessingContext context){
      return Comparing.equal(ANNOTATION_NAME.compute(),s);
    }
  }
),"value").and(literalExpression().with(new PatternCondition<PsiLiteralExpression>("isStringLiteral"){
    @Override public boolean accepts(    @NotNull final PsiLiteralExpression expression,    final ProcessingContext context){
      return PsiUtilEx.isStringOrCharacterLiteral(expression);
    }
  }
)),new PsiReferenceProvider(){
    @NotNull @Override public PsiReference[] getReferencesByElement(    @NotNull final PsiElement element,    @NotNull final ProcessingContext context){
      return new PsiReference[]{new LanguageReference((PsiLiteralExpression)element)};
    }
  }
);
  registrar.registerReferenceProvider(literalExpression().with(new PatternCondition<PsiLiteralExpression>("isStringLiteral"){
    @Override public boolean accepts(    @NotNull final PsiLiteralExpression expression,    final ProcessingContext context){
      return PsiUtilEx.isStringOrCharacterLiteral(expression);
    }
  }
),new PsiReferenceProvider(){
    @NotNull @Override public PsiReference[] getReferencesByElement(    @NotNull PsiElement psiElement,    @NotNull ProcessingContext context){
      final PsiLiteralExpression expression=(PsiLiteralExpression)psiElement;
      final PsiModifierListOwner owner=AnnotationUtilEx.getAnnotatedElementFor(expression,AnnotationUtilEx.LookupType.PREFER_DECLARATION);
      if (owner != null && PsiUtilEx.isLanguageAnnotationTarget(owner)) {
        final PsiAnnotation[] annotations=AnnotationUtilEx.getAnnotationFrom(owner,myConfig.getPatternAnnotationPair(),true);
        if (annotations.length > 0) {
          final String pattern=AnnotationUtilEx.calcAnnotationValue(annotations,"value");
          if (pattern != null) {
            return new PsiReference[]{new RegExpEnumReference(expression,pattern)};
          }
        }
      }
      return PsiReference.EMPTY_ARRAY;
    }
  }
);
}
