{
  myInitializer.accept(new PsiRecursiveElementVisitor(){
    public void visitReferenceExpression(    final PsiReferenceExpression expression){
      super.visitReferenceExpression(expression);
      final PsiElement element=expression.resolve();
      if (element instanceof PsiLocalVariable) {
        final PsiLocalVariable localVariable=(PsiLocalVariable)element;
        if (localReplacements.containsKey(localVariable))         return;
        final PsiElement[] elements=DefUseUtil.getDefs(myCallingMethod.getBody(),localVariable,expression);
        if (elements.length == 1) {
          PsiExpression localInitializer=null;
          if (elements[0] instanceof PsiLocalVariable) {
            localInitializer=((PsiLocalVariable)elements[0]).getInitializer();
          }
 else           if (elements[0] instanceof PsiAssignmentExpression) {
            localInitializer=((PsiAssignmentExpression)elements[0]).getRExpression();
          }
          if (localInitializer != null) {
            if (InlineToAnonymousConstructorProcessor.isConstant(localInitializer)) {
              localReplacements.put(localVariable,localInitializer);
            }
 else {
              final Map<PsiElement,PsiElement> elementsToReplace=new HashMap<PsiElement,PsiElement>();
              PsiExpression replacedInitializer=(PsiExpression)localInitializer.copy();
              if (replaceLocals(localReplacements,replacedInitializer,elementsToReplace)) {
                try {
                  replacedInitializer=(PsiExpression)RefactoringUtil.replaceElementsWithMap(replacedInitializer,elementsToReplace);
                }
 catch (                IncorrectOperationException e) {
                  LOG.error(e);
                }
                localReplacements.put(localVariable,replacedInitializer);
              }
            }
          }
        }
      }
    }
  }
);
}
