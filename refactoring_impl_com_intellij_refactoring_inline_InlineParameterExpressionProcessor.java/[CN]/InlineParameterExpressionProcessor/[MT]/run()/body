{
  int parameterIndex=myMethod.getParameterList().getParameterIndex(myParameter);
  final Map<PsiLocalVariable,PsiElement> localReplacements=new HashMap<PsiLocalVariable,PsiElement>();
  final PsiExpression[] arguments=myMethodCall.getArgumentList().getExpressions();
  for (int i=0; i < arguments.length; i++) {
    if (i != parameterIndex && arguments[i] instanceof PsiReferenceExpression) {
      final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)arguments[i];
      final PsiElement element=referenceExpression.resolve();
      if (element instanceof PsiLocalVariable) {
        final PsiParameter param=myMethod.getParameterList().getParameters()[i];
        final PsiExpression paramRef=myMethod.getManager().getElementFactory().createExpressionFromText(param.getName(),myMethod);
        localReplacements.put((PsiLocalVariable)element,paramRef);
      }
    }
  }
  processParameterInitializer(localReplacements);
  PsiExpression initializerInMethod=(PsiExpression)myInitializer.copy();
  final Map<PsiElement,PsiElement> elementsToReplace=new HashMap<PsiElement,PsiElement>();
  final boolean canEvaluate=replaceLocals(localReplacements,initializerInMethod,elementsToReplace);
  if (!canEvaluate) {
    CommonRefactoringUtil.showErrorMessage(RefactoringBundle.message("inline.parameter.refactoring"),"Parameter initializer depends on values which are not available inside the method and cannot be inlined",null,myMethod.getProject());
    return;
  }
  final Collection<PsiReference> parameterRefs=ReferencesSearch.search(myParameter).findAll();
  initializerInMethod=(PsiExpression)RefactoringUtil.replaceElementsWithMap(initializerInMethod,elementsToReplace);
  String question=RefactoringBundle.message("inline.parameter.confirmation",myParameter.getName(),initializerInMethod.getText());
  InlineParameterDialog dlg=new InlineParameterDialog(InlineParameterHandler.REFACTORING_NAME,question,HelpID.INLINE_VARIABLE,"OptionPane.questionIcon",true,myMethod.getProject());
  if (!dlg.showDialog()) {
    return;
  }
  performRefactoring(initializerInMethod,localReplacements,parameterRefs,dlg.isCreateLocal());
}
