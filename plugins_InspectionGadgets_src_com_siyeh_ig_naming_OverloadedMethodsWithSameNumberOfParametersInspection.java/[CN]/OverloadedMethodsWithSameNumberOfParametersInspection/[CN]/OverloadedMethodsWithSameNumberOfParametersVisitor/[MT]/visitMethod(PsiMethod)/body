{
  if (method.isConstructor()) {
    return;
  }
  if (method.getNameIdentifier() == null) {
    return;
  }
  final int parameterCount=calculateParameterCount(method);
  if (parameterCount == 0) {
    return;
  }
  final PsiClass aClass=method.getContainingClass();
  if (aClass == null) {
    return;
  }
  if (ignoreLibraryOverrides) {
    final PsiMethod[] superMethods=method.findSuperMethods();
    for (    PsiMethod superMethod : superMethods) {
      if (superMethod instanceof PsiCompiledElement) {
        return;
      }
    }
  }
  final String methodName=method.getName();
  final PsiMethod[] sameNameMethods=aClass.findMethodsByName(methodName,true);
  for (  PsiMethod sameNameMethod : sameNameMethods) {
    if (sameNameMethod.equals(method)) {
      continue;
    }
    final int testParameterCount=calculateParameterCount(sameNameMethod);
    if (parameterCount == testParameterCount) {
      registerMethodError(method);
      return;
    }
  }
}
