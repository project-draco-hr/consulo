{
  myProject=project;
  mySemService=SemService.getSemService(project);
  myConverterManager=(ConverterManagerImpl)ServiceManager.getService(ConverterManager.class);
  myApplicationComponent=DomApplicationComponent.getInstance();
  final PomModel pomModel=PomManager.getModel(project);
  pomModel.addModelListener(new PomModelListener(){
    public void modelChanged(    PomModelEvent event){
      final XmlChangeSet changeSet=(XmlChangeSet)event.getChangeSet(xmlAspect);
      if (changeSet != null && !myChanging) {
        for (        XmlFile file : changeSet.getChangedFiles()) {
          DomFileElementImpl<DomElement> element=getCachedFileElement(file);
          if (element != null) {
            fireEvent(new DomEvent(element,false));
          }
        }
      }
    }
    public boolean isAspectChangeInteresting(    PomModelAspect aspect){
      return xmlAspect.equals(aspect);
    }
  }
,project);
  myFileFactory=PsiFileFactory.getInstance(project);
  final PsiManager psiManager=PsiManager.getInstance(project);
  final Runnable setupVfsListeners=new Runnable(){
    public void run(){
      final VirtualFileAdapter listener=new VirtualFileAdapter(){
        private final List<DomEvent> myDeletionEvents=new SmartList<DomEvent>();
        public void contentsChanged(        VirtualFileEvent event){
          if (event.isFromSave())           return;
          processVfsChange(event.getFile());
        }
        public void fileCreated(        VirtualFileEvent event){
          processVfsChange(event.getFile());
        }
        public void beforeFileDeletion(        final VirtualFileEvent event){
          if (!project.isDisposed()) {
            beforeFileDeletion(event.getFile());
          }
        }
        private void beforeFileDeletion(        final VirtualFile file){
          if (file.isDirectory() && file instanceof NewVirtualFile) {
            for (            final VirtualFile child : ((NewVirtualFile)file).getCachedChildren()) {
              beforeFileDeletion(child);
            }
            return;
          }
          if (file.isValid() && StdFileTypes.XML.equals(file.getFileType())) {
            final PsiFile psiFile=getCachedPsiFile(file);
            if (psiFile instanceof XmlFile) {
              Collections.addAll(myDeletionEvents,recomputeFileElement((XmlFile)psiFile));
            }
          }
        }
        public void fileDeleted(        VirtualFileEvent event){
          if (!myDeletionEvents.isEmpty()) {
            if (!project.isDisposed()) {
              for (              DomEvent domEvent : myDeletionEvents) {
                fireEvent(domEvent);
              }
            }
            myDeletionEvents.clear();
          }
        }
        public void propertyChanged(        VirtualFilePropertyEvent event){
          final VirtualFile file=event.getFile();
          if (!file.isDirectory() && VirtualFile.PROP_NAME.equals(event.getPropertyName())) {
            processVfsChange(file);
          }
        }
      }
;
      VirtualFileManager.getInstance().addVirtualFileListener(listener,project);
    }
  }
;
  final StartupManager startupManager=StartupManager.getInstance(project);
  if (!((StartupManagerEx)startupManager).startupActivityPassed()) {
    startupManager.registerStartupActivity(setupVfsListeners);
  }
 else {
    setupVfsListeners.run();
  }
  myFileIndex=ProjectRootManager.getInstance(project).getFileIndex();
}
