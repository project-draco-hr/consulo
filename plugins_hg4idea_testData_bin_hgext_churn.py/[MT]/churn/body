def churn(ui, repo, *pats, **opts):
    "histogram of changes to the repository\n\n    This command will display a histogram representing the number\n    of changed lines or revisions, grouped according to the given\n    template. The default template will group changes by author.\n    The --dateformat option may be used to group the results by\n    date instead.\n\n    Statistics are based on the number of changed lines, or\n    alternatively the number of matching revisions if the\n    --changesets option is specified.\n\n    Examples::\n\n      # display count of changed lines for every committer\n      hg churn -t '{author|email}'\n\n      # display daily activity graph\n      hg churn -f '%H' -s -c\n\n      # display activity of developers by month\n      hg churn -f '%Y-%m' -s -c\n\n      # display count of lines changed in every year\n      hg churn -f '%Y' -s\n\n    It is possible to map alternate email addresses to a main address\n    by providing a file using the following format::\n\n      <alias email> <actual email>\n\n    Such a file may be specified with the --aliases option, otherwise\n    a .hgchurn file will be looked for in the working directory root.\n    "

    def pad(s, l):
        return (s + (' ' * l))[:l]
    amap = {}
    aliases = opts.get('aliases')
    if ((not aliases) and os.path.exists(repo.wjoin('.hgchurn'))):
        aliases = repo.wjoin('.hgchurn')
    if aliases:
        for l in open(aliases, 'r'):
            l = l.strip()
            (alias, actual) = l.split()
            amap[alias] = actual
    rate = countrate(ui, repo, amap, *pats, **opts).items()
    if (not rate):
        return
    sortkey = (((not opts.get('sort')) and (lambda x: (- sum(x[1])))) or None)
    rate.sort(key=sortkey)
    maxcount = (float(max((sum(v) for (k, v) in rate))) or 1.0)
    maxname = max((len(k) for (k, v) in rate))
    ttywidth = util.termwidth()
    ui.debug(('assuming %i character terminal\n' % ttywidth))
    width = ((((ttywidth - maxname) - 2) - 2) - 2)
    if opts.get('diffstat'):
        width -= 15

        def format(name, (added, removed)):
            return ('%s %15s %s%s\n' % (pad(name, maxname), ('+%d/-%d' % (added, removed)), ('+' * charnum(added)), ('-' * charnum(removed))))
    else:
        width -= 6

        def format(name, count):
            return ('%s %6d %s\n' % (pad(name, maxname), sum(count), ('*' * charnum(sum(count)))))

    def charnum(count):
        return int(round(((count * width) / maxcount)))
    for (name, count) in rate:
        ui.write(format(name, count))
