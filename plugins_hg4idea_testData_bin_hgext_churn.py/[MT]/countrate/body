def countrate(ui, repo, amap, *pats, **opts):
    'Calculate stats'
    if opts.get('dateformat'):

        def getkey(ctx):
            (t, tz) = ctx.date()
            date = datetime.datetime(*time.gmtime((float(t) - tz))[:6])
            return date.strftime(opts['dateformat'])
    else:
        tmpl = opts.get('template', '{author|email}')
        tmpl = maketemplater(ui, repo, tmpl)

        def getkey(ctx):
            ui.pushbuffer()
            tmpl.show(ctx)
            return ui.popbuffer()
    state = {'count': 0, 'pct': 0, }
    rate = {}
    df = False
    if opts.get('date'):
        df = util.matchdate(opts['date'])
    m = cmdutil.match(repo, pats, opts)

    def prep(ctx, fns):
        rev = ctx.rev()
        if (df and (not df(ctx.date()[0]))):
            return
        key = getkey(ctx)
        key = amap.get(key, key)
        if opts.get('changesets'):
            rate[key] = ((rate.get(key, (0,))[0] + 1), 0)
        else:
            parents = ctx.parents()
            if (len(parents) > 1):
                ui.note((_('Revision %d is a merge, ignoring...\n') % (rev,)))
                return
            ctx1 = parents[0]
            lines = changedlines(ui, repo, ctx1, ctx, fns)
            rate[key] = [(r + l) for (r, l) in zip(rate.get(key, (0, 0)), lines)]
        if opts.get('progress'):
            state['count'] += 1
            newpct = int(((100.0 * state['count']) / max(len(repo), 1)))
            if (state['pct'] < newpct):
                state['pct'] = newpct
                ui.write(('\r' + (_('generating stats: %d%%') % state['pct'])))
                sys.stdout.flush()
    for ctx in cmdutil.walkchangerevs(repo, m, opts, prep):
        continue
    if opts.get('progress'):
        ui.write('\r')
        sys.stdout.flush()
    return rate
