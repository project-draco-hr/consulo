{
  final IdeaTestFixtureFactory fixtureFactory=IdeaTestFixtureFactory.getFixtureFactory();
  myTempDirFixture=fixtureFactory.createTempDirTestFixture();
  myTempDirFixture.setUp();
  final File svnRoot=new File(myTempDirFixture.getTempDirPath(),"svnroot");
  svnRoot.mkdir();
  File pluginRoot=new File(PluginPathManager.getPluginHomePath("svn4idea"));
  if (!pluginRoot.isDirectory()) {
    Class aClass=SvnTestCase.class;
    String rootPath=PathManager.getResourceRoot(aClass,"/" + aClass.getName().replace('.','/') + ".class");
    pluginRoot=new File(rootPath).getParentFile().getParentFile().getParentFile();
  }
  myClientBinaryPath=new File(pluginRoot,"testData/svn/bin");
  ZipUtil.extract(new File(pluginRoot,"testData/svn/newrepo.zip"),svnRoot,null);
  myWcRoot=new File(myTempDirFixture.getTempDirPath(),"wcroot");
  myWcRoot.mkdir();
  myRepoUrl="file:///" + FileUtil.toSystemIndependentName(svnRoot.getPath());
  verify(runSvn("co",myRepoUrl,"."));
  initProject(myWcRoot);
  activateVCS(SvnVcs.VCS_NAME);
  myGate=new MockChangeListManagerGate(ChangeListManager.getInstance(myProject));
  myRefreshCopiesStub=new AtomicSectionsAware(){
    public void enter(){
    }
    public void exit(){
    }
    public boolean shouldExitAsap(){
      return false;
    }
    public void checkShouldExit() throws ProcessCanceledException {
    }
  }
;
  final SvnVcs vcs=SvnVcs.getInstance(myProject);
  ((StartupManagerImpl)StartupManager.getInstance(myProject)).runPostStartupActivities();
  ((SvnFileUrlMappingImpl)vcs.getSvnFileUrlMapping()).realRefresh(myRefreshCopiesStub);
  myChangeListManager=ChangeListManager.getInstance(myProject);
  VcsDirtyScopeManager.getInstance(myProject).markEverythingDirty();
  myChangeListManager.ensureUpToDate(false);
}
