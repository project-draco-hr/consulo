{
  System.setProperty("svnkit.wc.17","false");
  UIUtil.invokeAndWaitIfNeeded(new Runnable(){
    @Override public void run(){
      try {
        final IdeaTestFixtureFactory fixtureFactory=IdeaTestFixtureFactory.getFixtureFactory();
        myTempDirFixture=fixtureFactory.createTempDirTestFixture();
        myTempDirFixture.setUp();
        final File svnRoot=new File(myTempDirFixture.getTempDirPath(),"svnroot");
        svnRoot.mkdir();
        File pluginRoot=new File(PluginPathManager.getPluginHomePath("svn4idea"));
        if (!pluginRoot.isDirectory()) {
          Class aClass=SvnTestCase.class;
          String rootPath=PathManager.getResourceRoot(aClass,"/" + aClass.getName().replace('.','/') + ".class");
          pluginRoot=new File(rootPath).getParentFile().getParentFile().getParentFile();
        }
        myClientBinaryPath=new File(pluginRoot,"testData/svn/bin");
        ZipUtil.extract(new File(pluginRoot,"testData/svn/newrepo.zip"),svnRoot,null);
        myWcRoot=new File(myTempDirFixture.getTempDirPath(),"wcroot");
        myWcRoot.mkdir();
        myRepoUrl="file:///" + FileUtil.toSystemIndependentName(svnRoot.getPath());
        initProject(myWcRoot);
        activateVCS(SvnVcs.VCS_NAME);
        verify(runSvn("co",myRepoUrl,"."));
        myGate=new MockChangeListManagerGate(ChangeListManager.getInstance(myProject));
        myRefreshCopiesStub=new AtomicSectionsAware(){
          @Override public void enter(){
          }
          @Override public void exit(){
          }
          @Override public boolean shouldExitAsap(){
            return false;
          }
          @Override public void checkShouldExit() throws ProcessCanceledException {
          }
        }
;
        final SvnVcs vcs=SvnVcs.getInstance(myProject);
        ((StartupManagerImpl)StartupManager.getInstance(myProject)).runPostStartupActivities();
        ((SvnFileUrlMappingImpl)vcs.getSvnFileUrlMapping()).realRefresh();
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
);
  ChangeListManager changeListManager=ChangeListManager.getInstance(myProject);
  VcsDirtyScopeManager.getInstance(myProject).markEverythingDirty();
  changeListManager.ensureUpToDate(false);
}
