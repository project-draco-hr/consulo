{
  final PsiManager manager=place.getManager();
  for (  Map prop : data) {
    final PsiType type=convertToPsiType(String.valueOf(prop.get("type")),place);
    final String name=String.valueOf(prop.get("name"));
    final LightMethodBuilder method=new LightMethodBuilder(manager,GroovyFileType.GROOVY_LANGUAGE,name).addModifier(PsiModifier.PUBLIC).setReturnType(type);
    final Object params=prop.get("params");
    if (params instanceof Map) {
      for (      Object paramName : ((Map)params).keySet()) {
        method.addParameter(String.valueOf(paramName),convertToPsiType(String.valueOf(((Map)params).get(paramName)),place));
      }
    }
    if (Boolean.TRUE.equals(prop.get("isStatic"))) {
      method.addModifier(PsiModifier.STATIC);
    }
    final Object bindsTo=prop.get("bindsTo");
    if (bindsTo instanceof PsiElement) {
      method.setNavigationElement((PsiElement)bindsTo);
    }
    final Object toThrow=prop.get(CustomMembersGenerator.THROWS);
    if (toThrow instanceof List) {
      for (      Object o : ((List)toThrow)) {
        final PsiType psiType=convertToPsiType(String.valueOf(o),place);
        if (psiType instanceof PsiClassType) {
          method.addException((PsiClassType)psiType);
        }
      }
    }
    myMethods.add(method);
  }
}
