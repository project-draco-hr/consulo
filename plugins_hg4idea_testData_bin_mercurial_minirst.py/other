"simplified reStructuredText parser.\n\nThis parser knows just enough about reStructuredText to parse the\nMercurial docstrings.\n\nIt cheats in a major way: nested blocks are not really nested. They\nare just indented blocks that look like they are nested. This relies\non the user to keep the right indentation for the blocks.\n\nIt only supports a small subset of reStructuredText:\n\n- sections\n\n- paragraphs\n\n- literal blocks\n\n- definition lists\n\n- bullet lists (items must start with '-')\n\n- enumerated lists (no autonumbering)\n\n- field lists (colons cannot be escaped)\n\n- option lists (supports only long options without arguments)\n\n- inline literals (no other inline markup is not recognized)\n"
import re, sys, textwrap
_bulletre = re.compile('(-|[0-9A-Za-z]+\\.|\\(?[0-9A-Za-z]+\\)|\\|) ')
_optionre = re.compile('^(--[a-z-]+)((?:[ =][a-zA-Z][\\w-]*)?  +)(.*)$')
_fieldre = re.compile(':(?![: ])([^:]*)(?<! ):[ ]+(.*)')
_definitionre = re.compile('[^ ]')
_fieldwidth = 12
if (__name__ == '__main__'):
    from pprint import pprint

    def debug(func, *args):
        blocks = func(*args)
        print ('*** after %s:' % func.__name__)
        pprint(blocks)
        print 
        return blocks
    text = open(sys.argv[1]).read()
    blocks = debug(findblocks, text)
    blocks = debug(findliteralblocks, blocks)
    blocks = debug(prunecontainers, blocks, sys.argv[2:])
    blocks = debug(inlineliterals, blocks)
    blocks = debug(splitparagraphs, blocks)
    blocks = debug(updatefieldlists, blocks)
    blocks = debug(findsections, blocks)
    blocks = debug(addmargins, blocks)
    print '\n'.join((formatblock(b, 30) for b in blocks))
