def formatblock(block, width):
    'Format a block according to width.'
    if (width <= 0):
        width = 78
    indent = (' ' * block['indent'])
    if (block['type'] == 'margin'):
        return ''
    if (block['type'] == 'literal'):
        indent += '  '
        return (indent + ('\n' + indent).join(block['lines']))
    if (block['type'] == 'section'):
        return (indent + ('\n' + indent).join(block['lines']))
    if (block['type'] == 'definition'):
        term = (indent + block['lines'][0])
        hang = (len(block['lines'][(-1)]) - len(block['lines'][(-1)].lstrip()))
        defindent = (indent + (hang * ' '))
        text = ' '.join(map(str.strip, block['lines'][1:]))
        return ('%s\n%s' % (term, textwrap.fill(text, width=width, initial_indent=defindent, subsequent_indent=defindent)))
    initindent = subindent = indent
    if (block['type'] == 'bullet'):
        if block['lines'][0].startswith('| '):
            block['lines'][0] = block['lines'][0][2:]
        else:
            m = _bulletre.match(block['lines'][0])
            subindent = (indent + (m.end() * ' '))
    elif (block['type'] == 'field'):
        keywidth = block['keywidth']
        key = block['key']
        subindent = (indent + (_fieldwidth * ' '))
        if ((len(key) + 2) > _fieldwidth):
            key = key.ljust(width)
        elif ((keywidth + 2) < _fieldwidth):
            key = key.ljust((keywidth + 2))
            subindent = (indent + ((keywidth + 2) * ' '))
        else:
            key = key.ljust(_fieldwidth)
        block['lines'][0] = (key + block['lines'][0])
    elif (block['type'] == 'option'):
        m = _optionre.match(block['lines'][0])
        (option, arg, rest) = m.groups()
        subindent = (indent + ((len(option) + len(arg)) * ' '))
    text = ' '.join(map(str.strip, block['lines']))
    return textwrap.fill(text, width=width, initial_indent=initindent, subsequent_indent=subindent)
