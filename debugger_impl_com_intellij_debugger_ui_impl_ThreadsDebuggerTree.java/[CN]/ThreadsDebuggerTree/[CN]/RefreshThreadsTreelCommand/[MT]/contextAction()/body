{
  final DebuggerTreeNodeImpl root=getNodeFactory().getDefaultNode();
  final boolean showGroups=ThreadsViewSettings.getInstance().SHOW_THREAD_GROUPS;
  try {
    DebugProcessImpl debugProcess=getDebuggerContext().getDebugProcess();
    if (debugProcess == null || !debugProcess.isAttached()) {
      return;
    }
    final ThreadReferenceProxyImpl currentThread=ThreadsViewSettings.getInstance().SHOW_CURRENT_THREAD ? getSuspendContext().getThread() : null;
    final VirtualMachineProxyImpl vm=debugProcess.getVirtualMachineProxy();
    final EvaluationContextImpl evaluationContext=getDebuggerContext().createEvaluationContext();
    final NodeManagerImpl nodeManager=getNodeFactory();
    if (showGroups) {
      ThreadGroupReferenceProxyImpl topCurrentGroup=null;
      if (currentThread != null) {
        topCurrentGroup=currentThread.threadGroupProxy();
        if (topCurrentGroup != null) {
          for (ThreadGroupReferenceProxyImpl parentGroup=topCurrentGroup.parent(); parentGroup != null; parentGroup=parentGroup.parent()) {
            topCurrentGroup=parentGroup;
          }
        }
        if (topCurrentGroup != null) {
          root.add(nodeManager.createNode(nodeManager.getThreadGroupDescriptor(null,topCurrentGroup),evaluationContext));
        }
 else {
          root.add(nodeManager.createNode(nodeManager.getThreadDescriptor(null,currentThread),evaluationContext));
        }
      }
      for (      ThreadGroupReferenceProxyImpl group : vm.topLevelThreadGroups()) {
        if (group != topCurrentGroup) {
          DebuggerTreeNodeImpl threadGroup=nodeManager.createNode(nodeManager.getThreadGroupDescriptor(null,group),evaluationContext);
          root.add(threadGroup);
        }
      }
    }
 else {
      if (currentThread != null) {
        root.insert(nodeManager.createNode(nodeManager.getThreadDescriptor(null,currentThread),evaluationContext),0);
      }
      List<ThreadReferenceProxyImpl> allThreads=new ArrayList<ThreadReferenceProxyImpl>(vm.allThreads());
      Collections.sort(allThreads,ThreadReferenceProxyImpl.ourComparator);
      for (      ThreadReferenceProxyImpl threadProxy : allThreads) {
        if (threadProxy.equals(currentThread)) {
          continue;
        }
        root.add(nodeManager.createNode(nodeManager.getThreadDescriptor(null,threadProxy),evaluationContext));
      }
    }
  }
 catch (  Exception ex) {
    root.add(MessageDescriptor.DEBUG_INFO_UNAVAILABLE);
    if (LOG.isDebugEnabled()) {
      LOG.debug(ex);
    }
  }
  final ThreadReferenceProxyImpl thread=getSuspendContext().getThread();
  final boolean hasThreadToSelect=thread != null;
  final List<ThreadGroupReferenceProxyImpl> groups;
  if (hasThreadToSelect && showGroups) {
    groups=new ArrayList<ThreadGroupReferenceProxyImpl>();
    for (ThreadGroupReferenceProxyImpl group=thread.threadGroupProxy(); group != null; group=group.parent()) {
      groups.add(group);
    }
    Collections.reverse(groups);
  }
 else {
    groups=Collections.emptyList();
  }
  DebuggerInvocationUtil.swingInvokeLater(getProject(),new Runnable(){
    public void run(){
      getMutableModel().setRoot(root);
      treeChanged();
      if (hasThreadToSelect) {
        selectThread(groups,thread,true);
      }
    }
  }
);
}
