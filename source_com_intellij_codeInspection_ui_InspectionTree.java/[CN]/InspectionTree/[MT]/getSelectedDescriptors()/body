{
  final InspectionTool tool=getSelectedTool();
  if (getSelectionCount() == 0 || !(tool instanceof DescriptorProviderInspection))   return EMPTY_DESCRIPTORS;
  final TreePath[] paths=getSelectionPaths();
  Collection<RefElement> out=new ArrayList<RefElement>();
  Set<ProblemDescriptor> descriptors=new com.intellij.util.containers.HashSet<ProblemDescriptor>();
  for (  TreePath path : paths) {
    Object node=path.getLastPathComponent();
    if (node instanceof ProblemDescriptionNode) {
      final ProblemDescriptionNode problemNode=(ProblemDescriptionNode)node;
      descriptors.add(problemNode.getDescriptor());
    }
 else     if (node instanceof InspectionTreeNode) {
      addElementsInNode((InspectionTreeNode)node,out);
    }
  }
  for (  RefElement refElement : out) {
    final ProblemDescriptor[] descriptions=((DescriptorProviderInspection)tool).getDescriptions(refElement);
    if (descriptions != null) {
      descriptors.addAll(Arrays.asList(descriptions));
    }
  }
  return descriptors.toArray(new ProblemDescriptor[descriptors.size()]);
}
