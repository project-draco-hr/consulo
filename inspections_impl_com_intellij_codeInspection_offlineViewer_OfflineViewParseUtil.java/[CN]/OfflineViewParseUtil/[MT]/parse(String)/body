{
  final TObjectIntHashMap<String> fqName2IdxMap=new TObjectIntHashMap<String>();
  final Map<String,Set<OfflineProblemDescriptor>> package2Result=new THashMap<String,Set<OfflineProblemDescriptor>>();
  final XppReader reader=new XppReader(new StringReader(problems));
  try {
    while (reader.hasMoreChildren()) {
      reader.moveDown();
      final OfflineProblemDescriptor descriptor=new OfflineProblemDescriptor();
      while (reader.hasMoreChildren()) {
        reader.moveDown();
        if (SmartRefElementPointerImpl.ENTRY_POINT.equals(reader.getNodeName())) {
          descriptor.setType(reader.getAttribute(SmartRefElementPointerImpl.TYPE_ATTR));
          descriptor.setFQName(reader.getAttribute(SmartRefElementPointerImpl.FQNAME_ATTR));
          final List<String> parentTypes=new ArrayList<String>();
          final List<String> parentNames=new ArrayList<String>();
          int deep=0;
          while (true) {
            if (reader.hasMoreChildren()) {
              reader.moveDown();
              parentTypes.add(reader.getAttribute(SmartRefElementPointerImpl.TYPE_ATTR));
              parentNames.add(reader.getAttribute(SmartRefElementPointerImpl.FQNAME_ATTR));
              deep++;
            }
 else {
              while (deep-- > 0) {
                reader.moveUp();
              }
              break;
            }
          }
          if (!parentTypes.isEmpty() && !parentNames.isEmpty()) {
            descriptor.setParentType(parentTypes.toArray(new String[parentTypes.size()]));
            descriptor.setParentFQName(parentNames.toArray(new String[parentNames.size()]));
          }
        }
        if (DESCRIPTION.equals(reader.getNodeName())) {
          descriptor.setDescription(reader.getValue());
        }
        if (LINE.equals(reader.getNodeName())) {
          descriptor.setLine(Integer.parseInt(reader.getValue()));
        }
        if (MODULE.equals(reader.getNodeName())) {
          descriptor.setModule(reader.getValue());
        }
        if (HINTS.equals(reader.getNodeName())) {
          while (reader.hasMoreChildren()) {
            reader.moveDown();
            List<String> hints=descriptor.getHints();
            if (hints == null) {
              hints=new ArrayList<String>();
              descriptor.setHints(hints);
            }
            hints.add(reader.getValue());
            reader.moveUp();
          }
        }
        if (PACKAGE.equals(reader.getNodeName())) {
          appendDescriptor(package2Result,reader.getValue(),descriptor);
        }
        while (reader.hasMoreChildren()) {
          reader.moveDown();
          if (PACKAGE.equals(reader.getNodeName())) {
            appendDescriptor(package2Result,reader.getValue(),descriptor);
          }
          reader.moveUp();
        }
        reader.moveUp();
      }
      final String fqName=descriptor.getFQName();
      if (!fqName2IdxMap.containsKey(fqName)) {
        fqName2IdxMap.put(fqName,0);
      }
      int idx=fqName2IdxMap.get(fqName);
      descriptor.setProblemIndex(idx);
      fqName2IdxMap.put(fqName,idx + 1);
      reader.moveUp();
    }
  }
  finally {
    reader.close();
  }
  return package2Result;
}
