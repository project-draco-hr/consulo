{
  final ArrayList<Object> pathsToExpand=new ArrayList<Object>();
  final ArrayList<Object> selectionPaths=new ArrayList<Object>();
  Runnable afterUpdate;
  final ActionCallback cb=new ActionCallback();
  if (restoreExpandedPaths) {
    TreeBuilderUtil.storePaths(getTreeBuilder(),(DefaultMutableTreeNode)myTree.getModel().getRoot(),pathsToExpand,selectionPaths,true);
    afterUpdate=new Runnable(){
      @Override public void run(){
        if (myTree != null && getTreeBuilder() != null && !getTreeBuilder().isDisposed()) {
          myTree.setSelectionPaths(new TreePath[0]);
          TreeBuilderUtil.restorePaths(getTreeBuilder(),pathsToExpand,selectionPaths,true);
        }
        cb.setDone();
      }
    }
;
  }
 else {
    afterUpdate=cb.createSetDoneRunnable();
  }
  if (getTreeBuilder() != null) {
    getTreeBuilder().addSubtreeToUpdate(getTreeBuilder().getRootNode(),afterUpdate);
  }
  return cb;
}
