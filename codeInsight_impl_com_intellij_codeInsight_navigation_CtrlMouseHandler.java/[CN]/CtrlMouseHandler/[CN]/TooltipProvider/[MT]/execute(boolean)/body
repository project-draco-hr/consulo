{
  myBrowseType=browseType;
  Info info=getInfoAt(myEditor,myPosition,myBrowseType);
  if (info == null)   return;
  Component internalComponent=myEditor.getContentComponent();
  if (myHighlighter != null) {
    if (!Comparing.equal(info.myElementAtPointer,myStoredInfo.myElementAtPointer) || info.myStartOffset != myStoredInfo.myStartOffset || info.myEndOffset != myStoredInfo.myEndOffset) {
      disposeHighlighter();
    }
 else {
      internalComponent.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
      return;
    }
  }
  if (info.myTargetElement != null && info.myElementAtPointer != null && info.myTargetElement != info.myElementAtPointer && info.myTargetElement != info.myElementAtPointer.getParent()) {
    if (targetNavigateable(info.myTargetElement)) {
      installLinkHighlighter(info);
    }
    myStoredCursor=internalComponent.getCursor();
    myStoredInfo=info;
    String text=JavaInfoGenerator.generateInfo(info.myTargetElement);
    if (text == null)     return;
    internalComponent.addKeyListener(myEditorKeyListener);
    myEditor.getScrollingModel().addVisibleAreaListener(myVisibleAreaListener);
    internalComponent.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    FileEditorManager.getInstance(myProject).addFileEditorManagerListener(myFileEditorManagerListener);
    JLabel label=HintUtil.createInformationLabel(text);
    label.setUI(new MultiLineLabelUI());
    Font FONT=UIUtil.getLabelFont();
    label.setFont(FONT);
    final LightweightHint hint=new LightweightHint(label);
    final HintManager hintManager=HintManager.getInstance();
    label.addMouseMotionListener(new MouseMotionAdapter(){
      public void mouseMoved(      MouseEvent e){
        hintManager.hideAllHints();
      }
    }
);
    Point p=hintManager.getHintPosition(hint,myEditor,myPosition,HintManager.ABOVE);
    hintManager.showEditorHint(hint,myEditor,p,HintManager.HIDE_BY_ANY_KEY | HintManager.HIDE_BY_TEXT_CHANGE | HintManager.HIDE_BY_SCROLLING,0,false);
  }
}
