{
  final PsiFile file=PsiDocumentManager.getInstance(myProject).getPsiFile(myDocument);
  if (file != null) {
    CodeStyleManager codeStyleManager=CodeStyleManager.getInstance(myProject);
    if (myTemplate.isToShortenLongNames()) {
      try {
        toProcessChangedUpdate=false;
        PsiDocumentManager.getInstance(myProject).commitDocument(myDocument);
        codeStyleManager.shortenClassReferences(file,myTemplateRange.getStartOffset(),myTemplateRange.getEndOffset());
        toProcessChangedUpdate=true;
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
    }
    if (myTemplate.isToReformat()) {
      try {
        toProcessChangedUpdate=false;
        PsiDocumentManager.getInstance(myProject).commitDocument(myDocument);
        int endSegmentNumber=myTemplate.getEndSegmentNumber();
        PsiElement marker=null;
        if (endSegmentNumber >= 0) {
          int endVarOffset=mySegments.getSegmentStart(endSegmentNumber);
          marker=codeStyleManager.insertNewLineIndentMarker(file,endVarOffset);
        }
        codeStyleManager.reformatRange(file,myTemplateRange.getStartOffset(),myTemplateRange.getEndOffset(),true);
        if (marker != null && marker.isValid()) {
          TextRange range=marker.getTextRange();
          mySegments.replaceSegmentAt(endSegmentNumber,range.getStartOffset(),range.getEndOffset());
          myDocument.deleteString(range.getStartOffset(),range.getEndOffset());
        }
        toProcessChangedUpdate=true;
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
    }
 else     if (myTemplate.isToIndent()) {
      if (!myTemplateIndented) {
        smartIndent(myTemplateRange.getStartOffset(),myTemplateRange.getEndOffset());
        myTemplateIndented=true;
      }
    }
  }
}
