{
  super(new BorderLayout());
  myOptions=options;
  mySchemesProvider=schemesProvider;
  myCategoryName=categoryName;
  optionsPanel.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      myDispatcher.getMulticaster().settingsChanged();
    }
  }
);
  myOptionsList=new JBList();
  myOptionsList.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      if (!mySchemesProvider.areSchemesLoaded())       return;
      processListValueChanged();
    }
  }
);
  myOptionsList.setCellRenderer(new DefaultListCellRenderer(){
    public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean isSelected,    boolean cellHasFocus){
      Component component=super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
      if (value instanceof ColorAndFontDescription) {
        setIcon(((ColorAndFontDescription)value).getIcon());
        setToolTipText(((ColorAndFontDescription)value).getToolTip());
      }
      return component;
    }
  }
);
  myOptionsList.setModel(new DefaultListModel());
  myOptionsList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  JScrollPane scrollPane=new JScrollPane(myOptionsList);
  scrollPane.setPreferredSize(new Dimension(230,60));
  JPanel north=new JPanel(new BorderLayout());
  north.add(scrollPane,BorderLayout.WEST);
  north.add(optionsPanel,BorderLayout.CENTER);
  myOptionsPanel=optionsPanel;
  add(north,BorderLayout.NORTH);
}
