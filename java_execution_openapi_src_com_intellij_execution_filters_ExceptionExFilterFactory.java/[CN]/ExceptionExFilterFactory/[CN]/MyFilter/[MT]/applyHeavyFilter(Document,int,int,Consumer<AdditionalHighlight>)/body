{
  Map<String,Trinity<TextRange,TextRange,TextRange>> visited=new THashMap<String,Trinity<TextRange,TextRange,TextRange>>();
  final Trinity<TextRange,TextRange,TextRange> emptyInfo=Trinity.create(null,null,null);
  final ExceptionWorker worker=new ExceptionWorker(myScope.getProject(),myScope);
  for (int i=0; i < copiedFragment.getLineCount(); i++) {
    final int lineStartOffset=copiedFragment.getLineStartOffset(i);
    final int lineEndOffset=copiedFragment.getLineEndOffset(i);
    String text=copiedFragment.getText(new TextRange(lineStartOffset,lineEndOffset));
    if (!text.contains(".java:"))     continue;
    Trinity<TextRange,TextRange,TextRange> info=visited.get(text);
    if (info == emptyInfo)     continue;
    if (info == null) {
      info=emptyInfo;
      AccessToken token=ApplicationManager.getApplication().acquireReadActionLock();
      try {
        worker.execute(text,lineEndOffset);
        Result result=worker.getResult();
        if (result == null)         continue;
        int offset=result.hyperlinkInfo instanceof OpenFileHyperlinkInfo ? ((OpenFileHyperlinkInfo)result.hyperlinkInfo).getDescriptor().getOffset() : -1;
        PsiFile psiFile=worker.getFile();
        if (offset <= 0 || psiFile == null)         continue;
        PsiElement element=psiFile.findElementAt(offset);
        PsiTryStatement parent=PsiTreeUtil.getParentOfType(element,PsiTryStatement.class,true,PsiClass.class);
        PsiCodeBlock tryBlock=parent != null ? parent.getTryBlock() : null;
        if (tryBlock == null || !tryBlock.getTextRange().contains(offset))         continue;
        info=worker.getInfo();
      }
  finally {
        token.finish();
        visited.put(text,info);
      }
    }
    int off=startOffset + lineStartOffset;
    final Color color=UIUtil.getInactiveTextColor();
    consumer.consume(new AdditionalHighlight(off + info.first.getStartOffset(),off + info.second.getEndOffset()){
      @Override public TextAttributes getTextAttributes(      @Nullable TextAttributes source){
        return new TextAttributes(null,null,color,EffectType.BOLD_DOTTED_LINE,Font.PLAIN);
      }
    }
);
  }
}
