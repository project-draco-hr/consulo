{
  GridBagConstraints gbConstraints=new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,0,0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0);
  JPanel panel=new JPanel(new GridBagLayout());
  myCbFinal=new StateRestoringCheckBox();
  myCbFinal.setFocusable(false);
  myCbFinal.setText(RefactoringBundle.message("declare.final"));
  myCbFinal.addItemListener(itemListener);
  gbConstraints.gridy++;
  panel.add(myCbFinal,gbConstraints);
  if (myOccurrencesCount > 1) {
    myCbReplaceAll=new NonFocusableCheckBox();
    myCbReplaceAll.setText(RefactoringBundle.message("replace.all.occurrences.of.expression.0.occurrences",myOccurrencesCount));
    gbConstraints.gridy++;
    panel.add(myCbReplaceAll,gbConstraints);
    myCbReplaceAll.addItemListener(itemListener);
    if (myIsInvokedOnDeclaration) {
      myCbReplaceAll.setEnabled(false);
      myCbReplaceAll.setSelected(true);
    }
  }
  if (myLocalVariable != null) {
    gbConstraints.gridy++;
    if (myCbReplaceAll != null) {
      gbConstraints.insets=new Insets(0,8,0,0);
    }
    myCbDeleteVariable=new StateRestoringCheckBox();
    myCbDeleteVariable.setText(RefactoringBundle.message("delete.variable.declaration"));
    panel.add(myCbDeleteVariable,gbConstraints);
    if (myIsInvokedOnDeclaration) {
      myCbDeleteVariable.setEnabled(false);
      myCbDeleteVariable.setSelected(true);
    }
 else     if (myCbReplaceAll != null) {
      updateCbDeleteVariable();
      myCbReplaceAll.addItemListener(new ItemListener(){
        public void itemStateChanged(        ItemEvent e){
          updateCbDeleteVariable();
        }
      }
);
    }
  }
  return panel;
}
