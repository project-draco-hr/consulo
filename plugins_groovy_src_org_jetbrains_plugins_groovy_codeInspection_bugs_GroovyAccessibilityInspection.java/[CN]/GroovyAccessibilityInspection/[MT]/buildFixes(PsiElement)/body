{
  if (!(location instanceof GrReferenceElement || location instanceof GrConstructorCall)) {
    location=location.getParent();
  }
  final GroovyResolveResult resolveResult;
  if (location instanceof GrConstructorCall) {
    resolveResult=((GrConstructorCall)location).advancedResolve();
  }
 else {
    resolveResult=((GrReferenceElement)location).advancedResolve();
  }
  final PsiElement element=resolveResult.getElement();
  if (!(element instanceof PsiMember))   return GroovyFix.EMPTY_ARRAY;
  final PsiMember refElement=(PsiMember)element;
  if (refElement instanceof PsiCompiledElement)   return GroovyFix.EMPTY_ARRAY;
  PsiModifierList modifierList=refElement.getModifierList();
  if (modifierList == null)   return GroovyFix.EMPTY_ARRAY;
  List<GroovyFix> fixes=new ArrayList<GroovyFix>();
  try {
    Project project=refElement.getProject();
    JavaPsiFacade facade=JavaPsiFacade.getInstance(project);
    PsiModifierList modifierListCopy=facade.getElementFactory().createFieldFromText("int a;",null).getModifierList();
    modifierListCopy.setModifierProperty(PsiModifier.STATIC,modifierList.hasModifierProperty(PsiModifier.STATIC));
    String minModifier=PsiModifier.PROTECTED;
    if (refElement.hasModifierProperty(PsiModifier.PROTECTED)) {
      minModifier=PsiModifier.PUBLIC;
    }
    String[] modifiers={PsiModifier.PROTECTED,PsiModifier.PUBLIC,PsiModifier.PACKAGE_LOCAL};
    PsiClass accessObjectClass=PsiTreeUtil.getParentOfType(location,PsiClass.class,false);
    if (accessObjectClass == null) {
      final PsiFile file=location.getContainingFile();
      if (!(file instanceof GroovyFile))       return GroovyFix.EMPTY_ARRAY;
      accessObjectClass=((GroovyFile)file).getScriptClass();
    }
    for (int i=ArrayUtil.indexOf(modifiers,minModifier); i < modifiers.length; i++) {
      String modifier=modifiers[i];
      modifierListCopy.setModifierProperty(modifier,true);
      if (facade.getResolveHelper().isAccessible(refElement,modifierListCopy,location,accessObjectClass,null)) {
        fixes.add(new GrModifierFix(refElement,refElement.getModifierList(),modifier,true));
      }
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
  return fixes.toArray(new GroovyFix[fixes.size()]);
}
