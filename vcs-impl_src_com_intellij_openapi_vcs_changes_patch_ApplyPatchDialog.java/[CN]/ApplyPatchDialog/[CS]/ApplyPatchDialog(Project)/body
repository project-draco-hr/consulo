{
  super(project,true);
  myProject=project;
  setTitle(VcsBundle.message("patch.apply.dialog.title"));
  final FileChooserDescriptor descriptor=new FileChooserDescriptor(true,false,false,false,false,false){
    @Override public boolean isFileSelectable(    VirtualFile file){
      return file.getFileType() == StdFileTypes.PATCH || file.getFileType() == FileTypes.PLAIN_TEXT;
    }
  }
;
  myMoveRenameInfo=new HashMap<Pair<String,String>,String>();
  myFileNameField.addBrowseFolderListener(VcsBundle.message("patch.apply.select.title"),"",project,descriptor);
  myFileNameField.getTextField().getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    DocumentEvent e){
      updateOKAction();
      myStatusLabel.setForeground(UIUtil.getLabelForeground());
      myStatusLabel.setText(VcsBundle.message("patch.load.progress"));
      myPatches=null;
      myMoveRenameInfo.clear();
      myLoadPatchAlarm.cancelAllRequests();
      myLoadPatchAlarm.addRequest(new Runnable(){
        public void run(){
          checkLoadPatches(true);
        }
      }
,400);
    }
  }
);
  myBaseDirectoryField.setText(project.getBaseDir().getPresentableUrl());
  myBaseDirectoryField.addBrowseFolderListener(VcsBundle.message("patch.apply.select.base.directory.title"),"",project,new FileChooserDescriptor(false,true,false,false,false,false));
  myBaseDirectoryField.getTextField().getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    final DocumentEvent e){
      if (!myInnerChange) {
        queueVerifyPatchPaths();
      }
    }
  }
);
  myStripLeadingDirectoriesSpinner.setModel(new SpinnerNumberModel(0,0,256,1));
  myStripLeadingDirectoriesSpinner.addChangeListener(new ChangeListener(){
    public void stateChanged(    final ChangeEvent e){
      if (!myInnerChange) {
        queueVerifyPatchPaths();
      }
    }
  }
);
  myPatchContentsList.setCellRenderer(new PatchCellRendererPanel());
  ChangeListManager changeListManager=ChangeListManager.getInstance(project);
  myChangeListChooser.setChangeLists(changeListManager.getChangeListsCopy());
  myChangeListChooser.setDefaultSelection(changeListManager.getDefaultChangeList());
  init();
  updateOKAction();
  myShowDiffButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      showDiff();
    }
  }
);
  myPatchContentsList.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    final MouseEvent e){
      if (e.getButton() == 1 && e.getClickCount() == 2) {
        showDiff();
      }
    }
  }
);
  new AnAction(){
    @Override public void actionPerformed(    AnActionEvent e){
      showDiff();
    }
  }
.registerCustomShortcutSet(CommonShortcuts.getDiff(),myRootPanel,myDisposable);
}
