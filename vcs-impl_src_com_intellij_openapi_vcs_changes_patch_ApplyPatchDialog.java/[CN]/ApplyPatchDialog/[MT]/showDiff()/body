{
  List<Change> changes=new ArrayList<Change>();
  ApplyPatchContext context=getApplyPatchContext().getPrepareContext();
  Object[] selection=myPatchContentsList.getSelectedValues();
  if (selection.length == 0) {
    if (myPatches == null)     return;
    selection=ArrayUtil.toObjectArray(myPatches);
  }
  for (  Object o : selection) {
    final TextFilePatch patch=(TextFilePatch)o;
    try {
      if (patch.isNewFile()) {
        final FilePath newFilePath=FilePathImpl.createNonLocal(patch.getAfterName(),false);
        final String content=patch.getNewFileText();
        ContentRevision revision=new SimpleContentRevision(content,newFilePath,patch.getAfterVersionId());
        changes.add(new Change(null,revision));
      }
 else       if ((!patch.isDeletedFile()) && (patch.getBeforeName() != null) && (patch.getAfterName() != null)&& (!patch.getBeforeName().equals(patch.getAfterName()))) {
        final VirtualFile baseDirectory=getBaseDirectory();
        final VirtualFile beforeFile=PatchApplier.getFile(baseDirectory,patch.getBeforeName());
        if (beforeFile != null) {
          final List<String> tail=new ArrayList<String>();
          final VirtualFile partFile=PatchApplier.getFile(baseDirectory,patch.getAfterName(),tail);
          final StringBuilder sb=new StringBuilder(partFile.getPath());
          for (          String s : tail) {
            if (sb.charAt(sb.length() - 1) != '/') {
              sb.append('/');
            }
            sb.append(s);
          }
          final Change change=changeForPath(beforeFile,patch,FilePathImpl.createNonLocal(FileUtil.toSystemIndependentName(sb.toString()),false));
          if (change != null) {
            changes.add(change);
          }
        }
 else {
          Messages.showErrorDialog(myProject,"Cannot show difference: cannot find file " + patch.getBeforeName(),VcsBundle.message("patch.apply.dialog.title"));
        }
      }
 else {
        final VirtualFile fileToPatch=patch.findFileToPatch(context);
        if (fileToPatch != null) {
          final FilePathImpl filePath=new FilePathImpl(fileToPatch);
          final CurrentContentRevision currentRevision=new CurrentContentRevision(filePath);
          if (patch.isDeletedFile()) {
            changes.add(new Change(currentRevision,null));
          }
 else {
            final Change change=changeForPath(fileToPatch,patch,null);
            if (change != null) {
              changes.add(change);
            }
          }
        }
      }
    }
 catch (    Exception e) {
      Messages.showErrorDialog(myProject,"Error loading changes for " + patch.getAfterFileName() + ": "+ e.getMessage(),VcsBundle.message("patch.apply.dialog.title"));
      return;
    }
  }
  if (changes.size() > 0) {
    ShowDiffAction.showDiffForChange(changes.toArray(new Change[changes.size()]),0,myProject,ShowDiffAction.DiffExtendUIFactory.NONE,false);
  }
}
