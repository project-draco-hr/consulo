{
  final ModuleRootManager rootManager=ModuleRootManager.getInstance(myModule);
  final ModifiableRootModel rootModel=rootManager.getModifiableModel();
  rootModel.inheritSdk();
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      rootModel.commit();
    }
  }
);
  assertTrue("JDK is inherited after inheritSdk()",rootManager.isSdkInherited());
  assertTrue("No JDK assigned",null == rootManager.getSdk());
  final Sdk mockJdk=JavaSdkImpl.getMockJdk("mock 1.4");
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      ProjectJdkTable.getInstance().addJdk(mockJdk);
    }
  }
);
  final ProjectRootManagerEx projectRootManager=ProjectRootManagerEx.getInstanceEx(myProject);
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      projectRootManager.setProjectJdk(mockJdk);
    }
  }
);
  assertTrue(rootManager.isSdkInherited());
  assertTrue("mockJdk inherited",mockJdk.equals(rootManager.getSdk()));
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      projectRootManager.setProjectJdkName("jdk1");
    }
  }
);
  assertTrue(rootManager.isSdkInherited());
  Assert.assertEquals("Correct non-existing JDK inherited","jdk1",rootManager.processOrder(new RootPolicy<String>(){
    public String visitInheritedJdkOrderEntry(    InheritedJdkOrderEntry inheritedJdkOrderEntry,    String s){
      return inheritedJdkOrderEntry.getJdkName();
    }
  }
,null));
  assertNull("Non-existing JDK",rootManager.getSdk());
  final Sdk jdk1=JavaSdkImpl.getMockJdk("jdk1");
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      ProjectJdkTable.getInstance().addJdk(jdk1);
    }
  }
);
  assertTrue(rootManager.isSdkInherited());
  assertNotNull("JDK appeared",rootManager.getSdk());
  assertTrue("jdk1 found",jdk1.equals(rootManager.getSdk()));
}
