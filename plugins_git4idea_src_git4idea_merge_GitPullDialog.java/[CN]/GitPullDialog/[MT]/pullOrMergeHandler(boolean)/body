{
  GitLineHandler h=new GitLineHandler(myProject,gitRoot(),pull ? GitCommand.PULL : GitCommand.MERGE);
  h.ignoreErrorCode(1);
  if (pull) {
    h.setRemoteProtocol(GitRemoteProtocol.SSH);
    h.addProgressParameter();
  }
  h.addParameters("--no-stat");
  if (myNoCommitCheckBox.isSelected()) {
    h.addParameters("--no-commit");
  }
 else {
    if (myAddLogInformationCheckBox.isSelected()) {
      h.addParameters("--log");
    }
  }
  if (mySquashCommitCheckBox.isSelected()) {
    h.addParameters("--squash");
  }
  if (myNoFastForwardCheckBox.isSelected()) {
    h.addParameters("--no-ff");
  }
  String strategy=(String)myStrategy.getSelectedItem();
  if (!GitMergeUtil.DEFAULT_STRATEGY.equals(strategy)) {
    h.addParameters("--strategy",strategy);
  }
  h.addParameters("-v");
  if (pull) {
    h.addProgressParameter();
  }
  final List<String> markedBranches=myBranchChooser.getMarkedElements();
  String remote=getRemote();
  LOG.assertTrue(remote != null,"Selected remote can't be null here.");
  if (pull) {
    h.addParameters(remote);
    for (    String branch : markedBranches) {
      h.addParameters(removeRemotePrefix(branch,remote));
    }
  }
 else {
    for (    String branch : markedBranches) {
      h.addParameters(branch);
    }
  }
  return h;
}
