{
  String selectedRemote=getRemote();
  myBranchChooser.removeAllElements();
  if (selectedRemote == null) {
    return;
  }
  GitRepository repository=getRepository();
  if (repository == null) {
    return;
  }
  GitBranchTrackInfo trackInfo=GitUtil.getTrackInfoForCurrentBranch(repository);
  String currentRemoteBranch=trackInfo == null ? null : trackInfo.getRemoteBranch().getNameForLocalOperations();
  List<GitRemoteBranch> remoteBranches=new ArrayList<GitRemoteBranch>(repository.getBranches().getRemoteBranches());
  Collections.sort(remoteBranches);
  for (  GitBranch remoteBranch : remoteBranches) {
    if (belongsToRemote(remoteBranch,selectedRemote)) {
      myBranchChooser.addElement(remoteBranch.getName(),remoteBranch.getName().equals(currentRemoteBranch));
    }
  }
  validateDialog();
}
