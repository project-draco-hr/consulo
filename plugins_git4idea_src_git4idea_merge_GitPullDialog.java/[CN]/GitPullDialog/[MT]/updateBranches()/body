{
  try {
    String item=getRemote();
    myBranchChooser.removeAllElements();
    GitDeprecatedRemote r=null;
    final int count=myRemote.getItemCount();
    for (int i=0; i < count; i++) {
      GitDeprecatedRemote candidate=(GitDeprecatedRemote)myRemote.getItemAt(i);
      if (candidate.name().equals(item)) {
        r=candidate;
        break;
      }
    }
    if (r == null) {
      return;
    }
    GitDeprecatedRemote.Info ri=r.localInfo(myProject,gitRoot());
    String toSelect=ri.getRemoteForLocal(currentBranch());
    for (    String trackedBranch : ri.trackedBranches()) {
      myBranchChooser.addElement(trackedBranch,trackedBranch.equals(toSelect));
    }
  }
 catch (  VcsException e) {
    GitVcs.getInstance(myProject).showErrors(Collections.singletonList(e),GitBundle.getString("pull.retrieving.remotes"));
  }
 finally {
    validateDialog();
  }
}
