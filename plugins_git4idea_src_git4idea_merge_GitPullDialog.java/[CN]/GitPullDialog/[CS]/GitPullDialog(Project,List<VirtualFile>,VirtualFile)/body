{
  super(project,true);
  setTitle(GitBundle.getString("pull.title"));
  myProject=project;
  GitUIUtil.setupRootChooser(myProject,roots,defaultRoot,myGitRoot,myCurrentBranch);
  myGitRoot.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      updateRemotes();
    }
  }
);
  setOKButtonText(GitBundle.getString("pull.button"));
  updateRemotes();
  setupBranches();
  setupGetBranches();
  final ElementsChooser.ElementsMarkListener<String> listener=new ElementsChooser.ElementsMarkListener<String>(){
    public void elementMarkChanged(    final String element,    final boolean isMarked){
      validateDialog();
    }
  }
;
  myBranchChooser.addElementsMarkListener(listener);
  listener.elementMarkChanged(null,true);
  GitUIUtil.imply(mySquashCommitCheckBox,true,myNoCommitCheckBox,true);
  GitUIUtil.exclusive(mySquashCommitCheckBox,true,myNoFastForwardCheckBox,true);
  GitMergeUtil.setupStrategies(myBranchChooser,myStrategy);
  init();
}
