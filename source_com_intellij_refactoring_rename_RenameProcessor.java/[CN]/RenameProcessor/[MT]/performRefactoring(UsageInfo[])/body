{
  List<Pair<String,RefactoringElementListener>> listenersForPackages=new ArrayList<Pair<String,RefactoringElementListener>>();
  for (  Map.Entry<PsiElement,String> entry : myAllRenames.entrySet()) {
    PsiElement element=entry.getKey();
    String newName=entry.getValue();
    if (newName != null) {
      final RefactoringElementListener elementListener=getTransaction().getElementListener(element);
      RenameUtil.doRename(element,newName,extractUsagesForElement(element,usages),myProject,elementListener);
      if (element instanceof PsiPackage) {
        final PsiPackage psiPackage=(PsiPackage)element;
        final String newQualifiedName=RenameUtil.getQualifiedNameAfterRename(psiPackage.getQualifiedName(),newName);
        listenersForPackages.add(Pair.create(newQualifiedName,elementListener));
      }
    }
  }
  final PsiManager psiManager=PsiManager.getInstance(myProject);
  for (int i=0; i < listenersForPackages.size(); i++) {
    Pair<String,RefactoringElementListener> pair=listenersForPackages.get(i);
    final PsiPackage aPackage=psiManager.findPackage(pair.getFirst());
    LOG.assertTrue(aPackage != null);
    pair.getSecond().elementRenamed(aPackage);
  }
  final UsageInfo[] usagesForNonCodeRenaming;
  usagesForNonCodeRenaming=usages;
  myUsagesForNonCodeRenaming=usagesForNonCodeRenaming;
}
