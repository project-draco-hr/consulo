{
  HashSet<XmlTag> xmlTagsSet=new HashSet<XmlTag>();
  ArrayList<UsageInfo> specialRenaming=findXmlTags(usages,xmlTagsSet);
  List<Pair<String,RefactoringElementListener>> listenersForPackages=new ArrayList<Pair<String,RefactoringElementListener>>();
  for (int i=0; i < myElements.size(); i++) {
    PsiElement element=myElements.get(i);
    if (element instanceof XmlTag && xmlTagsSet.contains(element))     continue;
    String newName=myNames.get(i);
    final RefactoringElementListener elementListener=getTransaction().getElementListener(element);
    RenameUtil.doRename(element,newName,extractUsagesForElement(element,usages),myProject,elementListener);
    if (element instanceof PsiPackage) {
      final PsiPackage psiPackage=(PsiPackage)element;
      final String newQualifiedName=RenameUtil.getQualifiedNameAfterRename(psiPackage.getQualifiedName(),newName);
      listenersForPackages.add(Pair.create(newQualifiedName,elementListener));
    }
  }
  final PsiManager psiManager=PsiManager.getInstance(myProject);
  for (int i=0; i < listenersForPackages.size(); i++) {
    Pair<String,RefactoringElementListener> pair=listenersForPackages.get(i);
    final PsiPackage aPackage=psiManager.findPackage(pair.getFirst());
    LOG.assertTrue(aPackage != null);
    pair.getSecond().elementRenamed(aPackage);
  }
  final UsageInfo[] usagesForNonCodeRenaming;
  if (specialRenaming.isEmpty()) {
    usagesForNonCodeRenaming=usages;
  }
 else {
    specialRenaming.addAll(Arrays.asList(usages));
    usagesForNonCodeRenaming=specialRenaming.toArray(new UsageInfo[specialRenaming.size()]);
  }
  myUsagesForNonCodeRenaming=usagesForNonCodeRenaming;
}
