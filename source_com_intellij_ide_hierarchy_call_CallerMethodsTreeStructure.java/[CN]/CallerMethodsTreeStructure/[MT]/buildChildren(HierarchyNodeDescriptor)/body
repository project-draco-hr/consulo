{
  final PsiMember enclosingElement=((CallHierarchyNodeDescriptor)descriptor).getEnclosingElement();
  if (!(enclosingElement instanceof PsiMethod)) {
    return ArrayUtil.EMPTY_OBJECT_ARRAY;
  }
  final PsiMethod method=(PsiMethod)enclosingElement;
  final PsiSearchHelper searchHelper=method.getManager().getSearchHelper();
  SearchScope searchScope=GlobalSearchScope.allScope(myProject);
  if (CallHierarchyBrowser.SCOPE_CLASS.equals(myScopeType)) {
    final PsiMethod baseMethod=(PsiMethod)((CallHierarchyNodeDescriptor)getBaseDescriptor()).getTargetElement();
    final PsiClass containingClass=baseMethod.getContainingClass();
    searchScope=new LocalSearchScope(containingClass);
  }
 else   if (CallHierarchyBrowser.SCOPE_PROJECT.equals(myScopeType)) {
    searchScope=GlobalSearchScope.projectProductionScope(myProject,true);
  }
 else   if (CallHierarchyBrowser.SCOPE_TEST.equals(myScopeType)) {
    searchScope=GlobalSearchScope.projectTestScope(myProject,true);
  }
  final Set<PsiMethod> methodsToFind=new HashSet<PsiMethod>();
  methodsToFind.add(method);
  methodsToFind.addAll(Arrays.asList(method.findDeepestSuperMethods()));
  final HashMap<PsiMember,CallHierarchyNodeDescriptor> methodToDescriptorMap=new HashMap<PsiMember,CallHierarchyNodeDescriptor>();
  for (  final PsiMethod methodToFind : methodsToFind) {
    for (    final PsiReference reference : MethodReferencesSearch.search(methodToFind,searchScope,true).toArray(PsiReference.EMPTY_ARRAY)) {
      if (reference instanceof PsiReferenceExpression) {
        final PsiExpression qualifier=((PsiReferenceExpression)reference).getQualifierExpression();
        if (qualifier instanceof PsiSuperExpression) {
          final PsiClass superClass=PsiUtil.resolveClassInType(qualifier.getType());
          final PsiClass methodClass=method.getContainingClass();
          if (methodClass != null && methodClass.isInheritor(superClass,true)) {
            continue;
          }
        }
      }
 else {
        if (!(reference instanceof PsiElement)) {
          continue;
        }
        final PsiElement parent=((PsiElement)reference).getParent();
        if (parent instanceof PsiNewExpression) {
          if (((PsiNewExpression)parent).getClassReference() != reference) {
            continue;
          }
        }
 else         if (parent instanceof PsiAnonymousClass) {
          if (((PsiAnonymousClass)parent).getBaseClassReference() != reference) {
            continue;
          }
        }
 else {
          continue;
        }
      }
      final PsiElement element=reference.getElement();
      final PsiMember key=CallHierarchyNodeDescriptor.getEnclosingElement(element);
      CallHierarchyNodeDescriptor d=methodToDescriptorMap.get(key);
      if (d == null) {
        d=new CallHierarchyNodeDescriptor(myProject,descriptor,element,false,true);
        methodToDescriptorMap.put(key,d);
      }
 else {
        d.incrementUsageCount();
      }
      d.addReference(reference);
    }
  }
  return methodToDescriptorMap.values().toArray(new Object[methodToDescriptorMap.size()]);
}
