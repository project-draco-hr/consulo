{
  final PsiMember enclosingElement=((CallHierarchyNodeDescriptor)descriptor).getEnclosingElement();
  if (!(enclosingElement instanceof PsiMethod)) {
    return ArrayUtil.EMPTY_OBJECT_ARRAY;
  }
  final PsiMethod method=(PsiMethod)enclosingElement;
  SearchScope searchScope=GlobalSearchScope.allScope(myProject);
  if (CallHierarchyBrowser.SCOPE_CLASS.equals(myScopeType)) {
    final PsiMethod baseMethod=(PsiMethod)((CallHierarchyNodeDescriptor)getBaseDescriptor()).getTargetElement();
    final PsiClass containingClass=baseMethod.getContainingClass();
    searchScope=new LocalSearchScope(containingClass);
  }
 else   if (CallHierarchyBrowser.SCOPE_PROJECT.equals(myScopeType)) {
    searchScope=GlobalSearchScope.projectProductionScope(myProject);
  }
 else   if (CallHierarchyBrowser.SCOPE_TEST.equals(myScopeType)) {
    searchScope=GlobalSearchScope.projectTestScope(myProject);
  }
  final Set<PsiMethod> methodsToFind=new HashSet<PsiMethod>();
  methodsToFind.add(method);
  methodsToFind.addAll(Arrays.asList(method.findDeepestSuperMethods()));
  final Map<PsiMember,CallHierarchyNodeDescriptor> methodToDescriptorMap=new HashMap<PsiMember,CallHierarchyNodeDescriptor>();
  for (  final PsiMethod methodToFind : methodsToFind) {
    MethodReferencesSearch.search(methodToFind,searchScope,true).forEach(new Processor<PsiReference>(){
      public boolean process(      final PsiReference reference){
        if (reference instanceof PsiReferenceExpression) {
          final PsiExpression qualifier=((PsiReferenceExpression)reference).getQualifierExpression();
          if (qualifier instanceof PsiSuperExpression) {
            final PsiClass superClass=PsiUtil.resolveClassInType(qualifier.getType());
            final PsiClass methodClass=method.getContainingClass();
            if (methodClass != null && methodClass.isInheritor(superClass,true)) {
              return true;
            }
          }
        }
 else {
          if (!(reference instanceof PsiElement)) {
            return true;
          }
          final PsiElement parent=((PsiElement)reference).getParent();
          if (parent instanceof PsiNewExpression) {
            if (((PsiNewExpression)parent).getClassReference() != reference) {
              return true;
            }
          }
 else           if (parent instanceof PsiAnonymousClass) {
            if (((PsiAnonymousClass)parent).getBaseClassReference() != reference) {
              return true;
            }
          }
 else {
            return true;
          }
        }
        final PsiElement element=reference.getElement();
        final PsiMember key=CallHierarchyNodeDescriptor.getEnclosingElement(element);
synchronized (methodToDescriptorMap) {
          CallHierarchyNodeDescriptor d=methodToDescriptorMap.get(key);
          if (d == null) {
            d=new CallHierarchyNodeDescriptor(myProject,descriptor,element,false,true);
            methodToDescriptorMap.put(key,d);
          }
 else {
            d.incrementUsageCount();
          }
          d.addReference(reference);
        }
        return true;
      }
    }
);
  }
  return methodToDescriptorMap.values().toArray(new Object[methodToDescriptorMap.size()]);
}
