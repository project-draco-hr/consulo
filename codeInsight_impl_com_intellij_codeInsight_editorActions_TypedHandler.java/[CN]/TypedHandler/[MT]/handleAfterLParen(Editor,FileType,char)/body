{
  int offset=editor.getCaretModel().getOffset();
  HighlighterIterator iterator=((EditorEx)editor).getHighlighter().createIterator(offset);
  iterator.retreat();
  BraceMatchingUtil.BraceMatcher braceMatcher=BraceMatchingUtil.getBraceMatcher(fileType);
  IElementType braceTokenType=braceMatcher.getTokenType(lparenChar,iterator);
  if (iterator.atEnd() || iterator.getTokenType() != braceTokenType)   return;
  iterator.advance();
  IElementType tokenType=!iterator.atEnd() ? iterator.getTokenType() : null;
  if (tokenType instanceof IJavaElementType) {
    if (!TokenTypeEx.WHITE_SPACE_OR_COMMENT_BIT_SET.contains(tokenType) && tokenType != JavaTokenType.SEMICOLON && tokenType != JavaTokenType.COMMA && tokenType != JavaTokenType.RPARENTH && tokenType != JavaTokenType.RBRACKET && tokenType != JavaTokenType.RBRACE) {
      return;
    }
  }
  iterator.retreat();
  int lparenOffset=BraceMatchingUtil.findLeftmostLParen(iterator,braceTokenType,editor.getDocument().getCharsSequence(),fileType);
  if (lparenOffset < 0)   lparenOffset=0;
  iterator=((EditorEx)editor).getHighlighter().createIterator(lparenOffset);
  boolean matched=BraceMatchingUtil.matchBrace(editor.getDocument().getCharsSequence(),fileType,iterator,true);
  if (!matched) {
    String text;
    if (lparenChar == '(') {
      text=")";
    }
 else     if (lparenChar == '[') {
      text="]";
    }
 else     if (lparenChar == '<') {
      text=">";
    }
 else {
      LOG.assertTrue(false);
      return;
    }
    editor.getDocument().insertString(offset,text);
  }
}
