{
  int offset=editor.getCaretModel().getOffset();
  HighlighterIterator iterator=((EditorEx)editor).getHighlighter().createIterator(offset);
  boolean atEndOfDocument=offset == editor.getDocument().getTextLength();
  if (!atEndOfDocument)   iterator.retreat();
  BraceMatchingUtil.BraceMatcher braceMatcher=BraceMatchingUtil.getBraceMatcher(fileType);
  IElementType braceTokenType=braceMatcher.getTokenType(lparenChar,iterator);
  if (iterator.atEnd() || iterator.getTokenType() != braceTokenType)   return;
  if (!iterator.atEnd()) {
    iterator.advance();
    IElementType tokenType=!iterator.atEnd() ? iterator.getTokenType() : null;
    if (!BraceMatchingUtil.isAppropriateElementTypeForBracketOrParenInFileType(braceTokenType,tokenType,fileType)) {
      return;
    }
    iterator.retreat();
  }
  int lparenOffset=BraceMatchingUtil.findLeftmostLParen(iterator,braceTokenType,editor.getDocument().getCharsSequence(),fileType);
  if (lparenOffset < 0)   lparenOffset=0;
  iterator=((EditorEx)editor).getHighlighter().createIterator(lparenOffset);
  boolean matched=BraceMatchingUtil.matchBrace(editor.getDocument().getCharsSequence(),fileType,iterator,true);
  if (!matched) {
    String text;
    if (lparenChar == '(') {
      text=")";
    }
 else     if (lparenChar == '[') {
      text="]";
    }
 else     if (lparenChar == '<') {
      text=">";
    }
 else {
      LOG.assertTrue(false);
      return;
    }
    editor.getDocument().insertString(offset,text);
  }
}
