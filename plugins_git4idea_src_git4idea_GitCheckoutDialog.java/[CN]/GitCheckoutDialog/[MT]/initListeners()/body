{
  FileChooserDescriptor fcd=new FileChooserDescriptor(false,true,false,false,false,false);
  fcd.setShowFileSystemRoots(true);
  fcd.setTitle(GitBundle.getString("clone.destination.directory.title"));
  fcd.setDescription(GitBundle.getString("clone.destination.directory.description"));
  fcd.setHideIgnored(false);
  myParentDirectory.addBrowseFolderListener(fcd.getTitle(),fcd.getDescription(),myProject,fcd);
  final DocumentListener updateOkButtonListener=new DocumentListener(){
    public void insertUpdate(    final DocumentEvent e){
      updateOkButton();
    }
    public void removeUpdate(    final DocumentEvent e){
      updateOkButton();
    }
    public void changedUpdate(    final DocumentEvent e){
      updateOkButton();
    }
  }
;
  myParentDirectory.getChildComponent().getDocument().addDocumentListener(updateOkButtonListener);
  myDirectoryName.getDocument().addDocumentListener(updateOkButtonListener);
  myOriginName.getDocument().addDocumentListener(updateOkButtonListener);
  myRepositoryURL.getDocument().addDocumentListener(new DocumentListener(){
    public void insertUpdate(    final DocumentEvent e){
      changed();
    }
    public void removeUpdate(    final DocumentEvent e){
      changed();
    }
    public void changedUpdate(    final DocumentEvent e){
      changed();
    }
    private void changed(){
      final String url=myRepositoryURL.getText();
      myTestButton.setEnabled(url.length() != 0);
      if (myDefaultDirectoryName.equals(myDirectoryName.getText()) || myDirectoryName.getText().length() == 0) {
        myDefaultDirectoryName=defaultDirectoryName(url);
        myDirectoryName.setText(myDefaultDirectoryName);
      }
      updateOkButton();
    }
  }
);
  myTestButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      myTestURL=myRepositoryURL.getText();
      GitCommandRunnable cmdr;
      try {
        cmdr=new GitCommandRunnable(myProject,mySettings,GitUtil.getTempDir());
      }
 catch (      VcsException ex) {
        myTestURL=null;
        myTestResult=null;
        GitUtil.showOperationError(myProject,ex,"connection test");
        return;
      }
      cmdr.setCommand(GitCommand.LS_REMOTE_CMD);
      cmdr.setArgs(new String[]{myTestURL,"master"});
      ProgressManager manager=ProgressManager.getInstance();
      manager.runProcessWithProgressSynchronously(cmdr,GitBundle.message("clone.testing",myTestURL),false,myProject);
      VcsException ex=cmdr.getException();
      if (ex != null) {
        myTestResult=Boolean.FALSE;
        GitUtil.showOperationError(myProject,ex,"connection test");
      }
 else {
        Messages.showInfoMessage(myTestButton,GitBundle.message("clone.test.success.message",myTestURL),GitBundle.getString("clone.test.success"));
        myTestResult=Boolean.TRUE;
      }
      updateOkButton();
    }
  }
);
  setOKActionEnabled(false);
}
