{
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    public void run(){
      ModuleRootManager manager=ModuleRootManager.getInstance(module);
      for (      OrderEntry entry : manager.getOrderEntries()) {
        if (!(entry instanceof ExportableOrderEntry) || ((ExportableOrderEntry)entry).getScope() != DependencyScope.COMPILE) {
          continue;
        }
        if (entry instanceof LibraryOrderEntry) {
          Library library=((LibraryOrderEntry)entry).getLibrary();
          if (!platformLibrary.equals(library)) {
            if (library != null) {
              for (              VirtualFile file : library.getFiles(OrderRootType.CLASSES)) {
                if (file.exists()) {
                  if (file.getFileSystem() instanceof JarFileSystem) {
                    VirtualFile localFile=JarFileSystem.getInstance().getVirtualFileForJar(file);
                    if (localFile != null)                     result.add(localFile);
                  }
 else {
                    result.add(file);
                  }
                }
              }
            }
          }
        }
 else         if (entry instanceof ModuleOrderEntry) {
          Module module=((ModuleOrderEntry)entry).getModule();
          CompilerModuleExtension extension=CompilerModuleExtension.getInstance(module);
          if (extension != null) {
            VirtualFile classDir=extension.getCompilerOutputPath();
            boolean added=false;
            if (!result.contains(classDir) && classDir != null && classDir.exists()) {
              result.add(classDir);
              added=true;
            }
            VirtualFile classDirForTests=extension.getCompilerOutputPathForTests();
            if (!result.contains(classDirForTests) && classDirForTests != null && classDirForTests.exists()) {
              result.add(classDirForTests);
              added=true;
            }
            if (added) {
              fillExternalLibrariesAndModules(module,result,platformLibrary);
            }
          }
        }
      }
    }
  }
);
}
