{
  if (shouldSortItems(containingFile,items)) {
    final PsiProximityComparator proximityComparator=new PsiProximityComparator(containingFile,myProject);
    final Comparator<? super LookupItem> comparator=new Comparator<LookupItem>(){
      public int compare(      LookupItem o1,      LookupItem o2){
        int priority=o1.getObject() instanceof LookupValueWithPriority ? ((LookupValueWithPriority)o1.getObject()).getPriority() : LookupValueWithPriority.NORMAL;
        int priority2=o2.getObject() instanceof LookupValueWithPriority ? ((LookupValueWithPriority)o2.getObject()).getPriority() : LookupValueWithPriority.NORMAL;
        if (priority != priority2) {
          return priority2 - priority;
        }
        if ("true".equals(System.getProperty("sort.lookup.items.by.proximity"))) {
          if (itemPreferencePolicy instanceof CompletionPreferencePolicy) {
            final CompletionPreferencePolicy completionPreferencePolicy=(CompletionPreferencePolicy)itemPreferencePolicy;
            final ExpectedTypeInfo[] expectedInfos=completionPreferencePolicy.getExpectedInfos();
            if (expectedInfos != null) {
              final THashSet<PsiClass> set=getFirstClasses(expectedInfos);
              if (set.contains(o1.getObject()) && !set.contains(o2.getObject()))               return -1;
              if (!set.contains(o1.getObject()) && set.contains(o2.getObject()))               return 1;
            }
          }
          final int i=proximityComparator.compare(o1.getObject(),o2.getObject());
          if (i != 0)           return i;
          return o1.getLookupString().compareToIgnoreCase(o2.getLookupString());
        }
        int stringCompare=o1.getLookupString().compareToIgnoreCase(o2.getLookupString());
        if (stringCompare != 0) {
          return stringCompare;
        }
        return proximityComparator.compare(o1.getObject(),o2.getObject());
      }
    }
;
    Arrays.sort(items,comparator);
  }
}
