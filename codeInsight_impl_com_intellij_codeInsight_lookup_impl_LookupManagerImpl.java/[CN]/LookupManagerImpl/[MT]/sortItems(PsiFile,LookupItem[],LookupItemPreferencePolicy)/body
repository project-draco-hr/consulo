{
  if (shouldSortItems(containingFile,items)) {
    final PsiProximityComparator proximityComparator=new PsiProximityComparator(containingFile,myProject);
    final Comparator<? super LookupItem> comparator=new Comparator<LookupItem>(){
      public int compare(      LookupItem o1,      LookupItem o2){
        double priority1=o1.getPriority();
        double priority2=o2.getPriority();
        if (priority1 > priority2)         return -1;
        if (priority2 > priority1)         return 1;
        if ("true".equals(System.getProperty("sort.lookup.items.by.proximity"))) {
          if (itemPreferencePolicy instanceof CompletionPreferencePolicy) {
            final ExpectedTypeInfo[] expectedInfos=((CompletionPreferencePolicy)itemPreferencePolicy).getExpectedInfos();
            if (expectedInfos != null) {
              final THashSet<PsiClass> set=getFirstClasses(expectedInfos);
              final boolean contains1=set.contains(o1.getObject());
              final boolean contains2=set.contains(o2.getObject());
              if (contains1 && !contains2)               return -1;
              if (!contains1 && contains2)               return 1;
            }
          }
          final int i=proximityComparator.compare(o1.getObject(),o2.getObject());
          return i != 0 ? i : o1.getLookupString().compareToIgnoreCase(o2.getLookupString());
        }
        int stringCompare=o1.getLookupString().compareToIgnoreCase(o2.getLookupString());
        return stringCompare != 0 ? stringCompare : proximityComparator.compare(o1.getObject(),o2.getObject());
      }
    }
;
    Arrays.sort(items,comparator);
  }
}
