{
  hideActiveLookup();
  final CodeInsightSettings settings=CodeInsightSettings.getInstance();
  items=items.clone();
  if (!settings.SHOW_SIGNATURES_IN_LOOKUPS) {
    items=filterEqualSignatures(items);
  }
  final PsiFile psiFile=PsiDocumentManager.getInstance(myProject).getPsiFile(editor.getDocument());
  sortItems(psiFile,items,itemPreferencePolicy);
  final Alarm alarm=new Alarm();
  final Runnable request=new Runnable(){
    public void run(){
      JavaDocManager.getInstance(myProject).showJavaDocInfo(editor,psiFile,false);
    }
  }
;
  if (settings.AUTO_POPUP_JAVADOC_INFO) {
    alarm.addRequest(request,settings.JAVADOC_INFO_DELAY);
  }
  final DaemonCodeAnalyzer daemonCodeAnalyzer=DaemonCodeAnalyzer.getInstance(myProject);
  if (daemonCodeAnalyzer != null) {
    daemonCodeAnalyzer.setUpdateByTimerEnabled(false);
  }
  myActiveLookup=new LookupImpl(myProject,editor,items,prefix,itemPreferencePolicy,filter);
  myActiveLookupEditor=editor;
  ((LookupImpl)myActiveLookup).show();
  myActiveLookup.addLookupListener(new LookupAdapter(){
    public void itemSelected(    LookupEvent event){
      dispose();
    }
    public void lookupCanceled(    LookupEvent event){
      dispose();
    }
    public void currentItemChanged(    LookupEvent event){
      alarm.cancelAllRequests();
      if (settings.AUTO_POPUP_JAVADOC_INFO) {
        alarm.addRequest(request,settings.JAVADOC_INFO_DELAY);
      }
    }
    private void dispose(){
      alarm.cancelAllRequests();
      if (daemonCodeAnalyzer != null) {
        daemonCodeAnalyzer.setUpdateByTimerEnabled(true);
      }
      if (myActiveLookup == null)       return;
      myActiveLookup.removeLookupListener(this);
      Lookup lookup=myActiveLookup;
      myActiveLookup=null;
      myActiveLookupEditor=null;
      myPropertyChangeSupport.firePropertyChange(PROP_ACTIVE_LOOKUP,lookup,myActiveLookup);
    }
  }
);
  myPropertyChangeSupport.firePropertyChange(PROP_ACTIVE_LOOKUP,null,myActiveLookup);
  return myActiveLookup;
}
