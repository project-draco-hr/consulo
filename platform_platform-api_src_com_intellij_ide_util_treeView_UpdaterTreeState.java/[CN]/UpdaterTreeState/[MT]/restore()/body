{
  if (isProcessingNow() || !myCanRunRestore)   return false;
  myProcessingNow=true;
  final Object[] toSelect=getToSelect();
  final Object[] toExpand=getToExpand();
  final Map<Object,Condition> adjusted=new WeakHashMap<Object,Condition>();
  adjusted.putAll(myAdjustedSelection);
  clearSelection();
  clearExpansion();
  final Set<Object> originallySelected=myUi.getSelectedElements();
  myUi._select(toSelect,new Runnable(){
    public void run(){
      processUnsuccessfulSelections(toSelect,new Function<Object,Object>(){
        public Object fun(        final Object o){
          addSelection(o);
          return o;
        }
      }
,originallySelected);
      processAjusted(adjusted,originallySelected).doWhenDone(new Runnable(){
        public void run(){
          myUi.expand(toExpand,new Runnable(){
            public void run(){
              if (!isEmpty()) {
                myCanRunRestore=false;
                myUi.setUpdaterState(UpdaterTreeState.this);
              }
              myProcessingNow=false;
            }
          }
,true);
        }
      }
);
    }
  }
,false,true,true,false);
  return true;
}
