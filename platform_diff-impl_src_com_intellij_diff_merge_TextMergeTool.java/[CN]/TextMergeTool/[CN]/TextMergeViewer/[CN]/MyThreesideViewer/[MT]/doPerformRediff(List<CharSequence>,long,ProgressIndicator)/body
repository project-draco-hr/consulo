{
  try {
    indicator.checkCanceled();
    FairDiffIterable fragments1=ByLine.compareTwoStepFair(sequences.get(1),sequences.get(0),ComparisonPolicy.DEFAULT,indicator);
    FairDiffIterable fragments2=ByLine.compareTwoStepFair(sequences.get(1),sequences.get(2),ComparisonPolicy.DEFAULT,indicator);
    List<MergeLineFragment> mergeFragments=ComparisonMergeUtil.buildFair(fragments1,fragments2,indicator);
    return apply(mergeFragments,outputModificationStamp);
  }
 catch (  DiffTooBigException e) {
    return applyNotification(DiffNotifications.createDiffTooBig());
  }
catch (  ProcessCanceledException e) {
    throw e;
  }
catch (  Throwable e) {
    LOG.error(e);
    return new Runnable(){
      @Override public void run(){
        clearDiffPresentation();
        myPanel.setErrorContent();
      }
    }
;
  }
}
