{
  super.onBeforeDocumentChange(e);
  enterBulkChangeUpdateBlock();
  if (myAllMergeChanges.isEmpty())   return;
  ThreeSide side=null;
  if (e.getDocument() == getEditor(ThreeSide.LEFT).getDocument())   side=ThreeSide.LEFT;
  if (e.getDocument() == getEditor(ThreeSide.RIGHT).getDocument())   side=ThreeSide.RIGHT;
  if (e.getDocument() == getEditor(ThreeSide.BASE).getDocument())   side=ThreeSide.BASE;
  if (side == null) {
    LOG.warn("Unknown document changed");
    return;
  }
  if (side != ThreeSide.BASE) {
    LOG.error("Non-base side was changed");
    return;
  }
  if (myInitialRediffFinished)   myContentModified=true;
  int line1=e.getDocument().getLineNumber(e.getOffset());
  int line2=e.getDocument().getLineNumber(e.getOffset() + e.getOldLength()) + 1;
  int shift=DiffUtil.countLinesShift(e);
  final List<Pair<TextMergeChange,TextMergeChange.State>> corruptedStates=ContainerUtil.newArrayList();
  for (  TextMergeChange change : myAllMergeChanges) {
    TextMergeChange.State oldState=change.processBaseChange(line1,line2,shift);
    if (oldState != null) {
      if (myCurrentMergeCommand == null) {
        corruptedStates.add(Pair.create(change,oldState));
      }
      reinstallHighlighter(change);
    }
  }
  if (!corruptedStates.isEmpty() && myUndoManager != null) {
    myUndoManager.undoableActionPerformed(new BasicUndoableAction(getEditor(ThreeSide.BASE).getDocument()){
      @Override public void undo() throws UnexpectedUndoException {
        enterBulkChangeUpdateBlock();
        for (        Pair<TextMergeChange,TextMergeChange.State> pair : corruptedStates) {
          restoreChangeState(pair.first,pair.second);
        }
        exitBulkChangeUpdateBlock();
      }
      @Override public void redo() throws UnexpectedUndoException {
      }
    }
);
  }
}
