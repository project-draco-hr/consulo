{
  myTypeManager=typeManager;
  myDefaultTemplatesManager=new FTManager(DEFAULT_TEMPLATES_CATEGORY,ROOT_DIR);
  myInternalTemplatesManager=new FTManager(INTERNAL_TEMPLATES_CATEGORY,INTERNAL_DIR);
  myPatternsManager=new FTManager(INCLUDES_TEMPLATES_CATEGORY,INCLUDES_DIR);
  myCodeTemplatesManager=new FTManager(CODE_TEMPLATES_CATEGORY,CODETEMPLATES_DIR);
  myJ2eeTemplatesManager=new FTManager(J2EE_TEMPLATES_CATEGORY,J2EE_TEMPLATES_DIR);
  myDirToManagerMap.put("",myDefaultTemplatesManager);
  myDirToManagerMap.put(INTERNAL_DIR + "/",myInternalTemplatesManager);
  myDirToManagerMap.put(INCLUDES_DIR + "/",myPatternsManager);
  myDirToManagerMap.put(CODETEMPLATES_DIR + "/",myCodeTemplatesManager);
  myDirToManagerMap.put(J2EE_TEMPLATES_DIR + "/",myJ2eeTemplatesManager);
  myAllManagers=new FTManager[]{myDefaultTemplatesManager,myInternalTemplatesManager,myPatternsManager,myCodeTemplatesManager,myJ2eeTemplatesManager};
  loadDefaultTemplates();
  for (  FTManager child : myAllManagers) {
    loadCustomizedContent(child);
  }
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    for (    String tname : Arrays.asList("Class","AnnotationType","Enum","Interface")) {
      for (      FileTemplate template : myInternalTemplatesManager.getAllTemplates(true)) {
        if (tname.equals(template.getName())) {
          myInternalTemplatesManager.removeTemplate(((FileTemplateBase)template).getQualifiedName());
          break;
        }
      }
      final FileTemplateBase template=myInternalTemplatesManager.addTemplate(tname,"java");
      template.setText(normalizeText(getTestClassTemplateText(tname)));
    }
  }
}
