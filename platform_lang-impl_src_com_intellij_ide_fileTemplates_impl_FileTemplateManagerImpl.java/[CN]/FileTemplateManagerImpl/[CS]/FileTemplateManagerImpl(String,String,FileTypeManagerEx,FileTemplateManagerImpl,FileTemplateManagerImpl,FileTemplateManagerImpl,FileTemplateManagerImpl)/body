{
  myName=name;
  myDefaultTemplatesDir=defaultTemplatesDirName;
  myTemplatesDir=TEMPLATES_DIR + (defaultTemplatesDirName.equals(".") ? "" : File.separator + defaultTemplatesDirName);
  myTypeManager=fileTypeManagerEx;
  myInternalTemplatesManager=internalTemplatesManager;
  myPatternsManager=patternsManager;
  myCodeTemplatesManager=codeTemplatesManager;
  myJ2eeTemplatesManager=j2eeTemplatesManager;
  myChildren=internalTemplatesManager == null ? new FileTemplateManagerImpl[0] : new FileTemplateManagerImpl[]{internalTemplatesManager,patternsManager,codeTemplatesManager,j2eeTemplatesManager};
  if (ApplicationManager.getApplication().isUnitTestMode() && defaultTemplatesDirName.equals(INTERNAL_DIR)) {
    for (    String tname : Arrays.asList("Class","AnnotationType","Enum","Interface")) {
      for (      FileTemplate template : getAllTemplates()) {
        if (template.getName().equals(tname)) {
          myTemplates.removeTemplate(template);
          break;
        }
      }
      FileTemplateImpl fileTemplate=new FileTemplateImpl(normalizeText(getTestClassTemplateText(tname)),tname,"java");
      fileTemplate.setReadOnly(true);
      fileTemplate.setModified(false);
      myTemplates.addTemplate(fileTemplate);
      fileTemplate.setInternal(true);
    }
  }
}
