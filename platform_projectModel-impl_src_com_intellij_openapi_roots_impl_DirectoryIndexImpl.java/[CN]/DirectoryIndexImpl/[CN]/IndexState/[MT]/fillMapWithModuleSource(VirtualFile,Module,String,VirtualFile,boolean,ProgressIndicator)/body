{
  VfsUtilCore.visitChildrenRecursively(dir,new DirectoryVisitor(){
    private final Stack<String> myPackages=new Stack<String>();
    @Override protected DirectoryInfo updateInfo(    @NotNull VirtualFile file){
      if (progress != null) {
        progress.checkCanceled();
      }
      int id=getId(file);
      DirectoryInfo info=myDirToInfoMap.get(id);
      if (info == null)       return null;
      if (!module.equals(info.getModule()))       return null;
      if (info.isInModuleSource()) {
        String definedPackage=myDirToPackageName.get(id);
        if (definedPackage != null && definedPackage.isEmpty())         return null;
      }
      info=info.withInModuleSource(true).withTestSource(isTestSource).withSourceRoot(sourceRoot);
      storeInfo(info,id);
      String currentPackage=myPackages.isEmpty() ? packageName : getPackageNameForSubdir(myPackages.peek(),file.getName());
      myPackages.push(currentPackage);
      setPackageName(id,currentPackage);
      return info;
    }
    @Override protected void afterChildrenVisited(    @NotNull VirtualFile file,    @NotNull DirectoryInfo info){
      super.afterChildrenVisited(file,info);
      myPackages.pop();
    }
  }
);
}
