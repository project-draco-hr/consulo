{
  for (  OrderEntry orderEntry : getOrderEntries(module)) {
    if (orderEntry instanceof ModuleOrderEntry) {
      final Module depModule=((ModuleOrderEntry)orderEntry).getModule();
      if (depModule != null) {
        VirtualFile[] importedClassRoots=OrderEnumerator.orderEntries(depModule).exportedOnly().recursively().classes().usingCache().getRoots();
        for (        VirtualFile importedClassRoot : importedClassRoots) {
          depEntries.putValue(importedClassRoot,orderEntry);
        }
      }
      VirtualFile[] sourceRoots=orderEntry.getFiles(OrderRootType.SOURCES);
      for (      VirtualFile sourceRoot : sourceRoots) {
        depEntries.putValue(sourceRoot,orderEntry);
      }
    }
 else     if (orderEntry instanceof ModuleSourceOrderEntry) {
      OrderEntry[] oneEntryList={orderEntry};
      Module entryModule=orderEntry.getOwnerModule();
      VirtualFile[] sourceRoots=((ModuleSourceOrderEntry)orderEntry).getRootModel().getSourceRoots();
      for (      VirtualFile sourceRoot : sourceRoots) {
        fillMapWithOrderEntries(sourceRoot,oneEntryList,entryModule,null,null,null,progress);
      }
    }
 else     if (orderEntry instanceof LibraryOrSdkOrderEntry) {
      final LibraryOrSdkOrderEntry entry=(LibraryOrSdkOrderEntry)orderEntry;
      VirtualFile[] classRoots=entry.getRootFiles(OrderRootType.CLASSES);
      for (      VirtualFile classRoot : classRoots) {
        libClassRootEntries.putValue(classRoot,orderEntry);
      }
      VirtualFile[] sourceRoots=entry.getRootFiles(OrderRootType.SOURCES);
      for (      VirtualFile sourceRoot : sourceRoots) {
        libSourceRootEntries.putValue(sourceRoot,orderEntry);
      }
    }
  }
}
