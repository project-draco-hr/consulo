{
  final Map<DirectoryInfo,DirectoryInfo> diInterner=new THashMap<DirectoryInfo,DirectoryInfo>();
  final Map<OrderEntry[],OrderEntry[]> oeInterner=new THashMap<OrderEntry[],OrderEntry[]>(new TObjectHashingStrategy<OrderEntry[]>(){
    @Override public int computeHashCode(    OrderEntry[] object){
      return Arrays.hashCode(object);
    }
    @Override public boolean equals(    OrderEntry[] o1,    OrderEntry[] o2){
      return Arrays.equals(o1,o2);
    }
  }
);
  myDirToInfoMap.transformValues(new TObjectFunction<DirectoryInfo,DirectoryInfo>(){
    @Override public DirectoryInfo execute(    DirectoryInfo info){
      DirectoryInfo interned=diInterner.get(info);
      if (interned == null) {
        OrderEntry[] entries=info.getOrderEntries();
        OrderEntry[] internedEntries=oeInterner.get(entries);
        if (internedEntries == null) {
          oeInterner.put(entries,entries);
        }
 else         if (internedEntries != entries) {
          info=info.withInternedEntries(internedEntries);
        }
        diInterner.put(info,interned=info);
      }
      return interned;
    }
  }
);
}
