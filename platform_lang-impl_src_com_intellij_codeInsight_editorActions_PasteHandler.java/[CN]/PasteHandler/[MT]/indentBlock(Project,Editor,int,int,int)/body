{
  Document document=editor.getDocument();
  CharSequence chars=document.getCharsSequence();
  boolean hasNewLine=false;
  for (int i=endOffset - 1; i >= startOffset; i--) {
    char c=chars.charAt(i);
    if (c == '\n' || c == '\r') {
      hasNewLine=true;
      break;
    }
    if (c != ' ' && c != '\t')     return;
  }
  if (!hasNewLine)   return;
  int lineStart=CharArrayUtil.shiftBackwardUntil(chars,startOffset - 1,"\n\r") + 1;
  int spaceEnd=CharArrayUtil.shiftForward(chars,lineStart," \t");
  if (startOffset <= spaceEnd) {
    if (lineStart != startOffset) {
      String deletedS=chars.subSequence(lineStart,startOffset).toString();
      document.deleteString(lineStart,startOffset);
      startOffset=lineStart;
      endOffset-=deletedS.length();
      document.insertString(endOffset,deletedS);
      LogicalPosition pos=new LogicalPosition(editor.getCaretModel().getLogicalPosition().line,originalCaretCol);
      editor.getCaretModel().moveToLogicalPosition(pos);
    }
    PsiDocumentManager.getInstance(project).commitAllDocuments();
    PsiFile file=PsiDocumentManager.getInstance(project).getPsiFile(document);
    if (LanguageFormatting.INSTANCE.forContext(file) != null) {
      indentBlockWithFormatter(project,document,startOffset,endOffset,file);
    }
 else {
      indentPlainTextBlock(document,startOffset,endOffset,originalCaretCol);
    }
  }
}
