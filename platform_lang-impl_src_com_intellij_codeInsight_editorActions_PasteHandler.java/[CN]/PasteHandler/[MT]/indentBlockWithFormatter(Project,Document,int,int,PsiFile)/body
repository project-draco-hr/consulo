{
  CharSequence chars=document.getCharsSequence();
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  if (file == null) {
    return;
  }
  CodeStyleManager codeStyleManager=CodeStyleManager.getInstance(project);
  final int startLine=document.getLineNumber(startOffset);
  final int startLineStartOffset=document.getLineStartOffset(startLine);
  int indentAdjustmentAnchorLine=-1;
  int pastedLinesAfterIndentLine=0;
  final int nonWsOffset=CharArrayUtil.shiftBackward(chars,startOffset - 1," \t");
  boolean onNewLine=nonWsOffset < 0 || chars.charAt(nonWsOffset) == '\n';
  int diffShift=0;
  if (onNewLine && (chars.charAt(startOffset) == ' ' || chars.charAt(startOffset) == '\n')) {
    indentAdjustmentAnchorLine=startLine;
    diffShift+=startOffset - startLineStartOffset;
  }
  for (int line=startLine + 1, max=document.getLineCount(); line < max; line++) {
    int lineStartOffset=document.getLineStartOffset(line);
    if (lineStartOffset >= endOffset) {
      break;
    }
    if (indentAdjustmentAnchorLine >= 0) {
      pastedLinesAfterIndentLine++;
      continue;
    }
    int j=CharArrayUtil.shiftForward(chars,lineStartOffset," \t");
    if (j < document.getLineEndOffset(line)) {
      indentAdjustmentAnchorLine=line;
    }
  }
  if (indentAdjustmentAnchorLine < 0) {
    codeStyleManager.adjustLineIndent(file,startOffset);
    return;
  }
  int lineAdjustmentStartOffset;
  final int anchorLineStart=document.getLineStartOffset(indentAdjustmentAnchorLine);
  int lineAdjustmentEndOffset=CharArrayUtil.shiftForward(chars,anchorLineStart," \t");
  if (onNewLine) {
    lineAdjustmentStartOffset=nonWsOffset + 1;
  }
 else {
    lineAdjustmentStartOffset=anchorLineStart;
  }
  codeStyleManager.adjustLineIndent(file,new TextRange(lineAdjustmentStartOffset,lineAdjustmentEndOffset));
  int diff=lineAdjustmentEndOffset - CharArrayUtil.shiftForward(chars,anchorLineStart," \t") - diffShift;
  if (diff > 0) {
    for (int line=indentAdjustmentAnchorLine + 1, max=line + pastedLinesAfterIndentLine; line < max; line++) {
      int lineStartOffset=document.getLineStartOffset(line);
      int indentOffset=CharArrayUtil.shiftForward(chars,lineStartOffset," \t");
      int symbolsToCutNow=Math.min(diff,indentOffset - lineStartOffset);
      document.deleteString(lineStartOffset,lineStartOffset + symbolsToCutNow);
    }
  }
 else   if (diff < 0) {
    final CharSequence toInsert=chars.subSequence(anchorLineStart,anchorLineStart - diff);
    for (int line=indentAdjustmentAnchorLine + 1, max=line + pastedLinesAfterIndentLine; line < max; line++) {
      document.insertString(document.getLineStartOffset(line),toInsert);
    }
  }
}
