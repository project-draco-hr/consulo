{
  CharSequence chars=document.getCharsSequence();
  final int firstLine=document.getLineNumber(startOffset);
  final int firstLineStart=document.getLineStartOffset(firstLine);
  final int lastLine=document.getLineNumber(endOffset);
  final int i=CharArrayUtil.shiftBackward(chars,startOffset - 1," \t");
  if (i > 0 && chars.charAt(i) != '\n') {
    int firstNonWsOffset=CharArrayUtil.shiftForward(chars,firstLineStart," \t");
    if (firstNonWsOffset > firstLineStart) {
      CharSequence toInsert=chars.subSequence(firstLineStart,firstNonWsOffset);
      for (int line=firstLine + 1; line <= lastLine; line++) {
        document.insertString(document.getLineStartOffset(line),toInsert);
      }
    }
    return;
  }
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  if (file == null) {
    return;
  }
  CodeStyleManager codeStyleManager=CodeStyleManager.getInstance(project);
  final int j=CharArrayUtil.shiftForward(chars,startOffset," \t");
  codeStyleManager.adjustLineIndent(file,startOffset);
  if (j == startOffset) {
    int indentOffset=CharArrayUtil.shiftForward(chars,firstLineStart," \t");
    if (indentOffset > firstLineStart) {
      CharSequence toInsert=chars.subSequence(firstLineStart,indentOffset);
      for (int line=firstLine + 1; line <= lastLine; line++) {
        document.insertString(document.getLineStartOffset(line),toInsert);
      }
    }
    return;
  }
  final int firstNonWsOffset=CharArrayUtil.shiftForward(chars,firstLineStart," \t");
  final int diff=firstNonWsOffset - j;
  if (diff == 0) {
    return;
  }
  if (diff > 0) {
    CharSequence toInsert=chars.subSequence(firstLineStart,startOffset + diff);
    for (int line=firstLine + 1; line <= lastLine; line++) {
      document.insertString(document.getLineStartOffset(line),toInsert);
    }
    return;
  }
  if (-diff == startOffset - firstLineStart) {
    return;
  }
  if (-diff > startOffset - firstLineStart) {
    int desiredSymbolsToRemove=-diff - (startOffset - firstLineStart);
    for (int line=firstLine + 1; line <= lastLine; line++) {
      int currentLineStart=document.getLineStartOffset(line);
      int currentLineIndentOffset=CharArrayUtil.shiftForward(chars,currentLineStart," \t");
      int symbolsToRemove=Math.min(currentLineIndentOffset - currentLineStart,desiredSymbolsToRemove);
      if (symbolsToRemove > 0) {
        document.deleteString(currentLineStart,currentLineStart + symbolsToRemove);
      }
    }
  }
 else {
    CharSequence toInsert=chars.subSequence(firstLineStart,firstLineStart + startOffset - firstLineStart + diff);
    for (int line=firstLine + 1; line <= lastLine; line++) {
      document.insertString(document.getLineStartOffset(line),toInsert);
    }
  }
}
