{
  sourceMethodTextField.setEditable(false);
  final DocumentListener docListener=new DocumentAdapter(){
    protected void textChanged(    final DocumentEvent e){
      validateButtons();
    }
  }
;
  existingClassField.getTextField().getDocument().addDocumentListener(docListener);
  packageTextField.getTextField().getDocument().addDocumentListener(docListener);
  classNameField.getDocument().addDocumentListener(docListener);
  myFieldsCombo.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      validateButtons();
    }
  }
);
  myInnerClassNameTextField.getDocument().addDocumentListener(docListener);
  final PsiFile file=sourceMethod.getContainingFile();
  if (file instanceof PsiJavaFile) {
    final String packageName=((PsiJavaFile)file).getPackageName();
    packageTextField.setText(packageName);
  }
  final PsiClass containingClass=sourceMethod.getContainingClass();
  final String containingClassName=containingClass instanceof PsiAnonymousClass ? "Anonymous " + ((PsiAnonymousClass)containingClass).getBaseClassType().getClassName() : containingClass.getName();
  final String sourceMethodName=sourceMethod.getName();
  sourceMethodTextField.setText(containingClassName + '.' + sourceMethodName);
  final ButtonGroup buttonGroup=new ButtonGroup();
  buttonGroup.add(useExistingClassButton);
  buttonGroup.add(createNewClassButton);
  buttonGroup.add(myCreateInnerClassButton);
  createNewClassButton.setSelected(true);
  final ActionListener enableListener=new ActionListener(){
    public void actionPerformed(    ActionEvent actionEvent){
      toggleRadioEnablement();
    }
  }
;
  useExistingClassButton.addActionListener(enableListener);
  createNewClassButton.addActionListener(enableListener);
  myCreateInnerClassButton.addActionListener(enableListener);
  toggleRadioEnablement();
  final DefaultComboBoxModel model=new DefaultComboBoxModel();
  myFieldsCombo.setModel(model);
  myFieldsCombo.setRenderer(new DefaultPsiElementCellRenderer());
  existingClassField.getTextField().getDocument().addDocumentListener(new DocumentAdapter(){
    @Override protected void textChanged(    final DocumentEvent e){
      final PsiClass currentClass=JavaPsiFacade.getInstance(myProject).findClass(existingClassField.getText(),GlobalSearchScope.allScope(myProject));
      if (currentClass != null) {
        model.removeAllElements();
        for (        PsiField field : currentClass.getFields()) {
          if (TypeConversionUtil.isAssignable(field.getType(),sourceMethod.getReturnType())) {
            model.addElement(field);
          }
        }
      }
    }
  }
);
  existingClassField.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final Project project=sourceMethod.getProject();
      final GlobalSearchScope scope=GlobalSearchScope.allScope(project);
      final TreeClassChooserDialog chooser=new TreeClassChooserDialog(RefactorJBundle.message("select.wrapper.class"),project,scope,null,null);
      final String classText=existingClassField.getText();
      final PsiClass currentClass=JavaPsiFacade.getInstance(myProject).findClass(classText,GlobalSearchScope.allScope(myProject));
      if (currentClass != null) {
        chooser.selectClass(currentClass);
      }
      chooser.show();
      final PsiClass selectedClass=chooser.getSelectedClass();
      if (selectedClass != null) {
        existingClassField.setText(selectedClass.getQualifiedName());
      }
    }
  }
);
  packageTextField.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final Project project=sourceMethod.getProject();
      final PackageChooserDialog chooser=new PackageChooserDialog(RefactorJBundle.message("choose.destination.package.label"),project);
      final String packageText=packageTextField.getText();
      chooser.selectPackage(packageText);
      chooser.show();
      final PsiPackage aPackage=chooser.getSelectedPackage();
      if (aPackage != null) {
        final String packageName=aPackage.getQualifiedName();
        packageTextField.setText(packageName);
      }
    }
  }
);
  return myWholePanel;
}
