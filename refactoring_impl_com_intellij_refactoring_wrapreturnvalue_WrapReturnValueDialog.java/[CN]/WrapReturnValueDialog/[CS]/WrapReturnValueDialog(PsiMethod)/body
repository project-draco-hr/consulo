{
  super(sourceMethod.getProject(),true);
  setModal(true);
  setTitle(RefactorJBundle.message("wrap.return.value.title"));
  this.sourceMethod=sourceMethod;
  final DocumentListener docListener=new ValidationDocListener();
  existingClassField=new JTextField();
  final Document existingClassFieldDocument=existingClassField.getDocument();
  existingClassFieldDocument.addDocumentListener(docListener);
  existingClassChooserButton=new FixedSizeButton(existingClassField);
  packageTextField=new JTextField();
  final Document packageFieldDocument=packageTextField.getDocument();
  packageFieldDocument.addDocumentListener(docListener);
  packageChooserButton=new FixedSizeButton(packageTextField);
  classNameField=new JTextField();
  final Document classFieldDocument=classNameField.getDocument();
  classFieldDocument.addDocumentListener(docListener);
  sourceMethodTextField=new JTextField();
  classNameLabel=new JLabel(RefactorJBundle.message("name.for.wrapper.class.label"));
  packageLabel=new JLabel(RefactorJBundle.message("package.for.wrapper.class.label"));
  final PsiFile file=sourceMethod.getContainingFile();
  if (file instanceof PsiJavaFile) {
    final String packageName=((PsiJavaFile)file).getPackageName();
    packageTextField.setText(packageName);
  }
  final PsiClass containingClass=sourceMethod.getContainingClass();
  final String containingClassName=containingClass.getName();
  final String sourceMethodName=sourceMethod.getName();
  sourceMethodTextField.setText(containingClassName + '.' + sourceMethodName);
  final ButtonGroup buttonGroup=new ButtonGroup();
  buttonGroup.add(useExistingClassButton);
  buttonGroup.add(createNewClassButton);
  useExistingClassButton.setSelected(true);
  init();
  final ActionListener listener=new ActionListener(){
    public void actionPerformed(    ActionEvent actionEvent){
      toggleRadioEnablement();
    }
  }
;
  useExistingClassButton.addActionListener(listener);
  createNewClassButton.addActionListener(listener);
  toggleRadioEnablement();
  validateButtons();
}
