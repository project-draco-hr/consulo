{
  final CharSequence chars=inputData.getContentAsText();
  if (CacheUtil.getIndexPatternCount() > 0) {
    final TodoOccurrenceConsumer occurrenceConsumer=new TodoOccurrenceConsumer();
    EditorHighlighter highlighter=null;
    final EditorHighlighter editorHighlighter=inputData.getUserData(FileBasedIndex.EDITOR_HIGHLIGHTER);
    if (editorHighlighter != null && checkCanUseCachedEditorHighlighter(chars,editorHighlighter)) {
      highlighter=editorHighlighter;
    }
 else {
      highlighter=HighlighterFactory.createHighlighter(null,myFile);
      highlighter.setText(chars);
    }
    final HighlighterIterator iterator=highlighter.createIterator(0);
    while (!iterator.atEnd()) {
      final IElementType token=iterator.getTokenType();
      if (CacheUtil.isInComments(token) || myCommentTokens.contains(token)) {
        BaseFilterLexer.advanceTodoItemsCount(chars.subSequence(iterator.getStart(),iterator.getEnd()),occurrenceConsumer);
      }
      iterator.advance();
    }
    final Map<TodoIndexEntry,Integer> map=new HashMap<TodoIndexEntry,Integer>();
    for (    IndexPattern pattern : CacheUtil.getIndexPatterns()) {
      final int count=occurrenceConsumer.getOccurrenceCount(pattern);
      if (count > 0) {
        map.put(new TodoIndexEntry(pattern.getPatternString(),pattern.isCaseSensitive()),count);
      }
    }
    return map;
  }
  return Collections.emptyMap();
}
