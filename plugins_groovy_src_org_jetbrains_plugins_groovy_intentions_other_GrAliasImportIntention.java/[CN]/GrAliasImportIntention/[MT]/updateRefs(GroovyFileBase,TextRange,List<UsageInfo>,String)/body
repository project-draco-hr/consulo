{
  GrImportStatement updatedImport=PsiTreeUtil.findElementOfClassAtOffset(file,range.getStartOffset(),GrImportStatement.class,true);
  if (updatedImport == null)   return;
  String name=updatedImport.getImportedName();
  for (  UsageInfo usage : usages) {
    final PsiElement usageElement=usage.getElement();
    if (usageElement == null)     continue;
    if (usageElement.getParent() instanceof GrImportStatement)     continue;
    if (usageElement instanceof GrReferenceElement) {
      final PsiElement qualifier=((GrReferenceElement)usageElement).getQualifier();
      if (qualifier == null) {
        final String refName=((GrReferenceElement)usageElement).getReferenceName();
        if (refName == null)         continue;
        if (memberName.equals(refName)) {
          ((GrReferenceElement)usageElement).handleElementRenameSimple(name);
        }
 else         if (refName.equals(GroovyPropertyUtils.getPropertyNameByAccessorName(memberName))) {
          final String newPropName=GroovyPropertyUtils.getPropertyNameByAccessorName(name);
          if (newPropName != null) {
            ((GrReferenceElement)usageElement).handleElementRenameSimple(newPropName);
          }
 else {
            ((GrReferenceElement)usageElement).handleElementRenameSimple(name);
          }
        }
      }
    }
  }
}
