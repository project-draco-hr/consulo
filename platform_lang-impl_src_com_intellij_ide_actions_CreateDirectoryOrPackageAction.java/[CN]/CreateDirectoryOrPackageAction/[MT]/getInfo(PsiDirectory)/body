{
  Project project=d.getProject();
  ProjectFileIndex projectFileIndex=ProjectFileIndex.SERVICE.getInstance(project);
  Module moduleForPsiElement=ModuleUtilCore.findModuleForPsiElement(d);
  if (moduleForPsiElement != null) {
    boolean isPackageSupported=false;
    ModuleRootManager moduleRootManager=ModuleRootManager.getInstance(moduleForPsiElement);
    PsiPackageSupportProvider[] extensions=PsiPackageSupportProvider.EP_NAME.getExtensions();
    for (    ModuleExtension moduleExtension : moduleRootManager.getExtensions()) {
      for (      PsiPackageSupportProvider supportProvider : extensions) {
        if (supportProvider.isSupported(moduleExtension)) {
          isPackageSupported=true;
          break;
        }
      }
    }
    if (isPackageSupported) {
      ContentFolderTypeProvider contentFolderTypeForFile=projectFileIndex.getContentFolderTypeForFile(d.getVirtualFile());
      if (contentFolderTypeForFile != null) {
        Icon childPackageIcon=contentFolderTypeForFile.getChildPackageIcon();
        return Trinity.create(contentFolderTypeForFile,d,childPackageIcon != null ? ChildType.Package : ChildType.Directory);
      }
    }
  }
  return Trinity.create(null,d,ChildType.Directory);
}
