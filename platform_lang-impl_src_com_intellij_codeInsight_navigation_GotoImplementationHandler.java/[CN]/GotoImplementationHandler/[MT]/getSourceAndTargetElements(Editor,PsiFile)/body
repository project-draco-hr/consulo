{
  int offset=editor.getCaretModel().getOffset();
  PsiElement source=TargetElementUtil.findTargetElement(editor,ImplementationSearcher.getFlags(),offset);
  if (source == null)   return null;
  final GotoData gotoData;
  final PsiReference reference=TargetElementUtil.findReference(editor,offset);
  if (!ApplicationManager.getApplication().isUnitTestMode()) {
    gotoData=new GotoData(source,new ImplementationSearcher.FirstImplementationsSearcher(){
      @Override protected boolean accept(      PsiElement element){
        return TargetElementUtil.acceptImplementationForReference(reference,element);
      }
      @Override protected boolean canShowPopupWithOneItem(      PsiElement element){
        return false;
      }
    }
.searchImplementations(editor,source,offset),Collections.<AdditionalAction>emptyList());
    gotoData.listUpdaterTask=new ImplementationsUpdaterTask(gotoData,editor,offset,reference);
  }
 else {
    gotoData=new GotoData(source,new ImplementationSearcher(){
      @Override protected PsiElement[] filterElements(      PsiElement element,      PsiElement[] targetElements,      int offset){
        final List<PsiElement> result=new ArrayList<PsiElement>();
        for (        PsiElement targetElement : targetElements) {
          if (TargetElementUtil.acceptImplementationForReference(reference,targetElement)) {
            result.add(targetElement);
          }
        }
        return result.toArray(new PsiElement[result.size()]);
      }
    }
.searchImplementations(editor,source,offset),Collections.<AdditionalAction>emptyList());
  }
  return gotoData;
}
