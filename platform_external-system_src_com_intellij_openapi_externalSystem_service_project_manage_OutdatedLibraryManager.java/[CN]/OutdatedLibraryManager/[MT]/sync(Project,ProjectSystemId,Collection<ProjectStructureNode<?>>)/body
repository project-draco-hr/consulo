{
  List<Pair<LibraryDependencyData,Module>> libraryDependenciesToImport=ContainerUtilRt.newArrayList();
  Map<String,Library> ideLibsToRemove=ContainerUtilRt.newHashMap();
  Map<String,LibraryData> ide2externalLibs=ContainerUtilRt.newHashMap();
  Collection<LibraryOrderEntry> ideLibraryDependenciesToRemove=ContainerUtilRt.newArrayList();
  ProjectStructureHelper projectStructureHelper=myContext.getProjectStructureHelper();
  PlatformFacade facade=myContext.getPlatformFacade();
  for (  ProjectStructureNode<?> node : nodes) {
    Object entity=node.getDescriptor().getElement().mapToEntity(myContext,project);
    if (!(entity instanceof CompositeLibraryDependencyData)) {
      continue;
    }
    CompositeLibraryDependencyData e=(CompositeLibraryDependencyData)entity;
    String ideLibraryName=e.getIdeEntity().getLibraryName();
    Library ideLibraryToRemove=null;
    if (ideLibraryName != null) {
      ideLibraryToRemove=projectStructureHelper.findIdeLibrary(ideLibraryName,project);
    }
    if (ideLibraryToRemove != null) {
      ideLibsToRemove.put(ideLibraryName,ideLibraryToRemove);
      ide2externalLibs.put(ideLibraryName,e.getExternalEntity().getTarget());
    }
  }
  RootPolicy<LibraryOrderEntry> visitor=new RootPolicy<LibraryOrderEntry>(){
    @Override public LibraryOrderEntry visitLibraryOrderEntry(    LibraryOrderEntry libraryOrderEntry,    LibraryOrderEntry value){
      return libraryOrderEntry;
    }
  }
;
  for (  Module ideModule : facade.getModules(myProject)) {
    DataNode<ModuleData> externalModule=projectStructureHelper.findExternalModule(ideModule.getName(),externalSystemId,project);
    if (externalModule == null) {
      continue;
    }
    for (    OrderEntry entry : facade.getOrderEntries(ideModule)) {
      LibraryOrderEntry ideLibraryDependency=entry.accept(visitor,null);
      if (ideLibraryDependency == null) {
        continue;
      }
      String libraryName=ideLibraryDependency.getLibraryName();
      if (libraryName == null) {
        continue;
      }
      if (!ideLibsToRemove.containsKey(libraryName)) {
        continue;
      }
      ideLibraryDependenciesToRemove.add(ideLibraryDependency);
    }
  }
}
