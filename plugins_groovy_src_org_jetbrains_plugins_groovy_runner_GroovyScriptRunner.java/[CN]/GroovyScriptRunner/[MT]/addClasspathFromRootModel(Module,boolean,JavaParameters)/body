{
  if (module == null) {
    return;
  }
  final JavaParameters tmp=new JavaParameters();
  tmp.configureByModule(module,isTests ? JavaParameters.CLASSES_AND_TESTS : JavaParameters.CLASSES_ONLY);
  if (tmp.getClassPath().getVirtualFiles().isEmpty()) {
    return;
  }
  final boolean embeddable=LibrariesUtil.isEmbeddableDistribution(ModuleRootManager.getInstance(module).getFiles(OrderRootType.CLASSES));
  if (embeddable) {
    params.getProgramParametersList().add("--classpath");
    params.getProgramParametersList().add(tmp.getClassPath().getPathsString());
    return;
  }
  final LinkedHashSet<String> pathList=new LinkedHashSet<String>(tmp.getClassPath().getPathList());
  for (  Library library : GroovyConfigUtils.getInstance().getSDKLibrariesByModule(module)) {
    for (    VirtualFile file : library.getFiles(OrderRootType.CLASSES)) {
      pathList.remove(file.getPresentableUrl());
    }
  }
  if (pathList.isEmpty()) {
    return;
  }
  params.getProgramParametersList().add("--classpath");
  params.getProgramParametersList().add(StringUtil.join(pathList,File.pathSeparator));
}
