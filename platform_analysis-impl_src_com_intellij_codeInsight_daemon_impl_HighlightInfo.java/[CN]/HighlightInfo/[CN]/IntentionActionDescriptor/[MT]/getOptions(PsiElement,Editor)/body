{
  if (editor != null && Boolean.FALSE.equals(editor.getUserData(IntentionManager.SHOW_INTENTION_OPTIONS_KEY))) {
    return null;
  }
  List<IntentionAction> options=myOptions;
  HighlightDisplayKey key=myKey;
  if (myProblemGroup != null) {
    String problemName=myProblemGroup.getProblemName();
    HighlightDisplayKey problemGroupKey=problemName != null ? HighlightDisplayKey.findById(problemName) : null;
    if (problemGroupKey != null) {
      key=problemGroupKey;
    }
  }
  if (options != null || key == null) {
    return options;
  }
  IntentionManager intentionManager=IntentionManager.getInstance();
  List<IntentionAction> newOptions=intentionManager.getStandardIntentionOptions(key,element);
  InspectionProfile profile=InspectionProjectProfileManager.getInstance(element.getProject()).getInspectionProfile();
  InspectionToolWrapper toolWrapper=profile.getInspectionTool(key.toString(),element);
  if (!(toolWrapper instanceof LocalInspectionToolWrapper)) {
    HighlightDisplayKey idkey=HighlightDisplayKey.findById(key.toString());
    if (idkey != null) {
      toolWrapper=profile.getInspectionTool(idkey.toString(),element);
    }
  }
  if (toolWrapper != null) {
    myCanCleanup=toolWrapper.isCleanupTool();
    final IntentionAction fixAllIntention=intentionManager.createFixAllIntention(toolWrapper,myAction);
    InspectionProfileEntry wrappedTool=toolWrapper instanceof LocalInspectionToolWrapper ? ((LocalInspectionToolWrapper)toolWrapper).getTool() : ((GlobalInspectionToolWrapper)toolWrapper).getTool();
    if (wrappedTool instanceof DefaultHighlightVisitorBasedInspection.AnnotatorBasedInspection) {
      List<IntentionAction> actions=Collections.<IntentionAction>emptyList();
      if (myProblemGroup instanceof SuppressableProblemGroup) {
        actions=Arrays.<IntentionAction>asList(((SuppressableProblemGroup)myProblemGroup).getSuppressActions(element));
      }
      if (fixAllIntention != null) {
        if (actions.isEmpty()) {
          return Collections.<IntentionAction>singletonList(fixAllIntention);
        }
 else {
          actions=new ArrayList<IntentionAction>(actions);
          actions.add(fixAllIntention);
        }
      }
      return actions;
    }
    ContainerUtil.addIfNotNull(newOptions,fixAllIntention);
    if (wrappedTool instanceof CustomSuppressableInspectionTool) {
      final IntentionAction[] suppressActions=((CustomSuppressableInspectionTool)wrappedTool).getSuppressActions(element);
      if (suppressActions != null) {
        ContainerUtil.addAll(newOptions,suppressActions);
      }
    }
 else {
      SuppressQuickFix[] suppressFixes=wrappedTool.getBatchSuppressActions(element);
      if (suppressFixes.length > 0) {
        ContainerUtil.addAll(newOptions,ContainerUtil.map(suppressFixes,new Function<SuppressQuickFix,IntentionAction>(){
          @Override public IntentionAction fun(          SuppressQuickFix fix){
            return SuppressIntentionActionFromFix.convertBatchToSuppressIntentionAction(fix);
          }
        }
));
      }
    }
  }
  if (myProblemGroup instanceof SuppressableProblemGroup) {
    final IntentionAction[] suppressActions=((SuppressableProblemGroup)myProblemGroup).getSuppressActions(element);
    ContainerUtil.addAll(newOptions,suppressActions);
  }
synchronized (this) {
    options=myOptions;
    if (options == null) {
      myOptions=options=newOptions;
    }
    myKey=null;
  }
  return options;
}
