{
  if ((testCaseClass.getModifiers() & Modifier.PUBLIC) == 0)   return null;
  Method suiteMethod=safeFindMethod(testCaseClass,"suite");
  if (suiteMethod != null && !isPerformanceTestsRun()) {
    try {
      return (Test)suiteMethod.invoke(null,ArrayUtil.EMPTY_CLASS_ARRAY);
    }
 catch (    Exception e) {
      System.err.println("Failed to execute suite ()");
      e.printStackTrace();
    }
  }
 else {
    if (TestRunnerUtil.isJUnit4TestClass(testCaseClass)) {
      JUnit4TestAdapter adapter=new JUnit4TestAdapter(testCaseClass);
      if (!hasPerformance(testCaseClass.getSimpleName()) || !isPerformanceTestsRun()) {
        try {
          adapter.filter(isPerformanceTestsRun() ? PERFORMANCE_ONLY : NO_PERFORMANCE);
        }
 catch (        NoTestsRemainException e1) {
        }
      }
      return adapter;
    }
    final int[] testsCount={0};
    TestSuite suite=new TestSuite(testCaseClass){
      @Override public void addTest(      Test test){
        if (!(test instanceof TestCase)) {
          testsCount[0]++;
          super.addTest(test);
        }
 else {
          if (isPerformanceTestsRun() ^ (hasPerformance(((TestCase)test).getName()) || hasPerformance(testCaseClass.getSimpleName())))           return;
          Method method=findTestMethod((TestCase)test);
          if (method == null || !TestCaseLoader.isBombed(method)) {
            testsCount[0]++;
            super.addTest(test);
          }
        }
      }
      @Nullable private Method findTestMethod(      final TestCase testCase){
        return safeFindMethod(testCase.getClass(),testCase.getName());
      }
    }
;
    return testsCount[0] > 0 ? suite : null;
  }
  return null;
}
