{
  if ((ourMode & START_GUARD) != 0) {
    Thread timeAndMemoryGuard=new Thread(){
      public void run(){
        log("Starting Time and Memory Guard");
        while (true) {
          try {
            try {
              Thread.sleep(10000);
            }
 catch (            InterruptedException e) {
              e.printStackTrace();
            }
            if (myLastTestStartTime != 0) {
              long currTime=System.currentTimeMillis();
              long secondsSpent=(currTime - myLastTestStartTime) / 1000L;
              Thread currentThread=getCurrentThread();
              if (!mySavingMemorySnapshot) {
                if (secondsSpent > PlatformTestCase.ourTestTime * myLastTestTestMethodCount) {
                  UsefulTestCase.printThreadDump();
                  log("Interrupting current Test (out of time)! Test class: " + myLastTestClass + " Seconds spent = "+ secondsSpent);
                  myInterruptedByOutOfTime=true;
                  if (currentThread != null) {
                    currentThread.interrupt();
                    if (!currentThread.isInterrupted()) {
                      currentThread.stop(new RuntimeException("Current Test Interrupted: OUT OF TIME!"));
                    }
                    break;
                  }
                }
              }
            }
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
        log("Time and Memory Guard finished.");
      }
    }
;
    timeAndMemoryGuard.setDaemon(true);
    timeAndMemoryGuard.start();
  }
  myStartTime=System.currentTimeMillis();
}
