{
  final List<PsiElement> roots=ContainerUtil.createLockFreeCopyOnWriteList();
  final Project project=file.getProject();
  final JavaPsiFacade psiFacade=JavaPsiFacade.getInstance(project);
  final PsiClass beanClass=psiFacade.findClass(PatternClassBean.class.getName(),GlobalSearchScope.allScope(project));
  if (beanClass != null) {
    final GlobalSearchScope scope=GlobalSearchScope.getScopeRestrictedByFileTypes(GlobalSearchScope.allScope(project),StdFileTypes.XML);
    final TextOccurenceProcessor occurenceProcessor=new TextOccurenceProcessor(){
      @Override public boolean execute(      PsiElement element,      int offsetInElement){
        final XmlTag tag=PsiTreeUtil.getParentOfType(element,XmlTag.class);
        final String className=tag == null ? null : tag.getAttributeValue("className");
        if (className != null && tag.getLocalName().endsWith("patternClass")) {
          ContainerUtil.addIfNotNull(psiFacade.findClass(className,GlobalSearchScope.allScope(project)),roots);
        }
        return true;
      }
    }
;
    final StringSearcher searcher=new StringSearcher("patternClass",true,true);
    CacheManager.SERVICE.getInstance(beanClass.getProject()).processFilesWithWord(new Processor<PsiFile>(){
      @Override public boolean process(      PsiFile psiFile){
        LowLevelSearchUtil.processElementsContainingWordInElement(occurenceProcessor,psiFile,searcher,true,new EmptyProgressIndicator());
        return true;
      }
    }
,searcher.getPattern(),UsageSearchContext.IN_FOREIGN_LANGUAGES,scope,searcher.isCaseSensitive());
  }
  final Class[] classes=PatternCompilerFactory.getFactory().getPatternClasses(type);
  if (classes.length != 0) {
    roots.add(getRootByClasses(classes,project));
  }
  return roots;
}
