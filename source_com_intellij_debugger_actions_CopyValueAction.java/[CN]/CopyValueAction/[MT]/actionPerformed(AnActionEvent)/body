{
  final Project project=(Project)e.getDataContext().getData(DataConstants.PROJECT);
  final Value value=getValue(e);
  if (value == null) {
    return;
  }
  DebuggerManagerEx debuggerManager=DebuggerManagerEx.getInstanceEx(project);
  if (debuggerManager != null) {
    final DebuggerContextImpl context=debuggerManager.getContext();
    if (context != null && context.getDebuggerSession() != null) {
      final ProgressWindowWithNotification progressWindow=new ProgressWindowWithNotification(true,project);
      SuspendContextCommandImpl copyValueAction=new SuspendContextCommandImpl(context.getSuspendContext()){
        public void contextAction() throws Exception {
          progressWindow.setText(DebuggerBundle.message("progress.evaluating","toString()"));
          final String valueAsString=DebuggerUtilsEx.getValueOrErrorAsString(context.createEvaluationContext(),value);
          if (progressWindow.isCanceled())           return;
          DebuggerInvocationUtil.invokeLater(project,new Runnable(){
            public void run(){
              String text=valueAsString;
              if (text == null)               text="";
              CopyPasteManager.getInstance().setContents(new StringSelection(text));
            }
          }
);
        }
      }
;
      progressWindow.setTitle(DebuggerBundle.message("title.evaluating"));
      context.getDebugProcess().getManagerThread().startProgress(copyValueAction,progressWindow);
    }
  }
}
