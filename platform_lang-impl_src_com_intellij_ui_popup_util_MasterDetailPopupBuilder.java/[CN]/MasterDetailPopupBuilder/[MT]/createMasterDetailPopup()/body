{
  setupRenderer();
  myPathLabel=new JLabel(" ");
  myPathLabel.setHorizontalAlignment(SwingConstants.RIGHT);
  final Font font=myPathLabel.getFont();
  myPathLabel.setFont(font.deriveFont((float)10));
  myUpdateAlarm=new Alarm(Alarm.ThreadToUse.SWING_THREAD);
  if (myDetailView == null) {
    myDetailView=new DetailViewImpl(myProject);
  }
  JPanel footerPanel=new JPanel(new BorderLayout()){
    @Override protected void paintComponent(    Graphics g){
      super.paintComponent(g);
      g.setColor(BORDER_COLOR);
      g.drawLine(0,0,getWidth(),0);
    }
  }
;
  Runnable runnable=new Runnable(){
    public void run(){
      IdeFocusManager.getInstance(myProject).doWhenFocusSettlesDown(new Runnable(){
        public void run(){
          Object[] values=getSelectedItems();
          if (values.length == 1) {
            myDelegate.itemChosen((ItemWrapper)values[0],myProject,myPopup,false);
          }
 else {
            for (            Object value : values) {
              if (value instanceof ItemWrapper) {
                myDelegate.itemChosen((ItemWrapper)value,myProject,myPopup,false);
              }
            }
          }
        }
      }
);
    }
  }
;
  footerPanel.setBorder(BorderFactory.createEmptyBorder(4,4,4,4));
  footerPanel.add(myPathLabel);
  JComponent toolBar=null;
  if (myActions != null) {
    myActionToolbar=ActionManager.getInstance().createActionToolbar("",myActions,true);
    myActionToolbar.setReservePlaceAutoPopupIcon(false);
    myActionToolbar.setMinimumButtonSize(new Dimension(20,20));
    toolBar=myActionToolbar.getComponent();
    toolBar.setOpaque(false);
  }
  final PopupChooserBuilder builder=createInnerBuilder().setMovable(true).setResizable(true).setAutoselectOnMouseMove(false).setSettingButton(toolBar).setSouthComponent(footerPanel).setCancelOnWindowDeactivation(myCancelOnWindowDeactivation);
  if (myAddDetailViewToEast) {
    builder.setEastComponent((JComponent)myDetailView);
  }
  String title=myDelegate.getTitle();
  if (title != null) {
    builder.setTitle(title);
  }
  builder.setItemChoosenCallback(runnable).setCloseOnEnter(myCloseOnEnter).setMayBeParent(true).setDimensionServiceKey(myDimensionServiceKey).setFilteringEnabled(new Function<Object,String>(){
    public String fun(    Object o){
      return ((ItemWrapper)o).speedSearchText();
    }
  }
);
  if (myMinSize != null) {
    builder.setMinSize(myMinSize);
  }
  myPopup=builder.createPopup();
  builder.getScrollPane().setBorder(IdeBorderFactory.createBorder(SideBorder.RIGHT));
  myPopup.addListener(new JBPopupListener(){
    @Override public void beforeShown(    LightweightWindowEvent event){
    }
    @Override public void onClosed(    LightweightWindowEvent event){
      myDetailView.clearEditor();
    }
  }
);
  return myPopup;
}
