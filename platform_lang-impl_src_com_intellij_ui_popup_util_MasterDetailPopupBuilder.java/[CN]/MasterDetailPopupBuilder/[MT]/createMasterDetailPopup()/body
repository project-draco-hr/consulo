{
  final JLabel pathLabel=new JLabel(" ");
  pathLabel.setHorizontalAlignment(SwingConstants.RIGHT);
  final Font font=pathLabel.getFont();
  pathLabel.setFont(font.deriveFont((float)10));
  final Alarm updateAlarm=new Alarm(Alarm.ThreadToUse.SWING_THREAD);
  final DetailViewImpl detailView=new DetailViewImpl(myProject);
  myList.setCellRenderer(new ItemRenderer(myProject));
  final ListSelectionModel selectionModel=myList.getSelectionModel();
  selectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  final boolean directionUp[]=new boolean[1];
  selectionModel.addListSelectionListener(new ListSelectionListener(){
    private String getTitle2Text(    String fullText){
      int labelWidth=pathLabel.getWidth();
      if (fullText == null || fullText.length() == 0)       return " ";
      while (pathLabel.getFontMetrics(pathLabel.getFont()).stringWidth(fullText) > labelWidth) {
        int sep=fullText.indexOf(File.separatorChar,4);
        if (sep < 0)         return fullText;
        fullText="..." + fullText.substring(sep);
      }
      return fullText;
    }
    public void valueChanged(    final ListSelectionEvent e){
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          updatePathLabel();
        }
      }
);
    }
    private void updatePreviewPanel(    final ItemWrapper wrapper){
      updateAlarm.cancelAllRequests();
      updateAlarm.addRequest(new Runnable(){
        public void run(){
          detailView.updateWithItem(wrapper);
        }
      }
,100);
    }
    private void updatePathLabel(){
      final Object[] values=myList.getSelectedValues();
      ItemWrapper wrapper=null;
      if (values != null && values.length == 1) {
        wrapper=(ItemWrapper)values[0];
        if (wrapper instanceof SplitterItem) {
          if (!directionUp[0]) {
            final int index=myList.getSelectedIndex();
            if (myList.getItemsCount() >= index + 1) {
              myList.setSelectedIndex(index + 1);
            }
 else {
              myList.setSelectedIndex(0);
            }
          }
 else {
            final int index=myList.getSelectedIndex();
            if (index - 1 > 0) {
              myList.setSelectedIndex(index - 1);
            }
 else {
              myList.setSelectedIndex(myList.getItemsCount() - 1);
            }
          }
        }
        pathLabel.setText(getTitle2Text(wrapper.footerText()));
      }
 else {
        pathLabel.setText(" ");
      }
      updatePreviewPanel(wrapper);
    }
  }
);
  final Ref<JBPopup> popupRef=Ref.create(null);
  Runnable runnable=new Runnable(){
    public void run(){
      IdeFocusManager.getInstance(myProject).doWhenFocusSettlesDown(new Runnable(){
        public void run(){
          Object[] values=myList.getSelectedValues();
          if (values.length == 1) {
            ((ItemWrapper)values[0]).execute(myProject,popupRef.get());
          }
 else {
            for (            Object value : values) {
              if (value instanceof BookmarkItem) {
                ((ItemWrapper)value).execute(myProject,popupRef.get());
              }
            }
          }
        }
      }
);
    }
  }
;
  if (myList.getModel().getSize() == 0) {
    myList.clearSelection();
  }
  JPanel footerPanel=new JPanel(new BorderLayout()){
    @Override protected void paintComponent(    Graphics g){
      super.paintComponent(g);
      g.setColor(BORDER_COLOR);
      g.drawLine(0,0,getWidth(),0);
    }
  }
;
  footerPanel.setBorder(BorderFactory.createEmptyBorder(4,4,4,4));
  footerPanel.add(pathLabel);
  myActionToolbar=ActionManager.getInstance().createActionToolbar("",myActions,true);
  myActionToolbar.setReservePlaceAutoPopupIcon(false);
  myActionToolbar.setMinimumButtonSize(new Dimension(20,20));
  final JComponent toolBar=myActionToolbar.getComponent();
  toolBar.setOpaque(false);
  final JBPopup popup=new PopupChooserBuilder(myList).setTitle(myDelegate.getTitle()).setMovable(true).setResizable(true).setAutoselectOnMouseMove(false).setSettingButton(toolBar).setSouthComponent(footerPanel).setEastComponent(detailView).setItemChoosenCallback(runnable).setCloseOnEnter(myCloseOnEnter).setMayBeParent(true).setMinSize(new Dimension(-1,700)).setFilteringEnabled(new Function<Object,String>(){
    public String fun(    Object o){
      return ((ItemWrapper)o).speedSearchText();
    }
  }
).createPopup();
  popupRef.set(popup);
  myList.addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_DELETE) {
        removeSelectedItems(MasterDetailPopupBuilder.this.myList,MasterDetailPopupBuilder.this.myProject);
      }
 else       if (e.getKeyCode() == KeyEvent.VK_UP) {
        directionUp[0]=true;
      }
 else       if (e.getKeyCode() == KeyEvent.VK_DOWN) {
        directionUp[0]=false;
      }
 else       if (e.getModifiersEx() == 0) {
        myDelegate.handleMnemonic(e,myProject,popup);
      }
    }
  }
);
  return popup;
}
