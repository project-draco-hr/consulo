{
  PsiMethod method=null;
  PsiParameter parameter=null;
  int index=0;
  if (element instanceof PsiMethod) {
    method=(PsiMethod)element;
  }
 else   if (element instanceof PsiParameter) {
    parameter=(PsiParameter)element;
    method=(PsiMethod)parameter.getDeclarationScope();
    index=method.getParameterList().getParameterIndex(parameter);
  }
 else {
    LOG.error("Parameter or method expected, but found " + (element == null ? "null" : element.getClass().getName()));
    return false;
  }
  final PsiMethod superMethod=PsiSuperMethodUtil.findDeepestSuperMethod(method);
  PsiMethod keyMethod;
  PsiParameter keyParameter=null;
  if (superMethod != null) {
    Boolean good=myMethodCache.get(superMethod);
    if (good != null && !good.booleanValue()) {
      return false;
    }
    final PsiElement e=parameter == null ? (PsiElement)superMethod : superMethod.getParameterList().getParameters()[index];
    if (!victims.contains(e)) {
      myMethodCache.put(superMethod,new Boolean(false));
      return false;
    }
    keyMethod=superMethod;
    if (parameter != null) {
      keyParameter=(PsiParameter)e;
      myParameters.put(parameter,keyParameter);
    }
  }
 else {
    Boolean good=myMethodCache.get(method);
    if (good != null) {
      return good.booleanValue();
    }
    keyMethod=method;
    keyParameter=parameter;
  }
  final PsiMethod[] overriders=helper.findOverridingMethods(keyMethod,helper.getAccessScope(keyMethod),true);
  PsiMethod prev=keyMethod;
  for (int i=0; i < overriders.length; i++) {
    PsiMethod overrider=overriders[i];
    if (prev != null) {
      mySuper.put(overrider,prev);
      prev=overrider;
    }
    PsiElement e=parameter == null ? (PsiElement)overrider : overrider.getParameterList().getParameters()[index];
    if (!victims.contains(e)) {
      myMethodCache.put(keyMethod,new Boolean(false));
      return false;
    }
    if (parameter != null) {
      myParameters.put(parameter,keyParameter);
    }
  }
  myMethodCache.put(keyMethod,new Boolean(true));
  return true;
}
