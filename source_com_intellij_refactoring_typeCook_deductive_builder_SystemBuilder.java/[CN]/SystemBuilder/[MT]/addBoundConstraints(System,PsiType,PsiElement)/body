{
  final PsiType elemenType=(element instanceof PsiMethod) ? ((PsiMethod)element).getReturnType() : (element instanceof PsiVariable) ? ((PsiVariable)element).getType() : null;
  if (elemenType != null) {
    new Object(){
      void brrrr(      final PsiType defined,      final PsiType type){
        final PsiClassType.ClassResolveResult resultDefined=Util.resolveType(defined);
        final PsiClassType.ClassResolveResult resultType=Util.resolveType(type);
        final PsiClass definedClass=resultDefined.getElement();
        if (definedClass == null || !definedClass.equals(resultType.getElement())) {
          return;
        }
        final PsiSubstitutor definedSubst=resultDefined.getSubstitutor();
        final PsiSubstitutor typeSubst=resultType.getSubstitutor();
        for (Iterator<PsiTypeParameter> i=definedSubst.getSubstitutionMap().keySet().iterator(); i.hasNext(); ) {
          final PsiTypeParameter parameter=i.next();
          final PsiClassType[] extendsList=parameter.getExtendsList().getReferencedTypes();
          final PsiType definedType=definedSubst.substitute(parameter);
          if (definedType instanceof PsiTypeVariable) {
            for (int j=0; j < extendsList.length; j++) {
              final PsiType extendsType=new Object(){
                PsiType replaceWildCards(                final PsiType type){
                  if (type instanceof PsiWildcardType) {
                    final PsiWildcardType wildcard=((PsiWildcardType)type);
                    final PsiType var=myTypeVariableFactory.create();
                    final PsiType bound=wildcard.getBound();
                    if (bound != null) {
                      if (wildcard.isExtends()) {
                        system.addSubtypeConstraint(Util.banalize(Util.substituteType(replaceWildCards(bound),definedSubst)),var);
                      }
 else {
                        system.addSubtypeConstraint(var,Util.banalize(Util.substituteType(replaceWildCards(bound),definedSubst)));
                      }
                    }
                    return var;
                  }
 else                   if (type instanceof PsiClassType) {
                    final PsiClassType.ClassResolveResult result=Util.resolveType(type);
                    final PsiClass aClass=result.getElement();
                    final PsiSubstitutor aSubst=result.getSubstitutor();
                    if (aClass != null) {
                      PsiSubstitutor theSubst=PsiSubstitutor.EMPTY;
                      for (Iterator<PsiTypeParameter> i=aSubst.getSubstitutionMap().keySet().iterator(); i.hasNext(); ) {
                        final PsiTypeParameter p=i.next();
                        theSubst=theSubst.put(p,replaceWildCards(aSubst.substitute(p)));
                      }
                      return aClass.getManager().getElementFactory().createType(aClass,theSubst);
                    }
                  }
                  return type;
                }
              }
.replaceWildCards(extendsList[j]);
              system.addSubtypeConstraint(definedType,Util.banalize(Util.substituteType(extendsType,definedSubst)));
            }
          }
 else {
            brrrr(definedType,typeSubst.substitute(parameter));
          }
        }
      }
    }
.brrrr(definedType,elemenType);
  }
}
