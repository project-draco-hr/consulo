{
  if (!(element instanceof GenericDomValue))   return null;
  GenericDomValue domElement=(GenericDomValue)element;
  final Class parameter=DomUtil.getGenericValueType(domElement.getDomElementType());
  if (PsiType.class.isAssignableFrom(parameter)) {
    return new PsiTypeReference(this,(GenericDomValue<PsiType>)domElement);
  }
  if (PsiClass.class.isAssignableFrom(parameter)) {
    return new PsiClassReference(this,(GenericDomValue<PsiClass>)domElement);
  }
  if (Integer.class.isAssignableFrom(parameter)) {
    return new GenericDomValueReference(this,domElement){
      public Object[] getVariants(){
        return new Object[]{"239","42"};
      }
      public PsiElement resolveInner(){
        return getValueElement();
      }
    }
;
  }
  if (Enum.class.isAssignableFrom(parameter)) {
    return new GenericDomValueReference(this,domElement){
      public Object[] getVariants(){
        final Enum[] enumConstants=(Enum[])parameter.getEnumConstants();
        return ContainerUtil.map2Array(enumConstants,String.class,new Function<Enum,String>(){
          public String fun(          final Enum s){
            return NamedEnumUtil.getEnumValueByElement(s);
          }
        }
);
      }
      public PsiElement resolveInner(){
        return getValueElement();
      }
    }
;
  }
  if (Boolean.class.isAssignableFrom(parameter)) {
    return new GenericDomValueReference(this,domElement){
      public Object[] getVariants(){
        return new Object[]{"true","false"};
      }
      public PsiElement resolveInner(){
        return getValueElement();
      }
    }
;
  }
  if (!String.class.isAssignableFrom(parameter)) {
    return new GenericDomValueReference(this,domElement);
  }
  return null;
}
