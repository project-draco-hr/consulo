{
  if (!(element instanceof PsiAssignmentExpression)) {
    return false;
  }
  final PsiAssignmentExpression assignment=(PsiAssignmentExpression)element;
  final PsiJavaToken sign=assignment.getOperationSign();
  final IElementType tokenType=sign.getTokenType();
  if (!JavaTokenType.EQ.equals(tokenType)) {
    return false;
  }
  final PsiExpression rhs=assignment.getRExpression();
  if (rhs == null) {
    return false;
  }
  if (!(rhs instanceof PsiBinaryExpression)) {
    return false;
  }
  final PsiBinaryExpression binaryRhs=(PsiBinaryExpression)rhs;
  final PsiExpression rhsRhs=binaryRhs.getROperand();
  final PsiExpression rhsLhs=binaryRhs.getLOperand();
  if (rhsRhs == null) {
    return false;
  }
  final PsiJavaToken operatorSign=binaryRhs.getOperationSign();
  final IElementType rhsTokenType=operatorSign.getTokenType();
  if (JavaTokenType.OROR.equals(rhsTokenType) || JavaTokenType.ANDAND.equals(rhsTokenType)) {
    return false;
  }
  final PsiExpression lhs=assignment.getLExpression();
  if (SideEffectChecker.mayHaveSideEffects(lhs)) {
    return false;
  }
  if (!EquivalenceChecker.expressionsAreEquivalent(lhs,rhsLhs)) {
    return false;
  }
  return !ErrorUtil.containsError(element);
}
