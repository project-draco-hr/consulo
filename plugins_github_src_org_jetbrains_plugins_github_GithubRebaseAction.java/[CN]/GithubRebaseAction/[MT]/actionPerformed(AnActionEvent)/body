{
  final Project project=e.getData(PlatformDataKeys.PROJECT);
  if (!GithubUtil.checkCredentials(project)) {
    Messages.showErrorDialog(project,"Cannot login with GitHub credentials. Please configure them in File | Settings | GitHub",CANNOT_PERFORM_GITHUB_REBASE);
    return;
  }
  final VirtualFile root=project.getBaseDir();
  final boolean gitDetected=GitUtil.isUnderGit(root);
  if (!gitDetected) {
    Messages.showErrorDialog(project,"Cannot find any git repository configured for the project",CANNOT_PERFORM_GITHUB_REBASE);
    return;
  }
  try {
    final GitRemote githubRemote=GithubUtil.accessToGithubWithModalProgress(project,new Computable<GitRemote>(){
      @Override public GitRemote compute(){
        ProgressManager.getInstance().getProgressIndicator().setText("Reading branches information");
        return GithubUtil.getGithubBoundRepository(project);
      }
    }
);
    final List<GitRemote> gitRemotes=GitRemote.list(project,root);
    LOG.assertTrue(githubRemote != null);
    final String pushUrl=githubRemote.pushUrl();
    final String login=GithubSettings.getInstance().getLogin();
    final int index=pushUrl.lastIndexOf(login);
    if (index == -1) {
      Messages.showErrorDialog(project,"Github remote repository doesn't seem to be your own repository: " + pushUrl,CANNOT_PERFORM_GITHUB_REBASE);
      return;
    }
    String repoName=pushUrl.substring(index + login.length() + 1);
    if (repoName.endsWith(".git")) {
      repoName=repoName.substring(0,repoName.length() - 4);
    }
    final RepositoryInfo repositoryInfo=GithubUtil.getDetailedRepositoryInfo(project,login,repoName);
    if (repositoryInfo == null) {
      Messages.showErrorDialog(project,"Github repository doesn't seem to be your own repository: " + pushUrl,CANNOT_PERFORM_GITHUB_REBASE);
      return;
    }
    if (!repositoryInfo.isFork()) {
      Messages.showErrorDialog(project,"Github repository '" + repoName + "' is not a forked one",CANNOT_PERFORM_GITHUB_REBASE);
      return;
    }
    final String parent=repositoryInfo.getParent();
    LOG.assertTrue(parent != null,"Parent repository not found!");
    final String parentRepoSuffix=parent + ".git";
    final String parentRepoUrl="git://github.com/" + parentRepoSuffix;
    boolean remoteForParentSeen=false;
    for (    GitRemote gitRemote : gitRemotes) {
      final String fetchUrl=gitRemote.fetchUrl();
      if (fetchUrl.endsWith(parent + ".git")) {
        remoteForParentSeen=true;
        break;
      }
    }
    if (!remoteForParentSeen) {
      final int result=Messages.showYesNoDialog(project,"It is necessary to have '" + parentRepoUrl + "' as a configured remote. Add remote?","Github Rebase",Messages.getQuestionIcon());
      if (result != Messages.OK) {
        return;
      }
      GithubUtil.accessToGithubWithModalProgress(project,new Runnable(){
        public void run(){
          try {
            LOG.info("Adding GitHub parent as a remote host");
            ProgressManager.getInstance().getProgressIndicator().setText("Adding GitHub parent as a remote host");
            final GitSimpleHandler addRemoteHandler=new GitSimpleHandler(project,root,GitCommand.REMOTE);
            addRemoteHandler.setNoSSH(true);
            addRemoteHandler.setSilent(true);
            final String remoteName=parent.substring(0,parent.lastIndexOf('/'));
            addRemoteHandler.addParameters("add",remoteName,parentRepoUrl);
            addRemoteHandler.run();
            if (addRemoteHandler.getExitCode() != 0) {
              showErrorMessageInEDT(project,"Failed to add GitHub remote: '" + parentRepoUrl + "'");
              return;
            }
            LOG.info("Updating remotes");
            ProgressManager.getInstance().getProgressIndicator().setText("Updating remotes");
            final GitSimpleHandler updateRemotesHandler=new GitSimpleHandler(project,root,GitCommand.REMOTE);
            updateRemotesHandler.setNoSSH(true);
            updateRemotesHandler.setSilent(true);
            updateRemotesHandler.addParameters("update");
            updateRemotesHandler.run();
            if (updateRemotesHandler.getExitCode() != 0) {
              showErrorMessageInEDT(project,"Failed to update remotes");
              return;
            }
          }
 catch (          VcsException e1) {
            final String message="Error happened during git operation: " + e1.getMessage();
            showErrorMessageInEDT(project,message);
            return;
          }
        }
      }
);
    }
    BasicAction.saveAll();
    final GithubRebase action=(GithubRebase)ActionManager.getInstance().getAction("Github.Rebase.Internal");
    action.setRebaseOrigin(parent);
    final AnActionEvent actionEvent=new AnActionEvent(e.getInputEvent(),e.getDataContext(),e.getPlace(),e.getPresentation(),e.getActionManager(),e.getModifiers());
    action.actionPerformed(actionEvent);
  }
 catch (  VcsException e1) {
    Messages.showErrorDialog(project,"Error happened during git operation: " + e1.getMessage(),CANNOT_PERFORM_GITHUB_REBASE);
    return;
  }
}
