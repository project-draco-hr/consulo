{
  final Project project=e.getData(PlatformDataKeys.PROJECT);
  while (!GithubUtil.checkCredentials(project)) {
    final GithubLoginDialog dialog=new GithubLoginDialog(project);
    dialog.show();
    if (!dialog.isOK()) {
      return;
    }
  }
  final VirtualFile root=project.getBaseDir();
  GitRepositoryManager manager=GitUtil.getRepositoryManager(project);
  if (manager == null) {
    LOG.info("No GitRepositoryManager instance available. Action cancelled.");
    return;
  }
  final GitRepository gitRepository=manager.getRepositoryForFile(project.getBaseDir());
  final GitRemote remote=GithubUtil.findGitHubRemoteBranch(gitRepository);
  final String pushUrl=GithubUtil.getGithubUrl(remote);
  final String login=GithubSettings.getInstance().getLogin();
  final int index=pushUrl.lastIndexOf(login);
  if (index == -1) {
    Messages.showErrorDialog(project,"Github remote repository doesn't seem to be your own repository: " + pushUrl,CANNOT_PERFORM_GITHUB_REBASE);
    return;
  }
  String repoName=pushUrl.substring(index + login.length() + 1);
  if (repoName.endsWith(".git")) {
    repoName=repoName.substring(0,repoName.length() - 4);
  }
  final RepositoryInfo repositoryInfo=GithubUtil.getDetailedRepositoryInfo(project,login,repoName);
  if (repositoryInfo == null) {
    Messages.showErrorDialog(project,"Github repository doesn't seem to be your own repository: " + pushUrl,CANNOT_PERFORM_GITHUB_REBASE);
    return;
  }
  if (!repositoryInfo.isFork()) {
    Messages.showErrorDialog(project,"Github repository '" + repoName + "' is not a forked one",CANNOT_PERFORM_GITHUB_REBASE);
    return;
  }
  final String parent=repositoryInfo.getParentName();
  LOG.assertTrue(parent != null,"Parent repository not found!");
  final String parentRepoSuffix=parent + ".git";
  final String parentRepoUrl="https://github.com/" + parentRepoSuffix;
  final Ref<String> remoteForForkParentRepo=new Ref<String>();
  for (  GitRemote gitRemote : gitRepository.getRemotes()) {
    for (    String url : gitRemote.getUrls()) {
      if (url.endsWith("/" + parent + ".git")) {
        remoteForForkParentRepo.set(gitRemote.getName());
        break;
      }
    }
  }
  if (remoteForForkParentRepo.isNull()) {
    final int result=Messages.showYesNoDialog(project,"It is necessary to have '" + parentRepoUrl + "' as a configured remote. Add remote?","Github Rebase",Messages.getQuestionIcon());
    if (result != Messages.OK) {
      return;
    }
    GithubUtil.accessToGithubWithModalProgress(project,new Runnable(){
      public void run(){
        try {
          LOG.info("Adding GitHub parent as a remote host");
          ProgressManager.getInstance().getProgressIndicator().setText("Adding GitHub parent as a remote host");
          final GitSimpleHandler addRemoteHandler=new GitSimpleHandler(project,root,GitCommand.REMOTE);
          addRemoteHandler.setNoSSH(true);
          addRemoteHandler.setSilent(true);
          remoteForForkParentRepo.set("upstream");
          addRemoteHandler.addParameters("add",remoteForForkParentRepo.get(),parentRepoUrl);
          addRemoteHandler.run();
          if (addRemoteHandler.getExitCode() != 0) {
            showErrorMessageInEDT(project,"Failed to add GitHub remote: '" + parentRepoUrl + "'");
          }
          gitRepository.update(GitRepository.TrackedTopic.CONFIG);
        }
 catch (        VcsException e1) {
          final String message="Error happened during git operation: " + e1.getMessage();
          showErrorMessageInEDT(project,message);
        }
      }
    }
);
  }
  boolean fetchedSuccessfully=fetchParentOrNotifyError(project,gitRepository,remoteForForkParentRepo.get());
  if (!fetchedSuccessfully) {
    return;
  }
  BasicAction.saveAll();
  final GithubRebase action=(GithubRebase)ActionManager.getInstance().getAction("Github.Rebase.Internal");
  action.setRebaseOrigin(remoteForForkParentRepo.get());
  final AnActionEvent actionEvent=new AnActionEvent(e.getInputEvent(),e.getDataContext(),e.getPlace(),e.getPresentation(),e.getActionManager(),e.getModifiers());
  action.actionPerformed(actionEvent);
}
