{
  final Project project=e.getData(PlatformDataKeys.PROJECT);
  final VirtualFile[] roots=ProjectRootManager.getInstance(project).getContentRoots();
  if (roots.length == 0) {
    Messages.showErrorDialog(project,"Project doesn't have any project roots","Cannot create new GitHub repository");
    return;
  }
  final VirtualFile root=roots[0];
  final boolean gitDetected=GitUtil.isUnderGit(root);
  if (!gitDetected) {
    Messages.showErrorDialog(project,"Cannot find any git repository configured for the project","Cannot perform github rebase");
    return;
  }
  try {
    final GitBranch currentBranch=GitBranch.current(project,root);
    if (currentBranch == null) {
      Messages.showErrorDialog(project,"Cannot find current branch","Cannot perform github rebase");
      return;
    }
    if (!"master".equals(currentBranch.getName())) {
      Messages.showErrorDialog(project,"Cannot perform rebase with '" + currentBranch.getName() + "' branch.\nPlease switch to master","Cannot perform github rebase");
      return;
    }
  }
 catch (  VcsException e1) {
    Messages.showErrorDialog(project,"Error happened during git operation: " + e1.getMessage(),"Cannot perform github rebase");
    return;
  }
  GitRemote githubRemote=null;
  try {
    final List<GitRemote> gitRemotes=GitRemote.list(project,root);
    if (gitRemotes.isEmpty()) {
      Messages.showErrorDialog(project,"Git repository doesn't have any remotes configured","Cannot perform github rebase");
      return;
    }
    for (    GitRemote gitRemote : gitRemotes) {
      if (gitRemote.pushUrl().contains("git@github.com")) {
        githubRemote=gitRemote;
        break;
      }
    }
    if (githubRemote == null) {
      Messages.showErrorDialog(project,"Configured own github repository is not found","Cannot perform github rebase");
      return;
    }
  }
 catch (  VcsException e2) {
    Messages.showErrorDialog(project,"Error happened during git operation: " + e2.getMessage(),"Cannot perform github rebase");
    return;
  }
  final String pushUrl=githubRemote.pushUrl();
  final String login=GithubSettings.getInstance().getLogin();
  final int index=pushUrl.lastIndexOf(login);
  if (index == -1) {
    Messages.showErrorDialog(project,"Github remote repository doesn't seem to be your own repository: " + pushUrl,"Cannot perform github rebase");
    return;
  }
  String repoName=pushUrl.substring(index + login.length() + 1);
  if (repoName.endsWith(".git")) {
    repoName=repoName.substring(0,repoName.length() - 4);
  }
  final RepositoryInfo repositoryInfo=GithubUtil.getDetailedRepositoryInfo(project,repoName);
  if (repositoryInfo == null) {
    Messages.showErrorDialog(project,"Github repository doesn't seem to be your own repository: " + pushUrl,"Cannot perform github rebase");
    return;
  }
  if (!repositoryInfo.isFork()) {
    Messages.showErrorDialog(project,"Github repository '" + repoName + "' is not a forked one","Cannot perform github rebase");
    return;
  }
  final String parent=repositoryInfo.getParent();
  LOG.assertTrue(parent != null,"Parent repository not found!");
  final String parentRepoString="http://github.com/" + parent;
  BasicAction.saveAll();
  int i=Messages.showYesNoDialog(project,"Perform rebase relative to '" + parentRepoString + "'?","Github Rebase",Messages.getQuestionIcon());
  if (i != Messages.OK) {
    return;
  }
}
