{
  TextOccurrencesUtil.UsageInfoFactory nonCodeUsageFactory=new TextOccurrencesUtil.UsageInfoFactory(){
    public UsageInfo createUsageInfo(    @NotNull PsiElement usage,    int startOffset,    int endOffset){
      if (!insideElements.isInsideDeleted(usage)) {
        return new SafeDeleteReferenceSimpleDeleteUsageInfo(usage,element,startOffset,endOffset,true,false);
      }
 else {
        return null;
      }
    }
  }
;
  if (mySearchInCommentsAndStrings) {
    String stringToSearch=RefactoringUtil.getStringToSearch(element,false);
    if (stringToSearch != null) {
      RefactoringUtil.addUsagesInStringsAndComments(element,stringToSearch,usages,nonCodeUsageFactory);
    }
  }
  if (mySearchNonJava && (element instanceof PsiClass || element instanceof PsiPackage)) {
    String stringToSearch=RefactoringUtil.getStringToSearch(element,true);
    if (stringToSearch != null) {
      TextOccurrencesUtil.addTextOccurences(element,stringToSearch,GlobalSearchScope.projectScope(myProject),usages,nonCodeUsageFactory);
    }
  }
}
