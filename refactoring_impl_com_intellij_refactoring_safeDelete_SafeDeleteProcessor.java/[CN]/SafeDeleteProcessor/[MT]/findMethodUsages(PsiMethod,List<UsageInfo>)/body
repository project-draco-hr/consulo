{
  PsiManager manager=psiMethod.getManager();
  final PsiSearchHelper searchHelper=manager.getSearchHelper();
  final Collection<PsiReference> references=ReferencesSearch.search(psiMethod).findAll();
  if (psiMethod.isConstructor()) {
    findConstructorUsages(psiMethod,references,usages);
    return;
  }
  final PsiMethod[] overridingMethods=removeDeletedMethods(OverridingMethodsSearch.search(psiMethod,psiMethod.getUseScope(),true).toArray(PsiMethod.EMPTY_ARRAY));
  boolean anyRefs=false;
  for (  PsiReference reference : references) {
    final PsiElement element=reference.getElement();
    if (!isInside(element,myElements) && !isInside(element,overridingMethods)) {
      usages.add(new SafeDeleteReferenceSimpleDeleteUsageInfo(element,psiMethod,false));
      anyRefs=true;
    }
  }
  final UsageInsideDeleted usageInsideDeleted;
  if (!anyRefs) {
    HashMap<PsiMethod,Collection<PsiReference>> methodToReferences=new HashMap<PsiMethod,Collection<PsiReference>>();
    for (    PsiMethod overridingMethod : overridingMethods) {
      final Collection<PsiReference> overridingReferences=ReferencesSearch.search(overridingMethod).findAll();
      methodToReferences.put(overridingMethod,overridingReferences);
    }
    final Set<PsiMethod> validOverriding=validateOverridingMethods(psiMethod,references,Arrays.asList(overridingMethods),methodToReferences,usages);
    usageInsideDeleted=new UsageInsideDeleted(){
      public boolean isInsideDeleted(      PsiElement usage){
        if (usage instanceof PsiFile)         return false;
        return isInside(usage,myElements) || isInside(usage,validOverriding);
      }
    }
;
  }
 else {
    usageInsideDeleted=myInsideDeletedElements;
  }
  addNonCodeUsages(psiMethod,usages,usageInsideDeleted);
}
