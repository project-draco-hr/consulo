{
  final boolean justPrivates=containsOnlyPrivates(psiClass);
  for (  PsiReference reference : ReferencesSearch.search(psiClass).findAll()) {
    final PsiElement element=reference.getElement();
    if (!isInside(element,myElements)) {
      PsiElement parent=element.getParent();
      if (parent instanceof PsiReferenceList) {
        final PsiElement pparent=parent.getParent();
        if (pparent instanceof PsiClass) {
          final PsiClass inheritor=(PsiClass)pparent;
          if (justPrivates) {
            if (parent.equals(inheritor.getExtendsList()) || parent.equals(inheritor.getImplementsList())) {
              usages.add(new SafeDeleteExtendsClassUsageInfo((PsiJavaCodeReferenceElement)element,psiClass,inheritor));
              continue;
            }
          }
        }
      }
      LOG.assertTrue(element.getTextRange() != null);
      usages.add(new SafeDeleteReferenceSimpleDeleteUsageInfo(element,psiClass,parent instanceof PsiImportStatement));
    }
  }
  addNonCodeUsages(psiClass,usages,myInsideDeletedElements);
}
