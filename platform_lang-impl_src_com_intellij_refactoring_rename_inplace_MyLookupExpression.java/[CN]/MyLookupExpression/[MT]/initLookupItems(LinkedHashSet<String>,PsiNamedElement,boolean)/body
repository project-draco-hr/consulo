{
  if (names == null) {
    names=new LinkedHashSet<String>();
    for (    NameSuggestionProvider provider : Extensions.getExtensions(NameSuggestionProvider.EP_NAME)) {
      final SuggestedNameInfo suggestedNameInfo=provider.getSuggestedNames(elementToRename,elementToRename,names);
      if (suggestedNameInfo != null && provider instanceof PreferrableNameSuggestionProvider && !((PreferrableNameSuggestionProvider)provider).shouldCheckOthers()) {
        break;
      }
    }
  }
  final LookupElement[] lookupElements=new LookupElement[names.size()];
  final Iterator<String> iterator=names.iterator();
  for (int i=0; i < lookupElements.length; i++) {
    final String suggestion=iterator.next();
    lookupElements[i]=LookupElementBuilder.create(suggestion).withInsertHandler(new InsertHandler<LookupElement>(){
      @Override public void handleInsert(      InsertionContext context,      LookupElement item){
        if (shouldSelectAll)         return;
        final Editor topLevelEditor=InjectedLanguageFacadeImpl.getTopLevelEditor(context.getEditor());
        final TemplateState templateState=TemplateManagerImpl.getTemplateState(topLevelEditor);
        if (templateState != null) {
          final TextRange range=templateState.getCurrentVariableRange();
          if (range != null) {
            topLevelEditor.getDocument().replaceString(range.getStartOffset(),range.getEndOffset(),suggestion);
          }
        }
      }
    }
);
  }
  return lookupElements;
}
