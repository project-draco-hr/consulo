{
  final SortedListModel<String> listModel=new SortedListModel<String>(new Comparator<String>(){
    public int compare(    final String o1,    final String o2){
      return o1.compareTo(o2);
    }
  }
);
  final JList injectionList=new JBList(listModel);
  for (  String s : list) {
    listModel.add(s);
  }
  injectionList.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
  final DefaultActionGroup actionGroup=new DefaultActionGroup();
  final ReorderableListController<String> controller=ReorderableListController.create(injectionList,actionGroup);
  controller.addAddAction(InspectionsBundle.message("special.annotations.list.add.annotation.class"),new Factory<String>(){
    public String create(){
      Project project=PlatformDataKeys.PROJECT.getData(DataManager.getInstance().getDataContext(injectionList));
      if (project == null)       project=ProjectManager.getInstance().getDefaultProject();
      TreeClassChooser chooser=TreeClassChooserFactory.getInstance(project).createWithInnerClassesScopeChooser(InspectionsBundle.message("special.annotations.list.annotation.class"),GlobalSearchScope.allScope(project),new ClassFilter(){
        @Override public boolean isAccepted(        PsiClass aClass){
          return aClass.isAnnotationType();
        }
      }
,null);
      chooser.showDialog();
      final PsiClass selected=chooser.getSelected();
      return selected != null ? selected.getQualifiedName() : null;
    }
  }
,true);
  if (acceptPatterns) {
    controller.addAction(new AnAction(InspectionsBundle.message("special.annotations.list.annotation.pattern"),InspectionsBundle.message("special.annotations.list.annotation.pattern"),IconLoader.getIcon("/general/add.png")){
      @Override public void actionPerformed(      AnActionEvent e){
        String selectedPattern=Messages.showInputDialog(InspectionsBundle.message("special.annotations.list.annotation.pattern"),InspectionsBundle.message("special.annotations.list.annotation.pattern"),Messages.getQuestionIcon());
        if (selectedPattern != null) {
          listModel.add(selectedPattern);
        }
      }
    }
);
  }
  controller.addRemoveAction(InspectionsBundle.message("special.annotations.list.remove.annotation.class"));
  injectionList.getModel().addListDataListener(new ListDataListener(){
    public void intervalAdded(    ListDataEvent e){
      listChanged();
    }
    private void listChanged(){
      list.clear();
      for (int i=0; i < listModel.getSize(); i++) {
        list.add((String)listModel.getElementAt(i));
      }
    }
    public void intervalRemoved(    ListDataEvent e){
      listChanged();
    }
    public void contentsChanged(    ListDataEvent e){
      listChanged();
    }
  }
);
  final JScrollPane listScrollPane=ScrollPaneFactory.createScrollPane(injectionList);
  listScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
  listScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
  final FontMetrics fontMetrics=injectionList.getFontMetrics(injectionList.getFont());
  listScrollPane.setPreferredSize(new Dimension(0,fontMetrics.getHeight() * 5));
  listScrollPane.setMinimumSize(new Dimension(0,fontMetrics.getHeight() * 3));
  final JPanel listPanel=new JPanel(new BorderLayout());
  ActionToolbar actionToolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,actionGroup,true);
  listPanel.add(actionToolbar.getComponent(),BorderLayout.NORTH);
  listPanel.add(listScrollPane,BorderLayout.CENTER);
  JPanel panel=new JPanel(new BorderLayout());
  panel.add(SeparatorFactory.createSeparator(borderTitle,null),BorderLayout.NORTH);
  panel.add(listPanel,BorderLayout.CENTER);
  return panel;
}
