{
  if (psiFile.getVirtualFile() == null)   return true;
  CharSequence editorText=document.getCharsSequence();
  int documentLength=document.getTextLength();
  if (psiFile.textMatches(editorText)) {
    LOG.assertTrue(psiFile.getTextLength() == documentLength);
    LOG.debug("Consistent OK: length=" + documentLength + "; file="+ psiFile.getName()+ ":"+ psiFile.getClass());
    return true;
  }
  char[] fileText=psiFile.textToCharArray();
  StringBuilder error=new StringBuilder();
  error.append("File text mismatch after reparse. File length=" + fileText.length + "; Doc length="+ documentLength+ "\n");
  int i=0;
  for (; i < documentLength; i++) {
    if (i >= fileText.length) {
      error.append("editorText.length > psiText.length i=" + i + "\n");
      break;
    }
    if (editorText.charAt(i) != fileText[i]) {
      error.append("first unequal char i=" + i + "\n");
      break;
    }
  }
  error.append("*********************************************" + "\n");
  if (i <= 500) {
    error.append("Equal part:" + editorText.subSequence(0,i) + "\n");
  }
 else {
    error.append("Equal part start:\n" + editorText.subSequence(0,200) + "\n");
    error.append("................................................" + "\n");
    error.append("................................................" + "\n");
    error.append("................................................" + "\n");
    error.append("Equal part end:\n" + editorText.subSequence(i - 200,i) + "\n");
  }
  error.append("*********************************************" + "\n");
  error.append("Editor Text tail:\n" + editorText.subSequence(i,Math.min(i + 300,documentLength)) + "\n");
  error.append("*********************************************" + "\n");
  error.append("Psi Text tail:\n" + new String(fileText,i,Math.min(i + 300,fileText.length) - i) + "\n");
  error.append("*********************************************" + "\n");
  LOG.error(error.toString());
  document.replaceString(0,documentLength,psiFile.getText());
  return false;
}
