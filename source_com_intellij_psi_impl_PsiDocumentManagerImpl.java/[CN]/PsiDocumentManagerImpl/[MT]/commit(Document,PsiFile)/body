{
  if (document.getUserData(KEY_COMMITING) == Boolean.TRUE)   return false;
  document.putUserData(TEMP_TREE_IN_DOCUMENT_KEY,null);
  TextBlock textBlock=getTextBlock(document,file);
  if (textBlock.isEmpty())   return false;
  myIsCommitInProgress=true;
  document.putUserData(KEY_COMMITING,Boolean.TRUE);
  try {
    if (true) {
      if (mySmartPointerManager != null) {
        SmartPointerManagerImpl.synchronizePointers(file);
      }
      ASTNode treeElement=((PsiFileImpl)file).calcTreeElement();
      if (textBlock.isEmpty())       return false;
      textBlock.lock();
      final CharSequence chars=document.getCharsSequence();
      if (file.getViewProvider().getBaseLanguage() == StdLanguages.JSPX && file.getLanguage() == StdLanguages.JAVA) {
        myBlockSupport.reparseRange(file,0,document.getTextLength(),document.getTextLength() - file.getTextLength(),chars);
      }
 else {
        int startOffset=textBlock.getStartOffset();
        int endOffset=textBlock.getTextEndOffset();
        int psiEndOffset=textBlock.getPsiEndOffset();
        myBlockSupport.reparseRange(file,startOffset,psiEndOffset,endOffset - psiEndOffset,chars);
      }
    }
    textBlock.unlock();
    textBlock.clear();
  }
  finally {
    myIsCommitInProgress=false;
    document.putUserData(KEY_COMMITING,Boolean.FALSE);
  }
  return true;
}
