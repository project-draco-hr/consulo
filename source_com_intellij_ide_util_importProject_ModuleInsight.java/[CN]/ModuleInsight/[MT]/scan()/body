{
  myProgress.setIndeterminate(true);
  myProgress.pushState();
  try {
    myProgress.pushState();
    for (    File root : myContentRoots) {
      myProgress.setText("Scanning for libraries " + root.getPath());
      scanLibraries(root);
    }
    myProgress.popState();
    myProgress.pushState();
    for (    Pair<File,String> pair : mySourceRoots) {
      final File sourceRoot=pair.getFirst();
      if (myIgnoredNames.contains(sourceRoot.getName())) {
        continue;
      }
      myProgress.setText("Scanning " + sourceRoot.getPath());
      final HashSet<String> usedPackages=new HashSet<String>();
      mySourceRootToReferencedPackagesMap.put(sourceRoot,usedPackages);
      final HashSet<String> selfPackages=new HashSet<String>();
      mySourceRootToPackagesMap.put(sourceRoot,selfPackages);
      scanSources(sourceRoot,pair.getSecond(),usedPackages,selfPackages);
      usedPackages.removeAll(selfPackages);
    }
    myProgress.popState();
    myProgress.setText("Creating modules layout...");
    for (    File srcRoot : mySourceRootToPackagesMap.keySet()) {
      final File moduleContentRoot=srcRoot.getParentFile();
      ModuleDescriptor moduleDescriptor=myContentRootToModules.get(moduleContentRoot);
      if (moduleDescriptor != null) {
        moduleDescriptor.addSourceRoot(srcRoot);
      }
 else {
        moduleDescriptor=new ModuleDescriptor(moduleContentRoot,srcRoot);
        myContentRootToModules.put(moduleContentRoot,moduleDescriptor);
      }
    }
    final Set<File> moduleContentRoots=myContentRootToModules.keySet();
    for (    File contentRoot : moduleContentRoots) {
      final ModuleDescriptor checkedModule=myContentRootToModules.get(contentRoot);
      for (      File jarFile : myJarToPackagesMap.keySet()) {
        final Set<String> jarPackages=myJarToPackagesMap.get(jarFile);
        for (        File srcRoot : checkedModule.getSourceRoots()) {
          if (intersects(mySourceRootToReferencedPackagesMap.get(srcRoot),jarPackages)) {
            checkedModule.addLibraryFile(jarFile);
            break;
          }
        }
      }
      for (      File aContentRoot : moduleContentRoots) {
        final ModuleDescriptor aModule=myContentRootToModules.get(aContentRoot);
        if (checkedModule.equals(aModule)) {
          continue;
        }
        final Set<File> aModuleRoots=aModule.getSourceRoots();
        checkModules:         for (        File srcRoot : checkedModule.getSourceRoots()) {
          final Set<String> referencedBySourceRoot=mySourceRootToReferencedPackagesMap.get(srcRoot);
          for (          File aSourceRoot : aModuleRoots) {
            if (intersects(referencedBySourceRoot,mySourceRootToPackagesMap.get(aSourceRoot))) {
              checkedModule.addDependencyOn(aModule);
              break checkModules;
            }
          }
        }
      }
    }
  }
 catch (  ProcessCanceledException ignored) {
  }
 finally {
    myProgress.popState();
  }
}
