{
  myInformationLabel=JBLabelDecorator.createJBLabelDecorator().setBold(true);
  final FormBuilder formBuilder=FormBuilder.createFormBuilder().addComponent(myInformationLabel).addVerticalGap(UIUtil.LARGE_VGAP - UIUtil.DEFAULT_VGAP);
  DocumentListener documentListener=new DocumentAdapter(){
    @Override public void textChanged(    DocumentEvent event){
      validateOKButton();
    }
  }
;
  if (myShowNewNameField) {
    myNewNameField=new JTextField();
    myNewNameField.getDocument().addDocumentListener(documentListener);
    formBuilder.addLabeledComponent(RefactoringBundle.message("copy.files.new.name.label"),myNewNameField);
  }
  if (myShowDirectoryField) {
    myTargetDirectoryField=new TextFieldWithHistoryWithBrowseButton();
    myTargetDirectoryField.setTextFieldPreferredWidth(MAX_PATH_LENGTH);
    final List<String> recentEntries=RecentsManager.getInstance(myProject).getRecentEntries(RECENT_KEYS);
    if (recentEntries != null) {
      myTargetDirectoryField.getChildComponent().setHistory(recentEntries);
    }
    final FileChooserDescriptor descriptor=FileChooserDescriptorFactory.createSingleFolderDescriptor();
    myTargetDirectoryField.addBrowseFolderListener(RefactoringBundle.message("select.target.directory"),RefactoringBundle.message("the.file.will.be.copied.to.this.directory"),myProject,descriptor,TextComponentAccessor.TEXT_FIELD_WITH_HISTORY_WHOLE_TEXT);
    myTargetDirectoryField.getChildComponent().addDocumentListener(new DocumentAdapter(){
      @Override protected void textChanged(      DocumentEvent e){
        validateOKButton();
      }
    }
);
    formBuilder.addLabeledComponent(RefactoringBundle.message("copy.files.to.directory.label"),myTargetDirectoryField);
    String shortcutText=KeymapUtil.getFirstKeyboardShortcutText(ActionManager.getInstance().getAction(IdeActions.ACTION_CODE_COMPLETION));
    formBuilder.addTooltip(RefactoringBundle.message("path.completion.shortcut",shortcutText));
  }
  return formBuilder.getPanel();
}
