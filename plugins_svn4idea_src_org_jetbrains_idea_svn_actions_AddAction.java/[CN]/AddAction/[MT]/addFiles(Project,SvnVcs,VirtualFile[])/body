{
  VcsBackgroundTask task=new VcsBackgroundTask<VirtualFile[]>(project,getActionName(activeVcs),BackgroundFromStartOption.getInstance(),Collections.singleton(files),true){
    @Override protected void process(    VirtualFile[] items) throws VcsException {
      ProjectLevelVcsManager manager=ProjectLevelVcsManager.getInstance(project);
      manager.startBackgroundVcsOperation();
      try {
        SVNWCClient wcClient=activeVcs.createWCClient();
        final Set<VirtualFile> additionallyDirty=new HashSet<VirtualFile>();
        final FileStatusManager fileStatusManager=FileStatusManager.getInstance(project);
        for (        VirtualFile item : items) {
          VirtualFile current=item.getParent();
          while (current != null) {
            final FileStatus fs=fileStatusManager.getStatus(current);
            if (FileStatus.UNKNOWN.equals(fs)) {
              additionallyDirty.add(current);
              current=current.getParent();
            }
 else {
              break;
            }
          }
        }
        Collection<SVNException> exceptions=SvnCheckinEnvironment.scheduleUnversionedFilesForAddition(wcClient,Arrays.asList(items),true);
        additionallyDirty.addAll(Arrays.asList(items));
        markDirty(project,additionallyDirty);
        if (!exceptions.isEmpty()) {
          final Collection<String> messages=new ArrayList<String>(exceptions.size());
          for (          SVNException exception : exceptions) {
            messages.add(exception.getMessage());
          }
          throw new VcsException(messages);
        }
      }
  finally {
        manager.stopBackgroundVcsOperation();
      }
    }
  }
;
  ProgressManager.getInstance().run(task);
}
