{
  try {
    if (component.getParent() != null) {
      Font componentFont=(Font)myReadMethod.invoke(component,EMPTY_OBJECT_ARRAY);
      if (componentFont instanceof FontUIResource) {
        final Constructor constructor=component.getClass().getConstructor(ArrayUtil.EMPTY_CLASS_ARRAY);
        constructor.setAccessible(true);
        JComponent newComponent=(JComponent)constructor.newInstance(ArrayUtil.EMPTY_OBJECT_ARRAY);
        Font defaultFont=(Font)myReadMethod.invoke(newComponent,EMPTY_OBJECT_ARRAY);
        if (defaultFont == componentFont) {
          return;
        }
        UIDefaults defaults=UIManager.getDefaults();
        Enumeration e=defaults.keys();
        while (e.hasMoreElements()) {
          Object key=e.nextElement();
          Object value=defaults.get(key);
          if (key instanceof String && value == componentFont) {
            setValue(radComponent,FontDescriptor.fromSwingFont((String)key));
            return;
          }
        }
      }
      Font parentFont=(Font)myReadMethod.invoke(component.getParent(),EMPTY_OBJECT_ARRAY);
      if (!Comparing.equal(componentFont,parentFont)) {
        String fontName=componentFont.getName().equals(parentFont.getName()) ? null : componentFont.getName();
        int fontStyle=componentFont.getStyle() == parentFont.getStyle() ? -1 : componentFont.getStyle();
        int fontSize=componentFont.getSize() == parentFont.getSize() ? -1 : componentFont.getSize();
        setValue(radComponent,new FontDescriptor(fontName,fontStyle,fontSize));
      }
    }
  }
 catch (  Exception e) {
  }
}
