{
  final LwIntrospectedProperty property;
  if (int.class.equals(propertyType)) {
    property=new LwIntroIntProperty(name);
  }
 else   if (boolean.class.equals(propertyType)) {
    property=new LwIntroBooleanProperty(name);
  }
 else   if (double.class.equals(propertyType)) {
    property=new LwIntroDoubleProperty(name);
  }
 else   if (String.class.equals(propertyType)) {
    property=new LwRbIntroStringProperty(name);
  }
 else   if (Insets.class.equals(propertyType)) {
    property=new LwIntroInsetsProperty(name);
  }
 else   if (Dimension.class.equals(propertyType)) {
    property=new LwIntroDimensionProperty(name);
  }
 else   if (Rectangle.class.equals(propertyType)) {
    property=new LwIntroRectangleProperty(name);
  }
 else   if (Color.class.equals(propertyType)) {
    property=new LwIntroColorProperty(name);
  }
 else   if (Font.class.equals(propertyType)) {
    property=new LwIntroFontProperty(name);
  }
 else   if (Icon.class.equals(propertyType)) {
    property=new LwIntroIconProperty(name);
  }
 else   if (Component.class.isAssignableFrom(propertyType)) {
    property=new LwIntroComponentProperty(name);
  }
 else   if (ListModel.class.isAssignableFrom(propertyType)) {
    property=new LwIntroListModelProperty(name,propertyType.getName());
  }
 else {
    property=null;
  }
  return property;
}
