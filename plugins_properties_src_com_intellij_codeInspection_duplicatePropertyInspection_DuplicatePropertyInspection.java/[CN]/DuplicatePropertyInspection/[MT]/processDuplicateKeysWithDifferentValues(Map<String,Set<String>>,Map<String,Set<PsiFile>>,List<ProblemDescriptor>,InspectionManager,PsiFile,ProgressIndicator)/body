{
  for (  String key : keyToDifferentValues.keySet()) {
    if (progress != null) {
      progress.setText2(InspectionsBundle.message("duplicate.property.diff.key.progress.indicator.text",key));
      if (progress.isCanceled())       throw new ProcessCanceledException();
    }
    final Set<String> values=keyToDifferentValues.get(key);
    if (values == null || values.size() < 2) {
      keyToFiles.remove(key);
    }
 else {
      StringBuffer message=new StringBuffer();
      final Set<PsiFile> psiFiles=keyToFiles.get(key);
      boolean firstUsage=true;
      for (      PsiFile file : psiFiles) {
        if (!(file instanceof PropertiesFile))         continue;
        PropertiesFile propertiesFile=(PropertiesFile)file;
        final List<IProperty> propertiesByKey=propertiesFile.findPropertiesByKey(key);
        for (        IProperty property : propertiesByKey) {
          if (firstUsage) {
            message.append(InspectionsBundle.message("duplicate.property.diff.key.problem.descriptor",key));
            firstUsage=false;
          }
          surroundWithHref(message,property.getPsiElement().getFirstChild(),false);
        }
      }
      problemDescriptors.add(manager.createProblemDescriptor(psiFile,message.toString(),false,null,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
    }
  }
}
