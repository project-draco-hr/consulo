{
  for (  String key : keyToFiles.keySet()) {
    if (progress != null) {
      progress.setText2(InspectionsBundle.message("duplicate.property.key.progress.indicator.text",key));
      if (progress.isCanceled())       throw new ProcessCanceledException();
    }
    final StringBuffer message=new StringBuffer();
    int duplicatesCount=0;
    Set<PsiFile> psiFilesWithDuplicates=keyToFiles.get(key);
    for (    PsiFile file : psiFilesWithDuplicates) {
      if (!(file instanceof PropertiesFile))       continue;
      PropertiesFile propertiesFile=(PropertiesFile)file;
      final List<Property> propertiesByKey=propertiesFile.findPropertiesByKey(key);
      for (      Property property : propertiesByKey) {
        if (duplicatesCount == 0) {
          message.append(InspectionsBundle.message("duplicate.property.key.problem.descriptor",key));
        }
        surroundWithHref(message,property.getFirstChild(),false);
        duplicatesCount++;
        Set<String> values=keyToValues.get(key);
        if (values == null) {
          values=new HashSet<String>();
          keyToValues.put(key,values);
        }
        values.add(property.getValue());
      }
    }
    if (duplicatesCount > 1 && CHECK_DUPLICATE_KEYS) {
      problemDescriptors.add(manager.createProblemDescriptor(psiFile,message.toString(),(LocalQuickFix[])null,ProblemHighlightType.GENERIC_ERROR_OR_WARNING,false));
    }
  }
}
