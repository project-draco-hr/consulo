{
  if (lowerBound instanceof PsiClassType && upperBound instanceof PsiClassType) {
    final PsiClassType.ClassResolveResult resultLower=((PsiClassType)lowerBound).resolveGenerics();
    final PsiClassType.ClassResolveResult resultUpper=((PsiClassType)upperBound).resolveGenerics();
    final PsiClass lowerClass=resultLower.getElement();
    final PsiClass upperClass=resultUpper.getElement();
    if (lowerClass != null && upperClass != null && !lowerClass.equals(upperClass)) {
      final PsiSubstitutor upperSubst=resultUpper.getSubstitutor();
      final PsiClass[] parents=upperClass.getSupers();
      final PsiElementFactory factory=PsiManager.getInstance(myProject).getElementFactory();
      for (int i=0; i < parents.length; i++) {
        final PsiClass parent=parents[i];
        if (InheritanceUtil.isCorrectDescendant(parent,lowerClass,true)) {
          final PsiClassType type=factory.createType(parent,TypeConversionUtil.getSuperClassSubstitutor(parent,upperClass,upperSubst));
          holder.add(mapper.map(type));
          fillTypeRange(lowerBound,type,holder,mapper);
        }
      }
    }
  }
 else   if (lowerBound instanceof PsiArrayType && upperBound instanceof PsiArrayType) {
    fillTypeRange(((PsiArrayType)lowerBound).getComponentType(),((PsiArrayType)upperBound).getComponentType(),holder,new Mapper(){
      public PsiType map(      PsiType t){
        return mapper.map(t.createArrayType());
      }
    }
);
  }
}
