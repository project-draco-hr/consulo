{
  final PsiType left=constr.getLeft();
  final PsiType right=constr.getRight();
  final HashSet<Constraint> addendum=new HashSet<Constraint>();
  Binding riseBinding=myBindingFactory.rise(left,right,null);
  Binding sinkBinding=myBindingFactory.sink(left,right,null);
  Binding wcrdBinding=myCookWildcards ? myBindingFactory.riseWithWildcard(left,right,addendum) : null;
  int indicator=(riseBinding == null ? 0 : 1) + (sinkBinding == null ? 0 : 1) + (wcrdBinding == null ? 0 : 1);
  if (indicator == 0) {
    return;
  }
  if ((riseBinding != null && sinkBinding != null && riseBinding.equals(sinkBinding)) || canBePruned(riseBinding)) {
    indicator--;
    sinkBinding=null;
  }
  if (riseBinding != null && wcrdBinding != null && riseBinding.equals(wcrdBinding)) {
    indicator--;
    wcrdBinding=null;
  }
  myConstraints.remove(constr);
  mySons=new ResolverTree[indicator];
  int n=0;
  if (riseBinding != null) {
    mySons[n++]=applyRule(riseBinding);
  }
  if (sinkBinding != null) {
    mySons[n++]=applyRule(sinkBinding);
  }
  if (wcrdBinding != null) {
    mySons[n++]=applyRule(wcrdBinding,addendum);
  }
}
