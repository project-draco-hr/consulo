{
  JavaResolveResult result=ref.advancedResolve(true);
  PsiElement resolved=result.getElement();
  PsiElement parent=ref.getParent();
  if (myRefCountHolder != null) {
    myRefCountHolder.registerReference(ref,result);
  }
  myHolder.add(HighlightUtil.checkReference(ref,result,resolved));
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightClassUtil.checkAbstractInstantiation(ref));
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightClassUtil.checkExtendsDuplicate(ref,resolved));
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightUtil.checkExceptionAlreadyCaught(ref,resolved));
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightClassUtil.checkClassExtendsForeignInnerClass(ref,resolved));
  if (!myHolder.hasErrorResults())   myHolder.add(GenericsHighlightUtil.checkSelectStaticClassFromParameterizedType(resolved,ref));
  if (!myHolder.hasErrorResults())   myHolder.add(GenericsHighlightUtil.checkParameterizedReferenceTypeArguments(resolved,ref,result.getSubstitutor()));
  if (resolved != null && parent instanceof PsiReferenceList) {
    if (!myHolder.hasErrorResults())     myHolder.add(HighlightUtil.checkElementInReferenceList(ref,(PsiReferenceList)parent,result));
  }
  if (parent instanceof PsiAnonymousClass && ref.equals(((PsiAnonymousClass)parent).getBaseClassReference())) {
    myHolder.add(GenericsHighlightUtil.checkOverrideEquivalentMethods((PsiClass)parent));
  }
  if (resolved instanceof PsiVariable) {
    PsiVariable variable=(PsiVariable)resolved;
    final PsiClass containingClass=PsiTreeUtil.getParentOfType(ref,PsiClass.class);
    if (containingClass instanceof PsiAnonymousClass && !PsiTreeUtil.isAncestor(containingClass,variable,false)) {
      myHolder.add(HighlightInfo.createHighlightInfo(HighlightInfoType.IMPLICIT_ANONYMOUS_CLASS_PARAMETER,ref,null));
    }
    if (!variable.hasModifierProperty(PsiModifier.FINAL) && HighlightControlFlowUtil.isReassigned(variable,myFinalVarProblems,myParameterIsReassigned)) {
      myHolder.add(HighlightNamesUtil.highlightReassignedVariable(variable,ref));
    }
 else {
      myHolder.add(HighlightNamesUtil.highlightVariable(variable,ref.getReferenceNameElement()));
    }
    myHolder.add(HighlightNamesUtil.highlightClassNameInQualifier(ref));
  }
 else {
    highlightMethodOrClassName(ref);
  }
}
