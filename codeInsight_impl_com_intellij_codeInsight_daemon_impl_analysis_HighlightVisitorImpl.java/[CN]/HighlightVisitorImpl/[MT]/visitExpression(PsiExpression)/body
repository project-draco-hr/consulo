{
  super.visitExpression(expression);
  if (myHolder.add(HighlightUtil.checkMustBeBoolean(expression)))   return;
  if (expression instanceof PsiArrayAccessExpression && ((PsiArrayAccessExpression)expression).getIndexExpression() != null) {
    myHolder.add(HighlightUtil.checkValidArrayAccessExpression(((PsiArrayAccessExpression)expression).getArrayExpression(),((PsiArrayAccessExpression)expression).getIndexExpression()));
  }
 else   if (expression.getParent() instanceof PsiNewExpression && ((PsiNewExpression)expression.getParent()).getQualifier() != expression && ((PsiNewExpression)expression.getParent()).getArrayInitializer() != expression) {
    myHolder.add(HighlightUtil.checkValidArrayAccessExpression(null,expression));
  }
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightControlFlowUtil.checkCannotWriteToFinal(expression));
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightUtil.checkVariableExpected(expression));
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightUtil.checkArrayInitalizerCompatibleTypes(expression));
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightUtil.checkTernaryOperatorConditionIsBoolean(expression));
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightUtil.checkAssertOperatorTypes(expression));
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightUtil.checkSynchronizedExpressionType(expression));
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightUtil.checkConditionalExpressionBranchTypesMatch(expression));
  if (!myHolder.hasErrorResults())   myHolder.add(HighlightUtil.checkConstantExpressionOverflow(expression));
  if (!myHolder.hasErrorResults() && expression.getParent() instanceof PsiThrowStatement && ((PsiThrowStatement)expression.getParent()).getException() == expression) {
    PsiType type=expression.getType();
    myHolder.add(HighlightUtil.checkMustBeThrowable(type,expression,true));
  }
  if (!myHolder.hasErrorResults()) {
    myHolder.add(AnnotationsHighlightUtil.checkConstantExpression(expression));
  }
}
