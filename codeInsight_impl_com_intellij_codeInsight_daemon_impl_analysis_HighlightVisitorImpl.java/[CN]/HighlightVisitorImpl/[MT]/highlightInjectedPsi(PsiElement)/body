{
  if (element instanceof PsiLanguageInjectionHost) {
    PsiLanguageInjectionHost injectionHost=(PsiLanguageInjectionHost)element;
    final Language injectedLanguage=element.getManager().getInjectedLanguage(injectionHost);
    if (injectedLanguage != null) {
      Pair<PsiElement,TextRange> injectedInfo=injectionHost.getInjectedPsi();
      if (injectedInfo != null) {
        VirtualFile virtualFile=element.getContainingFile().getVirtualFile();
        SyntaxHighlighter syntaxHighlighter=injectedLanguage.getSyntaxHighlighter(element.getProject(),virtualFile);
        final Annotator languageAnnotator=injectedLanguage.getAnnotator();
        final int injectedPsiOffset=injectionHost.getTextRange().getStartOffset() + injectedInfo.second.getStartOffset();
        PsiElement injectedPsi=injectedInfo.first;
        final AnnotationHolderImpl fixingAnnotationHolder=new AnnotationHolderImpl(){
          protected Annotation createAnnotation(          TextRange range,          HighlightSeverity severity,          String message){
            Annotation annotation=super.createAnnotation(range.shiftRight(injectedPsiOffset),severity,message);
            myAnnotationHolder.add(annotation);
            return annotation;
          }
        }
;
        final SyntaxHighlighterAsAnnotator syntaxAnnotator=new SyntaxHighlighterAsAnnotator(syntaxHighlighter);
        PsiRecursiveElementVisitor visitor=new PsiRecursiveElementVisitor(){
          public void visitElement(          PsiElement element){
            super.visitElement(element);
            syntaxAnnotator.annotate(element,fixingAnnotationHolder);
            if (languageAnnotator != null) {
              languageAnnotator.annotate(element,fixingAnnotationHolder);
            }
          }
          public void visitErrorElement(          PsiErrorElement element){
            HighlightInfo info=createErrorElementInfo(element);
            HighlightInfo fixed=new HighlightInfo(HighlightInfoType.ERROR,info.startOffset + injectedPsiOffset,info.endOffset + injectedPsiOffset,info.description,info.toolTip);
            myHolder.add(fixed);
          }
        }
;
        injectedPsi.accept(visitor);
        return true;
      }
    }
  }
  return false;
}
