{
  if (!(element instanceof PsiLanguageInjectionHost)) {
    return false;
  }
  PsiLanguageInjectionHost injectionHost=(PsiLanguageInjectionHost)element;
  List<Pair<PsiElement,TextRange>> injected=injectionHost.getInjectedPsi();
  if (injected == null)   return false;
  PsiDocumentManager documentManager=PsiDocumentManager.getInstance(element.getProject());
  for (  Pair<PsiElement,TextRange> pair : injected) {
    PsiElement injectedPsi=pair.getFirst();
    final DocumentRange documentRange=(DocumentRange)documentManager.getDocument((PsiFile)injectedPsi);
    LOG.assertTrue(documentRange.getText().equals(injectedPsi.getText()));
    Language injectedLanguage=injectedPsi.getLanguage();
    VirtualFile virtualFile=element.getContainingFile().getVirtualFile();
    SyntaxHighlighter syntaxHighlighter=injectedLanguage.getSyntaxHighlighter(element.getProject(),virtualFile);
    final List<Annotator> annotators=injectedLanguage.getAnnotators();
    final SyntaxHighlighterAsAnnotator syntaxAnnotator=new SyntaxHighlighterAsAnnotator(syntaxHighlighter);
    PsiRecursiveElementVisitor visitor=new PsiRecursiveElementVisitor(){
      final AnnotationHolderImpl fixingAnnotationHolder=new AnnotationHolderImpl(){
        protected Annotation createAnnotation(        TextRange range,        HighlightSeverity severity,        String message){
          TextRange editable=documentRange.intersectWithEditable(range);
          if (editable == null)           return null;
          TextRange patched=new TextRange(documentRange.injectedToHost(editable.getStartOffset()),documentRange.injectedToHost(editable.getEndOffset()));
          Annotation annotation=super.createAnnotation(patched,severity,message);
          myAnnotationHolder.add(annotation);
          return annotation;
        }
      }
;
      public void visitElement(      PsiElement element){
        super.visitElement(element);
        syntaxAnnotator.annotate(element,fixingAnnotationHolder);
        for (int i=0; i < annotators.size(); i++) {
          Annotator annotator=annotators.get(i);
          annotator.annotate(element,fixingAnnotationHolder);
        }
      }
      public void visitErrorElement(      PsiErrorElement element){
        HighlightInfo info=createErrorElementInfo(element);
        TextRange editable=documentRange.intersectWithEditable(new TextRange(info.startOffset,info.endOffset));
        if (editable == null)         return;
        HighlightInfo fixed=new HighlightInfo(HighlightInfoType.ERROR,documentRange.injectedToHost(editable.getStartOffset()),documentRange.injectedToHost(editable.getEndOffset()),info.description,info.toolTip);
        myHolder.add(fixed);
      }
    }
;
    injectedPsi.accept(visitor);
  }
  return true;
}
