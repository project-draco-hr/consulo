{
  super.visitModifierList(list);
  PsiElement parent=list.getParent();
  if (!myHolder.hasErrorResults() && parent instanceof PsiMethod) {
    myHolder.add(HighlightMethodUtil.checkMethodCanHaveBody((PsiMethod)parent));
  }
  if (parent instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)parent;
    MethodSignatureBackedByPsiMethod methodSignature=MethodSignatureBackedByPsiMethod.create(method,PsiSubstitutor.EMPTY);
    if (!method.isConstructor()) {
      List<MethodSignatureBackedByPsiMethod> superMethodSignatures=method.findSuperMethodSignaturesIncludingStatic(true);
      List<MethodSignatureBackedByPsiMethod> superMethodCandidateSignatures=method.findSuperMethodSignaturesIncludingStatic(false);
      if (!myHolder.hasErrorResults())       myHolder.add(HighlightMethodUtil.checkMethodWeakerPrivileges(methodSignature,superMethodCandidateSignatures,true));
      if (!myHolder.hasErrorResults())       myHolder.add(HighlightMethodUtil.checkMethodIncompatibleReturnType(methodSignature,superMethodSignatures,true));
      if (!myHolder.hasErrorResults())       myHolder.add(HighlightMethodUtil.checkMethodIncompatibleThrows(methodSignature,superMethodSignatures,true));
      if (!myHolder.hasErrorResults())       myHolder.add(HighlightMethodUtil.checkMethodOverridesFinal(methodSignature,superMethodSignatures));
      if (!myHolder.hasErrorResults())       myHolder.add(HighlightMethodUtil.checkMethodOverridesDeprecated(methodSignature,superMethodSignatures,mySettings));
      if (!myHolder.hasErrorResults())       myHolder.add(GenericsHighlightUtil.checkUncheckedOverriding(method,superMethodSignatures));
    }
    PsiClass aClass=method.getContainingClass();
    if (!myHolder.hasErrorResults())     myHolder.add(HighlightMethodUtil.checkMethodMustHaveBody(method,aClass));
    if (!myHolder.hasErrorResults())     myHolder.add(HighlightMethodUtil.checkDuplicateMethod(aClass,method));
    if (!myHolder.hasErrorResults())     myHolder.add(HighlightMethodUtil.checkConstructorCallBaseclassConstructor(method,myRefCountHolder));
    if (!myHolder.hasErrorResults())     myHolder.add(HighlightMethodUtil.checkStaticMethodOverride(method));
  }
 else   if (parent instanceof PsiClass) {
    PsiClass aClass=(PsiClass)parent;
    if (!myHolder.hasErrorResults())     myHolder.add(HighlightClassUtil.checkDuplicateNestedClass(aClass));
    if (!myHolder.hasErrorResults())     myHolder.add(HighlightClassUtil.checkClassMustBeAbstract(aClass));
    if (!myHolder.hasErrorResults()) {
      myHolder.add(HighlightClassUtil.checkClassDoesNotCallSuperConstructorOrHandleExceptions(aClass,myRefCountHolder));
    }
    if (!myHolder.hasErrorResults())     myHolder.add(HighlightMethodUtil.checkOverrideEquivalentInheritedMethods(aClass));
    if (!myHolder.hasErrorResults())     myHolder.addAll(GenericsHighlightUtil.checkOverrideEquivalentMethods(aClass));
    if (!myHolder.hasErrorResults())     myHolder.add(HighlightClassUtil.checkCyclicInheritance(aClass));
  }
 else   if (parent instanceof PsiEnumConstant) {
    if (!myHolder.hasErrorResults())     myHolder.addAll(GenericsHighlightUtil.checkEnumConstantModifierList(list));
  }
  if (!myHolder.hasErrorResults()) {
    Collection<HighlightInfo> duplicateResults=AnnotationsHighlightUtil.checkDuplicatedAnnotations(list);
    for (    HighlightInfo duplicateResult : duplicateResults) {
      myHolder.add(duplicateResult);
    }
  }
}
