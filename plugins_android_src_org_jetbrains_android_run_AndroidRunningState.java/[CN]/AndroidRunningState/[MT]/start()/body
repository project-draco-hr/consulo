{
  getProcessHandler().notifyTextAvailable("Waiting for device.\n",STDOUT);
  if (myTargetDeviceSerialNumbers.length == 0) {
    chooseDeviceAutomaticaly();
    if (myTargetDeviceSerialNumbers.length == 0) {
      if (isAndroidSdk15OrHigher()) {
        if (myAvdName == null) {
          chooseAvd();
        }
        if (myAvdName != null) {
          myFacet.launchEmulator(myAvdName,myCommandLine,myProcessHandler);
        }
 else         if (getProcessHandler().isStartNotified()) {
          getProcessHandler().destroyProcess();
        }
      }
 else {
        myFacet.launchEmulator(myAvdName,myCommandLine,myProcessHandler);
      }
    }
  }
  if (myDebugMode) {
    AdbManager.run(new Runnable(){
      public void run(){
        AndroidDebugBridge.addClientChangeListener(AndroidRunningState.this);
      }
    }
,false);
  }
  final AndroidDebugBridge.IDeviceChangeListener[] deviceListener={null};
  getProcessHandler().addProcessListener(new ProcessAdapter(){
    @Override public void processWillTerminate(    ProcessEvent event,    boolean willBeDestroyed){
      try {
        AdbManager.run(new Runnable(){
          public void run(){
            if (myDebugMode) {
              AndroidDebugBridge.removeClientChangeListener(AndroidRunningState.this);
            }
            if (deviceListener[0] != null) {
              AndroidDebugBridge.removeDeviceChangeListener(deviceListener[0]);
            }
          }
        }
,false);
      }
 catch (      AdbNotRespondingException e) {
        LOG.info(e);
      }
      myStopped=true;
synchronized (myLock) {
        myLock.notifyAll();
      }
    }
  }
);
  deviceListener[0]=prepareAndStartAppWhenDeviceIsOnline();
}
