{
  StringBuilder deviceMessageBuilder=new StringBuilder("Target device: ");
  deviceMessageBuilder.append(device.getSerialNumber());
  if (device.getAvdName() != null) {
    deviceMessageBuilder.append(" (").append(device.getAvdName()).append(')');
  }
  deviceMessageBuilder.append('\n');
  getProcessHandler().notifyTextAvailable(deviceMessageBuilder.toString(),STDOUT);
  try {
    if (myDeploy) {
      if (!uploadAndInstall(device,myPackageName,myFacet))       return false;
      if (!uploadAndInstallDependentModules(device))       return false;
      myApplicationDeployed=true;
    }
    if (!myApplicationLauncher.launch(this,device))     return false;
    if (!checkDdms()) {
      return false;
    }
synchronized (myDebugLock) {
      Client client=device.getClient(myTargetPackageName);
      if (client != null && myDebugLauncher != null && myApplicationLauncher.isReadyForDebugging(client.getClientData(),getProcessHandler())) {
        launchDebug(client);
      }
    }
    return true;
  }
 catch (  TimeoutException e) {
    LOG.info(e);
    getProcessHandler().notifyTextAvailable("Error: Connection to ADB failed with a timeout\n",STDERR);
    return false;
  }
catch (  AdbCommandRejectedException e) {
    LOG.info(e);
    getProcessHandler().notifyTextAvailable("Error: Adb refused a command\n",STDERR);
    return false;
  }
catch (  IOException e) {
    LOG.info(e);
    String message=e.getMessage();
    getProcessHandler().notifyTextAvailable("I/O Error" + (message != null ? ": " + message : "") + '\n',STDERR);
    return false;
  }
}
