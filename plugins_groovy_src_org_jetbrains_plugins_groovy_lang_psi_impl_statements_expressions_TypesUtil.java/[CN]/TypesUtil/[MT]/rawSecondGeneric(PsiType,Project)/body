{
  if (!(type instanceof PsiClassType))   return null;
  final PsiClassType.ClassResolveResult result=((PsiClassType)type).resolveGenerics();
  final PsiClass element=result.getElement();
  if (element == null)   return null;
  final PsiType[] parameters=((PsiClassType)type).getParameters();
  boolean changed=false;
  for (int i=0; i < parameters.length; i++) {
    PsiType parameter=parameters[i];
    if (parameter == null)     continue;
    final Ref<PsiType> newParam=new Ref<PsiType>();
    parameter.accept(new PsiTypeVisitorEx<Object>(){
      @Nullable @Override public Object visitClassType(      PsiClassType classType){
        if (classType.getParameterCount() > 0) {
          newParam.set(classType.rawType());
        }
        return null;
      }
      @Nullable @Override public Object visitCapturedWildcardType(      PsiCapturedWildcardType capturedWildcardType){
        newParam.set(capturedWildcardType.getWildcard().getBound());
        return null;
      }
      @Nullable @Override public Object visitWildcardType(      PsiWildcardType wildcardType){
        newParam.set(wildcardType.getBound());
        return null;
      }
    }
);
    if (!newParam.isNull()) {
      changed=true;
      parameters[i]=newParam.get();
    }
  }
  if (!changed)   return null;
  return JavaPsiFacade.getElementFactory(project).createType(element,parameters);
}
