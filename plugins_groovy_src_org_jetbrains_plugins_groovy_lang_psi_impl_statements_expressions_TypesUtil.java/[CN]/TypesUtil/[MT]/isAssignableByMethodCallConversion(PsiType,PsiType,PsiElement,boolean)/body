{
  if (lType == null || rType == null)   return false;
  PsiManager manager=context.getManager();
  GlobalSearchScope scope=context.getResolveScope();
  if (rType instanceof GrTupleType && ((GrTupleType)rType).getComponentTypes().length == 0) {
    if (lType instanceof PsiArrayType || InheritanceUtil.isInheritor(lType,JAVA_UTIL_LIST) || InheritanceUtil.isInheritor(lType,JAVA_UTIL_SET)) {
      return true;
    }
  }
  if (isClassType(rType,GROOVY_LANG_GSTRING)) {
    final GroovyPsiManager grManager=GroovyPsiManager.getInstance(manager.getProject());
    if (isAssignable(lType,grManager.createTypeByFQClassName(JAVA_LANG_STRING,scope),manager,scope,true)) {
      return true;
    }
  }
  if (isNumericType(lType) && isNumericType(rType)) {
    lType=unboxPrimitiveTypeWrapper(lType);
    if (isClassType(lType,JAVA_MATH_BIG_DECIMAL))     lType=PsiType.DOUBLE;
    rType=unboxPrimitiveTypeWrapper(rType);
    if (isClassType(rType,JAVA_MATH_BIG_DECIMAL))     rType=PsiType.DOUBLE;
  }
 else {
    if (rType == PsiType.NULL && lType instanceof PsiPrimitiveType)     return false;
    rType=boxPrimitiveType(rType,manager,scope);
    lType=boxPrimitiveType(lType,manager,scope);
  }
  if (rType instanceof GrMapType || rType instanceof GrTupleType) {
    Boolean result=isAssignableForNativeTypes(lType,(PsiClassType)rType,manager,scope);
    if (result != null)     return result.booleanValue();
  }
  if (TypeConversionUtil.isAssignable(lType,rType)) {
    return true;
  }
  if (allowConversion && context instanceof GroovyPsiElement) {
    for (    GrTypeConverter converter : GrTypeConverter.EP_NAME.getExtensions()) {
      final Boolean result=converter.isConvertible(lType,rType,(GroovyPsiElement)context);
      if (result != null) {
        return result;
      }
    }
  }
  return false;
}
