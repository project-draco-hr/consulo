{
  final Project project=target.getProject();
  ControlFlow flow=ControlFlowFactory.getInstance(project).getControlFlow(body,LocalsOrMyInstanceFieldsControlFlowPolicy.getInstance(),false);
  Collection<PsiStatement> exitStatements=ControlFlowUtil.findExitPointsAndStatements(flow,0,flow.getSize(),new IntArrayList(),new Class[]{PsiReturnStatement.class,PsiBreakStatement.class,PsiContinueStatement.class,PsiThrowStatement.class,PsiExpressionStatement.class});
  if (!exitStatements.contains(parent))   return false;
  TextAttributes attributes=EditorColorsManager.getInstance().getGlobalScheme().getAttributes(EditorColors.SEARCH_RESULT_ATTRIBUTES);
  HighlightManager highlightManager=HighlightManager.getInstance(project);
  final boolean clearHighlights=HighlightUsagesHandler.isClearHighlights(editor,highlightManager);
  HighlightUsagesHandler.doHighlightElements(highlightManager,editor,exitStatements.toArray(new PsiElement[exitStatements.size()]),attributes,clearHighlights);
  HighlightUsagesHandler.setupFindModel(project);
  String message=clearHighlights ? "" : CodeInsightBundle.message("status.bar.exit.points.highlighted.message",exitStatements.size(),HighlightUsagesHandler.getShortcutText());
  WindowManager.getInstance().getStatusBar(project).setInfo(message);
  return true;
}
