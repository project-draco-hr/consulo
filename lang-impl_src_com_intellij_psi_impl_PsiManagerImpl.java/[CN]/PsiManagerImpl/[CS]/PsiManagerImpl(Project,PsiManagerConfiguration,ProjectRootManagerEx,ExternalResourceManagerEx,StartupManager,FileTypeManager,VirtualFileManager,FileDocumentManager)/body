{
  myProject=project;
  boolean isProjectDefault=project.isDefault();
  myFileManager=isProjectDefault ? new EmptyFileManager() : new FileManagerImpl(this,fileTypeManager,virtualFileManager,fileDocumentManager,projectRootManagerEx);
  mySearchHelper=new PsiSearchHelperImpl(this);
  final CompositeCacheManager cacheManager=new CompositeCacheManager();
  if (psiManagerConfiguration.REPOSITORY_ENABLED && !isProjectDefault) {
    cacheManager.addCacheManager(new CacheManagerImpl(this));
  }
 else {
    cacheManager.addCacheManager(new EmptyCacheManager());
  }
  final CacheManager[] managers=myProject.getComponents(CacheManager.class);
  for (  CacheManager manager : managers) {
    cacheManager.addCacheManager(manager);
  }
  myCacheManager=cacheManager;
  myExternalResourceListener=new MyExternalResourceListener();
  myModificationTracker=new PsiModificationTrackerImpl(this);
  myResolveCache=new ResolveCache(this);
  myCachedValuesManager=new CachedValuesManagerImpl(this);
  if (externalResourceManagerEx != null) {
    externalResourceManagerEx.addExteralResourceListener(myExternalResourceListener);
  }
  if (startupManager != null) {
    ((StartupManagerEx)startupManager).registerPreStartupActivity(new Runnable(){
      public void run(){
        runPreStartupActivity();
      }
    }
);
  }
  myProgressManager=ProgressManager.getInstance();
}
