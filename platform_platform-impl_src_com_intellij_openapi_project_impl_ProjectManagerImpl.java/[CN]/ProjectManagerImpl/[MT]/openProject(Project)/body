{
  if (isLight(project)) {
    throw new AssertionError("must not open light project");
  }
  final Application application=ApplicationManager.getApplication();
  if (!application.isUnitTestMode() && !((ProjectEx)project).getStateStore().checkVersion()) {
    return false;
  }
synchronized (myOpenProjects) {
    if (myOpenProjects.contains(project)) {
      return false;
    }
    myOpenProjects.add(project);
    cacheOpenProjects();
  }
  fireProjectOpened(project);
  DumbService.getInstance(project).queueTask(new DumbModeTask(){
    @Override public void performInDumbMode(    @NotNull ProgressIndicator indicator){
      waitForFileWatcher(indicator);
    }
    @Override public String toString(){
      return "wait for file watcher";
    }
  }
);
  final StartupManagerImpl startupManager=(StartupManagerImpl)StartupManager.getInstance(project);
  boolean ok=myProgressManager.runProcessWithProgressSynchronously(new Runnable(){
    @Override public void run(){
      startupManager.runStartupActivities();
      UIUtil.invokeAndWaitIfNeeded(new Runnable(){
        @Override public void run(){
          startupManager.startCacheUpdate();
        }
      }
);
      startupManager.runPostStartupActivitiesFromExtensions();
      UIUtil.invokeLaterIfNeeded(new Runnable(){
        @Override public void run(){
          startupManager.runPostStartupActivities();
        }
      }
);
    }
  }
,ProjectBundle.message("project.load.progress"),true,project);
  if (!ok) {
    closeProject(project,false,false,true);
    notifyProjectOpenFailed();
    return false;
  }
  if (!application.isHeadlessEnvironment() && !application.isUnitTestMode()) {
    StartupManager.getInstance(project).runWhenProjectIsInitialized(new Runnable(){
      @Override public void run(){
        final TrackingPathMacroSubstitutor macroSubstitutor=((ProjectEx)project).getStateStore().getStateStorageManager().getMacroSubstitutor();
        if (macroSubstitutor != null) {
          StorageUtil.notifyUnknownMacros(macroSubstitutor,project,null);
        }
      }
    }
);
  }
  return true;
}
