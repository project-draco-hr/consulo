{
  if (myOpenProjects.contains(project))   return false;
  if (!ApplicationManager.getApplication().isUnitTestMode() && !((ProjectEx)project).getStateStore().checkVersion())   return false;
  myOpenProjects.add(project);
  cacheOpenProjects();
  fireProjectOpened(project);
  final StartupManagerImpl startupManager=(StartupManagerImpl)StartupManager.getInstance(project);
  boolean ok=myProgressManager.runProcessWithProgressSynchronously(new Runnable(){
    public void run(){
      startupManager.runStartupActivities();
    }
  }
,ProjectBundle.message("project.load.progress"),true,project);
  if (!ok) {
    closeProject(project,false,false);
    notifyProjectOpenFailed();
    return false;
  }
  startupManager.runPostStartupActivities();
  if (!ApplicationManager.getApplication().isHeadlessEnvironment() && !ApplicationManager.getApplication().isUnitTestMode()) {
    StartupManager.getInstance(project).runWhenProjectIsInitialized(new Runnable(){
      public void run(){
        final TrackingPathMacroSubstitutor macroSubstitutor=((ProjectEx)project).getStateStore().getStateStorageManager().getMacroSubstitutor();
        if (macroSubstitutor != null) {
          StorageUtil.notifyUnknownMacros(macroSubstitutor,project,null);
        }
      }
    }
);
  }
  return true;
}
