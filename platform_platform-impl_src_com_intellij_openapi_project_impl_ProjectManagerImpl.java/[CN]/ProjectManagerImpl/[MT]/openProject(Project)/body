{
  final Application application=ApplicationManager.getApplication();
  if (application.isUnitTestMode() && project.toString().contains("lighttemp")) {
    throw new AssertionError("must not open light project");
  }
  if (myOpenProjects.contains(project)) {
    return false;
  }
  if (!application.isUnitTestMode() && !((ProjectEx)project).getStateStore().checkVersion()) {
    return false;
  }
  myOpenProjects.add(project);
  cacheOpenProjects();
  UIUtil.invokeAndWaitIfNeeded(new Runnable(){
    public void run(){
      fireProjectOpened(project);
    }
  }
);
  final StartupManagerImpl startupManager=(StartupManagerImpl)StartupManager.getInstance(project);
  boolean ok;
  ProgressIndicator indicator=myProgressManager.getProgressIndicator();
  if (indicator == null) {
    ok=myProgressManager.runProcessWithProgressSynchronously(new Runnable(){
      public void run(){
        startupManager.runStartupActivities();
      }
    }
,ProjectBundle.message("project.load.progress"),true,project);
  }
 else {
    try {
      startupManager.runStartupActivities();
      ok=true;
    }
 catch (    Throwable e) {
      LOG.info(e);
      ok=false;
    }
  }
  if (!ok) {
    closeProject(project,false,false);
    notifyProjectOpenFailed();
    return false;
  }
  UIUtil.invokeAndWaitIfNeeded(new Runnable(){
    public void run(){
      startupManager.startCacheUpdate();
    }
  }
);
  startupManager.runPostStartupActivitiesFromExtensions();
  UIUtil.invokeLaterIfNeeded(new Runnable(){
    public void run(){
      startupManager.runPostStartupActivities();
    }
  }
);
  if (!application.isHeadlessEnvironment() && !application.isUnitTestMode()) {
    StartupManager.getInstance(project).runWhenProjectIsInitialized(new Runnable(){
      public void run(){
        final TrackingPathMacroSubstitutor macroSubstitutor=((ProjectEx)project).getStateStore().getStateStorageManager().getMacroSubstitutor();
        if (macroSubstitutor != null) {
          StorageUtil.notifyUnknownMacros(macroSubstitutor,project,null);
        }
      }
    }
);
  }
  return true;
}
