{
  if (isLight(project)) {
    ((ProjectImpl)project).setTemporarilyDisposed(false);
    boolean isInitialized=StartupManagerEx.getInstanceEx(project).startupActivityPassed();
    if (isInitialized) {
      addToOpened(project);
      return true;
    }
  }
  if (!addToOpened(project)) {
    return false;
  }
  Runnable process=new Runnable(){
    @Override public void run(){
      TransactionGuard.getInstance().submitTransactionAndWait(new Runnable(){
        @Override public void run(){
          fireProjectOpened(project);
        }
      }
);
      final StartupManagerImpl startupManager=(StartupManagerImpl)StartupManager.getInstance(project);
      startupManager.runStartupActivities();
      TransactionGuard.getInstance().submitTransactionAndWait(new Runnable(){
        @Override public void run(){
          startupManager.startCacheUpdate();
        }
      }
);
      startupManager.runPostStartupActivitiesFromExtensions();
      GuiUtils.invokeLaterIfNeeded(new Runnable(){
        @Override public void run(){
          if (!project.isDisposed()) {
            startupManager.runPostStartupActivities();
            Application application=ApplicationManager.getApplication();
            if (!application.isHeadlessEnvironment() && !application.isUnitTestMode()) {
              final TrackingPathMacroSubstitutor macroSubstitutor=((ProjectEx)project).getStateStore().getStateStorageManager().getMacroSubstitutor();
              if (macroSubstitutor != null) {
                StorageUtil.notifyUnknownMacros(macroSubstitutor,project,null);
              }
            }
          }
        }
      }
,ModalityState.NON_MODAL);
    }
  }
;
  if (myProgressManager.getProgressIndicator() != null) {
    process.run();
    return true;
  }
  boolean ok=myProgressManager.runProcessWithProgressSynchronously(process,ProjectBundle.message("project.load.progress"),canCancelProjectLoading(),project);
  if (!ok) {
    closeProject(project,false,false,true);
    notifyProjectOpenFailed();
    return false;
  }
  return true;
}
