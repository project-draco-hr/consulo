{
  final IOException[] io={null};
  final StateStorage.StateStorageException[] stateStorage={null};
  if (filePath != null) {
    refreshProjectFiles(filePath);
  }
  final Project[] project=new Project[1];
  boolean ok=myProgressManager.runProcessWithProgressSynchronously(new Runnable(){
    public void run(){
      final ProgressIndicator indicator=myProgressManager.getProgressIndicator();
      try {
        if (indicator != null) {
          indicator.setText(ProjectBundle.message("loading.components.for",filePath));
          indicator.setIndeterminate(true);
        }
        project[0]=doLoadProject(filePath);
      }
 catch (      IOException e) {
        io[0]=e;
        return;
      }
catch (      StateStorage.StateStorageException e) {
        stateStorage[0]=e;
        return;
      }
      if (indicator != null) {
        indicator.setText(ProjectBundle.message("initializing.components"));
      }
    }
  }
,ProjectBundle.message("project.load.progress"),true,null);
  if (!ok) {
    if (project[0] != null) {
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        public void run(){
          Disposer.dispose(project[0]);
        }
      }
);
      project[0]=null;
    }
    if (canceled != null) {
      canceled.set(true);
    }
    notifyProjectOpenFailed();
  }
  if (io[0] != null)   throw io[0];
  if (stateStorage[0] != null)   throw stateStorage[0];
  if (project[0] == null || !ok) {
    return null;
  }
  return project[0];
}
