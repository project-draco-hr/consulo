{
  final IOException[] io={null};
  final StateStorageException[] stateStorage={null};
  if (filePath != null) {
    refreshProjectFiles(filePath);
  }
  final Project[] project=new Project[1];
  canceled.set(false);
  Runnable runnable=new Runnable(){
    public void run(){
      try {
        project[0]=doLoadProject(filePath);
      }
 catch (      IOException e) {
        io[0]=e;
      }
catch (      StateStorageException e) {
        stateStorage[0]=e;
      }
catch (      ProcessCanceledException e) {
        canceled.set(true);
        throw e;
      }
    }
  }
;
  if (ProgressManager.getInstance().getProgressIndicator() == null) {
    myProgressManager.runProcessWithProgressSynchronously(runnable,ProjectBundle.message("project.load.progress"),true,null);
  }
 else {
    runnable.run();
  }
  if (canceled.get() || project[0] == null) {
    if (project[0] != null) {
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        public void run(){
          Disposer.dispose(project[0]);
        }
      }
);
    }
    notifyProjectOpenFailed();
  }
  if (io[0] != null)   throw io[0];
  if (stateStorage[0] != null)   throw stateStorage[0];
  if (project[0] == null || canceled.get()) {
    return null;
  }
  return project[0];
}
