{
  filePath=toCanonicalName(filePath);
  if (LOG_PROJECT_LEAKAGE_IN_TESTS && ApplicationManager.getApplication().isUnitTestMode()) {
    for (int i=0; i < 42; i++) {
      if (myProjects.size() < MAX_LEAKY_PROJECTS)       break;
      System.gc();
      TimeoutUtil.sleep(100);
      System.gc();
    }
    if (myProjects.size() >= MAX_LEAKY_PROJECTS) {
      List<Project> copy=new ArrayList<Project>(myProjects.keySet());
      myProjects.clear();
      throw new TooManyProjectLeakedException(copy);
    }
  }
  ProjectImpl project=createProject(projectName,filePath,false,ApplicationManager.getApplication().isUnitTestMode());
  try {
    initProject(project,useDefaultProjectSettings ? (ProjectImpl)getDefaultProject() : null);
    if (LOG_PROJECT_LEAKAGE_IN_TESTS) {
      myProjects.put(project,null);
    }
    return project;
  }
 catch (  final Exception e) {
    LOG.info(e);
    Messages.showErrorDialog(message(e),ProjectBundle.message("project.load.default.error"));
  }
  return null;
}
