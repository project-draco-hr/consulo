{
  final Ref<Project> projectRef=new Ref<Project>();
  final Ref<IOException> exceptionRef=new Ref<IOException>();
  myProgressManager.runProcessWithProgressSynchronously(new Runnable(){
    @Override public void run(){
      try {
        final Project project=convertAndLoadProject(filePath,convert);
        if (project == null) {
          return;
        }
        if (!openProject(project)) {
          ApplicationManager.getApplication().runWriteAction(new Runnable(){
            public void run(){
              Disposer.dispose(project);
            }
          }
);
          return;
        }
        projectRef.set(project);
      }
 catch (      StateStorageException e) {
        exceptionRef.set(new IOException(e.getMessage()));
      }
catch (      IOException e) {
        exceptionRef.set(e);
      }
    }
  }
,ProjectBundle.message("project.load.progress"),true,null);
  if (!exceptionRef.isNull()) {
    throw exceptionRef.get();
  }
  return projectRef.get();
}
