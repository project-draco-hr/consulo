{
  myProgressManager=progressManager;
  Application app=ApplicationManager.getApplication();
  MessageBus messageBus=app.getMessageBus();
  MessageBusConnection connection=messageBus.connect(app);
  connection.subscribe(StateStorage.STORAGE_TOPIC,new StateStorage.Listener(){
    @Override public void storageFileChanged(    final VirtualFileEvent event,    @NotNull final StateStorage storage){
      VirtualFile file=event.getFile();
      LOG.debug("[RELOAD] Storage file changed: " + file.getPath());
      if (!file.isDirectory() && !(event.getRequestor() instanceof StateStorage.SaveSession)) {
        saveChangedProjectFile(file,null,storage);
      }
    }
  }
);
  final ProjectManagerListener busPublisher=messageBus.syncPublisher(TOPIC);
  addProjectManagerListener(new ProjectManagerListener(){
    @Override public void projectOpened(    final Project project){
      MessageBus messageBus=project.getMessageBus();
      MessageBusConnection connection=messageBus.connect(project);
      connection.subscribe(StateStorage.STORAGE_TOPIC,new StateStorage.Listener(){
        @Override public void storageFileChanged(        final VirtualFileEvent event,        @NotNull final StateStorage storage){
          VirtualFile file=event.getFile();
          LOG.debug("[RELOAD] Storage file changed: " + file.getPath());
          if (!file.isDirectory() && !(event.getRequestor() instanceof StateStorage.SaveSession)) {
            saveChangedProjectFile(file,project,storage);
          }
        }
      }
);
      busPublisher.projectOpened(project);
      for (      ProjectManagerListener listener : getListeners(project)) {
        listener.projectOpened(project);
      }
    }
    @Override public void projectClosed(    Project project){
      busPublisher.projectClosed(project);
      for (      ProjectManagerListener listener : getListeners(project)) {
        listener.projectClosed(project);
      }
    }
    @Override public boolean canCloseProject(    Project project){
      for (      ProjectManagerListener listener : getListeners(project)) {
        if (!listener.canCloseProject(project)) {
          return false;
        }
      }
      return true;
    }
    @Override public void projectClosing(    Project project){
      busPublisher.projectClosing(project);
      for (      ProjectManagerListener listener : getListeners(project)) {
        listener.projectClosing(project);
      }
    }
  }
);
  registerExternalProjectFileListener(virtualFileManagerEx);
}
