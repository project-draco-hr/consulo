{
  myProgressManager=progressManager;
  Application app=ApplicationManager.getApplication();
  MessageBus messageBus=app.getMessageBus();
  messageBus.connect(app).subscribe(StateStorage.STORAGE_TOPIC,new StateStorage.Listener(){
    @Override public void storageFileChanged(    @NotNull VirtualFileEvent event,    @NotNull StateStorage storage){
      projectStorageFileChanged(event,storage,null);
    }
  }
);
  final ProjectManagerListener busPublisher=messageBus.syncPublisher(TOPIC);
  addProjectManagerListener(new ProjectManagerListener(){
    @Override public void projectOpened(    final Project project){
      project.getMessageBus().connect(project).subscribe(StateStorage.PROJECT_STORAGE_TOPIC,new StateStorage.Listener(){
        @Override public void storageFileChanged(        @NotNull VirtualFileEvent event,        @NotNull StateStorage storage){
          projectStorageFileChanged(event,storage,project);
        }
      }
);
      busPublisher.projectOpened(project);
      for (      ProjectManagerListener listener : getListeners(project)) {
        listener.projectOpened(project);
      }
    }
    @Override public void projectClosed(    Project project){
      busPublisher.projectClosed(project);
      for (      ProjectManagerListener listener : getListeners(project)) {
        listener.projectClosed(project);
      }
    }
    @Override public boolean canCloseProject(    Project project){
      for (      ProjectManagerListener listener : getListeners(project)) {
        if (!listener.canCloseProject(project)) {
          return false;
        }
      }
      return true;
    }
    @Override public void projectClosing(    Project project){
      busPublisher.projectClosing(project);
      for (      ProjectManagerListener listener : getListeners(project)) {
        listener.projectClosing(project);
      }
    }
  }
);
  virtualFileManager.addVirtualFileManagerListener(new VirtualFileManagerAdapter(){
    @Override public void beforeRefreshStart(    boolean asynchronous){
      blockReloadingProjectOnExternalChanges();
    }
    @Override public void afterRefreshFinish(    boolean asynchronous){
      unblockReloadingProjectOnExternalChanges();
    }
  }
);
  myChangedFilesAlarm=new SingleAlarm(restartApplicationOrReloadProjectTask,300);
}
