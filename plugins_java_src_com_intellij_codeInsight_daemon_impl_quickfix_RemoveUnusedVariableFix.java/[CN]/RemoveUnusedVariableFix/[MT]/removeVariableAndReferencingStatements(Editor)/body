{
  final List<PsiElement> references=new ArrayList<PsiElement>();
  final List<PsiElement> sideEffects=new ArrayList<PsiElement>();
  final boolean[] canCopeWithSideEffects={true};
  try {
    PsiElement context=myVariable instanceof PsiField ? ((PsiField)myVariable).getContainingClass() : PsiUtil.getVariableCodeBlock(myVariable,null);
    if (context != null) {
      RemoveUnusedVariableUtil.collectReferences(context,myVariable,references);
    }
    references.add(myVariable);
    for (    PsiElement element : references) {
      Boolean result=RemoveUnusedVariableUtil.processUsage(element,myVariable,sideEffects,RemoveUnusedVariableUtil.CANCEL);
      if (result == null)       return;
      canCopeWithSideEffects[0]&=result;
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
  final int deleteMode=showSideEffectsWarning(sideEffects,myVariable,editor,canCopeWithSideEffects[0]);
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      try {
        RemoveUnusedVariableUtil.deleteReferences(myVariable,references,deleteMode);
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
    }
  }
);
}
