{
  Set<LookupElement> items=new LinkedHashSet<LookupElement>();
  boolean qualified=myRefExpr.getQualifierExpression() != null;
  if (!qualified && !(myRefExpr.getParent() instanceof PsiMethodCallExpression)) {
    PsiVariable[] vars=CreateFromUsageUtils.guessMatchingVariables(myRefExpr);
    for (    PsiVariable var : vars) {
      items.add(LookupElementBuilder.create(var.getName()));
    }
  }
 else {
class MyScopeProcessor extends BaseScopeProcessor {
      ArrayList<PsiElement> myResult=new ArrayList<PsiElement>();
      boolean myFilterMethods;
      boolean myFilterStatics=false;
      MyScopeProcessor(      PsiReferenceExpression refExpression){
        myFilterMethods=refExpression.getParent() instanceof PsiMethodCallExpression;
        PsiExpression qualifier=refExpression.getQualifierExpression();
        if (qualifier instanceof PsiReferenceExpression) {
          PsiElement e=((PsiReferenceExpression)qualifier).resolve();
          myFilterStatics=e instanceof PsiClass;
        }
 else         if (qualifier == null) {
          PsiModifierListOwner scope=PsiTreeUtil.getParentOfType(refExpression,PsiModifierListOwner.class);
          myFilterStatics=scope != null && scope.hasModifierProperty(PsiModifier.STATIC);
        }
      }
      public boolean execute(      PsiElement element,      ResolveState state){
        if (element instanceof PsiNamedElement && element instanceof PsiModifierListOwner && myFilterMethods == element instanceof PsiMethod) {
          if (((PsiModifierListOwner)element).hasModifierProperty(PsiModifier.STATIC) == myFilterStatics) {
            myResult.add(element);
          }
        }
        return true;
      }
      public PsiElement[] getVariants(){
        return PsiUtilBase.toPsiElementArray(myResult);
      }
    }
    MyScopeProcessor processor=new MyScopeProcessor(myRefExpr);
    myRefExpr.processVariants(processor);
    PsiElement[] variants=processor.getVariants();
    for (    PsiElement variant : variants) {
      items.add(LookupElementBuilder.create(((PsiNamedElement)variant).getName()));
    }
  }
  return items.toArray(new LookupElement[items.size()]);
}
