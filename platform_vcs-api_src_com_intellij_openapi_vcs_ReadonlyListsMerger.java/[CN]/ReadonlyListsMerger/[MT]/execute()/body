{
  final int[] idxs=new int[myLists.size()];
  for (int i=0; i < myLists.size(); i++) {
    final ReadonlyList<T> member=myLists.get(i);
    idxs[i]=member.getSize() == 0 ? -1 : 0;
  }
  while (true) {
    CompoundNumber minIdxs=null;
    for (int i=0; i < idxs.length; i++) {
      if (idxs[i] == -1)       continue;
      final ReadonlyList<T> list=myLists.get(i);
      if ((minIdxs == null) || (myComparator.compare(new Pair<CompoundNumber,T>(new CompoundNumber(i,idxs[i]),list.get(idxs[i])),new Pair<CompoundNumber,T>(minIdxs,myLists.get(minIdxs.getMemberNumber()).get(minIdxs.getIdx()))) <= 0)) {
        minIdxs=new CompoundNumber(i,idxs[i]);
      }
    }
    if (minIdxs == null)     return;
    myConsumer.consume(minIdxs);
    final int memberIdx=minIdxs.getMemberNumber();
    idxs[memberIdx]=(myLists.get(memberIdx).getSize() == (idxs[memberIdx] + 1) ? -1 : idxs[memberIdx] + 1);
  }
}
