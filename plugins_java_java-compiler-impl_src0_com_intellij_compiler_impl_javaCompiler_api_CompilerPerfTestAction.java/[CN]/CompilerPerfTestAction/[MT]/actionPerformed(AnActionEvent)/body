{
  final Project project=e.getData(PlatformDataKeys.PROJECT);
  final CompilerManager compilerManager=CompilerManager.getInstance(project);
  final CompilerConfigurationImpl configuration=(CompilerConfigurationImpl)CompilerConfigurationOld.getInstance(project);
  List<BackendCompiler> compilers=(List<BackendCompiler>)configuration.getRegisteredJavaCompilers();
  final List<BackendCompiler> allCompilers=ContainerUtil.concat(compilers,compilers,compilers,compilers,compilers,compilers,compilers);
  final int[] i=new int[1];
  CompileStatusNotification callback=new CompileStatusNotification(){
    volatile long start;
    BackendCompiler compiler;
    public void finished(    boolean aborted,    int errors,    int warnings,    CompileContext compileContext){
      if (compiler == null) {
        next();
        return;
      }
      final long finish=System.currentTimeMillis();
      System.out.println("Compiled with '" + compiler.getPresentableName() + "' "+ " in "+ TimeUnit.MILLISECONDS.toMinutes(finish - start)+ "m"+ TimeUnit.MILLISECONDS.toSeconds((finish - start) % 60000)+ "s"+ " with "+ errors+ " errors, "+ warnings+ " warnings, aborted="+ aborted+ "; free memory="+ Runtime.getRuntime().freeMemory()+ " bytes");
      next();
    }
    void next(){
      if (i[0] >= allCompilers.size())       return;
      compiler=allCompilers.get(i[0]++);
      if (compiler.getId().equals("Jikes") || compiler.getId().contains("Eclipse")) {
        next();
        return;
      }
      boolean success=compiler.checkCompiler(compilerManager.createProjectCompileScope(project));
      if (!success) {
        next();
        return;
      }
      configuration.setDefaultCompiler(compiler);
      start=System.currentTimeMillis();
      compilerManager.rebuild(this);
    }
  }
;
  callback.finished(false,0,0,null);
}
