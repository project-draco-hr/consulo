{
  final Element rootElement=getRootElement(moduleName);
  Set<MethodSignature> methodSignatures=new HashSet<MethodSignature>();
  final Element containingClassElement=findDynamicClassElement(rootElement,className);
  if (containingClassElement == null)   return methodSignatures;
  final List methods=containingClassElement.getContent(DynamicFiltersFactory.createMethodTagFilter());
  for (  Object o : methods) {
    final Element method=(Element)o;
    final String methodName=method.getAttributeValue(NAME_ATTRIBUTE);
    final List parameters=method.getContent(DynamicFiltersFactory.createMethodTagFilter());
    List<PsiType> types=new ArrayList<PsiType>();
    for (    Object parameterElement : parameters) {
      final Element parameter=(Element)parameterElement;
      final String name=parameter.getAttributeValue(NAME_ATTRIBUTE);
      final String type=parameter.getAttributeValue(TYPE_ATTRIBUTE);
      GrTypeElement typeElement=null;
      PsiType psiType=null;
      try {
        typeElement=GroovyPsiElementFactory.getInstance(myProject).createTypeElement(type);
      }
 catch (      IncorrectOperationException e) {
        return methodSignatures;
      }
      if (typeElement != null) {
        psiType=typeElement.getType();
      }
      types.add(psiType);
    }
    final MethodSignature signature=MethodSignatureUtil.createMethodSignature(methodName,types.toArray(PsiType.EMPTY_ARRAY),PsiTypeParameter.EMPTY_ARRAY,PsiSubstitutor.UNKNOWN);
    methodSignatures.add(signature);
  }
  return methodSignatures;
}
