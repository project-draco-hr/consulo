{
  super(settings);
  ArrangementStandardSettingsRepresentationAware representationManager=DefaultArrangementSettingsRepresentationManager.INSTANCE;
  if (filter instanceof ArrangementStandardSettingsRepresentationAware) {
    representationManager=(ArrangementStandardSettingsRepresentationAware)filter;
  }
  final ArrangementNodeDisplayManager displayManager=new ArrangementNodeDisplayManager(filter,representationManager);
  ArrangementConditionsGrouper grouper=DefaultArrangementSettingsGrouper.INSTANCE;
  if (filter instanceof ArrangementConditionsGrouper) {
    grouper=(ArrangementConditionsGrouper)filter;
  }
  final ActionManager actionManager=ActionManager.getInstance();
  final ActionGroup actionGroup=(ActionGroup)actionManager.getAction(ArrangementConstants.ACTION_GROUP_RULE_EDITOR_TOOL_WINDOW);
  ActionToolbar actionToolbar=actionManager.createActionToolbar(ArrangementConstants.RULE_EDITOR_TOOL_WINDOW_PLACE,actionGroup,true);
  JPanel toolbarControl=new JPanel(new GridBagLayout());
  toolbarControl.add(actionToolbar.getComponent(),new GridBag().anchor(GridBagConstraints.WEST).weightx(1).fillCellHorizontally());
  toolbarControl.setBorder(IdeBorderFactory.createBorder(SideBorder.LEFT | SideBorder.TOP | SideBorder.RIGHT));
  myContent.add(toolbarControl,new GridBag().weightx(1).fillCellHorizontally().coverLine());
  final ArrangementRuleTree ruleTree=new ArrangementRuleTree(grouper,displayManager);
  final Tree treeComponent=ruleTree.getTreeComponent();
  actionToolbar.setTargetComponent(treeComponent);
  myContent.add(new JBScrollPane(treeComponent),new GridBag().weightx(1).weighty(1).fillCell().coverLine());
  CustomizationUtil.installPopupHandler(treeComponent,ArrangementConstants.ACTION_GROUP_RULE_EDITOR_CONTEXT_MENU,ArrangementConstants.RULE_EDITOR_PLACE);
  final JXTaskPane editorPane=new JXTaskPane(ApplicationBundle.message("arrangement.title.editor"));
  final ArrangementRuleEditor ruleEditor=new ArrangementRuleEditor(filter,displayManager);
  ruleEditor.applyBackground(treeComponent.getBackground());
  editorPane.getContentPane().setBackground(treeComponent.getBackground());
  editorPane.add(ruleEditor);
  editorPane.setCollapsed(true);
  final Ref<Boolean> resetEditor=new Ref<Boolean>(Boolean.TRUE);
  myContent.add(editorPane,new GridBag().weightx(1).fillCellHorizontally().coverLine());
  editorPane.addPropertyChangeListener("collapsed",new PropertyChangeListener(){
    @Override public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() == Boolean.FALSE && resetEditor.get()) {
        ruleEditor.updateState(null);
      }
    }
  }
);
  ruleTree.addEditingListener(new ArrangementRuleSelectionListener(){
    @Override public void onSelected(    @NotNull ArrangementRuleEditingModel model){
      ruleEditor.updateState(model);
      resetEditor.set(Boolean.FALSE);
      try {
        editorPane.setCollapsed(false);
      }
  finally {
        resetEditor.set(Boolean.TRUE);
      }
    }
    @Override public void selectionRemoved(){
      editorPane.setCollapsed(true);
    }
  }
);
  final Runnable newRuleFunction=new Runnable(){
    @Override public void run(){
      treeComponent.requestFocus();
      ArrangementRuleEditingModel model=ruleTree.newModel();
      ruleEditor.updateState(model);
      resetEditor.set(Boolean.FALSE);
      try {
        editorPane.setCollapsed(false);
      }
  finally {
        resetEditor.set(Boolean.TRUE);
      }
    }
  }
;
  final Runnable removeRuleFunction=new Runnable(){
    @Override public void run(){
      treeComponent.requestFocus();
      ArrangementRuleEditingModelImpl model=ruleTree.getActiveModel();
      if (model != null) {
        model.destroy();
      }
    }
  }
;
  treeComponent.putClientProperty(DataManager.CLIENT_PROPERTY_DATA_PROVIDER,new DataProvider(){
    @Nullable @Override public Object getData(    @NonNls String dataId){
      if (ArrangementConstants.NEW_RULE_FUNCTION_KEY.is(dataId)) {
        return newRuleFunction;
      }
 else       if (ArrangementConstants.REMOVE_RULE_FUNCTION_KEY.is(dataId)) {
        return removeRuleFunction;
      }
      return null;
    }
  }
);
  setupKeyboardActions(actionManager,treeComponent);
}
