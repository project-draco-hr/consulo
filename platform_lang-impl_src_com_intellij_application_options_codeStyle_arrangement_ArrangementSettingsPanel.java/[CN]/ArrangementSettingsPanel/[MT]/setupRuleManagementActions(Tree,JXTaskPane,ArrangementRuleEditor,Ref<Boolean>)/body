{
  final Runnable newRuleFunction=new Runnable(){
    @Override public void run(){
      treeComponent.requestFocus();
      ArrangementRuleEditingModel model=myRuleTree.newModel();
      ruleEditor.updateState(model);
      resetEditor.set(Boolean.FALSE);
      try {
        editorPane.setCollapsed(false);
      }
  finally {
        resetEditor.set(Boolean.TRUE);
      }
    }
  }
;
  final Runnable removeRuleFunction=new Runnable(){
    @Override public void run(){
      treeComponent.requestFocus();
      List<ArrangementRuleEditingModelImpl> models=myRuleTree.getActiveModels();
      for (      ArrangementRuleEditingModelImpl model : models) {
        model.destroy();
      }
    }
  }
;
  final NotNullFunction<Boolean,Boolean> updateMoveFunction=new NotNullFunction<Boolean,Boolean>(){
    @NotNull @Override public Boolean fun(    @NotNull Boolean moveUp){
      TreePath[] paths=treeComponent.getSelectionPaths();
      if (paths == null) {
        return false;
      }
      for (      TreePath path : paths) {
        TreeNode node=(TreeNode)path.getLastPathComponent();
        if (node instanceof ArrangementSectionNode) {
          continue;
        }
        if ((moveUp && node.getParent().getIndex(node) > 0) || (!moveUp && node.getParent().getIndex(node) < node.getParent().getChildCount() - 1)) {
          return true;
        }
      }
      return false;
    }
  }
;
  final Consumer<Boolean> moveFunction=new Consumer<Boolean>(){
    @Override public void consume(    Boolean moveUp){
      TreePath[] paths=treeComponent.getSelectionPaths();
    }
  }
;
  treeComponent.putClientProperty(DataManager.CLIENT_PROPERTY_DATA_PROVIDER,new DataProvider(){
    @Nullable @Override public Object getData(    @NonNls String dataId){
      if (ArrangementConstants.NEW_RULE_FUNCTION_KEY.is(dataId)) {
        return newRuleFunction;
      }
 else       if (ArrangementConstants.REMOVE_RULE_FUNCTION_KEY.is(dataId)) {
        return removeRuleFunction;
      }
      return null;
    }
  }
);
}
