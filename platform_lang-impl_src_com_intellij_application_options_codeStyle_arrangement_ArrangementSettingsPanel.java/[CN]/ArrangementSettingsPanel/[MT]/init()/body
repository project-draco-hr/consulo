{
  final ArrangementTreeRenderer renderer=new ArrangementTreeRenderer(myFilter);
  DefaultMutableTreeNode root=new DefaultMutableTreeNode();
  DefaultTreeModel model=new DefaultTreeModel(root);
  Tree tree=new Tree(model){
    @Override protected void setExpandedState(    TreePath path,    boolean state){
      if (state) {
        super.setExpandedState(path,state);
      }
    }
    @Override public void setSelectionPath(    TreePath path){
    }
    @Override public void paint(    Graphics g){
      renderer.onTreeRepaintStart();
      super.paint(g);
    }
  }
;
  List<ArrangementSettingsNode> children=new ArrayList<ArrangementSettingsNode>();
  children.add(new ArrangementSettingsAtomNode(ArrangementSettingType.MODIFIER,ArrangementModifier.PUBLIC));
  children.add(new ArrangementSettingsAtomNode(ArrangementSettingType.MODIFIER,ArrangementModifier.STATIC));
  children.add(new ArrangementSettingsAtomNode(ArrangementSettingType.MODIFIER,ArrangementModifier.FINAL));
  HierarchicalArrangementSettingsNode settingsNode=new HierarchicalArrangementSettingsNode(new ArrangementSettingsAtomNode(ArrangementSettingType.TYPE,ArrangementEntryType.FIELD));
  ArrangementSettingsCompositeNode modifiers=new ArrangementSettingsCompositeNode(ArrangementSettingsCompositeNode.Operator.AND);
  for (  ArrangementSettingsNode child : children) {
    modifiers.addOperand(child);
  }
  settingsNode.addChild(new HierarchicalArrangementSettingsNode(modifiers));
  if (settingsNode != null) {
    map(root,settingsNode);
  }
  expandAll(tree,new TreePath(root));
  tree.setRootVisible(false);
  tree.setShowsRootHandles(false);
  tree.setCellRenderer(renderer);
  myContent.add(tree,new GridBag().weightx(1).weighty(1).fillCell());
}
