{
  final CharSequence chars=myDocument.getCharsSequence();
  final FileType fileType=myFile.getFileType();
  final Indent minIndent=computeMinIndent(myStartLine,myEndLine,chars,myCodeStyleManager,fileType);
  DocumentUtil.executeInBulk(myDocument,myEndLine - myStartLine > Registry.intValue("comment.by.line.bulk.lines.trigger"),new Runnable(){
    @Override public void run(){
      for (int line=myEndLine; line >= myStartLine; line--) {
        int lineStart=myDocument.getLineStartOffset(line);
        int offset=lineStart;
        final StringBuilder buffer=StringBuilderSpinAllocator.alloc();
        try {
          while (true) {
            String space=buffer.toString();
            Indent indent=myCodeStyleManager.getIndent(space,fileType);
            if (indent.isGreaterThan(minIndent) || indent.equals(minIndent))             break;
            char c=chars.charAt(offset);
            if (c != ' ' && c != '\t') {
              String newSpace=myCodeStyleManager.fillIndent(minIndent,fileType);
              myDocument.replaceString(lineStart,offset,newSpace);
              offset=lineStart + newSpace.length();
              break;
            }
            buffer.append(c);
            offset++;
          }
        }
  finally {
          StringBuilderSpinAllocator.dispose(buffer);
        }
        commentLine(line,offset,commenter);
      }
    }
  }
);
}
