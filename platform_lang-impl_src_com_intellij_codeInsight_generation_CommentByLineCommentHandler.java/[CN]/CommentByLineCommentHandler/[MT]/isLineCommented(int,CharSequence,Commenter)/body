{
  boolean commented;
  int lineEndForBlockCommenting=-1;
  int lineStart=myDocument.getLineStartOffset(line);
  lineStart=CharArrayUtil.shiftForward(chars,lineStart," \t");
  if (commenter instanceof SelfManagingCommenter) {
    final SelfManagingCommenter selfManagingCommenter=(SelfManagingCommenter)commenter;
    commented=selfManagingCommenter.isLineCommented(line,lineStart,myDocument,myCommenterStateMap.get(selfManagingCommenter));
  }
 else {
    String prefix=commenter.getLineCommentPrefix();
    if (prefix != null) {
      commented=CharArrayUtil.regionMatches(chars,lineStart,prefix) || prefix.endsWith(" ") && CharArrayUtil.regionMatches(chars,lineStart,prefix.trim() + "\n");
    }
 else {
      prefix=commenter.getBlockCommentPrefix();
      String suffix=commenter.getBlockCommentSuffix();
      final int textLength=myDocument.getTextLength();
      lineEndForBlockCommenting=myDocument.getLineEndOffset(line);
      if (lineEndForBlockCommenting == textLength) {
        final int shifted=CharArrayUtil.shiftBackward(chars,textLength - 1," \t");
        if (shifted < textLength - 1)         lineEndForBlockCommenting=shifted;
      }
 else {
        lineEndForBlockCommenting=CharArrayUtil.shiftBackward(chars,lineEndForBlockCommenting," \t");
      }
      commented=lineStart == lineEndForBlockCommenting && myStartLine != myEndLine || CharArrayUtil.regionMatches(chars,lineStart,prefix) && CharArrayUtil.regionMatches(chars,lineEndForBlockCommenting - suffix.length(),suffix);
    }
  }
  if (commented) {
    myStartOffsets[line - myStartLine]=lineStart;
    myEndOffsets[line - myStartLine]=lineEndForBlockCommenting;
  }
  return commented;
}
