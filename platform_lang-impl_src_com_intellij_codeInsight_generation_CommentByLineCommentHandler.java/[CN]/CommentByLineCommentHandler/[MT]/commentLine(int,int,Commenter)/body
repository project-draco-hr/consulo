{
  if (commenter == null)   commenter=findCommenter(line);
  if (commenter == null)   return;
  if (commenter instanceof SelfManagingCommenter) {
    final SelfManagingCommenter selfManagingCommenter=(SelfManagingCommenter)commenter;
    selfManagingCommenter.commentLine(line,offset,myDocument,myCommenterStateMap.get(selfManagingCommenter));
    return;
  }
  String prefix=commenter.getLineCommentPrefix();
  if (prefix != null) {
    if (commenter instanceof CommenterWithLineSuffix) {
      int endOffset=myDocument.getLineEndOffset(line);
      endOffset=CharArrayUtil.shiftBackward(myDocument.getCharsSequence(),endOffset," \t");
      int shiftedStartOffset=CharArrayUtil.shiftForward(myDocument.getCharsSequence(),offset," \t");
      String lineSuffix=((CommenterWithLineSuffix)commenter).getLineCommentSuffix();
      if (!CharArrayUtil.regionMatches(myDocument.getCharsSequence(),endOffset - lineSuffix.length(),lineSuffix) && !CharArrayUtil.regionMatches(myDocument.getCharsSequence(),shiftedStartOffset,prefix)) {
        myDocument.insertString(endOffset,lineSuffix);
        myDocument.insertString(offset,prefix);
      }
    }
 else {
      myDocument.insertString(offset,prefix);
    }
  }
 else {
    prefix=commenter.getBlockCommentPrefix();
    String suffix=commenter.getBlockCommentSuffix();
    if (prefix == null || suffix == null)     return;
    int endOffset=myDocument.getLineEndOffset(line);
    if (endOffset == offset && myStartLine != myEndLine)     return;
    final int textLength=myDocument.getTextLength();
    final CharSequence chars=myDocument.getCharsSequence();
    offset=CharArrayUtil.shiftForward(chars,offset," \t");
    if (endOffset == textLength) {
      final int shifted=CharArrayUtil.shiftBackward(chars,textLength - 1," \t");
      if (shifted < textLength - 1)       endOffset=shifted;
    }
 else {
      endOffset=CharArrayUtil.shiftBackward(chars,endOffset," \t");
    }
    if (endOffset < offset || offset == textLength - 1)     return;
    final String text=chars.subSequence(offset,endOffset).toString();
    final IntArrayList prefixes=new IntArrayList();
    final IntArrayList suffixes=new IntArrayList();
    final String commentedSuffix=commenter.getCommentedBlockCommentSuffix();
    final String commentedPrefix=commenter.getCommentedBlockCommentPrefix();
    for (int position=0; position < text.length(); ) {
      int nearestPrefix=text.indexOf(prefix,position);
      if (nearestPrefix == -1) {
        nearestPrefix=text.length();
      }
      int nearestSuffix=text.indexOf(suffix,position);
      if (nearestSuffix == -1) {
        nearestSuffix=text.length();
      }
      if (Math.min(nearestPrefix,nearestSuffix) == text.length()) {
        break;
      }
      if (nearestPrefix < nearestSuffix) {
        prefixes.add(nearestPrefix);
        position=nearestPrefix + prefix.length();
      }
 else {
        suffixes.add(nearestSuffix);
        position=nearestSuffix + suffix.length();
      }
    }
    if (!(commentedSuffix == null && !suffixes.isEmpty() && offset + suffixes.get(suffixes.size() - 1) + suffix.length() >= endOffset)) {
      myDocument.insertString(endOffset,suffix);
    }
    int nearestPrefix=prefixes.size() - 1;
    int nearestSuffix=suffixes.size() - 1;
    while (nearestPrefix >= 0 || nearestSuffix >= 0) {
      if (nearestSuffix == -1 || nearestPrefix != -1 && prefixes.get(nearestPrefix) > suffixes.get(nearestSuffix)) {
        final int position=prefixes.get(nearestPrefix);
        nearestPrefix--;
        if (commentedPrefix != null) {
          myDocument.replaceString(offset + position,offset + position + prefix.length(),commentedPrefix);
        }
 else         if (position != 0) {
          myDocument.insertString(offset + position,suffix);
        }
      }
 else {
        final int position=suffixes.get(nearestSuffix);
        nearestSuffix--;
        if (commentedSuffix != null) {
          myDocument.replaceString(offset + position,offset + position + suffix.length(),commentedSuffix);
        }
 else         if (offset + position + suffix.length() < endOffset) {
          myDocument.insertString(offset + position + suffix.length(),prefix);
        }
      }
    }
    if (!(commentedPrefix == null && !prefixes.isEmpty() && prefixes.get(0) == 0)) {
      myDocument.insertString(offset,prefix);
    }
  }
}
