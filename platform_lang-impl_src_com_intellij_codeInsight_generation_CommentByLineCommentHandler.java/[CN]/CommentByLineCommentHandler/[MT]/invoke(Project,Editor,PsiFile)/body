{
  myProject=project;
  myFile=file.getViewProvider().getPsi(file.getViewProvider().getBaseLanguage());
  myEditor=editor;
  PsiElement context=myFile.getContext();
  if (context != null && (context.textContains('\'') || context.textContains('\"'))) {
    String s=context.getText();
    if (StringUtil.startsWith(s,"\"") || StringUtil.startsWith(s,"\'")) {
      myFile=context.getContainingFile();
      myEditor=editor instanceof EditorWindow ? ((EditorWindow)editor).getDelegate() : editor;
    }
  }
  myDocument=myEditor.getDocument();
  if (!FileDocumentManager.getInstance().requestWriting(myDocument,project)) {
    return;
  }
  PsiDocumentManager.getInstance(project).commitDocument(myDocument);
  FeatureUsageTracker.getInstance().triggerFeatureUsed("codeassists.comment.line");
  myCodeStyleManager=CodeStyleManager.getInstance(myProject);
  final SelectionModel selectionModel=myEditor.getSelectionModel();
  boolean hasSelection=selectionModel.hasSelection();
  myStartOffset=selectionModel.getSelectionStart();
  myEndOffset=selectionModel.getSelectionEnd();
  if (myDocument.getTextLength() == 0)   return;
  while (true) {
    int lastLineEnd=myDocument.getLineEndOffset(myDocument.getLineNumber(myEndOffset));
    FoldRegion collapsedAt=myEditor.getFoldingModel().getCollapsedRegionAtOffset(lastLineEnd);
    if (collapsedAt != null) {
      final int endOffset=collapsedAt.getEndOffset();
      if (endOffset <= myEndOffset) {
        break;
      }
      myEndOffset=endOffset;
    }
 else {
      break;
    }
  }
  boolean wholeLinesSelected=!hasSelection || myStartOffset == myDocument.getLineStartOffset(myDocument.getLineNumber(myStartOffset)) && myEndOffset == myDocument.getLineEndOffset(myDocument.getLineNumber(myEndOffset - 1)) + 1;
  boolean startingNewLineComment=!hasSelection && isLineEmpty(myDocument.getLineNumber(myStartOffset)) && !Comparing.equal(IdeActions.ACTION_COMMENT_LINE,ActionManagerEx.getInstanceEx().getPrevPreformedActionId());
  doComment();
  if (startingNewLineComment) {
    final Commenter commenter=myCommenters[0];
    if (commenter != null) {
      String prefix;
      if (commenter instanceof SelfManagingCommenter) {
        prefix=((SelfManagingCommenter)commenter).getCommentPrefix(myStartLine,myDocument,myCommenterStateMap.get((SelfManagingCommenter)commenter));
        if (prefix == null)         prefix="";
      }
 else {
        prefix=commenter.getLineCommentPrefix();
        if (prefix == null)         prefix=commenter.getBlockCommentPrefix();
      }
      int lineStart=myDocument.getLineStartOffset(myStartLine);
      lineStart=CharArrayUtil.shiftForward(myDocument.getCharsSequence(),lineStart," \t");
      lineStart+=prefix.length();
      lineStart=CharArrayUtil.shiftForward(myDocument.getCharsSequence(),lineStart," \t");
      if (lineStart > myDocument.getTextLength())       lineStart=myDocument.getTextLength();
      myEditor.getCaretModel().moveToOffset(lineStart);
      myEditor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
    }
  }
 else {
    if (!hasSelection) {
      if (myEditor.getCaretModel().getLogicalPosition().line < myDocument.getLineCount() - 1) {
        myEditor.getCaretModel().moveCaretRelatively(0,1,false,false,true);
      }
    }
 else {
      if (wholeLinesSelected) {
        selectionModel.setSelection(myStartOffset,selectionModel.getSelectionEnd());
      }
    }
  }
}
