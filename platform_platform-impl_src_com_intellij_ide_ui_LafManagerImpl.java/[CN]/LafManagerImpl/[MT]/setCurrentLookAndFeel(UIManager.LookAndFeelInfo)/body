{
  if (findLaf(lookAndFeelInfo.getClassName()) == null) {
    LOG.error("unknown LookAndFeel : " + lookAndFeelInfo);
    return;
  }
  if (IDEA_LAF_CLASSNAME.equals(lookAndFeelInfo.getClassName())) {
    IdeaLaf laf=new IdeaLaf();
    IdeaLaf.setCurrentTheme(new IdeaBlueMetalTheme());
    try {
      UIManager.setLookAndFeel(laf);
    }
 catch (    Exception exc) {
      Messages.showMessageDialog(IdeBundle.message("error.cannot.set.look.and.feel",lookAndFeelInfo.getName()),CommonBundle.getErrorTitle(),Messages.getErrorIcon());
      return;
    }
  }
 else {
    try {
      LookAndFeel laf=((LookAndFeel)Class.forName(lookAndFeelInfo.getClassName()).newInstance());
      if (laf instanceof MetalLookAndFeel) {
        MetalLookAndFeel.setCurrentTheme(new DefaultMetalTheme());
      }
      UIManager.setLookAndFeel(laf);
    }
 catch (    Exception exc) {
      Messages.showMessageDialog(IdeBundle.message("error.cannot.set.look.and.feel",lookAndFeelInfo.getName()),CommonBundle.getErrorTitle(),Messages.getErrorIcon());
      return;
    }
  }
  myCurrentLaf=lookAndFeelInfo;
  String popupWeight=System.getProperty("idea.popup.weight");
  if (popupWeight == null) {
    if (SystemInfo.isWindows) {
      popupWeight=HEAVY_WEIGHT_POPUP;
    }
 else {
      popupWeight=MEDIUM_WEIGHT_POPUP;
    }
  }
  if (SystemInfo.isMacOSLeopard) {
    popupWeight=HEAVY_WEIGHT_POPUP;
  }
  popupWeight=popupWeight.trim();
  PopupFactory popupFactory;
  final PopupFactory oldFactory=PopupFactory.getSharedInstance();
  if (HEAVY_WEIGHT_POPUP.equals(popupWeight)) {
    popupFactory=new PopupFactory(){
      public Popup getPopup(      Component owner,      Component contents,      int x,      int y) throws IllegalArgumentException {
        final Point point=fixPopupLocation(contents,x,y);
        return oldFactory.getPopup(owner,contents,point.x,point.y);
      }
    }
;
  }
 else   if (MEDIUM_WEIGHT_POPUP.equals(popupWeight)) {
    popupFactory=new PopupFactory(){
      public Popup getPopup(      final Component owner,      final Component contents,      final int x,      final int y) throws IllegalArgumentException {
        return createPopup(owner,contents,x,y);
      }
      private Popup createPopup(      final Component owner,      final Component contents,      final int x,      final int y){
        final Point point=fixPopupLocation(contents,x,y);
        return oldFactory.getPopup(owner,contents,point.x,point.y);
      }
    }
;
  }
 else {
    throw new IllegalStateException("unknown value of property -Didea.popup.weight: " + popupWeight);
  }
  PopupFactory.setSharedInstance(popupFactory);
  if (UIUtil.isUnderAquaLookAndFeel()) {
    final UIDefaults uiDefaults=UIManager.getLookAndFeelDefaults();
    uiDefaults.put("PopupMenuUI",MacPopupMenuUI.class.getCanonicalName());
    final Icon icon=getAquaMenuInvertedIcon();
    if (icon != null) {
      uiDefaults.put("Menu.invertedArrowIcon",icon);
    }
  }
}
