{
  super.visitAssignmentExpression(assignment);
  final PsiJavaToken sign=assignment.getOperationSign();
  final IElementType assignmentTokenType=sign.getTokenType();
  if (!assignmentTokenType.equals(JavaTokenType.EQ)) {
    return;
  }
  final PsiExpression lhs=assignment.getLExpression();
  final PsiExpression rhs=PsiUtil.deparenthesizeExpression(assignment.getRExpression());
  if (!(rhs instanceof PsiBinaryExpression)) {
    return;
  }
  final PsiBinaryExpression binaryRhs=(PsiBinaryExpression)rhs;
  if (!(binaryRhs.getROperand() != null)) {
    return;
  }
  final IElementType expressionTokenType=binaryRhs.getOperationTokenType();
  if (JavaTokenType.EQEQ.equals(expressionTokenType) || JavaTokenType.NE.equals(expressionTokenType)) {
    return;
  }
  if (ignoreLazyOperators) {
    if (JavaTokenType.ANDAND.equals(expressionTokenType) || JavaTokenType.OROR.equals(expressionTokenType)) {
      return;
    }
  }
  if (ignoreObscureOperators) {
    if (JavaTokenType.XOR.equals(expressionTokenType) || JavaTokenType.PERC.equals(expressionTokenType)) {
      return;
    }
  }
  final PsiExpression lOperand=binaryRhs.getLOperand();
  if (SideEffectChecker.mayHaveSideEffects(lhs)) {
    return;
  }
  if (!EquivalenceChecker.expressionsAreEquivalent(lhs,lOperand)) {
    return;
  }
  registerError(assignment,assignment);
}
