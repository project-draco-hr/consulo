{
  super.visitAssignmentExpression(assignment);
  final PsiJavaToken sign=assignment.getOperationSign();
  final IElementType assignmentTokenType=sign.getTokenType();
  if (!assignmentTokenType.equals(JavaTokenType.EQ)) {
    return;
  }
  final PsiExpression lhs=assignment.getLExpression();
  final PsiExpression rhs=assignment.getRExpression();
  if (!(rhs instanceof PsiBinaryExpression)) {
    return;
  }
  final PsiBinaryExpression binaryRhs=(PsiBinaryExpression)rhs;
  if (!(binaryRhs.getROperand() != null)) {
    return;
  }
  final IElementType expressionTokenType=binaryRhs.getOperationTokenType();
  if (expressionTokenType.equals(JavaTokenType.EQEQ)) {
    return;
  }
  if (ignoreLazyOperators) {
    if (expressionTokenType.equals(JavaTokenType.ANDAND) || expressionTokenType.equals(JavaTokenType.OROR)) {
      return;
    }
  }
  if (ignoreObscureOperators) {
    if (expressionTokenType.equals(JavaTokenType.XOR) || expressionTokenType.equals(JavaTokenType.PERC)) {
      return;
    }
  }
  final PsiExpression lOperand=binaryRhs.getLOperand();
  if (SideEffectChecker.mayHaveSideEffects(lhs)) {
    return;
  }
  if (!EquivalenceChecker.expressionsAreEquivalent(lhs,lOperand)) {
    return;
  }
  registerError(assignment,assignment);
}
