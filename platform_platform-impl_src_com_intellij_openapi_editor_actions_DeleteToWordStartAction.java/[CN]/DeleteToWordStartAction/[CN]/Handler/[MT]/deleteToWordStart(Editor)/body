{
  boolean camel=editor.getSettings().isCamelWords();
  if (myNegateCamelMode) {
    camel=!camel;
  }
  CharSequence text=editor.getDocument().getCharsSequence();
  CaretModel caretModel=editor.getCaretModel();
  int endOffset=caretModel.getOffset();
  int minOffset=editor.getDocument().getLineStartOffset(caretModel.getLogicalPosition().line);
  myQuotesNumber.clear();
  for (  int i : QUOTE_SYMBOLS_ARRAY) {
    myQuotesNumber.put(i,0);
  }
  countQuotes(myQuotesNumber,text,minOffset,endOffset);
  EditorActionUtil.moveCaretToPreviousWord(editor,false,camel);
  for (int offset=caretModel.getOffset(); offset > minOffset; offset=caretModel.getOffset()) {
    char previous=text.charAt(offset - 1);
    char current=text.charAt(offset);
    if (QUOTE_SYMBOLS.contains(current)) {
      if (Character.isWhitespace(previous)) {
        break;
      }
 else       if (offset < endOffset - 1 && !Character.isJavaIdentifierPart(text.charAt(offset + 1))) {
        editor.getCaretModel().moveToOffset(offset + 1);
        break;
      }
      if (myQuotesNumber.get(current) % 2 == 0) {
        EditorActionUtil.moveCaretToPreviousWord(editor,false,camel);
        continue;
      }
      break;
    }
    if (QUOTE_SYMBOLS.contains(previous)) {
      if (myQuotesNumber.get(previous) % 2 == 0) {
        editor.getCaretModel().moveToOffset(offset - 1);
      }
    }
    break;
  }
  int startOffset=caretModel.getOffset();
  Document document=editor.getDocument();
  document.deleteString(startOffset,endOffset);
}
