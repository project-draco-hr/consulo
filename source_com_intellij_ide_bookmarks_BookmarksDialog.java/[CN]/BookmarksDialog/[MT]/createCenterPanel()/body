{
  myTable.setColumnSelectionAllowed(false);
  myTable.setPreferredScrollableViewportSize(new Dimension(500,200));
  JScrollPane tableScrollPane=ScrollPaneFactory.createScrollPane(myTable);
  myTable.getColumnModel().getColumn(0).setPreferredWidth(400);
  myTable.getColumnModel().getColumn(1).setPreferredWidth(100);
  myTable.addKeyListener(new KeyAdapter(){
    public void keyTyped(    KeyEvent e){
      handle(e);
    }
    public void keyPressed(    KeyEvent e){
      handle(e);
    }
    private void handle(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_ESCAPE && e.getModifiers() == 0) {
        myCloseButton.doClick();
      }
 else       if (e.getKeyCode() == KeyEvent.VK_ENTER && e.getModifiers() == 0) {
        myGotoButton.doClick();
      }
    }
  }
);
  JPanel panel=new JPanel(new GridBagLayout());
  GridBagConstraints constr;
  constr=new GridBagConstraints();
  constr.weightx=1;
  constr.weighty=1;
  constr.insets=new Insets(5,5,5,0);
  constr.fill=GridBagConstraints.BOTH;
  constr.anchor=GridBagConstraints.WEST;
  panel.add(tableScrollPane,constr);
  myTable.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
  constr=new GridBagConstraints();
  constr.gridx=1;
  constr.insets=new Insets(5,0,0,0);
  constr.anchor=GridBagConstraints.NORTH;
  panel.add(createRightButtonPane(),constr);
  addListeners();
  DefaultTableCellRenderer renderer=new DefaultTableCellRenderer(){
    public Component getTableCellRendererComponent(    JTable table,    Object value,    boolean isSelected,    boolean hasFocus,    int row,    int column){
      Component component=super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
      BookmarkWrapper bookmarkWrapper=myModel.getBookmarkWrapper(row);
      setIcon(bookmarkWrapper.getBookmark().getIcon());
      return component;
    }
  }
;
  myTable.getColumnModel().getColumn(0).setCellRenderer(renderer);
  return panel;
}
