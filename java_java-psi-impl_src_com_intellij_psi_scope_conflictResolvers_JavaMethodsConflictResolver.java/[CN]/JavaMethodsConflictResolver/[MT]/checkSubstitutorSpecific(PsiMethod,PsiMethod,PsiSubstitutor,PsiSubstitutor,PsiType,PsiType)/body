{
  final PsiClass aClass1=PsiUtil.resolveClassInClassTypeOnly(type1);
  final PsiClass aClass2=PsiUtil.resolveClassInClassTypeOnly(type2);
  if (aClass1 instanceof PsiTypeParameter && aClass2 instanceof PsiTypeParameter) {
    return checkTypeParams(method1,method2,classSubstitutor1,classSubstitutor2,type1,type2,(PsiTypeParameter)aClass1,(PsiTypeParameter)aClass2);
  }
  if (aClass1 instanceof PsiTypeParameter || aClass2 instanceof PsiTypeParameter)   return null;
  final Map<PsiTypeParameter,PsiType> map1=classSubstitutor1.getSubstitutionMap();
  final Map<PsiTypeParameter,PsiType> map2=classSubstitutor2.getSubstitutionMap();
  if (map1.size() == 1 && map2.size() == 1) {
    final PsiType t1=map1.values().iterator().next();
    final PsiType t2=map2.values().iterator().next();
    int d1=t1 != null ? t1.getArrayDimensions() : 0;
    int d2=t2 != null ? t2.getArrayDimensions() : 0;
    if (d1 > d2) {
      return Specifics.SECOND;
    }
 else     if (d2 > d1) {
      return Specifics.FIRST;
    }
 else {
      final PsiTypeParameter p1=map1.keySet().iterator().next();
      final PsiTypeParameter p2=map2.keySet().iterator().next();
      return checkTypeParams(method1,method2,classSubstitutor1,classSubstitutor2,type1,type2,p1,p2);
    }
  }
  return null;
}
