{
  final Map<PsiTypeParameter,PsiType> map1=classSubstitutor1.getSubstitutionMap();
  final Map<PsiTypeParameter,PsiType> map2=classSubstitutor2.getSubstitutionMap();
  if (map1.size() == 1 && map2.size() == 1) {
    final PsiType t1=map1.values().iterator().next();
    final PsiType t2=map2.values().iterator().next();
    int d1=t1 != null ? t1.getArrayDimensions() : 0;
    int d2=t2 != null ? t2.getArrayDimensions() : 0;
    if (d1 > d2) {
      return Specifics.SECOND;
    }
 else     if (d2 > d1) {
      return Specifics.FIRST;
    }
 else {
      final PsiTypeParameter p1=map1.keySet().iterator().next();
      final PsiTypeParameter p2=map2.keySet().iterator().next();
      Specifics specifics=checkSubtyping(TypeConversionUtil.erasure(PsiSubstitutor.EMPTY.substitute(p1)),TypeConversionUtil.erasure(PsiSubstitutor.EMPTY.substitute(p2)),method1,method2);
      if (specifics != null) {
        return specifics;
      }
 else {
        final PsiType ctype1=classSubstitutor1.substitute(type1);
        final PsiType ctype2=classSubstitutor2.substitute(type2);
        return checkSubtyping(ctype1,ctype2,method1,method2);
      }
    }
  }
  return null;
}
