{
  PsiMethod method1=(PsiMethod)info1.getElement();
  PsiMethod method2=(PsiMethod)info2.getElement();
  final PsiClass class1=method1.getContainingClass();
  final PsiClass class2=method2.getContainingClass();
  final PsiParameter[] params1=method1.getParameterList().getParameters();
  final PsiParameter[] params2=method2.getParameterList().getParameters();
  final PsiTypeParameter[] typeParameters1=method1.getTypeParameters();
  final PsiTypeParameter[] typeParameters2=method2.getTypeParameters();
  final PsiSubstitutor classSubstitutor1=info1.getSubstitutor();
  final PsiSubstitutor classSubstitutor2=info2.getSubstitutor();
  PsiSubstitutor methodSubstitutor1=PsiSubstitutor.EMPTY;
  PsiSubstitutor methodSubstitutor2=PsiSubstitutor.EMPTY;
  final int max=Math.max(params1.length,params2.length);
  PsiType[] types1=new PsiType[max];
  PsiType[] types2=new PsiType[max];
  for (int i=0; i < max; i++) {
    PsiType type1=params1[Math.min(i,params1.length - 1)].getType();
    PsiType type2=params2[Math.min(i,params2.length - 1)].getType();
    if (applicabilityLevel == MethodCandidateInfo.ApplicabilityLevel.VARARGS) {
      if (type1 instanceof PsiEllipsisType && type2 instanceof PsiEllipsisType) {
        type1=((PsiEllipsisType)type1).toArrayType();
        type2=((PsiEllipsisType)type2).toArrayType();
      }
 else {
        type1=type1 instanceof PsiEllipsisType ? ((PsiArrayType)type1).getComponentType() : type1;
        type2=type2 instanceof PsiEllipsisType ? ((PsiArrayType)type2).getComponentType() : type2;
      }
    }
    types1[i]=type1;
    types2[i]=type2;
  }
  if (typeParameters1.length == 0 || typeParameters2.length == 0) {
    if (typeParameters1.length > 0) {
      final PsiResolveHelper resolveHelper=JavaPsiFacade.getInstance(myArgumentsList.getProject()).getResolveHelper();
      methodSubstitutor1=calculateMethodSubstitutor(typeParameters1,types1,types2,resolveHelper);
    }
 else     if (typeParameters2.length > 0) {
      final PsiResolveHelper resolveHelper=JavaPsiFacade.getInstance(myArgumentsList.getProject()).getResolveHelper();
      methodSubstitutor2=calculateMethodSubstitutor(typeParameters2,types2,types1,resolveHelper);
    }
  }
 else {
    PsiElementFactory factory=JavaPsiFacade.getInstance(myArgumentsList.getProject()).getElementFactory();
    methodSubstitutor1=factory.createRawSubstitutor(PsiSubstitutor.EMPTY,typeParameters1);
    methodSubstitutor2=factory.createRawSubstitutor(PsiSubstitutor.EMPTY,typeParameters2);
  }
  int[] boxingHappened=new int[2];
  for (int i=0; i < types1.length; i++) {
    PsiType type1=classSubstitutor1.substitute(methodSubstitutor1.substitute(types1[i]));
    PsiType type2=classSubstitutor2.substitute(methodSubstitutor2.substitute(types2[i]));
    PsiType argType=i < myActualParameterTypes.length ? myActualParameterTypes[i] : null;
    boxingHappened[0]+=isBoxingHappened(argType,type1) ? 1 : 0;
    boxingHappened[1]+=isBoxingHappened(argType,type2) ? 1 : 0;
  }
  if (boxingHappened[0] == 0 && boxingHappened[1] > 0)   return Specifics.FIRST;
  if (boxingHappened[0] > 0 && boxingHappened[1] == 0)   return Specifics.SECOND;
  Specifics isMoreSpecific=null;
  for (int i=0; i < types1.length; i++) {
    PsiType type1=classSubstitutor1.substitute(methodSubstitutor1.substitute(types1[i]));
    PsiType type2=classSubstitutor2.substitute(methodSubstitutor2.substitute(types2[i]));
    Specifics specifics=type1 == null || type2 == null ? null : checkSubtyping(type1,type2,method1,method2);
    if (specifics == null) {
      if (Comparing.equal(type1,type2)) {
        specifics=checkSubstitutorSpecific(method1,method2,classSubstitutor1,classSubstitutor2,types1[i],types2[i]);
      }
      if (specifics == null)       continue;
    }
switch (specifics) {
case FIRST:
      if (isMoreSpecific == Specifics.SECOND)       return Specifics.NEITHER;
    isMoreSpecific=specifics;
  break;
case SECOND:
if (isMoreSpecific == Specifics.FIRST) return Specifics.NEITHER;
isMoreSpecific=specifics;
break;
case NEITHER:
return Specifics.NEITHER;
}
}
if (isMoreSpecific == null && class1 != class2) {
if (class2.isInheritor(class1,true) || class1.isInterface() && !class2.isInterface()) {
if (MethodSignatureUtil.isSubsignature(method1.getSignature(info1.getSubstitutor()),method2.getSignature(info2.getSubstitutor()))) {
isMoreSpecific=Specifics.SECOND;
}
 else if (method1.hasModifierProperty(PsiModifier.STATIC) && method2.hasModifierProperty(PsiModifier.STATIC)) {
isMoreSpecific=Specifics.SECOND;
}
}
 else if (class1.isInheritor(class2,true) || class2.isInterface()) {
if (MethodSignatureUtil.isSubsignature(method2.getSignature(info2.getSubstitutor()),method1.getSignature(info1.getSubstitutor()))) {
isMoreSpecific=Specifics.FIRST;
}
 else if (method1.hasModifierProperty(PsiModifier.STATIC) && method2.hasModifierProperty(PsiModifier.STATIC)) {
isMoreSpecific=Specifics.FIRST;
}
}
}
if (isMoreSpecific == null) {
if (!JavaVersionService.getInstance().isAtLeast(myArgumentsList,JavaSdkVersion.JDK_1_7) || !MethodSignatureUtil.areParametersErasureEqual(method1,method2)) {
if (typeParameters1.length < typeParameters2.length) return Specifics.FIRST;
if (typeParameters1.length > typeParameters2.length) return Specifics.SECOND;
}
return Specifics.NEITHER;
}
return isMoreSpecific;
}
