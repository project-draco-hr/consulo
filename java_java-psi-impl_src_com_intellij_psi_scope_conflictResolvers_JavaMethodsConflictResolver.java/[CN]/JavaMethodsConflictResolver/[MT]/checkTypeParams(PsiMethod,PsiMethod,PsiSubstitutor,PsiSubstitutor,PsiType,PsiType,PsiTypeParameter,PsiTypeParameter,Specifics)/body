{
  Specifics specifics=checkSubtyping(TypeConversionUtil.erasure(PsiSubstitutor.EMPTY.substitute(p1)),TypeConversionUtil.erasure(PsiSubstitutor.EMPTY.substitute(p2)),method1,method2);
  if (specifics == Specifics.NEITHER) {
    final Set<PsiElement> resolved1=new HashSet<PsiElement>();
    for (    PsiJavaCodeReferenceElement referenceElement : p1.getExtendsList().getReferenceElements()) {
      final PsiElement resolve=referenceElement.resolve();
      if (resolve != null) {
        resolved1.add(resolve);
      }
    }
    final Set<PsiElement> resolved2=new HashSet<PsiElement>();
    for (    PsiJavaCodeReferenceElement referenceElement : p2.getExtendsList().getReferenceElements()) {
      final PsiElement resolve=referenceElement.resolve();
      if (resolve != null) {
        resolved2.add(resolve);
      }
    }
    if (resolved1.size() > resolved2.size() && resolved1.containsAll(resolved2))     return Specifics.FIRST;
    if (resolved2.size() > resolved1.size() && resolved2.containsAll(resolved1))     return Specifics.SECOND;
  }
  if (specifics != null) {
    return specifics;
  }
 else {
    final PsiType ctype1=classSubstitutor1.substitute(type1);
    final PsiType ctype2=classSubstitutor2.substitute(type2);
    specifics=checkSubtyping(ctype1,ctype2,method1,method2);
    return specifics == null && moreSpecific == null ? Specifics.NEITHER : specifics;
  }
}
