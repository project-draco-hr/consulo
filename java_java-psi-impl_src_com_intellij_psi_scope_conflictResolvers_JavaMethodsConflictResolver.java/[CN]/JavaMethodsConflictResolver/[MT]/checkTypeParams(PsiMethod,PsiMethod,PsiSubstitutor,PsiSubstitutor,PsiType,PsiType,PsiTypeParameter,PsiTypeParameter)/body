{
  final Set<PsiClass> resolved1=new HashSet<PsiClass>();
  for (  PsiClassType referenceElement : p1.getExtendsList().getReferencedTypes()) {
    final PsiClass resolve=referenceElement.resolve();
    if (resolve != null) {
      resolved1.add(resolve);
    }
  }
  final Set<PsiClass> resolved2=new HashSet<PsiClass>();
  for (  PsiClassType referenceElement : p2.getExtendsList().getReferencedTypes()) {
    final PsiClass resolve=referenceElement.resolve();
    if (resolve != null) {
      resolved2.add(resolve);
    }
  }
  Specifics specifics=null;
  if (resolved1.size() > resolved2.size()) {
    specifics=checkExtendsList(resolved1,resolved2,Specifics.FIRST);
  }
 else   if (resolved2.size() > resolved1.size()) {
    specifics=checkExtendsList(resolved2,resolved1,Specifics.SECOND);
  }
  if (specifics != null)   return specifics;
  specifics=checkSubtyping(TypeConversionUtil.erasure(PsiSubstitutor.EMPTY.substitute(p1)),TypeConversionUtil.erasure(PsiSubstitutor.EMPTY.substitute(p2)),method1,method2);
  if (specifics != null) {
    return specifics;
  }
 else {
    final PsiType ctype1=classSubstitutor1.substitute(type1);
    final PsiType ctype2=classSubstitutor2.substitute(type2);
    return checkSubtyping(ctype1,ctype2,method1,method2);
  }
}
