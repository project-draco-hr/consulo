{
  final AnAction stopAction=createStopAction();
  toolbarActions.add(stopAction);
  final AnAction closeAction=createCloseAction(defaultExecutor,myDescriptor);
  toolbarActions.add(closeAction);
  myRunAction=new DumbAwareAction(null,null,IconLoader.getIcon("/actions/execute.png")){
    public void actionPerformed(    final AnActionEvent e){
      runExecuteActionInner(e);
    }
    public void update(    final AnActionEvent e){
      final EditorEx editor=getLanguageConsole().getConsoleEditor();
      final Lookup lookup=LookupManager.getActiveLookup(editor);
      e.getPresentation().setEnabled(!myProcessHandler.isProcessTerminated() && (lookup == null || !lookup.isCompletion()));
    }
  }
;
  EmptyAction.setupAction(myRunAction,"Console.Execute",null);
  toolbarActions.add(myRunAction);
  toolbarActions.add(CommonActionsManager.getInstance().createHelpAction("interactive_console"));
  final PairProcessor<AnActionEvent,String> historyProcessor=new PairProcessor<AnActionEvent,String>(){
    public boolean process(    final AnActionEvent e,    final String s){
      new WriteCommandAction(myProject,getLanguageConsole().getFile()){
        protected void run(        final Result result) throws Throwable {
          getLanguageConsole().getEditorDocument().setText(s == null ? "" : s);
        }
      }
.execute();
      return true;
    }
  }
;
  final AnAction historyNextAction=ConsoleHistoryModel.createHistoryAction(myHistory,true,historyProcessor);
  final AnAction historyPrevAction=ConsoleHistoryModel.createHistoryAction(myHistory,false,historyProcessor);
  historyNextAction.getTemplatePresentation().setVisible(false);
  historyPrevAction.getTemplatePresentation().setVisible(false);
  toolbarActions.add(historyNextAction);
  toolbarActions.add(historyPrevAction);
  return new AnAction[]{stopAction,closeAction,myRunAction,historyNextAction,historyPrevAction};
}
