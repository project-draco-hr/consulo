{
  final ConsoleHistoryModel myHistory=new ConsoleHistoryModel();
  final AnAction runAction=new ConsoleExecuteAction(languageConsole,myHistory,processHandler,consoleExecuteActionHandler);
  final PairProcessor<AnActionEvent,String> historyProcessor=new PairProcessor<AnActionEvent,String>(){
    public boolean process(    final AnActionEvent e,    final String s){
      new WriteCommandAction(languageConsole.getProject(),languageConsole.getFile()){
        protected void run(        final Result result) throws Throwable {
          languageConsole.getEditorDocument().setText(s == null ? "" : s);
        }
      }
.execute();
      return true;
    }
  }
;
  final EditorEx consoleEditor=languageConsole.getConsoleEditor();
  final AnAction upAction=ConsoleHistoryModel.createConsoleHistoryUpAction(createCanMoveUpComputable(consoleEditor),myHistory,historyProcessor);
  final AnAction downAction=ConsoleHistoryModel.createConsoleHistoryDownAction(createCanMoveDownComputable(consoleEditor),myHistory,historyProcessor);
  return new ConsoleExecutionActions(runAction,downAction,upAction);
}
