{
  final ConsoleHistoryModel myHistory=new ConsoleHistoryModel();
  final AnAction runAction=new ConsoleExecuteAction(languageConsole,myHistory,processHandler,consoleExecuteActionHandler);
  final PairProcessor<AnActionEvent,String> historyProcessor=new PairProcessor<AnActionEvent,String>(){
    public boolean process(    final AnActionEvent e,    final String s){
      new WriteCommandAction(languageConsole.getProject(),languageConsole.getFile()){
        protected void run(        final Result result) throws Throwable {
          languageConsole.getEditorDocument().setText(s == null ? "" : s);
        }
      }
.execute();
      return true;
    }
  }
;
  final EditorEx consoleEditor=languageConsole.getConsoleEditor();
  final Document document=consoleEditor.getDocument();
  final CaretModel caretModel=consoleEditor.getCaretModel();
  final AnAction upAction=new AnAction(){
    @Override public void actionPerformed(    final AnActionEvent e){
      historyProcessor.process(e,myHistory.getHistoryNext());
    }
    @Override public void update(    final AnActionEvent e){
      final boolean hasHistory=myHistory.hasHistory(true);
      if (!hasHistory) {
        e.getPresentation().setEnabled(false);
        return;
      }
      if (LookupManager.getActiveLookup(consoleEditor) != null) {
        e.getPresentation().setEnabled(false);
        return;
      }
      final int lineNumber=document.getLineNumber(caretModel.getOffset());
      final boolean canMove=lineNumber > 0;
      e.getPresentation().setEnabled(!canMove);
    }
  }
;
  final AnAction downAction=new AnAction(){
    @Override public void actionPerformed(    final AnActionEvent e){
      historyProcessor.process(e,myHistory.getHistoryPrev());
    }
    @Override public void update(    final AnActionEvent e){
      final boolean hasHistory=myHistory.hasHistory(false);
      if (!hasHistory) {
        e.getPresentation().setEnabled(false);
        return;
      }
      if (LookupManager.getActiveLookup(consoleEditor) != null) {
        e.getPresentation().setEnabled(false);
        return;
      }
      final int lineNumber=document.getLineNumber(caretModel.getOffset());
      final boolean canMove=lineNumber < document.getLineCount() - 1 && !StringUtil.isEmptyOrSpaces(document.getText().substring(caretModel.getOffset()));
      e.getPresentation().setEnabled(!canMove);
    }
  }
;
  upAction.getTemplatePresentation().setVisible(false);
  downAction.getTemplatePresentation().setVisible(false);
  upAction.registerCustomShortcutSet(KeyEvent.VK_UP,0,null);
  downAction.registerCustomShortcutSet(KeyEvent.VK_DOWN,0,null);
  return new ConsoleExecutionActions(runAction,downAction,upAction);
}
