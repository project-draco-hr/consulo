{
  myConsoleView=createConsoleView();
  if (myConsoleView instanceof LanguageConsoleViewImpl) {
    ((LanguageConsoleViewImpl)myConsoleView).setBorder(new SideBorder(UIUtil.getBorderColor(),SideBorder.LEFT));
  }
  myProcessHandler=createProcessHandler(process);
  myConsoleExecuteActionHandler=createExecuteActionHandler();
  ProcessTerminatedListener.attach(myProcessHandler);
  myProcessHandler.addProcessListener(new ProcessAdapter(){
    @Override public void processTerminated(    ProcessEvent event){
      finishConsole();
    }
  }
);
  myConsoleView.attachToProcess(myProcessHandler);
  final Executor defaultExecutor=DefaultRunExecutor.getRunExecutorInstance();
  final DefaultActionGroup toolbarActions=new DefaultActionGroup();
  final ActionToolbar actionToolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,toolbarActions,false);
  final JPanel panel=new JPanel(new BorderLayout());
  panel.add(actionToolbar.getComponent(),BorderLayout.WEST);
  panel.add(myConsoleView.getComponent(),BorderLayout.CENTER);
  actionToolbar.setTargetComponent(panel);
  final RunContentDescriptor contentDescriptor=new RunContentDescriptor(myConsoleView,myProcessHandler,panel,constructConsoleTitle(myConsoleTitle));
  contentDescriptor.setFocusComputable(new Computable<JComponent>(){
    @Override public JComponent compute(){
      return getLanguageConsole().getConsoleEditor().getContentComponent();
    }
  }
);
  contentDescriptor.setAutoFocusContent(isAutoFocusContent());
  final List<AnAction> actions=fillToolBarActions(toolbarActions,defaultExecutor,contentDescriptor);
  registerActionShortcuts(actions,getLanguageConsole().getConsoleEditor().getComponent());
  registerActionShortcuts(actions,panel);
  panel.updateUI();
  showConsole(defaultExecutor,contentDescriptor);
  myProcessHandler.startNotify();
}
