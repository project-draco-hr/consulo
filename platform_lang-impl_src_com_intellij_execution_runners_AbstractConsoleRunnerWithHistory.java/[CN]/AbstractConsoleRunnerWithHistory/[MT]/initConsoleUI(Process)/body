{
  myConsoleView=createConsoleView();
  myProcessHandler=createProcessHandler(process,myProvider.getCommandLineString());
  myConsoleExecuteActionHandler=createConsoleExecuteActionHandler();
  ProcessTerminatedListener.attach(myProcessHandler);
  myProcessHandler.addProcessListener(new ProcessAdapter(){
    @Override public void processTerminated(    ProcessEvent event){
      finishConsole();
    }
  }
);
  myConsoleView.attachToProcess(myProcessHandler);
  final Executor defaultExecutor=ExecutorRegistry.getInstance().getExecutorById(DefaultRunExecutor.EXECUTOR_ID);
  final DefaultActionGroup toolbarActions=new DefaultActionGroup();
  final ActionToolbar actionToolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,toolbarActions,false);
  final JPanel panel=new JPanel(new BorderLayout());
  panel.add(actionToolbar.getComponent(),BorderLayout.WEST);
  panel.add(myConsoleView.getComponent(),BorderLayout.CENTER);
  final RunContentDescriptor myDescriptor=new RunContentDescriptor(myConsoleView,myProcessHandler,panel,myConsoleTitle);
  final AnAction[] actions=fillToolBarActions(toolbarActions,defaultExecutor,myDescriptor);
  registerActionShortcuts(actions,getLanguageConsole().getConsoleEditor().getComponent());
  registerActionShortcuts(actions,panel);
  panel.updateUI();
  ExecutionManager.getInstance(myProject).getContentManager().showRunContent(defaultExecutor,myDescriptor);
  final ToolWindow window=ToolWindowManager.getInstance(myProject).getToolWindow(defaultExecutor.getId());
  window.activate(new Runnable(){
    public void run(){
      IdeFocusManager.getInstance(myProject).requestFocus(getLanguageConsole().getCurrentEditor().getContentComponent(),true);
    }
  }
);
  myProcessHandler.startNotify();
}
