{
  java_cup.runtime.Symbol CUP$LexParse$result;
switch (CUP$LexParse$act_num) {
case 71:
{
      Vector RESULT=null;
      RESULT=makePreClass(sym.LOWERCLASS);
      CUP$LexParse$result=new java_cup.runtime.Symbol(15,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
    }
  return CUP$LexParse$result;
case 70:
{
  Vector RESULT=null;
  RESULT=makePreClass(sym.UPPERCLASS);
  CUP$LexParse$result=new java_cup.runtime.Symbol(15,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 69:
{
Vector RESULT=null;
RESULT=makePreClass(sym.DIGITCLASS);
CUP$LexParse$result=new java_cup.runtime.Symbol(15,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 68:
{
Vector RESULT=null;
RESULT=makePreClass(sym.LETTERCLASS);
CUP$LexParse$result=new java_cup.runtime.Symbol(15,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 67:
{
Vector RESULT=null;
RESULT=makePreClass(sym.JLETTERDIGITCLASS);
CUP$LexParse$result=new java_cup.runtime.Symbol(15,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 66:
{
Vector RESULT=null;
RESULT=makePreClass(sym.JLETTERCLASS);
CUP$LexParse$result=new java_cup.runtime.Symbol(15,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 65:
{
Interval RESULT=null;
int cleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left;
int cright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right;
Character c=(Character)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).value;
RESULT=new Interval(c.charValue(),c.charValue());
CUP$LexParse$result=new java_cup.runtime.Symbol(11,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 64:
{
Interval RESULT=null;
int c1left=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).left;
int c1right=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).right;
Character c1=(Character)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).value;
int c2left=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left;
int c2right=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right;
Character c2=(Character)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).value;
RESULT=new Interval(c1.charValue(),c2.charValue());
CUP$LexParse$result=new java_cup.runtime.Symbol(11,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 63:
{
Vector RESULT=null;
int identleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left;
int identright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right;
String ident=(String)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).value;
syntaxError(ErrorMessages.CHARCLASS_MACRO,identleft,identright);
CUP$LexParse$result=new java_cup.runtime.Symbol(14,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 62:
{
Vector RESULT=null;
int listleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;
int listright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;
Vector list=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;
int identleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left;
int identright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right;
String ident=(String)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).value;
syntaxError(ErrorMessages.CHARCLASS_MACRO,identleft,identright);
CUP$LexParse$result=new java_cup.runtime.Symbol(14,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 61:
{
Vector RESULT=null;
int sleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left;
int sright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right;
String s=(String)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).value;
RESULT=new Vector();
for (int i=0; i < s.length(); i++) RESULT.addElement(new Interval(s.charAt(i),s.charAt(i)));
CUP$LexParse$result=new java_cup.runtime.Symbol(14,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 60:
{
Vector RESULT=null;
int listleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;
int listright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;
Vector list=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;
int sleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left;
int sright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right;
String s=(String)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).value;
for (int i=0; i < s.length(); i++) list.addElement(new Interval(s.charAt(i),s.charAt(i)));
RESULT=list;
CUP$LexParse$result=new java_cup.runtime.Symbol(14,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 59:
{
Vector RESULT=null;
int listleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left;
int listright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right;
Vector list=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).value;
RESULT=list;
CUP$LexParse$result=new java_cup.runtime.Symbol(14,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 58:
{
Vector RESULT=null;
int listleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;
int listright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;
Vector list=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;
int plistleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left;
int plistright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right;
Vector plist=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).value;
for (Enumeration e=plist.elements(); e.hasMoreElements(); ) list.addElement(e.nextElement());
RESULT=list;
CUP$LexParse$result=new java_cup.runtime.Symbol(14,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 57:
{
Vector RESULT=null;
int elemleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left;
int elemright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right;
Interval elem=(Interval)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).value;
Vector list=new Vector();
list.addElement(elem);
RESULT=list;
CUP$LexParse$result=new java_cup.runtime.Symbol(14,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 56:
{
Vector RESULT=null;
int listleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;
int listright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;
Vector list=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;
int elemleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left;
int elemright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right;
Interval elem=(Interval)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).value;
list.addElement(elem);
RESULT=list;
CUP$LexParse$result=new java_cup.runtime.Symbol(14,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 55:
{
RegExp RESULT=null;
int listleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;
int listright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;
Vector list=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;
int closeleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left;
int closeright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right;
Object close=(Object)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).value;
try {
list.addElement(new Interval('-','-'));
charClasses.makeClassNot(list,Options.jlex && scanner.caseless);
}
 catch (CharClassException e) {
syntaxError(ErrorMessages.CHARSET_2_SMALL,closeleft,closeright);
}
RESULT=new RegExp1(sym.CCLASSNOT,list);
CUP$LexParse$result=new java_cup.runtime.Symbol(9,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 4)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 54:
{
RegExp RESULT=null;
int listleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;
int listright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;
Vector list=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;
int closeleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left;
int closeright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right;
Object close=(Object)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).value;
try {
list.addElement(new Interval('-','-'));
charClasses.makeClass(list,Options.jlex && scanner.caseless);
}
 catch (CharClassException e) {
syntaxError(ErrorMessages.CHARSET_2_SMALL,closeleft,closeright);
}
RESULT=new RegExp1(sym.CCLASS,list);
CUP$LexParse$result=new java_cup.runtime.Symbol(9,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 3)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 53:
{
RegExp RESULT=null;
int listleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;
int listright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;
Vector list=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;
int closeleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left;
int closeright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right;
Object close=(Object)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).value;
try {
charClasses.makeClassNot(list,Options.jlex && scanner.caseless);
}
 catch (CharClassException e) {
syntaxError(ErrorMessages.CHARSET_2_SMALL,closeleft,closeright);
}
RESULT=new RegExp1(sym.CCLASSNOT,list);
CUP$LexParse$result=new java_cup.runtime.Symbol(9,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 3)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 52:
{
RegExp RESULT=null;
int closeleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left;
int closeright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right;
Object close=(Object)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).value;
Vector list=new Vector();
list.addElement(new Interval((char)0,CharClasses.maxChar));
try {
charClasses.makeClass(list,false);
}
 catch (CharClassException e) {
syntaxError(ErrorMessages.CHARSET_2_SMALL,closeleft,closeright);
}
RESULT=new RegExp1(sym.CCLASS,list);
CUP$LexParse$result=new java_cup.runtime.Symbol(9,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 51:
{
RegExp RESULT=null;
int listleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;
int listright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;
Vector list=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;
int closeleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left;
int closeright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right;
Object close=(Object)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).value;
try {
charClasses.makeClass(list,Options.jlex && scanner.caseless);
}
 catch (CharClassException e) {
syntaxError(ErrorMessages.CHARSET_2_SMALL,closeleft,closeright);
}
RESULT=new RegExp1(sym.CCLASS,list);
CUP$LexParse$result=new java_cup.runtime.Symbol(9,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 50:
{
RegExp RESULT=null;
RESULT=new RegExp1(sym.CCLASS,null);
CUP$LexParse$result=new java_cup.runtime.Symbol(9,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 49:
{
RegExp RESULT=null;
int cleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left;
int cright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right;
Character c=(Character)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).value;
try {
if (scanner.caseless) {
charClasses.makeClass(c.charValue(),true);
RESULT=new RegExp1(sym.CHAR_I,c);
}
 else {
charClasses.makeClass(c.charValue(),false);
RESULT=new RegExp1(sym.CHAR,c);
}
}
 catch (CharClassException e) {
syntaxError(ErrorMessages.CS2SMALL_CHAR,cleft,cright);
}
CUP$LexParse$result=new java_cup.runtime.Symbol(8,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 48:
{
RegExp RESULT=null;
Vector any=new Vector();
any.addElement(new Interval('\n','\n'));
charClasses.makeClass('\n',false);
RESULT=new RegExp1(sym.CCLASSNOT,any);
CUP$LexParse$result=new java_cup.runtime.Symbol(8,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 47:
{
RegExp RESULT=null;
int strleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left;
int strright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right;
String str=(String)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).value;
try {
if (scanner.caseless) {
charClasses.makeClass(str,true);
RESULT=new RegExp1(sym.STRING_I,str);
}
 else {
charClasses.makeClass(str,false);
RESULT=new RegExp1(sym.STRING,str);
}
}
 catch (CharClassException e) {
syntaxError(ErrorMessages.CS2SMALL_STRING,strleft,strright);
}
CUP$LexParse$result=new java_cup.runtime.Symbol(8,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 46:
{
RegExp RESULT=null;
int listleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left;
int listright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right;
Vector list=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).value;
try {
charClasses.makeClass(list,false);
}
 catch (CharClassException e) {
syntaxError(ErrorMessages.CHARSET_2_SMALL,listleft);
}
RESULT=new RegExp1(sym.CCLASS,list);
CUP$LexParse$result=new java_cup.runtime.Symbol(8,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 45:
{
RegExp RESULT=null;
int cleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left;
int cright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right;
RegExp c=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).value;
RESULT=c;
CUP$LexParse$result=new java_cup.runtime.Symbol(8,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 44:
{
RegExp RESULT=null;
int identleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left;
int identright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right;
String ident=(String)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).value;
if (!scanner.macroDefinition) {
if (!macros.markUsed(ident)) throw new ScannerException(scanner.file,ErrorMessages.MACRO_UNDECL,identleft,identright);
}
RESULT=new RegExp1(sym.MACROUSE,ident);
CUP$LexParse$result=new java_cup.runtime.Symbol(8,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 43:
{
RegExp RESULT=null;
int rleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;
int rright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;
RegExp r=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;
RESULT=r;
CUP$LexParse$result=new java_cup.runtime.Symbol(8,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 42:
{
RegExp RESULT=null;
int rleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 3)).left;
int rright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 3)).right;
RegExp r=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 3)).value;
int n1left=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).left;
int n1right=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).right;
Integer n1=(Integer)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).value;
int n2left=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;
int n2right=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;
Integer n2=(Integer)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;
RESULT=makeRepeat(r,n1.intValue(),n2.intValue(),n1left,n2right);
CUP$LexParse$result=new java_cup.runtime.Symbol(8,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 3)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 41:
{
RegExp RESULT=null;
int rleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).left;
int rright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).right;
RegExp r=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).value;
int nleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;
int nright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;
Integer n=(Integer)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;
int bleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left;
int bright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right;
Object b=(Object)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).value;
RESULT=makeRepeat(r,n.intValue(),n.intValue(),bleft,bright);
CUP$LexParse$result=new java_cup.runtime.Symbol(8,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 40:
{
RegExp RESULT=null;
int rleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;
int rright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;
RegExp r=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;
RESULT=new RegExp1(sym.QUESTION,r);
CUP$LexParse$result=new java_cup.runtime.Symbol(8,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 39:
{
RegExp RESULT=null;
int rleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;
int rright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;
RegExp r=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;
RESULT=new RegExp1(sym.PLUS,r);
CUP$LexParse$result=new java_cup.runtime.Symbol(8,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 38:
{
RegExp RESULT=null;
int rleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;
int rright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;
RegExp r=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;
RESULT=new RegExp1(sym.STAR,r);
CUP$LexParse$result=new java_cup.runtime.Symbol(8,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 37:
{
RegExp RESULT=null;
int rleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left;
int rright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right;
RegExp r=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).value;
RESULT=new RegExp1(sym.TILDE,r);
CUP$LexParse$result=new java_cup.runtime.Symbol(7,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 36:
{
RegExp RESULT=null;
int rleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left;
int rright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right;
RegExp r=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).value;
RESULT=new RegExp1(sym.BANG,r);
CUP$LexParse$result=new java_cup.runtime.Symbol(7,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 35:
{
RegExp RESULT=null;
int rleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left;
int rright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right;
RegExp r=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).value;
RESULT=r;
CUP$LexParse$result=new java_cup.runtime.Symbol(7,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 34:
{
RegExp RESULT=null;
int rleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left;
int rright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right;
RegExp r=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).value;
RESULT=r;
CUP$LexParse$result=new java_cup.runtime.Symbol(6,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 33:
{
RegExp RESULT=null;
int r1left=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;
int r1right=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;
RegExp r1=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;
int r2left=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left;
int r2right=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right;
RegExp r2=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).value;
RESULT=new RegExp2(sym.CONCAT,r1,r2);
CUP$LexParse$result=new java_cup.runtime.Symbol(6,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 32:
{
RegExp RESULT=null;
int bleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left;
int bright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right;
Object b=(Object)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).value;
syntaxError(ErrorMessages.REGEXP_EXPECTED,bleft,bright);
CUP$LexParse$result=new java_cup.runtime.Symbol(5,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 31:
{
RegExp RESULT=null;
int rleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left;
int rright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right;
RegExp r=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).value;
RESULT=r;
CUP$LexParse$result=new java_cup.runtime.Symbol(5,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 30:
{
RegExp RESULT=null;
int r1left=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).left;
int r1right=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).right;
RegExp r1=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).value;
int r2left=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left;
int r2right=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right;
RegExp r2=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).value;
RESULT=new RegExp2(sym.BAR,r1,r2);
CUP$LexParse$result=new java_cup.runtime.Symbol(5,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 29:
{
Boolean RESULT=null;
RESULT=new Boolean(false);
CUP$LexParse$result=new java_cup.runtime.Symbol(17,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 28:
{
Boolean RESULT=null;
charClasses.makeClass('\n',false);
RESULT=new Boolean(true);
CUP$LexParse$result=new java_cup.runtime.Symbol(17,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 27:
{
Vector RESULT=null;
int cleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left;
int cright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right;
Object c=(Object)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).value;
syntaxError(ErrorMessages.REGEXP_EXPECTED,cleft,cright + 1);
CUP$LexParse$result=new java_cup.runtime.Symbol(12,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 26:
{
Vector RESULT=null;
int idleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left;
int idright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right;
String id=(String)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).value;
Vector list=new Vector();
stateNumber=scanner.states.getNumber(id);
if (stateNumber != null) list.addElement(stateNumber);
 else {
throw new ScannerException(scanner.file,ErrorMessages.LEXSTATE_UNDECL,idleft,idright);
}
RESULT=list;
CUP$LexParse$result=new java_cup.runtime.Symbol(12,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 25:
{
Vector RESULT=null;
int idleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).left;
int idright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).right;
String id=(String)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).value;
int listleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left;
int listright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right;
Vector list=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).value;
stateNumber=scanner.states.getNumber(id);
if (stateNumber != null) list.addElement(stateNumber);
 else {
throw new ScannerException(scanner.file,ErrorMessages.LEXSTATE_UNDECL,idleft,idright);
}
RESULT=list;
CUP$LexParse$result=new java_cup.runtime.Symbol(12,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 24:
{
Vector RESULT=null;
RESULT=new Vector();
CUP$LexParse$result=new java_cup.runtime.Symbol(13,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 23:
{
Vector RESULT=null;
int listleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;
int listright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;
Vector list=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;
RESULT=list;
CUP$LexParse$result=new java_cup.runtime.Symbol(13,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 22:
{
Action RESULT=null;
RESULT=null;
CUP$LexParse$result=new java_cup.runtime.Symbol(18,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 21:
{
Action RESULT=null;
int aleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left;
int aright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right;
Action a=(Action)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).value;
RESULT=a;
CUP$LexParse$result=new java_cup.runtime.Symbol(18,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 20:
{
RegExp RESULT=null;
int sleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;
int sright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;
RegExp s=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;
RESULT=new RegExp2(sym.CONCAT,s,makeNL());
CUP$LexParse$result=new java_cup.runtime.Symbol(10,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 19:
{
RegExp RESULT=null;
RESULT=null;
CUP$LexParse$result=new java_cup.runtime.Symbol(10,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 18:
{
RegExp RESULT=null;
int rleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left;
int rright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right;
RegExp r=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).value;
RESULT=r;
CUP$LexParse$result=new java_cup.runtime.Symbol(10,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 17:
{
RegExp RESULT=null;
RESULT=makeNL();
CUP$LexParse$result=new java_cup.runtime.Symbol(10,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 16:
{
Integer RESULT=null;
CUP$LexParse$result=new java_cup.runtime.Symbol(3,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 15:
{
Integer RESULT=null;
int sleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).left;
int sright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).right;
Vector s=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).value;
int aleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left;
int aright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right;
Action a=(Action)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).value;
RESULT=new Integer(regExps.insert(s,a));
CUP$LexParse$result=new java_cup.runtime.Symbol(3,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 14:
{
Integer RESULT=null;
int sleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 4)).left;
int sright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 4)).right;
Vector s=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 4)).value;
int bolleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 3)).left;
int bolright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 3)).right;
Boolean bol=(Boolean)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 3)).value;
int rleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).left;
int rright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).right;
RegExp r=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 2)).value;
int lleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;
int lright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;
RegExp l=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;
int aleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left;
int aright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right;
Action a=(Action)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).value;
RESULT=new Integer(regExps.insert(rleft,s,r,a,bol,l));
CUP$LexParse$result=new java_cup.runtime.Symbol(3,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 4)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 13:
{
Vector RESULT=null;
int rleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left;
int rright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right;
Integer r=(Integer)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).value;
RESULT=new Vector();
RESULT.addElement(r);
CUP$LexParse$result=new java_cup.runtime.Symbol(16,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 12:
{
Vector RESULT=null;
int statesleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 4)).left;
int statesright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 4)).right;
Vector states=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 4)).value;
int rlistleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;
int rlistright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;
Vector rlist=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;
Enumeration rs=rlist.elements();
while (rs.hasMoreElements()) {
Integer elem=(Integer)rs.nextElement();
regExps.addStates(elem.intValue(),states);
}
RESULT=rlist;
CUP$LexParse$result=new java_cup.runtime.Symbol(16,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 5)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 11:
{
Vector RESULT=null;
int rlist1left=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 6)).left;
int rlist1right=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 6)).right;
Vector rlist1=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 6)).value;
int statesleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 4)).left;
int statesright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 4)).right;
Vector states=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 4)).value;
int rlist2left=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;
int rlist2right=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;
Vector rlist2=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;
Enumeration rs=rlist2.elements();
while (rs.hasMoreElements()) {
Integer elem=(Integer)rs.nextElement();
regExps.addStates(elem.intValue(),states);
rlist1.addElement(elem);
}
RESULT=rlist1;
CUP$LexParse$result=new java_cup.runtime.Symbol(16,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 6)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 10:
{
Vector RESULT=null;
int rlistleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;
int rlistright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;
Vector rlist=(Vector)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;
int rleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left;
int rright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right;
Integer r=(Integer)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).value;
rlist.addElement(r);
RESULT=rlist;
CUP$LexParse$result=new java_cup.runtime.Symbol(16,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 9:
{
Object RESULT=null;
int eleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left;
int eright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right;
Object e=(Object)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).value;
syntaxError(ErrorMessages.REGEXP_EXPECTED,eleft,eright);
CUP$LexParse$result=new java_cup.runtime.Symbol(2,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 8:
{
Object RESULT=null;
int nameleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 3)).left;
int nameright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 3)).right;
String name=(String)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 3)).value;
int definitionleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;
int definitionright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;
RegExp definition=(RegExp)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;
macros.insert(name,definition);
CUP$LexParse$result=new java_cup.runtime.Symbol(2,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 3)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 7:
{
Object RESULT=null;
charClasses.setMaxCharCode(0xFFFF);
CUP$LexParse$result=new java_cup.runtime.Symbol(2,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 6:
{
Object RESULT=null;
charClasses.setMaxCharCode(255);
CUP$LexParse$result=new java_cup.runtime.Symbol(2,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 5:
{
Object RESULT=null;
CUP$LexParse$result=new java_cup.runtime.Symbol(1,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 4:
{
Object RESULT=null;
CUP$LexParse$result=new java_cup.runtime.Symbol(1,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 3:
{
Object RESULT=null;
CUP$LexParse$result=new java_cup.runtime.Symbol(1,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 2:
{
NFA RESULT=null;
fatalError(ErrorMessages.NO_LEX_SPEC);
CUP$LexParse$result=new java_cup.runtime.Symbol(4,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 1:
{
NFA RESULT=null;
scanner.t.stop();
Out.checkErrors();
Out.time(ErrorMessages.PARSING_TOOK,t);
macros.expand();
Enumeration unused=macros.unused();
while (unused.hasMoreElements()) {
Out.warning("Macro \"" + unused.nextElement() + "\" has been declared but never used.");
}
SemCheck.check(regExps,macros,charClasses.getMaxCharCode(),scanner.file);
regExps.checkActions();
if (Options.dump) charClasses.dump();
Out.print("Constructing NFA : ");
t.start();
int num=regExps.getNum();
RESULT=new NFA(charClasses.getNumClasses(),scanner,regExps,macros,charClasses);
eofActions.setNumLexStates(scanner.states.number());
for (int i=0; i < num; i++) {
if (regExps.isEOF(i)) eofActions.add(regExps.getStates(i),regExps.getAction(i));
 else RESULT.addRegExp(i);
}
if (scanner.standalone) RESULT.addStandaloneRule();
t.stop();
Out.time("");
Out.time(ErrorMessages.NFA_TOOK,t);
CUP$LexParse$result=new java_cup.runtime.Symbol(4,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 3)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
return CUP$LexParse$result;
case 0:
{
Object RESULT=null;
int start_valleft=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left;
int start_valright=((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).right;
NFA start_val=(NFA)((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).value;
RESULT=start_val;
CUP$LexParse$result=new java_cup.runtime.Symbol(0,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 1)).left,((java_cup.runtime.Symbol)CUP$LexParse$stack.elementAt(CUP$LexParse$top - 0)).right,RESULT);
}
CUP$LexParse$parser.done_parsing();
return CUP$LexParse$result;
default :
throw new Exception("Invalid action number found in internal parse table");
}
}
