{
  if (method.getBody() == null) {
    String message=REFACTORING_NAME + " refactoring cannot be applied to abstract methods";
    RefactoringMessageUtil.showErrorMessage(REFACTORING_NAME,message,HelpID.INLINE_METHOD,project);
    return;
  }
  if (InlineMethodProcessor.checkBadReturns(method)) {
    String message=REFACTORING_NAME + " refactoring is not supported when return statement interrupts the execution flow";
    RefactoringMessageUtil.showErrorMessage(REFACTORING_NAME,message,HelpID.INLINE_METHOD,project);
    return;
  }
  if (checkRecursive(method)) {
    String message=REFACTORING_NAME + " refactoring is not supported for recursive methods";
    RefactoringMessageUtil.showErrorMessage(REFACTORING_NAME,message,HelpID.INLINE_METHOD,project);
    return;
  }
  PsiReference reference=editor != null ? TargetElementUtil.findReference(editor,editor.getCaretModel().getOffset()) : null;
  if (method.isConstructor()) {
    if (method.isVarArgs()) {
      String message=REFACTORING_NAME + " refactoring cannot be applied to vararg constructors";
      RefactoringMessageUtil.showErrorMessage(REFACTORING_NAME,message,HelpID.INLINE_METHOD,project);
      return;
    }
    if (!checkChainingConstructor(method)) {
      String message=REFACTORING_NAME + " refactoring cannot be applied to inline non-chaining constructors";
      RefactoringMessageUtil.showErrorMessage(REFACTORING_NAME,message,HelpID.INLINE_METHOD,project);
      return;
    }
    if (reference != null) {
      PsiCall constructorCall=RefactoringUtil.getEnclosingConstructorCall((PsiJavaCodeReferenceElement)reference.getElement());
      if (constructorCall == null || !method.equals(constructorCall.resolveMethod()))       reference=null;
    }
  }
 else {
    if (reference != null && !method.equals(reference.resolve())) {
      reference=null;
    }
  }
  final boolean invokedOnReference=reference != null;
  if (!invokedOnReference && !method.isWritable()) {
    RefactoringMessageUtil.showReadOnlyElementRefactoringMessage(project,method);
    return;
  }
  PsiJavaCodeReferenceElement element=reference != null ? (PsiJavaCodeReferenceElement)reference.getElement() : null;
  final InlineMethodProcessor processor=new InlineMethodProcessor(project,method,element,editor);
  InlineMethodDialog dialog=new InlineMethodDialog(project,method,invokedOnReference,processor);
  dialog.show();
}
