{
  final Set<Module> modules=new THashSet<Module>();
  scope.accept(new PsiElementVisitor(){
    @Override public void visitElement(    PsiElement element){
      final Module module=ModuleUtilCore.findModuleForPsiElement(element);
      if (module != null) {
        modules.add(module);
      }
    }
  }
);
  for (  Module module : modules) {
    LanguageLevel languageLevel=ModuleUtilCore.getExtension(module,JavaModuleExtension.class).getLanguageLevel();
    LOGGER.assertTrue(languageLevel != null);
    final RefModule refModule=globalContext.getRefManager().getRefModule(module);
    for (    OrderEntry entry : ModuleRootManager.getInstance(module).getOrderEntries()) {
      if (!(entry instanceof ModuleOrderEntry))       continue;
      final Module dependantModule=((ModuleOrderEntry)entry).getModule();
      if (dependantModule == null)       continue;
      LanguageLevel dependantLanguageLevel=ModuleUtilCore.getExtension(dependantModule,JavaModuleExtension.class).getLanguageLevel();
      LOGGER.assertTrue(dependantLanguageLevel != null);
      if (languageLevel.compareTo(dependantLanguageLevel) < 0) {
        final CommonProblemDescriptor problemDescriptor=manager.createProblemDescriptor("Inconsistent language level settings: module " + module.getName() + " with language level "+ languageLevel+ " depends on module "+ dependantModule.getName()+ " with language level "+ dependantLanguageLevel,new UnnecessaryModuleDependencyInspection.RemoveModuleDependencyFix(module,dependantModule),new OpenModuleSettingsFix(module));
        problemProcessor.addProblemElement(refModule,problemDescriptor);
      }
    }
  }
}
