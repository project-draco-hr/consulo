{
  if (psiClass.isAnonymous() || psiClass.isInterface() || psiClass.isEnum()) {
    return;
  }
  if (!hasInheritConstructorsAnnotation(psiClass))   return;
  final PsiClass superClass=psiClass.getSuperClass();
  if (superClass == null)   return;
  final PsiSubstitutor superClassSubstitutor=TypeConversionUtil.getSuperClassSubstitutor(superClass,psiClass,PsiSubstitutor.EMPTY);
  for (  PsiMethod constructor : superClass.getConstructors()) {
    final GrLightMethodBuilder inheritedConstructor=new GrLightMethodBuilder(psiClass.getManager(),psiClass.getName()).setContainingClass(psiClass);
    inheritedConstructor.setConstructor(true).setNavigationElement(psiClass);
    for (    PsiParameter parameter : constructor.getParameterList().getParameters()) {
      inheritedConstructor.addParameter(StringUtil.notNullize(parameter.getName()),superClassSubstitutor.substitute(parameter.getType()),false);
    }
    if (psiClass.findCodeMethodsBySignature(inheritedConstructor,false).length == 0) {
      collector.add(inheritedConstructor);
    }
  }
}
