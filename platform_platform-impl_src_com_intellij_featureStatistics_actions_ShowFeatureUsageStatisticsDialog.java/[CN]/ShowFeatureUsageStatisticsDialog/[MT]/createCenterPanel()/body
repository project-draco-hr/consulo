{
  Splitter splitter=new Splitter(true);
  splitter.setShowDividerControls(true);
  ProductivityFeaturesRegistry registry=ProductivityFeaturesRegistry.getInstance();
  ArrayList<FeatureDescriptor> features=new ArrayList<FeatureDescriptor>();
  for (  String id : registry.getFeatureIds()) {
    features.add(registry.getFeatureDescriptor(id));
  }
  final TableView table=new TableView(new ListTableModel(COLUMNS,features,0));
  JPanel controlsPanel=new JPanel(new VerticalFlowLayout());
  Application app=ApplicationManager.getApplication();
  long uptime=System.currentTimeMillis() - app.getStartTime();
  long idletime=app.getIdleTime();
  final String uptimeS=FeatureStatisticsBundle.message("feature.statistics.application.uptime",ApplicationNamesInfo.getInstance().getProductName(),DateFormatUtil.formatDuration(uptime));
  final String idleTimeS=FeatureStatisticsBundle.message("feature.statistics.application.idle.time",ApplicationNamesInfo.getInstance().getProductName(),DateFormatUtil.formatDuration(idletime));
  String labelText=uptimeS + ", " + idleTimeS;
  Date completionDate=FeatureUsageTracker.getInstance().getCompletionStatisticsStartDate();
  if (completionDate != null) {
    int spared=FeatureUsageTracker.getInstance().getCharactersSparedByCompletion();
    String total=spared > 1024 * 1024 ? (spared / 1024 / 1024) + "MB code" : spared > 1024 ? (spared / 1024) + "KB code" : spared + " characters";
    long perDayCount=spared / Math.min(1,DateFormatUtil.getDifferenceInDays(completionDate,new Date()));
    String perDay=perDayCount > 1024 * 1024 ? (perDayCount / 1024 / 1024) + "MB" : perDayCount > 1024 ? (perDayCount / 1024) + "KB" : perDayCount + " characters";
    labelText+="<br>Code completion has saved you from typing at least " + total + "  since "+ DateFormatUtil.formatDate(completionDate)+ " (\u2245 "+ perDay+ " per day)";
  }
  controlsPanel.add(new JLabel("<html><body>" + labelText + "</body></html>"),BorderLayout.NORTH);
  JPanel topPanel=new JPanel(new BorderLayout());
  topPanel.add(controlsPanel,BorderLayout.NORTH);
  topPanel.add(ScrollPaneFactory.createScrollPane(table),BorderLayout.CENTER);
  splitter.setFirstComponent(topPanel);
  final JEditorPane browser=new JEditorPane(UIUtil.HTML_MIME,"");
  browser.setEditable(false);
  splitter.setSecondComponent(ScrollPaneFactory.createScrollPane(browser));
  table.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      Collection selection=table.getSelection();
      try {
        if (selection.isEmpty()) {
          browser.read(new StringReader(""),null);
        }
 else {
          FeatureDescriptor feature=(FeatureDescriptor)selection.iterator().next();
          TipUIUtil.openTipInBrowser(feature.getTipFileName(),browser,feature.getProvider());
        }
      }
 catch (      IOException ex) {
      }
    }
  }
);
  return splitter;
}
