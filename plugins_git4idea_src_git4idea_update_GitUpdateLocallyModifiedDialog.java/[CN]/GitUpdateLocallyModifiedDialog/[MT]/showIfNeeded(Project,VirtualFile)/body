{
  final ArrayList<String> files=new ArrayList<String>();
  try {
    scanFiles(project,root,files);
    final AtomicBoolean rc=new AtomicBoolean(true);
    if (!files.isEmpty()) {
      UIUtil.invokeAndWaitIfNeeded(new Runnable(){
        public void run(){
          GitUpdateLocallyModifiedDialog d=new GitUpdateLocallyModifiedDialog(project,root,files);
          d.show();
          rc.set(d.isOK());
        }
      }
);
      if (rc.get()) {
        if (!files.isEmpty()) {
          revertFiles(project,root,files);
        }
      }
    }
    return rc.get();
  }
 catch (  final VcsException e) {
    UIUtil.invokeAndWaitIfNeeded(new Runnable(){
      public void run(){
        GitUIUtil.showOperationError(project,e,"Checking for locally modified files");
      }
    }
);
    return false;
  }
}
