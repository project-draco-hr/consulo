{
  final LinkedList<Pair<PsiBuilder.Marker,PsiBuilder.Marker>> parenList=new LinkedList<Pair<PsiBuilder.Marker,PsiBuilder.Marker>>();
  final LinkedList<Pair<PsiBuilder.Marker,Integer>> siblingList=new LinkedList<Pair<PsiBuilder.Marker,Integer>>();
  PsiBuilder.Marker marker=null;
  final Runnable checkSiblingsRunnable=new Runnable(){
    public void run(){
      main:       while (!siblingList.isEmpty()) {
        final Pair<PsiBuilder.Marker,PsiBuilder.Marker> parenPair=parenList.peek();
        final int rating=siblingList.getFirst().second;
        int count=0;
        for (        Pair<PsiBuilder.Marker,Integer> pair : siblingList) {
          if (pair.second != rating || parenPair != null && pair.first == parenPair.second)           break main;
          if (++count >= MAX_CHILDREN_IN_TREE) {
            final PsiBuilder.Marker parentMarker=pair.first.precede();
            while (count-- > 0) {
              siblingList.removeFirst();
            }
            parentMarker.done(chunkType);
            siblingList.addFirst(Pair.create(parentMarker,rating + 1));
            continue main;
          }
        }
        break;
      }
    }
  }
;
  boolean checkParens=state.braces != null && checkBraces;
  int totalCount=0;
  int tokenCount=0;
  if (checkParens && builder_.rawLookup(-1) == state.braces[0].getLeftBraceType()) {
    LighterASTNode doneMarker=builder_.getLatestDoneMarker();
    if (doneMarker != null && doneMarker.getStartOffset() == builder_.rawTokenTypeStart(-1) && doneMarker.getTokenType() == TokenType.ERROR_ELEMENT) {
      parenList.add(Pair.create(((PsiBuilder.Marker)doneMarker).precede(),(PsiBuilder.Marker)null));
    }
  }
  while (true) {
    final IElementType tokenType=builder_.getTokenType();
    if (checkParens && (tokenType == state.braces[0].getLeftBraceType() || tokenType == state.braces[0].getRightBraceType() && !parenList.isEmpty())) {
      if (marker != null) {
        marker.done(chunkType);
        siblingList.addFirst(Pair.create(marker,1));
        marker=null;
        tokenCount=0;
      }
      if (tokenType == state.braces[0].getLeftBraceType()) {
        final Pair<PsiBuilder.Marker,Integer> prev=siblingList.peek();
        parenList.addFirst(Pair.create(builder_.mark(),prev == null ? null : prev.first));
      }
      checkSiblingsRunnable.run();
      builder_.advanceLexer();
      if (tokenType == state.braces[0].getRightBraceType()) {
        final Pair<PsiBuilder.Marker,PsiBuilder.Marker> pair=parenList.removeFirst();
        pair.first.done(chunkType);
        while (!siblingList.isEmpty() && siblingList.getFirst().first != pair.second) {
          siblingList.removeFirst();
        }
        siblingList.addFirst(Pair.create(pair.first,1));
        checkSiblingsRunnable.run();
      }
    }
 else {
      if (marker == null) {
        marker=builder_.mark();
      }
      final boolean result=(state.altMode && !parenList.isEmpty() || eatMoreCondition.parse(builder_,level + 1)) && parser.parse(builder_,level + 1);
      if (result) {
        tokenCount++;
        totalCount++;
      }
      if (!result) {
        break;
      }
    }
    if (tokenCount >= MAX_CHILDREN_IN_TREE && marker != null) {
      marker.done(chunkType);
      siblingList.addFirst(Pair.create(marker,1));
      checkSiblingsRunnable.run();
      marker=null;
      tokenCount=0;
    }
  }
  if (marker != null) {
    marker.drop();
  }
  for (  Pair<PsiBuilder.Marker,PsiBuilder.Marker> pair : parenList) {
    pair.first.drop();
  }
  return totalCount != 0;
}
