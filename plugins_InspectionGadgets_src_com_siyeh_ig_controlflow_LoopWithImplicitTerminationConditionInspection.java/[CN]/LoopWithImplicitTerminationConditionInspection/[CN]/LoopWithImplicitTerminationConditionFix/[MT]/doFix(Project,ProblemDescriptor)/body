{
  final PsiElement element=descriptor.getPsiElement();
  final PsiElement parent=element.getParent();
  final PsiExpression loopCondition;
  final PsiStatement body;
  if (parent instanceof PsiWhileStatement) {
    final PsiWhileStatement whileStatement=(PsiWhileStatement)parent;
    loopCondition=whileStatement.getCondition();
    body=whileStatement.getBody();
  }
 else   if (parent instanceof PsiDoWhileStatement) {
    final PsiDoWhileStatement doWhileStatement=(PsiDoWhileStatement)parent;
    loopCondition=doWhileStatement.getCondition();
    body=doWhileStatement.getBody();
  }
 else   if (parent instanceof PsiForStatement) {
    final PsiForStatement forStatement=(PsiForStatement)parent;
    loopCondition=forStatement.getCondition();
    body=forStatement.getBody();
  }
 else {
    return;
  }
  if (loopCondition == null) {
    return;
  }
  final PsiStatement statement;
  if (body instanceof PsiBlockStatement) {
    final PsiBlockStatement blockStatement=(PsiBlockStatement)body;
    final PsiCodeBlock codeBlock=blockStatement.getCodeBlock();
    final PsiStatement[] statements=codeBlock.getStatements();
    if (statements.length == 0) {
      return;
    }
    statement=statements[0];
  }
 else {
    statement=body;
  }
  if (!(statement instanceof PsiIfStatement)) {
    return;
  }
  final PsiIfStatement ifStatement=(PsiIfStatement)statement;
  final PsiExpression ifCondition=ifStatement.getCondition();
  if (ifCondition == null) {
    return;
  }
  final PsiStatement thenBranch=ifStatement.getThenBranch();
  final PsiStatement elseBranch=ifStatement.getElseBranch();
  if (containsUnlabeledBreakStatement(thenBranch)) {
    final String negatedExpressionText=BoolUtils.getNegatedExpressionText(ifCondition);
    replaceExpression(loopCondition,negatedExpressionText);
    if (elseBranch == null) {
      ifStatement.delete();
    }
 else {
      ifStatement.replace(elseBranch);
    }
  }
 else   if (containsUnlabeledBreakStatement(elseBranch)) {
    loopCondition.replace(ifCondition);
    if (thenBranch == null) {
      ifStatement.delete();
    }
 else {
      ifStatement.replace(thenBranch);
    }
  }
}
