{
  final String status="<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<status>\n" + "<target\n"+ "   path=\".\">\n"+ "<entry\n"+ "   path=\"slave\">\n"+ "<wc-status\n"+ "   item=\"external\"\n"+ "   props=\"none\">\n"+ "</wc-status>\n"+ "</entry>\n"+ "<entry\n"+ "   path=\"src\\com\\test\\just\">\n"+ "<wc-status\n"+ "   props=\"none\"\n"+ "   item=\"unversioned\">\n"+ "</wc-status>\n"+ "</entry>\n"+ "<entry\n"+ "   path=\"C:\\TestProjects\\sortedProjects\\Subversion\\local2\\sep12main\\main\\slave\\src\\com\\slave\\MacMessagesParser.java\">\n"+ "<wc-status\n"+ "   item=\"added\"\n"+ "   props=\"none\"\n"+ "   copied=\"true\">\n"+ "<commit\n"+ "   revision=\"7\">\n"+ "<author>admin</author>\n"+ "<date>2012-09-12T12:16:51.621000Z</date>\n"+ "</commit>\n"+ "</wc-status>\n"+ "</entry>\n"+ "<entry\n"+ "   path=\"C:\\TestProjects\\sortedProjects\\Subversion\\local2\\sep12main\\main\\slave\\src\\com\\slave\\SomeOtherClass.java\">\n"+ "<wc-status\n"+ "   props=\"none\"\n"+ "   item=\"deleted\"\n"+ "   revision=\"7\">\n"+ "<commit\n"+ "   revision=\"7\">\n"+ "<author>admin</author>\n"+ "<date>2012-09-12T12:16:51.621000Z</date>\n"+ "</commit>\n"+ "</wc-status>\n"+ "</entry>\n"+ "</target>\n"+ "</status>";
  final String basePath="C:\\TestProjects\\sortedProjects\\Subversion\\local2\\sep12main\\main";
  final SvnStatusHandler[] handler=new SvnStatusHandler[1];
  final File baseFile=new File(basePath);
  final SvnStatusHandler.ExternalDataCallback callback=SvnCommandLineStatusClient.createStatusCallback(new ISVNStatusHandler(){
    @Override public void handleStatus(    SVNStatus status) throws SVNException {
      System.out.println(status.getURL());
      if (new File("C:\\TestProjects\\sortedProjects\\Subversion\\local2\\sep12main\\main\\slave\\src\\com\\slave\\MacMessagesParser.java").equals(status.getFile())) {
        Assert.assertEquals("http://external/src/com/slave/MacMessagesParser.java",status.getURL().toString());
      }
      if (new File("C:\\TestProjects\\sortedProjects\\Subversion\\local2\\sep12main\\main\\slave\\src\\com\\slave\\SomeOtherClass.java").equals(status.getFile())) {
        Assert.assertEquals("http://external/src/com/slave/SomeOtherClass.java",status.getURL().toString());
      }
    }
  }
,baseFile,createStubInfo(basePath,"http://mainurl/"),handler);
  handler[0]=new SvnStatusHandler(callback,baseFile,new Convertor<File,SVNInfo>(){
    @Override public SVNInfo convert(    File o){
      try {
        if (new File("C:\\TestProjects\\sortedProjects\\Subversion\\local2\\sep12main\\main\\slave").equals(o)) {
          return createStubInfo(o.getPath(),"http://external");
        }
        return createStubInfo(o.getPath(),"http://12345");
      }
 catch (      SVNException e) {
        throw new RuntimeException(e);
      }
    }
  }
);
  SAXParser parser=SAXParserFactory.newInstance().newSAXParser();
  parser.parse(new ByteArrayInputStream(status.getBytes(CharsetToolkit.UTF8_CHARSET)),handler[0]);
  final MultiMap<String,PortableStatus> changes=handler[0].getCurrentListChanges();
}
