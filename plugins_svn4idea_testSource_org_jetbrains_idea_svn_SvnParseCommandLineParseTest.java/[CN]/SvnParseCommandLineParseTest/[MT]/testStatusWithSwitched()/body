{
  final String s="<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<status>\n" + "<target\n"+ "   path=\".\">\n"+ "<entry\n"+ "   path=\"root\\source\\s1.txt\">\n"+ "<wc-status\n"+ "   props=\"none\"\n"+ "   switched=\"true\"\n"+ "   item=\"normal\"\n"+ "   revision=\"5\">\n"+ "<commit\n"+ "   revision=\"4\">\n"+ "<author>Irina.Chernushina</author>\n"+ "<date>2013-02-18T13:14:24.391537Z</date>\n"+ "</commit>\n"+ "</wc-status>\n"+ "</entry>\n"+ "<entry\n"+ "   path=\"root\\target\">\n"+ "<wc-status\n"+ "   props=\"none\"\n"+ "   switched=\"true\"\n"+ "   item=\"normal\"\n"+ "   revision=\"5\">\n"+ "<commit\n"+ "   revision=\"4\">\n"+ "<author>Irina.Chernushina</author>\n"+ "<date>2013-02-18T13:14:24.391537Z</date>\n"+ "</commit>\n"+ "</wc-status>\n"+ "</entry>\n"+ "</target>\n"+ "</status>";
  final SvnStatusHandler[] handlerArr=new SvnStatusHandler[1];
  final boolean isWindows=SystemInfo.isWindows;
  final String basePath=isWindows ? "C:/base/" : "/base33729/";
  final Set<PortableStatus> statuses=new HashSet<PortableStatus>();
  final SvnStatusHandler handler=new SvnStatusHandler(new SvnStatusHandler.ExternalDataCallback(){
    @Override public void switchPath(){
      statuses.add(handlerArr[0].getPending());
      handlerArr[0].getPending().getKind();
    }
    @Override public void switchChangeList(    String newList){
    }
  }
,new File(basePath),new Convertor<File,SVNInfo>(){
    @Override public SVNInfo convert(    File o){
      try {
        o.getCanonicalFile();
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
      if (isWindows) {
        final int idx=o.getPath().indexOf(":");
        Assert.assertTrue(idx > 0);
        final int secondIdx=o.getPath().indexOf(":",idx + 1);
        Assert.assertTrue(o.getPath(),secondIdx == -1);
      }
 else {
        if (o.getPath().contains(LINUX_ROOT)) {
          Assert.assertFalse(o.getPath().contains(basePath));
        }
      }
      try {
        return createStubInfo(basePath + "1","http://a.b.c");
      }
 catch (      SVNException e) {
        throw new RuntimeException(e);
      }
    }
  }
);
  handlerArr[0]=handler;
  final String osChecked=changePathsIfNix(s);
  SAXParser parser=SAXParserFactory.newInstance().newSAXParser();
  parser.parse(new ByteArrayInputStream(osChecked.getBytes(CharsetToolkit.UTF8_CHARSET)),handler);
  final String[] expected={"root\\source\\s1.txt","root\\target"};
  for (int i=0; i < expected.length; i++) {
    expected[i]=FileUtil.toSystemDependentName(expected[i]);
  }
  int cntMatched=0;
  for (  PortableStatus status : statuses) {
    Assert.assertTrue(status.isSwitched());
    final String path=FileUtil.toSystemDependentName(status.getPath());
    for (    String s1 : expected) {
      if (s1.equals(path)) {
        ++cntMatched;
        break;
      }
    }
  }
  Assert.assertEquals(2,cntMatched);
}
