{
  ProgressIndicator progress=ProgressManager.getInstance().getProgressIndicator();
  GraphicsEnvironment graphicsEnvironment=GraphicsEnvironment.getLocalGraphicsEnvironment();
  String[] fontNames=graphicsEnvironment.getAvailableFontFamilyNames();
  for (  final String fontName : fontNames) {
    if (fontName.endsWith(".bold") || fontName.endsWith(".italic")) {
      continue;
    }
    try {
      Font plainFont=new Font(fontName,Font.PLAIN,12);
      if (plainFont.canDisplay('W')) {
        Font boldFont=plainFont.deriveFont(Font.BOLD);
        if (progress != null) {
          progress.setText(ApplicationBundle.message("progress.analysing.font",fontName));
        }
        FontMetrics plainMetrics=getFontMetrics(plainFont);
        FontMetrics boldMetrics=getFontMetrics(boldFont);
        myFontNamesVector.add(fontName);
        int plainL=plainMetrics.charWidth('l');
        int boldL=boldMetrics.charWidth('l');
        int plainW=plainMetrics.charWidth('W');
        int boldW=boldMetrics.charWidth('W');
        int plainSpace=plainMetrics.charWidth(' ');
        int boldSpace=boldMetrics.charWidth(' ');
        boolean isMonospaced=plainL == plainW && plainL == boldL && plainW == boldW && plainSpace == boldSpace;
        myFontNameToIsMonospaced.put(fontName,isMonospaced);
      }
    }
 catch (    Throwable e) {
    }
  }
}
