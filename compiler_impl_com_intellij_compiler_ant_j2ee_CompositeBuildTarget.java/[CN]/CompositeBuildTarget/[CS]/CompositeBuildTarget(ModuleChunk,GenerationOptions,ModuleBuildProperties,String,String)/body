{
  final File moduleBaseDir=chunk.getBaseDir();
  final Module module=moduleBuildProperties.getModule();
  final String moduleName=module.getName();
  final Target buildTarget=new Target(name,getDepends(module),description,null);
  if (moduleBuildProperties.isExplodedEnabled()) {
    final String explodedPath=moduleBuildProperties.getExplodedPath();
    String location=GenerationUtils.toRelativePath(VirtualFileManager.extractPath(explodedPath),moduleBaseDir,BuildProperties.getModuleChunkBasedirProperty(chunk),genOptions,!module.isSavePathsRelative());
    add(new Property(getExplodedBuildPath(moduleName),location));
    final AntCall antCall=new AntCall(getExplodedBuildTarget(moduleName));
    buildTarget.add(antCall);
    antCall.add(new Param(getExplodedPathProperty(),BuildProperties.propertyRef(getExplodedBuildPath(moduleName))));
  }
  final String jarPath=getJarPath(moduleBuildProperties);
  if (jarPath != null) {
    String location=GenerationUtils.toRelativePath(VirtualFileManager.extractPath(jarPath),moduleBaseDir,BuildProperties.getModuleChunkBasedirProperty(chunk),genOptions,!module.isSavePathsRelative());
    add(new Property(BuildProperties.getJarPathProperty(moduleName),location));
    final AntCall antCall=new AntCall(getJarBuildTarget(moduleName));
    buildTarget.add(antCall);
    antCall.add(new Param(getJarPathProperty(),BuildProperties.propertyRef(BuildProperties.getJarPathProperty(moduleName))));
  }
  add(buildTarget);
}
