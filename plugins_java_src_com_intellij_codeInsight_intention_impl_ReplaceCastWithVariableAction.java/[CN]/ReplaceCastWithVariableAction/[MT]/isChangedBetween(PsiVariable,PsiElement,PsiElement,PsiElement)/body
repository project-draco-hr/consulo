{
  if (variable.hasModifierProperty(PsiModifier.FINAL)) {
    return false;
  }
  final Ref<Boolean> result=new Ref<Boolean>();
  scope.accept(new JavaRecursiveElementWalkingVisitor(){
    private boolean inScope=false;
    @Override public void visitElement(    PsiElement element){
      if (element == start) {
        inScope=true;
      }
      if (element == end) {
        inScope=false;
        stopWalking();
      }
      super.visitElement(element);
    }
    @Override public void visitAssignmentExpression(    PsiAssignmentExpression expression){
      if (inScope && expression.getLExpression() instanceof PsiReferenceExpression) {
        final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)expression.getLExpression();
        if (variable.equals(referenceExpression.resolve())) {
          result.set(true);
          stopWalking();
        }
      }
      super.visitAssignmentExpression(expression);
    }
  }
);
  return result.get() == Boolean.TRUE;
}
