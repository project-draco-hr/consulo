{
  super(new BorderLayout());
  setFocusable(false);
  myClass=clazz;
  myDataIsDirty=false;
  myProject=project;
  myCapableOfExcludingChanges=capableOfExcludingChanges;
  myToSelect=toSelect;
  ChangeNodeDecorator decorator=ChangesBrowser.MyUseCase.LOCAL_CHANGES.equals(useCase) ? RemoteRevisionsCache.getInstance(myProject).getChangesNodeDecorator() : null;
  myViewer=new ChangesTreeList<T>(myProject,changes,capableOfExcludingChanges,highlightProblems,inclusionListener,decorator){
    protected DefaultTreeModel buildTreeModel(    final List<T> changes,    ChangeNodeDecorator changeNodeDecorator){
      return ChangesBrowserBase.this.buildTreeModel(changes,changeNodeDecorator,isShowFlatten());
    }
    protected List<T> getSelectedObjects(    final ChangesBrowserNode<T> node){
      return ChangesBrowserBase.this.getSelectedObjects(node);
    }
    @Nullable protected T getLeadSelectedObject(    final ChangesBrowserNode node){
      return ChangesBrowserBase.this.getLeadSelectedObject(node);
    }
    @Override public void setScrollPaneBorder(    Border border){
      myViewerScrollPane.setBorder(border);
    }
  }
;
  myViewerScrollPane=ScrollPaneFactory.createScrollPane(myViewer);
  myHeaderPanel=new JPanel(new BorderLayout());
}
