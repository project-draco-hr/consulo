{
  for (  Module module : context.getCompileScope().getAffectedModules()) {
    final AndroidFacet facet=AndroidFacet.getInstance(module);
    if (facet == null) {
      continue;
    }
    final Pair<String,VirtualFile> manifestMergerProp=AndroidRootUtil.getProjectPropertyValue(module,AndroidCommonUtils.ANDROID_MANIFEST_MERGER_PROPERTY);
    if (manifestMergerProp != null && Boolean.parseBoolean(manifestMergerProp.getFirst())) {
      context.addMessage(CompilerMessageCategory.WARNING,"[" + module.getName() + "] "+ AndroidBundle.message("android.manifest.merger.not.supported.error"),manifestMergerProp.getSecond().getUrl(),-1,-1);
    }
    if (!facet.getConfiguration().LIBRARY_PROJECT) {
      for (      OrderEntry entry : ModuleRootManager.getInstance(module).getOrderEntries()) {
        if (entry instanceof ModuleOrderEntry) {
          final ModuleOrderEntry moduleOrderEntry=(ModuleOrderEntry)entry;
          if (moduleOrderEntry.getScope() == DependencyScope.COMPILE) {
            final Module depModule=moduleOrderEntry.getModule();
            if (depModule != null) {
              final AndroidFacet depFacet=AndroidFacet.getInstance(depModule);
              if (depFacet != null && !depFacet.getConfiguration().LIBRARY_PROJECT) {
                String message="Suspicious module dependency " + module.getName() + " -> "+ depModule.getName()+ ": Android application module depends on other application module. Possibly, you should ";
                if (AndroidMavenUtil.isMavenizedModule(depModule)) {
                  message+="change packaging type of module " + depModule.getName() + " to 'apklib' in pom.xml file or ";
                }
                message+="change dependency scope to 'Provided'.";
                context.addMessage(CompilerMessageCategory.WARNING,message,null,-1,-1);
              }
            }
          }
        }
      }
    }
  }
}
