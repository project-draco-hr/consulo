{
  final ByteArrayOutputStream baos=new ByteArrayOutputStream();
  final StringBuilder remoteTitleBuilder=new StringBuilder();
  final Ref<Boolean> success=new Ref<Boolean>();
  ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
    public void run(){
      try {
        final ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
        if (indicator != null) {
          indicator.setIndeterminate(true);
        }
        SVNURL svnurl=getURLInBranch(baseUrl,revision);
        if (svnurl == null)         return;
        remoteTitleBuilder.append(svnurl.toString());
        SVNWCClient client=SvnVcs.getInstance(myProject).createWCClient();
        client.doGetFileContents(svnurl,SVNRevision.UNDEFINED,SVNRevision.HEAD,true,baos);
        success.set(true);
      }
 catch (      SVNException ex) {
        reportException(ex,baseUrl);
      }
    }
  }
,SvnBundle.message("compare.with.branch.progress.loading.content"),true,myProject);
  if (success.isNull()) {
    return;
  }
  ByteBuffer contents=ByteBuffer.wrap(baos.toByteArray());
  SimpleDiffRequest req=new SimpleDiffRequest(myProject,SvnBundle.message("compare.with.branch.diff.title"));
  req.setContents(new SimpleContent(myVirtualFile.getCharset().decode(contents).toString()),new FileContent(myProject,myVirtualFile));
  req.setContentTitles(remoteTitleBuilder.toString(),myVirtualFile.getPresentableUrl());
  DiffManager.getInstance().getDiffTool().show(req);
}
