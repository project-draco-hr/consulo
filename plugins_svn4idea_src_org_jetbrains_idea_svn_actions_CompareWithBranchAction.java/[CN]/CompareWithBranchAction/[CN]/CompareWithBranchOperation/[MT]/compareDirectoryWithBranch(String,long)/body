{
  final List<Change> changes=new ArrayList<Change>();
  ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
    public void run(){
      try {
        final SvnVcs vcs=SvnVcs.getInstance(myProject);
        final SVNURL url=getURLInBranch(vcs,baseUrl);
        if (url == null)         return;
        titleBuilder.append(SvnBundle.message("repository.browser.compare.title",url.toString(),FileUtil.toSystemDependentName(myVirtualFile.getPresentableUrl())));
        SVNWCAccess wcAccess=vcs.createWCAccess();
        try {
          SVNAdminAreaInfo info=wcAccess.openAnchor(new File(myVirtualFile.getPath()),false,SVNWCAccess.INFINITE_DEPTH);
          File anchorPath=info.getAnchor().getRoot();
          String target="".equals(info.getTargetName()) ? null : info.getTargetName();
          SVNEntry anchorEntry=info.getAnchor().getEntry("",false);
          if (anchorEntry == null) {
            SVNErrorMessage err=SVNErrorMessage.create(SVNErrorCode.ENTRY_NOT_FOUND,"''{0}'' is not under version control",anchorPath);
            SVNErrorManager.error(err,SVNLogType.WC);
          }
 else           if (anchorEntry.getURL() == null) {
            SVNErrorMessage err=SVNErrorMessage.create(SVNErrorCode.ENTRY_MISSING_URL,"''{0}'' has no URL",anchorPath);
            SVNErrorManager.error(err,SVNLogType.WC);
          }
          SVNURL anchorURL=anchorEntry.getSVNURL();
          SVNRepository repository=vcs.createRepository(anchorURL.toString());
          SVNReporter reporter=new SVNReporter(info,info.getAnchor().getFile(info.getTargetName()),false,true,SVNDepth.INFINITY,false,false,SVNDebugLog.getDefaultLog());
          long rev=repository.getLatestRevision();
          SvnDiffEditor diffEditor=new SvnDiffEditor((target == null) ? myVirtualFile : myVirtualFile.getParent(),vcs.createRepository((target == null) ? url.toString() : url.removePathTail().toString()),rev,true);
          repository.diff(url,rev,rev,target,true,true,false,reporter,SVNCancellableEditor.newInstance(diffEditor,new SvnProgressCanceller(),null));
          changes.addAll(diffEditor.getChangesMap().values());
        }
  finally {
          wcAccess.close();
        }
      }
 catch (      SVNCancelException ex) {
        changes.clear();
      }
catch (      SVNException ex) {
        reportException(ex,baseUrl);
      }
    }
  }
,SvnBundle.message("progress.computing.difference"),true,myProject);
  if (!changes.isEmpty()) {
    AbstractVcsHelper.getInstance(myProject).showWhatDiffersBrowser(null,changes,titleBuilder.toString());
  }
}
