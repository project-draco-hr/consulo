{
  final List<Change> changes=new ArrayList<Change>();
  ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
    public void run(){
      try {
        final SvnVcs vcs=SvnVcs.getInstance(myProject);
        final SVNURL url=getURLInBranch(vcs,baseUrl);
        if (url == null)         return;
        titleBuilder.append(SvnBundle.message("repository.browser.compare.title",url.toString(),FileUtil.toSystemDependentName(myVirtualFile.getPresentableUrl())));
        final File ioFile=new File(myVirtualFile.getPath());
        if (SvnUtil.is17CopyPart(ioFile)) {
          report17DirDiff(vcs,url);
        }
 else {
          report16DirDiff(vcs,url);
        }
      }
 catch (      SVNCancelException ex) {
        changes.clear();
      }
catch (      SVNException ex) {
        reportException(ex,baseUrl);
      }
    }
    private void report17DirDiff(    SvnVcs vcs,    SVNURL url) throws SVNException {
      final File ioFile=new File(myVirtualFile.getPath());
      final SVNWCClient wcClient=vcs.createWCClient();
      final SVNInfo info1=wcClient.doInfo(ioFile,SVNRevision.HEAD);
      if (info1 == null) {
        SVNErrorMessage err=SVNErrorMessage.create(SVNErrorCode.ENTRY_NOT_FOUND,"''{0}'' is not under version control",myVirtualFile.getPath());
        SVNErrorManager.error(err,SVNLogType.WC);
      }
 else       if (info1.getURL() == null) {
        SVNErrorMessage err=SVNErrorMessage.create(SVNErrorCode.ENTRY_MISSING_URL,"''{0}'' has no URL",myVirtualFile.getPath());
        SVNErrorManager.error(err,SVNLogType.WC);
      }
      final SVNReporter17 reporter17=new SVNReporter17(ioFile,new SVNWCContext(SvnConfiguration.getInstance(myProject).getOptions(myProject),new ISVNEventHandler(){
        @Override public void handleEvent(        SVNEvent event,        double progress) throws SVNException {
        }
        @Override public void checkCancelled() throws SVNCancelException {
        }
      }
),false,true,SVNDepth.INFINITY,false,false,true,false,SVNDebugLog.getDefaultLog());
      SVNRepository repository=null;
      SVNRepository repository2=null;
      try {
        repository=vcs.createRepository(info1.getURL());
        long rev=repository.getLatestRevision();
        repository2=vcs.createRepository(url.toString());
        SvnDiffEditor diffEditor=new SvnDiffEditor(myVirtualFile,repository2,rev,true);
        repository.diff(url,rev,rev,null,true,SVNDepth.INFINITY,false,reporter17,SVNCancellableEditor.newInstance(diffEditor,new SvnProgressCanceller(),null));
        changes.addAll(diffEditor.getChangesMap().values());
      }
  finally {
        if (repository != null) {
          repository.closeSession();
        }
        if (repository2 != null) {
          repository2.closeSession();
        }
      }
    }
    private void report16DirDiff(    SvnVcs vcs,    SVNURL url) throws SVNException {
      SVNWCAccess wcAccess=vcs.createWCAccess();
      SVNRepository repository=null;
      SVNRepository repository2=null;
      try {
        SVNAdminAreaInfo info=wcAccess.openAnchor(new File(myVirtualFile.getPath()),false,SVNWCAccess.INFINITE_DEPTH);
        File anchorPath=info.getAnchor().getRoot();
        String target="".equals(info.getTargetName()) ? null : info.getTargetName();
        SVNEntry anchorEntry=info.getAnchor().getEntry("",false);
        if (anchorEntry == null) {
          SVNErrorMessage err=SVNErrorMessage.create(SVNErrorCode.ENTRY_NOT_FOUND,"''{0}'' is not under version control",anchorPath);
          SVNErrorManager.error(err,SVNLogType.WC);
        }
 else         if (anchorEntry.getURL() == null) {
          SVNErrorMessage err=SVNErrorMessage.create(SVNErrorCode.ENTRY_MISSING_URL,"''{0}'' has no URL",anchorPath);
          SVNErrorManager.error(err,SVNLogType.WC);
        }
        SVNURL anchorURL=anchorEntry.getSVNURL();
        SVNReporter reporter=new SVNReporter(info,info.getAnchor().getFile(info.getTargetName()),false,true,SVNDepth.INFINITY,false,false,true,SVNDebugLog.getDefaultLog());
        repository=vcs.createRepository(anchorURL.toString());
        long rev=repository.getLatestRevision();
        repository2=vcs.createRepository((target == null) ? url.toString() : url.removePathTail().toString());
        SvnDiffEditor diffEditor=new SvnDiffEditor((target == null) ? myVirtualFile : myVirtualFile.getParent(),repository2,rev,true);
        repository.diff(url,rev,rev,target,true,true,false,reporter,SVNCancellableEditor.newInstance(diffEditor,new SvnProgressCanceller(),null));
        changes.addAll(diffEditor.getChangesMap().values());
      }
  finally {
        wcAccess.close();
        if (repository != null) {
          repository.closeSession();
        }
        if (repository2 != null) {
          repository2.closeSession();
        }
      }
    }
  }
,SvnBundle.message("progress.computing.difference"),true,myProject);
  if (!changes.isEmpty()) {
    AbstractVcsHelper.getInstance(myProject).showWhatDiffersBrowser(null,changes,titleBuilder.toString());
  }
}
