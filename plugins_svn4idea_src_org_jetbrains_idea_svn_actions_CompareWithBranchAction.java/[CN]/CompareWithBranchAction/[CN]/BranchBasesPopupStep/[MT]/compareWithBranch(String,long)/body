{
  final ByteArrayOutputStream baos=new ByteArrayOutputStream();
  final StringBuilder remoteTitleBuilder=new StringBuilder();
  final Ref<Boolean> success=new Ref<Boolean>();
  ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
    public void run(){
      try {
        final ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
        if (indicator != null) {
          indicator.setIndeterminate(true);
        }
        SVNRevision infoRevision=SVNRevision.WORKING;
        if (revision != -1) {
          infoRevision=SVNRevision.create(revision);
        }
        SVNWCClient client=SvnVcs.getInstance(myProject).createWCClient();
        SVNInfo info;
        try {
          info=client.doInfo(VfsUtil.virtualToIoFile(myVirtualFile),infoRevision);
        }
 catch (        SVNException ex) {
          if (ex.getErrorMessage().getErrorCode().equals(SVNErrorCode.RA_ILLEGAL_URL) || ex.getErrorMessage().getErrorCode().equals(SVNErrorCode.CLIENT_UNRELATED_RESOURCES)) {
            reportNotFound(baseUrl);
          }
 else {
            LOG.error(ex);
          }
          return;
        }
        if (info == null) {
          reportNotFound(baseUrl);
          return;
        }
        String fileUrl=myConfiguration.getRelativeUrl(info.getURL().toString());
        final SVNURL svnurl=SVNURL.parseURIEncoded(baseUrl).appendPath(fileUrl,true);
        remoteTitleBuilder.append(svnurl.toString());
        client.doGetFileContents(svnurl,SVNRevision.UNDEFINED,SVNRevision.HEAD,true,baos);
      }
 catch (      SVNException e) {
        LOG.error(e);
      }
      success.set(true);
    }
  }
,SvnBundle.message("compare.with.branch.progress.loading.content"),true,myProject);
  if (success.isNull()) {
    return;
  }
  ByteBuffer contents=ByteBuffer.wrap(baos.toByteArray());
  SimpleDiffRequest req=new SimpleDiffRequest(myProject,SvnBundle.message("compare.with.branch.diff.title"));
  req.setContents(new SimpleContent(myVirtualFile.getCharset().decode(contents).toString()),new FileContent(myProject,myVirtualFile));
  req.setContentTitles(remoteTitleBuilder.toString(),myVirtualFile.getPresentableUrl());
  DiffManager.getInstance().getDiffTool().show(req);
}
