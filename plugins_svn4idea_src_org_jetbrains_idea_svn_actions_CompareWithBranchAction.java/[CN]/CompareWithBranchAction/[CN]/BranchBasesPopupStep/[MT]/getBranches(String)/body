{
  final ArrayList<SvnBranchItem> result=new ArrayList<SvnBranchItem>();
  final Ref<SVNException> ex=new Ref<SVNException>();
  boolean rc=ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
    public void run(){
      final ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
      if (indicator != null) {
        indicator.setIndeterminate(true);
      }
      final SVNLogClient logClient;
      try {
        logClient=SvnVcs.getInstance(myProject).createLogClient();
        logClient.doList(SVNURL.parseURIEncoded(url),SVNRevision.UNDEFINED,SVNRevision.HEAD,false,new ISVNDirEntryHandler(){
          public void handleDirEntry(          final SVNDirEntry dirEntry) throws SVNException {
            ProgressManager.getInstance().checkCanceled();
            final String url=dirEntry.getURL().toString();
            result.add(new SvnBranchItem(url,dirEntry.getDate(),dirEntry.getRevision()));
          }
        }
);
        Collections.sort(result);
      }
 catch (      SVNException e) {
        ex.set(e);
      }
    }
  }
,SvnBundle.message("compare.with.branch.progress.loading.branches"),true,myProject);
  if (!rc) {
    return Collections.emptyList();
  }
  if (!ex.isNull()) {
    throw ex.get();
  }
  return result;
}
