{
  final DataContext dataContext=event.getDataContext();
  final DebuggerContextImpl context=DebuggerAction.getDebuggerContext(dataContext);
  if (context == null) {
    return;
  }
  final Editor editor=event.getData(DataKeys.EDITOR);
  TextWithImports editorText=DebuggerUtilsEx.getEditorText(editor);
  if (editorText == null) {
    final DebuggerTreeNodeImpl selectedNode=DebuggerAction.getSelectedNode(dataContext);
    final String actionName=event.getPresentation().getText();
    if (selectedNode != null && selectedNode.getDescriptor() instanceof ValueDescriptorImpl) {
      context.getDebugProcess().getManagerThread().invokeLater(new DebuggerContextCommandImpl(context){
        public void threadAction(){
          try {
            final TextWithImports evaluationText=DebuggerTreeNodeExpression.createEvaluationText(selectedNode,context);
            DebuggerInvocationUtil.invokeLater(project,new Runnable(){
              public void run(){
                showEvaluationDialog(project,evaluationText);
              }
            }
);
          }
 catch (          final EvaluateException e1) {
            DebuggerInvocationUtil.invokeLater(project,new Runnable(){
              public void run(){
                Messages.showErrorDialog(project,e1.getMessage(),actionName);
              }
            }
);
          }
        }
        protected void commandCancelled(){
          DebuggerInvocationUtil.invokeLater(project,new Runnable(){
            public void run(){
              if (selectedNode.getDescriptor() instanceof WatchItemDescriptor) {
                try {
                  TextWithImports editorText=DebuggerTreeNodeExpression.createEvaluationText(selectedNode,context);
                  showEvaluationDialog(project,editorText);
                }
 catch (                EvaluateException e1) {
                  Messages.showErrorDialog(project,e1.getMessage(),actionName);
                }
              }
            }
          }
);
        }
      }
);
      return;
    }
  }
  showEvaluationDialog(project,editorText);
}
