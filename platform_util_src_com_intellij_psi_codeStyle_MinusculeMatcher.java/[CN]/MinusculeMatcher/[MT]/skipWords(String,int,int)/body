{
  while (' ' == myPattern[patternIndex]) {
    patternIndex++;
    if (patternIndex == myPattern.length) {
      return null;
    }
  }
  if (nameIndex == 0 || NameUtil.isWordStart(name,nameIndex)) {
    FList<TextRange> ranges=matchName(name,patternIndex,nameIndex);
    if (ranges != null) {
      return ranges;
    }
  }
  boolean separatorInPattern=NameUtil.isWordSeparator(myPattern[patternIndex]);
  int fromIndex=nameIndex;
  while (fromIndex < name.length()) {
    int next=separatorInPattern ? name.indexOf(myPattern[patternIndex],fromIndex) : NameUtil.nextWord(name,fromIndex);
    if (next < 0) {
      break;
    }
    FList<TextRange> ranges=matchName(name,patternIndex,next);
    if (ranges != null) {
      return ranges;
    }
    fromIndex=next;
    if (separatorInPattern) {
      fromIndex++;
    }
  }
  return null;
}
