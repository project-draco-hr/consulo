{
  if (nameIndex < 0) {
    return null;
  }
  if (!isWildcard(patternIndex)) {
    if (patternIndex == myPattern.length) {
      return FList.emptyList();
    }
    return matchFragment(name,patternIndex,nameIndex);
  }
  do {
    patternIndex++;
  }
 while (isWildcard(patternIndex));
  boolean space=isPatternChar(patternIndex - 1,' ');
  if (patternIndex == myPattern.length) {
    if (space && nameIndex != name.length() && (patternIndex < 2 || !NameUtil.isWordStart(myPattern[patternIndex - 2]))) {
      return null;
    }
    return FList.emptyList();
  }
{
    FList<TextRange> ranges=matchFragment(name,patternIndex,nameIndex);
    if (ranges != null) {
      return ranges;
    }
  }
  char p=myPattern[patternIndex];
  while (true) {
    nameIndex=space ? indexOfWordStart(name,p,nameIndex) : StringUtil.indexOfIgnoreCase(name,p,nameIndex + 1);
    if (nameIndex < 0) {
      return null;
    }
    if (!Character.isUpperCase(p) || NameUtil.isWordStart(name,nameIndex)) {
      FList<TextRange> ranges=matchFragment(name,patternIndex,nameIndex);
      if (ranges != null) {
        return ranges;
      }
    }
  }
}
