{
  if (!isFirstCharMatching(name,nameIndex,myPattern[patternIndex])) {
    return null;
  }
  int minFragment=isPatternChar(patternIndex - 1,'*') && Character.isLetterOrDigit(name.charAt(nameIndex)) && !NameUtil.isWordStart(name,nameIndex) ? 2 : 1;
  int i=1;
  while (nameIndex + i < name.length() && patternIndex + i < myPattern.length && StringUtil.charsEqual(myPattern[patternIndex + i],name.charAt(nameIndex + i),myOptions != ALL)) {
    if (Character.isUpperCase(myPattern[patternIndex + i])) {
      if (i < minFragment) {
        return null;
      }
      if (myPattern[patternIndex + i] != name.charAt(nameIndex + i)) {
        int nextWordStart=indexOfWordStart(name,myPattern[patternIndex + i],nameIndex + i);
        if (nextWordStart >= 0) {
          FList<TextRange> ranges=matchWildcards(name,patternIndex + i,nextWordStart);
          if (ranges != null) {
            return prependRange(ranges,nameIndex,i);
          }
        }
      }
    }
    i++;
  }
  if (patternIndex + i >= myPattern.length) {
    return i >= minFragment ? FList.<TextRange>emptyList().prepend(TextRange.from(nameIndex,i)) : null;
  }
  while (i >= minFragment) {
    int nextWordStart=isWildcard(patternIndex + i) ? nameIndex + i : indexOfWordStart(name,myPattern[patternIndex + i],nameIndex + i);
    if (nextWordStart >= 0) {
      FList<TextRange> ranges=matchWildcards(name,patternIndex + i,nextWordStart);
      if (ranges != null) {
        return prependRange(ranges,nameIndex,i);
      }
    }
    i--;
  }
  return null;
}
