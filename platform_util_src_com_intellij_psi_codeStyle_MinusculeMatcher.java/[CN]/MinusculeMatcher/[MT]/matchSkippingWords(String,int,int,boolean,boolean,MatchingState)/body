{
  boolean star=isPatternChar(patternIndex - 1,'*');
  final char p=myPattern[patternIndex];
  while (true) {
    int nextOccurrence=star ? indexOfIgnoreCase(name,nameIndex + 1,p,patternIndex,isAsciiName) : indexOfWordStart(name,patternIndex,nameIndex,isAsciiName);
    if (nextOccurrence < 0) {
      return null;
    }
    if (!allowSpecialChars && !myHasHumps && StringUtil.containsAnyChar(name," ()",nameIndex,nextOccurrence)) {
      return null;
    }
    if (!allowSpecialChars && myHasDots && StringUtil.contains(name,nameIndex,nextOccurrence,'.')) {
      return null;
    }
    if (!isUpperCase[patternIndex] || NameUtil.isWordStart(name,nextOccurrence)) {
      FList<TextRange> ranges=matchFragment(name,patternIndex,nextOccurrence,isAsciiName,matchingState);
      if (ranges != null) {
        return ranges;
      }
    }
    nameIndex=nextOccurrence;
  }
}
