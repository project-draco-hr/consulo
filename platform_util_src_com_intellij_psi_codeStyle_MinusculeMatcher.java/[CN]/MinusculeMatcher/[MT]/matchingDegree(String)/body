{
  Iterable<TextRange> iterable=matchingFragments(name);
  if (iterable == null)   return Integer.MIN_VALUE;
  int fragmentCount=0;
  int matchingCase=0;
  CharArrayCharSequence seq=new CharArrayCharSequence(myPattern);
  int p=-1;
  TextRange first=null;
  for (  TextRange range : iterable) {
    if (first == null) {
      first=range;
    }
    for (int i=range.getStartOffset(); i < range.getEndOffset(); i++) {
      char c=name.charAt(i);
      p=StringUtil.indexOf(seq,c,p + 1,myPattern.length,false);
      if (p < 0) {
        break;
      }
      if (Character.isUpperCase(myPattern[p]) || i == range.getStartOffset()) {
        matchingCase+=c == myPattern[p] ? 1 : 0;
      }
    }
    fragmentCount++;
  }
  if (first == null) {
    return 0;
  }
  int commonStart=0;
  while (commonStart < name.length() && commonStart < myPattern.length && name.charAt(commonStart) == myPattern[commonStart]) {
    commonStart++;
  }
  int startIndex=first.getStartOffset();
  boolean prefixMatching=isStartMatch(name,startIndex);
  boolean middleWordStart=!prefixMatching && NameUtil.isWordStart(name,first.getStartOffset());
  return -fragmentCount + matchingCase * 10 + commonStart - startIndex + (prefixMatching ? 2 : middleWordStart ? 1 : 0) * 100;
}
