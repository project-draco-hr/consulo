def readgitpatch(lr):
    'extract git-style metadata about patches from <patchname>'
    gp = None
    gitpatches = []
    dopatch = 0
    lineno = 0
    for line in lr:
        lineno += 1
        line = line.rstrip(' \r\n')
        if line.startswith('diff --git'):
            m = gitre.match(line)
            if m:
                if gp:
                    gitpatches.append(gp)
                dst = m.group(2)
                gp = patchmeta(dst)
                gp.lineno = lineno
        elif gp:
            if line.startswith('--- '):
                if (gp.op in ('COPY', 'RENAME')):
                    dopatch |= GP_FILTER
                gitpatches.append(gp)
                gp = None
                dopatch |= GP_PATCH
                continue
            if line.startswith('rename from '):
                gp.op = 'RENAME'
                gp.oldpath = line[12:]
            elif line.startswith('rename to '):
                gp.path = line[10:]
            elif line.startswith('copy from '):
                gp.op = 'COPY'
                gp.oldpath = line[10:]
            elif line.startswith('copy to '):
                gp.path = line[8:]
            elif line.startswith('deleted file'):
                gp.op = 'DELETE'
                gp.setmode(int(line[(-6):], 8))
            elif line.startswith('new file mode '):
                gp.op = 'ADD'
                gp.setmode(int(line[(-6):], 8))
            elif line.startswith('new mode '):
                gp.setmode(int(line[(-6):], 8))
            elif line.startswith('GIT binary patch'):
                dopatch |= GP_BINARY
                gp.binary = True
    if gp:
        gitpatches.append(gp)
    if (not gitpatches):
        dopatch = GP_PATCH
    return (dopatch, gitpatches)
