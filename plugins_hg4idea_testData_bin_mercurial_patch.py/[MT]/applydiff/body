def applydiff(ui, fp, changed, strip=1, sourcefile=None, eolmode='strict'):
    "\n    Reads a patch from fp and tries to apply it.\n\n    The dict 'changed' is filled in with all of the filenames changed\n    by the patch. Returns 0 for a clean patch, -1 if any rejects were\n    found and 1 if there was any fuzz.\n\n    If 'eolmode' is 'strict', the patch content and patched file are\n    read in binary mode. Otherwise, line endings are ignored when\n    patching then normalized according to 'eolmode'.\n    "
    rejects = 0
    err = 0
    current_file = None
    gitpatches = None
    opener = util.opener(os.getcwd())

    def closefile():
        if (not current_file):
            return 0
        current_file.close()
        return len(current_file.rej)
    for (state, values) in iterhunks(ui, fp, sourcefile):
        if (state == 'hunk'):
            if (not current_file):
                continue
            current_hunk = values
            ret = current_file.apply(current_hunk)
            if (ret >= 0):
                changed.setdefault(current_file.fname, None)
                if (ret > 0):
                    err = 1
        elif (state == 'file'):
            rejects += closefile()
            (afile, bfile, first_hunk) = values
            try:
                if sourcefile:
                    current_file = patchfile(ui, sourcefile, opener, eolmode=eolmode)
                else:
                    (current_file, missing) = selectfile(afile, bfile, first_hunk, strip)
                    current_file = patchfile(ui, current_file, opener, missing, eolmode)
            except PatchError as err:
                ui.warn((str(err) + '\n'))
                (current_file, current_hunk) = (None, None)
                rejects += 1
                continue
        elif (state == 'git'):
            gitpatches = values
            cwd = os.getcwd()
            for gp in gitpatches:
                if (gp.op in ('COPY', 'RENAME')):
                    copyfile(gp.oldpath, gp.path, cwd)
                changed[gp.path] = gp
        else:
            raise util.Abort((_('unsupported parser state: %s') % state))
    rejects += closefile()
    if rejects:
        return (-1)
    return err
