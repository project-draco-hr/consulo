def extract(ui, fileobj):
    'extract patch from data read from fileobj.\n\n    patch can be a normal patch or contained in an email message.\n\n    return tuple (filename, message, user, date, node, p1, p2).\n    Any item in the returned tuple can be None. If filename is None,\n    fileobj did not contain a patch. Caller must unlink filename when done.'
    diffre = re.compile('^(?:Index:[ \\t]|diff[ \\t]|RCS file: |retrieving revision [0-9]+(\\.[0-9]+)*$|---[ \\t].*?^\\+\\+\\+[ \\t]|\\*\\*\\*[ \\t].*?^---[ \\t])', (re.MULTILINE | re.DOTALL))
    (fd, tmpname) = tempfile.mkstemp(prefix='hg-patch-')
    tmpfp = os.fdopen(fd, 'w')
    try:
        msg = email.Parser.Parser().parse(fileobj)
        subject = msg['Subject']
        user = msg['From']
        if ((not subject) and (not user)):
            subject = ('\n'.join((': '.join(h) for h in msg.items())) + '\n')
        gitsendmail = ('git-send-email' in msg.get('X-Mailer', ''))
        date = None
        nodeid = None
        branch = None
        parents = []
        if subject:
            if subject.startswith('[PATCH'):
                pend = subject.find(']')
                if (pend >= 0):
                    subject = subject[(pend + 1):].lstrip()
            subject = subject.replace('\n\t', ' ')
            ui.debug(('Subject: %s\n' % subject))
        if user:
            ui.debug(('From: %s\n' % user))
        diffs_seen = 0
        ok_types = ('text/plain', 'text/x-diff', 'text/x-patch')
        message = ''
        for part in msg.walk():
            content_type = part.get_content_type()
            ui.debug(('Content-Type: %s\n' % content_type))
            if (content_type not in ok_types):
                continue
            payload = part.get_payload(decode=True)
            m = diffre.search(payload)
            if m:
                hgpatch = False
                ignoretext = False
                ui.debug(('found patch at byte %d\n' % m.start(0)))
                diffs_seen += 1
                cfp = cStringIO.StringIO()
                for line in payload[:m.start(0)].splitlines():
                    if line.startswith('# HG changeset patch'):
                        ui.debug('patch generated by hg export\n')
                        hgpatch = True
                        cfp.seek(0)
                        cfp.truncate()
                        subject = None
                    elif hgpatch:
                        if line.startswith('# User '):
                            user = line[7:]
                            ui.debug(('From: %s\n' % user))
                        elif line.startswith('# Date '):
                            date = line[7:]
                        elif line.startswith('# Branch '):
                            branch = line[9:]
                        elif line.startswith('# Node ID '):
                            nodeid = line[10:]
                        elif line.startswith('# Parent '):
                            parents.append(line[10:])
                    elif ((line == '---') and gitsendmail):
                        ignoretext = True
                    if ((not line.startswith('# ')) and (not ignoretext)):
                        cfp.write(line)
                        cfp.write('\n')
                message = cfp.getvalue()
                if tmpfp:
                    tmpfp.write(payload)
                    if (not payload.endswith('\n')):
                        tmpfp.write('\n')
            elif ((not diffs_seen) and message and (content_type == 'text/plain')):
                message += ('\n' + payload)
    except:
        tmpfp.close()
        os.unlink(tmpname)
        raise
    if (subject and (not message.startswith(subject))):
        message = ('%s\n%s' % (subject, message))
    tmpfp.close()
    if (not diffs_seen):
        os.unlink(tmpname)
        return (None, message, user, date, branch, None, None, None)
    p1 = ((parents and parents.pop(0)) or None)
    p2 = ((parents and parents.pop(0)) or None)
    return (tmpname, message, user, date, branch, nodeid, p1, p2)
