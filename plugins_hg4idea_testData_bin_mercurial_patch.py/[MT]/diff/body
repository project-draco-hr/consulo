def diff(repo, node1=None, node2=None, match=None, changes=None, opts=None, losedatafn=None):
    "yields diff of changes to files between two nodes, or node and\n    working directory.\n\n    if node1 is None, use first dirstate parent instead.\n    if node2 is None, compare node1 with working directory.\n\n    losedatafn(**kwarg) is a callable run when opts.upgrade=True and\n    every time some change cannot be represented with the current\n    patch format. Return False to upgrade to git patch format, True to\n    accept the loss or raise an exception to abort the diff. It is\n    called with the name of current file being diffed as 'fn'. If set\n    to None, patches will always be upgraded to git format when\n    necessary.\n    "
    if (opts is None):
        opts = mdiff.defaultopts
    if ((not node1) and (not node2)):
        node1 = repo.dirstate.parents()[0]

    def lrugetfilectx():
        cache = {}
        order = []

        def getfilectx(f, ctx):
            fctx = ctx.filectx(f, filelog=cache.get(f))
            if (f not in cache):
                if (len(cache) > 20):
                    del cache[order.pop(0)]
                cache[f] = fctx.filelog()
            else:
                order.remove(f)
            order.append(f)
            return fctx
        return getfilectx
    getfilectx = lrugetfilectx()
    ctx1 = repo[node1]
    ctx2 = repo[node2]
    if (not changes):
        changes = repo.status(ctx1, ctx2, match=match)
    (modified, added, removed) = changes[:3]
    if ((not modified) and (not added) and (not removed)):
        return []
    revs = None
    if (not repo.ui.quiet):
        hexfunc = ((repo.ui.debugflag and hex) or short)
        revs = [hexfunc(node) for node in [node1, node2] if node]
    copy = {}
    if (opts.git or opts.upgrade):
        copy = copies.copies(repo, ctx1, ctx2, repo[nullid])[0]
    difffn = (lambda opts, losedata: trydiff(repo, revs, ctx1, ctx2, modified, added, removed, copy, getfilectx, opts, losedata))
    if (opts.upgrade and (not opts.git)):
        try:

            def losedata(fn):
                if ((not losedatafn) or (not losedatafn(fn=fn))):
                    raise GitDiffRequired()
            return list(difffn(opts.copy(git=False), losedata))
        except GitDiffRequired:
            return difffn(opts.copy(git=True), None)
    else:
        return difffn(opts, None)
