def patch(patchname, ui, strip=1, cwd=None, files=None, eolmode='strict'):
    "Apply <patchname> to the working directory.\n\n    'eolmode' specifies how end of lines should be handled. It can be:\n    - 'strict': inputs are read in binary mode, EOLs are preserved\n    - 'crlf': EOLs are ignored when patching and reset to CRLF\n    - 'lf': EOLs are ignored when patching and reset to LF\n    - None: get it from user settings, default to 'strict'\n    'eolmode' is ignored when using an external patcher program.\n\n    Returns whether patch was applied with fuzz factor.\n    "
    patcher = ui.config('ui', 'patch')
    args = []
    if (files is None):
        files = {}
    try:
        if patcher:
            return externalpatch(patcher, args, patchname, ui, strip, cwd, files)
        else:
            try:
                return internalpatch(patchname, ui, strip, cwd, files, eolmode)
            except NoHunks:
                patcher = (util.find_exe('gpatch') or util.find_exe('patch') or 'patch')
                ui.debug(('no valid hunks found; trying with %r instead\n' % patcher))
                if util.needbinarypatch():
                    args.append('--binary')
                return externalpatch(patcher, args, patchname, ui, strip, cwd, files)
    except PatchError as err:
        s = str(err)
        if s:
            raise util.Abort(s)
        else:
            raise util.Abort(_('patch failed to apply'))
