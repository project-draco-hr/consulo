def selectfile(afile_orig, bfile_orig, hunk, strip):

    def pathstrip(path, count=1):
        pathlen = len(path)
        i = 0
        if (count == 0):
            return ('', path.rstrip())
        while (count > 0):
            i = path.find('/', i)
            if (i == (-1)):
                raise PatchError((_('unable to strip away %d dirs from %s') % (count, path)))
            i += 1
            while ((i < (pathlen - 1)) and (path[i] == '/')):
                i += 1
            count -= 1
        return (path[:i].lstrip(), path[i:].rstrip())
    nulla = (afile_orig == '/dev/null')
    nullb = (bfile_orig == '/dev/null')
    (abase, afile) = pathstrip(afile_orig, strip)
    gooda = ((not nulla) and util.lexists(afile))
    (bbase, bfile) = pathstrip(bfile_orig, strip)
    if (afile == bfile):
        goodb = gooda
    else:
        goodb = ((not nullb) and os.path.exists(bfile))
    createfunc = hunk.createfile
    missing = ((not goodb) and (not gooda) and (not createfunc()))
    abasedir = afile[:(afile.rfind('/') + 1)]
    bbasedir = bfile[:(bfile.rfind('/') + 1)]
    if (missing and (abasedir == bbasedir) and afile.startswith(bfile)):
        hunk.create = True
        if createfunc():
            missing = False
        else:
            hunk.create = False
    isbackup = ((abase == bbase) and bfile.startswith(afile))
    fname = None
    if (not missing):
        if (gooda and goodb):
            fname = ((isbackup and afile) or bfile)
        elif gooda:
            fname = afile
    if (not fname):
        if (not nullb):
            fname = ((isbackup and afile) or bfile)
        elif (not nulla):
            fname = afile
        else:
            raise PatchError(_('undefined source and destination files'))
    return (fname, missing)
