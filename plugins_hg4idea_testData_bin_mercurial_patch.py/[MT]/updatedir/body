def updatedir(ui, repo, patches, similarity=0):
    'Update dirstate after patch application according to metadata'
    if (not patches):
        return
    copies = []
    removes = set()
    cfiles = patches.keys()
    cwd = repo.getcwd()
    if cwd:
        cfiles = [util.pathto(repo.root, cwd, f) for f in patches.keys()]
    for f in patches:
        gp = patches[f]
        if (not gp):
            continue
        if (gp.op == 'RENAME'):
            copies.append((gp.oldpath, gp.path))
            removes.add(gp.oldpath)
        elif (gp.op == 'COPY'):
            copies.append((gp.oldpath, gp.path))
        elif (gp.op == 'DELETE'):
            removes.add(gp.path)
    for (src, dst) in copies:
        repo.copy(src, dst)
    if ((not similarity) and removes):
        repo.remove(sorted(removes), True)
    for f in patches:
        gp = patches[f]
        if (gp and gp.mode):
            (islink, isexec) = gp.mode
            dst = repo.wjoin(gp.path)
            if ((gp.op == 'ADD') and (not os.path.exists(dst))):
                flags = (((isexec and 'x') or '') + ((islink and 'l') or ''))
                repo.wwrite(gp.path, '', flags)
            elif (gp.op != 'DELETE'):
                util.set_flags(dst, islink, isexec)
    cmdutil.addremove(repo, cfiles, similarity=similarity)
    files = patches.keys()
    files.extend([r for r in removes if (r not in files)])
    return sorted(files)
