def externalpatch(patcher, args, patchname, ui, strip, cwd, files):
    'use <patcher> to apply <patchname> to the working directory.\n    returns whether patch was applied with fuzz factor.'
    fuzz = False
    if cwd:
        args.append(('-d %s' % util.shellquote(cwd)))
    fp = util.popen(('%s %s -p%d < %s' % (patcher, ' '.join(args), strip, util.shellquote(patchname))))
    for line in fp:
        line = line.rstrip()
        ui.note((line + '\n'))
        if line.startswith('patching file '):
            pf = util.parse_patch_output(line)
            printed_file = False
            files.setdefault(pf, None)
        elif (line.find('with fuzz') >= 0):
            fuzz = True
            if (not printed_file):
                ui.warn((pf + '\n'))
                printed_file = True
            ui.warn((line + '\n'))
        elif (line.find('saving rejects to file') >= 0):
            ui.warn((line + '\n'))
        elif (line.find('FAILED') >= 0):
            if (not printed_file):
                ui.warn((pf + '\n'))
                printed_file = True
            ui.warn((line + '\n'))
    code = fp.close()
    if code:
        raise PatchError((_('patch command failed: %s') % util.explain_exit(code)[0]))
    return fuzz
