def apply(self, h):
    if (not h.complete()):
        raise PatchError((_('bad hunk #%d %s (%d %d %d %d)') % (h.number, h.desc, len(h.a), h.lena, len(h.b), h.lenb)))
    self.hunks += 1
    if self.missing:
        self.rej.append(h)
        return (-1)
    if (self.exists and h.createfile()):
        self.ui.warn((_('file %s already exists\n') % self.fname))
        self.rej.append(h)
        return (-1)
    if isinstance(h, binhunk):
        if h.rmfile():
            self.unlink(self.fname)
        else:
            self.lines[:] = h.new()
            self.offset += len(h.new())
            self.dirty = 1
        return 0
    horig = h
    if ((self.eolmode in ('crlf', 'lf')) or ((self.eolmode == 'auto') and self.eol)):
        h = h.getnormalized()
    old = h.old()
    if (h.starta == 0):
        start = 0
    else:
        start = ((h.starta + self.offset) - 1)
    orig_start = start
    if ((self.skew == 0) and (diffhelpers.testhunk(old, self.lines, start) == 0)):
        if h.rmfile():
            self.unlink(self.fname)
        else:
            self.lines[start:(start + h.lena)] = h.new()
            self.offset += (h.lenb - h.lena)
            self.dirty = 1
        return 0
    self.hashlines()
    if (h.hunk[(-1)][0] != ' '):
        search_start = len(self.lines)
    else:
        search_start = (orig_start + self.skew)
    for fuzzlen in xrange(3):
        for toponly in [True, False]:
            old = h.old(fuzzlen, toponly)
            cand = self.findlines(old[0][1:], search_start)
            for l in cand:
                if (diffhelpers.testhunk(old, self.lines, l) == 0):
                    newlines = h.new(fuzzlen, toponly)
                    self.lines[l:(l + len(old))] = newlines
                    self.offset += (len(newlines) - len(old))
                    self.skew = (l - orig_start)
                    self.dirty = 1
                    offset = ((l - orig_start) - fuzzlen)
                    if fuzzlen:
                        msg = _('Hunk #%d succeeded at %d with fuzz %d (offset %d lines).\n')
                        self.printfile(True)
                        self.ui.warn((msg % (h.number, (l + 1), fuzzlen, offset)))
                    else:
                        msg = _('Hunk #%d succeeded at %d (offset %d lines).\n')
                        self.ui.note((msg % (h.number, (l + 1), offset)))
                    return fuzzlen
    self.printfile(True)
    self.ui.warn((_('Hunk #%d FAILED at %d\n') % (h.number, orig_start)))
    self.rej.append(horig)
    return (-1)
