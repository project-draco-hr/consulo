def fuzzit(self, l, fuzz, toponly):
    fuzz = min(fuzz, (len(l) - 1))
    if fuzz:
        top = 0
        bot = 0
        hlen = len(self.hunk)
        for x in xrange((hlen - 1)):
            if (self.hunk[(x + 1)][0] == ' '):
                top += 1
            else:
                break
        if (not toponly):
            for x in xrange((hlen - 1)):
                if (self.hunk[((hlen - bot) - 1)][0] == ' '):
                    bot += 1
                else:
                    break
        context = max(top, bot, 3)
        if (bot < context):
            bot = max(0, (fuzz - (context - bot)))
        else:
            bot = min(fuzz, bot)
        if (top < context):
            top = max(0, (fuzz - (context - top)))
        else:
            top = min(fuzz, top)
        return l[top:(len(l) - bot)]
    return l
