def read_context_hunk(self, lr):
    self.desc = lr.readline()
    m = contextdesc.match(self.desc)
    if (not m):
        raise PatchError((_('bad hunk #%d') % self.number))
    (foo, self.starta, foo2, aend, foo3) = m.groups()
    self.starta = int(self.starta)
    if (aend is None):
        aend = self.starta
    self.lena = (int(aend) - self.starta)
    if self.starta:
        self.lena += 1
    for x in xrange(self.lena):
        l = lr.readline()
        if l.startswith('---'):
            lr.push(l)
            break
        s = l[2:]
        if (l.startswith('- ') or l.startswith('! ')):
            u = ('-' + s)
        elif l.startswith('  '):
            u = (' ' + s)
        else:
            raise PatchError((_('bad hunk #%d old text line %d') % (self.number, x)))
        self.a.append(u)
        self.hunk.append(u)
    l = lr.readline()
    if l.startswith('\\ '):
        s = self.a[(-1)][:(-1)]
        self.a[(-1)] = s
        self.hunk[(-1)] = s
        l = lr.readline()
    m = contextdesc.match(l)
    if (not m):
        raise PatchError((_('bad hunk #%d') % self.number))
    (foo, self.startb, foo2, bend, foo3) = m.groups()
    self.startb = int(self.startb)
    if (bend is None):
        bend = self.startb
    self.lenb = (int(bend) - self.startb)
    if self.startb:
        self.lenb += 1
    hunki = 1
    for x in xrange(self.lenb):
        l = lr.readline()
        if l.startswith('\\ '):
            s = self.b[(-1)][:(-1)]
            self.b[(-1)] = s
            self.hunk[(hunki - 1)] = s
            continue
        if (not l):
            lr.push(l)
            break
        s = l[2:]
        if (l.startswith('+ ') or l.startswith('! ')):
            u = ('+' + s)
        elif l.startswith('  '):
            u = (' ' + s)
        elif (len(self.b) == 0):
            lr.push(l)
            break
        else:
            raise PatchError((_('bad hunk #%d old text line %d') % (self.number, x)))
        self.b.append(s)
        while True:
            if (hunki >= len(self.hunk)):
                h = ''
            else:
                h = self.hunk[hunki]
            hunki += 1
            if (h == u):
                break
            elif h.startswith('-'):
                continue
            else:
                self.hunk.insert((hunki - 1), u)
                break
    if (not self.a):
        for x in self.hunk:
            if (x.startswith('-') or x.startswith(' ')):
                self.a.append(x)
    if (not self.b):
        for x in self.hunk:
            if (x.startswith('+') or x.startswith(' ')):
                self.b.append(x[1:])
    self.desc = ('@@ -%d,%d +%d,%d @@\n' % (self.starta, self.lena, self.startb, self.lenb))
    self.hunk[0] = self.desc
