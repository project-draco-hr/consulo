{
  if (myBeforeFile == null) {
    myBeforeFile=myPsiFileFactory.createFileFromText("old" + myAfterFile.getName(),myBeforeContent);
  }
  if (myOldItems == null) {
    final Collection<IndexPatternOccurrence> all=LightIndexPatternSearch.SEARCH.createQuery(new IndexPatternSearch.SearchParameters(myBeforeFile,TodoIndexPatternProvider.getInstance())).findAll();
    final TodoItemsCreator todoItemsCreator=new TodoItemsCreator();
    myOldItems=new ArrayList<TodoItem>();
    if (all.isEmpty()) {
      myAcceptor.addedOrEdited(newTodoItem);
      return;
    }
    for (    IndexPatternOccurrence occurrence : all) {
      myOldItems.add(todoItemsCreator.createTodo(occurrence));
    }
  }
  if (myOldTodoTexts == null) {
    final StepIntersection<LineFragment,TodoItem> intersection=new StepIntersection<LineFragment,TodoItem>(LineFragmentConvertor.getInstance(),TodoItemConvertor.getInstance(),myOldItems);
    myOldTodoTexts=new HashSet<String>();
    intersection.process(Collections.singletonList(myCurrentLineFragment),new PairConsumer<LineFragment,TodoItem>(){
      @Override public void consume(      LineFragment lineFragment,      TodoItem todoItem){
        myOldTodoTexts.add(getTodoText(todoItem,myBeforeContent));
      }
    }
);
  }
  final String text=getTodoText(newTodoItem,myAfterContent);
  if (!myOldTodoTexts.contains(text)) {
    myAcceptor.addedOrEdited(newTodoItem);
  }
 else {
    myAcceptor.inChanged(newTodoItem);
  }
}
