{
  PsiType type=myVariable.getType();
  PsiElementFactory factory=JavaPsiFacade.getInstance(myClass.getProject()).getElementFactory();
  PsiType newType=type.createArrayType();
  PsiDeclarationStatement variableDeclarationStatement;
  if (myVariable.hasInitializer()) {
    PsiExpression init=factory.createExpressionFromText("new " + newType.getCanonicalText() + " { "+ myVariable.getInitializer().getText()+ " }",myVariable);
    variableDeclarationStatement=factory.createVariableDeclarationStatement(myVariable.getName(),newType,init);
  }
 else {
    String expression="[1]";
    while (type instanceof PsiArrayType) {
      expression+="[1]";
      type=((PsiArrayType)type).getComponentType();
    }
    PsiExpression init=factory.createExpressionFromText("new " + type.getCanonicalText() + expression,myVariable);
    variableDeclarationStatement=factory.createVariableDeclarationStatement(myVariable.getName(),newType,init);
  }
  PsiVariable newVariable=(PsiVariable)variableDeclarationStatement.getDeclaredElements()[0];
  newVariable.getModifierList().setModifierProperty(PsiModifier.FINAL,true);
  PsiElement newExpression=factory.createExpressionFromText(myVariable.getName() + "[0]",myVariable);
  PsiElement outerCodeBlock=PsiUtil.getVariableCodeBlock(myVariable,null);
  if (outerCodeBlock == null)   return;
  List<PsiReferenceExpression> outerReferences=new ArrayList<PsiReferenceExpression>();
  collectReferences(outerCodeBlock,myVariable,outerReferences);
  replaceReferences(outerReferences,newExpression);
  myVariable.replace(newVariable);
}
