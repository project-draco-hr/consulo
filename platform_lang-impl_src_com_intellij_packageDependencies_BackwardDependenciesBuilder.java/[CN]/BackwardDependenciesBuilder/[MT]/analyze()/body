{
  final DependenciesBuilder[] builders=new DependenciesBuilder[myForwardScopes.length];
  int totalCount=0;
  for (int i=0; i < myForwardScopes.length; i++) {
    AnalysisScope scope=myForwardScopes[i];
    builders[i]=new ForwardDependenciesBuilder(getProject(),scope,getScopeOfInterest());
    builders[i].setInitialFileCount(totalCount);
    builders[i].setTotalFileCount(myTotalFileCount);
    builders[i].analyze();
    totalCount+=scope.getFileCount();
    subtractScope(builders[i],getScope());
  }
  final PsiManager psiManager=PsiManager.getInstance(getProject());
  psiManager.startBatchFilesProcessingMode();
  try {
    final int fileCount=getScope().getFileCount();
    getScope().accept(new PsiRecursiveElementVisitor(){
      @Override public void visitFile(      final PsiFile file){
        ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
        if (indicator != null) {
          if (indicator.isCanceled()) {
            throw new ProcessCanceledException();
          }
          indicator.setText(AnalysisScopeBundle.message("package.dependencies.progress.text"));
          final VirtualFile virtualFile=file.getVirtualFile();
          if (virtualFile != null) {
            indicator.setText2(ProjectUtil.calcRelativeToProjectPath(virtualFile,getProject()));
          }
          if (fileCount > 0) {
            indicator.setFraction(((double)++myFileCount) / myTotalFileCount);
          }
        }
        for (        DependenciesBuilder builder : builders) {
          final Map<PsiFile,Set<PsiFile>> dependencies=builder.getDependencies();
          for (          final PsiFile psiFile : dependencies.keySet()) {
            if (dependencies.get(psiFile).contains(file)) {
              Set<PsiFile> fileDeps=getDependencies().get(file);
              if (fileDeps == null) {
                fileDeps=new HashSet<PsiFile>();
                getDependencies().put(file,fileDeps);
              }
              fileDeps.add(psiFile);
            }
          }
        }
        psiManager.dropResolveCaches();
        psiManager.dropFileCaches(file);
      }
    }
);
  }
  finally {
    psiManager.finishBatchFilesProcessingMode();
  }
}
