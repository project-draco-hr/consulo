{
  Editor editor=e.getData(DiffDataKeys.CURRENT_EDITOR);
  StringBuffer message=new StringBuffer(next ? "Press again to go to the next file" : "Press again to go to the previous file").append("<br>").append("<span style='color:#").append(ColorUtil.toHex(JBColor.gray)).append("'>").append("<small>").append("You can disable this feature in ").append(DiffUtil.getSettingsConfigurablePath()).append("</small>").append("</span>");
  final LightweightHint hint=new LightweightHint(HintUtil.createInformationLabel(message.toString()));
  Point point=new Point(myContentPanel.getWidth() / 2,next ? myContentPanel.getHeight() - JBUI.scale(40) : JBUI.scale(40));
  if (editor == null) {
    final Component owner=KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();
    final HintHint hintHint=createNotifyHint(myContentPanel,point,next);
    hint.show(myContentPanel,point.x,point.y,owner instanceof JComponent ? (JComponent)owner : null,hintHint);
  }
 else {
    int x=SwingUtilities.convertPoint(myContentPanel,point,editor.getComponent()).x;
    JComponent header=editor.getHeaderComponent();
    int shift=editor.getScrollingModel().getVerticalScrollOffset() - (header != null ? header.getHeight() : 0);
    LogicalPosition position;
    LineRange changeRange=e.getData(DiffDataKeys.CURRENT_CHANGE_RANGE);
    if (changeRange == null) {
      position=new LogicalPosition(editor.getCaretModel().getLogicalPosition().line + (next ? 1 : 0),0);
    }
 else {
      position=new LogicalPosition(next ? changeRange.end : changeRange.start,0);
    }
    int y=editor.logicalPositionToXY(position).y - shift;
    Point editorPoint=new Point(x,y);
    final HintHint hintHint=createNotifyHint(editor.getComponent(),editorPoint,!next);
    HintManagerImpl.getInstanceImpl().showEditorHint(hint,editor,editorPoint,HintManager.HIDE_BY_ANY_KEY | HintManager.HIDE_BY_TEXT_CHANGE | HintManager.HIDE_BY_SCROLLING,0,false,hintHint);
  }
}
