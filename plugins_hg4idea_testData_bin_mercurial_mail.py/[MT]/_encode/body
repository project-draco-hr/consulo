def _encode(ui, s, charsets):
    'Returns (converted) string, charset tuple.\n    Finds out best charset by cycling through sendcharsets in descending\n    order. Tries both encoding and fallbackencoding for input. Only as\n    last resort send as is in fake ascii.\n    Caveat: Do not use for mail parts containing patches!'
    try:
        s.decode('ascii')
    except UnicodeDecodeError:
        sendcharsets = (charsets or _charsets(ui))
        for ics in (encoding.encoding, encoding.fallbackencoding):
            try:
                u = s.decode(ics)
            except UnicodeDecodeError:
                continue
            for ocs in sendcharsets:
                try:
                    return (u.encode(ocs), ocs)
                except UnicodeEncodeError:
                    pass
                except LookupError:
                    ui.warn((_('ignoring invalid sendcharset: %s\n') % ocs))
    return (s, 'us-ascii')
