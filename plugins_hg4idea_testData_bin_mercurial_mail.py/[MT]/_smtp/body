def _smtp(ui):
    'build an smtp connection and return a function to send mail'
    local_hostname = ui.config('smtp', 'local_hostname')
    s = smtplib.SMTP(local_hostname=local_hostname)
    mailhost = ui.config('smtp', 'host')
    if (not mailhost):
        raise util.Abort(_('no [smtp]host in hgrc - cannot send mail'))
    mailport = int(ui.config('smtp', 'port', 25))
    ui.note((_('sending mail: smtp host %s, port %s\n') % (mailhost, mailport)))
    s.connect(host=mailhost, port=mailport)
    if ui.configbool('smtp', 'tls'):
        if (not hasattr(socket, 'ssl')):
            raise util.Abort(_("can't use TLS: Python SSL support not installed"))
        ui.note(_('(using tls)\n'))
        s.ehlo()
        s.starttls()
        s.ehlo()
    username = ui.config('smtp', 'username')
    password = ui.config('smtp', 'password')
    if (username and (not password)):
        password = ui.getpass()
    if (username and password):
        ui.note((_('(authenticating to mail server as %s)\n') % username))
        try:
            s.login(username, password)
        except smtplib.SMTPException as inst:
            raise util.Abort(inst)

    def send(sender, recipients, msg):
        try:
            return s.sendmail(sender, recipients, msg)
        except smtplib.SMTPRecipientsRefused as inst:
            recipients = [r[1] for r in inst.recipients.values()]
            raise util.Abort(('\n' + '\n'.join(recipients)))
        except smtplib.SMTPException as inst:
            raise util.Abort(inst)
    return send
