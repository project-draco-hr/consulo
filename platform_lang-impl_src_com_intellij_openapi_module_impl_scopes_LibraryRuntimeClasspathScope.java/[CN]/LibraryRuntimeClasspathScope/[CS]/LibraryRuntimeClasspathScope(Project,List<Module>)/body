{
  super(project);
  myIndex=ProjectRootManager.getInstance(project).getFileIndex();
  final Set<Sdk> processedSdk=new THashSet<Sdk>();
  final Set<Library> processedLibraries=new THashSet<Library>();
  ProjectRootManager.getInstance(project).orderEntries(modules).recursively().process(new RootPolicy<LinkedHashSet<VirtualFile>>(){
    public LinkedHashSet<VirtualFile> visitLibraryOrderEntry(    final LibraryOrderEntry libraryOrderEntry,    final LinkedHashSet<VirtualFile> value){
      final Library library=libraryOrderEntry.getLibrary();
      if (library != null && processedLibraries.add(library)) {
        ContainerUtil.addAll(value,libraryOrderEntry.getRootFiles(OrderRootType.CLASSES));
      }
      return value;
    }
    public LinkedHashSet<VirtualFile> visitModuleSourceOrderEntry(    final ModuleSourceOrderEntry moduleSourceOrderEntry,    final LinkedHashSet<VirtualFile> value){
      ContainerUtil.addAll(value,moduleSourceOrderEntry.getFiles(OrderRootType.SOURCES));
      return value;
    }
    @Override public LinkedHashSet<VirtualFile> visitModuleOrderEntry(    ModuleOrderEntry moduleOrderEntry,    LinkedHashSet<VirtualFile> value){
      final Module depModule=moduleOrderEntry.getModule();
      if (depModule != null) {
        ContainerUtil.addAll(value,ModuleRootManager.getInstance(depModule).getSourceRoots());
      }
      return value;
    }
    public LinkedHashSet<VirtualFile> visitJdkOrderEntry(    final JdkOrderEntry jdkOrderEntry,    final LinkedHashSet<VirtualFile> value){
      final Sdk jdk=jdkOrderEntry.getJdk();
      if (jdk != null && processedSdk.add(jdk)) {
        ContainerUtil.addAll(value,jdkOrderEntry.getRootFiles(OrderRootType.CLASSES));
      }
      return value;
    }
  }
,myEntries);
}
