{
  super(project);
  myIndex=ProjectRootManager.getInstance(project).getFileIndex();
  final Set<Sdk> processedSdk=new THashSet<Sdk>();
  final Set<Library> processedLibraries=new THashSet<Library>();
  ProjectRootManager.getInstance(project).orderEntries(modules).recursively().process(new RootPolicy<LinkedHashMap<VirtualFile,Integer>>(){
    @Override public LinkedHashMap<VirtualFile,Integer> visitLibraryOrderEntry(    final LibraryOrderEntry libraryOrderEntry,    final LinkedHashMap<VirtualFile,Integer> value){
      final Library library=libraryOrderEntry.getLibrary();
      if (library != null && processedLibraries.add(library)) {
        addAll(value,libraryOrderEntry.getRootFiles(OrderRootType.CLASSES));
      }
      return value;
    }
    @Override public LinkedHashMap<VirtualFile,Integer> visitModuleSourceOrderEntry(    final ModuleSourceOrderEntry moduleSourceOrderEntry,    final LinkedHashMap<VirtualFile,Integer> value){
      addAll(value,moduleSourceOrderEntry.getFiles(OrderRootType.SOURCES));
      return value;
    }
    @Override public LinkedHashMap<VirtualFile,Integer> visitModuleOrderEntry(    ModuleOrderEntry moduleOrderEntry,    LinkedHashMap<VirtualFile,Integer> value){
      final Module depModule=moduleOrderEntry.getModule();
      if (depModule != null) {
        addAll(value,ModuleRootManager.getInstance(depModule).getSourceRoots());
      }
      return value;
    }
    @Override public LinkedHashMap<VirtualFile,Integer> visitJdkOrderEntry(    JdkOrderEntry jdkOrderEntry,    LinkedHashMap<VirtualFile,Integer> value){
      final Sdk jdk=jdkOrderEntry.getJdk();
      if (jdk != null && processedSdk.add(jdk)) {
        addAll(value,jdkOrderEntry.getRootFiles(OrderRootType.CLASSES));
      }
      return value;
    }
  }
,myEntries);
  fillIndexes();
}
