{
  myProject=project;
  myRoot=root;
  myTreeView=treeView;
  myAccess=new LowLevelAccessImpl(project,root);
  myFilterHolder=new MyFiltersStateHolder();
  myHighlightingHolder=new MyFiltersStateHolder();
  myTags=new AtomicReference<List<String>>(Collections.<String>emptyList());
  myBranches=new AtomicReference<List<String>>(Collections.<String>emptyList());
  myUsers=new AtomicReference<List<String>>(Collections.<String>emptyList());
  myAlarm=new Alarm(Alarm.ThreadToUse.OWN_THREAD,project);
  myFilterRequestsMerger=new RequestsMerger(new Runnable(){
    public void run(){
      try {
        if (myFilterHolder.isDirty()) {
          final Portion filtered=loadPortion(myFilterHolder.getStartingPoints(),myFilterHolder.getCurrentPoint(),null,myFilterHolder.getFilters(),PageSizes.LOAD_SIZE);
          if (filtered == null)           return;
          final List<GitCommit> commitList=filtered.getXFrom(0,PageSizes.VISIBLE_PAGE_SIZE);
          myFiltered=filtered;
          myTreeView.refreshView(commitList,new TravelTicket(filtered.isStartFound(),filtered.getLast().getDate()));
          myFilterHolder.setDirty(false);
        }
        if (myHighlightingHolder.isNothingSelected()) {
          myTreeView.clearHighlighted();
          return;
        }
        myTreeView.acceptHighlighted(loadIdsToHighlight());
      }
  finally {
        myTreeView.refreshFinished();
      }
    }
  }
,new Consumer<Runnable>(){
    public void consume(    Runnable runnable){
      myTreeView.refreshStarted();
      myAlarm.addRequest(runnable,50);
    }
  }
);
  myFiltering=new MyUpdateStateInterceptor(myFilterRequestsMerger,myFilterHolder,null);
  myHighlighting=new MyUpdateStateInterceptor(myFilterRequestsMerger,myHighlightingHolder,null);
  myFilterHolder.setDirty(true);
}
