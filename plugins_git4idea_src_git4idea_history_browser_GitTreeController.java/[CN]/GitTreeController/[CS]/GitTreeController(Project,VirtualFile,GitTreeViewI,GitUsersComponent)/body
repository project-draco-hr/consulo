{
  myProject=project;
  myRoot=root;
  myTreeView=treeView;
  myGitUsersComponent=gitUsersComponent;
  myAccess=new LowLevelAccessImpl(project,root);
  myFilterHolder=new MyFiltersStateHolder();
  myHighlightingHolder=new MyFiltersStateHolder();
  myTags=new AtomicReference<List<String>>(Collections.<String>emptyList());
  myBranches=new AtomicReference<List<String>>(Collections.<String>emptyList());
  myAlarm=new Alarm(Alarm.ThreadToUse.OWN_THREAD,project);
  myRefresher=new Runnable(){
    public void run(){
      try {
        if (myFilterHolder.isDirty()) {
          final CommitsLoader loader=new CommitsLoader();
          loader.loadCommitsUsingMemoryAndNativeFilters(myFilterHolder.getStartingPoints(),myFilterHolder.getCurrentPoint(),null,myFilterHolder.getFilters(),PageSizes.LOAD_SIZE);
          final List<GitCommit> commitList=loader.getCommitList();
          myTravelDate=commitList.isEmpty() ? null : commitList.get(commitList.size() - 1).getDate();
          final SHAHash lastHash=commitList.isEmpty() ? null : commitList.get(commitList.size() - 1).getHash();
          myTreeView.refreshView(commitList,new TravelTicket(loader.isStartFound(),myTravelDate,lastHash),null);
          myFilterHolder.setDirty(false);
        }
        if (myHighlightingHolder.isNothingSelected()) {
          myTreeView.clearHighlighted();
          return;
        }
        myTreeView.acceptHighlighted(loadIdsToHighlight());
      }
 catch (      VcsException e) {
        myTreeView.acceptError(e.getMessage(),e);
      }
 finally {
        myTreeView.refreshFinished();
        myProject.getMessageBus().syncPublisher(GitProjectLogManager.CHECK_CURRENT_BRANCH).consume(myRoot);
      }
    }
  }
;
  myFilterRequestsMerger=new RequestsMerger(myRefresher,new Consumer<Runnable>(){
    public void consume(    Runnable runnable){
      myTreeView.refreshStarted();
      myAlarm.addRequest(runnable,50);
    }
  }
);
  myFiltering=new MyUpdateStateInterceptor(myFilterRequestsMerger,myFilterHolder);
  myHighlighting=new MyUpdateStateInterceptor(myFilterRequestsMerger,myHighlightingHolder);
  myFilterHolder.setDirty(true);
  ApplicationManager.getApplication().executeOnPooledThread(new DumbAwareRunnable(){
    public void run(){
      initCurrentUser();
    }
  }
);
}
