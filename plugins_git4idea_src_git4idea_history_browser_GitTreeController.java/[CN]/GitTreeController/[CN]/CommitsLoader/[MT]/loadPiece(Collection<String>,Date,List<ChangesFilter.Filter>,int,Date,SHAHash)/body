{
  final List<GitCommit> newList=new ArrayList<GitCommit>(PageSizes.LOAD_SIZE);
  final Ref<Boolean> oldPointPassed=new Ref<Boolean>();
  myAccess.loadCommits(startingPoints,lastDate,afterPoint,commandFilters,new AsynchConsumer<GitCommit>(){
    @Override public void consume(    GitCommit gitCommit){
      myLastCommit=gitCommit;
      if (!Boolean.TRUE.equals(oldPointPassed.get())) {
        if (lastDate != null && gitCommit.getDate().before(lastDate)) {
          oldPointPassed.set(true);
        }
 else         if (gitCommit.getHash().equals(lastHash)) {
          newList.clear();
          oldPointPassed.set(true);
          return;
        }
      }
      newList.add(gitCommit);
    }
    @Override public void finished(){
    }
  }
,requestMaxCnt,null);
  return newList;
}
