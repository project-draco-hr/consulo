{
  final List<String> branches=new LinkedList<String>();
  final List<String> tags=new LinkedList<String>();
  try {
    if (loadBranches) {
      myAccess.loadAllBranches(branches);
      Collections.sort(branches);
      myBranches.set(branches);
    }
    if (loadTags) {
      myAccess.loadAllTags(tags);
      Collections.sort(tags);
      myTags.set(tags);
    }
    if (loadUsers) {
      final List<Pair<String,String>> value=GitConfigUtil.getAllValues(myProject,myRoot,"user.name");
      final String username=value.size() == 1 ? value.get(0).getSecond() : null;
      final Portion p=loadPortion(Collections.<String>emptyList(),null,null,Collections.<ChangesFilter.Filter>emptyList(),500);
      final Set<String> users=new HashSet<String>();
      p.iterateFrom(0,new Processor<GitCommit>(){
        public boolean process(        GitCommit gitCommit){
          users.add(gitCommit.getAuthor());
          users.add(gitCommit.getCommitter());
          return false;
        }
      }
);
      final ArrayList<String> usersList=new ArrayList<String>(users);
      Collections.sort(usersList);
      if (username != null) {
        usersList.remove(username);
        usersList.add(0,username);
      }
      myUsers.set(usersList);
    }
  }
 catch (  VcsException e) {
    myTreeView.acceptError(e.getMessage());
  }
}
