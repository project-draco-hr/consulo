{
  SHAHash hash=GitChangeUtils.commitExists(myProject,myRoot,reference);
  if (hash == null) {
    hash=GitChangeUtils.commitExistsByComment(myProject,myRoot,reference);
  }
  if (hash == null) {
    VcsBalloonProblemNotifier.showOverChangesView(myProject,"Nothing found for: \"" + reference + "\"",MessageType.WARNING);
  }
 else {
    final SHAHash finalHash=hash;
    myAlarm.addRequest(new Runnable(){
      public void run(){
        final List<Pair<Date,SHAHash>> wayList=new LinkedList<Pair<Date,SHAHash>>();
        while (true) {
          final Pair<Date,SHAHash> startFrom=wayList.isEmpty() ? null : wayList.get(wayList.size() - 1);
          final CommitsLoader loader=new CommitsLoader();
          try {
            loader.loadCommitsUsingMemoryAndNativeFilters(myFilterHolder.getStartingPoints(),startFrom,null,myFilterHolder.getFilters(),PageSizes.LOAD_SIZE);
          }
 catch (          VcsException e) {
            myTreeView.acceptError(e.getMessage(),e);
            return;
          }
          final List<GitCommit> commits=loader.getCommitList();
          for (          GitCommit commit : commits) {
            if (finalHash.equals(commit.getHash())) {
              while (myFilterHolder.getCurrentPoint() != null) {
                myFilterHolder.popContinuationPoint();
              }
              for (              Pair<Date,SHAHash> date : wayList) {
                myFilterHolder.addContinuationPoint(date);
              }
              final GitCommit lastCommit=commits.get(commits.size() - 1);
              myTreeView.refreshView(commits,new TravelTicket(loader.isStartFound(),lastCommit.getDate(),lastCommit.getHash()),finalHash);
              myFilterHolder.setDirty(false);
              myRefresher.run();
              return;
            }
          }
          if (!commits.isEmpty()) {
            final GitCommit commit=commits.get(commits.size() - 1);
            wayList.add(new Pair<Date,SHAHash>(commit.getDate(),commit.getHash()));
          }
          if (loader.isStartFound())           return;
        }
      }
    }
,10);
  }
}
