{
  final int dividerIndex=line.indexOf(JavacRunner.CATEGORY_VALUE_DIVIDER);
  final String category=line.substring(0,dividerIndex);
  final String resourceBundleValue=line.substring(dividerIndex + 1);
  if (JavacRunner.MSG_PARSING_COMPLETED.equals(category) || JavacRunner.MSG_PARSING_STARTED.equals(category) || JavacRunner.MSG_WROTE.equals(category)) {
    myParserActions.add(new FilePathActionJavac(createMatcher(resourceBundleValue)));
  }
 else   if (JavacRunner.MSG_CHECKING.equals(category)) {
    myParserActions.add(new JavacParserAction(createMatcher(resourceBundleValue)){
      protected void doExecute(      String parsedData,      final Callback callback){
        callback.setProgressText(CompilerBundle.message("progress.compiling.class",parsedData));
      }
    }
);
  }
 else   if (JavacRunner.MSG_LOADING.equals(category)) {
    myParserActions.add(new JavacParserAction(createMatcher(resourceBundleValue)){
      protected void doExecute(      @Nullable String parsedData,      final Callback callback){
        callback.setProgressText(CompilerBundle.message("progress.loading.classes"));
      }
    }
);
  }
 else   if (JavacRunner.MSG_WARNING.equals(category)) {
    WARNING_PREFIX=resourceBundleValue;
  }
 else   if (JavacRunner.MSG_STATISTICS.equals(category)) {
    myParserActions.add(new JavacParserAction(createMatcher(resourceBundleValue)){
      protected void doExecute(      @Nullable String parsedData,      final Callback callback){
      }
    }
);
  }
}
