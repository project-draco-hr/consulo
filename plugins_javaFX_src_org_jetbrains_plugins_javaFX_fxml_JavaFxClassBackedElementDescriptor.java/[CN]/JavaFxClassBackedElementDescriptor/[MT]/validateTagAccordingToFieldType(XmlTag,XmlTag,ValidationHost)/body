{
  if (myPsiClass != null && myPsiClass.isValid()) {
    if (parentTag == null) {
      if (!InheritanceUtil.isInheritor(myPsiClass,FxmlConstants.JAVAFX_ANCHOR_PANE)) {
        host.addMessage(context.getNavigationElement(),HighlightUtil.formatClass(myPsiClass) + " cannot be cast to " + FxmlConstants.JAVAFX_ANCHOR_PANE,ValidationHost.ErrorType.ERROR);
      }
      return;
    }
    final XmlElementDescriptor descriptor=parentTag.getDescriptor();
    if (descriptor instanceof JavaFxListPropertyElementDescriptor) {
      final PsiElement declaration=descriptor.getDeclaration();
      if (declaration instanceof PsiField) {
        final PsiType type=((PsiField)declaration).getType();
        final PsiType collectionItemType=GenericsHighlightUtil.getCollectionItemType(type,myPsiClass.getResolveScope());
        if (collectionItemType != null && PsiPrimitiveType.getUnboxedType(collectionItemType) == null) {
          final PsiClass baseClass=PsiUtil.resolveClassInType(collectionItemType);
          if (baseClass != null) {
            final String qualifiedName=baseClass.getQualifiedName();
            if (qualifiedName != null && !Comparing.strEqual(qualifiedName,CommonClassNames.JAVA_LANG_STRING)) {
              if (!InheritanceUtil.isInheritor(myPsiClass,qualifiedName)) {
                host.addMessage(context.getNavigationElement(),"Unable to coerce " + HighlightUtil.formatClass(myPsiClass) + " to "+ qualifiedName,ValidationHost.ErrorType.ERROR);
              }
            }
          }
        }
      }
    }
  }
}
