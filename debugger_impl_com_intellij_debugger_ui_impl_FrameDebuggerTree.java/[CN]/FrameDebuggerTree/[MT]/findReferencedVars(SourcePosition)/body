{
  final PsiFile file=position.getFile();
  final Document doc=FileDocumentManager.getInstance().getDocument(file.getVirtualFile());
  final int line=position.getLine();
  int startLine=Math.max(0,line - 1);
  while (startLine > 0 && isLineEmpty(doc,startLine))   startLine--;
  final int startOffset=doc.getLineStartOffset(startLine);
  int endLine=Math.min(line + 2,doc.getLineCount() - 1);
  while (endLine < doc.getLineCount() - 1 && isLineEmpty(doc,endLine))   endLine++;
  final int endOffset=doc.getLineEndOffset(endLine);
  final TextRange lineRange=new TextRange(startOffset,endOffset);
  final int offset=CharArrayUtil.shiftForward(doc.getCharsSequence(),doc.getLineStartOffset(line)," \t");
  PsiElement element=file.findElementAt(offset);
  if (element != null) {
    PsiMethod method=PsiTreeUtil.getNonStrictParentOfType(element,PsiMethod.class);
    if (method != null) {
      element=method;
    }
 else {
      PsiField field=PsiTreeUtil.getNonStrictParentOfType(element,PsiField.class);
      if (field != null) {
        element=field;
      }
 else {
        final PsiClassInitializer initializer=PsiTreeUtil.getNonStrictParentOfType(element,PsiClassInitializer.class);
        if (initializer != null) {
          element=initializer;
        }
      }
    }
    final Set<String> vars=new HashSet<String>();
    final Set<TextWithImports> expressions=new HashSet<TextWithImports>();
    final PsiRecursiveElementVisitor variablesCollector=new VariablesCollector(lineRange,expressions,vars);
    element.accept(variablesCollector);
    return new Pair<Set<String>,Set<TextWithImports>>(vars,expressions);
  }
  return new Pair<Set<String>,Set<TextWithImports>>(Collections.<String>emptySet(),Collections.<TextWithImports>emptySet());
}
