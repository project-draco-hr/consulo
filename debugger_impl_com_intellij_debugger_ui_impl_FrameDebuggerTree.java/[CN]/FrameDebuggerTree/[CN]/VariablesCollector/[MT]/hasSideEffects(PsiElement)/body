{
  final AtomicBoolean rv=new AtomicBoolean(false);
  element.accept(new PsiRecursiveElementVisitor(){
    @Override public void visitPostfixExpression(    final PsiPostfixExpression expression){
      rv.set(true);
    }
    @Override public void visitReferenceExpression(    final PsiReferenceExpression expression){
      final PsiElement psiElement=expression.resolve();
      if (psiElement instanceof PsiLocalVariable) {
        if (!myVisibleLocals.contains(((PsiLocalVariable)psiElement).getName())) {
          rv.set(true);
        }
      }
 else       if (psiElement instanceof PsiMethod) {
        final PsiMethod method=(PsiMethod)psiElement;
        if (!DebuggerUtils.isSimpleGetter(method)) {
          rv.set(true);
        }
      }
      if (!rv.get()) {
        super.visitReferenceExpression(expression);
      }
    }
    @Override public void visitPrefixExpression(    final PsiPrefixExpression expression){
      final IElementType op=expression.getOperationTokenType();
      if (JavaTokenType.PLUSPLUS.equals(op) || JavaTokenType.MINUSMINUS.equals(op)) {
        rv.set(true);
      }
 else {
        super.visitPrefixExpression(expression);
      }
    }
    @Override public void visitAssignmentExpression(    final PsiAssignmentExpression expression){
      rv.set(true);
    }
    @Override public void visitCallExpression(    final PsiCallExpression callExpression){
      final PsiMethod method=callExpression.resolveMethod();
      if (method == null || !DebuggerUtils.isSimpleGetter(method)) {
        rv.set(true);
      }
    }
  }
);
  return rv.get();
}
