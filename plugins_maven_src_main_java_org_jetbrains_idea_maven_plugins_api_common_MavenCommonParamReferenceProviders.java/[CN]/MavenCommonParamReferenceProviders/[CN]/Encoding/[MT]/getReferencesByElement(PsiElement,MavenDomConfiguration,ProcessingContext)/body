{
  return new PsiReference[]{new PsiReferenceBase<PsiElement>(element,true){
    @Override public PsiElement resolve(){
      return null;
    }
    @NotNull @Override public Object[] getVariants(){
      Charset[] charsets=CharsetToolkit.getAvailableCharsets();
      LookupElement[] res=new LookupElement[charsets.length];
      for (int i=0; i < charsets.length; i++) {
        res[i]=LookupElementBuilder.create(charsets[i].name()).withCaseSensitivity(false);
      }
      return res;
    }
  }
};
}
