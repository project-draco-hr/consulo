{
  myDelayedTasks.clear();
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      FileDocumentManager.getInstance().saveAllDocuments();
    }
  }
);
  DataContext dataContext=e.getDataContext();
  final Project project=(Project)dataContext.getData(PlatformDataKeys.PROJECT.getName());
  if (project == null) {
    return;
  }
  GitVcs vcs=GitVcs.getInstance(project);
  final VirtualFile[] contentRoots=ProjectLevelVcsManager.getInstance(project).getRootsUnderVcs(vcs);
  if (contentRoots == null || contentRoots.length == 0) {
    Messages.showErrorDialog(project,GitBundle.getString("repository.action.missing.roots.unconfigured.message"),GitBundle.getString("repository.action.missing.roots.title"));
    return;
  }
  final List<VirtualFile> roots=new ArrayList<VirtualFile>(GitUtil.gitRootsForPaths(Arrays.asList(contentRoots)));
  if (roots.size() == 0) {
    Messages.showErrorDialog(project,GitBundle.getString("repository.action.missing.roots.misconfigured"),GitBundle.getString("repository.action.missing.roots.title"));
    return;
  }
  Collections.sort(roots,GitUtil.VIRTUAL_FILE_COMPARATOR);
  final VirtualFile[] vFiles=e.getData(PlatformDataKeys.VIRTUAL_FILE_ARRAY);
  VirtualFile defaultRootVar=null;
  if (vFiles != null) {
    for (    VirtualFile file : vFiles) {
      final VirtualFile root=GitUtil.gitRootOrNull(file);
      if (root != null) {
        defaultRootVar=root;
        break;
      }
    }
  }
  if (defaultRootVar == null) {
    defaultRootVar=roots.get(0);
  }
  final VirtualFile defaultRoot=defaultRootVar;
  final Set<VirtualFile> affectedRoots=new HashSet<VirtualFile>();
  String actionName=getActionName();
  AbstractVcsHelper helper=AbstractVcsHelper.getInstance(project);
  List<VcsException> exceptions=helper.runTransactionRunnable(vcs,new TransactionRunnable(){
    public void run(    List<VcsException> exceptions){
      try {
        perform(project,roots,defaultRoot,affectedRoots,exceptions);
      }
 catch (      VcsException e) {
        exceptions.add(e);
      }
      GitUtil.refreshFiles(project,affectedRoots);
      for (      TransactionRunnable task : myDelayedTasks) {
        task.run(exceptions);
      }
    }
  }
,null);
  vcs.showErrors(exceptions,actionName);
}
