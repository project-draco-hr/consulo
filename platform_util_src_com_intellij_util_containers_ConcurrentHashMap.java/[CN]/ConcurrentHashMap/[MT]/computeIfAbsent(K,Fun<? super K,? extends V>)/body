{
  if (key == null || mappingFunction == null) {
    throw new NullPointerException();
  }
  int h=hash(key);
  V val=null;
  int binCount=0;
  for (Node<K,V>[] tab=table; ; ) {
    Node<K,V> f;
    int n;
    int i;
    int fh;
    if (tab == null || (n=tab.length) == 0) {
      tab=initTable();
    }
 else     if ((f=tabAt(tab,i=n - 1 & h)) == null) {
      Node<K,V> r=new ReservationNode<K,V>();
synchronized (r) {
        if (casTabAt(tab,i,null,r)) {
          binCount=1;
          Node<K,V> node=null;
          try {
            if ((val=mappingFunction.apply(key)) != null) {
              node=new Node<K,V>(h,key,val,null,myHashingStrategy);
            }
          }
  finally {
            setTabAt(tab,i,node);
          }
        }
      }
      if (binCount != 0) {
        break;
      }
    }
 else     if ((fh=f.hash) == MOVED) {
      tab=helpTransfer(tab,f);
    }
 else {
      boolean added=false;
synchronized (f) {
        if (tabAt(tab,i) == f) {
          if (fh >= 0) {
            binCount=1;
            for (Node<K,V> e=f; ; ++binCount) {
              K ek;
              if (e.hash == h && ((ek=e.key) == key || ek != null && myHashingStrategy.equals(key,ek))) {
                val=e.val;
                break;
              }
              Node<K,V> pred=e;
              if ((e=e.next) == null) {
                if ((val=mappingFunction.apply(key)) != null) {
                  added=true;
                  pred.next=new Node<K,V>(h,key,val,null,myHashingStrategy);
                }
                break;
              }
            }
          }
 else           if (f instanceof TreeBin) {
            binCount=2;
            TreeBin<K,V> t=(TreeBin<K,V>)f;
            TreeNode<K,V> r;
            TreeNode<K,V> p;
            if ((r=t.root) != null && (p=r.findTreeNode(h,key,null)) != null) {
              val=p.val;
            }
 else             if ((val=mappingFunction.apply(key)) != null) {
              added=true;
              t.putTreeVal(h,key,val);
            }
          }
        }
      }
      if (binCount != 0) {
        if (binCount >= TREEIFY_THRESHOLD) {
          treeifyBin(tab,i);
        }
        if (!added) {
          return val;
        }
        break;
      }
    }
  }
  if (val != null) {
    addCount(1L,binCount);
  }
  return val;
}
