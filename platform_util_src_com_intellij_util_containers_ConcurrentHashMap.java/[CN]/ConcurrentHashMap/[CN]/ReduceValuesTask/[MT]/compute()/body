{
  final BiFun<? super V,? super V,? extends V> reducer;
  if ((reducer=this.reducer) != null) {
    for (int i=baseIndex, f, h; batch > 0 && (h=(f=baseLimit) + i >>> 1) > i; ) {
      addToPendingCount(1);
      (rights=new ReduceValuesTask<K,V>(this,batch>>>=1,baseLimit=h,f,tab,rights,reducer)).fork();
    }
    V r=null;
    for (Node<K,V> p; (p=advance()) != null; ) {
      V v=p.val;
      r=r == null ? v : reducer.apply(r,v);
    }
    result=r;
    for (CountedCompleter<?> c=firstComplete(); c != null; c=c.nextComplete()) {
      @SuppressWarnings("unchecked") ReduceValuesTask<K,V> t=(ReduceValuesTask<K,V>)c;
      @SuppressWarnings("unchecked") ReduceValuesTask<K,V> s=t.rights;
      while (s != null) {
        V sr;
        if ((sr=s.result) != null) {
          V tr;
          t.result=(tr=t.result) == null ? sr : reducer.apply(tr,sr);
        }
        s=t.rights=s.nextRight;
      }
    }
  }
}
