{
  final Fun<? super K,? extends U> searchFunction;
  final AtomicReference<U> result;
  if ((searchFunction=this.searchFunction) != null && (result=this.result) != null) {
    for (int i=baseIndex, f, h; batch > 0 && (h=(f=baseLimit) + i >>> 1) > i; ) {
      if (result.get() != null) {
        return;
      }
      addToPendingCount(1);
      new SearchKeysTask<K,V,U>(this,batch>>>=1,baseLimit=h,f,tab,searchFunction,result).fork();
    }
    while (result.get() == null) {
      Node<K,V> p;
      if ((p=advance()) == null) {
        propagateCompletion();
        break;
      }
      U u;
      if ((u=searchFunction.apply(p.key)) != null) {
        if (result.compareAndSet(null,u)) {
          quietlyCompleteRoot();
        }
        break;
      }
    }
  }
}
