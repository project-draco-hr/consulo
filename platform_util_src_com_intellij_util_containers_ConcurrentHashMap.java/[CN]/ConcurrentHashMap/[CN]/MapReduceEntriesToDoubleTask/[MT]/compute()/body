{
  final ObjectToDouble<Map.Entry<K,V>> transformer;
  final DoubleByDoubleToDouble reducer;
  if ((transformer=this.transformer) != null && (reducer=this.reducer) != null) {
    double r=basis;
    for (int i=baseIndex, f, h; batch > 0 && (h=(f=baseLimit) + i >>> 1) > i; ) {
      addToPendingCount(1);
      (rights=new MapReduceEntriesToDoubleTask<K,V>(this,batch>>>=1,baseLimit=h,f,tab,rights,transformer,r,reducer)).fork();
    }
    for (Node<K,V> p; (p=advance()) != null; ) {
      r=reducer.apply(r,transformer.apply(p));
    }
    result=r;
    for (CountedCompleter<?> c=firstComplete(); c != null; c=c.nextComplete()) {
      @SuppressWarnings("unchecked") MapReduceEntriesToDoubleTask<K,V> t=(MapReduceEntriesToDoubleTask<K,V>)c;
      @SuppressWarnings("unchecked") MapReduceEntriesToDoubleTask<K,V> s=t.rights;
      while (s != null) {
        t.result=reducer.apply(t.result,s.result);
        s=t.rights=s.nextRight;
      }
    }
  }
}
