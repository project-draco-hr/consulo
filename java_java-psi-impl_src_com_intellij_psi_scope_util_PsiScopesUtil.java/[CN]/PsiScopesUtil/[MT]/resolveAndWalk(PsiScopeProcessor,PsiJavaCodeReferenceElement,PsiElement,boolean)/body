{
  final PsiElement qualifier=ref.getQualifier();
  final PsiElement classNameElement=ref.getReferenceNameElement();
  if (classNameElement == null)   return true;
  if (qualifier != null) {
    PsiElement target=null;
    PsiSubstitutor substitutor=PsiSubstitutor.EMPTY;
    if (qualifier instanceof PsiExpression || qualifier instanceof PsiJavaCodeReferenceElement) {
      PsiType type=null;
      if (qualifier instanceof PsiExpression) {
        type=((PsiExpression)qualifier).getType();
        processTypeDeclarations(type,ref,processor);
      }
      if (type == null && qualifier instanceof PsiJavaCodeReferenceElement) {
        final PsiJavaCodeReferenceElement referenceElement=(PsiJavaCodeReferenceElement)qualifier;
        final JavaResolveResult result=referenceElement.advancedResolve(incompleteCode);
        target=result.getElement();
        substitutor=result.getSubstitutor();
        if (target instanceof PsiVariable) {
          type=substitutor.substitute(((PsiVariable)target).getType());
          if (type instanceof PsiClassType) {
            final JavaResolveResult typeResult=((PsiClassType)type).resolveGenerics();
            target=typeResult.getElement();
            substitutor=substitutor.putAll(typeResult.getSubstitutor());
          }
 else {
            target=null;
          }
        }
 else         if (target instanceof PsiMethod) {
          type=substitutor.substitute(((PsiMethod)target).getReturnType());
          if (type instanceof PsiClassType) {
            final JavaResolveResult typeResult=((PsiClassType)type).resolveGenerics();
            target=typeResult.getElement();
            substitutor=substitutor.putAll(typeResult.getSubstitutor());
          }
 else {
            target=null;
          }
          final PsiType[] types=referenceElement.getTypeParameters();
          if (target instanceof PsiClass) {
            substitutor=substitutor.putAll((PsiClass)target,types);
          }
        }
 else         if (target instanceof PsiClass && !(ref instanceof PsiMethodReferenceExpression)) {
          processor.handleEvent(JavaScopeProcessorEvent.START_STATIC,null);
        }
      }
    }
    if (target != null) {
      return target.processDeclarations(processor,ResolveState.initial().put(PsiSubstitutor.KEY,substitutor),target,ref);
    }
  }
 else {
    return treeWalkUp(processor,ref,maxScope);
  }
  return true;
}
