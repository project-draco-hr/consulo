{
  final Map<PsiElement,PsiElement> replacements=new HashMap<PsiElement,PsiElement>();
  expression.accept(new JavaRecursiveElementVisitor(){
    @Override public void visitReferenceExpression(    PsiReferenceExpression referenceExpression){
      super.visitReferenceExpression(referenceExpression);
      final PsiElement resolved=referenceExpression.resolve();
      if (resolved instanceof PsiVariable) {
        final PsiVariable variable=(PsiVariable)resolved;
        final PsiElement replacement=elementsToReplace.get(variable);
        if (replacement != null) {
          replacements.put(referenceExpression,replacement);
        }
      }
    }
  }
);
  return RefactoringUtil.replaceElementsWithMap(expression,replacements);
}
