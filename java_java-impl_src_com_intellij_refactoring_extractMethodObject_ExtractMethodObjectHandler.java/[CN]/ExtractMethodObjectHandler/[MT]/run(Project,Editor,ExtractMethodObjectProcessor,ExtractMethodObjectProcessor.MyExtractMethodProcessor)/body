{
  final int offset=editor.getCaretModel().getOffset();
  final RangeMarker marker=editor.getDocument().createRangeMarker(new TextRange(offset,offset));
  CommandProcessor.getInstance().executeCommand(project,new Runnable(){
    public void run(){
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        @Override public void run(){
          extractProcessor.doRefactoring();
        }
      }
);
      processor.run();
      processor.runChangeSignature();
      PsiDocumentManager.getInstance(project).commitAllDocuments();
      if (processor.isCreateInnerClass()) {
        processor.moveUsedMethodsToInner();
        DuplicatesImpl.processDuplicates(extractProcessor,project,editor);
      }
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        @Override public void run(){
          if (processor.isCreateInnerClass()) {
            processor.changeInstanceAccess(project);
          }
          final PsiElement method=processor.getMethod();
          LOG.assertTrue(method != null);
          method.delete();
        }
      }
);
    }
  }
,ExtractMethodObjectProcessor.REFACTORING_NAME,ExtractMethodObjectProcessor.REFACTORING_NAME);
  editor.getCaretModel().moveToOffset(marker.getStartOffset());
  marker.dispose();
  editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
}
