{
  if (elements.length == 0) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("selected.block.should.represent.a.set.of.statements.or.an.expression"));
    CommonRefactoringUtil.showErrorHint(project,editor,message,ExtractMethodObjectProcessor.REFACTORING_NAME,HelpID.EXTRACT_METHOD_OBJECT);
    return;
  }
  final ExtractMethodObjectProcessor processor=new ExtractMethodObjectProcessor(project,editor,elements,"");
  final ExtractMethodObjectProcessor.MyExtractMethodProcessor extractProcessor=processor.getExtractProcessor();
  try {
    if (!extractProcessor.prepare())     return;
  }
 catch (  PrepareFailedException e) {
    CommonRefactoringUtil.showErrorHint(project,editor,e.getMessage(),ExtractMethodObjectProcessor.REFACTORING_NAME,HelpID.EXTRACT_METHOD_OBJECT);
    ExtractMethodHandler.highlightPrepareError(e,file,editor,project);
    return;
  }
  if (!CommonRefactoringUtil.checkReadOnlyStatus(project,extractProcessor.getTargetClass().getContainingFile()))   return;
  final int offset=editor.getCaretModel().getOffset();
  final RangeMarker marker=editor.getDocument().createRangeMarker(new TextRange(offset,offset));
  if (extractProcessor.showDialog()) {
    CommandProcessor.getInstance().executeCommand(project,new Runnable(){
      public void run(){
        ApplicationManager.getApplication().runWriteAction(new Runnable(){
          @Override public void run(){
            extractProcessor.doRefactoring();
          }
        }
);
        processor.run();
        processor.runChangeSignature();
        PsiDocumentManager.getInstance(project).commitAllDocuments();
        if (processor.isCreateInnerClass()) {
          processor.moveUsedMethodsToInner();
          DuplicatesImpl.processDuplicates(extractProcessor,project,editor);
        }
        ApplicationManager.getApplication().runWriteAction(new Runnable(){
          @Override public void run(){
            if (processor.isCreateInnerClass()) {
              processor.changeInstanceAccess(project);
            }
            final PsiElement method=processor.getMethod();
            LOG.assertTrue(method != null);
            method.delete();
          }
        }
);
      }
    }
,ExtractMethodObjectProcessor.REFACTORING_NAME,ExtractMethodObjectProcessor.REFACTORING_NAME);
    editor.getCaretModel().moveToOffset(marker.getStartOffset());
    editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
  }
}
