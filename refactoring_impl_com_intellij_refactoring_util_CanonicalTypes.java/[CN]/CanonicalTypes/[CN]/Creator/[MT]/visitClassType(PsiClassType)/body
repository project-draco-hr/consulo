{
  final PsiClassType.ClassResolveResult resolveResult=classType.resolveGenerics();
  final PsiClass aClass=resolveResult.getElement();
  if (aClass instanceof PsiAnonymousClass) {
    return visitClassType(((PsiAnonymousClass)aClass).getBaseClassType());
  }
  final String originalText=classType.getPresentableText();
  if (aClass == null) {
    return new WrongType(originalText);
  }
 else {
    Map<String,Type> substMap=new HashMap<String,Type>();
    final PsiSubstitutor substitutor=resolveResult.getSubstitutor();
    for (    PsiTypeParameter typeParameter : PsiUtil.typeParametersIterable(aClass)) {
      final PsiType substType=substitutor.substitute(typeParameter);
      final String name=typeParameter.getName();
      if (substType == null) {
        substMap.put(name,null);
      }
 else {
        substMap.put(name,substType.accept(this));
      }
    }
    final String qualifiedName=aClass.getQualifiedName();
    LOG.assertTrue(aClass.getName() != null);
    return new ClassType(originalText,qualifiedName != null ? qualifiedName : aClass.getName(),substMap);
  }
}
