{
  final XmlFile file=(XmlFile)context.file;
  final Project project=context.project;
  final XmlExtension extension=XmlExtension.getExtension(file);
  final Set<String> namespaces=extension.getNamespacesByTagName(myTagName,file);
  final Editor editor=context.editor;
  final Document document=editor.getDocument();
  PsiDocumentManager.getInstance(project).commitDocument(document);
  final RangeMarker rangeMarker=document.createRangeMarker(context.startOffset,context.startOffset);
  final int caretOffset=editor.getCaretModel().getOffset();
  final RangeMarker caretMarker=document.createRangeMarker(caretOffset,caretOffset);
  try {
    extension.insertNamespaceDeclaration(file,editor,namespaces,myNamespacePrefix,new Consumer<String>(){
      public void consume(      final String namespacePrefix){
        PsiDocumentManager.getInstance(project).commitDocument(editor.getDocument());
        final PsiElement element=file.findElementAt(rangeMarker.getStartOffset());
        if (element != null) {
          final PsiElement tag=element.getParent();
          if (tag instanceof XmlTag) {
            final String prefix=((XmlTag)tag).getNamespacePrefix();
            if (!prefix.equals(namespacePrefix)) {
              final String name=namespacePrefix + ":" + ((XmlTag)tag).getLocalName();
              try {
                ((XmlTag)tag).setName(name);
                PsiDocumentManager.getInstance(project).commitDocument(editor.getDocument());
              }
 catch (              IncorrectOperationException e) {
                LOG.error(e);
              }
            }
          }
        }
        final int offset=rangeMarker.getStartOffset();
        context.startOffset=rangeMarker.getStartOffset();
        editor.getCaretModel().moveToOffset(caretMarker.getStartOffset());
        PsiDocumentManager.getInstance(project).doPostponedOperationsAndUnblockDocument(document);
        ExtendedTagInsertHandler.super.handleInsert(context,offset,data,item,signatureSelected,completionChar);
      }
    }
);
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
