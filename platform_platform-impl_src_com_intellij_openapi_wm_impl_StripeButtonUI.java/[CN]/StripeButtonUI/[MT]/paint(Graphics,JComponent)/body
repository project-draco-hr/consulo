{
  final AnchoredButton button=(AnchoredButton)c;
  final String text=button.getText();
  final Icon icon=(button.isEnabled()) ? button.getIcon() : button.getDisabledIcon();
  if (icon == null && text == null) {
    return;
  }
  final FontMetrics fm=button.getFontMetrics(button.getFont());
  myViewInsets=c.getInsets(myViewInsets);
  myViewRect.x=myViewInsets.left;
  myViewRect.y=myViewInsets.top;
  final ToolWindowAnchor anchor=button.getAnchor();
  if (ToolWindowAnchor.RIGHT == anchor || ToolWindowAnchor.LEFT == anchor) {
    myViewRect.height=c.getWidth() - (myViewInsets.left + myViewInsets.right);
    myViewRect.width=c.getHeight() - (myViewInsets.top + myViewInsets.bottom);
  }
 else {
    myViewRect.height=c.getHeight() - (myViewInsets.left + myViewInsets.right);
    myViewRect.width=c.getWidth() - (myViewInsets.top + myViewInsets.bottom);
  }
  myIconRect.x=myIconRect.y=myIconRect.width=myIconRect.height=0;
  myTextRect.x=myTextRect.y=myTextRect.width=myTextRect.height=0;
  final String clippedText=SwingUtilities.layoutCompoundLabel(c,fm,text,icon,button.getVerticalAlignment(),button.getHorizontalAlignment(),button.getVerticalTextPosition(),button.getHorizontalTextPosition(),myViewRect,myIconRect,myTextRect,button.getText() == null ? 0 : button.getIconTextGap());
  final Graphics2D g2=(Graphics2D)g.create();
  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  g2.setRenderingHint(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
  final ButtonModel model=button.getModel();
  final Color background=button.getBackground();
  myIconRect.x-=2;
  myTextRect.x-=2;
  if (model.isArmed() && model.isPressed() || model.isSelected() || model.isRollover()) {
    if (anchor.isHorizontal())     g2.translate(0,-1);
    final boolean dark=UIUtil.isUnderDarcula();
    g2.setColor(dark ? Gray._15.withAlpha(model.isSelected() ? 85 : 40) : Gray._85.withAlpha(model.isSelected() ? 85 : 40));
    g2.fillRect(0,0,button.getWidth(),button.getHeight());
    if (anchor.isHorizontal())     g2.translate(0,1);
  }
  AffineTransform tr=null;
  if (ToolWindowAnchor.RIGHT == anchor || ToolWindowAnchor.LEFT == anchor) {
    tr=g2.getTransform();
    if (ToolWindowAnchor.RIGHT == anchor) {
      if (icon != null) {
        icon.paintIcon(c,g2,myIconRect.y,myIconRect.x);
      }
      g2.rotate(Math.PI / 2);
      g2.translate(0,-c.getWidth());
    }
 else {
      if (icon != null) {
        icon.paintIcon(c,g2,myIconRect.y,c.getHeight() - myIconRect.x - icon.getIconHeight());
      }
      g2.rotate(-Math.PI / 2);
      g2.translate(-c.getHeight(),0);
    }
  }
 else {
    if (icon != null) {
      icon.paintIcon(c,g2,myIconRect.x,myIconRect.y);
    }
  }
  if (text != null) {
    if (model.isEnabled()) {
      if (model.isArmed() && model.isPressed() || model.isSelected()) {
        g2.setColor(background);
      }
 else {
        g2.setColor(button.getForeground());
      }
    }
 else {
      g2.setColor(background.darker());
    }
    if (model.isEnabled()) {
      g2.setColor(UIUtil.isUnderDarcula() && model.isSelected() ? button.getForeground().brighter() : button.getForeground());
      BasicGraphicsUtils.drawString(g2,clippedText,button.getMnemonic2(),myTextRect.x,myTextRect.y + fm.getAscent());
    }
 else {
      if (model.isSelected()) {
        g2.setColor(c.getBackground());
      }
 else {
        g2.setColor(getDisabledTextColor());
      }
      BasicGraphicsUtils.drawString(g2,clippedText,button.getMnemonic2(),myTextRect.x,myTextRect.y + fm.getAscent());
    }
  }
  if (ToolWindowAnchor.RIGHT == anchor || ToolWindowAnchor.LEFT == anchor) {
    g2.setTransform(tr);
  }
  g2.dispose();
}
