{
  OneElementComponent component=myPanels[i];
  if (!method.isValid()) {
    component.setDisabled();
    return;
  }
  int highlightStartOffset=-1;
  int highlightEndOffset=-1;
  StringBuffer buffer=new StringBuffer();
  if (globalSettings.SHOW_FULL_SIGNATURES_IN_PARAMETER_INFO) {
    if (!method.isConstructor()) {
      PsiType returnType=method.getReturnType();
      if (substitutor != null) {
        returnType=substitutor.substitute((returnType));
      }
      buffer.append(returnType.getPresentableText());
      buffer.append(" ");
    }
    buffer.append(method.getName());
    buffer.append("(");
  }
  PsiParameter[] parms=method.getParameterList().getParameters();
  int numParams=parms.length;
  if (numParams > 0) {
    for (int j=0; j < numParams; j++) {
      PsiParameter parm=parms[j];
      int startOffset=buffer.length();
      if (parm.isValid()) {
        PsiType paramType=parm.getType();
        if (substitutor != null) {
          paramType=substitutor.substitute(paramType);
        }
        buffer.append(paramType.getPresentableText());
        String name=parm.getName();
        if (name != null) {
          buffer.append(" ");
          buffer.append(name);
        }
      }
      int endOffset=buffer.length();
      if (j < numParams - 1) {
        buffer.append(", ");
      }
      if (isEnabled(i) && (j == myCurrentParameter || (j == numParams - 1 && parm.isVarArgs() && myCurrentParameter >= numParams))) {
        highlightStartOffset=startOffset;
        highlightEndOffset=endOffset;
      }
    }
  }
 else {
    buffer.append(NO_PARAMETERS_TEXT);
  }
  if (globalSettings.SHOW_FULL_SIGNATURES_IN_PARAMETER_INFO) {
    buffer.append(")");
  }
  Color background=method.equals(myHighlightedMethod) ? HIGHLIGHTED_BORDER_COLOR : BACKGROUND_COLOR;
  component.setup(buffer.toString(),highlightStartOffset,highlightEndOffset,!isEnabled(i),method.isDeprecated(),false,background);
  component.setBorder(i == (myObjects.length - 1) ? BACKGROUND_BORDER : BOTTOM_BORDER);
}
