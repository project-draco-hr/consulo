{
  if (!CommonRefactoringUtil.checkReadOnlyStatusRecursively(project,Arrays.asList(directories),true)) {
    return;
  }
  List<PsiDirectory> sourceRootDirectories=buildRearrangeTargetsList(project,directories);
  DirectoryChooser chooser=new DirectoryChooser(project);
  chooser.setTitle(RefactoringBundle.message("select.source.root.chooser.title"));
  chooser.fillList(sourceRootDirectories.toArray(new PsiDirectory[sourceRootDirectories.size()]),null,project,"");
  chooser.show();
  if (!chooser.isOK())   return;
  final PsiDirectory selectedTarget=chooser.getSelectedDirectory();
  if (selectedTarget == null)   return;
  final MultiMap<PsiElement,String> conflicts=new MultiMap<PsiElement,String>();
  RefactoringConflictsUtil.analyzeModuleConflicts(project,Arrays.asList(directories),UsageInfo.EMPTY_ARRAY,selectedTarget,conflicts);
  if (!conflicts.isEmpty()) {
    if (ApplicationManager.getApplication().isUnitTestMode()) {
      throw new BaseRefactoringProcessor.ConflictsInTestsException(conflicts.values());
    }
 else {
      final ConflictsDialog conflictsDialog=new ConflictsDialog(project,conflicts);
      conflictsDialog.show();
      if (!conflictsDialog.isOK()) {
        return;
      }
    }
  }
  final Ref<IncorrectOperationException> ex=Ref.create(null);
  final String commandDescription=RefactoringBundle.message("moving.directories.command");
  Runnable runnable=new Runnable(){
    public void run(){
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        public void run(){
          LocalHistoryAction a=LocalHistory.getInstance().startAction(commandDescription);
          try {
            rearrangeDirectoriesToTarget(directories,selectedTarget);
          }
 catch (          IncorrectOperationException e) {
            ex.set(e);
          }
 finally {
            a.finish();
          }
        }
      }
);
    }
  }
;
  CommandProcessor.getInstance().executeCommand(project,runnable,commandDescription,null);
  if (ex.get() != null) {
    RefactoringUIUtil.processIncorrectOperation(project,ex.get());
  }
}
