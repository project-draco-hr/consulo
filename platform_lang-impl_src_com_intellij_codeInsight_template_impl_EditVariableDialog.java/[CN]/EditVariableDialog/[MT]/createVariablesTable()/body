{
  final String[] names={CodeInsightBundle.message("templates.dialog.edit.variables.table.column.name"),CodeInsightBundle.message("templates.dialog.edit.variables.table.column.expression"),CodeInsightBundle.message("templates.dialog.edit.variables.table.column.default.value"),CodeInsightBundle.message("templates.dialog.edit.variables.table.column.skip.if.defined")};
  TableModel dataModel=new AbstractTableModel(){
    public int getColumnCount(){
      return names.length;
    }
    public int getRowCount(){
      return myVariables.size();
    }
    public Object getValueAt(    int row,    int col){
      Variable variable=myVariables.get(row);
      if (col == 0) {
        return variable.getName();
      }
      if (col == 1) {
        return variable.getExpressionString();
      }
      if (col == 2) {
        return variable.getDefaultValueString();
      }
 else {
        return variable.isAlwaysStopAt() ? Boolean.FALSE : Boolean.TRUE;
      }
    }
    public String getColumnName(    int column){
      return names[column];
    }
    public Class getColumnClass(    int c){
      if (c <= 2) {
        return String.class;
      }
 else {
        return Boolean.class;
      }
    }
    public boolean isCellEditable(    int row,    int col){
      return true;
    }
    public void setValueAt(    Object aValue,    int row,    int col){
      Variable variable=myVariables.get(row);
      if (col == 0) {
        String varName=(String)aValue;
        Variable newVar=new Variable(varName,variable.getExpressionString(),variable.getDefaultValueString(),variable.isAlwaysStopAt());
        myVariables.set(row,newVar);
        updateTemplateTextByVarNameChange(variable,newVar);
      }
 else       if (col == 1) {
        variable.setExpressionString((String)aValue);
      }
 else       if (col == 2) {
        variable.setDefaultValueString((String)aValue);
      }
 else {
        variable.setAlwaysStopAt(!((Boolean)aValue).booleanValue());
      }
    }
  }
;
  myTable=new Table(dataModel);
  myTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myTable.setPreferredScrollableViewportSize(new Dimension(500,myTable.getRowHeight() * 8));
  myTable.getColumn(names[0]).setPreferredWidth(120);
  myTable.getColumn(names[1]).setPreferredWidth(200);
  myTable.getColumn(names[2]).setPreferredWidth(200);
  myTable.getColumn(names[3]).setPreferredWidth(100);
  if (myVariables.size() > 0) {
    myTable.getSelectionModel().setSelectionInterval(0,0);
  }
  JComboBox comboField=new JComboBox();
  Macro[] macros=MacroFactory.getMacros();
  Arrays.sort(macros,new Comparator<Macro>(){
    public int compare(    Macro m1,    Macro m2){
      return m1.getPresentableName().compareTo(m2.getPresentableName());
    }
  }
);
  eachMacro:   for (  Macro macro : macros) {
    for (    TemplateContextType contextType : myContextTypes) {
      if (macro.isAcceptableInContext(contextType)) {
        comboField.addItem(macro.getPresentableName());
        continue eachMacro;
      }
    }
  }
  comboField.setEditable(true);
  DefaultCellEditor cellEditor=new DefaultCellEditor(comboField);
  cellEditor.setClickCountToStart(1);
  myTable.getColumn(names[1]).setCellEditor(cellEditor);
  myTable.setRowHeight(comboField.getPreferredSize().height);
  JTextField textField=new JTextField();
  cellEditor=new DefaultCellEditor(textField);
  cellEditor.setClickCountToStart(1);
  myTable.setDefaultEditor(String.class,cellEditor);
  myTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      updateButtons();
    }
  }
);
  return ScrollPaneFactory.createScrollPane(myTable);
}
