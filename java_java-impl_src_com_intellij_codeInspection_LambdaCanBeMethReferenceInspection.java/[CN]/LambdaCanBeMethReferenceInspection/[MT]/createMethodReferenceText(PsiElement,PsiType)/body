{
  String methodRefText=null;
  if (element instanceof PsiMethodCallExpression) {
    final PsiMethodCallExpression methodCall=(PsiMethodCallExpression)element;
    final PsiMethod psiMethod=methodCall.resolveMethod();
    if (psiMethod == null)     return null;
    final PsiClass containingClass=psiMethod.getContainingClass();
    LOG.assertTrue(containingClass != null);
    final PsiReferenceExpression methodExpression=methodCall.getMethodExpression();
    final PsiExpression qualifierExpression=methodExpression.getQualifierExpression();
    final String methodReferenceName=methodExpression.getReferenceName();
    if (qualifierExpression != null) {
      boolean isReceiverType=PsiMethodReferenceUtil.isReceiverType(functionalInterfaceType,containingClass,psiMethod);
      methodRefText=(isReceiverType ? getClassReferenceName(containingClass) : qualifierExpression.getText()) + "::" + ((PsiMethodCallExpression)element).getTypeArgumentList().getText()+ methodReferenceName;
    }
 else {
      methodRefText=(psiMethod.hasModifierProperty(PsiModifier.STATIC) ? getClassReferenceName(containingClass) : "this") + "::" + methodReferenceName;
    }
  }
 else   if (element instanceof PsiNewExpression) {
    final PsiMethod constructor=((PsiNewExpression)element).resolveConstructor();
    PsiClass containingClass=null;
    if (constructor != null) {
      containingClass=constructor.getContainingClass();
      LOG.assertTrue(containingClass != null);
    }
 else {
      final PsiJavaCodeReferenceElement classReference=((PsiNewExpression)element).getClassOrAnonymousClassReference();
      if (classReference != null) {
        final JavaResolveResult resolve=classReference.advancedResolve(false);
        final PsiElement resolveElement=resolve.getElement();
        if (resolveElement instanceof PsiClass) {
          containingClass=(PsiClass)resolveElement;
        }
      }
    }
    if (containingClass != null) {
      methodRefText=getClassReferenceName(containingClass) + "::new";
    }
  }
  return methodRefText;
}
