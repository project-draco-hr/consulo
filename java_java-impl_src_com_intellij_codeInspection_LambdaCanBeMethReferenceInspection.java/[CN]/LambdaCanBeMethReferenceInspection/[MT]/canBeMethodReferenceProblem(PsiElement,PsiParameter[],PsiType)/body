{
  PsiCallExpression methodCall=null;
  if (body instanceof PsiCallExpression) {
    methodCall=(PsiCallExpression)body;
  }
 else   if (body instanceof PsiCodeBlock) {
    final PsiStatement[] statements=((PsiCodeBlock)body).getStatements();
    if (statements.length == 1) {
      if (statements[0] instanceof PsiReturnStatement) {
        final PsiExpression returnValue=((PsiReturnStatement)statements[0]).getReturnValue();
        if (returnValue instanceof PsiCallExpression) {
          methodCall=(PsiCallExpression)returnValue;
        }
      }
 else       if (statements[0] instanceof PsiExpressionStatement) {
        final PsiExpression expr=((PsiExpressionStatement)statements[0]).getExpression();
        if (expr instanceof PsiCallExpression) {
          methodCall=(PsiCallExpression)expr;
        }
      }
    }
  }
  if (methodCall != null) {
    final PsiExpressionList argumentList=methodCall.getArgumentList();
    if (argumentList != null) {
      final PsiExpression[] expressions=argumentList.getExpressions();
      final PsiMethod psiMethod=methodCall.resolveMethod();
      final PsiClass containingClass;
      boolean isConstructor;
      if (psiMethod == null) {
        isConstructor=true;
        if (!(methodCall instanceof PsiNewExpression))         return null;
        if (((PsiNewExpression)methodCall).getAnonymousClass() != null)         return null;
        final PsiJavaCodeReferenceElement classReference=((PsiNewExpression)methodCall).getClassOrAnonymousClassReference();
        if (classReference == null)         return null;
        containingClass=(PsiClass)classReference.resolve();
      }
 else {
        containingClass=psiMethod.getContainingClass();
        isConstructor=psiMethod.isConstructor();
      }
      if (containingClass == null)       return null;
      boolean isReceiverType=PsiMethodReferenceUtil.isReceiverType(functionalInterfaceType,containingClass,psiMethod);
      final boolean staticOrValidConstructorRef;
      if (isConstructor) {
        staticOrValidConstructorRef=(containingClass.getContainingClass() == null || containingClass.hasModifierProperty(PsiModifier.STATIC));
      }
 else {
        staticOrValidConstructorRef=psiMethod.hasModifierProperty(PsiModifier.STATIC);
      }
      final int offset=isReceiverType && !staticOrValidConstructorRef ? 1 : 0;
      if (parameters.length != expressions.length + offset)       return null;
      for (int i=0; i < expressions.length; i++) {
        PsiExpression psiExpression=expressions[i];
        if (!(psiExpression instanceof PsiReferenceExpression))         return null;
        final PsiElement resolve=((PsiReferenceExpression)psiExpression).resolve();
        if (resolve == null)         return null;
        if (parameters[i + offset] != resolve)         return null;
      }
      final PsiExpression qualifierExpression;
      if (methodCall instanceof PsiMethodCallExpression) {
        qualifierExpression=((PsiMethodCallExpression)methodCall).getMethodExpression().getQualifierExpression();
      }
 else       if (methodCall instanceof PsiNewExpression) {
        qualifierExpression=((PsiNewExpression)methodCall).getQualifier();
      }
 else {
        qualifierExpression=null;
      }
      if (offset > 0) {
        if (!(qualifierExpression instanceof PsiReferenceExpression) || ((PsiReferenceExpression)qualifierExpression).resolve() != parameters[0]) {
          return null;
        }
      }
 else       if (qualifierExpression != null) {
        final Ref<Boolean> usedInQualifier=new Ref<Boolean>(false);
        qualifierExpression.accept(new JavaRecursiveElementWalkingVisitor(){
          @Override public void visitReferenceExpression(          PsiReferenceExpression expression){
            final PsiElement resolve=expression.resolve();
            if (resolve instanceof PsiParameter && ArrayUtilRt.find(parameters,resolve) > -1) {
              usedInQualifier.set(true);
              return;
            }
            super.visitReferenceExpression(expression);
          }
          @Override public void visitMethodCallExpression(          PsiMethodCallExpression expression){
            usedInQualifier.set(true);
            super.visitMethodCallExpression(expression);
          }
        }
);
        if (usedInQualifier.get())         return null;
      }
      return methodCall;
    }
 else     if (methodCall instanceof PsiNewExpression) {
      final PsiExpression[] dimensions=((PsiNewExpression)methodCall).getArrayDimensions();
      if (dimensions.length > 0) {
        return methodCall;
      }
    }
  }
  return null;
}
