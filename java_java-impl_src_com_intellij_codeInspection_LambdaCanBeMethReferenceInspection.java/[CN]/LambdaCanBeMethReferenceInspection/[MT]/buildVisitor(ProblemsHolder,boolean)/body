{
  return new JavaElementVisitor(){
    @Override public void visitLambdaExpression(    PsiLambdaExpression expression){
      super.visitLambdaExpression(expression);
      if (PsiUtil.getLanguageLevel(expression).isAtLeast(LanguageLevel.JDK_1_8)) {
        final PsiElement body=expression.getBody();
        PsiCallExpression methodCall=null;
        if (body instanceof PsiCallExpression) {
          methodCall=(PsiCallExpression)body;
        }
 else         if (body instanceof PsiCodeBlock) {
          final PsiStatement[] statements=((PsiCodeBlock)body).getStatements();
          if (statements.length == 1) {
            if (statements[0] instanceof PsiReturnStatement) {
              final PsiExpression returnValue=((PsiReturnStatement)statements[0]).getReturnValue();
              if (returnValue instanceof PsiCallExpression) {
                methodCall=(PsiCallExpression)returnValue;
              }
            }
 else             if (statements[0] instanceof PsiExpressionStatement) {
              final PsiExpression expr=((PsiExpressionStatement)statements[0]).getExpression();
              if (expr instanceof PsiCallExpression) {
                methodCall=(PsiCallExpression)expr;
              }
            }
          }
        }
        if (methodCall != null) {
          final PsiExpressionList argumentList=methodCall.getArgumentList();
          if (argumentList != null) {
            final PsiParameter[] parameters=expression.getParameterList().getParameters();
            final PsiExpression[] expressions=argumentList.getExpressions();
            final PsiMethod psiMethod=methodCall.resolveMethod();
            final PsiClass containingClass;
            boolean isConstructor;
            if (psiMethod == null) {
              isConstructor=true;
              if (!(methodCall instanceof PsiNewExpression))               return;
              final PsiJavaCodeReferenceElement classReference=((PsiNewExpression)methodCall).getClassOrAnonymousClassReference();
              if (classReference == null)               return;
              containingClass=(PsiClass)classReference.resolve();
            }
 else {
              containingClass=psiMethod.getContainingClass();
              isConstructor=psiMethod.isConstructor();
            }
            if (containingClass == null)             return;
            boolean isReceiverType=parameters.length > 0 && LambdaUtil.isReceiverType(parameters[0].getType(),containingClass,PsiUtil.resolveGenericsClassInType(parameters[0].getType()).getSubstitutor());
            final boolean staticOrValidConstructorRef;
            if (isConstructor) {
              staticOrValidConstructorRef=(containingClass.getContainingClass() == null || containingClass.hasModifierProperty(PsiModifier.STATIC));
            }
 else {
              staticOrValidConstructorRef=psiMethod.hasModifierProperty(PsiModifier.STATIC);
            }
            final int offset=isReceiverType && !staticOrValidConstructorRef ? 1 : 0;
            if (parameters.length != expressions.length + offset)             return;
            for (int i=0; i < expressions.length; i++) {
              PsiExpression psiExpression=expressions[i];
              if (!(psiExpression instanceof PsiReferenceExpression))               return;
              final PsiElement resolve=((PsiReferenceExpression)psiExpression).resolve();
              if (resolve == null)               return;
              if (parameters[i + offset] != resolve)               return;
            }
            if (offset > 0) {
              final PsiExpression qualifierExpression;
              if (methodCall instanceof PsiMethodCallExpression) {
                qualifierExpression=((PsiMethodCallExpression)methodCall).getMethodExpression().getQualifierExpression();
              }
 else               if (methodCall instanceof PsiNewExpression) {
                qualifierExpression=((PsiNewExpression)methodCall).getQualifier();
              }
 else {
                qualifierExpression=null;
              }
              if (!(qualifierExpression instanceof PsiReferenceExpression) || ((PsiReferenceExpression)qualifierExpression).resolve() != parameters[0])               return;
            }
            holder.registerProblem(methodCall,"Can be replaced with method reference",ProblemHighlightType.GENERIC_ERROR_OR_WARNING,new ReplaceWithMethodRefFix());
          }
        }
      }
    }
  }
;
}
