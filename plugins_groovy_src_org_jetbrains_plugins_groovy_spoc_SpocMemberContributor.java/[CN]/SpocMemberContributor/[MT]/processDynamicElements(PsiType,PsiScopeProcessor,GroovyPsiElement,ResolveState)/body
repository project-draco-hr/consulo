{
  if (!(qualifierType instanceof PsiClassType))   return;
  ClassHint classHint=processor.getHint(ClassHint.KEY);
  if (classHint != null && !classHint.shouldProcess(ClassHint.ResolveKind.PROPERTY))   return;
  PsiClass aClass=((PsiClassType)qualifierType).resolve();
  if (!(aClass instanceof GrClassDefinition))   return;
  if (!GroovyPsiManager.isInheritorCached(aClass,SpocUtils.SPEC_CLASS_NAME))   return;
  GrMethod method=PsiTreeUtil.getParentOfType(place,GrMethod.class);
  if (method == null)   return;
  if (aClass != method.getContainingClass())   return;
  PsiFile containingFile=aClass.getContainingFile();
  if (containingFile != containingFile.getOriginalFile()) {
    PsiElement originalPlace=containingFile.getOriginalFile().findElementAt(place.getTextOffset());
    method=PsiTreeUtil.getParentOfType(originalPlace,GrMethod.class);
    if (method == null)     return;
  }
  Map<String,SpocVariableDescriptor> cachedValue=SpocUtils.getVariableMap(method);
  String nameHint=ResolveUtil.getNameHint(processor);
  if (nameHint == null) {
    for (    SpocVariableDescriptor spocVar : cachedValue.values()) {
      if (!processor.execute(spocVar.getVariable(),state))       return;
    }
  }
 else {
    SpocVariableDescriptor spocVar=cachedValue.get(nameHint);
    if (spocVar != null && spocVar.getNavigationElement() != place) {
      if (!processor.execute(spocVar.getVariable(),state))       return;
    }
  }
}
