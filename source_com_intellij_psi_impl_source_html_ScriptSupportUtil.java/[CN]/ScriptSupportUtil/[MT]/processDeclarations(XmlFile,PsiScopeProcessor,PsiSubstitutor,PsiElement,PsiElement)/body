{
  XmlTag[] myCachedScriptTags=element.getUserData(CachedScriptTagsKey);
  if (myCachedScriptTags == null) {
    final List<XmlTag> scriptTags=new ArrayList<XmlTag>();
    final XmlDocument document=HtmlUtil.getRealXmlDocument(element.getDocument());
    if (document != null) {
      XmlUtil.processXmlElements(document,new PsiElementProcessor(){
        public boolean execute(        final PsiElement element){
          if (element instanceof XmlTag) {
            final XmlTag tag=(XmlTag)element;
            if (SCRIPT_TAG.equalsIgnoreCase(tag.getName())) {
              final XmlElementDescriptor descriptor=tag.getDescriptor();
              if (descriptor != null && SCRIPT_TAG.equals(descriptor.getName())) {
                scriptTags.add(tag);
              }
            }
          }
          return true;
        }
      }
,true);
    }
    myCachedScriptTags=scriptTags.toArray(new XmlTag[scriptTags.size()]);
    element.putUserData(CachedScriptTagsKey,myCachedScriptTags);
  }
  if (ProcessingDeclarationsFlag.get() != null)   return true;
  try {
    ProcessingDeclarationsFlag.set("");
    for (    XmlTag tag : myCachedScriptTags) {
      final XmlTagChild[] children=tag.getValue().getChildren();
      for (      XmlTagChild child : children) {
        if (!child.processDeclarations(processor,substitutor,null,place))         return false;
      }
      if (tag.getAttributeValue("src") != null) {
        final XmlAttribute attribute=tag.getAttribute("src",null);
        if (attribute != null) {
          final XmlAttributeValue valueElement=attribute.getValueElement();
          if (valueElement != null) {
            final PsiReference[] references=valueElement.getReferences();
            if (references.length > 0) {
              final PsiElement psiElement=references[references.length - 1].resolve();
              if (psiElement instanceof PsiFile && psiElement.isValid()) {
                if (!psiElement.processDeclarations(processor,substitutor,null,place))                 return false;
              }
            }
          }
        }
      }
    }
  }
  finally {
    ProcessingDeclarationsFlag.set(null);
  }
  return true;
}
