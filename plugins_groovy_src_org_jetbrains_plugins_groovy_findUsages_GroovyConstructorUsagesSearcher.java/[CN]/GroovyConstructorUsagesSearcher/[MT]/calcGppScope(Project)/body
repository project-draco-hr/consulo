{
  final GlobalSearchScope allScope=GlobalSearchScope.allScope(project);
  final GlobalSearchScope maximal=GlobalSearchScope.getScopeRestrictedByFileTypes(allScope,GroovyFileType.GROOVY_FILE_TYPE);
  GlobalSearchScope gppExtensions=new DelegatingGlobalSearchScope(maximal,"groovy.gpp"){
    @Override public boolean contains(    VirtualFile file){
      return super.contains(file) && GppTypeConverter.isGppExtension(file.getExtension());
    }
  }
;
  final PsiClass typed=JavaPsiFacade.getInstance(project).findClass(GppTypeConverter.GROOVY_LANG_TYPED,allScope);
  if (typed != null) {
    final Set<VirtualFile> files=new HashSet<VirtualFile>();
    AnnotatedElementsSearch.searchElements(typed,maximal,PsiModifierListOwner.class).forEach(new Processor<PsiModifierListOwner>(){
      @Override public boolean process(      PsiModifierListOwner occurrence){
        ContainerUtil.addIfNotNull(occurrence.getContainingFile().getVirtualFile(),files);
        return true;
      }
    }
);
    GlobalSearchScope withTypedAnno=GlobalSearchScopes.filesScope(project,files);
    return withTypedAnno.union(gppExtensions);
  }
  return gppExtensions;
}
