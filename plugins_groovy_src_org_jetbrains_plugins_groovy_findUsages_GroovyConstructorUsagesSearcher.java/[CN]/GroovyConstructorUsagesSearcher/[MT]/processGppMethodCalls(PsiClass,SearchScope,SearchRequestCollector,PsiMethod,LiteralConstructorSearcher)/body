{
  final SearchScope gppScope=getGppScope(targetClass.getProject()).intersectWith(scope);
  final ReadActionProcessor<PsiReference> gppCallProcessor=new ReadActionProcessor<PsiReference>(){
    @Override public boolean processInReadAction(    PsiReference psiReference){
      if (psiReference instanceof GrReferenceElement) {
        final PsiElement parent=((GrReferenceElement)psiReference).getParent();
        if (parent instanceof GrCall) {
          final GrArgumentList argList=((GrCall)parent).getArgumentList();
          if (argList != null) {
            boolean checkedTypedContext=false;
            for (            GrExpression argument : argList.getExpressionArguments()) {
              if (argument instanceof GrListOrMap) {
                if (!checkedTypedContext) {
                  if (!GppTypeConverter.hasTypedContext(parent)) {
                    return true;
                  }
                  checkedTypedContext=true;
                }
                for (                PsiType psiType : GroovyExpectedTypesProvider.getDefaultExpectedTypes(argument)) {
                  if (psiType instanceof PsiClassType && targetClass.getManager().areElementsEquivalent(targetClass,((PsiClassType)psiType).resolve()) && !literalProcessor.processLiteral((GrListOrMap)argument,(PsiClassType)psiType)) {
                    return false;
                  }
                }
              }
            }
          }
        }
      }
      return true;
    }
  }
;
  if (currentTarget.isConstructor()) {
    processConstructorUsages(currentTarget,gppScope,gppCallProcessor,originalCollector,false,false);
  }
 else {
    MethodReferencesSearch.searchOptimized(currentTarget,gppScope,true,originalCollector,gppCallProcessor);
  }
}
