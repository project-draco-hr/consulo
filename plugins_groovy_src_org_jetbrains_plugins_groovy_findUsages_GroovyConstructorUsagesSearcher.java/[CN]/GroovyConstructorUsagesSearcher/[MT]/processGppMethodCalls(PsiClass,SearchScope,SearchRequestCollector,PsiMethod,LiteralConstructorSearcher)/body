{
  final SearchScope gppScope=getGppScope(targetClass.getProject()).intersectWith(scope);
  final ReadActionProcessor<PsiReference> gppCallProcessor=new ReadActionProcessor<PsiReference>(){
    @Nullable private GrExpression[] getCallArguments(    PsiReference psiReference){
      if (psiReference instanceof GrReferenceElement) {
        final PsiElement parent=((GrReferenceElement)psiReference).getParent();
        if (parent instanceof GrCall) {
          final GrArgumentList argList=((GrCall)parent).getArgumentList();
          if (argList != null) {
            return argList.getExpressionArguments();
          }
        }
      }
 else       if (psiReference instanceof LiteralConstructorReference) {
        return ((LiteralConstructorReference)psiReference).getCallArguments();
      }
      return null;
    }
    @Override public boolean processInReadAction(    PsiReference psiReference){
      final GrExpression[] arguments=getCallArguments(psiReference);
      if (arguments == null) {
        return true;
      }
      boolean checkedTypedContext=false;
      for (      GrExpression argument : arguments) {
        if (argument instanceof GrListOrMap) {
          if (!checkedTypedContext) {
            if (!GppTypeConverter.hasTypedContext(psiReference.getElement())) {
              return true;
            }
            checkedTypedContext=true;
          }
          if (!literalProcessor.processLiteral((GrListOrMap)argument,true)) {
            return false;
          }
        }
      }
      return true;
    }
  }
;
  if (currentTarget.isConstructor()) {
    processConstructorUsages(currentTarget,gppScope,gppCallProcessor,originalCollector,true,false);
  }
 else {
    MethodReferencesSearch.searchOptimized(currentTarget,gppScope,true,originalCollector,gppCallProcessor);
  }
}
