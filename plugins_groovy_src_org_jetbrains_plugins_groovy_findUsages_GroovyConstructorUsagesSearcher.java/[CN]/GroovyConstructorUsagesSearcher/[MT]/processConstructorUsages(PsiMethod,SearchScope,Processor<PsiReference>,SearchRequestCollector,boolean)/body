{
  if (!constructor.isConstructor())   return;
  SearchScope onlyGroovy=searchScope;
  if (onlyGroovy instanceof GlobalSearchScope) {
    onlyGroovy=GlobalSearchScope.getScopeRestrictedByFileTypes((GlobalSearchScope)onlyGroovy,GroovyFileType.GROOVY_FILE_TYPE);
  }
  final PsiClass clazz=constructor.getContainingClass();
  if (clazz == null)   return;
  if (clazz.isEnum() && clazz instanceof GroovyPsiElement) {
    for (    PsiField field : clazz.getFields()) {
      if (field instanceof GrEnumConstant) {
        final PsiReference ref=field.getReference();
        if (ref != null && ref.isReferenceTo(constructor)) {
          if (!consumer.process(ref))           return;
        }
      }
    }
  }
  final Set<PsiMethod> processedMethods=new ConcurrentHashSet<PsiMethod>();
  ReferencesSearch.searchOptimized(clazz,searchScope,true,collector,true,new PairProcessor<PsiReference,SearchRequestCollector>(){
    @Override public boolean process(    PsiReference ref,    SearchRequestCollector collector){
      final PsiElement element=ref.getElement();
      if (element instanceof GrCodeReferenceElement) {
        if (!processGroovyConstructorUsages((GrCodeReferenceElement)element,constructor,consumer,ref,!searchGppCalls)) {
          return false;
        }
      }
      if (searchGppCalls) {
        final PsiMethod method=getMethodToSearchForCallsWithLiteralArguments(element,clazz);
        if (method != null && processedMethods.add(method)) {
          processGppMethodCalls(clazz,constructor,consumer,searchScope,collector,method);
        }
      }
      return true;
    }
  }
);
  if (clazz instanceof GrTypeDefinition) {
    if (!processConstructors(constructor,consumer,clazz,true)) {
      return;
    }
  }
  DirectClassInheritorsSearch.search(clazz,onlyGroovy).forEach(new Processor<PsiClass>(){
    public boolean process(    PsiClass inheritor){
      if (inheritor instanceof GrTypeDefinition) {
        if (!processConstructors(constructor,consumer,inheritor,false))         return false;
      }
      return true;
    }
  }
);
}
