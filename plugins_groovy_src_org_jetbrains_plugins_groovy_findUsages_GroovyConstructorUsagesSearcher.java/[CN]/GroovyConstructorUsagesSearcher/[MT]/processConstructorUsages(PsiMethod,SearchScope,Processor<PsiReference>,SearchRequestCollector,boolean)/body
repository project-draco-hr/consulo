{
  if (!constructor.isConstructor())   return;
  SearchScope onlyGroovy=searchScope;
  if (onlyGroovy instanceof GlobalSearchScope) {
    onlyGroovy=GlobalSearchScope.getScopeRestrictedByFileTypes((GlobalSearchScope)onlyGroovy,GroovyFileType.GROOVY_FILE_TYPE);
  }
  final PsiClass clazz=constructor.getContainingClass();
  if (clazz == null)   return;
  if (clazz.isEnum() && clazz instanceof GroovyPsiElement) {
    for (    PsiField field : clazz.getFields()) {
      if (field instanceof GrEnumConstant) {
        final PsiReference ref=field.getReference();
        if (ref != null && ref.isReferenceTo(constructor)) {
          if (!consumer.process(ref))           return;
        }
      }
    }
  }
  final LiteralConstructorSearcher literalProcessor=new LiteralConstructorSearcher(constructor,consumer);
  final Processor<GrNewExpression> newExpressionProcessor=new Processor<GrNewExpression>(){
    @Override public boolean process(    GrNewExpression grNewExpression){
      final PsiMethod resolvedConstructor=grNewExpression.resolveConstructor();
      if (constructor.getManager().areElementsEquivalent(resolvedConstructor,constructor)) {
        return consumer.process(grNewExpression.getReferenceElement());
      }
      return true;
    }
  }
;
  processGroovyClassUsages(clazz,searchScope,collector,searchGppCalls,newExpressionProcessor,literalProcessor);
  if (clazz instanceof GrTypeDefinition) {
    if (!processConstructors(constructor,consumer,clazz,true)) {
      return;
    }
  }
  DirectClassInheritorsSearch.search(clazz,onlyGroovy).forEach(new ReadActionProcessor<PsiClass>(){
    @Override public boolean processInReadAction(    PsiClass inheritor){
      if (inheritor instanceof GrTypeDefinition) {
        if (!processConstructors(constructor,consumer,inheritor,false))         return false;
      }
      return true;
    }
  }
);
}
