{
  State spec=getStateSpec(component);
  final String name=spec.name();
  ComponentRoamingManager.getInstance().setRoamingType(name,spec.roamingType());
  doAddComponent(name,component);
  if (optimizeTestLoading())   return name;
  Class<T> stateClass=getComponentStateClass(component);
  T state=null;
  final StateStorage defaultsStorage=getDefaultsStorage();
  if (defaultsStorage != null) {
    state=defaultsStorage.getState(component,name,stateClass,null);
  }
  Storage[] storageSpecs=getComponentStorageSpecs(component,StateStorageOperation.READ);
  for (  Storage storageSpec : storageSpecs) {
    StateStorage stateStorage=getStateStorageManager().getStateStorage(storageSpec);
    if (stateStorage != null && stateStorage.hasState(component,name,stateClass,reloadData)) {
      state=stateStorage.getState(component,name,stateClass,state);
    }
  }
  if (state != null) {
    component.loadState(state);
  }
  validateUnusedMacros(name,true);
  return name;
}
