{
  final Class persistentStateComponentClass=PersistentStateComponent.class;
  Class componentClass=persistentStateComponent.getClass();
  nextSuperClass:   while (true) {
    final Class[] interfaces=ReflectionCache.getInterfaces(componentClass);
    for (    Class anInterface : interfaces) {
      if (anInterface.equals(persistentStateComponentClass)) {
        break nextSuperClass;
      }
    }
    componentClass=componentClass.getSuperclass();
  }
  final Type type=ReflectionUtil.resolveVariable(persistentStateComponentClass.getTypeParameters()[0],componentClass);
  return (Class<T>)ReflectionUtil.getRawType(type);
}
