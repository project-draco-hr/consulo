{
  PsiShortNamesCache cache=PsiShortNamesCache.getInstance(myMethodCall.getProject());
  GrMethodCall element=myMethodCall.getElement();
  LOG.assertTrue(element != null);
  GrReferenceExpression reference=getMethodExpression(element);
  LOG.assertTrue(reference != null);
  GrArgumentList argumentList=element.getArgumentList();
  String name=reference.getReferenceName();
  ArrayList<PsiMethod> list=new ArrayList<PsiMethod>();
  if (name == null)   return list;
  GlobalSearchScope scope=element.getResolveScope();
  PsiMethod[] methods=cache.getMethodsByNameIfNotMoreThan(name,scope,20);
  List<PsiMethod> applicableList=new ArrayList<PsiMethod>();
  for (  PsiMethod method : methods) {
    ProgressManager.checkCanceled();
    PsiClass aClass=method.getContainingClass();
    if (aClass != null && JavaCompletionUtil.isInExcludedPackage(aClass))     continue;
    if (!method.hasModifierProperty(PsiModifier.STATIC))     continue;
    PsiFile file=method.getContainingFile();
    if (file instanceof PsiClassOwner && ((PsiClassOwner)file).getPackageName().length() != 0 && PsiUtil.isAccessible(element,method)) {
      list.add(method);
      if (PsiUtil.isApplicable(PsiUtil.getArgumentTypes(element,true),method,PsiSubstitutor.EMPTY,false,element,false)) {
        applicableList.add(method);
      }
    }
  }
  List<PsiMethod> result=applicableList.isEmpty() ? list : applicableList;
  Collections.sort(result,new PsiProximityComparator(argumentList));
  return result;
}
