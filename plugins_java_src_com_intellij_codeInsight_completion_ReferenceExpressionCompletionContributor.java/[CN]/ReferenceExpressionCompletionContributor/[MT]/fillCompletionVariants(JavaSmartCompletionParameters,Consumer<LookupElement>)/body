{
  final PsiElement element=parameters.getPosition();
  if (JavaSmartCompletionContributor.INSIDE_TYPECAST_EXPRESSION.accepts(element))   return null;
  if (JavaCompletionData.isAfterPrimitiveOrArrayType(element))   return null;
  final int offset=parameters.getParameters().getOffset();
  final PsiReference reference=element.getContainingFile().findReferenceAt(offset);
  if (reference != null) {
    final ElementFilter filter=getReferenceFilter(element,false);
    for (    final LookupElement item : completeFinalReference(element,reference,filter,parameters)) {
      result.consume(item);
    }
    final boolean secondTime=parameters.getParameters().getInvocationCount() >= 2;
    final Set<LookupElement> base=JavaSmartCompletionContributor.completeReference(element,reference,filter,false,true,parameters.getParameters(),PrefixMatcher.ALWAYS_TRUE);
    for (    final LookupElement item : new LinkedHashSet<LookupElement>(base)) {
      ExpressionLookupItem access=getSingleArrayElementAccess(element,item);
      if (access != null) {
        base.add(access);
        PsiType type=access.getType();
        if (type != null && parameters.getExpectedType().isAssignableFrom(type)) {
          result.consume(access);
        }
      }
    }
    if (secondTime) {
      return new Runnable(){
        @Override public void run(){
          for (          final LookupElement item : base) {
            addSecondCompletionVariants(element,reference,item,parameters,result);
          }
          if (!psiElement().afterLeaf(".").accepts(element)) {
            BasicExpressionCompletionContributor.processDataflowExpressionTypes(element,null,TRUE_MATCHER,new Consumer<LookupElement>(){
              @Override public void consume(              LookupElement baseItem){
                addSecondCompletionVariants(element,reference,baseItem,parameters,result);
              }
            }
);
          }
        }
      }
;
    }
  }
  return null;
}
