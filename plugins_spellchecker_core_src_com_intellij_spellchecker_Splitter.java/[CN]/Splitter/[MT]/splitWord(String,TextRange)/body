{
  if (range.getLength() <= 1) {
    return null;
  }
  List<CheckArea> results=new ArrayList<CheckArea>();
  String word=text.substring(range.getStartOffset(),range.getEndOffset());
  String[] words=NameUtil.splitNameIntoWords(word);
  if (words == null) {
    return results;
  }
  if (words.length == 1) {
    Matcher matcher=WORD.matcher(words[0]);
    Matcher specialMatcher=SPECIAL.matcher(words[0]);
    if (specialMatcher.find()) {
      TextRange found=matcherRange(range,specialMatcher);
      results.add(new CheckArea(text,found,true));
      return results;
    }
 else     if (matcher.find()) {
      TextRange found=matcherRange(range,matcher);
      results.add(new CheckArea(text,found));
      return results;
    }
  }
  boolean isCapitalized=Strings.isCapitalized(words[0]);
  boolean containsShortWord=containsShortWord(words);
  if (isCapitalized && containsShortWord) {
    results.add(new CheckArea(text,range,true));
    return results;
  }
  boolean isAllWordsAreUpperCased=isAllWordsAreUpperCased(words);
  int index=0;
  for (  String s : words) {
    int start=word.indexOf(s,index);
    int end=start + s.length();
    boolean isUpperCase=Strings.isUpperCase(s);
    if (!(isUpperCase && !isAllWordsAreUpperCased) && !isKeyword(s)) {
      Matcher matcher=WORD.matcher(s);
      if (matcher.find()) {
        TextRange found=matcherRange(subRange(range,start,end),matcher);
        results.add(new CheckArea(text,found));
      }
    }
 else {
      Matcher matcher=WORD.matcher(s);
      if (matcher.find()) {
        TextRange found=matcherRange(subRange(range,start,end),matcher);
        results.add(new CheckArea(text,found,true));
      }
    }
    index=end;
  }
  return results;
}
