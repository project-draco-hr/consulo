{
  myMavenProjectsListener=new MavenProjectsManager.Listener(){
    boolean isActivated;
    public void activate(){
      for (      MavenProjectModel each : myProjectsManager.getProjects()) {
        myFileToNode.put(each.getFile(),new PomNode(each));
      }
      updateFromRoot(true,true);
      isActivated=true;
    }
    public void setIgnored(    VirtualFile file,    boolean on){
      if (!isActivated)       return;
      final PomNode pomNode=myFileToNode.get(file);
      if (pomNode != null) {
        pomNode.setIgnored(on);
      }
    }
    public void profilesChanged(    List<String> profiles){
      if (!isActivated)       return;
      myRoot.setActiveProfiles(profiles);
      myTree.repaint();
    }
    public void projectAdded(    final MavenProjectModel n){
      if (!isActivated)       return;
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          if (myProject.isDisposed())           return;
          final PomNode newNode=new PomNode(n);
          myFileToNode.put(n.getFile(),newNode);
          myRoot.addToStructure(newNode);
          myRoot.updateProfileNodes();
          updateFromRoot(true,true);
          myTree.repaint();
        }
      }
);
    }
    public void projectUpdated(    final MavenProjectModel n){
      if (!isActivated)       return;
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          if (myProject.isDisposed())           return;
          final PomNode pomNode=myFileToNode.get(n.getFile());
          if (pomNode != null) {
            pomNode.onFileUpdate();
          }
 else {
            projectAdded(n);
          }
          myRoot.updateProfileNodes();
          myTree.repaint();
        }
      }
);
    }
    public void projectRemoved(    final MavenProjectModel n){
      if (!isActivated)       return;
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          if (myProject.isDisposed())           return;
          final PomNode pomNode=myFileToNode.get(n.getFile());
          if (pomNode != null) {
            myFileToNode.remove(n.getFile());
            pomNode.removeFromParent();
          }
          myRoot.updateProfileNodes();
          myTree.repaint();
        }
      }
);
    }
  }
;
  myMavenEventsListener=new MavenEventsHandler.Listener(){
    public void updateShortcuts(    @Nullable String actionId){
      for (      PomNode pomNode : myFileToNode.values()) {
        pomNode.updateShortcuts(actionId);
      }
    }
  }
;
  myProjectsManager.addListener(myMavenProjectsListener);
  myEventsHandler.addListener(myMavenEventsListener);
  myEventsHandler.installTaskSelector(new MavenEventsHandler.TaskSelector(){
    SelectMavenGoalDialog dialog;
    public boolean select(    final Project project,    @Nullable final String pomPath,    @Nullable final String goal,    @NotNull final String title){
      dialog=new SelectMavenGoalDialog(project,pomPath,goal,title);
      dialog.show();
      return dialog.isOK();
    }
    public String getSelectedPomPath(){
      return dialog.getSelectedPomPath();
    }
    public String getSelectedGoal(){
      return dialog.getSelectedGoal();
    }
  }
);
}
