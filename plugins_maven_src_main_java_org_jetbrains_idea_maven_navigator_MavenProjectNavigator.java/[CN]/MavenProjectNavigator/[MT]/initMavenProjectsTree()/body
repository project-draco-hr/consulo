{
  myTree=new SimpleTree(){
    private JLabel myLabel=new JLabel(ProjectBundle.message("maven.navigator.nothing.to.display",formatHtmlImage(ADD_ICON_URL),formatHtmlImage(SYNC_ICON_URL)));
    @Override protected void paintComponent(    Graphics g){
      super.paintComponent(g);
      if (myProjectsManager.isMavenizedProject())       return;
      myLabel.setFont(getFont());
      myLabel.setBackground(getBackground());
      myLabel.setForeground(getForeground());
      Rectangle bounds=getBounds();
      Dimension size=myLabel.getPreferredSize();
      myLabel.setBounds(0,0,size.width,size.height);
      int x=(bounds.width - size.width) / 2;
      Graphics g2=g.create(bounds.x + x,bounds.y + 20,bounds.width,bounds.height);
      try {
        myLabel.paint(g2);
      }
  finally {
        g2.dispose();
      }
    }
  }
;
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(true);
  myTree.getSelectionModel().setSelectionMode(TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION);
  myTreeBuilder=new SimpleTreeBuilder(myTree,(DefaultTreeModel)myTree.getModel(),this,null);
  myTreeBuilder.initRoot();
  Disposer.register(myProject,myTreeBuilder);
  IdeaAPIHelper.installCheckboxRenderer(myTree,new IdeaAPIHelper.CheckboxHandler(){
    public void toggle(    final TreePath treePath,    final InputEvent e){
      final SimpleNode node=myTree.getNodeFor(treePath);
      if (node != null) {
        node.handleDoubleClickOrEnter(myTree,e);
      }
    }
    public boolean isVisible(    final Object userObject){
      return userObject instanceof ProfileNode;
    }
    public boolean isSelected(    final Object userObject){
      return ((ProfileNode)userObject).isActive();
    }
  }
);
}
