{
  super(project,projectsManager,repository,eventsHandler);
  if (ApplicationManager.getApplication().isUnitTestMode())   return;
  isInitialized=true;
  tree=new SimpleTree(){
    private JLabel myLabel=new JLabel(ProjectBundle.message("maven.please.reimport"));
    @Override protected void paintComponent(    Graphics g){
      super.paintComponent(g);
      if (MavenProjectsManager.getInstance(project).isMavenProject())       return;
      myLabel.setFont(getFont());
      myLabel.setBackground(getBackground());
      myLabel.setForeground(getForeground());
      Rectangle bounds=getBounds();
      Dimension size=myLabel.getPreferredSize();
      myLabel.setBounds(0,0,size.width,size.height);
      int x=(bounds.width - size.width) / 2;
      Graphics g2=g.create(bounds.x + x,bounds.y + 20,bounds.width,bounds.height);
      try {
        myLabel.paint(g2);
      }
  finally {
        g2.dispose();
      }
    }
  }
;
  tree.setRootVisible(false);
  tree.setShowsRootHandles(true);
  tree.getSelectionModel().setSelectionMode(TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION);
  tree.addMouseMotionListener(new MouseMotionListener(){
    public void mouseDragged(    MouseEvent e){
    }
    public void mouseMoved(    MouseEvent e){
      TreePath p=tree.getPathForLocation(e.getX(),e.getY());
      if (p != null) {
        Object last=p.getLastPathComponent();
        Object object=((DefaultMutableTreeNode)last).getUserObject();
        if (object instanceof PomNode) {
          PomNode pomNode=(PomNode)object;
          List<String> problems=pomNode.getProjectNode().getProblems();
          if (problems.isEmpty()) {
            tree.setToolTipText(null);
          }
 else {
            String s=StringUtil.join(problems,"<br>");
            tree.setToolTipText("<html>" + s + "</html>");
          }
        }
      }
    }
  }
);
  treeBuilder=new SimpleTreeBuilder(tree,(DefaultTreeModel)tree.getModel(),this,null);
  treeBuilder.initRoot();
  Disposer.register(project,treeBuilder);
  myProjectsManager.addListener(new MavenProjectsManager.Listener(){
    public void activate(){
      for (      MavenProjectModel.Node each : myProjectsManager.getExistingProjects()) {
        fileToNode.put(each.getFile(),new PomNode(each));
      }
      updateFromRoot(true,true);
    }
    public void setIgnored(    VirtualFile file,    boolean on){
      final PomNode pomNode=fileToNode.get(file);
      if (pomNode != null) {
        pomNode.setIgnored(on);
      }
    }
    public void setProfiles(    VirtualFile file,    @NotNull Collection<String> profiles){
      final PomNode pomNode=fileToNode.get(file);
      if (pomNode != null) {
        pomNode.setProfiles(profiles);
      }
    }
  }
);
  myProjectsManager.getMavenProjectModel().addListener(new MavenProjectModel.Listener(){
    public void projectAdded(    final MavenProjectModel.Node n){
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          final PomNode newNode=new PomNode(n);
          fileToNode.put(n.getFile(),newNode);
          root.addToStructure(newNode);
          updateFromRoot(true,true);
          tree.repaint();
        }
      }
);
    }
    public void projectUpdated(    final MavenProjectModel.Node n){
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          final PomNode pomNode=fileToNode.get(n.getFile());
          if (pomNode != null) {
            pomNode.onFileUpdate();
          }
 else {
            projectAdded(n);
          }
          tree.repaint();
        }
      }
);
    }
    public void projectRemoved(    final MavenProjectModel.Node n){
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          final PomNode pomNode=fileToNode.get(n.getFile());
          if (pomNode != null) {
            fileToNode.remove(n.getFile());
            pomNode.removeFromParent();
            tree.repaint();
          }
        }
      }
);
    }
  }
);
  myEventsHandler.addListener(new MavenEventsHandler.Listener(){
    public void updateShortcuts(    @Nullable String actionId){
      for (      PomNode pomNode : fileToNode.values()) {
        pomNode.updateShortcuts(actionId);
      }
    }
  }
);
  myEventsHandler.installTaskSelector(new MavenEventsHandler.TaskSelector(){
    SelectMavenGoalDialog dialog;
    public boolean select(    final Project project,    @Nullable final String pomPath,    @Nullable final String goal,    @NotNull final String title){
      dialog=new SelectMavenGoalDialog(project,pomPath,goal,title);
      dialog.show();
      return dialog.isOK();
    }
    public String getSelectedPomPath(){
      return dialog.getSelectedPomPath();
    }
    public String getSelectedGoal(){
      return dialog.getSelectedGoal();
    }
  }
);
  IdeaAPIHelper.installCheckboxRenderer(tree,new IdeaAPIHelper.CheckboxHandler(){
    public void toggle(    final TreePath treePath,    final InputEvent e){
      final SimpleNode node=tree.getNodeFor(treePath);
      if (node != null) {
        node.handleDoubleClickOrEnter(tree,e);
      }
    }
    public boolean isVisible(    final Object userObject){
      return userObject instanceof ProfileNode;
    }
    public boolean isSelected(    final Object userObject){
      return ((ProfileNode)userObject).isActive();
    }
  }
);
}
