{
  super(project,projectsState,repository,eventsHandler);
  tree=new SimpleTree();
  tree.setRootVisible(false);
  tree.setShowsRootHandles(true);
  tree.getSelectionModel().setSelectionMode(TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION);
  treeBuilder=new SimpleTreeBuilder(tree,(DefaultTreeModel)tree.getModel(),this,null);
  treeBuilder.initRoot();
  Disposer.register(project,treeBuilder);
  myProjectsState.addListener(new MavenProjectsState.Listener(){
    public void activate(){
      MavenProjectNavigator.LOG.assertTrue(fileToNode.isEmpty());
      for (      VirtualFile file : myProjectsState.getFiles()) {
        fileToNode.put(file,new PomNode(file));
      }
      updateFromRoot(true,true);
    }
    public void projectAdded(    final VirtualFile file){
      final PomNode newNode=new PomNode(file);
      fileToNode.put(file,newNode);
      root.addToStructure(newNode);
      updateFromRoot(true,true);
    }
    public void projectUpdated(    VirtualFile file){
      final PomNode pomNode=fileToNode.get(file);
      if (pomNode != null) {
        pomNode.onFileUpdate();
      }
 else {
        projectAdded(file);
      }
    }
    public void projectRemoved(    VirtualFile file){
      final PomNode pomNode=fileToNode.get(file);
      if (pomNode != null) {
        fileToNode.remove(file);
        pomNode.removeFromParent();
      }
    }
    public void setIgnored(    VirtualFile file,    boolean on){
      final PomNode pomNode=fileToNode.get(file);
      if (pomNode != null) {
        pomNode.setIgnored(on);
      }
    }
    public void setProfiles(    VirtualFile file,    @NotNull Collection<String> profiles){
      final PomNode pomNode=fileToNode.get(file);
      if (pomNode != null) {
        pomNode.setProfiles(profiles);
      }
    }
    public void attachPlugins(    final VirtualFile file,    @NotNull final Collection<MavenId> plugins){
      final PomNode pomNode=fileToNode.get(file);
      if (pomNode != null) {
        pomNode.attachPlugins(plugins);
      }
    }
    public void detachPlugins(    final VirtualFile file,    @NotNull final Collection<MavenId> plugins){
      final PomNode pomNode=fileToNode.get(file);
      if (pomNode != null) {
        pomNode.detachPlugins(plugins);
      }
    }
  }
);
  myEventsHandler.addListener(new MavenEventsHandler.Listener(){
    public void updateShortcuts(    @Nullable String actionId){
      for (      PomNode pomNode : fileToNode.values()) {
        pomNode.updateShortcuts(actionId);
      }
    }
  }
);
  myEventsHandler.installTaskSelector(new MavenEventsHandler.TaskSelector(){
    SelectMavenGoalDialog dialog;
    public boolean select(    final Project project,    @Nullable final String pomPath,    @Nullable final String goal,    @NotNull final String title){
      dialog=new SelectMavenGoalDialog(project,pomPath,goal,title);
      dialog.show();
      return dialog.isOK();
    }
    public String getSelectedPomPath(){
      return dialog.getSelectedPomPath();
    }
    public String getSelectedGoal(){
      return dialog.getSelectedGoal();
    }
  }
);
  IdeaAPIHelper.installCheckboxRenderer(tree,new IdeaAPIHelper.CheckboxHandler(){
    public void toggle(    final TreePath treePath,    final InputEvent e){
      final SimpleNode node=tree.getNodeFor(treePath);
      if (node != null) {
        node.handleDoubleClickOrEnter(tree,e);
      }
    }
    public boolean isVisible(    final Object userObject){
      return userObject instanceof ProfileNode;
    }
    public boolean isSelected(    final Object userObject){
      return ((ProfileNode)userObject).isActive();
    }
  }
);
}
