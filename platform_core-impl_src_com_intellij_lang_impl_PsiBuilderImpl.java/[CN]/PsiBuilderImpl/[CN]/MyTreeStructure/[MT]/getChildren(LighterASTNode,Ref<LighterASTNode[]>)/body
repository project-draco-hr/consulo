{
  if (item instanceof LazyParseableToken) {
    final FlyweightCapableTreeStructure<LighterASTNode> tree=((LazyParseableToken)item).parseContents();
    final LighterASTNode root=tree.getRoot();
    return tree.getChildren(tree.prepareForGetChildren(root),into);
  }
  if (item instanceof Token || item instanceof ErrorItem)   return 0;
  StartMarker marker=(StartMarker)item;
  count=0;
  ProductionMarker child=marker.myFirstChild;
  int lexIndex=marker.myLexemeIndex;
  while (child != null) {
    lexIndex=insertLeaves(lexIndex,child.myLexemeIndex,marker.myBuilder);
    if (child instanceof StartMarker && ((StartMarker)child).myDoneMarker.myCollapse) {
      int lastIndex=((StartMarker)child).myDoneMarker.myLexemeIndex;
      insertLeaf(child.getTokenType(),marker.myBuilder,child.myLexemeIndex,lastIndex);
    }
 else {
      ensureCapacity();
      nodes[count++]=child;
    }
    if (child instanceof StartMarker) {
      lexIndex=((StartMarker)child).myDoneMarker.myLexemeIndex;
    }
    child=child.myNext;
  }
  insertLeaves(lexIndex,marker.myDoneMarker.myLexemeIndex,marker.myBuilder);
  into.set(nodes);
  nodes=null;
  return count;
}
