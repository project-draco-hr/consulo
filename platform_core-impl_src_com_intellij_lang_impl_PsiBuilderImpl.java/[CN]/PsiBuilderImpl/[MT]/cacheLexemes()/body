{
  int approxLexCount=Math.max(10,myText.length() / 5);
  myLexStarts=new int[approxLexCount];
  myLexTypes=new IElementType[approxLexCount];
  myLexer.start(myText);
  int i=0;
  int offset=0;
  while (true) {
    ProgressIndicatorProvider.checkCanceled();
    IElementType type=myLexer.getTokenType();
    if (type == null)     break;
    if (i >= myLexTypes.length - 1) {
      resizeLexemes(i * 3 / 2);
    }
    int tokenStart=myLexer.getTokenStart();
    if (tokenStart < offset) {
      final StringBuilder sb=new StringBuilder();
      final IElementType tokenType=myLexer.getTokenType();
      sb.append("Token sequence broken").append("\n  this: '").append(myLexer.getTokenText()).append("' (").append(tokenType).append(':').append(tokenType != null ? tokenType.getLanguage() : null).append(") ").append(tokenStart).append(":").append(myLexer.getTokenEnd());
      if (i > 0) {
        final int prevStart=myLexStarts[i - 1];
        sb.append("\n  prev: '").append(myText.subSequence(prevStart,offset)).append("' (").append(myLexTypes[i - 1]).append(':').append(myLexTypes[i - 1].getLanguage()).append(") ").append(prevStart).append(":").append(offset);
      }
      final int quoteStart=Math.max(tokenStart - 256,0);
      final int quoteEnd=Math.min(tokenStart + 256,myText.length());
      sb.append("\n  quote: [").append(quoteStart).append(':').append(quoteEnd).append("] '").append(myText.subSequence(quoteStart,quoteEnd)).append('\'');
      LOG.error(sb);
    }
    myLexStarts[i]=offset=tokenStart;
    myLexTypes[i]=type;
    i++;
    myLexer.advance();
  }
  myLexStarts[i]=myText.length();
  myLexemeCount=i;
}
