{
  final StartMarker rootMarker=prepareLightTree();
  final boolean isTooDeep=myFile != null && BlockSupport.isTooDeep(myFile.getOriginalFile());
  if (myOriginalTree != null && !isTooDeep) {
    DiffLog diffLog=merge(myOriginalTree,rootMarker);
    throw new BlockSupport.ReparsedSuccessfullyException(diffLog);
  }
  final ASTNode rootNode=createRootAST(rootMarker);
  bind(rootMarker,(CompositeElement)rootNode);
  if (isTooDeep && !(rootNode instanceof FileElement)) {
    final ASTNode childNode=rootNode.getFirstChildNode();
    childNode.putUserData(BlockSupport.TREE_DEPTH_LIMIT_EXCEEDED,Boolean.TRUE);
  }
  return rootNode;
}
