{
  final int start=myLexStarts[startMarker.myLexemeIndex];
  final int end=myLexStarts[startMarker.myDoneMarker.myLexemeIndex];
  final IElementType markerType=startMarker.myType;
  final TreeElement leaf=createLeaf(markerType,start,end);
  if (markerType instanceof ILazyParseableElementType && ((ILazyParseableElementType)markerType).reuseCollapsedTokens() && startMarker.myLexemeIndex < startMarker.myDoneMarker.myLexemeIndex) {
    final int length=startMarker.myDoneMarker.myLexemeIndex - startMarker.myLexemeIndex;
    final int[] relativeStarts=new int[length + 1];
    final IElementType[] types=new IElementType[length];
    for (int i=startMarker.myLexemeIndex; i < startMarker.myDoneMarker.myLexemeIndex; i++) {
      relativeStarts[i - startMarker.myLexemeIndex]=myLexStarts[i] - start;
      types[i - startMarker.myLexemeIndex]=myLexTypes[i];
    }
    relativeStarts[length]=end - start;
    leaf.putUserData(LAZY_PARSEABLE_TOKENS,new LazyParseableTokensCache(relativeStarts,types));
  }
  ast.rawAddChildrenWithoutNotifications(leaf);
  return startMarker.myDoneMarker.myLexemeIndex;
}
