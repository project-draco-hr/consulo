{
  return new Operation(){
    @Override public boolean willHandle(    DnDAwareTree tree){
      final int count=tree.getSelectionCount();
      if (count != 1) {
        return false;
      }
      final TreePath path=tree.getSelectionPath();
      if (path.getPathCount() > 2)       return true;
      return false;
    }
    @Override public String getCustomName(){
      return "New Note";
    }
    @Override public void handle(    final Project project,    final DnDAwareTree tree){
      final Object component=tree.getSelectionPath().getLastPathComponent();
      if (component instanceof DefaultMutableTreeNode) {
        final Object uo=((DefaultMutableTreeNode)component).getUserObject();
        if (uo instanceof FavoritesTreeNodeDescriptor) {
          final FavoritesManager favoritesManager=FavoritesManager.getInstance(project);
          final AbstractTreeNode treeNode=((FavoritesTreeNodeDescriptor)uo).getElement();
          final NoteNode node=new NoteNode("Test text",false);
          final NoteProjectNode noteNode=new NoteProjectNode(project,node,favoritesManager.getViewSettings());
          final Consumer<String> after=new Consumer<String>(){
            @Override public void consume(            String text){
              node.setText(text);
              final AbstractTreeNode parent=treeNode.getParent();
              noteNode.setParent(parent);
              if (parent instanceof ProjectViewNodeWithChildrenList) {
                final List<AbstractTreeNode> pathToSelected=FavoritesTreeUtil.getLogicalPathToSelected(tree);
                final List<AbstractTreeNode> elements;
                AbstractTreeNode sibling;
                if (pathToSelected.isEmpty()) {
                  elements=pathToSelected;
                  sibling=null;
                }
 else {
                  elements=pathToSelected.subList(0,pathToSelected.size() - 1);
                  sibling=pathToSelected.get(pathToSelected.size() - 1);
                }
                favoritesManager.addRoot(CURRENT_TASK,elements,noteNode,sibling);
              }
 else               if (parent instanceof FavoritesListNode) {
                favoritesManager.addRoot(CURRENT_TASK,Collections.<AbstractTreeNode>emptyList(),noteNode,treeNode);
              }
            }
          }
;
          showNotePopup(project,tree,after,"");
        }
      }
    }
  }
;
}
