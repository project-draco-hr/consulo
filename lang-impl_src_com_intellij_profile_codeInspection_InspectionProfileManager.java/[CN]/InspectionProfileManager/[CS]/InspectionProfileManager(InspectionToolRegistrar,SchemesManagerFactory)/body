{
  myProfileType=Profile.INSPECTION;
  myRegistrar=registrar;
  mySeverityRegistrar=new SeverityRegistrar();
  SchemeProcessor<InspectionProfileImpl> processor=new SchemeProcessor<InspectionProfileImpl>(){
    public InspectionProfileImpl readScheme(    final Document document){
      InspectionProfileImpl profile=new InspectionProfileImpl(getProfileName(document),myRegistrar,InspectionProfileManager.this);
      profile.load(document.getRootElement());
      return profile;
    }
    public boolean shouldBeSaved(    final InspectionProfileImpl scheme){
      return scheme.wasInitialized();
    }
    public Document writeScheme(    final InspectionProfileImpl scheme) throws WriteExternalException {
      return scheme.saveToDocument();
    }
    public void initScheme(    final InspectionProfileImpl scheme){
    }
    public void onSchemeAdded(    final InspectionProfileImpl scheme){
      updateProfileImpl(scheme);
      fireProfileChanged(scheme);
      onProfilesChanged();
    }
    public void onSchemeDeleted(    final InspectionProfileImpl scheme){
      onProfilesChanged();
    }
    public void onCurrentSchemeChanged(    final Scheme oldCurrentScheme){
      Profile current=mySchemesManager.getCurrentScheme();
      if (current != null) {
        fireProfileChanged((Profile)oldCurrentScheme,current,null);
      }
      onProfilesChanged();
    }
  }
;
  mySchemesManager=schemesManagerFactory.createSchemesManager(FILE_SPEC,processor,RoamingType.PER_USER);
}
