{
  final CompileContext chunkLocalContext=createContextWrapper(myContext);
  myParallelBuildExecutor.execute(new Runnable(){
    @Override public void run(){
      try {
        try {
          if (myException.get() == null) {
            buildChunkIfAffected(chunkLocalContext,myContext.getScope(),task.getChunk());
          }
        }
  finally {
          myContext.updateCompilationStartStamp();
          myProjectDescriptor.dataManager.closeSourceToOutputStorages(Collections.singletonList(task.getChunk()));
          myProjectDescriptor.dataManager.flush(true);
        }
      }
 catch (      Throwable e) {
        myException.compareAndSet(null,e);
        LOG.info(e);
      }
 finally {
        LOG.debug("Finished compilation of " + task.getChunk().toString());
        myTasksCountDown.countDown();
        List<BuildChunkTask> nextTasks;
synchronized (myQueueLock) {
          nextTasks=task.markAsFinishedAndGetNextReadyTasks();
        }
        if (!nextTasks.isEmpty()) {
          queueTasks(nextTasks);
        }
      }
    }
  }
);
}
