{
  final BuildDataManager dataManager=context.getDataManager();
  final boolean compilingTests=context.isCompilingTests();
  try {
    final Collection<String> allOutputs=new LinkedList<String>();
    context.processFilesToRecompile(chunk,new FileProcessor(){
      private final Map<Module,SourceToOutputMapping> storageMap=new HashMap<Module,SourceToOutputMapping>();
      @Override public boolean apply(      Module module,      File file,      String sourceRoot) throws Exception {
        SourceToOutputMapping srcToOut=storageMap.get(module);
        if (srcToOut == null) {
          srcToOut=dataManager.getSourceToOutputMap(module.getName().toLowerCase(Locale.US),compilingTests);
          storageMap.put(module,srcToOut);
        }
        final String srcPath=FileUtil.toSystemIndependentName(file.getPath());
        final Collection<String> outputs=srcToOut.getState(srcPath);
        if (outputs != null) {
          for (          String output : outputs) {
            if (LOG.isDebugEnabled()) {
              allOutputs.add(output);
            }
            FileUtil.delete(new File(output));
          }
          srcToOut.remove(srcPath);
        }
        return true;
      }
    }
);
    if (LOG.isDebugEnabled()) {
      if (context.isMake() && allOutputs.size() > 0) {
        LOG.info("Cleaning output files:");
        final String[] buffer=new String[allOutputs.size()];
        int i=0;
        for (        String output : allOutputs) {
          buffer[i++]=output;
        }
        Arrays.sort(buffer);
        for (        String output : buffer) {
          LOG.info(output);
        }
        LOG.info("End of files");
      }
    }
  }
 catch (  Exception e) {
    throw new ProjectBuildException(e);
  }
}
