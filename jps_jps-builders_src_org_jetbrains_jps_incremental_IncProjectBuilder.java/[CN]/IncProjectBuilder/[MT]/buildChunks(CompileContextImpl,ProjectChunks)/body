{
  final CompileScope scope=context.getScope();
  final ProjectDescriptor pd=context.getProjectDescriptor();
  try {
    if (PARALLEL_BUILD_ENABLED) {
      final List<ChunkGroup> chunkGroups=buildChunkGroups(context,chunks);
      for (      ChunkGroup group : chunkGroups) {
        final List<ModuleChunk> groupChunks=group.getChunks();
        final int chunkCount=groupChunks.size();
        if (chunkCount == 0) {
          continue;
        }
        try {
          if (chunkCount == 1) {
            _buildChunk(createContextWrapper(context),scope,groupChunks.iterator().next());
          }
 else {
            final CountDownLatch latch=new CountDownLatch(chunkCount);
            final Ref<Throwable> exRef=new Ref<Throwable>(null);
            final StringBuilder logBuilder=new StringBuilder("Building chunks in parallel: ");
            for (            final ModuleChunk chunk : groupChunks) {
              logBuilder.append(chunk.getName()).append("; ");
              final CompileContext chunkLocalContext=createContextWrapper(context);
              SharedThreadPool.INSTANCE.submitBuildTask(new Runnable(){
                @Override public void run(){
                  try {
                    _buildChunk(chunkLocalContext,scope,chunk);
                  }
 catch (                  Throwable e) {
synchronized (exRef) {
                      if (exRef.isNull()) {
                        exRef.set(e);
                      }
                    }
                    LOG.info(e);
                  }
 finally {
                    latch.countDown();
                  }
                }
              }
);
            }
            LOG.info(logBuilder.toString());
            try {
              latch.await();
            }
 catch (            InterruptedException e) {
              LOG.info(e);
            }
            final Throwable exception=exRef.get();
            if (exception != null) {
              if (exception instanceof ProjectBuildException) {
                throw (ProjectBuildException)exception;
              }
 else {
                throw new ProjectBuildException(exception);
              }
            }
          }
        }
  finally {
          pd.dataManager.closeSourceToOutputStorages(groupChunks,context.isCompilingTests());
          pd.dataManager.flush(true);
        }
      }
    }
 else {
      for (      ModuleChunk chunk : chunks.getChunkList()) {
        try {
          _buildChunk(context,scope,chunk);
        }
  finally {
          pd.dataManager.closeSourceToOutputStorages(Collections.singleton(chunk),context.isCompilingTests());
          pd.dataManager.flush(true);
        }
      }
    }
  }
 catch (  IOException e) {
    throw new ProjectBuildException(e);
  }
}
