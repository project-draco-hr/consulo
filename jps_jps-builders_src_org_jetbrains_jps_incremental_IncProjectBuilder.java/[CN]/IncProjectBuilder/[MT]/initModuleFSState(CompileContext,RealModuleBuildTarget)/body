{
  boolean forceMarkDirty=false;
  final File currentOutput=context.getProjectPaths().getModuleOutputDir(target.getModule(),target.isTests());
  final ProjectDescriptor pd=context.getProjectDescriptor();
  if (currentOutput != null) {
    Pair<String,String> outputsPair=pd.dataManager.getOutputRootsLayout().getState(target.getModuleName());
    if (outputsPair != null) {
      final String previousPath=target.isTests() ? outputsPair.second : outputsPair.first;
      forceMarkDirty=StringUtil.isEmpty(previousPath) || !FileUtil.filesEqual(currentOutput,new File(previousPath));
    }
 else {
      forceMarkDirty=true;
    }
  }
  final Timestamps timestamps=pd.timestamps.getStorage();
  final HashSet<File> currentFiles=new HashSet<File>();
  FSOperations.markDirtyFiles(context,target,timestamps,forceMarkDirty,target.isTests() ? FSOperations.DirtyMarkScope.TESTS : FSOperations.DirtyMarkScope.PRODUCTION,currentFiles);
  final BuildFSState fsState=pd.fsState;
  fsState.clearDeletedPaths(target);
  final SourceToOutputMapping sourceToOutputMap=pd.dataManager.getSourceToOutputMap(target.getModuleName(),target.isTests());
  for (final Iterator<String> it=sourceToOutputMap.getKeysIterator(); it.hasNext(); ) {
    final String path=it.next();
    final File file=new File(path);
    if (!currentFiles.contains(file)) {
      fsState.registerDeleted(target,file,timestamps);
    }
  }
}
