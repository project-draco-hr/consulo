{
  boolean doneSomething=false;
  try {
    context.ensureFSStateInitialized(chunk);
    if (context.isMake()) {
      processDeletedPaths(context,chunk);
      doneSomething|=context.hasRemovedSources();
    }
    context.onChunkBuildStart(chunk);
    doneSomething=runModuleLevelBuilders(context,chunk);
  }
 catch (  ProjectBuildException e) {
    throw e;
  }
catch (  Exception e) {
    throw new ProjectBuildException(e);
  }
 finally {
    try {
      for (      BuilderCategory category : BuilderCategory.values()) {
        for (        ModuleLevelBuilder builder : myBuilderRegistry.getBuilders(category)) {
          builder.cleanupResources(context,chunk);
        }
      }
    }
  finally {
      try {
        context.onChunkBuildComplete(chunk);
      }
 catch (      Exception e) {
        throw new ProjectBuildException(e);
      }
 finally {
        Utils.CHUNK_REMOVED_SOURCES_KEY.set(context,null);
        if (doneSomething && GENERATE_CLASSPATH_INDEX) {
          final boolean forTests=context.isCompilingTests();
          final Future<?> future=SharedThreadPool.INSTANCE.submit(new Runnable(){
            @Override public void run(){
              createClasspathIndex(chunk,forTests);
            }
          }
);
          myAsyncTasks.add(future);
        }
      }
    }
  }
}
