{
  try {
    context.ensureFSStateInitialized(chunk);
    if (context.isMake()) {
      final Set<String> allChunkRemovedSources=new HashSet<String>();
      for (      Module module : chunk.getModules()) {
        final Collection<String> deletedPaths=myProjectDescriptor.fsState.getDeletedPaths(module,context.isCompilingTests());
        if (deletedPaths.isEmpty()) {
          continue;
        }
        allChunkRemovedSources.addAll(deletedPaths);
        final String moduleName=module.getName().toLowerCase(Locale.US);
        final SourceToOutputMapping sourceToOutputStorage=context.getDataManager().getSourceToOutputMap(moduleName,context.isCompilingTests());
        for (        String deletedSource : deletedPaths) {
          final Collection<String> outputs=sourceToOutputStorage.getState(deletedSource);
          if (LOG.isDebugEnabled()) {
            if (outputs.size() > 0) {
              final String[] buffer=new String[outputs.size()];
              int i=0;
              for (              final String o : outputs) {
                buffer[i++]=o;
              }
              Arrays.sort(buffer);
              LOG.info("Cleaning output files:");
              for (              final String o : buffer) {
                LOG.info(o);
              }
              LOG.info("End of files");
            }
          }
          if (outputs != null) {
            for (            String output : outputs) {
              FileUtil.delete(new File(output));
            }
            sourceToOutputStorage.remove(deletedSource);
          }
          final SourceToFormMapping sourceToFormMap=context.getDataManager().getSourceToFormMap();
          final String formPath=sourceToFormMap.getState(deletedSource);
          if (formPath != null) {
            final File formFile=new File(formPath);
            if (formFile.exists()) {
              context.markDirty(formFile);
            }
            sourceToFormMap.remove(deletedSource);
          }
        }
      }
      Paths.CHUNK_REMOVED_SOURCES_KEY.set(context,allChunkRemovedSources);
      for (      Module module : chunk.getModules()) {
        myProjectDescriptor.fsState.clearDeletedPaths(module,context.isCompilingTests());
      }
    }
    context.onChunkBuildStart(chunk);
    runModuleLevelBuilders(context,chunk);
  }
 catch (  ProjectBuildException e) {
    throw e;
  }
catch (  Exception e) {
    throw new ProjectBuildException(e);
  }
 finally {
    try {
      for (      BuilderCategory category : BuilderCategory.values()) {
        for (        ModuleLevelBuilder builder : myBuilderRegistry.getBuilders(category)) {
          builder.cleanupResources(context,chunk);
        }
      }
    }
  finally {
      try {
        context.onChunkBuildComplete(chunk);
      }
 catch (      Exception e) {
        throw new ProjectBuildException(e);
      }
 finally {
        Paths.CHUNK_REMOVED_SOURCES_KEY.set(context,null);
      }
    }
  }
}
