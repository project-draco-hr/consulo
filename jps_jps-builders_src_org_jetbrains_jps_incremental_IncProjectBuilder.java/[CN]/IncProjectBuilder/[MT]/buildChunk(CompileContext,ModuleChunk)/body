{
  try {
    if (context.isMake()) {
      final OutputToSourceMapping storage=context.getBuildDataManager().getOutputToSourceStorage();
      final HashSet<File> allChunkRemovedSources=new HashSet<File>();
      for (      Module module : chunk.getModules()) {
        final File moduleOutput=context.getProjectPaths().getModuleOutputDir(module,context.isCompilingTests());
        if (moduleOutput != null && moduleOutput.exists()) {
          deleteOutputsOfRemovedSources(moduleOutput,storage,allChunkRemovedSources);
        }
      }
      Paths.CHUNK_REMOVED_SOURCES_KEY.set(context,allChunkRemovedSources);
    }
    for (    BuilderCategory category : BuilderCategory.values()) {
      runBuilders(context,chunk,myBuilderRegistry.getBuilders(category));
    }
  }
 catch (  ProjectBuildException e) {
    throw e;
  }
catch (  Exception e) {
    throw new ProjectBuildException(e);
  }
 finally {
    for (    BuilderCategory category : BuilderCategory.values()) {
      for (      Builder builder : myBuilderRegistry.getBuilders(category)) {
        builder.cleanupResources(context,chunk);
      }
    }
    context.onChunkBuildComplete(chunk);
    Paths.CHUNK_REMOVED_SOURCES_KEY.set(context,null);
  }
}
