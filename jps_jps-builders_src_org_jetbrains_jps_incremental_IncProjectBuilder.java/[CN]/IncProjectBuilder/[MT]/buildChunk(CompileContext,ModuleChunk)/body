{
  boolean doneSomething=false;
  try {
    Utils.ERRORS_DETECTED_KEY.set(context,Boolean.FALSE);
    ensureFSStateInitialized(context,chunk);
    if (context.isMake()) {
      processDeletedPaths(context,chunk);
      doneSomething|=Utils.hasRemovedSources(context);
    }
    myProjectDescriptor.fsState.beforeChunkBuildStart(context,chunk);
    doneSomething=runModuleLevelBuilders(context,chunk);
  }
 catch (  ProjectBuildException e) {
    throw e;
  }
catch (  Exception e) {
    throw new ProjectBuildException(e);
  }
 finally {
    try {
      for (      BuilderCategory category : BuilderCategory.values()) {
        for (        ModuleLevelBuilder builder : myBuilderRegistry.getBuilders(category)) {
          builder.cleanupResources(context,chunk);
        }
      }
    }
  finally {
      try {
        onChunkBuildComplete(context,chunk);
      }
 catch (      Exception e) {
        throw new ProjectBuildException(e);
      }
 finally {
        final Collection<RootDescriptor> tempRoots=context.getProjectDescriptor().rootsIndex.clearTempRoots(context);
        if (!tempRoots.isEmpty()) {
          final Set<File> rootFiles=new HashSet<File>();
          for (          RootDescriptor rd : tempRoots) {
            rootFiles.add(rd.root);
            context.getProjectDescriptor().fsState.clearRecompile(rd);
          }
          myAsyncTasks.add(FileUtil.asyncDelete(rootFiles));
        }
        try {
          final Map<ModuleBuildTarget,Collection<String>> map=Utils.REMOVED_SOURCES_KEY.get(context);
          if (map != null) {
            for (            Map.Entry<ModuleBuildTarget,Collection<String>> entry : map.entrySet()) {
              final ModuleBuildTarget target=entry.getKey();
              final Collection<String> paths=entry.getValue();
              if (paths != null) {
                for (                String path : paths) {
                  myProjectDescriptor.fsState.registerDeleted(target,new File(path),null);
                }
              }
            }
          }
        }
 catch (        IOException e) {
          throw new ProjectBuildException(e);
        }
        Utils.REMOVED_SOURCES_KEY.set(context,null);
        if (doneSomething && GENERATE_CLASSPATH_INDEX) {
          final boolean forTests=context.isCompilingTests();
          final Future<?> future=SharedThreadPool.getInstance().executeOnPooledThread(new Runnable(){
            @Override public void run(){
              createClasspathIndex(chunk,forTests);
            }
          }
);
          myAsyncTasks.add(future);
        }
      }
    }
  }
}
