{
  try {
    myProjectDescriptor.timestamps.clean();
  }
 catch (  IOException e) {
    throw new ProjectBuildException("Error cleaning timestamps storage",e);
  }
  try {
    context.getDataManager().clean();
  }
 catch (  IOException e) {
    throw new ProjectBuildException("Error cleaning compiler storages",e);
  }
  myProjectDescriptor.fsState.onRebuild();
  final Collection<Module> modulesToClean=context.getProject().getModules().values();
  final Set<File> rootsToDelete=new HashSet<File>();
  final Set<File> allSourceRoots=new HashSet<File>();
  for (  Module module : modulesToClean) {
    final File out=context.getProjectPaths().getModuleOutputDir(module,false);
    if (out != null) {
      rootsToDelete.add(out);
    }
    final File testOut=context.getProjectPaths().getModuleOutputDir(module,true);
    if (testOut != null) {
      rootsToDelete.add(testOut);
    }
    final List<RootDescriptor> moduleRoots=context.getModuleRoots(module);
    for (    RootDescriptor d : moduleRoots) {
      allSourceRoots.add(d.root);
    }
  }
  final List<File> filesToDelete=new ArrayList<File>();
  for (  File outputRoot : rootsToDelete) {
    if (myCancelStatus.isCanceled()) {
      throw new ProjectBuildException(CANCELED_MESSAGE);
    }
    boolean okToDelete=true;
    if (PathUtil.isUnder(allSourceRoots,outputRoot)) {
      okToDelete=false;
    }
 else {
      final Set<File> _outRoot=Collections.singleton(outputRoot);
      for (      File srcRoot : allSourceRoots) {
        if (PathUtil.isUnder(_outRoot,srcRoot)) {
          okToDelete=false;
          break;
        }
      }
    }
    if (okToDelete) {
      final File[] children=outputRoot.listFiles();
      if (children != null) {
        filesToDelete.addAll(Arrays.asList(children));
      }
    }
 else {
      context.processMessage(new CompilerMessage(JPS_SERVER_NAME,BuildMessage.Kind.WARNING,"Output path " + outputRoot.getPath() + " intersects with a source root. The output cannot be cleaned."));
    }
  }
  context.processMessage(new ProgressMessage("Cleaning output directories..."));
  FileUtil.asyncDelete(filesToDelete);
}
