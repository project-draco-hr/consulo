{
  final ProjectDescriptor pd=context.getProjectDescriptor();
  final BuildFSState fsState=pd.fsState;
  fsState.clearContextRoundData(context);
  fsState.clearContextChunk(context);
  try {
    if (!Utils.ERRORS_DETECTED_KEY.get(context,Boolean.FALSE) && !context.getCancelStatus().isCanceled()) {
      boolean marked=false;
      for (      Module module : chunk.getModules()) {
        if (context.isMake()) {
          context.clearNonIncrementalMark(module);
        }
        if (context.isProjectRebuild()) {
          fsState.markInitialScanPerformed(module.getName(),context.isCompilingTests());
        }
        final Timestamps timestamps=pd.timestamps.getStorage();
        final List<RootDescriptor> roots=pd.rootsIndex.getModuleRoots(context,module);
        for (        RootDescriptor rd : roots) {
          if (context.isCompilingTests() ? rd.isTestRoot : !rd.isTestRoot) {
            marked|=fsState.markAllUpToDate(context.getScope(),rd,timestamps,context.getCompilationStartStamp());
          }
        }
      }
      if (marked) {
        context.processMessage(UptoDateFilesSavedEvent.INSTANCE);
      }
    }
  }
  finally {
    pd.dataManager.closeSourceToOutputStorages(chunk,context.isCompilingTests());
    pd.dataManager.flush(true);
  }
}
