{
  final List<ModuleLevelBuilder> builders=myBuilderRegistry.getBuilders(category);
  if (builders.isEmpty()) {
    return;
  }
  float stageCount=myTotalBuilderCount;
  int stagesPassed=0;
  final int modulesInChunk=chunk.getModules().size();
  boolean nextPassRequired;
  do {
    nextPassRequired=false;
    context.beforeNextCompileRound(chunk);
    for (    ModuleLevelBuilder builder : builders) {
      final ModuleLevelBuilder.ExitCode buildResult=builder.build(context,chunk);
      if (buildResult == ModuleLevelBuilder.ExitCode.ABORT) {
        throw new ProjectBuildException("Builder " + builder.getDescription() + " requested build stop");
      }
      if (myCancelStatus.isCanceled()) {
        throw new ProjectBuildException(CANCELED_MESSAGE);
      }
      if (buildResult == ModuleLevelBuilder.ExitCode.ADDITIONAL_PASS_REQUIRED) {
        if (!nextPassRequired) {
          myModulesProcessed-=(stagesPassed * modulesInChunk) / stageCount;
          stageCount+=myTotalBuilderCount;
          myModulesProcessed+=(stagesPassed * modulesInChunk) / stageCount;
        }
        nextPassRequired=true;
      }
      stagesPassed++;
      final float fraction=updateFractionBuilderFinished(modulesInChunk / (stageCount));
      context.setDone(fraction);
    }
  }
 while (nextPassRequired);
}
