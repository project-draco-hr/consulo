{
  try {
    final Map<String,Collection<String>> removedSources=new HashMap<String,Collection<String>>();
    for (    JpsModule module : chunk.getModules()) {
      final Collection<String> deletedPaths=myProjectDescriptor.fsState.getAndClearDeletedPaths(module.getName(),context.isCompilingTests());
      if (deletedPaths.isEmpty()) {
        continue;
      }
      removedSources.put(module.getName(),deletedPaths);
      final SourceToOutputMapping sourceToOutputStorage=context.getProjectDescriptor().dataManager.getSourceToOutputMap(module.getName(),context.isCompilingTests());
      for (      String deletedSource : deletedPaths) {
        final Collection<String> outputs=sourceToOutputStorage.getState(deletedSource);
        if (outputs != null) {
          final JavaBuilderLogger logger=context.getLoggingManager().getJavaBuilderLogger();
          if (logger.isEnabled()) {
            if (outputs.size() > 0) {
              final String[] buffer=new String[outputs.size()];
              int i=0;
              for (              final String o : outputs) {
                buffer[i++]=o;
              }
              Arrays.sort(buffer);
              logger.log("Cleaning output files:");
              for (              final String o : buffer) {
                logger.log(o);
              }
              logger.log("End of files");
            }
          }
          for (          String output : outputs) {
            new File(output).delete();
          }
        }
        final SourceToFormMapping sourceToFormMap=context.getProjectDescriptor().dataManager.getSourceToFormMap();
        final String formPath=sourceToFormMap.getState(deletedSource);
        if (formPath != null) {
          final File formFile=new File(formPath);
          if (formFile.exists()) {
            FSOperations.markDirty(context,formFile);
          }
          sourceToFormMap.remove(deletedSource);
        }
      }
    }
    if (!removedSources.isEmpty()) {
      final Map<String,Collection<String>> existing=Utils.REMOVED_SOURCES_KEY.get(context);
      if (existing != null) {
        for (        Map.Entry<String,Collection<String>> entry : existing.entrySet()) {
          final Collection<String> paths=removedSources.get(entry.getKey());
          if (paths != null) {
            paths.addAll(entry.getValue());
          }
 else {
            removedSources.put(entry.getKey(),entry.getValue());
          }
        }
      }
      Utils.REMOVED_SOURCES_KEY.set(context,removedSources);
    }
  }
 catch (  IOException e) {
    throw new ProjectBuildException(e);
  }
}
