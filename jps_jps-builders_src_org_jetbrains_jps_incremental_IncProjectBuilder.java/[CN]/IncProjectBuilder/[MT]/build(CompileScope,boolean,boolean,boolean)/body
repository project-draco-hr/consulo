{
  final LowMemoryWatcher memWatcher=LowMemoryWatcher.register(new Runnable(){
    @Override public void run(){
      myProjectDescriptor.dataManager.flush(false);
      myProjectDescriptor.timestamps.getStorage().force();
    }
  }
);
  CompileContextImpl context=null;
  try {
    context=createContext(scope,isMake,isProjectRebuild);
    runBuild(context,forceCleanCaches);
    myProjectDescriptor.dataManager.saveVersion();
  }
 catch (  ProjectBuildException e) {
    final Throwable cause=e.getCause();
    if (cause instanceof PersistentEnumerator.CorruptedException || cause instanceof MappingFailedException || cause instanceof IOException) {
      myMessageDispatcher.processMessage(new CompilerMessage(BUILD_NAME,BuildMessage.Kind.INFO,"Internal caches are corrupted or have outdated format, forcing project rebuild: " + e.getMessage()));
      throw new RebuildRequestedException(cause);
    }
 else     if (cause != null) {
      myMessageDispatcher.processMessage(new CompilerMessage(BUILD_NAME,cause));
    }
 else {
      String message=e.getMessage();
      if (message == null)       message="Internal error";
      myMessageDispatcher.processMessage(new CompilerMessage(BUILD_NAME,BuildMessage.Kind.ERROR,message));
    }
  }
 finally {
    memWatcher.stop();
    flushContext(context);
synchronized (myAsyncTasks) {
      for (      Future task : myAsyncTasks) {
        try {
          task.get();
        }
 catch (        Throwable th) {
          LOG.info(th);
        }
      }
    }
  }
}
