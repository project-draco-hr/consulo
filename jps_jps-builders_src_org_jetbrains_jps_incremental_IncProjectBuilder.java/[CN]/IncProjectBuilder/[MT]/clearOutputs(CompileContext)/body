{
  final MultiMap<File,BuildTarget<?>> rootsToDelete=new MultiMapBasedOnSet<File,BuildTarget<?>>();
  final Set<File> allSourceRoots=new HashSet<File>();
  final ProjectPaths paths=context.getProjectPaths();
  ProjectDescriptor projectDescriptor=context.getProjectDescriptor();
  for (  BuildTarget<?> target : projectDescriptor.getBuildTargetIndex().getAllTargets()) {
    File outputDir=target.getOutputDir(projectDescriptor.dataManager.getDataPaths());
    if (outputDir != null) {
      rootsToDelete.putValue(outputDir,target);
    }
  }
  for (  BuildTargetType<?> type : JavaModuleBuildTargetType.ALL_TYPES) {
    for (    BuildTarget<?> target : projectDescriptor.getBuildTargetIndex().getAllTargets(type)) {
      for (      BuildRootDescriptor descriptor : projectDescriptor.getBuildRootIndex().getTargetRoots(target,context)) {
        allSourceRoots.add(descriptor.getRootFile());
      }
    }
  }
  final List<File> filesToDelete=new ArrayList<File>();
  for (  Map.Entry<File,Collection<BuildTarget<?>>> entry : rootsToDelete.entrySet()) {
    context.checkCanceled();
    boolean okToDelete=true;
    final File outputRoot=entry.getKey();
    if (JpsPathUtil.isUnder(allSourceRoots,outputRoot)) {
      okToDelete=false;
    }
 else {
      final Set<File> _outRoot=Collections.singleton(outputRoot);
      for (      File srcRoot : allSourceRoots) {
        if (JpsPathUtil.isUnder(_outRoot,srcRoot)) {
          okToDelete=false;
          break;
        }
      }
    }
    if (okToDelete) {
      final File[] children=outputRoot.listFiles();
      if (children != null) {
        filesToDelete.addAll(Arrays.asList(children));
      }
    }
 else {
      context.processMessage(new CompilerMessage(BUILD_NAME,BuildMessage.Kind.WARNING,"Output path " + outputRoot.getPath() + " intersects with a source root. The output cannot be cleaned."));
      for (      BuildTarget<?> target : entry.getValue()) {
        clearOutputFiles(context,target);
      }
    }
  }
  final Set<File> annotationOutputs=new HashSet<File>();
  for (  JavaModuleBuildTargetType type : JavaModuleBuildTargetType.ALL_TYPES) {
    for (    ModuleBuildTarget target : projectDescriptor.getBuildTargetIndex().getAllTargets(type)) {
      final ProcessorConfigProfile profile=context.getAnnotationProcessingProfile(target.getModule());
      if (profile.isEnabled()) {
        File annotationOut=paths.getAnnotationProcessorGeneratedSourcesOutputDir(target.getModule(),target.isTests(),profile.getGeneratedSourcesDirectoryName());
        if (annotationOut != null) {
          annotationOutputs.add(annotationOut);
        }
      }
    }
  }
  for (  File annotationOutput : annotationOutputs) {
    final File[] children=annotationOutput.listFiles();
    if (children != null) {
      filesToDelete.addAll(Arrays.asList(children));
    }
  }
  context.processMessage(new ProgressMessage("Cleaning output directories..."));
  myAsyncTasks.add(FileUtil.asyncDelete(filesToDelete));
}
