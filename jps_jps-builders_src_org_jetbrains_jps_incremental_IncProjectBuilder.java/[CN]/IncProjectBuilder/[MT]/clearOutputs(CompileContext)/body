{
  final Collection<Module> modulesToClean=context.getProject().getModules().values();
  final Map<File,Set<Pair<String,Boolean>>> rootsToDelete=new HashMap<File,Set<Pair<String,Boolean>>>();
  final Set<File> annotationOutputs=new HashSet<File>();
  final Set<File> allSourceRoots=new HashSet<File>();
  final ProjectPaths paths=context.getProjectPaths();
  for (  Module module : modulesToClean) {
    final File out=paths.getModuleOutputDir(module,false);
    if (out != null) {
      appendRootInfo(rootsToDelete,out,module,false);
    }
    final File testOut=paths.getModuleOutputDir(module,true);
    if (testOut != null) {
      appendRootInfo(rootsToDelete,testOut,module,true);
    }
    final AnnotationProcessingProfile profile=context.getAnnotationProcessingProfile(module);
    if (profile.isEnabled()) {
      File annotationOut=paths.getAnnotationProcessorGeneratedSourcesOutputDir(module,false,profile.getGeneratedSourcesDirName());
      if (annotationOut != null) {
        annotationOutputs.add(annotationOut);
      }
      annotationOut=paths.getAnnotationProcessorGeneratedSourcesOutputDir(module,true,profile.getGeneratedSourcesDirName());
      if (annotationOut != null) {
        annotationOutputs.add(annotationOut);
      }
    }
    final List<RootDescriptor> moduleRoots=context.getModuleRoots(module);
    for (    RootDescriptor d : moduleRoots) {
      allSourceRoots.add(d.root);
    }
  }
  final List<File> filesToDelete=new ArrayList<File>();
  for (  Map.Entry<File,Set<Pair<String,Boolean>>> entry : rootsToDelete.entrySet()) {
    context.checkCanceled();
    boolean okToDelete=true;
    final File outputRoot=entry.getKey();
    if (PathUtil.isUnder(allSourceRoots,outputRoot)) {
      okToDelete=false;
    }
 else {
      final Set<File> _outRoot=Collections.singleton(outputRoot);
      for (      File srcRoot : allSourceRoots) {
        if (PathUtil.isUnder(_outRoot,srcRoot)) {
          okToDelete=false;
          break;
        }
      }
    }
    if (okToDelete) {
      final File[] children=outputRoot.listFiles();
      if (children != null) {
        filesToDelete.addAll(Arrays.asList(children));
      }
    }
 else {
      context.processMessage(new CompilerMessage(BUILD_NAME,BuildMessage.Kind.WARNING,"Output path " + outputRoot.getPath() + " intersects with a source root. The output cannot be cleaned."));
      for (      Pair<String,Boolean> info : entry.getValue()) {
        clearOutputFiles(context,info.first,info.second);
      }
    }
  }
  for (  File annotationOutput : annotationOutputs) {
    final File[] children=annotationOutput.listFiles();
    if (children != null) {
      filesToDelete.addAll(Arrays.asList(children));
    }
  }
  context.processMessage(new ProgressMessage("Cleaning output directories..."));
  myAsyncTasks.add(FileUtil.asyncDelete(filesToDelete));
}
