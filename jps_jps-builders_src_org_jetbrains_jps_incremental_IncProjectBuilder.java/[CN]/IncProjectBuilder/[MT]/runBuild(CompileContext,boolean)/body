{
  context.setDone(0.0f);
  LOG.info("Building project '" + context.getProject().getProjectName() + "'; isRebuild:"+ context.isProjectRebuild()+ "; isMake:"+ context.isMake());
  if (context.isProjectRebuild() || forceCleanCaches) {
    cleanOutputRoots(context);
  }
  context.processMessage(new ProgressMessage("Running 'before' tasks"));
  runTasks(context,myBuilderRegistry.getBeforeTasks());
  context.setCompilingTests(false);
  context.processMessage(new ProgressMessage("Checking production sources"));
  buildChunks(context,myProductionChunks);
  context.setCompilingTests(true);
  context.processMessage(new ProgressMessage("Checking test sources"));
  buildChunks(context,myTestChunks);
  context.processMessage(new ProgressMessage("Building project"));
  runProjectLevelBuilders(context);
  context.processMessage(new ProgressMessage("Running 'after' tasks"));
  runTasks(context,myBuilderRegistry.getAfterTasks());
  if (false) {
    final Mappings mappings=myProjectDescriptor.dataManager.getMappings();
    final String fileName=Utils.getSystemRoot() + File.separator + "snapshot-"+ new SimpleDateFormat("dd-MM-yy(hh:mm:ss)").format(new Date())+ ".log";
    try {
      final PrintStream stream=new PrintStream(fileName);
      stream.println("Mappings:");
      mappings.toStream(stream);
      stream.println("End Of Mappings");
      stream.close();
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
  }
  context.processMessage(new ProgressMessage("Finished, saving caches..."));
}
