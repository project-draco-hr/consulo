{
  listener=new PsiTreeChangeListener(){
    @Override public void beforeChildAddition(    PsiTreeChangeEvent event){
      logEvent(event);
    }
    @Override public void beforeChildRemoval(    PsiTreeChangeEvent event){
      logEvent(event);
    }
    @Override public void beforeChildReplacement(    PsiTreeChangeEvent event){
      logEvent(event);
    }
    @Override public void beforeChildMovement(    PsiTreeChangeEvent event){
      logEvent(event);
    }
    @Override public void beforeChildrenChange(    PsiTreeChangeEvent event){
      logEvent(event);
    }
    @Override public void beforePropertyChange(    PsiTreeChangeEvent event){
      logEvent(event);
    }
    @Override public void childAdded(    PsiTreeChangeEvent event){
      logEvent(event);
      assertBeforeEventFired(event);
    }
    @Override public void childRemoved(    PsiTreeChangeEvent event){
      logEvent(event);
      assertBeforeEventFired(event);
    }
    @Override public void childReplaced(    PsiTreeChangeEvent event){
      logEvent(event);
      assertBeforeEventFired(event);
    }
    @Override public void childrenChanged(    PsiTreeChangeEvent event){
      logEvent(event);
      assertBeforeEventFired(event);
    }
    @Override public void childMoved(    PsiTreeChangeEvent event){
      logEvent(event);
      assertBeforeEventFired(event);
    }
    @Override public void propertyChanged(    PsiTreeChangeEvent event){
      logEvent(event);
      assertBeforeEventFired(event);
    }
  }
;
  myFile=createFile("A.java","class A { int i; }");
  doTestEvents("class A { }");
  doTestEvents("class A { int k; }");
  doTestEvents("class A { int k; int i; }");
  doTestEvents("class A { void foo(){} }");
  doTestEvents("xxxxxx");
  doTestEvents("");
}
