{
  final PsiReferenceExpression ref=(PsiReferenceExpression)descriptor.getPsiElement();
  final PsiLocalVariable variable=(PsiLocalVariable)ref.resolve();
  final PsiAssignmentExpression assignment=(PsiAssignmentExpression)ref.getParent();
  final PsiExpressionStatement assignmentStatement=(PsiExpressionStatement)assignment.getParent();
  final String originalVariableName=assignment.getLExpression().getText();
  final PsiManager manager=variable.getManager();
  final PsiType type=variable.getType();
  final CodeStyleManager codeStyleManager=manager.getCodeStyleManager();
  final PsiBlockStatement assignmentBlock=PsiTreeUtil.getParentOfType(assignmentStatement,PsiBlockStatement.class);
  final PsiCodeBlock variableBlock=PsiTreeUtil.getParentOfType(variable,PsiCodeBlock.class);
  final SuggestedNameInfo suggestions=codeStyleManager.suggestVariableName(VariableKind.LOCAL_VARIABLE,originalVariableName,assignment.getLExpression(),type);
  final String[] names=suggestions.names;
  final String baseName;
  if (names != null && names.length > 0) {
    baseName=names[0];
  }
 else {
    baseName="value";
  }
  final String newVariableName=codeStyleManager.suggestUniqueVariableName(baseName,variableBlock,false);
  final PsiSearchHelper searchHelper=manager.getSearchHelper();
  final PsiReference[] references=searchHelper.findReferences(variable,variable.getUseScope(),false);
  for (  PsiReference reference : references) {
    final PsiElement referenceElement=reference.getElement();
    if (referenceElement != null && referenceElement.getTextOffset() > assignmentStatement.getTextRange().getEndOffset()) {
      replaceExpression((PsiExpression)referenceElement,newVariableName);
    }
  }
  final String newStatement=type.getPresentableText() + ' ' + newVariableName+ " =  "+ assignment.getRExpression().getText()+ ';';
  replaceStatement(assignmentStatement,newStatement);
}
