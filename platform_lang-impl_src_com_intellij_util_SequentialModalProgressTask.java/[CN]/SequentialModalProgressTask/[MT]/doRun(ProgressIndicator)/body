{
  final SequentialTask task=myTask;
  if (task == null) {
    return;
  }
  myIndicator=indicator;
  indicator.setIndeterminate(false);
  prepare(task);
  while (!task.isDone()) {
    if (indicator.isCanceled()) {
      task.stop();
      break;
    }
    UIUtil.invokeAndWaitIfNeeded(new Runnable(){
      @Override public void run(){
        long start=System.currentTimeMillis();
        try {
          while (!task.isDone() && System.currentTimeMillis() - start < myMinIterationTime) {
            task.iteration();
          }
        }
 catch (        RuntimeException e) {
          task.stop();
          throw e;
        }
      }
    }
);
  }
}
