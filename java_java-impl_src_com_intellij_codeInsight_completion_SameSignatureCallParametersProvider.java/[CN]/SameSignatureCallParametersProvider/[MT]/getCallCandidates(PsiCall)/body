{
  List<Pair<PsiMethod,PsiSubstitutor>> candidates=new ArrayList<Pair<PsiMethod,PsiSubstitutor>>();
  JavaResolveResult[] results;
  if (expression instanceof PsiMethodCallExpression) {
    results=((PsiMethodCallExpression)expression).getMethodExpression().multiResolve(false);
  }
 else {
    results=new JavaResolveResult[]{expression.resolveMethodGenerics()};
  }
  for (  final JavaResolveResult candidate : results) {
    final PsiElement element=candidate.getElement();
    if (element instanceof PsiMethod) {
      final PsiClass psiClass=((PsiMethod)element).getContainingClass();
      if (psiClass != null) {
        for (        Pair<PsiMethod,PsiSubstitutor> overload : psiClass.findMethodsAndTheirSubstitutorsByName(((PsiMethod)element).getName(),true)) {
          if (!overload.first.hasModifierProperty(PsiModifier.ABSTRACT)) {
            candidates.add(overload);
          }
        }
        break;
      }
    }
  }
  return candidates;
}
