{
  PsiElement elementAtOffset=file.findElementAt(offset);
  if (elementAtOffset == null) {
    return;
  }
  Language language=PsiUtilBase.getLanguageAtOffset(file,offset);
  final CodeDocumentationProvider docProvider;
  final DocumentationProvider langDocumentationProvider=LanguageDocumentation.INSTANCE.forLanguage(language);
  if (langDocumentationProvider instanceof CompositeDocumentationProvider) {
    docProvider=((CompositeDocumentationProvider)langDocumentationProvider).getFirstCodeDocumentationProvider();
  }
 else   if (langDocumentationProvider instanceof CodeDocumentationProvider) {
    docProvider=(CodeDocumentationProvider)langDocumentationProvider;
  }
 else {
    docProvider=null;
  }
  if (docProvider == null) {
    return;
  }
  final Pair<PsiElement,PsiComment> pair=docProvider.parseContext(elementAtOffset);
  if (pair == null) {
    return;
  }
  Commenter c=LanguageCommenters.INSTANCE.forLanguage(language);
  if (!(c instanceof CodeDocumentationAwareCommenter)) {
    return;
  }
  final CodeDocumentationAwareCommenter commenter=(CodeDocumentationAwareCommenter)c;
  final Runnable command=new Runnable(){
    @Override public void run(){
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        @Override public void run(){
          if (pair.second == null || pair.second.getTextRange().isEmpty()) {
            generateComment(pair.first,editor,docProvider,commenter,project);
          }
 else {
            fixCommentIfNecessary(pair.second);
          }
        }
      }
);
    }
  }
;
  CommandProcessor.getInstance().executeCommand(project,command,"Fix documentation",null);
}
