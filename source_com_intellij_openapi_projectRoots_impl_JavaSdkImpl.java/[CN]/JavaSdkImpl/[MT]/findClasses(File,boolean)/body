{
  FileFilter jarFileFilter=new FileFilter(){
    @SuppressWarnings({"HardCodedStringLiteral"}) public boolean accept(    File f){
      if (f.isDirectory())       return false;
      if (f.getName().endsWith(".jar"))       return true;
      return false;
    }
  }
;
  File[] jarDirs;
  if (SystemInfo.isMac && !file.getName().equals("mockJDK")) {
    File libFile=new File(file,"lib");
    @NonNls File classesFile=new File(file,"../Classes");
    @NonNls File libExtFile=new File(libFile,"ext");
    jarDirs=new File[]{libFile,classesFile,libExtFile};
  }
 else {
    @NonNls final String jre="jre";
    File jreLibFile=isJre ? new File(file,"lib") : new File(new File(file,jre),"lib");
    @NonNls File jreLibExtFile=new File(jreLibFile,"ext");
    jarDirs=new File[]{jreLibFile,jreLibExtFile};
  }
  ArrayList<File> childrenList=new ArrayList<File>();
  for (  File jarDir : jarDirs) {
    if (jarDir != null && jarDir.isDirectory()) {
      File[] files=jarDir.listFiles(jarFileFilter);
      for (      File file1 : files) {
        childrenList.add(file1);
      }
    }
  }
  ArrayList<VirtualFile> result=new ArrayList<VirtualFile>();
  for (  File child : childrenList) {
    String url=JarFileSystem.PROTOCOL + "://" + child.getAbsolutePath().replace(File.separatorChar,'/')+ JarFileSystem.JAR_SEPARATOR;
    VirtualFile vFile=VirtualFileManager.getInstance().findFileByUrl(url);
    if (vFile != null) {
      result.add(vFile);
    }
  }
  @NonNls File classesZipFile=new File(new File(file,"lib"),"classes.zip");
  if (!classesZipFile.isDirectory() && classesZipFile.exists()) {
    String url=JarFileSystem.PROTOCOL + "://" + classesZipFile.getAbsolutePath().replace(File.separatorChar,'/')+ JarFileSystem.JAR_SEPARATOR;
    VirtualFile vFile=VirtualFileManager.getInstance().findFileByUrl(url);
    if (vFile != null) {
      result.add(vFile);
    }
  }
  return result.toArray(new VirtualFile[result.size()]);
}
