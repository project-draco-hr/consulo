{
  if (condition == null) {
    return false;
  }
  if (PsiUtil.isConstantExpression(condition) || PsiKeyword.NULL.equals(condition.getText())) {
    return true;
  }
  if (condition instanceof PsiInstanceOfExpression) {
    final PsiInstanceOfExpression instanceOfExpression=(PsiInstanceOfExpression)condition;
    final PsiExpression operand=instanceOfExpression.getOperand();
    return checkCondition(operand,context,notUpdated);
  }
 else   if (condition instanceof PsiParenthesizedExpression) {
    final PsiExpression expression=((PsiParenthesizedExpression)condition).getExpression();
    return checkCondition(expression,context,notUpdated);
  }
 else   if (condition instanceof PsiBinaryExpression) {
    final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)condition;
    final PsiExpression lhs=binaryExpression.getLOperand();
    final PsiExpression rhs=binaryExpression.getROperand();
    if (rhs == null) {
      return false;
    }
    if (checkCondition(lhs,context,notUpdated)) {
      return checkCondition(rhs,context,notUpdated);
    }
  }
 else   if (condition instanceof PsiReferenceExpression) {
    final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)condition;
    final PsiElement element=referenceExpression.resolve();
    if (element instanceof PsiField) {
      final PsiField field=(PsiField)element;
      final PsiType type=field.getType();
      if (field.hasModifierProperty(PsiModifier.FINAL) && type.getArrayDimensions() == 0) {
        if (field.hasModifierProperty(PsiModifier.STATIC)) {
          return true;
        }
        final PsiExpression qualifier=referenceExpression.getQualifierExpression();
        if (qualifier == null) {
          return true;
        }
 else         if (checkCondition(qualifier,context,notUpdated)) {
          return true;
        }
      }
    }
 else     if (element instanceof PsiVariable) {
      final PsiVariable variable=(PsiVariable)element;
      if (variable.hasModifierProperty(PsiModifier.FINAL)) {
        return true;
      }
 else       if (element instanceof PsiLocalVariable || element instanceof PsiParameter) {
        if (!VariableAccessUtils.variableIsAssigned(variable,context)) {
          notUpdated.add(referenceExpression);
          return true;
        }
      }
    }
  }
 else   if (condition instanceof PsiPrefixExpression) {
    final PsiPrefixExpression prefixExpression=(PsiPrefixExpression)condition;
    final PsiJavaToken sign=prefixExpression.getOperationSign();
    final IElementType tokenType=sign.getTokenType();
    if (JavaTokenType.EXCL.equals(tokenType) || JavaTokenType.PLUS.equals(tokenType) || JavaTokenType.MINUS.equals(tokenType)) {
      final PsiExpression operand=prefixExpression.getOperand();
      return checkCondition(operand,context,notUpdated);
    }
  }
 else   if (condition instanceof PsiArrayAccessExpression) {
    final PsiArrayAccessExpression accessExpression=(PsiArrayAccessExpression)condition;
    final PsiExpression indexExpression=accessExpression.getIndexExpression();
    return checkCondition(indexExpression,context,notUpdated) && checkCondition(accessExpression.getArrayExpression(),context,notUpdated);
  }
 else   if (condition instanceof PsiConditionalExpression) {
    final PsiConditionalExpression conditionalExpression=(PsiConditionalExpression)condition;
    final PsiExpression thenExpression=conditionalExpression.getThenExpression();
    final PsiExpression elseExpression=conditionalExpression.getElseExpression();
    if (thenExpression == null || elseExpression == null) {
      return false;
    }
    return checkCondition(conditionalExpression.getCondition(),context,notUpdated) && checkCondition(thenExpression,context,notUpdated) && checkCondition(elseExpression,context,notUpdated);
  }
 else   if (condition instanceof PsiThisExpression) {
    return true;
  }
 else   if (condition instanceof PsiMethodCallExpression) {
    final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)condition;
    if (!IteratorUtils.isCallToHasNext(methodCallExpression)) {
      return false;
    }
    final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
    final PsiExpression qualifierExpression=methodExpression.getQualifierExpression();
    if (qualifierExpression instanceof PsiReferenceExpression) {
      final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)qualifierExpression;
      final PsiElement element=referenceExpression.resolve();
      if (!(element instanceof PsiVariable)) {
        return false;
      }
      final PsiVariable variable=(PsiVariable)element;
      if (!IteratorUtils.containsCallToIteratorNext(context,variable,true)) {
        notUpdated.add(qualifierExpression);
        return true;
      }
    }
 else {
      if (!IteratorUtils.containsCallToIteratorNext(context,null,true)) {
        notUpdated.add(methodCallExpression);
        return true;
      }
    }
  }
  return false;
}
