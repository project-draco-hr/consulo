{
  if (!(file instanceof GroovyFileBase)) {
    String message=RefactoringBundle.getCannotRefactorMessage(GroovyRefactoringBundle.message("only.in.groovy.files"));
    showErrorMessage(message,project);
    return false;
  }
  int startOffset=editor.getSelectionModel().getSelectionStart();
  int endOffset=editor.getSelectionModel().getSelectionEnd();
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  PsiElement[] elements;
  GrExpression expr=GroovyRefactoringUtil.findElementInRange(((GroovyFileBase)file),startOffset,endOffset,GrExpression.class);
  if (expr != null) {
    elements=new PsiElement[]{expr};
  }
 else {
    elements=GroovyRefactoringUtil.findStatementsInRange(file,startOffset,endOffset);
  }
  ArrayList<GrStatement> statementList=new ArrayList<GrStatement>();
  for (  PsiElement element : elements) {
    if (element instanceof GrStatement) {
      statementList.add(((GrStatement)element));
    }
  }
  GrStatement[] statements=statementList.toArray(new GrStatement[statementList.size()]);
  if (statements.length > 0) {
    VariableInfo info=ReachingDefinitionsCollector.obtainVariableFlowInformation(statements[0],statements[statements.length - 1]);
    System.out.println("preved!");
  }
  return elements.length > 0;
}
