{
  checkForReachables();
  final RefFilter filter=myPhase == 1 ? new StrictUnreferencedFilter(this,globalContext) : new RefUnreachableFilter(this,globalContext);
  final boolean[] requestAdded={false};
  globalContext.getRefManager().iterate(new RefJavaVisitor(){
    @Override public void visitElement(    @NotNull RefEntity refEntity){
      if (!(refEntity instanceof RefJavaElement))       return;
      if (refEntity instanceof RefClass && ((RefClass)refEntity).isAnonymous())       return;
      RefJavaElement refElement=(RefJavaElement)refEntity;
      if (filter.accepts(refElement) && !myProcessedSuspicious.contains(refElement)) {
        refEntity.accept(new RefJavaVisitor(){
          @Override public void visitField(          @NotNull final RefField refField){
            myProcessedSuspicious.add(refField);
            PsiField psiField=refField.getElement();
            if (psiField != null && isSerializationImplicitlyUsedField(psiField)) {
              getEntryPointsManager().addEntryPoint(refField,false);
            }
 else {
              getJavaContext().enqueueFieldUsagesProcessor(refField,new GlobalJavaInspectionContext.UsagesProcessor(){
                @Override public boolean process(                PsiReference psiReference){
                  getEntryPointsManager().addEntryPoint(refField,false);
                  return false;
                }
              }
);
              requestAdded[0]=true;
            }
          }
          @Override public void visitMethod(          @NotNull final RefMethod refMethod){
            myProcessedSuspicious.add(refMethod);
            if (refMethod instanceof RefImplicitConstructor) {
              visitClass(refMethod.getOwnerClass());
            }
 else {
              PsiMethod psiMethod=(PsiMethod)refMethod.getElement();
              if (psiMethod != null && isSerializablePatternMethod(psiMethod,refMethod.getOwnerClass())) {
                getEntryPointsManager().addEntryPoint(refMethod,false);
              }
 else               if (!refMethod.isExternalOverride() && !PsiModifier.PRIVATE.equals(refMethod.getAccessModifier())) {
                for (                final RefMethod derivedMethod : refMethod.getDerivedMethods()) {
                  myProcessedSuspicious.add(derivedMethod);
                }
                enqueueMethodUsages(refMethod);
                requestAdded[0]=true;
              }
            }
          }
          @Override public void visitClass(          @NotNull final RefClass refClass){
            myProcessedSuspicious.add(refClass);
            if (!refClass.isAnonymous()) {
              getJavaContext().enqueueDerivedClassesProcessor(refClass,new GlobalJavaInspectionContext.DerivedClassesProcessor(){
                @Override public boolean process(                PsiClass inheritor){
                  getEntryPointsManager().addEntryPoint(refClass,false);
                  return false;
                }
              }
);
              getJavaContext().enqueueClassUsagesProcessor(refClass,new GlobalJavaInspectionContext.UsagesProcessor(){
                @Override public boolean process(                PsiReference psiReference){
                  getEntryPointsManager().addEntryPoint(refClass,false);
                  return false;
                }
              }
);
              requestAdded[0]=true;
            }
          }
        }
);
      }
    }
  }
);
  if (!requestAdded[0]) {
    if (myPhase == 2) {
      myProcessedSuspicious=null;
      return false;
    }
 else {
      myPhase=2;
    }
  }
  return true;
}
