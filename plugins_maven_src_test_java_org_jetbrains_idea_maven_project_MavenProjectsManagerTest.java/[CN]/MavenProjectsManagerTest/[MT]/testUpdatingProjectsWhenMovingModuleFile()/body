{
  createProjectPom("<groupId>test</groupId>" + "<artifactId>parent</artifactId>" + "<version>1</version>"+ "<modules>"+ "  <module>m1</module>"+ "  <module>m2</module>"+ "</modules>");
  final VirtualFile m=createModulePom("m1","<groupId>test</groupId>" + "<artifactId>m</artifactId>" + "<version>1</version>");
  importProject();
  final VirtualFile oldDir=m.getParent();
  new WriteCommandAction.Simple(myProject){
    @Override protected void run() throws Throwable {
      VirtualFile newDir=myProjectRoot.createChildDirectory(this,"m2");
      assertEquals(1,myProjectsTree.getRootProjects().size());
      assertEquals(1,myProjectsTree.getModules(myProjectsTree.getRootProjects().get(0)).size());
      m.move(this,newDir);
      waitForReadingCompletion();
      assertEquals(1,myProjectsTree.getModules(myProjectsTree.getRootProjects().get(0)).size());
      m.move(this,oldDir);
      waitForReadingCompletion();
      assertEquals(1,myProjectsTree.getModules(myProjectsTree.getRootProjects().get(0)).size());
      m.move(this,myProjectRoot.createChildDirectory(this,"xxx"));
    }
  }
.execute().throwException();
  waitForReadingCompletion();
  assertEquals(0,myProjectsTree.getModules(myProjectsTree.getRootProjects().get(0)).size());
}
