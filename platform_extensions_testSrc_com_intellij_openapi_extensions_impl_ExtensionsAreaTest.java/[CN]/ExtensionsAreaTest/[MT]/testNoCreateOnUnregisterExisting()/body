{
  myExtensionsArea.registerExtensionPoint("test.ep",TestClass.class.getName(),ExtensionPoint.Kind.BEAN_CLASS);
  final Element element=ExtensionComponentAdapterTest.readElement("<extension point=\"test.ep\"/>");
  TestClass.ourCreationCount=0;
  myExtensionsArea.registerExtension("test",element);
  assertEquals(0,TestClass.ourCreationCount);
  final AreaPicoContainer container=myExtensionsArea.getPicoContainer();
  List instances=container.getComponentInstancesOfType(TestClass.class);
  assertEquals(1,instances.size());
  assertEquals(1,TestClass.ourCreationCount);
  final Object[] extensions=myExtensionsArea.getExtensionPoint("test.ep").getExtensions();
  assertEquals(1,extensions.length);
  instances=container.getComponentInstancesOfType(TestClass.class);
  assertEquals(1,instances.size());
  container.registerComponent(new AbstractComponentAdapter(new Object(),Object.class){
    @Override public Object getComponentInstance(    PicoContainer container) throws PicoInitializationException, PicoIntrospectionException {
      fail("Should not be invoked");
      throw new Error();
    }
    @Override public void verify(    PicoContainer container) throws PicoIntrospectionException {
    }
  }
);
  final TestClass extension=new TestClass();
  myExtensionsArea.getExtensionPoint("test.ep").registerExtension(extension);
  myExtensionsArea.unregisterExtension("test",element);
  myExtensionsArea.getExtensionPoint("test.ep").unregisterExtension(extension);
}
