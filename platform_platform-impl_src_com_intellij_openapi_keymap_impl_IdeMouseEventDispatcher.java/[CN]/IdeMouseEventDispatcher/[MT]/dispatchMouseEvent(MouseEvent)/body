{
  Component c=e.getComponent();
  if (e.getID() == MOUSE_PRESSED && c instanceof IdeFrame && !c.hasFocus()) {
    IdeFocusManager focusManager=IdeFocusManager.getGlobalInstance();
    if (focusManager instanceof FocusManagerImpl) {
      Component at=SwingUtilities.getDeepestComponentAt(c,e.getX(),e.getY());
      if (at != null && at.isFocusable()) {
        ((FocusManagerImpl)focusManager).setLastFocusedAtDeactivation((IdeFrame)c,at);
      }
    }
  }
  if (SystemInfo.isXWindow && e.isPopupTrigger() && e.getButton() != 3) {
    resetPopupTrigger(e);
  }
  boolean ignore=false;
  if (!(e.getID() == MouseEvent.MOUSE_PRESSED || e.getID() == MouseEvent.MOUSE_RELEASED || e.getID() == MOUSE_WHEEL && 0 < e.getModifiersEx() || e.getID() == MOUSE_CLICKED)) {
    ignore=true;
  }
  patchClickCount(e);
  int clickCount=e.getClickCount();
  int button=MouseShortcut.getButton(e);
  if (button == MouseShortcut.BUTTON_WHEEL_UP || button == MouseShortcut.BUTTON_WHEEL_DOWN) {
    clickCount=1;
  }
  if (e.isConsumed() || e.isPopupTrigger() || (button > 3 ? e.getID() != MOUSE_PRESSED && e.getID() != MOUSE_WHEEL : e.getID() != MOUSE_RELEASED)|| clickCount < 1 || button == NOBUTTON) {
    ignore=true;
  }
  @JdkConstants.InputEventMask int modifiers=e.getModifiers();
  @JdkConstants.InputEventMask int modifiersEx=e.getModifiersEx();
  if (e.getID() == MOUSE_PRESSED) {
    myPressedModifiersStored=true;
    myModifiers=modifiers;
    myModifiersEx=modifiersEx;
  }
 else   if (e.getID() == MOUSE_RELEASED) {
    myForceTouchIsAllowed=true;
    if (myPressedModifiersStored) {
      myPressedModifiersStored=false;
      modifiers=myModifiers;
      modifiersEx=myModifiersEx;
    }
  }
  final JRootPane root=findRoot(e);
  if (root != null) {
    BlockState blockState=myRootPane2BlockedId.get(root);
    if (blockState != null) {
      if (SWING_EVENTS_PRIORITY.indexOf(blockState.currentEventId) < SWING_EVENTS_PRIORITY.indexOf(e.getID())) {
        blockState.currentEventId=e.getID();
        if (blockState.blockMode == IdeEventQueue.BlockMode.COMPLETE) {
          return true;
        }
 else {
          ignore=true;
        }
      }
 else {
        myRootPane2BlockedId.remove(root);
      }
    }
  }
  if (c == null) {
    throw new IllegalStateException("component cannot be null");
  }
  c=SwingUtilities.getDeepestComponentAt(c,e.getX(),e.getY());
  if (c instanceof IdeGlassPaneImpl) {
    c=((IdeGlassPaneImpl)c).getTargetComponentFor(e);
  }
  if (c == null) {
    return false;
  }
  if (c instanceof MouseShortcutPanel || c.getParent() instanceof MouseShortcutPanel) {
    return false;
  }
  if (isHorizontalScrolling(c,e)) {
    boolean done=doHorizontalScrolling(c,(MouseWheelEvent)e);
    if (done)     return true;
  }
  if (ignore)   return false;
  if (!KeymapManagerImpl.ourKeymapManagerInitialized) {
    return false;
  }
  final MouseShortcut shortcut=new MouseShortcut(button,modifiersEx,clickCount);
  fillActionsList(c,shortcut,IdeKeyEventDispatcher.isModalContext(c));
  ActionManagerEx actionManager=ActionManagerEx.getInstanceEx();
  if (actionManager != null) {
    AnAction[] actions=myActions.toArray(new AnAction[myActions.size()]);
    for (    AnAction action : actions) {
      DataContext dataContext=DataManager.getInstance().getDataContext(c);
      Presentation presentation=myPresentationFactory.getPresentation(action);
      AnActionEvent actionEvent=new AnActionEvent(e,dataContext,ActionPlaces.MAIN_MENU,presentation,ActionManager.getInstance(),modifiers);
      action.beforeActionPerformedUpdate(actionEvent);
      if (presentation.isEnabled()) {
        actionManager.fireBeforeActionPerformed(action,dataContext,actionEvent);
        final Component context=PlatformDataKeys.CONTEXT_COMPONENT.getData(dataContext);
        if (context != null && !context.isShowing())         continue;
        action.actionPerformed(actionEvent);
        e.consume();
      }
    }
  }
  return e.getButton() > 3;
}
