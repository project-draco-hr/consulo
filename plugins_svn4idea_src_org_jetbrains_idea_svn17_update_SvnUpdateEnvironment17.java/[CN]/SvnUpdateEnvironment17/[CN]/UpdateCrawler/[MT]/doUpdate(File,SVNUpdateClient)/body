{
  final long rev;
  final SvnConfiguration17 configuration=SvnConfiguration17.getInstance(myVcs.getProject());
  final UpdateRootInfo rootInfo=configuration.getUpdateRootInfo(root,myVcs);
  final SVNUpdateClient updateClient=myVcs.createUpdateClient();
  updateClient.setEventHandler(myHandler);
  updateClient.setUpdateLocksOnDemand(configuration.UPDATE_LOCK_ON_DEMAND);
  if (rootInfo != null) {
    final SVNURL url=rootInfo.getUrl();
    if (url != null && url.equals(getSourceUrl(myVcs,root))) {
      if (rootInfo.isUpdateToRevision()) {
        rev=updateClient.doUpdate(root,rootInfo.getRevision(),configuration.UPDATE_DEPTH,configuration.FORCE_UPDATE,false);
      }
 else {
        rev=updateClient.doUpdate(root,SVNRevision.HEAD,configuration.UPDATE_DEPTH,configuration.FORCE_UPDATE,false);
      }
    }
 else     if (url != null) {
      rev=updateClient.doSwitch(root,url,SVNRevision.UNDEFINED,rootInfo.getRevision(),configuration.UPDATE_DEPTH,configuration.FORCE_UPDATE,false);
    }
 else {
      rev=updateClient.doUpdate(root,SVNRevision.HEAD,configuration.UPDATE_DEPTH,configuration.FORCE_UPDATE,false);
    }
  }
 else {
    rev=updateClient.doUpdate(root,SVNRevision.HEAD,configuration.UPDATE_DEPTH,configuration.FORCE_UPDATE,false);
  }
  myPostUpdateFiles.setRevisions(root.getAbsolutePath(),myVcs,new SvnRevisionNumber(SVNRevision.create(rev)));
  return rev;
}
