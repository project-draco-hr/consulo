{
  final PsiMember member=PsiTreeUtil.getParentOfType(expression,PsiMethod.class,PsiClassInitializer.class,PsiField.class);
  if (member == null) {
    return false;
  }
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  final PsiExpression qualifier=methodExpression.getQualifierExpression();
  if (qualifier != null) {
    if (!(qualifier instanceof PsiThisExpression || qualifier instanceof PsiSuperExpression)) {
      return false;
    }
  }
  final PsiClass containingClass=member.getContainingClass();
  if (containingClass == null || containingClass.hasModifierProperty(PsiModifier.FINAL)) {
    return false;
  }
  if (member instanceof PsiClassInitializer) {
    final PsiClassInitializer classInitializer=(PsiClassInitializer)member;
    if (!classInitializer.hasModifierProperty(PsiModifier.STATIC)) {
      return true;
    }
  }
 else   if (member instanceof PsiMethod) {
    final PsiMethod method=(PsiMethod)member;
    if (method.isConstructor()) {
      return true;
    }
    if (CloneUtils.isClone(method)) {
      return true;
    }
    if (MethodUtils.simpleMethodMatches(method,null,"void","readObject","java.io.ObjectInputStream")) {
      return true;
    }
    return MethodUtils.simpleMethodMatches(method,null,"void","readObjectNoData");
  }
 else   if (member instanceof PsiField) {
    final PsiField field=(PsiField)member;
    if (!field.hasModifierProperty(PsiModifier.STATIC)) {
      return true;
    }
  }
  return false;
}
