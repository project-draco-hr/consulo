{
  final PsiStatement initialization=getPreviousStatement(whileStatement);
  if (initialization == null) {
    return false;
  }
  if (!(initialization instanceof PsiDeclarationStatement)) {
    return false;
  }
  final PsiDeclarationStatement declaration=(PsiDeclarationStatement)initialization;
  if (declaration.getDeclaredElements().length != 1) {
    return false;
  }
  final PsiLocalVariable declaredVar=(PsiLocalVariable)declaration.getDeclaredElements()[0];
  final PsiType declaredVarType=declaredVar.getType();
  if (!(declaredVarType instanceof PsiClassType)) {
    return false;
  }
  final PsiClassType classType=(PsiClassType)declaredVarType;
  final PsiClass declaredClass=classType.resolve();
  if (declaredClass == null) {
    return false;
  }
  if (!ClassUtils.isSubclass(declaredClass,"java.util.Iterator")) {
    return false;
  }
  final PsiExpression initialValue=declaredVar.getInitializer();
  if (initialValue == null) {
    return false;
  }
  if (!(initialValue instanceof PsiMethodCallExpression)) {
    return false;
  }
  final PsiMethodCallExpression initialCall=(PsiMethodCallExpression)initialValue;
  final PsiReferenceExpression initialMethodExpression=initialCall.getMethodExpression();
  if (initialMethodExpression == null) {
    return false;
  }
  final String initialCallName=initialMethodExpression.getReferenceName();
  if (!"iterator".equals(initialCallName)) {
    return false;
  }
  final PsiExpression qualifier=initialMethodExpression.getQualifierExpression();
  final PsiType qualifierType=qualifier.getType();
  if (!(qualifierType instanceof PsiClassType)) {
    return false;
  }
  final PsiClass qualifierClass=((PsiClassType)qualifierType).resolve();
  if (!ClassUtils.isSubclass(qualifierClass,"java.lang.Iterable")) {
    return false;
  }
  final String iteratorName=declaredVar.getName();
  final PsiExpression condition=whileStatement.getCondition();
  if (!isHasNext(condition,iteratorName)) {
    return false;
  }
  final PsiStatement body=whileStatement.getBody();
  if (body == null) {
    return false;
  }
  if (calculateCallsToIteratorNext(iteratorName,body) != 1) {
    return false;
  }
  if (isIteratorRemoveCalled(iteratorName,body)) {
    return false;
  }
  return !isIteratorAssigned(iteratorName,body);
}
