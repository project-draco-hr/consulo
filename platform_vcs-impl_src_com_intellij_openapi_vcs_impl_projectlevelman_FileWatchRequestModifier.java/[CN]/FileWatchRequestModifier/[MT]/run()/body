{
  if ((!myProject.isInitialized()) || myProject.isDisposed())   return;
  final List<VcsDirectoryMapping> copy=myNewMappings.getDirectoryMappings();
  final List<VcsDirectoryMapping> added=new LinkedList<VcsDirectoryMapping>(copy);
  added.removeAll(myDirectoryMappingWatches.keySet());
  final List<VcsDirectoryMapping> deleted=new LinkedList<VcsDirectoryMapping>(myDirectoryMappingWatches.keySet());
  deleted.removeAll(copy);
  final Map<String,VcsDirectoryMapping> toAdd=new HashMap<String,VcsDirectoryMapping>();
  for (  VcsDirectoryMapping mapping : added) {
    if (!mapping.isDefaultMapping()) {
      toAdd.put(mapping.getDirectory(),mapping);
    }
  }
  final Collection<LocalFileSystem.WatchRequest> toRemove=new ArrayList<LocalFileSystem.WatchRequest>();
  for (  VcsDirectoryMapping mapping : deleted) {
    if (mapping.isDefaultMapping())     continue;
    final LocalFileSystem.WatchRequest removed=myDirectoryMappingWatches.remove(mapping);
    if (removed != null) {
      toRemove.add(removed);
    }
  }
  final Set<LocalFileSystem.WatchRequest> requests=myLfs.replaceWatchedRoots(toRemove,toAdd.keySet(),true);
  for (  LocalFileSystem.WatchRequest request : requests) {
    myDirectoryMappingWatches.put(toAdd.get(request.getRootPath()),request);
  }
}
