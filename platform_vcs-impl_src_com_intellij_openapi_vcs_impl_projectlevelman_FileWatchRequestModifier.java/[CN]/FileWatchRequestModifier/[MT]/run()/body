{
  if (!myProject.isInitialized() || myProject.isDisposed())   return;
  final List<VcsDirectoryMapping> copy=myNewMappings.getDirectoryMappings();
  final List<VcsDirectoryMapping> added=newLinkedList(copy);
  added.removeAll(myDirectoryMappingWatches.keySet());
  final List<VcsDirectoryMapping> deleted=newLinkedList(myDirectoryMappingWatches.keySet());
  deleted.removeAll(copy);
  final Map<String,VcsDirectoryMapping> toAdd=ContainerUtil.newTroveMap(FileUtil.PATH_HASHING_STRATEGY);
  for (  VcsDirectoryMapping mapping : added) {
    if (!mapping.isDefaultMapping()) {
      toAdd.put(FileUtil.toCanonicalPath(mapping.getDirectory()),mapping);
    }
  }
  final Collection<LocalFileSystem.WatchRequest> toRemove=newLinkedList();
  for (  VcsDirectoryMapping mapping : deleted) {
    if (mapping.isDefaultMapping())     continue;
    final LocalFileSystem.WatchRequest removed=myDirectoryMappingWatches.remove(mapping);
    if (removed != null) {
      toRemove.add(removed);
    }
  }
  final Set<LocalFileSystem.WatchRequest> requests=myLfs.replaceWatchedRoots(toRemove,toAdd.keySet(),null);
  for (  LocalFileSystem.WatchRequest request : requests) {
    final VcsDirectoryMapping mapping=toAdd.get(request.getRootPath());
    if (mapping != null) {
      myDirectoryMappingWatches.put(mapping,request);
    }
 else {
      LOG.error("root=" + request.getRootPath() + " toAdd="+ toAdd.keySet());
    }
  }
}
