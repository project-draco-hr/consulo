{
  try {
    handler.checkApplicability(psiFile,editor);
  }
 catch (  IncorrectOperationException ex) {
    CommonRefactoringUtil.showErrorHint(project,editor,ex.getMessage(),CodeInsightBundle.message("i18nize.error.title"),null);
    return;
  }
  final JavaI18nizeQuickFixDialog dialog=handler.createDialog(project,editor,psiFile);
  if (dialog == null)   return;
  dialog.show();
  if (!dialog.isOK())   return;
  if (!FileModificationService.getInstance().prepareFileForWrite(psiFile))   return;
  final Collection<PropertiesFile> propertiesFiles=dialog.getAllPropertiesFiles();
  for (  PropertiesFile file : propertiesFiles) {
    if (!FileModificationService.getInstance().prepareFileForWrite(file.getContainingFile()))     return;
  }
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      CommandProcessor.getInstance().executeCommand(project,new Runnable(){
        public void run(){
          try {
            handler.performI18nization(psiFile,editor,dialog.getLiteralExpression(),propertiesFiles,dialog.getKey(),StringUtil.unescapeStringCharacters(dialog.getValue()),dialog.getI18nizedText(),dialog.getParameters(),dialog.getPropertyCreationHandler());
          }
 catch (          IncorrectOperationException e) {
            LOG.error(e);
          }
        }
      }
,CodeInsightBundle.message("quickfix.i18n.command.name"),project);
    }
  }
);
}
