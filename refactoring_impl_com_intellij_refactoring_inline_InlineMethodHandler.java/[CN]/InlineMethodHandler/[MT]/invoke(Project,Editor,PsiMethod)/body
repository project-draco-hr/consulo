{
  method=(PsiMethod)method.getNavigationElement();
  if (method.getBody() == null) {
    String message;
    if (method.hasModifierProperty(PsiModifier.ABSTRACT)) {
      message=RefactoringBundle.message("refactoring.cannot.be.applied.to.abstract.methods",REFACTORING_NAME);
    }
 else {
      message=RefactoringBundle.message("refactoring.cannot.be.applied.no.sources.attached",REFACTORING_NAME);
    }
    CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,message,HelpID.INLINE_METHOD,project);
    return;
  }
  PsiReference reference=editor != null ? TargetElementUtil.findReference(editor,editor.getCaretModel().getOffset()) : null;
  boolean allowInlineThisOnly=false;
  if (InlineMethodProcessor.checkBadReturns(method) && !allUsagesAreTailCalls(method)) {
    if (reference != null && isTailCall(reference)) {
      allowInlineThisOnly=true;
    }
 else {
      String message=RefactoringBundle.message("refactoring.is.not.supported.when.return.statement.interrupts.the.execution.flow",REFACTORING_NAME);
      CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,message,HelpID.INLINE_METHOD,project);
      return;
    }
  }
  if (reference == null && checkRecursive(method)) {
    String message=RefactoringBundle.message("refactoring.is.not.supported.for.recursive.methods",REFACTORING_NAME);
    CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,message,HelpID.INLINE_METHOD,project);
    return;
  }
  if (method.isConstructor()) {
    if (method.isVarArgs()) {
      String message=RefactoringBundle.message("refactoring.cannot.be.applied.to.vararg.constructors",REFACTORING_NAME);
      CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,message,HelpID.INLINE_CONSTRUCTOR,project);
      return;
    }
    if (!isChainingConstructor(method)) {
      String message=RefactoringBundle.message("refactoring.cannot.be.applied.to.inline.non.chaining.constructors",REFACTORING_NAME);
      CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,message,HelpID.INLINE_CONSTRUCTOR,project);
      return;
    }
    if (reference != null) {
      PsiCall constructorCall=RefactoringUtil.getEnclosingConstructorCall((PsiJavaCodeReferenceElement)reference.getElement());
      if (constructorCall == null || !method.equals(constructorCall.resolveMethod()))       reference=null;
    }
  }
 else {
    if (reference != null && !method.getManager().areElementsEquivalent(method,reference.resolve())) {
      reference=null;
    }
  }
  final boolean invokedOnReference=reference != null;
  if (!invokedOnReference) {
    final VirtualFile vFile=method.getContainingFile().getVirtualFile();
    ReadonlyStatusHandler.getInstance(project).ensureFilesWritable(vFile);
  }
  PsiJavaCodeReferenceElement refElement=reference != null ? (PsiJavaCodeReferenceElement)reference.getElement() : null;
  InlineMethodDialog dialog=new InlineMethodDialog(project,method,refElement,editor,allowInlineThisOnly);
  dialog.show();
}
