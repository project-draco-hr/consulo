{
  super.findExistingNameConflicts(element,newName,conflicts);
  GrField field=(GrField)element;
  final PsiClass containingClass=field.getContainingClass();
  if (containingClass == null)   return;
  final PsiMethod getter=findGetterForField(field);
  if (getter instanceof GrAccessorMethod) {
    final PsiMethod newGetter=PropertyUtil.findPropertyGetter(containingClass,newName,field.hasModifierProperty(PsiModifier.STATIC),true);
    if (newGetter != null && !(newGetter instanceof GrAccessorMethod)) {
      conflicts.putValue(newGetter,GroovyRefactoringBundle.message("implicit.getter.will.by.overriden.by.method",field.getName(),newGetter.getName()));
    }
  }
  final PsiMethod setter=findSetterForField(field);
  if (setter instanceof GrAccessorMethod) {
    final PsiMethod newSetter=PropertyUtil.findPropertySetter(containingClass,newName,field.hasModifierProperty(PsiModifier.STATIC),true);
    if (newSetter != null && !(newSetter instanceof GrAccessorMethod)) {
      conflicts.putValue(newSetter,GroovyRefactoringBundle.message("implicit.setter.will.by.overriden.by.method",field.getName(),newSetter.getName()));
    }
  }
}
