{
  super(project,context,recentsId);
  myRecentIdx=DebuggerRecents.getInstance(getProject()).getRecents(getRecentsId()).size();
  myEditor=new EditorTextField("",project,StdFileTypes.JAVA){
    protected EditorEx createEditor(){
      EditorEx editor=super.createEditor();
      editor.setOneLineMode(false);
      return editor;
    }
  }
;
  setLayout(new BorderLayout());
  add(myEditor,BorderLayout.CENTER);
  DefaultActionGroup actionGroup=new DefaultActionGroup(null,false);
  actionGroup.add(new ItemAction(IdeActions.ACTION_PREVIOUS_OCCURENCE,this){
    public void actionPerformed(    AnActionEvent e){
      LOG.assertTrue(myRecentIdx > 0);
      myRecentIdx--;
      updateTextFromRecents();
    }
    public void update(    AnActionEvent e){
      e.getPresentation().setEnabled(myRecentIdx > 0);
    }
  }
);
  actionGroup.add(new ItemAction(IdeActions.ACTION_NEXT_OCCURENCE,this){
    public void actionPerformed(    AnActionEvent e){
      if (LOG.isDebugEnabled()) {
        LinkedList<TextWithImportsImpl> recents=DebuggerRecents.getInstance(getProject()).getRecents(getRecentsId());
        LOG.assertTrue(myRecentIdx < recents.size());
      }
      myRecentIdx++;
      updateTextFromRecents();
    }
    public void update(    AnActionEvent e){
      LinkedList<TextWithImportsImpl> recents=DebuggerRecents.getInstance(getProject()).getRecents(getRecentsId());
      e.getPresentation().setEnabled(myRecentIdx < recents.size());
    }
  }
);
  add(ActionManager.getInstance().createActionToolbar(ActionPlaces.COMBO_PAGER,actionGroup,false).getComponent(),BorderLayout.EAST);
  setText(EvaluationManager.getInstance().getEmptyExpressionFragment());
}
