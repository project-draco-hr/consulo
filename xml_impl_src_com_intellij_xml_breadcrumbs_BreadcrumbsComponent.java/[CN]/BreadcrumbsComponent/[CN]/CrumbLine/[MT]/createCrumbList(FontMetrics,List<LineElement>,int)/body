{
  if (elements.size() == 0) {
    return null;
  }
  final LinkedList<Crumb> result=new LinkedList<Crumb>();
  int screenWidth=0;
  Crumb rightmostCrumb=null;
  for (int i=elements.size() - 1; i >= 0; i--) {
    final NavigationCrumb forward=new NavigationCrumb(this,fm,true,DEFAULT_PAINTER);
    final NavigationCrumb backward=new NavigationCrumb(this,fm,false,DEFAULT_PAINTER);
    final LineElement element=elements.get(i);
    final String s=element.getInfoString();
    final Dimension d=DEFAULT_PAINTER.getSize(s,fm,width - forward.getWidth() - backward.getWidth());
    final Crumb crumb=new Crumb(this,s,d.width,element);
    if (screenWidth + d.width > width) {
      Crumb first=null;
      if (screenWidth + backward.getWidth() > width && !result.isEmpty()) {
        first=result.removeFirst();
        screenWidth-=first.getWidth();
      }
      result.addFirst(backward);
      screenWidth+=backward.getWidth();
      int dummyWidth=width - screenWidth;
      if (dummyWidth > 0) {
        final DummyCrumb dummy=new DummyCrumb(dummyWidth);
        if (rightmostCrumb != null) {
          result.add(result.indexOf(rightmostCrumb) + 1,dummy);
        }
 else {
          result.addLast(dummy);
        }
      }
      screenWidth=forward.getWidth();
      result.addFirst(forward);
      if (first != null) {
        result.addFirst(first);
        screenWidth+=first.getWidth();
      }
      rightmostCrumb=(first != null) ? first : crumb;
    }
    result.addFirst(crumb);
    screenWidth+=d.width;
  }
  if (rightmostCrumb != null && screenWidth < width) {
    int index=result.indexOf(rightmostCrumb);
    for (int i=index + 1; i < result.size(); i++) {
      final Crumb crumb=result.get(i);
      if (crumb instanceof NavigationCrumb || crumb instanceof DummyCrumb) {
        continue;
      }
      if (screenWidth + crumb.getWidth() < width) {
        result.add(++index,new Crumb(this,crumb.getString(),crumb.getWidth(),crumb.getElement()));
        screenWidth+=crumb.getWidth();
        i++;
      }
 else {
        break;
      }
    }
    if (screenWidth < width) {
      result.add(index + 1,new DummyCrumb(width - screenWidth));
    }
  }
  int offset=0;
  for (  final Crumb each : result) {
    each.setOffset(offset);
    offset+=each.getWidth();
  }
  if (result.size() > 0) {
    for (int i=result.size() - 1; i >= 0; i--) {
      final Crumb c=result.get(i);
      if (!(c instanceof DummyCrumb)) {
        c.setSelected(true);
        break;
      }
    }
  }
  return result;
}
