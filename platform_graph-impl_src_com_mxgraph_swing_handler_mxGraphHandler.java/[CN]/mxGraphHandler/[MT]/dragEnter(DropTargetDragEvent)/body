{
  JComponent component=getDropTarget(e);
  TransferHandler th=component.getTransferHandler();
  boolean isLocal=th instanceof mxGraphTransferHandler && ((mxGraphTransferHandler)th).isLocalDrag();
  if (isLocal) {
    canImport=true;
  }
 else {
    canImport=graphComponent.isImportEnabled() && th.canImport(component,e.getCurrentDataFlavors());
  }
  if (canImport) {
    transferBounds=null;
    setVisible(false);
    try {
      Transferable t=e.getTransferable();
      if (t.isDataFlavorSupported(mxGraphTransferable.dataFlavor)) {
        mxGraphTransferable gt=(mxGraphTransferable)t.getTransferData(mxGraphTransferable.dataFlavor);
        dragCells=gt.getCells();
        if (gt.getBounds() != null) {
          mxGraph graph=graphComponent.getGraph();
          double scale=graph.getView().getScale();
          transferBounds=gt.getBounds();
          int w=(int)Math.ceil((transferBounds.getWidth() + 1) * scale);
          int h=(int)Math.ceil((transferBounds.getHeight() + 1) * scale);
          setPreviewBounds(new Rectangle((int)transferBounds.getX(),(int)transferBounds.getY(),w,h));
          if (imagePreview) {
            if (isLocal) {
              if (!isLivePreview()) {
                updateDragImage(graph.getMovableCells(dragCells));
              }
            }
 else {
              Object[] tmp=graphComponent.getImportableCells(dragCells);
              updateDragImage(tmp);
              if (tmp == null || tmp.length == 0) {
                canImport=false;
                e.rejectDrag();
                return;
              }
            }
          }
          setVisible(true);
        }
      }
      e.acceptDrag(TransferHandler.COPY_OR_MOVE);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
 else {
    e.rejectDrag();
  }
}
