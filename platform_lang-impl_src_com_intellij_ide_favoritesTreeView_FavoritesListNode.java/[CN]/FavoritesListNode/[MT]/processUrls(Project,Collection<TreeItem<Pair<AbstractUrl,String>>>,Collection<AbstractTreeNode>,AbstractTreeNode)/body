{
  for (  TreeItem<Pair<AbstractUrl,String>> pair : urls) {
    AbstractUrl abstractUrl=pair.getData().getFirst();
    final Object[] path=abstractUrl.createPath(project);
    if (path == null || path.length < 1 || path[0] == null) {
      continue;
    }
    try {
      final String className=pair.getData().getSecond();
      @SuppressWarnings("unchecked") final Class<? extends AbstractTreeNode> nodeClass=(Class<? extends AbstractTreeNode>)Class.forName(className);
      final AbstractTreeNode node=ProjectViewNode.createTreeNode(nodeClass,project,path[path.length - 1],FavoritesManager.getInstance(project).getViewSettings());
      node.setParent(me);
      node.setIndex(result.size());
      result.add(node);
      if (node instanceof ProjectViewNodeWithChildrenList) {
        final List<TreeItem<Pair<AbstractUrl,String>>> children=pair.getChildren();
        if (children != null && !children.isEmpty()) {
          Collection<AbstractTreeNode> childList=new ArrayList<AbstractTreeNode>();
          processUrls(project,children,childList,node);
          for (          AbstractTreeNode treeNode : childList) {
            ((ProjectViewNodeWithChildrenList)node).addChild(treeNode);
          }
        }
      }
    }
 catch (    Exception ignored) {
    }
  }
}
