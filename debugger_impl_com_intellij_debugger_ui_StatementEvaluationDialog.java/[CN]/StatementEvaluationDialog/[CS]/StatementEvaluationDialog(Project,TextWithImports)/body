{
  super(project,text);
  setTitle(DebuggerBundle.message("evaluate.statement.dialog.title"));
  myPanel=new JPanel(new BorderLayout());
  final Splitter splitter=new Splitter(true);
  splitter.setHonorComponentsMinimumSize(true);
  final JPanel editorPanel=new JPanel(new GridBagLayout());
  myLanguageLabel=new JLabel(DebuggerBundle.message("label.evaluate.dialog.language"));
  myLanguageLabel.setVisible(getCodeFragmentFactoryChooserComponent().isVisible());
  editorPanel.add(myLanguageLabel,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,0,0,0),0,0));
  editorPanel.add(getCodeFragmentFactoryChooserComponent(),new GridBagConstraints(1,GridBagConstraints.RELATIVE,1,1,0.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(5,0,0,0),0,0));
  final JLabel statementsLabel=new JLabel(DebuggerBundle.message("label.evaluation.dialog.statements"));
  editorPanel.add(statementsLabel,new GridBagConstraints(0,GridBagConstraints.RELATIVE,2,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,0,0,0),0,0));
  editorPanel.add(getStatementEditor(),new GridBagConstraints(0,GridBagConstraints.RELATIVE,2,1,1.0,1.0,GridBagConstraints.CENTER,GridBagConstraints.BOTH,new Insets(2,0,0,0),0,0));
  splitter.setFirstComponent(editorPanel);
  final EvaluationDialog.MyEvaluationPanel evaluationPanel=getEvaluationPanel();
  final JPanel ep=new JPanel(new BorderLayout());
  final JLabel resultLabel=new JLabel(DebuggerBundle.message("label.evaluate.dialog.result"));
  ep.add(resultLabel,BorderLayout.NORTH);
  ep.add(evaluationPanel,BorderLayout.CENTER);
  splitter.setSecondComponent(ep);
  final Dimension statementSize=DimensionService.getInstance().getSize(STATEMENT_EDITOR_DIMENSION_KEY,project);
  final Dimension evaluationSize=DimensionService.getInstance().getSize(EVALUATION_PANEL_DIMENSION_KEY,project);
  if (statementSize != null && evaluationSize != null) {
    final float proportion=(float)statementSize.height / (float)(statementSize.height + evaluationSize.height);
    splitter.setProportion(proportion);
  }
  myPanel.add(splitter,BorderLayout.CENTER);
  setDebuggerContext(getDebuggerContext());
  final KeyStroke codeFragment=KeyStroke.getKeyStroke(KeyEvent.VK_E,KeyEvent.ALT_MASK);
  final KeyStroke resultStroke=KeyStroke.getKeyStroke(KeyEvent.VK_R,KeyEvent.ALT_MASK);
  final KeyStroke altEnter=KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,KeyEvent.CTRL_MASK);
  final JRootPane rootPane=getRootPane();
  final AnAction toStatementAction=new AnAction(){
    public void actionPerformed(    AnActionEvent e){
      getStatementEditor().requestFocus();
    }
  }
;
  toStatementAction.registerCustomShortcutSet(new CustomShortcutSet(codeFragment),rootPane);
  addDisposeRunnable(new Runnable(){
    public void run(){
      toStatementAction.unregisterCustomShortcutSet(rootPane);
    }
  }
);
  final AnAction toEvaluationAction=new AnAction(){
    public void actionPerformed(    AnActionEvent e){
      getEvaluationPanel().getWatchTree().requestFocus();
    }
  }
;
  toEvaluationAction.registerCustomShortcutSet(new CustomShortcutSet(resultStroke),rootPane);
  addDisposeRunnable(new Runnable(){
    public void run(){
      toEvaluationAction.unregisterCustomShortcutSet(rootPane);
    }
  }
);
  final AnAction okAction=new AnAction(){
    public void actionPerformed(    AnActionEvent e){
      doOKAction();
    }
  }
;
  okAction.registerCustomShortcutSet(new CustomShortcutSet(altEnter),rootPane);
  addDisposeRunnable(new Runnable(){
    public void run(){
      okAction.unregisterCustomShortcutSet(rootPane);
    }
  }
);
  final DebuggerEditorImpl editor=getEditor();
  final DocumentAdapter docListener=new DocumentAdapter(){
    public void documentChanged(    final DocumentEvent e){
      DebuggerInvocationUtil.invokeLater(getProject(),new Runnable(){
        public void run(){
          updateSwitchButton(e.getDocument());
        }
      }
);
    }
  }
;
  editor.addDocumentListener(docListener);
  addDisposeRunnable(new Runnable(){
    public void run(){
      editor.removeDocumentListener(docListener);
    }
  }
);
  this.init();
}
