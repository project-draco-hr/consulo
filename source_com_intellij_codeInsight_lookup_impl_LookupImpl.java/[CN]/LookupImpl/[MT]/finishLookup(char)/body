{
  final LookupItem item=(LookupItem)myList.getSelectedValue();
  if (item == null) {
    hide();
    return;
  }
  if (item.getObject() instanceof DeferredUserLookupValue) {
    if (!((DeferredUserLookupValue)item.getObject()).handleUserSelection(item,myProject)) {
      hide();
      return;
    }
  }
  final String s=item.getLookupString();
  final int prefixLength=myPrefix.length();
  if (item.getAttribute(EMPTY_ITEM_ATTRIBUTE) != null) {
    hide();
    return;
  }
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      myCanceled=false;
      hide();
      int lookupStart=myLookupStartMarker.getStartOffset();
      LogicalPosition lookupPosition=myEditor.offsetToLogicalPosition(lookupStart);
      myEditor.getCaretModel().moveToLogicalPosition(lookupPosition);
      if (myEditor.getSelectionModel().hasSelection()) {
        myEditor.getDocument().deleteString(myEditor.getSelectionModel().getSelectionStart(),myEditor.getSelectionModel().getSelectionEnd());
      }
      if (s.startsWith(myPrefix)) {
        myEditor.getDocument().insertString(lookupStart + prefixLength,s.substring(prefixLength));
      }
 else {
        if (prefixLength > 0) {
          myEditor.getDocument().deleteString(lookupStart,lookupStart + prefixLength);
        }
        myEditor.getDocument().insertString(lookupStart,s);
      }
      int offset=lookupStart + s.length();
      myEditor.getCaretModel().moveToOffset(offset);
      myEditor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
      myEditor.getSelectionModel().removeSelection();
      fireItemSelected(item,completionChar);
    }
  }
);
}
