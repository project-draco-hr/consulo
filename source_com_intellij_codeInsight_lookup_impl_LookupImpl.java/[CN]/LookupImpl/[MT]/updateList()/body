{
  final String pattern=NameUtil.buildRegexp(myPrefix,0);
  final Pattern compiledPattern=Pattern.compile(pattern);
  final Matcher matcher=compiledPattern.matcher("");
  Object oldSelected=myList.getSelectedValue();
  DefaultListModel model=new DefaultListModel();
  ArrayList<LookupItem> array=new ArrayList<LookupItem>();
  String prefix=myPrefix.toLowerCase();
  for (int i=0; i < myItems.length; i++) {
    LookupItem item=myItems[i];
    String text=item.getLookupString();
    if (text.toLowerCase().startsWith(prefix) || matcher.reset(text).matches()) {
      model.addElement(item);
      array.add(item);
    }
  }
  boolean isEmpty=array.size() == 0;
  if (isEmpty) {
    LookupItem item=new LookupItem("No suggestions","");
    item.setAttribute(EMPTY_ITEM_ATTRIBUTE,"");
    model.addElement(item);
    array.add(item);
  }
  myList.setModel(model);
  myList.setVisibleRowCount(Math.min(myList.getModel().getSize(),CodeInsightSettings.getInstance().LOOKUP_HEIGHT));
  if (!isEmpty) {
    selectMostPreferableItem();
    if (myIndex >= 0) {
      ListScrollingUtil.selectItem(myList,myIndex);
    }
 else {
      if (oldSelected == null || !ListScrollingUtil.selectItem(myList,oldSelected)) {
        ListScrollingUtil.selectItem(myList,0);
      }
    }
  }
  LookupItem[] items=array.toArray(new LookupItem[array.size()]);
  int maxWidth=myCellRenderer.getMaximumWidth(items);
  myList.setFixedCellWidth(maxWidth);
}
