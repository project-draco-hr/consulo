{
  final JavaParameters parameters=new JavaParameters();
  parameters.getClassPath().add(tempPath);
  parameters.getClassPath().add(PathManager.findFileInLibDirectory("jgoodies-forms.jar").getAbsolutePath());
  final List<String> paths=sources.getPathList();
  for (  final String path : paths) {
    parameters.getClassPath().add(path);
  }
  try {
    parameters.configureByModule(module,JavaParameters.JDK_AND_CLASSES);
  }
 catch (  CantRunException e) {
    Messages.showErrorDialog(module.getProject(),UIDesignerBundle.message("error.cannot.preview.form",formFile.getPath().replace('/',File.separatorChar),e.getMessage()),CommonBundle.getErrorTitle());
    return;
  }
  parameters.setMainClass("FormPreviewFrame");
  parameters.setWorkingDirectory(tempPath);
  if (stringDescriptorLocale != null && stringDescriptorLocale.getDisplayName().length() > 0) {
    parameters.getVMParametersList().add("-Duser.language=" + stringDescriptorLocale.getLanguage());
  }
  try {
    final RunProfile profile=new MyRunProfile(module,parameters,UIDesignerBundle.message("progress.preview.started",formFile.getPresentableUrl()));
    ProgramRunner defaultRunner=RunnerRegistry.getInstance().getRunner(DefaultRunExecutor.EXECUTOR_ID,profile);
    LOG.assertTrue(defaultRunner != null);
    defaultRunner.execute(DefaultRunExecutor.getRunExecutorInstance(),new ExecutionEnvironment(profile,new DataContext(){
      public Object getData(      String dataId){
        if (dataId.equals(DataConstants.PROJECT)) {
          return module.getProject();
        }
        return dataContext.getData(dataId);
      }
    }
));
  }
 catch (  ExecutionException e) {
    Messages.showErrorDialog(module.getProject(),UIDesignerBundle.message("error.cannot.preview.form",formFile.getPath().replace('/',File.separatorChar),e.getMessage()),CommonBundle.getErrorTitle());
  }
}
