{
  for (  Element contentElement : getChildren(rootModelComponent,CONTENT_TAG)) {
    final String url=contentElement.getAttributeValue(URL_ATTRIBUTE);
    module.getContentRootsList().addUrl(url);
    for (    Element sourceElement : getChildren(contentElement,SOURCE_FOLDER_TAG)) {
      final String sourceUrl=sourceElement.getAttributeValue(URL_ATTRIBUTE);
      final String packagePrefix=StringUtil.notNullize(sourceElement.getAttributeValue(PACKAGE_PREFIX_ATTRIBUTE));
      final boolean testSource=Boolean.parseBoolean(sourceElement.getAttributeValue(IS_TEST_SOURCE_ATTRIBUTE));
      final JavaSourceRootType rootType=testSource ? JavaSourceRootType.TEST_SOURCE : JavaSourceRootType.SOURCE;
      module.addSourceRoot(sourceUrl,rootType,JpsElementFactory.getInstance().createSimpleElement(new JavaSourceRootProperties(packagePrefix)));
    }
    for (    Element excludeElement : getChildren(contentElement,EXCLUDE_FOLDER_TAG)) {
      module.getExcludeRootsList().addUrl(excludeElement.getAttributeValue(URL_ATTRIBUTE));
    }
  }
  final JpsDependenciesList dependenciesList=module.getDependenciesList();
  final JpsElementFactory elementFactory=JpsElementFactory.getInstance();
  int moduleLibraryNum=0;
  for (  Element orderEntry : getChildren(rootModelComponent,ORDER_ENTRY_TAG)) {
    String type=orderEntry.getAttributeValue(TYPE_ATTRIBUTE);
    if (SOURCE_FOLDER_TYPE.equals(type)) {
      dependenciesList.addModuleSourceDependency();
    }
 else     if (JDK_TYPE.equals(type)) {
      String sdkName=orderEntry.getAttributeValue(JDK_NAME_ATTRIBUTE);
      String sdkTypeId=orderEntry.getAttributeValue(JDK_TYPE_ATTRIBUTE);
      final JpsSdkType<?> sdkType=JpsSdkTableSerializer.getSdkType(sdkTypeId);
      dependenciesList.addSdkDependency(sdkType);
      JpsSdkTableSerializer.setSdkReference(module.getSdkReferencesTable(),sdkName,sdkType);
    }
 else     if (INHERITED_JDK_TYPE.equals(type)) {
      dependenciesList.addSdkDependency(projectSdkType != null ? projectSdkType : JpsJavaSdkType.INSTANCE);
    }
 else     if (LIBRARY_TYPE.equals(type)) {
      String name=orderEntry.getAttributeValue(NAME_ATTRIBUTE);
      String level=orderEntry.getAttributeValue(LEVEL_ATTRIBUTE);
      final JpsLibraryDependency dependency=dependenciesList.addLibraryDependency(elementFactory.createLibraryReference(name,JpsLibraryTableSerializer.createLibraryTableReference(level)));
      loadModuleDependencyProperties(dependency,orderEntry);
    }
 else     if (MODULE_LIBRARY_TYPE.equals(type)) {
      final Element moduleLibraryElement=orderEntry.getChild(LIBRARY_TAG);
      String name=moduleLibraryElement.getAttributeValue(NAME_ATTRIBUTE);
      if (name == null) {
        name=GENERATED_LIBRARY_NAME_PREFIX + (moduleLibraryNum++);
      }
      final JpsLibrary library=JpsLibraryTableSerializer.loadLibrary(moduleLibraryElement,name);
      module.addModuleLibrary(library);
      final JpsLibraryDependency dependency=dependenciesList.addLibraryDependency(library);
      loadModuleDependencyProperties(dependency,orderEntry);
      moduleLibraryNum++;
    }
 else     if (MODULE_TYPE.equals(type)) {
      String name=orderEntry.getAttributeValue(MODULE_NAME_ATTRIBUTE);
      final JpsModuleDependency dependency=dependenciesList.addModuleDependency(elementFactory.createModuleReference(name));
      loadModuleDependencyProperties(dependency,orderEntry);
    }
  }
  for (  JpsModelSerializerExtension extension : JpsModelSerializerExtension.getExtensions()) {
    extension.loadRootModel(module,rootModelComponent);
  }
}
