{
  PsiNameValuePair pair=PsiTreeUtil.getParentOfType(insertedElement,PsiNameValuePair.class);
  PsiAnnotationParameterList parameterList=(PsiAnnotationParameterList)pair.getParent();
  PsiAnnotation anno=(PsiAnnotation)parameterList.getParent();
  boolean showClasses=psiElement().afterLeaf("(").accepts(insertedElement);
  PsiClass annoClass=null;
  final PsiJavaCodeReferenceElement referenceElement=anno.getNameReferenceElement();
  if (referenceElement != null) {
    final PsiElement element=referenceElement.resolve();
    if (element instanceof PsiClass) {
      annoClass=(PsiClass)element;
      if (annoClass.findMethodsByName("value",false).length == 0) {
        showClasses=false;
      }
    }
  }
  if (showClasses && insertedElement.getParent() instanceof PsiReferenceExpression) {
    final Set<LookupElement> set=JavaCompletionUtil.processJavaReference(insertedElement,(PsiJavaReference)insertedElement.getParent(),TrueFilter.INSTANCE,true,false,result.getPrefixMatcher(),parameters);
    for (    final LookupElement element : set) {
      result.addElement(element);
    }
  }
  if (annoClass != null) {
    final PsiNameValuePair[] existingPairs=parameterList.getAttributes();
    methods:     for (    PsiMethod method : annoClass.getMethods()) {
      final String attrName=method.getName();
      for (      PsiNameValuePair apair : existingPairs) {
        if (Comparing.equal(apair.getName(),attrName))         continue methods;
      }
      result.addElement(new LookupItem<PsiMethod>(method,attrName).setInsertHandler(new InsertHandler<LookupElement>(){
        public void handleInsert(        InsertionContext context,        LookupElement item){
          final Editor editor=context.getEditor();
          TailType.EQ.processTail(editor,editor.getCaretModel().getOffset());
          context.setAddCompletionChar(false);
        }
      }
));
    }
  }
}
