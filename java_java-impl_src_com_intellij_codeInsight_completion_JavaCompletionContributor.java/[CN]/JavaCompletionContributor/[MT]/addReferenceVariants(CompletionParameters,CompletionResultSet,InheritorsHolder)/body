{
  final Set<String> usedWords=new HashSet<String>();
  final PsiElement position=parameters.getPosition();
  final boolean checkAccess=parameters.getInvocationCount() <= 1;
  final boolean isSwitchLabel=SWITCH_LABEL.accepts(position);
  final boolean isAfterNew=JavaClassNameCompletionContributor.AFTER_NEW.accepts(position);
  final boolean pkgContext=JavaCompletionUtil.inSomePackage(position);
  LegacyCompletionContributor.processReferences(parameters,result,new PairConsumer<PsiReference,CompletionResultSet>(){
    public void consume(    final PsiReference reference,    final CompletionResultSet result){
      if (reference instanceof PsiJavaReference) {
        final ElementFilter filter=getReferenceFilter(position);
        if (filter != null) {
          final PsiFile originalFile=parameters.getOriginalFile();
          for (          LookupElement element : JavaCompletionUtil.processJavaReference(position,(PsiJavaReference)reference,new ElementExtractorFilter(filter),checkAccess,checkAccess,result.getPrefixMatcher(),parameters)) {
            if (inheritors.alreadyProcessed(element)) {
              continue;
            }
            if (isSwitchLabel) {
              result.addElement(TailTypeDecorator.withTail(element,TailType.createSimpleTailType(':')));
            }
 else {
              final LookupItem item=element.as(LookupItem.CLASS_CONDITION_KEY);
              if (originalFile instanceof PsiJavaCodeReferenceCodeFragment && !((PsiJavaCodeReferenceCodeFragment)originalFile).isClassesAccepted() && item != null) {
                item.setTailType(TailType.NONE);
              }
              result.addElement(element);
            }
          }
        }
        return;
      }
      if (reference instanceof PsiLabelReference) {
        processLabelReference(result,(PsiLabelReference)reference);
        return;
      }
      final Object[] variants=reference.getVariants();
      if (variants == null) {
        LOG.error("Reference=" + reference);
      }
      for (      Object completion : variants) {
        if (completion == null) {
          LOG.error("Position=" + position + "\n;Reference="+ reference+ "\n;variants="+ Arrays.toString(variants));
        }
        if (completion instanceof LookupElement && !inheritors.alreadyProcessed((LookupElement)completion)) {
          usedWords.add(((LookupElement)completion).getLookupString());
          result.addElement((LookupElement)completion);
        }
 else         if (completion instanceof PsiClass) {
          for (          JavaPsiClassReferenceElement item : JavaClassNameCompletionContributor.createClassLookupItems((PsiClass)completion,isAfterNew,JavaClassNameInsertHandler.JAVA_CLASS_INSERT_HANDLER,new Condition<PsiClass>(){
            @Override public boolean value(            PsiClass psiClass){
              return !inheritors.alreadyProcessed(psiClass) && JavaCompletionUtil.isSourceLevelAccessible(position,psiClass,pkgContext);
            }
          }
)) {
            usedWords.add(item.getLookupString());
            result.addElement(item);
          }
        }
 else {
          LookupElement element=LookupItemUtil.objectToLookupItem(completion);
          usedWords.add(element.getLookupString());
          result.addElement(element);
        }
      }
    }
  }
);
  return usedWords;
}
