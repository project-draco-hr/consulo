{
  final CharSequence text=editor.getDocument().getCharsSequence();
  while (offset > 0 && Character.isJavaIdentifierPart(text.charAt(offset)))   offset--;
  if (offset <= 0)   return;
  while (offset > 0 && Character.isWhitespace(text.charAt(offset)))   offset--;
  if (offset <= 0 || text.charAt(offset) != '.')   return;
  offset--;
  while (offset > 0 && Character.isWhitespace(text.charAt(offset)))   offset--;
  if (offset <= 0)   return;
  PsiJavaCodeReferenceElement element=extractReference(PsiTreeUtil.findElementOfClassAtOffset(file,offset,PsiExpression.class,false));
  if (element == null)   return;
  while (true) {
    final PsiJavaCodeReferenceElement qualifier=extractReference(element.getQualifier());
    if (qualifier == null)     break;
    element=qualifier;
  }
  if (!(element.getParent() instanceof PsiMethodCallExpression) && element.multiResolve(true).length == 0) {
    new ImportClassFix(element).doFix(editor,false,false);
  }
}
