{
  final PsiFile file=context.getFile();
  if (file instanceof PsiJavaFile) {
    JavaCompletionUtil.initOffsets(file,context.getProject(),context.getOffsetMap());
    autoImport(file,context.getStartOffset() - 1,context.getEditor());
    if (context.getCompletionType() == CompletionType.BASIC) {
      if (semicolonNeeded(context)) {
        context.setDummyIdentifier(CompletionInitializationContext.DUMMY_IDENTIFIER.trim() + ";");
        return;
      }
      final PsiJavaCodeReferenceElement ref=PsiTreeUtil.findElementOfClassAtOffset(file,context.getStartOffset(),PsiJavaCodeReferenceElement.class,false);
      if (ref != null && !(ref instanceof PsiReferenceExpression)) {
        context.setDummyIdentifier(CompletionInitializationContext.DUMMY_IDENTIFIER.trim() + ";");
        if (JavaSmartCompletionContributor.AFTER_NEW.accepts(ref)) {
          final PsiReferenceParameterList paramList=ref.getParameterList();
          if (paramList != null && paramList.getTextLength() > 0) {
            context.getOffsetMap().addOffset(ConstructorInsertHandler.PARAM_LIST_START,paramList.getTextRange().getStartOffset());
            context.getOffsetMap().addOffset(ConstructorInsertHandler.PARAM_LIST_END,paramList.getTextRange().getEndOffset());
          }
        }
        return;
      }
      final PsiElement element=file.findElementAt(context.getStartOffset());
      if (psiElement().inside(PsiAnnotation.class).accepts(element)) {
        return;
      }
      context.setDummyIdentifier(CompletionInitializationContext.DUMMY_IDENTIFIER_TRIMMED);
    }
  }
}
