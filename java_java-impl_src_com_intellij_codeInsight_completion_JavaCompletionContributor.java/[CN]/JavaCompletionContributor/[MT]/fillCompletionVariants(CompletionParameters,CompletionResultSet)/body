{
  if (parameters.getCompletionType() != CompletionType.BASIC) {
    return;
  }
  final PsiElement position=parameters.getPosition();
  if (!position.getContainingFile().getLanguage().isKindOf(StdLanguages.JAVA)) {
    return;
  }
  if (AFTER_NUMBER_LITERAL.accepts(position)) {
    return;
  }
  if (ANNOTATION_ATTRIBUTE_NAME.accepts(position)) {
    completeAnnotationAttributeName(result,position,parameters);
    result.stopHere();
    return;
  }
  final Set<String> addedClasses=new THashSet<String>();
  if (JavaSmartCompletionContributor.AFTER_NEW.accepts(position)) {
    final JavaInheritorsGetter getter=new JavaInheritorsGetter(ConstructorInsertHandler.BASIC_INSTANCE);
    getter.generateVariants(parameters,result.getPrefixMatcher(),new Consumer<LookupElement>(){
      @Override public void consume(      LookupElement lookupElement){
        final Object object=lookupElement.getObject();
        if (object instanceof PsiClass) {
          final PsiClass psiClass=(PsiClass)object;
          if (JavaCompletionUtil.hasAccessibleInnerClass(psiClass,position))           return;
          ContainerUtil.addIfNotNull(addedClasses,psiClass.getQualifiedName());
        }
        result.addElement(AutoCompletionPolicy.NEVER_AUTOCOMPLETE.applyPolicy(lookupElement));
      }
    }
);
  }
  addReferenceVariants(parameters,result,addedClasses);
  addKeywords(parameters,result);
  if (shouldRunClassNameCompletion(result,position)) {
    result.runRemainingContributors(new CompletionParameters(position,parameters.getOriginalFile(),CompletionType.CLASS_NAME,parameters.getOffset(),parameters.getInvocationCount()),new Consumer<LookupElement>(){
      @Override public void consume(      LookupElement lookupElement){
        if (!isAlreadyAdded(lookupElement,addedClasses)) {
          result.addElement(lookupElement);
        }
      }
    }
);
  }
  result.stopHere();
}
