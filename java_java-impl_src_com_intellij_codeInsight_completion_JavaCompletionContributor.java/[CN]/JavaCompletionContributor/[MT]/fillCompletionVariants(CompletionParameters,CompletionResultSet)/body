{
  if (parameters.getCompletionType() != CompletionType.BASIC) {
    return;
  }
  final PsiElement position=parameters.getPosition();
  if (!position.getContainingFile().getLanguage().isKindOf(StdLanguages.JAVA)) {
    return;
  }
  final PsiFile file=parameters.getOriginalFile();
  final int offset=parameters.getOffset();
  final PsiElement lastElement=file.findElementAt(offset - 1);
  final JavaAwareCompletionData completionData=ApplicationManager.getApplication().runReadAction(new Computable<JavaAwareCompletionData>(){
    public JavaAwareCompletionData compute(){
      if (lastElement != null) {
        if (!lastElement.isValid()) {
          throw new ProcessCanceledException();
        }
        if (PsiUtil.isLanguageLevel5OrHigher(lastElement)) {
          return ourJava15CompletionData;
        }
      }
      return ourJavaCompletionData;
    }
  }
);
  if (ANNOTATION_ATTRIBUTE_NAME.accepts(position)) {
    ApplicationManager.getApplication().runReadAction(new Runnable(){
      public void run(){
        completeAnnotationAttributeName(_result,file,position,parameters);
      }
    }
);
    _result.stopHere();
    return;
  }
  final boolean checkAccess=parameters.getInvocationCount() <= 1;
  LegacyCompletionContributor.processReferences(parameters,_result,completionData,new PairConsumer<PsiReference,CompletionResultSet>(){
    public void consume(    final PsiReference reference,    final CompletionResultSet result){
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        public void run(){
          if (reference instanceof PsiJavaReference) {
            final ElementFilter filter=getReferenceFilter(position);
            if (filter != null) {
              final boolean isSwitchLabel=SWITCH_LABEL.accepts(position);
              for (              LookupElement element : JavaCompletionUtil.processJavaReference(position,(PsiJavaReference)reference,new ElementExtractorFilter(filter),checkAccess,result.getPrefixMatcher(),parameters)) {
                if (isSwitchLabel) {
                  result.addElement(TailTypeDecorator.withTail(element,TailType.createSimpleTailType(':')));
                }
 else {
                  final LookupItem item=element.as(LookupItem.class);
                  if (file instanceof PsiJavaCodeReferenceCodeFragment && !((PsiJavaCodeReferenceCodeFragment)file).isClassesAccepted() && item != null) {
                    item.setTailType(TailType.NONE);
                  }
                  result.addElement(element);
                }
              }
            }
            return;
          }
          final Object[] variants=reference.getVariants();
          if (variants == null) {
            LOG.error("Reference=" + reference);
          }
          for (          Object completion : variants) {
            if (completion == null) {
              LOG.error("Position=" + position + "\n;Reference="+ reference+ "\n;variants="+ Arrays.toString(variants));
            }
            if (completion instanceof LookupElement) {
              result.addElement((LookupElement)completion);
            }
 else             if (completion instanceof PsiClass) {
              result.addElement(JavaClassNameCompletionContributor.createClassLookupItem((PsiClass)completion,true));
            }
 else {
              result.addElement(LookupItemUtil.objectToLookupItem(completion));
            }
          }
        }
      }
);
    }
  }
);
  final Set<LookupElement> lookupSet=new LinkedHashSet<LookupElement>();
  final Set<CompletionVariant> keywordVariants=new HashSet<CompletionVariant>();
  completionData.addKeywordVariants(keywordVariants,position,parameters.getOriginalFile());
  final CompletionResultSet result=_result.withPrefixMatcher(completionData.findPrefix(position,offset));
  completionData.completeKeywordsBySet(lookupSet,keywordVariants,position,result.getPrefixMatcher(),parameters.getOriginalFile());
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    public void run(){
      completionData.fillCompletions(parameters,result);
    }
  }
);
  for (  final LookupElement item : lookupSet) {
    if (item instanceof LookupItem && ((LookupItem)item).getInsertHandler() == null) {
      ((LookupItem)item).setInsertHandler(new InsertHandler(){
        public void handleInsert(        final InsertionContext context,        final LookupElement item){
          analyzeItem((LookupItem)item,item.getObject(),parameters.getPosition());
          new DefaultInsertHandler().handleInsert(context,item);
        }
      }
);
    }
    result.addElement(item);
  }
  if (shouldRunClassNameCompletion(result,file,position)) {
    result.runRemainingContributors(new CompletionParameters(position,file,CompletionType.CLASS_NAME,offset,parameters.getInvocationCount()),new Consumer<LookupElement>(){
      @Override public void consume(      LookupElement lookupElement){
        result.addElement(lookupElement);
      }
    }
);
  }
  result.stopHere();
}
