{
  final Semaphore startSemaphore=new Semaphore();
  final Semaphore finishSemaphore=new Semaphore();
  final ProgressIndicator[] indicator=new ProgressIndicator[1];
  startSemaphore.down();
  finishSemaphore.down();
  final MavenTask[] taskHolder=new MavenTask[]{task};
  ProgressManager.getInstance().run(new Task.Backgroundable(project,title,canBeCancelled){
    public void run(    @NotNull ProgressIndicator i){
      try {
        indicator[0]=i;
        startSemaphore.up();
        taskHolder[0].run(new MavenProcess(i));
      }
 catch (      MavenProcessCanceledException ignore) {
      }
 finally {
        finishSemaphore.up();
        taskHolder[0]=null;
      }
    }
    @Override public boolean shouldStartInBackground(){
      MavenTask task=taskHolder[0];
      return task != null ? task.shouldStartInBackground() : true;
    }
    @Override public void processSentToBackground(){
      MavenTask task=taskHolder[0];
      if (task != null)       task.setStartInBackground();
    }
  }
);
  return new MavenTaskHandler(startSemaphore,finishSemaphore,indicator);
}
