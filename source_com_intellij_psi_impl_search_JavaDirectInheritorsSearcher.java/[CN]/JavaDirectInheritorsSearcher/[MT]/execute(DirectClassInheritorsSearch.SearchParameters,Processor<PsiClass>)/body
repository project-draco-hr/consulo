{
  final PsiClass aClass=p.getClassToProcess();
  final PsiManagerImpl psiManager=(PsiManagerImpl)PsiManager.getInstance(aClass.getProject());
  final SearchScope useScope=ApplicationManager.getApplication().runReadAction(new Computable<SearchScope>(){
    public SearchScope compute(){
      return aClass.getUseScope();
    }
  }
);
  final String qualifiedName=ApplicationManager.getApplication().runReadAction(new Computable<String>(){
    public String compute(){
      return aClass.getQualifiedName();
    }
  }
);
  if ("java.lang.Object".equals(qualifiedName)) {
    final SearchScope scope=useScope.intersectWith(GlobalSearchScope.notScope(GlobalSearchScope.getScopeRestrictedByFileTypes(GlobalSearchScope.allScope(psiManager.getProject()),StdFileTypes.JSP,StdFileTypes.JSPX)));
    return AllClassesSearch.search(scope,aClass.getProject()).forEach(new Processor<PsiClass>(){
      public boolean process(      final PsiClass psiClass){
        return consumer.process(psiClass);
      }
    }
);
  }
  final GlobalSearchScope scope=useScope instanceof GlobalSearchScope ? (GlobalSearchScope)useScope : null;
  final String searchKey=aClass.getName();
  Collection<PsiReferenceList> candidates=ApplicationManager.getApplication().runReadAction(new Computable<Collection<PsiReferenceList>>(){
    public Collection<PsiReferenceList> compute(){
      return JavaSuperClassNameOccurenceIndex.getInstance().get(searchKey,psiManager.getProject(),scope);
    }
  }
);
  for (  PsiReferenceList referenceList : candidates) {
    ProgressManager.getInstance().checkCanceled();
    PsiClass candidate=(PsiClass)referenceList.getParent();
    if (!consumer.process(candidate))     return false;
  }
  if (p.includeAnonymous()) {
    Collection<PsiAnonymousClass> anonymousCandidates=ApplicationManager.getApplication().runReadAction(new Computable<Collection<PsiAnonymousClass>>(){
      public Collection<PsiAnonymousClass> compute(){
        return JavaAnonymousClassBaseRefOccurenceIndex.getInstance().get(searchKey,psiManager.getProject(),scope);
      }
    }
);
    for (    PsiAnonymousClass candidate : anonymousCandidates) {
      ProgressManager.getInstance().checkCanceled();
      if (!consumer.process(candidate))       return false;
    }
  }
  return true;
}
