{
  final PsiClass aClass=p.getClassToProcess();
  PsiManagerImpl psiManager=(PsiManagerImpl)PsiManager.getInstance(aClass.getProject());
  final SearchScope useScope=ApplicationManager.getApplication().runReadAction(new Computable<SearchScope>(){
    public SearchScope compute(){
      return aClass.getUseScope();
    }
  }
);
  if ("java.lang.Object".equals(aClass.getQualifiedName())) {
    return psiManager.getSearchHelper().processAllClasses(new PsiElementProcessor<PsiClass>(){
      public boolean execute(      final PsiClass psiClass){
        return consumer.process(psiClass);
      }
    }
,useScope);
  }
 else {
    final RepositoryManager repositoryManager=psiManager.getRepositoryManager();
    final RepositoryElementsManager repositoryElementsManager=psiManager.getRepositoryElementsManager();
    long[] candidateIds=ApplicationManager.getApplication().runReadAction(new Computable<long[]>(){
      public long[] compute(){
        RepositoryIndex repositoryIndex=repositoryManager.getIndex();
        final VirtualFileFilter rootFilter;
        if (useScope instanceof GlobalSearchScope) {
          rootFilter=repositoryIndex.rootFilterBySearchScope((GlobalSearchScope)useScope);
        }
 else {
          rootFilter=null;
        }
        return repositoryIndex.getNameOccurrencesInExtendsLists(aClass.getName(),rootFilter);
      }
    }
);
    for (    final long candidateId : candidateIds) {
      PsiClass candidate=ApplicationManager.getApplication().runReadAction(new Computable<PsiClass>(){
        public PsiClass compute(){
          final RepositoryPsiElement candidate=repositoryElementsManager.findOrCreatePsiElementById(candidateId);
          LOG.assertTrue(candidate.isValid());
          return (PsiClass)candidate;
        }
      }
);
      if (!consumer.process(candidate)) {
        return false;
      }
    }
  }
  return true;
}
