{
  List<PsiClass> classesToImport=getClassesToImport();
  if (classesToImport.isEmpty())   return false;
  try {
    String name=getQualifiedName(myRef);
    if (name != null) {
      Pattern pattern=Pattern.compile(DaemonCodeAnalyzerSettings.getInstance().NO_AUTO_IMPORT_PATTERN);
      Matcher matcher=pattern.matcher(name);
      if (matcher.matches()) {
        return false;
      }
    }
  }
 catch (  PatternSyntaxException e) {
  }
  final PsiFile psiFile=myRef.getContainingFile();
  if (classesToImport.size() > 1) {
    reduceSuggestedClassesBasedOnDependencyRuleViolation(psiFile,classesToImport);
  }
  PsiClass[] classes=classesToImport.toArray(new PsiClass[classesToImport.size()]);
  final Project project=myRef.getProject();
  CodeInsightUtil.sortIdenticalShortNameClasses(classes,psiFile);
  final QuestionAction action=createAddImportAction(classes,project,editor);
  DaemonCodeAnalyzerImpl codeAnalyzer=(DaemonCodeAnalyzerImpl)DaemonCodeAnalyzer.getInstance(project);
  if (classes.length == 1 && com.intellij.codeInsight.CodeInsightSettings.getInstance().ADD_UNAMBIGIOUS_IMPORTS_ON_THE_FLY && (allowCaretNearRef || !isCaretNearRef(editor,myRef)) && !JspPsiUtil.isInJspFile(psiFile) && codeAnalyzer.canChangeFileSilently(psiFile) && !hasUnresolvedImportWhichCanImport(psiFile,classes[0].getName())) {
    CommandProcessor.getInstance().runUndoTransparentAction(new Runnable(){
      public void run(){
        action.execute();
      }
    }
);
    return false;
  }
  if (doShow) {
    String hintText=ShowAutoImportPass.getMessage(classes.length > 1,classes[0].getQualifiedName());
    HintManager.getInstance().showQuestionHint(editor,hintText,myRef.getTextOffset(),myRef.getTextRange().getEndOffset(),action);
  }
  return true;
}
