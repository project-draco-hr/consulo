{
  List children=parentNode.getChildren(ELEMENT_OPTION);
  for (  final Object aChildren : children) {
    Element element=(Element)aChildren;
    String name=element.getAttributeValue(ATTRIBUTE_NAME);
    String value=element.getAttributeValue(ATTRIBUTE_VALUE);
    if (OPTION_BROWSER_PATH.equals(name)) {
      myBrowserPath=value;
    }
    if (OPTION_LAST_TIP.equals(name)) {
      try {
        myLastTip=Integer.parseInt(value);
      }
 catch (      NumberFormatException ex) {
        myLastTip=0;
      }
    }
    if (OPTION_SHOW_TIPS_ON_STARTUP.equals(name)) {
      try {
        myShowTipsOnStartup=Boolean.valueOf(value).booleanValue();
      }
 catch (      Exception ex) {
        myShowTipsOnStartup=true;
      }
    }
    if (OPTION_SHOW_OCCUPIED_MEMORY.equals(name)) {
      try {
        myShowOccupiedMemory=Boolean.valueOf(value).booleanValue();
      }
 catch (      Exception ex) {
        myShowOccupiedMemory=false;
      }
    }
    if (OPTION_REOPEN_LAST_PROJECT.equals(name)) {
      try {
        myReopenLastProject=Boolean.valueOf(value).booleanValue();
      }
 catch (      Exception ex) {
        myReopenLastProject=true;
      }
    }
    if (OPTION_AUTO_SYNC_FILES.equals(name)) {
      try {
        mySyncOnFrameActivation=Boolean.valueOf(value).booleanValue();
      }
 catch (      Exception ex) {
        mySyncOnFrameActivation=true;
      }
    }
    if (OPTION_AUTO_SAVE_FILES.equals(name)) {
      try {
        mySaveOnFrameDeactivation=Boolean.valueOf(value).booleanValue();
      }
 catch (      Exception ex) {
        mySaveOnFrameDeactivation=true;
      }
    }
    if (OPTION_AUTO_SAVE_IF_INACTIVE.equals(name) && value != null) {
      myAutoSaveIfInactive=Boolean.valueOf(value).booleanValue();
    }
    if (OPTION_INACTIVE_TIMEOUT.equals(name)) {
      try {
        int inactiveTimeout=Integer.parseInt(value);
        if (inactiveTimeout > 0) {
          myInactiveTimeout=inactiveTimeout;
        }
      }
 catch (      Exception ignored) {
      }
    }
    if (OPTION_CHARSET.equals(name)) {
      try {
        if (!CHARSET_DEFAULT.equals(value)) {
          myCharsetName=value;
        }
 else {
          myCharsetName=CharsetSettings.SYSTEM_DEFAULT_CHARSET_NAME;
        }
      }
 catch (      Exception ex) {
        myCharsetName=CharsetSettings.SYSTEM_DEFAULT_CHARSET_NAME;
      }
    }
    if (OPTION_UTFGUESSING.equals(name)) {
      try {
        myUseUTFGuessing=Boolean.valueOf(value).booleanValue();
      }
 catch (      Exception ex) {
        myUseUTFGuessing=true;
      }
    }
    if (OPTION_USE_DEFAULT_BROWSER.equals(name)) {
      try {
        myUseDefaultBrowser=Boolean.valueOf(value).booleanValue();
      }
 catch (      Exception ex) {
        myUseDefaultBrowser=true;
      }
    }
    if (OPTION_USE_CYCLIC_BUFFER.equals(name)) {
      try {
        myUseCyclicBuffer=Boolean.valueOf(value).booleanValue();
      }
 catch (      Exception ex) {
        myUseCyclicBuffer=false;
      }
    }
    if (OPTION_CYCLIC_BUFFER_SIZE.equals(name)) {
      try {
        myCyclicBufferSize=Integer.parseInt(value);
      }
 catch (      Exception ex) {
        myCyclicBufferSize=0;
      }
    }
    if (OPTION_SEARCH_IN_BACKGROUND.equals(name)) {
      try {
        mySearchInBackground=Boolean.valueOf(value).booleanValue();
      }
 catch (      Exception ex) {
        mySearchInBackground=false;
      }
    }
    if (OPTION_CONFIRM_EXIT.equals(name)) {
      try {
        myConfirmExit=Boolean.valueOf(value).booleanValue();
      }
 catch (      Exception ex) {
        myConfirmExit=false;
      }
    }
    if (OPTION_LAST_PROJECT_LOCATION.equals(name)) {
      try {
        myLastProjectLocation=value;
      }
 catch (      Exception ex) {
        myLastProjectLocation=null;
      }
    }
  }
}
