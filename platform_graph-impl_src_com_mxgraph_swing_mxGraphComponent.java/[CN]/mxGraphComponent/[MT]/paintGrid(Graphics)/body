{
  if (isGridVisible()) {
    g.setColor(getGridColor());
    Rectangle clip=g.getClipBounds();
    if (clip == null) {
      clip=getGraphControl().getBounds();
    }
    double left=clip.getX();
    double top=clip.getY();
    double right=left + clip.getWidth();
    double bottom=top + clip.getHeight();
    int style=getGridStyle();
    int gridSize=graph.getGridSize();
    int minStepping=gridSize;
    if (style == GRID_STYLE_CROSS || style == GRID_STYLE_DOT) {
      minStepping/=2;
    }
    mxPoint trans=graph.getView().getTranslate();
    double scale=graph.getView().getScale();
    double tx=trans.getX() * scale;
    double ty=trans.getY() * scale;
    double stepping=gridSize * scale;
    if (stepping < minStepping) {
      int count=(int)Math.round(Math.ceil(minStepping / stepping) / 2) * 2;
      stepping=count * stepping;
    }
    double xs=Math.floor((left - tx) / stepping) * stepping + tx;
    double xe=Math.ceil(right / stepping) * stepping;
    double ys=Math.floor((top - ty) / stepping) * stepping + ty;
    double ye=Math.ceil(bottom / stepping) * stepping;
switch (style) {
case GRID_STYLE_CROSS:
{
        int cs=(stepping > 16.0) ? 2 : 1;
        for (double x=xs; x <= xe; x+=stepping) {
          for (double y=ys; y <= ye; y+=stepping) {
            x=Math.round((x - tx) / stepping) * stepping + tx;
            y=Math.round((y - ty) / stepping) * stepping + ty;
            int ix=(int)Math.round(x);
            int iy=(int)Math.round(y);
            g.drawLine(ix - cs,iy,ix + cs,iy);
            g.drawLine(ix,iy - cs,ix,iy + cs);
          }
        }
        break;
      }
case GRID_STYLE_LINE:
{
      xe+=(int)Math.ceil(stepping);
      ye+=(int)Math.ceil(stepping);
      int ixs=(int)Math.round(xs);
      int ixe=(int)Math.round(xe);
      int iys=(int)Math.round(ys);
      int iye=(int)Math.round(ye);
      for (double x=xs; x <= xe; x+=stepping) {
        x=Math.round((x - tx) / stepping) * stepping + tx;
        int ix=(int)Math.round(x);
        g.drawLine(ix,iys,ix,iye);
      }
      for (double y=ys; y <= ye; y+=stepping) {
        y=Math.round((y - ty) / stepping) * stepping + ty;
        int iy=(int)Math.round(y);
        g.drawLine(ixs,iy,ixe,iy);
      }
      break;
    }
case GRID_STYLE_DASHED:
{
    Graphics2D g2=(Graphics2D)g;
    Stroke stroke=g2.getStroke();
    xe+=(int)Math.ceil(stepping);
    ye+=(int)Math.ceil(stepping);
    int ixs=(int)Math.round(xs);
    int ixe=(int)Math.round(xe);
    int iys=(int)Math.round(ys);
    int iye=(int)Math.round(ye);
    Stroke[] strokes=new Stroke[]{new BasicStroke(1,BasicStroke.CAP_BUTT,BasicStroke.JOIN_MITER,1,new float[]{3,1},Math.max(0,iys) % 4),new BasicStroke(1,BasicStroke.CAP_BUTT,BasicStroke.JOIN_MITER,1,new float[]{2,2},Math.max(0,iys) % 4),new BasicStroke(1,BasicStroke.CAP_BUTT,BasicStroke.JOIN_MITER,1,new float[]{1,1},0),new BasicStroke(1,BasicStroke.CAP_BUTT,BasicStroke.JOIN_MITER,1,new float[]{2,2},Math.max(0,iys) % 4)};
    for (double x=xs; x <= xe; x+=stepping) {
      g2.setStroke(strokes[((int)(x / stepping)) % strokes.length]);
      double xx=Math.round((x - tx) / stepping) * stepping + tx;
      int ix=(int)Math.round(xx);
      g.drawLine(ix,iys,ix,iye);
    }
    strokes=new Stroke[]{new BasicStroke(1,BasicStroke.CAP_BUTT,BasicStroke.JOIN_MITER,1,new float[]{3,1},Math.max(0,ixs) % 4),new BasicStroke(1,BasicStroke.CAP_BUTT,BasicStroke.JOIN_MITER,1,new float[]{2,2},Math.max(0,ixs) % 4),new BasicStroke(1,BasicStroke.CAP_BUTT,BasicStroke.JOIN_MITER,1,new float[]{1,1},0),new BasicStroke(1,BasicStroke.CAP_BUTT,BasicStroke.JOIN_MITER,1,new float[]{2,2},Math.max(0,ixs) % 4)};
    for (double y=ys; y <= ye; y+=stepping) {
      g2.setStroke(strokes[((int)(y / stepping)) % strokes.length]);
      double yy=Math.round((y - ty) / stepping) * stepping + ty;
      int iy=(int)Math.round(yy);
      g.drawLine(ixs,iy,ixe,iy);
    }
    g2.setStroke(stroke);
    break;
  }
default :
{
  for (double x=xs; x <= xe; x+=stepping) {
    for (double y=ys; y <= ye; y+=stepping) {
      x=Math.round((x - tx) / stepping) * stepping + tx;
      y=Math.round((y - ty) / stepping) * stepping + ty;
      int ix=(int)Math.round(x);
      int iy=(int)Math.round(y);
      g.drawLine(ix,iy,ix,iy);
    }
  }
}
}
}
}
