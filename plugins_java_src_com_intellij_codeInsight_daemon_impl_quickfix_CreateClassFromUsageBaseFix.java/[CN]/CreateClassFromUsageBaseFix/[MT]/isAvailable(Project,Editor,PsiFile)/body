{
  final PsiJavaCodeReferenceElement element=getRefElement();
  if (element == null || !element.getManager().isInProject(element) || CreateFromUsageUtils.isValidReference(element,true))   return false;
  final String refName=element.getReferenceName();
  if (refName == null || !checkClassName(refName))   return false;
  PsiElement nameElement=element.getReferenceNameElement();
  if (nameElement == null)   return false;
  PsiElement parent=element.getParent();
  if (parent instanceof PsiExpression && !(parent instanceof PsiReferenceExpression))   return false;
  if (!isAvailableInContext(element))   return false;
  final String superClassName=getSuperClassName(element);
  if (superClassName != null) {
    if (superClassName.equals(CommonClassNames.JAVA_LANG_ENUM) && myKind != CreateClassKind.ENUM)     return false;
    final PsiClass psiClass=JavaPsiFacade.getInstance(project).findClass(superClassName,GlobalSearchScope.allScope(project));
    if (psiClass != null && psiClass.hasModifierProperty(PsiModifier.FINAL))     return false;
  }
  final int offset=editor.getCaretModel().getOffset();
  if (CreateFromUsageUtils.shouldShowTag(offset,nameElement,element)) {
    setText(getText(nameElement.getText()));
    return true;
  }
  return false;
}
