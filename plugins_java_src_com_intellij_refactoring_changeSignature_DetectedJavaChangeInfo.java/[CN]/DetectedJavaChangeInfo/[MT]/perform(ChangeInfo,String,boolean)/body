{
  final PsiMethod method=getSuperMethod();
  final PsiMethod currentMethod=(PsiMethod)initialChangeInfo.getMethod();
  if (silently || ApplicationManager.getApplication().isUnitTestMode()) {
    final TextRange signatureRange=JavaChangeSignatureDetector.getSignatureRange(currentMethod);
    final String currentSignature=currentMethod.getContainingFile().getText().substring(signatureRange.getStartOffset(),signatureRange.getEndOffset());
    temporallyRevertChanges(currentMethod,oldText);
    createChangeSignatureProcessor(method).run();
    temporallyRevertChanges(currentMethod,currentSignature,JavaChangeSignatureDetector.getSignatureRange(currentMethod));
    return true;
  }
  final JavaMethodDescriptor descriptor=new JavaMethodDescriptor(currentMethod){
    @Override public String getReturnTypeText(){
      return getNewReturnType().getTypeText();
    }
  }
;
  final JavaChangeSignatureDialog dialog=new JavaChangeSignatureDialog(method.getProject(),descriptor,true,method){
    protected BaseRefactoringProcessor createRefactoringProcessor(){
      return createChangeSignatureProcessor(method);
    }
    @Override protected void invokeRefactoring(    final BaseRefactoringProcessor processor){
      CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
        @Override public void run(){
          temporallyRevertChanges(method,oldText);
          doRefactor(processor);
        }
      }
,RefactoringBundle.message("changing.signature.of.0",DescriptiveNameUtil.getDescriptiveName(currentMethod)),null);
    }
    private void doRefactor(    BaseRefactoringProcessor processor){
      super.invokeRefactoring(processor);
    }
  }
;
  dialog.show();
  return dialog.isOK();
}
