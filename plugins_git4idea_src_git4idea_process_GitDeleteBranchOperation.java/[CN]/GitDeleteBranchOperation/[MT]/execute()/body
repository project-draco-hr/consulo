{
  Collection<GitRepository> succeeded=new ArrayList<GitRepository>();
  for (  GitRepository repository : myRepositories) {
    GitSimpleEventDetector notFullyMergedDetector=new GitSimpleEventDetector(GitSimpleEventDetector.Event.BRANCH_NOT_FULLY_MERGED);
    GitCommandResult result=Git.branchDelete(repository,myBranchName,false,notFullyMergedDetector);
    if (result.success()) {
      succeeded.add(repository);
    }
 else     if (notFullyMergedDetector.hasHappened()) {
      Collection<GitRepository> remainingRepos=filterOut(myRepositories,succeeded);
      boolean forceDelete=showNotFullyMergedDialog(myBranchName,remainingRepos);
      if (forceDelete) {
        GitCompoundResult compoundResult=forceDelete(myBranchName,remainingRepos);
        if (compoundResult.totalSuccess()) {
          break;
        }
 else {
          notifyError(succeeded,compoundResult);
          return;
        }
      }
 else {
        if (succeeded.isEmpty()) {
          showFatalError(getErrorTitle(),"The branch is not fully merged to the current branch.",myProject);
        }
 else {
          StringBuilder message=new StringBuilder();
          message.append("Successfully removed in ").append(joinRepositoryUrls(succeeded,"<br/>")).append("The branch is not fully merged to the current branch in other repositories.");
          showFatalError(getErrorTitle() + " in some repositories",message.toString(),myProject);
        }
        return;
      }
    }
 else {
      showFatalError(getErrorTitle(),result.getErrorOutputAsHtmlString(),myProject);
      return;
    }
  }
  notifySuccess(getSuccessMessage(),myProject);
}
