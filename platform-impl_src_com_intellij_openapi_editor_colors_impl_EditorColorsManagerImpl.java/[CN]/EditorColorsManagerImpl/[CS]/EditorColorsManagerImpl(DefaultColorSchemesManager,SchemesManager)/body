{
  myDefaultColorSchemesManager=defaultColorSchemesManager;
  mySchemesManager=schemesManager;
  addDefaultSchemes();
  mySchemeReaderWriter=new SchemeReaderWriter<EditorColorsScheme>(){
    public EditorColorsScheme readScheme(    final Document document,    final File file) throws InvalidDataException, IOException, JDOMException {
      Element root=document.getRootElement();
      if (root == null || !SCHEME_NODE_NAME.equals(root.getName())) {
        throw new InvalidDataException();
      }
      EditorColorsSchemeImpl scheme=new EditorColorsSchemeImpl(null,DefaultColorSchemesManager.getInstance());
      scheme.readExternal(root);
      return scheme;
    }
    public Document writeScheme(    final EditorColorsScheme scheme) throws WriteExternalException {
      Element root=new Element(SCHEME_NODE_NAME);
      try {
        scheme.writeExternal(root);
      }
 catch (      WriteExternalException e) {
        LOG.error(e);
        return null;
      }
      return new Document(root);
    }
    public void showWriteErrorMessage(    final Exception e,    final String schemeName,    final String filePath){
    }
    public void showReadErrorMessage(    final Exception e,    final String schemeName,    final String filePath){
      Messages.showErrorDialog(CommonBundle.message("error.reading.color.scheme.from.file.error.message",schemeName),CommonBundle.message("corrupted.scheme.file.message.title"));
    }
    public boolean shouldBeSaved(    final EditorColorsScheme scheme){
      return !(scheme instanceof DefaultColorsScheme);
    }
  }
;
  loadAllSchemes();
  setGlobalScheme(myDefaultColorSchemesManager.getAllSchemes()[0]);
}
