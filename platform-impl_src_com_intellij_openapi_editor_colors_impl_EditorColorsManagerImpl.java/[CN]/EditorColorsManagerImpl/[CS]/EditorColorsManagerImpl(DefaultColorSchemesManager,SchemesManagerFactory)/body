{
  myDefaultColorSchemesManager=defaultColorSchemesManager;
  mySchemesManager=schemesManagerFactory.createSchemesManager(FILE_SPEC,new SchemeProcessor<EditorColorsSchemeImpl>(){
    public EditorColorsSchemeImpl readScheme(    final Document document) throws InvalidDataException, IOException, JDOMException {
      return loadSchemeFromDocument(document,true);
    }
    public Document writeScheme(    final EditorColorsSchemeImpl scheme) throws WriteExternalException {
      Element root=new Element(SCHEME_NODE_NAME);
      try {
        scheme.writeExternal(root);
      }
 catch (      WriteExternalException e) {
        LOG.error(e);
        return null;
      }
      return new Document(root);
    }
    public void renameScheme(    final String name,    final EditorColorsScheme scheme){
      scheme.setName(name);
    }
    public boolean shouldBeSaved(    final EditorColorsSchemeImpl scheme){
      return !(scheme instanceof ReadOnlyColorsScheme);
    }
    public void initScheme(    final EditorColorsSchemeImpl scheme){
    }
    public void onSchemeAdded(    final EditorColorsSchemeImpl scheme){
    }
    public void onSchemeDeleted(    final EditorColorsSchemeImpl scheme){
    }
    public void onCurrentSchemeChanged(    final Scheme newCurrentScheme){
      fireChanges(mySchemesManager.getCurrentScheme());
    }
  }
,RoamingType.PER_USER);
  addDefaultSchemes();
  loadAdditionalDefaultSchemes();
  loadAllSchemes();
  setGlobalScheme(myDefaultColorSchemesManager.getAllSchemes()[0]);
}
