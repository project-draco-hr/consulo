{
  for (  BundledColorSchemesProvider provider : BundledColorSchemesProvider.EP_NAME.getExtensions()) {
    final String[] schemesPaths=provider.getBundledSchemesRelativePaths();
    for (    final String schemePath : schemesPaths) {
      try {
        final InputStream inputStream=DecodeDefaultsUtil.getDefaultsInputStream(provider,schemePath);
        if (inputStream == null) {
          final String msg=OptionsBundle.message("options.color.schemes.load.read.error",schemePath);
          LOG.info(msg);
          Messages.showErrorDialog(msg,OptionsBundle.message("options.color.schemes.load.settings.title"));
          continue;
        }
        final Document document;
        try {
          document=JDOMUtil.loadDocument(inputStream);
        }
 catch (        JDOMException e) {
          LOG.info("Error reading scheme from  " + schemePath + ": "+ e.getLocalizedMessage());
          throw e;
        }
        final EditorColorsSchemeImpl scheme=loadSchemeFromDocument(document,false);
        mySchemesManager.addNewScheme(scheme,false);
      }
 catch (      final Exception e) {
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          public void run(){
            final String msg=OptionsBundle.message("options.color.schemes.load.read.error",schemePath + ": " + e.getLocalizedMessage());
            LOG.info(msg,e);
            Messages.showErrorDialog(msg,OptionsBundle.message("options.color.schemes.load.settings.title"));
          }
        }
);
      }
    }
  }
}
