{
  boolean negated=isNegated(instanceOfExpression);
  PsiStatement statement=PsiTreeUtil.getParentOfType(instanceOfExpression,PsiStatement.class);
  PsiElementFactory factory=JavaPsiFacade.getInstance(toInsert.getProject()).getElementFactory();
  PsiElement anchorAfter=null;
  PsiBlockStatement emptyBlockStatement=(PsiBlockStatement)factory.createStatementFromText("{}",instanceOfExpression);
  if (statement instanceof PsiIfStatement) {
    PsiIfStatement ifStatement=(PsiIfStatement)statement;
    if (negated) {
      PsiStatement elseBranch=ifStatement.getElseBranch();
      if (elseBranch == null) {
        anchorAfter=ifStatement;
      }
 else       if (!(elseBranch instanceof PsiBlockStatement)) {
        emptyBlockStatement.getCodeBlock().add(elseBranch);
        PsiBlockStatement newBranch=(PsiBlockStatement)elseBranch.replace(emptyBlockStatement);
        reformatNewCodeBlockBraces(ifStatement.getElseElement(),newBranch);
        anchorAfter=newBranch.getCodeBlock().getLBrace();
      }
 else {
        anchorAfter=((PsiBlockStatement)elseBranch).getCodeBlock().getLBrace();
      }
    }
 else {
      PsiStatement thenBranch=ifStatement.getThenBranch();
      if (thenBranch == null) {
        ifStatement.setThenBranch(emptyBlockStatement);
        PsiBlockStatement then=(PsiBlockStatement)ifStatement.getThenBranch();
        reformatNewCodeBlockBraces(ifStatement.getCondition(),then);
        anchorAfter=then.getCodeBlock().getLBrace();
      }
 else       if (!(thenBranch instanceof PsiBlockStatement)) {
        emptyBlockStatement.getCodeBlock().add(thenBranch);
        PsiBlockStatement newBranch=(PsiBlockStatement)thenBranch.replace(emptyBlockStatement);
        reformatNewCodeBlockBraces(ifStatement.getCondition(),newBranch);
        anchorAfter=newBranch.getCodeBlock().getLBrace();
      }
 else {
        anchorAfter=((PsiBlockStatement)thenBranch).getCodeBlock().getLBrace();
      }
    }
  }
  if (statement instanceof PsiWhileStatement) {
    PsiWhileStatement whileStatement=(PsiWhileStatement)statement;
    LOG.assertTrue(whileStatement.getLParenth() != null);
    LOG.assertTrue(whileStatement.getCondition() != null);
    if (whileStatement.getRParenth() == null) {
      PsiWhileStatement statementPattern=(PsiWhileStatement)factory.createStatementFromText("while (){}",instanceOfExpression);
      whileStatement.addAfter(statementPattern.getRParenth(),whileStatement.getCondition());
    }
    if (negated) {
      anchorAfter=whileStatement;
    }
 else {
      PsiStatement body=whileStatement.getBody();
      if (body == null) {
        whileStatement.add(emptyBlockStatement);
      }
 else       if (!(body instanceof PsiBlockStatement)) {
        emptyBlockStatement.getCodeBlock().add(body);
        whileStatement.getBody().replace(emptyBlockStatement);
      }
      anchorAfter=((PsiBlockStatement)whileStatement.getBody()).getCodeBlock().getLBrace();
    }
  }
  if (anchorAfter == null) {
    return null;
  }
  return anchorAfter.getParent().addAfter(toInsert,anchorAfter);
}
