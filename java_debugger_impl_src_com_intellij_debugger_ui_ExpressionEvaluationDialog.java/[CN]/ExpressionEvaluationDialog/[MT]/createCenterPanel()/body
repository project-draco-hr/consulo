{
  final JPanel panel=new JPanel(new BorderLayout());
  final JPanel exprPanel=new JPanel(new BorderLayout(UIUtil.DEFAULT_HGAP,0));
  exprPanel.add(new JLabel(DebuggerBundle.message("label.evaluate.dialog.expression")),BorderLayout.WEST);
  exprPanel.add(getExpressionCombo(),BorderLayout.CENTER);
  final JBLabel help=new JBLabel("Press Enter to Evaluate or Control+Enter to evaluate and add to the Watches",SwingConstants.RIGHT);
  help.setBorder(IdeBorderFactory.createEmptyBorder(2,0,6,0));
  help.setComponentStyle(UIUtil.ComponentStyle.SMALL);
  help.setFontColor(UIUtil.FontColor.BRIGHTER);
  exprPanel.add(help,BorderLayout.SOUTH);
  final JPanel resultPanel=new JPanel(new BorderLayout());
  resultPanel.add(getEvaluationPanel(),BorderLayout.CENTER);
  panel.add(exprPanel,BorderLayout.NORTH);
  panel.add(resultPanel,BorderLayout.CENTER);
  panel.setFocusTraversalPolicyProvider(true);
  panel.setFocusTraversalPolicy(new AbstractDelegatingToRootTraversalPolicy(){
    @Override public Component getComponentBefore(    Container aContainer,    Component aComponent){
      boolean focusExpressionCombo=isParent(aComponent,getEvaluationPanel());
      return focusExpressionCombo ? getExpressionCombo().getEditorComponent() : super.getComponentBefore(aContainer,aComponent);
    }
    @Override public Component getComponentAfter(    Container aContainer,    Component aComponent){
      boolean focusEvaluationPanel=isParent(aComponent,exprPanel);
      return focusEvaluationPanel ? getEvaluationPanel().getTree() : super.getComponentAfter(aContainer,aComponent);
    }
    private boolean isParent(    @NotNull Component component,    @NotNull Container parent){
      for (Component c=component; c != null; c=c.getParent()) {
        if (c == parent) {
          return true;
        }
      }
      return false;
    }
  }
);
  return panel;
}
