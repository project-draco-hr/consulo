{
  ApplicationManager.getApplication().assertReadAccessAllowed();
  myDocument=editor.getDocument();
  myStartOffset=start;
  myEnd=end;
  myEditor=editor;
  myUseOnlyFullLineHighlighters=useOnlyFullLineHighlighters;
  myReverseIteration=iterateBackwards;
  LOG.assertTrue(myReverseIteration ? myStartOffset >= myEnd : myStartOffset <= myEnd);
  myHighlighterIterator=useOnlyFullLineHighlighters ? null : editor.getHighlighter().createIterator(start);
  if (!useCaretAndSelection) {
    mySelectionStarts=ArrayUtilRt.EMPTY_INT_ARRAY;
    mySelectionEnds=ArrayUtilRt.EMPTY_INT_ARRAY;
  }
 else {
    List<Caret> carets=editor.getCaretModel().getAllCarets();
    int caretCount=carets.size();
    mySelectionStarts=new int[caretCount];
    mySelectionEnds=new int[caretCount];
    for (int i=0; i < caretCount; i++) {
      Caret caret=carets.get(i);
      mySelectionStarts[iterateBackwards ? caretCount - i - 1 : i]=caret.getSelectionStart();
      mySelectionEnds[iterateBackwards ? caretCount - i - 1 : i]=caret.getSelectionEnd();
    }
  }
  myFoldingModel=useFoldRegions ? editor.getFoldingModel() : null;
  myFoldTextAttributes=useFoldRegions ? myFoldingModel.getPlaceholderAttributes() : null;
  mySelectionAttributes=editor.getSelectionModel().getTextAttributes();
  myReadOnlyColor=myEditor.getColorsScheme().getColor(EditorColors.READONLY_FRAGMENT_BACKGROUND_COLOR);
  CaretModel caretModel=editor.getCaretModel();
  myCaretRowAttributes=editor.isRendererMode() ? null : caretModel.getTextAttributes();
  myDefaultBackground=editor.getColorsScheme().getDefaultBackground();
  myDefaultForeground=editor.getColorsScheme().getDefaultForeground();
  TextAttributes defaultAttributes=editor.getColorsScheme().getAttributes(HighlighterColors.TEXT);
  myDefaultFontType=defaultAttributes == null ? Font.PLAIN : defaultAttributes.getFontType();
  myCaretRowStart=useCaretAndSelection ? caretModel.getVisualLineStart() : -1;
  int visualLineEnd=caretModel.getVisualLineEnd();
  if (visualLineEnd == myDocument.getTextLength() && myDocument.getLineCount() > 0 && visualLineEnd > myDocument.getLineStartOffset(myDocument.getLineCount() - 1)) {
    visualLineEnd++;
  }
  myCaretRowEnd=useCaretAndSelection ? visualLineEnd : -1;
  myCaretRowStartsWithSoftWrap=editor.getSoftWrapModel().getSoftWrap(myCaretRowStart) != null;
  myCaretRowEndsWithSoftWrap=editor.getSoftWrapModel().getSoftWrap(myCaretRowEnd) != null;
  MarkupModelEx editorMarkup=editor.getMarkupModel();
  myView=new HighlighterSweep(editorMarkup,start,myEnd,useOnlyFullLineHighlighters,useOnlyFontAffectingHighlighters);
  MarkupModelEx docMarkup=editor.getFilteredDocumentMarkupModel();
  myDoc=new HighlighterSweep(docMarkup,start,myEnd,useOnlyFullLineHighlighters,useOnlyFontAffectingHighlighters);
  myEndOffset=myStartOffset;
  advance();
}
