{
  final PsiReference[] refs=MethodReferencesSearch.search(myMethod,GlobalSearchScope.allScope(myProject),true).toArray(PsiReference.EMPTY_ARRAY);
  List<PsiMethod> result=new ArrayList<PsiMethod>();
  for (  PsiReference ref : refs) {
    final PsiElement element=ref.getElement();
    if (!(element instanceof PsiReferenceExpression) || !(((PsiReferenceExpression)element).getQualifierExpression() instanceof PsiSuperExpression)) {
      final PsiElement enclosingContext=PsiTreeUtil.getParentOfType(element,PsiMethod.class,PsiClass.class);
      if (enclosingContext instanceof PsiMethod && !myMethod.equals(enclosingContext) && !myCalled.contains(myMethod)) {
        result.add((PsiMethod)enclosingContext);
      }
 else       if (element instanceof PsiClass) {
        final PsiClass aClass=(PsiClass)element;
        result.add(JavaPsiFacade.getElementFactory(myProject).createMethodFromText(aClass.getName() + "(){}",aClass));
      }
    }
  }
  return result;
}
