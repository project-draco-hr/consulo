{
  PsiClass myTargetClass=(PsiClass)startElement;
  if (!CodeInsightUtilBase.preparePsiElementForWrite(myTargetClass.getContainingFile()))   return;
  PsiMethod method=createMethod(project,myTargetClass);
  List<Pair<PsiExpression,PsiType>> arguments=ContainerUtil.map2List(method.getParameterList().getParameters(),new Function<PsiParameter,Pair<PsiExpression,PsiType>>(){
    @Override public Pair<PsiExpression,PsiType> fun(    PsiParameter psiParameter){
      return Pair.create(null,psiParameter.getType());
    }
  }
);
  method=(PsiMethod)JavaCodeStyleManager.getInstance(project).shortenClassReferences(myTargetClass.add(method));
  CreateMethodFromUsageFix.doCreate(myTargetClass,method,arguments,PsiSubstitutor.EMPTY,ExpectedTypeInfo.EMPTY_ARRAY,method);
}
