{
  try {
    if (!CodeInsightUtilBase.preparePsiElementForWrite(myTargetClass.getContainingFile()))     return;
    PsiMethod method=createMethod(project);
    List<Pair<PsiExpression,PsiType>> arguments=ContainerUtil.map2List(method.getParameterList().getParameters(),new Function<PsiParameter,Pair<PsiExpression,PsiType>>(){
      public Pair<PsiExpression,PsiType> fun(      PsiParameter psiParameter){
        return Pair.create(null,psiParameter.getType());
      }
    }
);
    method=(PsiMethod)myTargetClass.add(method);
    CreateMethodFromUsageFix.doCreate(myTargetClass,method,arguments,PsiSubstitutor.EMPTY,ExpectedTypeInfo.EMPTY_ARRAY,method);
  }
 catch (  IncorrectOperationException e) {
    throw new RuntimeException(e);
  }
}
