{
  myConfiguration=configuration;
  myManagedLibrariesEditor=new ManagedLibrariesEditor(editorContext,validatorsManager,AbstractGroovyLibraryManager.EP_NAME);
  myManagedLibrariesPanel.add(myManagedLibrariesEditor.getComponent());
  myManagedLibrariesEditor.getFacetEditorContext().addFacetContextChangeListener(new FacetContextChangeListener(){
    public void moduleRootsChanged(    ModifiableRootModel rootModel){
      updateMvcCheckbox();
    }
    public void facetModelChanged(    @NotNull Module module){
    }
  }
);
  myManagedLibrariesEditor.shouldHaveLibrary(new Condition<Library>(){
    public boolean value(    Library libraryManager){
      final VirtualFile[] files=editorContext.getLibraryFiles(libraryManager,OrderRootType.CLASSES);
      return StringUtil.isNotEmpty(LibrariesUtil.getGroovyOrGrailsLibraryHome(files));
    }
  }
,"No Groovy-containing library is not configured yet");
}
