{
  myConfiguration=configuration;
  myValidatorsManager=validatorsManager;
  myEditorContext=(ProjectSettingsContext)editorContext;
  myModule=myEditorContext.getModule();
  myLibrariesContainer=((FacetEditorContextBase)editorContext).getContainer();
  myListModel=new DefaultListModel();
  setUpLibraryList();
  ((FacetEditorContextBase)editorContext).addFacetContextChangeListener(new FacetContextChangeListener(){
    public void moduleRootsChanged(    ModifiableRootModel rootModel){
      updateLibraryList();
      final boolean hasGrails=hasGrailsLibrary();
      if (!myIsGrails.isEnabled() && hasGrails) {
        myIsGrails.setEnabled(true);
        myIsGrails.setSelected(true);
      }
 else       if (!hasGrails) {
        myIsGrails.setEnabled(false);
        myIsGrails.setSelected(false);
      }
    }
    public void facetModelChanged(    @NotNull Module module){
    }
  }
);
  myAddButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      performAddAction(myAddButton,false);
    }
  }
);
  myRemoveButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      deleteSelectedLibraries();
    }
  }
);
  myModuleDeps.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ModuleStructureConfigurable.getInstance(editorContext.getProject()).selectOrderEntry(myModule,null);
    }
  }
);
  validatorsManager.registerValidator(new FacetEditorValidator(){
    @Override public ValidationResult check(){
      final Set<ManagedLibrary> libraries=getUsedLibraries();
      for (      final ManagedLibrary library : libraries) {
        if (isGroovyOrGrails(library.manager)) {
          return ValidationResult.OK;
        }
      }
      return new ValidationResult("Groovy/Grails is not configured yet",new FacetConfigurationQuickFix(){
        @Override public void run(        JComponent place){
          performAddAction(place,true);
        }
      }
);
    }
  }
);
}
