{
  final Set<ManagedLibrary> managed=getUsedLibraries();
  final Set<LibraryManager> usedManagers=ContainerUtil.map2Set(managed,new Function<ManagedLibrary,LibraryManager>(){
    public LibraryManager fun(    ManagedLibrary managedLibrary){
      return managedLibrary.manager;
    }
  }
);
  final Set<Library> usedLibraries=ContainerUtil.map2Set(managed,new Function<ManagedLibrary,Library>(){
    public Library fun(    ManagedLibrary managedLibrary){
      return managedLibrary.library;
    }
  }
);
  final MultiMap<LibraryManager,ManagedLibrary> libs=new MultiMap<LibraryManager,ManagedLibrary>();
  final List<Object> toAdd=CollectionFactory.arrayList();
  final Map<Object,ListSeparator> separators=CollectionFactory.newTroveMap();
  for (  Library library : myLibrariesContainer.getAllLibraries()) {
    if (!usedLibraries.contains(library)) {
      final LibraryManager manager=findManagerFor(library);
      if (manager != null && !usedManagers.contains(manager)) {
        libs.putValue(manager,new ManagedLibrary(library,manager));
      }
    }
  }
  for (int i=myManagers.length - 1; i >= 0; i--) {
    LibraryManager manager=myManagers[i];
    if (mainOnly && !isGroovyOrGrails(manager)) {
      continue;
    }
    if (usedManagers.contains(manager)) {
      continue;
    }
    boolean separatorSet=false;
    for (    ManagedLibrary library : libs.get(manager)) {
      if (!separatorSet) {
        separators.put(library,new ListSeparator(manager.getLibraryCategoryName()));
        separatorSet=true;
      }
      toAdd.add(library);
    }
    if (!separatorSet) {
      separators.put(manager,new ListSeparator(manager.getLibraryCategoryName()));
    }
    toAdd.add(manager);
  }
  JBPopupFactory.getInstance().createListPopup(new ManagedLibrariesPopupStep(toAdd,separators)).showUnderneathOf(component);
}
