{
  if (myEditorContext != null && myEditorContext.getProject() != null) {
    final Project project=myEditorContext.getProject();
    myNewButton.addActionListener(new ActionListener(){
      public void actionPerformed(      final ActionEvent e){
        final FileChooserDescriptor descriptor=new FileChooserDescriptor(false,true,false,false,false,false){
          public boolean isFileSelectable(          VirtualFile file){
            return super.isFileSelectable(file) && GroovyConfigUtils.isGroovySdkHome(file);
          }
        }
;
        final FileChooserDialog fileChooserDialog=FileChooserFactory.getInstance().createFileChooser(descriptor,project);
        final VirtualFile[] files=fileChooserDialog.choose(null,project);
        if (files.length > 0) {
          String path=files[0].getPath();
          if (ValidationResult.OK == GroovyConfigUtils.isGroovySdkHome(path)) {
            Collection<String> versions=GroovyConfigUtils.getGroovyVersions();
            String version=GroovyConfigUtils.getGroovyVersion(path);
            boolean addVersion=!versions.contains(version) || Messages.showOkCancelDialog(GroovyBundle.message("duplicate.grails.lib.version.add",version),GroovyBundle.message("duplicate.grails.lib.version"),GroovyIcons.BIG_ICON) == 0;
            if (addVersion && !GroovyConfigUtils.UNDEFINED_VERSION.equals(version)) {
              String name=myComboBox.generatePointerName(version);
              myComboBox.addSdk(new GroovySDKPointer(name,path,version));
              newGroovyLibName=name;
            }
          }
 else {
            Messages.showErrorDialog(GroovyBundle.message("invalid.grails.sdk.path.message"),GroovyBundle.message("invalid.grails.sdk.path.text"));
          }
        }
      }
    }
);
  }
}
