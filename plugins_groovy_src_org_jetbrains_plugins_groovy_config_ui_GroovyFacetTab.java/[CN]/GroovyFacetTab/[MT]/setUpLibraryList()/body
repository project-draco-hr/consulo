{
  myLibraryList.setModel(myListModel);
  myLibraryList.setCellRenderer(new ColoredListCellRenderer(){
    protected void customizeCellRenderer(    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      ManagedLibrary ml=(ManagedLibrary)value;
      setIcon(ml.manager.getIcon());
      append(ml.library.getName());
      final String version=ml.version;
      if (StringUtil.isNotEmpty(version)) {
        append(" (version " + version + ")",SimpleTextAttributes.GRAY_ITALIC_ATTRIBUTES);
      }
    }
  }
);
  myLibraryList.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      myRemoveButton.setEnabled(hasSelection());
    }
  }
);
  AnAction navigateAction=new AnAction("&Show in module dependencies"){
    @Override public void update(    AnActionEvent e){
      e.getPresentation().setEnabled(hasSelection());
    }
    @Override public void actionPerformed(    AnActionEvent e){
      final Object value=myLibraryList.getSelectedValue();
      if (value instanceof ManagedLibrary) {
        for (        OrderEntry entry : myEditorContext.getModifiableRootModel().getOrderEntries()) {
          if (entry instanceof LibraryOrderEntry) {
            final LibraryOrderEntry orderEntry=(LibraryOrderEntry)entry;
            if (((ManagedLibrary)value).library.equals(orderEntry.getLibrary())) {
              ModuleStructureConfigurable.getInstance(myEditorContext.getProject()).selectOrderEntry(myModule,orderEntry);
              return;
            }
          }
        }
      }
    }
  }
;
  navigateAction.registerCustomShortcutSet(ActionManager.getInstance().getAction(IdeActions.ACTION_EDIT_SOURCE).getShortcutSet(),myLibraryList);
  final AnAction removeAction=new AnAction("R&emove..."){
    @Override public void update(    AnActionEvent e){
      e.getPresentation().setEnabled(hasSelection());
    }
    @Override public void actionPerformed(    AnActionEvent e){
      deleteSelectedLibraries();
    }
  }
;
  removeAction.registerCustomShortcutSet(ActionManager.getInstance().getAction(IdeActions.ACTION_DELETE).getShortcutSet(),myLibraryList);
  DefaultActionGroup actionGroup=new DefaultActionGroup();
  actionGroup.add(navigateAction);
  actionGroup.add(removeAction);
  PopupHandler.installPopupHandler(myLibraryList,actionGroup,ActionPlaces.UNKNOWN,ActionManager.getInstance());
}
