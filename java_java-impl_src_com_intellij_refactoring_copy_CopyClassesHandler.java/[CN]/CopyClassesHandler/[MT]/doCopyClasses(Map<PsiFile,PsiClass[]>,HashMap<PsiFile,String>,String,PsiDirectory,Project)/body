{
  PsiElement newElement=null;
  final Map<PsiClass,PsiElement> oldToNewMap=new HashMap<PsiClass,PsiElement>();
  for (  final PsiClass[] psiClasses : fileToClasses.values()) {
    if (psiClasses != null) {
      for (      PsiClass aClass : psiClasses) {
        if (aClass instanceof SyntheticElement) {
          continue;
        }
        oldToNewMap.put(aClass,null);
      }
    }
  }
  final PsiFile[] createdFiles=new PsiFile[fileToClasses.size()];
  int foIdx=0;
  for (  final Map.Entry<PsiFile,PsiClass[]> entry : fileToClasses.entrySet()) {
    final PsiFile createdFile=copy(entry.getKey(),targetDirectory,copyClassName,map == null ? null : map.get(entry.getKey()));
    final PsiClass[] sources=entry.getValue();
    if (createdFile instanceof PsiClassOwner) {
      for (      final PsiClass destination : ((PsiClassOwner)createdFile).getClasses()) {
        if (destination instanceof SyntheticElement) {
          continue;
        }
        PsiClass source=findByName(sources,destination.getName());
        if (source != null) {
          final PsiClass copy=copy(source,copyClassName);
          newElement=destination.replace(copy);
          oldToNewMap.put(source,newElement);
        }
 else {
          destination.delete();
        }
      }
    }
    createdFiles[foIdx++]=createdFile;
  }
  final Set<PsiElement> rebindExpressions=new HashSet<PsiElement>();
  for (  PsiElement element : oldToNewMap.values()) {
    if (element == null) {
      LOG.error(oldToNewMap.keySet());
      continue;
    }
    decodeRefs(element,oldToNewMap,rebindExpressions);
  }
  final JavaCodeStyleManager codeStyleManager=JavaCodeStyleManager.getInstance(project);
  for (  PsiFile psiFile : createdFiles) {
    if (psiFile instanceof PsiJavaFile) {
      codeStyleManager.removeRedundantImports((PsiJavaFile)psiFile);
    }
  }
  for (  PsiElement expression : rebindExpressions) {
    codeStyleManager.shortenClassReferences(expression);
  }
  new OptimizeImportsProcessor(project,createdFiles,null).run();
  return newElement;
}
