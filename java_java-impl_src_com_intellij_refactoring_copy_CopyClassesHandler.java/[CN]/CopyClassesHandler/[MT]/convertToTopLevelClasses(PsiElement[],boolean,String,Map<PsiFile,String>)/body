{
  final Map<PsiFile,PsiClass[]> result=new HashMap<PsiFile,PsiClass[]>();
  for (  PsiElement element : elements) {
    final PsiFile containingFile=element.getNavigationElement().getContainingFile();
    if (!(containingFile instanceof PsiClassOwner && CollectHighlightsUtil.isOutsideSourceRoot(containingFile))) {
      PsiClass[] topLevelClasses=getTopLevelClasses(element);
      if (topLevelClasses == null) {
        if (element instanceof PsiDirectory) {
          if (!fromUpdate) {
            final String name=((PsiDirectory)element).getName();
            final String path=relativePath != null ? (relativePath.length() > 0 ? (relativePath + "/") : "") + name : null;
            final Map<PsiFile,PsiClass[]> map=convertToTopLevelClasses(element.getChildren(),fromUpdate,path,relativeMap);
            if (map == null)             return null;
            for (            Map.Entry<PsiFile,PsiClass[]> entry : map.entrySet()) {
              fillResultsMap(result,entry.getKey(),entry.getValue());
            }
          }
          continue;
        }
      }
      fillResultsMap(result,containingFile,topLevelClasses);
      if (relativeMap != null) {
        relativeMap.put(containingFile,relativePath);
      }
    }
  }
  return result.isEmpty() ? null : result;
}
