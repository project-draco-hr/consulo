{
  JavaCommandLineState state=new JavaCommandLineState(env){
    protected JavaParameters createJavaParameters() throws ExecutionException {
      return MavenRunConfiguration.this.createJavaParameters(env.getProject());
    }
    @Override public ExecutionResult execute(    @NotNull Executor executor,    @NotNull ProgramRunner runner) throws ExecutionException {
      DefaultExecutionResult res=(DefaultExecutionResult)super.execute(executor,runner);
      if (res != null) {
        if (executor.getId().equals(ToolWindowId.RUN) && MavenResumeAction.isApplicable(env.getProject(),getJavaParameters(),MavenRunConfiguration.this)) {
          MavenResumeAction resumeAction=new MavenResumeAction(res.getProcessHandler(),runner,executor,env);
          res.setRestartActions(resumeAction);
        }
      }
      return res;
    }
    @NotNull @Override protected OSProcessHandler startProcess() throws ExecutionException {
      OSProcessHandler result=super.startProcess();
      result.addProcessListener(new ProcessAdapter(){
        @Override public void processTerminated(        ProcessEvent event){
          updateProjectsFolders();
        }
      }
);
      return result;
    }
  }
;
  state.setConsoleBuilder(MavenConsoleImpl.createConsoleBuilder(getProject()));
  return state;
}
