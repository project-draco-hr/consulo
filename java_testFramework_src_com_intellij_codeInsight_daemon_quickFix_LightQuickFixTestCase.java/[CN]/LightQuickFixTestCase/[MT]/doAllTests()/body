{
  doAllTests(new QuickFixTestCase(){
    @Override public String getBasePath(){
      return LightQuickFixTestCase.this.getBasePath();
    }
    @Override public String getTestDataPath(){
      return LightQuickFixTestCase.this.getTestDataPath();
    }
    @Override public Pair<String,Boolean> parseActionHintImpl(    PsiFile file,    String contents){
      return LightQuickFixTestCase.this.parseActionHintImpl(file,contents);
    }
    @Override public void beforeActionStarted(    String testName,    String contents){
      LightQuickFixTestCase.this.beforeActionStarted(testName,contents);
    }
    @Override public void afterActionCompleted(    String testName,    String contents){
      LightQuickFixTestCase.this.afterActionCompleted(testName,contents);
    }
    @Override public void doAction(    String text,    boolean actionShouldBeAvailable,    String testFullPath,    String testName) throws Exception {
      LightQuickFixTestCase.this.doAction(text,actionShouldBeAvailable,testFullPath,testName);
    }
    @Override public void checkResultByFile(    String s,    String expectedFilePath,    boolean b) throws Exception {
      LightQuickFixTestCase.this.checkResultByFile(s,expectedFilePath,b);
    }
    @Override public IntentionAction findActionWithText(    String text){
      return LightQuickFixTestCase.this.findActionWithText(text);
    }
    @Override public boolean shouldBeAvailableAfterExecution(){
      return LightQuickFixTestCase.this.shouldBeAvailableAfterExecution();
    }
    @Override public void invoke(    IntentionAction action){
      LightQuickFixTestCase.this.invoke(action);
    }
    @Override public List<HighlightInfo> doHighlighting(){
      return LightQuickFixTestCase.this.doHighlighting();
    }
    @Override public List<IntentionAction> getAvailableActions(){
      return LightQuickFixTestCase.this.getAvailableActions();
    }
    @Override public void configureFromFileText(    String name,    String contents) throws IOException {
      LightQuickFixTestCase.configureFromFileText(name,contents);
    }
    @Override public PsiFile getFile(){
      return LightQuickFixTestCase.getFile();
    }
    @Override public Project getProject(){
      return LightQuickFixTestCase.getProject();
    }
    @Override public void bringRealEditorBack(){
      LightQuickFixTestCase.bringRealEditorBack();
    }
  }
);
}
