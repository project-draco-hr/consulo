{
  super(project,true);
  myProject=project;
  myRefreshSynchronously=refreshSynchronously;
  myAfterVcsRefreshInAwt=afterVcsRefreshInAwt;
  myBrowser=new MultipleChangeListBrowser(project,changeLists,changes,null,true,true,null,null);
  myBrowser.setToggleActionTitle("Include in rollback");
  setOKButtonText(VcsBundle.message("changes.action.rollback.text"));
  setTitle(VcsBundle.message("changes.action.rollback.title"));
  Set<AbstractVcs> affectedVcs=new HashSet<AbstractVcs>();
  for (  Change c : changes) {
    final AbstractVcs vcs=ChangesUtil.getVcsForChange(c,project);
    if (vcs != null) {
      affectedVcs.add(vcs);
    }
  }
  if (affectedVcs.size() == 1) {
    AbstractVcs vcs=(AbstractVcs)affectedVcs.toArray()[0];
    final RollbackEnvironment rollbackEnvironment=vcs.getRollbackEnvironment();
    if (rollbackEnvironment != null) {
      final String rollbackOperationName=rollbackEnvironment.getRollbackOperationName().replace(Character.toString(UIUtil.MNEMONIC),"");
      setTitle(VcsBundle.message("changes.action.rollback.custom.title",rollbackOperationName).replace("_",""));
      setOKButtonText(rollbackOperationName);
    }
  }
  for (  Change c : changes) {
    if (c.getType() == Change.Type.NEW) {
      myDeleteLocallyAddedFiles=new JCheckBox(VcsBundle.message("changes.checkbox.delete.locally.added.files"));
      break;
    }
  }
  init();
}
