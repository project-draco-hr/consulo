{
  int zzInput;
  int zzAction;
  int zzCurrentPosL;
  int zzMarkedPosL;
  int zzEndReadL=zzEndRead;
  CharSequence zzBufferL=zzBuffer;
  char[] zzBufferArrayL=zzBufferArray;
  char[] zzCMapL=ZZ_CMAP;
  int[] zzTransL=ZZ_TRANS;
  int[] zzRowMapL=ZZ_ROWMAP;
  int[] zzAttrL=ZZ_ATTRIBUTE;
  while (true) {
    zzMarkedPosL=zzMarkedPos;
    zzAction=-1;
    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;
    zzState=zzLexicalState;
    zzForAction: {
      while (true) {
        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++);
 else         if (zzAtEOF) {
          zzInput=YYEOF;
          break zzForAction;
        }
 else {
          zzCurrentPos=zzCurrentPosL;
          zzMarkedPos=zzMarkedPosL;
          boolean eof=zzRefill();
          zzCurrentPosL=zzCurrentPos;
          zzMarkedPosL=zzMarkedPos;
          zzBufferL=zzBuffer;
          zzEndReadL=zzEndRead;
          if (eof) {
            zzInput=YYEOF;
            break zzForAction;
          }
 else {
            zzInput=zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++);
          }
        }
        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
        if (zzNext == -1)         break zzForAction;
        zzState=zzNext;
        int zzAttributes=zzAttrL[zzState];
        if ((zzAttributes & 1) == 1) {
          zzAction=zzState;
          zzMarkedPosL=zzCurrentPosL;
          if ((zzAttributes & 8) == 8)           break zzForAction;
        }
      }
    }
    zzMarkedPos=zzMarkedPosL;
switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
case 12:
{
        return myTokenTypes.tagValueSharp();
      }
case 21:
    break;
case 16:
{
    yybegin(COMMENT_DATA);
    return myTokenTypes.tagValueGT();
  }
case 22:
break;
case 3:
{
return myTokenTypes.space();
}
case 23:
break;
case 6:
{
return myTokenTypes.commentData();
}
case 24:
break;
case 7:
{
if (checkAhead('<') || checkAhead('\"')) yybegin(COMMENT_DATA);
 else if (checkAhead('\u007b')) yybegin(COMMENT_DATA);
 else yybegin(DOC_TAG_VALUE);
return myTokenTypes.space();
}
case 25:
break;
case 4:
{
if (checkAhead('@')) {
yybegin(INLINE_TAG_NAME);
return myTokenTypes.inlineTagStart();
}
 else {
yybegin(COMMENT_DATA);
return myTokenTypes.inlineTagStart();
}
}
case 26:
break;
case 5:
{
yybegin(COMMENT_DATA);
return myTokenTypes.inlineTagEnd();
}
case 27:
break;
case 19:
{
yybegin(COMMENT_DATA_START);
return myTokenTypes.commentStart();
}
case 28:
break;
case 8:
{
yybegin(DOC_TAG_VALUE);
return myTokenTypes.space();
}
case 29:
break;
case 14:
{
if (myJdk15Enabled) {
yybegin(DOC_TAG_VALUE_IN_LTGT);
return myTokenTypes.tagValueLT();
}
 else {
yybegin(COMMENT_DATA);
return myTokenTypes.commentData();
}
}
case 30:
break;
case 10:
{
return myTokenTypes.tagValueToken();
}
case 31:
break;
case 18:
{
yybegin(TAG_DOC_SPACE);
return myTokenTypes.tagName();
}
case 32:
break;
case 9:
{
yybegin(COMMENT_DATA);
return myTokenTypes.space();
}
case 33:
break;
case 20:
{
yybegin(PARAM_TAG_SPACE);
return myTokenTypes.tagName();
}
case 34:
break;
case 1:
{
return myTokenTypes.badCharacter();
}
case 35:
break;
case 15:
{
yybegin(DOC_TAG_VALUE);
return myTokenTypes.tagValueRParen();
}
case 36:
break;
case 11:
{
yybegin(DOC_TAG_VALUE_IN_PAREN);
return myTokenTypes.tagValueLParen();
}
case 37:
break;
case 13:
{
return myTokenTypes.tagValueComma();
}
case 38:
break;
case 2:
{
yybegin(COMMENT_DATA);
return myTokenTypes.commentData();
}
case 39:
break;
case 17:
{
return myTokenTypes.commentEnd();
}
case 40:
break;
default :
if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
zzAtEOF=true;
zzDoEOF();
return null;
}
 else {
zzScanError(ZZ_NO_MATCH);
}
}
}
}
