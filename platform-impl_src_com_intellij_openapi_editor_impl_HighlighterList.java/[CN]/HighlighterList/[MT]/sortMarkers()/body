{
  myLongestHighlighterLength=0;
  mySegmentHighlighters.clear();
  Iterator<RangeHighlighterImpl> iterator=myHighlightersSet.iterator();
  while (iterator.hasNext()) {
    RangeHighlighterImpl rangeHighlighter=iterator.next();
    if (rangeHighlighter.isValid()) {
      mySegmentHighlighters.add(rangeHighlighter);
      myLongestHighlighterLength=Math.max(myLongestHighlighterLength,rangeHighlighter.getEndOffset() - rangeHighlighter.getStartOffset());
    }
 else {
      iterator.remove();
    }
  }
  Collections.sort(mySegmentHighlighters,new Comparator<RangeHighlighterImpl>(){
    public int compare(    RangeHighlighterImpl r1,    RangeHighlighterImpl r2){
      if (r1.getAffectedAreaStartOffset() != r2.getAffectedAreaStartOffset()) {
        return r1.getAffectedAreaStartOffset() - r2.getAffectedAreaStartOffset();
      }
      if (r1.getLayer() != r2.getLayer()) {
        return r2.getLayer() - r1.getLayer();
      }
      return (int)(r2.getId() - r1.getId());
    }
  }
);
  myIsDirtied=false;
}
