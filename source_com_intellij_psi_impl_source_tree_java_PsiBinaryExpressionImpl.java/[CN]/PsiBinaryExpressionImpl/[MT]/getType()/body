{
  PsiExpression lOperand=getLOperand();
  PsiExpression rOperand=getROperand();
  if (rOperand == null)   return null;
  PsiType type1=lOperand.getType();
  PsiType type2=rOperand.getType();
  IElementType i=(SourceTreeToPsiMap.psiElementToTree(getOperationSign())).getElementType();
  if (i == PLUS) {
    if (type1 == null || type2 == null)     return null;
    if (type1.equalsToText("java.lang.String") || type2.equalsToText("java.lang.String")) {
      return PsiType.getJavaLangString(getManager(),getResolveScope());
    }
    if (type1 == null && type2 == null)     return null;
    if (type1 == PsiType.DOUBLE || type2 == PsiType.DOUBLE)     return PsiType.DOUBLE;
    if (type1 == PsiType.FLOAT || type2 == PsiType.FLOAT)     return PsiType.FLOAT;
    if (type1 == PsiType.LONG || type2 == PsiType.LONG)     return PsiType.LONG;
    return PsiType.INT;
  }
 else   if (i == MINUS || i == ASTERISK || i == DIV || i == PERC) {
    if (type1 == null && type2 == null)     return null;
    if (type1 == PsiType.DOUBLE || type2 == PsiType.DOUBLE)     return PsiType.DOUBLE;
    if (type1 == PsiType.FLOAT || type2 == PsiType.FLOAT)     return PsiType.FLOAT;
    if (type1 == PsiType.LONG || type2 == PsiType.LONG)     return PsiType.LONG;
    return PsiType.INT;
  }
 else   if (i == LTLT || i == GTGT || i == GTGTGT) {
    if (type1 == PsiType.BYTE || type1 == PsiType.CHAR || type1 == PsiType.SHORT) {
      return PsiType.INT;
    }
 else {
      return type1;
    }
  }
 else   if (i == EQEQ || i == NE || i == LT || i == GT || i == LE || i == GE || i == OROR || i == ANDAND) {
    return PsiType.BOOLEAN;
  }
 else   if (i == OR || i == XOR || i == AND) {
    if (type1 == null && type2 == null)     return null;
    if (type1 == PsiType.BOOLEAN || type2 == PsiType.BOOLEAN)     return PsiType.BOOLEAN;
    if (type1 == PsiType.LONG || type2 == PsiType.LONG)     return PsiType.LONG;
    return PsiType.INT;
  }
 else {
    LOG.assertTrue(false);
    return null;
  }
}
