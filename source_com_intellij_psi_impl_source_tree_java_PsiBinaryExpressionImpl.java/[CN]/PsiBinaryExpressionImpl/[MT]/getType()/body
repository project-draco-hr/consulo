{
  PsiExpression lOperand=getLOperand();
  PsiExpression rOperand=getROperand();
  if (rOperand == null)   return null;
  IElementType i=SourceTreeToPsiMap.psiElementToTree(getOperationSign()).getElementType();
  if (i == PLUS) {
    PsiType type2=rOperand.getType();
    if (type2 == null)     return null;
    if (type2.equalsToText("java.lang.String")) {
      return type2;
    }
    PsiType type1=lOperand.getType();
    if (type1 == null)     return null;
    if (type1.equalsToText("java.lang.String")) {
      return type1;
    }
    return unboxAndBalanceTypes(type1,type2);
  }
  if (i == MINUS || i == ASTERISK || i == DIV || i == PERC) {
    PsiType type2=rOperand.getType();
    PsiType type1=lOperand.getType();
    if (type1 == null && type2 == null)     return null;
    return unboxAndBalanceTypes(type1,type2);
  }
  if (i == LTLT || i == GTGT || i == GTGTGT) {
    PsiType type1=lOperand.getType();
    if (type1 == PsiType.BYTE || type1 == PsiType.CHAR || type1 == PsiType.SHORT) {
      return PsiType.INT;
    }
    return type1;
  }
  if (i == EQEQ || i == NE || i == LT || i == GT || i == LE || i == GE || i == OROR || i == ANDAND) {
    return PsiType.BOOLEAN;
  }
  if (i == OR || i == XOR || i == AND) {
    PsiType type2=rOperand.getType();
    PsiType type1=lOperand.getType();
    if (type1 instanceof PsiClassType)     type1=PsiPrimitiveType.getUnboxedType(type1);
    if (type2 instanceof PsiClassType)     type2=PsiPrimitiveType.getUnboxedType(type2);
    if (type1 == null && type2 == null)     return null;
    if (type1 == PsiType.BOOLEAN || type2 == PsiType.BOOLEAN)     return PsiType.BOOLEAN;
    if (type1 == PsiType.LONG || type2 == PsiType.LONG)     return PsiType.LONG;
    return PsiType.INT;
  }
  LOG.assertTrue(false);
  return null;
}
