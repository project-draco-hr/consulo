{
  final PsiElementFactory factory=JavaPsiFacade.getInstance(myClass.getProject()).getElementFactory();
  final PsiSubstitutor substitutor=TypeConversionUtil.getSuperClassSubstitutor(myClass,targetClass,PsiSubstitutor.EMPTY);
  for (  MemberInfo memberInfo : myMemberInfos) {
    PsiMember member=memberInfo.getMember();
    final List<PsiReference> refsToRebind=new ArrayList<PsiReference>();
    final PsiModifierList list=member.getModifierList();
    LOG.assertTrue(list != null);
    if (list.hasModifierProperty(PsiModifier.STATIC)) {
      for (      final PsiReference reference : ReferencesSearch.search(member)) {
        final PsiElement element=reference.getElement();
        if (element instanceof PsiReferenceExpression) {
          final PsiExpression qualifierExpression=((PsiReferenceExpression)element).getQualifierExpression();
          if (qualifierExpression instanceof PsiReferenceExpression && !(((PsiReferenceExpression)qualifierExpression).resolve() instanceof PsiClass)) {
            continue;
          }
        }
        refsToRebind.add(reference);
      }
    }
    member=(PsiMember)member.copy();
    RefactoringUtil.replaceMovedMemberTypeParameters(member,PsiUtil.typeParametersIterable(myClass),substitutor,factory);
    PsiMember newMember=null;
    if (member instanceof PsiField) {
      ((PsiField)member).normalizeDeclaration();
      newMember=(PsiMember)targetClass.add(member);
    }
 else     if (member instanceof PsiMethod) {
      PsiMethod method=(PsiMethod)member;
      PsiMethod methodBySignature=MethodSignatureUtil.findMethodBySuperSignature(targetClass,method.getSignature(substitutor),false);
      if (methodBySignature == null) {
        newMember=(PsiMethod)targetClass.add(method);
        if (myClass.isInterface()) {
          if (!targetClass.isInterface()) {
            PsiUtil.setModifierProperty(newMember,PsiModifier.PUBLIC,true);
            if (newMember.hasModifierProperty(PsiModifier.DEFAULT)) {
              PsiUtil.setModifierProperty(newMember,PsiModifier.DEFAULT,false);
            }
 else {
              PsiUtil.setModifierProperty(newMember,PsiModifier.ABSTRACT,true);
            }
          }
        }
 else         if (memberInfo.isToAbstract()) {
          if (newMember.hasModifierProperty(PsiModifier.PRIVATE)) {
            PsiUtil.setModifierProperty(newMember,PsiModifier.PROTECTED,true);
          }
          myJavaDocPolicy.processNewJavaDoc(((PsiMethod)newMember).getDocComment());
        }
      }
 else {
        final PsiAnnotation annotation=AnnotationUtil.findAnnotation(methodBySignature,"java.lang.Override");
        if (annotation != null && !leaveOverrideAnnotation(substitutor,method)) {
          annotation.delete();
        }
        final PsiDocComment oldDocComment=method.getDocComment();
        if (oldDocComment != null) {
          final PsiDocComment docComment=methodBySignature.getDocComment();
          final int policy=myJavaDocPolicy.getJavaDocPolicy();
          if (policy == DocCommentPolicy.COPY || policy == DocCommentPolicy.MOVE) {
            if (docComment != null) {
              docComment.replace(oldDocComment);
            }
 else {
              methodBySignature.getParent().addBefore(oldDocComment,methodBySignature);
            }
          }
        }
      }
    }
 else     if (member instanceof PsiClass) {
      if (Boolean.FALSE.equals(memberInfo.getOverrides())) {
        final PsiClass aClass=(PsiClass)memberInfo.getMember();
        PsiClassType classType=null;
        if (!targetClass.isInheritor(aClass,false)) {
          final PsiClassType[] types=memberInfo.getSourceReferenceList().getReferencedTypes();
          for (          PsiClassType type : types) {
            if (type.resolve() == aClass) {
              classType=(PsiClassType)substitutor.substitute(type);
            }
          }
          PsiJavaCodeReferenceElement classRef=classType != null ? factory.createReferenceElementByType(classType) : factory.createClassReferenceElement(aClass);
          if (aClass.isInterface()) {
            targetClass.getImplementsList().add(classRef);
          }
 else {
            targetClass.getExtendsList().add(classRef);
          }
        }
      }
 else {
        newMember=(PsiMember)targetClass.add(member);
      }
    }
    if (newMember != null) {
      decodeRefs(newMember,targetClass);
      Collections.sort(refsToRebind,new Comparator<PsiReference>(){
        public int compare(        PsiReference o1,        PsiReference o2){
          return PsiUtil.BY_POSITION.compare(o1.getElement(),o2.getElement());
        }
      }
);
      for (      PsiReference psiReference : refsToRebind) {
        JavaCodeStyleManager.getInstance(myProject).shortenClassReferences(psiReference.bindToElement(newMember));
      }
      final JavaRefactoringListenerManager listenerManager=JavaRefactoringListenerManager.getInstance(newMember.getProject());
      ((JavaRefactoringListenerManagerImpl)listenerManager).fireMemberMoved(myClass,newMember);
    }
  }
}
