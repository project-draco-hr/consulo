{
  int myTokenEnd=baseLexer.getTokenEnd();
  int lastState=0;
  int lastStart=0;
  if (seenTag) {
    FoundEnd:     while (true) {
      FoundEndOfTag:       while (baseLexer.getTokenType() != XmlTokenType.XML_END_TAG_START) {
        if (baseLexer.getTokenType() == XmlTokenType.XML_COMMENT_CHARACTERS) {
          final char[] buf=baseLexer.getBuffer();
          final int end=baseLexer.getTokenEnd();
          for (int i=baseLexer.getTokenStart(); i < end; ++i) {
            if (buf[i] == '<' && i + 1 < end && buf[i + 1] == '/') {
              myTokenEnd=i;
              lastStart=i - 1;
              lastState=0;
              break FoundEndOfTag;
            }
          }
        }
        lastState=baseLexer.getState();
        myTokenEnd=baseLexer.getTokenEnd();
        lastStart=baseLexer.getTokenStart();
        if (myTokenEnd == getBufferEnd())         break FoundEnd;
        baseLexer.advance();
      }
      if (baseLexer.getTokenType() != XmlTokenType.XML_END_TAG_START) {
        baseLexer.start(getBuffer(),lastStart + 1,getBufferEnd(),lastState);
        baseLexer.getTokenType();
        baseLexer.advance();
      }
 else {
        baseLexer.advance();
      }
      while (XmlTokenType.WHITESPACES.isInSet(baseLexer.getTokenType())) {
        baseLexer.advance();
      }
      if (baseLexer.getTokenType() == XmlTokenType.XML_NAME) {
        String name=ParseUtil.getTokenText(baseLexer);
        if (caseInsensitive)         name=name.toLowerCase();
        if ((hasSeenScript() && XmlNameHandler.TOKEN_SCRIPT.equals(name)) || (hasSeenStyle() && XmlNameHandler.TOKEN_STYLE.equals(name))) {
          break;
        }
      }
    }
    baseLexer.start(getBuffer(),lastStart,getBufferEnd(),lastState);
    baseLexer.getTokenType();
  }
 else   if (seenAttribute) {
    while (true) {
      if (!isValidAttributeValueTokenType(baseLexer.getTokenType()))       break;
      myTokenEnd=baseLexer.getTokenEnd();
      lastState=baseLexer.getState();
      lastStart=baseLexer.getTokenStart();
      if (myTokenEnd == getBufferEnd())       break;
      baseLexer.advance();
    }
    baseLexer.start(getBuffer(),lastStart,getBufferEnd(),lastState);
    baseLexer.getTokenType();
  }
  return myTokenEnd;
}
