{
  Set<PackagingElement<?>> parents=new HashSet<PackagingElement<?>>();
  for (  PackagingElementNode<?> node : nodes) {
    final List<? extends PackagingElement<?>> toDelete=node.getPackagingElements();
    for (    PackagingElement<?> element : toDelete) {
      final Collection<PackagingNodeSource> nodeSources=node.getNodeSource(element);
      if (nodeSources.isEmpty()) {
        final CompositePackagingElement<?> parent=node.getParentElement(element);
        if (parent != null) {
          parents.add(parent);
          parent.removeChild(element);
        }
      }
 else {
        Collection<PackagingNodeSource> rootSources=getRootNodeSources(nodeSources);
        for (        PackagingNodeSource source : rootSources) {
          parents.add(source.getSourceParentElement());
          source.getSourceParentElement().removeChild(source.getSourceElement());
        }
      }
    }
  }
  final List<PackagingElementNode<?>> parentNodes=myTree.findNodes(parents);
  for (  PackagingElementNode<?> parentNode : parentNodes) {
    myTree.addSubtreeToUpdate(parentNode);
  }
}
