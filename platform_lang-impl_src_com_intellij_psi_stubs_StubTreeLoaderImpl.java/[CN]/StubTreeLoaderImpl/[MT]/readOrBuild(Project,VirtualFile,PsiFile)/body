{
  final ObjectStubTree fromIndices=readFromVFile(project,vFile);
  if (fromIndices != null) {
    return fromIndices;
  }
  if (!canHaveStub(vFile)) {
    return null;
  }
  try {
    final FileContent fc=new FileContentImpl(vFile,vFile.contentsToByteArray());
    fc.putUserData(IndexingDataKeys.PROJECT,project);
    if (psiFile != null) {
      fc.putUserData(IndexingDataKeys.PSI_FILE,psiFile);
      if (!vFile.getFileType().isBinary()) {
        fc.putUserData(IndexingDataKeys.FILE_TEXT_CONTENT_KEY,psiFile.getViewProvider().getContents());
      }
      psiFile.putUserData(PsiFileImpl.BUILDING_STUB,true);
    }
    Stub element;
    try {
      element=StubTreeBuilder.buildStubTree(fc);
    }
  finally {
      if (psiFile != null) {
        psiFile.putUserData(PsiFileImpl.BUILDING_STUB,null);
      }
    }
    if (element instanceof PsiFileStub) {
      return new StubTree((PsiFileStub)element);
    }
  }
 catch (  IOException e) {
    throw new RuntimeException("Corrupted file '" + vFile.getPath() + "': "+ e.getMessage(),e);
  }
  return null;
}
