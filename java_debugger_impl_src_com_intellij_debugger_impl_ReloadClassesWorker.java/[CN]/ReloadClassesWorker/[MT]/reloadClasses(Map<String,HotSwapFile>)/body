{
  if (modifiedClasses == null || modifiedClasses.size() == 0) {
    myProgress.addMessage(myDebuggerSession,MessageCategory.INFORMATION,DebuggerBundle.message("status.hotswap.loaded.classes.up.to.date"));
    return;
  }
  final DebugProcessImpl debugProcess=getDebugProcess();
  final VirtualMachineProxyImpl virtualMachineProxy=debugProcess.getVirtualMachineProxy();
  if (virtualMachineProxy == null) {
    return;
  }
  final Project project=debugProcess.getProject();
  final BreakpointManager breakpointManager=(DebuggerManagerEx.getInstanceEx(project)).getBreakpointManager();
  breakpointManager.disableBreakpoints(debugProcess);
  try {
    final Map<ReferenceType,byte[]> redefineMap=new HashMap<ReferenceType,byte[]>();
    int processedClassesCount=0;
    for (    final String qualifiedName : modifiedClasses.keySet()) {
      processedClassesCount++;
      if (qualifiedName != null) {
        myProgress.setText(qualifiedName);
        myProgress.setFraction(processedClassesCount / (double)modifiedClasses.size());
      }
      final HotSwapFile fileDescr=modifiedClasses.get(qualifiedName);
      try {
        final byte[] buffer=FileUtil.loadFileBytes(fileDescr.file);
        final List<ReferenceType> classes=virtualMachineProxy.classesByName(qualifiedName);
        for (        final ReferenceType reference : classes) {
          redefineMap.put(reference,buffer);
        }
      }
 catch (      IOException e) {
        reportProblem(qualifiedName,e);
      }
      if (redefineMap.size() >= CLASSES_CHUNK_SIZE) {
        try {
          virtualMachineProxy.redefineClasses(redefineMap);
        }
  finally {
          redefineMap.clear();
        }
      }
    }
    if (redefineMap.size() > 0) {
      virtualMachineProxy.redefineClasses(redefineMap);
    }
    myProgress.setFraction(1);
    myProgress.addMessage(myDebuggerSession,MessageCategory.INFORMATION,DebuggerBundle.message("status.classes.reloaded",modifiedClasses.size()));
    if (LOG.isDebugEnabled()) {
      LOG.debug("classes reloaded");
    }
  }
 catch (  Throwable e) {
    processException(e);
  }
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      if (project.isDisposed()) {
        return;
      }
      final BreakpointManager breakpointManager=(DebuggerManagerEx.getInstanceEx(project)).getBreakpointManager();
      breakpointManager.reloadBreakpoints();
      debugProcess.getRequestsManager().clearWarnings();
      if (LOG.isDebugEnabled()) {
        LOG.debug("requests updated");
        LOG.debug("time stamp set");
      }
      myDebuggerSession.refresh(false);
      debugProcess.getManagerThread().schedule(new DebuggerCommandImpl(){
        protected void action() throws Exception {
          try {
            breakpointManager.enableBreakpoints(debugProcess);
          }
 catch (          Exception e) {
            processException(e);
          }
        }
        public Priority getPriority(){
          return Priority.HIGH;
        }
      }
);
    }
  }
);
}
