{
  final int[] result={offset};
  ((TreeElement)element).acceptTree(new RecursiveTreeElementWalkingVisitor(false){
    @Override public void visitLeaf(    LeafElement element){
      if (element instanceof ForeignLeafPsiElement || skipTypes != null && skipTypes.contains(element.getElementType())) {
        return;
      }
      result[0]=element.copyTo(buffer,result[0]);
    }
    @Override public void visitComposite(    CompositeElement composite){
      if (element instanceof LazyParseableElement) {
        LazyParseableElement lpe=(LazyParseableElement)element;
        int lpeResult=lpe.copyTo(buffer,result[0]);
        if (lpeResult > 0) {
          result[0]=lpeResult;
          return;
        }
      }
      super.visitComposite(composite);
    }
  }
);
  return result[0];
}
