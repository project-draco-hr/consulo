{
  int keyLength=length(key);
  if (keyLength == 0) {
    if (!root.isEmpty())     return root;
 else     return firstEntry();
  }
  TrieEntry<K,V> found=getNearestEntryForKey(key,keyLength);
  if (key.equals(found.key))   return found;
  int bitIndex=bitIndex(key,found.key);
  if (isValidBitIndex(bitIndex)) {
    TrieEntry<K,V> added=new TrieEntry<K,V>(key,null,bitIndex);
    addEntry(added,keyLength);
    incrementSize();
    TrieEntry<K,V> ceil=nextEntry(added);
    removeEntry(added);
    modCount-=2;
    return ceil;
  }
 else   if (isNullBitKey(bitIndex)) {
    if (!root.isEmpty())     return root;
 else     return firstEntry();
  }
 else   if (isEqualBitKey(bitIndex)) {
    return found;
  }
  throw new IllegalStateException("invalid lookup: " + key);
}
