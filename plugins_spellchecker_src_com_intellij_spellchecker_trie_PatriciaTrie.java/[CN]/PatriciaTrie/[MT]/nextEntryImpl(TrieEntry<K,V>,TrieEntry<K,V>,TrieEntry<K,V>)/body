{
  TrieEntry<K,V> current=start;
  if (previous == null || start != previous.predecessor) {
    while (!current.left.isEmpty()) {
      if (previous == current.left) {
        break;
      }
      if (isValidUplink(current.left,current)) {
        return current.left;
      }
      current=current.left;
    }
  }
  if (current.isEmpty()) {
    return null;
  }
  if (current.right == null)   return null;
  if (previous != current.right) {
    if (isValidUplink(current.right,current)) {
      return current.right;
    }
    return nextEntryImpl(current.right,previous,tree);
  }
  while (current == current.parent.right) {
    if (current == tree)     return null;
    current=current.parent;
  }
  if (current == tree)   return null;
  if (current.parent.right == null) {
    return null;
  }
  if (previous != current.parent.right && isValidUplink(current.parent.right,current.parent)) {
    return current.parent.right;
  }
  if (current.parent.right == current.parent) {
    return null;
  }
  return nextEntryImpl(current.parent.right,previous,tree);
}
