{
  if (key == null) {
    throw new NullPointerException("Key cannot be null");
  }
  int keyLength=length(key);
  if (keyLength == 0) {
    if (root.isEmpty()) {
      incrementSize();
    }
 else {
      incrementModCount();
    }
    return root.setKeyValue(key,value);
  }
  TrieEntry<K,V> found=getNearestEntryForKey(key,keyLength);
  if (key.equals(found.key)) {
    if (found.isEmpty()) {
      incrementSize();
    }
 else {
      incrementModCount();
    }
    return found.setKeyValue(key,value);
  }
  int bitIndex=bitIndex(key,found.key);
  if (isValidBitIndex(bitIndex)) {
    TrieEntry<K,V> t=new TrieEntry<K,V>(key,value,bitIndex);
    addEntry(t,keyLength);
    incrementSize();
    return null;
  }
 else   if (isNullBitKey(bitIndex)) {
    if (root.isEmpty()) {
      incrementSize();
    }
 else {
      incrementModCount();
    }
    return root.setKeyValue(key,value);
  }
 else   if (isEqualBitKey(bitIndex)) {
    if (found != root) {
      incrementModCount();
      return found.setKeyValue(key,value);
    }
  }
  throw new IndexOutOfBoundsException("Failed to put: " + key + " -> "+ value+ ", "+ bitIndex);
}
