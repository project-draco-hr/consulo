{
  if (h == root) {
    throw new IllegalArgumentException("Cannot delete root Entry!");
  }
 else   if (!h.isInternalNode()) {
    throw new IllegalArgumentException(h + " is not an internal Entry!");
  }
  TrieEntry<K,V> p=h.predecessor;
  p.bitIndex=h.bitIndex;
{
    TrieEntry<K,V> parent=p.parent;
    TrieEntry<K,V> child=(p.left == h) ? p.right : p.left;
    if (p.predecessor == p && p.parent != h)     p.predecessor=p.parent;
    if (parent.left == p) {
      parent.left=child;
    }
 else {
      parent.right=child;
    }
    if (child.bitIndex > parent.bitIndex) {
      child.parent=parent;
    }
  }
  ;
{
    if (h.left.parent == h) {
      h.left.parent=p;
    }
    if (h.right.parent == h) {
      h.right.parent=p;
    }
    if (h.parent.left == h) {
      h.parent.left=p;
    }
 else {
      h.parent.right=p;
    }
  }
  ;
  p.parent=h.parent;
  p.left=h.left;
  p.right=h.right;
  if (isValidUplink(p.left,p))   p.left.predecessor=p;
  if (isValidUplink(p.right,p))   p.right.predecessor=p;
}
