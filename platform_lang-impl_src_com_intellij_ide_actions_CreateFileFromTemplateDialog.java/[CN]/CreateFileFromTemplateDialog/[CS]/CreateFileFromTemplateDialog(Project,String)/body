{
  super(project,true);
  myKindCombo.setRenderer(new DefaultListCellRenderer(){
    @Override public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean isSelected,    boolean cellHasFocus){
      super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
      @SuppressWarnings({"unchecked"}) Trinity<String,Icon,String> trinity=(Trinity<String,Icon,String>)value;
      setText(trinity == null ? "" : trinity.first);
      setIcon(trinity == null ? null : trinity.second);
      return this;
    }
  }
);
  setTitle(title);
  new ComboboxSpeedSearch(myKindCombo){
    @Override protected String getElementText(    Object element){
      return ((Trinity<String,Icon,String>)element).first;
    }
  }
;
  final AnAction arrow=new AnAction(){
    @Override public void actionPerformed(    AnActionEvent e){
      if (e.getInputEvent() instanceof KeyEvent) {
        final int code=((KeyEvent)e.getInputEvent()).getKeyCode();
        final int delta=code == KeyEvent.VK_DOWN ? 1 : code == KeyEvent.VK_UP ? -1 : 0;
        final int size=myKindCombo.getModel().getSize();
        int next=myKindCombo.getSelectedIndex() + delta;
        if (next < 0 || next >= size) {
          if (!UISettings.getInstance().CYCLE_SCROLLING) {
            return;
          }
          next=(next + size) % size;
        }
        myKindCombo.setSelectedIndex(next);
      }
    }
  }
;
  final KeyboardShortcut up=new KeyboardShortcut(KeyStroke.getKeyStroke(KeyEvent.VK_UP,0),null);
  final KeyboardShortcut down=new KeyboardShortcut(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,0),null);
  arrow.registerCustomShortcutSet(new CustomShortcutSet(up,down),myNameField);
  myUpDownHint.setIcon(Icons.UP_DOWN_ARROWS);
  init();
}
