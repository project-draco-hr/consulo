{
  final CreateFileFromTemplateDialog dialog=new CreateFileFromTemplateDialog(project);
  return new Builder(){
    @Override public Builder setTitle(    String title){
      dialog.setTitle(title);
      return this;
    }
    public Builder addKind(    @NotNull String name,    @Nullable Icon icon,    @NotNull String templateName){
      dialog.myKindCombo.addItem(new Trinity<String,Icon,String>(name,icon,templateName));
      return this;
    }
    public <T extends PsiElement>T show(    @NotNull String errorTitle,    @Nullable String selectedTemplateName,    @NotNull final FileCreator<T> creator){
      final Ref<T> created=Ref.create(null);
      if (selectedTemplateName != null) {
        Object item=null;
        ComboBoxModel model=dialog.myKindCombo.getModel();
        for (int i=0, n=model.getSize(); i < n; i++) {
          Trinity<String,Icon,String> trinity=(Trinity<String,Icon,String>)model.getElementAt(i);
          if (selectedTemplateName.equals(trinity.third)) {
            item=trinity;
            break;
          }
        }
        if (item != null) {
          dialog.myKindCombo.setSelectedItem(item);
        }
      }
      dialog.myCreator=new ElementCreator(project,errorTitle){
        @Override protected void checkBeforeCreate(        String newName) throws IncorrectOperationException {
          creator.checkBeforeCreate(newName,dialog.getTemplateName());
        }
        @Override protected PsiElement[] create(        String newName) throws Exception {
          final T element=creator.createFile(dialog.getEnteredName(),dialog.getTemplateName());
          created.set(element);
          if (element != null) {
            return new PsiElement[]{element};
          }
          return PsiElement.EMPTY_ARRAY;
        }
        @Override protected String getActionName(        String newName){
          return creator.getActionName(newName,dialog.getTemplateName());
        }
      }
;
      dialog.show();
      if (dialog.getExitCode() == OK_EXIT_CODE) {
        return created.get();
      }
      return null;
    }
  }
;
}
