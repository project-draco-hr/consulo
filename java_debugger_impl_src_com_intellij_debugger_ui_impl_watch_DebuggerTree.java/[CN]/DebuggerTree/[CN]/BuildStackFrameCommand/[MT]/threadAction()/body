{
  try {
    final StackFrameDescriptorImpl stackDescriptor=(StackFrameDescriptorImpl)getNode().getDescriptor();
    final StackFrameProxyImpl frame=stackDescriptor.getFrameProxy();
    if (frame == null) {
      return;
    }
    final Location location=frame.location();
    final ObjectReference thisObjectReference=frame.thisObject();
    final DebuggerContextImpl debuggerContext=getDebuggerContext();
    final EvaluationContextImpl evaluationContext=debuggerContext.createEvaluationContext();
    if (!debuggerContext.isEvaluationPossible()) {
      myChildren.add(myNodeManager.createNode(MessageDescriptor.EVALUATION_NOT_POSSIBLE,evaluationContext));
    }
    final NodeDescriptor descriptor;
    if (thisObjectReference != null) {
      descriptor=myNodeManager.getThisDescriptor(stackDescriptor,thisObjectReference);
    }
 else {
      final ReferenceType type=location.method().declaringType();
      descriptor=myNodeManager.getStaticDescriptor(stackDescriptor,type);
    }
    myChildren.add(myNodeManager.createNode(descriptor,evaluationContext));
    final ClassRenderer classRenderer=NodeRendererSettings.getInstance().getClassRenderer();
    if (classRenderer.SHOW_VAL_FIELDS_AS_LOCAL_VARIABLES) {
      if (thisObjectReference != null && evaluationContext.getDebugProcess().getVirtualMachineProxy().canGetSyntheticAttribute()) {
        final ReferenceType thisRefType=thisObjectReference.referenceType();
        if (thisRefType instanceof ClassType && thisRefType.equals(location.declaringType()) && thisRefType.name().contains("$")) {
          final ClassType clsType=(ClassType)thisRefType;
          for (          Field field : clsType.fields()) {
            if (field.isSynthetic() && StringUtil.startsWith(field.name(),FieldDescriptorImpl.OUTER_LOCAL_VAR_FIELD_PREFIX)) {
              final FieldDescriptorImpl fieldDescriptor=myNodeManager.getFieldDescriptor(stackDescriptor,thisObjectReference,field);
              myChildren.add(myNodeManager.createNode(fieldDescriptor,evaluationContext));
            }
          }
        }
      }
    }
    try {
      buildVariables(stackDescriptor,evaluationContext);
      if (classRenderer.SORT_ASCENDING) {
        Collections.sort(myChildren,NodeManagerImpl.getNodeComparator());
      }
    }
 catch (    EvaluateException e) {
      myChildren.add(myNodeManager.createMessageNode(new MessageDescriptor(e.getMessage())));
    }
    final Pair<Method,Value> methodValuePair=debuggerContext.getDebugProcess().getLastExecutedMethod();
    if (methodValuePair != null) {
      final ValueDescriptorImpl returnValueDescriptor=myNodeManager.getMethodReturnValueDescriptor(stackDescriptor,methodValuePair.getFirst(),methodValuePair.getSecond());
      final DebuggerTreeNodeImpl methodReturnValueNode=myNodeManager.createNode(returnValueDescriptor,evaluationContext);
      myChildren.add(1,methodReturnValueNode);
    }
  }
 catch (  EvaluateException e) {
    myChildren.clear();
    myChildren.add(myNodeManager.createMessageNode(new MessageDescriptor(e.getMessage())));
  }
catch (  InvalidStackFrameException e) {
    LOG.info(e);
    myChildren.clear();
    notifyCancelled();
  }
catch (  InternalException e) {
    if (e.errorCode() == 35) {
      myChildren.add(myNodeManager.createMessageNode(new MessageDescriptor(DebuggerBundle.message("error.corrupt.debug.info",e.getMessage()))));
    }
 else {
      throw e;
    }
  }
  updateUI(true);
}
