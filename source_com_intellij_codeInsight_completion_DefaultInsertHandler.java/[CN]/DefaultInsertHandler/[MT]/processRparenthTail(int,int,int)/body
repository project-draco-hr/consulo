{
  CodeStyleSettings styleSettings=CodeStyleSettingsManager.getSettings(myProject);
  CharSequence chars=myDocument.getCharsSequence();
  int textLength=myDocument.getTextLength();
  Highlighter highlighter=((EditorEx)myEditor).getHighlighter();
  int existingRParenthOffset=-1;
  for (HighlighterIterator iterator=highlighter.createIterator(tailOffset); !iterator.atEnd(); iterator.advance()) {
    IElementType tokenType=iterator.getTokenType();
    if (tokenType instanceof IJavaElementType && JavaTokenType.WHITE_SPACE_OR_COMMENT_BIT_SET.isInSet(tokenType))     continue;
    if (tokenType == JavaTokenType.RPARENTH) {
      existingRParenthOffset=iterator.getStart();
    }
    break;
  }
  if (existingRParenthOffset >= 0) {
    PsiDocumentManager.getInstance(myProject).commitDocument(myDocument);
    TextRange range=getRangeToCheckParensBalance(myFile,myStartOffset);
    int balance=calcParensBalance(myDocument,highlighter,range.getStartOffset(),range.getEndOffset());
    if (balance > 0) {
      existingRParenthOffset=-1;
    }
  }
  boolean spaceWithinParens;
switch (tailType) {
case TailType.CALL_RPARENTH:
case TailType.CALL_RPARENTH_SEMICOLON:
    spaceWithinParens=styleSettings.SPACE_WITHIN_METHOD_CALL_PARENTHESES;
  break;
case TailType.IF_RPARENTH:
spaceWithinParens=styleSettings.SPACE_WITHIN_IF_PARENTHESES;
break;
case TailType.WHILE_RPARENTH:
spaceWithinParens=styleSettings.SPACE_WITHIN_WHILE_PARENTHESES;
break;
case TailType.CAST_RPARENTH:
spaceWithinParens=styleSettings.SPACE_WITHIN_CAST_PARENTHESES;
caretOffset=tailOffset;
break;
default :
spaceWithinParens=false;
LOG.assertTrue(false);
}
if (existingRParenthOffset < 0) {
if (spaceWithinParens) {
myDocument.insertString(tailOffset," ");
if (caretOffset == tailOffset) {
caretOffset++;
}
tailOffset++;
}
myDocument.insertString(tailOffset,")");
if (caretOffset == tailOffset) {
caretOffset++;
}
tailOffset++;
}
 else {
if (spaceWithinParens) {
if (tailOffset == existingRParenthOffset) {
myDocument.insertString(tailOffset," ");
if (caretOffset == tailOffset) {
caretOffset++;
}
tailOffset++;
existingRParenthOffset++;
}
}
if (caretOffset == tailOffset) {
caretOffset=existingRParenthOffset + 1;
}
tailOffset=existingRParenthOffset + 1;
}
if (tailType == TailType.CAST_RPARENTH && styleSettings.SPACE_AFTER_TYPE_CAST) {
if (tailOffset == textLength || chars.charAt(tailOffset) != ' ') {
myDocument.insertString(tailOffset," ");
}
if (caretOffset == tailOffset) {
caretOffset++;
}
tailOffset++;
}
if (tailType == TailType.CALL_RPARENTH_SEMICOLON) {
if (tailOffset == textLength || chars.charAt(tailOffset) != ';') {
myDocument.insertString(tailOffset,";");
}
if (caretOffset == tailOffset) {
caretOffset++;
}
tailOffset++;
}
return caretOffset;
}
