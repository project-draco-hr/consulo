{
  ProgressManager.getInstance().checkCanceled();
  PsiMetaDataBase ret=null;
  SoftReference<CachedValue<PsiMetaDataBase>> value=element.getUserData(META_DATA_KEY);
  if (value == null || (value != NULL && value.get() == null)) {
    for (    final MyBinding binding : ourBindings) {
      try {
        if (isAcceptable(binding.myFilter,element)) {
          final PsiMetaDataBase data=binding.myDataClass.newInstance();
          final CachedValue<PsiMetaDataBase> cachedValue=element.getManager().getCachedValuesManager().createCachedValue(new CachedValueProvider<PsiMetaDataBase>(){
            public Result<PsiMetaDataBase> compute(){
              if (!isAcceptable(binding.myFilter,element)) {
                clearMetaForElement(element);
                final PsiMetaDataBase data1=getMeta(element);
                if (data1 == null)                 return new Result<PsiMetaDataBase>(null);
                return new Result<PsiMetaDataBase>(data1,data1.getDependences());
              }
              data.init(element);
              return new Result<PsiMetaDataBase>(data,data.getDependences());
            }
          }
,false);
          value=new SoftReference<CachedValue<PsiMetaDataBase>>(cachedValue);
          ret=cachedValue.getValue();
          break;
        }
      }
 catch (      IllegalAccessException iae) {
        throw new RuntimeException(iae);
      }
catch (      InstantiationException ie) {
        throw new RuntimeException(ie);
      }
    }
    element.putUserData(META_DATA_KEY,value != null ? value : NULL);
  }
 else   if (value != NULL) {
    ret=value.get().getValue();
  }
  return ret;
}
