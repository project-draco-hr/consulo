{
  HighlightInfo[] highlights=DaemonCodeAnalyzerImpl.getHighlights(editor.getDocument(),HighlightSeverity.WARNING,project);
  if (highlights.length == 0) {
    showMessageWhenNoHighlights(project,file,editor);
    return;
  }
  DaemonCodeAnalyzerSettings settings=DaemonCodeAnalyzerSettings.getInstance();
  if (settings.NEXT_ERROR_ACTION_GOES_TO_ERRORS_FIRST) {
    HighlightInfo[] errors=DaemonCodeAnalyzerImpl.getHighlights(editor.getDocument(),HighlightSeverity.ERROR,project);
    if (errors.length != 0) {
      highlights=errors;
    }
  }
  int offsetToGo=myGoForward ? Integer.MAX_VALUE : Integer.MIN_VALUE;
  HighlightInfo infoToGo=null;
  for (  HighlightInfo info : highlights) {
    int startOffset=info.highlighter.getStartOffset();
    int endOffset=info.highlighter.getStartOffset();
    boolean isItBetter=myGoForward ? startOffset > caretOffset && startOffset < offsetToGo : endOffset < caretOffset && startOffset > offsetToGo;
    if (isItBetter) {
      offsetToGo=startOffset;
      infoToGo=info;
    }
  }
  if (infoToGo == null) {
    gotoNextError(project,editor,file,myGoForward ? -1 : editor.getDocument().getTextLength());
  }
 else {
    navigateToError(project,editor,infoToGo);
  }
}
