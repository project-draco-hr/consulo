{
  myLogger=logger;
  final Object lock=new Object();
  myCache=new SLRUMap<Object,Long>(64,32){
    @Override public Long get(    Object key){
      if (fairSynch) {
synchronized (lock) {
          return super.get(key);
        }
      }
      return super.get(key);
    }
    @Override public void put(    Object key,    @NotNull Long value){
      if (fairSynch) {
synchronized (lock) {
          super.put(key,value);
        }
      }
      super.put(key,value);
    }
    @Override public boolean remove(    Object key){
      if (fairSynch) {
synchronized (lock) {
          return super.remove(key);
        }
      }
      return super.remove(key);
    }
  }
;
  myConvertors=new LinkedList<LogFilter>();
  myProxy=new LogFilter(){
    @NotNull public Integer getAllowedLoggingInterval(    Level level,    String message,    Throwable t,    String[] details){
      return -1;
    }
    public Object getKey(    @NotNull Level level,    @NonNls String message,    @Nullable Throwable t,    @NonNls String... details){
      if (Level.DEBUG.equals(level)) {
        logger.debug(message,t);
      }
 else       if (Level.INFO.equals(level)) {
        logger.info(message,t);
      }
 else       if (Level.WARN.equals(level)) {
        logger.warn(message,t);
      }
 else       if (Level.ERROR.equals(level)) {
        logger.error(message,t,details);
      }
      return null;
    }
  }
;
}
