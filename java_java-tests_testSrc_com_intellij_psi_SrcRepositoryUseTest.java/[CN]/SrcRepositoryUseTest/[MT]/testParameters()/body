{
  setupLoadingFilter();
  PsiClass aClass=myJavaFacade.findClass("pack.MyClass2",GlobalSearchScope.allScope(myProject));
  PsiParameterList list=aClass.getMethods()[0].getParameterList();
  PsiParameter[] parms=list.getParameters();
  assertEquals(5,parms.length);
  assertEquals("p1",parms[0].getName());
  assertEquals("p2",parms[1].getName());
  assertEquals("p3",parms[2].getName());
  assertEquals("p4",parms[3].getName());
  assertEquals("p5",parms[4].getName());
  PsiType type1=parms[0].getType();
  assertEquals("int[]",type1.getPresentableText());
  assertFalse(type1 instanceof PsiPrimitiveType);
  assertTrue(type1 instanceof PsiArrayType);
  assertNull(PsiUtil.resolveClassInType(type1));
  PsiType type2=parms[1].getType();
  assertEquals("Object",type2.getPresentableText());
  assertFalse(type2 instanceof PsiArrayType);
  assertFalse(type2 instanceof PsiPrimitiveType);
  PsiClass target2=PsiUtil.resolveClassInType(type2);
  assertNotNull(target2);
  PsiClass objectClass=myJavaFacade.findClass(CommonClassNames.JAVA_LANG_OBJECT,GlobalSearchScope.allScope(myProject));
  assertEquals(objectClass,target2);
  checkPackAAA(parms[2].getType());
  checkPackAAA(parms[3].getType());
  checkPackAAA(parms[4].getType());
  teardownLoadingFilter();
  parms[0].getModifierList();
}
