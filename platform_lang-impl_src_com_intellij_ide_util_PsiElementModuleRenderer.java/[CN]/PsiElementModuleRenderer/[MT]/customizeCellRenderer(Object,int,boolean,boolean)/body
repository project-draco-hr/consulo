{
  if (value instanceof PsiElement) {
    PsiElement element=(PsiElement)value;
    if (element.isValid()) {
      PsiFile psiFile=element.getContainingFile();
      Module module=ModuleUtil.findModuleForPsiElement(element);
      final ProjectFileIndex fileIndex=ProjectRootManager.getInstance(element.getProject()).getFileIndex();
      if (module != null) {
        boolean inTestSource=false;
        if (psiFile != null) {
          VirtualFile vFile=psiFile.getVirtualFile();
          if (vFile != null) {
            inTestSource=fileIndex.isInTestSourceContent(vFile);
          }
        }
        myText=module.getName();
        if (inTestSource) {
          setIcon(TEST_ICON);
        }
 else {
          setIcon(module.getModuleType().getNodeIcon(false));
        }
      }
 else {
        if (psiFile != null) {
          VirtualFile vFile=psiFile.getVirtualFile();
          if (vFile != null) {
            final boolean isInLibraries=fileIndex.isInLibrarySource(vFile) || fileIndex.isInLibraryClasses(vFile);
            if (isInLibraries) {
              setIcon(LIB_ICON);
              for (              OrderEntry order : fileIndex.getOrderEntriesForFile(vFile)) {
                if (order instanceof LibraryOrderEntry || order instanceof JdkOrderEntry) {
                  myText=order.getPresentableName();
                  break;
                }
              }
              VirtualFile jar=JarFileSystem.getInstance().getVirtualFileForJar(vFile);
              if (jar != null) {
                myText+=" (" + jar.getName() + ")";
              }
            }
          }
        }
      }
    }
 else {
      myText="";
    }
  }
  setText(myText);
  setBorder(BorderFactory.createEmptyBorder(0,0,0,2));
  setHorizontalTextPosition(SwingConstants.LEFT);
  setBackground(selected ? UIUtil.getListSelectionBackground() : UIUtil.getListBackground());
  setForeground(selected ? UIUtil.getListSelectionForeground() : UIUtil.getInactiveTextColor());
}
