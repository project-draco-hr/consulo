{
  final PsiManagerEx psiManager=(PsiManagerEx)member.getManager();
  final GlobalSearchScope maximalUseScope=psiManager.getFileManager().getUseScope(member);
  PsiFile file=member.getContainingFile();
  if (JspPsiUtil.isInJspFile(file))   return maximalUseScope;
  PsiClass aClass=member.getContainingClass();
  if (aClass instanceof PsiAnonymousClass) {
    PsiElement methodCallExpr=PsiTreeUtil.getParentOfType(aClass,PsiMethodCallExpression.class);
    return new LocalSearchScope(methodCallExpr != null ? methodCallExpr : aClass);
  }
  if (member.hasModifierProperty(PsiModifier.PUBLIC)) {
    return maximalUseScope;
  }
 else   if (member.hasModifierProperty(PsiModifier.PROTECTED)) {
    return maximalUseScope;
  }
 else   if (member.hasModifierProperty(PsiModifier.PRIVATE)) {
    PsiClass topClass=PsiUtil.getTopLevelClass(member);
    return topClass != null ? new LocalSearchScope(topClass) : new LocalSearchScope(file);
  }
 else {
    if (file instanceof PsiJavaFile) {
      PsiPackage aPackage=JavaPsiFacade.getInstance(psiManager.getProject()).findPackage(((PsiJavaFile)file).getPackageName());
      if (aPackage != null) {
        SearchScope scope=PackageScope.packageScope(aPackage,false);
        scope=scope.intersectWith(maximalUseScope);
        return scope;
      }
    }
    return maximalUseScope;
  }
}
