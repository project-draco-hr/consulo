{
  if (psiClass.isAnonymous() || psiClass.isInterface() || psiClass.isEnum()) {
    return;
  }
  if (!hasInheritConstructorsAnnotation(psiClass))   return;
  final PsiClass superClass=psiClass.getSuperClass();
  if (superClass == null)   return;
  final PsiSubstitutor superClassSubstitutor=TypeConversionUtil.getSuperClassSubstitutor(superClass,psiClass,PsiSubstitutor.EMPTY);
  for (  PsiMethod constructor : superClass.getConstructors()) {
    if (constructor.hasModifierProperty(PsiModifier.PRIVATE))     continue;
    final GrLightMethodBuilder inheritedConstructor=new GrLightMethodBuilder(psiClass.getManager(),psiClass.getName());
    inheritedConstructor.setContainingClass(psiClass);
    inheritedConstructor.setConstructor(true);
    inheritedConstructor.setNavigationElement(psiClass);
    inheritedConstructor.addModifier(VisibilityUtil.getVisibilityModifier(constructor.getModifierList()));
    inheritedConstructor.setOriginInfo("created by @InheritConstructors");
    for (    PsiParameter parameter : constructor.getParameterList().getParameters()) {
      String name=StringUtil.notNullize(parameter.getName());
      PsiType type=superClassSubstitutor.substitute(parameter.getType());
      inheritedConstructor.addParameter(name,type,false);
    }
    if (psiClass.findCodeMethodsBySignature(inheritedConstructor,false).length == 0) {
      collector.add(inheritedConstructor);
    }
  }
}
