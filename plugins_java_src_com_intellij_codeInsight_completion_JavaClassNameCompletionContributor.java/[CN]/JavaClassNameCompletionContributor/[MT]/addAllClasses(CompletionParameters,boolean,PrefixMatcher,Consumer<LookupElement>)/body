{
  final PsiElement insertedElement=parameters.getPosition();
  final ElementFilter filter=IN_TYPE_PARAMETER.accepts(insertedElement) ? new ExcludeDeclaredFilter(new ClassFilter(PsiTypeParameter.class)) : TrueFilter.INSTANCE;
  final boolean inJavaContext=parameters.getPosition() instanceof PsiIdentifier;
  final boolean afterNew=AFTER_NEW.accepts(insertedElement);
  if (afterNew) {
    final PsiExpression expr=PsiTreeUtil.getContextOfType(insertedElement,PsiExpression.class,true);
    for (    final ExpectedTypeInfo info : ExpectedTypesProvider.getExpectedTypes(expr,true)) {
      final PsiType type=info.getType();
      final PsiClass psiClass=PsiUtil.resolveClassInType(type);
      if (psiClass != null) {
        consumer.consume(createClassLookupItem(psiClass,inJavaContext));
      }
      final PsiType defaultType=info.getDefaultType();
      if (!defaultType.equals(type)) {
        final PsiClass defClass=PsiUtil.resolveClassInType(defaultType);
        if (defClass != null) {
          consumer.consume(createClassLookupItem(defClass,true));
        }
      }
    }
  }
  final boolean pkgContext=JavaCompletionUtil.inSomePackage(insertedElement);
  AllClassesGetter.processJavaClasses(parameters,matcher,filterByScope,new Consumer<PsiClass>(){
    @Override public void consume(    PsiClass psiClass){
      if (filter.isAcceptable(psiClass,insertedElement)) {
        if (!inJavaContext) {
          consumer.consume(AllClassesGetter.createLookupItem(psiClass,AllClassesGetter.TRY_SHORTENING));
        }
 else {
          for (          JavaPsiClassReferenceElement element : createClassLookupItems(psiClass,afterNew,JavaClassNameInsertHandler.JAVA_CLASS_INSERT_HANDLER,new Condition<PsiClass>(){
            @Override public boolean value(            PsiClass psiClass){
              return filter.isAcceptable(psiClass,insertedElement) && AllClassesGetter.isAcceptableInContext(insertedElement,psiClass,filterByScope,pkgContext);
            }
          }
)) {
            consumer.consume(element);
          }
        }
      }
    }
  }
);
}
