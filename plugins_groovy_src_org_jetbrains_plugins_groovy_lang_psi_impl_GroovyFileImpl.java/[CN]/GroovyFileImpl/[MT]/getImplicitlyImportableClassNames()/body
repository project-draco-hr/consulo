{
  final Module module=ModuleUtil.findModuleForPsiElement(this);
  UserDataHolder holder=module != null ? module : this;
  return CachedValuesManager.getManager(getProject()).getCachedValue(holder,IMPLICITLY_IMPORTABLE_CLASSES,new CachedValueProvider<FactoryMap<String,Set<String>>>(){
    public Result<FactoryMap<String,Set<String>>> compute(){
      final JavaPsiFacade facade=JavaPsiFacade.getInstance(getProject());
      final FactoryMap<String,Set<String>> result=new ConcurrentFactoryMap<String,Set<String>>(){
        @Override protected Set<String> create(        String pkgName){
          final HashSet<String> shortNames=new HashSet<String>();
          PsiPackage aPackage=facade.findPackage(pkgName);
          if (aPackage != null) {
            for (            PsiClass aClass : aPackage.getClasses()) {
              ContainerUtil.addIfNotNull(aClass.getName(),shortNames);
            }
          }
          return shortNames;
        }
      }
;
      return Result.create(result,ProjectRootManager.getInstance(getProject()),PsiModificationTracker.JAVA_STRUCTURE_MODIFICATION_COUNT);
    }
  }
,false);
}
