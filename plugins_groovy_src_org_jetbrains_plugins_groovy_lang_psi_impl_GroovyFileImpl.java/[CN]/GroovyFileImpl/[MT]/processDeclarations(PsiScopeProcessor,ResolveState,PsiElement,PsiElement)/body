{
  PsiClass scriptClass=getScriptClass();
  if (scriptClass != null) {
    if (!scriptClass.processDeclarations(processor,state,lastParent,place))     return false;
    if (!ResolveUtil.processElement(processor,scriptClass,state))     return false;
  }
  for (  GrTypeDefinition definition : getTypeDefinitions()) {
    if (!ResolveUtil.processElement(processor,definition,state))     return false;
  }
  if (lastParent != null && !(lastParent instanceof GrTypeDefinition) && scriptClass != null) {
    if (!ResolveUtil.processElement(processor,getSyntheticArgsParameter(),state))     return false;
  }
  if (!processChildrenScopes(this,processor,state,lastParent,place))   return false;
  final ClassHint classHint=processor.getHint(ClassHint.KEY);
  final boolean processClasses=classHint == null || classHint.shouldProcess(ClassHint.ResolveKind.CLASS);
  final String expectedName=ResolveUtil.getNameHint(processor);
  PsiScopeProcessor importProcessor=!processClasses || expectedName == null ? processor : new DelegatingScopeProcessor(processor){
    public boolean execute(    PsiElement element,    ResolveState state){
      return isImplicitlyImported(element,expectedName) || super.execute(element,state);
    }
  }
;
  for (  GrImportStatement importStatement : getImportStatements()) {
    if (!importStatement.processDeclarations(importProcessor,state,lastParent,place)) {
      return false;
    }
  }
  if (processClasses && !processImplicitImports(processor,state,lastParent,place)) {
    return false;
  }
  if (classHint == null || classHint.shouldProcess(ClassHint.ResolveKind.PACKAGE)) {
    final JavaPsiFacade facade=JavaPsiFacade.getInstance(getProject());
    if (expectedName != null) {
      final PsiPackage pkg=facade.findPackage(expectedName);
      if (pkg != null && !processor.execute(pkg,state)) {
        return false;
      }
    }
 else {
      PsiPackage defaultPackage=facade.findPackage("");
      if (defaultPackage != null) {
        for (        PsiPackage subPackage : defaultPackage.getSubPackages(getResolveScope())) {
          if (!ResolveUtil.processElement(processor,subPackage,state))           return false;
        }
      }
    }
  }
  return true;
}
