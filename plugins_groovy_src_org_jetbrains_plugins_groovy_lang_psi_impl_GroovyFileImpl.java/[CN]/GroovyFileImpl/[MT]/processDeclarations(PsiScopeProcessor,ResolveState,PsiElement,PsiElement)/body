{
  PsiClass scriptClass=getScriptClass();
  if (scriptClass != null) {
    if (!scriptClass.processDeclarations(processor,state,lastParent,place))     return false;
    if (!ResolveUtil.processElement(processor,scriptClass))     return false;
  }
  for (  GrTypeDefinition definition : getTypeDefinitions()) {
    if (!ResolveUtil.processElement(processor,definition))     return false;
  }
  if (lastParent != null && !(lastParent instanceof GrTypeDefinition) && scriptClass != null) {
    if (!ResolveUtil.processElement(processor,getSyntheticArgsParameter()))     return false;
  }
  if (!processChildrenScopes(this,processor,state,lastParent,place))   return false;
  final ClassHint classHint=processor.getHint(ClassHint.KEY);
  final boolean processClasses=classHint == null || classHint.shouldProcess(ClassHint.ResolveKind.CLASS);
  final NameHint nameHint=processor.getHint(NameHint.KEY);
  final String expectedName=nameHint == null ? null : nameHint.getName(state);
  PsiScopeProcessor importProcessor=!processClasses || expectedName == null ? processor : new BaseScopeProcessor(){
    public boolean execute(    PsiElement element,    ResolveState state){
      return isImplicitlyImported(element,expectedName) || processor.execute(element,state);
    }
    @Override public <T>T getHint(    Key<T> hintKey){
      return processor.getHint(hintKey);
    }
  }
;
  for (  GrImportStatement importStatement : getImportStatements()) {
    if (!importStatement.processDeclarations(importProcessor,state,lastParent,place)) {
      return false;
    }
  }
  if (processClasses && !processImplicitImports(processor,state,lastParent,place)) {
    return false;
  }
  if (classHint == null || classHint.shouldProcess(ClassHint.ResolveKind.PACKAGE)) {
    PsiPackage defaultPackage=JavaPsiFacade.getInstance(getProject()).findPackage("");
    if (defaultPackage != null) {
      for (      PsiPackage subPackage : defaultPackage.getSubPackages(getResolveScope())) {
        if (!ResolveUtil.processElement(processor,subPackage))         return false;
      }
    }
  }
  return true;
}
