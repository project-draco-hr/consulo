{
  final PsiFile placeFile=getOriginalFile();
  final VirtualFile placeVFfile=placeFile.getVirtualFile();
  if (placeVFfile == null) {
    return true;
  }
  final Project project=getProject();
  for (  final GroovyFile file : GroovyDslFileIndex.getDslFiles(new AdditionalIndexedRootsScope(getResolveScope(),StandardDslIndexedRootsProvider.class))) {
    final VirtualFile vfile=file.getVirtualFile();
    if (vfile == null || vfile.equals(placeVFfile)) {
      continue;
    }
    CachedValue<GroovyDslExecutor> cachedEnhanced=file.getUserData(CACHED_ENHANCED_KEY);
    if (cachedEnhanced == null) {
      file.putUserData(CACHED_ENHANCED_KEY,cachedEnhanced=file.getManager().getCachedValuesManager().createCachedValue(new CachedValueProvider<GroovyDslExecutor>(){
        public Result<GroovyDslExecutor> compute(){
          return Result.create(new GroovyDslExecutor(file.getText(),vfile.getName()),file);
        }
      }
,false));
    }
    final StringBuilder classText=new StringBuilder();
    cachedEnhanced.getValue().processScriptVariants(new ScriptWrapper(){
      public String getExtension(){
        return placeVFfile.getExtension();
      }
    }
,new GroovyEnhancerConsumer(){
      public void property(      String name,      String type){
        classText.append("def ").append(type).append(" ").append(name).append("\n");
      }
      public void method(      String name,      String type,      final LinkedHashMap<String,String> parameters){
        classText.append("def ").append(type).append(" ").append(name).append("(");
        classText.append(StringUtil.join(parameters.keySet(),new Function<String,String>(){
          public String fun(          String s){
            return parameters.get(s) + " " + s;
          }
        }
,", "));
        classText.append(") {}\n");
      }
    }
);
    if (classText.length() > 0) {
      final PsiClass psiClass=GroovyPsiElementFactory.getInstance(project).createGroovyFile("class GroovyEnhanced {\n" + classText + "}",false,place).getClasses()[0];
      final NameHint nameHint=processor.getHint(NameHint.KEY);
      final String expectedName=nameHint == null ? null : nameHint.getName(ResolveState.initial());
      for (      PsiMethod method : psiClass.getMethods()) {
        if ((expectedName == null || expectedName.equals(method.getName())) && !processor.execute(method,ResolveState.initial()))         return false;
      }
      for (      final PsiField field : psiClass.getFields()) {
        if ((expectedName == null || expectedName.equals(field.getName())) && !processor.execute(field,ResolveState.initial()))         return false;
      }
    }
  }
  return true;
}
