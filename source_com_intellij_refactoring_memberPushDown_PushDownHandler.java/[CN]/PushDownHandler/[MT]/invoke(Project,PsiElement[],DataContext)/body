{
  if (elements.length != 1)   return;
  PsiElement element=elements[0];
  PsiClass aClass;
  PsiElement aMember=null;
  if (element instanceof PsiClass) {
    aClass=(PsiClass)element;
  }
 else   if (element instanceof PsiMethod) {
    aClass=((PsiMethod)element).getContainingClass();
    aMember=element;
  }
 else   if (element instanceof PsiField) {
    aClass=((PsiField)element).getContainingClass();
    aMember=element;
  }
 else   return;
  myClass=aClass;
  if (!myClass.isWritable()) {
    if (!RefactoringMessageUtil.checkReadOnlyStatus(project,aClass))     return;
  }
  MemberInfoStorage memberInfoStorage=new MemberInfoStorage(myClass,new MemberInfo.Filter(){
    public boolean includeMember(    PsiMember element){
      if (element instanceof PsiMethod) {
        return !((PsiMethod)element).isConstructor();
      }
 else {
        return true;
      }
    }
  }
);
  List<MemberInfo> members=memberInfoStorage.getClassMemberInfos(myClass);
  PsiManager manager=myClass.getManager();
  for (int i=0; i < members.size(); i++) {
    MemberInfo member=members.get(i);
    if (manager.areElementsEquivalent(member.getMember(),aMember)) {
      member.setChecked(true);
      break;
    }
  }
  PushDownDialog dialog=new PushDownDialog(project,members.toArray(new MemberInfo[members.size()]),myClass);
  dialog.show();
}
