{
  if (!isApplicableFor(configuration)) {
    return;
  }
  ApplicationConfiguration appConfiguration=(ApplicationConfiguration)configuration;
  SnapShooterConfigurationSettings settings=appConfiguration.getUserData(SnapShooterConfigurationSettings.SNAP_SHOOTER_KEY);
  if (settings == null) {
    settings=new SnapShooterConfigurationSettings();
    appConfiguration.putUserData(SnapShooterConfigurationSettings.SNAP_SHOOTER_KEY,settings);
  }
  if (appConfiguration.ENABLE_SWING_INSPECTOR) {
    try {
      settings.setLastPort(NetUtils.findAvailableSocketPort());
    }
 catch (    IOException ex) {
      settings.setLastPort(-1);
    }
  }
  if (appConfiguration.ENABLE_SWING_INSPECTOR && settings.getLastPort() != -1) {
    params.getProgramParametersList().prepend(appConfiguration.MAIN_CLASS_NAME);
    params.getProgramParametersList().prepend(Integer.toString(settings.getLastPort()));
    params.getProgramParametersList().prepend(Integer.toString(params.getClassPath().getPathList().size() + 1));
    Set<String> paths=new TreeSet<String>();
    paths.add(PathUtil.getJarPathForClass(SnapShooter.class));
    paths.add(PathUtil.getJarPathForClass(BaseComponent.class));
    paths.add(PathUtil.getJarPathForClass(ProjectComponent.class));
    paths.add(PathUtil.getJarPathForClass(LwComponent.class));
    paths.add(PathUtil.getJarPathForClass(GridConstraints.class));
    paths.add(PathUtil.getJarPathForClass(LafManagerListener.class));
    paths.add(PathUtil.getJarPathForClass(DataProvider.class));
    paths.add(PathUtil.getJarPathForClass(XmlStringUtil.class));
    paths.add(PathUtil.getJarPathForClass(Navigatable.class));
    paths.add(PathUtil.getJarPathForClass(AreaInstance.class));
    paths.add(PathUtil.getJarPathForClass(FormLayout.class));
    paths.addAll(PathManager.getUtilClassPath());
    for (    String path : paths) {
      params.getClassPath().addFirst(path);
    }
    params.setMainClass("com.intellij.uiDesigner.snapShooter.SnapShooter");
  }
}
