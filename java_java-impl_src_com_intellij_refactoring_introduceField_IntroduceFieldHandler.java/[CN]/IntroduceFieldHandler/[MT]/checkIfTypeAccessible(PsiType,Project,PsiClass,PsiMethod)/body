{
  final PsiClass typeClass=PsiUtil.resolveClassInType(type);
  if (typeClass != null) {
    if (typeClass instanceof PsiTypeParameter) {
      if (ArrayUtil.find(parentClass.getTypeParameters(),typeClass) == -1) {
        type=PsiType.getJavaLangObject(PsiManager.getInstance(project),GlobalSearchScope.allScope(project));
      }
    }
 else     if (PsiTreeUtil.isAncestor(containingMethod,typeClass,true)) {
      final PsiClassType[] superTypes=typeClass.getSuperTypes();
      if (superTypes.length > 0) {
        return checkIfTypeAccessible(superTypes[0],project,parentClass,containingMethod);
      }
    }
  }
  return type;
}
