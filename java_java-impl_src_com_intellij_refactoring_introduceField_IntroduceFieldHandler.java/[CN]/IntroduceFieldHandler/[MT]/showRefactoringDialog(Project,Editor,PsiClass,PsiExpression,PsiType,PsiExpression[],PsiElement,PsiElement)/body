{
  final AbstractInplaceIntroducer activeIntroducer=AbstractInplaceIntroducer.getActiveIntroducer(editor);
  PsiLocalVariable localVariable=null;
  if (expr instanceof PsiReferenceExpression) {
    PsiElement ref=((PsiReferenceExpression)expr).resolve();
    if (ref instanceof PsiLocalVariable) {
      localVariable=(PsiLocalVariable)ref;
    }
  }
 else   if (anchorElement instanceof PsiLocalVariable) {
    localVariable=(PsiLocalVariable)anchorElement;
  }
  String enteredName=null;
  boolean replaceAll=false;
  if (activeIntroducer != null) {
    activeIntroducer.stopIntroduce(editor);
    expr=(PsiExpression)activeIntroducer.getExpr();
    localVariable=(PsiLocalVariable)activeIntroducer.getLocalVariable();
    occurrences=(PsiExpression[])activeIntroducer.getOccurrences();
    enteredName=activeIntroducer.getInputName();
    replaceAll=activeIntroducer.isReplaceAllOccurrences();
    type=((AbstractJavaInplaceIntroducer)activeIntroducer).getType();
    IntroduceFieldDialog.ourLastInitializerPlace=((InplaceIntroduceFieldPopup)activeIntroducer).getInitializerPlace();
  }
  final PsiMethod containingMethod=PsiTreeUtil.getParentOfType(expr != null ? expr : anchorElement,PsiMethod.class);
  final PsiModifierListOwner staticParentElement=PsiUtil.getEnclosingStaticElement(getElement(expr,anchorElement),parentClass);
  boolean declareStatic=staticParentElement != null;
  boolean isInSuperOrThis=false;
  if (!declareStatic) {
    for (int i=0; !declareStatic && i < occurrences.length; i++) {
      PsiExpression occurrence=occurrences[i];
      isInSuperOrThis=isInSuperOrThis(occurrence);
      declareStatic=isInSuperOrThis;
    }
  }
  int occurrencesNumber=occurrences.length;
  final boolean currentMethodConstructor=containingMethod != null && containingMethod.isConstructor();
  final boolean allowInitInMethod=(!currentMethodConstructor || !isInSuperOrThis) && (anchorElement instanceof PsiLocalVariable || anchorElement instanceof PsiStatement);
  final boolean allowInitInMethodIfAll=(!currentMethodConstructor || !isInSuperOrThis) && anchorElementIfAll instanceof PsiStatement;
  if (editor != null && editor.getSettings().isVariableInplaceRenameEnabled() && (expr == null || expr.isPhysical()) && activeIntroducer == null) {
    myInplaceIntroduceFieldPopup=new InplaceIntroduceFieldPopup(localVariable,parentClass,declareStatic,currentMethodConstructor,occurrences,expr,new TypeSelectorManagerImpl(project,type,containingMethod,expr,occurrences),editor,allowInitInMethod,allowInitInMethodIfAll,anchorElement,anchorElementIfAll,expr != null ? createOccurrenceManager(expr,parentClass) : null,project);
    if (myInplaceIntroduceFieldPopup.startInplaceIntroduceTemplate()) {
      return null;
    }
  }
  IntroduceFieldDialog dialog=new IntroduceFieldDialog(project,parentClass,expr,localVariable,currentMethodConstructor,localVariable != null,declareStatic,occurrences,allowInitInMethod,allowInitInMethodIfAll,new TypeSelectorManagerImpl(project,type,containingMethod,expr,occurrences),enteredName);
  dialog.setReplaceAllOccurrences(replaceAll);
  dialog.show();
  if (!dialog.isOK()) {
    if (occurrencesNumber > 1) {
      WindowManager.getInstance().getStatusBar(project).setInfo(RefactoringBundle.message("press.escape.to.remove.the.highlighting"));
    }
    return null;
  }
  if (!dialog.isDeleteVariable()) {
    localVariable=null;
  }
  return new Settings(dialog.getEnteredName(),expr,occurrences,dialog.isReplaceAllOccurrences(),declareStatic,dialog.isDeclareFinal(),dialog.getInitializerPlace(),dialog.getFieldVisibility(),localVariable,dialog.getFieldType(),localVariable != null,(TargetDestination)null,false,false);
}
