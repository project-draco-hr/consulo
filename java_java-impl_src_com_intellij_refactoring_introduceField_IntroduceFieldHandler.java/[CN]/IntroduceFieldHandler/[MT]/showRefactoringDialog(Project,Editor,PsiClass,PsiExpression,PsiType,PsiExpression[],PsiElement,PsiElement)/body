{
  final PsiMethod containingMethod=PsiTreeUtil.getParentOfType(expr != null ? expr : anchorElement,PsiMethod.class);
  PsiElement element=null;
  if (expr != null) {
    element=expr.getUserData(ElementToWorkOn.PARENT);
    if (element == null)     element=expr;
  }
  if (element == null)   element=anchorElement;
  final PsiModifierListOwner staticParentElement=PsiUtil.getEnclosingStaticElement(element,parentClass);
  boolean declareStatic=staticParentElement != null;
  boolean isInSuperOrThis=false;
  if (!declareStatic) {
    for (int i=0; !declareStatic && i < occurences.length; i++) {
      PsiExpression occurence=occurences[i];
      isInSuperOrThis=isInSuperOrThis(occurence);
      declareStatic=isInSuperOrThis;
    }
  }
  PsiLocalVariable localVariable=null;
  if (expr instanceof PsiReferenceExpression) {
    PsiElement ref=((PsiReferenceExpression)expr).resolve();
    if (ref instanceof PsiLocalVariable) {
      localVariable=(PsiLocalVariable)ref;
    }
  }
 else   if (anchorElement instanceof PsiLocalVariable) {
    localVariable=(PsiLocalVariable)anchorElement;
  }
  int occurencesNumber=occurences.length;
  final boolean currentMethodConstructor=containingMethod != null && containingMethod.isConstructor();
  final boolean allowInitInMethod=(!currentMethodConstructor || !isInSuperOrThis) && anchorElement instanceof PsiLocalVariable;
  final boolean allowInitInMethodIfAll=(!currentMethodConstructor || !isInSuperOrThis) && anchorElementIfAll instanceof PsiStatement;
  IntroduceFieldDialog dialog=new IntroduceFieldDialog(project,parentClass,expr,localVariable,currentMethodConstructor,localVariable != null,declareStatic,occurencesNumber,allowInitInMethod,allowInitInMethodIfAll,new TypeSelectorManagerImpl(project,type,containingMethod,expr,occurences));
  dialog.show();
  if (!dialog.isOK()) {
    if (occurencesNumber > 1) {
      WindowManager.getInstance().getStatusBar(project).setInfo(RefactoringBundle.message("press.escape.to.remove.the.highlighting"));
    }
    return null;
  }
  if (!dialog.isDeleteVariable()) {
    localVariable=null;
  }
  return new Settings(dialog.getEnteredName(),dialog.isReplaceAllOccurrences(),declareStatic,dialog.isDeclareFinal(),dialog.getInitializerPlace(),dialog.getFieldVisibility(),localVariable,dialog.getFieldType(),localVariable != null,(TargetDestination)null,false,false);
}
