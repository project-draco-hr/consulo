{
  final Type[] args=Type.getArgumentTypes(desc);
  final Type returnType=Type.getReturnType(desc);
  final MethodVisitor v=cv.visitMethod(access,name,desc,signature,exceptions);
  final Map<Integer,String> paramNames=myMethodParamNames.get(myClassName + '.' + name+ desc);
  return new MethodVisitor(Opcodes.ASM4,v){
    private final List<Integer> myNotNullParams=new ArrayList<Integer>();
    private int mySyntheticCount=0;
    private boolean myIsNotNull=false;
    private String myMessage=null;
    private Label myStartGeneratedCodeLabel;
    public AnnotationVisitor visitParameterAnnotation(    final int parameter,    final String anno,    final boolean visible){
      AnnotationVisitor av=mv.visitParameterAnnotation(parameter,anno,visible);
      if (isReferenceType(args[parameter]) && anno.equals(NOT_NULL_TYPE)) {
        myNotNullParams.add(new Integer(parameter));
        av=new AnnotationVisitor(Opcodes.ASM4,av){
          @Override public void visit(          String methodName,          Object o){
            if (ANNOTATION_DEFAULT_METHOD.equals(methodName)) {
              String message=(String)o;
              if (!message.isEmpty()) {
                myMessage=message;
              }
            }
            super.visit(methodName,o);
          }
        }
;
      }
 else       if (anno.equals(SYNTHETIC_TYPE)) {
        mySyntheticCount++;
      }
      return av;
    }
    @Override public AnnotationVisitor visitAnnotation(    String anno,    boolean isRuntime){
      AnnotationVisitor av=mv.visitAnnotation(anno,isRuntime);
      if (isReferenceType(returnType) && anno.equals(NOT_NULL_TYPE)) {
        myIsNotNull=true;
        av=new AnnotationVisitor(Opcodes.ASM4,av){
          @Override public void visit(          String methodName,          Object o){
            if (ANNOTATION_DEFAULT_METHOD.equals(methodName)) {
              String message=(String)o;
              if (!message.isEmpty()) {
                myMessage=message;
              }
            }
            super.visit(methodName,o);
          }
        }
;
      }
      return av;
    }
    @Override public void visitCode(){
      if (myNotNullParams.size() > 0) {
        myStartGeneratedCodeLabel=new Label();
        mv.visitLabel(myStartGeneratedCodeLabel);
      }
      for (      Integer param : myNotNullParams) {
        int var=((access & ACC_STATIC) == 0) ? 1 : 0;
        for (int i=0; i < param; ++i) {
          var+=args[i].getSize();
        }
        mv.visitVarInsn(ALOAD,var);
        Label end=new Label();
        mv.visitJumpInsn(IFNONNULL,end);
        String paramName=paramNames == null ? null : paramNames.get(param);
        String descrPattern=myMessage != null ? myMessage : paramName != null ? NULL_ARG_MESSAGE_NAMED : NULL_ARG_MESSAGE_INDEXED;
        String[] args=myMessage != null ? EMPTY_STRING_ARRAY : new String[]{paramName != null ? paramName : String.valueOf(param - mySyntheticCount),myClassName,name};
        generateThrow(IAE_CLASS_NAME,end,descrPattern,args);
      }
    }
    @Override public void visitLocalVariable(    String name,    String desc,    String signature,    Label start,    Label end,    int index){
      final boolean isParameter=getParameterIndex(index,access,args) >= 0;
      final Label label=(isParameter && myStartGeneratedCodeLabel != null) ? myStartGeneratedCodeLabel : start;
      mv.visitLocalVariable(name,desc,signature,label,end,index);
    }
    @Override public void visitInsn(    int opcode){
      if (opcode == ARETURN) {
        if (myIsNotNull) {
          mv.visitInsn(DUP);
          final Label skipLabel=new Label();
          mv.visitJumpInsn(IFNONNULL,skipLabel);
          String descrPattern=myMessage != null ? myMessage : NULL_RESULT_MESSAGE;
          String[] args=myMessage != null ? EMPTY_STRING_ARRAY : new String[]{myClassName,name};
          generateThrow(ISE_CLASS_NAME,skipLabel,descrPattern,args);
        }
      }
      mv.visitInsn(opcode);
    }
    private void generateThrow(    final String exceptionClass,    final Label end,    final String descrPattern,    final String[] args){
      mv.visitTypeInsn(NEW,exceptionClass);
      mv.visitInsn(DUP);
      mv.visitLdcInsn(descrPattern);
      mv.visitLdcInsn(args.length);
      mv.visitTypeInsn(ANEWARRAY,OBJECT_CLASS_NAME);
      for (int i=0; i < args.length; i++) {
        mv.visitInsn(DUP);
        mv.visitLdcInsn(i);
        mv.visitLdcInsn(args[i]);
        mv.visitInsn(AASTORE);
      }
      mv.visitMethodInsn(INVOKESTATIC,STRING_CLASS_NAME,"format","(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;");
      mv.visitMethodInsn(INVOKESPECIAL,exceptionClass,CONSTRUCTOR_NAME,EXCEPTION_INIT_SIGNATURE);
      mv.visitInsn(ATHROW);
      mv.visitLabel(end);
      myIsModification=true;
      processPostponedErrors();
    }
    @Override public void visitMaxs(    final int maxStack,    final int maxLocals){
      try {
        super.visitMaxs(maxStack,maxLocals);
      }
 catch (      Throwable e) {
        registerError(name,"visitMaxs",e);
      }
    }
  }
;
}
