{
  final Map<String,Map<Integer,String>> methodParamNames=new LinkedHashMap<String,Map<Integer,String>>();
  reader.accept(new ClassVisitor(Opcodes.ASM4){
    private String myClassName=null;
    public void visit(    final int version,    final int access,    final String name,    final String signature,    final String superName,    final String[] interfaces){
      myClassName=name;
    }
    public MethodVisitor visitMethod(    final int access,    final String name,    final String desc,    final String signature,    final String[] exceptions){
      final String methodName=myClassName + '.' + name+ desc;
      final Map<Integer,String> names=new LinkedHashMap<Integer,String>();
      final Type[] args=Type.getArgumentTypes(desc);
      methodParamNames.put(methodName,names);
      return new MethodVisitor(api){
        @Override public void visitLocalVariable(        String name2,        String desc,        String signature,        Label start,        Label end,        int index){
          int parameterIndex=getParameterIndex(index,access,args);
          if (parameterIndex >= 0) {
            names.put(parameterIndex,name2);
          }
        }
      }
;
    }
  }
,0);
  return methodParamNames;
}
