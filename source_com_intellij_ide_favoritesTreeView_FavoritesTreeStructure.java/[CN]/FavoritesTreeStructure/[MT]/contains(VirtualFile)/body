{
  final ProjectFileIndex projectFileIndex=ProjectRootManager.getInstance(myProject).getFileIndex();
  final ContentIterator contentIterator=new ContentIterator(){
    public boolean processFile(    VirtualFile fileOrDir){
      if (fileOrDir == null ? vFile == null : fileOrDir.equals(vFile)) {
        return true;
      }
      return false;
    }
  }
;
  for (Iterator<AbstractTreeNode> iterator=myRoot.getChildren().iterator(); iterator.hasNext(); ) {
    AbstractTreeNode node=iterator.next();
    boolean find=false;
    if (node.getValue() instanceof PsiElement) {
      final VirtualFile virtualFile=BasePsiNode.getVirtualFile(((PsiElement)node.getValue()));
      if (vFile == null ? virtualFile == null : vFile.equals(virtualFile)) {
        return true;
      }
      if (!virtualFile.isDirectory()) {
        continue;
      }
      final Module module=ModuleUtil.findModuleForPsiElement(((PsiElement)node.getValue()));
      if (module != null) {
        find=ModuleRootManager.getInstance(module).getFileIndex().iterateContentUnderDirectory(virtualFile,contentIterator);
      }
 else {
        find=projectFileIndex.iterateContentUnderDirectory(virtualFile,contentIterator);
      }
    }
    if (node.getValue() instanceof Module) {
      find=ModuleRootManager.getInstance(((Module)node.getValue())).getFileIndex().iterateContent(contentIterator);
    }
    if (node.getValue() instanceof LibraryGroupElement) {
      find=ModuleRootManager.getInstance(((LibraryGroupElement)node.getValue()).getModule()).getFileIndex().isInContent(vFile) && projectFileIndex.isInLibraryClasses(vFile);
    }
    if (node.getValue() instanceof NamedLibraryElement) {
      NamedLibraryElement namedLibraryElement=(NamedLibraryElement)node.getValue();
      final VirtualFile[] files=namedLibraryElement.getOrderEntry().getFiles(OrderRootType.CLASSES);
      if (files != null) {
        find=ArrayUtil.find(files,vFile) > -1;
      }
    }
    if (node.getValue() instanceof Form) {
      Form form=(Form)node.getValue();
      PsiFile[] forms=form.getClassToBind().getManager().getSearchHelper().findFormsBoundToClass(form.getClassToBind().getQualifiedName());
      for (int i=0; i < forms.length; i++) {
        PsiFile psiFile=forms[i];
        final VirtualFile virtualFile=psiFile.getVirtualFile();
        if (virtualFile == null ? vFile == null : virtualFile.equals(vFile)) {
          return true;
        }
      }
    }
    if (find) {
      return true;
    }
    if (node.getValue() instanceof ModuleGroup) {
      ModuleGroup group=(ModuleGroup)node.getValue();
      final Module[] modules=group.modulesInGroup(myProject,true);
      for (int i=0; i < modules.length; i++) {
        Module module=modules[i];
        find=ModuleRootManager.getInstance(module).getFileIndex().iterateContent(contentIterator);
        if (find) {
          return true;
        }
      }
    }
  }
  return false;
}
