{
  LOG.assertTrue(vFile != null);
  final ProjectFileIndex projectFileIndex=ProjectRootManager.getInstance(myProject).getFileIndex();
  final Set<Boolean> find=new HashSet<Boolean>();
  final ContentIterator contentIterator=new ContentIterator(){
    public boolean processFile(    VirtualFile fileOrDir){
      if (fileOrDir == null ? vFile == null : fileOrDir.getPath().equals(vFile.getPath())) {
        find.add(Boolean.TRUE);
      }
      return true;
    }
  }
;
  for (  AbstractTreeNode node : myRoot.getChildren()) {
    if (node.getValue() instanceof SmartPsiElementPointer) {
      final VirtualFile virtualFile=BasePsiNode.getVirtualFile(((SmartPsiElementPointer)node.getValue()).getElement());
      if (virtualFile == null)       continue;
      if (vFile.getPath().equals(virtualFile.getPath())) {
        return true;
      }
      if (!virtualFile.isDirectory()) {
        continue;
      }
      projectFileIndex.iterateContentUnderDirectory(virtualFile,contentIterator);
    }
    if (node.getValue() instanceof PackageElement) {
      final PackageElement packageElement=((PackageElement)node.getValue());
      final PsiPackage aPackage=packageElement.getPackage();
      GlobalSearchScope scope=packageElement.getModule() != null ? GlobalSearchScope.moduleScope(packageElement.getModule()) : GlobalSearchScope.projectScope(myProject);
      final PsiDirectory[] directories=aPackage.getDirectories(scope);
      for (      PsiDirectory directory : directories) {
        projectFileIndex.iterateContentUnderDirectory(directory.getVirtualFile(),contentIterator);
      }
    }
    if (node.getValue() instanceof PsiElement) {
      final VirtualFile virtualFile=BasePsiNode.getVirtualFile(((PsiElement)node.getValue()));
      if (virtualFile == null)       continue;
      if (vFile.getPath().equals(virtualFile.getPath())) {
        return true;
      }
      if (!virtualFile.isDirectory()) {
        continue;
      }
      projectFileIndex.iterateContentUnderDirectory(virtualFile,contentIterator);
    }
    if (node.getValue() instanceof Module) {
      ModuleRootManager.getInstance(((Module)node.getValue())).getFileIndex().iterateContent(contentIterator);
    }
    if (node.getValue() instanceof LibraryGroupElement) {
      final boolean inLibrary=ModuleRootManager.getInstance(((LibraryGroupElement)node.getValue()).getModule()).getFileIndex().isInContent(vFile) && projectFileIndex.isInLibraryClasses(vFile);
      if (inLibrary) {
        return true;
      }
    }
    if (node.getValue() instanceof NamedLibraryElement) {
      NamedLibraryElement namedLibraryElement=(NamedLibraryElement)node.getValue();
      final VirtualFile[] files=namedLibraryElement.getOrderEntry().getFiles(OrderRootType.CLASSES);
      if (files != null && ArrayUtil.find(files,vFile) > -1) {
        return true;
      }
    }
    if (node.getValue() instanceof Form) {
      Form form=(Form)node.getValue();
      PsiFile[] forms=form.getClassToBind().getManager().getSearchHelper().findFormsBoundToClass(form.getClassToBind().getQualifiedName());
      for (      PsiFile psiFile : forms) {
        final VirtualFile virtualFile=psiFile.getVirtualFile();
        if (virtualFile != null && virtualFile.equals(vFile)) {
          return true;
        }
      }
    }
    if (node.getValue() instanceof ModuleGroup) {
      ModuleGroup group=(ModuleGroup)node.getValue();
      final Module[] modules=group.modulesInGroup(myProject,true);
      for (      Module module : modules) {
        ModuleRootManager.getInstance(module).getFileIndex().iterateContent(contentIterator);
      }
    }
    if (node.getValue() instanceof ResourceBundle) {
      ResourceBundle bundle=(ResourceBundle)node.getValue();
      final List<PropertiesFile> propertiesFiles=bundle.getPropertiesFiles(myProject);
      for (      PropertiesFile file : propertiesFiles) {
        final VirtualFile virtualFile=file.getVirtualFile();
        if (virtualFile == null)         continue;
        if (vFile.getPath().equals(virtualFile.getPath())) {
          return true;
        }
      }
    }
    if (!find.isEmpty()) {
      return true;
    }
  }
  return false;
}
