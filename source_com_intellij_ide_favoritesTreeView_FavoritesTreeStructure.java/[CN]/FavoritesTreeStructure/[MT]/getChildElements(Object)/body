{
  if (!(element instanceof AbstractTreeNode)) {
    return ArrayUtil.EMPTY_OBJECT_ARRAY;
  }
  final AbstractTreeNode favoritesTreeElement=(AbstractTreeNode)element;
  try {
    if (element == myRoot) {
      Set<AbstractTreeNode> result=new HashSet<AbstractTreeNode>();
      for (Iterator<AbstractTreeNode> iterator=myFavorites.iterator(); iterator.hasNext(); ) {
        AbstractTreeNode abstractTreeNode=iterator.next();
        final Object val=abstractTreeNode.getValue();
        if (val != null) {
          if (val instanceof PsiElement && !((PsiElement)val).isValid()) {
            continue;
          }
          if (val instanceof SmartPsiElementPointer && (((SmartPsiElementPointer)val).getElement() == null || !((SmartPsiElementPointer)val).getElement().isValid())) {
            continue;
          }
          if (val instanceof Form) {
            final Collection<AbstractTreeNode> children=abstractTreeNode.getChildren();
            boolean toContinue=false;
            for (            AbstractTreeNode node : children) {
              final Object value=node.getValue();
              if (!(value instanceof PsiElement) || !((PsiElement)value).isValid()) {
                toContinue=true;
                break;
              }
            }
            if (toContinue)             continue;
          }
          if (val instanceof ResourceBundle) {
            final List<PropertiesFile> propertiesFiles=((ResourceBundle)val).getPropertiesFiles();
            if (propertiesFiles == null || propertiesFiles.isEmpty()) {
              continue;
            }
            if (propertiesFiles.size() == 1) {
              result.add(new PsiFileNode(myProject,propertiesFiles.iterator().next(),getFavoritesConfiguration()));
              continue;
            }
          }
          result.add(abstractTreeNode);
        }
      }
      myFavorites=result;
      if (myFavorites.isEmpty()) {
        return new Object[]{getEmptyScreen()};
      }
      return myFavorites.toArray(new Object[myFavorites.size()]);
    }
    return super.getChildElements(favoritesTreeElement);
  }
 catch (  Exception e) {
  }
  return ArrayUtil.EMPTY_OBJECT_ARRAY;
}
