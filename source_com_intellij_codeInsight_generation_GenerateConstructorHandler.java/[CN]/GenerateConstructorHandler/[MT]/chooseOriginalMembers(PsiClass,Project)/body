{
  if (aClass instanceof PsiAnonymousClass) {
    Messages.showMessageDialog(project,"Cannot add constructor to an anonymous class","Error",Messages.getErrorIcon());
    return null;
  }
  myCopyJavadoc=false;
  PsiMethod[] baseConstructors=null;
  PsiClass baseClass=aClass.getSuperClass();
  if (baseClass != null) {
    ArrayList<PsiMethod> array=new ArrayList<PsiMethod>();
    PsiMethod[] methods=baseClass.getMethods();
    for (int i=0; i < methods.length; i++) {
      PsiMethod method=methods[i];
      if (method.isConstructor()) {
        if (method.getManager().getResolveHelper().isAccessible(method,aClass,aClass)) {
          array.add(method);
        }
      }
    }
    if (array.size() > 0) {
      if (array.size() == 1) {
        baseConstructors=new PsiMethod[]{array.get(0)};
      }
 else {
        PsiSubstitutor substitutor=TypeConversionUtil.getSuperClassSubstitutor(baseClass,aClass,PsiSubstitutor.EMPTY);
        Object[] constructors;
        if (substitutor != PsiSubstitutor.EMPTY) {
          constructors=new CandidateInfo[array.size()];
          for (int i=0; i < array.size(); i++) {
            constructors[i]=new CandidateInfo(array.get(i),substitutor);
          }
        }
 else {
          constructors=array.toArray(new Object[array.size()]);
        }
        MemberChooser chooser=new MemberChooser(constructors,false,true,project);
        chooser.setTitle("Choose Super Class Constructor");
        chooser.show();
        Object[] elements=chooser.getSelectedElements();
        if (elements == null || elements.length == 0)         return null;
        baseConstructors=new PsiMethod[elements.length];
        for (int i=0; i < elements.length; i++) {
          if (elements[i] instanceof PsiMethod) {
            baseConstructors[i]=(PsiMethod)elements[i];
          }
 else {
            baseConstructors[i]=(PsiMethod)((CandidateInfo)elements[i]).getElement();
          }
        }
        myCopyJavadoc=chooser.isCopyJavadoc();
      }
    }
  }
  Object[] allMembers=getAllOriginalMembers(aClass);
  Object[] members;
  if (allMembers.length == 0) {
    members=PsiElement.EMPTY_ARRAY;
  }
 else {
    members=chooseMembers(allMembers,true,false,project);
    if (members == null)     return null;
  }
  if (baseConstructors != null) {
    ArrayList<Object> array=new ArrayList<Object>();
    for (int i=0; i < baseConstructors.length; i++) {
      array.add(baseConstructors[i]);
    }
    for (int i=0; i < members.length; i++) {
      array.add(members[i]);
    }
    members=array.toArray(new PsiElement[array.size()]);
  }
  return members;
}
