{
  final PsiParameter[] parameters=getParams(element);
  if (parameters == null || parameters.length == 0)   return;
  final PsiMethod method=(PsiMethod)parameters[0].getDeclarationScope();
  final PsiMethod methodPrototype=generateMethodPrototype(method,parameters);
  final PsiMethod existingMethod=method.getContainingClass().findMethodBySignature(methodPrototype,false);
  if (existingMethod != null) {
    editor.getCaretModel().moveToOffset(existingMethod.getTextOffset());
    HintManager.getInstance().showErrorHint(editor,"Method with the chosen signature already exist");
    return;
  }
  Runnable runnable=new Runnable(){
    @Override public void run(){
      final PsiMethod prototype=(PsiMethod)method.getContainingClass().addBefore(methodPrototype,method);
      RefactoringUtil.fixJavadocsForParams(prototype,new HashSet<PsiParameter>(Arrays.asList(prototype.getParameterList().getParameters())));
      TemplateBuilderImpl builder=new TemplateBuilderImpl(prototype);
      PsiCodeBlock body=prototype.getBody();
      final String callArgs="(" + StringUtil.join(method.getParameterList().getParameters(),new Function<PsiParameter,String>(){
        @Override public String fun(        PsiParameter psiParameter){
          if (ArrayUtil.find(parameters,psiParameter) > -1)           return "IntelliJIDEARulezzz";
          return psiParameter.getName();
        }
      }
,",") + ");";
      final String methodCall;
      if (method.getReturnType() == null) {
        methodCall="this";
      }
 else       if (method.getReturnType() != PsiType.VOID) {
        methodCall="return " + method.getName();
      }
 else {
        methodCall=method.getName();
      }
      body.add(JavaPsiFacade.getElementFactory(project).createStatementFromText(methodCall + callArgs,method));
      body=(PsiCodeBlock)CodeStyleManager.getInstance(project).reformat(body);
      final PsiStatement stmt=body.getStatements()[0];
      PsiExpression expr=null;
      if (stmt instanceof PsiReturnStatement) {
        expr=((PsiReturnStatement)stmt).getReturnValue();
      }
 else       if (stmt instanceof PsiExpressionStatement) {
        expr=((PsiExpressionStatement)stmt).getExpression();
      }
      if (expr instanceof PsiMethodCallExpression) {
        PsiMethodCallExpression methodCallExp=(PsiMethodCallExpression)expr;
        RangeMarker rangeMarker=editor.getDocument().createRangeMarker(prototype.getTextRange());
        for (        PsiParameter parameter : parameters) {
          final PsiExpression exprToBeDefault=methodCallExp.getArgumentList().getExpressions()[method.getParameterList().getParameterIndex(parameter)];
          builder.replaceElement(exprToBeDefault,new TextExpression(""));
        }
        Template template=builder.buildTemplate();
        editor.getCaretModel().moveToOffset(rangeMarker.getStartOffset());
        PsiDocumentManager.getInstance(project).doPostponedOperationsAndUnblockDocument(editor.getDocument());
        editor.getDocument().deleteString(rangeMarker.getStartOffset(),rangeMarker.getEndOffset());
        rangeMarker.dispose();
        CreateFromUsageBaseFix.startTemplate(editor,template,project);
      }
    }
  }
;
  if (startInWriteAction()) {
    runnable.run();
  }
 else {
    ApplicationManager.getApplication().runWriteAction(runnable);
  }
}
