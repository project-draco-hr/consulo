{
  PsiClass aClass=(PsiClass)element.getParent();
  if (aClass.getNameIdentifier().equals(element)) {
    if (!aClass.hasModifierProperty(PsiModifier.FINAL)) {
      PsiElementProcessor.CollectElements<PsiClass> processor=new PsiElementProcessor.CollectElements<PsiClass>();
      helper.processInheritors(processor,aClass,GlobalSearchScope.projectScope(myProject),false);
      Collection<PsiClass> inheritors=processor.getCollection();
      if (!inheritors.isEmpty()) {
        if (!myClassToFirstDerivedMap.containsKey(aClass)) {
          myClassToFirstDerivedMap.put(aClass,inheritors.toArray(PsiClass.EMPTY_ARRAY)[0]);
        }
        int offset=element.getTextRange().getStartOffset();
        LineMarkerInfo info=new LineMarkerInfo(LineMarkerInfo.SUBCLASSED_CLASS,aClass,offset,aClass.isInterface() ? IMPLEMENTED_INTERFACE_MARKER_RENDERER : SUBCLASSED_CLASS_MARKER_RENDERER);
        result.add(info);
      }
    }
    if (aClass.getQualifiedName() != null) {
      ProgressManager.getInstance().checkCanceled();
      if (helper.findFormsBoundToClass(aClass.getQualifiedName()).length > 0) {
        int offset=element.getTextRange().getStartOffset();
        result.add(new LineMarkerInfo(LineMarkerInfo.BOUND_CLASS_OR_FIELD,aClass,offset,Icons.UI_FORM_ICON));
      }
    }
  }
}
