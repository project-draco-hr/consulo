{
  final AntDomProject project=AntSupport.getAntDomProject(file);
  if (project == null) {
    return null;
  }
  final List<ProblemDescriptor> problems=new ArrayList<ProblemDescriptor>();
  TargetResolver.validateDuplicateTargets(project.getContextAntProject(),new TargetResolver.TargetSink(){
    public void duplicateTargetDetected(    AntDomTarget existingTarget,    AntDomTarget duplicatingTarget,    String targetEffectiveName){
      final PsiFile existingTargetFile=getContainingFile(existingTarget);
      final PsiFile duplucatingTargetFile=getContainingFile(duplicatingTarget);
      final boolean isFromDifferentFiles=!Comparing.equal(existingTargetFile,duplucatingTargetFile);
      if (file.equals(existingTargetFile)) {
        final PsiElement psi=existingTarget.getXmlElement();
        if (psi != null) {
          final String duplicatedMessage=isFromDifferentFiles ? AntBundle.message("target.is.duplicated.in.imported.file",targetEffectiveName,duplucatingTargetFile != null ? duplucatingTargetFile.getName() : "") : AntBundle.message("target.is.duplicated",targetEffectiveName);
          problems.add(manager.createProblemDescriptor(psi,duplicatedMessage,isOnTheFly,LocalQuickFix.EMPTY_ARRAY,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
        }
      }
      if (file.equals(duplucatingTargetFile)) {
        final PsiElement psi=duplicatingTarget.getXmlElement();
        if (psi != null) {
          final String duplicatedMessage=isFromDifferentFiles ? AntBundle.message("target.is.duplicated.in.imported.file",targetEffectiveName,existingTargetFile != null ? existingTargetFile.getName() : "") : AntBundle.message("target.is.duplicated",targetEffectiveName);
          problems.add(manager.createProblemDescriptor(psi,duplicatedMessage,isOnTheFly,LocalQuickFix.EMPTY_ARRAY,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
        }
      }
    }
  }
);
  final int problemCount=problems.size();
  return problemCount > 0 ? problems.toArray(new ProblemDescriptor[problemCount]) : null;
}
