{
  if (file instanceof AntFile) {
    final AntProject project=((AntFile)file).getAntProject();
    if (project != null) {
      final AntTarget[] targets=project.getTargets();
      if (targets.length > 0) {
        final HashMap<String,AntTarget> name2Target=new HashMap<String,AntTarget>();
        final List<ProblemDescriptor> problems=new ArrayList<ProblemDescriptor>();
        for (        final AntTarget target : targets) {
          final String name=target.getName();
          final AntTarget t=name2Target.get(name);
          if (t != null) {
            final String duplicatedMessage=AntBundle.message("target.is.duplicated",name);
            problems.add(manager.createProblemDescriptor(target,duplicatedMessage,LocalQuickFix.EMPTY_ARRAY,ProblemHighlightType.GENERIC_ERROR_OR_WARNING,isOnTheFly));
            problems.add(manager.createProblemDescriptor(t,duplicatedMessage,LocalQuickFix.EMPTY_ARRAY,ProblemHighlightType.GENERIC_ERROR_OR_WARNING,isOnTheFly));
          }
          name2Target.put(name,target);
        }
        final int prolemCount=problems.size();
        if (prolemCount > 0) {
          return problems.toArray(new ProblemDescriptor[prolemCount]);
        }
      }
    }
  }
  return null;
}
