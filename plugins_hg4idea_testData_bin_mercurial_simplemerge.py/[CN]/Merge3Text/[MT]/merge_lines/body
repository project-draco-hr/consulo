def merge_lines(self, name_a=None, name_b=None, name_base=None, start_marker='<<<<<<<', mid_marker='=======', end_marker='>>>>>>>', base_marker=None, reprocess=False):
    'Return merge in cvs-like form.\n        '
    self.conflicts = False
    newline = '\n'
    if (len(self.a) > 0):
        if self.a[0].endswith('\r\n'):
            newline = '\r\n'
        elif self.a[0].endswith('\r'):
            newline = '\r'
    if (base_marker and reprocess):
        raise CantReprocessAndShowBase()
    if name_a:
        start_marker = ((start_marker + ' ') + name_a)
    if name_b:
        end_marker = ((end_marker + ' ') + name_b)
    if (name_base and base_marker):
        base_marker = ((base_marker + ' ') + name_base)
    merge_regions = self.merge_regions()
    if (reprocess is True):
        merge_regions = self.reprocess_merge_regions(merge_regions)
    for t in merge_regions:
        what = t[0]
        if (what == 'unchanged'):
            for i in range(t[1], t[2]):
                yield self.base[i]
        elif ((what == 'a') or (what == 'same')):
            for i in range(t[1], t[2]):
                yield self.a[i]
        elif (what == 'b'):
            for i in range(t[1], t[2]):
                yield self.b[i]
        elif (what == 'conflict'):
            self.conflicts = True
            yield (start_marker + newline)
            for i in range(t[3], t[4]):
                yield self.a[i]
            if (base_marker is not None):
                yield (base_marker + newline)
                for i in range(t[1], t[2]):
                    yield self.base[i]
            yield (mid_marker + newline)
            for i in range(t[5], t[6]):
                yield self.b[i]
            yield (end_marker + newline)
        else:
            raise ValueError(what)
