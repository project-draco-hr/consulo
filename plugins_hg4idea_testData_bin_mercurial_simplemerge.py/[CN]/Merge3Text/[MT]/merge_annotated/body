def merge_annotated(self):
    'Return merge with conflicts, showing origin of lines.\n\n        Most useful for debugging merge.\n        '
    for t in self.merge_regions():
        what = t[0]
        if (what == 'unchanged'):
            for i in range(t[1], t[2]):
                yield ('u | ' + self.base[i])
        elif ((what == 'a') or (what == 'same')):
            for i in range(t[1], t[2]):
                yield ((what[0] + ' | ') + self.a[i])
        elif (what == 'b'):
            for i in range(t[1], t[2]):
                yield ('b | ' + self.b[i])
        elif (what == 'conflict'):
            yield '<<<<\n'
            for i in range(t[3], t[4]):
                yield ('A | ' + self.a[i])
            yield '----\n'
            for i in range(t[5], t[6]):
                yield ('B | ' + self.b[i])
            yield '>>>>\n'
        else:
            raise ValueError(what)
