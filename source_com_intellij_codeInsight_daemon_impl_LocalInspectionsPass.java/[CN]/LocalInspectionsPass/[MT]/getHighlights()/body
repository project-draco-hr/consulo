{
  ArrayList<HighlightInfo> highlights=new ArrayList<HighlightInfo>();
  for (int i=0; i < myDescriptors.size(); i++) {
    ProblemDescriptor problemDescriptor=myDescriptors.get(i);
    String message=renderDescriptionMessage(problemDescriptor);
    PsiElement psiElement=problemDescriptor.getPsiElement();
    HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.WARNING,psiElement,message,message);
    highlights.add(highlightInfo);
    LocalInspectionTool tool=myTools.get(i);
    List<IntentionAction> options=new ArrayList<IntentionAction>();
    options.add(new AddNoInspectionCommentAction(tool,psiElement));
    options.add(new AddNoInspectionDocTagAction(tool,psiElement));
    options.add(new AddSuppressWarningsAnnotationAction(tool,psiElement));
    options.add(new AddNoInspectionAllForClassAction(psiElement));
    options.add(new AddSuppressWarningsAnnotationForAllAction(psiElement));
    options.add(new SwitchOffToolAction(tool));
    if (problemDescriptor.getFixes() != null) {
      for (int k=0; k < problemDescriptor.getFixes().length; k++) {
        QuickFixAction.registerQuickFixAction(highlightInfo,new QuickFixWrapper(problemDescriptor,k),options);
      }
    }
 else {
      QuickFixAction.registerQuickFixAction(highlightInfo,new EmptyIntentionAction(tool.getDisplayName(),options),options);
    }
  }
  return highlights.toArray(new HighlightInfo[highlights.size()]);
}
