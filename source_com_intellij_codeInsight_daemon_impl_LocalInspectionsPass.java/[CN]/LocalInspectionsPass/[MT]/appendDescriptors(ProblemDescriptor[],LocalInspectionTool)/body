{
  ProgressManager.getInstance().checkCanceled();
  InspectionManagerEx manager=(InspectionManagerEx)InspectionManager.getInstance(myProject);
  if (problemDescriptors != null) {
    boolean isError=DaemonCodeAnalyzerSettings.getInstance().getInspectionProfile().getErrorLevel(HighlightDisplayKey.find(tool.getShortName())) == HighlightDisplayLevel.ERROR;
    for (int i=0; i < problemDescriptors.length; i++) {
      ProblemDescriptor problemDescriptor=problemDescriptors[i];
      if (!manager.inspectionResultSuppressed(problemDescriptor.getPsiElement(),tool)) {
        myDescriptors.add(problemDescriptor);
        ProblemHighlightType highlightType=problemDescriptor.getHighlightType();
        HighlightInfoType type=null;
        if (highlightType == ProblemHighlightType.GENERIC_ERROR_OR_WARNING) {
          type=isError ? HighlightInfoType.ERROR : HighlightInfoType.WARNING;
        }
 else         if (highlightType == ProblemHighlightType.LIKE_DEPRECATED) {
          type=HighlightInfoType.DEPRECATED;
        }
 else         if (highlightType == ProblemHighlightType.LIKE_UNKNOWN_SYMBOL) {
          type=HighlightInfoType.WRONG_REF;
        }
 else         if (highlightType == ProblemHighlightType.LIKE_UNUSED_SYMBOL) {
          type=HighlightInfoType.UNUSED_SYMBOL;
        }
        myLevels.add(type);
        myTools.add(tool);
      }
    }
  }
}
