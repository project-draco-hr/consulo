{
  FontDescriptor descriptor=(FontDescriptor)property.getPropertyValue(lwComponent);
  if (descriptor.isFixedFont() && !descriptor.isFullyDefinedFont()) {
    final int fontLocal=generator.newLocal(ourFontType);
    generator.loadLocal(componentLocal);
    Type componentType=AsmCodeGenerator.typeFromClassName(lwComponent.getComponentClassName());
    Method getFontMethod=new Method(property.getReadMethodName(),ourFontType,new Type[0]);
    generator.invokeVirtual(componentType,getFontMethod);
    generator.storeLocal(fontLocal);
    generator.loadLocal(componentLocal);
    generator.newInstance(ourFontType);
    generator.dup();
    if (descriptor.getFontName() != null) {
      generator.push(descriptor.getFontName());
    }
 else {
      generator.loadLocal(fontLocal);
      generator.invokeVirtual(ourFontType,ourGetNameMethod);
    }
    if (descriptor.getFontStyle() >= 0) {
      generator.push(descriptor.getFontStyle());
    }
 else {
      generator.loadLocal(fontLocal);
      generator.invokeVirtual(ourFontType,ourGetStyleMethod);
    }
    if (descriptor.getFontSize() >= 0) {
      generator.push(descriptor.getFontSize());
    }
 else {
      generator.loadLocal(fontLocal);
      generator.invokeVirtual(ourFontType,ourGetSizeMethod);
    }
    generator.invokeConstructor(ourFontType,ourInitMethod);
    Method setFontMethod=new Method(property.getWriteMethodName(),Type.VOID_TYPE,new Type[]{ourFontType});
    generator.invokeVirtual(componentType,setFontMethod);
    return true;
  }
  return false;
}
