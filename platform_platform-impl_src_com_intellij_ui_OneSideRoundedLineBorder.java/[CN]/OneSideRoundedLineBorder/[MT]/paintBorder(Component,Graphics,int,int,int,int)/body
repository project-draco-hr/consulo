{
  final Graphics2D g2=(Graphics2D)g;
  final Object oldAntialiasing=g2.getRenderingHint(RenderingHints.KEY_ANTIALIASING);
  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  final Color oldColor=g2.getColor();
  g2.setColor(lineColor);
  for (int idx=0; idx < thickness; idx++) {
    final int correctedHeight=height - idx - idx- 1;
    final int correctedWidth=width - idx - idx- 1;
    final int startX=x + idx;
    final int startY=y + idx;
    if (myIsTopRounded && myIsBottomRounded) {
      g2.drawRoundRect(startX,startY,correctedWidth,correctedHeight,myArcSize,myArcSize);
    }
 else     if (myIsTopRounded) {
      UIUtil.drawLine(g2,startX + myRadius,startY,startX + correctedWidth - myRadius,startY);
      if (myDrawDottedAngledSide) {
        drawDottedLine(g2,startX,startY + correctedHeight,startX + correctedWidth,startY + correctedHeight);
      }
 else {
        UIUtil.drawLine(g2,startX,startY + correctedHeight,startX + correctedWidth,startY + correctedHeight);
      }
      g2.drawArc(startX,startY,myArcSize,myArcSize,90,90);
      g2.drawArc(startX + correctedWidth - myArcSize,startY,myArcSize,myArcSize,0,90);
      UIUtil.drawLine(g2,startX,startY + myRadius + 1,startX,startY + correctedHeight);
      UIUtil.drawLine(g2,startX + correctedWidth,startY + myRadius + 1,startX + correctedWidth,startY + correctedHeight);
    }
 else     if (myIsBottomRounded) {
    }
 else {
      g2.drawRect(startX,startY,correctedWidth,correctedHeight);
    }
  }
  g2.setColor(oldColor);
  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,oldAntialiasing);
}
