{
  addComponentTag(parentTag,component,nextTag,new Computable<String>(){
    @Override public String compute(){
      Element pasteProperties=component.extractClientProperty(AndroidPasteFactory.KEY);
      if (pasteProperties == null) {
        return component.getMetaModel().getCreation();
      }
      StringBuilder builder=new StringBuilder();
      builder.append("<").append(component.getMetaModel().getTag());
      for (      Object object : pasteProperties.getAttributes()) {
        Attribute attribute=(Attribute)object;
        builder.append(" ").append(attribute.getName()).append("=\"").append(attribute.getValue()).append("\"");
      }
      for (      Object object : pasteProperties.getChildren()) {
        Element element=(Element)object;
        String namespace=element.getName();
        for (        Object child : element.getAttributes()) {
          Attribute attribute=(Attribute)child;
          builder.append(" ").append(namespace).append(":").append(attribute.getName()).append("=\"").append(attribute.getValue()).append("\"");
        }
      }
      if (builder.indexOf("android:layout_width=\"") == -1) {
        builder.append(" android:layout_width=\"wrap_content\"");
      }
      if (builder.indexOf("android:layout_height=\"") == -1) {
        builder.append(" android:layout_height=\"wrap_content\"");
      }
      return builder.append("/>").toString();
    }
  }
,false);
  XmlTag xmlTag=component.getTag();
  List<RadComponent> children=component.getChildren();
  int size=children.size();
  for (int i=0; i < size; i++) {
    RadViewComponent child=(RadViewComponent)children.get(i);
    XmlTag nextChildTag=null;
    if (i + 1 < size) {
      nextChildTag=((RadViewComponent)children.get(i + 1)).getTag();
    }
    pasteComponent(child,xmlTag,nextChildTag,propertyParser);
  }
  propertyParser.load(component);
}
