{
  PsiMethod method=GenerateMembersUtil.substituteGenericMethod(methodCandidate.getElement(),methodCandidate.getSubstitutor());
  clearMethod(method);
  clearModifiers(method);
  @NonNls StringBuffer call=new StringBuffer();
  PsiModifierList modifierList=null;
  if (method.getReturnType() != PsiType.VOID) {
    call.append("return ");
  }
  boolean isMethodStatic=methodCandidate.getElement().hasModifierProperty(PsiModifier.STATIC);
  if (target instanceof PsiField) {
    PsiField field=(PsiField)target;
    modifierList=field.getModifierList();
    if (isMethodStatic) {
      call.append(methodCandidate.getContainingClass().getQualifiedName());
    }
 else {
      final String name=field.getName();
      final PsiParameter[] parameters=method.getParameterList().getParameters();
      for (      PsiParameter parameter : parameters) {
        if (name.equals(parameter.getName())) {
          call.append("this.");
          break;
        }
      }
      call.append(name);
    }
    call.append(".");
  }
 else   if (target instanceof PsiMethod) {
    PsiMethod m=(PsiMethod)target;
    modifierList=m.getModifierList();
    if (isMethodStatic) {
      call.append(methodCandidate.getContainingClass().getQualifiedName()).append(".");
    }
 else {
      call.append(m.getName());
      call.append("().");
    }
  }
  call.append(method.getName());
  call.append("(");
  final PsiParameter[] parameters=method.getParameterList().getParameters();
  for (int j=0; j < parameters.length; j++) {
    PsiParameter parameter=parameters[j];
    if (j > 0)     call.append(",");
    call.append(parameter.getName());
  }
  call.append(");");
  final PsiManager psiManager=method.getManager();
  PsiStatement stmt=JavaPsiFacade.getInstance(psiManager.getProject()).getElementFactory().createStatementFromText(call.toString(),method);
  stmt=(PsiStatement)CodeStyleManager.getInstance(psiManager.getProject()).reformat(stmt);
  method.getBody().add(stmt);
  if (isMethodStatic || modifierList != null && modifierList.hasModifierProperty(PsiModifier.STATIC)) {
    PsiUtil.setModifierProperty(method,PsiModifier.STATIC,true);
  }
  PsiUtil.setModifierProperty(method,PsiModifier.PUBLIC,true);
  final Project project=method.getProject();
  for (  PsiAnnotation annotation : methodCandidate.getElement().getModifierList().getAnnotations()) {
    OverrideImplementUtil.annotate(method,annotation.getQualifiedName());
  }
  final PsiClass targetClass=((PsiMember)target).getContainingClass();
  LOG.assertTrue(targetClass != null);
  PsiMethod overridden=targetClass.findMethodBySignature(method,true);
  if (overridden != null) {
    OverrideImplementUtil.annotateOnOverrideImplement(method,targetClass,overridden);
  }
  return new PsiGenerationInfo<PsiMethod>(method);
}
