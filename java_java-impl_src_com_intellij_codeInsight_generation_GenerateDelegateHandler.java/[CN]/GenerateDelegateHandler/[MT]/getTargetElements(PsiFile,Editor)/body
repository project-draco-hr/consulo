{
  int offset=editor.getCaretModel().getOffset();
  PsiElement element=file.findElementAt(offset);
  if (element == null)   return null;
  final PsiClass aClass=PsiTreeUtil.getParentOfType(element,PsiClass.class);
  if (aClass == null)   return null;
  List<PsiElementClassMember> result=new ArrayList<PsiElementClassMember>();
  final PsiField[] fields=aClass.getAllFields();
  PsiResolveHelper helper=JavaPsiFacade.getInstance(aClass.getProject()).getResolveHelper();
  for (  PsiField field : fields) {
    final PsiType type=field.getType();
    if (helper.isAccessible(field,aClass,aClass) && type instanceof PsiClassType) {
      result.add(new PsiFieldMember(field));
    }
  }
  final PsiMethod[] methods=aClass.getAllMethods();
  for (  PsiMethod method : methods) {
    if (CommonClassNames.JAVA_LANG_OBJECT.equals(method.getContainingClass().getQualifiedName()))     continue;
    final PsiType returnType=method.getReturnType();
    if (returnType != null && PropertyUtil.isSimplePropertyGetter(method) && helper.isAccessible(method,aClass,aClass) && returnType instanceof PsiClassType) {
      result.add(new PsiMethodMember(method));
    }
  }
  if (aClass instanceof PsiAnonymousClass) {
    VariablesProcessor proc=new VariablesProcessor(false){
      @Override protected boolean check(      PsiVariable var,      ResolveState state){
        return var.hasModifierProperty(PsiModifier.FINAL) && var instanceof PsiLocalVariable || var instanceof PsiParameter;
      }
    }
;
    PsiElement scope=aClass;
    while (scope != null) {
      if (scope instanceof PsiFile || scope instanceof PsiMethod || scope instanceof PsiClassInitializer)       break;
      scope=scope.getParent();
    }
    if (scope != null) {
      PsiScopesUtil.treeWalkUp(proc,aClass,scope);
      for (int i=0; i < proc.size(); i++) {
        final PsiVariable psiVariable=proc.getResult(i);
        final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(aClass.getProject());
        result.add(new PsiFieldMember(elementFactory.createField(psiVariable.getName(),psiVariable.getType())){
          @Override protected PsiClass getContainingClass(){
            return aClass;
          }
        }
);
      }
    }
  }
  return result.toArray(new PsiElementClassMember[result.size()]);
}
