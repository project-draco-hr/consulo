{
  final List<PsiParameter> params=getParametersToExtract();
  final boolean useExistingClass=useExistingClass();
  final boolean keepMethod=keepMethodAsDelegate();
  final IntroduceParameterObjectProcessor processor;
  if (!useExistingClass) {
    processor=new IntroduceParameterObjectProcessor(getClassName(),getPackageName(),sourceMethod,params,null,keepMethod,isPreviewUsages(),useExistingClass);
  }
 else {
    final String existingClassName=getExistingClassName();
    final List<String> getterNames=new ArrayList<String>();
    final String packageName=existingClassName.substring(0,existingClassName.lastIndexOf('.'));
    processor=new IntroduceParameterObjectProcessor(existingClassName.substring(existingClassName.lastIndexOf('.') + 1),packageName,sourceMethod,params,getterNames,keepMethod,isPreviewUsages(),useExistingClass);
  }
  invokeRefactoring(processor);
}
