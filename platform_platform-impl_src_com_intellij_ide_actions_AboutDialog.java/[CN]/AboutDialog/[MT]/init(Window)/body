{
  ApplicationInfoEx appInfo=(ApplicationInfoEx)ApplicationInfo.getInstance();
  JPanel mainPanel=new JPanel(new BorderLayout());
  final JComponent closeListenerOwner;
  Icon image=IconLoader.getIcon(appInfo.getAboutImageUrl());
  final InfoSurface infoSurface;
  if (appInfo.showLicenseeInfo()) {
    infoSurface=new InfoSurface(image);
    infoSurface.setPreferredSize(new Dimension(image.getIconWidth(),image.getIconHeight()));
    mainPanel.add(infoSurface,BorderLayout.NORTH);
    closeListenerOwner=infoSurface;
  }
 else {
    infoSurface=null;
    mainPanel.add(new JLabel(image),BorderLayout.NORTH);
    closeListenerOwner=mainPanel;
  }
  setUndecorated(true);
  setContentPane(mainPanel);
  final Ref<Long> showTime=Ref.create(System.currentTimeMillis());
  addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      int code=e.getKeyCode();
      if (code == KeyEvent.VK_ESCAPE && e.getModifiers() == 0) {
        dispose();
      }
 else       if (infoSurface != null) {
        if (code == KeyEvent.VK_CONTROL || code == KeyEvent.VK_META) {
          showTime.set(System.currentTimeMillis());
          e.consume();
        }
 else         if ((code == KeyEvent.VK_C && (e.isControlDown() || e.isMetaDown())) || (!SystemInfo.isMac && code == KeyEvent.VK_INSERT && e.isControlDown())) {
          copyInfoToClipboard(infoSurface.getText());
          showTime.set(System.currentTimeMillis());
          e.consume();
        }
      }
    }
  }
);
  final long delta=500;
  addWindowFocusListener(new WindowFocusListener(){
    public void windowGainedFocus(    WindowEvent e){
    }
    public void windowLostFocus(    WindowEvent e){
      long eventTime=System.currentTimeMillis();
      if (eventTime - showTime.get() > delta && e.getOppositeWindow() != e.getWindow()) {
        dispose();
      }
 else {
        IdeFocusManager.getGlobalInstance().requestFocus(AboutDialog.this,true);
      }
    }
  }
);
  new ClickListener(){
    @Override public boolean onClick(    MouseEvent event,    int clickCount){
      dispose();
      return true;
    }
  }
.installOn(closeListenerOwner);
  pack();
  setLocationRelativeTo(window);
}
