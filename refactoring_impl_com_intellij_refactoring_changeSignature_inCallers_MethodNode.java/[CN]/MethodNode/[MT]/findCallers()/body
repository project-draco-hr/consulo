{
  if (myMethod == null)   return PsiMethod.EMPTY_ARRAY;
  final Project project=myMethod.getProject();
  final List<PsiMethod> callers=new ArrayList<PsiMethod>();
  ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
    public void run(){
      final PsiSearchHelper searchHelper=PsiManager.getInstance(project).getSearchHelper();
      final PsiReference[] refs=searchHelper.findReferencesIncludingOverriding(myMethod,GlobalSearchScope.allScope(project),true);
      for (      PsiReference ref : refs) {
        final PsiElement element=ref.getElement();
        if (!(element instanceof PsiReferenceExpression) || !(((PsiReferenceExpression)element).getQualifierExpression() instanceof PsiSuperExpression)) {
          final PsiElement enclosingContext=PsiTreeUtil.getParentOfType(element,PsiMethod.class,PsiClass.class);
          if (enclosingContext instanceof PsiMethod) {
            callers.add((PsiMethod)enclosingContext);
          }
        }
      }
    }
  }
,com.intellij.refactoring.RefactoringBundle.message("caller.chooser.looking.for.callers"),false,project);
  return callers.toArray(new PsiMethod[callers.size()]);
}
