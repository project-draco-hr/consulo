{
  ProgressIndicator progress=ProgressManager.getInstance().getProgressIndicator();
  String oldText=null;
  double oldFraction=0;
  if (progress != null) {
    oldText=progress.getText();
    oldFraction=progress.getFraction();
    progress.setText(myProgressText);
  }
  final List<FutureTask<Boolean>> tasks=new ArrayList<FutureTask<Boolean>>(files.size());
  for (int i=0; i < files.size(); i++) {
    PsiFile file=files.get(i);
    if (progress != null) {
      if (progress.isCanceled())       return null;
      progress.setFraction((double)i / files.size());
    }
    if (file.isWritable()) {
      try {
        tasks.add(preprocessFile(file,myProcessChangedTextOnly));
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
    }
    files.set(i,null);
  }
  if (progress != null) {
    progress.setText(oldText);
    progress.setFraction(oldFraction);
  }
  return new Runnable(){
    @Override public void run(){
      SequentialModalProgressTask progressTask=new SequentialModalProgressTask(myProject,myCommandName);
      ReformatFilesTask reformatFilesTask=new ReformatFilesTask(tasks);
      reformatFilesTask.setCompositeTask(progressTask);
      progressTask.setTask(reformatFilesTask);
      ProgressManager.getInstance().run(progressTask);
    }
  }
;
}
