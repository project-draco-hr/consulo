{
  final Pair<ASTNode,ASTNode> pair=getNamePair(tag);
  final List<TextRange> highlightRanges=new ArrayList<TextRange>();
  highlightRanges.add(pair.first.getTextRange());
  if (pair.second != null) {
    highlightRanges.add(pair.second.getTextRange());
  }
  if (!CommonRefactoringUtil.checkReadOnlyStatus(myProject,tag)) {
    return;
  }
  final ArrayList<RangeHighlighter> highlighters=new ArrayList<RangeHighlighter>();
  CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
    public void run(){
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        public void run(){
          final int offset=myEditor.getCaretModel().getOffset();
          myEditor.getCaretModel().moveToOffset(tag.getTextOffset());
          final Template t=buildTemplate(tag,pair);
          TemplateManager.getInstance(myProject).startTemplate(myEditor,t,new TemplateEditingListener(){
            public void templateFinished(            final Template template){
              removeHighlighters(myEditor,highlighters);
            }
            public void templateCancelled(            final Template template){
              removeHighlighters(myEditor,highlighters);
            }
          }
);
          myEditor.getCaretModel().moveToOffset(offset);
          addHighlights(highlightRanges,myEditor,highlighters);
        }
      }
);
    }
  }
,RefactoringBundle.message("rename.title"),null);
}
