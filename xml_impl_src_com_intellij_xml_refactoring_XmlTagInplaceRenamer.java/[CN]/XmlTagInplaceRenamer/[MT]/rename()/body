{
  final Pair<ASTNode,ASTNode> pair=getNamePair(myTag);
  if (pair == null)   return;
  final Project project=myEditor.getProject();
  if (project == null) {
    return;
  }
  if (!CommonRefactoringUtil.checkReadOnlyStatus(project,myTag)) {
    return;
  }
  final List<TextRange> highlightRanges=new ArrayList<TextRange>();
  highlightRanges.add(pair.first.getTextRange());
  if (pair.second != null) {
    highlightRanges.add(pair.second.getTextRange());
  }
  CommandProcessor.getInstance().executeCommand(project,new Runnable(){
    public void run(){
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        public void run(){
          final int offset=myEditor.getCaretModel().getOffset();
          myEditor.getCaretModel().moveToOffset(myTag.getTextOffset());
          final Template t=buildTemplate(myTag,pair);
          TemplateManager.getInstance(project).startTemplate(myEditor,t,new TemplateEditingAdapter(){
            public void templateFinished(            final Template template,            boolean brokenOff){
              finish();
            }
            public void templateCancelled(            final Template template){
              finish();
            }
          }
,new PairProcessor<String,String>(){
            public boolean process(            final String variableName,            final String value){
              return value.length() == 0 || value.charAt(value.length() - 1) != ' ';
            }
          }
);
          myEditor.getCaretModel().moveToOffset(offset);
          addHighlights(highlightRanges);
        }
      }
);
    }
  }
,RefactoringBundle.message("rename.title"),null);
}
