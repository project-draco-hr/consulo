{
  super(uiSettings);
  init();
  myActionsPanel.setLayout(new FlowLayout(FlowLayout.LEFT));
  final JButton jbButton=new JButton("Install JetBrains plugin...");
  jbButton.setMnemonic('j');
  jbButton.addActionListener(new BrowseRepoListener("JetBrains"));
  myActionsPanel.add(jbButton);
  final JButton button=new JButton("Browse repositories...");
  button.setMnemonic('b');
  button.addActionListener(new BrowseRepoListener(null));
  myActionsPanel.add(button);
  final JButton installPluginFromFileSystem=new JButton("Install plugin from disk...");
  installPluginFromFileSystem.setMnemonic('d');
  installPluginFromFileSystem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final FileChooserDescriptor descriptor=new FileChooserDescriptor(true,false,true,true,false,false){
        @Override public boolean isFileSelectable(        VirtualFile file){
          final String extension=file.getExtension();
          return Comparing.strEqual(extension,"jar") || Comparing.strEqual(extension,"zip");
        }
      }
;
      descriptor.setTitle("Choose Plugin File");
      descriptor.setDescription("JAR and ZIP archives are accepted");
      FileChooser.chooseFiles(descriptor,null,myActionsPanel,null,new FileChooser.FileChooserConsumer(){
        @Override public void cancelled(){
        }
        @Override public void consume(        List<VirtualFile> files){
          if (files != null && files.size() == 1) {
            VirtualFile virtualFile=files.get(0);
            if (virtualFile != null) {
              final File file=VfsUtilCore.virtualToIoFile(virtualFile);
              try {
                final IdeaPluginDescriptorImpl pluginDescriptor=PluginDownloader.loadDescriptionFromJar(file);
                if (pluginDescriptor == null) {
                  Messages.showErrorDialog("Fail to load plugin descriptor from file " + file.getName(),CommonBundle.getErrorTitle());
                  return;
                }
                if (PluginManager.isIncompatible(pluginDescriptor)) {
                  Messages.showErrorDialog("Plugin " + pluginDescriptor.getName() + " is incompatible with current installation",CommonBundle.getErrorTitle());
                  return;
                }
                final IdeaPluginDescriptor alreadyInstalledPlugin=PluginManager.getPlugin(pluginDescriptor.getPluginId());
                if (alreadyInstalledPlugin != null) {
                  final File oldFile=alreadyInstalledPlugin.getPath();
                  if (oldFile != null) {
                    StartupActionScriptManager.addActionCommand(new StartupActionScriptManager.DeleteCommand(oldFile));
                  }
                }
                if (((InstalledPluginsTableModel)pluginsModel).appendOrUpdateDescriptor(pluginDescriptor)) {
                  PluginDownloader.install(file,file.getName(),false);
                  select(pluginDescriptor);
                  checkInstalledPluginDependencies(pluginDescriptor);
                  setRequireShutdown(true);
                }
 else {
                  Messages.showInfoMessage(myActionsPanel,"Plugin " + pluginDescriptor.getName() + " was already installed",CommonBundle.getWarningTitle());
                }
              }
 catch (              IOException ex) {
                Messages.showErrorDialog(ex.getMessage(),CommonBundle.getErrorTitle());
              }
            }
          }
        }
      }
);
    }
  }
);
  myActionsPanel.add(installPluginFromFileSystem);
}
