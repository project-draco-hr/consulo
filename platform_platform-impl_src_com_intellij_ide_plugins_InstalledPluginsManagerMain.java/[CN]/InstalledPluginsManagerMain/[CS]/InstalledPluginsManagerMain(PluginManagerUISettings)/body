{
  super(uiSettings);
  init();
  myActionsPanel.setLayout(new FlowLayout(FlowLayout.LEFT));
  final JButton viewAvailablePlugins=new JButton("View available plugins...");
  viewAvailablePlugins.setMnemonic('v');
  viewAvailablePlugins.addActionListener(new BrowseRepoListener());
  myActionsPanel.add(viewAvailablePlugins);
  final JButton installPluginFromFileSystem=new JButton("Install plugin from disk...");
  installPluginFromFileSystem.setMnemonic('d');
  installPluginFromFileSystem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final FileChooserDescriptor descriptor=new FileChooserDescriptor(false,false,true,true,false,false){
        @Override public boolean isFileSelectable(        VirtualFile file){
          return file.getFileType() instanceof ArchiveFileType;
        }
      }
;
      descriptor.setTitle("Choose Plugin File");
      descriptor.setDescription("JAR and ZIP archives are accepted");
      FileChooser.chooseFile(descriptor,null,myActionsPanel,null,new Consumer<VirtualFile>(){
        @Override public void consume(        @NotNull VirtualFile virtualFile){
          final File file=VfsUtilCore.virtualToIoFile(virtualFile);
          try {
            final IdeaPluginDescriptorImpl pluginDescriptor=loadDescriptionFromJar(file);
            if (pluginDescriptor == null) {
              Messages.showErrorDialog("Fail to load plugin descriptor from file " + file.getName(),CommonBundle.getErrorTitle());
              return;
            }
            if (PluginManagerCore.isIncompatible(pluginDescriptor)) {
              Messages.showErrorDialog("Plugin " + pluginDescriptor.getName() + " is incompatible with current installation",CommonBundle.getErrorTitle());
              return;
            }
            final IdeaPluginDescriptor alreadyInstalledPlugin=PluginManager.getPlugin(pluginDescriptor.getPluginId());
            if (alreadyInstalledPlugin != null) {
              final File oldFile=alreadyInstalledPlugin.getPath();
              if (oldFile != null) {
                StartupActionScriptManager.addActionCommand(new StartupActionScriptManager.DeleteCommand(oldFile));
              }
            }
            if (((InstalledPluginsTableModel)myPluginsModel).appendOrUpdateDescriptor(pluginDescriptor)) {
              PluginDownloader.install(file,file.getName(),false);
              select(pluginDescriptor);
              checkInstalledPluginDependencies(pluginDescriptor);
              setRequireShutdown(true);
            }
 else {
              Messages.showInfoMessage(myActionsPanel,"Plugin " + pluginDescriptor.getName() + " was already installed",CommonBundle.getWarningTitle());
            }
          }
 catch (          IOException ex) {
            Messages.showErrorDialog(ex.getMessage(),CommonBundle.getErrorTitle());
          }
        }
      }
);
    }
  }
);
  myActionsPanel.add(installPluginFromFileSystem);
  final JButton button=new JButton("Update Settings");
  button.setMnemonic('s');
  myActionsPanel.add(button);
  final StatusText emptyText=myPluginTable.getEmptyText();
  emptyText.setText("Nothing to show.");
  emptyText.appendText(" Click ");
  emptyText.appendText("View available plugins...",SimpleTextAttributes.LINK_ATTRIBUTES,new BrowseRepoListener());
  emptyText.appendText(" to view available plugins.");
}
