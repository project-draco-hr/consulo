{
  final Set<PluginId> notInstalled=new HashSet<PluginId>();
  final Set<PluginId> disabledIds=new HashSet<PluginId>();
  final PluginId[] dependentPluginIds=pluginDescriptor.getDependentPluginIds();
  final PluginId[] optionalDependentPluginIds=pluginDescriptor.getOptionalDependentPluginIds();
  for (  PluginId id : dependentPluginIds) {
    if (ArrayUtilRt.find(optionalDependentPluginIds,id) > -1)     continue;
    final boolean disabled=((InstalledPluginsTableModel)myPluginsModel).isDisabled(id);
    final boolean enabled=((InstalledPluginsTableModel)myPluginsModel).isEnabled(id);
    if (!enabled && !disabled) {
      notInstalled.add(id);
    }
 else     if (disabled) {
      disabledIds.add(id);
    }
  }
  if (!notInstalled.isEmpty()) {
    Messages.showWarningDialog("Plugin " + pluginDescriptor.getName() + " depends on unknown plugin"+ (notInstalled.size() > 1 ? "s " : " ")+ StringUtil.join(notInstalled,new Function<PluginId,String>(){
      @Override public String fun(      PluginId id){
        return id.toString();
      }
    }
,", "),CommonBundle.getWarningTitle());
  }
  if (!disabledIds.isEmpty()) {
    final Set<IdeaPluginDescriptor> dependencies=new HashSet<IdeaPluginDescriptor>();
    for (    IdeaPluginDescriptor ideaPluginDescriptor : myPluginsModel.getAllPlugins()) {
      if (disabledIds.contains(ideaPluginDescriptor.getPluginId())) {
        dependencies.add(ideaPluginDescriptor);
      }
    }
    final String disabledPluginsMessage="disabled plugin" + (dependencies.size() > 1 ? "s " : " ");
    String message="Plugin " + pluginDescriptor.getName() + " depends on "+ disabledPluginsMessage+ StringUtil.join(dependencies,new Function<IdeaPluginDescriptor,String>(){
      @Override public String fun(      IdeaPluginDescriptor ideaPluginDescriptor){
        return ideaPluginDescriptor.getName();
      }
    }
,", ")+ ". Enable "+ disabledPluginsMessage.trim()+ "?";
    if (Messages.showOkCancelDialog(myActionsPanel,message,CommonBundle.getWarningTitle(),Messages.getWarningIcon()) == Messages.OK) {
      ((InstalledPluginsTableModel)myPluginsModel).enableRows(dependencies.toArray(new IdeaPluginDescriptor[dependencies.size()]),Boolean.TRUE);
    }
  }
}
