{
class MyTypeSyntaxException extends RuntimeException {
    MyTypeSyntaxException(    final String message){
      super(message);
    }
  }
  try {
    accept(new PsiRecursiveElementWalkingVisitor(){
      @Override public void visitErrorElement(      PsiErrorElement element){
        throw new MyTypeSyntaxException(element.getErrorDescription());
      }
    }
);
  }
 catch (  MyTypeSyntaxException e) {
    throw new TypeSyntaxException(e.getMessage());
  }
  final PsiTypeElement typeElement=PsiTreeUtil.getChildOfType(this,PsiTypeElement.class);
  if (typeElement == null) {
    throw new NoTypeException("No type found in '" + getText() + "'");
  }
  final PsiType type=typeElement.getType();
  if (type instanceof PsiEllipsisType && !myAllowEllipsis) {
    throw new TypeSyntaxException("Ellipsis not allowed: " + type);
  }
 else   if (type instanceof PsiDisjunctionType && !myAllowDisjunction) {
    throw new TypeSyntaxException("Disjunction not allowed: " + type);
  }
  return type;
}
