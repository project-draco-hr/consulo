{
  super.visitTryStatement(statement);
  if (m_ignoreTestCases) {
    final PsiClass aClass=ClassUtils.getContainingClass(statement);
    if (aClass != null && ClassUtils.isSubclass(aClass,"junit.framework.TestCase")) {
      return;
    }
  }
  final PsiCodeBlock[] catchBlocks=statement.getCatchBlocks();
  final PsiParameter[] params=statement.getCatchBlockParameters();
  for (int i=0; i < catchBlocks.length; i++) {
    final PsiCodeBlock block=catchBlocks[i];
    final PsiParameter param=params[i];
    if (m_ignoreCatchBlocksWithComments) {
      final PsiElement[] children=block.getChildren();
      for (int j=0; j < children.length; j++) {
        final PsiElement child=children[i];
        if (child instanceof PsiComment) {
          return;
        }
      }
    }
    if (block != null && param != null) {
      final CatchParameterUsedVisitor visitor=new CatchParameterUsedVisitor(param);
      block.accept(visitor);
      if (!visitor.isUsed()) {
        registerVariableError(param);
      }
    }
  }
}
