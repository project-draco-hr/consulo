{
  return new AnAction[]{new AnAction(CvsBundle.message("annotate.action.name"),CvsBundle.message("annotate.action.description"),IconLoader.getIcon("/actions/annotate.png")){
    public void update(    AnActionEvent e){
      FilePath filePath=e.getData(VcsDataKeys.FILE_PATH);
      if (filePath == null) {
        e.getPresentation().setEnabled(false);
        return;
      }
      VirtualFile vFile=filePath.getVirtualFile();
      FileType fileType=vFile == null ? FileTypeManager.getInstance().getFileTypeByFileName(filePath.getName()) : vFile.getFileType();
      CvsFileRevision revision=(CvsFileRevision)e.getData(VcsDataKeys.VCS_FILE_REVISION);
      VirtualFile revisionVirtualFile=e.getData(VcsDataKeys.VCS_VIRTUAL_FILE);
      e.getPresentation().setEnabled(revision != null && revisionVirtualFile != null && !fileType.isBinary());
    }
    public void actionPerformed(    AnActionEvent e){
      FilePath filePath=e.getData(VcsDataKeys.FILE_PATH);
      CvsFileRevision revision=(CvsFileRevision)e.getData(VcsDataKeys.VCS_FILE_REVISION);
      VirtualFile revisionVirtualFile=e.getData(VcsDataKeys.VCS_VIRTUAL_FILE);
      try {
        final FileAnnotation annotation=CvsVcs2.getInstance(myProject).createAnnotation(CvsUtil.getCvsLightweightFileForFile(filePath.getIOFile()),revisionVirtualFile,revision.getRevisionNumber().asString(),CvsEntriesManager.getInstance().getCvsConnectionSettingsFor(filePath.getVirtualFileParent()));
        AbstractVcsHelper.getInstance(myProject).showAnnotation(annotation,revisionVirtualFile);
      }
 catch (      VcsException e1) {
        AbstractVcsHelper.getInstance(myProject).showError(e1,CvsBundle.message("operation.name.annotate"));
      }
    }
  }
};
}
