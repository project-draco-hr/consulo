{
  toolWindow.setSplitMode(true,null);
  toolWindow.setIcon(AndroidUtils.ANDROID_ICON);
  toolWindow.setAvailable(true,null);
  toolWindow.setToHideOnEmptyContent(true);
  toolWindow.setTitle(TOOL_WINDOW_ID);
  final AndroidLogcatToolWindowView view=new AndroidLogcatToolWindowView(project){
    @Override protected boolean isActive(){
      return toolWindow.isVisible();
    }
  }
;
  final ToolWindowManagerEx toolWindowManager=ToolWindowManagerEx.getInstanceEx(project);
  toolWindowManager.addToolWindowManagerListener(new ToolWindowManagerAdapter(){
    boolean myToolWindowVisible;
    @Override public void stateChanged(){
      ToolWindow window=toolWindowManager.getToolWindow(TOOL_WINDOW_ID);
      if (window != null) {
        boolean visible=window.isVisible();
        if (visible != myToolWindowVisible) {
          myToolWindowVisible=visible;
          view.activate();
          if (visible) {
            checkFacetAndSdk(project);
          }
        }
      }
    }
  }
);
  JPanel contentPanel=view.getContentPanel();
  final ContentManager contentManager=toolWindow.getContentManager();
  final Content content=contentManager.getFactory().createContent(contentPanel,null,false);
  content.setDisposer(view);
  content.setCloseable(false);
  content.setPreferredFocusableComponent(contentPanel);
  contentManager.addContent(content);
  contentManager.setSelectedContent(content,true);
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    public void run(){
      view.activate();
    }
  }
);
}
