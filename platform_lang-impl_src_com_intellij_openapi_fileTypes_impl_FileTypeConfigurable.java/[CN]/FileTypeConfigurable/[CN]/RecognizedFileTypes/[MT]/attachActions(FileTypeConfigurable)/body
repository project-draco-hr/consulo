{
  myAddButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      controller.addFileType();
    }
  }
);
  myEditButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      controller.editFileType();
    }
  }
);
  myFileTypesList.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      FileType fileType=getSelectedFileType();
      boolean b=canBeModified(fileType);
      myEditButton.setEnabled(b);
      myRemoveButton.setEnabled(b);
      boolean shared=getSchemesManager().isShared(fileType);
      myExportButton.setEnabled(b && !shared);
      if (shared) {
        myRemoveButton.setEnabled(true);
      }
    }
  }
);
  myRemoveButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      controller.removeFileType();
    }
  }
);
  myFileTypesList.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == 2)       controller.editFileType();
    }
  }
);
  myImportButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      new SchemesToImportPopup<FileType,AbstractFileType>(myWholePanel){
        protected void onSchemeSelected(        final AbstractFileType scheme){
          controller.importFileType(scheme);
        }
      }
.show(getSchemesManager(),collectRegisteredFileTypes());
    }
  }
);
  myExportButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      FileType selected=(FileType)myFileTypesList.getSelectedValue();
      if (selected instanceof AbstractFileType) {
        ExportSchemeAction.doExport((AbstractFileType)selected,getSchemesManager());
      }
    }
  }
);
}
