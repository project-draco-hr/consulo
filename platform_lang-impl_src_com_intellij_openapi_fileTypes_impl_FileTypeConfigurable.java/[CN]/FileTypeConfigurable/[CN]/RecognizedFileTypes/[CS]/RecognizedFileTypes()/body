{
  super(new BorderLayout());
  myFileTypesList=new JBList(new DefaultListModel());
  myFileTypesList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myFileTypesList.setCellRenderer(new FileTypeRenderer(myFileTypesList.getCellRenderer(),new FileTypeRenderer.FileTypeListProvider(){
    public Iterable<FileType> getCurrentFileTypeList(){
      ArrayList<FileType> result=new ArrayList<FileType>();
      for (int i=0; i < myFileTypesList.getModel().getSize(); i++) {
        result.add((FileType)myFileTypesList.getModel().getElementAt(i));
      }
      return result;
    }
  }
));
  myFileTypesList.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == 2)       myController.editFileType();
    }
  }
);
  ToolbarDecorator toolbarDecorator=ToolbarDecorator.createDecorator(myFileTypesList).setAddAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      myController.addFileType();
    }
  }
).setRemoveAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      myController.removeFileType();
    }
  }
).setEditAction(new AnActionButtonRunnable(){
    @Override public void run(    AnActionButton button){
      myController.editFileType();
    }
  }
).setEditActionUpdater(new AnActionButtonUpdater(){
    @Override public boolean isEnabled(    AnActionEvent e){
      final FileType fileType=getSelectedFileType();
      return canBeModified(fileType);
    }
  }
).setRemoveActionUpdater(new AnActionButtonUpdater(){
    @Override public boolean isEnabled(    AnActionEvent e){
      final FileType fileType=getSelectedFileType();
      final boolean modified=canBeModified(fileType);
      final boolean shared=getSchemesManager().isShared(fileType);
      return shared || modified;
    }
  }
).disableUpDownActions();
  toolbarDecorator.addExtraAction(new AnActionButton("Import Shared...",IconUtil.getImportIcon()){
    @Override public void actionPerformed(    AnActionEvent e){
      new SchemesToImportPopup<FileType,AbstractFileType>(myFileTypesList){
        protected void onSchemeSelected(        final AbstractFileType scheme){
          myController.importFileType(scheme);
        }
      }
.show(getSchemesManager(),collectRegisteredFileTypes());
    }
  }
);
  toolbarDecorator.addExtraAction(new AnActionButton("Share...",IconUtil.getExportIcon()){
    @Override public void actionPerformed(    AnActionEvent e){
      FileType selected=(FileType)myFileTypesList.getSelectedValue();
      if (selected instanceof AbstractFileType) {
        ExportSchemeAction.doExport((AbstractFileType)selected,getSchemesManager());
      }
    }
    @Override public void updateButton(    AnActionEvent e){
      FileType fileType=getSelectedFileType();
      boolean b=canBeModified(fileType);
      boolean shared=getSchemesManager().isShared(fileType);
      setEnabled(b && !shared);
    }
  }
);
  add(toolbarDecorator.createPanel(),BorderLayout.CENTER);
  setBorder(IdeBorderFactory.createTitledBorder(FileTypesBundle.message("filetypes.recognized.group"),false));
}
