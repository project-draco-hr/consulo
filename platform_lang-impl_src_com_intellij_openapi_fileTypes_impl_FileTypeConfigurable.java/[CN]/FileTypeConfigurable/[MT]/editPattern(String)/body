{
  final FileType type=myRecognizedFileType.getSelectedFileType();
  if (type == null)   return;
  final String title=item == null ? FileTypesBundle.message("filetype.edit.add.pattern.title") : FileTypesBundle.message("filetype.edit.edit.pattern.title");
  final Language oldLanguage=item == null ? null : myTempTemplateDataLanguages.findAssociatedFileType(item);
  final FileTypePatternDialog dialog=new FileTypePatternDialog(item,type,oldLanguage);
  final DialogBuilder builder=new DialogBuilder(myPatterns);
  builder.setPreferredFocusComponent(dialog.getPatternField());
  builder.setCenterPanel(dialog.getMainPanel());
  builder.setTitle(title);
  builder.showModal(true);
  if (builder.getDialogWrapper().isOK()) {
    final String pattern=dialog.getPatternField().getText();
    if (StringUtil.isEmpty(pattern))     return;
    final FileNameMatcher matcher=FileTypeManager.parseFromString(pattern);
    FileType registeredFileType=findExistingFileType(matcher);
    if (registeredFileType != null && registeredFileType != type) {
      if (registeredFileType.isReadOnly()) {
        Messages.showMessageDialog(myPatterns.myPatternsList,FileTypesBundle.message("filetype.edit.add.pattern.exists.error",registeredFileType.getDescription()),title,Messages.getErrorIcon());
        return;
      }
 else {
        if (Messages.OK == Messages.showOkCancelDialog(myPatterns.myPatternsList,FileTypesBundle.message("filetype.edit.add.pattern.exists.message",registeredFileType.getDescription()),FileTypesBundle.message("filetype.edit.add.pattern.exists.title"),FileTypesBundle.message("filetype.edit.add.pattern.reassign.button"),CommonBundle.getCancelButtonText(),Messages.getQuestionIcon())) {
          myTempPatternsTable.removeAssociation(matcher,registeredFileType);
          myTempTemplateDataLanguages.removeAssociation(matcher,oldLanguage);
          myReassigned.put(matcher,registeredFileType);
        }
 else {
          return;
        }
      }
    }
    if (item != null) {
      final FileNameMatcher oldMatcher=FileTypeManager.parseFromString(item);
      myTempPatternsTable.removeAssociation(oldMatcher,type);
      myTempTemplateDataLanguages.removeAssociation(oldMatcher,oldLanguage);
    }
    myTempPatternsTable.addAssociation(matcher,type);
    myTempTemplateDataLanguages.addAssociation(matcher,dialog.getTemplateDataLanguage());
    updateExtensionList();
    final int index=myPatterns.getListModel().indexOf(matcher.getPresentableString());
    if (index >= 0) {
      ListScrollingUtil.selectItem(myPatterns.myPatternsList,index);
    }
    myPatterns.myPatternsList.requestFocus();
  }
}
