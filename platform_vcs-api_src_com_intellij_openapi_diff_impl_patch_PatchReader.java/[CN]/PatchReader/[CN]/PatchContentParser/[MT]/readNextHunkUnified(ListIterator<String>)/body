{
  String curLine=null;
  int numIncrements=0;
  while (iterator.hasNext()) {
    curLine=iterator.next();
    ++numIncrements;
    if (curLine.startsWith("--- ")) {
      for (int i=0; i < numIncrements; i++) {
        iterator.previous();
      }
      return null;
    }
    if (curLine.startsWith("@@ ")) {
      break;
    }
  }
  if (!iterator.hasNext())   return null;
  Matcher m=ourUnifiedHunkStartPattern.matcher(curLine);
  if (!m.matches()) {
    throw new PatchSyntaxException(iterator.previousIndex(),"Unknown hunk start syntax");
  }
  int startLineBefore=Integer.parseInt(m.group(1));
  final String linesBeforeText=m.group(3);
  int linesBefore=linesBeforeText == null ? 1 : Integer.parseInt(linesBeforeText);
  int startLineAfter=Integer.parseInt(m.group(4));
  final String linesAfterText=m.group(6);
  int linesAfter=linesAfterText == null ? 1 : Integer.parseInt(linesAfterText);
  PatchHunk hunk=new PatchHunk(startLineBefore - 1,startLineBefore + linesBefore - 1,startLineAfter - 1,startLineAfter + linesAfter - 1);
  PatchLine lastLine=null;
  int before=0;
  int after=0;
  while (iterator.hasNext()) {
    String hunkCurLine=iterator.next();
    if (lastLine != null && hunkCurLine.startsWith(NO_NEWLINE_SIGNATURE)) {
      lastLine.setSuppressNewLine(true);
      continue;
    }
    lastLine=parsePatchLine(hunkCurLine,1,before < linesBefore || after < linesAfter);
    if (lastLine == null) {
      iterator.previous();
      break;
    }
switch (lastLine.getType()) {
case CONTEXT:
      before++;
    after++;
  break;
case ADD:
after++;
break;
case REMOVE:
before++;
break;
}
hunk.addLine(lastLine);
}
return hunk;
}
