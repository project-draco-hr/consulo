{
  if (usage instanceof PsiElementUsage) {
    final PsiElement psiElement=((PsiElementUsage)usage).getElement();
    final PsiFile containingFile=psiElement.getContainingFile();
    if (containingFile instanceof PsiJavaFile) {
      PsiElement containingClass=psiElement;
      do {
        containingClass=PsiTreeUtil.getParentOfType(containingClass,PsiClass.class,true);
        if (containingClass == null || ((PsiClass)containingClass).getQualifiedName() != null)         break;
      }
 while (true);
      if (containingClass == null) {
        PsiImportList importList=PsiTreeUtil.getParentOfType(psiElement,PsiImportList.class,true);
        if (importList != null) {
          final String fileName=getFileNameWithoutExtension(containingFile);
          final PsiClass[] classes=((PsiJavaFile)containingFile).getClasses();
          for (int idx=0; idx < classes.length; idx++) {
            final PsiClass aClass=classes[idx];
            if (fileName.equals(aClass.getName())) {
              containingClass=aClass;
              break;
            }
          }
        }
      }
      if (containingClass != null) {
        return new ClassUsageGroup((PsiClass)containingClass);
      }
      final VirtualFile virtualFile=containingFile.getVirtualFile();
      if (virtualFile != null) {
        return new FileGroupingRule.FileUsageGroup(containingFile.getProject(),virtualFile);
      }
    }
  }
  return null;
}
