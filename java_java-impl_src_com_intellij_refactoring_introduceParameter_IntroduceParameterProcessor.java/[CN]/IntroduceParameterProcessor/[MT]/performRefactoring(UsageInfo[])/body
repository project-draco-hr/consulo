{
  try {
    PsiElementFactory factory=JavaPsiFacade.getInstance(myManager.getProject()).getElementFactory();
    PsiType initializerType=getInitializerType(myForcedType,myParameterInitializer,myLocalVariable);
    setForcedType(initializerType);
    if (myParameterInitializer == null) {
      LOG.assertTrue(myLocalVariable != null);
      myParameterInitializer=factory.createExpressionFromText(myLocalVariable.getName(),myLocalVariable);
    }
 else {
      myParameterInitializer=RefactoringUtil.convertInitializerToNormalExpression(myParameterInitializer,initializerType);
    }
    myInitializerWrapper=new JavaExpressionWrapper(myParameterInitializer);
    IntroduceParameterUtil.processUsages(usages,this);
    if (myGenerateDelegate) {
      generateDelegate(myMethodToReplaceIn);
      if (myMethodToReplaceIn != myMethodToSearchFor) {
        final PsiMethod method=generateDelegate(myMethodToSearchFor);
        if (method.getContainingClass().isInterface()) {
          final PsiCodeBlock block=method.getBody();
          if (block != null) {
            block.delete();
          }
        }
      }
    }
    LOG.assertTrue(initializerType.isValid());
    final FieldConflictsResolver fieldConflictsResolver=new FieldConflictsResolver(myParameterName,myMethodToReplaceIn.getBody());
    IntroduceParameterUtil.changeMethodSignatureAndResolveFieldConflicts(new UsageInfo(myMethodToReplaceIn),usages,this);
    if (myMethodToSearchFor != myMethodToReplaceIn) {
      IntroduceParameterUtil.changeMethodSignatureAndResolveFieldConflicts(new UsageInfo(myMethodToSearchFor),usages,this);
    }
    ChangeContextUtil.clearContextInfo(myParameterInitializer);
    for (    UsageInfo usage : usages) {
      if (usage instanceof ChangedMethodCallInfo) {
        PsiElement element=usage.getElement();
        processChangedMethodCall(element);
      }
 else       if (usage instanceof InternalUsageInfo) {
        PsiElement element=usage.getElement();
        if (element instanceof PsiExpression) {
          element=RefactoringUtil.outermostParenthesizedExpression((PsiExpression)element);
        }
        if (element != null) {
          if (element.getParent() instanceof PsiExpressionStatement) {
            element.getParent().delete();
          }
 else {
            PsiExpression newExpr=factory.createExpressionFromText(myParameterName,element);
            IntroduceVariableBase.replace((PsiExpression)element,newExpr,myProject);
          }
        }
      }
    }
    if (myLocalVariable != null && myRemoveLocalVariable) {
      myLocalVariable.normalizeDeclaration();
      myLocalVariable.getParent().delete();
    }
    fieldConflictsResolver.fix();
  }
 catch (  IncorrectOperationException ex) {
    LOG.error(ex);
  }
}
