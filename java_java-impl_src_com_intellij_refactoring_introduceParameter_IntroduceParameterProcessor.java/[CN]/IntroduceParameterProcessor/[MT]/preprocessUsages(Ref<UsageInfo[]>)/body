{
  UsageInfo[] usagesIn=refUsages.get();
  Map<PsiElement,String> conflicts=new HashMap<PsiElement,String>();
  AnySameNameVariables anySameNameVariables=new AnySameNameVariables();
  myMethodToReplaceIn.accept(anySameNameVariables);
  final Pair<PsiElement,String> conflictPair=anySameNameVariables.getConflict();
  if (conflictPair != null) {
    conflicts.put(conflictPair.first,conflictPair.second);
  }
  if (!myGenerateDelegate) {
    detectAccessibilityConflicts(usagesIn,conflicts);
  }
  if (myParameterInitializer != null && !myMethodToReplaceIn.hasModifierProperty(PsiModifier.PRIVATE)) {
    final AnySupers anySupers=new AnySupers();
    myParameterInitializer.accept(anySupers);
    if (anySupers.isResult()) {
      for (      UsageInfo usageInfo : usagesIn) {
        if (!(usageInfo.getElement() instanceof PsiMethod) && !(usageInfo instanceof InternalUsageInfo)) {
          if (!PsiTreeUtil.isAncestor(myMethodToReplaceIn.getContainingClass(),usageInfo.getElement(),false)) {
            conflicts.put(myParameterInitializer,RefactoringBundle.message("parameter.initializer.contains.0.but.not.all.calls.to.method.are.in.its.class",CommonRefactoringUtil.htmlEmphasize(PsiKeyword.SUPER)));
            break;
          }
        }
      }
    }
  }
  for (  IntroduceParameterMethodUsagesProcessor processor : IntroduceParameterMethodUsagesProcessor.EP_NAME.getExtensions()) {
    conflicts.putAll(processor.findConflicts(this,refUsages.get()));
  }
  return showConflicts(conflicts);
}
