{
  final List<PsiClass> out=new ArrayList<PsiClass>();
  final PsiClass[] supers=sourceClass.getSupers();
  for (  PsiClass superClass : supers) {
    if (!superClass.isInterface()) {
      continue;
    }
    final PsiMethod[] superclassMethods=superClass.getMethods();
    if (superclassMethods.length == 0) {
      continue;
    }
    boolean allMethodsCovered=true;
    for (    PsiMethod method : superclassMethods) {
      boolean isCovered=false;
      for (      PsiMethod movedMethod : methods) {
        if (isSuperMethod(method,movedMethod)) {
          isCovered=true;
          break;
        }
      }
      if (!isCovered) {
        allMethodsCovered=false;
        break;
      }
    }
    if (allMethodsCovered) {
      out.add(superClass);
    }
  }
  final Project project=sourceClass.getProject();
  final PsiManager manager=sourceClass.getManager();
  final GlobalSearchScope scope=GlobalSearchScope.allScope(project);
  if (usesDefaultSerialization(sourceClass)) {
    final PsiClass serializable=JavaPsiFacade.getInstance(manager.getProject()).findClass("java.io.Serializable",scope);
    out.add(serializable);
  }
  if (usesDefaultClone(sourceClass)) {
    final PsiClass cloneable=JavaPsiFacade.getInstance(manager.getProject()).findClass("java.lang.Cloneable",scope);
    out.add(cloneable);
  }
  return out;
}
