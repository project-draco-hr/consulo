{
  if (myFile == null || !myHighlighter.isHighlightingAvailable(myFile))   return null;
  ArrayList<String> noInspectionRoots=new ArrayList<String>();
  ArrayList<String> noHighlightingRoots=new ArrayList<String>();
  final PsiFile[] roots=myFile.getPsiRoots();
  for (  PsiFile file : roots) {
    if (!HighlightUtil.isRootHighlighted(file)) {
      noHighlightingRoots.add(file.getLanguage().getID());
    }
 else     if (!HighlightUtil.isRootInspected(file)) {
      noInspectionRoots.add(file.getLanguage().getID());
    }
  }
  DaemonCodeAnalyzerStatus status=new DaemonCodeAnalyzerStatus();
  status.noInspectionRoots=noInspectionRoots.isEmpty() ? null : noInspectionRoots.toArray(new String[noInspectionRoots.size()]);
  status.noHighlightingRoots=noHighlightingRoots.isEmpty() ? null : noHighlightingRoots.toArray(new String[noHighlightingRoots.size()]);
  status.rootsNumber=roots.length;
  if (myHighlighter.isErrorAnalyzingFinished(myFile)) {
    status.errorAnalyzingFinished=true;
    for (int i=0; i < status.errorCount.length; i++) {
      final HighlightSeverity minSeverity=SeverityRegistrar.getSeverityByIndex(i);
      status.errorCount[i]=getErrorsCount(minSeverity);
    }
    status.inspectionFinished=myHighlighter.isInspectionCompleted(myFile);
  }
  return status;
}
