{
  DaemonCodeAnalyzerStatus status=getDaemonCodeAnalyzerStatus();
  if (status == null)   return null;
  String text=HTML_HEADER;
  if (status.noHighlightingRoots != null && status.noHighlightingRoots.length == status.rootsNumber) {
    text+=DaemonBundle.message("analysis.hasnot.been.run");
    text+=HTML_FOOTER;
    return text;
  }
  if (status.errorAnalyzingFinished) {
    text+=DaemonBundle.message("analysis.completed");
  }
 else {
    text+=DaemonBundle.message("performing.code.analysis");
    text+="<table>";
    for (    DaemonCodeAnalyzerStatus.PassStatus passStatus : status.passStati) {
      if (passStatus.finished)       continue;
      text+="<tr><td>" + passStatus.name + ":</td><td>"+ renderProgressHtml(passStatus.progress)+ "</td></tr>";
    }
    text+="</table>";
  }
  if (status.errorCount[0] == 0) {
    text+=BR;
    if (!status.errorAnalyzingFinished) {
      text+=DaemonBundle.message("no.errors.or.warnings.found.so.far");
    }
 else {
      text+=DaemonBundle.message("no.errors.or.warnings.found");
    }
  }
 else {
    int currentSeverityErrors=0;
    for (int i=status.errorCount.length - 1; i >= 0; i--) {
      final HighlightSeverity severity=SeverityRegistrar.getSeverityByIndex(i);
      final int count=status.errorCount[i] - currentSeverityErrors;
      if (count > 0) {
        text+=BR;
        String name=count > 1 ? StringUtil.pluralize(severity.toString().toLowerCase()) : severity.toString().toLowerCase();
        if (!status.errorAnalyzingFinished) {
          text+=DaemonBundle.message("errors.found.so.far",count,name);
        }
 else {
          text+=DaemonBundle.message("errors.found",count,name);
        }
        currentSeverityErrors+=count;
      }
    }
  }
  text+=getMessageByRoots(status.noHighlightingRoots,status.rootsNumber,"no.syntax.highlighting.performed");
  text+=getMessageByRoots(status.noInspectionRoots,status.rootsNumber,"no.inspections.performed");
  text+=HTML_FOOTER;
  return text;
}
