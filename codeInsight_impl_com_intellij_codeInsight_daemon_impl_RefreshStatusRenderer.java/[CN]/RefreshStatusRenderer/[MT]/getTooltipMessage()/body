{
  DaemonCodeAnalyzerStatus status=getDaemonCodeAnalyzerStatus();
  if (status == null)   return null;
  String text=HTML_HEADER;
  if (status.noHighlightingRoots != null && status.noHighlightingRoots.length == status.rootsNumber) {
    text+=DaemonBundle.message("analysis.havent.been.run");
    text+=HTML_FOOTER;
    return text;
  }
 else   if (status.errorAnalyzingFinished) {
    boolean inspecting=!status.inspectionFinished;
    text+=inspecting ? DaemonBundle.message("pass.inspection") : DaemonBundle.message("analysis.completed");
    if (status.errorCount[0] == 0) {
      text+=BR;
      if (inspecting) {
        text+=DaemonBundle.message("no.errors.or.warnings.found.so.far");
      }
 else {
        text+=DaemonBundle.message("no.errors.or.warnings.found");
      }
    }
 else {
      int currentSeverityErrors=0;
      for (int i=status.errorCount.length - 1; i >= 0; i--) {
        final HighlightSeverity severity=SeverityRegistrar.getSeverityByIndex(i);
        final int count=(status.errorCount[i] - currentSeverityErrors);
        if (count > 0) {
          text+=BR;
          if (inspecting) {
            text+=DaemonBundle.message("errors.found.so.far",count,(count > 1 ? StringUtil.pluralize(severity.toString().toLowerCase()) : severity.toString().toLowerCase()));
          }
 else {
            text+=DaemonBundle.message("errors.found",count,(count > 1 ? StringUtil.pluralize(severity.toString().toLowerCase()) : severity.toString().toLowerCase()));
          }
          currentSeverityErrors+=count;
        }
      }
    }
    text+=getMessageByRoots(status.noHighlightingRoots,status.rootsNumber,"no.syntax.highlighting.performed");
    text+=getMessageByRoots(status.noInspectionRoots,status.rootsNumber,"no.inspections.performed");
    text+=HTML_FOOTER;
    return text;
  }
 else {
    return DaemonBundle.message("pass.syntax");
  }
}
