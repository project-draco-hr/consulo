{
  myPathToGroovy.getButton().addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      final FileChooserDescriptor descriptor=new FileChooserDescriptor(false,true,false,false,false,false);
      final FileChooserDialog fileChooserDialog=FileChooserFactory.getInstance().createFileChooser(descriptor,project);
      final VirtualFile[] files=fileChooserDialog.choose(null,project);
      if (files.length > 0) {
        String path=files[0].getPath();
        myPathToGroovy.setText(path);
        ValidationResult validationResult=new MyFacetEditorValidator().check();
        if (validationResult == ValidationResult.OK) {
          Collection<String> versions=GroovyConfigUtils.getGroovyVersions();
          String version=GroovyConfigUtils.getGroovyVersion(path);
          boolean addVersion=!versions.contains(version) || Messages.showOkCancelDialog(GroovyBundle.message("duplicate.groovy.lib.version.add",version),GroovyBundle.message("duplicate.groovy.lib.version"),GroovyIcons.BIG_ICON) == 0;
          if (addVersion && !GroovyConfigUtils.UNDEFINED_VERSION.equals(version)) {
            final Library library=GroovyConfigUtils.createGroovyLibrary(path,null,project,false);
            if (library != null) {
              final String newLibName=library.getName();
              GroovyConfigUtils.saveGroovyDefaultLibName(newLibName);
              adjustVersionComboBox(GroovyConfigUtils.getGroovyLibNames(),newLibName);
            }
          }
        }
 else {
          Messages.showErrorDialog(GroovyBundle.message("invalid.groovy.sdk.path.message"),GroovyBundle.message("invalid.groovy.sdk.path.text"));
        }
      }
    }
  }
);
}
