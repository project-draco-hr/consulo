{
  final LibrariesContainer container=LibrariesContainerFactory.createContainer(project);
  final AbstractGroovyLibraryManager[] managers=AbstractGroovyLibraryManager.EP_NAME.getExtensions();
  Set<Pair<Library,LibraryManager>> libs=new TreeSet<Pair<Library,LibraryManager>>(LIBRARY_COMPARATOR);
  for (  Library library : container.getAllLibraries()) {
    final LibraryManager manager=ManagedLibrariesEditor.findManagerFor(library,managers,container);
    if (myAcceptableManager.isInstance(manager)) {
      libs.add(Pair.create(library,manager));
    }
  }
  if (!libs.isEmpty()) {
    myComboBox.setRenderer(new DefaultListCellRenderer(){
      @Override public Component getListCellRendererComponent(      JList list,      Object value,      int index,      boolean isSelected,      boolean cellHasFocus){
        super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
        if (value instanceof Pair) {
          final Pair<Library,LibraryManager> pair=(Pair<Library,LibraryManager>)value;
          setIcon(pair.second.getIcon());
          setText(pair.first.getName());
        }
        return this;
      }
    }
);
    Pair<Library,LibraryManager> maxValue=libs.iterator().next();
    for (    final Pair<Library,LibraryManager> lib : libs) {
      myComboBox.addItem(lib);
      final String version=lib.first.getName();
      FontMetrics fontMetrics=myComboBox.getFontMetrics(myComboBox.getFont());
      if (fontMetrics.stringWidth(version) > fontMetrics.stringWidth(maxValue.getFirst().getName())) {
        maxValue=lib;
      }
    }
    myComboBox.setPrototypeDisplayValue(maxValue);
  }
 else {
    myComboBox.setEnabled(false);
    myComboBox.setVisible(false);
  }
  return libs;
}
