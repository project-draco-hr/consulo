{
  myComboBox.removeAllItems();
  String maxValue="";
  final MyLibraryStruct[] structs=ContainerUtil.map(libraries,new Function<Library,MyLibraryStruct>(){
    public MyLibraryStruct fun(    final Library library){
      return new MyLibraryStruct(library);
    }
  }
,new MyLibraryStruct[0]);
  for (  MyLibraryStruct struct : structs) {
    myComboBox.addItem(struct);
    final String version=struct.toString();
    FontMetrics fontMetrics=myComboBox.getFontMetrics(myComboBox.getFont());
    if (fontMetrics.stringWidth(version) > fontMetrics.stringWidth(maxValue)) {
      maxValue=version;
    }
  }
  myComboBox.setPrototypeDisplayValue(maxValue + "_");
  if (defaultGlobalLibName != null) {
    final MyLibraryStruct defaultStruct=ContainerUtil.find(structs,new Condition<MyLibraryStruct>(){
      public boolean value(      final MyLibraryStruct struct){
        final String name=struct.toString();
        return name != null && name.equals(defaultGlobalLibName) && LibraryTablesRegistrar.getInstance().getLibraryTable().getLibraryByName(defaultGlobalLibName) != null;
      }
    }
);
    if (defaultStruct != null) {
      myComboBox.setSelectedItem(defaultStruct);
    }
 else     if (structs.length > 0) {
      myComboBox.setSelectedItem(structs[0]);
    }
  }
}
