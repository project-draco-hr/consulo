{
  DiffString tail1=myVersion1.getNotProcessedTail();
  DiffString tail2=myVersion2.getNotProcessedTail();
  if (tail1.isEmpty() && tail2.isEmpty())   return;
  DiffFragment[] fragments=fragmentsByChar(tail1,tail2);
  if (!myFragments.isEmpty()) {
    DiffFragment lastFragment=myFragments.get(myFragments.size() - 1);
    if (lastFragment.isChange()) {
      int oneSideCount=0;
      while (oneSideCount < fragments.length && fragments[oneSideCount].isOneSide())       oneSideCount++;
      if (oneSideCount > 0) {
        myFragments.remove(myFragments.size() - 1);
        DiffFragment[] onesideFragments=new DiffFragment[oneSideCount];
        DiffFragment[] otherFragments=new DiffFragment[fragments.length - oneSideCount];
        System.arraycopy(fragments,0,onesideFragments,0,oneSideCount);
        System.arraycopy(fragments,oneSideCount,otherFragments,0,otherFragments.length);
        DiffFragment startingOneSides=UniteSameType.uniteAll(onesideFragments);
        if (startingOneSides.isOneSide()) {
          myFragments.add(lastFragment);
          add(startingOneSides);
        }
 else {
          lastFragment=Util.unite(lastFragment,startingOneSides);
          myFragments.add(lastFragment);
        }
        fragments=otherFragments;
      }
    }
  }
  addAll(fragments);
}
