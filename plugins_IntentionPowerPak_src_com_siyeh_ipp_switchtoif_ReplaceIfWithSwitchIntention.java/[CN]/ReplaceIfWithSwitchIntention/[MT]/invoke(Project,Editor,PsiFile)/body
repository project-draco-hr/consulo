{
  if (isFileReadOnly(project,file)) {
    return;
  }
  final PsiJavaToken switchToken=(PsiJavaToken)findMatchingElement(file,editor);
  PsiIfStatement ifStatement=(PsiIfStatement)switchToken.getParent();
  boolean breaksNeedRelabeled=false;
  PsiStatement breakTarget=null;
  String labelString="";
  if (ControlFlowUtils.statementContainsExitingBreak(ifStatement)) {
    PsiElement ancestor=ifStatement.getParent();
    while (ancestor != null) {
      if (ancestor instanceof PsiForStatement || ancestor instanceof PsiDoWhileStatement || ancestor instanceof PsiWhileStatement|| ancestor instanceof PsiSwitchStatement) {
        breakTarget=(PsiStatement)ancestor;
        break;
      }
      ancestor=ancestor.getParent();
    }
    if (breakTarget != null) {
      labelString=CaseUtil.findUniqueLabel(ifStatement,"Label");
      breaksNeedRelabeled=true;
    }
  }
  final PsiIfStatement statementToReplace=ifStatement;
  final StringBuffer switchStatementBuffer=new StringBuffer(1024);
  final PsiExpression caseExpression=CaseUtil.getCaseExpression(ifStatement);
  switchStatementBuffer.append("switch(" + caseExpression.getText() + ')');
  switchStatementBuffer.append('{');
  final List branches=new ArrayList(20);
  while (true) {
    final Set topLevelVariables=new HashSet(5);
    final Set innerVariables=new HashSet(5);
    final PsiExpression condition=ifStatement.getCondition();
    final PsiExpression[] labels=getValuesFromCondition(condition,caseExpression);
    final PsiStatement thenBranch=ifStatement.getThenBranch();
    DeclarationUtils.calculateVariablesDeclared(thenBranch,topLevelVariables,innerVariables,true);
    final IfStatementBranch ifBranch=new IfStatementBranch();
    ifBranch.setInnerVariables(innerVariables);
    ifBranch.setTopLevelVariables(topLevelVariables);
    ifBranch.setStatement(thenBranch);
    for (int i=0; i < labels.length; i++) {
      final PsiExpression label=labels[i];
      final String labelText=label.getText();
      ifBranch.addCondition(labelText);
    }
    branches.add(ifBranch);
    final PsiStatement elseBranch=ifStatement.getElseBranch();
    if (elseBranch instanceof PsiIfStatement) {
      ifStatement=(PsiIfStatement)elseBranch;
    }
 else     if (elseBranch == null) {
      break;
    }
 else {
      final Set elseTopLevelVariables=new HashSet(5);
      final Set elseInnerVariables=new HashSet(5);
      DeclarationUtils.calculateVariablesDeclared(elseBranch,elseTopLevelVariables,elseInnerVariables,true);
      final IfStatementBranch elseIfBranch=new IfStatementBranch();
      elseIfBranch.setInnerVariables(elseInnerVariables);
      elseIfBranch.setTopLevelVariables(elseTopLevelVariables);
      elseIfBranch.setElse();
      elseIfBranch.setStatement(elseBranch);
      branches.add(elseIfBranch);
      break;
    }
  }
  for (Iterator iterator=branches.iterator(); iterator.hasNext(); ) {
    final IfStatementBranch branch=(IfStatementBranch)iterator.next();
    boolean hasConflicts=false;
    for (Iterator innerIterator=branches.iterator(); innerIterator.hasNext(); ) {
      final IfStatementBranch testBranch=(IfStatementBranch)innerIterator.next();
      if (branch.topLevelDeclarationsConfictWith(testBranch)) {
        hasConflicts=true;
      }
    }
    final PsiStatement branchStatement=branch.getStatement();
    if (branch.isElse()) {
      dumpDefaultBranch(switchStatementBuffer,branchStatement,hasConflicts,breaksNeedRelabeled,labelString);
    }
 else {
      final List conditions=branch.getConditions();
      dumpBranch(switchStatementBuffer,conditions,branchStatement,hasConflicts,breaksNeedRelabeled,labelString);
    }
  }
  switchStatementBuffer.append('}');
  final String switchStatementString=switchStatementBuffer.toString();
  if (breaksNeedRelabeled) {
    final int length=switchStatementBuffer.length();
    final StringBuffer out=new StringBuffer(length);
    out.append(labelString + ':');
    termReplace(out,breakTarget,statementToReplace,switchStatementString);
    final String newStatement=out.toString();
    replaceStatement(project,newStatement,breakTarget);
  }
 else {
    replaceStatement(project,switchStatementString,statementToReplace);
  }
}
