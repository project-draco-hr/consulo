{
  UsageInfo[] usages=refUsages.get();
  List<UsageInfo> filtered=new ArrayList<UsageInfo>();
  for (  UsageInfo usage : usages) {
    if (usage instanceof TurnToSuperReferenceUsageInfo) {
      filtered.add(usage);
    }
  }
  myVariableRenamer=new AutomaticVariableRenamer(myClass,mySuperClassName,filtered);
  if (!ApplicationManager.getApplication().isUnitTestMode() && myVariableRenamer.hasAnythingToRename()) {
    final AutomaticRenamingDialog dialog=new AutomaticRenamingDialog(myProject,myVariableRenamer);
    dialog.show();
    if (!dialog.isOK())     return false;
    final List<PsiNamedElement> variables=myVariableRenamer.getElements();
    for (    final PsiNamedElement namedElement : variables) {
      final PsiVariable variable=(PsiVariable)namedElement;
      final SmartPsiElementPointer pointer=SmartPointerManager.getInstance(myProject).createSmartPsiElementPointer(variable);
      myVariablesRenames.put(pointer,myVariableRenamer.getNewName(variable));
    }
    Runnable runnable=new Runnable(){
      public void run(){
        myVariableRenamer.findUsages(myVariablesUsages,false,false);
      }
    }
;
    if (!ProgressManager.getInstance().runProcessWithProgressSynchronously(runnable,RefactoringBundle.message("searching.for.variables"),true,myProject)) {
      return false;
    }
  }
  prepareSuccessful();
  return true;
}
