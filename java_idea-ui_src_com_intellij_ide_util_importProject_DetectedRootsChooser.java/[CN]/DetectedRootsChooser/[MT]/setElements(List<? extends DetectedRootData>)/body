{
  Set<String> rootTypes=new HashSet<String>();
  for (  DetectedRootData root : roots) {
    for (    DetectedProjectRoot projectRoot : root.getAllRoots()) {
      rootTypes.add(projectRoot.getRootTypeName());
    }
  }
  if (rootTypes.size() > 1) {
    myModel.setColumnInfos(new ColumnInfo[]{myIncludedColumn,ROOT_COLUMN,ROOT_TYPE_COLUMN});
    int max=0;
    for (    String rootType : rootTypes) {
      max=Math.max(max,myTable.getFontMetrics(myTable.getFont()).stringWidth(rootType));
    }
    final TableColumn column=myTable.getColumnModel().getColumn(2);
    int width=max + 20;
    column.setPreferredWidth(width);
    column.setMaxWidth(width);
  }
 else {
    myModel.setColumnInfos(new ColumnInfo[]{myIncludedColumn,ROOT_COLUMN});
  }
  myTable.updateColumnSizes();
  List<DetectedRootData> sortedRoots=new ArrayList<DetectedRootData>(roots);
  Collections.sort(sortedRoots,new Comparator<DetectedRootData>(){
    @Override public int compare(    DetectedRootData o1,    DetectedRootData o2){
      return o1.getDirectory().compareTo(o2.getDirectory());
    }
  }
);
  myModel.setItems(sortedRoots);
}
