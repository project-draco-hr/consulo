{
  if (!isMine(psiElement))   return false;
  final Configuration configuration=Configuration.getInstance();
  final HashMap<BaseInjection,ConcatenationInjector.Info> injectionsMap=new HashMap<BaseInjection,ConcatenationInjector.Info>();
  final ArrayList<PsiAnnotation> annotations=new ArrayList<PsiAnnotation>();
  final PsiLiteralExpression host=(PsiLiteralExpression)psiElement;
  final Project project=host.getProject();
  collectInjections(host,configuration,injectionsMap,annotations);
  if (injectionsMap.isEmpty() || !annotations.isEmpty())   return false;
  final BaseInjection originalInjection=injectionsMap.keySet().iterator().next();
  final MethodParameterInjection methodParameterInjection=createMethodParameterInjection(psiElement.getProject(),originalInjection,injectionsMap.get(originalInjection).method,false);
  final MethodParameterInjection copy=methodParameterInjection.copy();
  final BaseInjection newInjection=showInjectionUI(project,methodParameterInjection);
  if (newInjection != null) {
    copy.initializePlaces(false);
    newInjection.mergeOriginalPlacesFrom(copy,false);
    newInjection.mergeOriginalPlacesFrom(originalInjection,true);
    Configuration.getInstance().replaceInjectionsWithUndo(project,Collections.singletonList(newInjection),Collections.singletonList(originalInjection),Collections.<PsiAnnotation>emptyList());
  }
  return true;
}
