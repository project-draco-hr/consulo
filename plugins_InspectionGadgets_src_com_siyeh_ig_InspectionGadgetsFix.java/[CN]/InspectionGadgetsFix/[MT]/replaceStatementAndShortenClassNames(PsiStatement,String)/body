{
  final PsiManager psiManager=statement.getManager();
  PsiStatement newStatement;
  final CodeStyleManager styleManager=psiManager.getCodeStyleManager();
  if (PsiUtil.isInJspFile(statement)) {
    final PsiDocumentManager documentManager=PsiDocumentManager.getInstance(psiManager.getProject());
    final JspFile file=PsiUtil.getJspFile(statement);
    final Document document=documentManager.getDocument(file);
    if (document == null) {
      return;
    }
    final TextRange textRange=statement.getTextRange();
    document.replaceString(textRange.getStartOffset(),textRange.getEndOffset(),newStatementText);
    documentManager.commitDocument(document);
    final JspxFileViewProvider viewProvider=file.getViewProvider();
    PsiElement elementAt=viewProvider.findElementAt(textRange.getStartOffset(),StdLanguages.JAVA);
    if (elementAt == null) {
      return;
    }
    final int endOffset=textRange.getStartOffset() + newStatementText.length();
    while (elementAt.getTextRange().getEndOffset() < endOffset || !(elementAt instanceof PsiStatement)) {
      elementAt=elementAt.getParent();
      if (elementAt == null) {
        LOG.error("Cannot decode statement");
        return;
      }
    }
    newStatement=(PsiStatement)elementAt;
    JavaCodeStyleManager.getInstance(psiManager.getProject()).shortenClassReferences(newStatement);
    final TextRange newTextRange=newStatement.getTextRange();
    final PsiFile element=viewProvider.getPsi(viewProvider.getBaseLanguage());
    styleManager.reformatRange(element,newTextRange.getStartOffset(),newTextRange.getEndOffset());
  }
 else {
    final PsiElementFactory factory=psiManager.getElementFactory();
    newStatement=factory.createStatementFromText(newStatementText,statement);
    newStatement=(PsiStatement)statement.replace(newStatement);
    JavaCodeStyleManager.getInstance(psiManager.getProject()).shortenClassReferences(newStatement);
    styleManager.reformat(newStatement);
  }
}
