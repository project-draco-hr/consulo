{
  final Project project=statement.getProject();
  final CodeStyleManager styleManager=CodeStyleManager.getInstance(project);
  final JavaCodeStyleManager javaStyleManager=JavaCodeStyleManager.getInstance(project);
  if (PsiUtil.isInJspFile(statement)) {
    final PsiDocumentManager documentManager=PsiDocumentManager.getInstance(project);
    final JspFile file=PsiUtil.getJspFile(statement);
    final Document document=documentManager.getDocument(file);
    if (document == null) {
      return;
    }
    documentManager.doPostponedOperationsAndUnblockDocument(document);
    final TextRange textRange=statement.getTextRange();
    document.replaceString(textRange.getStartOffset(),textRange.getEndOffset(),newStatementText);
    documentManager.commitDocument(document);
    final JspxFileViewProvider viewProvider=file.getViewProvider();
    PsiElement elementAt=viewProvider.findElementAt(textRange.getStartOffset(),StdLanguages.JAVA);
    if (elementAt == null) {
      return;
    }
    final int endOffset=textRange.getStartOffset() + newStatementText.length();
    while (elementAt.getTextRange().getEndOffset() < endOffset || !(elementAt instanceof PsiStatement)) {
      elementAt=elementAt.getParent();
      if (elementAt == null) {
        LOG.error("Cannot decode statement");
        return;
      }
    }
    final PsiStatement newStatement=(PsiStatement)elementAt;
    javaStyleManager.shortenClassReferences(newStatement);
    final TextRange newTextRange=newStatement.getTextRange();
    final Language baseLanguage=viewProvider.getBaseLanguage();
    final PsiFile element=viewProvider.getPsi(baseLanguage);
    if (element != null) {
      styleManager.reformatRange(element,newTextRange.getStartOffset(),newTextRange.getEndOffset());
    }
  }
 else {
    final JavaPsiFacade facade=JavaPsiFacade.getInstance(project);
    final PsiElementFactory factory=facade.getElementFactory();
    PsiStatement newStatement=factory.createStatementFromText(newStatementText,statement);
    newStatement=(PsiStatement)statement.replace(newStatement);
    javaStyleManager.shortenClassReferences(newStatement);
    styleManager.reformat(newStatement);
  }
}
