{
  if (aClass.hasModifierProperty(PsiModifier.ABSTRACT)) {
    return;
  }
  if (!UtilityClassUtil.isUtilityClass(aClass)) {
    return;
  }
  if (ignoreClassesWithOnlyMain && hasOnlyMain(aClass)) {
    return;
  }
  if (hasPrivateConstructor(aClass)) {
    return;
  }
  final SearchScope scope=GlobalSearchScope.projectScope(aClass.getProject());
  final Query<PsiClass> query=ClassInheritorsSearch.search(aClass,scope,true,true);
  final PsiClass subclass=query.findFirst();
  if (subclass != null) {
    return;
  }
  registerClassError(aClass);
}
