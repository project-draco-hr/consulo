{
  if (!element.isValid())   return false;
  if (!PsiUtil.isLanguageLevel5OrHigher(element))   return false;
  final PsiModifierListOwner owner;
  if (!element.getManager().isInProject(element) || CodeStyleSettingsManager.getSettings(project).USE_EXTERNAL_ANNOTATIONS) {
    owner=AddAnnotationPsiFix.getContainer(element);
  }
 else {
    return false;
  }
  if (owner == null)   return false;
  Pair<String,String[]> annotations=getAnnotations(project);
  String toAdd=annotations.first;
  String[] toRemove=annotations.second;
  if (toRemove.length > 0 && AnnotationUtil.isAnnotated(owner,toRemove[0],false,false))   return false;
  setText(AddAnnotationPsiFix.calcText(owner,toAdd));
  if (AnnotationUtil.isAnnotated(owner,toAdd,false,false))   return false;
  if (owner instanceof PsiMethod) {
    PsiType returnType=((PsiMethod)owner).getReturnType();
    return returnType != null && !(returnType instanceof PsiPrimitiveType);
  }
  return true;
}
