{
  if (t instanceof PsiWildcardType) {
    final PsiWildcardType wcType=(PsiWildcardType)t;
    final PsiType bound=wcType.getBound();
    if (bound == null) {
      return t;
    }
    final PsiManager manager=PsiManager.getInstance(myProject);
    final PsiType subst=substitute(bound);
    return wcType.isExtends() ? PsiWildcardType.createExtends(manager,subst) : PsiWildcardType.createSuper(manager,subst);
  }
 else   if (t instanceof PsiTypeVariable) {
    if (myBinding == null) {
      return null;
    }
    final PsiType b=myBinding.apply(t);
    if (b instanceof Bottom || b instanceof PsiTypeVariable) {
      return null;
    }
    return substitute(b);
  }
 else   if (t instanceof Bottom) {
    return null;
  }
 else   if (t instanceof PsiArrayType) {
    return substitute(((PsiArrayType)t).getComponentType()).createArrayType();
  }
 else   if (t instanceof PsiClassType) {
    final PsiClassType.ClassResolveResult result=((PsiClassType)t).resolveGenerics();
    final PsiClass aClass=result.getElement();
    final PsiSubstitutor aSubst=result.getSubstitutor();
    if (aClass == null) {
      return t;
    }
    PsiSubstitutor theSubst=PsiSubstitutor.EMPTY;
    for (final Iterator<PsiTypeParameter> p=aSubst.getSubstitutionMap().keySet().iterator(); p.hasNext(); ) {
      final PsiTypeParameter parm=p.next();
      final PsiType type=aSubst.substitute(parm);
      theSubst=theSubst.put(parm,substitute(type));
    }
    return aClass.getManager().getElementFactory().createType(aClass,theSubst);
  }
 else {
    return t;
  }
}
