{
  super.visitMethodCallExpression(call);
  final PsiReferenceExpression methodExpression=call.getMethodExpression();
  final String methodName=methodExpression.getReferenceName();
  if (!"put".equals(methodName) && !"set".equals(methodName) && !"add".equals(methodName)) {
    return;
  }
  final PsiExpression qualifier=methodExpression.getQualifierExpression();
  if (qualifier == null) {
    return;
  }
  if (!(qualifier instanceof PsiReferenceExpression)) {
    return;
  }
  final PsiElement referent=((PsiReference)qualifier).resolve();
  if (!(referent instanceof PsiVariable)) {
    return;
  }
  boolean hasMatchingArg=false;
  final PsiExpressionList argumentList=call.getArgumentList();
  if (argumentList == null) {
    return;
  }
  final PsiExpression[] args=argumentList.getExpressions();
  for (int i=0; i < args.length; i++) {
    if (ExpressionEquivalenceChecker.expressionsAreEquivalent(qualifier,args[i])) {
      hasMatchingArg=true;
    }
  }
  if (!hasMatchingArg) {
    return;
  }
  final PsiType qualifierType=qualifier.getType();
  if (!(qualifierType instanceof PsiClassType)) {
    return;
  }
  final PsiClass qualifierClass=((PsiClassType)qualifierType).resolve();
  if (qualifierClass == null) {
    return;
  }
  if (!ClassUtils.isSubclass(qualifierClass,"java.util.Collection") && !ClassUtils.isSubclass(qualifierClass,"java.util.Map")) {
    return;
  }
  registerError(qualifier);
}
