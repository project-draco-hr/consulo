{
  if (th instanceof InvalidTypeException) {
    return DebuggerBundle.message("evaluation.error.type.mismatch");
  }
 else   if (th instanceof AbsentInformationException) {
    return DebuggerBundle.message("evaluation.error.debug.info.unavailable");
  }
 else   if (th instanceof ClassNotLoadedException) {
    return DebuggerBundle.message("evaluation.error.class.not.loaded",((ClassNotLoadedException)th).className());
  }
 else   if (th instanceof ClassNotPreparedException) {
    return th.getMessage();
  }
 else   if (th instanceof IncompatibleThreadStateException) {
    return DebuggerBundle.message("evaluation.error.thread.not.at.breakpoint");
  }
 else   if (th instanceof InconsistentDebugInfoException) {
    return DebuggerBundle.message("evaluation.error.inconsistent.debug.info");
  }
 else   if (th instanceof ObjectCollectedException) {
    return DebuggerBundle.message("evaluation.error.object.collected");
  }
 else   if (th instanceof InvocationException) {
    InvocationException invocationException=(InvocationException)th;
    return DebuggerBundle.message("evaluation.error.method.exception",invocationException.exception().referenceType().name());
  }
 else   if (th instanceof EvaluateException) {
    return th.getMessage();
  }
 else {
    return th.getClass().getName() + " : " + (th.getMessage() != null ? th.getMessage() : "");
  }
}
