{
  super.visitThrowStatement(statement);
  final PsiExpression expression=ParenthesesUtils.stripParentheses(statement.getException());
  if (!(expression instanceof PsiReferenceExpression)) {
    return;
  }
  final PsiStatement previousStatement=PsiTreeUtil.getPrevSiblingOfType(statement,PsiStatement.class);
  if (previousStatement != null) {
    return;
  }
  final PsiElement parent=statement.getParent();
  if (parent instanceof PsiStatement) {
    return;
  }
  final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)expression;
  final PsiElement target=referenceExpression.resolve();
  if (!(target instanceof PsiParameter)) {
    return;
  }
  final PsiParameter parameter=(PsiParameter)target;
  final PsiElement declarationScope=parameter.getDeclarationScope();
  if (!(declarationScope instanceof PsiCatchSection)) {
    return;
  }
  final PsiCatchSection catchSection=(PsiCatchSection)declarationScope;
  final PsiCodeBlock block=PsiTreeUtil.getParentOfType(statement,PsiCodeBlock.class);
  if (block == null) {
    return;
  }
  final PsiElement blockParent=block.getParent();
  if (blockParent != catchSection) {
    return;
  }
  if (isSuperClassExceptionCaughtLater(parameter,catchSection)) {
    return;
  }
  final Query<PsiReference> query=ReferencesSearch.search(parameter);
  for (  PsiReference reference : query) {
    final PsiElement element=reference.getElement();
    if (element != expression) {
      return;
    }
  }
  final PsiTryStatement tryStatement=catchSection.getTryStatement();
  registerVariableError(parameter,tryStatement);
}
