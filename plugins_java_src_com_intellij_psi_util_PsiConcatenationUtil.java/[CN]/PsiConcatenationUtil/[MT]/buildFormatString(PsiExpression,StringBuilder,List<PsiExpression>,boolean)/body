{
  if (expression instanceof PsiLiteralExpression) {
    final PsiLiteralExpression literalExpression=(PsiLiteralExpression)expression;
    final String text=String.valueOf(literalExpression.getValue());
    final String formatText;
    if (printfFormat) {
      formatText=StringUtil.escapeStringCharacters(text).replace("%","%%").replace("\\'","'");
    }
 else {
      formatText=StringUtil.escapeStringCharacters(text).replace("'","''").replace("{","'{").replace("}","'}");
    }
    formatString.append(formatText);
  }
 else   if (expression instanceof PsiPolyadicExpression) {
    final PsiType type=expression.getType();
    if (type != null && type.equalsToText("java.lang.String")) {
      final PsiPolyadicExpression binaryExpression=(PsiPolyadicExpression)expression;
      PsiExpression[] operands=binaryExpression.getOperands();
      PsiType left=operands[0].getType();
      boolean stringStarted=left != null && left.equalsToText("java.lang.String");
      if (stringStarted) {
        buildFormatString(operands[0],formatString,formatParameters,printfFormat);
      }
      for (int i=1; i < operands.length; i++) {
        PsiExpression op=operands[i];
        PsiType optype=op.getType();
        PsiType r=TypeConversionUtil.calcTypeForBinaryExpression(left,optype,binaryExpression.getOperationTokenType(),true);
        if (r != null && r.equalsToText("java.lang.String") && !stringStarted) {
          stringStarted=true;
          PsiElement element=binaryExpression.getTokenBeforeOperand(op);
          if (element.getPrevSibling() instanceof PsiWhiteSpace)           element=element.getPrevSibling();
          String text=binaryExpression.getText().substring(0,element.getStartOffsetInParent());
          PsiExpression subExpression=JavaPsiFacade.getInstance(binaryExpression.getProject()).getElementFactory().createExpressionFromText(text,binaryExpression);
          addFormatParameter(subExpression,formatString,formatParameters,printfFormat);
        }
        if (stringStarted) {
          if (optype != null && (optype.equalsToText("java.lang.String") || optype == PsiType.CHAR)) {
            buildFormatString(op,formatString,formatParameters,printfFormat);
          }
 else {
            addFormatParameter(op,formatString,formatParameters,printfFormat);
          }
        }
        left=r;
      }
    }
 else {
      addFormatParameter(expression,formatString,formatParameters,printfFormat);
    }
  }
 else {
    addFormatParameter(expression,formatString,formatParameters,printfFormat);
  }
}
