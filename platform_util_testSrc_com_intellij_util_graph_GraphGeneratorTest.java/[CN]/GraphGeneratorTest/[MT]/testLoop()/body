{
  final TestNode nodeA=new TestNode("A");
  final TestNode nodeB=new TestNode("B");
  final TestNode[] nodes=new TestNode[]{nodeA,nodeB};
  final TestNode[] inA=new TestNode[]{nodeB};
  final TestNode[] inB=new TestNode[]{nodeA};
  final TestNode[] outA=inA;
  final TestNode[] outB=inB;
  final GraphGenerator<TestNode> graph=new GraphGenerator<TestNode>(new GraphGenerator.SemiGraph<TestNode>(){
    @Override public Collection<TestNode> getNodes(){
      return Arrays.asList(nodes);
    }
    @Override public Iterator<TestNode> getIn(    TestNode n){
      if (n == nodeA)       return Arrays.asList(inA).iterator();
      if (n == nodeB)       return Arrays.asList(inB).iterator();
      throw new NoSuchElementException();
    }
  }
);
  GraphTestUtil.assertIteratorsEqual(Arrays.asList(outA).iterator(),graph.getOut(nodeA));
  GraphTestUtil.assertIteratorsEqual(Arrays.asList(outB).iterator(),graph.getOut(nodeB));
}
