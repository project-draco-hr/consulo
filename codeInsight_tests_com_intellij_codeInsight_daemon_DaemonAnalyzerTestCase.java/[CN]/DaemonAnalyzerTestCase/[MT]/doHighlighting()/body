{
  PsiDocumentManager.getInstance(myProject).commitAllDocuments();
  Document document=myEditor.getDocument();
  GeneralHighlightingPass action1=new GeneralHighlightingPass(myProject,myFile,document,0,myFile.getTextLength(),false,true);
  action1.doCollectInformation(new MockProgressIndicator());
  Collection<HighlightInfo> highlights1=action1.getHighlights();
  PostHighlightingPass action2=new PostHighlightingPass(myProject,myFile,myEditor,0,myFile.getTextLength(),false);
  action2.doCollectInformation(new MockProgressIndicator());
  Collection<HighlightInfo> highlights2=action2.getHighlights();
  Collection<HighlightInfo> highlights3=null;
  if (doInspections()) {
    LocalInspectionsPass inspectionsPass=new LocalInspectionsPass(myProject,myFile,myEditor.getDocument(),0,myFile.getTextLength());
    inspectionsPass.doCollectInformation(new MockProgressIndicator());
    highlights3=inspectionsPass.getHighlights();
  }
  ArrayList<HighlightInfo> list=new ArrayList<HighlightInfo>();
  for (  HighlightInfo info : highlights1) {
    list.add(info);
  }
  for (  HighlightInfo info : highlights2) {
    list.add(info);
  }
  if (highlights3 != null) {
    for (    HighlightInfo info : highlights3) {
      list.add(info);
    }
  }
  boolean isToLaunchExternal=true;
  for (  HighlightInfo info : list) {
    if (info.getSeverity() == HighlightSeverity.ERROR) {
      isToLaunchExternal=false;
      break;
    }
  }
  if (isToLaunchExternal && doExternalValidation()) {
    ExternalToolPass action3=new ExternalToolPass(myFile,myEditor);
    action3.doCollectInformation(new MockProgressIndicator());
    highlights3=action3.getHighlights();
    for (    HighlightInfo info : highlights3) {
      list.add(info);
    }
  }
  return list;
}
