{
  PsiDocumentManager.getInstance(myProject).commitAllDocuments();
  final PsiFile file=myFile;
  final Editor editor=myEditor;
  final List<HighlightInfo> result=new ArrayList<HighlightInfo>();
  if (doTestLineMarkers()) {
    collectLineMarkersForFile(file,editor,result);
  }
  result.addAll(collectHighlighInfos(file,editor));
  boolean isToLaunchExternal=true;
  for (  HighlightInfo info : result) {
    if (info.getSeverity() == HighlightSeverity.ERROR) {
      isToLaunchExternal=false;
      break;
    }
  }
  if (doTestCustomPass()) {
    TextEditorHighlightingPass pass=getCustomPass(file,editor);
    if (pass != null) {
      pass.collectInformation(new MockProgressIndicator());
      result.addAll(pass.getHighlights());
    }
  }
  if (forceExternalValidation()) {
    result.clear();
  }
  if (isToLaunchExternal && doExternalValidation() || forceExternalValidation()) {
    ((DaemonCodeAnalyzerImpl)DaemonCodeAnalyzer.getInstance(myProject)).getFileStatusMap().setErrorFoundFlag(getDocument(getFile()),false);
    ExternalToolPass action3=new ExternalToolPass(file,editor,0,editor.getDocument().getTextLength());
    action3.doCollectInformation(new MockProgressIndicator());
    result.addAll(action3.getHighlights());
  }
  return result;
}
