{
  PsiDocumentManager.getInstance(myProject).commitAllDocuments();
  final List<HighlightInfo> result=new ArrayList<HighlightInfo>();
  if (doTestLineMarkers()) {
    collectLineMarkersForFile(getFile(),getEditor(),result);
  }
  result.addAll(collectHighlighInfos(getFile(),getEditor()));
  boolean isToLaunchExternal=true;
  for (  HighlightInfo info : result) {
    if (info.getSeverity() == HighlightSeverity.ERROR) {
      isToLaunchExternal=false;
      break;
    }
  }
  if (doTestCustomPass()) {
    TextEditorHighlightingPass pass=getCustomPass(getFile(),getEditor());
    if (pass != null) {
      pass.collectInformation(new MockProgressIndicator());
      pass.applyInformationToEditor();
      result.addAll(pass.getHighlights());
    }
  }
  if (forceExternalValidation()) {
    result.clear();
  }
  if (isToLaunchExternal && doExternalValidation() || forceExternalValidation()) {
    ((DaemonCodeAnalyzerImpl)DaemonCodeAnalyzer.getInstance(myProject)).getFileStatusMap().setErrorFoundFlag(getDocument(getFile()),false);
    ExternalToolPass pass=new ExternalToolPass(getFile(),getEditor(),0,getEditor().getDocument().getTextLength());
    pass.collectInformation(new MockProgressIndicator());
    pass.applyInformationToEditor();
    result.addAll(pass.getHighlights());
  }
  return result;
}
