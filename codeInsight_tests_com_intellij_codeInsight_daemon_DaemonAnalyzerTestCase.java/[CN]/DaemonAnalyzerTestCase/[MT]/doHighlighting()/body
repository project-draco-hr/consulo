{
  PsiDocumentManager.getInstance(myProject).commitAllDocuments();
  final PsiFile file=myFile;
  final Editor editor=myEditor;
  final List<HighlightInfo> result=collectHighlighInfos(file,editor);
  if (doTestLineMarkers()) {
    collectLineMarkersForFile(file,editor,result);
    if (file instanceof XmlFile) {
      file.acceptChildren(new PsiRecursiveElementVisitor(){
        public void visitElement(        final PsiElement element){
          super.visitElement(element);
          if (element instanceof PsiLanguageInjectionHost) {
            ((PsiLanguageInjectionHost)element).processInjectedPsi(new PsiLanguageInjectionHost.InjectedPsiVisitor(){
              public void visit(              @NotNull final PsiFile injectedPsi,              @NotNull final List<PsiLanguageInjectionHost.Shred> places){
                collectLineMarkersForFile(injectedPsi,InjectedLanguageUtil.getInjectedEditorForInjectedFile(editor,injectedPsi),result);
              }
            }
);
          }
        }
      }
);
    }
  }
  boolean isToLaunchExternal=true;
  for (  HighlightInfo info : result) {
    if (info.getSeverity() == HighlightSeverity.ERROR) {
      isToLaunchExternal=false;
      break;
    }
  }
  if (forceExternalValidation()) {
    result.clear();
  }
  if (isToLaunchExternal && doExternalValidation() || forceExternalValidation()) {
    ((DaemonCodeAnalyzerImpl)DaemonCodeAnalyzer.getInstance(myProject)).getFileStatusMap().setErrorFoundFlag(getDocument(getFile()),false);
    ExternalToolPass action3=new ExternalToolPass(file,editor,0,editor.getDocument().getTextLength());
    action3.doCollectInformation(new MockProgressIndicator());
    result.addAll(action3.getHighlights());
  }
  return result;
}
