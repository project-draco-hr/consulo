{
  super.setUp();
  final LocalInspectionTool[] tools=configureLocalInspectionTools();
  for (  LocalInspectionTool tool : tools) {
    enableInspectionTool(tool);
  }
  final InspectionProfileImpl profile=new InspectionProfileImpl(PROFILE){
    public LocalInspectionTool[] getHighlightingLocalInspectionTools(){
      final Collection<LocalInspectionTool> tools=myAvailableTools.values();
      return tools.toArray(new LocalInspectionTool[tools.size()]);
    }
    public boolean isToolEnabled(    HighlightDisplayKey key){
      if (key == null)       return false;
      return myAvailableTools.containsKey(key.toString()) || isNonInspectionHighlighting(key);
    }
    public HighlightDisplayLevel getErrorLevel(    HighlightDisplayKey key){
      final LocalInspectionTool localInspectionTool=myAvailableTools.get(key.toString());
      return localInspectionTool != null ? localInspectionTool.getDefaultLevel() : HighlightDisplayLevel.WARNING;
    }
    public InspectionTool getInspectionTool(    String shortName){
      return myAvailableLocalTools.get(shortName);
    }
  }
;
  final InspectionProfileManager inspectionProfileManager=InspectionProfileManager.getInstance();
  inspectionProfileManager.addProfile(profile);
  inspectionProfileManager.setRootProfile(profile.getName());
}
