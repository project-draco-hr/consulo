{
  super.setUp();
  final LocalInspectionTool[] tools=configureLocalInspectionTools();
  for (  LocalInspectionTool tool : tools) {
    enableInspectionTool(tool);
  }
  final InspectionProfileImpl profile=new InspectionProfileImpl(PROFILE){
    public ModifiableModel getModifiableModel(){
      mySource=this;
      return this;
    }
    public InspectionProfileEntry[] getInspectionTools(){
      final Collection<LocalInspectionToolWrapper> tools=myAvailableLocalTools.values();
      return tools.toArray(new LocalInspectionToolWrapper[tools.size()]);
    }
    public boolean isToolEnabled(    HighlightDisplayKey key){
      return key != null && myAvailableTools.containsKey(key.toString());
    }
    public HighlightDisplayLevel getErrorLevel(    HighlightDisplayKey key){
      final LocalInspectionTool localInspectionTool=key == null ? null : myAvailableTools.get(key.toString());
      return localInspectionTool != null ? localInspectionTool.getDefaultLevel() : HighlightDisplayLevel.WARNING;
    }
    public InspectionTool getInspectionTool(    String shortName){
      return myAvailableLocalTools.get(shortName);
    }
  }
;
  final InspectionProfileManager inspectionProfileManager=InspectionProfileManager.getInstance();
  inspectionProfileManager.addProfile(profile);
  inspectionProfileManager.setRootProfile(profile.getName());
  InspectionProjectProfileManager.getInstance(getProject()).updateProfile(profile);
  DaemonCodeAnalyzerImpl daemonCodeAnalyzer=(DaemonCodeAnalyzerImpl)DaemonCodeAnalyzer.getInstance(getProject());
  toInitializeDaemon=!daemonCodeAnalyzer.isInitialized();
  if (toInitializeDaemon) {
    daemonCodeAnalyzer.projectOpened();
  }
}
