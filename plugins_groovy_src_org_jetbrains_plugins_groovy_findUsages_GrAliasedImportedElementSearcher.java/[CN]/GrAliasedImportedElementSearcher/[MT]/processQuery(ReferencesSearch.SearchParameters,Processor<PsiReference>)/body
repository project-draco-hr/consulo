{
  final PsiElement target=parameters.getElementToSearch();
  if (!(target instanceof PsiMember) || !(target instanceof PsiNamedElement))   return;
  final String name=((PsiNamedElement)target).getName();
  if (name == null)   return;
  final SearchScope onlyGroovy=PsiUtil.restrictScopeToGroovyFiles(parameters.getEffectiveSearchScope());
  if (target instanceof PsiMethod) {
    final PsiMethod method=(PsiMethod)target;
    if (GroovyPropertyUtils.isSimplePropertyAccessor(method)) {
      final PsiField field=GroovyPropertyUtils.findFieldForAccessor(method,true);
      if (field != null) {
        final String propertyName=field.getName();
        if (propertyName != null) {
          final MyProcessor processor=new MyProcessor(method,GroovyPropertyUtils.getAccessorPrefix(method));
          parameters.getOptimizer().searchWord(propertyName,onlyGroovy,UsageSearchContext.IN_CODE,true,processor);
        }
      }
    }
  }
  parameters.getOptimizer().searchWord(name,onlyGroovy,UsageSearchContext.IN_CODE,true,new MyProcessor(target,null));
}
