{
  final GitVcsSettings.ConversionPolicy conversionPolicy=settings.getLineSeparatorsConversion();
  if (conversionPolicy != GitVcsSettings.ConversionPolicy.NONE) {
    LocalFileSystem lfs=LocalFileSystem.getInstance();
    final String nl=CodeStyleFacade.getInstance(project).getLineSeparator();
    final Map<VirtualFile,Set<VirtualFile>> files=new HashMap<VirtualFile,Set<VirtualFile>>();
    for (    Map.Entry<VirtualFile,Collection<Change>> entry : sortedChanges.entrySet()) {
      final VirtualFile root=entry.getKey();
      final Set<VirtualFile> added=new HashSet<VirtualFile>();
      for (      Change change : entry.getValue()) {
switch (change.getType()) {
case NEW:
case MODIFICATION:
case MOVED:
          VirtualFile f=lfs.findFileByPath(change.getAfterRevision().getFile().getPath());
        if (f != null && !f.getFileType().isBinary() && !nl.equals(LoadTextUtil.detectLineSeparator(f,false))) {
          added.add(f);
        }
      break;
case DELETED:
  }
}
if (!added.isEmpty()) {
  files.put(root,added);
}
}
for (Iterator<Map.Entry<VirtualFile,Set<VirtualFile>>> i=files.entrySet().iterator(); i.hasNext(); ) {
Map.Entry<VirtualFile,Set<VirtualFile>> e=i.next();
Set<VirtualFile> fs=e.getValue();
for (Iterator<VirtualFile> j=fs.iterator(); j.hasNext(); ) {
  VirtualFile f=j.next();
  String detectedLineSeparator=LoadTextUtil.detectLineSeparator(f,true);
  if (detectedLineSeparator == null || nl.equals(detectedLineSeparator)) {
    j.remove();
  }
}
if (fs.isEmpty()) {
  i.remove();
}
}
if (files.isEmpty()) {
return true;
}
UIUtil.invokeAndWaitIfNeeded(new Runnable(){
public void run(){
  VirtualFile[] selectedFiles=null;
  if (settings.getLineSeparatorsConversion() == GitVcsSettings.ConversionPolicy.ASK) {
    GitConvertFilesDialog d=new GitConvertFilesDialog(project,files);
    d.show();
    if (d.isOK()) {
      if (d.isDontShowAgainChosen()) {
        settings.setLineSeparatorsConversion(GitVcsSettings.ConversionPolicy.CONVERT);
      }
      selectedFiles=d.getSelectedFiles();
    }
 else     if (d.getExitCode() == GitConvertFilesDialog.DO_NOT_CONVERT) {
      if (d.isDontShowAgainChosen()) {
        settings.setLineSeparatorsConversion(GitVcsSettings.ConversionPolicy.NONE);
      }
    }
 else {
      exceptions.add(new VcsException("Commit was cancelled in file conversion dialog"));
    }
  }
 else {
    ArrayList<VirtualFile> fileList=new ArrayList<VirtualFile>();
    for (    Set<VirtualFile> fileSet : files.values()) {
      fileList.addAll(fileSet);
    }
    selectedFiles=VfsUtil.toVirtualFileArray(fileList);
  }
  if (selectedFiles != null) {
    for (    VirtualFile f : selectedFiles) {
      if (f == null) {
        continue;
      }
      try {
        LoadTextUtil.changeLineSeparator(project,GitConvertFilesDialog.class.getName(),f,nl);
      }
 catch (      IOException e) {
        exceptions.add(new VcsException("Failed to change line separators for the file: " + f.getPresentableUrl(),e));
      }
    }
  }
}
}
);
}
return exceptions.isEmpty();
}
