{
  final MavenProgressIndicator indicator=new MavenProgressIndicator();
  Runnable runnable=new Runnable(){
    public void run(){
      if (project.isDisposed())       return;
      try {
        task.run(indicator);
      }
 catch (      MavenProcessCanceledException ignore) {
        indicator.cancel();
      }
catch (      ProcessCanceledException ignore) {
        indicator.cancel();
      }
    }
  }
;
  if (isNoBackgroundMode()) {
    runnable.run();
    return new MavenTaskHandler(){
      public void waitFor(){
      }
    }
;
  }
 else {
    final Future<?> future=ApplicationManager.getApplication().executeOnPooledThread(runnable);
    final MavenTaskHandler handler=new MavenTaskHandler(){
      public void waitFor(){
        try {
          future.get();
        }
 catch (        InterruptedException e) {
          MavenLog.LOG.error(e);
        }
catch (        ExecutionException e) {
          MavenLog.LOG.error(e);
        }
      }
    }
;
    invokeLater(project,new Runnable(){
      public void run(){
        if (future.isDone())         return;
        new Task.Backgroundable(project,title,cancellable){
          public void run(          @NotNull ProgressIndicator i){
            indicator.setIndicator(i);
            handler.waitFor();
          }
        }
.queue();
      }
    }
);
    return handler;
  }
}
