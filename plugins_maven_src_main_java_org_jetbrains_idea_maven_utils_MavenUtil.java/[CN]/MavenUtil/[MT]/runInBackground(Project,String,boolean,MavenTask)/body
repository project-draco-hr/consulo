{
  final Semaphore finishSemaphore=new Semaphore();
  final MavenProgressIndicator indicator=new MavenProgressIndicator();
  finishSemaphore.down();
  Runnable runnable=new Runnable(){
    public void run(){
      try {
        task.run(indicator);
      }
 catch (      MavenProcessCanceledException ignore) {
        indicator.cancel();
      }
catch (      ProcessCanceledException ignore) {
        indicator.cancel();
      }
 finally {
        finishSemaphore.up();
      }
    }
  }
;
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    runnable.run();
  }
 else {
    final Future<?> future=ApplicationManager.getApplication().executeOnPooledThread(runnable);
    invokeLater(project,new Runnable(){
      public void run(){
        if (future.isDone())         return;
        new Task.Backgroundable(project,title,cancellable){
          public void run(          @NotNull ProgressIndicator i){
            indicator.addIndicator(i);
            try {
              future.get();
            }
 catch (            InterruptedException e) {
            }
catch (            ExecutionException e) {
            }
          }
        }
.queue();
      }
    }
);
  }
  return new MavenTaskHandler(finishSemaphore,indicator);
}
