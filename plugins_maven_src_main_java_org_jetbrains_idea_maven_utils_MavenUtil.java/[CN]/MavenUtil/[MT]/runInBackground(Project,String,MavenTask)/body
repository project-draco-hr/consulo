{
  final Semaphore startSemaphore=new Semaphore();
  final Semaphore finishSemaphore=new Semaphore();
  final ProgressIndicator[] indicator=new ProgressIndicator[1];
  startSemaphore.down();
  finishSemaphore.down();
  final MavenTask[] taskHolder=new MavenTask[]{task};
  invokeInDispatchThread(project,new Runnable(){
    public void run(){
      ProgressManager.getInstance().run(new Task.Backgroundable(project,title,true){
        public void run(        @NotNull ProgressIndicator i){
          try {
            indicator[0]=i;
            startSemaphore.up();
            taskHolder[0].run(new MavenProgressIndicator(i));
          }
 catch (          MavenProcessCanceledException ignore) {
          }
 finally {
            finishSemaphore.up();
            taskHolder[0]=null;
          }
        }
        @Override public boolean shouldStartInBackground(){
          return true;
        }
      }
);
    }
  }
);
  return new MavenTaskHandler(startSemaphore,finishSemaphore,indicator);
}
