{
  stream.println("    Cluster:");
  final List<String> mapped=new LinkedList<String>();
  for (  final Map.Entry<Usage,TIntHashSet> e : myUsageToDependenciesMap.entrySet()) {
    final ByteArrayOutputStream bas=new ByteArrayOutputStream();
    final PrintStream s=new PrintStream(bas);
    s.println("      Usage    : ");
    s.print("        ");
    e.getKey().toStream(context,s);
    s.println("      Residence:");
    final List<String> r=new LinkedList<String>();
    e.getValue().forEach(new TIntProcedure(){
      @Override public boolean execute(      final int value){
        r.add("        " + context.getValue(value));
        return true;
      }
    }
);
    Collections.sort(r);
    for (    final String sr : r) {
      s.println(sr);
    }
    try {
      bas.close();
    }
 catch (    Exception x) {
      throw new RuntimeException(x);
    }
    mapped.add(bas.toString());
  }
  Collections.sort(mapped);
  for (  final String s : mapped) {
    stream.print(s);
  }
}
