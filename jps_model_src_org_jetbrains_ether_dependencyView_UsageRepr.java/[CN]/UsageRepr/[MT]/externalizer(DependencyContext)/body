{
  return new DataExternalizer<Usage>(){
    @Override public void save(    final DataOutput out,    final Usage value) throws IOException {
      value.save(out);
    }
    @Override public Usage read(    DataInput in) throws IOException {
switch (in.readInt()) {
case CLASS_USAGE:
        return context.getUsage(new ClassUsage(in));
case CLASS_EXTENDS_USAGE:
      return context.getUsage(new ClassExtendsUsage(in));
case CLASS_NEW_USAGE:
    return context.getUsage(new ClassNewUsage(in));
case FIELD_USAGE:
  return context.getUsage(new FieldUsage(context,in));
case FIELD_ASSIGN_USAGE:
return context.getUsage(new FieldAssignUsage(context,in));
case METHOD_USAGE:
return context.getUsage(new MethodUsage(context,in));
case ANNOTATION_USAGE:
return context.getUsage(new AnnotationUsage(context,in));
}
assert(false);
return null;
}
}
;
}
