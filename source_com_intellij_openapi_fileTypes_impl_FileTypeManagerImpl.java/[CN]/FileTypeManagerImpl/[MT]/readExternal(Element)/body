{
  int savedVersion=getVersion(parentNode);
  for (  final Object o : parentNode.getChildren()) {
    final Element e=(Element)o;
    if (ELEMENT_FILETYPES.equals(e.getName())) {
      List children=e.getChildren(ELEMENT_FILETYPE);
      for (      final Object aChildren : children) {
        Element element=(Element)aChildren;
        loadFileType(element,true);
      }
    }
 else     if (ELEMENT_IGNOREFILES.equals(e.getName())) {
      setIgnoredFilesListWithoutNotification(e.getAttributeValue(ATTRIBUTE_LIST));
    }
 else     if (ELEMENT_EXTENSIONMAP.equals(e.getName())) {
      List mappings=e.getChildren(ELEMENT_MAPPING);
      for (      Object mapping1 : mappings) {
        Element mapping=(Element)mapping1;
        String ext=mapping.getAttributeValue(ATTRIBUTE_EXT);
        String pattern=mapping.getAttributeValue(ATTRIBUTE_PATTERN);
        String name=mapping.getAttributeValue(ATTRIBUTE_TYPE);
        FileType type=getFileTypeByName(name);
        FileNameMatcher matcher=ext != null ? new ExtensionFileNameMatcher(ext) : new WildcardFileNameMatcher(pattern);
        if (type != null) {
          associate(type,matcher,false);
        }
 else {
          myUnresolvedMappings.put(matcher,name);
        }
      }
      List removedMappings=e.getChildren(ELEMENT_REMOVED_MAPPING);
      for (      Object removedMapping : removedMappings) {
        Element mapping=(Element)removedMapping;
        String ext=mapping.getAttributeValue(ATTRIBUTE_EXT);
        String pattern=mapping.getAttributeValue(ATTRIBUTE_PATTERN);
        String name=mapping.getAttributeValue(ATTRIBUTE_TYPE);
        FileType type=getFileTypeByName(name);
        FileNameMatcher matcher=ext != null ? new ExtensionFileNameMatcher(ext) : new WildcardFileNameMatcher(pattern);
        if (type != null) {
          removeAssociation(type,matcher,false);
        }
      }
    }
  }
  if (savedVersion == 0) {
    if (!myIgnoredFileMasksSet.contains(IGNORE_DOT_SVN)) {
      myIgnorePatterns.add(PatternUtil.fromMask(IGNORE_DOT_SVN));
      myIgnoredFileMasksSet.add(IGNORE_DOT_SVN);
    }
  }
  if (savedVersion < VERSION) {
    restoreStandardFileExtensions();
  }
}
