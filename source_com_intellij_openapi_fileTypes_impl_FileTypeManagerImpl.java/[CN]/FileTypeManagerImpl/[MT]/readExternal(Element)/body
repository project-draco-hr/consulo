{
  int savedVersion=getVersion(parentNode);
  for (  final Object o : parentNode.getChildren()) {
    final Element e=(Element)o;
    if ("filetypes".equals(e.getName())) {
      List children=e.getChildren("filetype");
      for (      final Object aChildren : children) {
        Element element=(Element)aChildren;
        loadFileType(element,true);
      }
    }
 else     if ("ignoreFiles".equals(e.getName())) {
      setIgnoredFilesListWithoutNotification(e.getAttributeValue("list"));
    }
 else     if ("extensionMap".equals(e.getName())) {
      List mappings=e.getChildren("mapping");
      for (      Object mapping1 : mappings) {
        Element mapping=(Element)mapping1;
        String ext=mapping.getAttributeValue("ext");
        String name=mapping.getAttributeValue("type");
        FileType type=getFileTypeByName(name);
        if (type != null) {
          associateExtension(type,ext,false);
        }
 else {
          myUnresolvedMappings.put(ext,name);
        }
      }
      List removedMappings=e.getChildren("removed_mapping");
      for (      Object removedMapping : removedMappings) {
        Element mapping=(Element)removedMapping;
        String ext=mapping.getAttributeValue("ext");
        String name=mapping.getAttributeValue("type");
        FileType type=getFileTypeByName(name);
        if (type != null) {
          removeAssociation(type,ext,false);
        }
      }
    }
  }
  if (savedVersion == 0) {
    if (!myIgnoredFileMasksSet.contains(".svn")) {
      myIgnorePatterns.add(PatternUtil.fromMask(".svn"));
      myIgnoredFileMasksSet.add(".svn");
    }
  }
  if (savedVersion < VERSION) {
    restoreStandardFileExtensions();
  }
}
