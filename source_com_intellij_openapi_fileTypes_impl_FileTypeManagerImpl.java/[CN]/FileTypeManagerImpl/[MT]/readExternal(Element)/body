{
  int savedVersion=getVersion(parentNode);
  for (Iterator iterator=parentNode.getChildren().iterator(); iterator.hasNext(); ) {
    final Element e=(Element)iterator.next();
    if ("filetypes".equals(e.getName())) {
      List children=e.getChildren("filetype");
      for (Iterator i=children.iterator(); i.hasNext(); ) {
        Element element=(Element)i.next();
        loadFileType(element,true);
      }
    }
 else     if ("ignoreFiles".equals(e.getName())) {
      setIgnoredFilesListWithoutNotification(e.getAttributeValue("list"));
    }
 else     if ("extensionMap".equals(e.getName())) {
      List mappings=e.getChildren("mapping");
      for (int i=0; i < mappings.size(); i++) {
        Element mapping=(Element)mappings.get(i);
        String ext=mapping.getAttributeValue("ext");
        String name=mapping.getAttributeValue("type");
        FileType type=getFileTypeByName(name);
        if (type != null) {
          if (savedVersion < VERSION && (type == StdFileTypes.XML && (ext.equals("dtd") || ext.equals("xhtml") || ext.equals("jspx")|| ext.equals("tagx"))) || ext.equals("css")) {
            continue;
          }
          associateExtension(type,ext,false);
        }
      }
      List removedMappings=e.getChildren("removed_mapping");
      for (int i=0; i < removedMappings.size(); i++) {
        Element mapping=(Element)removedMappings.get(i);
        String ext=mapping.getAttributeValue("ext");
        String name=mapping.getAttributeValue("type");
        FileType type=getFileTypeByName(name);
        if (type != null) {
          if (savedVersion < VERSION) {
            if ((type == StdFileTypes.DTD && ext.equals("dtd")) || (type == StdFileTypes.XHTML && ext.equals("xhtml")) || ext.equals("css")|| (type == StdFileTypes.JSPX && (ext.equals("tagx") || ext.equals("jspx")))) {
              continue;
            }
          }
          removeAssociation(type,ext,false);
        }
      }
    }
  }
  if (savedVersion == 0) {
    if (!myIgnoredFileMasksSet.contains(".svn")) {
      myIgnorePatterns.add(PatternUtil.fromMask(".svn"));
      myIgnoredFileMasksSet.add(".svn");
    }
  }
}
