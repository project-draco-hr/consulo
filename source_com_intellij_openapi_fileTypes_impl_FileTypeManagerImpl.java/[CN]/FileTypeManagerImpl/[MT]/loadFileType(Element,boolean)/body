{
  String fileTypeName=typeElement.getAttributeValue("name");
  String fileTypeDescr=typeElement.getAttributeValue("description");
  String iconPath=typeElement.getAttributeValue("icon");
  String extensionsStr=typeElement.getAttributeValue("extensions");
  SyntaxTable table=null;
  Element element=typeElement.getChild("highlighting");
  if (element != null) {
    table=readSyntaxTable(element);
  }
  FileType type=getFileTypeByName(fileTypeName);
  String[] exts=parse(extensionsStr);
  if (type != null) {
    if (extensionsStr != null) {
      removeAllAssociations(type);
      for (      String ext : exts) {
        associateExtension(type,ext,false);
      }
    }
    if (table != null && type instanceof CustomFileType) {
      ((CustomFileType)type).setSyntaxTable(table);
    }
  }
 else {
    if (table != null) {
      type=new CustomFileType(table);
      ((CustomFileType)type).initSupport();
    }
 else {
      type=new UserBinaryFileType();
    }
    registerFileTypeWithoutNotification(type,exts);
  }
  if (type instanceof UserFileType) {
    UserFileType ft=(UserFileType)type;
    if (iconPath != null && !"".equals(iconPath.trim())) {
      Icon icon=IconLoader.getIcon(iconPath);
      if (icon != null)       ft.setIcon(icon);
    }
    if (fileTypeDescr != null)     ft.setDescription(fileTypeDescr);
    if (fileTypeName != null)     ft.setName(fileTypeName);
  }
  if (isDefaults) {
    myDefaultTypes.add(type);
    if (table != null) {
      myDefaultTables.put(type,table);
    }
  }
  return type;
}
