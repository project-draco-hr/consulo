{
  final String prop="${prop}";
  int index=unresolvedText == null ? -1 : unresolvedText.indexOf(prop);
  if (index == -1)   return PsiReference.EMPTY_ARRAY;
  TextRange textRange=ElementManipulators.getValueTextRange(element);
  final TextRange refRange=TextRange.from(textRange.getStartOffset() + index,prop.length());
  return new PsiReference[]{new PsiReference(){
    @Override public PsiElement getElement(){
      return element;
    }
    @Override public TextRange getRangeInElement(){
      return refRange;
    }
    @Override public PsiElement resolve(){
      return myMyTargetElement;
    }
    @Override @NotNull public String getCanonicalText(){
      return prop;
    }
    @Override public PsiElement handleElementRename(    String newElementName) throws IncorrectOperationException {
      return null;
    }
    @Override public PsiElement bindToElement(    @NotNull PsiElement element) throws IncorrectOperationException {
      return null;
    }
    @Override public boolean isReferenceTo(    PsiElement element){
      return false;
    }
    @Override @NotNull public Object[] getVariants(){
      return EMPTY_ARRAY;
    }
    @Override public boolean isSoft(){
      return true;
    }
  }
};
}
