{
  myTree=tree;
  myProject=project;
  myTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      if (myFrozen)       return;
      mySelectionNodes=new ArrayList<T>();
      TreePath[] paths=myTree.getSelectionPaths();
      if (paths != null) {
        for (        TreePath path : paths) {
          mySelectionNodes.add((T)path.getLastPathComponent());
        }
      }
    }
  }
);
  myTree.addTreeExpansionListener(new TreeExpansionListener(){
    public void treeExpanded(    TreeExpansionEvent event){
      if (myFrozen)       return;
      TreePath path=event.getPath();
      if (path != null) {
        myExpandedPaths.add(path);
      }
    }
    public void treeCollapsed(    TreeExpansionEvent event){
      if (myFrozen)       return;
      TreePath path=event.getPath();
      if (path != null) {
        TreePath[] allPaths=myExpandedPaths.toArray(new TreePath[myExpandedPaths.size()]);
        for (        TreePath treePath : allPaths) {
          if (treePath.equals(path) || path.isDescendant(treePath)) {
            myExpandedPaths.remove(treePath);
          }
        }
      }
    }
  }
);
}
