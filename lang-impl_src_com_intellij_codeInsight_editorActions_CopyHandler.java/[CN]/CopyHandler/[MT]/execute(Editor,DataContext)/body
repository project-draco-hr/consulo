{
  final Project project=PlatformDataKeys.PROJECT.getData(DataManager.getInstance().getDataContext(editor.getComponent()));
  if (project == null) {
    if (myOriginalAction != null) {
      myOriginalAction.execute(editor,dataContext);
    }
    return;
  }
  final PsiFile file=PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument());
  final CodeInsightSettings settings=CodeInsightSettings.getInstance();
  if (file == null || settings.ADD_IMPORTS_ON_PASTE == CodeInsightSettings.NO) {
    if (myOriginalAction != null) {
      myOriginalAction.execute(editor,dataContext);
    }
    return;
  }
  final SelectionModel selectionModel=editor.getSelectionModel();
  if (!selectionModel.hasSelection() && !selectionModel.hasBlockSelection()) {
    selectionModel.selectLineAtCaret();
    if (!selectionModel.hasSelection())     return;
  }
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  final int[] startOffsets=selectionModel.getBlockSelectionStarts();
  final int[] endOffsets=selectionModel.getBlockSelectionEnds();
  final TextBlockTransferable.ReferenceData[] referenceData=collectReferencesInBlock(file,startOffsets,endOffsets);
  final TextBlockTransferable.FoldingData[] foldingData=collectFoldingsInBlock(editor,startOffsets,endOffsets);
  String rawText=TextBlockTransferable.convertLineSeparators(selectionModel.getSelectedText(),"\n",referenceData,foldingData);
  String escapedText=null;
  for (  CopyPastePreProcessor processor : Extensions.getExtensions(CopyPastePreProcessor.EP_NAME)) {
    escapedText=processor.preprocessOnCopy(file,startOffsets,endOffsets,rawText);
    if (escapedText != null) {
      break;
    }
  }
  final Transferable transferable=new TextBlockTransferable(escapedText != null ? escapedText : rawText,referenceData,foldingData,escapedText != null ? new RawText(rawText) : null);
  CopyPasteManager.getInstance().setContents(transferable);
}
