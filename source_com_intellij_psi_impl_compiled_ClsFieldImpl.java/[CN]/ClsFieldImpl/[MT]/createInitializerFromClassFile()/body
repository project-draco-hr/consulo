{
  ClassFileData classFileData=myParent.getClassFileData();
  BytePointer ptr=classFileData.findAttribute(myStartOffset + 6,"ConstantValue");
  if (ptr == null)   return null;
  ptr.offset+=4;
  int index=ClsUtil.readU2(ptr);
  int offsetInPool=classFileData.getOffsetInConstantPool(index);
  ptr=new BytePointer(classFileData.getData(),offsetInPool);
  int kind=ClsUtil.readU1(ptr);
  PsiType type=getType();
  if (PsiType.INT == type) {
    if (kind != ClsUtil.CONSTANT_Integer) {
      throw new ClsFormatException();
    }
    int v=ClsUtil.readU4(ptr);
    return createNumberExpr(v);
  }
 else   if (PsiType.LONG == type) {
    if (kind != ClsUtil.CONSTANT_Long) {
      throw new ClsFormatException();
    }
    int valueH=ClsUtil.readU4(ptr);
    int valueL=ClsUtil.readU4(ptr);
    long v=((long)valueH << 32) | (valueL & 0xFFFFFFFFL);
    return createNumberExpr(v);
  }
 else   if (PsiType.SHORT == type) {
    if (kind != ClsUtil.CONSTANT_Integer) {
      throw new ClsFormatException();
    }
    int v=ClsUtil.readU4(ptr);
    return createNumberExpr(v);
  }
 else   if (PsiType.BYTE == type) {
    if (kind != ClsUtil.CONSTANT_Integer) {
      throw new ClsFormatException();
    }
    int v=ClsUtil.readU4(ptr);
    return createNumberExpr(v);
  }
 else   if (PsiType.CHAR == type) {
    if (kind != ClsUtil.CONSTANT_Integer) {
      throw new ClsFormatException();
    }
    char v=(char)ClsUtil.readU4(ptr);
    Object value=new Character(v);
    String text=literalToString(value.toString(),'\'');
    return new ClsLiteralExpressionImpl(this,text,type,value);
  }
 else   if (PsiType.BOOLEAN == type) {
    if (kind != ClsUtil.CONSTANT_Integer) {
      throw new ClsFormatException();
    }
    int v=ClsUtil.readU4(ptr);
    Object value=v != 0 ? Boolean.TRUE : Boolean.FALSE;
    String text=value.toString();
    return new ClsLiteralExpressionImpl(this,text,type,value);
  }
 else   if (PsiType.FLOAT == type) {
    if (kind != ClsUtil.CONSTANT_Float) {
      throw new ClsFormatException();
    }
    float v=ClsUtil.readFloat(ptr);
    String text;
    if (Float.isInfinite(v)) {
      text=v > 0 ? "Float.POSITIVE_INFINITY" : "Float.NEGATIVE_INFINITY";
    }
 else     if (Float.isNaN(v)) {
      text="Float.NaN";
    }
 else {
      text=Float.toString(v) + "f";
    }
    return ClsParsingUtil.createExpressionFromText(text,getManager(),this);
  }
 else   if (PsiType.DOUBLE == type) {
    if (kind != ClsUtil.CONSTANT_Double) {
      throw new ClsFormatException();
    }
    double v=ClsUtil.readDouble(ptr);
    String text;
    if (Double.isInfinite(v)) {
      text=v > 0 ? "Double.POSITIVE_INFINITY" : "Double.NEGATIVE_INFINITY";
    }
 else     if (Double.isNaN(v)) {
      text="Double.NaN";
    }
 else {
      text=Double.toString(v);
    }
    return ClsParsingUtil.createExpressionFromText(text,getManager(),this);
  }
 else   if (getTypeElement() != null && "java.lang.String".equals(((ClsTypeElementImpl)getTypeElement()).getCanonicalText())) {
    if (kind != ClsUtil.CONSTANT_String) {
      throw new ClsFormatException();
    }
    int stringIndex=ClsUtil.readU2(ptr);
    ptr.offset=classFileData.getOffsetInConstantPool(stringIndex);
    String value=ClsUtil.readUtf8Info(ptr);
    String text=literalToString(value,'"');
    return new ClsLiteralExpressionImpl(this,text,type,value);
  }
 else {
    throw new ClsFormatException();
  }
}
