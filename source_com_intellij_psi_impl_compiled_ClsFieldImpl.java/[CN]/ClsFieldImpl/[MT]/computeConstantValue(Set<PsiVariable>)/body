{
  if (!hasModifierProperty(PsiModifier.FINAL))   return null;
  PsiExpression initializer=getInitializer();
  if (initializer == null)   return null;
  final String qName=getContainingClass().getQualifiedName();
  if ("java.lang.Float".equals(qName)) {
    final @NonNls String name=getName();
    if ("POSITIVE_INFINITY".equals(name))     return new Float(Float.POSITIVE_INFINITY);
    if ("NEGATIVE_INFINITY".equals(name))     return new Float(Float.NEGATIVE_INFINITY);
    if ("NaN".equals(name))     return new Float(Float.NaN);
  }
 else   if ("java.lang.Double".equals(qName)) {
    final @NonNls String name=getName();
    if ("POSITIVE_INFINITY".equals(name))     return new Double(Double.POSITIVE_INFINITY);
    if ("NEGATIVE_INFINITY".equals(name))     return new Double(Double.NEGATIVE_INFINITY);
    if ("NaN".equals(name))     return new Double(Double.NaN);
  }
  return PsiConstantEvaluationHelperImpl.computeCastTo(initializer,getType(),visitedVars);
}
