{
class Change implements Runnable {
    private String[] result;
    public void run(){
      final List<String> propertyHandlers=new ArrayList<String>();
      final PsiField[] fields=psiClass.getFields();
      for (      final PsiField field : fields) {
        if (field == element)         continue;
        final PsiModifierList modifierList=field.getModifierList();
        if (staticContext && (modifierList != null && !modifierList.hasModifierProperty(PsiModifier.STATIC)))         continue;
        final PsiMethod getter=PropertyUtil.generateGetterPrototype(field);
        if (getter.getReturnType().equals(varType) && psiClass.findMethodBySignature(getter,true) == null) {
          propertyHandlers.add(getter.getName());
        }
        final PsiMethod setter=PropertyUtil.generateSetterPrototype(field);
        if (setter.getReturnType().equals(varType) && psiClass.findMethodBySignature(setter,true) == null) {
          propertyHandlers.add(setter.getName());
        }
      }
      result=propertyHandlers.toArray(new String[propertyHandlers.size()]);
    }
  }
  final Change result=new Change();
  element.getManager().performActionWithFormatterDisabled(result);
  return result.result;
}
