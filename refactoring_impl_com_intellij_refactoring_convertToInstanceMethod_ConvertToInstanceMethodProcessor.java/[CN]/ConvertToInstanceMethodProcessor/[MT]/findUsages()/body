{
  LOG.assertTrue(myTargetParameter.getDeclarationScope() == myMethod);
  final PsiManager manager=myMethod.getManager();
  final Project project=manager.getProject();
  PsiSearchHelper searchHelper=manager.getSearchHelper();
  final PsiReference[] methodReferences=searchHelper.findReferences(myMethod,GlobalSearchScope.projectScope(project),false);
  List<UsageInfo> result=new ArrayList<UsageInfo>();
  for (  final PsiReference ref : methodReferences) {
    final PsiElement element=ref.getElement();
    if (element instanceof PsiReferenceExpression) {
      if (element.getParent() instanceof PsiMethodCallExpression) {
        result.add(new MethodCallUsageInfo((PsiMethodCallExpression)element.getParent()));
      }
    }
 else     if (element instanceof PsiDocTagValue) {
      result.add(new JavaDocUsageInfo(ref));
    }
  }
  PsiReference[] parameterReferences=searchHelper.findReferences(myTargetParameter,new LocalSearchScope(myMethod),false);
  for (  final PsiReference ref : parameterReferences) {
    if (ref.getElement() instanceof PsiReferenceExpression) {
      result.add(new ParameterUsageInfo((PsiReferenceExpression)ref));
    }
  }
  if (myTargetClass.isInterface()) {
    PsiClass[] implementingClasses=RefactoringHierarchyUtil.findImplementingClasses(myTargetClass);
    for (    final PsiClass implementingClass : implementingClasses) {
      result.add(new ImplementingClassUsageInfo(implementingClass));
    }
  }
  return result.toArray(new UsageInfo[result.size()]);
}
