{
  final PsiParameter parameter=section.getParameter();
  if (parameter == null)   return;
  PsiCodeBlock catchBlock=section.getCatchBlock();
  if (catchBlock == null)   return;
  PsiType type=parameter.getType();
  if (!(type instanceof PsiClassType))   return;
  PsiCodeBlock templateCatchBlock;
  final PsiParameter templateParameter;
  try {
    final PsiJavaParserFacade elementFactory=JavaPsiFacade.getInstance(section.getProject()).getParserFacade();
    PsiCatchSection sectionTemplate=elementFactory.createCatchSection((PsiClassType)type,parameter.getName(),parameter);
    templateCatchBlock=sectionTemplate.getCatchBlock();
    FileTemplate catchBodyTemplate=FileTemplateManager.getInstance().getDefaultTemplate(JavaTemplateUtil.TEMPLATE_CATCH_BODY);
    Properties props=new Properties();
    props.setProperty(FileTemplate.ATTRIBUTE_EXCEPTION,parameter.getName());
    String catchBody=catchBodyTemplate.getText(props);
    PsiCodeBlock codeBlockFromText=elementFactory.createCodeBlockFromText("{\n" + catchBody + "\n}",null);
    templateCatchBlock=(PsiCodeBlock)templateCatchBlock.replace(codeBlockFromText);
    templateParameter=sectionTemplate.getParameter();
  }
 catch (  ProcessCanceledException e) {
    return;
  }
catch (  IncorrectOperationException e) {
    LOG.error(e);
    return;
  }
catch (  IOException e) {
    LOG.error(e);
    return;
  }
  if (!PsiEquivalenceUtil.areElementsEquivalent(catchBlock,templateCatchBlock,new Comparator<PsiElement>(){
    public int compare(    final PsiElement o1,    final PsiElement o2){
      if (o1 == parameter && o2 == templateParameter)       return 0;
      return -1;
    }
  }
,true)) {
    return;
  }
  Pair<? extends PsiElement,? extends PsiElement> range=DefaultFileTemplateUsageInspection.getInteriorRange(catchBlock);
  final String description=InspectionsBundle.message("default.file.template.description");
  ProblemDescriptor descriptor=myManager.createProblemDescriptor(range.first,range.second,description,ProblemHighlightType.GENERIC_ERROR_OR_WARNING,createQuickFix(section));
  myProblemDescriptors.add(descriptor);
}
