{
  final ICvsFiles cvsFiles;
  try {
    cvsFiles=scanFileSystem(clientEnvironment);
  }
 catch (  IOException ex) {
    throw new IOCommandException(ex);
  }
  if (isCheckThatUnedited()) {
    editors=true;
    final Requests requests=new Requests(CommandRequest.EDITORS,clientEnvironment);
    addFileRequests(cvsFiles,requests,clientEnvironment);
    requests.addLocalPathDirectoryRequest();
    addArgumentRequests(requests);
    final EditEditorsMessageParser parser=new EditEditorsMessageParser(clientEnvironment.getCvsRoot().getUser());
    parser.registerListeners(listenerRegistry);
    try {
      final RangeProgressViewer editorsProgressViewer=new RangeProgressViewer(progressViewer,0.0,0.5);
      requestProcessor.processRequests(requests,FileStateRequestsProgressHandler.create(editorsProgressViewer,cvsFiles));
    }
  finally {
      parser.unregisterListeners(listenerRegistry);
    }
    if (parser.isFilesEdited()) {
      final String message=JavaCvsSrcBundle.message("cannot.edit.files.they.are.edited.error.message");
      eventSender.notifyMessageListeners(message.getBytes(),true,false);
      return false;
    }
    progressViewer=new RangeProgressViewer(progressViewer,0.5,1.0);
  }
  editors=false;
  final Requests requests=new Requests(CommandRequest.NOOP,clientEnvironment);
  addFileRequests(cvsFiles,requests,clientEnvironment);
  requests.addArgumentRequest(isCheckThatUnedited(),"-c");
  requests.addArgumentRequest(isForceEvenIfEdited(),"-f");
  requests.addLocalPathDirectoryRequest();
  return requestProcessor.processRequests(requests,FileStateRequestsProgressHandler.create(progressViewer,cvsFiles));
}
