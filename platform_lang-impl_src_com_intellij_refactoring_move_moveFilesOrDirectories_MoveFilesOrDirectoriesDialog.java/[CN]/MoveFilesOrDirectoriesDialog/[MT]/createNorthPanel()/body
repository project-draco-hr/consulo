{
  myNameLabel=JBLabelDecorator.createJBLabelDecorator().setBold(true);
  myTargetDirectoryField=new TextFieldWithHistoryWithBrowseButton();
  final List<String> recentEntries=RecentsManager.getInstance(myProject).getRecentEntries(RECENT_KEYS);
  if (recentEntries != null) {
    myTargetDirectoryField.getChildComponent().setHistory(recentEntries);
  }
  final FileChooserDescriptor descriptor=FileChooserDescriptorFactory.createSingleFolderDescriptor();
  myTargetDirectoryField.addBrowseFolderListener(RefactoringBundle.message("select.target.directory"),RefactoringBundle.message("the.file.will.be.moved.to.this.directory"),myProject,descriptor,TextComponentAccessor.TEXT_FIELD_WITH_HISTORY_WHOLE_TEXT);
  final JTextField textField=myTargetDirectoryField.getChildComponent().getTextEditor();
  FileChooserFactory.getInstance().installFileCompletion(textField,descriptor,true,getDisposable());
  textField.getDocument().addDocumentListener(new DocumentAdapter(){
    @Override protected void textChanged(    DocumentEvent e){
      validateOKButton();
    }
  }
);
  myTargetDirectoryField.setTextFieldPreferredWidth(60);
  Disposer.register(getDisposable(),myTargetDirectoryField);
  String shortcutText=KeymapUtil.getFirstKeyboardShortcutText(ActionManager.getInstance().getAction(IdeActions.ACTION_CODE_COMPLETION));
  myCbSearchForReferences=new NonFocusableCheckBox(RefactoringBundle.message("search.for.references"));
  myCbSearchForReferences.setSelected(RefactoringSettings.getInstance().MOVE_SEARCH_FOR_REFERENCES_FOR_FILE);
  return FormBuilder.createFormBuilder().addComponent(myNameLabel).addLabeledComponent(RefactoringBundle.message("move.files.to.directory.label"),myTargetDirectoryField,UIUtil.LARGE_VGAP).addTooltip(RefactoringBundle.message("path.completion.shortcut",shortcutText)).addComponentToRightColumn(myCbSearchForReferences,UIUtil.LARGE_VGAP).getPanel();
}
