{
  PropertiesComponent.getInstance().setValue(MOVE_FILES_OPEN_IN_EDITOR,myOpenInEditorCb.isSelected(),true);
  RecentsManager.getInstance(myProject).registerRecentEntry(RECENT_KEYS,myTargetDirectoryField.getChildComponent().getText());
  RefactoringSettings.getInstance().MOVE_SEARCH_FOR_REFERENCES_FOR_FILE=myCbSearchForReferences.isSelected();
  if (DumbService.isDumb(myProject)) {
    Messages.showMessageDialog(myProject,"Move refactoring is not available while indexing is in progress","Indexing",null);
    return;
  }
  CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
    @Override public void run(){
      final Runnable action=new Runnable(){
        @Override public void run(){
          String directoryName=myTargetDirectoryField.getChildComponent().getText().replace(File.separatorChar,'/');
          try {
            myTargetDirectory=DirectoryUtil.mkdirs(PsiManager.getInstance(myProject),directoryName);
          }
 catch (          IncorrectOperationException e) {
          }
        }
      }
;
      DumbService.allowStartingDumbModeInside(DumbModePermission.MAY_START_MODAL,new Runnable(){
        @Override public void run(){
          ApplicationManager.getApplication().runWriteAction(action);
          if (myTargetDirectory == null) {
            CommonRefactoringUtil.showErrorMessage(getTitle(),RefactoringBundle.message("cannot.create.directory"),myHelpID,myProject);
            return;
          }
          myCallback.run(MoveFilesOrDirectoriesDialog.this);
        }
      }
);
    }
  }
,RefactoringBundle.message("move.title"),null);
}
