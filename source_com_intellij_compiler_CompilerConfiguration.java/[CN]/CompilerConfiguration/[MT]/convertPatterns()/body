{
  if (!needPatternConversion()) {
    return;
  }
  try {
    boolean ok=doConvertPatterns();
    if (!ok) {
      final String initialPatternString=patternsToString(getRegexpPatterns());
      final String message="The format of resource patterns has changed.\n" + "IDEA failed to convert existing regular expression patterns:\n" + initialPatternString + "\n"+ "Please enter pattern string in a new format.\n"+ "Each resource pattern may contain the following wildcards:\n"+ "? - one character\n"+ "* - zero or more characters\n"+ "! - negate the pattern (allowed only at the start of a pattern)\n"+ "Use ; (semicolon) to separate resource patterns;\n"+ "Escape the \"!\" character with a backslash (\"\\\").\n"+ "You might also need to modify template project settings.\n"+ "Press \"OK\" to accept entered patterns, \"Cancel\" to load default patterns in new format.";
      final String wildcardPatterns=Messages.showInputDialog(myProject,message,"Pattern Conversion",Messages.getWarningIcon(),initialPatternString,new InputValidator(){
        public boolean checkInput(        String inputString){
          return true;
        }
        public boolean canClose(        String inputString){
          final StringTokenizer tokenizer=new StringTokenizer(inputString,";",false);
          StringBuffer errMessage=new StringBuffer();
          while (tokenizer.hasMoreTokens()) {
            String pattern=tokenizer.nextToken();
            try {
              addWildcardResourcePattern(pattern);
            }
 catch (            PatternSyntaxException e) {
              errMessage.append("\n\n");
              errMessage.append(pattern);
              errMessage.append(": ");
              errMessage.append(e.getMessage());
            }
          }
          if (errMessage.length() > 0) {
            errMessage.insert(0,"The following resource patterns are malformed:");
            Messages.showErrorDialog(errMessage.toString(),"Malformed Resource Patterns");
            removeWildcardPatterns();
            return false;
          }
          return true;
        }
      }
);
      if (wildcardPatterns == null) {
        loadDefaultWildcardPatterns();
      }
    }
  }
  finally {
    myWildcardPatternsInitialized=true;
  }
}
