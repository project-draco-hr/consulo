{
  DefaultJDOMExternalizer.writeExternal(this,parentNode);
  if (myExcludeEntryDescriptions.size() > 0) {
    Element newChild=new Element(EXCLUDE_FROM_COMPILE);
    for (Iterator it=myExcludeEntryDescriptions.iterator(); it.hasNext(); ) {
      ExcludeEntryDescription description=(ExcludeEntryDescription)it.next();
      if (description.isFile()) {
        Element entry=new Element(FILE);
        entry.setAttribute(URL,description.getUrl());
        newChild.addContent(entry);
      }
 else {
        Element entry=new Element(DIRECTORY);
        entry.setAttribute(URL,description.getUrl());
        entry.setAttribute(INCLUDE_SUBDIRECTORIES,description.isIncludeSubdirectories() ? "true" : "false");
        newChild.addContent(entry);
      }
    }
    parentNode.addContent(newChild);
  }
  String[] patterns=getRegexpPatterns();
  final Element newChild=new Element(RESOURCE_EXTENSIONS);
  for (int idx=0; idx < patterns.length; idx++) {
    final String pattern=patterns[idx];
    final Element entry=new Element(ENTRY);
    entry.setAttribute(NAME,pattern);
    newChild.addContent(entry);
  }
  parentNode.addContent(newChild);
  if (myWildcardPatternsInitialized || !myWildcardPatterns.isEmpty()) {
    final Element wildcardPatterns=new Element(WILDCARD_RESOURCE_PATTERNS);
    for (Iterator<String> it=myWildcardPatterns.iterator(); it.hasNext(); ) {
      final String wildcardPattern=it.next();
      final Element entry=new Element(ENTRY);
      entry.setAttribute(NAME,wildcardPattern);
      wildcardPatterns.addContent(entry);
    }
    parentNode.addContent(wildcardPatterns);
  }
}
