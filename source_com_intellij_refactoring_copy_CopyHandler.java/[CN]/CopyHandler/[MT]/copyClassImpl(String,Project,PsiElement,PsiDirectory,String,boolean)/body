{
  if (copyClassName == null || copyClassName.length() == 0)   return;
  final boolean[] result=new boolean[]{false};
  Runnable command=new Runnable(){
    public void run(){
      final Runnable action=new Runnable(){
        public void run(){
          try {
            ChangeContextUtil.encodeContextInfo(psiElement.getNavigationElement(),true);
            PsiClass classCopy=(PsiClass)psiElement.getNavigationElement().copy();
            ChangeContextUtil.clearContextInfo(psiElement);
            classCopy.setName(copyClassName);
            PsiClass newClass=(PsiClass)targetDirectory.add(classCopy);
            ChangeContextUtil.decodeContextInfo(newClass,null,null);
            final PsiManager psiManager=PsiManager.getInstance(project);
            PsiReference[] refs=psiManager.getSearchHelper().findReferences(psiElement,new LocalSearchScope(newClass),true);
            for (int i=0; i < refs.length; i++) {
              final PsiReference ref=refs[i];
              if (!ref.getElement().isValid())               continue;
              ref.bindToElement(newClass);
            }
            updateSelectionInActiveProjectView(newClass,project,selectInActivePanel);
            EditorHelper.openInEditor(newClass);
            result[0]=true;
          }
 catch (          final IncorrectOperationException ex) {
            SwingUtilities.invokeLater(new Runnable(){
              public void run(){
                Messages.showMessageDialog(project,ex.getMessage(),"Error",Messages.getErrorIcon());
              }
            }
);
          }
        }
      }
;
      ApplicationManager.getApplication().runWriteAction(action);
    }
  }
;
  CommandProcessor processor=CommandProcessor.getInstance();
  processor.executeCommand(project,command,commandName,null);
  if (result[0]) {
    ToolWindowManager.getInstance(project).invokeLater(new Runnable(){
      public void run(){
        ToolWindowManager.getInstance(project).activateEditorComponent();
      }
    }
);
  }
}
