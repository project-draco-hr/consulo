{
  Set<AbstractVcs> usedVcses=new HashSet<AbstractVcs>();
  Map<VirtualFile,AbstractVcs> vcsMap=new HashMap<VirtualFile,AbstractVcs>();
  final ModuleManager moduleManager=ModuleManager.getInstance(myProject);
  for (  Module module : moduleManager.getModules()) {
    final VirtualFile[] files=ModuleRootManager.getInstance(module).getContentRoots();
    for (    VirtualFile file : files) {
      AbstractVcs contentRootVcs=myVcsManager.findVersioningVcs(file);
      if (contentRootVcs != null) {
        vcsMap.put(file,contentRootVcs);
      }
      usedVcses.add(contentRootVcs);
    }
  }
  if (usedVcses.size() == 1) {
    final AbstractVcs[] abstractVcses=usedVcses.toArray(new AbstractVcs[1]);
    final Module[] modules=moduleManager.getModules();
    final Set<String> contentRoots=new HashSet<String>();
    for (    Module module : modules) {
      final VirtualFile[] roots=ModuleRootManager.getInstance(module).getContentRoots();
      for (      VirtualFile root : roots) {
        contentRoots.add(root.getPath());
      }
    }
    if (abstractVcses[0] != null) {
      final List<VcsDirectoryMapping> vcsDirectoryMappings=new ArrayList<VcsDirectoryMapping>(myVcsManager.getDirectoryMappings());
      for (Iterator<VcsDirectoryMapping> iterator=vcsDirectoryMappings.iterator(); iterator.hasNext(); ) {
        final VcsDirectoryMapping mapping=iterator.next();
        if (!contentRoots.contains(mapping.getDirectory())) {
          iterator.remove();
        }
      }
      myVcsManager.setAutoDirectoryMapping("",abstractVcses[0].getName());
      for (      VcsDirectoryMapping mapping : vcsDirectoryMappings) {
        myVcsManager.removeDirectoryMapping(mapping);
      }
      myVcsManager.cleanupMappings();
    }
  }
 else   if (tryMapPieces) {
    for (    Map.Entry<VirtualFile,AbstractVcs> entry : vcsMap.entrySet()) {
      myVcsManager.setAutoDirectoryMapping(entry.getKey().getPath(),entry.getValue() == null ? "" : entry.getValue().getName());
    }
    myVcsManager.cleanupMappings();
  }
}
