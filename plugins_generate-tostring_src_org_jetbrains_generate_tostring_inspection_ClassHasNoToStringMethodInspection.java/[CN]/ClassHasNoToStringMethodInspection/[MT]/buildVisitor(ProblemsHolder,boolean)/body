{
  return new JavaElementVisitor(){
    @Override public void visitClass(    PsiClass clazz){
      if (log.isDebugEnabled())       log.debug("checkClass: clazz=" + clazz);
      if (clazz == null || clazz.getName() == null)       return;
      PsiAdapter psi=PsiAdapterFactory.getPsiAdapter();
      if (excludeException && PsiAdapter.isExceptionClass(clazz)) {
        log.debug("This class is an exception");
        return;
      }
      if (excludeDeprecated && clazz.isDeprecated()) {
        log.debug("Class is deprecated");
        return;
      }
      if (excludeEnum && clazz.isEnum()) {
        log.debug("Class is an enum");
        return;
      }
      if (excludeAbstract && clazz.hasModifierProperty(PsiModifier.ABSTRACT)) {
        log.debug("Class is abstract");
        return;
      }
      if (StringUtil.isNotEmpty(excludeClassNames)) {
        String name=clazz.getName();
        if (name != null && name.matches(excludeClassNames)) {
          log.debug("This class is excluded");
          return;
        }
      }
      PsiField[] fields=clazz.getFields();
      if (fields.length == 0) {
        log.debug("Class does not have any fields");
        return;
      }
      Project project=clazz.getProject();
      fields=GenerateToStringUtils.filterAvailableFields(project,psi,clazz,GenerateToStringContext.getConfig().getFilterPattern());
      PsiMethod[] methods=null;
      if (GenerateToStringContext.getConfig().isEnableMethods()) {
        methods=GenerateToStringUtils.filterAvailableMethods(psi,clazz,GenerateToStringContext.getConfig().getFilterPattern());
      }
      if (fields == null && methods == null)       return;
 else       if (Math.max(fields == null ? 0 : fields.length,methods == null ? 0 : methods.length) == 0)       return;
      PsiMethod toStringMethod=psi.findMethodByName(clazz,"toString");
      if (toStringMethod == null) {
        if (log.isDebugEnabled())         log.debug("Class does not overwrite toString() method: " + clazz.getQualifiedName());
        PsiIdentifier element=clazz.getNameIdentifier();
        if (element != null) {
          holder.registerProblem(element,"Class '" + clazz.getName() + "' does not overwrite toString() method",ProblemHighlightType.GENERIC_ERROR_OR_WARNING,fix);
        }
      }
    }
  }
;
}
