{
  return new JavaElementVisitor(){
    @Override public void visitClass(    PsiClass clazz){
      if (log.isDebugEnabled())       log.debug("checkClass: clazz=" + clazz);
      PsiIdentifier nameIdentifier=clazz.getNameIdentifier();
      if (nameIdentifier == null || clazz.getName() == null)       return;
      PsiAdapter psi=PsiAdapterFactory.getPsiAdapter();
      if (excludeException && InheritanceUtil.isInheritor(clazz,CommonClassNames.JAVA_LANG_THROWABLE)) {
        log.debug("This class is an exception");
        return;
      }
      if (excludeDeprecated && clazz.isDeprecated()) {
        log.debug("Class is deprecated");
        return;
      }
      if (excludeEnum && clazz.isEnum()) {
        log.debug("Class is an enum");
        return;
      }
      if (excludeAbstract && clazz.hasModifierProperty(PsiModifier.ABSTRACT)) {
        log.debug("Class is abstract");
        return;
      }
      if (excludeTestCode && TestFrameworks.getInstance().isTestClass(clazz)) {
        log.debug("Class is test class");
        return;
      }
      if (StringUtil.isNotEmpty(excludeClassNames)) {
        String name=clazz.getName();
        if (name != null && name.matches(excludeClassNames)) {
          log.debug("This class is excluded");
          return;
        }
      }
      PsiField[] fields=clazz.getFields();
      if (fields.length == 0) {
        log.debug("Class does not have any fields");
        return;
      }
      Project project=clazz.getProject();
      fields=GenerateToStringUtils.filterAvailableFields(project,psi,clazz,GenerateToStringContext.getConfig().getFilterPattern());
      PsiMethod[] methods=null;
      if (GenerateToStringContext.getConfig().isEnableMethods()) {
        methods=GenerateToStringUtils.filterAvailableMethods(psi,clazz,GenerateToStringContext.getConfig().getFilterPattern());
      }
      if (fields == null && methods == null)       return;
 else       if (Math.max(fields == null ? 0 : fields.length,methods == null ? 0 : methods.length) == 0)       return;
      final PsiMethod[] toStringMethods=clazz.findMethodsByName("toString",false);
      for (      PsiMethod method : toStringMethods) {
        final PsiParameterList parameterList=method.getParameterList();
        if (parameterList.getParametersCount() == 0) {
          return;
        }
      }
      final PsiMethod[] superMethods=clazz.findMethodsByName("toString",true);
      for (      PsiMethod method : superMethods) {
        final PsiParameterList parameterList=method.getParameterList();
        if (parameterList.getParametersCount() != 0) {
          continue;
        }
        if (method.hasModifierProperty(PsiModifier.FINAL)) {
          return;
        }
      }
      if (log.isDebugEnabled())       log.debug("Class does not override toString() method: " + clazz.getQualifiedName());
      holder.registerProblem(nameIdentifier,"Class '" + clazz.getName() + "' does not override 'toString()' method",ProblemHighlightType.GENERIC_ERROR_OR_WARNING,fix);
    }
  }
;
}
