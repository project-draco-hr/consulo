{
  final Document document=editor.getDocument();
  CharSequence text=document.getCharsSequence();
  final int caretOffset=editor.getCaretModel().getOffset();
  List<TemplateImpl> candidatesWithoutArgument=findMatchingTemplates(text,caretOffset,shortcutChar,templateSettings,false);
  int argumentOffset=passArgumentBack(text,caretOffset);
  String argument=null;
  if (argumentOffset >= 0) {
    argument=text.subSequence(argumentOffset,caretOffset).toString();
    if (argumentOffset > 0 && text.charAt(argumentOffset - 1) == ' ') {
      if (argumentOffset - 2 >= 0 && Character.isJavaIdentifierPart(text.charAt(argumentOffset - 2))) {
        argumentOffset--;
      }
    }
  }
  List<TemplateImpl> candidatesWithArgument=findMatchingTemplates(text,argumentOffset,shortcutChar,templateSettings,true);
  if (candidatesWithArgument.isEmpty() && candidatesWithoutArgument.isEmpty()) {
    return null;
  }
  candidatesWithoutArgument=filterApplicableCandidates(file,caretOffset,candidatesWithoutArgument);
  candidatesWithArgument=filterApplicableCandidates(file,argumentOffset,candidatesWithArgument);
  Map<TemplateImpl,String> candidate2Argument=new HashMap<TemplateImpl,String>();
  addToMap(candidate2Argument,candidatesWithoutArgument,null);
  addToMap(candidate2Argument,candidatesWithArgument,argument);
  return candidate2Argument;
}
