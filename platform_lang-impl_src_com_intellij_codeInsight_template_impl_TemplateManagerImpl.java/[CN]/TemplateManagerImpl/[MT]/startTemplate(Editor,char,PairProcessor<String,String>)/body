{
  final Document document=editor.getDocument();
  PsiFile file=PsiUtilBase.getPsiFileInEditor(editor,myProject);
  if (file == null)   return false;
  TemplateSettings templateSettings=TemplateSettings.getInstance();
  CharSequence text=document.getCharsSequence();
  final int caretOffset=editor.getCaretModel().getOffset();
  List<TemplateImpl> candidatesWithoutArgument=findMatchingTemplates(text,caretOffset,shortcutChar,templateSettings,false);
  int argumentOffset=passArgumentBack(text,caretOffset);
  String argument=null;
  if (argumentOffset >= 0) {
    argument=text.subSequence(argumentOffset,caretOffset).toString();
    if (argumentOffset > 0 && text.charAt(argumentOffset - 1) == ' ') {
      if (argumentOffset - 2 >= 0 && Character.isJavaIdentifierPart(text.charAt(argumentOffset - 2))) {
        argumentOffset--;
      }
    }
  }
  List<TemplateImpl> candidatesWithArgument=findMatchingTemplates(text,argumentOffset,shortcutChar,templateSettings,true);
  if (candidatesWithArgument.isEmpty() && candidatesWithoutArgument.isEmpty())   return false;
  CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
    public void run(){
      PsiDocumentManager.getInstance(myProject).commitDocument(document);
    }
  }
,"",null);
  candidatesWithoutArgument=filterApplicableCandidates(file,caretOffset,candidatesWithoutArgument);
  candidatesWithArgument=filterApplicableCandidates(file,argumentOffset,candidatesWithArgument);
  Map<TemplateImpl,String> candidate2Argument=new HashMap<TemplateImpl,String>();
  addToMap(candidate2Argument,candidatesWithoutArgument,null);
  addToMap(candidate2Argument,candidatesWithArgument,argument);
  if (candidate2Argument.isEmpty()) {
    return false;
  }
  if (!FileDocumentManager.getInstance().requestWriting(editor.getDocument(),myProject)) {
    return false;
  }
  if (candidate2Argument.size() == 1) {
    TemplateImpl template=candidate2Argument.keySet().iterator().next();
    if (candidatesWithoutArgument.size() == 1) {
      int templateStart=caretOffset - template.getKey().length();
      startTemplateWithPrefix(editor,template,templateStart,processor,null);
    }
 else {
      int templateStart=argumentOffset - template.getKey().length();
      startTemplateWithPrefix(editor,template,templateStart,processor,argument);
    }
  }
 else {
    ListTemplatesHandler.showTemplatesLookup(myProject,editor,candidate2Argument);
  }
  return true;
}
