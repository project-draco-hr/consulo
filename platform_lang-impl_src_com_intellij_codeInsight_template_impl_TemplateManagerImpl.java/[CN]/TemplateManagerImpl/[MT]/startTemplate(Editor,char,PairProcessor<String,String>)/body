{
  final Document document=editor.getDocument();
  PsiFile file=PsiUtilBase.getPsiFileInEditor(editor,myProject);
  if (file == null)   return false;
  TemplateSettings templateSettings=TemplateSettings.getInstance();
  CharSequence text=document.getCharsSequence();
  final int caretOffset=editor.getCaretModel().getOffset();
  String key=null;
  List<TemplateImpl> candidates=Collections.emptyList();
  for (int i=templateSettings.getMaxKeyLength(); i >= 1; i--) {
    int wordStart=caretOffset - i;
    if (wordStart < 0) {
      continue;
    }
    key=text.subSequence(wordStart,caretOffset).toString();
    if (Character.isJavaIdentifierStart(key.charAt(0))) {
      if (wordStart > 0 && Character.isJavaIdentifierPart(text.charAt(wordStart - 1))) {
        continue;
      }
    }
    candidates=templateSettings.collectMatchingCandidates(key,shortcutChar);
    if (!candidates.isEmpty())     break;
  }
  if (candidates.isEmpty())   return false;
  CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
    public void run(){
      PsiDocumentManager.getInstance(myProject).commitDocument(document);
    }
  }
,"",null);
  candidates=filterApplicableCandidates(file,caretOffset - key.length(),candidates);
  if (candidates.isEmpty()) {
    return false;
  }
  if (!FileDocumentManager.getInstance().requestWriting(editor.getDocument(),myProject)) {
    return false;
  }
  if (candidates.size() == 1) {
    TemplateImpl template=candidates.get(0);
    startTemplateWithPrefix(editor,template,processor);
  }
 else {
    ListTemplatesHandler.showTemplatesLookup(myProject,editor,key,candidates);
  }
  return true;
}
