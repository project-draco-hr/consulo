{
  if (!(refEntity instanceof RefMethod)) {
    return null;
  }
  final RefMethod refMethod=(RefMethod)refEntity;
  final Boolean alreadyProcessed=refMethod.getUserData(ALWAYS_CONSTANT);
  if (alreadyProcessed != null && alreadyProcessed.booleanValue()) {
    return null;
  }
  if (!(refMethod.getElement() instanceof PsiMethod)) {
    return null;
  }
  final PsiMethod method=(PsiMethod)refMethod.getElement();
  if (method.getBody() == null) {
    return null;
  }
  if (!alwaysReturnsConstant(method)) {
    return null;
  }
  final Set<RefMethod> siblingMethods=MethodInheritanceUtils.calculateSiblingMethods(refMethod);
  for (  RefMethod siblingMethod : siblingMethods) {
    final PsiMethod siblingPsiMethod=(PsiMethod)siblingMethod.getElement();
    if (method.getBody() != null && !alwaysReturnsConstant(siblingPsiMethod)) {
      return null;
    }
  }
  final List<ProblemDescriptor> out=new ArrayList<ProblemDescriptor>();
  for (  RefMethod siblingRefMethod : siblingMethods) {
    final PsiMethod siblingMethod=(PsiMethod)siblingRefMethod.getElement();
    final PsiIdentifier identifier=siblingMethod.getNameIdentifier();
    if (identifier == null) {
      continue;
    }
    out.add(manager.createProblemDescriptor(identifier,InspectionGadgetsBundle.message("method.return.always.constant.problem.descriptor"),(LocalQuickFix[])null,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
    siblingRefMethod.putUserData(ALWAYS_CONSTANT,Boolean.valueOf(true));
  }
  return out.toArray(new ProblemDescriptor[out.size()]);
}
