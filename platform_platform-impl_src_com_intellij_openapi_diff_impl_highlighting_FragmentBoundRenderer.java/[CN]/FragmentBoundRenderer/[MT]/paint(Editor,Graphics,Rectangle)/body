{
  g.setColor(getColor());
  int y=r.y;
  final int width=((EditorEx)editor).getGutterComponentEx().getWidth();
  final int editorWidth=editor.getScrollingModel().getVisibleArea().width;
  myShoeneLine.ensureLastX(editorWidth + width + width);
  if (((EditorImpl)editor).isMirrored()) {
    List<Pair<Integer,Integer>> points=myShoeneLine.getPoints();
    int i=0;
    for (; i < points.size(); i++) {
      Pair<Integer,Integer> integerIntegerPair=points.get(i);
      if (integerIntegerPair.getFirst() - width >= editorWidth) {
        break;
      }
    }
    i=i == 0 ? 0 : i - 1;
    points=points.subList(i,points.size());
    drawCurved(g,0,r.y,TornLineParams.ourDark,points,width + editorWidth,true,width);
    g.setColor(getColor().darker());
    drawCurved(g,0,r.y,TornLineParams.ourLight,points,width + editorWidth,true,width);
    int j=points.size() - 1;
    final int finalX=width + editorWidth + width;
    for (; j > 0; j--) {
      if (points.get(j).getFirst() >= finalX)       break;
    }
    j=j == 0 ? 0 : j - 1;
    myOffsetsConsumer.consume(points.get(j).getSecond());
  }
 else {
    List<Pair<Integer,Integer>> points=myShoeneLine.getPoints();
    drawCurved(g,0,r.y,TornLineParams.ourDark,points,0,false,0);
    g.setColor(getColor().darker());
    drawCurved(g,0,r.y,TornLineParams.ourLight,points,0,false,0);
    int i=getLastPointInBeforeGutter(width,points);
    myOffsetsConsumer.consume(points.get(i).getSecond());
  }
}
