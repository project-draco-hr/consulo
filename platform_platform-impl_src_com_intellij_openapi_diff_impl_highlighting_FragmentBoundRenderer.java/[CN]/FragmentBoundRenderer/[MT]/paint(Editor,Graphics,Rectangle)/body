{
  g.setColor(getColor());
  int y=r.y;
  final int width=((EditorEx)editor).getGutterComponentEx().getWidth();
  final int editorWidth=editor.getScrollingModel().getVisibleArea().width;
  myShoeneLine.ensureLastX(editorWidth + width + width);
  if (((EditorImpl)editor).isMirrored()) {
    List<Pair<Integer,Integer>> points=myShoeneLine.getPoints();
    int i=0;
    for (; i < points.size(); i++) {
      Pair<Integer,Integer> integerIntegerPair=points.get(i);
      if (integerIntegerPair.getFirst() - width >= editorWidth) {
        break;
      }
    }
    i=i == 0 ? 0 : i - 1;
    points=points.subList(i,points.size());
    drawCurved(g,0,r.y,4,points,width + editorWidth,true,width);
    g.setColor(getColor().darker());
    drawCurved(g,0,r.y,3,points,width + editorWidth,true,width);
  }
 else {
    List<Pair<Integer,Integer>> points=myShoeneLine.getPoints();
    drawCurved(g,0,r.y,4,points,0,false,0);
    g.setColor(getColor().darker());
    drawCurved(g,0,r.y,3,points,0,false,0);
  }
}
