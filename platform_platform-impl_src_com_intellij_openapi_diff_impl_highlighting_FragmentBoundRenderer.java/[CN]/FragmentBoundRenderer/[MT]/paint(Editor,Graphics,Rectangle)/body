{
  final Graphics gr=g.create();
  try {
    ((Graphics2D)gr).setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
    gr.setColor(getColor());
    final int width=((EditorEx)editor).getGutterComponentEx().getWidth();
    final int editorWidth=editor.getScrollingModel().getVisibleArea().width;
    myShoeneLine.ensureLastX(editorWidth + width + width);
    if (((EditorImpl)editor).isMirrored()) {
      List<Couple<Integer>> points=myShoeneLine.getPoints();
      int i=0;
      for (; i < points.size(); i++) {
        Couple<Integer> integerIntegerPair=points.get(i);
        if (integerIntegerPair.getFirst() - width >= editorWidth) {
          break;
        }
      }
      i=i == 0 ? 0 : i - 1;
      points=points.subList(i,points.size());
      drawCurved(gr,0,r.y,TornLineParams.ourDark,points,width + editorWidth,true,width);
      gr.setColor(getColor().darker());
      drawCurved(gr,0,r.y,TornLineParams.ourLight,points,width + editorWidth,true,width);
      int j=points.size() - 1;
      final int finalX=width + editorWidth;
      for (; j > 0; j--) {
        if (points.get(j).getFirst() >= finalX)         break;
      }
      myOffsetsConsumer.consume(points.get(j).getSecond());
    }
 else {
      List<Couple<Integer>> points=myShoeneLine.getPoints();
      drawCurved(gr,0,r.y,TornLineParams.ourDark,points,0,false,0);
      gr.setColor(getColor().darker());
      drawCurved(gr,0,r.y,TornLineParams.ourLight,points,0,false,0);
      myOffsetsConsumer.consume(points.get(0).getSecond());
    }
  }
  finally {
    gr.dispose();
  }
}
