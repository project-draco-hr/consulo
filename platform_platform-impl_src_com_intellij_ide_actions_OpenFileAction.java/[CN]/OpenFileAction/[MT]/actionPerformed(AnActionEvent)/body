{
  @Nullable final Project project=PlatformDataKeys.PROJECT.getData(e.getDataContext());
  if (project == null && PlatformProjectOpenProcessor.getInstanceIfItExists() == null) {
    return;
  }
  final FileTypeManager fileTypeManager=FileTypeManager.getInstance();
  ArrayList<FileType> list=new ArrayList<FileType>();
  for (  FileType ft : fileTypeManager.getRegisteredFileTypes()) {
    if (fileTypeManager.getAssociatedExtensions(ft).length > 0 && (ft instanceof ProjectFileType || !ft.isReadOnly())) {
      list.add(ft);
    }
  }
  Collections.sort(list,new Comparator<FileType>(){
    public int compare(    final FileType o1,    final FileType o2){
      return o1.getName().compareTo(o2.getName());
    }
  }
);
  final FileChooserDescriptor descriptor=FileChooserDescriptorFactory.createMultipleFilesNoJarsDescriptor();
  descriptor.setTitle(IdeBundle.message("title.open.file"));
  final String lastFilePath=project != null ? getLastFilePath(project) : null;
  final VirtualFile toSelect=lastFilePath == null ? null : LocalFileSystem.getInstance().findFileByPath(lastFilePath);
  FileChooser.chooseFilesWithSlideEffect(descriptor,project,toSelect,new Consumer<VirtualFile[]>(){
    @Override public void consume(    final VirtualFile[] files){
      doOpenFile(project,files);
    }
  }
);
}
