{
  @Nullable final Project project=CommonDataKeys.PROJECT.getData(e.getDataContext());
  final boolean showFiles=project != null || PlatformProjectOpenProcessor.getInstanceIfItExists() != null;
  final FileChooserDescriptor descriptor=new OpenProjectFileChooserDescriptor(true){
    @Override public boolean isFileSelectable(    VirtualFile file){
      if (super.isFileSelectable(file)) {
        return true;
      }
      if (file.isDirectory()) {
        return false;
      }
      return showFiles && !FileElement.isArchive(file);
    }
    @Override public boolean isFileVisible(    VirtualFile file,    boolean showHiddenFiles){
      if (!file.isDirectory() && isFileSelectable(file)) {
        if (!showHiddenFiles && FileElement.isFileHidden(file))         return false;
        return true;
      }
      return super.isFileVisible(file,showHiddenFiles);
    }
    @Override public boolean isChooseMultiple(){
      return showFiles;
    }
  }
;
  descriptor.setTitle(showFiles ? "Open File or Project" : "Open Project");
  VirtualFile userHomeDir=null;
  if (SystemInfo.isUnix) {
    userHomeDir=VfsUtil.getUserHomeDir();
  }
  descriptor.putUserData(PathChooserDialog.PREFER_LAST_OVER_EXPLICIT,Boolean.TRUE);
  FileChooser.chooseFiles(descriptor,project,userHomeDir,new Consumer<List<VirtualFile>>(){
    @Override public void consume(    final List<VirtualFile> files){
      for (      VirtualFile file : files) {
        if (!descriptor.isFileSelectable(file)) {
          Messages.showInfoMessage(project,file.getPresentableUrl() + " contains no " + ApplicationNamesInfo.getInstance().getFullProductName()+ " project","Cannot Open Project");
          return;
        }
      }
      doOpenFile(project,files);
    }
  }
);
}
