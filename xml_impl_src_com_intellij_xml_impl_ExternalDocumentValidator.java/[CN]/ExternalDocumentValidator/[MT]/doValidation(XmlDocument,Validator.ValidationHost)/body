{
  final PsiFile containingFile=document.getContainingFile();
  if (containingFile == null) {
    return;
  }
  if (containingFile.getViewProvider() instanceof TemplateLanguageFileViewProvider) {
    return;
  }
  final FileType fileType=containingFile.getViewProvider().getVirtualFile().getFileType();
  if (fileType != XmlFileType.INSTANCE && fileType != XHtmlFileType.INSTANCE) {
    return;
  }
  for (  Language lang : containingFile.getViewProvider().getLanguages()) {
    if ("ANT".equals(lang.getID()))     return;
  }
  final XmlTag rootTag=document.getRootTag();
  if (rootTag == null)   return;
  String namespace=rootTag.getNamespace();
  if (XmlUtil.ANT_URI.equals(namespace) || "urn:ui:com.google.gwt.uibinder".equals(namespace))   return;
  final Project project=document.getProject();
  final InspectionProfile profile=InspectionProjectProfileManager.getInstance(project).getInspectionProfile();
  final LocalInspectionToolWrapper toolWrapper=(LocalInspectionToolWrapper)profile.getInspectionTool(CheckXmlFileWithXercesValidatorInspection.SHORT_NAME,containingFile);
  if (toolWrapper == null)   return;
  if (!profile.isToolEnabled(HighlightDisplayKey.find(CheckXmlFileWithXercesValidatorInspection.SHORT_NAME),containingFile))   return;
  SoftReference<ExternalDocumentValidator> validatorReference=project.getUserData(validatorInstanceKey);
  ExternalDocumentValidator validator=validatorReference != null ? validatorReference.get() : null;
  if (validator == null) {
    validator=new ExternalDocumentValidator();
    project.putUserData(validatorInstanceKey,new SoftReference<ExternalDocumentValidator>(validator));
  }
  validator.runJaxpValidation(document,host);
}
