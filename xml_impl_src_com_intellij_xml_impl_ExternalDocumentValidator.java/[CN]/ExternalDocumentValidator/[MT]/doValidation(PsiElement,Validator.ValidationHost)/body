{
  final PsiFile containingFile=context.getContainingFile();
  if (containingFile == null || (containingFile.getFileType() != StdFileTypes.XML && containingFile.getFileType() != StdFileTypes.XHTML)) {
    return;
  }
  for (  Language lang : containingFile.getViewProvider().getPrimaryLanguages()) {
    if ("ANT".equals(lang.getID()))     return;
  }
  final XmlDocument document=((XmlFile)containingFile).getDocument();
  final XmlTag rootTag=document != null ? document.getRootTag() : null;
  if (rootTag == null)   return;
  if (XmlUtil.ANT_URI.equals(rootTag.getNamespace()))   return;
  final Project project=context.getProject();
  final InspectionProfile profile=InspectionProjectProfileManager.getInstance(project).getInspectionProfile(containingFile);
  final LocalInspectionToolWrapper toolWrapper=(LocalInspectionToolWrapper)profile.getInspectionTool(CheckXmlFileWithXercesValidatorInspection.SHORT_NAME);
  if (toolWrapper == null)   return;
  if (!profile.isToolEnabled(HighlightDisplayKey.find(CheckXmlFileWithXercesValidatorInspection.SHORT_NAME)))   return;
  SoftReference<ExternalDocumentValidator> validatorReference=project.getUserData(validatorInstanceKey);
  ExternalDocumentValidator validator=validatorReference != null ? validatorReference.get() : null;
  if (validator == null) {
    validator=new ExternalDocumentValidator();
    project.putUserData(validatorInstanceKey,new SoftReference<ExternalDocumentValidator>(validator));
  }
  validator.runJaxpValidation((XmlElement)context,host);
}
