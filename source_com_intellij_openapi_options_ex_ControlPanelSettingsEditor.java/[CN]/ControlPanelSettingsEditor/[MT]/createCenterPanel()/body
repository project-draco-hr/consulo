{
  myPanel=new JPanel(new VerticalFlowLayout());
  for (int i=0; i < myGroups.length; i++) {
    ConfigurableGroup group=myGroups[i];
    myPanel.add(createGroupComponent(group,i));
  }
  myPanel.addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      try {
        if (e.getKeyCode() == KeyEvent.VK_ENTER) {
          myKeypressedConfigurable=getSelectedConfigurable();
          return;
        }
        int code=e.getKeyCode();
        if (code == KeyEvent.VK_UP || code == KeyEvent.VK_DOWN || code == KeyEvent.VK_RIGHT || code == KeyEvent.VK_LEFT) {
          if (getSelectedConfigurable() == null) {
            mySelectedColumn=0;
            mySelectedRow=0;
            mySelectedGroup=0;
            return;
          }
          int xShift=0;
          int yShift=0;
          if (code == KeyEvent.VK_UP) {
            yShift=-1;
          }
 else           if (code == KeyEvent.VK_DOWN) {
            yShift=1;
          }
 else           if (code == KeyEvent.VK_LEFT) {
            xShift=-1;
          }
 else {
            xShift=1;
          }
          int newColumn=mySelectedColumn + xShift;
          int newRow=mySelectedRow + yShift;
          int newGroup=mySelectedGroup;
          if (newColumn < 0)           newColumn=0;
          if (newColumn >= ICONS_PER_ROW)           newColumn=ICONS_PER_ROW - 1;
          int idx=newColumn + newRow * ICONS_PER_ROW;
          if (idx >= myGroups[newGroup].getConfigurables().length) {
            if (yShift > 0) {
              newRow=0;
              newGroup++;
              if (newGroup >= myGroups.length)               return;
              idx=newColumn + newRow * ICONS_PER_ROW;
              if (idx >= myGroups[newGroup].getConfigurables().length)               return;
            }
 else             if (xShift > 0) {
              return;
            }
          }
          if (yShift < 0 && idx < 0) {
            newGroup--;
            if (newGroup < 0)             return;
            int rowCount=getRowCount(myGroups[newGroup].getConfigurables().length);
            newRow=rowCount - 1;
            idx=newColumn + newRow * ICONS_PER_ROW;
            if (idx >= myGroups[newGroup].getConfigurables().length) {
              if (newRow <= 0)               return;
              newRow--;
            }
          }
          mySelectedColumn=newColumn;
          mySelectedRow=newRow;
          mySelectedGroup=newGroup;
          return;
        }
        myKeypressedConfigurable=ControlPanelMnemonicsUtil.getConfigurableFromMnemonic(e,myGroups);
      }
  finally {
        myPanel.repaint();
      }
    }
    public void keyReleased(    KeyEvent e){
      if (myKeypressedConfigurable != null) {
        e.consume();
        selectConfigurable(myKeypressedConfigurable);
        editConfigurable(myKeypressedConfigurable);
        myKeypressedConfigurable=null;
        myPanel.repaint();
      }
    }
  }
);
  JPanel panel=new JPanel(new GridBagLayout());
  panel.add(myPanel,new GridBagConstraints(0,0,1,1,1,1,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));
  JScrollPane scrollPane=ScrollPaneFactory.createScrollPane(panel);
  scrollPane.setBorder(null);
  return scrollPane;
}
