{
  super(session.getProject(),true);
  mySession=session;
  myEditorsProvider=editorsProvider;
  mySourcePosition=sourcePosition;
  setModal(false);
  setOKButtonText(XDebuggerBundle.message("xdebugger.button.evaluate"));
  setCancelButtonText(XDebuggerBundle.message("xdebugger.evaluate.dialog.close"));
  mySession.addSessionListener(new XDebugSessionAdapter(){
    @Override public void sessionStopped(){
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          close(CANCEL_EXIT_CODE);
        }
      }
);
    }
  }
,myDisposable);
  myTreePanel=new XDebuggerTreePanel(session.getProject(),editorsProvider,myDisposable,sourcePosition,XDebuggerActions.EVALUATE_DIALOG_TREE_POPUP_GROUP,((XDebugSessionImpl)session).getValueMarkers());
  myResultPanel=new JPanel(new BorderLayout());
  myResultPanel.add(new JLabel(XDebuggerBundle.message("xdebugger.evaluate.label.result")),BorderLayout.NORTH);
  myResultPanel.add(myTreePanel.getMainPanel(),BorderLayout.CENTER);
  myMainPanel=new JPanel(new BorderLayout());
  mySwitchModeAction=new SwitchModeAction();
  new AnAction(){
    @Override public void actionPerformed(    AnActionEvent e){
      doOKAction();
    }
  }
.registerCustomShortcutSet(new CustomShortcutSet(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,InputEvent.CTRL_DOWN_MASK)),getRootPane(),myDisposable);
  new AnAction(){
    @Override public void actionPerformed(    AnActionEvent e){
      IdeFocusManager.getInstance(mySession.getProject()).requestFocus(myTreePanel.getTree(),true);
    }
  }
.registerCustomShortcutSet(new CustomShortcutSet(KeyStroke.getKeyStroke(KeyEvent.VK_R,InputEvent.ALT_DOWN_MASK)),getRootPane(),myDisposable);
  myTreePanel.getTree().addTreeListener(new MyTreeListener());
  EvaluationMode mode=XDebuggerSettingsManager.getInstance().getGeneralSettings().getEvaluationDialogMode();
  myIsCodeFragmentEvaluationSupported=evaluator.isCodeFragmentEvaluationSupported();
  if (mode == EvaluationMode.CODE_FRAGMENT && !myIsCodeFragmentEvaluationSupported) {
    mode=EvaluationMode.EXPRESSION;
  }
  if (mode == EvaluationMode.EXPRESSION) {
    text=new XExpressionImpl(StringUtil.replace(text.getExpression(),"\n"," "),text.getLanguage(),text.getCustomInfo());
  }
  switchToMode(mode,text);
  init();
}
