{
  Matcher matcher=PATTERN.matcher(text);
  StringBuffer buff=new StringBuffer();
  StringBuffer dummy=new StringBuffer();
  int last=0;
  while (matcher.find()) {
    String propText=matcher.group();
    String propName=matcher.group(1);
    int tempLast=last;
    last=matcher.start() + propText.length();
    if (escapeString != null) {
      int pos=matcher.start();
      if (pos > escapeString.length() && text.substring(pos - escapeString.length(),pos).equals(escapeString)) {
        buff.append(text.substring(tempLast,pos - escapeString.length()));
        buff.append(propText);
        matcher.appendReplacement(dummy,"");
        continue;
      }
    }
    String resolved=doResolveProperty(propName,project,additionalProperties);
    if (resolved == null)     resolved=propText;
    if (!resolved.equals(propText) && !resolutionStack.contains(propName)) {
      resolutionStack.push(propName);
      resolved=doResolve(resolved,project,additionalProperties,escapeString,resolutionStack);
      resolutionStack.pop();
    }
    matcher.appendReplacement(buff,Matcher.quoteReplacement(resolved));
  }
  matcher.appendTail(buff);
  return buff.toString();
}
