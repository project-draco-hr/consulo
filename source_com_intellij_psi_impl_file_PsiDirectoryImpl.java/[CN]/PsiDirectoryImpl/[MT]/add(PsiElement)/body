{
  checkAdd(element);
  if (element instanceof PsiDirectory) {
    LOG.error("not implemented");
    return null;
  }
 else   if (element instanceof PsiFile) {
    PsiFile originalFile=(PsiFile)element;
    try {
      VirtualFile newVFile;
      final PsiDocumentManager psiDocumentManager=PsiDocumentManager.getInstance(myManager.getProject());
      if (originalFile instanceof PsiFileImpl) {
        newVFile=myFile.createChildData(myManager,originalFile.getName());
        String text=originalFile.getText();
        final PsiFile psiFile=getManager().findFile(newVFile);
        final Document document=psiFile == null ? null : psiDocumentManager.getDocument(psiFile);
        final FileDocumentManager fileDocumentManager=FileDocumentManager.getInstance();
        if (document != null) {
          document.setText(text);
          fileDocumentManager.saveDocument(document);
        }
 else {
          String lineSeparator=fileDocumentManager.getLineSeparator(newVFile,getProject());
          if (!lineSeparator.equals("\n")) {
            text=StringUtil.convertLineSeparators(text,lineSeparator);
          }
          final Writer writer=LoadTextUtil.getWriter(getProject(),newVFile,myManager,text,-1);
          try {
            writer.write(text);
          }
  finally {
            writer.close();
          }
        }
      }
 else {
        byte[] storedContents=((PsiBinaryFileImpl)originalFile).getStoredContents();
        if (storedContents != null) {
          newVFile=myFile.createChildData(myManager,originalFile.getName());
          newVFile.setBinaryContent(storedContents);
        }
 else {
          newVFile=VfsUtil.copyFile(null,originalFile.getVirtualFile(),myFile);
        }
      }
      psiDocumentManager.commitAllDocuments();
      PsiFile newFile=myManager.findFile(newVFile);
      if (newFile instanceof PsiFileImpl) {
        ChangeUtil.encodeInformation((TreeElement)SourceTreeToPsiMap.psiElementToTree(newFile));
        PsiUtil.updatePackageStatement(newFile);
        ChangeUtil.decodeInformation((TreeElement)SourceTreeToPsiMap.psiElementToTree(newFile));
      }
      return newFile;
    }
 catch (    IOException e) {
      throw new IncorrectOperationException(e.toString(),e);
    }
  }
 else   if (element instanceof PsiClass) {
    final String name=((PsiClass)element).getName();
    if (name != null) {
      final PsiClass newClass=createClass(name);
      return newClass.replace(element);
    }
 else {
      LOG.error("not implemented");
      return null;
    }
  }
 else {
    LOG.assertTrue(false);
    return null;
  }
}
