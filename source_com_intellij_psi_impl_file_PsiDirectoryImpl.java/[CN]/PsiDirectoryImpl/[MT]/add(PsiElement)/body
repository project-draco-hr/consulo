{
  checkAdd(element);
  if (element instanceof PsiDirectory) {
    LOG.error("not implemented");
    return null;
  }
 else   if (element instanceof PsiFile) {
    PsiFile originalFile=(PsiFile)element;
    try {
      VirtualFile newVFile;
      if (originalFile instanceof com.intellij.psi.impl.source.PsiFileImpl) {
        newVFile=myFile.createChildData(myManager,originalFile.getName());
        String lineSeparator=FileDocumentManager.getInstance().getLineSeparator(newVFile,getProject());
        String text=originalFile.getText();
        if (!lineSeparator.equals("\n")) {
          text=StringUtil.convertLineSeparators(text,lineSeparator);
        }
        Writer writer=newVFile.getWriter(myManager);
        writer.write(text);
        writer.close();
      }
 else {
        byte[] storedContents=((PsiBinaryFileImpl)originalFile).getStoredContents();
        if (storedContents != null) {
          newVFile=myFile.createChildData(myManager,originalFile.getName());
          OutputStream out=newVFile.getOutputStream(myManager);
          out.write(storedContents);
          out.close();
        }
 else {
          newVFile=VfsUtil.copyFile(null,originalFile.getVirtualFile(),myFile);
        }
      }
      PsiDocumentManager.getInstance(myManager.getProject()).commitAllDocuments();
      PsiFile newFile=myManager.findFile(newVFile);
      if (newFile instanceof com.intellij.psi.impl.source.PsiFileImpl) {
        ChangeUtil.encodeInformation((TreeElement)SourceTreeToPsiMap.psiElementToTree(newFile));
        PsiUtil.updatePackageStatement(newFile);
        ChangeUtil.decodeInformation((TreeElement)SourceTreeToPsiMap.psiElementToTree(newFile));
      }
      return newFile;
    }
 catch (    IOException e) {
      throw new IncorrectOperationException(e.toString());
    }
  }
 else   if (element instanceof PsiClass) {
    if (element.getParent() instanceof PsiJavaFile) {
      PsiJavaFile newFile=(PsiJavaFile)add(element.getParent());
      PsiClass[] classes=((PsiJavaFile)element.getParent()).getClasses();
      PsiClass[] newClasses=newFile.getClasses();
      LOG.assertTrue(classes.length == newClasses.length);
      for (int i=0; i < classes.length; i++) {
        if (classes[i] == element)         return newClasses[i];
      }
      LOG.assertTrue(false);
      return null;
    }
 else {
      LOG.error("not implemented");
      return null;
    }
  }
 else {
    LOG.assertTrue(false);
    return null;
  }
}
