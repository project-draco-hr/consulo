{
  try {
    committables=filterCommittables(committables);
  }
 catch (  SVNException e) {
    exception.add(new VcsException(e));
    return;
  }
  final List<String> paths=ObjectsConvertor.convert(committables,new Convertor<File,String>(){
    @Override public String convert(    File o){
      return o.getPath();
    }
  }
);
  final IdeaSvnkitBasedAuthenticationCallback authenticationCallback=new IdeaSvnkitBasedAuthenticationCallback(mySvnVcs);
  try {
    final SvnBindClient client=new SvnBindClient(SvnApplicationSettings.getInstance().getCommandLinePath());
    client.setAuthenticationCallback(authenticationCallback);
    client.setHandler(new IdeaCommitHandler(ProgressManager.getInstance().getProgressIndicator()));
    final long revision=client.commit(ArrayUtil.toStringArray(paths),comment,false,false);
    reportCommittedRevisions(feedback,String.valueOf(revision));
  }
 catch (  ClientException e) {
    exception.add(new VcsException(e));
  }
 finally {
    authenticationCallback.reset();
  }
}
