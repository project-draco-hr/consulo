{
  final Set<File> childrenOfSomebody=new HashSet<File>();
  new AbstractFilterChildren<File>(){
    @Override protected void sortAscending(    List<File> list){
      Collections.sort(list);
    }
    @Override protected boolean isAncestor(    File parent,    File child){
      final boolean isAncestor=FileUtil.isAncestor(parent,child,false);
      if (isAncestor) {
        childrenOfSomebody.add(child);
      }
      return isAncestor;
    }
  }
.doFilter(new ArrayList<File>(committables));
  if (!childrenOfSomebody.isEmpty()) {
    final HashSet<File> result=new HashSet<File>(committables);
    result.removeAll(childrenOfSomebody);
    final SvnCommandLineStatusClient statusClient=new SvnCommandLineStatusClient(mySvnVcs.getProject());
    for (    File file : childrenOfSomebody) {
      try {
        final SVNStatus status=statusClient.doStatus(file,false);
        if (status != null && !SVNStatusType.STATUS_NONE.equals(status.getContentsStatus()) && !SVNStatusType.STATUS_UNVERSIONED.equals(status.getContentsStatus())) {
          result.add(file);
        }
      }
 catch (      SVNException e) {
        LOG.info(e);
        throw e;
      }
    }
    return result;
  }
  return committables;
}
