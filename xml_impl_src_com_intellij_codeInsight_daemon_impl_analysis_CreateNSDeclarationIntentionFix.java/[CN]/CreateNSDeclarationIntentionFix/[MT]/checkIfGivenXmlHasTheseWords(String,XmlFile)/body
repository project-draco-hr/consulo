{
  if (name == null || name.isEmpty())   return true;
  final List<String> list=StringUtil.getWordsIn(name);
  final String[] words=ArrayUtil.toStringArray(list);
  final boolean[] wordsFound=new boolean[words.length];
  final int[] wordsFoundCount=new int[1];
  IdTableBuilding.ScanWordProcessor wordProcessor=new IdTableBuilding.ScanWordProcessor(){
    @Override public void run(    final CharSequence chars,    @Nullable char[] charsArray,    int start,    int end){
      if (wordsFoundCount[0] == words.length)       return;
      final int foundWordLen=end - start;
      Next:       for (int i=0; i < words.length; ++i) {
        final String localName=words[i];
        if (wordsFound[i] || localName.length() != foundWordLen)         continue;
        for (int j=0; j < localName.length(); ++j) {
          if (chars.charAt(start + j) != localName.charAt(j))           continue Next;
        }
        wordsFound[i]=true;
        wordsFoundCount[0]++;
        break;
      }
    }
  }
;
  final CharSequence contents=tldFileByUri.getViewProvider().getContents();
  IdTableBuilding.scanWords(wordProcessor,contents,0,contents.length());
  return wordsFoundCount[0] == words.length;
}
