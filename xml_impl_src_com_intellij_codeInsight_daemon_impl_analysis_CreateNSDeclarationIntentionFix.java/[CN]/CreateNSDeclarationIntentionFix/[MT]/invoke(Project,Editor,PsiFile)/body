{
  if (!CodeInsightUtilBase.prepareFileForWrite(file))   return;
  String[] namespaces;
  final Set<String> set=XmlExtension.getExtension((XmlFile)file).guessUnboundNamespaces(myElement,(XmlFile)file);
  namespaces=set.toArray(new String[set.size()]);
  Arrays.sort(namespaces);
  runActionOverSeveralAttributeValuesAfterLettingUserSelectTheNeededOne(namespaces,project,new StringToAttributeProcessor(){
    public void doSomethingWithGivenStringToProduceXmlAttributeNowPlease(    @NotNull final String namespace) throws IncorrectOperationException {
      if (StringUtil.isEmpty(myNamespacePrefix)) {
        final XmlExtension extension=XmlExtension.getExtension(myFile);
        final XmlFile xmlFile=extension.getContainingFile(myElement);
        final String prefixByNamespace=ExtendedTagInsertHandler.getPrefixByNamespace(xmlFile,namespace);
        if (prefixByNamespace != null) {
          ExtendedTagInsertHandler.qualifyWithPrefix(prefixByNamespace,myElement);
          return;
        }
      }
      final int offset=editor.getCaretModel().getOffset();
      final RangeMarker marker=editor.getDocument().createRangeMarker(offset,offset);
      final XmlExtension extension=XmlExtension.getExtension((XmlFile)file);
      extension.insertNamespaceDeclaration((XmlFile)file,editor,Collections.singleton(namespace),myNamespacePrefix,new XmlExtension.Runner<String,IncorrectOperationException>(){
        public void run(        final String param) throws IncorrectOperationException {
          if (namespace.length() > 0) {
            editor.getCaretModel().moveToOffset(marker.getStartOffset());
          }
        }
      }
);
    }
  }
,getTitle(),this,editor);
}
