{
  final Set<String> supports=ContainerUtil.map2Set(Extensions.getExtensions(LanguageInjectorSupport.EP_NAME),new Function<LanguageInjectorSupport,String>(){
    public String fun(    final LanguageInjectorSupport support){
      return support.getId();
    }
  }
);
  for (  String supportId : myInjectionConfiguration.getAllInjectorIds()) {
    if (!supports.contains(supportId)) {
      for (      BaseInjection injection : myInjectionConfiguration.getInjections(supportId)) {
        if (injection.acceptsPsiElement(host)) {
          final Language language=InjectedLanguage.findLanguageById(injection.getInjectedLanguageId());
          if (language == null)           continue;
          final InjectedLanguage injectedLanguage=InjectedLanguage.create(injection.getInjectedLanguageId(),injection.getPrefix(),injection.getSuffix(),false);
          final List<Trinity<PsiLanguageInjectionHost,InjectedLanguage,TextRange>> list=new ArrayList<Trinity<PsiLanguageInjectionHost,InjectedLanguage,TextRange>>();
          for (          TextRange range : injection.getInjectedArea(host)) {
            list.add(Trinity.create((PsiLanguageInjectionHost)host,injectedLanguage,range));
          }
          XmlLanguageInjector.registerInjection(language,list,host.getContainingFile(),registrar);
          break;
        }
      }
    }
  }
}
