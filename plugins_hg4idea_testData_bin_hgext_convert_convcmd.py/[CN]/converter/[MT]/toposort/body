def toposort(self, parents, sortmode):
    'Return an ordering such that every uncommitted changeset is\n        preceeded by all its uncommitted ancestors.'

    def mapchildren(parents):
        "Return a (children, roots) tuple where 'children' maps parent\n            revision identifiers to children ones, and 'roots' is the list of\n            revisions without parents. 'parents' must be a mapping of revision\n            identifier to its parents ones.\n            "
        visit = parents.keys()
        seen = set()
        children = {}
        roots = []
        while visit:
            n = visit.pop(0)
            if (n in seen):
                continue
            seen.add(n)
            children.setdefault(n, [])
            hasparent = False
            for p in parents[n]:
                if (not (p in self.map)):
                    visit.append(p)
                    hasparent = True
                children.setdefault(p, []).append(n)
            if (not hasparent):
                roots.append(n)
        return (children, roots)

    def makebranchsorter():
        'If the previously converted revision has a child in the\n            eligible revisions list, pick it. Return the list head\n            otherwise. Branch sort attempts to minimize branch\n            switching, which is harmful for Mercurial backend\n            compression.\n            '
        prev = [None]

        def picknext(nodes):
            next = nodes[0]
            for n in nodes:
                if (prev[0] in parents[n]):
                    next = n
                    break
            prev[0] = next
            return next
        return picknext

    def makesourcesorter():
        'Source specific sort.'
        keyfn = (lambda n: self.commitcache[n].sortkey)

        def picknext(nodes):
            return sorted(nodes, key=keyfn)[0]
        return picknext

    def makedatesorter():
        'Sort revisions by date.'
        dates = {}

        def getdate(n):
            if (n not in dates):
                dates[n] = util.parsedate(self.commitcache[n].date)
            return dates[n]

        def picknext(nodes):
            return min([(getdate(n), n) for n in nodes])[1]
        return picknext
    if (sortmode == 'branchsort'):
        picknext = makebranchsorter()
    elif (sortmode == 'datesort'):
        picknext = makedatesorter()
    elif (sortmode == 'sourcesort'):
        picknext = makesourcesorter()
    else:
        raise util.Abort((_('unknown sort mode: %s') % sortmode))
    (children, actives) = mapchildren(parents)
    s = []
    pendings = {}
    while actives:
        n = picknext(actives)
        actives.remove(n)
        s.append(n)
        for c in children.get(n, []):
            if (c not in pendings):
                pendings[c] = [p for p in parents[c] if (p not in self.map)]
            try:
                pendings[c].remove(n)
            except ValueError:
                raise util.Abort((_('cycle detected between %s and %s') % (recode(c), recode(n))))
            if (not pendings[c]):
                actives.insert(0, c)
                pendings[c] = None
    if (len(s) != len(parents)):
        raise util.Abort(_('not all revisions were sorted'))
    return s
