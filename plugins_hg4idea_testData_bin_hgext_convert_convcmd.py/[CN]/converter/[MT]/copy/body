def copy(self, rev):
    commit = self.commitcache[rev]
    changes = self.source.getchanges(rev)
    if isinstance(changes, basestring):
        if (changes == SKIPREV):
            dest = SKIPREV
        else:
            dest = self.map[changes]
        self.map[rev] = dest
        return
    (files, copies) = changes
    pbranches = []
    if commit.parents:
        for prev in commit.parents:
            if (prev not in self.commitcache):
                self.cachecommit(prev)
            pbranches.append((self.map[prev], self.commitcache[prev].branch))
    self.dest.setbranch(commit.branch, pbranches)
    try:
        parents = self.splicemap[rev].replace(',', ' ').split()
        self.ui.status((_('spliced in %s as parents of %s\n') % (parents, rev)))
        parents = [self.map.get(p, p) for p in parents]
    except KeyError:
        parents = [b[0] for b in pbranches]
    newnode = self.dest.putcommit(files, copies, parents, commit, self.source, self.map)
    self.source.converted(rev, newnode)
    self.map[rev] = newnode
