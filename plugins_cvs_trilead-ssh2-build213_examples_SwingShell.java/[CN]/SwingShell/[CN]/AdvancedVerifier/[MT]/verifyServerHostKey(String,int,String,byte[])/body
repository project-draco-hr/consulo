{
  final String host=hostname;
  final String algo=serverHostKeyAlgorithm;
  String message;
  int result=database.verifyHostkey(hostname,serverHostKeyAlgorithm,serverHostKey);
switch (result) {
case KnownHosts.HOSTKEY_IS_OK:
    return true;
case KnownHosts.HOSTKEY_IS_NEW:
  message="Do you want to accept the hostkey (type " + algo + ") from "+ host+ " ?\n";
break;
case KnownHosts.HOSTKEY_HAS_CHANGED:
message="WARNING! Hostkey for " + host + " has changed!\nAccept anyway?\n";
break;
default :
throw new IllegalStateException();
}
String hexFingerprint=KnownHosts.createHexFingerprint(serverHostKeyAlgorithm,serverHostKey);
String bubblebabbleFingerprint=KnownHosts.createBubblebabbleFingerprint(serverHostKeyAlgorithm,serverHostKey);
message+="Hex Fingerprint: " + hexFingerprint + "\nBubblebabble Fingerprint: "+ bubblebabbleFingerprint;
int choice=JOptionPane.showConfirmDialog(loginFrame,message);
if (choice == JOptionPane.YES_OPTION) {
String hashedHostname=KnownHosts.createHashedHostname(hostname);
database.addHostkey(new String[]{hashedHostname},serverHostKeyAlgorithm,serverHostKey);
try {
KnownHosts.addHostkeyToFile(new File(knownHostPath),new String[]{hashedHostname},serverHostKeyAlgorithm,serverHostKey);
}
 catch (IOException ignore) {
}
return true;
}
if (choice == JOptionPane.CANCEL_OPTION) {
throw new Exception("The user aborted the server hostkey verification.");
}
return false;
}
