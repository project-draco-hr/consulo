{
  LOG.assertTrue(!PsiDocumentManager.getInstance(project).hasUncommitedDocuments());
  PsiMethod method;
  if (expr != null) {
    method=Util.getContainingMethod(expr);
  }
 else {
    method=Util.getContainingMethod(localVar);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("expression:" + expr);
  }
  myProject=project;
  if (expr == null && localVar == null) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("selected.block.should.represent.an.expression"));
    RefactoringMessageUtil.showErrorMessage(REFACTORING_NAME,message,HelpID.INTRODUCE_PARAMETER,myProject);
    return false;
  }
  if (method == null) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("is.not.supported.in.the.current.context",REFACTORING_NAME));
    RefactoringMessageUtil.showErrorMessage(REFACTORING_NAME,message,HelpID.INTRODUCE_PARAMETER,myProject);
    return false;
  }
  if (!method.isWritable()) {
    if (!RefactoringMessageUtil.checkReadOnlyStatus(project,method))     return false;
  }
  final PsiType typeByExpression=!invokedOnDeclaration ? RefactoringUtil.getTypeByExpressionWithExpectedType(expr) : null;
  if (!invokedOnDeclaration && typeByExpression == null) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("type.of.the.selected.expression.cannot.be.determined"));
    RefactoringMessageUtil.showErrorMessage(REFACTORING_NAME,message,HelpID.INTRODUCE_PARAMETER,myProject);
    return false;
  }
  if (!invokedOnDeclaration && typeByExpression == PsiType.VOID) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("selected.expression.has.void.type"));
    RefactoringMessageUtil.showErrorMessage(REFACTORING_NAME,message,HelpID.INTRODUCE_PARAMETER,project);
    return false;
  }
  final List<PsiMethod> validEnclosingMethods=getEnclosingMethods(method);
  if (validEnclosingMethods.size() > 1 && !ApplicationManager.getApplication().isUnitTestMode()) {
    final EnclosingMethodSelectionDialog dialog=new EnclosingMethodSelectionDialog(project,validEnclosingMethods);
    dialog.show();
    if (!dialog.isOK())     return false;
    method=dialog.getSelectedMethod();
  }
  final PsiMethod methodToSearchFor=SuperMethodWarningUtil.checkSuperMethod(method,RefactoringBundle.message("to.refactor"));
  if (methodToSearchFor == null) {
    return false;
  }
  if (!methodToSearchFor.isWritable()) {
    if (!RefactoringMessageUtil.checkReadOnlyStatus(project,methodToSearchFor))     return false;
  }
  PsiExpression[] occurences;
  if (expr != null) {
    occurences=CodeInsightUtil.findExpressionOccurrences(method,expr);
  }
 else {
    occurences=CodeInsightUtil.findReferenceExpressions(method,localVar);
  }
  if (editor != null) {
    RefactoringUtil.highlightOccurences(myProject,occurences,editor);
  }
  ArrayList localVars=new ArrayList();
  ArrayList classMemberRefs=new ArrayList();
  ArrayList params=new ArrayList();
  if (expr != null) {
    Util.analyzeExpression(expr,localVars,classMemberRefs,params);
  }
  @NonNls String parameterName="anObject";
  boolean replaceAllOccurences=true;
  boolean isDeleteLocalVariable=true;
  if (expr instanceof PsiReferenceExpression) {
    PsiElement resolved=((PsiReferenceExpression)expr).resolve();
    if (resolved instanceof PsiLocalVariable) {
      localVar=(PsiLocalVariable)resolved;
    }
  }
  if (!ApplicationManager.getApplication().isUnitTestMode()) {
    final String propName=localVar != null ? CodeStyleManager.getInstance(myProject).variableNameToPropertyName(localVar.getName(),VariableKind.LOCAL_VARIABLE) : null;
    final PsiType initializerType=IntroduceParameterProcessor.getInitializerType(null,expr,localVar);
    TypeSelectorManager typeSelectorManager=(expr != null ? new TypeSelectorManagerImpl(project,initializerType,expr,occurences) : new TypeSelectorManagerImpl(project,initializerType,occurences));
    new IntroduceParameterDialog(myProject,classMemberRefs,occurences.length,localVar,expr,new NameSuggestionsGenerator(){
      public SuggestedNameInfo getSuggestedNameInfo(      PsiType type){
        return CodeStyleManager.getInstance(myProject).suggestVariableName(VariableKind.PARAMETER,propName,expr,type);
      }
      public Pair<LookupItemPreferencePolicy,Set<LookupItem>> completeVariableName(      String prefix,      PsiType type){
        LinkedHashSet<LookupItem> set=new LinkedHashSet<LookupItem>();
        LookupItemPreferencePolicy policy=CompletionUtil.completeVariableNameForRefactoring(myProject,set,prefix,type,VariableKind.PARAMETER);
        return new Pair<LookupItemPreferencePolicy,Set<LookupItem>>(policy,set);
      }
    }
,typeSelectorManager,methodToSearchFor,method).show();
  }
 else {
    new IntroduceParameterProcessor(myProject,method,methodToSearchFor,expr,expr,localVar,isDeleteLocalVariable,parameterName,replaceAllOccurences,IntroduceParameterRefactoring.REPLACE_FIELDS_WITH_GETTERS_NONE,false,null).run();
  }
  return true;
}
