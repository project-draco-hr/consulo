{
  HighlightManager highlightManager=HighlightManager.getInstance(project);
  EditorColorsManager manager=EditorColorsManager.getInstance();
  TextAttributes attributes=manager.getGlobalScheme().getAttributes(EditorColors.SEARCH_RESULT_ATTRIBUTES);
  TextAttributes writeAttributes=manager.getGlobalScheme().getAttributes(EditorColors.WRITE_SEARCH_RESULT_ATTRIBUTES);
  setupFindModel(project);
  ReadWriteAccessDetector detector=null;
  for (  ReadWriteAccessDetector accessDetector : Extensions.getExtensions(ReadWriteAccessDetector.EP_NAME)) {
    if (accessDetector.isReadWriteAccessible(element)) {
      detector=accessDetector;
      break;
    }
  }
  if (detector != null) {
    List<PsiReference> readRefs=new ArrayList<PsiReference>();
    List<PsiReference> writeRefs=new ArrayList<PsiReference>();
    for (    PsiReference ref : refs) {
      if (detector.isWriteAccess(element,ref)) {
        writeRefs.add(ref);
      }
 else {
        readRefs.add(ref);
      }
    }
    doHighlightRefs(highlightManager,editor,readRefs,attributes,clearHighlights);
    doHighlightRefs(highlightManager,editor,writeRefs,writeAttributes,clearHighlights);
  }
 else {
    doHighlightRefs(highlightManager,editor,refs,attributes,clearHighlights);
  }
  PsiElement identifier=getNameIdentifier(element);
  if (identifier != null && PsiUtilBase.isUnderPsiRoot(file,identifier)) {
    TextAttributes nameAttributes=attributes;
    if (element instanceof PsiVariable && ((PsiVariable)element).getInitializer() != null) {
      nameAttributes=writeAttributes;
    }
    doHighlightElements(highlightManager,editor,new PsiElement[]{identifier},nameAttributes,clearHighlights);
  }
 else   if (element instanceof PsiKeyword) {
    doHighlightElements(highlightManager,editor,new PsiElement[]{element},attributes,clearHighlights);
  }
}
