{
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  SelectionModel selectionModel=editor.getSelectionModel();
  if (file == null && !selectionModel.hasSelection()) {
    selectionModel.selectWordAtCaret(false);
  }
  if (file == null || selectionModel.hasSelection()) {
    doRangeHighlighting(editor,project);
    return;
  }
  for (  HighlightUsagesHandlerFactory factory : Extensions.getExtensions(HighlightUsagesHandlerFactory.EP_NAME)) {
    final HighlightUsagesHandlerBase handler=factory.createHighlightUsagesHandler(editor,file);
    if (handler != null) {
      handler.highlightUsages();
      return;
    }
  }
  PsiElement target=getTargetElement(editor,file);
  PsiElement[] targets=null;
  if (target == null) {
    PsiReference ref=TargetElementUtilBase.findReference(editor,editor.getCaretModel().getOffset());
    if (ref instanceof PsiPolyVariantReference) {
      ResolveResult[] results=((PsiPolyVariantReference)ref).multiResolve(false);
      if (results.length > 0) {
        targets=new PsiElement[results.length];
        for (int i=0; i < results.length; ++i) {
          targets[i]=results[i].getElement();
        }
      }
    }
  }
 else {
    targets=new PsiElement[]{target};
  }
  if (targets == null) {
    if (file.findElementAt(editor.getCaretModel().getOffset()) instanceof PsiWhiteSpace)     return;
    selectionModel.selectWordAtCaret(false);
    String selection=selectionModel.getSelectedText();
    LOG.assertTrue(selection != null);
    for (int i=0; i < selection.length(); i++) {
      if (!Character.isJavaIdentifierPart(selection.charAt(i))) {
        selectionModel.removeSelection();
        return;
      }
    }
    doRangeHighlighting(editor,project);
    selectionModel.removeSelection();
    return;
  }
  createHighlightAction(project,file,targets,editor).run();
}
