{
  if (type instanceof PsiClassType) {
    block.accept(new JavaRecursiveElementVisitor(){
      @Override public void visitReferenceExpression(      PsiReferenceExpression expression){
        visitElement(expression);
      }
      @Override public void visitThrowStatement(      PsiThrowStatement statement){
        super.visitThrowStatement(statement);
        PsiClassType[] exceptionTypes=ExceptionUtil.getUnhandledExceptions(statement,block);
        for (        final PsiClassType actualType : exceptionTypes) {
          if (type.isAssignableFrom(actualType) && typeFilter.accept(actualType)) {
            PsiExpression psiExpression=statement.getException();
            if (psiExpression instanceof PsiReferenceExpression) {
              PsiReferenceExpression referenceExpression=(PsiReferenceExpression)psiExpression;
              if (!refs.contains(referenceExpression))               refs.add(referenceExpression);
            }
 else             if (psiExpression instanceof PsiNewExpression) {
              PsiJavaCodeReferenceElement ref=((PsiNewExpression)psiExpression).getClassReference();
              if (ref != null && !refs.contains(ref))               refs.add(ref);
            }
 else {
              otherOccurrences.add(statement.getException());
            }
          }
        }
      }
      @Override public void visitMethodCallExpression(      PsiMethodCallExpression expression){
        super.visitMethodCallExpression(expression);
        PsiReference reference=expression.getMethodExpression().getReference();
        if (reference == null || refs.contains(reference))         return;
        PsiClassType[] exceptionTypes=ExceptionUtil.getUnhandledExceptions(expression,block);
        for (        final PsiClassType actualType : exceptionTypes) {
          if (type.isAssignableFrom(actualType) && typeFilter.accept(actualType)) {
            refs.add(reference);
            break;
          }
        }
      }
      @Override public void visitNewExpression(      PsiNewExpression expression){
        super.visitNewExpression(expression);
        PsiJavaCodeReferenceElement classReference=expression.getClassOrAnonymousClassReference();
        if (classReference == null || refs.contains(classReference))         return;
        PsiClassType[] exceptionTypes=ExceptionUtil.getUnhandledExceptions(expression,block);
        for (        PsiClassType actualType : exceptionTypes) {
          if (type.isAssignableFrom(actualType) && typeFilter.accept(actualType)) {
            refs.add(classReference);
            break;
          }
        }
      }
    }
);
  }
}
