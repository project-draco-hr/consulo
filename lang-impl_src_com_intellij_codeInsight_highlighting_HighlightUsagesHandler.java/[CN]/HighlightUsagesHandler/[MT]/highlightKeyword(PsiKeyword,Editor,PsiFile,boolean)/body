{
  Project project=target.getProject();
  String targetText=target.getText();
  PsiElement parent=target.getParent();
  if (PsiKeyword.TRY.equals(targetText)) {
    if (!(parent instanceof PsiTryStatement)) {
      return EMPTY_HIGHLIGHT_RUNNABLE;
    }
    PsiTryStatement tryStatement=(PsiTryStatement)parent;
    final PsiClassType[] psiClassTypes=ExceptionUtil.collectUnhandledExceptions(tryStatement.getTryBlock(),tryStatement.getTryBlock());
    return createExceptionChoosingRunnable(project,psiClassTypes,tryStatement.getTryBlock(),target,editor,file,ANY_TYPE,clearHighlights);
  }
  if (PsiKeyword.CATCH.equals(targetText)) {
    if (!(parent instanceof PsiCatchSection)) {
      return EMPTY_HIGHLIGHT_RUNNABLE;
    }
    PsiTryStatement tryStatement=((PsiCatchSection)parent).getTryStatement();
    final PsiParameter param=((PsiCatchSection)parent).getParameter();
    if (param == null)     return EMPTY_HIGHLIGHT_RUNNABLE;
    final PsiParameter[] catchBlockParameters=tryStatement.getCatchBlockParameters();
    final PsiClassType[] allThrownExceptions=ExceptionUtil.collectUnhandledExceptions(tryStatement.getTryBlock(),tryStatement.getTryBlock());
    TypeFilter filter=new TypeFilter(){
      public boolean accept(      PsiType type){
        for (        PsiParameter parameter : catchBlockParameters) {
          boolean isAssignable=parameter.getType().isAssignableFrom(type);
          if (parameter != param) {
            if (isAssignable)             return false;
          }
 else {
            return isAssignable;
          }
        }
        return false;
      }
    }
;
    ArrayList<PsiClassType> filtered=new ArrayList<PsiClassType>();
    for (    PsiClassType type : allThrownExceptions) {
      if (filter.accept(type))       filtered.add(type);
    }
    return createExceptionChoosingRunnable(project,filtered.toArray(new PsiClassType[filtered.size()]),tryStatement.getTryBlock(),target,editor,file,filter,clearHighlights);
  }
  if (PsiKeyword.THROWS.equals(targetText)) {
    PsiElement grand=parent.getParent();
    if (!(grand instanceof PsiMethod))     return EMPTY_HIGHLIGHT_RUNNABLE;
    PsiMethod method=(PsiMethod)grand;
    if (method.getBody() == null)     return EMPTY_HIGHLIGHT_RUNNABLE;
    final PsiClassType[] psiClassTypes=ExceptionUtil.collectUnhandledExceptions(method.getBody(),method.getBody());
    return createExceptionChoosingRunnable(project,psiClassTypes,method.getBody(),target,editor,file,ANY_TYPE,clearHighlights);
  }
  if (PsiKeyword.RETURN.equals(targetText) || PsiKeyword.THROW.equals(targetText)) {
    if (!(parent instanceof PsiReturnStatement) && !(parent instanceof PsiThrowStatement))     return EMPTY_HIGHLIGHT_RUNNABLE;
    PsiMethod method=PsiTreeUtil.getParentOfType(target,PsiMethod.class);
    if (method == null)     return EMPTY_HIGHLIGHT_RUNNABLE;
    PsiCodeBlock body=method.getBody();
    try {
      ControlFlow flow=ControlFlowFactory.getInstance(project).getControlFlow(body,LocalsOrMyInstanceFieldsControlFlowPolicy.getInstance(),false);
      List<PsiStatement> exitStatements=new ArrayList<PsiStatement>();
      ControlFlowUtil.findExitPointsAndStatements(flow,0,flow.getSize(),new IntArrayList(),exitStatements,new Class[]{PsiReturnStatement.class,PsiBreakStatement.class,PsiContinueStatement.class,PsiThrowStatement.class,PsiExpressionStatement.class});
      if (!exitStatements.contains(parent))       return EMPTY_HIGHLIGHT_RUNNABLE;
      return new DoHighlightExitPointsRunnable(project,editor,exitStatements.toArray(new PsiElement[exitStatements.size()]),clearHighlights);
    }
 catch (    AnalysisCanceledException e) {
      return EMPTY_HIGHLIGHT_RUNNABLE;
    }
  }
  if (PsiKeyword.EXTENDS.equals(targetText) || PsiKeyword.IMPLEMENTS.equals(targetText)) {
    return highlightOverridingMethodsRunnable(target,clearHighlights,editor);
  }
  return null;
}
