{
  final int expectedSize=myRevisionsAfterRename.size();
  final List<CommitHashPlusParents> hashesWithParents=new ArrayList<CommitHashPlusParents>(3);
  Consumer<CommitHashPlusParents> consumer=new Consumer<CommitHashPlusParents>(){
    @Override public void consume(    CommitHashPlusParents gitFileRevision){
      hashesWithParents.add(gitFileRevision);
    }
  }
;
  GitHistoryUtils.hashesWithParents(myProject,bfilePath,consumer);
  assertEquals(hashesWithParents.size(),expectedSize);
  for (Iterator hit=hashesWithParents.iterator(), myIt=myRevisionsAfterRename.iterator(); hit.hasNext(); ) {
    CommitHashPlusParents chpp=(CommitHashPlusParents)hit.next();
    GitTestRevision rev=(GitTestRevision)myIt.next();
    assertEquals(chpp.getHash(),rev.myHash);
    assertEqualHashes(Arrays.asList(chpp.getParents()),Arrays.asList(rev.myParents));
  }
}
