{
  return new BaseInspectionVisitor(){
    @Override public void visitTypeDefinition(    GrTypeDefinition typeDefinition){
      final GrMethod[] methods=typeDefinition.getGroovyMethods();
      Map<String,GrMethod> getters=new HashMap<String,GrMethod>();
      for (      GrMethod method : methods) {
        final String methodName=method.getName();
        if (!GroovyPropertyUtils.isGetterName(methodName))         continue;
        final String propertyName=GroovyPropertyUtils.getPropertyNameByGetterName(methodName,true);
        final GrMethod otherGetter=getters.get(propertyName);
        if (otherGetter != null && !methodName.equals(otherGetter.getName())) {
          registerError(otherGetter.getNameIdentifierGroovy(),otherGetter.getName(),methodName);
          registerError(method.getNameIdentifierGroovy(),methodName,otherGetter.getName());
        }
 else {
          getters.put(propertyName,method);
        }
      }
    }
  }
;
}
