{
  final PsiElementPattern.Capture<PsiElement> everywhere=PlatformPatterns.psiElement();
  registrar.extendBasicCompletion(everywhere).withId(LEGACY).withProvider(new CompletionProvider<LookupElement,CompletionParameters>(){
    public void addCompletions(    @NotNull final CompletionParameters parameters,    final MatchingContext matchingContext,    @NotNull final CompletionResultSet<LookupElement> result){
      CompletionContext context=parameters.getPosition().getUserData(CompletionContext.COMPLETION_CONTEXT_KEY);
      final PsiFile file=parameters.getOriginalFile();
      final int startOffset=context.startOffset;
      final PsiElement lastElement=file.findElementAt(startOffset - 1);
      PsiElement insertedElement=parameters.getPosition();
      CompletionData completionData=CompletionUtil.getCompletionDataByElement(lastElement,file,startOffset);
      result.setPrefixMatcher(completionData == null ? CompletionData.findPrefixStatic(insertedElement,startOffset) : completionData.findPrefix(insertedElement,startOffset));
      if (completionData == null) {
        completionData=CompletionUtil.getCompletionDataByElement(lastElement,file,startOffset);
      }
      if (completionData == null)       return;
      final Set<LookupItem> lookupSet=new LinkedHashSet<LookupItem>();
      final PsiReference ref=insertedElement.getContainingFile().findReferenceAt(context.offset);
      if (ref != null) {
        completionData.completeReference(ref,lookupSet,context,insertedElement,result.getPrefixMatcher(),context.file,context.offset);
      }
      if (lookupSet.isEmpty() || !CodeInsightUtil.isAntFile(file)) {
        final Set<CompletionVariant> keywordVariants=new HashSet<CompletionVariant>();
        completionData.addKeywordVariants(keywordVariants,context,insertedElement);
        CompletionData.completeKeywordsBySet(lookupSet,keywordVariants,context,insertedElement,result.getPrefixMatcher(),context.file);
      }
      result.addAllElements(lookupSet);
    }
  }
);
}
