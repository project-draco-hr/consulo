{
  Module[] modules=ModuleManager.getInstance(myContext.getProject()).getModules();
  List<ProcessingItem> items=new ArrayList<ProcessingItem>();
  for (  Module module : modules) {
    AndroidFacet facet=FacetManager.getInstance(module).getFacetByType(AndroidFacet.ID);
    if (facet != null && !facet.getConfiguration().LIBRARY_PROJECT) {
      final VirtualFile dexOutputDir=getOutputDirectoryForDex(module);
      Collection<VirtualFile> files;
      if (shouldRunProguard(facet,myContext)) {
        final VirtualFile obfuscatedSourcesJar=dexOutputDir.findChild(AndroidProguardCompiler.PROGUARD_OUTPUT_JAR_NAME);
        if (obfuscatedSourcesJar == null) {
          myContext.addMessage(CompilerMessageCategory.INFORMATION,"Dex won't be launched for module " + module.getName() + " because file "+ AndroidProguardCompiler.PROGUARD_OUTPUT_JAR_NAME+ "doesn't exist",null,-1,-1);
          continue;
        }
        files=Collections.singleton(obfuscatedSourcesJar);
      }
 else {
        CompilerModuleExtension extension=CompilerModuleExtension.getInstance(module);
        VirtualFile outputDir=extension.getCompilerOutputPath();
        if (outputDir == null) {
          myContext.addMessage(CompilerMessageCategory.INFORMATION,"Dex won't be launched for module " + module.getName() + " because it doesn't contain compiled files",null,-1,-1);
          continue;
        }
        files=new HashSet<VirtualFile>();
        addModuleOutputDir(files,outputDir);
        files.addAll(AndroidRootUtil.getExternalLibraries(module));
        for (        VirtualFile file : AndroidRootUtil.getDependentModules(module,outputDir)) {
          if (file.isDirectory()) {
            addModuleOutputDir(files,file);
          }
 else {
            files.add(file);
          }
        }
        VirtualFile outputDirForTests=extension.getCompilerOutputPathForTests();
        if (outputDirForTests != null) {
          addModuleOutputDir(files,outputDirForTests);
        }
      }
      final AndroidFacetConfiguration configuration=facet.getConfiguration();
      final AndroidPlatform platform=configuration.getAndroidPlatform();
      if (platform == null) {
        myContext.addMessage(CompilerMessageCategory.ERROR,AndroidBundle.message("android.compilation.error.specify.platform",module.getName()),null,-1,-1);
        continue;
      }
      items.add(new DexItem(module,dexOutputDir,platform.getTarget(),files));
    }
  }
  return items.toArray(new ProcessingItem[items.size()]);
}
