{
  Module[] modules=ModuleManager.getInstance(myContext.getProject()).getModules();
  List<ProcessingItem> items=new ArrayList<ProcessingItem>();
  for (  Module module : modules) {
    AndroidFacet facet=FacetManager.getInstance(module).getFacetByType(AndroidFacet.ID);
    if (facet != null && !facet.getConfiguration().LIBRARY_PROJECT) {
      CompilerModuleExtension extension=CompilerModuleExtension.getInstance(module);
      VirtualFile outputDir=extension.getCompilerOutputPath();
      if (outputDir != null) {
        AndroidFacetConfiguration configuration=facet.getConfiguration();
        AndroidPlatform platform=configuration.getAndroidPlatform();
        if (platform == null) {
          myContext.addMessage(CompilerMessageCategory.ERROR,AndroidBundle.message("android.compilation.error.specify.platform",module.getName()),null,-1,-1);
          continue;
        }
        Set<VirtualFile> files=new HashSet<VirtualFile>();
        addModuleOutputDir(files,outputDir);
        files.addAll(AndroidRootUtil.getExternalLibraries(module,platform.getLibrary()));
        for (        VirtualFile file : AndroidRootUtil.getDependentModules(module,outputDir)) {
          addModuleOutputDir(files,file);
        }
        VirtualFile outputDirForTests=extension.getCompilerOutputPathForTests();
        if (outputDirForTests != null) {
          addModuleOutputDir(files,outputDirForTests);
        }
        outputDir=getOutputDirectoryForDex(module);
        items.add(new DexItem(module,outputDir,platform.getTarget(),files,Collections.<String>emptySet()));
      }
    }
  }
  return items.toArray(new ProcessingItem[items.size()]);
}
