{
  Project project=getProject(element);
  final DocumentationComponent component=new DocumentationComponent(this);
  final JBPopup hint=JBPopupFactory.getInstance().createComponentPopupBuilder(component,component).setRequestFocusCondition(project,NotLookupOrSearchCondition.INSTANCE).setProject(project).addListener(updateProcessor).addUserData(updateProcessor).setForceHeavyweight(heavyWeight).setDimensionServiceKey(myProject,JAVADOC_LOCATION_AND_SIZE,false).setResizable(true).setMovable(true).setTitle(getTitle(element)).setCancelCallback(new Computable<Boolean>(){
    public Boolean compute(){
      if (fromQuickSearch()) {
        ((ChooseByNameBase.JPanelProvider)myPreviouslyFocused.getParent()).unregisterHint();
      }
      Disposer.dispose(component);
      myEditor=null;
      myPreviouslyFocused=null;
      myParameterInfoController=null;
      return Boolean.TRUE;
    }
  }
).createPopup();
  AbstractPopup oldHint=(AbstractPopup)getDocInfoHint();
  if (oldHint != null) {
    DocumentationComponent oldComponent=(DocumentationComponent)oldHint.getComponent();
    PsiElement element1=oldComponent.getElement();
    if (Comparing.equal(element,element1)) {
      if (requestFocus) {
        component.getComponent().requestFocus();
      }
      return oldHint;
    }
    oldHint.cancel();
  }
  component.setHint(hint);
  fetchDocInfo(getDefaultCollector(element,originalElement),component);
  myDocInfoHintRef=new WeakReference<JBPopup>(hint);
  myPreviouslyFocused=WindowManagerEx.getInstanceEx().getFocusedComponent(project);
  if (fromQuickSearch()) {
    ((ChooseByNameBase.JPanelProvider)myPreviouslyFocused.getParent()).registerHint(hint);
  }
  return hint;
}
