{
  component.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
  final PsiElement psiElement=component.getElement();
  final PsiManager manager=PsiManager.getInstance(getProject(psiElement));
  if (url.startsWith(PSI_ELEMENT_PROTOCOL)) {
    final String refText=url.substring(PSI_ELEMENT_PROTOCOL.length());
    DocumentationProvider provider=getProviderFromElement(psiElement);
    if (provider != null) {
      final PsiElement targetElement=provider.getDocumentationElementForLink(manager,refText,psiElement);
      if (targetElement != null) {
        fetchDocInfo(getDefaultProvider(targetElement),component);
      }
    }
  }
 else {
    final String docUrl=url;
    fetchDocInfo(new JavaDocProvider(){
      String getElementLocator(      String url){
        if (url.startsWith(DOC_ELEMENT_PROTOCOL)) {
          return url.substring(DOC_ELEMENT_PROTOCOL.length());
        }
        return null;
      }
      public String getJavaDoc() throws Exception {
        String url=getElementLocator(docUrl);
        if (url != null && JavaDocExternalFilter.isJavaDocURL(url)) {
          String text=new JavaDocExternalFilter(getProject(psiElement)).getExternalDocInfo(url);
          if (text != null) {
            return text;
          }
        }
        final DocumentationProvider provider=getProviderFromElement(psiElement);
        if (provider instanceof ExtensibleDocumentationProvider) {
          ((ExtensibleDocumentationProvider)provider).openExternalDocumentation(psiElement);
        }
        return "";
      }
      public PsiElement getElement(){
        return psiElement;
      }
    }
,component);
  }
  component.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
}
