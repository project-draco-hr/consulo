{
  UsageInfo[] usagesIn=refUsages.get();
  MultiMap<PsiElement,String> conflicts=new MultiMap<PsiElement,String>();
  final Set<PsiMember> methods=Collections.singleton((PsiMember)myMethod);
  if (!myTargetClass.isInterface()) {
    final String original=VisibilityUtil.getVisibilityModifier(myMethod.getModifierList());
    RefactoringConflictsUtil.analyzeAccessibilityConflicts(methods,myTargetClass,conflicts,original);
  }
 else {
    for (    final UsageInfo usage : usagesIn) {
      if (usage instanceof ImplementingClassUsageInfo) {
        RefactoringConflictsUtil.analyzeAccessibilityConflicts(methods,((ImplementingClassUsageInfo)usage).getPsiClass(),conflicts,PsiModifier.PUBLIC);
      }
    }
  }
  for (  final UsageInfo usageInfo : usagesIn) {
    if (usageInfo instanceof MethodCallUsageInfo) {
      final PsiMethodCallExpression methodCall=((MethodCallUsageInfo)usageInfo).getMethodCall();
      final PsiExpression[] expressions=methodCall.getArgumentList().getExpressions();
      final int index=myMethod.getParameterList().getParameterIndex(myTargetParameter);
      if (index < expressions.length) {
        PsiExpression instanceValue=expressions[index];
        instanceValue=RefactoringUtil.unparenthesizeExpression(instanceValue);
        if (instanceValue instanceof PsiLiteralExpression && ((PsiLiteralExpression)instanceValue).getValue() == null) {
          String message=RefactoringBundle.message("0.contains.call.with.null.argument.for.parameter.1",RefactoringUIUtil.getDescription(ConflictsUtil.getContainer(methodCall),true),CommonRefactoringUtil.htmlEmphasize(myTargetParameter.getName()));
          conflicts.putValue(methodCall,message);
        }
      }
    }
  }
  try {
    addInaccessibilityConflicts(usagesIn,conflicts);
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
  return showConflicts(conflicts,usagesIn);
}
