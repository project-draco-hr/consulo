{
  LOG.assertTrue(myTargetParameter.getDeclarationScope() == myMethod);
  final Project project=myMethod.getProject();
  final PsiReference[] methodReferences=ReferencesSearch.search(myMethod,GlobalSearchScope.projectScope(project),false).toArray(new PsiReference[0]);
  List<UsageInfo> result=new ArrayList<UsageInfo>();
  for (  final PsiReference ref : methodReferences) {
    final PsiElement element=ref.getElement();
    if (element instanceof PsiReferenceExpression) {
      if (element.getParent() instanceof PsiMethodCallExpression) {
        result.add(new MethodCallUsageInfo((PsiMethodCallExpression)element.getParent()));
      }
    }
 else     if (element instanceof PsiDocTagValue) {
      result.add(new JavaDocUsageInfo(ref));
    }
  }
  for (  final PsiReference ref : ReferencesSearch.search(myTargetParameter,new LocalSearchScope(myMethod),false)) {
    final PsiElement element=ref.getElement();
    if (element instanceof PsiReferenceExpression || element instanceof PsiDocParamRef) {
      result.add(new ParameterUsageInfo(ref));
    }
  }
  if (myTargetClass.isInterface()) {
    PsiClass[] implementingClasses=RefactoringHierarchyUtil.findImplementingClasses(myTargetClass);
    for (    final PsiClass implementingClass : implementingClasses) {
      result.add(new ImplementingClassUsageInfo(implementingClass));
    }
  }
  return result.toArray(new UsageInfo[result.size()]);
}
