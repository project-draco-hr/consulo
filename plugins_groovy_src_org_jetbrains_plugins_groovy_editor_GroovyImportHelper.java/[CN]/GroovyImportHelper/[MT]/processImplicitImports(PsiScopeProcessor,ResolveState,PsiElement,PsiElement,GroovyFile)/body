{
  JavaPsiFacade facade=JavaPsiFacade.getInstance(file.getProject());
  final DelegatingScopeProcessor packageSkipper=new DelegatingScopeProcessor(processor){
    @Override public boolean execute(    @NotNull PsiElement element,    ResolveState state){
      if (element instanceof PsiPackage)       return true;
      return super.execute(element,state);
    }
  }
;
  for (  final String implicitlyImported : getImplicitlyImportedPackages(file)) {
    PsiPackage aPackage=facade.findPackage(implicitlyImported);
    if (aPackage == null)     continue;
    if (!aPackage.processDeclarations(packageSkipper,state,lastParent,place)) {
      return false;
    }
  }
  for (  String implicitlyImportedClass : GroovyFileBase.IMPLICITLY_IMPORTED_CLASSES) {
    PsiClass clazz=facade.findClass(implicitlyImportedClass,file.getResolveScope());
    if (clazz != null && !ResolveUtil.processElement(processor,clazz,state))     return false;
  }
  return true;
}
