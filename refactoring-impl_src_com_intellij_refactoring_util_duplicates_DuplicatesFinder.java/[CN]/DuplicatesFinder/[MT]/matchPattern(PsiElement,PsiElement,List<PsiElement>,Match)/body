{
  if ((pattern == null || candidate == null))   return pattern == candidate;
  if (pattern.getUserData(PARAMETER) != null) {
    final PsiVariable parameter=pattern.getUserData(PARAMETER);
    return match.putParameter(parameter,candidate);
  }
  if (!canBeEquivalent(pattern,candidate))   return false;
  if (pattern instanceof PsiJavaCodeReferenceElement) {
    final PsiElement resolveResult1=((PsiJavaCodeReferenceElement)pattern).resolve();
    final PsiElement resolveResult2=((PsiJavaCodeReferenceElement)candidate).resolve();
    if (resolveResult1 instanceof PsiClass && resolveResult2 instanceof PsiClass)     return true;
    if (isUnder(resolveResult1,myPatternAsList) && isUnder(resolveResult2,candidates)) {
      return match.putDeclarationCorrespondence(resolveResult1,resolveResult2);
    }
    if (!equivalentResolve(resolveResult1,resolveResult2)) {
      return false;
    }
  }
  if (pattern instanceof PsiTypeCastExpression) {
    final PsiTypeElement castTypeElement1=((PsiTypeCastExpression)pattern).getCastType();
    final PsiTypeElement castTypeElement2=((PsiTypeCastExpression)candidate).getCastType();
    if (castTypeElement1 != null && castTypeElement2 != null) {
      final PsiType type1=TypeConversionUtil.erasure(castTypeElement1.getType());
      final PsiType type2=TypeConversionUtil.erasure(castTypeElement2.getType());
      if (!type1.equals(type2))       return false;
    }
  }
 else   if (pattern instanceof PsiNewExpression) {
    final PsiJavaCodeReferenceElement classReference1=((PsiNewExpression)pattern).getClassReference();
    final PsiJavaCodeReferenceElement classReference2=((PsiNewExpression)candidate).getClassReference();
    if ((classReference1 == null) != (classReference2 == null))     return false;
    if (classReference1 != null) {
      final PsiElement resolved1=classReference1.resolve();
      final PsiElement resolved2=classReference2.resolve();
      if (!pattern.getManager().areElementsEquivalent(resolved1,resolved2))       return false;
    }
  }
 else   if (pattern instanceof PsiClassObjectAccessExpression) {
    final PsiTypeElement operand1=((PsiClassObjectAccessExpression)pattern).getOperand();
    final PsiTypeElement operand2=((PsiClassObjectAccessExpression)candidate).getOperand();
    return operand1.getType().equals(operand2.getType());
  }
 else   if (pattern instanceof PsiReturnStatement) {
    final PsiReturnStatement patternReturnStatement=((PsiReturnStatement)pattern);
    return matchReturnStatement(patternReturnStatement,candidate,candidates,match);
  }
 else   if (pattern instanceof PsiReferenceExpression) {
    final PsiReferenceExpression patternRefExpr=((PsiReferenceExpression)pattern);
    final PsiReferenceExpression candidateRefExpr=((PsiReferenceExpression)candidate);
    if (patternRefExpr.getQualifierExpression() == null) {
      return match.registerInstanceExpression(candidateRefExpr.getQualifierExpression());
    }
  }
  PsiElement[] children1=getFilteredChildren(pattern);
  PsiElement[] children2=getFilteredChildren(candidate);
  if (children1.length != children2.length)   return false;
  for (int i=0; i < children1.length; i++) {
    PsiElement child1=children1[i];
    PsiElement child2=children2[i];
    if (!matchPattern(child1,child2,candidates,match))     return false;
  }
  if (children1.length == 0) {
    if (pattern.getParent() instanceof PsiVariable && ((PsiVariable)pattern.getParent()).getNameIdentifier() == pattern) {
      return match.putDeclarationCorrespondence(pattern.getParent(),candidate.getParent());
    }
    if (!pattern.textMatches(candidate))     return false;
  }
  return true;
}
