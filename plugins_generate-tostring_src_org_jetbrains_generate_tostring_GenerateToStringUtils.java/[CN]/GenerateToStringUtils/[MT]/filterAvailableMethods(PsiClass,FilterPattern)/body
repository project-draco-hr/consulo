{
  if (log.isDebugEnabled())   log.debug("Filtering methods using the pattern: " + pattern);
  List<PsiMethod> availableMethods=new ArrayList<PsiMethod>();
  PsiMethod[] methods=clazz.getMethods();
  for (  PsiMethod method : methods) {
    if (!PsiAdapter.isGetterMethod(method)) {
      continue;
    }
    final PsiType returnType=method.getReturnType();
    if (returnType == null || PsiType.VOID.equals(returnType)) {
      continue;
    }
    if (!method.hasModifierProperty(PsiModifier.PUBLIC) || method.hasModifierProperty(PsiModifier.STATIC) || method.hasModifierProperty(PsiModifier.ABSTRACT)) {
      continue;
    }
    String fieldName=PsiAdapter.getGetterFieldName(method);
    if (clazz.findFieldByName(fieldName,false) != null) {
      continue;
    }
    final String methodName=method.getName();
    if ("toString".equals(methodName) || "getClass".equals(methodName)) {
      continue;
    }
    MethodElement me=ElementFactory.newMethodElement(method);
    if (!me.applyFilter(pattern)) {
      if (log.isDebugEnabled())       log.debug("Adding the method " + methodName + " as there is not a field for this getter");
      availableMethods.add(method);
    }
  }
  return availableMethods.toArray(new PsiMethod[availableMethods.size()]);
}
