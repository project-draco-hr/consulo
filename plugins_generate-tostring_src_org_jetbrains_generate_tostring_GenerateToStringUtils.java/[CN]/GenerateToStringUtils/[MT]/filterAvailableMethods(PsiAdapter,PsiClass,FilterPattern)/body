{
  if (log.isDebugEnabled())   log.debug("Filtering methods using the pattern: " + pattern);
  List<PsiMethod> availableMethods=new ArrayList<PsiMethod>();
  PsiElementFactory elementFactory=JavaPsiFacade.getInstance(clazz.getProject()).getElementFactory();
  PsiMethod[] methods=psi.getMethods(clazz);
  for (  PsiMethod method : methods) {
    MethodElement me=ElementFactory.newMethodElement(method,elementFactory,psi);
    if (log.isDebugEnabled())     log.debug("Method being filtered: " + me);
    if (!me.isGetter()) {
      continue;
    }
    if (me.isReturnTypeVoid()) {
      continue;
    }
    if (!me.isModifierPublic() || me.isModifierStatic() || me.isModifierAbstract()) {
      continue;
    }
    if (psi.findFieldByName(clazz,me.getFieldName()) != null) {
      continue;
    }
    if ("toString".equals(me.getMethodName()) || "getClass".equals(me.getMethodName())) {
      continue;
    }
    if (!me.applyFilter(pattern)) {
      if (log.isDebugEnabled())       log.debug("Adding the method " + method.getName() + " as there is not a field for this getter");
      availableMethods.add(method);
    }
  }
  return availableMethods.toArray(new PsiMethod[availableMethods.size()]);
}
