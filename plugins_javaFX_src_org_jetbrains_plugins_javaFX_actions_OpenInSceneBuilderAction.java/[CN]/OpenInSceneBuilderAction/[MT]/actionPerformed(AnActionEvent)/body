{
  final VirtualFile virtualFile=e.getData(PlatformDataKeys.VIRTUAL_FILE);
  LOG.assertTrue(virtualFile != null);
  final String path=virtualFile.getPath();
  final JavaFxSettings settings=JavaFxSettings.getInstance();
  String pathToSceneBuilder=settings.getPathToSceneBuilder();
  if (StringUtil.isEmptyOrSpaces(settings.getPathToSceneBuilder())) {
    final VirtualFile sceneBuilderFile=FileChooser.chooseFile(JavaFxSettingsConfigurable.createSceneBuilderDescriptor(),e.getProject(),null);
    if (sceneBuilderFile == null)     return;
    pathToSceneBuilder=sceneBuilderFile.getPath();
    settings.setPathToSceneBuilder(FileUtil.toSystemIndependentName(pathToSceneBuilder));
  }
  final Project project=getEventProject(e);
  if (project != null && !Registry.is("scene.builder.start.executable",true)) {
    final Module module=ModuleUtilCore.findModuleForFile(virtualFile,project);
    if (module != null) {
      try {
        final JavaParameters javaParameters=new JavaParameters();
        javaParameters.configureByModule(module,JavaParameters.JDK_AND_CLASSES);
        final File sceneBuilderLibsFile;
        if (SystemInfo.isMac) {
          sceneBuilderLibsFile=new File(new File(pathToSceneBuilder,"Contents"),"Java");
        }
 else         if (SystemInfo.isWindows) {
          File sceneBuilderRoot=new File(pathToSceneBuilder);
          File sceneBuilderRootDir=sceneBuilderRoot.getParentFile();
          if (sceneBuilderRootDir == null) {
            final File foundInPath=PathEnvironmentVariableUtil.findInPath(pathToSceneBuilder);
            if (foundInPath != null) {
              sceneBuilderRootDir=foundInPath.getParentFile();
            }
          }
          sceneBuilderRoot=sceneBuilderRootDir != null ? sceneBuilderRootDir.getParentFile() : null;
          if (sceneBuilderRoot != null) {
            final File libFile=new File(sceneBuilderRoot,"lib");
            if (libFile.isDirectory()) {
              sceneBuilderLibsFile=libFile;
            }
 else {
              final File appFile=new File(sceneBuilderRootDir,"app");
              sceneBuilderLibsFile=appFile.isDirectory() ? appFile : null;
            }
          }
 else {
            sceneBuilderLibsFile=null;
          }
        }
 else {
          sceneBuilderLibsFile=new File(new File(pathToSceneBuilder).getParent(),"app");
        }
        if (sceneBuilderLibsFile != null) {
          final File[] sceneBuilderLibs=sceneBuilderLibsFile.listFiles();
          if (sceneBuilderLibs != null) {
            for (            File jarFile : sceneBuilderLibs) {
              javaParameters.getClassPath().add(jarFile.getPath());
            }
            javaParameters.setMainClass("com.oracle.javafx.authoring.Main");
            javaParameters.getProgramParametersList().add(path);
            final OSProcessHandler processHandler=javaParameters.createOSProcessHandler();
            final String commandLine=processHandler.getCommandLine();
            LOG.info("scene builder command line: " + commandLine);
            processHandler.startNotify();
            return;
          }
        }
      }
 catch (      Throwable ex) {
        LOG.info(ex);
      }
    }
  }
  if (SystemInfo.isMac) {
    pathToSceneBuilder+="/Contents/MacOS/JavaAppLauncher";
  }
  final GeneralCommandLine commandLine=new GeneralCommandLine();
  try {
    commandLine.setExePath(FileUtil.toSystemDependentName(pathToSceneBuilder));
    commandLine.addParameter(path);
    commandLine.createProcess();
  }
 catch (  ExecutionException ex) {
    Messages.showErrorDialog("Failed to start SceneBuilder: " + commandLine.getCommandLineString(),CommonBundle.getErrorTitle());
  }
}
