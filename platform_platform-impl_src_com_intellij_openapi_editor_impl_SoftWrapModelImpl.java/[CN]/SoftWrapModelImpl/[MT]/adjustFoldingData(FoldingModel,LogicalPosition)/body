{
  int offset=myEditor.logicalPositionToOffset(position);
  int foldedLines=0;
  int foldColumnDiff=0;
  int softWrapColumnDiff=position.softWrapColumnDiff;
  DocumentImpl document=(DocumentImpl)myEditor.getDocument();
  CharSequence text=document.getCharsNoThreadCheck();
  for (  FoldRegion foldRegion : foldingModel.getAllFoldRegions()) {
    if (foldRegion.getStartOffset() >= offset) {
      break;
    }
    if (foldRegion.isExpanded() || !foldRegion.isValid()) {
      continue;
    }
    int foldingStartLine=document.getLineNumber(foldRegion.getStartOffset());
    int foldingEndLine=document.getLineNumber(foldRegion.getEndOffset());
    foldedLines+=foldingEndLine - foldingStartLine;
    if (offset >= foldRegion.getStartOffset() && offset < foldRegion.getEndOffset()) {
      int visualFoldingStartColumn=calculateVisualFoldingStartColumn(foldRegion);
      foldColumnDiff=visualFoldingStartColumn - position.column - softWrapColumnDiff;
      break;
    }
    if (foldingEndLine != position.line) {
      continue;
    }
    if (foldingStartLine == foldingEndLine) {
      foldColumnDiff=toVisualColumnSymbolsNumber(foldRegion.getPlaceholderText()) - toVisualColumnSymbolsNumber(text,foldRegion.getStartOffset(),foldRegion.getEndOffset());
    }
 else {
      int endOffsetOfLineWithFoldingEnd=document.getLineEndOffset(foldingEndLine);
      int columnsBetweenFoldingEndAndOffset=toVisualColumnSymbolsNumber(text,foldRegion.getEndOffset(),endOffsetOfLineWithFoldingEnd);
      if (position.column > endOffsetOfLineWithFoldingEnd) {
        columnsBetweenFoldingEndAndOffset+=position.column - endOffsetOfLineWithFoldingEnd;
      }
      int visualFoldingStartColumn=calculateVisualFoldingStartColumn(foldRegion);
      int foldingPlaceholderWidth=toVisualColumnSymbolsNumber(foldRegion.getPlaceholderText());
      int visual=columnsBetweenFoldingEndAndOffset + visualFoldingStartColumn + foldingPlaceholderWidth;
      foldColumnDiff=visual - position.column;
      break;
    }
  }
  return new LogicalPosition(position.line,position.column,position.softWrapLines,position.linesFromActiveSoftWrap,softWrapColumnDiff,foldedLines,foldColumnDiff);
}
