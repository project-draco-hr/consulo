{
  CharSequence chars=((DocumentImpl)myEditor.getDocument()).getCharsNoThreadCheck();
  int softWrapIntroducedLines=0;
  int linesFromCurrentSoftWrap=0;
  int symbolsOnCurrentLogicalLine=0;
  int symbolsOnCurrentVisibleLine=0;
  int softWrapsSymbolsOnCurrentVisibleLine=0;
  FoldingModel foldingModel=myEditor.getFoldingModel();
  int currentLine=myFirstVisibleLine;
  for (int i=myFirstVisibleSymbolOffset, max=chars.length(); i < max && currentLine <= visual.line; i++) {
    if (currentLine == visual.line) {
      if (symbolsOnCurrentVisibleLine >= visual.column) {
        int softWrapColumns=softWrapsSymbolsOnCurrentVisibleLine > 0 ? symbolsOnCurrentVisibleLine - symbolsOnCurrentLogicalLine : 0;
        return new LogicalPosition(logical.line - softWrapIntroducedLines,symbolsOnCurrentLogicalLine,softWrapIntroducedLines,linesFromCurrentSoftWrap,softWrapColumns);
      }
    }
    FoldRegion region=foldingModel.getCollapsedRegionAtOffset(i);
    if (region != null && !region.isExpanded()) {
      i=region.getEndOffset();
      continue;
    }
    TextChange softWrap=myWraps.get(i);
    if (softWrap != null) {
      CharSequence softWrapText=softWrap.getText();
      for (int j=0; j < softWrapText.length(); j++) {
        if (currentLine == visual.line && symbolsOnCurrentVisibleLine >= visual.column) {
          return new LogicalPosition(logical.line - softWrapIntroducedLines,symbolsOnCurrentLogicalLine,softWrapIntroducedLines,linesFromCurrentSoftWrap,softWrapsSymbolsOnCurrentVisibleLine - symbolsOnCurrentLogicalLine);
        }
        if (softWrapText.charAt(j) == '\n') {
          if (currentLine == visual.line) {
            return new LogicalPosition(logical.line - softWrapIntroducedLines,symbolsOnCurrentLogicalLine,softWrapIntroducedLines,linesFromCurrentSoftWrap,visual.column - symbolsOnCurrentLogicalLine);
          }
 else {
            softWrapIntroducedLines++;
            linesFromCurrentSoftWrap++;
            currentLine++;
            symbolsOnCurrentVisibleLine=0;
            softWrapsSymbolsOnCurrentVisibleLine=0;
          }
        }
 else {
          symbolsOnCurrentVisibleLine++;
          softWrapsSymbolsOnCurrentVisibleLine++;
        }
      }
    }
    if (currentLine == visual.line && symbolsOnCurrentVisibleLine >= visual.column) {
      return new LogicalPosition(logical.line - softWrapIntroducedLines,symbolsOnCurrentLogicalLine,softWrapIntroducedLines,linesFromCurrentSoftWrap,softWrapsSymbolsOnCurrentVisibleLine - symbolsOnCurrentLogicalLine);
    }
    char c=chars.charAt(i);
    if (c == '\n') {
      if (currentLine == visual.line) {
        int columnToUse=symbolsOnCurrentLogicalLine + visual.column - symbolsOnCurrentVisibleLine;
        return new LogicalPosition(logical.line - softWrapIntroducedLines,columnToUse,softWrapIntroducedLines,linesFromCurrentSoftWrap,visual.column - columnToUse);
      }
 else {
        currentLine++;
        linesFromCurrentSoftWrap=0;
        symbolsOnCurrentVisibleLine=0;
        symbolsOnCurrentLogicalLine=0;
        softWrapsSymbolsOnCurrentVisibleLine=0;
      }
    }
 else {
      symbolsOnCurrentLogicalLine++;
      symbolsOnCurrentVisibleLine++;
    }
  }
  return logical;
}
