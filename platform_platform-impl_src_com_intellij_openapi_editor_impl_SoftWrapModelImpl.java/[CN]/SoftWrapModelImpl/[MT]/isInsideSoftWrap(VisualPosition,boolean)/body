{
  if (!isSoftWrappingEnabled()) {
    return false;
  }
  SoftWrapModel model=myEditor.getSoftWrapModel();
  if (!model.isSoftWrappingEnabled()) {
    return false;
  }
  LogicalPosition logical=myEditor.visualToLogicalPosition(visual);
  int offset=myEditor.logicalPositionToOffset(logical);
  if (offset <= 0) {
    return false;
  }
  SoftWrap softWrap=model.getSoftWrap(offset);
  if (softWrap == null) {
    return false;
  }
  VisualPosition visualAfterSoftWrap=myEditor.offsetToVisualPosition(offset);
  if (visualAfterSoftWrap.line == visual.line && visualAfterSoftWrap.column <= visual.column) {
    return false;
  }
  VisualPosition visualBeforeSoftWrap=myEditor.offsetToVisualPosition(offset - 1);
  int x=0;
  LogicalPosition logLineStart=myEditor.visualToLogicalPosition(new VisualPosition(visualBeforeSoftWrap.line,0));
  if (logLineStart.softWrapLinesOnCurrentLogicalLine > 0) {
    int offsetLineStart=myEditor.logicalPositionToOffset(logLineStart);
    softWrap=model.getSoftWrap(offsetLineStart);
    if (softWrap != null) {
      x=softWrap.getIndentInPixels();
    }
  }
  int width=EditorUtil.textWidthInColumns(myEditor,myEditor.getDocument().getCharsSequence(),offset - 1,offset,x);
  int softWrapStartColumn=visualBeforeSoftWrap.column + width;
  if (visual.line > visualBeforeSoftWrap.line) {
    return true;
  }
  return countBeforeSoftWrap ? visual.column >= softWrapStartColumn : visual.column > softWrapStartColumn;
}
