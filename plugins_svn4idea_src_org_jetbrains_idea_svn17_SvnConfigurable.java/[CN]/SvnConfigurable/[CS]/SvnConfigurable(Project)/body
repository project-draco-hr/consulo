{
  myProject=project;
  myLinkLabel.setHyperlinkTarget("http://confluence.jetbrains.net/display/IDEADEV/Subversion+1.7+in+IntelliJ+IDEA+11");
  myLinkLabel.setHyperlinkText("More information");
  myUseDefaultCheckBox.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      boolean enabled=!myUseDefaultCheckBox.isSelected();
      myConfigurationDirectoryText.setEnabled(enabled);
      myConfigurationDirectoryLabel.setEnabled(enabled);
      SvnConfiguration17 configuration=SvnConfiguration17.getInstance(myProject);
      String path=configuration.getConfigurationDirectory();
      if (!enabled || path == null) {
        myConfigurationDirectoryText.setText(IdeaSubversionConfigurationDirectory.getPath());
      }
 else {
        myConfigurationDirectoryText.setText(path);
      }
    }
  }
);
  myClearAuthButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      String path=myConfigurationDirectoryText.getText();
      if (path != null) {
        int result=Messages.showYesNoDialog(myComponent,SvnBundle.message("confirmation.text.delete.stored.authentication.information"),SvnBundle.message("confirmation.title.clear.authentication.cache"),Messages.getWarningIcon());
        if (result == 0) {
          SvnConfiguration17.RUNTIME_AUTH_CACHE.clear();
          SvnConfiguration17.getInstance(myProject).clearAuthenticationDirectory();
        }
      }
    }
  }
);
  final FileChooserDescriptor descriptor=createFileDescriptor();
  myConfigurationDirectoryText.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      @NonNls String path=myConfigurationDirectoryText.getText().trim();
      path="file://" + path.replace(File.separatorChar,'/');
      VirtualFile root=VirtualFileManager.getInstance().findFileByUrl(path);
      String oldValue=PropertiesComponent.getInstance().getValue("FileChooser.showHiddens");
      PropertiesComponent.getInstance().setValue("FileChooser.showHiddens",Boolean.TRUE.toString());
      VirtualFile file=FileChooser.chooseFile(myComponent,descriptor,root);
      PropertiesComponent.getInstance().setValue("FileChooser.showHiddens",oldValue);
      if (file == null) {
        return;
      }
      myConfigurationDirectoryText.setText(file.getPath().replace('/',File.separatorChar));
    }
  }
);
  myConfigurationDirectoryText.setEditable(false);
  myConfigurationDirectoryLabel.setLabelFor(myConfigurationDirectoryText);
  myUseCommonProxy.setText(SvnBundle.message("use.idea.proxy.as.default",ApplicationNamesInfo.getInstance().getProductName()));
  myEditProxiesButton.addActionListener(new ConfigureProxiesListener(myProject));
  myMaximumNumberOfRevisionsCheckBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      myNumRevsInAnnotations.setEnabled(myMaximumNumberOfRevisionsCheckBox.isSelected());
    }
  }
);
  myNumRevsInAnnotations.setEnabled(myMaximumNumberOfRevisionsCheckBox.isSelected());
  ButtonGroup bg=new ButtonGroup();
  bg.add(myNoAcceleration);
  bg.add(myJavaHLAcceleration);
  bg.add(myWithCommandLineClient);
}
