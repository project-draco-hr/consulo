{
  CheckUtil.checkWritable(this);
  final CharTable treeCharTab=SharedImplUtil.findCharTableByTree(this);
  CompositeElement statement=getTreeParent();
  PsiElement[] variables=((PsiDeclarationStatement)SourceTreeToPsiMap.treeElementToPsi(statement)).getDeclaredElements();
  if (variables.length > 1) {
    TreeElement type=SourceTreeToPsiMap.psiElementToTree(getTypeElement());
    TreeElement modifierList=SourceTreeToPsiMap.psiElementToTree(getModifierList());
    TreeElement last=statement;
    for (int i=1; i < variables.length; i++) {
      CompositeElement variable=(CompositeElement)SourceTreeToPsiMap.psiElementToTree(variables[i]);
      TreeElement comma=TreeUtil.skipElementsBack(variable.getTreePrev(),ElementType.WHITE_SPACE_OR_COMMENT_BIT_SET);
      if (comma != null && comma.getElementType() == JavaTokenType.COMMA) {
        CodeEditUtil.removeChildren(statement,comma,variable.getTreePrev());
      }
      CodeEditUtil.removeChild(statement,variable);
      final CharTable charTableByTree=SharedImplUtil.findCharTableByTree(statement);
      variable.putUserData(CharTable.CHAR_TABLE_KEY,charTableByTree);
      CompositeElement statement1=Factory.createCompositeElement(DECLARATION_STATEMENT);
      statement1.putUserData(CharTable.CHAR_TABLE_KEY,charTableByTree);
      ChangeUtil.addChild(statement1,variable,null);
      TreeElement space=Factory.createSingleLeafElement(JavaTokenType.WHITE_SPACE,new char[]{' '},0,1,treeCharTab,getManager());
      ChangeUtil.addChild(variable,space,variable.firstChild);
      TreeElement typeClone=(TreeElement)type.clone();
      typeClone.putUserData(CharTable.CHAR_TABLE_KEY,treeCharTab);
      ChangeUtil.addChild(variable,typeClone,variable.firstChild);
      if (modifierList.getTextLength() > 0) {
        space=Factory.createSingleLeafElement(JavaTokenType.WHITE_SPACE,new char[]{' '},0,1,treeCharTab,getManager());
        ChangeUtil.addChild(variable,space,variable.firstChild);
      }
      TreeElement modifierListClone=(TreeElement)modifierList.clone();
      modifierListClone.putUserData(CharTable.CHAR_TABLE_KEY,treeCharTab);
      ChangeUtil.addChild(variable,modifierListClone,variable.firstChild);
      TreeElement semicolon=Factory.createSingleLeafElement(JavaTokenType.SEMICOLON,new char[]{';'},0,1,treeCharTab,getManager());
      ChangeUtil.addChild((CompositeElement)SourceTreeToPsiMap.psiElementToTree(variables[i - 1]),semicolon,null);
      CodeEditUtil.addChild(statement.getTreeParent(),statement1,last.getTreeNext());
      last=statement1;
    }
  }
  SharedImplUtil.normalizeBrackets(this);
}
