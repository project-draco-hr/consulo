{
  List<VirtualFile> files=new ArrayList<VirtualFile>();
  final File ioDir=VfsUtil.virtualToIoFile(dir);
  for (  Pair<LibraryDownloadInfo,File> pair : downloadedFiles) {
    final LibraryDownloadInfo info=pair.getFirst();
    final boolean dontTouch=info.getDownloadUrl().startsWith(LIB_SCHEMA) || info.getDownloadUrl().startsWith(LocalFileSystem.PROTOCOL_PREFIX);
    final File toFile=dontTouch ? pair.getSecond() : generateName(info,ioDir);
    if (!dontTouch) {
      FileUtil.rename(pair.getSecond(),toFile);
    }
    VirtualFile file=new WriteAction<VirtualFile>(){
      protected void run(      final Result<VirtualFile> result){
        final String url=VfsUtil.getUrlForLibraryRoot(toFile);
        LocalFileSystem.getInstance().refreshAndFindFileByIoFile(toFile);
        result.setResult(VirtualFileManager.getInstance().refreshAndFindFileByUrl(url));
      }
    }
.execute().getResultObject();
    if (file != null) {
      files.add(file);
    }
  }
  for (  final VirtualFile file : existingFiles) {
    VirtualFile libraryRootFile=new WriteAction<VirtualFile>(){
      protected void run(      final Result<VirtualFile> result){
        final String url=VfsUtil.getUrlForLibraryRoot(VfsUtil.virtualToIoFile(file));
        result.setResult(VirtualFileManager.getInstance().refreshAndFindFileByUrl(url));
      }
    }
.execute().getResultObject();
    if (libraryRootFile != null) {
      files.add(libraryRootFile);
    }
  }
  return VfsUtil.toVirtualFileArray(files);
}
