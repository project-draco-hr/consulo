{
  if (in.size() <= 1)   return in;
  final List<MyPair<S>> infos=new ArrayList<MyPair<S>>(in.size());
  final SvnFileUrlMappingImpl mapping=(SvnFileUrlMappingImpl)getSvnFileUrlMapping();
  final List<S> notMatched=new LinkedList<S>();
  for (  S s : in) {
    final VirtualFile vf=convertor.convert(s);
    if (vf == null)     continue;
    final File ioFile=new File(vf.getPath());
    SVNURL url=mapping.getUrlForFile(ioFile);
    if (url == null) {
      url=SvnUtil.getUrl(this,ioFile);
      if (url == null) {
        notMatched.add(s);
        continue;
      }
    }
    infos.add(new MyPair<S>(vf,url.toString(),s));
  }
  final List<MyPair<S>> filtered=new ArrayList<MyPair<S>>(infos.size());
  ForNestedRootChecker.filterOutSuperfluousChildren(this,infos,filtered);
  final List<S> converted=ObjectsConvertor.convert(filtered,new Convertor<MyPair<S>,S>(){
    @Override public S convert(    final MyPair<S> o){
      return o.getSrc();
    }
  }
);
  if (!notMatched.isEmpty()) {
    converted.addAll(notMatched);
  }
  return converted;
}
