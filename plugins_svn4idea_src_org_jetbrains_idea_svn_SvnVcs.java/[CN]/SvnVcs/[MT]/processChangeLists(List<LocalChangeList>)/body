{
  final ProjectLevelVcsManager plVcsManager=ProjectLevelVcsManager.getInstanceChecked(myProject);
  plVcsManager.startBackgroundVcsOperation();
  try {
    final SVNChangelistClient client=createChangelistClient();
    for (    LocalChangeList list : lists) {
      if (!list.isDefault()) {
        final Collection<Change> changes=list.getChanges();
        for (        Change change : changes) {
          correctListForRevision(plVcsManager,change.getBeforeRevision(),client,list.getName());
          correctListForRevision(plVcsManager,change.getAfterRevision(),client,list.getName());
        }
      }
    }
  }
  finally {
    final Application appManager=ApplicationManager.getApplication();
    if (appManager.isDispatchThread()) {
      appManager.executeOnPooledThread(new Runnable(){
        @Override public void run(){
          plVcsManager.stopBackgroundVcsOperation();
        }
      }
);
    }
 else {
      plVcsManager.stopBackgroundVcsOperation();
    }
  }
}
