{
  Map<String,Pair<SVNPropertyValue,Trinity<Long,Long,Long>>> cachedMap=myPropertyCache.get(keyForVf(file));
  final Pair<SVNPropertyValue,Trinity<Long,Long,Long>> cachedValue=(cachedMap == null) ? null : cachedMap.get(propName);
  final File ioFile=new File(file.getPath());
  final Trinity<Long,Long,Long> tsTrinity=getTimestampForPropertiesChange(ioFile,file.isDirectory());
  if (cachedValue != null) {
    if (trinitiesEqual(cachedValue.getSecond(),tsTrinity)) {
      return cachedValue.getFirst();
    }
  }
  final SVNPropertyData value=createWCClient().doGetProperty(ioFile,propName,SVNRevision.WORKING,SVNRevision.WORKING);
  final SVNPropertyValue propValue=(value == null) ? null : value.getValue();
  if (cachedMap == null) {
    cachedMap=new HashMap<String,Pair<SVNPropertyValue,Trinity<Long,Long,Long>>>();
    myPropertyCache.put(keyForVf(file),cachedMap);
  }
  cachedMap.put(propName,new Pair<SVNPropertyValue,Trinity<Long,Long,Long>>(propValue,tsTrinity));
  return propValue;
}
