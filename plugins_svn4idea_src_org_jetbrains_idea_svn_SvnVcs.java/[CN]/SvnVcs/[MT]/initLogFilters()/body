{
  if (ourLogFilters != null)   return;
  ourLogFilters=new RareLogger.LogFilter[]{new RareLogger.LogFilter(){
    @Override public Object getKey(    @NotNull org.apache.log4j.Level level,    @NonNls String message,    @Nullable Throwable t,    @NonNls String... details){
      SVNException svnExc=null;
      if (t instanceof SVNException) {
        svnExc=(SVNException)t;
      }
 else       if (t instanceof VcsException && t.getCause() instanceof SVNException) {
        svnExc=(SVNException)t.getCause();
      }
      if (svnExc != null) {
        if (ourLogRarely.contains(svnExc.getErrorMessage().getErrorCode())) {
          return svnExc.getErrorMessage().getErrorCode();
        }
      }
      return null;
    }
    @Override @NotNull public Integer getAllowedLoggingInterval(    org.apache.log4j.Level level,    String message,    Throwable t,    String[] details){
      SVNException svnExc=null;
      if (t instanceof SVNException) {
        svnExc=(SVNException)t;
      }
 else       if (t instanceof VcsException && t.getCause() instanceof SVNException) {
        svnExc=(SVNException)t.getCause();
      }
      if (svnExc != null) {
        if (ourLogRarely.contains(svnExc.getErrorMessage().getErrorCode())) {
          return ourLogRareInterval;
        }
 else {
          return ourLogUsualInterval;
        }
      }
      return 0;
    }
  }
};
}
