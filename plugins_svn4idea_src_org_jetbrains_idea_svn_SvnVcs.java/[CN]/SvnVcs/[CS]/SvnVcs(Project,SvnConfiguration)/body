{
  super(project);
  LOG.debug("ct");
  myProject=project;
  myConfiguration=svnConfiguration;
  dumpFileStatus(FileStatus.ADDED);
  dumpFileStatus(FileStatus.DELETED);
  dumpFileStatus(FileStatus.MERGE);
  dumpFileStatus(FileStatus.MODIFIED);
  dumpFileStatus(FileStatus.NOT_CHANGED);
  dumpFileStatus(FileStatus.UNKNOWN);
  dumpFileStatus(SvnFileStatus.REPLACED);
  dumpFileStatus(SvnFileStatus.EXTERNAL);
  dumpFileStatus(SvnFileStatus.OBSTRUCTED);
  myEntriesFileListener=new SvnEntriesFileListener(project);
  final ProjectLevelVcsManager vcsManager=ProjectLevelVcsManager.getInstance(project);
  myAddConfirmation=vcsManager.getStandardConfirmation(VcsConfiguration.StandardConfirmation.ADD,this);
  myDeleteConfirmation=vcsManager.getStandardConfirmation(VcsConfiguration.StandardConfirmation.REMOVE,this);
  myCheckoutOptions=vcsManager.getStandardOption(VcsConfiguration.StandardOption.CHECKOUT,this);
  myRootsInfo=new SvnFileUrlMappingRefresher(new SvnFileUrlMappingImpl(myProject,this));
  myConvertor=new SvnConvertor();
  if (!SvnBranchConfigurationManager.getInstance(myProject).upgradeTo15Asked()) {
    final SvnWorkingCopyChecker workingCopyChecker=new SvnWorkingCopyChecker();
    if (workingCopyChecker.upgradeNeeded()) {
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          final int upgradeAnswer=Messages.showYesNoDialog(SvnBundle.message("upgrade.format.to15.question.text",SvnBundle.message("label.where.svn.format.can.be.changed.text",SvnBundle.message("action.show.svn.map.text"))),SvnBundle.message("upgrade.format.to15.question.title"),Messages.getWarningIcon());
          if (DialogWrapper.OK_EXIT_CODE == upgradeAnswer) {
            ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
              public void run(){
                workingCopyChecker.doUpgrade();
              }
            }
);
          }
        }
      }
);
    }
  }
}
