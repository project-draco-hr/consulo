{
  super(project);
  LOG.debug("ct");
  myConfiguration=svnConfiguration;
  dumpFileStatus(FileStatus.ADDED);
  dumpFileStatus(FileStatus.DELETED);
  dumpFileStatus(FileStatus.MERGE);
  dumpFileStatus(FileStatus.MODIFIED);
  dumpFileStatus(FileStatus.NOT_CHANGED);
  dumpFileStatus(FileStatus.UNKNOWN);
  dumpFileStatus(SvnFileStatus.REPLACED);
  dumpFileStatus(SvnFileStatus.EXTERNAL);
  dumpFileStatus(SvnFileStatus.OBSTRUCTED);
  myEntriesFileListener=new SvnEntriesFileListener(project);
  final ProjectLevelVcsManager vcsManager=ProjectLevelVcsManager.getInstance(project);
  myAddConfirmation=vcsManager.getStandardConfirmation(VcsConfiguration.StandardConfirmation.ADD,this);
  myDeleteConfirmation=vcsManager.getStandardConfirmation(VcsConfiguration.StandardConfirmation.REMOVE,this);
  myCheckoutOptions=vcsManager.getStandardOption(VcsConfiguration.StandardOption.CHECKOUT,this);
  myRootsInfo=new SvnFileUrlMappingImpl(myProject,this);
  if (myProject.isDefault()) {
    myChangeListListener=null;
  }
 else {
    final SvnBranchConfigurationManager.SvnSupportOptions supportOptions=SvnBranchConfigurationManager.getInstance(myProject).getSupportOptions();
    upgradeTo15(supportOptions);
    changeListSynchronizationIdeaVersionToNative(supportOptions,bus);
    myChangeListListener=new SvnChangelistListener(myProject,createChangelistClient());
    ChangeListManager.getInstance(myProject).addChangeListListener(myChangeListListener);
    myMessageBusConnection=bus.connect();
    myMessageBusConnection.subscribe(ProjectLevelVcsManagerImpl.VCS_MAPPING_CHANGED,new Runnable(){
      public void run(){
        invokeRefreshSvnRoots(true);
      }
    }
);
    invokeRefreshSvnRoots(true);
  }
}
