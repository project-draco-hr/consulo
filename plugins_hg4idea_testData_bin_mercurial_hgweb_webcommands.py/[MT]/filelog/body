def filelog(web, req, tmpl):
    try:
        fctx = webutil.filectx(web.repo, req)
        f = fctx.path()
        fl = fctx.filelog()
    except error.LookupError:
        f = webutil.cleanpath(web.repo, req.form['file'][0])
        fl = web.repo.file(f)
        numrevs = len(fl)
        if (not numrevs):
            raise
        rev = webutil.changectx(web.repo, req).rev()
        first = fl.linkrev(0)
        if (rev < first):
            raise
        frev = (numrevs - 1)
        while (fl.linkrev(frev) > rev):
            frev -= 1
        fctx = web.repo.filectx(f, fl.linkrev(frev))
    revcount = web.maxshortchanges
    if ('revcount' in req.form):
        revcount = int(req.form.get('revcount', [revcount])[0])
        tmpl.defaults['sessionvars']['revcount'] = revcount
    lessvars = copy.copy(tmpl.defaults['sessionvars'])
    lessvars['revcount'] = (revcount / 2)
    morevars = copy.copy(tmpl.defaults['sessionvars'])
    morevars['revcount'] = (revcount * 2)
    count = (fctx.filerev() + 1)
    start = max(0, ((fctx.filerev() - revcount) + 1))
    end = min(count, (start + revcount))
    parity = paritygen(web.stripecount, offset=(start - end))

    def entries(limit=0, **map):
        l = []
        repo = web.repo
        for i in xrange(start, end):
            iterfctx = fctx.filectx(i)
            l.insert(0, {'parity': parity.next(), 'filerev': i, 'file': f, 'node': hex(iterfctx.node()), 'author': iterfctx.user(), 'date': iterfctx.date(), 'rename': webutil.renamelink(iterfctx), 'parent': webutil.parents(iterfctx), 'child': webutil.children(iterfctx), 'desc': iterfctx.description(), 'tags': webutil.nodetagsdict(repo, iterfctx.node()), 'branch': webutil.nodebranchnodefault(iterfctx), 'inbranch': webutil.nodeinbranch(repo, iterfctx), 'branches': webutil.nodebranchdict(repo, iterfctx), })
        if (limit > 0):
            l = l[:limit]
        for e in l:
            yield e
    nodefunc = (lambda x: fctx.filectx(fileid=x))
    nav = webutil.revnavgen((end - 1), revcount, count, nodefunc)
    return tmpl('filelog', file=f, node=hex(fctx.node()), nav=nav, entries=(lambda **x: entries(limit=0, **x)), latestentry=(lambda **x: entries(limit=1, **x)), revcount=revcount, morevars=morevars, lessvars=lessvars)
