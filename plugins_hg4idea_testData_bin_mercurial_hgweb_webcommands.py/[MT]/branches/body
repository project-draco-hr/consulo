def branches(web, req, tmpl):
    b = web.repo.branchtags()
    tips = (web.repo[n] for (t, n) in web.repo.branchtags().iteritems())
    heads = web.repo.heads()
    parity = paritygen(web.stripecount)
    sortkey = (lambda ctx: (('close' not in ctx.extra()), ctx.rev()))

    def entries(limit, **map):
        count = 0
        for ctx in sorted(tips, key=sortkey, reverse=True):
            if ((limit > 0) and (count >= limit)):
                return
            count += 1
            if (ctx.node() not in heads):
                status = 'inactive'
            elif (not web.repo.branchheads(ctx.branch())):
                status = 'closed'
            else:
                status = 'open'
            yield {'parity': parity.next(), 'branch': ctx.branch(), 'status': status, 'node': ctx.hex(), 'date': ctx.date(), }
    return tmpl('branches', node=hex(web.repo.changelog.tip()), entries=(lambda **x: entries(0, **x)), latestentry=(lambda **x: entries(1, **x)))
