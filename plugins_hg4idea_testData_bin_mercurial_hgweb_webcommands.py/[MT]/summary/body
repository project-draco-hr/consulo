def summary(web, req, tmpl):
    i = web.repo.tagslist()
    i.reverse()

    def tagentries(**map):
        parity = paritygen(web.stripecount)
        count = 0
        for (k, n) in i:
            if (k == 'tip'):
                continue
            count += 1
            if (count > 10):
                break
            yield tmpl('tagentry', parity=parity.next(), tag=k, node=hex(n), date=web.repo[n].date())

    def branches(**map):
        parity = paritygen(web.stripecount)
        b = web.repo.branchtags()
        l = [((- web.repo.changelog.rev(n)), n, t) for (t, n) in b.iteritems()]
        for (r, n, t) in sorted(l):
            yield {'parity': parity.next(), 'branch': t, 'node': hex(n), 'date': web.repo[n].date(), }

    def changelist(**map):
        parity = paritygen(web.stripecount, offset=(start - end))
        l = []
        for i in xrange(start, end):
            ctx = web.repo[i]
            n = ctx.node()
            hn = hex(n)
            l.insert(0, tmpl('shortlogentry', parity=parity.next(), author=ctx.user(), desc=ctx.description(), date=ctx.date(), rev=i, node=hn, tags=webutil.nodetagsdict(web.repo, n), inbranch=webutil.nodeinbranch(web.repo, ctx), branches=webutil.nodebranchdict(web.repo, ctx)))
        yield l
    cl = web.repo.changelog
    count = len(cl)
    start = max(0, (count - web.maxchanges))
    end = min(count, (start + web.maxchanges))
    return tmpl('summary', desc=web.config('web', 'description', 'unknown'), owner=(get_contact(web.config) or 'unknown'), lastchange=cl.read(cl.tip())[2], tags=tagentries, branches=branches, shortlog=changelist, node=hex(cl.tip()), archives=web.archivelist('tip'))
