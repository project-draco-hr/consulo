def annotate(web, req, tmpl):
    fctx = webutil.filectx(web.repo, req)
    f = fctx.path()
    parity = paritygen(web.stripecount)

    def annotate(**map):
        last = None
        if binary(fctx.data()):
            mt = (mimetypes.guess_type(fctx.path())[0] or 'application/octet-stream')
            lines = enumerate([((fctx.filectx(fctx.filerev()), 1), ('(binary:%s)' % mt))])
        else:
            lines = enumerate(fctx.annotate(follow=True, linenumber=True))
        for (lineno, ((f, targetline), l)) in lines:
            fnode = f.filenode()
            if (last != fnode):
                last = fnode
            yield {'parity': parity.next(), 'node': hex(f.node()), 'rev': f.rev(), 'author': f.user(), 'desc': f.description(), 'file': f.path(), 'targetline': targetline, 'line': l, 'lineid': ('l%d' % (lineno + 1)), 'linenumber': ('% 6d' % (lineno + 1)), }
    return tmpl('fileannotate', file=f, annotate=annotate, path=webutil.up(f), rev=fctx.rev(), node=hex(fctx.node()), author=fctx.user(), date=fctx.date(), desc=fctx.description(), rename=webutil.renamelink(fctx), branch=webutil.nodebranchnodefault(fctx), parent=webutil.parents(fctx), child=webutil.children(fctx), permissions=fctx.manifest().flags(f))
