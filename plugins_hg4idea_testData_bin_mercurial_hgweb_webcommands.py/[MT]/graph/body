def graph(web, req, tmpl):
    rev = webutil.changectx(web.repo, req).rev()
    bg_height = 39
    revcount = web.maxshortchanges
    if ('revcount' in req.form):
        revcount = int(req.form.get('revcount', [revcount])[0])
        tmpl.defaults['sessionvars']['revcount'] = revcount
    lessvars = copy.copy(tmpl.defaults['sessionvars'])
    lessvars['revcount'] = (revcount / 2)
    morevars = copy.copy(tmpl.defaults['sessionvars'])
    morevars['revcount'] = (revcount * 2)
    max_rev = (len(web.repo) - 1)
    revcount = min(max_rev, revcount)
    revnode = web.repo.changelog.node(rev)
    revnode_hex = hex(revnode)
    uprev = min(max_rev, (rev + revcount))
    downrev = max(0, (rev - revcount))
    count = len(web.repo)
    changenav = webutil.revnavgen(rev, revcount, count, web.repo.changectx)
    dag = graphmod.revisions(web.repo, rev, downrev)
    tree = list(graphmod.colored(dag))
    canvasheight = (((len(tree) + 1) * bg_height) - 27)
    data = []
    for (id, type, ctx, vtx, edges) in tree:
        if (type != graphmod.CHANGESET):
            continue
        node = short(ctx.node())
        age = templatefilters.age(ctx.date())
        desc = templatefilters.firstline(ctx.description())
        desc = cgi.escape(templatefilters.nonempty(desc))
        user = cgi.escape(templatefilters.person(ctx.user()))
        branch = ctx.branch()
        branch = (branch, (web.repo.branchtags().get(branch) == ctx.node()))
        data.append((node, vtx, edges, desc, user, age, branch, ctx.tags()))
    return tmpl('graph', rev=rev, revcount=revcount, uprev=uprev, lessvars=lessvars, morevars=morevars, downrev=downrev, canvasheight=canvasheight, jsdata=data, bg_height=bg_height, node=revnode_hex, changenav=changenav)
