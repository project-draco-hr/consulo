{
  ArrayList<String> conflicts=new ArrayList<String>();
  for (  GroovyInlineMethodUtil.ReferenceExpressionInfo info : infos) {
    if (!(PsiUtil.isAccessible(call,info.declaration))) {
      if (info.declaration instanceof PsiMethod) {
        String className=info.containingClass.getName();
        String signature=GroovyRefactoringUtil.getMethodSignature(((PsiMethod)info.declaration));
        String name=CommonRefactoringUtil.htmlEmphasize(className + "." + signature);
        conflicts.add(GroovyRefactoringBundle.message("method.is.not.accessible.form.context.0",name));
      }
 else       if (info.declaration instanceof PsiField) {
        String className=info.containingClass.getName();
        String name=CommonRefactoringUtil.htmlEmphasize(className + "." + info.getPresentation());
        conflicts.add(GroovyRefactoringBundle.message("field.is.not.accessible.form.context.0",name));
      }
    }
  }
  return conflicts;
}
