{
  PsiElement element=usage.getElement();
  if (!(element instanceof GrExpression && element.getParent() instanceof GrCallExpression))   return;
  final Editor editor=getCurrentEditorIfApplicable(element);
  GrCallExpression call=(GrCallExpression)element.getParent();
  RangeMarker marker=inlineReferenceImpl(call,myMethod,isOnExpressionOrReturnPlace(call),GroovyInlineMethodUtil.isTailMethodCall(call),editor);
  if (marker != null) {
    Project project=referenced.getProject();
    TextRange range=TextRange.create(marker);
    GroovyRefactoringUtil.highlightOccurrencesByRanges(project,editor,new TextRange[]{range});
    WindowManager.getInstance().getStatusBar(project).setInfo(GroovyRefactoringBundle.message("press.escape.to.remove.the.highlighting"));
    if (editor != null) {
      editor.getCaretModel().moveToOffset(marker.getEndOffset());
    }
  }
}
