{
  GroovyPsiElementFactory factory=GroovyPsiElementFactory.getInstance(method.getProject());
  if (method instanceof GrReflectedMethod) {
    method=((GrReflectedMethod)method).getBaseMethod();
  }
  GrMethod newMethod=factory.createMethodFromText(method.getText());
  if (qualifier != null) {
    Collection<GroovyInlineMethodUtil.ReferenceExpressionInfo> infos=GroovyInlineMethodUtil.collectReferenceInfo(method);
    GroovyInlineMethodUtil.addQualifiersToInnerReferences(newMethod,infos,qualifier);
  }
  ArrayList<PsiNamedElement> innerDefinitions=new ArrayList<PsiNamedElement>();
  collectInnerDefinitions(newMethod.getBlock(),innerDefinitions);
  for (  PsiNamedElement namedElement : innerDefinitions) {
    String name=namedElement.getName();
    if (name != null) {
      String newName=qualifier instanceof GrReferenceExpression ? InlineMethodConflictSolver.suggestNewName(name,method,call,((GrReferenceExpression)qualifier).getName()) : InlineMethodConflictSolver.suggestNewName(name,method,call);
      if (!newName.equals(namedElement.getName())) {
        final Collection<PsiReference> refs=ReferencesSearch.search(namedElement,GlobalSearchScope.projectScope(namedElement.getProject()),false).findAll();
        for (        PsiReference ref : refs) {
          PsiElement element=ref.getElement();
          if (element instanceof GrReferenceExpression) {
            GrExpression newExpr=factory.createExpressionFromText(newName);
            ((GrReferenceExpression)element).replaceWithExpression(newExpr,false);
          }
        }
        namedElement.setName(newName);
      }
    }
  }
  GroovyInlineMethodUtil.replaceParametersWithArguments(call,newMethod);
  return newMethod;
}
