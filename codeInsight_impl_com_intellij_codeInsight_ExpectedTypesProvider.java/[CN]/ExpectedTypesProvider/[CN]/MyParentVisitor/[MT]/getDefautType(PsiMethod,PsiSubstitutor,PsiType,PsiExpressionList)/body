{
  final PsiClass containingClass=method.getContainingClass();
  if (containingClass == null)   return parameterType;
  @NonNls final String name=method.getName();
  if ("contains".equals(name) || "remove".equals(name)) {
    final PsiType type=checkMethod(method,CommonClassNames.JAVA_UTIL_COLLECTION,new NullableFunction<PsiClass,PsiType>(){
      public PsiType fun(      final PsiClass psiClass){
        return getTypeParameterValue(psiClass,containingClass,substitutor,0);
      }
    }
);
    if (type != null)     return type;
  }
  if ("containsKey".equals(name) || "remove".equals(name) || "get".equals(name)|| "containsValue".equals(name)) {
    final PsiType type=checkMethod(method,CommonClassNames.JAVA_UTIL_MAP,new NullableFunction<PsiClass,PsiType>(){
      public PsiType fun(      final PsiClass psiClass){
        return getTypeParameterValue(psiClass,containingClass,substitutor,name.equals("containsValue") ? 1 : 0);
      }
    }
);
    if (type != null)     return type;
  }
  if ("equals".equals(name)) {
    final PsiType type=checkMethod(method,CommonClassNames.JAVA_LANG_OBJECT,new NullableFunction<PsiClass,PsiType>(){
      public PsiType fun(      final PsiClass psiClass){
        final PsiElement parent=argumentList.getParent();
        if (parent instanceof PsiMethodCallExpression) {
          final PsiMethodCallExpression expression=(PsiMethodCallExpression)parent;
          final PsiExpression qualifierExpression=expression.getMethodExpression().getQualifierExpression();
          if (qualifierExpression != null) {
            return qualifierExpression.getType();
          }
          final PsiClass aClass=PsiTreeUtil.getContextOfType(parent,PsiClass.class,true);
          if (aClass != null) {
            return JavaPsiFacade.getInstance(aClass.getProject()).getElementFactory().createType(aClass);
          }
        }
        return null;
      }
    }
);
    if (type != null)     return type;
  }
  return parameterType;
}
