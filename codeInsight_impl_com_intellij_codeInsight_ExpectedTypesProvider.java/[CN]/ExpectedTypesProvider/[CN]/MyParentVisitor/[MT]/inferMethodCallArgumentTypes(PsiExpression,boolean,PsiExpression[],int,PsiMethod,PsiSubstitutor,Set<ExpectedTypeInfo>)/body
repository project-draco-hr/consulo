{
  PsiParameter[] parameters=method.getParameterList().getParameters();
  if (!forCompletion && parameters.length != args.length)   return;
  if (parameters.length <= index && !method.isVarArgs())   return;
  for (int j=0; j < index; j++) {
    PsiType paramType=getParameterType(parameters[Math.min(parameters.length - 1,j)],substitutor);
    PsiType argType=args[j].getType();
    if (argType != null && !paramType.isAssignableFrom(argType))     return;
  }
  PsiParameter parameter=parameters[Math.min(parameters.length - 1,index)];
  PsiType parameterType=getParameterType(parameter,substitutor);
  TailType tailType;
  if (index >= parameters.length) {
    tailType=TailType.NONE;
  }
 else   if (index == parameters.length - 1) {
    PsiType returnType=method.getReturnType();
    tailType=(returnType == null || returnType == PsiType.VOID) && isArgumentOfTopLevelExpression(argument) ? TailTypes.CALL_RPARENTH_SEMICOLON : TailTypes.CALL_RPARENTH;
  }
 else {
    tailType=TailType.COMMA;
  }
  PsiType defaultType=getDefautType(method,substitutor,parameterType,argument);
  ExpectedTypeInfoImpl info=createInfoImpl(parameterType,ExpectedTypeInfo.TYPE_OR_SUBTYPE,defaultType,tailType);
  info.setInsertExplicitTypeParams(true);
  info.setCalledMethod(method);
  String propertyName=getPropertyName(parameter);
  if (propertyName != null)   info.expectedName=propertyName;
  array.add(info);
  if (index == parameters.length - 1 && parameter.isVarArgs()) {
    final PsiArrayType arrayType=parameterType.createArrayType();
    ExpectedTypeInfoImpl info1=createInfoImpl(arrayType,ExpectedTypeInfo.TYPE_OR_SUBTYPE,arrayType,tailType);
    info1.setInsertExplicitTypeParams(true);
    info1.setCalledMethod(method);
    info1.expectedName=propertyName;
    array.add(info1);
  }
}
