{
  if (methodCandidates.length == 0) {
    return ExpectedTypeInfo.EMPTY_ARRAY;
  }
  final PsiExpression[] args=argumentList.getExpressions();
  final int index=ArrayUtil.indexOf(args,argument);
  LOG.assertTrue(index >= 0);
  final PsiExpression[] leftArgs;
  if (index <= args.length - 1) {
    leftArgs=new PsiExpression[index];
    System.arraycopy(args,0,leftArgs,0,index);
  }
 else {
    leftArgs=null;
  }
  Set<ExpectedTypeInfo> array=new LinkedHashSet<ExpectedTypeInfo>();
  for (  CandidateInfo candidateInfo : methodCandidates) {
    PsiMethod method=(PsiMethod)candidateInfo.getElement();
    PsiSubstitutor substitutor;
    if (candidateInfo instanceof MethodCandidateInfo) {
      final MethodCandidateInfo info=(MethodCandidateInfo)candidateInfo;
      substitutor=info.inferTypeArguments(forCompletion);
      if (!info.isStaticsScopeCorrect() && method != null && !method.getModifierList().hasModifierProperty(PsiModifier.STATIC))       continue;
    }
 else {
      substitutor=candidateInfo.getSubstitutor();
    }
    inferMethodCallArgumentTypes(argument,forCompletion,args,index,method,substitutor,array);
    if (leftArgs != null && candidateInfo instanceof MethodCandidateInfo) {
      substitutor=((MethodCandidateInfo)candidateInfo).inferTypeArguments(forCompletion,leftArgs);
      inferMethodCallArgumentTypes(argument,forCompletion,leftArgs,index,method,substitutor,array);
    }
  }
  if (forCompletion && array.isEmpty()) {
    for (    CandidateInfo candidate : methodCandidates) {
      PsiMethod method=(PsiMethod)candidate.getElement();
      PsiSubstitutor substitutor=candidate.getSubstitutor();
      PsiParameter[] parms=method.getParameterList().getParameters();
      if (parms.length <= index)       continue;
      PsiParameter parm=parms[index];
      PsiType parmType=getParameterType(parm,substitutor);
      TailType tailType=getMethodArgumentTailType(argument,index,method,substitutor,parms);
      ExpectedTypeInfoImpl info=createInfoImpl(parmType,ExpectedTypeInfo.TYPE_OR_SUBTYPE,parmType,tailType);
      info.expectedName=getPropertyName(parm);
      info.setCalledMethod(method);
      array.add(info);
    }
  }
  return array.toArray(new ExpectedTypeInfo[array.size()]);
}
