{
  final PsiManager manager=expression.getManager();
  PsiField[] fields=myClassProvider.findDeclaredFields(expression.getManager(),expression.getReferenceName());
  List<ExpectedTypeInfo> types=new ArrayList<ExpectedTypeInfo>();
  for (  PsiField field : fields) {
    final PsiClass aClass=field.getContainingClass();
    if (!manager.getResolveHelper().isAccessible(field,expression,aClass))     continue;
    final PsiType type=manager.getElementFactory().createType(aClass);
    int kind=field.hasModifierProperty(PsiModifier.STATIC) || field.hasModifierProperty(PsiModifier.FINAL) || field.hasModifierProperty(PsiModifier.PRIVATE) ? ExpectedTypeInfo.TYPE_STRICTLY : ExpectedTypeInfo.TYPE_OR_SUBTYPE;
    ExpectedTypeInfo info=createInfoImpl(type,kind,type,TailType.DOT);
    types.add(info);
  }
  return types.toArray(new ExpectedTypeInfo[types.size()]);
}
