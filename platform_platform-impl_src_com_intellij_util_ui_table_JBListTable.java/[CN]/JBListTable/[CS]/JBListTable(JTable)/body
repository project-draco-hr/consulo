{
  super(new BorderLayout());
  myInternalTable=t;
  final JBListTableModel model=new JBListTableModel(t){
    @Override public JBTableRow getRow(    int index){
      return getRowAt(index);
    }
    @Override public boolean isCellEditable(    int rowIndex,    int columnIndex){
      return isRowEditable(rowIndex);
    }
  }
;
  mainTable=new JBTable(model){
    @Override protected void processKeyEvent(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_ENTER && e.getModifiers() == 0) {
        if (!isEditing() && e.getID() == KeyEvent.KEY_PRESSED) {
          editCellAt(getSelectedRow(),getSelectedColumn());
        }
        e.consume();
      }
 else       if (e.getKeyCode() == KeyEvent.VK_TAB) {
        if (e.getID() == KeyEvent.KEY_PRESSED) {
          final KeyboardFocusManager keyboardFocusManager=KeyboardFocusManager.getCurrentKeyboardFocusManager();
          if (e.isShiftDown()) {
            keyboardFocusManager.focusPreviousComponent(this);
          }
 else {
            keyboardFocusManager.focusNextComponent(this);
          }
        }
        e.consume();
      }
 else {
        super.processKeyEvent(e);
      }
    }
    @Override public TableCellRenderer getCellRenderer(    int row,    int column){
      return new DefaultTableCellRenderer(){
        @Override public Component getTableCellRendererComponent(        JTable table,        Object value,        boolean selected,        boolean hasFocus,        int row,        int col){
          return getRowRenderer(t,row,selected,hasFocus);
        }
      }
;
    }
    @Override protected boolean processKeyBinding(    KeyStroke ks,    KeyEvent e,    int condition,    boolean pressed){
      if (isEditing() && e.getKeyCode() == KeyEvent.VK_TAB) {
        if (pressed) {
          final KeyboardFocusManager mgr=KeyboardFocusManager.getCurrentKeyboardFocusManager();
          if (e.isShiftDown()) {
            mgr.focusPreviousComponent();
          }
 else {
            mgr.focusNextComponent();
          }
        }
        return true;
      }
      return super.processKeyBinding(ks,e,condition,pressed);
    }
    @Override public TableCellEditor getCellEditor(    final int row,    int column){
      final JBTableRowEditor editor=getRowEditor(row);
      if (editor != null) {
        editor.prepareEditor(t,row);
        installPaddingAndBordersForEditors(editor);
        editor.setFocusCycleRoot(true);
        editor.setFocusTraversalPolicy(new JBListTableFocusTraversalPolicy(editor));
        return new AbstractTableCellEditor(){
          JTable curTable=null;
          @Override public Component getTableCellEditorComponent(          final JTable table,          Object value,          boolean isSelected,          final int row,          int column){
            curTable=table;
            final JPanel p=new JPanel(new BorderLayout()){
              @Override public void addNotify(){
                super.addNotify();
                final int height=(int)getPreferredSize().getHeight();
                if (height > table.getRowHeight(row)) {
                  new RowResizeAnimator(table,row,height).start();
                }
              }
              public void removeNotify(){
                super.removeNotify();
                new RowResizeAnimator(table,row,table.getRowHeight()).start();
              }
            }
;
            p.add(editor,BorderLayout.CENTER);
            return p;
          }
          @Override public Object getCellEditorValue(){
            return editor.getValue();
          }
          @Override public boolean stopCellEditing(){
            return super.stopCellEditing();
          }
          @Override public void cancelCellEditing(){
            super.cancelCellEditing();
          }
        }
;
      }
      return null;
    }
    @Override public Component prepareEditor(    TableCellEditor editor,    int row,    int column){
      Object value=getValueAt(row,column);
      boolean isSelected=isCellSelected(row,column);
      return editor.getTableCellEditorComponent(this,value,isSelected,row,column);
    }
  }
;
  mainTable.setStriped(true);
}
