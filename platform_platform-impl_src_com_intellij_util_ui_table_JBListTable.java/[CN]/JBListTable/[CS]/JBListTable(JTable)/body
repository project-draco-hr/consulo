{
  super(new BorderLayout());
  myInternalTable=t;
  final JBListTableModel model=new JBListTableModel(t.getModel()){
    @Override public JBTableRow getRow(    int index){
      return getRowAt(index);
    }
    @Override public boolean isCellEditable(    int rowIndex,    int columnIndex){
      return isRowEditable(rowIndex);
    }
  }
;
  mainTable=new JBTable(model){
    @Override protected void processKeyEvent(    KeyEvent e){
      myMouseEvent=null;
      if (e.isAltDown()) {
        super.processKeyEvent(e);
        return;
      }
      if (e.getKeyCode() == VK_TAB) {
        if (e.getID() == KEY_PRESSED) {
          final KeyboardFocusManager keyboardFocusManager=KeyboardFocusManager.getCurrentKeyboardFocusManager();
          if (e.isShiftDown()) {
            keyboardFocusManager.focusPreviousComponent(this);
          }
 else {
            keyboardFocusManager.focusNextComponent(this);
          }
        }
        e.consume();
        return;
      }
      super.processKeyEvent(e);
    }
    @Override protected void processMouseEvent(    MouseEvent e){
      myMouseEvent=e;
      super.processMouseEvent(e);
    }
    @Override public TableCellRenderer getCellRenderer(    int row,    int column){
      return new DefaultTableCellRenderer(){
        @Override public Component getTableCellRendererComponent(        JTable table,        Object value,        boolean selected,        boolean hasFocus,        int row,        int col){
          return getRowRenderer(t,row,selected,hasFocus);
        }
      }
;
    }
    @Override protected boolean processKeyBinding(    KeyStroke ks,    KeyEvent e,    int condition,    boolean pressed){
      if (e.isAltDown() || e.isMetaDown() || e.isControlDown()) {
        return false;
      }
      if (e.getKeyCode() == VK_ESCAPE) {
        final int row=getSelectedRow();
        if (row != -1 && isRowEmpty(row)) {
          final int count=model.getRowCount();
          model.removeRow(row);
          int newRow=count == row + 1 ? row - 1 : row;
          setRowSelectionInterval(newRow,newRow);
        }
      }
      if (e.getKeyCode() == VK_ENTER) {
        if (e.getID() == KEY_PRESSED) {
          if (!isEditing() && e.getModifiers() == 0) {
            editCellAt(getSelectedRow(),getSelectedColumn());
          }
 else           if (isEditing()) {
            TableUtil.stopEditing(this);
            if (e.isControlDown() || e.isMetaDown()) {
              return false;
            }
 else {
              final int row=getSelectedRow() + 1;
              if (row < getRowCount()) {
                getSelectionModel().setSelectionInterval(row,row);
              }
            }
          }
 else {
            if (e.isControlDown() || e.isMetaDown()) {
              return false;
            }
          }
        }
        e.consume();
        return true;
      }
      if (isEditing() && e.getKeyCode() == VK_TAB) {
        if (pressed) {
          final KeyboardFocusManager mgr=KeyboardFocusManager.getCurrentKeyboardFocusManager();
          if (e.isShiftDown()) {
            mgr.focusPreviousComponent();
          }
 else {
            mgr.focusNextComponent();
          }
        }
        return true;
      }
      final boolean isUp=e.getKeyCode() == KeyEvent.VK_UP;
      final boolean isDown=e.getKeyCode() == KeyEvent.VK_DOWN;
      if (isEditing() && (isUp || isDown) && e.getModifiers() == 0 && e.getID() == KEY_PRESSED) {
        int row=getSelectedRow();
        super.processKeyBinding(ks,e,condition,pressed);
        if (!isEditing() && row != getSelectedRow()) {
          TableUtil.editCellAt(this,getSelectedRow(),0);
          e.consume();
          return true;
        }
      }
      return super.processKeyBinding(ks,e,condition,pressed);
    }
    @Override public TableCellEditor getCellEditor(    final int row,    int column){
      final JBTableRowEditor editor=getRowEditor(row);
      if (editor != null) {
        editor.setMouseEvent(myMouseEvent);
        editor.prepareEditor(t,row);
        installPaddingAndBordersForEditors(editor);
        editor.setFocusCycleRoot(true);
        editor.setFocusTraversalPolicy(new JBListTableFocusTraversalPolicy(editor));
        MouseSuppressor.install(editor);
        myCellEditor=new MyCellEditor(editor);
        return myCellEditor;
      }
      myCellEditor=null;
      return myCellEditor;
    }
    @Override public Component prepareEditor(    TableCellEditor editor,    int row,    int column){
      Object value=getValueAt(row,column);
      boolean isSelected=isCellSelected(row,column);
      return editor.getTableCellEditorComponent(this,value,isSelected,row,column);
    }
  }
;
  mainTable.setStriped(true);
}
