{
  if (myRanges == null || myRanges.isEmpty())   return Collections.emptyList();
  final List<BeforeAfter<TextRange>> shiftedRanges=new ArrayList<BeforeAfter<TextRange>>(myRanges.size());
  final int oldLineCount=myOldDocument.getLineCount();
  final int lineCount=myDocument.getLineCount();
  for (  BeforeAfter<TextRange> range : myRanges) {
    final TextRange newBefore=expandRange(range.getBefore(),lines,oldLineCount);
    final TextRange newAfter=expandRange(range.getAfter(),lines,lineCount);
    shiftedRanges.add(new BeforeAfter<TextRange>(newBefore,newAfter));
  }
  final List<BeforeAfter<TextRange>> zippedRanges=new ArrayList<BeforeAfter<TextRange>>(myRanges.size());
  final ListIterator<BeforeAfter<TextRange>> iterator=shiftedRanges.listIterator();
  BeforeAfter<TextRange> previous=iterator.next();
  while (iterator.hasNext()) {
    final BeforeAfter<TextRange> current=iterator.next();
    if (previous.getBefore().intersects(current.getBefore()) || previous.getAfter().intersects(current.getAfter())) {
      previous=new BeforeAfter<TextRange>(previous.getBefore().union(current.getBefore()),previous.getAfter().union(current.getAfter()));
    }
 else {
      zippedRanges.add(previous);
      previous=current;
    }
  }
  zippedRanges.add(previous);
  return zippedRanges;
}
