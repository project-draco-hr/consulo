{
  final FilePath filePath=ChangesUtil.getFilePath(change);
  final RangesCalculator calculator=new RangesCalculator();
  calculator.execute(change,filePath,myRangesCache,LineStatusTrackerManager.getInstance(myProject));
  final VcsException exception=calculator.getException();
  if (exception != null) {
    throw exception;
  }
  final List<BeforeAfter<TextRange>> ranges=calculator.expand(extraLines);
  final PreparedFragmentedContent preparedFragmentedContent=new PreparedFragmentedContent(new FragmentedContent(calculator.getOldDocument(),calculator.getDocument(),ranges));
  if (!ranges.isEmpty()) {
    EditorHighlighterFactory editorHighlighterFactory=EditorHighlighterFactory.getInstance();
    final SyntaxHighlighter syntaxHighlighter=SyntaxHighlighter.PROVIDER.create(filePath.getFileType(),myProject,null);
    final EditorHighlighter highlighter=editorHighlighterFactory.createEditorHighlighter(syntaxHighlighter,EditorColorsManager.getInstance().getGlobalScheme());
    highlighter.setEditor(new LightHighlighterClient(calculator.myOldDocument,myProject));
    highlighter.setText(calculator.myOldDocument.getText());
    HighlighterIterator iterator=highlighter.createIterator(ranges.get(0).getBefore().getStartOffset());
    FragmentedEditorHighlighter beforeHighlighter=new FragmentedEditorHighlighter(iterator,preparedFragmentedContent.getBeforeFragments());
    preparedFragmentedContent.setBeforeHighlighter(beforeHighlighter);
    final EditorHighlighter highlighter1=editorHighlighterFactory.createEditorHighlighter(syntaxHighlighter,EditorColorsManager.getInstance().getGlobalScheme());
    highlighter1.setEditor(new LightHighlighterClient(calculator.myDocument,myProject));
    highlighter1.setText(calculator.myDocument.getText());
    HighlighterIterator iterator1=highlighter1.createIterator(ranges.get(0).getAfter().getStartOffset());
    FragmentedEditorHighlighter afterHighlighter=new FragmentedEditorHighlighter(iterator1,preparedFragmentedContent.getAfterFragments());
    preparedFragmentedContent.setAfterHighlighter(afterHighlighter);
  }
  return preparedFragmentedContent;
}
