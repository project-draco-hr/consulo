{
  if (ChangesUtil.isTextConflictingChange(change))   return null;
  if (ShowDiffAction.isBinaryChange(myProject,change))   return null;
  final FilePath filePath=ChangesUtil.getFilePath(change);
  if (filePath.isDirectory())   return null;
  final RangesCalculator calculator=new RangesCalculator();
  calculator.execute(change,filePath,myRangesCache,LineStatusTrackerManager.getInstance(myProject));
  final VcsException exception=calculator.getException();
  if (exception != null) {
    throw exception;
  }
  final FileType fileType=filePath.getFileType();
  final List<BeforeAfter<TextRange>> ranges=calculator.expand(extraLines);
  final List<BeforeAfter<ShiftedSimpleContent>> result=new ArrayList<BeforeAfter<ShiftedSimpleContent>>(ranges.size());
  final VirtualFile vFile=filePath.getVirtualFile();
  for (  BeforeAfter<TextRange> range : ranges) {
    final TextRange beforeRange=range.getBefore();
    final TextRange convertedBefore=new TextRange(calculator.getOldDocument().getLineStartOffset(beforeRange.getStartOffset()),calculator.getOldDocument().getLineStartOffset(beforeRange.getEndOffset()));
    final ShiftedSimpleContent before=new ShiftedSimpleContent(calculator.getOldDocument().getText(convertedBefore),fileType,beforeRange.getStartOffset());
    final TextRange afterRange=range.getAfter();
    final TextRange convertedAfter=new TextRange(calculator.getDocument().getLineStartOffset(afterRange.getStartOffset()),calculator.getDocument().getLineStartOffset(afterRange.getEndOffset()));
    final ShiftedSimpleContent after=new ShiftedSimpleContent(calculator.getDocument().getText(convertedAfter),fileType,afterRange.getStartOffset());
    if (vFile != null) {
      before.setCharset(vFile.getCharset());
      before.setBOM(vFile.getBOM());
      after.setCharset(vFile.getCharset());
      after.setBOM(vFile.getBOM());
    }
    result.add(new BeforeAfter<ShiftedSimpleContent>(before,after));
  }
  return result;
}
