{
  final FilePath filePath=ChangesUtil.getFilePath(change);
  final RangesCalculator calculator=new RangesCalculator();
  calculator.execute(change,filePath,myRangesCache,LineStatusTrackerManager.getInstance(myProject));
  final VcsException exception=calculator.getException();
  if (exception != null) {
    LOG.info(exception);
    throw exception;
  }
  List<BeforeAfter<TextRange>> ranges=calculator.getRanges();
  if (ranges == null || ranges.isEmpty())   return null;
  FragmentedContent fragmentedContent=new FragmentedContent(calculator.getOldDocument(),calculator.getDocument(),ranges);
  final FileStatus fs=change.getFileStatus();
  fragmentedContent.setIsAddition(FileStatus.ADDED.equals(fs));
  fragmentedContent.setOneSide(FileStatus.ADDED.equals(fs) || FileStatus.DELETED.equals(fs));
  VirtualFile file=filePath.getVirtualFile();
  if (file == null) {
    filePath.hardRefresh();
    file=filePath.getVirtualFile();
  }
  final PreparedFragmentedContent preparedFragmentedContent=new PreparedFragmentedContent(myProject,fragmentedContent,filePath.getName(),filePath.getFileType(),change.getBeforeRevision() == null ? null : change.getBeforeRevision().getRevisionNumber(),change.getAfterRevision() == null ? null : change.getAfterRevision().getRevisionNumber(),filePath,file);
  return preparedFragmentedContent;
}
