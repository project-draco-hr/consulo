{
  final PsiBinaryExpression exp=(PsiBinaryExpression)element;
  final PsiExpression lhs=exp.getLOperand();
  final PsiExpression rhs=exp.getROperand();
  final PsiJavaToken sign=exp.getOperationSign();
  final IElementType tokenType=sign.getTokenType();
  final String operatorString;
  if (tokenType.equals(JavaTokenType.LTLT)) {
    operatorString="*";
  }
 else {
    operatorString="/";
  }
  final String lhsText;
  if (ParenthesesUtils.getPrecedence(lhs) > ParenthesesUtils.MULTIPLICATIVE_PRECEDENCE) {
    lhsText='(' + lhs.getText() + ')';
  }
 else {
    lhsText=lhs.getText();
  }
  String expString=lhsText + operatorString + ShiftUtils.getExpBase2(rhs);
  final PsiElement parent=exp.getParent();
  if (parent instanceof PsiExpression) {
    if (!(parent instanceof PsiParenthesizedExpression) && ParenthesesUtils.getPrecedence((PsiExpression)parent) < ParenthesesUtils.MULTIPLICATIVE_PRECEDENCE) {
      expString='(' + expString + ')';
    }
  }
  replaceExpression(expString,exp);
}
