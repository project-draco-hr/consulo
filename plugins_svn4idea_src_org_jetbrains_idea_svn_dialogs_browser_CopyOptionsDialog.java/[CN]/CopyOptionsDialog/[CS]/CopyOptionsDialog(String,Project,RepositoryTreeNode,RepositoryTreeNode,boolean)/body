{
  super(project,true);
  myProject=project;
  myURL=node.getURL();
  createUI();
  if (copy) {
    myTargetURL.setForeground(FileStatus.COLOR_ADDED);
    setOKButtonText("Copy");
  }
 else {
    myTargetURL.setForeground(FileStatus.COLOR_MODIFIED);
    setOKButtonText("Move");
  }
  myURLLabel.setText(myURL.toString());
  final TreeNode[] path=node.getSelfPath();
  final TreeNode[] subPath=new TreeNode[path.length - 1];
  System.arraycopy(path,1,subPath,0,path.length - 1);
  myBrowser.setRepositoryURL(root.getURL(),false,new OpeningExpander.Factory(subPath,(RepositoryTreeNode)((node.getParent() instanceof RepositoryTreeNode) ? node.getParent() : null)));
  myBrowser.addChangeListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      update();
    }
  }
);
  myNameField.setText(SVNPathUtil.tail(myURL.getPath()));
  myNameField.selectAll();
  myNameField.getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    final DocumentEvent e){
      update();
    }
  }
);
  ArrayList<String> messages=VcsConfiguration.getInstance(myProject).getRecentMessages();
  Collections.reverse(messages);
  Object[] model=messages.toArray();
  myMessagesBox.setModel(new DefaultComboBoxModel(model));
  myMessagesBox.setRenderer(new MessageBoxCellRenderer());
  String lastMessage=VcsConfiguration.getInstance(myProject).getLastNonEmptyCommitMessage();
  if (lastMessage != null) {
    myCommitMessage.setText(lastMessage);
    myCommitMessage.selectAll();
  }
  myMessagesBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final Object item=myMessagesBox.getSelectedItem();
      if (item != null) {
        myCommitMessage.setText(item.toString());
        myCommitMessage.selectAll();
      }
    }
  }
);
  Disposer.register(getDisposable(),myBrowser);
  setTitle(title);
  init();
  update();
}
