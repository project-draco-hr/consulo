{
  final StatusBar statusBar=getStatusBar();
  final PositionPanel positionPanel=new PositionPanel(project);
  statusBar.addWidget(positionPanel,"before " + IdeMessagePanel.FATAL_ERROR);
  final IdeNotificationArea notificationArea=new IdeNotificationArea();
  statusBar.addWidget(notificationArea,"before " + IdeMessagePanel.FATAL_ERROR);
  final EncodingPanel encodingPanel=new EncodingPanel(project);
  statusBar.addWidget(encodingPanel,"after Position");
  final LineSeparatorPanel lineSeparatorPanel=new LineSeparatorPanel(project);
  statusBar.addWidget(lineSeparatorPanel,"before " + positionPanel.ID());
  final ModuleLayerWidget moduleLayerWidget=new ModuleLayerWidget(project);
  statusBar.addWidget(moduleLayerWidget,"after " + lineSeparatorPanel.ID());
  final ToggleReadOnlyAttributePanel readOnlyAttributePanel=new ToggleReadOnlyAttributePanel();
  final InsertOverwritePanel insertOverwritePanel=new InsertOverwritePanel(project);
  statusBar.addWidget(insertOverwritePanel,"after Encoding");
  statusBar.addWidget(readOnlyAttributePanel,"after InsertOverwrite");
  final BackgroundTaskWidget backgroundTaskWidget=new BackgroundTaskWidget(project);
  statusBar.addWidget(backgroundTaskWidget,"after ReadOnlyAttribute");
  Disposer.register(project,new Disposable(){
    @Override public void dispose(){
      statusBar.removeWidget(encodingPanel.ID());
      statusBar.removeWidget(moduleLayerWidget.ID());
      statusBar.removeWidget(lineSeparatorPanel.ID());
      statusBar.removeWidget(positionPanel.ID());
      statusBar.removeWidget(notificationArea.ID());
      statusBar.removeWidget(backgroundTaskWidget.ID());
      statusBar.removeWidget(readOnlyAttributePanel.ID());
      statusBar.removeWidget(insertOverwritePanel.ID());
      ((StatusBarEx)statusBar).removeCustomIndicationComponents();
    }
  }
);
}
