{
  final StatusBar statusBar=getStatusBar();
  final PositionPanel positionPanel=new PositionPanel(project);
  statusBar.addWidget(positionPanel,"before " + IdeMessagePanel.FATAL_ERROR);
  final IdeNotificationArea notificationArea=new IdeNotificationArea();
  statusBar.addWidget(notificationArea,"before " + IdeMessagePanel.FATAL_ERROR);
  final EncodingPanel encodingPanel=new EncodingPanel(project);
  statusBar.addWidget(encodingPanel,"after Position");
  final LineSeparatorPanel lineSeparatorPanel=new LineSeparatorPanel(project);
  statusBar.addWidget(lineSeparatorPanel,"before " + encodingPanel.ID());
  final ToggleReadOnlyAttributePanel readOnlyAttributePanel=new ToggleReadOnlyAttributePanel();
  InsertOverwritePanel insertOverwritePanel=null;
  if (!SystemInfo.isMac) {
    insertOverwritePanel=new InsertOverwritePanel(project);
    statusBar.addWidget(insertOverwritePanel,"after Encoding");
    statusBar.addWidget(readOnlyAttributePanel,"after InsertOverwrite");
  }
 else {
    statusBar.addWidget(readOnlyAttributePanel,"after Encoding");
  }
  final InsertOverwritePanel finalInsertOverwritePanel=insertOverwritePanel;
  Disposer.register(project,new Disposable(){
    public void dispose(){
      statusBar.removeWidget(encodingPanel.ID());
      statusBar.removeWidget(lineSeparatorPanel.ID());
      statusBar.removeWidget(positionPanel.ID());
      statusBar.removeWidget(notificationArea.ID());
      statusBar.removeWidget(readOnlyAttributePanel.ID());
      if (finalInsertOverwritePanel != null)       statusBar.removeWidget(finalInsertOverwritePanel.ID());
      ((StatusBarEx)statusBar).removeCustomIndicationComponents();
    }
  }
);
}
