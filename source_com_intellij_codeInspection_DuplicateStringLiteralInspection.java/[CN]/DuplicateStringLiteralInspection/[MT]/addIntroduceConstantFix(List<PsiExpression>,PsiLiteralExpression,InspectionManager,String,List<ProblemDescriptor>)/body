{
  final PsiExpression[] expressions=foundExpr.toArray(new PsiExpression[foundExpr.size() + 1]);
  expressions[foundExpr.size()]=originalExpression;
  final LocalQuickFix introduceQuickFix=new LocalQuickFix(){
    public String getName(){
      return IntroduceConstantHandler.REFACTORING_NAME;
    }
    public void applyFix(    final Project project,    ProblemDescriptor descriptor){
      final IntroduceConstantHandler handler=new IntroduceConstantHandler(){
        protected OccurenceManager createOccurenceManager(        PsiExpression selectedExpr,        PsiClass parentClass){
          final OccurenceFilter filter=new OccurenceFilter(){
            public boolean isOK(            PsiExpression occurence){
              return true;
            }
          }
;
          return new BaseOccurenceManager(filter){
            protected PsiExpression[] defaultOccurences(){
              return findOccurences();
            }
            protected PsiExpression[] findOccurences(){
              List<PsiExpression> validExpressions=new ArrayList<PsiExpression>(foundExpr);
              for (              PsiExpression expression : validExpressions) {
                if (expression.isValid()) {
                  validExpressions.add(expression);
                }
              }
              return validExpressions.toArray(new PsiExpression[validExpressions.size()]);
            }
          }
;
        }
      }
;
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          handler.invoke(project,expressions);
        }
      }
);
    }
  }
;
  ProblemDescriptor problemDescriptor=manager.createProblemDescriptor(originalExpression,msg,introduceQuickFix,ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
  allProblems.add(problemDescriptor);
}
