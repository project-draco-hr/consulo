{
  super.visitBinaryExpression(expression);
  final PsiJavaToken sign=expression.getOperationSign();
  if (sign == null) {
    return;
  }
  final IElementType tokenType=sign.getTokenType();
  if (!tokenType.equals(JavaTokenType.DIV)) {
    return;
  }
  final PsiExpression lhs=expression.getLOperand();
  if (lhs == null) {
    return;
  }
  final PsiType lhsType=lhs.getType();
  if (!isIntegral(lhsType)) {
    return;
  }
  final PsiExpression rhs=expression.getROperand();
  if (rhs == null) {
    return;
  }
  final PsiType rhsType=rhs.getType();
  if (!isIntegral(rhsType)) {
    return;
  }
  final PsiExpression context=getContainingExpression(expression);
  if (context == null) {
    return;
  }
  final PsiType contextType=ExpectedTypeUtils.findExpectedType(context);
  if (contextType == null) {
    return;
  }
  if (!(contextType.equals(PsiType.FLOAT) || contextType.equals(PsiType.DOUBLE))) {
    return;
  }
  registerError(expression);
}
