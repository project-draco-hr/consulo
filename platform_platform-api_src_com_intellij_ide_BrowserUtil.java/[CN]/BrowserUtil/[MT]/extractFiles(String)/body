{
  try {
    int sharpPos=url.indexOf('#');
    String anchor="";
    if (sharpPos != -1) {
      anchor=url.substring(sharpPos);
      url=url.substring(0,sharpPos);
    }
    VirtualFile file=VirtualFileManager.getInstance().findFileByUrl(url);
    if (file == null || !(file.getFileSystem() instanceof JarFileSystem))     return null;
    JarFileSystem jarFileSystem=(JarFileSystem)file.getFileSystem();
    VirtualFile jarVirtualFile=jarFileSystem.getVirtualFileForJar(file);
    if (jarVirtualFile == null)     return null;
    String targetFilePath=file.getPath();
    String targetFileRelativePath=StringUtil.substringAfter(targetFilePath,JarFileSystem.JAR_SEPARATOR);
    String jarVirtualFileLocationHash=jarVirtualFile.getName() + Integer.toHexString(jarVirtualFile.getUrl().hashCode());
    final File outputDir=new File(getExtractedFilesDir(),jarVirtualFileLocationHash);
    final String currentTimestamp=String.valueOf(new File(jarVirtualFile.getPath()).lastModified());
    final File timestampFile=new File(outputDir,".idea.timestamp");
    String previousTimestamp=null;
    if (timestampFile.exists()) {
      previousTimestamp=FileUtil.loadFile(timestampFile);
    }
    if (!currentTimestamp.equals(previousTimestamp)) {
      final Ref<Boolean> extract=new Ref<Boolean>();
      Runnable r=new Runnable(){
        public void run(){
          final ConfirmExtractDialog dialog=new ConfirmExtractDialog();
          if (dialog.isToBeShown()) {
            dialog.show();
            extract.set(dialog.isOK());
          }
 else {
            dialog.close(DialogWrapper.OK_EXIT_CODE);
            extract.set(true);
          }
        }
      }
;
      try {
        GuiUtils.runOrInvokeAndWait(r);
      }
 catch (      InvocationTargetException e) {
        extract.set(false);
      }
catch (      InterruptedException e) {
        extract.set(false);
      }
      if (!extract.get())       return null;
      final ZipFile jarFile=jarFileSystem.getJarFile(file);
      ZipEntry entry=jarFile.getEntry(targetFileRelativePath);
      if (entry == null)       return null;
      InputStream is=jarFile.getInputStream(entry);
      try {
        ZipUtil.extractEntry(entry,is,outputDir);
      }
  finally {
        is.close();
      }
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          new Task.Backgroundable(null,"Extracting files...",true){
            public void run(            @NotNull final ProgressIndicator indicator){
              final int size=jarFile.size();
              final int[] counter=new int[]{0};
class MyFilter implements FilenameFilter {
                private final Set<File> myImportantDirs=new HashSet<File>(Arrays.asList(outputDir,new File(outputDir,"resources")));
                private final boolean myImportantOnly;
                private MyFilter(                boolean importantOnly){
                  myImportantOnly=importantOnly;
                }
                public boolean accept(                File dir,                String name){
                  indicator.checkCanceled();
                  boolean result=myImportantOnly == myImportantDirs.contains(dir);
                  if (result) {
                    indicator.setFraction(((double)counter[0]) / size);
                    counter[0]++;
                  }
                  return result;
                }
              }
              try {
                ZipUtil.extract(jarFile,outputDir,new MyFilter(true));
                ZipUtil.extract(jarFile,outputDir,new MyFilter(false));
                FileUtil.writeToFile(timestampFile,currentTimestamp.getBytes());
              }
 catch (              IOException ignore) {
              }
            }
          }
.queue();
        }
      }
);
    }
    return VfsUtil.pathToUrl(FileUtil.toSystemIndependentName(new File(outputDir,targetFileRelativePath).getPath())) + anchor;
  }
 catch (  IOException e) {
    LOG.warn(e);
    Messages.showErrorDialog("Cannot extract files: " + e.getMessage(),"Error");
    return null;
  }
}
