{
  if (!myHint.isVisible()) {
    dispose();
    return;
  }
  PsiDocumentManager.getInstance(myProject).commitAllDocuments();
  final PsiFile file=PsiDocumentManager.getInstance(myProject).getPsiFile(myEditor.getDocument());
  CharSequence chars=myEditor.getDocument().getCharsSequence();
  int offset=CharArrayUtil.shiftBackward(chars,myEditor.getCaretModel().getOffset() - 1," \t") + 1;
  PsiExpressionList list=findArgumentList(file,offset,myLbraceMarker.getStartOffset());
  if (list != null) {
    updateMethodInfo(list,offset);
  }
 else {
    final XmlTag tag=findXmlTag(file,offset);
    if (tag != null) {
      myComponent.setCurrentItem(tag);
    }
 else {
      if (findParentOfType(file,offset,PsiAnnotation.class) != null) {
        int offset1=CharArrayUtil.shiftForward(chars,myEditor.getCaretModel().getOffset()," \t");
        if (chars.charAt(offset1) == ',') {
          offset1=CharArrayUtil.shiftBackward(chars,offset1 - 1," \t");
        }
        myComponent.setHighlightedMethod(findAnnotationMethod(file,offset1));
      }
 else {
        final PsiReferenceParameterList refParamList=findParentOfType(file,offset,PsiReferenceParameterList.class);
        if (refParamList != null) {
          updateTypeParameterInfo(refParamList,offset);
        }
 else {
          myHint.hide();
          dispose();
        }
      }
    }
  }
  myComponent.update();
}
