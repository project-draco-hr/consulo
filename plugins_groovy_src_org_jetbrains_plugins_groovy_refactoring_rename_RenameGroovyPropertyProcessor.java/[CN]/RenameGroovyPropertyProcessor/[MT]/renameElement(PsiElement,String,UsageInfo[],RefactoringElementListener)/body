{
  final GrField field=(GrField)psiElement;
  final PsiMethod getter=GroovyPropertyUtils.findGetterForField(field);
  final PsiMethod setter=GroovyPropertyUtils.findSetterForField(field);
  final String newGetterName=(getter != null && getter.getName().startsWith("is") ? "is" : "get") + StringUtil.capitalize(newName);
  final String newSetterName="set" + StringUtil.capitalize(newName);
  final PsiManager manager=field.getManager();
  List<PsiReference> getterRefs=new ArrayList<PsiReference>();
  List<PsiReference> setterRefs=new ArrayList<PsiReference>();
  List<PsiReference> fieldRefs=new ArrayList<PsiReference>();
  for (  UsageInfo usage : usages) {
    final PsiElement element=usage.getElement();
    if (element == null)     continue;
    PsiReference ref=element.getReference();
    if (ref == null)     continue;
    PsiElement resolved=ref.resolve();
    if (manager.areElementsEquivalent(resolved,getter)) {
      getterRefs.add(ref);
    }
 else     if (manager.areElementsEquivalent(resolved,setter)) {
      setterRefs.add(ref);
    }
 else     if (manager.areElementsEquivalent(resolved,field)) {
      fieldRefs.add(ref);
    }
 else {
      ref.handleElementRename(newName);
    }
  }
  field.setName(newName);
  final PsiMethod newGetter=GroovyPropertyUtils.findGetterForField(field);
  for (  PsiReference ref : getterRefs) {
    rename(ref,newGetterName,manager,newGetter);
  }
  final PsiMethod newSetter=GroovyPropertyUtils.findSetterForField(field);
  for (  PsiReference ref : setterRefs) {
    rename(ref,newSetterName,manager,newSetter);
  }
  for (  PsiReference ref : fieldRefs) {
    rename(ref,newName,manager,field);
  }
  listener.elementRenamed(field);
}
