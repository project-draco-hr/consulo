{
  FileOutputStream stream;
  try {
    stream=new FileOutputStream(f);
  }
 catch (  FileNotFoundException e) {
    LOG.error(e);
    return;
  }
  final PrintStream printer=new PrintStream(stream);
  ModuleRootManager moduleRootManager=ModuleRootManager.getInstance(module);
  for (  final VirtualFile item : virtualFiles) {
    final boolean isSource=!moduleRootManager.getFileIndex().isInTestSourceContent(item);
    if (isSource) {
      printer.println(GroovycRunner.SRC_FILE);
    }
 else {
      printer.println(GroovycRunner.TEST_FILE);
    }
    printer.println(item.getPath());
    if (isSource) {
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        public void run(){
          final PsiFile file=PsiManager.getInstance(myProject).findFile(item);
          if (file instanceof GroovyFileBase) {
            for (            PsiClass psiClass : ((GroovyFileBase)file).getClasses()) {
              printer.println(psiClass.getQualifiedName());
            }
          }
        }
      }
);
      printer.println(GroovycRunner.END);
    }
  }
  printer.println(GroovycRunner.CLASSPATH);
  printer.println(getCompilationClasspath(module).getPathsString());
  printer.println(GroovycRunner.IS_GRAILS);
  printer.println(GrailsConfigUtils.getInstance().isSDKConfigured(module) && module.getModuleType() instanceof GrailsModuleType);
  final Charset ideCharset=EncodingProjectManager.getInstance(myProject).getDefaultCharset();
  if (!Comparing.equal(CharsetToolkit.getDefaultSystemCharset(),ideCharset)) {
    printer.println(GroovycRunner.ENCODING);
    printer.println(ideCharset.name());
  }
  printer.println(GroovycRunner.OUTPUTPATH);
  printer.println(CompilerPaths.getModuleOutputPath(module,false));
  printer.println(GroovycRunner.TEST_OUTPUTPATH);
  printer.println(CompilerPaths.getModuleOutputPath(module,true));
  printer.close();
}
