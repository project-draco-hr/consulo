{
  if (LOG.isDebugEnabled()) {
    LOG.debug("running groovyc");
  }
  Set<OutputItem> successfullyCompiled=new HashSet<OutputItem>();
  Set<VirtualFile> toRecompile=new HashSet<VirtualFile>();
  Map<Module,Set<VirtualFile>> mapModulesToVirtualFiles=buildModuleToFilesMap(compileContext,virtualFiles);
  for (  Map.Entry<Module,Set<VirtualFile>> entry : mapModulesToVirtualFiles.entrySet()) {
    final Module module=entry.getKey();
    final GroovyFacet facet=GroovyFacet.getInstance(module);
    final Set<VirtualFile> moduleFiles=entry.getValue();
    if (facet == null || facet.getConfiguration().isCompileGroovyFiles()) {
      doCompile(compileContext,successfullyCompiled,toRecompile,module,moduleFiles);
    }
 else {
      final ResourceCompiler resourceCompiler=new ResourceCompiler(myProject,CompilerConfiguration.getInstance(myProject));
      final ExitStatus exitStatus=resourceCompiler.compile(compileContext,moduleFiles.toArray(new VirtualFile[moduleFiles.size()]));
      successfullyCompiled.addAll(Arrays.asList(exitStatus.getSuccessfullyCompiled()));
      toRecompile.addAll(Arrays.asList(exitStatus.getFilesToRecompile()));
    }
  }
  return new GroovyCompileExitStatus(successfullyCompiled,toRecompile.toArray(new VirtualFile[toRecompile.size()]));
}
