{
  if (LOG.isDebugEnabled()) {
    LOG.debug("running groovyc");
  }
  Set<OutputItem> successfullyCompiled=new HashSet<OutputItem>();
  Set<VirtualFile> toRecompileCollector=new HashSet<VirtualFile>();
  Map<Module,List<VirtualFile>> mapModulesToVirtualFiles=CompilerUtil.buildModuleToFilesMap(compileContext,virtualFiles);
  for (  Map.Entry<Module,List<VirtualFile>> entry : mapModulesToVirtualFiles.entrySet()) {
    final Module module=entry.getKey();
    final GroovyFacet facet=GroovyFacet.getInstance(module);
    final List<VirtualFile> moduleFiles=entry.getValue();
    final List<VirtualFile> toCompile=new ArrayList<VirtualFile>();
    final List<VirtualFile> toCopy=new ArrayList<VirtualFile>();
    final CompilerConfiguration configuration=CompilerConfiguration.getInstance(myProject);
    if (module.getModuleType() instanceof JavaModuleType && facet != null && facet.getConfiguration().isCompileGroovyFiles()) {
      for (      final VirtualFile file : moduleFiles) {
        (configuration.isResourceFile(file.getName()) ? toCopy : toCompile).add(file);
      }
    }
 else {
      toCopy.addAll(moduleFiles);
    }
    if (!toCompile.isEmpty()) {
      doCompile(compileContext,successfullyCompiled,toRecompileCollector,module,toCompile);
    }
    if (!toCopy.isEmpty()) {
      final ResourceCompiler resourceCompiler=new ResourceCompiler(myProject,configuration);
      final ExitStatus exitStatus=resourceCompiler.compile(compileContext,toCopy.toArray(new VirtualFile[toCopy.size()]));
      successfullyCompiled.addAll(Arrays.asList(exitStatus.getSuccessfullyCompiled()));
      toRecompileCollector.addAll(Arrays.asList(exitStatus.getFilesToRecompile()));
    }
  }
  return new GroovyCompileExitStatus(successfullyCompiled,toRecompileCollector.toArray(new VirtualFile[toRecompileCollector.size()]));
}
