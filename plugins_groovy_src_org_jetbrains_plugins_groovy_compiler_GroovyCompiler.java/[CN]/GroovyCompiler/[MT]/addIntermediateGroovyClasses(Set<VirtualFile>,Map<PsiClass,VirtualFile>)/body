{
  final Set<PsiClass> initialClasses=new THashSet<PsiClass>();
  for (  VirtualFile file : allToCompile) {
    initialClasses.addAll(getAllClasses(file));
  }
  final THashSet<PsiClass> dirty=new THashSet<PsiClass>(initialClasses);
  final THashSet<PsiClass> visited=new THashSet<PsiClass>();
  for (  PsiClass aClass : initialClasses) {
    if (visited.add(aClass)) {
      goForIntermediateClasses(aClass,dirty,new FactoryMap<PsiClass,Set<PsiClass>>(){
        @Override protected Set<PsiClass> create(        final PsiClass key){
          return ApplicationManager.getApplication().runReadAction(new Computable<Set<PsiClass>>(){
            public Set<PsiClass> compute(){
              return calcCodeReferenceDependencies(key,moduleClasses);
            }
          }
);
        }
      }
,visited);
    }
  }
  for (  PsiClass psiClass : dirty) {
    allToCompile.add(moduleClasses.get(psiClass));
  }
}
