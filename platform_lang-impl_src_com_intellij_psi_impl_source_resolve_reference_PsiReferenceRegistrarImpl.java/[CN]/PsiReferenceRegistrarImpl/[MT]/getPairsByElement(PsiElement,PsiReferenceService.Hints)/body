{
  final Class<? extends PsiElement> clazz=element.getClass();
  List<Trinity<PsiReferenceProvider,ProcessingContext,Double>> ret=null;
  List<Class> classes=myKnownSupers.get(clazz);
  for (int i=0; i < classes.size(); i++) {
    Class aClass=classes.get(i);
    final SimpleProviderBinding simpleBinding=myBindingsMap.get(aClass);
    final NamedObjectProviderBinding namedBinding=myNamedBindingsMap.get(aClass);
    if (simpleBinding == null && namedBinding == null)     continue;
    if (ret == null)     ret=new SmartList<Trinity<PsiReferenceProvider,ProcessingContext,Double>>();
    if (simpleBinding != null) {
      simpleBinding.addAcceptableReferenceProviders(element,ret,hints);
    }
    if (namedBinding != null) {
      namedBinding.addAcceptableReferenceProviders(element,ret,hints);
    }
  }
  return ret == null ? Collections.<Trinity<PsiReferenceProvider,ProcessingContext,Double>>emptyList() : ret;
}
