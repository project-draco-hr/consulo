{
  myKnownSupers.clear();
  final Class scope=pattern.getCondition().getInitialCondition().getAcceptedClass();
  final List<PatternCondition<? super T>> conditions=pattern.getCondition().getConditions();
  for (  PatternCondition<? super T> _condition : conditions) {
    if (!(_condition instanceof PsiNamePatternCondition)) {
      continue;
    }
    final PsiNamePatternCondition<?> nameCondition=(PsiNamePatternCondition)_condition;
    List<PatternCondition<? super String>> conditions1=nameCondition.getNamePattern().getCondition().getConditions();
    for (    PatternCondition<? super String> condition1 : conditions1) {
      if (condition1 instanceof ValuePatternCondition) {
        final Collection<String> strings=((ValuePatternCondition)condition1).getValues();
        registerNamedReferenceProvider(ArrayUtil.toStringArray(strings),nameCondition,scope,true,provider,priority,pattern);
        return;
      }
      if (condition1 instanceof CaseInsensitiveValuePatternCondition) {
        final String[] strings=((CaseInsensitiveValuePatternCondition)condition1).getValues();
        registerNamedReferenceProvider(strings,nameCondition,scope,false,provider,priority,pattern);
        return;
      }
    }
    break;
  }
  while (true) {
    SimpleProviderBinding<PsiReferenceProvider> providerBinding=myBindingsMap.get(scope);
    if (providerBinding != null) {
      providerBinding.registerProvider(provider,pattern,priority);
      return;
    }
    SimpleProviderBinding<PsiReferenceProvider> binding=new SimpleProviderBinding<PsiReferenceProvider>();
    binding.registerProvider(provider,pattern,priority);
    if (myBindingsMap.putIfAbsent(scope,binding) == null)     break;
  }
}
