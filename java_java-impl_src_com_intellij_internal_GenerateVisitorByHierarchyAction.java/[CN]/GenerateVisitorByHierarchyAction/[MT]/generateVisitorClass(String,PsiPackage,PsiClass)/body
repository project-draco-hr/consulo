{
  final THashMap<PsiClass,Set<PsiClass>> classes=new THashMap<PsiClass,Set<PsiClass>>();
  for (  PsiClass aClass : ClassInheritorsSearch.search(baseClass,new PackageScope(aPackage,false,false),true).findAll()) {
    if (aClass.hasModifierProperty(PsiModifier.ABSTRACT) == baseClass.hasModifierProperty(PsiModifier.ABSTRACT)) {
      final List<PsiClass> implementors=ContainerUtil.findAll(ClassInheritorsSearch.search(aClass).findAll(),new Condition<PsiClass>(){
        public boolean value(        final PsiClass psiClass){
          return !psiClass.hasModifierProperty(PsiModifier.ABSTRACT);
        }
      }
);
      classes.put(aClass,new THashSet<PsiClass>(implementors));
    }
  }
  final THashMap<PsiClass,Set<PsiClass>> pathMap=new THashMap<PsiClass,Set<PsiClass>>();
  for (  PsiClass aClass : classes.keySet()) {
    final Set<PsiClass> superClasses=new LinkedHashSet<PsiClass>();
    for (    PsiClass superClass : aClass.getSupers()) {
      if (superClass.isInheritor(baseClass,true)) {
        superClasses.add(superClass);
        final Set<PsiClass> superImplementors=classes.get(superClass);
        if (superImplementors != null) {
          superImplementors.removeAll(classes.get(aClass));
        }
      }
    }
    if (superClasses.isEmpty()) {
      superClasses.add(baseClass);
    }
    pathMap.put(aClass,superClasses);
  }
  pathMap.put(baseClass,Collections.<PsiClass>emptySet());
  final ArrayList<PsiFile> psiFiles=new ArrayList<PsiFile>();
  for (  Set<PsiClass> implementors : classes.values()) {
    for (    PsiClass psiClass : implementors) {
      psiFiles.add(psiClass.getContainingFile());
    }
  }
  final Project project=baseClass.getProject();
  final PsiClass visitorClass=JavaPsiFacade.getInstance(project).findClass(visitorName,GlobalSearchScope.projectScope(project));
  if (visitorClass != null) {
    psiFiles.add(visitorClass.getContainingFile());
  }
  new WriteCommandAction(project,PsiUtilCore.toPsiFileArray(psiFiles)){
    protected void run(    final Result result) throws Throwable {
      if (visitorClass == null) {
        final String shortClassName=PsiNameHelper.getShortClassName(visitorName);
        final String packageName=visitorName.substring(0,visitorName.length() - shortClassName.length() - 1);
        final PsiDirectory directory=PackageUtil.findOrCreateDirectoryForPackage(project,packageName,null,false);
        if (directory != null) {
          final PsiClass visitorClass=JavaDirectoryService.getInstance().createClass(directory,shortClassName);
          generateVisitorClass(visitorClass,classes,pathMap);
        }
      }
 else {
        generateVisitorClass(visitorClass,classes,pathMap);
      }
    }
    @Override protected boolean isGlobalUndoAction(){
      return true;
    }
  }
.execute();
}
