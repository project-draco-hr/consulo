{
  final PsiElementFactory elementFactory=JavaPsiFacade.getInstance(visitorClass.getProject()).getElementFactory();
  for (  PsiClass psiClass : classes.keySet()) {
    final PsiMethod method=elementFactory.createMethodFromText("public void accept(final " + visitorClass.getQualifiedName() + " visitor) { visitor.visit"+ psiClass.getName().substring(classPrefix)+ "(this); }",psiClass);
    for (    PsiClass implementor : classes.get(psiClass)) {
      addOrReplaceMethod(method,implementor);
    }
  }
  final THashSet<PsiClass> visitedClasses=new THashSet<PsiClass>();
  final LinkedList<PsiClass> toProcess=new LinkedList<PsiClass>(classes.keySet());
  while (!toProcess.isEmpty()) {
    final PsiClass psiClass=toProcess.removeFirst();
    if (!visitedClasses.add(psiClass))     continue;
    final Set<PsiClass> pathClasses=pathMap.get(psiClass);
    toProcess.addAll(pathClasses);
    final StringBuilder methodText=new StringBuilder();
    methodText.append("public void visit").append(psiClass.getName().substring(classPrefix)).append("(final ").append(psiClass.getQualifiedName()).append(" o) {");
    boolean first=true;
    for (    PsiClass pathClass : pathClasses) {
      if (first) {
        first=false;
      }
 else {
        methodText.append("// ");
      }
      methodText.append("visit").append(pathClass.getName().substring(classPrefix)).append("(o);\n");
    }
    methodText.append("}");
    final PsiMethod method=elementFactory.createMethodFromText(methodText.toString(),psiClass);
    addOrReplaceMethod(method,visitorClass);
  }
}
