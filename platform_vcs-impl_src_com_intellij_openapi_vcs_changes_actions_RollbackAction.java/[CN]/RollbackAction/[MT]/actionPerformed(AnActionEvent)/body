{
  Project project=e.getData(CommonDataKeys.PROJECT);
  if (project == null) {
    return;
  }
  final String title=ActionPlaces.CHANGES_VIEW_TOOLBAR.equals(e.getPlace()) ? null : "Can not " + RollbackUtil.getRollbackOperationName(project) + " now";
  if (ChangeListManager.getInstance(project).isFreezedWithNotification(title))   return;
  FileDocumentManager.getInstance().saveAllDocuments();
  List<FilePath> missingFiles=e.getData(ChangesListView.MISSING_FILES_DATA_KEY);
  boolean hasChanges=false;
  if (missingFiles != null && !missingFiles.isEmpty()) {
    hasChanges=true;
    new RollbackDeletionAction().actionPerformed(e);
  }
  List<Change> changes=getChanges(project,e);
  final LinkedHashSet<VirtualFile> modifiedWithoutEditing=getModifiedWithoutEditing(e,project);
  if (modifiedWithoutEditing != null && !modifiedWithoutEditing.isEmpty()) {
    hasChanges=true;
    rollbackModifiedWithoutEditing(project,modifiedWithoutEditing);
  }
  if (modifiedWithoutEditing != null) {
    changes=ContainerUtil.filter(changes,new Condition<Change>(){
      @Override public boolean value(      Change change){
        return !modifiedWithoutEditing.contains(change.getVirtualFile());
      }
    }
);
  }
  if (!changes.isEmpty()) {
    RollbackChangesDialog.rollbackChanges(project,changes);
  }
 else   if (!hasChanges) {
    LocalChangeList currentChangeList=ChangeListManager.getInstance(project).getDefaultChangeList();
    RollbackChangesDialog.rollbackChanges(project,currentChangeList);
  }
}
