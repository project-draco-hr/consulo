{
  Project project=e.getData(PlatformDataKeys.PROJECT);
  final boolean visible=project != null && ProjectLevelVcsManager.getInstance(project).hasActiveVcss();
  e.getPresentation().setVisible(visible);
  if (!visible)   return;
  final Change[] leadSelection=e.getData(VcsDataKeys.CHANGE_LEAD_SELECTION);
  boolean isEnabled=(leadSelection != null && leadSelection.length > 0) || Boolean.TRUE.equals(e.getData(VcsDataKeys.HAVE_LOCALLY_DELETED)) || Boolean.TRUE.equals(e.getData(VcsDataKeys.HAVE_MODIFIED_WITHOUT_EDITING));
  if (!isEnabled) {
    final VirtualFile[] files=e.getData(PlatformDataKeys.VIRTUAL_FILE_ARRAY);
    if (files != null) {
      final FileStatusManager fileStatusManager=FileStatusManager.getInstance(project);
      for (      VirtualFile file : files) {
        final FileStatus status=fileStatusManager.getStatus(file);
        if (FileStatus.UNKNOWN.equals(status) || FileStatus.IGNORED.equals(status) || FileStatus.NOT_CHANGED.equals(status)) {
          continue;
        }
        isEnabled=true;
        break;
      }
    }
  }
  e.getPresentation().setEnabled(isEnabled);
  if (isEnabled) {
    final AbstractVcs[] vcss=ProjectLevelVcsManager.getInstance(project).getAllActiveVcss();
    for (    AbstractVcs vcs : vcss) {
      final RollbackEnvironment rollbackEnvironment=vcs.getRollbackEnvironment();
      if (rollbackEnvironment != null) {
        e.getPresentation().setText(rollbackEnvironment.getRollbackOperationName());
        return;
      }
    }
  }
}
