{
  final String operationName=StringUtil.decapitalize(UIUtil.removeMnemonic(RollbackUtil.getRollbackOperationName(project)));
  String message=(modifiedWithoutEditing.size() == 1) ? VcsBundle.message("rollback.modified.without.editing.confirm.single",operationName,modifiedWithoutEditing.iterator().next().getPresentableUrl()) : VcsBundle.message("rollback.modified.without.editing.confirm.multiple",operationName,modifiedWithoutEditing.size());
  int rc=showYesNoDialog(project,message,VcsBundle.message("changes.action.rollback.title",operationName),getQuestionIcon());
  if (rc != 0) {
    return;
  }
  final List<VcsException> exceptions=new ArrayList<VcsException>();
  final ProgressManager progressManager=ProgressManager.getInstance();
  final Runnable action=new Runnable(){
    public void run(){
      final ProgressIndicator indicator=progressManager.getProgressIndicator();
      try {
        ChangesUtil.processVirtualFilesByVcs(project,modifiedWithoutEditing,new ChangesUtil.PerVcsProcessor<VirtualFile>(){
          public void process(          final AbstractVcs vcs,          final List<VirtualFile> items){
            final RollbackEnvironment rollbackEnvironment=vcs.getRollbackEnvironment();
            if (rollbackEnvironment != null) {
              if (indicator != null) {
                indicator.setText(vcs.getDisplayName() + ": performing " + rollbackEnvironment.getRollbackOperationName().toLowerCase()+ "...");
                indicator.setIndeterminate(false);
              }
              rollbackEnvironment.rollbackModifiedWithoutCheckout(items,exceptions,new RollbackProgressModifier(items.size(),indicator));
              if (indicator != null) {
                indicator.setText2("");
              }
            }
          }
        }
);
      }
 catch (      ProcessCanceledException e) {
      }
      if (!exceptions.isEmpty()) {
        AbstractVcsHelper.getInstance(project).showErrors(exceptions,VcsBundle.message("rollback.modified.without.checkout.error.tab",operationName));
      }
      VirtualFileManager.getInstance().refresh(true,new Runnable(){
        public void run(){
          for (          VirtualFile virtualFile : modifiedWithoutEditing) {
            VcsDirtyScopeManager.getInstance(project).fileDirty(virtualFile);
          }
        }
      }
);
    }
  }
;
  progressManager.runProcessWithProgressSynchronously(action,operationName,true,project);
}
