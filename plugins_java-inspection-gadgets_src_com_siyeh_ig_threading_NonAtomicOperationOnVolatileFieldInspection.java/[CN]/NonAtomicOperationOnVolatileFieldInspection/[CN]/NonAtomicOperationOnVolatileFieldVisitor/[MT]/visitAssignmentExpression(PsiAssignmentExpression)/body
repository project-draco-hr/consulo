{
  super.visitAssignmentExpression(expression);
  final PsiExpression rhs=expression.getRExpression();
  if (rhs == null) {
    return;
  }
  final PsiExpression lhs=expression.getLExpression();
  final PsiField volatileField=findNonSynchronizedVolatileField(lhs);
  if (volatileField == null) {
    return;
  }
  final IElementType tokenType=expression.getOperationTokenType();
  if (tokenType.equals(JavaTokenType.PLUSEQ) || tokenType.equals(JavaTokenType.MINUSEQ) || tokenType.equals(JavaTokenType.ASTERISKEQ)|| tokenType.equals(JavaTokenType.DIVEQ)|| tokenType.equals(JavaTokenType.ANDEQ)|| tokenType.equals(JavaTokenType.OREQ)|| tokenType.equals(JavaTokenType.XOREQ)|| tokenType.equals(JavaTokenType.PERCEQ)|| tokenType.equals(JavaTokenType.LTLTEQ)|| tokenType.equals(JavaTokenType.GTGTEQ)|| tokenType.equals(JavaTokenType.GTGTGTEQ)) {
    registerError(lhs);
    return;
  }
  if (VariableAccessUtils.variableIsUsed(volatileField,rhs)) {
    registerError(lhs);
  }
}
