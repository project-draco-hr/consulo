{
  final TreePath path=tree.getPathForRow(row);
  if (path == null)   return new ActionCallback.Done();
  final int size=tree.getRowCount();
  if (size == 0) {
    tree.clearSelection();
    return new ActionCallback.Done();
  }
  if (top < 0) {
    top=0;
  }
  if (bottom >= size) {
    bottom=size - 1;
  }
  if (row >= tree.getRowCount())   return new ActionCallback.Done();
  boolean okToScroll=true;
  if (tree.isShowing()) {
    if (!tree.isValid()) {
      tree.validate();
    }
  }
 else {
    Application app=ApplicationManager.getApplication();
    if (app != null && app.isUnitTestMode()) {
      okToScroll=false;
    }
  }
  Runnable selectRunnable=new Runnable(){
    public void run(){
      if (!tree.isRowSelected(row)) {
        if (addToSelection) {
          tree.getSelectionModel().addSelectionPath(tree.getPathForRow(row));
        }
 else {
          tree.setSelectionRow(row);
        }
      }
 else       if (resetSelection) {
        if (!addToSelection) {
          tree.setSelectionRow(row);
        }
      }
    }
  }
;
  if (!okToScroll) {
    selectRunnable.run();
    return new ActionCallback.Done();
  }
  final Rectangle rowBounds=tree.getRowBounds(row);
  if (rowBounds == null)   return new ActionCallback.Done();
  Rectangle topBounds=tree.getRowBounds(top);
  if (topBounds == null) {
    topBounds=rowBounds;
  }
  Rectangle bottomBounds=tree.getRowBounds(bottom);
  if (bottomBounds == null) {
    bottomBounds=rowBounds;
  }
  Rectangle bounds=topBounds.union(bottomBounds);
  bounds.x=rowBounds.x;
  bounds.width=rowBounds.width;
  final Rectangle visible=tree.getVisibleRect();
  if (visible.contains(bounds)) {
    bounds=null;
  }
 else {
    final Component comp=tree.getCellRenderer().getTreeCellRendererComponent(tree,path.getLastPathComponent(),true,true,false,row,false);
    if (comp instanceof SimpleColoredComponent) {
      final SimpleColoredComponent renderer=((SimpleColoredComponent)comp);
      final Dimension scrollableSize=renderer.computePreferredSize(true);
      bounds.width=scrollableSize.width;
    }
  }
  final ActionCallback callback=new ActionCallback();
  selectRunnable.run();
  if (bounds != null) {
    final Range<Integer> range=getExpandControlRange(tree,path);
    if (range != null) {
      int delta=bounds.x - range.getFrom().intValue();
      bounds.x-=delta;
      bounds.width-=delta;
    }
    if (visible.width < bounds.width) {
      bounds.width=visible.width;
    }
    if (tree instanceof Tree && !((Tree)tree).isHorizontalAutoScrollingEnabled()) {
      bounds.x=0;
    }
    final Rectangle b1=bounds;
    final Runnable runnable=new Runnable(){
      public void run(){
        if (scroll) {
          AbstractTreeBuilder builder=AbstractTreeBuilder.getBuilderFor(tree);
          if (builder != null) {
            builder.getReady(TreeUtil.class).doWhenDone(new Runnable(){
              public void run(){
                tree.scrollRectToVisible(b1);
              }
            }
);
            callback.setDone();
          }
 else {
            tree.scrollRectToVisible(b1);
            Long ts=(Long)tree.getClientProperty(TREE_UTIL_SCROLL_TIME_STAMP);
            if (ts == null) {
              ts=new Long(0);
            }
            ts=ts.longValue() + 1;
            tree.putClientProperty(TREE_UTIL_SCROLL_TIME_STAMP,ts);
            final long targetValue=ts.longValue();
            SwingUtilities.invokeLater(new Runnable(){
              @Override public void run(){
                Long actual=(Long)tree.getClientProperty(TREE_UTIL_SCROLL_TIME_STAMP);
                if (actual == null || targetValue < actual.longValue())                 return;
                if (!tree.getVisibleRect().contains(b1)) {
                  tree.scrollRectToVisible(b1);
                }
                callback.setDone();
              }
            }
);
          }
        }
        callback.setDone();
      }
    }
;
    runnable.run();
  }
 else {
    callback.setDone();
  }
  return callback;
}
