{
  super.visitTypeCastExpression(expression);
  final PsiExpression operand=expression.getOperand();
  if (operand == null) {
    return;
  }
  final PsiType operandType=operand.getType();
  if (operandType == null) {
    return;
  }
  final PsiType type=expression.getType();
  if (type == null) {
    return;
  }
  final PsiType expectedType=ExpectedTypeUtils.findExpectedType(expression,true);
  if (expectedType == null) {
    return;
  }
  if (expectedType.equals(type)) {
    return;
  }
  final PsiClass resolved=PsiUtil.resolveClassInType(expectedType);
  if (resolved != null && !resolved.isPhysical()) {
    return;
  }
  if (expectedType.isAssignableFrom(operandType)) {
    return;
  }
  if (isTypeParameter(expectedType)) {
    return;
  }
  if (expectedType instanceof PsiArrayType) {
    final PsiArrayType arrayType=(PsiArrayType)expectedType;
    final PsiType componentType=arrayType.getDeepComponentType();
    if (isTypeParameter(componentType)) {
      return;
    }
  }
  if (type instanceof PsiPrimitiveType || expectedType instanceof PsiPrimitiveType) {
    return;
  }
  if (PsiPrimitiveType.getUnboxedType(type) != null || PsiPrimitiveType.getUnboxedType(expectedType) != null) {
    return;
  }
  if (expectedType instanceof PsiClassType) {
    final PsiClassType expectedClassType=(PsiClassType)expectedType;
    final PsiClassType rawType=expectedClassType.rawType();
    if (type.equals(rawType)) {
      return;
    }
  }
  final PsiTypeElement castTypeElement=expression.getCastType();
  if (castTypeElement == null) {
    return;
  }
  registerError(castTypeElement,expectedType);
}
