{
  super.visitTypeCastExpression(expression);
  final PsiExpression operand=expression.getOperand();
  if (operand == null) {
    return;
  }
  final PsiType operandType=operand.getType();
  if (operandType == null) {
    return;
  }
  final PsiType type=expression.getType();
  if (type == null) {
    return;
  }
  final PsiType expectedType=ExpectedTypeUtils.findExpectedType(expression);
  if (expectedType == null) {
    return;
  }
  if (expectedType.equals(type)) {
    return;
  }
  final String expectedTypeText=expectedType.getCanonicalText();
  if ("_Dummy_.__Array__".equals(expectedTypeText)) {
    return;
  }
  if (expectedType.isAssignableFrom(operandType)) {
    return;
  }
  if (expectedType instanceof PsiClassType) {
    final PsiClass aClass=((PsiClassType)expectedType).resolve();
    if (aClass == null) {
      return;
    }
    if (aClass.getContext() instanceof PsiTypeParameterList) {
      return;
    }
  }
  if (ClassUtils.isPrimitiveNumericType(type) || ClassUtils.isPrimitiveNumericType(expectedType)) {
    return;
  }
  final String typeText=type.getCanonicalText();
  if (TypeConversionUtil.isPrimitiveWrapper(typeText) || TypeConversionUtil.isPrimitiveWrapper(expectedTypeText)) {
    return;
  }
  final PsiTypeElement castTypeElement=expression.getCastType();
  registerError(castTypeElement);
}
