{
  myCbReplaceAllOccurences.setMnemonic(KeyEvent.VK_A);
  myCbReplaceAllOccurences.setFocusable(false);
  myCbIsFinal.setMnemonic(KeyEvent.VK_F);
  myCbIsFinal.setFocusable(false);
  myCbTypeSpec.setMnemonic(KeyEvent.VK_T);
  myCbTypeSpec.setFocusable(false);
  myNameLabel.setLabelFor(myNameComboBox);
  myTypeLabel.setLabelFor(myTypeComboBox);
  if (myType == null) {
    myCbTypeSpec.setSelected(false);
    myCbTypeSpec.setEnabled(false);
    myTypeComboBox.setEnabled(false);
  }
 else {
    if (GroovyApplicationSettings.getInstance().SPECIFY_TYPE_EXPLICITLY != null) {
      myCbTypeSpec.setSelected(GroovyApplicationSettings.getInstance().SPECIFY_TYPE_EXPLICITLY);
      myTypeComboBox.setEnabled(GroovyApplicationSettings.getInstance().SPECIFY_TYPE_EXPLICITLY);
    }
 else {
      myCbTypeSpec.setSelected(true);
      myTypeComboBox.setEnabled(true);
    }
    myTypeMap=GroovyRefactoringUtil.getCompatibleTypeNames(myType);
    for (    String typeName : myTypeMap.keySet()) {
      myTypeComboBox.addItem(typeName);
    }
  }
  if (GroovyApplicationSettings.getInstance().INTRODUCE_LOCAL_CREATE_FINALS != null) {
    myCbIsFinal.setSelected(GroovyApplicationSettings.getInstance().INTRODUCE_LOCAL_CREATE_FINALS);
  }
  myCbTypeSpec.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      myTypeComboBox.setEnabled(myCbTypeSpec.isSelected());
    }
  }
);
  if (myOccurrencesCount > 1) {
    myCbReplaceAllOccurences.setSelected(false);
    myCbReplaceAllOccurences.setEnabled(true);
    myCbReplaceAllOccurences.setText(myCbReplaceAllOccurences.getText() + " (" + myOccurrencesCount+ " occurrences)");
  }
 else {
    myCbReplaceAllOccurences.setSelected(false);
    myCbReplaceAllOccurences.setEnabled(false);
  }
  contentPane.registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      myTypeComboBox.requestFocus();
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_Y,KeyEvent.ALT_MASK),JComponent.WHEN_IN_FOCUSED_WINDOW);
}
