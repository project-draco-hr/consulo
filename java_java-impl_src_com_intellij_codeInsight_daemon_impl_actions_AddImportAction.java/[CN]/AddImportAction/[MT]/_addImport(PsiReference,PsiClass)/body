{
  if (!ref.getElement().isValid() || !targetClass.isValid() || ref.resolve() == targetClass) {
    return;
  }
  if (!CodeInsightUtilBase.preparePsiElementForWrite(ref.getElement())) {
    return;
  }
  int caretOffset=myEditor.getCaretModel().getOffset();
  RangeMarker caretMarker=myEditor.getDocument().createRangeMarker(caretOffset,caretOffset);
  int colByOffset=myEditor.offsetToLogicalPosition(caretOffset).column;
  int col=myEditor.getCaretModel().getLogicalPosition().column;
  int virtualSpace=col == colByOffset ? 0 : col - colByOffset;
  int line=myEditor.getCaretModel().getLogicalPosition().line;
  LogicalPosition pos=new LogicalPosition(line,0);
  myEditor.getCaretModel().moveToLogicalPosition(pos);
  try {
    bindReference(ref,targetClass);
    if (CodeInsightSettings.getInstance().OPTIMIZE_IMPORTS_ON_THE_FLY) {
      Document document=myEditor.getDocument();
      PsiFile psiFile=PsiDocumentManager.getInstance(myProject).getPsiFile(document);
      new OptimizeImportsProcessor(myProject,psiFile).runWithoutProgress();
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
  line=myEditor.getCaretModel().getLogicalPosition().line;
  LogicalPosition pos1=new LogicalPosition(line,col);
  myEditor.getCaretModel().moveToLogicalPosition(pos1);
  if (caretMarker.isValid()) {
    LogicalPosition pos2=myEditor.offsetToLogicalPosition(caretMarker.getStartOffset());
    int newCol=pos2.column + virtualSpace;
    myEditor.getCaretModel().moveToLogicalPosition(new LogicalPosition(pos2.line,newCol));
    myEditor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
  }
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    public void run(){
      if (!myProject.isDisposed() && myProject.isOpen()) {
        DaemonCodeAnalyzer daemonCodeAnalyzer=DaemonCodeAnalyzer.getInstance(myProject);
        if (daemonCodeAnalyzer != null) {
          daemonCodeAnalyzer.updateVisibleHighlighters(myEditor);
        }
      }
    }
  }
);
}
