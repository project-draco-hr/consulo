{
  final Set<String> names=new LinkedHashSet<String>();
  final Set<PsiVariable> vars=new LinkedHashSet<PsiVariable>();
  closure.accept(new GroovyRecursiveElementVisitor(){
    public void visitReferenceExpression(    GrReferenceExpression refExpr){
      super.visitReferenceExpression(refExpr);
      if (refExpr.getQualifierExpression() == null && !PsiUtil.isLValue(refExpr)) {
        if (!(refExpr.getParent() instanceof GrCall)) {
          final String refName=refExpr.getReferenceName();
          final PsiElement resolved=refExpr.resolve();
          if (resolved == null) {
            names.add(refName);
          }
 else           if (resolved instanceof PsiField) {
            final PsiClass clazz=((PsiField)resolved).getContainingClass();
            final PsiClass closureClass=resolved.getManager().findClass(GrClosableBlock.GROOVY_LANG_CLOSURE,closure.getResolveScope());
            if (InheritanceUtil.isInheritorOrSelf(clazz,closureClass,true)) {
              vars.add((PsiVariable)resolved);
            }
          }
 else           if (resolved instanceof PsiMethod) {
            final PsiMethod method=(PsiMethod)resolved;
            final String propName=PsiUtil.getPropertyNameByGetter(method);
            if (propName != null) {
              final PsiClass clazz=method.getContainingClass();
              final PsiClass closureClass=resolved.getManager().findClass(GrClosableBlock.GROOVY_LANG_CLOSURE,closure.getResolveScope());
              if (InheritanceUtil.isInheritorOrSelf(clazz,closureClass,true)) {
                names.add(propName);
              }
            }
          }
 else           if (resolved instanceof PsiParameter) {
            vars.add((PsiVariable)resolved);
          }
 else           if (resolved instanceof PsiVariable && !PsiTreeUtil.isAncestor(closure,resolved,true)) {
            vars.add((PsiVariable)resolved);
          }
        }
 else {
        }
      }
    }
  }
);
  for (  String name : names) {
    addNode(new ReadWriteVariableInstructionImpl(name,closure.getLBrace(),myInstructionNumber++,true));
  }
  for (  PsiVariable var : vars) {
    addNode(new ReadWriteVariableInstructionImpl(var,myInstructionNumber++));
  }
  PsiElement child=closure.getFirstChild();
  while (child != null) {
    if (child instanceof GroovyPsiElement) {
      ((GroovyPsiElement)child).accept(this);
    }
    child=child.getNextSibling();
  }
}
