{
  for (  GrParameter parameter : closure.getAllParameters()) {
    addNode(new ReadWriteVariableInstruction(parameter.getName(),parameter,myInstructionNumber++,WRITE));
  }
  final Set<String> names=new LinkedHashSet<String>();
  closure.accept(new GroovyRecursiveElementVisitor(){
    public void visitReferenceExpression(    GrReferenceExpression refExpr){
      super.visitReferenceExpression(refExpr);
      if (refExpr.getQualifierExpression() == null && !PsiUtil.isLValue(refExpr)) {
        if (!(refExpr.getParent() instanceof GrCall)) {
          final String refName=refExpr.getReferenceName();
          if (!hasDeclaredVariable(refName,closure,refExpr)) {
          }
        }
      }
    }
  }
);
  names.add("owner");
  for (  String name : names) {
    addNode(new ReadWriteVariableInstruction(name,closure.getLBrace(),myInstructionNumber++,WRITE));
  }
  PsiElement child=closure.getFirstChild();
  while (child != null) {
    if (child instanceof GroovyPsiElement) {
      ((GroovyPsiElement)child).accept(this);
    }
    child=child.getNextSibling();
  }
  final GrStatement[] statements=closure.getStatements();
  if (statements.length > 0) {
    handlePossibleReturn(statements[statements.length - 1]);
  }
}
