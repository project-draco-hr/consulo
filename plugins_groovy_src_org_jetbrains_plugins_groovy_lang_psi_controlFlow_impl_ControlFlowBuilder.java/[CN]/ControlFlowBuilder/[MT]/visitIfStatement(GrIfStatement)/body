{
  InstructionImpl ifInstruction=startNode(ifStatement);
  final GrCondition condition=ifStatement.getCondition();
  final GrStatement thenBranch=ifStatement.getThenBranch();
  final GrStatement elseBranch=ifStatement.getElseBranch();
  InstructionImpl conditionEnd=null;
  InstructionImpl thenEnd=null;
  InstructionImpl elseEnd=null;
  if (condition != null) {
    condition.accept(this);
    conditionEnd=myHead;
  }
  List<GotoInstruction> negations=collectAndRemoveAllPendingNegations(ifStatement);
  if (thenBranch != null) {
    thenBranch.accept(this);
    handlePossibleReturn(thenBranch);
    thenEnd=myHead;
    interruptFlow();
  }
  myHead=reduceAllNegationsIntoInstruction(ifStatement,negations);
  if (negations.isEmpty() && conditionEnd != null) {
    myHead=conditionEnd;
  }
  if (elseBranch != null) {
    elseBranch.accept(this);
    handlePossibleReturn(elseBranch);
    elseEnd=myHead;
    interruptFlow();
  }
  if (thenBranch != null || elseBranch != null) {
    final InstructionImpl end=new IfEndInstruction(ifStatement,myInstructionNumber++);
    addNode(end);
    if (thenEnd != null)     addEdge(thenEnd,end);
    if (elseEnd != null) {
      addEdge(elseEnd,end);
    }
 else {
      addEdge(conditionEnd != null ? conditionEnd : ifInstruction,end);
    }
  }
  finishNode(ifInstruction);
}
