{
  final GrOpenBlock tryBlock=tryCatchStatement.getTryBlock();
  final GrCatchClause[] catchClauses=tryCatchStatement.getCatchClauses();
  final GrFinallyClause finallyClause=tryCatchStatement.getFinallyClause();
  for (int i=catchClauses.length - 1; i >= 0; i--) {
    myCatchedExceptionInfos.push(new ExceptionInfo(catchClauses[i]));
  }
  InstructionImpl tryBeg=null;
  InstructionImpl tryEnd=null;
  if (tryBlock != null) {
    tryBeg=startNode(tryBlock);
    tryBlock.accept(this);
    tryEnd=myHead;
    finishNode(tryBeg);
  }
  InstructionImpl[][] throwers=new InstructionImpl[catchClauses.length][];
  for (int i=0; i < catchClauses.length; i++) {
    final List<InstructionImpl> list=myCatchedExceptionInfos.pop().myThrowers;
    throwers[i]=list.toArray(new InstructionImpl[list.size()]);
  }
  InstructionImpl[] catches=new InstructionImpl[catchClauses.length];
  for (int i=0; i < catchClauses.length; i++) {
    flowAbrupted();
    final InstructionImpl catchBeg=startNode(catchClauses[i]);
    for (    InstructionImpl thrower : throwers[i]) {
      addEdge(thrower,catchBeg);
    }
    if (tryBeg != null)     addEdge(tryBeg,catchBeg);
    if (tryEnd != null)     addEdge(tryEnd,catchBeg);
    catchClauses[i].accept(this);
    catches[i]=myHead;
    finishNode(catchBeg);
  }
  if (finallyClause != null) {
    flowAbrupted();
    final InstructionImpl finallyInstruction=startNode(finallyClause);
    Set<PostCallInstructionImpl> postCalls=new LinkedHashSet<PostCallInstructionImpl>();
    addFinallyEdges(finallyInstruction,postCalls);
    if (tryEnd != null) {
      postCalls.add(addCallNode(finallyInstruction,tryCatchStatement,tryEnd));
    }
    for (    InstructionImpl catchEnd : catches) {
      if (catchEnd != null) {
        postCalls.add(addCallNode(finallyInstruction,tryCatchStatement,catchEnd));
      }
    }
    myHead=finallyInstruction;
    finallyClause.accept(this);
    final RetInstruction retInsn=new RetInstruction(myInstructionNumber++);
    for (    PostCallInstructionImpl postCall : postCalls) {
      postCall.setReturnInstruction(retInsn);
      addEdge(retInsn,postCall);
    }
    addNode(retInsn);
    flowAbrupted();
    finishNode(finallyInstruction);
  }
}
