{
  final GrExpression operand=expression.getOperand();
  if (operand == null)   return;
  if (expression.getOperationTokenType() != mLNOT) {
    operand.accept(this);
    visitCall(expression);
    return;
  }
  ConditionInstruction cond=new ConditionInstruction(expression);
  addNodeAndCheckPending(cond);
  registerCondition(cond);
  operand.accept(this);
  visitCall(expression);
  myConditions.removeFirstOccurrence(cond);
  List<GotoInstruction> negations=collectAndRemoveAllPendingNegations(expression);
  InstructionImpl head=myHead;
  addNodeAndCheckPending(new PositiveGotoInstruction(expression,cond));
  handlePossibleReturn(expression);
  addPendingEdge(expression,myHead);
  if (negations.isEmpty()) {
    myHead=head;
  }
 else {
    myHead=reduceAllNegationsIntoInstruction(expression,negations);
  }
}
