{
  final GrFinallyClause finallyClause=PsiTreeUtil.getParentOfType(last,GrFinallyClause.class,false,GrClosableBlock.class,GrMember.class);
  if (finallyClause != null)   return;
  if (!(last instanceof GrExpression && PsiTreeUtil.isAncestor(myLastInScope,last,false)))   return;
  addNodeAndCheckPending(new MaybeReturnInstruction((GrExpression)last));
  for (ListIterator<Pair<InstructionImpl,GroovyPsiElement>> iterator=myPending.listIterator(myPending.size()); iterator.hasPrevious(); ) {
    Pair<InstructionImpl,GroovyPsiElement> pair=iterator.previous();
    final GroovyPsiElement scopeWhenToAdd=pair.getSecond();
    if (scopeWhenToAdd == null)     continue;
    if (!PsiTreeUtil.isAncestor(scopeWhenToAdd,last,false))     break;
    MaybeReturnInstruction may=addNode(new MaybeReturnInstruction((GrExpression)last));
    addEdge(pair.first,may);
    iterator.set(new Pair<InstructionImpl,GroovyPsiElement>(may,scopeWhenToAdd));
  }
}
