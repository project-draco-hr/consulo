{
  PsiType result=getManager().getElementFactory().createPrimitiveType(myTypeText);
  if (result != null)   return result;
  if (isArray()) {
    createComponentTypeChild();
    return ((PsiTypeElement)myChild).getType().createArrayType();
  }
 else   if (isVarArgs()) {
    createComponentTypeChild();
    return new PsiEllipsisType(((PsiTypeElement)myChild).getType());
  }
  createClassReferenceChild();
  final PsiClassReferenceType psiClassReferenceType;
  if (myVariance != VARIANCE_INVARIANT) {
    psiClassReferenceType=new PsiClassReferenceType((PsiJavaCodeReferenceElement)myChild);
  }
 else {
    psiClassReferenceType=null;
  }
switch (myVariance) {
case VARIANCE_NONE:
    return psiClassReferenceType;
case VARIANCE_EXTENDS:
  return PsiWildcardType.createExtends(getManager(),psiClassReferenceType);
case VARIANCE_SUPER:
return PsiWildcardType.createSuper(getManager(),psiClassReferenceType);
case VARIANCE_INVARIANT:
return PsiWildcardType.createUnbounded(getManager());
default :
LOG.assertTrue(false);
return null;
}
}
