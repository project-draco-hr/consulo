{
  super.paintComponent(g);
  if (myFraction == 0)   return;
  Graphics2D g2=(Graphics2D)g;
  Object oldAntialiasing=g2.getRenderingHint(RenderingHints.KEY_ANTIALIASING);
  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  if (myFraction > 1) {
    myFraction=1;
  }
  Dimension size=getSize();
  g2.setPaint(Color.WHITE);
  Rectangle2D rect=new Rectangle2D.Double(2,2,size.width - 4,size.height - 4);
  g2.fill(rect);
  g2.setPaint(SHADOW1);
  rect.setRect(1,1,size.width - 3,size.height - 3);
  g2.draw(rect);
  UIUtil.drawLine(g2,2,2,2,2);
  UIUtil.drawLine(g2,2,size.height - 2,2,size.height - 2);
  UIUtil.drawLine(g2,size.width - 2,2,size.width - 2,2);
  UIUtil.drawLine(g2,0,2,0,2);
  UIUtil.drawLine(g2,2,0,2,0);
  g2.setPaint(SHADOW2);
  UIUtil.drawLine(g2,0,2,0,size.height - 4);
  UIUtil.drawLine(g2,1,1,1,1);
  UIUtil.drawLine(g2,2,0,size.width - 3,0);
  UIUtil.drawLine(g2,1,size.height - 3,1,size.height - 3);
  UIUtil.drawLine(g2,2,size.height - 2,size.width - 3,size.height - 2);
  UIUtil.drawLine(g2,size.width - 2,1,size.width - 2,1);
  UIUtil.drawLine(g2,size.width - 1,2,size.width - 1,size.height - 4);
  UIUtil.drawLine(g2,size.width - 2,size.height - 3,size.width - 2,size.height - 3);
  int y_center=size.height / 2;
  int y_steps=size.height / 2 - 3;
  int alpha_step=y_steps > 0 ? (255 - 70) / y_steps : 255 - 70;
  int x_offset=4;
  g.setClip(4,3,size.width - 8,size.height - 6);
  int bricksToDraw=getBricksToDraw(myFraction);
  if (myIndeterminate) {
    int startFrom=bricksToDraw < INDETERMINATE_BRICKS_DRAW ? 0 : bricksToDraw - INDETERMINATE_BRICKS_DRAW;
    int endTo=bricksToDraw + INDETERMINATE_BRICKS_DRAW < getBricksToDraw(1) ? bricksToDraw + INDETERMINATE_BRICKS_DRAW : getBricksToDraw(1);
    for (int i=startFrom; i <= endTo; i++) {
      g2.setPaint(myColor);
      int startXOffset=x_offset + (BRICK_WIDTH + BRICK_SPACE) * i;
      UIUtil.drawLine(g2,startXOffset,y_center,startXOffset + BRICK_WIDTH - 1,y_center);
      for (int j=0; j < y_steps; j++) {
        Color color=new Color(myColor.getRed(),myColor.getGreen(),myColor.getBlue(),255 - alpha_step * (j + 1));
        g2.setPaint(color);
        UIUtil.drawLine(g2,startXOffset,y_center - 1 - j,startXOffset + BRICK_WIDTH - 1,y_center - 1 - j);
        if (!(y_center % 2 != 0 && j == y_steps - 1)) {
          UIUtil.drawLine(g2,startXOffset,y_center + 1 + j,startXOffset + BRICK_WIDTH - 1,y_center + 1 + j);
        }
      }
      g2.setColor(new Color(myColor.getRed(),myColor.getGreen(),myColor.getBlue(),255 - alpha_step * (y_steps / 2 + 1)));
      g2.drawRect(startXOffset,y_center - y_steps,BRICK_WIDTH - 1,size.height - 7);
    }
  }
 else {
    for (int i=0; i < bricksToDraw; i++) {
      g2.setPaint(myColor);
      UIUtil.drawLine(g2,x_offset,y_center,x_offset + BRICK_WIDTH - 1,y_center);
      for (int j=0; j < y_steps; j++) {
        Color color=new Color(myColor.getRed(),myColor.getGreen(),myColor.getBlue(),255 - alpha_step * (j + 1));
        g2.setPaint(color);
        UIUtil.drawLine(g2,x_offset,y_center - 1 - j,x_offset + BRICK_WIDTH - 1,y_center - 1 - j);
        if (!(y_center % 2 != 0 && j == y_steps - 1)) {
          UIUtil.drawLine(g2,x_offset,y_center + 1 + j,x_offset + BRICK_WIDTH - 1,y_center + 1 + j);
        }
      }
      g2.setColor(new Color(myColor.getRed(),myColor.getGreen(),myColor.getBlue(),255 - alpha_step * (y_steps / 2 + 1)));
      g2.drawRect(x_offset,y_center - y_steps,BRICK_WIDTH - 1,size.height - 7);
      x_offset+=BRICK_WIDTH + BRICK_SPACE;
    }
  }
  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,oldAntialiasing);
}
