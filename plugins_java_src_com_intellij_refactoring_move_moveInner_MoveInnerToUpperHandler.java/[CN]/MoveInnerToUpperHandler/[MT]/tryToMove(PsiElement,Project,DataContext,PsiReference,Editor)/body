{
  if (isNonStaticInnerClass(element) && !JavaMoveClassesOrPackagesHandler.isReferenceInAnonymousClass(reference)) {
    PsiClass aClass=(PsiClass)element;
    FeatureUsageTracker.getInstance().triggerFeatureUsed("refactoring.move.moveInner");
    final PsiClass containingClass=aClass.getContainingClass();
    MoveInnerImpl.doMove(project,new PsiElement[]{aClass},null);
    return true;
  }
  return false;
}
