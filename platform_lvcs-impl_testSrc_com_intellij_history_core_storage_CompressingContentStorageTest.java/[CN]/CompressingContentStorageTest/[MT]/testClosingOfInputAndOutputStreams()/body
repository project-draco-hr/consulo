{
  IContentStorage subject=createStrictMock(IContentStorage.class);
  expect(subject.store((byte[])anyObject())).andReturn(1);
  expect(subject.load(anyInt())).andReturn(new byte[0]);
  replay(subject);
  final boolean[] closeCalled=new boolean[2];
  CompressingContentStorage s=new CompressingContentStorage(subject){
    @Override protected OutputStream createDeflaterOutputStream(    OutputStream s){
      return new DataOutputStream(s){
        @Override public void close() throws IOException {
          closeCalled[0]=true;
          super.close();
        }
      }
;
    }
    @Override protected InputStream createInflaterOutputStream(    byte[] content){
      return new ByteArrayInputStream(content){
        @Override public void close() throws IOException {
          closeCalled[1]=true;
          super.close();
        }
      }
;
    }
  }
;
  s.store(new byte[0]);
  s.load(0);
  assertTrue(closeCalled[0]);
  assertTrue(closeCalled[1]);
}
