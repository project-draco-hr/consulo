{
  DefaultJDOMExternalizer.readExternal(this,parentNode);
  final Element notNullAssertions=parentNode.getChild(ADD_NOTNULL_ASSERTIONS);
  if (notNullAssertions != null) {
    myAddNotNullAssertions=Boolean.valueOf(notNullAssertions.getAttributeValue(ENABLED,"true"));
  }
  Element node=parentNode.getChild(EXCLUDE_FROM_COMPILE);
  if (node != null) {
    myExcludedEntriesConfiguration.readExternal(node);
  }
  try {
    removeRegexpPatterns();
    node=parentNode.getChild(RESOURCE_EXTENSIONS);
    if (node != null) {
      for (      final Object o : node.getChildren(ENTRY)) {
        Element element=(Element)o;
        String pattern=element.getAttributeValue(NAME);
        if (!StringUtil.isEmpty(pattern)) {
          addRegexpPattern(pattern);
        }
      }
    }
    removeWildcardPatterns();
    node=parentNode.getChild(WILDCARD_RESOURCE_PATTERNS);
    if (node != null) {
      myWildcardPatternsInitialized=true;
      for (      final Object o : node.getChildren(ENTRY)) {
        final Element element=(Element)o;
        String pattern=element.getAttributeValue(NAME);
        if (!StringUtil.isEmpty(pattern)) {
          addWildcardResourcePattern(pattern);
        }
      }
    }
  }
 catch (  MalformedPatternException e) {
    throw new InvalidDataException(e);
  }
  myModuleProcessorProfiles.clear();
  myProcessorsProfilesMap=null;
  final Element annotationProcessingSettings=parentNode.getChild(ANNOTATION_PROCESSING);
  if (annotationProcessingSettings != null) {
    final List profiles=annotationProcessingSettings.getChildren("profile");
    if (!profiles.isEmpty()) {
      for (      Object elem : profiles) {
        final Element profileElement=(Element)elem;
        final boolean isDefault="true".equals(profileElement.getAttributeValue("default"));
        if (isDefault) {
          myDefaultProcessorsProfile.readExternal(profileElement);
        }
 else {
          final ProcessorConfigProfile profile=new ProcessorConfigProfile("");
          profile.readExternal(profileElement);
          myModuleProcessorProfiles.add(profile);
        }
      }
    }
 else {
      loadProfilesFromOldFormat(annotationProcessingSettings);
    }
  }
  myBytecodeTargetLevel=null;
  myModuleBytecodeTarget.clear();
  final Element bytecodeTargetElement=parentNode.getChild(BYTECODE_TARGET_LEVEL);
  if (bytecodeTargetElement != null) {
    myBytecodeTargetLevel=bytecodeTargetElement.getAttributeValue("target");
    for (    Element elem : (Collection<Element>)bytecodeTargetElement.getChildren(MODULE)) {
      final String name=elem.getAttributeValue(NAME);
      if (name == null) {
        continue;
      }
      final String target=elem.getAttributeValue("target");
      if (target == null) {
        continue;
      }
      myModuleBytecodeTarget.put(name,target);
    }
  }
}
