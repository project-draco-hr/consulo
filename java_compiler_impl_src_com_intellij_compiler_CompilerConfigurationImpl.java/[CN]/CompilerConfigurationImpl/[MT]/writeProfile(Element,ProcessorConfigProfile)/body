{
  element.setAttribute(NAME,profile.getName());
  element.setAttribute(ENABLED,Boolean.toString(profile.isEnabled()));
  final String srcDirName=profile.getGeneratedSourcesDirectoryName();
  if (srcDirName != null) {
    addChild(element,"sourceOutputDir").setAttribute(NAME,srcDirName);
  }
  final Map<String,String> options=profile.getProcessorOptions();
  if (!options.isEmpty()) {
    final List<String> keys=new ArrayList<String>(options.keySet());
    Collections.sort(keys,ALPHA_COMPARATOR);
    for (    String key : keys) {
      addChild(element,OPTION).setAttribute(NAME,key).setAttribute(VALUE,options.get(key));
    }
  }
  final Set<String> processors=profile.getProcessors();
  if (!processors.isEmpty()) {
    final List<String> processorList=new ArrayList<String>(processors);
    Collections.sort(processorList,ALPHA_COMPARATOR);
    for (    String proc : processorList) {
      addChild(element,"processor").setAttribute(NAME,proc);
    }
  }
  final Element pathElement=addChild(element,"processorPath").setAttribute("useClasspath",Boolean.toString(profile.isObtainProcessorsFromClasspath()));
  final String path=profile.getProcessorPath();
  if (!StringUtil.isEmpty(path)) {
    final StringTokenizer tokenizer=new StringTokenizer(path,File.pathSeparator,false);
    while (tokenizer.hasMoreTokens()) {
      final String token=tokenizer.nextToken();
      addChild(pathElement,ENTRY).setAttribute(NAME,FileUtil.toSystemIndependentName(token));
    }
  }
  final Set<String> moduleNames=profile.getModuleNames();
  if (!moduleNames.isEmpty()) {
    final List<String> names=new ArrayList<String>(moduleNames);
    Collections.sort(names,ALPHA_COMPARATOR);
    for (    String name : names) {
      addChild(element,MODULE).setAttribute(NAME,name);
    }
  }
}
