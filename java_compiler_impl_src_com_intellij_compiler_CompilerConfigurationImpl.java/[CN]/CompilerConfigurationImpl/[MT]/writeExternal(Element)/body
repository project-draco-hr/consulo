{
  DefaultJDOMExternalizer.writeExternal(this,parentNode);
  if (myAddNotNullAssertions != true) {
    final Element notNullAssertions=new Element(ADD_NOTNULL_ASSERTIONS);
    notNullAssertions.setAttribute("enabled",String.valueOf(myAddNotNullAssertions));
    parentNode.addContent(notNullAssertions);
  }
  if (myExcludedEntriesConfiguration.getExcludeEntryDescriptions().length > 0) {
    Element newChild=new Element(EXCLUDE_FROM_COMPILE);
    myExcludedEntriesConfiguration.writeExternal(newChild);
    parentNode.addContent(newChild);
  }
  final Element newChild=new Element(RESOURCE_EXTENSIONS);
  for (  final String pattern : getRegexpPatterns()) {
    final Element entry=new Element(ENTRY);
    entry.setAttribute(NAME,pattern);
    newChild.addContent(entry);
  }
  parentNode.addContent(newChild);
  if (myWildcardPatternsInitialized || !myWildcardPatterns.isEmpty()) {
    final Element wildcardPatterns=new Element(WILDCARD_RESOURCE_PATTERNS);
    for (    final String wildcardPattern : myWildcardPatterns) {
      final Element entry=new Element(ENTRY);
      entry.setAttribute(NAME,wildcardPattern);
      wildcardPatterns.addContent(entry);
    }
    parentNode.addContent(wildcardPatterns);
  }
  final Element annotationProcessingSettings=new Element(ANNOTATION_PROCESSING);
  parentNode.addContent(annotationProcessingSettings);
  annotationProcessingSettings.setAttribute("enabled",String.valueOf(myEnableAnnotationProcessors));
  annotationProcessingSettings.setAttribute("useClasspath",String.valueOf(myObtainProcessorsFromClasspath));
  if (myProcessorPath.length() > 0) {
    final StringTokenizer tokenizer=new StringTokenizer(myProcessorPath,File.pathSeparator,false);
    while (tokenizer.hasMoreTokens()) {
      final String path=tokenizer.nextToken();
      final Element pathElement=new Element("processorPath");
      annotationProcessingSettings.addContent(pathElement);
      pathElement.setAttribute("value",path);
    }
  }
  for (  Map.Entry<String,String> entry : myProcessorsMap.entrySet()) {
    final Element processor=new Element("processor");
    annotationProcessingSettings.addContent(processor);
    processor.setAttribute("name",entry.getKey());
    processor.setAttribute("options",entry.getValue());
  }
  final List<Module> modules=new ArrayList<Module>(myProcessedModules.keySet());
  Collections.sort(modules,new Comparator<Module>(){
    public int compare(    Module o1,    Module o2){
      return o1.getName().compareToIgnoreCase(o2.getName());
    }
  }
);
  for (  Module module : modules) {
    final Element moduleElement=new Element("processModule");
    annotationProcessingSettings.addContent(moduleElement);
    moduleElement.setAttribute("name",module.getName());
    final String dirName=myProcessedModules.get(module);
    if (dirName != null && dirName.length() > 0) {
      moduleElement.setAttribute("generatedDirName",dirName);
    }
  }
  if (!StringUtil.isEmpty(myBytecodeTargetLevel) || !myModuleBytecodeTarget.isEmpty()) {
    final Element bytecodeTarget=new Element(BYTECODE_TARGET_LEVEL);
    parentNode.addContent(bytecodeTarget);
    if (!StringUtil.isEmpty(myBytecodeTargetLevel)) {
      bytecodeTarget.setAttribute("target",myBytecodeTargetLevel);
    }
    if (!myModuleBytecodeTarget.isEmpty()) {
      final List<String> moduleNames=new ArrayList<String>(myModuleBytecodeTarget.keySet());
      Collections.sort(moduleNames,new Comparator<String>(){
        @Override public int compare(        String o1,        String o2){
          return o1.compareTo(o2);
        }
      }
);
      for (      String name : moduleNames) {
        final Element moduleElement=new Element("module");
        bytecodeTarget.addContent(moduleElement);
        moduleElement.setAttribute("name",name);
        final String value=myModuleBytecodeTarget.get(name);
        moduleElement.setAttribute("target",value != null ? value : "");
      }
    }
  }
}
