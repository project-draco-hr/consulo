{
  myProject=project;
  myExcludedEntriesConfiguration=new ExcludedEntriesConfiguration();
  Disposer.register(project,myExcludedEntriesConfiguration);
  MessageBusConnection connection=project.getMessageBus().connect(project);
  connection.subscribe(ProjectTopics.MODULES,new ModuleAdapter(){
    public void beforeModuleRemoved(    Project project,    Module module){
      getAnnotationProcessingConfiguration(module).removeModuleName(module.getName());
    }
    public void moduleAdded(    Project project,    Module module){
      myProcessorsProfilesMap=null;
    }
  }
);
  connection.subscribe(ExternalBuildOptionListener.TOPIC,new ExternalBuildOptionListener(){
    @Override public void externalBuildOptionChanged(    boolean externalBuildEnabled){
      final TranslatingCompilerFilesMonitor monitor=TranslatingCompilerFilesMonitor.getInstance();
      if (externalBuildEnabled) {
        monitor.suspendProject(myProject);
      }
 else {
        monitor.watchProject(myProject);
        monitor.scanSourcesForCompilableFiles(myProject);
        if (!myProject.isDefault()) {
          final File buildSystem=BuildManager.getInstance().getBuildSystemDirectory();
          final File[] subdirs=buildSystem.listFiles();
          if (subdirs != null) {
            final String prefix=myProject.getName().toLowerCase(Locale.US) + "_";
            for (            File subdir : subdirs) {
              if (subdir.getName().startsWith(prefix)) {
                FileUtil.asyncDelete(subdir);
              }
            }
          }
        }
      }
    }
  }
);
}
