{
  FileDocumentManager.getInstance().saveAllDocuments();
  final VirtualFileManager manager=VirtualFileManager.getInstance();
  final ApplicationEx application=ApplicationManagerEx.getApplicationEx();
  final Project project=(Project)DataManager.getInstance().getDataContext().getData(DataConstants.PROJECT);
  if (ModalityState.current() == ModalityState.NON_MMODAL) {
    application.runProcessWithProgressSynchronously(new Runnable(){
      public void run(){
        final ProgressIndicator pi=ProgressManager.getInstance().getProgressIndicator();
        pi.setText(IdeBundle.message("progress.synchronizing.files"));
        pi.setIndeterminate(true);
        final Semaphore refreshSemaphore=new Semaphore();
        refreshSemaphore.down();
        application.runReadAction(new Runnable(){
          public void run(){
            manager.refresh(true,new Runnable(){
              public void run(){
                refreshSemaphore.up();
              }
            }
);
          }
        }
);
        final Timer updateTimer=new Timer(true);
        updateTimer.scheduleAtFixedRate(new TimerTask(){
          public void run(){
            pi.setFraction(1.0);
          }
        }
,0L,PROGRESS_REPAINT_INTERVAL);
        try {
          refreshSemaphore.waitFor();
        }
  finally {
          updateTimer.cancel();
        }
      }
    }
,"",false,project);
  }
 else {
    application.runWriteAction(new Runnable(){
      public void run(){
        manager.refresh(false);
      }
    }
);
  }
}
