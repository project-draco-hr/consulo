{
  JpsJavaCompilerConfiguration configuration=JpsJavaExtensionService.getInstance().getOrCreateCompilerConfiguration(project);
  Element addNotNullTag=componentTag.getChild(ADD_NOTNULL_ASSERTIONS);
  if (addNotNullTag != null) {
    configuration.setAddNotNullAssertions(Boolean.parseBoolean(addNotNullTag.getAttributeValue(ENABLED,"true")));
  }
  Element excludeFromCompileTag=componentTag.getChild(EXCLUDE_FROM_COMPILE);
  if (excludeFromCompileTag != null) {
    for (    Element fileTag : JDOMUtil.getChildren(excludeFromCompileTag,"file")) {
      configuration.getCompilerExcludes().addExcludedFile(fileTag.getAttributeValue("url"));
    }
    for (    Element directoryTag : JDOMUtil.getChildren(excludeFromCompileTag,"directory")) {
      boolean recursively=Boolean.parseBoolean(directoryTag.getAttributeValue("includeSubdirectories"));
      configuration.getCompilerExcludes().addExcludedDirectory(directoryTag.getAttributeValue("url"),recursively);
    }
  }
  Element resourcePatternsTag=componentTag.getChild(WILDCARD_RESOURCE_PATTERNS);
  for (  Element entry : JDOMUtil.getChildren(resourcePatternsTag,ENTRY)) {
    String pattern=entry.getAttributeValue(NAME);
    if (!StringUtil.isEmpty(pattern)) {
      configuration.addResourcePattern(pattern);
    }
  }
  Element annotationProcessingTag=componentTag.getChild(ANNOTATION_PROCESSING);
  if (annotationProcessingTag != null) {
    List<Element> profiles=JDOMUtil.getChildren(annotationProcessingTag,"profile");
    for (    Element profileTag : profiles) {
      boolean isDefault=Boolean.parseBoolean(profileTag.getAttributeValue("default"));
      if (isDefault) {
        AnnotationProcessorProfileSerializer.readExternal(configuration.getDefaultAnnotationProcessingConfiguration(),profileTag);
      }
 else {
        AnnotationProcessorProfileSerializer.readExternal(configuration.addAnnotationProcessingProfile(),profileTag);
      }
    }
  }
  Element targetLevelTag=componentTag.getChild(BYTECODE_TARGET_LEVEL);
  if (targetLevelTag != null) {
    configuration.setProjectByteCodeTargetLevel(targetLevelTag.getAttributeValue(TARGET_ATTRIBUTE));
    for (    Element moduleTag : JDOMUtil.getChildren(targetLevelTag,MODULE)) {
      String moduleName=moduleTag.getAttributeValue(NAME);
      String level=moduleTag.getAttributeValue(TARGET_ATTRIBUTE);
      if (moduleName != null && level != null) {
        configuration.setModuleByteCodeTargetLevel(moduleName,level);
      }
    }
  }
  String compilerId=JDOMExternalizerUtil.readField(componentTag,"DEFAULT_COMPILER");
  if (compilerId != null) {
    configuration.setJavaCompilerId(compilerId);
  }
}
