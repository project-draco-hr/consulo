{
  CharSequence text=editor.getDocument().getCharsSequence();
  if (file instanceof PsiCompiledElement) {
    file=(PsiFile)((PsiCompiledElement)file).getMirror();
  }
  FeatureUsageTracker.getInstance().triggerFeatureUsed("editing.select.word");
  int caretOffset=editor.getCaretModel().getOffset();
  if (caretOffset > 0 && caretOffset < editor.getDocument().getTextLength() && !Character.isJavaIdentifierPart(text.charAt(caretOffset)) && Character.isJavaIdentifierPart(text.charAt(caretOffset - 1))) {
    caretOffset--;
  }
  PsiElement element=findElementAt(file,caretOffset);
  if (element instanceof PsiWhiteSpace && caretOffset > 0) {
    PsiElement anotherElement=findElementAt(file,caretOffset - 1);
    if (!(anotherElement instanceof PsiWhiteSpace)) {
      element=anotherElement;
    }
  }
  while (element instanceof PsiWhiteSpace || element != null && StringUtil.isEmptyOrSpaces(element.getText())) {
    while (element.getNextSibling() == null) {
      if (element instanceof PsiFile)       return;
      final PsiElement parent=element.getParent();
      final PsiElement[] children=parent.getChildren();
      if (children.length > 0 && children[children.length - 1] == element) {
        element=parent;
      }
 else {
        element=parent;
        break;
      }
    }
    element=element.getNextSibling();
    if (element == null)     return;
    caretOffset=element.getTextRange().getStartOffset();
  }
  final TextRange selectionRange=new TextRange(editor.getSelectionModel().getSelectionStart(),editor.getSelectionModel().getSelectionEnd());
  final Ref<TextRange> minimumRange=new Ref<TextRange>(new TextRange(0,editor.getDocument().getTextLength()));
  SelectWordUtil.processRanges(element,text,caretOffset,editor,new Processor<TextRange>(){
    @Override public boolean process(    TextRange range){
      if (range.contains(selectionRange) && !range.equals(selectionRange)) {
        if (minimumRange.get().contains(range)) {
          minimumRange.set(range);
          return true;
        }
      }
      return false;
    }
  }
);
  TextRange range=minimumRange.get();
  editor.getSelectionModel().setSelection(range.getStartOffset(),range.getEndOffset());
}
