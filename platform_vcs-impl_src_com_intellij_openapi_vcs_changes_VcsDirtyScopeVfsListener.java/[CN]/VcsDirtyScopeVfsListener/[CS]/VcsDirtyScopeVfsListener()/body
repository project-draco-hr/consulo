{
  myProjectLocator=ProjectLocator.getInstance();
  myMessageBusConnection=ApplicationManager.getApplication().getMessageBus().connect();
  myLock=new Object();
  myQueue=new ArrayList<FileAndDirsCollector>();
  myDirtReporter=new Runnable(){
    @Override public void run(){
      ArrayList<FileAndDirsCollector> list;
synchronized (myLock) {
        list=new ArrayList<FileAndDirsCollector>(myQueue);
        myQueue.clear();
      }
      Map<VcsDirtyScopeManager,Pair<HashSet<FilePath>,HashSet<FilePath>>> map=new HashMap<VcsDirtyScopeManager,Pair<HashSet<FilePath>,HashSet<FilePath>>>();
      for (      FileAndDirsCollector collector : list) {
        Map<VcsDirtyScopeManager,Pair<HashSet<FilePath>,HashSet<FilePath>>> pairMap=collector.map;
        for (        Map.Entry<VcsDirtyScopeManager,Pair<HashSet<FilePath>,HashSet<FilePath>>> entry : pairMap.entrySet()) {
          final VcsDirtyScopeManager key=entry.getKey();
          Pair<HashSet<FilePath>,HashSet<FilePath>> existing=map.get(key);
          Pair<HashSet<FilePath>,HashSet<FilePath>> value=entry.getValue();
          if (existing != null) {
            existing.getFirst().addAll(value.getFirst());
            existing.getSecond().addAll(value.getSecond());
          }
 else {
            map.put(key,value);
          }
        }
      }
      new FileAndDirsCollector().markDirty(map);
    }
  }
;
  myZipperUpdater=new ConstantZipperUpdater(300,Alarm.ThreadToUse.OWN_THREAD,ApplicationManager.getApplication(),myDirtReporter);
}
