{
  Element versionElement=parentNode.getChild(ELEMENT_VERSION);
  if (versionElement != null) {
    myMajorVersion=versionElement.getAttributeValue(ATTRIBUTE_MAJOR);
    myMinorVersion=versionElement.getAttributeValue(ATTRIBUTE_MINOR);
    myEAP=Boolean.parseBoolean(versionElement.getAttributeValue(ATTRIBUTE_EAP));
  }
  Element companyElement=parentNode.getChild(ELEMENT_COMPANY);
  if (companyElement != null) {
    myCompanyName=companyElement.getAttributeValue(ATTRIBUTE_NAME,myCompanyName);
    myCompanyUrl=companyElement.getAttributeValue(ATTRIBUTE_URL,myCompanyUrl);
  }
  Element buildElement=parentNode.getChild(ELEMENT_BUILD);
  if (buildElement != null) {
    myBuildNumber=buildElement.getAttributeValue(ATTRIBUTE_NUMBER);
    String dateString=buildElement.getAttributeValue(ATTRIBUTE_DATE);
    if (dateString.equals("__BUILD_DATE__")) {
      myBuildDate=new GregorianCalendar();
      try {
        final JarFile bootJar=new JarFile(PathManager.getHomePath() + File.separator + "lib"+ File.separator+ "boot.jar");
        try {
          final JarEntry jarEntry=bootJar.entries().nextElement();
          myBuildDate.setTime(new Date(jarEntry.getTime()));
        }
  finally {
          bootJar.close();
        }
      }
 catch (      Exception ignore) {
      }
    }
 else {
      myBuildDate=parseDate(dateString);
    }
  }
  String consuloBuildNumber=System.getProperty("consulo.build.number");
  if (consuloBuildNumber != null) {
    myBuildNumber=consuloBuildNumber;
  }
  Thread currentThread=Thread.currentThread();
  currentThread.setName(currentThread.getName() + " " + myMajorVersion+ "."+ myMinorVersion+ "#"+ myBuildNumber+ ", eap:"+ myEAP);
  Element logoElement=parentNode.getChild(ELEMENT_LOGO);
  if (logoElement != null) {
    mySplashImageUrl=logoElement.getAttributeValue(ATTRIBUTE_URL);
    String v=logoElement.getAttributeValue(ATTRIBUTE_PROGRESS_COLOR);
    if (v != null) {
      myProgressColor=parseColor(v);
    }
  }
  Element aboutLogoElement=parentNode.getChild(ELEMENT_ABOUT);
  if (aboutLogoElement != null) {
    myAboutImageUrl=aboutLogoElement.getAttributeValue(ATTRIBUTE_URL);
    String v=aboutLogoElement.getAttributeValue(ATTRIBUTE_ABOUT_FOREGROUND_COLOR);
    if (v != null) {
      myAboutForeground=parseColor(v);
    }
    String c=aboutLogoElement.getAttributeValue(ATTRIBUTE_ABOUT_LINK_COLOR);
    if (c != null) {
      myAboutLinkColor=parseColor(c);
    }
    String logoX=aboutLogoElement.getAttributeValue("logoX");
    String logoY=aboutLogoElement.getAttributeValue("logoY");
    String logoW=aboutLogoElement.getAttributeValue("logoW");
    String logoH=aboutLogoElement.getAttributeValue("logoH");
    if (logoX != null && logoY != null && logoW != null && logoH != null) {
      try {
        myAboutLogoRect=new Rectangle(Integer.parseInt(logoX),Integer.parseInt(logoY),Integer.parseInt(logoW),Integer.parseInt(logoH));
      }
 catch (      NumberFormatException nfe) {
      }
    }
  }
  Element helpElement=parentNode.getChild(HELP_ELEMENT_NAME);
  if (helpElement != null) {
    myHelpFileName=helpElement.getAttributeValue(ATTRIBUTE_HELP_FILE);
    myHelpRootName=helpElement.getAttributeValue(ATTRIBUTE_HELP_ROOT);
    final String webHelpUrl=helpElement.getAttributeValue(ATTRIBUTE_WEBHELP_URL);
    if (webHelpUrl != null) {
      myWebHelpUrl=webHelpUrl;
    }
    String attValue=helpElement.getAttributeValue(ATTRIBUTE_HAS_HELP);
    myHasHelp=attValue == null || Boolean.parseBoolean(attValue);
    attValue=helpElement.getAttributeValue(ATTRIBUTE_HAS_CONTEXT_HELP);
    myHasContextHelp=attValue == null || Boolean.parseBoolean(attValue);
  }
  Element documentationElement=parentNode.getChild(ELEMENT_DOCUMENTATION);
  if (documentationElement != null) {
    myDocumentationUrl=documentationElement.getAttributeValue(ATTRIBUTE_URL);
  }
  Element supportElement=parentNode.getChild(ELEMENT_SUPPORT);
  if (supportElement != null) {
    mySupportUrl=supportElement.getAttributeValue(ATTRIBUTE_URL);
  }
  Element feedbackElement=parentNode.getChild(ELEMENT_FEEDBACK);
  if (feedbackElement != null) {
    myEAPFeedbackUrl=feedbackElement.getAttributeValue(ATTRIBUTE_EAP_URL);
    myReleaseFeedbackUrl=feedbackElement.getAttributeValue(ATTRIBUTE_RELEASE_URL);
  }
  Element whatsnewElement=parentNode.getChild(ELEMENT_WHATSNEW);
  if (whatsnewElement != null) {
    myWhatsNewUrl=whatsnewElement.getAttributeValue(ATTRIBUTE_URL);
  }
  myStatisticsUrl=StringUtil.notNullize(System.getProperty("consulo.statistics.host"),DEFAULT_STATISTICS_HOST) + "post";
  Element keymapElement=parentNode.getChild(ELEMENT_KEYMAP);
  if (keymapElement != null) {
    myWinKeymapUrl=keymapElement.getAttributeValue(ATTRIBUTE_WINDOWS_URL);
    myMacKeymapUrl=keymapElement.getAttributeValue(ATTRIBUTE_MAC_URL);
  }
}
