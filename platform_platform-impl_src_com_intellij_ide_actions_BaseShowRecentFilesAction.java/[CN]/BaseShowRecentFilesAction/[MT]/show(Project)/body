{
  final DefaultListModel model=new DefaultListModel();
  FileEditorManagerEx fem=FileEditorManagerEx.getInstanceEx(project);
  VirtualFile[] selectedFiles=fem.getSelectedFiles();
  VirtualFile currentFile=fem.getCurrentFile();
  VirtualFile[] files=filesToShow(project);
  FileEditorProviderManager editorProviderManager=FileEditorProviderManager.getInstance();
  for (int i=files.length - 1; i >= 0; i--) {
    VirtualFile file=files[i];
    boolean isSelected=ArrayUtil.find(selectedFiles,file) >= 0;
    if ((!isSelected || !file.equals(currentFile)) && editorProviderManager.getProviders(project,file).length > 0) {
      model.addElement(file);
    }
  }
  final JLabel pathLabel=new JLabel(" ");
  pathLabel.setHorizontalAlignment(SwingConstants.RIGHT);
  if (true) {
    final Font font=pathLabel.getFont();
    pathLabel.setFont(font.deriveFont((float)10));
  }
  final JList list=new JBList(model);
  list.addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_DELETE) {
        int index=list.getSelectedIndex();
        if (index == -1 || index >= list.getModel().getSize()) {
          return;
        }
        Object[] values=list.getSelectedValues();
        for (        Object value : values) {
          VirtualFile file=(VirtualFile)value;
          model.removeElement(file);
          if (model.getSize() > 0) {
            if (model.getSize() == index) {
              list.setSelectedIndex(model.getSize() - 1);
            }
 else             if (model.getSize() > index) {
              list.setSelectedIndex(index);
            }
          }
 else {
            list.clearSelection();
          }
          EditorHistoryManager.getInstance(project).removeFile(file);
        }
      }
    }
  }
);
  final MyListSelectionListener listSelectionListener=new MyListSelectionListener(pathLabel,list);
  list.getSelectionModel().addListSelectionListener(listSelectionListener);
  Runnable runnable=new Runnable(){
    public void run(){
      Object[] values=list.getSelectedValues();
      for (      Object value : values) {
        VirtualFile file=(VirtualFile)value;
        FileEditorManager.getInstance(project).openFile(file,true,true);
      }
    }
  }
;
  if (list.getModel().getSize() == 0) {
    list.clearSelection();
  }
  list.setCellRenderer(new RecentFilesRenderer(project));
  JPanel footerPanel=new JPanel(new BorderLayout()){
    @Override protected void paintComponent(    Graphics g){
      super.paintComponent(g);
      g.setColor(BORDER_COLOR);
      g.drawLine(0,0,getWidth(),0);
    }
  }
;
  footerPanel.setBorder(BorderFactory.createEmptyBorder(4,4,4,4));
  footerPanel.add(pathLabel);
  final PopupChooserBuilder builder=new PopupChooserBuilder(list).setTitle(getTitle()).setAdText(" ").setMovable(true).setItemChoosenCallback(runnable).addAdditionalChooseKeystroke(getAdditionalSelectKeystroke()).setFilteringEnabled(new Function<Object,String>(){
    public String fun(    Object o){
      return o instanceof VirtualFile ? ((VirtualFile)o).getName() : "";
    }
  }
);
  final Shortcut[] shortcuts=KeymapManager.getInstance().getActiveKeymap().getShortcuts(getPeerActionId());
  final PeerListener listener=new PeerListener(project,getPeerActionId());
  for (  Shortcut shortcut : shortcuts) {
    if (shortcut instanceof KeyboardShortcut && ((KeyboardShortcut)shortcut).getSecondKeyStroke() == null) {
      final KeyStroke keyStroke=((KeyboardShortcut)shortcut).getFirstKeyStroke();
      builder.registerKeyboardAction(keyStroke,listener);
    }
  }
  JBPopup popup=builder.createPopup();
  listener.setPopup(popup);
  listSelectionListener.setPopup(popup);
  popup.showCenteredInCurrentWindow(project);
}
