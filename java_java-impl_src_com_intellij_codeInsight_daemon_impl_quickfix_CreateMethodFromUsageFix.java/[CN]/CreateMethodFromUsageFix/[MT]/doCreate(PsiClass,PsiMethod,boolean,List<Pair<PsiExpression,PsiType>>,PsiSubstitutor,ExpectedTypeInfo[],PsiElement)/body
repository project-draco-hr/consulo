{
  method=CodeInsightUtilBase.forcePsiPostprocessAndRestoreElement(method);
  if (method == null) {
    return;
  }
  final Project project=targetClass.getProject();
  final PsiFile targetFile=targetClass.getContainingFile();
  Document document=PsiDocumentManager.getInstance(project).getDocument(targetFile);
  if (document == null)   return;
  TemplateBuilderImpl builder=new TemplateBuilderImpl(method);
  CreateFromUsageUtils.setupMethodParameters(method,builder,context,substitutor,arguments);
  new GuessTypeParameters(JavaPsiFacade.getInstance(project).getElementFactory()).setupTypeElement(method.getReturnTypeElement(),expectedTypes,substitutor,builder,context,targetClass);
  PsiCodeBlock body=method.getBody();
  builder.setEndVariableAfter(shouldBeAbstract || body == null ? method : body.getLBrace());
  method=CodeInsightUtilBase.forcePsiPostprocessAndRestoreElement(method);
  if (method == null)   return;
  RangeMarker rangeMarker=document.createRangeMarker(method.getTextRange());
  final Editor newEditor=positionCursor(project,targetFile,method);
  Template template=builder.buildTemplate();
  newEditor.getCaretModel().moveToOffset(rangeMarker.getStartOffset());
  newEditor.getDocument().deleteString(rangeMarker.getStartOffset(),rangeMarker.getEndOffset());
  rangeMarker.dispose();
  if (!shouldBeAbstract) {
    startTemplate(newEditor,template,project,new TemplateEditingAdapter(){
      @Override public void templateFinished(      Template template,      boolean brokenOff){
        ApplicationManager.getApplication().runWriteAction(new Runnable(){
          @Override public void run(){
            PsiDocumentManager.getInstance(project).commitDocument(newEditor.getDocument());
            final int offset=newEditor.getCaretModel().getOffset();
            PsiMethod method=PsiTreeUtil.findElementOfClassAtOffset(targetFile,offset - 1,PsiMethod.class,false);
            if (context instanceof PsiMethod) {
              final PsiTypeParameter[] typeParameters=((PsiMethod)context).getTypeParameters();
              if (typeParameters.length > 0) {
                for (                PsiTypeParameter typeParameter : typeParameters) {
                  if (checkTypeParam(method,typeParameter)) {
                    final JVMElementFactory factory=JVMElementFactories.getFactory(method.getLanguage(),method.getProject());
                    PsiTypeParameterList list=method.getTypeParameterList();
                    if (list == null) {
                      PsiTypeParameterList newList=factory.createTypeParameterList();
                      list=(PsiTypeParameterList)method.addAfter(newList,method.getModifierList());
                    }
                    list.add(factory.createTypeParameter(typeParameter.getName(),typeParameter.getExtendsList().getReferencedTypes()));
                  }
                }
              }
            }
            if (method != null) {
              try {
                CreateFromUsageUtils.setupMethodBody(method);
              }
 catch (              IncorrectOperationException e) {
                LOG.error(e);
              }
              CreateFromUsageUtils.setupEditor(method,newEditor);
            }
          }
        }
);
      }
    }
);
  }
 else {
    startTemplate(newEditor,template,project);
  }
}
