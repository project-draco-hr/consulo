{
  final ArrayList<ExcludeFolder> result=new ArrayList<ExcludeFolder>(myExcludeFolders);
  final CompilerModuleExtension compilerModuleExtension=myRootModel.getModuleExtension(CompilerModuleExtension.class);
  final boolean excludeOutput=compilerModuleExtension.isExcludeOutput();
  if (!excludeOutput && !myRootModel.isExcludeExplodedDirectory() && myExcludedOutputFolders.isEmpty()) {
    return myExcludeFolders.toArray(new ExcludeFolder[myExcludeFolders.size()]);
  }
  result.addAll(myExcludedOutputFolders);
  if (excludeOutput) {
    if (!compilerModuleExtension.isCompilerOutputPathInherited()) {
      addExcludeForOutputPath(compilerModuleExtension.getCompilerOutputPointer(),result);
      addExcludeForOutputPath(compilerModuleExtension.getCompilerOutputForTestsPointer(),result);
    }
 else {
      final Project project=myRootModel.getModule().getProject();
      final CompilerProjectExtension compilerProjectExtension=CompilerProjectExtension.getInstance(project);
      final String outputUrl=compilerProjectExtension.getCompilerOutputUrl();
      if (outputUrl != null) {
        if (new File(VfsUtil.urlToPath(outputUrl)).exists()) {
          addExcludeForOutputPath(compilerProjectExtension.getCompilerOutputPointer(),result);
        }
      }
    }
  }
  if (myRootModel.isExcludeExplodedDirectory()) {
    addExcludeForOutputPath(myRootModel.myExplodedDirectoryPointer,result);
  }
  return result.toArray(new ExcludeFolder[result.size()]);
}
