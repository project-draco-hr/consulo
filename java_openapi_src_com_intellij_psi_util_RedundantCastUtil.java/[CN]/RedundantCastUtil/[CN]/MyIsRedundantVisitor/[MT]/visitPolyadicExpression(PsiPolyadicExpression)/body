{
  IElementType tokenType=expression.getOperationTokenType();
  PsiExpression[] operands=expression.getOperands();
  if (operands.length >= 2) {
    PsiType lType=operands[0].getType();
    processBinaryExpressionOperand(deparenthesizeExpression(operands[0]),operands[1].getType(),tokenType);
    for (int i=1; i < operands.length; i++) {
      PsiExpression operand=deparenthesizeExpression(operands[i]);
      processBinaryExpressionOperand(operand,lType,tokenType);
      lType=TypeConversionUtil.calcTypeForBinaryExpression(lType,operand.getType(),tokenType,true);
    }
  }
  super.visitPolyadicExpression(expression);
}
