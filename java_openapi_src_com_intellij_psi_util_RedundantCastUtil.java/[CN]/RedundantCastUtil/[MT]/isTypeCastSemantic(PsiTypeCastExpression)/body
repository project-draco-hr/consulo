{
  PsiExpression operand=typeCast.getOperand();
  if (operand == null)   return false;
  if (isInPolymorphicCall(typeCast))   return true;
  PsiType opType=operand.getType();
  PsiTypeElement typeElement=typeCast.getCastType();
  if (typeElement == null)   return false;
  PsiType castType=typeElement.getType();
  if (castType instanceof PsiPrimitiveType) {
    if (opType instanceof PsiPrimitiveType) {
      return !opType.equals(castType);
    }
    final PsiPrimitiveType unboxedOpType=PsiPrimitiveType.getUnboxedType(opType);
    if (unboxedOpType != null && !unboxedOpType.equals(castType)) {
      return true;
    }
  }
 else   if (castType instanceof PsiClassType && ((PsiClassType)castType).hasParameters()) {
    if (opType instanceof PsiClassType && ((PsiClassType)opType).isRaw())     return true;
  }
 else   if (castType instanceof PsiClassType && ((PsiClassType)castType).isRaw()) {
    if (opType instanceof PsiClassType && ((PsiClassType)opType).hasParameters())     return true;
  }
  PsiElement parent=typeCast.getParent();
  while (parent instanceof PsiParenthesizedExpression)   parent=parent.getParent();
  if (parent instanceof PsiBinaryExpression) {
    PsiBinaryExpression expression=(PsiBinaryExpression)parent;
    PsiExpression firstOperand=expression.getLOperand();
    PsiExpression otherOperand=expression.getROperand();
    if (PsiTreeUtil.isAncestor(otherOperand,typeCast,false)) {
      PsiExpression temp=otherOperand;
      otherOperand=firstOperand;
      firstOperand=temp;
    }
    if (firstOperand != null && otherOperand != null && wrapperCastChangeSemantics(firstOperand,otherOperand,operand)) {
      return true;
    }
  }
  return false;
}
