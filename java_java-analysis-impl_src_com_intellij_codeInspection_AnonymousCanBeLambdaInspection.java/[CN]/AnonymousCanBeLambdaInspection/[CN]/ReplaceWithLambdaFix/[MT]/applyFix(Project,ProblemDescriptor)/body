{
  final PsiElement element=descriptor.getPsiElement();
  if (element != null) {
    final PsiAnonymousClass anonymousClass=PsiTreeUtil.getParentOfType(element,PsiAnonymousClass.class);
    LOG.assertTrue(anonymousClass != null);
    ChangeContextUtil.encodeContextInfo(anonymousClass,true);
    boolean validContext=LambdaUtil.isValidLambdaContext(anonymousClass.getParent().getParent());
    final String canonicalText=anonymousClass.getBaseClassType().getCanonicalText();
    final PsiMethod method=anonymousClass.getMethods()[0];
    LOG.assertTrue(method != null);
    final String lambdaWithTypesDeclared=composeLambdaText(method,true);
    final String withoutTypesDeclared=composeLambdaText(method,false);
    final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(project);
    PsiLambdaExpression lambdaExpression=(PsiLambdaExpression)elementFactory.createExpressionFromText(withoutTypesDeclared,anonymousClass);
    final PsiCodeBlock body=method.getBody();
    LOG.assertTrue(body != null);
    final PsiStatement[] statements=body.getStatements();
    PsiElement copy=body.copy();
    if (statements.length == 1 && statements[0] instanceof PsiReturnStatement) {
      PsiExpression value=((PsiReturnStatement)statements[0]).getReturnValue();
      if (value != null) {
        copy=value.copy();
      }
    }
    PsiElement lambdaBody=lambdaExpression.getBody();
    LOG.assertTrue(lambdaBody != null);
    lambdaBody.replace(copy);
    final PsiNewExpression newExpression=(PsiNewExpression)anonymousClass.getParent();
    lambdaExpression=(PsiLambdaExpression)newExpression.replace(lambdaExpression);
    ChangeContextUtil.decodeContextInfo(lambdaExpression,null,null);
    if (!validContext) {
      final PsiParenthesizedExpression typeCast=(PsiParenthesizedExpression)elementFactory.createExpressionFromText("((" + canonicalText + ")"+ withoutTypesDeclared+ ")",lambdaExpression);
      final PsiExpression typeCastExpr=typeCast.getExpression();
      LOG.assertTrue(typeCastExpr != null);
      final PsiExpression typeCastOperand=((PsiTypeCastExpression)typeCastExpr).getOperand();
      LOG.assertTrue(typeCastOperand != null);
      final PsiElement fromText=((PsiLambdaExpression)typeCastOperand).getBody();
      LOG.assertTrue(fromText != null);
      lambdaBody=lambdaExpression.getBody();
      LOG.assertTrue(lambdaBody != null);
      fromText.replace(lambdaBody);
      lambdaExpression.replace(typeCast);
      return;
    }
    PsiType interfaceType=lambdaExpression.getFunctionalInterfaceType();
    if (isInferred(lambdaExpression,interfaceType)) {
      final PsiLambdaExpression withTypes=(PsiLambdaExpression)elementFactory.createExpressionFromText(lambdaWithTypesDeclared,lambdaExpression);
      final PsiElement withTypesBody=withTypes.getBody();
      LOG.assertTrue(withTypesBody != null);
      lambdaBody=lambdaExpression.getBody();
      LOG.assertTrue(lambdaBody != null);
      withTypesBody.replace(lambdaBody);
      lambdaExpression=(PsiLambdaExpression)lambdaExpression.replace(withTypes);
      interfaceType=lambdaExpression.getFunctionalInterfaceType();
      if (isInferred(lambdaExpression,interfaceType)) {
        final PsiTypeCastExpression typeCast=(PsiTypeCastExpression)elementFactory.createExpressionFromText("(" + canonicalText + ")"+ withoutTypesDeclared,lambdaExpression);
        final PsiExpression typeCastOperand=typeCast.getOperand();
        LOG.assertTrue(typeCastOperand instanceof PsiLambdaExpression);
        final PsiElement fromText=((PsiLambdaExpression)typeCastOperand).getBody();
        LOG.assertTrue(fromText != null);
        lambdaBody=lambdaExpression.getBody();
        LOG.assertTrue(lambdaBody != null);
        fromText.replace(lambdaBody);
        lambdaExpression.replace(typeCast);
      }
    }
  }
}
