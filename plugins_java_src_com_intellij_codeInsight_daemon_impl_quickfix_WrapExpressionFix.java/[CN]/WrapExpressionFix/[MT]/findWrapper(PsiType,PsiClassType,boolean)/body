{
  PsiClass aClass=expectedType.resolve();
  if (aClass != null) {
    PsiType expectedReturnType=expectedType;
    if (primitiveExpected) {
      expectedReturnType=PsiPrimitiveType.getUnboxedType(expectedType);
    }
    if (expectedReturnType == null)     return null;
    PsiMethod[] methods=aClass.getMethods();
    final Set<PsiMethod> wrapperMethods=new LinkedHashSet<PsiMethod>();
    for (    PsiMethod method : methods) {
      if (method.hasModifierProperty(PsiModifier.STATIC) && method.getParameterList().getParametersCount() == 1 && method.getParameterList().getParameters()[0].getType().isAssignableFrom(type) && method.getReturnType() != null && expectedReturnType.equals(method.getReturnType())) {
        final String methodName=method.getName();
        if (methodName.startsWith("parse") || methodName.equals("valueOf")) {
          return method;
        }
        wrapperMethods.add(method);
      }
    }
    if (!wrapperMethods.isEmpty())     return wrapperMethods.iterator().next();
  }
  return null;
}
