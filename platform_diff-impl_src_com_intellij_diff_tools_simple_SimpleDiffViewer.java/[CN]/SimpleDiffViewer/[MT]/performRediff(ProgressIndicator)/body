{
  try {
    indicator.checkCanceled();
    final Document document1=getContent1().getDocument();
    final Document document2=getContent2().getDocument();
    CharSequence[] texts=ApplicationManager.getApplication().runReadAction(new Computable<CharSequence[]>(){
      @Override public CharSequence[] compute(){
        return new CharSequence[]{document1.getImmutableCharSequence(),document2.getImmutableCharSequence()};
      }
    }
);
    List<LineFragment> lineFragments=null;
    if (getHighlightPolicy().isShouldCompare()) {
      lineFragments=DiffUtil.compare(texts[0],texts[1],getDiffConfig(),indicator);
    }
    boolean isEqualContents=(lineFragments == null || lineFragments.isEmpty()) && StringUtil.equals(document1.getCharsSequence(),document2.getCharsSequence());
    return apply(new CompareData(lineFragments,isEqualContents));
  }
 catch (  DiffTooBigException e) {
    return applyNotification(DiffNotifications.createDiffTooBig());
  }
catch (  ProcessCanceledException e) {
    throw e;
  }
catch (  Throwable e) {
    LOG.error(e);
    return applyNotification(DiffNotifications.createError());
  }
}
