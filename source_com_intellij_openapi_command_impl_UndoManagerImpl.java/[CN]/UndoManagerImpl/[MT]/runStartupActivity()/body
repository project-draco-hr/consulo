{
  myCurrentEditorProvider=new FocusBasedCurrentEditorProvider();
  myCommandListener=new CommandAdapter(){
    private boolean myFakeCommandStarted=false;
    public void commandStarted(    CommandEvent event){
      onCommandStarted(event.getProject(),event.getUndoConfirmationPolicy());
    }
    public void commandFinished(    CommandEvent event){
      onCommandFinished(event.getProject(),event.getCommandName(),event.getCommandGroupId());
    }
    public void undoTransparentActionStarted(){
      if (!isInsideCommand()) {
        myFakeCommandStarted=true;
        onCommandStarted(myProject,UndoConfirmationPolicy.DEFAULT);
      }
    }
    public void undoTransparentActionFinished(){
      if (myFakeCommandStarted) {
        myFakeCommandStarted=false;
        onCommandFinished(myProject,"",null);
      }
    }
  }
;
  myCommandProcessor.addCommandListener(myCommandListener);
  if (myProject != null) {
    myLocalHistoryActionListsner=new LocalHistoryActionListener(){
      public void onActionStart(){
        onCommandStarted(myProject,UndoConfirmationPolicy.DEFAULT);
      }
      public void onActionFinish(      String name){
        onCommandFinished(myProject,name,null);
      }
    }
;
    LocalHistory.addActionListener(myProject,myLocalHistoryActionListsner);
  }
  myDocumentEditingUndoProvider=new DocumentEditingUndoProvider(myProject,myEditorFactory);
  myMerger=new CommandMerger(this,myEditorFactory);
  myFileOperationUndoProvider=new FileOperationsUndoProvider(this,myProject);
  myBeforeFileDeletionListener=new MyBeforeDeletionListener();
  myVirtualFileManager.addVirtualFileListener(myBeforeFileDeletionListener);
  registerRootChangesListener();
}
