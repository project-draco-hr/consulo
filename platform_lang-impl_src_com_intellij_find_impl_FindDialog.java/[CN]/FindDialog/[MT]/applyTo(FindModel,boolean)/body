{
  model.setCaseSensitive(myCbCaseSensitive.isSelected());
  if (model.isReplaceState()) {
    model.setPreserveCase(myCbPreserveCase.isSelected());
  }
  model.setWholeWordsOnly(myCbWholeWordsOnly.isSelected());
  String selectedSearchContextInUi=(String)mySearchContext.getSelectedItem();
  FindModel.SearchContext searchContext=FindModel.SearchContext.ANY;
  if (FindBundle.message("find.context.in.literals.scope.label").equals(selectedSearchContextInUi)) {
    searchContext=FindModel.SearchContext.IN_STRING_LITERALS;
  }
 else   if (FindBundle.message("find.context.in.comments.scope.label").equals(selectedSearchContextInUi)) {
    searchContext=FindModel.SearchContext.IN_COMMENTS;
  }
 else   if (FindBundle.message("find.context.except.comments.scope.label").equals(selectedSearchContextInUi)) {
    searchContext=FindModel.SearchContext.EXCEPT_COMMENTS;
  }
 else   if (FindBundle.message("find.context.except.literals.scope.label").equals(selectedSearchContextInUi)) {
    searchContext=FindModel.SearchContext.EXCEPT_STRING_LITERALS;
  }
 else   if (FindBundle.message("find.context.except.comments.and.literals.scope.label").equals(selectedSearchContextInUi)) {
    searchContext=FindModel.SearchContext.EXCEPT_COMMENTS_AND_STRING_LITERALS;
  }
  model.setSearchContext(searchContext);
  model.setRegularExpressions(myCbRegularExpressions.isSelected());
  String stringToFind=getStringToFind();
  model.setStringToFind(stringToFind);
  if (model.isReplaceState()) {
    model.setPromptOnReplace(true);
    model.setReplaceAll(false);
    String stringToReplace=getStringToReplace();
    model.setStringToReplace(StringUtil.convertLineSeparators(stringToReplace));
  }
  if (!model.isMultipleFiles()) {
    model.setForward(myRbForward.isSelected());
    model.setFromCursor(myRbFromCursor.isSelected());
    model.setGlobal(myRbGlobal.isSelected());
  }
 else {
    if (myCbToOpenInNewTab != null) {
      model.setOpenInNewTab(myCbToOpenInNewTab.isSelected());
    }
    model.setProjectScope(myRbProject.isSelected());
    model.setDirectoryName(null);
    model.setModuleName(null);
    model.setCustomScopeName(null);
    model.setCustomScope(null);
    model.setCustomScope(false);
    if (myRbDirectory.isSelected()) {
      String directory=getDirectory();
      model.setDirectoryName(directory == null ? "" : directory);
      model.setWithSubdirectories(myCbWithSubdirectories.isSelected());
    }
 else     if (myRbModule.isSelected()) {
      model.setModuleName((String)myModuleComboBox.getSelectedItem());
    }
 else     if (myRbCustomScope.isSelected()) {
      SearchScope selectedScope=myScopeCombo.getSelectedScope();
      String customScopeName=selectedScope == null ? null : selectedScope.getDisplayName();
      model.setCustomScopeName(customScopeName);
      model.setCustomScope(selectedScope == null ? null : selectedScope);
      model.setCustomScope(true);
    }
  }
  model.setFindAll(findAll);
  String mask=getFileTypeMask();
  model.setFileFilter(mask);
}
