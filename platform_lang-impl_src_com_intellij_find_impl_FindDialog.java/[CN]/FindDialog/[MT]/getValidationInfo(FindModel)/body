{
  if (myRbDirectory != null && myRbDirectory.isEnabled() && myRbDirectory.isSelected()) {
    PsiDirectory directory=FindInProjectUtil.getPsiDirectory(model,myProject);
    if (directory == null) {
      return new ValidationInfo(FindBundle.message("find.directory.not.found.error",getDirectory()),myDirectoryComboBox);
    }
  }
  if (!canSearchThisString()) {
    return new ValidationInfo("String to find is empty",myInputComboBox);
  }
  if (myCbRegularExpressions != null && myCbRegularExpressions.isSelected() && myCbRegularExpressions.isEnabled()) {
    String toFind=getStringToFind();
    try {
      boolean isCaseSensitive=myCbCaseSensitive != null && myCbCaseSensitive.isSelected() && myCbCaseSensitive.isEnabled();
      Pattern pattern=Pattern.compile(toFind,isCaseSensitive ? Pattern.MULTILINE : Pattern.MULTILINE | Pattern.CASE_INSENSITIVE);
      if (pattern.matcher("").matches() && !toFind.endsWith("$") && !toFind.startsWith("^")) {
        return new ValidationInfo(FindBundle.message("find.empty.match.regular.expression.error"),myInputComboBox);
      }
    }
 catch (    PatternSyntaxException e) {
      return new ValidationInfo(FindBundle.message("find.invalid.regular.expression.error",toFind,e.getDescription()),myInputComboBox);
    }
  }
  final String mask=getFileTypeMask();
  if (mask != null) {
    if (mask.isEmpty()) {
      return new ValidationInfo(FindBundle.message("find.filter.empty.file.mask.error"),myFileFilter);
    }
 else {
      try {
        FindInProjectUtil.createFileMaskRegExp(mask);
      }
 catch (      PatternSyntaxException ex) {
        return new ValidationInfo(FindBundle.message("find.filter.invalid.file.mask.error",mask),myFileFilter);
      }
    }
  }
  return null;
}
