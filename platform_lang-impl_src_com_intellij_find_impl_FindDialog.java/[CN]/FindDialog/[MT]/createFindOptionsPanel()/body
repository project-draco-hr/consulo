{
  JPanel findOptionsPanel=new JPanel();
  findOptionsPanel.setBorder(IdeBorderFactory.createTitledBorder(FindBundle.message("find.options.group"),true));
  findOptionsPanel.setLayout(new BoxLayout(findOptionsPanel,BoxLayout.Y_AXIS));
  myCbCaseSensitive=createCheckbox(FindBundle.message("find.options.case.sensitive"));
  findOptionsPanel.add(myCbCaseSensitive);
  ItemListener liveResultsPreviewUpdateListener=new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      scheduleResultsUpdate();
    }
  }
;
  myCbCaseSensitive.addItemListener(liveResultsPreviewUpdateListener);
  myCbPreserveCase=createCheckbox(FindBundle.message("find.options.replace.preserve.case"));
  myCbPreserveCase.addItemListener(liveResultsPreviewUpdateListener);
  findOptionsPanel.add(myCbPreserveCase);
  myCbPreserveCase.setVisible(myModel.isReplaceState());
  myCbWholeWordsOnly=createCheckbox(FindBundle.message("find.options.whole.words.only"));
  myCbWholeWordsOnly.addItemListener(liveResultsPreviewUpdateListener);
  findOptionsPanel.add(myCbWholeWordsOnly);
  myCbRegularExpressions=createCheckbox(FindBundle.message("find.options.regular.expressions"));
  boolean supportRegexpFind=FileTypeRegistry.getInstance().getFileTypeByExtension("regexp") != UnknownFileType.INSTANCE;
  myCbRegularExpressions.setVisible(supportRegexpFind);
  myCbRegularExpressions.addItemListener(liveResultsPreviewUpdateListener);
  final JPanel regExPanel=new JPanel();
  regExPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
  regExPanel.setLayout(new BoxLayout(regExPanel,BoxLayout.X_AXIS));
  regExPanel.add(myCbRegularExpressions);
  regExPanel.add(RegExHelpPopup.createRegExLink("[Help]",regExPanel,LOG));
  regExPanel.setVisible(supportRegexpFind);
  findOptionsPanel.add(regExPanel);
  mySearchContext=new ComboBox(new Object[]{getPresentableName(FindModel.SearchContext.ANY),getPresentableName(FindModel.SearchContext.IN_COMMENTS),getPresentableName(FindModel.SearchContext.IN_STRING_LITERALS),getPresentableName(FindModel.SearchContext.EXCEPT_COMMENTS),getPresentableName(FindModel.SearchContext.EXCEPT_STRING_LITERALS),getPresentableName(FindModel.SearchContext.EXCEPT_COMMENTS_AND_STRING_LITERALS)});
  mySearchContext.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      scheduleResultsUpdate();
    }
  }
);
  final JPanel searchContextPanel=new JPanel(new BorderLayout());
  searchContextPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
  JLabel searchContextLabel=new JLabel(FindBundle.message("find.context.combo.label"));
  searchContextLabel.setLabelFor(mySearchContext);
  JPanel panel=new JPanel();
  panel.setAlignmentX(Component.LEFT_ALIGNMENT);
  panel.add(searchContextLabel);
  searchContextPanel.add(panel,BorderLayout.WEST);
  panel=new JPanel(new BorderLayout());
  panel.add(mySearchContext,BorderLayout.NORTH);
  searchContextPanel.add(panel,BorderLayout.CENTER);
  findOptionsPanel.add(searchContextPanel);
  ActionListener actionListener=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      updateControls();
    }
  }
;
  myCbRegularExpressions.addActionListener(actionListener);
  myCbRegularExpressions.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    final ItemEvent e){
      setupRegExpSetting();
    }
  }
);
  myCbCaseSensitive.addActionListener(actionListener);
  myCbPreserveCase.addActionListener(actionListener);
  return findOptionsPanel;
}
