{
  JPanel optionsPanel=new JPanel();
  optionsPanel.setLayout(new GridBagLayout());
  GridBagConstraints gbConstraints=new GridBagConstraints();
  gbConstraints.weightx=1;
  gbConstraints.weighty=1;
  gbConstraints.fill=GridBagConstraints.BOTH;
  gbConstraints.gridwidth=GridBagConstraints.REMAINDER;
  JPanel topOptionsPanel=new JPanel();
  topOptionsPanel.setLayout(new GridLayout(1,2,UIUtil.DEFAULT_HGAP,0));
  topOptionsPanel.add(createFindOptionsPanel());
  optionsPanel.add(topOptionsPanel,gbConstraints);
  JPanel resultsOptionPanel=null;
  if (myModel.isMultipleFiles()) {
    optionsPanel.add(createGlobalScopePanel(),gbConstraints);
    gbConstraints.weightx=1;
    gbConstraints.weighty=1;
    gbConstraints.fill=GridBagConstraints.HORIZONTAL;
    gbConstraints.gridwidth=GridBagConstraints.REMAINDER;
    optionsPanel.add(createFilterPanel(),gbConstraints);
    myCbToSkipResultsWhenOneUsage=createCheckbox(FindSettings.getInstance().isSkipResultsWithOneUsage(),FindBundle.message("find.options.skip.results.tab.with.one.occurrence.checkbox"));
    resultsOptionPanel=createResultsOptionPanel(optionsPanel,gbConstraints);
    resultsOptionPanel.add(myCbToSkipResultsWhenOneUsage);
    myCbToSkipResultsWhenOneUsage.setVisible(!myModel.isReplaceState());
    if (ApplicationManager.getApplication().isInternal() && myModel.isMultipleFiles()) {
      gbConstraints.weightx=1;
      gbConstraints.weighty=2;
      gbConstraints.fill=GridBagConstraints.BOTH;
      JBScrollPane scrollPane=new JBScrollPane(myResultsPreviewTable=new JBTable(),JBScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JBScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
      optionsPanel.add(myResultsPreviewPanel=new HideableTitledPanel("Results preview",scrollPane,myPreviousPreviewResultsState),gbConstraints);
      myResultsPreviewTable.setShowColumns(false);
      new DoubleClickListener(){
        @Override protected boolean onDoubleClick(        MouseEvent event){
          int row=myResultsPreviewTable.getSelectedRow();
          Object valueAt=myResultsPreviewTable.getModel().getValueAt(row,0);
          if (valueAt instanceof Usage) {
            doCancelAction();
            ((Usage)valueAt).navigate(true);
          }
          return true;
        }
      }
.installOn(myResultsPreviewTable);
    }
  }
 else {
    JPanel leftOptionsPanel=new JPanel();
    leftOptionsPanel.setLayout(new GridLayout(3,1,0,4));
    leftOptionsPanel.add(createDirectionPanel());
    leftOptionsPanel.add(createOriginPanel());
    leftOptionsPanel.add(createScopePanel());
    topOptionsPanel.add(leftOptionsPanel);
  }
  if (myModel.isOpenInNewTabVisible()) {
    myCbToOpenInNewTab=new JCheckBox(FindBundle.message("find.open.in.new.tab.checkbox"));
    myCbToOpenInNewTab.setFocusable(false);
    myCbToOpenInNewTab.setSelected(myModel.isOpenInNewTab());
    myCbToOpenInNewTab.setEnabled(myModel.isOpenInNewTabEnabled());
    if (resultsOptionPanel == null)     resultsOptionPanel=createResultsOptionPanel(optionsPanel,gbConstraints);
    resultsOptionPanel.add(myCbToOpenInNewTab);
  }
  return optionsPanel;
}
