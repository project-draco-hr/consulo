{
  final Map<String,PsiFileSystemItem> map=new HashMap<String,PsiFileSystemItem>();
  if (isBinary(element))   return map;
  element.accept(new PsiRecursiveElementWalkingVisitor(true){
    @Override public void visitElement(    PsiElement element){
      final PsiReference[] refs=element.getReferences();
      if (refs.length > 0 && refs[0] instanceof FileReferenceOwner) {
        final FileReference ref=((FileReferenceOwner)refs[0]).getLastFileReference();
        if (ref != null) {
          final ResolveResult[] results=ref.multiResolve(false);
          for (          ResolveResult result : results) {
            if (result.getElement() instanceof PsiFileSystemItem) {
              PsiFileSystemItem fileSystemItem=(PsiFileSystemItem)result.getElement();
              element.putCopyableUserData(REF_FILE_SYSTEM_ITEM_KEY,fileSystemItem);
              map.put(element.getText(),fileSystemItem);
              break;
            }
          }
        }
      }
      super.visitElement(element);
    }
  }
);
  return map;
}
