{
  try {
    if (isUseStoredRevision()) {
      String revision=getResultRevision();
      final byte[] result=CvsUtil.getStoredContentForFile(myFile,revision);
      if (result != null)       return result;
      VirtualFile[] storedFiles=getStoredFiles();
      if (storedFiles.length == 0) {
        Messages.showMessageDialog("Cannot find any stored copy of file " + myFile.getName(),"Merge",Messages.getErrorIcon());
        return null;
      }
      if (storedFiles.length == 1) {
        VirtualFile storedCopy=storedFiles[0];
        if (Messages.showYesNoDialog("Use stored copy " + CvsVfsUtil.getPathFor(storedCopy) + " to merge with?","Merge",Messages.getQuestionIcon()) != DialogWrapper.OK_EXIT_CODE) {
          return null;
        }
        return storedCopy.contentsToByteArray();
      }
      VirtualFile selected=chooseFileFrom(storedFiles);
      if (selected == null)       return null;
      return selected.contentsToByteArray();
    }
 else {
      try {
        final GetFileContentOperation operation=GetFileContentOperation.createForFile(myFile,new SimpleRevision(getResultRevision()));
        CvsOperationExecutor executor=new CvsOperationExecutor(myProject);
        executor.performActionSync(new CommandCvsHandler("Merge",operation),new CvsOperationExecutorCallback(){
          public void executionFinished(          boolean successfully){
          }
          public void executeInProgressAfterAction(          ModalityContext modaityContext){
          }
          public void executionFinishedSuccessfully(){
          }
        }
);
        return operation.getFileBytes();
      }
 catch (      CannotFindCvsRootException e) {
        throw new IOException(e.getLocalizedMessage());
      }
    }
  }
 catch (  IOException e) {
    throw new VcsException(e);
  }
}
