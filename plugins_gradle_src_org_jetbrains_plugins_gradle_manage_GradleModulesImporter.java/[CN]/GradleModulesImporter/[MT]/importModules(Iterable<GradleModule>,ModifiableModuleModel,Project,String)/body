{
  final Map<GradleModule,Module> result=new HashMap<GradleModule,Module>();
  UIUtil.invokeAndWaitIfNeeded(new Runnable(){
    @Override public void run(){
      Application application=ApplicationManager.getApplication();
      AccessToken writeLock=application.acquireWriteActionLock(getClass());
      try {
        final List<ModifiableRootModel> rootModels=new ArrayList<ModifiableRootModel>();
        final GradleProjectEntityChangeListener publisher=intellijProject.getMessageBus().syncPublisher(GradleProjectEntityChangeListener.TOPIC);
        for (        GradleModule module : modules) {
          publisher.onChangeStart(module);
        }
        try {
          Map<GradleModule,Module> moduleMappings=doImportModules(modules,model,rootModels);
          result.putAll(moduleMappings);
          myAlarm.cancelAllRequests();
          myAlarm.addRequest(new SetupExternalLibrariesTask(moduleMappings,gradleProjectPath,intellijProject),PROJECT_INITIALISATION_DELAY_MS);
        }
  finally {
          ModifiableRootModel[] modelsAsArray=rootModels.toArray(new ModifiableRootModel[rootModels.size()]);
          ModifiableModelCommitter.multiCommit(modelsAsArray,model);
          for (          GradleModule module : modules) {
            publisher.onChangeEnd(module);
          }
        }
      }
  finally {
        writeLock.finish();
      }
    }
  }
);
  return result;
}
