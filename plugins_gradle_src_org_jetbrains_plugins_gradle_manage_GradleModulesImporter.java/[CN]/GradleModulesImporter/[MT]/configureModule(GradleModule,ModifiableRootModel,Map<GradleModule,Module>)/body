{
  final Object key=new Object();
  final Object dummy=new Object();
  RootPolicy<Object> policy=new RootPolicy<Object>(){
    @Override public Object visitModuleSourceOrderEntry(    ModuleSourceOrderEntry moduleSourceOrderEntry,    Object value){
      return key;
    }
  }
;
  for (  OrderEntry orderEntry : model.getOrderEntries()) {
    if (key != orderEntry.accept(policy,dummy)) {
      model.removeOrderEntry(orderEntry);
    }
  }
  model.inheritSdk();
  CompilerModuleExtension compilerExtension=model.getModuleExtension(CompilerModuleExtension.class);
  compilerExtension.inheritCompilerOutputPath(module.isInheritProjectCompileOutputPath());
  if (!module.isInheritProjectCompileOutputPath()) {
    String compileOutputPath=module.getCompileOutputPath(SourceType.SOURCE);
    String testCompileOutputPath=module.getCompileOutputPath(SourceType.TEST);
    if (StringUtil.isEmpty(compileOutputPath) || StringUtil.isEmpty(testCompileOutputPath)) {
      GradleLog.LOG.warn(String.format("Module '%s' doesn't inherit project compile output path but has incomplete local setup. Falling back to the project " + "compile output path. Local compile output path: '%s', local test compile output path: '%s'",module.getName(),compileOutputPath,testCompileOutputPath));
      compilerExtension.inheritCompilerOutputPath(true);
    }
 else {
      compilerExtension.setCompilerOutputPath(compileOutputPath);
      compilerExtension.setCompilerOutputPathForTests(testCompileOutputPath);
    }
  }
  for (  GradleContentRoot contentRoot : module.getContentRoots()) {
    ContentEntry contentEntry=model.addContentEntry(toVfsUrl(contentRoot.getRootPath()));
    for (    String path : contentRoot.getPaths(SourceType.SOURCE)) {
      contentEntry.addSourceFolder(toVfsUrl(path),false);
    }
    for (    String path : contentRoot.getPaths(SourceType.TEST)) {
      contentEntry.addSourceFolder(toVfsUrl(path),true);
    }
    for (    String path : contentRoot.getPaths(SourceType.EXCLUDED)) {
      contentEntry.addExcludeFolder(toVfsUrl(path));
    }
  }
  for (  GradleDependency dependency : module.getDependencies()) {
    dependency.invite(new GradleEntityVisitorAdapter(){
      @Override public void visit(      @NotNull GradleModuleDependency dependency){
        ModuleOrderEntry orderEntry=model.addModuleOrderEntry(modules.get(dependency.getTarget()));
        orderEntry.setExported(dependency.isExported());
        orderEntry.setScope(dependency.getScope());
      }
    }
);
  }
}
