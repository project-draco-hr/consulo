{
  final PsiParameter[] parameters=method.getParameterList().getParameters();
  final Set<PsiParameter> deletedParameters=new HashSet<PsiParameter>();
  if (isOriginal) {
    deletedParameters.addAll(Arrays.asList(parameters));
    for (int i=0; i < myChangeInfo.newParms.length; i++) {
      ParameterInfo parameterInfo=myChangeInfo.newParms[i];
      if (parameterInfo.oldParameterIndex >= 0) {
        deletedParameters.remove(parameters[parameterInfo.oldParameterIndex]);
      }
    }
  }
  for (int i=0; i < myChangeInfo.newParms.length; i++) {
    ParameterInfo parameterInfo=myChangeInfo.newParms[i];
    final int oldParameterIndex=parameterInfo.oldParameterIndex;
    final String newName=parameterInfo.getName();
    if (oldParameterIndex >= 0) {
      if (isOriginal) {
        final PsiParameter parameter=parameters[oldParameterIndex];
        if (!newName.equals(parameter.getName())) {
          RenameUtil.visitLocalsCollisions(parameter,newName,method.getBody(),null,new RenameUtil.CollidingVariableVisitor(){
            public void visitCollidingElement(            final PsiVariable collidingVariable){
              if (!(collidingVariable instanceof PsiField) && !deletedParameters.contains(collidingVariable)) {
                result.add(new RenamedParameterCollidesWithLocalUsageInfo(parameter,collidingVariable,method));
              }
            }
          }
);
        }
      }
    }
 else {
      RenameUtil.visitLocalsCollisions(method,newName,method.getBody(),null,new RenameUtil.CollidingVariableVisitor(){
        public void visitCollidingElement(        PsiVariable collidingVariable){
          if (!(collidingVariable instanceof PsiField) && !deletedParameters.contains(collidingVariable)) {
            result.add(new NewParameterCollidesWithLocalUsageInfo(collidingVariable,collidingVariable,method));
          }
        }
      }
);
    }
  }
}
