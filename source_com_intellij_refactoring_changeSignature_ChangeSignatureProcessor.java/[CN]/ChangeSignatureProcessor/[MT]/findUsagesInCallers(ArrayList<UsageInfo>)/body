{
  for (Iterator<PsiMethod> iterator=myPropagateParametersMethods.iterator(); iterator.hasNext(); ) {
    PsiMethod caller=iterator.next();
    usages.add(new CallerUsageInfo(caller,true,myPropagateExceptionsMethods.contains(caller)));
  }
  for (Iterator<PsiMethod> iterator=myPropagateExceptionsMethods.iterator(); iterator.hasNext(); ) {
    PsiMethod caller=iterator.next();
    usages.add(new CallerUsageInfo(caller,myPropagateParametersMethods.contains(caller),true));
  }
  Set<PsiMethod> merged=new HashSet<PsiMethod>();
  merged.addAll(myPropagateParametersMethods);
  merged.addAll(myPropagateExceptionsMethods);
  for (Iterator<PsiMethod> iterator=merged.iterator(); iterator.hasNext(); ) {
    final PsiMethod method=iterator.next();
    findSimpleUsagesWithoutParameters(method,usages,myPropagateParametersMethods.contains(method),myPropagateExceptionsMethods.contains(method),false);
  }
}
