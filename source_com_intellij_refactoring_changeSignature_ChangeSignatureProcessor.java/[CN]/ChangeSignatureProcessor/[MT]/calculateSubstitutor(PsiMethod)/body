{
  PsiSubstitutor substitutor;
  if (method.getManager().areElementsEquivalent(method,myChangeInfo.getMethod())) {
    substitutor=PsiSubstitutor.EMPTY;
  }
 else {
    final PsiClass sourceClass=myChangeInfo.getMethod().getContainingClass();
    final PsiClass containingClass=method.getContainingClass();
    if (sourceClass != null && containingClass != null && InheritanceUtil.isInheritorOrSelf(containingClass,sourceClass,true)) {
      final PsiSubstitutor superClassSubstitutor=TypeConversionUtil.getSuperClassSubstitutor(sourceClass,containingClass,PsiSubstitutor.EMPTY);
      final MethodSignature superMethodSignature=myChangeInfo.getMethod().getSignature(superClassSubstitutor);
      final MethodSignature methodSignature=method.getSignature(PsiSubstitutor.EMPTY);
      final PsiSubstitutor superMethodSubstitutor=MethodSignatureUtil.getSuperMethodSignatureSubstitutor(methodSignature,superMethodSignature);
      if (superMethodSubstitutor != null) {
        substitutor=superMethodSubstitutor;
      }
 else {
        substitutor=superClassSubstitutor;
      }
    }
 else {
      substitutor=PsiSubstitutor.EMPTY;
    }
  }
  return substitutor;
}
