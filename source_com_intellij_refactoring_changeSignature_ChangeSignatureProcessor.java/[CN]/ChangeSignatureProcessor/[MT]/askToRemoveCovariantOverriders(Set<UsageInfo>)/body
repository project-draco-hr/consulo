{
  if (myManager.getEffectiveLanguageLevel().compareTo(LanguageLevel.JDK_1_5) >= 0) {
    List<UsageInfo> covariantOverriderInfos=new ArrayList<UsageInfo>();
    for (    UsageInfo usageInfo : usages) {
      if (usageInfo instanceof OverriderUsageInfo) {
        final OverriderUsageInfo info=(OverriderUsageInfo)usageInfo;
        PsiMethod overrider=info.getElement();
        PsiMethod baseMethod=info.getBaseMethod();
        PsiSubstitutor substitutor=calculateSubstitutor(overrider,baseMethod);
        PsiType type;
        try {
          type=substitutor.substitute(myChangeInfo.newReturnType.getType(myChangeInfo.getMethod(),myManager));
        }
 catch (        IncorrectOperationException e) {
          LOG.error(e);
          return;
        }
        if (type.isAssignableFrom(overrider.getReturnType())) {
          covariantOverriderInfos.add(usageInfo);
        }
      }
    }
    if (covariantOverriderInfos.size() > 0) {
      if (ApplicationManager.getApplication().isUnitTestMode() || Messages.showYesNoDialog(myProject,"Do you want to process overriding methods\n" + "with covariant return type?","Change Method Signature",Messages.getQuestionIcon()) != DialogWrapper.OK_EXIT_CODE) {
        for (        UsageInfo usageInfo : covariantOverriderInfos) {
          usages.remove(usageInfo);
        }
      }
    }
  }
}
