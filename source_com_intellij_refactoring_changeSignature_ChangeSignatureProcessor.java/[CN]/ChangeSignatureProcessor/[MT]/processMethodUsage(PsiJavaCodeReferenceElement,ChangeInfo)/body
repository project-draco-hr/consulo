{
  if (changeInfo.isNameChanged) {
    PsiElement last=ref.getReferenceNameElement();
    if (last instanceof PsiIdentifier && last.getText().equals(changeInfo.oldName)) {
      last.replace(changeInfo.newNameIdentifier);
    }
  }
  final PsiExpressionList list=RefactoringUtil.getArgumentListByMethodReference(ref);
  boolean isSuperCall=false;
  if (ref instanceof PsiReferenceExpression) {
    final PsiExpression qualifierExpression=((PsiReferenceExpression)ref).getQualifierExpression();
    if (qualifierExpression instanceof PsiSuperExpression) {
      for (Iterator iterator=myMethodsToBeChanged.iterator(); iterator.hasNext(); ) {
        PsiElement element=(PsiElement)iterator.next();
        if (PsiTreeUtil.isAncestor(element,ref,false)) {
          isSuperCall=true;
          break;
        }
      }
    }
  }
  fixActualArgumentsList(list,changeInfo,isSuperCall);
  if (changeInfo.isExceptionSetChanged) {
    PsiClassType[] newExceptions=getChangedExceptionInfo(changeInfo);
    fixExceptions(ref,newExceptions);
  }
}
