{
  PsiElementFactory factory=myManager.getElementFactory();
  List<UsageInfo> postponedUsages=new ArrayList<UsageInfo>();
  try {
    if (myChangeInfo.isNameChanged) {
      myChangeInfo.newNameIdentifier=factory.createIdentifier(myChangeInfo.newName);
    }
    if (myChangeInfo.isReturnTypeChanged) {
      myChangeInfo.newTypeElement=myChangeInfo.newReturnType.getType(myChangeInfo.getMethod(),myManager);
    }
    if (myGenerateDelegate) {
      generateDelegate();
    }
    for (int i=0; i < usages.length; i++) {
      UsageInfo usage=usages[i];
      if (usage instanceof CallerUsageInfo) {
        final CallerUsageInfo callerUsageInfo=(CallerUsageInfo)usage;
        processCallerMethod(callerUsageInfo.getMethod(),null,callerUsageInfo.isToInsertParameter(),callerUsageInfo.isToInsertException());
      }
 else       if (usage instanceof OverriderUsageInfo) {
        OverriderUsageInfo info=(OverriderUsageInfo)usage;
        final PsiMethod method=info.getElement();
        final PsiMethod baseMethod=info.getBaseMethod();
        if (info.isOriginalOverrider()) {
          processPrimaryMethod(method,baseMethod,false);
        }
 else {
          processCallerMethod(method,baseMethod,info.isToInsertArgs(),info.isToCatchExceptions());
        }
      }
    }
    for (int i=0; i < usages.length; i++) {
      UsageInfo usage=usages[i];
      if (usage.getElement() == null)       continue;
      if (usage instanceof DefaultConstructorImplicitUsageInfo) {
        final DefaultConstructorImplicitUsageInfo defConstructorUsage=(DefaultConstructorImplicitUsageInfo)usage;
        addSuperCall(defConstructorUsage.getConstructor(),defConstructorUsage.getBaseConstructor());
      }
 else       if (usage instanceof NoConstructorClassUsageInfo) {
        addDefaultConstructor(((NoConstructorClassUsageInfo)usage).getPsiClass());
      }
 else       if (usage.getElement() instanceof PsiJavaCodeReferenceElement) {
        if (usage instanceof MethodCallUsageInfo) {
          final MethodCallUsageInfo methodCallInfo=((MethodCallUsageInfo)usage);
          processMethodUsage(methodCallInfo.getElement(),myChangeInfo,methodCallInfo.isToChangeArguments(),methodCallInfo.isToCatchExceptions(),methodCallInfo.getReferencedMethod());
        }
 else {
          String newName=((MyParameterUsageInfo)usage).newParameterName;
          String oldName=((MyParameterUsageInfo)usage).oldParameterName;
          processParameterUsage((PsiReferenceExpression)usage.getElement(),oldName,newName);
        }
      }
 else       if (usage.getElement() instanceof PsiEnumConstant) {
        fixActualArgumentsList(((PsiEnumConstant)usage.getElement()).getArgumentList(),myChangeInfo,true);
      }
 else       if (!(usage instanceof OverriderUsageInfo)) {
        postponedUsages.add(usage);
      }
    }
    LOG.assertTrue(myChangeInfo.getMethod().isValid());
    processPrimaryMethod(myChangeInfo.getMethod(),null,true);
    for (Iterator<UsageInfo> i=postponedUsages.iterator(); i.hasNext(); ) {
      UsageInfo usageInfo=i.next();
      PsiReference reference=usageInfo.getElement().getReference();
      if (reference != null) {
        PsiElement target=null;
        if (usageInfo instanceof MyParameterUsageInfo) {
          String newParameterName=((MyParameterUsageInfo)usageInfo).newParameterName;
          PsiParameter[] newParams=myChangeInfo.getMethod().getParameterList().getParameters();
          for (int j=0; j < newParams.length; j++) {
            PsiParameter newParam=newParams[j];
            if (newParam.getName().equals(newParameterName)) {
              target=newParam;
              break;
            }
          }
        }
 else {
          target=myChangeInfo.getMethod();
        }
        if (target != null) {
          reference.bindToElement(target);
        }
      }
    }
    LOG.assertTrue(myChangeInfo.getMethod().isValid());
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
