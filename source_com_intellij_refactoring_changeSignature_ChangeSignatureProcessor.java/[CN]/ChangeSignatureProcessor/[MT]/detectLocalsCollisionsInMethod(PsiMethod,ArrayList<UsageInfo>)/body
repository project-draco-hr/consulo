{
  final PsiParameter[] overridingParameters=method.getParameterList().getParameters();
  final Set<PsiParameter> deletedParameters=new HashSet<PsiParameter>(Arrays.asList(overridingParameters));
  for (int i=0; i < myParameterInfo.length; i++) {
    ParameterInfo parameterInfo=myParameterInfo[i];
    if (parameterInfo.oldParameterIndex >= 0 && parameterInfo.getName().equals(overridingParameters[parameterInfo.oldParameterIndex].getName())) {
      deletedParameters.remove(overridingParameters[parameterInfo.oldParameterIndex]);
    }
  }
  for (int i=0; i < myParameterInfo.length; i++) {
    ParameterInfo parameterInfo=myParameterInfo[i];
    final int oldParameterIndex=parameterInfo.oldParameterIndex;
    final String newName=parameterInfo.getName();
    if (oldParameterIndex >= 0) {
      final PsiParameter parameter=overridingParameters[oldParameterIndex];
      if (!newName.equals(parameter.getName())) {
        RenameUtil.visitLocalsCollisions(parameter,newName,method.getBody(),null,new RenameUtil.CollidingVariableVisitor(){
          public void visitCollidingElement(          final PsiVariable collidingVariable){
            if (!(collidingVariable instanceof PsiField) && !deletedParameters.contains(collidingVariable)) {
              result.add(new RenamedParameterCollidesWithLocalUsageInfo(parameter,collidingVariable,method));
            }
          }
        }
);
      }
    }
 else {
      RenameUtil.visitLocalsCollisions(method,newName,method.getBody(),null,new RenameUtil.CollidingVariableVisitor(){
        public void visitCollidingElement(        PsiVariable collidingVariable){
          if (!(collidingVariable instanceof PsiField) && !deletedParameters.contains(collidingVariable)) {
            result.add(new NewParameterCollidesWithLocalUsageInfo(collidingVariable,collidingVariable,method));
          }
        }
      }
);
    }
  }
}
