{
  super.visitReferenceExpression(expression);
  boolean isLockedOnInstance=false;
  boolean isLockedOnClass=false;
  final PsiMethod containingMethod=PsiTreeUtil.getParentOfType(expression,PsiMethod.class);
  if (containingMethod != null) {
    if (containingMethod.hasModifierProperty(PsiModifier.SYNCHRONIZED)) {
      if (containingMethod.hasModifierProperty(PsiModifier.STATIC)) {
        isLockedOnClass=true;
      }
 else {
        isLockedOnInstance=true;
      }
    }
  }
  PsiElement elementToCheck=expression;
  while (elementToCheck != null) {
    final PsiSynchronizedStatement syncStatement=PsiTreeUtil.getParentOfType(elementToCheck,PsiSynchronizedStatement.class);
    if (syncStatement != null) {
      final PsiExpression lockExpression=syncStatement.getLockExpression();
      if (lockExpression instanceof PsiReferenceExpression) {
        final PsiReferenceExpression reference=(PsiReferenceExpression)lockExpression;
        final PsiElement referent=reference.resolve();
        if (referent instanceof PsiField) {
          final PsiField referentField=(PsiField)referent;
          if (referentField.hasModifierProperty(PsiModifier.STATIC)) {
            isLockedOnClass=true;
          }
 else {
            isLockedOnInstance=true;
          }
        }
      }
 else       if (lockExpression instanceof PsiThisExpression) {
        isLockedOnInstance=true;
      }
 else       if (lockExpression instanceof PsiClassObjectAccessExpression) {
        isLockedOnClass=true;
      }
    }
    elementToCheck=syncStatement;
  }
  if (isLockedOnInstance && !isLockedOnClass) {
    final PsiElement referent=expression.resolve();
    if (referent instanceof PsiField) {
      final PsiField referredField=(PsiField)referent;
      if (referredField.hasModifierProperty(PsiModifier.STATIC) && !isConstant(referredField)) {
        registerError(expression);
      }
    }
  }
}
