{
  if (libraryName != null) {
    libraryElement.setAttribute(NAME_ATTRIBUTE,libraryName);
  }
  saveProperties((JpsTypedLibrary<?>)library,libraryElement);
  List<Element> jarDirectoryElements=new ArrayList<Element>();
  for (  JpsLibraryRootTypeSerializer serializer : getSortedSerializers()) {
    List<JpsLibraryRoot> roots=library.getRoots(serializer.getType());
    if (roots.isEmpty() && !serializer.isWriteIfEmpty())     continue;
    Element typeElement=new Element(serializer.getTypeId());
    for (    JpsLibraryRoot root : roots) {
      typeElement.addContent(new Element(ROOT_TAG).setAttribute(URL_ATTRIBUTE,root.getUrl()));
      if (root.getInclusionOptions() != JpsLibraryRoot.InclusionOptions.ROOT_ITSELF) {
        Element jarDirectoryElement=new Element(JAR_DIRECTORY_TAG).setAttribute(URL_ATTRIBUTE,root.getUrl());
        boolean recursive=root.getInclusionOptions() == JpsLibraryRoot.InclusionOptions.ARCHIVES_UNDER_ROOT_RECURSIVELY;
        jarDirectoryElement.setAttribute(RECURSIVE_ATTRIBUTE,Boolean.toString(recursive));
        if (!serializer.getType().equals(JpsOrderRootType.COMPILED)) {
          jarDirectoryElement.setAttribute(TYPE_ATTRIBUTE,serializer.getTypeId());
        }
        jarDirectoryElements.add(jarDirectoryElement);
      }
    }
    libraryElement.addContent(typeElement);
  }
  libraryElement.addContent(jarDirectoryElements);
}
