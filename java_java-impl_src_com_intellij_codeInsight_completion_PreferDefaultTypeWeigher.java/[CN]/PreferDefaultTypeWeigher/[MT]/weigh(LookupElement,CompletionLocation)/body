{
  if (location == null) {
    return null;
  }
  final Object object=item.getObject();
  if (location.getCompletionType() != CompletionType.SMART)   return MyResult.normal;
  if (object instanceof PsiClass) {
    final PsiTypeParameter parameter=TYPE_PARAMETER.getValue(location);
    if (parameter != null && object.equals(PsiUtil.resolveClassInType(TypeConversionUtil.typeParameterErasure(parameter)))) {
      return MyResult.exactlyExpected;
    }
  }
  ExpectedTypeInfo[] expectedInfos=JavaCompletionUtil.EXPECTED_TYPES.getValue(location);
  if (expectedInfos == null)   return MyResult.normal;
  PsiType itemType=JavaCompletionUtil.getLookupElementType(item);
  if (itemType == null || !itemType.isValid())   return MyResult.normal;
  if (object instanceof PsiClass) {
    for (    final ExpectedTypeInfo info : expectedInfos) {
      if (TypeConversionUtil.erasure(info.getType().getDeepComponentType()).equals(TypeConversionUtil.erasure(itemType))) {
        return AbstractExpectedTypeSkipper.skips(item,location) ? MyResult.expectedNoSelect : MyResult.exactlyExpected;
      }
    }
  }
  for (  final ExpectedTypeInfo expectedInfo : expectedInfos) {
    final PsiType defaultType=expectedInfo.getDefaultType();
    final PsiType expectedType=expectedInfo.getType();
    if (!expectedType.isValid()) {
      return MyResult.normal;
    }
    if (defaultType != expectedType) {
      if (defaultType.equals(itemType)) {
        return MyResult.exactlyDefault;
      }
      if (defaultType.isAssignableFrom(itemType)) {
        return MyResult.ofDefaultType;
      }
    }
    if (PsiType.VOID.equals(itemType) && PsiType.VOID.equals(expectedType)) {
      return MyResult.exactlyExpected;
    }
  }
  return MyResult.normal;
}
