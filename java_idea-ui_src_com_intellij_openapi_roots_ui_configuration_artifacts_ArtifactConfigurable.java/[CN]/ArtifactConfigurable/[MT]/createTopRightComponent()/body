{
  final ComboBox artifactTypeBox=new ComboBox();
  for (  ArtifactType type : ArtifactType.getAllTypes()) {
    artifactTypeBox.addItem(type);
  }
  artifactTypeBox.setRenderer(new DefaultListCellRenderer(){
    @Override public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean isSelected,    boolean cellHasFocus){
      final Component component=super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
      final ArtifactType type=(ArtifactType)value;
      setIcon(type.getIcon());
      setText(type.getPresentableName());
      return component;
    }
  }
);
  artifactTypeBox.setSelectedItem(getArtifact().getArtifactType());
  artifactTypeBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final ArtifactType selected=(ArtifactType)artifactTypeBox.getSelectedItem();
      if (!Comparing.equal(selected,getArtifact().getArtifactType())) {
        final CompositePackagingElement<?> element=myEditor.getRootElement();
        final CompositePackagingElement<?> newRootElement=selected.createRootElement(getArtifact().getName());
        myArtifactsStructureContext.getModifiableArtifactModel().getOrCreateModifiableArtifact(myOriginalArtifact).setArtifactType(selected);
        if (!newRootElement.getType().equals(element.getType())) {
          ArtifactUtil.copyChildren(element,newRootElement,myArtifactsStructureContext.getProject());
          myEditor.getLayoutTreeComponent().setRootElement(newRootElement);
        }
      }
    }
  }
);
  final JPanel panel=new JPanel(new FlowLayout());
  panel.add(new JLabel("Type: "));
  panel.add(artifactTypeBox);
  return panel;
}
