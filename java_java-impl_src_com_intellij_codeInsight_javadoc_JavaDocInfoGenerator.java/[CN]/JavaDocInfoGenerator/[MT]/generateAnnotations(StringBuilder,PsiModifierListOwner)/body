{
  final PsiModifierList ownerModifierList=owner.getModifierList();
  if (ownerModifierList == null)   return;
  PsiAnnotation[] annotations=ownerModifierList.getAnnotations();
  final PsiAnnotation[] externalAnnotations=ExternalAnnotationsManager.getInstance(owner.getProject()).findExternalAnnotations(owner);
  if (externalAnnotations != null) {
    annotations=ArrayUtil.mergeArrays(annotations,externalAnnotations,PsiAnnotation.class);
  }
  PsiManager manager=owner.getManager();
  for (  PsiAnnotation annotation : annotations) {
    final PsiJavaCodeReferenceElement nameReferenceElement=annotation.getNameReferenceElement();
    if (nameReferenceElement == null)     continue;
    final PsiElement resolved=nameReferenceElement.resolve();
    if (resolved instanceof PsiClass) {
      final PsiClass annotationType=(PsiClass)resolved;
      if (AnnotationUtil.isAnnotated(annotationType,"java.lang.annotation.Documented",false)) {
        final PsiClassType type=JavaPsiFacade.getInstance(manager.getProject()).getElementFactory().createType(annotationType,PsiSubstitutor.EMPTY);
        buffer.append("@");
        generateType(buffer,type,owner);
        final PsiNameValuePair[] attributes=annotation.getParameterList().getAttributes();
        if (attributes.length > 0) {
          boolean first=true;
          buffer.append("(");
          for (          PsiNameValuePair pair : attributes) {
            if (!first)             buffer.append("&nbsp;");
            first=false;
            final String name=pair.getName();
            if (name != null) {
              buffer.append(name);
              buffer.append(" = ");
            }
            final PsiAnnotationMemberValue value=pair.getValue();
            if (value != null) {
              buffer.append(value.getText());
            }
          }
          buffer.append(")");
        }
        buffer.append("&nbsp;");
      }
    }
  }
}
