{
  int nearLine=isDown ? endLine + 2 : startLine - 1;
  int line=nearLine;
  final PsiFile file=PsiDocumentManager.getInstance(editor.getProject()).getPsiFile(editor.getDocument());
  if (!(file instanceof PsiJavaFile)) {
    return editor.logicalPositionToOffset(new LogicalPosition(nearLine,0));
  }
  while (true) {
    final int offset=editor.logicalPositionToOffset(new LogicalPosition(line,0));
    PsiElement element=firstNonWhiteElement(offset,file,true);
    while (element != null && element != file) {
      if (!element.getTextRange().contains(offset)) {
        if ((element instanceof PsiStatement || element instanceof PsiComment) && element.getParent() instanceof PsiCodeBlock) {
          return offset;
        }
        if (element instanceof PsiJavaToken && ((PsiJavaToken)element).getTokenType() == JavaTokenType.RBRACE && element.getParent() instanceof PsiCodeBlock) {
          return offset;
        }
        if (element instanceof PsiMember) {
          return offset;
        }
      }
      element=element.getParent();
    }
    line+=isDown ? 1 : -1;
    if (line == 0 || line >= editor.getDocument().getLineCount()) {
      return editor.logicalPositionToOffset(new LogicalPosition(nearLine,0));
    }
  }
}
