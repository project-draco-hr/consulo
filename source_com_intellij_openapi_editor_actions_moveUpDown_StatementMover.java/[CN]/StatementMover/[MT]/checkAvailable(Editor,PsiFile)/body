{
  if (!(file instanceof PsiJavaFile))   return false;
  final boolean available=super.checkAvailable(editor,file);
  if (!available)   return false;
  LineRange range=whatToMove;
  range=expandLineRangeToCoverPsiElements(range,editor,file);
  if (range == null)   return false;
  final int startOffset=editor.logicalPositionToOffset(new LogicalPosition(range.startLine,0));
  final int endOffset=editor.logicalPositionToOffset(new LogicalPosition(range.endLine + 1,0));
  final PsiElement[] statements=CodeInsightUtil.findStatementsInRange(file,startOffset,endOffset);
  if (statements == null || statements.length == 0)   return false;
  range.firstElement=statements[0];
  range.lastElement=statements[statements.length - 1];
  if (!checkMovingInsideOutside(file,editor,range,myIsDown)) {
    insertOffset=-1;
    return true;
  }
  calcInsertOffset(editor,file,range);
  return true;
}
