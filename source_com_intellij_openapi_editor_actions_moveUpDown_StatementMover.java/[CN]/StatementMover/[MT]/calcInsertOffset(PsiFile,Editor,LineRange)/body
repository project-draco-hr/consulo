{
  int line=myIsDown ? range.endLine + 2 : range.startLine - 1;
  while (true) {
    final int offset=editor.logicalPositionToOffset(new LogicalPosition(line,0));
    PsiElement element=firstNonWhiteElement(offset,file,true);
    while (element != null && !(element instanceof PsiFile)) {
      if (!element.getTextRange().grown(-1).shiftRight(1).contains(offset)) {
        PsiElement elementToSurround=null;
        boolean found=false;
        if ((element instanceof PsiStatement || element instanceof PsiComment || element instanceof OuterLanguageElement) && statementCanBePlacedAlong(element)) {
          if (!(element.getParent() instanceof PsiCodeBlock)) {
            elementToSurround=element;
          }
          found=true;
        }
 else         if (element instanceof PsiJavaToken && ((PsiJavaToken)element).getTokenType() == JavaTokenType.RBRACE && element.getParent() instanceof PsiCodeBlock) {
          found=true;
        }
 else         if (element instanceof PsiMember) {
          found=true;
        }
        if (found) {
          statementToSurroundWithCodeBlock=elementToSurround;
          whatToMove=range;
          insertOffset=offset;
          return true;
        }
      }
      element=element.getParent();
    }
    line+=myIsDown ? 1 : -1;
    if (line == 0 || line >= editor.getDocument().getLineCount()) {
      return false;
    }
  }
}
