{
  int line=isDown ? range.endLine + 1 : range.startLine - 1;
  int startLine=isDown ? range.endLine : range.startLine - 1;
  while (true) {
    final int offset=editor.logicalPositionToOffset(new LogicalPosition(line,0));
    PsiElement element=firstNonWhiteElement(offset,file,true);
    while (element != null && !(element instanceof PsiFile)) {
      if (!element.getTextRange().grown(-1).shiftRight(1).contains(offset)) {
        PsiElement elementToSurround=null;
        boolean found=false;
        if ((element instanceof PsiStatement || element instanceof PsiComment || element instanceof OuterLanguageElement) && statementCanBePlacedAlong(element)) {
          found=true;
          if (!(element.getParent() instanceof PsiCodeBlock)) {
            elementToSurround=element;
          }
        }
 else         if (element instanceof PsiJavaToken && ((PsiJavaToken)element).getTokenType() == JavaTokenType.RBRACE && element.getParent() instanceof PsiCodeBlock) {
          found=true;
        }
 else         if (element instanceof PsiMember) {
          PsiClass containingClass=((PsiMember)element).getContainingClass();
          if (!(containingClass instanceof PsiAnonymousClass) || PsiTreeUtil.isAncestor(containingClass,range.firstElement,false)) {
            found=true;
          }
        }
        if (found) {
          statementToSurroundWithCodeBlock=elementToSurround;
          toMove=range;
          int endLine=line;
          if (startLine > endLine) {
            int tmp=endLine;
            endLine=startLine;
            startLine=tmp;
          }
          toMove2=isDown ? new LineRange(startLine,endLine) : new LineRange(startLine,endLine + 1);
          return true;
        }
      }
      element=element.getParent();
    }
    line+=isDown ? 1 : -1;
    if (line == 0 || line >= editor.getDocument().getLineCount()) {
      return false;
    }
  }
}
