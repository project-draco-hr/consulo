{
  PsiManager psiManager=myMethodCall.getManager();
  final Project project=psiManager.getProject();
  PsiReferenceExpression ref=myMethodCall.getMethodExpression();
  if (isValidElement(myMethodCall)) {
    return;
  }
  PsiClass parentClass=PsiTreeUtil.getParentOfType(myMethodCall,PsiClass.class);
  PsiElement enclosingContext=PsiTreeUtil.getParentOfType(myMethodCall,new Class[]{PsiMethod.class,PsiField.class,PsiClassInitializer.class});
  if (targetClass == null) {
    return;
  }
  PsiFile targetFile=targetClass.getContainingFile();
  String methodName=ref.getReferenceName();
  try {
    PsiElementFactory factory=psiManager.getElementFactory();
    ExpectedTypeInfo[] expectedTypes=CreateFromUsageUtils.guessExpectedTypes(myMethodCall,true);
    PsiMethod method=factory.createMethod(methodName,PsiType.VOID);
    if (targetClass.equals(parentClass)) {
      method=(PsiMethod)targetClass.addAfter(method,enclosingContext);
    }
 else {
      PsiElement anchor=enclosingContext;
      while (anchor != null && anchor.getParent() != null && !anchor.getParent().equals(targetClass)) {
        anchor=anchor.getParent();
      }
      if (anchor != null && anchor.getParent() == null)       anchor=null;
      if (anchor != null) {
        method=(PsiMethod)targetClass.addAfter(method,anchor);
      }
 else {
        method=(PsiMethod)targetClass.add(method);
      }
    }
    final Editor newEditor=positionCursor(project,targetFile,method);
    TemplateBuilder builder=new TemplateBuilder(method);
    setupVisibility(parentClass,targetClass,method.getModifierList());
    if (shouldCreateStaticMember(myMethodCall.getMethodExpression(),enclosingContext,targetClass) && !targetClass.isInterface()) {
      method.getModifierList().setModifierProperty(PsiModifier.STATIC,true);
    }
    PsiSubstitutor substitutor=getTargetSubstitutor(myMethodCall);
    CreateFromUsageUtils.setupMethodParameters(method,builder,myMethodCall.getArgumentList(),substitutor);
    PsiElement context=PsiTreeUtil.getParentOfType(myMethodCall,new Class[]{PsiClass.class,PsiMethod.class});
    new GuessTypeParameters(factory).setupTypeElement(method.getReturnTypeElement(),expectedTypes,substitutor,builder,context,targetClass);
    if (!targetClass.isInterface()) {
      builder.setEndVariableAfter(method.getBody().getLBrace());
    }
 else {
      method.getBody().delete();
      builder.setEndVariableAfter(method);
    }
    Template template=builder.buildTemplate();
    TextRange range=method.getTextRange();
    newEditor.getDocument().deleteString(range.getStartOffset(),range.getEndOffset());
    final PsiFile file=method.getContainingFile();
    if (!targetClass.isInterface()) {
      startTemplate(newEditor,template,project,new TemplateStateListener(){
        public void templateFinished(        Template template){
          ApplicationManager.getApplication().runWriteAction(new Runnable(){
            public void run(){
              PsiDocumentManager.getInstance(project).commitDocument(newEditor.getDocument());
              PsiElement element=file.findElementAt(newEditor.getCaretModel().getOffset());
              PsiMethod method=PsiTreeUtil.getParentOfType(element,PsiMethod.class);
              if (method != null) {
                PsiClass targetClass=PsiTreeUtil.getParentOfType(method,PsiClass.class);
                try {
                  CreateFromUsageUtils.setupMethodBody(targetClass,method);
                }
 catch (                IncorrectOperationException e) {
                }
                CreateFromUsageUtils.setupEditor(method,newEditor);
              }
            }
          }
);
        }
      }
);
    }
 else {
      startTemplate(newEditor,template,project);
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
