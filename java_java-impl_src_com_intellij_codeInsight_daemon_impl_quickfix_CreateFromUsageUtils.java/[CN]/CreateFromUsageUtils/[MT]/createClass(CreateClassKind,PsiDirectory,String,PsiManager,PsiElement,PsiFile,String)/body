{
  final JavaPsiFacade facade=JavaPsiFacade.getInstance(manager.getProject());
  final PsiElementFactory factory=facade.getElementFactory();
  return ApplicationManager.getApplication().runWriteAction(new Computable<PsiClass>(){
    public PsiClass compute(){
      try {
        PsiClass targetClass;
        if (directory != null) {
          try {
            if (classKind == INTERFACE) {
              targetClass=JavaDirectoryService.getInstance().createInterface(directory,name);
            }
 else             if (classKind == CLASS) {
              targetClass=JavaDirectoryService.getInstance().createClass(directory,name);
            }
 else             if (classKind == ENUM) {
              targetClass=JavaDirectoryService.getInstance().createEnum(directory,name);
            }
 else {
              LOG.error("Unknown kind of a class to create");
              return null;
            }
          }
 catch (          final IncorrectOperationException e) {
            scheduleFileOrPackageCreationFailedMessageBox(e,name,directory,false);
            return null;
          }
          if (!facade.getResolveHelper().isAccessible(targetClass,contextElement,null)) {
            PsiUtil.setModifierProperty(targetClass,PsiKeyword.PUBLIC,true);
          }
        }
 else {
          PsiClass aClass;
          if (classKind == INTERFACE) {
            aClass=factory.createInterface(name);
          }
 else           if (classKind == CLASS) {
            aClass=factory.createClass(name);
          }
 else           if (classKind == ENUM) {
            aClass=factory.createEnum(name);
          }
 else {
            LOG.error("Unknown kind of a class to create");
            return null;
          }
          targetClass=(PsiClass)sourceFile.add(aClass);
        }
        if (superClassName != null) {
          final PsiClass superClass=facade.findClass(superClassName,targetClass.getResolveScope());
          final PsiJavaCodeReferenceElement superClassReference=factory.createReferenceElementByFQClassName(superClassName,targetClass.getResolveScope());
          final PsiReferenceList list=classKind == INTERFACE || superClass == null || !superClass.isInterface() ? targetClass.getExtendsList() : targetClass.getImplementsList();
          list.add(superClassReference);
        }
        if (contextElement instanceof PsiJavaCodeReferenceElement) {
          CreateFromUsageBaseFix.setupGenericParameters(targetClass,(PsiJavaCodeReferenceElement)contextElement);
        }
        return targetClass;
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
        return null;
      }
    }
  }
);
}
