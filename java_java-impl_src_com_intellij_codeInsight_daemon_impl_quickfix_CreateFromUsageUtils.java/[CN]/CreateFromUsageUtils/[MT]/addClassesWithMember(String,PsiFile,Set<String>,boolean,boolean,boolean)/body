{
  final Project project=file.getProject();
  final Module moduleForFile=ModuleUtil.findModuleForPsiElement(file);
  if (moduleForFile == null)   return;
  final GlobalSearchScope searchScope=file.getResolveScope();
  GlobalSearchScope descendantsSearchScope=GlobalSearchScope.moduleWithDependenciesScope(moduleForFile);
  final JavaPsiFacade facade=JavaPsiFacade.getInstance(project);
  final PsiShortNamesCache cache=facade.getShortNamesCache();
  if (handleObjectMethod(possibleClassNames,facade,searchScope,method,memberName,staticAccess,addObjectInheritors)) {
    return;
  }
  final PsiMember[] members=ApplicationManager.getApplication().runReadAction(new Computable<PsiMember[]>(){
    public PsiMember[] compute(){
      return method ? cache.getMethodsByName(memberName,searchScope) : cache.getFieldsByName(memberName,searchScope);
    }
  }
);
  for (int i=0; i < members.length; ++i) {
    final PsiMember member=members[i];
    if (hasCorrectModifiers(member,staticAccess)) {
      final PsiClass containingClass=member.getContainingClass();
      if (containingClass != null) {
        final String qName=getQualifiedName(containingClass);
        if (qName == null)         continue;
        ClassInheritorsSearch.search(containingClass,descendantsSearchScope,true,true,false).forEach(new Processor<PsiClass>(){
          public boolean process(          PsiClass psiClass){
            ContainerUtil.addIfNotNull(getQualifiedName(psiClass),possibleClassNames);
            return true;
          }
        }
);
        possibleClassNames.add(qName);
      }
    }
    members[i]=null;
  }
}
