{
  Arrays.sort(members,new Comparator<PsiMember>(){
    public int compare(    final PsiMember m1,    final PsiMember m2){
      int result=JavaStatisticsManager.createInfo(null,m2).getUseCount() - JavaStatisticsManager.createInfo(null,m1).getUseCount();
      if (result != 0)       return result;
      final PsiClass aClass=m1.getContainingClass();
      final PsiClass bClass=m2.getContainingClass();
      if (aClass == null || bClass == null)       return 0;
      return JavaStatisticsManager.createInfo(null,bClass).getUseCount() - JavaStatisticsManager.createInfo(null,aClass).getUseCount();
    }
  }
);
  List<ExpectedTypeInfo> l=new ArrayList<ExpectedTypeInfo>();
  PsiManager manager=expression.getManager();
  ExpectedTypesProvider provider=ExpectedTypesProvider.getInstance(manager.getProject());
  JavaPsiFacade facade=JavaPsiFacade.getInstance(manager.getProject());
  for (int i=0; i < Math.min(MAX_GUESSED_MEMBERS_COUNT,members.length); i++) {
    ProgressManager.getInstance().checkCanceled();
    PsiMember member=members[i];
    PsiClass aClass=member.getContainingClass();
    if (aClass instanceof PsiAnonymousClass)     continue;
    if (facade.getResolveHelper().isAccessible(aClass,expression,null)) {
      PsiClassType type;
      final PsiElement pparent=expression.getParent().getParent();
      if (pparent instanceof PsiMethodCallExpression && member instanceof PsiMethod) {
        PsiSubstitutor substitutor=ExpectedTypeUtil.inferSubstitutor((PsiMethod)member,(PsiMethodCallExpression)pparent,false);
        if (substitutor == null) {
          type=factory.createType(aClass);
        }
 else {
          type=factory.createType(aClass,substitutor);
        }
      }
 else {
        type=factory.createType(aClass);
      }
      l.add(provider.createInfo(type,ExpectedTypeInfo.TYPE_OR_SUBTYPE,type,TailType.NONE));
    }
  }
  if (!l.isEmpty()) {
    types.add(l.toArray(new ExpectedTypeInfo[l.size()]));
  }
}
