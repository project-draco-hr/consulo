{
  Arrays.sort(members,new Comparator<PsiMember>(){
    @Override public int compare(    final PsiMember m1,    final PsiMember m2){
      ProgressManager.checkCanceled();
      int result=JavaStatisticsManager.createInfo(null,m2).getUseCount() - JavaStatisticsManager.createInfo(null,m1).getUseCount();
      if (CreateFieldFromUsageFix.DEBUG) {
        System.out.println("CreateFromUsageUtils.compare");
        System.out.println("m1 = " + m1);
        System.out.println("m2 = " + m2);
        System.out.println("result = " + result);
      }
      if (result != 0)       return result;
      final PsiClass aClass=m1.getContainingClass();
      final PsiClass bClass=m2.getContainingClass();
      if (aClass == null || bClass == null)       return 0;
      if (CreateFieldFromUsageFix.DEBUG) {
        System.out.println("aClass = " + aClass);
        System.out.println("bClass = " + bClass);
      }
      result=JavaStatisticsManager.createInfo(null,bClass).getUseCount() - JavaStatisticsManager.createInfo(null,aClass).getUseCount();
      if (CreateFieldFromUsageFix.DEBUG) {
        System.out.println("result2 = " + result);
      }
      if (result != 0)       return result;
      WeighingComparable<PsiElement,ProximityLocation> proximity1=PsiProximityComparator.getProximity(m1,expression);
      WeighingComparable<PsiElement,ProximityLocation> proximity2=PsiProximityComparator.getProximity(m2,expression);
      if (proximity1 != null && proximity2 != null) {
        if (CreateFieldFromUsageFix.DEBUG) {
          System.out.println("proximity1 = " + proximity1);
          System.out.println("proximity2 = " + proximity2);
        }
        return proximity2.compareTo(proximity1);
      }
      return 0;
    }
  }
);
  List<ExpectedTypeInfo> l=new ArrayList<ExpectedTypeInfo>();
  PsiManager manager=expression.getManager();
  JavaPsiFacade facade=JavaPsiFacade.getInstance(manager.getProject());
  for (  PsiMember member : members) {
    ProgressManager.checkCanceled();
    PsiClass aClass=member.getContainingClass();
    if (aClass instanceof PsiAnonymousClass || aClass == null)     continue;
    if (CreateFieldFromUsageFix.DEBUG) {
      System.out.println("CreateFromUsageUtils.addMemberInfo");
      System.out.println("member = " + member);
      System.out.println("aClass = " + aClass);
    }
    if (facade.getResolveHelper().isAccessible(member,expression,null)) {
      PsiClassType type;
      final PsiElement pparent=expression.getParent().getParent();
      if (pparent instanceof PsiMethodCallExpression && member instanceof PsiMethod) {
        PsiSubstitutor substitutor=ExpectedTypeUtil.inferSubstitutor((PsiMethod)member,(PsiMethodCallExpression)pparent,false);
        if (substitutor == null) {
          type=factory.createType(aClass);
        }
 else {
          type=factory.createType(aClass,substitutor);
        }
      }
 else {
        type=factory.createType(aClass);
      }
      l.add(ExpectedTypesProvider.createInfo(type,ExpectedTypeInfo.TYPE_OR_SUBTYPE,type,TailType.NONE));
      if (l.size() == MAX_GUESSED_MEMBERS_COUNT)       break;
    }
  }
  if (!l.isEmpty()) {
    types.add(l.toArray(new ExpectedTypeInfo[l.size()]));
  }
}
