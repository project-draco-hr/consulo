{
  PsiCodeBlock body=method.getBody();
  if (body != null) {
    PsiElement l=PsiTreeUtil.skipSiblingsForward(body.getLBrace(),PsiWhiteSpace.class);
    PsiElement r=PsiTreeUtil.skipSiblingsBackward(body.getRBrace(),PsiWhiteSpace.class);
    if (l != null && r != null) {
      int start=l.getTextRange().getStartOffset();
      int end=r.getTextRange().getEndOffset();
      newEditor.getCaretModel().moveToOffset(Math.max(start,end));
      if (end < start) {
        newEditor.getCaretModel().moveToOffset(end + 1);
        CodeStyleManager styleManager=CodeStyleManager.getInstance(method.getProject());
        PsiFile containingFile=method.getContainingFile();
        final String lineIndent=styleManager.getLineIndent(containingFile,Math.min(start,end));
        PsiDocumentManager manager=PsiDocumentManager.getInstance(method.getProject());
        manager.doPostponedOperationsAndUnblockDocument(manager.getDocument(containingFile));
        EditorModificationUtil.insertStringAtCaret(newEditor,lineIndent);
        EditorModificationUtil.insertStringAtCaret(newEditor,"\n",false,false);
      }
 else {
        final PsiGenerationInfo<PsiMethod> info=OverrideImplementUtil.createGenerationInfo(method);
        info.positionCaret(newEditor,true);
      }
      newEditor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
    }
  }
}
