{
  PsiManager psiManager=method.getManager();
  JVMElementFactory factory=JVMElementFactories.getFactory(method.getLanguage(),method.getProject());
  PsiParameterList parameterList=method.getParameterList();
  GlobalSearchScope resolveScope=method.getResolveScope();
  GuessTypeParameters guesser=new GuessTypeParameters(JavaPsiFacade.getElementFactory(method.getProject()));
  final PsiClass containingClass=method.getContainingClass();
  final boolean isInterface=containingClass != null && containingClass.isInterface();
  for (int i=0; i < arguments.size(); i++) {
    Pair<PsiExpression,PsiType> arg=arguments.get(i);
    PsiExpression exp=arg.first;
    PsiType argType=exp == null ? arg.second : exp.getType();
    SuggestedNameInfo suggestedInfo=JavaCodeStyleManager.getInstance(psiManager.getProject()).suggestVariableName(VariableKind.PARAMETER,null,exp,argType);
    @NonNls String[] names=suggestedInfo.names;
    if (names.length == 0) {
      names=new String[]{"p" + i};
    }
    if (argType == null || PsiType.NULL.equals(argType) || argType instanceof PsiLambdaExpressionType || argType instanceof PsiLambdaParameterType || argType instanceof PsiMethodReferenceType) {
      argType=PsiType.getJavaLangObject(psiManager,resolveScope);
    }
 else     if (argType instanceof PsiDisjunctionType) {
      argType=((PsiDisjunctionType)argType).getLeastUpperBound();
    }
 else     if (argType instanceof PsiWildcardType) {
      argType=((PsiWildcardType)argType).isBounded() ? ((PsiWildcardType)argType).getBound() : PsiType.getJavaLangObject(psiManager,resolveScope);
    }
    PsiParameter parameter;
    if (parameterList.getParametersCount() <= i) {
      parameter=factory.createParameter(names[0],argType);
      if (isInterface) {
        PsiUtil.setModifierProperty(parameter,PsiModifier.FINAL,false);
      }
      parameter=(PsiParameter)parameterList.add(parameter);
    }
 else {
      parameter=parameterList.getParameters()[i];
    }
    ExpectedTypeInfo info=ExpectedTypesProvider.createInfo(argType,ExpectedTypeInfo.TYPE_OR_SUPERTYPE,argType,TailType.NONE);
    PsiElement context=PsiTreeUtil.getParentOfType(contextElement,PsiClass.class,PsiMethod.class);
    guesser.setupTypeElement(parameter.getTypeElement(),new ExpectedTypeInfo[]{info},substitutor,builder,context,containingClass);
    Expression expression=new ParameterNameExpression(names);
    builder.replaceElement(parameter.getNameIdentifier(),expression);
  }
}
