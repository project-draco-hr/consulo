{
  setTitle(title);
  myChooser=new ElementsChooser<T>(false){
    @Override protected String getItemText(    @NotNull final T item){
      return ChooseElementsDialog.this.getItemText(item);
    }
  }
;
  myChooser.setColorUnmarkedElements(false);
  List<? extends T> elements=new ArrayList<T>(items);
  if (sort) {
    Collections.sort(elements,new Comparator<T>(){
      @Override public int compare(      final T o1,      final T o2){
        return getItemText(o1).compareToIgnoreCase(getItemText(o2));
      }
    }
);
  }
  setElements(elements,elements.size() > 0 ? elements.subList(0,1) : Collections.<T>emptyList());
  myChooser.getComponent().registerKeyboardAction(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      doOKAction();
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),JComponent.WHEN_FOCUSED);
  new DoubleClickListener(){
    @Override protected boolean onDoubleClick(    MouseEvent e){
      doOKAction();
      return true;
    }
  }
.installOn(myChooser.getComponent());
  init();
}
