{
  final PsiForStatement forStatement=(PsiForStatement)element.getParent();
  final PsiDeclarationStatement initialization=(PsiDeclarationStatement)forStatement.getInitialization();
  if (initialization == null) {
    return;
  }
  final PsiBinaryExpression condition=(PsiBinaryExpression)forStatement.getCondition();
  if (condition == null) {
    return;
  }
  final PsiLocalVariable variable=(PsiLocalVariable)initialization.getDeclaredElements()[0];
  final PsiExpression initializer=variable.getInitializer();
  if (initializer == null) {
    return;
  }
  final PsiExpression lhs=condition.getLOperand();
  final PsiExpression rhs=condition.getROperand();
  if (rhs == null) {
    return;
  }
  final PsiExpressionStatement update=(PsiExpressionStatement)forStatement.getUpdate();
  if (update == null) {
    return;
  }
  final PsiExpression updateExpression=update.getExpression();
  final String variableName=variable.getName();
  final StringBuilder newUpdateText=new StringBuilder();
  if (updateExpression instanceof PsiPrefixExpression) {
    final PsiPrefixExpression prefixExpression=(PsiPrefixExpression)updateExpression;
    final IElementType tokenType=prefixExpression.getOperationTokenType();
    if (JavaTokenType.PLUSPLUS == tokenType) {
      newUpdateText.append("--");
    }
 else     if (JavaTokenType.MINUSMINUS == tokenType) {
      newUpdateText.append("++");
    }
 else {
      return;
    }
    newUpdateText.append(variableName);
  }
 else   if (updateExpression instanceof PsiPostfixExpression) {
    newUpdateText.append(variableName);
    final PsiPostfixExpression postfixExpression=(PsiPostfixExpression)updateExpression;
    final IElementType tokenType=postfixExpression.getOperationTokenType();
    if (JavaTokenType.PLUSPLUS == tokenType) {
      newUpdateText.append("--");
    }
 else     if (JavaTokenType.MINUSMINUS == tokenType) {
      newUpdateText.append("++");
    }
 else {
      return;
    }
  }
 else {
    return;
  }
  final Project project=element.getProject();
  final PsiElementFactory factory=JavaPsiFacade.getElementFactory(project);
  final PsiExpression newUpdate=factory.createExpressionFromText(newUpdateText.toString(),element);
  updateExpression.replace(newUpdate);
  final IElementType sign=condition.getOperationTokenType();
  final String negatedSign=ComparisonUtils.getNegatedComparison(sign);
  final StringBuilder conditionText=new StringBuilder();
  final StringBuilder newInitializerText=new StringBuilder();
  if (VariableAccessUtils.evaluatesToVariable(lhs,variable)) {
    conditionText.append(variableName);
    conditionText.append(negatedSign);
    if (sign == JavaTokenType.GE) {
      conditionText.append(incrementExpression(initializer,true));
    }
 else {
      conditionText.append(initializer.getText());
    }
    if (sign == JavaTokenType.LT) {
      newInitializerText.append(incrementExpression(rhs,false));
    }
 else {
      newInitializerText.append(rhs.getText());
    }
  }
 else   if (VariableAccessUtils.evaluatesToVariable(rhs,variable)) {
    if (sign == JavaTokenType.LE) {
      conditionText.append(incrementExpression(initializer,true));
    }
 else {
      conditionText.append(initializer.getText());
    }
    conditionText.append(negatedSign);
    conditionText.append(variableName);
    if (sign == JavaTokenType.GT) {
      newInitializerText.append(incrementExpression(lhs,false));
    }
 else {
      newInitializerText.append(lhs.getText());
    }
  }
 else {
    return;
  }
  final PsiExpression newInitializer=factory.createExpressionFromText(newInitializerText.toString(),element);
  variable.setInitializer(newInitializer);
  final PsiExpression newCondition=factory.createExpressionFromText(conditionText.toString(),element);
  condition.replace(newCondition);
}
