{
  enableSilentOperation(VcsConfiguration.StandardConfirmation.ADD);
  enableSilentOperation(VcsConfiguration.StandardConfirmation.REMOVE);
  myCnt=0;
  final VcsHistoryProvider provider=SvnVcs.getInstance(myProject).getVcsHistoryProvider();
  final SubTree tree=new SubTree(myWorkingCopyDir);
  checkin();
  for (int i=0; i < 10; i++) {
    editFileInCommand(myProject,tree.myS1File,"1\n2\n3\n4\n" + i);
    checkin();
  }
  renameFileInCommand(myProject,tree.myS1File,"renamed.txt");
  VcsDirtyScopeManager.getInstance(myProject).markEverythingDirty();
  ChangeListManager.getInstance(myProject).ensureUpToDate(false);
  final Semaphore semaphore=new Semaphore();
  semaphore.down();
  provider.reportAppendableHistory(new FilePathImpl(tree.myS1File),new VcsAppendableHistorySessionPartner(){
    @Override public void reportCreatedEmptySession(    VcsAbstractHistorySession session){
    }
    @Override public void acceptRevision(    VcsFileRevision revision){
      ++myCnt;
    }
    @Override public void reportException(    VcsException exception){
      throw new RuntimeException(exception);
    }
    @Override public void finished(){
      semaphore.up();
    }
    @Override public void beforeRefresh(){
    }
    @Override public void forceRefresh(){
    }
  }
);
  semaphore.waitFor(1000);
  Assert.assertEquals(11,myCnt);
}
