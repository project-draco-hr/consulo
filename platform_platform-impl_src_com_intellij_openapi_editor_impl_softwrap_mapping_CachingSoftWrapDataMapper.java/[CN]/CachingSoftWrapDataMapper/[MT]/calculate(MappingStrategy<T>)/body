{
  T eagerMatch=strategy.eagerMatch();
  if (eagerMatch != null) {
    return eagerMatch;
  }
  EditorPosition position=strategy.buildInitialPosition();
  FoldingModelEx foldingModel=myEditor.getFoldingModel();
  boolean foldingState=foldingModel.isFoldingEnabled();
  foldingModel.setFoldingEnabled(true);
  CompositeDataProvider provider;
  try {
    provider=new CompositeDataProvider(new SoftWrapsDataProvider(myStorage),new FoldingDataProvider(myEditor.getFoldingModel().fetchTopLevel()),getTabulationDataProvider(position.visualLine));
  }
  finally {
    foldingModel.setFoldingEnabled(foldingState);
  }
  provider.advance(position.offset);
  while (provider.hasData()) {
    Pair<SoftWrapDataProviderKeys,?> data=provider.getData();
    T result=null;
    int sortingKey=provider.getSortingKey();
    if (position.offset <= sortingKey) {
      result=strategy.advance(position,sortingKey);
      if (result != null) {
        return result;
      }
    }
switch (data.first) {
case SOFT_WRAP:
      result=strategy.processSoftWrap(position,(SoftWrap)data.second);
    break;
case COLLAPSED_FOLDING:
  result=strategy.processFoldRegion(position,(FoldRegion)data.second);
break;
case TABULATION:
result=strategy.processTabulation(position,(TabData)data.second);
break;
}
if (result != null) {
return result;
}
provider.next();
}
return strategy.build(position);
}
