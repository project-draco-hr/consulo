{
  if (DEBUG_SOFT_WRAP_PROCESSING) {
    log(String.format("xxxxxxxxxxxx CachingSoftWrapDataMapper.onRecalculationStart(%s). Current cache size: %d",event,myCache.size()));
  }
  myAffectedByUpdateCacheEntries.clear();
  myNotAffectedByUpdateTailCacheEntries.clear();
  myBeforeChangeState.updateByDocumentOffsets(event.getOldStartOffset(),event.getOldEndOffset(),event.getOldLogicalLinesDiff());
  if (!myBeforeChangeState.cacheShouldBeUpdated) {
    if (DEBUG_SOFT_WRAP_PROCESSING) {
      log(String.format("xxxxxxxxxxxx CachingSoftWrapDataMapper.onRecalculationStart(): performing eager return"));
      dumpCache();
      log("");
    }
    return;
  }
  int startTrailingIndex=myBeforeChangeState.endCacheEntryIndex;
  if (startTrailingIndex >= 0) {
    startTrailingIndex++;
  }
 else {
    startTrailingIndex=-startTrailingIndex - 1;
  }
  if (startTrailingIndex < myCache.size()) {
    List<CacheEntry> entries=myCache.subList(startTrailingIndex,myCache.size());
    myNotAffectedByUpdateTailCacheEntries.addAll(entries);
    entries.clear();
    if (DEBUG_SOFT_WRAP_PROCESSING) {
      log("xxxxxxxxxxxxx CachingSoftWrapDataMapper.onRecalculationStart(). Marked the following " + myNotAffectedByUpdateTailCacheEntries.size() + " entries for update: ");
      for (      CacheEntry cacheEntry : myNotAffectedByUpdateTailCacheEntries) {
        log("\t" + cacheEntry);
      }
    }
  }
  int startAffectedIndex=myBeforeChangeState.startCacheEntryIndex;
  if (startAffectedIndex < 0) {
    startAffectedIndex=-startAffectedIndex - 1;
  }
  if (startAffectedIndex < myCache.size()) {
    List<CacheEntry> entries=myCache.subList(startAffectedIndex,myCache.size());
    myAffectedByUpdateCacheEntries.addAll(entries);
    entries.clear();
    if (DEBUG_SOFT_WRAP_PROCESSING) {
      log("xxxxxxxxxxxxxx   Removed all affected cache entries starting from index " + startAffectedIndex + ". Remaining: "+ myAffectedByUpdateCacheEntries.size()+ " entries affected by the change: "+ myAffectedByUpdateCacheEntries);
      for (      CacheEntry cacheEntry : myCache) {
        log("\t" + cacheEntry);
      }
    }
  }
}
