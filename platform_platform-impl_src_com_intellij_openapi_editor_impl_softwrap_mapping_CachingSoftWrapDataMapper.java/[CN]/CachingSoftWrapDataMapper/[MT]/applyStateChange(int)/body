{
  if (myNotAffectedByUpdateTailCacheEntries.isEmpty()) {
    return;
  }
  int visualLinesDiff=myAfterChangeState.visualLines - myBeforeChangeState.visualLines;
  int logicalLinesDiff=myAfterChangeState.logicalLines - myBeforeChangeState.logicalLines;
  int softWrappedLinesDiff=myAfterChangeState.softWrapLines - myBeforeChangeState.softWrapLines;
  int foldedLinesDiff=myAfterChangeState.foldedLines - myBeforeChangeState.foldedLines;
  if (DEBUG_SOFT_WRAP_PROCESSING) {
    log(String.format("Modifying trailing cache entries:" + "%n\tvisual lines: before=%d, current=%d, diff=%d" + "%n\tlogical lines: before=%d, current=%d, diff=%d"+ "%n\tsoft wrap lines: before=%d, current=%d, diff=%d"+ "%n\tfold lines: before=%d, current=%d, diff=%d"+ "%n\toffsets: diff=%d",myBeforeChangeState.visualLines,myAfterChangeState.visualLines,visualLinesDiff,myBeforeChangeState.logicalLines,myAfterChangeState.logicalLines,logicalLinesDiff,myBeforeChangeState.softWrapLines,myAfterChangeState.softWrapLines,softWrappedLinesDiff,myBeforeChangeState.foldedLines,myAfterChangeState.foldedLines,foldedLinesDiff,offsetsDiff));
  }
  for (int i=0; i < myNotAffectedByUpdateTailCacheEntries.size(); i++) {
    CacheEntry cacheEntry=myNotAffectedByUpdateTailCacheEntries.get(i);
    cacheEntry.visualLine+=visualLinesDiff;
    cacheEntry.startLogicalLine+=logicalLinesDiff;
    cacheEntry.endLogicalLine+=logicalLinesDiff;
    cacheEntry.advance(offsetsDiff);
    cacheEntry.startSoftWrapLinesBefore+=softWrappedLinesDiff;
    cacheEntry.endSoftWrapLinesBefore+=softWrappedLinesDiff;
    cacheEntry.startFoldedLines+=foldedLinesDiff;
    cacheEntry.endFoldedLines+=foldedLinesDiff;
  }
}
