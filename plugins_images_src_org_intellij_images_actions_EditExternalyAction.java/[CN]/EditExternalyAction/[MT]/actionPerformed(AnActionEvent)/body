{
  Project project=e.getData(DataKeys.PROJECT);
  VirtualFile[] files=e.getData(DataKeys.VIRTUAL_FILE_ARRAY);
  Options options=OptionsManager.getInstance().getOptions();
  String executablePath=options.getExternalEditorOptions().getExecutablePath();
  if (StringUtil.isEmpty(executablePath)) {
    Messages.showErrorDialog(project,ImagesBundle.message("error.empty.external.editor.path"),ImagesBundle.message("error.title.empty.external.editor.path"));
    OptionsConfigurabe.show(project);
  }
 else {
    if (files != null) {
      Map<String,String> env=EnvironmentUtil.getEnviromentProperties();
      Set<String> varNames=env.keySet();
      for (      String varName : varNames) {
        if (SystemInfo.isWindows) {
          executablePath=StringUtil.replace(executablePath,"%" + varName + "%",env.get(varName),true);
        }
 else {
          executablePath=StringUtil.replace(executablePath,"${" + varName + "}",env.get(varName),false);
        }
      }
      executablePath=FileUtil.toSystemDependentName(executablePath);
      File executable=new File(executablePath);
      StringBuffer commandLine=new StringBuffer(executable.exists() ? executable.getAbsolutePath() : executablePath);
      ImageFileTypeManager typeManager=ImageFileTypeManager.getInstance();
      for (      VirtualFile file : files) {
        if (file.isInLocalFileSystem() && typeManager.isImage(file)) {
          commandLine.append(" \"");
          commandLine.append(VfsUtil.virtualToIoFile(file).getAbsolutePath());
          commandLine.append('\"');
        }
      }
      try {
        File executableFile=new File(executablePath);
        Runtime.getRuntime().exec(commandLine.toString(),null,executableFile.getParentFile());
      }
 catch (      IOException ex) {
        Messages.showErrorDialog(project,ex.getLocalizedMessage(),ImagesBundle.message("error.title.launching.external.editor"));
        OptionsConfigurabe.show(project);
      }
    }
  }
}
