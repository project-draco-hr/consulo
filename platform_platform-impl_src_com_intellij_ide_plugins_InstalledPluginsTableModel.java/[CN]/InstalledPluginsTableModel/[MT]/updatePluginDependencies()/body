{
  myDependentToRequiredListMap.clear();
  final int rowCount=getRowCount();
  for (int i=0; i < rowCount; i++) {
    final IdeaPluginDescriptor descriptor=getObjectAt(i);
    final PluginId pluginId=descriptor.getPluginId();
    myDependentToRequiredListMap.remove(pluginId);
    if (descriptor instanceof IdeaPluginDescriptorImpl && ((IdeaPluginDescriptorImpl)descriptor).isDeleted())     continue;
    final Boolean enabled=myEnabled.get(pluginId);
    if (enabled == null || enabled.booleanValue()) {
      PluginManager.checkDependants(descriptor,new Function<PluginId,IdeaPluginDescriptor>(){
        @Nullable public IdeaPluginDescriptor fun(        final PluginId pluginId){
          return PluginManager.getPlugin(pluginId);
        }
      }
,new Condition<PluginId>(){
        public boolean value(        final PluginId dependantPluginId){
          final Boolean enabled=myEnabled.get(dependantPluginId);
          if (enabled == null || !enabled.booleanValue()) {
            Set<PluginId> required=myDependentToRequiredListMap.get(pluginId);
            if (required == null) {
              required=new HashSet<PluginId>();
              myDependentToRequiredListMap.put(pluginId,required);
            }
            required.add(dependantPluginId);
          }
          return true;
        }
      }
);
      if (enabled == null && !myDependentToRequiredListMap.containsKey(pluginId) && !PluginManager.isIncompatible(descriptor)) {
        myEnabled.put(pluginId,true);
      }
    }
  }
}
