{
  final DefaultTableCellRenderer cellRenderer=(DefaultTableCellRenderer)super.getRenderer(ideaPluginDescriptor);
  if (cellRenderer != null && ideaPluginDescriptor != null) {
    final IdeaPluginDescriptorImpl descriptor=(IdeaPluginDescriptorImpl)ideaPluginDescriptor;
    if (descriptor.isDeleted()) {
      cellRenderer.setIcon(IconLoader.getIcon("/actions/clean.png"));
    }
 else     if (hasNewerVersion(ideaPluginDescriptor.getPluginId())) {
      cellRenderer.setIcon(IconLoader.getIcon("/nodes/pluginobsolete.png"));
    }
 else {
      cellRenderer.setIcon(IconLoader.getIcon("/nodes/plugin.png"));
    }
    final PluginId pluginId=ideaPluginDescriptor.getPluginId();
    final Set<PluginId> required=myDependentToRequiredListMap.get(pluginId);
    if (required != null && required.size() > 0) {
      cellRenderer.setForeground(Color.RED);
      final StringBuilder s=new StringBuilder("Required plugin").append(required.size() == 1 ? " \"" : "s \"");
      s.append(StringUtil.join(required,new Function<PluginId,String>(){
        @Override public String fun(        final PluginId id){
          final IdeaPluginDescriptor plugin=PluginManager.getPlugin(id);
          return plugin == null ? id.getIdString() : plugin.getName();
        }
      }
,","));
      s.append(required.size() == 1 ? "\" is not enabled!" : "\" are not enabled!");
      cellRenderer.setToolTipText(s.toString());
    }
    if (PluginManager.isIncompatible(ideaPluginDescriptor)) {
      cellRenderer.setToolTipText(IdeBundle.message("plugin.manager.incompatible.tooltip.warning",ApplicationNamesInfo.getInstance().getFullProductName()));
      cellRenderer.setForeground(Color.red);
    }
  }
  return cellRenderer;
}
