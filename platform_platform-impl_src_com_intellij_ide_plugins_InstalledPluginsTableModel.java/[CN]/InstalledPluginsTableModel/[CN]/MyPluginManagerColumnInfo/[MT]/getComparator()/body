{
  final Comparator<IdeaPluginDescriptor> comparator=super.getColumnComparator();
  return new Comparator<IdeaPluginDescriptor>(){
    @Override public int compare(    IdeaPluginDescriptor o1,    IdeaPluginDescriptor o2){
      if (isSortByStatus()) {
        final boolean hasNewerVersion1=hasNewerVersion(o1.getPluginId());
        final boolean hasNewerVersion2=hasNewerVersion(o2.getPluginId());
        if (hasNewerVersion1) {
          if (hasNewerVersion2)           return comparator.compare(o1,o2);
          return -1;
        }
        if (hasNewerVersion2)         return 1;
        final boolean wasUpdated1=wasUpdated(o1.getPluginId());
        final boolean wasUpdated2=wasUpdated(o2.getPluginId());
        if (wasUpdated1) {
          if (wasUpdated2)           return comparator.compare(o1,o2);
          return -1;
        }
        if (wasUpdated2)         return 1;
        if (o1 instanceof PluginNode) {
          if (o2 instanceof PluginNode)           return comparator.compare(o1,o2);
          return -1;
        }
        if (o2 instanceof PluginNode)         return 1;
        final boolean deleted1=o1 instanceof IdeaPluginDescriptorImpl && ((IdeaPluginDescriptorImpl)o1).isDeleted();
        final boolean deleted2=o2 instanceof IdeaPluginDescriptorImpl && ((IdeaPluginDescriptorImpl)o2).isDeleted();
        if (deleted1) {
          if (deleted2)           return comparator.compare(o1,o2);
          return -1;
        }
        if (deleted2)         return 1;
      }
      return comparator.compare(o1,o2);
    }
  }
;
}
