{
  if (!(editor.getDocument() instanceof DocumentEx)) {
    myOriginalHandler.execute(editor,dataContext);
    return;
  }
  final DocumentEx doc=(DocumentEx)editor.getDocument();
  final Project project=PlatformDataKeys.PROJECT.getData(DataManager.getInstance().getDataContext(editor.getContentComponent()));
  if (project == null) {
    return;
  }
  LogicalPosition caretPosition=editor.getCaretModel().getLogicalPosition();
  final PsiDocumentManager docManager=PsiDocumentManager.getInstance(project);
  PsiFile psiFile=docManager.getPsiFile(doc);
  if (psiFile == null) {
    myOriginalHandler.execute(editor,dataContext);
    return;
  }
  int startLine=caretPosition.line;
  int endLine=startLine + 1;
  if (editor.getSelectionModel().hasSelection()) {
    startLine=doc.getLineNumber(editor.getSelectionModel().getSelectionStart());
    endLine=doc.getLineNumber(editor.getSelectionModel().getSelectionEnd());
    if (doc.getLineStartOffset(endLine) == editor.getSelectionModel().getSelectionEnd())     endLine--;
  }
  final int startReformatOffset=CharArrayUtil.shiftBackward(doc.getCharsSequence(),doc.getLineEndOffset(startLine)," \t");
  CodeEditUtil.setNodeReformatStrategy(new NotNullFunction<ASTNode,Boolean>(){
    @NotNull @Override public Boolean fun(    ASTNode node){
      return node.getTextRange().getStartOffset() >= startReformatOffset;
    }
  }
);
  try {
    doJob(editor,doc,project,docManager,psiFile,startLine,endLine);
  }
  finally {
    CodeEditUtil.setNodeReformatStrategy(null);
  }
}
