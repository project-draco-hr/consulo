{
  if (props == null) {
    props=FileTemplateManager.getInstance().getDefaultProperties();
  }
  FileTemplateManager.getInstance().addRecentName(template.getName());
  if (fileName != null) {
    props.setProperty(NAME_ATTR,fileName);
  }
  String[] dummyRefs=calculateAttributes(template.getText(),props,true);
  for (  String dummyRef : dummyRefs) {
    props.setProperty(dummyRef,"");
  }
  String mergedText;
  try {
    if (template.isJavaClassTemplate()) {
      String packageName=props.getProperty(PACKAGE_ATTR);
      if (packageName == null || packageName.length() == 0) {
        props=new Properties(props);
        props.setProperty(PACKAGE_ATTR,PACKAGE_ATTR);
      }
    }
    mergedText=template.getText(props);
  }
 catch (  Exception e) {
    throw e;
  }
  final String templateText=StringUtil.convertLineSeparators(mergedText);
  final Exception[] commandException=new Exception[1];
  final PsiElement[] result=new PsiElement[1];
  CommandProcessor.getInstance().executeCommand(project,new Runnable(){
    public void run(){
      final Runnable run=new Runnable(){
        public void run(){
          try {
            FileType fileType=FileTypeManagerEx.getInstanceEx().getFileTypeByExtension(template.getExtension());
            if (fileType.equals(StdFileTypes.JAVA)) {
              String extension=template.getExtension();
              result[0]=createClassOrInterface(project,directory,templateText,template.isAdjust(),extension);
            }
 else {
              result[0]=createPsiFile(project,directory,templateText,fileName,template.getExtension());
            }
          }
 catch (          Exception ex) {
            commandException[0]=ex;
          }
        }
      }
;
      ApplicationManager.getApplication().runWriteAction(run);
    }
  }
,template.isJavaClassTemplate() ? IdeBundle.message("command.create.class.from.template") : IdeBundle.message("command.create.file.from.template"),null);
  if (commandException[0] != null) {
    throw commandException[0];
  }
  return result[0];
}
