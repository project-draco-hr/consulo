{
  PsiModifierList list=method.getModifierList();
  final PsiAnnotation overrideAnnotation=list.findAnnotation("java.lang.Override");
  if (overrideAnnotation == null) {
    return null;
  }
  try {
    MethodSignatureBackedByPsiMethod superMethod=SuperMethodsSearch.search(method,null,true,false).findFirst();
    if (superMethod != null && method.getContainingClass().isInterface() && "clone".equals(superMethod.getName())) {
      final PsiClass containingClass=superMethod.getMethod().getContainingClass();
      if (containingClass != null && CommonClassNames.JAVA_LANG_OBJECT.equals(containingClass.getQualifiedName())) {
        superMethod=null;
      }
    }
    if (superMethod == null) {
      String description=JavaErrorMessages.message("method.does.not.override.super");
      HighlightInfo highlightInfo=HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(overrideAnnotation).descriptionAndTooltip(description).create();
      PullAsAbstractUpFix.registerQuickFix(highlightInfo,method);
      return highlightInfo;
    }
    LanguageLevel languageLevel=PsiUtil.getLanguageLevel(method);
    PsiClass superClass=superMethod.getMethod().getContainingClass();
    if (languageLevel.equals(LanguageLevel.JDK_1_5) && superClass != null && superClass.isInterface()) {
      String description=JavaErrorMessages.message("override.not.allowed.in.interfaces");
      HighlightInfo info=HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(overrideAnnotation).descriptionAndTooltip(description).create();
      QuickFixAction.registerQuickFixAction(info,new IncreaseLanguageLevelFix(LanguageLevel.JDK_1_6));
      return info;
    }
    return null;
  }
 catch (  IndexNotReadyException e) {
    return null;
  }
}
