{
  PsiType type=typeElement.getType();
  if (type instanceof PsiWildcardType) {
    if (typeElement.getParent() instanceof PsiReferenceParameterList) {
      PsiElement parent=typeElement.getParent().getParent();
      LOG.assertTrue(parent instanceof PsiJavaCodeReferenceElement,parent);
      PsiElement refParent=parent.getParent();
      if (refParent instanceof PsiAnonymousClass)       refParent=refParent.getParent();
      if (refParent instanceof PsiNewExpression) {
        PsiNewExpression newExpression=(PsiNewExpression)refParent;
        if (!(newExpression.getType() instanceof PsiArrayType)) {
          String description=JavaErrorMessages.message("wildcard.type.cannot.be.instantiated",JavaHighlightUtil.formatType(type));
          return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(typeElement).descriptionAndTooltip(description).create();
        }
      }
 else       if (refParent instanceof PsiReferenceList) {
        PsiElement refPParent=refParent.getParent();
        if (!(refPParent instanceof PsiTypeParameter) || refParent != ((PsiTypeParameter)refPParent).getExtendsList()) {
          String description=JavaErrorMessages.message("generics.wildcard.not.expected");
          return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(typeElement).descriptionAndTooltip(description).create();
        }
      }
    }
 else {
      String description=JavaErrorMessages.message("generics.wildcards.may.be.used.only.as.reference.parameters");
      return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(typeElement).descriptionAndTooltip(description).create();
    }
  }
  return null;
}
