{
  if (TypeConversionUtil.isAssignable(castType,operandType,false))   return false;
  castType=castType.getDeepComponentType();
  if (castType instanceof PsiClassType) {
    final PsiClassType castClassType=(PsiClassType)castType;
    operandType=operandType.getDeepComponentType();
    if (!(operandType instanceof PsiClassType))     return false;
    final PsiClassType operandClassType=(PsiClassType)operandType;
    final PsiClassType.ClassResolveResult castResult=castClassType.resolveGenerics();
    final PsiClassType.ClassResolveResult operandResult=operandClassType.resolveGenerics();
    final PsiClass operandClass=operandResult.getElement();
    final PsiClass castClass=castResult.getElement();
    if (operandClass == null || castClass == null)     return false;
    if (castClass instanceof PsiTypeParameter)     return true;
    if (castClassType.hasNonTrivialParameters()) {
      if (operandClassType.isRaw())       return true;
      if (castClass.isInheritor(operandClass,true)) {
        PsiSubstitutor castSubstitutor=castResult.getSubstitutor();
        PsiElementFactory factory=JavaPsiFacade.getInstance(castClass.getProject()).getElementFactory();
        for (        PsiTypeParameter typeParameter : PsiUtil.typeParametersIterable(castClass)) {
          PsiSubstitutor modifiedSubstitutor=castSubstitutor.put(typeParameter,null);
          PsiClassType otherType=factory.createType(castClass,modifiedSubstitutor);
          if (TypeConversionUtil.isAssignable(operandType,otherType,false))           return true;
        }
        for (        PsiTypeParameter typeParameter : PsiUtil.typeParametersIterable(operandClass)) {
          final PsiType operand=operandResult.getSubstitutor().substitute(typeParameter);
          if (operand instanceof PsiCapturedWildcardType)           return true;
        }
        return false;
      }
      return true;
    }
  }
  return false;
}
