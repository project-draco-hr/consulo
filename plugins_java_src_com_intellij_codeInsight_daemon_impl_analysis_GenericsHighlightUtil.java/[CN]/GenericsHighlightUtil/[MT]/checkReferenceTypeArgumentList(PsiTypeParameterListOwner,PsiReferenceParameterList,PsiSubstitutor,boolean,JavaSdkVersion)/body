{
  PsiDiamondType.DiamondInferenceResult inferenceResult=null;
  PsiTypeElement[] referenceElements=null;
  if (referenceParameterList != null) {
    referenceElements=referenceParameterList.getTypeParameterElements();
    if (referenceElements.length == 1 && referenceElements[0].getType() instanceof PsiDiamondType) {
      if (!typeParameterListOwner.hasTypeParameters()) {
        final String description=JavaErrorMessages.message("generics.diamond.not.applicable");
        return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(referenceElements[0]).descriptionAndTooltip(description).create();
      }
      inferenceResult=((PsiDiamondType)referenceElements[0].getType()).resolveInferredTypes();
      final String errorMessage=inferenceResult.getErrorMessage();
      if (errorMessage != null) {
        final PsiType expectedType=detectExpectedType(referenceParameterList);
        if (!(inferenceResult.failedToInfer() && expectedType instanceof PsiClassType && ((PsiClassType)expectedType).isRaw())) {
          return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(referenceElements[0]).descriptionAndTooltip(errorMessage).create();
        }
      }
    }
  }
  final PsiTypeParameter[] typeParameters=typeParameterListOwner.getTypeParameters();
  final int targetParametersNum=typeParameters.length;
  final int refParametersNum=referenceParameterList == null ? 0 : referenceParameterList.getTypeArguments().length;
  if (targetParametersNum != refParametersNum && refParametersNum != 0) {
    final String description;
    if (targetParametersNum == 0) {
      if (PsiTreeUtil.getParentOfType(referenceParameterList,PsiCall.class) != null && typeParameterListOwner instanceof PsiMethod && javaSdkVersion.isAtLeast(JavaSdkVersion.JDK_1_7)) {
        description=null;
      }
 else {
        description=JavaErrorMessages.message("generics.type.or.method.does.not.have.type.parameters",typeParameterListOwnerCategoryDescription(typeParameterListOwner),typeParameterListOwnerDescription(typeParameterListOwner));
      }
    }
 else {
      description=JavaErrorMessages.message("generics.wrong.number.of.type.arguments",refParametersNum,targetParametersNum);
    }
    if (description != null) {
      final HighlightInfo highlightInfo=HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(referenceParameterList).descriptionAndTooltip(description).create();
      if (registerIntentions) {
        PsiElement grandParent=referenceParameterList.getParent().getParent();
        if (grandParent instanceof PsiTypeElement) {
          PsiElement variable=grandParent.getParent();
          if (variable instanceof PsiVariable) {
            if (targetParametersNum == 0) {
              QuickFixAction.registerQuickFixAction(highlightInfo,QUICK_FIX_FACTORY.createRemoveTypeArgumentsFix(variable));
            }
            if (typeParameterListOwner instanceof PsiClass) {
              QuickFixAction.registerQuickFixAction(highlightInfo,QUICK_FIX_FACTORY.createChangeClassSignatureFromUsageFix((PsiClass)typeParameterListOwner,referenceParameterList));
            }
            registerVariableParameterizedTypeFixes(highlightInfo,(PsiVariable)variable,referenceParameterList,javaSdkVersion);
          }
        }
      }
      return highlightInfo;
    }
  }
  if (targetParametersNum > 0 && refParametersNum != 0) {
    if (inferenceResult != null) {
      final PsiType[] types=inferenceResult.getTypes();
      for (int i=0; i < typeParameters.length; i++) {
        final PsiType type=types[i];
        final HighlightInfo highlightInfo=checkTypeParameterWithinItsBound(typeParameters[i],substitutor,type,referenceElements[0],referenceParameterList);
        if (highlightInfo != null)         return highlightInfo;
      }
    }
 else {
      for (int i=0; i < typeParameters.length; i++) {
        final PsiTypeElement typeElement=referenceElements[i];
        final HighlightInfo highlightInfo=checkTypeParameterWithinItsBound(typeParameters[i],substitutor,typeElement.getType(),typeElement,referenceParameterList);
        if (highlightInfo != null)         return highlightInfo;
      }
    }
  }
  return null;
}
