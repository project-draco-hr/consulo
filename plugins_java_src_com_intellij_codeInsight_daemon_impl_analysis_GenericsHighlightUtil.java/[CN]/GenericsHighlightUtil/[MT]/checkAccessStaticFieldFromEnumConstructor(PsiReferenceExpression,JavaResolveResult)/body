{
  final PsiElement resolved=result.getElement();
  if (!(resolved instanceof PsiField))   return null;
  if (!((PsiModifierListOwner)resolved).hasModifierProperty(PsiModifier.STATIC))   return null;
  if (expr.getParent() instanceof PsiSwitchLabelStatement)   return null;
  final PsiMember constructorOrInitializer=PsiUtil.findEnclosingConstructorOrInitializer(expr);
  if (constructorOrInitializer == null)   return null;
  if (constructorOrInitializer.hasModifierProperty(PsiModifier.STATIC))   return null;
  final PsiClass aClass=constructorOrInitializer.getContainingClass();
  if (aClass == null || !(aClass.isEnum() || aClass instanceof PsiEnumConstantInitializer))   return null;
  final PsiField field=(PsiField)resolved;
  if (aClass instanceof PsiEnumConstantInitializer) {
    if (field.getContainingClass() != aClass.getSuperClass())     return null;
  }
 else   if (field.getContainingClass() != aClass)   return null;
  if (!JavaVersionService.getInstance().isAtLeast(field,JavaSdkVersion.JDK_1_6)) {
    final PsiType type=field.getType();
    if (type instanceof PsiClassType && ((PsiClassType)type).resolve() == aClass)     return null;
  }
  if (PsiUtil.isCompileTimeConstant(field))   return null;
  String description=JavaErrorMessages.message("illegal.to.access.static.member.from.enum.constructor.or.instance.initializer",HighlightMessageUtil.getSymbolName(resolved,result.getSubstitutor()));
  return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(expr).descriptionAndTooltip(description).create();
}
