{
  final PsiMethod checkMethod=signatureToCheck.getMethod();
  if (superMethod.equals(checkMethod))   return null;
  PsiClass checkContainingClass=checkMethod.getContainingClass();
  LOG.assertTrue(checkContainingClass != null);
  PsiClass superContainingClass=superMethod.getContainingClass();
  boolean checkEqualsSuper=checkContainingClass.equals(superContainingClass);
  if (checkMethod.isConstructor()) {
    if (!superMethod.isConstructor() || !checkEqualsSuper)     return null;
  }
 else   if (superMethod.isConstructor())   return null;
  final boolean atLeast17=JavaVersionService.getInstance().isAtLeast(aClass,JavaSdkVersion.JDK_1_7);
  if (checkMethod.hasModifierProperty(PsiModifier.STATIC) && !checkEqualsSuper && !atLeast17) {
    return null;
  }
  final PsiType retErasure1=TypeConversionUtil.erasure(checkMethod.getReturnType());
  final PsiType retErasure2=TypeConversionUtil.erasure(superMethod.getReturnType());
  boolean differentReturnTypeErasure=!Comparing.equal(retErasure1,retErasure2);
  if (checkEqualsSuper && atLeast17) {
    if (retErasure1 != null && retErasure2 != null) {
      differentReturnTypeErasure=!TypeConversionUtil.isAssignable(retErasure1,retErasure2);
    }
 else {
      differentReturnTypeErasure=!(retErasure1 == null && retErasure2 == null);
    }
  }
  if (differentReturnTypeErasure && !TypeConversionUtil.isVoidType(retErasure1) && !TypeConversionUtil.isVoidType(retErasure2)&& !(checkEqualsSuper && Arrays.equals(superSignature.getParameterTypes(),signatureToCheck.getParameterTypes()))&& !atLeast17) {
    int idx=0;
    final PsiType[] parameterTypes=signatureToCheck.getParameterTypes();
    boolean erasure=parameterTypes.length > 0;
    for (    PsiType type : superSignature.getParameterTypes()) {
      erasure&=Comparing.equal(type,TypeConversionUtil.erasure(parameterTypes[idx]));
      idx++;
    }
    if (!erasure)     return null;
  }
  if (!checkEqualsSuper && MethodSignatureUtil.isSubsignature(superSignature,signatureToCheck)) {
    return null;
  }
  if (superContainingClass != null && !superContainingClass.isInterface() && checkContainingClass.isInterface() && !aClass.equals(superContainingClass))   return null;
  if (aClass.equals(checkContainingClass)) {
    boolean sameClass=aClass.equals(superContainingClass);
    return getSameErasureMessage(sameClass,checkMethod,superMethod,HighlightNamesUtil.getMethodDeclarationTextRange(checkMethod));
  }
 else {
    return getSameErasureMessage(false,checkMethod,superMethod,HighlightNamesUtil.getClassDeclarationTextRange(aClass));
  }
}
