{
  final Pair<PsiTypeParameter,PsiType> inferredTypeArgument=GenericsUtil.findTypeParameterWithBoundError(genericMethod.getTypeParameters(),substitutor,call,false);
  if (inferredTypeArgument != null) {
    final PsiType extendsType=inferredTypeArgument.second;
    final PsiTypeParameter typeParameter=inferredTypeArgument.first;
    PsiClass boundClass=extendsType instanceof PsiClassType ? ((PsiClassType)extendsType).resolve() : null;
    @NonNls String messageKey=boundClass == null || typeParameter.isInterface() == boundClass.isInterface() ? "generics.inferred.type.for.type.parameter.is.not.within.its.bound.extend" : "generics.inferred.type.for.type.parameter.is.not.within.its.bound.implement";
    String description=JavaErrorMessages.message(messageKey,HighlightUtil.formatClass(typeParameter),JavaHighlightUtil.formatType(extendsType),JavaHighlightUtil.formatType(substitutor.substitute(typeParameter)));
    return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(call).descriptionAndTooltip(description).create();
  }
  return null;
}
