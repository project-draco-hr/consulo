{
  final PsiElement resolved=ref.resolve();
  if (resolved instanceof PsiTypeParameter) {
    String description=JavaErrorMessages.message("generics.cannot.instanceof.type.parameters");
    return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(ref).descriptionAndTooltip(description).create();
  }
  if (resolved instanceof PsiClass) {
    final PsiClass containingClass=((PsiClass)resolved).getContainingClass();
    if (containingClass != null && ref.getQualifier() == null && containingClass.getTypeParameters().length > 0 && !((PsiClass)resolved).hasModifierProperty(PsiModifier.STATIC) && ((PsiClass)resolved).getTypeParameters().length == 0) {
      String description=JavaErrorMessages.message("illegal.generic.type.for.instanceof");
      return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(typeElement).descriptionAndTooltip(description).create();
    }
  }
  final PsiType[] parameters=ref.getTypeParameters();
  for (  PsiType parameterType : parameters) {
    if (parameterType != null && !(parameterType instanceof PsiWildcardType && ((PsiWildcardType)parameterType).getBound() == null)) {
      String description=JavaErrorMessages.message("illegal.generic.type.for.instanceof");
      return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(typeElement).descriptionAndTooltip(description).create();
    }
  }
  return null;
}
