{
  if (refParamList.getTypeArguments().length == 0)   return null;
  JavaResolveResult resolveResult=null;
  PsiElement parent=refParamList.getParent();
  PsiElement qualifier=null;
  if (parent instanceof PsiJavaCodeReferenceElement) {
    resolveResult=((PsiJavaCodeReferenceElement)parent).advancedResolve(false);
    qualifier=((PsiJavaCodeReferenceElement)parent).getQualifier();
  }
 else   if (parent instanceof PsiCallExpression) {
    resolveResult=((PsiCallExpression)parent).resolveMethodGenerics();
    if (parent instanceof PsiMethodCallExpression) {
      final PsiReferenceExpression methodExpression=((PsiMethodCallExpression)parent).getMethodExpression();
      qualifier=methodExpression.getQualifier();
    }
  }
  if (resolveResult != null) {
    PsiElement element=resolveResult.getElement();
    if (!(element instanceof PsiTypeParameterListOwner))     return null;
    if (((PsiModifierListOwner)element).hasModifierProperty(PsiModifier.STATIC))     return null;
    if (qualifier instanceof PsiJavaCodeReferenceElement && ((PsiJavaCodeReferenceElement)qualifier).resolve() instanceof PsiTypeParameter)     return null;
    PsiClass containingClass=((PsiMember)element).getContainingClass();
    if (containingClass != null && PsiUtil.isRawSubstitutor(containingClass,resolveResult.getSubstitutor())) {
      if ((parent instanceof PsiCallExpression || parent instanceof PsiMethodReferenceExpression) && PsiUtil.isLanguageLevel7OrHigher(parent)) {
        return null;
      }
      if (element instanceof PsiMethod) {
        if (((PsiMethod)element).findSuperMethods().length > 0)         return null;
        if (qualifier instanceof PsiReferenceExpression) {
          final PsiType type=((PsiReferenceExpression)qualifier).getType();
          final boolean isJavac7=JavaVersionService.getInstance().isAtLeast(containingClass,JavaSdkVersion.JDK_1_7);
          if (type instanceof PsiClassType && isJavac7 && ((PsiClassType)type).isRaw())           return null;
          final PsiClass typeParameter=PsiUtil.resolveClassInType(type);
          if (typeParameter instanceof PsiTypeParameter) {
            if (isJavac7)             return null;
            for (            PsiClassType classType : typeParameter.getExtendsListTypes()) {
              final PsiClass resolve=classType.resolve();
              if (resolve != null) {
                final PsiMethod[] superMethods=resolve.findMethodsBySignature((PsiMethod)element,true);
                for (                PsiMethod superMethod : superMethods) {
                  if (!PsiUtil.isRawSubstitutor(superMethod,resolveResult.getSubstitutor())) {
                    return null;
                  }
                }
              }
            }
          }
        }
      }
      final String message=element instanceof PsiClass ? JavaErrorMessages.message("generics.type.arguments.on.raw.type") : JavaErrorMessages.message("generics.type.arguments.on.raw.method");
      return HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(refParamList).descriptionAndTooltip(message).create();
    }
  }
  return null;
}
