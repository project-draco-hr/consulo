{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  @NonNls final String methodName=methodExpression.getReferenceName();
  if (!"assertEquals".equals(methodName)) {
    return;
  }
  final PsiExpressionList argumentList=expression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  final PsiType type1;
  final PsiType type2;
  if (arguments.length == 2) {
    final PsiExpression argument0=arguments[0];
    type1=argument0.getType();
    final PsiExpression argument1=arguments[1];
    type2=argument1.getType();
  }
 else   if (arguments.length == 3) {
    final PsiExpression argument0=arguments[1];
    type1=argument0.getType();
    final PsiExpression argument1=arguments[2];
    type2=argument1.getType();
  }
 else {
    return;
  }
  if (!(type1 instanceof PsiArrayType) || !(type2 instanceof PsiArrayType)) {
    return;
  }
  final PsiMethod method=expression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiClass containingClass=method.getContainingClass();
  if (!InheritanceUtil.isInheritor(containingClass,"junit.framework.Assert") && !InheritanceUtil.isInheritor(containingClass,"org.junit.Assert") && !InheritanceUtil.isInheritor(containingClass,"org.testng.AssertJUnit")) {
    return;
  }
  registerMethodCallError(expression);
}
