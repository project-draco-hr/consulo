{
  final boolean showIcons=UISettings.getInstance().SHOW_ICONS_IN_MENUS;
  Keymap originalKeymap=myKeymap != null ? myKeymap.getParent() : null;
  Icon icon=null;
  String text;
  boolean bound=false;
  Shortcut[] shortcuts=null;
  if (value instanceof DefaultMutableTreeNode) {
    Object userObject=((DefaultMutableTreeNode)value).getUserObject();
    boolean changed;
    if (userObject instanceof Group) {
      Group group=(Group)userObject;
      text=group.getName();
      changed=originalKeymap != null && isGroupChanged(group,originalKeymap,myKeymap);
      icon=expanded ? group.getOpenIcon() : group.getIcon();
      if (icon == null) {
        icon=expanded ? OPEN_ICON : CLOSE_ICON;
      }
    }
 else     if (userObject instanceof String) {
      String actionId=(String)userObject;
      bound=myShowBoundActions && ((KeymapImpl)myKeymap).isActionBound(actionId);
      AnAction action=ActionManager.getInstance().getActionOrStub(actionId);
      if (action != null) {
        text=action.getTemplatePresentation().getText();
        if (text == null || text.length() == 0) {
          text=actionId;
        }
        Icon actionIcon=action.getTemplatePresentation().getIcon();
        if (actionIcon != null) {
          icon=actionIcon;
        }
        shortcuts=myKeymap.getShortcuts(actionId);
      }
 else {
        text=actionId;
      }
      changed=originalKeymap != null && isActionChanged(actionId,originalKeymap,myKeymap);
    }
 else     if (userObject instanceof QuickList) {
      QuickList list=(QuickList)userObject;
      icon=QUICK_LIST_ICON;
      text=list.getDisplayName();
      shortcuts=myKeymap.getShortcuts(list.getActionId());
      changed=originalKeymap != null && isActionChanged(list.getActionId(),originalKeymap,myKeymap);
    }
 else     if (userObject instanceof Separator) {
      changed=false;
      text="-------------";
    }
 else {
      throw new IllegalArgumentException("unknown userObject: " + userObject);
    }
    if (showIcons) {
      setIcon(ActionsTree.getEvenIcon(icon));
    }
    Color foreground;
    if (selected && hasFocus) {
      foreground=UIUtil.getTreeSelectionForeground();
    }
 else {
      if (changed) {
        foreground=Color.BLUE;
      }
 else {
        foreground=UIUtil.getTreeForeground();
      }
      if (bound) {
        foreground=Color.MAGENTA;
      }
    }
    SearchUtil.appendFragments(myFilter,text,Font.PLAIN,foreground,selected ? UIUtil.getTreeSelectionBackground() : UIUtil.getTreeTextBackground(),this);
    if (shortcuts != null && shortcuts.length > 0) {
      final TreePath currentPath=tree.getPathForRow(row);
      if (currentPath != null) {
        int textWidth=0;
        final FontMetrics metrics=getFontMetrics(getFont());
        for (        Shortcut shortcut : shortcuts) {
          textWidth+=metrics.stringWidth(KeymapUtil.getShortcutText(shortcut));
        }
        textWidth+=metrics.stringWidth(" ") * shortcuts.length * 2;
        final int rowX=getRowX(tree,currentPath.getPathCount() - 1);
        final int treeWidth=tree.getVisibleRect().width;
        appendAlign(treeWidth - rowX - textWidth- 5);
        for (        Shortcut shortcut : shortcuts) {
          append(KeymapUtil.getShortcutText(shortcut),new SimpleTextAttributes(SimpleTextAttributes.STYLE_SEARCH_MATCH,Color.blue,Color.red));
          append("  ",SimpleTextAttributes.GRAYED_ATTRIBUTES);
        }
      }
    }
  }
}
