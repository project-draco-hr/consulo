{
  myProject=project;
  myConfigurables=configurables;
  myRootPanel=rootPanel;
  myProperties=PropertiesComponent.getInstance(project);
  myFilter=new Filter();
  myContext=new OptionsEditorContext(myFilter);
  mySearch=new MySearchField(){
    @Override protected void onTextKeyEvent(    final KeyEvent e){
      myTree.processTextEvent(e);
    }
  }
;
  mySearch.getTextEditor().addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    MouseEvent e){
      boolean hasText=mySearch.getText().length() > 0;
      if (!myContext.isHoldingFilter() && hasText) {
        myFilter.reenable();
      }
      if (!isSearchFieldFocused() && hasText) {
        mySearch.selectText();
      }
    }
  }
);
  myTree=new OptionsTree(myProject,configurables,getContext()){
    @Override protected void onTreeKeyEvent(    final KeyEvent e){
      myFilterDocumentWasChanged=false;
      try {
        mySearch.keyEventToTextField(e);
      }
  finally {
        if (myFilterDocumentWasChanged && !isFilterFieldVisible()) {
          setFilterFieldVisible(true,false,false);
        }
      }
    }
  }
;
  getContext().addColleague(myTree);
  Disposer.register(this,myTree);
  mySearch.addDocumentListener(new DocumentAdapter(){
    @Override protected void textChanged(    DocumentEvent e){
      myFilter.update(e.getType(),true,false);
    }
  }
);
  myLeftSide=new JPanel(new BorderLayout()){
    @Override public Dimension getMinimumSize(){
      Dimension dimension=super.getMinimumSize();
      dimension.width=Math.max(myTree.getMinimumSize().width,mySearchWrapper.getPreferredSize().width);
      return dimension;
    }
  }
;
  myLeftSide.add(mySearchWrapper,BorderLayout.NORTH);
  myLeftSide.add(myTree,BorderLayout.CENTER);
  myLoadingDecorator=new LoadingDecorator(myOwnDetails.getComponent(),this,150);
  myContentWrapper.mySplitter.setProportion(readProportion(0.2f,DETAILS_SPLITTER_PROPORTION));
  MyColleague colleague=new MyColleague();
  getContext().addColleague(colleague);
  mySpotlightUpdate=new MergingUpdateQueue("OptionsSpotlight",200,false,rootPanel,this,rootPanel);
  if (preselectedConfigurable != null) {
    myTree.select(preselectedConfigurable);
  }
 else {
    myTree.selectFirst();
  }
  Toolkit.getDefaultToolkit().addAWTEventListener(this,AWTEvent.MOUSE_EVENT_MASK | AWTEvent.KEY_EVENT_MASK | AWTEvent.MOUSE_MOTION_EVENT_MASK);
  ActionManager.getInstance().addAnActionListener(new AnActionListener(){
    @Override public void beforeActionPerformed(    AnAction action,    DataContext dataContext,    AnActionEvent event){
    }
    @Override public void afterActionPerformed(    AnAction action,    DataContext dataContext,    AnActionEvent event){
      queueModificationCheck();
    }
    @Override public void beforeEditorTyping(    char c,    DataContext dataContext){
    }
  }
,this);
  myModificationChecker=new MergingUpdateQueue("OptionsModificationChecker",1000,false,rootPanel,this,rootPanel);
  IdeGlassPaneUtil.installPainter(myOwnDetails.getContentGutter(),mySpotlightPainter,this);
  setFilterFieldVisible(true,false,false);
  new UiNotifyConnector.Once(myRootPanel,new Activatable(){
    @Override public void showNotify(){
      myWindow=SwingUtilities.getWindowAncestor(rootPanel);
    }
    @Override public void hideNotify(){
    }
  }
);
}
