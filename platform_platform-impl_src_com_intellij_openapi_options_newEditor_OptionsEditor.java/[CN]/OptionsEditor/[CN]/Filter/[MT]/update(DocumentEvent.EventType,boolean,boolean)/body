{
  if (!myUpdateEnabled)   return new ActionCallback.Rejected();
  final String text=mySearch.getText();
  if (getFilterText().length() == 0) {
    myContext.setHoldingFilter(false);
    myFiltered=null;
  }
 else {
    myContext.setHoldingFilter(true);
    myHits=myIndex.getConfigurables(myConfigurables,type,myFiltered,text,myProject);
    myFiltered=myHits.getAll();
  }
  if (myFiltered != null && myFiltered.isEmpty()) {
    mySearch.getTextEditor().setBackground(LightColors.RED);
  }
 else {
    mySearch.getTextEditor().setBackground(UIUtil.getTextFieldBackground());
  }
  final Configurable current=getContext().getCurrentConfigurable();
  boolean shouldMoveSelection=true;
  if (myHits != null && (myHits.getNameFullHits().contains(current) || myHits.getContentHits().contains(current))) {
    shouldMoveSelection=false;
  }
  if (shouldMoveSelection && type != DocumentEvent.EventType.INSERT && (myFiltered == null || myFiltered.contains(current))) {
    shouldMoveSelection=false;
  }
  Configurable toSelect=adjustSelection ? current : null;
  if (shouldMoveSelection && myHits != null) {
    if (!myHits.getNameHits().isEmpty()) {
      toSelect=suggestToSelect(myHits.getNameHits(),myHits.getNameFullHits());
    }
 else     if (!myHits.getContentHits().isEmpty()) {
      toSelect=suggestToSelect(myHits.getContentHits(),null);
    }
  }
  updateSpotlight(false);
  if ((myFiltered == null || !myFiltered.isEmpty()) && toSelect == null && myLastSelected != null) {
    toSelect=myLastSelected;
    myLastSelected=null;
  }
  if (toSelect == null && current != null) {
    myLastSelected=current;
  }
  final ActionCallback callback=fireUpdate(adjustSelection ? myTree.findNodeFor(toSelect) : null,adjustSelection,now);
  myFilterDocumentWasChanged=true;
  return callback;
}
