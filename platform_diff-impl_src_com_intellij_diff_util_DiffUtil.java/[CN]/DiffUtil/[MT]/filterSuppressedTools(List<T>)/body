{
  if (tools.size() < 2)   return tools;
  final List<Class<? extends DiffTool>> suppressedTools=new ArrayList<Class<? extends DiffTool>>();
  for (  T tool : tools) {
    try {
      if (tool instanceof SuppressiveDiffTool)       suppressedTools.addAll(((SuppressiveDiffTool)tool).getSuppressedTools());
    }
 catch (    Throwable e) {
      LOG.error(e);
    }
  }
  if (suppressedTools.isEmpty())   return tools;
  List<T> filteredTools=ContainerUtil.filter(tools,new Condition<T>(){
    @Override public boolean value(    T tool){
      return !suppressedTools.contains(tool.getClass());
    }
  }
);
  return filteredTools.isEmpty() ? tools : filteredTools;
}
