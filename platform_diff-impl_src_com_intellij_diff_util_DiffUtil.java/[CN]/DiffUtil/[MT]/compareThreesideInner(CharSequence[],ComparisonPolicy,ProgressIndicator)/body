{
  if (chunks[0] == null && chunks[1] == null && chunks[2] == null)   return null;
  if (comparisonPolicy == ComparisonPolicy.IGNORE_WHITESPACES) {
    if (isChunksEquals(chunks[0],chunks[1],comparisonPolicy) && isChunksEquals(chunks[0],chunks[2],comparisonPolicy)) {
      return Collections.emptyList();
    }
  }
  if (chunks[0] == null && chunks[1] == null || chunks[0] == null && chunks[2] == null || chunks[1] == null && chunks[2] == null) {
    return null;
  }
  if (chunks[0] != null && chunks[1] != null && chunks[2] != null) {
    return ByWord.compare(chunks[0],chunks[1],chunks[2],comparisonPolicy,indicator);
  }
  final ThreeSide side1=chunks[0] != null ? ThreeSide.LEFT : ThreeSide.BASE;
  final ThreeSide side2=chunks[2] != null ? ThreeSide.RIGHT : ThreeSide.BASE;
  CharSequence chunk1=side1.select(chunks);
  CharSequence chunk2=side2.select(chunks);
  List<DiffFragment> wordConflicts=ByWord.compare(chunk1,chunk2,comparisonPolicy,indicator);
  return ContainerUtil.map(wordConflicts,new Function<DiffFragment,MergeWordFragment>(){
    @Override public MergeWordFragment fun(    DiffFragment fragment){
      return new MyWordFragment(side1,side2,fragment);
    }
  }
);
}
