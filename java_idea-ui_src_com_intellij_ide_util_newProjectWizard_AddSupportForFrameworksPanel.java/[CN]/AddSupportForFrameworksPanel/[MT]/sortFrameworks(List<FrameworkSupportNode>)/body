{
  DFSTBuilder<FrameworkSupportProvider> builder=new DFSTBuilder<FrameworkSupportProvider>(GraphGenerator.create(CachingSemiGraph.create(new ProvidersGraph(myProviders))));
  if (!builder.isAcyclic()) {
    Pair<FrameworkSupportProvider,FrameworkSupportProvider> pair=builder.getCircularDependency();
    LOG.error("Circular dependency between providers '" + pair.getFirst().getId() + "' and '"+ pair.getSecond().getId()+ "' was found.");
  }
  final Comparator<FrameworkSupportProvider> comparator=builder.comparator();
  Collections.sort(nodes,new Comparator<FrameworkSupportNode>(){
    public int compare(    final FrameworkSupportNode o1,    final FrameworkSupportNode o2){
      return comparator.compare(o1.getProvider(),o2.getProvider());
    }
  }
);
}
