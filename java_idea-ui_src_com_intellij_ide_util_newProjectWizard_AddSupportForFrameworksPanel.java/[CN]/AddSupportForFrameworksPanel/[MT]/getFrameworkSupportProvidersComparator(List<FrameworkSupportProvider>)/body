{
  DFSTBuilder<FrameworkSupportProvider> builder=new DFSTBuilder<FrameworkSupportProvider>(GraphGenerator.create(CachingSemiGraph.create(new ProvidersGraph(providers))));
  if (!builder.isAcyclic()) {
    Pair<FrameworkSupportProvider,FrameworkSupportProvider> pair=builder.getCircularDependency();
    LOG.error("Circular dependency between providers '" + pair.getFirst().getId() + "' and '"+ pair.getSecond().getId()+ "' was found.");
  }
  return builder.comparator();
}
