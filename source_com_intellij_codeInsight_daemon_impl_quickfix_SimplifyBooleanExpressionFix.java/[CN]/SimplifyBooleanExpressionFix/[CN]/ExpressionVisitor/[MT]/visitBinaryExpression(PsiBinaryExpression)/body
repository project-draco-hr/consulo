{
  final PsiExpression lOperand=expression.getLOperand();
  final PsiExpression rOperand=expression.getROperand();
  final PsiJavaToken operationSign=expression.getOperationSign();
  final IElementType tokenType=operationSign.getTokenType();
  final Boolean lConstBoolean=getConstBoolean(lOperand);
  final Boolean rConstBoolean=getConstBoolean(rOperand);
  if (lConstBoolean != null) {
    if (JavaTokenType.ANDAND == tokenType || JavaTokenType.AND == tokenType) {
      resultExpression=lConstBoolean.booleanValue() ? rOperand : falseExpression;
    }
 else     if (JavaTokenType.OROR == tokenType || JavaTokenType.OR == tokenType) {
      resultExpression=lConstBoolean.booleanValue() ? trueExpression : rOperand;
    }
 else     if (JavaTokenType.EQEQ == tokenType) {
      simplifyEquation(lConstBoolean,rOperand);
    }
 else     if (JavaTokenType.NE == tokenType) {
      resultExpression=createNegatedExpression(rOperand);
      visitPrefixExpression((PsiPrefixExpression)resultExpression);
      simplifyEquation(lConstBoolean,resultExpression);
    }
  }
 else   if (rConstBoolean != null) {
    if (JavaTokenType.ANDAND == tokenType || JavaTokenType.AND == tokenType) {
      resultExpression=rConstBoolean.booleanValue() ? lOperand : falseExpression;
    }
 else     if (JavaTokenType.OROR == tokenType || JavaTokenType.OR == tokenType) {
      resultExpression=rConstBoolean.booleanValue() ? trueExpression : lOperand;
    }
 else     if (JavaTokenType.EQEQ == tokenType) {
      simplifyEquation(rConstBoolean,lOperand);
    }
 else     if (JavaTokenType.NE == tokenType) {
      simplifyEquation(rConstBoolean,createNegatedExpression(lOperand));
    }
  }
}
