{
  PsiSubstitutor result=getSuperMethodSignatureSubstitutorImpl(methodSignature,superMethodSignature);
  if (result == null)   return null;
  PsiTypeParameter[] methodTypeParameters=methodSignature.getTypeParameters();
  PsiTypeParameter[] superTypeParameters=superMethodSignature.getTypeParameters();
  PsiSubstitutor methodSubstitutor=methodSignature.getSubstitutor();
  for (int i=0; i < methodTypeParameters.length; i++) {
    PsiTypeParameter methodTypeParameter=methodTypeParameters[i];
    PsiTypeParameter superTypeParameter=superTypeParameters[i];
    final Set<PsiType> methodSupers=new HashSet<PsiType>();
    for (    PsiClassType methodSuper : methodTypeParameter.getSuperTypes()) {
      methodSupers.add(methodSubstitutor.substitute(methodSuper));
    }
    final Set<PsiType> superSupers=new HashSet<PsiType>();
    for (    PsiClassType superSuper : superTypeParameter.getSuperTypes()) {
      superSupers.add(methodSubstitutor.substitute(PsiUtil.captureToplevelWildcards(result.substitute(superSuper),methodTypeParameter)));
    }
    if (!methodSupers.equals(superSupers))     return null;
  }
  return result;
}
