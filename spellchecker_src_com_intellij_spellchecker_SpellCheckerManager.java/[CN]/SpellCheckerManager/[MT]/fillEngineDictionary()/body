{
  spellChecker.reset();
  final StateLoader stateLoader=new StateLoader(project);
  stateLoader.load(new Consumer<String>(){
    public void consume(    String s){
    }
  }
);
  final List<Loader> loaders=new ArrayList<Loader>();
  for (  BundledDictionaryProvider provider : Extensions.getExtensions(BundledDictionaryProvider.EP_NAME)) {
    for (    String dictionary : provider.getBundledDictionaries()) {
      if (this.settings == null || !this.settings.getBundledDisabledDictionariesPaths().contains(dictionary)) {
        final Class<? extends BundledDictionaryProvider> loaderClass=provider.getClass();
        final InputStream stream=loaderClass.getResourceAsStream(dictionary);
        if (stream != null) {
          loaders.add(new StreamLoader(stream,dictionary));
        }
 else {
          LOG.warn("Couldn't load dictionary '" + dictionary + "' with loader '"+ loaderClass+ "'");
        }
      }
    }
  }
  if (this.settings != null && this.settings.getDictionaryFoldersPaths() != null) {
    final Set<String> disabledDictionaries=settings.getDisabledDictionariesPaths();
    for (    String folder : this.settings.getDictionaryFoldersPaths()) {
      SPFileUtil.processFilesRecursively(folder,new Consumer<String>(){
        public void consume(        final String s){
          if (!disabledDictionaries.contains(s)) {
            loaders.add(new FileLoader(s,s));
          }
        }
      }
);
    }
  }
  loaders.add(stateLoader);
  for (  Loader loader : loaders) {
    spellChecker.loadDictionary(loader);
  }
  userDictionary=stateLoader.getDictionary();
}
