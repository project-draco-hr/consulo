{
  final Set<File> files=new LinkedHashSet<File>();
  for (  JpsModule module : chunk.getModules()) {
    JpsJavaDependenciesEnumerator enumerator=JpsJavaExtensionService.dependencies(module).includedIn(kind).recursively();
    if (exportedOnly) {
      enumerator=enumerator.exportedOnly();
    }
    if (classpathPart == ClasspathPart.BEFORE_JDK) {
      enumerator=enumerator.satisfying(new BeforeSdkItemFilter(module));
    }
 else     if (classpathPart == ClasspathPart.AFTER_JDK) {
      enumerator=enumerator.satisfying(Conditions.not(new BeforeSdkItemFilter(module))).withoutSdk();
    }
    JpsJavaDependenciesRootsEnumerator rootsEnumerator=enumerator.classes();
    if (excludeMainModuleOutput) {
      rootsEnumerator=rootsEnumerator.withoutSelfModuleOutput();
    }
    files.addAll(rootsEnumerator.getRoots());
  }
  if (classpathPart == ClasspathPart.BEFORE_JDK) {
    for (    JpsModule module : chunk.getModules()) {
      JpsSdk<JpsDummyElement> sdk=module.getSdk(JpsJavaSdkType.INSTANCE);
      if (sdk != null) {
        files.addAll(sdk.getParent().getFiles(JpsOrderRootType.COMPILED));
      }
    }
  }
  return files;
}
