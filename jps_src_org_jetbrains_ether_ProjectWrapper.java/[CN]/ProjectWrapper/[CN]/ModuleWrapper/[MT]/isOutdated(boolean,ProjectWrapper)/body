{
  if (history == null)   return true;
  final ModuleWrapper past=history.getModule(myName);
  final boolean isNewModule=past == null;
  final boolean outputChanged=!isNewModule && !safeEquals(past.getOutputPath(),getOutputPath());
  final boolean testOutputChanged=!isNewModule && tests && !safeEquals(past.getTestOutputPath(),getTestOutputPath());
  final boolean sourceChanged=!isNewModule && !past.getSourceFiles().equals(getSourceFiles());
  final boolean testSourceChanged=!isNewModule && tests && !past.getTestSourceFiles().equals(getTestSourceFiles());
  final boolean sourceOutdated=mySource.isOutdated();
  final boolean testSourceOutdated=tests && myTest.isOutdated();
  final boolean unsafeDependencyChange=!isNewModule && (new Object(){
    public boolean run(    final List<ClasspathItemWrapper> today,    final List<ClasspathItemWrapper> yesterday){
      final Iterator<ClasspathItemWrapper> t=today.iterator();
      final Iterator<ClasspathItemWrapper> y=yesterday.iterator();
      while (true) {
        if (!y.hasNext())         return false;
        if (!t.hasNext())         return true;
        if (!safeEquals(t.next(),y.next()))         return true;
      }
    }
  }
.run(dependsOn(),past.dependsOn()));
  return sourceOutdated || testSourceOutdated || sourceChanged|| testSourceChanged|| outputChanged|| testOutputChanged|| unsafeDependencyChange|| isNewModule;
}
