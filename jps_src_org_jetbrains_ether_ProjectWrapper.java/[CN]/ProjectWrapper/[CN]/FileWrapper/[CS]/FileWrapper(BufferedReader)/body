{
  myName=StringCache.get(RW.readString(r));
  myModificationTime=RW.readLong(r);
  final Set<ClassRepr> classes=(Set<ClassRepr>)RW.readMany(r,ClassRepr.reader,new HashSet<ClassRepr>());
  final Set<Pair<ClassRepr,Set<StringCache.S>>> classesWithSubclasses=new HashSet<Pair<ClassRepr,Set<StringCache.S>>>();
  for (  ClassRepr c : classes) {
    final Set<StringCache.S> subClasses=(Set<StringCache.S>)RW.readMany(r,StringCache.reader,new HashSet<StringCache.S>());
    classesWithSubclasses.add(new Pair<ClassRepr,Set<StringCache.S>>(c,subClasses));
  }
  final UsageRepr.Cluster usages=new UsageRepr.Cluster(r);
  final Set<UsageRepr.Usage> annotationUsages=(Set<UsageRepr.Usage>)RW.readMany(r,UsageRepr.reader,new HashSet<UsageRepr.Usage>());
  final Set<StringCache.S> formClasses=(Set<StringCache.S>)RW.readMany(r,StringCache.S.reader,new HashSet<StringCache.S>());
  backendCallback.associate(classesWithSubclasses,new Pair<UsageRepr.Cluster,Set<UsageRepr.Usage>>(usages,annotationUsages),myName.value);
  for (  StringCache.S classFileName : formClasses) {
    backendCallback.associateForm(myName,classFileName);
  }
}
