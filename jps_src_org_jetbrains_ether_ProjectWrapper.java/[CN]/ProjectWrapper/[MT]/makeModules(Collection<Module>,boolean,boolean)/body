{
  final Set<Module> modules=new HashSet<Module>();
  final Set<Module> visited=new HashSet<Module>();
  final Map<Module,Set<Module>> reversedDependencies=new HashMap<Module,Set<Module>>();
  for (  Module m : myProject.getModules().values()) {
    for (    Module.ModuleDependency mdep : m.getDependencies()) {
      final ClasspathItem cpi=mdep.getItem();
      if (cpi instanceof Module) {
        Set<Module> sm=reversedDependencies.get(cpi);
        if (sm == null) {
          sm=new HashSet<Module>();
          reversedDependencies.put((Module)cpi,sm);
        }
        sm.add(m);
      }
    }
  }
  new Object(){
    public void run(    final Collection<Module> initial,    final boolean force){
      if (initial == null)       return;
      for (      Module module : initial) {
        if (visited.contains(module))         continue;
        visited.add(module);
        if (force || getModule(module.getName()).isOutdated(tests,myHistory)) {
          modules.add(module);
          run(reversedDependencies.get(module),true);
        }
 else {
          run(reversedDependencies.get(module),false);
        }
      }
    }
  }
.run(initial,force);
  if (modules.size() == 0 && !force) {
    System.out.println("All requested modules are up-to-date.");
    return;
  }
  myProject.makeSelected(modules,tests);
  rescan();
}
