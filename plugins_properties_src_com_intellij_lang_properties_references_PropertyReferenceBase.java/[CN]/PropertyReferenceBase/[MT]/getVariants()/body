{
  final Set<Object> variants=new THashSet<Object>(new TObjectHashingStrategy<Object>(){
    public int computeHashCode(    final Object object){
      if (object instanceof IProperty) {
        final String key=((IProperty)object).getKey();
        return key == null ? 0 : key.hashCode();
      }
 else {
        return 0;
      }
    }
    public boolean equals(    final Object o1,    final Object o2){
      return o1 instanceof IProperty && o2 instanceof IProperty && Comparing.equal(((IProperty)o1).getKey(),((IProperty)o2).getKey(),true);
    }
  }
);
  List<PropertiesFile> propertiesFileList=getPropertiesFiles();
  if (propertiesFileList == null) {
    PropertiesReferenceManager.getInstance(myElement.getProject()).processAllPropertiesFiles(new PropertiesFileProcessor(){
      @Override public boolean process(      String baseName,      PropertiesFile propertiesFile){
        addVariantsFromFile(propertiesFile,variants);
        return true;
      }
    }
);
  }
 else {
    for (    PropertiesFile propFile : propertiesFileList) {
      addVariantsFromFile(propFile,variants);
    }
  }
  return ContainerUtil.map2Array(variants,new Function<Object,Object>(){
    @Override public Object fun(    Object o){
      if (o instanceof String)       return o;
      IProperty property=(IProperty)o;
      return LookupElementBuilder.create(property.getKey()).setIcon(property.getIcon(0));
    }
  }
);
}
