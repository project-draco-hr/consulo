{
  final Set<Object> variants=new THashSet<Object>(new TObjectHashingStrategy<Object>(){
    public int computeHashCode(    final Object object){
      if (object instanceof IProperty) {
        final String key=((IProperty)object).getKey();
        return key == null ? 0 : key.hashCode();
      }
 else {
        return 0;
      }
    }
    public boolean equals(    final Object o1,    final Object o2){
      return o1 instanceof IProperty && o2 instanceof IProperty && Comparing.equal(((IProperty)o1).getKey(),((IProperty)o2).getKey(),true);
    }
  }
);
  List<PropertiesFile> propertiesFileList=getPropertiesFiles();
  if (propertiesFileList == null) {
    final PsiManager psiManager=myElement.getManager();
    final ProjectFileIndex fileIndex=ProjectRootManager.getInstance(psiManager.getProject()).getFileIndex();
    PropertiesFilesManager.getInstance(myElement.getProject()).processAllPropertiesFiles(new Processor<VirtualFile>(){
      public boolean process(      VirtualFile file){
        if (!file.isValid())         return true;
        if (!fileIndex.isInContent(file))         return true;
        PsiFile psiFile=psiManager.findFile(file);
        if (!(psiFile instanceof PropertiesFile))         return true;
        PropertiesFile propertiesFile=(PropertiesFile)psiFile;
        addVariantsFromFile(propertiesFile,variants);
        return true;
      }
    }
);
  }
 else {
    for (    PropertiesFile propFile : propertiesFileList) {
      addVariantsFromFile(propFile,variants);
    }
  }
  return ArrayUtil.toObjectArray(variants);
}
