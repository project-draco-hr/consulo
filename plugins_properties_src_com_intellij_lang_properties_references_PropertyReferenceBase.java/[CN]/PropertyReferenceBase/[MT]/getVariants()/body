{
  final Set<Object> variants=new THashSet<Object>(new TObjectHashingStrategy<Object>(){
    public int computeHashCode(    final Object object){
      if (object instanceof IProperty) {
        final String key=((IProperty)object).getKey();
        return key == null ? 0 : key.hashCode();
      }
 else {
        return 0;
      }
    }
    public boolean equals(    final Object o1,    final Object o2){
      return o1 instanceof IProperty && o2 instanceof IProperty && Comparing.equal(((IProperty)o1).getKey(),((IProperty)o2).getKey(),true);
    }
  }
);
  List<PropertiesFile> propertiesFileList=getPropertiesFiles();
  if (propertiesFileList == null) {
    PropertiesReferenceManager.getInstance(myElement.getProject()).processAllPropertiesFiles(new PropertiesFileProcessor(){
      @Override public boolean process(      String baseName,      PropertiesFile propertiesFile){
        addVariantsFromFile(propertiesFile,variants);
        return true;
      }
    }
);
  }
 else {
    for (    PropertiesFile propFile : propertiesFileList) {
      addVariantsFromFile(propFile,variants);
    }
  }
  return ContainerUtil.mapNotNull(variants,new NullableFunction<Object,LookupElement>(){
    @Override public LookupElement fun(    Object o){
      if (o instanceof String)       return LookupElementBuilder.create((String)o).setIcon(PlatformIcons.PROPERTY_ICON);
      IProperty property=(IProperty)o;
      String key=property.getKey();
      if (key == null)       return null;
      return LookupElementBuilder.create(property,key).setRenderer(LOOKUP_ELEMENT_RENDERER);
    }
  }
).toArray();
}
