{
  Set<Object> variants=new THashSet<Object>(new TObjectHashingStrategy<Object>(){
    public int computeHashCode(    final Object object){
      if (object instanceof Property) {
        final String key=((Property)object).getKey();
        return key == null ? 0 : key.hashCode();
      }
 else {
        return 0;
      }
    }
    public boolean equals(    final Object o1,    final Object o2){
      return o1 instanceof Property && o2 instanceof Property && Comparing.equal(((Property)o1).getKey(),((Property)o2).getKey(),true);
    }
  }
);
  List<PropertiesFile> propertiesFileList=getPropertiesFiles();
  if (propertiesFileList == null) {
    PsiManager psiManager=myElement.getManager();
    ProjectFileIndex fileIndex=ProjectRootManager.getInstance(psiManager.getProject()).getFileIndex();
    for (    VirtualFile file : PropertiesFilesManager.getInstance().getAllPropertiesFiles()) {
      if (!file.isValid())       continue;
      if (!fileIndex.isInContent(file))       continue;
      PsiFile psiFile=psiManager.findFile(file);
      if (!(psiFile instanceof PropertiesFile))       continue;
      PropertiesFile propertiesFile=(PropertiesFile)psiFile;
      addVariantsFromFile(propertiesFile,variants);
    }
  }
 else {
    for (    PropertiesFile propFile : propertiesFileList) {
      addVariantsFromFile(propFile,variants);
    }
  }
  return ArrayUtil.toObjectArray(variants);
}
