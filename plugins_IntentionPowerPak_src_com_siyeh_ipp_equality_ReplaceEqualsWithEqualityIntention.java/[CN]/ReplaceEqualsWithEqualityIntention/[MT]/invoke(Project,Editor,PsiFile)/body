{
  if (ReadonlyStatusHandler.getInstance(project).ensureFilesWritable(new VirtualFile[]{file.getVirtualFile()}).hasReadonlyFiles())   return;
  final PsiMethodCallExpression call=(PsiMethodCallExpression)findMatchingElement(file,editor);
  final PsiReferenceExpression methodExpression=call.getMethodExpression();
  final PsiExpression target=methodExpression.getQualifierExpression();
  final PsiExpressionList argumentList=call.getArgumentList();
  final PsiExpression arg=argumentList.getExpressions()[0];
  final PsiExpression strippedTarget=ParenthesesUtils.stripParentheses(target);
  final PsiExpression strippedArg=ParenthesesUtils.stripParentheses(arg);
  final String strippedArgText;
  if (ParenthesesUtils.getPrecendence(strippedArg) > ParenthesesUtils.EQUALITY_PRECEDENCE) {
    strippedArgText='(' + strippedArg.getText() + ')';
  }
 else {
    strippedArgText=strippedArg.getText();
  }
  final String strippedTargetText;
  if (ParenthesesUtils.getPrecendence(strippedTarget) > ParenthesesUtils.EQUALITY_PRECEDENCE) {
    strippedTargetText='(' + strippedTarget.getText() + ')';
  }
 else {
    strippedTargetText=strippedTarget.getText();
  }
  replaceExpression(project,strippedTargetText + "==" + strippedArgText,call);
}
