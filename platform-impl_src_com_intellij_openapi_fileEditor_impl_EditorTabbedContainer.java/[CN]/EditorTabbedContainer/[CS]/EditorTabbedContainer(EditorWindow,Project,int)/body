{
  myWindow=window;
  myProject=project;
  final ActionManager actionManager=ActionManager.getInstance();
  myTabs=new JBTabsImpl(project,actionManager,IdeFocusManager.getInstance(project),this);
  myTabs.setDataProvider(new DataProvider(){
    public Object getData(    @NonNls final String dataId){
      if (DataConstants.VIRTUAL_FILE.equals(dataId)) {
        return myWindow.getSelectedFile();
      }
      if (DataConstantsEx.EDITOR_WINDOW.equals(dataId)) {
        return myWindow;
      }
      if (DataConstants.HELP_ID.equals(dataId)) {
        return HELP_ID;
      }
      return null;
    }
  }
).setPopupGroup(new Getter<ActionGroup>(){
    public ActionGroup get(){
      return (ActionGroup)CustomizableActionsSchemas.getInstance().getCorrectedAction(IdeActions.GROUP_EDITOR_TAB_POPUP);
    }
  }
,ActionPlaces.EDITOR_POPUP,false).addTabMouseListener(new MouseAdapter(){
    public void mousePressed(    final MouseEvent e){
      if (UIUtil.isCloseClick(e)) {
        final TabInfo info=myTabs.findInfo(e);
        if (info != null) {
          myWindow.closeFile((VirtualFile)info.getObject());
        }
      }
    }
    @Override public void mouseClicked(    final MouseEvent e){
      if (UIUtil.isActionClick(e) && (e.getClickCount() % 2) == 0) {
        ActionUtil.execute("HideAllWindows",e,null,ActionPlaces.UNKNOWN,0);
      }
 else       if (UIUtil.isActionClick(e) && (e.isMetaDown() || (!SystemInfo.isMac && e.isControlDown()))) {
        final TabInfo info=myTabs.findInfo(e);
        if (info != null && info.getObject() != null) {
          final VirtualFile vFile=(VirtualFile)info.getObject();
          ShowFilePathAction.show(vFile,e);
        }
      }
    }
  }
).getPresentation().setUiDecorator(new UiDecorator(){
    @NotNull public UiDecoration getDecoration(){
      return new UiDecoration(null,new Insets(1,6,1,6));
    }
  }
).setGhostsAlwaysVisible(true).setTabLabelActionsAutoHide(true).setActiveTabFillIn(EditorColorsManager.getInstance().getGlobalScheme().getDefaultBackground()).setPaintFocus(false).getJBTabs().addListener(new TabsListener(){
    public void selectionChanged(    final TabInfo oldSelection,    final TabInfo newSelection){
      final FileEditorManager editorManager=FileEditorManager.getInstance(myProject);
      final FileEditor oldEditor=editorManager.getSelectedEditor((VirtualFile)oldSelection.getObject());
      if (oldEditor != null) {
        oldEditor.deselectNotify();
      }
      final FileEditor newEditor=editorManager.getSelectedEditor((VirtualFile)newSelection.getObject());
      if (newEditor != null) {
        newEditor.selectNotify();
      }
    }
  }
);
  updateTabBorder();
  ((ToolWindowManagerEx)ToolWindowManager.getInstance(myProject)).addToolWindowManagerListener(new ToolWindowManagerAdapter(){
    public void stateChanged(){
      updateTabBorder();
    }
    public void toolWindowRegistered(    final String id){
      updateTabBorder();
    }
  }
);
  Disposer.register(project,this);
}
