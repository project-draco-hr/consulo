{
  myWindow=window;
  myProject=project;
  final ActionManager actionManager=ActionManager.getInstance();
  myTabs=new JBTabsImpl(project,actionManager,IdeFocusManager.getInstance(project),this);
  myTabs.setDataProvider(new MyDataProvider()).setPopupGroup(new Getter<ActionGroup>(){
    public ActionGroup get(){
      return (ActionGroup)CustomActionsSchema.getInstance().getCorrectedAction(IdeActions.GROUP_EDITOR_TAB_POPUP);
    }
  }
,ActionPlaces.EDITOR_POPUP,false).setNavigationActionsEnabled(false).addTabMouseListener(new TabMouseListener()).getPresentation().setTabDraggingEnabled(true).setUiDecorator(new UiDecorator(){
    @NotNull public UiDecoration getDecoration(){
      return new UiDecoration(null,new Insets(1,6,1,6));
    }
  }
).setTabLabelActionsMouseDeadzone(TimedDeadzone.NULL).setGhostsAlwaysVisible(true).setTabLabelActionsAutoHide(false).setActiveTabFillIn(EditorColorsManager.getInstance().getGlobalScheme().getDefaultBackground()).setPaintFocus(false).getJBTabs().addListener(new TabsListener.Adapter(){
    public void selectionChanged(    final TabInfo oldSelection,    final TabInfo newSelection){
      final FileEditorManager editorManager=FileEditorManager.getInstance(myProject);
      final FileEditor oldEditor=editorManager.getSelectedEditor((VirtualFile)oldSelection.getObject());
      if (oldEditor != null) {
        oldEditor.deselectNotify();
      }
      final FileEditor newEditor=editorManager.getSelectedEditor((VirtualFile)newSelection.getObject());
      if (newEditor != null) {
        newEditor.selectNotify();
      }
    }
  }
);
  setTabPlacement(UISettings.getInstance().EDITOR_TAB_PLACEMENT);
  updateTabBorder();
  ((ToolWindowManagerEx)ToolWindowManager.getInstance(myProject)).addToolWindowManagerListener(new ToolWindowManagerAdapter(){
    public void stateChanged(){
      updateTabBorder();
    }
    public void toolWindowRegistered(    final String id){
      updateTabBorder();
    }
  }
);
  Disposer.register(project,this);
}
