{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  final String methodName=methodExpression.getReferenceName();
  final Map<String,String> basicTypeMap=s_basicTypeMap;
  if (!basicTypeMap.containsValue(methodName)) {
    return;
  }
  final PsiExpression qualifier=methodExpression.getQualifierExpression();
  if (!(qualifier instanceof PsiNewExpression)) {
    return;
  }
  final PsiNewExpression newExp=(PsiNewExpression)qualifier;
  final PsiExpressionList argList=newExp.getArgumentList();
  if (argList == null) {
    return;
  }
  final PsiExpression[] args=argList.getExpressions();
  if (args.length != 1) {
    return;
  }
  final PsiType argType=args[0].getType();
  if (!TypeUtils.isJavaLangString(argType)) {
    return;
  }
  final PsiType type=qualifier.getType();
  if (type == null) {
    return;
  }
  final String typeText=type.getCanonicalText();
  if (!basicTypeMap.containsKey(typeText)) {
    return;
  }
  final String mappingMethod=basicTypeMap.get(typeText);
  if (!mappingMethod.equals(methodName)) {
    return;
  }
  registerError(expression);
}
