{
  if (type instanceof PsiArrayType) {
    String componentText=getTypeText(((PsiArrayType)type).getComponentType(),context,false);
    if (allowVarargs && type instanceof PsiEllipsisType) {
      return componentText + "...";
    }
    return componentText + "[]";
  }
  if (type == null) {
    return CommonClassNames.JAVA_LANG_OBJECT;
  }
  if (type instanceof PsiClassType) {
    final PsiClass raw=((PsiClassType)type).resolve();
    if (raw != null) {
      final String qname=getClassQualifiedName(raw,context);
      if (qname != null) {
        final PsiType[] parameters=((PsiClassType)type).getParameters();
        if (parameters.length > 0) {
          return qname + "<" + StringUtil.join(parameters,new Function<PsiType,String>(){
            @Override public String fun(            PsiType type){
              return getTypeText(type,context,false);
            }
          }
,", ")+ ">";
        }
        return qname;
      }
    }
  }
  String canonicalText=type.getCanonicalText();
  return canonicalText != null ? canonicalText : type.getPresentableText();
}
