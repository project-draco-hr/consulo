{
  if (!reference.isQualified()) {
    return;
  }
  final PsiElement parent=reference.getParent();
  if (parent instanceof PsiMethodCallExpression || parent instanceof PsiAssignmentExpression || parent instanceof PsiVariable) {
    return;
  }
  final PsiElement element=PsiTreeUtil.getParentOfType(reference,PsiImportStatementBase.class,PsiPackageStatement.class,JavaCodeFragment.class);
  if (element != null) {
    return;
  }
  if (m_ignoreJavadoc) {
    final PsiElement containingComment=PsiTreeUtil.getParentOfType(reference,PsiDocComment.class);
    if (containingComment != null) {
      return;
    }
  }
  final PsiElement psiElement=reference.resolve();
  if (!(psiElement instanceof PsiClass)) {
    return;
  }
  PsiClass aClass=(PsiClass)psiElement;
  final Project project=aClass.getProject();
  final CodeStyleSettings styleSettings=CodeStyleSettingsManager.getSettings(project);
  if (!styleSettings.INSERT_INNER_CLASS_IMPORTS) {
    aClass=ClassUtils.getOutermostContainingClass(aClass);
  }
  final String fqName=aClass.getQualifiedName();
  if (fqName == null) {
    return;
  }
  final String text=stripAngleBrackets(reference.getText());
  if (!text.equals(fqName)) {
    return;
  }
  final PsiJavaFile javaFile=PsiTreeUtil.getParentOfType(reference,PsiJavaFile.class);
  if (javaFile == null) {
    return;
  }
  if (!ImportUtils.nameCanBeImported(fqName,javaFile)) {
    return;
  }
  registerError(reference);
}
