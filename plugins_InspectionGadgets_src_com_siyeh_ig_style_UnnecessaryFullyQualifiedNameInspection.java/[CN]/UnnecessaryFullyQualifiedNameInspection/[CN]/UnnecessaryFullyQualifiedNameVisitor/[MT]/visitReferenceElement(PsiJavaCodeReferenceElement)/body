{
  super.visitReferenceElement(reference);
  final String text=reference.getText();
  if (text.indexOf((int)'.') < 0) {
    return;
  }
  if (m_ignoreJavadoc) {
    final PsiElement containingComment=PsiTreeUtil.getParentOfType(reference,PsiDocComment.class);
    if (containingComment != null) {
      return;
    }
  }
  final PsiElement psiElement=reference.resolve();
  if (!(psiElement instanceof PsiClass)) {
    return;
  }
  final PsiReferenceParameterList typeParameters=reference.getParameterList();
  if (typeParameters == null) {
    return;
  }
  typeParameters.accept(this);
  PsiClass containingClass=ClassUtils.getContainingClass(reference);
  while (containingClass != null) {
    final String containingClassName=containingClass.getName();
    if (text.endsWith('.' + containingClassName)) {
      return;
    }
    containingClass=ClassUtils.getContainingClass(containingClass);
  }
  final PsiJavaFile file=(PsiJavaFile)reference.getContainingFile();
  if (!ImportUtils.nameCanBeImported(text,file)) {
    return;
  }
  registerError(reference);
}
