{
  super.visitReferenceElement(reference);
  if (!reference.isQualified()) {
    return;
  }
  final PsiElement parent=reference.getParent();
  if (parent instanceof PsiMethodCallExpression || parent instanceof PsiAssignmentExpression || parent instanceof PsiVariable) {
    return;
  }
  final PsiElement element=PsiTreeUtil.getParentOfType(reference,PsiImportStatementBase.class,PsiPackageStatement.class,PsiCodeFragment.class);
  if (element != null) {
    return;
  }
  if (m_ignoreJavadoc) {
    final PsiElement containingComment=PsiTreeUtil.getParentOfType(reference,PsiDocComment.class);
    if (containingComment != null) {
      return;
    }
  }
  final PsiElement psiElement=reference.resolve();
  if (!(psiElement instanceof PsiClass)) {
    return;
  }
  final PsiClass aClass=(PsiClass)psiElement;
  final PsiClass outerClass=ClassUtils.getOutermostContainingClass(aClass);
  final String fqName=outerClass.getQualifiedName();
  final String text=reference.getText();
  if (!text.startsWith(fqName)) {
    return;
  }
  final String className=ClassUtil.extractClassName(text);
  final PsiManager manager=reference.getManager();
  final PsiResolveHelper resolveHelper=manager.getResolveHelper();
  final PsiClass psiClass=resolveHelper.resolveReferencedClass(className,reference);
  if (psiClass != null && !aClass.equals(psiClass)) {
    return;
  }
  registerError(reference);
}
