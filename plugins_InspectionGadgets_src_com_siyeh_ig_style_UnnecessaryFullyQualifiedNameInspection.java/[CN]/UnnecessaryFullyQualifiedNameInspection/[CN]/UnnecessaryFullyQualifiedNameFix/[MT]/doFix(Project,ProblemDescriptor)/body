{
  final PsiJavaCodeReferenceElement referenceElement=(PsiJavaCodeReferenceElement)descriptor.getPsiElement();
  final PsiJavaFile file=(PsiJavaFile)referenceElement.getContainingFile();
  if (file == null) {
    return;
  }
  final PsiImportList importList=file.getImportList();
  if (importList == null) {
    return;
  }
  final PsiClass aClass=(PsiClass)referenceElement.resolve();
  if (aClass == null) {
    return;
  }
  final String qualifiedName=aClass.getQualifiedName();
  if (qualifiedName == null) {
    return;
  }
  @NonNls final String packageName=ClassUtil.extractPackageName(qualifiedName);
  if (importList.findSingleClassImportStatement(qualifiedName) == null) {
    if (importList.findOnDemandImportStatement(packageName) == null) {
      addImport(importList,aClass);
    }
 else     if (ImportUtils.hasDefaultImportConflict(qualifiedName,file)) {
      addImport(importList,aClass);
    }
 else     if (ImportUtils.hasOnDemandImportConflict(qualifiedName,file)) {
      addImport(importList,aClass);
    }
  }
  final String fullyQualifiedText=referenceElement.getText();
  final QualificationRemover qualificationRemover=new QualificationRemover(fullyQualifiedText);
  file.accept(qualificationRemover);
  if (isOnTheFly()) {
    final Collection<PsiElement> shortenedElements=qualificationRemover.getShortenedElements();
    HighlightUtil.highlightElements(shortenedElements);
    showStatusMessage(file.getProject(),shortenedElements.size());
  }
}
