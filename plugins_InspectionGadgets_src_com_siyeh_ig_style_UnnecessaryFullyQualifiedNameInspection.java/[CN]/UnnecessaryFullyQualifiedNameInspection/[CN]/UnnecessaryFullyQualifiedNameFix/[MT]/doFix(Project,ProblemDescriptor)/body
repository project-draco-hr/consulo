{
  final PsiJavaCodeReferenceElement referenceElement=(PsiJavaCodeReferenceElement)descriptor.getPsiElement();
  final PsiJavaFile file=(PsiJavaFile)referenceElement.getContainingFile();
  if (file == null) {
    return;
  }
  final PsiImportList importList=file.getImportList();
  if (importList == null) {
    return;
  }
  final PsiElement target=referenceElement.resolve();
  if (!(target instanceof PsiClass)) {
    return;
  }
  final PsiClass aClass=(PsiClass)target;
  final String qualifiedName=aClass.getQualifiedName();
  if (qualifiedName == null) {
    return;
  }
  final String containingPackageName=file.getPackageName();
  @NonNls final String packageName=ClassUtil.extractPackageName(qualifiedName);
  if (!containingPackageName.equals(packageName) && importList.findSingleClassImportStatement(qualifiedName) == null) {
    if (importList.findOnDemandImportStatement(packageName) == null || ImportUtils.hasDefaultImportConflict(qualifiedName,file) || ImportUtils.hasOnDemandImportConflict(qualifiedName,file)) {
      addImport(importList,aClass);
    }
  }
  final String fullyQualifiedText=referenceElement.getText();
  final QualificationRemover qualificationRemover=new QualificationRemover(fullyQualifiedText);
  file.accept(qualificationRemover);
  if (isOnTheFly()) {
    final Collection<PsiElement> shortenedElements=qualificationRemover.getShortenedElements();
    HighlightUtils.highlightElements(shortenedElements);
    showStatusMessage(file.getProject(),shortenedElements.size());
  }
}
