{
  if (myComputing.get() != null || myDomManager.getProject().isDisposed())   return Collections.emptyList();
  myComputing.set(Boolean.TRUE);
  try {
    if (!myXmlFile.isValid()) {
      myModCount++;
      computeCachedValue(ArrayUtil.EMPTY_OBJECT_ARRAY);
      if (fireEvents && myLastResult != null) {
        removeFileElementFromCache(myLastResult,myFileDescription);
        myLastResult.resetRoot(true);
        return Arrays.<DomEvent>asList(new ElementUndefinedEvent(myLastResult));
      }
      return Collections.emptyList();
    }
    final Module module=ModuleUtil.findModuleForPsiElement(myXmlFile);
    if (lastResultSuits(rootTagName,module)) {
      List<DomEvent> list=new SmartList<DomEvent>();
      if (fireEvents) {
        list.add(new ElementChangedEvent(myLastResult));
      }
      myCachedValue.getValue();
      return list;
    }
    myModCount++;
    final Pair<DomFileDescription<T>,Object[]> description=findFileDescription(module,rootTagName);
    if (myCachedValue.hasUpToDateValue()) {
      return Collections.emptyList();
    }
    return saveResult(description.first,fireEvents,description.second);
  }
  finally {
    myComputing.set(null);
  }
}
