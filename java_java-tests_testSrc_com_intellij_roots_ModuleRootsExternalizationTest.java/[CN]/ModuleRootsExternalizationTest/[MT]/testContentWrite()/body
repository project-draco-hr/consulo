{
  File content=getTestRoot();
  File source=new File(content,"source");
  File testSource=new File(content,"testSource");
  File exclude=new File(content,"exclude");
  File classes=new File(content,"classes");
  File testClasses=new File(content,"testClasses");
  final VirtualFile contentFile=LocalFileSystem.getInstance().findFileByIoFile(content);
  assertNotNull(contentFile);
  final VirtualFile sourceFile=LocalFileSystem.getInstance().findFileByIoFile(source);
  assertNotNull(sourceFile);
  final VirtualFile testSourceFile=LocalFileSystem.getInstance().findFileByIoFile(testSource);
  assertNotNull(testSourceFile);
  final VirtualFile excludeFile=LocalFileSystem.getInstance().findFileByIoFile(exclude);
  assertNotNull(excludeFile);
  final VirtualFile classesFile=LocalFileSystem.getInstance().findFileByIoFile(classes);
  assertNotNull(classesFile);
  final VirtualFile testClassesFile=LocalFileSystem.getInstance().findFileByIoFile(testClasses);
  assertNotNull(testClassesFile);
  final File moduleFile=new File(content,"test.iml");
  final Module module=createModule(moduleFile);
  final ModuleRootManagerImpl moduleRootManager=(ModuleRootManagerImpl)ModuleRootManager.getInstance(module);
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      final ModifiableRootModel rootModel=moduleRootManager.getModifiableModel();
      final ContentEntry contentEntry=rootModel.addContentEntry(contentFile);
      final CompilerModuleExtension compilerModuleExtension=rootModel.getModuleExtension(CompilerModuleExtension.class);
      compilerModuleExtension.setCompilerOutputPath(classesFile);
      compilerModuleExtension.setCompilerOutputPathForTests(testClassesFile);
      compilerModuleExtension.inheritCompilerOutputPath(false);
      rootModel.setSdk(JavaSdkImpl.getMockJdk17());
      contentEntry.addSourceFolder(sourceFile,false);
      contentEntry.addSourceFolder(testSourceFile,true);
      contentEntry.addExcludeFolder(excludeFile);
      rootModel.commit();
    }
  }
);
  final Element element=new Element("root");
  moduleRootManager.getState().writeExternal(element);
  assertElementEquals(element,"<root inherit-compiler-output=\"false\">" + "<output url=\"file://$MODULE_DIR$/classes\" />" + "<output-test url=\"file://$MODULE_DIR$/testClasses\" />"+ "<exclude-output />"+ "<content url=\"file://$MODULE_DIR$\">"+ "<sourceFolder url=\"file://$MODULE_DIR$/source\" isTestSource=\"false\" />"+ "<sourceFolder url=\"file://$MODULE_DIR$/testSource\" isTestSource=\"true\" />"+ "<excludeFolder url=\"file://$MODULE_DIR$/exclude\" />"+ "</content>"+ "<orderEntry type=\"jdk\" jdkName=\"java 1.7\" jdkType=\"JavaSDK\" />"+ "<orderEntry type=\"sourceFolder\" forTests=\"false\" />"+ "</root>",module);
}
