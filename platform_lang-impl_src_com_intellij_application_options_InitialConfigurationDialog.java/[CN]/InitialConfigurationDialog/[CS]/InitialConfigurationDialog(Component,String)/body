{
  super(parent,true);
  myColorSettingsPage=colorSettingsPage;
  setTitle(ApplicationNamesInfo.getInstance().getFullProductName() + " Initial Configuration");
  final ArrayList<Keymap> keymaps=new ArrayList<Keymap>();
  for (  Keymap keymap : ((KeymapManagerImpl)KeymapManager.getInstance()).getAllKeymaps()) {
    if (matchesPlatform(keymap)) {
      keymaps.add(keymap);
    }
  }
  myKeymapComboBox.setModel(new DefaultComboBoxModel(keymaps.toArray(new Keymap[keymaps.size()])));
  myKeymapComboBox.setRenderer(new ListCellRendererWrapper(myKeymapComboBox.getRenderer()){
    @Override public void customize(    final JList list,    final Object value,    final int index,    final boolean selected,    final boolean cellHasFocus){
      Keymap keymap=(Keymap)value;
      if (keymap == null) {
        return;
      }
      if (KeymapManager.DEFAULT_IDEA_KEYMAP.equals(keymap.getName())) {
        setText("IntelliJ IDEA Classic");
      }
 else       if ("Mac OS X".equals(keymap.getName())) {
        setText("IntelliJ IDEA Classic - Mac OS X");
      }
 else {
        setText(keymap.getPresentableName());
      }
    }
  }
);
  preselectKeyMap(keymaps);
  final EditorColorsScheme[] colorSchemes=EditorColorsManager.getInstance().getAllSchemes();
  myColorSchemeComboBox.setModel(new DefaultComboBoxModel(colorSchemes));
  myColorSchemeComboBox.setRenderer(new ListCellRendererWrapper(myColorSchemeComboBox.getRenderer()){
    @Override public void customize(    JList list,    Object value,    int index,    boolean selected,    boolean cellHasFocus){
      setText(((EditorColorsScheme)value).getName());
    }
  }
);
  init();
  myPreviewButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      showColorSchemePreviewDialog();
    }
  }
);
  final boolean canCreateLauncherScript=SystemInfo.isMac || SystemInfo.isLinux;
  myCreateScriptCheckbox.setVisible(canCreateLauncherScript);
  myCreateScriptCheckbox.setSelected(canCreateLauncherScript);
  myCreateScriptPanel.setVisible(canCreateLauncherScript);
  if (canCreateLauncherScript) {
    myScriptPathTextField.setText("/usr/local/bin/" + CreateLauncherScriptAction.defaultScriptName());
  }
}
