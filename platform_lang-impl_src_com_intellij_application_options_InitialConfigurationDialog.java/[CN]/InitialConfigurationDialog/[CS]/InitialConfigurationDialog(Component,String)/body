{
  super(parent,true);
  myColorSettingsPage=colorSettingsPage;
  setTitle(ApplicationNamesInfo.getInstance().getFullProductName() + " Initial Configuration");
  final ArrayList<Keymap> keymaps=new ArrayList<Keymap>();
  for (  Keymap keymap : ((KeymapManagerImpl)KeymapManager.getInstance()).getAllKeymaps()) {
    if (matchesPlatform(keymap)) {
      keymaps.add(keymap);
    }
  }
  myAppearanceComboBox.setModel(new DefaultComboBoxModel(LafManager.getInstance().getInstalledLookAndFeels()));
  myAppearanceComboBox.setRenderer(new LafComboBoxRenderer());
  myAppearanceComboBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent event){
      UIManager.LookAndFeelInfo selectedLaf=(UIManager.LookAndFeelInfo)myAppearanceComboBox.getSelectedItem();
      if (selectedLaf.getName().contains("Darcula")) {
        myColorSchemeComboBox.setSelectedItem(EditorColorsManager.getInstance().getScheme("Darcula"));
      }
    }
  }
);
  myColorSchemeComboBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent event){
      EditorColorsScheme scheme=(EditorColorsScheme)myColorSchemeComboBox.getSelectedItem();
      if (scheme.getName().equals("Darcula")) {
        UIManager.LookAndFeelInfo[] lafs=LafManager.getInstance().getInstalledLookAndFeels();
        for (        UIManager.LookAndFeelInfo laf : lafs) {
          if (laf.getName().contains("Darcula")) {
            myAppearanceComboBox.setSelectedItem(laf);
            break;
          }
        }
      }
    }
  }
);
  myKeymapComboBox.setModel(new DefaultComboBoxModel(keymaps.toArray(new Keymap[keymaps.size()])));
  myKeymapComboBox.setRenderer(new ListCellRendererWrapper(){
    @Override public void customize(    final JList list,    final Object value,    final int index,    final boolean selected,    final boolean cellHasFocus){
      Keymap keymap=(Keymap)value;
      if (keymap == null) {
        return;
      }
      if (KeymapManager.DEFAULT_IDEA_KEYMAP.equals(keymap.getName())) {
        setText("IntelliJ IDEA Classic");
      }
 else       if ("Mac OS X".equals(keymap.getName())) {
        setText("IntelliJ IDEA Classic - Mac OS X");
      }
 else {
        setText(keymap.getPresentableName());
      }
    }
  }
);
  preselectKeyMap(keymaps);
  final EditorColorsScheme[] colorSchemes=EditorColorsManager.getInstance().getAllSchemes();
  myColorSchemeComboBox.setModel(new DefaultComboBoxModel(colorSchemes));
  myColorSchemeComboBox.setRenderer(new ListCellRendererWrapper(){
    @Override public void customize(    JList list,    Object value,    int index,    boolean selected,    boolean cellHasFocus){
      if (value != null) {
        setText(((EditorColorsScheme)value).getName());
      }
    }
  }
);
  myColorSchemeComboBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      if (myHidingPreviewPanel != null)       myHidingPreviewPanel.updateColorSchemePreview(true);
    }
  }
);
  setResizable(false);
  init();
  final boolean canCreateLauncherScript=CreateLauncherScriptAction.isAvailable();
  myCreateScriptCheckbox.setVisible(canCreateLauncherScript);
  myCreateScriptCheckbox.setSelected(canCreateLauncherScript);
  myCreateScriptPanel.setVisible(canCreateLauncherScript);
  if (canCreateLauncherScript) {
    myScriptPathTextField.setText("/usr/local/bin/" + CreateLauncherScriptAction.defaultScriptName());
  }
  final boolean canCreateDesktopEntry=CreateDesktopEntryAction.isAvailable();
  myCreateEntryCheckBox.setVisible(canCreateDesktopEntry);
  myCreateEntryCheckBox.setSelected(canCreateDesktopEntry);
  myCreateEntryPanel.setVisible(canCreateDesktopEntry);
  if (canCreateDesktopEntry) {
    myGlobalEntryCheckBox.setSelected(!PathManager.getHomePath().startsWith("/home"));
  }
  Disposer.register(myDisposable,new Disposable(){
    @Override public void dispose(){
      if (myPreviewEditor != null) {
        myPreviewEditor.disposeUIResources();
      }
      if (myPreviewOptions != null) {
        myPreviewOptions.disposeUIResources();
      }
    }
  }
);
}
