{
  String text=document.getText();
  final Set<String> markers=highlightingTypes.keySet();
  String typesRegex="";
  for (  String marker : markers) {
    typesRegex+=(typesRegex.length() == 0 ? "" : "|") + "(?:" + marker+ ")";
  }
  @NonNls String pat=".*?(<(" + typesRegex + ")(?: descr=\\\"((?:[^\\\"\\\\]|\\\\\\\")*)\\\")?(?: type=\\\"([0-9A-Z_]+)\\\")?(?: foreground=\\\"([0-9xa-f]+)\\\")?(?: background=\\\"([0-9xa-f]+)\\\")?(?: effectcolor=\\\"([0-9xa-f]+)\\\")?(?: effecttype=\\\"([A-Z]+)\\\")?(?: fonttype=\\\"([0-9]+)\\\")?(/)?>)(.*)";
  Pattern p=Pattern.compile(pat,Pattern.DOTALL);
  Out:   for (; ; ) {
    Matcher m=p.matcher(text);
    if (!m.matches())     break;
    int startOffset=m.start(1);
    String marker=m.group(2);
    ExpectedHighlightingSet expectedHighlightingSet=highlightingTypes.get(marker);
    while (!expectedHighlightingSet.enabled) {
      if (!m.find())       break Out;
      marker=m.group(2);
      startOffset=m.start(1);
      expectedHighlightingSet=highlightingTypes.get(marker);
    }
    @NonNls String descr=m.group(3);
    if (descr == null) {
      descr="*";
    }
 else     if (descr.equals("null")) {
      descr=null;
    }
    String typeString=m.group(4);
    String foregroundColor=m.group(5);
    String backgroundColor=m.group(6);
    String effectColor=m.group(7);
    String effectType=m.group(8);
    String fontType=m.group(9);
    String closeTagMarker=m.group(10);
    String rest=m.group(11);
    String content;
    int endOffset;
    if (closeTagMarker == null) {
      Pattern pat2=Pattern.compile("(.*?)</" + marker + ">(.*)",Pattern.DOTALL);
      final Matcher matcher2=pat2.matcher(rest);
      LOG.assertTrue(matcher2.matches(),"Cannot find closing </" + marker + ">");
      content=matcher2.group(1);
      endOffset=m.start(11) + matcher2.start(2);
    }
 else {
      content="";
      endOffset=m.start(11);
    }
    document.replaceString(startOffset,endOffset,content);
    TextAttributes forcedAttributes=null;
    if (foregroundColor != null) {
      forcedAttributes=new TextAttributes(Color.decode(foregroundColor),Color.decode(backgroundColor),Color.decode(effectColor),EffectType.valueOf(effectType),Integer.parseInt(fontType));
    }
    TextRange textRange=new TextRange(startOffset,startOffset + content.length());
    final HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(expectedHighlightingSet.defaultErrorType,textRange,descr,forcedAttributes);
    HighlightInfoType type=null;
    if (typeString != null) {
      try {
        Field field=HighlightInfoType.class.getField(typeString);
        type=(HighlightInfoType)field.get(null);
      }
 catch (      Exception e) {
        LOG.error(e);
      }
      if (type == null)       LOG.assertTrue(false,"Wrong highlight type: " + typeString);
    }
    highlightInfo.type=type;
    highlightInfo.isAfterEndOfLine=expectedHighlightingSet.endOfLine;
    expectedHighlightingSet.infos.add(highlightInfo);
    text=document.getText();
  }
}
