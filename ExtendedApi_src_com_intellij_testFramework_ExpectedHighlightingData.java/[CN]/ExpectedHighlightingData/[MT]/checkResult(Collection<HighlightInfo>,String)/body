{
  for (  HighlightInfo info : infos) {
    if (!expectedInfosContainsInfo(info)) {
      final int startOffset=info.startOffset;
      final int endOffset=info.endOffset;
      String s=text.substring(startOffset,endOffset);
      String desc=info.description;
      int startLine=StringUtil.offsetToLineNumber(text,startOffset);
      int endLine=StringUtil.offsetToLineNumber(text,endOffset);
      int x1=startOffset - StringUtil.lineColToOffset(text,startLine,0);
      int x2=endOffset - StringUtil.lineColToOffset(text,endLine,0);
      Assert.fail(formatFileName(startLine,startOffset - x1) + "Extra text fragment highlighted " + "("+ (x1 + 1)+ ", "+ (startLine + 1)+ ")"+ "-"+ "("+ (x2 + 1)+ ", "+ (endLine + 1)+ ")"+ " :'"+ s+ "'"+ (desc == null ? "" : " (" + desc + ")")+ " ["+ info.type+ "]");
    }
  }
  final Collection<ExpectedHighlightingSet> expectedHighlights=highlightingTypes.values();
  for (  ExpectedHighlightingSet highlightingSet : expectedHighlights) {
    final Set<HighlightInfo> expInfos=highlightingSet.infos;
    for (    HighlightInfo expectedInfo : expInfos) {
      if (!infosContainsExpectedInfo(infos,expectedInfo) && highlightingSet.enabled) {
        final int startOffset=expectedInfo.startOffset;
        final int endOffset=expectedInfo.endOffset;
        String s=text.substring(startOffset,endOffset);
        String desc=expectedInfo.description;
        int startLine=StringUtil.offsetToLineNumber(text,startOffset);
        int endLine=StringUtil.offsetToLineNumber(text,endOffset);
        int x1=startOffset - StringUtil.lineColToOffset(text,startLine,0);
        int x2=endOffset - StringUtil.lineColToOffset(text,endLine,0);
        Assert.fail(formatFileName(startLine,startOffset - x1) + "Text fragment was not highlighted " + "("+ (x1 + 1)+ ", "+ (startLine + 1)+ ")"+ "-"+ "("+ (x2 + 1)+ ", "+ (endLine + 1)+ ")"+ " :'"+ s+ "'"+ (desc == null ? "" : " (" + desc + ")"));
      }
    }
  }
}
