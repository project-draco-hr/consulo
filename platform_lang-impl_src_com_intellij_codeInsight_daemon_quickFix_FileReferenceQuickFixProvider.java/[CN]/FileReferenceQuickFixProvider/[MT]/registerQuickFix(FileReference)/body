{
  final FileReferenceSet fileReferenceSet=reference.getFileReferenceSet();
  int index=reference.getIndex();
  if (index < 0)   return Collections.emptyList();
  final String newFileName=reference.getFileNameToCreate();
  if (newFileName.isEmpty() || newFileName.indexOf('\\') != -1 || newFileName.indexOf('*') != -1 || newFileName.indexOf('?') != -1 || SystemInfo.isWindows && newFileName.indexOf(':') != -1) {
    return Collections.emptyList();
  }
  PsiFileSystemItem context=null;
  if (index > 0) {
    context=fileReferenceSet.getReference(index - 1).resolve();
  }
 else {
    final Collection<PsiFileSystemItem> defaultContexts=fileReferenceSet.getDefaultContexts();
    if (defaultContexts.isEmpty()) {
      return Collections.emptyList();
    }
    PsiElement element=reference.getElement();
    Module module=element != null ? ModuleUtilCore.findModuleForPsiElement(element) : null;
    for (    PsiFileSystemItem defaultContext : defaultContexts) {
      if (defaultContext != null) {
        final VirtualFile virtualFile=defaultContext.getVirtualFile();
        if (virtualFile != null && defaultContext.isDirectory() && virtualFile.isInLocalFileSystem()) {
          if (context == null) {
            context=defaultContext;
          }
          if (module != null && module == getModuleForContext(defaultContext)) {
            context=defaultContext;
            break;
          }
        }
      }
    }
    if (context == null && ApplicationManager.getApplication().isUnitTestMode()) {
      context=defaultContexts.iterator().next();
    }
  }
  if (context == null)   return Collections.emptyList();
  final VirtualFile virtualFile=context.getVirtualFile();
  if (virtualFile == null || !virtualFile.isValid())   return Collections.emptyList();
  final PsiDirectory directory=context.getManager().findDirectory(virtualFile);
  if (directory == null)   return Collections.emptyList();
  if (fileReferenceSet.isCaseSensitive()) {
    final PsiElement psiElement=reference.innerSingleResolve(false);
    if (psiElement != null) {
      final String existingElementName=((PsiNamedElement)psiElement).getName();
      final RenameFileReferenceIntentionAction renameRefAction=new RenameFileReferenceIntentionAction(existingElementName,reference);
      final RenameFileFix renameFileFix=new RenameFileFix(newFileName);
      return Arrays.asList(renameRefAction,renameFileFix);
    }
  }
  final boolean isdirectory;
  if (!reference.isLast()) {
    try {
      directory.checkCreateSubdirectory(newFileName);
    }
 catch (    IncorrectOperationException ex) {
      return Collections.emptyList();
    }
    isdirectory=true;
  }
 else {
    FileType ft=FileTypeManager.getInstance().getFileTypeByFileName(newFileName);
    if (ft instanceof UnknownFileType)     return Collections.emptyList();
    try {
      directory.checkCreateFile(newFileName);
    }
 catch (    IncorrectOperationException ex) {
      return Collections.emptyList();
    }
    isdirectory=false;
  }
  final CreateFileFix action=new MyCreateFileFix(isdirectory,newFileName,directory,reference);
  return Arrays.asList(action);
}
