{
  GrExpression invoked=getInvokedExpression();
  if (invoked instanceof GrReferenceExpression) {
    GrReferenceExpression refExpr=(GrReferenceExpression)invoked;
    final GroovyResolveResult[] resolveResults=refExpr.multiResolve(false);
    PsiManager manager=getManager();
    GlobalSearchScope scope=getResolveScope();
    PsiType result=null;
    for (    GroovyResolveResult resolveResult : resolveResults) {
      PsiElement resolved=resolveResult.getElement();
      PsiType returnType=null;
      if (resolved instanceof PsiMethod && !GroovyPsiManager.getInstance(resolved.getProject()).isTypeBeingInferred(resolved)) {
        returnType=((PsiMethod)resolved).getReturnType();
      }
 else       if (resolved instanceof GrVariable) {
        final PsiType type=((GrVariable)resolved).getTypeGroovy();
        if (type instanceof GrClosureType) {
          returnType=((GrClosureType)type).getClosureReturnType();
        }
      }
      if (returnType == null)       return null;
      returnType=resolveResult.getSubstitutor().substitute(returnType);
      returnType=TypesUtil.boxPrimitiveType(returnType,manager,scope);
      if (result == null || returnType.isAssignableFrom(result))       result=returnType;
 else       if (!result.isAssignableFrom(returnType))       result=GenericsUtil.getLeastUpperBound(result,returnType,manager);
    }
    if (result == null)     return null;
    if (refExpr.getDotTokenType() != GroovyTokenTypes.mSPREAD_DOT) {
      return result;
    }
 else {
      return ResolveUtil.getListTypeForSpreadOperator(refExpr,result);
    }
  }
  return null;
}
