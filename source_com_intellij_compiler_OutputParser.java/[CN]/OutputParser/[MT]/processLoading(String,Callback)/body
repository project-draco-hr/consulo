{
  if (line.startsWith("[parsing started")) {
    String filePath=line.substring("[parsing started".length(),line.length() - 1).trim();
    filePath=filePath.replace(File.separatorChar,'/');
    processParsingMessage(callback,filePath);
  }
 else   if (line.startsWith("[parsed") && line.indexOf(".java") >= 0) {
    int index=line.indexOf(".java");
    String filePath=line.substring("[parsed".length(),index + ".java".length()).trim();
    processParsingMessage(callback,filePath.replace(File.separatorChar,'/'));
  }
 else   if (line.startsWith("[read") && line.endsWith(".java]")) {
    String filePath=line.substring("[read".length(),line.length() - 1).trim();
    processParsingMessage(callback,filePath.replace(File.separatorChar,'/'));
  }
 else   if (line.startsWith("[parsing completed")) {
  }
 else   if (line.startsWith("[loading") || line.startsWith("[loaded") || line.startsWith("[read")) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(line);
    }
    callback.setProgressText("Loading classes...");
  }
 else   if (line.startsWith("[checking")) {
    String className=line.substring("[checking".length(),line.length() - 1).trim();
    callback.setProgressText("Compiling " + className + "...");
  }
 else   if (line.startsWith("[wrote") || line.startsWith("[write")) {
    String filePath=line.substring("[wrote".length(),line.length() - 1).trim();
    processParsingMessage(callback,filePath.replace(File.separatorChar,'/'));
  }
 else {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Failed to interpret: #" + line + "#");
    }
  }
}
