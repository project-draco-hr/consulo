{
class RequestImpl implements Request {
    private URLConnection myConnection;
    private InputStream myInputStream;
    private BufferedReader myReader;
    @NotNull @Override public URLConnection getConnection() throws IOException {
      if (myConnection == null) {
        myConnection=openConnection(builder);
      }
      return myConnection;
    }
    @NotNull @Override public InputStream getInputStream() throws IOException {
      if (myInputStream == null) {
        myInputStream=getConnection().getInputStream();
        if (builder.myGzip && "gzip".equalsIgnoreCase(getConnection().getContentEncoding())) {
          myInputStream=new GZIPInputStream(myInputStream);
        }
      }
      return myInputStream;
    }
    @NotNull @Override public BufferedReader getReader() throws IOException {
      return getReader(null);
    }
    @NotNull @Override public BufferedReader getReader(    @Nullable ProgressIndicator indicator) throws IOException {
      if (myReader == null) {
        InputStream inputStream=getInputStream();
        if (indicator != null) {
          int contentLength=getConnection().getContentLength();
          if (contentLength > 0) {
            inputStream=new ProgressMonitorInputStream(indicator,inputStream,contentLength);
          }
        }
        myReader=new BufferedReader(new InputStreamReader(inputStream,getCharset(this)));
      }
      return myReader;
    }
    @Override public boolean isSuccessful() throws IOException {
      URLConnection connection=getConnection();
      return !(connection instanceof HttpURLConnection) || ((HttpURLConnection)connection).getResponseCode() == HttpURLConnection.HTTP_OK;
    }
    private void cleanup(){
      StreamUtil.closeStream(myInputStream);
      StreamUtil.closeStream(myReader);
      if (myConnection instanceof HttpURLConnection) {
        ((HttpURLConnection)myConnection).disconnect();
      }
    }
    @Override @NotNull public byte[] readBytes(    @Nullable ProgressIndicator indicator) throws IOException {
      int contentLength=getConnection().getContentLength();
      BufferExposingByteArrayOutputStream out=new BufferExposingByteArrayOutputStream(contentLength > 0 ? contentLength : 32 * 1024);
      NetUtils.copyStreamContent(indicator,getInputStream(),out,contentLength);
      return ArrayUtil.realloc(out.getInternalBuffer(),out.size());
    }
    @Override @NotNull public File saveToFile(    @NotNull File file,    @Nullable ProgressIndicator indicator) throws IOException {
      FileUtilRt.createParentDirs(file);
      boolean deleteFile=true;
      try {
        OutputStream out=new FileOutputStream(file);
        try {
          NetUtils.copyStreamContent(indicator,getInputStream(),out,getConnection().getContentLength());
          deleteFile=false;
        }
 catch (        IOException e) {
          throw new IOException(createErrorMessage(e,this,false),e);
        }
 finally {
          out.close();
        }
      }
  finally {
        if (deleteFile) {
          FileUtilRt.delete(file);
        }
      }
      return file;
    }
  }
  RequestImpl request=new RequestImpl();
  try {
    return processor.process(request);
  }
  finally {
    request.cleanup();
  }
}
