{
  if (myMethodCall == null || !myMethodCall.isValid())   return false;
  final Module module=ModuleUtil.findModuleForPsiElement(file);
  if (module == null)   return false;
  final Sdk jdk=ModuleRootManager.getInstance(module).getSdk();
  if (jdk == null)   return false;
  final String versionString=jdk.getVersionString();
  if (versionString == null || JavaSdk.getInstance().compareTo(versionString,"1.5") < 0)   return false;
  final PsiReferenceExpression expression=myMethodCall.getMethodExpression();
  final PsiElement element=expression.resolve();
  if (element instanceof PsiMethod) {
    final PsiMethod method=(PsiMethod)element;
    final JavaPsiFacade psiFacade=JavaPsiFacade.getInstance(project);
    final PsiClass collectionsClass=psiFacade.findClass("java.util.Collection",GlobalSearchScope.allScope(project));
    if (collectionsClass != null && InheritanceUtil.isInheritorOrSelf(method.getContainingClass(),collectionsClass,true)) {
      if (Comparing.strEqual(method.getName(),"addAll") && PsiType.BOOLEAN.equals(method.getReturnType())) {
        final PsiParameter[] psiParameters=method.getParameterList().getParameters();
        if (psiParameters.length == 1 && psiParameters[0].getType() instanceof PsiClassType && InheritanceUtil.isInheritorOrSelf(((PsiClassType)psiParameters[0].getType()).resolve(),collectionsClass,true)) {
          final PsiExpressionList list=myMethodCall.getArgumentList();
          final PsiExpression[] expressions=list.getExpressions();
          if (expressions.length == 1) {
            if (expressions[0].getType() instanceof PsiArrayType) {
              return true;
            }
          }
        }
      }
    }
  }
  return false;
}
