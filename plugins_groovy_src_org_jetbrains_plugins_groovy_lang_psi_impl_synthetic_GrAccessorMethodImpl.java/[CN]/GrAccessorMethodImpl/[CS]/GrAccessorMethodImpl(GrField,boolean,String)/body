{
  super(property.getManager(),GroovyFileType.GROOVY_LANGUAGE,name,new LightParameterListBuilder(property.getManager(),GroovyFileType.GROOVY_LANGUAGE),new LightModifierList(property.getManager()){
    @Override public String getText(){
      final String[] modifiers=getModifiers();
      if (modifiers.length == 0)       return "";
      if (modifiers.length == 1)       return modifiers[0];
      return StringUtil.join(modifiers," ");
    }
  }
);
  myProperty=property;
  myIsSetter=isSetter;
  if (myIsSetter) {
    PsiType type=myProperty.getDeclaredType();
    if (type == null) {
      type=TypesUtil.getJavaLangObject(myProperty);
    }
    addParameter(myProperty.getName(),type);
  }
  setMethodReturnType(myIsSetter ? PsiType.VOID : myProperty.getType());
  addModifier(PsiModifier.PUBLIC);
  if (myProperty.hasModifierProperty(PsiModifier.STATIC)) {
    addModifier(PsiModifier.STATIC);
  }
  setNavigationElement(property);
  setBaseIcon(JetgroovyIcons.Groovy.Property);
  setContainingClass(myProperty.getContainingClass());
  setMethodKind("AccessorMethod");
  setOriginInfo("synthetic accessor for '" + myProperty.getName() + "'");
}
