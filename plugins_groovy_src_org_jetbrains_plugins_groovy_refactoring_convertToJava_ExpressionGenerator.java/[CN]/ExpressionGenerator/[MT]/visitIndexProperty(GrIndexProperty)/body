{
  final GrExpression selectedExpression=expression.getSelectedExpression();
  final PsiType thisType=selectedExpression.getType();
  final GrArgumentList argList=expression.getArgumentList();
  if (argList.getAllArguments().length == 0) {
    if (selectedExpression instanceof GrBuiltinTypeClassExpression) {
      selectedExpression.accept(this);
      return;
    }
 else     if (selectedExpression instanceof GrReferenceExpression && ((GrReferenceExpression)selectedExpression).resolve() instanceof PsiClass) {
      builder.append(((PsiClass)((GrReferenceExpression)selectedExpression).resolve()).getQualifiedName());
      builder.append("[].class");
      return;
    }
  }
  final PsiType[] argTypes=PsiUtil.getArgumentTypes(argList);
  final PsiManager manager=expression.getManager();
  final GlobalSearchScope resolveScope=expression.getResolveScope();
  final GrExpression[] exprArgs=argList.getExpressionArguments();
  final GrNamedArgument[] namedArgs=argList.getNamedArguments();
  if (!PsiImplUtil.isSimpleArrayAccess(thisType,argTypes,manager,resolveScope)) {
    final GroovyResolveResult candidate=PsiImplUtil.extractUniqueResult(expression.multiResolve(false));
    PsiElement element=candidate.getElement();
    if (element != null || !PsiUtil.isLValue(expression)) {
      if (element instanceof GrGdkMethod && ((GrGdkMethod)element).getStaticMethod().getParameterList().getParameters()[0].getType().equalsToText("java.util.Map<K,V>")) {
        PsiClass map=JavaPsiFacade.getInstance(context.project).findClass(CommonClassNames.JAVA_UTIL_MAP,expression.getResolveScope());
        if (map != null) {
          PsiMethod[] gets=map.findMethodsByName("get",false);
          invokeMethodOn(gets[0],selectedExpression,exprArgs,namedArgs,EMPTY_ARRAY,PsiSubstitutor.EMPTY,expression);
          return;
        }
      }
 else       if (element instanceof GrGdkMethod && ((GrGdkMethod)element).getStaticMethod().getParameterList().getParameters()[0].getType().equalsToText("java.util.List<T>")) {
        PsiClass list=JavaPsiFacade.getInstance(context.project).findClass(CommonClassNames.JAVA_UTIL_LIST,expression.getResolveScope());
        if (list != null) {
          PsiMethod[] gets=list.findMethodsByName("get",false);
          invokeMethodOn(gets[0],selectedExpression,exprArgs,namedArgs,EMPTY_ARRAY,PsiSubstitutor.EMPTY,expression);
          return;
        }
      }
      invokeMethodByResolveResult(selectedExpression,candidate,"getAt",exprArgs,namedArgs,EMPTY_ARRAY,this,expression);
      return;
    }
  }
  selectedExpression.accept(this);
  builder.append('[');
  final GrExpression arg=exprArgs[0];
  arg.accept(this);
  builder.append(']');
}
