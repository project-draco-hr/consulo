{
  final GrExpression qualifier=referenceExpression.getQualifier();
  final GroovyResolveResult resolveResult=referenceExpression.advancedResolve();
  final PsiElement resolved=resolveResult.getElement();
  final IElementType type=referenceExpression.getDotTokenType();
  GrExpression qualifierToUse=qualifier;
  if (type == mMEMBER_POINTER) {
    LOG.assertTrue(qualifier != null);
    builder.append("new ").append(GroovyCommonClassNames.ORG_CODEHAUS_GROOVY_RUNTIME_METHOD_CLOSURE).append("(");
    qualifier.accept(this);
    builder.append(", \"").append(referenceExpression.getReferenceName()).append("\")");
    return;
  }
  if (type == mOPTIONAL_DOT) {
    LOG.assertTrue(qualifier != null);
    String qualifierName=createVarByInitializer(qualifier);
    builder.append(qualifierName).append(" == null ? null : ");
    qualifierToUse=factory.createReferenceExpressionFromText(qualifierName,referenceExpression);
  }
  if (resolveResult.isInvokedOnProperty()) {
    LOG.assertTrue(resolved instanceof PsiMethod);
    invokeMethodOn(((PsiMethod)resolved),qualifierToUse,GrExpression.EMPTY_ARRAY,GrNamedArgument.EMPTY_ARRAY,GrClosableBlock.EMPTY_ARRAY,resolveResult.getSubstitutor(),referenceExpression);
  }
 else {
    if (qualifierToUse != null) {
      qualifierToUse.accept(this);
      builder.append('.');
    }
    final String refName=resolved instanceof PsiNamedElement ? ((PsiNamedElement)resolved).getName() : referenceExpression.getReferenceName();
    builder.append(refName);
  }
}
