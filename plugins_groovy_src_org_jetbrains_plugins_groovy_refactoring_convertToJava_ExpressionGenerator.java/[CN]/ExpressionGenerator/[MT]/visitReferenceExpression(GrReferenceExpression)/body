{
  final GrExpression qualifier=referenceExpression.getQualifier();
  final GroovyResolveResult resolveResult=referenceExpression.advancedResolve();
  final PsiElement resolved=resolveResult.getElement();
  if (resolved instanceof PsiClass && PsiUtil.isExpressionUsed(referenceExpression)) {
    builder.append(((PsiClass)resolved).getQualifiedName());
    builder.append(".class");
    return;
  }
  if (resolved == null && qualifier == null && context.myUsedVarNames.contains(referenceExpression.getReferenceName())) {
    builder.append(referenceExpression.getReferenceName());
    return;
  }
  if (qualifier == null && (resolved == null || resolved instanceof GrReferenceExpression || resolved instanceof LightElement && !(resolved instanceof ClosureSyntheticParameter)) && (referenceExpression.getParent() instanceof GrIndexProperty || !(referenceExpression.getParent() instanceof GrCall)) && PsiUtil.getContextClass(referenceExpression) instanceof GroovyScriptClass) {
    final GrExpression thisExpr=factory.createExpressionFromText("this",referenceExpression);
    thisExpr.accept(this);
    builder.append(".getBinding().getProperty(\"").append(referenceExpression.getName()).append("\")");
    return;
  }
  final IElementType type=referenceExpression.getDotTokenType();
  GrExpression qualifierToUse=qualifier;
  if (type == mMEMBER_POINTER) {
    LOG.assertTrue(qualifier != null);
    builder.append("new ").append(GroovyCommonClassNames.ORG_CODEHAUS_GROOVY_RUNTIME_METHOD_CLOSURE).append('(');
    qualifier.accept(this);
    builder.append(", \"").append(referenceExpression.getReferenceName()).append("\")");
    return;
  }
  if (type == mOPTIONAL_DOT) {
    LOG.assertTrue(qualifier != null);
    String qualifierName=createVarByInitializer(qualifier);
    builder.append(qualifierName).append(" == null ? null : ");
    qualifierToUse=factory.createReferenceExpressionFromText(qualifierName,referenceExpression);
  }
  if (resolveResult.isInvokedOnProperty()) {
    LOG.assertTrue(resolved instanceof PsiMethod);
    LOG.assertTrue(GroovyPropertyUtils.isSimplePropertyGetter((PsiMethod)resolved));
    invokeMethodOn(((PsiMethod)resolved),qualifierToUse,GrExpression.EMPTY_ARRAY,GrNamedArgument.EMPTY_ARRAY,EMPTY_ARRAY,resolveResult.getSubstitutor(),referenceExpression);
  }
 else {
    if (qualifierToUse != null) {
      qualifierToUse.accept(this);
      builder.append('.');
    }
    if (resolved instanceof PsiNamedElement && !(resolved instanceof GrReferenceExpression)) {
      final String refName=((PsiNamedElement)resolved).getName();
      if (resolved instanceof GrVariable && context.analyzedVars.toWrap((GrVariable)resolved)) {
        builder.append(context.analyzedVars.toVarName((GrVariable)resolved));
        if (!PsiUtil.isAccessedForWriting(referenceExpression)) {
          builder.append(".get()");
        }
      }
 else {
        builder.append(refName);
      }
    }
 else {
      final String refName=referenceExpression.getReferenceName();
      if (refName != null) {
        if (PsiUtil.isAccessedForWriting(referenceExpression)) {
          builder.append(refName);
        }
 else {
          builder.append("getProperty(\"").append(refName).append("\")");
        }
      }
 else {
        final PsiElement nameElement=referenceExpression.getReferenceNameElement();
        if (nameElement instanceof GrExpression) {
          ((GrExpression)nameElement).accept(this);
        }
 else         if (nameElement != null) {
          builder.append(nameElement.toString());
        }
      }
    }
  }
}
