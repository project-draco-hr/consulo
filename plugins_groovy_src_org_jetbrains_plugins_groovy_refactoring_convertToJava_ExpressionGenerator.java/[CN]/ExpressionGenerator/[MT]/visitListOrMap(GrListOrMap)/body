{
  final PsiType type=listOrMap.getType();
  LOG.assertTrue(type instanceof GrLiteralClassType || type instanceof PsiArrayType);
  if (listOrMap.isMap()) {
    if (listOrMap.getNamedArguments().length == 0) {
      builder.append(" = new ");
      writeType(builder,type,listOrMap);
      builder.append("()");
    }
 else {
      String varName=generateMapVariableDeclaration(listOrMap,type);
      generateMapElementInsertions(listOrMap,varName);
      builder.append(varName);
    }
  }
 else {
    boolean isActuallyList=type instanceof GrTupleType;
    builder.append("new ");
    writeType(builder,type,listOrMap);
    if (isActuallyList) {
      builder.append("(java.util.Arrays.asList(");
    }
 else {
      builder.append('{');
    }
    genInitializers(listOrMap);
    if (isActuallyList) {
      builder.append("))");
    }
 else {
      builder.append('}');
    }
  }
}
