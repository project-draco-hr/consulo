{
  final GrExpression operand=(GrExpression)PsiUtil.skipParenthesesIfSensibly(typeCastExpression.getOperand(),false);
  final GrTypeElement typeElement=typeCastExpression.getCastTypeElement();
  if (operand instanceof GrListOrMap && ((GrListOrMap)operand).isMap() && typeElement != null) {
    AnonymousFromMapGenerator.writeAnonymousMap((GrListOrMap)operand,typeElement,builder,context);
    return;
  }
  if (operand instanceof GrListOrMap && !((GrListOrMap)operand).isMap() && typeElement instanceof GrArrayTypeElement) {
    builder.append("new ");
    writeType(builder,typeElement.getType(),typeCastExpression);
    builder.append('{');
    final GrExpression[] initializers=((GrListOrMap)operand).getInitializers();
    for (    GrExpression initializer : initializers) {
      initializer.accept(this);
      builder.append(", ");
    }
    if (initializers.length > 0) {
      builder.delete(builder.length() - 2,builder.length());
    }
    builder.append('}');
    return;
  }
  final GroovyResolveResult resolveResult=PsiImplUtil.extractUniqueResult(typeCastExpression.multiResolve(false));
  final PsiElement resolved=resolveResult.getElement();
  if (resolved instanceof PsiMethod) {
    final GrExpression typeParam=factory.createExpressionFromText(typeElement == null ? "null" : typeElement.getText());
    invokeMethodOn(((PsiMethod)resolved),operand,new GrExpression[]{typeParam},GrNamedArgument.EMPTY_ARRAY,EMPTY_ARRAY,resolveResult.getSubstitutor(),typeCastExpression);
  }
 else {
    generateCast(typeElement,operand);
  }
}
