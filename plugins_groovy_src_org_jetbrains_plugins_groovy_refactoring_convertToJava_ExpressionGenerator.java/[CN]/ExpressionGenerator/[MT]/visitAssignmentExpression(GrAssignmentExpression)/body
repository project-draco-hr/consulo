{
  final GrExpression lValue=expression.getLValue();
  GrExpression rValue=expression.getRValue();
  final IElementType token=expression.getOperationToken();
  boolean toWrap=false;
  PsiElement realLValue=PsiUtil.skipParentheses(lValue,false);
  if (realLValue instanceof GrReferenceExpression) {
    PsiElement resolved=((GrReferenceExpression)realLValue).resolve();
    if (resolved instanceof GrVariable && context.analyzedVars.toWrap((GrVariable)resolved))     toWrap=true;
  }
  StringBuilder curBuilder;
  ExpressionGenerator curGenerator;
  boolean doNeedExpression=toWrap && PsiUtil.resultOfExpressionUsed(expression);
  if (doNeedExpression) {
    curBuilder=new StringBuilder();
    curGenerator=new ExpressionGenerator(curBuilder,context);
  }
 else {
    curBuilder=builder;
    curGenerator=this;
  }
  lValue.accept(curGenerator);
  if (toWrap) {
    curBuilder.append(".set(");
  }
 else {
    curBuilder.append(" = ");
  }
  if (token == mASSIGN) {
    if (rValue != null) {
      rValue.accept(curGenerator);
    }
  }
 else {
    final GroovyResolveResult resolveResult=PsiImplUtil.extractUniqueResult(expression.multiResolve(false));
    final PsiElement resolved=resolveResult.getElement();
    if (resolved instanceof PsiMethod && !shouldNotReplaceOperatorWithMethod(lValue.getType(),rValue,expression.getOperationToken())) {
      if (rValue == null) {
        rValue=factory.createExpressionFromText("null");
      }
      curGenerator.invokeMethodOn(((PsiMethod)resolved),(GrExpression)lValue.copy(),new GrExpression[]{rValue},GrNamedArgument.EMPTY_ARRAY,GrClosableBlock.EMPTY_ARRAY,resolveResult.getSubstitutor(),expression);
    }
 else {
      if (toWrap) {
        GrBinaryExpression bin=(GrBinaryExpression)factory.createExpressionFromText("a" + expression.getOpToken().getText().charAt(0) + "b",expression);
        GrExpression newLValue=(GrExpression)bin.getLeftOperand().replace(lValue);
        GrExpression newRValue=rValue == null ? null : (GrExpression)bin.getRightOperand().replace(rValue);
        curGenerator.writeSimpleBinaryExpression(bin.getOperationToken(),newLValue,newRValue);
      }
 else {
        curGenerator.writeSimpleBinaryExpression(expression.getOpToken(),lValue,rValue);
      }
    }
  }
  if (toWrap) {
    curBuilder.append(')');
    if (doNeedExpression) {
      curBuilder.append(';');
      context.myStatements.add(curBuilder.toString());
      lValue.accept(this);
      builder.append(".get()");
    }
  }
}
