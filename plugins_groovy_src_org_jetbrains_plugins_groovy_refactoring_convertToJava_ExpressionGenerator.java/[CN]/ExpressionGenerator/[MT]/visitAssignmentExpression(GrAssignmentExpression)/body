{
  final GrExpression lValue=expression.getLValue();
  final GrExpression rValue=expression.getRValue();
  final IElementType token=expression.getOperationTokenType();
  PsiElement realLValue=PsiUtil.skipParentheses(lValue,false);
  if (realLValue instanceof GrReferenceExpression && rValue != null) {
    GroovyResolveResult resolveResult=((GrReferenceExpression)realLValue).advancedResolve();
    PsiElement resolved=resolveResult.getElement();
    if (resolved instanceof GrVariable && context.analyzedVars.toWrap((GrVariable)resolved)) {
      writeAssignmentWithRefSetter((GrExpression)realLValue,expression);
      return;
    }
 else     if (resolved instanceof PsiMethod && resolveResult.isInvokedOnProperty()) {
      writeAssignmentWithSetter(((GrReferenceExpression)realLValue).getQualifier(),(PsiMethod)resolved,expression);
      return;
    }
 else     if (resolved == null || resolved instanceof GrBindingVariable) {
      final GrExpression qualifier=((GrReferenceExpression)realLValue).getQualifier();
      final PsiType type=GrReferenceResolveUtil.getQualifierType((GrReferenceExpression)realLValue);
      final GrExpression[] args={factory.createExpressionFromText("\"" + ((GrReferenceExpression)realLValue).getReferenceName() + "\""),getRValue(expression)};
      GroovyResolveResult[] candidates=type != null ? ResolveUtil.getMethodCandidates(type,"setProperty",expression,args[0].getType(),args[1].getType()) : GroovyResolveResult.EMPTY_ARRAY;
      final PsiMethod method=PsiImplUtil.extractUniqueElement(candidates);
      if (method != null) {
        writeAssignmentWithSetter(qualifier,method,args,GrNamedArgument.EMPTY_ARRAY,EMPTY_ARRAY,PsiSubstitutor.EMPTY,expression);
        return;
      }
    }
  }
 else   if (realLValue instanceof GrIndexProperty) {
    final GroovyResolveResult result=PsiImplUtil.extractUniqueResult(((GrIndexProperty)realLValue).multiResolve(false));
    final PsiElement resolved=result.getElement();
    if (resolved instanceof PsiMethod) {
      final GrExpression[] args=((GrIndexProperty)realLValue).getArgumentList().getExpressionArguments();
      writeAssignmentWithSetter(((GrIndexProperty)realLValue).getInvokedExpression(),(PsiMethod)resolved,ArrayUtil.append(args,getRValue(expression)),GrNamedArgument.EMPTY_ARRAY,EMPTY_ARRAY,result.getSubstitutor(),expression);
      return;
    }
  }
  final PsiType lType=getDeclaredType(lValue,context);
  if (token == mASSIGN) {
    lValue.accept(this);
    builder.append(" = ");
    if (rValue != null) {
      final PsiType rType=getDeclaredType(rValue,context);
      wrapInCastIfNeeded(builder,getNotNullType(expression,lType),rType,expression,context,new StatementWriter(){
        @Override public void writeStatement(        StringBuilder builder,        ExpressionContext context){
          rValue.accept(ExpressionGenerator.this);
        }
      }
);
    }
  }
 else {
    final GroovyResolveResult resolveResult=PsiImplUtil.extractUniqueResult(expression.multiResolve(false));
    final PsiElement resolved=resolveResult.getElement();
    if (resolved instanceof PsiMethod && !shouldNotReplaceOperatorWithMethod(lValue.getType(),rValue,expression.getOperationTokenType())) {
      lValue.accept(this);
      builder.append(" = ");
      final PsiType rType=getDeclaredType((PsiMethod)resolved,resolveResult.getSubstitutor(),context);
      wrapInCastIfNeeded(builder,getNotNullType(expression,lType),rType,expression,context,new StatementWriter(){
        @Override public void writeStatement(        StringBuilder builder,        ExpressionContext context){
          invokeMethodOn(((PsiMethod)resolved),(GrExpression)lValue.copy(),rValue == null ? GrExpression.EMPTY_ARRAY : new GrExpression[]{rValue},GrNamedArgument.EMPTY_ARRAY,EMPTY_ARRAY,resolveResult.getSubstitutor(),expression);
        }
      }
);
    }
 else {
      writeSimpleBinaryExpression(expression.getOperationToken(),lValue,rValue);
    }
  }
}
