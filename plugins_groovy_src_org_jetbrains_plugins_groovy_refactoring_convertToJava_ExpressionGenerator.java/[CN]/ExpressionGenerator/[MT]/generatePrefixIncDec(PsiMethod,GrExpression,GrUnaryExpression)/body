{
  if (!(operand instanceof GrReferenceExpression))   return false;
  final GrExpression qualifier=((GrReferenceExpression)operand).getQualifier();
  final GroovyResolveResult resolveResult=((GrReferenceExpression)operand).advancedResolve();
  final PsiElement resolved=resolveResult.getElement();
  if (resolved instanceof PsiMethod && GroovyPropertyUtils.isSimplePropertyGetter((PsiMethod)resolved)) {
    final PsiMethod getter=(PsiMethod)resolved;
    final String propertyName=GroovyPropertyUtils.getPropertyNameByGetter(getter);
    final PsiType type;
    if (qualifier == null) {
      type=null;
    }
 else {
      type=qualifier.getType();
      if (type == null)       return false;
    }
    final PsiMethod setter=GroovyPropertyUtils.findPropertySetter(type,propertyName,unary);
    if (setter == null)     return false;
    final ExpressionGenerator generator=new ExpressionGenerator(new StringBuilder(),context);
    generator.invokeMethodOn(method,operand,GrExpression.EMPTY_ARRAY,GrNamedArgument.EMPTY_ARRAY,GrClosableBlock.EMPTY_ARRAY,resolveResult.getSubstitutor(),unary);
    final GrExpression fromText=factory.createExpressionFromText(generator.toString(),unary);
    invokeMethodOn(setter,qualifier,new GrExpression[]{fromText},GrNamedArgument.EMPTY_ARRAY,GrClosableBlock.EMPTY_ARRAY,resolveResult.getSubstitutor(),unary);
  }
 else   if (resolved instanceof PsiVariable) {
    PsiElement parent=unary.getParent();
    boolean addParentheses=!(parent instanceof GrControlStatement || parent instanceof GrStatementOwner || parent instanceof GrArgumentList|| parent instanceof GrParenthesizedExpression);
    if (addParentheses) {
      builder.append('(');
    }
    boolean wrap=context.analyzedVars.toWrap((GrVariable)resolved);
    if (wrap) {
      operand.accept(this);
      builder.append(".set(");
    }
 else {
      operand.accept(this);
      builder.append(" = ");
    }
    invokeMethodOn(method,(GrExpression)operand.copy(),GrExpression.EMPTY_ARRAY,GrNamedArgument.EMPTY_ARRAY,GrClosableBlock.EMPTY_ARRAY,resolveResult.getSubstitutor(),unary);
    if (wrap) {
      builder.append(')');
    }
    if (addParentheses) {
      builder.append(')');
    }
  }
  return true;
}
