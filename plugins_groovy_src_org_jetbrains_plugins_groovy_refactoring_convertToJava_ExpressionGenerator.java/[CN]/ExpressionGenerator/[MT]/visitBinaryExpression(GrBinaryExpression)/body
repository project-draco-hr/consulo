{
  final GrExpression left=expression.getLeftOperand();
  GrExpression right=expression.getRightOperand();
  final PsiType ltype=left.getType();
  final PsiElement token=expression.getOperationToken();
  final IElementType op=expression.getOperationTokenType();
  if (op == mREGEX_FIND) {
    builder.append(GroovyCommonClassNames.JAVA_UTIL_REGEX_PATTERN).append(".compile(");
    if (right != null) {
      right.accept(this);
    }
    builder.append(").matcher(");
    left.accept(this);
    builder.append(")");
    return;
  }
  if (op == mREGEX_MATCH) {
    builder.append(GroovyCommonClassNames.JAVA_UTIL_REGEX_PATTERN).append(".matches(");
    if (right != null) {
      right.accept(this);
    }
    builder.append(", ");
    left.accept(this);
    builder.append(')');
    return;
  }
  if (GenerationSettings.dontReplaceOperatorsWithMethodsForNumbers && (TypesUtil.isNumericType(ltype) && (right == null || TypesUtil.isNumericType(right.getType())) || op == mPLUS && ltype != null && TypesUtil.typeEqualsToText(ltype,CommonClassNames.JAVA_LANG_STRING))) {
    writeSimpleBinaryExpression(token,left,right);
    return;
  }
  final GroovyResolveResult resolveResult=PsiImplUtil.extractUniqueResult(expression.multiResolve(false));
  final PsiElement resolved=resolveResult.getElement();
  if (resolved instanceof PsiMethod) {
    if (right == null) {
      right=factory.createExpressionFromText("null");
    }
    invokeMethodOn(((PsiMethod)resolved),left,new GrExpression[]{right},GrNamedArgument.EMPTY_ARRAY,GrClosableBlock.EMPTY_ARRAY,resolveResult.getSubstitutor(),expression);
    if (op == mGE)     builder.append(" >= 0");
 else     if (op == mGT)     builder.append(" > 0");
 else     if (op == mLT)     builder.append(" < 0");
 else     if (op == mLE)     builder.append(" <= 0");
  }
 else {
    writeSimpleBinaryExpression(token,left,right);
  }
}
