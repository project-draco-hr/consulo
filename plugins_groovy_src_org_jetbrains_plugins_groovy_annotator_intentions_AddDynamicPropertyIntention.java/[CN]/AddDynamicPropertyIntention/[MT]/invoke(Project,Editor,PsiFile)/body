{
  PsiElement dynamicValueTypeDefinition;
  final DynamicPropertiesManager dynamicPropertiesManager=DynamicPropertiesManager.getInstance(project);
  Module module=ProjectRootManager.getInstance(project).getFileIndex().getModuleForFile(myReferenceExpression.getContainingFile().getVirtualFile());
  if (myReferenceExpression.isQualified()) {
    final PsiReference qualifierReference=myReferenceExpression.getQualifierExpression().getReference();
    if (qualifierReference == null)     return;
    dynamicValueTypeDefinition=qualifierReference.resolve();
    if (!(dynamicValueTypeDefinition instanceof PsiClass))     return;
  }
 else {
    PsiElement refParent=myReferenceExpression.getParent();
    while (refParent != null && !(refParent instanceof GroovyFileBase)) {
      refParent=refParent.getParent();
    }
    if (refParent == null)     return;
    dynamicValueTypeDefinition=((GroovyFileBase)refParent).getScriptClass();
  }
  dynamicPropertiesManager.addDynamicProperty(new DynamicPropertyBase(myReferenceExpression.getName(),((PsiClass)dynamicValueTypeDefinition).getQualifiedName(),module.getName()));
}
