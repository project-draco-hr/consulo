{
  setRepositoryPath(new File(myDir,"/repo").getPath());
  updateSettingsXml("<localRepository>" + getRepositoryPath() + "</localRepository>");
  VirtualFile bom=createModulePom("bom","<groupId>test</groupId>" + "<artifactId>bom</artifactId>" + "<packaging>pom</packaging>"+ "<version>1</version>"+ "<dependencyManagement>"+ "  <dependencies>"+ "    <dependency>"+ "      <groupId>junit</groupId>"+ "      <artifactId>junit</artifactId>"+ "      <version>4.0</version>"+ "    </dependency>"+ "  </dependencies>"+ "</dependencyManagement>");
  VirtualFile project=createModulePom("project","<groupId>test</groupId>" + "<artifactId>project</artifactId>" + "<version>1</version>"+ "<dependencyManagement>"+ "  <dependencies>"+ "    <dependency>"+ "      <groupId>test</groupId>"+ "      <artifactId>bom</artifactId>"+ "      <version>1</version>"+ "      <type>pom</type>"+ "      <scope>import</scope>"+ "    </dependency>"+ "  </dependencies>"+ "</dependencyManagement>"+ "<dependencies>"+ "  <dependency>"+ "    <groupId>junit</groupId>"+ "    <artifactId>junit</artifactId>"+ "  </dependency>"+ "</dependencies>");
  importProjects(bom,project);
  assertModules("bom","project");
  myProjectsManager.getEmbeddersManagerInTests().reset();
  myProjectsManager.scheduleResolveInTests(Arrays.asList(myProjectsManager.findProject(bom),myProjectsManager.findProject(project)));
  myProjectsManager.waitForResolvingCompletion();
  assertTrue(myProjectsManager.findProject(project).hasErrors());
  assertModuleLibDeps("project");
}
