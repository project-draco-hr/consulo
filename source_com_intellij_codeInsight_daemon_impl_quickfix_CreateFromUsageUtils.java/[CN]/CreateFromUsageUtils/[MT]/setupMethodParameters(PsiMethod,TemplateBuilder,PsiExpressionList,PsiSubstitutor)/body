{
  if (argumentList == null)   return;
  PsiManager psiManager=method.getManager();
  PsiElementFactory factory=psiManager.getElementFactory();
  PsiParameterList parameterList=method.getParameterList();
  PsiExpression[] args=argumentList.getExpressions();
  GlobalSearchScope resolveScope=method.getResolveScope();
  GuessTypeParameters guesser=new GuessTypeParameters(argumentList.getManager().getElementFactory());
  for (int i=0; i < args.length; i++) {
    PsiExpression arg=args[i];
    SuggestedNameInfo suggestedInfo=CodeStyleManager.getInstance(psiManager.getProject()).suggestVariableName(VariableKind.PARAMETER,null,arg,null);
    String[] names=suggestedInfo.names;
    if (names.length == 0) {
      names=new String[]{"p" + i};
    }
    PsiType argType=arg.getType();
    if (argType == null || argType == PsiType.NULL) {
      argType=PsiType.getJavaLangObject(psiManager,resolveScope);
    }
    PsiParameter parameter=factory.createParameter(names[0],argType);
    parameter=(PsiParameter)parameterList.add(parameter);
    ExpectedTypeInfo info=ExpectedTypesProvider.getInstance(psiManager.getProject()).createInfo(argType,ExpectedTypeInfo.TYPE_OR_SUPERTYPE,argType,TailType.NONE);
    PsiElement context=PsiTreeUtil.getParentOfType(argumentList,new Class[]{PsiClass.class,PsiMethod.class});
    guesser.setupTypeElement(parameter.getTypeElement(),new ExpectedTypeInfo[]{info},substitutor,builder,context,method.getContainingClass());
    Expression expression=new ParameterNameExpression(names);
    builder.replaceElement(parameter.getNameIdentifier(),expression);
  }
}
