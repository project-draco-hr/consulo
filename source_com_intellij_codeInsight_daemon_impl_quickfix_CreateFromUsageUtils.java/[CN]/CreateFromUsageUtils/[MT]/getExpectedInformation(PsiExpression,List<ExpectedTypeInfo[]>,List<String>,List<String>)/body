{
  Class[] scopes=new Class[]{PsiMethod.class,PsiClassInitializer.class,PsiClass.class,PsiField.class,PsiFile.class};
  PsiExpression[] expressions=collectExpressions(expression,scopes);
  for (int i=0; i < expressions.length; i++) {
    PsiExpression expr=expressions[i];
    PsiElement parent=expr.getParent();
    if (parent instanceof PsiReferenceExpression) {
      PsiElement pparent=parent.getParent();
      if (pparent instanceof PsiMethodCallExpression) {
        String refName=((PsiReferenceExpression)parent).getReferenceName();
        if (refName != null) {
          expectedMethodNames.add(refName);
        }
      }
 else       if (pparent instanceof PsiReferenceExpression || pparent instanceof PsiVariable || pparent instanceof PsiExpression) {
        String refName=((PsiReferenceExpression)parent).getReferenceName();
        if (refName != null) {
          expectedFieldNames.add(refName);
        }
      }
    }
 else {
      ExpectedTypeInfo[] someExpectedTypes=ExpectedTypesProvider.getInstance(expression.getProject()).getExpectedTypes(expr,false);
      if (someExpectedTypes.length > 0) {
        types.add(someExpectedTypes);
      }
    }
  }
}
