{
  final PsiManager manager=expression.getManager();
  final GlobalSearchScope resolveScope=expression.getResolveScope();
  ExpectedTypesProvider provider=ExpectedTypesProvider.getInstance(manager.getProject());
  List<ExpectedTypeInfo[]> typesList=new ArrayList<ExpectedTypeInfo[]>();
  final List<String> expectedMethodNames=new ArrayList<String>();
  final List<String> expectedFieldNames=new ArrayList<String>();
  getExpectedInformation(expression,typesList,expectedMethodNames,expectedFieldNames);
  if (typesList.size() == 1 && (expectedFieldNames.size() > 0 || expectedMethodNames.size() > 0)) {
    ExpectedTypeInfo[] infos=typesList.get(0);
    if (infos.length == 1 && infos[0].getKind() == ExpectedTypeInfo.TYPE_OR_SUBTYPE && infos[0].getType().equals(PsiType.getJavaLangObject(manager,resolveScope))) {
      typesList.clear();
    }
  }
  if (typesList.size() == 0) {
    PsiElementFactory factory=manager.getElementFactory();
    for (Iterator<String> iterator=expectedFieldNames.iterator(); iterator.hasNext(); ) {
      String fieldName=iterator.next();
      PsiField[] fields=manager.getShortNamesCache().getFieldsByName(fieldName,resolveScope);
      addMemberInfo(fields,expression,typesList,factory);
    }
    for (Iterator<String> iterator=expectedMethodNames.iterator(); iterator.hasNext(); ) {
      String methodName=iterator.next();
      PsiMethod[] methods=manager.getShortNamesCache().getMethodsByName(methodName,resolveScope);
      addMemberInfo(methods,expression,typesList,factory);
    }
  }
  ExpectedTypeInfo[] expectedTypes=ExpectedTypeUtil.intersect(typesList);
  if (expectedTypes.length == 0 && !typesList.isEmpty()) {
    List<ExpectedTypeInfo> union=new ArrayList<ExpectedTypeInfo>();
    for (Iterator<ExpectedTypeInfo[]> i=typesList.iterator(); i.hasNext(); ) {
      union.addAll(Arrays.asList((ExpectedTypeInfo[])i.next()));
    }
    expectedTypes=union.toArray(new ExpectedTypeInfo[union.size()]);
  }
  if (expectedTypes == null || expectedTypes.length == 0) {
    PsiType t=allowVoidType ? PsiType.VOID : PsiType.getJavaLangObject(manager,resolveScope);
    expectedTypes=new ExpectedTypeInfo[]{provider.createInfo(t,ExpectedTypeInfo.TYPE_STRICTLY,t,TailType.NONE)};
  }
  return expectedTypes;
}
