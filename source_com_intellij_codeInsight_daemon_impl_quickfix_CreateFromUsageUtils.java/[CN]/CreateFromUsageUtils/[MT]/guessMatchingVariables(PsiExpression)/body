{
  List<ExpectedTypeInfo[]> typesList=new ArrayList<ExpectedTypeInfo[]>();
  final List<String> expectedMethodNames=new ArrayList<String>();
  final List<String> expectedFieldNames=new ArrayList<String>();
  getExpectedInformation(expression,typesList,expectedMethodNames,expectedFieldNames);
  final List<PsiVariable> list=new ArrayList<PsiVariable>();
  VariablesProcessor varproc=new VariablesProcessor("",true,list){
    public boolean execute(    PsiElement element,    PsiSubstitutor substitutor){
      if (!(element instanceof PsiField) || element.getManager().getResolveHelper().isAccessible(((PsiField)element),expression,null)) {
        return super.execute(element,substitutor);
      }
      return true;
    }
  }
;
  PsiScopesUtil.treeWalkUp(varproc,expression,null);
  PsiVariable[] allVars=varproc.getResultsAsArray();
  ExpectedTypeInfo[] infos=ExpectedTypeUtil.intersect(typesList);
  final List<PsiVariable> result=new ArrayList<PsiVariable>();
  nextVar:   for (int i=0; i < allVars.length; i++) {
    PsiVariable variable=allVars[i];
    PsiType varType=variable.getType();
    if (!(varType instanceof PsiClassType))     continue;
    PsiClass aClass=((PsiClassType)varType).resolve();
    if (aClass == null)     continue;
    boolean matched=infos.length == 0;
    for (int j=0; j < infos.length; j++) {
      if (ExpectedTypeUtil.matches(varType,infos[j])) {
        matched=true;
        break;
      }
      ;
    }
    if (matched) {
      for (Iterator<String> iterator=expectedFieldNames.iterator(); iterator.hasNext(); ) {
        String name=iterator.next();
        if (aClass.findFieldByName(name,true) == null)         continue nextVar;
      }
      for (Iterator<String> iterator=expectedMethodNames.iterator(); iterator.hasNext(); ) {
        String name=iterator.next();
        PsiMethod[] methods=aClass.findMethodsByName(name,true);
        if (methods == null || methods.length == 0)         continue nextVar;
      }
      result.add(variable);
    }
  }
  return result.toArray(new PsiVariable[result.size()]);
}
