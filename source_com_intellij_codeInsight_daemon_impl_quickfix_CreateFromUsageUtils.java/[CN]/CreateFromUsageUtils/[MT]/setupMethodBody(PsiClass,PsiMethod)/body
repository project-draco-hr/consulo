{
  final PsiType returnType=method.getReturnType() != null ? method.getReturnType() : PsiType.VOID;
  final PsiElementFactory factory=method.getManager().getElementFactory();
  LOG.assertTrue(!targetClass.isInterface(),"Interface bodies should be already set up");
  FileTemplate template=FileTemplateManager.getInstance().getCodeTemplate(FileTemplateManager.TEMPLATE_FROM_USAGE_METHOD_BODY);
  FileType fileType=FileTypeManager.getInstance().getFileTypeByExtension(template.getExtension());
  Properties properties=new Properties();
  properties.setProperty(FileTemplate.ATTRIBUTE_RETURN_TYPE,returnType.getPresentableText());
  properties.setProperty(FileTemplate.ATTRIBUTE_DEFAULT_RETURN_VALUE,CodeInsightUtil.getDefaultValueOfType(returnType));
  FileTemplateUtil.setClassAndMethodNameProperties(properties,targetClass,method);
  String methodText;
  CodeStyleManager csManager=CodeStyleManager.getInstance(method.getProject());
  try {
    String bodyText=template.getText(properties);
    if (!"".equals(bodyText))     bodyText+="\n";
    methodText=returnType.getPresentableText() + " foo () {\n" + bodyText+ "}";
    methodText=FileTemplateUtil.indent(methodText,method.getProject(),fileType);
  }
 catch (  Exception e) {
    throw new IncorrectOperationException("Failed to parse file template");
  }
  if (methodText != null) {
    PsiMethod m;
    try {
      m=factory.createMethodFromText(methodText,targetClass);
    }
 catch (    IncorrectOperationException e) {
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          Messages.showErrorDialog("Please Correct \"New Method Body\" Template","File Template Error");
        }
      }
);
      return;
    }
    method.getBody().replace(m.getBody());
    csManager.reformat(method);
  }
}
