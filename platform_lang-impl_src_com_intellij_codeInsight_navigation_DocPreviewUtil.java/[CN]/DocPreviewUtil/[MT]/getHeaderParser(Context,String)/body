{
  return new AbstractCallback(context,false){
    private boolean myStop;
    @Override public boolean onOpenTag(    @NotNull String name,    @NotNull String text){
      return !myStop && super.onOpenTag(name,text);
    }
    @Override public boolean onText(    @NotNull String text){
      boolean addLf=false;
      for (      String s : text.split("\n")) {
        if (addLf) {
          newLine();
        }
 else {
          addLf=true;
        }
        if (s.length() <= 0) {
          continue;
        }
        if (!header.contains(s) && s.startsWith("java.lang.")) {
          s=s.substring("java.lang.".length());
        }
        if (myStop || !header.contains(s)) {
          return false;
        }
        if (header.endsWith(s)) {
          myStop=true;
        }
        addText(s);
      }
      if (text.endsWith("\n")) {
        newLine();
      }
      return true;
    }
    @Override protected boolean canBreakBeforeText(    @NotNull String text){
      return !text.startsWith("&gt;") && !text.startsWith(",");
    }
  }
;
}
