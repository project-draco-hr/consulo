{
  final String subDirName=inputString;
  if (subDirName.length() == 0) {
    Messages.showMessageDialog(myProject,IdeBundle.message("error.name.should.be.specified"),CommonBundle.getErrorTitle(),Messages.getErrorIcon());
    return false;
  }
  final boolean multiCreation=!myIsDirectory && subDirName.indexOf('.') != -1;
  if (!multiCreation) {
    try {
      myDirectory.checkCreateSubdirectory(subDirName);
    }
 catch (    IncorrectOperationException ex) {
      Messages.showMessageDialog(myProject,CreateElementActionBase.filterMessage(ex.getMessage()),CommonBundle.getErrorTitle(),Messages.getErrorIcon());
      return false;
    }
  }
  Runnable command=new Runnable(){
    public void run(){
      final Runnable run=new Runnable(){
        public void run(){
          LvcsAction lvcsAction=LvcsAction.EMPTY;
          try {
            String actionName=myIsDirectory ? IdeBundle.message("progress.creating.directory",myDirectory.getVirtualFile().getPresentableUrl(),File.separator,subDirName) : IdeBundle.message("progress.creating.package",myDirectory.getPackage().getQualifiedName(),subDirName);
            String directoryPath=myDirectory.getVirtualFile().getPath() + "/" + subDirName;
            lvcsAction=LocalVcs.getInstance(myProject).startAction(actionName,directoryPath,false);
            final PsiDirectory createdDir;
            if (myIsDirectory) {
              createdDir=myDirectory.createSubdirectory(subDirName);
            }
 else {
              StringTokenizer tokenizer=new StringTokenizer(subDirName,".");
              PsiDirectory dir=myDirectory;
              while (tokenizer.hasMoreTokens()) {
                String packName=tokenizer.nextToken();
                if (tokenizer.hasMoreTokens()) {
                  PsiDirectory existingDir=dir.findSubdirectory(packName);
                  if (existingDir != null) {
                    dir=existingDir;
                    continue;
                  }
                }
                dir=dir.createSubdirectory(packName);
              }
              createdDir=dir;
            }
            myCreatedElement=createdDir;
          }
 catch (          final IncorrectOperationException ex) {
            ApplicationManager.getApplication().invokeLater(new Runnable(){
              public void run(){
                Messages.showMessageDialog(myProject,CreateElementActionBase.filterMessage(ex.getMessage()),CommonBundle.getErrorTitle(),Messages.getErrorIcon());
              }
            }
);
            return;
          }
 finally {
            lvcsAction.finish();
          }
        }
      }
;
      ApplicationManager.getApplication().runWriteAction(run);
    }
  }
;
  CommandProcessor.getInstance().executeCommand(myProject,command,myIsDirectory ? IdeBundle.message("command.create.directory") : IdeBundle.message("command.create.package"),null);
  return myCreatedElement != null;
}
