{
  final AnalysisScope scope=new AnalysisScope(project);
  final InspectionManagerEx managerEx=((InspectionManagerEx)InspectionManagerEx.getInstance(project));
  final GlobalInspectionContextImpl inspectionContext=managerEx.createNewGlobalContext(false);
  final InspectionProfile inspectionProfile;
  final Profile profile=profileName != null ? InspectionProjectProfileManager.getInstance(project).getProfile(profileName) : null;
  if (profile != null) {
    inspectionProfile=(InspectionProfile)profile;
  }
 else {
    inspectionProfile=new InspectionProfileImpl("Server Side"){
      public boolean isToolEnabled(      final HighlightDisplayKey key){
        return resMap.containsKey(key.toString());
      }
      public HighlightDisplayLevel getErrorLevel(      final HighlightDisplayKey key){
        return ((InspectionProfile)InspectionProfileManager.getInstance().getRootProfile()).getErrorLevel(key);
      }
    }
;
  }
  inspectionContext.setExternalProfile(inspectionProfile);
  inspectionContext.setCurrentScope(scope);
  inspectionContext.initializeTools(scope,new HashMap<String,Set<InspectionTool>>(),new HashMap<String,Set<InspectionTool>>());
  final InspectionResultsView view=new InspectionResultsView(project,inspectionProfile,scope,inspectionContext,new OfflineInspectionRVContentProvider(resMap,project));
  ((RefManagerImpl)inspectionContext.getRefManager()).inspectionReadActionStarted();
  view.update();
  TreeUtil.selectFirstNode(view.getTree());
  inspectionContext.addView(view,InspectionsBundle.message("offline.view.title") + " (" + (profileName != null ? profileName : InspectionsBundle.message("offline.view.editor.settings.title"))+ ")");
}
