{
  final Project project=event.getData(DataKeys.PROJECT);
  final VirtualFile[] virtualFiles=FileChooser.chooseFiles(project,BrowseFilesListener.SINGLE_DIRECTORY_DESCRIPTOR);
  if (virtualFiles == null || virtualFiles.length == 0)   return;
  if (!virtualFiles[0].isDirectory())   return;
  final Map<String,Map<String,Set<OfflineProblemDescriptor>>> resMap=new HashMap<String,Map<String,Set<OfflineProblemDescriptor>>>();
  final VirtualFile[] files=virtualFiles[0].getChildren();
  for (  VirtualFile inspectionFile : files) {
    resMap.put(inspectionFile.getNameWithoutExtension(),OfflineViewParseUtil.parse(LoadTextUtil.loadText(inspectionFile).toString()));
  }
  final AnalysisScope scope=new AnalysisScope(project);
  final InspectionManagerEx managerEx=((InspectionManagerEx)InspectionManagerEx.getInstance(project));
  final GlobalInspectionContextImpl inspectionContext=managerEx.createNewGlobalContext(false);
  final InspectionProfile inspectionProfile;
  String profileName="";
  final Profile profile=InspectionProjectProfileManager.getInstance(project).getProfile(profileName);
  if (profile != null) {
    inspectionProfile=(InspectionProfile)profile;
  }
 else {
    inspectionProfile=new InspectionProfileImpl("Server Side"){
      public boolean isToolEnabled(      final HighlightDisplayKey key){
        return resMap.containsKey(key.toString());
      }
      public HighlightDisplayLevel getErrorLevel(      final HighlightDisplayKey key){
        return ((InspectionProfile)InspectionProfileManager.getInstance().getRootProfile()).getErrorLevel(key);
      }
    }
;
  }
  inspectionContext.setExternalProfile(inspectionProfile);
  inspectionContext.setCurrentScope(scope);
  inspectionContext.initializeTools(scope,new HashMap<String,Set<InspectionTool>>(),new HashMap<String,Set<InspectionTool>>());
  final InspectionResultsView view=new InspectionResultsView(project,inspectionProfile,scope,inspectionContext,new OfflineInspectionRVContentProvider(resMap,project));
  ((RefManagerImpl)inspectionContext.getRefManager()).inspectionReadActionStarted();
  view.update();
  TreeUtil.selectFirstNode(view.getTree());
  inspectionContext.addView(view,"Offline View");
}
