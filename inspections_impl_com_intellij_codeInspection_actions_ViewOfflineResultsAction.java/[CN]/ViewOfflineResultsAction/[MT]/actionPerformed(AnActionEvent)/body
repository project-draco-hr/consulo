{
  final Project project=event.getData(DataKeys.PROJECT);
  final VirtualFile[] virtualFiles=FileChooser.chooseFiles(project,BrowseFilesListener.SINGLE_DIRECTORY_DESCRIPTOR);
  if (virtualFiles == null || virtualFiles.length == 0)   return;
  if (!virtualFiles[0].isDirectory())   return;
  final Map<String,Map<String,List<OfflineProblemDescriptor>>> resMap=new HashMap<String,Map<String,List<OfflineProblemDescriptor>>>();
  final VirtualFile[] files=virtualFiles[0].getChildren();
  for (  VirtualFile inspectionFile : files) {
    resMap.put(inspectionFile.getNameWithoutExtension(),OfflineViewParseUtil.parse(LoadTextUtil.loadText(inspectionFile).toString()));
  }
  final AnalysisScope scope=new AnalysisScope(project);
  final InspectionManagerEx managerEx=((InspectionManagerEx)InspectionManagerEx.getInstance(project));
  final GlobalInspectionContextImpl inspectionContext=managerEx.createNewGlobalContext(false);
  InspectionProfile inspectionProfile=null;
  String profileName=null;
  if (profileName != null) {
    final Profile profile=InspectionProjectProfileManager.getInstance(project).getProfile(profileName);
    if (profile != null) {
      inspectionProfile=(InspectionProfile)profile;
    }
 else {
      inspectionProfile=new InspectionProfileImpl("Server Side Profile"){
        public boolean isToolEnabled(        final HighlightDisplayKey key){
          return resMap.containsKey(key.toString());
        }
        public HighlightDisplayLevel getErrorLevel(        final HighlightDisplayKey key){
          return ((InspectionProfile)InspectionProfileManager.getInstance().getRootProfile()).getErrorLevel(key);
        }
      }
;
    }
    inspectionContext.setExternalProfile(inspectionProfile);
  }
 else {
    inspectionContext.RUN_WITH_EDITOR_PROFILE=true;
  }
  inspectionContext.setCurrentScope(scope);
  inspectionContext.initializeTools(scope,new HashMap<String,Set<InspectionTool>>(),new HashMap<String,Set<InspectionTool>>());
  final InspectionResultsView view=new InspectionResultsView(project,inspectionProfile,scope,inspectionContext,new OfflineInspectionResultsViewProvider(resMap));
  ((RefManagerImpl)inspectionContext.getRefManager()).inspectionReadActionStarted();
  view.buildTreeAndSort();
  TreeUtil.selectFirstNode(view.getTree());
  inspectionContext.addView(view,"Offline View" + (profileName != null ? " of " + profileName : ""));
}
