{
  final Project project=event.getData(DataKeys.PROJECT);
  final VirtualFile[] virtualFiles=FileChooser.chooseFiles(project,BrowseFilesListener.SINGLE_DIRECTORY_DESCRIPTOR);
  if (virtualFiles == null || virtualFiles.length == 0)   return;
  if (!virtualFiles[0].isDirectory())   return;
  final Map<String,Map<String,Set<OfflineProblemDescriptor>>> resMap=new HashMap<String,Map<String,Set<OfflineProblemDescriptor>>>();
  final VirtualFile[] files=virtualFiles[0].getChildren();
  String profileName=null;
  try {
    for (    VirtualFile inspectionFile : files) {
      if (inspectionFile.isDirectory())       continue;
      final String shortName=inspectionFile.getNameWithoutExtension();
      if (shortName.equals(InspectionApplication.DESCRIPTIONS)) {
        profileName=OfflineViewParseUtil.parseProfileName(LoadTextUtil.loadText(inspectionFile).toString());
      }
 else       if (inspectionFile.getFileType() instanceof XmlFileType) {
        resMap.put(shortName,OfflineViewParseUtil.parse(LoadTextUtil.loadText(inspectionFile).toString()));
      }
    }
  }
 catch (  Exception e) {
    Messages.showInfoMessage(e.getMessage(),InspectionsBundle.message("offline.view.parse.exception.title"));
    return;
  }
  showOfflineView(project,profileName,resMap);
}
