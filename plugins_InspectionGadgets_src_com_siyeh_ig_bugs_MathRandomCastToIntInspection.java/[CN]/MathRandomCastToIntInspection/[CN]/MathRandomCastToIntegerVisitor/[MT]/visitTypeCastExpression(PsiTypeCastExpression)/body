{
  super.visitTypeCastExpression(expression);
  final PsiExpression operand=expression.getOperand();
  if (!(operand instanceof PsiMethodCallExpression)) {
    return;
  }
  final PsiTypeElement castType=expression.getCastType();
  if (castType == null) {
    return;
  }
  final PsiType type=castType.getType();
  if (!PsiType.INT.equals(type)) {
    return;
  }
  final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)operand;
  final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
  @NonNls final String referenceName=methodExpression.getReferenceName();
  if (!"random".equals(referenceName)) {
    return;
  }
  final PsiMethod method=methodCallExpression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiClass containingClass=method.getContainingClass();
  if (containingClass == null) {
    return;
  }
  final String qualifiedName=containingClass.getQualifiedName();
  if (!"java.lang.Math".equals(qualifiedName)) {
    return;
  }
  registerError(methodCallExpression,expression);
}
