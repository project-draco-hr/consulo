{
  FileChooserDescriptor fcd=FileChooserDescriptorFactory.createSingleFolderDescriptor();
  fcd.setShowFileSystemRoots(true);
  fcd.setTitle(GitBundle.getString("clone.destination.directory.title"));
  fcd.setDescription(GitBundle.getString("clone.destination.directory.description"));
  fcd.setHideIgnored(false);
  myParentDirectory.addActionListener(new ComponentWithBrowseButton.BrowseFolderActionListener<JTextField>(fcd.getTitle(),fcd.getDescription(),myParentDirectory,myProject,fcd,TextComponentAccessor.TEXT_FIELD_WHOLE_TEXT){
    @Override protected VirtualFile getInitialFile(){
      String text=getComponentText();
      if (text.length() == 0) {
        VirtualFile file=myProject.getBaseDir();
        if (file != null) {
          return file;
        }
      }
      return super.getInitialFile();
    }
  }
);
  final DocumentListener updateOkButtonListener=new DocumentAdapter(){
    @Override protected void textChanged(    DocumentEvent e){
      updateButtons();
    }
  }
;
  myParentDirectory.getChildComponent().getDocument().addDocumentListener(updateOkButtonListener);
  String parentDir=GitRememberedInputs.getInstance().getCloneParentDir();
  if (StringUtil.isEmptyOrSpaces(parentDir)) {
    parentDir=ProjectUtil.getBaseDir();
  }
  myParentDirectory.setText(parentDir);
  myDirectoryName.getDocument().addDocumentListener(updateOkButtonListener);
  myTestButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      test();
    }
  }
);
  setOKActionEnabled(false);
  myTestButton.setEnabled(false);
}
