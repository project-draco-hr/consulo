{
  FileChooserDescriptor fcd=new FileChooserDescriptor(false,true,false,false,false,false);
  fcd.setShowFileSystemRoots(true);
  fcd.setTitle(GitBundle.getString("clone.destination.directory.title"));
  fcd.setDescription(GitBundle.getString("clone.destination.directory.description"));
  fcd.setHideIgnored(false);
  myParentDirectory.addActionListener(new ComponentWithBrowseButton.BrowseFolderActionListener<JTextField>(fcd.getTitle(),fcd.getDescription(),myParentDirectory,myProject,fcd,TextComponentAccessor.TEXT_FIELD_WHOLE_TEXT){
    @Override protected VirtualFile getInitialFile(){
      String text=getComponentText();
      if (text.length() == 0) {
        VirtualFile file=myProject.getBaseDir();
        if (file != null) {
          return file;
        }
      }
      return super.getInitialFile();
    }
  }
);
  final DocumentListener updateOkButtonListener=new DocumentListener(){
    public void insertUpdate(    final DocumentEvent e){
      updateOkButton();
    }
    public void removeUpdate(    final DocumentEvent e){
      updateOkButton();
    }
    public void changedUpdate(    final DocumentEvent e){
      updateOkButton();
    }
  }
;
  myParentDirectory.getChildComponent().getDocument().addDocumentListener(updateOkButtonListener);
  myDirectoryName.getDocument().addDocumentListener(updateOkButtonListener);
  myOriginName.getDocument().addDocumentListener(updateOkButtonListener);
  myRepositoryURL.getDocument().addDocumentListener(new DocumentListener(){
    public void insertUpdate(    final DocumentEvent e){
      changed();
    }
    public void removeUpdate(    final DocumentEvent e){
      changed();
    }
    public void changedUpdate(    final DocumentEvent e){
      changed();
    }
    private void changed(){
      final String url=myRepositoryURL.getText();
      myTestButton.setEnabled(url.length() != 0);
      if (myDefaultDirectoryName.equals(myDirectoryName.getText()) || myDirectoryName.getText().length() == 0) {
        myDefaultDirectoryName=defaultDirectoryName(url);
        myDirectoryName.setText(myDefaultDirectoryName);
      }
      updateOkButton();
    }
  }
);
  myTestButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      myTestURL=myRepositoryURL.getText();
      GitSimpleHandler handler=new GitSimpleHandler(myProject,new File("."),GitCommand.LS_REMOTE);
      handler.addParameters(myTestURL,"master");
      GitTask task=new GitTask(myProject,handler,GitBundle.message("clone.testing",myTestURL));
      GitTaskResult result=task.execute();
      if (result.isOK()) {
        Messages.showInfoMessage(myTestButton,GitBundle.message("clone.test.success.message",myTestURL),GitBundle.getString("clone.test.success"));
        myTestResult=Boolean.TRUE;
      }
 else {
        myTestResult=Boolean.FALSE;
      }
      updateOkButton();
    }
  }
);
  setOKActionEnabled(false);
}
