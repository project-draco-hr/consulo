{
  final AtomicBoolean passwordRequested=new AtomicBoolean();
  final GitLineHandler handler=new GitLineHandler(myProject,new File("."),GitCommand.LS_REMOTE);
  handler.addParameters(url,"master");
  handler.addLineListener(new GitLineHandlerAdapter(){
    @Override public void onLineAvailable(    String line,    Key outputType){
      String lowerCasedLine=line.toLowerCase();
      if (lowerCasedLine.contains("password") || lowerCasedLine.contains("login") || lowerCasedLine.contains("username")) {
        handler.cancel();
        passwordRequested.set(true);
      }
    }
  }
);
  GitTask task=new GitTask(myProject,handler,GitBundle.message("clone.testing",url));
  GitTaskResult result=task.executeModal();
  return result.isOK() || passwordRequested.get();
}
