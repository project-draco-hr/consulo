{
  PatchedSoftReference<PsiType> cached=myCachedDetachedType;
  PsiType type=cached == null ? null : cached.get();
  if (type != null)   return type;
  try {
    String text=StringUtil.join(getApplicableAnnotations(),new Function<PsiAnnotation,String>(){
      public String fun(      PsiAnnotation psiAnnotation){
        return psiAnnotation.getText();
      }
    }
," ") + " " + getText().trim();
    type=JavaPsiFacade.getInstance(getProject()).getElementFactory().createTypeFromText(text,context);
    myCachedDetachedType=new PatchedSoftReference<PsiType>(type);
  }
 catch (  IncorrectOperationException e) {
    return getType();
  }
  return type;
}
