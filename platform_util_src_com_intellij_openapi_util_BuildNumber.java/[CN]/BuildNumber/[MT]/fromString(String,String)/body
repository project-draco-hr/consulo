{
  if (version == null)   return null;
  if (BUILD_NUMBER.equals(version)) {
    return new BuildNumber(TOP_BASELINE_VERSION,Integer.MAX_VALUE);
  }
  String code=version;
  int baselineVersionSeparator=code.indexOf('.');
  int baselineVersion;
  int buildNumber;
  if (baselineVersionSeparator > 0) {
    try {
      final String baselineVersionString=code.substring(0,baselineVersionSeparator);
      if (baselineVersionString.trim().isEmpty())       return null;
      baselineVersion=Integer.parseInt(baselineVersionString);
      code=code.substring(baselineVersionSeparator + 1);
    }
 catch (    NumberFormatException e) {
      throw new RuntimeException("Invalid version number: " + version + "; plugin name: "+ name);
    }
    buildNumber=parseBuildNumber(version,code,name);
  }
 else {
    buildNumber=parseBuildNumber(version,code,name);
    baselineVersion=getBaseLineForHistoricBuilds(buildNumber);
  }
  return new BuildNumber(baselineVersion,buildNumber);
}
