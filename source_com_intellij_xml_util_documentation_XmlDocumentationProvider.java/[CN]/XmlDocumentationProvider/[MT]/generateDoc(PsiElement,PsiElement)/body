{
  if (element instanceof XmlElementDecl) {
    PsiElement curElement=element;
    while (curElement != null && !(curElement instanceof XmlComment)) {
      curElement=curElement.getPrevSibling();
      if (curElement != null && curElement.getClass() == element.getClass()) {
        curElement=null;
        break;
      }
    }
    if (curElement != null) {
      String text=curElement.getText();
      text=text.substring("<!--".length(),text.length() - "-->".length()).trim();
      return generateDoc(text,((XmlElementDecl)element).getNameElement().getText(),null);
    }
  }
 else   if (element instanceof XmlTag) {
    XmlTag tag=(XmlTag)element;
    MyPsiElementProcessor processor=new MyPsiElementProcessor();
    XmlUtil.processXmlElements(tag,processor,true);
    String name=tag.getAttributeValue("name");
    String typeName=null;
    if (processor.result == null) {
      XmlTag declaration=getComplexTypeDefinition(element,originalElement);
      if (declaration != null) {
        XmlUtil.processXmlElements(declaration,processor,true);
        typeName=declaration.getName();
      }
    }
    return generateDoc(processor.result,name,typeName);
  }
 else   if (element instanceof PsiNoWhereElement) {
    PsiFile containingFile=originalElement.getContainingFile();
    AntConfiguration instance=AntConfiguration.getInstance(originalElement.getProject());
    for (Iterator<BuildFile> i=instance.getBuildFiles(); i.hasNext(); ) {
      BuildFile buildFile=i.next();
      if (buildFile.getXmlFile().equals(containingFile)) {
        AntInstallation installation=BuildFile.ANT_INSTALLATION.get(buildFile.getAllOptions());
        if (installation != null) {
          final @NonNls String path=AntInstallation.HOME_DIR.get(installation.getProperties()) + "/docs/manual";
          XmlTag tag=PsiTreeUtil.getParentOfType(originalElement,XmlTag.class);
          if (tag == null)           return null;
          @NonNls final String helpFileShortName=tag.getName() + ".html";
          File file=new File(path);
          File helpFile=null;
          if (file.exists()) {
            File candidateHelpFile=new File(path + CORE_TASKS_FOLDER_NAME + helpFileShortName);
            if (candidateHelpFile.exists())             helpFile=candidateHelpFile;
            if (helpFile == null) {
              candidateHelpFile=new File(path + CORE_TYPES_FOLDER_NAME + helpFileShortName);
              if (candidateHelpFile.exists())               helpFile=candidateHelpFile;
            }
            if (helpFile == null) {
              candidateHelpFile=new File(path + OPTIONAL_TASKS_FOLDER_NAME + helpFileShortName);
              if (candidateHelpFile.exists())               helpFile=candidateHelpFile;
            }
            if (helpFile == null) {
              candidateHelpFile=new File(path + OPTIONAL_TYPES_FOLDER_NAME + helpFileShortName);
              if (candidateHelpFile.exists())               helpFile=candidateHelpFile;
            }
          }
          if (helpFile != null) {
            final File helpFile1=helpFile;
            VirtualFile fileByIoFile=ApplicationManager.getApplication().runReadAction(new Computable<VirtualFile>(){
              public VirtualFile compute(){
                return LocalFileSystem.getInstance().findFileByIoFile(helpFile1);
              }
            }
);
            if (fileByIoFile != null) {
              return FileDocumentManager.getInstance().getDocument(fileByIoFile).getText();
            }
          }
        }
      }
    }
  }
  return null;
}
