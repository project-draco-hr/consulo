{
  element=PsiTreeUtil.getParentOfType(element,XmlTag.class,false);
  if (element instanceof XmlTag) {
    XmlTag xmlTag=(XmlTag)element;
    XmlElementDescriptor elementDescriptor=null;
    try {
      String tagText=object.toString();
      String namespacePrefix=XmlUtil.findPrefixByQualifiedName(tagText);
      String namespace=xmlTag.getNamespaceByPrefix(namespacePrefix);
      if (namespace != null && namespace.length() > 0) {
        tagText+=" xmlns";
        if (namespacePrefix.length() > 0)         tagText+=":" + namespacePrefix;
        tagText+="=\"" + namespace + "\"";
      }
      tagText="<" + tagText + "/>";
      XmlTag tagFromText=xmlTag.getManager().getElementFactory().createTagFromText(tagText);
      elementDescriptor=xmlTag.getDescriptor().getElementDescriptor(tagFromText);
      if (elementDescriptor == null) {
        PsiElement parent=xmlTag.getParent();
        if (parent instanceof XmlTag) {
          elementDescriptor=((XmlTag)parent).getDescriptor().getElementDescriptor(tagFromText);
        }
      }
      if (elementDescriptor instanceof AnyXmlElementDescriptor) {
        elementDescriptor=tagFromText.getDescriptor();
      }
      if (elementDescriptor != null) {
        PsiElement declaration=elementDescriptor.getDeclaration();
        declaration.putUserData(DESCRIPTOR_KEY,elementDescriptor);
        return declaration;
      }
    }
 catch (    IncorrectOperationException e) {
      e.printStackTrace();
    }
  }
  return null;
}
