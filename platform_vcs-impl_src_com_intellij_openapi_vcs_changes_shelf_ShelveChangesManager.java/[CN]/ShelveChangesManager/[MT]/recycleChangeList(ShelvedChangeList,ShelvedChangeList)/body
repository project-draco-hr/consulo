{
  if (newList != null) {
    for (Iterator<ShelvedBinaryFile> shelvedChangeListIterator=listCopy.getBinaryFiles().iterator(); shelvedChangeListIterator.hasNext(); ) {
      final ShelvedBinaryFile binaryFile=shelvedChangeListIterator.next();
      for (      ShelvedBinaryFile newBinary : newList.getBinaryFiles()) {
        if (Comparing.equal(newBinary.BEFORE_PATH,binaryFile.BEFORE_PATH) && Comparing.equal(newBinary.AFTER_PATH,binaryFile.AFTER_PATH)) {
          shelvedChangeListIterator.remove();
        }
      }
    }
    for (Iterator<ShelvedChange> iterator=listCopy.getChanges().iterator(); iterator.hasNext(); ) {
      final ShelvedChange change=iterator.next();
      for (      ShelvedChange newChange : newList.getChanges()) {
        if (Comparing.equal(change.getBeforePath(),newChange.getBeforePath()) && Comparing.equal(change.getAfterPath(),newChange.getAfterPath())) {
          iterator.remove();
        }
      }
    }
    try {
      final List<FilePatch> patches=new ArrayList<FilePatch>();
      for (      ShelvedChange change : listCopy.getChanges()) {
        patches.add(change.loadFilePatch());
      }
      writePatchesToFile(myProject,listCopy.PATH,patches,null);
    }
 catch (    IOException e) {
      LOG.info(e);
    }
catch (    PatchSyntaxException e) {
      LOG.info(e);
    }
  }
  if ((!listCopy.getBinaryFiles().isEmpty()) || (!listCopy.getChanges().isEmpty())) {
    listCopy.setRecycled(true);
    myRecycledShelvedChangeLists.add(listCopy);
    notifyStateChanged();
  }
}
