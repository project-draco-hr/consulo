{
  super();
  myUI=UI;
  myGraphPainter=new SimpleGraphCellPainter(logDataHolder.isMultiRoot());
  setDefaultRenderer(VirtualFile.class,new RootCellRenderer(myUI));
  setDefaultRenderer(GraphCommitCell.class,new GraphCommitCellRender(myGraphPainter,logDataHolder,myUI.getColorManager()));
  setDefaultRenderer(CommitCell.class,new CommitCellRender(myUI.getColorManager(),logDataHolder.getProject()));
  setDefaultRenderer(String.class,new StringCellRenderer());
  setRowHeight(HEIGHT_CELL);
  setShowHorizontalLines(false);
  setIntercellSpacing(new Dimension(0,0));
  getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      int selectedRow=getSelectedRow();
      if (selectedRow >= 0) {
        myUI.click(selectedRow);
      }
    }
  }
);
  MouseAdapter mouseAdapter=new MyMouseAdapter();
  addMouseMotionListener(mouseAdapter);
  addMouseListener(mouseAdapter);
  PopupHandler.installPopupHandler(this,VcsLogUI.POPUP_ACTION_GROUP,VcsLogUI.VCS_LOG_TABLE_PLACE);
  getColumnModel().addColumnModelListener(new TableColumnModelListener(){
    @Override public void columnAdded(    TableColumnModelEvent e){
      if (e.getToIndex() == AbstractVcsLogTableModel.ROOT_COLUMN) {
        myGraphPainter.setRootColumn(getColumnModel().getColumn(AbstractVcsLogTableModel.ROOT_COLUMN));
      }
    }
    @Override public void columnRemoved(    TableColumnModelEvent e){
    }
    @Override public void columnMoved(    TableColumnModelEvent e){
    }
    @Override public void columnMarginChanged(    ChangeEvent e){
    }
    @Override public void columnSelectionChanged(    ListSelectionEvent e){
    }
  }
);
}
