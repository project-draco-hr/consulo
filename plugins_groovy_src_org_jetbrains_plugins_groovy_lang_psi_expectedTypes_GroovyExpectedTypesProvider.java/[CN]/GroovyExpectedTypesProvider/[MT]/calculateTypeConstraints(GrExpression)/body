{
  CachedValue<TypeConstraint[]> cached=expression.getUserData(CACHED_EXPECTED_TYPES);
  if (cached == null) {
    expression.putUserData(CACHED_EXPECTED_TYPES,cached=CachedValuesManager.getManager(expression.getProject()).createCachedValue(new CachedValueProvider<TypeConstraint[]>(){
      public Result<TypeConstraint[]> compute(){
        MyCalculator calculator=new MyCalculator(expression);
        final PsiElement parent=expression.getParent();
        if (parent instanceof GroovyPsiElement) {
          ((GroovyPsiElement)parent).accept(calculator);
        }
 else {
          parent.accept(new GroovyPsiElementVisitor(calculator));
        }
        final TypeConstraint[] result=calculator.getResult();
        List<TypeConstraint> custom=new ArrayList<TypeConstraint>();
        for (        GroovyExpectedTypesContributor contributor : GroovyExpectedTypesContributor.EP_NAME.getExtensions()) {
          custom.addAll(contributor.calculateTypeConstraints(expression));
        }
        if (!custom.isEmpty()) {
          custom.addAll(0,Arrays.asList(result));
          return Result.create(custom.toArray(new TypeConstraint[custom.size()]),PsiModificationTracker.MODIFICATION_COUNT);
        }
        return Result.create(result,PsiModificationTracker.MODIFICATION_COUNT);
      }
    }
,false));
  }
  return cached.getValue();
}
