{
  MyCalculator calculator=new MyCalculator(expression);
  ((GroovyPsiElement)expression.getParent()).accept(calculator);
  final TypeConstraint[] result=calculator.getResult();
  List<TypeConstraint> custom=new ArrayList<TypeConstraint>();
  for (  GroovyExpectedTypesContributor contributor : GroovyExpectedTypesContributor.EP_NAME.getExtensions()) {
    custom.addAll(contributor.calculateTypeConstraints(expression));
  }
  if (!custom.isEmpty()) {
    custom.addAll(0,Arrays.asList(result));
    return custom.toArray(new TypeConstraint[custom.size()]);
  }
  return result;
}
