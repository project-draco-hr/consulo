{
  final Set<PsiType> expectedTypes=getDefaultExpectedTypes(closure);
  List<PsiType> expectedReturnTypes=new ArrayList<PsiType>();
  for (  PsiType expectedType : expectedTypes) {
    if (!(expectedType instanceof PsiClassType))     return null;
    final PsiClassType.ClassResolveResult resolveResult=((PsiClassType)expectedType).resolveGenerics();
    final PsiClass resolved=resolveResult.getElement();
    if (resolved == null || !(GroovyCommonClassNames.GROOVY_LANG_CLOSURE.equals(resolved.getQualifiedName())))     return null;
    final PsiTypeParameter[] typeParameters=resolved.getTypeParameters();
    if (typeParameters.length != 1)     return null;
    final PsiTypeParameter expected=typeParameters[0];
    final PsiType expectedReturnType=resolveResult.getSubstitutor().substitute(expected);
    if (expectedReturnType == PsiType.VOID || expectedReturnType == null)     return null;
    expectedReturnTypes.add(expectedReturnType);
  }
  return TypesUtil.getLeastUpperBoundNullable(expectedReturnTypes,closure.getManager());
}
