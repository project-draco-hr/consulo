{
  final GrExpression invokedExpression=methodCall.getInvokedExpression();
  if (myExpression.equals(invokedExpression)) {
    myResult=new TypeConstraint[]{SubtypeConstraint.create(GroovyCommonClassNames.GROOVY_LANG_CLOSURE,methodCall)};
    return;
  }
  final GrClosableBlock[] closureArgs=methodCall.getClosureArguments();
  final int closureIndex=Arrays.asList(closureArgs).indexOf(myExpression);
  if (closureIndex >= 0) {
    List<TypeConstraint> constraints=new ArrayList<TypeConstraint>();
    for (    GroovyResolveResult variant : ResolveUtil.getCallVariants(myExpression)) {
      final GrArgumentList argumentList=methodCall.getArgumentList();
      final GrNamedArgument[] namedArgs=argumentList == null ? GrNamedArgument.EMPTY_ARRAY : argumentList.getNamedArguments();
      final GrExpression[] expressionArgs=argumentList == null ? GrExpression.EMPTY_ARRAY : argumentList.getExpressionArguments();
      addConstraintsFromMap(constraints,GrClosureSignatureUtil.mapArgumentsToParameters(variant,methodCall,true,true,namedArgs,expressionArgs,closureArgs));
    }
    if (!constraints.isEmpty()) {
      myResult=constraints.toArray(new TypeConstraint[constraints.size()]);
    }
  }
}
