{
  if (listOrMap.isMap())   return;
  final TypeConstraint[] constraints=GroovyExpectedTypesProvider.calculateTypeConstraints(listOrMap);
  List<PsiType> result=new ArrayList<PsiType>(constraints.length);
  for (  TypeConstraint constraint : constraints) {
    if (constraint instanceof SubtypeConstraint) {
      final PsiType type=constraint.getType();
      final PsiType iterable=com.intellij.psi.util.PsiUtil.extractIterableTypeParameter(type,true);
      result.add(iterable);
    }
  }
  if (result.size() == 0) {
    myResult=TypeConstraint.EMPTY_ARRAY;
  }
 else {
    myResult=new TypeConstraint[result.size()];
    for (int i=0; i < result.size(); i++) {
      myResult[i]=SubtypeConstraint.create(result.get(i));
    }
  }
}
