{
  PsiElement parent=list.getParent();
  List<TypeConstraint> constraints=new ArrayList<TypeConstraint>();
  if (parent instanceof GrCallExpression) {
    GroovyResolveResult[] variants=((GrCallExpression)parent).getMethodVariants();
    int idx=list.getExpressionArgumentIndex(myExpression);
    for (    GroovyResolveResult variant : variants) {
      PsiElement element=variant.getElement();
      PsiParameter[] parameters=null;
      if (element instanceof GrParametersOwner) {
        parameters=((GrParametersOwner)element).getParameters();
      }
 else       if (element instanceof PsiMethod) {
        parameters=((PsiMethod)element).getParameterList().getParameters();
      }
      if (parameters == null || parameters.length <= idx)       continue;
      PsiType parameterType=variant.getSubstitutor().substitute(parameters[idx].getType());
      constraints.add(SubtypeConstraint.create(parameterType));
    }
  }
  if (!constraints.isEmpty()) {
    myResult=constraints.toArray(new TypeConstraint[constraints.size()]);
  }
}
