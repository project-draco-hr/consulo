{
  LOG.assertTrue(aClass.isValid());
  ApplicationManager.getApplication().assertReadAccessAllowed();
  Collection<CandidateInfo> candidates=getMethodsToOverrideImplement(aClass,toImplement);
  if (candidates.isEmpty())   return;
  boolean isJdk15Enabled=PsiUtil.isLanguageLevel5OrHigher(aClass);
  final MemberChooser<PsiMethodMember> chooser=new MemberChooser<PsiMethodMember>(ContainerUtil.map2Array(candidates,PsiMethodMember.class,new Function<CandidateInfo,PsiMethodMember>(){
    public PsiMethodMember fun(    final CandidateInfo s){
      return new PsiMethodMember(s);
    }
  }
),false,true,project,!toImplement && isJdk15Enabled);
  chooser.setTitle(toImplement ? CodeInsightBundle.message("methods.to.implement.chooser.title") : CodeInsightBundle.message("methods.to.override.chooser.title"));
  chooser.setCopyJavadocVisible(true);
  chooser.show();
  if (chooser.getExitCode() != DialogWrapper.OK_EXIT_CODE)   return;
  final List<PsiMethodMember> selectedElements=chooser.getSelectedElements();
  if (selectedElements == null || selectedElements.isEmpty())   return;
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      overrideOrImplementMethodsInRightPlace(editor,aClass,selectedElements,chooser.isCopyJavadoc(),chooser.isInsertOverrideAnnotation());
    }
  }
);
}
