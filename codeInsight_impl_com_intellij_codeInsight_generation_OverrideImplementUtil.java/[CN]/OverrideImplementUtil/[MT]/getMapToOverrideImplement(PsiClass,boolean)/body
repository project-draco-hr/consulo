{
  final PsiSubstitutor contextSubstitutor=getContextSubstitutor(aClass);
  Map<MethodSignature,PsiMethod> abstracts=new LinkedHashMap<MethodSignature,PsiMethod>();
  Map<MethodSignature,PsiMethod> finals=new HashMap<MethodSignature,PsiMethod>();
  Map<MethodSignature,PsiMethod> concretes=new LinkedHashMap<MethodSignature,PsiMethod>();
  Map<PsiClass,PsiSubstitutor> substitutors=new HashMap<PsiClass,PsiSubstitutor>();
  PsiMethod[] allMethods=aClass.getAllMethods();
  PsiResolveHelper resolveHelper=JavaPsiFacade.getInstance(aClass.getProject()).getResolveHelper();
  for (  PsiMethod method : allMethods) {
    if (method.hasModifierProperty(PsiModifier.STATIC) || !resolveHelper.isAccessible(method,aClass,aClass))     continue;
    PsiClass hisClass=method.getContainingClass();
    if (method.isConstructor() && (!aClass.isInheritor(hisClass,false) || aClass instanceof PsiAnonymousClass || aClass.isEnum())) {
      continue;
    }
    PsiSubstitutor substitutor;
    if ((substitutor=substitutors.get(hisClass)) == null) {
      substitutor=aClass.isInheritor(hisClass,true) ? TypeConversionUtil.getSuperClassSubstitutor(hisClass,aClass,PsiSubstitutor.EMPTY) : PsiSubstitutor.EMPTY;
      substitutor=substitutor.putAll(contextSubstitutor);
      substitutors.put(hisClass,substitutor);
    }
    String name=method.isConstructor() ? aClass.getName() : method.getName();
    substitutor=GenerateMembersUtil.correctSubstitutor(method,substitutor);
    PsiTypeParameterList typeParameterList=PsiUtil.isRawSubstitutor(method,substitutor) ? null : method.getTypeParameterList();
    MethodSignature signature=MethodSignatureUtil.createMethodSignature(name,method.getParameterList(),typeParameterList,substitutor);
    if (MethodSignatureUtil.findMethodBySignature(aClass,signature,false) != null)     continue;
    if (method.hasModifierProperty(PsiModifier.FINAL)) {
      finals.put(signature,method);
      continue;
    }
    Map<MethodSignature,PsiMethod> map=hisClass.isInterface() || method.hasModifierProperty(PsiModifier.ABSTRACT) ? abstracts : concretes;
    PsiMethod other=map.get(signature);
    if (other == null || preferLeftForImplement(method,other)) {
      map.put(signature,method);
    }
  }
  Map<MethodSignature,CandidateInfo> result=new LinkedHashMap<MethodSignature,CandidateInfo>();
  if (toImplement || aClass.isInterface()) {
    for (    Map.Entry<MethodSignature,PsiMethod> entry : abstracts.entrySet()) {
      MethodSignature signature=entry.getKey();
      PsiMethod abstractOne=entry.getValue();
      PsiMethod concrete=concretes.get(signature);
      if (concrete == null || PsiUtil.getAccessLevel(concrete.getModifierList()) < PsiUtil.getAccessLevel(abstractOne.getModifierList()) || !abstractOne.getContainingClass().isInterface() && abstractOne.getContainingClass().isInheritor(concrete.getContainingClass(),true)) {
        if (finals.get(signature) == null) {
          PsiSubstitutor subst=GenerateMembersUtil.correctSubstitutor(abstractOne,substitutors.get(abstractOne.getContainingClass()));
          CandidateInfo info=new CandidateInfo(abstractOne,subst);
          result.put(signature,info);
        }
      }
    }
    for (    final MethodImplementor implementor : getImplementors()) {
      for (      final PsiMethod method : implementor.getMethodsToImplement(aClass)) {
        MethodSignature signature=MethodSignatureUtil.createMethodSignature(method.getName(),method.getParameterList(),method.getTypeParameterList(),PsiSubstitutor.EMPTY);
        CandidateInfo info=new CandidateInfo(method,PsiSubstitutor.EMPTY);
        result.put(signature,info);
      }
    }
  }
 else {
    for (    Map.Entry<MethodSignature,PsiMethod> entry : concretes.entrySet()) {
      MethodSignature signature=entry.getKey();
      PsiMethod concrete=entry.getValue();
      if (finals.get(signature) == null) {
        PsiMethod abstractOne=abstracts.get(signature);
        if (abstractOne == null || !abstractOne.getContainingClass().isInheritor(concrete.getContainingClass(),true) || CommonClassNames.JAVA_LANG_OBJECT.equals(concrete.getContainingClass().getQualifiedName())) {
          PsiSubstitutor subst=GenerateMembersUtil.correctSubstitutor(concrete,substitutors.get(concrete.getContainingClass()));
          CandidateInfo info=new CandidateInfo(concrete,subst);
          result.put(signature,info);
        }
      }
    }
  }
  return result;
}
