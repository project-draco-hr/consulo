{
  if (!method.isValid() || !substitutor.isValid())   return PsiMethod.EMPTY_ARRAY;
  List<PsiMethod> results=new ArrayList<PsiMethod>();
  for (  final MethodImplementor implementor : getImplementors()) {
    results.addAll(Arrays.asList(implementor.createImplementationPrototypes(aClass,method)));
  }
  if (results.isEmpty()) {
    PsiMethod method1=substitutor != PsiSubstitutor.EMPTY ? GenerateMembersUtil.substituteGenericMethod(method,substitutor) : method;
    PsiElementFactory factory=method.getManager().getElementFactory();
    PsiMethod result=(PsiMethod)factory.createClass("Dummy").add(method1);
    results.add(result);
  }
  for (Iterator<PsiMethod> iterator=results.iterator(); iterator.hasNext(); ) {
    PsiMethod result=iterator.next();
    result.getModifierList().setModifierProperty(PsiModifier.ABSTRACT,aClass.isInterface());
    result.getModifierList().setModifierProperty(PsiModifier.NATIVE,false);
    if (!toCopyJavaDoc) {
      PsiDocComment comment=result.getDocComment();
      if (comment != null) {
        comment.delete();
      }
    }
    if (insertAtOverride && !method.isConstructor()) {
      PsiModifierList modifierList=result.getModifierList();
      if (modifierList.findAnnotation("java.lang.Override") == null) {
        PsiAnnotation annotation=method.getManager().getElementFactory().createAnnotationFromText("@java.lang.Override",null);
        modifierList.addAfter(annotation,null);
      }
    }
    if (LanguageLevel.JDK_1_5.compareTo(PsiUtil.getLanguageLevel(aClass)) <= 0 && method.getModifierList().findAnnotation(AnnotationUtil.NOT_NULL) != null && result.getModifierList().findAnnotation(AnnotationUtil.NOT_NULL) == null) {
      PsiAnnotation annotation=method.getManager().getElementFactory().createAnnotationFromText("@" + AnnotationUtil.NOT_NULL,null);
      result.getModifierList().addAfter(annotation,null);
    }
    final PsiCodeBlock body=method.getManager().getElementFactory().createCodeBlockFromText("{}",null);
    if (result.getBody() != null) {
      result.getBody().replace(body);
    }
 else {
      result.add(body);
    }
    setupMethodBody(result,method,aClass);
    CodeStyleManager codeStyleManager=method.getManager().getCodeStyleManager();
    CodeStyleSettings settings=CodeStyleSettingsManager.getSettings(codeStyleManager.getProject());
    boolean keepBreaks=settings.KEEP_LINE_BREAKS;
    settings.KEEP_LINE_BREAKS=false;
    result=(PsiMethod)codeStyleManager.shortenClassReferences(result);
    result=(PsiMethod)codeStyleManager.reformat(result);
    settings.KEEP_LINE_BREAKS=keepBreaks;
    if (aClass.findMethodBySignature(result,false) != null) {
      iterator.remove();
    }
  }
  return results.toArray(new PsiMethod[results.size()]);
}
