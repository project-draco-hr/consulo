{
  if (!method.isValid() || !substitutor.isValid())   return Collections.emptyList();
  List<PsiMethod> results=new ArrayList<PsiMethod>();
  for (  final MethodImplementor implementor : getImplementors()) {
    results.addAll(Arrays.asList(implementor.createImplementationPrototypes(aClass,method)));
  }
  if (results.isEmpty()) {
    PsiMethod method1=substitutor == PsiSubstitutor.EMPTY ? method : GenerateMembersUtil.substituteGenericMethod(method,substitutor);
    PsiElementFactory factory=JavaPsiFacade.getInstance(method.getProject()).getElementFactory();
    PsiMethod result=(PsiMethod)factory.createClass("Dummy").add(method1);
    if (result instanceof PsiAnnotationMethod) {
      PsiAnnotationMemberValue defaultValue=((PsiAnnotationMethod)result).getDefaultValue();
      if (defaultValue != null) {
        PsiElement defaultKeyword=defaultValue;
        while (!(defaultKeyword instanceof PsiKeyword) && defaultKeyword != null) {
          defaultKeyword=defaultKeyword.getPrevSibling();
        }
        if (defaultKeyword == null)         defaultKeyword=defaultValue;
        defaultValue.getParent().deleteChildRange(defaultKeyword,defaultValue);
      }
    }
    results.add(result);
  }
  for (Iterator<PsiMethod> iterator=results.iterator(); iterator.hasNext(); ) {
    PsiMethod result=iterator.next();
    result.getModifierList().setModifierProperty(PsiModifier.ABSTRACT,aClass.isInterface());
    result.getModifierList().setModifierProperty(PsiModifier.NATIVE,false);
    if (!toCopyJavaDoc) {
      PsiDocComment comment=result.getDocComment();
      if (comment != null) {
        comment.delete();
      }
    }
    if (insertAtOverride && !method.isConstructor()) {
      annotate(result,"java.lang.Override");
    }
    if (AnnotationUtil.isAnnotated(method,AnnotationUtil.NOT_NULL,false)) {
      annotate(result,AnnotationUtil.NOT_NULL,AnnotationUtil.NULLABLE);
    }
    final PsiCodeBlock body=JavaPsiFacade.getInstance(method.getProject()).getElementFactory().createCodeBlockFromText("{}",null);
    PsiCodeBlock oldbody=result.getBody();
    if (oldbody != null) {
      oldbody.replace(body);
    }
 else {
      result.add(body);
    }
    setupMethodBody(result,method,aClass);
    final Project project=method.getProject();
    CodeStyleManager codeStyleManager=CodeStyleManager.getInstance(project);
    CodeStyleSettings settings=CodeStyleSettingsManager.getSettings(project);
    boolean keepBreaks=settings.KEEP_LINE_BREAKS;
    settings.KEEP_LINE_BREAKS=false;
    result=(PsiMethod)JavaCodeStyleManager.getInstance(project).shortenClassReferences(result);
    result=(PsiMethod)codeStyleManager.reformat(result);
    settings.KEEP_LINE_BREAKS=keepBreaks;
    if (aClass.findMethodBySignature(result,false) != null) {
      iterator.remove();
    }
  }
  return results;
}
