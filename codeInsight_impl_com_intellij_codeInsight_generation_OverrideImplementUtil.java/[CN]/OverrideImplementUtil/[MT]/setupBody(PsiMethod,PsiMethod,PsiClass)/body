{
  if (targetClass.isInterface()) {
    final PsiCodeBlock body=result.getBody();
    if (body != null)     body.delete();
  }
  String templName=originalMethod.hasModifierProperty(PsiModifier.ABSTRACT) ? FileTemplateManager.TEMPLATE_IMPLEMENTED_METHOD_BODY : FileTemplateManager.TEMPLATE_OVERRIDDEN_METHOD_BODY;
  FileTemplate template=FileTemplateManager.getInstance().getCodeTemplate(templName);
  FileType fileType=FileTypeManager.getInstance().getFileTypeByExtension(template.getExtension());
  PsiType returnType=result.getReturnType();
  if (returnType == null) {
    returnType=PsiType.VOID;
  }
  Properties properties=new Properties();
  properties.setProperty(FileTemplate.ATTRIBUTE_RETURN_TYPE,returnType.getPresentableText());
  properties.setProperty(FileTemplate.ATTRIBUTE_DEFAULT_RETURN_VALUE,PsiTypesUtil.getDefaultValueOfType(returnType));
  properties.setProperty(FileTemplate.ATTRIBUTE_CALL_SUPER,callSuper(originalMethod,result));
  FileTemplateUtil.setClassAndMethodNameProperties(properties,targetClass,result);
  PsiElementFactory factory=originalMethod.getManager().getElementFactory();
  @NonNls String methodText;
  try {
    String bodyText=template.getText(properties);
    if (!"".equals(bodyText))     bodyText+="\n";
    methodText="void foo () {\n" + bodyText + "}";
    methodText=FileTemplateUtil.indent(methodText,result.getProject(),fileType);
  }
 catch (  Exception e) {
    throw new IncorrectOperationException("Failed to parse file template");
  }
  if (methodText != null) {
    PsiMethod m;
    try {
      m=factory.createMethodFromText(methodText,originalMethod);
    }
 catch (    IncorrectOperationException e) {
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          Messages.showErrorDialog(CodeInsightBundle.message("override.implement.broken.file.template.message"),CodeInsightBundle.message("override.implement.broken.file.template.title"));
        }
      }
);
      return;
    }
    PsiCodeBlock oldBody=result.getBody();
    if (oldBody != null) {
      oldBody.replace(m.getBody());
    }
  }
}
