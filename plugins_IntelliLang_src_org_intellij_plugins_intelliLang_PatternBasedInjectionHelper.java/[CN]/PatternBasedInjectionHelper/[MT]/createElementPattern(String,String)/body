{
  final Binding binding=new Binding();
  final ArrayList<Class> patternClasses=new ArrayList<Class>();
  patternClasses.add(StandardPatterns.class);
  patternClasses.add(PlatformPatterns.class);
  for (  LanguageInjectorSupport support : Extensions.getExtensions(LanguageInjectorSupport.EP_NAME)) {
    patternClasses.addAll(Arrays.asList(support.getPatternClasses()));
  }
  final ArrayList<MetaMethod> metaMethods=new ArrayList<MetaMethod>();
  for (  Class aClass : patternClasses) {
    for (    CachedMethod method : ReflectionCache.getCachedClass(aClass).getMethods()) {
      if (!Modifier.isStatic(method.getModifiers()) || !Modifier.isPublic(method.getModifiers()) || Modifier.isAbstract(method.getModifiers()))       continue;
      metaMethods.add(method);
    }
  }
  final ExpandoMetaClass metaClass=new ExpandoMetaClass(Object.class,false,metaMethods.toArray(new MetaMethod[metaMethods.size()]));
  final GroovyShell shell=new GroovyShell(binding);
  try {
    final Script script=shell.parse("return " + text);
    metaClass.initialize();
    script.setMetaClass(metaClass);
    final Object value=script.run();
    return value instanceof ElementPattern ? (ElementPattern<PsiElement>)value : null;
  }
 catch (  GroovyRuntimeException ex) {
    Configuration.LOG.warn("error processing place: " + displayName + " ["+ text+ "]",ex);
  }
  return null;
}
