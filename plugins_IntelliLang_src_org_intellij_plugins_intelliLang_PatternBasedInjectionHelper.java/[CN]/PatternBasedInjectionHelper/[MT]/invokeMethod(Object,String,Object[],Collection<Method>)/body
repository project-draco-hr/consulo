{
  main:   for (  Method method : target == null ? staticMethods : Arrays.asList(target.getClass().getMethods())) {
    if (!methodName.equals(method.getName()))     continue;
    final Class<?>[] parameterTypes=method.getParameterTypes();
    if (!method.isVarArgs() && parameterTypes.length != arguments.length)     continue;
    boolean performArgConversion=false;
    for (int i=0, parameterTypesLength=parameterTypes.length; i < arguments.length; i++) {
      final Class<?> type=getNonPrimitiveType(i < parameterTypesLength ? parameterTypes[i] : parameterTypes[parameterTypesLength - 1]);
      final Object argument=arguments[i];
      final Class<?> componentType=method.isVarArgs() && i < parameterTypesLength - 1 ? null : parameterTypes[parameterTypesLength - 1].getComponentType();
      if (argument != null) {
        if (!type.isInstance(argument)) {
          if ((componentType == null || !componentType.isInstance(argument)))           continue main;
 else           performArgConversion=true;
        }
      }
    }
    if (parameterTypes.length > arguments.length) {
      performArgConversion=true;
    }
    try {
      final Object[] newArgs;
      if (!performArgConversion)       newArgs=arguments;
 else {
        newArgs=new Object[parameterTypes.length];
        System.arraycopy(arguments,0,newArgs,0,parameterTypes.length - 1);
        final Object[] varArgs=(Object[])Array.newInstance(parameterTypes[parameterTypes.length - 1].getComponentType(),arguments.length - parameterTypes.length + 1);
        System.arraycopy(arguments,parameterTypes.length - 1,varArgs,0,varArgs.length);
        newArgs[parameterTypes.length - 1]=varArgs;
      }
      return method.invoke(target,newArgs);
    }
 catch (    InvocationTargetException e) {
      throw e.getTargetException();
    }
  }
  throw new NoSuchMethodException("unknown symbol: " + methodName + "("+ StringUtil.join(arguments,new Function<Object,String>(){
    public String fun(    Object o){
      return String.valueOf(o);
    }
  }
,", ")+ ")");
}
