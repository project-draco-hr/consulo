{
  final Stack<Frame> stack=new Stack<Frame>();
  int curPos=0;
  Frame curFrame=new Frame();
  final StringBuilder curString=new StringBuilder();
  while (true) {
    if (curPos > text.length())     break;
    final char ch=curPos++ < text.length() ? text.charAt(curPos - 1) : 0;
switch (curFrame.state) {
case init:
      if (Character.isJavaIdentifierStart(ch)) {
        curString.append(ch);
        curFrame.state=State.name;
      }
    break;
case name:
  if (Character.isJavaIdentifierPart(ch)) {
    curString.append(ch);
  }
 else   if (ch == '(') {
    curFrame.methodName=curString.toString();
    curString.setLength(0);
    curFrame.state=State.param;
  }
break;
case param:
if (Character.isWhitespace(ch)) {
}
 else if (Character.isDigit(ch) || ch == '\"') {
curFrame.state=State.literal;
curString.append(ch);
}
 else if (ch == ')') {
curFrame.state=State.invoke;
}
 else if (Character.isJavaIdentifierStart(ch)) {
curString.append(ch);
stack.push(curFrame);
curFrame=new Frame();
curFrame.state=State.name;
}
break;
case literal:
if (curString.charAt(0) == '\"') {
curString.append(ch);
if (ch == '\"') {
curFrame.params.add(makeParam(curString.toString()));
curString.setLength(0);
curFrame.state=State.param;
}
}
 else if (Character.isWhitespace(ch) || ch == ',' || ch == ')') {
curFrame.params.add(makeParam(curString.toString()));
curString.setLength(0);
curFrame.state=ch == ')' ? State.invoke : State.param;
}
 else {
curString.append(ch);
}
break;
case invoke:
final Object result=executor.fun(curFrame);
if (ch == '.') {
curFrame=new Frame();
curFrame.target=result;
curFrame.state=State.init;
}
 else if (stack.isEmpty()) {
return (ElementPattern<PsiElement>)result;
}
 else {
curFrame=stack.pop();
curFrame.params.add(result);
curFrame.state=ch == ')' ? State.invoke : State.param;
}
break;
}
}
return null;
}
