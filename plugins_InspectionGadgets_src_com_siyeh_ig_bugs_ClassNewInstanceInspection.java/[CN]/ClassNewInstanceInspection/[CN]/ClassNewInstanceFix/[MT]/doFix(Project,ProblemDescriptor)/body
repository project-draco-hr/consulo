{
  final PsiElement element=descriptor.getPsiElement();
  final PsiElement parent=element.getParent();
  if (!(parent instanceof PsiReferenceExpression)) {
    return;
  }
  final PsiReferenceExpression methodExpression=(PsiReferenceExpression)parent;
  final PsiExpression qualifier=methodExpression.getQualifierExpression();
  final PsiElement grandParent=parent.getParent();
  if (!(grandParent instanceof PsiMethodCallExpression)) {
    return;
  }
  final PsiElement parentOfType=PsiTreeUtil.getParentOfType(element,PsiMethod.class,PsiTryStatement.class);
  if (parentOfType instanceof PsiTryStatement) {
    final PsiTryStatement tryStatement=(PsiTryStatement)parentOfType;
    addCatchBlock(tryStatement,"java.lang.NoSuchMethodException","java.lang.reflect.InvocationTargetException");
  }
 else {
    final PsiMethod method=(PsiMethod)parentOfType;
    addThrowsClause(method,"java.lang.NoSuchMethodException","java.lang.reflect.InvocationTargetException");
  }
  System.out.println("parentOfType: " + parentOfType);
  final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)grandParent;
  final String newExpression=qualifier.getText() + ".getConstructor().newInstance()";
  replaceExpression(methodCallExpression,newExpression);
}
