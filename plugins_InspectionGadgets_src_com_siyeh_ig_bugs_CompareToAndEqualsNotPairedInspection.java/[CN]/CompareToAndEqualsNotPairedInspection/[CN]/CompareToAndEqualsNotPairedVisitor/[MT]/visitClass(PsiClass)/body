{
  super.visitClass(aClass);
  final PsiMethod[] methods=aClass.findMethodsByName(HardcodedMethodConstants.COMPARE_TO,false);
  if (methods.length == 0) {
    return;
  }
  final PsiManager manager=aClass.getManager();
  final PsiClass comparableClass=manager.findClass("java.lang.Comparable",aClass.getResolveScope());
  if (comparableClass == null) {
    return;
  }
  final PsiMethod compareToMethod=comparableClass.getMethods()[0];
  boolean foundCompareTo=false;
  for (  PsiMethod method : methods) {
    if (MethodSignatureUtil.isSuperMethod(compareToMethod,method)) {
      foundCompareTo=true;
      break;
    }
  }
  if (!foundCompareTo) {
    return;
  }
  final PsiMethod[] equalsMethods=aClass.findMethodsByName(HardcodedMethodConstants.EQUALS,false);
  for (  PsiMethod equalsMethod : equalsMethods) {
    if (MethodUtils.isEquals(equalsMethod)) {
      return;
    }
  }
  registerClassError(aClass);
}
