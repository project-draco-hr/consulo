{
  if (mySelectionDecorator == null) {
    mySelectionDecorator=new ResizeSelectionDecorator(JBColor.RED,1){
      @Override protected boolean visible(      RadComponent component,      ResizePoint point){
        if (point.getType() == LayoutMarginOperation.TYPE) {
          boolean horizontal=isHorizontal();
          Pair<Gravity,Gravity> gravity=Gravity.getSides(component);
          int direction=((DirectionResizePoint)point).getDirection();
          Rectangle bounds=component.getBounds();
          boolean goodWidth=bounds.width >= POINTS_SIZE;
          boolean goodHeight=bounds.height >= POINTS_SIZE;
          if (direction == Position.WEST) {
            return (horizontal || gravity.first != Gravity.right) && goodHeight;
          }
          if (direction == Position.EAST) {
            return (horizontal || gravity.first != Gravity.left) && goodHeight;
          }
          if (direction == Position.NORTH) {
            return (!horizontal || gravity.second != Gravity.bottom) && goodWidth;
          }
          if (direction == Position.SOUTH) {
            return (!horizontal || gravity.second != Gravity.top) && goodWidth;
          }
        }
        if (point.getType() == LayoutWeightOperation.TYPE) {
          int direction=((DirectionResizePoint)point).getDirection();
          if (direction == Position.EAST) {
            return isHorizontal() && component.getBounds().height >= POINTS_SIZE;
          }
          if (direction == Position.SOUTH) {
            return !isHorizontal() && component.getBounds().width >= POINTS_SIZE;
          }
        }
        return true;
      }
    }
;
  }
  mySelectionDecorator.clear();
  if (selection.size() == 1) {
    LayoutMarginOperation.points(mySelectionDecorator);
    LayoutWeightOperation.point(mySelectionDecorator);
  }
  ResizeOperation.points(mySelectionDecorator);
  return mySelectionDecorator;
}
