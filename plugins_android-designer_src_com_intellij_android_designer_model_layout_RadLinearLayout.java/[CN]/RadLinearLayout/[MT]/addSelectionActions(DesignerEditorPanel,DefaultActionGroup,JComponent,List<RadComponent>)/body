{
  for (  RadComponent component : selection) {
    if (component.getParent() != myContainer) {
      return;
    }
  }
  createOrientationAction(designer,actionGroup,shortcuts,Arrays.asList(myContainer));
  AbstractComboBoxAction<Gravity> action=new AbstractComboBoxAction<Gravity>(){
    private Gravity mySelection;
    @NotNull @Override protected DefaultActionGroup createPopupActionGroup(    JComponent button){
      boolean horizontal=isHorizontal();
      Gravity unknown=horizontal ? Gravity.left : Gravity.top;
      setItems(horizontal ? VERTICALS : HORIZONTALS,unknown);
      Iterator<RadComponent> I=selection.iterator();
      mySelection=LinearLayoutOperation.getGravity(horizontal,I.next());
      while (I.hasNext()) {
        if (mySelection != LinearLayoutOperation.getGravity(horizontal,I.next())) {
          mySelection=unknown;
          break;
        }
      }
      return super.createPopupActionGroup(button);
    }
    @Override protected void update(    Gravity item,    Presentation presentation,    boolean popup){
      if (popup) {
        presentation.setIcon(mySelection == item ? CHECKED : null);
        presentation.setText(item == null ? "fill" : item.name());
      }
    }
    @Override protected boolean selectionChanged(    final Gravity item){
      designer.getToolProvider().execute(new ThrowableRunnable<Exception>(){
        @Override public void run() throws Exception {
          ApplicationManager.getApplication().runWriteAction(new Runnable(){
            @Override public void run(){
              LinearLayoutOperation.execute(isHorizontal(),item,selection);
            }
          }
);
        }
      }
,"Change attribute 'gravity'",true);
      return false;
    }
    @Override public void update(){
    }
  }
;
  Presentation presentation=action.getTemplatePresentation();
  presentation.setDescription("Gravity");
  presentation.setIcon(Gravity.ICON);
  actionGroup.add(action);
}
