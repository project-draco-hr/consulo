{
  final boolean horizontal=isHorizontal();
  RadViewComponent firstComponent=components.get(0);
  boolean single=components.size() == 1;
  String layoutWidth=single ? firstComponent.getTag().getAttributeValue("layout_width",SdkConstants.NS_RESOURCES) : "wrap_content";
  String layoutHeight=single ? firstComponent.getTag().getAttributeValue("layout_height",SdkConstants.NS_RESOURCES) : "wrap_content";
  String layoutGravity=firstComponent.getTag().getAttributeValue("layout_gravity",SdkConstants.NS_RESOURCES);
  if (horizontal) {
    for (    RadViewComponent component : components.subList(1,components.size())) {
      String height=component.getTag().getAttributeValue("layout_height",SdkConstants.NS_RESOURCES);
      if ("fill_parent".equals(height) || "match_parent".equals(height)) {
        layoutHeight="fill_parent";
        layoutGravity=null;
      }
      if (layoutGravity != null && layoutGravity.equals(component.getTag().getAttributeValue("layout_gravity",SdkConstants.NS_RESOURCES))) {
      }
    }
  }
 else {
  }
  if (newParent.getLayout() instanceof RadLinearLayout) {
    RadLinearLayout layout=(RadLinearLayout)newParent.getLayout();
    if (horizontal != layout.isHorizontal()) {
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        @Override public void run(){
          newParent.getTag().setAttribute("orientation",SdkConstants.NS_RESOURCES,horizontal ? "horizontal" : "vertical");
        }
      }
);
    }
  }
 else {
    ApplicationManager.getApplication().runWriteAction(new Runnable(){
      @Override public void run(){
        for (        RadViewComponent component : components) {
          ModelParser.deleteAttribute(component.getTag(),"layout_gravity");
        }
      }
    }
);
  }
}
