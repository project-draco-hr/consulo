{
  super.onMarkReferenced(refWhat,refFrom,referencedFromClassInitializer);
  if (!(refWhat instanceof RefMethod)) {
    return;
  }
  final RefMethod refMethod=(RefMethod)refWhat;
  if (methodReturnUsed(refMethod)) {
    return;
  }
  final PsiElement psiElement=refMethod.getElement();
  if (!(psiElement instanceof PsiMethod)) {
    return;
  }
  final PsiMethod psiMethod=(PsiMethod)psiElement;
  LOG.info("onMarkReferenced:" + refMethod.getName());
  final PsiElement element=refFrom.getElement();
  element.accept(new JavaRecursiveElementVisitor(){
    @Override public void visitMethodCallExpression(    PsiMethodCallExpression call){
      if (methodReturnUsed(refMethod)) {
        return;
      }
      super.visitMethodCallExpression(call);
      if (isIgnoredMethodCall(call)) {
        return;
      }
      final PsiReferenceExpression methodExpression=call.getMethodExpression();
      if (methodExpression.isReferenceTo(psiMethod)) {
        refMethod.putUserData(ALWAYS_IGNORED,false);
      }
    }
    @Override public void visitNewExpression(    PsiNewExpression call){
      if (methodReturnUsed(refMethod)) {
        return;
      }
      super.visitNewExpression(call);
      if (isIgnoredMethodCall(call)) {
        return;
      }
      final PsiMethod referedMethod=call.resolveMethod();
      if (psiMethod.equals(referedMethod)) {
        refMethod.putUserData(ALWAYS_IGNORED,false);
      }
    }
  }
);
}
