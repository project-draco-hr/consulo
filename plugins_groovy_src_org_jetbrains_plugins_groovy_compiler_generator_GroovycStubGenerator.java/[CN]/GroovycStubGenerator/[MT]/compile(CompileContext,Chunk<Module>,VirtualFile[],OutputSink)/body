{
  final CompileScope scope=compileContext.getCompileScope();
  final VirtualFile[] javaFiles=scope.getFiles(StdFileTypes.JAVA,true);
  if (javaFiles.length == 0) {
    return;
  }
  boolean hasJava=false;
  for (  VirtualFile javaFile : javaFiles) {
    final Module module=ModuleUtil.findModuleForFile(javaFile,myProject);
    if (module != null && moduleChunk.containsNode(module)) {
      hasJava=true;
      break;
    }
  }
  if (!hasJava) {
    return;
  }
  final ExcludedEntriesConfiguration excluded=GroovyCompilerConfiguration.getExcludeConfiguration(myProject);
  List<VirtualFile> total=new ArrayList<VirtualFile>();
  for (  final VirtualFile virtualFile : virtualFiles) {
    if (!excluded.isExcluded(virtualFile)) {
      if (virtualFile.getFileType() == GroovyFileType.GROOVY_FILE_TYPE) {
        total.add(virtualFile);
      }
    }
  }
  if (total.isEmpty()) {
    return;
  }
  super.compile(compileContext,moduleChunk,VfsUtil.toVirtualFileArray(total),sink);
}
