{
  poolManager.setCreator(new ThrowableConvertor<SVNURL,SVNRepository,SVNException>(){
    @Override public SVNRepository convert(    SVNURL svnurl) throws SVNException {
      return new MockSvnRepository(svnurl,ISVNSession.DEFAULT);
    }
  }
);
  final SVNURL url=SVNURL.parseURIEncoded("http://a.b.c");
  final Random random=new Random(System.currentTimeMillis() & 0x00ff);
  final int[] cnt=new int[1];
  cnt[0]=25;
  final SVNException[] exc=new SVNException[1];
  for (int i=0; i < 25; i++) {
    Runnable target=new Runnable(){
      @Override public void run(){
        MockSvnRepository repository=null;
        try {
          repository=(MockSvnRepository)poolManager.createRepository(url,true);
        }
 catch (        SVNException e) {
          e.printStackTrace();
          exc[0]=e;
          return;
        }
        repository.fireConnectionOpened();
        try {
          Thread.sleep(random.nextInt(10));
        }
 catch (        InterruptedException e) {
        }
        repository.fireConnectionClosed();
synchronized (cnt) {
          --cnt[0];
        }
      }
    }
;
    Thread thread=new Thread(target);
    thread.start();
  }
  final long start=System.currentTimeMillis();
synchronized (cnt) {
    while (cnt[0] > 0 && !timeout(start)) {
      try {
        cnt.wait(5);
      }
 catch (      InterruptedException e) {
      }
    }
  }
  Assert.assertEquals(0,cnt[0]);
  final ApplicationLevelNumberConnectionsGuardImpl guard=SvnIdeaRepositoryPoolManager.getOurGuard();
  Assert.assertEquals(0,guard.getCurrentlyActiveConnections());
  final CachingSvnRepositoryPool pool=(CachingSvnRepositoryPool)poolManager.getPool();
  Map<String,CachingSvnRepositoryPool.RepoGroup> groups=pool.getGroups();
  Assert.assertEquals(1,groups.size());
  CachingSvnRepositoryPool.RepoGroup group=groups.values().iterator().next();
  Assert.assertEquals(0,group.getUsedSize());
  poolManager.dispose();
  Assert.assertEquals(0,guard.getCurrentlyActiveConnections());
  Assert.assertEquals(0,guard.getInstanceCount());
  Assert.assertEquals(0,group.getUsedSize());
  Assert.assertEquals(0,group.getInactiveSize());
}
