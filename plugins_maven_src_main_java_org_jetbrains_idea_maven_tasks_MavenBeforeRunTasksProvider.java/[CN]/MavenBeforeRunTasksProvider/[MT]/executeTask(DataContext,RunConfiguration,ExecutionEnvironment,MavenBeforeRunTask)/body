{
  final Semaphore targetDone=new Semaphore();
  final boolean[] result=new boolean[]{true};
  try {
    ApplicationManager.getApplication().invokeAndWait(new Runnable(){
      public void run(){
        final Project project=CommonDataKeys.PROJECT.getData(context);
        final MavenProject mavenProject=getMavenProject(task);
        if (project == null || project.isDisposed() || mavenProject == null)         return;
        FileDocumentManager.getInstance().saveAllDocuments();
        final Collection<String> explicitProfiles=MavenProjectsManager.getInstance(project).getExplicitProfiles();
        final MavenRunner mavenRunner=MavenRunner.getInstance(project);
        targetDone.down();
        new Task.Backgroundable(project,TasksBundle.message("maven.tasks.executing"),true){
          public void run(          @NotNull ProgressIndicator indicator){
            try {
              MavenRunnerParameters params=new MavenRunnerParameters(true,mavenProject.getDirectory(),ParametersListUtil.parse(task.getGoal()),explicitProfiles);
              result[0]=mavenRunner.runBatch(Collections.singletonList(params),null,null,TasksBundle.message("maven.tasks.executing"),indicator);
            }
  finally {
              targetDone.up();
            }
          }
          @Override public boolean shouldStartInBackground(){
            return MavenRunner.getInstance(project).getSettings().isRunMavenInBackground();
          }
          @Override public void processSentToBackground(){
            MavenRunner.getInstance(project).getSettings().setRunMavenInBackground(true);
          }
        }
.queue();
      }
    }
,ModalityState.NON_MODAL);
  }
 catch (  Exception e) {
    MavenLog.LOG.error(e);
    return false;
  }
  targetDone.waitFor();
  return result[0];
}
