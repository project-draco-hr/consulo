{
  GridInfo gridInfo=getGridInfo();
  RadGridLayoutComponent container=(RadGridLayoutComponent)myContainer;
  RadComponent[][] components=container.getGridComponents(false);
  RadComponent editComponent=myComponents.get(0);
  RadViewComponent nextComponent=getNextComponent(components,myRow,myColumn);
  if (myInsertType == GridInsertType.in_cell) {
    if (myRow <= gridInfo.lastRow && myColumn <= gridInfo.lastColumn) {
      if (myContext.isMove()) {
        Rectangle cellInfo=RadGridLayoutComponent.getCellInfo(editComponent);
        components[cellInfo.y][cellInfo.x]=null;
        components[myRow][myColumn]=editComponent;
      }
 else {
        execute(myContext,container,myComponents,nextComponent);
        RadGridLayoutComponent.setCellIndex(editComponent,myRow,myColumn);
        return;
      }
    }
 else {
      execute(myContext,container,myComponents,null);
      RadGridLayoutComponent.setCellIndex(editComponent,myRow,myColumn);
      return;
    }
  }
 else   if (myInsertType == GridInsertType.before_h_cell || myInsertType == GridInsertType.after_h_cell) {
    insertComponent(components,nextComponent,true,myInsertType == GridInsertType.after_h_cell,false,false);
  }
 else   if (myInsertType == GridInsertType.before_v_cell || myInsertType == GridInsertType.after_v_cell) {
    insertComponent(components,nextComponent,false,false,true,myInsertType == GridInsertType.after_v_cell);
  }
 else {
    insertComponent(components,nextComponent,true,myInsertType == GridInsertType.corner_bottom_left || myInsertType == GridInsertType.corner_bottom_right,true,myInsertType == GridInsertType.corner_top_right || myInsertType == GridInsertType.corner_bottom_right);
  }
  validateLayoutParams(components);
  if (myContext.isMove()) {
    RadGridLayoutComponent.clearCellSpans(editComponent);
  }
}
