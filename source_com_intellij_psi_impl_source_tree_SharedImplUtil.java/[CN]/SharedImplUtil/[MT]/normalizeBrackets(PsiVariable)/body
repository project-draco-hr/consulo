{
  CompositeElement variableElement=(CompositeElement)SourceTreeToPsiMap.psiElementToTree(variable);
  ASTNode type=variableElement.findChildByRole(ChildRole.TYPE);
  LOG.assertTrue(type.getTreeParent() == variableElement);
  ASTNode name=variableElement.findChildByRole(ChildRole.NAME);
  ASTNode firstBracket=null;
  ASTNode lastBracket=null;
  int arrayCount=0;
  ASTNode element=name;
  while (true) {
    element=TreeUtil.skipElements(element.getTreeNext(),ElementType.WHITE_SPACE_OR_COMMENT_BIT_SET);
    if (element == null || element.getElementType() != ElementType.LBRACKET)     break;
    if (firstBracket == null)     firstBracket=element;
    lastBracket=element;
    arrayCount++;
    element=TreeUtil.skipElements(element.getTreeNext(),ElementType.WHITE_SPACE_OR_COMMENT_BIT_SET);
    if (element == null || element.getElementType() != ElementType.RBRACKET)     break;
    lastBracket=element;
  }
  if (firstBracket != null) {
    element=firstBracket;
    while (true) {
      ASTNode next=element.getTreeNext();
      variableElement.removeChild(element);
      if (element == lastBracket)       break;
      element=next;
    }
    CompositeElement newType=(CompositeElement)type.clone();
    final CharTable treeCharTable=findCharTableByTree(type);
    for (int i=0; i < arrayCount; i++) {
      CompositeElement newType1=Factory.createCompositeElement(ElementType.TYPE);
      TreeUtil.addChildren(newType1,newType);
      TreeUtil.addChildren(newType1,Factory.createLeafElement(ElementType.LBRACKET,"[",0,1,treeCharTable));
      TreeUtil.addChildren(newType1,Factory.createLeafElement(ElementType.RBRACKET,"]",0,1,treeCharTable));
      newType=newType1;
      newType.acceptTree(new GeneratedMarkerVisitor());
    }
    newType.putUserData(CharTable.CHAR_TABLE_KEY,findCharTableByTree(type));
    variableElement.replaceChild(type,newType);
  }
}
