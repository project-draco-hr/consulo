{
  if (!checkBases) {
    CachedValue<Map<String,PsiField>> cache=myFieldsMapCache;
    if (cache == null) {
      final CachedValuesManager manager=CachedValuesManager.getManager(myClass.getProject());
      final Object[] dependencies={PsiModificationTracker.OUT_OF_CODE_BLOCK_MODIFICATION_COUNT,myTreeChangeTracker};
      myFieldsMapCache=cache=manager.createCachedValue(new CachedValueProvider<Map<String,PsiField>>(){
        @Override public Result<Map<String,PsiField>> compute(){
          return Result.create(getFieldsMap(),dependencies);
        }
      }
,false);
    }
    final Map<String,PsiField> cachedFields=cache.getValue();
    return cachedFields != null ? cachedFields.get(name) : null;
  }
  return PsiClassImplUtil.findFieldByName(myClass,name,checkBases);
}
