{
  final String[] types=inputTypes.length == 0 ? ArrayUtil.EMPTY_STRING_ARRAY : inputTypes;
  return with(new PatternCondition<PsiMethod>("withParameters"){
    @Override public boolean accepts(    @NotNull final PsiMethod psiMethod,    final ProcessingContext context){
      final PsiParameterList parameterList=psiMethod.getParameterList();
      int dotsIndex=-1;
      while (++dotsIndex < types.length) {
        if (Comparing.equal("..",types[dotsIndex]))         break;
      }
      if (dotsIndex == types.length && parameterList.getParametersCount() != dotsIndex || dotsIndex < types.length && parameterList.getParametersCount() < dotsIndex) {
        return false;
      }
      if (dotsIndex > 0) {
        final PsiParameter[] psiParameters=parameterList.getParameters();
        for (int i=0; i < dotsIndex; i++) {
          if (!Comparing.equal("?",types[i]) && !typeEquivalent(psiParameters[i].getType(),types[i])) {
            return false;
          }
        }
      }
      return true;
    }
    private boolean typeEquivalent(    PsiType type,    String expectedText){
      final PsiType erasure=TypeConversionUtil.erasure(type);
      final String text;
      if (erasure instanceof PsiEllipsisType && expectedText.endsWith("[]")) {
        text=((PsiEllipsisType)erasure).getComponentType().getCanonicalText() + "[]";
      }
 else       if (erasure instanceof PsiArrayType && expectedText.endsWith("...")) {
        text=((PsiArrayType)erasure).getComponentType().getCanonicalText() + "...";
      }
 else {
        text=erasure.getCanonicalText();
      }
      return expectedText.equals(text);
    }
  }
);
}
