{
  final File file=new File(filePath);
  if (!file.exists())   return;
  String targetPath;
  if (!FileUtil.filesEqual(file,getRootFile())) {
    final String relativePath=FileUtil.getRelativePath(FileUtil.toSystemIndependentName(getRootFile().getPath()),filePath,'/');
    if (relativePath == null || relativePath.startsWith("..")) {
      throw new ProjectBuildException(new AssertionError(filePath + " is not under " + getRootFile().getPath()));
    }
    targetPath=JpsArtifactPathUtil.appendToPath(outputPath,relativePath);
  }
 else {
    targetPath=outputPath;
  }
  final File targetFile=new File(targetPath);
  if (FileUtil.filesEqual(file,targetFile)) {
    return;
  }
  if (outSrcMapping.getState(targetPath) == null) {
    ProjectBuilderLogger logger=context.getLoggingManager().getProjectBuilderLogger();
    if (logger.isEnabled()) {
      logger.logCompiledFiles(Collections.singletonList(file),IncArtifactBuilder.BUILDER_NAME,"Copying file:");
    }
    FileUtil.copyContent(file,targetFile);
    outputConsumer.registerOutputFile(targetFile,Collections.singletonList(filePath));
  }
 else   if (LOG.isDebugEnabled()) {
    LOG.debug("Target path " + targetPath + " is already registered so "+ filePath+ " won't be copied");
  }
  outSrcMapping.appendData(targetPath,Collections.singletonList(new ArtifactOutputToSourceMapping.SourcePathAndRootIndex(filePath,rootIndex)));
}
