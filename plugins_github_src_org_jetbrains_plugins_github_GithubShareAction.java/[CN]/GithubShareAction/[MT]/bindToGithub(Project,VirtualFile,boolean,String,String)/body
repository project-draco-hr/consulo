{
  LOG.info("Binding local project with GitHub");
  if (!gitDetected) {
    LOG.info("No git detected, creating empty git repo");
    final GitLineHandler h=new GitLineHandler(project,root,GitCommand.INIT);
    h.setNoSSH(true);
    GitHandlerUtil.doSynchronously(h,GitBundle.getString("initializing.title"),h.printableCommandLine());
    if (!h.errors().isEmpty()) {
      GitUIUtil.showOperationErrors(project,h.errors(),"git init");
      LOG.info("Failed to create empty git repo: " + h.errors());
      return;
    }
    final ProgressManager manager=ProgressManager.getInstance();
    manager.runProcessWithProgressSynchronously(new Runnable(){
      @Override public void run(){
        GitInit.refreshAndConfigureVcsMappings(project,root,"");
      }
    }
,"Committing",false,project);
  }
  if (!performFirstCommitIfRequired(project,root)) {
    return;
  }
  GitRepositoryManager repositoryManager=ServiceManager.getService(project,GitRepositoryManager.class);
  final GitRepository repository=repositoryManager.getRepositoryForRoot(root);
  LOG.assertTrue(repository != null,"GitRepository is null for root " + root);
  LOG.info("Adding GitHub as a remote host");
  final GitSimpleHandler addRemoteHandler=new GitSimpleHandler(project,root,GitCommand.REMOTE);
  addRemoteHandler.setNoSSH(true);
  addRemoteHandler.setSilent(true);
  final String remoteUrl=GithubApiUtil.getGitHost() + "/" + login+ "/"+ name+ ".git";
  addRemoteHandler.addParameters("add","origin",remoteUrl);
  try {
    addRemoteHandler.run();
    repository.update();
    if (addRemoteHandler.getExitCode() != 0) {
      Messages.showErrorDialog("Failed to add GitHub repository as remote","Failed to add GitHub repository as remote");
      return;
    }
  }
 catch (  VcsException e) {
    Messages.showErrorDialog(e.getMessage(),"Failed to add GitHub repository as remote");
    LOG.info("Failed to add GitHub as remote: " + e.getMessage());
    return;
  }
  new Task.Backgroundable(project,"Pushing to GitHub",false){
    @Override public void run(    @NotNull ProgressIndicator indicator){
      GitSimplePushResult pushResult=GitHttpAdapter.push(repository,"origin",remoteUrl,"refs/heads/master:refs/heads/master");
switch (pushResult.getType()) {
case NOT_PUSHED:
        showPushError(project,"Push failed: <br/>" + pushResult.getOutput());
      break;
case REJECT:
    showPushError(project,"Push was rejected: <br/>" + pushResult.getOutput());
  break;
case CANCEL:
Notificator.getInstance(project).notify(new Notification(GithubUtil.GITHUB_NOTIFICATION_GROUP,"Push cancelled","The project was created on GitHub but wasn't pushed yet.",NotificationType.WARNING));
break;
case NOT_AUTHORIZED:
showPushError(project,"Push authorization failure: <br/>" + pushResult.getOutput());
break;
case ERROR:
showPushError(project,"Push failed: <br/>" + pushResult.getOutput());
break;
case SUCCESS:
Notificator.getInstance(project).notify(new Notification(GithubUtil.GITHUB_NOTIFICATION_GROUP,"Success","Successfully created project ''" + name + "'' on github",NotificationType.INFORMATION));
break;
}
}
}
.queue();
}
