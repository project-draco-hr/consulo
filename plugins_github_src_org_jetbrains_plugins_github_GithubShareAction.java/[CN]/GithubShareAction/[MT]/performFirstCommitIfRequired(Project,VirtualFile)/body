{
  final GitVcs gitVcs=GitVcs.getInstance(project);
  if (gitVcs == null) {
    Messages.showErrorDialog(project,"Cannot find git initialized","Failed to share");
    return false;
  }
  final VcsOutgoingChangesProvider<CommittedChangeList> provider=gitVcs.getOutgoingChangesProvider();
  if (provider == null) {
    Messages.showErrorDialog(project,"Cannot find git initialized","Failed to share");
    return false;
  }
  try {
    if (!provider.getOutgoingChanges(root,false).getSecond().isEmpty()) {
      return true;
    }
  }
 catch (  VcsException e) {
    Messages.showErrorDialog(project,e.getMessage(),"Failed to share");
    return false;
  }
  final Ref<Exception> exceptionRef=new Ref<Exception>();
  LOG.info("Touching file 'README' for initial commit");
  final VirtualFile readmeFile=ApplicationManager.getApplication().runWriteAction(new Computable<VirtualFile>(){
    @Override public VirtualFile compute(){
      VirtualFile file=null;
      try {
        file=root.findChild("README");
        if (file == null) {
          file=root.createChildData(this,"README");
          VfsUtil.saveText(file,"This file was created by " + ApplicationInfoEx.getInstanceEx().getFullApplicationName() + " for binding GitHub repository");
        }
 else {
          VfsUtil.saveText(file,VfsUtil.loadText(file) + "\nThis file was modified by " + ApplicationInfoEx.getInstanceEx().getFullApplicationName()+ " for binding GitHub repository");
        }
      }
 catch (      IOException e) {
        exceptionRef.set(e);
        LOG.info("Failed to touch file 'README' for initial commit: " + e.getMessage());
      }
      return file;
    }
  }
);
  if (!exceptionRef.isNull()) {
    Messages.showErrorDialog(project,exceptionRef.get().getMessage(),"Failed to modify file during post activities");
  }
  exceptionRef.set(null);
  LOG.info("Trying to commit");
  final ProgressManager manager=ProgressManager.getInstance();
  manager.runProcessWithProgressSynchronously(new Runnable(){
    public void run(){
      try {
        LOG.info("Adding files for commit");
        final ProgressIndicator progressIndicator=manager.getProgressIndicator();
        if (progressIndicator != null) {
          progressIndicator.setText("Adding files to git");
        }
        final ArrayList<VirtualFile> files2Add=new ArrayList<VirtualFile>();
        if (readmeFile != null) {
          files2Add.add(readmeFile);
        }
        final ChangeListManagerImpl changeListManager=(ChangeListManagerImpl)ChangeListManager.getInstance(project);
        final Semaphore semaphore=new Semaphore();
        semaphore.up();
        changeListManager.invokeAfterUpdate(new Runnable(){
          @Override public void run(){
            semaphore.down();
          }
        }
,InvokeAfterUpdateMode.SILENT,null,null);
        if (!semaphore.waitFor(30000)) {
          exceptionRef.set(new VcsException("Too long VCS update"));
          return;
        }
        for (        VirtualFile file : changeListManager.getUnversionedFiles()) {
          if (file.getPath().contains(".idea")) {
            continue;
          }
          if (readmeFile != null && readmeFile.equals(file)) {
            continue;
          }
          files2Add.add(file);
        }
        if (progressIndicator != null) {
          progressIndicator.setText("Adding files to git");
        }
        GitFileUtils.addFiles(project,root,files2Add);
        LOG.info("Performing commit");
        if (progressIndicator != null) {
          progressIndicator.setText("Performing commit");
        }
        GitSimpleHandler handler=new GitSimpleHandler(project,root,GitCommand.COMMIT);
        handler.addParameters("-m","First commit");
        handler.setNoSSH(true);
        handler.endOptions();
        handler.run();
      }
 catch (      VcsException e) {
        exceptionRef.set(e);
        LOG.info("Failed to commit to GitHub");
      }
    }
  }
,"Performing post creating github repository activities",true,project);
  if (!exceptionRef.isNull()) {
    Messages.showErrorDialog(project,exceptionRef.get().getMessage(),"Failed to commit file during post activities");
    return false;
  }
  return true;
}
