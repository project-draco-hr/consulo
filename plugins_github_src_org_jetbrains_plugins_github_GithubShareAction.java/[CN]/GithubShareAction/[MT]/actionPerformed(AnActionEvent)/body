{
  final Project project=e.getData(PlatformDataKeys.PROJECT);
  if (project == null || !GithubUtil.testGitExecutable(project)) {
    return;
  }
  final VirtualFile root=project.getBaseDir();
  final boolean gitDetected=GitUtil.isUnderGit(root);
  if (gitDetected) {
    try {
      final List<GitDeprecatedRemote> gitRemotes=GitDeprecatedRemote.list(project,root);
      if (!gitRemotes.isEmpty()) {
        Messages.showErrorDialog(project,"Project is already under git with configured remote","Cannot create new GitHub repository");
        return;
      }
    }
 catch (    VcsException e2) {
      Messages.showErrorDialog(project,"Error happened during git operation: " + e2.getMessage(),"Cannot create new GitHub repository");
      return;
    }
  }
  BasicAction.saveAll();
  final List<RepositoryInfo> availableRepos=GithubUtil.getAvailableRepos(project);
  if (availableRepos == null) {
    return;
  }
  final HashSet<String> names=new HashSet<String>();
  for (  RepositoryInfo info : availableRepos) {
    names.add(info.getName());
  }
  final GithubSettings settings=GithubSettings.getInstance();
  final String password=settings.getPassword();
  final Boolean privateRepoAllowed=GithubUtil.accessToGithubWithModalProgress(project,new Computable<Boolean>(){
    @Override public Boolean compute(){
      ProgressManager.getInstance().getProgressIndicator().setText("Trying to login to GitHub");
      return GithubUtil.isPrivateRepoAllowed(settings.getHost(),settings.getLogin(),password);
    }
  }
);
  if (privateRepoAllowed == null) {
    return;
  }
  final GithubShareDialog shareDialog=new GithubShareDialog(project,names,privateRepoAllowed);
  shareDialog.show();
  if (!shareDialog.isOK()) {
    return;
  }
  final boolean isPrivate=shareDialog.isPrivate();
  final String name=shareDialog.getRepositoryName();
  final String description=shareDialog.getDescription();
  try {
    LOG.info("Creating GitHub repository");
    boolean repositoryCreated=createGithubRepository(settings.getHost(),settings.getLogin(),settings.getPassword(),name,description,isPrivate);
    if (repositoryCreated) {
      LOG.info("Successfully created GitHub repository");
    }
 else {
      Messages.showErrorDialog(project,"Failed to create new GitHub repository","Create GitHub Repository");
      return;
    }
  }
 catch (  final Exception e1) {
    Messages.showErrorDialog(e1.getMessage(),"Failed to create new GitHub repository");
    return;
  }
  bindToGithub(project,root,gitDetected,settings.getLogin(),name);
}
