{
  if (myProject.isDisposed())   return;
  if (!synchronously && ApplicationManager.getApplication().isWriteAccessAllowed())   return;
  final PsiDocumentManager documentManager=PsiDocumentManager.getInstance(myProject);
  final PsiFile hostPsiFile=documentManager.getCachedPsiFile(hostDocument);
  if (hostPsiFile == null)   return;
  final ConcurrentList<DocumentWindow> injected=InjectedLanguageUtil.getCachedInjectedDocuments(hostPsiFile);
  if (injected.isEmpty())   return;
  if (myProgress.isCanceled()) {
    myProgress=new DaemonProgressIndicator();
  }
  final Processor<DocumentWindow> commitProcessor=new Processor<DocumentWindow>(){
    @Override public boolean process(    DocumentWindow documentWindow){
      if (myProject.isDisposed())       return false;
      ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
      if (indicator != null && indicator.isCanceled())       return false;
      if (documentManager.isUncommited(hostDocument) || !hostPsiFile.isValid()) {
        return false;
      }
      Segment[] ranges=documentWindow.getHostRanges();
      Segment rangeMarker=ranges.length > 0 ? ranges[0] : null;
      PsiElement element=rangeMarker == null ? null : hostPsiFile.findElementAt(rangeMarker.getStartOffset());
      if (element == null) {
synchronized (PsiLock.LOCK) {
          injected.remove(documentWindow);
        }
        return true;
      }
      final DocumentWindow[] stillInjectedDocument={null};
      InjectedLanguageUtil.enumerate(element,hostPsiFile,true,new PsiLanguageInjectionHost.InjectedPsiVisitor(){
        @Override public void visit(        @NotNull PsiFile injectedPsi,        @NotNull List<PsiLanguageInjectionHost.Shred> places){
          stillInjectedDocument[0]=(DocumentWindow)injectedPsi.getViewProvider().getDocument();
          PsiDocumentManagerImpl.checkConsistency(injectedPsi,stillInjectedDocument[0]);
        }
      }
);
synchronized (PsiLock.LOCK) {
        if (stillInjectedDocument[0] == null) {
          injected.remove(documentWindow);
        }
 else         if (stillInjectedDocument[0] != documentWindow) {
          injected.remove(documentWindow);
          injected.addIfAbsent(stillInjectedDocument[0]);
        }
      }
      return true;
    }
  }
;
  final Runnable commitInjectionsRunnable=new Runnable(){
    @Override public void run(){
      if (myProgress.isCanceled())       return;
      JobLauncher.getInstance().invokeConcurrentlyUnderProgress(new ArrayList<DocumentWindow>(injected),myProgress,!synchronously,commitProcessor);
    }
  }
;
  if (synchronously) {
    if (Thread.holdsLock(PsiLock.LOCK)) {
      ContainerUtil.process(new ArrayList<DocumentWindow>(injected),commitProcessor);
    }
 else {
      commitInjectionsRunnable.run();
    }
  }
 else {
    JobLauncher.getInstance().submitToJobThread(new Runnable(){
      @Override public void run(){
        ApplicationManagerEx.getApplicationEx().tryRunReadAction(commitInjectionsRunnable);
      }
    }
,null);
  }
}
