{
  super.visitNewExpression(newExpression);
  GrCodeReferenceElement refElement=newExpression.getReferenceElement();
  if (refElement == null)   return;
  final GroovyResolveResult constructorResolveResult=newExpression.resolveConstructorGenerics();
  final PsiElement constructor=constructorResolveResult.getElement();
  if (constructor != null) {
    final GrArgumentList argList=newExpression.getArgumentList();
    if (argList != null && argList.getExpressionArguments().length == 0 && !PsiUtil.isConstructorHasRequiredParameters((PsiMethod)constructor)) {
      checkDefaultMapConstructor(argList,constructor);
    }
  }
 else {
    final GroovyResolveResult[] results=newExpression.multiResolveConstructor();
    final GrArgumentList argList=newExpression.getArgumentList();
    final PsiElement element=refElement.resolve();
    if (results.length == 0 && element instanceof PsiClass) {
      PsiType[] argumentTypes=PsiUtil.getArgumentTypes(refElement,true);
      if (argumentTypes == null || argumentTypes.length == 0 || (argumentTypes.length == 1 && InheritanceUtil.isInheritor(argumentTypes[0],CommonClassNames.JAVA_UTIL_MAP))) {
        checkDefaultMapConstructor(argList,element);
      }
    }
  }
}
