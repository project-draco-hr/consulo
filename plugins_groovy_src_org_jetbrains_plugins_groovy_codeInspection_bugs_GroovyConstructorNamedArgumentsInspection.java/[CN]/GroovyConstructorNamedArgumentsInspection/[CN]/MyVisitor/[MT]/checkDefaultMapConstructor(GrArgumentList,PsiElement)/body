{
  if (argList == null)   return;
  final GrNamedArgument[] args=argList.getNamedArguments();
  for (  GrNamedArgument arg : args) {
    final GrArgumentLabel label=arg.getLabel();
    if (label == null)     continue;
    if (label.getName() == null) {
      final PsiElement nameElement=label.getNameElement();
      if (nameElement instanceof GrExpression) {
        final PsiType stringType=TypesUtil.createType(CommonClassNames.JAVA_LANG_STRING,arg);
        final PsiType argType=((GrExpression)nameElement).getType();
        if (argType != null && !TypesUtil.isAssignable(stringType,argType,arg)) {
          registerError(nameElement,GroovyBundle.message("property.name.expected"));
        }
      }
 else {
        registerError(nameElement,GroovyBundle.message("property.name.expected"));
      }
    }
 else {
      final PsiElement resolved=label.resolve();
      if (resolved == null) {
        if (element instanceof PsiMember && !(element instanceof PsiClass)) {
          element=((PsiMember)element).getContainingClass();
        }
        List<LocalQuickFix> fixes=new ArrayList<LocalQuickFix>(2);
        if (element instanceof GrMemberOwner) {
          fixes.add(new CreateFieldFromConstructorLabelFix((GrMemberOwner)element,label.getNamedArgument()));
        }
        if (element instanceof PsiClass) {
          fixes.add(new DynamicPropertyFix(label,(PsiClass)element));
        }
        registerError(label,GroovyBundle.message("no.such.property",label.getName()),fixes.toArray(new LocalQuickFix[fixes.size()]),ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
      }
    }
  }
}
