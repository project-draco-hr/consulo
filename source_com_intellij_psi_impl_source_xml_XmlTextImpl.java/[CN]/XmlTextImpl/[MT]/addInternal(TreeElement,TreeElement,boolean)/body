{
  final PomModel model=getProject().getModel();
  final XmlAspect aspect=model.getModelAspect(XmlAspect.class);
  final TreeElement[] retHolder=new TreeElement[1];
  if (child.getElementType() == XmlElementType.XML_TEXT) {
    if (child.getTextLength() == 0)     return this;
    final XmlTextImpl text=(XmlTextImpl)child;
    model.runTransaction(new PomTransaction(){
      public PomModelEvent run(){
        final String oldText=getText();
        TreeElement childBefore=anchor != null ? (before ? anchor.getTreePrev() : anchor) : lastChild;
        if (childBefore != null && childBefore.getElementType() == text.firstChild.getElementType()) {
          final LeafElement newText=mergeElements((LeafElement)childBefore,(LeafElement)text.firstChild,SharedImplUtil.findCharTableByTree(XmlTextImpl.this));
          if (newText != null) {
            replaceChildInternal(childBefore,newText);
            if (text.lastChild != text.firstChild) {
              addChildren(XmlTextImpl.this,text.firstChild.getTreeNext(),null,anchor,before);
            }
          }
 else           addChildren(XmlTextImpl.this,text.firstChild,null,anchor,before);
        }
 else {
          TreeElement childAfter=anchor != null ? (before ? anchor : anchor.getTreeNext()) : lastChild;
          if (childAfter != null && childAfter.getElementType() == text.firstChild.getElementType()) {
            final LeafElement newText=mergeElements((LeafElement)text.firstChild,(LeafElement)childAfter,SharedImplUtil.findCharTableByTree(XmlTextImpl.this));
            if (newText != null) {
              replaceChildInternal(childAfter,newText);
              if (text.lastChild != text.firstChild) {
                addChildren(XmlTextImpl.this,text.firstChild.getTreeNext(),null,anchor,before);
              }
            }
 else             addChildren(XmlTextImpl.this,text.firstChild,null,anchor,before);
          }
          addChildren(XmlTextImpl.this,text.firstChild,null,anchor,before);
        }
        retHolder[0]=XmlTextImpl.this;
        return XmlTextChanged.createXmlTextChanged(model,XmlTextImpl.this,oldText);
      }
    }
,aspect);
  }
 else {
    model.runTransaction(new PomTransaction(){
      public PomModelEvent run(){
        final String oldText=getText();
        final TreeElement treeElement=addChildren(XmlTextImpl.this,child,child.getTreeNext(),anchor,before);
        retHolder[0]=treeElement;
        return XmlTextChanged.createXmlTextChanged(model,XmlTextImpl.this,oldText);
      }
    }
,aspect);
  }
  return retHolder[0];
}
