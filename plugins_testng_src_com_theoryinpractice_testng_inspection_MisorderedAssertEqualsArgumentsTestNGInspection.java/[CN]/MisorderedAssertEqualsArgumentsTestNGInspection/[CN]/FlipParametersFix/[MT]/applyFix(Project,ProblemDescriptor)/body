{
  final PsiElement methodNameIdentifier=descriptor.getPsiElement();
  final PsiElement parent=methodNameIdentifier.getParent();
  if (parent == null) {
    return;
  }
  final PsiMethodCallExpression callExpression=(PsiMethodCallExpression)parent.getParent();
  if (callExpression == null) {
    return;
  }
  final PsiReferenceExpression methodExpression=callExpression.getMethodExpression();
  final PsiMethod method=(PsiMethod)methodExpression.resolve();
  if (method == null) {
    return;
  }
  final PsiClass containingClass=method.getContainingClass();
  final boolean junit;
  if (InheritanceUtil.isInheritor(containingClass,"org.testng.Assert")) {
    junit=false;
  }
 else   if (InheritanceUtil.isInheritor(containingClass,"org.testng.AssertJUnit")) {
    junit=true;
  }
 else {
    return;
  }
  final PsiParameterList parameterList=method.getParameterList();
  final PsiParameter[] parameters=parameterList.getParameters();
  final PsiManager psiManager=callExpression.getManager();
  final GlobalSearchScope scope=GlobalSearchScope.allScope(project);
  final PsiType stringType=PsiType.getJavaLangString(psiManager,scope);
  final PsiType parameterType1=parameters[0].getType();
  final PsiExpressionList argumentList=callExpression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  final PsiExpression expectedArgument;
  final PsiExpression actualArgument;
  if (junit) {
    if (parameterType1.equals(stringType) && parameters.length > 2) {
      expectedArgument=arguments[1];
      actualArgument=arguments[2];
    }
 else {
      expectedArgument=arguments[0];
      actualArgument=arguments[1];
    }
  }
 else {
    actualArgument=arguments[0];
    expectedArgument=arguments[1];
  }
  final PsiElement copy=expectedArgument.copy();
  expectedArgument.replace(actualArgument);
  actualArgument.replace(copy);
}
