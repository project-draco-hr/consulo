{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  @NonNls final String methodName=methodExpression.getReferenceName();
  if (!"assertEquals".equals(methodName) && !"assertEqualsNoOrder".equals(methodName) && !"assertNotEquals".equals(methodName)&& !"assertArrayEquals".equals(methodName)) {
    return;
  }
  final PsiMethod method=expression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiManager manager=expression.getManager();
  final Project project=manager.getProject();
  final GlobalSearchScope scope=GlobalSearchScope.allScope(project);
  final PsiType stringType=PsiType.getJavaLangString(manager,scope);
  final PsiExpressionList argumentList=expression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length < 2) {
    return;
  }
  final PsiClass containingClass=method.getContainingClass();
  final PsiExpression expectedArgument;
  final PsiExpression actualArgument;
  if (InheritanceUtil.isInheritor(containingClass,"org.testng.AssertJUnit")) {
    final PsiType firstArgumentType=arguments[0].getType();
    if (stringType.equals(firstArgumentType) && arguments.length > 2) {
      expectedArgument=arguments[1];
      actualArgument=arguments[2];
    }
 else {
      expectedArgument=arguments[0];
      actualArgument=arguments[1];
    }
  }
 else   if (InheritanceUtil.isInheritor(containingClass,"org.testng.Assert")) {
    actualArgument=arguments[0];
    expectedArgument=arguments[1];
  }
 else {
    return;
  }
  if (expectedArgument == null || actualArgument == null) {
    return;
  }
  if (isLiteralOrConstant(expectedArgument)) {
    return;
  }
  if (!isLiteralOrConstant(actualArgument)) {
    return;
  }
  final PsiElement referenceNameElement=methodExpression.getReferenceNameElement();
  if (referenceNameElement != null) {
    myProblemsHolder.registerProblem(referenceNameElement,"Arguments to <code>#ref()</code> in wrong order #loc",new FlipParametersFix());
  }
 else {
    myProblemsHolder.registerProblem(methodExpression,"Arguments to <code>#ref()</code> in wrong order #loc",new FlipParametersFix());
  }
}
