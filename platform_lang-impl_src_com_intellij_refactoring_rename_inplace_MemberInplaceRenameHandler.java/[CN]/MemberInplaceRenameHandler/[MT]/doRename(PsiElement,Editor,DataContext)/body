{
  if (elementToRename instanceof PsiNameIdentifierOwner) {
    final RenamePsiElementProcessor processor=RenamePsiElementProcessor.forElement(elementToRename);
    if (processor.isInplaceRenameSupported()) {
      final StartMarkAction startMarkAction=StartMarkAction.canStart(elementToRename.getProject());
      if (startMarkAction == null || processor.substituteElementToRename(elementToRename,editor) == elementToRename) {
        processor.substituteElementToRename(elementToRename,editor,new Pass<PsiElement>(){
          @Override public void pass(          PsiElement element){
            final MemberInplaceRenamer renamer=createMemberRenamer(element,(PsiNameIdentifierOwner)elementToRename,editor);
            boolean startedRename=renamer.performInplaceRename();
            if (!startedRename) {
              performDialogRename(elementToRename,editor,dataContext);
            }
          }
        }
);
        return null;
      }
 else {
        final InplaceRefactoring inplaceRefactoring=editor.getUserData(InplaceRefactoring.INPLACE_RENAMER);
        if (inplaceRefactoring != null && inplaceRefactoring.getClass() == MemberInplaceRenamer.class) {
          final TemplateState templateState=TemplateManagerImpl.getTemplateState(InjectedLanguageUtil.getTopLevelEditor(editor));
          if (templateState != null) {
            templateState.gotoEnd(true);
          }
        }
      }
    }
  }
  performDialogRename(elementToRename,editor,dataContext);
  return null;
}
