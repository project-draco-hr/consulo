{
  int line=myDocument.getLineNumber(e.getOffset() + e.getNewLength());
  int linesAfterChange=line - myDocument.getLineNumber(e.getOffset());
  int linesShift=linesAfterChange - myLinesBeforeChange;
  List<Range> rangesAfterChange=getRangesAfter(myLastChangedLine);
  List<Range> rangesBeforeChange=getRangesBefore(myFirstChangedLine);
  List<Range> changedRanges=getChangedRanges(myFirstChangedLine,myLastChangedLine);
  int newSize=rangesBeforeChange.size() + changedRanges.size() + rangesAfterChange.size();
  if (myRanges.size() != newSize) {
    LOG.info("Ranges: " + myRanges + "; first changed line: "+ myFirstChangedLine+ "; last changed line: "+ myLastChangedLine);
    LOG.assertTrue(false);
  }
  myLastChangedLine+=linesShift;
  List<Range> newChangedRanges=getNewChangedRanges();
  shiftRanges(rangesAfterChange,linesShift);
  replaceRanges(changedRanges,newChangedRanges);
  myRanges=new ArrayList<Range>();
  myRanges.addAll(rangesBeforeChange);
  myRanges.addAll(newChangedRanges);
  myRanges.addAll(rangesAfterChange);
  LOG.assertTrue(myHighlighterCount == myRanges.size(),"Highlighters: " + myHighlighterCount + ", ranges: "+ myRanges.size());
  myRanges=mergeRanges(myRanges);
  for (Iterator<Range> each=myRanges.iterator(); each.hasNext(); ) {
    Range range=each.next();
    if (!range.hasHighlighter())     range.setHighlighter(createHighlighter(range));
  }
  LOG.assertTrue(myHighlighterCount == myRanges.size(),"Highlighters: " + myHighlighterCount + ", ranges: "+ myRanges.size());
}
