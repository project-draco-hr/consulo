{
  LOG.assertTrue(SwingUtilities.isEventDispatchThread());
  DebuggerSession session=new DebuggerSession(sessionName,new DebugProcessEvents(myProject));
  final ExecutionResult executionResult=session.attach(state,remoteConnection,pollConnection);
  session.getContextManager().addListener(mySessionListener);
  getContextManager().setState(DebuggerContextUtil.createDebuggerContext(session,session.getContextManager().getContext().getSuspendContext()),session.getState(),DebuggerSession.EVENT_REFRESH,null);
  final ProcessHandler processHandler=executionResult.getProcessHandler();
synchronized (mySessions) {
    mySessions.put(processHandler,session);
  }
  if (!(processHandler instanceof RemoteDebugProcessHandler)) {
    processHandler.addProcessListener(new ProcessAdapter(){
      public void processWillTerminate(      ProcessEvent event,      boolean willBeDestroyed){
        final DebugProcessImpl debugProcess=getDebugProcess(event.getProcessHandler());
        if (debugProcess != null) {
          debugProcess.stop(willBeDestroyed);
          if (!DebuggerManagerThreadImpl.isManagerThread()) {
            debugProcess.waitFor(10000);
          }
        }
      }
    }
);
  }
  myDispatcher.getMulticaster().sessionCreated(session);
  return session;
}
