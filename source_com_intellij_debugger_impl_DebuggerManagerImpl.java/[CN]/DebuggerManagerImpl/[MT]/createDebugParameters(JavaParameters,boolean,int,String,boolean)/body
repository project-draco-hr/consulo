{
  if (checkValidity) {
    checkTargetJPDAInstalled(parameters);
  }
  final boolean useSockets=transport == DebuggerSettings.SOCKET_TRANSPORT;
  String address="";
  if (debugPort == null || "".equals(debugPort)) {
    try {
      address=DebuggerUtils.getInstance().findAvailableDebugAddress(useSockets);
    }
 catch (    ExecutionException e) {
      if (checkValidity) {
        throw e;
      }
    }
  }
 else {
    address=debugPort;
  }
  String listenTo=null;
  if (serverMode && useSockets) {
    try {
      listenTo=InetAddress.getLocalHost().getHostName() + ":" + address;
    }
 catch (    UnknownHostException e) {
      listenTo="localhost:" + address;
    }
  }
 else {
    listenTo=address;
  }
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    public void run(){
      PathUtilEx.addRtJar(parameters.getClassPath());
      boolean classicVM=shouldForceClassicVM(parameters.getJdk());
      parameters.getVMParametersList().replaceOrPrepend("-classic",classicVM ? "-classic" : "");
      final String debugKey=System.getProperty(DEBUG_KEY_NAME,"-Xdebug");
      parameters.getVMParametersList().replaceOrAppend(debugKey,debugKey);
      if (shouldForceNoJIT(parameters.getJdk())) {
        parameters.getVMParametersList().replaceOrAppend("-Xnoagent","-Xnoagent");
        parameters.getVMParametersList().replaceOrAppend("-Djava.compiler=","-Djava.compiler=NONE");
      }
    }
  }
);
  final TransportServiceWrapper transportService=TransportServiceWrapper.getTransportService(useSockets);
  String xrun="transport=" + transportService.transportId() + ",address="+ listenTo;
  if (serverMode) {
    xrun+=",suspend=y,server=n";
  }
 else {
    xrun+=",suspend=n,server=y";
  }
  if (hasWhitespace(xrun)) {
    xrun="\"" + xrun + "\"";
  }
  parameters.getVMParametersList().replaceOrAppend("-Xrunjdwp:","-Xrunjdwp:" + xrun);
  return new RemoteConnection(useSockets,"127.0.0.1",address,serverMode);
}
