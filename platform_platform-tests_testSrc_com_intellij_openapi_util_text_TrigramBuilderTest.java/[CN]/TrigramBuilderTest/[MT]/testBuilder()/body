{
  final Ref<Integer> trigramCountRef=new Ref<Integer>();
  final TIntArrayList list=new TIntArrayList();
  TrigramBuilder.processTrigrams("String$CharData",new TrigramBuilder.TrigramProcessor(){
    @Override public boolean execute(    int value){
      list.add(value);
      return true;
    }
    @Override public boolean consumeTrigramsCount(    int count){
      trigramCountRef.set(count);
      return true;
    }
  }
);
  list.sort();
  Integer trigramCount=trigramCountRef.get();
  assertNotNull(trigramCount);
  int expectedTrigramCount=13;
  assertEquals(expectedTrigramCount,(int)trigramCount);
  assertEquals(expectedTrigramCount,list.size());
  int[] expected={buildTrigram("$Ch"),buildTrigram("arD"),buildTrigram("ata"),6514785,6578548,6759523,6840690,6909543,7235364,7496801,7498094,7566450,7631465};
  for (int i=0; i < expectedTrigramCount; ++i)   assertEquals(expected[i],list.getQuick(i));
}
