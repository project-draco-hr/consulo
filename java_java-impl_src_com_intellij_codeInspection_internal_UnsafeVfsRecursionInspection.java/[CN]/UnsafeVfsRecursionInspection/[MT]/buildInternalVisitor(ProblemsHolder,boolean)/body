{
  return new JavaElementVisitor(){
    @Override public void visitMethodCallExpression(    final PsiMethodCallExpression expression){
      final Project project=expression.getProject();
      final JavaPsiFacade facade=JavaPsiFacade.getInstance(project);
      final PsiReferenceExpression methodRef=expression.getMethodExpression();
      if (!GET_CHILDREN_METHOD_NAME.equals(methodRef.getReferenceName()))       return;
      final PsiElement methodElement=methodRef.resolve();
      if (!(methodElement instanceof PsiMethod))       return;
      final PsiMethod method=(PsiMethod)methodElement;
      final PsiClass aClass=method.getContainingClass();
      final PsiClass virtualFileClass=facade.findClass(VIRTUAL_FILE_CLASS_NAME,GlobalSearchScope.allScope(project));
      if (!InheritanceUtil.isInheritorOrSelf(aClass,virtualFileClass,true))       return;
      final PsiMethod containingMethod=PsiTreeUtil.getParentOfType(expression,PsiMethod.class);
      if (containingMethod == null)       return;
      final String containingMethodName=containingMethod.getName();
      final Ref<Boolean> result=Ref.create();
      containingMethod.accept(new JavaRecursiveElementVisitor(){
        @Override public void visitMethodCallExpression(        final PsiMethodCallExpression expression2){
          if (expression2 != expression && containingMethodName.equals(expression2.getMethodExpression().getReferenceName()) && expression2.resolveMethod() == containingMethod) {
            result.set(Boolean.TRUE);
          }
        }
      }
);
      if (!result.isNull()) {
        holder.registerProblem(expression,MESSAGE);
      }
    }
  }
;
}
