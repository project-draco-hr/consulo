{
  final PsiLocalVariable variable=PsiTreeUtil.getParentOfType(element,PsiLocalVariable.class);
  if (variable == null)   return;
  final PsiExpression initializer=variable.getInitializer();
  if (initializer == null)   return;
  final PsiElement declaration=variable.getParent();
  if (!(declaration instanceof PsiDeclarationStatement))   return;
  final PsiElement codeBlock=declaration.getParent();
  if (!(codeBlock instanceof PsiCodeBlock))   return;
  final String text="try (" + variable.getTypeElement().getText() + " "+ variable.getName()+ " = "+ initializer.getText()+ ") {}";
  final PsiElementFactory factory=JavaPsiFacade.getElementFactory(project);
  final PsiStatement armStatement=factory.createStatementFromText(text,codeBlock);
  final PsiElement newElement=declaration.replace(armStatement);
  final PsiElement formattedElement=CodeStyleManager.getInstance(project).reformat(newElement);
  final PsiCodeBlock tryBlock=((PsiTryStatement)formattedElement).getTryBlock();
  if (tryBlock != null) {
    final PsiJavaToken brace=tryBlock.getLBrace();
    if (brace != null) {
      editor.getCaretModel().moveToOffset(brace.getTextOffset() + 1);
    }
  }
}
