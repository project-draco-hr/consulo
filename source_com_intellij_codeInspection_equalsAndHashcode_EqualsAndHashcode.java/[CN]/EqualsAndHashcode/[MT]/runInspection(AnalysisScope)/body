{
  JOB_DESCRIPTOR.setTotalAmount(scope.getFileCount());
  scope.accept(new PsiElementVisitor(){
    public void visitFile(    PsiFile file){
      if (file instanceof PsiJavaFile) {
        getManager().incrementJobDoneAmount(JOB_DESCRIPTOR,file.getVirtualFile().getPresentableUrl());
        super.visitFile(file);
      }
    }
    public void visitElement(    PsiElement element){
      PsiElement[] children=element.getChildren();
      for (int i=0; i < children.length; i++) {
        PsiElement child=children[i];
        child.accept(this);
      }
    }
    public void visitClass(    PsiClass aClass){
      super.visitClass(aClass);
      boolean hasEquals=false;
      boolean hasHashCode=false;
      PsiMethod[] methods=aClass.getMethods();
      for (int i=0; i < methods.length; i++) {
        PsiMethod method=methods[i];
        if (MethodSignatureUtil.areSignaturesEqual(method,myEquals)) {
          hasEquals=true;
        }
 else         if (MethodSignatureUtil.areSignaturesEqual(method,myHashCode)) {
          hasHashCode=true;
        }
      }
      if (hasEquals != hasHashCode) {
        addProblemElement(getManager().getRefManager().getReference(aClass),new ProblemDescriptor[]{getManager().createProblemDescriptor(aClass,hasEquals ? "Class has <code>equals()</code> defined but " + "does not define <code>hashCode()</code>." : "Class has <code>hashCode()</code> defined but " + "does not define <code>equals()</code>.",null,ProblemHighlightType.GENERIC_ERROR_OR_WARNING)});
      }
    }
  }
);
}
