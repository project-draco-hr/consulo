{
  final JTableHeader header=getTableHeader();
  final TableCellRenderer defaultRenderer=header == null ? null : header.getDefaultRenderer();
  final RowSorter<? extends TableModel> sorter=getRowSorter();
  final RowSorter.SortKey sortKey=sorter == null ? null : ContainerUtil.getFirstItem(sorter.getSortKeys());
  ColumnInfo[] columns=getListTableModel().getColumnInfos();
  int[] sizeMode=new int[columns.length];
  int[] headers=new int[columns.length];
  int[] widths=new int[columns.length];
  int allColumnWidth=0;
  int allColumnCurrent=0;
  int varCount=0;
  Icon sortIcon=UIManager.getIcon("Table.ascendingSortIcon");
  for (int i=0; i < columns.length; i++) {
    final ColumnInfo columnInfo=columns[i];
    final TableColumn column=getColumnModel().getColumn(i);
    final Component headerComponent=defaultRenderer == null ? null : defaultRenderer.getTableCellRendererComponent(this,column.getHeaderValue(),false,false,0,0);
    if (headerComponent != null) {
      headers[i]=headerComponent.getPreferredSize().width;
      if (sorter != null && columnInfo.isSortable() && sortIcon != null && (sortKey == null || sortKey.getColumn() != i)) {
        headers[i]+=sortIcon.getIconWidth() + (headerComponent instanceof JLabel ? ((JLabel)headerComponent).getIconTextGap() : 0);
      }
    }
    final String maxStringValue;
    final String preferredValue;
    if (columnInfo.getWidth(this) > 0) {
      sizeMode[i]=1;
      int width=columnInfo.getWidth(this);
      widths[i]=width;
    }
 else     if ((maxStringValue=columnInfo.getMaxStringValue()) != null) {
      sizeMode[i]=2;
      widths[i]=getFontMetrics(getFont()).stringWidth(maxStringValue) + columnInfo.getAdditionalWidth();
      varCount++;
    }
 else     if ((preferredValue=columnInfo.getPreferredStringValue()) != null) {
      sizeMode[i]=3;
      widths[i]=getFontMetrics(getFont()).stringWidth(preferredValue) + columnInfo.getAdditionalWidth();
      varCount++;
    }
    allColumnWidth+=widths[i];
    allColumnCurrent+=column.getPreferredWidth();
  }
  allColumnWidth=Math.max(allColumnWidth,allColumnCurrent);
  int viewWidth=getParent() != null ? getParent().getWidth() : getWidth();
  double gold=0.5 * (3 - Math.sqrt(5));
  int addendum=varCount == 0 || viewWidth < allColumnWidth ? 0 : (int)((allColumnWidth < gold * viewWidth ? gold * viewWidth : allColumnWidth < (1 - gold) * viewWidth ? (1 - gold) * viewWidth : viewWidth) - allColumnWidth) / varCount;
  for (int i=0; i < columns.length; i++) {
    TableColumn column=getColumnModel().getColumn(i);
    int width=widths[i];
    if (sizeMode[i] == 1) {
      column.setMaxWidth(width);
      column.setPreferredWidth(width);
      column.setMinWidth(width);
    }
 else     if (sizeMode[i] == 2) {
      width=Math.max(column.getPreferredWidth(),Math.max(width + addendum,headers[i]));
      column.setPreferredWidth(width);
      column.setMaxWidth(width);
    }
 else     if (sizeMode[i] == 3) {
      width=Math.max(column.getPreferredWidth(),Math.max(width + addendum,headers[i]));
      column.setPreferredWidth(width);
    }
  }
}
