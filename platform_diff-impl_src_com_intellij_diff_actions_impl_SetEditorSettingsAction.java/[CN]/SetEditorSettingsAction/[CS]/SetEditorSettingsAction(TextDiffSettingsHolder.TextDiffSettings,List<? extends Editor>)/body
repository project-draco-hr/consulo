{
  super("Editor Settings",null,AllIcons.General.SecondaryGroup);
  setPopup(true);
  myTextSettings=settings;
  myEditors=editors;
  for (  Editor editor : myEditors) {
    ((EditorGutterComponentEx)editor.getGutter()).setGutterPopupGroup(this);
  }
  myActions=new AnAction[]{new EditorSettingToggleAction("EditorToggleShowWhitespaces"){
    @Override public boolean isSelected(){
      return myTextSettings.isShowWhitespaces();
    }
    @Override public void setSelected(    boolean state){
      myTextSettings.setShowWhiteSpaces(state);
    }
    @Override public void apply(    @NotNull Editor editor,    boolean value){
      if (editor.getSettings().isWhitespacesShown() != value) {
        editor.getSettings().setWhitespacesShown(value);
        editor.getComponent().repaint();
      }
    }
  }
,new EditorSettingToggleAction("EditorToggleShowLineNumbers"){
    @Override public boolean isSelected(){
      return myTextSettings.isShowLineNumbers();
    }
    @Override public void setSelected(    boolean state){
      myTextSettings.setShowLineNumbers(state);
    }
    @Override public void apply(    @NotNull Editor editor,    boolean value){
      if (editor.getSettings().isLineNumbersShown() != value) {
        editor.getSettings().setLineNumbersShown(value);
        editor.getComponent().repaint();
      }
    }
  }
,new EditorSettingToggleAction("EditorToggleShowIndentLines"){
    @Override public boolean isSelected(){
      return myTextSettings.isShowIndentLines();
    }
    @Override public void setSelected(    boolean state){
      myTextSettings.setShowIndentLines(state);
    }
    @Override public void apply(    @NotNull Editor editor,    boolean value){
      if (editor.getSettings().isIndentGuidesShown() != value) {
        editor.getSettings().setIndentGuidesShown(value);
        editor.getComponent().repaint();
      }
    }
  }
,new EditorSettingToggleAction("EditorToggleUseSoftWraps"){
    private boolean myForcedSoftWrap;
    @Override public boolean isSelected(){
      return myForcedSoftWrap || myTextSettings.isUseSoftWraps();
    }
    @Override public void setSelected(    boolean state){
      myForcedSoftWrap=false;
      myTextSettings.setUseSoftWraps(state);
    }
    @Override public void apply(    @NotNull Editor editor,    boolean value){
      if (editor.getSettings().isUseSoftWraps() == value)       return;
      if (mySyncScrollSupport != null)       mySyncScrollSupport.enterDisableScrollSection();
      try {
        AbstractToggleUseSoftWrapsAction.toggleSoftWraps(editor,null,value);
      }
  finally {
        if (mySyncScrollSupport != null)         mySyncScrollSupport.exitDisableScrollSection();
      }
    }
    @Override public void applyDefaults(    @NotNull List<? extends Editor> editors){
      if (!myTextSettings.isUseSoftWraps()) {
        for (        Editor editor : editors) {
          myForcedSoftWrap=myForcedSoftWrap || ((EditorImpl)editor).shouldSoftWrapsBeForced();
        }
      }
      super.applyDefaults(editors);
    }
  }
,new EditorHighlightingLayerAction()};
}
