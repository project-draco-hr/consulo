{
  Collection<VirtualFile> readonly=new THashSet<>();
  Collection<VirtualFile> failed=new THashSet<>();
  boolean seenNonWritablePsiFilesWithoutVirtualFile=checkReadOnlyStatus(flat,false,readonly,failed) || checkReadOnlyStatus(recursive,true,readonly,failed);
  ReadonlyStatusHandler.OperationStatus status=ReadonlyStatusHandler.getInstance(project).ensureFilesWritable(readonly);
  ContainerUtil.addAll(failed,status.getReadonlyFiles());
  if (notifyOnFail && (!failed.isEmpty() || seenNonWritablePsiFilesWithoutVirtualFile && readonly.isEmpty())) {
    StringBuilder message=new StringBuilder(messagePrefix).append('\n');
    int i=0;
    for (    VirtualFile virtualFile : failed) {
      String subj=RefactoringBundle.message(virtualFile.isDirectory() ? "directory.description" : "file.description",virtualFile.getPresentableUrl());
      if (virtualFile.getFileSystem().isReadOnly()) {
        message.append(RefactoringBundle.message("0.is.located.in.a.archive.file",subj)).append('\n');
      }
 else {
        message.append(RefactoringBundle.message("0.is.read.only",subj)).append('\n');
      }
      if (i++ > 20) {
        message.append("...\n");
        break;
      }
    }
    showErrorMessage(RefactoringBundle.message("error.title"),message.toString(),null,project);
    return false;
  }
  return failed.isEmpty();
}
