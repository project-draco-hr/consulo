{
  @NonNls String line=callback.getNextLine();
  if (line == null) {
    return false;
  }
  if (line.trim().length() == 0) {
    return true;
  }
  if (line.startsWith("[parsing ")) {
    Matcher matcher=pattern.matcher(line.substring("[parsing ".length()));
    matcher.matches();
    String path=matcher.group(1);
    callback.setProgressText("Parsing " + path);
    callback.fileProcessed(path);
    return true;
  }
  if (line.startsWith("[reading ")) {
    callback.setProgressText("Reading useless stuff");
    return true;
  }
  if (line.startsWith("[analyzing ")) {
    Matcher matcher=pattern.matcher(line.substring("[analyzing ".length()));
    matcher.matches();
    String path=matcher.group(1);
    callback.setProgressText("Analyzing " + path);
    return true;
  }
  if (line.startsWith("[completed ")) {
    Matcher matcher=pattern.matcher(line.substring("[completed ".length()));
    matcher.matches();
    String path=matcher.group(1);
    callback.setProgressText("Completed " + path);
    return true;
  }
  if (line.startsWith("[writing ")) {
    Matcher matcher=pattern.matcher(line.substring("[writing ".length()));
    matcher.matches();
    String path=matcher.group(1);
    String absPath=myOutputDir + "/" + path;
    callback.setProgressText("Writing " + absPath);
    callback.fileGenerated(absPath);
    return true;
  }
  callback.message(CompilerMessageCategory.INFORMATION,line,null,-1,-1);
  return true;
}
