{
  super.visitBinaryExpression(expression);
  if (!expression.getOperationTokenType().equals(JavaTokenType.ANDAND)) {
    return;
  }
  final PsiExpression lhs=expression.getLOperand();
  final PsiExpression rhs=expression.getROperand();
  final PsiBinaryExpression binaryExpression;
  final PsiInstanceOfExpression instanceofExpression;
  if (lhs instanceof PsiBinaryExpression && rhs instanceof PsiInstanceOfExpression) {
    binaryExpression=(PsiBinaryExpression)lhs;
    instanceofExpression=(PsiInstanceOfExpression)rhs;
  }
 else   if (rhs instanceof PsiBinaryExpression && lhs instanceof PsiInstanceOfExpression) {
    binaryExpression=(PsiBinaryExpression)rhs;
    instanceofExpression=(PsiInstanceOfExpression)lhs;
  }
 else {
    return;
  }
  final IElementType tokenType=binaryExpression.getOperationTokenType();
  if (!tokenType.equals(JavaTokenType.NE)) {
    return;
  }
  final PsiReferenceExpression referenceExpression1=getReferenceFromNotNullCheck(binaryExpression);
  if (referenceExpression1 == null) {
    return;
  }
  final PsiExpression operand=instanceofExpression.getOperand();
  if (!(operand instanceof PsiReferenceExpression)) {
    return;
  }
  final PsiReferenceExpression referenceExpression2=(PsiReferenceExpression)operand;
  final PsiElement target1=referenceExpression1.resolve();
  final PsiElement target2=referenceExpression2.resolve();
  if (target1 == null || !target1.equals(target2)) {
    return;
  }
  registerError(binaryExpression);
}
