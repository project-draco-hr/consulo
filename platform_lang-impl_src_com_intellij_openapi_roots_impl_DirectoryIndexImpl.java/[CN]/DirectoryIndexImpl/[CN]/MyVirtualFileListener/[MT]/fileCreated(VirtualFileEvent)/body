{
  VirtualFile file=event.getFile();
  if (!file.isDirectory())   return;
  VirtualFile parent=file.getParent();
  if (parent == null)   return;
  if (isIgnored(file))   return;
  DirectoryInfo parentInfo=myDirToInfoMap.get(parent);
  if (parentInfo == null)   return;
  Module module=parentInfo.module;
  for (  DirectoryIndexExcludePolicy policy : myExcludePolicies) {
    if (policy.isExcludeRoot(file))     return;
  }
  fillMapWithModuleContent(file,module,parentInfo.contentRoot);
  String parentPackage=myDirToPackageName.get(parent);
  if (module != null) {
    if (parentInfo.isInModuleSource) {
      String newDirPackageName=getPackageNameForSubdir(parentPackage,file.getName());
      fillMapWithModuleSource(file,module,newDirPackageName,parentInfo.sourceRoot,parentInfo.isTestSource);
    }
  }
  if (parentInfo.libraryClassRoot != null) {
    String newDirPackageName=getPackageNameForSubdir(parentPackage,file.getName());
    fillMapWithLibraryClasses(file,newDirPackageName,parentInfo.libraryClassRoot);
  }
  if (parentInfo.isInLibrarySource) {
    String newDirPackageName=getPackageNameForSubdir(parentPackage,file.getName());
    fillMapWithLibrarySources(file,newDirPackageName,parentInfo.sourceRoot);
  }
  if (!parentInfo.getOrderEntries().isEmpty()) {
    fillMapWithOrderEntries(file,parentInfo.getOrderEntries(),null,null,null,parentInfo,null);
  }
}
