{
  final IndexState originalState=myState;
  IndexState state=originalState;
  DirectoryInfo parentInfo=originalState.myDirToInfoMap.get(parent);
  for (  Module eachModule : ModuleManager.getInstance(myProject).getModules()) {
    for (    ContentEntry eachRoot : getContentEntries(eachModule)) {
      if (parentInfo != null && eachRoot == parentInfo.contentRoot)       continue;
      if (FileUtil.startsWith(eachRoot.getUrl(),file.getUrl())) {
        String rel=FileUtil.getRelativePath(file.getUrl(),eachRoot.getUrl(),'/');
        if (rel != null) {
          VirtualFile f=file.findFileByRelativePath(rel);
          if (f != null) {
            if (state == originalState)             state=state.copy();
            state.fillMapWithModuleContent(f,eachModule,f);
          }
        }
      }
    }
  }
  if (parentInfo == null)   return state;
  Module module=parentInfo.module;
  for (  DirectoryIndexExcludePolicy policy : myExcludePolicies) {
    if (policy.isExcludeRoot(file))     return state;
  }
  if (state == originalState)   state=state.copy();
  state.fillMapWithModuleContent(file,module,parentInfo.contentRoot);
  String parentPackage=state.myDirToPackageName.get(parent);
  if (module != null) {
    if (parentInfo.isInModuleSource) {
      String newDirPackageName=getPackageNameForSubdir(parentPackage,file.getName());
      state.fillMapWithModuleSource(file,module,newDirPackageName,parentInfo.sourceRoot,parentInfo.isTestSource);
    }
  }
  if (parentInfo.libraryClassRoot != null) {
    String newDirPackageName=getPackageNameForSubdir(parentPackage,file.getName());
    state.fillMapWithLibraryClasses(file,newDirPackageName,parentInfo.libraryClassRoot);
  }
  if (parentInfo.isInLibrarySource) {
    String newDirPackageName=getPackageNameForSubdir(parentPackage,file.getName());
    state.fillMapWithLibrarySources(file,newDirPackageName,parentInfo.sourceRoot);
  }
  if (!parentInfo.getOrderEntries().isEmpty()) {
    state.fillMapWithOrderEntries(file,parentInfo.getOrderEntries(),null,null,null,parentInfo,null);
  }
  return state;
}
