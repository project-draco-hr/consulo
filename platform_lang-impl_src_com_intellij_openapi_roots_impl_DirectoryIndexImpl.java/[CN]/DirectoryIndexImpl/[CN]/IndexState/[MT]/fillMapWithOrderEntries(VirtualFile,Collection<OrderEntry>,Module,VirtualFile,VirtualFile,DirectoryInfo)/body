{
  VfsUtilCore.visitChildrenRecursively(root,new DirectoryVisitor(){
    private Stack<List<OrderEntry>> myEntries=new Stack<List<OrderEntry>>();
    @Override protected DirectoryInfo updateInfo(    VirtualFile dir){
      if (isIgnored(dir))       return null;
      DirectoryInfo info=myDirToInfoMap.get(dir);
      if (info == null)       return null;
      if (module != null) {
        if (info.module != module)         return null;
        if (!info.isInModuleSource)         return null;
      }
 else       if (libraryClassRoot != null) {
        if (info.libraryClassRoot != libraryClassRoot)         return null;
        if (info.isInModuleSource)         return null;
      }
 else       if (librarySourceRoot != null) {
        if (!info.isInLibrarySource)         return null;
        if (info.sourceRoot != librarySourceRoot)         return null;
        if (info.libraryClassRoot != null)         return null;
      }
      List<OrderEntry> oldParentEntries=myEntries.isEmpty() ? null : myEntries.peek();
      final List<OrderEntry> oldEntries=info.getOrderEntries();
      myEntries.push(oldEntries);
      info.addOrderEntries(orderEntries,parentInfo,oldParentEntries);
      return info;
    }
    @Override protected void afterChildrenVisited(    DirectoryInfo info){
      myEntries.pop();
    }
  }
);
}
