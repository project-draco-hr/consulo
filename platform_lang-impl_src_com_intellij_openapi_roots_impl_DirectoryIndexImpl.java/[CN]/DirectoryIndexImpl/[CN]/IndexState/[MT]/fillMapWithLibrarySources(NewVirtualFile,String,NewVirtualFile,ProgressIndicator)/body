{
  assertWritable();
  if (!isValid(dir))   return;
  VfsUtilCore.visitChildrenRecursively(dir,new VirtualFileVisitor<String>(){
{
      setValueForChildren(packageName);
    }
    @Override public boolean visitFile(    @NotNull VirtualFile file){
      if (progress != null)       progress.checkCanceled();
      int dirId=((NewVirtualFile)file).getId();
      if (!file.isDirectory() && dirId != dir.getId() || isIgnored(file))       return false;
      DirectoryInfo info=getOrCreateDirInfo(dirId);
      if (info.isInLibrarySource()) {
        if (isAnotherRoot(dirId))         return false;
      }
      int flag=info.getFlags() | DirectoryInfo.LIBRARY_SOURCE_FLAG;
      with(dirId,info,null,null,sourceRoot,null,(byte)flag,null);
      final String packageName=getCurrentValue();
      final String newPackageName=Comparing.equal(file,dir) ? packageName : getPackageNameForSubdir(packageName,file.getName());
      setPackageName(dirId,internPackageName(newPackageName));
      setValueForChildren(newPackageName);
      return true;
    }
  }
);
}
