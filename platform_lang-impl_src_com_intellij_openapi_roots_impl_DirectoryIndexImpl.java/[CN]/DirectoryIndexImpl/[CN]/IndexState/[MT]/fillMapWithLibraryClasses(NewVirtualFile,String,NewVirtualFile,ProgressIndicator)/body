{
  VfsUtilCore.visitChildrenRecursively(dir,new VirtualFileVisitor<String>(){
{
      setValueForChildren(packageName);
    }
    @Override public boolean visitFile(    @NotNull VirtualFile file){
      if (progress != null)       progress.checkCanceled();
      if (!file.isDirectory() && !Comparing.equal(file,dir) || isIgnored(file))       return false;
      int dirId=((NewVirtualFile)file).getId();
      DirectoryInfo info=getOrCreateDirInfo(dirId);
      if (info.hasLibraryClassRoot()) {
        if (isAnotherRoot(dirId))         return false;
      }
      info=with(dirId,info,null,null,null,classRoot,0,null);
      final String packageName=getCurrentValue();
      final String childPackageName=Comparing.equal(file,dir) ? packageName : getPackageNameForSubdir(packageName,file.getName());
      if (!info.isInModuleSource() && !info.isInLibrarySource()) {
        setPackageName(dirId,internPackageName(childPackageName));
      }
      setValueForChildren(childPackageName);
      return true;
    }
  }
);
}
