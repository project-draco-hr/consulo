{
  assertWritable();
  assertAncestorsConsistent();
  ProgressIndicator progress=ProgressIndicatorProvider.getGlobalProgressIndicator();
  if (progress == null)   progress=new EmptyProgressIndicator();
  progress.pushState();
  progress.checkCanceled();
  progress.setText(ProjectBundle.message("project.index.scanning.files.progress"));
  Module[] modules=ModuleManager.getInstance(myProject).getModules();
  if (reverseAllSets)   modules=ArrayUtil.reverseArray(modules);
  initExcludedDirMap(modules,progress);
  for (  Module module : modules) {
    initModuleContents(module,reverseAllSets,progress);
  }
  TObjectIntHashMap<String> interned=new TObjectIntHashMap<String>(100);
  IdentityHashMap<Library,TIntHashSet> libraryExcludedRoots=new IdentityHashMap<Library,TIntHashSet>();
  for (  Module module : modules) {
    initModuleSources(module,reverseAllSets,progress,interned);
    initLibrarySources(module,progress,interned,libraryExcludedRoots);
    initLibraryClasses(module,progress,interned,libraryExcludedRoots);
  }
  progress.checkCanceled();
  progress.setText2("");
  assertAncestorsConsistent();
  MultiMap<VirtualFile,OrderEntry> depEntries=new MultiMap<VirtualFile,OrderEntry>();
  MultiMap<VirtualFile,OrderEntry> libClassRootEntries=new MultiMap<VirtualFile,OrderEntry>();
  MultiMap<VirtualFile,OrderEntry> libSourceRootEntries=new MultiMap<VirtualFile,OrderEntry>();
  for (  Module module : modules) {
    initOrderEntries(module,depEntries,libClassRootEntries,libSourceRootEntries,progress);
  }
  fillMapWithOrderEntries(depEntries,libClassRootEntries,libSourceRootEntries,progress);
  internDirectoryInfos();
}
