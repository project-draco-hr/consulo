{
  VfsUtilCore.visitChildrenRecursively(root,new DirectoryVisitor(){
    private final Stack<OrderEntry[]> myEntries=new Stack<OrderEntry[]>();
    @Override protected DirectoryInfo updateInfo(    @NotNull VirtualFile dir){
      if (progress != null) {
        progress.checkCanceled();
      }
      if (isIgnored(dir))       return null;
      int dirId=((NewVirtualFile)dir).getId();
      DirectoryInfo info=getInfo(dirId);
      if (info == null)       return null;
      if (module != null) {
        if (info.getModule() != module)         return null;
        if (!info.isInModuleSource())         return null;
      }
 else       if (libraryClassRoot != null) {
        if (!libraryClassRoot.equals(info.getLibraryClassRoot()))         return null;
        if (info.isInModuleSource())         return null;
      }
 else       if (librarySourceRoot != null) {
        if (!info.isInLibrarySource())         return null;
        if (!librarySourceRoot.equals(info.getSourceRoot()))         return null;
        if (info.hasLibraryClassRoot())         return null;
      }
      OrderEntry[] oldParentEntries=myEntries.isEmpty() ? null : myEntries.peek();
      OrderEntry[] oldEntries=info.getOrderEntries();
      myEntries.push(oldEntries);
      OrderEntry[] newOrderEntries=info.calcNewOrderEntries(orderEntries,parentInfo,oldParentEntries);
      info=with(dirId,info,null,null,null,null,0,newOrderEntries);
      return info;
    }
    @Override protected void afterChildrenVisited(    @NotNull VirtualFile file,    @NotNull DirectoryInfo info){
      myEntries.pop();
    }
  }
);
}
