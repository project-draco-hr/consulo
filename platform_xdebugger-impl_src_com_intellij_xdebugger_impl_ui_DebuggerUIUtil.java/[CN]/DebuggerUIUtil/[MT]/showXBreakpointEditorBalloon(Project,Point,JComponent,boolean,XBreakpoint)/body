{
  final XBreakpointManager breakpointManager=XDebuggerManager.getInstance(project).getBreakpointManager();
  final XLightBreakpointPropertiesPanel propertiesPanel=new XLightBreakpointPropertiesPanel(project,breakpointManager,breakpoint,showAllOptions);
  final Ref<Balloon> balloonRef=Ref.create(null);
  final Ref<Boolean> isLoading=Ref.create(Boolean.FALSE);
  propertiesPanel.setDelegate(new XLightBreakpointPropertiesPanel.Delegate(){
    @Override public void showMoreOptions(){
      if (!isLoading.get()) {
        propertiesPanel.saveProperties();
      }
      if (!balloonRef.isNull()) {
        balloonRef.get().hide();
      }
      showXBreakpointEditorBalloon(project,point,component,true,breakpoint);
    }
  }
);
  isLoading.set(Boolean.TRUE);
  propertiesPanel.loadProperties();
  isLoading.set(Boolean.FALSE);
  final JComponent mainPanel=propertiesPanel.getMainPanel();
  final Runnable viewBreakpoints=new Runnable(){
    @Override public void run(){
      propertiesPanel.saveProperties();
      BreakpointsMasterDetailPopupFactory.getInstance(project).createAndShowPopup(breakpoint);
    }
  }
;
  final Balloon balloon=showBreakpointEditor(project,mainPanel,breakpoint.getType().getDisplayText(breakpoint),point,component,viewBreakpoints,breakpoint);
  balloonRef.set(balloon);
  final XBreakpointListener<XBreakpoint<?>> breakpointListener=new XBreakpointListener<XBreakpoint<?>>(){
    @Override public void breakpointAdded(    @NotNull XBreakpoint<?> breakpoint1){
    }
    @Override public void breakpointRemoved(    @NotNull XBreakpoint<?> breakpoint1){
      if (breakpoint1.equals(breakpoint)) {
        balloon.hide();
      }
    }
    @Override public void breakpointChanged(    @NotNull XBreakpoint<?> breakpoint1){
    }
  }
;
  balloon.addListener(new JBPopupListener(){
    @Override public void beforeShown(    LightweightWindowEvent event){
    }
    @Override public void onClosed(    LightweightWindowEvent event){
      propertiesPanel.saveProperties();
      breakpointManager.removeBreakpointListener(breakpointListener);
    }
  }
);
  if (point == null) {
    balloon.showInCenterOf(component);
  }
 else {
    balloon.show(new RelativePoint(component,point),Balloon.Position.atRight);
  }
  breakpointManager.addBreakpointListener(breakpointListener);
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    @Override public void run(){
      IdeFocusManager.findInstance().requestFocus(mainPanel,true);
    }
  }
);
}
