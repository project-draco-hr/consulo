{
  int len=end - off;
  if (len < 7) {
    for (int i=off; i < len + off; i++) {
      for (int j=i; j > off && comparator.compare(x.get(j),x.get(j - 1)) < 0; j--) {
        swapElements(x,j,j - 1);
      }
    }
    return;
  }
  int m=off + (len >> 1);
  if (len > 7) {
    int l=off;
    int n=off + len - 1;
    if (len > 40) {
      int s=len / 8;
      l=med3(x,comparator,l,l + s,l + 2 * s);
      m=med3(x,comparator,m - s,m,m + s);
      n=med3(x,comparator,n - 2 * s,n - s,n);
    }
    m=med3(x,comparator,l,m,n);
  }
  T v=x.get(m);
  int a=off, b=a, c=off + len - 1, d=c;
  while (true) {
    while (b <= c && comparator.compare(x.get(b),v) <= 0) {
      if (comparator.compare(x.get(b),v) == 0) {
        int a1=a++;
        swapElements(x,a1,b);
      }
      b++;
    }
    while (c >= b && comparator.compare(v,x.get(c)) <= 0) {
      if (comparator.compare(x.get(c),v) == 0) {
        int b1=d--;
        swapElements(x,c,b1);
      }
      c--;
    }
    if (b > c)     break;
    int a1=b++;
    int b1=c--;
    swapElements(x,a1,b1);
  }
  int s, n=off + len;
  s=Math.min(a - off,b - a);
  vecswap(x,off,b - s,s);
  s=Math.min(d - c,n - d - 1);
  vecswap(x,b,n - s,s);
  if ((s=b - a) > 1)   quickSort(x,comparator,off,s);
  if ((s=d - c) > 1)   quickSort(x,comparator,n - s,s);
}
