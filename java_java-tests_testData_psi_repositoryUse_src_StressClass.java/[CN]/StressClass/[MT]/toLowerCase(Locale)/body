{
  if (locale == null) {
    throw new NullPointerException();
  }
  int firstUpper;
  scan: {
    for (firstUpper=0; firstUpper < count; ) {
      char c=value[offset + firstUpper];
      if ((c >= Character.MIN_HIGH_SURROGATE) && (c <= Character.MAX_HIGH_SURROGATE)) {
        int supplChar=codePointAt(firstUpper);
        if (supplChar != Character.toLowerCase(supplChar)) {
          break scan;
        }
        firstUpper+=Character.charCount(supplChar);
      }
 else {
        if (c != Character.toLowerCase(c)) {
          break scan;
        }
        firstUpper++;
      }
    }
    return this;
  }
  char[] result=new char[count];
  int resultOffset=0;
  System.arraycopy(value,offset,result,0,firstUpper);
  String lang=locale.getLanguage();
  boolean localeDependent=(lang == "tr" || lang == "az" || lang == "lt");
  char[] lowerCharArray;
  int lowerChar;
  int srcChar;
  int srcCount;
  for (int i=firstUpper; i < count; i+=srcCount) {
    srcChar=(int)value[offset + i];
    if ((char)srcChar >= Character.MIN_HIGH_SURROGATE && (char)srcChar <= Character.MAX_HIGH_SURROGATE) {
      srcChar=codePointAt(i);
      srcCount=Character.charCount(srcChar);
    }
 else {
      srcCount=1;
    }
    if (localeDependent || srcChar == '\u03A3') {
      lowerChar=ConditionalSpecialCasing.toLowerCaseEx(this,i,locale);
    }
 else {
      lowerChar=Character.toLowerCase(srcChar);
    }
    if ((lowerChar == Character.ERROR) || (lowerChar >= Character.MIN_SUPPLEMENTARY_CODE_POINT)) {
      if (lowerChar == Character.ERROR) {
        lowerCharArray=ConditionalSpecialCasing.toLowerCaseCharArray(this,i,locale);
      }
 else       if (srcCount == 2) {
        resultOffset+=Character.toChars(lowerChar,result,i + resultOffset) - srcCount;
        continue;
      }
 else {
        lowerCharArray=Character.toChars(lowerChar);
      }
      int mapLen=lowerCharArray.length;
      if (mapLen > srcCount) {
        char[] result2=new char[result.length + mapLen - srcCount];
        System.arraycopy(result,0,result2,0,i + resultOffset);
        result=result2;
      }
      for (int x=0; x < mapLen; ++x) {
        result[i + resultOffset + x]=lowerCharArray[x];
      }
      resultOffset+=(mapLen - srcCount);
    }
 else {
      result[i + resultOffset]=(char)lowerChar;
    }
  }
  return new String(0,count + resultOffset,result);
}
