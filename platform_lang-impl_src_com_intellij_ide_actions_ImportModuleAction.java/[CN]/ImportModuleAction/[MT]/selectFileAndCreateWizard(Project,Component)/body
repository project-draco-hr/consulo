{
  FileChooserDescriptor descriptor=new FileChooserDescriptor(true,true,true,true,false,false){
    FileChooserDescriptor myDelegate=new OpenProjectFileChooserDescriptor(true);
    @Override public Icon getIcon(    VirtualFile file){
      for (      ProjectImportProvider projectImportProvider : ProjectImportProvider.PROJECT_IMPORT_PROVIDER.getExtensions()) {
        final Icon iconForFile=projectImportProvider.getIconForFile(file);
        if (iconForFile != null) {
          return iconForFile;
        }
      }
      Icon icon=myDelegate.getIcon(file);
      return icon == null ? super.getIcon(file) : icon;
    }
  }
;
  descriptor.setHideIgnored(false);
  descriptor.setTitle("Select File or Directory to Import");
  ProjectImportProvider[] providers=ProjectImportProvider.PROJECT_IMPORT_PROVIDER.getExtensions();
  String description=getFileChooserDescription(project);
  descriptor.setDescription(description);
  FileChooserDialog chooser=FileChooserFactory.getInstance().createFileChooser(descriptor,project,dialogParent);
  VirtualFile toSelect=null;
  String lastLocation=PropertiesComponent.getInstance().getValue(LAST_IMPORTED_LOCATION);
  if (lastLocation != null) {
    toSelect=LocalFileSystem.getInstance().refreshAndFindFileByPath(lastLocation);
  }
  VirtualFile[] files=chooser.choose(toSelect,project);
  if (files.length == 0) {
    return null;
  }
  final VirtualFile file=files[0];
  PropertiesComponent.getInstance().setValue(LAST_IMPORTED_LOCATION,file.getPath());
  return createImportWizard(project,dialogParent,file,providers);
}
