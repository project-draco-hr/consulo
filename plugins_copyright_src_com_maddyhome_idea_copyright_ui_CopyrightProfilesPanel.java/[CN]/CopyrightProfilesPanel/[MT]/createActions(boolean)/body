{
  ArrayList<AnAction> result=new ArrayList<AnAction>();
  result.add(new AnAction("Add","Add",PlatformIcons.ADD_ICON){
{
      registerCustomShortcutSet(CommonShortcuts.INSERT,myTree);
    }
    public void actionPerformed(    AnActionEvent event){
      final String name=askForProfileName("Create new copyright profile","");
      if (name == null)       return;
      final CopyrightProfile copyrightProfile=new CopyrightProfile(name);
      addProfileNode(copyrightProfile);
    }
  }
);
  result.add(new MyDeleteAction(forAll(Conditions.alwaysTrue())));
  result.add(new AnAction("Copy","Copy",PlatformIcons.COPY_ICON){
{
      registerCustomShortcutSet(new CustomShortcutSet(KeyStroke.getKeyStroke(KeyEvent.VK_D,KeyEvent.CTRL_MASK)),myTree);
    }
    public void actionPerformed(    AnActionEvent event){
      final String profileName=askForProfileName("Copy copyright profile","");
      if (profileName == null)       return;
      final CopyrightProfile clone=new CopyrightProfile();
      clone.copyFrom((CopyrightProfile)getSelectedObject());
      clone.setName(profileName);
      addProfileNode(clone);
    }
    public void update(    AnActionEvent event){
      super.update(event);
      event.getPresentation().setEnabled(getSelectedObject() != null);
    }
  }
);
  result.add(new AnAction("Import","Import",PlatformIcons.ADVICE_ICON){
    public void actionPerformed(    AnActionEvent event){
      final OpenProjectFileChooserDescriptor descriptor=new OpenProjectFileChooserDescriptor(true){
        @Override public boolean isFileVisible(        VirtualFile file,        boolean showHiddenFiles){
          return super.isFileVisible(file,showHiddenFiles) || canContainCopyright(file);
        }
        @Override public boolean isFileSelectable(        VirtualFile file){
          return super.isFileSelectable(file) || canContainCopyright(file);
        }
        private boolean canContainCopyright(        VirtualFile file){
          return !file.isDirectory() && (file.getFileType() == StdFileTypes.IDEA_MODULE || file.getFileType() == StdFileTypes.XML);
        }
      }
;
      descriptor.setTitle("Choose file containing copyright notice");
      final VirtualFile file=FileChooser.chooseFile(myProject,descriptor);
      if (file == null)       return;
      final List<CopyrightProfile> copyrightProfiles=ExternalOptionHelper.loadOptions(VfsUtil.virtualToIoFile(file));
      if (copyrightProfiles == null)       return;
      if (!copyrightProfiles.isEmpty()) {
        if (copyrightProfiles.size() == 1) {
          importProfile(copyrightProfiles.get(0));
        }
 else {
          JBPopupFactory.getInstance().createListPopup(new BaseListPopupStep<CopyrightProfile>("Choose profile to import",copyrightProfiles){
            @Override public PopupStep onChosen(            final CopyrightProfile selectedValue,            boolean finalChoice){
              return doFinalStep(new Runnable(){
                public void run(){
                  importProfile(selectedValue);
                }
              }
);
            }
            @NotNull @Override public String getTextFor(            CopyrightProfile value){
              return value.getName();
            }
          }
).showUnderneathOf(myNorthPanel);
        }
      }
 else {
        Messages.showWarningDialog(myProject,"The selected file does not contain any copyright settings.","Import Failure");
      }
    }
    private void importProfile(    CopyrightProfile copyrightProfile){
      final String profileName=askForProfileName("Import copyright profile",copyrightProfile.getName());
      if (profileName == null)       return;
      copyrightProfile.setName(profileName);
      addProfileNode(copyrightProfile);
      Messages.showInfoMessage(myProject,"The copyright settings have been successfully imported.","Import Complete");
    }
  }
);
  return result;
}
