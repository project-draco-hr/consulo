{
  Document document=editor.getDocument();
  SelectionModel selectionModel=editor.getSelectionModel();
  int selectionStart=selectionModel.getLeadSelectionOffset();
  CaretModel caretModel=editor.getCaretModel();
  LogicalPosition blockSelectionStart=selectionModel.hasBlockSelection() ? selectionModel.getBlockStart() : caretModel.getLogicalPosition();
  int lineNumber=editor.getCaretModel().getLogicalPosition().line;
  if (lineNumber >= document.getLineCount()) {
    LogicalPosition pos=new LogicalPosition(lineNumber,0);
    editor.getCaretModel().moveToLogicalPosition(pos);
    setupSelection(editor,isWithSelection,selectionStart,blockSelectionStart);
    editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
    return;
  }
  VisualPosition visCaret=editor.getCaretModel().getVisualPosition();
  visCaret=new VisualPosition(visCaret.line,EditorUtil.getLastVisualLineColumnNumber(editor,visCaret.line));
  LogicalPosition logLineEnd=editor.visualToLogicalPosition(visCaret);
  int offset=editor.logicalPositionToOffset(logLineEnd);
  lineNumber=logLineEnd.line;
  int newOffset=offset;
  CharSequence text=document.getCharsSequence();
  for (int i=newOffset - 1; i >= document.getLineStartOffset(lineNumber); i--) {
    if (text.charAt(i) != ' ' && text.charAt(i) != '\t') {
      break;
    }
    newOffset=i;
  }
  if (newOffset == editor.getCaretModel().getOffset()) {
    newOffset=offset;
  }
  editor.getCaretModel().moveToOffset(newOffset);
  editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
  setupSelection(editor,isWithSelection,selectionStart,blockSelectionStart);
}
