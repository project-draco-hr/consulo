{
  Document document=editor.getDocument();
  SelectionModel selectionModel=editor.getSelectionModel();
  int selectionStart=selectionModel.getLeadSelectionOffset();
  CaretModel caretModel=editor.getCaretModel();
  LogicalPosition blockSelectionStart=caretModel.getLogicalPosition();
  int offset=caretModel.getOffset();
  if (offset == document.getTextLength()) {
    return;
  }
  int newOffset;
  FoldRegion currentFoldRegion=editor.getFoldingModel().getCollapsedRegionAtOffset(offset);
  if (currentFoldRegion != null) {
    newOffset=currentFoldRegion.getEndOffset();
  }
 else {
    newOffset=offset + 1;
    int lineNumber=caretModel.getLogicalPosition().line;
    if (lineNumber >= document.getLineCount())     return;
    int maxOffset=document.getLineEndOffset(lineNumber);
    if (newOffset > maxOffset) {
      if (lineNumber + 1 >= document.getLineCount()) {
        return;
      }
      maxOffset=document.getLineEndOffset(lineNumber + 1);
    }
    for (; newOffset < maxOffset; newOffset++) {
      if (isWordOrLexemeStart(editor,newOffset,camel)) {
        break;
      }
    }
    FoldRegion foldRegion=editor.getFoldingModel().getCollapsedRegionAtOffset(newOffset);
    if (foldRegion != null) {
      newOffset=foldRegion.getStartOffset();
    }
  }
  caretModel.moveToOffset(newOffset);
  EditorModificationUtil.scrollToCaret(editor);
  setupSelection(editor,isWithSelection,selectionStart,blockSelectionStart);
}
