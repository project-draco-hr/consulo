{
  Document document=editor.getDocument();
  SelectionModel selectionModel=editor.getSelectionModel();
  int selectionStart=selectionModel.getLeadSelectionOffset();
  CaretModel caretModel=editor.getCaretModel();
  LogicalPosition blockSelectionStart=caretModel.getLogicalPosition();
  int offset=editor.getCaretModel().getOffset();
  if (offset == 0)   return;
  int newOffset;
  FoldRegion currentFoldRegion=editor.getFoldingModel().getCollapsedRegionAtOffset(offset - 1);
  if (currentFoldRegion != null) {
    newOffset=currentFoldRegion.getStartOffset();
  }
 else {
    int lineNumber=editor.getCaretModel().getLogicalPosition().line;
    newOffset=offset - 1;
    int minOffset=lineNumber > 0 ? document.getLineEndOffset(lineNumber - 1) : 0;
    for (; newOffset > minOffset; newOffset--) {
      if (isWordOrLexemeStart(editor,newOffset,camel))       break;
    }
    FoldRegion foldRegion=editor.getFoldingModel().getCollapsedRegionAtOffset(newOffset);
    if (foldRegion != null && newOffset > foldRegion.getStartOffset()) {
      newOffset=foldRegion.getEndOffset();
    }
  }
  if (editor instanceof EditorImpl && ((EditorImpl)editor).myUseNewRendering) {
    int boundaryOffset=((EditorImpl)editor).findNearestDirectionBoundary(offset,false);
    if (boundaryOffset >= 0) {
      newOffset=Math.max(boundaryOffset,newOffset);
    }
    caretModel.moveToLogicalPosition(editor.offsetToLogicalPosition(newOffset).leanForward(true));
  }
 else {
    editor.getCaretModel().moveToOffset(newOffset);
  }
  EditorModificationUtil.scrollToCaret(editor);
  setupSelection(editor,isWithSelection,selectionStart,blockSelectionStart);
}
