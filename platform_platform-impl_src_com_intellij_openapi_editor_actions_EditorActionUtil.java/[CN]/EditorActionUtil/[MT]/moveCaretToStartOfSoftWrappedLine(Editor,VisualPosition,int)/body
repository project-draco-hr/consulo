{
  CaretModel caretModel=editor.getCaretModel();
  LogicalPosition startLineLogical=editor.visualToLogicalPosition(new VisualPosition(currentVisual.line,0));
  int startLineOffset=editor.logicalPositionToOffset(startLineLogical);
  SoftWrapModel softWrapModel=editor.getSoftWrapModel();
  SoftWrap softWrap=softWrapModel.getSoftWrap(startLineOffset);
  if (softWrap == null) {
    int column=findFirstNonSpaceColumnOnTheLine(editor,currentVisual.line);
    int columnToMove=column;
    if (currentVisual.column <= column && currentVisual.column > 0) {
      columnToMove=0;
    }
    caretModel.moveToVisualPosition(new VisualPosition(currentVisual.line,columnToMove));
    return;
  }
  if (currentVisual.column > softWrap.getIndentInColumns()) {
    caretModel.moveToOffset(softWrap.getStart());
  }
 else   if (currentVisual.column > 0) {
    caretModel.moveToVisualPosition(new VisualPosition(currentVisual.line,0));
  }
 else {
    int newVisualCaretLine=currentVisual.line - 1;
    int newVisualCaretColumn=-1;
    if (softWrappedLines > 1) {
      int offset=editor.logicalPositionToOffset(editor.visualToLogicalPosition(new VisualPosition(newVisualCaretLine,0)));
      SoftWrap prevLineSoftWrap=softWrapModel.getSoftWrap(offset);
      if (prevLineSoftWrap != null) {
        newVisualCaretColumn=prevLineSoftWrap.getIndentInColumns();
      }
    }
    if (newVisualCaretColumn < 0) {
      newVisualCaretColumn=findFirstNonSpaceColumnOnTheLine(editor,newVisualCaretLine);
    }
    caretModel.moveToVisualPosition(new VisualPosition(newVisualCaretLine,newVisualCaretColumn));
  }
}
