{
  Lexer lexer=highlighter.getHighlightingLexer();
  final String s=node.getText();
  lexer.start(s);
  while (lexer.getTokenType() != null) {
    IElementType elementType=lexer.getTokenType();
    TextAttributesKey[] keys=highlighter.getTokenHighlights(elementType);
    for (    TextAttributesKey key : keys) {
      Pair<String,HighlightSeverity> pair=PropertiesHighlighter.DISPLAY_NAMES.get(key);
      String displayName=pair.getFirst();
      HighlightSeverity severity=pair.getSecond();
      if (severity != null) {
        int start=lexer.getTokenStart() + node.getTextRange().getStartOffset();
        int end=lexer.getTokenEnd() + node.getTextRange().getStartOffset();
        TextRange textRange=new TextRange(start,end);
        final Annotation annotation;
        if (severity == HighlightSeverity.WARNING) {
          annotation=holder.createWarningAnnotation(textRange,displayName);
        }
 else         if (severity == HighlightSeverity.ERROR) {
          annotation=holder.createErrorAnnotation(textRange,displayName);
        }
 else {
          annotation=holder.createInfoAnnotation(textRange,displayName);
        }
        TextAttributes attributes=EditorColorsManager.getInstance().getGlobalScheme().getAttributes(key);
        annotation.setEnforcedTextAttributes(attributes);
        if (key == PropertiesHighlighter.PROPERTIES_INVALID_STRING_ESCAPE) {
          annotation.registerFix(new IntentionAction(){
            @NotNull public String getText(){
              return PropertiesBundle.message("unescape");
            }
            @NotNull public String getFamilyName(){
              return getText();
            }
            public boolean isAvailable(            @NotNull Project project,            Editor editor,            PsiFile file){
              return property.isValid() && property.getManager().isInProject(property) && property.getContainingFile().getText().charAt(annotation.getStartOffset()) == '\\';
            }
            public void invoke(            @NotNull Project project,            Editor editor,            PsiFile file){
              if (!CodeInsightUtilBase.prepareFileForWrite(file))               return;
              int offset=annotation.getStartOffset();
              if (property.getContainingFile().getText().charAt(offset) == '\\') {
                editor.getDocument().deleteString(offset,offset + 1);
              }
            }
            public boolean startInWriteAction(){
              return true;
            }
          }
);
        }
      }
    }
    lexer.advance();
  }
}
