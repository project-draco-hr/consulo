{
  if (myVariable instanceof PsiParameter) {
    final PsiElement scope=((PsiParameter)myVariable).getDeclarationScope();
    if (scope instanceof PsiMethod) {
      final PsiMethod method=(PsiMethod)scope;
      final PsiMethod psiMethod=SuperMethodWarningUtil.checkSuperMethod(method,RefactoringBundle.message("to.refactor"));
      if (psiMethod == null)       return true;
      final int parameterIndex=method.getParameterList().getParameterIndex((PsiParameter)myVariable);
      if (!CodeInsightUtilBase.prepareFileForWrite(psiMethod.getContainingFile()))       return true;
      final ArrayList<ParameterInfoImpl> infos=new ArrayList<ParameterInfoImpl>();
      int i=0;
      for (      PsiParameter parameter : psiMethod.getParameterList().getParameters()) {
        final boolean changeType=i == parameterIndex;
        infos.add(new ParameterInfoImpl(i++,parameter.getName(),changeType ? getReturnType() : parameter.getType()));
      }
      if (!ApplicationManager.getApplication().isUnitTestMode()) {
        final JavaChangeSignatureDialog dialog=new JavaChangeSignatureDialog(psiMethod.getProject(),psiMethod,false,myVariable);
        dialog.setParameterInfos(infos);
        dialog.show();
      }
 else {
        ChangeSignatureProcessor processor=new ChangeSignatureProcessor(psiMethod.getProject(),psiMethod,false,null,psiMethod.getName(),psiMethod.getReturnType(),infos.toArray(new ParameterInfoImpl[infos.size()]));
        processor.run();
      }
      return true;
    }
  }
  return false;
}
