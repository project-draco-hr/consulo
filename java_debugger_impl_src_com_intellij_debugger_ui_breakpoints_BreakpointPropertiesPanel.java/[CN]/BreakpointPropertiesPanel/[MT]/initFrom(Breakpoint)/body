{
  myBreakpointComboboxHandler.initFrom(breakpoint);
  myPassCountField.setText(breakpoint.COUNT_FILTER > 0 ? Integer.toString(breakpoint.COUNT_FILTER) : "");
  PsiElement context=breakpoint.getEvaluationElement();
  myPassCountCheckbox.setSelected(breakpoint.COUNT_FILTER_ENABLED);
  myConditionCheckbox.setSelected(breakpoint.CONDITION_ENABLED);
  if (DebuggerSettings.SUSPEND_NONE.equals(breakpoint.SUSPEND_POLICY)) {
    mySuspendPolicyGroup.setSelected(mySuspendNoneRadio.getModel(),true);
    setActionsPanelVisible(true);
  }
 else   if (DebuggerSettings.SUSPEND_THREAD.equals(breakpoint.SUSPEND_POLICY)) {
    mySuspendPolicyGroup.setSelected(mySuspendThreadRadio.getModel(),true);
  }
 else {
    mySuspendPolicyGroup.setSelected(mySuspendAllRadio.getModel(),true);
  }
  mySuspendNoneRadio.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent event){
      if (!myActionsPanel.isVisible()) {
        if (mySuspendNoneRadio.isSelected()) {
          if (myDelegate != null) {
            myDelegate.showActionsPanel();
          }
        }
      }
    }
  }
);
  myLogMessageCheckBox.setSelected(breakpoint.LOG_ENABLED);
  myLogExpressionCheckBox.setSelected(breakpoint.LOG_EXPRESSION_ENABLED);
  myConditionCombo.setContext(context);
  myConditionCombo.setText(breakpoint.getCondition() != null ? breakpoint.getCondition() : new TextWithImportsImpl(CodeFragmentKind.EXPRESSION,""));
  myLogExpressionCombo.setContext(context);
  myLogExpressionCombo.setText(breakpoint.getLogMessage() != null ? breakpoint.getLogMessage() : new TextWithImportsImpl(CodeFragmentKind.EXPRESSION,""));
  myLogExpressionCombo.setEnabled(breakpoint.LOG_EXPRESSION_ENABLED);
  myInstanceFiltersCheckBox.setSelected(breakpoint.INSTANCE_FILTERS_ENABLED);
  myInstanceFiltersField.setEnabled(breakpoint.INSTANCE_FILTERS_ENABLED);
  myInstanceFiltersField.getTextField().setEditable(breakpoint.INSTANCE_FILTERS_ENABLED);
  myInstanceFilters=breakpoint.getInstanceFilters();
  updateInstanceFilterEditor(true);
  myClassFiltersCheckBox.setSelected(breakpoint.CLASS_FILTERS_ENABLED);
  myClassFiltersField.setEnabled(breakpoint.CLASS_FILTERS_ENABLED);
  myClassFiltersField.getTextField().setEditable(breakpoint.CLASS_FILTERS_ENABLED);
  myClassFilters=breakpoint.getClassFilters();
  myClassExclusionFilters=breakpoint.getClassExclusionFilters();
  updateClassFilterEditor(true);
  myBreakpointPsiClass=breakpoint.getPsiClass();
  updateCheckboxes();
}
