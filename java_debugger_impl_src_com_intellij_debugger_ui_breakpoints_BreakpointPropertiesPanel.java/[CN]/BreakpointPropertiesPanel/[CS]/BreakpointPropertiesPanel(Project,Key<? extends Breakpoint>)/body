{
  myProject=project;
  myBreakpointCategory=breakpointCategory;
  mySuspendPolicyGroup=new ButtonGroup();
  mySuspendPolicyGroup.add(mySuspendAllRadio);
  mySuspendPolicyGroup.add(mySuspendThreadRadio);
  mySuspendPolicyGroup.add(mySuspendNoneRadio);
  updateSuspendPolicyRbFont();
  final ItemListener suspendPolicyChangeListener=new ItemListener(){
    public void itemStateChanged(    final ItemEvent e){
      if (e.getStateChange() == ItemEvent.SELECTED) {
        final String defaultPolicy=DebuggerManagerEx.getInstanceEx(myProject).getBreakpointManager().getDefaultSuspendPolicy(breakpointCategory);
        myMakeDefaultButton.setEnabled(!defaultPolicy.equals(getSelectedSuspendPolicy()));
      }
    }
  }
;
  mySuspendAllRadio.addItemListener(suspendPolicyChangeListener);
  mySuspendNoneRadio.addItemListener(suspendPolicyChangeListener);
  mySuspendThreadRadio.addItemListener(suspendPolicyChangeListener);
  myMakeDefaultButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      final BreakpointManager breakpointManager=DebuggerManagerEx.getInstanceEx(myProject).getBreakpointManager();
      final String suspendPolicy=getSelectedSuspendPolicy();
      breakpointManager.setDefaultSuspendPolicy(breakpointCategory,suspendPolicy);
      updateSuspendPolicyRbFont();
      if (DebuggerSettings.SUSPEND_THREAD.equals(suspendPolicy)) {
        mySuspendThreadRadio.requestFocus();
      }
 else       if (DebuggerSettings.SUSPEND_NONE.equals(suspendPolicy)) {
        mySuspendNoneRadio.requestFocus();
      }
 else {
        mySuspendAllRadio.requestFocus();
      }
      myMakeDefaultButton.setEnabled(false);
    }
  }
);
  myConditionCombo=new DebuggerExpressionComboBox(project,"LineBreakpoint condition");
  myLogExpressionCombo=new DebuggerExpressionComboBox(project,"LineBreakpoint logMessage");
  final JComboBox baseBreakpointCombo=new ComboBox();
  myBreakpointComboboxHandler=new BreakpointComboboxHandler(myProject,baseBreakpointCombo);
  baseBreakpointCombo.setRenderer(new BreakpointComboRenderer());
  baseBreakpointCombo.addItemListener(new ItemListener(){
    public void itemStateChanged(    final ItemEvent e){
      ComboboxItem item=(ComboboxItem)baseBreakpointCombo.getSelectedItem();
      final boolean enabled=item != null && item.getBreakpoint() != null;
      myLeaveEnabledRadioButton.setEnabled(enabled);
      myDisableAgainRadio.setEnabled(enabled);
      myEnableOrDisableLabel.setEnabled(enabled);
    }
  }
);
  myInstanceFiltersField=new FieldPanel(new MyTextField(),"",null,new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      reloadInstanceFilters();
      EditInstanceFiltersDialog _dialog=new EditInstanceFiltersDialog(myProject);
      _dialog.setFilters(myInstanceFilters);
      _dialog.show();
      if (_dialog.getExitCode() == DialogWrapper.OK_EXIT_CODE) {
        myInstanceFilters=_dialog.getFilters();
        updateInstanceFilterEditor(true);
      }
    }
  }
,null);
  myClassFiltersField=new FieldPanel(new MyTextField(),"",null,new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      reloadClassFilters();
      ClassFilter classFilter=createClassConditionFilter();
      EditClassFiltersDialog _dialog=new EditClassFiltersDialog(myProject,classFilter);
      _dialog.setFilters(myClassFilters,myClassExclusionFilters);
      _dialog.show();
      if (_dialog.getExitCode() == DialogWrapper.OK_EXIT_CODE) {
        myClassFilters=_dialog.getFilters();
        myClassExclusionFilters=_dialog.getExclusionFilters();
        updateClassFilterEditor(true);
      }
    }
  }
,null);
  ToolTipManager.sharedInstance().registerComponent(myClassFiltersField.getTextField());
  ToolTipManager.sharedInstance().registerComponent(myInstanceFiltersField.getTextField());
  JComponent specialBox=createSpecialBox();
  if (specialBox != null) {
    insert(mySpecialBoxPanel,specialBox);
  }
 else {
    mySpecialBoxPanel.setVisible(false);
  }
  final JPanel conditionPanel=new JPanel(new BorderLayout());
  conditionPanel.add(myConditionCombo,BorderLayout.CENTER);
  myConditionMagnifierButton=new FixedSizeButton(myConditionCombo);
  conditionPanel.add(myConditionMagnifierButton,BorderLayout.EAST);
  myConditionMagnifierButton.setFocusable(false);
  myConditionMagnifierButton.addActionListener(new MagnifierButtonAction(project,myConditionCombo,myConditionCheckbox.getText()));
  insert(myConditionComboPanel,conditionPanel);
  insert(myLogExpressionComboPanel,myLogExpressionCombo);
  insert(myDependentBreakpointComboPanel,baseBreakpointCombo);
  insert(myInstanceFiltersFieldPanel,myInstanceFiltersField);
  insert(myClassFiltersFieldPanel,myClassFiltersField);
  DebuggerUIUtil.enableEditorOnCheck(myLogExpressionCheckBox,myLogExpressionCombo);
  ActionListener listener=new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      updateCheckboxes();
    }
  }
;
  myPassCountCheckbox.addActionListener(listener);
  myConditionCheckbox.addActionListener(listener);
  myInstanceFiltersCheckBox.addActionListener(listener);
  myClassFiltersCheckBox.addActionListener(listener);
  DebuggerUIUtil.focusEditorOnCheck(myPassCountCheckbox,myPassCountField);
  DebuggerUIUtil.focusEditorOnCheck(myConditionCheckbox,myConditionCombo);
  DebuggerUIUtil.focusEditorOnCheck(myLogExpressionCheckBox,myLogExpressionCombo);
  DebuggerUIUtil.focusEditorOnCheck(myInstanceFiltersCheckBox,myInstanceFiltersField.getTextField());
  DebuggerUIUtil.focusEditorOnCheck(myClassFiltersCheckBox,myClassFiltersField.getTextField());
}
