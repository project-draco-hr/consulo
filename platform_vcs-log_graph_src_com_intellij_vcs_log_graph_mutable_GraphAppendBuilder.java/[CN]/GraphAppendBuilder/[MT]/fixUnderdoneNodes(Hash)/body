{
  Map<Hash,MutableNode> underdoneNodes=new HashMap<Hash,MutableNode>();
  List<MutableNode> nodesInLaseRow=getLastRowInGraph().getInnerNodeList();
  MutableNode node;
  for (Iterator<MutableNode> iterator=nodesInLaseRow.iterator(); iterator.hasNext(); ) {
    node=iterator.next();
    if (node.getType() != END_COMMIT_NODE) {
      throw new IllegalStateException("bad last row in graph, unexpected node type: " + node.getType());
    }
    if (node.getInnerUpEdges().size() > 1) {
      if (node.getCommitHash().equals(firstHash)) {
        iterator.remove();
        underdoneNodes.put(firstHash,node);
      }
 else {
        node.setType(EDGE_NODE);
        MutableNode newParentNode=new MutableNode(node.getBranch(),node.getCommitHash());
        GraphBuilder.createUsualEdge(node,newParentNode,node.getBranch());
        underdoneNodes.put(node.getCommitHash(),newParentNode);
      }
    }
 else {
      iterator.remove();
      underdoneNodes.put(node.getCommitHash(),node);
    }
  }
  return underdoneNodes;
}
