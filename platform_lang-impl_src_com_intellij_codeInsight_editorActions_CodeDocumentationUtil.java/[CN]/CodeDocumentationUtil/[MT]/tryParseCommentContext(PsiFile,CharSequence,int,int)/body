{
  Commenter langCommenter=LanguageCommenters.INSTANCE.forLanguage(PsiUtilBase.getLanguageAtOffset(file,offset));
  final boolean isInsideCommentLikeCode=langCommenter instanceof CodeDocumentationAwareCommenter;
  if (!isInsideCommentLikeCode) {
    return new CommentContext();
  }
  final CodeDocumentationAwareCommenter commenter=(CodeDocumentationAwareCommenter)langCommenter;
  int commentStartOffset=CharArrayUtil.shiftForward(chars,lineStartOffset," \t");
  boolean docStart=commenter.getDocumentationCommentPrefix() != null && CharArrayUtil.regionMatches(chars,commentStartOffset,commenter.getDocumentationCommentPrefix());
  boolean cStyleStart=commenter.getBlockCommentPrefix() != null && CharArrayUtil.regionMatches(chars,commentStartOffset,commenter.getBlockCommentPrefix());
  boolean docAsterisk=commenter.getDocumentationCommentLinePrefix() != null && CharArrayUtil.regionMatches(chars,commentStartOffset,commenter.getDocumentationCommentLinePrefix());
  final int firstNonSpaceInLine=CharArrayUtil.shiftForward(chars,offset," \t");
  boolean slashSlash=commenter.getLineCommentPrefix() != null && CharArrayUtil.regionMatches(chars,commentStartOffset,commenter.getLineCommentPrefix()) && firstNonSpaceInLine < chars.length() && chars.charAt(firstNonSpaceInLine) != '\n';
  return new CommentContext(commenter,docStart,cStyleStart,docAsterisk,slashSlash,commentStartOffset);
}
