{
  myFixture.addFileToProject("Transf.groovy","import org.codehaus.groovy.ast.*\n" + "import org.codehaus.groovy.control.*\n" + "import org.codehaus.groovy.transform.*\n"+ "@GroovyASTTransformation(phase = CompilePhase.CONVERSION)\n"+ "public class Transf implements ASTTransformation {\n"+ "  void visit(ASTNode[] nodes, SourceUnit sourceUnit) {\n"+ "    ModuleNode module = nodes[0]\n"+ "    for (clazz in module.classes) {\n"+ "      if (clazz.name.contains('Bar')) "+ "        module.addStaticImportClass('Foo', ClassHelper.makeWithoutCaching(Foo.class));\n"+ "    }\n"+ "  }\n"+ "}");
  myFixture.addFileToProject("Foo.groovy","class Foo {\n" + "static def autoImported() { 239 }\n" + "}");
  CompilerConfiguration.getInstance(getProject()).addResourceFilePattern("*.ASTTransformation");
  myFixture.addFileToProject("META-INF/services/org.codehaus.groovy.transform.ASTTransformation","Transf");
}
