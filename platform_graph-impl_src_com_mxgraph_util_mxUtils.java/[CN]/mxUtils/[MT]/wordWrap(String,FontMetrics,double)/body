{
  List<String> result=new ArrayList<String>();
  String[] lines=text.split("\n");
  for (int i=0; i < lines.length; i++) {
    int lineWidth=0;
    int charCount=0;
    StringBuilder currentLine=new StringBuilder();
    String[] words=lines[i].split("\\s+");
    Stack<String> wordStack=new Stack<String>();
    for (int j=words.length - 1; j >= 0; j--) {
      wordStack.push(words[j]);
    }
    while (!wordStack.isEmpty()) {
      String word=wordStack.pop();
      int whitespaceCount=0;
      if (word.length() > 0) {
        char firstWordLetter=word.charAt(0);
        int letterIndex=lines[i].indexOf(firstWordLetter,charCount);
        String whitespace=lines[i].substring(charCount,letterIndex);
        whitespaceCount=whitespace.length();
        word=whitespace.concat(word);
      }
      double wordLength;
      if (lineWidth > 0) {
        wordLength=metrics.stringWidth(word);
      }
 else {
        wordLength=metrics.stringWidth(word.trim());
      }
      if (lineWidth + wordLength > width) {
        if (lineWidth > 0) {
          result.add(currentLine.toString());
          currentLine=new StringBuilder();
          wordStack.push(word.trim());
          lineWidth=0;
        }
 else         if (mxConstants.SPLIT_WORDS) {
          word=word.trim();
          for (int j=1; j <= word.length(); j++) {
            wordLength=metrics.stringWidth(word.substring(0,j));
            if (lineWidth + wordLength > width) {
              j=j > 1 ? j - 1 : j;
              String chars=word.substring(0,j);
              currentLine=currentLine.append(chars);
              wordStack.push(word.substring(j,word.length()));
              result.add(currentLine.toString());
              currentLine=new StringBuilder();
              lineWidth=0;
              charCount=charCount + chars.length() + whitespaceCount;
              break;
            }
          }
        }
 else {
          word=word.trim();
          result.add(word);
          currentLine=new StringBuilder();
          lineWidth=0;
          charCount=word.length() + whitespaceCount;
        }
      }
 else {
        if (lineWidth > 0) {
          currentLine=currentLine.append(word);
        }
 else {
          currentLine=currentLine.append(word.trim());
        }
        lineWidth+=wordLength;
        charCount+=word.length();
      }
    }
    result.add(currentLine.toString());
  }
  return result.toArray(new String[result.size()]);
}
