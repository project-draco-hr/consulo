{
  final PsiLanguageInjectionHost host=findInjectionHost(editor,file);
  final Configuration configuration=Configuration.getInstance();
  final ArrayList<BaseInjection> injections=new ArrayList<BaseInjection>();
  final ArrayList<PsiAnnotation> annotations=new ArrayList<PsiAnnotation>();
  UnInjectLanguageAction.collectInjections(host,configuration,injections,annotations);
  if (!annotations.isEmpty() || injections.isEmpty())   return;
  final BaseInjection injection=injections.get(0);
  final AbstractInjectionPanel panel;
  if (injection instanceof XmlTagInjection) {
    panel=new XmlTagPanel((XmlTagInjection)injection,project);
  }
 else   if (injection instanceof XmlAttributeInjection) {
    panel=new XmlAttributePanel((XmlAttributeInjection)injection,project);
  }
 else   if (injection instanceof MethodParameterInjection) {
    panel=new MethodParameterPanel((MethodParameterInjection)injection,project);
  }
 else {
    throw new AssertionError(injection);
  }
  panel.reset();
  final DialogBuilder builder=new DialogBuilder(project);
  builder.addOkAction();
  builder.addCancelAction();
  builder.setCenterPanel(panel.getComponent());
  builder.setTitle(getText());
  builder.setOkOperation(new Runnable(){
    public void run(){
      panel.apply();
      configuration.configurationModified();
      FileContentUtil.reparseFiles(project,Collections.<VirtualFile>emptyList(),true);
      builder.getWindow().dispose();
    }
  }
);
  builder.show();
}
