{
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    public void run(){
      if (myProject.isDisposed())       return;
      if (myCurrentSuitesBundle != null) {
        final String message=CodeInsightBundle.message("display.coverage.prompt",suite.getPresentableName());
        final CoverageOptionsProvider coverageOptionsProvider=CoverageOptionsProvider.getInstance(myProject);
        final DialogWrapper.DoNotAskOption doNotAskOption=new DialogWrapper.DoNotAskOption(){
          @Override public boolean isToBeShown(){
            return coverageOptionsProvider.getOptionToReplace() == 3;
          }
          @Override public void setToBeShown(          boolean value,          int exitCode){
            coverageOptionsProvider.setOptionsToReplace(value ? 3 : exitCode);
          }
          @Override public boolean canBeHidden(){
            return true;
          }
          @Override public boolean shouldSaveOptionsOnCancel(){
            return true;
          }
          @NotNull @Override public String getDoNotShowMessage(){
            return CommonBundle.message("dialog.options.do.not.show");
          }
        }
;
        final String[] options=myCurrentSuitesBundle.getCoverageEngine() == suite.getCoverageEngine() ? new String[]{REPLACE_ACTIVE_SUITES,ADD_TO_ACTIVE_SUITES,DO_NOT_APPLY_COLLECTED_COVERAGE} : new String[]{REPLACE_ACTIVE_SUITES,DO_NOT_APPLY_COLLECTED_COVERAGE};
        final int answer=doNotAskOption.isToBeShown() ? Messages.showDialog(message,CodeInsightBundle.message("code.coverage"),options,1,Messages.getQuestionIcon(),doNotAskOption) : coverageOptionsProvider.getOptionToReplace();
        if (answer == DialogWrapper.OK_EXIT_CODE) {
          chooseSuitesBundle(new CoverageSuitesBundle(suite));
        }
 else         if (answer == 1) {
          chooseSuitesBundle(new CoverageSuitesBundle(ArrayUtil.append(myCurrentSuitesBundle.getSuites(),suite)));
        }
      }
 else {
        chooseSuitesBundle(new CoverageSuitesBundle(suite));
      }
    }
  }
);
}
