{
class CancelledException extends RuntimeException {
  }
  try {
    VfsUtilCore.visitChildrenRecursively(file,new VirtualFileVisitor(){
      @Override public boolean visitFile(      @NotNull VirtualFile file){
        if (myProgressIndicator.isCanceled()) {
          throw new CancelledException();
        }
        if (!myProcessedFiles.add(file)) {
          return false;
        }
        if (file.isDirectory()) {
          file.getChildren();
          file.refresh(false,false);
        }
 else {
          final FileType fileType=file.getFileType();
          if (myDetectorsByFileType.containsKey(fileType)) {
            myProgressIndicator.setText2(file.getPresentableUrl());
            try {
              final FileContent fileContent=new FileContentImpl(file,file.contentsToByteArray(false));
              for (              FrameworkDetectorData detector : myDetectorsByFileType.get(fileType)) {
                if (detector.myFilePattern.accepts(fileContent)) {
                  detector.mySuitableFiles.add(file);
                }
              }
            }
 catch (            IOException e) {
              LOG.info(e);
            }
          }
        }
        return true;
      }
    }
);
  }
 catch (  CancelledException ignored) {
  }
}
