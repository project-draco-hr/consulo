{
  if (prototypes == null)   return;
  for (  PsiMethod prototype : prototypes) {
    final PsiType prototypeReturnType=prototype.getReturnType();
    PsiMethod existing=myClass.findMethodBySignature(prototype,true);
    if (existing != null) {
      final PsiType returnType=existing.getReturnType();
      if (!RefactoringUtil.equivalentTypes(prototypeReturnType,returnType,myClass.getManager())) {
        final String descr=PsiFormatUtil.formatMethod(existing,PsiSubstitutor.EMPTY,PsiFormatUtil.SHOW_NAME | PsiFormatUtil.SHOW_PARAMETERS | PsiFormatUtil.SHOW_TYPE,PsiFormatUtil.SHOW_TYPE);
        String message="There already is a method " + ConflictsUtil.htmlEmphasize(descr) + " which differs from "+ methodRole+ " "+ ConflictsUtil.htmlEmphasize(prototype.getName())+ " by return type only.";
        conflicts.add(message);
      }
    }
  }
}
