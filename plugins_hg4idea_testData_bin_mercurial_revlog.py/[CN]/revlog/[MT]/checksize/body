def checksize(self):
    expected = 0
    if len(self):
        expected = max(0, self.end((len(self) - 1)))
    try:
        f = self.opener(self.datafile)
        f.seek(0, 2)
        actual = f.tell()
        dd = (actual - expected)
    except IOError as inst:
        if (inst.errno != errno.ENOENT):
            raise
        dd = 0
    try:
        f = self.opener(self.indexfile)
        f.seek(0, 2)
        actual = f.tell()
        s = self._io.size
        i = max(0, (actual // s))
        di = (actual - (i * s))
        if self._inline:
            databytes = 0
            for r in self:
                databytes += max(0, self.length(r))
            dd = 0
            di = ((actual - (len(self) * s)) - databytes)
    except IOError as inst:
        if (inst.errno != errno.ENOENT):
            raise
        di = 0
    return (dd, di)
