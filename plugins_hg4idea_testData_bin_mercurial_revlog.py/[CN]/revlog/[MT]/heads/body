def heads(self, start=None, stop=None):
    'return the list of all nodes that have no children\n\n        if start is specified, only heads that are descendants of\n        start will be returned\n        if stop is specified, it will consider all the revs from stop\n        as if they had no children\n        '
    if ((start is None) and (stop is None)):
        count = len(self)
        if (not count):
            return [nullid]
        ishead = ([1] * (count + 1))
        index = self.index
        for r in xrange(count):
            e = index[r]
            ishead[e[5]] = ishead[e[6]] = 0
        return [self.node(r) for r in xrange(count) if ishead[r]]
    if (start is None):
        start = nullid
    if (stop is None):
        stop = []
    stoprevs = set([self.rev(n) for n in stop])
    startrev = self.rev(start)
    reachable = set((startrev,))
    heads = set((startrev,))
    parentrevs = self.parentrevs
    for r in xrange((startrev + 1), len(self)):
        for p in parentrevs(r):
            if (p in reachable):
                if (r not in stoprevs):
                    reachable.add(r)
                heads.add(r)
            if ((p in heads) and (p not in stoprevs)):
                heads.remove(p)
    return [self.node(r) for r in heads]
