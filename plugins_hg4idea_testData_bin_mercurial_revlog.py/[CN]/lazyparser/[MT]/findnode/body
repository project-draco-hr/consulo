def findnode(self, node):
    'search backwards through the index file for a specific node'
    if self.allmap:
        return None
    if (self.mapfind_count > 8):
        self.loadmap()
        if (node in self.map):
            return node
        return None
    self.mapfind_count += 1
    last = (self.l - 1)
    while (self.index[last] != None):
        if (last == 0):
            self.all = 1
            self.allmap = 1
            return None
        last -= 1
    end = ((last + 1) * self.s)
    blocksize = (self.s * 256)
    while (end >= 0):
        start = max((end - blocksize), 0)
        self.dataf.seek(start)
        data = self.dataf.read((end - start))
        findend = (end - start)
        while True:
            off = data.find(node, 0, findend)
            findend = off
            if (off >= 0):
                i = (off / self.s)
                off = (i * self.s)
                n = data[(off + ngshaoffset):((off + ngshaoffset) + 20)]
                if (n == node):
                    self.map[n] = (i + (start / self.s))
                    return node
            else:
                break
        end -= blocksize
    return None
