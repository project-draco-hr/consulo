def loadblock(self, blockstart, blocksize, data=None):
    if self.all:
        return
    if (data is None):
        self.dataf.seek(blockstart)
        if ((blockstart + blocksize) > self.datasize):
            blocksize = max((self.datasize - blockstart), 0)
        data = self.dataf.read(blocksize)
    lend = (len(data) / self.s)
    i = (blockstart / self.s)
    off = 0
    if (lend > (len(self.index) - i)):
        lend = (len(self.index) - i)
    for x in xrange(lend):
        if (self.index[(i + x)] is None):
            b = data[off:(off + self.s)]
            self.index[(i + x)] = b
            n = b[ngshaoffset:(ngshaoffset + 20)]
            self.map[n] = (i + x)
        off += self.s
