{
  final Ref<T> result=new Ref<T>();
  final boolean[] cancelled=new boolean[1];
  final Throwable[] exception=new Throwable[1];
  Future<?> future=ExecutorManager.execute(new Runnable(){
    public void run(){
      try {
        result.set(executor.execute());
      }
 catch (      ProcessCanceledException e) {
        cancelled[0]=true;
      }
catch (      Throwable e) {
        exception[0]=e;
      }
    }
  }
);
  MavenFacadeProgressIndicator indicator=myCurrentIndicator;
  while (true) {
    if (indicator.isCanceled())     throw new MavenFacadeProcessCanceledException();
    try {
      future.get(50,TimeUnit.MILLISECONDS);
    }
 catch (    TimeoutException ignore) {
    }
catch (    ExecutionException e) {
      throw rethrowException(e);
    }
catch (    InterruptedException e) {
      throw new MavenFacadeProcessCanceledException();
    }
    if (future.isDone())     break;
  }
  if (cancelled[0])   throw new MavenFacadeProcessCanceledException();
  if (exception[0] != null) {
    if (exception[0] instanceof RuntimeRemoteException)     throw ((RuntimeRemoteException)exception[0]).getCause();
    throw getRethrowable(exception[0]);
  }
  return result.get();
}
