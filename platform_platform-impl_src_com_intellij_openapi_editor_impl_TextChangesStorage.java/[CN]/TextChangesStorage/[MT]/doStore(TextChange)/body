{
  int insertionIndex=0;
  int newChangeStart=change.getStart();
  int newChangeEnd=change.getEnd();
  int storedChangeStart=getChangeIndex(change.getStart());
  int clientShift=0;
  int changeDiff=change.getText().length() - (change.getEnd() - change.getStart());
  boolean updateClientOffsetOnly=false;
  if (storedChangeStart < 0) {
    storedChangeStart=-storedChangeStart - 1;
    if (storedChangeStart >= myChanges.size()) {
      if (storedChangeStart > 0 && storedChangeStart <= myChanges.size()) {
        ChangeEntry changeEntry=myChanges.get(storedChangeStart - 1);
        clientShift=changeEntry.clientStartOffset - changeEntry.change.getStart() + changeEntry.change.getDiff();
      }
      myChanges.add(new ChangeEntry(new TextChangeImpl(change.getText(),change.getStart() - clientShift,change.getEnd() - clientShift),change.getStart()));
      return storedChangeStart;
    }
  }
 else {
    ChangeEntry changeEntry=myChanges.get(storedChangeStart);
    clientShift=changeEntry.clientStartOffset - changeEntry.change.getStart();
  }
  for (int i=storedChangeStart; i < myChanges.size(); i++) {
    ChangeEntry changeEntry=myChanges.get(i);
    int storedClientStart=changeEntry.change.getStart() + clientShift;
    CharSequence storedText=changeEntry.change.getText();
    int storedClientEnd=storedClientStart + storedText.length();
    if (!updateClientOffsetOnly && storedClientStart > newChangeEnd) {
      if (changeDiff != 0) {
        updateClientOffsetOnly=true;
      }
 else {
        break;
      }
    }
    if (updateClientOffsetOnly) {
      changeEntry.clientStartOffset+=changeDiff;
      continue;
    }
    if (storedClientEnd <= newChangeStart) {
      clientShift+=changeEntry.change.getDiff();
      insertionIndex=i + 1;
      continue;
    }
    if (storedClientStart <= newChangeStart && storedClientEnd >= newChangeEnd) {
      StringBuilder adjustedText=new StringBuilder();
      if (storedClientStart < newChangeStart) {
        adjustedText.append(storedText.subSequence(0,newChangeStart - storedClientStart));
      }
      adjustedText.append(change.getText());
      if (storedClientEnd > newChangeEnd) {
        adjustedText.append(storedText.subSequence(newChangeEnd - storedClientStart,storedText.length()));
      }
      if (adjustedText.length() == 0 && changeEntry.change.getStart() == changeEntry.change.getEnd()) {
        myChanges.remove(i);
        insertionIndex=-1;
        updateClientOffsetOnly=true;
        continue;
      }
      TextChangeImpl adjusted=new TextChangeImpl(adjustedText,changeEntry.change.getStart(),changeEntry.change.getEnd());
      myChanges.set(i,new ChangeEntry(adjusted,adjusted.getStart()));
      insertionIndex=-1;
      updateClientOffsetOnly=true;
      continue;
    }
    if (newChangeStart <= storedClientStart && newChangeEnd >= storedClientEnd) {
      myChanges.remove(i);
      insertionIndex=i;
      newChangeEnd-=changeEntry.change.getDiff();
      i--;
      continue;
    }
    if (newChangeStart <= storedClientStart && newChangeEnd > storedClientStart) {
      int numberOfStoredChangeSymbolsToRemove=newChangeEnd - storedClientStart;
      CharSequence adjustedText=storedText.subSequence(numberOfStoredChangeSymbolsToRemove,storedText.length());
      changeEntry.change=new TextChangeImpl(adjustedText,changeEntry.change.getStart(),changeEntry.change.getEnd());
      newChangeEnd-=numberOfStoredChangeSymbolsToRemove;
      insertionIndex=i;
      continue;
    }
    if (newChangeStart < storedClientEnd && newChangeEnd >= storedClientEnd) {
      CharSequence adjustedText=storedText.subSequence(0,newChangeStart - storedClientStart);
      TextChangeImpl adjusted=new TextChangeImpl(adjustedText,changeEntry.change.getStart(),changeEntry.change.getEnd());
      myChanges.set(i,new ChangeEntry(adjusted,adjusted.getStart()));
      clientShift+=adjusted.getDiff();
      newChangeEnd-=storedClientEnd - newChangeStart;
      insertionIndex=i + 1;
    }
  }
  if (insertionIndex >= 0) {
    myChanges.add(insertionIndex,new ChangeEntry(new TextChangeImpl(change.getText(),newChangeStart - clientShift,newChangeEnd - clientShift),change.getStart()));
  }
  return insertionIndex;
}
