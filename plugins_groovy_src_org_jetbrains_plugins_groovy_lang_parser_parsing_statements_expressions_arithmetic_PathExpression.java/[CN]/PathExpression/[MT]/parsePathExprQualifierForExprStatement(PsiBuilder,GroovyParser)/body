{
  PsiBuilder.Marker marker=builder.mark();
  final IElementType qualifierType=PrimaryExpression.parsePrimaryExpression(builder,parser);
  if (qualifierType != WRONGWAY) {
    Result result;
    if (isPathElementStart(builder)) {
      PsiBuilder.Marker newMarker=marker.precede();
      marker.drop();
      if (checkForLCurly(builder)) {
        PsiBuilder.Marker argsMarker=builder.mark();
        argsMarker.done(ARGUMENTS);
        ParserUtils.getToken(builder,mNLS);
        result=pathElementParse(builder,newMarker,parser,qualifierType,METHOD_CALL);
      }
 else {
        result=pathElementParse(builder,newMarker,parser,qualifierType,INVOKED_EXPR);
      }
    }
 else {
      marker.drop();
      result=INVOKED_EXPR;
    }
    return result;
  }
 else {
    marker.drop();
    return WRONG_WAY;
  }
}
