{
  ParserUtils.getToken(builder,mAT);
  if (ParserUtils.getToken(builder,mIDENT) || ParserUtils.getToken(builder,mSTRING_LITERAL) || ParserUtils.getToken(builder,mGSTRING_LITERAL)) {
    return REFERENCE_EXPRESSION;
  }
  final IElementType tokenType=builder.getTokenType();
  if (mGSTRING_BEGIN.equals(tokenType)) {
    StringConstructorExpression.parse(builder,parser);
    return PATH_PROPERTY_REFERENCE;
  }
  if (mREGEX_BEGIN.equals(tokenType)) {
    return RegexConstructorExpression.parse(builder,parser) ? PATH_PROPERTY_REFERENCE : REFERENCE_EXPRESSION;
  }
  if (mDOLLAR_SLASH_REGEX_BEGIN.equals(tokenType)) {
    return DollarSlashRegexConstructorExpression.parse(builder,parser) ? PATH_PROPERTY_REFERENCE : REFERENCE_EXPRESSION;
  }
  if (mLCURLY.equals(tokenType)) {
    OpenOrClosableBlock.parseOpenBlock(builder,parser);
    return PATH_PROPERTY_REFERENCE;
  }
  if (mLPAREN.equals(tokenType)) {
    PrimaryExpression.parenthesizedExprParse(builder,parser);
    return PATH_PROPERTY_REFERENCE;
  }
  if (TokenSets.KEYWORDS.contains(builder.getTokenType())) {
    builder.advanceLexer();
    return REFERENCE_EXPRESSION;
  }
  return WRONGWAY;
}
