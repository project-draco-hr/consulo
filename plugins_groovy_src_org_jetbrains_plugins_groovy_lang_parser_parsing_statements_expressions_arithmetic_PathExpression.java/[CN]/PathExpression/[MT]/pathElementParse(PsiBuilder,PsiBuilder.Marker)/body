{
  GroovyElementType res;
  if (DOTS.contains(builder.getTokenType()) || ParserUtils.lookAhead(builder,mNLS,mDOT)) {
    if (ParserUtils.lookAhead(builder,mNLS,mDOT)) {
      ParserUtils.getToken(builder,mNLS);
    }
    ParserUtils.getToken(builder,DOTS);
    ParserUtils.getToken(builder,mNLS);
    TypeArguments.parse(builder);
    res=namePartParse(builder);
    if (!res.equals(WRONGWAY)) {
      PsiBuilder.Marker newMarker=marker.precede();
      marker.done(res);
      if (mLCURLY.equals(builder.getTokenType())) {
        PsiBuilder.Marker argsMarker=builder.mark();
        argsMarker.done(ARGUMENTS);
      }
      pathElementParse(builder,newMarker);
    }
 else {
      builder.error(GroovyBundle.message("path.selector.expected"));
      marker.drop();
    }
  }
 else   if (mLPAREN.equals(builder.getTokenType())) {
    PrimaryExpression.methodCallArgsParse(builder);
    if (mLCURLY.equals(builder.getTokenType()) || ParserUtils.lookAhead(builder,mNLS,mLCURLY)) {
      ParserUtils.getToken(builder,mNLS);
      pathElementParse(builder,marker);
    }
 else {
      PsiBuilder.Marker newMarker=marker.precede();
      marker.done(PATH_METHOD_CALL);
      pathElementParse(builder,newMarker);
    }
  }
 else   if (mLCURLY.equals(builder.getTokenType())) {
    appendedBlockParse(builder);
    if (mLCURLY.equals(builder.getTokenType())) {
      pathElementParse(builder,marker);
    }
 else {
      PsiBuilder.Marker newMarker=marker.precede();
      marker.done(PATH_METHOD_CALL);
      pathElementParse(builder,newMarker);
    }
  }
 else   if (mLBRACK.equals(builder.getTokenType()) && !ParserUtils.lookAhead(builder,mLBRACK,mCOLON) && !ParserUtils.lookAhead(builder,mLBRACK,mNLS,mCOLON)) {
    indexPropertyArgsParse(builder);
    PsiBuilder.Marker newMarker=marker.precede();
    marker.done(PATH_INDEX_PROPERTY);
    if (mLCURLY.equals(builder.getTokenType())) {
      PsiBuilder.Marker argsMarker=builder.mark();
      argsMarker.done(ARGUMENTS);
    }
    pathElementParse(builder,newMarker);
  }
 else {
    marker.drop();
  }
  return PATH_EXPRESSION;
}
