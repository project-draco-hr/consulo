{
  PsiBuilder.Marker marker=builder.mark();
  GroovyElementType result=PrimaryExpression.parse(builder);
  if (!WRONGWAY.equals(result)) {
    if (isPathElementStart(builder)) {
      PsiBuilder.Marker newMarker=marker.precede();
      marker.drop();
      if (mLCURLY.equals(builder.getTokenType())) {
        PsiBuilder.Marker argsMarker=builder.mark();
        argsMarker.done(ARGUMENTS);
      }
      pathElementParse(builder,newMarker);
      return PATH_EXPRESSION;
    }
 else {
      marker.drop();
    }
  }
 else {
    marker.drop();
  }
  return result;
}
