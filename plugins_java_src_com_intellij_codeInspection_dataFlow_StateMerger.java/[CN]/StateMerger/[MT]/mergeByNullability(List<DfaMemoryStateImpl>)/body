{
  MultiMap<Integer,DfaMemoryStateImpl> byHash=new MultiMap<Integer,DfaMemoryStateImpl>();
  for (  DfaMemoryStateImpl state : states) {
    ProgressManager.checkCanceled();
    byHash.putValue(state.getPartialHashCode(false,false),state);
  }
  for (  Integer key : byHash.keySet()) {
    Collection<DfaMemoryStateImpl> similarStates=byHash.get(key);
    if (similarStates.size() < 2)     continue;
    for (    final DfaMemoryStateImpl state1 : similarStates) {
      ProgressManager.checkCanceled();
      for (      final DfaVariableValue var : state1.getChangedVariables()) {
        if (state1.getVariableState(var).getNullability() != Nullness.NULLABLE) {
          continue;
        }
        List<DfaMemoryStateImpl> complementary=ContainerUtil.filter(similarStates,new Condition<DfaMemoryStateImpl>(){
          @Override public boolean value(          DfaMemoryStateImpl state2){
            return state1.equalsSuperficially(state2) && state1.equalsByRelations(state2) && areEquivalentModuloVar(state1,state2,var)&& areVarStatesEqualModuloNullability(state1,state2,var);
          }
        }
);
        if (complementary.size() > 1) {
          DfaMemoryStateImpl copy=state1.createCopy();
          mergeUnknowns(copy,complementary);
          return getMergeResult(states,ContainerUtil.newIdentityTroveSet(complementary),copy);
        }
      }
    }
  }
  return null;
}
