{
  final MultiMap<UnorderedPair<DfaValue>,DfaMemoryStateImpl> statesByEq=new MultiMap<UnorderedPair<DfaValue>,DfaMemoryStateImpl>();
  for (  DfaMemoryStateImpl state : states) {
    ProgressManager.checkCanceled();
    for (    UnorderedPair<DfaValue> pair : getEqPairs(state)) {
      statesByEq.putValue(pair,state);
    }
  }
  for (  final DfaMemoryStateImpl state : states) {
    ProgressManager.checkCanceled();
    MultiMap<DfaVariableValue,DfaValue> distincts=getDistinctsMap(state);
    for (    DfaVariableValue var : distincts.keySet()) {
      Map<DfaValue,Collection<DfaMemoryStateImpl>> statesByValue=getCompatibleStatesByValue(state,var,distincts,statesByEq);
      if (statesByValue == null) {
        continue;
      }
      final THashSet<DfaMemoryStateImpl> complementaryStates=findComplementaryStates(var,statesByValue,state);
      if (complementaryStates == null) {
        continue;
      }
      DfaMemoryStateImpl copy=copyWithoutVar(state,var).createCopy();
      complementaryStates.add(state);
      mergeNullableState(var,copy,complementaryStates);
      mergeUnknowns(copy,complementaryStates);
      return getMergeResult(states,complementaryStates,copy);
    }
  }
  return null;
}
