{
  super(new BorderLayout());
  myChangeLists=changeLists;
  myChangesTree=new Tree(buildTreeModel()){
    @Override public boolean getScrollableTracksViewportWidth(){
      return true;
    }
  }
;
  myChangesTree.setRootVisible(false);
  myChangesTree.setShowsRootHandles(true);
  myCellRenderer=new CommittedChangeListRenderer(IssueNavigationConfiguration.getInstance(project));
  myChangesTree.setCellRenderer(myCellRenderer);
  TreeUtil.expandAll(myChangesTree);
  myChangesView=new RepositoryChangesBrowser(project,changeLists);
  myChangesView.getListPanel().setBorder(null);
  myChangesTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      updateBySelectionChange();
    }
  }
);
  myChangesTree.addMouseListener(new LinkMouseListener(project));
  myLeftPanel=new JPanel(new BorderLayout());
  myFilterSplitter=new Splitter(false,0.5f);
  myFilterSplitter.setSecondComponent(new JScrollPane(myChangesTree));
  myLeftPanel.add(myFilterSplitter,BorderLayout.CENTER);
  final Splitter splitter=new Splitter(false,0.7f);
  splitter.setFirstComponent(myLeftPanel);
  splitter.setSecondComponent(myChangesView);
  add(splitter,BorderLayout.CENTER);
  mySplitterProportionsData.externalizeFromDimensionService("CommittedChanges.SplitterProportions");
  mySplitterProportionsData.restoreSplitterProportions(this);
  updateBySelectionChange();
  ActionManager.getInstance().getAction("CommittedChanges.Details").registerCustomShortcutSet(new CustomShortcutSet(KeymapManager.getInstance().getActiveKeymap().getShortcuts(IdeActions.ACTION_QUICK_JAVADOC)),this);
  myCopyProvider=new TreeCopyProvider(myChangesTree);
}
