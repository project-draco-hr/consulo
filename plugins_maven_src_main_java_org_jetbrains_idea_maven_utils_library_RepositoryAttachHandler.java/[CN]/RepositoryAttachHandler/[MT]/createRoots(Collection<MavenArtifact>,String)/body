{
  final List<OrderRoot> result=new ArrayList<OrderRoot>();
  final VirtualFileManager manager=VirtualFileManager.getInstance();
  for (  MavenArtifact each : artifacts) {
    try {
      File repoFile=each.getFile();
      File toFile=repoFile;
      if (copyTo != null) {
        toFile=new File(copyTo,repoFile.getName());
        if (repoFile.exists()) {
          FileUtil.copy(repoFile,toFile);
        }
      }
      manager.refreshAndFindFileByUrl(VfsUtil.pathToUrl(FileUtil.toSystemIndependentName(toFile.getPath())));
      final String url=VfsUtil.getUrlForLibraryRoot(toFile);
      final VirtualFile file=manager.refreshAndFindFileByUrl(url);
      if (file != null) {
        OrderRootType rootType;
        if (MavenExtraArtifactType.DOCS.getDefaultClassifier().equals(each.getClassifier())) {
          rootType=OrderRootType.DOCUMENTATION;
        }
 else         if (MavenExtraArtifactType.SOURCES.getDefaultClassifier().equals(each.getClassifier())) {
          rootType=OrderRootType.SOURCES;
        }
 else {
          rootType=OrderRootType.CLASSES;
        }
        result.add(new OrderRoot(file,rootType));
      }
    }
 catch (    MalformedURLException e) {
      MavenLog.LOG.warn(e);
    }
catch (    IOException e) {
      MavenLog.LOG.warn(e);
    }
  }
  return result;
}
