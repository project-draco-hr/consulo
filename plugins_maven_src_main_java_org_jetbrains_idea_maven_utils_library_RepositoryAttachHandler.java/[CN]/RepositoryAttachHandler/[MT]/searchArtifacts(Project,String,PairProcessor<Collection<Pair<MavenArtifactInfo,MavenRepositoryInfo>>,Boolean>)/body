{
  if (coord == null || coord.length() == 0)   return;
  final MavenArtifactInfo template;
  if (coord.indexOf(':') == -1 && Character.isUpperCase(coord.charAt(0))) {
    template=new MavenArtifactInfo(null,null,null,"jar",null,coord,null);
  }
 else {
    template=new MavenArtifactInfo(getMavenId(coord),"jar",null);
  }
  ProgressManager.getInstance().run(new Task.Backgroundable(project,"Maven",false){
    public void run(    @NotNull ProgressIndicator indicator){
      String[] urls=MavenRepositoryServicesManager.getServiceUrls();
      boolean tooManyResults=false;
      final AtomicBoolean proceedFlag=new AtomicBoolean(true);
      for (int i=0, length=urls.length; i < length; i++) {
        if (!proceedFlag.get())         break;
        final List<Pair<MavenArtifactInfo,MavenRepositoryInfo>> resultList=new ArrayList<Pair<MavenArtifactInfo,MavenRepositoryInfo>>();
        final Ref<Boolean> tooManyRef=Ref.create(null);
        try {
          String serviceUrl=urls[i];
          final List<MavenArtifactInfo> artifacts;
          artifacts=MavenRepositoryServicesManager.findArtifacts(template,serviceUrl);
          if (!artifacts.isEmpty()) {
            if (!proceedFlag.get())             break;
            final List<MavenRepositoryInfo> repositories=MavenRepositoryServicesManager.getRepositories(serviceUrl);
            final HashMap<String,MavenRepositoryInfo> map=new HashMap<String,MavenRepositoryInfo>();
            for (            MavenRepositoryInfo repository : repositories) {
              map.put(repository.getId(),repository);
            }
            for (            MavenArtifactInfo artifact : artifacts) {
              if (artifact == null) {
                tooManyResults=true;
              }
 else {
                resultList.add(Pair.create(artifact,map.get(artifact.getRepositoryId())));
              }
            }
          }
          tooManyRef.set(i == length - 1 ? tooManyResults : null);
        }
 catch (        Exception e) {
          MavenLog.LOG.error(e);
        }
 finally {
          if (!proceedFlag.get())           break;
          ApplicationManager.getApplication().invokeLater(new Runnable(){
            public void run(){
              if (!proceedFlag.get())               return;
              proceedFlag.set(resultProcessor.process(resultList,tooManyRef.get()));
            }
          }
);
        }
      }
    }
  }
);
}
