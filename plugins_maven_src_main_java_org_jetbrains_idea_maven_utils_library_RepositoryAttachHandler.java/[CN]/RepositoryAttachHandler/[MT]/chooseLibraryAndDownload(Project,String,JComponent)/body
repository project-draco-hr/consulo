{
  final RepositoryAttachDialog dialog=new RepositoryAttachDialog(project,false,initialFilter);
  dialog.setTitle("Download Library From Maven Repository");
  dialog.show();
  if (dialog.getExitCode() != DialogWrapper.OK_EXIT_CODE) {
    return null;
  }
  final String copyTo=dialog.getDirectoryPath();
  final String coord=dialog.getCoordinateText();
  final boolean attachJavaDoc=dialog.getAttachJavaDoc();
  final boolean attachSources=dialog.getAttachSources();
  final SmartList<MavenExtraArtifactType> extraTypes=new SmartList<MavenExtraArtifactType>();
  if (attachSources)   extraTypes.add(MavenExtraArtifactType.SOURCES);
  if (attachJavaDoc)   extraTypes.add(MavenExtraArtifactType.DOCS);
  final Ref<NewLibraryConfiguration> result=Ref.create(null);
  resolveLibrary(project,coord,extraTypes,dialog.getRepositories(),new Processor<List<MavenArtifact>>(){
    public boolean process(    final List<MavenArtifact> artifacts){
      if (!artifacts.isEmpty()) {
        AccessToken accessToken=WriteAction.start();
        try {
          final List<OrderRoot> roots=createRoots(artifacts,copyTo);
          result.set(new NewLibraryConfiguration(coord,RepositoryLibraryType.getInstance(),new RepositoryLibraryProperties(coord)){
            @Override public void addRoots(            @NotNull LibraryEditor editor){
              editor.addRoots(roots);
            }
          }
);
        }
  finally {
          accessToken.finish();
        }
        final StringBuilder sb=new StringBuilder();
        final String title="The following files were downloaded:";
        sb.append("<ol>");
        for (        MavenArtifact each : artifacts) {
          sb.append("<li>");
          sb.append(each.getFile().getName());
          final String scope=each.getScope();
          if (scope != null) {
            sb.append(" (");
            sb.append(scope);
            sb.append(")");
          }
          sb.append("</li>");
        }
        sb.append("</ol>");
        Notifications.Bus.notify(new Notification("Repository",title,sb.toString(),NotificationType.INFORMATION),project);
      }
      return true;
    }
  }
);
  NewLibraryConfiguration configuration=result.get();
  if (configuration == null) {
    Messages.showErrorDialog(parentComponent,"No files were downloaded for " + coord,CommonBundle.getErrorTitle());
  }
  return configuration;
}
