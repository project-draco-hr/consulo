{
  super(new BorderLayout());
  myTableModel=tableModel;
  myTableModel.sortByChangesColumn(ChangeListColumn.DATE,SortableColumnModel.SORT_DESCENDING);
  myChangeListsView=new TableView(myTableModel);
  myChangeListsView.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myChangesView=new ChangesBrowser(project,tableModel.getItems(),Collections.<Change>emptyList(),null,false,false);
  myChangesView.getListPanel().setBorder(null);
  myChangeListsView.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      updateBySelectionChange();
    }
  }
);
  myCommitMessageArea=new JTextArea();
  myCommitMessageArea.setRows(3);
  myCommitMessageArea.setWrapStyleWord(true);
  myCommitMessageArea.setLineWrap(true);
  myCommitMessageArea.setEditable(false);
  JPanel commitPanel=new JPanel(new BorderLayout());
  commitPanel.add(new JScrollPane(myCommitMessageArea),BorderLayout.CENTER);
  final JComponent separator=SeparatorFactory.createSeparator(VcsBundle.message("label.commit.comment"),myCommitMessageArea);
  commitPanel.add(separator,BorderLayout.NORTH);
  myLeftPanel=new JPanel(new BorderLayout());
  myLeftPanel.add(new JScrollPane(myChangeListsView),BorderLayout.CENTER);
  JSplitPane leftSplitter=new JSplitPane(JSplitPane.VERTICAL_SPLIT);
  leftSplitter.setTopComponent(myLeftPanel);
  leftSplitter.setBottomComponent(commitPanel);
  leftSplitter.setDividerLocation(0.6);
  leftSplitter.setResizeWeight(0.5);
  JSplitPane splitter=new JSplitPane();
  splitter.setLeftComponent(leftSplitter);
  splitter.setRightComponent(myChangesView);
  add(splitter,BorderLayout.CENTER);
  updateBySelectionChange();
}
