{
  Scanner scanner=new Scanner(data);
  Pattern generalPattern=Pattern.compile("visual line: (\\d+), offsets: (\\d+)-(\\d+), logical lines: (\\d+)-(\\d+), logical columns: (\\d+)-(\\d+), " + "end visual column: (\\d+), fold regions: \\[([^\\]]*)\\], tab data: \\[([^\\]]*)\\]");
  Pattern foldPattern=Pattern.compile("width in columns: (-?\\d+), start X: (-?\\d+), fold region: FoldRegion [-+]\\((\\d+):(\\d+)");
  Pattern tabPattern=Pattern.compile("\\[(\\d+), width: (\\d+)");
  final SoftWrapModelImpl softWrapModel=(SoftWrapModelImpl)myEditor.getSoftWrapModel();
  final CachingSoftWrapDataMapper mapper=softWrapModel.getDataMapper();
  mapper.release();
  final FoldingModelEx foldingModel=(FoldingModelEx)myEditor.getFoldingModel();
  while (scanner.findInLine(generalPattern) != null) {
    final MatchResult generalMatch=scanner.match();
    int visualLine=Integer.parseInt(generalMatch.group(1));
    int startOffset=Integer.parseInt(generalMatch.group(2));
    int endOffset=Integer.parseInt(generalMatch.group(3));
    int startLogicalLine=Integer.parseInt(generalMatch.group(4));
    int endLogicalLine=Integer.parseInt(generalMatch.group(5));
    int startLogicalColumn=Integer.parseInt(generalMatch.group(6));
    int endLogicalColumn=Integer.parseInt(generalMatch.group(7));
    int endVisualColumn=Integer.parseInt(generalMatch.group(8));
    List<Pair<Integer,FoldRegion>> foldRegions=new ArrayList<Pair<Integer,FoldRegion>>();
    Scanner foldScanner=new Scanner(generalMatch.group(9));
    while (foldScanner.findInLine(foldPattern) != null) {
      final MatchResult foldMatch=foldScanner.match();
      int widthInColumns=Integer.parseInt(foldMatch.group(1));
      int startX=Integer.parseInt(foldMatch.group(2));
      int foldStartOffset=Integer.parseInt(foldMatch.group(3));
      int foldEndOffset=Integer.parseInt(foldMatch.group(4));
      FoldRegion region=null;
      for (      FoldRegion candidate : foldingModel.getAllFoldRegions()) {
        if (candidate.getStartOffset() == foldStartOffset && candidate.getEndOffset() == foldEndOffset) {
          region=candidate;
          break;
        }
      }
      foldRegions.add(new Pair<Integer,FoldRegion>(widthInColumns,region));
    }
    List<Pair<Integer,Integer>> tabData=new ArrayList<Pair<Integer,Integer>>();
    Scanner tabScanner=new Scanner(generalMatch.group(10));
    while (tabScanner.findInLine(tabPattern) != null) {
      final MatchResult tabMatch=tabScanner.match();
      int offset=Integer.parseInt(tabMatch.group(1));
      int widthInColumns=Integer.parseInt(tabMatch.group(2));
      tabData.add(new Pair<Integer,Integer>(offset,widthInColumns));
    }
    mapper.rawAdd(visualLine,startOffset,endOffset,startLogicalLine,startLogicalColumn,endLogicalLine,endLogicalColumn,endVisualColumn,foldRegions,tabData);
  }
}
