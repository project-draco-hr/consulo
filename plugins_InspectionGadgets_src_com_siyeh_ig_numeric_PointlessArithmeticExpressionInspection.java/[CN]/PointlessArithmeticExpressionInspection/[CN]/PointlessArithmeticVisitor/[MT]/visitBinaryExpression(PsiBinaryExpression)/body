{
  super.visitBinaryExpression(expression);
  if (!(expression.getROperand() != null)) {
    return;
  }
  final PsiJavaToken sign=expression.getOperationSign();
  final IElementType tokenType=sign.getTokenType();
  if (!arithmeticTokens.contains(tokenType)) {
    return;
  }
  if (TypeUtils.expressionHasType("java.lang.String",expression)) {
    return;
  }
  final PsiExpression rhs=expression.getROperand();
  final PsiExpression lhs=expression.getLOperand();
  if (rhs == null) {
    return;
  }
  final boolean isPointless;
  if (tokenType.equals(JavaTokenType.PLUS)) {
    isPointless=additionExpressionIsPointless(lhs,rhs);
  }
 else   if (tokenType.equals(JavaTokenType.MINUS)) {
    isPointless=subtractionExpressionIsPointless(rhs);
  }
 else   if (tokenType.equals(JavaTokenType.ASTERISK)) {
    isPointless=multiplyExpressionIsPointless(lhs,rhs);
  }
 else   if (tokenType.equals(JavaTokenType.DIV)) {
    isPointless=divideExpressionIsPointless(rhs);
  }
 else {
    isPointless=false;
  }
  if (!isPointless) {
    return;
  }
  if (rhs.getType() != expression.getType() || lhs.getType() != expression.getType()) {
    return;
  }
  registerError(expression);
}
