{
  final PsiParameterList parameterList=method.getParameterList();
  final PsiParameter[] parameters=parameterList.getParameters();
  if (method.isVarArgs()) {
    if (types.length < parameters.length - 1) {
      return false;
    }
    final PsiParameter lastParameter=parameters[parameters.length - 1];
    PsiType lastParameterType=lastParameter.getType();
    if (!(lastParameterType instanceof PsiArrayType)) {
      return false;
    }
    lastParameterType=substitutorForMethod.substituteAndCapture(lastParameterType);
    if (lastParameter.isVarArgs()) {
      for (int i=0; i < parameters.length - 1; i++) {
        final PsiParameter parm=parameters[i];
        if (parm.isVarArgs()) {
          return false;
        }
        final PsiType argType=types[i];
        if (argType == null) {
          return false;
        }
        final PsiType parameterType=parameters[i].getType();
        final PsiType substitutedParmType=substitutorForMethod.substituteAndCapture(parameterType);
        if (!TypeConversionUtil.isAssignable(substitutedParmType,argType)) {
          return false;
        }
      }
      if (types.length == parameters.length) {
        final PsiType lastArgType=types[types.length - 1];
        if (lastArgType != null && TypeConversionUtil.isAssignable(lastParameterType,lastArgType)) {
          return true;
        }
      }
      final PsiArrayType arrayType=(PsiArrayType)lastParameterType;
      final PsiType componentType=arrayType.getComponentType();
      for (int i=parameters.length - 1; i < types.length; i++) {
        final PsiType argType=types[i];
        if (argType == null || !TypeConversionUtil.isAssignable(componentType,argType)) {
          return false;
        }
      }
    }
 else {
      return false;
    }
  }
 else {
    if (types.length != parameters.length) {
      return false;
    }
    for (int i=0; i < types.length; i++) {
      final PsiType type=types[i];
      if (type == null) {
        return false;
      }
      final PsiType parameterType=parameters[i].getType();
      final PsiType substitutedParameterType=substitutorForMethod.substituteAndCapture(parameterType);
      if (!TypeConversionUtil.isAssignable(substitutedParameterType,type)) {
        return false;
      }
    }
  }
  return true;
}
