{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  final PsiExpression qualifier=methodExpression.getQualifierExpression();
  if (qualifier != null) {
    return;
  }
  PsiClass containingClass=ClassUtils.getContainingClass(expression);
  if (containingClass == null) {
    return;
  }
  final PsiMethod method=expression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiClass methodClass=method.getContainingClass();
  if (methodClass == null || !containingClass.isInheritor(methodClass,true)) {
    return;
  }
  containingClass=ClassUtils.getContainingClass(containingClass);
  final String methodName=methodExpression.getReferenceName();
  while (containingClass != null) {
    final PsiMethod[] methods=containingClass.findMethodsByName(methodName,false);
    if (methods.length > 0 && !methodClass.equals(containingClass)) {
      registerMethodCallError(expression,methodClass,containingClass);
      return;
    }
    containingClass=ClassUtils.getContainingClass(containingClass);
  }
}
