{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  final PsiExpression qualifier=methodExpression.getQualifierExpression();
  if (qualifier != null) {
    return;
  }
  PsiClass containingClass=ClassUtils.getContainingClass(expression);
  if (containingClass == null) {
    return;
  }
  containingClass=ClassUtils.getContainingClass(containingClass);
  final String methodName=methodExpression.getReferenceName();
  while (containingClass != null) {
    final PsiMethod[] methods=containingClass.findMethodsByName(methodName,false);
    if (methods.length > 0) {
      registerMethodCallError(expression);
      return;
    }
    containingClass=ClassUtils.getContainingClass(containingClass);
  }
}
