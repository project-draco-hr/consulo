{
  VirtualFile src=ProjectRootManager.getInstance(getProject()).getContentSourceRoots()[0];
  VirtualFile a=src.findFileByRelativePath("/x/AClass.java");
  assertNotNull(a);
  PsiFile fileA=getPsiManager().findFile(a);
  assertNotNull(fileA);
  fileA.navigate(true);
  Editor editorA=FileEditorManager.getInstance(getProject()).openTextEditor(new OpenFileDescriptor(getProject(),a),true);
  assertNotNull(editorA);
  CodeInsightTestFixtureImpl.instantiateAndRun(fileA,editorA,new int[0],false);
  VirtualFile b=src.findFileByRelativePath("/x/BClass.java");
  assertNotNull(b);
  PsiFile fileB=getPsiManager().findFile(b);
  assertNotNull(fileB);
  fileB.navigate(true);
  Editor editorB=FileEditorManager.getInstance(getProject()).openTextEditor(new OpenFileDescriptor(getProject(),b),true);
  assertNotNull(editorB);
  CodeInsightTestFixtureImpl.instantiateAndRun(fileB,editorB,new int[0],false);
  FileEditor[] allEditors=FileEditorManager.getInstance(getProject()).getAllEditors();
  assertEquals(2,allEditors.length);
  FileEditorManager.getInstance(getProject()).closeFile(a);
  FileEditorManager.getInstance(getProject()).closeFile(b);
  ProjectManagerEx.getInstanceEx().closeAndDispose(getProject());
  LeakHunter.checkLeak(ApplicationManager.getApplication(),PsiFileImpl.class,new Processor<PsiFileImpl>(){
    @Override public boolean process(    PsiFileImpl psiFile){
      return psiFile.getViewProvider().getVirtualFile().getFileSystem() instanceof LocalFileSystem;
    }
  }
);
}
