{
  final PsiElement psiElement=descriptor.getPsiElement();
  PsiMethod method=PsiTreeUtil.getParentOfType(psiElement,PsiMethod.class);
  if (method == null)   return;
  final List<PsiMethod> toAnnotate=new ArrayList<PsiMethod>();
  toAnnotate.add(method);
  List<MethodSignatureBackedByPsiMethod> superMethodSignatures=method.findSuperMethodSignaturesIncludingStatic(true);
  for (  MethodSignatureBackedByPsiMethod superMethodSignature : superMethodSignatures) {
    PsiMethod superMethod=superMethodSignature.getMethod();
    if (!AnnotationUtil.isAnnotated(superMethod,myAnnotation,false,false) && superMethod.getManager().isInProject(superMethod)) {
      int ret=annotateBaseMethod(method,superMethod,project);
      if (ret != 0 && ret != 1)       return;
      if (ret == 0) {
        toAnnotate.add(superMethod);
      }
    }
  }
  if (annotateOverriddenMethods()) {
    PsiMethod[] methods=OverridingMethodsSearch.search(method,GlobalSearchScope.allScope(project),true).toArray(PsiMethod.EMPTY_ARRAY);
    for (    PsiMethod psiMethod : methods) {
      if (AnnotationUtil.isAnnotatingApplicable(psiMethod,myAnnotation) && !AnnotationUtil.isAnnotated(psiMethod,myAnnotation,false,false) && psiMethod.getManager().isInProject(psiMethod)) {
        toAnnotate.add(psiMethod);
      }
    }
  }
  CodeInsightUtilBase.preparePsiElementsForWrite(toAnnotate);
  for (  PsiMethod psiMethod : toAnnotate) {
    annotateMethod(psiMethod);
  }
  UndoUtil.markPsiFileForUndo(method.getContainingFile());
}
