{
  final Project project=myEditor.getProject();
  final boolean clearHighlights=HighlightUsagesHandler.isClearHighlights(myEditor,HighlightManager.getInstance(project));
  if (myClassTypes == null || myClassTypes.length == 0) {
    String text=CodeInsightBundle.message("highlight.exceptions.thrown.notfound");
    HintManager.getInstance().showInformationHint(myEditor,text);
    return;
  }
  new ChooseClassAndDoHighlightRunnable(myClassTypes,myEditor,CodeInsightBundle.message("highlight.exceptions.thrown.chooser.title")){
    protected void selected(    PsiClass... classes){
      List<PsiReference> refs=new ArrayList<PsiReference>();
      final ArrayList<PsiElement> otherOccurrences=new ArrayList<PsiElement>();
      final PsiElementFactory factory=JavaPsiFacade.getInstance(project).getElementFactory();
      for (      PsiClass aClass : classes) {
        addExceptionThrownPlaces(refs,otherOccurrences,factory.createType(aClass),myPlace,myTypeFilter);
      }
      HighlightUsagesHandler.highlightReferences(project,myTarget,refs,myEditor,myFile,clearHighlights);
      TextAttributes attributes=EditorColorsManager.getInstance().getGlobalScheme().getAttributes(EditorColors.SEARCH_RESULT_ATTRIBUTES);
      HighlightUsagesHandler.doHighlightElements(myEditor,new PsiElement[]{myTarget},attributes,clearHighlights);
      HighlightUsagesHandler.highlightOtherOccurrences(otherOccurrences,myEditor,clearHighlights);
      HighlightUsagesHandler.setStatusText(project,LangBundle.message("java.terms.exception"),refs.size(),clearHighlights);
    }
  }
.run();
}
