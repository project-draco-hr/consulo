{
  super.update(e);
  Presentation presentation=e.getPresentation();
  final DataContext dataContext=e.getDataContext();
  Project project=PlatformDataKeys.PROJECT.getData(dataContext);
  if (project == null) {
    presentation.setEnabled(false);
    presentation.setVisible(false);
    return;
  }
  if (!needsFiles()) {
    presentation.setEnabled(true);
    presentation.setVisible(true);
    return;
  }
  VirtualFile[] files=PlatformDataKeys.VIRTUAL_FILE_ARRAY.getData(dataContext);
  if (files == null || files.length == 0) {
    presentation.setEnabled(false);
    presentation.setVisible(true);
    return;
  }
  SvnVcs17 vcs=SvnVcs17.getInstance(project);
  if (!ProjectLevelVcsManager.getInstance(project).checkAllFilesAreUnder(vcs,files)) {
    presentation.setEnabled(false);
    presentation.setVisible(true);
    return;
  }
  boolean enabled=true;
  if (!needsAllFiles()) {
    enabled=false;
  }
  LOG.debug(getClass().getName() + (enabled ? " needsAllFiles" : " needsSingleFile"));
  for (int i=0; i < files.length; i++) {
    VirtualFile file=files[i];
    boolean fileEnabled=false;
    try {
      fileEnabled=isEnabled(project,vcs,file);
    }
 catch (    Throwable t) {
      LOG.debug(t);
    }
    LOG.debug("file:" + file.getPath() + (fileEnabled ? " is enabled" : " is not enabled"));
    if (needsAllFiles()) {
      if (!fileEnabled) {
        LOG.debug("now disabled");
        enabled=false;
        break;
      }
    }
 else {
      if (fileEnabled) {
        LOG.debug("now enabled");
        enabled=true;
      }
    }
  }
  presentation.setEnabled(enabled);
  presentation.setVisible(true);
}
