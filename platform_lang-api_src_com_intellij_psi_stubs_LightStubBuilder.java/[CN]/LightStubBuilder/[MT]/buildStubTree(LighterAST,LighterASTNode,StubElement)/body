{
  final Stack<LighterASTNode> parents=new Stack<LighterASTNode>();
  final TIntStack childNumbers=new TIntStack();
  final Stack<List<LighterASTNode>> kinderGarden=new Stack<List<LighterASTNode>>();
  final Stack<StubElement> parentStubs=new Stack<StubElement>();
  LighterASTNode parent=null;
  LighterASTNode element=root;
  List<LighterASTNode> children=null;
  int childNumber=0;
  StubElement parentStub=rootStub;
  nextElement:   while (element != null) {
    final StubElement stub=createStub(tree,element,parentStub);
    final List<LighterASTNode> kids=tree.getChildren(element);
    if (!kids.isEmpty()) {
      if (parent != null) {
        parents.push(parent);
        childNumbers.push(childNumber);
        kinderGarden.push(children);
        parentStubs.push(parentStub);
      }
      parent=element;
      element=(children=kids).get(childNumber=0);
      parentStub=stub;
      if (!skipChildProcessingWhenBuildingStubs(parent.getTokenType(),element.getTokenType()))       continue nextElement;
    }
    while (children != null && ++childNumber < children.size()) {
      element=children.get(childNumber);
      if (!skipChildProcessingWhenBuildingStubs(parent.getTokenType(),element.getTokenType()))       continue nextElement;
    }
    element=null;
    while (!parents.isEmpty()) {
      parent=parents.pop();
      childNumber=childNumbers.pop();
      children=kinderGarden.pop();
      parentStub=parentStubs.pop();
      while (++childNumber < children.size()) {
        element=children.get(childNumber);
        if (!skipChildProcessingWhenBuildingStubs(parent.getTokenType(),element.getTokenType()))         continue nextElement;
      }
      element=null;
    }
  }
}
