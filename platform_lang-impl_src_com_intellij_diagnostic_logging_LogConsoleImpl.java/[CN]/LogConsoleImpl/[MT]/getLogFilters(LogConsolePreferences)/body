{
abstract class MyFilter extends StandartLogFilter {
    protected MyFilter(    String name){
      super(name);
    }
    public boolean isAcceptable(    String line){
      return prefs.isApplicable(line,myPrevType);
    }
  }
  final ArrayList<LogFilter> filters=new ArrayList<LogFilter>();
  if (myShowStandardFilters) {
    filters.add(new MyFilter(DiagnosticBundle.message("log.console.filter.show.all")){
      @Override public void selectFilter(      LogConsolePreferences prefs){
        prefs.FILTER_ERRORS=false;
        prefs.FILTER_INFO=false;
        prefs.FILTER_WARNINGS=false;
      }
      @Override public boolean isSelected(      LogConsolePreferences prefs){
        return !prefs.FILTER_ERRORS && !prefs.FILTER_INFO && !prefs.FILTER_WARNINGS;
      }
    }
);
    filters.add(new MyFilter(DiagnosticBundle.message("log.console.filter.show.errors.and.warnings")){
      @Override public void selectFilter(      LogConsolePreferences prefs){
        prefs.FILTER_ERRORS=false;
        prefs.FILTER_INFO=true;
        prefs.FILTER_WARNINGS=false;
      }
      @Override public boolean isSelected(      LogConsolePreferences prefs){
        return !prefs.FILTER_ERRORS && prefs.FILTER_INFO && !prefs.FILTER_WARNINGS;
      }
    }
);
    filters.add(new MyFilter(DiagnosticBundle.message("log.console.filter.show.errors")){
      @Override public void selectFilter(      LogConsolePreferences prefs){
        prefs.FILTER_ERRORS=false;
        prefs.FILTER_INFO=true;
        prefs.FILTER_WARNINGS=true;
      }
      @Override public boolean isSelected(      LogConsolePreferences prefs){
        return !prefs.FILTER_ERRORS && prefs.FILTER_INFO && prefs.FILTER_WARNINGS;
      }
    }
);
  }
  filters.addAll(prefs.getRegisteredLogFilters());
  return filters;
}
