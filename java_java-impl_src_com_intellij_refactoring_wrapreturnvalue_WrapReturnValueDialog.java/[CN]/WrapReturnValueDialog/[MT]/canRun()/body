{
  final Project project=sourceMethod.getProject();
  final JavaPsiFacade manager=JavaPsiFacade.getInstance(project);
  final PsiNameHelper nameHelper=manager.getNameHelper();
  if (myCreateInnerClassButton.isSelected()) {
    final String innerClassName=getInnerClassName().trim();
    if (!nameHelper.isIdentifier(innerClassName))     throw new ConfigurationException("\'" + innerClassName + "\' is invalid inner class name");
    final PsiClass containingClass=sourceMethod.getContainingClass();
    if (containingClass != null && containingClass.findInnerClassByName(innerClassName,false) != null) {
      throw new ConfigurationException("Inner class with name \'" + innerClassName + "\' already exist");
    }
  }
 else   if (useExistingClassButton.isSelected()) {
    final String className=existingClassField.getText().trim();
    if (className.length() == 0 || !nameHelper.isQualifiedName(className)) {
      throw new ConfigurationException("\'" + className + "\' is invalid qualified wrapper class name");
    }
    final Object item=myFieldsCombo.getSelectedItem();
    if (item == null) {
      throw new ConfigurationException("Wrapper field not found");
    }
  }
 else {
    final String className=getClassName();
    if (className.length() == 0 || !nameHelper.isIdentifier(className)) {
      throw new ConfigurationException("\'" + className + "\' is invalid wrapper class name");
    }
    final String packageName=getPackageName();
    if (packageName.length() == 0 || !nameHelper.isQualifiedName(packageName)) {
      throw new ConfigurationException("\'" + packageName + "\' is invalid wrapper class package name");
    }
  }
}
