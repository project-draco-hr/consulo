{
  if (!CodeInsightSettings.getInstance().AUTO_POPUP_COMPLETION_LOOKUP)   return Result.CONTINUE;
  if (!Character.isLetter(charTyped) && charTyped != '_') {
    finishAutopopupCompletion(editor,false);
    return Result.CONTINUE;
  }
  if (myAutopopupShown || LookupManager.getActiveLookup(editor) != null) {
    return Result.CONTINUE;
  }
  final CharSequence text=editor.getDocument().getCharsSequence();
  final int offset=editor.getCaretModel().getOffset();
  if (text.length() > offset && Character.isUnicodeIdentifierPart(text.charAt(offset))) {
    return Result.CONTINUE;
  }
  final boolean isMainEditor=FileEditorManager.getInstance(project).getSelectedTextEditor() == editor;
  final Runnable request=new Runnable(){
    @Override public void run(){
      if (project.isDisposed() || !file.isValid())       return;
      if (editor.isDisposed() || isMainEditor && FileEditorManager.getInstance(project).getSelectedTextEditor() != editor)       return;
      new CodeCompletionHandlerBase(CompletionType.BASIC,false,false).invoke(project,editor);
      myAutopopupShown=true;
      trackUserActivity(project,editor);
      final Lookup lookup=LookupManager.getActiveLookup(editor);
      if (lookup != null) {
        lookup.addLookupListener(new LookupAdapter(){
          @Override public void itemSelected(          LookupEvent event){
            myAutopopupShown=false;
          }
          @Override public void lookupCanceled(          LookupEvent event){
            if (event.isCanceledExplicitly()) {
              myAutopopupShown=false;
            }
          }
        }
);
      }
    }
  }
;
  if (ourTestingAutopopup) {
    ApplicationManager.getApplication().invokeLater(request);
  }
 else {
    AutoPopupController.getInstance(project).invokeAutoPopupRunnable(request,CodeInsightSettings.getInstance().AUTO_LOOKUP_DELAY);
  }
  return Result.STOP;
}
