{
  final MessageBusConnection connection=project.getMessageBus().connect();
  connection.subscribe(FileEditorManagerListener.FILE_EDITOR_MANAGER,new FileEditorManagerAdapter(){
    @Override public void selectionChanged(    FileEditorManagerEvent event){
      if (finishAutopopupCompletion(editor,false)) {
        connection.disconnect();
      }
    }
  }
);
  editor.addEditorMouseListener(new EditorMouseAdapter(){
    @Override public void mouseClicked(    EditorMouseEvent e){
      if (finishAutopopupCompletion(editor,false)) {
        editor.removeEditorMouseListener(this);
      }
    }
  }
);
  editor.getCaretModel().addCaretListener(new CaretListener(){
    @Override public void caretPositionChanged(    CaretEvent e){
      if (finishAutopopupCompletion(editor,false)) {
        editor.getCaretModel().removeCaretListener(this);
      }
    }
  }
);
  editor.getSelectionModel().addSelectionListener(new SelectionListener(){
    @Override public void selectionChanged(    SelectionEvent e){
      if (finishAutopopupCompletion(editor,false)) {
        editor.getSelectionModel().removeSelectionListener(this);
      }
    }
  }
);
  editor.getDocument().addDocumentListener(new DocumentAdapter(){
    @Override public void documentChanged(    DocumentEvent e){
      if (finishAutopopupCompletion(editor,false)) {
        editor.getDocument().removeDocumentListener(this);
      }
    }
  }
);
  final LookupManager lookupManager=LookupManager.getInstance(project);
  lookupManager.addPropertyChangeListener(new PropertyChangeListener(){
    @Override public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null && finishAutopopupCompletion(editor,true)) {
        lookupManager.removePropertyChangeListener(this);
      }
    }
  }
);
}
