{
  GridBagConstraints gbConstraints=new GridBagConstraints();
  JPanel panel=new JPanel(new GridBagLayout());
  gbConstraints.anchor=GridBagConstraints.WEST;
  gbConstraints.fill=GridBagConstraints.NONE;
  gbConstraints.gridx=0;
  gbConstraints.insets=new Insets(4,4,4,0);
  gbConstraints.gridwidth=1;
  gbConstraints.weightx=0;
  gbConstraints.weighty=0;
  gbConstraints.gridy=0;
  JLabel type=new JLabel(RefactoringBundle.message("parameter.of.type"));
  panel.add(type,gbConstraints);
  gbConstraints.insets=new Insets(4,4,4,8);
  gbConstraints.gridx++;
  gbConstraints.weightx=1;
  gbConstraints.fill=GridBagConstraints.BOTH;
  myTypeSelector=myTypeSelectorManager.getTypeSelector();
  panel.add(myTypeSelector.getComponent(),gbConstraints);
  gbConstraints.insets=new Insets(4,4,4,8);
  gbConstraints.gridwidth=1;
  gbConstraints.weightx=0;
  gbConstraints.gridx=0;
  gbConstraints.gridy=1;
  gbConstraints.fill=GridBagConstraints.NONE;
  myParameterNameField=new NameSuggestionsField(myProject);
  final JLabel nameLabel=new JLabel(RefactoringBundle.message("name.prompt"));
  nameLabel.setLabelFor(myParameterNameField.getComponent());
  panel.add(nameLabel,gbConstraints);
  gbConstraints.gridx++;
  gbConstraints.insets=new Insets(4,4,4,8);
  gbConstraints.weightx=1;
  gbConstraints.fill=GridBagConstraints.BOTH;
  panel.add(myParameterNameField.getComponent(),gbConstraints);
  myParameterNameField.addDataChangedListener(new NameSuggestionsField.DataChanged(){
    public void dataChanged(){
      validateButtons();
    }
  }
);
  myNameSuggestionsManager=new NameSuggestionsManager(myTypeSelector,myParameterNameField,myNameSuggestionsGenerator,myProject);
  myNameSuggestionsManager.setLabelsFor(type,nameLabel);
  gbConstraints.gridx=0;
  gbConstraints.insets=new Insets(4,0,4,8);
  gbConstraints.gridwidth=2;
  if (myOccurenceNumber > 1 && !myIsInvokedOnDeclaration) {
    gbConstraints.gridy++;
    myCbReplaceAllOccurences=new NonFocusableCheckBox();
    myCbReplaceAllOccurences.setText(RefactoringBundle.message("replace.all.occurences",myOccurenceNumber));
    panel.add(myCbReplaceAllOccurences,gbConstraints);
    myCbReplaceAllOccurences.setSelected(false);
  }
  RefactoringSettings settings=RefactoringSettings.getInstance();
  gbConstraints.gridy++;
  myCbDeclareFinal=new NonFocusableCheckBox();
  myCbDeclareFinal.setText(RefactoringBundle.message("declare.final"));
  final Boolean settingsFinals=settings.INTRODUCE_PARAMETER_CREATE_FINALS;
  myCbDeclareFinal.setSelected(settingsFinals == null ? CodeStyleSettingsManager.getSettings(myProject).GENERATE_FINAL_PARAMETERS : settingsFinals.booleanValue());
  panel.add(myCbDeclareFinal,gbConstraints);
  if (myIsLocalVariable && !myIsInvokedOnDeclaration) {
    myCbDeleteLocalVariable=new StateRestoringCheckBox();
    myCbDeleteLocalVariable.setText(RefactoringBundle.message("delete.variable.definition"));
    if (myCbReplaceAllOccurences != null) {
      gbConstraints.insets=new Insets(0,16,4,8);
    }
    gbConstraints.gridy++;
    panel.add(myCbDeleteLocalVariable,gbConstraints);
    myCbDeleteLocalVariable.setSelected(settings.INTRODUCE_PARAMETER_DELETE_LOCAL_VARIABLE);
    gbConstraints.insets=new Insets(4,0,4,8);
    if (myHasInitializer) {
      myCbUseInitializer=new StateRestoringCheckBox();
      myCbUseInitializer.setText(RefactoringBundle.message("use.variable.initializer.to.initialize.parameter"));
      gbConstraints.gridy++;
      panel.add(myCbUseInitializer,gbConstraints);
    }
  }
  updateControls();
  if (myCbReplaceAllOccurences != null) {
    myCbReplaceAllOccurences.addItemListener(new ItemListener(){
      public void itemStateChanged(      ItemEvent e){
        updateControls();
      }
    }
);
  }
  return panel;
}
