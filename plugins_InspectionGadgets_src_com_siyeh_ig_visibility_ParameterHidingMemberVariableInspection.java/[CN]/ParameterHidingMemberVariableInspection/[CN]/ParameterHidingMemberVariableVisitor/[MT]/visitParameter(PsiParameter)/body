{
  super.visitParameter(variable);
  if (variable.getDeclarationScope() instanceof PsiCatchSection) {
    return;
  }
  final PsiMethod method=PsiTreeUtil.getParentOfType(variable,PsiMethod.class);
  if (method == null) {
    return;
  }
  if (m_ignoreForConstructors && method.isConstructor()) {
    return;
  }
  if (m_ignoreForAbstractMethods && (method.hasModifierProperty(PsiModifier.ABSTRACT) || method.getContainingClass().isInterface())) {
    return;
  }
  if (m_ignoreForPropertySetters) {
    final String methodName=method.getName();
    final PsiType returnType=method.getReturnType();
    if (methodName.startsWith(HardcodedMethodConstants.SET) && PsiType.VOID.equals(returnType)) {
      return;
    }
  }
  final PsiClass aClass=ClassUtils.getContainingClass(variable);
  if (aClass == null) {
    return;
  }
  final String variableName=variable.getName();
  final PsiField[] fields=aClass.getAllFields();
  for (  final PsiField field : fields) {
    if (checkFieldName(field,variableName,aClass)) {
      if (m_ignoreStaticMethodParametersHidingInstanceFields && !field.hasModifierProperty(PsiModifier.STATIC) && method.hasModifierProperty(PsiModifier.STATIC)) {
        continue;
      }
      registerVariableError(variable);
    }
  }
}
