{
  final GridBagLayout layout=new GridBagLayout();
  final JPanel panel=new JPanel(layout);
  final JCheckBox settersCheckBox=new JCheckBox(InspectionGadgetsBundle.message("parameter.hides.member.variable.ignore.setters.option"),m_ignoreForPropertySetters);
  final ButtonModel settersModel=settersCheckBox.getModel();
  settersModel.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      m_ignoreForPropertySetters=settersModel.isSelected();
    }
  }
);
  final JCheckBox ignoreInvisibleFieldsCheck=new JCheckBox(InspectionGadgetsBundle.message("parameter.hides.member.variable.ignore.superclass.option"),m_ignoreInvisibleFields);
  final ButtonModel invisibleFieldsModel=ignoreInvisibleFieldsCheck.getModel();
  invisibleFieldsModel.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      m_ignoreInvisibleFields=invisibleFieldsModel.isSelected();
    }
  }
);
  final JCheckBox constructorCheckBox=new JCheckBox(InspectionGadgetsBundle.message("parameter.hides.member.variable.ignore.constructors.option"),m_ignoreForConstructors);
  final ButtonModel constructorModel=constructorCheckBox.getModel();
  constructorModel.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      m_ignoreForConstructors=constructorModel.isSelected();
    }
  }
);
  final JCheckBox abstractMethodsCheckbox=new JCheckBox(InspectionGadgetsBundle.message("parameter.hides.member.variable.ignore.abstract.methods.option"),m_ignoreForAbstractMethods);
  final ButtonModel abstractMethodsModel=abstractMethodsCheckbox.getModel();
  abstractMethodsModel.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      m_ignoreForAbstractMethods=abstractMethodsModel.isSelected();
    }
  }
);
  final JCheckBox staticMethodsCheckbox=new JCheckBox(InspectionGadgetsBundle.message("parameter.hides.member.variable.ignore.static.parameters.option"),m_ignoreStaticMethodParametersHidingInstanceFields);
  final ButtonModel staticMethodsModel=staticMethodsCheckbox.getModel();
  staticMethodsModel.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      m_ignoreStaticMethodParametersHidingInstanceFields=staticMethodsModel.isSelected();
    }
  }
);
  final GridBagConstraints constraints=new GridBagConstraints();
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.gridx=0;
  constraints.gridy=0;
  panel.add(settersCheckBox,constraints);
  constraints.gridx=0;
  constraints.gridy=1;
  panel.add(constructorCheckBox,constraints);
  constraints.gridx=0;
  constraints.gridy=2;
  panel.add(ignoreInvisibleFieldsCheck,constraints);
  constraints.gridx=0;
  constraints.gridy=3;
  panel.add(staticMethodsCheckbox,constraints);
  constraints.gridx=0;
  constraints.gridy=4;
  panel.add(abstractMethodsCheckbox,constraints);
  return panel;
}
