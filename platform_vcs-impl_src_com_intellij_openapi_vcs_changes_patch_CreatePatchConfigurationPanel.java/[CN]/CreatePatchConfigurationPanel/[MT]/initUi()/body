{
  myPanel=new JPanel(new GridBagLayout());
  final GridBagConstraints gb=new GridBagConstraints(0,0,1,1,0,0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(1,1,1,1),0,0);
  gb.anchor=GridBagConstraints.WEST;
  final JLabel createPatchLabel=new JLabel(VcsBundle.message("create.patch.file.path"));
  myPanel.add(createPatchLabel,gb);
  gb.anchor=GridBagConstraints.NORTHWEST;
  myFileNameField=new TextFieldWithBrowseButton();
  new AdjustComponentWhenShown(){
    @Override protected boolean init(){
      if (myChanges.size() > 0 && myIncludeBaseRevisionTextCheckBox.isSelected()) {
        myFixedSizeSelect.doClick();
      }
      return true;
    }
  }
.install(myPanel);
  ++gb.gridx;
  gb.fill=GridBagConstraints.HORIZONTAL;
  gb.weightx=1;
  myPanel.add(myFileNameField,gb);
  gb.gridx=0;
  ++gb.gridy;
  gb.gridwidth=2;
  myReversePatchCheckbox=new JCheckBox(VcsBundle.message("create.patch.reverse.patch.checkbox"));
  ++gb.gridy;
  myPanel.add(myReversePatchCheckbox,gb);
  ++gb.gridy;
  gb.gridwidth=2;
  final JPanel wrapper=new JPanel(new BorderLayout());
  myIncludeBaseRevisionTextCheckBox=new JCheckBox("Include base revision text(s) into patch file");
  wrapper.add(myIncludeBaseRevisionTextCheckBox,BorderLayout.WEST);
  final JPanel wr2=new JPanel(new BorderLayout());
  wrapper.add(wr2,BorderLayout.EAST);
  myFixedSizeSelect=new FixedSizeButton(myIncludeBaseRevisionTextCheckBox);
  wr2.add(myFixedSizeSelect,BorderLayout.WEST);
  mySelectedLabel=new JLabel(ALL);
  mySelectedLabel.setBorder(BorderFactory.createEmptyBorder(0,5,0,0));
  mySelectedLabel.setFont(mySelectedLabel.getFont().deriveFont(Font.BOLD));
  wr2.add(mySelectedLabel,BorderLayout.EAST);
  gb.fill=GridBagConstraints.NONE;
  gb.weightx=0;
  myPanel.add(wrapper,gb);
  gb.fill=GridBagConstraints.HORIZONTAL;
  gb.weightx=1;
  myIncludeBaseRevisionTextCheckBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      mySelectedLabel.setEnabled(myIncludeBaseRevisionTextCheckBox.isSelected());
      myFixedSizeSelect.setEnabled(myIncludeBaseRevisionTextCheckBox.isSelected());
      myFixedSizeSelect.doClick();
    }
  }
);
  myFixedSizeSelect.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final SelectFilesToAddTextsToPatchDialog dialog=new SelectFilesToAddTextsToPatchDialog(myProject,myChanges,myIncludedChanges);
      dialog.show();
      if (dialog.isOK()) {
        myIncludedChanges=dialog.getIncludedChanges();
        recalculateSelectedLabel();
      }
    }
  }
);
  gb.gridx=0;
  gb.gridwidth=2;
  ++gb.gridy;
  final StringBuilder sb=new StringBuilder().append("<html><head>").append(UIUtil.getCssFontDeclaration(UIUtil.getLabelFont())).append("</head><body>Base revision text should be included into patch, if it is about to be used in projects under DVCS.").append("<br/>In DVCS commits can be reordered, so there could exist no revision any more with the text matching patch context.<br/><br/>").append("Only modified files texts needs to be added. Add/delete changes are self-descriptive.").append("</body></html>");
  myBaseRevisionTextShouldLabel=new JLabel(sb.toString());
  myPanel.add(myBaseRevisionTextShouldLabel,gb);
  ++gb.gridy;
  myErrorLabel=new JLabel();
  myPanel.add(myErrorLabel,gb);
}
