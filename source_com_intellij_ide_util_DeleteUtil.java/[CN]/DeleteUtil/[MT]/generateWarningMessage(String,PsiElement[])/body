{
  int methods=0;
  int fields=0;
  int interfaces=0;
  int classes=0;
  int files=0;
  int directories=0;
  int packages=0;
  int packageDirectories=0;
  int customElements=0;
  String[] objName=new String[]{"","",""};
  for (  final PsiElement elementToDelete : elements) {
    if (elementToDelete instanceof Property) {
      objName[0]=((Property)elementToDelete).getName();
      objName[1]="property";
    }
 else     if (elementToDelete instanceof PsiMethod) {
      objName[0]=((PsiMethod)elementToDelete).getName();
      objName[1]="method";
      methods++;
    }
 else     if (elementToDelete instanceof PsiField) {
      objName[0]=((PsiField)elementToDelete).getName();
      objName[1]="field";
      fields++;
    }
 else     if (elementToDelete instanceof PsiClass) {
      objName[0]=((PsiClass)elementToDelete).getName();
      if (((PsiClass)elementToDelete).isInterface()) {
        objName[1]="interface";
        interfaces++;
      }
 else {
        objName[1]=elementToDelete instanceof PsiTypeParameter ? "type parameter" : "class";
        classes++;
      }
    }
 else     if (elementToDelete instanceof PsiFile) {
      objName[0]=((PsiFile)elementToDelete).getName();
      objName[1]="file";
      files++;
    }
 else     if (elementToDelete instanceof PsiDirectory) {
      directories=processDirectory(elementToDelete,objName,directories);
    }
 else     if (elementToDelete instanceof PsiPackage) {
      final PsiPackage psiPackage=(PsiPackage)elementToDelete;
      final String name=psiPackage.getName();
      final PsiDirectory[] psiDirectories=psiPackage.getDirectories();
      final int count=psiDirectories.length;
      objName[1]="package";
      objName[0]=name;
      objName[2]=" " + buildDirectoryMessage(count);
      packages+=1;
      packageDirectories+=count;
    }
 else     if (elementToDelete instanceof PsiNamedElement) {
      objName[0]=((PsiNamedElement)elementToDelete).getName();
      objName[1]=elementToDelete.getLanguage().getFindUsagesProvider().getType(elementToDelete);
      customElements++;
    }
  }
  String warningMessage=actionName + " ";
  if (elements.length == 1) {
    warningMessage+=objName[1] + " \"" + objName[0]+ "\""+ objName[2]+ "?";
  }
 else {
    StringBuffer buffer=new StringBuffer();
    appendMessage(directories,"directory","directories",buffer);
    appendMessage(files,"file","files",buffer);
    appendMessage(classes,"class","classes",buffer);
    appendMessage(interfaces,"interface","interfaces",buffer);
    appendMessage(methods,"method","methods",buffer);
    appendMessage(fields,"field","fields",buffer);
    if (packages > 0) {
      appendMessage(packages,"package","packages",buffer);
      buffer.append(' ');
      buffer.append(buildDirectoryMessage(packageDirectories));
    }
    appendMessage(customElements,"element","elements",buffer);
    buffer.append('?');
    warningMessage+=buffer.toString();
  }
  return warningMessage;
}
