{
  if (element instanceof PsiMethod) {
    final PsiClass containingClass=((PsiMethod)element).getContainingClass();
    if (!containingClass.hasModifierProperty(PsiModifier.ABSTRACT)) {
      final PsiMethod[] superMethods=((PsiMethod)element).findSuperMethods();
      for (      PsiMethod superMethod : superMethods) {
        if (isInside(superMethod,allElementsToDelete))         continue;
        if (superMethod.hasModifierProperty(PsiModifier.ABSTRACT)) {
          String message=RefactoringBundle.message("0.implements.1",ConflictsUtil.getDescription(element,true),ConflictsUtil.getDescription(superMethod,true));
          return Collections.singletonList(message);
        }
      }
    }
  }
  return null;
}
