{
  final AnAction[] children=getDelegate().getChildren(e);
  if (e == null) {
    return children;
  }
  final ArrayList<AnAction> all=new ArrayList<AnAction>();
  getAllChildren(e,getDelegate(),all);
  LinkedHashSet<AnAction> heaviest=null;
  double maxWeight=Presentation.DEFAULT_WEIGHT;
  for (  final AnAction action : all) {
    final Presentation presentation=myPresentationFactory.getPresentation(action);
    presentation.setWeight(Presentation.DEFAULT_WEIGHT);
    Utils.updateGroupChild(e.getDataContext(),e.getPlace(),action,presentation);
    if (presentation.isEnabled() && presentation.isVisible()) {
      if (presentation.getWeight() > maxWeight) {
        maxWeight=presentation.getWeight();
        heaviest=new LinkedHashSet<AnAction>();
      }
      if (presentation.getWeight() == maxWeight && heaviest != null) {
        heaviest.add(action);
      }
    }
  }
  if (heaviest == null) {
    return children;
  }
  final DefaultActionGroup chosen=new DefaultActionGroup();
  boolean prevSeparator=true;
  for (  final AnAction action : all) {
    final boolean separator=action instanceof Separator;
    if (separator && !prevSeparator) {
      chosen.add(action);
    }
    prevSeparator=separator;
    if (shouldBeChosenAnyway(action)) {
      heaviest.add(action);
    }
    if (heaviest.contains(action)) {
      chosen.add(action);
    }
  }
  final ActionGroup other=new ExcludingActionGroup(getDelegate(),heaviest);
  other.setPopup(true);
  other.getTemplatePresentation().setText("Other...");
  return new AnAction[]{chosen,new Separator(),other};
}
