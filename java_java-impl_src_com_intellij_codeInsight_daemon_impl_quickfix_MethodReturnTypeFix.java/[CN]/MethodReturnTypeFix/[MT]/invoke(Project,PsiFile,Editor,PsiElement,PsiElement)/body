{
  final PsiMethod myMethod=(PsiMethod)startElement;
  if (!CodeInsightUtilBase.prepareFileForWrite(myMethod.getContainingFile()))   return;
  PsiType myReturnType=myReturnTypePointer.getType();
  if (myReturnType == null)   return;
  if (myFixWholeHierarchy) {
    final PsiMethod superMethod=myMethod.findDeepestSuperMethod();
    final PsiType superReturnType=superMethod == null ? null : superMethod.getReturnType();
    if (superReturnType != null && !Comparing.equal(myReturnType,superReturnType) && !changeClassTypeArgument(myMethod,project,superReturnType,superMethod.getContainingClass(),editor,myReturnType)) {
      return;
    }
  }
  final List<PsiMethod> affectedMethods=changeReturnType(myMethod,myReturnType);
  PsiElementFactory factory=JavaPsiFacade.getInstance(project).getElementFactory();
  PsiReturnStatement statementToSelect=null;
  if (!PsiType.VOID.equals(myReturnType)) {
    final ReturnStatementAdder adder=new ReturnStatementAdder(factory,myReturnType);
    for (    PsiMethod affectedMethod : affectedMethods) {
      PsiReturnStatement statement=adder.addReturnForMethod(file,affectedMethod);
      if (statement != null && affectedMethod == myMethod) {
        statementToSelect=statement;
      }
    }
  }
  if (statementToSelect != null) {
    Editor editorForMethod=getEditorForMethod(myMethod,project,editor,statementToSelect.getContainingFile());
    if (editorForMethod != null) {
      selectReturnValueInEditor(statementToSelect,editorForMethod);
    }
  }
}
