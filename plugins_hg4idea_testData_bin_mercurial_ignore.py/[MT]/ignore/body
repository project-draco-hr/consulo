def ignore(root, files, warn):
    "return matcher covering patterns in 'files'.\n\n    the files parsed for patterns include:\n    .hgignore in the repository root\n    any additional files specified in the [ui] section of ~/.hgrc\n\n    trailing white space is dropped.\n    the escape character is backslash.\n    comments start with #.\n    empty lines are skipped.\n\n    lines can be of the following formats:\n\n    syntax: regexp # defaults following lines to non-rooted regexps\n    syntax: glob   # defaults following lines to non-rooted globs\n    re:pattern     # non-rooted regular expression\n    glob:pattern   # non-rooted glob\n    pattern        # pattern of the current default type"
    pats = {}
    for f in files:
        try:
            pats[f] = []
            fp = open(f)
            (pats[f], warnings) = ignorepats(fp)
            for warning in warnings:
                warn(('%s: %s\n' % (f, warning)))
        except IOError as inst:
            if (f != files[0]):
                warn((_("skipping unreadable ignore file '%s': %s\n") % (f, inst.strerror)))
    allpats = []
    [allpats.extend(patlist) for patlist in pats.values()]
    if (not allpats):
        return util.never
    try:
        ignorefunc = match.match(root, '', [], allpats)
    except util.Abort:
        for (f, patlist) in pats.iteritems():
            try:
                match.match(root, '', [], patlist)
            except util.Abort as inst:
                raise util.Abort(('%s: %s' % (f, inst[0])))
    return ignorefunc
