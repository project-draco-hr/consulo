def ignorepats(lines):
    'parse lines (iterable) of .hgignore text, returning a tuple of\n    (patterns, parse errors). These patterns should be given to compile()\n    to be validated and converted into a match function.'
    syntaxes = {'re': 'relre:', 'regexp': 'relre:', 'glob': 'relglob:', }
    syntax = 'relre:'
    patterns = []
    warnings = []
    for line in lines:
        if ('#' in line):
            global _commentre
            if (not _commentre):
                _commentre = re.compile('((^|[^\\\\])(\\\\\\\\)*)#.*')
            line = _commentre.sub('\\1', line)
            line = line.replace('\\#', '#')
        line = line.rstrip()
        if (not line):
            continue
        if line.startswith('syntax:'):
            s = line[7:].strip()
            try:
                syntax = syntaxes[s]
            except KeyError:
                warnings.append((_("ignoring invalid syntax '%s'") % s))
            continue
        pat = (syntax + line)
        for (s, rels) in syntaxes.iteritems():
            if line.startswith(rels):
                pat = line
                break
            elif line.startswith((s + ':')):
                pat = (rels + line[(len(s) + 1):])
                break
        patterns.append(pat)
    return (patterns, warnings)
