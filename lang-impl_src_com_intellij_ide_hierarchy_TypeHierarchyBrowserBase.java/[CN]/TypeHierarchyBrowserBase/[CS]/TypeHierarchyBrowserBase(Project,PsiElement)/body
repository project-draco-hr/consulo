{
  myProject=project;
  myAutoScrollToSourceHandler=new AutoScrollToSourceHandler(){
    protected boolean isAutoScrollMode(){
      return HierarchyBrowserManager.getInstance(myProject).getState().IS_AUTOSCROLL_TO_SOURCE;
    }
    protected void setAutoScrollMode(    final boolean state){
      HierarchyBrowserManager.getInstance(myProject).getState().IS_AUTOSCROLL_TO_SOURCE=state;
    }
  }
;
  setHierarchyBase(psiClass);
  myCardLayout=new CardLayout();
  myTreePanel=new JPanel(myCardLayout);
  createTrees(myTrees);
  final Enumeration<String> keys=myTrees.keys();
  while (keys.hasMoreElements()) {
    final String key=keys.nextElement();
    final JTree tree=myTrees.get(key);
    myOccurenceNavigators.put(key,new OccurenceNavigatorSupport(tree){
      @Nullable protected Navigatable createDescriptorForNode(      final DefaultMutableTreeNode node){
        final PsiElement psiElement=getPsiElementFromNodeDescriptor(node.getUserObject());
        if (psiElement == null || !psiElement.isValid())         return null;
        PsiElement navigationElement=psiElement.getNavigationElement();
        return new OpenFileDescriptor(psiElement.getProject(),navigationElement.getContainingFile().getVirtualFile(),navigationElement.getTextOffset());
      }
      public String getNextOccurenceActionName(){
        return IdeBundle.message("hierarchy.type.next.occurence.name");
      }
      public String getPreviousOccurenceActionName(){
        return IdeBundle.message("hierarchy.type.prev.occurence.name");
      }
    }
);
    myTreePanel.add(new JScrollPane(tree),key);
  }
  buildUi(createToolbar(ActionPlaces.TYPE_HIERARCHY_VIEW_TOOLBAR,HELP_ID).getComponent(),myTreePanel);
}
