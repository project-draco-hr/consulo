{
  final ProjectJdk jdk=getJdkForStartupCommand(chunk);
  final String versionString=jdk.getVersionString();
  if (versionString == null || "".equals(versionString)) {
    throw new IllegalArgumentException("Cannot determine version for JDK " + jdk.getName() + ".\nUpdate JDK configuration.\n");
  }
  final boolean isVersion1_0=isOfVersion(versionString,"1.0");
  final boolean isVersion1_1=isOfVersion(versionString,"1.1");
  final boolean isVersion1_4=isOfVersion(versionString,"1.4");
  final boolean isVersion1_5=isOfVersion(versionString,"1.5") || isOfVersion(versionString,"5.0");
  final JavacSettings javacSettings=JavacSettings.getInstance(myProject);
  final String vmExePath=jdk.getVMExecutablePath();
  commandLine.add(vmExePath);
  if (isVersion1_1 || isVersion1_0) {
    commandLine.add("-mx" + javacSettings.MAXIMUM_HEAP_SIZE + "m");
  }
 else {
    commandLine.add("-Xmx" + javacSettings.MAXIMUM_HEAP_SIZE + "m");
  }
  final String javacLocation=getGenericsJar("gjc-rt.jar",myProject).getPath();
  final boolean useJSR14Compiler=shouldUseJSR14Compiler(versionString);
  if (useJSR14Compiler) {
    commandLine.add("-Xbootclasspath/p:" + javacLocation);
  }
  commandLine.add("-classpath");
  String vmCp;
  if (useJSR14Compiler) {
    vmCp=javacLocation;
  }
 else {
    vmCp=jdk.getToolsPath();
  }
  if (isVersion1_0) {
    commandLine.add(vmCp);
  }
 else {
    vmCp+=File.pathSeparator + PathUtilEx.getIdeaRtJarPath();
    commandLine.add(vmCp);
    commandLine.add(com.intellij.rt.compiler.JavacRunner.class.getName());
    commandLine.add("\"" + versionString + "\"");
  }
  if (isOfVersion(versionString,"1.2") || isVersion1_1 || isVersion1_0) {
    commandLine.add("sun.tools.javac.Main");
  }
 else {
    commandLine.add("com.sun.tools.javac.Main");
  }
  if (useJSR14Compiler) {
    commandLine.add("-bootclasspath");
    final String rtJarPath=jdk.getRtLibraryPath();
    commandLine.add(getGenericsJar("collect.jar",myProject).getPath() + File.pathSeparator + rtJarPath);
  }
  final LanguageLevel applicableLanguageLevel=getApplicableLanguageLevel(versionString);
  if (applicableLanguageLevel.equals(LanguageLevel.JDK_1_5)) {
    commandLine.add("-source");
    commandLine.add("1.5");
  }
 else   if (applicableLanguageLevel.equals(LanguageLevel.JDK_1_4)) {
    commandLine.add("-source");
    commandLine.add("1.4");
  }
 else   if (applicableLanguageLevel.equals(LanguageLevel.JDK_1_3)) {
    if (isVersion1_4 || isVersion1_5) {
      commandLine.add("-source");
      commandLine.add("1.3");
    }
  }
  commandLine.add("-verbose");
  commandLine.add("-classpath");
  final String cp=chunk.getCompilationClasspath();
  if (isVersion1_0) {
    commandLine.add(jdk.getToolsPath() + File.pathSeparator + cp);
  }
 else {
    File cpFile=FileUtil.createTempFile("javac_cp",".tmp");
    cpFile.deleteOnExit();
    myTempFiles.add(cpFile);
    PrintWriter writer=new PrintWriter(new BufferedWriter(new FileWriter(cpFile)));
    writer.println(cp);
    writer.close();
    commandLine.add("@" + cpFile.getAbsolutePath());
  }
  LOG.info("compiling module chunk" + chunk + "; classpath=\""+ cp+ "\"");
  if (!isVersion1_1 && !isVersion1_0) {
    commandLine.add("-sourcepath");
    commandLine.add("\"\"");
  }
  commandLine.add("-d");
  commandLine.add(outputPath.replace('/',File.separatorChar));
  StringTokenizer tokenizer=new StringTokenizer(javacSettings.getOptionsString()," ");
  while (tokenizer.hasMoreTokens()) {
    String token=tokenizer.nextToken();
    if (isVersion1_0) {
      if ("-deprecation".equals(token)) {
        continue;
      }
    }
    commandLine.add(token);
  }
  final VirtualFile[] files=chunk.getFilesToCompile();
  if (isVersion1_0) {
    for (int i=0; i < files.length; i++) {
      VirtualFile file=files[i];
      String path=file.getPath();
      if (LOG.isDebugEnabled()) {
        LOG.debug("Adding path for compilation " + path);
      }
      commandLine.add(CompilerUtil.quotePath(path));
    }
  }
 else {
    File sourcesFile=FileUtil.createTempFile("javac",".tmp");
    sourcesFile.deleteOnExit();
    myTempFiles.add(sourcesFile);
    PrintWriter writer=new PrintWriter(new BufferedWriter(new FileWriter(sourcesFile)));
    for (int i=0; i < files.length; i++) {
      final VirtualFile file=files[i];
      final String path=isVersion1_5 ? file.getPath().replace('/',File.separatorChar) : file.getPath();
      if (LOG.isDebugEnabled()) {
        LOG.debug("Adding path for compilation " + path);
      }
      writer.println(isVersion1_1 ? path : CompilerUtil.quotePath(path));
    }
    writer.close();
    commandLine.add("@" + sourcesFile.getAbsolutePath());
  }
}
