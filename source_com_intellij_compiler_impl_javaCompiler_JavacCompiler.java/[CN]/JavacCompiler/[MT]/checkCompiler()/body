{
  final Module[] modules=ModuleManager.getInstance(myProject).getModules();
  Set<ProjectJdk> checkedJdks=new HashSet<ProjectJdk>();
  for (int idx=0; idx < modules.length; idx++) {
    final Module module=modules[idx];
    final ProjectJdk jdk=ModuleRootManager.getInstance(module).getJdk();
    if (jdk == null) {
      continue;
    }
    if (checkedJdks.contains(jdk)) {
      continue;
    }
    final VirtualFile homeDirectory=jdk.getHomeDirectory();
    if (homeDirectory == null) {
      Messages.showMessageDialog(myProject,"Cannot determine home directory for JDK " + jdk.getName() + ".\nUpdate JDK configuration.\n","Broken JDK Configuration",Messages.getErrorIcon());
      return false;
    }
    final String vmExecutablePath=jdk.getVMExecutablePath();
    if (vmExecutablePath == null) {
      Messages.showMessageDialog(myProject,"Cannot obtain path to VM executable for JDK " + jdk.getName() + ".\nUpdate JDK configuration.\n","Broken JDK Configuration",Messages.getErrorIcon());
      return false;
    }
    final String toolsJarPath=jdk.getToolsPath();
    if (toolsJarPath == null) {
      Messages.showMessageDialog(myProject,"Cannot obtain path javac classes for JDK " + jdk.getName() + ".\nUpdate JDK configuration.\n","Broken JDK Configuration",Messages.getErrorIcon());
      return false;
    }
    final String versionString=jdk.getVersionString();
    if (versionString == null) {
      Messages.showMessageDialog(myProject,"Cannot determine version for JDK " + jdk.getName() + ".\nUpdate JDK configuration.\n","Unknown JDK Version",Messages.getErrorIcon());
      return false;
    }
    if (isOfVersion(versionString,"1.0")) {
      Messages.showMessageDialog(myProject,"Compilation is not supported for JDK 1.0","Unsupported Compiler Version",Messages.getErrorIcon());
      return false;
    }
    if (shouldUseJSR14Compiler(versionString)) {
      final File collectionsJar=GenericsSetupUtil.getGenericsJar("collect.jar",myProject);
      if (!collectionsJar.exists()) {
        Messages.showMessageDialog(myProject,collectionsJar.getPath() + " not found","Compiler Classes Not Found",Messages.getErrorIcon());
        return false;
      }
      final File gjcJar=GenericsSetupUtil.getGenericsJar("gjc-rt.jar",myProject);
      if (!gjcJar.exists()) {
        Messages.showMessageDialog(myProject,gjcJar.getPath() + " not found","Compiler Classes Not Found",Messages.getErrorIcon());
        return false;
      }
    }
    checkedJdks.add(jdk);
  }
  return true;
}
