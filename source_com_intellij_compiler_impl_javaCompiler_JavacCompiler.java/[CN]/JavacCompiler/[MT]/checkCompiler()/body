{
  final Module[] modules=ModuleManager.getInstance(myProject).getModules();
  final Set<ProjectJdk> checkedJdks=new HashSet<ProjectJdk>();
  for (  final Module module : modules) {
    final ProjectJdk jdk=ModuleRootManager.getInstance(module).getJdk();
    if (jdk == null) {
      continue;
    }
    if (checkedJdks.contains(jdk)) {
      continue;
    }
    final VirtualFile homeDirectory=jdk.getHomeDirectory();
    if (homeDirectory == null) {
      Messages.showMessageDialog(myProject,CompilerBundle.message("javac.error.jdk.home.missing",jdk.getName()),CompilerBundle.message("compiler.javac.name"),Messages.getErrorIcon());
      return false;
    }
    final String vmExecutablePath=jdk.getVMExecutablePath();
    if (vmExecutablePath == null) {
      Messages.showMessageDialog(myProject,CompilerBundle.message("javac.error.vm.executable.missing",jdk.getName()),CompilerBundle.message("compiler.javac.name"),Messages.getErrorIcon());
      return false;
    }
    final String toolsJarPath=jdk.getToolsPath();
    if (toolsJarPath == null) {
      Messages.showMessageDialog(myProject,CompilerBundle.message("javac.error.tools.jar.missing",jdk.getName()),CompilerBundle.message("compiler.javac.name"),Messages.getErrorIcon());
      return false;
    }
    final String versionString=jdk.getVersionString();
    if (versionString == null) {
      Messages.showMessageDialog(myProject,CompilerBundle.message("javac.error.unknown.jdk.version",jdk.getName()),CompilerBundle.message("compiler.javac.name"),Messages.getErrorIcon());
      return false;
    }
    if (isOfVersion(versionString,"1.0")) {
      Messages.showMessageDialog(myProject,CompilerBundle.message("javac.error.1_0_compilation.not.supported"),CompilerBundle.message("compiler.javac.name"),Messages.getErrorIcon());
      return false;
    }
    checkedJdks.add(jdk);
  }
  return true;
}
