{
  if (LOG.isDebugEnabled()) {
    LOG.debug("visitPolyadicExpression " + wideExpression);
  }
  PsiExpression[] operands=wideExpression.getOperands();
  operands[0].accept(this);
  Evaluator result=myResult;
  PsiType lType=operands[0].getType();
  for (int i=1; i < operands.length; i++) {
    PsiExpression expression=operands[i];
    if (expression == null) {
      throwEvaluateException(DebuggerBundle.message("evaluation.error.invalid.expression",wideExpression.getText()));
      return;
    }
    expression.accept(this);
    Evaluator rResult=myResult;
    IElementType opType=wideExpression.getOperationTokenType();
    PsiType rType=expression.getType();
    if (rType == null) {
      throwEvaluateException(DebuggerBundle.message("evaluation.error.unknown.expression.type",expression.getText()));
    }
    PsiType typeForBinOp=TypeConversionUtil.calcTypeForBinaryExpression(lType,rType,opType,true);
    myResult=createBinaryEvaluator(result,lType,rResult,rType,opType,typeForBinOp);
    lType=typeForBinOp;
    result=myResult;
  }
}
