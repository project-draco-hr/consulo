{
  final PsiType expressionType=expression.getType();
  if (expressionType == null) {
    throwEvaluateException(DebuggerBundle.message("evaluation.error.unknown.expression.type",expression.getText()));
  }
  final PsiExpression operandExpression=expression.getOperand();
  if (operandExpression == null) {
    throwEvaluateException(DebuggerBundle.message("evaluation.error.unknown.expression.operand",expression.getText()));
  }
  operandExpression.accept(this);
  Evaluator operandEvaluator=myResult;
  final PsiType operandType=operandExpression.getType();
  @Nullable final PsiType unboxedOperandType=PsiPrimitiveType.getUnboxedType(operandType);
  final IElementType operation=expression.getOperationTokenType();
  if (operation == JavaTokenType.PLUSPLUS || operation == JavaTokenType.MINUSMINUS) {
    try {
      final BinaryExpressionEvaluator rightEval=createBinaryEvaluator(operandEvaluator,operandType,new LiteralEvaluator(Integer.valueOf(1),"int"),PsiType.INT,operation == JavaTokenType.PLUSPLUS ? JavaTokenType.PLUS : JavaTokenType.MINUS,unboxedOperandType != null ? unboxedOperandType : operandType);
      myResult=new AssignmentEvaluator(operandEvaluator,unboxedOperandType != null ? new BoxingEvaluator(rightEval) : rightEval);
    }
 catch (    IncorrectOperationException e) {
      LOG.error(e);
    }
  }
 else {
    if (JavaTokenType.PLUS.equals(operation) || JavaTokenType.MINUS.equals(operation) || JavaTokenType.TILDE.equals(operation)) {
      operandEvaluator=handleUnaryNumericPromotion(operandType,operandEvaluator);
    }
 else {
      if (unboxedOperandType != null) {
        operandEvaluator=new UnBoxingEvaluator(operandEvaluator);
      }
    }
    myResult=new UnaryExpressionEvaluator(operation,expressionType.getCanonicalText(),operandEvaluator,expression.getOperationSign().getText());
  }
}
