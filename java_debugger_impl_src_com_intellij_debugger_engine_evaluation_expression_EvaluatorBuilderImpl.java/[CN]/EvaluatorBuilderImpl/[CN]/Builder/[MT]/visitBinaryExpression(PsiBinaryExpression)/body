{
  if (LOG.isDebugEnabled()) {
    LOG.debug("visitBinaryExpression " + expression);
  }
  expression.getLOperand().accept(this);
  Evaluator lResult=myResult;
  PsiExpression rOperand=expression.getROperand();
  if (rOperand == null) {
    throw new EvaluateRuntimeException(EvaluateExceptionUtil.createEvaluateException(DebuggerBundle.message("evaluation.error.invalid.expression",expression.getText())));
  }
  rOperand.accept(this);
  IElementType opType=expression.getOperationSign().getTokenType();
  PsiType type=expression.getType();
  if (type == null) {
    throw new EvaluateRuntimeException(EvaluateExceptionUtil.createEvaluateException(DebuggerBundle.message("evaluation.error.unknown.expression.type",expression.getText())));
  }
  myResult=new BinaryExpressionEvaluator(lResult,myResult,opType,type.getCanonicalText());
}
