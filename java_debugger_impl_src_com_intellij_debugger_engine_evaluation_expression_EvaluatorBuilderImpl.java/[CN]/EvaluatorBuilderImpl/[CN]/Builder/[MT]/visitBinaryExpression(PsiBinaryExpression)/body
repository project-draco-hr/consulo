{
  if (LOG.isDebugEnabled()) {
    LOG.debug("visitBinaryExpression " + expression);
  }
  final PsiExpression lOperand=expression.getLOperand();
  lOperand.accept(this);
  Evaluator lResult=myResult;
  final PsiExpression rOperand=expression.getROperand();
  if (rOperand == null) {
    throw new EvaluateRuntimeException(EvaluateExceptionUtil.createEvaluateException(DebuggerBundle.message("evaluation.error.invalid.expression",expression.getText())));
  }
  rOperand.accept(this);
  Evaluator rResult=myResult;
  IElementType opType=expression.getOperationSign().getTokenType();
  PsiType expressionExpectedType=expression.getType();
  if (expressionExpectedType == null) {
    throw new EvaluateRuntimeException(EvaluateExceptionUtil.createEvaluateException(DebuggerBundle.message("evaluation.error.unknown.expression.type",expression.getText())));
  }
  myResult=createBinaryEvaluator(lResult,lOperand.getType(),rResult,rOperand.getType(),opType,expressionExpectedType);
}
