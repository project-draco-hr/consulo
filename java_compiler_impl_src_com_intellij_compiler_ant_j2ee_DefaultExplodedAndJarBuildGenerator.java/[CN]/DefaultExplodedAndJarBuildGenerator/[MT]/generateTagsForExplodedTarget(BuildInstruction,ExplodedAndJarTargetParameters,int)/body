{
  final File moduleBaseDir=parameters.getChunk().getBaseDir();
  final List<Tag> tags=new SmartList<Tag>();
  instruction.accept(new BuildInstructionVisitor(){
    public boolean visitFileCopyInstruction(    FileCopyInstruction instruction) throws RuntimeException {
      if (instruction.isExternalDependencyInstruction())       return true;
      final File sourceFile=instruction.getFile();
      final String outputRelativePath="/" + instruction.getOutputRelativePath();
      final String baseDirProperty=BuildProperties.getModuleBasedirProperty(instruction.getModule());
      final String sourceLocation=GenerationUtils.toRelativePath(sourceFile.getPath(),moduleBaseDir,baseDirProperty,parameters.getGenerationOptions(),!parameters.getContainingModule().isSavePathsRelative());
      final Copy copy;
      if (instruction.isDirectory()) {
        copy=new Copy(BuildProperties.propertyRef(parameters.getExplodedPathParameter()) + outputRelativePath);
        final FileSet fileSet=new FileSet(sourceLocation);
        copy.add(fileSet);
      }
 else {
        copy=new Copy(sourceLocation,BuildProperties.propertyRef(parameters.getExplodedPathParameter()) + outputRelativePath);
      }
      tags.add(copy);
      return true;
    }
    public boolean visitJarAndCopyBuildInstruction(    JarAndCopyBuildInstruction instruction) throws RuntimeException {
      if (instruction.isExternalDependencyInstruction())       return true;
      final String outputRelativePath=instruction.getOutputRelativePath();
      final String destFile=BuildProperties.propertyRef(parameters.getExplodedPathParameter()) + outputRelativePath;
      final @NonNls String jarDirProperty=parameters.getBuildExplodedTargetName() + ".jar.dir" + instructionCount;
      tags.add(new Dirname(jarDirProperty,destFile));
      tags.add(new Mkdir(BuildProperties.propertyRef(jarDirProperty)));
      tags.add(generateExplodedTag(instruction,destFile,moduleBaseDir,parameters.getGenerationOptions()));
      return true;
    }
    public boolean visitCompoundBuildInstruction(    CompoundBuildInstruction instruction) throws RuntimeException {
      if (instruction.isExternalDependencyInstruction())       return true;
      final String outputRelativePath="/" + instruction.getOutputRelativePath();
      final String outputPath=BuildProperties.propertyRef(parameters.getExplodedPathParameter()) + outputRelativePath;
      final Tag tag;
      if (instruction.getBuildProperties().isExplodedEnabled()) {
        tag=new Copy(outputPath);
        tag.add(new FileSet(BuildProperties.propertyRef(parameters.getCompoundBuildInstructionNaming().getExplodedPathProperty(instruction))));
      }
 else {
        tag=new AntCall(parameters.getCompoundBuildInstructionNaming().getBuildExplodedTargetName(instruction));
        tag.add(new Param(parameters.getExplodedPathParameter(),outputPath));
      }
      tags.add(tag);
      return true;
    }
  }
);
  return tags.toArray(new Tag[tags.size()]);
}
