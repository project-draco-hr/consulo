{
  final List<ZipFileSet> zipFileSetTags=new SmartList<ZipFileSet>();
  final String tempDirProperty=BuildProperties.getTempDirForModuleProperty(parameters.getContainingModule().getName());
  final File moduleBaseDir=parameters.getChunk().getBaseDir();
  instruction.accept(new BuildInstructionVisitor(){
    public boolean visitFileCopyInstruction(    FileCopyInstruction instruction) throws RuntimeException {
      if (instruction.isExternalDependencyInstruction())       return true;
      final File sourceFile=instruction.getFile();
      final Module instructionModule=instruction.getModule();
      final String sourceLocation=GenerationUtils.toRelativePath(sourceFile.getPath(),moduleBaseDir,instructionModule,parameters.getGenerationOptions());
      final ZipFileSet fileSet=new ZipFileSet(sourceLocation,instruction.getOutputRelativePath(),instruction.isDirectory());
      zipFileSetTags.add(fileSet);
      return true;
    }
    public boolean visitJarAndCopyBuildInstruction(    JarAndCopyBuildInstruction instruction) throws RuntimeException {
      if (instruction.isExternalDependencyInstruction())       return true;
      tempDirUsed.set(true);
      final String jarName=new File(instruction.getOutputRelativePath()).getName();
      final String destJarPath=BuildProperties.propertyRef(tempDirProperty) + "/" + jarName;
      zipFileSetTags.add(new ZipFileSet(destJarPath,instruction.getOutputRelativePath(),false));
      return true;
    }
  }
);
  return zipFileSetTags.toArray(new ZipFileSet[zipFileSetTags.size()]);
}
