{
  GeneralSettings settings=GeneralSettings.getInstance();
  myComponent.myBrowserPathField.setText(settings.getBrowserPath());
  myComponent.myChkReopenLastProject.setSelected(settings.isReopenLastProject());
  myComponent.myChkSyncOnFrameActivation.setSelected(settings.isSyncOnFrameActivation());
  myComponent.myChkSaveOnFrameDeactivation.setSelected(settings.isSaveOnFrameDeactivation());
  myComponent.myChkAutoSaveIfInactive.setSelected(settings.isAutoSaveIfInactive());
  myComponent.myTfInactiveTimeout.setText(Integer.toString(settings.getInactiveTimeout()));
  myComponent.myTfInactiveTimeout.setEditable(settings.isAutoSaveIfInactive());
  myComponent.myUseCyclicBuffer.setSelected(settings.isUseCyclicBuffer());
  myComponent.myCyclicBufferSize.setEditable(settings.isUseCyclicBuffer());
  myComponent.myCyclicBufferSize.setText(settings.getCyclicBufferSize() / 1024 + "");
  myComponent.myIgnoreFilesField.setText(FileTypeManagerEx.getInstanceEx().getIgnoredFilesList());
  myComponent.myCharsetNameCombo.setSelectedItem(settings.getCharsetName());
  myComponent.myChkUTFGuessing.setSelected(settings.isUseUTFGuessing());
  getDiffOptions().reset();
  UpdateSettings updateSettings=UpdateSettings.getInstance();
  if (updateSettings.CHECK_UPDATES) {
    if (updateSettings.ASK_USER) {
      myComponent.myRbAskBeforeCheck.setSelected(true);
    }
 else {
      myComponent.myRbCheckAutomatically.setSelected(true);
    }
  }
 else {
    myComponent.myRbNeverCheck.setSelected(true);
  }
  if (settings.isUseDefaultBrowser()) {
    myComponent.myUseSystemDefaultBrowser.setSelected(true);
  }
 else {
    myComponent.myUseUserDefinedBrowser.setSelected(true);
  }
  myComponent.updateBrowserField();
}
