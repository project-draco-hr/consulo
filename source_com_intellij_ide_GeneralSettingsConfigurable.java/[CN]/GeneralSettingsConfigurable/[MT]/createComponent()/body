{
  myComponent=new MyComponent();
  myComponent.myDiffOptionsPanel.setLayout(new BorderLayout());
  myComponent.myDiffOptionsPanel.add(getDiffOptions().createComponent(),BorderLayout.CENTER);
  myComponent.myChkAutoSaveIfInactive.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      myComponent.myTfInactiveTimeout.setEditable(myComponent.myChkAutoSaveIfInactive.isSelected());
    }
  }
);
  myComponent.myUseCyclicBuffer.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      myComponent.myCyclicBufferSize.setEditable(myComponent.myUseCyclicBuffer.isSelected());
    }
  }
);
  FileChooserDescriptor descriptor=FileChooserDescriptorFactory.createSingleFileNoJarsDescriptor();
  myComponent.myBrowserPathField.addBrowseFolderListener("Select Path to Browser",null,null,descriptor);
  myComponent.myIgnoreFilesField.setText("skdjf arfgvkbdfugbvr");
  Vector<String> charsets=new Vector<String>();
  charsets.add("System Default");
  SortedMap avaliableCharsets=Charset.availableCharsets();
  for (Iterator iterator=avaliableCharsets.keySet().iterator(); iterator.hasNext(); ) {
    String name=(String)iterator.next();
    if (!name.startsWith("UTF-16")) {
      charsets.add(name);
    }
  }
  myComponent.myCharsetNameCombo.setModel(new DefaultComboBoxModel(charsets));
  return myComponent.myPanel;
}
