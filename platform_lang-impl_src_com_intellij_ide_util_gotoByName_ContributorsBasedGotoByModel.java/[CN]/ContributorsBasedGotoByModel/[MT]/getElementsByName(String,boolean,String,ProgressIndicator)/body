{
  long elementByNameStarted=System.currentTimeMillis();
  final List<NavigationItem> items=Collections.synchronizedList(new ArrayList<NavigationItem>());
  Processor<ChooseByNameContributor> processor=new Processor<ChooseByNameContributor>(){
    @Override public boolean process(    ChooseByNameContributor contributor){
      if (myProject.isDisposed()) {
        return true;
      }
      TIntHashSet filter=myContributorToItsSymbolsMap.get(contributor);
      if (filter != null && !filter.contains(name.hashCode()))       return true;
      try {
        long contributorStarted=System.currentTimeMillis();
        NavigationItem[] itemsByName=contributor.getItemsByName(name,pattern,myProject,checkBoxState);
        for (        NavigationItem item : itemsByName) {
          canceled.checkCanceled();
          if (item == null) {
            PluginId pluginId=PluginManagerCore.getPluginByClassName(contributor.getClass().getName());
            if (pluginId != null) {
              LOG.error(new PluginException("null item from contributor " + contributor + " for name "+ name,pluginId));
            }
 else {
              LOG.error("null item from contributor " + contributor + " for name "+ name);
            }
            continue;
          }
          if (acceptItem(item)) {
            items.add(item);
          }
        }
        if (LOG.isDebugEnabled()) {
          LOG.debug(System.currentTimeMillis() - contributorStarted + "," + contributor + "," + itemsByName.length);
        }
      }
 catch (      ProcessCanceledException ex) {
      }
catch (      Exception ex) {
        LOG.error(ex);
      }
      return true;
    }
  }
;
  if (!JobLauncher.getInstance().invokeConcurrentlyUnderProgress(filterDumb(myContributors),canceled,true,processor)) {
    canceled.cancel();
  }
  canceled.checkCanceled();
  if (LOG.isDebugEnabled()) {
    LOG.debug("Retrieving " + name + ":"+ items.size()+ " for "+ (System.currentTimeMillis() - elementByNameStarted));
  }
  return ArrayUtil.toObjectArray(items);
}
