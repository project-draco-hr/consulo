{
  if (!field.hasModifierProperty(PsiModifier.STATIC)) {
    return;
  }
  if (field.getInitializer() != null) {
    return;
  }
  final PsiClass containingClass=field.getContainingClass();
  if (containingClass == null) {
    return;
  }
  if (containingClass.isEnum()) {
    return;
  }
  if (m_ignorePrimitives) {
    final PsiType type=field.getType();
    if (ClassUtils.isPrimitive(type)) {
      return;
    }
  }
  final PsiClassInitializer[] initializers=containingClass.getInitializers();
  final UninitializedReadCollector uninitializedReadCollector=new UninitializedReadCollector();
  boolean assigned=false;
  for (  final PsiClassInitializer initializer : initializers) {
    if (!initializer.hasModifierProperty(PsiModifier.STATIC)) {
      continue;
    }
    final PsiCodeBlock body=initializer.getBody();
    if (uninitializedReadCollector.blockAssignsVariable(body,field)) {
      assigned=true;
      break;
    }
  }
  if (assigned) {
    final PsiExpression[] badReads=uninitializedReadCollector.getUninitializedReads();
    for (    PsiExpression badRead : badReads) {
      registerError(badRead);
    }
    return;
  }
  final PsiMethod[] methods=containingClass.getMethods();
  for (  PsiMethod method : methods) {
    if (!method.hasModifierProperty(PsiModifier.STATIC)) {
      continue;
    }
    final PsiCodeBlock body=method.getBody();
    uninitializedReadCollector.blockAssignsVariable(body,field);
  }
  final PsiExpression[] moreBadReads=uninitializedReadCollector.getUninitializedReads();
  for (  PsiExpression badRead : moreBadReads) {
    registerError(badRead);
  }
}
