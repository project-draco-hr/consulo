{
  EditorSettingsExternalizable editorSettings=EditorSettingsExternalizable.getInstance();
  CodeInsightSettings codeInsightSettings=CodeInsightSettings.getInstance();
  UISettings uiSettings=UISettings.getInstance();
  editorSettings.setSmoothScrolling(myCbSmoothScrolling.isSelected());
  codeInsightSettings.HIGHLIGHT_BRACES=myCbHighlightBraces.isSelected();
  codeInsightSettings.HIGHLIGHT_SCOPE=myCbHighlightScope.isSelected();
  codeInsightSettings.HIGHLIGHT_IDENTIFIER_UNDER_CARET=myCbHighlightIdentifierUnderCaret.isSelected();
  clearAllIdentifierHighlighters();
  editorSettings.setUseSoftWraps(myCbUseSoftWrapsAtEditor.isSelected(),SoftWrapAppliancePlaces.MAIN_EDITOR);
  editorSettings.setUseSoftWraps(myCbUseSoftWrapsAtConsole.isSelected(),SoftWrapAppliancePlaces.CONSOLE);
  editorSettings.setUseCustomSoftWrapIndent(myCbUseCustomSoftWrapIndent.isSelected());
  editorSettings.setCustomSoftWrapIndent(getCustomSoftWrapIndent());
  editorSettings.setAllSoftwrapsShown(myCbShowAllSoftWraps.isSelected());
  editorSettings.setVirtualSpace(myCbVirtualSpace.isSelected());
  editorSettings.setCaretInsideTabs(myCbCaretInsideTabs.isSelected());
  editorSettings.setAdditionalPageAtBottom(myCbVirtualPageAtBottom.isSelected());
  boolean uiSettingsChanged=false;
  int maxClipboardContents=getMaxClipboardContents();
  if (uiSettings.MAX_CLIPBOARD_CONTENTS != maxClipboardContents) {
    uiSettings.MAX_CLIPBOARD_CONTENTS=maxClipboardContents;
    uiSettingsChanged=true;
  }
  if (uiSettingsChanged) {
    uiSettings.fireUISettingsChanged();
  }
  if (STRIP_NONE.equals(myStripTrailingSpacesCombo.getSelectedItem())) {
    editorSettings.setStripTrailingSpaces(EditorSettingsExternalizable.STRIP_TRAILING_SPACES_NONE);
  }
 else   if (STRIP_CHANGED.equals(myStripTrailingSpacesCombo.getSelectedItem())) {
    editorSettings.setStripTrailingSpaces(EditorSettingsExternalizable.STRIP_TRAILING_SPACES_CHANGED);
  }
 else {
    editorSettings.setStripTrailingSpaces(EditorSettingsExternalizable.STRIP_TRAILING_SPACES_WHOLE);
  }
  editorSettings.setEnsureNewLineAtEOF(myCbEnsureBlankLineBeforeCheckBox.isSelected());
  editorSettings.setDndEnabled(myCbEnableDnD.isSelected());
  editorSettings.setWheelFontChangeEnabled(myCbEnableWheelFontChange.isSelected());
  editorSettings.setMouseClickSelectionHonorsCamelWords(2,myCbHonorCamelHumpsWhenSelectingByDoubleClick.isSelected());
  editorSettings.setMouseClickSelectionHonorsCamelWords(3,myCbHonorCamelHumpsWhenSelectingByTripleClick.isSelected());
  editorSettings.setRefrainFromScrolling(myRbPreferMovingCaret.isSelected());
  editorSettings.setVariableInplaceRenameEnabled(myCbRenameLocalVariablesInplace.isSelected());
  editorSettings.getOptions().SHOW_REFORMAT_DIALOG=myShowReformatCodeDialogCheckBox.isSelected();
  editorSettings.getOptions().SHOW_OPIMIZE_IMPORTS_DIALOG=myShowOptimizeImportsDialogCheckBox.isSelected();
  reinitAllEditors();
  String temp=myRecentFilesLimitField.getText();
  if (temp.trim().length() > 0) {
    try {
      int newRecentFilesLimit=Integer.parseInt(temp);
      if (newRecentFilesLimit > 0 && uiSettings.RECENT_FILES_LIMIT != newRecentFilesLimit) {
        uiSettings.RECENT_FILES_LIMIT=newRecentFilesLimit;
        uiSettingsChanged=true;
      }
    }
 catch (    NumberFormatException ignored) {
    }
  }
  if (uiSettingsChanged) {
    uiSettings.fireUISettingsChanged();
  }
  uiSettings.CONSOLE_COMMAND_HISTORY_LIMIT=StringUtil.parseInt(myCommandsHistoryLimitField.getText(),uiSettings.CONSOLE_COMMAND_HISTORY_LIMIT);
  myErrorHighlightingPanel.apply();
  restartDaemons();
}
