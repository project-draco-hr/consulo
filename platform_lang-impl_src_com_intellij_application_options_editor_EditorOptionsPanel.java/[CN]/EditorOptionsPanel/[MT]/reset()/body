{
  EditorSettingsExternalizable editorSettings=EditorSettingsExternalizable.getInstance();
  CodeInsightSettings codeInsightSettings=CodeInsightSettings.getInstance();
  UISettings uiSettings=UISettings.getInstance();
  myCbSmoothScrolling.setSelected(editorSettings.isSmoothScrolling());
  myCbHighlightBraces.setSelected(codeInsightSettings.HIGHLIGHT_BRACES);
  myCbHighlightScope.setSelected(codeInsightSettings.HIGHLIGHT_SCOPE);
  myCbHighlightIdentifierUnderCaret.setSelected(codeInsightSettings.HIGHLIGHT_IDENTIFIER_UNDER_CARET);
  myCbUseSoftWrapsAtEditor.setSelected(editorSettings.isUseSoftWraps(SoftWrapAppliancePlaces.MAIN_EDITOR));
  myCbUseSoftWrapsAtConsole.setSelected(editorSettings.isUseSoftWraps(SoftWrapAppliancePlaces.CONSOLE));
  myCbUseCustomSoftWrapIndent.setSelected(editorSettings.isUseCustomSoftWrapIndent());
  myCustomSoftWrapIndent.setText(Integer.toString(editorSettings.getCustomSoftWrapIndent()));
  myCbShowAllSoftWraps.setSelected(editorSettings.isAllSoftWrapsShown());
  updateSoftWrapSettingsRepresentation();
  myCbVirtualSpace.setSelected(editorSettings.isVirtualSpace());
  myCbCaretInsideTabs.setSelected(editorSettings.isCaretInsideTabs());
  myCbVirtualPageAtBottom.setSelected(editorSettings.isAdditionalPageAtBottom());
  myClipboardContentLimitTextField.setText(Integer.toString(uiSettings.MAX_CLIPBOARD_CONTENTS));
  String stripTrailingSpaces=editorSettings.getStripTrailingSpaces();
  if (EditorSettingsExternalizable.STRIP_TRAILING_SPACES_NONE.equals(stripTrailingSpaces)) {
    myStripTrailingSpacesCombo.setSelectedItem(STRIP_NONE);
  }
 else   if (EditorSettingsExternalizable.STRIP_TRAILING_SPACES_CHANGED.equals(stripTrailingSpaces)) {
    myStripTrailingSpacesCombo.setSelectedItem(STRIP_CHANGED);
  }
 else   if (EditorSettingsExternalizable.STRIP_TRAILING_SPACES_WHOLE.equals(stripTrailingSpaces)) {
    myStripTrailingSpacesCombo.setSelectedItem(STRIP_ALL);
  }
  myCbEnsureBlankLineBeforeCheckBox.setSelected(editorSettings.isEnsureNewLineAtEOF());
  myCbShowQuickDocOnMouseMove.setSelected(editorSettings.isShowQuickDocOnMouseOverElement());
  myQuickDocDelayTextField.setText(Long.toString(editorSettings.getQuickDocOnMouseOverElementDelayMillis()));
  myQuickDocDelayTextField.setEnabled(editorSettings.isShowQuickDocOnMouseOverElement());
  myQuickDocDelayLabel.setEnabled(editorSettings.isShowQuickDocOnMouseOverElement());
  myCbEnableDnD.setSelected(editorSettings.isDndEnabled());
  myCbEnableWheelFontChange.setSelected(editorSettings.isWheelFontChangeEnabled());
  myCbHonorCamelHumpsWhenSelectingByClicking.setSelected(editorSettings.isMouseClickSelectionHonorsCamelWords());
  myRbPreferMovingCaret.setSelected(editorSettings.isRefrainFromScrolling());
  myRbPreferScrolling.setSelected(!editorSettings.isRefrainFromScrolling());
  myRecentFilesLimitField.setText(Integer.toString(uiSettings.RECENT_FILES_LIMIT));
  myCommandsHistoryLimitField.setText(Integer.toString(uiSettings.CONSOLE_COMMAND_HISTORY_LIMIT));
  myCbRenameLocalVariablesInplace.setSelected(editorSettings.isVariableInplaceRenameEnabled());
  myPreselectCheckBox.setSelected(editorSettings.isPreselectRename());
  myShowNotificationAfterReformatCodeCheckBox.setSelected(editorSettings.getOptions().SHOW_NOTIFICATION_AFTER_REFORMAT_CODE_ACTION);
  myShowNotificationAfterOptimizeImportsCheckBox.setSelected(editorSettings.getOptions().SHOW_NOTIFICATION_AFTER_OPTIMIZE_IMPORTS_ACTION);
  myErrorHighlightingPanel.reset();
  RichCopySettings settings=RichCopySettings.getInstance();
  myRichCopyColorSchemeComboBox.removeAllItems();
  EditorColorsScheme[] schemes=EditorColorsManager.getInstance().getAllSchemes();
  myRichCopyColorSchemeComboBox.addItem(RichCopySettings.ACTIVE_GLOBAL_SCHEME_MARKER);
  for (  EditorColorsScheme scheme : schemes) {
    myRichCopyColorSchemeComboBox.addItem(scheme.getName());
  }
  String toSelect=settings.getSchemeName();
  if (!StringUtil.isEmpty(toSelect)) {
    myRichCopyColorSchemeComboBox.setSelectedItem(toSelect);
  }
  myRichCopyStripWhitespaceCheckBox.setSelected(settings.isStripIndents());
}
