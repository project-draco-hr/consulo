{
  myProject=project;
  myVcs=vcs;
  myVcsManager=ProjectLevelVcsManager.getInstance(project);
  myDirtyScopeManager=VcsDirtyScopeManager.getInstance(project);
  myVcsListener=new GitRootsListener(){
    public void gitRootsChanged(){
      scan();
    }
  }
;
  myConfigListener=new GitConfigListener(){
    public void configChanged(    @NotNull VirtualFile gitRoot,    @Nullable VirtualFile configFile){
      String oldPath;
synchronized (myExcludeFiles) {
        if (!myExcludeFiles.containsKey(gitRoot)) {
          return;
        }
        oldPath=myExcludeFiles.get(gitRoot);
      }
      String newPath=getExcludeFile(gitRoot);
      if (oldPath == null ? newPath == null : oldPath.equals(newPath)) {
        return;
      }
synchronized (myExcludeFiles) {
        myExcludeFiles.put(gitRoot,newPath);
        myExcludeFilesPaths.clear();
        myExcludeFilesPaths.addAll(myExcludeFiles.values());
      }
      myDirtyScopeManager.dirDirtyRecursively(gitRoot);
    }
  }
;
  myVcs.addGitRootsListener(myVcsListener);
  myVcs.addGitConfigListener(myConfigListener);
  myFileListener=new MyFileListener();
  VirtualFileManager.getInstance().addVirtualFileListener(myFileListener);
  scan();
}
