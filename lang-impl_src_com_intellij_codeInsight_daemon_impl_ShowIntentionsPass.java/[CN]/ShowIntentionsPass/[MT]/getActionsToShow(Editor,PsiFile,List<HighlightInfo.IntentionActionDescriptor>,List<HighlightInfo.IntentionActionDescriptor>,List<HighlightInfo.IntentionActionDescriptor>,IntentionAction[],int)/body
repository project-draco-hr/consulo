{
  final PsiElement psiElement=psiFile.findElementAt(editor.getCaretModel().getOffset());
  LOG.assertTrue(psiElement == null || psiElement.isValid(),psiElement);
  final boolean isInProject=psiFile.getManager().isInProject(psiFile);
  int offset=editor.getCaretModel().getOffset();
  Project project=psiFile.getProject();
  for (  IntentionAction action : allIntentionActions) {
    if (action instanceof PsiElementBaseIntentionAction) {
      if (!isInProject || !((PsiElementBaseIntentionAction)action).isAvailable(project,editor,psiElement))       continue;
    }
 else     if (!action.isAvailable(project,editor,psiFile)) {
      continue;
    }
    List<IntentionAction> enableDisableIntentionAction=new ArrayList<IntentionAction>();
    enableDisableIntentionAction.add(new IntentionHintComponent.EnableDisableIntentionAction(action));
    intentionsToShow.add(new HighlightInfo.IntentionActionDescriptor(action,enableDisableIntentionAction,null));
  }
  List<HighlightInfo.IntentionActionDescriptor> actions=QuickFixAction.getAvailableActions(editor,psiFile,passIdToShowIntentionsFor);
  final DaemonCodeAnalyzer codeAnalyzer=DaemonCodeAnalyzer.getInstance(project);
  HighlightInfo infoAtCursor=((DaemonCodeAnalyzerImpl)codeAnalyzer).findHighlightByOffset(editor.getDocument(),offset,true);
  if (infoAtCursor == null || infoAtCursor.getSeverity() == HighlightSeverity.ERROR) {
    errorFixesToShow.addAll(actions);
  }
 else {
    inspectionFixesToShow.addAll(actions);
  }
}
