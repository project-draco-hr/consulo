{
  DaemonCodeAnalyzerImpl codeAnalyzer=(DaemonCodeAnalyzerImpl)DaemonCodeAnalyzer.getInstance(myProject);
  if (LookupManager.getInstance(myProject).getActiveLookup() != null)   return;
  LogicalPosition caretPos=myEditor.getCaretModel().getLogicalPosition();
  Rectangle visibleArea=myEditor.getScrollingModel().getVisibleArea();
  Point xy=myEditor.logicalPositionToXY(caretPos);
  if (!visibleArea.contains(xy))   return;
  List<HighlightInfo.IntentionActionDescriptor> intentionsToShow=new ArrayList<HighlightInfo.IntentionActionDescriptor>();
  List<HighlightInfo.IntentionActionDescriptor> errorFixesToShow=new ArrayList<HighlightInfo.IntentionActionDescriptor>();
  List<HighlightInfo.IntentionActionDescriptor> inspectionFixesToShow=new ArrayList<HighlightInfo.IntentionActionDescriptor>();
  if (myIntentionActions == null) {
    myIntentionActions=IntentionManager.getInstance().getIntentionActions();
  }
  getActionsToShow(myEditor,myFile,intentionsToShow,errorFixesToShow,inspectionFixesToShow,myIntentionActions,myPassIdToShowIntentionsFor);
  if (myFile instanceof IntentionFilterOwner) {
    final IntentionFilterOwner.IntentionActionsFilter actionsFilter=((IntentionFilterOwner)myFile).getIntentionActionsFilter();
    if (actionsFilter == null)     return;
    if (actionsFilter != IntentionFilterOwner.IntentionActionsFilter.EVERYTHING_AVAILABLE) {
      filterIntentionActions(actionsFilter,intentionsToShow);
      filterIntentionActions(actionsFilter,errorFixesToShow);
      filterIntentionActions(actionsFilter,inspectionFixesToShow);
    }
  }
  if (!intentionsToShow.isEmpty() || !errorFixesToShow.isEmpty() || !inspectionFixesToShow.isEmpty()) {
    boolean showBulb=false;
    for (    HighlightInfo.IntentionActionDescriptor action : ContainerUtil.concat(errorFixesToShow,inspectionFixesToShow)) {
      if (IntentionManagerSettings.getInstance().isShowLightBulb(action.getAction())) {
        showBulb=true;
        break;
      }
    }
    if (!showBulb) {
      for (      HighlightInfo.IntentionActionDescriptor descriptor : intentionsToShow) {
        final IntentionAction action=descriptor.getAction();
        if (IntentionManagerSettings.getInstance().isShowLightBulb(action) && action.isAvailable(myProject,myEditor,myFile)) {
          showBulb=true;
          break;
        }
      }
    }
    if (showBulb) {
      IntentionHintComponent hintComponent=codeAnalyzer.getLastIntentionHint();
      if (hintComponent != null) {
        if (hintComponent.updateActions(intentionsToShow,errorFixesToShow,inspectionFixesToShow)) {
          return;
        }
        codeAnalyzer.setLastIntentionHint(null);
      }
      if (!HintManager.getInstance().hasShownHintsThatWillHideByOtherHint()) {
        hintComponent=IntentionHintComponent.showIntentionHint(myProject,myFile,myEditor,intentionsToShow,errorFixesToShow,inspectionFixesToShow,false);
        codeAnalyzer.setLastIntentionHint(hintComponent);
      }
    }
  }
}
