{
  if (myEvaluated || myNode.isObsolete()) {
    return;
  }
  new Task.Backgroundable(myNode.getTree().getProject(),XDebuggerBundle.message("load.value.task.text")){
    @Override public void run(    @NotNull ProgressIndicator indicator){
      indicator.setIndeterminate(true);
      int i=0;
      while (!myCanceled && !myEvaluated) {
        indicator.checkCanceled();
        indicator.setFraction(((i++) % 100) * 0.01);
        mySemaphore.waitFor(300);
      }
    }
    @Override public boolean shouldStartInBackground(){
      return false;
    }
    @RequiredDispatchThread @Override public void onCancel(){
      myCanceled=true;
    }
  }
.queue();
}
