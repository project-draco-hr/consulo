{
  List<AbstractTestProxy> failed=getFailedTests();
  final DataContext dataContext=e.getDataContext();
  Project project=PlatformDataKeys.PROJECT.getData(dataContext);
  JUnitConfiguration configuration=myModel.getProperties().getConfiguration();
  final TestMethods testMethods=new TestMethods(project,configuration,myRunnerSettings,myConfigurationPerRunnerSettings,failed);
  boolean isDebug=myConsoleProperties.getDebugSession() != null;
  try {
    final RunProfile profile=new ModuleRunProfile(){
      public RunProfileState getState(      DataContext context,      RunnerInfo runnerInfo,      RunnerSettings runnerSettings,      ConfigurationPerRunnerSettings configurationSettings) throws ExecutionException {
        testMethods.clear();
        return testMethods;
      }
      public String getName(){
        return ExecutionBundle.message("rerun.failed.tests.action.name");
      }
      public void checkConfiguration() throws RuntimeConfigurationException {
      }
      public Module[] getModules(){
        return Module.EMPTY_ARRAY;
      }
    }
;
    final ProgramRunner runner=isDebug ? RunnerRegistry.getInstance().getRunner(DefaultDebugExecutor.EXECUTOR_ID,profile) : RunnerRegistry.getInstance().getRunner(DefaultRunExecutor.EXECUTOR_ID,profile);
    LOG.assertTrue(runner != null);
    runner.execute(profile,dataContext,myRunnerSettings,myConfigurationPerRunnerSettings);
  }
 catch (  ExecutionException e1) {
    LOG.error(e1);
  }
 finally {
    testMethods.clear();
  }
}
