{
  int endCalculateIndex=Math.min(endIndex + WALK_SIZE,myGraph.getCountVisibleNodes() - 1);
  List<Set<Edge>> result=new ArrayList<Set<Edge>>(endIndex - startIndex + 1);
  Node currentNode=myGraph.getNode(endCalculateIndex);
  Set<Edge> edgesInCurrentRow=new HashSet<Edge>();
  if (endCalculateIndex <= endIndex)   result.add(new HashSet<Edge>(edgesInCurrentRow));
  for (int i=endCalculateIndex - 1; i >= startIndex; i--) {
    Node prevNode=myGraph.getNode(i);
    oneUpStep(edgesInCurrentRow,currentNode,prevNode);
    if (i <= endIndex)     result.add(new HashSet<Edge>(edgesInCurrentRow));
    currentNode=prevNode;
  }
  Collections.reverse(result);
  return result;
}
