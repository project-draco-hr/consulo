{
  int startCalculateIndex=Math.max(startIndex - WALK_SIZE,0);
  List<Set<Edge>> result=new ArrayList<Set<Edge>>(endIndex - startIndex + 1);
  Node currentNode=myGraph.getNode(startCalculateIndex);
  Set<Edge> edgesInCurrentRow=new HashSet<Edge>();
  if (startCalculateIndex >= startIndex)   result.add(new HashSet<Edge>(edgesInCurrentRow));
  for (int i=startCalculateIndex + 1; i <= endIndex; i++) {
    Node nextNode=myGraph.getNode(i);
    oneDownStep(edgesInCurrentRow,currentNode,nextNode);
    if (i >= startIndex)     result.add(new HashSet<Edge>(edgesInCurrentRow));
    currentNode=nextNode;
  }
  return result;
}
