{
  path=getLastCommitName(project,path);
  GitSimpleHandler h=new GitSimpleHandler(project,root,GitCommand.LOG);
  h.setNoSSH(true);
  h.setStdoutSuppressed(true);
  h.addParameters("-M","--follow","--name-only","--pretty=format:%H%x00%ct%x00%an%x20%x3C%ae%x3E%x00%cn%x20%x3C%ce%x3E%x00%s%n%n%b%x00","--encoding=UTF-8");
  if (parameters != null && parameters.length > 0) {
    h.addParameters(parameters);
  }
  h.endOptions();
  h.addRelativePaths(path);
  String output=h.run();
  List<VcsFileRevision> rc=new ArrayList<VcsFileRevision>();
  StringTokenizer tk=new StringTokenizer(output,"\u0000\n",false);
  String prefix=root.getPath() + "/";
  while (tk.hasMoreTokens()) {
    final GitRevisionNumber revision=new GitRevisionNumber(tk.nextToken("\u0000\n"),GitUtil.parseTimestamp(tk.nextToken("\u0000")));
    final String author=GitUtil.adjustAuthorName(tk.nextToken("\u0000"),tk.nextToken("\u0000"));
    final String message=tk.nextToken("\u0000").trim();
    final FilePath revisionPath=VcsUtil.getFilePathForDeletedFile(prefix + GitUtil.unescapePath(tk.nextToken("\u0000\n")),false);
    rc.add(new GitFileRevision(project,revisionPath,revision,author,message,null));
  }
  return rc;
}
