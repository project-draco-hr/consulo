{
  path=getLastCommitName(project,path);
  GitSimpleHandler h=new GitSimpleHandler(project,root,GitCommand.LOG);
  GitLogParser parser=new GitLogParser(HASH,COMMIT_TIME,AUTHOR_NAME,AUTHOR_EMAIL,COMMITTER_NAME,COMMITTER_EMAIL,SUBJECT,BODY);
  h.setNoSSH(true);
  h.setStdoutSuppressed(true);
  h.addParameters("-M","--follow","--name-only",parser.getPretty(),"--encoding=UTF-8");
  parser.parseStatusBeforeName(false);
  if (parameters != null && parameters.length > 0) {
    h.addParameters(parameters);
  }
  h.endOptions();
  h.addRelativePaths(path);
  String output=h.run();
  final List<GitLogRecord> result=parser.parse(output);
  final List<VcsFileRevision> rc=new ArrayList<VcsFileRevision>();
  for (  GitLogRecord record : result) {
    final GitRevisionNumber revision=new GitRevisionNumber(record.getHash(),record.getDate());
    final String message=record.getFullMessage();
    final FilePath revisionPath=record.getFilePaths(root).get(0);
    final Pair<String,String> authorPair=Pair.create(record.getAuthorName(),record.getAuthorEmail());
    final Pair<String,String> committerPair=record.getCommitterName() == null ? null : Pair.create(record.getCommitterName(),record.getCommitterEmail());
    rc.add(new GitFileRevision(project,revisionPath,revision,Pair.create(authorPair,committerPair),message,null));
  }
  return rc;
}
