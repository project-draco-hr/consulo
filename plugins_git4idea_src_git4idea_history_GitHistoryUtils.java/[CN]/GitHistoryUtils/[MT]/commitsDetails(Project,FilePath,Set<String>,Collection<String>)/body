{
  path=getLastCommitName(project,path);
  final VirtualFile root=GitUtil.getGitRoot(path);
  GitSimpleHandler h=new GitSimpleHandler(project,root,GitCommand.SHOW);
  GitLogParser parser=new GitLogParser(SHORT_HASH,HASH,COMMIT_TIME,AUTHOR_NAME,AUTHOR_EMAIL,COMMITTER_NAME,COMMITTER_EMAIL,SHORT_PARENTS,REF_NAMES,SUBJECT,BODY);
  h.setNoSSH(true);
  h.setStdoutSuppressed(true);
  h.addParameters("--name-only",parser.getPretty(),"--encoding=UTF-8");
  parser.setNameInOutput(false);
  h.addParameters(new ArrayList<String>(commitsIds));
  h.endOptions();
  h.addRelativePaths(path);
  String output=h.run();
  final List<GitCommit> rc=new ArrayList<GitCommit>();
  for (  GitLogRecord record : parser.parse(output)) {
    final Pair<List<String>,List<String>> tagsAndBranches=record.getTagsAndBranches(allBranchesSet);
    rc.add(new GitCommit(record.getShortHash(),new SHAHash(record.getHash()),record.getAuthorName(),record.getCommitterName(),record.getDate(),record.getFullMessage(),new HashSet<String>(Arrays.asList(record.getParentsShortHashes())),record.getFilePaths(root),record.getAuthorEmail(),record.getCommitterEmail(),tagsAndBranches.first,tagsAndBranches.second));
  }
  return rc;
}
