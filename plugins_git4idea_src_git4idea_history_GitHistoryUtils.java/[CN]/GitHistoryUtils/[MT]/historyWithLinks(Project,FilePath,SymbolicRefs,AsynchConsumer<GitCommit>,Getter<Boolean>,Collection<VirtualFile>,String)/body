{
  path=getLastCommitName(project,path);
  final VirtualFile root=GitUtil.getGitRoot(path);
  final GitLineHandler h=new GitLineHandler(project,root,GitCommand.LOG);
  final GitLogParser parser=new GitLogParser(project,GitLogParser.NameStatus.STATUS,SHORT_HASH,HASH,COMMIT_TIME,AUTHOR_NAME,AUTHOR_TIME,AUTHOR_EMAIL,COMMITTER_NAME,COMMITTER_EMAIL,SHORT_PARENTS,REF_NAMES,SUBJECT,BODY,RAW_BODY);
  h.setNoSSH(true);
  h.setStdoutSuppressed(true);
  h.addParameters(parameters);
  h.addParameters("--name-status",parser.getPretty(),"--encoding=UTF-8","--full-history");
  if (paths != null && !paths.isEmpty()) {
    h.endOptions();
    h.addRelativeFiles(paths);
  }
 else {
    h.addParameters("--sparse");
    h.endOptions();
    h.addRelativePaths(path);
  }
  final VcsException[] exc=new VcsException[1];
  final Semaphore semaphore=new Semaphore();
  final StringBuilder sb=new StringBuilder();
  final Ref<Boolean> skipFirst=new Ref<Boolean>(true);
  h.addLineListener(new GitLineHandlerAdapter(){
    @Override public void onLineAvailable(    final String line,    final Key outputType){
      try {
        if (ProcessOutputTypes.STDOUT.equals(outputType)) {
          if (isCanceled != null && isCanceled.get()) {
            h.cancel();
            return;
          }
          if ((!line.startsWith("\u0001")) || skipFirst.get()) {
            if (sb.length() > 0) {
              sb.append("\n");
            }
            sb.append(line);
            skipFirst.set(false);
            return;
          }
          takeLine(project,line,sb,parser,refs,root,exc,h,gitCommitConsumer);
        }
      }
 catch (      ProcessCanceledException e) {
        h.cancel();
        semaphore.up();
      }
    }
    @Override public void processTerminated(    int exitCode){
      semaphore.up();
    }
    @Override public void startFailed(    Throwable exception){
      semaphore.up();
    }
  }
);
  semaphore.down();
  h.start();
  semaphore.waitFor();
  takeLine(project,"",sb,parser,refs,root,exc,h,gitCommitConsumer);
  gitCommitConsumer.finished();
  if (exc[0] != null) {
    throw exc[0];
  }
}
