{
  VirtualFile root=GitUtil.getGitRoot(filePath);
  GitBranch c=GitBranchUtil.getCurrentBranch(project,root);
  GitBranch t=c == null ? null : c.tracked(project,root);
  if (t == null) {
    return new ItemLatestState(getCurrentRevision(project,filePath,null),true,false);
  }
  filePath=getLastCommitName(project,filePath);
  GitSimpleHandler h=new GitSimpleHandler(project,root,GitCommand.LOG);
  GitLogParser parser=new GitLogParser(project,GitLogParser.NameStatus.STATUS,HASH,COMMIT_TIME,SHORT_PARENTS);
  h.setNoSSH(true);
  h.setSilent(true);
  h.addParameters("-n1",parser.getPretty(),"--name-status",t.getFullName());
  h.endOptions();
  h.addRelativePaths(filePath);
  String result=h.run();
  if (result.length() == 0) {
    return null;
  }
  GitLogRecord record=parser.parseOneRecord(result);
  if (record == null) {
    return null;
  }
  final List<Change> changes=record.parseChanges(project,root);
  boolean exists=changes.isEmpty() || !FileStatus.DELETED.equals(changes.get(0).getFileStatus());
  record.setUsedHandler(h);
  return new ItemLatestState(new GitRevisionNumber(record.getHash(),record.getDate()),exists,false);
}
