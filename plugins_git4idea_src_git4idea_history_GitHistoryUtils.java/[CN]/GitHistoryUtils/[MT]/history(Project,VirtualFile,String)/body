{
  GitSimpleHandler h=new GitSimpleHandler(project,root,GitCommand.LOG);
  GitLogParser parser=new GitLogParser(project,GitLogParser.NameStatus.STATUS,HASH,COMMIT_TIME,AUTHOR_NAME,AUTHOR_TIME,AUTHOR_EMAIL,COMMITTER_NAME,COMMITTER_EMAIL,PARENTS,SUBJECT,BODY,RAW_BODY);
  h.setStdoutSuppressed(true);
  h.addParameters(parameters);
  h.addParameters("--name-status",parser.getPretty(),"--encoding=UTF-8");
  h.addParameters("--full-history","--sparse");
  h.endOptions();
  String output=h.run();
  List<GitLogRecord> records=parser.parse(output);
  return ContainerUtil.mapNotNull(records,new Function<GitLogRecord,GitCommit>(){
    @Override public GitCommit fun(    GitLogRecord record){
      try {
        List<Hash> parents=ContainerUtil.map(record.getParentsHashes(),new Function<String,Hash>(){
          @Override public Hash fun(          String hash){
            return Hash.create(hash);
          }
        }
);
        return GitCommit.builder().setHash(Hash.create(record.getHash())).setAuthorName(record.getAuthorName()).setAuthorEmail(record.getAuthorEmail()).setAuthorTime(record.getAuthorTimeStamp()).setCommitterName(record.getCommitterName()).setCommitterEmail(record.getCommitterEmail()).setCommitTime(record.getLongTimeStamp()).setSubject(record.getSubject()).setMessage(record.getFullMessage()).setParents(parents).setChanges(record.parseChanges(project,root)).build();
      }
 catch (      VcsException e) {
        LOG.error(e);
        return null;
      }
    }
  }
);
}
