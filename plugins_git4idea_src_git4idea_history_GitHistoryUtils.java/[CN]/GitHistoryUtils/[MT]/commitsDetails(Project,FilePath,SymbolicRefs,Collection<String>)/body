{
  path=getLastCommitName(project,path);
  final VirtualFile root=GitUtil.getGitRoot(path);
  GitSimpleHandler h=new GitSimpleHandler(project,root,GitCommand.SHOW);
  GitLogParser parser=new GitLogParser(SHORT_HASH,HASH,COMMIT_TIME,AUTHOR_NAME,AUTHOR_TIME,AUTHOR_EMAIL,COMMITTER_NAME,COMMITTER_EMAIL,SHORT_PARENTS,REF_NAMES,SUBJECT,BODY);
  h.setNoSSH(true);
  h.setStdoutSuppressed(true);
  h.addParameters("--name-status",parser.getPretty(),"--encoding=UTF-8");
  parser.parseStatusBeforeName(true);
  h.addParameters(new ArrayList<String>(commitsIds));
  h.endOptions();
  h.addRelativePaths(path);
  String output;
  try {
    output=h.run();
    final List<GitCommit> rc=new ArrayList<GitCommit>();
    for (    GitLogRecord record : parser.parse(output)) {
      final List<String> branches=new ArrayList<String>();
      GitBranch.listAsStrings(project,root,true,true,branches,record.getHash());
      final GitCommit gitCommit=createCommit(project,refs,root,record,branches);
      rc.add(gitCommit);
    }
    return rc;
  }
 catch (  VcsException e) {
    throw e;
  }
}
