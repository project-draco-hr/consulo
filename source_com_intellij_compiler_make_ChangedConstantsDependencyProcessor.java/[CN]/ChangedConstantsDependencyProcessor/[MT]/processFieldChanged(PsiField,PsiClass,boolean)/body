{
  if (!isAccessibilityChange && field.hasModifierProperty(PsiModifier.PRIVATE)) {
    return;
  }
  if (ENABLE_TRACING) {
    System.out.println("Processing changed field = " + field);
  }
  Set usages=new HashSet();
  addUsages(field,usages,isAccessibilityChange);
  if (LOG.isDebugEnabled()) {
    LOG.debug("++++++++++++++++++++++++++++++++++++++++++++++++");
    LOG.debug("Processing changed field: " + aClass.getQualifiedName() + "."+ field.getName());
  }
  for (Iterator it=usages.iterator(); it.hasNext(); ) {
    PsiElement usage=(PsiElement)it.next();
    PsiClass ownerClass=getOwnerClass(usage);
    if (LOG.isDebugEnabled()) {
      if (ownerClass != null) {
        LOG.debug("Usage " + usage + " found in class: "+ ownerClass.getQualifiedName());
      }
 else {
        LOG.debug("Usage " + usage + " found in class: null");
      }
    }
    if (ownerClass != null && !ownerClass.equals(aClass)) {
      int qualifiedName=myDependencyCache.getSymbolTable().getId(ownerClass.getQualifiedName());
      if (LOG.isDebugEnabled()) {
        LOG.debug("Marking class id = [" + qualifiedName + "], name=["+ myDependencyCache.resolve(qualifiedName)+ "]");
      }
      if (myDependencyCache.markClass(qualifiedName,true)) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Marked dependent class " + myDependencyCache.resolve(qualifiedName) + "; reason: constants changed in "+ myDependencyCache.resolve(myQName));
        }
      }
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("+++++++++++++++++++++++++++++++++++++++++++++++");
  }
}
