{
  myTemplatesList=new FileTemplateTabAsList(TEMPLATES_TITLE){
    public void onTemplateSelected(){
      onListSelectionChanged();
    }
  }
;
  myPatternsList=new FileTemplateTabAsList(INCLUDES_TITLE){
    public void onTemplateSelected(){
      onListSelectionChanged();
    }
  }
;
  myCodeTemplatesList=new FileTemplateTabAsList(CODE_TITLE){
    public void onTemplateSelected(){
      onListSelectionChanged();
    }
  }
;
  myCurrentTab=myTemplatesList;
  myJ2eeTemplatesList=new FileTemplateTabAsTree(J2EE_TITLE){
    public void onTemplateSelected(){
      onListSelectionChanged();
    }
    protected FileTemplateNode initModel(){
      SortedSet<FileTemplateGroupDescriptor> categories=new TreeSet<FileTemplateGroupDescriptor>(new Comparator<FileTemplateGroupDescriptor>(){
        public int compare(        FileTemplateGroupDescriptor o1,        FileTemplateGroupDescriptor o2){
          return o1.getTitle().compareTo(o2.getTitle());
        }
      }
);
      Set<FileTemplateGroupDescriptorFactory> factories=new THashSet<FileTemplateGroupDescriptorFactory>();
      factories.addAll(Arrays.asList(ApplicationManager.getApplication().getComponents(FileTemplateGroupDescriptorFactory.class)));
      factories.addAll(Arrays.asList(Extensions.getExtensions(FileTemplateGroupDescriptorFactory.EXTENSION_POINT_NAME)));
      for (      FileTemplateGroupDescriptorFactory templateGroupFactory : factories) {
        ContainerUtil.addIfNotNull(templateGroupFactory.getFileTemplatesDescriptor(),categories);
      }
      return new FileTemplateNode("ROOT",null,ContainerUtil.map2List(categories,new Function<FileTemplateGroupDescriptor,FileTemplateNode>(){
        public FileTemplateNode fun(        FileTemplateGroupDescriptor s){
          return new FileTemplateNode(s);
        }
      }
));
    }
  }
;
  myTabs=new FileTemplateTab[]{myTemplatesList,myPatternsList,myCodeTemplatesList,myJ2eeTemplatesList};
  myTabbedPane=new TabbedPaneWrapper();
  myTabbedPane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);
  for (  FileTemplateTab tab : myTabs) {
    myTabbedPane.addTab(tab.getTitle(),new JScrollPane(tab.getComponent()));
  }
  myTabbedPane.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      onTabChanged();
    }
  }
);
  DefaultActionGroup group=new DefaultActionGroup();
  AnAction removeAction=new AnAction(IdeBundle.message("action.remove.template"),null,IconLoader.getIcon("/general/remove.png")){
    public void actionPerformed(    AnActionEvent e){
      onRemove();
    }
    public void update(    AnActionEvent e){
      super.update(e);
      FileTemplate selectedItem=myCurrentTab.getSelectedTemplate();
      e.getPresentation().setEnabled(selectedItem != null && !isInternalTemplate(selectedItem.getName(),myCurrentTab.getTitle()));
    }
  }
;
  AnAction addAction=new AnAction(IdeBundle.message("action.create.template"),null,IconLoader.getIcon("/general/add.png")){
    public void actionPerformed(    AnActionEvent e){
      onAdd();
    }
    public void update(    AnActionEvent e){
      super.update(e);
      e.getPresentation().setEnabled(!(myCurrentTab == myCodeTemplatesList || myCurrentTab == myJ2eeTemplatesList));
    }
  }
;
  AnAction cloneAction=new AnAction(IdeBundle.message("action.copy.template"),null,IconLoader.getIcon("/actions/copy.png")){
    public void actionPerformed(    AnActionEvent e){
      onClone();
    }
    public void update(    AnActionEvent e){
      super.update(e);
      e.getPresentation().setEnabled(myCurrentTab != myCodeTemplatesList && myCurrentTab != myJ2eeTemplatesList && myCurrentTab.getSelectedTemplate() != null);
    }
  }
;
  AnAction resetAction=new AnAction(IdeBundle.message("action.reset.to.default"),null,IconLoader.getIcon("/actions/reset.png")){
    public void actionPerformed(    AnActionEvent e){
      onReset();
    }
    public void update(    AnActionEvent e){
      super.update(e);
      FileTemplate selectedItem=myCurrentTab.getSelectedTemplate();
      FileTemplateManagerImpl manager=FileTemplateManagerImpl.getInstance();
      e.getPresentation().setEnabled(selectedItem != null && !selectedItem.isDefault() && manager.getDefaultTemplate(selectedItem.getName(),selectedItem.getExtension()) != null);
    }
  }
;
  group.add(addAction);
  group.add(removeAction);
  group.add(cloneAction);
  group.add(resetAction);
  addAction.registerCustomShortcutSet(CommonShortcuts.INSERT,myCurrentTab.getComponent());
  removeAction.registerCustomShortcutSet(CommonShortcuts.DELETE,myCurrentTab.getComponent());
  myToolBar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,group,true).getComponent();
  myEditor=new FileTemplateConfigurable();
  myEditor.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      onEditorChanged();
    }
  }
);
  myMainPanel=new JPanel(new GridBagLayout()){
    public void doLayout(){
      doMainPanelLayout();
    }
  }
;
  myMainPanel.add(myToolBar,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(2,2,2,2),0,0));
  myMainPanel.add(myTabbedPane.getComponent(),new GridBagConstraints(0,1,1,1,0.0,1.0,GridBagConstraints.NORTHWEST,GridBagConstraints.BOTH,new Insets(2,2,2,2),0,0));
  myEditorComponent=myEditor.createComponent();
  myMainPanel.add(myEditorComponent,new GridBagConstraints(1,0,1,2,1.0,1.0,GridBagConstraints.CENTER,GridBagConstraints.BOTH,new Insets(2,2,2,2),0,0));
  myMainPanel.setMinimumSize(new Dimension(400,300));
  myMainPanel.setPreferredSize(new Dimension(700,500));
  return myMainPanel;
}
