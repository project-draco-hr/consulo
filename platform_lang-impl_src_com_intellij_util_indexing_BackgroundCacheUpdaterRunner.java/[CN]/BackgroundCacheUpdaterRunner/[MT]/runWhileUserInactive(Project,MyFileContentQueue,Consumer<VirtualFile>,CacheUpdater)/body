{
  final ProgressIndicatorBase innerIndicator=new ProgressIndicatorBase();
  final ApplicationAdapter canceller=new ApplicationAdapter(){
    @Override public void beforeWriteActionStart(    Object action){
      innerIndicator.cancel();
    }
  }
;
  final Ref<Boolean> finished=Ref.create(Boolean.FALSE);
  ProgressManager.getInstance().runProcess(new Runnable(){
    public void run(){
      final Application application=ApplicationManager.getApplication();
      application.addApplicationListener(canceller);
      try {
        while (true) {
          if (project != null && project.isDisposed()) {
            return;
          }
          final com.intellij.ide.startup.FileContent fileContent=queue.take();
          if (fileContent == null) {
            finished.set(Boolean.TRUE);
            return;
          }
          final VirtualFile file=fileContent.getVirtualFile();
          if (file == null) {
            finished.set(Boolean.TRUE);
            return;
          }
          if (Boolean.TRUE.equals(file.getUserData(DONT_INDEX_AGAIN_KEY))) {
            continue;
          }
          try {
            application.runReadAction(new Runnable(){
              public void run(){
                innerIndicator.checkCanceled();
                if (!file.isValid()) {
                  return;
                }
                if (project != null && project.isDisposed()) {
                  return;
                }
                uiUpdater.consume(file);
                if (project != null) {
                  fileContent.putUserData(FileBasedIndex.PROJECT,project);
                }
                updater.processFile(fileContent);
                innerIndicator.checkCanceled();
              }
            }
);
          }
 catch (          ProcessCanceledException e) {
            queue.pushback(fileContent);
            return;
          }
catch (          Throwable e) {
            LOG.error("Error while indexing " + file.getPresentableUrl() + "\n"+ "To reindex this file IDEA has to be restarted",e);
            file.putUserData(DONT_INDEX_AGAIN_KEY,Boolean.TRUE);
          }
        }
      }
  finally {
        application.removeApplicationListener(canceller);
      }
    }
  }
,innerIndicator);
  return finished.get().booleanValue();
}
