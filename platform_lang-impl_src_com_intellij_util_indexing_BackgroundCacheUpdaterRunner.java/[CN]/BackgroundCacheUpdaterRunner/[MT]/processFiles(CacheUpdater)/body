{
  final CountDownLatch latch=new CountDownLatch(myProjectToFileMap.size());
  for (  Project project : ProjectManager.getInstance().getOpenProjects()) {
    if (!myProjectToFileMap.containsKey(project)) {
      DumbServiceImpl.getInstance(project).queueIndexUpdate(new Consumer<ProgressIndicator>(){
        public void consume(        ProgressIndicator progressIndicator){
          try {
            latch.await();
          }
 catch (          InterruptedException ignored) {
          }
        }
      }
);
    }
  }
  for (  Map.Entry<Project,Collection<VirtualFile>> entry : myProjectToFileMap.entrySet()) {
    final Project project=entry.getKey();
    final Collection<VirtualFile> files=entry.getValue();
    final Consumer<ProgressIndicator> action=new Consumer<ProgressIndicator>(){
      public void consume(      final ProgressIndicator indicator){
        final MyFileContentQueue queue=new MyFileContentQueue();
        try {
          final double count=files.size();
          queue.queue(files,indicator);
          final Consumer<VirtualFile> uiUpdater=new Consumer<VirtualFile>(){
            final Set<VirtualFile> processed=new THashSet<VirtualFile>();
            public void consume(            VirtualFile virtualFile){
              indicator.checkCanceled();
              indicator.setFraction(processed.size() / count);
              processed.add(virtualFile);
              indicator.setText2(virtualFile.getPresentableUrl());
            }
          }
;
          while (project == null || !project.isDisposed()) {
            indicator.checkCanceled();
            if (runWhileUserInactive(project,queue,uiUpdater,updater)) {
              break;
            }
          }
          if (project != null && project.isDisposed()) {
            indicator.cancel();
          }
        }
  finally {
          latch.countDown();
          queue.clear();
          updater.updatingDone();
          try {
            latch.await();
          }
 catch (          InterruptedException ignored) {
          }
        }
      }
    }
;
    if (project != null) {
      DumbServiceImpl.getInstance(project).queueIndexUpdate(action);
    }
 else {
      try {
        final ProgressIndicator currentIndicator=ProgressManager.getInstance().getProgressIndicator();
        action.consume(currentIndicator != null ? currentIndicator : new EmptyProgressIndicator());
      }
  finally {
        latch.countDown();
      }
    }
  }
}
