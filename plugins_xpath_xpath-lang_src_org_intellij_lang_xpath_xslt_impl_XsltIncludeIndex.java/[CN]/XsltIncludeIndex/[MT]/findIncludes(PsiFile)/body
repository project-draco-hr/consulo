{
  if (!(psiFile instanceof XmlFile))   return PsiIncludeManager.IncludeInfo.EMPTY_ARRAY;
  final List<XmlTag> includes=new SmartList<XmlTag>();
  try {
    final XmlTag root=((XmlFile)psiFile).getDocument().getRootTag();
    Collections.addAll(includes,root.findSubTags("include",XsltSupport.XSLT_NS));
    Collections.addAll(includes,root.findSubTags("import",XsltSupport.XSLT_NS));
  }
 catch (  NullPointerException e) {
    return PsiIncludeManager.IncludeInfo.EMPTY_ARRAY;
  }
  final PsiIncludeManager.IncludeInfo[] info=new PsiIncludeManager.IncludeInfo[includes.size()];
  for (int i=0; i < info.length; i++) {
    final XmlTag directive=includes.get(i);
    final PsiFile target=resolve(psiFile,directive);
    final String[] fileNames;
    if (target != null) {
      fileNames=new String[]{target.getName()};
    }
 else {
      final String href=directive.getAttributeValue("href");
      if (href != null && href.length() > 0) {
        final String[] parts=href.split("[/\\\\]");
        fileNames=new String[]{parts[parts.length - 1]};
      }
 else {
        fileNames=ArrayUtil.EMPTY_STRING_ARRAY;
      }
    }
    info[i]=new PsiIncludeManager.IncludeInfo(target,directive,fileNames,this);
  }
  return info;
}
