{
  super.visitVariable(variable);
  if (!(variable instanceof PsiLocalVariable)) {
    return;
  }
  final PsiExpression initializer=variable.getInitializer();
  if (!isMoveable(initializer)) {
    return;
  }
  final PsiElement variableScope=ScopeUtils.getParentOfTypes(variable,ScopeUtils.TYPES);
  if (variableScope == null) {
    return;
  }
  final PsiManager manager=variable.getManager();
  final PsiSearchHelper searchHelper=manager.getSearchHelper();
  final PsiReference[] references=searchHelper.findReferences(variable,variable.getUseScope(),false);
  if (references.length == 0) {
    return;
  }
  PsiElement commonParent=ScopeUtils.getCommonParent(references);
  if (commonParent == null) {
    return;
  }
  if (initializer != null) {
    commonParent=ScopeUtils.moveOutOfLoops(commonParent,variableScope);
    if (commonParent == null) {
      return;
    }
  }
  if (PsiTreeUtil.isAncestor(variableScope,commonParent,true)) {
    registerVariableError(variable);
    return;
  }
  if (m_onlyLookAtBlocks) {
    return;
  }
  if (commonParent instanceof PsiForStatement) {
    return;
  }
  final PsiReference firstReference=references[0];
  final PsiElement referenceElement=firstReference.getElement();
  if (referenceElement == null) {
    return;
  }
  final PsiElement blockChild=ScopeUtils.getChildWhichContainsElement(variableScope,referenceElement);
  if (blockChild == null || blockChild instanceof JspExpressionStatement) {
    return;
  }
  final PsiElement insertionPoint=ScopeUtils.findTighterDeclarationLocation(blockChild,variable);
  if (insertionPoint == null) {
    if (initializer != null) {
      return;
    }
    if (!(blockChild instanceof PsiExpressionStatement)) {
      return;
    }
    final PsiExpressionStatement expressionStatement=(PsiExpressionStatement)blockChild;
    final PsiExpression expression=expressionStatement.getExpression();
    if (!(expression instanceof PsiAssignmentExpression)) {
      return;
    }
    final PsiAssignmentExpression assignmentExpression=(PsiAssignmentExpression)expression;
    final PsiExpression lExpression=assignmentExpression.getLExpression();
    if (!lExpression.equals(firstReference)) {
      return;
    }
  }
  registerVariableError(variable);
}
