{
  final Set<String> packageNames=new HashSet<String>();
  for (  PsiFile psiFile : filesToMove) {
    if (psiFile instanceof PsiClassOwner) {
      final PsiClass[] classes=((PsiClassOwner)psiFile).getClasses();
      for (      PsiClass aClass : classes) {
        Collections.addAll(usages,MoveClassesOrPackagesUtil.findUsages(aClass,searchInComments,searchInNonJavaFiles,aClass.getName()));
      }
      packageNames.add(((PsiClassOwner)psiFile).getPackageName());
    }
  }
  final JavaPsiFacade psiFacade=JavaPsiFacade.getInstance(project);
  for (  String packageName : packageNames) {
    final PsiJavaPackage aPackage=psiFacade.findPackage(packageName);
    if (aPackage != null) {
      boolean remainsNothing=true;
      for (      PsiDirectory packageDirectory : aPackage.getDirectories()) {
        if (!isUnderRefactoring(packageDirectory,directoriesToMove)) {
          remainsNothing=false;
          break;
        }
      }
      if (remainsNothing) {
        for (        PsiReference reference : ReferencesSearch.search(aPackage)) {
          final PsiElement element=reference.getElement();
          final PsiImportStatementBase statementBase=PsiTreeUtil.getParentOfType(element,PsiImportStatementBase.class);
          if (statementBase != null && statementBase.isOnDemand()) {
            usages.add(new RemoveOnDemandImportStatementsUsageInfo(statementBase));
          }
        }
      }
    }
  }
}
