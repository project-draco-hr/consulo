{
  JavaCompiler compiler=new com.sun.tools.javac.api.JavacTool();
  StandardJavaFileManager manager=new MyFileManager(this,outputDir);
  Iterable<? extends JavaFileObject> input=manager.getJavaFileObjectsFromFiles(paths);
  DiagnosticListener<JavaFileObject> listener=new DiagnosticListener<JavaFileObject>(){
    public void report(    Diagnostic<? extends JavaFileObject> diagnostic){
      CompilationEvent event=CompilationEvent.diagnostic(diagnostic);
      myCompilationResults.offer(event);
    }
  }
;
  try {
    PrintWriter silent=new PrintWriter(new OutputStream(){
      public void write(      int b){
      }
    }
);
    JavaCompiler.CompilationTask task=compiler.getTask(silent,manager,listener,commandLine,null,input);
    ((JavacTask)task).setTaskListener(new TaskListener(){
      public void started(      TaskEvent taskEvent){
        JavaFileObject sourceFile=taskEvent.getSourceFile();
        CompilationEvent event;
switch (taskEvent.getKind()) {
case ANALYZE:
          event=CompilationEvent.progress("Analyzing ",sourceFile);
        break;
case PARSE:
      event=CompilationEvent.progress("Parsing ",sourceFile);
    break;
default :
  event=null;
}
if (event != null) {
myCompilationResults.offer(event);
}
}
public void finished(TaskEvent taskEvent){
CompilationEvent event;
switch (taskEvent.getKind()) {
case ENTER:
event=CompilationEvent.fileProcessed();
break;
default :
event=null;
}
if (event != null) {
myCompilationResults.offer(event);
}
}
}
);
task.call();
}
  finally {
myCompilationResults.offer(GUARD);
}
}
