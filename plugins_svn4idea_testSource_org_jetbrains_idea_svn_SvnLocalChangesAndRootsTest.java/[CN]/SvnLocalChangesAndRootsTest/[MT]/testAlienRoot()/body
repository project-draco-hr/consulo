{
  final AlienTree alienTree=new AlienTree(myAlienRoot.getAbsolutePath());
  final SvnVcs vcs=SvnVcs.getInstance(myProject);
  ((SvnFileUrlMappingImpl)vcs.getSvnFileUrlMapping()).realRefresh();
  Assert.assertEquals(2,vcs.getSvnFileUrlMapping().getAllWcInfos().size());
  enableSilentOperation(VcsConfiguration.StandardConfirmation.ADD);
  enableSilentOperation(VcsConfiguration.StandardConfirmation.REMOVE);
  final VirtualFile tmpVf=LocalFileSystem.getInstance().findFileByIoFile(new File(myTempDirFixture.getTempDirPath()));
  Assert.assertNotNull(tmpVf);
  tmpVf.refresh(false,true);
  final VirtualFile vf=LocalFileSystem.getInstance().findFileByIoFile(alienTree.myFile);
  editFileInCommand(myProject,vf,"78");
  VcsDirtyScopeManager.getInstance(myProject).markEverythingDirty();
  myClManager.ensureUpToDate(false);
  DuringChangeListManagerUpdateTestScheme.checkFilesAreInList(new VirtualFile[]{vf},myClManager.getDefaultListName(),myClManager);
  final VirtualFile vfUnv=LocalFileSystem.getInstance().findFileByIoFile(alienTree.myUnversioned);
  myClManager.isUnversioned(vfUnv);
  final VirtualFile vfIgn=LocalFileSystem.getInstance().findFileByIoFile(alienTree.myIgnored);
  myClManager.isUnversioned(vfIgn);
}
