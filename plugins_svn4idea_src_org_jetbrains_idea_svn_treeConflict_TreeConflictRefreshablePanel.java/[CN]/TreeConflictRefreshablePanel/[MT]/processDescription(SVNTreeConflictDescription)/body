{
  if (description == null)   return null;
  if (myChange.getBeforeRevision() != null) {
    myCommittedRevision=(SvnRevisionNumber)SvnHistorySession.getCurrentCommittedRevision(myVcs,myPath.getIOFile());
  }
  boolean differentURLs=isDifferentURLs(description);
  ConflictSidePresentation leftSide=null;
  ConflictSidePresentation rightSide=null;
  try {
    if (differentURLs) {
      leftSide=createSide(description.getSourceLeftVersion(),null,true);
      rightSide=createSide(description.getSourceRightVersion(),null,false);
      leftSide.load();
      rightSide.load();
    }
 else {
      leftSide=EmptyConflictSide.getInstance();
      final SVNRevision pegFromLeft;
      if (description.getSourceLeftVersion() == null) {
        pegFromLeft=null;
      }
 else {
        long committed=description.getSourceLeftVersion().getPegRevision();
        if (myCommittedRevision != null && myCommittedRevision.getRevision().getNumber() < committed) {
          committed=myCommittedRevision.getRevision().getNumber();
        }
        pegFromLeft=SVNRevision.create(committed);
      }
      rightSide=createSide(description.getSourceRightVersion(),pegFromLeft,false);
      rightSide.load();
      return new BeforeAfter<ConflictSidePresentation>(leftSide,rightSide);
    }
  }
 catch (  SVNException e) {
    throw new VcsException(e);
  }
 finally {
    if (leftSide != null) {
      myChildDisposables.add(leftSide);
    }
    if (rightSide != null) {
      myChildDisposables.add(rightSide);
    }
  }
  return new BeforeAfter<ConflictSidePresentation>(leftSide,rightSide);
}
