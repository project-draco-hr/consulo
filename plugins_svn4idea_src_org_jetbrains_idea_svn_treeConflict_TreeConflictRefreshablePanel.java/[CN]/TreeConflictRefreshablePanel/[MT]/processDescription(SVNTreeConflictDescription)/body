{
  if (description == null)   return null;
  if (myChange.getBeforeRevision() != null) {
    myCommittedRevision=SvnHistorySession.getCurrentCommittedRevision(myVcs,myPath.getIOFile());
  }
  final SVNRevision pegFromLeft=description.getSourceLeftVersion() == null ? null : SVNRevision.create(description.getSourceLeftVersion().getPegRevision());
  ConflictSidePresentation rightSide=createSide(description.getSourceRightVersion(),pegFromLeft,false);
  final SidesProcessorMarker marker;
  ConflictSidePresentation leftSide;
  if (description.getSourceLeftVersion() != null && description.getSourceRightVersion() != null && !Comparing.equal(description.getSourceLeftVersion().getPath(),description.getSourceRightVersion().getPath())) {
    leftSide=createSide(description.getSourceLeftVersion(),pegFromLeft,true);
    marker=new TwoSidesProcessor((AbstractConflictSide)leftSide,(AbstractConflictSide)rightSide,UniversalComparator.getInstance());
  }
 else {
    leftSide=EmptyConflictSide.getInstance();
    if (rightSide instanceof AbstractConflictSide) {
      marker=new OneSideProcessor(description.getSourceLeftVersion() == null ? SVNRevision.create(1) : SVNRevision.create(description.getSourceLeftVersion().getPegRevision()),(AbstractConflictSide)rightSide);
    }
 else {
      marker=SidesProcessorMarker.EMPTY;
    }
  }
  marker.run();
  myChildDisposables.add(leftSide);
  myChildDisposables.add(rightSide);
  return new BeforeAfter<ConflictSidePresentation>(leftSide,rightSide);
}
