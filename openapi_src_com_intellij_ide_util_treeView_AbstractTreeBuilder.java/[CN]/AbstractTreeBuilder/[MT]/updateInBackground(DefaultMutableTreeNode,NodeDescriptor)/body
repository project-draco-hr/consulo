{
  String text=getLoadingNodeText();
  for (int i=0; i < node.getChildCount(); i++) {
    TreeNode child=node.getChildAt(i);
    if (isLoadingNode(child) && text.equals(((LoadingNode)child).getUserObject())) {
      return;
    }
  }
  LoadingNode loadingNode=new LoadingNode(text);
  myTreeModel.insertNodeInto(loadingNode,node,node.getChildCount());
  Runnable updateRunnable=new Runnable(){
    public void run(){
      descriptor.update();
      Object element=descriptor.getElement();
      if (element == null)       return;
      myTreeStructure.getChildElements(getTreeStructureElement(descriptor));
    }
  }
;
  Runnable postRunnable=new Runnable(){
    public void run(){
      descriptor.update();
      Object element=descriptor.getElement();
      if (element != null) {
        myUnbuiltNodes.remove(node);
        myUpdater.addSubtreeToUpdateByElement(element);
        myUpdater.performUpdate();
        for (int i=0; i < node.getChildCount(); i++) {
          TreeNode child=node.getChildAt(i);
          if (isLoadingNode(child)) {
            if (TreeBuilderUtil.isNodeSelected(myTree,node)) {
              myTree.addSelectionPath(new TreePath(myTreeModel.getPathToRoot(node)));
            }
            myTreeModel.removeNodeFromParent((MutableTreeNode)child);
            break;
          }
        }
      }
    }
  }
;
  addTaskToWorker(updateRunnable,true,postRunnable);
}
