{
  Object value=expression.getValue();
  if (!(value instanceof String))   return;
  String key=(String)value;
  String[] resourceBundleName=new String[1];
  if (!I18nUtil.isValidPropertyReference(expression,key,resourceBundleName)) {
    final String description=CodeInsightBundle.message("inspection.unresolved.property.key.reference.message",key);
    final ProblemDescriptor problem=myManager.createProblemDescriptor(expression,description,new CreatePropertyQuickFix(key,resourceBundleName[0]),ProblemHighlightType.LIKE_UNKNOWN_SYMBOL);
    myProblems.add(problem);
  }
 else   if (expression.getParent() instanceof PsiNameValuePair) {
    PsiNameValuePair nvp=(PsiNameValuePair)expression.getParent();
    if (Comparing.equal(nvp.getName(),AnnotationUtil.PROPERTY_KEY_RESOURCE_BUNDLE_PARAMETER)) {
      PropertiesReferenceManager manager=expression.getProject().getComponent(PropertiesReferenceManager.class);
      Module module=ModuleUtil.findModuleForPsiElement(expression);
      if (module != null) {
        List<PropertiesFile> propFiles=manager.findPropertiesFiles(module,key);
        if (propFiles.isEmpty()) {
          final String description=CodeInsightBundle.message("inspection.invalid.resource.bundle.reference",key);
          final ProblemDescriptor problem=myManager.createProblemDescriptor(expression,description,(LocalQuickFix)null,ProblemHighlightType.LIKE_UNKNOWN_SYMBOL);
          myProblems.add(problem);
        }
      }
    }
  }
}
