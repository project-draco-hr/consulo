{
  if (problemDescriptors == null)   return;
  InspectionProfile inspectionProfile=InspectionProjectProfileManager.getInstance(myProject).getProfile((PsiElement)myFile);
  boolean isError=inspectionProfile.getErrorLevel(HighlightDisplayKey.find(tool.getShortName())) == HighlightDisplayLevel.ERROR;
  for (  ProblemDescriptor problemDescriptor : problemDescriptors) {
    ProgressManager.getInstance().checkCanceled();
    if (!InspectionManagerEx.inspectionResultSuppressed(problemDescriptor.getPsiElement(),tool.getID())) {
      myDescriptors.add(problemDescriptor);
      ProblemHighlightType highlightType=problemDescriptor.getHighlightType();
      HighlightInfoType type=null;
      if (highlightType == ProblemHighlightType.GENERIC_ERROR_OR_WARNING) {
        type=isError ? HighlightInfoType.ERROR : HighlightInfoType.WARNING;
      }
 else       if (highlightType == ProblemHighlightType.LIKE_DEPRECATED) {
        type=HighlightInfoType.DEPRECATED;
      }
 else       if (highlightType == ProblemHighlightType.LIKE_UNKNOWN_SYMBOL) {
        if (tool.getShortName() == JavaDocReferenceInspection.SHORT_NAME) {
          type=HighlightInfoType.JAVADOC_WRONG_REF;
        }
 else {
          type=HighlightInfoType.WRONG_REF;
        }
      }
 else       if (highlightType == ProblemHighlightType.LIKE_UNUSED_SYMBOL) {
        type=HighlightInfoType.UNUSED_SYMBOL;
      }
      myLevels.add(type);
      myTools.add(tool);
    }
  }
}
