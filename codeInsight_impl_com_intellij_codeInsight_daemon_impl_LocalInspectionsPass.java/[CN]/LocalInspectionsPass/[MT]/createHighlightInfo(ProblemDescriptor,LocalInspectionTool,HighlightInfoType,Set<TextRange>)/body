{
  PsiElement psiElement=descriptor.getPsiElement();
  if (psiElement == null)   return null;
  @NonNls String message=renderDescriptionMessage(descriptor);
  final HighlightDisplayKey key=HighlightDisplayKey.find(tool.getShortName());
  final InspectionProfile inspectionProfile=InspectionProjectProfileManager.getInstance(myProject).getInspectionProfile(myFile);
  if (!inspectionProfile.isToolEnabled(key))   return null;
  HighlightInfoType type=new HighlightInfoType.HighlightInfoTypeImpl(inspectionProfile.getErrorLevel(key).getSeverity(),level.getAttributesKey());
  final String plainMessage=message.startsWith("<html>") ? XmlUtil.unescape(message.replaceAll("<[^>]*>","")) : message;
  @NonNls final String link="<a href=\"" + tool.getShortName() + "\"> "+ DaemonBundle.message("inspection.extended.description")+ "</a>";
  @NonNls String tooltip;
  if (message.startsWith("<html>")) {
    tooltip=message.replace("</body>",link + "</body>");
  }
 else {
    tooltip="<html><body>" + XmlStringUtil.escapeString(message) + link+ "</body></html>";
  }
  HighlightInfo highlightInfo=highlightInfoFromDescriptor(descriptor,type,plainMessage,tooltip);
  registerQuickFixes(tool,psiElement,descriptor,highlightInfo,emptyActionRegistered);
  return highlightInfo;
}
