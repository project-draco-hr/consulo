{
  PsiElement psiElement=descriptor.getPsiElement();
  if (psiElement == null)   return null;
  @NonNls String message=renderDescriptionMessage(descriptor);
  final HighlightDisplayKey key=HighlightDisplayKey.find(tool.getShortName());
  final InspectionProfile inspectionProfile=InspectionProjectProfileManager.getInstance(myProject).getInspectionProfile(myFile);
  if (!inspectionProfile.isToolEnabled(key))   return null;
  HighlightInfoType type=new HighlightInfoType(){
    public HighlightSeverity getSeverity(    final PsiElement psiElement){
      return inspectionProfile.getErrorLevel(key).getSeverity();
    }
    public TextAttributesKey getAttributesKey(){
      return level.getAttributesKey();
    }
  }
;
  String plainMessage=XmlUtil.unescape(message.replaceAll("<[^>]*>",""));
  @NonNls String tooltip=message.startsWith("<html>") ? message : "<html><body>" + XmlUtil.escapeString(message) + "</body></html>";
  HighlightInfo highlightInfo=highlightInfoFromDescriptor(descriptor,type,plainMessage,tooltip);
  List<IntentionAction> options=getStandardIntentionOptions(tool,psiElement);
  final QuickFix[] fixes=descriptor.getFixes();
  if (fixes != null && fixes.length > 0) {
    for (int k=0; k < fixes.length; k++) {
      QuickFixAction.registerQuickFixAction(highlightInfo,new QuickFixWrapper(descriptor,k),options,tool.getDisplayName());
    }
  }
 else {
    QuickFixAction.registerQuickFixAction(highlightInfo,new EmptyIntentionAction(tool.getDisplayName(),options),options,tool.getDisplayName());
  }
  return highlightInfo;
}
