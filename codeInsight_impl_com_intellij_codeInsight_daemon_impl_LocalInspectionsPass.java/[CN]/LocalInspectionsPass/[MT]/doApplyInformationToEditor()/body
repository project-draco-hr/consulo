{
  List<HighlightInfo> infos=new ArrayList<HighlightInfo>(myDescriptors.size());
  for (int i=0; i < myDescriptors.size(); i++) {
    ProblemDescriptor descriptor=myDescriptors.get(i);
    LocalInspectionTool tool=myTools.get(i);
    PsiElement psiElement=descriptor.getPsiElement();
    if (psiElement == null)     continue;
    String message=renderDescriptionMessage(descriptor);
    final HighlightInfoType level=myLevels.get(i);
    HighlightDisplayKey key=HighlightDisplayKey.find(tool.getShortName());
    InspectionProfile inspectionProfile=InspectionProjectProfileManager.getInstance(myProject).getInspectionProfile((PsiElement)myFile);
    if (!inspectionProfile.isToolEnabled(key))     continue;
    final boolean isError=inspectionProfile.getErrorLevel(key) == HighlightDisplayLevel.ERROR;
    HighlightInfoType type=new HighlightInfoType(){
      public HighlightSeverity getSeverity(      final PsiElement psiElement){
        return isError ? HighlightSeverity.ERROR : HighlightSeverity.WARNING;
      }
      public TextAttributesKey getAttributesKey(){
        return level.getAttributesKey();
      }
    }
;
    String plainMessage=XmlUtil.unescape(message.replaceAll("<[^>]*>",""));
    @NonNls String tooltip="<html><body>" + XmlUtil.escapeString(message) + "</body></html>";
    HighlightInfo highlightInfo=highlightInfoFromDescriptor(descriptor,type,plainMessage,tooltip);
    infos.add(highlightInfo);
    List<IntentionAction> options=getStandardIntentionOptions(tool,psiElement);
    final QuickFix[] fixes=descriptor.getFixes();
    if (fixes != null && fixes.length > 0) {
      for (int k=0; k < fixes.length; k++) {
        QuickFixAction.registerQuickFixAction(highlightInfo,new QuickFixWrapper(descriptor,k),options,tool.getDisplayName());
      }
    }
 else {
      QuickFixAction.registerQuickFixAction(highlightInfo,new EmptyIntentionAction(tool.getDisplayName(),options),options,tool.getDisplayName());
    }
  }
  UpdateHighlightersUtil.setHighlightersToEditor(myProject,myDocument,myStartOffset,myEndOffset,infos,UpdateHighlightersUtil.INSPECTION_HIGHLIGHTERS_GROUP);
  myDescriptors=Collections.emptyList();
  myLevels=Collections.emptyList();
  myTools=Collections.emptyList();
  DaemonCodeAnalyzerImpl daemonCodeAnalyzer=(DaemonCodeAnalyzerImpl)DaemonCodeAnalyzer.getInstance(myProject);
  daemonCodeAnalyzer.getFileStatusMap().markFileUpToDate(myDocument,FileStatusMap.LOCAL_INSPECTIONS);
  ErrorStripeRenderer renderer=new RefreshStatusRenderer(myProject,daemonCodeAnalyzer,myDocument,myFile);
  Editor[] editors=EditorFactory.getInstance().getEditors(myDocument,myProject);
  for (  Editor editor : editors) {
    ((EditorMarkupModel)editor.getMarkupModel()).setErrorStripeRenderer(renderer);
  }
}
