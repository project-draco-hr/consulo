{
  final TextRange targetRange=new TextRange(startOffset,endOffset);
  final Set<PsiElement> workSet=new THashSet<PsiElement>();
  final FileViewProvider viewProvider=file.getViewProvider();
  for (  Language language : viewProvider.getPrimaryLanguages()) {
    final PsiFile psiRoot=viewProvider.getPsi(language);
    psiRoot.accept(new PsiRecursiveElementVisitor(){
      public void visitMethod(      PsiMethod method){
        processTarget(method);
      }
      public void visitClass(      PsiClass aClass){
        processTarget(aClass);
      }
      public void visitField(      PsiField field){
        processTarget(field);
      }
      private void processTarget(      PsiMember member){
        final TextRange range=member.getTextRange();
        if (targetRange.intersects(range)) {
          workSet.add(member);
          member.acceptChildren(this);
        }
      }
    }
);
    workSet.add(psiRoot);
  }
  return workSet;
}
