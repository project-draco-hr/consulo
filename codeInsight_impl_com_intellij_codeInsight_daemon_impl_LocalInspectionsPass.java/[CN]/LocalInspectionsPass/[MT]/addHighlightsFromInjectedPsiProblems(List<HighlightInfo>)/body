{
  Set<TextRange> emptyActionRegistered=new THashSet<TextRange>();
  InspectionProfile inspectionProfile=InspectionProjectProfileManager.getInstance(myProject).getInspectionProfile(myFile);
  PsiDocumentManager documentManager=PsiDocumentManager.getInstance(myProject);
  for (int i=0; i < myInjectedPsiInspectionResults.size(); i++) {
    InjectedPsiInspectionUtil.InjectedPsiInspectionResult result=myInjectedPsiInspectionResults.get(i);
    LocalInspectionTool tool=result.tool;
    HighlightSeverity severity=inspectionProfile.getErrorLevel(HighlightDisplayKey.find(tool.getShortName())).getSeverity();
    PsiElement injectedPsi=result.injectedPsi;
    DocumentWindow documentRange=(DocumentWindow)documentManager.getDocument((PsiFile)injectedPsi);
    if (documentRange == null)     continue;
    for (int j=0; j < result.foundProblems.size(); j++) {
      ProblemDescriptor descriptor=result.foundProblems.get(j);
      PsiElement psiElement=descriptor.getPsiElement();
      if (InspectionManagerEx.inspectionResultSuppressed(psiElement,tool))       continue;
      HighlightInfoType level=highlightTypeFromDescriptor(descriptor,severity);
      HighlightInfo info=createHighlightInfo(descriptor,tool,level,emptyActionRegistered);
      if (info == null)       continue;
      TextRange editable=documentRange.intersectWithEditable(new TextRange(info.startOffset,info.endOffset));
      if (editable == null)       continue;
      TextRange hostRange=documentRange.injectedToHost(editable);
      HighlightInfo patched=HighlightInfo.createHighlightInfo(info.type,psiElement,hostRange.getStartOffset(),hostRange.getEndOffset(),info.description,info.toolTip);
      if (patched != null) {
        registerQuickFixes(tool,descriptor,patched,emptyActionRegistered);
        infos.add(patched);
      }
    }
  }
}
