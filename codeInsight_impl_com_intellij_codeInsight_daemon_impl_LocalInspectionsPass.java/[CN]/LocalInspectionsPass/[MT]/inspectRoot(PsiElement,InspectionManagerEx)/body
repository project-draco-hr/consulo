{
  final TextRange targetRange=new TextRange(myStartOffset,myEndOffset);
  final Set<PsiElement> workSet=new THashSet<PsiElement>();
  psiRoot.accept(new PsiRecursiveElementVisitor(){
    public void visitMethod(    PsiMethod method){
      processTarget(method);
    }
    public void visitClass(    PsiClass aClass){
      processTarget(aClass);
    }
    public void visitField(    PsiField field){
      processTarget(field);
    }
    private void processTarget(    PsiMember member){
      final TextRange range=member.getTextRange();
      if (targetRange.intersects(range)) {
        workSet.add(member);
        member.acceptChildren(this);
      }
    }
  }
);
  workSet.add(psiRoot);
  final InspectionProfileWrapper profile=InspectionProjectProfileManager.getInstance(myProject).getProfileWrapper(myFile);
  final LocalInspectionTool[] tools=profile.getHighlightingLocalInspectionTools();
  final ProblemsHolder holder=new ProblemsHolder(iManager);
  final List<Pair<LocalInspectionTool,PsiElementVisitor>> visitors=new ArrayList<Pair<LocalInspectionTool,PsiElementVisitor>>();
  for (  LocalInspectionTool tool : tools) {
    final PsiElementVisitor visitor=tool.buildVisitor(holder,true);
    if (visitor != null)     visitors.add(new Pair<LocalInspectionTool,PsiElementVisitor>(tool,visitor));
  }
  for (  PsiElement element : workSet) {
    ProgressManager.getInstance().checkCanceled();
    LocalInspectionTool currentTool=null;
    try {
      if (element instanceof PsiMethod) {
        PsiMethod psiMethod=(PsiMethod)element;
        for (        LocalInspectionTool tool : tools) {
          currentTool=tool;
          if (GlobalInspectionContextImpl.isToCheckMember(psiMethod,currentTool.getID())) {
            appendDescriptors(currentTool.checkMethod(psiMethod,iManager,true),currentTool);
          }
        }
      }
 else       if (element instanceof PsiClass && !(element instanceof PsiTypeParameter)) {
        PsiClass psiClass=(PsiClass)element;
        for (        LocalInspectionTool tool : tools) {
          currentTool=tool;
          if (GlobalInspectionContextImpl.isToCheckMember(psiClass,currentTool.getID())) {
            appendDescriptors(currentTool.checkClass(psiClass,iManager,true),currentTool);
          }
        }
      }
 else       if (element instanceof PsiField) {
        PsiField psiField=(PsiField)element;
        for (        LocalInspectionTool tool : tools) {
          currentTool=tool;
          if (GlobalInspectionContextImpl.isToCheckMember(psiField,currentTool.getID())) {
            appendDescriptors(currentTool.checkField(psiField,iManager,true),currentTool);
          }
        }
      }
 else       if (element instanceof PsiFile) {
        PsiFile psiFile=(PsiFile)element;
        for (        LocalInspectionTool tool : tools) {
          currentTool=tool;
          appendDescriptors(currentTool.checkFile(psiFile,iManager,true),currentTool);
        }
      }
    }
 catch (    ProcessCanceledException e) {
      throw e;
    }
catch (    Exception e) {
      if (currentTool != null) {
        LOG.error("Exception happened in local inspection tool: " + currentTool.getDisplayName(),e);
      }
 else {
        LOG.error(e);
      }
    }
  }
  final List<PsiElement> elements=CodeInsightUtil.getElementsIntersectingRange(psiRoot,myStartOffset,myEndOffset);
  if (!visitors.isEmpty()) {
    for (int i=0; i < elements.size(); i++) {
      PsiElement element=elements.get(i);
      for (int j=0; j < visitors.size(); j++) {
        Pair<LocalInspectionTool,PsiElementVisitor> visitor=visitors.get(j);
        element.accept(visitor.getSecond());
        appendDescriptors(holder.getResults(),visitor.getFirst());
      }
    }
  }
  inspectInjectedPsi(elements);
}
