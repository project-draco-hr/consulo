{
  PsiFile[] psiFiles=myAggregatorProject != null ? new PsiFile[]{getPsiFile(project,myAggregatorProject.getFile())} : PsiFile.EMPTY_ARRAY;
  final VirtualFile pom=new WriteCommandAction<VirtualFile>(project,myCommandName,psiFiles){
    @Override protected void run(    Result<VirtualFile> result) throws Throwable {
      VirtualFile file;
      try {
        file=root.createChildData(this,MavenConstants.POM_XML);
        MavenUtil.runOrApplyMavenProjectFileTemplate(project,file,myProjectId,isInteractive);
        result.setResult(file);
      }
 catch (      IOException e) {
        showError(project,e);
        return;
      }
      updateProjectPom(project,file);
      if (myAggregatorProject != null) {
        MavenDomProjectModel model=MavenDomUtil.getMavenDomProjectModel(project,myAggregatorProject.getFile());
        model.getPackaging().setStringValue("pom");
        MavenDomModule module=model.getModules().addModule();
        module.setValue(getPsiFile(project,file));
      }
    }
  }
.execute().getResultObject();
  if (pom == null)   return;
  if (myAggregatorProject == null) {
    MavenProjectsManager manager=MavenProjectsManager.getInstance(project);
    manager.addManagedFiles(Collections.singletonList(pom));
  }
  if (myArchetype == null) {
    try {
      VfsUtil.createDirectories(root.getPath() + "/src/main/java");
      VfsUtil.createDirectories(root.getPath() + "/src/test/java");
    }
 catch (    IOException e) {
      MavenLog.LOG.info(e);
    }
  }
  MavenUtil.invokeLater(project,ModalityState.NON_MODAL,new Runnable(){
    public void run(){
      if (!pom.isValid())       return;
      EditorHelper.openInEditor(getPsiFile(project,pom));
      if (myArchetype != null)       generateFromArchetype(project,pom);
    }
  }
);
}
