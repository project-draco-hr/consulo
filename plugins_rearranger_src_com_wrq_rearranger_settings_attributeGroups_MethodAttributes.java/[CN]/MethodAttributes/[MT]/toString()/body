{
  final StringBuffer sb=new StringBuffer(80);
  sb.append(plAttr.getProtectionLevelString());
  sb.append(stAttr.getDescriptiveString());
  sb.append(fAttr.getDescriptiveString());
  sb.append(staticInitAttr.getDescriptiveString());
  sb.append(nativeAttr.getDescriptiveString());
  sb.append(syncAttr.getDescriptiveString());
  final int nTypes=(isConstructorMethodType() ? 1 : 0) + (isGetterSetterMethodType() ? 1 : 0) + (isCanonicalMethodType() ? 1 : 0)+ (isOtherMethodType() ? 1 : 0);
  int nTypesSeen=0;
  if (isConstructorMethodType()) {
    sb.append(isInvertMethodType() ? "non-constructor" : "constructor");
    nTypesSeen++;
    if (nTypesSeen < nTypes) {
      sb.append("/");
    }
  }
  if (isGetterSetterMethodType()) {
    sb.append(isInvertMethodType() ? "non-getter/setter" : "getter/setter");
    nTypesSeen++;
    if (nTypesSeen < nTypes) {
      sb.append("/");
    }
  }
  if (isCanonicalMethodType()) {
    sb.append(isInvertMethodType() ? "non-canonical" : "canonical");
    nTypesSeen++;
    if (nTypesSeen < nTypes) {
      sb.append("/");
    }
  }
  if (isOtherMethodType()) {
    sb.append(isInvertMethodType() ? "non-other-type" : "other");
    nTypesSeen++;
    if (nTypesSeen < nTypes) {
      sb.append("/");
    }
  }
  if (nTypes > 0) {
    sb.append(' ');
  }
  sb.append(abstractAttr.getDescriptiveString());
  sb.append(overriddenAttr.getDescriptiveString());
  sb.append(overridingAttr.getDescriptiveString());
  sb.append(implementedAttr.getDescriptiveString());
  sb.append(implementingAttr.getDescriptiveString());
  if (sb.length() == 0) {
    sb.append("all methods");
  }
 else {
    sb.append("methods");
  }
  predicateAdded=false;
  nextPredicate=null;
  if (minParamsAttr.isMatch() || maxParamsAttr.isMatch()) {
    if (!maxParamsAttr.isMatch()) {
      nextPredicate=minParamsAttr.getDescriptiveString();
    }
 else     if (!minParamsAttr.isMatch()) {
      nextPredicate=maxParamsAttr.getDescriptiveString();
    }
 else {
      if (minParamsAttr.getValue() == maxParamsAttr.getValue()) {
        nextPredicate="with " + minParamsAttr.getValue() + (minParamsAttr.getValue() == 1 ? " parameter" : " parameters");
      }
 else {
        nextPredicate="with " + minParamsAttr.getValue() + " to "+ maxParamsAttr.getValue()+ " parameters";
      }
    }
  }
  if (nameAttr.isMatch()) {
    checkPredicate(sb,false);
    nextPredicate=nameAttr.getDescriptiveString();
  }
  if (returnTypeAttr.isMatch()) {
    checkPredicate(sb,false);
    nextPredicate=returnTypeAttr.getDescriptiveString();
  }
  checkPredicate(sb,true);
  sb.append(sortAttr.getDescriptiveString());
  if (noExtractedMethods) {
    sb.append(" (no extracted methods)");
  }
  return sb.toString();
}
