{
  final boolean result=(entry.getEnd() instanceof PsiMethod || entry.getEnd() instanceof PsiClassInitializer) && super.isMatch(entry) && abstractAttr.isMatch(entry.getModifiers())&& overriddenAttr.isMatch(entry.getModifiers())&& overridingAttr.isMatch(entry.getModifiers())&& implementedAttr.isMatch(entry.getModifiers())&& implementingAttr.isMatch(entry.getModifiers())&& staticInitAttr.isMatch(entry.getModifiers())&& nativeAttr.isMatch(entry.getModifiers())&& syncAttr.isMatch(entry.getModifiers())&& returnTypeAttr.isMatch(entry.getType())&& minParamsAttr.isMatch(entry.getEnd())&& maxParamsAttr.isMatch(entry.getEnd());
  if (!result) {
    return false;
  }
  boolean typeResult=false;
  if (isConstructorMethodType()) {
    typeResult=(entry.getModifiers() & ModifierConstants.CONSTRUCTOR) == ModifierConstants.CONSTRUCTOR;
  }
  if (isGetterSetterMethodType() && entry.getEnd() instanceof PsiMethod) {
    boolean isGetter=MethodUtil.isGetter((PsiMethod)entry.getEnd(),getterSetterDefinition);
    boolean isSetter=MethodUtil.isSetter((PsiMethod)entry.getEnd(),getterSetterDefinition);
    typeResult|=isGetter | isSetter;
  }
  if (isCanonicalMethodType()) {
    typeResult|=(entry.getModifiers() & ModifierConstants.CANONICAL) == ModifierConstants.CANONICAL;
  }
  if (isOtherMethodType()) {
    typeResult|=(entry.getModifiers() & ModifierConstants.OTHER_METHOD) == ModifierConstants.OTHER_METHOD;
  }
  typeResult^=invertMethodType;
  if (!constructorMethodType && !getterSetterMethodType && !canonicalMethodType&& !otherMethodType) {
    typeResult=true;
  }
  return typeResult;
}
