{
  final MethodAttributes result=new MethodAttributes();
  CommonAttributes.readExternal(result,item);
  result.abstractAttr=AbstractAttribute.readExternal(item);
  result.syncAttr=SynchronizedAttribute.readExternal(item);
  result.overriddenAttr=OverriddenAttribute.readExternal(item);
  result.overridingAttr=OverridingAttribute.readExternal(item);
  result.staticInitAttr=InitializerAttribute.readExternal(item);
  result.nativeAttr=NativeAttribute.readExternal(item);
  result.returnTypeAttr=ReturnTypeAttribute.readExternal(item);
  result.implementedAttr=ImplementedAttribute.readExternal(item);
  result.implementingAttr=ImplementingAttribute.readExternal(item);
  result.minParamsAttr=MinParamsAttribute.readExternal(item);
  result.maxParamsAttr=MaxParamsAttribute.readExternal(item);
  final Element me=item.getChild("Misc");
  result.constructorMethodType=RearrangerSettings.getBooleanAttribute(me,"constructorMethod");
  result.getterSetterMethodType=RearrangerSettings.getBooleanAttribute(me,"getterSetter");
  result.canonicalMethodType=RearrangerSettings.getBooleanAttribute(me,"canonicalMethod");
  result.otherMethodType=RearrangerSettings.getBooleanAttribute(me,"otherMethod");
  result.invertMethodType=RearrangerSettings.getBooleanAttribute(me,"invertMethod");
  result.noExtractedMethods=RearrangerSettings.getBooleanAttribute(me,"noExtractedMethods");
  result.getterSetterDefinition=GetterSetterDefinition.readExternal(item);
  return result;
}
