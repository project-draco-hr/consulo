{
  myProject=project;
  myAutoScrollToSourceHandler=new AutoScrollToSourceHandler(){
    protected boolean isAutoScrollMode(){
      return HierarchyBrowserManager.getInstance(myProject).IS_AUTOSCROLL_TO_SOURCE;
    }
    protected void setAutoScrollMode(    final boolean state){
      HierarchyBrowserManager.getInstance(myProject).IS_AUTOSCROLL_TO_SOURCE=state;
    }
  }
;
  setHierarchyBase(psiClass);
  setLayout(new BorderLayout());
  add(createToolbar().getComponent(),BorderLayout.NORTH);
  myCardLayout=new CardLayout();
  myTreePanel=new JPanel(myCardLayout);
  myTrees.put(TypeHierarchyTreeStructure.TYPE,createTree());
  myTrees.put(SupertypesHierarchyTreeStructure.TYPE,createTree());
  myTrees.put(SubtypesHierarchyTreeStructure.TYPE,createTree());
  final Enumeration<Object> keys=myTrees.keys();
  while (keys.hasMoreElements()) {
    final Object key=keys.nextElement();
    final JTree tree=myTrees.get(key);
    myOccurenceNavigators.put(key,new OccurenceNavigatorSupport(tree){
      @Nullable protected Navigatable createDescriptorForNode(      DefaultMutableTreeNode node){
        final Object userObject=node.getUserObject();
        if (userObject instanceof String)         return null;
        TypeHierarchyNodeDescriptor nodeDescriptor=(TypeHierarchyNodeDescriptor)userObject;
        final PsiElement psiElement=nodeDescriptor.getPsiClass();
        if (psiElement == null || !psiElement.isValid())         return null;
        PsiElement navigationElement=psiElement.getNavigationElement();
        return new OpenFileDescriptor(psiElement.getProject(),navigationElement.getContainingFile().getVirtualFile(),navigationElement.getTextOffset());
      }
      public String getNextOccurenceActionName(){
        return IdeBundle.message("hierarchy.type.next.occurence.name");
      }
      public String getPreviousOccurenceActionName(){
        return IdeBundle.message("hierarchy.type.prev.occurence.name");
      }
    }
);
    myTreePanel.add(new JScrollPane(tree),key);
  }
  add(myTreePanel,BorderLayout.CENTER);
}
