{
  myCurrentViewName=typeName;
  final PsiElement element=mySmartPsiElementPointer.getElement();
  if (!(element instanceof PsiClass)) {
    return;
  }
  final PsiClass psiClass=(PsiClass)element;
  if (myContent != null) {
    myContent.setDisplayName(MessageFormat.format(typeName,ClassPresentationUtil.getNameForClass(psiClass,false)));
  }
  myCardLayout.show(myTreePanel,typeName);
  if (!myBuilders.containsKey(typeName)) {
    setWaitCursor();
    final JTree tree=myTrees.get(typeName);
    final DefaultTreeModel model=new DefaultTreeModel(new DefaultMutableTreeNode(""));
    tree.setModel(model);
    final HierarchyTreeStructure structure;
    PsiDocumentManager.getInstance(myProject).commitAllDocuments();
    if (SupertypesHierarchyTreeStructure.TYPE.equals(typeName)) {
      structure=new SupertypesHierarchyTreeStructure(myProject,psiClass);
    }
 else     if (SubtypesHierarchyTreeStructure.TYPE.equals(typeName)) {
      structure=new SubtypesHierarchyTreeStructure(myProject,psiClass);
    }
 else     if (TypeHierarchyTreeStructure.TYPE.equals(typeName)) {
      structure=new TypeHierarchyTreeStructure(myProject,psiClass);
    }
 else {
      LOG.error("unexpected type: " + typeName);
      return;
    }
    final Comparator<NodeDescriptor> comparator=HierarchyBrowserManager.getInstance(myProject).getComparator();
    final HierarchyTreeBuilder builder=new HierarchyTreeBuilder(myProject,tree,model,structure,comparator);
    myBuilders.put(typeName,builder);
    final HierarchyNodeDescriptor baseDescriptor=structure.getBaseDescriptor();
    builder.buildNodeForElement(baseDescriptor);
    final DefaultMutableTreeNode node=builder.getNodeForElement(baseDescriptor);
    if (node != null) {
      final TreePath path=new TreePath(node.getPath());
      tree.expandPath(path);
      TreeUtil.selectPath(tree,path);
    }
    restoreCursor();
  }
  getCurrentTree().requestFocus();
}
