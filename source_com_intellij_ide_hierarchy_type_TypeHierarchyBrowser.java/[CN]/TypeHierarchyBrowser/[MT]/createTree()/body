{
  final DnDAwareTree tree=new DnDAwareTree(new DefaultTreeModel(new DefaultMutableTreeNode("")));
  if (!ApplicationManager.getApplication().isHeadlessEnvironment()) {
    tree.enableDnd(this);
    DnDManager.getInstance().registerSource(new DnDSource(){
      public boolean canStartDragging(      final DnDAction action,      final Point dragOrigin){
        return getSelectedElements().length > 0;
      }
      public DnDDragStartBean startDragging(      final DnDAction action,      final Point dragOrigin){
        return new DnDDragStartBean(new AbstractProjectViewPane.TransferableWrapper(){
          public TreeNode[] getTreeNodes(){
            return tree.getSelectedNodes(TreeNode.class,null);
          }
          public PsiElement[] getPsiElements(){
            return getSelectedElements();
          }
        }
);
      }
      public Pair<Image,Point> createDraggedImage(      final DnDAction action,      final Point dragOrigin){
        return null;
      }
      public void dragDropEnd(){
      }
      public void dropActionChanged(      final int gestureModifiers){
      }
    }
,tree);
  }
  tree.getSelectionModel().setSelectionMode(TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION);
  tree.setToggleClickCount(-1);
  tree.setCellRenderer(new HierarchyNodeRenderer());
  UIUtil.setLineStyleAngled(tree);
  EditSourceOnDoubleClickHandler.install(tree);
  ActionGroup group=(ActionGroup)ActionManager.getInstance().getAction(IdeActions.GROUP_TYPE_HIERARCHY_POPUP);
  PopupHandler.installPopupHandler(tree,group,ActionPlaces.TYPE_HIERARCHY_VIEW_POPUP,ActionManager.getInstance());
  myRefreshAction.registerShortcutOn(tree);
  myRunOnDisposeList.add(new Runnable(){
    public void run(){
      myRefreshAction.unregisterCustomShortcutSet(tree);
    }
  }
);
  final BaseOnThisTypeAction baseOnThisTypeAction=new BaseOnThisTypeAction();
  baseOnThisTypeAction.registerCustomShortcutSet(ActionManager.getInstance().getAction(IdeActions.ACTION_TYPE_HIERARCHY).getShortcutSet(),tree);
  new TreeSpeedSearch(tree);
  TreeUtil.installActions(tree);
  TreeToolTipHandler.install(tree);
  myAutoScrollToSourceHandler.install(tree);
  return tree;
}
