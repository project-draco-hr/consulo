{
  final PsiElementPattern.Capture<PsiElement> everywhere=PlatformPatterns.psiElement();
  extend(CompletionType.BASIC,everywhere,new CompletionProvider<CompletionParameters>(){
    public void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext matchingContext,    @NotNull final CompletionResultSet _result){
      final PsiFile file=parameters.getOriginalFile();
      final int startOffset=parameters.getOffset();
      final PsiElement insertedElement=parameters.getPosition();
      CompletionData completionData=ApplicationManager.getApplication().runReadAction(new Computable<CompletionData>(){
        public CompletionData compute(){
          return CompletionUtil.getCompletionDataByElement(insertedElement,file);
        }
      }
);
      if (completionData == null)       return;
      final CompletionResultSet result=_result.withPrefixMatcher(completionData.findPrefix(insertedElement,startOffset));
      completeReference(parameters,result,completionData);
      final Set<LookupElement> lookupSet=new LinkedHashSet<LookupElement>();
      final Set<CompletionVariant> keywordVariants=new HashSet<CompletionVariant>();
      completionData.addKeywordVariants(keywordVariants,insertedElement,parameters.getOriginalFile());
      completionData.completeKeywordsBySet(lookupSet,keywordVariants,insertedElement,result.getPrefixMatcher(),file);
      for (      final LookupElement item : lookupSet) {
        result.addElement(item);
      }
    }
  }
);
}
