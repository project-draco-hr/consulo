{
  super.visitReferenceExpression(expression);
  final PsiModifierListOwner parent=PsiTreeUtil.getParentOfType(expression,PsiField.class,PsiMethod.class,PsiClassInitializer.class);
  if (parent == null) {
    return;
  }
  if (parent.hasModifierProperty(PsiModifier.STATIC)) {
    return;
  }
  if (parent instanceof PsiMethod || parent instanceof PsiClassInitializer) {
    if (parent.hasModifierProperty(PsiModifier.SYNCHRONIZED)) {
      return;
    }
    final PsiSynchronizedStatement synchronizedStatement=PsiTreeUtil.getParentOfType(expression,PsiSynchronizedStatement.class);
    if (synchronizedStatement != null) {
      return;
    }
  }
  final PsiExpression qualifier=expression.getQualifierExpression();
  if (qualifier != null) {
    return;
  }
  final PsiType type=expression.getType();
  if (type == null) {
    return;
  }
  String typeString=null;
  for (  String nonThreadSafeType : nonThreadSafeTypeList) {
    if (type.equalsToText(nonThreadSafeType)) {
      typeString=nonThreadSafeType;
      break;
    }
  }
  final PsiElement target=expression.resolve();
  if (!(target instanceof PsiField)) {
    return;
  }
  final PsiField field=(PsiField)target;
  if (!field.hasModifierProperty(PsiModifier.STATIC)) {
    return;
  }
  registerError(expression,parent,typeString);
}
