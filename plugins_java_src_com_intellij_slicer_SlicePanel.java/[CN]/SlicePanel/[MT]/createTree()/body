{
  DefaultMutableTreeNode root=new DefaultMutableTreeNode();
  final Tree tree=new Tree(new DefaultTreeModel(root)){
    @Override protected void paintComponent(    Graphics g){
      DuplicateNodeRenderer.paintDuplicateNodesBackground(g,this);
      super.paintComponent(g);
    }
  }
;
  tree.setOpaque(false);
  tree.setToggleClickCount(-1);
  SliceUsageCellRenderer renderer=new SliceUsageCellRenderer();
  renderer.setOpaque(false);
  tree.setCellRenderer(renderer);
  UIUtil.setLineStyleAngled(tree);
  tree.setRootVisible(false);
  tree.setShowsRootHandles(true);
  tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  tree.setSelectionPath(new TreePath(root.getPath()));
  EditSourceOnDoubleClickHandler.install(tree);
  new TreeSpeedSearch(tree);
  TreeUtil.installActions(tree);
  ToolTipManager.sharedInstance().registerComponent(tree);
  myAutoScrollToSourceHandler.install(tree);
  tree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener(){
    @Override public void valueChanged(    final TreeSelectionEvent e){
      treeSelectionChanged();
    }
  }
);
  tree.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (KeyEvent.VK_ENTER == e.getKeyCode()) {
        List<Navigatable> navigatables=getNavigatables();
        if (navigatables.isEmpty())         return;
        for (        Navigatable navigatable : navigatables) {
          if (navigatable instanceof AbstractTreeNode && ((AbstractTreeNode)navigatable).getValue() instanceof Usage) {
            navigatable=(Usage)((AbstractTreeNode)navigatable).getValue();
          }
          if (navigatable.canNavigateToSource()) {
            navigatable.navigate(false);
            if (navigatable instanceof Usage) {
              ((Usage)navigatable).highlightInEditor();
            }
          }
        }
        e.consume();
      }
    }
  }
);
  tree.addTreeWillExpandListener(new TreeWillExpandListener(){
    @Override public void treeWillCollapse(    TreeExpansionEvent event){
    }
    @Override public void treeWillExpand(    TreeExpansionEvent event){
      TreePath path=event.getPath();
      SliceNode node=fromPath(path);
      node.calculateDupNode();
    }
  }
);
  return tree;
}
