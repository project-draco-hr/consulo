{
  PsiExpression operand=expression.getOperand();
  final PsiJavaToken sign=expression.getOperationSign();
  final IElementType tokenType=sign.getTokenType();
  if (isBackpointerReference(operand) && (tokenType.equals(JavaTokenType.PLUSPLUS) || tokenType.equals(JavaTokenType.MINUSMINUS))) {
    while (operand instanceof PsiParenthesizedExpression) {
      operand=((PsiParenthesizedExpression)operand).getExpression();
    }
    final PsiReferenceExpression reference=(PsiReferenceExpression)operand;
    final String operator;
    if (tokenType.equals(JavaTokenType.PLUSPLUS)) {
      operator="+";
    }
 else {
      operator="-";
    }
    final PsiField field=(PsiField)reference.resolve();
    if (!field.hasModifierProperty(PsiModifier.STATIC)) {
      out.append(backPointerName + '.' + createSetterNameForField(field)+ '('+ backPointerName+ '.'+ createGetterNameForField(field)+ "()"+ operator+ "1)");
    }
 else     if (!field.hasModifierProperty(PsiModifier.PUBLIC)) {
      out.append(originalClassName + '.' + createSetterNameForField(field)+ '('+ originalClassName+ '.'+ createGetterNameForField(field)+ "()"+ operator+ "1)");
    }
 else {
      visitElement(expression);
    }
  }
 else {
    visitElement(expression);
  }
}
