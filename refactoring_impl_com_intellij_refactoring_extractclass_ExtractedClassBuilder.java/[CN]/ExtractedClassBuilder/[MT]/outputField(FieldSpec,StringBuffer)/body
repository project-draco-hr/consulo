{
  final PsiVariable variable=field.getField();
  final PsiDocComment docComment=getJavadocForVariable(variable);
  if (docComment != null) {
    out.append(docComment.getText());
    out.append('\n');
  }
  final PsiType type=variable.getType();
  final String typeText=type.getCanonicalText();
  final String name=calculateStrippedName(variable);
  @NonNls String modifierString;
  if (variable.hasModifierProperty(PsiModifier.PUBLIC) && variable.hasModifierProperty(PsiModifier.STATIC)) {
    modifierString="public ";
  }
 else {
    modifierString="private ";
  }
  final String fieldName;
  if (variable.hasModifierProperty(PsiModifier.STATIC)) {
    modifierString+="static ";
    fieldName=settings.STATIC_FIELD_NAME_PREFIX + name + settings.STATIC_FIELD_NAME_SUFFIX;
  }
 else {
    fieldName=settings.FIELD_NAME_PREFIX + name + settings.FIELD_NAME_SUFFIX;
  }
  if (!field.isSetterRequired() && variable.hasModifierProperty(PsiModifier.FINAL)) {
    modifierString+="final ";
  }
  if (variable.hasModifierProperty(PsiModifier.TRANSIENT)) {
    modifierString+="transient ";
  }
  final PsiModifierList modifierList=variable.getModifierList();
  final PsiAnnotation[] annotations=modifierList.getAnnotations();
  for (  PsiAnnotation annotation : annotations) {
    final String annotationText=annotation.getText();
    out.append(annotationText);
  }
  out.append('\t');
  out.append(modifierString);
  out.append(typeText);
  out.append(' ');
  out.append(fieldName);
  if (variable.hasInitializer()) {
    final PsiExpression initializer=variable.getInitializer();
    if (PsiUtil.isConstantExpression(initializer)) {
      out.append('=');
      out.append(initializer.getText());
    }
  }
  out.append(";\n");
}
