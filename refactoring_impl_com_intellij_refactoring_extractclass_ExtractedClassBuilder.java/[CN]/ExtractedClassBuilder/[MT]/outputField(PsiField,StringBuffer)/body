{
  final PsiDocComment docComment=getJavadocForVariable(field);
  if (docComment != null) {
    out.append(docComment.getText());
  }
  final PsiType type=field.getType();
  final String typeText=type.getCanonicalText();
  final String name=calculateStrippedName(field);
  @NonNls String modifierString;
  if (field.hasModifierProperty(PsiModifier.PUBLIC) && field.hasModifierProperty(PsiModifier.STATIC)) {
    modifierString="public ";
  }
 else {
    modifierString="private ";
  }
  final String fieldName=myJavaCodeStyleManager.propertyNameToVariableName(name,field.hasModifierProperty(PsiModifier.STATIC) ? VariableKind.STATIC_FIELD : VariableKind.FIELD);
  if (field.hasModifierProperty(PsiModifier.STATIC)) {
    modifierString+="static ";
  }
  if (field.hasModifierProperty(PsiModifier.FINAL)) {
    modifierString+="final ";
  }
  if (field.hasModifierProperty(PsiModifier.TRANSIENT)) {
    modifierString+="transient ";
  }
  final PsiModifierList modifierList=field.getModifierList();
  final PsiAnnotation[] annotations=modifierList.getAnnotations();
  for (  PsiAnnotation annotation : annotations) {
    final String annotationText=annotation.getText();
    out.append(annotationText);
  }
  out.append('\t');
  out.append(modifierString);
  out.append(typeText);
  out.append(' ');
  out.append(fieldName);
  if (field.hasInitializer()) {
    final PsiExpression initializer=field.getInitializer();
    if (PsiUtil.isConstantExpression(initializer)) {
      out.append('=');
      out.append(initializer.getText());
    }
  }
  out.append(";");
}
