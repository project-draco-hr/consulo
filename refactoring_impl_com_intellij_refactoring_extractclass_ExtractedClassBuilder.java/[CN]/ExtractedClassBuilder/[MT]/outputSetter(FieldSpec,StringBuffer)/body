{
  if (!field.isSetterRequired()) {
    return;
  }
  final PsiField variable=field.getField();
  final String name=calculateStrippedName(variable);
  final String setterName=PropertyUtil.suggestSetterName(variable.getProject(),variable);
  for (  PsiMethod method : methods) {
    if (method.getName().equals(setterName) && method.getParameterList().getParameters().length == 1) {
      return;
    }
  }
  final String parameterName=myJavaCodeStyleManager.propertyNameToVariableName(name,VariableKind.PARAMETER);
  final PsiType type=variable.getType();
  final String typeText=type.getCanonicalText();
  out.append("\tpublic ");
  if (variable.hasModifierProperty(PsiModifier.STATIC)) {
    out.append("static ");
  }
  out.append("void ");
  out.append(setterName);
  out.append('(');
  out.append(typeText);
  out.append(' ');
  out.append(parameterName);
  out.append(")\n");
  out.append("\t{\n");
  final String fieldName=myJavaCodeStyleManager.propertyNameToVariableName(name,variable.hasModifierProperty(PsiModifier.STATIC) ? VariableKind.STATIC_FIELD : VariableKind.FIELD);
  if (fieldName.equals(parameterName)) {
    out.append("\t\tthis." + fieldName + " = "+ parameterName+ ";\n");
  }
 else {
    out.append("\t\t" + fieldName + " = "+ parameterName+ ";\n");
  }
  out.append("\t}\n");
  out.append('\n');
}
