{
  out.append("\tpublic " + className + '(');
  boolean isFirst=true;
  if (requiresBackPointer) {
    final String parameterName=myJavaCodeStyleManager.propertyNameToVariableName(backPointerName,VariableKind.PARAMETER);
    out.append(originalClassName);
    if (!typeParams.isEmpty()) {
      out.append('<');
      boolean first=true;
      for (      PsiTypeParameter typeParam : typeParams) {
        if (!first) {
          out.append(',');
        }
        out.append(typeParam.getName());
        first=false;
      }
      out.append('>');
    }
    out.append(' ' + parameterName);
    isFirst=false;
  }
  for (  final PsiField field : fields) {
    if (field.hasModifierProperty(PsiModifier.STATIC)) {
      continue;
    }
    if (!field.hasInitializer()) {
      continue;
    }
    final PsiExpression initializer=field.getInitializer();
    if (PsiUtil.isConstantExpression(initializer)) {
      continue;
    }
    if (!isFirst) {
      out.append(", ");
    }
    isFirst=false;
    final PsiType type=field.getType();
    final String typeText=type.getCanonicalText();
    final String name=calculateStrippedName(field);
    final String parameterName=myJavaCodeStyleManager.propertyNameToVariableName(name,VariableKind.PARAMETER);
    out.append(typeText + ' ' + parameterName);
  }
  out.append(")");
  out.append("\t{");
  if (requiresBackPointer) {
    final String parameterName=myJavaCodeStyleManager.propertyNameToVariableName(backPointerName,VariableKind.PARAMETER);
    if (backPointerName.equals(parameterName)) {
      out.append("\t\tthis." + backPointerName + " = "+ parameterName+ ";");
    }
 else {
      out.append("\t\t" + backPointerName + " = "+ parameterName+ ";");
    }
  }
  for (  final PsiField field : fields) {
    if (field.hasModifierProperty(PsiModifier.STATIC)) {
      continue;
    }
    if (!field.hasInitializer()) {
      continue;
    }
    final PsiExpression initializer=field.getInitializer();
    if (PsiUtil.isConstantExpression(initializer)) {
      continue;
    }
    final String name=calculateStrippedName(field);
    final String fieldName=myJavaCodeStyleManager.propertyNameToVariableName(name,field.hasModifierProperty(PsiModifier.STATIC) ? VariableKind.STATIC_FIELD : VariableKind.FIELD);
    final String parameterName=myJavaCodeStyleManager.propertyNameToVariableName(name,VariableKind.PARAMETER);
    if (fieldName.equals(parameterName)) {
      out.append("\t\tthis." + fieldName + " = "+ parameterName+ ";");
    }
 else {
      out.append("\t\t" + fieldName + " = "+ parameterName+ ";");
    }
  }
  out.append("\t}");
}
