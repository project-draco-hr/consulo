{
  Arrays.sort(getInspectionClasses(),new InspectionComparator());
  final Class[] classes=getInspectionClasses();
  String currentGroupName="";
  final int numQuickFixes=countQuickFixes(classes,out);
  out.println(classes.length + " Inspections");
  out.println(numQuickFixes + " Quick Fixes");
  for (  final Class<LocalInspectionTool> aClass : classes) {
    final String className=aClass.getName();
    try {
      final LocalInspectionTool inspection=aClass.newInstance();
      final String groupDisplayName=inspection.getGroupDisplayName();
      if (!groupDisplayName.equals(currentGroupName)) {
        currentGroupName=groupDisplayName;
        out.println();
        out.print("   * ");
        out.println(currentGroupName);
      }
      printInspectionDescription(inspection,out);
    }
 catch (    InstantiationException e) {
      out.print("Couldn't instantiate ");
      out.println(className);
    }
catch (    IllegalAccessException e) {
      out.print("Couldn't access ");
      out.println(className);
    }
catch (    ClassCastException e) {
      out.print("Couldn't cast ");
      out.println(className);
    }
  }
  out.println();
  out.println("Inspections enabled by default:");
  for (  final Class<LocalInspectionTool> aClass : classes) {
    final String className=aClass.getName();
    try {
      final LocalInspectionTool inspection=(LocalInspectionTool)aClass.newInstance();
      if (inspection.isEnabledByDefault()) {
        out.println('\t' + inspection.getDisplayName());
      }
    }
 catch (    InstantiationException e) {
      out.print("Couldn't instantiate ");
      out.println(className);
    }
catch (    IllegalAccessException e) {
      out.print("Couldn't access ");
      out.println(className);
    }
catch (    ClassCastException e) {
      out.print("Couldn't cast ");
      out.println(className);
    }
  }
  final File descriptionDirectory=new File(DESCRIPTION_DIRECTORY_NAME);
  final File[] descriptionFiles=descriptionDirectory.listFiles();
  final Set<File> descriptionFilesSet=new HashSet<File>(descriptionFiles.length);
  for (  File descriptionFile1 : descriptionFiles) {
    if (!descriptionFile1.getName().startsWith(".")) {
      descriptionFilesSet.add(descriptionFile1);
    }
  }
  for (  final Class<LocalInspectionTool> aClass : classes) {
    final String className=aClass.getName();
    final String simpleClassName=className.substring(className.lastIndexOf('.') + 1,className.length() - "Inspection".length());
    final String fileName=DESCRIPTION_DIRECTORY_NAME + simpleClassName + ".html";
    final File descriptionFile=new File(fileName);
    if (descriptionFile.exists()) {
      descriptionFilesSet.remove(descriptionFile);
    }
 else {
      out.println("Couldn't find documentation file: " + fileName);
    }
  }
  for (  final File file : descriptionFilesSet) {
    out.println("Unused documentation file: " + file.getAbsolutePath());
  }
}
