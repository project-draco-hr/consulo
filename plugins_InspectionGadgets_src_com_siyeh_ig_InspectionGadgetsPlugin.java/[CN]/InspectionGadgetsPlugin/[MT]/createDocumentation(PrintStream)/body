{
  final Class<? extends InspectionProfileEntry>[] classes=getInspectionClasses();
  Arrays.sort(classes,new InspectionComparator());
  final int numQuickFixes=countQuickFixes(classes,out);
  out.println(InspectionGadgetsBundle.message("create.documentation.count.inspections.message",Integer.valueOf(classes.length)));
  out.println(InspectionGadgetsBundle.message("create.documentation.count.quick.fixes.message",Integer.valueOf(numQuickFixes)));
  String currentGroupName="";
  for (  final Class<? extends InspectionProfileEntry> aClass : classes) {
    final String className=aClass.getName();
    try {
      final InspectionProfileEntry inspection=aClass.newInstance();
      final String groupDisplayName=inspection.getGroupDisplayName();
      if (!groupDisplayName.equals(currentGroupName)) {
        currentGroupName=groupDisplayName;
        out.println();
        out.print("   * ");
        out.println(currentGroupName);
      }
      printInspectionDescription(inspection,out);
    }
 catch (    InstantiationException ignore) {
      out.println(InspectionGadgetsBundle.message("create.documentation.couldn.t.instantiate.class",className));
    }
catch (    IllegalAccessException ignore) {
      out.println(InspectionGadgetsBundle.message("create.documentation.couldnt.access.class",className));
    }
catch (    ClassCastException ignore) {
      out.println(InspectionGadgetsBundle.message("create.documentation.couldnt.cast.class",className));
    }
  }
  out.println();
  out.println(InspectionGadgetsBundle.message("create.documentation.inspections.enabled.by.default.message"));
  for (  final Class<? extends InspectionProfileEntry> aClass : classes) {
    final String className=aClass.getName();
    try {
      final InspectionProfileEntry inspection=aClass.newInstance();
      if (inspection.isEnabledByDefault()) {
        out.println('\t' + inspection.getDisplayName());
      }
    }
 catch (    InstantiationException ignore) {
      out.println(InspectionGadgetsBundle.message("create.documentation.couldn.t.instantiate.class",className));
    }
catch (    IllegalAccessException ignore) {
      out.println(InspectionGadgetsBundle.message("create.documentation.couldnt.access.class",className));
    }
catch (    ClassCastException ignore) {
      out.println(InspectionGadgetsBundle.message("create.documentation.couldnt.cast.class",className));
    }
  }
  final File descriptionDirectory=new File(DESCRIPTION_DIRECTORY_NAME);
  final File[] descriptionFiles=descriptionDirectory.listFiles();
  final Set<File> descriptionFilesSet=new HashSet<File>(descriptionFiles.length);
  for (  File descriptionFile : descriptionFiles) {
    final String name=descriptionFile.getName();
    if (!(name.length() > 0 && name.charAt(0) == '.')) {
      descriptionFilesSet.add(descriptionFile);
    }
  }
  for (  final Class<? extends InspectionProfileEntry> aClass : classes) {
    final String className=aClass.getName();
    final String simpleClassName=className.substring(className.lastIndexOf('.') + 1,className.length() - INSPECTION.length());
    @NonNls final String fileName=DESCRIPTION_DIRECTORY_NAME + simpleClassName + ".html";
    final File descriptionFile=new File(fileName);
    if (descriptionFile.exists()) {
      descriptionFilesSet.remove(descriptionFile);
    }
 else {
      out.println(InspectionGadgetsBundle.message("create.documentation.couldnt.find.documentation.file.error.message",fileName));
    }
  }
  for (  final File file : descriptionFilesSet) {
    out.println(InspectionGadgetsBundle.message("create.documentation.unused.documentation.file.error.message",file.getAbsolutePath()));
  }
}
