{
  if (m_inspectionClasses.isEmpty()) {
    registerAbstractionInspections();
    registerAssignmentInspections();
    registerBitwiseInspections();
    registerBugInspections();
    registerClassLayoutInspections();
    registerClassMetricsInspections();
    registerCloneInspections();
    registerControlFlowInspections();
    registerDataFlowInspections();
    registerDependencyInspections();
    registerEncapsulationInspections();
    registerErrorHandlingInspections();
    registerFinalizationInspections();
    registerImportInspections();
    registerInheritanceInspections();
    registerInitializerInspections();
    registerInternationalInspections();
    registerJ2MEInspections();
    registerJavaBeansInspections();
    registerJavadocInspections();
    registerLanguageLevelMigrationInspections();
    registerJdkInspections();
    registerJUnitInspections();
    registerLoggingInspections();
    registerMaturityInspections();
    registerMemoryInspections();
    registerMethodMetricsInspections();
    registerModularizationInspections();
    registerNamingInspections();
    registerNumericInspections();
    registerPackagingInspections();
    registerPerformanceInspections();
    registerPortabilityInspections();
    registerRedundancyInspections();
    registerResourceManagementInspections();
    registerSecurityInspections();
    registerSerializationInspections();
    registerStyleInspections();
    registerThreadingInspections();
    registerVisibilityInspections();
    m_inspectionClasses.add(MethodReturnAlwaysConstantInspection.class);
    m_inspectionClasses.add(BooleanMethodIsAlwaysInvertedInspection.class);
  }
  final int numInspections=m_inspectionClasses.size();
  final Class<? extends InspectionProfileEntry>[] classArray=new Class[numInspections];
  return m_inspectionClasses.toArray(classArray);
}
