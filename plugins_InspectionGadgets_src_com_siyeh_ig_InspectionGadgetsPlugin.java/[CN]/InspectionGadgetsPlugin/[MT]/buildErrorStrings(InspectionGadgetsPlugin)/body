{
  final Class<? extends LocalInspectionTool>[] classes=plugin.getInspectionClasses();
  for (  final Class<? extends LocalInspectionTool> aClass : classes) {
    final String className=aClass.getName();
    try {
      final BaseInspection inspection=(BaseInspection)aClass.newInstance();
      if (inspection.buildErrorString(null) != null) {
        @NonNls final String problemDescriptor=".problem.descriptor=";
        System.out.println(inspection.getPrefix(inspection.getShortName()) + problemDescriptor + inspection.buildErrorString(null));
      }
    }
 catch (    NullPointerException ignore) {
    }
catch (    InstantiationException ignore) {
    }
catch (    IllegalAccessException ignore) {
    }
catch (    ClassCastException ignore) {
    }
  }
}
