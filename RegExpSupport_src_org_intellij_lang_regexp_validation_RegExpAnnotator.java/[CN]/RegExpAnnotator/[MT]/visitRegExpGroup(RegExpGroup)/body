{
  final RegExpPattern pattern=group.getPattern();
  if (pattern != null) {
    final RegExpBranch[] branches=pattern.getBranches();
    if (isEmpty(branches)) {
      myHolder.createWarningAnnotation(group,"Empty group");
    }
 else     if (branches.length == 1) {
      final RegExpAtom[] atoms=branches[0].getAtoms();
      if (atoms.length == 1 && atoms[0] instanceof RegExpGroup) {
        if (group.isSimple()) {
          final RegExpGroup innerGroup=(RegExpGroup)atoms[0];
          if (group.isCapturing() == innerGroup.isCapturing()) {
            myHolder.createWarningAnnotation(group,"Redundant group nesting");
          }
        }
      }
    }
  }
  if (group.isPythonNamedGroup() || group.isRubyNamedGroup()) {
    RegExpLanguageHost host=findRegExpHost(group);
    if (host == null || !host.supportsNamedGroupSyntax(group)) {
      myHolder.createErrorAnnotation(group,"This named group syntax is not supported");
    }
  }
}
