{
  final RegExpQuantifier.Count count=quantifier.getCount();
  if (!(count instanceof RegExpQuantifier.SimpleCount)) {
    String min=count.getMin();
    String max=count.getMax();
    if (max.equals(min)) {
      if ("1".equals(max)) {
        final Annotation a=myHolder.createWeakWarningAnnotation(quantifier,"Single repetition");
        registerFix(a,new SimplifyQuantifierAction(quantifier,null));
      }
 else {
        final ASTNode node=quantifier.getNode();
        if (node.findChildByType(RegExpTT.COMMA) != null) {
          final Annotation a=myHolder.createWeakWarningAnnotation(quantifier,"Fixed repetition range");
          registerFix(a,new SimplifyQuantifierAction(quantifier,"{" + max + "}"));
        }
      }
    }
 else     if ("0".equals(min) && "1".equals(max)) {
      final Annotation a=myHolder.createWeakWarningAnnotation(quantifier,"Repetition range replaceable by '?'");
      registerFix(a,new SimplifyQuantifierAction(quantifier,"?"));
    }
 else     if ("0".equals(min) && max.isEmpty()) {
      final Annotation a=myHolder.createWeakWarningAnnotation(quantifier,"Repetition range replaceable by '*'");
      registerFix(a,new SimplifyQuantifierAction(quantifier,"*"));
    }
 else     if ("1".equals(min) && max.isEmpty()) {
      final Annotation a=myHolder.createWeakWarningAnnotation(quantifier,"Repetition range replaceable by '+'");
      registerFix(a,new SimplifyQuantifierAction(quantifier,"+"));
    }
 else     if (!min.isEmpty() && !max.isEmpty()) {
      try {
        BigInteger minInt=new BigInteger(min);
        BigInteger maxInt=new BigInteger(max);
        if (maxInt.compareTo(minInt) < 0) {
          myHolder.createErrorAnnotation(quantifier,"Illegal repetition range");
        }
      }
 catch (      NumberFormatException ex) {
        myHolder.createErrorAnnotation(quantifier,"Illegal repetition value");
      }
    }
  }
  if (quantifier.getType() == RegExpQuantifier.Type.POSSESSIVE) {
    RegExpLanguageHost host=findRegExpHost(quantifier);
    if (host != null && !host.supportsPossessiveQuantifiers()) {
      myHolder.createErrorAnnotation(quantifier,"Nested quantifier in regexp");
    }
  }
}
