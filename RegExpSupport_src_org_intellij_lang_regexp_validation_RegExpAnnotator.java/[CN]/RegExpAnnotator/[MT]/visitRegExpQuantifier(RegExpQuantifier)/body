{
  final RegExpQuantifier.Count count=quantifier.getCount();
  if (!(count instanceof RegExpQuantifier.SimpleCount)) {
    final int min=count.getMin();
    final int max=count.getMax();
    if (max < min) {
      myHolder.createErrorAnnotation(quantifier,"Illegal repetition range");
    }
 else     if (max == min) {
      if (max == 1) {
        final Annotation a=myHolder.createInformationAnnotation(quantifier,"Single repetition");
        registerFix(a,new SimplifyQuantifierAction(quantifier,null));
      }
 else {
        final ASTNode node=quantifier.getNode();
        if (node.findChildByType(RegExpTT.COMMA) != null) {
          final Annotation a=myHolder.createInformationAnnotation(quantifier,"Fixed repetition range");
          registerFix(a,new SimplifyQuantifierAction(quantifier,"{" + max + "}"));
        }
      }
    }
 else     if (min == 0 && max == 1) {
      final Annotation a=myHolder.createInformationAnnotation(quantifier,"Repetition range replaceable by '?'");
      registerFix(a,new SimplifyQuantifierAction(quantifier,"?"));
    }
 else     if (min == 0 && max == Integer.MAX_VALUE) {
      final Annotation a=myHolder.createInformationAnnotation(quantifier,"Repetition range replaceable by '*'");
      registerFix(a,new SimplifyQuantifierAction(quantifier,"*"));
    }
 else     if (min == 1 && max == Integer.MAX_VALUE) {
      final Annotation a=myHolder.createInformationAnnotation(quantifier,"Repetition range replaceable by '+'");
      registerFix(a,new SimplifyQuantifierAction(quantifier,"+"));
    }
  }
  if (quantifier.getType() == RegExpQuantifier.Type.POSSESSIVE) {
    RegExpLanguageHost host=findRegExpHost(quantifier);
    if (host != null && !host.supportsPossessiveQuantifiers()) {
      myHolder.createErrorAnnotation(quantifier,"Nested quantifier in regexp");
    }
  }
}
