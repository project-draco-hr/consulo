{
  final PsiElement element=node.getPsi();
  if (!(element instanceof PsiJavaFile)) {
    return FoldingDescriptor.EMPTY;
  }
  final PsiJavaFile file=(PsiJavaFile)element;
  final List<FoldingDescriptor> result=new ArrayList<FoldingDescriptor>();
  file.accept(new JavaRecursiveElementWalkingVisitor(){
    @Override public void visitLiteralExpression(    PsiLiteralExpression expression){
      final Map<String,Object> annotationParams=new HashMap<String,Object>();
      annotationParams.put(AnnotationUtil.PROPERTY_KEY_RESOURCE_BUNDLE_PARAMETER,null);
      final PsiElement parent=expression.getParent();
      if (JavaI18nUtil.mustBePropertyKey(expression,annotationParams) && parent instanceof PsiExpressionList) {
        if (((PsiExpressionList)parent).getExpressions().length == 1 && parent.getParent() instanceof PsiMethodCallExpression) {
          final PsiMethodCallExpression expr=(PsiMethodCallExpression)parent.getParent();
          result.add(new FoldingDescriptor(expr.getNode(),expr.getTextRange()));
        }
      }
    }
  }
);
  return result.toArray(new FoldingDescriptor[result.size()]);
}
