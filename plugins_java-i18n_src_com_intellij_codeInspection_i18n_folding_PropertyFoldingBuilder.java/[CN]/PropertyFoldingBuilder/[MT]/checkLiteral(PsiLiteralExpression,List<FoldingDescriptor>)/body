{
  if (isI18nProperty(expression)) {
    final Property property=getI18nProperty(expression);
    final HashSet<Object> set=new HashSet<Object>();
    set.add(property);
    final String msg=formatI18nProperty(expression,property);
    final PsiElement parent=expression.getParent();
    if (!msg.equals(expression.getText()) && parent instanceof PsiExpressionList && ((PsiExpressionList)parent).getExpressions()[0] == expression) {
      final PsiExpressionList expressions=(PsiExpressionList)parent;
      final int count=JavaI18nUtil.getPropertyValueParamsMaxCount(expression);
      final PsiExpression[] args=expressions.getExpressions();
      if (args.length == 1 + count && parent.getParent() instanceof PsiMethodCallExpression) {
        boolean ok=true;
        for (int i=1; i < count + 1; i++) {
          Object value=JavaConstantExpressionEvaluator.computeConstantExpression(args[i],false);
          if (value == null) {
            if (!(args[i] instanceof PsiReferenceExpression)) {
              ok=false;
              break;
            }
          }
        }
        if (ok) {
          result.add(new FoldingDescriptor(ObjectUtils.assertNotNull(parent.getParent().getNode()),parent.getParent().getTextRange(),null,set));
          return;
        }
      }
    }
    result.add(new FoldingDescriptor(ObjectUtils.assertNotNull(expression.getNode()),expression.getTextRange(),null,set));
  }
}
