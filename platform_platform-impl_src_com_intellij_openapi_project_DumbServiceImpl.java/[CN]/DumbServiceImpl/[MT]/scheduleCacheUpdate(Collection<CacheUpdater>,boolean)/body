{
  final CacheUpdateRunner runner=new CacheUpdateRunner(myProject,new ArrayList<CacheUpdater>(updaters));
  final Application application=ApplicationManager.getApplication();
  if (application.isUnitTestMode() || application.isHeadlessEnvironment()) {
    EmptyProgressIndicator i=new EmptyProgressIndicator();
    final int size=runner.queryNeededFiles(i);
    try {
      HeavyProcessLatch.INSTANCE.processStarted();
      if (size > 0) {
        runner.processFiles(i,false);
      }
      runner.updatingDone();
    }
  finally {
      HeavyProcessLatch.INSTANCE.processFinished();
    }
    return;
  }
  if (!forceDumbMode && !myDumb && application.isReadAccessAllowed()) {
    final ProgressIndicator currentIndicator=ProgressManager.getInstance().getProgressIndicator();
    final ProgressIndicator indicator;
    if (currentIndicator != null) {
      indicator=currentIndicator;
      currentIndicator.pushState();
    }
 else {
      indicator=new EmptyProgressIndicator();
    }
    try {
      final int size=runner.queryNeededFiles(indicator);
      if (size + runner.getNumberOfPendingUpdateJobs(indicator) < 50) {
        try {
          HeavyProcessLatch.INSTANCE.processStarted();
          if (size > 0) {
            runner.processFiles(indicator,false);
          }
          runner.updatingDone();
        }
  finally {
          HeavyProcessLatch.INSTANCE.processFinished();
        }
        return;
      }
    }
  finally {
      if (currentIndicator != null) {
        currentIndicator.popState();
      }
    }
  }
  final IndexUpdateRunnable updateRunnable=new IndexUpdateRunnable(runner);
  UIUtil.invokeLaterIfNeeded(new DumbAwareRunnable(){
    public void run(){
      if (myProject.isDisposed()) {
        return;
      }
      if (myDumb) {
        myUpdatesQueue.addLast(updateRunnable);
      }
 else {
        boolean startSuccess=application.runWriteAction(new Computable<Boolean>(){
          @Override public Boolean compute(){
            myDumb=true;
            try {
              myPublisher.enteredDumbMode();
            }
 catch (            Throwable e) {
              LOG.error(e);
            }
 finally {
              try {
                updateRunnable.run();
              }
 catch (              Throwable e) {
                LOG.error("Failed to start background index update task",e);
                return false;
              }
            }
            return true;
          }
        }
);
        if (!startSuccess) {
          updateFinished();
        }
      }
    }
  }
);
}
