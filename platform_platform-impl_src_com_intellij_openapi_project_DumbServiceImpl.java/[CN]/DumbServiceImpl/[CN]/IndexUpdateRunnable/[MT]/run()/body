{
  ProgressManager.getInstance().run(new Task.Backgroundable(myProject,IdeBundle.message("progress.indexing"),false){
    @Override public void run(    @NotNull final ProgressIndicator indicator){
      if (indicator instanceof ProgressIndicatorEx) {
        ((ProgressIndicatorEx)indicator).addStateDelegate(new ProgressIndicatorBase(){
          double lastFraction;
          @Override public void setFraction(          final double fraction){
            if (fraction - lastFraction < 0.01d)             return;
            lastFraction=fraction;
            UIUtil.invokeLaterIfNeeded(new Runnable(){
              public void run(){
                AppIcon.getInstance().setProgress(myProject,"indexUpdate",AppIconScheme.Progress.INDEXING,fraction,true);
              }
            }
);
          }
          @Override public void finish(          @NotNull TaskInfo task){
            UIUtil.invokeLaterIfNeeded(new Runnable(){
              public void run(){
                AppIcon appIcon=AppIcon.getInstance();
                if (appIcon.hideProgress(myProject,"indexUpdate")) {
                  appIcon.requestAttention(myProject,false);
                  appIcon.setOkBadge(myProject,true);
                }
              }
            }
);
          }
        }
);
      }
      final ProgressIndicator proxy=new DelegatingProgressIndicator(indicator){
        @Override public void setFraction(        double fraction){
          super.setFraction((myProcessedItems + fraction * myCurrentBaseTotal) / myTotalItems);
        }
      }
;
      final ShutDownTracker shutdownTracker=ShutDownTracker.getInstance();
      final Thread self=Thread.currentThread();
      try {
        HeavyProcessLatch.INSTANCE.processStarted();
        shutdownTracker.registerStopperThread(self);
        runAction(proxy,myAction);
      }
 catch (      RuntimeException e) {
        LOG.debug(e);
        throw e;
      }
 finally {
        shutdownTracker.unregisterStopperThread(self);
        HeavyProcessLatch.INSTANCE.processFinished();
      }
    }
    private void runAction(    ProgressIndicator indicator,    CacheUpdateRunner updateRunner){
      while (updateRunner != null) {
        indicator.setIndeterminate(true);
        indicator.setText(IdeBundle.message("progress.indexing.scanning"));
        int count=updateRunner.queryNeededFiles(indicator);
        myCurrentBaseTotal=count;
        myTotalItems+=count;
        indicator.setIndeterminate(false);
        indicator.setText(IdeBundle.message("progress.indexing.updating"));
        if (count > 0) {
          updateRunner.processFiles(indicator,true);
        }
        updateRunner.updatingDone();
        myProcessedItems+=count;
        updateRunner=getNextUpdateRunner();
      }
    }
    @Nullable private CacheUpdateRunner getNextUpdateRunner(){
      final BlockingQueue<Ref<CacheUpdateRunner>> actionQueue=new LinkedBlockingQueue<Ref<CacheUpdateRunner>>();
      UIUtil.invokeLaterIfNeeded(new DumbAwareRunnable(){
        public void run(){
          IndexUpdateRunnable nextRunnable=getNextUpdateFromQueue();
          try {
            actionQueue.offer(nextRunnable == null ? NULL_ACTION : new Ref<CacheUpdateRunner>(nextRunnable.myAction));
          }
  finally {
            if (nextRunnable == null) {
              updateFinished();
            }
          }
        }
      }
);
      while (!myProject.isDisposed()) {
        try {
          Ref<CacheUpdateRunner> ref=actionQueue.poll(500,TimeUnit.MILLISECONDS);
          if (ref != null) {
            return ref.get();
          }
        }
 catch (        InterruptedException e) {
          LOG.info(e);
        }
      }
      return null;
    }
    @Nullable private IndexUpdateRunnable getNextUpdateFromQueue(){
      try {
        return myUpdatesQueue.isEmpty() ? null : myUpdatesQueue.pullFirst();
      }
 catch (      Throwable e) {
        LOG.info(e);
        return null;
      }
    }
  }
);
}
