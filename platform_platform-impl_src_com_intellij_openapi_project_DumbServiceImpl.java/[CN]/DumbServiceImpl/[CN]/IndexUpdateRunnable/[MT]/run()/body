{
  if (myProject.isDisposed()) {
    return;
  }
  myCurrentUpdateRunnable=this;
  ProgressManager.getInstance().run(new Task.Backgroundable(myProject,"Updating indices",false){
    private final ArrayBlockingQueue<Consumer<ProgressIndicator>> myActionQueue=new ArrayBlockingQueue<Consumer<ProgressIndicator>>(1);
    @Override public void run(    @NotNull final ProgressIndicator indicator){
      final ProgressIndicator proxy=(ProgressIndicator)Proxy.newProxyInstance(indicator.getClass().getClassLoader(),new Class[]{ProgressIndicator.class},new InvocationHandler(){
        public Object invoke(        Object proxy,        Method method,        Object[] args) throws Throwable {
          if ("setFraction".equals(method.getName())) {
            final double fraction=(Double)args[0];
            args[0]=new Double((myProcessedItems + fraction * myCurrentBaseTotal) / myTotalItems);
          }
          return method.invoke(indicator,args);
        }
      }
);
      runAction(proxy,myAction);
    }
    private void runAction(    ProgressIndicator indicator,    Consumer<ProgressIndicator> action){
      indicator.setIndeterminate(false);
      do {
        indicator.setText("Indexing...");
        try {
          action.consume(indicator);
        }
  finally {
          myProcessedItems+=myCurrentBaseTotal;
          ApplicationManager.getApplication().invokeLater(new DumbAwareRunnable(){
            public void run(){
              if (myProject.isDisposed()) {
                return;
              }
              if (myUpdateQueue.isEmpty()) {
                myActionQueue.offer(NULL_ACTION);
                updateFinished();
              }
 else {
                final IndexUpdateRunnable nextUpdateRunnable=myUpdateQueue.pullFirst();
                myCurrentBaseTotal=nextUpdateRunnable.myTotalItems;
                if (!myActionQueue.offer(nextUpdateRunnable.myAction)) {
                  nextUpdateRunnable.run();
                }
              }
            }
          }
);
          try {
            do {
              action=myActionQueue.poll(500,TimeUnit.MILLISECONDS);
              if (myProject.isDisposed()) {
                action=NULL_ACTION;
              }
            }
 while (action == null);
          }
 catch (          InterruptedException ignored) {
            LOG.info(ignored);
            break;
          }
        }
      }
 while (action != NULL_ACTION);
      myActionQueue.offer(NULL_ACTION);
    }
  }
);
}
