{
  List<Trinity<FileNameMatcher,String,Boolean>> result=new SmartList<Trinity<FileNameMatcher,String,Boolean>>();
  List<Element> children=element.getChildren(ELEMENT_REMOVED_MAPPING);
  if (children.isEmpty()) {
    return Collections.emptyList();
  }
  for (  Element mapping : children) {
    String ext=mapping.getAttributeValue(ATTRIBUTE_EXT);
    FileNameMatcher matcher=ext == null ? FileTypeManager.parseFromString(mapping.getAttributeValue(ATTRIBUTE_PATTERN)) : new ExtensionFileNameMatcher(ext);
    result.add(Trinity.create(matcher,mapping.getAttributeValue(ATTRIBUTE_TYPE),Boolean.parseBoolean(mapping.getAttributeValue(ATTRIBUTE_APPROVED))));
  }
  return result;
}
