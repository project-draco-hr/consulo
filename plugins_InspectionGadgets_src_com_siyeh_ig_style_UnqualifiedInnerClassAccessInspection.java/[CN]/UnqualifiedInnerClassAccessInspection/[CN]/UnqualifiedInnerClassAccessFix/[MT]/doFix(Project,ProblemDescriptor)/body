{
  final PsiElement element=descriptor.getPsiElement();
  if (!(element instanceof PsiJavaCodeReferenceElement)) {
    return;
  }
  final PsiJavaCodeReferenceElement referenceElement=(PsiJavaCodeReferenceElement)element;
  final PsiElement target=referenceElement.resolve();
  if (!(target instanceof PsiClass)) {
    return;
  }
  final PsiClass aClass=(PsiClass)target;
  final PsiClass containingClass=aClass.getContainingClass();
  if (containingClass == null) {
    return;
  }
  final String qualifiedName=containingClass.getQualifiedName();
  if (qualifiedName == null) {
    return;
  }
  final PsiFile containingFile=referenceElement.getContainingFile();
  if (!(containingFile instanceof PsiJavaFile)) {
    return;
  }
  final PsiJavaFile javaFile=(PsiJavaFile)containingFile;
  final String innerClassName=aClass.getQualifiedName();
  if (innerClassName == null) {
    return;
  }
  final PsiImportList importList=javaFile.getImportList();
  if (importList == null) {
    return;
  }
  final PsiImportStatement[] importStatements=importList.getImportStatements();
  final int importStatementsLength=importStatements.length;
  boolean onDemand=false;
  PsiImportStatement referenceImportStatement=null;
  for (int i=importStatementsLength - 1; i >= 0; i--) {
    final PsiImportStatement importStatement=importStatements[i];
    final String importString=importStatement.getQualifiedName();
    if (importStatement.isOnDemand()) {
      if (qualifiedName.equals(importString)) {
        referenceImportStatement=importStatement;
        onDemand=true;
        break;
      }
    }
 else {
      if (innerClassName.equals(importString)) {
        referenceImportStatement=importStatement;
        break;
      }
    }
  }
  final ReferenceCollector referenceCollector;
  if (onDemand) {
    referenceCollector=new ReferenceCollector(qualifiedName,onDemand);
  }
 else {
    referenceCollector=new ReferenceCollector(innerClassName,onDemand);
  }
  final PsiClass[] classes=javaFile.getClasses();
  for (  PsiClass psiClass : classes) {
    psiClass.accept(referenceCollector);
  }
  final Collection<PsiJavaCodeReferenceElement> references=referenceCollector.getReferences();
  final SmartPointerManager pointerManager=SmartPointerManager.getInstance(project);
  final List<SmartPsiElementPointer> pointers=new ArrayList();
  for (  PsiJavaCodeReferenceElement reference : references) {
    final SmartPsiElementPointer<PsiJavaCodeReferenceElement> pointer=pointerManager.createSmartPsiElementPointer(reference);
    pointers.add(pointer);
  }
  if (referenceImportStatement != null) {
    referenceImportStatement.delete();
  }
  ImportUtils.addImportIfNeeded(containingClass,referenceElement);
  final PsiDocumentManager documentManager=PsiDocumentManager.getInstance(project);
  final Document document=documentManager.getDocument(containingFile);
  if (document == null) {
    return;
  }
  documentManager.doPostponedOperationsAndUnblockDocument(document);
  final String text=buildNewText(javaFile,references,containingClass,new StringBuilder()).toString();
  document.replaceString(0,document.getTextLength(),text);
  documentManager.commitDocument(document);
  if (pointers.size() > 1) {
    final List<PsiElement> elements=new ArrayList();
    for (    SmartPsiElementPointer pointer : pointers) {
      elements.add(pointer.getElement());
    }
    HighlightUtils.highlightElements(elements);
  }
}
