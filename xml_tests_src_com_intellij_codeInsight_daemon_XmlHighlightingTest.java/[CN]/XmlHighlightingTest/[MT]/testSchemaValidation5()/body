{
  String schemaLocation=getTestName(false) + ".xsd";
  configureByFile(BASE_PATH + schemaLocation);
  doDoTest(true,false);
  final List<PsiReference> myTypeOrElementRefs=new ArrayList<PsiReference>(1);
  final List<XmlTag> myTypesAndElementDecls=new ArrayList<XmlTag>(1);
  myFile.accept(new XmlRecursiveElementVisitor(){
    @Override public void visitXmlAttributeValue(    XmlAttributeValue value){
      final PsiElement parent=value.getParent();
      if (!(parent instanceof XmlAttribute))       return;
      final String name=((XmlAttribute)parent).getName();
      if ("type".equals(name) || "base".equals(name) || "ref".equals(name)) {
        myTypeOrElementRefs.add(value.getReferences()[0]);
      }
    }
    @Override public void visitXmlTag(    XmlTag tag){
      super.visitXmlTag(tag);
      final String localName=tag.getLocalName();
      if ("complexType".equals(localName) || "simpleType".equals(localName) || "element".equals(localName)) {
        if (tag.getAttributeValue("name") != null)         myTypesAndElementDecls.add(tag);
      }
    }
  }
);
  assertEquals(9,myTypesAndElementDecls.size());
  assertEquals(5,myTypeOrElementRefs.size());
  for (  XmlTag t : myTypesAndElementDecls) {
    final XmlAttribute attribute=t.getAttribute("name",null);
    final XmlAttributeValue valueElement=attribute.getValueElement();
    final PsiReference nameReference=valueElement.getReferences()[0];
    ApplicationManager.getApplication().runWriteAction(new Runnable(){
      public void run(){
        nameReference.handleElementRename("zzz");
      }
    }
);
  }
  for (  PsiReference ref : myTypeOrElementRefs) {
    assertNull(ref.resolve());
  }
}
