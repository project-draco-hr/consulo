{
  PsiManager psiManager=hostPsiFile.getManager();
  final Project project=psiManager.getProject();
  InjectedLanguageManagerImpl injectedManager=InjectedLanguageManagerImpl.getInstanceImpl(project);
  if (injectedManager == null) {
    return null;
  }
  MultiHostRegistrarImpl registrar=null;
  PsiElement current=element;
  nextParent:   while (current != null && current != hostPsiFile) {
    ProgressManager.checkCanceled();
    if ("EL".equals(current.getLanguage().getID()))     break;
    ParameterizedCachedValue<MultiHostRegistrarImpl,PsiElement> data=current.getUserData(INJECTED_PSI);
    if (data == null) {
      registrar=InjectedPsiCachedValueProvider.doCompute(current,injectedManager,project,hostPsiFile);
    }
 else {
      registrar=data.getValue(current);
    }
    if (DEBUG)     log(current,(registrar == null ? "!" : "") + " computed result=" + registrar);
    current=current.getParent();
    if (registrar != null) {
      List<Pair<Place,PsiFile>> places=registrar.getResult();
      TextRange elementRange=element.getTextRange();
      for (      Pair<Place,PsiFile> pair : places) {
        Place place=pair.first;
        for (        PsiLanguageInjectionHost.Shred shred : place) {
          if (shred.getHost().getTextRange().intersects(elementRange)) {
            if (place.isValid())             break nextParent;
          }
        }
      }
    }
    if (!probeUp) {
      break;
    }
  }
  if (probeUp) {
    for (PsiElement e=element; e != current && e != null && e != hostPsiFile; e=e.getParent()) {
      ProgressManager.checkCanceled();
      if (registrar == null) {
        e.putUserData(INJECTED_PSI,null);
        if (DEBUG)         log(e,"Cache .INJECTED_PSI=null");
      }
 else {
        ParameterizedCachedValue<MultiHostRegistrarImpl,PsiElement> cachedValue=CachedValuesManager.getManager(project).createParameterizedCachedValue(INJECTED_PSI_PROVIDER,false);
        CachedValueProvider.Result<MultiHostRegistrarImpl> result=CachedValueProvider.Result.create(registrar,PsiModificationTracker.MODIFICATION_COUNT,registrar);
        ((PsiParameterizedCachedValue<MultiHostRegistrarImpl,PsiElement>)cachedValue).setValue(result);
        e.putUserData(INJECTED_PSI,cachedValue);
        if (DEBUG)         log(e,"Cache .INJECTED_PSI=" + result);
      }
    }
  }
  return registrar;
}
