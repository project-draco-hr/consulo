{
  PsiManager psiManager=hostPsiFile.getManager();
  final Project project=psiManager.getProject();
  InjectedLanguageManagerImpl injectedManager=InjectedLanguageManagerImpl.getInstanceImpl(project);
  if (injectedManager == null)   return null;
  for (PsiElement current=element; current != null && current != hostPsiFile; current=current.getParent()) {
    ProgressManager.checkCanceled();
    if ("EL".equals(current.getLanguage().getID()))     break;
    ParameterizedCachedValue<Places,PsiElement> data=current.getUserData(INJECTED_PSI_KEY);
    Places places;
    if (data == null) {
      places=InjectedPsiCachedValueProvider.doCompute(current,injectedManager,project,hostPsiFile);
      if (places != null) {
        ParameterizedCachedValue<Places,PsiElement> cachedValue=CachedValuesManager.getManager(psiManager.getProject()).createParameterizedCachedValue(INJECTED_PSI_PROVIDER,false);
        Document hostDocument=hostPsiFile.getViewProvider().getDocument();
        CachedValueProvider.Result<Places> result=new CachedValueProvider.Result<Places>(places,PsiModificationTracker.MODIFICATION_COUNT,hostDocument);
        ((PsiParameterizedCachedValue<Places,PsiElement>)cachedValue).setValue(result);
        current.putUserData(INJECTED_PSI_KEY,cachedValue);
      }
    }
 else {
      places=data.getValue(current);
    }
    if (places != null) {
      TextRange elementRange=element.getTextRange();
      for (      Place place : places) {
        for (        PsiLanguageInjectionHost.Shred shred : place) {
          if (shred.host.getTextRange().intersects(elementRange)) {
            if (places.isValid())             return places;
          }
        }
      }
    }
    if (!probeUp)     break;
  }
  return null;
}
