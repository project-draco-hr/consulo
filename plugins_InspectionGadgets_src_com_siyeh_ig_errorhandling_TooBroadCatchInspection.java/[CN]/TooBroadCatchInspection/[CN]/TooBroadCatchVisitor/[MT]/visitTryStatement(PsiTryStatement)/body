{
  super.visitTryStatement(statement);
  final PsiManager manager=statement.getManager();
  final PsiElementFactory factory=manager.getElementFactory();
  final PsiCodeBlock tryBlock=statement.getTryBlock();
  if (tryBlock == null) {
    return;
  }
  final Set exceptionsThrown=ExceptionUtils.calculateExceptionsThrown(tryBlock,factory);
  final int numExceptionsThrown=exceptionsThrown.size();
  final Set exceptionsCaught=new HashSet(numExceptionsThrown);
  final PsiParameter[] parameters=statement.getCatchBlockParameters();
  for (int i=0; i < parameters.length; i++) {
    final PsiParameter parameter=parameters[i];
    final PsiType typeCaught=parameter.getType();
    for (Iterator iterator=exceptionsThrown.iterator(); iterator.hasNext(); ) {
      final PsiType typeThrown=(PsiType)iterator.next();
      if (exceptionsCaught.contains(typeThrown)) {
      }
 else       if (typeCaught.equals(typeThrown)) {
        exceptionsCaught.add(typeCaught);
      }
 else       if (typeCaught.isAssignableFrom(typeThrown)) {
        exceptionsCaught.add(typeCaught);
        final String typeThrownText=typeThrown.getPresentableText();
        final PsiTypeElement typeElement=parameter.getTypeElement();
        registerError(typeElement,typeThrownText);
      }
    }
  }
}
