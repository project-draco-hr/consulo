{
  super.visitTryStatement(statement);
  final PsiCodeBlock tryBlock=statement.getTryBlock();
  if (tryBlock == null) {
    return;
  }
  final Set<PsiClassType> exceptionsThrown=ExceptionUtils.calculateExceptionsThrown(tryBlock);
  final int numExceptionsThrown=exceptionsThrown.size();
  final Set<PsiType> exceptionsCaught=new HashSet<PsiType>(numExceptionsThrown);
  final PsiCatchSection[] catchSections=statement.getCatchSections();
  for (  final PsiCatchSection catchSection : catchSections) {
    final PsiParameter parameter=catchSection.getParameter();
    if (parameter == null) {
      continue;
    }
    final PsiType typeCaught=parameter.getType();
    if (typeCaught instanceof PsiDisjunctionType) {
      final PsiDisjunctionType disjunctionType=(PsiDisjunctionType)typeCaught;
      final List<PsiType> types=disjunctionType.getDisjunctions();
      for (      PsiType type : types) {
        register(exceptionsThrown,exceptionsCaught,parameter,type);
      }
    }
 else {
      register(exceptionsThrown,exceptionsCaught,parameter,typeCaught);
    }
  }
}
