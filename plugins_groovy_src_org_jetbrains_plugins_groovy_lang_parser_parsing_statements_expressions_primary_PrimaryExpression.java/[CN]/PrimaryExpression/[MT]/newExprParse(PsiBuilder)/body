{
  PsiBuilder.Marker marker=builder.mark();
  ParserUtils.getToken(builder,kNEW);
  ParserUtils.getToken(builder,mNLS);
  PsiBuilder.Marker rb=builder.mark();
  TypeSpec.parseStrict(builder);
  if (!TokenSets.BUILT_IN_TYPE.contains(builder.getTokenType()) && !mIDENT.equals(builder.getTokenType())) {
    rb.rollbackTo();
  }
 else {
    rb.drop();
  }
  if (TokenSets.BUILT_IN_TYPE.contains(builder.getTokenType())) {
    ParserUtils.eatElement(builder,BUILT_IN_TYPE);
  }
 else   if (mIDENT.equals(builder.getTokenType())) {
    ClassOrInterfaceType.parseStrict(builder);
  }
 else {
    builder.error(GroovyBundle.message("type.specification.expected"));
    marker.done(NEW_EXPRESSION);
    return NEW_EXPRESSION;
  }
  if (ParserUtils.lookAhead(builder,mLPAREN) || ParserUtils.lookAhead(builder,mNLS,mLPAREN)) {
    ParserUtils.getToken(builder,mNLS);
    methodCallArgsParse(builder);
    if (ParserUtils.lookAhead(builder,mLCURLY)) {
      OpenOrClosableBlock.parseClosableBlock(builder);
    }
  }
 else {
    builder.error(GroovyBundle.message("lparen.expected"));
  }
  marker.done(NEW_EXPRESSION);
  return NEW_EXPRESSION;
}
