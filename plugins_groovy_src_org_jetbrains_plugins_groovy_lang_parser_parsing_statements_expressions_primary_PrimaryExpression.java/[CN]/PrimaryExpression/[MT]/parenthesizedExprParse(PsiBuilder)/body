{
  PsiBuilder.Marker marker=builder.mark();
  ParserUtils.getToken(builder,mLPAREN);
  GroovyElementType innerExprType=AssignmentExpression.parse(builder);
  if (innerExprType == WRONGWAY) {
    marker.rollbackTo();
    return WRONGWAY;
  }
  ParserUtils.getToken(builder,mNLS);
  if (!ParserUtils.getToken(builder,mRPAREN,GroovyBundle.message("rparen.expected"))) {
    builder.error(GroovyBundle.message("rparen.expected"));
    while (!builder.eof() && !mNLS.equals(builder.getTokenType()) && !mSEMI.equals(builder.getTokenType())&& !mRPAREN.equals(builder.getTokenType())) {
      builder.error(GroovyBundle.message("rparen.expected"));
      builder.advanceLexer();
    }
    ParserUtils.getToken(builder,mRPAREN);
  }
  marker.done(PARENTHESIZED_EXPRESSION);
  return PARENTHESIZED_EXPRESSION;
}
