{
  final IElementType tokenType=builder.getTokenType();
  if (TokenSets.BUILT_IN_TYPE.contains(tokenType)) {
    ParserUtils.eatElement(builder,BUILT_IN_TYPE_EXPRESSION);
    return BUILT_IN_TYPE_EXPRESSION;
  }
  if (kNEW == tokenType) {
    PsiBuilder.Marker marker=builder.mark();
    final GroovyElementType type=newExprParse(builder,parser);
    marker.done(type);
    return type;
  }
  if (mIDENT == tokenType || kSUPER == tokenType || kTHIS == tokenType) {
    ParserUtils.eatElement(builder,REFERENCE_EXPRESSION);
    return REFERENCE_EXPRESSION;
  }
  if (mGSTRING_BEGIN == tokenType) {
    return StringConstructorExpression.parse(builder,parser);
  }
  if (mREGEX_BEGIN == tokenType) {
    RegexConstructorExpression.parse(builder,parser,false);
    return REGEX;
  }
  if (mDOLLAR_SLASH_REGEX_BEGIN == tokenType) {
    DollarSlashRegexConstructorExpression.parse(builder,parser,false);
    return REGEX;
  }
  if (mLBRACK == tokenType) {
    return ListOrMapConstructorExpression.parse(builder,parser);
  }
  if (mLPAREN == tokenType) {
    return parenthesizedExprParse(builder,parser);
  }
  if (mLCURLY == tokenType) {
    return OpenOrClosableBlock.parseClosableBlock(builder,parser);
  }
  if (tokenType == mSTRING_LITERAL || tokenType == mGSTRING_LITERAL) {
    return ParserUtils.eatElement(builder,literalsAsRefExprs ? REFERENCE_EXPRESSION : LITERAL);
  }
  if (TokenSets.CONSTANTS.contains(tokenType)) {
    return ParserUtils.eatElement(builder,LITERAL);
  }
  return WRONGWAY;
}
