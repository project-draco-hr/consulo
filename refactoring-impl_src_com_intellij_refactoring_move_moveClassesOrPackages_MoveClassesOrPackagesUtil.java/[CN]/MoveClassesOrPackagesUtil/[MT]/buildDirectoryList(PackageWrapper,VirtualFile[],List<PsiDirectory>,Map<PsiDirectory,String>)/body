{
  sourceRoots:   for (int i=0; i < contentSourceRoots.length; i++) {
    VirtualFile root=contentSourceRoots[i];
    final PsiDirectory[] directories=aPackage.getDirectories();
    for (int j=0; j < directories.length; j++) {
      PsiDirectory directory=directories[j];
      if (VfsUtil.isAncestor(root,directory.getVirtualFile(),false)) {
        targetDirectories.add(directory);
        continue sourceRoots;
      }
    }
    String qNameToCreate;
    try {
      qNameToCreate=RefactoringUtil.qNameToCreateInSourceRoot(aPackage,root);
    }
 catch (    IncorrectOperationException e) {
      continue sourceRoots;
    }
    PsiDirectory currentDirectory=aPackage.getManager().findDirectory(root);
    if (currentDirectory == null)     continue;
    final String[] shortNames=qNameToCreate.split("\\.");
    for (int j=0; j < shortNames.length; j++) {
      String shortName=shortNames[j];
      final PsiDirectory subdirectory=currentDirectory.findSubdirectory(shortName);
      if (subdirectory == null) {
        targetDirectories.add(currentDirectory);
        final StringBuffer postfix=new StringBuffer();
        for (int k=j; k < shortNames.length; k++) {
          String name=shortNames[k];
          postfix.append(File.separatorChar);
          postfix.append(name);
        }
        relativePathsToCreate.put(currentDirectory,postfix.toString());
        continue sourceRoots;
      }
 else {
        currentDirectory=subdirectory;
      }
    }
  }
}
