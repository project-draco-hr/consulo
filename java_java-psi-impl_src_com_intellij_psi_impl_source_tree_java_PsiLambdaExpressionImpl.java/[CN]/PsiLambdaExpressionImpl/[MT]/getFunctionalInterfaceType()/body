{
  PsiElement parent=getParent();
  while (parent instanceof PsiParenthesizedExpression) {
    parent=parent.getParent();
  }
  PsiType type=null;
  if (parent instanceof PsiTypeCastExpression) {
    type=((PsiTypeCastExpression)parent).getType();
  }
 else   if (parent instanceof PsiVariable) {
    type=((PsiVariable)parent).getType();
  }
 else   if (parent instanceof PsiAssignmentExpression) {
    final PsiExpression lExpression=((PsiAssignmentExpression)parent).getLExpression();
    type=lExpression.getType();
  }
 else   if (parent instanceof PsiExpressionList) {
    final PsiExpressionList expressionList=(PsiExpressionList)parent;
    int lambdaIdx=getLambdaIdx(expressionList);
    if (lambdaIdx > -1) {
      final PsiElement gParent=expressionList.getParent();
      if (gParent instanceof PsiMethodCallExpression) {
        final PsiMethodCallExpression contextCall=(PsiMethodCallExpression)gParent;
        final JavaResolveResult resolveResult=contextCall.resolveMethodGenerics();
        final PsiElement resolve=resolveResult.getElement();
        if (resolve instanceof PsiMethod) {
          final PsiParameter[] parameters=((PsiMethod)resolve).getParameterList().getParameters();
          if (lambdaIdx < parameters.length) {
            type=parameters[lambdaIdx].getType();
            final PsiType psiType=type;
            type=ourGuard.doPreventingRecursion(this,true,new Computable<PsiType>(){
              @Override public PsiType compute(){
                return resolveResult.getSubstitutor().substitute(psiType);
              }
            }
);
          }
        }
      }
    }
  }
 else   if (parent instanceof PsiReturnStatement) {
    final PsiMethod method=PsiTreeUtil.getParentOfType(parent,PsiMethod.class);
    if (method != null) {
      type=method.getReturnType();
    }
  }
 else   if (parent instanceof PsiLambdaExpression) {
    final PsiType parentInterfaceType=((PsiLambdaExpression)parent).getFunctionalInterfaceType();
    if (parentInterfaceType != null) {
      type=LambdaUtil.getFunctionalInterfaceReturnType(parentInterfaceType);
    }
  }
  return type;
}
