{
  Rectangle bounds=myUi.getBounds();
  ContentManager manager=myUi.myManager;
  LayoutData data=new LayoutData(myUi);
  data.eachX=2;
  data.eachY=0;
  myIdLabel.setBounds(data.eachX,data.eachY,myIdLabel.getPreferredSize().width,bounds.height);
  data.eachX+=myIdLabel.getPreferredSize().width;
  int tabsStart=data.eachX;
  if (manager.getContentCount() == 0)   return;
  Content selected=manager.getSelectedContent();
  if (selected == null) {
    selected=manager.getContents()[0];
  }
  if (myLastLayout != null && myLastLayout.layoutSize.equals(bounds.getSize()) && myLastLayout.contentCount == manager.getContentCount()) {
    for (    ContentTabLabel each : myTabs) {
      if (!each.isValid())       break;
      if (each.myContent == selected && each.getBounds().width != 0) {
        data=myLastLayout;
        data.fullLayout=false;
      }
    }
  }
  if (data.fullLayout) {
    for (    ContentTabLabel eachTab : myTabs) {
      final Dimension eachSize=eachTab.getPreferredSize();
      data.requiredWidth+=eachSize.width;
      data.requiredWidth++;
      data.toLayout.add(eachTab);
    }
    data.moreRectWidth=myMoreIcon.getIconWidth() + MORE_ICON_BORDER * TAB_ARC;
    data.toFitWidth=bounds.getSize().width - data.eachX;
    final ContentTabLabel selectedTab=myContent2Tabs.get(selected);
    while (true) {
      if (data.requiredWidth <= data.toFitWidth)       break;
      if (data.toLayout.size() <= 1)       break;
      if (data.toLayout.get(0) != selectedTab) {
        dropTab(data,data.toLayout.remove(0));
      }
 else       if (data.toLayout.get(data.toLayout.size() - 1) != selectedTab) {
        dropTab(data,data.toLayout.remove(data.toLayout.size() - 1));
      }
 else {
        break;
      }
    }
    boolean reachedBounds=false;
    data.moreRect=null;
    for (    ContentTabLabel each : data.toLayout) {
      data.eachY=0;
      final Dimension eachSize=each.getPreferredSize();
      if (data.eachX + eachSize.width < data.toFitWidth + tabsStart) {
        each.setBounds(data.eachX,data.eachY,eachSize.width,bounds.height - data.eachY);
        data.eachX+=eachSize.width;
      }
 else {
        if (!reachedBounds) {
          final int width=bounds.width - data.eachX - data.moreRectWidth;
          each.setBounds(data.eachX,data.eachY,width,bounds.height - data.eachY);
          data.eachX+=width;
        }
 else {
          each.setBounds(0,0,0,0);
        }
        reachedBounds=true;
      }
    }
    for (    ContentTabLabel each : data.toDrop) {
      each.setBounds(0,0,0,0);
    }
  }
  if (data.toDrop.size() > 0) {
    data.moreRect=new Rectangle(data.eachX + MORE_ICON_BORDER,0,myMoreIcon.getIconWidth(),bounds.height);
    final int selectedIndex=manager.getIndexOfContent(manager.getSelectedContent());
    if (selectedIndex == 0) {
      myMoreIcon.setPaintedIcons(false,true);
    }
 else     if (selectedIndex == manager.getContentCount() - 1) {
      myMoreIcon.setPaintedIcons(true,false);
    }
 else {
      myMoreIcon.setPaintedIcons(true,true);
    }
  }
 else {
    data.moreRect=null;
  }
  myLastLayout=data;
}
