{
  final ActionListener enabledListener=new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      myGetRefsButton.setEnabled(myIncludeBranchesCheckBox.isSelected() || myIncludeTagsCheckBox.isSelected());
    }
  }
;
  myIncludeBranchesCheckBox.addActionListener(enabledListener);
  myIncludeTagsCheckBox.addActionListener(enabledListener);
  myGetRefsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      GitSimpleHandler handler=new GitSimpleHandler(myProject,myRoot,GitCommand.LS_REMOTE);
      if (myIncludeBranchesCheckBox.isSelected()) {
        handler.addParameters("--heads");
        myBranches.clear();
      }
      if (myIncludeTagsCheckBox.isSelected()) {
        handler.addParameters("--tags");
        myTags.clear();
      }
      handler.addParameters(myRemote);
      String result=GitHandlerUtil.doSynchronously(handler,GitBundle.message("addrefspec.getting.references.title",myRemote),handler.printableCommandLine());
      if (result != null) {
        StringScanner s=new StringScanner(result);
        while (s.hasMoreData()) {
          s.tabToken();
          String ref=s.line();
          if (ref.startsWith(GitBranch.REFS_HEADS_PREFIX)) {
            myBranches.add(ref);
          }
 else           if (ref.startsWith(GitTag.REFS_TAGS_PREFIX)) {
            myTags.add(ref);
          }
 else {
            log.warn("Unknwon reference type from ls-remote \"" + myRemote + "\" :"+ ref);
          }
        }
      }
      updateTree();
    }
  }
);
}
