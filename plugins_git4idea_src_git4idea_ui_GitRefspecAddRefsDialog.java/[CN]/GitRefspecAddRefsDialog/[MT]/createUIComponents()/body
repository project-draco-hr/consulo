{
  myTreeRoot=new CheckedTreeNode("");
  myReferenceChooser=new CheckboxTree(new CheckboxTree.CheckboxTreeCellRenderer(){
    public void customizeCellRenderer(    final JTree tree,    final Object value,    final boolean selected,    final boolean expanded,    final boolean leaf,    final int row,    final boolean hasFocus){
      if (UIUtil.isUnderGTKLookAndFeel()) {
        final Color background=selected ? UIUtil.getTreeSelectionBackground() : UIUtil.getTreeTextBackground();
        setBackground(background);
      }
      final CheckedTreeNode node=(CheckedTreeNode)value;
      final Object userObject=node.getUserObject();
      String text;
      SimpleTextAttributes attributes;
      Icon icon;
      if (userObject == null) {
        text="INVISBLE ROOT";
        attributes=SimpleTextAttributes.ERROR_ATTRIBUTES;
        icon=null;
      }
 else       if (userObject instanceof String) {
        text=(String)userObject;
        attributes=SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES;
        icon=expanded ? Icons.DIRECTORY_OPEN_ICON : Icons.DIRECTORY_CLOSED_ICON;
      }
 else {
        text=((Reference)userObject).name;
        attributes=node.isChecked() ? SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES : SimpleTextAttributes.REGULAR_ATTRIBUTES;
        icon=null;
      }
      final ColoredTreeCellRenderer textRenderer=getTextRenderer();
      if (icon != null) {
        textRenderer.setIcon(icon);
      }
      if (text != null) {
        textRenderer.append(text,attributes);
      }
    }
  }
,myTreeRoot){
    @Override protected void onNodeStateChanged(    final CheckedTreeNode node){
      boolean flag=node.isChecked() || myReferenceChooser.getCheckedNodes(Reference.class,null).length != 0;
      setOKActionEnabled(flag);
      super.onNodeStateChanged(node);
    }
  }
;
}
