{
  UIUtil.invokeLaterIfNeeded(new Runnable(){
    @Override public void run(){
      LOG.debug("Loading " + loader.getName());
      ProgressManager.getInstance().run(new Task.Backgroundable(myProject,"Loading spellchecker dictionary...",false,new PerformInBackgroundOption(){
        @Override public boolean shouldStartInBackground(){
          return true;
        }
        @Override public void processSentToBackground(){
        }
      }
){
        @Override public void run(        @NotNull ProgressIndicator indicator){
          final CompressedDictionary dictionary=CompressedDictionary.create(loader,transform);
          if (dictionary != null) {
            LOG.debug(loader.getName() + " loaded!");
            consumer.consume(dictionary);
          }
          if (myDictionariesToLoad.isEmpty()) {
            LOG.debug("Loading finished, restarting daemon...");
            myLoadingDictionaries.set(false);
            final Project[] openProjects=ProjectManager.getInstance().getOpenProjects();
            for (            final Project project : openProjects) {
              if (project.isInitialized() && project.isOpen() && !project.isDefault()) {
                UIUtil.invokeLaterIfNeeded(new Runnable(){
                  @Override public void run(){
                    DaemonCodeAnalyzer.getInstance(project).restart();
                  }
                }
);
              }
            }
          }
 else {
            final Pair<Loader,Consumer<Dictionary>> nextDictionary=myDictionariesToLoad.remove(0);
            _doLoadDictionaryAsync(nextDictionary.getFirst(),nextDictionary.getSecond());
          }
        }
      }
);
    }
  }
);
}
