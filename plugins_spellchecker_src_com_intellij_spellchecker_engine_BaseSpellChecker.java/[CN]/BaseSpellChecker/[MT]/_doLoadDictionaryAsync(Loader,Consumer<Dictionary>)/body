{
  final Runnable runnable=new Runnable(){
    @Override public void run(){
      if (myProject.isDisposed())       return;
      LOG.debug("Loading " + loader.getName());
      ProgressManager.getInstance().run(new Task.Backgroundable(myProject,"Loading spellchecker dictionaries...",false,new PerformInBackgroundOption(){
        @Override public boolean shouldStartInBackground(){
          return true;
        }
        @Override public void processSentToBackground(){
        }
      }
){
        @Override public void run(        @NotNull ProgressIndicator indicator){
          indicator.setText(String.format("Loading %s...",loader.getName()));
          final CompressedDictionary dictionary=CompressedDictionary.create(loader,transform);
          if (dictionary != null) {
            LOG.debug(loader.getName() + " loaded!");
            consumer.consume(dictionary);
          }
          while (!myDictionariesToLoad.isEmpty()) {
            final Pair<Loader,Consumer<Dictionary>> nextDictionary=myDictionariesToLoad.remove(0);
            Loader nextDictionaryLoader=nextDictionary.getFirst();
            indicator.setText(String.format("Loading %s...",nextDictionaryLoader.getName()));
            CompressedDictionary dictionary1=CompressedDictionary.create(nextDictionaryLoader,transform);
            if (dictionary1 != null) {
              LOG.debug(nextDictionaryLoader.getName() + " loaded!");
              nextDictionary.getSecond().consume(dictionary1);
            }
          }
          LOG.debug("Loading finished, restarting daemon...");
          myLoadingDictionaries.set(false);
          final Project[] openProjects=ProjectManager.getInstance().getOpenProjects();
          for (          final Project project : openProjects) {
            if (project.isInitialized() && project.isOpen() && !project.isDefault()) {
              UIUtil.invokeLaterIfNeeded(new Runnable(){
                @Override public void run(){
                  if (project.isDisposed())                   return;
                  final DaemonCodeAnalyzer instance=DaemonCodeAnalyzer.getInstance(project);
                  if (instance != null)                   instance.restart();
                }
              }
);
            }
          }
        }
      }
);
    }
  }
;
  if (!myProject.isInitialized()) {
    StartupManager.getInstance(myProject).runWhenProjectIsInitialized(new Runnable(){
      @Override public void run(){
        UIUtil.invokeLaterIfNeeded(runnable);
      }
    }
);
  }
 else {
    UIUtil.invokeLaterIfNeeded(runnable);
  }
}
