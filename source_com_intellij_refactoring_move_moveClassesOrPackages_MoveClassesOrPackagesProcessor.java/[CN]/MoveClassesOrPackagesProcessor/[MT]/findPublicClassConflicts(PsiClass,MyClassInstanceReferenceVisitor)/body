{
  NonPublicClassMemberWrappersSet members=new NonPublicClassMemberWrappersSet();
  members.addElements(aClass.getFields());
  members.addElements(aClass.getMethods());
  members.addElements(aClass.getInnerClasses());
  final PsiSearchHelper searchHelper=aClass.getManager().getSearchHelper();
  RefactoringUtil.IsDescendantOf isDescendantOf=new RefactoringUtil.IsDescendantOf(aClass);
  final PsiPackage aPackage=aClass.getContainingFile().getContainingDirectory().getPackage();
  final GlobalSearchScope packageScope=GlobalSearchScope.packageScopeWithoutLibraries(aPackage,false);
  for (Iterator iterator=members.iterator(); iterator.hasNext(); ) {
    ClassMemberWrapper memberWrapper=(ClassMemberWrapper)iterator.next();
    final PsiReference[] references=searchHelper.findReferences(memberWrapper.getMember(),packageScope,false);
    for (int i=0; i < references.length; i++) {
      PsiReference reference=references[i];
      final PsiElement element=reference.getElement();
      if (element instanceof PsiReferenceExpression) {
        final PsiReferenceExpression expression=((PsiReferenceExpression)element);
        final PsiExpression qualifierExpression=expression.getQualifierExpression();
        if (qualifierExpression != null) {
          final PsiType type=qualifierExpression.getType();
          if (type != null) {
            final PsiClass resolvedTypeClass=PsiUtil.resolveClassInType(type);
            if (isDescendantOf.value(resolvedTypeClass)) {
              instanceReferenceVisitor.visitMemberReference(memberWrapper.getMember(),expression,isDescendantOf);
            }
          }
        }
 else {
          instanceReferenceVisitor.visitMemberReference(memberWrapper.getMember(),expression,isDescendantOf);
        }
      }
    }
  }
}
