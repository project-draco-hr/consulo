{
  myLeftPane=ScrollPaneFactory.createScrollPane();
  myLeftPane.putClientProperty(UIUtil.KEEP_BORDER_SIDES,SideBorder.TOP | SideBorder.RIGHT);
  myStatisticsComponent=createStatisticsPanel();
  myStatusLine=createStatusLine();
  JComponent testTreeView=createTestTreeView();
  myToolbarPanel=createToolbarPanel();
  Disposer.register(this,myToolbarPanel);
  final Splitter splitter=createSplitter(mySplitterProportionProperty,mySplitterDefaultProportion);
  Disposer.register(this,new Disposable(){
    public void dispose(){
      remove(splitter);
      splitter.dispose();
    }
  }
);
  add(splitter);
  final JPanel leftPanel=new JPanel(new BorderLayout());
  leftPanel.add(myLeftPane,BorderLayout.CENTER);
  leftPanel.add(myToolbarPanel,BorderLayout.NORTH);
  splitter.setFirstComponent(leftPanel);
  myStatusLine.setMinimumSize(new Dimension(0,myStatusLine.getMinimumSize().height));
  final JPanel rightPanel=new JPanel(new BorderLayout());
  rightPanel.add(SameHeightPanel.wrap(myStatusLine,myToolbarPanel),BorderLayout.NORTH);
  mySplitter=new Splitter();
  new AwtVisitor(myConsole){
    public boolean visit(    Component component){
      if (component instanceof JScrollPane) {
        ((JScrollPane)component).putClientProperty(UIUtil.KEEP_BORDER_SIDES,SideBorder.TOP | SideBorder.LEFT);
        return true;
      }
      return false;
    }
  }
;
  mySplitter.setFirstComponent(createOutputTab(myConsole,myConsoleActions));
  if (TestConsoleProperties.SHOW_STATISTICS.value(myProperties)) {
    mySplitter.setSecondComponent(myStatisticsComponent);
  }
  myProperties.addListener(TestConsoleProperties.SHOW_STATISTICS,new TestFrameworkPropertyListener<Boolean>(){
    public void onChanged(    Boolean value){
      if (value.booleanValue()) {
        mySplitter.setSecondComponent(myStatisticsComponent);
      }
 else {
        mySplitter.setSecondComponent(null);
      }
    }
  }
);
  rightPanel.add(mySplitter,BorderLayout.CENTER);
  splitter.setSecondComponent(rightPanel);
  setLeftComponent(testTreeView);
}
