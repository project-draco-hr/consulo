{
  final Document doc=editor.getDocument();
  Project project=(Project)dataContext.getData(DataConstants.PROJECT);
  if (project == null || doc.getLineCount() < 2) {
    plainEnter(editor,dataContext);
    return;
  }
  final int caretOffset=editor.getCaretModel().getOffset();
  if (isInPreceedingBlanks(editor)) {
    final int caretLine=doc.getLineNumber(caretOffset);
    if (caretLine > 0) {
      int prevLineEnd=doc.getLineEndOffset(caretLine - 1);
      editor.getCaretModel().moveToOffset(prevLineEnd);
    }
    EditorActionHandler enterHandler=EditorActionManager.getInstance().getActionHandler(IdeActions.ACTION_EDITOR_ENTER);
    enterHandler.execute(editor,dataContext);
    return;
  }
  PsiFile psiFile=PsiDocumentManager.getInstance(project).getPsiFile(doc);
  if (EnterHandler.isAfterUnmatchedLBrace(editor,caretOffset,psiFile.getFileType())) {
    EditorActionHandler enterHandler=EditorActionManager.getInstance().getActionHandler(IdeActions.ACTION_EDITOR_ENTER);
    enterHandler.execute(editor,dataContext);
    return;
  }
  if (!(psiFile instanceof PsiJavaFile)) {
    plainEnter(editor,dataContext);
    return;
  }
  FeatureUsageTracker.getInstance().triggerFeatureUsed("codeassists.complete.statement");
  new SmartEnterProcessor(project,editor,psiFile).process();
}
