{
  final Document doc=editor.getDocument();
  Project project=PlatformDataKeys.PROJECT.getData(dataContext);
  if (project == null || editor.isOneLineMode()) {
    plainEnter(editor,dataContext);
    return;
  }
  final int caretOffset=editor.getCaretModel().getOffset();
  if (isInPreceedingBlanks(editor)) {
    final int caretLine=doc.getLineNumber(caretOffset);
    if (caretLine > 0) {
      int prevLineEnd=doc.getLineEndOffset(caretLine - 1);
      editor.getCaretModel().moveToOffset(prevLineEnd);
    }
    EditorActionHandler enterHandler=EditorActionManager.getInstance().getActionHandler(IdeActions.ACTION_EDITOR_ENTER);
    enterHandler.execute(editor,dataContext);
    return;
  }
  PsiFile psiFile=PsiUtil.getPsiFileInEditor(editor,project);
  if (EnterAfterUnmatchedBraceHandler.isAfterUnmatchedLBrace(editor,caretOffset,psiFile.getFileType())) {
    EditorActionHandler enterHandler=EditorActionManager.getInstance().getActionHandler(IdeActions.ACTION_EDITOR_ENTER);
    enterHandler.execute(editor,dataContext);
    return;
  }
  if (!isEnabledForFile(psiFile)) {
    plainEnter(editor,dataContext);
    return;
  }
  FeatureUsageTracker.getInstance().triggerFeatureUsed("codeassists.complete.statement");
  final String textForRollback=doc.getText();
  try {
    new SmartEnterProcessor(project,editor,psiFile).process(0);
  }
 catch (  SmartEnterProcessor.TooManyAttemptsException e) {
    doc.replaceString(0,doc.getTextLength(),textForRollback);
  }
}
