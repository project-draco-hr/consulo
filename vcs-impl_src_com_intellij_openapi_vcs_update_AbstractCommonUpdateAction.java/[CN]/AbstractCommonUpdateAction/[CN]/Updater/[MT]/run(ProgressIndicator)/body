{
  ProjectManagerEx.getInstanceEx().blockReloadingProjectOnExternalChanges();
  myProjectLevelVcsManager.startBackgroundVcsOperation();
  ProgressIndicator progressIndicator=ProgressManager.getInstance().getProgressIndicator();
  int toBeProcessed=myVcsToVirtualFiles.size();
  int processed=0;
  for (  AbstractVcs vcs : myVcsToVirtualFiles.keySet()) {
    final UpdateEnvironment updateEnvironment=myActionInfo.getEnvironment(vcs);
    updateEnvironment.fillGroups(myUpdatedFiles);
    Collection<FilePath> files=myVcsToVirtualFiles.get(vcs);
    final SequentialUpdatesContext context=myContextInfo.get(vcs.getName());
    final Ref<SequentialUpdatesContext> refContext=new Ref<SequentialUpdatesContext>(context);
    UpdateSession updateSession=updateEnvironment.updateDirectories(files.toArray(new FilePath[files.size()]),myUpdatedFiles,progressIndicator,refContext);
    myContextInfo.put(vcs.getName(),refContext.get());
    processed++;
    if (progressIndicator != null) {
      progressIndicator.setFraction((double)processed / (double)toBeProcessed);
    }
    myVcsExceptions.addAll(updateSession.getExceptions());
    myUpdateSessions.add(updateSession);
  }
  if (progressIndicator != null) {
    progressIndicator.setText(VcsBundle.message("progress.text.synchronizing.files"));
    progressIndicator.setText2("");
  }
  final LocalHistoryAction action=LocalHistory.startAction(myProject,VcsBundle.message("local.history.update.from.vcs"));
  try {
    final Semaphore semaphore=new Semaphore();
    semaphore.down();
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      public void run(){
        VcsUtil.refreshFiles(myRoots,new Runnable(){
          public void run(){
            semaphore.up();
          }
        }
);
      }
    }
);
    semaphore.waitFor();
  }
  finally {
    action.finish();
  }
}
