{
  super(myProject,myValueClass,myTreeTableTitle,VirtualFileFilter.ALL,true);
  getValueColumn().setCellEditor(new DefaultCellEditor(new JComboBox()){
    private VirtualFile myVirtualFile;
{
      delegate=new EditorDelegate(){
        @Override public void setValue(        Object value){
          getTableModel().setValueAt(value,new DefaultMutableTreeNode(myVirtualFile),-1);
        }
        @Override public Object getCellEditorValue(){
          return getTableModel().getValueAt(new DefaultMutableTreeNode(myVirtualFile),1);
        }
      }
;
    }
    @Override public Component getTableCellEditorComponent(    JTable table,    final Object value,    boolean isSelected,    int row,    int column){
      final Object o=table.getModel().getValueAt(row,0);
      myVirtualFile=o instanceof Project ? null : (VirtualFile)o;
      final ChooseSomethingAction changeAction=new ChooseSomethingAction(myVirtualFile){
        @RequiredDispatchThread @Override public void update(        @NotNull final AnActionEvent e){
          boolean enabled=isValueEditableForFile(myVirtualFile);
          if (myVirtualFile != null) {
            final T mapping=myMappings.getMapping(myVirtualFile);
            e.getPresentation().setText(mapping == null ? "" : visualize(mapping));
          }
          e.getPresentation().setEnabled(enabled);
        }
        @Override protected void chosen(        final VirtualFile virtualFile,        final T charset){
          getValueColumn().getCellEditor().stopCellEditing();
          if (clearSubdirectoriesOnDemandOrCancel(virtualFile,myOverrideQuestion,myOverrideTitle)) {
            getTableModel().setValueAt(myMappings.chosenToStored(virtualFile,charset),new DefaultMutableTreeNode(virtualFile),1);
          }
        }
      }
;
      Presentation templatePresentation=changeAction.getTemplatePresentation();
      final JComponent comboComponent=changeAction.createCustomComponent(templatePresentation);
      DataContext dataContext=SimpleDataContext.getSimpleContext(PlatformDataKeys.VIRTUAL_FILE.getName(),myVirtualFile,SimpleDataContext.getProjectContext(getProject()));
      AnActionEvent event=new AnActionEvent(null,dataContext,ActionPlaces.UNKNOWN,templatePresentation,ActionManager.getInstance(),0);
      changeAction.update(event);
      editorComponent=comboComponent;
      comboComponent.addComponentListener(new ComponentAdapter(){
        @Override public void componentShown(        final ComponentEvent e){
          press((Container)e.getComponent());
        }
      }
);
      final T t=(T)getTableModel().getValueAt(new DefaultMutableTreeNode(myVirtualFile),1);
      templatePresentation.setText(t == null ? "" : visualize(t));
      comboComponent.revalidate();
      return editorComponent;
    }
  }
);
  getValueColumn().setCellRenderer(new ColoredTableCellRenderer(){
    @Override protected void customizeCellRenderer(    final JTable table,    final Object value,    final boolean selected,    final boolean hasFocus,    final int row,    final int column){
      final T t=(T)value;
      if (t != null) {
        append(visualize(t),SimpleTextAttributes.REGULAR_ATTRIBUTES);
      }
 else {
        final Object userObject=table.getModel().getValueAt(row,0);
        final VirtualFile file=userObject instanceof VirtualFile ? (VirtualFile)userObject : null;
        if (file != null) {
          if (handleDefaultValue(file,this)) {
            return;
          }
          if (!isValueEditableForFile(file)) {
            append("N/A",SimpleTextAttributes.GRAYED_ATTRIBUTES);
          }
        }
      }
    }
  }
);
}
