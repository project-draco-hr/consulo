{
  final File workingDir;
  try {
    workingDir=FileUtil.createTempDirectory("archetype","tmp");
    workingDir.deleteOnExit();
  }
 catch (  IOException e) {
    MavenLog.LOG.warn("Cannot generate archetype",e);
    return;
  }
  MavenRunnerParameters params=new MavenRunnerParameters(false,workingDir.getPath(),Collections.singletonList("org.apache.maven.plugins:maven-archetype-plugin:generate"),null);
  MavenRunner runner=MavenRunner.getInstance(project);
  MavenRunnerSettings settings=runner.getState().clone();
  Map<String,String> props=settings.getMavenProperties();
  props.put("interactiveMode","false");
  props.put("archetypeGroupId",myArchetype.groupId);
  props.put("archetypeArtifactId",myArchetype.artifactId);
  props.put("archetypeVersion",myArchetype.version);
  if (myArchetype.repository != null)   props.put("archetypeRepository",myArchetype.repository);
  props.put("groupId",myProjectId.getGroupId());
  props.put("artifactId",myProjectId.getArtifactId());
  props.put("version",myProjectId.getVersion());
  runner.run(params,settings,new Runnable(){
    public void run(){
      try {
        FileUtil.copyDir(new File(workingDir,myProjectId.getArtifactId()),new File(myContentRootPath));
      }
 catch (      IOException e) {
        MavenLog.LOG.warn("Cannot generate archetype",e);
        return;
      }
      FileUtil.delete(workingDir);
      pom.refresh(false,false);
      updateProjectPom(project,pom);
      LocalFileSystem.getInstance().refreshWithoutFileWatcher(true);
    }
  }
);
}
