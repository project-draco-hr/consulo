{
  final File workingDir=MavenUtil.getPluginSystemDir("Archetypes/" + project.getLocationHash());
  workingDir.mkdirs();
  MavenRunnerParameters params=new MavenRunnerParameters(false,workingDir.getPath(),Collections.singletonList("org.apache.maven.plugins:maven-archetype-plugin:create"),null);
  MavenRunner runner=MavenRunner.getInstance(project);
  MavenRunnerSettings settings=runner.getState().clone();
  Map<String,String> props=settings.getMavenProperties();
  props.put("archetypeGroupId",myArchetype.groupId);
  props.put("archetypeArtifactId",myArchetype.artifactId);
  props.put("archetypeVersion",myArchetype.version);
  if (myArchetype.repository != null)   props.put("archetypeRepository",myArchetype.repository);
  props.put("groupId",myProjectId.groupId);
  props.put("artifactId",myProjectId.artifactId);
  props.put("version",myProjectId.version);
  runner.run(params,settings,new Runnable(){
    public void run(){
      try {
        FileUtil.copyDir(new File(workingDir,myProjectId.artifactId),new File(myContentRootPath));
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
      pom.refresh(false,false);
      updateProjectPom(project,pom);
      LocalFileSystem.getInstance().refreshWithoutFileWatcher(true);
      MavenUtil.invokeLater(project,new Runnable(){
        public void run(){
          reimportMavenProjects(project);
        }
      }
);
    }
  }
);
}
