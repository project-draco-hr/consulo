{
  final VirtualFile[] pom=new VirtualFile[1];
  PsiFile[] psiFiles=myAggregatorProject != null ? new PsiFile[]{getPsiFile(project,myAggregatorProject.getFile())} : PsiFile.EMPTY_ARRAY;
  new WriteCommandAction.Simple(project,"Create new Maven module",psiFiles){
    protected void run() throws Throwable {
      try {
        pom[0]=root.createChildData(this,MavenConstants.POM_XML);
        MavenUtil.applyMavenProjectFileTemplate(project,pom[0],myProjectId);
      }
 catch (      IOException e) {
        NotificationsManager.getNotificationsManager().notify("Cannot create ",e.getMessage(),NotificationType.ERROR,NotificationListener.REMOVE);
        return;
      }
      updateProjectPom(project,pom[0]);
      if (myAggregatorProject != null) {
        MavenDomProjectModel model=MavenDomUtil.getMavenDomProjectModel(project,myAggregatorProject.getFile());
        model.getPackaging().setStringValue("pom");
        MavenDomModule module=model.getModules().addModule();
        module.setValue(getPsiFile(project,pom[0]));
      }
    }
  }
.execute();
  if (myAggregatorProject == null) {
    MavenProjectsManager manager=MavenProjectsManager.getInstance(project);
    manager.addManagedFiles(Collections.singletonList(pom[0]));
  }
  if (myArchetype == null) {
    try {
      VfsUtil.createDirectories(root.getPath() + "/src/main/java");
      VfsUtil.createDirectories(root.getPath() + "/src/test/java");
    }
 catch (    IOException e) {
      MavenLog.LOG.info(e);
    }
  }
  MavenUtil.invokeLater(project,ModalityState.NON_MODAL,new Runnable(){
    public void run(){
      EditorHelper.openInEditor(getPsiFile(project,pom[0]));
      if (myArchetype != null)       generateFromArchetype(project,pom[0]);
    }
  }
);
}
