{
  final VirtualFile root=createAndGetContentEntry();
  rootModel.addContentEntry(root);
  final VirtualFile pom;
  try {
    pom=root.createChildData(this,MavenConstants.POM_XML);
    VfsUtil.saveText(pom,MavenUtil.makeFileContent(myProjectId));
  }
 catch (  IOException e) {
    throw new ConfigurationException(e.getMessage());
  }
  final Project project=rootModel.getProject();
  if (myAggregatorProject != null) {
    new WriteCommandAction.Simple(project,"Create new Maven module",getPsiFile(project,myAggregatorProject.getFile())){
      protected void run() throws Throwable {
        MavenDomProjectModel model=MavenUtil.getMavenModel(project,myAggregatorProject.getFile());
        model.getPackaging().setStringValue("pom");
        MavenDomModule module=model.getModules().addModule();
        module.setValue(getPsiFile(project,pom));
      }
    }
.execute();
  }
  updateProjectPom(project,pom);
  MavenUtil.runWhenInitialized(project,new DumbAwareRunnable(){
    public void run(){
      MavenProjectsManager manager=MavenProjectsManager.getInstance(project);
      manager.addManagedFiles(Collections.singletonList(pom));
      if (myArchetype == null) {
        try {
          VfsUtil.createDirectories(root.getPath() + "/src/main/java");
          VfsUtil.createDirectories(root.getPath() + "/src/test/java");
        }
 catch (        IOException e) {
          MavenLog.LOG.info(e);
        }
      }
      MavenUtil.invokeInDispatchThread(project,ModalityState.NON_MODAL,new Runnable(){
        public void run(){
          EditorHelper.openInEditor(getPsiFile(project,pom));
          if (myArchetype != null)           generateFromArchetype(project,pom);
        }
      }
);
    }
  }
);
}
