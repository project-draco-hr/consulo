{
  if (myFile == null || myProject.isDisposed() || !myDaemonCodeAnalyzer.isHighlightingAvailable(myFile))   return null;
  List<String> noInspectionRoots=new ArrayList<String>();
  List<String> noHighlightingRoots=new ArrayList<String>();
  final PsiFile[] roots=myFile.getPsiRoots();
  for (  PsiFile file : roots) {
    if (!HighlightLevelUtil.shouldHighlight(file)) {
      noHighlightingRoots.add(file.getLanguage().getID());
    }
 else     if (!HighlightLevelUtil.shouldInspect(file)) {
      noInspectionRoots.add(file.getLanguage().getID());
    }
  }
  DaemonCodeAnalyzerStatus status=new DaemonCodeAnalyzerStatus();
  status.noInspectionRoots=noInspectionRoots.isEmpty() ? null : ArrayUtil.toStringArray(noInspectionRoots);
  status.noHighlightingRoots=noHighlightingRoots.isEmpty() ? null : ArrayUtil.toStringArray(noHighlightingRoots);
  status.errorCount=errorCount.clone();
  status.rootsNumber=roots.length;
  fillDaemonCodeAnalyzerErrorsStatus(status,fillErrorsCount,severityRegistrar);
  List<TextEditorHighlightingPass> passes=myDaemonCodeAnalyzer.getPassesToShowProgressFor(myDocument);
  status.passStati=passes.isEmpty() ? Collections.<ProgressableTextEditorHighlightingPass>emptyList() : new ArrayList<ProgressableTextEditorHighlightingPass>(passes.size());
  for (int i=0; i < passes.size(); i++) {
    TextEditorHighlightingPass tepass=passes.get(i);
    if (!(tepass instanceof ProgressableTextEditorHighlightingPass))     continue;
    ProgressableTextEditorHighlightingPass pass=(ProgressableTextEditorHighlightingPass)tepass;
    if (pass.getProgress() < 0)     continue;
    status.passStati.add(pass);
  }
  status.errorAnalyzingFinished=myDaemonCodeAnalyzer.isAllAnalysisFinished(myFile);
  status.enabled=myDaemonCodeAnalyzer.isUpdateByTimerEnabled();
  return status;
}
