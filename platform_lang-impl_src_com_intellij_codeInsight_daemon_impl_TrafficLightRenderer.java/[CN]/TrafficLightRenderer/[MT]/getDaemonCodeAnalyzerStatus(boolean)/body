{
  if (myFile == null || myProject.isDisposed() || !myDaemonCodeAnalyzer.isHighlightingAvailable(myFile))   return null;
  ArrayList<String> noInspectionRoots=new ArrayList<String>();
  ArrayList<String> noHighlightingRoots=new ArrayList<String>();
  final PsiFile[] roots=myFile.getPsiRoots();
  for (  PsiFile file : roots) {
    if (!HighlightLevelUtil.shouldHighlight(file)) {
      noHighlightingRoots.add(file.getLanguage().getID());
    }
 else     if (!HighlightLevelUtil.shouldInspect(file)) {
      noInspectionRoots.add(file.getLanguage().getID());
    }
  }
  DaemonCodeAnalyzerStatus status=new DaemonCodeAnalyzerStatus();
  status.noInspectionRoots=noInspectionRoots.isEmpty() ? null : ArrayUtil.toStringArray(noInspectionRoots);
  status.noHighlightingRoots=noHighlightingRoots.isEmpty() ? null : ArrayUtil.toStringArray(noHighlightingRoots);
  final SeverityRegistrar severityRegistrar=SeverityRegistrar.getInstance(myProject);
  status.errorCount=new int[severityRegistrar.getSeveritiesCount()];
  status.rootsNumber=roots.length;
  fillDaemonCodeAnalyzerErrorsStatus(status,fillErrorsCount);
  List<TextEditorHighlightingPass> passes=myDaemonCodeAnalyzer.getPassesToShowProgressFor(myFile);
  ArrayList<DaemonCodeAnalyzerStatus.PassStatus> passStati=new ArrayList<DaemonCodeAnalyzerStatus.PassStatus>();
  for (  TextEditorHighlightingPass tepass : passes) {
    if (!(tepass instanceof ProgressableTextEditorHighlightingPass))     continue;
    ProgressableTextEditorHighlightingPass pass=(ProgressableTextEditorHighlightingPass)tepass;
    double progress=pass.getProgress();
    if (progress < 0)     continue;
    DaemonCodeAnalyzerStatus.PassStatus passStatus=new DaemonCodeAnalyzerStatus.PassStatus(pass.getPresentableName(),progress,pass.isFinished(),pass.getInProgressIcon());
    passStati.add(passStatus);
  }
  status.passStati=passStati;
  status.errorAnalyzingFinished=myDaemonCodeAnalyzer.isAllAnalysisFinished(myFile);
  return status;
}
