{
  progressBarsEnabled=false;
  progressBarsCompleted=null;
  statistics="";
  passStatusesVisible=false;
  statusLabel=null;
  statusExtraLine=null;
  boolean result=false;
  if (!status.passStati.equals(new ArrayList<ProgressableTextEditorHighlightingPass>(passes.keySet()))) {
    rebuildPassesMap(status);
    result=true;
  }
  if (PowerSaveMode.isEnabled()) {
    statusLabel="Code analysis is disabled in power save mode";
    status.errorAnalyzingFinished=true;
    icon=AllIcons.General.SafeMode;
    return result;
  }
  if (status.reasonWhyDisabled != null) {
    statusLabel="No analysis has been performed";
    statusExtraLine="(" + status.reasonWhyDisabled + ")";
    passStatusesVisible=true;
    progressBarsCompleted=Boolean.FALSE;
    icon=AllIcons.General.InspectionsTrafficOff;
    return result;
  }
  if (status.reasonWhySuspended != null) {
    statusLabel="Code analysis has been suspended";
    statusExtraLine="(" + status.reasonWhySuspended + ")";
    passStatusesVisible=true;
    progressBarsCompleted=Boolean.FALSE;
    icon=AllIcons.General.InspectionsPause;
    return result;
  }
  Icon icon=AllIcons.General.InspectionsOK;
  for (int i=status.errorCount.length - 1; i >= 0; i--) {
    if (status.errorCount[i] != 0) {
      icon=SeverityRegistrar.getSeverityRegistrar(project).getRendererIconByIndex(i);
      break;
    }
  }
  if (status.errorAnalyzingFinished) {
    boolean isDumb=project != null && DumbService.isDumb(project);
    if (isDumb) {
      statusLabel="Shallow analysis completed";
      statusExtraLine="Complete results will be available after indexing";
    }
 else {
      statusLabel=DaemonBundle.message("analysis.completed");
    }
    progressBarsCompleted=Boolean.TRUE;
  }
 else {
    statusLabel=DaemonBundle.message("performing.code.analysis");
    passStatusesVisible=true;
    progressBarsEnabled=true;
    progressBarsCompleted=null;
  }
  int currentSeverityErrors=0;
  @org.intellij.lang.annotations.Language("HTML") String text="";
  for (int i=status.errorCount.length - 1; i >= 0; i--) {
    if (status.errorCount[i] > 0) {
      final HighlightSeverity severity=SeverityRegistrar.getSeverityRegistrar(project).getSeverityByIndex(i);
      String name=status.errorCount[i] > 1 ? StringUtil.pluralize(severity.getName().toLowerCase()) : severity.getName().toLowerCase();
      text+=status.errorAnalyzingFinished ? DaemonBundle.message("errors.found",status.errorCount[i],name) : DaemonBundle.message("errors.found.so.far",status.errorCount[i],name);
      text+="<br>";
      currentSeverityErrors+=status.errorCount[i];
    }
  }
  if (currentSeverityErrors == 0) {
    text+=status.errorAnalyzingFinished ? DaemonBundle.message("no.errors.or.warnings.found") : DaemonBundle.message("no.errors.or.warnings.found.so.far") + "<br>";
  }
  statistics=XmlStringUtil.wrapInHtml(text);
  this.icon=icon;
  return result;
}
