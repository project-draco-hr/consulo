{
  if (!element.isValid())   return null;
  Project project=element.getProject();
  final ProjectFileIndex fileIndex=ProjectRootManager.getInstance(project).getFileIndex();
  if (element instanceof PsiPackage) {
    final PsiDirectory[] directories=((PsiPackage)element).getDirectories();
    for (    PsiDirectory directory : directories) {
      final Module module=fileIndex.getModuleForFile(directory.getVirtualFile());
      if (module != null) {
        return module;
      }
    }
    return null;
  }
  if (element instanceof PsiDirectory) {
    final VirtualFile vFile=((PsiDirectory)element).getVirtualFile();
    if (fileIndex.isInLibrarySource(vFile) || fileIndex.isInLibraryClasses(vFile)) {
      final OrderEntry[] orderEntries=fileIndex.getOrderEntriesForFile(vFile);
      if (orderEntries.length == 0) {
        return null;
      }
      Set<Module> modules=new HashSet<Module>();
      for (      OrderEntry orderEntry : orderEntries) {
        modules.add(orderEntry.getOwnerModule());
      }
      final Module[] candidates=modules.toArray(new Module[modules.size()]);
      Arrays.sort(candidates,ModuleManager.getInstance(project).moduleDependencyComparator());
      return candidates[0];
    }
    return fileIndex.getModuleForFile(vFile);
  }
  final PsiFile containingFile=element.getContainingFile();
  if (containingFile != null) {
    VirtualFile virtualFile=containingFile.getVirtualFile();
    if (virtualFile == null) {
      PsiFile originalFile=containingFile.getOriginalFile();
      if (originalFile != null) {
        virtualFile=originalFile.getVirtualFile();
      }
    }
    if (virtualFile != null) {
      return fileIndex.getModuleForFile(virtualFile);
    }
  }
  return null;
}
