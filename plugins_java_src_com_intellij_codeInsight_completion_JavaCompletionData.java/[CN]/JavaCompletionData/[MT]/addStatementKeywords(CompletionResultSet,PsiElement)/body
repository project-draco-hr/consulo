{
  variant.addElement(new OverrideableSpace(createKeyword(position,PsiKeyword.SWITCH),TailTypes.SWITCH_LPARENTH));
  variant.addElement(new OverrideableSpace(createKeyword(position,PsiKeyword.WHILE),TailTypes.WHILE_LPARENTH));
  variant.addElement(new OverrideableSpace(createKeyword(position,PsiKeyword.DO),TailTypes.DO_LBRACE));
  variant.addElement(new OverrideableSpace(createKeyword(position,PsiKeyword.FOR),TailTypes.FOR_LPARENTH));
  variant.addElement(new OverrideableSpace(createKeyword(position,PsiKeyword.IF),TailTypes.IF_LPARENTH));
  variant.addElement(new OverrideableSpace(createKeyword(position,PsiKeyword.TRY),TailTypes.TRY_LBRACE));
  variant.addElement(new OverrideableSpace(createKeyword(position,PsiKeyword.THROW),TailType.INSERT_SPACE));
  variant.addElement(new OverrideableSpace(createKeyword(position,PsiKeyword.NEW),TailType.INSERT_SPACE));
  variant.addElement(new OverrideableSpace(createKeyword(position,PsiKeyword.SYNCHRONIZED),TailTypes.SYNCHRONIZED_LPARENTH));
  if (PsiUtil.getLanguageLevel(position).isAtLeast(LanguageLevel.JDK_1_4)) {
    variant.addElement(new OverrideableSpace(createKeyword(position,PsiKeyword.ASSERT),TailType.INSERT_SPACE));
  }
  TailType returnTail=getReturnTail(position);
  LookupElement ret=createKeyword(position,PsiKeyword.RETURN);
  if (returnTail != TailType.NONE) {
    ret=new OverrideableSpace(ret,returnTail);
  }
  variant.addElement(ret);
}
