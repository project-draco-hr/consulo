{
  super(new BorderLayout());
  final ThreadState[] data=threadDump.toArray(new ThreadState[threadDump.size()]);
  DefaultListModel model=new DefaultListModel();
  for (  ThreadState threadState : data) {
    model.addElement(threadState);
  }
  myThreadList=new JBList(model);
  myThreadList.setCellRenderer(new ThreadListCellRenderer());
  myThreadList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myThreadList.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    final ListSelectionEvent e){
      int index=myThreadList.getSelectedIndex();
      if (index >= 0) {
        ThreadState selection=(ThreadState)myThreadList.getModel().getElementAt(index);
        AnalyzeStacktraceUtil.printStacktrace(consoleView,selection.getStackTrace());
      }
 else {
        AnalyzeStacktraceUtil.printStacktrace(consoleView,"");
      }
      myThreadList.repaint();
    }
  }
);
  toolbarActions.add(new CopyToClipboardAction(threadDump,project));
  toolbarActions.add(new SortThreadsAction());
  add(ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,toolbarActions,false).getComponent(),BorderLayout.WEST);
  final Splitter splitter=new Splitter(false,0.3f);
  splitter.setFirstComponent(ScrollPaneFactory.createScrollPane(myThreadList));
  splitter.setSecondComponent(consoleView.getComponent());
  add(splitter,BorderLayout.CENTER);
}
