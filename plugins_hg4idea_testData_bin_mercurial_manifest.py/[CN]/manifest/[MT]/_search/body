def _search(self, m, s, lo=0, hi=None):
    'return a tuple (start, end) that says where to find s within m.\n\n        If the string is found m[start:end] are the line containing\n        that string.  If start == end the string was not found and\n        they indicate the proper sorted insertion point.  This was\n        taken from bisect_left, and modified to find line start/end as\n        it goes along.\n\n        m should be a buffer or a string\n        s is a string'

    def advance(i, c):
        while ((i < lenm) and (m[i] != c)):
            i += 1
        return i
    if (not s):
        return (lo, lo)
    lenm = len(m)
    if (not hi):
        hi = lenm
    while (lo < hi):
        mid = ((lo + hi) // 2)
        start = mid
        while ((start > 0) and (m[(start - 1)] != '\n')):
            start -= 1
        end = advance(start, '\x00')
        if (m[start:end] < s):
            lo = (advance((end + 40), '\n') + 1)
        else:
            hi = start
    end = advance(lo, '\x00')
    found = m[lo:end]
    if (cmp(s, found) == 0):
        end = advance((end + 40), '\n')
        return (lo, (end + 1))
    else:
        return (lo, lo)
