def add(self, map, transaction, link, p1=None, p2=None, changed=None):

    def addlistdelta(addlist, x):
        for (start, end, content) in reversed(x):
            if content:
                addlist[start:end] = array.array('c', content)
            else:
                del addlist[start:end]
        return ''.join(((struct.pack('>lll', start, end, len(content)) + content) for (start, end, content) in x))

    def checkforbidden(l):
        for f in l:
            if (('\n' in f) or ('\r' in f)):
                raise error.RevlogError((_("'\\n' and '\\r' disallowed in filenames: %r") % f))
    if (not (changed and self._mancache and p1 and (self._mancache[0] == p1))):
        files = sorted(map)
        checkforbidden(files)
        (hex, flags) = (revlog.hex, map.flags)
        text = ''.join((('%s\x00%s%s\n' % (f, hex(map[f]), flags(f))) for f in files))
        arraytext = array.array('c', text)
        cachedelta = None
    else:
        (added, removed) = changed
        addlist = self._mancache[2]
        checkforbidden(added)
        work = [(x, False) for x in added]
        work.extend(((x, True) for x in removed))
        work.sort()
        delta = []
        dstart = None
        dend = None
        dline = ['']
        start = 0
        addbuf = buffer(addlist)
        for (f, todelete) in work:
            (start, end) = self._search(addbuf, f, start)
            if (not todelete):
                l = ('%s\x00%s%s\n' % (f, revlog.hex(map[f]), map.flags(f)))
            else:
                if (start == end):
                    raise AssertionError((_('failed to remove %s from manifest') % f))
                l = ''
            if ((dstart != None) and (dstart <= start) and (dend >= start)):
                if (dend < end):
                    dend = end
                if l:
                    dline.append(l)
            else:
                if (dstart != None):
                    delta.append([dstart, dend, ''.join(dline)])
                dstart = start
                dend = end
                dline = [l]
        if (dstart != None):
            delta.append([dstart, dend, ''.join(dline)])
        cachedelta = addlistdelta(addlist, delta)
        if (p1 != self.tip()):
            cachedelta = None
        arraytext = addlist
        text = buffer(arraytext)
    n = self.addrevision(text, transaction, link, p1, p2, cachedelta)
    self._mancache = (n, map, arraytext)
    return n
