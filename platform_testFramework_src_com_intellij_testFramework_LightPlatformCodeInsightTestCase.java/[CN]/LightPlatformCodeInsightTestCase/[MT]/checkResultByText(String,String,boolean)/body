{
  bringRealEditorBack();
  PsiDocumentManager.getInstance(getProject()).commitAllDocuments();
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      final Document document=EditorFactory.getInstance().createDocument(fileText);
      int caretIndex=fileText.indexOf(CARET_MARKER);
      int selStartIndex=fileText.indexOf(SELECTION_START_MARKER);
      int selEndIndex=fileText.indexOf(SELECTION_END_MARKER);
      final RangeMarker caretMarker=caretIndex >= 0 ? document.createRangeMarker(caretIndex,caretIndex) : null;
      final RangeMarker selStartMarker=selStartIndex >= 0 ? document.createRangeMarker(selStartIndex,selStartIndex) : null;
      final RangeMarker selEndMarker=selEndIndex >= 0 ? document.createRangeMarker(selEndIndex,selEndIndex) : null;
      if (ignoreTrailingSpaces) {
        ((DocumentImpl)document).stripTrailingSpaces();
      }
      if (caretMarker != null) {
        document.deleteString(caretMarker.getStartOffset(),caretMarker.getStartOffset() + CARET_MARKER.length());
      }
      if (selStartMarker != null) {
        document.deleteString(selStartMarker.getStartOffset(),selStartMarker.getStartOffset() + SELECTION_START_MARKER.length());
      }
      if (selEndMarker != null) {
        document.deleteString(selEndMarker.getStartOffset(),selEndMarker.getStartOffset() + SELECTION_END_MARKER.length());
      }
      PostprocessReformattingAspect.getInstance(getProject()).doPostponedFormatting();
      String newFileText=document.getText();
      PsiDocumentManager.getInstance(getProject()).commitAllDocuments();
      assertEquals(getMessage("Text mismatch",message),newFileText,myFile.getText());
      checkCaretPosition(caretMarker,newFileText,message);
      checkSelection(selStartMarker,selEndMarker,newFileText,message);
    }
  }
);
}
