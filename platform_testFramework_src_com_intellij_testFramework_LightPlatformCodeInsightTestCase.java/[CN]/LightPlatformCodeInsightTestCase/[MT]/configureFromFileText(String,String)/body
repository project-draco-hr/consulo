{
  return ApplicationManager.getApplication().runWriteAction(new Computable<Document>(){
    @Override public Document compute(){
      if (myVFile != null) {
        PsiDocumentManager.getInstance(ourProject).commitAllDocuments();
        FileEditorManager.getInstance(ourProject).closeFile(myVFile);
        try {
          myVFile.delete(this);
        }
 catch (        IOException e) {
          LOG.error(e);
        }
        myVFile=null;
      }
      final Document fakeDocument=new DocumentImpl(fileText);
      int caretIndex=fileText.indexOf(CARET_MARKER);
      int selStartIndex=fileText.indexOf(SELECTION_START_MARKER);
      int selEndIndex=fileText.indexOf(SELECTION_END_MARKER);
      final RangeMarker caretMarker=caretIndex >= 0 ? fakeDocument.createRangeMarker(caretIndex,caretIndex) : null;
      final RangeMarker selStartMarker=selStartIndex >= 0 ? fakeDocument.createRangeMarker(selStartIndex,selStartIndex) : null;
      final RangeMarker selEndMarker=selEndIndex >= 0 ? fakeDocument.createRangeMarker(selEndIndex,selEndIndex) : null;
      if (caretMarker != null) {
        fakeDocument.deleteString(caretMarker.getStartOffset(),caretMarker.getStartOffset() + CARET_MARKER.length());
      }
      if (selStartMarker != null) {
        fakeDocument.deleteString(selStartMarker.getStartOffset(),selStartMarker.getStartOffset() + SELECTION_START_MARKER.length());
      }
      if (selEndMarker != null) {
        fakeDocument.deleteString(selEndMarker.getStartOffset(),selEndMarker.getStartOffset() + SELECTION_END_MARKER.length());
      }
      String newFileText=fakeDocument.getText();
      Document document;
      try {
        document=setupFileEditorAndDocument(fileName,newFileText);
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
      setupCaret(caretMarker,newFileText);
      setupSelection(selStartMarker,selEndMarker);
      setupEditorForInjectedLanguage();
      return document;
    }
  }
);
}
