{
  final PsiElement element=descriptor.getPsiElement();
  if (!(element instanceof XmlFile)) {
    return;
  }
  final XmlFile xmlFile=(XmlFile)element;
  final PsiDirectory directory=xmlFile.getContainingDirectory();
  if (directory == null) {
    return;
  }
  final PsiFile file=directory.findFile("package-info.java");
  if (file != null) {
    return;
  }
  new WriteCommandAction.Simple(project,InspectionGadgetsBundle.message("package.dot.html.convert.command"),file){
    @Override protected void run() throws Throwable {
      final PsiJavaFile file=(PsiJavaFile)directory.createFile("package-info.java");
      CommandProcessor.getInstance().addAffectedFiles(project,file.getVirtualFile());
      final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(project);
      final String packageInfoText=getPackageInfoText(xmlFile);
      final String[] lines=StringUtil.splitByLines(packageInfoText);
      final StringBuilder commentText=new StringBuilder("/**\n");
      boolean appended=false;
      for (      String line : lines) {
        if (!appended && line.length() == 0) {
          continue;
        }
        commentText.append(" * ").append(line).append('\n');
        appended=true;
      }
      commentText.append("*/");
      final PsiDocComment comment=elementFactory.createDocCommentFromText(commentText.toString());
      final PsiPackageStatement packageStatement=elementFactory.createPackageStatement(aPackage);
      final PsiElement addedElement=file.add(packageStatement);
      file.addBefore(comment,addedElement);
      element.delete();
      if (!isOnTheFly()) {
        return;
      }
      final AsyncResult<DataContext> dataContextFromFocus=DataManager.getInstance().getDataContextFromFocus();
      dataContextFromFocus.doWhenDone(new AsyncResult.Handler<DataContext>(){
        public void run(        DataContext dataContext){
          final IdeView ideView=DataKeys.IDE_VIEW.getData(dataContext);
          if (ideView == null) {
            return;
          }
          ideView.selectElement(file);
        }
      }
);
    }
    @Override protected UndoConfirmationPolicy getUndoConfirmationPolicy(){
      return UndoConfirmationPolicy.REQUEST_CONFIRMATION;
    }
  }
.execute();
}
