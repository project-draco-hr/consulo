{
  super(project,Charset.class,"Default Encoding");
  reset(EncodingProjectManager.getInstance(project).getAllMappings());
  getValueColumn().setCellRenderer(new DefaultTableCellRenderer(){
    public Component getTableCellRendererComponent(    final JTable table,    final Object value,    final boolean isSelected,    final boolean hasFocus,    final int row,    final int column){
      super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
      final Charset t=(Charset)value;
      final Object userObject=table.getModel().getValueAt(row,0);
      final VirtualFile file=userObject instanceof VirtualFile ? (VirtualFile)userObject : null;
      final Pair<String,Boolean> pair=ChangeEncodingUpdateGroup.update(file);
      final boolean enabled=file == null || pair.getSecond();
      if (t != null) {
        setText(t.displayName());
      }
 else       if (file != null) {
        Charset charset=ChooseFileEncodingAction.charsetFromContent(file);
        if (charset != null) {
          setText(charset.displayName());
        }
 else         if (LoadTextUtil.utfCharsetWasDetectedFromBytes(file)) {
          setText(file.getCharset().displayName());
        }
 else         if (!ChooseFileEncodingAction.isEnabled(file)) {
          setText("N/A");
        }
      }
      setEnabled(enabled);
      return this;
    }
  }
);
  getValueColumn().setCellEditor(new DefaultCellEditor(new JComboBox()){
    private VirtualFile myVirtualFile;
{
      delegate=new EditorDelegate(){
        public void setValue(        Object value){
          getTableModel().setValueAt(value,new DefaultMutableTreeNode(myVirtualFile),-1);
        }
        public Object getCellEditorValue(){
          return getTableModel().getValueAt(new DefaultMutableTreeNode(myVirtualFile),1);
        }
      }
;
    }
    public Component getTableCellEditorComponent(    JTable table,    final Object value,    boolean isSelected,    int row,    int column){
      final Object o=table.getModel().getValueAt(row,0);
      myVirtualFile=o instanceof Project ? null : (VirtualFile)o;
      final ChooseFileEncodingAction changeAction=new ChooseFileEncodingAction(myVirtualFile){
        protected void chosen(        VirtualFile virtualFile,        Charset charset){
          getValueColumn().getCellEditor().stopCellEditing();
          if (clearSubdirectoriesOnDemandOrCancel(virtualFile,"There are encodings specified for the subdirectories. Override them?","Override Subdirectory Encoding")) {
            getTableModel().setValueAt(charset,new DefaultMutableTreeNode(virtualFile),1);
          }
        }
      }
;
      Presentation templatePresentation=changeAction.getTemplatePresentation();
      final JComponent comboComponent=changeAction.createCustomComponent(templatePresentation);
      DataContext dataContext=SimpleDataContext.getSimpleContext(DataConstants.VIRTUAL_FILE,myVirtualFile,SimpleDataContext.getProjectContext(getProject()));
      AnActionEvent event=new AnActionEvent(null,dataContext,ActionPlaces.UNKNOWN,templatePresentation,ActionManager.getInstance(),0);
      changeAction.update(event);
      editorComponent=comboComponent;
      comboComponent.addComponentListener(new ComponentAdapter(){
        @Override public void componentShown(        final ComponentEvent e){
          press((Container)e.getComponent());
        }
      }
);
      Charset charset=(Charset)getTableModel().getValueAt(new DefaultMutableTreeNode(myVirtualFile),1);
      templatePresentation.setText(charset == null ? "" : charset.displayName());
      comboComponent.revalidate();
      return editorComponent;
    }
  }
);
}
