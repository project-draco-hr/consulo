{
  final PsiManager psiManager=PsiManager.getInstance(getProject());
  final PsiSearchHelper helper=psiManager.getSearchHelper();
  final RefManager refManager=getRefManager();
  final AnalysisScope scope=refManager.getScope();
  final ProgressIndicator progress=myProgressIndicator == null ? null : new ProgressWrapper(myProgressIndicator);
  ProgressManager.getInstance().runProcess(new Runnable(){
    public void run(){
      final SearchScope searchScope=new GlobalSearchScope(){
        public boolean contains(        VirtualFile file){
          return !scope.contains(file) || file.getFileType() != StdFileTypes.JAVA;
        }
        public int compare(        VirtualFile file1,        VirtualFile file2){
          return 0;
        }
        public boolean isSearchInModuleContent(        Module aModule){
          return true;
        }
        public boolean isSearchInLibraries(){
          return false;
        }
      }
;
      final Application application=ApplicationManager.getApplication();
      if (myDerivedClassesRequests != null) {
        List<PsiElement> sortedIDs=getSortedIDs(myDerivedClassesRequests);
        for (        PsiElement sortedID : sortedIDs) {
          final PsiClass psiClass=(PsiClass)sortedID;
          incrementJobDoneAmount(FIND_EXTERNAL_USAGES,psiClass.getQualifiedName());
          final List<DerivedClassesProcessor> processors=myDerivedClassesRequests.get(psiClass);
          application.runReadAction(new Runnable(){
            public void run(){
              helper.processInheritors(new PsiElementProcessor<PsiClass>(){
                public boolean execute(                PsiClass inheritor){
                  if (scope.contains(inheritor))                   return true;
                  DerivedClassesProcessor[] processorsArrayed=processors.toArray(new DerivedClassesProcessor[processors.size()]);
                  for (                  DerivedClassesProcessor processor : processorsArrayed) {
                    if (!processor.process(inheritor)) {
                      processors.remove(processor);
                    }
                  }
                  return !processors.isEmpty();
                }
              }
,psiClass,searchScope,false);
            }
          }
);
        }
        myDerivedClassesRequests=null;
      }
      if (myDerivedMethodsRequests != null) {
        List<PsiElement> sortedIDs=getSortedIDs(myDerivedMethodsRequests);
        for (        PsiElement sortedID : sortedIDs) {
          final PsiMethod psiMethod=(PsiMethod)sortedID;
          final RefMethod refMethod=(RefMethod)refManager.getReference(psiMethod);
          incrementJobDoneAmount(FIND_EXTERNAL_USAGES,RefUtil.getInstance().getQualifiedName(refMethod));
          final List<DerivedMethodsProcessor> processors=myDerivedMethodsRequests.get(psiMethod);
          application.runReadAction(new Runnable(){
            public void run(){
              helper.processOverridingMethods(new PsiElementProcessor<PsiMethod>(){
                public boolean execute(                PsiMethod derivedMethod){
                  if (scope.contains(derivedMethod))                   return true;
                  DerivedMethodsProcessor[] processorsArrayed=processors.toArray(new DerivedMethodsProcessor[processors.size()]);
                  for (                  DerivedMethodsProcessor processor : processorsArrayed) {
                    if (!processor.process(derivedMethod)) {
                      processors.remove(processor);
                    }
                  }
                  return !processors.isEmpty();
                }
              }
,psiMethod,searchScope,true);
            }
          }
);
        }
        myDerivedMethodsRequests=null;
      }
      if (myFieldUsagesRequests != null) {
        List<PsiElement> sortedIDs=getSortedIDs(myFieldUsagesRequests);
        for (        PsiElement sortedID : sortedIDs) {
          final PsiField psiField=(PsiField)sortedID;
          final List<UsagesProcessor> processors=myFieldUsagesRequests.get(psiField);
          incrementJobDoneAmount(FIND_EXTERNAL_USAGES,RefUtil.getInstance().getQualifiedName(refManager.getReference(psiField)));
          application.runReadAction(new Runnable(){
            public void run(){
              helper.processReferences(createReferenceProcessor(processors),psiField,searchScope,false);
            }
          }
);
        }
        myFieldUsagesRequests=null;
      }
      if (myClassUsagesRequests != null) {
        List<PsiElement> sortedIDs=getSortedIDs(myClassUsagesRequests);
        for (        PsiElement sortedID : sortedIDs) {
          final PsiClass psiClass=(PsiClass)sortedID;
          final List<UsagesProcessor> processors=myClassUsagesRequests.get(psiClass);
          incrementJobDoneAmount(FIND_EXTERNAL_USAGES,psiClass.getQualifiedName());
          application.runReadAction(new Runnable(){
            public void run(){
              helper.processReferences(createReferenceProcessor(processors),psiClass,searchScope,false);
            }
          }
);
        }
        myClassUsagesRequests=null;
      }
      if (myMethodUsagesRequests != null) {
        List<PsiElement> sortedIDs=getSortedIDs(myMethodUsagesRequests);
        for (        PsiElement sortedID : sortedIDs) {
          final PsiMethod psiMethod=(PsiMethod)sortedID;
          final List<UsagesProcessor> processors=myMethodUsagesRequests.get(psiMethod);
          incrementJobDoneAmount(FIND_EXTERNAL_USAGES,RefUtil.getInstance().getQualifiedName(refManager.getReference(psiMethod)));
          application.runReadAction(new Runnable(){
            public void run(){
              helper.processReferencesIncludingOverriding(createReferenceProcessor(processors),psiMethod,searchScope);
            }
          }
);
        }
        myMethodUsagesRequests=null;
      }
    }
  }
,progress);
}
