{
  inspectionProfile.getInspectionProfile().cleanup();
  final InspectionTool[] usedTools=inspectionProfile.getInspectionTools();
  final Set<InspectionTool> profileTools=new TreeSet<InspectionTool>(new Comparator<InspectionTool>(){
    public int compare(    final InspectionTool tool1,    final InspectionTool tool2){
      if (tool1.getShortName().equals(DeadCodeInspection.SHORT_NAME))       return -1;
      if (tool2.getShortName().equals(DeadCodeInspection.SHORT_NAME))       return 1;
      return tool1.getShortName().compareTo(tool2.getShortName());
    }
  }
);
  tools.put(inspectionProfile.getName(),profileTools);
  final HashSet<InspectionTool> localProfileTools=new HashSet<InspectionTool>();
  localTools.put(inspectionProfile.getName(),localProfileTools);
  for (  InspectionTool tool : usedTools) {
    final String shortName=tool.getShortName();
    final HighlightDisplayKey key=HighlightDisplayKey.find(shortName);
    if (inspectionProfile.isToolEnabled(key)) {
      tool.initialize(this);
      Set<Pair<InspectionTool,InspectionProfile>> sertainTools=myTools.get(shortName);
      if (sertainTools == null) {
        sertainTools=new HashSet<Pair<InspectionTool,InspectionProfile>>();
        myTools.put(shortName,sertainTools);
      }
      sertainTools.add(Pair.create(tool,inspectionProfile.getInspectionProfile()));
      if (tool instanceof LocalInspectionToolWrapper) {
        localProfileTools.add(tool);
        appendJobDescriptor(LOCAL_ANALYSIS);
      }
 else {
        profileTools.add(tool);
        JobDescriptor[] jobDescriptors=tool.getJobDescriptors();
        for (        JobDescriptor jobDescriptor : jobDescriptors) {
          appendJobDescriptor(jobDescriptor);
        }
      }
    }
  }
}
