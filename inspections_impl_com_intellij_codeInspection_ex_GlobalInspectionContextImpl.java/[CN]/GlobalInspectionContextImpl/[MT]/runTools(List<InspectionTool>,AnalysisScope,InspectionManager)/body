{
  final HashMap<String,Set<InspectionTool>> usedTools=new HashMap<String,Set<InspectionTool>>();
  final Map<String,Set<InspectionTool>> localTools=new HashMap<String,Set<InspectionTool>>();
  initializeTools(scope,usedTools,localTools);
  final Set<InspectionTool> tools=usedTools.get(DeadCodeInspection.SHORT_NAME);
  if (tools != null) {
    processGlobalTools(tools,scope,manager,needRepeatSearchRequest);
  }
  for (  String toolName : usedTools.keySet()) {
    if (!Comparing.strEqual(toolName,DeadCodeInspection.SHORT_NAME)) {
      processGlobalTools(usedTools.get(toolName),scope,manager,needRepeatSearchRequest);
    }
  }
  performPostRunFindUsages(needRepeatSearchRequest,manager);
  if (RUN_GLOBAL_TOOLS_ONLY)   return;
  final Set<InspectionTool> currentProfileLocalTools=localTools.get(getCurrentProfile().getName());
  if (RUN_WITH_EDITOR_PROFILE || currentProfileLocalTools != null && !currentProfileLocalTools.isEmpty()) {
    final PsiManager psiManager=PsiManager.getInstance(myProject);
    final InspectionProjectProfileManager profileManager=InspectionProjectProfileManager.getInstance(myProject);
    scope.accept(new PsiRecursiveElementVisitor(){
      public void visitReferenceExpression(      PsiReferenceExpression expression){
      }
      @Override public void visitFile(      PsiFile file){
        InspectionProfile profile;
        if (RUN_WITH_EDITOR_PROFILE) {
          profile=profileManager.getInspectionProfile(file);
        }
 else {
          profile=getCurrentProfile();
        }
        final VirtualFile virtualFile=file.getVirtualFile();
        if (virtualFile != null) {
          incrementJobDoneAmount(LOCAL_ANALYSIS,VfsUtil.calcRelativeToProjectPath(virtualFile,myProject));
        }
        final Set<InspectionTool> tools=localTools.get(profile.getName());
        for (        InspectionTool tool : tools) {
          try {
            ((LocalInspectionToolWrapper)tool).processFile(file,true,manager);
          }
 catch (          ProcessCanceledException e) {
            throw e;
          }
catch (          Exception e) {
            LOG.error(e);
          }
        }
        psiManager.dropResolveCaches();
      }
    }
);
  }
}
