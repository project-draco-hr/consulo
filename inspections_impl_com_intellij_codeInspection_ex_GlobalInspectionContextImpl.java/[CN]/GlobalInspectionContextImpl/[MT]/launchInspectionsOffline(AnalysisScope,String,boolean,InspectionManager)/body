{
  cleanup();
  myCurrentScope=scope;
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    public void run(){
      performInspectionsWithProgress(scope,runWithEditorSettings,manager);
      for (      String toolName : myTools.keySet()) {
        final Element root=new Element(InspectionsBundle.message("inspection.problems"));
        final Document doc=new Document(root);
        final Set<InspectionTool> sameTools=myTools.get(toolName);
        boolean hasProblems=false;
        boolean isLocalTool=false;
        for (        InspectionTool tool : sameTools) {
          if (tool.hasReportedProblems()) {
            hasProblems=true;
            isLocalTool=tool instanceof LocalInspectionToolWrapper;
            tool.exportResults(root);
          }
        }
        @NonNls final String isLocalToolAttribute="is_local_tool";
        root.setAttribute(isLocalToolAttribute,String.valueOf(isLocalTool));
        if (!hasProblems)         continue;
        OutputStream outStream=null;
        try {
          new File(outputPath).mkdirs();
          @NonNls final String ext=".xml";
          final File file=new File(outputPath,toolName + ext);
          outStream=new BufferedOutputStream(new FileOutputStream(file));
          ((ProjectEx)getProject()).getMacroReplacements().substitute(doc.getRootElement(),SystemInfo.isFileSystemCaseSensitive);
          JDOMUtil.writeDocument(doc,outStream,"\n");
        }
 catch (        IOException e) {
          LOG.error(e);
        }
 finally {
          if (outStream != null) {
            try {
              outStream.close();
            }
 catch (            IOException e) {
              LOG.error(e);
            }
          }
        }
      }
    }
  }
);
}
