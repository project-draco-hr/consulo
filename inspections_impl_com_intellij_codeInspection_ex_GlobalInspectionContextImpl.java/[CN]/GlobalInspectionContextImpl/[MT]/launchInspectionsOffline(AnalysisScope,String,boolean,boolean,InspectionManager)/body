{
  cleanup();
  myCurrentScope=scope;
  final boolean oldProfileSetting=RUN_WITH_EDITOR_PROFILE;
  InspectionTool.setOutputPath(outputPath);
  RUN_WITH_EDITOR_PROFILE=runWithEditorSettings;
  final boolean oldToolsSettings=RUN_GLOBAL_TOOLS_ONLY;
  RUN_GLOBAL_TOOLS_ONLY=runGlobalToolsOnly;
  try {
    ApplicationManager.getApplication().runReadAction(new Runnable(){
      public void run(){
        performInspectionsWithProgress(scope,manager);
        @NonNls final String ext=".xml";
        for (        String toolName : myTools.keySet()) {
          final Element root=new Element(InspectionsBundle.message("inspection.problems"));
          final Document doc=new Document(root);
          final Set<Pair<InspectionTool,InspectionProfile>> sameTools=myTools.get(toolName);
          boolean hasProblems=false;
          boolean isLocalTool=false;
          boolean isDescriptorProvider=false;
          if (sameTools != null) {
            for (            Pair<InspectionTool,InspectionProfile> toolDescr : sameTools) {
              final InspectionTool tool=toolDescr.first;
              if (tool instanceof DescriptorProviderInspection) {
                hasProblems=new File(outputPath,toolName + ext).exists();
                isLocalTool=tool instanceof LocalInspectionToolWrapper;
                isDescriptorProvider=true;
              }
 else {
                tool.updateContent();
                if (tool.hasReportedProblems()) {
                  hasProblems=true;
                  tool.exportResults(root);
                }
              }
            }
          }
          if (!hasProblems)           continue;
          @NonNls final String isLocalToolAttribute="is_local_tool";
          root.setAttribute(isLocalToolAttribute,String.valueOf(isLocalTool));
          OutputStream outStream=null;
          try {
            new File(outputPath).mkdirs();
            final File file=new File(outputPath,toolName + ext);
            if (isDescriptorProvider) {
              outStream=descriptorProviderFilePreparations(file,outStream,isLocalToolAttribute,isLocalTool);
            }
 else {
              ((ProjectEx)getProject()).getMacroReplacements().substitute(doc.getRootElement(),SystemInfo.isFileSystemCaseSensitive);
              outStream=new BufferedOutputStream(new FileOutputStream(file));
              JDOMUtil.writeDocument(doc,outStream,"\n");
            }
          }
 catch (          IOException e) {
            LOG.error(e);
          }
 finally {
            if (outStream != null) {
              try {
                outStream.close();
              }
 catch (              IOException e) {
                LOG.error(e);
              }
            }
          }
        }
      }
    }
);
  }
  finally {
    InspectionTool.setOutputPath(null);
    RUN_WITH_EDITOR_PROFILE=oldProfileSetting;
    RUN_GLOBAL_TOOLS_ONLY=oldToolsSettings;
  }
}
