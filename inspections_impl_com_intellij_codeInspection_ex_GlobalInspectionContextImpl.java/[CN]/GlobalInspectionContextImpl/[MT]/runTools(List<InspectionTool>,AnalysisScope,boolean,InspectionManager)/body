{
  final HashMap<String,Set<InspectionTool>> usedTools=new HashMap<String,Set<InspectionTool>>();
  final Map<String,Set<InspectionTool>> localTools=new HashMap<String,Set<InspectionTool>>();
  initializeTools(scope,usedTools,localTools,runWithEditorSettings);
  final Set<InspectionTool> currentProfileLocalTools=localTools.get(getCurrentProfile().getName());
  if (runWithEditorSettings || (currentProfileLocalTools != null && currentProfileLocalTools.size() > 0)) {
    final PsiManager psiManager=PsiManager.getInstance(myProject);
    try {
      scope.accept(new PsiRecursiveElementVisitor(){
        public void visitReferenceExpression(        PsiReferenceExpression expression){
        }
        @Override public void visitFile(        PsiFile file){
          final InspectionProjectProfileManager profileManager=InspectionProjectProfileManager.getInstance(myProject);
          InspectionProfile profile;
          if (runWithEditorSettings) {
            profile=profileManager.getInspectionProfile(file);
          }
 else {
            profile=getCurrentProfile();
          }
          final VirtualFile virtualFile=file.getVirtualFile();
          if (virtualFile != null) {
            incrementJobDoneAmount(LOCAL_ANALYSIS,virtualFile.getPresentableUrl());
          }
          final Set<InspectionTool> tools=localTools.get(profile.getName());
          for (          InspectionTool tool : tools) {
            try {
              ((LocalInspectionToolWrapper)tool).processFile(file,true,manager);
            }
 catch (            ProcessCanceledException e) {
              throw e;
            }
catch (            Exception e) {
              LOG.error(e);
            }
            psiManager.dropResolveCaches();
          }
        }
      }
);
    }
 catch (    ProcessCanceledException e) {
      throw e;
    }
catch (    Throwable e) {
      LOG.error(e);
    }
  }
  for (  Set<InspectionTool> tools : usedTools.values()) {
    for (    InspectionTool tool : tools) {
      try {
        if (tool.isGraphNeeded()) {
          ((RefManagerImpl)tool.getRefManager()).findAllDeclarations();
        }
        tool.runInspection(scope,manager);
        if (tool.queryExternalUsagesRequests(manager)) {
          needRepeatSearchRequest.add(tool);
        }
      }
 catch (      ProcessCanceledException e) {
        throw e;
      }
catch (      Exception e) {
        LOG.error(e);
      }
    }
  }
}
