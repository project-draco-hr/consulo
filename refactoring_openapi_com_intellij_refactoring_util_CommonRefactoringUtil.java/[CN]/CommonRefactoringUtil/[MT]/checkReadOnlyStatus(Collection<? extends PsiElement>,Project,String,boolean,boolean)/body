{
  final List<VirtualFile> readonly=new ArrayList<VirtualFile>();
  final List<VirtualFile> failed=new ArrayList<VirtualFile>();
  for (  PsiElement element : elements) {
    if (element.isWritable())     continue;
    if (element instanceof PsiDirectory) {
      PsiDirectory dir=(PsiDirectory)element;
      final VirtualFile vFile=dir.getVirtualFile();
      if (vFile.getFileSystem() instanceof JarFileSystem) {
        failed.add(vFile);
      }
 else {
        if (recursively) {
          addVirtualFiles(vFile,readonly);
        }
 else {
          readonly.add(vFile);
        }
      }
    }
 else     if (element instanceof PsiPackage) {
      final PsiDirectory[] directories=((PsiPackage)element).getDirectories();
      for (      PsiDirectory directory : directories) {
        VirtualFile virtualFile=directory.getVirtualFile();
        if (recursively) {
          if (virtualFile.getFileSystem() instanceof JarFileSystem) {
            failed.add(virtualFile);
          }
 else {
            addVirtualFiles(virtualFile,readonly);
          }
        }
 else {
          if (!directory.isWritable()) {
            if (virtualFile.getFileSystem() instanceof JarFileSystem) {
              failed.add(virtualFile);
            }
 else {
              readonly.add(virtualFile);
            }
          }
        }
      }
    }
 else     if (element instanceof PsiCompiledElement) {
      final PsiFile file=element.getContainingFile();
      if (file != null) {
        failed.add(file.getVirtualFile());
      }
    }
 else {
      PsiFile file=element.getContainingFile();
      if (!file.isWritable()) {
        final VirtualFile vFile=file.getVirtualFile();
        if (vFile != null) {
          readonly.add(vFile);
        }
      }
    }
  }
  final ReadonlyStatusHandler.OperationStatus status=ReadonlyStatusHandler.getInstance(project).ensureFilesWritable(readonly.toArray(new VirtualFile[readonly.size()]));
  failed.addAll(Arrays.asList(status.getReadonlyFiles()));
  if (notifyOnFail && !failed.isEmpty()) {
    StringBuilder message=new StringBuilder(messagePrefix);
    message.append('\n');
    for (    VirtualFile virtualFile : failed) {
      final String presentableUrl=virtualFile.getPresentableUrl();
      final String subj=virtualFile.isDirectory() ? RefactoringBundle.message("directory.description",presentableUrl) : RefactoringBundle.message("file.description",presentableUrl);
      if (virtualFile.getFileSystem() instanceof JarFileSystem) {
        message.append(RefactoringBundle.message("0.is.located.in.a.jar.file",subj));
      }
 else {
        message.append(RefactoringBundle.message("0.is.read.only",subj));
      }
    }
    showErrorMessage(RefactoringBundle.message("error.title"),message.toString(),null,project);
    return false;
  }
  return true;
}
