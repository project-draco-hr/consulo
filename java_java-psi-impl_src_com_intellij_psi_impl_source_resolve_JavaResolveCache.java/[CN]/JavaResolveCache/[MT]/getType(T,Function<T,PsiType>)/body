{
  PsiType type=getCachedType(expr);
  if (type == null) {
    type=f.fun(expr);
    if (type == null) {
      type=TypeConversionUtil.NULL_TYPE;
    }
    SoftReference<PsiType> ref=new SoftReference<PsiType>(type);
    Reference<PsiType> storedRef=ConcurrencyUtil.cacheOrGet(myCalculatedTypes,expr,ref);
    type=storedRef.get();
  }
  if (!type.isValid()) {
    if (expr.isValid()) {
      PsiJavaCodeReferenceElement refInside=type instanceof PsiClassReferenceType ? ((PsiClassReferenceType)type).getReference() : null;
      @NonNls String typeinfo=type + " (" + type.getClass()+ ")"+ (refInside == null ? "" : "; ref inside: " + refInside + " ("+ refInside.getClass()+ ") valid:"+ refInside.isValid());
      LOG.error("Type is invalid: " + typeinfo + "; expr: '"+ expr+ "' ("+ expr.getClass()+ ") is valid");
    }
 else {
      LOG.error("Expression: '" + expr + "' is invalid, must not be used for getType()");
    }
  }
  return type == TypeConversionUtil.NULL_TYPE ? null : type;
}
