{
  String namePattern=getNamePattern(pattern);
  String qualifierPattern=getQualifierPattern(pattern);
  boolean empty=namePattern.length() == 0 || namePattern.equals("@");
  if (empty && !isShowListForEmptyPattern())   return;
  List<String> namesList=new ArrayList<String>();
  getNamesByPattern(myCheckboxState,this,namesList,namePattern);
  if (myCancelled) {
    throw new ProcessCanceledException();
  }
  Collections.sort(namesList,new MatchesComparator(pattern));
  boolean overflow=false;
  List<Object> sameNameElements=new SmartList<Object>();
  All:   for (  String name : namesList) {
    if (myCancelled) {
      throw new ProcessCanceledException();
    }
    final Object[] elements=myModel.getElementsByName(name,myCheckboxState,namePattern);
    if (elements.length > 1) {
      sameNameElements.clear();
      for (      final Object element : elements) {
        if (matchesQualifier(element,qualifierPattern)) {
          sameNameElements.add(element);
        }
      }
      sortByProximity(sameNameElements);
      for (      Object element : sameNameElements) {
        elementsArray.add(element);
        if (elementsArray.size() >= myMaximumListSizeLimit) {
          overflow=true;
          break All;
        }
      }
    }
 else     if (elements.length == 1 && matchesQualifier(elements[0],qualifierPattern)) {
      elementsArray.add(elements[0]);
      if (elementsArray.size() >= myMaximumListSizeLimit) {
        overflow=true;
        break;
      }
    }
  }
  if (overflow) {
    elementsArray.add(EXTRA_ELEM);
  }
}
