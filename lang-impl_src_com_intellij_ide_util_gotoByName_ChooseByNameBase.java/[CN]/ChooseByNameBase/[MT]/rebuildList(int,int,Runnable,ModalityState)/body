{
  myListIsUpToDate=false;
  myAlarm.cancelAllRequests();
  myListUpdater.cancelAll();
  tryToCancel();
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    public void run(){
      final String text=myTextField.getText();
      if (!isShowListForEmptyPattern() && (text == null || text.trim().length() == 0)) {
        myListModel.clear();
        hideList();
        myCard.show(myCardContainer,CHECK_BOX_CARD);
        return;
      }
      final Runnable request=new Runnable(){
        public void run(){
          final CalcElementsCallback callback=new CalcElementsCallback(){
            public void run(            final Set<?> elements){
synchronized (myRebuildMutex) {
                ApplicationManager.getApplication().assertIsDispatchThread();
                if (myDisposedFlag) {
                  return;
                }
                setElementsToList(pos,elements,text);
                myListIsUpToDate=true;
                choosenElementMightChange();
                if (postRunnable != null) {
                  postRunnable.run();
                }
              }
            }
          }
;
          tryToCancel();
          myCalcElementsThread=new CalcElementsThread(text,myCheckBox.isSelected(),callback,modalityState);
          myCalcElementsThread.setCanCancel(postRunnable == null);
          ApplicationManager.getApplication().executeOnPooledThread(myCalcElementsThread);
        }
      }
;
      if (delay > 0) {
        myAlarm.addRequest(request,delay,ModalityState.stateForComponent(myTextField));
      }
 else {
        request.run();
      }
    }
  }
,modalityState);
}
