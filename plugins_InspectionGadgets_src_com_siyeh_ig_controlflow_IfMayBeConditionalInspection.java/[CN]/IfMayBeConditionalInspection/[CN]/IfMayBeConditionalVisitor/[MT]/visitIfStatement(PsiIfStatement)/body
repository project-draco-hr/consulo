{
  super.visitIfStatement(statement);
  final PsiStatement thenBranch=statement.getThenBranch();
  final PsiStatement elseBranch=statement.getElseBranch();
  final PsiStatement thenStatement=ControlFlowUtils.stripBraces(thenBranch);
  if (thenStatement == null) {
    return;
  }
  final PsiStatement elseStatement=ControlFlowUtils.stripBraces(elseBranch);
  if (elseStatement == null) {
    return;
  }
  if (thenStatement instanceof PsiReturnStatement) {
    if (!(elseStatement instanceof PsiReturnStatement)) {
      return;
    }
    registerStatementError(statement);
  }
 else   if (thenStatement instanceof PsiExpressionStatement) {
    if (!(elseStatement instanceof PsiExpressionStatement)) {
      return;
    }
    final PsiExpressionStatement thenExpressionStatement=(PsiExpressionStatement)thenStatement;
    final PsiExpression thenExpression=thenExpressionStatement.getExpression();
    if (thenExpression instanceof PsiAssignmentExpression) {
      final PsiAssignmentExpression thenAssignmentExpression=(PsiAssignmentExpression)thenExpression;
      final PsiExpressionStatement elseExpressionStatement=(PsiExpressionStatement)elseStatement;
      final PsiExpression elseExpression=elseExpressionStatement.getExpression();
      if (!(elseExpression instanceof PsiAssignmentExpression)) {
        return;
      }
      final PsiAssignmentExpression elseAssignmentExpression=(PsiAssignmentExpression)elseExpression;
      if (!thenAssignmentExpression.getOperationTokenType().equals(elseAssignmentExpression.getOperationTokenType())) {
        return;
      }
      final PsiExpression thenLhs=thenAssignmentExpression.getLExpression();
      final PsiExpression elseLhs=elseAssignmentExpression.getLExpression();
      if (!EquivalenceChecker.expressionsAreEquivalent(thenLhs,elseLhs)) {
        return;
      }
      registerStatementError(statement);
    }
 else     if (reportMethodCalls && thenExpression instanceof PsiMethodCallExpression) {
      final PsiMethodCallExpression thenMethodCallExpression=(PsiMethodCallExpression)thenExpression;
      final PsiExpressionStatement elseExpressionStatement=(PsiExpressionStatement)elseStatement;
      final PsiExpression elseExpression=elseExpressionStatement.getExpression();
      if (!(elseExpression instanceof PsiMethodCallExpression)) {
        return;
      }
      final PsiMethodCallExpression elseMethodCallExpression=(PsiMethodCallExpression)elseExpression;
      final PsiReferenceExpression thenMethodExpression=thenMethodCallExpression.getMethodExpression();
      final PsiReferenceExpression elseMethodExpression=elseMethodCallExpression.getMethodExpression();
      if (!EquivalenceChecker.expressionsAreEquivalent(thenMethodExpression,elseMethodExpression)) {
        return;
      }
      final PsiExpressionList thenArgumentList=thenMethodCallExpression.getArgumentList();
      final PsiExpression[] thenArguments=thenArgumentList.getExpressions();
      final PsiExpressionList elseArgumentList=elseMethodCallExpression.getArgumentList();
      final PsiExpression[] elseArguments=elseArgumentList.getExpressions();
      if (thenArguments.length != elseArguments.length) {
        return;
      }
      int differences=0;
      for (int i=0, length=thenArguments.length; i < length; i++) {
        final PsiExpression thenArgument=thenArguments[i];
        final PsiExpression elseArgument=elseArguments[i];
        if (!EquivalenceChecker.expressionsAreEquivalent(thenArgument,elseArgument)) {
          differences++;
        }
      }
      if (differences == 1) {
        registerStatementError(statement);
      }
    }
  }
}
