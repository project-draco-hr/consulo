{
  super.visitMethodCallExpression(methodCallExpression);
  final JavaResolveResult resolveResult=methodCallExpression.resolveMethodGenerics();
  final PsiElement method=resolveResult.getElement();
  if (method instanceof PsiMethod) {
    final PsiExpression[] psiExpressions=methodCallExpression.getArgumentList().getExpressions();
    final PsiParameter[] originalParams=((PsiMethod)method).getParameterList().getParameters();
    final PsiSubstitutor evalSubstitutor=myTypeEvaluator.createMethodSubstitution(originalParams,psiExpressions,(PsiMethod)method,methodCallExpression);
    for (int i=0; i < psiExpressions.length; i++) {
      PsiParameter originalParameter;
      if (originalParams.length <= i) {
        if (originalParams.length > 0 && originalParams[originalParams.length - 1].isVarArgs()) {
          originalParameter=originalParams[originalParams.length - 1];
        }
 else {
          continue;
        }
      }
 else {
        originalParameter=originalParams[i];
      }
      processVariable(originalParameter,psiExpressions[i],null,resolveResult.getSubstitutor(),evalSubstitutor,true);
    }
    final PsiExpression qualifier=methodCallExpression.getMethodExpression().getQualifierExpression();
    if (qualifier != null && qualifier.isPhysical() && !new TypeView(qualifier).isChanged()) {
      final PsiType qualifierType=qualifier.getType();
      if (qualifierType instanceof PsiClassType) {
        final PsiClassType.ClassResolveResult classResolveResult=((PsiClassType)qualifierType).resolveGenerics();
        final PsiType migrationType=classResolveResult.getSubstitutor().substitute(evalSubstitutor.substitute(JavaPsiFacade.getElementFactory(myStatement.getProject()).createType(classResolveResult.getElement(),PsiSubstitutor.EMPTY)));
        myLabeler.migrateExpressionType(qualifier,migrationType,myStatement,migrationType.equals(qualifierType),true);
      }
    }
  }
}
