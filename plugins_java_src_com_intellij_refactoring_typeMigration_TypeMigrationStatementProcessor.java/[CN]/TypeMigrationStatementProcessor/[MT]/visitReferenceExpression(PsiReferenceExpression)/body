{
  final PsiExpression qualifierExpression=expression.getQualifierExpression();
  if (qualifierExpression != null && qualifierExpression.isPhysical()) {
    qualifierExpression.accept(this);
    final TypeView qualifierView=new TypeView(qualifierExpression);
    if (qualifierView.isChanged()) {
      final PsiMember member=(PsiMember)expression.advancedResolve(false).getElement();
      if (member == null)       return;
      final Pair<PsiType,PsiType> typePair=qualifierView.getTypePair();
      final TypeConversionDescriptorBase conversion=myLabeler.getRules().findConversion(typePair.getFirst(),typePair.getSecond(),member,expression,false,myLabeler);
      if (conversion == null) {
        myLabeler.markFailedConversion(typePair,qualifierExpression);
      }
 else {
        final PsiElement parent=Util.getEssentialParent(expression);
        if (parent instanceof PsiMethodCallExpression) {
          myLabeler.setConversionMapping((PsiMethodCallExpression)parent,conversion);
          myTypeEvaluator.setType(new TypeMigrationUsageInfo(parent),myTypeEvaluator.evaluateType((PsiExpression)parent));
        }
 else {
          myLabeler.setConversionMapping(expression,conversion);
          myTypeEvaluator.setType(new TypeMigrationUsageInfo(expression),myTypeEvaluator.evaluateType(expression));
        }
      }
    }
  }
}
