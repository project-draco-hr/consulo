{
  final Collection<VirtualFile> files=myTable.getSelection();
  for (  final VirtualFile file : files) {
    final MergeData mergeData;
    try {
      mergeData=myProvider.loadRevisions(file);
    }
 catch (    VcsException e) {
      Messages.showErrorDialog(myRootPanel,"Error loading revisions to merge: " + e.getMessage());
      break;
    }
    if (mergeData.CURRENT == null || mergeData.LAST == null || mergeData.ORIGINAL == null) {
      Messages.showErrorDialog(myRootPanel,"Error loading revisions to merge");
      break;
    }
    final Document document=FileDocumentManager.getInstance().getDocument(file);
    final String contentWithMergeMarkers=document == null ? null : document.getText();
    String leftText=decodeContent(file,mergeData.CURRENT);
    String rightText=decodeContent(file,mergeData.LAST);
    String originalText=decodeContent(file,mergeData.ORIGINAL);
    DiffRequestFactory diffRequestFactory=PeerFactory.getInstance().getDiffRequestFactory();
    MergeRequest request=diffRequestFactory.createMergeRequest(leftText,rightText,originalText,file,myProject,ActionButtonPresentation.createApplyButton());
    String lastVersionTitle;
    if (mergeData.LAST_REVISION_NUMBER != null) {
      lastVersionTitle=VcsBundle.message("merge.version.title.last.version.number",mergeData.LAST_REVISION_NUMBER.asString());
    }
 else {
      lastVersionTitle=VcsBundle.message("merge.version.title.last.version");
    }
    request.setVersionTitles(new String[]{VcsBundle.message("merge.version.title.local.changes"),VcsBundle.message("merge.version.title.merge.result"),lastVersionTitle});
    request.setWindowTitle(VcsBundle.message("multiple.file.merge.request.title"));
    DiffManager.getInstance().getDiffTool().show(request);
    if (request.getResult() == DialogWrapper.OK_EXIT_CODE) {
      myFiles.remove(file);
      myProvider.conflictResolvedForFile(file);
      checkMarkModifiedProject(file);
    }
 else {
      restoreOriginalContent(file,contentWithMergeMarkers);
    }
  }
  updateModelFromFiles();
}
