{
  super.setUp();
  initApplication();
  myProject=disposeOnTearDown(new MockProject());
  myPsiManager=new MockPsiManager(myProject);
  myFileFactory=new PsiFileFactoryImpl(myPsiManager);
  final MutablePicoContainer appContainer=getApplication().getPicoContainer();
  registerComponentInstance(appContainer,MessageBus.class,MessageBusFactory.newMessageBus(getApplication()));
  registerComponentInstance(appContainer,SchemesManagerFactory.class,new MockSchemesManagerFactory());
  registerComponentInstance(appContainer,EditorFactory.class,new MockEditorFactory());
  registerComponentInstance(appContainer,FileDocumentManager.class,new MockFileDocumentManagerImpl());
  registerComponentInstance(appContainer,PsiDocumentManager.class,new MockPsiDocumentManager());
  myLanguage=myLanguage == null && myDefinitions != null && myDefinitions.length > 0 ? myDefinitions[0].getFileNodeType().getLanguage() : myLanguage;
  registerComponentInstance(appContainer,FileTypeManager.class,new MockFileTypeManager(new MockLanguageFileType(myLanguage,myFileExt)));
  registerApplicationService(PsiBuilderFactory.class,new PsiBuilderFactoryImpl());
  myProject.registerService(CachedValuesManager.class,new CachedValuesManagerImpl(myProject,new DefaultCachedValuesFactory(myProject)));
  myProject.registerService(PsiManager.class,myPsiManager);
  myProject.registerService(StartupManager.class,new StartupManagerImpl(myProject));
  registerExtensionPoint(FileTypeFactory.FILE_TYPE_FACTORY_EP,FileTypeFactory.class);
  for (  ParserDefinition definition : myDefinitions) {
    addExplicitExtension(LanguageParserDefinitions.INSTANCE,definition.getFileNodeType().getLanguage(),definition);
  }
}
