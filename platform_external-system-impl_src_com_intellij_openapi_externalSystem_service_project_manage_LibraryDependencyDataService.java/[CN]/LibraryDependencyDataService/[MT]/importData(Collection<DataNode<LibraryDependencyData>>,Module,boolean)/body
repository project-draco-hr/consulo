{
  ExternalSystemApiUtil.executeProjectChangeAction(synchronous,new Runnable(){
    @Override public void run(){
      importMissingProjectLibraries(module,nodesToImport,synchronous);
      Map<Set<String>,LibraryDependencyData> moduleLibrariesToImport=ContainerUtilRt.newHashMap();
      Map<String,LibraryDependencyData> projectLibrariesToImport=ContainerUtilRt.newHashMap();
      Set<LibraryDependencyData> toImport=ContainerUtilRt.newLinkedHashSet();
      boolean hasUnresolved=false;
      for (      DataNode<LibraryDependencyData> dependencyNode : nodesToImport) {
        LibraryDependencyData dependencyData=dependencyNode.getData();
        LibraryData libraryData=dependencyData.getTarget();
        hasUnresolved|=libraryData.isUnresolved();
switch (dependencyData.getLevel()) {
case MODULE:
          if (!libraryData.isUnresolved()) {
            Set<String> paths=ContainerUtilRt.newHashSet();
            for (            String path : libraryData.getPaths(LibraryPathType.BINARY)) {
              paths.add(ExternalSystemApiUtil.toCanonicalPath(path));
            }
            moduleLibrariesToImport.put(paths,dependencyData);
            toImport.add(dependencyData);
          }
        break;
case PROJECT:
      projectLibrariesToImport.put(libraryData.getName(),dependencyData);
    toImport.add(dependencyData);
}
}
ModuleRootManager moduleRootManager=ModuleRootManager.getInstance(module);
final ModifiableRootModel moduleRootModel=moduleRootManager.getModifiableModel();
LibraryTable moduleLibraryTable=moduleRootModel.getModuleLibraryTable();
LibraryTable libraryTable=myPlatformFacade.getProjectLibraryTable(module.getProject());
try {
filterUpToDateAndRemoveObsolete(moduleLibrariesToImport,projectLibrariesToImport,toImport,moduleRootModel,hasUnresolved);
if (!toImport.isEmpty()) {
  importMissing(toImport,moduleRootModel,moduleLibraryTable,libraryTable,module);
}
}
  finally {
moduleRootModel.commit();
}
}
}
);
}
