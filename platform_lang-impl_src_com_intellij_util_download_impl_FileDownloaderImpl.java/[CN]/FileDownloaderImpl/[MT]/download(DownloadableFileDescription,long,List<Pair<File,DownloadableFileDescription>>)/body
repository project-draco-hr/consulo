{
  final ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
  final String presentableUrl=fileDescription.getPresentableDownloadUrl();
  final String url=fileDescription.getDownloadUrl();
  if (url.startsWith(LIB_SCHEMA)) {
    indicator.setText2(IdeBundle.message("progress.locate.file.text",fileDescription.getPresentableFileName()));
    final String path=FileUtil.toSystemDependentName(StringUtil.trimStart(url,LIB_SCHEMA));
    final File file=PathManager.findFileInLibDirectory(path);
    downloadedFiles.add(Pair.create(file,fileDescription));
  }
 else   if (url.startsWith(LocalFileSystem.PROTOCOL_PREFIX)) {
    String path=FileUtil.toSystemDependentName(StringUtil.trimStart(url,LocalFileSystem.PROTOCOL_PREFIX));
    File file=new File(path);
    if (file.exists()) {
      downloadedFiles.add(Pair.create(file,fileDescription));
    }
  }
 else {
    indicator.setText2(IdeBundle.message("progress.connecting.to.download.file.text",presentableUrl));
    indicator.setIndeterminate(true);
    HttpURLConnection connection=(HttpURLConnection)new URL(url).openConnection();
    connection.setConnectTimeout(CONNECTION_TIMEOUT);
    connection.setReadTimeout(READ_TIMEOUT);
    InputStream input=null;
    BufferedOutputStream output=null;
    boolean deleteFile=true;
    File tempFile=null;
    try {
      final int responseCode=connection.getResponseCode();
      if (responseCode != HttpURLConnection.HTTP_OK) {
        throw new IOException(IdeBundle.message("error.connection.failed.with.http.code.N",responseCode));
      }
      final int size=connection.getContentLength();
      if (size != -1 && size == existingFileSize) {
        return false;
      }
      tempFile=FileUtil.createTempFile("downloaded","file");
      input=UrlConnectionUtil.getConnectionInputStreamWithException(connection,indicator);
      output=new BufferedOutputStream(new FileOutputStream(tempFile));
      indicator.setText2(IdeBundle.message("progress.download.file.text",fileDescription.getPresentableFileName(),presentableUrl));
      indicator.setIndeterminate(size == -1);
      NetUtils.copyStreamContent(indicator,input,output,size);
      deleteFile=false;
      downloadedFiles.add(Pair.create(tempFile,fileDescription));
    }
  finally {
      if (input != null) {
        input.close();
      }
      if (output != null) {
        output.close();
      }
      if (deleteFile && tempFile != null) {
        FileUtil.delete(tempFile);
      }
      connection.disconnect();
    }
  }
  return true;
}
