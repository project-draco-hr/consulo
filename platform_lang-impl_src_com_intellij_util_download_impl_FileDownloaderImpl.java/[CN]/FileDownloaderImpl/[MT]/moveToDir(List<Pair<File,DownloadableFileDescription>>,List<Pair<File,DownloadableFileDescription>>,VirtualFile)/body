{
  List<Pair<VirtualFile,DownloadableFileDescription>> result=new ArrayList<Pair<VirtualFile,DownloadableFileDescription>>();
  final File ioDir=VfsUtilCore.virtualToIoFile(dir);
  for (  Pair<File,DownloadableFileDescription> pair : downloadedFiles) {
    final DownloadableFileDescription description=pair.getSecond();
    final boolean dontTouch=description.getDownloadUrl().startsWith(LIB_SCHEMA) || description.getDownloadUrl().startsWith(LocalFileSystem.PROTOCOL_PREFIX);
    final File toFile=dontTouch ? pair.getFirst() : generateName(description,ioDir);
    if (!dontTouch) {
      FileUtil.rename(pair.getFirst(),toFile);
    }
    VirtualFile file=new WriteAction<VirtualFile>(){
      @Override protected void run(      final Result<VirtualFile> result){
        final String url=VfsUtil.getUrlForLibraryRoot(toFile);
        LocalFileSystem.getInstance().refreshAndFindFileByIoFile(toFile);
        result.setResult(VirtualFileManager.getInstance().refreshAndFindFileByUrl(url));
      }
    }
.execute().getResultObject();
    if (file != null) {
      result.add(Pair.create(file,description));
    }
  }
  for (  final Pair<File,DownloadableFileDescription> pair : existingFiles) {
    VirtualFile libraryRootFile=new WriteAction<VirtualFile>(){
      @Override protected void run(      final Result<VirtualFile> result){
        final String url=VfsUtil.getUrlForLibraryRoot(pair.getFirst());
        result.setResult(VirtualFileManager.getInstance().refreshAndFindFileByUrl(url));
      }
    }
.execute().getResultObject();
    if (libraryRootFile != null) {
      result.add(Pair.create(libraryRootFile,pair.getSecond()));
    }
  }
  return result;
}
