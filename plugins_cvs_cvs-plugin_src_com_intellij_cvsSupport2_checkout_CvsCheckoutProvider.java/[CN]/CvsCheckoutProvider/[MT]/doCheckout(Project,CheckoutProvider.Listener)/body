{
  final CheckoutWizard checkoutWizard=new CheckoutWizard(project);
  checkoutWizard.show();
  if (!checkoutWizard.isOK())   return;
  final boolean useAlternateCheckoutPath=checkoutWizard.useAlternativeCheckoutLocation();
  final File checkoutDirectory=checkoutWizard.getCheckoutDirectory();
  final CvsElement[] selectedElements=checkoutWizard.getSelectedElements();
  final CvsHandler checkoutHandler=CommandCvsHandler.createCheckoutHandler(checkoutWizard.getSelectedConfiguration(),collectCheckoutPaths(selectedElements),checkoutDirectory,useAlternateCheckoutPath,CvsApplicationLevelConfiguration.getInstance().MAKE_CHECKED_OUT_FILES_READONLY,VcsConfiguration.getInstance(project).getCheckoutOption());
  final CvsOperationExecutor executor=new CvsOperationExecutor(null);
  executor.performActionSync(checkoutHandler,new CvsOperationExecutorCallback(){
    public void executionFinished(    boolean successfully){
      if (!executor.hasNoErrors()) {
        Messages.showErrorDialog(CvsBundle.message("message.error.checkout",executor.getResult().composeError().getLocalizedMessage()),CvsBundle.message("operation.name.check.out.project"));
      }
      refreshAfterCheckout(listener,selectedElements,checkoutDirectory,useAlternateCheckoutPath);
    }
    public void executionFinishedSuccessfully(){
    }
    public void executeInProgressAfterAction(    ModalityContext modaityContext){
    }
  }
);
}
