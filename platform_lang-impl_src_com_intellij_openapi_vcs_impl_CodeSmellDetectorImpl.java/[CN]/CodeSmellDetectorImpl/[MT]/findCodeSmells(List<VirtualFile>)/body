{
  final List<CodeSmellInfo> result=new ArrayList<CodeSmellInfo>();
  final PsiManager manager=PsiManager.getInstance(myProject);
  final FileDocumentManager fileManager=FileDocumentManager.getInstance();
  PsiDocumentManager.getInstance(myProject).commitAllDocuments();
  boolean completed=ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
    public void run(){
      int i=0;
      try {
        @Nullable final ProgressIndicator progress=ProgressManager.getInstance().getProgressIndicator();
        for (; i < filesToCheck.size(); i++) {
          if (progress != null && progress.isCanceled())           throw new ProcessCanceledException();
          VirtualFile file=filesToCheck.get(i);
          if (progress != null) {
            progress.setText(VcsBundle.message("searching.for.code.smells.processing.file.progress.text",file.getPresentableUrl()));
            progress.setFraction((double)i / (double)filesToCheck.size());
          }
          final PsiFile psiFile=manager.findFile(file);
          if (psiFile != null) {
            final Document document=fileManager.getDocument(file);
            if (document != null) {
              final List<CodeSmellInfo> codeSmells=findCodeSmells(psiFile,progress,document);
              result.addAll(codeSmells);
            }
          }
          throw new NullPointerException();
        }
      }
 catch (      Exception e) {
        LOG.error(e);
        myException=e;
      }
    }
  }
,VcsBundle.message("checking.code.smells.progress.title"),true,myProject);
  if (!completed)   throw new ProcessCanceledException();
  if (myException != null) {
    Rethrow.reThrowRuntime(myException);
  }
  return result;
}
