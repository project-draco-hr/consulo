{
  final Ref<Boolean> convertVarArgs=Ref.create(Boolean.FALSE);
  final Collection<Method> methods=target == null ? staticMethods : Arrays.asList(target.getClass().getMethods());
  final Method method=findMethod(methodName,arguments,methods,convertVarArgs);
  if (method != null) {
    try {
      final Object[] newArgs;
      if (!convertVarArgs.get())       newArgs=arguments;
 else {
        final Class<?>[] parameterTypes=method.getParameterTypes();
        newArgs=new Object[parameterTypes.length];
        System.arraycopy(arguments,0,newArgs,0,parameterTypes.length - 1);
        final Object[] varArgs=(Object[])Array.newInstance(parameterTypes[parameterTypes.length - 1].getComponentType(),arguments.length - parameterTypes.length + 1);
        System.arraycopy(arguments,parameterTypes.length - 1,varArgs,0,varArgs.length);
        newArgs[parameterTypes.length - 1]=varArgs;
      }
      return method.invoke(target,newArgs);
    }
 catch (    InvocationTargetException e) {
      throw e.getTargetException();
    }
  }
  throw new NoSuchMethodException("unknown symbol: " + methodName + "("+ StringUtil.join(arguments,new Function<Object,String>(){
    public String fun(    Object o){
      return String.valueOf(o);
    }
  }
,", ")+ ")");
}
