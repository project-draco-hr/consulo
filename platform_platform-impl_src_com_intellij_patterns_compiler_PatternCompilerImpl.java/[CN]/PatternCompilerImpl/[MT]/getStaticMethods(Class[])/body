{
  return new THashSet<Method>(ContainerUtil.concat(patternClasses,new Function<Class,Collection<? extends Method>>(){
    public Collection<Method> fun(    final Class aClass){
      return ContainerUtil.findAll(ReflectionCache.getMethods(aClass),new Condition<Method>(){
        public boolean value(        final Method method){
          return Modifier.isStatic(method.getModifiers()) && Modifier.isPublic(method.getModifiers()) && !Modifier.isAbstract(method.getModifiers())&& ElementPattern.class.isAssignableFrom(method.getReturnType());
        }
      }
);
    }
  }
));
}
