{
  if (module == null)   return;
  MavenProject mavenProject=MavenProjectsManager.getInstance(module.getProject()).findProject(module);
  if (mavenProject == null)   return;
  Element config=mavenProject.getPluginConfiguration("org.apache.maven.plugins","maven-surefire-plugin");
  if (config == null)   return;
  List<String> paths=MavenJDOMUtil.findChildrenValuesByPath(config,"additionalClasspathElements","additionalClasspathElement");
  if (paths.size() > 0) {
    MavenDomProjectModel domModel=MavenDomUtil.getMavenDomProjectModel(module.getProject(),mavenProject.getFile());
    for (    String path : paths) {
      if (domModel != null) {
        path=MavenPropertyResolver.resolve(path,domModel);
      }
      javaParameters.getClassPath().add(path);
    }
  }
  Element systemPropertyVariables=config.getChild("systemPropertyVariables");
  if (systemPropertyVariables != null) {
    List<Element> propertiesDefinitions=(List<Element>)systemPropertyVariables.getChildren();
    String[] params=new String[propertiesDefinitions.size()];
    int i=0;
    for (    Element element : propertiesDefinitions) {
      params[i++]="-D" + element.getName() + "="+ element.getValue();
    }
    javaParameters.getVMParametersList().prependAll(params);
  }
  Element environmentVariables=config.getChild("environmentVariables");
  if (environmentVariables != null) {
    for (    Element element : (List<Element>)environmentVariables.getChildren()) {
      String variableName=element.getName();
      String value=element.getValue();
      javaParameters.addEnv(variableName,value);
    }
  }
}
