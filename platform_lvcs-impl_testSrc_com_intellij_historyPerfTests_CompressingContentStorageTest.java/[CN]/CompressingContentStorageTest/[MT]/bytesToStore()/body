{
  return ("package com.intellij.historyPerfTests;\n" + "\n" + "import com.intellij.history.core.storage.CompressingContentStorage;\n"+ "import com.intellij.history.core.storage.IContentStorage;\n"+ "import com.intellij.history.utils.RunnableAdapter;\n"+ "import com.intellij.idea.Bombed;\n"+ "import org.junit.Before;\n"+ "import org.junit.Test;\n"+ "\n"+ "import java.io.IOException;\n"+ "import java.util.Calendar;\n"+ "\n"+ "@Bombed(month = Calendar.NOVEMBER, day = 31, user = \"anton\")\n"+ "public class CompressingContentStorageTest extends PerformanceTestCase {\n"+ "  CompressingContentStorage s;\n"+ "\n"+ "  @Before\n"+ "  public void setUp() {\n"+ "    s = new CompressingContentStorage(new MyContentStorage());\n"+ "  }\n"+ "\n"+ "  @Test\n"+ "  public void testCompression() throws IOException {\n"+ "    assertExecutionTime(300, new RunnableAdapter() {\n"+ "      public void doRun() throws Exception {\n"+ "        for (int i = 0; i < 10000; i++) {\n"+ "          s.store(bytesToStore());\n"+ "        }\n"+ "      }\n"+ "    });\n"+ "  }\n"+ "\n"+ "  @Test\n"+ "  public void testDecompression() throws IOException {\n"+ "    s.store(bytesToStore());\n"+ "\n"+ "    assertExecutionTime(140, new RunnableAdapter() {\n"+ "      public void doRun() throws Exception {\n"+ "        for (int i = 0; i < 10000; i++) {\n"+ "          s.load(0);\n"+ "        }\n"+ "      }\n"+ "    });\n"+ "  }\n"+ "\n"+ "  private byte[] bytesToStore() {\n"+ "    return \"hello, world\".getBytes();\n"+ "  }\n"+ "\n"+ "  class MyContentStorage implements IContentStorage {\n"+ "    byte[] myContent;\n"+ "\n"+ "    public int store(byte[] content) throws IOException {\n"+ "      myContent = content;\n"+ "      return 0;\n"+ "    }\n"+ "\n"+ "    public byte[] load(int id) throws IOException {\n"+ "      return myContent;\n"+ "    }\n"+ "\n"+ "    public void close() {\n"+ "      throw new UnsupportedOperationException();\n"+ "    }\n"+ "\n"+ "    public void remove(int id) {\n"+ "      throw new UnsupportedOperationException();\n"+ "    }\n"+ "\n"+ "    public int getVersion() {\n"+ "      throw new UnsupportedOperationException();\n"+ "    }\n"+ "\n"+ "    public void setVersion(final int version) {\n"+ "      throw new UnsupportedOperationException();\n"+ "    }\n"+ "  }\n"+ "}").getBytes();
}
