{
  if (equals(scope)) {
    return this;
  }
  if (scope instanceof DirectoryScope) {
    if (in(((DirectoryScope)scope).myDirectory)) {
      return this;
    }
    VirtualFile[] newDirectories=ArrayUtil.append(myDirectories,((DirectoryScope)scope).myDirectory,VirtualFile.class);
    BitSet newWithSubdirectories=(BitSet)myWithSubdirectories.clone();
    newWithSubdirectories.set(myDirectories.length,((DirectoryScope)scope).myWithSubdirectories);
    return new DirectoriesScope(getProject(),newDirectories,newWithSubdirectories);
  }
  if (scope instanceof DirectoriesScope) {
    DirectoriesScope other=(DirectoriesScope)scope;
    List<VirtualFile> newDirectories=new ArrayList<VirtualFile>(myDirectories.length + other.myDirectories.length);
    newDirectories.addAll(Arrays.asList(other.myDirectories));
    BitSet newWithSubdirectories=(BitSet)myWithSubdirectories.clone();
    VirtualFile[] directories=other.myDirectories;
    for (int i=0; i < directories.length; i++) {
      VirtualFile otherDirectory=directories[i];
      if (!in(otherDirectory)) {
        newWithSubdirectories.set(newDirectories.size(),other.myWithSubdirectories.get(i));
        newDirectories.add(otherDirectory);
      }
    }
    return new DirectoriesScope(getProject(),newDirectories.toArray(new VirtualFile[newDirectories.size()]),newWithSubdirectories);
  }
  return super.uniteWith(scope);
}
