{
  if (myWasTreeInitialized)   return;
  myWasTreeInitialized=true;
  super.initTree();
  new TreeSpeedSearch(myTree,new Convertor<TreePath,String>(){
    public String convert(    final TreePath treePath){
      return ((MyNode)treePath.getLastPathComponent()).getDisplayName();
    }
  }
,true);
  TreeToolTipHandler.install(myTree);
  ToolTipManager.sharedInstance().registerComponent(myTree);
  myTree.setCellRenderer(new ColoredTreeCellRenderer(){
    public void customizeCellRenderer(    JTree tree,    Object value,    boolean selected,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      if (value instanceof MyNode) {
        final MyNode node=(MyNode)value;
        if (node.getConfigurable() == null) {
          return;
        }
        final String displayName=node.getDisplayName();
        final Icon icon=node.getConfigurable().getIcon();
        setIcon(icon);
        setToolTipText(null);
        setFont(UIUtil.getTreeFont());
        if (node.isDisplayInBold()) {
          append(displayName,SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES);
        }
 else {
          final Object object=node.getConfigurable().getEditableObject();
          final boolean unused=myContext.isUnused(object,node);
          final boolean invalid=myContext.isInvalid(object);
          if (unused || invalid) {
            Color fg=unused ? UIUtil.getTextInactiveTextColor() : selected && hasFocus ? UIUtil.getTreeSelectionForeground() : UIUtil.getTreeForeground();
            append(displayName,new SimpleTextAttributes(invalid ? SimpleTextAttributes.STYLE_WAVED : SimpleTextAttributes.STYLE_PLAIN,fg,Color.red));
            setToolTipText(composeTooltipMessage(invalid,object,displayName,unused));
          }
 else {
            append(displayName,selected && hasFocus ? SimpleTextAttributes.SELECTED_SIMPLE_CELL_ATTRIBUTES : SimpleTextAttributes.REGULAR_ATTRIBUTES);
          }
        }
      }
    }
  }
);
}
