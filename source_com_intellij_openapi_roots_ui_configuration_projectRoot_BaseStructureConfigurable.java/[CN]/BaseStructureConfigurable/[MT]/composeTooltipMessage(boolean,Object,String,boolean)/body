{
  final StringBuilder buf=StringBuilderSpinAllocator.alloc();
  try {
    if (invalid) {
      if (object instanceof Module) {
        final Module module=(Module)object;
        final Map<String,Set<String>> problems=myContext.myValidityCache.get(module);
        if (problems.containsKey(StructureConfigrableContext.NO_JDK)) {
          buf.append(StructureConfigrableContext.NO_JDK).append("\n");
        }
        final Set<String> deletedLibraries=problems.get(StructureConfigrableContext.DELETED_LIBRARIES);
        if (deletedLibraries != null) {
          buf.append(ProjectBundle.message("project.roots.library.problem.message",deletedLibraries.size()));
          for (          String problem : deletedLibraries) {
            if (deletedLibraries.size() > 1) {
              buf.append(" - ");
            }
            buf.append("\'").append(problem).append("\'").append("\n");
          }
        }
      }
 else {
        buf.append(ProjectBundle.message("project.roots.tooltip.library.misconfigured",displayName)).append("\n");
      }
    }
    if (unused) {
      buf.append(ProjectBundle.message("project.roots.tooltip.unused",displayName));
    }
    return buf.toString();
  }
  finally {
    StringBuilderSpinAllocator.dispose(buf);
  }
}
