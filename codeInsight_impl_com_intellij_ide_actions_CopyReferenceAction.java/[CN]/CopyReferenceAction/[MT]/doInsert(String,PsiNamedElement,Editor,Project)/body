{
  final PsiDocumentManager documentManager=PsiDocumentManager.getInstance(project);
  Document document=editor.getDocument();
  final PsiFile file=documentManager.getPsiFile(document);
  final int offset=editor.getCaretModel().getOffset();
  PsiElement elementAtCaret=file.findElementAt(offset);
  if (elementAtCaret == null)   return;
  fqn=fqn.replace('#','.');
  String toInsert;
  String suffix="";
  if (elementToInsert instanceof PsiMethod && PsiTreeUtil.getParentOfType(elementAtCaret,PsiDocComment.class) != null) {
    PsiMethod method=(PsiMethod)elementToInsert;
    PsiClass aClass=method.getContainingClass();
    String className=aClass == null ? "" : aClass.getQualifiedName();
    toInsert=className == null ? "" : className;
    if (toInsert.length() != 0)     toInsert+="#";
    toInsert+=method.getName() + "(";
    PsiParameter[] parameters=method.getParameterList().getParameters();
    for (int i=0; i < parameters.length; i++) {
      PsiParameter parameter=parameters[i];
      if (i != 0)       toInsert+=", ";
      toInsert+=parameter.getType().getCanonicalText();
    }
    toInsert+=")";
  }
 else   if (elementToInsert == null || PsiTreeUtil.getNonStrictParentOfType(elementAtCaret,PsiLiteralExpression.class,PsiComment.class) != null || PsiTreeUtil.getNonStrictParentOfType(elementAtCaret,PsiJavaFile.class) == null) {
    toInsert=fqn;
  }
 else {
    toInsert=elementToInsert.getName();
    if (elementToInsert instanceof PsiMethod) {
      suffix="()";
    }
    final PsiElementFactory factory=PsiManager.getInstance(project).getElementFactory();
    final PsiExpression expression=factory.createExpressionFromText(toInsert + suffix,elementAtCaret);
    final PsiReferenceExpression referenceExpression=expression instanceof PsiMethodCallExpression ? ((PsiMethodCallExpression)expression).getMethodExpression() : expression instanceof PsiReferenceExpression ? (PsiReferenceExpression)expression : null;
    if (referenceExpression == null || referenceExpression.advancedResolve(true).getElement() != elementToInsert) {
      toInsert=fqn;
    }
  }
  if (toInsert == null)   toInsert="";
  document.insertString(offset,toInsert + suffix);
  documentManager.commitDocument(document);
  int endOffset=offset + toInsert.length() + suffix.length();
  RangeMarker rangeMarker=document.createRangeMarker(endOffset,endOffset);
  elementAtCaret=file.findElementAt(offset);
  if (elementAtCaret != null) {
    shortenReference(elementAtCaret);
  }
  CodeStyleManager.getInstance(project).adjustLineIndent(file,offset);
  int caretOffset=rangeMarker.getEndOffset();
  if (elementToInsert instanceof PsiMethod) {
    caretOffset--;
  }
  editor.getCaretModel().moveToOffset(caretOffset);
}
