{
  myModel=new ListTableModel<MyFilesTableRowElement>(new ColumnInfo[]{IS_SHOW,FILE,IS_SKIP_CONTENT});
  myFilesTable=new TableView(myModel);
  final TableCellRenderer booleanCellRenderer=new TableCellRenderer(){
    public Component getTableCellRendererComponent(    JTable table,    Object value,    boolean isSelected,    boolean hasFocus,    int row,    int column){
      final Component component=myFilesTable.getDefaultRenderer(Boolean.class).getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
      if (component instanceof JComponent) {
        ((JComponent)component).setBorder(null);
      }
      return component;
    }
  }
;
  myFilesTable.getColumnModel().getColumn(0).setCellRenderer(booleanCellRenderer);
  myFilesTable.getColumnModel().getColumn(2).setCellRenderer(booleanCellRenderer);
  myFilesTable.setColumnSelectionAllowed(false);
  myFilesTable.setShowGrid(false);
  myFilesTable.setDragEnabled(false);
  myFilesTable.setShowHorizontalLines(false);
  myFilesTable.setShowVerticalLines(false);
  myFilesTable.setIntercellSpacing(new Dimension(0,0));
  myAddButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ArrayList<MyFilesTableRowElement> newList=new ArrayList<MyFilesTableRowElement>(myModel.getItems());
      final Pair<String,String> selectedNameLocation=showEditorDialog("","");
      if (selectedNameLocation != null) {
        newList.add(new MyFilesTableRowElement(selectedNameLocation.first,selectedNameLocation.second,false,true));
        myModel.setItems(newList);
        int index=myModel.getRowCount() - 1;
        myModel.fireTableRowsInserted(index,index);
        myFilesTable.setRowSelectionInterval(index,index);
      }
    }
  }
);
  myRemoveButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      TableUtil.stopEditing(myFilesTable);
      final int[] selected=myFilesTable.getSelectedRows();
      if (selected == null || selected.length == 0)       return;
      for (int i=selected.length - 1; i >= 0; i--) {
        myModel.removeRow(selected[i]);
      }
      for (int i=selected.length - 1; i >= 0; i--) {
        int idx=selected[i];
        myModel.fireTableRowsDeleted(idx,idx);
      }
      int selection=selected[0];
      if (selection >= myModel.getRowCount()) {
        selection=myModel.getRowCount() - 1;
      }
      if (selection >= 0) {
        myFilesTable.setRowSelectionInterval(selection,selection);
      }
      myFilesTable.requestFocus();
    }
  }
);
  myRemoveButton.setEnabled(false);
  myFilesTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      myRemoveButton.setEnabled(myFilesTable.getSelectedRowCount() >= 1);
    }
  }
);
  final JScrollPane scrollPane=ScrollPaneFactory.createScrollPane(myFilesTable);
  scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
  myWholePanel.add(scrollPane,BorderLayout.CENTER);
  myWholePanel.add(myButtonsPanel,BorderLayout.EAST);
  myWholePanel.setBorder(BorderFactory.createTitledBorder(DiagnosticBundle.message("log.monitor.group")));
  myWholePanel.setPreferredSize(new Dimension(-1,150));
}
