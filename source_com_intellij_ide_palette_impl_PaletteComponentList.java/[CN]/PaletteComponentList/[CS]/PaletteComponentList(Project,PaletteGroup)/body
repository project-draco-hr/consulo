{
  myProject=project;
  myGroup=group;
  setModel(new AbstractListModel(){
    public int getSize(){
      return myGroup.getItems().length;
    }
    public Object getElementAt(    int index){
      return myGroup.getItems()[index];
    }
  }
);
  addMouseListener(new MouseAdapter(){
    @Override public void mouseEntered(    MouseEvent e){
      setHoverIndex(locationToIndex(e.getPoint()));
    }
    @Override public void mouseExited(    MouseEvent e){
      setHoverIndex(-1);
    }
    @Override public void mousePressed(    MouseEvent e){
      myNeedClearSelection=(SwingUtilities.isLeftMouseButton(e) && myBeforeClickSelectedRow >= 0 && locationToIndex(e.getPoint()) == myBeforeClickSelectedRow && !UIUtil.isControlKeyDown(e) && !e.isShiftDown());
    }
    @Override public void mouseReleased(    MouseEvent e){
      if (SwingUtilities.isLeftMouseButton(e) && myBeforeClickSelectedRow >= 0 && locationToIndex(e.getPoint()) == myBeforeClickSelectedRow && !UIUtil.isControlKeyDown(e) && !e.isShiftDown() && myNeedClearSelection) {
        clearSelection();
      }
    }
  }
);
  addMouseListener(new PopupHandler(){
    public void invokePopup(    final Component comp,    final int x,    final int y){
      requestFocusInWindow();
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          int index=locationToIndex(new Point(x,y));
          PaletteItem[] items=myGroup.getItems();
          if (index >= 0 && index < items.length) {
            if (getSelectedIndex() != index) {
              addSelectionInterval(index,index);
            }
            PaletteItem item=items[index];
            ActionGroup group=item.getPopupActionGroup();
            if (group != null) {
              ActionPopupMenu popupMenu=ActionManager.getInstance().createActionPopupMenu(ActionPlaces.UNKNOWN,group);
              popupMenu.getComponent().show(comp,x,y);
            }
          }
        }
      }
);
    }
  }
);
  addMouseMotionListener(new MouseMotionAdapter(){
    public void mouseMoved(    MouseEvent e){
      setHoverIndex(locationToIndex(e.getPoint()));
    }
  }
);
  setCellRenderer(new ComponentCellRenderer());
  setVisibleRowCount(0);
  setLayoutOrientation(HORIZONTAL_WRAP);
  setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  final DnDManager dndManager=DnDManager.getInstance(project);
  dndManager.registerSource(new MyDnDSource(),this);
  dndManager.registerTarget(new MyDnDTarget(),this);
  initActions();
}
