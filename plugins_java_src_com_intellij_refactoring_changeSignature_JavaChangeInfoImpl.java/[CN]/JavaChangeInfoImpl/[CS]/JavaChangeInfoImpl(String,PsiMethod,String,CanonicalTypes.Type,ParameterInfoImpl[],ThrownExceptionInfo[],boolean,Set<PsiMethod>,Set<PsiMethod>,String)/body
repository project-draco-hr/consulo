{
  this.newVisibility=newVisibility;
  this.method=method;
  this.newName=newName;
  newReturnType=newType;
  this.newParms=newParms;
  wasVararg=method.isVarArgs();
  this.isGenerateDelegate=generateDelegate;
  this.propagateExceptionsMethods=propagateExceptionsMethods;
  this.propagateParametersMethods=propagateParametersMethods;
  this.oldName=oldName;
  final PsiManager manager=method.getManager();
  if (!method.isConstructor()) {
    oldType=JavaPsiFacade.getInstance(manager.getProject()).getElementFactory().createTypeElement(method.getReturnType()).getText();
  }
 else {
    oldType=null;
  }
  fillOldParams(method);
  isVisibilityChanged=!method.hasModifierProperty(newVisibility);
  isNameChanged=!newName.equals(this.oldName);
  if (oldParameterNames.length != newParms.length) {
    isParameterSetOrOrderChanged=true;
  }
 else {
    for (int i=0; i < newParms.length; i++) {
      ParameterInfoImpl parmInfo=newParms[i];
      if (i != parmInfo.oldParameterIndex) {
        isParameterSetOrOrderChanged=true;
        break;
      }
      if (!parmInfo.getName().equals(oldParameterNames[i])) {
        isParameterNamesChanged=true;
      }
      try {
        if (!parmInfo.getTypeText().equals(oldParameterTypes[i])) {
          isParameterTypesChanged=true;
        }
      }
 catch (      IncorrectOperationException e) {
        isParameterTypesChanged=true;
      }
    }
  }
  setupPropagationEnabled(method.getParameterList().getParameters(),newParms);
  setupExceptions(newExceptions,method);
  toRemoveParm=new boolean[oldParameterNames.length];
  Arrays.fill(toRemoveParm,true);
  for (  ParameterInfoImpl info : newParms) {
    if (info.oldParameterIndex < 0)     continue;
    toRemoveParm[info.oldParameterIndex]=false;
  }
  PsiElementFactory factory=JavaPsiFacade.getInstance(manager.getProject()).getElementFactory();
  defaultValues=new PsiExpression[newParms.length];
  for (int i=0; i < newParms.length; i++) {
    ParameterInfoImpl info=newParms[i];
    if (info.oldParameterIndex < 0 && !info.isVarargType()) {
      if (StringUtil.isEmpty(info.defaultValue))       continue;
      try {
        defaultValues[i]=factory.createExpressionFromText(info.defaultValue,method);
      }
 catch (      IncorrectOperationException e) {
        LOG.info(e);
      }
    }
  }
  if (this.newParms.length == 0) {
    retainsVarargs=false;
    obtainsVarags=false;
    arrayToVarargs=false;
  }
 else {
    final ParameterInfoImpl lastNewParm=this.newParms[this.newParms.length - 1];
    obtainsVarags=lastNewParm.isVarargType();
    retainsVarargs=lastNewParm.oldParameterIndex >= 0 && obtainsVarags;
    if (retainsVarargs) {
      arrayToVarargs=oldParameterTypes[lastNewParm.oldParameterIndex].endsWith("[]");
    }
 else {
      arrayToVarargs=false;
    }
  }
  if (isNameChanged) {
    newNameIdentifier=factory.createIdentifier(newName);
  }
}
