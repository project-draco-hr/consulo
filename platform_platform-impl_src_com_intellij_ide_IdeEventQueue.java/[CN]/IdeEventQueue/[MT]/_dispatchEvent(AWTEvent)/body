{
  if (e.getID() == MouseEvent.MOUSE_DRAGGED) {
    DnDManagerImpl dndManager=(DnDManagerImpl)DnDManager.getInstance();
    if (dndManager != null) {
      dndManager.setLastDropHandler(null);
    }
  }
  myEventCount++;
  if (processAppActivationEvents(e))   return;
  fixStickyFocusedComponents(e);
  if (!myPopupManager.isPopupActive()) {
    enterSuspendModeIfNeeded(e);
  }
  if (e instanceof KeyEvent) {
    myKeyboardBusy=e.getID() != KeyEvent.KEY_RELEASED || ((KeyEvent)e).getModifiers() != 0;
  }
  if (typeAheadDispatchToFocusManager(e))   return;
  if (e instanceof WindowEvent) {
    ActivityTracker.getInstance().inc();
  }
  if (e instanceof KeyEvent || e instanceof MouseEvent) {
    ActivityTracker.getInstance().inc();
synchronized (myLock) {
      myIdleRequestsAlarm.cancelAllRequests();
      for (      Runnable idleListener : myIdleListeners) {
        final MyFireIdleRequest request=myListener2Request.get(idleListener);
        if (request == null) {
          LOG.error("There is no request for " + idleListener);
        }
        int timeout=request.getTimeout();
        myIdleRequestsAlarm.addRequest(request,timeout,ModalityState.NON_MODAL);
      }
      if (KeyEvent.KEY_PRESSED == e.getID() || KeyEvent.KEY_TYPED == e.getID() || MouseEvent.MOUSE_PRESSED == e.getID() || MouseEvent.MOUSE_RELEASED == e.getID() || MouseEvent.MOUSE_CLICKED == e.getID()) {
        addIdleTimeCounterRequest();
        for (        Runnable activityListener : myActivityListeners) {
          activityListener.run();
        }
        if (e instanceof KeyEvent) {
          if (e.getID() == KeyEvent.KEY_PRESSED) {
            getUserActivity().onKeyboardActivity((KeyEvent)e);
          }
        }
 else         if (e instanceof MouseEvent) {
          if (e.getID() == MouseEvent.MOUSE_PRESSED) {
            getUserActivity().onMouseActivity((MouseEvent)e);
          }
        }
      }
    }
  }
  if (myPopupManager.isPopupActive() && myPopupManager.dispatch(e)) {
    return;
  }
  for (  EventDispatcher eachDispatcher : myDispatchers) {
    if (eachDispatcher.dispatch(e)) {
      return;
    }
  }
  if (e instanceof InputMethodEvent) {
    if (SystemInfo.isMac && myKeyEventDispatcher.isWaitingForSecondKeyStroke()) {
      return;
    }
  }
  if (e instanceof InputEvent && Patches.SPECIAL_WINPUT_METHOD_PROCESSING) {
    final InputEvent inputEvent=(InputEvent)e;
    if (!inputEvent.getComponent().isShowing()) {
      return;
    }
  }
  if (e instanceof ComponentEvent && myWindowManager != null) {
    myWindowManager.dispatchComponentEvent((ComponentEvent)e);
  }
  if (e instanceof KeyEvent) {
    if (mySuspendMode || !myKeyEventDispatcher.dispatchKeyEvent((KeyEvent)e)) {
      defaultDispatchEvent(e);
    }
 else {
      ((KeyEvent)e).consume();
      defaultDispatchEvent(e);
    }
  }
 else   if (e instanceof MouseEvent) {
    if (!myMouseEventDispatcher.dispatchMouseEvent((MouseEvent)e)) {
      defaultDispatchEvent(e);
    }
  }
 else {
    defaultDispatchEvent(e);
  }
}
