{
  if (e != null && !(e instanceof InputEvent))   return;
  final KeyboardFocusManager mgr=KeyboardFocusManager.getCurrentKeyboardFocusManager();
  if (Registry.is("actionSystem.fixStickyFocusedWindows")) {
    fixStickyWindow(mgr,mgr.getActiveWindow(),"setGlobalActiveWindow");
    fixStickyWindow(mgr,mgr.getFocusedWindow(),"setGlobalFocusedWindow");
  }
  if (Registry.is("actionSystem.fixNullFocusedComponent")) {
    final Component focusOwner=mgr.getFocusOwner();
    if (focusOwner == null || !focusOwner.isShowing() || focusOwner instanceof JFrame || focusOwner instanceof JDialog) {
      final ApplicationImpl app=(ApplicationImpl)ApplicationManager.getApplication();
      if (app != null && !app.isComponentsCreated()) {
        return;
      }
      boolean mouseEventsAhead=isMouseEventAhead(e);
      boolean focusTransferred=IdeFocusManager.getGlobalInstance().isFocusBeingTransferred();
      boolean okToFixFocus=!mouseEventsAhead && (!focusTransferred || !Registry.is("actionSystem.fixLostTyping"));
      if (okToFixFocus) {
        Window showingWindow=mgr.getActiveWindow();
        if (showingWindow == null) {
          Method getNativeFocusOwner=ReflectionUtil.getDeclaredMethod(KeyboardFocusManager.class,"getNativeFocusOwner");
          if (getNativeFocusOwner != null) {
            getNativeFocusOwner.setAccessible(true);
            try {
              Object owner=getNativeFocusOwner.invoke(mgr);
              if (owner instanceof Component) {
                Component nativeFocusOwner=(Component)owner;
                if (nativeFocusOwner instanceof Window) {
                  showingWindow=(Window)nativeFocusOwner;
                }
 else {
                  showingWindow=SwingUtilities.getWindowAncestor(nativeFocusOwner);
                }
              }
            }
 catch (            Exception e1) {
              LOG.debug(e1);
            }
          }
        }
        if (showingWindow != null) {
          final IdeFocusManager fm=IdeFocusManager.findInstanceByComponent(showingWindow);
          ExpirableRunnable maybeRequestDefaultFocus=new ExpirableRunnable(){
            public void run(){
              if (getPopupManager().requestDefaultFocus(false))               return;
              final Application app=ApplicationManager.getApplication();
              if (app != null && app.isActive()) {
                fm.requestDefaultFocus(false);
              }
            }
            @Override public boolean isExpired(){
              return !UIUtil.isMeaninglessFocusOwner(mgr.getFocusOwner());
            }
          }
;
          fm.revalidateFocus(maybeRequestDefaultFocus);
        }
      }
    }
  }
}
