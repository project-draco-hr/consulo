{
  if (myTargetChunks != null) {
    return;
  }
  for (  BuildTarget<?> target : getAllTargets()) {
    myDependencies.put(target,target.computeDependencies());
  }
  GraphGenerator<BuildTarget<?>> graph=GraphGenerator.create(CachingSemiGraph.create(new GraphGenerator.SemiGraph<BuildTarget<?>>(){
    @Override public Collection<BuildTarget<?>> getNodes(){
      return myAllTargets;
    }
    @Override public Iterator<BuildTarget<?>> getIn(    BuildTarget<?> n){
      return myDependencies.get(n).iterator();
    }
  }
));
  final DFSTBuilder<BuildTarget<?>> builder=new DFSTBuilder<BuildTarget<?>>(graph);
  final TIntArrayList sccs=builder.getSCCs();
  myTargetChunks=new ArrayList<BuildTargetChunk>(sccs.size());
  sccs.forEach(new TIntProcedure(){
    int myTNumber=0;
    public boolean execute(    int size){
      final Set<BuildTarget<?>> chunkNodes=new LinkedHashSet<BuildTarget<?>>();
      for (int j=0; j < size; j++) {
        final BuildTarget<?> node=builder.getNodeByTNumber(myTNumber + j);
        chunkNodes.add(node);
      }
      myTargetChunks.add(new BuildTargetChunk(chunkNodes));
      myTNumber+=size;
      return true;
    }
  }
);
}
