{
  final DefaultMutableTreeNode root=new DefaultMutableTreeNode("Root");
  myLeftTreeModel=new DefaultTreeModel(root);
  initLeftTreeModel();
  myLeftTree=new Tree(myLeftTreeModel);
  initTree(myLeftTree,false);
  myLeftTree.addTreeExpansionListener(new TreeExpansionListener(){
    public void treeCollapsed(    TreeExpansionEvent event){
    }
    public void treeExpanded(    TreeExpansionEvent event){
      final DefaultMutableTreeNode expandedNode=(DefaultMutableTreeNode)event.getPath().getLastPathComponent();
      for (int i=0; i < expandedNode.getChildCount(); i++) {
        DefaultMutableTreeNode child=(DefaultMutableTreeNode)expandedNode.getChildAt(i);
        if (child.getChildCount() == 0) {
          Module module=((MyUserObject)child.getUserObject()).getModule();
          final Iterator<Module> out=myModulesGraph.getOut(module);
          while (out.hasNext()) {
            final Module nextModule=out.next();
            child.add(new DefaultMutableTreeNode(new MyUserObject(false,nextModule)));
          }
          sortSubTree(child);
        }
      }
    }
  }
);
  myLeftTree.addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      final TreePath selectionPath=myLeftTree.getSelectionPath();
      if (selectionPath != null) {
        myPathField.setText(StringUtil.join(selectionPath.getPath(),new Function<Object,String>(){
          public String fun(          Object o){
            final Object userObject=((DefaultMutableTreeNode)o).getUserObject();
            if (userObject instanceof MyUserObject) {
              return ((MyUserObject)userObject).getModule().getName();
            }
            return "";
          }
        }
,":"));
        final DefaultMutableTreeNode selection=(DefaultMutableTreeNode)selectionPath.getLastPathComponent();
        if (selection != null) {
          TreeUtil.traverseDepth(selection,new TreeUtil.Traverse(){
            public boolean accept(            Object node){
              DefaultMutableTreeNode treeNode=(DefaultMutableTreeNode)node;
              if (treeNode.getUserObject() instanceof MyUserObject) {
                ((MyUserObject)treeNode.getUserObject()).setInCycle(false);
              }
              return true;
            }
          }
);
          selectCycleUpward(selection);
          buildRightTree(((MyUserObject)selection.getUserObject()).getModule());
        }
      }
    }
  }
);
  TreeUtil.selectFirstNode(myLeftTree);
}
