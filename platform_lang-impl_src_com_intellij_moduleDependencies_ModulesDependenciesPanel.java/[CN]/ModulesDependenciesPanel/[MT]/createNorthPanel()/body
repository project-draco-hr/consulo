{
  DefaultActionGroup group=new DefaultActionGroup();
  group.add(new AnAction(CommonBundle.message("action.close"),AnalysisScopeBundle.message("action.close.modules.dependencies.description"),AllIcons.Actions.Cancel){
    @Override public void actionPerformed(    AnActionEvent e){
      DependenciesAnalyzeManager.getInstance(myProject).closeContent(myContent);
    }
  }
);
  appendDependenciesAction(group);
  group.add(new ToggleAction(AnalysisScopeBundle.message("action.module.dependencies.direction"),"",isForwardDirection() ? AllIcons.Actions.SortAsc : AllIcons.Actions.SortDesc){
    @Override public boolean isSelected(    AnActionEvent e){
      return isForwardDirection();
    }
    @Override public void setSelected(    AnActionEvent e,    boolean state){
      PropertiesComponent.getInstance(myProject).setValue(DIRECTION,String.valueOf(state));
      initLeftTreeModel();
    }
    @Override public void update(    final AnActionEvent e){
      e.getPresentation().setIcon(isForwardDirection() ? AllIcons.Actions.SortAsc : AllIcons.Actions.SortDesc);
    }
  }
);
  group.add(new ContextHelpAction(ourHelpID));
  ActionToolbar toolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,group,true);
  final JPanel panel=new JPanel(new BorderLayout());
  panel.add(toolbar.getComponent(),BorderLayout.NORTH);
  panel.add(myPathField,BorderLayout.SOUTH);
  myPathField.setEditable(false);
  return panel;
}
