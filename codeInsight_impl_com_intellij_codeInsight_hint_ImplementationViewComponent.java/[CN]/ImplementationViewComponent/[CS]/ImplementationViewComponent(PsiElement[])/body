{
  super(new BorderLayout());
  List<PsiElement> candidates=new ArrayList<PsiElement>(elements.length);
  myIndex=0;
  List<FileDescriptor> files=new ArrayList<FileDescriptor>(elements.length);
  for (  PsiElement element : elements) {
    PsiFile file=getContainingFile(element);
    if (file == null)     continue;
    files.add(new FileDescriptor(file.getVirtualFile()));
    candidates.add(element.getNavigationElement());
  }
  myElements=candidates.toArray(new PsiElement[candidates.size()]);
  if (myElements.length == 0)   return;
  final Project project=elements[0].getProject();
  EditorFactory factory=EditorFactory.getInstance();
  Document doc=factory.createDocument("");
  doc.setReadOnly(true);
  myEditor=factory.createEditor(doc,project);
  PsiFile psiFile=getContainingFile(myElements[0]);
  EditorHighlighter highlighter=HighlighterFactory.createHighlighter(project,psiFile.getName());
  ((EditorEx)myEditor).setHighlighter(highlighter);
  ((EditorEx)myEditor).setBackgroundColor(EditorFragmentComponent.getBackgroundColor(myEditor));
  myEditor.getSettings().setAdditionalLinesCount(1);
  myEditor.getSettings().setAdditionalColumnsCount(1);
  myEditor.getSettings().setLineMarkerAreaShown(false);
  myEditor.getSettings().setLineNumbersShown(false);
  myEditor.getSettings().setFoldingOutlineShown(false);
  myBinarySwitch=new CardLayout();
  myViewingPanel=new JPanel(myBinarySwitch);
  myViewingPanel.add(myEditor.getComponent(),TEXT_PAGE_KEY);
  myBinaryPanel=new JPanel(new BorderLayout());
  myViewingPanel.add(myBinaryPanel,BINARY_PAGE_KEY);
  add(myViewingPanel,BorderLayout.CENTER);
  final ActionToolbar toolbar=createToolbar();
  myLocationLabel=new JLabel();
  myCountLabel=new JLabel();
  JPanel header=new JPanel(new BorderLayout());
  header.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  JPanel toolbarPanel=new JPanel(new FlowLayout());
  toolbarPanel.add(toolbar.getComponent());
  registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (myHint != null) {
        myHint.cancel();
      }
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0),WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  if (myElements.length > 1) {
    myFileChooser=new JComboBox(files.toArray(new FileDescriptor[files.size()]));
    myFileChooser.setRenderer(new DefaultListCellRenderer(){
      public Component getListCellRendererComponent(      JList list,      Object value,      int index,      boolean isSelected,      boolean cellHasFocus){
        super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
        VirtualFile file=((FileDescriptor)value).myFile;
        setIcon(file.getIcon());
        setForeground(FileStatusManager.getInstance(project).getStatus(file).getColor());
        setText(file.getPresentableName());
        return this;
      }
    }
);
    myFileChooser.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        int index=myFileChooser.getSelectedIndex();
        if (myIndex != index) {
          myIndex=index;
          updateControls();
        }
      }
    }
);
    toolbarPanel.add(myFileChooser);
    toolbarPanel.add(myCountLabel);
  }
 else {
    final JLabel label=new JLabel();
    VirtualFile file=psiFile.getVirtualFile();
    if (file != null) {
      label.setIcon(file.getIcon());
      label.setForeground(FileStatusManager.getInstance(project).getStatus(file).getColor());
      label.setText(file.getPresentableName());
      label.setBorder(new CompoundBorder(IdeBorderFactory.createBorder(),IdeBorderFactory.createEmptyBorder(0,0,0,5)));
    }
    toolbarPanel.add(label);
  }
  header.add(toolbarPanel,BorderLayout.WEST);
  header.add(myLocationLabel,BorderLayout.EAST);
  add(header,BorderLayout.NORTH);
  setPreferredSize(new Dimension(600,400));
  updateControls();
}
