{
  final String message;
  if (isNew) {
    message=GitBundle.message("ssh.new.host.key",hostname,port,fingerprint,serverHostKeyAlgorithm);
  }
 else {
    message=GitBundle.message("ssh.changed.host.key",hostname,port,fingerprint,serverHostKeyAlgorithm);
  }
  final int[] rc=new int[1];
  try {
    EventQueue.invokeAndWait(new Runnable(){
      public void run(){
        rc[0]=Messages.showYesNoDialog(myProject,message,GitBundle.getString("ssh.confirm.key.titile"),null);
      }
    }
);
  }
 catch (  InterruptedException e) {
    throw new RuntimeException("dialog failed",e);
  }
catch (  InvocationTargetException e) {
    throw new RuntimeException("dialog failed",e);
  }
  return rc[0] == 0;
}
