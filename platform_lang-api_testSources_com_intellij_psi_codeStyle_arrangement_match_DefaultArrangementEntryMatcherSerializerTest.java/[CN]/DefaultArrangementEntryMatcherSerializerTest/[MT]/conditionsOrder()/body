{
  ArrangementCompositeMatchCondition condition=new ArrangementCompositeMatchCondition();
  ArrangementEntryType typeToPreserve=FIELD;
  Set<ArrangementModifier> modifiersToPreserve=EnumSet.of(PUBLIC,STATIC,FINAL);
  condition.addOperand(new ArrangementAtomMatchCondition(TYPE,typeToPreserve));
  for (  ArrangementModifier modifier : modifiersToPreserve) {
    condition.addOperand(new ArrangementAtomMatchCondition(MODIFIER,modifier));
  }
  Element element=mySerializer.serialize(new StdArrangementEntryMatcher(condition));
  assertNotNull(element);
  for (  ArrangementEntryType type : ArrangementEntryType.values()) {
    if (type != typeToPreserve) {
      condition.addOperand(new ArrangementAtomMatchCondition(TYPE,type));
    }
  }
  for (  ArrangementModifier modifier : values()) {
    if (!modifiersToPreserve.contains(modifier)) {
      condition.addOperand(new ArrangementAtomMatchCondition(MODIFIER,modifier));
    }
  }
  for (  ArrangementEntryType type : ArrangementEntryType.values()) {
    if (type != typeToPreserve) {
      condition.removeOperand(new ArrangementAtomMatchCondition(TYPE,type));
    }
  }
  for (  ArrangementModifier modifier : values()) {
    if (!modifiersToPreserve.contains(modifier)) {
      condition.removeOperand(new ArrangementAtomMatchCondition(MODIFIER,modifier));
    }
  }
  Element actual=mySerializer.serialize(new StdArrangementEntryMatcher(condition));
  assertNotNull(actual);
  checkElements(element,actual);
}
