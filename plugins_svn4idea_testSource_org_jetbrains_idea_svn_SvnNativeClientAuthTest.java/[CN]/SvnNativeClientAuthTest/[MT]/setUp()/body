{
  super.setUp();
  setNativeAcceleration(true);
  myVcs=SvnVcs.getInstance(myProject);
  final SvnConfiguration configuration=SvnConfiguration.getInstance(myProject);
  final File svnconfig=FileUtil.createTempDirectory("svnconfig","");
  configuration.setConfigurationDirParameters(false,svnconfig.getPath());
  final SvnAuthenticationManager interactiveManager=configuration.getInteractiveManager(myVcs);
  final SvnTestInteractiveAuthentication authentication=new SvnTestInteractiveAuthentication(interactiveManager){
    @Override public int acceptServerAuthentication(    SVNURL url,    String realm,    Object certificate,    boolean resultMayBeStored){
      ++myCertificateAskedInteractivelyCount;
      return myCertificateAnswer;
    }
    @Override public SVNAuthentication requestClientAuthentication(    String kind,    SVNURL url,    String realm,    SVNErrorMessage errorMessage,    SVNAuthentication previousAuth,    boolean authMayBeStored){
      if (myCancelAuth)       return null;
      return super.requestClientAuthentication(kind,url,realm,errorMessage,previousAuth,authMayBeStored);
    }
  }
;
  interactiveManager.setAuthenticationProvider(authentication);
  final SvnAuthenticationManager manager=configuration.getAuthenticationManager(myVcs);
  manager.setAuthenticationProvider(authentication);
  authentication.addAuthentication(ISVNAuthenticationManager.PASSWORD,new Convertor<SVNURL,SVNAuthentication>(){
    @Override public SVNAuthentication convert(    SVNURL o){
      ++myCredentialsAskedInteractivelyCount;
      if (myCancelAuth)       return null;
      if (myCredentialsCorrect) {
        return new SVNPasswordAuthentication(outHttpUser,outHttpPassword,mySaveCredentials,o,false);
      }
 else {
        myCredentialsCorrect=true;
        return new SVNPasswordAuthentication("1234214 23 4234","324324",mySaveCredentials,o,false);
      }
    }
  }
);
  myCertificateAskedInteractivelyCount=0;
  myCredentialsAskedInteractivelyCount=0;
}
