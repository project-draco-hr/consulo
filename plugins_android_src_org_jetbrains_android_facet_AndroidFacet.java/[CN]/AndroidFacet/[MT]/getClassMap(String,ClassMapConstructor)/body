{
synchronized (myClassMapLock) {
    Map<String,SmartPsiElementPointer<PsiClass>> classMap=getInitialClassMap(className,constructor,false);
    final Map<String,PsiClass> result=new HashMap<String,PsiClass>();
    boolean shouldRebuildInitialMap=false;
    for (    final String key : classMap.keySet()) {
      final SmartPsiElementPointer<PsiClass> pointer=classMap.get(key);
      if (!isUpToDate(pointer,key,constructor)) {
        shouldRebuildInitialMap=true;
        break;
      }
      final PsiClass aClass=pointer.getElement();
      if (aClass != null) {
        result.put(key,aClass);
      }
    }
    if (shouldRebuildInitialMap) {
      result.clear();
      classMap=getInitialClassMap(className,constructor,true);
      for (      final String key : classMap.keySet()) {
        final SmartPsiElementPointer<PsiClass> pointer=classMap.get(key);
        final PsiClass aClass=pointer.getElement();
        if (aClass != null) {
          result.put(key,aClass);
        }
      }
    }
    final Project project=getModule().getProject();
    fillMap(className,constructor,ProjectScope.getProjectScope(project),result,false);
    return result;
  }
}
