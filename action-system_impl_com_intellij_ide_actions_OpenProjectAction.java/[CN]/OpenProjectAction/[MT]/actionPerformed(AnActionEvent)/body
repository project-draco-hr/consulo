{
  Project project=PlatformDataKeys.PROJECT.getData(e.getDataContext());
  final FileChooserDescriptor descriptor=new FileChooserDescriptor(true,true,false,false,false,false){
    public boolean isFileSelectable(    final VirtualFile file){
      return isProjectDirectory(file) || isProjectFile(file);
    }
    public Icon getOpenIcon(    final VirtualFile virtualFile){
      if (isProjectDirectory(virtualFile))       return Icons.PROJECT_ICON;
      final Icon icon=getImporterIcon(virtualFile,true);
      if (icon != null) {
        return icon;
      }
      return super.getOpenIcon(virtualFile);
    }
    public Icon getClosedIcon(    final VirtualFile virtualFile){
      if (isProjectDirectory(virtualFile))       return Icons.PROJECT_ICON;
      final Icon icon=getImporterIcon(virtualFile,false);
      if (icon != null) {
        return icon;
      }
      return super.getClosedIcon(virtualFile);
    }
    @Nullable public Icon getImporterIcon(    final VirtualFile virtualFile,    final boolean open){
      final ProjectOpenProcessor provider=ProjectUtil.getImportProvider(virtualFile);
      if (provider != null) {
        return provider.getIcon();
      }
      return null;
    }
    public boolean isFileVisible(    final VirtualFile file,    final boolean showHiddenFiles){
      return super.isFileVisible(file,showHiddenFiles) && (file.isDirectory() || isProjectFile(file));
    }
  }
;
  descriptor.setTitle(IdeBundle.message("title.open.project"));
  String[] extensions=new String[]{ProjectFileType.DOT_DEFAULT_EXTENSION};
  final ProjectOpenProcessor[] openProcessors=Extensions.getExtensions(ProjectOpenProcessor.EXTENSION_POINT_NAME);
  for (  ProjectOpenProcessor openProcessor : openProcessors) {
    final String[] supportedExtensions=openProcessor.getSupportedExtensions();
    if (supportedExtensions != null) {
      extensions=ArrayUtil.mergeArrays(extensions,supportedExtensions,String.class);
    }
  }
  descriptor.setDescription(IdeBundle.message("filter.project.files",StringUtil.join(extensions,", ")));
  final VirtualFile[] files=FileChooser.chooseFiles(project,descriptor);
  if (files.length == 0 || files[0] == null)   return;
  final Project openedProject=ProjectUtil.openOrImport(files[0].getPath(),project,false);
  if (openedProject == null) {
    Messages.showErrorDialog(project,IdeBundle.message("fail.open.project.message",files[0].getPath()),CommonBundle.message("title.error"));
  }
}
