{
  Project project=DataKeys.PROJECT.getData(e.getDataContext());
  final FileChooserDescriptor descriptor=new FileChooserDescriptor(true,false,false,false,false,false){
    public boolean isFileSelectable(    final VirtualFile file){
      return isProjectDirectory(file) || isProjectFile(file);
    }
    public Icon getOpenIcon(    final VirtualFile virtualFile){
      if (isProjectDirectory(virtualFile))       return Icons.PROJECT_ICON;
      final Icon icon=getImporterIcon(virtualFile,true);
      if (icon != null) {
        return icon;
      }
      return super.getOpenIcon(virtualFile);
    }
    public Icon getClosedIcon(    final VirtualFile virtualFile){
      if (isProjectDirectory(virtualFile))       return Icons.PROJECT_ICON;
      final Icon icon=getImporterIcon(virtualFile,false);
      if (icon != null) {
        return icon;
      }
      return super.getClosedIcon(virtualFile);
    }
    @Nullable public Icon getImporterIcon(    final VirtualFile virtualFile,    final boolean open){
      final ProjectImportProvider provider=ProjectUtil.getImportProvider(virtualFile);
      if (provider != null) {
        return provider.getIcon(virtualFile,open);
      }
      return null;
    }
    public boolean isFileVisible(    final VirtualFile file,    final boolean showHiddenFiles){
      return super.isFileVisible(file,showHiddenFiles) && (file.isDirectory() || isProjectFile(file));
    }
  }
;
  descriptor.setTitle(IdeBundle.message("title.open.project"));
  descriptor.setDescription(IdeBundle.message("filter.project.files"));
  final VirtualFile[] files=FileChooser.chooseFiles(project,descriptor);
  if (files.length == 0 || files[0] == null)   return;
  ProjectUtil.openOrImport(files[0].getPath(),project,false);
}
