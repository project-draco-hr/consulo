{
  if (element instanceof PsiAntTarget || element instanceof PsiAntProperty) {
    if (!CommonRefactoringUtil.checkReadOnlyStatus(project,element.getNavigationElement()))     return false;
    return true;
  }
  if (element instanceof XmlAttributeValue) {
    XmlAttribute value=(XmlAttribute)element.getParent();
    if (XmlUtil.isAntTargetDefinition(value) || XmlUtil.isAntPropertyDefinition(value)) {
      if (!CommonRefactoringUtil.checkReadOnlyStatus(project,element))       return false;
      return true;
    }
  }
  final String REFACTORING_NAME=RefactoringBundle.message("rename.title");
  if (element instanceof XmlTag || !(element instanceof PsiNamedElement || element instanceof XmlAttributeValue)) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("error.wrong.caret.position.symbol"));
    CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,message,null,project);
    return false;
  }
  if (!PsiManager.getInstance(project).isInProject(element)) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("error.out.of.project.element",UsageViewUtil.getType(element)));
    CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,message,null,project);
    return false;
  }
  return CommonRefactoringUtil.checkReadOnlyStatus(project,element);
}
