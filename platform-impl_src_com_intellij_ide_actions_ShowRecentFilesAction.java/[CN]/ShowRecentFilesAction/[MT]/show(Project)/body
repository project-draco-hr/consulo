{
  final DefaultListModel model=new DefaultListModel();
  VirtualFile[] selectedFiles=FileEditorManager.getInstance(project).getSelectedFiles();
  VirtualFile[] files=EditorHistoryManager.getInstance(project).getFiles();
  FileEditorProviderManager editorProviderManager=FileEditorProviderManager.getInstance();
  for (int i=files.length - 1; i >= 0; i--) {
    VirtualFile file=files[i];
    if (ArrayUtil.find(selectedFiles,file) == -1 && editorProviderManager.getProviders(project,file).length > 0) {
      model.addElement(file);
    }
  }
  final JLabel pathLabel=new JLabel(" ");
  pathLabel.setHorizontalAlignment(SwingConstants.RIGHT);
  if (true) {
    final Font font=pathLabel.getFont();
    pathLabel.setFont(font.deriveFont((float)10));
  }
  final JList list=new JList(model);
  list.addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_DELETE) {
        int index=list.getSelectedIndex();
        if (index == -1 || index >= list.getModel().getSize()) {
          return;
        }
        Object[] values=list.getSelectedValues();
        for (        Object value : values) {
          VirtualFile file=(VirtualFile)value;
          model.removeElement(file);
          if (model.getSize() > 0) {
            if (model.getSize() == index) {
              list.setSelectedIndex(model.getSize() - 1);
            }
 else             if (model.getSize() > index) {
              list.setSelectedIndex(index);
            }
          }
 else {
            list.clearSelection();
          }
          EditorHistoryManager.getInstance(project).removeFile(file);
        }
      }
    }
  }
);
  list.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    private String getTitle2Text(    String fullText){
      int labelWidth=pathLabel.getWidth();
      if (fullText == null || fullText.length() == 0)       return " ";
      while (pathLabel.getFontMetrics(pathLabel.getFont()).stringWidth(fullText) > labelWidth) {
        int sep=fullText.indexOf(File.separatorChar,4);
        if (sep < 0)         return fullText;
        fullText="..." + fullText.substring(sep);
      }
      return fullText;
    }
    public void valueChanged(    final ListSelectionEvent e){
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          updatePathLabel();
        }
      }
);
    }
    private void updatePathLabel(){
      final Object[] values=list.getSelectedValues();
      if (values != null && values.length == 1) {
        final VirtualFile parent=((VirtualFile)values[0]).getParent();
        if (parent != null) {
          pathLabel.setText(getTitle2Text(parent.getPresentableUrl()));
        }
 else {
          pathLabel.setText(" ");
        }
      }
 else {
        pathLabel.setText(" ");
      }
    }
  }
);
  Runnable runnable=new Runnable(){
    public void run(){
      Object[] values=list.getSelectedValues();
      for (      Object value : values) {
        VirtualFile file=(VirtualFile)value;
        FileEditorManager.getInstance(project).openFile(file,true);
      }
    }
  }
;
  if (list.getModel().getSize() == 0) {
    list.clearSelection();
  }
  new MyListSpeedSearch(list);
  list.setCellRenderer(new RecentFilesRenderer(project));
  JPanel footerPanel=new JPanel(new BorderLayout()){
    @Override protected void paintComponent(    Graphics g){
      super.paintComponent(g);
      g.setColor(BORDER_COLOR);
      g.drawLine(0,0,getWidth(),0);
    }
  }
;
  footerPanel.setBorder(BorderFactory.createEmptyBorder(4,4,4,4));
  footerPanel.add(pathLabel);
  new PopupChooserBuilder(list).setTitle(IdeBundle.message("title.popup.recent.files")).setMovable(true).setSouthComponent(footerPanel).setItemChoosenCallback(runnable).addAdditionalChooseKeystroke(getAdditionalSelectKeystroke()).createPopup().showCenteredInCurrentWindow(project);
}
