{
  myStatusPanel.setBusy(true);
  getEditor().setViewer(true);
  List<DocumentContent> contents=myMergeRequest.getContents();
  final List<CharSequence> sequences=ContainerUtil.map(contents,new Function<DocumentContent,CharSequence>(){
    @Override public CharSequence fun(    DocumentContent content){
      return content.getDocument().getImmutableCharSequence();
    }
  }
);
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    @Override public void run(){
      ProgressManager.getInstance().run(new Task.Modal(getProject(),"Computing differences...",true){
        private Runnable myCallback;
        @Override public void run(        @NotNull ProgressIndicator indicator){
          myCallback=doPerformRediff(sequences,indicator);
        }
        @RequiredDispatchThread @Override public void onCancel(){
          myMergeContext.finishMerge(MergeResult.CANCEL);
        }
        @RequiredDispatchThread @Override public void onSuccess(){
          if (isDisposed())           return;
          myCallback.run();
        }
      }
);
    }
  }
);
}
