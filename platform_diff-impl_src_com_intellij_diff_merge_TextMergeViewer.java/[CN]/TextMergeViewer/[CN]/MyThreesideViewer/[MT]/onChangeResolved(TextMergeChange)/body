{
  if (change.isResolved()) {
    onChangeRemoved(change);
  }
 else {
    onChangeAdded(change);
  }
  if (getChangesCount() == 0 && getConflictsCount() == 0) {
    LOG.assertTrue(getFirstUnresolvedChange(true,null) == null);
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      @Override public void run(){
        String message="All changes have been processed.<br><a href=\"\">Save changes and finish merging</a>";
        HyperlinkListener listener=new HyperlinkAdapter(){
          @Override protected void hyperlinkActivated(          HyperlinkEvent e){
            destroyChangedBlocks();
            myMergeContext.finishMerge(MergeResult.RESOLVED);
          }
        }
;
        JComponent component=getEditor().getComponent();
        Point point=new Point(component.getWidth() / 2,JBUI.scale(5));
        Color bgColor=MessageType.INFO.getPopupBackground();
        BalloonBuilder balloonBuilder=JBPopupFactory.getInstance().createHtmlTextBalloonBuilder(message,null,bgColor,listener).setAnimationCycle(200);
        Balloon balloon=balloonBuilder.createBalloon();
        balloon.show(new RelativePoint(component,point),Balloon.Position.below);
        Disposer.register(MyThreesideViewer.this,balloon);
      }
    }
);
  }
}
