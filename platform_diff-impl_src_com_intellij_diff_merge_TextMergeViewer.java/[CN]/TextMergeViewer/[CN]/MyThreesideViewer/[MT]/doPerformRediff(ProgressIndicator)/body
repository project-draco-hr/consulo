{
  try {
    indicator.checkCanceled();
    final List<DocumentContent> contents=myMergeRequest.getContents();
    List<CharSequence> sequences=ReadAction.compute(new ThrowableComputable<List<CharSequence>,Throwable>(){
      @Override public List<CharSequence> compute() throws Throwable {
        return ContainerUtil.map(contents,new Function<DocumentContent,CharSequence>(){
          @Override public CharSequence fun(          DocumentContent content){
            return content.getDocument().getImmutableCharSequence();
          }
        }
);
      }
    }
);
    List<MergeLineFragment> lineFragments=ByLine.compareTwoStep(sequences.get(0),sequences.get(1),sequences.get(2),ComparisonPolicy.DEFAULT,indicator);
    return apply(lineFragments);
  }
 catch (  DiffTooBigException e) {
    return applyNotification(DiffNotifications.createDiffTooBig());
  }
catch (  ProcessCanceledException e) {
    throw e;
  }
catch (  Throwable e) {
    LOG.error(e);
    return new Runnable(){
      @Override public void run(){
        clearDiffPresentation();
        myPanel.setErrorContent();
      }
    }
;
  }
}
