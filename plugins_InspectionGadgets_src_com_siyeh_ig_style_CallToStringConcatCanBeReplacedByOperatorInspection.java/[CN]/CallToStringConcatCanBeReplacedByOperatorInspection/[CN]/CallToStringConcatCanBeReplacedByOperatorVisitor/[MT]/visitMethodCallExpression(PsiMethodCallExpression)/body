{
  super.visitMethodCallExpression(expression);
  final PsiManager manager=expression.getManager();
  final PsiClass stringClass=JavaPsiFacade.getInstance(manager.getProject()).findClass("java.lang.String",expression.getResolveScope());
  if (stringClass == null) {
    return;
  }
  final PsiClassType stringType=JavaPsiFacade.getInstance(manager.getProject()).getElementFactory().createType(stringClass);
  if (!MethodCallUtils.isCallToMethod(expression,"java.lang.String",stringType,"concat",stringType)) {
    return;
  }
  final PsiExpressionList argumentList=expression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length != 1) {
    return;
  }
  final PsiElement parent=expression.getParent();
  if (parent instanceof PsiExpressionStatement) {
    return;
  }
  registerMethodCallError(expression);
}
