{
  myDesignerCard=new JPanel(new GridBagLayout());
  add(myDesignerCard,DESIGNER_CARD);
  GridBagConstraints gbc=new GridBagConstraints();
  gbc.gridx=0;
  gbc.gridy=1;
  gbc.fill=GridBagConstraints.BOTH;
  myVerticalCaption=new CaptionPanel(this,false);
  myDesignerCard.add(myVerticalCaption,gbc);
  gbc.gridx=1;
  gbc.gridy=0;
  myHorizontalCaption=new CaptionPanel(this,true);
  myDesignerCard.add(myHorizontalCaption,gbc);
  myLayeredPane=new MyLayeredPane();
  mySurfaceArea=new ComponentEditableArea(myLayeredPane){
    @Override protected void fireSelectionChanged(){
      super.fireSelectionChanged();
      myLayeredPane.revalidate();
      myLayeredPane.repaint();
    }
    @Override public RadComponent findTarget(    int x,    int y,    @Nullable ComponentTargetFilter filter){
      if (myRootComponent != null) {
        FindComponentVisitor visitor=new FindComponentVisitor(filter,x,y);
        myRootComponent.accept(visitor,false);
        return visitor.getResult();
      }
      return null;
    }
    @Override public InputTool findTargetTool(    int x,    int y){
      return myDecorationLayer.findTargetTool(x,y);
    }
    @Override public ComponentDecorator getRootSelectionDecorator(){
      return DesignerEditorPanel.this.getRootSelectionDecorator();
    }
    @Nullable public EditOperation processRootOperation(    OperationContext context){
      return DesignerEditorPanel.this.processRootOperation(context);
    }
    @Override public FeedbackLayer getFeedbackLayer(){
      return myFeedbackLayer;
    }
    @Override public RadComponent getRootComponent(){
      return myRootComponent;
    }
  }
;
  myToolProvider=new ToolProvider(){
    @Override public void loadDefaultTool(){
      setActiveTool(new SelectionTool());
    }
    @Override public void showError(    @NonNls String message,    Throwable e){
      DesignerEditorPanel.this.showError(message,e);
    }
  }
;
  myGlassLayer=new GlassLayer(myToolProvider,mySurfaceArea);
  myLayeredPane.add(myGlassLayer,LAYER_GLASS);
  myDecorationLayer=new DecorationLayer(mySurfaceArea);
  myLayeredPane.add(myDecorationLayer,LAYER_DECORATION);
  myFeedbackLayer=new FeedbackLayer();
  myLayeredPane.add(myFeedbackLayer,LAYER_FEEDBACK);
  gbc.gridx=1;
  gbc.gridy=1;
  gbc.weightx=1;
  gbc.weighty=1;
  myScrollPane=ScrollPaneFactory.createScrollPane(myLayeredPane);
  myScrollPane.setBackground(Color.WHITE);
  myDesignerCard.add(myScrollPane,gbc);
}
