{
  final Collection<File> result=new HashSet<File>();
  long rev;
  if (progress != null) {
    showProgressMessage(progress,root);
  }
  try {
    SVNUpdateClient client=myVcs.createUpdateClient();
    client.setEventHandler(myHandler);
    rev=doUpdate(root,client);
    if (rev < 0 && !isMerge()) {
      throw new SVNException(SVNErrorMessage.create(SVNErrorCode.UNKNOWN,SvnBundle.message("exception.text.root.was.not.properly.updated",root)));
    }
  }
 catch (  SVNException e) {
    myExceptions.add(new VcsException(e));
  }
  if (!SvnConfiguration.getInstance(myVcs.getProject()).UPDATE_RUN_STATUS) {
    return result;
  }
  try {
    SVNStatusClient statusClient=myVcs.createStatusClient();
    statusClient.setIgnoreExternals(false);
    if (progress != null) {
      progress.setText(SvnBundle.message("progress.text.update.computing.post.update.status",root.getAbsolutePath()));
    }
    statusClient.doStatus(root,true,false,false,false,new ISVNStatusHandler(){
      public void handleStatus(      SVNStatus status){
        if (status.getFile() == null) {
          return;
        }
        if (myIsTotalUpdate && status.getContentsStatus() == SVNStatusType.STATUS_UNVERSIONED && status.getFile().isDirectory()) {
          result.add(status.getFile());
        }
        if (status.getContentsStatus() == SVNStatusType.STATUS_EXTERNAL || status.getContentsStatus() == SVNStatusType.STATUS_IGNORED || status.getContentsStatus() == SVNStatusType.STATUS_MISSING || status.getContentsStatus() == SVNStatusType.STATUS_INCOMPLETE) {
        }
 else         if (status.getContentsStatus() != SVNStatusType.STATUS_NONE || status.getPropertiesStatus() == SVNStatusType.STATUS_NONE) {
          String path=status.getFile().getAbsolutePath();
          if (status.getContentsStatus() == SVNStatusType.STATUS_ADDED) {
            myPostUpdateFiles.getGroupById(FileGroup.LOCALLY_ADDED_ID).add(path);
          }
 else           if (status.getContentsStatus() == SVNStatusType.STATUS_CONFLICTED) {
            FileGroup group=myPostUpdateFiles.getGroupById(FileGroup.MERGED_WITH_CONFLICT_ID);
            if (group != null && (group.getFiles() == null || !group.getFiles().contains(path))) {
              group.add(path);
            }
          }
 else           if (status.getContentsStatus() == SVNStatusType.STATUS_DELETED) {
            myPostUpdateFiles.getGroupById(FileGroup.LOCALLY_REMOVED_ID).add(path);
          }
 else           if (status.getContentsStatus() == SVNStatusType.STATUS_REPLACED) {
            myPostUpdateFiles.getGroupById(FileGroup.LOCALLY_ADDED_ID).add(path);
          }
 else           if (status.getContentsStatus() == SVNStatusType.STATUS_MODIFIED || status.getPropertiesStatus() == SVNStatusType.STATUS_MODIFIED) {
            myPostUpdateFiles.getGroupById(FileGroup.MODIFIED_ID).add(path);
          }
 else           if (status.getContentsStatus() == SVNStatusType.STATUS_UNVERSIONED || status.getContentsStatus() == SVNStatusType.STATUS_OBSTRUCTED) {
            if (status.getFile().isFile() || !SVNWCUtil.isVersionedDirectory(status.getFile())) {
              myPostUpdateFiles.getGroupById(FileGroup.UNKNOWN_ID).add(path);
            }
          }
        }
      }
    }
);
  }
 catch (  SVNException e) {
    myExceptions.add(new VcsException(e));
  }
  return result;
}
