{
  TObjectIntHashMap<String> packageToCountMap=new TObjectIntHashMap<String>();
  TObjectIntHashMap<String> classToCountMap=new TObjectIntHashMap<String>();
  for (  Pair<String,Boolean> pair : resultList) {
    String name=pair.getFirst();
    Boolean isStatic=pair.getSecond();
    String packageOrClassName=getPackageOrClassName(name);
    if (packageOrClassName.isEmpty())     continue;
    if (isStatic) {
      int count=classToCountMap.get(packageOrClassName);
      classToCountMap.put(packageOrClassName,count + 1);
    }
 else {
      int count=packageToCountMap.get(packageOrClassName);
      packageToCountMap.put(packageOrClassName,count + 1);
    }
  }
class MyVisitorProcedure implements TObjectIntProcedure<String> {
    private final boolean myIsVisitingPackages;
    MyVisitorProcedure(    boolean isVisitingPackages){
      myIsVisitingPackages=isVisitingPackages;
    }
    @Override public boolean execute(    final String packageOrClassName,    final int count){
      if (isToUseImportOnDemand(packageOrClassName,count,!myIsVisitingPackages,settings)) {
        classesOrPackagesToImportOnDemand.add(packageOrClassName);
      }
      return true;
    }
  }
  classToCountMap.forEachEntry(new MyVisitorProcedure(false));
  packageToCountMap.forEachEntry(new MyVisitorProcedure(true));
}
