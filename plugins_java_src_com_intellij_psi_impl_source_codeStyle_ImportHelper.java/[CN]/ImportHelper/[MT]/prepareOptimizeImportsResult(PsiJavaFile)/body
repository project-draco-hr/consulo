{
  List<PsiElement> nonImports=new ArrayList<PsiElement>();
  List<Pair<String,Boolean>> names=new ArrayList<Pair<String,Boolean>>(collectNamesToImport(file,nonImports));
  Collections.sort(names,new Comparator<Pair<String,Boolean>>(){
    @Override public int compare(    Pair<String,Boolean> o1,    Pair<String,Boolean> o2){
      return o1.getFirst().compareTo(o2.getFirst());
    }
  }
);
  List<Pair<String,Boolean>> resultList=sortItemsAccordingToSettings(names,mySettings);
  final Set<String> classesOrPackagesToImportOnDemand=new THashSet<String>();
  collectOnDemandImports(resultList,classesOrPackagesToImportOnDemand,ImportHelper.this.mySettings);
  Set<String> classesToUseSingle=findSingleImports(file,resultList,classesOrPackagesToImportOnDemand);
  Set<String> toReimport=new THashSet<String>();
  calcClassesConflictingViaOnDemandImports(file,classesOrPackagesToImportOnDemand,file.getResolveScope(),toReimport);
  classesToUseSingle.addAll(toReimport);
  try {
    StringBuilder text=buildImportListText(resultList,classesOrPackagesToImportOnDemand,classesToUseSingle);
    for (    PsiElement nonImport : nonImports) {
      text.append("\n").append(nonImport.getText());
    }
    String ext=StdFileTypes.JAVA.getDefaultExtension();
    PsiFileFactory factory=PsiFileFactory.getInstance(file.getProject());
    final PsiJavaFile dummyFile=(PsiJavaFile)factory.createFileFromText("_Dummy_." + ext,StdFileTypes.JAVA,text);
    CodeStyleManager codeStyleManager=CodeStyleManager.getInstance(file.getProject());
    codeStyleManager.reformat(dummyFile);
    PsiImportList newImportList=dummyFile.getImportList();
    PsiImportList result=(PsiImportList)newImportList.copy();
    PsiImportList oldList=file.getImportList();
    if (oldList.isReplaceEquivalent(result))     return null;
    if (!nonImports.isEmpty()) {
      PsiElement firstPrevious=newImportList.getPrevSibling();
      while (firstPrevious != null && firstPrevious.getPrevSibling() != null) {
        firstPrevious=firstPrevious.getPrevSibling();
      }
      for (PsiElement element=firstPrevious; element != null && element != newImportList; element=element.getNextSibling()) {
        result.add(element.copy());
      }
      for (PsiElement element=newImportList.getNextSibling(); element != null; element=element.getNextSibling()) {
        result.add(element.copy());
      }
    }
    return result;
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
    return null;
  }
}
