{
  final JavaPsiFacade facade=JavaPsiFacade.getInstance(file.getProject());
  PsiElementFactory factory=facade.getElementFactory();
  PsiResolveHelper helper=facade.getResolveHelper();
  String className=refClass.getQualifiedName();
  if (className == null)   return true;
  String packageName=getPackageOrClassName(className);
  String shortName=PsiNameHelper.getShortClassName(className);
  PsiClass conflictSingleRef=findSingleImportByShortName(file,shortName);
  if (conflictSingleRef != null) {
    return className.equals(conflictSingleRef.getQualifiedName());
  }
  PsiClass curRefClass=helper.resolveReferencedClass(shortName,file);
  if (file.getManager().areElementsEquivalent(refClass,curRefClass)) {
    return true;
  }
  boolean useOnDemand=true;
  if (packageName.length() == 0) {
    useOnDemand=false;
  }
  PsiElement conflictPackageRef=findImportOnDemand(file,packageName);
  if (conflictPackageRef != null) {
    useOnDemand=false;
  }
  List<PsiClass> classesToReimport=new ArrayList<PsiClass>();
  List<PsiJavaCodeReferenceElement> importRefs=getImportsFromPackage(file,packageName);
  if (useOnDemand) {
    if (mySettings.USE_SINGLE_CLASS_IMPORTS && importRefs.size() + 1 < mySettings.CLASS_COUNT_TO_USE_IMPORT_ON_DEMAND && !mySettings.PACKAGES_TO_USE_IMPORT_ON_DEMAND.contains(packageName)) {
      useOnDemand=false;
    }
    if (curRefClass != null) {
      useOnDemand=true;
    }
    if (useOnDemand) {
      PsiElement[] onDemandRefs=file.getOnDemandImports(false,true);
      List<String> refTexts=new ArrayList<String>(onDemandRefs.length);
      for (      PsiElement ref : onDemandRefs) {
        String refName=ref instanceof PsiClass ? ((PsiClass)ref).getQualifiedName() : ((PsiJavaPackage)ref).getQualifiedName();
        refTexts.add(refName);
      }
      calcClassesToReimport(file,facade,helper,packageName,classesToReimport,refTexts);
    }
  }
  if (useOnDemand && curRefClass != null && refClass.getContainingClass() != null && mySettings.INSERT_INNER_CLASS_IMPORTS && "java.lang".equals(StringUtil.getPackageName(curRefClass.getQualifiedName()))) {
    return false;
  }
  try {
    PsiImportList importList=file.getImportList();
    PsiImportStatement statement=useOnDemand ? factory.createImportStatementOnDemand(packageName) : factory.createImportStatement(refClass);
    importList.add(statement);
    if (useOnDemand) {
      for (      PsiJavaCodeReferenceElement ref : importRefs) {
        LOG.assertTrue(ref.getParent() instanceof PsiImportStatement);
        if (!ref.isValid())         continue;
        classesToReimport.add((PsiClass)ref.resolve());
        PsiImportStatement importStatement=(PsiImportStatement)ref.getParent();
        importStatement.delete();
      }
    }
    for (    PsiClass aClass : classesToReimport) {
      if (aClass != null) {
        addImport(file,aClass);
      }
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
  return true;
}
