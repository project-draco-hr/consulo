{
  PsiClass[] refs=file.getSingleClassImports(true);
  for (  PsiClass ref : refs) {
    String className=ref.getQualifiedName();
    if (className != null && PsiNameHelper.getShortClassName(className).equals(shortClassName)) {
      return ref;
    }
  }
  for (  PsiClass aClass : file.getClasses()) {
    String className=aClass.getQualifiedName();
    if (className != null && PsiNameHelper.getShortClassName(className).equals(shortClassName)) {
      return aClass;
    }
  }
  String packageName=file.getPackageName();
  if (!StringUtil.isEmptyOrSpaces(packageName)) {
    String fqn=packageName + "." + shortClassName;
    final PsiClass aClass=JavaPsiFacade.getInstance(file.getProject()).findClass(fqn,file.getResolveScope());
    if (aClass != null) {
      final boolean[] foundRef={false};
      file.accept(new JavaRecursiveElementWalkingVisitor(){
        @Override public void visitElement(        PsiElement element){
          if (foundRef[0])           return;
          super.visitElement(element);
        }
        @Override public void visitReferenceElement(        PsiJavaCodeReferenceElement reference){
          if (file.getManager().areElementsEquivalent(reference.resolve(),aClass)) {
            foundRef[0]=true;
          }
          super.visitReferenceElement(reference);
        }
      }
);
      if (foundRef[0])       return aClass;
    }
  }
  return null;
}
