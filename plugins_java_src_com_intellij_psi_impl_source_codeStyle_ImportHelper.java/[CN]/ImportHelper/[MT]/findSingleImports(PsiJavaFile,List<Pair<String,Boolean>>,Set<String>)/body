{
  final GlobalSearchScope resolveScope=file.getResolveScope();
  Set<String> namesToUseSingle=new THashSet<String>();
  final String thisPackageName=file.getPackageName();
  final Set<String> implicitlyImportedPackages=new THashSet<String>(Arrays.asList(file.getImplicitlyImportedPackages()));
  final PsiManager manager=file.getManager();
  JavaPsiFacade facade=JavaPsiFacade.getInstance(manager.getProject());
  List<PsiElement> onDemandElements=new ArrayList<PsiElement>(onDemandImports.size());
  List<String> onDemandImportsList=new ArrayList<String>(onDemandImports);
  for (  String onDemandName : onDemandImportsList) {
    PsiElement aClass=facade.findClass(onDemandName,resolveScope);
    onDemandElements.add(aClass);
  }
  for (  Pair<String,Boolean> pair : names) {
    String name=pair.getFirst();
    Boolean isStatic=pair.getSecond();
    String prefix=getPackageOrClassName(name);
    if (prefix.isEmpty())     continue;
    final boolean isImplicitlyImported=implicitlyImportedPackages.contains(prefix);
    if (!onDemandImports.contains(prefix) && !isImplicitlyImported)     continue;
    String shortName=PsiNameHelper.getShortClassName(name);
    String thisPackageClass=!thisPackageName.isEmpty() ? thisPackageName + "." + shortName : shortName;
    if (JavaPsiFacade.getInstance(manager.getProject()).findClass(thisPackageClass,resolveScope) != null) {
      namesToUseSingle.add(name);
      continue;
    }
    if (!isImplicitlyImported) {
      String langPackageClass=JAVA_LANG_PACKAGE + "." + shortName;
      if (facade.findClass(langPackageClass,resolveScope) != null) {
        namesToUseSingle.add(name);
        continue;
      }
    }
    for (int i=0; i < onDemandImportsList.size(); i++) {
      String onDemandName=onDemandImportsList.get(i);
      if (prefix.equals(onDemandName))       continue;
      if (isStatic) {
        PsiElement element=onDemandElements.get(i);
        PsiClass aClass=(PsiClass)element;
        if (aClass != null) {
          PsiField field=aClass.findFieldByName(shortName,true);
          if (field != null && field.hasModifierProperty(PsiModifier.STATIC)) {
            namesToUseSingle.add(name);
          }
 else {
            PsiClass inner=aClass.findInnerClassByName(shortName,true);
            if (inner != null && inner.hasModifierProperty(PsiModifier.STATIC)) {
              namesToUseSingle.add(name);
            }
 else {
              PsiMethod[] methods=aClass.findMethodsByName(shortName,true);
              for (              PsiMethod method : methods) {
                if (method.hasModifierProperty(PsiModifier.STATIC)) {
                  namesToUseSingle.add(name);
                }
              }
            }
          }
        }
      }
 else {
        PsiClass aClass=facade.findClass(onDemandName + "." + shortName,resolveScope);
        if (aClass != null) {
          namesToUseSingle.add(name);
        }
      }
    }
  }
  return namesToUseSingle;
}
