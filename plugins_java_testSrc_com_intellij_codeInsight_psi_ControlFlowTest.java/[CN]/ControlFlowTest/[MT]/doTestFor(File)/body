{
  String contents=StringUtil.convertLineSeparators(FileUtil.loadFile(file));
  configureFromFileText(file.getName(),contents);
  Pattern pattern=Pattern.compile("^// (\\S*).*",Pattern.DOTALL);
  Matcher matcher=pattern.matcher(contents);
  assertTrue(matcher.matches());
  final String policyClassName=matcher.group(1);
  final ControlFlowPolicy policy;
  if ("LocalsOrMyInstanceFieldsControlFlowPolicy".equals(policyClassName)) {
    policy=LocalsOrMyInstanceFieldsControlFlowPolicy.getInstance();
  }
 else {
    policy=null;
  }
  final int offset=getEditor().getCaretModel().getOffset();
  PsiElement element=getFile().findElementAt(offset);
  element=PsiTreeUtil.getParentOfType(element,PsiCodeBlock.class,false);
  assertTrue("Selected element: " + element,element instanceof PsiCodeBlock);
  ControlFlow controlFlow=ControlFlowFactory.getInstance(getProject()).getControlFlow(element,policy);
  String result=controlFlow.toString().trim();
  final String expectedFullPath=StringUtil.trimEnd(file.getPath(),".java") + ".txt";
  VirtualFile expectedFile=LocalFileSystem.getInstance().findFileByPath(expectedFullPath);
  String expected=new String(expectedFile.contentsToByteArray()).trim();
  expected=expected.replaceAll("\r","");
  assertEquals("Text mismatch (in file " + expectedFullPath + "):\n",expected,result);
}
