{
  myRenamers.clear();
  ArrayList<UsageInfo> result=new ArrayList<UsageInfo>();
  for (  Map.Entry<PsiElement,String> entry : myAllRenames.entrySet()) {
    PsiElement element=entry.getKey();
    final String newName=entry.getValue();
    final UsageInfo[] usages=RenameUtil.findUsages(element,newName,mySearchInComments,mySearchTextOccurrences,myAllRenames);
    result.addAll(Arrays.asList(usages));
    if (element instanceof PsiClass && myShouldRenameVariables) {
      myRenamers.add(new AutomaticVariableRenamer((PsiClass)element,newName,Arrays.asList(usages)));
    }
    if (element instanceof PsiClass && myShouldRenameInheritors) {
      if (((PsiClass)element).getName() != null) {
        myRenamers.add(new InheritorRenamer((PsiClass)element,newName));
      }
    }
    if (element instanceof PsiClass && myShouldRenameForms) {
      myRenamers.add(new FormsRenamer((PsiClass)element,newName));
    }
    if (element instanceof PsiMethod) {
      addOverriders((PsiMethod)element,newName);
    }
    if (element instanceof PsiField) {
      myRenamers.add(new ConstructorParameterOnFieldRenameRenamer((PsiField)element,newName));
    }
  }
  UsageInfo[] usageInfos=result.toArray(new UsageInfo[result.size()]);
  usageInfos=UsageViewUtil.removeDuplicatedUsages(usageInfos);
  return usageInfos;
}
