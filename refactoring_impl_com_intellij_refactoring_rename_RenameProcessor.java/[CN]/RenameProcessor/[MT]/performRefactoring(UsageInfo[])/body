{
  String message=null;
  try {
    for (    Map.Entry<PsiElement,String> entry : myAllRenames.entrySet()) {
      RenameUtil.checkRename(entry.getKey(),entry.getValue());
    }
  }
 catch (  IncorrectOperationException e) {
    message=e.getMessage();
  }
  if (message != null) {
    CommonRefactoringUtil.showErrorMessage(RefactoringBundle.message("rename.title"),message,getHelpID(),myProject);
    return;
  }
  if (markCommandAsComplex()) {
    CommandProcessor.getInstance().markCurrentCommandAsComplex(myProject);
  }
  List<Pair<String,RefactoringElementListener>> listenersForPackages=new ArrayList<Pair<String,RefactoringElementListener>>();
  for (  Map.Entry<PsiElement,String> entry : myAllRenames.entrySet()) {
    PsiElement element=entry.getKey();
    String newName=entry.getValue();
    final RefactoringElementListener elementListener=getTransaction().getElementListener(element);
    RenameUtil.doRename(element,newName,extractUsagesForElement(element,usages),myProject,elementListener);
    if (element instanceof PsiPackage) {
      final PsiPackage psiPackage=(PsiPackage)element;
      final String newQualifiedName=RenameUtil.getQualifiedNameAfterRename(psiPackage.getQualifiedName(),newName);
      listenersForPackages.add(Pair.create(newQualifiedName,elementListener));
    }
  }
  final PsiManager psiManager=PsiManager.getInstance(myProject);
  for (  Pair<String,RefactoringElementListener> pair : listenersForPackages) {
    final PsiPackage aPackage=psiManager.findPackage(pair.getFirst());
    LOG.assertTrue(aPackage != null);
    pair.getSecond().elementRenamed(aPackage);
  }
  List<NonCodeUsageInfo> nonCodeUsages=new ArrayList<NonCodeUsageInfo>();
  for (  UsageInfo usage : usages) {
    if (usage instanceof NonCodeUsageInfo) {
      nonCodeUsages.add((NonCodeUsageInfo)usage);
    }
  }
  myNonCodeUsages=nonCodeUsages.toArray(new NonCodeUsageInfo[nonCodeUsages.size()]);
}
