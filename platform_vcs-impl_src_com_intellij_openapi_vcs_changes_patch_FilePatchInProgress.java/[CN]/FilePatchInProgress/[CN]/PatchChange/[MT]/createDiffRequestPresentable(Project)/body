{
  return new DiffRequestPresentableProxy(){
    @Override protected DiffRequestPresentable init(){
      if (myPatchInProgress.isConflictingChange()) {
        final ApplyPatchForBaseRevisionTexts texts=ApplyPatchForBaseRevisionTexts.create(project,myPatchInProgress.getCurrentBase(),new FilePathImpl(myPatchInProgress.getCurrentBase()),myPatchInProgress.getPatch());
        if ((texts != null) && (ApplyPatchStatus.SUCCESS.equals(texts.getStatus()) || ApplyPatchStatus.ALREADY_APPLIED.equals(texts.getStatus()))) {
          return new MergedDiffRequestPresentable(project,texts,myPatchInProgress.getCurrentBase(),myPatchInProgress.getPatch().getAfterVersionId());
        }
 else {
          myInitProblem=ApplyPatchForBaseRevisionTexts.getCannotLoadBaseMessage(texts,myPatchInProgress.getPatch());
          return null;
        }
      }
 else {
        return new ChangeDiffRequestPresentable(project,PatchChange.this);
      }
    }
    @Override public String getPathPresentation(){
      final File ioCurrentBase=myPatchInProgress.getIoCurrentBase();
      return ioCurrentBase == null ? myPatchInProgress.getCurrentPath() : ioCurrentBase.getPath();
    }
  }
;
}
