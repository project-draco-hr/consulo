{
  return new DiffRequestPresentableProxy(){
    @NotNull @Override protected DiffRequestPresentable init() throws VcsException {
      if (myPatchInProgress.isConflictingChange()) {
        final Getter<ApplyPatchForBaseRevisionTexts> revisionTextsGetter=new Getter<ApplyPatchForBaseRevisionTexts>(){
          @Override public ApplyPatchForBaseRevisionTexts get(){
            return ApplyPatchForBaseRevisionTexts.create(project,myPatchInProgress.getCurrentBase(),new FilePathImpl(myPatchInProgress.getCurrentBase()),myPatchInProgress.getPatch(),baseContents);
          }
        }
;
        return new MergedDiffRequestPresentable(project,revisionTextsGetter,myPatchInProgress.getCurrentBase(),myPatchInProgress.getPatch().getAfterVersionId());
      }
 else {
        return new ChangeDiffRequestPresentable(project,PatchChange.this);
      }
    }
    @Override public String getPathPresentation(){
      final File ioCurrentBase=myPatchInProgress.getIoCurrentBase();
      return ioCurrentBase == null ? myPatchInProgress.getCurrentPath() : ioCurrentBase.getPath();
    }
  }
;
}
