{
  if (newModel) {
    myRow=row;
    myConditionInfo=null;
  }
  for (  ArrangementAtomMatchConditionComponent component : myComponents.values()) {
    component.setEnabled(false);
    component.setSelected(false);
  }
  ArrangementMatchingRulesModel model=myControl.getModel();
  if (row < 0 || row >= model.getSize()) {
    myRow=-1;
    return;
  }
  Object element=model.getElementAt(row);
  if (element instanceof EmptyArrangementRuleComponent) {
    for (    ArrangementAtomMatchConditionComponent component : myComponents.values()) {
      ArrangementAtomMatchCondition condition=component.getMatchCondition();
      Map<ArrangementSettingType,Set<?>> map=ArrangementConfigUtil.buildAvailableConditions(myFilter,condition);
      component.setEnabled(map.get(condition.getType()).contains(condition.getValue()));
    }
    return;
  }
  if (!(element instanceof StdArrangementMatchRule)) {
    return;
  }
  ArrangementMatchCondition condition=((StdArrangementMatchRule)element).getMatcher().getCondition();
  myConditionInfo=ArrangementUtil.extractConditions(condition);
  Map<ArrangementSettingType,Set<?>> available=ArrangementConfigUtil.buildAvailableConditions(myFilter,condition);
  for (  Collection<?> ids : available.values()) {
    for (    Object id : ids) {
      ArrangementAtomMatchConditionComponent component=myComponents.get(id);
      if (component != null) {
        component.setEnabled(true);
        component.setSelected(myConditionInfo.hasCondition(id));
      }
    }
  }
  repaint();
}
