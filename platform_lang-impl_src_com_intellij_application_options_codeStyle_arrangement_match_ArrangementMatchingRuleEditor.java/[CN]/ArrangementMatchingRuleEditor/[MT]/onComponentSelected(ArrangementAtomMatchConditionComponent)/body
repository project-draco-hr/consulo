{
  ArrangementAtomMatchCondition chosenCondition=component.getMatchCondition();
  boolean remove=myConditionInfo.hasCondition(chosenCondition.getValue());
  component.setSelected(!remove);
  repaintComponent(component);
  if (remove) {
    myConditionInfo.removeCondition(chosenCondition.getValue());
    updateState();
    return;
  }
  Collection<Set<?>> mutexes=myFilter.getMutexes();
  for (  Set<?> mutex : mutexes) {
    if (!mutex.contains(chosenCondition.getValue())) {
      continue;
    }
    for (    Object key : mutex) {
      if (myConditionInfo.hasCondition(key)) {
        ArrangementAtomMatchConditionComponent componentToDeselect=myComponents.get(key);
        myConditionInfo.removeCondition(componentToDeselect.getMatchCondition().getValue());
        myConditionInfo.addAtomCondition(chosenCondition);
        ArrangementMatchCondition newCondition=myConditionInfo.buildCondition();
        for (        ArrangementAtomMatchConditionComponent componentToCheck : myComponents.values()) {
          Object value=componentToCheck.getMatchCondition().getValue();
          if (myConditionInfo.hasCondition(value) && !ArrangementConfigUtil.isEnabled(value,myFilter,newCondition)) {
            myConditionInfo.removeCondition(componentToCheck.getMatchCondition().getValue());
            newCondition=myConditionInfo.buildCondition();
          }
        }
        updateState();
        return;
      }
    }
  }
  myConditionInfo.addAtomCondition(chosenCondition);
  updateState();
}
