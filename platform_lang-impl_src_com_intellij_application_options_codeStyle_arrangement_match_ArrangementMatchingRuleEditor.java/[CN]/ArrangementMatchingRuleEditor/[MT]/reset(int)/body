{
  myNameField.setText("");
  myAlarm.cancelAllRequests();
  myRow=row;
  myRuleInfo.clear();
  myRequestFocus=true;
  for (  ArrangementAtomMatchConditionComponent component : myConditionComponents.values()) {
    component.setEnabled(false);
    component.setSelected(false);
  }
  for (  ArrangementOrderTypeComponent component : myOrderTypeComponents.values()) {
    component.setSelected(false);
  }
  ArrangementMatchingRulesModel model=myControl.getModel();
  if (row < 0 || row >= model.getSize()) {
    myRow=-1;
    return;
  }
  Object element=model.getElementAt(row);
  if (element instanceof EmptyArrangementRuleComponent) {
    for (    ArrangementAtomMatchConditionComponent component : myConditionComponents.values()) {
      ArrangementAtomMatchCondition condition=component.getMatchCondition();
      Map<ArrangementSettingType,Set<?>> map=ArrangementConfigUtil.buildAvailableConditions(myFilter,condition);
      component.setEnabled(map.get(condition.getType()).contains(condition.getValue()));
    }
    return;
  }
  if (!(element instanceof StdArrangementMatchRule)) {
    return;
  }
  StdArrangementMatchRule rule=(StdArrangementMatchRule)element;
  myRuleInfo.setOrderType(rule.getOrderType());
  ArrangementOrderTypeComponent orderTypeComponent=myOrderTypeComponents.get(rule.getOrderType());
  if (orderTypeComponent != null) {
    orderTypeComponent.setSelected(true);
  }
  ArrangementMatchCondition condition=rule.getMatcher().getCondition();
  ArrangementRuleInfo infoWithConditions=ArrangementUtil.extractConditions(condition);
  myRuleInfo.copyConditionsFrom(infoWithConditions);
  myNameField.setText(myRuleInfo.getNamePattern());
  for (  ArrangementAtomMatchConditionComponent component : myConditionComponents.values()) {
    if (myRuleInfo.hasCondition(component.getMatchCondition().getValue())) {
      component.setEnabled(true);
      component.setSelected(true);
    }
  }
  refreshConditions();
}
