{
  MoveFilesOrDirectoriesUtil.doMove(project,elements,new PsiElement[]{targetContainer},callback,new Function<PsiElement[],PsiElement[]>(){
    @Override public PsiElement[] fun(    final PsiElement[] elements){
      return new WriteCommandAction<PsiElement[]>(project,"Regrouping ..."){
        @Override protected void run(        Result<PsiElement[]> result) throws Throwable {
          final List<PsiElement> adjustedElements=new ArrayList<PsiElement>();
          for (          PsiElement element : elements) {
            if (element instanceof PsiClass) {
              final PsiFile containingFile=obtainContainingFile(element,elements);
              if (containingFile != null && !adjustedElements.contains(containingFile)) {
                adjustedElements.add(containingFile);
              }
            }
 else {
              adjustedElements.add(element);
            }
          }
          result.setResult(adjustedElements.toArray(new PsiElement[adjustedElements.size()]));
        }
      }
.execute().getResultObject();
    }
  }
);
}
