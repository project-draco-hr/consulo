{
  MoveFilesOrDirectoriesUtil.doMove(project,elements,new PsiElement[]{targetContainer},callback,new Function<PsiElement[],PsiElement[]>(){
    @Override public PsiElement[] fun(    final PsiElement[] elements){
      return new WriteCommandAction<PsiElement[]>(project,"Regrouping ..."){
        @Override protected void run(        Result<PsiElement[]> result) throws Throwable {
          final List<PsiElement> adjustedElements=new ArrayList<PsiElement>();
          for (int i=0, length=elements.length; i < length; i++) {
            PsiElement element=elements[i];
            if (element instanceof PsiClass) {
              final PsiClass topLevelClass=PsiUtil.getTopLevelClass(element);
              elements[i]=topLevelClass;
              final PsiFile containingFile=obtainContainingFile(topLevelClass,elements);
              if (containingFile != null && !adjustedElements.contains(containingFile)) {
                adjustedElements.add(containingFile);
              }
            }
 else {
              adjustedElements.add(element);
            }
          }
          result.setResult(PsiUtilBase.toPsiElementArray(adjustedElements));
        }
      }
.execute().getResultObject();
    }
  }
);
}
