{
  final AtomicBoolean fileTouched=new AtomicBoolean();
  new Task.Backgroundable(myProject,"Retrieving revision changes",false){
    @Override public void run(    @NotNull ProgressIndicator indicator){
      try {
        fileTouched.set(wasFileTouched(rev,filePath));
      }
 catch (      VcsException e) {
        LOG.info("Error happened while executing git show " + rev + ":"+ filePath,e);
        VcsBalloonProblemNotifier.showOverVersionControlView(GitDiffFromHistoryHandler.this.myProject,e.getMessage(),MessageType.ERROR);
      }
    }
    @Override public void onSuccess(){
      if (fileTouched.get()) {
        String message=filePath.getName() + " did not change in this merge commit";
        VcsBalloonProblemNotifier.showOverVersionControlView(GitDiffFromHistoryHandler.this.myProject,message,MessageType.INFO);
      }
      showPopup(event,rev,filePath,parents);
    }
  }
.queue();
}
