{
  FilePath currentRevisionPath=currentRevision.getPath();
  if (currentRevisionPath.isDirectory()) {
    return makeRevisionFromHash(currentRevisionPath,parentHash);
  }
  Collection<Change> changes=GitChangeUtils.getDiff(myProject,repository.getRoot(),parentHash,currentRevision.getHash(),null);
  for (  Change change : changes) {
    ContentRevision afterRevision=change.getAfterRevision();
    ContentRevision beforeRevision=change.getBeforeRevision();
    if (afterRevision != null && afterRevision.getFile().equals(currentRevisionPath)) {
      FilePath path=(beforeRevision != null ? beforeRevision.getFile() : afterRevision.getFile());
      return new GitFileRevision(myProject,path,new GitRevisionNumber(parentHash),true);
    }
  }
  LOG.error(String.format("Could not find parent revision. Will use the path from parent revision. Current revision: %s, parent hash: %s",currentRevision,parentHash));
  return makeRevisionFromHash(currentRevisionPath,parentHash);
}
