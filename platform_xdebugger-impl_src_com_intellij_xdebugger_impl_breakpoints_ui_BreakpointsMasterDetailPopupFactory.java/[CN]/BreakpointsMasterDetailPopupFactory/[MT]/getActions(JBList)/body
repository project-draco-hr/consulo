{
  DefaultActionGroup actions=new DefaultActionGroup();
  final DefaultActionGroup breakpointTypes=new DefaultActionGroup();
  for (  BreakpointPanelProvider provider : myBreakpointPanelProviders) {
    breakpointTypes.addAll(provider.getAddBreakpointActions(myProject));
  }
  actions.add(new AnAction("Add Breakpoint",null,PlatformIcons.ADD_ICON){
    @Override public void actionPerformed(    AnActionEvent e){
      JBPopupFactory.getInstance().createActionGroupPopup(null,breakpointTypes,e.getDataContext(),JBPopupFactory.ActionSelectionAid.NUMBERING,false).showUnderneathOf(myPopupBuilder.getActionToolbar().getComponent());
    }
  }
);
  actions.add(new AnAction("Remove Breakpoint",null,PlatformIcons.DELETE_ICON){
    @Override public void update(    AnActionEvent e){
      e.getPresentation().setEnabled(MasterDetailPopupBuilder.allowedToRemoveSelectedItem(list,myProject));
    }
    @Override public void actionPerformed(    AnActionEvent e){
      MasterDetailPopupBuilder.removeSelectedItems(list,myProject);
    }
  }
);
  actions.add(new CheckboxAction("Enabled"){
{
      registerCustomShortcutSet(new CustomShortcutSet(KeyStroke.getKeyStroke(KeyEvent.VK_SPACE,0)),list);
    }
    @Override public void update(    AnActionEvent e){
      super.update(e);
      e.getPresentation().setEnabled(list.getSelectedValue() instanceof BreakpointItem);
      if (getCheckBox() != null) {
        getCheckBox().setFocusable(false);
      }
    }
    @Override public boolean isSelected(    AnActionEvent e){
      return isSelectedBreakpointEnabled(list);
    }
    @Override public void setSelected(    AnActionEvent e,    boolean state){
      setSelectedBreakpointEnabled(list,state);
    }
  }
);
  return actions;
}
