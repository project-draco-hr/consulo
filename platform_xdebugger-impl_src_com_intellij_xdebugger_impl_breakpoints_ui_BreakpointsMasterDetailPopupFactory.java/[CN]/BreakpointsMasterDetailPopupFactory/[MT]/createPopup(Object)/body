{
  MasterDetailPopupBuilder popupBuilder=new MasterDetailPopupBuilder(myProject);
  DefaultActionGroup actions=getActions(popupBuilder);
  final Collection<XBreakpointGroupingRule> rules=new ArrayList<XBreakpointGroupingRule>();
  for (  BreakpointPanelProvider provider : myBreakpointPanelProviders) {
    provider.provideBreakpointsGroupingRules(rules);
  }
  final BreakpointItemsTree tree=BreakpointItemsTree.createTree(rules);
  final ArrayList<BreakpointItem> breakpoints=collectItems();
  tree.buildTree(breakpoints);
  final BreakpointPanelProvider.BreakpointsListener listener=new BreakpointPanelProvider.BreakpointsListener(){
    @Override public void breakpointsChanged(){
      tree.buildTree(collectItems());
    }
  }
;
  for (  BreakpointPanelProvider provider : myBreakpointPanelProviders) {
    provider.addListener(listener,myProject);
  }
  final JBPopup popup=popupBuilder.setActionsGroup(actions).setTree(tree).setDelegate(new MasterDetailPopupBuilder.Delegate(){
    @Override public String getTitle(){
      return "Breakpoints";
    }
    @Override public void handleMnemonic(    KeyEvent e,    Project project,    JBPopup popup){
    }
    public JComponent createAccessoryView(    Project project){
      return new JCheckBox();
    }
    @Override public Object[] getSelectedItemsInTree(){
      final List<BreakpointItem> res=tree.getSelectedBreakpoints();
      return res.toArray(new Object[res.size()]);
    }
  }
).setCloseOnEnter(false).createMasterDetailPopup();
  tree.setBorder(IdeBorderFactory.createBorder());
  popupBuilder.getDetailView().setScheme(createScheme());
  tree.setDelegate(new BreakpointItemsTree.BreakpointItemsTreeDelegate(){
    @Override public void execute(    BreakpointItem item){
      item.execute(myProject,popup);
    }
  }
);
  initSelection(initialBreakpoint,tree,breakpoints);
  popup.addListener(new JBPopupListener(){
    @Override public void beforeShown(    LightweightWindowEvent event){
    }
    @Override public void onClosed(    LightweightWindowEvent event){
      for (      BreakpointPanelProvider provider : myBreakpointPanelProviders) {
        provider.removeListener(listener);
      }
    }
  }
);
  return popup;
}
