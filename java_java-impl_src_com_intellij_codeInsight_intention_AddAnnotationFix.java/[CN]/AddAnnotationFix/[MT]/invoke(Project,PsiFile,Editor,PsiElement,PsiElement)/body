{
  final PsiModifierListOwner myModifierListOwner=(PsiModifierListOwner)startElement;
  final ExternalAnnotationsManager annotationsManager=ExternalAnnotationsManager.getInstance(project);
  final PsiModifierList modifierList=myModifierListOwner.getModifierList();
  LOG.assertTrue(modifierList != null);
  if (modifierList.findAnnotation(myAnnotation) != null)   return;
  final ExternalAnnotationsManager.AnnotationPlace annotationAnnotationPlace=annotationsManager.chooseAnnotationsPlace(myModifierListOwner);
  if (annotationAnnotationPlace == ExternalAnnotationsManager.AnnotationPlace.NOWHERE)   return;
  if (annotationAnnotationPlace == ExternalAnnotationsManager.AnnotationPlace.EXTERNAL) {
    for (    String fqn : myAnnotationsToRemove) {
      annotationsManager.deannotate(myModifierListOwner,fqn);
    }
    annotationsManager.annotateExternally(myModifierListOwner,myAnnotation,file,myPairs);
  }
 else {
    final PsiFile containingFile=myModifierListOwner.getContainingFile();
    if (!CodeInsightUtilBase.preparePsiElementForWrite(containingFile))     return;
    for (    String fqn : myAnnotationsToRemove) {
      PsiAnnotation annotation=AnnotationUtil.findAnnotation(myModifierListOwner,fqn);
      if (annotation != null) {
        annotation.delete();
      }
    }
    PsiAnnotation inserted=modifierList.addAnnotation(myAnnotation);
    for (    PsiNameValuePair pair : myPairs) {
      inserted.setDeclaredAttributeValue(pair.getName(),pair.getValue());
    }
    JavaCodeStyleManager.getInstance(project).shortenClassReferences(inserted);
    if (containingFile != file) {
      UndoUtil.markPsiFileForUndo(file);
    }
  }
}
