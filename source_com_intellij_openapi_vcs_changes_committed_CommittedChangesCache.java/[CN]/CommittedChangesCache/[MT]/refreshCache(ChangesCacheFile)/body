{
  final CachingCommittedChangesProvider provider=cacheFile.getProvider();
  final RepositoryLocation location=cacheFile.getLocation();
  final ChangeBrowserSettings defaultSettings=provider.createDefaultSettings();
  if (provider.refreshCacheByNumber()) {
    final long number=cacheFile.getLastCachedChangelist();
    LOG.info("Refreshing cache for " + location + " since #"+ number);
    defaultSettings.CHANGE_AFTER=Long.toString(number);
    defaultSettings.USE_CHANGE_AFTER_FILTER=true;
  }
 else {
    final Date date=cacheFile.getLastCachedDate();
    LOG.info("Refreshing cache for " + location + " since "+ date);
    defaultSettings.setDateAfter(date);
    defaultSettings.USE_DATE_AFTER_FILTER=true;
  }
  final List<CommittedChangeList> newChanges=provider.getCommittedChanges(defaultSettings,location,0);
  LOG.info("Loaded " + newChanges.size() + " new changelists");
  final List<CommittedChangeList> savedChanges=writeChangesInReadAction(cacheFile,newChanges);
  if (savedChanges.size() > 0) {
    myBus.syncPublisher(COMMITTED_TOPIC).changesLoaded(location,savedChanges);
  }
  return savedChanges;
}
