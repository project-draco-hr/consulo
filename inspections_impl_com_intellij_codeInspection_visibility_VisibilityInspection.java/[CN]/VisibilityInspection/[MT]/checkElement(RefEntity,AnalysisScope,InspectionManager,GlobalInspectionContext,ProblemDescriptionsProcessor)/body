{
  if (refEntity instanceof RefElement) {
    final RefElement refElement=(RefElement)refEntity;
    if (refElement instanceof RefParameter)     return null;
    if (refElement.isSyntheticJSP())     return null;
    if (refElement.isEntry())     return null;
    if (refElement instanceof RefImplicitConstructor)     return null;
    if (refElement instanceof RefMethod) {
      RefMethod refMethod=(RefMethod)refElement;
      if (refMethod.isExternalOverride())       return null;
      if (RefUtil.isEntryPoint(refMethod))       return null;
    }
    if (refElement instanceof RefClass) {
      RefClass refClass=(RefClass)refElement;
      if (refClass.isAnonymous() || RefUtil.isEntryPoint(refClass) || refClass.isTestCase()|| refClass.isServlet()|| refClass.isApplet()|| refClass.isLocalClass())       return null;
      if (isTopLevelClass(refClass) && !SUGGEST_PACKAGE_LOCAL_FOR_TOP_CLASSES)       return null;
    }
    if (refElement.getInReferences().size() == 0)     return null;
    if (refElement.getOwner() instanceof RefClass) {
      RefClass refClass=(RefClass)refElement.getOwner();
      if (refClass.isInterface())       return null;
    }
    final String access=getPossibleAccess(refElement);
    if (access != refElement.getAccessModifier()) {
      final PsiElement psiElement=HighlightUsagesHandler.getNameIdentifier(refElement.getElement());
      if (psiElement != null) {
        if (myFixes == null) {
          myFixes=new BidirectionalMap<QuickFix,String>();
        }
        final List<QuickFix> list=myFixes.getKeysByValue(access);
        final QuickFix fix;
        if (list != null) {
          LOG.assertTrue(list.size() == 1);
          fix=list.get(0);
        }
 else {
          fix=new AcceptSuggestedAccess(globalContext.getRefManager(),access);
          myFixes.put(fix,access);
        }
        return new ProblemDescriptor[]{manager.createProblemDescriptor(psiElement,InspectionsBundle.message("inspection.visibility.compose.suggestion",access == PsiModifier.PACKAGE_LOCAL ? PACKAGE_LOCAL : access),(LocalQuickFix)fix,ProblemHighlightType.GENERIC_ERROR_OR_WARNING)};
      }
    }
  }
  return null;
}
