{
  for (  SmartRefElementPointer entryPoint : EntryPointsManager.getInstance(globalContext.getProject()).getEntryPoints()) {
    RefElement refElement=entryPoint.getRefElement();
    if (refElement != null) {
      ignoreElement(problemDescriptionsProcessor,refElement);
    }
  }
  final Object[] addins=Extensions.getRootArea().getExtensionPoint(ExtensionPoints.VISIBLITY_TOOL).getExtensions();
  for (  Object addin : addins) {
    ((VisibilityExtension)addin).fillIgnoreList(globalContext.getRefManager(),problemDescriptionsProcessor);
  }
  globalContext.getRefManager().iterate(new RefVisitor(){
    public void visitElement(    final RefEntity refEntity){
      if (!(refEntity instanceof RefElement))       return;
      if (problemDescriptionsProcessor.getDescriptions(refEntity) == null)       return;
      refEntity.accept(new RefVisitor(){
        public void visitField(        final RefField refField){
          if (refField.getAccessModifier() != PsiModifier.PRIVATE) {
            globalContext.enqueueFieldUsagesProcessor(refField,new GlobalInspectionContextImpl.UsagesProcessor(){
              public boolean process(              PsiReference psiReference){
                ignoreElement(problemDescriptionsProcessor,refField);
                return false;
              }
            }
);
          }
        }
        public void visitMethod(        final RefMethod refMethod){
          if (!refMethod.isExternalOverride() && refMethod.getAccessModifier() != PsiModifier.PRIVATE && !(refMethod instanceof RefImplicitConstructor)) {
            globalContext.enqueueDerivedMethodsProcessor(refMethod,new GlobalInspectionContextImpl.DerivedMethodsProcessor(){
              public boolean process(              PsiMethod derivedMethod){
                ignoreElement(problemDescriptionsProcessor,refMethod);
                return false;
              }
            }
);
            globalContext.enqueueMethodUsagesProcessor(refMethod,new GlobalInspectionContextImpl.UsagesProcessor(){
              public boolean process(              PsiReference psiReference){
                ignoreElement(problemDescriptionsProcessor,refMethod);
                return false;
              }
            }
);
          }
        }
        public void visitClass(        final RefClass refClass){
          if (!refClass.isAnonymous()) {
            globalContext.enqueueDerivedClassesProcessor(refClass,new GlobalInspectionContextImpl.DerivedClassesProcessor(){
              public boolean process(              PsiClass inheritor){
                ignoreElement(problemDescriptionsProcessor,refClass);
                return false;
              }
            }
);
            globalContext.enqueueClassUsagesProcessor(refClass,new GlobalInspectionContextImpl.UsagesProcessor(){
              public boolean process(              PsiReference psiReference){
                ignoreElement(problemDescriptionsProcessor,refClass);
                return false;
              }
            }
);
          }
        }
      }
);
    }
  }
);
  return false;
}
