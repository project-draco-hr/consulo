{
  myMover.beforeMove(editor,myInfo,myIsDown);
  final Document document=editor.getDocument();
  final int start=StatementUpDownMover.getLineStartSafeOffset(document,myInfo.toMove.startLine);
  final int end=StatementUpDownMover.getLineStartSafeOffset(document,myInfo.toMove.endLine);
  myInfo.range1=document.createRangeMarker(start,end);
  String textToInsert=document.getCharsSequence().subSequence(start,end).toString();
  if (!StringUtil.endsWithChar(textToInsert,'\n'))   textToInsert+='\n';
  final int start2=document.getLineStartOffset(myInfo.toMove2.startLine);
  final int end2=StatementUpDownMover.getLineStartSafeOffset(document,myInfo.toMove2.endLine);
  String textToInsert2=document.getCharsSequence().subSequence(start2,end2).toString();
  if (!StringUtil.endsWithChar(textToInsert2,'\n'))   textToInsert2+='\n';
  myInfo.range2=document.createRangeMarker(start2,end2);
  if (myInfo.range1.getStartOffset() < myInfo.range2.getStartOffset()) {
    myInfo.range1.setGreedyToLeft(true);
    myInfo.range1.setGreedyToRight(false);
    myInfo.range2.setGreedyToLeft(true);
    myInfo.range2.setGreedyToRight(true);
  }
 else {
    myInfo.range1.setGreedyToLeft(true);
    myInfo.range1.setGreedyToRight(true);
    myInfo.range2.setGreedyToLeft(true);
    myInfo.range2.setGreedyToRight(false);
  }
  final CaretModel caretModel=editor.getCaretModel();
  final int caretRelativePos=caretModel.getOffset() - start;
  final SelectionModel selectionModel=editor.getSelectionModel();
  final int selectionStart=selectionModel.getSelectionStart();
  final int selectionEnd=selectionModel.getSelectionEnd();
  final boolean hasSelection=selectionModel.hasSelection();
  caretModel.moveToOffset(0);
  FoldRegion topRegion=null;
  FoldRegion bottomRegion=null;
  for (  FoldRegion foldRegion : editor.getFoldingModel().getAllFoldRegions()) {
    if (!foldRegion.isValid() || (!contains(myInfo.range1,foldRegion) && !contains(myInfo.range2,foldRegion))) {
      continue;
    }
    if (contains(myInfo.range1,foldRegion) && !contains(topRegion,foldRegion)) {
      topRegion=foldRegion;
    }
 else     if (contains(myInfo.range2,foldRegion) && !contains(bottomRegion,foldRegion)) {
      bottomRegion=foldRegion;
    }
  }
  document.insertString(myInfo.range1.getStartOffset(),textToInsert2);
  document.deleteString(myInfo.range1.getStartOffset() + textToInsert2.length(),myInfo.range1.getEndOffset());
  document.insertString(myInfo.range2.getStartOffset(),textToInsert);
  document.deleteString(myInfo.range2.getStartOffset() + textToInsert.length(),myInfo.range2.getEndOffset());
  final Project project=file.getProject();
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  if (topRegion != null && bottomRegion != null) {
    final FoldRegion finalTopRegion=topRegion;
    final FoldRegion finalBottomRegion=bottomRegion;
    editor.getFoldingModel().runBatchFoldingOperation(new Runnable(){
      @Override public void run(){
        boolean topExpanded=finalTopRegion.isExpanded();
        finalTopRegion.setExpanded(finalBottomRegion.isExpanded());
        finalBottomRegion.setExpanded(topExpanded);
      }
    }
);
  }
  CodeFoldingManager.getInstance(project).allowFoldingOnCaretLine(editor);
  if (hasSelection) {
    restoreSelection(editor,selectionStart,selectionEnd,start,myInfo.range2.getStartOffset());
  }
  caretModel.moveToOffset(myInfo.range2.getStartOffset() + caretRelativePos);
  if (myInfo.indentTarget) {
    indentLinesIn(editor,file,document,project,myInfo.range2);
  }
  if (myInfo.indentSource) {
    indentLinesIn(editor,file,document,project,myInfo.range1);
  }
  myMover.afterMove(editor,file,myInfo,myIsDown);
  editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
}
