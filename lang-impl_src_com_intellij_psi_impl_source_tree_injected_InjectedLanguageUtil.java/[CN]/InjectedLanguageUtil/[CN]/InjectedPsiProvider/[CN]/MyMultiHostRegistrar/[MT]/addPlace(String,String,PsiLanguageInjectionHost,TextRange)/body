{
  ProperTextRange.assertProperRange(rangeInsideHost);
  TextRange hostTextRange=host.getTextRange();
  if (!hostTextRange.contains(rangeInsideHost.shiftRight(hostTextRange.getStartOffset()))) {
    clear();
    throw new IllegalArgumentException("rangeInsideHost must lie within host text range. rangeInsideHost:" + rangeInsideHost + "; host textRange:"+ hostTextRange);
  }
  if (myLanguage == null) {
    clear();
    throw new IllegalStateException("Seems you haven't called startInjecting()");
  }
  FileViewProvider viewProvider=myHostPsiFile.getViewProvider();
  myHostVirtualFile=viewProvider.getVirtualFile();
  myHostDocument=(DocumentEx)viewProvider.getDocument();
  myPsiManager=viewProvider.getManager();
  if (prefix == null)   prefix="";
  if (suffix == null)   suffix="";
  prefixes.add(prefix);
  suffixes.add(suffix);
  cleared=false;
  injectionHosts.add(host);
  outChars.append(prefix);
  LiteralTextEscaper<? extends PsiLanguageInjectionHost> textEscaper=host.createLiteralTextEscaper();
  escapers.add(textEscaper);
  isOneLineEditor|=textEscaper.isOneLine();
  TextRange relevantRange=textEscaper.getRelevantTextRange().intersection(rangeInsideHost);
  int startOffset=outChars.length();
  if (relevantRange == null) {
    relevantRange=TextRange.from(textEscaper.getRelevantTextRange().getStartOffset(),0);
  }
 else {
    boolean result=textEscaper.decode(relevantRange,outChars);
    if (!result) {
      int offsetInHost=textEscaper.getOffsetInHost(outChars.length() - startOffset,rangeInsideHost);
      relevantRange=relevantRange.intersection(new TextRange(0,offsetInHost));
    }
  }
  outChars.append(suffix);
  int endOffset=outChars.length();
  TextRange relevantRangeInHost=relevantRange.shiftRight(hostTextRange.getStartOffset());
  relevantRangesInHostDocument.add(relevantRangeInHost);
  RangeMarker relevantMarker=myHostDocument.createRangeMarker(relevantRangeInHost);
  relevantMarker.setGreedyToLeft(true);
  relevantMarker.setGreedyToRight(true);
  shreds.add(new PsiLanguageInjectionHost.Shred(host,relevantMarker,prefix,suffix,new ProperTextRange(startOffset,endOffset)));
  return this;
}
