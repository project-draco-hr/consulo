{
  int arrayDim=psiType.getArrayDimensions();
  psiType=psiType.getDeepComponentType();
  if (!(psiType instanceof PsiClassType))   return;
  final Condition<String> shortNameCondition=new Condition<String>(){
    @Override public boolean value(    String s){
      return matcher.prefixMatches(s);
    }
  }
;
  final PsiClassType baseType=(PsiClassType)psiType;
  final PsiClassType.ClassResolveResult baseResult=ApplicationManager.getApplication().runReadAction(new Computable<PsiClassType.ClassResolveResult>(){
    @Override public PsiClassType.ClassResolveResult compute(){
      return JavaCompletionUtil.originalize(baseType).resolveGenerics();
    }
  }
);
  final PsiClass baseClass=baseResult.getElement();
  final PsiSubstitutor baseSubstitutor=baseResult.getSubstitutor();
  if (baseClass == null)   return;
  final GlobalSearchScope scope=ApplicationManager.getApplication().runReadAction(new Computable<GlobalSearchScope>(){
    @Override public GlobalSearchScope compute(){
      return context.getResolveScope();
    }
  }
);
  final Processor<PsiClass> inheritorsProcessor=createInheritorsProcessor(context,baseType,arrayDim,getRawSubtypes,consumer,baseClass,baseSubstitutor);
  if (matcher.getPrefix().length() > 2) {
    AllClassesGetter.processJavaClasses(matcher,context.getProject(),scope,new Processor<PsiClass>(){
      @Override public boolean process(      PsiClass psiClass){
        if (psiClass.isInheritor(baseClass,true)) {
          return inheritorsProcessor.process(psiClass);
        }
        return true;
      }
    }
);
  }
 else {
    final Query<PsiClass> baseQuery=ClassInheritorsSearch.search(new ClassInheritorsSearch.SearchParameters(baseClass,scope,true,false,false,shortNameCondition));
    final Query<PsiClass> query=new FilteredQuery<PsiClass>(baseQuery,new Condition<PsiClass>(){
      @Override public boolean value(      final PsiClass psiClass){
        return !(psiClass instanceof PsiTypeParameter);
      }
    }
);
    query.forEach(inheritorsProcessor);
  }
}
