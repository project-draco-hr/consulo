{
  final PsiManager manager=context.getManager();
  final JavaPsiFacade facade=JavaPsiFacade.getInstance(manager.getProject());
  final PsiResolveHelper resolveHelper=facade.getResolveHelper();
  return new Processor<PsiClass>(){
    @Override public boolean process(    final PsiClass inheritor){
      ProgressManager.checkCanceled();
      return ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
        @Override public Boolean compute(){
          if (!context.isValid() || !inheritor.isValid() || !facade.getResolveHelper().isAccessible(inheritor,context,null))           return true;
          if (inheritor.getQualifiedName() == null && !manager.areElementsEquivalent(inheritor.getContainingFile(),context.getContainingFile().getOriginalFile())) {
            return true;
          }
          if (JavaCompletionUtil.isInExcludedPackage(inheritor,false))           return true;
          PsiSubstitutor superSubstitutor=TypeConversionUtil.getClassSubstitutor(baseClass,inheritor,PsiSubstitutor.EMPTY);
          if (superSubstitutor == null)           return true;
          if (getRawSubtypes) {
            result.consume(createType(inheritor,facade.getElementFactory().createRawSubstitutor(inheritor),arrayDim));
            return true;
          }
          PsiSubstitutor inheritorSubstitutor=PsiSubstitutor.EMPTY;
          for (          PsiTypeParameter inheritorParameter : PsiUtil.typeParametersIterable(inheritor)) {
            for (            PsiTypeParameter baseParameter : PsiUtil.typeParametersIterable(baseClass)) {
              final PsiType substituted=superSubstitutor.substitute(baseParameter);
              PsiType arg=baseSubstitutor.substitute(baseParameter);
              if (arg instanceof PsiWildcardType) {
                PsiType bound=((PsiWildcardType)arg).getBound();
                arg=bound != null ? bound : ((PsiWildcardType)arg).getExtendsBound();
              }
              PsiType substitution=resolveHelper.getSubstitutionForTypeParameter(inheritorParameter,substituted,arg,true,PsiUtil.getLanguageLevel(context));
              if (PsiType.NULL.equals(substitution) || substitution instanceof PsiWildcardType)               continue;
              if (substitution == null) {
                result.consume(createType(inheritor,facade.getElementFactory().createRawSubstitutor(inheritor),arrayDim));
                return true;
              }
              inheritorSubstitutor=inheritorSubstitutor.put(inheritorParameter,substitution);
              break;
            }
          }
          PsiType toAdd=createType(inheritor,inheritorSubstitutor,arrayDim);
          if (baseType.isAssignableFrom(toAdd)) {
            result.consume(toAdd);
          }
          return true;
        }
      }
).booleanValue();
    }
  }
;
}
