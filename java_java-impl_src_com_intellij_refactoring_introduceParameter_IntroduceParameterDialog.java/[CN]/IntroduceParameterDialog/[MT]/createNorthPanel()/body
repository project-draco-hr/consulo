{
  GridBagConstraints gbConstraints=new GridBagConstraints();
  JPanel panel=new JPanel(new GridBagLayout());
  gbConstraints.anchor=GridBagConstraints.WEST;
  gbConstraints.fill=GridBagConstraints.NONE;
  gbConstraints.gridx=0;
  gbConstraints.insets=new Insets(4,4,4,0);
  gbConstraints.gridwidth=1;
  gbConstraints.weightx=0;
  gbConstraints.weighty=0;
  gbConstraints.gridy=0;
  JLabel type=new JLabel(RefactoringBundle.message("parameter.of.type"));
  panel.add(type,gbConstraints);
  gbConstraints.insets=new Insets(4,4,4,8);
  gbConstraints.gridx++;
  gbConstraints.weightx=1;
  gbConstraints.fill=GridBagConstraints.BOTH;
  myTypeSelector=myTypeSelectorManager.getTypeSelector();
  panel.add(myTypeSelector.getComponent(),gbConstraints);
  gbConstraints.insets=new Insets(4,4,4,8);
  gbConstraints.gridwidth=1;
  gbConstraints.weightx=0;
  gbConstraints.gridx=0;
  gbConstraints.gridy=1;
  gbConstraints.fill=GridBagConstraints.NONE;
  myParameterNameField=new NameSuggestionsField(myProject);
  final JLabel nameLabel=new JLabel(RefactoringBundle.message("name.prompt"));
  nameLabel.setLabelFor(myParameterNameField.getComponent());
  panel.add(nameLabel,gbConstraints);
  gbConstraints.gridx++;
  gbConstraints.insets=new Insets(4,4,4,8);
  gbConstraints.weightx=1;
  gbConstraints.fill=GridBagConstraints.BOTH;
  panel.add(myParameterNameField.getComponent(),gbConstraints);
  myParameterNameChangedListener=new NameSuggestionsField.DataChanged(){
    public void dataChanged(){
      validateButtons();
    }
  }
;
  myParameterNameField.addDataChangedListener(myParameterNameChangedListener);
  myNameSuggestionsManager=new NameSuggestionsManager(myTypeSelector,myParameterNameField,myNameSuggestionsGenerator);
  myNameSuggestionsManager.setLabelsFor(type,nameLabel);
  gbConstraints.gridx=0;
  gbConstraints.insets=new Insets(4,0,4,8);
  gbConstraints.gridwidth=2;
  if (myOccurenceNumber > 1 && !myPanel.myIsInvokedOnDeclaration) {
    gbConstraints.gridy++;
    myPanel.createOccurrencesCb(gbConstraints,panel,myOccurenceNumber);
  }
  if (myPanel.myCbReplaceAllOccurences != null) {
    gbConstraints.insets=new Insets(0,16,4,8);
  }
  JavaRefactoringSettings settings=JavaRefactoringSettings.getInstance();
  myPanel.createLocalVariablePanel(gbConstraints,panel,settings);
  myPanel.createRemoveParamsPanel(gbConstraints,panel);
  gbConstraints.insets=new Insets(4,0,4,8);
  gbConstraints.gridy++;
  myCbDeclareFinal=new NonFocusableCheckBox(RefactoringBundle.message("declare.final"));
  final Boolean settingsFinals=settings.INTRODUCE_PARAMETER_CREATE_FINALS;
  myCbDeclareFinal.setSelected(settingsFinals == null ? CodeStyleSettingsManager.getSettings(myProject).GENERATE_FINAL_PARAMETERS : settingsFinals.booleanValue());
  panel.add(myCbDeclareFinal,gbConstraints);
  if (myMustBeFinal) {
    myCbDeclareFinal.setSelected(true);
    myCbDeclareFinal.setEnabled(false);
  }
 else   if (myHasWriteAccess) {
    myCbDeclareFinal.setSelected(false);
    myCbDeclareFinal.setEnabled(false);
  }
  gbConstraints.gridy++;
  myPanel.createDelegateCb(gbConstraints,panel);
  return panel;
}
