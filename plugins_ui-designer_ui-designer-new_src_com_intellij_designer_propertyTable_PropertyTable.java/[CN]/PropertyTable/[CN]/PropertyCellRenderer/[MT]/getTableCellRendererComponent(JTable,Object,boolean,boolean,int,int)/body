{
  myPropertyNameRenderer.getTableCellRendererComponent(table,value,selected,hasFocus,row,column);
  column=table.convertColumnIndexToModel(column);
  Property property=(Property)value;
  Color background=table.getBackground();
  try {
    if (isDefault(property)) {
      background=Gray._240;
    }
  }
 catch (  Throwable e) {
    LOG.debug(e);
  }
  if (!selected) {
    myPropertyNameRenderer.setBackground(background);
  }
  if (column == 0) {
    SimpleTextAttributes attributes=SimpleTextAttributes.REGULAR_ATTRIBUTES;
    if (property.isImportant()) {
      attributes=SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES;
    }
 else     if (property.isExpert()) {
      attributes=SimpleTextAttributes.REGULAR_ITALIC_ATTRIBUTES;
    }
    if (property.isDeprecated()) {
      attributes=new SimpleTextAttributes(attributes.getBgColor(),attributes.getFgColor(),attributes.getWaveColor(),attributes.getStyle() | SimpleTextAttributes.STYLE_STRIKEOUT);
    }
    myPropertyNameRenderer.append(property.getName(),attributes);
    if (!getChildren(property).isEmpty()) {
      if (property.getParent() == null) {
        if (isExpanded(property)) {
          myPropertyNameRenderer.setIcon(myCollapseIcon);
        }
 else {
          myPropertyNameRenderer.setIcon(myExpandIcon);
        }
      }
 else {
        if (isExpanded(property)) {
          myPropertyNameRenderer.setIcon(myIndentedCollapseIcon);
        }
 else {
          myPropertyNameRenderer.setIcon(myIndentedExpandIcon);
        }
      }
    }
 else {
      myPropertyNameRenderer.setIcon(myIndentIcons[property.getIndent()]);
    }
    if (!selected) {
      myPropertyNameRenderer.setForeground(property.isExpert() ? Color.LIGHT_GRAY : table.getForeground());
    }
  }
 else {
    try {
      PropertyRenderer renderer=property.getRenderer();
      JComponent component=renderer.getComponent(getCurrentComponent(),getValue(property),selected,hasFocus);
      if (!selected) {
        component.setBackground(background);
      }
      component.setFont(table.getFont());
      if (component instanceof JCheckBox) {
        component.putClientProperty("JComponent.sizeVariant",UIUtil.isUnderAquaLookAndFeel() ? "small" : null);
      }
      return component;
    }
 catch (    Throwable e) {
      LOG.debug(e);
      myErrorRenderer.clear();
      myErrorRenderer.append(DesignerBundle.message("designer.properties.getting.error",e.getMessage()),SimpleTextAttributes.ERROR_ATTRIBUTES);
      return myErrorRenderer;
    }
  }
  return myPropertyNameRenderer;
}
