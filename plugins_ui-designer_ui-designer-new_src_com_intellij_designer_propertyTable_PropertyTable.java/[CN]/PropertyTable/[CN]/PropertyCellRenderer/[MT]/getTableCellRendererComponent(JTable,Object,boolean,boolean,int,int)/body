{
  column=table.convertColumnIndexToModel(column);
  Property property=(Property)value;
  Color background=table.getBackground();
  boolean isDefault=true;
  try {
    isDefault=isDefault(property);
  }
 catch (  Throwable e) {
    LOG.debug(e);
  }
  if (isDefault) {
    background=Gray._240;
  }
  if (column == 0) {
    myPropertyNameRenderer.getTableCellRendererComponent(table,value,selected,hasFocus,row,column);
    if (!selected) {
      myPropertyNameRenderer.setBackground(background);
    }
    SimpleTextAttributes attributes=SimpleTextAttributes.REGULAR_ATTRIBUTES;
    if (property.isImportant()) {
      attributes=SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES;
    }
 else     if (property.isExpert()) {
      attributes=SimpleTextAttributes.REGULAR_ITALIC_ATTRIBUTES;
    }
    ErrorInfo errorInfo=getErrorInfoForRow(row);
    if (errorInfo != null) {
      Map<HighlightSeverity,SimpleTextAttributes> cache=myRegularAttributes;
      if (property.isImportant()) {
        cache=myBoldAttributes;
      }
 else       if (property.isExpert()) {
        cache=myItalicAttributes;
      }
      HighlightSeverity severity=errorInfo.getLevel().getSeverity();
      SimpleTextAttributes errorAttributes=cache.get(severity);
      if (errorAttributes == null) {
        TextAttributesKey attributesKey=SeverityRegistrar.getInstance(myDesigner.getProject()).getHighlightInfoTypeBySeverity(severity).getAttributesKey();
        TextAttributes textAttributes=EditorColorsManager.getInstance().getGlobalScheme().getAttributes(attributesKey);
        if (property.isImportant()) {
          textAttributes=textAttributes.clone();
          textAttributes.setFontType(textAttributes.getFontType() | Font.BOLD);
        }
 else         if (property.isExpert()) {
          textAttributes=textAttributes.clone();
          textAttributes.setFontType(textAttributes.getFontType() | Font.ITALIC);
        }
        errorAttributes=SimpleTextAttributes.fromTextAttributes(textAttributes);
        cache.put(severity,errorAttributes);
      }
      attributes=errorAttributes;
    }
    if (property.isDeprecated()) {
      attributes=new SimpleTextAttributes(attributes.getBgColor(),attributes.getFgColor(),attributes.getWaveColor(),attributes.getStyle() | SimpleTextAttributes.STYLE_STRIKEOUT);
    }
    myPropertyNameRenderer.append(property.getName(),attributes);
    if (!getChildren(property).isEmpty()) {
      if (property.getParent() == null) {
        if (isExpanded(property)) {
          myPropertyNameRenderer.setIcon(myCollapseIcon);
        }
 else {
          myPropertyNameRenderer.setIcon(myExpandIcon);
        }
      }
 else {
        if (isExpanded(property)) {
          myPropertyNameRenderer.setIcon(myIndentedCollapseIcon);
        }
 else {
          myPropertyNameRenderer.setIcon(myIndentedExpandIcon);
        }
      }
    }
 else {
      myPropertyNameRenderer.setIcon(myIndentIcons[property.getIndent()]);
    }
    if (!selected) {
      if (isDefault) {
        myPropertyNameRenderer.setForeground(property.isExpert() ? Color.LIGHT_GRAY : table.getForeground());
      }
 else {
        myPropertyNameRenderer.setForeground(FileStatus.MODIFIED.getColor());
      }
    }
    return myPropertyNameRenderer;
  }
 else {
    if (!myDesigner.doPaint) {
      return myNoRenderer;
    }
    try {
      PropertyRenderer renderer=property.getRenderer();
      JComponent component=renderer.getComponent(getCurrentComponent(),getValue(property),selected,hasFocus);
      if (!selected) {
        component.setBackground(background);
      }
      component.setFont(table.getFont());
      if (component instanceof JCheckBox) {
        component.putClientProperty("JComponent.sizeVariant",UIUtil.isUnderAquaLookAndFeel() ? "small" : null);
      }
      return component;
    }
 catch (    Throwable e) {
      LOG.debug(e);
      myErrorRenderer.clear();
      myErrorRenderer.append(DesignerBundle.message("designer.properties.getting.error",e.getMessage()),SimpleTextAttributes.ERROR_ATTRIBUTES);
      return myErrorRenderer;
    }
  }
}
