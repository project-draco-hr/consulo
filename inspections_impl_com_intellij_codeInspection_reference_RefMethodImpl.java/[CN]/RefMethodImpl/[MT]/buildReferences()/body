{
  PsiMethod method=(PsiMethod)getElement();
  if (method != null) {
    PsiCodeBlock body=method.getBody();
    final RefUtilImpl refUtil=(RefUtilImpl)RefUtil.getInstance();
    refUtil.addReferences(method,this,body);
    checkForSuperCall(method);
    setOnlyCallsSuper(refUtil.isMethodOnlyCallsSuper(method));
    setBodyEmpty(isOnlyCallsSuper() || !isLibraryOverride() && (body == null || body.getStatements().length == 0));
    final EjbRolesUtil ejbRolesUtil=EjbRolesUtil.getEjbRolesUtil();
    EjbClassRole classRole=ejbRolesUtil.getEjbRole(method.getContainingClass());
    if (classRole != null) {
      EjbMethodRole role=ejbRolesUtil.getEjbRole(method);
      if (role != null) {
        EjbMethodRoleEnum roleType=role.getType();
        if (role instanceof EjbDeclMethodRole) {
          setEjbDeclaration(true);
          if (roleType == EjbMethodRoleEnum.EJB_METHOD_ROLE_FINDER_DECL || roleType == EjbMethodRoleEnum.EJB_METHOD_ROLE_CMP_SETTER_DECL || roleType == EjbMethodRoleEnum.EJB_METHOD_ROLE_CMR_SETTER_DECL || roleType == EjbMethodRoleEnum.EJB_METHOD_ROLE_CMP_GETTER_DECL || roleType == EjbMethodRoleEnum.EJB_METHOD_ROLE_CMR_GETTER_DECL) {
            for (            RefParameter refParameter : myParameters) {
              refParameter.parameterReferenced(false);
              refParameter.parameterReferenced(true);
            }
          }
        }
 else         if (role instanceof EjbImplMethodRole) {
          PsiMethod[] declarations=((EjbImplMethodRole)role).findAllDeclarations();
          if (declarations.length != 0) {
            for (            PsiMethod psiDeclaration : declarations) {
              if (refUtil.belongsToScope(psiDeclaration,getRefManager())) {
                RefMethodImpl refDeclaration=(RefMethodImpl)getRefManager().getReference(psiDeclaration);
                if (refDeclaration != null) {
                  addSuperMethod(refDeclaration);
                  refDeclaration.markExtended(this);
                }
 else {
                  setLibraryOverride(true);
                }
              }
 else {
                setLibraryOverride(true);
              }
            }
          }
          if (roleType == EjbMethodRoleEnum.EJB_METHOD_ROLE_CMP_GETTER_IMPL || roleType == EjbMethodRoleEnum.EJB_METHOD_ROLE_CMP_SETTER_IMPL || roleType == EjbMethodRoleEnum.EJB_METHOD_ROLE_CMR_GETTER_IMPL || roleType == EjbMethodRoleEnum.EJB_METHOD_ROLE_CMR_SETTER_IMPL || roleType == EjbMethodRoleEnum.EJB_METHOD_ROLE_CREATE_IMPL) {
            setBodyEmpty(false);
          }
          if (roleType == EjbMethodRoleEnum.EJB_METHOD_ROLE_CMP_GETTER_IMPL || roleType == EjbMethodRoleEnum.EJB_METHOD_ROLE_CMP_SETTER_IMPL || roleType == EjbMethodRoleEnum.EJB_METHOD_ROLE_CMR_GETTER_IMPL || roleType == EjbMethodRoleEnum.EJB_METHOD_ROLE_CMR_SETTER_IMPL || roleType == EjbMethodRoleEnum.EJB_METHOD_ROLE_FINDER_IMPL) {
            for (            RefParameter refParameter : myParameters) {
              refParameter.parameterReferenced(false);
              refParameter.parameterReferenced(true);
            }
          }
          setEjbImplementation(true);
        }
      }
    }
    PsiType retType=method.getReturnType();
    if (retType != null) {
      PsiType psiType=retType;
      RefClass ownerClass=refUtil.getOwnerClass(getRefManager(),method);
      if (ownerClass != null) {
        psiType=psiType.getDeepComponentType();
        if (psiType instanceof PsiClassType) {
          PsiClass psiClass=PsiUtil.resolveClassInType(psiType);
          if (psiClass != null && refUtil.belongsToScope(psiClass,getRefManager())) {
            RefClassImpl refClass=(RefClassImpl)getRefManager().getReference(psiClass);
            if (refClass != null) {
              refClass.addTypeReference(ownerClass);
              refClass.addClassExporter(this);
            }
          }
        }
      }
    }
    for (    RefParameter parameter : getParameters()) {
      refUtil.setIsFinal(parameter,parameter.getElement().hasModifierProperty(PsiModifier.FINAL));
    }
    ((RefManagerImpl)getRefManager()).fireBuildReferences(this);
  }
}
