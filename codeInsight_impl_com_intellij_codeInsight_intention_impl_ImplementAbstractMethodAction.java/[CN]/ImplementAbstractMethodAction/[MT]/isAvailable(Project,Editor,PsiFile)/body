{
  int offset=editor.getCaretModel().getOffset();
  final PsiMethod method=findMethod(file,offset);
  if (method == null || !method.isValid())   return false;
  setText(CodeInsightBundle.message("intention.implement.abstract.method.text",method.getName()));
  if (!method.getManager().isInProject(method))   return false;
  PsiClass containingClass=method.getContainingClass();
  if (containingClass == null)   return false;
  if (containingClass.isInterface() || method.hasModifierProperty(PsiModifier.ABSTRACT)) {
    PsiSearchHelper helper=file.getManager().getSearchHelper();
class MyElementProcessor implements PsiElementProcessor {
      private boolean myIsFound;
      public boolean isFound(){
        return myIsFound;
      }
      public boolean execute(      PsiElement element){
        if (element instanceof PsiClass) {
          PsiClass aClass=(PsiClass)element;
          if (aClass.findMethodBySignature(method,false) == null) {
            myIsFound=true;
            return false;
          }
        }
        return true;
      }
    }
    MyElementProcessor processor=new MyElementProcessor();
    ClassInheritorsSearch.search(containingClass,containingClass.getUseScope(),false).forEach(new PsiElementProcessorAdapter<PsiClass>(processor));
    return processor.isFound();
  }
  return false;
}
