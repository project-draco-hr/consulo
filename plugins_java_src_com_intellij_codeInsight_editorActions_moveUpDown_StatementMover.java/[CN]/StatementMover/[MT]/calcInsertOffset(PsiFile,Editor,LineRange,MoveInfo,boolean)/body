{
  int destLine=getDestLineForAnon(file,editor,range,info,down);
  int startLine=down ? range.endLine : range.startLine - 1;
  if (destLine < 0 || startLine < 0)   return false;
  while (true) {
    final int offset=editor.logicalPositionToOffset(new LogicalPosition(destLine,0));
    PsiElement element=firstNonWhiteElement(offset,file,true);
    while (element != null && !(element instanceof PsiFile)) {
      if (!element.getTextRange().grown(-1).shiftRight(1).contains(offset)) {
        PsiElement elementToSurround=null;
        boolean found=false;
        if ((element instanceof PsiStatement || element instanceof PsiComment) && statementCanBePlacedAlong(element)) {
          found=true;
          if (!(element.getParent() instanceof PsiCodeBlock)) {
            elementToSurround=element;
          }
        }
 else         if (element instanceof PsiJavaToken && ((PsiJavaToken)element).getTokenType() == JavaTokenType.RBRACE && element.getParent() instanceof PsiCodeBlock) {
          found=true;
        }
        if (found) {
          statementToSurroundWithCodeBlock=elementToSurround;
          info.toMove=range;
          int endLine=destLine;
          if (startLine > endLine) {
            int tmp=endLine;
            endLine=startLine;
            startLine=tmp;
          }
          info.toMove2=down ? new LineRange(startLine,endLine) : new LineRange(startLine,endLine + 1);
          return true;
        }
      }
      element=element.getParent();
    }
    destLine+=down ? 1 : -1;
    if (destLine == 0 || destLine >= editor.getDocument().getLineCount()) {
      return false;
    }
  }
}
