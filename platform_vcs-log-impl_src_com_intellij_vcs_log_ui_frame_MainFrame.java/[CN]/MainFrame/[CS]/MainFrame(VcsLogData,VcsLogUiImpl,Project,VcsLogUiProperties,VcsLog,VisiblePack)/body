{
  myLogData=logData;
  myUi=ui;
  myLog=log;
  myFilterUi=new VcsLogClassicFilterUi(myUi,logData,uiProperties,initialDataPack);
  myGraphTable=new VcsLogGraphTable(ui,logData,initialDataPack);
  myDetailsPanel=new DetailsPanel(logData,ui.getColorManager(),this);
  myChangesBrowser=new RepositoryChangesBrowser(project,null,Collections.emptyList(),null){
    @Override protected void buildToolBar(    DefaultActionGroup toolBarGroup){
      super.buildToolBar(toolBarGroup);
      toolBarGroup.add(ActionManager.getInstance().getAction(VcsLogActionPlaces.VCS_LOG_SHOW_DETAILS_ACTION));
    }
  }
;
  myChangesBrowser.getViewerScrollPane().setBorder(IdeBorderFactory.createBorder(SideBorder.TOP));
  myChangesBrowser.getDiffAction().registerCustomShortcutSet(myChangesBrowser.getDiffAction().getShortcutSet(),getGraphTable());
  myChangesBrowser.getEditSourceAction().registerCustomShortcutSet(CommonShortcuts.getEditSource(),getGraphTable());
  myChangesBrowser.getViewer().setEmptyText("");
  myChangesLoadingPane=new JBLoadingPanel(new BorderLayout(),this,ProgressWindow.DEFAULT_PROGRESS_DIALOG_POSTPONE_TIME_MILLIS);
  myChangesLoadingPane.add(myChangesBrowser);
  myDetailsSplitter=new OnePixelSplitter(true,"vcs.log.details.splitter.proportion",0.7f);
  myDetailsSplitter.setFirstComponent(myChangesLoadingPane);
  setupDetailsSplitter(uiProperties.isShowDetails());
  myGraphTable.getSelectionModel().addListSelectionListener(new CommitSelectionListenerForDiff());
  myDetailsPanel.installCommitSelectionListener(myGraphTable);
  updateWhenDetailsAreLoaded();
  myTextFilter=myFilterUi.createTextFilter();
  myToolbar=createActionsToolbar();
  ProgressStripe progressStripe=new ProgressStripe(setupScrolledGraph(),this,ProgressWindow.DEFAULT_PROGRESS_DIALOG_POSTPONE_TIME_MILLIS){
    @Override public void updateUI(){
      super.updateUI();
      if (myDecorator != null && myLogData.getProgress().isRunning())       startLoadingImmediately();
    }
  }
;
  myLogData.getProgress().addProgressIndicatorListener(new VcsLogProgress.ProgressListener(){
    @Override public void progressStarted(){
      progressStripe.startLoading();
    }
    @Override public void progressStopped(){
      progressStripe.stopLoading();
    }
  }
,this);
  JComponent toolbars=new JPanel(new BorderLayout());
  toolbars.add(myToolbar,BorderLayout.NORTH);
  JComponent toolbarsAndTable=new JPanel(new BorderLayout());
  toolbarsAndTable.add(toolbars,BorderLayout.NORTH);
  toolbarsAndTable.add(progressStripe,BorderLayout.CENTER);
  myChangesBrowserSplitter=new OnePixelSplitter(false,"vcs.log.changes.splitter.proportion",0.7f);
  myChangesBrowserSplitter.setFirstComponent(toolbarsAndTable);
  myChangesBrowserSplitter.setSecondComponent(myDetailsSplitter);
  setLayout(new BorderLayout());
  add(myChangesBrowserSplitter);
  Disposer.register(ui,this);
  myGraphTable.resetDefaultFocusTraversalKeys();
  setFocusCycleRoot(true);
  setFocusTraversalPolicy(new MyFocusPolicy());
}
