{
  if (VcsLogDataKeys.VCS_LOG == key) {
    sink.put(key,myLog);
  }
 else   if (VcsLogDataKeys.VCS_LOG_UI == key) {
    sink.put(key,myUI);
  }
 else   if (VcsLogDataKeys.VCS_LOG_DATA_PROVIDER == key) {
    sink.put(key,myLogDataHolder);
  }
 else   if (VcsDataKeys.CHANGES == key || VcsDataKeys.SELECTED_CHANGES == key) {
    List<Change> selectedChanges=getSelectedChanges();
    if (selectedChanges != null) {
      sink.put(key,ArrayUtil.toObjectArray(selectedChanges,Change.class));
    }
  }
 else   if (VcsDataKeys.VCS_REVISION_NUMBERS == key) {
    List<Hash> hashes=myUI.getVcsLog().getSelectedCommits();
    sink.put(key,ArrayUtil.toObjectArray(ContainerUtil.map(hashes,new Function<Hash,VcsRevisionNumber>(){
      @Override public VcsRevisionNumber fun(      Hash hash){
        return new TextRevisionNumber(hash.asString(),hash.toShortString());
      }
    }
),VcsRevisionNumber.class));
  }
}
