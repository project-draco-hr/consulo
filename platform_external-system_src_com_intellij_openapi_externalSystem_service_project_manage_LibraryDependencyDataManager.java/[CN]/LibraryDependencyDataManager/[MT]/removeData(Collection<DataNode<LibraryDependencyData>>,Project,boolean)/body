{
  if (toRemove.isEmpty()) {
    return;
  }
  Map<DataNode<ModuleData>,Collection<DataNode<LibraryDependencyData>>> byModule=ExternalSystemUtil.groupBy(toRemove,MODULE);
  for (  Map.Entry<DataNode<ModuleData>,Collection<DataNode<LibraryDependencyData>>> entry : byModule.entrySet()) {
    Module module=myProjectStructureHelper.findIdeModule(entry.getKey().getData(),project);
    if (module == null) {
      LOG.warn(String.format("Can't remove library dependencies %s. Reason: target module (%s) is not found at the ide",entry.getValue(),entry.getKey()));
      continue;
    }
    List<ExportableOrderEntry> dependencies=ContainerUtilRt.newArrayList();
    for (    DataNode<LibraryDependencyData> node : entry.getValue()) {
      LibraryOrderEntry dependency=myProjectStructureHelper.findIdeLibraryDependency(module.getName(),node.getData().getName(),project);
      if (dependency != null) {
        LOG.warn(String.format("Can't remove library dependency '%s'. Reason: target module (%s) is not found at the ide",node,entry.getKey()));
        continue;
      }
    }
    doRemoveData(dependencies,module,synchronous);
  }
}
