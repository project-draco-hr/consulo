{
  if (id.getType() == GradleEntityType.SYNTHETIC) {
    return SYNTHETIC_WEIGHT;
  }
  final Object entity=id.mapToEntity(myContext);
  final Ref<Integer> result=new Ref<Integer>();
  if (entity instanceof GradleEntity) {
    ((GradleEntity)entity).invite(new GradleEntityVisitor(){
      @Override public void visit(      @NotNull GradleProject project){
        result.set(PROJECT_WEIGHT);
      }
      @Override public void visit(      @NotNull GradleModule module){
        result.set(MODULE_WEIGHT);
      }
      @Override public void visit(      @NotNull GradleContentRoot contentRoot){
        result.set(CONTENT_ROOT_WEIGHT);
      }
      @Override public void visit(      @NotNull GradleLibrary library){
        result.set(LIBRARY_WEIGHT);
      }
      @Override public void visit(      @NotNull GradleModuleDependency dependency){
        result.set(MODULE_DEPENDENCY_WEIGHT);
      }
      @Override public void visit(      @NotNull GradleLibraryDependency dependency){
        result.set(LIBRARY_DEPENDENCY_WEIGHT);
      }
    }
);
  }
 else {
    GradleUtil.dispatch(entity,new IntellijEntityVisitor(){
      @Override public void visit(      @NotNull Project project){
        result.set(PROJECT_WEIGHT);
      }
      @Override public void visit(      @NotNull Module module){
        result.set(MODULE_WEIGHT);
      }
      @Override public void visit(      @NotNull ModuleAwareContentRoot contentRoot){
        int i=0;
        for (        OrderEntry entry : myContext.getPlatformFacade().getOrderEntries(contentRoot.getModule())) {
          if (entry instanceof ModuleSourceOrderEntry) {
            result.set(i);
            return;
          }
          i++;
        }
        result.set(UNKNOWN_WEIGHT);
      }
      @Override public void visit(      @NotNull LibraryOrderEntry libraryDependency){
        result.set(getWeight(libraryDependency.getOwnerModule(),libraryDependency));
      }
      @Override public void visit(      @NotNull ModuleOrderEntry moduleDependency){
        result.set(getWeight(moduleDependency.getOwnerModule(),moduleDependency));
      }
    }
);
  }
  try {
    return result.get();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}
