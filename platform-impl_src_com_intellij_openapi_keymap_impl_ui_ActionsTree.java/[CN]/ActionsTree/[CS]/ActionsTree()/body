{
  myRoot=new DefaultMutableTreeNode(ROOT);
  myTree=new JTree(new MyModel(myRoot));
  myTree.setCellRenderer(new ColoredTreeCellRenderer(){
    public void customizeCellRenderer(    JTree tree,    Object value,    boolean selected,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      Keymap originalKeymap=myKeymap != null ? myKeymap.getParent() : null;
      Icon icon=null;
      String text;
      if (value instanceof DefaultMutableTreeNode) {
        Object userObject=((DefaultMutableTreeNode)value).getUserObject();
        boolean changed;
        if (userObject instanceof Group) {
          Group group=(Group)userObject;
          text=group.getName();
          changed=originalKeymap != null && isGroupChanged(group,originalKeymap,myKeymap);
          icon=expanded ? group.getOpenIcon() : group.getIcon();
          if (icon == null) {
            icon=expanded ? OPEN_ICON : CLOSE_ICON;
          }
        }
 else         if (userObject instanceof String) {
          String actionId=(String)userObject;
          AnAction action=ActionManager.getInstance().getActionOrStub(actionId);
          text=action != null ? action.getTemplatePresentation().getText() : actionId;
          if (action != null) {
            Icon actionIcon=action.getTemplatePresentation().getIcon();
            if (actionIcon != null) {
              icon=actionIcon;
            }
          }
          changed=originalKeymap != null && isActionChanged(actionId,originalKeymap,myKeymap);
        }
 else         if (userObject instanceof QuickList) {
          QuickList list=(QuickList)userObject;
          icon=QUICK_LIST_ICON;
          text=list.getDisplayName();
          changed=originalKeymap != null && isActionChanged(list.getActionId(),originalKeymap,myKeymap);
        }
 else         if (userObject instanceof Separator) {
          changed=false;
          text="-------------";
        }
 else {
          throw new IllegalArgumentException("unknown userObject: " + userObject);
        }
        setIcon(ActionsTree.getEvenIcon(icon));
        Color foreground;
        if (selected && hasFocus) {
          foreground=UIUtil.getTreeSelectionForeground();
        }
 else {
          if (changed) {
            foreground=Color.BLUE;
          }
 else {
            foreground=UIUtil.getTreeForeground();
          }
        }
        SearchUtil.appendFragments(myFilter,text,Font.PLAIN,foreground,selected ? UIUtil.getTreeSelectionBackground() : UIUtil.getTreeTextBackground(),this);
      }
    }
  }
);
  myTree.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myComponent=ScrollPaneFactory.createScrollPane(myTree);
}
