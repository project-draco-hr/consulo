{
  super(new BorderLayout());
  myProject=project;
  myModel=new DefaultListModel();
  myList=new JList(myModel);
  myList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
  myCommander=commander;
  if (commander != null) {
    myCopyPasteDelegator=new CopyPasteManagerEx.CopyPasteDelegator(myProject,myList){
      protected PsiElement[] getSelectedElements(){
        return CommanderPanel.this.getSelectedElements();
      }
    }
;
  }
  myListSpeedSearch=new ListSpeedSearch(myList);
  ListScrollingUtilEx.installActions(myList);
  myList.registerKeyboardAction(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      if (myBuilder == null)       return;
      myBuilder.buildRoot();
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_BACK_SLASH,SystemInfo.isMac ? KeyEvent.META_MASK : KeyEvent.CTRL_MASK),JComponent.WHEN_FOCUSED);
  myList.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),"DrillDown");
  myList.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_DOWN,SystemInfo.isMac ? KeyEvent.META_MASK : KeyEvent.CTRL_MASK),"DrillDown");
  myList.getActionMap().put("DrillDown",new AbstractAction(){
    public void actionPerformed(    final ActionEvent e){
      drillDown();
    }
  }
);
  myList.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    final MouseEvent e){
      if (e.getClickCount() == 2) {
        drillDown();
      }
    }
  }
);
  myList.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_UP,SystemInfo.isMac ? KeyEvent.META_MASK : KeyEvent.CTRL_MASK),"GoUp");
  myList.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_BACK_SPACE,0),"GoUp");
  myList.getActionMap().put("GoUp",new AbstractAction(){
    public void actionPerformed(    final ActionEvent e){
      goUp();
    }
  }
);
  myList.getActionMap().put("selectAll",new AbstractAction(){
    public void actionPerformed(    final ActionEvent e){
    }
  }
);
  myList.addMouseListener(new PopupHandler(){
    public void invokePopup(    final Component comp,    final int x,    final int y){
      CommanderPanel.this.invokePopup(comp,x,y);
    }
  }
);
  myList.addKeyListener(new KeyAdapter(){
    public void keyPressed(    final KeyEvent e){
      if (KeyEvent.VK_ESCAPE == e.getKeyCode()) {
        if (e.isConsumed())         return;
        final CopyPasteManagerEx copyPasteManager=(CopyPasteManagerEx)CopyPasteManager.getInstance();
        final boolean[] isCopied=new boolean[1];
        if (copyPasteManager.getElements(isCopied) != null && !isCopied[0]) {
          copyPasteManager.clear();
          e.consume();
        }
      }
    }
  }
);
  myList.addFocusListener(new FocusAdapter(){
    public void focusGained(    final FocusEvent e){
      setActive(true);
    }
    public void focusLost(    final FocusEvent e){
      setActive(false);
    }
  }
);
  new ListToolTipHandler(myList);
}
