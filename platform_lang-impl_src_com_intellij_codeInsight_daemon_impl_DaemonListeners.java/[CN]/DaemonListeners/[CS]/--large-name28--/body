{
  Disposer.register(project,this);
  myProject=project;
  myDaemonCodeAnalyzer=daemonCodeAnalyzer;
  myPsiDocumentManager=psiDocumentManager;
  myFileEditorManager=fileEditorManager;
  myUndoManager=undoManager;
  myProjectLevelVcsManager=projectLevelVcsManager;
  myVcsDirtyScopeManager=vcsDirtyScopeManager;
  myFileStatusManager=fileStatusManager;
  myActionManager=actionManagerEx;
  myTooltipController=tooltipController;
  boolean replaced=((UserDataHolderEx)myProject).replace(DAEMON_INITIALIZED,null,Boolean.TRUE);
  LOG.assertTrue(replaced,"Daemon listeners already initialized for the project " + myProject);
  MessageBus messageBus=myProject.getMessageBus();
  myDaemonEventPublisher=messageBus.syncPublisher(DaemonCodeAnalyzer.DAEMON_EVENT_TOPIC);
  if (project.isDefault())   return;
  MessageBusConnection connection=messageBus.connect();
  connection.subscribe(AppLifecycleListener.TOPIC,new AppLifecycleListener.Adapter(){
    @Override public void appClosing(){
      stopDaemon(false,"App closing");
    }
  }
);
  EditorEventMulticaster eventMulticaster=editorFactory.getEventMulticaster();
  eventMulticaster.addDocumentListener(new DocumentAdapter(){
    @Override public void beforeDocumentChange(    final DocumentEvent e){
      if (isUnderIgnoredAction(null))       return;
      Document document=e.getDocument();
      VirtualFile virtualFile=fileDocumentManager.getFile(document);
      Project project=virtualFile == null ? null : ProjectUtil.guessProjectForFile(virtualFile);
      if (!worthBothering(document,project)) {
        return;
      }
      stopDaemon(true,"Document change");
      UpdateHighlightersUtil.updateHighlightersByTyping(myProject,e);
    }
  }
,this);
  eventMulticaster.addCaretListener(new CaretAdapter(){
    @Override public void caretPositionChanged(    CaretEvent e){
      final Editor editor=e.getEditor();
      if (!editor.getComponent().isShowing() && !application.isUnitTestMode() || !worthBothering(editor.getDocument(),editor.getProject())) {
        return;
      }
      if (!application.isUnitTestMode()) {
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          @Override public void run(){
            if (!editor.getComponent().isShowing() || myProject.isDisposed()) {
              return;
            }
            myDaemonCodeAnalyzer.hideLastIntentionHint();
          }
        }
,ModalityState.current());
      }
    }
  }
,this);
  eventMulticaster.addEditorMouseMotionListener(new MyEditorMouseMotionListener(),this);
  eventMulticaster.addEditorMouseListener(new MyEditorMouseListener(myTooltipController),this);
  EditorTrackerListener editorTrackerListener=new EditorTrackerListener(){
    private List<Editor> myActiveEditors=Collections.emptyList();
    @Override public void activeEditorsChanged(    @NotNull List<Editor> editors){
      List<Editor> activeEditors=editorTracker.getActiveEditors();
      if (myActiveEditors.equals(activeEditors)) {
        return;
      }
      myActiveEditors=activeEditors;
      stopDaemon(true,"Active editor change");
      if (ApplicationManager.getApplication().isDispatchThread() && LaterInvocator.isInModalContext()) {
        myDaemonCodeAnalyzer.setUpdateByTimerEnabled(true);
      }
      for (      Editor editor : activeEditors) {
        repaintErrorStripeRenderer(editor,myProject);
      }
    }
  }
;
  editorTracker.addEditorTrackerListener(editorTrackerListener,this);
  EditorFactoryListener editorFactoryListener=new EditorFactoryListener(){
    @Override public void editorCreated(    @NotNull EditorFactoryEvent event){
      Editor editor=event.getEditor();
      Document document=editor.getDocument();
      Project editorProject=editor.getProject();
      PsiFile file=editorProject == null ? null : PsiDocumentManager.getInstance(editorProject).getPsiFile(document);
      if (!editor.getComponent().isShowing() || !worthBothering(document,editorProject)) {
        LOG.debug("Not worth: " + file);
        return;
      }
      repaintErrorStripeRenderer(editor,myProject);
    }
    @Override public void editorReleased(    @NotNull EditorFactoryEvent event){
      UIUtil.invokeLaterIfNeeded(new Runnable(){
        @Override public void run(){
          myDaemonCodeAnalyzer.hideLastIntentionHint();
        }
      }
);
    }
  }
;
  editorFactory.addEditorFactoryListener(editorFactoryListener,this);
  PsiDocumentManagerImpl documentManager=(PsiDocumentManagerImpl)psiDocumentManager;
  PsiChangeHandler changeHandler=new PsiChangeHandler(myProject,documentManager,editorFactory,connection,daemonCodeAnalyzer.getFileStatusMap());
  Disposer.register(this,changeHandler);
  psiManager.addPsiTreeChangeListener(changeHandler,changeHandler);
  connection.subscribe(ProjectTopics.PROJECT_ROOTS,new ModuleRootAdapter(){
    @Override public void rootsChanged(    ModuleRootEvent event){
      stopDaemonAndRestartAllFiles("Project roots changed");
    }
  }
);
  connection.subscribe(DumbService.DUMB_MODE,new DumbService.DumbModeListener(){
    @Override public void enteredDumbMode(){
      stopDaemonAndRestartAllFiles("Dumb mode started");
    }
    @Override public void exitDumbMode(){
      stopDaemonAndRestartAllFiles("Dumb mode finished");
    }
  }
);
  connection.subscribe(PowerSaveMode.TOPIC,new PowerSaveMode.Listener(){
    @Override public void powerSaveStateChanged(){
      stopDaemon(true,"Power save mode change");
    }
  }
);
  editorColorsManager.addEditorColorsListener(new EditorColorsListener(){
    @Override public void globalSchemeChange(    EditorColorsScheme scheme){
      stopDaemonAndRestartAllFiles("Global color scheme changed");
    }
  }
,this);
  commandProcessor.addCommandListener(new MyCommandListener(),this);
  application.addApplicationListener(new MyApplicationListener(),this);
  editorColorsManager.addEditorColorsListener(new MyEditorColorsListener(),this);
  inspectionProfileManager.addProfileChangeListener(new MyProfileChangeListener(),this);
  inspectionProjectProfileManager.addProfilesListener(new MyProfileChangeListener(),this);
  todoConfiguration.addPropertyChangeListener(new MyTodoListener(),this);
  todoConfiguration.colorSettingsChanged();
  actionManagerEx.addAnActionListener(new MyAnActionListener(),this);
  virtualFileManager.addVirtualFileListener(new VirtualFileAdapter(){
    @Override public void propertyChanged(    @NotNull VirtualFilePropertyEvent event){
      String propertyName=event.getPropertyName();
      if (VirtualFile.PROP_NAME.equals(propertyName)) {
        stopDaemonAndRestartAllFiles("Virtual file name changed");
        VirtualFile virtualFile=event.getFile();
        PsiFile psiFile=!virtualFile.isValid() ? null : ((PsiManagerEx)psiManager).getFileManager().getCachedPsiFile(virtualFile);
        if (psiFile != null && !myDaemonCodeAnalyzer.isHighlightingAvailable(psiFile)) {
          Document document=fileDocumentManager.getCachedDocument(virtualFile);
          if (document != null) {
            final EditorColorsScheme editorColorScheme=null;
            UpdateHighlightersUtil.setHighlightersToEditor(myProject,document,0,document.getTextLength(),Collections.<HighlightInfo>emptyList(),editorColorScheme,Pass.UPDATE_ALL);
          }
        }
      }
      if (!propertyName.equals(PsiTreeChangeEvent.PROP_WRITABLE)) {
        stopDaemon(true,"Virtual file property change");
      }
    }
  }
,this);
  ((EditorEventMulticasterEx)eventMulticaster).addErrorStripeListener(new ErrorStripeHandler(myProject),this);
  ModalityStateListener modalityStateListener=new ModalityStateListener(){
    @Override public void beforeModalityStateChanged(    boolean entering){
      boolean inModalContext=LaterInvocator.isInModalContext();
      stopDaemon(inModalContext,"Modality change. Was modal: " + inModalContext);
      myDaemonCodeAnalyzer.setUpdateByTimerEnabled(inModalContext);
    }
  }
;
  LaterInvocator.addModalityStateListener(modalityStateListener,this);
  messageBus.connect().subscribe(SeverityRegistrar.SEVERITIES_CHANGED_TOPIC,new Runnable(){
    @Override public void run(){
      stopDaemonAndRestartAllFiles("Severities changed");
    }
  }
);
  if (RefResolveService.ENABLED) {
    RefResolveService resolveService=RefResolveService.getInstance(project);
    resolveService.addListener(this,new RefResolveService.Listener(){
      @Override public void allFilesResolved(){
        stopDaemon(true,"RefResolveService is up to date");
      }
    }
);
  }
}
