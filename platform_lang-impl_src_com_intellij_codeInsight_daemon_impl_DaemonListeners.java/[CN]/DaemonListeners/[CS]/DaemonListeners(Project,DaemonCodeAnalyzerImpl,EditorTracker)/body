{
  myProject=project;
  myDaemonCodeAnalyzer=daemonCodeAnalyzer;
  boolean replaced=((UserDataHolderEx)myProject).replace(DAEMON_INITIALIZED,null,Boolean.TRUE);
  LOG.assertTrue(replaced,"Daemon listeners already initialized for the project " + myProject);
  MessageBus messageBus=myProject.getMessageBus();
  myDaemonEventPublisher=messageBus.syncPublisher(DaemonCodeAnalyzer.DAEMON_EVENT_TOPIC);
  final MessageBusConnection connection=messageBus.connect();
  EditorEventMulticaster eventMulticaster=EditorFactory.getInstance().getEventMulticaster();
  eventMulticaster.addDocumentListener(new DocumentAdapter(){
    @Override public void beforeDocumentChange(    final DocumentEvent e){
      if (isUnderIgnoredAction(null))       return;
      Document document=e.getDocument();
      VirtualFile virtualFile=FileDocumentManager.getInstance().getFile(document);
      Project project=virtualFile == null ? null : ProjectUtil.guessProjectForFile(virtualFile);
      if (!worthBothering(document,project)) {
        return;
      }
      stopDaemon(true);
      UpdateHighlightersUtil.updateHighlightersByTyping(myProject,e);
    }
  }
,this);
  eventMulticaster.addCaretListener(new CaretListener(){
    @Override public void caretPositionChanged(    CaretEvent e){
      Editor editor=e.getEditor();
      if (!editor.getComponent().isShowing() && !ApplicationManager.getApplication().isUnitTestMode() || !worthBothering(editor.getDocument(),editor.getProject())) {
        return;
      }
      stopDaemon(true);
      myDaemonCodeAnalyzer.hideLastIntentionHint();
    }
  }
,this);
  eventMulticaster.addEditorMouseMotionListener(new MyEditorMouseMotionListener(),this);
  eventMulticaster.addEditorMouseListener(new MyEditorMouseListener(),this);
  myEditorTracker=editorTracker;
  EditorTrackerListener editorTrackerListener=new EditorTrackerListener(){
    private List<Editor> myActiveEditors=Collections.emptyList();
    @Override public void activeEditorsChanged(    @NotNull List<Editor> editors){
      List<Editor> activeEditors=getActiveEditors();
      if (myActiveEditors.equals(activeEditors)) {
        return;
      }
      myActiveEditors=activeEditors;
      stopDaemon(true);
      if (LaterInvocator.isInModalContext()) {
        myDaemonCodeAnalyzer.setUpdateByTimerEnabled(true);
      }
      preInstantiateTools();
    }
  }
;
  myEditorTracker.addEditorTrackerListener(editorTrackerListener,this);
  EditorFactoryListener editorFactoryListener=new EditorFactoryListener(){
    @Override public void editorCreated(    @NotNull EditorFactoryEvent event){
      Editor editor=event.getEditor();
      Document document=editor.getDocument();
      Project editorProject=editor.getProject();
      PsiFile file=editorProject == null ? null : PsiDocumentManager.getInstance(editorProject).getPsiFile(document);
      if (!editor.getComponent().isShowing() || !worthBothering(document,editorProject)) {
        LOG.debug("Not worth: " + file);
        return;
      }
      myDaemonCodeAnalyzer.repaintErrorStripeRenderer(editor);
    }
    @Override public void editorReleased(    @NotNull EditorFactoryEvent event){
      myDaemonCodeAnalyzer.hideLastIntentionHint();
    }
  }
;
  EditorFactory.getInstance().addEditorFactoryListener(editorFactoryListener,this);
  PsiDocumentManagerImpl documentManager=(PsiDocumentManagerImpl)PsiDocumentManager.getInstance(myProject);
  PsiChangeHandler changeHandler=new PsiChangeHandler(myProject,documentManager,EditorFactory.getInstance(),connection,daemonCodeAnalyzer.getFileStatusMap());
  Disposer.register(this,changeHandler);
  PsiManager.getInstance(myProject).addPsiTreeChangeListener(changeHandler,changeHandler);
  connection.subscribe(ProjectTopics.PROJECT_ROOTS,new ModuleRootAdapter(){
    @Override public void rootsChanged(    ModuleRootEvent event){
      final FileEditor[] editors=FileEditorManager.getInstance(myProject).getSelectedEditors();
      if (editors.length == 0)       return;
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        @Override public void run(){
          if (myProject.isDisposed())           return;
          for (          FileEditor fileEditor : editors) {
            if (fileEditor instanceof TextEditor) {
              myDaemonCodeAnalyzer.repaintErrorStripeRenderer(((TextEditor)fileEditor).getEditor());
            }
          }
        }
      }
,ModalityState.stateForComponent(editors[0].getComponent()));
    }
  }
);
  connection.subscribe(DumbService.DUMB_MODE,new DumbService.DumbModeListener(){
    @Override public void enteredDumbMode(){
      stopDaemonAndRestartAllFiles();
    }
    @Override public void exitDumbMode(){
      stopDaemonAndRestartAllFiles();
    }
  }
);
  connection.subscribe(PowerSaveMode.TOPIC,new PowerSaveMode.Listener(){
    @Override public void powerSaveStateChanged(){
      stopDaemon(true);
    }
  }
);
  CommandProcessor.getInstance().addCommandListener(new MyCommandListener(),this);
  ApplicationListener applicationListener=new MyApplicationListener();
  ApplicationManager.getApplication().addApplicationListener(applicationListener,this);
  EditorColorsManager.getInstance().addEditorColorsListener(new MyEditorColorsListener(),this);
  InspectionProfileManager.getInstance().addProfileChangeListener(new MyProfileChangeListener(),this);
  InspectionProjectProfileManager.getInstance(project).addProfilesListener(new MyProfileChangeListener(),this);
  TodoConfiguration.getInstance().addPropertyChangeListener(new MyTodoListener(),this);
  ActionManagerEx.getInstanceEx().addAnActionListener(new MyAnActionListener(),this);
  VirtualFileManager.getInstance().addVirtualFileListener(new VirtualFileAdapter(){
    @Override public void propertyChanged(    VirtualFilePropertyEvent event){
      String propertyName=event.getPropertyName();
      if (VirtualFile.PROP_NAME.equals(propertyName)) {
        stopDaemonAndRestartAllFiles();
        PsiFile psiFile=PsiManager.getInstance(myProject).findFile(event.getFile());
        if (psiFile != null && !myDaemonCodeAnalyzer.isHighlightingAvailable(psiFile)) {
          Document document=FileDocumentManager.getInstance().getCachedDocument(event.getFile());
          if (document != null) {
            final EditorColorsScheme editorColorScheme=null;
            UpdateHighlightersUtil.setHighlightersToEditor(myProject,document,0,document.getTextLength(),Collections.<HighlightInfo>emptyList(),editorColorScheme,Pass.UPDATE_ALL);
          }
        }
      }
      if (!propertyName.equals(PsiTreeChangeEvent.PROP_WRITABLE)) {
        stopDaemon(true);
      }
    }
  }
,this);
  ((EditorEventMulticasterEx)eventMulticaster).addErrorStripeListener(new ErrorStripeHandler(myProject),this);
  final NamedScopesHolder[] holders=NamedScopesHolder.getAllNamedScopeHolders(project);
  NamedScopesHolder.ScopeListener scopeListener=new NamedScopesHolder.ScopeListener(){
    @Override public void scopesChanged(){
      myDaemonCodeAnalyzer.reloadScopes();
    }
  }
;
  for (  NamedScopesHolder holder : holders) {
    holder.addScopeListener(scopeListener);
  }
  ModalityStateListener modalityStateListener=new ModalityStateListener(){
    @Override public void beforeModalityStateChanged(    boolean entering){
      boolean inModalContext=LaterInvocator.isInModalContext();
      stopDaemon(inModalContext);
      myDaemonCodeAnalyzer.setUpdateByTimerEnabled(inModalContext);
    }
  }
;
  LaterInvocator.addModalityStateListener(modalityStateListener,this);
}
