{
  List<MavenDomDependency> dependencies=new ArrayList<MavenDomDependency>();
  MavenDomProjectModelMember[] memberCandidates=ContainerUtil.map2Array(candidates,MavenDomProjectModelMember.class,new Function<MavenDomDependency,MavenDomProjectModelMember>(){
    public MavenDomProjectModelMember fun(    MavenDomDependency dependency){
      return new MavenDomProjectModelMember(dependency);
    }
  }
);
  MemberChooser<MavenDomProjectModelMember> chooser=new MemberChooser<MavenDomProjectModelMember>(memberCandidates,true,true,project){
    protected ShowContainersAction getShowContainersAction(){
      return new ShowContainersAction(MavenDomBundle.message("chooser.show.project.files"),icons.MavenIcons.MavenProject);
    }
    protected String getAllContainersNodeName(){
      return MavenDomBundle.message("all.dependencies");
    }
  }
;
  chooser.setTitle(MavenDomBundle.message("dependencies.chooser.title"));
  chooser.setCopyJavadocVisible(false);
  chooser.show();
  if (chooser.getExitCode() == MemberChooser.OK_EXIT_CODE) {
    final MavenDomProjectModelMember[] members=chooser.getSelectedElements(new MavenDomProjectModelMember[0]);
    if (members != null) {
      dependencies.addAll(ContainerUtil.mapNotNull(members,new Function<MavenDomProjectModelMember,MavenDomDependency>(){
        public MavenDomDependency fun(        MavenDomProjectModelMember mavenDomProjectModelMember){
          return mavenDomProjectModelMember.getDependency();
        }
      }
));
    }
  }
  return dependencies;
}
