{
  HashMap<PsiElement,HashSet<PsiElement>> reportedNonDelegatedUsages=new HashMap<PsiElement,HashSet<PsiElement>>();
  HashMap<PsiClass,HashSet<PsiElement>> reportedUpcasts=new HashMap<PsiClass,HashSet<PsiElement>>();
  final String classDescription=ConflictsUtil.getDescription(myClass,false);
  for (int i=0; i < usage.length; i++) {
    if (usage[i] instanceof InheritanceToDelegationUsageInfo) {
      InheritanceToDelegationUsageInfo usageInfo=(InheritanceToDelegationUsageInfo)usage[i];
      if (!myIsDelegateOtherMembers && !usageInfo.getDelegateFieldAccessible().isAccessible()) {
        if (usageInfo instanceof NonDelegatedMemberUsageInfo) {
          final PsiElement nonDelegatedMember=((NonDelegatedMemberUsageInfo)usageInfo).nonDelegatedMember;
          HashSet<PsiElement> reportedContainers=reportedNonDelegatedUsages.get(nonDelegatedMember);
          if (reportedContainers == null) {
            reportedContainers=new HashSet<PsiElement>();
            reportedNonDelegatedUsages.put(nonDelegatedMember,reportedContainers);
          }
          final PsiElement container=ConflictsUtil.getContainer(usageInfo.getElement());
          if (!reportedContainers.contains(container)) {
            String message=ConflictsUtil.getDescription(container,true) + " uses " + ConflictsUtil.getDescription(nonDelegatedMember,true)+ " of an instance of a "+ classDescription+ ".";
            conflicts.add(ConflictsUtil.capitalize(message));
            reportedContainers.add(container);
          }
        }
 else         if (usageInfo instanceof UpcastedUsageInfo) {
          final PsiClass upcastedTo=((UpcastedUsageInfo)usageInfo).upcastedTo;
          HashSet<PsiElement> reportedContainers=reportedUpcasts.get(upcastedTo);
          if (reportedContainers == null) {
            reportedContainers=new HashSet<PsiElement>();
            reportedUpcasts.put(upcastedTo,reportedContainers);
          }
          final PsiElement container=ConflictsUtil.getContainer(usageInfo.getElement());
          if (!reportedContainers.contains(container)) {
            String message=ConflictsUtil.getDescription(container,true) + " upcasts an instance of " + classDescription+ " to "+ ConflictsUtil.getDescription(upcastedTo,false)+ ".";
            conflicts.add(ConflictsUtil.capitalize(message));
            reportedContainers.add(container);
          }
        }
      }
    }
 else     if (usage[i] instanceof NoLongerOverridingSubClassMethodUsageInfo) {
      NoLongerOverridingSubClassMethodUsageInfo info=(NoLongerOverridingSubClassMethodUsageInfo)usage[i];
      String message=ConflictsUtil.getDescription(info.getSubClassMethod(),true) + " will no longer override " + ConflictsUtil.getDescription(info.getOverridenMethod(),true);
      conflicts.add(message);
    }
  }
}
