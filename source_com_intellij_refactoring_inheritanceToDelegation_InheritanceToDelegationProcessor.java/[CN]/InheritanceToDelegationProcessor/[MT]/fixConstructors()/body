{
  if (myBaseClass.isInterface())   return;
  final PsiJavaCodeReferenceElement baseClassReference=myFactory.createClassReferenceElement(myBaseClass);
  PsiMethod[] constructors=myClass.getConstructors();
  for (int i=0; i < constructors.length; i++) {
    PsiMethod constructor=constructors[i];
    PsiCodeBlock body=constructor.getBody();
    final PsiStatement[] statements=body.getStatements();
    String fieldQualifier="";
    PsiParameter[] constructorParams=constructor.getParameterList().getParameters();
    for (int j=0; j < constructorParams.length; j++) {
      PsiParameter constructorParam=constructorParams[j];
      if (myFieldName.equals(constructorParam.getName())) {
        fieldQualifier="this.";
        break;
      }
    }
    final String assignmentText=fieldQualifier + myFieldName + "= new "+ defaultClassFieldType()+ "()";
    if (statements.length < 1 || !RefactoringUtil.isSuperOrThisCall(statements[0],true,true) || myBaseClass.isInterface()) {
      PsiExpressionStatement assignmentStatement=(PsiExpressionStatement)myFactory.createStatementFromText(assignmentText,body);
      if (!myIsInnerClassNeeded) {
        ((PsiNewExpression)assignmentStatement.getExpression()).getClassReference().replace(baseClassReference);
      }
      assignmentStatement=(PsiExpressionStatement)CodeStyleManager.getInstance(myProject).reformat(assignmentStatement);
      if (statements.length > 0) {
        if (!RefactoringUtil.isSuperOrThisCall(statements[0],true,false)) {
          body.addBefore(assignmentStatement,statements[0]);
        }
 else {
          body.addAfter(assignmentStatement,statements[0]);
        }
      }
 else {
        body.add(assignmentStatement);
      }
    }
 else {
      final PsiExpressionStatement callStatement=((PsiExpressionStatement)statements[0]);
      if (!RefactoringUtil.isSuperOrThisCall(callStatement,false,true)) {
        final PsiMethodCallExpression superConstructorCall=(PsiMethodCallExpression)callStatement.getExpression();
        PsiAssignmentExpression assignmentExpression=(PsiAssignmentExpression)myFactory.createExpressionFromText(assignmentText,superConstructorCall);
        PsiNewExpression newExpression=(PsiNewExpression)assignmentExpression.getRExpression();
        if (!myIsInnerClassNeeded) {
          newExpression.getClassReference().replace(baseClassReference);
        }
        assignmentExpression=(PsiAssignmentExpression)CodeStyleManager.getInstance(myProject).reformat(assignmentExpression);
        newExpression.getArgumentList().replace(superConstructorCall.getArgumentList());
        superConstructorCall.replace(assignmentExpression);
      }
    }
  }
}
