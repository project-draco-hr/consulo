{
  final String fieldVisibility=getFieldVisibility(usages);
  final boolean fieldInitializerNeeded=isFieldInitializerNeeded();
  PsiField field=createField(fieldVisibility,fieldInitializerNeeded,defaultClassFieldType());
  if (!myIsInnerClassNeeded) {
    PsiType fieldType=myBaseClassType;
    field.getTypeElement().replace(myFactory.createTypeElement(fieldType));
    if (fieldInitializerNeeded) {
      final PsiJavaCodeReferenceElement classReferenceElement=myFactory.createClassReferenceElement(myBaseClass);
      PsiNewExpression newExpression=(PsiNewExpression)field.getInitializer();
      newExpression.getClassReference().replace(classReferenceElement);
    }
  }
  field=(PsiField)CodeStyleManager.getInstance(myProject).reformat(field);
  myClass.add(field);
  if (!fieldInitializerNeeded) {
    fixConstructors();
  }
  if (myGenerateGetter) {
    final String getterVisibility=PsiModifier.PUBLIC;
    StringBuffer getterBuffer=new StringBuffer();
    getterBuffer.append(getterVisibility);
    getterBuffer.append(" Object ");
    getterBuffer.append(myGetterName);
    getterBuffer.append("() {\n return ");
    getterBuffer.append(myFieldName);
    getterBuffer.append(";\n}");
    PsiMethod getter=myFactory.createMethodFromText(getterBuffer.toString(),myClass);
    getter.getReturnTypeElement().replace(myFactory.createTypeElement(myBaseClassType));
    getter=(PsiMethod)CodeStyleManager.getInstance(myProject).reformat(getter);
    myClass.add(getter);
  }
}
