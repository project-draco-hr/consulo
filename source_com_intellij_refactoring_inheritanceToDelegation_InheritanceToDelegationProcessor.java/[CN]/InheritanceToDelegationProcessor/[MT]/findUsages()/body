{
  ArrayList usages=new ArrayList();
  PsiSearchHelper searchHelper=myManager.getSearchHelper();
  GlobalSearchScope projectScope=GlobalSearchScope.projectScope(myProject);
  final PsiClass[] inheritors=searchHelper.findInheritors(myClass,projectScope,true);
  myClassInheritors=new HashSet();
  myClassInheritors.add(myClass);
  addAll(myClassInheritors,inheritors);
{
    ClassReferenceScanner scanner=new ClassReferenceSearchingScanner(myClass);
    final MyClassInstanceReferenceVisitor instanceReferenceVisitor=new MyClassInstanceReferenceVisitor(myClass,usages);
    scanner.processReferences(new ClassInstanceScanner(myClass,instanceReferenceVisitor));
    MyClassMemberReferencesVisitor visitor=new MyClassMemberReferencesVisitor(usages,instanceReferenceVisitor);
    myClass.accept(visitor);
    myClassImplementedInterfaces=instanceReferenceVisitor.getImplementedInterfaces();
  }
  for (int i=0; i < inheritors.length; i++) {
    processClass(inheritors[i],usages);
  }
  return (UsageInfo[])usages.toArray(new UsageInfo[usages.size()]);
}
