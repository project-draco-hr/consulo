{
  UsageInfo[] usagesIn=refUsages.get();
  ArrayList<UsageInfo> oldUsages=new ArrayList<UsageInfo>();
  addAll(oldUsages,usagesIn);
  final ObjectUpcastedUsageInfo[] objectUpcastedUsageInfos=objectUpcastedUsages(usagesIn);
  if (myPrepareSuccessfulSwingThreadCallback != null) {
    ArrayList<String> conflicts=new ArrayList<String>();
    if (objectUpcastedUsageInfos.length > 0) {
      final String message=RefactoringBundle.message("instances.of.0.upcasted.to.1.were.found",ConflictsUtil.getDescription(myClass,true),ConflictsUtil.htmlEmphasize("java.lang.Object"));
      conflicts.add(message);
    }
    analyzeConflicts(usagesIn,conflicts);
    if (!conflicts.isEmpty()) {
      ConflictsDialog conflictsDialog=new ConflictsDialog(conflicts.toArray(new String[conflicts.size()]),myProject);
      conflictsDialog.show();
      if (!conflictsDialog.isOK())       return false;
    }
    if (objectUpcastedUsageInfos.length > 0) {
      showObjectUpcastedUsageView(objectUpcastedUsageInfos);
      setPreviewUsages(true);
    }
  }
  ArrayList<UsageInfo> filteredUsages=filterUsages(oldUsages);
  refUsages.set(filteredUsages.toArray(new UsageInfo[filteredUsages.size()]));
  prepareSuccessful();
  return true;
}
