{
  if (!myIsInnerClassNeeded)   return;
  PsiClass innerClass=myFactory.createClass(myInnerClassName);
  final PsiJavaCodeReferenceElement baseClassReferenceElement=myFactory.createClassReferenceElement(myBaseClass);
  if (!myBaseClass.isInterface()) {
    innerClass.getExtendsList().add(baseClassReferenceElement);
  }
 else {
    innerClass.getImplementsList().add(baseClassReferenceElement);
  }
  innerClass.getModifierList().setModifierProperty(PsiModifier.PRIVATE,true);
  innerClass=(PsiClass)myClass.add(innerClass);
  List innerClassMethods=getInnerClassMethods();
  for (Iterator iterator=innerClassMethods.iterator(); iterator.hasNext(); ) {
    InnerClassMethod innerClassMethod=(InnerClassMethod)iterator.next();
    innerClassMethod.createMethod(innerClass,myClass);
  }
}
