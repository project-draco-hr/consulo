{
  PsiClass aClass=myClass;
  HashSet<PsiClass> result=new HashSet<PsiClass>();
  while (aClass != null && !myManager.areElementsEquivalent(aClass,myBaseClass)) {
    final PsiClassType[] implementsTypes=aClass.getImplementsListTypes();
    for (int i=0; i < implementsTypes.length; i++) {
      PsiClassType superType=implementsTypes[i];
      PsiClass resolved=superType.resolve();
      if (resolved != null && !myManager.areElementsEquivalent(resolved,myBaseClass)) {
        result.add(resolved);
        RefactoringHierarchyUtil.getSuperClasses(resolved,result,true);
      }
    }
    if (aClass.getExtendsList() != null) {
      final PsiClassType[] extendsTypes=aClass.getExtendsListTypes();
      aClass=null;
      if (extendsTypes.length > 0) {
        aClass=extendsTypes[0].resolve();
      }
    }
  }
  return result;
}
