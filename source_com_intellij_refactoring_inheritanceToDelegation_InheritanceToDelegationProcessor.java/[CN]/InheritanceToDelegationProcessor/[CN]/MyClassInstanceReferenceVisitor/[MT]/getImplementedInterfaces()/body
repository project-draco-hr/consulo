{
  PsiClass aClass=myClass;
  HashSet<PsiClass> result=new HashSet<PsiClass>();
  while (aClass != null && !myManager.areElementsEquivalent(aClass,myBaseClass)) {
    final PsiReferenceList referenceList=aClass.getImplementsList();
    if (referenceList != null) {
      final PsiClassType[] implementsList=referenceList.getReferencedTypes();
      for (int i=0; i < implementsList.length; i++) {
        PsiClassType superType=implementsList[i];
        PsiElement resolved=superType.resolve();
        if (resolved instanceof PsiClass && !myManager.areElementsEquivalent(resolved,myBaseClass)) {
          result.add((PsiClass)resolved);
          RefactoringHierarchyUtil.getSuperClasses((PsiClass)resolved,result,true);
        }
      }
    }
    if (aClass.getExtendsList() != null) {
      final PsiClassType[] extendsList=aClass.getExtendsList().getReferencedTypes();
      aClass=null;
      if (extendsList.length > 0) {
        PsiElement resolved=extendsList[0].resolve();
        if (resolved instanceof PsiClass) {
          aClass=(PsiClass)resolved;
        }
      }
    }
  }
  return result;
}
