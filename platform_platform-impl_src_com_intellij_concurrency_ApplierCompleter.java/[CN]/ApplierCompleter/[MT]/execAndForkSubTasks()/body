{
  int hi=this.hi;
  long start=System.currentTimeMillis();
  ApplierCompleter<T> right=null;
  Throwable throwable=null;
  try {
    for (int i=lo; i < hi; ++i) {
      progressIndicator.checkCanceled();
      if (!processor.process(array.get(i))) {
        throw new ComputationAbortedException();
      }
      long finish=System.currentTimeMillis();
      long elapsed=finish - start;
      if (elapsed > 5 && hi - i >= 2 && getSurplusQueuedTaskCount() <= JobSchedulerImpl.CORES_COUNT) {
        int mid=i + hi >>> 1;
        right=new ApplierCompleter<>(this,runInReadAction,progressIndicator,array,processor,mid,hi,failedSubTasks,right);
        addToPendingCount(1);
        right.fork();
        hi=mid;
        start=finish;
      }
    }
    if (right != null) {
      throwable=right.tryToExecAllList();
    }
  }
 catch (  Throwable e) {
    cancelProgress();
    throwable=e;
  }
 finally {
    doComplete(moreImportant(throwable,this.throwable));
  }
  return right;
}
