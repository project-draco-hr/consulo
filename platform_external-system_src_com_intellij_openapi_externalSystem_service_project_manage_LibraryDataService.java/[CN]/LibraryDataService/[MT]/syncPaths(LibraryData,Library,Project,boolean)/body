{
  Set<String> toRemove=ContainerUtilRt.newHashSet();
  Set<String> toAdd=ContainerUtilRt.newHashSet(externalLibrary.getPaths(LibraryPathType.BINARY));
  for (  VirtualFile ideFile : ideLibrary.getFiles(OrderRootType.CLASSES)) {
    String idePath=ExternalSystemUtil.getLocalFileSystemPath(ideFile);
    if (!toAdd.remove(idePath)) {
      toRemove.add(idePath);
    }
  }
  if (toRemove.isEmpty() && toAdd.isEmpty()) {
    return;
  }
  Function<String,DataNode<JarData>> jarMapper=new Function<String,DataNode<JarData>>(){
    @Override public DataNode<JarData> fun(    String path){
      JarData data=new JarData(path,LibraryPathType.BINARY,ideLibrary,null,ProjectSystemId.IDE);
      return new DataNode<JarData>(ProjectKeys.JAR,data,null);
    }
  }
;
  if (!toRemove.isEmpty()) {
    List<DataNode<JarData>> jarsToRemove=ContainerUtil.map(toRemove,jarMapper);
    myJarManager.removeData(jarsToRemove,project,synchronous);
  }
  if (!toAdd.isEmpty()) {
    List<DataNode<JarData>> jarsToAdd=ContainerUtil.map(toAdd,jarMapper);
    myJarManager.importJars(jarsToAdd,ideLibrary,externalLibrary.getOwner(),project,synchronous);
  }
}
