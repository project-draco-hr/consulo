{
  final DebuggerContextImpl debuggerContext=DebuggerManagerEx.getInstanceEx(myProject).getContext();
  final DebuggerSession debuggerSession=debuggerContext.getDebuggerSession();
  if (debuggerSession == null || !debuggerSession.isPaused())   return;
  try {
    final ExpressionEvaluator evaluator=EvaluatorBuilderImpl.getInstance().build(myCurrentExpression);
    debuggerContext.getDebugProcess().getManagerThread().invokeLater(new DebuggerContextCommandImpl(debuggerContext){
      public void threadAction(){
        try {
          final EvaluationContextImpl evaluationContext=debuggerContext.createEvaluationContext();
          final Value value=evaluator.evaluate(evaluationContext);
          TextWithImportsImpl text=TextWithImportsImpl.createExpressionText(myCurrentExpression.getText());
          final WatchItemDescriptor descriptor=new WatchItemDescriptor(myProject,text,value,false);
          descriptor.setContext(evaluationContext);
          descriptor.updateRepresentation(evaluationContext,new DescriptorLabelListener(){
            public void labelChanged(){
              if (myCurrentRange != null) {
                if (myType != MOUSE_OVER_HINT || descriptor.isValueValid()) {
                  showHint(DebuggerTreeRenderer.getDescriptorText(descriptor,true));
                }
              }
            }
          }
);
        }
 catch (        EvaluateException e) {
          LOG.debug(e);
        }
      }
    }
,DebuggerManagerThreadImpl.HIGH_PRIORITY);
  }
 catch (  EvaluateException e) {
    LOG.debug(e);
  }
}
