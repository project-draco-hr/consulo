{
  final PsiElement expressionParent=expression.getParent();
  if (!(expressionParent instanceof PsiExpressionList)) {
    return false;
  }
  final PsiElement grandParent=expressionParent.getParent();
  if (!(grandParent instanceof PsiMethodCallExpression)) {
    return false;
  }
  final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)grandParent;
  final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
  final String name=methodExpression.getReferenceName();
  boolean insertNewline=false;
  if ("println".equals(name)) {
    insertNewline=true;
  }
 else   if ("print".equals(name)) {
    insertNewline=false;
  }
 else {
    return false;
  }
  final PsiMethod method=methodCallExpression.resolveMethod();
  if (method == null) {
    return false;
  }
  final PsiClass containingClass=method.getContainingClass();
  final String qualifiedName=containingClass.getQualifiedName();
  if (!"java.io.PrintStream".equals(qualifiedName) && !"java.io.Printwriter".equals(qualifiedName)) {
    return false;
  }
  final StringBuilder newExpression=new StringBuilder();
  final PsiExpression qualifier=methodExpression.getQualifierExpression();
  if (qualifier != null) {
    newExpression.append(qualifier.getText());
    newExpression.append('.');
  }
  newExpression.append("printf(\"");
  newExpression.append(formatString);
  if (insertNewline) {
    newExpression.append("\\n");
  }
  newExpression.append('\"');
  for (  PsiExpression formatParameter : formatParameters) {
    newExpression.append(", ");
    newExpression.append(formatParameter.getText());
  }
  newExpression.append(")");
  replaceExpression(newExpression.toString(),methodCallExpression);
  return true;
}
