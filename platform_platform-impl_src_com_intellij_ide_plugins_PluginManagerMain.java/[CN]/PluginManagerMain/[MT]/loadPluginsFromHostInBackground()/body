{
  setDownloadStatus(true);
  new SwingWorker(){
    ArrayList<IdeaPluginDescriptor> list=null;
    Exception error;
    public Object construct(){
      try {
        list=RepositoryHelper.process(null);
        for (        String host : UpdateSettings.getInstance().myPluginHosts) {
          final ArrayList<PluginDownloader> downloaded=new ArrayList<PluginDownloader>();
          UpdateChecker.checkPluginsHost(host,downloaded,false);
          for (          PluginDownloader downloader : downloaded) {
            final PluginNode node=new PluginNode();
            final VirtualFile pluginFile=PluginDownloader.findPluginFile(downloader.getFileName(),host);
            if (pluginFile != null) {
              node.setId(downloader.getPluginId());
              node.setName(downloader.getPluginName());
              node.setVersion(downloader.getPluginVersion());
              node.setRepositoryName(host);
              node.setDownloadUrl(pluginFile.getUrl());
              node.setDepends(downloader.getDepends(),null);
              node.setDescription(downloader.getDescription());
              list.add(node);
            }
          }
        }
      }
 catch (      Exception e) {
        error=e;
      }
      return list;
    }
    public void finished(){
      UIUtil.invokeLaterIfNeeded(new Runnable(){
        public void run(){
          if (list != null) {
            modifyPluginsList(list);
            propagateUpdates(list);
            setDownloadStatus(false);
          }
 else           if (error != null) {
            LOG.info(error);
            setDownloadStatus(false);
            if (0 == Messages.showOkCancelDialog(IdeBundle.message("error.list.of.plugins.was.not.loaded",error.getMessage()),IdeBundle.message("title.plugins"),CommonBundle.message("button.retry"),CommonBundle.getCancelButtonText(),Messages.getErrorIcon())) {
              loadPluginsFromHostInBackground();
            }
          }
        }
      }
);
    }
  }
.start();
}
