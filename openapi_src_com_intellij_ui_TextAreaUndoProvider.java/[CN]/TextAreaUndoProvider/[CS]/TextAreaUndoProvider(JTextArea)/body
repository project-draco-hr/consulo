{
  myTextArea=textArea;
  myTextArea.getDocument().addUndoableEditListener(new UndoableEditListener(){
    public void undoableEditHappened(    UndoableEditEvent e){
      myUndoManager.addEdit(e.getEdit());
    }
  }
);
  Keymap keymap=myTextArea.getKeymap();
  com.intellij.openapi.keymap.Keymap activeKeymap=KeymapManager.getInstance().getActiveKeymap();
  Shortcut[] undoShortcuts=activeKeymap.getShortcuts("$Undo");
  Shortcut[] redoShortcuts=activeKeymap.getShortcuts("$Redo");
  Action undoAction=new AbstractAction("Undo"){
    public void actionPerformed(    ActionEvent e){
      if (myUndoManager.canUndo())       myUndoManager.undo();
    }
  }
;
  Action redoAction=new AbstractAction("Redo"){
    public void actionPerformed(    ActionEvent e){
      if (myUndoManager.canRedo())       myUndoManager.redo();
    }
  }
;
  for (  Shortcut undoShortcut : undoShortcuts) {
    if (undoShortcut instanceof KeyboardShortcut) {
      keymap.addActionForKeyStroke(((KeyboardShortcut)undoShortcut).getFirstKeyStroke(),undoAction);
    }
  }
  for (  Shortcut redoShortcut : redoShortcuts) {
    if (redoShortcut instanceof KeyboardShortcut) {
      keymap.addActionForKeyStroke(((KeyboardShortcut)redoShortcut).getFirstKeyStroke(),redoAction);
    }
  }
  myTextArea.setKeymap(keymap);
}
