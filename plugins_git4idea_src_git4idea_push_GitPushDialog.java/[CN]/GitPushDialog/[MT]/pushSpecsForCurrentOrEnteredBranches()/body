{
  Map<GitRepository,GitPushSpec> defaultSpecs=new HashMap<GitRepository,GitPushSpec>();
  for (  GitRepository repository : myRepositories) {
    GitBranch currentBranch=repository.getCurrentBranch();
    if (currentBranch == null) {
      continue;
    }
    String remoteName=currentBranch.getTrackedRemoteName(repository.getProject(),repository.getRoot());
    String trackedBranchName=currentBranch.getTrackedBranchName(repository.getProject(),repository.getRoot());
    GitRemote remote=GitUtil.findRemoteByName(repository,remoteName);
    GitBranch tracked=GitBranchUtil.findRemoteBranchByName(repository,remote,trackedBranchName);
    if (remote == null || tracked == null) {
      Pair<GitRemote,GitBranch> remoteAndBranch=GitUtil.findMatchingRemoteBranch(repository,currentBranch);
      if (remoteAndBranch == null) {
        remote=myRefspecPanel.getSelectedRemote();
        tracked=GitPusher.NO_TARGET_BRANCH;
      }
 else {
        remote=remoteAndBranch.getFirst();
        tracked=remoteAndBranch.getSecond();
      }
    }
    if (myRefspecPanel.turnedOn()) {
      String manualBranchName=myRefspecPanel.getBranchToPush();
      remote=myRefspecPanel.getSelectedRemote();
      GitBranch manualBranch=GitBranchUtil.findRemoteBranchByName(repository,remote,manualBranchName);
      if (manualBranch == null) {
        if (!manualBranchName.startsWith("refs/remotes/")) {
          manualBranchName=myRefspecPanel.getSelectedRemote().getName() + "/" + manualBranchName;
        }
        manualBranch=new GitBranch(manualBranchName,false,true);
      }
      tracked=manualBranch;
    }
    GitPushSpec pushSpec=new GitPushSpec(remote,currentBranch,tracked);
    defaultSpecs.put(repository,pushSpec);
  }
  return defaultSpecs;
}
