{
  myEditor.getActiveDecorationLayer().removeFeedback();
  final int dropX=(int)dropPoint.getX();
  final int dropY=(int)dropPoint.getY();
  final int componentCount=dcl.getComponents().size();
  GridInsertLocation location=GridInsertProcessor.getGridInsertLocation(myEditor,dropX,dropY,dcl.getDragRelativeColumn());
  if (!myGridInsertProcessor.isDropInsertAllowed(location,componentCount)) {
    location=null;
  }
  if (!FormEditingUtil.canDrop(myEditor,dropX,dropY,componentCount) && (location == null || location.getMode() == GridInsertLocation.GridInsertMode.None)) {
    return false;
  }
  ArrayList<RadComponent> droppedComponents;
  if (dropAction == DnDConstants.ACTION_COPY) {
    final String serializedComponents=CutCopyPasteSupport.serializeForCopy(myEditor,dcl.getComponents());
    cancelDrag(dcl);
    droppedComponents=CutCopyPasteSupport.deserializeComponents(myEditor,serializedComponents);
    if (droppedComponents == null) {
      return false;
    }
  }
 else {
    droppedComponents=dcl.getComponents();
  }
  final int[] dx=new int[componentCount];
  final int[] dy=new int[componentCount];
  for (int i=0; i < componentCount; i++) {
    final RadComponent component=droppedComponents.get(i);
    dx[i]=component.getX() - dropX;
    dy[i]=component.getY() - dropY;
  }
  final RadComponent[] components=droppedComponents.toArray(new RadComponent[componentCount]);
  final GridConstraints[] originalConstraints=dcl.getOriginalConstraints();
  final RadContainer[] originalParents=dcl.getOriginalParents();
  if (location != null && location.getMode() != GridInsertLocation.GridInsertMode.None) {
    myGridInsertProcessor.processGridInsertOnDrop(location,components,originalConstraints);
  }
 else {
    FormEditingUtil.drop(myEditor,dropX,dropY,components,dx,dy);
  }
  if (dropAction == DnDConstants.ACTION_COPY) {
    FormEditingUtil.clearSelection(myEditor.getRootContainer());
    for (    RadComponent component : droppedComponents) {
      component.setSelected(true);
      InsertComponentProcessor.createBindingWhenDrop(myEditor,component);
    }
  }
  for (int i=0; i < originalConstraints.length; i++) {
    if (originalParents[i].isGrid()) {
      FormEditingUtil.deleteEmptyGridCells(originalParents[i],originalConstraints[i]);
    }
  }
  return true;
}
