{
  myLibrariesChooser.saveSelection();
  try {
    myLibrariesChooser.removeElementsMarkListener(myMarkListener);
    final List<LibraryChooserElement> unmarkedInvalidElems=new ArrayList<LibraryChooserElement>();
    if (keepUnmarkedInvalidEntries) {
      final int count=myLibrariesChooser.getElementCount();
      for (int idx=0; idx < count; idx++) {
        final LibraryChooserElement chooserElement=myLibrariesChooser.getElementAt(idx);
        if (!chooserElement.isValid() && !chooserElement.isAttachedToProject()) {
          unmarkedInvalidElems.add(chooserElement);
        }
      }
    }
    myLibrariesChooser.clear();
    final List<LibraryChooserElement> elements=new ArrayList<LibraryChooserElement>();
    final Library[] libraries=myLibraryTable.getLibraries();
    for (    final Library library : libraries) {
      elements.add(new LibraryChooserElement(library,myRootModel.findLibraryOrderEntry(library)));
    }
    final LibraryOrderEntry[] invalidLibraryOrderEntries=getInvalidLibraryOrderEntries();
    for (    LibraryOrderEntry entry : invalidLibraryOrderEntries) {
      elements.add(new LibraryChooserElement(null,entry));
    }
    elements.addAll(unmarkedInvalidElems);
    Collections.sort(elements,new Comparator<LibraryChooserElement>(){
      public int compare(      LibraryChooserElement elem1,      LibraryChooserElement elem2){
        return elem1.getName().compareToIgnoreCase(elem2.getName());
      }
    }
);
    List<LibraryChooserElement> elementsToSelect=new ArrayList<LibraryChooserElement>();
    for (    final LibraryChooserElement element : elements) {
      LibraryChooserElement chooserElement=(LibraryChooserElement)element;
      if (librariesToMark != null && chooserElement.isValid()) {
        if (librariesToMark.contains(chooserElement.getLibrary())) {
          setChooserElementMarked(chooserElement,true);
        }
      }
      final ElementsChooser.ElementProperties elementProperties=chooserElement.isValid() ? LibraryChooserElement.VALID_LIBRARY_ELEMENT_PROPERTIES : LibraryChooserElement.INVALID_LIBRARY_ELEMENT_PROPERTIES;
      myLibrariesChooser.addElement(chooserElement,chooserElement.isAttachedToProject(),elementProperties);
      if (librariesToSelect != null && librariesToSelect.contains(chooserElement.getLibrary())) {
        elementsToSelect.add(chooserElement);
      }
    }
    if (elementsToSelect.size() > 0) {
      myLibrariesChooser.selectElements(elementsToSelect);
    }
    final int elementCount=myLibrariesChooser.getElementCount();
    myIncludeAllButton.setEnabled(elementCount > 0);
    myExcludeAllButton.setEnabled(elementCount > 0);
    myLibrariesChooser.addElementsMarkListener(myMarkListener);
  }
  finally {
    if (librariesToSelect == null) {
      myLibrariesChooser.restoreSelection();
    }
  }
}
