{
  final List<HighlightInfo> highlights=new ArrayList<HighlightInfo>(highlightsCo);
  final SeverityRegistrar severityRegistrar=SeverityRegistrar.getInstance(project);
  final HighlightersRecycler infosToRemove=new HighlightersRecycler();
  DaemonCodeAnalyzerImpl.processHighlights(document,project,null,range.getStartOffset(),range.getEndOffset(),new Processor<HighlightInfo>(){
    @Override public boolean process(    HighlightInfo info){
      if (info.group == group) {
        RangeHighlighter highlighter=info.highlighter;
        int endOffset=highlighter.getEndOffset();
        int startOffset=highlighter.getStartOffset();
        boolean willBeRemoved=endOffset == document.getTextLength() && range.getEndOffset() == document.getTextLength() || range.contains(startOffset) || range.containsRange(startOffset,endOffset);
        if (willBeRemoved) {
          infosToRemove.recycleHighlighter(highlighter);
          info.highlighter=null;
        }
      }
      return true;
    }
  }
);
  Collections.sort(highlights,BY_START_OFFSET_NODUPS);
  final Map<TextRange,RangeMarker> ranges2markersCache=new THashMap<TextRange,RangeMarker>(10);
  final PsiFile psiFile=PsiDocumentManager.getInstance(project).getPsiFile(document);
  final boolean[] changed={false};
  RangeMarkerTree.sweep(new RangeMarkerTree.Generator<HighlightInfo>(){
    @Override public boolean generate(    Processor<HighlightInfo> processor){
      return ContainerUtil.process(highlights,processor);
    }
  }
,new MarkupModelEx.SweepProcessor<HighlightInfo>(){
    @Override public boolean process(    int offset,    HighlightInfo info,    boolean atStart,    Collection<HighlightInfo> overlappingIntervals){
      if (!atStart) {
        return true;
      }
      if (info.isFileLevelAnnotation && psiFile != null && psiFile.getViewProvider().isPhysical()) {
        addFileLevelHighlight(project,group,info,psiFile);
        changed[0]=true;
        return true;
      }
      if (isWarningCoveredByError(info,overlappingIntervals,severityRegistrar)) {
        return true;
      }
      if (info.getStartOffset() >= range.getStartOffset() && info.getEndOffset() <= range.getEndOffset()) {
        createOrReuseHighlighterFor(info,document,group,psiFile,markup,infosToRemove,ranges2markersCache,severityRegistrar);
        changed[0]=true;
      }
      return true;
    }
  }
);
  for (  RangeHighlighter highlighter : infosToRemove.forAllInGarbageBin()) {
    markup.removeHighlighter(highlighter);
    changed[0]=true;
  }
  if (changed[0]) {
    clearWhiteSpaceOptimizationFlag(document);
  }
  assertMarkupConsistent(markup,project);
}
