{
  ApplicationManager.getApplication().assertIsDispatchThread();
  final List<TextRange> ranges=new ArrayList<TextRange>(infos.keySet());
  Collections.sort(ranges,BY_START_OFFSET);
  for (int i=1; i < ranges.size(); i++) {
    TextRange range=ranges.get(i);
    TextRange prev=ranges.get(i - 1);
    if (prev.intersects(range)) {
      ranges.remove(i);
      TextRange union=prev.union(range);
      Collection<HighlightInfo> collection=infos.get(prev);
      collection.addAll(infos.get(range));
      infos.remove(prev);
      infos.remove(range);
      infos.put(union,collection);
      ranges.set(i - 1,union);
      i--;
    }
  }
  MarkupModel markup=document.getMarkupModel(project);
  assertMarkupConsistent(markup,project);
  for (  Map.Entry<TextRange,Collection<HighlightInfo>> entry : infos.entrySet()) {
    TextRange range=entry.getKey();
    Collection<HighlightInfo> highlights=entry.getValue();
    setHighlightersInRange(range,highlights,(MarkupModelEx)markup,group,document,project);
  }
}
