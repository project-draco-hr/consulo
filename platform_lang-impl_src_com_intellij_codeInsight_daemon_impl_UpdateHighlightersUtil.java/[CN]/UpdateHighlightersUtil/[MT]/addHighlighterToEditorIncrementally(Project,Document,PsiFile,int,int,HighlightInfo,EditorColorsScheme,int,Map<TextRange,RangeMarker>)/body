{
  ApplicationManager.getApplication().assertIsDispatchThread();
  if (info.isFileLevelAnnotation || info.getGutterIconRenderer() != null)   return;
  if (info.getStartOffset() < startOffset || info.getEndOffset() > endOffset)   return;
  MarkupModel markup=DocumentMarkupModel.forDocument(document,project,true);
  final SeverityRegistrar severityRegistrar=SeverityRegistrar.getInstance(project);
  final boolean myInfoIsError=isSevere(info,severityRegistrar);
  Processor<HighlightInfo> otherHighlightInTheWayProcessor=new Processor<HighlightInfo>(){
    public boolean process(    HighlightInfo oldInfo){
      if (!myInfoIsError && isCovered(info,severityRegistrar,oldInfo)) {
        return false;
      }
      return oldInfo.group != group || !oldInfo.equalsByActualOffset(info);
    }
  }
;
  boolean allIsClear=DaemonCodeAnalyzerImpl.processHighlights(document,project,null,info.getActualStartOffset(),info.getActualEndOffset(),otherHighlightInTheWayProcessor);
  if (!allIsClear) {
    return;
  }
  createOrReuseHighlighterFor(info,colorsScheme,document,group,file,(MarkupModelEx)markup,null,ranges2markersCache,severityRegistrar);
  clearWhiteSpaceOptimizationFlag(document);
  assertMarkupConsistent(markup,project);
}
