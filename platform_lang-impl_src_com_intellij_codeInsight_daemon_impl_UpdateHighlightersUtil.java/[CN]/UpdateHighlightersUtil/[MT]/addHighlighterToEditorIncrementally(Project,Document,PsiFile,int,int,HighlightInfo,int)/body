{
  ApplicationManager.getApplication().assertIsDispatchThread();
  if (info.isFileLevelAnnotation)   return;
  MarkupModel markup=document.getMarkupModel(project);
  Processor<HighlightInfo> otherHighlightInTheWayProcessor=new Processor<HighlightInfo>(){
    public boolean process(    HighlightInfo oldInfo){
      return oldInfo.group != group || !oldInfo.equalsByActualOffset(info);
    }
  }
;
  if (!DaemonCodeAnalyzerImpl.processHighlights(document,project,null,info.getActualStartOffset(),info.getActualEndOffset(),otherHighlightInTheWayProcessor)) {
    return;
  }
  boolean success=createOrReuseHighlighterFor(info,document,group,file,(MarkupModelEx)markup,null,null,startOffset,endOffset,SeverityRegistrar.getInstance(project));
  if (!success) {
    return;
  }
  DaemonCodeAnalyzerImpl.addHighlight(markup,project,info);
  clearWhiteSpaceOptimizationFlag(document);
  assertMarkupConsistent(markup,project);
}
