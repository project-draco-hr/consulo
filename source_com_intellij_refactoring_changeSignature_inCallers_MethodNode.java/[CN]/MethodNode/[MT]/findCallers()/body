{
  final Project project=myMethod.getProject();
  final PsiSearchHelper searchHelper=PsiManager.getInstance(project).getSearchHelper();
  final PsiReference[] refs=searchHelper.findReferencesIncludingOverriding(myMethod,GlobalSearchScope.allScope(project),true);
  List<PsiMethod> callers=new ArrayList<PsiMethod>();
  for (int i=0; i < refs.length; i++) {
    final PsiElement element=refs[i].getElement();
    if (!(element instanceof PsiReferenceExpression) || !(((PsiReferenceExpression)element).getQualifierExpression() instanceof PsiSuperExpression)) {
      final PsiElement enclosingContext=PsiTreeUtil.getParentOfType(element,new Class[]{PsiMethod.class,PsiClass.class});
      if (enclosingContext instanceof PsiMethod)       callers.add((PsiMethod)enclosingContext);
    }
  }
  return callers.toArray(new PsiMethod[callers.size()]);
}
