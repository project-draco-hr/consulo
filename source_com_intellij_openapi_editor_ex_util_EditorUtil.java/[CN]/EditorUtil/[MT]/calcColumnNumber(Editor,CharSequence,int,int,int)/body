{
  boolean useOptimization=true;
  boolean hasNonTabs=false;
  for (int i=start; i < offset; i++) {
    if (text.charAt(i) == '\t') {
      if (hasNonTabs) {
        useOptimization=false;
        break;
      }
    }
 else {
      hasNonTabs=true;
    }
  }
  if (editor == null || useOptimization) {
    int shift=0;
    for (int i=start; i < offset; i++) {
      char c=text.charAt(i);
      LOG.assertTrue(c != '\n' && c != '\r');
      if (c == '\t') {
        shift+=(getTabLength(i + shift - start,tabSize) - 1);
      }
    }
    return offset - start + shift;
  }
  EditorImpl editorImpl=(EditorImpl)editor;
  IterationState state=new IterationState(editorImpl,start,false);
  int fontType=state.getMergedAttributes().getFontType();
  int column=0;
  int x=0;
  int spaceSize=editorImpl.getSpaceWidth(fontType);
  for (int i=start; i < offset; i++) {
    if (i >= state.getEndOffset()) {
      state.advance();
      fontType=state.getMergedAttributes().getFontType();
    }
    char c=text.charAt(i);
    if (c == '\t') {
      int prevX=x;
      x=editorImpl.nextTabStop(x);
      column+=(x - prevX) / spaceSize;
    }
 else {
      x+=editorImpl.charWidth(fontType,c);
      column++;
    }
  }
  return column;
}
