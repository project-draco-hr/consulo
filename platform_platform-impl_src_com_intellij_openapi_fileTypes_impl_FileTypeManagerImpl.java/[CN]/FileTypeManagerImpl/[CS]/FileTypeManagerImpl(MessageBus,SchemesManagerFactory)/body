{
  myMessageBus=bus;
  mySchemesManager=schemesManagerFactory.createSchemesManager(FILE_SPEC,new BaseSchemeProcessor<AbstractFileType>(){
    @Override public AbstractFileType readScheme(    final Document document) throws InvalidDataException {
      if (document == null) {
        throw new InvalidDataException();
      }
      Element root=document.getRootElement();
      if (root == null || !ELEMENT_FILETYPE.equals(root.getName())) {
        throw new InvalidDataException();
      }
      Element element=root.getChild(AbstractFileType.ELEMENT_HIGHLIGHTING);
      if (element != null) {
        final SyntaxTable table=AbstractFileType.readSyntaxTable(element);
        if (table != null) {
          ReadFileType type=new ReadFileType(table,root);
          String fileTypeName=root.getAttributeValue(ATTRIBUTE_NAME);
          String fileTypeDescr=root.getAttributeValue(ATTRIBUTE_DESCRIPTION);
          String iconPath=root.getAttributeValue(ATTRIBUTE_ICON);
          setFileTypeAttributes(fileTypeName,fileTypeDescr,iconPath,type);
          return type;
        }
      }
      return null;
    }
    @Override public boolean shouldBeSaved(    final AbstractFileType fileType){
      return shouldBeSavedToFile(fileType);
    }
    @Override public Document writeScheme(    final AbstractFileType fileType) throws WriteExternalException {
      Element root=new Element(ELEMENT_FILETYPE);
      writeHeader(root,fileType);
      fileType.writeExternal(root);
      Element map=new Element(AbstractFileType.ELEMENT_EXTENSIONMAP);
      root.addContent(map);
      if (fileType instanceof ImportedFileType) {
        writeImportedExtensionsMap(map,(ImportedFileType)fileType);
      }
 else {
        writeExtensionsMap(map,fileType,false);
      }
      return new Document(root);
    }
    @Override public void onSchemeAdded(    final AbstractFileType scheme){
      fireBeforeFileTypesChanged();
      if (scheme instanceof ReadFileType) {
        loadFileType((ReadFileType)scheme);
      }
      fireFileTypesChanged();
    }
    @Override public void onSchemeDeleted(    final AbstractFileType scheme){
      fireBeforeFileTypesChanged();
      myPatternsTable.removeAllAssociations(scheme);
      fireFileTypesChanged();
    }
  }
,RoamingType.PER_USER);
  for (  final StandardFileType pair : ourStandardFileTypes.values()) {
    registerFileTypeWithoutNotification(pair.fileType,pair.matchers);
  }
  if (loadAllFileTypes()) {
    restoreStandardFileExtensions();
  }
}
