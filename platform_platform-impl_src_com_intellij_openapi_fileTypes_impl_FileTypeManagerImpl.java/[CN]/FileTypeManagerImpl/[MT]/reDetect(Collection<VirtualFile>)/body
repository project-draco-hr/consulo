{
  final Collection<VirtualFile> changed=new ArrayList<VirtualFile>();
  for (  VirtualFile file : files) {
    boolean shouldRedetect=wasAutoDetectedBefore(file) && isDetectable(file);
    if (toLog()) {
      log("F: reDetect(" + file.getName() + ") "+ file.getName()+ "; shouldRedetect: "+ shouldRedetect);
    }
    if (shouldRedetect) {
      int id=((VirtualFileWithId)file).getId();
      long flags=packedFlags.get(id);
      FileType before=ObjectUtils.notNull(textOrBinaryFromCachedFlags(flags),ObjectUtils.notNull(file.getUserData(DETECTED_FROM_CONTENT_FILE_TYPE_KEY),PlainTextFileType.INSTANCE));
      FileType after=getOrDetectByFile(file);
      if (toLog()) {
        log("F: reDetect(" + file.getName() + ") prepare to redetect. flags: "+ readableFlags(flags)+ "; beforeType: "+ before.getName()+ "; afterByFileType: "+ (after == null ? null : after.getName()));
      }
      if (after == null) {
        after=detectFromContentAndCache(file);
      }
 else {
        file.putUserData(DETECTED_FROM_CONTENT_FILE_TYPE_KEY,null);
        flags=0;
        packedFlags.set(id,flags);
      }
      if (toLog()) {
        log("F: reDetect(" + file.getName() + ") "+ "before: "+ before.getName()+ "; after: "+ after.getName()+ "; now getFileType()="+ file.getFileType().getName()+ "; getUserData(DETECTED_FROM_CONTENT_FILE_TYPE_KEY): "+ file.getUserData(DETECTED_FROM_CONTENT_FILE_TYPE_KEY));
      }
      if (before != after) {
        changed.add(file);
      }
    }
  }
  if (!changed.isEmpty()) {
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      @Override public void run(){
        FileContentUtilCore.reparseFiles(changed);
      }
    }
,ApplicationManager.getApplication().getDisposed());
  }
}
