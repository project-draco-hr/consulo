{
  if (!isDetectable(file))   return UnknownFileType.INSTANCE;
  if (file instanceof VirtualFileWithId) {
    int id=((VirtualFileWithId)file).getId();
    if (id < 0)     return UnknownFileType.INSTANCE;
    long flags=packedFlags.get(id);
    boolean autoDetectWasRun=(flags & AUTO_DETECT_WAS_RUN_MASK) != 0;
    if (autoDetectWasRun) {
      FileType type=getAutoDetectedType(file,id);
      if (toLog()) {
        log("F: autodetected getFileType(" + file.getName() + ") = "+ type.getName());
      }
      return type;
    }
    if ((flags & ATTRIBUTES_WERE_LOADED_MASK) == 0) {
      flags=readFlagsFromCache(file);
      packedFlags.set(id,flags);
    }
    boolean wasDetectedAsText=BitUtil.isSet(flags,AUTO_DETECTED_AS_TEXT_MASK);
    boolean wasDetectedAsBinary=BitUtil.isSet(flags,AUTO_DETECTED_AS_BINARY_MASK);
    boolean wasAutoDetectRun=BitUtil.isSet(flags,AUTO_DETECT_WAS_RUN_MASK);
    if (wasAutoDetectRun && (wasDetectedAsText || wasDetectedAsBinary)) {
      return wasDetectedAsText ? PlainTextFileType.INSTANCE : UnknownFileType.INSTANCE;
    }
  }
  FileType fileType=file.getUserData(DETECTED_FROM_CONTENT_FILE_TYPE_KEY);
  if (fileType == null) {
    fileType=detectFromContent(file);
  }
  if (toLog()) {
    log("F: getFileType after detect run(" + file.getName() + ") = "+ fileType.getName());
  }
  return fileType;
}
