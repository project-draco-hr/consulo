{
  if (!isDetectable(file))   return UnknownFileType.INSTANCE;
  if (file instanceof VirtualFileWithId) {
    int id=((VirtualFileWithId)file).getId();
    if (id < 0)     return UnknownFileType.INSTANCE;
    long flags=packedFlags.get(id);
    boolean autoDetectWasRun=(flags & AUTO_DETECT_WAS_RUN_MASK) != 0;
    if (autoDetectWasRun) {
      FileType type=getAutoDetectedType(file,id);
      if (toLog()) {
        log("F: autodetected getFileType(" + file.getName() + ") = "+ type.getName());
      }
      return type;
    }
    boolean wasDetectedAsText=false;
    boolean wasDetectedAsBinary=false;
    boolean wasAutoDetectRun=false;
    if ((flags & ATTRIBUTES_WERE_LOADED_MASK) == 0) {
      DataInputStream stream=autoDetectedAttribute.readAttribute(file);
      try {
        try {
          byte status=stream != null ? stream.readByte() : 0;
          wasAutoDetectRun=stream != null;
          wasDetectedAsText=BitUtil.isSet(status,AUTO_DETECTED_AS_TEXT_MASK);
          wasDetectedAsBinary=BitUtil.isSet(status,AUTO_DETECTED_AS_BINARY_MASK);
        }
  finally {
          if (stream != null) {
            stream.close();
          }
        }
      }
 catch (      IOException ignored) {
      }
      flags=ATTRIBUTES_WERE_LOADED_MASK;
      flags=BitUtil.set(flags,AUTO_DETECTED_AS_TEXT_MASK,wasDetectedAsText);
      flags=BitUtil.set(flags,AUTO_DETECTED_AS_BINARY_MASK,wasDetectedAsBinary);
      flags=BitUtil.set(flags,AUTO_DETECT_WAS_RUN_MASK,wasAutoDetectRun);
      packedFlags.set(id,flags);
    }
    if (wasAutoDetectRun && (wasDetectedAsText || wasDetectedAsBinary)) {
      return wasDetectedAsText ? PlainTextFileType.INSTANCE : UnknownFileType.INSTANCE;
    }
  }
  FileType fileType=file.getUserData(DETECTED_FROM_CONTENT_FILE_TYPE_KEY);
  if (fileType == null) {
    fileType=detectFromContent(file);
  }
  if (toLog()) {
    log("F: getFileType after detect run(" + file.getName() + ") = "+ fileType.getName());
  }
  return fileType;
}
