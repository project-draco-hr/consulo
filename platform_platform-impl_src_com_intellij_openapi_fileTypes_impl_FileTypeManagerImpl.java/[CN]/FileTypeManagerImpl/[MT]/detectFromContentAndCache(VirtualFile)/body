{
  long start=System.currentTimeMillis();
  try {
    final InputStream inputStream=((FileSystemInterface)file.getFileSystem()).getInputStream(file);
    if (toLog()) {
      log("F: detectFromContentAndCache(" + file.getName() + "):"+ " inputStream="+ streamInfo(inputStream));
    }
    final Ref<FileType> result=new Ref<FileType>(UnknownFileType.INSTANCE);
    boolean r=false;
    try {
      r=processFirstBytes(inputStream,DETECT_BUFFER_SIZE,new Processor<ByteSequence>(){
        @Override public boolean process(        ByteSequence byteSequence){
          boolean isText=guessIfText(file,byteSequence);
          CharSequence text;
          if (isText) {
            byte[] bytes=Arrays.copyOf(byteSequence.getBytes(),byteSequence.getLength());
            text=LoadTextUtil.getTextByBinaryPresentation(bytes,file,true,true,UnknownFileType.INSTANCE);
          }
 else {
            text=null;
          }
          FileTypeDetector[] detectors=Extensions.getExtensions(FileTypeDetector.EP_NAME);
          if (FileTypeManagerImpl.this.toLog()) {
            log("F: detectFromContentAndCache.processFirstBytes(" + file.getName() + "): "+ "byteSequence.length="+ byteSequence.getLength()+ "; isText="+ isText+ "; text='"+ (text == null ? null : StringUtil.first(text,100,true))+ "', detectors="+ Arrays.toString(detectors));
          }
          FileType detected=null;
          for (          FileTypeDetector detector : detectors) {
            try {
              detected=detector.detect(file,byteSequence,text);
            }
 catch (            Exception e) {
              LOG.error("Detector " + detector + " ("+ detector.getClass()+ ") exception occurred:",e);
            }
            if (detected != null) {
              if (FileTypeManagerImpl.this.toLog()) {
                log("F: detectFromContentAndCache.processFirstBytes(" + file.getName() + "): "+ "detector "+ detector+ " type as "+ detected.getName());
              }
              break;
            }
          }
          if (detected == null) {
            detected=isText ? PlainTextFileType.INSTANCE : UnknownFileType.INSTANCE;
            if (FileTypeManagerImpl.this.toLog()) {
              log("F: detectFromContentAndCache.processFirstBytes(" + file.getName() + "): "+ "no detector was able to detect. assigned "+ detected.getName());
            }
          }
          result.set(detected);
          return true;
        }
      }
);
    }
  finally {
      if (toLog()) {
        byte[] buffer=new byte[50];
        InputStream newStream=((FileSystemInterface)file.getFileSystem()).getInputStream(file);
        int n=newStream.read(buffer,0,buffer.length);
        log("F: detectFromContentAndCache(" + file.getName() + "): "+ "; result: "+ result.get().getName()+ "; processor ret: "+ r+ "; stream: "+ streamInfo(inputStream)+ "; newStream: "+ streamInfo(newStream)+ "; read: "+ n+ "; buffer: "+ Arrays.toString(buffer));
        newStream.close();
      }
      inputStream.close();
    }
    FileType fileType=result.get();
    if (LOG.isDebugEnabled()) {
      LOG.debug(file + "; type=" + fileType.getDescription()+ "; "+ counterAutoDetect);
    }
    cacheAutoDetectedFileType(file,fileType);
    counterAutoDetect.incrementAndGet();
    long elapsed=System.currentTimeMillis() - start;
    elapsedAutoDetect.addAndGet(elapsed);
    return fileType;
  }
 catch (  IOException ignored) {
    return UnknownFileType.INSTANCE;
  }
}
