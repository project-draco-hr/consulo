{
  int savedVersion=StringUtilRt.parseInt(state.getAttributeValue(ATTRIBUTE_VERSION),0);
  for (  Element element : state.getChildren()) {
    if (element.getName().equals(ELEMENT_IGNORE_FILES)) {
      myIgnoredPatterns.setIgnoreMasks(element.getAttributeValue(ATTRIBUTE_LIST));
    }
 else     if (AbstractFileType.ELEMENT_EXTENSION_MAP.equals(element.getName())) {
      readGlobalMappings(element);
    }
  }
  if (savedVersion < 4) {
    if (savedVersion == 0) {
      addIgnore(".svn");
    }
    if (savedVersion < 2) {
      restoreStandardFileExtensions();
    }
    addIgnore("*.pyc");
    addIgnore("*.pyo");
    addIgnore(".git");
  }
  if (savedVersion < 5) {
    addIgnore("*.hprof");
  }
  if (savedVersion < 6) {
    addIgnore("_svn");
  }
  if (savedVersion < 7) {
    addIgnore(".hg");
  }
  if (savedVersion < 8) {
    addIgnore("*~");
  }
  if (savedVersion < 9) {
    addIgnore("__pycache__");
  }
  if (savedVersion < 11) {
    addIgnore("*.rbc");
  }
  if (savedVersion < 13) {
    unignoreMask("*.lib");
  }
  if (savedVersion < 14) {
    addIgnore(".tox");
  }
  if (savedVersion < 15) {
    unignoreMask(".bundle");
  }
  myIgnoredFileCache.clearCache();
  String counter=JDOMExternalizer.readString(state,"fileTypeChangedCounter");
  if (counter != null) {
    fileTypeChangedCount.set(StringUtilRt.parseInt(counter,0));
    autoDetectedAttribute=autoDetectedAttribute.newVersion(fileTypeChangedCount.get());
  }
}
