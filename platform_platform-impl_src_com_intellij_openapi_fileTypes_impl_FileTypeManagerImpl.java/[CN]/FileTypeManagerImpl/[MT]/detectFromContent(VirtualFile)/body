{
  long start=System.currentTimeMillis();
  try {
    final InputStream inputStream=((FileSystemInterface)file.getFileSystem()).getInputStream(file);
    final Ref<FileType> result;
    try {
      result=new Ref<FileType>(UnknownFileType.INSTANCE);
      FileUtil.processFirstBytes(inputStream,DETECT_BUFFER_SIZE,new Processor<ByteSequence>(){
        @Override public boolean process(        ByteSequence byteSequence){
          boolean isText=guessIfText(file,byteSequence);
          CharSequence text;
          if (isText) {
            byte[] bytes=Arrays.copyOf(byteSequence.getBytes(),byteSequence.getLength());
            text=LoadTextUtil.getTextByBinaryPresentation(bytes,file,true,true,UnknownFileType.INSTANCE);
          }
 else {
            text=null;
          }
          FileType detected=null;
          for (          FileTypeDetector detector : Extensions.getExtensions(FileTypeDetector.EP_NAME)) {
            try {
              detected=detector.detect(file,byteSequence,text);
            }
 catch (            Exception e) {
              LOG.error("Detector " + detector + " ("+ detector.getClass()+ ") exception occurred:",e);
            }
            if (detected != null)             break;
          }
          if (detected == null) {
            detected=isText ? PlainTextFileType.INSTANCE : UnknownFileType.INSTANCE;
          }
          result.set(detected);
          return true;
        }
      }
);
    }
  finally {
      inputStream.close();
    }
    FileType fileType=result.get();
    if (LOG.isDebugEnabled()) {
      LOG.debug(file + "; type=" + fileType.getDescription()+ "; "+ counterAutoDetect);
    }
    cacheAutoDetectedFileType(file,fileType);
    counterAutoDetect.incrementAndGet();
    long elapsed=System.currentTimeMillis() - start;
    elapsedAutoDetect.addAndGet(elapsed);
    return fileType;
  }
 catch (  IOException e) {
    return UnknownFileType.INSTANCE;
  }
}
