{
  try {
    final VirtualFile canonicalFile=file.getCanonicalFile();
    if (canonicalFile == null) {
      return UnknownFileType.INSTANCE;
    }
    final long length=canonicalFile.getLength();
    if (length == 0) {
      return UnknownFileType.INSTANCE;
    }
    final VirtualFileSystem fileSystem=canonicalFile.getFileSystem();
    if (!(fileSystem instanceof FileSystemInterface))     return UnknownFileType.INSTANCE;
    final InputStream inputStream=((FileSystemInterface)fileSystem).getInputStream(canonicalFile);
    final Ref<FileType> result;
    try {
      result=new Ref<FileType>(UnknownFileType.INSTANCE);
      FileUtil.processFirstBytes(inputStream,DETECT_BUFFER_SIZE,new Processor<ByteSequence>(){
        @Override public boolean process(        ByteSequence byteSequence){
          boolean isText=guessIfText(canonicalFile,byteSequence);
          CharSequence text;
          if (isText) {
            byte[] bytes=Arrays.copyOf(byteSequence.getBytes(),byteSequence.getLength());
            text=LoadTextUtil.getTextByBinaryPresentation(bytes,canonicalFile);
          }
 else {
            text=null;
          }
          FileType detected=null;
          for (          FileTypeDetector detector : FileTypeDetectorHolder.FILE_TYPE_DETECTORS) {
            detected=detector.detect(canonicalFile,byteSequence,text);
            if (detected != null)             break;
          }
          if (detected == null) {
            detected=isText ? PlainTextFileType.INSTANCE : UnknownFileType.INSTANCE;
          }
          result.set(detected);
          return true;
        }
      }
);
    }
  finally {
      inputStream.close();
    }
    FileType fileType=result.get();
    if (LOG.isDebugEnabled()) {
      LOG.debug(canonicalFile + "; type=" + fileType.getDescription()+ "; "+ DETECTED_COUNT.incrementAndGet());
    }
    return fileType;
  }
 catch (  FileNotFoundException e) {
    return UnknownFileType.INSTANCE;
  }
catch (  IOException e) {
    LOG.info(e);
    return UnknownFileType.INSTANCE;
  }
}
