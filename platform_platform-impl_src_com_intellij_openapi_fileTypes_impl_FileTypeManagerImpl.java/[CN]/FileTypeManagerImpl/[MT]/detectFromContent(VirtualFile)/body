{
  try {
    final long length=file.getLength();
    if (length == 0) {
      return UnknownFileType.INSTANCE;
    }
    final Function<ByteSequence,FileType> detectProcessor=new Function<ByteSequence,FileType>(){
      @Override public FileType fun(      ByteSequence byteSequence){
        boolean isText=guessIfText(file,byteSequence);
        CharSequence text;
        if (isText) {
          byte[] bytes=Arrays.copyOf(byteSequence.getBytes(),byteSequence.getLength());
          text=LoadTextUtil.getTextByBinaryPresentation(bytes,file);
        }
 else {
          text=null;
        }
        for (        FileTypeDetector detector : FileTypeDetectorHolder.FILE_TYPE_DETECTORS) {
          FileType detected=detector.detect(file,byteSequence,text);
          if (detected != null)           return detected;
        }
        return isText ? PlainTextFileType.INSTANCE : UnknownFileType.INSTANCE;
      }
    }
;
    FileType fileType;
    if (length > DETECT_BUFFER_SIZE) {
      VirtualFileSystem fileSystem=file.getFileSystem();
      if (!(fileSystem instanceof FileSystemInterface))       return UnknownFileType.INSTANCE;
      InputStream inputStream=((FileSystemInterface)fileSystem).getInputStream(file);
      final Ref<FileType> detected=new Ref<FileType>();
      FileUtil.processFirstBytes(inputStream,DETECT_BUFFER_SIZE,new Processor<ByteSequence>(){
        @Override public boolean process(        ByteSequence byteSequence){
          detected.set(detectProcessor.fun(byteSequence));
          return true;
        }
      }
);
      fileType=detected.get();
    }
 else {
      byte[] bytes=file.contentsToByteArray();
      fileType=detectProcessor.fun(new ByteSequence(bytes));
    }
    return fileType;
  }
 catch (  FileNotFoundException e) {
    return UnknownFileType.INSTANCE;
  }
catch (  IOException e) {
    LOG.error(e);
    return UnknownFileType.INSTANCE;
  }
}
