{
  long start=System.currentTimeMillis();
  try {
    final InputStream inputStream=((FileSystemInterface)file.getFileSystem()).getInputStream(file);
    final Ref<FileType> result=new Ref<FileType>(UnknownFileType.INSTANCE);
    boolean r;
    try {
      r=FileUtil.processFirstBytes(inputStream,DETECT_BUFFER_SIZE,new Processor<ByteSequence>(){
        @Override public boolean process(        ByteSequence byteSequence){
          boolean isText=guessIfText(file,byteSequence);
          CharSequence text;
          if (isText) {
            byte[] bytes=Arrays.copyOf(byteSequence.getBytes(),byteSequence.getLength());
            text=LoadTextUtil.getTextByBinaryPresentation(bytes,file,true,true,UnknownFileType.INSTANCE);
          }
 else {
            text=null;
          }
          FileTypeDetector[] detectors=Extensions.getExtensions(FileTypeDetector.EP_NAME);
          if (toLog()) {
            log("F: processFirstBytes. byteSequence.length=" + byteSequence.getLength() + "; isText="+ isText+ "; text='"+ (text == null ? null : StringUtil.first(text,100,true))+ "', detectors="+ Arrays.toString(detectors));
          }
          FileType detected=null;
          for (          FileTypeDetector detector : detectors) {
            try {
              detected=detector.detect(file,byteSequence,text);
            }
 catch (            Exception e) {
              LOG.error("Detector " + detector + " ("+ detector.getClass()+ ") exception occurred:",e);
            }
            if (detected != null)             break;
          }
          if (detected == null) {
            detected=isText ? PlainTextFileType.INSTANCE : UnknownFileType.INSTANCE;
          }
          result.set(detected);
          return true;
        }
      }
);
    }
  finally {
      inputStream.close();
    }
    FileType fileType=result.get();
    if (toLog()) {
      byte[] buffer=new byte[50];
      InputStream newStream=((FileSystemInterface)file.getFileSystem()).getInputStream(file);
      int n=newStream.read(buffer,0,buffer.length);
      newStream.close();
      log("F: Redetect run for file: " + file.getName() + "; result: "+ fileType.getName()+ "; processor ret: "+ r+ "; stream: "+ inputStream+ "; newStream: "+ newStream+ "; read: "+ n+ "; buffer: "+ Arrays.toString(buffer));
      try {
        InputStream in=ReflectionUtil.getField(newStream.getClass(),newStream,InputStream.class,"in");
        String path=ReflectionUtil.getField(in.getClass(),in,String.class,"path");
        log("F: inputStream.in: " + in + "("+ in.getClass()+ "; in.path: "+ path+ "; path.exists "+ new File(path).exists()+ "; canRead: "+ new File(path).canRead());
      }
 catch (      Exception ignored) {
      }
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug(file + "; type=" + fileType.getDescription()+ "; "+ counterAutoDetect);
    }
    cacheAutoDetectedFileType(file,fileType);
    counterAutoDetect.incrementAndGet();
    long elapsed=System.currentTimeMillis() - start;
    elapsedAutoDetect.addAndGet(elapsed);
    return fileType;
  }
 catch (  IOException ignored) {
    return UnknownFileType.INSTANCE;
  }
}
