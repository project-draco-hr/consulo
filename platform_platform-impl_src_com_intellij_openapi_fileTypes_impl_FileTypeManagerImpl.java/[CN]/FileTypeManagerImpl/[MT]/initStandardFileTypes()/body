{
  final FileTypeConsumer consumer=new FileTypeConsumer(){
    @Override public void consume(    @NotNull FileType fileType){
      register(fileType,parse(fileType.getDefaultExtension()));
    }
    @Override public void consume(    @NotNull final FileType fileType,    final String extensions){
      register(fileType,parse(extensions));
    }
    @Override public void consume(    @NotNull final FileType fileType,    final FileNameMatcher... matchers){
      register(fileType,new ArrayList<FileNameMatcher>(Arrays.asList(matchers)));
    }
    @Override public FileType getStandardFileTypeByName(    @NotNull final String name){
      final StandardFileType type=myStandardFileTypes.get(name);
      return type != null ? type.fileType : null;
    }
    private void register(    final FileType fileType,    final List<FileNameMatcher> fileNameMatchers){
      final StandardFileType type=myStandardFileTypes.get(fileType.getName());
      if (type != null) {
        for (        FileNameMatcher matcher : fileNameMatchers)         type.matchers.add(matcher);
      }
 else {
        myStandardFileTypes.put(fileType.getName(),new StandardFileType(fileType,fileNameMatchers));
      }
    }
  }
;
  for (  final FileTypeFactory factory : Extensions.getExtensions(FileTypeFactory.FILE_TYPE_FACTORY_EP)) {
    try {
      factory.createFileTypes(consumer);
    }
 catch (    final Error ex) {
      PluginManager.disableIncompatiblePlugin(factory,ex);
    }
  }
}
