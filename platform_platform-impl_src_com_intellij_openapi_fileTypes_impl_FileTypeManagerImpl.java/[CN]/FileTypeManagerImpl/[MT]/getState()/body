{
  Element state=new Element("state");
  Set<String> masks=myIgnoredPatterns.getIgnoreMasks();
  String ignoreFiles;
  if (masks.isEmpty()) {
    ignoreFiles="";
  }
 else {
    String[] strings=ArrayUtil.toStringArray(masks);
    Arrays.sort(strings);
    ignoreFiles=StringUtil.join(strings,";") + ";";
  }
  if (!ignoreFiles.equalsIgnoreCase(DEFAULT_IGNORED)) {
    state.addContent(new Element(ELEMENT_IGNORE_FILES).setAttribute(ATTRIBUTE_LIST,ignoreFiles));
  }
  Element map=new Element(AbstractFileType.ELEMENT_EXTENSION_MAP);
  List<FileType> notExternalizableFileTypes=new ArrayList<FileType>();
  for (  FileType type : mySchemesManager.getAllSchemes()) {
    if (!(type instanceof AbstractFileType)) {
      notExternalizableFileTypes.add(type);
    }
  }
  if (!notExternalizableFileTypes.isEmpty()) {
    Collections.sort(notExternalizableFileTypes,new Comparator<FileType>(){
      @Override public int compare(      @NotNull FileType o1,      @NotNull FileType o2){
        return o1.getName().compareTo(o2.getName());
      }
    }
);
    for (    FileType type : notExternalizableFileTypes) {
      writeExtensionsMap(map,type,true);
    }
  }
  if (!myUnresolvedMappings.isEmpty()) {
    FileNameMatcher[] unresolvedMappingKeys=myUnresolvedMappings.keySet().toArray(new FileNameMatcher[myUnresolvedMappings.size()]);
    Arrays.sort(unresolvedMappingKeys,new Comparator<FileNameMatcher>(){
      @Override public int compare(      FileNameMatcher o1,      FileNameMatcher o2){
        return o1.getPresentableString().compareTo(o2.getPresentableString());
      }
    }
);
    for (    FileNameMatcher fileNameMatcher : unresolvedMappingKeys) {
      Element content=AbstractFileType.writeMapping(myUnresolvedMappings.get(fileNameMatcher),fileNameMatcher,true);
      if (content != null) {
        map.addContent(content);
      }
    }
  }
  if (!map.getChildren().isEmpty()) {
    state.addContent(map);
  }
  if (!state.getChildren().isEmpty()) {
    state.setAttribute(ATTRIBUTE_VERSION,String.valueOf(VERSION));
  }
  return state;
}
