{
  for (  Pair<FileNameMatcher,String> association : AbstractFileType.readAssociations(e)) {
    FileType type=getFileTypeByName(association.getSecond());
    FileNameMatcher matcher=association.getFirst();
    if (type != null) {
      if (PlainTextFileType.INSTANCE == type) {
        FileType newFileType=myPatternsTable.findAssociatedFileType(matcher);
        if (newFileType != null && newFileType != PlainTextFileType.INSTANCE && newFileType != UnknownFileType.INSTANCE) {
          myRemovedMappings.put(matcher,Pair.create(newFileType,false));
        }
      }
      associate(type,matcher,false);
    }
 else {
      myUnresolvedMappings.put(matcher,association.getSecond());
    }
  }
  List<Trinity<FileNameMatcher,String,Boolean>> removedAssociations=AbstractFileType.readRemovedAssociations(e);
  for (  Trinity<FileNameMatcher,String,Boolean> trinity : removedAssociations) {
    FileType type=getFileTypeByName(trinity.getSecond());
    FileNameMatcher matcher=trinity.getFirst();
    if (type != null) {
      removeAssociation(type,matcher,false);
    }
 else {
      myUnresolvedRemovedMappings.put(matcher,Trinity.create(trinity.getSecond(),myUnresolvedMappings.get(matcher),trinity.getThird()));
    }
  }
}
