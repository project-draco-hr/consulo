{
  String fileTypeName=typeElement.getAttributeValue(ATTRIBUTE_NAME);
  String fileTypeDescr=typeElement.getAttributeValue(ATTRIBUTE_DESCRIPTION);
  String iconPath=typeElement.getAttributeValue("icon");
  String extensionsStr=StringUtil.nullize(typeElement.getAttributeValue("extensions"));
  if (isDefault && extensionsStr != null) {
    extensionsStr=filterAlreadyRegisteredExtensions(extensionsStr);
  }
  FileType type=isDefault ? getFileTypeByName(fileTypeName) : null;
  if (type != null) {
    return type;
  }
  Element element=typeElement.getChild(AbstractFileType.ELEMENT_HIGHLIGHTING);
  if (element == null) {
    for (    CustomFileTypeFactory factory : CustomFileTypeFactory.EP_NAME.getExtensions()) {
      type=factory.createFileType(typeElement);
      if (type != null) {
        break;
      }
    }
    if (type == null) {
      type=new UserBinaryFileType();
    }
  }
 else {
    SyntaxTable table=AbstractFileType.readSyntaxTable(element);
    type=new AbstractFileType(table);
    ((AbstractFileType)type).initSupport();
  }
  setFileTypeAttributes((UserFileType)type,fileTypeName,fileTypeDescr,iconPath);
  registerFileTypeWithoutNotification(type,parse(extensionsStr),isDefault);
  if (isDefault) {
    myDefaultTypes.add(type);
    if (type instanceof ExternalizableFileType) {
      ((ExternalizableFileType)type).markDefaultSettings();
    }
  }
 else {
    Element extensions=typeElement.getChild(AbstractFileType.ELEMENT_EXTENSION_MAP);
    if (extensions != null) {
      for (      Pair<FileNameMatcher,String> association : AbstractFileType.readAssociations(extensions)) {
        associate(type,association.getFirst(),false);
      }
      for (      Trinity<FileNameMatcher,String,Boolean> removedAssociation : AbstractFileType.readRemovedAssociations(extensions)) {
        removeAssociation(type,removedAssociation.getFirst(),false);
      }
    }
  }
  return type;
}
