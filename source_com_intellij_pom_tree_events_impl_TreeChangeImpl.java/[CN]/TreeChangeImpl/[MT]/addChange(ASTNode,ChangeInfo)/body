{
  LOG.assertTrue(child.getTreeParent() == myParent);
  final ChangeInfo current=myChanges.get(child);
  if (current != null && changeInfo.getChangeType() == ChangeInfo.CONTENTS_CHANGED) {
    return;
  }
  if (changeInfo.getChangeType() == ChangeInfo.REPLACE) {
    final ReplaceChangeInfoImpl replaceChangeInfo=((ReplaceChangeInfoImpl)changeInfo);
    final ASTNode replaced=replaceChangeInfo.getReplaced();
    final ChangeInfo replacedInfo=myChanges.get(replaced);
    if (replacedInfo == null) {
      myChanges.put(child,changeInfo);
    }
 else {
switch (replacedInfo.getChangeType()) {
case ChangeInfo.REPLACE:
        replaceChangeInfo.setOldLength(replacedInfo.getOldLength());
      replaceChangeInfo.setReplaced(((ReplaceChangeInfo)replacedInfo).getReplaced());
    break;
case ChangeInfo.ADD:
  changeInfo=ChangeInfoImpl.create(ChangeInfo.ADD,replaced,SharedImplUtil.findCharTableByTree(myParent));
myChanges.remove(replaced);
break;
}
myChanges.put(child,changeInfo);
}
return;
}
if (current != null && current.getChangeType() == ChangeInfo.REMOVED) {
if (changeInfo.getChangeType() == ChangeInfo.ADD) {
myChanges.remove(child);
}
return;
}
if (current != null && current.getChangeType() == ChangeInfo.ADD) {
if (changeInfo.getChangeType() == ChangeInfo.REMOVED) {
myChanges.remove(child);
}
return;
}
if (changeInfo.getChangeType() == ChangeInfo.REMOVED) {
if (child instanceof LeafElement) {
final int charTabIndex=((LeafElement)child).getCharTabIndex();
if (checkLeaf(child.getTreeNext(),charTabIndex) || checkLeaf(child.getTreePrev(),charTabIndex)) return;
}
myChanges.put(child,changeInfo);
if (current != null) ((ChangeInfoImpl)changeInfo).setOldLength(current.getOldLength());
return;
}
if (current == null) {
myChanges.put(child,changeInfo);
return;
}
}
