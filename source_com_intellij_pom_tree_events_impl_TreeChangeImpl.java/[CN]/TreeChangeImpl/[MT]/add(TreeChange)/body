{
  final TreeChangeImpl impl=(TreeChangeImpl)value;
  LOG.assertTrue(impl.myParent == myParent);
  final Iterator<Pair<ASTNode,Integer>> newChangesIterator=impl.myOffsets.iterator();
  while (newChangesIterator.hasNext()) {
    Pair<ASTNode,Integer> pair=newChangesIterator.next();
    final ASTNode child=pair.getFirst();
    ChangeInfo change=impl.getChangeByChild(child);
    if (change.getChangeType() == ChangeInfo.REMOVED) {
      final ChangeInfo oldChange=getChangeByChild(child);
      if (oldChange != null) {
switch (oldChange.getChangeType()) {
case ChangeInfo.ADD:
          removeChangeInternal(child);
        break;
case ChangeInfo.REPLACE:
      final ASTNode replaced=((ReplaceChangeInfoImpl)oldChange).getReplaced();
    removeChangeInternal(child);
  myChanges.put(replaced,ChangeInfoImpl.create(ChangeInfo.REMOVED,replaced));
addChangeAtOffset(replaced,getOldOffset(pair.getSecond().intValue()));
break;
case ChangeInfo.CONTENTS_CHANGED:
((ChangeInfoImpl)change).setOldLength(oldChange.getOldLength());
myChanges.put(child,change);
break;
}
}
 else {
myChanges.put(child,change);
addChangeAtOffset(child,getOldOffset(pair.getSecond().intValue()));
}
}
 else if (change.getChangeType() == ChangeInfo.REPLACE) {
ReplaceChangeInfo replaceChangeInfo=(ReplaceChangeInfo)change;
final ChangeInfo oldChange=getChangeByChild(replaceChangeInfo.getReplaced());
if (oldChange != null) {
switch (oldChange.getChangeType()) {
case ChangeInfo.ADD:
removeChangeInternal(child);
change=ChangeInfoImpl.create(ChangeInfo.ADD,child);
break;
case ChangeInfo.CONTENTS_CHANGED:
((ChangeInfoImpl)change).setOldLength(oldChange.getOldLength());
break;
case ChangeInfo.REPLACE:
change=ChangeInfoImpl.create(ChangeInfo.REPLACE,child);
((ReplaceChangeInfoImpl)change).setReplaced(((ReplaceChangeInfoImpl)oldChange).getReplaced());
removeChangeInternal(replaceChangeInfo.getReplaced());
break;
}
}
addChange(child,change);
}
 else {
addChange(child,change);
}
}
}
