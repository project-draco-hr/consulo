{
  if (value == null)   return null;
  if (value instanceof PsiAnnotation) {
    PsiJavaCodeReferenceElement nameRef=((PsiAnnotation)value).getNameReferenceElement();
    if (nameRef == null)     return null;
    if (expectedType instanceof PsiClassType) {
      PsiClass aClass=((PsiClassType)expectedType).resolve();
      if (nameRef.isReferenceTo(aClass))       return null;
    }
    if (expectedType instanceof PsiArrayType) {
      PsiType componentType=((PsiArrayType)expectedType).getComponentType();
      if (componentType instanceof PsiClassType) {
        PsiClass aClass=((PsiClassType)componentType).resolve();
        if (nameRef.isReferenceTo(aClass))         return null;
      }
    }
    String description=JavaErrorMessages.message("annotation.incompatible.types",formatReference(nameRef),HighlightUtil.formatType(expectedType));
    return HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,value,description);
  }
 else   if (value instanceof PsiArrayInitializerMemberValue) {
    if (expectedType instanceof PsiArrayType)     return null;
    String description=JavaErrorMessages.message("annotation.illegal.array.initializer",HighlightUtil.formatType(expectedType));
    return HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,value,description);
  }
 else   if (value instanceof PsiExpression) {
    PsiExpression expr=(PsiExpression)value;
    PsiType type=expr.getType();
    if (type != null && TypeConversionUtil.areTypesAssignmentCompatible(expectedType,expr) || expectedType instanceof PsiArrayType && TypeConversionUtil.areTypesAssignmentCompatible(((PsiArrayType)expectedType).getComponentType(),expr)) {
      return null;
    }
    String description=JavaErrorMessages.message("annotation.incompatible.types",HighlightUtil.formatType(type),HighlightUtil.formatType(expectedType));
    return HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,value,description);
  }
  LOG.error("Unknown annotation member value: " + value);
  return null;
}
