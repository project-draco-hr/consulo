{
  if (elementTypeFields == null)   return true;
  PsiJavaCodeReferenceElement nameRef=annotation.getNameReferenceElement();
  if (nameRef == null) {
    return !strict;
  }
  PsiElement resolved=nameRef.resolve();
  if (!(resolved instanceof PsiClass) || !((PsiClass)resolved).isAnnotationType()) {
    return !strict;
  }
  PsiClass annotationType=(PsiClass)resolved;
  PsiAnnotation target=annotationType.getModifierList().findAnnotation(AnnotationUtil.TARGET_ANNOTATION_FQ_NAME);
  if (target == null) {
    return !strict;
  }
  PsiNameValuePair[] attributes=target.getParameterList().getAttributes();
  if (attributes.length == 0) {
    return !strict;
  }
  PsiAnnotationMemberValue value=attributes[0].getValue();
  LOG.assertTrue(elementTypeFields.length > 0);
  PsiManager manager=annotation.getManager();
  PsiClass elementTypeClass=JavaPsiFacade.getInstance(manager.getProject()).findClass("java.lang.annotation.ElementType",annotation.getResolveScope());
  if (elementTypeClass == null) {
    return !strict;
  }
  for (  String fieldName : elementTypeFields) {
    PsiField field=elementTypeClass.findFieldByName(fieldName,false);
    if (field == null)     continue;
    if (value instanceof PsiArrayInitializerMemberValue) {
      PsiAnnotationMemberValue[] initializers=((PsiArrayInitializerMemberValue)value).getInitializers();
      for (      PsiAnnotationMemberValue initializer : initializers) {
        if (initializer instanceof PsiReferenceExpression) {
          PsiReferenceExpression refExpr=(PsiReferenceExpression)initializer;
          if (refExpr.isReferenceTo(field))           return true;
        }
      }
    }
 else     if (value instanceof PsiReferenceExpression) {
      if (((PsiReferenceExpression)value).isReferenceTo(field))       return true;
    }
  }
  return false;
}
