{
  return type.accept(new PsiTypeVisitor<Boolean>(){
    @Override public Boolean visitType(    PsiType type){
      return !(type instanceof PsiIntersectionType);
    }
    @Override public Boolean visitCapturedWildcardType(    PsiCapturedWildcardType capturedWildcardType){
      return false;
    }
    @Override public Boolean visitWildcardType(    PsiWildcardType wildcardType){
      final PsiType bound=wildcardType.getBound();
      if (bound != null) {
        if (bound instanceof PsiIntersectionType)         return false;
        return bound.accept(this);
      }
      return true;
    }
    @Override public Boolean visitClassType(    PsiClassType classType){
      for (      PsiType psiType : classType.getParameters()) {
        if (!psiType.accept(this)) {
          return false;
        }
      }
      return true;
    }
  }
);
}
