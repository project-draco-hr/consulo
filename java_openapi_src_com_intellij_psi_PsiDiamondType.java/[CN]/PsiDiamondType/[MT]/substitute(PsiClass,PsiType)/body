{
  if (inheritor == null)   return null;
  final JavaPsiFacade facade=JavaPsiFacade.getInstance(inheritor.getProject());
  final PsiResolveHelper resolveHelper=facade.getResolveHelper();
  final PsiClassType.ClassResolveResult resolveResult=PsiUtil.resolveGenericsClassInType(baseType);
  final PsiClass baseClass=resolveResult.getElement();
  if (baseClass == null)   return null;
  PsiSubstitutor superSubstitutor=TypeConversionUtil.getClassSubstitutor(baseClass,inheritor,PsiSubstitutor.EMPTY);
  if (superSubstitutor == null)   return null;
  final PsiSubstitutor baseSubstitutor=resolveResult.getSubstitutor();
  PsiSubstitutor inheritorSubstitutor=PsiSubstitutor.EMPTY;
  for (  PsiTypeParameter inheritorParameter : PsiUtil.typeParametersIterable(inheritor)) {
    for (    PsiTypeParameter baseParameter : PsiUtil.typeParametersIterable(baseClass)) {
      final PsiType substituted=superSubstitutor.substitute(baseParameter);
      PsiType arg=baseSubstitutor.substitute(baseParameter);
      if (arg instanceof PsiWildcardType)       arg=((PsiWildcardType)arg).getExtendsBound();
      PsiType substitution=resolveHelper.getSubstitutionForTypeParameter(inheritorParameter,substituted,arg,true,PsiUtil.getLanguageLevel(inheritor));
      if (PsiType.NULL.equals(substitution) || substitution instanceof PsiWildcardType)       continue;
      if (substitution == null) {
        continue;
      }
      inheritorSubstitutor=inheritorSubstitutor.put(inheritorParameter,substitution);
      break;
    }
  }
  PsiType toAdd=facade.getElementFactory().createType(inheritor,inheritorSubstitutor);
  if (baseType.isAssignableFrom(toAdd)) {
    return toAdd;
  }
  return null;
}
