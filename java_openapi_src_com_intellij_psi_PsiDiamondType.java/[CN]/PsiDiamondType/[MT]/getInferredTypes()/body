{
  final PsiDeclarationStatement declarationStatement=PsiTreeUtil.getParentOfType(myTypeElement,PsiDeclarationStatement.class);
  if (declarationStatement != null) {
    final PsiElement[] declaredElements=declarationStatement.getDeclaredElements();
    if (declaredElements.length > 0 && declaredElements[0] instanceof PsiVariable) {
      return getComponentTypes(((PsiVariable)declaredElements[0]).getType());
    }
  }
  final PsiAssignmentExpression assignmentExpression=PsiTreeUtil.getParentOfType(myTypeElement,PsiAssignmentExpression.class);
  if (assignmentExpression != null) {
    final PsiExpression lExpression=assignmentExpression.getLExpression();
    if (lExpression instanceof PsiReferenceExpression) {
      final PsiElement resolved=((PsiReferenceExpression)lExpression).resolve();
      if (resolved instanceof PsiVariable) {
        return getComponentTypes(((PsiVariable)resolved).getType());
      }
    }
  }
  PsiExpression psiExpression=PsiTreeUtil.getParentOfType(myTypeElement,PsiExpression.class);
  while (psiExpression != null) {
    final PsiElement parent=psiExpression.getParent();
    if (parent instanceof PsiExpression) {
      psiExpression=(PsiExpression)parent;
      continue;
    }
    break;
  }
  if (psiExpression != null) {
    final PsiElement parent=psiExpression.getParent();
    if (parent instanceof PsiExpressionList) {
      final PsiElement parentParent=parent.getParent();
      if (parentParent instanceof PsiCallExpression) {
        final JavaResolveResult resolveResult=((PsiCallExpression)parentParent).resolveMethodGenerics();
        final PsiSubstitutor substitutor=resolveResult.getSubstitutor();
        final PsiElement element=resolveResult.getElement();
        if (element instanceof PsiMethod) {
          final int paramIdx=ArrayUtil.find(((PsiExpressionList)parent).getExpressions(),psiExpression);
          if (paramIdx > -1) {
            final PsiParameter parameter=((PsiMethod)element).getParameterList().getParameters()[paramIdx];
            return getComponentTypes(substitutor.substitute(parameter.getType()));
          }
        }
      }
    }
 else     if (parent instanceof PsiVariable) {
      return getComponentTypes(((PsiVariable)parent).getType());
    }
  }
  return NULL_TYPES;
}
