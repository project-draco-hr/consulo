{
  final StringBuilder buf=new StringBuilder();
  buf.append("public static ");
  buf.append("<");
  buf.append(StringUtil.join(params,new Function<PsiTypeParameter,String>(){
    @Override public String fun(    PsiTypeParameter psiTypeParameter){
      return psiTypeParameter.getName();
    }
  }
,", "));
  buf.append(">");
  final String qualifiedName=containingClass.getQualifiedName();
  buf.append(qualifiedName != null ? qualifiedName : containingClass.getName());
  final PsiTypeParameter[] parameters=containingClass.getTypeParameters();
  buf.append("<");
  buf.append(StringUtil.join(parameters,new Function<PsiTypeParameter,String>(){
    @Override public String fun(    PsiTypeParameter psiTypeParameter){
      return psiTypeParameter.getName();
    }
  }
,", "));
  buf.append("> ");
  String staticFactoryName="staticFactory";
  final JavaCodeStyleManager styleManager=JavaCodeStyleManager.getInstance(containingClass.getProject());
  staticFactoryName=styleManager.suggestUniqueVariableName(staticFactoryName,containingClass,false);
  buf.append(staticFactoryName);
  if (constructor == null) {
    buf.append("()");
  }
 else {
    buf.append("(").append(StringUtil.join(constructor.getParameterList().getParameters(),new Function<PsiParameter,String>(){
      @Override public String fun(      PsiParameter psiParameter){
        return psiParameter.getType().getCanonicalText() + " " + psiParameter.getName();
      }
    }
,",")).append(")");
  }
  buf.append("{}");
  return JavaPsiFacade.getElementFactory(containingClass.getProject()).createMethodFromText(buf.toString(),constructor != null ? constructor : containingClass);
}
