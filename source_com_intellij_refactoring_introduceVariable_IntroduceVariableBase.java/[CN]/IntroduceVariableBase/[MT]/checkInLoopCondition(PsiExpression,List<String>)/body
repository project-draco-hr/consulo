{
  final PsiElement loopForLoopCondition=RefactoringUtil.getLoopForLoopCondition(occurence);
  if (loopForLoopCondition == null)   return;
  final List<PsiVariable> referencedVariables=RefactoringUtil.collectReferencedVariables(occurence);
  final List<PsiVariable> modifiedInBody=new ArrayList<PsiVariable>();
  for (Iterator<PsiVariable> iterator=referencedVariables.iterator(); iterator.hasNext(); ) {
    PsiVariable psiVariable=iterator.next();
    if (RefactoringUtil.isModifiedInScope(psiVariable,loopForLoopCondition)) {
      modifiedInBody.add(psiVariable);
    }
  }
  if (!modifiedInBody.isEmpty()) {
    for (Iterator<PsiVariable> iterator=modifiedInBody.iterator(); iterator.hasNext(); ) {
      PsiVariable variable=iterator.next();
      final String message=ConflictsUtil.getDescription(variable,false) + " is modified in loop body.\n";
      conflicts.add(ConflictsUtil.capitalize(message));
    }
    conflicts.add("Introducing variable may break code logic.");
  }
}
