{
  final Map<AndroidCompilerMessageKind,List<String>> map=new HashMap<AndroidCompilerMessageKind,List<String>>();
  map.put(ERROR,new ArrayList<String>());
  map.put(WARNING,new ArrayList<String>());
  File additionalLibsDir=null;
  try {
    if (additionalNativeLibs.size() > 0) {
      additionalLibsDir=FileUtil.createTempDirectory("android_additional_libs","tmp");
      if (!copyNativeLibs(additionalNativeLibs,additionalLibsDir,map)) {
        return map;
      }
      nativeLibsFolders=ArrayUtil.append(nativeLibsFolders,additionalLibsDir.getPath());
    }
    if (unsigned) {
      return filterUsingKeystoreMessages(finalPackage(dexPath,sourceRoots,externalJars,nativeLibsFolders,finalApk,resPackagePath,customKeystorePath,false,resourceFilter));
    }
    final String zipAlignPath=sdkPath + File.separator + AndroidCommonUtils.toolPath(SdkConstants.FN_ZIPALIGN);
    boolean withAlignment=new File(zipAlignPath).exists();
    String unalignedApk=AndroidCommonUtils.addSuffixToFileName(finalApk,UNALIGNED_SUFFIX);
    Map<AndroidCompilerMessageKind,List<String>> map2=filterUsingKeystoreMessages(finalPackage(dexPath,sourceRoots,externalJars,nativeLibsFolders,withAlignment ? unalignedApk : finalApk,resPackagePath,customKeystorePath,true,resourceFilter));
    map.putAll(map2);
    if (withAlignment && map.get(ERROR).size() == 0) {
      map2=AndroidExecutionUtil.doExecute(zipAlignPath,"-f","4",unalignedApk,finalApk);
      map.putAll(map2);
    }
    return map;
  }
  finally {
    if (additionalLibsDir != null) {
      FileUtil.delete(additionalLibsDir);
    }
  }
}
