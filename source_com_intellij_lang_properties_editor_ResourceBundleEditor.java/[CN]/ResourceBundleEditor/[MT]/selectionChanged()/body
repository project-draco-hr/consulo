{
  myUpdateEditorAlarm.cancelAllRequests();
  myUpdateEditorAlarm.addRequest(new Runnable(){
    public void run(){
      if (!isValid())       return;
      if (myUpdatePsiAlarm.getActiveRequestCount() != 0) {
        myUpdateEditorAlarm.cancelAllRequests();
        myUpdateEditorAlarm.addRequest(this,200);
        return;
      }
      uninstallDocumentListeners();
      try {
        String propertyName=getSelectedPropertyName();
        ((CardLayout)myValuesPanel.getLayout()).show(myValuesPanel,propertyName == null ? "noPropertySelected" : "values");
        if (propertyName == null)         return;
        List<PropertiesFile> propertiesFiles=PropertiesUtil.virtualFilesToProperties(myProject,myResourceBundle.getPropertiesFiles());
        for (        PropertiesFile propertiesFile : propertiesFiles) {
          EditorEx editor=(EditorEx)myEditors.get(propertiesFile);
          reinitSettings(editor);
          editor.setRendererMode(propertyName == null);
          Property property=propertiesFile.findPropertyByKey(propertyName);
          final String value=property == null ? "" : property.getValue();
          final Document document=editor.getDocument();
          CommandProcessor.getInstance().executeCommand(null,new Runnable(){
            public void run(){
              ApplicationManager.getApplication().runWriteAction(new Runnable(){
                public void run(){
                  updateDocumentFromPropertyValue(value,document);
                }
              }
);
            }
          }
,"",this);
          JPanel titledPanel=myTitledPanels.get(propertiesFile);
          ((TitledBorder)titledPanel.getBorder()).setTitleColor(property == null ? Color.red : UIManager.getColor("Label.textForeground"));
          titledPanel.repaint();
        }
      }
  finally {
        installDocumentListeners();
      }
    }
  }
,200);
}
