{
  final PsiMethod methodToRename=(PsiMethod)element;
  findSubmemberHidesMemberCollisions(methodToRename,newName,result);
  findMemberHidesOuterMemberCollisions((PsiMethod)element,newName,result);
  findCollisionsAgainstNewName(methodToRename,newName,result);
  findHidingMethodWithOtherSignature(methodToRename,newName,result);
  final PsiClass containingClass=methodToRename.getContainingClass();
  if (containingClass != null) {
    final PsiMethod patternMethod=(PsiMethod)methodToRename.copy();
    try {
      patternMethod.setName(newName);
      final PsiMethod methodInBaseClass=containingClass.findMethodBySignature(patternMethod,true);
      if (methodInBaseClass != null && methodInBaseClass.getContainingClass() != containingClass) {
        if (methodInBaseClass.hasModifierProperty(PsiModifier.FINAL)) {
          result.add(new UnresolvableCollisionUsageInfo(methodInBaseClass,methodToRename){
            @Override public String getDescription(){
              return "Renaming method will override final \"" + RefactoringUIUtil.getDescription(methodInBaseClass,true) + "\"";
            }
          }
);
        }
      }
    }
 catch (    IncorrectOperationException e) {
      LOG.error(e);
    }
  }
}
