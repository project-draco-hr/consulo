{
  if (myList.getSelectedIndex() == -1)   return false;
  if (getSpeedSearch().isHoldingFilter() && myList.getModel().getSize() == 0)   return false;
  if (myList.getSelectedIndex() == getIndexForShowingChild()) {
    if (myChild != null && !myChild.isVisible())     setIndexForShowingChild(-1);
    return false;
  }
  final Object[] selectedValues=myList.getSelectedValues();
  final ListPopupStep<Object> listStep=getListStep();
  if (!listStep.isSelectable(selectedValues[0]))   return false;
  if ((listStep instanceof MultiSelectionListPopupStep<?> && !((MultiSelectionListPopupStep<Object>)listStep).hasSubstep(Arrays.asList(selectedValues)) || !listStep.hasSubstep(selectedValues[0])) && !handleFinalChoices)   return false;
  disposeChildren();
  if (myListModel.getSize() == 0) {
    setFinalRunnable(myStep.getFinalRunnable());
    setOk(true);
    disposeAllParents(e);
    setIndexForShowingChild(-1);
    return true;
  }
  valuesSelected(selectedValues);
  final AtomicBoolean insideOnChosen=new AtomicBoolean(true);
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    @Override public void run(){
      if (insideOnChosen.get()) {
        LOG.error("Showing dialogs from popup onChosen can result in focus issues. Please put the handler into BaseStep.doFinalStep or PopupStep.getFinalRunnable.");
      }
    }
  }
,ModalityState.any());
  final PopupStep nextStep;
  try {
    if (listStep instanceof MultiSelectionListPopupStep<?>) {
      nextStep=((MultiSelectionListPopupStep<Object>)listStep).onChosen(Arrays.asList(selectedValues),handleFinalChoices);
    }
 else     if (e != null && listStep instanceof ListPopupStepEx<?>) {
      nextStep=((ListPopupStepEx<Object>)listStep).onChosen(selectedValues[0],handleFinalChoices,e.getModifiers());
    }
 else {
      nextStep=listStep.onChosen(selectedValues[0],handleFinalChoices);
    }
  }
  finally {
    insideOnChosen.set(false);
  }
  return handleNextStep(nextStep,selectedValues.length == 1 ? selectedValues[0] : null,e);
}
