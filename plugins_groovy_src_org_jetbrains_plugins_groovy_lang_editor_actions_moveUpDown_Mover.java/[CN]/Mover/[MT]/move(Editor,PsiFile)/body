{
  if (toMove == null || toMove2 == null)   return;
  beforeMove(editor);
  final Document document=editor.getDocument();
  final int start=getLineStartSafeOffset(document,toMove.startLine);
  final int end=getLineStartSafeOffset(document,toMove.endLine);
  range1=document.createRangeMarker(start,end);
  String textToInsert=document.getCharsSequence().subSequence(start,end).toString();
  if (!StringUtil.endsWithChar(textToInsert,'\n'))   textToInsert+='\n';
  final int start2=document.getLineStartOffset(toMove2.startLine);
  final int end2=getLineStartSafeOffset(document,toMove2.endLine);
  String textToInsert2=document.getCharsSequence().subSequence(start2,end2).toString();
  if (!StringUtil.endsWithChar(textToInsert2,'\n'))   textToInsert2+='\n';
  range2=document.createRangeMarker(start2,end2);
  if (range1.getStartOffset() < range2.getStartOffset()) {
    range1.setGreedyToLeft(true);
    range1.setGreedyToRight(false);
    range2.setGreedyToLeft(true);
    range2.setGreedyToRight(true);
  }
 else {
    range1.setGreedyToLeft(true);
    range1.setGreedyToRight(true);
    range2.setGreedyToLeft(true);
    range2.setGreedyToRight(false);
  }
  final CaretModel caretModel=editor.getCaretModel();
  final int caretRelativePos=caretModel.getOffset() - start;
  final SelectionModel selectionModel=editor.getSelectionModel();
  final int selectionStart=selectionModel.getSelectionStart();
  final int selectionEnd=selectionModel.getSelectionEnd();
  final boolean hasSelection=selectionModel.hasSelection();
  caretModel.moveToOffset(0);
  document.insertString(range1.getStartOffset(),textToInsert2);
  document.deleteString(range1.getStartOffset() + textToInsert2.length(),range1.getEndOffset());
  document.insertString(range2.getStartOffset(),textToInsert);
  document.deleteString(range2.getStartOffset() + textToInsert.length(),range2.getEndOffset());
  final Project project=file.getProject();
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  if (hasSelection) {
    restoreSelection(editor,selectionStart,selectionEnd,start,range2.getStartOffset());
  }
  final CodeStyleManager codeStyleManager=CodeStyleManager.getInstance(project);
  caretModel.moveToOffset(range2.getStartOffset() + caretRelativePos);
  afterMove(editor,file);
  editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
}
