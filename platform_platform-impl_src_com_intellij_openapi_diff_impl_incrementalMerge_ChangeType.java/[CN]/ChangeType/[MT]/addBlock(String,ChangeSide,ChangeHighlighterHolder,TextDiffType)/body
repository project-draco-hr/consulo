{
  EditorColorsScheme colorScheme=markup.getEditor().getColorsScheme();
  Color separatorColor=getSeparatorColor(diffType.getLegendColor(colorScheme));
  LineSeparatorRenderer separatorRenderer=new LineSeparatorRenderer(){
    @Override public void drawLine(    Graphics g,    int x1,    int x2,    int y){
      Graphics2D g2=(Graphics2D)g;
      if (myApplied) {
        UIUtil.drawBoldDottedLine(g2,x1,x2,y,g2.getBackground(),g2.getColor(),false);
      }
 else {
        UIUtil.drawDottedLine(g2,x1,y,x2,y,g2.getBackground(),g2.getColor());
      }
    }
  }
;
  int length=text.length();
  int start=changeSide.getStart();
  int end=start + length;
  RangeHighlighter highlighter=markup.addRangeHighlighter(start,end,LAYER,diffType,HighlighterTargetArea.EXACT_RANGE);
  if (highlighter != null) {
    highlighter.setLineSeparatorPlacement(SeparatorPlacement.TOP);
    highlighter.setLineSeparatorColor(separatorColor);
    highlighter.setLineSeparatorRenderer(separatorRenderer);
    highlighter.setLineMarkerRenderer(LineRenderer.top());
  }
  if (text.charAt(length - 1) == '\n') {
    end--;
  }
  highlighter=markup.addRangeHighlighter(start,end,LAYER,TextDiffType.NONE,HighlighterTargetArea.EXACT_RANGE);
  if (highlighter != null) {
    highlighter.setLineSeparatorPlacement(SeparatorPlacement.BOTTOM);
    highlighter.setLineSeparatorColor(separatorColor);
    highlighter.setLineSeparatorRenderer(separatorRenderer);
    highlighter.setLineMarkerRenderer(LineRenderer.bottom());
  }
  return highlighter;
}
