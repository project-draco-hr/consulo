{
  final MyElement rootElement=createDomFile("a.xml","<root xmlns:xi=\"http://www.w3.org/2001/XInclude\">" + "<xi:include href=\"b.xml\" xpointer=\"xpointer(/xxx/*)\"/>" + "</root>");
  final String textB="<xxx><boy/><xi:include href=\"c.xml\" xpointer=\"xpointer(/xxx/*)\"/><child/><xi:include href=\"c.xml\" xpointer=\"xpointer(/xxx/*)\"/></xxx>";
  final PsiFile fileB=createFile("b.xml",textB);
  final String textC="<xxx><child/><xi:include href=\"d.xml\" xpointer=\"xpointer(/xxx/*)\"/><boy/><xi:include href=\"d.xml\" xpointer=\"xpointer(/xxx/*)\"/></xxx>";
  final PsiFile fileC=createFile("c.xml",textC);
  final String textD="<xxx><boy/><xi:include href=\"e.xml\" xpointer=\"xpointer(/xxx/*)\"/><child/><xi:include href=\"e.xml\" xpointer=\"xpointer(/xxx/*)\"/></xxx>";
  final PsiFile fileD=createFile("d.xml",textD);
  final String textE="<xxx><boy/><child/><boy/><child/><boy/><child/><boy/><child/><boy/><child/><boy/><child/></xxx>";
  final PsiFile fileE=createFile("e.xml",textE);
  final int threadCount=100;
  final int iterationCount=Timings.adjustAccordingToMySpeed(100,true);
  System.out.println("iterationCount = " + iterationCount);
  final CountDownLatch finished=new CountDownLatch(threadCount);
  final AtomicReference<Exception> ex=new AtomicReference<Exception>();
  for (int j=0; j < threadCount; j++) {
    JobLauncher.getInstance().submitToJobThread(0,new Runnable(){
      @Override public void run(){
        try {
          for (int k=0; k < iterationCount; k++) {
            ApplicationManager.getApplication().runReadAction(new Runnable(){
              public void run(){
                final List<Boy> boys=rootElement.getBoys();
                Thread.yield();
                final List<Child> children=rootElement.getChildren();
                Thread.yield();
                assertEquals(boys,rootElement.getBoys());
                assertEquals(children,rootElement.getChildren());
              }
            }
);
            Thread.yield();
          }
        }
 catch (        Exception e) {
          ex.set(e);
        }
 finally {
          finished.countDown();
        }
      }
    }
);
  }
  for (int i=0; i < iterationCount; i++) {
    ApplicationManager.getApplication().runWriteAction(new Runnable(){
      public void run(){
        fileB.getViewProvider().getDocument().insertString(0," ");
        fileD.getViewProvider().getDocument().insertString(0," ");
        PsiDocumentManager.getInstance(getProject()).commitAllDocuments();
      }
    }
);
    Thread.sleep(10);
    ApplicationManager.getApplication().runWriteAction(new Runnable(){
      public void run(){
        fileC.getViewProvider().getDocument().insertString(0," ");
        fileE.getViewProvider().getDocument().insertString(0," ");
        PsiDocumentManager.getInstance(getProject()).commitAllDocuments();
      }
    }
);
    Thread.sleep(10);
    ApplicationManager.getApplication().runWriteAction(new Runnable(){
      public void run(){
        fileB.getViewProvider().getDocument().setText(textB);
        fileC.getViewProvider().getDocument().setText(textC);
        fileD.getViewProvider().getDocument().setText(textD);
        fileE.getViewProvider().getDocument().setText(textE);
        PsiDocumentManager.getInstance(getProject()).commitAllDocuments();
      }
    }
);
  }
  finished.await();
  final Exception exception=ex.get();
  if (exception != null) {
    throw exception;
  }
}
