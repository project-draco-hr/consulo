{
  final ShareDialog shareDialog=new ShareDialog(project,file.getName());
  shareDialog.show();
  final String parent=shareDialog.getSelectedURL();
  if (shareDialog.isOK() && parent != null) {
    final Ref<Boolean> actionStarted=new Ref<Boolean>(Boolean.TRUE);
    final SVNException[] error=new SVNException[1];
    ExclusiveBackgroundVcsAction.run(project,new Runnable(){
      public void run(){
        ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
          public void run(){
            try {
              final ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
              final File path=new File(file.getPath());
              if (!SvnCheckoutProvider.promptForWCFormatAndSelect(path,project)) {
                actionStarted.set(Boolean.FALSE);
                return;
              }
              final SVNURL parenUrl=SVNURL.parseURIEncoded(parent);
              final SVNURL checkoutUrl;
              final SVNRevision revision;
              final ShareDialog.ShareTarget shareTarget=shareDialog.getShareTarget();
              if (ShareDialog.ShareTarget.useSelected.equals(shareTarget)) {
                checkoutUrl=parenUrl;
                revision=SVNRevision.HEAD;
              }
 else               if (ShareDialog.ShareTarget.useProjectName.equals(shareTarget)) {
                final Pair<SVNRevision,SVNURL> pair=createRemoteFolder(activeVcs,parenUrl,file.getName());
                revision=pair.getFirst();
                checkoutUrl=pair.getSecond();
              }
 else {
                final Pair<SVNRevision,SVNURL> pair=createRemoteFolder(activeVcs,parenUrl,file.getName());
                final Pair<SVNRevision,SVNURL> trunkPair=createRemoteFolder(activeVcs,pair.getSecond(),"trunk");
                checkoutUrl=trunkPair.getSecond();
                revision=trunkPair.getFirst();
                if (shareDialog.createStandardStructure()) {
                  createRemoteFolder(activeVcs,pair.getSecond(),"branches");
                  createRemoteFolder(activeVcs,pair.getSecond(),"tags");
                }
              }
              if (indicator != null) {
                indicator.checkCanceled();
                indicator.setText(SvnBundle.message("share.directory.checkout.back.progress.text",checkoutUrl.toString()));
              }
              activeVcs.createUpdateClient().doCheckout(checkoutUrl,path,SVNRevision.UNDEFINED,revision,true);
              SvnWorkingCopyFormatHolder.setPresetFormat(null);
              addRecursively(activeVcs,file);
            }
 catch (            SVNException e) {
              error[0]=e;
            }
 finally {
              activeVcs.invokeRefreshSvnRoots(true);
              SvnWorkingCopyFormatHolder.setPresetFormat(null);
            }
          }
        }
,SvnBundle.message("share.directory.title"),true,project);
      }
    }
);
    if (Boolean.TRUE.equals(actionStarted.get())) {
      if (error[0] != null) {
        throw new VcsException(error[0].getMessage());
      }
      Messages.showInfoMessage(project,SvnBundle.message("share.directory.info.message",file.getName()),SvnBundle.message("share.directory.title"));
    }
    return true;
  }
  return false;
}
