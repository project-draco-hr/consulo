{
  ShareDialog shareDialog=new ShareDialog(project);
  shareDialog.show();
  final String parent=shareDialog.getSelectedURL();
  if (shareDialog.isOK() && parent != null) {
    final SVNException[] error=new SVNException[1];
    ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
      public void run(){
        try {
          SVNURL url=SVNURL.parseURIEncoded(parent).appendPath(file.getName(),false);
          SVNCommitInfo info=activeVcs.createCommitClient().doMkDir(new SVNURL[]{url},SvnBundle.message("share.directory.commit.message",file.getName()));
          SVNRevision revision=SVNRevision.create(info.getNewRevision());
          final File path=new File(file.getPath());
          SvnCheckoutProvider.promptForWCopyFormat(path,project);
          activeVcs.createUpdateClient().doCheckout(url,path,SVNRevision.UNDEFINED,revision,true);
          SvnWorkingCopyFormatHolder.setPresetFormat(null);
          activeVcs.createWCClient().doAdd(new File(file.getPath()),true,false,false,true);
        }
 catch (        SVNException e) {
          error[0]=e;
        }
 finally {
          SvnWorkingCopyFormatHolder.setPresetFormat(null);
        }
      }
    }
,SvnBundle.message("share.directory.title"),false,project);
    if (error[0] != null) {
      throw new VcsException(error[0].getMessage());
    }
    Messages.showInfoMessage(project,SvnBundle.message("share.directory.info.message",file.getName()),SvnBundle.message("share.directory.title"));
  }
}
