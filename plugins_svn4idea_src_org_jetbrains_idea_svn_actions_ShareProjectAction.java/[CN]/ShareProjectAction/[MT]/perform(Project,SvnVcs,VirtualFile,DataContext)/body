{
  ShareDialog shareDialog=new ShareDialog(project);
  shareDialog.show();
  final String parent=shareDialog.getSelectedURL();
  if (shareDialog.isOK() && parent != null) {
    final Ref<Boolean> actionStarted=new Ref<Boolean>(Boolean.TRUE);
    final SVNException[] error=new SVNException[1];
    ExclusiveBackgroundVcsAction.run(project,new Runnable(){
      public void run(){
        ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
          public void run(){
            try {
              final File path=new File(file.getPath());
              if (!SvnCheckoutProvider.promptForWCopyFormat(path,project)) {
                actionStarted.set(Boolean.FALSE);
                return;
              }
              SVNURL url=SVNURL.parseURIEncoded(parent).appendPath(file.getName(),false);
              SVNCommitInfo info=activeVcs.createCommitClient().doMkDir(new SVNURL[]{url},SvnBundle.message("share.directory.commit.message",file.getName(),ApplicationNamesInfo.getInstance().getFullProductName()));
              SVNRevision revision=SVNRevision.create(info.getNewRevision());
              activeVcs.createUpdateClient().doCheckout(url,path,SVNRevision.UNDEFINED,revision,true);
              SvnWorkingCopyFormatHolder.setPresetFormat(null);
              addRecursively(activeVcs,file);
            }
 catch (            SVNException e) {
              error[0]=e;
            }
 finally {
              SvnWorkingCopyFormatHolder.setPresetFormat(null);
            }
          }
        }
,SvnBundle.message("share.directory.title"),false,project);
      }
    }
);
    if (Boolean.TRUE.equals(actionStarted.get())) {
      if (error[0] != null) {
        throw new VcsException(error[0].getMessage());
      }
      Messages.showInfoMessage(project,SvnBundle.message("share.directory.info.message",file.getName()),SvnBundle.message("share.directory.title"));
    }
  }
}
