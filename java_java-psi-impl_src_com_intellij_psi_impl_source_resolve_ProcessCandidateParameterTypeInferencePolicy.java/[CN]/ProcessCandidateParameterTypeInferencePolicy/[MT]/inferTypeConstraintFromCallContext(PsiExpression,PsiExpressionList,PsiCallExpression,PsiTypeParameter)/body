{
  PsiExpression[] expressions=expressionList.getExpressions();
  int i=ArrayUtil.find(expressions,innerMethodCall);
  if (i < 0)   return null;
  final MethodCandidatesProcessor processor=new MethodCandidatesProcessor(contextCall);
  try {
    PsiScopesUtil.setupAndRunProcessor(processor,contextCall,false);
    final JavaResolveResult[] results=processor.getResult();
    PsiMethod owner=(PsiMethod)typeParameter.getOwner();
    if (owner == null)     return null;
    final PsiType innerReturnType=owner.getReturnType();
    for (    final JavaResolveResult result : results) {
      final PsiSubstitutor substitutor;
      if (result instanceof MethodCandidateInfo) {
        List<PsiExpression> leftArgs=Arrays.asList(expressions).subList(0,i);
        substitutor=((MethodCandidateInfo)result).inferTypeArguments(this,leftArgs.toArray(new PsiExpression[leftArgs.size()]));
      }
 else {
        substitutor=result.getSubstitutor();
      }
      final PsiElement element=result.getElement();
      if (element instanceof PsiMethod) {
        final PsiMethod method=(PsiMethod)element;
        final PsiParameter[] parameters=method.getParameterList().getParameters();
        PsiParameter parameter=null;
        if (parameters.length > i) {
          parameter=parameters[i];
        }
 else         if (method.isVarArgs()) {
          parameter=parameters[parameters.length - 1];
        }
        if (parameter != null) {
          final PsiParameter finalParameter=parameter;
          PsiType type=PsiResolveHelper.ourGuard.doPreventingRecursion(innerMethodCall,true,new Computable<PsiType>(){
            @Override public PsiType compute(){
              return substitutor.substitute(finalParameter.getType());
            }
          }
);
          final Pair<PsiType,ConstraintType> constraint=PsiResolveHelperImpl.getSubstitutionForTypeParameterConstraint(typeParameter,innerReturnType,type,false,PsiUtil.getLanguageLevel(innerMethodCall));
          if (constraint != null)           return constraint;
        }
      }
    }
  }
 catch (  MethodProcessorSetupFailedException ev) {
    return null;
  }
  return null;
}
