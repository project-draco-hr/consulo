{
  PsiExpression[] expressions=expressionList.getExpressions();
  int i=ArrayUtil.find(expressions,innerMethodCall);
  if (i < 0)   return null;
  PsiMethod owner=(PsiMethod)typeParameter.getOwner();
  if (owner == null)   return null;
  try {
    final Map<JavaResolveResult,PsiSubstitutor> results=getCachedResults(contextCall);
    final PsiType innerReturnType=owner.getReturnType();
    for (    final JavaResolveResult result : results.keySet()) {
      final PsiSubstitutor subst=results.get(result);
      final PsiSubstitutor substitutor;
      if (subst == PsiSubstitutor.UNKNOWN) {
        if (result instanceof MethodCandidateInfo) {
          List<PsiExpression> leftArgs=Arrays.asList(expressions).subList(0,i);
          substitutor=((MethodCandidateInfo)result).inferTypeArguments(this,leftArgs.toArray(new PsiExpression[leftArgs.size()]));
        }
 else {
          substitutor=result.getSubstitutor();
        }
        results.put(result,substitutor);
      }
 else {
        substitutor=subst;
      }
      final Pair<PsiType,ConstraintType> constraint=inferConstraint(typeParameter,innerMethodCall,i,innerReturnType,result,substitutor);
      if (constraint != null)       return constraint;
    }
  }
 catch (  MethodProcessorSetupFailedException ev) {
    return null;
  }
  return null;
}
