{
  if (myRefExpr.getQualifierExpression() != null)   return ResolveResult.EMPTY_ARRAY;
  PsiFile file=myRefExpr.getContainingFile();
  if (!GantUtils.isGantScriptFile(file))   return ResolveResult.EMPTY_ARRAY;
  ArrayList<ResolveResult> res=new ArrayList<ResolveResult>();
  final GroovyFile groovyFile=(GroovyFile)file;
  for (  GrArgumentLabel label : GantUtils.getScriptTargets(groovyFile)) {
    if (label.getName().equals(myRefExpr.getName())) {
      res.add(new GroovyResolveResultImpl(label,true));
    }
  }
  final Project project=groovyFile.getProject();
  final JavaPsiFacade facade=JavaPsiFacade.getInstance(myRefExpr.getProject());
  final PsiClass taskClass=facade.findClass(AntTasksProvider.ANT_TASK_CLASS,GlobalSearchScope.allScope(project));
  final String name=myRefExpr.getName();
  if (name != null && taskClass != null) {
    final Set<String> tasks=AntTasksProvider.getInstance(project).getAntTasks();
    final String capitalized=StringUtil.capitalize(name);
    if (tasks.contains(capitalized)) {
      final PsiClass[] classes=facade.getShortNamesCache().getClassesByName(capitalized,GlobalSearchScope.allScope(project));
      for (      PsiClass clazz : classes) {
        if (clazz.isInheritor(taskClass,true)) {
          res.add(new GroovyResolveResultImpl(clazz,true));
        }
      }
    }
  }
  return res.toArray(new ResolveResult[res.size()]);
}
