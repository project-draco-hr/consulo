{
  return new PerformAction(){
    public void performAction(    VirtualFile rootDir,    VirtualFile rootAfter) throws Exception {
      final VirtualFile projectFile=rootDir.findChild(projectName + ProjectFileType.DOT_DEFAULT_EXTENSION);
      final ExpandMacroToPathMap macros=new ExpandMacroToPathMap();
      macros.addMacroExpand(PathMacrosImpl.PROJECT_DIR_MACRO_NAME,rootDir.getPath());
      macros.addMacroExpand(PathMacrosImpl.MODULE_DIR_MACRO_NAME,rootDir.getPath());
      final Document projectDocument=JDOMUtil.loadDocument(VfsUtil.loadText(projectFile));
      macros.substitute(projectDocument.getRootElement(),true);
      Convertor34.execute(projectDocument.getRootElement(),projectFile.getPath(),null);
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        public void run(){
          LocalFileSystem.getInstance().refresh(false);
        }
      }
);
      final VirtualFile moduleFile=rootDir.findChild(projectName + ModuleFileType.DOT_DEFAULT_EXTENSION);
      assertNotNull(moduleFile);
      final Document moduleDocument=JDOMUtil.loadDocument(VfsUtil.loadText(moduleFile));
      macros.substitute(moduleDocument.getRootElement(),true);
      final Document goldenProjectDocument=JDOMUtil.loadDocument(VfsUtil.loadText(rootAfter.findChild(projectName + ProjectFileType.DOT_DEFAULT_EXTENSION)));
      macros.substitute(goldenProjectDocument.getRootElement(),true);
      final Document goldenModuleDocument=JDOMUtil.loadDocument(VfsUtil.loadText(rootAfter.findChild(projectName + ModuleFileType.DOT_DEFAULT_EXTENSION)));
      macros.substitute(goldenModuleDocument.getRootElement(),true);
      assertConfigsEqual("ProjectModuleManager",goldenProjectDocument,projectDocument);
      assertConfigsEqual("NewModuleRootManager",goldenModuleDocument,moduleDocument);
    }
  }
;
}
