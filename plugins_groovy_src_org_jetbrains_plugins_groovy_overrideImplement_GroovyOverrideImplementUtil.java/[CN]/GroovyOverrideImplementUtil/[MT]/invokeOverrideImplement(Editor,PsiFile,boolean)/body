{
  final int offset=editor.getCaretModel().getOffset();
  final GrTypeDefinition aClass=PsiTreeUtil.findElementOfClassAtOffset(file,offset,GrTypeDefinition.class,false);
  if (aClass == null) {
    return;
  }
  if (isImplement && aClass.isInterface())   return;
  Collection<CandidateInfo> candidates=getMethodsToOverrideImplement(aClass,isImplement);
  Collection<CandidateInfo> secondary=isImplement ? Collections.<CandidateInfo>emptyList() : getMethodsToOverrideImplement(aClass,!isImplement);
  cleanGroovyObjectMethods(candidates);
  cleanGroovyObjectMethods(secondary);
  MemberChooser<PsiMethodMember> chooser=OverrideImplementUtil.showOverrideImplementChooser(editor,aClass,isImplement,candidates,secondary);
  if (chooser == null)   return;
  final List<PsiMethodMember> selectedElements=chooser.getSelectedElements();
  if (selectedElements == null || selectedElements.size() == 0)   return;
  for (  PsiMethodMember methodMember : selectedElements) {
    generateImplementation(editor,file,aClass,methodMember.getElement(),methodMember.getSubstitutor());
  }
}
