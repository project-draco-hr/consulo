{
  myContext=context;
  mySet.addAll(restrictedNames);
  PropertyResolverProcessor processor=new PropertyResolverProcessor(null,myContext);
  ResolveUtil.treeWalkUp(myContext,processor,true);
  final GroovyResolveResult[] results=processor.getCandidates();
  for (  GroovyResolveResult result : results) {
    final PsiElement element=result.getElement();
    if (element instanceof PsiNamedElement && (includeFields || !(element instanceof PsiField))) {
      mySet.add(((PsiNamedElement)element).getName());
    }
  }
  context.accept(new GroovyRecursiveElementVisitor(){
    @Override public void visitVariable(    GrVariable variable){
      mySet.add(variable.getName());
    }
    @Override public void visitClosure(    GrClosableBlock closure){
      if (checkIntoInner) {
        super.visitClosure(closure);
      }
    }
    @Override public void visitTypeDefinition(    GrTypeDefinition typeDefinition){
      if (checkIntoInner && !typeDefinition.hasModifierProperty(PsiModifier.STATIC)) {
        super.visitTypeDefinition(typeDefinition);
      }
    }
  }
);
}
