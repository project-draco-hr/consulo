{
  DefaultMutableTreeNode defaultMutableTreeNode=(DefaultMutableTreeNode)root;
  final Object userObject=defaultMutableTreeNode.getUserObject();
  String nodeText;
  if (userObject != null) {
    nodeText=toString(userObject,null);
  }
 else {
    nodeText=String.valueOf(defaultMutableTreeNode);
  }
  if (nodePrintCondition != null && !nodePrintCondition.value(nodeText))   return;
  boolean expanded=tree.isExpanded(new TreePath(defaultMutableTreeNode.getPath()));
  final StringBuilder buff=StringBuilderSpinAllocator.alloc();
  try {
    StringUtil.repeatSymbol(buff,' ',level);
    if (expanded && !defaultMutableTreeNode.isLeaf()) {
      buff.append("-");
    }
    if (!expanded && !defaultMutableTreeNode.isLeaf()) {
      buff.append("+");
    }
    final boolean selected=tree.getSelectionModel().isPathSelected(new TreePath(defaultMutableTreeNode.getPath()));
    if (withSelection && selected) {
      buff.append("[");
    }
    buff.append(nodeText);
    if (withSelection && selected) {
      buff.append("]");
    }
    strings.add(buff.toString());
    int childCount=tree.getModel().getChildCount(root);
    if (expanded) {
      for (int i=0; i < childCount; i++) {
        printImpl(tree,tree.getModel().getChild(root,i),strings,level + 1,withSelection,nodePrintCondition);
      }
    }
  }
  finally {
    StringBuilderSpinAllocator.dispose(buff);
  }
}
