{
  try {
    assertJarFilesEqual(VfsUtilCore.virtualToIoFile(fileAfter),VfsUtilCore.virtualToIoFile(fileBefore));
  }
 catch (  IOException e) {
    FileDocumentManager manager=FileDocumentManager.getInstance();
    Document docBefore=manager.getDocument(fileBefore);
    boolean canLoadBeforeText=!fileBefore.getFileType().isBinary() || fileBefore.getFileType() == UnknownFileType.INSTANCE;
    String textB=docBefore != null ? docBefore.getText() : !canLoadBeforeText ? null : LoadTextUtil.getTextByBinaryPresentation(fileBefore.contentsToByteArray(false),fileBefore).toString();
    Document docAfter=manager.getDocument(fileAfter);
    boolean canLoadAfterText=!fileBefore.getFileType().isBinary() || fileBefore.getFileType() == UnknownFileType.INSTANCE;
    String textA=docAfter != null ? docAfter.getText() : !canLoadAfterText ? null : LoadTextUtil.getTextByBinaryPresentation(fileAfter.contentsToByteArray(false),fileAfter).toString();
    if (textA != null && textB != null) {
      assertEquals(fileAfter.getPath(),textA,textB);
    }
 else {
      Assert.assertArrayEquals(fileAfter.getPath(),fileAfter.contentsToByteArray(),fileBefore.contentsToByteArray());
    }
  }
}
