{
  final Graph<Chunk<Module>> graph=toChunkGraph(moduleGraph);
  final List<Chunk<Module>> chunks=new ArrayList<Chunk<Module>>(moduleGraph.getNodes().size());
  for (Iterator<Chunk<Module>> it=graph.getNodes().iterator(); it.hasNext(); ) {
    chunks.add(it.next());
  }
  DFSTBuilder<Chunk<Module>> builder=new DFSTBuilder<Chunk<Module>>(graph);
  if (!builder.isAcyclic()) {
    LOG.error("Acyclic graph expected");
    return null;
  }
  Collections.sort(chunks,builder.comparator());
  if (LOG.isDebugEnabled()) {
    LOG.debug("---Sorted module chunks:");
    logChunks(chunks);
  }
  final Set<Module> modulesSet=new HashSet<Module>(Arrays.asList(modules));
  for (Iterator<Chunk<Module>> it=chunks.iterator(); it.hasNext(); ) {
    final Chunk<Module> chunk=it.next();
    if (!intersects(chunk.getNodes(),modulesSet)) {
      it.remove();
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("---Chunks to be processed:");
    logChunks(chunks);
  }
  return chunks;
}
