{
  Disposer.register(this,myPreviewPanel);
  myToolWindowManager=toolWindowManager;
  mySettings=AndroidLayoutPreviewToolWindowSettings.getInstance(project);
  final GridBagConstraints gb=new GridBagConstraints();
  gb.fill=GridBagConstraints.HORIZONTAL;
  gb.anchor=GridBagConstraints.CENTER;
  gb.insets=new Insets(0,2,2,2);
  gb.gridy=0;
  gb.weightx=1;
  gb.gridx=0;
  gb.gridwidth=1;
  myDevicesCombo=new ComboBox();
  myComboPanel.add(myDevicesCombo,gb);
  gb.gridx++;
  myDeviceConfigurationsCombo=new ComboBox();
  myComboPanel.add(myDeviceConfigurationsCombo,gb);
  gb.gridx++;
  myTargetCombo=new ComboBox();
  myComboPanel.add(myTargetCombo,gb);
  gb.gridx=0;
  gb.gridy++;
  myLocaleCombo=new ComboBox();
  myComboPanel.add(myLocaleCombo,gb);
  gb.gridx++;
  myDockModeCombo=new ComboBox();
  myComboPanel.add(myDockModeCombo,gb);
  gb.gridx++;
  myNightCombo=new ComboBox();
  myComboPanel.add(myNightCombo,gb);
  myDevicesCombo.setRenderer(new ListCellRendererWrapper(myDevicesCombo.getRenderer()){
    @Override public void customize(    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      if (value instanceof LayoutDevice) {
        final LayoutDevice device=(LayoutDevice)value;
        setText(device.getName());
      }
 else       if (index == -1 || !CUSTOM_DEVICE_STRING.equals(value)) {
        setText("<html><font color='red'>[none]</font></html>");
      }
    }
  }
);
  myDeviceConfigurationsCombo.setRenderer(new ListCellRendererWrapper(myDeviceConfigurationsCombo.getRenderer()){
    @Override public void customize(    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      if (value instanceof LayoutDeviceConfiguration) {
        final LayoutDeviceConfiguration deviceConfiguration=(LayoutDeviceConfiguration)value;
        setText(deviceConfiguration.getName());
      }
 else {
        setText("<html><font color='red'>[none]</font></html>");
      }
    }
  }
);
  myDevicesCombo.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final Object selectedItem=myDevicesCombo.getSelectedItem();
      if (selectedItem instanceof LayoutDevice) {
        updateDeviceConfigurations((LayoutDevice)selectedItem);
        saveState();
        myToolWindowManager.render();
      }
    }
  }
);
  myDevicesCombo.addItemListener(new ItemListener(){
    private LayoutDevice myPrevDevice=null;
    @Override public void itemStateChanged(    ItemEvent e){
      final Object item=e.getItem();
      if (item instanceof LayoutDevice) {
        if (e.getStateChange() == ItemEvent.DESELECTED) {
          myPrevDevice=(LayoutDevice)item;
        }
      }
 else       if (e.getStateChange() == ItemEvent.SELECTED) {
        if (myPrevDevice != null) {
          myDevicesCombo.setSelectedItem(myPrevDevice);
        }
 else         if (myDevices.size() > 0) {
          myDevicesCombo.setSelectedItem(myDevices.get(0));
        }
        ApplicationManager.getApplication().invokeLater(new Runnable(){
          @Override public void run(){
            final LayoutDeviceConfiguration selectedConfig=getSelectedDeviceConfiguration();
            final LayoutDeviceConfiguration configToSelectInDialog=selectedConfig != null && selectedConfig.getDevice().getType() == LayoutDevice.Type.CUSTOM ? selectedConfig : null;
            final LayoutDeviceConfigurationsDialog dialog=new LayoutDeviceConfigurationsDialog(project,configToSelectInDialog,myLayoutDeviceManager);
            dialog.show();
            if (dialog.getExitCode() == DialogWrapper.OK_EXIT_CODE) {
              myLayoutDeviceManager.saveUserDevices();
            }
            final AndroidPlatform platform=myFile != null ? getPlatform(myFile) : null;
            updateDevicesAndTargets(platform);
            final String selectedDeviceName=dialog.getSelectedDeviceName();
            if (selectedDeviceName != null) {
              final LayoutDevice selectedDevice=findDeviceByName(selectedDeviceName);
              if (selectedDevice != null) {
                myDevicesCombo.setSelectedItem(selectedDevice);
              }
            }
            final String selectedDeviceConfigName=dialog.getSelectedDeviceConfigName();
            if (selectedDeviceConfigName != null) {
              final LayoutDeviceConfiguration selectedDeviceConfig=findDeviceConfigByName(selectedDeviceConfigName);
              if (selectedDeviceConfig != null) {
                myDeviceConfigurationsCombo.setSelectedItem(selectedDeviceConfig);
              }
            }
          }
        }
);
      }
    }
  }
);
  final DefaultActionGroup actionGroup=new DefaultActionGroup();
  actionGroup.add(new MyZoomToFitAction());
  actionGroup.add(new MyZoomActualAction());
  actionGroup.add(new MyZoomInAction());
  actionGroup.add(new MyZoomOutAction());
  actionGroup.add(new MyRefreshAction());
  myActionToolBar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,actionGroup,true);
  myActionToolBar.setReservePlaceAutoPopupIcon(false);
  final DefaultActionGroup optionsGroup=new DefaultActionGroup();
  final ActionToolbar optionsToolBar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,optionsGroup,true);
  optionsToolBar.setReservePlaceAutoPopupIcon(false);
  optionsToolBar.setSecondaryActionsTooltip("Options");
  optionsGroup.addAction(new CheckboxAction("Hide for non-layout files"){
    @Override public boolean isSelected(    AnActionEvent e){
      return mySettings.getGlobalState().isHideForNonLayoutFiles();
    }
    @Override public void setSelected(    AnActionEvent e,    boolean state){
      mySettings.getGlobalState().setHideForNonLayoutFiles(state);
    }
  }
).setAsSecondary(true);
  gb.gridx=0;
  gb.gridy++;
  final JComponent toolbar=myActionToolBar.getComponent();
  final JPanel toolBarWrapper=new JPanel(new BorderLayout());
  toolBarWrapper.add(toolbar,BorderLayout.CENTER);
  toolBarWrapper.setPreferredSize(new Dimension(10,toolbar.getMinimumSize().height));
  toolBarWrapper.setMinimumSize(new Dimension(10,toolbar.getMinimumSize().height));
  final JPanel fullToolbarComponent=new JPanel(new BorderLayout());
  fullToolbarComponent.add(toolBarWrapper,BorderLayout.CENTER);
  fullToolbarComponent.add(optionsToolBar.getComponent(),BorderLayout.EAST);
  myComboPanel.add(fullToolbarComponent,gb);
  gb.fill=GridBagConstraints.HORIZONTAL;
  myThemeCombo=new ComboBox();
  gb.gridx++;
  gb.gridwidth=2;
  myComboPanel.add(myThemeCombo,gb);
  myContentPanel.addComponentListener(new ComponentListener(){
    @Override public void componentResized(    ComponentEvent e){
      myPreviewPanel.updateImageSize();
    }
    @Override public void componentMoved(    ComponentEvent e){
    }
    @Override public void componentShown(    ComponentEvent e){
    }
    @Override public void componentHidden(    ComponentEvent e){
    }
  }
);
  myScrollPane.getHorizontalScrollBar().setUnitIncrement(5);
  myScrollPane.getVerticalScrollBar().setUnitIncrement(5);
  myDockModeCombo.setModel(new DefaultComboBoxModel(UiMode.values()));
  myDockModeCombo.setRenderer(new ListCellRendererWrapper(myDockModeCombo.getRenderer()){
    @Override public void customize(    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      setText(((UiMode)value).getLongDisplayValue());
    }
  }
);
  final ActionListener defaultComboListener=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      saveState();
      myToolWindowManager.render();
    }
  }
;
  myNightCombo.setModel(new DefaultComboBoxModel(NightMode.values()));
  myNightCombo.setRenderer(new ListCellRendererWrapper(myNightCombo.getRenderer()){
    @Override public void customize(    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      setText(((NightMode)value).getLongDisplayValue());
    }
  }
);
  myTargetCombo.setRenderer(new ListCellRendererWrapper(myTargetCombo.getRenderer()){
    @Override public void customize(    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      if (value instanceof IAndroidTarget) {
        final IAndroidTarget target=(IAndroidTarget)value;
        setText(target.getName());
      }
 else {
        setText("<html><font color='red'>[none]</font></html>");
      }
    }
  }
);
  myTargetCombo.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      updateThemes();
      saveState();
      myToolWindowManager.render();
    }
  }
);
  myThemeCombo.addItemListener(new ItemListener(){
    private ThemeData myPrevThemeData;
    @Override public void itemStateChanged(    ItemEvent e){
      final Object item=e.getItem();
      if (item instanceof ThemeData) {
        if (e.getStateChange() == ItemEvent.DESELECTED) {
          myPrevThemeData=(ThemeData)item;
        }
      }
 else       if (e.getStateChange() == ItemEvent.SELECTED && myPrevThemeData != null) {
        myThemeCombo.setSelectedItem(myPrevThemeData);
      }
    }
  }
);
  myDeviceConfigurationsCombo.addActionListener(defaultComboListener);
  myDockModeCombo.addActionListener(defaultComboListener);
  myNightCombo.addActionListener(defaultComboListener);
  myLocaleCombo.addActionListener(defaultComboListener);
  myThemeCombo.addActionListener(defaultComboListener);
  myDeviceConfigurationsCombo.setMinimumAndPreferredWidth(10);
  myDockModeCombo.setMinimumAndPreferredWidth(10);
  myNightCombo.setMinimumAndPreferredWidth(10);
  myDevicesCombo.setMinimumAndPreferredWidth(10);
  myTargetCombo.setMinimumAndPreferredWidth(10);
  myLocaleCombo.setMinimumAndPreferredWidth(10);
  myThemeCombo.setMinimumAndPreferredWidth(10);
  myDevicesCombo.setMaximumRowCount(20);
  myThemeCombo.setMaximumRowCount(20);
}
