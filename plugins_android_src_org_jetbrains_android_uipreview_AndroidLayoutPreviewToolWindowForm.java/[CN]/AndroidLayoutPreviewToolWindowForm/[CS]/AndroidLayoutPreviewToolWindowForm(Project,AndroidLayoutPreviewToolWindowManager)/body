{
  myToolWindowManager=toolWindowManager;
  mySettings=AndroidLayoutPreviewToolWindowSettings.getInstance(project);
  final GridBagConstraints gb=new GridBagConstraints();
  gb.fill=GridBagConstraints.HORIZONTAL;
  gb.anchor=GridBagConstraints.CENTER;
  gb.insets=new Insets(0,2,2,2);
  gb.gridy=0;
  gb.weightx=1;
  gb.gridx=0;
  gb.gridwidth=1;
  myDevicesCombo=new ComboBox();
  myComboPanel.add(myDevicesCombo,gb);
  gb.gridx++;
  myDeviceConfigurationsCombo=new ComboBox();
  myComboPanel.add(myDeviceConfigurationsCombo,gb);
  gb.gridx++;
  myTargetCombo=new ComboBox();
  myComboPanel.add(myTargetCombo,gb);
  gb.gridx=0;
  gb.gridy++;
  myLocaleCombo=new ComboBox();
  myComboPanel.add(myLocaleCombo,gb);
  gb.gridx++;
  myDockModeCombo=new ComboBox();
  myComboPanel.add(myDockModeCombo,gb);
  gb.gridx++;
  myNightCombo=new ComboBox();
  myComboPanel.add(myNightCombo,gb);
  myDevicesCombo.setRenderer(new ListCellRendererWrapper(myDevicesCombo.getRenderer()){
    @Override public void customize(    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      if (value instanceof LayoutDevice) {
        final LayoutDevice device=(LayoutDevice)value;
        setText(device.getName());
      }
 else {
        setText("<html><font color='red'>[none]</font></html>");
      }
    }
  }
);
  myDeviceConfigurationsCombo.setRenderer(new ListCellRendererWrapper(myDevicesCombo.getRenderer()){
    @Override public void customize(    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      if (value instanceof LayoutDeviceConfiguration) {
        final LayoutDeviceConfiguration deviceConfiguration=(LayoutDeviceConfiguration)value;
        setText(deviceConfiguration.getName());
      }
 else {
        setText("<html><font color='red'>[none]</font></html>");
      }
    }
  }
);
  myDevicesCombo.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final LayoutDevice newSelectedDevice=getSelectedDevice();
      updateDeviceConfigurations(newSelectedDevice);
      myToolWindowManager.render();
    }
  }
);
  final DefaultActionGroup actionGroup=new DefaultActionGroup();
  actionGroup.add(new MyZoomToFitAction());
  actionGroup.add(new MyZoomActualAction());
  actionGroup.add(new MyZoomInAction());
  actionGroup.add(new MyZoomOutAction());
  myActionToolBar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,actionGroup,true);
  myActionToolBar.setReservePlaceAutoPopupIcon(false);
  gb.gridx=0;
  gb.gridy++;
  final JComponent toolbar=myActionToolBar.getComponent();
  final JPanel toolBarWrapper=new JPanel(new BorderLayout());
  toolBarWrapper.add(toolbar,BorderLayout.CENTER);
  toolBarWrapper.setPreferredSize(new Dimension(10,toolbar.getPreferredSize().height));
  toolBarWrapper.setMinimumSize(new Dimension(10,toolbar.getMinimumSize().height));
  myComboPanel.add(toolBarWrapper,gb);
  gb.fill=GridBagConstraints.HORIZONTAL;
  myThemeCombo=new ComboBox();
  gb.gridx++;
  gb.gridwidth=2;
  myComboPanel.add(myThemeCombo,gb);
  myContentPanel.addComponentListener(new ComponentListener(){
    @Override public void componentResized(    ComponentEvent e){
      myPreviewPanel.updateImageSize();
    }
    @Override public void componentMoved(    ComponentEvent e){
    }
    @Override public void componentShown(    ComponentEvent e){
    }
    @Override public void componentHidden(    ComponentEvent e){
    }
  }
);
  myScrollPane.getHorizontalScrollBar().setUnitIncrement(5);
  myScrollPane.getVerticalScrollBar().setUnitIncrement(5);
  myDockModeCombo.setModel(new DefaultComboBoxModel(DockMode.values()));
  myDockModeCombo.setRenderer(new ListCellRendererWrapper(myDockModeCombo.getRenderer()){
    @Override public void customize(    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      setText(((DockMode)value).getLongDisplayValue());
    }
  }
);
  final ActionListener renderingListener=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      myToolWindowManager.render();
    }
  }
;
  myNightCombo.setModel(new DefaultComboBoxModel(NightMode.values()));
  myNightCombo.setRenderer(new ListCellRendererWrapper(myNightCombo.getRenderer()){
    @Override public void customize(    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      setText(((NightMode)value).getLongDisplayValue());
    }
  }
);
  myTargetCombo.setRenderer(new ListCellRendererWrapper(myDevicesCombo.getRenderer()){
    @Override public void customize(    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      if (value instanceof IAndroidTarget) {
        final IAndroidTarget target=(IAndroidTarget)value;
        setText(target.getName());
      }
 else {
        setText("<html><font color='red'>[none]</font></html>");
      }
    }
  }
);
  myTargetCombo.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      updateThemes();
      myToolWindowManager.render();
    }
  }
);
  myDeviceConfigurationsCombo.addActionListener(renderingListener);
  myDockModeCombo.addActionListener(renderingListener);
  myNightCombo.addActionListener(renderingListener);
  myLocaleCombo.addActionListener(renderingListener);
  myThemeCombo.addActionListener(renderingListener);
  myDeviceConfigurationsCombo.setMinimumAndPreferredWidth(10);
  myDockModeCombo.setMinimumAndPreferredWidth(10);
  myNightCombo.setMinimumAndPreferredWidth(10);
  myDevicesCombo.setMinimumAndPreferredWidth(10);
  myTargetCombo.setMinimumAndPreferredWidth(10);
  myLocaleCombo.setMinimumAndPreferredWidth(10);
  myThemeCombo.setMinimumAndPreferredWidth(10);
}
