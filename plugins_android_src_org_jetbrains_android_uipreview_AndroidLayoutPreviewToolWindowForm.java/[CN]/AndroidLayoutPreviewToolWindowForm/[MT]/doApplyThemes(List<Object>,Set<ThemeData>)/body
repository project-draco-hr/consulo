{
  final ThemeData oldSelection=(ThemeData)myThemeCombo.getSelectedItem();
  ThemeData selection=null;
  for (  Object o : themes) {
    if (o instanceof ThemeData && o.equals(oldSelection)) {
      selection=(ThemeData)o;
    }
  }
  if (selection == null) {
    for (    Object o : themes) {
      if (o instanceof ThemeData) {
        selection=(ThemeData)o;
        break;
      }
    }
  }
  myThemeCombo.setModel(new CollectionComboBoxModel(themes,selection));
  myThemeCombo.setRenderer(new ListCellRendererWrapper(){
    @Override public void customize(    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      if (value instanceof ThemeData) {
        final ThemeData themeData=(ThemeData)value;
        if (index == -1 && !themeData.isProjectTheme() && themesSet.contains(new ThemeData(themeData.getName(),true))) {
          setText(value.toString() + " (framework)");
        }
 else         if (index != -1) {
          setText("      " + value.toString());
        }
      }
 else       if (index == -1) {
        setText("<html><font color='red'>[none]</font></html>");
      }
    }
  }
);
  if (myFile != null && !myThemesResetFlag) {
    resetThemes(themes);
    myThemesResetFlag=true;
  }
  saveState();
}
