{
  if (myFile == null) {
    return;
  }
  final LocaleData oldSelectedLocale=(LocaleData)myLocaleCombo.getSelectedItem();
  myLocaleCombo.setModel(new DefaultComboBoxModel());
  final AndroidFacet facet=AndroidFacet.getInstance(myFile);
  if (facet == null) {
    return;
  }
  final Map<String,Set<String>> language2Regions=new HashMap<String,Set<String>>();
  final VirtualFile[] resourceDirs=facet.getLocalResourceManager().getAllResourceDirs();
  for (  VirtualFile resourceDir : resourceDirs) {
    for (    VirtualFile child : resourceDir.getChildren()) {
      if (child.isDirectory()) {
        final String resDirName=child.getName();
        final String[] segments=resDirName.split(AndroidConstants.RES_QUALIFIER_SEP);
        final List<String> languageQualifiers=new ArrayList<String>();
        final List<String> regionQualifiers=new ArrayList<String>();
        for (        String segment : segments) {
          final LanguageQualifier languageQualifier=LanguageQualifier.getQualifier(segment);
          if (languageQualifier != null) {
            languageQualifiers.add(languageQualifier.getValue());
          }
          final RegionQualifier regionQualifier=RegionQualifier.getQualifier(segment);
          if (regionQualifier != null) {
            regionQualifiers.add(regionQualifier.getValue());
          }
        }
        for (        String languageQualifier : languageQualifiers) {
          Set<String> regions=language2Regions.get(languageQualifier);
          if (regions == null) {
            regions=new HashSet<String>();
            language2Regions.put(languageQualifier,regions);
          }
          regions.addAll(regionQualifiers);
        }
      }
    }
  }
  final List<LocaleData> locales=new ArrayList<LocaleData>();
  for (  String language : language2Regions.keySet()) {
    final Set<String> regions=language2Regions.get(language);
    for (    String region : regions) {
      final String presentation=String.format("%1$s / %2$s",language,region);
      locales.add(new LocaleData(language,region,presentation));
    }
    final String presentation=regions.size() > 0 ? String.format("%1$s / Other",language) : String.format("%1$s / Any",language);
    locales.add(new LocaleData(language,null,presentation));
  }
  locales.add(new LocaleData(null,null,language2Regions.size() > 0 ? "Other locale" : "Any locale"));
  LocaleData newSelectedLocale=null;
  for (  LocaleData locale : locales) {
    if (locale.equals(oldSelectedLocale)) {
      newSelectedLocale=locale;
    }
  }
  if (newSelectedLocale == null) {
    final Locale defaultLocale=Locale.getDefault();
    if (defaultLocale != null) {
      for (      LocaleData locale : locales) {
        if (locale.equals(new LocaleData(defaultLocale.getLanguage(),defaultLocale.getCountry(),""))) {
          newSelectedLocale=locale;
        }
      }
    }
  }
  Collections.sort(locales,new Comparator<LocaleData>(){
    @Override public int compare(    LocaleData l1,    LocaleData l2){
      return l1.toString().compareTo(l2.toString());
    }
  }
);
  if (newSelectedLocale == null && locales.size() > 0) {
    newSelectedLocale=locales.get(0);
  }
  myLocaleCombo.setModel(new CollectionComboBoxModel(locales,newSelectedLocale));
}
