{
  DebuggerManagerThreadImpl.assertIsManagerThread();
  final long timeStamp=getTimeStamp(session);
  final HashMap<String,HotSwapFile> modifiedClasses=new HashMap<String,HotSwapFile>();
  ApplicationManager.getApplication().runReadAction(new Runnable(){
    public void run(){
      final List<VirtualFile> allClasses=ProjectRootsTraversing.collectRoots(myProject,ProjectRootsTraversing.FULL_CLASSPATH_RECURSIVE).getRootDirs();
      final VirtualFile[] allDirs=allClasses.toArray(new VirtualFile[allClasses.size()]);
      final FileTypeManager fileTypeManager=FileTypeManager.getInstance();
      CompilerPathsEx.visitFiles(allDirs,new CompilerPathsEx.FileVisitor(){
        protected void acceptDirectory(        final VirtualFile file,        final String fileRoot,        final String filePath){
          progress.setText(DebuggerBundle.message("progress.hotswap.scanning.path",filePath));
          if (file.getFileSystem() instanceof JarFileSystem && StdFileTypes.ARCHIVE.equals(fileTypeManager.getFileTypeByFile(file))) {
            if (file.getTimeStamp() > timeStamp) {
              super.acceptDirectory(file,fileRoot,filePath);
            }
          }
 else {
            super.acceptDirectory(file,fileRoot,filePath);
          }
        }
        protected void acceptFile(        VirtualFile file,        String fileRoot,        String filePath){
          if (file.getTimeStamp() > timeStamp && StdFileTypes.CLASS.equals(fileTypeManager.getFileTypeByFile(file))) {
            if (SystemInfo.isFileSystemCaseSensitive ? filePath.endsWith(CLASS_EXTENSION) : StringUtil.endsWithIgnoreCase(filePath,CLASS_EXTENSION)) {
              progress.setText(DebuggerBundle.message("progress.hotswap.scanning.path",filePath));
              final String qualifiedName=filePath.substring(fileRoot.length() + 1,filePath.length() - CLASS_EXTENSION.length()).replace('/','.');
              modifiedClasses.put(qualifiedName,new HotSwapFile(file));
            }
          }
        }
      }
);
    }
  }
);
  return modifiedClasses;
}
