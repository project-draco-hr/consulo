{
  final Map<DebuggerSession,Map<String,HotSwapFile>> modifiedClasses=new HashMap<DebuggerSession,Map<String,HotSwapFile>>();
  final MultiProcessCommand scanClassesCommand=new MultiProcessCommand();
  swapProgress.setCancelWorker(new Runnable(){
    public void run(){
      scanClassesCommand.terminate();
    }
  }
);
  for (Iterator<DebuggerSession> iterator=sessions.iterator(); iterator.hasNext(); ) {
    final DebuggerSession debuggerSession=iterator.next();
    if (debuggerSession.isAttached()) {
      scanClassesCommand.addCommand(debuggerSession.getProcess(),new DebuggerCommandImpl(){
        protected void action() throws Exception {
          swapProgress.setDebuggerSession(debuggerSession);
          HashMap<String,HotSwapFile> sessionClasses=getInstance(swapProgress.getProject()).getModifiedClasses(debuggerSession,swapProgress);
          if (!sessionClasses.isEmpty()) {
            modifiedClasses.put(debuggerSession,sessionClasses);
          }
        }
      }
);
    }
  }
  swapProgress.setTitle(DebuggerBundle.message("progress.hotswap.scanning.classes"));
  scanClassesCommand.run();
  return swapProgress.isCancelled() ? new HashMap<DebuggerSession,Map<String,HotSwapFile>>() : modifiedClasses;
}
