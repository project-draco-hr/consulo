{
  validateRecentProjects();
  Project[] openProjects=ProjectManager.getInstance().getOpenProjects();
  ArrayList<AnAction> actions=new ArrayList<AnAction>();
  outer:   for (int i=0; i < myRecentProjects.size(); i++) {
    String projectPath=myRecentProjects.get(i).toString();
    for (int j=0; j < openProjects.length; j++) {
      Project openProject=openProjects[j];
      if (projectPath.equals(getProjectPath(openProject))) {
        continue outer;
      }
    }
    actions.add(new ReopenProjectAction(projectPath));
  }
  if (actions.size() == 0) {
    return new AnAction[0];
  }
  ArrayList<AnAction> list=new ArrayList<AnAction>();
  for (int i=0; i < actions.size(); i++) {
    AnAction action=actions.get(i);
    list.add(action);
  }
  if (addClearListItem) {
    AnAction clearListAction=new AnAction(IdeBundle.message("action.clear.list")){
      public void actionPerformed(      AnActionEvent e){
        myRecentProjects.clear();
      }
    }
;
    list.add(Separator.getInstance());
    list.add(clearListAction);
  }
  return list.toArray(new AnAction[list.size()]);
}
