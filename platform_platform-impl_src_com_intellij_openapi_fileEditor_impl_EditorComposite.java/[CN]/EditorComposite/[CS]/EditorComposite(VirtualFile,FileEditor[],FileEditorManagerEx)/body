{
  myFile=file;
  myEditors=editors;
  myFileEditorManager=fileEditorManager;
  myInitialFileTimeStamp=myFile.getTimeStamp();
  Disposer.register(fileEditorManager.getProject(),this);
  if (editors.length > 1) {
    PrevNextActionsDescriptor descriptor=new PrevNextActionsDescriptor(IdeActions.ACTION_NEXT_EDITOR_TAB,IdeActions.ACTION_PREVIOUS_EDITOR_TAB);
    final TabbedPaneWrapper.AsJBTabs wrapper=new TabbedPaneWrapper.AsJBTabs(fileEditorManager.getProject(),SwingConstants.BOTTOM,descriptor,this);
    wrapper.getTabs().getPresentation().setPaintBorder(0,0,0,0).setTabSidePaintBorder(1).setGhostsAlwaysVisible(true).setUiDecorator(new UiDecorator(){
      @NotNull public UiDecoration getDecoration(){
        return new UiDecoration(null,new Insets(0,8,0,8));
      }
    }
);
    wrapper.getTabs().getComponent().setBorder(new EmptyBorder(0,0,1,0));
    myTabbedPaneWrapper=wrapper;
    myComponent=new MyComponent(wrapper.getComponent()){
      public boolean requestFocusInWindow(){
        return wrapper.getComponent().requestFocusInWindow();
      }
      public void requestFocus(){
        wrapper.getComponent().requestFocus();
      }
      public boolean requestDefaultFocus(){
        return wrapper.getComponent().requestDefaultFocus();
      }
    }
;
    for (    FileEditor editor : editors) {
      wrapper.addTab(editor.getName(),createEditorComponent(editor));
    }
    myTabbedPaneWrapper.addChangeListener(new MyChangeListener());
  }
 else   if (editors.length == 1) {
    myTabbedPaneWrapper=null;
    myComponent=new MyComponent(createEditorComponent(editors[0])){
      public void requestFocus(){
        JComponent component=editors[0].getPreferredFocusedComponent();
        if (component != null) {
          component.requestFocus();
        }
      }
      public boolean requestFocusInWindow(){
        JComponent component=editors[0].getPreferredFocusedComponent();
        if (component != null) {
          return component.requestFocusInWindow();
        }
        return false;
      }
      public boolean requestDefaultFocus(){
        JComponent component=editors[0].getPreferredFocusedComponent();
        if (component != null) {
          return component.requestDefaultFocus();
        }
        return false;
      }
    }
;
  }
 else {
    throw new IllegalArgumentException("editors array cannot be empty");
  }
  mySelectedEditor=editors[0];
  myFocusWatcher=new FocusWatcher();
  myFocusWatcher.install(myComponent);
  myFileEditorManager.addFileEditorManagerListener(new FileEditorManagerAdapter(){
    @Override public void selectionChanged(    @NotNull final FileEditorManagerEvent event){
      final VirtualFile oldFile=event.getOldFile();
      final VirtualFile newFile=event.getNewFile();
      if (Comparing.equal(oldFile,newFile) && Comparing.equal(getFile(),newFile)) {
        Runnable runnable=new Runnable(){
          @Override public void run(){
            final FileEditor oldEditor=event.getOldEditor();
            if (oldEditor != null)             oldEditor.deselectNotify();
            final FileEditor newEditor=event.getNewEditor();
            if (newEditor != null)             newEditor.selectNotify();
            ((FileEditorProviderManagerImpl)FileEditorProviderManager.getInstance()).providerSelected(EditorComposite.this);
            ((IdeDocumentHistoryImpl)IdeDocumentHistory.getInstance(myFileEditorManager.getProject())).onSelectionChanged();
          }
        }
;
        if (ApplicationManager.getApplication().isDispatchThread()) {
          CommandProcessor.getInstance().executeCommand(myFileEditorManager.getProject(),runnable,"Switch Active Editor",null);
        }
 else {
          runnable.run();
        }
      }
    }
  }
,this);
}
