{
  myFile=file;
  myEditors=editors;
  if (NullUtils.hasNull(editors))   throw new IllegalArgumentException("Must not pass null editors in " + Arrays.asList(editors));
  myFileEditorManager=fileEditorManager;
  myInitialFileTimeStamp=myFile.getTimeStamp();
  Disposer.register(fileEditorManager.getProject(),this);
  if (editors.length > 1) {
    myTabbedPaneWrapper=createTabbedPaneWrapper(editors);
    JComponent component=myTabbedPaneWrapper.getComponent();
    myComponent=new MyComponent(component,component);
  }
 else   if (editors.length == 1) {
    myTabbedPaneWrapper=null;
    FileEditor editor=editors[0];
    myComponent=new MyComponent(createEditorComponent(editor),editor.getPreferredFocusedComponent());
  }
 else {
    throw new IllegalArgumentException("editors array cannot be empty");
  }
  mySelectedEditor=editors[0];
  myFocusWatcher=new FocusWatcher();
  myFocusWatcher.install(myComponent);
  myFileEditorManager.addFileEditorManagerListener(new FileEditorManagerAdapter(){
    @Override public void selectionChanged(    @NotNull final FileEditorManagerEvent event){
      final VirtualFile oldFile=event.getOldFile();
      final VirtualFile newFile=event.getNewFile();
      if (Comparing.equal(oldFile,newFile) && Comparing.equal(getFile(),newFile)) {
        Runnable runnable=new Runnable(){
          @Override public void run(){
            final FileEditor oldEditor=event.getOldEditor();
            if (oldEditor != null)             oldEditor.deselectNotify();
            final FileEditor newEditor=event.getNewEditor();
            if (newEditor != null)             newEditor.selectNotify();
            ((FileEditorProviderManagerImpl)FileEditorProviderManager.getInstance()).providerSelected(EditorComposite.this);
            ((IdeDocumentHistoryImpl)IdeDocumentHistory.getInstance(myFileEditorManager.getProject())).onSelectionChanged();
          }
        }
;
        if (ApplicationManager.getApplication().isDispatchThread()) {
          CommandProcessor.getInstance().executeCommand(myFileEditorManager.getProject(),runnable,"Switch Active Editor",null);
        }
 else {
          runnable.run();
        }
      }
    }
  }
,this);
}
