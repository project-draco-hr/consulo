{
  super.visitMethodCallExpression(call);
  final boolean isInInitialization=checkForInitialization(call);
  if (!isInInitialization) {
    return;
  }
  final PsiReferenceExpression methodExpression=call.getMethodExpression();
  if (methodExpression == null) {
    return;
  }
  final PsiMethod calledMethod=call.resolveMethod();
  if (calledMethod == null) {
    return;
  }
  if (calledMethod.isConstructor()) {
    return;
  }
  final PsiClass calledMethodClass=calledMethod.getContainingClass();
  final PsiClass methodClass=ClassUtils.getContainingClass(call);
  if (methodClass == null || calledMethodClass == null) {
    return;
  }
  if (calledMethodClass.equals(methodClass)) {
    return;
  }
  final PsiThisExpression thisExposed=checkArgumentsForThis(call);
  if (thisExposed == null) {
    return;
  }
  if (methodClass.isInheritor(calledMethodClass,true)) {
    return;
  }
  final PsiExpression qualifier=methodExpression.getQualifierExpression();
  if (!(qualifier instanceof PsiReferenceExpression)) {
    return;
  }
  final PsiReferenceExpression qualifiedExpression=(PsiReferenceExpression)qualifier;
  final PsiElement referent=qualifiedExpression.resolve();
  if (referent instanceof PsiField) {
    final PsiField field=(PsiField)referent;
    final PsiClass containingClass=field.getContainingClass();
    if (methodClass.equals(containingClass) || methodClass.isInheritor(containingClass,true)) {
      return;
    }
  }
  registerError(thisExposed);
}
