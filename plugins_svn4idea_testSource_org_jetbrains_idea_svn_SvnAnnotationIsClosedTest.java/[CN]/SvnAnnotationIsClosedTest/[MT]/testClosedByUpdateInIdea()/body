{
  final SubTree tree=new SubTree(myWorkingCopyDir);
  checkin();
  editFileInCommand(myProject,tree.myS1File,"1\n2\n3\n4\n");
  checkin();
  editFileInCommand(myProject,tree.myS1File,"1\n2\n3**\n4\n");
  checkin();
  runInAndVerifyIgnoreOutput("up","-r","2");
  final VcsAnnotationLocalChangesListener listener=ProjectLevelVcsManager.getInstance(myProject).getAnnotationLocalChangesListener();
  final FileAnnotation annotation=myVcs.getAnnotationProvider().annotate(tree.myS1File);
  annotation.setCloser(new Runnable(){
    @Override public void run(){
      myIsClosed=true;
      listener.unregisterAnnotation(tree.myS1File,annotation);
    }
  }
);
  listener.registerAnnotation(tree.myS1File,annotation);
  myDirtyScopeManager.markEverythingDirty();
  myChangeListManager.ensureUpToDate(false);
  ProjectLevelVcsManagerEx.getInstanceEx(myProject).getOptions(VcsConfiguration.StandardOption.UPDATE).setValue(false);
  final CommonUpdateProjectAction action=new CommonUpdateProjectAction();
  action.getTemplatePresentation().setText("1");
  action.actionPerformed(new AnActionEvent(null,new DataContext(){
    @Nullable @Override public Object getData(    @NonNls String dataId){
      if (CommonDataKeys.PROJECT.is(dataId)) {
        return myProject;
      }
      return null;
    }
  }
,"test",new Presentation(),null,0));
  myChangeListManager.ensureUpToDate(false);
  myChangeListManager.ensureUpToDate(false);
  sleep(100);
  Assert.assertTrue(myIsClosed);
}
