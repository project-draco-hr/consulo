{
  prepareExternal();
  final File sourceFile=new File(myWorkingCopyDir.getPath(),"source" + File.separator + "s1.txt");
  final File externalFile=new File(myWorkingCopyDir.getPath(),"source" + File.separator + "external"+ File.separator+ "t12.txt");
  final LocalFileSystem lfs=LocalFileSystem.getInstance();
  final VirtualFile vf1=lfs.refreshAndFindFileByIoFile(sourceFile);
  final VirtualFile vf2=lfs.refreshAndFindFileByIoFile(externalFile);
  Assert.assertNotNull(vf1);
  Assert.assertNotNull(vf2);
  editFileInCommand(myProject,vf1,"test externals 123" + System.currentTimeMillis());
  editFileInCommand(myProject,vf2,"test externals 123" + System.currentTimeMillis());
  VcsDirtyScopeManager.getInstance(myProject).markEverythingDirty();
  myChangeListManager.ensureUpToDate(false);
  final Change change1=myChangeListManager.getChange(vf1);
  final Change change2=myChangeListManager.getChange(vf2);
  Assert.assertNotNull(change1);
  Assert.assertNotNull(change2);
  final File sourceDir=new File(myWorkingCopyDir.getPath(),"source");
  final File externalDir=new File(myWorkingCopyDir.getPath(),"source/external");
  verify(runSvn("ci","-m","test",sourceDir.getPath()));
  verify(runSvn("ci","-m","test",externalDir.getPath()));
  editFileInCommand(myProject,vf2,"test externals 12344444" + System.currentTimeMillis());
  verify(runSvn("ci","-m","test",externalDir.getPath()));
  final SvnDiffProvider diffProvider=(SvnDiffProvider)myVcs.getDiffProvider();
  assertRevision(vf1,diffProvider,3);
  assertRevision(vf2,diffProvider,5);
  verify(runSvn("up","-r","4",sourceDir.getPath()));
  verify(runSvn("up","-r","4",externalDir.getPath()));
  assertRevision(vf1,diffProvider,3);
  assertRevision(vf2,diffProvider,4);
  final VcsAnnotationLocalChangesListener listener=ProjectLevelVcsManager.getInstance(myProject).getAnnotationLocalChangesListener();
  final FileAnnotation annotation=myVcs.getAnnotationProvider().annotate(vf1);
  annotation.setCloser(new Runnable(){
    @Override public void run(){
      myIsClosed=true;
      listener.unregisterAnnotation(vf1,annotation);
    }
  }
);
  listener.registerAnnotation(vf1,annotation);
  final FileAnnotation annotation1=myVcs.getAnnotationProvider().annotate(vf2);
  annotation1.setCloser(new Runnable(){
    @Override public void run(){
      myIsClosed1=true;
      listener.unregisterAnnotation(vf1,annotation1);
    }
  }
);
  listener.registerAnnotation(vf1,annotation1);
  verify(runSvn("up",sourceDir.getPath()));
  imitateEvent(lfs.refreshAndFindFileByIoFile(sourceDir));
  imitateEvent(lfs.refreshAndFindFileByIoFile(externalDir));
  myChangeListManager.ensureUpToDate(false);
  myChangeListManager.ensureUpToDate(false);
  sleep(100);
  assertRevision(vf1,diffProvider,3);
  assertRevision(vf2,diffProvider,5);
  Assert.assertTrue(myIsClosed1);
  Assert.assertFalse(myIsClosed);
}
