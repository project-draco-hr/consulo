{
  Set<LookupElement> result=new LinkedHashSet<LookupElement>();
  for (  TypeConstraint constraint : constraints) {
    if (constraint instanceof SubtypeConstraint) {
      result.add(PsiTypeLookupItem.createLookupItem(constraint.getDefaultType(),null));
    }
 else     if (constraint instanceof SupertypeConstraint) {
      processSuperTypes(constraint.getType(),result);
    }
  }
  if (forGroovy) {
    result.add(LookupElementBuilder.create(GrModifier.DEF).bold());
  }
  return result.toArray(new LookupElement[result.size()]);
}
