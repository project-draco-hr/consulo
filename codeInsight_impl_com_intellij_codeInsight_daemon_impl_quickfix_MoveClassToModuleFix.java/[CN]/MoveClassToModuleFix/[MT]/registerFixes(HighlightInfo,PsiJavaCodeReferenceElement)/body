{
  final PsiElement psiElement=reference.getElement();
  @NonNls final String referenceName=reference.getRangeInElement().substring(psiElement.getText());
  Project project=psiElement.getProject();
  final PsiFile containingFile=psiElement.getContainingFile();
  if (containingFile == null)   return;
  PsiDirectory dir=containingFile.getContainingDirectory();
  if (dir == null)   return;
  VirtualFile classVFile=containingFile.getVirtualFile();
  if (classVFile == null)   return;
  final ProjectFileIndex fileIndex=ProjectRootManager.getInstance(project).getFileIndex();
  final Module currentModule=fileIndex.getModuleForFile(classVFile);
  if (currentModule == null)   return;
  VirtualFile[] sourceRoots=ModuleRootManager.getInstance(currentModule).getSourceRoots();
  if (sourceRoots.length == 0)   return;
  final PsiDirectory sourceDirectory=PsiManager.getInstance(project).findDirectory(sourceRoots[0]);
  if (sourceDirectory == null)   return;
  VirtualFile vsourceRoot=fileIndex.getSourceRootForFile(classVFile);
  if (vsourceRoot == null)   return;
  final PsiDirectory sourceRoot=PsiManager.getInstance(project).findDirectory(vsourceRoot);
  if (sourceRoot == null)   return;
  final JavaPsiFacade facade=JavaPsiFacade.getInstance(project);
  PsiClass[] classes=facade.getShortNamesCache().getClassesByName(referenceName,GlobalSearchScope.allScope(project));
  for (  final PsiClass aClass : classes) {
    if (!facade.getResolveHelper().isAccessible(aClass,psiElement,aClass))     continue;
    final PsiFile psiFile=aClass.getContainingFile();
    if (!(psiFile instanceof PsiJavaFile))     continue;
    PsiJavaFile javaFile=(PsiJavaFile)psiFile;
    final String packageName=javaFile.getPackageName();
    VirtualFile virtualFile=psiFile.getVirtualFile();
    if (virtualFile == null)     continue;
    final Module classModule=fileIndex.getModuleForFile(virtualFile);
    if (classModule != null && classModule != currentModule && !ModuleRootManager.getInstance(currentModule).isDependsOn(classModule)) {
      IntentionAction action=new IntentionAction(){
        @NotNull public String getText(){
          return "Move '" + aClass.getQualifiedName() + "' from module '"+ classModule.getName()+ "' to '"+ currentModule.getName()+ "'";
        }
        @NotNull public String getFamilyName(){
          return "move it";
        }
        public boolean isAvailable(        @NotNull final Project project,        final Editor editor,        final PsiFile file){
          return true;
        }
        public void invoke(        @NotNull final Project project,        final Editor editor,        final PsiFile file) throws IncorrectOperationException {
          RefactoringActionHandler moveHandler=RefactoringActionHandlerFactory.getInstance().createMoveHandler();
          DataManager dataManager=DataManager.getInstance();
          DataContext dataContext=dataManager.getDataContext();
          PsiDirectory directory=PackageUtil.findOrCreateDirectoryForPackage(currentModule,packageName,sourceRoot,true);
          DataContext context=SimpleDataContext.getSimpleContext(DataConstantsEx.TARGET_PSI_ELEMENT,directory,dataContext);
          String qualifiedName=aClass.getQualifiedName();
          moveHandler.invoke(project,new PsiElement[]{aClass},context);
          PsiReference reference=file.findReferenceAt(editor.getCaretModel().getOffset());
          PsiClass newClass=JavaPsiFacade.getInstance(project).findClass(qualifiedName,GlobalSearchScope.moduleScope(currentModule));
          if (reference != null && newClass != null) {
            final QuestionAction action=new AddImportAction(project,reference,editor,newClass);
            action.execute();
          }
        }
        public boolean startInWriteAction(){
          return false;
        }
      }
;
      QuickFixAction.registerQuickFixAction(info,action);
    }
  }
}
