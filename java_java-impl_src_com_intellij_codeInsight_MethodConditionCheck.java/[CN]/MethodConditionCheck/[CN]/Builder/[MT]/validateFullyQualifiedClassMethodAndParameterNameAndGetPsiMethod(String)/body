{
  String classNameAndMethodName=parseClassNameAndMethodName(fullyQualifiedClassMethodAndParameterName);
  String className=classNameAndMethodName.substring(0,classNameAndMethodName.lastIndexOf("."));
  String methodName=classNameAndMethodName.substring(classNameAndMethodName.lastIndexOf(".") + 1);
  String allParametersSubString=fullyQualifiedClassMethodAndParameterName.substring(fullyQualifiedClassMethodAndParameterName.indexOf("(") + 1,fullyQualifiedClassMethodAndParameterName.lastIndexOf(")")).trim();
  if (allParametersSubString.isEmpty()) {
    throw new IllegalArgumentException("Name should contain 1+ parameter (between opening and closing parenthesis).  " + fullyQualifiedClassMethodAndParameterName);
  }
 else   if (allParametersSubString.contains("*") && allParametersSubString.indexOf("*") == allParametersSubString.lastIndexOf("*")) {
    throw new IllegalArgumentException("Selected Parameter should be surrounded by asterisks.  " + fullyQualifiedClassMethodAndParameterName);
  }
  String parameterClassAndName=allParametersSubString.substring(allParametersSubString.indexOf("*") + 1,allParametersSubString.lastIndexOf("*")).trim();
  PsiClass psiClass=JavaPsiFacade.getInstance(project).findClass(className,GlobalSearchScope.allScope(project));
  if (psiClass == null) {
    throw new IllegalArgumentException("Unable to locate class " + className + " which was parsed from full name "+ fullyQualifiedClassMethodAndParameterName);
  }
  List<PsiMethod> psiMethods=findPsiMethodsInPsiClassWithMatchingMethodName(psiClass,methodName);
  if (psiMethods.size() == 0) {
    throw new IllegalArgumentException("Unable to locate method in class " + className + " named "+ methodName+ ", which was parsed from full name "+ fullyQualifiedClassMethodAndParameterName);
  }
  PsiMethod psiMethod=findPsiMethodWithMatchingParameters(psiMethods,allParametersSubString);
  if (psiMethod == null) {
    throw new IllegalArgumentException("Unable to locate method in class " + className + " named "+ methodName+ " with a parameter named "+ parameterClassAndName+ " which was parsed from full name "+ fullyQualifiedClassMethodAndParameterName+ ".  The following methods matched on method name but not parameter name "+ psiMethods);
  }
  PsiParameter psiParameter=null;
  for (int i=0; i < psiMethod.getParameterList().getParameters().length; i++) {
    PsiParameter parameter=psiMethod.getParameterList().getParameters()[i];
    if (parameterClassAndName.equals(getFullyQualifiedName(parameter))) {
      psiParameter=parameter;
      break;
    }
  }
  if (psiParameter == null) {
    throw new IllegalArgumentException("Unable to locate parameter " + parameterClassAndName + " in class "+ className+ " named "+ methodName+ ", which was parsed from full name "+ fullyQualifiedClassMethodAndParameterName);
  }
  return new MethodConditionCheck(psiMethod,psiParameter,type);
}
