{
  final PsiMethodCallExpression call=(PsiMethodCallExpression)findMatchingElement(file,editor);
  final PsiReferenceExpression methodExpression=call.getMethodExpression();
  final String methodName=methodExpression.getReferenceName();
  final PsiExpression target=methodExpression.getQualifierExpression();
  final PsiExpressionList argumentList=call.getArgumentList();
  final PsiExpression arg=argumentList.getExpressions()[0];
  final PsiExpression strippedTarget=ParenthesesUtils.stripParentheses(target);
  final PsiExpression strippedArg=ParenthesesUtils.stripParentheses(arg);
  final String callString;
  if (ParenthesesUtils.getPrecendence(strippedArg) > ParenthesesUtils.METHOD_CALL_PRECEDENCE) {
    callString='(' + strippedArg.getText() + ")."+ methodName+ '('+ strippedTarget.getText()+ ')';
  }
 else {
    callString=strippedArg.getText() + '.' + methodName+ '('+ strippedTarget.getText()+ ')';
  }
  replaceExpression(project,callString,call);
}
