{
  final MavenModuleResourceConfiguration config=target.getModuleResourcesConfiguration(context.getProjectDescriptor().dataManager.getDataPaths());
  if (config == null) {
    return;
  }
  final Set<String> filteringExcludedExtensions=config.getFiltetingExcludedExtensions();
  holder.processDirtyFiles(new FileProcessor<MavenResourceRootDescriptor,MavenResourcesTarget>(){
    @Override public boolean apply(    MavenResourcesTarget target,    File file,    MavenResourceRootDescriptor rd) throws IOException {
      final File outputDir=MavenResourcesTarget.getOutputDir(target.getModuleOutputDir(),rd.getConfiguration());
      if (outputDir == null) {
        return true;
      }
      final String relPath=FileUtil.getRelativePath(rd.getRootFile(),file);
      if (relPath == null) {
        return true;
      }
      final File outputFile=new File(outputDir,relPath);
      final boolean shouldFilter=rd.getConfiguration().isFiltered && !filteringExcludedExtensions.contains(getExtension(file));
      FileUtil.copyContent(file,outputFile);
      outputConsumer.registerOutputFile(outputFile.getPath(),Collections.singleton(file.getPath()));
      return true;
    }
  }
);
}
