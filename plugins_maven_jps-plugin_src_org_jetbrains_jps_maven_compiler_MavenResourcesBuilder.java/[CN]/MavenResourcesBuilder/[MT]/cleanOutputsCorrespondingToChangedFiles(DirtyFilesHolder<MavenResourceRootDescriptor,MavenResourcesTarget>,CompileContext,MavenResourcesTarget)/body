{
  final THashSet<File> targetDirtyFiles=new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY);
  final THashSet<File> cleanedSources=new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY);
  holder.processDirtyFiles(new FileProcessor<MavenResourceRootDescriptor,MavenResourcesTarget>(){
    @Override public boolean apply(    MavenResourcesTarget target,    File file,    MavenResourceRootDescriptor root) throws IOException {
      targetDirtyFiles.add(file);
      return true;
    }
  }
);
  if (!targetDirtyFiles.isEmpty()) {
    final SourceToOutputMapping mapping=context.getProjectDescriptor().dataManager.getSourceToOutputMap(target);
    for (    File dirtyFile : targetDirtyFiles) {
      final String path=dirtyFile.getPath();
      final Collection<String> outputs=mapping.getOutputs(path);
      if (outputs != null) {
        for (        String output : outputs) {
          new File(output).delete();
        }
        cleanedSources.add(dirtyFile);
      }
    }
  }
  return cleanedSources;
}
