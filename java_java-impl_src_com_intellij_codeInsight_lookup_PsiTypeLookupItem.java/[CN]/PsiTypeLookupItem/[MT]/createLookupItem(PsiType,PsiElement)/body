{
  final PsiType original=type;
  int dim=0;
  while (type instanceof PsiArrayType) {
    type=((PsiArrayType)type).getComponentType();
    dim++;
  }
  LookupItem item;
  if (type instanceof PsiClassType) {
    PsiClassType.ClassResolveResult classResolveResult=((PsiClassType)type).resolveGenerics();
    final PsiClass psiClass=classResolveResult.getElement();
    final PsiSubstitutor substitutor=classResolveResult.getSubstitutor();
    final String text=type.getCanonicalText();
    String typeString=text;
    String typeParams="";
    if (text.indexOf('<') > 0 && text.endsWith(">")) {
      typeString=text.substring(0,text.indexOf('<'));
      typeParams=text.substring(text.indexOf('<'));
    }
    String lookupString=text.substring(typeString.lastIndexOf('.') + 1);
    if (psiClass != null) {
      PsiClass resolved=JavaPsiFacade.getInstance(psiClass.getProject()).getResolveHelper().resolveReferencedClass(psiClass.getName(),context);
      if (!psiClass.getManager().areElementsEquivalent(resolved,psiClass)) {
        PsiClass aClass=psiClass;
        lookupString="";
        while (aClass != null) {
          lookupString=aClass.getName() + (lookupString == "" ? "" : ".") + lookupString;
          aClass=aClass.getContainingClass();
        }
        lookupString+=typeParams;
      }
    }
    item=new PsiTypeLookupItem(psiClass == null ? text : psiClass,lookupString);
    item.setAttribute(SUBSTITUTOR,substitutor);
  }
 else {
    item=new LookupItem(type,type.getPresentableText());
  }
  if (dim > 0) {
    final StringBuilder tail=new StringBuilder();
    for (int i=0; i < dim; i++) {
      tail.append("[]");
    }
    item.setAttribute(TAIL_TEXT_ATTR," " + tail.toString());
    item.setAttribute(TAIL_TEXT_SMALL_ATTR,"");
    item.putUserData(BRACKETS_COUNT_ATTR,dim);
  }
  item.setAttribute(TYPE,original);
  return item;
}
