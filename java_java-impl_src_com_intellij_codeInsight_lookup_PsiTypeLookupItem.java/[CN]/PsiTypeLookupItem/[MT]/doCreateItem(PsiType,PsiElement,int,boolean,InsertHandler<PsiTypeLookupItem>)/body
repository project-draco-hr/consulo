{
  if (type instanceof PsiClassType) {
    PsiClassType.ClassResolveResult classResolveResult=((PsiClassType)type).resolveGenerics();
    final PsiClass psiClass=classResolveResult.getElement();
    if (psiClass != null) {
      String name=psiClass.getName();
      if (name != null) {
        final PsiSubstitutor substitutor=classResolveResult.getSubstitutor();
        PsiClass resolved=JavaPsiFacade.getInstance(psiClass.getProject()).getResolveHelper().resolveReferencedClass(name,context);
        Set<String> allStrings=new HashSet<String>();
        allStrings.add(name);
        if (!psiClass.getManager().areElementsEquivalent(resolved,psiClass) && !PsiUtil.isInnerClass(psiClass)) {
          PsiClass aClass=psiClass.getContainingClass();
          while (aClass != null && !PsiUtil.isInnerClass(aClass) && aClass.getName() != null) {
            name=aClass.getName() + '.' + name;
            allStrings.add(name);
            aClass=aClass.getContainingClass();
          }
        }
        PsiTypeLookupItem item=new PsiTypeLookupItem(psiClass,name,diamond,bracketsCount,importFixer);
        item.addLookupStrings(ArrayUtil.toStringArray(allStrings));
        item.setAttribute(SUBSTITUTOR,substitutor);
        return item;
      }
    }
  }
  return new PsiTypeLookupItem(type,type.getPresentableText(),false,bracketsCount,importFixer);
}
