{
  if (type instanceof PsiClassType) {
    PsiClassType.ClassResolveResult classResolveResult=((PsiClassType)type).resolveGenerics();
    final PsiClass psiClass=classResolveResult.getElement();
    if (psiClass != null) {
      final PsiSubstitutor substitutor=classResolveResult.getSubstitutor();
      boolean diamond=false;
      if (type instanceof PsiClassReferenceType) {
        final PsiReferenceParameterList parameterList=((PsiClassReferenceType)type).getReference().getParameterList();
        if (parameterList != null) {
          final PsiTypeElement[] typeParameterElements=parameterList.getTypeParameterElements();
          diamond=typeParameterElements.length == 1 && typeParameterElements[0].getType() instanceof PsiDiamondType;
        }
      }
      PsiClass resolved=JavaPsiFacade.getInstance(psiClass.getProject()).getResolveHelper().resolveReferencedClass(psiClass.getName(),context);
      Set<String> allStrings=new HashSet<String>();
      String lookupString=psiClass.getName();
      allStrings.add(lookupString);
      if (!psiClass.getManager().areElementsEquivalent(resolved,psiClass) && !PsiUtil.isInnerClass(psiClass)) {
        PsiClass aClass=psiClass.getContainingClass();
        while (aClass != null && !PsiUtil.isInnerClass(aClass)) {
          lookupString=aClass.getName() + '.' + lookupString;
          allStrings.add(lookupString);
          aClass=aClass.getContainingClass();
        }
      }
      PsiTypeLookupItem item=new PsiTypeLookupItem(psiClass,lookupString,diamond,bracketsCount);
      item.addLookupStrings(allStrings.toArray(new String[allStrings.size()]));
      item.setAttribute(SUBSTITUTOR,substitutor);
      return item;
    }
  }
  return new PsiTypeLookupItem(type,type.getPresentableText(),false,bracketsCount);
}
