{
  if (!isOnlyUsedFromTestCode(refEntity)) {
    return null;
  }
  if (!(refEntity instanceof RefJavaElement)) {
    return null;
  }
  final RefJavaElement javaElement=(RefJavaElement)refEntity;
  if (!javaElement.isReferenced()) {
    return null;
  }
  final PsiElement element=javaElement.getElement();
  if (element instanceof PsiClass) {
    final PsiClass aClass=(PsiClass)element;
    final PsiIdentifier identifier=aClass.getNameIdentifier();
    if (identifier == null) {
      return null;
    }
    return new CommonProblemDescriptor[]{manager.createProblemDescriptor(identifier,InspectionGadgetsBundle.message("class.only.used.from.test.code.problem.descriptor"),true,ProblemHighlightType.GENERIC_ERROR_OR_WARNING,false)};
  }
 else   if (element instanceof PsiMethod) {
    final PsiMethod method=(PsiMethod)element;
    final PsiIdentifier identifier=method.getNameIdentifier();
    if (identifier == null) {
      return null;
    }
    return new CommonProblemDescriptor[]{manager.createProblemDescriptor(identifier,InspectionGadgetsBundle.message("method.only.used.from.test.code.problem.descriptor"),true,ProblemHighlightType.GENERIC_ERROR_OR_WARNING,false)};
  }
 else   if (element instanceof PsiField) {
    final PsiField field=(PsiField)element;
    final PsiIdentifier identifier=field.getNameIdentifier();
    return new CommonProblemDescriptor[]{manager.createProblemDescriptor(identifier,InspectionGadgetsBundle.message("field.only.used.from.test.code.problem.descriptor"),true,ProblemHighlightType.GENERIC_ERROR_OR_WARNING,false)};
  }
  return null;
}
