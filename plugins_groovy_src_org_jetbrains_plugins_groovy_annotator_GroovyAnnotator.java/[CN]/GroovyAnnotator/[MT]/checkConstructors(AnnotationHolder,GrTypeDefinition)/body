{
  if (typeDefinition.isEnum() || typeDefinition.isInterface() || typeDefinition.isAnonymous())   return;
  final PsiClass superClass=typeDefinition.getSuperClass();
  if (superClass == null)   return;
  PsiMethod defConstructor=getDefaultConstructor(superClass);
  boolean hasImplicitDefConstructor=superClass.getConstructors().length == 0;
  final PsiMethod[] constructors=typeDefinition.getConstructors();
  final String qName=superClass.getQualifiedName();
  if (constructors.length == 0) {
    if (!hasImplicitDefConstructor && (defConstructor == null || !PsiUtil.isAccessible(typeDefinition,defConstructor))) {
      final TextRange range=getHeaderTextRange(typeDefinition);
      holder.createErrorAnnotation(range,GroovyBundle.message("there.is.no.default.constructor.available.in.class.0",qName));
    }
    return;
  }
  for (  PsiMethod method : constructors) {
    if (method instanceof GrMethod) {
      final GrOpenBlock block=((GrMethod)method).getBlock();
      if (block == null)       continue;
      final GrStatement[] statements=block.getStatements();
      if (statements.length > 0) {
        if (statements[0] instanceof GrConstructorInvocation)         continue;
      }
      if (!hasImplicitDefConstructor && (defConstructor == null || !PsiUtil.isAccessible(typeDefinition,defConstructor))) {
        final TextRange range=getMethodHeaderTextRange((GrMethod)method);
        holder.createErrorAnnotation(range,GroovyBundle.message("there.is.no.default.constructor.available.in.class.0",qName));
      }
    }
  }
}
