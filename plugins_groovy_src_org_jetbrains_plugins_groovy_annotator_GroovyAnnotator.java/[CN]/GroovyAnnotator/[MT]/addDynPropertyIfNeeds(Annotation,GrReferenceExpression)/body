{
  String dynamicValueTypeDefinitionText=null;
  final Project project=refExpr.getProject();
  final DynamicPropertiesManager dynamicPropertiesManager=DynamicPropertiesManager.getInstance(project);
  Module module=ProjectRootManager.getInstance(project).getFileIndex().getModuleForFile(refExpr.getContainingFile().getVirtualFile());
  if (module != null) {
    if (refExpr.isQualified()) {
      GrExpression qualifier=refExpr.getQualifierExpression();
      PsiType type=qualifier.getType();
      if (type != null) {
        dynamicValueTypeDefinitionText=type.getCanonicalText();
      }
    }
 else {
      PsiElement refParent=refExpr.getParent();
      while (refParent != null && !(refParent instanceof GroovyFileBase)) {
        refParent=refParent.getParent();
      }
      if (refParent == null)       return;
      PsiClass scriptClass=((GroovyFileBase)refParent).getScriptClass();
      if (scriptClass != null) {
        dynamicValueTypeDefinitionText=scriptClass.getQualifiedName();
      }
    }
    if (dynamicValueTypeDefinitionText == null)     return;
    DynamicProperty dynamicProperty=new DynamicPropertyBase(refExpr.getName(),dynamicValueTypeDefinitionText,module.getName());
    final Element dynPropElement=dynamicPropertiesManager.findDynamicProperty(dynamicProperty);
    if (dynPropElement == null) {
      annotation.registerFix(new DynamicPropertyIntention(dynamicProperty));
    }
  }
}
