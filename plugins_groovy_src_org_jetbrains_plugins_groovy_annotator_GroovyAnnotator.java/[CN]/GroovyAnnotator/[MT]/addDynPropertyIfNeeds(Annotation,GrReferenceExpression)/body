{
  String dynamicValueTypeDefinitionText;
  final Project project=refExpr.getProject();
  final DynamicPropertiesManager dynamicPropertiesManager=DynamicPropertiesManager.getInstance(project);
  Module module=ProjectRootManager.getInstance(project).getFileIndex().getModuleForFile(refExpr.getContainingFile().getVirtualFile());
  if (refExpr.isQualified()) {
    dynamicValueTypeDefinitionText=refExpr.getQualifierExpression().getType().getCanonicalText();
  }
 else {
    PsiElement refParent=refExpr.getParent();
    while (refParent != null && !(refParent instanceof GroovyFileBase)) {
      refParent=refParent.getParent();
    }
    if (refParent == null)     return;
    dynamicValueTypeDefinitionText=((GroovyFileBase)refParent).getScriptClass().getQualifiedName();
  }
  DynamicProperty dynamicProperty=new DynamicPropertyBase(refExpr.getName(),dynamicValueTypeDefinitionText,module.getName());
  final Element dynPropElement=dynamicPropertiesManager.findDynamicProperty(dynamicProperty);
  if (dynPropElement == null) {
    annotation.registerFix(new DynamicPropertyIntention(dynamicProperty));
  }
}
