{
  GroovyResolveResult resolveResult=refExpr.advancedResolve();
  GroovyResolveResult[] results=refExpr.multiResolve(false);
  for (  GroovyResolveResult result : results) {
    registerUsedImport(refExpr,result);
  }
  PsiElement resolved=resolveResult.getElement();
  if (resolved != null) {
    if (resolved instanceof PsiMember) {
      highlightMemberResolved(holder,refExpr,((PsiMember)resolved));
    }
    if (!resolveResult.isAccessible()) {
      String message=GroovyBundle.message("cannot.access",refExpr.getReferenceName());
      holder.createWarningAnnotation(refExpr.getReferenceNameElement(),message);
    }
    if (!resolveResult.isStaticsOK() && resolved instanceof PsiModifierListOwner) {
      final String key=((PsiModifierListOwner)resolved).hasModifierProperty(PsiModifier.STATIC) ? "cannot.reference.static" : "cannot.reference.nonstatic";
      String message=GroovyBundle.message(key,refExpr.getReferenceName());
      holder.createWarningAnnotation(refExpr,message);
    }
 else     if (refExpr.getParent() instanceof GrCall) {
      if (resolved instanceof PsiMethod && resolved.getUserData(GrMethod.BUILDER_METHOD) == null) {
        checkMethodApplicability(resolveResult,refExpr,holder);
      }
 else {
        checkClosureApplicability(resolveResult,refExpr.getType(),refExpr,holder);
      }
    }
    if (isAssignmentLHS(refExpr) || resolved instanceof PsiPackage)     return;
  }
 else {
    GrExpression qualifier=refExpr.getQualifierExpression();
    if (qualifier == null && isAssignmentLHS(refExpr))     return;
  }
  final PsiType refExprType=refExpr.getType();
  PsiElement refNameElement=refExpr.getReferenceNameElement();
  PsiElement elt=refNameElement == null ? refExpr : refNameElement;
  Annotation annotation=holder.createInfoAnnotation(elt,null);
  if (refExprType == null) {
    if (resolved == null) {
      if (refExpr.getQualifierExpression() == null) {
        if (!(refExpr.getParent() instanceof GrCallExpression)) {
          registerCreateClassByTypeFix(refExpr,annotation,false);
        }
        registerAddImportFixes(refExpr,annotation);
      }
      registerReferenceFixes(refExpr,annotation);
    }
    annotation.setTextAttributes(DefaultHighlighter.UNTYPED_ACCESS);
  }
 else   if (refExprType instanceof PsiClassType && ((PsiClassType)refExprType).resolve() == null) {
    annotation.setTextAttributes(DefaultHighlighter.UNTYPED_ACCESS);
  }
}
