{
  GroovyResolveResult resolveResult=refExpr.advancedResolve();
  GroovyResolveResult[] results=refExpr.multiResolve(false);
  for (  GroovyResolveResult result : results) {
    registerUsedImport(refExpr,result);
  }
  PsiElement resolved=resolveResult.getElement();
  final PsiElement parent=refExpr.getParent();
  if (resolved != null) {
    if (resolved instanceof PsiMember) {
      highlightMemberResolved(holder,refExpr,((PsiMember)resolved));
    }
    if (!resolveResult.isAccessible()) {
      String message=GroovyBundle.message("cannot.access",refExpr.getReferenceName());
      holder.createWarningAnnotation(refExpr.getReferenceNameElement(),message);
    }
    if (!resolveResult.isStaticsOK() && resolved instanceof PsiModifierListOwner) {
      final String key=((PsiModifierListOwner)resolved).hasModifierProperty(PsiModifier.STATIC) ? "cannot.reference.static" : "cannot.reference.nonstatic";
      String message=GroovyBundle.message(key,refExpr.getReferenceName());
      holder.createWarningAnnotation(refExpr,message);
    }
  }
 else {
    GrExpression qualifier=refExpr.getQualifierExpression();
    if (qualifier == null && isDeclarationAssignment(refExpr))     return;
    if (parent instanceof GrReferenceExpression && "class".equals(((GrReferenceExpression)parent).getReferenceName())) {
      checkSingleResolvedElement(holder,refExpr,resolveResult);
    }
  }
  if (parent instanceof GrCall) {
    if (resolved == null && results.length > 0) {
      resolved=results[0].getElement();
      resolveResult=results[0];
    }
    if (resolved instanceof PsiMethod && resolved.getUserData(GrMethod.BUILDER_METHOD) == null) {
      checkMethodApplicability(resolveResult,refExpr,holder);
    }
 else {
      checkClosureApplicability(resolveResult,refExpr.getType(),refExpr,holder);
    }
  }
  if (isDeclarationAssignment(refExpr) || resolved instanceof PsiPackage)   return;
  if (resolved == null) {
    PsiElement refNameElement=refExpr.getReferenceNameElement();
    PsiElement elt=refNameElement == null ? refExpr : refNameElement;
    Annotation annotation=holder.createInfoAnnotation(elt,null);
    final GrExpression qualifier=refExpr.getQualifierExpression();
    if (qualifier == null) {
      if (!(parent instanceof GrCall)) {
        registerCreateClassByTypeFix(refExpr,annotation);
        registerAddImportFixes(refExpr,annotation);
      }
    }
 else {
      if (qualifier.getType() == null) {
        return;
      }
    }
    registerReferenceFixes(refExpr,annotation);
    annotation.setTextAttributes(DefaultHighlighter.UNRESOLVED_ACCESS);
  }
}
