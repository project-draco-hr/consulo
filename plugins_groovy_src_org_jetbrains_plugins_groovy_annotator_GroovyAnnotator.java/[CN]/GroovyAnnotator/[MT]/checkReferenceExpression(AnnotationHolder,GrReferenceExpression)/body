{
  GroovyResolveResult resolveResult=refExpr.advancedResolve();
  PsiElement element=resolveResult.getElement();
  if (element != null) {
    if (!resolveResult.isAccessible()) {
      String message=GroovyBundle.message("cannot.access",refExpr.getReferenceName());
      holder.createWarningAnnotation(refExpr,message);
    }
 else     if (element instanceof PsiMethod) {
      PsiType[] argumentTypes=PsiUtil.getArgumentTypes(refExpr);
      if (argumentTypes != null && !PsiUtil.isApplicable(argumentTypes,(PsiMethod)element)) {
        String message=GroovyBundle.message("cannot.apply.method",refExpr.getReferenceName());
        holder.createWarningAnnotation(refExpr,message);
      }
    }
  }
 else {
    if (refExpr.getQualifierExpression() == null) {
      GrMethod method=PsiTreeUtil.getParentOfType(refExpr,GrMethod.class);
      if (method != null && method.hasModifierProperty(PsiModifier.STATIC)) {
        Annotation annotation=holder.createErrorAnnotation(refExpr,GroovyBundle.message("cannot.resolve",refExpr.getReferenceName()));
        annotation.setHighlightType(ProblemHighlightType.LIKE_UNKNOWN_SYMBOL);
      }
    }
  }
}
