{
  GroovyResolveResult resolveResult=refExpr.advancedResolve();
  registerUsedImport(refExpr,resolveResult);
  PsiElement element=resolveResult.getElement();
  if (element != null) {
    if (!resolveResult.isAccessible()) {
      String message=GroovyBundle.message("cannot.access",refExpr.getReferenceName());
      holder.createWarningAnnotation(refExpr,message);
    }
 else     if (element instanceof PsiMethod && element.getUserData(GrMethod.BUILDER_METHOD) == null) {
      checkMethodApplicability(resolveResult,refExpr,holder);
    }
    if (isAssignmentLHS(refExpr) || element instanceof PsiPackage)     return;
  }
 else {
    if (isAssignmentLHS(refExpr))     return;
    GrExpression qualifier=refExpr.getQualifierExpression();
    if (qualifier == null) {
      GroovyPsiElement context=PsiTreeUtil.getParentOfType(refExpr,GrMethod.class,GrField.class,GrClosableBlock.class);
      if (context instanceof PsiModifierListOwner && ((PsiModifierListOwner)context).hasModifierProperty(PsiModifier.STATIC)) {
        Annotation annotation=holder.createErrorAnnotation(refExpr,GroovyBundle.message("cannot.resolve",refExpr.getReferenceName()));
        annotation.setHighlightType(ProblemHighlightType.LIKE_UNKNOWN_SYMBOL);
      }
 else {
        if (refExpr.getParent() instanceof GrReferenceExpression) {
          Annotation annotation=holder.createWarningAnnotation(refExpr,GroovyBundle.message("cannot.resolve",refExpr.getReferenceName()));
          if (refExpr.getQualifierExpression() == null) {
            registerCreateClassByTypeFix(refExpr,annotation,false);
            registerAddImportFixes(refExpr,annotation);
          }
        }
      }
    }
  }
  if (refExpr.getType() == null) {
    PsiElement refNameElement=refExpr.getReferenceNameElement();
    PsiElement elt=refNameElement == null ? refExpr : refNameElement;
    Annotation annotation=holder.createInformationAnnotation(elt,GroovyBundle.message("untyped.access",refExpr.getReferenceName()));
    annotation.setEnforcedTextAttributes(new TextAttributes(Color.black,null,Color.black,EffectType.LINE_UNDERSCORE,0));
  }
}
