{
  final PsiElement parent=referenceExpression.getParent();
  if (!(parent instanceof GrMethodCallExpression))   return null;
  GrArgumentList argumentList=((GrMethodCallExpression)parent).getArgumentList();
  final Element methodElement=DynamicManager.getInstance(referenceExpression.getProject()).findConcreteDynamicMethod(module.getName(),qualifiedName,referenceExpression.getName(),argumentList);
  if (methodElement != null)   return null;
  final Set<PsiClass> supers=GroovyUtils.findAllSupers(targetClass);
  Element superDynamicProperty;
  for (  PsiClass aSuper : supers) {
    superDynamicProperty=DynamicManager.getInstance(referenceExpression.getProject()).findConcreteDynamicProperty(module.getName(),aSuper.getQualifiedName(),referenceExpression.getName());
    if (superDynamicProperty != null)     return null;
  }
  return new DynamicVirtualMethod(referenceExpression.getName(),targetClass.getQualifiedName(),module.getName(),null,argumentList);
}
