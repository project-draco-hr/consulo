{
  final PsiElement parent=referenceExpression.getParent();
  if (!(parent instanceof GrMethodCallExpression))   return null;
  GrExpression[] expressionArgument=((GrMethodCallExpression)parent).getExpressionArguments();
  List<Pair<String,PsiType>> pairs=new ArrayList<Pair<String,PsiType>>();
  for (  GrExpression expression : expressionArgument) {
    final PsiType type=expression.getType();
    if (type == null)     return null;
    pairs.add(new Pair<String,PsiType>(GroovyElementPresentation.getExpressionPresentableText(expression),type));
  }
  final PsiType[] types=QuickfixUtil.getArgumentsTypes(pairs);
  final Element methodElement=DynamicManager.getInstance(referenceExpression.getProject()).findConcreteDynamicMethod(module.getName(),qualifiedName,referenceExpression.getName(),types);
  if (methodElement != null)   return null;
  final Set<PsiClass> supers=GroovyUtils.findAllSupers(targetClass);
  Element superDynamicMethod;
  for (  PsiClass aSuper : supers) {
    superDynamicMethod=DynamicManager.getInstance(referenceExpression.getProject()).findConcreteDynamicMethod(module.getName(),aSuper.getQualifiedName(),referenceExpression.getName(),types);
    if (superDynamicMethod != null)     return null;
  }
  return new DynamicVirtualMethod(referenceExpression.getName(),targetClass.getQualifiedName(),module.getName(),null,pairs);
}
