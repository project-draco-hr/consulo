{
  final PsiElement parent=referenceExpression.getParent();
  if (!(parent instanceof GrMethodCallExpression))   return null;
  GrArgumentList argumentList=((GrMethodCallExpression)parent).getArgumentList();
  final GrNamedArgument[] namedArguments;
  if (argumentList == null)   return null;
  namedArguments=argumentList.getNamedArguments();
  List<PsiType> types=new ArrayList<PsiType>();
  for (  GrNamedArgument namedArgument : namedArguments) {
    final GrArgumentLabel argumentLabel=namedArgument.getLabel();
    if (argumentLabel != null) {
      types.add(argumentLabel.getExpectedArgumentType());
    }
  }
  final Element methodElement=DynamicManager.getInstance(referenceExpression.getProject()).findConcreteDynamicMethod(module.getName(),qualifiedName,referenceExpression.getName(),types.toArray(PsiType.EMPTY_ARRAY));
  if (methodElement != null)   return null;
  final Set<PsiClass> supers=GroovyUtils.findAllSupers(targetClass);
  Element superDynamicMethod;
  for (  PsiClass aSuper : supers) {
    superDynamicMethod=DynamicManager.getInstance(referenceExpression.getProject()).findConcreteDynamicMethod(module.getName(),aSuper.getQualifiedName(),referenceExpression.getName(),types.toArray(PsiType.EMPTY_ARRAY));
    if (superDynamicMethod != null)     return null;
  }
  return new DynamicVirtualMethod(referenceExpression.getName(),targetClass.getQualifiedName(),module.getName(),null,types.toArray(PsiType.EMPTY_ARRAY));
}
