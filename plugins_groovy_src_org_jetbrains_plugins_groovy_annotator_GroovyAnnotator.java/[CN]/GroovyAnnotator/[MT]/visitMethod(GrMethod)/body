{
  checkMethodWithTypeParamsShouldHaveReturnType(myHolder,method);
  checkInnerMethod(myHolder,method);
  checkMethodParameters(myHolder,method);
  GrOpenBlock block=method.getBlock();
  if (block != null && TypeInferenceHelper.isTooComplexTooAnalyze(block)) {
    myHolder.createWeakWarningAnnotation(method.getNameIdentifierGroovy(),GroovyBundle.message("method.0.is.too.complex.too.analyze",method.getName()));
  }
  if (method.isConstructor() && method.getContainingClass() instanceof GrAnonymousClassDefinition) {
    myHolder.createErrorAnnotation(method.getNameIdentifierGroovy(),GroovyBundle.message("constructors.are.not.allowed.in.anonymous.class"));
  }
  if (!method.hasModifierProperty(ABSTRACT) && method.getBlock() == null) {
    final Annotation annotation=myHolder.createErrorAnnotation(method.getNameIdentifierGroovy(),GroovyBundle.message("not.abstract.method.should.have.body"));
    annotation.registerFix(new AddMethodBodyFix(method));
  }
}
