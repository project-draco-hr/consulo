{
  String text=regex.getText();
  String quote=GrStringUtil.getStartQuote(text);
  final GroovyConfigUtils config=GroovyConfigUtils.getInstance();
  if ("$/".equals(quote)) {
    if (!config.isVersionAtLeast(regex,GroovyConfigUtils.GROOVY1_9)) {
      myHolder.createErrorAnnotation(regex,GroovyBundle.message("dollar.slash.strings.are.not.allowed.in.0",config.getSDKVersion(regex)));
    }
    if (regex.getParent() instanceof GrCommandArgumentList && ((GrCommandArgumentList)regex.getParent()).getAllArguments()[0] == regex) {
      final Annotation annotation=myHolder.createErrorAnnotation(regex,GroovyBundle.message("regex.cannot.be.first.argument.of.command.method.call"));
      annotation.registerFix(new AddParenthesesFix());
      return;
    }
  }
  for (  String part : regex.getTextParts()) {
    if (!GrStringUtil.parseRegexCharacters(part,new StringBuilder(part.length()),null,regex.getText().startsWith("/"))) {
      myHolder.createErrorAnnotation(regex,GroovyBundle.message("illegal.escape.character.in.string.literal"));
      return;
    }
  }
  if ("/".equals(quote)) {
    if (!config.isVersionAtLeast(regex,GroovyConfigUtils.GROOVY1_8)) {
      if (text.contains("\n") || text.contains("\r")) {
        myHolder.createErrorAnnotation(regex,GroovyBundle.message("multiline.slashy.strings.are.not.allowed.in.groovy.0",config.getSDKVersion(regex)));
        return;
      }
    }
  }
  if (regex.getInjections().length > 0) {
    if (!config.isVersionAtLeast(regex,GroovyConfigUtils.GROOVY1_8)) {
      myHolder.createErrorAnnotation(regex,GroovyBundle.message("slashy.strings.with.injections.are.not.allowed.in.groovy.0",config.getSDKVersion(regex)));
    }
  }
}
