{
  boolean hasPrivate=modifierList.hasExplicitModifier(PRIVATE);
  boolean hasPublic=modifierList.hasExplicitModifier(PUBLIC);
  boolean hasProtected=modifierList.hasExplicitModifier(PROTECTED);
  if (hasPrivate && hasPublic || hasPrivate && hasProtected || hasPublic && hasProtected) {
    final Annotation annotation=holder.createErrorAnnotation(modifierList,GroovyBundle.message("illegal.combination.of.modifiers"));
    if (hasPrivate) {
      annotation.registerFix(new GrModifierFix(member,modifierList,PRIVATE,false,false));
    }
    if (hasProtected) {
      annotation.registerFix(new GrModifierFix(member,modifierList,PROTECTED,false,false));
    }
    if (hasPublic) {
      annotation.registerFix(new GrModifierFix(member,modifierList,PUBLIC,false,false));
    }
  }
 else   if (member instanceof PsiMethod && member.getContainingClass() instanceof GrInterfaceDefinition && hasPublic&& !GroovyConfigUtils.getInstance().isVersionAtLeast(member,"1.8.4")) {
    final PsiElement publicModifier=ObjectUtils.assertNotNull(PsiUtil.findModifierInList(modifierList,PUBLIC));
    holder.createErrorAnnotation(publicModifier,GroovyBundle.message("public.modifier.is.not.allowed.in.interfaces")).registerFix(new GrModifierFix(member,modifierList,PUBLIC,false,false));
  }
 else   if (member instanceof PsiClass && member.getContainingClass() == null && GroovyConfigUtils.getInstance().isVersionAtLeast(member,GroovyConfigUtils.GROOVY2_0)) {
    checkModifierIsNotAllowed(modifierList,PRIVATE,GroovyBundle.message("top.level.class.maynot.have.private.modifier"),holder);
    checkModifierIsNotAllowed(modifierList,PROTECTED,GroovyBundle.message("top.level.class.maynot.have.protected.modifier"),holder);
  }
}
