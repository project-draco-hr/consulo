{
  final GroovyConfigUtils configUtils=GroovyConfigUtils.getInstance();
  if (typeDefinition.isAnnotationType()) {
    Annotation annotation=holder.createInfoAnnotation(typeDefinition.getNameIdentifierGroovy(),null);
    annotation.setTextAttributes(DefaultHighlighter.ANNOTATION);
  }
 else   if (typeDefinition.isAnonymous()) {
    if (!configUtils.isVersionAtLeast(typeDefinition,GroovyConfigUtils.GROOVY1_7)) {
      holder.createErrorAnnotation(typeDefinition.getNameIdentifierGroovy(),GroovyBundle.message("anonymous.classes.are.not.supported",configUtils.getSDKVersion(typeDefinition)));
    }
  }
 else   if (typeDefinition.getContainingClass() != null && !(typeDefinition instanceof GrEnumTypeDefinition)) {
    if (!configUtils.isVersionAtLeast(typeDefinition,GroovyConfigUtils.GROOVY1_7)) {
      holder.createErrorAnnotation(typeDefinition.getNameIdentifierGroovy(),GroovyBundle.message("inner.classes.are.not.supported",configUtils.getSDKVersion(typeDefinition)));
    }
  }
  final GrImplementsClause implementsClause=typeDefinition.getImplementsClause();
  final GrExtendsClause extendsClause=typeDefinition.getExtendsClause();
  if (implementsClause != null) {
    checkForImplementingClass(holder,extendsClause,implementsClause,((GrTypeDefinition)implementsClause.getParent()));
  }
  if (extendsClause != null) {
    checkForExtendingInterface(holder,extendsClause,implementsClause,((GrTypeDefinition)extendsClause.getParent()));
  }
  checkForWildCards(holder,extendsClause);
  checkForWildCards(holder,implementsClause);
  checkDuplicateClass(typeDefinition,holder);
  checkCyclicInheritance(holder,typeDefinition);
}
