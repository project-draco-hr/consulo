{
  final GrAnnotation annotation=(GrAnnotation)annotationArgumentList.getParent();
  final PsiClass annot=ResolveUtil.resolveAnnotation(annotationArgumentList);
  if (annot == null)   return;
  if ("groovy.lang.Newify".equals(annot.getQualifiedName()) && annotation.getParameterList().getAttributes().length == 0) {
    return;
  }
  final GrAnnotationNameValuePair[] attributes=annotationArgumentList.getAttributes();
  Set<String> usedAttrs=new HashSet<String>();
  if (attributes.length == 1 && attributes[0].getNameIdentifierGroovy() == null) {
    checkAnnotationValue(annot,attributes[0],"value",usedAttrs,attributes[0].getValue());
  }
 else {
    for (    GrAnnotationNameValuePair attribute : attributes) {
      final PsiElement identifier=attribute.getNameIdentifierGroovy();
      final String name=identifier.getText();
      checkAnnotationValue(annot,identifier,name,usedAttrs,attribute.getValue());
    }
  }
  List<String> missedAttrs=new ArrayList<String>();
  final PsiMethod[] methods=annot.getMethods();
  for (  PsiMethod method : methods) {
    final String name=method.getName();
    if (usedAttrs.contains(name) || method instanceof PsiAnnotationMethod && ((PsiAnnotationMethod)method).getDefaultValue() != null) {
      continue;
    }
    missedAttrs.add(name);
  }
  if (!missedAttrs.isEmpty()) {
    myHolder.createErrorAnnotation(annotation.getClassReference(),GroovyBundle.message("missed.attributes",StringUtil.join(missedAttrs,", ")));
  }
}
