{
  PsiClass targetClass=QuickfixUtil.findTargetClass(refExpr);
  if (targetClass == null)   return;
  final DynamicVirtualElement virtualElement=getDynamicAnnotation(refExpr,targetClass);
  if (virtualElement != null && refExpr.resolve() == null) {
    addDynamicAnnotation(annotation,refExpr,virtualElement);
  }
  if (targetClass instanceof GrMemberOwner) {
    if (!(targetClass instanceof GroovyScriptClass)) {
      annotation.registerFix(new CreateFieldFromUsageFix(refExpr,(GrMemberOwner)targetClass));
    }
    if (refExpr.getParent() instanceof GrCallExpression) {
      annotation.registerFix(new CreateMethodFromUsageFix(refExpr,(GrMemberOwner)targetClass));
    }
  }
  if (!refExpr.isQualified()) {
    GrVariableDeclarationOwner owner=PsiTreeUtil.getParentOfType(refExpr,GrVariableDeclarationOwner.class);
    if (!(owner instanceof GroovyFileBase) || ((GroovyFileBase)owner).isScript()) {
      annotation.registerFix(new CreateLocalVariableFromUsageFix(refExpr,owner));
    }
  }
}
