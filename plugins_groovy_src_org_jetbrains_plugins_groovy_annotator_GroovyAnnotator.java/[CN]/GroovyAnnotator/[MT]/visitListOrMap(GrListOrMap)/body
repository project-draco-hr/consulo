{
  final PsiReference constructorReference=listOrMap.getReference();
  if (constructorReference != null) {
    final PsiElement startToken=listOrMap.getFirstChild();
    if (startToken != null && startToken.getNode().getElementType() == GroovyTokenTypes.mLBRACK) {
      myHolder.createInfoAnnotation(startToken,null).setTextAttributes(DefaultHighlighter.LITERAL_CONVERSION);
    }
    final PsiElement endToken=listOrMap.getLastChild();
    if (endToken != null && endToken.getNode().getElementType() == GroovyTokenTypes.mRBRACK) {
      myHolder.createInfoAnnotation(endToken,null).setTextAttributes(DefaultHighlighter.LITERAL_CONVERSION);
    }
    if (constructorReference instanceof LiteralConstructorReference) {
      final LiteralConstructorReference ref=(LiteralConstructorReference)constructorReference;
      if (!ref.isConstructorCallCorrect()) {
        final String className=ref.getConstructedClassType().getPresentableText();
        final GrNamedArgument superArg=listOrMap.findNamedArgument("super");
        PsiElement toHighlight=superArg != null ? superArg.getExpression() : null;
        myHolder.createWarningAnnotation(toHighlight == null ? listOrMap : toHighlight,"Cannot find constructor of '" + className + "'");
      }
    }
  }
  checkNamedArgs(listOrMap.getNamedArguments(),false);
}
