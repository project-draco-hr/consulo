{
  for (  PsiType type : GroovyExpectedTypesProvider.getDefaultExpectedTypes(listOrMap)) {
    if (type instanceof PsiClassType && !InheritanceUtil.isInheritor(type,CommonClassNames.JAVA_LANG_ITERABLE) && !InheritanceUtil.isInheritor(type,CommonClassNames.JAVA_UTIL_MAP)) {
      final PsiElement startToken=listOrMap.getFirstChild();
      if (startToken != null && startToken.getNode().getElementType() == GroovyTokenTypes.mLBRACK) {
        myHolder.createInfoAnnotation(startToken,null).setTextAttributes(DefaultHighlighter.LITERAL_CONVERSION);
      }
      final PsiElement endToken=listOrMap.getLastChild();
      if (endToken != null && endToken.getNode().getElementType() == GroovyTokenTypes.mRBRACK) {
        myHolder.createInfoAnnotation(endToken,null).setTextAttributes(DefaultHighlighter.LITERAL_CONVERSION);
      }
    }
  }
  MultiMap<String,GrNamedArgument> map=new MultiMap<String,GrNamedArgument>();
  for (  GrNamedArgument element : listOrMap.getNamedArguments()) {
    final GrArgumentLabel label=element.getLabel();
    if (label != null) {
      final String name=label.getName();
      if (name != null) {
        map.putValue(name,element);
      }
    }
  }
  for (  String key : map.keySet()) {
    final Collection<GrNamedArgument> arguments=map.get(key);
    if (arguments.size() > 1) {
      final List<GrNamedArgument> args=new ArrayList<GrNamedArgument>(arguments);
      for (int i=1; i < args.size(); i++) {
        GrNamedArgument namedArgument=args.get(i);
        myHolder.createWarningAnnotation(namedArgument.getLabel(),GroovyBundle.message("duplicate.element.in.the.map"));
      }
    }
  }
}
