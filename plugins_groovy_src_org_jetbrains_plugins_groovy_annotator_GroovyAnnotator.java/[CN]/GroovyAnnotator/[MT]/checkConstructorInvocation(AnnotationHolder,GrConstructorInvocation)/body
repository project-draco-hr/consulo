{
  final GroovyResolveResult resolveResult=invocation.resolveConstructorGenerics();
  if (resolveResult != null) {
    checkMethodApplicability(resolveResult,invocation.getThisOrSuperKeyword(),holder);
  }
 else {
    final GroovyResolveResult[] results=invocation.multiResolveConstructor();
    final GrArgumentList argList=invocation.getArgumentList();
    if (results.length > 0) {
      String message=GroovyBundle.message("ambiguous.constructor.call");
      holder.createWarningAnnotation(argList,message);
    }
 else {
      final PsiClass clazz=invocation.getDelegatedClass();
      if (clazz != null) {
        PsiType[] argumentTypes=PsiUtil.getArgumentTypes(invocation.getThisOrSuperKeyword(),true,true);
        if (argumentTypes != null && argumentTypes.length > 0) {
          String message=GroovyBundle.message("cannot.find.default.constructor",clazz.getName());
          holder.createWarningAnnotation(argList,message);
        }
      }
    }
  }
}
