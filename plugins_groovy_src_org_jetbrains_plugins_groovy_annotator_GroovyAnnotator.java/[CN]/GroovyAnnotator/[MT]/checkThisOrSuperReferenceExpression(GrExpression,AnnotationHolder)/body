{
  final GrReferenceExpression qualifier=expression instanceof GrThisReferenceExpression ? ((GrThisReferenceExpression)expression).getQualifier() : ((GrSuperReferenceExpression)expression).getQualifier();
  if (qualifier == null) {
    final GrMethod method=PsiTreeUtil.getParentOfType(expression,GrMethod.class);
    if (method != null && method.hasModifierProperty(PsiModifier.STATIC)) {
      holder.createErrorAnnotation(expression,GroovyBundle.message("cannot.reference.nonstatic",expression.getText()));
    }
  }
 else {
    final PsiElement resolved=qualifier.resolve();
    if (resolved instanceof PsiClass) {
      if (PsiTreeUtil.isAncestor(resolved,expression,true)) {
        if (!PsiUtil.hasEnclosingInstanceInScope((PsiClass)resolved,expression,true)) {
          holder.createErrorAnnotation(expression,GroovyBundle.message("cannot.reference.nonstatic",expression.getText()));
        }
      }
 else {
        holder.createErrorAnnotation(expression,GroovyBundle.message("is.not.enclosing.class",((PsiClass)resolved).getQualifiedName()));
      }
    }
 else {
      holder.createErrorAnnotation(qualifier,GroovyBundle.message("unknown.class",qualifier.getText()));
    }
  }
}
