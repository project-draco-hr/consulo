{
  StringBuilder builder=new StringBuilder(text.length());
  String quote=GrStringUtil.getStartQuote(text);
  if (quote.isEmpty())   return;
  String substring=text.substring(quote.length());
  String[] parts;
  IElementType elementType=literal.getFirstChild().getNode().getElementType();
  boolean isSimpleString=elementType == GroovyTokenTypes.mSTRING_LITERAL || elementType == GroovyTokenTypes.mGSTRING_LITERAL || elementType == GroovyTokenTypes.mREGEX_LITERAL;
  if (isSimpleString) {
    parts=new String[]{substring};
  }
 else   if (literal instanceof GrString) {
    parts=((GrString)literal).getTextParts();
  }
 else {
    return;
  }
  for (  String part : parts) {
    if (!GrStringUtil.parseStringCharacters(part,new StringBuilder(text.length()),null,!quote.equals("/"))) {
      myHolder.createErrorAnnotation(literal,GroovyBundle.message("illegal.escape.character.in.string.literal"));
      return;
    }
  }
  if (isSimpleString) {
    int[] offsets=new int[substring.length() + 1];
    boolean result=GrStringUtil.parseStringCharacters(substring,builder,offsets,!quote.equals("/"));
    LOG.assertTrue(result);
    if (!builder.toString().endsWith(quote) || substring.charAt(offsets[builder.length() - quote.length()]) == '\\') {
      myHolder.createErrorAnnotation(literal,GroovyBundle.message("string.end.expected"));
      return;
    }
  }
 else {
    LOG.assertTrue(literal instanceof GrString);
  }
  if (quote.equals("/")) {
    if (!GroovyConfigUtils.getInstance().isVersionAtLeast(literal,GroovyConfigUtils.GROOVY1_8)) {
      if (text.contains("\n") || text.contains("\r")) {
        myHolder.createErrorAnnotation(literal,GroovyBundle.message("multiline.slashy.strings.are.not.allowed.in.groovy.0",GroovyConfigUtils.getInstance().getSDKVersion(literal)));
        return;
      }
    }
  }
  if (literal instanceof GrRegex) {
    if (!GroovyConfigUtils.getInstance().isVersionAtLeast(literal,GroovyConfigUtils.GROOVY1_8)) {
      myHolder.createErrorAnnotation(literal,GroovyBundle.message("slashy.strings.with.injections.are.not.allowed.in.groovy.0",GroovyConfigUtils.getInstance().getSDKVersion(literal)));
      return;
    }
  }
}
