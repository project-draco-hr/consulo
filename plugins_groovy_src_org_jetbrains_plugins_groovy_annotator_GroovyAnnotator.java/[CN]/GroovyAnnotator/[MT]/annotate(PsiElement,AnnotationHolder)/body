{
  if (element instanceof GrCodeReferenceElement) {
    checkReferenceElement(holder,(GrCodeReferenceElement)element);
  }
 else   if (element instanceof GrReferenceExpression) {
    checkReferenceExpression(holder,(GrReferenceExpression)element);
  }
 else   if (element instanceof GrTypeDefinition) {
    checkTypeDefinition(holder,(GrTypeDefinition)element);
    checkTypeDefinitionModifiers(holder,(GrTypeDefinition)element);
    checkDuplicateMethod(((GrTypeDefinition)element).getBody().getMethods(),holder);
  }
 else   if (element instanceof GrMethod) {
    checkMethodDefinitionModifiers(holder,(GrMethod)element);
    checkInnerMethod(holder,(GrMethod)element);
  }
 else   if (element instanceof GrVariableDeclaration) {
    checkVariableDeclaration(holder,(GrVariableDeclaration)element);
  }
 else   if (element instanceof GrVariable) {
    checkVariable(holder,(GrVariable)element);
  }
 else   if (element instanceof GrAssignmentExpression) {
    checkAssignmentExpression((GrAssignmentExpression)element,holder);
  }
 else   if (element instanceof GrNamedArgument) {
    checkCommandArgument((GrNamedArgument)element,holder);
  }
 else   if (element instanceof GrReturnStatement) {
    checkReturnStatement((GrReturnStatement)element,holder);
  }
 else   if (element instanceof GrListOrMap) {
    checkMap(((GrListOrMap)element).getNamedArguments(),holder);
  }
 else   if (element instanceof GrNewExpression) {
    checkNewExpression(holder,(GrNewExpression)element);
  }
 else   if (element instanceof GrConstructorInvocation) {
    checkConstructorInvocation(holder,(GrConstructorInvocation)element);
  }
 else   if (element instanceof GroovyFile) {
    final GroovyFile file=(GroovyFile)element;
    if (file.isScript()) {
      checkScriptDuplicateMethod(file.getTopLevelDefinitions(),holder);
    }
    if (DomainClassUtils.isDomainClass(element.getContainingFile().getVirtualFile())) {
      checkDomainClass((GroovyFile)element,holder);
    }
  }
 else   if (!(element instanceof PsiWhiteSpace) && element.getContainingFile() instanceof GroovyFile) {
    GroovyImportsTracker.getInstance(element.getProject()).markFileAnnotated((GroovyFile)element.getContainingFile());
  }
}
