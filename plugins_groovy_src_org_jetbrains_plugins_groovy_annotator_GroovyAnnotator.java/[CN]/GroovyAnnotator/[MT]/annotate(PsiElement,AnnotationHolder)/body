{
  if (element instanceof GrCodeReferenceElement) {
    checkReferenceElement(holder,(GrCodeReferenceElement)element);
  }
 else   if (element instanceof GrReferenceExpression) {
    checkReferenceExpression(holder,(GrReferenceExpression)element);
  }
 else   if (element instanceof GrTypeDefinition) {
    final GrTypeDefinition typeDefinition=(GrTypeDefinition)element;
    checkTypeDefinition(holder,typeDefinition);
    checkTypeDefinitionModifiers(holder,typeDefinition);
    final GrTypeDefinitionBody body=typeDefinition.getBody();
    if (body != null)     checkDuplicateMethod(body.getGroovyMethods(),holder);
    checkImplementedMethodsOfClass(holder,typeDefinition);
  }
 else   if (element instanceof GrMethod) {
    final GrMethod method=(GrMethod)element;
    checkMethodDefinitionModifiers(holder,method);
    checkInnerMethod(holder,method);
    checkMethodReturnExpression(holder,method);
    addOverrideGutter(holder,method);
  }
 else   if (element instanceof GrVariableDeclaration) {
    checkVariableDeclaration(holder,(GrVariableDeclaration)element);
  }
 else   if (element instanceof GrVariable) {
    if (element instanceof GrMember)     highlightMember(holder,((GrMember)element));
    checkVariable(holder,(GrVariable)element);
  }
 else   if (element instanceof GrAssignmentExpression) {
    checkAssignmentExpression((GrAssignmentExpression)element,holder);
  }
 else   if (element instanceof GrNamedArgument) {
    checkCommandArgument((GrNamedArgument)element,holder);
  }
 else   if (element instanceof GrReturnStatement) {
    checkReturnStatement((GrReturnStatement)element,holder);
  }
 else   if (element instanceof GrListOrMap) {
    checkMap(((GrListOrMap)element).getNamedArguments(),holder);
  }
 else   if (element instanceof GrNewExpression) {
    checkNewExpression(holder,(GrNewExpression)element);
  }
 else   if (element instanceof GrConstructorInvocation) {
    checkConstructorInvocation(holder,(GrConstructorInvocation)element);
  }
 else   if (element.getParent() instanceof GrDocReferenceElement) {
    checkGrDocReferenceElement(holder,element);
  }
 else   if (element instanceof GrPackageDefinition) {
    checkPackageReference(holder,(GrPackageDefinition)element);
  }
 else   if (element instanceof GroovyFile) {
    final GroovyFile file=(GroovyFile)element;
    if (file.isScript()) {
      checkScriptDuplicateMethod(file.getTopLevelDefinitions(),holder);
    }
    if (DomainClassUtils.isDomainClassFile(element.getContainingFile().getVirtualFile())) {
      checkDomainClass((GroovyFile)element,holder);
    }
  }
 else {
    final ASTNode node=element.getNode();
    if (node != null && !(element instanceof PsiWhiteSpace) && !GroovyTokenTypes.COMMENT_SET.contains(node.getElementType()) && element.getContainingFile() instanceof GroovyFile && !isDocCommentElement(element)) {
      GroovyImportsTracker.getInstance(element.getProject()).markFileAnnotated((GroovyFile)element.getContainingFile());
    }
  }
}
