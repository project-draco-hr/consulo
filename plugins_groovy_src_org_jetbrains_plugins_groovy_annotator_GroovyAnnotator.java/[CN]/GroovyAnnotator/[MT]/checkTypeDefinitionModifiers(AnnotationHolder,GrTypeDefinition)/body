{
  GrModifierListImpl modifiersList=(GrModifierListImpl)grTypeDefinition.getModifierList();
  if (modifiersList == null)   return;
  checkAccessModifies(holder,modifiersList);
  if (modifiersList.hasClassImplicitModifier(PsiModifier.ABSTRACT) && modifiersList.hasClassImplicitModifier(PsiModifier.FINAL)) {
    holder.createErrorAnnotation(modifiersList,GroovyBundle.message("illegal.combination.of.modifiers.abstract.and.final"));
  }
  if (modifiersList.hasClassImplicitModifier(PsiModifier.TRANSIENT)) {
    holder.createErrorAnnotation(modifiersList,GroovyBundle.message("modifier.transient.not.allowed.here"));
  }
  if (modifiersList.hasClassImplicitModifier(PsiModifier.VOLATILE)) {
    holder.createErrorAnnotation(modifiersList,GroovyBundle.message("modifier.volatile.not.allowed.here"));
  }
  if (grTypeDefinition.isInterface()) {
    if (modifiersList.hasClassImplicitModifier(PsiModifier.FINAL)) {
      holder.createErrorAnnotation(modifiersList,GroovyBundle.message("intarface.cannot.have.modifier.final"));
    }
    if (modifiersList.hasClassImplicitModifier(PsiModifier.VOLATILE)) {
      holder.createErrorAnnotation(modifiersList,GroovyBundle.message("modifier.volatile.not.allowed.here"));
    }
    if (modifiersList.hasClassImplicitModifier(PsiModifier.TRANSIENT)) {
      holder.createErrorAnnotation(modifiersList,GroovyBundle.message("modifier.transient.not.allowed.here"));
    }
  }
}
