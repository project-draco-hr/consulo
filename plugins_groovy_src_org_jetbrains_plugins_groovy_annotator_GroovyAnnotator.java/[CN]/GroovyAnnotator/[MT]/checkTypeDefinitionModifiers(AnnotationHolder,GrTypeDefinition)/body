{
  PsiModifierList modifiersList=typeDefinition.getModifierList();
  if (modifiersList == null)   return;
  checkAccessModifiers(holder,modifiersList);
  PsiClassType[] extendsListTypes=typeDefinition.getExtendsListTypes();
  for (  PsiClassType classType : extendsListTypes) {
    PsiClass psiClass=classType.resolve();
    if (psiClass != null) {
      PsiModifierList modifierList=psiClass.getModifierList();
      if (modifierList != null) {
        if (modifierList.hasExplicitModifier(PsiModifier.FINAL)) {
          holder.createErrorAnnotation(typeDefinition.getNameIdentifierGroovy(),GroovyBundle.message("final.class.cannot.be.extended"));
        }
      }
    }
  }
  if (modifiersList.hasExplicitModifier(PsiModifier.ABSTRACT) && modifiersList.hasExplicitModifier(PsiModifier.FINAL)) {
    holder.createErrorAnnotation(modifiersList,GroovyBundle.message("illegal.combination.of.modifiers.abstract.and.final"));
  }
  if (modifiersList.hasExplicitModifier(PsiModifier.TRANSIENT)) {
    holder.createErrorAnnotation(modifiersList,GroovyBundle.message("modifier.transient.not.allowed.here"));
  }
  if (modifiersList.hasExplicitModifier(PsiModifier.VOLATILE)) {
    holder.createErrorAnnotation(modifiersList,GroovyBundle.message("modifier.volatile.not.allowed.here"));
  }
  if (typeDefinition.isInterface()) {
    if (modifiersList.hasExplicitModifier(PsiModifier.FINAL)) {
      holder.createErrorAnnotation(modifiersList,GroovyBundle.message("intarface.cannot.have.modifier.final"));
    }
    if (modifiersList.hasExplicitModifier(PsiModifier.VOLATILE)) {
      holder.createErrorAnnotation(modifiersList,GroovyBundle.message("modifier.volatile.not.allowed.here"));
    }
    if (modifiersList.hasExplicitModifier(PsiModifier.TRANSIENT)) {
      holder.createErrorAnnotation(modifiersList,GroovyBundle.message("modifier.transient.not.allowed.here"));
    }
  }
  checkStaticDeclarationsInInnerClass(typeDefinition,holder);
}
