{
  GrModifierList modifiersList=typeDefinition.getModifierList();
  if (modifiersList == null)   return;
  checkAccessModifiers(holder,modifiersList,typeDefinition);
  checkDuplicateModifiers(holder,modifiersList,typeDefinition);
  PsiClassType[] extendsListTypes=typeDefinition.getExtendsListTypes();
  for (  PsiClassType classType : extendsListTypes) {
    PsiClass psiClass=classType.resolve();
    if (psiClass != null) {
      PsiModifierList modifierList=psiClass.getModifierList();
      if (modifierList != null) {
        if (modifierList.hasExplicitModifier(GrModifier.FINAL)) {
          final Annotation annotation=holder.createErrorAnnotation(typeDefinition.getNameIdentifierGroovy(),GroovyBundle.message("final.class.cannot.be.extended"));
          annotation.registerFix(new GrModifierFix(typeDefinition,modifiersList,GrModifier.FINAL,false,false));
        }
      }
    }
  }
  if (modifiersList.hasExplicitModifier(GrModifier.ABSTRACT) && modifiersList.hasExplicitModifier(GrModifier.FINAL)) {
    final Annotation annotation=holder.createErrorAnnotation(modifiersList,GroovyBundle.message("illegal.combination.of.modifiers.abstract.and.final"));
    annotation.registerFix(new GrModifierFix(typeDefinition,modifiersList,GrModifier.FINAL,false,false));
    annotation.registerFix(new GrModifierFix(typeDefinition,modifiersList,GrModifier.ABSTRACT,false,false));
  }
  if (modifiersList.hasExplicitModifier(GrModifier.TRANSIENT)) {
    final Annotation annotation=holder.createErrorAnnotation(modifiersList,GroovyBundle.message("modifier.transient.not.allowed.here"));
    annotation.registerFix(new GrModifierFix(typeDefinition,modifiersList,GrModifier.TRANSIENT,false,false));
  }
  if (modifiersList.hasExplicitModifier(GrModifier.VOLATILE)) {
    final Annotation annotation=holder.createErrorAnnotation(modifiersList,GroovyBundle.message("modifier.volatile.not.allowed.here"));
    annotation.registerFix(new GrModifierFix(typeDefinition,modifiersList,GrModifier.VOLATILE,false,false));
  }
  if (typeDefinition.isInterface()) {
    if (modifiersList.hasExplicitModifier(GrModifier.FINAL)) {
      final Annotation annotation=holder.createErrorAnnotation(modifiersList,GroovyBundle.message("intarface.cannot.have.modifier.final"));
      annotation.registerFix(new GrModifierFix(typeDefinition,modifiersList,GrModifier.FINAL,false,false));
    }
  }
  checkStaticDeclarationsInInnerClass(typeDefinition,holder);
}
