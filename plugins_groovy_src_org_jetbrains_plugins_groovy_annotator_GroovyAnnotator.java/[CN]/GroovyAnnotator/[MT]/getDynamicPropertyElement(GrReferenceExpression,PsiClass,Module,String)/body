{
  final Element propertyElement=DynamicManager.getInstance(referenceExpression.getProject()).findConcreteDynamicProperty(module.getName(),qualifiedName,referenceExpression.getName());
  if (propertyElement != null)   return null;
  final Set<PsiClass> supers=GroovyUtils.findAllSupers(targetClass);
  Element superDynamicProperty;
  for (  PsiClass aSuper : supers) {
    superDynamicProperty=DynamicManager.getInstance(referenceExpression.getProject()).findConcreteDynamicProperty(module.getName(),aSuper.getQualifiedName(),referenceExpression.getName());
    if (superDynamicProperty != null)     return null;
  }
  return new DynamicVirtualProperty(referenceExpression.getName(),targetClass.getQualifiedName(),module.getName(),null);
}
