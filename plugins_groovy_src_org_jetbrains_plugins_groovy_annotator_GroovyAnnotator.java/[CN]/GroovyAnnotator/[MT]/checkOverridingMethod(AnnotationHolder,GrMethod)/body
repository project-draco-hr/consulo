{
  final List<HierarchicalMethodSignature> signatures=method.getHierarchicalMethodSignature().getSuperSignatures();
  for (  HierarchicalMethodSignature signature : signatures) {
    final PsiMethod superMethod=signature.getMethod();
    if (superMethod.hasModifierProperty(FINAL)) {
      final String current=GroovyPresentationUtil.getSignaturePresentation(method.getSignature(PsiSubstitutor.EMPTY));
      final String superPresentation=GroovyPresentationUtil.getSignaturePresentation(signature);
      final String superQName=getQNameOfMember(superMethod);
      holder.createErrorAnnotation(GrHighlightUtil.getMethodHeaderTextRange(method),GroovyBundle.message("method.0.cannot.override.method.1.in.2.overridden.method.is.final",current,superPresentation,superQName));
      return;
    }
    final String currentModifier=VisibilityUtil.getVisibilityModifier(method.getModifierList());
    final String superModifier=VisibilityUtil.getVisibilityModifier(superMethod.getModifierList());
    if (PUBLIC.equals(superModifier) && (PROTECTED.equals(currentModifier) || PRIVATE.equals(currentModifier)) || PROTECTED.equals(superModifier) && PRIVATE.equals(currentModifier)) {
      final String currentPresentation=GroovyPresentationUtil.getSignaturePresentation(method.getSignature(PsiSubstitutor.EMPTY));
      final String superPresentation=GroovyPresentationUtil.getSignaturePresentation(signature);
      final String superQName=getQNameOfMember(superMethod);
      final PsiElement modifier=PsiUtil.findModifierInList(method.getModifierList(),currentModifier);
      holder.createErrorAnnotation(modifier != null ? modifier : method.getNameIdentifierGroovy(),GroovyBundle.message("method.0.cannot.have.weaker.access.privileges.1.than.2.in.3.4",currentPresentation,currentModifier,superPresentation,superQName,superModifier));
    }
  }
}
