{
  PsiElement parent=typeArgumentList.getParent();
  if (!(parent instanceof GrReferenceElement))   return;
  final GroovyResolveResult resolveResult=((GrReferenceElement)parent).advancedResolve();
  final PsiElement resolved=resolveResult.getElement();
  final PsiSubstitutor substitutor=resolveResult.getSubstitutor();
  if (resolved == null)   return;
  if (!(resolved instanceof PsiTypeParameterListOwner)) {
    myHolder.createWarningAnnotation(typeArgumentList,GroovyBundle.message("type.argument.list.is.not.allowed.here"));
    return;
  }
  if (parent instanceof GrCodeReferenceElement) {
    if (!checkDiamonds((GrCodeReferenceElement)parent,myHolder))     return;
  }
  final PsiTypeParameter[] parameters=((PsiTypeParameterListOwner)resolved).getTypeParameters();
  final GrTypeElement[] arguments=typeArgumentList.getTypeArgumentElements();
  if (arguments.length != parameters.length) {
    myHolder.createWarningAnnotation(typeArgumentList,GroovyBundle.message("wrong.number.of.type.arguments",arguments.length,parameters.length));
    return;
  }
  for (int i=0; i < parameters.length; i++) {
    PsiTypeParameter parameter=parameters[i];
    final PsiClassType[] superTypes=parameter.getExtendsListTypes();
    final PsiType argType=arguments[i].getType();
    for (    PsiClassType superType : superTypes) {
      final PsiType substitutedSuper=substitutor.substitute(superType);
      if (substitutedSuper != null && !substitutedSuper.isAssignableFrom(argType)) {
        myHolder.createWarningAnnotation(arguments[i],GroovyBundle.message("type.argument.0.is.not.in.its.bound.should.extend.1",argType.getCanonicalText(),superType.getCanonicalText()));
        break;
      }
    }
  }
}
