{
  if (typeDefinition.hasModifierProperty(PsiModifier.ABSTRACT))   return;
  if (typeDefinition.isInterface())   return;
  List<MethodSignature> implementedClassesMethodsSignatures=new ArrayList<MethodSignature>();
  final PsiClassType[] implementsList=typeDefinition.getImplementsListTypes();
  for (  PsiClassType implementedInterface : implementsList) {
    final PsiClass resolvedImplementedInterface=implementedInterface.resolve();
    if (resolvedImplementedInterface == null)     return;
    final PsiMethod[] interfaceMethods=resolvedImplementedInterface.getMethods();
    for (    PsiMethod interfaceMethod : interfaceMethods) {
      if (interfaceMethod.isConstructor()) {
        continue;
      }
      implementedClassesMethodsSignatures.add(interfaceMethod.getSignature(PsiSubstitutor.EMPTY));
    }
  }
  List<MethodSignature> typeDefMethodsSignatures=new ArrayList<MethodSignature>();
  final PsiMethod[] typeDefMethods=typeDefinition.getMethods();
  for (  PsiMethod typeDefMethod : typeDefMethods) {
    if (typeDefMethod.isConstructor()) {
      continue;
    }
    typeDefMethodsSignatures.add(typeDefMethod.getSignature(PsiSubstitutor.EMPTY));
  }
  String notImpledMethodName=null;
  boolean isImplemented=false;
  for (  MethodSignature implementedClassesMethodsSignature : implementedClassesMethodsSignatures) {
    for (    MethodSignature typeDefMethodsSignature : typeDefMethodsSignatures) {
      isImplemented=isImplemented | PsiImplUtil.isExtendsSignature(implementedClassesMethodsSignature,typeDefMethodsSignature);
      if (isImplemented)       break;
    }
    if (!isImplemented) {
      notImpledMethodName=implementedClassesMethodsSignature.getName();
      break;
    }
    isImplemented=false;
  }
  final PsiElement firstChild=typeDefinition.getFirstChild();
  final PsiElement lBrace=typeDefinition.getBody().getFirstChild();
  if (firstChild == null || lBrace == null) {
    return;
  }
  if (notImpledMethodName == null) {
    return;
  }
  final Annotation annotation=holder.createErrorAnnotation(new TextRange(firstChild.getTextRange().getStartOffset(),lBrace.getTextRange().getStartOffset()),GroovyBundle.message("method.is.not.implemented",notImpledMethodName));
  registerImplementsMethodsFix(typeDefinition,annotation);
}
