{
  if (refElement instanceof PsiCompiledElement)   return;
  PsiModifierList modifierList=refElement.getModifierList();
  if (modifierList == null)   return;
  try {
    Project project=refElement.getProject();
    JavaPsiFacade facade=JavaPsiFacade.getInstance(project);
    PsiModifierList modifierListCopy=facade.getElementFactory().createFieldFromText("int a;",null).getModifierList();
    modifierListCopy.setModifierProperty(PsiModifier.STATIC,modifierList.hasModifierProperty(PsiModifier.STATIC));
    @Modifier String minModifier=PsiModifier.PROTECTED;
    if (refElement.hasModifierProperty(PsiModifier.PROTECTED)) {
      minModifier=PsiModifier.PUBLIC;
    }
    String[] modifiers={PsiModifier.PROTECTED,PsiModifier.PUBLIC,PsiModifier.PACKAGE_LOCAL};
    PsiClass accessObjectClass=PsiTreeUtil.getParentOfType(place,PsiClass.class,false);
    if (accessObjectClass == null) {
      accessObjectClass=((GroovyFile)place.getContainingFile()).getScriptClass();
    }
    for (int i=ArrayUtil.indexOf(modifiers,minModifier); i < modifiers.length; i++) {
      String modifier=modifiers[i];
      modifierListCopy.setModifierProperty(modifier,true);
      if (facade.getResolveHelper().isAccessible(refElement,modifierListCopy,place,accessObjectClass,null)) {
        IntentionAction fix=new GrModifierFix(refElement,refElement.getModifierList(),modifier,true,true);
        annotation.registerFix(fix);
      }
    }
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
