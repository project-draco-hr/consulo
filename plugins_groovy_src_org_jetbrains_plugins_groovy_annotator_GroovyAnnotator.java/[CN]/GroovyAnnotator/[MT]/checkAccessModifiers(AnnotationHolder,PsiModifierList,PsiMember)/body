{
  boolean hasPrivate=modifierList.hasExplicitModifier(PsiModifier.PRIVATE);
  boolean hasPublic=modifierList.hasExplicitModifier(PsiModifier.PUBLIC);
  boolean hasProtected=modifierList.hasExplicitModifier(PsiModifier.PROTECTED);
  if (hasPrivate && hasPublic || hasPrivate && hasProtected || hasPublic && hasProtected) {
    final Annotation annotation=holder.createErrorAnnotation(modifierList,GroovyBundle.message("illegal.combination.of.modifiers"));
    if (hasPrivate) {
      annotation.registerFix(new GrModifierFix(member,modifierList,PsiModifier.PRIVATE,false,false));
    }
    if (hasProtected) {
      annotation.registerFix(new GrModifierFix(member,modifierList,PsiModifier.PROTECTED,false,false));
    }
    if (hasPublic) {
      annotation.registerFix(new GrModifierFix(member,modifierList,PsiModifier.PUBLIC,false,false));
    }
  }
 else   if (member instanceof PsiMethod && member.getContainingClass() instanceof GrInterfaceDefinition && hasPublic&& !GroovyConfigUtils.getInstance().isVersionAtLeast(member,GroovyConfigUtils.GROOVY1_9)) {
    final PsiElement publicModifier=ObjectUtils.assertNotNull(com.intellij.psi.util.PsiUtil.findModifierInList(modifierList,PsiModifier.PUBLIC));
    holder.createErrorAnnotation(publicModifier,GroovyBundle.message("public.modifier.is.not.allowed.in.interfaces")).registerFix(new GrModifierFix(member,modifierList,PsiModifier.PUBLIC,false,false));
  }
}
