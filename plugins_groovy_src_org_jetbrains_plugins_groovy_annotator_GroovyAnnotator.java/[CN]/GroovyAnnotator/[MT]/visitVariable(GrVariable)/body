{
  checkName(variable);
  PsiElement parent=variable.getParent();
  if (parent instanceof GrForInClause) {
    PsiElement delimiter=((GrForInClause)parent).getDelimiter();
    if (delimiter.getNode().getElementType() == GroovyTokenTypes.mCOLON) {
      GrTypeElement typeElement=variable.getTypeElementGroovy();
      GrModifierList modifierList=variable.getModifierList();
      if (typeElement == null && StringUtil.isEmptyOrSpaces(modifierList.getText())) {
        Annotation annotation=myHolder.createErrorAnnotation(variable.getNameIdentifierGroovy(),GroovyBundle.message("java.style.for.each.statement.requires.a.type.declaration"));
        annotation.registerFix(new ReplaceDelimiterFix());
      }
    }
  }
  PsiNamedElement duplicate=ResolveUtil.findDuplicate(variable);
  if (duplicate instanceof GrVariable && (variable instanceof GrField || ResolveUtil.isScriptField(variable) || !(duplicate instanceof GrField))) {
    final String key=duplicate instanceof GrField ? "field.already.defined" : "variable.already.defined";
    myHolder.createErrorAnnotation(variable.getNameIdentifierGroovy(),GroovyBundle.message(key,variable.getName()));
  }
  PsiType type=variable.getDeclaredType();
  if (type instanceof PsiEllipsisType && !isLastParameter(variable)) {
    TextRange range=getEllipsisRange(variable);
    if (range == null) {
      range=getTypeRange(variable);
    }
    if (range != null) {
      myHolder.createErrorAnnotation(range,GroovyBundle.message("ellipsis.type.is.not.allowed.here"));
    }
  }
}
