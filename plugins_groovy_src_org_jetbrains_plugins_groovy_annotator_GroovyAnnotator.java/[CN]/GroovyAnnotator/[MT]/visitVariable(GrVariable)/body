{
  checkName(variable);
  PsiElement parent=variable.getParent();
  if (parent instanceof GrForInClause) {
    PsiElement delimiter=((GrForInClause)parent).getDelimiter();
    if (delimiter.getNode().getElementType() == GroovyTokenTypes.mCOLON) {
      GrTypeElement typeElement=variable.getTypeElementGroovy();
      GrModifierList modifierList=variable.getModifierList();
      if (typeElement == null && StringUtil.isEmptyOrSpaces(modifierList.getText())) {
        Annotation annotation=myHolder.createErrorAnnotation(variable.getNameIdentifierGroovy(),GroovyBundle.message("java.style.for.each.statement.requires.a.type.declaration"));
        annotation.registerFix(new ReplaceDelimiterFix());
      }
    }
  }
  final GrVariable toSearchFor=ResolveUtil.isScriptField(variable) ? GrScriptField.createScriptFieldFrom(variable) : variable;
  PsiNamedElement duplicate=ResolveUtil.resolveExistingElement(variable,new DuplicateVariablesProcessor(toSearchFor),GrReferenceExpression.class,GrVariable.class);
  if (duplicate == null) {
    if (variable instanceof GrParameter) {
      @SuppressWarnings({"ConstantConditions"}) final PsiElement context=variable.getContext().getContext();
      if (context instanceof GrClosableBlock) {
        duplicate=ResolveUtil.resolveExistingElement((GrClosableBlock)context,new DuplicateVariablesProcessor(variable),GrVariable.class,GrReferenceExpression.class);
      }
    }
  }
  if (duplicate instanceof GrLightParameter && "args".equals(duplicate.getName())) {
    duplicate=null;
  }
  if (duplicate instanceof GrVariable) {
    if ((variable instanceof GrField || ResolveUtil.isScriptField(variable)) || !(duplicate instanceof GrField)) {
      final String key=duplicate instanceof GrField ? "field.already.defined" : "variable.already.defined";
      myHolder.createErrorAnnotation(variable.getNameIdentifierGroovy(),GroovyBundle.message(key,variable.getName()));
    }
  }
  PsiType type=variable.getDeclaredType();
  if (type instanceof PsiEllipsisType && !isLastParameter(variable)) {
    TextRange range=getTypeRange(variable);
    LOG.assertTrue(range != null,variable.getText());
    myHolder.createErrorAnnotation(range,GroovyBundle.message("ellipsis.type.is.not.allowed.here"));
  }
}
