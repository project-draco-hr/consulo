{
  checkName(variable);
  PsiElement parent=variable.getParent();
  if (parent instanceof GrForInClause) {
    PsiElement delimiter=((GrForInClause)parent).getDelimiter();
    if (delimiter.getNode().getElementType() == GroovyTokenTypes.mCOLON) {
      GrTypeElement typeElement=variable.getTypeElementGroovy();
      GrModifierList modifierList=variable.getModifierList();
      if (typeElement == null && StringUtil.isEmptyOrSpaces(modifierList.getText())) {
        Annotation annotation=myHolder.createErrorAnnotation(variable.getNameIdentifierGroovy(),GroovyBundle.message("java.style.for.each.statement.requires.a.type.declaration"));
        annotation.registerFix(new ReplaceDelimiterFix());
      }
    }
  }
  PsiNamedElement duplicate;
  if (ResolveUtil.isScriptField(variable)) {
    final String name=variable.getName();
    int count=0;
    final GroovyScriptClass script=(GroovyScriptClass)((GroovyFile)variable.getContainingFile()).getScriptClass();
    for (    GrScriptField field : GrScriptField.getScriptFields(script)) {
      if (name.equals(field.getName()))       count++;
    }
    duplicate=count > 1 ? GrScriptField.getScriptField(variable) : null;
  }
 else {
    duplicate=ResolveUtil.resolveExistingElement(variable,new DuplicateVariablesProcessor(variable),GrReferenceExpression.class,GrVariable.class);
    if (duplicate == null) {
      if (variable instanceof GrParameter) {
        @SuppressWarnings({"ConstantConditions"}) final PsiElement context=variable.getContext().getContext();
        if (context instanceof GrClosableBlock) {
          duplicate=ResolveUtil.resolveExistingElement((GroovyPsiElement)context.getParent(),new DuplicateVariablesProcessor(variable),GrVariable.class,GrReferenceExpression.class);
        }
 else         if (context instanceof GrMethod && !(context.getParent() instanceof GroovyFile)) {
          duplicate=ResolveUtil.resolveExistingElement(((GroovyPsiElement)context.getParent()),new DuplicateVariablesProcessor(variable),GrVariable.class,GrReferenceExpression.class);
        }
      }
    }
    if (duplicate instanceof GrLightParameter && "args".equals(duplicate.getName())) {
      duplicate=null;
    }
  }
  if (duplicate instanceof GrVariable) {
    if ((variable instanceof GrField || ResolveUtil.isScriptField(variable)) || !(duplicate instanceof GrField)) {
      final String key=duplicate instanceof GrField ? "field.already.defined" : "variable.already.defined";
      myHolder.createErrorAnnotation(variable.getNameIdentifierGroovy(),GroovyBundle.message(key,variable.getName()));
    }
  }
  PsiType type=variable.getDeclaredType();
  if (type instanceof PsiEllipsisType && !isLastParameter(variable)) {
    TextRange range=getEllipsisRange(variable);
    if (range == null) {
      range=getTypeRange(variable);
    }
    if (range != null) {
      myHolder.createErrorAnnotation(range,GroovyBundle.message("ellipsis.type.is.not.allowed.here"));
    }
  }
}
