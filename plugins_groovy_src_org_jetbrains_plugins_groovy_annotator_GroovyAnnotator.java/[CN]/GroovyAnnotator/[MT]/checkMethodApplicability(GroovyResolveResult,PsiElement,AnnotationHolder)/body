{
  final PsiElement element=methodResolveResult.getElement();
  if (!(element instanceof PsiMethod))   return;
  final PsiMethod method=(PsiMethod)element;
  PsiType[] argumentTypes=PsiUtil.getArgumentTypes(place,method.isConstructor());
  if (argumentTypes != null && !PsiUtil.isApplicable(argumentTypes,method,methodResolveResult.getSubstitutor(),methodResolveResult.getCurrentFileResolveContext() instanceof GrMethodCallExpression)) {
    PsiElement elementToHighlight=PsiUtil.getArgumentsElement(place);
    if (elementToHighlight == null) {
      elementToHighlight=place;
    }
    final String typesString=buildArgTypesList(argumentTypes);
    String message;
    final PsiClass containingClass=method.getContainingClass();
    if (containingClass != null) {
      final PsiClassType containingType=method.getManager().getElementFactory().createType(containingClass,methodResolveResult.getSubstitutor());
      message=GroovyBundle.message("cannot.apply.method1",method.getName(),containingType.getInternalCanonicalText(),typesString);
    }
 else {
      message=GroovyBundle.message("cannot.apply.method",method.getName(),typesString);
    }
    holder.createWarningAnnotation(elementToHighlight,message);
  }
}
