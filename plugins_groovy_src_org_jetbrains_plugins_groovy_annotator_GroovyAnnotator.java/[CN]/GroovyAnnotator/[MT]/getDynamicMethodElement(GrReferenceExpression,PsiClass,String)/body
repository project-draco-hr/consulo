{
  final PsiElement parent=referenceExpression.getParent();
  if (!(parent instanceof GrMethodCallExpression))   return null;
  GrExpression[] expressionArgument=((GrMethodCallExpression)parent).getExpressionArguments();
  List<MyPair> pairs=new ArrayList<MyPair>();
  for (  GrExpression expression : expressionArgument) {
    final PsiType type=expression.getType();
    if (type == null)     return null;
    pairs.add(new MyPair(GroovyElementPresentation.getExpressionPresentableText(expression),type.getCanonicalText()));
  }
  final String[] types=QuickfixUtil.getArgumentsTypes(pairs);
  final Project project=referenceExpression.getProject();
  DElement superDynamicMethod;
  for (  PsiClass clazz : GroovyUtils.iterateSupers(targetClass,true)) {
    superDynamicMethod=DynamicManager.getInstance(project).findConcreteDynamicMethod(clazz.getQualifiedName(),referenceExpression.getName(),types);
    if (superDynamicMethod != null)     return null;
  }
  return new DMethodElement(referenceExpression.getName(),null,pairs);
}
