{
  final PsiElement parent=refElement.getParent();
  GroovyResolveResult resolveResult=refElement.advancedResolve();
  if (refElement.getReferenceName() != null) {
    final PsiElement resolved=resolveResult.getElement();
    if (resolved == null) {
      if (parent instanceof GrImportStatement && ((GrImportStatement)parent).isStatic()) {
        final ResolveResult[] allResults=refElement.multiResolve(false);
        if (allResults.length > 0) {
          return;
        }
      }
      String message=GroovyBundle.message("cannot.resolve",refElement.getReferenceName());
      final Annotation annotation=holder.createErrorAnnotation(refElement,message);
      registerAddImportFixes(refElement,annotation);
      annotation.setHighlightType(ProblemHighlightType.LIKE_UNKNOWN_SYMBOL);
      return;
    }
 else     if (!resolveResult.isAccessible()) {
      String message=GroovyBundle.message("cannot.access",refElement.getReferenceName());
      holder.createErrorAnnotation(refElement,message);
    }
  }
  if (parent instanceof GrNewExpression) {
    checkNewExpression(holder,refElement,resolveResult);
  }
}
