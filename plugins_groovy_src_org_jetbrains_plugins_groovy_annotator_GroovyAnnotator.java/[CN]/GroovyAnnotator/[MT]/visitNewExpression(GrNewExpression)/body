{
  GrTypeArgumentList constructorTypeArguments=newExpression.getConstructorTypeArguments();
  if (constructorTypeArguments != null) {
    myHolder.createErrorAnnotation(constructorTypeArguments,GroovyBundle.message("groovy.does.not.support.constructor.type.arguments"));
  }
  final GrTypeElement typeElement=newExpression.getTypeElement();
  if (typeElement instanceof GrBuiltInTypeElement) {
    if (newExpression.getArrayCount() == 0) {
      myHolder.createErrorAnnotation(typeElement,GroovyBundle.message("create.instance.of.built-in.type"));
    }
  }
  if (newExpression.getArrayCount() > 0)   return;
  GrCodeReferenceElement refElement=newExpression.getReferenceElement();
  if (refElement == null)   return;
  final PsiElement element=refElement.resolve();
  if (element instanceof PsiClass) {
    PsiClass clazz=(PsiClass)element;
    if (clazz.hasModifierProperty(ABSTRACT)) {
      if (newExpression.getAnonymousClassDefinition() == null) {
        String message=clazz.isInterface() ? GroovyBundle.message("cannot.instantiate.interface",clazz.getName()) : GroovyBundle.message("cannot.instantiate.abstract.class",clazz.getName());
        myHolder.createErrorAnnotation(refElement,message);
      }
      return;
    }
    if (newExpression.getQualifier() != null) {
      if (clazz.hasModifierProperty(STATIC)) {
        myHolder.createErrorAnnotation(newExpression,GroovyBundle.message("qualified.new.of.static.class"));
      }
    }
 else {
      final PsiClass outerClass=clazz.getContainingClass();
      if (com.intellij.psi.util.PsiUtil.isInnerClass(clazz) && !PsiUtil.hasEnclosingInstanceInScope(outerClass,newExpression,true)) {
        Annotation annotation=myHolder.createErrorAnnotation(refElement,GroovyBundle.message("cannot.reference.nonstatic",clazz.getQualifiedName()));
        annotation.setTextAttributes(DefaultHighlighter.UNRESOLVED_ACCESS);
      }
    }
  }
}
