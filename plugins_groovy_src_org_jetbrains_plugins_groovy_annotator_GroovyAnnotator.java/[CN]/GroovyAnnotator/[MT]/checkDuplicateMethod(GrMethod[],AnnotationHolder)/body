{
  HashSet<GrMethod> duplicateMethodsWarning=new HashSet<GrMethod>();
  HashSet<GrMethod> duplicateMethodsErrors=new HashSet<GrMethod>();
  HashMap<MethodSignature,List<GrMethod>> methodSignatureToMethodsListMap=new HashMap<MethodSignature,List<GrMethod>>();
  for (  GrMethod grMethod : grMethods) {
    MethodSignature signature=grMethod.getSignature(PsiSubstitutor.EMPTY);
    List<GrMethod> list=methodSignatureToMethodsListMap.get(signature);
    if (list == null) {
      list=new ArrayList<GrMethod>();
    }
    list.add(grMethod);
    methodSignatureToMethodsListMap.put(signature,list);
  }
  Set<MethodSignature> methodSignatures=methodSignatureToMethodsListMap.keySet();
  for (  MethodSignature methodSignature : methodSignatures) {
    List<GrMethod> duplicateMethods=methodSignatureToMethodsListMap.get(methodSignature);
    if (duplicateMethods != null && duplicateMethods.size() > 1) {
      HashMap<PsiType,GrMethod> duplicateMethodsToReturnTypeMap=new HashMap<PsiType,GrMethod>();
      for (      GrMethod duplicateMethod : duplicateMethods) {
        GrTypeElement typeElement=duplicateMethod.getReturnTypeElementGroovy();
        PsiType methodReturnType;
        if (typeElement != null) {
          methodReturnType=typeElement.getType();
        }
 else {
          methodReturnType=PsiType.NULL;
        }
        duplicateMethodsWarning.add(duplicateMethod);
        GrMethod grMethodWithType=duplicateMethodsToReturnTypeMap.get(methodReturnType);
        if (grMethodWithType != null) {
          duplicateMethodsErrors.add(duplicateMethod);
          duplicateMethodsErrors.add(grMethodWithType);
          duplicateMethodsWarning.remove(duplicateMethod);
          duplicateMethodsWarning.remove(grMethodWithType);
        }
        duplicateMethodsToReturnTypeMap.put(methodReturnType,duplicateMethod);
      }
    }
  }
  for (  GrMethod duplicateMethod : duplicateMethodsErrors) {
    holder.createErrorAnnotation(duplicateMethod.getNameIdentifierGroovy(),GroovyBundle.message("repetitive.method.name.signature.and.return.type"));
  }
  for (  GrMethod duplicateMethod : duplicateMethodsWarning) {
    holder.createWarningAnnotation(duplicateMethod.getNameIdentifierGroovy(),GroovyBundle.message("repetitive.method.name.signature"));
  }
}
