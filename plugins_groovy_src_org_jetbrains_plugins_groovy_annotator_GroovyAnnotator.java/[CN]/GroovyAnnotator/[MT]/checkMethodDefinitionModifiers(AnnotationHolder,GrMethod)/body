{
  final PsiModifierList modifiersList=grMethod.getModifierList();
  checkAccessModifiers(holder,modifiersList);
  boolean isMethodAbstract=modifiersList.hasExplicitModifier(PsiModifier.ABSTRACT);
  boolean isMethodStatic=modifiersList.hasExplicitModifier(PsiModifier.STATIC);
  if (grMethod.getParent() instanceof GroovyFileBase) {
    if (isMethodAbstract) {
      holder.createErrorAnnotation(modifiersList,GroovyBundle.message("script.cannot.have.modifier.abstract"));
    }
    if (modifiersList.hasExplicitModifier(PsiModifier.NATIVE)) {
      holder.createErrorAnnotation(modifiersList,GroovyBundle.message("script.cannot.have.modifier.native"));
    }
  }
 else   if (grMethod.getParent() != null && grMethod.getParent().getParent() instanceof GrTypeDefinition) {
    GrTypeDefinition containingTypeDef=((GrTypeDefinition)grMethod.getParent().getParent());
    if (containingTypeDef.isInterface()) {
      if (modifiersList.hasExplicitModifier(PsiModifier.STATIC)) {
        holder.createErrorAnnotation(modifiersList,GroovyBundle.message("interface.must.have.no.static.method"));
      }
      if (modifiersList.hasExplicitModifier(PsiModifier.PRIVATE)) {
        holder.createErrorAnnotation(modifiersList,GroovyBundle.message("interface.must.have.no.private.method"));
      }
    }
 else     if (containingTypeDef.isEnum()) {
    }
 else     if (containingTypeDef.isAnnotationType()) {
    }
 else {
      PsiModifierList typeDefModifiersList=containingTypeDef.getModifierList();
      LOG.assertTrue(typeDefModifiersList != null,"modifiers list must be not null");
      if (!typeDefModifiersList.hasExplicitModifier(PsiModifier.ABSTRACT)) {
        if (isMethodAbstract) {
          holder.createErrorAnnotation(modifiersList,GroovyBundle.message("not.abstract.class.cannot.have.abstract.method"));
        }
      }
 else {
        if (isMethodStatic) {
          holder.createErrorAnnotation(modifiersList,GroovyBundle.message("abstract.class.cannot.have.static.method"));
        }
      }
      if (!isMethodAbstract) {
        if (grMethod.getBlock() == null) {
          holder.createErrorAnnotation(grMethod.getNameIdentifierGroovy(),GroovyBundle.message("not.abstract.method.should.have.body"));
        }
      }
    }
  }
}
