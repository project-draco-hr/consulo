{
  final PsiModifierList modifiersList=method.getModifierList();
  checkAccessModifiers(holder,modifiersList);
  boolean isMethodAbstract=modifiersList.hasExplicitModifier(PsiModifier.ABSTRACT);
  if (method.getParent() instanceof GroovyFileBase) {
    if (isMethodAbstract) {
      holder.createErrorAnnotation(modifiersList,GroovyBundle.message("script.cannot.have.modifier.abstract"));
    }
    if (modifiersList.hasExplicitModifier(PsiModifier.NATIVE)) {
      holder.createErrorAnnotation(modifiersList,GroovyBundle.message("script.cannot.have.modifier.native"));
    }
  }
 else   if (method.getParent() != null && method.getParent().getParent() instanceof GrTypeDefinition) {
    GrTypeDefinition containingTypeDef=((GrTypeDefinition)method.getParent().getParent());
    if (containingTypeDef.isInterface()) {
      if (modifiersList.hasExplicitModifier(PsiModifier.STATIC)) {
        holder.createErrorAnnotation(modifiersList,GroovyBundle.message("interface.must.have.no.static.method"));
      }
      if (modifiersList.hasExplicitModifier(PsiModifier.PRIVATE)) {
        holder.createErrorAnnotation(modifiersList,GroovyBundle.message("interface.must.have.no.private.method"));
      }
    }
 else     if (containingTypeDef.isEnum()) {
    }
 else     if (containingTypeDef.isAnnotationType()) {
    }
 else {
      PsiModifierList typeDefModifiersList=containingTypeDef.getModifierList();
      LOG.assertTrue(typeDefModifiersList != null,"modifiers list must be not null");
      if (!typeDefModifiersList.hasExplicitModifier(PsiModifier.ABSTRACT)) {
        if (isMethodAbstract) {
          holder.createErrorAnnotation(modifiersList,GroovyBundle.message("not.abstract.class.cannot.have.abstract.method"));
        }
      }
      if (!isMethodAbstract) {
        if (method.getBlock() == null) {
          holder.createErrorAnnotation(method.getNameIdentifierGroovy(),GroovyBundle.message("not.abstract.method.should.have.body"));
        }
      }
    }
  }
}
