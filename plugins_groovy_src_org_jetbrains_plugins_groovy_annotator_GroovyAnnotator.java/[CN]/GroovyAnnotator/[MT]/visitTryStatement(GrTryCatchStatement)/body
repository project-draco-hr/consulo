{
  final GrCatchClause[] clauses=statement.getCatchClauses();
  List<PsiType> usedExceptions=new ArrayList<PsiType>();
  final PsiClassType throwable=PsiType.getJavaLangThrowable(statement.getManager(),statement.getResolveScope());
  for (  GrCatchClause clause : clauses) {
    final GrParameter parameter=clause.getParameter();
    if (parameter == null)     continue;
    final GrTypeElement typeElement=parameter.getTypeElementGroovy();
    PsiType type=typeElement != null ? typeElement.getType() : null;
    if (type == null) {
      type=throwable;
    }
    if (!throwable.isAssignableFrom(type)) {
      LOG.assertTrue(typeElement != null);
      myHolder.createErrorAnnotation(typeElement,GroovyBundle.message("catch.statement.parameter.type.should.be.a.subclass.of.throwable"));
      continue;
    }
    if (typeElement instanceof GrDisjunctionTypeElement) {
      final GrTypeElement[] elements=((GrDisjunctionTypeElement)typeElement).getTypeElements();
      PsiType[] types=new PsiType[elements.length];
      for (int i=0; i < elements.length; i++) {
        types[i]=elements[i].getType();
      }
      List<PsiType> usedInsideDisjunction=new ArrayList<PsiType>();
      for (int i=0; i < types.length; i++) {
        if (checkExceptionUsed(usedExceptions,parameter,elements[i],types[i])) {
          usedInsideDisjunction.add(types[i]);
          for (int j=0; j < types.length; j++) {
            if (i != j && types[j].isAssignableFrom(types[i])) {
              myHolder.createWarningAnnotation(elements[i],GroovyBundle.message("unnecessary.type",types[i].getCanonicalText(),types[j].getCanonicalText())).registerFix(new GrRemoveExceptionFix(true));
            }
          }
        }
      }
      usedExceptions.addAll(usedInsideDisjunction);
    }
 else {
      if (checkExceptionUsed(usedExceptions,parameter,typeElement,type)) {
        usedExceptions.add(type);
      }
    }
  }
}
