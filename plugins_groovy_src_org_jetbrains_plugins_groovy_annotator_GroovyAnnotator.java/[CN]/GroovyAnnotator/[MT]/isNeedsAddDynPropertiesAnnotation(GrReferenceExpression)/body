{
  PsiClass containingClass=DynamicReferenceUtils.findDynamicValueContainingClass(referenceExpression);
  final PsiFile containingFile=referenceExpression.getContainingFile();
  VirtualFile file;
  if (containingFile != null) {
    file=containingFile.getVirtualFile();
    if (file == null)     return false;
  }
 else   return false;
  Module module=ProjectRootManager.getInstance(referenceExpression.getProject()).getFileIndex().getModuleForFile(file);
  if (module == null)   return false;
  if (containingClass == null)   return false;
  final String className=containingClass.getQualifiedName();
  if (className == null)   return false;
  final Element propertyElement=DynamicPropertiesManager.getInstance(referenceExpression.getProject()).findConcreateDynamicProperty(referenceExpression,module.getName(),className,referenceExpression.getName());
  if (propertyElement != null)   return false;
  final Set<PsiClass> supers=GroovyUtils.findAllSupers(containingClass);
  Element superDynamicProperty;
  for (  PsiClass aSuper : supers) {
    superDynamicProperty=DynamicPropertiesManager.getInstance(referenceExpression.getProject()).findConcreateDynamicProperty(referenceExpression,module.getName(),aSuper.getQualifiedName(),referenceExpression.getName());
    if (superDynamicProperty != null)     return false;
  }
  return true;
}
