{
  final Project project=debuggerContext.getProject();
  final ValueDescriptorImpl valueDescriptor=(ValueDescriptorImpl)selectedNode.getDescriptor();
  ArrayRenderer renderer=null;
  AdjustedRendererManager manager=null;
  for (  AdjustedRendererManager m : MANAGERS) {
    renderer=m.getRenderer(selectedNode,debuggerContext);
    if (renderer != null) {
      manager=m;
      break;
    }
  }
  if (renderer == null) {
    return;
  }
  String title=createNodeTitle("",selectedNode);
  String label=selectedNode.toString();
  int index=label.indexOf('=');
  if (index > 0) {
    title=title + " " + label.substring(index);
  }
  final ArrayRenderer cloneRenderer=renderer.clone();
  final AdjustedRendererManager m=manager;
  final String finalTitle=title;
  UIUtil.invokeLaterIfNeeded(new Runnable(){
    @Override public void run(){
      SingleConfigurableEditor editor=new SingleConfigurableEditor(project,new NamedArrayConfigurable(finalTitle,cloneRenderer)){
        protected Action[] createActions(){
          final String helpTopic=getConfigurable().getHelpTopic();
          return (helpTopic != null) ? new Action[]{getOKAction(),getCancelAction(),getHelpAction()} : new Action[]{getOKAction(),getCancelAction()};
        }
      }
;
      editor.show();
      if (editor.getExitCode() == DialogWrapper.OK_EXIT_CODE) {
        debugProcess.getManagerThread().schedule(new SuspendContextCommandImpl(debuggerContext.getSuspendContext()){
          public void contextAction() throws Exception {
            m.apply(cloneRenderer,valueDescriptor,debuggerContext);
            selectedNode.clear();
            selectedNode.calcRepresentation();
          }
        }
);
      }
    }
  }
);
}
