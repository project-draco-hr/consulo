{
  if (resolved instanceof GrGdkMethod) {
    resolved=((GrGdkMethod)resolved).getStaticMethod();
  }
  final PsiClass containingClass=resolved.getContainingClass();
  if (containingClass == null || !GroovyCommonClassNames.DEFAULT_GROOVY_METHODS.equals(containingClass.getQualifiedName()))   return null;
  GrExpression qualifier=getQualifier(callExpression);
  if (qualifier == null)   return null;
  String name=resolved.getName();
  if ("find".equals(name)) {
    final PsiType type=qualifier.getType();
    if (type instanceof PsiArrayType)     return ((PsiArrayType)type).getComponentType();
  }
  if (isSimilarCollectionReturner(resolved)) {
    PsiType returnType=resolved.getReturnType();
    if (returnType instanceof PsiClassType) {
      PsiClass rr=((PsiClassType)returnType).resolve();
      if (rr != null && CommonClassNames.JAVA_UTIL_COLLECTION.equals(rr.getQualifiedName())) {
        PsiType type=qualifier.getType();
        PsiType itemType=getItemType(type);
        if ("flatten".equals(name) && itemType != null) {
          while (true) {
            PsiType iitype=getItemType(itemType);
            if (iitype == null)             break;
            itemType=iitype;
          }
        }
        return createSimilarCollection(type,callExpression.getProject(),itemType);
      }
    }
  }
  return null;
}
