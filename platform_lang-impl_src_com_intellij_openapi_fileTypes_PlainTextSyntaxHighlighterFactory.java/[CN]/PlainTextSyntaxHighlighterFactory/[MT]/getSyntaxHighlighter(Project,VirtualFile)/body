{
  return new SyntaxHighlighterBase(){
    @NotNull @Override public Lexer getHighlightingLexer(){
      ArrayList<TokenParser> tokenParsers=new ArrayList<TokenParser>();
      tokenParsers.add(new WhitespaceParser());
      tokenParsers.add(new PunctuationParser());
      tokenParsers.add(new IdentifierParser());
      tokenParsers.addAll(BraceTokenParser.BRACES);
      tokenParsers.addAll(BraceTokenParser.PARENS);
      tokenParsers.addAll(BraceTokenParser.BRACKETS);
      tokenParsers.addAll(BraceTokenParser.ANGLE_BRACKETS);
      return new AbstractCustomLexer(tokenParsers);
    }
    @NotNull @Override public TextAttributesKey[] getTokenHighlights(    IElementType tokenType){
      if (tokenType == CustomHighlighterTokenType.NUMBER) {
        return new TextAttributesKey[]{CustomHighlighterColors.CUSTOM_NUMBER_ATTRIBUTES};
      }
      return EMPTY;
    }
  }
;
}
