{
  List<TestCommit> commits=new ArrayList<TestCommit>();
  File source=myRepo.createDir("source");
  File initialFile=createFile(source,"PostHighlightingPass.java","Initial content");
  String initMessage="Created PostHighlightingPass.java in source";
  String hash=myRepo.addCommit(initMessage);
  commits.add(new TestCommit(hash,initMessage,initialFile.getPath()));
  String filePath=initialFile.getPath();
  commits.add(modify(filePath));
  TestCommit commit=move(filePath,myRepo.createDir("codeInside-impl"),"Moved from source to codeInside-impl");
  filePath=commit.myPath;
  commits.add(commit);
  commits.add(modify(filePath));
  commit=move(filePath,myRepo.createDir("codeInside"),"Moved from codeInside-impl to codeInside");
  filePath=commit.myPath;
  commits.add(commit);
  commits.add(modify(filePath));
  commit=move(filePath,myRepo.createDir("lang-impl"),"Moved from codeInside to lang-impl");
  filePath=commit.myPath;
  commits.add(commit);
  commits.add(modify(filePath));
  commit=move(filePath,source,"Moved from lang-impl back to source");
  filePath=commit.myPath;
  commits.add(commit);
  commits.add(modify(filePath));
  commit=move(filePath,myRepo.createDir("java"),"Moved from source to java");
  filePath=commit.myPath;
  commits.add(commit);
  commits.add(modify(filePath));
  Collections.reverse(commits);
  myRepo.refresh();
  VirtualFile vFile=VcsUtil.getVirtualFile(filePath);
  assertNotNull(vFile);
  List<VcsFileRevision> history=GitHistoryUtils.history(myProject,new FilePathImpl(vFile));
  assertEquals(history.size(),commits.size(),"History size doesn't match. Actual history: \n" + toReadable(history));
  assertEquals(toReadable(history),toReadable(commits),"History is different.");
}
