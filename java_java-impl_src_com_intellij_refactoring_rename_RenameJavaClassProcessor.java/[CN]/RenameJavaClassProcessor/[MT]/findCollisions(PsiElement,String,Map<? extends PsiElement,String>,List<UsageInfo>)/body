{
  final PsiClass aClass=(PsiClass)element;
  final ClassCollisionsDetector classCollisionsDetector=new ClassCollisionsDetector(aClass);
  Collection<UsageInfo> initialResults=new ArrayList<UsageInfo>(result);
  for (  UsageInfo usageInfo : initialResults) {
    if (usageInfo instanceof MoveRenameUsageInfo) {
      classCollisionsDetector.addClassCollisions(usageInfo.getElement(),newName,result);
    }
  }
  findSubmemberHidesMemberCollisions(aClass,newName,result);
  if (aClass instanceof PsiTypeParameter) {
    final PsiTypeParameterListOwner owner=((PsiTypeParameter)aClass).getOwner();
    if (owner != null) {
      for (      PsiTypeParameter typeParameter : owner.getTypeParameters()) {
        if (Comparing.equal(newName,typeParameter.getName())) {
          result.add(new UnresolvableCollisionUsageInfo(aClass,typeParameter){
            @Override public String getDescription(){
              return "There is already type parameter in " + RefactoringUIUtil.getDescription(aClass,false) + " with name "+ newName;
            }
          }
);
        }
      }
    }
  }
}
