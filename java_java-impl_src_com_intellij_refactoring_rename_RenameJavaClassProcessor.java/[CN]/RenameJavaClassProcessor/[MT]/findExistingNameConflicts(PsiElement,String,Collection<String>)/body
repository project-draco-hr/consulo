{
  if (element instanceof PsiCompiledElement)   return;
  final PsiClass aClass=(PsiClass)element;
  if (newName.equals(aClass.getName()))   return;
  final PsiClass containingClass=aClass.getContainingClass();
  if (containingClass != null) {
    PsiClass[] innerClasses=containingClass.getInnerClasses();
    for (    PsiClass innerClass : innerClasses) {
      if (newName.equals(innerClass.getName())) {
        conflicts.add(RefactoringBundle.message("inner.class.0.is.already.defined.in.class.1",newName,containingClass.getQualifiedName()));
        break;
      }
    }
  }
 else {
    final String qualifiedNameAfterRename=RenameUtil.getQualifiedNameAfterRename(aClass.getQualifiedName(),newName);
    Project project=element.getProject();
    final PsiClass conflictingClass=JavaPsiFacade.getInstance(project).findClass(qualifiedNameAfterRename,GlobalSearchScope.allScope(project));
    if (conflictingClass != null) {
      conflicts.add(RefactoringBundle.message("class.0.already.exists",qualifiedNameAfterRename));
    }
  }
}
