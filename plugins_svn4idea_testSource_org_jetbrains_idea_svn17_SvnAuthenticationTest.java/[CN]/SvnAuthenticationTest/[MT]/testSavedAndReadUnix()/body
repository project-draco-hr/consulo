{
  if (SystemInfo.isWindows)   return;
  final TestListener listener=new TestListener(mySynchObject);
  myAuthenticationManager.addListener(listener);
  final SavedOnceListener savedOnceListener=new SavedOnceListener();
  myAuthenticationManager.addListener(savedOnceListener);
  final SVNURL url=SVNURL.parseURIEncoded("http://some.host.com/repo");
  final SVNException[] exception=new SVNException[1];
  final Boolean[] result=new Boolean[1];
  final File servers=new File(myConfiguration.getConfigurationDirectory(),"servers");
  final File oldServers=new File(myConfiguration.getConfigurationDirectory(),"config_old");
  FileUtil.copy(servers,oldServers);
  try {
    FileUtil.appendToFile(servers,"\nstore-plaintext-passwords=yes\n");
    synchronousBackground(new Runnable(){
      @Override public void run(){
        try {
          listener.addStep(new Trinity<ProviderType,SVNURL,Type>(ProviderType.persistent,url,Type.request));
          listener.addStep(new Trinity<ProviderType,SVNURL,Type>(ProviderType.interactive,url,Type.request));
          listener.addStep(new Trinity<ProviderType,SVNURL,Type>(ProviderType.persistent,url,Type.save));
          commonScheme(url,false,null);
          Assert.assertEquals(3,listener.getCnt());
          SvnConfiguration17.RUNTIME_AUTH_CACHE.clear();
          listener.addStep(new Trinity<ProviderType,SVNURL,Type>(ProviderType.persistent,url,Type.request));
          commonScheme(url,false,null);
          Assert.assertEquals(4,listener.getCnt());
        }
 catch (        SVNException e) {
          exception[0]=e;
        }
        result[0]=true;
      }
    }
);
  }
  finally {
    FileUtil.delete(servers);
    FileUtil.rename(oldServers,servers);
  }
  Assert.assertTrue(result[0]);
  myTestInteraction.assertNothing();
  Assert.assertEquals(4,listener.getCnt());
  listener.assertForAwt();
  savedOnceListener.assertForAwt();
  savedOnceListener.assertSaved(url,ISVNAuthenticationManager.PASSWORD);
  if (exception[0] != null) {
    throw exception[0];
  }
}
