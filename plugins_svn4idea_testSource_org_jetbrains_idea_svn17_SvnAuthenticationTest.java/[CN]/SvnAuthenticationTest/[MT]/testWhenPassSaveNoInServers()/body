{
  final TestListener listener=new TestListener(mySynchObject);
  myAuthenticationManager.addListener(listener);
  final SavedOnceListener savedOnceListener=new SavedOnceListener();
  myAuthenticationManager.addListener(savedOnceListener);
  final File servers=new File(myConfiguration.getConfigurationDirectory(),"servers");
  final File oldServers=new File(myConfiguration.getConfigurationDirectory(),"config_old");
  FileUtil.copy(servers,oldServers);
  try {
    FileUtil.appendToFile(servers,"\nstore-passwords=no\n");
    final SVNURL url=SVNURL.parseURIEncoded("http://some.host.com/repo");
    final SVNException[] exception=new SVNException[1];
    final Boolean[] result=new Boolean[1];
    synchronousBackground(new Runnable(){
      @Override public void run(){
        try {
          listener.addStep(new Trinity<ProviderType,SVNURL,Type>(ProviderType.persistent,url,Type.request));
          listener.addStep(new Trinity<ProviderType,SVNURL,Type>(ProviderType.interactive,url,Type.request));
          listener.addStep(new Trinity<ProviderType,SVNURL,Type>(ProviderType.persistent,url,Type.without_pasword_save));
          commonScheme(url,false,null);
          Assert.assertEquals(3,listener.getCnt());
          Assert.assertEquals(1,myTestInteraction.getNumPasswordsWarn());
          myTestInteraction.reset();
          savedOnceListener.assertForAwt();
          savedOnceListener.reset();
          SvnConfiguration17.RUNTIME_AUTH_CACHE.clear();
          listener.addStep(new Trinity<ProviderType,SVNURL,Type>(ProviderType.persistent,url,Type.request));
          listener.addStep(new Trinity<ProviderType,SVNURL,Type>(ProviderType.interactive,url,Type.request));
          listener.addStep(new Trinity<ProviderType,SVNURL,Type>(ProviderType.persistent,url,Type.without_pasword_save));
          commonScheme(url,false,null);
          Assert.assertEquals(6,listener.getCnt());
          Assert.assertEquals(1,myTestInteraction.getNumPasswordsWarn());
        }
 catch (        SVNException e) {
          exception[0]=e;
        }
        result[0]=true;
      }
    }
);
    Assert.assertTrue(result[0]);
    Assert.assertEquals(1,myTestInteraction.getNumPasswordsWarn());
    Assert.assertEquals(6,listener.getCnt());
    listener.assertForAwt();
    savedOnceListener.assertForAwt();
    savedOnceListener.assertSaved(url,ISVNAuthenticationManager.PASSWORD);
    if (exception[0] != null) {
      throw exception[0];
    }
  }
  finally {
    FileUtil.delete(servers);
    FileUtil.rename(oldServers,servers);
  }
}
