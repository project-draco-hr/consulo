{
  if (context.getCompletionChar() == Lookup.COMPLETE_STATEMENT_SELECT_CHAR) {
    return TailType.SMART_COMPLETION;
  }
  if (LookupItem.getDefaultTailType(context.getCompletionChar()) != null) {
    return null;
  }
  LookupElement delegate=getDelegate();
  LookupItem item=as(LookupItem.CLASS_CONDITION_KEY);
  Object object=delegate.getObject();
  if (!CodeInsightSettings.getInstance().AUTOINSERT_PAIR_BRACKET && (object instanceof PsiMethod || object instanceof PsiClass)) {
    return TailType.NONE;
  }
  final PsiExpression enclosing=PsiTreeUtil.getContextOfType(myPosition,PsiExpression.class,true);
  if (enclosing != null && object instanceof PsiElement) {
    final PsiType type=JavaCompletionUtil.getLookupElementType(delegate);
    final TailType itemType=item != null ? item.getTailType() : TailType.NONE;
    if (type != null && type.isValid()) {
      Set<TailType> voidTyped=new HashSet<TailType>();
      Set<TailType> sameTyped=new HashSet<TailType>();
      Set<TailType> assignableTyped=new HashSet<TailType>();
      for (      ExpectedTypeInfo info : myExpectedTypeInfos) {
        final PsiType infoType=info.getType();
        if (PsiType.VOID.equals(infoType)) {
          voidTyped.add(info.getTailType());
        }
 else         if (infoType.equals(type)) {
          sameTyped.add(info.getTailType());
        }
 else         if ((infoType.isAssignableFrom(type) && info.getKind() == ExpectedTypeInfo.TYPE_OR_SUBTYPE) || (type.isAssignableFrom(infoType) && info.getKind() == ExpectedTypeInfo.TYPE_OR_SUPERTYPE)) {
          assignableTyped.add(info.getTailType());
        }
      }
      if (!sameTyped.isEmpty()) {
        return sameTyped.size() == 1 ? sameTyped.iterator().next() : itemType;
      }
      if (!assignableTyped.isEmpty()) {
        return assignableTyped.size() == 1 ? assignableTyped.iterator().next() : itemType;
      }
      if (!voidTyped.isEmpty()) {
        return voidTyped.size() == 1 ? voidTyped.iterator().next() : itemType;
      }
    }
 else {
      if (myExpectedTypeInfos.size() == 1) {
        return myExpectedTypeInfos.iterator().next().getTailType();
      }
    }
    return itemType;
  }
  return null;
}
