{
  Map<String,FrameworkDetector> newDetectors=new HashMap<String,FrameworkDetector>();
  for (  FrameworkDetector detector : FrameworkDetector.EP_NAME.getExtensions()) {
    newDetectors.put(detector.getDetectorId(),detector);
  }
  myDetectorIds=new TObjectIntHashMap<String>();
  final File file=getDetectorsRegistryFile();
  int maxId=REGISTRY_VERSION;
  if (file.exists()) {
    LOG.debug("loading framework detectors registry from " + file.getAbsolutePath());
    List<String> unknownIds=new ArrayList<String>();
    boolean versionChanged=false;
    try {
      DataInputStream input=new DataInputStream(new BufferedInputStream(new FileInputStream(file)));
      try {
        input.readInt();
        myDetectorsVersion=input.readInt();
        int size=input.readInt();
        while (size-- > REGISTRY_VERSION) {
          final String stringId=input.readUTF();
          int intId=input.readInt();
          maxId=Math.max(maxId,intId);
          final int version=input.readInt();
          final FrameworkDetector detector=newDetectors.remove(stringId);
          if (detector != null) {
            if (version != detector.getDetectorVersion()) {
              LOG.info("Version of framework detector '" + stringId + "' changed: "+ version+ " -> "+ detector.getDetectorVersion());
              versionChanged=true;
            }
            myDetectorIds.put(stringId,intId);
          }
 else {
            unknownIds.add(stringId);
          }
        }
      }
  finally {
        input.close();
      }
    }
 catch (    IOException e) {
      LOG.info(e);
    }
    if (!unknownIds.isEmpty()) {
      LOG.debug("Unknown framework detectors: " + unknownIds);
    }
    if (versionChanged || !newDetectors.isEmpty()) {
      if (!newDetectors.isEmpty()) {
        LOG.info("New framework detectors: " + newDetectors.keySet());
      }
      myDetectorsVersion++;
      LOG.info("Framework detection index version changed to " + myDetectorsVersion);
    }
  }
  int nextId=maxId + 1;
  for (  String newDetector : newDetectors.keySet()) {
    myDetectorIds.put(newDetector,nextId++);
  }
  myDetectorById=new TIntObjectHashMap<FrameworkDetector>();
  myDetectorsByFileType=new MultiMap<FileType,Integer>();
  for (  FrameworkDetector detector : FrameworkDetector.EP_NAME.getExtensions()) {
    final int id=myDetectorIds.get(detector.getDetectorId());
    myDetectorsByFileType.putValue(detector.getFileType(),id);
    myDetectorById.put(id,detector);
    LOG.debug("'" + detector.getDetectorId() + "' framework detector: id = "+ id);
  }
}
