{
  PsiElement parent=element.getParent();
  if (parent instanceof PsiTypeElement) {
    if (parent.getParent() instanceof PsiReferenceParameterList)     return true;
    while (parent.getParent() instanceof PsiTypeElement)     parent=parent.getParent();
    if (parent.getParent() instanceof PsiCodeFragment || parent.getParent() instanceof PsiVariable || parent.getParent() instanceof PsiMethod|| parent.getParent() instanceof PsiClassObjectAccessExpression|| parent.getParent() instanceof PsiTypeCastExpression|| (parent.getParent() instanceof PsiInstanceOfExpression && ((PsiInstanceOfExpression)parent.getParent()).getCheckType() == parent)) {
      return true;
    }
  }
 else   if (parent instanceof PsiReferenceList) {
    if (myKind == CreateClassKind.ENUM)     return false;
    if (parent.getParent() instanceof PsiClass) {
      PsiClass psiClass=(PsiClass)parent.getParent();
      if (psiClass.getExtendsList() == parent) {
        if (myKind == CreateClassKind.CLASS && !psiClass.isInterface())         return true;
        if (myKind == CreateClassKind.INTERFACE && psiClass.isInterface())         return true;
      }
      if (psiClass.getImplementsList() == parent && myKind == CreateClassKind.INTERFACE)       return true;
    }
 else     if (parent.getParent() instanceof PsiMethod) {
      PsiMethod method=(PsiMethod)parent.getParent();
      if (method.getThrowsList() == parent && myKind == CreateClassKind.CLASS)       return true;
    }
  }
 else   if (parent instanceof PsiAnonymousClass && ((PsiAnonymousClass)parent).getBaseClassReference() == element) {
    return true;
  }
  if (element instanceof PsiReferenceExpression) {
    if (parent instanceof PsiMethodCallExpression) {
      return false;
    }
    return !(parent.getParent() instanceof PsiMethodCallExpression) || myKind == CreateClassKind.CLASS;
  }
  return false;
}
