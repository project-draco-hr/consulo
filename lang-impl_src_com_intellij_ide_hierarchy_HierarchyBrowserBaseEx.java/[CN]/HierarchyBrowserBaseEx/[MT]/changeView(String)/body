{
  myCurrentViewType=typeName;
  final PsiElement element=mySmartPsiElementPointer.getElement();
  if (element == null || !isApplicableElement(element)) {
    return;
  }
  if (myContent != null) {
    final String displayName=getContentDisplayName(typeName,element);
    if (displayName != null) {
      myContent.setDisplayName(displayName);
    }
  }
  myCardLayout.show(myTreePanel,typeName);
  if (!myBuilders.containsKey(typeName)) {
    try {
      setWaitCursor();
      final JTree tree=myType2TreeMap.get(typeName);
      final DefaultTreeModel model=new DefaultTreeModel(new DefaultMutableTreeNode(""));
      tree.setModel(model);
      PsiDocumentManager.getInstance(myProject).commitAllDocuments();
      final HierarchyTreeStructure structure=createHierarchyTreeStructure(typeName,element);
      if (structure == null) {
        return;
      }
      final Comparator<NodeDescriptor> comparator=getComparator();
      final HierarchyTreeBuilder builder=new HierarchyTreeBuilder(myProject,tree,model,structure,comparator);
      myBuilders.put(typeName,builder);
      final HierarchyNodeDescriptor baseDescriptor=structure.getBaseDescriptor();
      builder.buildNodeForElement(baseDescriptor);
      final DefaultMutableTreeNode node=builder.getNodeForElement(baseDescriptor);
      if (node != null) {
        final TreePath path=new TreePath(node.getPath());
        tree.expandPath(path);
        TreeUtil.selectPath(tree,path);
      }
    }
  finally {
      restoreCursor();
    }
  }
  getCurrentTree().requestFocus();
}
