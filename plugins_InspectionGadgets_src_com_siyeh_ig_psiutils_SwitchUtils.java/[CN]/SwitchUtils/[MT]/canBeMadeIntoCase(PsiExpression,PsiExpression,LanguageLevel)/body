{
  expression=ParenthesesUtils.stripParentheses(expression);
  if (languageLevel.isAtLeast(LanguageLevel.JDK_1_7)) {
    final PsiExpression stringCaseExpression=determinePossibleStringSwitchExpression(expression);
    if (EquivalenceChecker.expressionsAreEquivalent(switchExpression,stringCaseExpression)) {
      return true;
    }
  }
  if (!(expression instanceof PsiPolyadicExpression)) {
    return false;
  }
  final PsiPolyadicExpression polyadicExpression=(PsiPolyadicExpression)expression;
  final IElementType operation=polyadicExpression.getOperationTokenType();
  final PsiExpression[] operands=polyadicExpression.getOperands();
  if (operation.equals(JavaTokenType.OROR)) {
    for (    PsiExpression operand : operands) {
      if (!canBeMadeIntoCase(operand,switchExpression,languageLevel)) {
        return false;
      }
    }
    return true;
  }
 else   if (operation.equals(JavaTokenType.EQEQ) && operands.length == 2) {
    return (canBeCaseLabel(operands[0],languageLevel) && EquivalenceChecker.expressionsAreEquivalent(switchExpression,operands[1])) || (canBeCaseLabel(operands[1],languageLevel) && EquivalenceChecker.expressionsAreEquivalent(switchExpression,operands[0]));
  }
 else {
    return false;
  }
}
