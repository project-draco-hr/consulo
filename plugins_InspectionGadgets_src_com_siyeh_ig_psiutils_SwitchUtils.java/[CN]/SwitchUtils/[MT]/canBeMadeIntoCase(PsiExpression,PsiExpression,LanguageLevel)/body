{
  while (expression instanceof PsiParenthesizedExpression) {
    final PsiParenthesizedExpression parenthesizedExpression=(PsiParenthesizedExpression)expression;
    expression=parenthesizedExpression.getExpression();
  }
  if (languageLevel.isAtLeast(LanguageLevel.JDK_1_7)) {
    final PsiExpression stringCaseExpression=determinePossibleStringSwitchExpression(expression);
    if (EquivalenceChecker.expressionsAreEquivalent(switchExpression,stringCaseExpression)) {
      return true;
    }
  }
  if (!(expression instanceof PsiBinaryExpression)) {
    return false;
  }
  final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)expression;
  final IElementType operation=binaryExpression.getOperationTokenType();
  final PsiExpression lhs=binaryExpression.getLOperand();
  final PsiExpression rhs=binaryExpression.getROperand();
  if (operation.equals(JavaTokenType.OROR)) {
    return canBeMadeIntoCase(lhs,switchExpression,languageLevel) && canBeMadeIntoCase(rhs,switchExpression,languageLevel);
  }
 else   if (operation.equals(JavaTokenType.EQEQ)) {
    return (canBeCaseLabel(lhs,languageLevel) && EquivalenceChecker.expressionsAreEquivalent(switchExpression,rhs)) || (canBeCaseLabel(rhs,languageLevel) && EquivalenceChecker.expressionsAreEquivalent(switchExpression,lhs));
  }
 else {
    return false;
  }
}
