{
  expression=ParenthesesUtils.stripParentheses(expression);
  if (expression == null) {
    return null;
  }
  if (languageLevel.isAtLeast(LanguageLevel.JDK_1_7)) {
    final PsiExpression jdk17Expression=determinePossibleStringSwitchExpression(expression);
    if (jdk17Expression != null) {
      return jdk17Expression;
    }
  }
  if (!(expression instanceof PsiPolyadicExpression)) {
    return null;
  }
  final PsiPolyadicExpression polyadicExpression=(PsiPolyadicExpression)expression;
  final IElementType operation=polyadicExpression.getOperationTokenType();
  final PsiExpression[] operands=polyadicExpression.getOperands();
  if (operation.equals(JavaTokenType.OROR) && operands.length > 0) {
    return determinePossibleSwitchExpressions(operands[0],languageLevel);
  }
 else   if (operation.equals(JavaTokenType.EQEQ) && operands.length == 2) {
    final PsiExpression lhs=operands[0];
    final PsiExpression rhs=operands[1];
    if (canBeCaseLabel(lhs,languageLevel) && canBeSwitchExpression(rhs,languageLevel)) {
      return rhs;
    }
 else     if (canBeCaseLabel(rhs,languageLevel) && canBeSwitchExpression(lhs,languageLevel)) {
      return lhs;
    }
  }
  return null;
}
