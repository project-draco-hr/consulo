{
  String jarPath=buildJarSettings.getJarUrl();
  final File jarFile=new File(VfsUtil.urlToPath(jarPath));
  jarFile.delete();
  FileUtil.createParentDirs(jarFile);
  BuildRecipe buildRecipe=new ReadAction<BuildRecipe>(){
    protected void run(    final Result<BuildRecipe> result){
      result.setResult(getBuildRecipe(module,buildJarSettings));
    }
  }
.execute().getResultObject();
  Manifest manifest=MakeUtil.getInstance().createManifest(buildRecipe);
  String mainClass=buildJarSettings.getMainClass();
  if (manifest != null && !Comparing.strEqual(mainClass,null)) {
    manifest.getMainAttributes().putValue(MAIN_CLASS,mainClass);
  }
  final File tempFile=File.createTempFile("___" + FileUtil.getNameWithoutExtension(jarFile),JAR_EXTENSION,jarFile.getParentFile());
  final JarOutputStream jarOutputStream=manifest == null ? new JarOutputStream(new BufferedOutputStream(new FileOutputStream(tempFile))) : new JarOutputStream(new BufferedOutputStream(new FileOutputStream(tempFile)),manifest);
  final Set<String> tempWrittenRelativePaths=new THashSet<String>();
  final BuildRecipe dependencies=MakeUtil.getInstance().createBuildRecipe();
  try {
    buildRecipe.visitInstructionsWithExceptions(new BuildInstructionVisitor(){
      public boolean visitInstruction(      BuildInstruction instruction) throws IOException {
        ProgressManager.getInstance().checkCanceled();
        if (instruction instanceof FileCopyInstruction) {
          FileCopyInstruction fileCopyInstruction=(FileCopyInstruction)instruction;
          File file=fileCopyInstruction.getFile();
          if (file == null || !file.exists())           return true;
          String presentablePath=FileUtil.toSystemDependentName(file.getPath());
          if (progressIndicator != null) {
            progressIndicator.setText2(IdeBundle.message("jar.build.processing.file.progress",presentablePath));
          }
        }
        instruction.addFilesToJar(DummyCompileContext.getInstance(),tempFile,jarOutputStream,dependencies,tempWrittenRelativePaths,null);
        return true;
      }
    }
,false);
  }
 catch (  ProcessCanceledException e) {
    throw e;
  }
catch (  Exception e) {
    LOG.error(e);
  }
 finally {
    jarOutputStream.close();
    try {
      FileUtil.rename(tempFile,jarFile);
    }
 catch (    IOException e) {
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          String message=IdeBundle.message("jar.build.cannot.overwrite.error",FileUtil.toSystemDependentName(jarFile.getPath()),FileUtil.toSystemDependentName(tempFile.getPath()));
          Messages.showErrorDialog(module.getProject(),message,IdeBundle.message("jar.build.error.title"));
        }
      }
);
    }
  }
}
