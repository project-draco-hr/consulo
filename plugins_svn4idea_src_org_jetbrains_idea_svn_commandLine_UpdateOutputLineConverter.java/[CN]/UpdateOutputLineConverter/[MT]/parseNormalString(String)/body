{
  if (line.length() < 5)   return null;
  final char first=line.charAt(0);
  if (' ' != first && !ourActions.contains(first))   return null;
  final SVNStatusType contentsStatus=getStatusType(first);
  final char second=line.charAt(1);
  final SVNStatusType propertiesStatus=getStatusType(second);
  final char lock=line.charAt(2);
  if (' ' != lock && 'B' != lock)   return null;
  final char treeConflict=line.charAt(3);
  if (' ' != treeConflict && 'C' != treeConflict)   return null;
  final boolean haveTreeConflict='C' == treeConflict;
  final String path=line.substring(4).trim();
  if (StringUtil.isEmptyOrSpaces(path))   return null;
  final File file=new File(myBase,path);
  if (SVNStatusType.STATUS_OBSTRUCTED.equals(contentsStatus)) {
    return new SVNEvent(file,file.isDirectory() ? SVNNodeKind.DIR : SVNNodeKind.FILE,null,-1,contentsStatus,propertiesStatus,null,null,SVNEventAction.UPDATE_SKIP_OBSTRUCTION,SVNEventAction.UPDATE_ADD,null,null,null,null,null);
  }
  SVNEventAction action;
  SVNEventAction expectedAction;
  if (SVNStatusType.STATUS_ADDED.equals(contentsStatus)) {
    expectedAction=SVNEventAction.UPDATE_ADD;
  }
 else   if (SVNStatusType.STATUS_DELETED.equals(contentsStatus)) {
    expectedAction=SVNEventAction.UPDATE_DELETE;
  }
 else {
    expectedAction=SVNEventAction.UPDATE_UPDATE;
  }
  action=expectedAction;
  if (haveTreeConflict) {
    action=SVNEventAction.TREE_CONFLICT;
  }
  return new SVNEvent(file,file.isDirectory() ? SVNNodeKind.DIR : SVNNodeKind.FILE,null,-1,contentsStatus,propertiesStatus,null,null,action,expectedAction,null,null,null,null,null);
}
