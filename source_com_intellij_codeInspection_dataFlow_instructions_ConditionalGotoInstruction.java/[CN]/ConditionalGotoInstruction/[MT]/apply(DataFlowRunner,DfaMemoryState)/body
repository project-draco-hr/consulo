{
  DfaValue cond=memState.pop();
  DfaValue condTrue;
  DfaValue condFalse;
  if (myIsNegated) {
    condFalse=cond;
    condTrue=cond.createNegated();
  }
 else {
    condTrue=cond;
    condFalse=cond.createNegated();
  }
  if (condTrue == DfaConstValue.Factory.getInstance().getTrue()) {
    markBranchReachable(true);
    return new DfaInstructionState[]{new DfaInstructionState(runner.getInstruction(getOffset()),memState)};
  }
  if (condFalse == DfaConstValue.Factory.getInstance().getTrue()) {
    markBranchReachable(false);
    return new DfaInstructionState[]{new DfaInstructionState(runner.getInstruction(getIndex() + 1),memState)};
  }
  ArrayList result=new ArrayList();
  DfaMemoryState thenState=memState.createCopy();
  DfaMemoryState elseState=memState.createCopy();
  if (thenState.applyCondition(condTrue)) {
    result.add(new DfaInstructionState(runner.getInstruction(getOffset()),thenState));
    markBranchReachable(true);
  }
  if (elseState.applyCondition(condFalse)) {
    result.add(new DfaInstructionState(runner.getInstruction(getIndex() + 1),elseState));
    markBranchReachable(false);
  }
  return (DfaInstructionState[])result.toArray(new DfaInstructionState[result.size()]);
}
