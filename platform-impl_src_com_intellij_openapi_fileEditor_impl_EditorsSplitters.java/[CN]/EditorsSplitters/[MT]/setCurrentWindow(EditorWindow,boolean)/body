{
  final EditorWithProviderComposite oldEditor=myCurrentSelectedEditor;
  final EditorWithProviderComposite newEditor=window != null ? window.getSelectedEditor() : null;
  try {
    getManager().fireSelectionChanged(oldEditor,newEditor);
  }
  finally {
    myCurrentWindow=window;
    myCurrentSelectedEditor=newEditor;
  }
  getManager().updateFileName(window == null ? null : window.getSelectedFile());
  if (window != null) {
    final EditorWithProviderComposite selectedEditor=myCurrentWindow.getSelectedEditor();
    if (selectedEditor != null) {
      final boolean shouldAssureFocus=ToolWindowManager.getInstance(myManager.getProject()).isEditorComponentActive() && !window.getManager().isFocusingBlocked();
      boolean alreadyFocused=false;
      final JComponent comp=selectedEditor.getComponent();
      final Component owner=KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();
      if (owner != null && comp != null) {
        alreadyFocused=owner == comp || SwingUtilities.isDescendingFrom(owner,comp);
      }
      if (shouldAssureFocus && !alreadyFocused) {
        IdeFocusManager.getInstance(myManager.getProject()).requestFocus(comp,requestFocus);
      }
    }
  }
}
