{
  final HashMap<AnAction,String> map=new HashMap<AnAction,String>();
  final AnAction act=myActionManager.getAction(id);
  if (act != null) {
    map.put(act,myActionsMap.get(act));
    if (checkBoxState) {
      final Set<String> ids=((ActionManagerImpl)myActionManager).getActionIds();
      for (      AnAction action : map.keySet()) {
        ids.remove(getActionId(action));
      }
      if (ids.contains(id)) {
        final AnAction anAction=myActionManager.getAction(id);
        if (!(anAction instanceof ActionGroup)) {
          map.put(anAction,null);
        }
      }
    }
  }
  Object[] objects=map.entrySet().toArray(new Map.Entry[map.size()]);
  if (Comparing.strEqual(id,SETTINGS_KEY)) {
    final Set<String> words=myIndex.getProcessedWords(pattern);
    Set<OptionDescription> optionDescriptions=null;
    for (    String word : words) {
      final Set<OptionDescription> descriptions=((SearchableOptionsRegistrarImpl)myIndex).getAcceptableDescriptions(word);
      if (descriptions != null) {
        for (Iterator<OptionDescription> iterator=descriptions.iterator(); iterator.hasNext(); ) {
          OptionDescription description=iterator.next();
          if (description.getConfigurableId().equals("preferences.keymap")) {
            iterator.remove();
          }
        }
        if (!descriptions.isEmpty()) {
          if (optionDescriptions == null) {
            optionDescriptions=descriptions;
          }
 else {
            optionDescriptions.retainAll(descriptions);
          }
        }
      }
    }
    if (optionDescriptions != null && !optionDescriptions.isEmpty()) {
      Set<String> currentHits=new HashSet<String>();
      for (Iterator<OptionDescription> iterator=optionDescriptions.iterator(); iterator.hasNext(); ) {
        OptionDescription description=iterator.next();
        final String hit=description.getHit();
        if (hit == null || !currentHits.add(hit.trim())) {
          iterator.remove();
        }
      }
      final Object[] descriptions=optionDescriptions.toArray();
      objects=ArrayUtil.mergeArrays(objects,descriptions);
    }
  }
  return objects;
}
