{
  if (!Comparing.strEqual(pattern,myPattern)) {
    myCompiledPattern=null;
    myPattern=pattern;
  }
  if (myCompiledPattern == null) {
    final int eol=pattern.indexOf('\n');
    if (eol != -1) {
      pattern=pattern.substring(0,eol);
    }
    if (pattern.length() >= 80) {
      pattern=pattern.substring(0,80);
    }
    final @NonNls StringBuffer buffer=new StringBuffer(".*");
    pattern=pattern.toLowerCase();
    for (int i=0; i < pattern.length(); i++) {
      final char c=pattern.charAt(i);
      if (Character.isLetterOrDigit(c)) {
        if (Character.isLowerCase(c)) {
          buffer.append('[').append(c).append('|').append(Character.toUpperCase(c)).append(']');
        }
 else {
          buffer.append(c);
        }
      }
 else       if (c == '*')       buffer.append(".*");
 else       if (c == '.')       buffer.append("\\.");
 else       if (c == ' ')       buffer.append("[^A-Z]*\\ ");
 else       buffer.append("\\x").append(Integer.toHexString(c + 0x20000).substring(3));
    }
    buffer.append(".*");
    try {
      myCompiledPattern=new Perl5Compiler().compile(buffer.toString());
    }
 catch (    MalformedPatternException ignore) {
    }
  }
  return myCompiledPattern;
}
