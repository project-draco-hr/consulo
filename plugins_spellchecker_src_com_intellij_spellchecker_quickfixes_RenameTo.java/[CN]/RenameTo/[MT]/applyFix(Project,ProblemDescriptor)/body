{
  Runnable fix=new Runnable(){
    public void run(){
      DictionarySuggestionProvider provider=findProvider();
      if (provider != null) {
        provider.setActive(true);
      }
      HashMap<String,Object> map=new HashMap<String,Object>();
      PsiElement psiElement=descriptor.getPsiElement();
      PsiFile containingFile=psiElement.getContainingFile();
      Editor editor=InjectedLanguageUtil.openEditorFor(containingFile,project);
      if (editor == null) {
        return;
      }
      if (editor instanceof EditorWindow) {
        map.put(PlatformDataKeys.EDITOR.getName(),editor);
        map.put(LangDataKeys.PSI_ELEMENT.getName(),psiElement);
      }
 else       if (ApplicationManager.getApplication().isUnitTestMode()) {
        map.put(LangDataKeys.PSI_ELEMENT.getName(),new TextEditorPsiDataProvider().getData(LangDataKeys.PSI_ELEMENT.getName(),editor,containingFile.getVirtualFile()));
      }
      DataContext dataContext=SimpleDataContext.getSimpleContext(map,DataManager.getInstance().getDataContext(editor.getComponent()));
      AnAction action=new RenameElementAction();
      final boolean hadSelection=editor.getSelectionModel().hasSelection();
      final TextRange range=psiElement.getTextRange();
      if (range != null) {
        editor.getSelectionModel().setSelection(range.getStartOffset(),range.getEndOffset());
      }
      AnActionEvent event=new AnActionEvent(null,dataContext,"",action.getTemplatePresentation(),ActionManager.getInstance(),0);
      action.actionPerformed(event);
      if (provider != null) {
        provider.setActive(false);
      }
      if (!hadSelection) {
        editor.getSelectionModel().removeSelection();
      }
    }
  }
;
  if (ApplicationManager.getApplication().isUnitTestMode())   fix.run();
 else   SwingUtilities.invokeLater(fix);
}
