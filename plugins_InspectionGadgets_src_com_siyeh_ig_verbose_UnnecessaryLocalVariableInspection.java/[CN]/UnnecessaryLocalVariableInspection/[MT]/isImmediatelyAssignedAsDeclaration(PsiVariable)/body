{
  final PsiCodeBlock containingScope=(PsiCodeBlock)PsiTreeUtil.getParentOfType(variable,PsiCodeBlock.class);
  if (containingScope == null) {
    return false;
  }
  final PsiDeclarationStatement declarationStatement=(PsiDeclarationStatement)PsiTreeUtil.getParentOfType(variable,PsiDeclarationStatement.class);
  if (declarationStatement == null) {
    return false;
  }
  PsiStatement nextStatement=null;
  int followingStatementNumber=0;
  final PsiStatement[] statements=containingScope.getStatements();
  for (int i=0; i < statements.length - 1; i++) {
    if (statements[i].equals(declarationStatement)) {
      nextStatement=statements[i + 1];
      followingStatementNumber=i + 2;
    }
  }
  if (nextStatement == null) {
    return false;
  }
  if (!(nextStatement instanceof PsiDeclarationStatement)) {
    return false;
  }
  final PsiDeclarationStatement declaration=(PsiDeclarationStatement)nextStatement;
  final PsiElement[] declarations=declaration.getDeclaredElements();
  if (declarations == null) {
    return false;
  }
  if (declarations.length != 1) {
    return false;
  }
  if (!(declarations[0] instanceof PsiVariable)) {
    return false;
  }
  final PsiExpression rhs=((PsiVariable)declarations[0]).getInitializer();
  if (rhs == null) {
    return false;
  }
  if (!(rhs instanceof PsiReferenceExpression)) {
    return false;
  }
  final PsiElement referent=((PsiReference)rhs).resolve();
  if (referent == null || !referent.equals(variable)) {
    return false;
  }
  for (int i=followingStatementNumber; i < statements.length; i++) {
    if (variableIsUsedInStatement(statements[i],variable)) {
      return false;
    }
  }
  return true;
}
