{
  atomicSectionsAware.checkShouldExit();
  if (myIsActive) {
    final HashMap<VirtualFile,Pair<String,LowLevelAccess>> copy;
synchronized (myLock) {
      copy=new HashMap<VirtualFile,Pair<String,LowLevelAccess>>(myAccessMap);
    }
    final Map<String,UsersData> toUpdate=new HashMap<String,UsersData>();
    for (    Pair<String,LowLevelAccess> pair : copy.values()) {
      atomicSectionsAware.checkShouldExit();
      final String key=pair.getFirst();
      UsersData data=myState.get(key);
      if (data == null) {
        data=new UsersData();
        data.forceUpdate();
      }
      if (data.load(pair.getSecond(),atomicSectionsAware)) {
        toUpdate.put(key,data);
      }
    }
    for (    Map.Entry<String,UsersData> entry : toUpdate.entrySet()) {
      myState.put(entry.getKey(),entry.getValue());
    }
    if (!toUpdate.isEmpty()) {
      myState.force();
    }
  }
  return myIsActive;
}
