{
  myVcs=(GitVcs)manager.findVcsByName(GitVcs.getKey().getName());
  myManager=manager;
  myLock=new Object();
  final File vcsFile=new File(PathManager.getSystemPath(),"vcs");
  File file=new File(vcsFile,"git_users");
  file.mkdirs();
  file=new File(file,myVcs.getProject().getLocationHash());
  try {
    myState=new PersistentHashMap<String,UsersData>(file,new EnumeratorStringDescriptor(),createExternalizer());
  }
 catch (  IOException e) {
    myState=null;
  }
  myAccessMap=new HashMap<VirtualFile,Pair<String,LowLevelAccess>>();
  myControlledCycle=new ControlledCycle(myVcs.getProject(),new MyRefresher(),"Git users loader");
  myVcsListener=new VcsListener(){
    public void directoryMappingChanged(){
      final VirtualFile[] currentRoots=myManager.getRootsUnderVcs(myVcs);
synchronized (myLock) {
        myAccessMap.clear();
        for (        VirtualFile currentRoot : currentRoots) {
          myAccessMap.put(currentRoot,new Pair<String,LowLevelAccess>(currentRoot.getPath(),new LowLevelAccessImpl(myVcs.getProject(),currentRoot)));
        }
      }
    }
  }
;
}
