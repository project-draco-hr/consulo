{
  myManager=manager;
  myIsEmpty=true;
  myIsShown=false;
  myEditorPane=new JEditorPane(UIUtil.HTML_MIME,""){
    public Dimension getPreferredScrollableViewportSize(){
      if (getWidth() == 0 || getHeight() == 0) {
        setSize(MAX_WIDTH,MAX_HEIGHT);
      }
      Insets ins=myEditorPane.getInsets();
      View rootView=myEditorPane.getUI().getRootView(myEditorPane);
      rootView.setSize(MAX_WIDTH,MAX_HEIGHT);
      int prefHeight=(int)rootView.getPreferredSpan(View.Y_AXIS);
      prefHeight+=ins.bottom + ins.top + myScrollPane.getHorizontalScrollBar().getMaximumSize().height;
      return new Dimension(MAX_WIDTH,Math.max(MIN_HEIGHT,Math.min(MAX_HEIGHT,prefHeight)));
    }
{
      enableEvents(KeyEvent.KEY_EVENT_MASK);
    }
    protected void processKeyEvent(    KeyEvent e){
      KeyStroke keyStroke=KeyStroke.getKeyStrokeForEvent(e);
      ActionListener listener=myKeyboardActions.get(keyStroke);
      if (listener != null) {
        listener.actionPerformed(new ActionEvent(JavaDocInfoComponent.this,0,""));
        e.consume();
        return;
      }
      super.processKeyEvent(e);
    }
  }
;
  myText="";
  myEditorPane.setEditable(false);
  myEditorPane.setBackground(HintUtil.INFORMATION_COLOR);
  myScrollPane=new JScrollPane(myEditorPane);
  myScrollPane.setBorder(null);
  myEditorPane.addMouseListener(new MouseAdapter(){
    public void mousePressed(    MouseEvent e){
      myManager.requestFocus();
    }
  }
);
  myEditorPane.addFocusListener(new FocusAdapter(){
    public void focusLost(    FocusEvent e){
      Component previouslyFocused=WindowManagerEx.getInstanceEx().getFocusedComponent(manager.getProject());
      if (!(previouslyFocused == myEditorPane)) {
        myHint.hide();
      }
    }
  }
);
  setLayout(new BorderLayout());
  add(myScrollPane,BorderLayout.CENTER);
  myScrollPane.setBorder(BorderFactory.createEmptyBorder(0,2,2,2));
  DefaultActionGroup group=new DefaultActionGroup();
  group.add(new BackAction());
  group.add(new ForwardAction());
  group.add(myExternalDocAction=new ExternalDocAction());
  myToolBar=ActionManager.getInstance().createActionToolbar(ActionPlaces.JAVADOC_TOOLBAR,group,true);
  myControlPanel=new JPanel();
  myControlPanel.setLayout(new BorderLayout());
  myControlPanel.setBorder(new EdgeBorder(EdgeBorder.EDGE_BOTTOM));
  JPanel dummyPanel=new JPanel();
  myElementLabel=new JLabel();
  dummyPanel.setLayout(new BorderLayout());
  dummyPanel.setBorder(BorderFactory.createEmptyBorder(0,0,0,5));
  dummyPanel.add(myElementLabel,BorderLayout.EAST);
  myControlPanel.add(myToolBar.getComponent(),BorderLayout.WEST);
  myControlPanel.add(dummyPanel,BorderLayout.CENTER);
  myControlPanelVisible=false;
  myEditorPane.addHyperlinkListener(new HyperlinkListener(){
    public void hyperlinkUpdate(    HyperlinkEvent e){
      HyperlinkEvent.EventType type=e.getEventType();
      if (type == HyperlinkEvent.EventType.ACTIVATED) {
        manager.navigateByLink(JavaDocInfoComponent.this,e.getDescription());
      }
 else       if (type == HyperlinkEvent.EventType.ENTERED) {
        myEditorPane.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
      }
 else       if (type == HyperlinkEvent.EventType.EXITED) {
        myEditorPane.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
      }
    }
  }
);
  registerActions();
  updateControlState();
}
