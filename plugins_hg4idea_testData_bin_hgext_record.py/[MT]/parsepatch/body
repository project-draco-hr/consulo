def parsepatch(fp):
    'patch -> [] of hunks '


    class parser(object):
        'patch parsing state machine'

        def __init__(self):
            self.fromline = 0
            self.toline = 0
            self.proc = ''
            self.header = None
            self.context = []
            self.before = []
            self.hunk = []
            self.stream = []

        def addrange(self, (fromstart, fromend, tostart, toend, proc)):
            self.fromline = int(fromstart)
            self.toline = int(tostart)
            self.proc = proc

        def addcontext(self, context):
            if self.hunk:
                h = hunk(self.header, self.fromline, self.toline, self.proc, self.before, self.hunk, context)
                self.header.hunks.append(h)
                self.stream.append(h)
                self.fromline += (len(self.before) + h.removed)
                self.toline += (len(self.before) + h.added)
                self.before = []
                self.hunk = []
                self.proc = ''
            self.context = context

        def addhunk(self, hunk):
            if self.context:
                self.before = self.context
                self.context = []
            self.hunk = hunk

        def newfile(self, hdr):
            self.addcontext([])
            h = header(hdr)
            self.stream.append(h)
            self.header = h

        def finished(self):
            self.addcontext([])
            return self.stream
        transitions = {'file': {'context': addcontext, 'file': newfile, 'hunk': addhunk, 'range': addrange, }, 'context': {'file': newfile, 'hunk': addhunk, 'range': addrange, }, 'hunk': {'context': addcontext, 'file': newfile, 'range': addrange, }, 'range': {'context': addcontext, 'hunk': addhunk, }, }
    p = parser()
    state = 'context'
    for (newstate, data) in scanpatch(fp):
        try:
            p.transitions[state][newstate](p, data)
        except KeyError:
            raise patch.PatchError(('unhandled transition: %s -> %s' % (state, newstate)))
        state = newstate
    return p.finished()
