{
  super.visitNewExpression(expression);
  final PsiExpressionList argumentList=expression.getArgumentList();
  if (argumentList == null) {
    return;
  }
  final PsiExpression[] expressions=argumentList.getExpressions();
  if (expressions.length != 0) {
    return;
  }
  final PsiJavaCodeReferenceElement classReference=expression.getClassReference();
  if (classReference == null) {
    return;
  }
  final PsiElement target=classReference.resolve();
  if (!(target instanceof PsiClass)) {
    return;
  }
  final PsiClass aClass=(PsiClass)target;
  if (!InheritanceUtil.isInheritor(aClass,CommonClassNames.JAVA_LANG_EXCEPTION)) {
    return;
  }
  if (ignoreWithoutParameters) {
    if (!hasAccessibleConstructorWithParameters(aClass,expression))     return;
  }
  registerNewExpressionError(expression);
}
