{
  LinkedHashMap<Sdk,Sdk> sdks=new LinkedHashMap<Sdk,Sdk>(mySdks);
  if (addedOnly) {
    Sdk[] allJdks=SdkTable.getInstance().getAllSdks();
    for (    Sdk jdk : allJdks) {
      sdks.remove(jdk);
    }
  }
  ArrayList<String> allNames=new ArrayList<String>();
  Sdk itemWithError=null;
  for (  Sdk currItem : sdks.values()) {
    String currName=currItem.getName();
    if (currName.isEmpty()) {
      itemWithError=currItem;
      errorString[0]=ProjectBundle.message("sdk.list.name.required.error");
      break;
    }
    if (allNames.contains(currName)) {
      itemWithError=currItem;
      errorString[0]=ProjectBundle.message("sdk.list.unique.name.required.error");
      break;
    }
    final SdkAdditionalData sdkAdditionalData=currItem.getSdkAdditionalData();
    if (sdkAdditionalData instanceof ValidatableSdkAdditionalData) {
      try {
        ((ValidatableSdkAdditionalData)sdkAdditionalData).checkValid(this);
      }
 catch (      ConfigurationException e) {
        if (rootConfigurable != null) {
          final Object projectJdk=rootConfigurable.getSelectedObject();
          if (!(projectJdk instanceof Sdk) || !Comparing.strEqual(((Sdk)projectJdk).getName(),currName)) {
            rootConfigurable.selectNodeInTree(currName);
          }
        }
        throw new ConfigurationException(ProjectBundle.message("sdk.configuration.exception",currName) + " " + e.getMessage());
      }
    }
    allNames.add(currName);
  }
  if (itemWithError == null)   return true;
  if (rootConfigurable != null) {
    rootConfigurable.selectNodeInTree(itemWithError.getName());
  }
  return false;
}
