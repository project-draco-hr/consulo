{
  final Set<String> paths;
synchronized (myStateLock) {
    myState.validateRecentProjects();
    paths=ContainerUtil.newLinkedHashSet(myState.recentPaths);
  }
  Set<String> openedPaths=new THashSet<String>();
  for (  Project openProject : ProjectManager.getInstance().getOpenProjects()) {
    ContainerUtil.addIfNotNull(openedPaths,getProjectPath(openProject));
  }
  paths.remove(null);
  paths.removeAll(openedPaths);
  List<AnAction> actions=new SmartList<AnAction>();
  Set<String> duplicates=getDuplicateProjectNames(openedPaths,paths);
  if (useGroups) {
    final List<ProjectGroup> groups=new ArrayList<ProjectGroup>(new ArrayList<ProjectGroup>(myState.groups));
    final List<String> projectPaths=new ArrayList<String>(paths);
    Collections.sort(groups,new Comparator<ProjectGroup>(){
      @Override public int compare(      ProjectGroup o1,      ProjectGroup o2){
        int ind1=getGroupIndex(o1);
        int ind2=getGroupIndex(o2);
        return ind1 == ind2 ? StringUtil.naturalCompare(o1.getName(),o2.getName()) : ind1 - ind2;
      }
      private int getGroupIndex(      ProjectGroup group){
        int index=-1;
        for (        String path : group.getProjects()) {
          final int i=projectPaths.indexOf(path);
          if (index >= 0 && index > i) {
            index=i;
          }
        }
        return index;
      }
    }
);
    for (    ProjectGroup group : groups) {
      paths.removeAll(group.getProjects());
    }
    for (    ProjectGroup group : groups) {
      final List<AnAction> children=new ArrayList<AnAction>();
      for (      String path : group.getProjects()) {
        final AnAction action=createOpenAction(path,duplicates);
        if (action != null) {
          children.add(action);
          if (forMainMenu && children.size() >= MAX_PROJECTS_IN_MAIN_MENU) {
            break;
          }
        }
      }
      actions.add(new ProjectGroupActionGroup(group,children));
      if (group.isExpanded()) {
        for (        AnAction child : children) {
          actions.add(child);
        }
      }
    }
  }
  for (  final String path : paths) {
    final AnAction action=createOpenAction(path,duplicates);
    if (action != null) {
      actions.add(action);
    }
  }
  if (actions.isEmpty()) {
    return AnAction.EMPTY_ARRAY;
  }
  return actions.toArray(new AnAction[actions.size()]);
}
