{
  myProject=project;
  mySettings=settings;
  myActionManager=actionManager;
  mySessionName=sessionName;
  myTabs=new JBTabs(project,actionManager,this){
    @Nullable public Object getData(    @NonNls final String dataId){
      if (ViewContext.CONTENT_KEY.getName().equals(dataId)) {
        TabInfo info=myTabs.getTargetInfo();
        if (info != null) {
          return getGridFor(info).getData(dataId);
        }
      }
 else       if (ViewContext.CONTEXT_KEY.getName().equals(dataId)) {
        return NewDebuggerContentUI.this;
      }
      return super.getData(dataId);
    }
  }
;
  myTabs.setPopupGroup((ActionGroup)myActionManager.getAction(DebuggerActions.DEBUGGER_VIEW),TAB_POPUP_PLACE);
  myTabs.setPaintBorder(false);
  myTabs.setPaintFocus(false);
  myTabs.setRequestFocusOnLastFocusedComponent(true);
  myComponent.setContent(myTabs);
  myTabs.addListener(new TabsListener(){
    public void selectionChanged(    final TabInfo oldSelection,    final TabInfo newSelection){
      if (!myTabs.isShowing())       return;
      if (newSelection != null) {
        newSelection.stopAlerting();
      }
    }
  }
);
  myDebuggerActions.add(myActionManager.getAction(SHOW_EXECUTION_POINT));
  myDebuggerActions.addSeparator();
  myDebuggerActions.add(myActionManager.getAction(STEP_OVER));
  myDebuggerActions.add(myActionManager.getAction(STEP_INTO));
  myDebuggerActions.add(myActionManager.getAction(FORCE_STEP_INTO));
  myDebuggerActions.add(myActionManager.getAction(STEP_OUT));
  myDebuggerActions.addSeparator();
  myDebuggerActions.add(myActionManager.getAction(RUN_TO_CURSOR));
}
