{
  Grid grid=findGridFor(content);
  if (grid != null || !createIfMissing)   return grid;
  grid=new Grid(this,mySessionName);
  grid.setBorder(new EmptyBorder(1,0,0,0));
  TabInfo tab=new TabInfo(grid).setObject(getStateFor(content).getTab()).setText("Tab");
  final JComponent left=myActionManager.createActionToolbar(ActionPlaces.DEBUGGER_TOOLBAR,myDebuggerActions,true).getComponent();
  Wrapper minimizedToolbarPlaceholder=new Wrapper();
  myToolbarPlaceholders.put(grid,minimizedToolbarPlaceholder);
  final JComponent right=minimizedToolbarPlaceholder;
  NonOpaquePanel sideComponent=new NonOpaquePanel(new AbstractLayoutManager(){
    public Dimension preferredLayoutSize(    final Container parent){
      Dimension size=new Dimension();
      Dimension leftSize=left.getPreferredSize();
      Dimension rightSize=right.getPreferredSize();
      size.width=leftSize.width + rightSize.width;
      size.height=Math.max(leftSize.height,rightSize.height);
      return size;
    }
    public void layoutContainer(    final Container parent){
      Dimension size=parent.getSize();
      Dimension prefSize=parent.getPreferredSize();
      if (prefSize.width <= size.width) {
        left.setBounds(0,0,left.getPreferredSize().width,parent.getHeight());
        Dimension rightSize=right.getPreferredSize();
        right.setBounds(parent.getWidth() - rightSize.width,0,rightSize.width,parent.getHeight());
      }
 else {
        Dimension leftMinSize=left.getMinimumSize();
        Dimension rightMinSize=right.getMinimumSize();
        int delta=(prefSize.width - size.width) / 2;
        left.setBounds(0,0,left.getPreferredSize().width - delta,parent.getHeight());
        int rightX=(int)left.getBounds().getMaxX();
        int rightWidth=size.width - rightX;
        if (rightWidth < rightMinSize.width) {
          Dimension leftSize=left.getSize();
          int diffToRightMin=rightMinSize.width - rightWidth;
          if (leftSize.width - diffToRightMin >= leftMinSize.width) {
            leftSize.width=leftSize.width - diffToRightMin;
            left.setSize(leftSize);
          }
        }
        right.setBounds((int)left.getBounds().getMaxX(),0,parent.getWidth() - left.getWidth(),parent.getHeight());
      }
    }
  }
);
  tab.setSideComponent(sideComponent);
  sideComponent.add(left);
  sideComponent.add(right);
  tab.setTabLabelActions((ActionGroup)myActionManager.getAction(DebuggerActions.DEBUGGER_VIEW_TOOLBAR),TAB_TOOLBAR_PLACE);
  myTabs.addTab(tab);
  myTabs.sortTabs(myTabsComparator);
  return grid;
}
