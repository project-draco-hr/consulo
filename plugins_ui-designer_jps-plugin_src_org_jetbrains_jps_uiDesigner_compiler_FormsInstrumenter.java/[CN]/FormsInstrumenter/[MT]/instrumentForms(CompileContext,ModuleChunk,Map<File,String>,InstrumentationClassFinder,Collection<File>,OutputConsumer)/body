{
  final Map<String,File> class2form=new HashMap<String,File>();
  final OneToManyPathsMapping sourceToFormMap=context.getProjectDescriptor().dataManager.getSourceToFormMap();
  final Set<File> touchedFiles=new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY);
  final MyNestedFormLoader nestedFormsLoader=new MyNestedFormLoader(chunkSourcePath,ProjectPaths.getOutputPathsWithDependents(chunk));
  for (  File formFile : forms) {
    final LwRootContainer rootContainer;
    try {
      rootContainer=Utils.getRootContainer(formFile.toURI().toURL(),new CompiledClassPropertiesProvider(finder.getLoader()));
    }
 catch (    AlienFormFileException e) {
      continue;
    }
catch (    UnexpectedFormElementException e) {
      context.processMessage(new CompilerMessage(getPresentableName(),BuildMessage.Kind.ERROR,e.getMessage(),formFile.getPath()));
      LOG.info(e);
      continue;
    }
catch (    UIDesignerException e) {
      context.processMessage(new CompilerMessage(getPresentableName(),BuildMessage.Kind.ERROR,e.getMessage(),formFile.getPath()));
      LOG.info(e);
      continue;
    }
catch (    Exception e) {
      throw new ProjectBuildException("Cannot process form file " + formFile.getAbsolutePath(),e);
    }
    final String classToBind=rootContainer.getClassToBind();
    if (classToBind == null) {
      continue;
    }
    final CompiledClass compiled=findClassFile(outConsumer,classToBind);
    if (compiled == null) {
      context.processMessage(new CompilerMessage(getPresentableName(),BuildMessage.Kind.WARNING,"Class to bind does not exist: " + classToBind,formFile.getAbsolutePath()));
      continue;
    }
    final File alreadyProcessedForm=class2form.get(classToBind);
    if (alreadyProcessedForm != null) {
      context.processMessage(new CompilerMessage(getPresentableName(),BuildMessage.Kind.WARNING,formFile.getAbsolutePath() + ": The form is bound to the class " + classToBind+ ".\nAnother form "+ alreadyProcessedForm.getAbsolutePath()+ " is also bound to this class",formFile.getAbsolutePath()));
      continue;
    }
    class2form.put(classToBind,formFile);
    try {
      final BinaryContent originalContent=compiled.getContent();
      final ClassReader classReader=new ClassReader(originalContent.getBuffer(),originalContent.getOffset(),originalContent.getLength());
      final int version=getClassFileVersion(classReader);
      final InstrumenterClassWriter classWriter=new InstrumenterClassWriter(getAsmClassWriterFlags(version),finder);
      final AsmCodeGenerator codeGenerator=new AsmCodeGenerator(rootContainer,finder,nestedFormsLoader,false,classWriter);
      final byte[] patchedBytes=codeGenerator.patchClass(classReader);
      if (patchedBytes != null) {
        compiled.setContent(new BinaryContent(patchedBytes));
      }
      final FormErrorInfo[] warnings=codeGenerator.getWarnings();
      for (      final FormErrorInfo warning : warnings) {
        context.processMessage(new CompilerMessage(getPresentableName(),BuildMessage.Kind.WARNING,warning.getErrorMessage(),formFile.getAbsolutePath()));
      }
      final FormErrorInfo[] errors=codeGenerator.getErrors();
      if (errors.length > 0) {
        StringBuilder message=new StringBuilder();
        for (        final FormErrorInfo error : errors) {
          if (message.length() > 0) {
            message.append("\n");
          }
          message.append(formFile.getAbsolutePath()).append(": ").append(error.getErrorMessage());
        }
        context.processMessage(new CompilerMessage(getPresentableName(),BuildMessage.Kind.ERROR,message.toString()));
      }
 else {
        final File sourceFile=compiled.getSourceFile();
        if (sourceFile != null) {
          if (touchedFiles.add(sourceFile)) {
            sourceToFormMap.update(sourceFile.getPath(),formFile.getPath());
          }
 else {
            sourceToFormMap.appendData(sourceFile.getPath(),formFile.getPath());
          }
        }
      }
    }
 catch (    Exception e) {
      context.processMessage(new CompilerMessage(getPresentableName(),BuildMessage.Kind.ERROR,"Forms instrumentation failed" + e.getMessage(),formFile.getAbsolutePath()));
    }
  }
}
