{
  final JpsProject project=context.getProjectDescriptor().getProject();
  final JpsUiDesignerConfiguration config=JpsUiDesignerExtensionService.getInstance().getOrCreateUiDesignerConfiguration(project);
  if (!config.isInstrumentClasses()) {
    return ExitCode.NOTHING_DONE;
  }
  final Map<File,Collection<File>> srcToForms=FORMS_TO_COMPILE.get(context);
  FORMS_TO_COMPILE.set(context,null);
  if (srcToForms == null || srcToForms.isEmpty()) {
    return ExitCode.NOTHING_DONE;
  }
  final Set<File> formsToCompile=new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY);
  for (  Collection<File> files : srcToForms.values()) {
    formsToCompile.addAll(files);
  }
  if (JavaBuilderUtil.isCompileJavaIncrementally(context)) {
    final ProjectBuilderLogger logger=context.getLoggingManager().getProjectBuilderLogger();
    if (logger.isEnabled()) {
      logger.logCompiledFiles(formsToCompile,getPresentableName(),"Compiling forms:");
    }
  }
  try {
    final Collection<File> platformCp=ProjectPaths.getPlatformCompilationClasspath(chunk,false);
    final List<File> classpath=new ArrayList<File>();
    classpath.addAll(ProjectPaths.getCompilationClasspath(chunk,false));
    classpath.add(getResourcePath(GridConstraints.class));
    final Map<File,String> chunkSourcePath=ProjectPaths.getSourceRootsWithDependents(chunk);
    classpath.addAll(chunkSourcePath.keySet());
    final InstrumentationClassFinder finder=ClassProcessingBuilder.createInstrumentationClassFinder(platformCp,classpath,outputConsumer);
    try {
      final Map<File,Collection<File>> processed=instrumentForms(context,chunk,chunkSourcePath,finder,formsToCompile,outputConsumer);
      final OneToManyPathsMapping sourceToFormMap=context.getProjectDescriptor().dataManager.getSourceToFormMap();
      for (      Map.Entry<File,Collection<File>> entry : processed.entrySet()) {
        final File src=entry.getKey();
        final Collection<File> forms=entry.getValue();
        final Collection<String> formPaths=new ArrayList<String>(forms.size());
        for (        File form : forms) {
          formPaths.add(form.getPath());
        }
        sourceToFormMap.update(src.getPath(),formPaths);
        srcToForms.remove(src);
      }
      for (      File srcFile : srcToForms.keySet()) {
        sourceToFormMap.remove(srcFile.getPath());
      }
    }
  finally {
      finder.releaseResources();
    }
  }
  finally {
    context.processMessage(new ProgressMessage("Finished instrumenting forms [" + chunk.getName() + "]"));
  }
  return ExitCode.OK;
}
