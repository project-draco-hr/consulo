{
  if (editor.isViewer())   return;
  Document doc=editor.getDocument();
  if (!doc.isWritable()) {
    if (!FileDocumentManager.fileForDocumentCheckedOutSuccessfully(doc,(Project)dataContext.getData(DataConstants.PROJECT))) {
      return;
    }
  }
  Project project=editor.getProject();
  doc.startGuardedBlockChecking();
  if (project != null)   PsiManager.getInstance(project).addPsiTreeChangeListener(myCommitLogger);
  try {
    final String str=String.valueOf(charTyped);
    CommandProcessor.getInstance().setCurrentCommandName("Typing");
    final SelectionModel selectionModel=editor.getSelectionModel();
    if (selectionModel.hasBlockSelection()) {
      RangeMarker guard=selectionModel.getBlockSelectionGuard();
      if (guard != null) {
        DocumentEvent evt=new MockDocumentEvent(doc,editor.getCaretModel().getOffset());
        ReadOnlyFragmentModificationException e=new ReadOnlyFragmentModificationException(evt,guard);
        EditorActionManager.getInstance().getReadonlyFragmentModificationHandler().handle(e);
        return;
      }
      final LogicalPosition start=selectionModel.getBlockStart();
      final LogicalPosition end=selectionModel.getBlockEnd();
      int column=Math.min(start.column,end.column);
      int startLine=Math.min(start.line,end.line);
      int endLine=Math.max(start.line,end.line);
      EditorModificationUtil.deleteBlockSelection(editor);
      for (int i=startLine; i <= endLine; i++) {
        editor.getCaretModel().moveToLogicalPosition(new LogicalPosition(i,column));
        EditorModificationUtil.insertStringAtCaret(editor,str,true,true);
      }
      selectionModel.setBlockSelection(new LogicalPosition(startLine,column + 1),new LogicalPosition(endLine,column + 1));
      return;
    }
    EditorModificationUtil.insertStringAtCaret(editor,str,true,true);
  }
 catch (  ReadOnlyFragmentModificationException e) {
    EditorActionManager.getInstance().getReadonlyFragmentModificationHandler().handle(e);
  }
 finally {
    if (project != null)     PsiManager.getInstance(project).removePsiTreeChangeListener(myCommitLogger);
    doc.stopGuardedBlockChecking();
  }
}
