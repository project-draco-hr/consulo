{
  final File tempFile;
  final BuildRecipe childDependencies=new BuildRecipeImpl();
  if (myBuildConfiguration.isJarEnabled()) {
    tempFile=new File(myBuildConfiguration.getJarPath());
    final BuildRecipe childModuleRecipe=getChildInstructions(context);
    childModuleRecipe.visitInstructions(new BuildInstructionVisitor(){
      public boolean visitInstruction(      BuildInstruction instruction) throws RuntimeException {
        if (instruction.isExternalDependencyInstruction()) {
          childDependencies.addInstruction(instruction);
        }
        return true;
      }
    }
,false);
  }
 else {
    String moduleName=ModuleUtil.getModuleNameInReadAction(getModule());
    tempFile=File.createTempFile(moduleName + "___",TMP_FILE_SUFFIX);
    tempFile.deleteOnExit();
    makeJar(context,tempFile,childDependencies,fileFilter,true);
    childDependencies.visitInstructions(new BuildInstructionVisitor(){
      public boolean visitFileCopyInstruction(      FileCopyInstruction instruction) throws Exception {
        File file=new File(PathUtil.getCanonicalPath(DeploymentUtil.appendToPath(tempFile.getPath(),instruction.getOutputRelativePath())));
        addFileToDelete(file);
        return true;
      }
    }
,false);
  }
  ZipUtil.addFileToZip(outputStream,tempFile,getOutputRelativePath(),writtenRelativePaths,fileFilter);
  try {
    childDependencies.visitInstructionsWithExceptions(new BuildInstructionVisitor(){
      public boolean visitFileCopyInstruction(      FileCopyInstruction instruction) throws Exception {
        File file=instruction.getFile();
        String dependencyRelativePath=PathUtil.getCanonicalPath(DeploymentUtil.appendToPath(getOutputRelativePath(),instruction.getOutputRelativePath()));
        ZipUtil.addFileOrDirRecursively(outputStream,jarFile,file,dependencyRelativePath,fileFilter,writtenRelativePaths);
        return true;
      }
      public boolean visitJarAndCopyBuildInstruction(      JarAndCopyBuildInstruction instruction) throws Exception {
        if (instruction.getJarFile() == null) {
          File tempJar=File.createTempFile("___",TMP_FILE_SUFFIX);
          addFileToDelete(tempJar);
          instruction.makeJar(context,tempJar,fileFilter);
        }
        File jarFile=instruction.getJarFile();
        String dependencyRelativePath=PathUtil.getCanonicalPath(DeploymentUtil.appendToPath(getOutputRelativePath(),instruction.getOutputRelativePath()));
        ZipUtil.addFileToZip(outputStream,jarFile,dependencyRelativePath,writtenRelativePaths,fileFilter);
        return true;
      }
    }
,false);
  }
 catch (  IOException e) {
    throw e;
  }
catch (  RuntimeException e) {
    throw e;
  }
catch (  Exception e) {
  }
}
