{
  boolean hasChecks=false;
  for (int i=0; i < caretState.carets.size(); i++) {
    EditorTestUtil.CaretInfo expected=caretState.carets.get(i);
    if (expected.position != null || expected.selection != null) {
      hasChecks=true;
      break;
    }
  }
  if (!hasChecks) {
    return;
  }
  String messageSuffix=message == null ? "" : (message + ": ");
  CaretModel caretModel=editor.getCaretModel();
  List<Caret> allCarets=new ArrayList<Caret>(caretModel.getAllCarets());
  assertEquals(messageSuffix + " Unexpected number of carets",caretState.carets.size(),allCarets.size());
  for (int i=0; i < caretState.carets.size(); i++) {
    String caretDescription=caretState.carets.size() == 1 ? "" : "caret " + (i + 1) + "/"+ caretState.carets.size()+ " ";
    Caret currentCaret=allCarets.get(i);
    int actualCaretLine=editor.getDocument().getLineNumber(currentCaret.getOffset());
    int actualCaretColumn=currentCaret.getOffset() - editor.getDocument().getLineStartOffset(actualCaretLine);
    LogicalPosition actualCaretPosition=new LogicalPosition(actualCaretLine,actualCaretColumn);
    int[] selectionStarts=editor.getSelectionModel().getBlockSelectionStarts();
    int[] selectionEnds=editor.getSelectionModel().getBlockSelectionEnds();
    int selectionStart=editor.getSelectionModel().hasBlockSelection() ? selectionStarts[selectionStarts.length - 1] : currentCaret.getSelectionStart();
    int selectionEnd=editor.getSelectionModel().hasBlockSelection() ? selectionEnds[selectionEnds.length - 1] : currentCaret.getSelectionEnd();
    LogicalPosition actualSelectionStart=editor.offsetToLogicalPosition(selectionStart);
    LogicalPosition actualSelectionEnd=editor.offsetToLogicalPosition(selectionEnd);
    CaretInfo expected=caretState.carets.get(i);
    if (expected.position != null) {
      assertEquals(messageSuffix + caretDescription + "unexpected caret position",expected.position,actualCaretPosition);
    }
    if (expected.selection != null) {
      LogicalPosition expectedSelectionStart=editor.offsetToLogicalPosition(expected.selection.getStartOffset());
      LogicalPosition expectedSelectionEnd=editor.offsetToLogicalPosition(expected.selection.getEndOffset());
      assertEquals(messageSuffix + caretDescription + "unexpected selection start",expectedSelectionStart,actualSelectionStart);
      assertEquals(messageSuffix + caretDescription + "unexpected selection end",expectedSelectionEnd,actualSelectionEnd);
    }
 else {
      assertFalse(messageSuffix + caretDescription + "should has no selection, but was: ("+ actualSelectionStart+ ", "+ actualSelectionEnd+ ")",currentCaret.hasSelection());
    }
  }
}
