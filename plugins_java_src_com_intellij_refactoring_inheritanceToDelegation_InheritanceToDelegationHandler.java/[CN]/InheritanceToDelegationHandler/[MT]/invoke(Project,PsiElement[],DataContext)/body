{
  if (elements.length != 1)   return;
  final PsiClass aClass=(PsiClass)elements[0];
  Editor editor=PlatformDataKeys.EDITOR.getData(dataContext);
  if (aClass.isInterface()) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("class.is.interface",aClass.getQualifiedName()));
    CommonRefactoringUtil.showErrorHint(project,editor,message,REFACTORING_NAME,HelpID.INHERITANCE_TO_DELEGATION);
    return;
  }
  if (!CommonRefactoringUtil.checkReadOnlyStatus(project,aClass))   return;
  final PsiClass[] bases=aClass.getSupers();
  @NonNls final String javaLangObject=CommonClassNames.JAVA_LANG_OBJECT;
  if (bases.length == 0 || bases.length == 1 && javaLangObject.equals(bases[0].getQualifiedName())) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("class.does.not.have.base.classes.or.interfaces",aClass.getQualifiedName()));
    CommonRefactoringUtil.showErrorHint(project,editor,message,REFACTORING_NAME,HelpID.INHERITANCE_TO_DELEGATION);
    return;
  }
  final HashMap<PsiClass,Collection<MemberInfo>> basesToMemberInfos=new HashMap<PsiClass,Collection<MemberInfo>>();
  for (  PsiClass base : bases) {
    basesToMemberInfos.put(base,createBaseClassMemberInfos(base));
  }
  new InheritanceToDelegationDialog(project,aClass,bases,basesToMemberInfos).show();
}
