{
  PsiReferenceExpression reference=null;
  if (expression instanceof PsiAssignmentExpression) {
    PsiExpression left=((PsiAssignmentExpression)expression).getLExpression();
    if (left instanceof PsiReferenceExpression) {
      reference=(PsiReferenceExpression)left;
    }
  }
 else   if (expression instanceof PsiPostfixExpression) {
    PsiExpression operand=((PsiPostfixExpression)expression).getOperand();
    IElementType sign=((PsiPostfixExpression)expression).getOperationSign().getTokenType();
    if (operand instanceof PsiReferenceExpression && (sign == JavaTokenType.PLUSPLUS || sign == JavaTokenType.MINUSMINUS)) {
      reference=(PsiReferenceExpression)operand;
    }
  }
 else   if (expression instanceof PsiPrefixExpression) {
    PsiExpression operand=((PsiPrefixExpression)expression).getOperand();
    IElementType sign=((PsiPrefixExpression)expression).getOperationSign().getTokenType();
    if (operand instanceof PsiReferenceExpression && (sign == JavaTokenType.PLUSPLUS || sign == JavaTokenType.MINUSMINUS)) {
      reference=(PsiReferenceExpression)operand;
    }
  }
  PsiElement resolved=reference == null ? null : reference.resolve();
  PsiVariable variable=resolved instanceof PsiVariable ? (PsiVariable)resolved : null;
  if (variable == null || !variable.hasModifierProperty(PsiModifier.FINAL))   return null;
  if (!canWriteToFinal(variable,expression)) {
    String name=variable.getName();
    String description=MessageFormat.format("Cannot assign a value to final variable ''{0}''",new Object[]{name});
    HighlightInfo highlightInfo=HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,expression,description);
    PsiClass innerClass=getInnerClassVariableReferencedFrom(variable,expression);
    if (innerClass == null || variable instanceof PsiField) {
      QuickFixAction.registerQuickFixAction(highlightInfo,new ModifierFix(variable,PsiModifier.FINAL,false));
    }
 else {
      QuickFixAction.registerQuickFixAction(highlightInfo,new VariableAccessFromInnerClassFix(variable,innerClass));
    }
    return highlightInfo;
  }
  return null;
}
