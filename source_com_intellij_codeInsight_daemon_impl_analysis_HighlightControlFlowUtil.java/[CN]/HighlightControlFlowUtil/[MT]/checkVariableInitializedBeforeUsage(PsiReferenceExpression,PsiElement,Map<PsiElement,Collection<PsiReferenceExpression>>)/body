{
  if (!(element instanceof PsiVariable) || element instanceof ImplicitVariable)   return null;
  PsiVariable variable=(PsiVariable)element;
  if (!PsiUtil.isAccessedForReading(expression))   return null;
  int startOffset=expression.getTextRange().getStartOffset();
  PsiElement topBlock;
  if (variable.hasInitializer()) {
    topBlock=PsiUtil.getVariableCodeBlock(variable,variable);
    if (topBlock == null)     return null;
  }
 else {
    PsiElement scope=variable instanceof PsiField ? variable.getParent() : variable.getParent() != null ? variable.getParent().getParent() : null;
    topBlock=scope instanceof JspFile ? scope : PsiUtil.getTopLevelEnclosingCodeBlock(expression,scope);
    if (variable instanceof PsiField) {
      if (!variable.hasModifierProperty(PsiModifier.FINAL))       return null;
      if (PsiUtil.findEnclosingConstructorOrInitializer(expression) == null && HighlightUtil.findEnclosingFieldInitializer(expression) == null) {
        return null;
      }
      if (inInnerClass(expression,((PsiField)variable).getContainingClass()))       return null;
      PsiElement parent=topBlock.getParent();
      PsiCodeBlock block;
      PsiClass aClass;
      if (parent instanceof PsiMethod) {
        PsiMethod constructor=(PsiMethod)parent;
        if (!parent.getManager().areElementsEquivalent(constructor.getContainingClass(),((PsiField)variable).getContainingClass()))         return null;
        if (variable.hasModifierProperty(PsiModifier.STATIC))         return null;
        List<PsiMethod> redirectedConstructors=getRedirectedConstructors(constructor);
        for (int j=0; redirectedConstructors != null && j < redirectedConstructors.size(); j++) {
          PsiMethod redirectedConstructor=redirectedConstructors.get(j);
          if (redirectedConstructor.getBody() != null && variableDefinitelyAssignedIn(variable,redirectedConstructor.getBody())) {
            return null;
          }
        }
        block=constructor.getBody();
        aClass=constructor.getContainingClass();
      }
 else       if (parent instanceof PsiClassInitializer) {
        PsiClassInitializer classInitializer=(PsiClassInitializer)parent;
        if (!parent.getManager().areElementsEquivalent(classInitializer.getContainingClass(),((PsiField)variable).getContainingClass()))         return null;
        block=classInitializer.getBody();
        aClass=classInitializer.getContainingClass();
      }
 else {
        PsiField field=(PsiField)variable;
        aClass=field.getContainingClass();
        if (aClass == null || isFieldInitializedInOtherFieldInitializer(aClass,field,field.hasModifierProperty(PsiModifier.STATIC))) {
          return null;
        }
        block=null;
        PsiMethod[] constructors=aClass.getConstructors();
        for (        PsiMethod constructor : constructors) {
          if (startOffset < constructor.getTextRange().getStartOffset())           continue;
          if (constructor.getBody() != null && variableDefinitelyAssignedIn(variable,constructor.getBody())) {
            return null;
          }
          List<PsiMethod> redirectedConstructors=getRedirectedConstructors(constructor);
          for (int j=0; redirectedConstructors != null && j < redirectedConstructors.size(); j++) {
            PsiMethod redirectedConstructor=redirectedConstructors.get(j);
            if (startOffset < redirectedConstructor.getTextRange().getStartOffset())             continue;
            if (redirectedConstructor.getBody() != null && variableDefinitelyAssignedIn(variable,redirectedConstructor.getBody())) {
              return null;
            }
          }
        }
      }
      if (aClass != null) {
        PsiClassInitializer[] initializers=aClass.getInitializers();
        for (        PsiClassInitializer initializer : initializers) {
          PsiCodeBlock body=initializer.getBody();
          if (body == null)           continue;
          if (body == block)           break;
          boolean shouldCheckInitializerOrder=block == null || block.getParent() instanceof PsiClassInitializer;
          if (shouldCheckInitializerOrder && startOffset < initializer.getTextRange().getStartOffset())           continue;
          if (initializer.hasModifierProperty(PsiModifier.STATIC) == variable.hasModifierProperty(PsiModifier.STATIC)) {
            if (variableDefinitelyAssignedIn(variable,body))             return null;
          }
        }
      }
    }
  }
  if (topBlock == null)   return null;
  Collection<PsiReferenceExpression> codeBlockProblems=uninitializedVarProblems.get(topBlock);
  if (codeBlockProblems == null) {
    try {
      ControlFlow controlFlow=ControlFlowFactory.getControlFlow(topBlock,LocalsOrMyInstanceFieldsControlFlowPolicy.getInstance());
      codeBlockProblems=ControlFlowUtil.getReadBeforeWrite(controlFlow);
    }
 catch (    AnalysisCanceledException e) {
      codeBlockProblems=Collections.EMPTY_LIST;
    }
    uninitializedVarProblems.put(topBlock,codeBlockProblems);
  }
  if (codeBlockProblems.contains(expression)) {
    String name=expression.getElement().getText();
    String description=MessageFormat.format(VARIABLE_NOT_INITIALIZED,new Object[]{name});
    return HighlightInfo.createHighlightInfo(HighlightInfoType.ERROR,expression,description);
  }
  return null;
}
