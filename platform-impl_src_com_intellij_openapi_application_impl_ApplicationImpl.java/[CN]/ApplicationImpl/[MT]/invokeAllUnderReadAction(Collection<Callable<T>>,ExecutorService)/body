{
  final List<Callable<T>> newCallables=new ArrayList<Callable<T>>(tasks.size());
  for (  final Callable<T> task : tasks) {
    Callable<T> newCallable=new Callable<T>(){
      public T call() throws Exception {
        boolean old=setExceptionalThreadWithReadAccessFlag(true);
        try {
          LOG.assertTrue(isReadAccessAllowed());
          return task.call();
        }
  finally {
          setExceptionalThreadWithReadAccessFlag(old);
        }
      }
    }
;
    newCallables.add(newCallable);
  }
  final Ref<Throwable> exception=new Ref<Throwable>();
  List<Future<T>> result=runReadAction(new Computable<List<Future<T>>>(){
    public List<Future<T>> compute(){
      try {
        return ConcurrencyUtil.invokeAll(newCallables,executorService);
      }
 catch (      Throwable throwable) {
        exception.set(throwable);
        return null;
      }
    }
  }
);
  if (exception.get() != null)   throw exception.get();
  return result;
}
