{
  if (statement1 == null && statement2 == null) {
    return true;
  }
  if (statement1 == null || statement2 == null) {
    return false;
  }
  final int type1=getStatementType(statement1);
  final int type2=getStatementType(statement2);
  if (type1 != type2) {
    return false;
  }
switch (type1) {
case ASSERT_STATEMENT:
    return assertStatementsAreEquivalent((PsiAssertStatement)statement1,(PsiAssertStatement)statement2);
case BLOCK_STATEMENT:
  return blockStatementsAreEquivalent((PsiBlockStatement)statement1,(PsiBlockStatement)statement2);
case BREAK_STATEMENT:
return breakStatementsAreEquivalent((PsiBreakStatement)statement1,(PsiBreakStatement)statement2);
case CONTINUE_STATEMENT:
return continueStatementsAreEquivalent((PsiContinueStatement)statement1,(PsiContinueStatement)statement2);
case DECLARATION_STATEMENT:
return declarationStatementsAreEquivalent((PsiDeclarationStatement)statement1,(PsiDeclarationStatement)statement2);
case DO_WHILE_STATEMENT:
return doWhileStatementsAreEquivalent((PsiDoWhileStatement)statement1,(PsiDoWhileStatement)statement2);
case EMPTY_STATEMENT:
return true;
case EXPRESSION_LIST_STATEMENT:
return expressionListStatementsAreEquivalent((PsiExpressionListStatement)statement1,(PsiExpressionListStatement)statement2);
case EXPRESSION_STATEMENT:
return expressionStatementsAreEquivalent((PsiExpressionStatement)statement1,(PsiExpressionStatement)statement2);
case FOR_STATEMENT:
return forStatementsAreEquivalent((PsiForStatement)statement1,(PsiForStatement)statement2);
case FOR_EACH_STATEMENT:
return forEachStatementsAreEquivalent((PsiForeachStatement)statement1,(PsiForeachStatement)statement2);
case IF_STATEMENT:
return ifStatementsAreEquivalent((PsiIfStatement)statement1,(PsiIfStatement)statement2);
case LABELED_STATEMENT:
return labeledStatementsAreEquivalent((PsiLabeledStatement)statement1,(PsiLabeledStatement)statement2);
case RETURN_STATEMENT:
return returnStatementsAreEquivalent((PsiReturnStatement)statement1,(PsiReturnStatement)statement2);
case SWITCH_LABEL_STATEMENT:
return switchLabelStatementsAreEquivalent((PsiSwitchLabelStatement)statement1,(PsiSwitchLabelStatement)statement2);
case SWITCH_STATEMENT:
return switchStatementsAreEquivalent((PsiSwitchStatement)statement1,(PsiSwitchStatement)statement2);
case SYNCHRONIZED_STATEMENT:
return synchronizedStatementsAreEquivalent((PsiSynchronizedStatement)statement1,(PsiSynchronizedStatement)statement2);
case THROW_STATEMENT:
return throwStatementsAreEquivalent((PsiThrowStatement)statement1,(PsiThrowStatement)statement2);
case TRY_STATEMENT:
return tryStatementsAreEquivalent((PsiTryStatement)statement1,(PsiTryStatement)statement2);
case WHILE_STATEMENT:
return whileStatementsAreEquivalent((PsiWhileStatement)statement1,(PsiWhileStatement)statement2);
default :
final String text1=statement1.getText();
final String text2=statement2.getText();
return text1.equals(text2);
}
}
