{
  if (expression1 == null && expression2 == null) {
    return true;
  }
  if (expression1 == null || expression2 == null) {
    return false;
  }
  PsiExpression expToCompare1=expression1;
  while (expToCompare1 instanceof PsiParenthesizedExpression) {
    final PsiParenthesizedExpression parenthesizedExpression=(PsiParenthesizedExpression)expToCompare1;
    expToCompare1=parenthesizedExpression.getExpression();
  }
  PsiExpression expToCompare2=expression2;
  while (expToCompare2 instanceof PsiParenthesizedExpression) {
    final PsiParenthesizedExpression parenthesizedExpression=(PsiParenthesizedExpression)expToCompare2;
    expToCompare2=parenthesizedExpression.getExpression();
  }
  if (expToCompare1 == null && expToCompare2 == null) {
    return true;
  }
  if (expToCompare1 == null || expToCompare2 == null) {
    return false;
  }
  final int type1=getExpressionType(expToCompare1);
  final int type2=getExpressionType(expToCompare2);
  if (type1 != type2) {
    return false;
  }
switch (type1) {
case THIS_EXPRESSION:
case SUPER_EXPRESSION:
    return true;
case LITERAL_EXPRESSION:
case CLASS_OBJECT_EXPRESSION:
case REFERENCE_EXPRESSION:
  final String text1=expToCompare1.getText();
final String text2=expToCompare2.getText();
return text1.equals(text2);
case METHOD_CALL_EXPRESSION:
return methodCallExpressionsAreEquivalent((PsiMethodCallExpression)expToCompare1,(PsiMethodCallExpression)expToCompare2);
case NEW_EXPRESSION:
return newExpressionsAreEquivalent((PsiNewExpression)expToCompare1,(PsiNewExpression)expToCompare2);
case ARRAY_INITIALIZER_EXPRESSION:
return arrayInitializerExpressionsAreEquivalent((PsiArrayInitializerExpression)expToCompare1,(PsiArrayInitializerExpression)expToCompare2);
case TYPECAST_EXPRESSION:
return typecastExpressionsAreEquivalent((PsiTypeCastExpression)expToCompare2,(PsiTypeCastExpression)expToCompare1);
case ARRAY_ACCESS_EXPRESSION:
return arrayAccessExpressionsAreEquivalent((PsiArrayAccessExpression)expToCompare2,(PsiArrayAccessExpression)expToCompare1);
case PREFIX_EXPRESSION:
return prefixExpressionsAreEquivalent((PsiPrefixExpression)expToCompare1,(PsiPrefixExpression)expToCompare2);
case POSTFIX_EXPRESSION:
return postfixExpressionsAreEquivalent((PsiPostfixExpression)expToCompare1,(PsiPostfixExpression)expToCompare2);
case BINARY_EXPRESSION:
return binaryExpressionsAreEquivalent((PsiBinaryExpression)expToCompare1,(PsiBinaryExpression)expToCompare2);
case ASSIGNMENT_EXPRESSION:
return assignmentExpressionsAreEquivalent((PsiAssignmentExpression)expToCompare1,(PsiAssignmentExpression)expToCompare2);
case CONDITIONAL_EXPRESSION:
return conditionalExpressionsAreEquivalent((PsiConditionalExpression)expToCompare1,(PsiConditionalExpression)expToCompare2);
default :
return false;
}
}
