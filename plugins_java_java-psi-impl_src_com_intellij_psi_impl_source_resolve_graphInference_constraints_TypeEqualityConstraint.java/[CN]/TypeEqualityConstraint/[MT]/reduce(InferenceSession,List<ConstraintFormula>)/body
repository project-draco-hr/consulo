{
  if (session.isProperType(myT) && session.isProperType(myS)) {
    return myT.equals(myS);
  }
  InferenceVariable inferenceVariable=session.getInferenceVariable(myS);
  if (inferenceVariable != null) {
    inferenceVariable.addBound(myT,InferenceBound.EQ);
    return true;
  }
  inferenceVariable=session.getInferenceVariable(myT);
  if (inferenceVariable != null) {
    inferenceVariable.addBound(myS,InferenceBound.EQ);
    return true;
  }
  if (myT instanceof PsiClassType && myS instanceof PsiClassType) {
    final PsiClassType.ClassResolveResult tResult=((PsiClassType)myT).resolveGenerics();
    final PsiClassType.ClassResolveResult sResult=((PsiClassType)myS).resolveGenerics();
    final PsiClass C=tResult.getElement();
    if (C == sResult.getElement() && C != null) {
      final PsiSubstitutor tSubstitutor=tResult.getSubstitutor();
      final PsiSubstitutor sSubstitutor=sResult.getSubstitutor();
      for (      PsiTypeParameter typeParameter : C.getTypeParameters()) {
        final PsiType tSubstituted=tSubstitutor.substitute(typeParameter);
        final PsiType sSubstituted=sSubstitutor.substitute(typeParameter);
        if (tSubstituted != null && sSubstituted != null) {
          constraints.add(new TypeEqualityConstraint(tSubstituted,sSubstituted));
        }
      }
      return true;
    }
  }
  if (myT instanceof PsiArrayType && myS instanceof PsiArrayType) {
    constraints.add(new TypeEqualityConstraint(((PsiArrayType)myT).getComponentType(),((PsiArrayType)myS).getComponentType()));
    return true;
  }
  if (myT instanceof PsiIntersectionType && myS instanceof PsiIntersectionType) {
    final PsiType[] tConjuncts=((PsiIntersectionType)myT).getConjuncts();
    final PsiType[] sConjuncts=((PsiIntersectionType)myS).getConjuncts();
    if (sConjuncts.length == tConjuncts.length) {
      for (int i=0; i < sConjuncts.length; i++) {
        constraints.add(new TypeEqualityConstraint(tConjuncts[i],sConjuncts[i]));
      }
      return true;
    }
  }
  if (myT instanceof PsiWildcardType && myS instanceof PsiWildcardType) {
    final PsiType tBound=((PsiWildcardType)myT).getBound();
    final PsiType sBound=((PsiWildcardType)myS).getBound();
    if (tBound == null && sBound == null)     return true;
    if (((PsiWildcardType)myT).isExtends() && ((PsiWildcardType)myS).isExtends() || ((PsiWildcardType)myT).isSuper() && ((PsiWildcardType)myS).isSuper()) {
      LOG.assertTrue(tBound != null);
      LOG.assertTrue(sBound != null);
      constraints.add(new TypeEqualityConstraint(tBound,sBound));
      return true;
    }
  }
  return false;
}
