{
  JPanel panel=new JPanel(new BorderLayout());
  panel.setBorder(BorderFactory.createEmptyBorder(8,0,4,0));
  final MyTableModel tableModel=new MyTableModel();
  myTable=new Table(tableModel);
  myTable.setShowGrid(false);
  TableColumnModel columnModel=myTable.getColumnModel();
  final int checkBoxWidth=new JCheckBox().getPreferredSize().width;
  columnModel.getColumn(CHECK_COLUMN).setCellRenderer(new BooleanTableCellRenderer());
  columnModel.getColumn(CHECK_COLUMN).setMaxWidth(checkBoxWidth);
  columnModel.getColumn(CHECK_COLUMN).setMinWidth(checkBoxWidth);
  @NonNls InputMap inputMap=myTable.getInputMap();
  inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_SPACE,0),"enable_disable");
  @NonNls final ActionMap actionMap=myTable.getActionMap();
  actionMap.put("enable_disable",new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      if (myTable.isEditing())       return;
      int[] rows=myTable.getSelectedRows();
      if (rows.length > 0) {
        boolean valueToBeSet=false;
        for (        int row : rows) {
          if (!myChecked[row]) {
            valueToBeSet=true;
            break;
          }
        }
        for (        int row : rows) {
          myChecked[row]=valueToBeSet;
        }
        tableModel.updateData();
      }
    }
  }
);
  panel.setLayout(new BorderLayout());
  JScrollPane scrollPane=ScrollPaneFactory.createScrollPane(myTable);
  panel.add(scrollPane,BorderLayout.CENTER);
  return panel;
}
