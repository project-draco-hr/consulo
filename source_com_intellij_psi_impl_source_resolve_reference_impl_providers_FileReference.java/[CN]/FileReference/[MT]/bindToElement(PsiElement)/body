{
  if (!(element instanceof PsiFileSystemItem))   throw new IncorrectOperationException("Cannot bind to element");
  PsiFileSystemItem fileSystemItem=(PsiFileSystemItem)element;
  VirtualFile dstVFile=PsiUtil.getVirtualFile(fileSystemItem);
  final PsiFile file=getElement().getContainingFile();
  if (dstVFile == null)   throw new IncorrectOperationException("Cannot bind to non-physical element:" + element);
  for (  final FileReferenceHelper helper : FileReferenceHelperRegistrar.getHelpers()) {
    if (helper.doNothingOnBind(file,this)) {
      return element;
    }
  }
  final VirtualFile currentFile=file.getVirtualFile();
  LOG.assertTrue(currentFile != null);
  String newName=null;
  for (  final FileReferenceHelper helper : FileReferenceHelperRegistrar.getHelpers()) {
    final String s=helper.getRelativePath(file.getProject(),currentFile,dstVFile);
    if (s != null) {
      newName=s;
      break;
    }
  }
  if (newName == null) {
    throw new IncorrectOperationException("Cannot find path between files; src = " + currentFile.getPresentableUrl() + "; dst = "+ dstVFile.getPresentableUrl());
  }
  final TextRange range=new TextRange(myFileReferenceSet.getStartInElement(),getRangeInElement().getEndOffset());
  final ElementManipulator<PsiElement> manipulator=getManipulator(getElement());
  if (manipulator == null) {
    throw new IncorrectOperationException("Manipulator not defined for: " + getElement());
  }
  return manipulator.handleContentChange(getElement(),range,newName);
}
