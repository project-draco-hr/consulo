{
  final String s=getText();
  if (s != null && s.equals("/")) {
    return ArrayUtil.EMPTY_OBJECT_ARRAY;
  }
  final CommonProcessors.CollectUniquesProcessor<PsiElement> collector=new CommonProcessors.CollectUniquesProcessor<PsiElement>();
  final PsiElementProcessor<PsiFileSystemItem> processor=createChildrenProcessor(new FilteringProcessor<PsiElement>(myFileReferenceSet.createCondition(),collector));
  for (  PsiFileSystemItem context : getContexts()) {
    for (    final PsiElement child : context.getChildren()) {
      if (child instanceof PsiFileSystemItem) {
        processor.execute((PsiFileSystemItem)child);
      }
    }
  }
  final PsiElement[] candidates=collector.toArray(new PsiElement[0]);
  final Object[] variants=new Object[candidates.length];
  System.arraycopy(candidates,0,variants,0,candidates.length);
  if (myFileReferenceSet.isUrlEncoded()) {
    for (int i=0; i < candidates.length; i++) {
      final PsiElement element=candidates[i];
      if (element instanceof PsiNamedElement) {
        final PsiNamedElement psiElement=(PsiNamedElement)element;
        String name=psiElement.getName();
        final String encoded=encode(name);
        if (!encoded.equals(name)) {
          final Icon icon=psiElement.getIcon(Iconable.ICON_FLAG_READ_STATUS | Iconable.ICON_FLAG_VISIBILITY);
          final Object lookupValue=LookupValueFactory.createLookupValue(encoded,icon);
          variants[i]=lookupValue;
        }
      }
    }
  }
  return variants;
}
