{
  final String text=getText();
  final Collection<PsiFileSystemItem> contexts=getContexts();
  final Collection<ResolveResult> result=new ArrayList<ResolveResult>(contexts.size());
  for (  final PsiFileSystemItem context : contexts) {
    if (text.length() == 0 && !myFileReferenceSet.isEndingSlashNotAllowed() && isLast() || ".".equals(text) || "/".equals(text)) {
      result.add(new PsiElementResolveResult(context));
    }
 else {
      final FileReferenceHelper<PsiFileSystemItem> helper=FileReferenceHelperRegistrar.getHelper(context);
      if (helper != null) {
        if ("..".equals(text)) {
          final PsiFileSystemItem resolved=helper.getParentDirectory(getElement().getProject(),context);
          if (resolved != null) {
            result.add(new PsiElementResolveResult(resolved));
          }
        }
 else {
          helper.processVariants(context,new BaseScopeProcessor(){
            public boolean execute(            final PsiElement element,            final PsiSubstitutor substitutor){
              PsiFileSystemItem item=(PsiFileSystemItem)element;
              if (equalsTo(item.getName())) {
                result.add(new PsiElementResolveResult(item));
                return false;
              }
              return true;
            }
          }
);
        }
      }
    }
  }
  final int resultCount=result.size();
  return resultCount > 0 ? result.toArray(new ResolveResult[resultCount]) : ResolveResult.EMPTY_ARRAY;
}
