{
  if (text.length() == 0 && !myFileReferenceSet.isEndingSlashNotAllowed() && isLast() || ".".equals(text) || "/".equals(text)) {
    result.add(new PsiElementResolveResult(context));
  }
 else   if ("..".equals(text)) {
    final PsiFileSystemItem resolved=context.getParent();
    if (resolved != null) {
      result.add(new PsiElementResolveResult(resolved));
    }
  }
 else {
    final int separatorIndex=text.indexOf('/');
    if (separatorIndex >= 0) {
      final List<ResolveResult> resolvedContexts=new ArrayList<ResolveResult>();
      innerResolveInContext(text.substring(0,separatorIndex),context,resolvedContexts);
      final String restOfText=text.substring(separatorIndex + 1);
      for (      ResolveResult contextVariant : resolvedContexts) {
        innerResolveInContext(restOfText,(PsiFileSystemItem)contextVariant.getElement(),result);
      }
    }
 else {
      final String decoded=decode(text);
      processVariants(context,new BaseScopeProcessor(){
        public boolean execute(        final PsiElement element,        final PsiSubstitutor substitutor){
          final String name=((PsiFileSystemItem)element).getName();
          if (myFileReferenceSet.isCaseSensitive() ? decoded.equals(name) : decoded.compareToIgnoreCase(name) == 0) {
            result.add(new PsiElementResolveResult(element));
            return false;
          }
          return true;
        }
      }
);
    }
  }
}
