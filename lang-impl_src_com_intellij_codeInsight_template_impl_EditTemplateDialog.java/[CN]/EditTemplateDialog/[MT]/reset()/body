{
  myKeyField.setText(myTemplate.getKey());
  myDescription.setText(myTemplate.getDescription());
  if (myTemplate.getShortcutChar() == TemplateSettings.DEFAULT_CHAR) {
    myExpandByCombo.setSelectedItem(myDefaultShortcutItem);
  }
 else   if (myTemplate.getShortcutChar() == TemplateSettings.TAB_CHAR) {
    myExpandByCombo.setSelectedItem(TAB);
  }
 else   if (myTemplate.getShortcutChar() == TemplateSettings.ENTER_CHAR) {
    myExpandByCombo.setSelectedItem(ENTER);
  }
 else {
    myExpandByCombo.setSelectedItem(SPACE);
  }
  CommandProcessor.getInstance().executeCommand(null,new Runnable(){
    public void run(){
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        public void run(){
          final Document document=myTemplateEditor.getDocument();
          document.replaceString(0,document.getTextLength(),myTemplate.getString());
        }
      }
);
    }
  }
,"",null);
  Set<String> groups=new TreeSet<String>();
  SchemesManager<TemplateGroup,TemplateGroup> schemesManager=TemplateSettings.getInstance().getSchemesManager();
  for (  TemplateGroup group : myTemplateGroups) {
    if (!schemesManager.isShared(group)) {
      groups.add(group.getName());
    }
  }
  for (  final Object group : groups) {
    String groupName=(String)group;
    myGroupCombo.addItem(groupName);
  }
  myGroupCombo.setSelectedItem(myTemplate.getGroupName());
  myVariables.clear();
  for (int i=0; i < myTemplate.getVariableCount(); i++) {
    Variable variable=new Variable(myTemplate.getVariableNameAt(i),myTemplate.getExpressionStringAt(i),myTemplate.getDefaultValueStringAt(i),myTemplate.isAlwaysStopAt(i));
    myVariables.add(variable);
  }
  for (  TemplateContextType type : myCbContextMap.keySet()) {
    JCheckBox cb=myCbContextMap.get(type);
    cb.setSelected(type.isEnabled(myTemplate.getTemplateContext()));
  }
  myCbReformat.setSelected(myTemplate.isToReformat());
  for (  TemplateOptionalProcessor processor : myCbOptionalProcessorMap.keySet()) {
    JCheckBox cb=myCbOptionalProcessorMap.get(processor);
    cb.setSelected(processor.isEnabled(myTemplate));
  }
  myExpandByCombo.setEnabled(!isEnabledInStaticContextOnly());
  updateHighlighter();
  validateOKButton();
  validateEditVariablesButton();
}
