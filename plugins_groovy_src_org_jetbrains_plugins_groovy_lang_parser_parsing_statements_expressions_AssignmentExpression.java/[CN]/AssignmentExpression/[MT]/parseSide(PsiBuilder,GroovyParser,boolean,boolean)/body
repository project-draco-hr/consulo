{
  if (tuple) {
    return TupleParse.parseTuple(builder,TUPLE_EXPRESSION,REFERENCE_EXPRESSION);
  }
  if (comExprAllowed) {
    Marker marker=builder.mark();
    final ExpressionStatement.Result result=ExpressionStatement.parse(builder,parser);
switch (result) {
case EXPR_STATEMENT:
      marker.drop();
    return true;
case EXPRESSION:
  ConditionalExpression.parseAfterCondition(builder,parser,marker);
return true;
case WRONG_WAY:
marker.rollbackTo();
}
}
return ConditionalExpression.parse(builder,parser);
}
