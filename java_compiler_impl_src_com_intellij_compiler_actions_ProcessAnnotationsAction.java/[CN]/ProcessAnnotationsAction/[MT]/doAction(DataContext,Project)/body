{
  final Module module=LangDataKeys.MODULE_CONTEXT.getData(dataContext);
  final CompilerFilter filter=new CompilerFilter(){
    public boolean acceptCompiler(    com.intellij.openapi.compiler.Compiler compiler){
      return compiler instanceof AnnotationProcessingCompiler;
    }
  }
;
  if (module != null) {
    CompilerManager.getInstance(project).make(new ModuleCompileScope(module,false),filter,null);
  }
 else {
    VirtualFile[] files=getCompilableFiles(project,PlatformDataKeys.VIRTUAL_FILE_ARRAY.getData(dataContext));
    if (files.length > 0) {
      CompilerManager.getInstance(project).make(new FileSetCompileScope(Arrays.asList(files),Module.EMPTY_ARRAY),filter,null);
    }
  }
}
