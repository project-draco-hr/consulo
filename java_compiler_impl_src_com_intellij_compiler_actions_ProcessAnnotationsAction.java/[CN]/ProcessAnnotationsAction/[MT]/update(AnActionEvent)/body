{
  super.update(event);
  Presentation presentation=event.getPresentation();
  if (!presentation.isEnabled()) {
    return;
  }
  DataContext dataContext=event.getDataContext();
  presentation.setVisible(false);
  Project project=PlatformDataKeys.PROJECT.getData(dataContext);
  if (project == null) {
    presentation.setEnabled(false);
    return;
  }
  CompilerConfiguration compilerConfiguration=CompilerConfiguration.getInstance(project);
  final Module module=LangDataKeys.MODULE.getData(dataContext);
  final Module moduleContext=LangDataKeys.MODULE_CONTEXT.getData(dataContext);
  if (!compilerConfiguration.isAnnotationProcessorsEnabled() || compilerConfiguration.getAnnotationProcessorsMap().isEmpty() || module != null && !Boolean.TRUE.equals(compilerConfiguration.getAnotationProcessedModules().get(module))) {
    presentation.setEnabled(false);
    return;
  }
  presentation.setVisible(true);
  final VirtualFile[] files=getCompilableFiles(project,PlatformDataKeys.VIRTUAL_FILE_ARRAY.getData(dataContext));
  if (moduleContext == null && files.length == 0) {
    presentation.setEnabled(false);
    return;
  }
  String elementDescription=null;
  if (moduleContext != null) {
    elementDescription=CompilerBundle.message("action.compile.description.module",moduleContext.getName());
  }
 else {
    PsiPackage aPackage=null;
    if (files.length == 1) {
      final PsiDirectory directory=PsiManager.getInstance(project).findDirectory(files[0]);
      if (directory != null) {
        aPackage=JavaDirectoryService.getInstance().getPackage(directory);
      }
    }
 else {
      PsiElement element=LangDataKeys.PSI_ELEMENT.getData(dataContext);
      if (element instanceof PsiPackage) {
        aPackage=(PsiPackage)element;
      }
    }
    if (aPackage != null) {
      String name=aPackage.getQualifiedName();
      if (name.length() == 0) {
        name="<default>";
      }
      elementDescription="'" + name + "'";
    }
 else     if (files.length == 1) {
      final VirtualFile file=files[0];
      FileType fileType=FileTypeManager.getInstance().getFileTypeByFile(file);
      if (CompilerManager.getInstance(project).isCompilableFileType(fileType)) {
        elementDescription="'" + file.getName() + "'";
      }
 else {
        if (!ActionPlaces.MAIN_MENU.equals(event.getPlace())) {
          presentation.setEnabled(false);
          presentation.setVisible(false);
          return;
        }
      }
    }
 else {
      elementDescription=CompilerBundle.message("action.compile.description.selected.files");
    }
  }
  if (elementDescription == null) {
    presentation.setEnabled(false);
    return;
  }
  presentation.setText(createPresentationText(elementDescription),true);
  presentation.setEnabled(true);
}
