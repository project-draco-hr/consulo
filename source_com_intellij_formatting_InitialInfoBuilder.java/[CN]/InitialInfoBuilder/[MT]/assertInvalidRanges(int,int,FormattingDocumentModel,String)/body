{
  final StringBuffer buffer=new StringBuffer();
  buffer.append("Invalid formatting blocks:").append(message).append("\n");
  buffer.append("Start offset:").append(startOffset).append(" end offset:").append(newEndOffset).append("\n");
  int minOffset=Math.max(Math.min(startOffset,newEndOffset) - 20,0);
  int maxOffset=Math.min(Math.max(startOffset,newEndOffset) + 20,model.getTextLength());
  buffer.append("Affected text fragment:[").append(minOffset).append(",").append(maxOffset).append("] - '").append(model.getText(new TextRange(minOffset,maxOffset))).append("'\n");
  if (model instanceof FormattingDocumentModelImpl) {
    buffer.append("in ").append(((FormattingDocumentModelImpl)model).getFile().getLanguage()).append("\n");
  }
  buffer.append("File text:\n");
  buffer.append(model.getText(new TextRange(0,model.getTextLength())).toString());
  if (model instanceof FormattingDocumentModelImpl) {
    final FormattingDocumentModelImpl modelImpl=((FormattingDocumentModelImpl)model);
    buffer.append("Psi Tree:");
    buffer.append('\n');
    final PsiFile file=modelImpl.getFile();
    final PsiFile[] roots=file.getPsiRoots();
    for (    PsiFile root : roots) {
      buffer.append("Root ").append(root.toString());
      DebugUtil.treeToBuffer(buffer,root.getNode(),0,false,true,true);
    }
    buffer.append('\n');
  }
  LOG.assertTrue(false,buffer.toString());
}
