{
  super(in);
  try {
    this.context=context;
    fileName=in.readInt();
    superClass=TypeRepr.externalizer(context).read(in);
    interfaces=(Set<TypeRepr.AbstractType>)RW.read(TypeRepr.externalizer(context),new HashSet<TypeRepr.AbstractType>(),in);
    nestedClasses=(Set<TypeRepr.AbstractType>)RW.read(TypeRepr.externalizer(context),new HashSet<TypeRepr.AbstractType>(),in);
    fields=(Set<FieldRepr>)RW.read(FieldRepr.externalizer(context),new HashSet<FieldRepr>(),in);
    methods=(Set<MethodRepr>)RW.read(MethodRepr.externalizer(context),new HashSet<MethodRepr>(),in);
    targets=(Set<ElemType>)RW.read(UsageRepr.AnnotationUsage.elementTypeExternalizer,EnumSet.noneOf(ElemType.class),in);
    final String s=in.readUTF();
    policy=s.length() == 0 ? null : RetentionPolicy.valueOf(s);
    outerClassName=in.readInt();
    isLocal=in.readBoolean();
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}
