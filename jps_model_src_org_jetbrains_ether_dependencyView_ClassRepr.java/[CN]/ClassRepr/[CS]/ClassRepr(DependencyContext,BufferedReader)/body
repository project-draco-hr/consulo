{
  super(context,r);
  fileName=context.get(RW.readString(r));
  sourceFileName=context.get(RW.readString(r));
  superClass=TypeRepr.reader(context).read(r);
  interfaces=(Set<TypeRepr.AbstractType>)RW.readMany(r,TypeRepr.reader(context),new HashSet<TypeRepr.AbstractType>());
  nestedClasses=(Set<TypeRepr.AbstractType>)RW.readMany(r,TypeRepr.reader(context),new HashSet<TypeRepr.AbstractType>());
  fields=(Set<FieldRepr>)RW.readMany(r,FieldRepr.reader(context),new HashSet<FieldRepr>());
  methods=(Set<MethodRepr>)RW.readMany(r,MethodRepr.reader(context),new HashSet<MethodRepr>());
  targets=(Set<ElementType>)RW.readMany(r,UsageRepr.AnnotationUsage.elementTypeReader,new HashSet<ElementType>());
  final String s=RW.readString(r);
  policy=s.length() == 0 ? null : RetentionPolicy.valueOf(s);
  outerClassName=context.get(RW.readString(r));
  isLocal=RW.readString(r).equals("true");
}
