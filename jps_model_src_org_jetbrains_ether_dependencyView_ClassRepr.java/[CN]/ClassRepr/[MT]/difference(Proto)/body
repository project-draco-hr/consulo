{
  final ClassRepr pastClass=(ClassRepr)past;
  final Difference diff=super.difference(past);
  int base=diff.base();
  if (!mySuperClass.equals(pastClass.mySuperClass)) {
    base|=Difference.SUPERCLASS;
  }
  if (!myUsages.equals(pastClass.myUsages)) {
    base|=Difference.USAGES;
  }
  final int d=base;
  return new Diff(){
    @Override public boolean extendsAdded(){
      final String pastSuperName=myContext.getValue(((TypeRepr.ClassType)((ClassRepr)past).mySuperClass).className);
      return (d & Difference.SUPERCLASS) > 0 && pastSuperName.equals("java/lang/Object");
    }
    @Override public boolean packageLocalOn(){
      return diff.packageLocalOn();
    }
    @Override public int addedModifiers(){
      return diff.addedModifiers();
    }
    @Override public int removedModifiers(){
      return diff.removedModifiers();
    }
    @Override public Difference.Specifier<TypeRepr.AbstractType> interfaces(){
      return Difference.make(pastClass.myInterfaces,myInterfaces);
    }
    @Override public Difference.Specifier<FieldRepr> fields(){
      return Difference.make(pastClass.myFields,myFields);
    }
    @Override public Difference.Specifier<MethodRepr> methods(){
      return Difference.make(pastClass.myMethods,myMethods);
    }
    @Override public Specifier<ElemType> targets(){
      return Difference.make(pastClass.myAnnotationTargets,myAnnotationTargets);
    }
    @Override public boolean retentionChanged(){
      return !((myRetentionPolicy == null && pastClass.myRetentionPolicy == RetentionPolicy.CLASS) || (myRetentionPolicy == RetentionPolicy.CLASS && pastClass.myRetentionPolicy == null) || (myRetentionPolicy == pastClass.myRetentionPolicy));
    }
    @Override public int base(){
      return d;
    }
    @Override public boolean hadValue(){
      return false;
    }
    @Override public boolean weakedAccess(){
      return diff.weakedAccess();
    }
  }
;
}
