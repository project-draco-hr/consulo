{
  super.toStream(context,stream);
  stream.print("      Filename   : ");
  stream.println(context.getValue(fileName));
  stream.print("      Superclass : ");
  stream.println(superClass == null ? "<null>" : superClass.getDescr(context));
  stream.print("      Interfaces : ");
  final TypeRepr.AbstractType[] is=interfaces.toArray(new TypeRepr.AbstractType[interfaces.size()]);
  Arrays.sort(is,new Comparator<TypeRepr.AbstractType>(){
    @Override public int compare(    final TypeRepr.AbstractType o1,    final TypeRepr.AbstractType o2){
      return o1.getDescr(context).compareTo(o2.getDescr(context));
    }
  }
);
  for (  final TypeRepr.AbstractType t : is) {
    stream.print(t.getDescr(context));
    stream.print(" ");
  }
  stream.println();
  stream.print("      Targets    : ");
  final ElemType[] es=targets.toArray(new ElemType[targets.size()]);
  Arrays.sort(es);
  for (  final ElemType e : es) {
    stream.print(e);
    stream.print("; ");
  }
  stream.println();
  stream.print("      Policy     : ");
  stream.println(policy);
  stream.print("      Outer class: ");
  stream.println(context.getValue(outerClassName));
  stream.print("      Local class: ");
  stream.println(isLocal);
  stream.println("      Fields:");
  final FieldRepr[] fs=fields.toArray(new FieldRepr[fields.size()]);
  Arrays.sort(fs,new Comparator<FieldRepr>(){
    @Override public int compare(    final FieldRepr o1,    final FieldRepr o2){
      if (o1.name == o2.name) {
        return o1.type.getDescr(context).compareTo(o2.type.getDescr(context));
      }
      return context.getValue(o1.name).compareTo(context.getValue(o2.name));
    }
  }
);
  for (  final FieldRepr f : fs) {
    f.toStream(context,stream);
  }
  stream.println("      End Of Fields");
  stream.println("      Methods:");
  final MethodRepr[] ms=methods.toArray(new MethodRepr[methods.size()]);
  Arrays.sort(ms,new Comparator<MethodRepr>(){
    @Override public int compare(    final MethodRepr o1,    final MethodRepr o2){
      if (o1.name == o2.name) {
        final String d1=o1.type.getDescr(context);
        final String d2=o2.type.getDescr(context);
        final int c=d1.compareTo(d2);
        if (c == 0) {
          final int l1=o1.argumentTypes.length;
          final int l2=o2.argumentTypes.length;
          if (l1 == l2) {
            for (int i=0; i < l1; i++) {
              final String d11=o1.argumentTypes[i].getDescr(context);
              final String d22=o2.argumentTypes[i].getDescr(context);
              final int cc=d11.compareTo(d22);
              if (cc != 0) {
                return cc;
              }
            }
            return 0;
          }
          return l1 - l2;
        }
        return c;
      }
      return context.getValue(o1.name).compareTo(context.getValue(o2.name));
    }
  }
);
  for (  final MethodRepr m : ms) {
    m.toStream(context,stream);
  }
  stream.println("      End Of Methods");
}
