{
  if (type.equalsToText("groovy.util.AntBuilder")) {
    return processAntTasks(processor,place);
  }
  if (!(place instanceof GrReferenceExpression) || ((GrReferenceExpression)place).isQualified()) {
    return true;
  }
  PsiFile file=place.getContainingFile();
  if (!GantUtils.isGantScriptFile(file)) {
    return true;
  }
  final GrClosableBlock closure=PsiTreeUtil.getContextOfType(place,GrClosableBlock.class,true);
  if (closure == null) {
    return true;
  }
  for (  GrArgumentLabel label : GantUtils.getScriptTargets((GroovyFile)file)) {
    final String targetName=label.getName();
    if (targetName != null) {
      final PsiNamedElement variable=new LightVariableBuilder(targetName,GrClosableBlock.GROOVY_LANG_CLOSURE,label).setBaseIcon(GantIcons.GANT_TARGET);
      if (!ResolveUtil.processElement(processor,variable)) {
        return false;
      }
    }
  }
  return processAntTasks(processor,place);
}
