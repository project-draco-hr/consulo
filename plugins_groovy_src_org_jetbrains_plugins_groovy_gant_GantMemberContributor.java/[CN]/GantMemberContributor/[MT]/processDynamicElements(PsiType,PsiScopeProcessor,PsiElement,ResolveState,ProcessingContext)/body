{
  if (ResolveUtil.isInheritor(qualifierType,"groovy.util.AntBuilder",place,ctx)) {
    processAntTasks(processor,place);
    return;
  }
  if (!(place instanceof GrReferenceExpression) || ((GrReferenceExpression)place).isQualified()) {
    return;
  }
  GrClosableBlock closure=PsiTreeUtil.getContextOfType(place,GrClosableBlock.class,true);
  if (closure == null) {
    return;
  }
  boolean antTasksProcessed=false;
  while (closure != null) {
    final PsiElement parent=closure.getParent();
    if (parent instanceof GrMethodCall) {
      final PsiMethod method=((GrMethodCall)parent).resolveMethod();
      if (method instanceof AntBuilderMethod) {
        antTasksProcessed=true;
        if (!processAntTasks(processor,place)) {
          return;
        }
        if (!((AntBuilderMethod)method).processNestedElements(processor)) {
          return;
        }
        break;
      }
    }
    closure=PsiTreeUtil.getContextOfType(closure,GrClosableBlock.class,true);
  }
  PsiFile file=place.getContainingFile();
  if (!GantUtils.isGantScriptFile(file)) {
    return;
  }
  for (  GrArgumentLabel label : GantUtils.getScriptTargets((GroovyFile)file)) {
    final String targetName=label.getName();
    if (targetName != null) {
      final PsiNamedElement variable=new LightVariableBuilder(targetName,GrClosableBlock.GROOVY_LANG_CLOSURE,label).setBaseIcon(GantIcons.GANT_TARGET);
      if (!ResolveUtil.processElement(processor,variable)) {
        return;
      }
    }
  }
  if (!antTasksProcessed) {
    processAntTasks(processor,place);
  }
}
