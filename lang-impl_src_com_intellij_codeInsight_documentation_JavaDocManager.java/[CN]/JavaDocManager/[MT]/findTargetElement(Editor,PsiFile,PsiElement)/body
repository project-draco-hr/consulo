{
  PsiElement element=editor != null ? TargetElementUtilBase.findTargetElement(editor,ourFlagsForTargetElements) : null;
  if (element == null && contextElement != null) {
    final PsiElement parent=contextElement.getParent();
    if (parent instanceof XmlText) {
      element=TargetElementUtilBase.getInstance().findTargetElement(editor,ourFlagsForTargetElements,parent.getParent().getTextRange().getStartOffset() + 1);
    }
 else     if (parent instanceof XmlTag || parent instanceof XmlAttribute) {
      element=TargetElementUtilBase.getInstance().findTargetElement(editor,ourFlagsForTargetElements,parent.getTextRange().getStartOffset() + 1);
    }
 else     if (parent instanceof XmlAttributeValue) {
      final PsiElement grandParent=parent.getParent();
      element=TargetElementUtilBase.getInstance().findTargetElement(editor,ourFlagsForTargetElements,grandParent.getTextRange().getStartOffset() + 1);
    }
  }
  if (element == null && editor != null) {
    final PsiReference ref=TargetElementUtilBase.findReference(editor,editor.getCaretModel().getOffset());
    if (ref != null) {
      final PsiElement parent=ref.getElement().getParent();
      if (parent instanceof PsiMethodCallExpression) {
        element=parent;
      }
 else       if (ref instanceof PsiPolyVariantReference) {
        element=ref.getElement();
      }
    }
    final Lookup activeLookup=LookupManager.getInstance(myProject).getActiveLookup();
    if (activeLookup != null) {
      LookupItem item=activeLookup.getCurrentItem();
      if (item == null)       return null;
      final DocumentationProvider documentationProvider=getProviderFromElement(file);
      if (documentationProvider != null) {
        element=documentationProvider.getDocumentationElementForLookupItem(PsiManager.getInstance(myProject),item.getObject(),ref != null ? ref.getElement() : contextElement);
      }
    }
  }
  storeOriginalElement(myProject,contextElement,element);
  return element;
}
