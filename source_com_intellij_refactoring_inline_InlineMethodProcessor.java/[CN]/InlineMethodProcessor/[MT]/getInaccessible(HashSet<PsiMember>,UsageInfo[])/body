{
  HashMap<PsiMember,HashSet<PsiMember>> result=new com.intellij.util.containers.HashMap<PsiMember,HashSet<PsiMember>>();
  for (int i=0; i < usages.length; i++) {
    UsageInfo usage=usages[i];
    final PsiMember container=ConflictsUtil.getContainer(usage.getElement());
    HashSet<PsiMember> inaccessibleReferenced=result.get(container);
    if (inaccessibleReferenced == null) {
      inaccessibleReferenced=new HashSet<PsiMember>();
      result.put(container,inaccessibleReferenced);
      for (Iterator<PsiMember> iterator=referencedElements.iterator(); iterator.hasNext(); ) {
        PsiMember member=iterator.next();
        if (!PsiUtil.isAccessible(member,usage.getElement(),null)) {
          inaccessibleReferenced.add(member);
        }
      }
    }
  }
  return result;
}
