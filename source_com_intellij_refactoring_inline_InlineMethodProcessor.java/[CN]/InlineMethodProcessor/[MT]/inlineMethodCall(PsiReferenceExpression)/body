{
  ChangeContextUtil.encodeContextInfo(myMethod,false);
  myMethodCopy=(PsiMethod)myMethod.copy();
  ChangeContextUtil.clearContextInfo(myMethod);
  PsiMethodCallExpression methodCall=(PsiMethodCallExpression)ref.getParent();
  PsiSubstitutor callSubstitutor=getCallSubstitutor(methodCall);
  BlockData blockData=prepareBlock(ref,callSubstitutor);
  solveVariableNameConflicts(blockData.block,ref);
  if (callSubstitutor != PsiSubstitutor.EMPTY) {
    substituteMethodTypeParams(blockData.block,callSubstitutor);
  }
  addParmAndThisVarInitializers(blockData,methodCall);
  PsiElement anchor=RefactoringUtil.getParentStatement(methodCall,true);
  if (anchor == null)   return;
  PsiElement anchorParent=anchor.getParent();
  PsiLocalVariable thisVar=null;
  PsiLocalVariable[] parmVars=new PsiLocalVariable[blockData.parmVars.length];
  PsiLocalVariable resultVar=null;
  PsiStatement[] statements=blockData.block.getStatements();
  if (statements.length > 0) {
    int first=0;
    int last=statements.length - 1;
    if (statements.length > 0 && statements[statements.length - 1] instanceof PsiReturnStatement) {
      last--;
    }
    if (first <= last) {
      PsiElement firstAdded=anchorParent.addRangeBefore(statements[first],statements[last],anchor);
      PsiElement current=firstAdded.getPrevSibling();
      if (blockData.thisVar != null) {
        PsiDeclarationStatement statement=PsiTreeUtil.getNextSiblingOfType(current,PsiDeclarationStatement.class);
        thisVar=(PsiLocalVariable)statement.getDeclaredElements()[0];
        current=statement;
      }
      for (int i=0; i < parmVars.length; i++) {
        PsiDeclarationStatement statement=PsiTreeUtil.getNextSiblingOfType(current,PsiDeclarationStatement.class);
        parmVars[i]=(PsiLocalVariable)statement.getDeclaredElements()[0];
        current=statement;
      }
      if (blockData.resultVar != null) {
        PsiDeclarationStatement statement=PsiTreeUtil.getNextSiblingOfType(current,PsiDeclarationStatement.class);
        resultVar=(PsiLocalVariable)statement.getDeclaredElements()[0];
      }
    }
    if (statements.length > 0) {
      final PsiStatement lastStatement=statements[statements.length - 1];
      if (lastStatement instanceof PsiReturnStatement) {
        final PsiExpression returnValue=((PsiReturnStatement)lastStatement).getReturnValue();
        while (returnValue instanceof PsiReferenceExpression)         ((PsiReferenceExpression)returnValue).getQualifierExpression();
        if (returnValue != null && PsiUtil.isStatement(returnValue)) {
          PsiExpressionStatement exprStatement=(PsiExpressionStatement)myFactory.createStatementFromText("a;",null);
          exprStatement.getExpression().replace(returnValue);
          anchorParent.addBefore(exprStatement,anchor);
        }
      }
    }
  }
  if (methodCall.getParent() instanceof PsiExpressionStatement) {
    methodCall.getParent().delete();
  }
 else {
    if (blockData.resultVar != null) {
      PsiExpression expr=myFactory.createExpressionFromText(blockData.resultVar.getName(),null);
      methodCall.replace(expr);
    }
 else {
    }
  }
  PsiClass thisClass=myMethod.getContainingClass();
  PsiExpression thisAccessExpr=thisVar != null ? myFactory.createExpressionFromText(thisVar.getName(),null) : null;
  ChangeContextUtil.decodeContextInfo(anchorParent,thisClass,thisAccessExpr);
  if (thisVar != null) {
    inlineParmOrThisVariable(thisVar,false);
  }
  final PsiParameter[] parameters=myMethod.getParameterList().getParameters();
  for (int i=0; i < parmVars.length; i++) {
    final boolean strictlyFinal;
    final PsiParameter parameter=parameters[i];
    if (parameter.hasModifierProperty(PsiModifier.FINAL)) {
      strictlyFinal=isStrictlyFinal(parameter);
    }
 else {
      strictlyFinal=false;
    }
    inlineParmOrThisVariable(parmVars[i],strictlyFinal);
  }
  if (resultVar != null) {
    inlineResultVariable(resultVar);
  }
  ChangeContextUtil.clearContextInfo(anchorParent);
}
