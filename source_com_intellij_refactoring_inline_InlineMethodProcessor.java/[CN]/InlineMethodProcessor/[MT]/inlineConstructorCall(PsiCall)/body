{
  final PsiMethod oldConstructor=constructorCall.resolveMethod();
  if (oldConstructor == null)   return;
  final PsiManager manager=oldConstructor.getManager();
  final PsiExpression[] instanceCreationArguments=constructorCall.getArgumentList().getExpressions();
  final PsiParameter[] parameters=oldConstructor.getParameterList().getParameters();
  if (parameters.length != instanceCreationArguments.length)   return;
  PsiCodeBlock body=oldConstructor.getBody();
  if (body == null)   return;
  PsiStatement[] statements=body.getStatements();
  if (statements.length != 1 || !(statements[0] instanceof PsiExpressionStatement))   return;
  PsiExpression expression=((PsiExpressionStatement)statements[0]).getExpression();
  if (!(expression instanceof PsiMethodCallExpression))   return;
  PsiReferenceExpression methodExpression=((PsiMethodCallExpression)expression).getMethodExpression();
  if (methodExpression != null && "this".equals(methodExpression.getReferenceName())) {
    PsiMethodCallExpression methodCall=(PsiMethodCallExpression)expression.copy();
    final PsiExpression[] args=methodCall.getArgumentList().getExpressions();
    for (int i=0; i < args.length; i++) {
      PsiExpression arg=args[i];
      arg.accept(new PsiRecursiveElementVisitor(){
        public void visitReferenceExpression(        PsiReferenceExpression expression){
          PsiElement resolved=expression.resolve();
          if (resolved instanceof PsiParameter && manager.areElementsEquivalent(((PsiParameter)resolved).getDeclarationScope(),oldConstructor)) {
            PsiElement declarationScope=((PsiParameter)resolved).getDeclarationScope();
            PsiParameter[] declarationParameters=((PsiMethod)declarationScope).getParameterList().getParameters();
            for (int j=0; j < declarationParameters.length; j++) {
              if (declarationParameters[j] == resolved) {
                try {
                  expression.replace(instanceCreationArguments[j]);
                  break;
                }
 catch (                IncorrectOperationException e) {
                  LOG.error(e);
                }
              }
            }
          }
        }
      }
);
    }
    try {
      constructorCall.getArgumentList().replace(methodCall.getArgumentList());
    }
 catch (    IncorrectOperationException e) {
      LOG.error(e);
    }
  }
}
