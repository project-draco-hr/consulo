{
  ArrayList<String> conflicts=new ArrayList<String>();
  if (!myInlineThisOnly) {
    final PsiMethod[] superMethods=myMethod.findSuperMethods();
    for (    PsiMethod method : superMethods) {
      final String action=method.hasModifierProperty(PsiModifier.ABSTRACT) ? "implements" : "overrides";
      final String message="Inlined method " + action + " method from "+ method.getContainingClass().getQualifiedName();
      conflicts.add(message);
    }
  }
  final ReferencedElementsCollector collector=new ReferencedElementsCollector();
  myMethod.accept(collector);
  final Map<PsiMember,Set<PsiMember>> containersToReferenced;
  String fromForReference=null;
  if (usages[0] != null) {
    containersToReferenced=getInaccessible(collector.myReferencedMembers,usages[0]);
  }
 else {
    containersToReferenced=getInaccessible(collector.myReferencedMembers,new UsageInfo[]{new UsageInfo(myReference)});
    fromForReference=ConflictsUtil.getDescription(ConflictsUtil.getContainer(myReference),true);
  }
  final Set<PsiMember> containers=containersToReferenced.keySet();
  for (  PsiMember container : containers) {
    Set<PsiMember> referencedInaccessible=containersToReferenced.get(container);
    for (    PsiMember referenced : referencedInaccessible) {
      String message=ConflictsUtil.getDescription(referenced,true) + " that is used in inlined method, " + " is not accessible from "+ (fromForReference == null ? "call site(s) in " + ConflictsUtil.getDescription(container,true) : fromForReference);
      conflicts.add(ConflictsUtil.capitalize(message));
    }
  }
  if (conflicts.size() > 0) {
    ConflictsDialog dialog=new ConflictsDialog(conflicts.toArray(new String[conflicts.size()]),myProject);
    dialog.show();
    if (!dialog.isOK()) {
      return false;
    }
  }
  prepareSuccessful();
  return true;
}
