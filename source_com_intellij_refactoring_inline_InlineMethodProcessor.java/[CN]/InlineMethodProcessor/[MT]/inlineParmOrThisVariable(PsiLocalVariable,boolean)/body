{
  PsiReference[] refs=myManager.getSearchHelper().findReferences(variable,GlobalSearchScope.projectScope(myProject),false);
  if (refs.length == 0) {
    variable.getParent().delete();
    return;
  }
  boolean isAccessedForWriting=false;
  for (  PsiReference ref : refs) {
    PsiElement refElement=ref.getElement();
    if (refElement instanceof PsiExpression) {
      if (PsiUtil.isAccessedForWriting((PsiExpression)refElement)) {
        isAccessedForWriting=true;
      }
    }
  }
  PsiExpression initializer=variable.getInitializer();
  boolean shouldBeFinal=variable.hasModifierProperty(PsiModifier.FINAL) && strictlyFinal;
  if (canInlineParmOrThisVariable(initializer,shouldBeFinal,strictlyFinal,refs.length,isAccessedForWriting)) {
    if (shouldBeFinal) {
      declareUsedLocalsFinal(initializer,strictlyFinal);
    }
    for (    PsiReference ref : refs) {
      PsiExpression expr=RefactoringUtil.inlineVariable(variable,initializer,(PsiJavaCodeReferenceElement)ref);
      if (expr instanceof PsiThisExpression) {
        if (expr.getParent() instanceof PsiReferenceExpression) {
          PsiReferenceExpression refExpr=(PsiReferenceExpression)expr.getParent();
          PsiElement refElement=refExpr.resolve();
          PsiExpression exprCopy=(PsiExpression)refExpr.copy();
          refExpr=(PsiReferenceExpression)refExpr.replace(myFactory.createExpressionFromText(refExpr.getReferenceName(),null));
          if (refElement != null) {
            PsiElement newRefElement=refExpr.resolve();
            if (!refElement.equals(newRefElement)) {
              refExpr.replace(exprCopy);
            }
          }
        }
      }
    }
    variable.getParent().delete();
  }
}
