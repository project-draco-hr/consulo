{
  extend(CompletionType.SMART,SmartCastProvider.INSIDE_TYPECAST_TYPE,new SmartCastProvider());
  extend(CompletionType.SMART,psiElement().beforeLeaf(psiElement(JavaTokenType.RPARENTH)).afterLeaf("(").withParent(psiElement(PsiReferenceExpression.class).withParent(psiElement(PsiExpressionList.class).withParent(PsiMethodCallExpression.class))),new SameSignatureCallParametersProvider());
  extend(CompletionType.SMART,psiElement().afterLeaf(PsiKeyword.INSTANCEOF),new CompletionProvider<CompletionParameters>(false){
    protected void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext context,    @NotNull final CompletionResultSet result){
      final PsiElement position=parameters.getPosition();
      final PsiType[] leftTypes=ApplicationManager.getApplication().runReadAction(new Computable<PsiType[]>(){
        public PsiType[] compute(){
          return InstanceOfLeftPartTypeGetter.getLeftTypes(position);
        }
      }
);
      final Set<PsiClassType> expectedClassTypes=new LinkedHashSet<PsiClassType>();
      final Set<PsiClass> parameterizedTypes=new THashSet<PsiClass>();
      for (      final PsiType type : leftTypes) {
        if (type instanceof PsiClassType) {
          final PsiClassType classType=(PsiClassType)type;
          if (!classType.isRaw()) {
            ContainerUtil.addIfNotNull(classType.resolve(),parameterizedTypes);
          }
          expectedClassTypes.add(classType.rawType());
        }
      }
      processInheritors(parameters,position,position.getContainingFile(),expectedClassTypes,new Consumer<PsiType>(){
        public void consume(        PsiType type){
          final PsiClass psiClass=PsiUtil.resolveClassInType(type);
          if (psiClass == null)           return;
          if (expectedClassTypes.contains(type))           return;
          result.addElement(createInstanceofLookupElement(psiClass,parameterizedTypes));
        }
      }
,result.getPrefixMatcher());
    }
  }
);
  extend(CompletionType.SMART,psiElement(),new CompletionProvider<CompletionParameters>(){
    protected void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext context,    @NotNull final CompletionResultSet result){
      final PsiElement element=parameters.getPosition();
      final PsiReference reference=element.getContainingFile().findReferenceAt(parameters.getOffset());
      if (reference != null) {
        final ElementFilter filter=getReferenceFilter(element);
        if (filter != null) {
          final List<ExpectedTypeInfo> infos=Arrays.asList(getExpectedTypes(parameters));
          for (          final LookupElement item : completeReference(element,reference,filter,true,parameters)) {
            if (AFTER_THROW_NEW.accepts(element)) {
              ((LookupItem)item).setAttribute(LookupItem.DONT_CHECK_FOR_INNERS,"");
              if (item.getObject() instanceof PsiClass) {
                JavaCompletionUtil.setShowFQN((LookupItem)item);
              }
            }
 else {
              ((LookupItem)item).setAttribute(LookupItem.NEW_OBJECT_ATTR,"");
            }
            result.addElement(decorate(item,infos));
          }
        }
 else         if (INSIDE_TYPECAST_EXPRESSION.accepts(element)) {
          final ReturnTypeFilter rfilter=new ReturnTypeFilter(new GeneratorFilter(AssignableToFilter.class,new CastTypeGetter()));
          for (          final LookupElement item : completeReference(element,reference,rfilter,false,parameters)) {
            result.addElement(item);
          }
        }
      }
    }
  }
);
  extend(CompletionType.SMART,INSIDE_EXPRESSION,new ExpectedTypeBasedCompletionProvider(){
    protected void addCompletions(    final CompletionParameters params,    final CompletionResultSet result,    final Collection<ExpectedTypeInfo> _infos){
      final PsiElement position=params.getPosition();
      final Set<ExpectedTypeInfo> infos=ApplicationManager.getApplication().runReadAction(new Computable<Set<ExpectedTypeInfo>>(){
        public Set<ExpectedTypeInfo> compute(){
          return new THashSet<ExpectedTypeInfo>(_infos,EXPECTED_TYPE_INFO_STRATEGY);
        }
      }
);
      for (      final ExpectedTypeInfo info : infos) {
        final JavaSmartCompletionParameters parameters=new JavaSmartCompletionParameters(params,info);
        final PsiType type=info.getType();
        final boolean isVoid=PsiType.VOID.equals(type);
        final AssignableFromFilter assignableFromFilter=new AssignableFromFilter(type);
        final ElementFilter filter=new ReturnTypeFilter(new ElementFilter(){
          public boolean isAcceptable(          Object element,          PsiElement context){
            if (isVoid) {
              return element instanceof PsiMethod;
            }
            return assignableFromFilter.isAcceptable(element,context);
          }
          public boolean isClassAcceptable(          Class hintClass){
            if (isVoid && !ReflectionCache.isAssignable(PsiMethod.class,hintClass)) {
              return false;
            }
            return true;
          }
        }
);
        final Consumer<LookupElement> consumer=new Consumer<LookupElement>(){
          public void consume(          final LookupElement lookupElement){
            final TypedLookupItem typed=lookupElement.as(TypedLookupItem.class);
            if (typed != null) {
              final PsiType psiType=typed.getType();
              if (psiType != null && type.isAssignableFrom(psiType)) {
                result.addElement(decorate(lookupElement,_infos));
              }
              return;
            }
            final Object object=lookupElement.getObject();
            if (!filter.isClassAcceptable(object.getClass()))             return;
            final PsiSubstitutor substitutor;
            final LookupItem item=lookupElement.as(LookupItem.class);
            if (item != null) {
              substitutor=(PsiSubstitutor)item.getAttribute(LookupItem.SUBSTITUTOR);
            }
 else {
              substitutor=null;
            }
            if (filter.isAcceptable(object,position) || substitutor != null && object instanceof PsiElement && filter.isAcceptable(new CandidateInfo((PsiElement)object,substitutor),position)) {
              result.addElement(decorate(lookupElement,_infos));
            }
          }
        }
;
        for (        ExpressionSmartCompletionContributor contributor : ExpressionSmartCompletionContributor.CONTRIBUTORS) {
          contributor.fillCompletionVariants(parameters,CompletionService.getCompletionService().createResultSet(parameters,consumer,JavaSmartCompletionContributor.this));
        }
      }
    }
  }
);
  extend(CompletionType.SMART,or(PsiJavaPatterns.psiElement().withParent(PsiNameValuePair.class),PsiJavaPatterns.psiElement().withSuperParent(2,PsiNameValuePair.class)),new CompletionProvider<CompletionParameters>(){
    public void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext context,    @NotNull final CompletionResultSet result){
      final PsiElement element=parameters.getPosition();
      final ElementPattern<? extends PsiElement> leftNeighbor=PsiJavaPatterns.psiElement().afterLeaf(PsiJavaPatterns.psiElement().withText("."));
      final boolean needQualify=leftNeighbor.accepts(element);
      for (      final PsiType type : ExpectedTypesGetter.getExpectedTypes(element,false)) {
        final PsiClass psiClass=PsiUtil.resolveClassInType(type);
        if (psiClass != null && psiClass.isAnnotationType()) {
          final LookupItem item=new JavaPsiClassReferenceElement(psiClass).setTailType(TailType.NONE);
          if (needQualify)           JavaCompletionUtil.qualify(item);
          result.addElement(item);
        }
      }
    }
  }
);
  extend(CompletionType.SMART,psiElement().inside(psiElement(PsiDocTag.class).withName(string().oneOf(PsiKeyword.THROWS,EXCEPTION_TAG))),new CompletionProvider<CompletionParameters>(){
    public void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext context,    @NotNull final CompletionResultSet result){
      final PsiElement element=parameters.getPosition();
      final Set<PsiClass> throwsSet=new HashSet<PsiClass>();
      final PsiMethod method=PsiTreeUtil.getContextOfType(element,PsiMethod.class,true);
      if (method != null) {
        for (        PsiClassType ref : method.getThrowsList().getReferencedTypes()) {
          final PsiClass exception=ref.resolve();
          if (exception != null && throwsSet.add(exception)) {
            result.addElement(TailTypeDecorator.withTail(new JavaPsiClassReferenceElement(exception).setInsertHandler(new DefaultInsertHandler()),TailType.SPACE));
          }
        }
      }
    }
  }
);
  final Key<PsiTryStatement> tryKey=Key.create("try");
  extend(CompletionType.SMART,psiElement().afterLeaf(psiElement().withText("(")).withSuperParent(3,psiElement(PsiCatchSection.class).withParent(psiElement(PsiTryStatement.class).save(tryKey))),new CompletionProvider<CompletionParameters>(){
    protected void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext context,    @NotNull final CompletionResultSet result){
      final PsiCodeBlock tryBlock=context.get(tryKey).getTryBlock();
      if (tryBlock == null)       return;
      for (      final PsiClassType type : ExceptionUtil.getThrownExceptions(tryBlock.getStatements())) {
        result.addElement(TailTypeDecorator.withTail(PsiTypeLookupItem.createLookupItem(type).setInsertHandler(new DefaultInsertHandler()),TailType.SPACE));
      }
    }
  }
);
  extend(CompletionType.SMART,psiElement().inside(psiElement(PsiReferenceParameterList.class)),new CompletionProvider<CompletionParameters>(){
    protected void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext processingContext,    @NotNull final CompletionResultSet resultSet){
      final PsiElement context=parameters.getPosition();
      final Pair<PsiClass,Integer> pair=getTypeParameterInfo(context);
      if (pair == null)       return;
      final PsiClass referencedClass=pair.first;
      final int parameterIndex=pair.second.intValue();
      final PsiTypeParameter[] typeParameters=referencedClass.getTypeParameters();
      final PsiTypeParameter targetParameter=typeParameters[parameterIndex];
      boolean isLast=parameterIndex == typeParameters.length - 1;
      final TailType tail=isLast ? new CharTailType('>') : TailType.COMMA;
      boolean hasExpected=ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
        public Boolean compute(){
          PsiResolveHelper resolveHelper=JavaPsiFacade.getInstance(context.getProject()).getResolveHelper();
          final PsiType[] psiTypes=ExpectedTypesGetter.getExpectedTypes(context,false);
          if (psiTypes.length == 0)           return false;
          for (          PsiType type : psiTypes) {
            if (!(type instanceof PsiClassType))             continue;
            final PsiClassType.ClassResolveResult result=((PsiClassType)type).resolveGenerics();
            final PsiClass typeClass=result.getElement();
            final PsiSubstitutor substitutor=result.getSubstitutor();
            if (!InheritanceUtil.isInheritorOrSelf(referencedClass,typeClass,true))             continue;
            final PsiSubstitutor currentSubstitutor=TypeConversionUtil.getClassSubstitutor(typeClass,referencedClass,PsiSubstitutor.EMPTY);
            for (            PsiTypeParameter parameter : PsiUtil.typeParametersIterable(typeClass)) {
              final PsiType argSubstitution=substitutor.substitute(parameter);
              final PsiType paramSubstitution=currentSubstitutor.substitute(parameter);
              final PsiType substitution=resolveHelper.getSubstitutionForTypeParameter(targetParameter,paramSubstitution,argSubstitution,false,PsiUtil.getLanguageLevel(context));
              if (substitution != null && substitution != PsiType.NULL) {
                final LookupItem item=PsiTypeLookupItem.createLookupItem(substitution);
                resultSet.addElement(TailTypeDecorator.withTail(item.setInsertHandler(new DefaultInsertHandler()),tail));
              }
            }
          }
          return true;
        }
      }
).booleanValue();
      if (!hasExpected) {
        final List<PsiClassType> typeList=Collections.singletonList((PsiClassType)TypeConversionUtil.typeParameterErasure(targetParameter));
        processInheritors(parameters,context,parameters.getOriginalFile(),typeList,new Consumer<PsiType>(){
          public void consume(          final PsiType type){
            final PsiClass psiClass=PsiUtil.resolveClassInType(type);
            if (psiClass == null)             return;
            resultSet.addElement(TailTypeDecorator.withTail(new JavaPsiClassReferenceElement(psiClass).setInsertHandler(new DefaultInsertHandler()),tail));
          }
        }
,resultSet.getPrefixMatcher());
      }
    }
  }
);
  extend(CompletionType.SMART,AFTER_NEW,new CompletionProvider<CompletionParameters>(false){
    public void addCompletions(    @NotNull final CompletionParameters parameters,    final ProcessingContext matchingContext,    @NotNull final CompletionResultSet result){
      final PsiElement identifierCopy=parameters.getPosition();
      final PsiFile file=parameters.getOriginalFile();
      final List<PsiClassType> expectedClassTypes=new SmartList<PsiClassType>();
      final List<PsiArrayType> expectedArrayTypes=new SmartList<PsiArrayType>();
      final List<ExpectedTypeInfo> infos=new SmartList<ExpectedTypeInfo>();
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        public void run(){
          infos.addAll(Arrays.asList(getExpectedTypes(parameters)));
          for (          PsiType type : ExpectedTypesGetter.getExpectedTypes(identifierCopy,true)) {
            if (type instanceof PsiClassType) {
              final PsiClassType classType=(PsiClassType)type;
              if (classType.resolve() != null) {
                expectedClassTypes.add(classType);
              }
            }
 else             if (type instanceof PsiArrayType) {
              expectedArrayTypes.add((PsiArrayType)type);
            }
          }
        }
      }
);
      for (      final PsiArrayType type : expectedArrayTypes) {
        ApplicationManager.getApplication().runReadAction(new Runnable(){
          public void run(){
            final LookupItem item=PsiTypeLookupItem.createLookupItem(JavaCompletionUtil.eliminateWildcards(type));
            item.setAttribute(LookupItem.DONT_CHECK_FOR_INNERS,"");
            if (item.getObject() instanceof PsiClass) {
              JavaCompletionUtil.setShowFQN(item);
            }
            item.setInsertHandler(new DefaultInsertHandler());
            result.addElement(decorate(item,infos));
          }
        }
);
      }
      processInheritors(parameters,identifierCopy,file,expectedClassTypes,new Consumer<PsiType>(){
        public void consume(        final PsiType type){
          addExpectedType(result,type,parameters,infos);
        }
      }
,result.getPrefixMatcher());
    }
  }
);
}
