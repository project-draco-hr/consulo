{
  final PsiElement position=parameters.getPosition();
  if (psiElement().withParent(psiElement(PsiReferenceExpression.class).withParent(PsiThrowStatement.class)).accepts(position)) {
    final PsiElementFactory factory=JavaPsiFacade.getInstance(position.getProject()).getElementFactory();
    final PsiClassType classType=factory.createTypeByFQClassName(CommonClassNames.JAVA_LANG_RUNTIME_EXCEPTION,position.getResolveScope());
    final List<ExpectedTypeInfo> result=new SmartList<ExpectedTypeInfo>();
    result.add(new ExpectedTypeInfoImpl(classType,ExpectedTypeInfo.TYPE_OR_SUBTYPE,0,classType,TailType.SEMICOLON));
    final PsiMethod method=PsiTreeUtil.getContextOfType(position,PsiMethod.class,true);
    if (method != null) {
      for (      final PsiClassType type : method.getThrowsList().getReferencedTypes()) {
        result.add(new ExpectedTypeInfoImpl(type,ExpectedTypeInfo.TYPE_OR_SUBTYPE,0,type,TailType.SEMICOLON));
      }
    }
    return result.toArray(new ExpectedTypeInfo[result.size()]);
  }
  PsiExpression expression=PsiTreeUtil.getContextOfType(position,PsiExpression.class,true);
  if (expression == null)   return ExpectedTypeInfo.EMPTY_ARRAY;
  return ExpectedTypesProvider.getExpectedTypes(expression,true,parameters.getCompletionType() == CompletionType.SMART,false);
}
