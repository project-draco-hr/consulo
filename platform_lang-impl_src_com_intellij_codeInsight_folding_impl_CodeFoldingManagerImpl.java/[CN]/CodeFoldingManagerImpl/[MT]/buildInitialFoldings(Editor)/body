{
  ApplicationManagerEx.getApplicationEx().assertIsDispatchThread(editor.getComponent());
  final Project project=editor.getProject();
  if (project == null || !project.equals(myProject))   return;
  final Document document=editor.getDocument();
  final PsiFile file=PsiDocumentManager.getInstance(myProject).getPsiFile(document);
  if (file == null || !file.getViewProvider().isPhysical() && !ApplicationManager.getApplication().isUnitTestMode())   return;
  final FoldingModelEx foldingModel=(FoldingModelEx)editor.getFoldingModel();
  if (!foldingModel.isFoldingEnabled())   return;
  if (project.isDisposed() || editor.isDisposed() || !file.isValid())   return;
  PsiDocumentManager.getInstance(myProject).commitDocument(document);
  Runnable operation=new Runnable(){
    @Override public void run(){
      Runnable runnable=updateFoldRegions(editor,true,true);
      if (runnable != null) {
        runnable.run();
      }
      UIUtil.invokeLaterIfNeeded(new Runnable(){
        @Override public void run(){
          if (myProject.isDisposed() || editor.isDisposed())           return;
          foldingModel.runBatchFoldingOperation(new Runnable(){
            @Override public void run(){
              DocumentFoldingInfo documentFoldingInfo=getDocumentFoldingInfo(document);
              Editor[] editors=EditorFactory.getInstance().getEditors(document,myProject);
              for (              Editor otherEditor : editors) {
                if (otherEditor == editor)                 continue;
                documentFoldingInfo.loadFromEditor(otherEditor);
                break;
              }
              documentFoldingInfo.setToEditor(editor);
              documentFoldingInfo.clear();
            }
          }
);
        }
      }
);
    }
  }
;
  editor.getFoldingModel().runBatchFoldingOperationDoNotCollapseCaret(operation);
}
