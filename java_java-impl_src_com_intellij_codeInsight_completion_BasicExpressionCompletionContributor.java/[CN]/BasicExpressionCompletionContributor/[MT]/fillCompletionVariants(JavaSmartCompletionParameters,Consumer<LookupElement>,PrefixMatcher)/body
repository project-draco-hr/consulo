{
  final PsiElement element=parameters.getPosition();
  if (JavaCompletionData.isAfterTypeDot(element)) {
    addKeyword(result,element,PsiKeyword.CLASS);
    addKeyword(result,element,PsiKeyword.THIS);
  }
  if (!AFTER_DOT.accepts(element)) {
    CollectionsUtilityMethodsProvider.addCompletions(parameters,result);
    ClassLiteralGetter.addCompletions(parameters,result,matcher);
    final PsiElement position=parameters.getPosition();
    final PsiType expectedType=parameters.getExpectedType();
    for (    final TemplateImpl template : TemplateSettings.getInstance().getTemplates()) {
      if (!template.isDeactivated() && template.getTemplateContext().isEnabled(new SmartCompletionContextType())) {
        result.consume(new SmartCompletionTemplateItem(template,position));
      }
    }
    addKeyword(result,position,PsiKeyword.TRUE);
    addKeyword(result,position,PsiKeyword.FALSE);
    final PsiElement parent=position.getParent();
    if (parent != null && !(parent.getParent() instanceof PsiSwitchLabelStatement)) {
      new JavaMembersGetter(expectedType).addMembers(parameters.getPosition(),result);
      if (!parameters.getDefaultType().equals(expectedType)) {
        new JavaMembersGetter(parameters.getDefaultType()).addMembers(parameters.getPosition(),result);
      }
      for (      final PsiExpression expression : ThisGetter.getThisExpressionVariants(position)) {
        result.consume(new ExpressionLookupItem(expression));
      }
    }
    processDataflowExpressionTypes(position,expectedType,matcher,result);
  }
}
