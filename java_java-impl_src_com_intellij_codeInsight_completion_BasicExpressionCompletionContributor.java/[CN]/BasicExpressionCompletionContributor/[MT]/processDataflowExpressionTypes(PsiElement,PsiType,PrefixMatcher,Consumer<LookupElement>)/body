{
  final PsiExpression context=PsiTreeUtil.getParentOfType(position,PsiExpression.class);
  if (context == null)   return;
  final Map<PsiExpression,PsiType> map=GuessManager.getInstance(position.getProject()).getControlFlowExpressionTypes(context);
  if (map.isEmpty()) {
    return;
  }
  PsiScopesUtil.treeWalkUp(new BaseScopeProcessor(){
    public boolean execute(    @NotNull PsiElement element,    ResolveState state){
      if (element instanceof PsiLocalVariable) {
        if (!matcher.prefixMatches(((PsiLocalVariable)element).getName())) {
          return true;
        }
        final PsiExpression expression=((PsiLocalVariable)element).getInitializer();
        if (expression instanceof PsiTypeCastExpression) {
          PsiTypeCastExpression typeCastExpression=(PsiTypeCastExpression)expression;
          final PsiExpression operand=typeCastExpression.getOperand();
          if (operand != null) {
            final PsiType dfaCasted=map.get(operand);
            if (dfaCasted != null && dfaCasted.equals(typeCastExpression.getType())) {
              map.remove(operand);
            }
          }
        }
      }
      return true;
    }
  }
,context,context.getContainingFile());
  for (  final PsiExpression expression : map.keySet()) {
    final PsiType castType=map.get(expression);
    final PsiType baseType=expression.getType();
    if (expectedType == null || (expectedType.isAssignableFrom(castType) && (baseType == null || !expectedType.isAssignableFrom(baseType)))) {
      consumer.consume(CastingLookupElementDecorator.createCastingElement(expressionToLookupElement(expression),castType));
    }
  }
}
