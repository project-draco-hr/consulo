{
  extend(PsiJavaPatterns.psiElement().afterLeaf(PsiJavaPatterns.psiElement().withText(".").afterLeaf(PsiJavaPatterns.psiElement().withParent(PsiJavaPatterns.psiElement().referencing(psiClass())))),new CompletionProvider<JavaSmartCompletionParameters>(){
    public void addCompletions(    @NotNull final JavaSmartCompletionParameters parameters,    final ProcessingContext context,    @NotNull final CompletionResultSet result){
      final PsiElement element=parameters.getPosition();
      addKeyword(result,element,PsiKeyword.CLASS);
      addKeyword(result,element,PsiKeyword.THIS);
    }
  }
);
  extend(not(psiElement().afterLeaf(".")),new CollectionsUtilityMethodsProvider());
  extend(not(psiElement().afterLeaf(".")),new ClassLiteralGetter());
  extend(not(psiElement().afterLeaf(".")),new CompletionProvider<JavaSmartCompletionParameters>(){
    protected void addCompletions(    @NotNull final JavaSmartCompletionParameters parameters,    final ProcessingContext context,    @NotNull final CompletionResultSet result){
      final PsiElement position=parameters.getPosition();
      final PsiType expectedType=parameters.getExpectedType();
      for (      final TemplateImpl template : TemplateSettings.getInstance().getTemplates()) {
        if (!template.isDeactivated() && template.getTemplateContext().isEnabled(new SmartCompletionContextType())) {
          result.addElement(new SmartCompletionTemplateItem(template,position));
        }
      }
      addKeyword(result,position,PsiKeyword.TRUE);
      addKeyword(result,position,PsiKeyword.FALSE);
      final PsiElement parent=position.getParent();
      if (parent != null && !(parent.getParent() instanceof PsiSwitchLabelStatement)) {
        MembersGetter.addMembers(parameters.getPosition(),expectedType,result);
        if (!parameters.getDefaultType().equals(expectedType)) {
          MembersGetter.addMembers(parameters.getPosition(),parameters.getDefaultType(),result);
        }
        for (        final PsiExpression expression : ThisGetter.getThisExpressionVariants(position)) {
          result.addElement(new ExpressionLookupItem(expression));
        }
      }
      processDataflowExpressionTypes(position,expectedType,result.getPrefixMatcher(),new Consumer<LookupElement>(){
        public void consume(        LookupElement decorator){
          result.addElement(decorator);
        }
      }
);
    }
  }
);
}
