{
  if (actionGroup == null) {
    actionGroup=new DefaultActionGroup();
    syncAction=new AnAction("Synchronize with Plugin Repository","Synchronize with Plugin Repository",IconLoader.getIcon("/actions/sync.png")){
      public void update(      AnActionEvent e){
        Presentation presentation=e.getPresentation();
        boolean enabled=false;
        if (tabs.getSelectedIndex() == AVAILABLE_TAB) {
          enabled=true;
        }
        presentation.setEnabled(enabled);
      }
      public void actionPerformed(      AnActionEvent e){
        root=null;
        pluginInfoUpdate(null);
        loadAvailablePlugins();
      }
    }
;
    syncAction.registerCustomShortcutSet(new CustomShortcutSet(KeymapManager.getInstance().getActiveKeymap().getShortcuts("Synchronize")),main);
    actionGroup.add(syncAction);
    updatePluginsAction=new AnAction("Update Installed Plugins","Update Installed Plugins",IconLoader.getIcon("/actions/refresh.png")){
      public void actionPerformed(      AnActionEvent e){
        if (availablePluginTable == null) {
          loadAvailablePlugins();
        }
        if (root != null)         do {
          try {
            List<PluginNode> updateList=new ArrayList<PluginNode>();
            checkForUpdate(updateList,root);
            if (updateList.size() == 0) {
              Messages.showMessageDialog(main,"Nothing to update","Plugin Manager",Messages.getInformationIcon());
              break;
            }
 else {
              String list="";
              for (int i=0; i < updateList.size(); i++) {
                PluginNode pluginNode=updateList.get(i);
                list+=pluginNode.getName() + "\n";
              }
              if (Messages.showYesNoDialog(main,"Plugin(s) can be updated: \n" + list + "Would you like to update them?","Update Installed Plugins",Messages.getQuestionIcon()) == 0) {
                if (downloadPlugins(updateList)) {
                  availablePluginTable.updateUI();
                  requireShutdown=true;
                }
              }
              break;
            }
          }
 catch (          IOException e1) {
            if (!IOExceptionDialog.showErrorDialog(e1,"Update Installed Plugins","Plugins updating failed")) {
              break;
            }
 else {
              LOG.error(e1);
            }
          }
        }
 while (true);
      }
    }
;
    actionGroup.add(updatePluginsAction);
    installPluginAction=new AnAction("Download and Install Plugin","Download and Install Plugin",IconLoader.getIcon("/actions/install.png")){
      public void update(      AnActionEvent e){
        Presentation presentation=e.getPresentation();
        boolean enabled=false;
        if (tabs.getSelectedIndex() == AVAILABLE_TAB && availablePluginTable != null) {
          PluginNode pluginNode=availablePluginTable.getSelectedObject();
          if (pluginNode != null) {
            int status=PluginManagerColumnInfo.getRealNodeState(pluginNode);
            if (status == PluginNode.STATUS_MISSING || status == PluginNode.STATUS_NEWEST || status == PluginNode.STATUS_OUT_OF_DATE || status == PluginNode.STATUS_UNKNOWN) {
              enabled=true;
            }
          }
        }
        presentation.setEnabled(enabled);
      }
      public void actionPerformed(      AnActionEvent e){
        do {
          try {
            PluginNode pluginNode=availablePluginTable.getSelectedObject();
            if (Messages.showYesNoDialog(main,"Would you like to download and install plugin \"" + pluginNode.getName() + "\"?","Download and Install Plugin",Messages.getQuestionIcon()) == 0) {
              if (downloadPlugin(pluginNode)) {
                requireShutdown=true;
                availablePluginTable.updateUI();
              }
            }
            break;
          }
 catch (          IOException e1) {
            if (!IOExceptionDialog.showErrorDialog(e1,"Download and Install Plugin","Plugin download failed")) {
              break;
            }
 else {
              LOG.error(e1);
            }
          }
        }
 while (true);
      }
    }
;
    actionGroup.add(installPluginAction);
    uninstallPluginAction=new AnAction("Uninstall Plugin","Uninstall Plugin",IconLoader.getIcon("/actions/uninstall.png")){
      public void update(      AnActionEvent e){
        Presentation presentation=e.getPresentation();
        boolean enabled=false;
        if (installedPluginTable != null && tabs.getSelectedIndex() == INSTALLED_TAB) {
          PluginDescriptor pluginDescriptor=installedPluginTable.getSelectedObject();
          if (pluginDescriptor != null && !pluginDescriptor.isDeleted()) {
            enabled=true;
          }
        }
        presentation.setEnabled(enabled);
      }
      public void actionPerformed(      AnActionEvent e){
        PluginId pluginId=null;
        if (tabs.getSelectedIndex() == INSTALLED_TAB) {
          PluginDescriptor pluginDescriptor=installedPluginTable.getSelectedObject();
          if (pluginDescriptor != null) {
            if (Messages.showYesNoDialog(main,"Do you really want to uninstall plugin \"" + pluginDescriptor.getName() + "\"?","Plugin Uninstall",Messages.getQuestionIcon()) == 0) {
              pluginId=pluginDescriptor.getPluginId();
              pluginDescriptor.setDeleted(true);
            }
          }
        }
        if (pluginId != null) {
          try {
            PluginInstaller.prepareToUninstall(pluginId);
            requireShutdown=true;
            installedPluginTable.updateUI();
          }
 catch (          IOException e1) {
            LOG.equals(e1);
          }
        }
      }
    }
;
    actionGroup.add(uninstallPluginAction);
  }
  return actionGroup;
}
