{
  final ToolsProjectConfig config=ToolsProjectConfig.getInstance(panel.getProject());
  return new CheckinHandler(){
    @Override public RefreshableOnComponent getAfterCheckinConfigurationPanel(    Disposable parentDisposable){
      final JLabel label=new JLabel(ToolsBundle.message("tools.after.commit.description"));
      ComboboxWithBrowseButton listComponent=new ComboboxWithBrowseButton();
      final JComboBox comboBox=listComponent.getComboBox();
      comboBox.setModel(new CollectionComboBoxModel(getComboBoxElements(),null));
      comboBox.setRenderer(new ListCellRendererWrapper<Object>(){
        @Override public void customize(        JList list,        Object value,        int index,        boolean selected,        boolean hasFocus){
          if (value instanceof ToolsGroup) {
            setText(StringUtil.notNullize(((ToolsGroup)value).getName(),ToolsBundle.message("tools.unnamed.group")));
          }
 else           if (value instanceof Tool) {
            setText("  " + StringUtil.notNullize(((Tool)value).getName()));
          }
 else {
            setText(ToolsBundle.message("tools.list.item.none"));
          }
        }
      }
);
      listComponent.getButton().addActionListener(new ActionListener(){
        @Override public void actionPerformed(        ActionEvent e){
          final Object item=comboBox.getSelectedItem();
          String id=null;
          if (item instanceof Tool) {
            id=((Tool)item).getActionId();
          }
          final ToolSelectDialog dialog=new ToolSelectDialog(panel.getProject(),id);
          dialog.show();
          if (!dialog.isOK()) {
            return;
          }
          comboBox.setModel(new CollectionComboBoxModel(getComboBoxElements(),dialog.getSelectedTool()));
        }
      }
);
      BorderLayout layout=new BorderLayout();
      layout.setVgap(3);
      final JPanel panel=new JPanel(layout);
      panel.add(label,BorderLayout.NORTH);
      panel.add(listComponent,BorderLayout.CENTER);
      listComponent.setBorder(BorderFactory.createEmptyBorder(0,0,3,0));
      return new RefreshableOnComponent(){
        @Override public JComponent getComponent(){
          return panel;
        }
        @Override public void refresh(){
          String id=config.getAfterCommitToolsId();
          if (id == null) {
            comboBox.setSelectedIndex(-1);
          }
 else {
            for (int i=0; i < comboBox.getItemCount(); i++) {
              final Object itemAt=comboBox.getItemAt(i);
              if (itemAt instanceof Tool && id.equals(((Tool)itemAt).getActionId())) {
                comboBox.setSelectedIndex(i);
                return;
              }
            }
          }
        }
        @Override public void saveState(){
          Object item=comboBox.getSelectedItem();
          config.setAfterCommitToolId(item instanceof Tool ? ((Tool)item).getActionId() : null);
        }
        @Override public void restoreState(){
          refresh();
        }
      }
;
    }
    @Override public void checkinSuccessful(){
      final String id=config.getAfterCommitToolsId();
      if (id == null) {
        return;
      }
      DataManager.getInstance().getDataContextFromFocus().doWhenDone(new AsyncResult.Handler<DataContext>(){
        @Override public void run(        final DataContext context){
          UIUtil.invokeAndWaitIfNeeded(new Runnable(){
            @Override public void run(){
              ToolAction.runTool(id,context);
            }
          }
);
        }
      }
);
    }
  }
;
}
