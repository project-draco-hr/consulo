{
  try {
    String shell=System.getenv("SHELL");
    if (shell == null || !new File(shell).canExecute()) {
      throw new Exception("shell:" + shell);
    }
    String[] command={shell,"-l","-c","/usr/bin/printenv"};
    Process process=Runtime.getRuntime().exec(command);
    ProcessKiller processKiller=new ProcessKiller(process);
    processKiller.killAfter(SHELL_ENV_READING_TIMEOUT);
    List<String> lines=FileUtil.loadLines(process.getInputStream());
    processKiller.stopWaiting();
    int rv=process.exitValue();
    if (rv != 0 || lines.isEmpty()) {
      throw new Exception("rv:" + rv + " lines:"+ lines.size());
    }
    Set<String> toIgnore=new HashSet<String>(Arrays.asList("_","PWD","SHLVL"));
    Map<String,String> env=System.getenv();
    Map<String,String> newEnv=new HashMap<String,String>();
    for (    String line : lines) {
      int pos=line.indexOf('=');
      if (pos <= 0) {
        LOG.warn("malformed:" + line);
        continue;
      }
      String name=line.substring(0,pos);
      if (!toIgnore.contains(name)) {
        newEnv.put(name,line.substring(pos + 1));
      }
 else       if (env.containsKey(name)) {
        newEnv.put(name,env.get(name));
      }
    }
    if (newEnv.size() < lines.size() - toIgnore.size()) {
      throw new Exception("env:" + newEnv.size() + " lines:"+ lines.size());
    }
    return Collections.unmodifiableMap(newEnv);
  }
 catch (  Throwable t) {
    LOG.warn("can't get shell environment",t);
    return System.getenv();
  }
}
