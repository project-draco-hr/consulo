{
  ParserUtils.getToken(builder,mNLS);
  if (!BinaryExpression.POWER.parseBinary(builder,parser)) {
    builder.error(GroovyBundle.message("expression.expected"));
  }
  PsiBuilder.Marker newMarker=marker.precede();
  marker.done(MULTIPLICATIVE_EXPRESSION);
  if (MULT_DIV.contains(builder.getTokenType())) {
    ParserUtils.getToken(builder,MULT_DIV);
    subParse(builder,parser,newMarker);
  }
 else {
    newMarker.drop();
  }
}
