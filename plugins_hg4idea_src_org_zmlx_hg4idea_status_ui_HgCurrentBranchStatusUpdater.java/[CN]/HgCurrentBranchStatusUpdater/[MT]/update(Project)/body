{
  final AtomicReference<Editor> textEditor=new AtomicReference<Editor>();
  UIUtil.invokeAndWaitIfNeeded(new Runnable(){
    @Override public void run(){
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        @Override public void run(){
          textEditor.set(FileEditorManager.getInstance(project).getSelectedTextEditor());
        }
      }
);
    }
  }
);
  if (textEditor.get() == null) {
    handleUpdate(project,null,Collections.<HgRevisionNumber>emptyList());
  }
 else {
    if (project.isDisposed()) {
      return;
    }
    Document document=textEditor.get().getDocument();
    VirtualFile file=FileDocumentManager.getInstance().getFile(document);
    final VirtualFile repo=VcsUtil.getVcsRootFor(project,file);
    if (repo != null) {
      ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
        @Override public void run(){
          HgTagBranchCommand hgTagBranchCommand=new HgTagBranchCommand(project,repo);
          final String branch=hgTagBranchCommand.getCurrentBranch();
          final List<HgRevisionNumber> parents=new HgWorkingCopyRevisionsCommand(project).parents(repo);
          ApplicationManager.getApplication().invokeLater(new Runnable(){
            @Override public void run(){
              handleUpdate(project,branch,parents);
            }
          }
);
        }
      }
);
    }
  }
}
