{
  final PsiClassType.ClassResolveResult resolveResult=PsiUtil.resolveGenericsClassInType(functionalInterfaceType);
  final StringBuilder buf=new StringBuilder();
  buf.append("(");
  final PsiMethod interfaceMethod=LambdaUtil.getFunctionalInterfaceMethod(functionalInterfaceType);
  LOG.assertTrue(interfaceMethod != null);
  final PsiParameter[] parameters=interfaceMethod.getParameterList().getParameters();
  final PsiParameter[] lambdaParameters=lambdaExpression.getParameterList().getParameters();
  if (parameters.length != lambdaParameters.length)   return null;
  for (int i=0; i < parameters.length; i++) {
    PsiParameter parameter=parameters[i];
    final PsiType psiType=GenericsUtil.eliminateWildcards(resolveResult.getSubstitutor().substitute(parameter.getType()));
    if (psiType != null) {
      buf.append(psiType.getPresentableText()).append(" ").append(lambdaParameters[i].getName());
    }
 else {
      buf.append(lambdaParameters[i].getName());
    }
    if (i < parameters.length - 1) {
      buf.append(", ");
    }
  }
  buf.append(")");
  return buf.toString();
}
