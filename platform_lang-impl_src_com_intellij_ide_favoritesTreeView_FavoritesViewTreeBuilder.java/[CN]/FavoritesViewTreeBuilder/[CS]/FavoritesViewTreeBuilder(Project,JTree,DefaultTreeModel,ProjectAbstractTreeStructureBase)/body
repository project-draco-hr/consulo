{
  super(project,tree,treeModel,treeStructure,new FavoritesComparator(ProjectView.getInstance(project),FavoritesProjectViewPane.ID));
  final MessageBusConnection bus=myProject.getMessageBus().connect(this);
  myPsiTreeChangeListener=new ProjectViewPsiTreeChangeListener(myProject){
    @Override protected DefaultMutableTreeNode getRootNode(){
      return FavoritesViewTreeBuilder.this.getRootNode();
    }
    @Override protected AbstractTreeUpdater getUpdater(){
      return FavoritesViewTreeBuilder.this.getUpdater();
    }
    @Override protected boolean isFlattenPackages(){
      return getStructure().isFlattenPackages();
    }
    @Override protected void childrenChanged(    PsiElement parent,    final boolean stopProcessingForThisModificationCount){
      if (findNodeByElement(parent) == null) {
        queueUpdate(true);
      }
 else {
        super.childrenChanged(parent,true);
      }
    }
  }
;
  bus.subscribe(ProjectTopics.PROJECT_ROOTS,new ModuleRootAdapter(){
    @Override public void rootsChanged(    ModuleRootEvent event){
      queueUpdate(true);
    }
  }
);
  PsiManager.getInstance(myProject).addPsiTreeChangeListener(myPsiTreeChangeListener);
  myFileStatusListener=new MyFileStatusListener();
  FileStatusManager.getInstance(myProject).addFileStatusListener(myFileStatusListener);
  myCopyPasteListener=new CopyPasteUtil.DefaultCopyPasteListener(getUpdater());
  CopyPasteManager.getInstance().addContentChangedListener(myCopyPasteListener);
  myFavoritesListener=new FavoritesListener(){
    @Override public void rootsChanged(    String listName){
      updateFromRoot();
    }
    @Override public void listAdded(    String listName){
      updateFromRoot();
    }
    @Override public void listRemoved(    String listName){
      updateFromRoot();
    }
  }
;
  FavoritesManager.getInstance(myProject).addFavoritesListener(myFavoritesListener);
  initRootNode();
}
