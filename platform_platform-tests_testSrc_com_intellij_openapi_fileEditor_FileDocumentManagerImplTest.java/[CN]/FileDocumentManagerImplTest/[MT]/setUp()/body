{
  super.setUp();
  initApplication();
  registerExtension(FileTypeFactory.FILE_TYPE_FACTORY_EP,new InternalFileTypeFactory());
  registerExtensionPoint(FileDocumentSynchronizationVetoer.EP_NAME,FileDocumentSynchronizationVetoer.class);
  getApplication().registerService(CommandProcessor.class,new MyMockCommandProcessor());
  getApplication().registerService(CodeStyleFacade.class,new DefaultCodeStyleFacade());
  getApplication().registerService(ProjectLocator.class,new DefaultProjectLocator());
  MockEditorFactory editorFactory=new MockEditorFactory();
  getApplication().registerService(EditorFactory.class,editorFactory);
  final LanguageFileType[] fileType={null};
  getApplication().addComponent(FileTypeManager.class,new FileTypeManagerImpl(null,new MockSchemesManagerFactory()){
    @NotNull @Override public FileType getFileTypeByFileName(    @NotNull String fileName){
      return fileType[0];
    }
    @NotNull @Override public FileType getFileTypeByFile(    @NotNull VirtualFile file){
      return fileType[0];
    }
    @NotNull @Override public FileType getFileTypeByExtension(    @NotNull String extension){
      return fileType[0];
    }
  }
);
  fileType[0]=StdFileTypes.JAVA;
  getApplication().getComponent(FileTypeManager.class);
  final VirtualFileManager virtualFileManager=EasyMock.createMock(VirtualFileManager.class);
  final ProjectManager projectManager=EasyMock.createMock(ProjectManager.class);
  myDocumentManager=new MyMockFileDocumentManager(virtualFileManager,projectManager);
  getApplication().registerService(FileDocumentManager.class,myDocumentManager);
  getApplication().registerService(DataManager.class,new DataManagerImpl());
}
