{
  myDetectedFacetManager=detectedFacetManager;
  Map<FacetType,DetectedFacetsTree.FacetTypeNode> facetTypeNodes=new HashMap<FacetType,DetectedFacetsTree.FacetTypeNode>();
  Collection<FacetInfo2<Module>> sortedFacets=new LinkedHashSet<FacetInfo2<Module>>();
  for (  FacetInfo2<Module> facet : detectedFacets) {
    addUnderlying(facet,sortedFacets);
  }
  Map<FacetInfo2<Module>,DetectedFacetsTree.FacetNode> facetNodes=new HashMap<FacetInfo2<Module>,DetectedFacetsTree.FacetNode>();
  for (  FacetInfo2<Module> facetInfo : sortedFacets) {
    FacetType facetType=getRootFacetType(facetInfo);
    DetectedFacetsTree.FacetTypeNode facetTypeNode=facetTypeNodes.get(facetType);
    if (facetTypeNode == null) {
      facetTypeNode=new DetectedFacetsTree.FacetTypeNode(facetType);
      facetTypeNodes.put(facetType,facetTypeNode);
    }
    Module module=facetInfo.getModule();
    ModuleNodeImpl moduleNode=findOrCreateModuleNode(facetTypeNode,module);
    DetectedFacetsTree.FacetNode parentNode=null;
    FacetInfo2<Module> underlyingFacet=facetInfo.getUnderlyingFacetInfo();
    if (underlyingFacet != null) {
      parentNode=facetNodes.get(underlyingFacet);
    }
    VirtualFile projectRoot=facetInfo.getModule().getProject().getBaseDir();
    DetectedFacetsTree.FacetNode facetNode;
    if (facetInfo instanceof DetectedFacetInfo) {
      facetNode=new FacetNodeImpl((DetectedFacetInfo<Module>)facetInfo,projectRoot,parentNode,files.get(facetInfo));
    }
 else {
      facetNode=new RealFacetNode((FacetInfoBackedByFacet)facetInfo,projectRoot,parentNode);
    }
    facetNodes.put(facetInfo,facetNode);
    if (parentNode == null) {
      moduleNode.addRootFacet(facetNode);
    }
  }
  myFacetTypeNodes=facetTypeNodes.values();
  myTree=new DetectedFacetsTree(myFacetTypeNodes);
}
