{
  if (myDisposed)   return;
  final ArrayList<LiveOccurrence> occurrences=new ArrayList<LiveOccurrence>();
  final Editor editor=getEditor();
  final ArrayList<FindResult> results=new ArrayList<FindResult>();
  if (findModel != null) {
    updatePreviousFindModel(findModel);
    final FutureResult<int[]> startsRef=new FutureResult<int[]>();
    final FutureResult<int[]> endsRef=new FutureResult<int[]>();
    getSelection(editor,startsRef,endsRef);
    ApplicationManager.getApplication().runReadAction(new Runnable(){
      @Override public void run(){
        int[] starts=new int[0];
        int[] ends=new int[0];
        try {
          starts=startsRef.get();
          ends=endsRef.get();
        }
 catch (        InterruptedException ignore) {
        }
catch (        ExecutionException ignore) {
        }
        if (starts.length == 0 || findModel.isGlobal()) {
          findInRange(new TextRange(0,Integer.MAX_VALUE),editor,findModel,results);
        }
 else {
          for (int i=0; i < starts.length; ++i) {
            findInRange(new TextRange(starts[i],ends[i]),editor,findModel,results);
          }
        }
        findResultsToOccurrences(results,occurrences);
        final Runnable searchCompletedRunnable=new Runnable(){
          @Override public void run(){
            searchCompleted(occurrences,editor,findModel,toChangeSelection,next,stamp);
          }
        }
;
        if (!ApplicationManager.getApplication().isUnitTestMode()) {
          UIUtil.invokeLaterIfNeeded(searchCompletedRunnable);
        }
 else {
          searchCompletedRunnable.run();
        }
      }
    }
);
  }
}
