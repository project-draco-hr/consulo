{
  final PsiElementFactory elementFactory=JavaPsiFacade.getInstance(newExpression.getProject()).getElementFactory();
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      try {
        PsiClass aClass=psiClass;
        if (aClass == null)         return;
        final PsiJavaCodeReferenceElement classReference=newExpression.getClassReference();
        if (classReference != null) {
          classReference.bindToElement(aClass);
        }
        setupInheritance(newExpression,aClass);
        setupGenericParameters(newExpression,aClass);
        PsiExpressionList argList=newExpression.getArgumentList();
        Project project=aClass.getProject();
        if (argList != null && argList.getExpressions().length > 0) {
          PsiMethod constructor=elementFactory.createConstructor();
          constructor=(PsiMethod)aClass.add(constructor);
          TemplateBuilder templateBuilder=new TemplateBuilder(aClass);
          CreateFromUsageUtils.setupMethodParameters(constructor,templateBuilder,argList,getTargetSubstitutor(newExpression));
          setupSuperCall(aClass,constructor,templateBuilder);
          getReferenceElement(newExpression).bindToElement(aClass);
          aClass=CodeInsightUtilBase.forcePsiPostprocessAndRestoreElement(aClass);
          Template template=templateBuilder.buildTemplate();
          Editor editor=positionCursor(project,aClass.getContainingFile(),aClass);
          TextRange textRange=aClass.getTextRange();
          editor.getDocument().deleteString(textRange.getStartOffset(),textRange.getEndOffset());
          startTemplate(editor,template,project);
        }
 else {
          positionCursor(project,aClass.getContainingFile(),aClass);
        }
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
    }
  }
);
}
