{
  PsiMethod psiMethod=(PsiMethod)psiResolved;
  RefMethodImpl refMethod=(RefMethodImpl)refResolved;
  PsiMethodCallExpression call=PsiTreeUtil.getParentOfType(refExpression,PsiMethodCallExpression.class);
  if (call != null) {
    PsiType returnType=psiMethod.getReturnType();
    if (!psiMethod.isConstructor() && returnType != PsiType.VOID) {
      if (!(call.getParent() instanceof PsiExpressionStatement)) {
        refMethod.setReturnValueUsed(true);
      }
      addTypeReference(psiFrom,returnType,refFrom.getRefManager());
    }
    PsiExpressionList argumentList=call.getArgumentList();
    if (argumentList.getExpressions().length > 0) {
      refMethod.updateParameterValues(argumentList.getExpressions());
    }
    final PsiExpression psiExpression=call.getMethodExpression().getQualifierExpression();
    if (psiExpression != null) {
      final PsiType usedType=psiExpression.getType();
      if (usedType != null) {
        final String fqName=psiMethod.getContainingClass().getQualifiedName();
        if (fqName != null) {
          final PsiClassType methodOwnerType=JavaPsiFacade.getInstance(call.getProject()).getElementFactory().createTypeByFQClassName(fqName,GlobalSearchScope.allScope(psiMethod.getProject()));
          if (!usedType.equals(methodOwnerType)) {
            refMethod.setCalledOnSubClass(true);
          }
        }
      }
    }
  }
}
