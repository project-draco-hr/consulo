{
  final FileType fileType=vFile.getFileType();
  if (fileType instanceof LanguageFileType) {
    LanguageFileType substFileType=substituteFileType(((LanguageFileType)fileType).getLanguage(),vFile,project);
    if (substFileType != null) {
      final EditorHighlighter editorHighlighter=FileTypeEditorHighlighterProviders.INSTANCE.forFileType(substFileType).getEditorHighlighter(project,fileType,vFile,settings);
      boolean isPlain=editorHighlighter.getClass() == LexerEditorHighlighter.class && ((LexerEditorHighlighter)editorHighlighter).isPlain();
      if (!isPlain) {
        return editorHighlighter;
      }
    }
    return FileTypeEditorHighlighterProviders.INSTANCE.forFileType(fileType).getEditorHighlighter(project,fileType,vFile,settings);
  }
  final ContentBasedFileSubstitutor[] processors=Extensions.getExtensions(ContentBasedFileSubstitutor.EP_NAME);
  SyntaxHighlighter highlighter=null;
  for (  ContentBasedFileSubstitutor processor : processors) {
    boolean applicable;
    try {
      applicable=processor.isApplicable(project,vFile);
    }
 catch (    Exception e) {
      LOG.error(e);
      continue;
    }
    if (applicable && processor instanceof ContentBasedClassFileProcessor) {
      highlighter=((ContentBasedClassFileProcessor)processor).createHighlighter(project,vFile);
    }
  }
  if (highlighter == null) {
    highlighter=SyntaxHighlighterFactory.getSyntaxHighlighter(fileType,project,vFile);
  }
  return createEditorHighlighter(highlighter,settings);
}
