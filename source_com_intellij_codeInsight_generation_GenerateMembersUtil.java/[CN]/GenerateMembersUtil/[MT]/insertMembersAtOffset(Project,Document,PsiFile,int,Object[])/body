{
  PsiElement anchor=findAnchor(file,offset);
  if (anchor == null)   return null;
  PsiClass aClass=(PsiClass)anchor.getParent();
  PsiJavaToken lBrace=aClass.getLBrace();
  if (lBrace == null)   return null;
  PsiJavaToken rBrace=aClass.getRBrace();
  if (!isChildInRange(anchor,lBrace.getNextSibling(),rBrace)) {
    anchor=null;
  }
{
    PsiElement element=anchor;
    while (true) {
      if (element == null)       break;
      if (element instanceof PsiField || element instanceof PsiMethod || element instanceof PsiClassInitializer)       break;
      element=element.getNextSibling();
    }
    if (element instanceof PsiField) {
      PsiField field=(PsiField)element;
      if (!field.getTypeElement().getParent().equals(field)) {
        field.normalizeDeclaration();
        anchor=field;
      }
    }
  }
  if (anchor instanceof PsiWhiteSpace) {
    offset=Math.max(anchor.getTextRange().getStartOffset(),offset);
    String savedDocumentText=document.getText();
    String markerText="/***/a b;";
    document.insertString(offset,markerText);
    RangeMarker marker=document.createRangeMarker(offset,offset + markerText.length());
    PsiDocumentManager.getInstance(project).commitAllDocuments();
    Object[] newMembers=insertMembersAtOffset(project,document,file,offset,memberPrototypes);
    SmartPsiElementPointer[] pointers=new SmartPsiElementPointer[newMembers.length];
    for (int i=0; i < newMembers.length; i++) {
      Object member=newMembers[i];
      PsiElement element;
      if (member instanceof PsiElement) {
        element=(PsiElement)member;
      }
 else       if (member instanceof TemplateGenerationInfo) {
        element=((TemplateGenerationInfo)member).element;
      }
 else {
        LOG.assertTrue(false);
        continue;
      }
      pointers[i]=SmartPointerManager.getInstance(project).createSmartPsiElementPointer(element);
    }
    LOG.assertTrue(marker.isValid());
    String newMarkerText=document.getCharsSequence().subSequence(marker.getStartOffset(),marker.getEndOffset()).toString();
    LOG.assertTrue(newMarkerText.equals(markerText));
    int membersEnd=((PsiElement)newMembers[newMembers.length - 1]).getTextRange().getEndOffset();
    if (marker.getEndOffset() < membersEnd) {
      LOG.error("marker.getEndOffset():" + marker.getEndOffset());
      LOG.error("membersEnd:" + membersEnd);
      LOG.error("offset:" + offset);
      LOG.error(savedDocumentText);
    }
    document.deleteString(membersEnd,marker.getEndOffset());
    PsiDocumentManager.getInstance(project).commitAllDocuments();
    PsiElement space=file.findElementAt(membersEnd);
    LOG.assertTrue(space instanceof PsiWhiteSpace);
    TextRange spaceRange=space.getTextRange();
    CodeStyleManager.getInstance(project).reformatRange(file,spaceRange.getStartOffset(),spaceRange.getEndOffset());
    for (int i=0; i < pointers.length; i++) {
      SmartPsiElementPointer pointer=pointers[i];
      Object member=newMembers[i];
      PsiElement element=pointer.getElement();
      LOG.assertTrue(element != null);
      if (member instanceof PsiElement) {
        newMembers[i]=element;
      }
 else       if (member instanceof TemplateGenerationInfo) {
        ((TemplateGenerationInfo)member).element=element;
      }
 else {
        LOG.assertTrue(false);
        continue;
      }
    }
    return newMembers;
  }
  return insertMembersBeforeAnchor(aClass,anchor,memberPrototypes);
}
