{
  if (isXY()) {
    int patchX=0;
    int patchY=0;
    for (int i=0; i < components.length; i++) {
      final RadComponent c=components[i];
      final Point p=new Point(x + dx[i],y + dy[i]);
      c.setLocation(p);
      patchX=Math.min(patchX,p.x);
      patchY=Math.min(patchY,p.y);
      addComponent(c);
    }
    if (patchX < 0 || patchY < 0) {
      for (int i=0; i < components.length; i++) {
        components[i].shift(-patchX,-patchY);
      }
    }
    return new DropInfo(this,null,null);
  }
 else   if (isGrid()) {
    final GridLayoutManager gridLayout=(GridLayoutManager)getLayout();
    final int row=gridLayout.getRowAt(y);
    final int column=gridLayout.getColumnAt(x);
    final RadComponent c=components[0];
    if (c instanceof RadContainer) {
      final LayoutManager layout=((RadContainer)c).getLayout();
      if (layout instanceof XYLayoutManager) {
        ((XYLayoutManager)layout).setPreferredSize(c.getSize());
      }
    }
    final GridConstraints constraints=c.getConstraints();
    constraints.setRow(row);
    constraints.setColumn(column);
    constraints.setRowSpan(1);
    constraints.setColSpan(1);
    addComponent(c);
    final RevalidateInfo info=c.revalidate();
    return new DropInfo(this,info.myContainer,info.myPreviousContainerSize);
  }
 else {
    throw new IllegalStateException("unknown layout: " + getLayout());
  }
}
