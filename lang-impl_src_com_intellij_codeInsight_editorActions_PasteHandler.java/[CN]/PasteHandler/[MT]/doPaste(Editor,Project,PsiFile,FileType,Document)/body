{
  Transferable content=CopyPasteManager.getInstance().getContents();
  if (content != null) {
    String text=null;
    try {
      text=(String)content.getTransferData(DataFlavor.stringFlavor);
    }
 catch (    Exception e) {
      editor.getComponent().getToolkit().beep();
    }
    if (text == null)     return;
    final CodeInsightSettings settings=CodeInsightSettings.getInstance();
    TextBlockTransferable.ReferenceData[] referenceData=null;
    if (settings.ADD_IMPORTS_ON_PASTE != CodeInsightSettings.NO) {
      try {
        referenceData=(TextBlockTransferable.ReferenceData[])content.getTransferData(TextBlockTransferable.ReferenceData.FLAVOR);
      }
 catch (      UnsupportedFlavorException e) {
      }
catch (      IOException e) {
      }
    }
    if (referenceData != null) {
      TextBlockTransferable.ReferenceData[] newReferenceData=new TextBlockTransferable.ReferenceData[referenceData.length];
      for (int i=0; i < referenceData.length; i++) {
        newReferenceData[i]=(TextBlockTransferable.ReferenceData)referenceData[i].clone();
      }
      referenceData=newReferenceData;
    }
    TextBlockTransferable.FoldingData[] _foldingData=null;
    try {
      _foldingData=(TextBlockTransferable.FoldingData[])content.getTransferData(TextBlockTransferable.FoldingData.FLAVOR);
    }
 catch (    UnsupportedFlavorException e) {
    }
catch (    IOException e) {
    }
    if (_foldingData != null) {
      TextBlockTransferable.FoldingData[] newFoldingData=new TextBlockTransferable.FoldingData[_foldingData.length];
      for (int i=0; i < _foldingData.length; i++) {
        newFoldingData[i]=(TextBlockTransferable.FoldingData)_foldingData[i].clone();
      }
      _foldingData=newFoldingData;
    }
    final TextBlockTransferable.FoldingData[] foldingData=_foldingData;
    text=TextBlockTransferable.convertLineSeparators(text,"\n",referenceData,foldingData);
    final int col=editor.getCaretModel().getLogicalPosition().column;
    if (editor.getSelectionModel().hasSelection()) {
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        public void run(){
          EditorModificationUtil.deleteSelectedText(editor);
        }
      }
);
    }
    RawText rawText=null;
    try {
      rawText=(RawText)content.getTransferData(RawText.FLAVOR);
    }
 catch (    UnsupportedFlavorException e) {
    }
catch (    IOException e) {
    }
    String newText=text;
    for (    PastePreProcessor preProcessor : Extensions.getExtensions(PastePreProcessor.EP_NAME)) {
      newText=preProcessor.preprocess(project,file,editor,newText,rawText);
    }
    int indentOptions=text.equals(newText) ? settings.REFORMAT_ON_PASTE : CodeInsightSettings.REFORMAT_BLOCK;
    text=newText;
    if (fileType != StdFileTypes.XML && fileType != StdFileTypes.JAVA && indentOptions != CodeInsightSettings.NO_REFORMAT) {
      indentOptions=CodeInsightSettings.INDENT_BLOCK;
    }
    int length=text.length();
    final String text1=text;
    ApplicationManager.getApplication().runWriteAction(new Runnable(){
      public void run(){
        EditorModificationUtil.insertStringAtCaret(editor,text1,false,true);
      }
    }
);
    final int offset=editor.getCaretModel().getOffset() - length;
    final RangeMarker bounds=document.createRangeMarker(offset,offset + length);
    editor.getCaretModel().moveToOffset(bounds.getEndOffset());
    editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
    editor.getSelectionModel().removeSelection();
    if (foldingData != null && foldingData.length > 0) {
      final CodeFoldingManager foldingManager=CodeFoldingManager.getInstance(project);
      foldingManager.updateFoldRegions(editor);
      Runnable processor1=new Runnable(){
        public void run(){
          for (          TextBlockTransferable.FoldingData data : foldingData) {
            FoldRegion region=foldingManager.findFoldRegion(editor,data.startOffset + offset,data.endOffset + offset);
            if (region != null) {
              region.setExpanded(data.isExpanded);
            }
          }
        }
      }
;
      editor.getFoldingModel().runBatchFoldingOperation(processor1);
    }
    if (referenceData != null && referenceData.length > 0) {
      PsiDocumentManager.getInstance(project).commitAllDocuments();
      final TextBlockTransferable.ReferenceData[] referenceData1=referenceData;
      final PsiJavaCodeReferenceElement[] refs=findReferencesToRestore(file,bounds,referenceData1);
      if (settings.ADD_IMPORTS_ON_PASTE == CodeInsightSettings.ASK) {
        askReferencesToRestore(project,refs,referenceData1);
      }
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        public void run(){
          restoreReferences(referenceData1,refs);
        }
      }
);
    }
    final int indentOptions1=indentOptions;
    ApplicationManager.getApplication().runWriteAction(new Runnable(){
      public void run(){
switch (indentOptions1) {
case CodeInsightSettings.INDENT_BLOCK:
          indentBlock(project,editor,bounds.getStartOffset(),bounds.getEndOffset(),col);
        break;
case CodeInsightSettings.INDENT_EACH_LINE:
      indentEachLine(project,editor,bounds.getStartOffset(),bounds.getEndOffset());
    break;
case CodeInsightSettings.REFORMAT_BLOCK:
  indentEachLine(project,editor,bounds.getStartOffset(),bounds.getEndOffset());
reformatBlock(project,editor,bounds.getStartOffset(),bounds.getEndOffset());
break;
}
}
}
);
if (bounds.isValid()) {
editor.getCaretModel().moveToOffset(bounds.getEndOffset());
editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
editor.getSelectionModel().removeSelection();
editor.putUserData(EditorEx.LAST_PASTED_REGION,new TextRange(bounds.getStartOffset(),bounds.getEndOffset()));
}
}
}
