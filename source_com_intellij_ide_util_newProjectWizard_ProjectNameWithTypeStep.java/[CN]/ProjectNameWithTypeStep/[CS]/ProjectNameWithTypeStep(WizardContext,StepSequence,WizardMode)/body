{
  super(wizardContext,sequence,mode);
  myModuleName=new LabeledField(myNamePathComponent.getNameValue(),ProjectBundle.message("project.new.wizard.module.name.title"));
  myModuleName.getComponent().setColumns(20);
  myModuleContentRoot=new LabeledField(FileUtil.toSystemDependentName(myNamePathComponent.getPath()),ProjectBundle.message("project.new.wizard.module.root.title"));
  updateModuleNameComponent(false);
  myAdditionalContentPanel.add(myModuleName,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,0.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,0,0),0,0));
  myAdditionalContentPanel.add(myModuleContentRoot,new GridBagConstraints(1,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(0,5,0,0),0,0));
  myModuleDescriptionPane=new JEditorPane();
  myModuleDescriptionPane.setContentType(UIUtil.HTML_MIME);
  myModuleDescriptionPane.addHyperlinkListener(new HyperlinkListener(){
    public void hyperlinkUpdate(    HyperlinkEvent e){
      if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
        try {
          BrowserUtil.launchBrowser(e.getURL().toString());
        }
 catch (        IllegalThreadStateException ex) {
        }
      }
    }
  }
);
  myModuleDescriptionPane.setEditable(false);
  ModuleType[] allModuleTypes=ModuleTypeManager.getInstance().getRegisteredTypes();
  if (myWizardContext.getProject() != null) {
    allModuleTypes=ArrayUtil.remove(allModuleTypes,ArrayUtil.find(allModuleTypes,ModuleType.EMPTY));
  }
  myTypesList=new JList(allModuleTypes);
  myTypesList.setSelectionModel(new PermanentSingleSelectionModel());
  myTypesList.setCellRenderer(new DefaultListCellRenderer(){
    public Component getListCellRendererComponent(    final JList list,    final Object value,    final int index,    final boolean isSelected,    final boolean cellHasFocus){
      final Component rendererComponent=super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
      final ModuleType moduleType=(ModuleType)value;
      setIcon(moduleType.getBigIcon());
      setDisabledIcon(moduleType.getBigIcon());
      setText(myWizardContext.getProject() == null ? moduleType.getProjectType() : moduleType.getName());
      return rendererComponent;
    }
  }
);
  myTypesList.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      if (e.getValueIsAdjusting()) {
        return;
      }
      final ModuleType typeSelected=(ModuleType)myTypesList.getSelectedValue();
      myModuleDescriptionPane.setText("<html><body><font face=\"verdana\" size=\"-1\">" + typeSelected.getDescription() + "</font></body></html>");
      updateModuleNameComponent(typeSelected != ModuleType.EMPTY);
      fireStateChanged();
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          myTypesList.requestFocusInWindow();
        }
      }
);
    }
  }
);
  myTypesList.setSelectedIndex(0);
  myTypesList.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == 2) {
      }
    }
  }
);
  final DocumentAdapter contentRootUpdater=new DocumentAdapter(){
    protected void textChanged(    final DocumentEvent e){
      if (!myModuleContentRoot.isChangedByUser()) {
        final String currentModuleName=myModuleName.getFieldText();
        final String filePath;
        if (currentModuleName.equals(myNamePathComponent.getNameValue())) {
          filePath=myNamePathComponent.getPath();
        }
 else {
          filePath=myNamePathComponent.getPath() + File.separator + currentModuleName;
        }
        myModuleContentRoot.setFieldText(FileUtil.toSystemDependentName(filePath));
      }
    }
  }
;
  myModuleName.getComponent().getDocument().addDocumentListener(contentRootUpdater);
  myNamePathComponent.getPathComponent().getDocument().addDocumentListener(contentRootUpdater);
  myNamePathComponent.getNameComponent().getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    final DocumentEvent e){
      if (!myModuleName.isChangedByUser()) {
        myModuleName.setFieldText(myNamePathComponent.getNameValue());
      }
    }
  }
);
  final JLabel moduleTypeLabel=new JLabel(IdeBundle.message("label.select.module.type"));
  moduleTypeLabel.setFont(UIUtil.getLabelFont().deriveFont(Font.BOLD));
  myAdditionalContentPanel.add(moduleTypeLabel,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,0.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(7,0,0,0),0,0));
  final JLabel descriptionLabel=new JLabel(IdeBundle.message("label.description"));
  descriptionLabel.setFont(UIUtil.getLabelFont().deriveFont(Font.BOLD));
  myAdditionalContentPanel.add(descriptionLabel,new GridBagConstraints(1,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(7,5,0,0),0,0));
  final JScrollPane typesListScrollPane=ScrollPaneFactory.createScrollPane(myTypesList);
  final Dimension preferredSize=calcTypeListPreferredSize(allModuleTypes);
  typesListScrollPane.setPreferredSize(preferredSize);
  typesListScrollPane.setMinimumSize(preferredSize);
  myAdditionalContentPanel.add(typesListScrollPane,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,0.0,1.0,GridBagConstraints.NORTHWEST,GridBagConstraints.BOTH,new Insets(0,0,0,0),0,0));
  final JScrollPane descriptionScrollPane=ScrollPaneFactory.createScrollPane(myModuleDescriptionPane);
  descriptionScrollPane.setPreferredSize(new Dimension(preferredSize.width * 3,preferredSize.height));
  myAdditionalContentPanel.add(descriptionScrollPane,new GridBagConstraints(1,GridBagConstraints.RELATIVE,1,1,1.0,1.0,GridBagConstraints.NORTHWEST,GridBagConstraints.BOTH,new Insets(0,5,0,0),0,0));
}
