{
  super(wizardContext,sequence,mode);
  myAdditionalContentPanel.add(myModulePanel,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1,1,GridBagConstraints.NORTHWEST,GridBagConstraints.BOTH,new Insets(0,0,0,0),0,0));
  myCreateModuleCb.setVisible(myWizardContext.isCreatingNewProject());
  myCreateModuleCb.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      UIUtil.setEnabled(myInternalPanel,myCreateModuleCb.isSelected(),true);
      fireStateChanged();
    }
  }
);
  myCreateModuleCb.setSelected(true);
  if (!myWizardContext.isCreatingNewProject()) {
    myInternalPanel.setBorder(null);
  }
  myModuleDescriptionPane.setContentType(UIUtil.HTML_MIME);
  myModuleDescriptionPane.addHyperlinkListener(new HyperlinkListener(){
    public void hyperlinkUpdate(    HyperlinkEvent e){
      if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
        try {
          BrowserUtil.launchBrowser(e.getURL().toString());
        }
 catch (        IllegalThreadStateException ex) {
        }
      }
    }
  }
);
  myModuleDescriptionPane.setEditable(false);
  ModuleType[] allModuleTypes=ModuleTypeManager.getInstance().getRegisteredTypes();
  final DefaultListModel defaultListModel=new DefaultListModel();
  for (  ModuleType moduleType : allModuleTypes) {
    defaultListModel.addElement(moduleType);
  }
  myTypesList.setModel(defaultListModel);
  myTypesList.setSelectionModel(new PermanentSingleSelectionModel());
  myTypesList.setCellRenderer(new DefaultListCellRenderer(){
    public Component getListCellRendererComponent(    final JList list,    final Object value,    final int index,    final boolean isSelected,    final boolean cellHasFocus){
      final Component rendererComponent=super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
      final ModuleType moduleType=(ModuleType)value;
      setIcon(moduleType.getBigIcon());
      setDisabledIcon(moduleType.getBigIcon());
      setText(moduleType.getName());
      return rendererComponent;
    }
  }
);
  myTypesList.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      if (e.getValueIsAdjusting()) {
        return;
      }
      final ModuleType typeSelected=(ModuleType)myTypesList.getSelectedValue();
      myModuleDescriptionPane.setText("<html><body><font face=\"verdana\" size=\"-1\">" + typeSelected.getDescription() + "</font></body></html>");
      fireStateChanged();
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          myTypesList.requestFocusInWindow();
        }
      }
);
    }
  }
);
  myTypesList.setSelectedIndex(0);
  myTypesList.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == 2) {
      }
    }
  }
);
  myModuleName.getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    final DocumentEvent e){
      if (myModuleNameDocListenerEnabled) {
        myModuleNameChangedByUser=true;
      }
    }
  }
);
  myNamePathComponent.getNameComponent().getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    final DocumentEvent e){
      if (!myModuleNameChangedByUser) {
        setModuleName(myNamePathComponent.getNameValue());
      }
    }
  }
);
  setModuleName(myNamePathComponent.getNameValue());
  myModuleContentRoot.addBrowseFolderListener(ProjectBundle.message("project.new.wizard.module.content.root.chooser.title"),ProjectBundle.message("project.new.wizard.module.content.root.chooser.description"),myWizardContext.getProject(),BrowseFilesListener.SINGLE_DIRECTORY_DESCRIPTOR);
  myModuleContentRoot.getTextField().getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    final DocumentEvent e){
      if (myContentRootDocListenerEnabled) {
        myContentRootChangedByUser=true;
      }
    }
  }
);
  myNamePathComponent.getPathComponent().getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    final DocumentEvent e){
      if (!myContentRootChangedByUser) {
        setModuleContentRoot(myNamePathComponent.getPath());
      }
    }
  }
);
  myModuleName.getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    final DocumentEvent e){
      if (!myContentRootChangedByUser) {
        final String path=myModuleContentRoot.getText();
        final int lastSeparatorIndex=path.lastIndexOf(File.separator);
        if (lastSeparatorIndex >= 0) {
          setModuleContentRoot(path.substring(0,lastSeparatorIndex + 1) + myModuleName.getText());
        }
      }
    }
  }
);
  setModuleContentRoot(myNamePathComponent.getPath());
  myModuleFileLocation.addBrowseFolderListener(ProjectBundle.message("project.new.wizard.module.file.chooser.title"),ProjectBundle.message("project.new.wizard.module.file.description"),myWizardContext.getProject(),BrowseFilesListener.SINGLE_DIRECTORY_DESCRIPTOR);
  myModuleFileLocation.getTextField().getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    final DocumentEvent e){
      if (myImlLocationDocListenerEnabled) {
        myImlLocationChangedByUser=true;
      }
    }
  }
);
  myNamePathComponent.getPathComponent().getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    final DocumentEvent e){
      if (!myImlLocationChangedByUser) {
        setImlFileLocation(myNamePathComponent.getPath());
      }
    }
  }
);
  myModuleContentRoot.getTextField().getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    final DocumentEvent e){
      if (!myImlLocationChangedByUser) {
        setImlFileLocation(myModuleContentRoot.getText());
      }
    }
  }
);
  myModuleName.getDocument().addDocumentListener(new DocumentAdapter(){
    protected void textChanged(    final DocumentEvent e){
      if (!myImlLocationChangedByUser) {
        final String path=myModuleFileLocation.getText();
        final int lastSeparatorIndex=path.lastIndexOf(File.separator);
        if (lastSeparatorIndex >= 0) {
          setImlFileLocation(path.substring(0,lastSeparatorIndex + 1) + myModuleName.getText());
        }
      }
    }
  }
);
  setImlFileLocation(myNamePathComponent.getPath());
}
