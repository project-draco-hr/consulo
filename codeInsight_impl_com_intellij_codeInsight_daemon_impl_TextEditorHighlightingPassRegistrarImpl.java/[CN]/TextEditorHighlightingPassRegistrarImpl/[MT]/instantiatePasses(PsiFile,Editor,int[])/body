{
  if (!checkedForCycles) {
    checkedForCycles=true;
    checkForCycles();
  }
  final TIntObjectHashMap<TextEditorHighlightingPass> id2Pass=new TIntObjectHashMap<TextEditorHighlightingPass>();
  myRegisteredPassFactories.forEachKey(new TIntProcedure(){
    public boolean execute(    int passId){
      if (ArrayUtil.find(passesToIgnore,passId) != -1)       return true;
      PassConfig passConfig=myRegisteredPassFactories.get(passId);
      TextEditorHighlightingPassFactory factory=passConfig.passFactory;
      final TextEditorHighlightingPass pass=factory.createHighlightingPass(psiFile,editor);
      if (pass == null) {
        ((DaemonCodeAnalyzerImpl)DaemonCodeAnalyzer.getInstance(myProject)).getFileStatusMap().markFileUpToDate(editor.getDocument(),passId);
      }
 else {
        TIntArrayList ids=new TIntArrayList(passConfig.completionPredecessorIds.length);
        for (        int id : passConfig.completionPredecessorIds) {
          if (myRegisteredPassFactories.containsKey(id))           ids.add(id);
        }
        pass.setCompletionPredecessorIds(ids.isEmpty() ? ArrayUtil.EMPTY_INT_ARRAY : ids.toNativeArray());
        ids=new TIntArrayList(passConfig.startingPredecessorIds.length);
        for (        int id : passConfig.startingPredecessorIds) {
          if (myRegisteredPassFactories.containsKey(id))           ids.add(id);
        }
        pass.setStartingPredecessorIds(ids.isEmpty() ? ArrayUtil.EMPTY_INT_ARRAY : ids.toNativeArray());
        pass.setId(passId);
        id2Pass.put(passId,pass);
        if (passConfig.runIntentionsPassAfter && !(pass instanceof ProgressableTextEditorHighlightingPass.EmptyPass)) {
          Project project=psiFile.getProject();
          ShowIntentionsPass intentionsPass=new ShowIntentionsPass(project,editor,passId,new QuickFixAction());
          intentionsPass.setCompletionPredecessorIds(new int[]{passId});
          int id=nextAvailableId++;
          intentionsPass.setId(id);
          id2Pass.put(id,intentionsPass);
        }
      }
      return true;
    }
  }
);
  return topoSort(id2Pass);
}
