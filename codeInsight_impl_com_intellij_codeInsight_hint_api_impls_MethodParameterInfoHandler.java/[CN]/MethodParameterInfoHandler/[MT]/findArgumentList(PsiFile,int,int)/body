{
  if (file == null)   return null;
  char[] chars=file.textToCharArray();
  if (offset >= chars.length)   offset=chars.length - 1;
  int offset1=CharArrayUtil.shiftBackward(chars,offset," \t\n\r");
  if (offset1 < 0)   return null;
  boolean acceptRparenth=true;
  boolean acceptLparenth=false;
  if (offset1 != offset) {
    offset=offset1;
    acceptRparenth=false;
    acceptLparenth=true;
  }
  PsiElement element=file.findElementAt(offset);
  if (element == null)   return null;
  PsiElement parent=element.getParent();
  while (true) {
    if (parent instanceof PsiExpressionList) {
      TextRange range=parent.getTextRange();
      if (!acceptRparenth) {
        if (offset == range.getEndOffset() - 1) {
          PsiElement[] children=parent.getChildren();
          PsiElement last=children[children.length - 1];
          if (last instanceof PsiJavaToken && ((PsiJavaToken)last).getTokenType() == JavaTokenType.RPARENTH) {
            parent=parent.getParent();
            continue;
          }
        }
      }
      if (!acceptLparenth) {
        if (offset == range.getStartOffset()) {
          parent=parent.getParent();
          continue;
        }
      }
      if (lbraceOffset >= 0 && range.getStartOffset() != lbraceOffset) {
        parent=parent.getParent();
        continue;
      }
      break;
    }
    if (parent instanceof PsiFile)     return null;
    parent=parent.getParent();
  }
  PsiExpressionList list=(PsiExpressionList)parent;
  PsiElement listParent=list.getParent();
  if (listParent instanceof PsiMethodCallExpression || listParent instanceof PsiNewExpression || listParent instanceof PsiAnonymousClass|| listParent instanceof PsiEnumConstant) {
    return list;
  }
 else {
    return null;
  }
}
