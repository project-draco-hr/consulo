{
  saveAll();
  if (!ProjectLevelVcsManager.getInstance(project).checkAllFilesAreUnder(vcs,affectedFiles)) {
    Messages.showErrorDialog(project,GitBundle.getString("tag.nonvcs.error.message"),GitBundle.getString("tag.nonvcs.error.title"));
    return;
  }
  final String tagName=Messages.showInputDialog(project,GitBundle.getString("tag.message"),GitBundle.getString("tag.title"),Messages.getQuestionIcon());
  if (tagName == null || tagName.length() == 0)   return;
  final Map<VirtualFile,List<VirtualFile>> roots=GitUtil.sortFilesByVcsRoot(project,affectedFiles);
  for (  VirtualFile root : roots.keySet()) {
    GitCommandRunnable cmdr=new GitCommandRunnable(project,vcs.getSettings(),root);
    cmdr.setCommand(GitCommand.TAG_CMD);
    cmdr.setArgs(new String[]{tagName});
    ProgressManager manager=ProgressManager.getInstance();
    manager.runProcessWithProgressSynchronously(cmdr,GitBundle.getString("tagging.title"),false,project);
    @SuppressWarnings({"ThrowableResultOfMethodCallIgnored"}) VcsException ex=cmdr.getException();
    if (ex != null) {
      GitUIUtil.showOperationError(project,ex,"git tag");
      break;
    }
  }
}
