{
  if (!(changeInfo instanceof JavaChangeInfo))   return true;
  for (  UsageInfo usageInfo : refUsages.get()) {
    if (usageInfo instanceof MethodCallUsageInfo) {
      MethodCallUsageInfo methodCallUsageInfo=(MethodCallUsageInfo)usageInfo;
      if (methodCallUsageInfo.isToChangeArguments()) {
        final PsiElement element=methodCallUsageInfo.getElement();
        if (element == null)         continue;
        final PsiMethod caller=RefactoringUtil.getEnclosingMethod(element);
        final boolean needDefaultValue=needDefaultValue(changeInfo,caller);
        if (needDefaultValue && (caller == null || !MethodSignatureUtil.isSuperMethod(methodCallUsageInfo.getReferencedMethod(),caller))) {
          final ParameterInfo[] parameters=changeInfo.getNewParameters();
          for (          ParameterInfo parameter : parameters) {
            final String defaultValue=parameter.getDefaultValue();
            if (defaultValue == null && parameter.getOldIndex() == -1) {
              ((ParameterInfoImpl)parameter).setDefaultValue("");
              if (!ApplicationManager.getApplication().isUnitTestMode()) {
                final PsiType type=((ParameterInfoImpl)parameter).getTypeWrapper().getType(element,element.getManager());
                final DefaultValueChooser chooser=new DefaultValueChooser(project,parameter.getName(),PsiTypesUtil.getDefaultValueOfType(type));
                chooser.show();
                if (chooser.isOK()) {
                  if (chooser.feelLucky()) {
                    parameter.setUseAnySingleVariable(true);
                  }
 else {
                    ((ParameterInfoImpl)parameter).setDefaultValue(chooser.getDefaultValue());
                  }
                }
 else {
                  return false;
                }
              }
            }
          }
        }
      }
    }
  }
  return true;
}
