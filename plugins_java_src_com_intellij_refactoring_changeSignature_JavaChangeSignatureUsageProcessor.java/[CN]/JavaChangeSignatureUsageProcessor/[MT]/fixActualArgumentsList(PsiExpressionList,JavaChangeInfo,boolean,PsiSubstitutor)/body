{
  final PsiElementFactory factory=JavaPsiFacade.getInstance(list.getProject()).getElementFactory();
  if (changeInfo.isParameterSetOrOrderChanged()) {
    if (changeInfo instanceof JavaChangeInfoImpl && ((JavaChangeInfoImpl)changeInfo).isPropagationEnabled) {
      final ParameterInfoImpl[] createdParmsInfo=((JavaChangeInfoImpl)changeInfo).getCreatedParmsInfoWithoutVarargs();
      for (      ParameterInfoImpl info : createdParmsInfo) {
        PsiExpression newArg;
        if (toInsertDefaultValue) {
          newArg=createDefaultValue(changeInfo,factory,info,list);
        }
 else {
          newArg=factory.createExpressionFromText(info.getName(),list);
        }
        JavaCodeStyleManager.getInstance(list.getProject()).shortenClassReferences(list.add(newArg));
      }
    }
 else {
      final PsiExpression[] args=list.getExpressions();
      final int nonVarargCount=getNonVarargCount(changeInfo,args);
      final int varargCount=args.length - nonVarargCount;
      if (varargCount < 0)       return;
      PsiExpression[] newVarargInitializers=null;
      final int newArgsLength;
      final int newNonVarargCount;
      final JavaParameterInfo[] newParms=changeInfo.getNewParameters();
      if (changeInfo.isArrayToVarargs()) {
        newNonVarargCount=newParms.length - 1;
        final JavaParameterInfo lastNewParm=newParms[newParms.length - 1];
        final PsiExpression arrayToConvert=args[lastNewParm.getOldIndex()];
        if (arrayToConvert instanceof PsiNewExpression) {
          final PsiNewExpression expression=(PsiNewExpression)arrayToConvert;
          final PsiArrayInitializerExpression arrayInitializer=expression.getArrayInitializer();
          if (arrayInitializer != null) {
            newVarargInitializers=arrayInitializer.getInitializers();
          }
        }
        newArgsLength=newVarargInitializers == null ? newParms.length : newNonVarargCount + newVarargInitializers.length;
      }
 else       if (changeInfo.isRetainsVarargs()) {
        newNonVarargCount=newParms.length - 1;
        newArgsLength=newNonVarargCount + varargCount;
      }
 else       if (changeInfo.isObtainsVarags()) {
        newNonVarargCount=newParms.length - 1;
        newArgsLength=newNonVarargCount;
      }
 else {
        newNonVarargCount=newParms.length;
        newArgsLength=newParms.length;
      }
      String[] oldVarargs=null;
      if (changeInfo.wasVararg() && !changeInfo.isRetainsVarargs()) {
        oldVarargs=new String[varargCount];
        for (int i=nonVarargCount; i < args.length; i++) {
          oldVarargs[i - nonVarargCount]=args[i].getText();
        }
      }
      final PsiExpression[] newArgs=new PsiExpression[newArgsLength];
      for (int i=0; i < newNonVarargCount; i++) {
        if (newParms[i].getOldIndex() == nonVarargCount && oldVarargs != null) {
          PsiType type=newParms[i].createType(changeInfo.getMethod(),list.getManager());
          if (type instanceof PsiArrayType) {
            type=substitutor.substitute(type);
            type=TypeConversionUtil.erasure(type);
            String typeText=type.getCanonicalText();
            if (type instanceof PsiEllipsisType) {
              typeText=typeText.replace("...","[]");
            }
            String text="new " + typeText + "{"+ StringUtil.join(oldVarargs,",")+ "}";
            newArgs[i]=factory.createExpressionFromText(text,changeInfo.getMethod());
            continue;
          }
        }
        newArgs[i]=createActualArgument(changeInfo,list,newParms[i],toInsertDefaultValue,args);
      }
      if (changeInfo.isArrayToVarargs()) {
        if (newVarargInitializers == null) {
          newArgs[newNonVarargCount]=createActualArgument(changeInfo,list,newParms[newNonVarargCount],toInsertDefaultValue,args);
        }
 else {
          System.arraycopy(newVarargInitializers,0,newArgs,newNonVarargCount,newVarargInitializers.length);
        }
      }
 else {
        final int newVarargCount=newArgsLength - newNonVarargCount;
        LOG.assertTrue(newVarargCount == 0 || newVarargCount == varargCount);
        for (int i=newNonVarargCount; i < newArgsLength; i++) {
          final int oldIndex=newParms[newNonVarargCount].getOldIndex();
          if (oldIndex >= 0 && oldIndex != nonVarargCount) {
            newArgs[i]=createActualArgument(changeInfo,list,newParms[newNonVarargCount],toInsertDefaultValue,args);
          }
 else {
            System.arraycopy(args,nonVarargCount,newArgs,newNonVarargCount,newVarargCount);
            break;
          }
        }
      }
      ChangeSignatureUtil.synchronizeList(list,Arrays.asList(newArgs),ExpressionList.INSTANCE,changeInfo.toRemoveParm());
    }
  }
}
