{
  int packed=0;
  boolean alreadyPublic=false;
  boolean alreadyStatic=false;
  boolean alreadyFinal=false;
  boolean alreadyAbstract=false;
  final LighterASTNode modListOwner=tree.getParent(modList);
  if (modListOwner != null && modListOwner.getTokenType() == parent.getStubType()) {
    final StubElement grandParent=parent.getParentStub();
    if (parent instanceof PsiClassStub) {
      if (grandParent instanceof PsiClassStub && ((PsiClassStub)grandParent).isInterface()) {
        alreadyPublic=true;
        alreadyStatic=true;
      }
      if (((PsiClassStub)parent).isInterface()) {
        alreadyAbstract=true;
        alreadyStatic=grandParent instanceof PsiClassStub;
      }
      if (((PsiClassStub)parent).isEnum()) {
        alreadyStatic=!(grandParent instanceof PsiFileStub);
        alreadyFinal=true;
        final List<LighterASTNode> enumConstants=LightTreeUtil.getChildrenOfType(tree,modListOwner,JavaElementType.ENUM_CONSTANT);
        for (        final LighterASTNode constant : enumConstants) {
          if (LightTreeUtil.firstChildOfType(tree,constant,JavaElementType.ENUM_CONSTANT_INITIALIZER) != null) {
            alreadyFinal=false;
            break;
          }
        }
        alreadyAbstract=false;
        final List<LighterASTNode> methods=LightTreeUtil.getChildrenOfType(tree,modListOwner,JavaElementType.METHOD);
        for (        final LighterASTNode method : methods) {
          final LighterASTNode mods=LightTreeUtil.requiredChildOfType(tree,method,JavaElementType.MODIFIER_LIST);
          if (LightTreeUtil.firstChildOfType(tree,mods,JavaTokenType.ABSTRACT_KEYWORD) != null) {
            alreadyAbstract=true;
            break;
          }
        }
      }
    }
 else     if (parent instanceof PsiMethodStub) {
      if (grandParent instanceof PsiClassStub && ((PsiClassStub)grandParent).isInterface()) {
        alreadyPublic=true;
        alreadyAbstract=!((PsiMethodStub)parent).isDefender();
      }
    }
 else     if (parent instanceof PsiFieldStub) {
      if (parent.getStubType() == JavaElementType.ENUM_CONSTANT) {
        alreadyPublic=true;
        alreadyStatic=true;
        alreadyFinal=true;
      }
 else       if (grandParent instanceof PsiClassStub && ((PsiClassStub)grandParent).isInterface()) {
        alreadyPublic=true;
        alreadyStatic=true;
        alreadyFinal=true;
      }
    }
  }
  for (  final LighterASTNode child : tree.getChildren(modList)) {
    final IElementType type=child.getTokenType();
    if (type == JavaTokenType.PUBLIC_KEYWORD) {
      alreadyPublic=true;
    }
 else     if (type == JavaTokenType.PRIVATE_KEYWORD) {
      packed|=ModifierFlags.PRIVATE_MASK;
    }
 else     if (type == JavaTokenType.PROTECTED_KEYWORD) {
      packed|=ModifierFlags.PROTECTED_MASK;
    }
 else     if (type == JavaTokenType.ABSTRACT_KEYWORD) {
      alreadyAbstract=true;
    }
 else     if (type == JavaTokenType.FINAL_KEYWORD) {
      alreadyFinal=true;
    }
 else     if (type == JavaTokenType.STATIC_KEYWORD) {
      alreadyStatic=true;
    }
 else     if (type == JavaTokenType.NATIVE_KEYWORD) {
      packed|=ModifierFlags.NATIVE_MASK;
    }
 else     if (type == JavaTokenType.SYNCHRONIZED_KEYWORD) {
      packed|=ModifierFlags.SYNCHRONIZED_MASK;
    }
 else     if (type == JavaTokenType.TRANSIENT_KEYWORD) {
      packed|=ModifierFlags.TRANSIENT_MASK;
    }
 else     if (type == JavaTokenType.VOLATILE_KEYWORD) {
      packed|=ModifierFlags.VOLATILE_MASK;
    }
 else     if (type == JavaTokenType.STRICTFP_KEYWORD) {
      packed|=ModifierFlags.STRICTFP_MASK;
    }
  }
  if (alreadyAbstract)   packed|=ModifierFlags.ABSTRACT_MASK;
  if (alreadyFinal)   packed|=ModifierFlags.FINAL_MASK;
  if (alreadyPublic)   packed|=ModifierFlags.PUBLIC_MASK;
  if (alreadyStatic)   packed|=ModifierFlags.STATIC_MASK;
  if ((packed & ModifierFlags.PRIVATE_MASK) == 0 && (packed & ModifierFlags.PROTECTED_MASK) == 0 && (packed & ModifierFlags.PUBLIC_MASK) == 0) {
    packed|=ModifierFlags.PACKAGE_LOCAL_MASK;
  }
  return packed;
}
