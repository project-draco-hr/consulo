{
  myLexer.start(fileText,0,fileText.length(),0);
  WordOccurrence occurrence=null;
  while (myLexer.getTokenType() != null) {
    final IElementType type=myLexer.getTokenType();
    if (type == GroovyTokenTypes.mIDENT || TokenSets.KEYWORD_PROPERTY_NAMES.contains(type)) {
      if (occurrence == null)       occurrence=new WordOccurrence(fileText,myLexer.getTokenStart(),myLexer.getTokenEnd(),WordOccurrence.Kind.CODE);
 else       occurrence.init(fileText,myLexer.getTokenStart(),myLexer.getTokenEnd(),WordOccurrence.Kind.CODE);
      if (!processor.process(occurrence))       return;
    }
 else     if (GroovyTokenTypes.COMMENT_SET.contains(type)) {
      if (!stripWords(processor,fileText,myLexer.getTokenStart(),myLexer.getTokenEnd(),WordOccurrence.Kind.COMMENTS,occurrence))       return;
    }
 else     if (GroovyTokenTypes.STRING_LITERAL_SET.contains(type)) {
      if (!stripWords(processor,fileText,myLexer.getTokenStart(),myLexer.getTokenEnd(),WordOccurrence.Kind.LITERALS,occurrence))       return;
      if (type == GroovyTokenTypes.mSTRING_LITERAL) {
        if (!stripWords(processor,fileText,myLexer.getTokenStart(),myLexer.getTokenEnd(),WordOccurrence.Kind.CODE,occurrence))         return;
      }
    }
    myLexer.advance();
  }
}
