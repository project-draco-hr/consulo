{
  myProject=project;
  myResolveHelper=new PsiResolveHelperImpl(PsiManager.getInstance(project));
  myJavadocManager=new JavadocManagerImpl();
  myNameHelper=new PsiNameHelperImpl(this);
  myConstantEvaluationHelper=new PsiConstantEvaluationHelperImpl();
  myElementFactory=new PsiElementFactoryImpl(psiManager);
  List<PsiElementFinder> elementFinders=new ArrayList<PsiElementFinder>();
  elementFinders.addAll(Arrays.asList(myProject.getComponents(PsiElementFinder.class)));
  elementFinders.add(new PsiElementFinderImpl());
  myElementFinders=elementFinders.toArray(new PsiElementFinder[elementFinders.size()]);
  myPackagePrefixIndex=new PackagePrefixIndex(myProject);
  boolean isProjectDefault=project.isDefault();
  if (!isProjectDefault) {
    myShortNamesCache=new PsiShortNamesCacheImpl((PsiManagerEx)PsiManager.getInstance(project));
  }
 else {
    myShortNamesCache=new EmptyShortNamesCacheImpl();
  }
  myFileManager=new JavaFileManagerImpl(psiManager,projectRootManagerEx,psiManager.getFileManager(),bus);
  myProgressManager=ProgressManager.getInstance();
  psiManager.registerRunnableToRunOnChange(new Runnable(){
    public void run(){
      myPackageCache.clear();
    }
  }
);
  PsiModificationTrackerImpl modificationTracker=(PsiModificationTrackerImpl)psiManager.getModificationTracker();
  psiManager.addTreeChangePreprocessor(new JavaCodeBlockModificationListener(modificationTracker));
  startupManager.registerStartupActivity(new Runnable(){
    public void run(){
      runStartupActivity();
    }
  }
);
  JavaChangeUtilSupport.setup();
  DummyHolderFactory.setFactory(new JavaDummyHolderFactory());
  HelperFactory.setFactory(new JavaHelperFactory());
  JavaElementType.ANNOTATION.getIndex();
  Disposer.register(project,this);
}
