{
  myProject=project;
  myLanguageLevel=projectRootManagerEx.getLanguageLevel();
  myResolveHelper=new PsiResolveHelperImpl(PsiManager.getInstance(project));
  myJavadocManager=new JavadocManagerImpl();
  myNameHelper=new PsiNameHelperImpl(this);
  myConstantEvaluationHelper=new PsiConstantEvaluationHelperImpl();
  PsiManagerEx psiManager=(PsiManagerEx)PsiManager.getInstance(project);
  myElementFactory=new PsiElementFactoryImpl(psiManager);
  List<PsiElementFinder> elementFinders=new ArrayList<PsiElementFinder>();
  elementFinders.addAll(Arrays.asList(myProject.getComponents(PsiElementFinder.class)));
  elementFinders.add(new PsiElementFinderImpl());
  myElementFinders=elementFinders.toArray(new PsiElementFinder[elementFinders.size()]);
  boolean isProjectDefault=project.isDefault();
  if (psiManagerConfiguration.REPOSITORY_ENABLED && !isProjectDefault) {
    myShortNamesCache=new PsiShortNamesCacheImpl((PsiManagerEx)PsiManager.getInstance(project),projectRootManagerEx);
  }
 else {
    myShortNamesCache=new EmptyRepository.PsiShortNamesCacheImpl();
  }
  myFileManager=new JavaFileManagerImpl(psiManager,projectRootManagerEx,psiManager.getFileManager(),bus);
  myProgressManager=ProgressManager.getInstance();
  psiManager.registerRunnableToRunOnChange(new Runnable(){
    public void run(){
      myPackageCache.clear();
    }
  }
);
  ((StartupManagerEx)startupManager).registerPreStartupActivity(new Runnable(){
    public void run(){
      if (!ApplicationManager.getApplication().isUnitTestMode()) {
        myLanguageLevel=projectRootManagerEx.getLanguageLevel();
      }
    }
  }
);
  startupManager.registerStartupActivity(new Runnable(){
    public void run(){
      runStartupActivity();
    }
  }
);
  Disposer.register(project,this);
}
