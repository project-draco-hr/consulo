{
  final GenericAttributeValue<String> e=(GenericAttributeValue<String>)genericDomValue;
  if (genericDomValue.getParent() instanceof RngDefine) {
    final XmlAttributeValue value=e.getXmlAttributeValue();
    if (value == null) {
      return PsiReference.EMPTY_ARRAY;
    }
    return new PsiReference[]{new PsiReferenceBase<XmlAttributeValue>(value,TextRange.from(1,value.getTextLength() - 2),true){
      public PsiElement resolve(){
        return myElement.getParent().getParent();
      }
      @NotNull public Object[] getVariants(){
        final RngInclude include=e.getParentOfType(RngInclude.class,true);
        final RngGrammar scope=e.getParentOfType(RngGrammar.class,true);
        if (scope != null && include != null && DomUtil.isAncestor(scope,include,true)) {
          final XmlFile file=include.getIncludedFile().getValue();
          if (file != null) {
            final DomFileElement<DomElement> fileElement=scope.getManager().getFileElement(file,DomElement.class);
            if (fileElement == null) {
              return EMPTY_ARRAY;
            }
            final Ref<Object[]> ref=new Ref<Object[]>(ArrayUtil.EMPTY_STRING_ARRAY);
            fileElement.acceptChildren(new RngDomVisitor(){
              @Override public void visit(              RngGrammar grammar){
                final Map<String,Set<Define>> map=DefinitionResolver.getAllVariants(grammar);
                if (map != null) {
                  ref.set(map.keySet().toArray());
                }
              }
            }
);
            return ref.get();
          }
        }
        return ArrayUtil.EMPTY_STRING_ARRAY;
      }
    }
};
  }
  return new PsiReference[]{new DefinitionReference(e)};
}
