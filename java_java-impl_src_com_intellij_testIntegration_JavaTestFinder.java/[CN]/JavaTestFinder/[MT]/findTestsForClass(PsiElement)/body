{
  PsiClass klass=findSourceElement(element);
  if (klass == null)   return Collections.emptySet();
  GlobalSearchScope scope;
  Module module=getModule(element);
  if (module != null) {
    scope=GlobalSearchScope.moduleWithDependentsScope(module);
  }
 else {
    scope=GlobalSearchScope.projectScope(element.getProject());
  }
  PsiShortNamesCache cache=JavaPsiFacade.getInstance(element.getProject()).getShortNamesCache();
  String klassName=klass.getName();
  Pattern pattern=Pattern.compile(".*" + klassName + ".*");
  List<Pair<? extends PsiNamedElement,Integer>> classesWithProximities=new ArrayList<Pair<? extends PsiNamedElement,Integer>>();
  HashSet<String> names=new HashSet<String>();
  cache.getAllClassNames(names);
  for (  String eachName : names) {
    if (pattern.matcher(eachName).matches()) {
      for (      PsiClass eachClass : cache.getClassesByName(eachName,scope)) {
        if (TestUtil.isTestClass(eachClass)) {
          classesWithProximities.add(new Pair<PsiClass,Integer>(eachClass,TestFinderHelper.calcTestNameProximity(klassName,eachName)));
        }
      }
    }
  }
  return TestFinderHelper.getSortedElements(classesWithProximities,true);
}
