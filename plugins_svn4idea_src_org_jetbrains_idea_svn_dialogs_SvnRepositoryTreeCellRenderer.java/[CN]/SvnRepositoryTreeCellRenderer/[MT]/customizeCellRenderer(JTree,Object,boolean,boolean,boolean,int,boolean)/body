{
  setIcon(null);
  if (value instanceof RepositoryTreeNode) {
    RepositoryTreeNode node=(RepositoryTreeNode)value;
    if (node.getSVNDirEntry() == null) {
      append(node.getURL().toString(),SimpleTextAttributes.REGULAR_ATTRIBUTES);
      setDirectoryIcon(expanded);
    }
 else {
      String name=node.getSVNDirEntry().getName();
      append(name,node.isCached() ? SimpleTextAttributes.GRAY_ITALIC_ATTRIBUTES : SimpleTextAttributes.REGULAR_ATTRIBUTES);
      if (myIsShowDetails) {
        SVNDirEntry entry=node.getSVNDirEntry();
        append(" " + entry.getRevision(),SimpleTextAttributes.GRAY_ATTRIBUTES);
        if (entry.getAuthor() != null) {
          append(" " + entry.getAuthor(),SimpleTextAttributes.GRAYED_BOLD_ATTRIBUTES);
        }
        if (entry.getDate() != null) {
          append(" " + entry.getDate().toString(),SimpleTextAttributes.GRAY_ATTRIBUTES);
        }
      }
      if (node.getSVNDirEntry().getKind() == SVNNodeKind.FILE) {
        setIcon(FileTypeManager.getInstance().getFileTypeByFileName(name).getIcon());
      }
 else {
        setDirectoryIcon(expanded);
      }
    }
  }
 else   if (value instanceof DefaultMutableTreeNode) {
    DefaultMutableTreeNode node=(DefaultMutableTreeNode)value;
    if (node.getUserObject() instanceof String) {
      append(CommonBundle.getLoadingTreeNodeText(),SimpleTextAttributes.REGULAR_ATTRIBUTES);
    }
 else     if (node.getUserObject() instanceof SVNErrorMessage) {
      append(node.getUserObject().toString(),SimpleTextAttributes.ERROR_ATTRIBUTES);
    }
  }
}
