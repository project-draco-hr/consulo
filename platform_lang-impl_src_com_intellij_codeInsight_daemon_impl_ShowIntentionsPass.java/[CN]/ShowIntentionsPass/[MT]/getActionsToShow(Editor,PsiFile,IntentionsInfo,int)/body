{
  final PsiElement psiElement=hostFile.findElementAt(hostEditor.getCaretModel().getOffset());
  LOG.assertTrue(psiElement == null || psiElement.isValid(),psiElement);
  int offset=hostEditor.getCaretModel().getOffset();
  Project project=hostFile.getProject();
  for (  final IntentionAction action : IntentionManager.getInstance().getAvailableIntentionActions()) {
    Pair<PsiFile,Editor> place=ShowIntentionActionsHandler.chooseBetweenHostAndInjected(hostFile,hostEditor,new PairProcessor<PsiFile,Editor>(){
      public boolean process(      PsiFile psiFile,      Editor editor){
        return ShowIntentionActionsHandler.availableFor(psiFile,editor,action);
      }
    }
);
    if (place != null) {
      List<IntentionAction> enableDisableIntentionAction=new ArrayList<IntentionAction>();
      enableDisableIntentionAction.add(new IntentionHintComponent.EnableDisableIntentionAction(action));
      intentions.intentionsToShow.add(new HighlightInfo.IntentionActionDescriptor(action,enableDisableIntentionAction,null));
    }
  }
  List<HighlightInfo.IntentionActionDescriptor> actions=QuickFixAction.getAvailableActions(hostEditor,hostFile,passIdToShowIntentionsFor);
  final DaemonCodeAnalyzer codeAnalyzer=DaemonCodeAnalyzer.getInstance(project);
  final Document document=hostEditor.getDocument();
  HighlightInfo infoAtCursor=((DaemonCodeAnalyzerImpl)codeAnalyzer).findHighlightByOffset(document,offset,true);
  if (infoAtCursor == null || infoAtCursor.getSeverity() == HighlightSeverity.ERROR) {
    intentions.errorFixesToShow.addAll(actions);
  }
 else {
    intentions.inspectionFixesToShow.addAll(actions);
  }
  final int line=document.getLineNumber(offset);
  DaemonCodeAnalyzerImpl.processHighlights(document,project,null,document.getLineStartOffset(line),document.getLineEndOffset(line),new Processor<HighlightInfo>(){
    public boolean process(    HighlightInfo info){
      final GutterIconRenderer renderer=info.getGutterIconRenderer();
      if (renderer == null) {
        return true;
      }
      final AnAction action=renderer.getClickAction();
      if (action == null) {
        return true;
      }
      final String text=renderer.getTooltipText();
      if (text == null) {
        return true;
      }
      final IntentionAction actionAdapter=new AbstractIntentionAction(){
        public void invoke(        @NotNull Project project,        Editor editor,        PsiFile file) throws IncorrectOperationException {
          final RelativePoint relativePoint=JBPopupFactory.getInstance().guessBestPopupLocation(editor);
          action.actionPerformed(new AnActionEvent(relativePoint.toMouseEvent(),DataManager.getInstance().getDataContext(),text,new Presentation(),ActionManager.getInstance(),0));
        }
        @NotNull public String getText(){
          return text;
        }
      }
;
      intentions.guttersToShow.add(new HighlightInfo.IntentionActionDescriptor(actionAdapter,Collections.<IntentionAction>emptyList(),text,renderer.getIcon()));
      return true;
    }
  }
);
}
