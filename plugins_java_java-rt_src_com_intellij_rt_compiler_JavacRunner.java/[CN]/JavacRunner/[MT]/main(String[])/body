{
  if (!JavacResourcesReader.dumpPatterns()) {
    return;
  }
  final String versionString=args[0];
  final Class aClass=Class.forName(args[1]);
  final Method mainMethod=aClass.getMethod("main",new Class[]{String[].class});
  String[] newArgs;
  if (versionString.indexOf("1.1") > -1) {
    final Vector arguments=new Vector();
    boolean isClasspath=false;
    for (int idx=3; idx < args.length; idx++) {
      final String arg=args[idx];
      if (arg.startsWith("@") && !isClasspath) {
        String path=arg.substring(1);
        addFilesToCompile(arguments,path);
      }
 else {
        isClasspath="-classpath".equals(arg) || "-cp".equals(arg) || "-bootclasspath".equals(arg);
        arguments.addElement(arg);
      }
    }
    newArgs=new String[arguments.size()];
    for (int idx=0; idx < newArgs.length; idx++) {
      newArgs[idx]=(String)arguments.elementAt(idx);
    }
  }
 else {
    newArgs=new String[args.length - 2];
    System.arraycopy(args,2,newArgs,0,newArgs.length);
  }
  expandClasspath(newArgs);
  try {
    mainMethod.invoke(null,new Object[]{newArgs});
  }
 catch (  Throwable e) {
    System.err.print(e.getMessage());
    e.printStackTrace(System.err);
  }
}
