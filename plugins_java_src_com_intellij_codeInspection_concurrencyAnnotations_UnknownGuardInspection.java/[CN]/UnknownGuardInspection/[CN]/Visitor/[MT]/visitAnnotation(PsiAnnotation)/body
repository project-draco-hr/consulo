{
  super.visitAnnotation(annotation);
  if (!JCiPUtil.isGuardedByAnnotation(annotation)) {
    return;
  }
  final String guardValue=JCiPUtil.getGuardValue(annotation);
  if (guardValue == null || "this".equals(guardValue) || "itself".equals(guardValue)) {
    return;
  }
  final PsiClass containingClass=PsiTreeUtil.getParentOfType(annotation,PsiClass.class);
  if (containingClass == null) {
    return;
  }
  if (containsFieldOrMethod(containingClass,guardValue))   return;
  final Project project=containingClass.getProject();
  final JavaPsiFacade facade=JavaPsiFacade.getInstance(project);
  if (guardValue.endsWith(".class") && facade.findClass(StringUtil.getPackageName(guardValue),GlobalSearchScope.allScope(project)) != null) {
    return;
  }
  final String classFQName=StringUtil.getPackageName(guardValue);
  final PsiClass gClass=facade.findClass(classFQName,GlobalSearchScope.allScope(project));
  if (gClass != null) {
    final String fieldName=StringUtil.getShortName(guardValue);
    if (gClass.findFieldByName(fieldName,true) != null) {
      return;
    }
    if (fieldName.equals("this")) {
      return;
    }
  }
  final int thisIdx=guardValue.indexOf("this");
  if (thisIdx > -1 && thisIdx + 1 < guardValue.length()) {
    final PsiClass lockClass;
    if (thisIdx == 0) {
      lockClass=containingClass;
    }
 else {
      final String fqn=guardValue.substring(0,thisIdx - 1);
      lockClass=facade.findClass(fqn,GlobalSearchScope.allScope(project));
    }
    if (lockClass != null) {
      final String fieldName=guardValue.substring(thisIdx + "this".length() + 1);
      if (containsFieldOrMethod(lockClass,fieldName)) {
        return;
      }
    }
  }
  final PsiAnnotationMemberValue member=annotation.findAttributeValue("value");
  if (member == null) {
    return;
  }
  myHolder.registerProblem(member,"Unknown @GuardedBy field #ref #loc");
}
