{
  final int offset=editor.getCaretModel().getOffset();
  final PsiElement element=file.findElementAt(offset);
  final PsiMethod method=PsiTreeUtil.getParentOfType(element,PsiMethod.class);
  if (method == null) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("locate.caret.inside.a.method"));
    showErrorMessage(message,project,editor);
    return;
  }
  if (method.isConstructor()) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("replace.with.method.call.does.not.work.for.constructors"));
    showErrorMessage(message,project,editor);
  }
  final PsiCodeBlock body=method.getBody();
  if (body == null) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("method.does.not.have.a.body",method.getName()));
    showErrorMessage(message,project,editor);
    return;
  }
  final PsiStatement[] statements=body.getStatements();
  if (statements.length == 0) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("method.has.an.empty.body",method.getName()));
    showErrorMessage(message,project,editor);
    return;
  }
  final AnalysisScope scope=new AnalysisScope(file);
  final Module module=ModuleUtil.findModuleForPsiElement(file);
  final BaseAnalysisActionDialog dlg=new BaseAnalysisActionDialog(RefactoringBundle.message("replace.method.duplicates.scope.chooser.title",REFACTORING_NAME),RefactoringBundle.message("replace.method.duplicates.scope.chooser.message"),project,scope,module != null ? module.getName() : null,false,AnalysisUIOptions.getInstance(project),element);
  dlg.show();
  if (dlg.isOK()) {
    ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
      public void run(){
        ProgressManager.getInstance().getProgressIndicator().setIndeterminate(true);
        invokeOnScope(project,method,dlg.getScope(AnalysisUIOptions.getInstance(project),scope,project,module));
      }
    }
,"Locate method duplicates",true,project);
  }
}
