{
  final int offset=editor.getCaretModel().getOffset();
  final PsiElement element=file.findElementAt(offset);
  final PsiMember member=PsiTreeUtil.getParentOfType(element,PsiMember.class);
  final String cannotRefactorMessage=getCannotRefactorMessage(member);
  if (cannotRefactorMessage != null) {
    String message=RefactoringBundle.getCannotRefactorMessage(cannotRefactorMessage);
    showErrorMessage(message,project,editor);
    return;
  }
  final AnalysisScope scope=new AnalysisScope(file);
  final Module module=ModuleUtil.findModuleForPsiElement(file);
  final BaseAnalysisActionDialog dlg=new BaseAnalysisActionDialog(RefactoringBundle.message("replace.method.duplicates.scope.chooser.title",REFACTORING_NAME),RefactoringBundle.message("replace.method.duplicates.scope.chooser.message"),project,scope,module != null ? module.getName() : null,false,AnalysisUIOptions.getInstance(project),element);
  dlg.show();
  if (dlg.isOK()) {
    ProgressManager.getInstance().run(new Task.Backgroundable(project,"Locate duplicates",true){
      @Override public void run(      @NotNull ProgressIndicator indicator){
        indicator.setIndeterminate(true);
        invokeOnScope(project,member,dlg.getScope(AnalysisUIOptions.getInstance(project),scope,project,module));
      }
    }
);
  }
}
