{
  final PsiCodeBlock body=method.getBody();
  LOG.assertTrue(body != null);
  final PsiStatement[] statements=body.getStatements();
  PsiElement[] pattern=statements;
  ReturnValue matchedReturnValue=null;
  if (statements.length != 1 || !(statements[0] instanceof PsiReturnStatement)) {
    final PsiStatement lastStatement=statements.length > 0 ? statements[statements.length - 1] : null;
    if (lastStatement instanceof PsiReturnStatement) {
      final PsiExpression returnValue=((PsiReturnStatement)lastStatement).getReturnValue();
      if (returnValue instanceof PsiReferenceExpression) {
        final PsiElement resolved=((PsiReferenceExpression)returnValue).resolve();
        if (resolved instanceof PsiVariable) {
          pattern=new PsiElement[statements.length - 1];
          System.arraycopy(statements,0,pattern,0,statements.length - 1);
          matchedReturnValue=new VariableReturnValue((PsiVariable)resolved);
        }
      }
    }
  }
 else {
    final PsiExpression returnValue=((PsiReturnStatement)statements[0]).getReturnValue();
    if (returnValue != null) {
      pattern=new PsiElement[]{returnValue};
    }
  }
  if (pattern.length == 0) {
    return Collections.emptyList();
  }
  final DuplicatesFinder duplicatesFinder=new DuplicatesFinder(pattern,new InputVariables(Arrays.asList(method.getParameterList().getParameters()),method.getProject(),new LocalSearchScope(pattern),false),matchedReturnValue,new ArrayList<PsiVariable>());
  return duplicatesFinder.findDuplicates(file);
}
