{
  LocalHistoryAction a=LocalHistory.getInstance().startAction(REFACTORING_NAME);
  try {
    final ProgressIndicator progressIndicator=ProgressManager.getInstance().getProgressIndicator();
    if (progressIndicator != null && progressIndicator.isCanceled())     return;
    final Runnable replaceRunnable=new Runnable(){
      @Override public void run(){
        for (        final PsiMember member : methods) {
          final List<Match> matches=duplicates.get(member);
          if (matches == null)           continue;
          final int duplicatesNo=matches.size();
          WindowManager.getInstance().getStatusBar(project).setInfo(getStatusMessage(duplicatesNo));
          CommandProcessor.getInstance().executeCommand(project,new Runnable(){
            @Override public void run(){
              PostprocessReformattingAspect.getInstance(project).postponeFormattingInside(new Runnable(){
                @Override public void run(){
                  final MatchProvider matchProvider=member instanceof PsiMethod ? new MethodDuplicatesMatchProvider((PsiMethod)member,matches) : new ConstantMatchProvider(member,project,matches);
                  DuplicatesImpl.invoke(project,matchProvider);
                }
              }
);
            }
          }
,REFACTORING_NAME,REFACTORING_NAME);
          WindowManager.getInstance().getStatusBar(project).setInfo("");
        }
      }
    }
;
    ApplicationManager.getApplication().invokeLater(replaceRunnable,ModalityState.NON_MODAL);
  }
  finally {
    a.finish();
  }
}
