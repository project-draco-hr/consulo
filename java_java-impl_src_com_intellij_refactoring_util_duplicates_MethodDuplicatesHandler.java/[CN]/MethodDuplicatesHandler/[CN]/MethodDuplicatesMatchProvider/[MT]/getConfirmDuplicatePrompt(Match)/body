{
  final PsiElement matchStart=match.getMatchStart();
  @Modifier String visibility=VisibilityUtil.getPossibleVisibility(myMethod,matchStart);
  final boolean shouldBeStatic=isEssentialStaticContextAbsent(match);
  final String signature=match.getChangedSignature(myMethod,myMethod.hasModifierProperty(PsiModifier.STATIC) || shouldBeStatic,visibility);
  if (signature != null) {
    return RefactoringBundle.message("replace.this.code.fragment.and.change.signature",signature);
  }
  final boolean needToEscalateVisibility=!PsiUtil.isAccessible(myMethod,matchStart,null);
  if (needToEscalateVisibility) {
    final String visibilityPresentation=VisibilityUtil.toPresentableText(visibility);
    return shouldBeStatic ? RefactoringBundle.message("replace.this.code.fragment.and.make.method.static.visible",visibilityPresentation) : RefactoringBundle.message("replace.this.code.fragment.and.make.method.visible",visibilityPresentation);
  }
  if (shouldBeStatic) {
    return RefactoringBundle.message("replace.this.code.fragment.and.make.method.static");
  }
  return RefactoringBundle.message("replace.this.code.fragment");
}
