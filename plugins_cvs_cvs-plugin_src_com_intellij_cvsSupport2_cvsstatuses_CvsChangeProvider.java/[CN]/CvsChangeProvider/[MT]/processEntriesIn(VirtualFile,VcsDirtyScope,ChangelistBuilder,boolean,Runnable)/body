{
  final FilePath path=VcsContextFactory.SERVICE.getInstance().createFilePathOn(dir);
  if (!scope.belongsTo(path)) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Skipping out of scope path " + path);
    }
    return;
  }
  final DirectoryContent dirContent=getDirectoryContent(dir,checkCanceled);
  for (  VirtualFile file : dirContent.getUnknownFiles()) {
    builder.processUnversionedFile(file);
  }
  for (  VirtualFile file : dirContent.getIgnoredFiles()) {
    builder.processIgnoredFile(file);
  }
  for (  Entry entry : dirContent.getDeletedDirectories()) {
    builder.processLocallyDeletedFile(VcsUtil.getFilePath(CvsVfsUtil.getFileFor(dir,entry.getFileName()),true));
  }
  for (  Entry entry : dirContent.getDeletedFiles()) {
    builder.processLocallyDeletedFile(VcsUtil.getFilePath(CvsVfsUtil.getFileFor(dir,entry.getFileName()),false));
  }
  checkSwitchedDir(dir,builder,scope);
  if (CvsUtil.fileIsUnderCvs(dir) && dir.getChildren().length == 1 && dirContent.getDeletedFiles().isEmpty() && hasRemovedFiles(dirContent.getFiles())) {
    builder.processChange(new Change(CurrentContentRevision.create(path),CurrentContentRevision.create(path),FileStatus.DELETED),CvsVcs2.getKey());
  }
  for (  VirtualFileEntry fileEntry : dirContent.getFiles()) {
    processFile(dir,fileEntry.getVirtualFile(),fileEntry.getEntry(),builder,checkCanceled);
  }
  if (recursively) {
    final VirtualFile[] children=CvsVfsUtil.getChildrenOf(dir);
    if (children != null) {
      for (      VirtualFile file : children) {
        if (file.isDirectory()) {
          final boolean isIgnored=myFileIndex.isIgnored(file);
          if (!isIgnored) {
            processEntriesIn(file,scope,builder,true,checkCanceled);
          }
 else {
            if (LOG.isDebugEnabled()) {
              LOG.debug("Skipping ignored path " + file.getPath());
            }
          }
        }
      }
    }
  }
}
