{
  final Element items=new Element("Items");
  final Element classes=new Element("Classes");
  entry.getChildren().add(items);
  entry.getChildren().add(classes);
  for (  AttributeGroup item : myItemOrderAttributeList) {
    item.writeExternal(items);
  }
  for (  AttributeGroup attributes : myClassOrderAttributeList) {
    attributes.writeExternal(classes);
  }
  final Element gsd=new Element("DefaultGetterSetterDefinition");
  entry.getChildren().add(gsd);
  myDefaultGSDefinition.writeExternal(gsd);
  final Element relatedItems=new Element("RelatedMethods");
  entry.getChildren().add(relatedItems);
  entry.setAttribute("KeepGettersSettersTogether",Boolean.valueOf(myKeepGettersSettersTogether).toString());
  entry.setAttribute("KeepGettersSettersWithProperty",Boolean.valueOf(myKeepGettersSettersWithProperty).toString());
  entry.setAttribute("KeepOverloadedMethodsTogether",Boolean.valueOf(myKeepOverloadedMethodsTogether).toString());
  entry.setAttribute("ConfirmBeforeRearranging",Boolean.valueOf(myAskBeforeRearranging).toString());
  entry.setAttribute("RearrangeInnerClasses",Boolean.valueOf(myRearrangeInnerClasses).toString());
  entry.setAttribute("globalCommentPattern",myGlobalCommentPattern);
  entry.setAttribute("overloadedOrder","" + myOverloadedOrder);
  entry.setAttribute("ShowParameterTypes",Boolean.valueOf(myShowParameterTypes).toString());
  entry.setAttribute("ShowParameterNames",Boolean.valueOf(myShowParameterNames).toString());
  entry.setAttribute("ShowFields",Boolean.valueOf(myShowFields).toString());
  entry.setAttribute("ShowTypeAfterMethod",Boolean.valueOf(myShowTypeAfterMethod).toString());
  entry.setAttribute("ShowRules",Boolean.valueOf(myShowRules).toString());
  entry.setAttribute("ShowMatchedRules",Boolean.valueOf(myShowMatchedRules).toString());
  entry.setAttribute("ShowComments",Boolean.valueOf(myShowComments).toString());
  entry.setAttribute("RemoveBlanksInsideCodeBlocks",Boolean.valueOf(myRemoveBlanksInsideCodeBlocks).toString());
  myRelatedMethodsSettings.writeExternal(relatedItems);
  myAfterClassLBrace.writeExternal(entry);
  myAfterClassRBrace.writeExternal(entry);
  myBeforeClassRBrace.writeExternal(entry);
  beforeMethodLBrace.writeExternal(entry);
  myAfterMethodLBrace.writeExternal(entry);
  myAfterMethodRBrace.writeExternal(entry);
  myBeforeMethodRBrace.writeExternal(entry);
  myNewLinesAtEOF.writeExternal(entry);
}
