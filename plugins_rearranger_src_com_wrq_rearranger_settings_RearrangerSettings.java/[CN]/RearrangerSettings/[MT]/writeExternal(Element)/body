{
  final Element items=new Element("Items");
  final Element classes=new Element("Classes");
  entry.getChildren().add(items);
  entry.getChildren().add(classes);
  for (  AttributeGroup item : itemOrderAttributeList) {
    item.writeExternal(items);
  }
  for (  AttributeGroup attributes : classOrderAttributeList) {
    attributes.writeExternal(classes);
  }
  final Element gsd=new Element("DefaultGetterSetterDefinition");
  entry.getChildren().add(gsd);
  defaultGSDefinition.writeExternal(gsd);
  final Element relatedItems=new Element("RelatedMethods");
  entry.getChildren().add(relatedItems);
  entry.setAttribute("KeepGettersSettersTogether",Boolean.valueOf(keepGettersSettersTogether).toString());
  entry.setAttribute("KeepGettersSettersWithProperty",Boolean.valueOf(keepGettersSettersWithProperty).toString());
  entry.setAttribute("KeepOverloadedMethodsTogether",Boolean.valueOf(keepOverloadedMethodsTogether).toString());
  entry.setAttribute("ConfirmBeforeRearranging",Boolean.valueOf(askBeforeRearranging).toString());
  entry.setAttribute("RearrangeInnerClasses",Boolean.valueOf(rearrangeInnerClasses).toString());
  entry.setAttribute("globalCommentPattern",globalCommentPattern);
  entry.setAttribute("overloadedOrder","" + overloadedOrder);
  entry.setAttribute("ShowParameterTypes",Boolean.valueOf(showParameterTypes).toString());
  entry.setAttribute("ShowParameterNames",Boolean.valueOf(showParameterNames).toString());
  entry.setAttribute("ShowFields",Boolean.valueOf(showFields).toString());
  entry.setAttribute("ShowTypeAfterMethod",Boolean.valueOf(showTypeAfterMethod).toString());
  entry.setAttribute("ShowRules",Boolean.valueOf(showRules).toString());
  entry.setAttribute("ShowMatchedRules",Boolean.valueOf(showMatchedRules).toString());
  entry.setAttribute("ShowComments",Boolean.valueOf(showComments).toString());
  entry.setAttribute("RemoveBlanksInsideCodeBlocks",Boolean.valueOf(removeBlanksInsideCodeBlocks).toString());
  relatedMethodsSettings.writeExternal(relatedItems);
  afterClassLBrace.writeExternal(entry);
  afterClassRBrace.writeExternal(entry);
  beforeClassRBrace.writeExternal(entry);
  beforeMethodLBrace.writeExternal(entry);
  afterMethodLBrace.writeExternal(entry);
  afterMethodRBrace.writeExternal(entry);
  beforeMethodRBrace.writeExternal(entry);
  newlinesAtEOF.writeExternal(entry);
}
