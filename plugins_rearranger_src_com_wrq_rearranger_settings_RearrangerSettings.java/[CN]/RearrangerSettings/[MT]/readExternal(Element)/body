{
  final Element items=entry.getChild("Items");
  final Element classes=entry.getChild("Classes");
  final List itemList=items.getChildren();
  final List classList=classes.getChildren();
  ListIterator li;
  li=itemList.listIterator();
  while (li.hasNext()) {
    Element element=(Element)li.next();
    myItemOrderAttributeList.add(ItemAttributes.readExternal(element));
  }
  li=classList.listIterator();
  while (li.hasNext()) {
    Element element=(Element)li.next();
    myClassOrderAttributeList.add(ClassAttributes.readExternal(element));
  }
  final Element gsd=entry.getChild("DefaultGetterSetterDefinition");
  myDefaultGSDefinition=GetterSetterDefinition.readExternal(gsd);
  final Element relatedItems=entry.getChild("RelatedMethods");
  myRelatedMethodsSettings=RelatedMethodsSettings.readExternal(relatedItems);
  myKeepGettersSettersTogether=getBooleanAttribute(entry,"KeepGettersSettersTogether",true);
  myKeepGettersSettersWithProperty=getBooleanAttribute(entry,"KeepGettersSettersWithProperty",false);
  myKeepOverloadedMethodsTogether=getBooleanAttribute(entry,"KeepOverloadedMethodsTogether",true);
  final Attribute attr=getAttribute(entry,"globalCommentPattern");
  myAskBeforeRearranging=getBooleanAttribute(entry,"ConfirmBeforeRearranging",false);
  myRearrangeInnerClasses=getBooleanAttribute(entry,"RearrangeInnerClasses",false);
  myGlobalCommentPattern=(attr == null ? "" : attr.getValue());
  myOverloadedOrder=getIntAttribute(entry,"overloadedOrder",OVERLOADED_ORDER_RETAIN_ORIGINAL);
  myShowParameterTypes=getBooleanAttribute(entry,"ShowParameterTypes",true);
  myShowParameterNames=getBooleanAttribute(entry,"ShowParameterNames",true);
  myShowFields=getBooleanAttribute(entry,"ShowFields",true);
  myShowRules=getBooleanAttribute(entry,"ShowRules",false);
  myShowMatchedRules=getBooleanAttribute(entry,"ShowMatchedRules",false);
  myShowComments=getBooleanAttribute(entry,"ShowComments",false);
  myShowTypeAfterMethod=getBooleanAttribute(entry,"ShowTypeAfterMethod",true);
  myRemoveBlanksInsideCodeBlocks=getBooleanAttribute(entry,"RemoveBlanksInsideCodeBlocks",false);
  myAfterClassLBrace=ForceBlankLineSetting.readExternal(entry,false,true,ForceBlankLineSetting.CLASS_OBJECT,"AfterClassLBrace");
  myAfterClassRBrace=ForceBlankLineSetting.readExternal(entry,false,false,ForceBlankLineSetting.CLASS_OBJECT,"AfterClassRBrace");
  myBeforeClassRBrace=ForceBlankLineSetting.readExternal(entry,true,false,ForceBlankLineSetting.CLASS_OBJECT,"BeforeClassRBrace");
  beforeMethodLBrace=ForceBlankLineSetting.readExternal(entry,true,true,ForceBlankLineSetting.METHOD_OBJECT,"BeforeMethodLBrace");
  myAfterMethodLBrace=ForceBlankLineSetting.readExternal(entry,false,true,ForceBlankLineSetting.METHOD_OBJECT,"AfterMethodLBrace");
  myAfterMethodRBrace=ForceBlankLineSetting.readExternal(entry,false,false,ForceBlankLineSetting.METHOD_OBJECT,"AfterMethodRBrace");
  myBeforeMethodRBrace=ForceBlankLineSetting.readExternal(entry,true,false,ForceBlankLineSetting.METHOD_OBJECT,"BeforeMethodRBrace");
  myNewLinesAtEOF=ForceBlankLineSetting.readExternal(entry,false,false,ForceBlankLineSetting.EOF_OBJECT,"NewlinesAtEOF");
}
