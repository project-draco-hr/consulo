{
  final Element items=entry.getChild("Items");
  final Element classes=entry.getChild("Classes");
  final List itemList=items.getChildren();
  final List classList=classes.getChildren();
  ListIterator li;
  li=itemList.listIterator();
  while (li.hasNext()) {
    Element element=(Element)li.next();
    itemOrderAttributeList.add(((com.wrq.rearranger.settings.attributeGroups.AttributeGroup)ItemAttributes.readExternal(element)));
  }
  li=classList.listIterator();
  while (li.hasNext()) {
    Element element=(Element)li.next();
    classOrderAttributeList.add(((com.wrq.rearranger.settings.attributeGroups.AttributeGroup)ClassAttributes.readExternal(element)));
  }
  final Element gsd=entry.getChild("DefaultGetterSetterDefinition");
  defaultGSDefinition=GetterSetterDefinition.readExternal(gsd);
  final Element relatedItems=entry.getChild("RelatedMethods");
  relatedMethodsSettings=RelatedMethodsSettings.readExternal(relatedItems);
  keepGettersSettersTogether=getBooleanAttribute(entry,"KeepGettersSettersTogether",true);
  keepGettersSettersWithProperty=getBooleanAttribute(entry,"KeepGettersSettersWithProperty",false);
  keepOverloadedMethodsTogether=getBooleanAttribute(entry,"KeepOverloadedMethodsTogether",true);
  final Attribute attr=RearrangerSettings.getAttribute(entry,"globalCommentPattern");
  askBeforeRearranging=getBooleanAttribute(entry,"ConfirmBeforeRearranging",false);
  rearrangeInnerClasses=getBooleanAttribute(entry,"RearrangeInnerClasses",false);
  globalCommentPattern=(attr == null ? "" : ((java.lang.String)attr.getValue()));
  overloadedOrder=getIntAttribute(entry,"overloadedOrder",OVERLOADED_ORDER_RETAIN_ORIGINAL);
  showParameterTypes=getBooleanAttribute(entry,"ShowParameterTypes",true);
  showParameterNames=getBooleanAttribute(entry,"ShowParameterNames",true);
  showFields=getBooleanAttribute(entry,"ShowFields",true);
  showRules=getBooleanAttribute(entry,"ShowRules",false);
  showMatchedRules=getBooleanAttribute(entry,"ShowMatchedRules",false);
  showComments=getBooleanAttribute(entry,"ShowComments",false);
  showTypeAfterMethod=getBooleanAttribute(entry,"ShowTypeAfterMethod",true);
  removeBlanksInsideCodeBlocks=getBooleanAttribute(entry,"RemoveBlanksInsideCodeBlocks",false);
  afterClassLBrace=ForceBlankLineSetting.readExternal(entry,false,true,ForceBlankLineSetting.CLASS_OBJECT,"AfterClassLBrace");
  afterClassRBrace=ForceBlankLineSetting.readExternal(entry,false,false,ForceBlankLineSetting.CLASS_OBJECT,"AfterClassRBrace");
  beforeClassRBrace=ForceBlankLineSetting.readExternal(entry,true,false,ForceBlankLineSetting.CLASS_OBJECT,"BeforeClassRBrace");
  beforeMethodLBrace=ForceBlankLineSetting.readExternal(entry,true,true,ForceBlankLineSetting.METHOD_OBJECT,"BeforeMethodLBrace");
  afterMethodLBrace=ForceBlankLineSetting.readExternal(entry,false,true,ForceBlankLineSetting.METHOD_OBJECT,"AfterMethodLBrace");
  afterMethodRBrace=ForceBlankLineSetting.readExternal(entry,false,false,ForceBlankLineSetting.METHOD_OBJECT,"AfterMethodRBrace");
  beforeMethodRBrace=ForceBlankLineSetting.readExternal(entry,true,false,ForceBlankLineSetting.METHOD_OBJECT,"BeforeMethodRBrace");
  newlinesAtEOF=ForceBlankLineSetting.readExternal(entry,false,false,ForceBlankLineSetting.EOF_OBJECT,"NewlinesAtEOF");
}
