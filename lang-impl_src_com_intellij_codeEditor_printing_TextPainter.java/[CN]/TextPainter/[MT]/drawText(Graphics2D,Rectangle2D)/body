{
  float lineHeight=getLineHeight(g);
  HighlighterIterator hIterator=myHighlighter.createIterator(myOffset);
  if (hIterator.atEnd())   return;
  LineIterator lIterator=myDocument.createLineIterator();
  lIterator.start(myOffset);
  if (lIterator.atEnd())   return;
  TextAttributes attributes=hIterator.getTextAttributes();
  Color currentColor=attributes.getForegroundColor();
  Color backColor=attributes.getBackgroundColor();
  Color underscoredColor=attributes.getEffectColor();
  Font currentFont=getFont(attributes.getFontType());
  setForegroundColor(g,currentColor);
  setFont(g,currentFont);
  g.translate(clip.getX(),0);
  Point2D position=new Point2D.Double(0,clip.getY());
  double lineY=position.getY();
  while (myCurrentMethodSeparator < myMethodSeparators.length) {
    LineMarkerInfo marker=myMethodSeparators[myCurrentMethodSeparator];
    if (marker != null && marker.startOffset >= lIterator.getEnd())     break;
    myCurrentMethodSeparator++;
  }
  while (!hIterator.atEnd() && !lIterator.atEnd()) {
    int hEnd=hIterator.getEnd();
    int lEnd=lIterator.getEnd();
    int lStart=lIterator.getStart();
    if (hEnd >= lEnd) {
      if (!drawString(g,lEnd - lIterator.getSeparatorLength(),lEnd - lStart,position,clip,backColor,underscoredColor)) {
        drawLineNumber(g,0,lineY);
        break;
      }
      drawLineNumber(g,0,lineY);
      lIterator.advance();
      myLineNumber++;
      if (myCurrentMethodSeparator < myMethodSeparators.length) {
        LineMarkerInfo marker=myMethodSeparators[myCurrentMethodSeparator];
        if (marker != null && marker.startOffset < lEnd) {
          Color save=g.getColor();
          setForegroundColor(g,marker.separatorColor);
          UIUtil.drawLine(g,0,(int)lineY,(int)clip.getWidth(),(int)lineY);
          setForegroundColor(g,save);
          myCurrentMethodSeparator++;
        }
      }
      position.setLocation(0,position.getY() + lineHeight);
      lineY=position.getY();
      myOffset=lEnd;
      if (position.getY() > clip.getY() + clip.getHeight() - lineHeight) {
        break;
      }
    }
 else {
      if (hEnd > lEnd - lIterator.getSeparatorLength()) {
        if (!drawString(g,lEnd - lIterator.getSeparatorLength(),lEnd - lStart,position,clip,backColor,underscoredColor)) {
          drawLineNumber(g,0,lineY);
          break;
        }
      }
 else {
        if (!drawString(g,hEnd,lEnd - lStart,position,clip,backColor,underscoredColor)) {
          drawLineNumber(g,0,lineY);
          break;
        }
      }
      hIterator.advance();
      attributes=hIterator.getTextAttributes();
      Color color=attributes.getForegroundColor();
      if (color == null) {
        color=Color.black;
      }
      if (color != currentColor) {
        setForegroundColor(g,color);
        currentColor=color;
      }
      backColor=attributes.getBackgroundColor();
      underscoredColor=attributes.getEffectColor();
      Font font=getFont(attributes.getFontType());
      if (font != currentFont) {
        setFont(g,font);
        currentFont=font;
      }
      myOffset=hEnd;
    }
  }
  g.translate(-clip.getX(),0);
}
