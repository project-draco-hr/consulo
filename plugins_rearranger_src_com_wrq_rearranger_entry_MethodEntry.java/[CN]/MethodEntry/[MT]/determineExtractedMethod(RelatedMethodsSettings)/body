{
  myRelatedMethod=false;
  if (!isGetter() && !isSetter()) {
    if (myCalledByMethods.size() > 0) {
      PsiMethod m=(PsiMethod)myEnd;
      if (!m.getModifierList().hasModifierProperty(PsiModifier.PRIVATE)) {
switch (settings.getNonPrivateTreatment()) {
case RelatedMethodsSettings.NON_PRIVATE_EXTRACTED_NEVER:
          break;
case RelatedMethodsSettings.NON_PRIVATE_EXTRACTED_ONE_CALLER:
        if (myCalledByMethods.size() == 1) {
          myRelatedMethod=true;
        }
      break;
case RelatedMethodsSettings.NON_PRIVATE_EXTRACTED_ANY_CALLERS:
    myRelatedMethod=true;
  break;
}
}
 else {
myRelatedMethod=true;
}
}
}
 else {
if (isSetter() && myCalledByMethods.size() > 0 && myCorrespondingGetterSetters.size() == 0) {
myRelatedMethod=true;
LOG.debug(myEnd.toString() + " is setter but has no getter, treated as extracted method");
}
 else {
LOG.debug(myEnd.toString() + " is getter/setter, not treated as extracted method");
}
}
LOG.debug("determined " + myEnd.toString() + " is extracted method? "+ myRelatedMethod);
if (!myRelatedMethod) {
ListIterator<MethodEntry> li=myCalledByMethods.listIterator();
while (li.hasNext()) {
MethodEntry entry=(li.next());
entry.myCalledMethods.remove(this);
li.remove();
}
}
if (myCalledByMethods.size() > 1) {
ListIterator<MethodEntry> li;
if (settings.isBelowFirstCaller()) {
li=myCalledByMethods.listIterator(1);
while (li.hasNext()) {
MethodEntry entry=(li.next());
entry.myCalledMethods.remove(this);
li.remove();
}
}
 else {
li=myCalledByMethods.listIterator(myCalledByMethods.size() - 1);
while (li.hasPrevious()) {
MethodEntry entry=(li.previous());
entry.myCalledMethods.remove(this);
li.remove();
}
}
}
if (myRelatedMethod) {
LOG.debug("extracted method " + toString() + " will be arranged under "+ myCalledByMethods.get(0).toString());
}
}
