{
  relatedMethod=false;
  if (!isGetter() && !isSetter()) {
    if (calledByMethods.size() > 0) {
      PsiMethod m=(PsiMethod)end;
      if (!m.getModifierList().hasModifierProperty(PsiModifier.PRIVATE)) {
switch (settings.getNonPrivateTreatment()) {
case RelatedMethodsSettings.NON_PRIVATE_EXTRACTED_NEVER:
          break;
case RelatedMethodsSettings.NON_PRIVATE_EXTRACTED_ONE_CALLER:
        if (calledByMethods.size() == 1) {
          relatedMethod=true;
        }
      break;
case RelatedMethodsSettings.NON_PRIVATE_EXTRACTED_ANY_CALLERS:
    relatedMethod=true;
  break;
}
}
 else {
relatedMethod=true;
}
}
}
 else {
if (isSetter() && calledByMethods.size() > 0 && correspondingGetterSetters.size() == 0) {
relatedMethod=true;
LOG.debug(end.toString() + " is setter but has no getter, treated as extracted method");
}
 else {
LOG.debug(end.toString() + " is getter/setter, not treated as extracted method");
}
}
LOG.debug("determined " + end.toString() + " is extracted method? "+ relatedMethod);
if (!relatedMethod) {
ListIterator<MethodEntry> li=calledByMethods.listIterator();
while (li.hasNext()) {
MethodEntry entry=(li.next());
entry.calledMethods.remove(this);
li.remove();
}
}
if (calledByMethods.size() > 1) {
ListIterator<MethodEntry> li;
if (settings.isBelowFirstCaller()) {
li=calledByMethods.listIterator(1);
while (li.hasNext()) {
MethodEntry entry=(li.next());
entry.calledMethods.remove(this);
li.remove();
}
}
 else {
li=calledByMethods.listIterator(calledByMethods.size() - 1);
while (li.hasPrevious()) {
MethodEntry entry=(li.previous());
entry.calledMethods.remove(this);
li.remove();
}
}
}
if (relatedMethod) {
LOG.debug("extracted method " + toString() + " will be arranged under "+ calledByMethods.get(0).toString());
}
}
