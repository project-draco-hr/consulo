{
  final PsiMethod thisMethod=(PsiMethod)myEnd;
  final MethodEntry thisMethodEntry=this;
  JavaRecursiveElementVisitor rev=new JavaRecursiveElementVisitor(){
    public void visitMethodCallExpression(    PsiMethodCallExpression psiMethodCallExpression){
      PsiElement c=psiMethodCallExpression.getMethodExpression().getReference().resolve();
      if (c != null && !myCalledMethods.contains(c)) {
        for (        ClassContentsEntry o : possibleMethods) {
          if (o instanceof RelatableEntry) {
            MethodEntry me=(MethodEntry)o;
            PsiMethod m=(PsiMethod)me.myEnd;
            if (c == m) {
              if (settings.isKeepOverloadedMethodsTogether() && m.getName().equals(thisMethod.getName())) {
                LOG.debug("method " + me + " is overload, not inserted in call graph");
              }
 else {
                LOG.debug("method " + thisMethod.toString() + " calls "+ m.toString());
                myCalledMethods.add(me);
                me.myCalledByMethods.add(thisMethodEntry);
              }
              break;
            }
          }
        }
      }
      super.visitExpressionList(psiMethodCallExpression.getArgumentList());
    }
  }
;
  thisMethod.accept(rev);
}
