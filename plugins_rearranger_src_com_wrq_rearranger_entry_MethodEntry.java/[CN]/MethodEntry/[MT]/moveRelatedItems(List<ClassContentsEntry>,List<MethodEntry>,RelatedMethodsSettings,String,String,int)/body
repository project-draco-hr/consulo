{
  allMethodNames=buildAllMethodNamesString(allMethodNames,parents);
  List<MethodEntry> children=((MethodEntry)parents.get(parents.size() - 1)).sortedMethods;
switch (rms.getOrdering()) {
case RelatedMethodsSettings.RETAIN_ORIGINAL_ORDER:
{
      ListIterator li=entries.listIterator();
      while (li.hasNext()) {
        Object o=li.next();
        if (o instanceof IRelatableEntry) {
          MethodEntry me=(MethodEntry)o;
          for (          MethodEntry entry : parents) {
            if (me.calledByMethods.contains(entry)) {
              children.add(me);
              li.remove();
              break;
            }
          }
        }
      }
    }
  break;
case RelatedMethodsSettings.ALPHABETICAL_ORDER:
{
  ListIterator li=entries.listIterator();
  while (li.hasNext()) {
    Object o=li.next();
    if (o instanceof IRelatableEntry) {
      MethodEntry me=(MethodEntry)o;
      for (      MethodEntry entry : parents) {
        if (me.calledByMethods.contains(entry)) {
          me.insertAlphabetically(children);
          li.remove();
          break;
        }
      }
    }
  }
}
break;
case RelatedMethodsSettings.INVOCATION_ORDER:
for (MethodEntry me : parents) {
for (MethodEntry child : me.calledMethods) {
if (entries.contains(child)) {
  children.add(child);
  entries.remove(child);
}
}
}
break;
}
if (children.size() > 0) {
if (rms.isDepthFirstOrdering()) {
for (MethodEntry entry : children) {
if (entry.calledMethods.size() == 0) {
continue;
}
List<MethodEntry> parent=new LinkedList<MethodEntry>();
parent.add(entry);
moveRelatedItems(entries,parent,rms,topLevelMethodName,allMethodNames + "." + ((PsiMethod)entry.end).getName()+ "()",level + 1);
}
}
 else {
moveRelatedItems(entries,children,rms,topLevelMethodName,allMethodNames + ".Depth " + level,level + 1);
}
}
}
