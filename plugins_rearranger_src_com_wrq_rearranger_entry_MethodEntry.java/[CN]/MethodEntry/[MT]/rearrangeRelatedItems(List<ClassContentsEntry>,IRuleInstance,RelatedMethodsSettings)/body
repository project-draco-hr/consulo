{
  List<RangeEntry> parentEntries=new ArrayList<RangeEntry>(ruleInstance.getMatches());
  for (  RangeEntry o : parentEntries) {
    if (o instanceof IRelatableEntry) {
      MethodEntry me=(MethodEntry)o;
      if (me.isGetter()) {
        if (me.keptWithProperty) {
          if (me.getMatchedRule() != null && me.getMatchedRule().getMatches() != null) {
            me.getMatchedRule().getMatches().remove(me);
          }
        }
        for (        MethodEntry theSetter : me.correspondingGetterSetters) {
          final IRuleInstance theRule=theSetter.getMatchedRule();
          LOG.debug("rearrangeRelatedItems: for getter method " + me + ", corresponding setter is "+ theSetter);
          if (theRule != null && theRule.getMatches() != null) {
            LOG.debug("remove entry " + theSetter.end + " from matched rule"+ theRule+ "; matches = "+ ((java.util.List)theRule.getMatches()) == null ? "null" : "");
            theRule.getMatches().remove(theSetter);
          }
        }
      }
      if (me.calledMethods.size() > 0) {
        List<MethodEntry> parents=new LinkedList<MethodEntry>();
        parents.add(me);
        moveRelatedItems(entries,parents,rms,((PsiMethod)me.end).getName(),((PsiMethod)me.end).getName() + "()",1);
        if (LOG.isDebugEnabled()) {
          me.dumpChild(0);
        }
        me.assignComments(rms);
      }
    }
  }
}
