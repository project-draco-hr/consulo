{
  if (VirtualFile.PROP_NAME.equals(event.getPropertyName())) {
    final VirtualFile eventFile=event.getFile();
    final VirtualFile parent=event.getParent();
    if (parent != null) {
      final String oldName=(String)event.getOldValue();
      final String root=parent.getPath() + "/" + oldName;
      final Set<File> toMark=new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY);
      if (eventFile.isDirectory()) {
        VfsUtilCore.visitChildrenRecursively(eventFile,new VirtualFileVisitor(){
          private StringBuilder filePath=new StringBuilder(root);
          @Override public boolean visitFile(          @NotNull VirtualFile child){
            if (child.isDirectory()) {
              if (child != eventFile) {
                filePath.append("/").append(child.getName());
              }
            }
 else {
              String childPath=filePath.toString();
              if (child != eventFile) {
                childPath+="/" + child.getName();
              }
              toMark.add(new File(childPath));
            }
            return true;
          }
          @Override public void afterChildrenVisited(          @NotNull VirtualFile file){
            if (file.isDirectory() && file != eventFile) {
              filePath.delete(filePath.length() - file.getName().length() - 1,filePath.length());
            }
          }
        }
);
      }
 else {
        toMark.add(new File(root));
      }
      notifyFilesDeleted(toMark);
    }
    markDirtyIfSource(eventFile,false);
  }
}
