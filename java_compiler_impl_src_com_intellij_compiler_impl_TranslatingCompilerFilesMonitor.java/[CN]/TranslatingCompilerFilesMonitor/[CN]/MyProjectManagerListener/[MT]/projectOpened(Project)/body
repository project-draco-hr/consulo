{
  final MessageBusConnection conn=project.getMessageBus().connect();
  myConnections.put(project,conn);
  final ProjectRef projRef=new ProjectRef(project);
  conn.subscribe(ProjectTopics.PROJECT_ROOTS,new ModuleRootListener(){
    private VirtualFile[] myRootsBefore;
    public void beforeRootsChange(    final ModuleRootEvent event){
      try {
        myRootsBefore=ProjectRootManager.getInstance(projRef.get()).getContentSourceRoots();
      }
 catch (      ProjectRef.ProjectClosedException e) {
        myRootsBefore=null;
      }
    }
    public void rootsChanged(    final ModuleRootEvent event){
      try {
        try {
          final VirtualFile[] rootsAfter=ProjectRootManager.getInstance(projRef.get()).getContentSourceRoots();
{
            final Set<VirtualFile> newRoots=new HashSet<VirtualFile>();
            ContainerUtil.addAll(newRoots,rootsAfter);
            if (myRootsBefore != null) {
              newRoots.removeAll(Arrays.asList(myRootsBefore));
            }
            scanSourceContent(projRef,newRoots,newRoots.size(),true);
          }
{
            final Set<VirtualFile> oldRoots=new HashSet<VirtualFile>();
            if (myRootsBefore != null) {
              ContainerUtil.addAll(oldRoots,myRootsBefore);
            }
            if (!oldRoots.isEmpty()) {
              oldRoots.removeAll(Arrays.asList(rootsAfter));
            }
            scanSourceContent(projRef,oldRoots,oldRoots.size(),false);
          }
        }
  finally {
          myRootsBefore=null;
        }
        markOldOutputRoots(projRef,buildOutputRootsLayout(projRef));
      }
 catch (      ProjectRef.ProjectClosedException e) {
        LOG.info(e);
      }
    }
  }
);
  scanSourcesForCompilableFiles(project);
}
