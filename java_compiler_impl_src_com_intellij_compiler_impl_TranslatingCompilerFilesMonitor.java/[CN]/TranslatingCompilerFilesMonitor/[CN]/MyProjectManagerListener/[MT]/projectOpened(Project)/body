{
  final MessageBusConnection conn=project.getMessageBus().connect();
  myConnections.put(project,conn);
  conn.subscribe(ProjectTopics.PROJECT_ROOTS,new ModuleRootListener(){
    private VirtualFile[] myRootsBefore;
    public void beforeRootsChange(    final ModuleRootEvent event){
      myRootsBefore=ProjectRootManager.getInstance(project).getContentSourceRoots();
    }
    public void rootsChanged(    final ModuleRootEvent event){
      final VirtualFile[] rootsAfter=ProjectRootManager.getInstance(project).getContentSourceRoots();
{
        final Set<VirtualFile> newRoots=new HashSet<VirtualFile>();
        newRoots.addAll(Arrays.asList(rootsAfter));
        if (myRootsBefore != null) {
          newRoots.removeAll(Arrays.asList(myRootsBefore));
        }
        scanSourceContent(project,newRoots,newRoots.size(),true);
      }
{
        final Set<VirtualFile> oldRoots=new HashSet<VirtualFile>();
        if (myRootsBefore != null) {
          oldRoots.addAll(Arrays.asList(myRootsBefore));
        }
        if (!oldRoots.isEmpty()) {
          oldRoots.removeAll(Arrays.asList(rootsAfter));
        }
        scanSourceContent(project,oldRoots,oldRoots.size(),false);
      }
      myRootsBefore=null;
      markOldOutputRoots(project,buildOutputRootsLayout(project));
    }
  }
);
  myInitializationInProgress.down();
  StartupManager.getInstance(project).registerPostStartupActivity(new Runnable(){
    public void run(){
      new Task.Backgroundable(project,CompilerBundle.message("compiler.initial.scanning.progress.text"),false){
        public void run(        @NotNull final ProgressIndicator indicator){
          try {
            final IntermediateOutputCompiler[] compilers=CompilerManager.getInstance(project).getCompilers(IntermediateOutputCompiler.class);
            final Set<VirtualFile> intermediateRoots=new HashSet<VirtualFile>();
            if (compilers.length > 0) {
              final Module[] modules=ModuleManager.getInstance(project).getModules();
              for (              IntermediateOutputCompiler compiler : compilers) {
                for (                Module module : modules) {
                  final VirtualFile outputRoot=LocalFileSystem.getInstance().refreshAndFindFileByPath(CompilerPaths.getGenerationOutputPath(compiler,module,false));
                  if (outputRoot != null) {
                    intermediateRoots.add(outputRoot);
                  }
                  final VirtualFile testsOutputRoot=LocalFileSystem.getInstance().refreshAndFindFileByPath(CompilerPaths.getGenerationOutputPath(compiler,module,true));
                  if (testsOutputRoot != null) {
                    intermediateRoots.add(testsOutputRoot);
                  }
                }
              }
            }
            final List<VirtualFile> projectRoots=Arrays.asList(ProjectRootManager.getInstance(project).getContentSourceRoots());
            final int totalRootsCount=projectRoots.size() + intermediateRoots.size();
            scanSourceContent(project,projectRoots,totalRootsCount,true);
            if (!intermediateRoots.isEmpty()) {
              final int projectId=getProjectId(project);
              final FileProcessor processor=new FileProcessor(){
                public void execute(                final VirtualFile file){
                  if (!isMarkedForRecompilation(projectId,getFileId(file))) {
                    final SourceFileInfo srcInfo=loadSourceInfo(file);
                    if (srcInfo == null || srcInfo.getTimestamp(projectId) != file.getTimeStamp()) {
                      addSourceForRecompilation(projectId,file,srcInfo);
                    }
                  }
                }
              }
;
              int processed=projectRoots.size();
              for (              VirtualFile root : intermediateRoots) {
                indicator.setText2(root.getPresentableUrl());
                indicator.setFraction(++processed / (double)totalRootsCount);
                processRecursively(root,false,processor);
              }
            }
            markOldOutputRoots(project,buildOutputRootsLayout(project));
          }
  finally {
            myInitializationInProgress.up();
          }
        }
      }
.queue();
    }
  }
);
}
