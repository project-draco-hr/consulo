{
  if (roots.isEmpty()) {
    return;
  }
  final int projectId=getProjectId(projRef.get());
  if (LOG.isDebugEnabled()) {
    LOG.debug("Scanning source content for project projectId=" + projectId + "; url="+ projRef.get().getPresentableUrl());
  }
  final ProjectFileIndex fileIndex=ProjectRootManager.getInstance(projRef.get()).getFileIndex();
  final ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
  int processed=0;
  for (  VirtualFile srcRoot : roots) {
    if (indicator != null) {
      projRef.get();
      indicator.setText2(srcRoot.getPresentableUrl());
      indicator.setFraction(++processed / (double)totalRootCount);
    }
    if (isNewRoots) {
      fileIndex.iterateContentUnderDirectory(srcRoot,new ContentIterator(){
        public boolean processFile(        final VirtualFile file){
          if (!file.isDirectory()) {
            if (!isMarkedForRecompilation(projectId,Math.abs(getFileId(file)))) {
              final SourceFileInfo srcInfo=loadSourceInfo(file);
              if (srcInfo == null || srcInfo.getTimestamp(projectId) != file.getTimeStamp()) {
                addSourceForRecompilation(projectId,file,srcInfo);
              }
            }
          }
 else {
            projRef.get();
          }
          return true;
        }
      }
);
    }
 else {
      final FileTypeManager fileTypeManager=FileTypeManager.getInstance();
      new Object(){
        void processFile(        VirtualFile file){
          if (fileTypeManager.isFileIgnored(file)) {
            return;
          }
          final int fileId=getFileId(file);
          if (fileId > 0) {
            if (file.isDirectory()) {
              projRef.get();
              for (              VirtualFile child : file.getChildren()) {
                processFile(child);
              }
            }
 else {
              if (!isMarkedForRecompilation(projectId,fileId)) {
                final SourceFileInfo srcInfo=loadSourceInfo(file);
                if (srcInfo != null) {
                  addSourceForRecompilation(projectId,file,srcInfo);
                }
              }
            }
          }
        }
      }
.processFile(srcRoot);
    }
  }
}
