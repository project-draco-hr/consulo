{
  final File file=new File(CompilerPaths.getCompilerSystemDirectory(),PATHS_TO_DELETE_FILENAME);
  try {
    final DataInputStream is=new DataInputStream(new BufferedInputStream(new FileInputStream(file)));
    try {
      final int projectsCount=is.readInt();
synchronized (myDataLock) {
        for (int idx=0; idx < projectsCount; idx++) {
          final int projectId=is.readInt();
          final int size=is.readInt();
          if (size > 0) {
            final Map<String,SourceUrlClassNamePair> map=new HashMap<String,SourceUrlClassNamePair>();
            myOutputsToDelete.put(projectId,map);
            for (int i=0; i < size; i++) {
              final String outputPath=FileUtil.toSystemIndependentName(CompilerIOUtil.readString(is));
              final String srcUrl=CompilerIOUtil.readString(is);
              final String className=CompilerIOUtil.readString(is);
              if (LOG.isDebugEnabled() || ourDebugMode) {
                final String message="INIT path to delete: " + outputPath;
                LOG.debug(message);
                if (ourDebugMode) {
                  System.out.println(message);
                }
              }
              map.put(outputPath,new SourceUrlClassNamePair(srcUrl,className));
            }
          }
        }
      }
    }
  finally {
      is.close();
    }
  }
 catch (  FileNotFoundException ignored) {
  }
catch (  IOException e) {
    LOG.info(e);
synchronized (myDataLock) {
      myOutputsToDelete.clear();
    }
    FileUtil.delete(file);
  }
  ensureOutputStorageInitialized();
}
