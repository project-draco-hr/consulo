{
  final List<String> data=TestUtils.readInput(getTestDataPath() + getTestName(true) + ".test");
  String fileText=data.get(0);
  myFixture.configureByText(GroovyFileType.GROOVY_FILE_TYPE,fileText);
  final Editor editor=myFixture.getEditor();
  final PsiFile file=myFixture.getFile();
  setIndentationToNode(file.getNode());
  int startOffset=editor.getSelectionModel().getSelectionStart();
  int endOffset=editor.getSelectionModel().getSelectionEnd();
  editor.getCaretModel().moveToOffset(endOffset);
  GroovyPsiElement selectedArea=GroovyRefactoringUtil.findElementInRange(((GroovyFileBase)file),startOffset,endOffset,GrReferenceExpression.class);
  if (selectedArea == null) {
    PsiElement identifier=GroovyRefactoringUtil.findElementInRange(((GroovyFileBase)file),startOffset,endOffset,PsiElement.class);
    if (identifier != null) {
      Assert.assertTrue("Selected area doesn't point to var",identifier.getParent() instanceof GrVariable);
      selectedArea=(GroovyPsiElement)identifier.getParent();
    }
  }
  Assert.assertNotNull("Selected area reference points to nothing",selectedArea);
  PsiElement element=selectedArea instanceof GrExpression ? selectedArea.getReference().resolve() : selectedArea;
  Assert.assertNotNull("Cannot resolve selected reference expression",element);
  try {
    if (!inlineDef) {
      performInline(getProject(),editor);
    }
 else {
      performDefInline(getProject(),editor);
    }
    editor.getSelectionModel().removeSelection();
    myFixture.checkResult(data.get(1),true);
  }
 catch (  CommonRefactoringUtil.RefactoringErrorHintException e) {
    assertEquals(data.get(1),"FAIL: " + e.getMessage());
  }
}
