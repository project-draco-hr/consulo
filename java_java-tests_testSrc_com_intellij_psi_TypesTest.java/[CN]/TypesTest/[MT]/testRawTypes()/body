{
  final JavaPsiFacade psiManager=getJavaFacade();
  final PsiElementFactory factory=psiManager.getElementFactory();
  final PsiClass classA=psiManager.findClass("A");
  assertTrue(classA != null);
  final PsiMethod method=classA.getMethods()[0];
  final PsiStatement[] methodStatements=method.getBody().getStatements();
  final PsiDeclarationStatement declarationStatement=((PsiDeclarationStatement)methodStatements[0]);
  final PsiVariable varList=((PsiVariable)declarationStatement.getDeclaredElements()[0]);
  final PsiType typeFromText=factory.createTypeFromText("test.List",null);
  assertEquals(varList.getType(),typeFromText);
  final PsiReferenceExpression methodExpression=((PsiMethodCallExpression)((PsiExpressionStatement)methodStatements[1]).getExpression()).getMethodExpression();
  final JavaResolveResult resolveResult=methodExpression.advancedResolve(false);
  assertTrue(resolveResult.getElement() instanceof PsiMethod);
  final PsiMethod methodFromList=((PsiMethod)resolveResult.getElement());
  final PsiType typeOfFirstParameterOfAdd=methodFromList.getParameterList().getParameters()[0].getType();
  final PsiType substitutedType=resolveResult.getSubstitutor().substitute(typeOfFirstParameterOfAdd);
  assertEquals(PsiType.getJavaLangObject(getPsiManager(),method.getResolveScope()),substitutedType);
  final PsiType methodCallType=((PsiExpressionStatement)methodStatements[2]).getExpression().getType();
  final PsiType rawIteratorType=factory.createTypeFromText("test.Iterator",null);
  assertTrue(rawIteratorType.equals(methodCallType));
}
