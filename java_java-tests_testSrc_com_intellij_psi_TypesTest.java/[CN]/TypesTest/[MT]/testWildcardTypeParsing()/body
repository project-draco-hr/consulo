{
  final GlobalSearchScope scope=GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(myModule);
  final PsiClassType javaLangObject=PsiType.getJavaLangObject(myPsiManager,scope);
  PsiElement element=((PsiDeclarationStatement)myJavaFacade.getElementFactory().createStatementFromText("X<? extends Y, ? super Z<A,B>, ?> x;",null)).getDeclaredElements()[0];
  PsiJavaCodeReferenceElement referenceElement=((PsiVariable)element).getTypeElement().getInnermostComponentReferenceElement();
  PsiType[] typeArguments=referenceElement.getTypeParameters();
  assertEquals(3,typeArguments.length);
  assertTrue(typeArguments[0] instanceof PsiWildcardType);
  assertTrue(typeArguments[1] instanceof PsiWildcardType);
  assertTrue(typeArguments[2] instanceof PsiWildcardType);
  PsiWildcardType extendsWildcard=(PsiWildcardType)typeArguments[0];
  PsiWildcardType superWildcard=(PsiWildcardType)typeArguments[1];
  PsiWildcardType unboundedWildcard=(PsiWildcardType)typeArguments[2];
  assertTrue(extendsWildcard.isExtends());
  assertFalse(extendsWildcard.isSuper());
  assertEquals("Y",extendsWildcard.getBound().getCanonicalText());
  assertEquals("Y",extendsWildcard.getExtendsBound().getCanonicalText());
  assertTrue(extendsWildcard.getSuperBound().equals(PsiType.NULL));
  assertFalse(superWildcard.isExtends());
  assertTrue(superWildcard.isSuper());
  assertEquals("Z<A,B>",superWildcard.getBound().getCanonicalText());
  assertTrue(superWildcard.getExtendsBound().equals(javaLangObject));
  assertEquals("Z<A,B>",superWildcard.getSuperBound().getCanonicalText());
  assertFalse(unboundedWildcard.isExtends());
  assertFalse(unboundedWildcard.isSuper());
  assertTrue(unboundedWildcard.getBound() == null);
  assertTrue(unboundedWildcard.getExtendsBound().equals(javaLangObject));
  assertTrue(unboundedWildcard.getSuperBound().equals(PsiType.NULL));
}
