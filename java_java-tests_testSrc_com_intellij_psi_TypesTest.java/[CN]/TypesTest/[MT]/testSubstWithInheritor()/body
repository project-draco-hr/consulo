{
  final JavaPsiFacade psiManager=getJavaFacade();
  final PsiElementFactory factory=psiManager.getElementFactory();
  final PsiClass classA=psiManager.findClass("A");
  assertNotNull(classA);
  final PsiMethod method=classA.getMethods()[0];
  final PsiStatement[] methodStatements=method.getBody().getStatements();
  final PsiDeclarationStatement declarationStatement=(PsiDeclarationStatement)methodStatements[0];
  final PsiVariable varList=(PsiVariable)declarationStatement.getDeclaredElements()[0];
  final PsiType typeFromText=factory.createTypeFromText("test.IntList",null);
  assertEquals(varList.getType(),typeFromText);
  final PsiReferenceExpression methodExpression=((PsiMethodCallExpression)((PsiExpressionStatement)methodStatements[1]).getExpression()).getMethodExpression();
  final JavaResolveResult resolveResult=methodExpression.advancedResolve(false);
  assertTrue(resolveResult.getElement() instanceof PsiMethod);
  final PsiMethod methodFromList=(PsiMethod)resolveResult.getElement();
  final PsiType typeOfFirstParameterOfAdd=methodFromList.getParameterList().getParameters()[0].getType();
  final PsiType substitutedType=resolveResult.getSubstitutor().substitute(typeOfFirstParameterOfAdd);
  final PsiType javaLangInteger=factory.createTypeFromText("java.lang.Integer",null);
  assertEquals(javaLangInteger,substitutedType);
  final PsiType intListIteratorReturnType=((PsiExpressionStatement)methodStatements[2]).getExpression().getType();
  final PsiType integerIteratorType=factory.createTypeFromText("test.Iterator<java.lang.Integer>",null);
  assertEquals(integerIteratorType,intListIteratorReturnType);
  final PsiType objectIteratorType=factory.createTypeFromText("test.Iterator<java.lang.Object>",null);
  assertFalse(objectIteratorType.equals(integerIteratorType));
}
