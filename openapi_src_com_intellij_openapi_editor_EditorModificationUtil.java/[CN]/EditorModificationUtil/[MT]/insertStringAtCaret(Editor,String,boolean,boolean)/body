{
  final SelectionModel selectionModel=editor.getSelectionModel();
  if (selectionModel.hasSelection()) {
    editor.getCaretModel().moveToOffset(selectionModel.getSelectionStart());
  }
  int oldOffset=editor.getCaretModel().getOffset();
  int afterLineEnd=calcAfterLineEnd(editor);
  if (afterLineEnd > 0) {
    StringBuffer buf=new StringBuffer();
    for (int i=0; i < afterLineEnd; i++) {
      buf.append(' ');
    }
    buf.append(s);
    s=buf.toString();
  }
  if (editor.isInsertMode() || !toProcessOverwriteMode) {
    if (selectionModel.hasSelection()) {
      editor.getDocument().replaceString(selectionModel.getSelectionStart(),selectionModel.getSelectionEnd(),s);
    }
 else {
      editor.getDocument().insertString(oldOffset,s);
    }
  }
 else {
    deleteSelectedText(editor);
    Document document=editor.getDocument();
    int lineNumber=editor.getCaretModel().getLogicalPosition().line;
    if (lineNumber >= document.getLineCount()) {
      return insertStringAtCaret(editor,s,false,toMoveCaret);
    }
    int endOffset=document.getLineEndOffset(lineNumber);
    document.replaceString(oldOffset,Math.min(endOffset,oldOffset + s.length()),s);
  }
  int offset=oldOffset + s.length();
  if (toMoveCaret) {
    editor.getCaretModel().moveToOffset(offset);
    editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
    selectionModel.removeSelection();
  }
  return offset;
}
