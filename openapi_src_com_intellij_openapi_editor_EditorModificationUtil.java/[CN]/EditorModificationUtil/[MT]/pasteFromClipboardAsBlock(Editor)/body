{
  Transferable content=getClipboardContent(editor);
  if (content != null) {
    try {
      int selectedLinesCount=0;
      final SelectionModel selectionModel=editor.getSelectionModel();
      if (selectionModel.hasBlockSelection()) {
        final LogicalPosition start=selectionModel.getBlockStart();
        final LogicalPosition end=selectionModel.getBlockEnd();
        LogicalPosition caret=new LogicalPosition(Math.min(start.line,end.line),Math.min(start.column,end.column));
        selectedLinesCount=Math.abs(end.line - start.line);
        deleteSelectedText(editor);
        editor.getCaretModel().moveToLogicalPosition(caret);
      }
      LogicalPosition caretToRestore=editor.getCaretModel().getLogicalPosition();
      String s=(String)content.getTransferData(DataFlavor.stringFlavor);
      s=StringUtil.convertLineSeparators(s,"\n");
      String[] lines=LineTokenizer.tokenize(s.toCharArray(),false);
      if (lines.length > 1 || selectedLinesCount <= 1) {
        for (int i=0; i < lines.length; i++) {
          insertStringAtCaret(editor,lines[i],false,false);
          editor.getCaretModel().moveCaretRelatively(0,1,false,false,true);
        }
      }
 else {
        for (int i=0; i <= selectedLinesCount; i++) {
          insertStringAtCaret(editor,s,false,false);
          editor.getCaretModel().moveCaretRelatively(0,1,false,false,true);
        }
      }
      editor.getCaretModel().moveToLogicalPosition(caretToRestore);
    }
 catch (    Exception exception) {
      editor.getComponent().getToolkit().beep();
    }
  }
}
