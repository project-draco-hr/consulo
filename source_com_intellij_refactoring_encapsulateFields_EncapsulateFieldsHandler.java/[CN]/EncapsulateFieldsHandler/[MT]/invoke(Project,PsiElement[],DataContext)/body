{
  PsiClass aClass=null;
  final HashSet<PsiField> preselectedFields=new HashSet<PsiField>();
  if (elements.length == 1) {
    if (elements[0] instanceof PsiClass) {
      aClass=(PsiClass)elements[0];
    }
 else     if (elements[0] instanceof PsiField) {
      PsiField field=(PsiField)elements[0];
      aClass=field.getContainingClass();
      preselectedFields.add(field);
    }
 else {
      return;
    }
  }
 else {
    for (    PsiElement element : elements) {
      if (!(element instanceof PsiField)) {
        return;
      }
      PsiField field=(PsiField)element;
      if (aClass == null) {
        aClass=field.getContainingClass();
        preselectedFields.add(field);
      }
 else {
        if (aClass.equals(field.getContainingClass())) {
          preselectedFields.add(field);
        }
 else {
          String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("fields.to.be.refactored.should.belong.to.the.same.class"));
          CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,message,HelpID.ENCAPSULATE_FIELDS,project);
          return;
        }
      }
    }
  }
  LOG.assertTrue(aClass != null);
  if (aClass.isInterface()) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("encapsulate.fields.refactoring.cannot.be.applied.to.interface"));
    CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,message,HelpID.ENCAPSULATE_FIELDS,project);
    return;
  }
  if (!aClass.isWritable()) {
    if (!CommonRefactoringUtil.checkReadOnlyStatus(project,aClass))     return;
  }
  EncapsulateFieldsDialog dialog=new EncapsulateFieldsDialog(project,aClass,preselectedFields);
  dialog.show();
}
