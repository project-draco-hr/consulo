{
  if (!(file.getFileType() instanceof NativeFileType) && !(file.getFileType() instanceof UnknownFileType)) {
    return null;
  }
  final String ext=file.getExtension();
  Icon icon;
synchronized (myIconCache) {
    icon=ext != null && !myNoCacheExtensions.contains(ext) ? myIconCache.get(ext) : null;
  }
  if (icon != null) {
    return icon;
  }
  return new DeferredIconImpl<VirtualFile>(file.getFileType().getIcon(),file,false,new Function<VirtualFile,Icon>(){
    public Icon fun(    VirtualFile virtualFile){
      final File f=new File(virtualFile.getPath());
      if (!f.exists()) {
        return null;
      }
      Icon icon;
      try {
        icon=myFileChooser.getIcon(f);
      }
 catch (      Exception e) {
        return null;
      }
      if (ext != null) {
synchronized (myIconCache) {
          myIconCache.put(ext,icon);
        }
      }
      return icon;
    }
  }
);
}
