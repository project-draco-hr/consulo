{
  final Project project=manager.getProject();
  Module module=ModuleUtilCore.findModuleForPsiElement(file);
  final AppEngineFacet appEngineFacet=AppEngineFacet.getAppEngineFacetByModule(module);
  if (appEngineFacet == null) {
    return null;
  }
  final AppEngineSdk appEngineSdk=appEngineFacet.getSdk();
  if (!appEngineSdk.isValid()) {
    return null;
  }
  final ProjectFileIndex fileIndex=ProjectRootManager.getInstance(project).getFileIndex();
  final List<ProblemDescriptor> problems=new ArrayList<ProblemDescriptor>();
  file.accept(new JavaRecursiveElementVisitor(){
    @Override public void visitDocComment(    PsiDocComment comment){
    }
    @Override public void visitMethod(    PsiMethod method){
      final PsiModifierList modifierList=method.getModifierList();
      if (modifierList.hasModifierProperty(PsiModifier.NATIVE)) {
        if (!isNativeMethodAllowed(method)) {
          problems.add(manager.createProblemDescriptor(modifierList,"Native methods aren't allowed in App Engine application",isOnTheFly,LocalQuickFix.EMPTY_ARRAY,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
        }
      }
      super.visitMethod(method);
    }
    @Override public void visitNewExpression(    PsiNewExpression expression){
      final PsiJavaCodeReferenceElement classReference=expression.getClassReference();
      if (classReference != null) {
        final PsiElement resolved=classReference.resolve();
        if (resolved instanceof PsiClass) {
          final String qualifiedName=((PsiClass)resolved).getQualifiedName();
          if (qualifiedName != null && appEngineSdk.isMethodInBlacklist(qualifiedName,"new")) {
            final String message="App Engine application should not create new instances of '" + qualifiedName + "' class";
            problems.add(manager.createProblemDescriptor(classReference,message,isOnTheFly,LocalQuickFix.EMPTY_ARRAY,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
          }
        }
      }
      super.visitNewExpression(expression);
    }
    @Override public void visitMethodCallExpression(    PsiMethodCallExpression expression){
      final PsiReferenceExpression methodExpression=expression.getMethodExpression();
      final PsiElement element=methodExpression.resolve();
      if (element instanceof PsiMethod) {
        final PsiMethod method=(PsiMethod)element;
        final PsiClass psiClass=method.getContainingClass();
        if (psiClass != null) {
          final String qualifiedName=psiClass.getQualifiedName();
          final String methodName=method.getName();
          if (qualifiedName != null && appEngineSdk.isMethodInBlacklist(qualifiedName,methodName)) {
            final String message="AppEngine application should not call '" + StringUtil.getShortName(qualifiedName) + "."+ methodName+ "' method";
            problems.add(manager.createProblemDescriptor(methodExpression,message,isOnTheFly,LocalQuickFix.EMPTY_ARRAY,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
          }
        }
      }
      super.visitMethodCallExpression(expression);
    }
    @Override public void visitReferenceElement(    PsiJavaCodeReferenceElement reference){
      final PsiElement resolved=reference.resolve();
      if (resolved instanceof PsiClass) {
        final PsiFile psiFile=resolved.getContainingFile();
        if (psiFile != null) {
          final VirtualFile virtualFile=psiFile.getVirtualFile();
          if (virtualFile != null && !fileIndex.isInSource(virtualFile)) {
            final List<OrderEntry> list=fileIndex.getOrderEntriesForFile(virtualFile);
            for (            OrderEntry entry : list) {
              if (entry instanceof JdkOrderEntry) {
                final String className=ClassUtil.getJVMClassName((PsiClass)resolved);
                if (className != null && !appEngineSdk.isClassInWhiteList(className)) {
                  problems.add(manager.createProblemDescriptor(reference,"Class '" + className + "' is not included in App Engine JRE White List",isOnTheFly,LocalQuickFix.EMPTY_ARRAY,ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
                }
              }
            }
          }
        }
      }
      super.visitReferenceElement(reference);
    }
  }
);
  return problems.toArray(new ProblemDescriptor[problems.size()]);
}
