{
  ReflectUtils.addAllMethods(superclass,methods);
  List target=(interfaceMethods != null) ? interfaceMethods : methods;
  if (interfaces != null) {
    for (int i=0; i < interfaces.length; i++) {
      if (interfaces[i] != Factory.class) {
        ReflectUtils.addAllMethods(interfaces[i],target);
      }
    }
  }
  if (interfaceMethods != null) {
    if (forcePublic != null) {
      forcePublic.addAll(MethodWrapper.createSet(interfaceMethods));
    }
    methods.addAll(interfaceMethods);
  }
  CollectionUtils.filter(methods,new RejectModifierPredicate(Constants.ACC_STATIC));
  CollectionUtils.filter(methods,new VisibilityPredicate(superclass,true));
  CollectionUtils.filter(methods,new DuplicatesPredicate());
  CollectionUtils.filter(methods,new RejectModifierPredicate(Constants.ACC_FINAL));
}
