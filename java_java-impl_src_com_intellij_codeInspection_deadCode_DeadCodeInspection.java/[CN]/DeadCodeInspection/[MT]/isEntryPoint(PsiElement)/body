{
  final Project project=element.getProject();
  final JavaPsiFacade psiFacade=JavaPsiFacade.getInstance(project);
  if (element instanceof PsiMethod && isAddMainsEnabled() && PsiClassImplUtil.isMainMethod((PsiMethod)element)) {
    return true;
  }
  if (element instanceof PsiClass) {
    PsiClass aClass=(PsiClass)element;
    if (aClass.isAnnotationType()) {
      return true;
    }
    if (aClass.isEnum()) {
      return true;
    }
    final PsiClass applet=psiFacade.findClass("java.applet.Applet",GlobalSearchScope.allScope(project));
    if (isAddAppletEnabled() && applet != null && aClass.isInheritor(applet,true)) {
      return true;
    }
    final PsiClass servlet=psiFacade.findClass("javax.servlet.Servlet",GlobalSearchScope.allScope(project));
    if (isAddServletEnabled() && servlet != null && aClass.isInheritor(servlet,true)) {
      return true;
    }
    if (isAddMainsEnabled() && PsiMethodUtil.hasMainMethod(aClass))     return true;
  }
  if (element instanceof PsiModifierListOwner && AnnotationUtil.isAnnotated((PsiModifierListOwner)element,ADDITIONAL_ANNOTATIONS)) {
    return true;
  }
  for (  UnusedCodeExtension extension : myExtensions) {
    if (extension.isEntryPoint(element)) {
      return true;
    }
  }
  final ImplicitUsageProvider[] implicitUsageProviders=Extensions.getExtensions(ImplicitUsageProvider.EP_NAME);
  for (  ImplicitUsageProvider provider : implicitUsageProviders) {
    if (provider.isImplicitUsage(element))     return true;
  }
  return false;
}
