{
  final PsiElement parent=element.getParent();
  if (!(parent instanceof PsiJavaCodeReferenceElement)) {
    return parent;
  }
  final PsiJavaCodeReferenceElement javaCodeReferenceElement=(PsiJavaCodeReferenceElement)parent;
  final PsiReferenceParameterList referenceParameterList=(PsiReferenceParameterList)element;
  final StringBuilder text=new StringBuilder();
  text.append(javaCodeReferenceElement.getQualifiedName());
  text.append('<');
  final PsiTypeElement[] typeElements=referenceParameterList.getTypeParameterElements();
  final PsiNewExpression newExpression=PsiTreeUtil.getParentOfType(typeElements[0],PsiNewExpression.class);
  final PsiDiamondType.DiamondInferenceResult result=PsiDiamondType.resolveInferredTypesNoCheck(newExpression,newExpression);
  text.append(StringUtil.join(result.getInferredTypes(),new Function<PsiType,String>(){
    @Override public String fun(    PsiType psiType){
      return psiType.getCanonicalText();
    }
  }
,","));
  text.append('>');
  final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(element.getProject());
  final PsiJavaCodeReferenceElement newReference=elementFactory.createReferenceFromText(text.toString(),element);
  return CodeStyleManager.getInstance(javaCodeReferenceElement.getProject()).reformat(javaCodeReferenceElement.replace(newReference));
}
