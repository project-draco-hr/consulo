{
  if (body == null) {
    return null;
  }
  List<Info> unusedDefs=new ArrayList<Info>();
  ControlFlow flow;
  try {
    flow=ControlFlowFactory.getInstance(body.getProject()).getControlFlow(body,ourPolicy);
  }
 catch (  AnalysisCanceledException e) {
    return null;
  }
  List<Instruction> instructions=flow.getInstructions();
  if (LOG.isDebugEnabled()) {
    LOG.debug(flow.toString());
  }
  Set<PsiVariable> assignedVariables=new THashSet<PsiVariable>();
  Set<PsiVariable> readVariables=new THashSet<PsiVariable>();
  for (int i=0; i < instructions.size(); i++) {
    Instruction instruction=instructions.get(i);
    ProgressManager.checkCanceled();
    if (instruction instanceof WriteVariableInstruction) {
      WriteVariableInstruction writeInstruction=(WriteVariableInstruction)instruction;
      PsiElement context=flow.getElement(i);
      context=PsiTreeUtil.getParentOfType(context,PsiStatement.class,false);
      PsiVariable psiVariable=writeInstruction.variable;
      if (context != null && !(context instanceof PsiDeclarationStatement && psiVariable.getInitializer() == null)) {
        assignedVariables.add(psiVariable);
      }
    }
 else     if (instruction instanceof ReadVariableInstruction) {
      ReadVariableInstruction readInstruction=(ReadVariableInstruction)instruction;
      readVariables.add(readInstruction.variable);
    }
  }
  InstructionState[] states=getStates(instructions);
  boolean[] defsArmed=new boolean[instructions.size()];
  Queue<InstructionState> queue=new Queue<InstructionState>(8);
  for (int i=states.length - 1; i >= 0; i--) {
    final InstructionState outerState=states[i];
    if (outerState.isVisited())     continue;
    outerState.touch();
    for (    PsiVariable psiVariable : assignedVariables) {
      if (psiVariable instanceof PsiField) {
        outerState.mergeUseArmed(psiVariable);
      }
    }
    queue.addLast(outerState);
    while (!queue.isEmpty()) {
      ProgressManager.checkCanceled();
      InstructionState state=queue.pullFirst();
      state.markVisited();
      int idx=state.getInstructionIdx();
      if (idx < instructions.size()) {
        Instruction instruction=instructions.get(idx);
        if (instruction instanceof WriteVariableInstruction) {
          WriteVariableInstruction writeInstruction=(WriteVariableInstruction)instruction;
          PsiVariable psiVariable=writeInstruction.variable;
          outUsedVariables.add(psiVariable);
          if (state.mergeUseDisarmed(psiVariable)) {
            defsArmed[idx]=true;
          }
        }
 else         if (instruction instanceof ReadVariableInstruction) {
          ReadVariableInstruction readInstruction=(ReadVariableInstruction)instruction;
          state.mergeUseArmed(readInstruction.variable);
          outUsedVariables.add(readInstruction.variable);
        }
 else {
          state.touch();
        }
      }
      IntArrayList backwardTraces=state.getBackwardTraces();
      for (int j=0; j < backwardTraces.size(); j++) {
        int prevIdx=backwardTraces.get(j);
        InstructionState prevState=states[prevIdx];
        if (!prevState.contains(state)) {
          prevState.merge(state);
          queue.addLast(prevState);
        }
      }
    }
  }
  for (int i=0; i < instructions.size(); i++) {
    Instruction instruction=instructions.get(i);
    if (instruction instanceof WriteVariableInstruction) {
      WriteVariableInstruction writeInstruction=(WriteVariableInstruction)instruction;
      if (!defsArmed[i]) {
        PsiElement context=flow.getElement(i);
        context=PsiTreeUtil.getNonStrictParentOfType(context,PsiStatement.class,PsiAssignmentExpression.class,PsiPostfixExpression.class,PsiPrefixExpression.class);
        PsiVariable psiVariable=writeInstruction.variable;
        if (context != null && !(context instanceof PsiTryStatement)) {
          if (context instanceof PsiDeclarationStatement && psiVariable.getInitializer() == null) {
            if (!assignedVariables.contains(psiVariable)) {
              unusedDefs.add(new Info(psiVariable,context,false));
            }
          }
 else {
            unusedDefs.add(new Info(psiVariable,context,readVariables.contains(psiVariable)));
          }
        }
      }
    }
  }
  return unusedDefs;
}
