{
  if (body == null) {
    return PsiElement.EMPTY_ARRAY;
  }
  final boolean[] visited=new boolean[instructions.size() + 1];
  visited[visited.length - 1]=true;
  int elem=defs() ? flow.getStartOffset(refOrDef) : flow.getEndOffset(refOrDef);
  if (elem == -1 && def instanceof PsiParameter) {
    elem=0;
  }
  if (elem != -1) {
    if (!defs() && instructions.get(elem) instanceof ReadVariableInstruction) {
      LOG.assertTrue(nNext(elem) == 1);
      LOG.assertTrue(getNext(elem,0) == elem + 1);
      elem+=1;
    }
    final Set<PsiElement> res=new THashSet<PsiElement>();
class Inner {
      void traverse(      int index){
        visited[index]=true;
        if (defs()) {
          final Instruction instruction=instructions.get(index);
          processInstruction(res,instruction,index);
          if (instruction instanceof WriteVariableInstruction) {
            WriteVariableInstruction instructionW=(WriteVariableInstruction)instruction;
            if (instructionW.variable == def) {
              return;
            }
          }
          if (index == 0 && def instanceof PsiParameter) {
            res.add(def.getNameIdentifier());
          }
        }
        final int nNext=nNext(index);
        for (int i=0; i < nNext; i++) {
          final int prev=getNext(index,i);
          if (!visited[prev]) {
            if (!defs()) {
              final Instruction instruction=instructions.get(prev);
              if (instruction instanceof WriteVariableInstruction) {
                WriteVariableInstruction instructionW=(WriteVariableInstruction)instruction;
                if (instructionW.variable == def) {
                  continue;
                }
              }
 else {
                processInstruction(res,instruction,prev);
              }
            }
            traverse(prev);
          }
        }
      }
    }
    new Inner().traverse(elem);
    return res.toArray(new PsiElement[res.size()]);
  }
  return PsiElement.EMPTY_ARRAY;
}
