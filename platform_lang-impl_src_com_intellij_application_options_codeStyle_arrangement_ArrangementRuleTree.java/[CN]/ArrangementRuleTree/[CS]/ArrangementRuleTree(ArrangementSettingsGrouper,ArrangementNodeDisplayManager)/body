{
  myFactory=new ArrangementNodeComponentFactory(displayManager);
  ArrangementTreeNode root=new ArrangementTreeNode(null);
  myTreeModel=new DefaultTreeModel(root);
  myTree=new Tree(myTreeModel){
    @Override protected void setExpandedState(    TreePath path,    boolean state){
      if (state) {
        super.setExpandedState(path,state);
      }
    }
    @Override protected boolean isAlwaysPaintRowBackground(){
      return false;
    }
    @Override protected void processMouseEvent(    MouseEvent e){
      mySkipSelectionChange=e.getClickCount() > 0 && getNodeComponentAt(e.getLocationOnScreen()) == null;
      try {
        super.processMouseEvent(e);
        if (mySkipSelectionChange) {
          notifySelectionListeners(null);
        }
      }
  finally {
        mySkipSelectionChange=false;
      }
    }
  }
;
  myTree.setSelectionModel(mySelectionModel);
  myTree.setRootVisible(false);
  mySelectionModel.addTreeSelectionListener(new TreeSelectionListener(){
    @Override public void valueChanged(    TreeSelectionEvent e){
      setSelection(e.getOldLeadSelectionPath(),false);
      setSelection(e.getNewLeadSelectionPath(),true);
    }
  }
);
  myTree.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      onMouseClicked(e);
    }
  }
);
  List<ArrangementSettingsNode> rules=new ArrayList<ArrangementSettingsNode>();
  rules.add(new ArrangementSettingsCompositeNode(ArrangementSettingsCompositeNode.Operator.AND).addOperand(new ArrangementSettingsAtomNode(ArrangementSettingType.TYPE,ArrangementEntryType.FIELD)).addOperand(new ArrangementSettingsAtomNode(ArrangementSettingType.MODIFIER,ArrangementModifier.PUBLIC)).addOperand(new ArrangementSettingsAtomNode(ArrangementSettingType.MODIFIER,ArrangementModifier.STATIC)).addOperand(new ArrangementSettingsAtomNode(ArrangementSettingType.MODIFIER,ArrangementModifier.FINAL)));
  rules.add(new ArrangementSettingsCompositeNode(ArrangementSettingsCompositeNode.Operator.AND).addOperand(new ArrangementSettingsAtomNode(ArrangementSettingType.TYPE,ArrangementEntryType.FIELD)).addOperand(new ArrangementSettingsAtomNode(ArrangementSettingType.MODIFIER,ArrangementModifier.PRIVATE)));
  map(root,rules,grouper);
  expandAll(myTree,new TreePath(root));
  myTree.setShowsRootHandles(false);
  myTree.setCellRenderer(new MyCellRenderer());
}
