{
  myFilter=filter;
  myFactory=new ArrangementNodeComponentFactory(new ArrangementNodeDisplayManager(filter));
  DefaultMutableTreeNode root=new DefaultMutableTreeNode();
  myTreeModel=new DefaultTreeModel(root);
  myTree=new Tree(myTreeModel){
    @Override protected void setExpandedState(    TreePath path,    boolean state){
      if (state) {
        super.setExpandedState(path,state);
      }
    }
    @Override public void setSelectionPath(    TreePath path){
    }
  }
;
  myTree.addMouseMotionListener(new MouseAdapter(){
    @Override public void mouseMoved(    MouseEvent e){
      onMouseMoved(e);
    }
  }
);
  List<ArrangementSettingsNode> children=new ArrayList<ArrangementSettingsNode>();
  children.add(new ArrangementSettingsAtomNode(ArrangementSettingType.MODIFIER,ArrangementModifier.PUBLIC));
  children.add(new ArrangementSettingsAtomNode(ArrangementSettingType.MODIFIER,ArrangementModifier.STATIC));
  children.add(new ArrangementSettingsAtomNode(ArrangementSettingType.MODIFIER,ArrangementModifier.FINAL));
  HierarchicalArrangementSettingsNode settingsNode=new HierarchicalArrangementSettingsNode(new ArrangementSettingsAtomNode(ArrangementSettingType.TYPE,ArrangementEntryType.FIELD));
  ArrangementSettingsCompositeNode modifiers=new ArrangementSettingsCompositeNode(ArrangementSettingsCompositeNode.Operator.AND);
  for (  ArrangementSettingsNode child : children) {
    modifiers.addOperand(child);
  }
  settingsNode.addChild(new HierarchicalArrangementSettingsNode(modifiers));
  if (settingsNode != null) {
    map(root,settingsNode);
  }
  expandAll(myTree,new TreePath(root));
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(false);
  myTree.setCellRenderer(new MyCellRenderer());
}
