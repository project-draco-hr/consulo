{
  if (e.getSource() == myPasswordButton || e.getSource() == myKeyButton) {
    updateFields();
    updateOKButton();
  }
 else {
    final String[] path={myKeyFileText.getText()};
    VirtualFile file;
    if (path[0] != null && path[0].trim().length() > 0) {
      path[0]="file://" + path[0].replace(File.separatorChar,'/');
      file=VirtualFileManager.getInstance().findFileByUrl(path[0]);
    }
 else {
      path[0]="file://" + System.getProperty(USER_HOME_PROPERTY) + "/.ssh/identity";
      path[0]=path[0].replace(File.separatorChar,'/');
      file=VirtualFileManager.getInstance().findFileByUrl(path[0]);
    }
    FileChooserDescriptor descriptor=new FileChooserDescriptor(true,false,false,false,false,false);
    descriptor.setShowFileSystemRoots(true);
    descriptor.setTitle(SvnBundle.message("dialog.title.openssh.v2.private.key"));
    descriptor.setDescription(SvnBundle.message("dialog.description.openssh.v2.private.key"));
    descriptor.setHideIgnored(false);
    final String oldValue=PropertiesComponent.getInstance().getValue("FileChooser.showHiddens");
    PropertiesComponent.getInstance().setValue("FileChooser.showHiddens",Boolean.TRUE.toString());
    FileChooser.chooseFilesWithSlideEffect(descriptor,myProject,file,new Consumer<VirtualFile[]>(){
      @Override public void consume(      VirtualFile[] files){
        PropertiesComponent.getInstance().setValue("FileChooser.showHiddens",oldValue);
        if (files != null && files.length == 1) {
          path[0]=files[0].getPath().replace('/',File.separatorChar);
          myKeyFileText.setText(path[0]);
        }
        updateOKButton();
      }
    }
);
  }
}
