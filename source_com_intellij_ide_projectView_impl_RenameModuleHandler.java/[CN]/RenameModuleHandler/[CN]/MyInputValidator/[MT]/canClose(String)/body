{
  final ModifiableModuleModel modifiableModel=ModuleManager.getInstance(myProject).getModifiableModel();
  try {
    modifiableModel.renameModule(myModule,inputString);
  }
 catch (  ModuleWithNameAlreadyExists moduleWithNameAlreadyExists) {
    Messages.showErrorDialog(myProject,IdeBundle.message("error.module.already.exists",inputString),IdeBundle.message("title.rename.module"));
    return false;
  }
  final Ref<Boolean> success=Ref.create(Boolean.TRUE);
  CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
    public void run(){
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        public void run(){
          try {
            modifiableModel.commit();
          }
 catch (          final ModuleCircularDependencyException e) {
            ApplicationManager.getApplication().invokeLater(new Runnable(){
              public void run(){
                Messages.showErrorDialog(myProject,IdeBundle.message("error.renaming.module.will.introduce.circular.dependency",myModule.getName(),inputString,e.getModuleName1(),e.getModuleName2()),IdeBundle.message("title.rename.module"));
              }
            }
);
            modifiableModel.dispose();
            success.set(Boolean.FALSE);
          }
        }
      }
);
    }
  }
,IdeBundle.message("command.renaming.module",myModule.getName()),null);
  return success.get().booleanValue();
}
