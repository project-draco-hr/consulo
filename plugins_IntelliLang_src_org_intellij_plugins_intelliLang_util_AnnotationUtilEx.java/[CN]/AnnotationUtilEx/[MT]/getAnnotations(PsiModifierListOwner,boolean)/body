{
  final PsiModifierList modifierList=listOwner.getModifierList();
  if (modifierList == null) {
    return PsiAnnotation.EMPTY_ARRAY;
  }
  if (!inHierarchy) {
    return modifierList.getAnnotations();
  }
  final Set<PsiAnnotation> all=new HashSet<PsiAnnotation>(){
    public boolean add(    PsiAnnotation o){
      return !contains(o) && super.add(o);
    }
  }
;
  if (listOwner instanceof PsiMethod) {
    all.addAll(Arrays.asList(modifierList.getAnnotations()));
    SuperMethodsSearch.search((PsiMethod)listOwner,null,true,true).forEach(new Processor<MethodSignatureBackedByPsiMethod>(){
      public boolean process(      final MethodSignatureBackedByPsiMethod superMethod){
        all.addAll(Arrays.asList(superMethod.getMethod().getModifierList().getAnnotations()));
        return true;
      }
    }
);
    return all.toArray(new PsiAnnotation[all.size()]);
  }
  if (listOwner instanceof PsiParameter) {
    PsiParameter parameter=(PsiParameter)listOwner;
    PsiElement declarationScope=parameter.getDeclarationScope();
    if (declarationScope instanceof PsiMethod && parameter.getParent() == ((PsiMethod)declarationScope).getParameterList()) {
      PsiMethod method=(PsiMethod)declarationScope;
      final int parameterIndex=method.getParameterList().getParameterIndex(parameter);
      all.addAll(Arrays.asList(modifierList.getAnnotations()));
      SuperMethodsSearch.search(method,null,true,true).forEach(new Processor<MethodSignatureBackedByPsiMethod>(){
        public boolean process(        final MethodSignatureBackedByPsiMethod superMethod){
          PsiParameter superParameter=superMethod.getMethod().getParameterList().getParameters()[parameterIndex];
          PsiModifierList modifierList=superParameter.getModifierList();
          if (modifierList != null) {
            all.addAll(Arrays.asList(modifierList.getAnnotations()));
          }
          return true;
        }
      }
);
      return all.toArray(new PsiAnnotation[all.size()]);
    }
  }
  return modifierList.getAnnotations();
}
