{
  final PsiModifierList modifierList=listOwner.getModifierList();
  if (modifierList == null) {
    return PsiAnnotation.EMPTY_ARRAY;
  }
  if (inHierarchy) {
    final Set<PsiAnnotation> all=new HashSet<PsiAnnotation>(){
      public boolean add(      PsiAnnotation o){
        return !contains(o) && super.add(o);
      }
    }
;
    if (listOwner instanceof PsiMethod) {
      all.addAll(Arrays.asList(modifierList.getAnnotations()));
      processSuperMethods((PsiMethod)listOwner,new Processor<PsiMethod>(){
        public boolean process(        final PsiMethod superMethod){
          all.addAll(Arrays.asList(superMethod.getModifierList().getAnnotations()));
          return true;
        }
      }
);
      return all.toArray(new PsiAnnotation[all.size()]);
    }
    if (listOwner instanceof PsiParameter && ((PsiParameter)listOwner).getDeclarationScope() instanceof PsiMethod) {
      PsiParameter parameter=(PsiParameter)listOwner;
      PsiMethod method=(PsiMethod)parameter.getDeclarationScope();
      final int parameterIndex=method.getParameterList().getParameterIndex(parameter);
      all.addAll(Arrays.asList(modifierList.getAnnotations()));
      processSuperMethods(method,new Processor<PsiMethod>(){
        public boolean process(        final PsiMethod superMethod){
          PsiParameter superParameter=superMethod.getParameterList().getParameters()[parameterIndex];
          PsiModifierList modifierList=superParameter.getModifierList();
          all.addAll(Arrays.asList(modifierList.getAnnotations()));
          return true;
        }
      }
);
      return all.toArray(new PsiAnnotation[all.size()]);
    }
  }
  return modifierList.getAnnotations();
}
