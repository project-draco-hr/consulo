{
  if (element == null)   return null;
  if (type == LookupType.PREFER_DECLARATION || type == LookupType.DECLRARATION_ONLY) {
    if (element instanceof PsiReferenceExpression) {
      final PsiElement e=((PsiReferenceExpression)element).resolve();
      if (e instanceof PsiModifierListOwner) {
        return (PsiModifierListOwner)e;
      }
      if (type == LookupType.DECLRARATION_ONLY) {
        return null;
      }
    }
  }
  final PsiElement parent=element.getParent();
  if (parent instanceof PsiAssignmentExpression) {
    final PsiAssignmentExpression p=(PsiAssignmentExpression)parent;
    if (p.getRExpression() == element) {
      return getAnnotatedElementFor(p.getLExpression(),type,interesting);
    }
  }
 else   if (parent instanceof PsiExpression) {
    return getAnnotatedElementFor((PsiExpression)parent,type,interesting);
  }
 else   if (parent instanceof PsiReturnStatement) {
    final PsiMethod m=PsiTreeUtil.getParentOfType(parent,PsiMethod.class);
    if (m != null) {
      return m;
    }
  }
 else   if (parent instanceof PsiModifierListOwner) {
    return (PsiModifierListOwner)parent;
  }
 else   if (parent instanceof PsiArrayInitializerMemberValue) {
    final PsiArrayInitializerMemberValue value=(PsiArrayInitializerMemberValue)parent;
    final PsiElement pair=value.getParent();
    if (pair instanceof PsiNameValuePair) {
      return getAnnotationMethod((PsiNameValuePair)pair,element,interesting);
    }
  }
 else   if (parent instanceof PsiNameValuePair) {
    return getAnnotationMethod((PsiNameValuePair)parent,element,interesting);
  }
 else {
    return PsiUtilEx.getParameterForArgument(element);
  }
  if (type != LookupType.DECLRARATION_ONLY) {
    if (element instanceof PsiReferenceExpression) {
      final PsiElement e=((PsiReferenceExpression)element).resolve();
      if (e instanceof PsiModifierListOwner) {
        return (PsiModifierListOwner)e;
      }
    }
  }
  return null;
}
