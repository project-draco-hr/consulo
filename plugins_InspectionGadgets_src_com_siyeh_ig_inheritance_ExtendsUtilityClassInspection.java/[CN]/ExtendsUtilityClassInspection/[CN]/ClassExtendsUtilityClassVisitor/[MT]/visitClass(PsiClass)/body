{
  if (aClass.isInterface() || aClass.isAnnotationType()) {
    return;
  }
  final PsiClass superClass=aClass.getSuperClass();
  if (superClass == null) {
    return;
  }
  if (superClass.hasModifierProperty(PsiModifier.ABSTRACT)) {
    return;
  }
  if (!UtilityClassUtil.isUtilityClass(superClass)) {
    return;
  }
  if (ignoreUtilityClasses && UtilityClassUtil.isUtilityClass(aClass,false)) {
    return;
  }
  registerClassError(aClass,superClass);
}
