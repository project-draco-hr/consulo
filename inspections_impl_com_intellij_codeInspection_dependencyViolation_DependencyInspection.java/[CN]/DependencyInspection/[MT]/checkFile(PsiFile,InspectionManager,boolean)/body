{
  if (file == null)   return null;
  final VirtualFile virtualFile=file.getVirtualFile();
  if (virtualFile == null)   return null;
  final DependencyValidationManager validationManager=DependencyValidationManager.getInstance(file.getProject());
  final ArrayList<ProblemDescriptor> problems=new ArrayList<ProblemDescriptor>();
  ForwardDependenciesBuilder builder=new ForwardDependenciesBuilder(file.getProject(),new AnalysisScope(file));
  builder.analyzeFileDependencies(file,new DependenciesBuilder.DependencyProcessor(){
    public void process(    PsiElement place,    PsiElement dependency){
      PsiFile dependencyFile=dependency.getContainingFile();
      if (dependencyFile != null && dependencyFile.isPhysical() && dependencyFile.getVirtualFile() != null) {
        final DependencyRule[] rule=validationManager.getViolatorDependencyRules(file,dependencyFile);
        for (        DependencyRule dependencyRule : rule) {
          StringBuffer message=new StringBuffer();
          message.append(MessageFormat.format(InspectionsBundle.message("inspection.dependency.violator.problem.descriptor"),dependencyRule.getDisplayText()));
          problems.add(manager.createProblemDescriptor(place,message.toString(),new LocalQuickFix[]{new EditDependencyRulesAction(dependencyRule)},ProblemHighlightType.GENERIC_ERROR_OR_WARNING));
        }
      }
    }
  }
);
  return problems.isEmpty() ? null : problems.toArray(new ProblemDescriptor[problems.size()]);
}
