{
  if (call instanceof PsiMethodCallExpression) {
    final PsiReferenceExpression methodExpression=((PsiMethodCallExpression)call).getMethodExpression();
    if (methodExpression.getQualifierExpression() instanceof PsiSuperExpression) {
      return parameterName;
    }
  }
  final PsiExpression[] args=call.getArgumentList().getExpressions();
  StringBuffer newExpression=new StringBuffer();
  final String qualifiedName=ClassUtil.createQualifiedName(packageName,className);
  newExpression.append("new " + qualifiedName);
  if (!typeParams.isEmpty()) {
    final JavaResolveResult resolvant=call.resolveMethodGenerics();
    final PsiSubstitutor substitutor=resolvant.getSubstitutor();
    newExpression.append('<');
    final Map<PsiTypeParameter,PsiType> substitutionMap=substitutor.getSubstitutionMap();
    for (    PsiTypeParameter typeParameter : typeParams) {
      final PsiType boundType=substitutionMap.get(typeParameter);
      if (boundType != null) {
        newExpression.append(boundType.getCanonicalText());
      }
 else {
        newExpression.append(typeParameter.getName());
      }
    }
    newExpression.append('>');
  }
  newExpression.append('(');
  boolean isFirst=true;
  for (  int index : paramsToMerge) {
    if (!isFirst) {
      newExpression.append(", ");
    }
    isFirst=false;
    newExpression.append(args[index].getText());
  }
  if (lastParamIsVararg) {
    final int lastArg=paramsToMerge[paramsToMerge.length - 1];
    for (int i=lastArg + 1; i < args.length; i++) {
      newExpression.append(',');
      newExpression.append(args[i].getText());
    }
  }
  newExpression.append(')');
  return newExpression.toString();
}
