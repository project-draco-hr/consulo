{
  final JavaPsiFacade psiFacade=JavaPsiFacade.getInstance(method.getProject());
  final PsiClass psiClass=psiFacade.findClass(ClassUtil.createQualifiedName(packageName,className));
  final List<ParameterInfo> parametersInfo=new ArrayList<ParameterInfo>();
  parametersInfo.add(new ParameterInfo(-1,parameterName,new PsiImmediateClassType(psiClass,PsiSubstitutor.EMPTY),null){
    @Override public PsiExpression getValue(    final PsiCallExpression expr) throws IncorrectOperationException {
      return psiFacade.getElementFactory().createExpressionFromText(getMergedParam(expr),expr);
    }
  }
);
  final PsiParameter[] parameters=method.getParameterList().getParameters();
  for (int i=0; i < parameters.length; i++) {
    if (!isParameterToMerge(i)) {
      parametersInfo.add(new ParameterInfo(i,parameters[i].getName(),parameters[i].getType()));
    }
  }
  new ChangeSignatureProcessor(method.getProject(),method,myKeepMethodAsDelegate,null,method.getName(),method.getReturnType(),parametersInfo.toArray(new ParameterInfo[parametersInfo.size()])).run();
}
