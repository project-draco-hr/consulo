{
  if (elements == null || elements.length == 0) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("selected.block.should.represent.a.set.of.statements.or.an.expression"));
    CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,message,HelpID.EXTRACT_METHOD,project);
    return;
  }
  if (!file.isWritable()) {
    if (!RefactoringMessageUtil.checkReadOnlyStatus(project,file))     return;
  }
  for (  PsiElement element : elements) {
    if (element instanceof PsiStatement && RefactoringUtil.isSuperOrThisCall((PsiStatement)element,true,true)) {
      String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("selected.block.contains.invocation.of.another.class.constructor"));
      CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,message,HelpID.EXTRACT_METHOD,project);
      return;
    }
  }
  final ExtractMethodProcessor processor=new ExtractMethodProcessor(project,editor,elements,null,REFACTORING_NAME,"",HelpID.EXTRACT_METHOD);
  try {
    if (!processor.prepare())     return;
    if (processor.showDialog()) {
      CommandProcessor.getInstance().executeCommand(project,new Runnable(){
        public void run(){
          final Runnable action=new Runnable(){
            public void run(){
              try {
                processor.doRefactoring();
              }
 catch (              IncorrectOperationException e) {
                LOG.error(e);
              }
            }
          }
;
          ApplicationManager.getApplication().runWriteAction(action);
        }
      }
,REFACTORING_NAME,null);
      DuplicatesImpl.processDuplicates(processor,project,editor,REFACTORING_NAME);
    }
  }
 catch (  PrepareFailedException e) {
    CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,e.getMessage(),HelpID.EXTRACT_METHOD,project);
    highlightPrepareError(e,file,editor,project);
  }
}
