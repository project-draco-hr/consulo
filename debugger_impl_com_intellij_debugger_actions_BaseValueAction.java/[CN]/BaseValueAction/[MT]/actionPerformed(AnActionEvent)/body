{
  final DataContext actionContext=e.getDataContext();
  final Project project=PlatformDataKeys.PROJECT.getData(actionContext);
  final Value value=getValue(actionContext);
  if (value == null) {
    return;
  }
  DebuggerManagerEx debuggerManager=DebuggerManagerEx.getInstanceEx(project);
  if (debuggerManager != null) {
    final DebuggerContextImpl debuggerContext=debuggerManager.getContext();
    if (debuggerContext != null && debuggerContext.getDebuggerSession() != null) {
      final ProgressWindowWithNotification progressWindow=new ProgressWindowWithNotification(true,project);
      SuspendContextCommandImpl copyValueAction=new SuspendContextCommandImpl(debuggerContext.getSuspendContext()){
        public void contextAction() throws Exception {
          progressWindow.setText(DebuggerBundle.message("progress.evaluating","toString()"));
          final String valueAsString=DebuggerUtilsEx.getValueOrErrorAsString(debuggerContext.createEvaluationContext(),value);
          if (progressWindow.isCanceled())           return;
          DebuggerInvocationUtil.invokeLater(project,new Runnable(){
            public void run(){
              String text=valueAsString;
              if (text == null)               text="";
              processText(project,text);
            }
          }
);
        }
      }
;
      progressWindow.setTitle(DebuggerBundle.message("title.evaluating"));
      debuggerContext.getDebugProcess().getManagerThread().startProgress(copyValueAction,progressWindow);
    }
  }
}
