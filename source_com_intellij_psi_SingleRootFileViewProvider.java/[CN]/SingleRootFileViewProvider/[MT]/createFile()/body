{
  final VirtualFile vFile=getVirtualFile();
  try {
    if (vFile.isDirectory())     return null;
    final FileTypeManager fileTypeManager=FileTypeManager.getInstance();
    final String name=getVirtualFile().getName();
    if (fileTypeManager.isFileIgnored(name))     return null;
    if (isPhysical()) {
      final VirtualFile parent=vFile.getParent();
      if (parent == null)       return null;
      final PsiDirectory psiDir=getManager().findDirectory(parent);
      if (psiDir == null)       return null;
    }
    FileType fileType=getVirtualFile().getFileType();
    final Project project=myManager.getProject();
    if (fileType instanceof LanguageFileType) {
      final Language language=((LanguageFileType)fileType).getLanguage();
      if (language == StdLanguages.JAVA || vFile == null || !isTooLarge(vFile)) {
        final ParserDefinition parserDefinition=language.getParserDefinition();
        if (parserDefinition != null) {
          return parserDefinition.createFile(this);
        }
      }
    }
    if (fileType instanceof JavaClassFileType) {
      ProjectFileIndex fileIndex=ProjectRootManager.getInstance(project).getFileIndex();
      if (fileIndex.isInLibraryClasses(vFile)) {
        int dotIndex=name.lastIndexOf('.');
        if (dotIndex < 0)         dotIndex=name.length();
        int index=name.lastIndexOf('$',dotIndex);
        if (index >= 0)         return null;
        return new ClsFileImpl((PsiManagerImpl)PsiManager.getInstance(project),this);
      }
      return null;
    }
    if (fileType.isBinary()) {
      return new PsiBinaryFileImpl((PsiManagerImpl)getManager(),this);
    }
    return new PsiPlainTextFileImpl(this);
  }
 catch (  Throwable e) {
    LOG.error(e);
    return null;
  }
}
