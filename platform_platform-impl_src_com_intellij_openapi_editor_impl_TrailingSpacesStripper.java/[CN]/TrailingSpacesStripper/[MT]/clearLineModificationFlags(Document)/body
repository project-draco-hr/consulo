{
  if (document instanceof DocumentWindow) {
    document=((DocumentWindow)document).getDelegate();
  }
  if (!(document instanceof DocumentImpl)) {
    return;
  }
  Editor activeEditor=getActiveEditor(document);
  boolean isVirtualSpaceEnabled=activeEditor == null || activeEditor.getSettings().isVirtualSpace();
  final EditorSettingsExternalizable settings=EditorSettingsExternalizable.getInstance();
  if (settings == null)   return;
  boolean enabled=!Boolean.TRUE.equals(DISABLE_FOR_FILE_KEY.get(FileDocumentManager.getInstance().getFile(document)));
  String stripTrailingSpaces=settings.getStripTrailingSpaces();
  final boolean doStrip=enabled && !stripTrailingSpaces.equals(EditorSettingsExternalizable.STRIP_TRAILING_SPACES_NONE);
  final boolean inChangedLinesOnly=enabled && !stripTrailingSpaces.equals(EditorSettingsExternalizable.STRIP_TRAILING_SPACES_WHOLE);
  int[] caretLines;
  if (activeEditor != null && inChangedLinesOnly && doStrip && !isVirtualSpaceEnabled) {
    List<Caret> carets=activeEditor.getCaretModel().getAllCarets();
    caretLines=new int[carets.size()];
    for (int i=0; i < carets.size(); i++) {
      Caret caret=carets.get(i);
      caretLines[i]=caret.getLogicalPosition().line;
    }
  }
 else {
    caretLines=ArrayUtil.EMPTY_INT_ARRAY;
  }
  ((DocumentImpl)document).clearLineModificationFlagsExcept(caretLines);
}
