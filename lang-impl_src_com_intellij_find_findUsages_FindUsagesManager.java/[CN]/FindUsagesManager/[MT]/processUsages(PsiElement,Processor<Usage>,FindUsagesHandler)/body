{
  if (handler == null)   return null;
  FindUsagesOptions findUsagesOptions=handler.getFindUsagesOptions();
  LOG.assertTrue(handler.getPsiElement().isValid());
  final UsageInfoToUsageConverter.TargetElementsDescriptor descriptor=new UsageInfoToUsageConverter.TargetElementsDescriptor(handler.getPrimaryElements(),handler.getSecondaryElements());
  UsageViewPresentation presentation=createPresentation(element,findUsagesOptions,myToOpenInNewTab);
  final UsageSearcher usageSearcher=createUsageSearcher(descriptor,handler,findUsagesOptions,null);
  final boolean[] canceled=new boolean[]{false};
  final int[] usageCount=new int[]{0};
  Task task=new Task.Modal(myProject,UsageViewManagerImpl.getProgressTitle(presentation),true){
    public void run(    @NotNull final ProgressIndicator indicator){
      usageSearcher.generate(new Processor<Usage>(){
        public boolean process(        final Usage usage){
          usageCount[0]++;
          return processor.process(usage);
        }
      }
);
    }
    @Nullable public NotificationInfo getNotificationInfo(){
      return new NotificationInfo("Find Usages","Find Usages Finished",usageCount[0] + " Usage(s) Found");
    }
    public void onCancel(){
      canceled[0]=true;
    }
  }
;
  ProgressManager.getInstance().run(task);
  if (canceled[0])   return null;
  return presentation;
}
