{
  myImportProcessor.resolve(project,myProfiles);
  myImportProcessor.commit(project,myProfiles,getImporterPreferences().isAutoImportNew());
  final MavenImporterState importerState=project.getComponent(MavenImporter.class).getState();
  if (getImporterPreferences().isAutoImportNew()) {
    myImportProcessor.getMavenProjectModel().visit(new MavenProjectModel.MavenProjectVisitorRoot(){
      public void visit(      MavenProjectModel.Node node){
        importerState.rememberProject(node.getPath());
      }
    }
);
  }
  if (!myProfiles.isEmpty()) {
    for (    String profile : myProfiles) {
      importerState.rememberProfile(profile);
    }
    final MavenProjectsState projectsState=project.getComponent(MavenProjectsState.class);
    myImportProcessor.getMavenProjectModel().visit(new MavenProjectModel.MavenProjectVisitorPlain(){
      public void visit(      MavenProjectModel.Node node){
        final Set<String> projectProfiles=ProjectUtil.collectProfileIds(node.getMavenProject(),new HashSet<String>());
        projectProfiles.retainAll(myProfiles);
        projectsState.setProfiles(node.getFile(),projectProfiles);
      }
    }
);
  }
  project.getComponent(MavenWorkspacePreferencesComponent.class).getState().myImporterPreferences=getImporterPreferences();
  project.getComponent(MavenWorkspacePreferencesComponent.class).getState().myArtifactPreferences=getArtifactPreferences();
  project.getComponent(MavenCore.class).loadState(coreState);
}
