{
  myImportProcessor.commit(project,myProfiles);
  MavenImporter importerComponent=MavenImporter.getInstance(project);
  importerComponent.setDoesNotRequireSynchronization();
  StartupManager.getInstance(project).registerPostStartupActivity(new Runnable(){
    public void run(){
      MavenImportToolWindow toolWindow=new MavenImportToolWindow(project,ProjectBundle.message("maven.import"));
      toolWindow.displayResolutionProblems(myResolutionProblems);
    }
  }
);
  MavenImporterState importerState=importerComponent.getState();
  if (!myProfiles.isEmpty()) {
    for (    String profile : myProfiles) {
      importerState.memorizeProfile(profile);
    }
    final MavenProjectsState projectsState=MavenProjectsState.getInstance(project);
    myImportProcessor.getMavenProjectModel().visit(new MavenProjectModel.MavenProjectVisitorPlain(){
      public void visit(      MavenProjectModel.Node node){
        final Set<String> projectProfiles=ProjectUtil.collectProfileIds(node.getMavenProject(),new HashSet<String>());
        projectProfiles.retainAll(myProfiles);
        projectsState.setProfiles(node.getFile(),projectProfiles);
      }
    }
);
  }
  project.getComponent(MavenWorkspaceSettingsComponent.class).getState().myImporterSettings=getImporterPreferences();
  project.getComponent(MavenWorkspaceSettingsComponent.class).getState().myArtifactSettings=getArtifactPreferences();
  project.getComponent(MavenCore.class).loadState(myCoreSettings);
}
