{
  List<String> executionCommand;
  try {
    executionCommand=MavenExternalParameters.createCommand(parameters,myBuilderState,myMavenCoreState);
    logCommand(executionCommand);
  }
 catch (  MavenExternalParameters.MavenConfigErrorException e) {
    LOG.error(e.getMessage(),e);
    consoleOutput.message(MavenBuildLogger.LEVEL_FATAL,BuilderBundle.message("external.config.error") + e.getMessage(),e);
    return;
  }
  try {
    mavenProcess=Runtime.getRuntime().exec(executionCommand.toArray(new String[executionCommand.size()]),null,new File(parameters.getWorkingDir()));
  }
 catch (  IOException e) {
    LOG.error(e.getMessage(),e);
    consoleOutput.message(MavenBuildLogger.LEVEL_ERROR,BuilderBundle.message("external.statup.failed"),e);
    return;
  }
  displayProgress();
  start();
  readProcessOutput();
  int exitValue=stop();
  if (isCancelled()) {
    consoleOutput.message(MavenBuildLogger.LEVEL_INFO,BuilderBundle.message("external.process.aborted",exitValue),null);
  }
 else   if (exitValue == 0) {
    consoleOutput.message(MavenBuildLogger.LEVEL_INFO,BuilderBundle.message("external.process.finished",exitValue),null);
  }
 else {
    consoleOutput.message(MavenBuildLogger.LEVEL_ERROR,BuilderBundle.message("external.process.terminated.abnormally",exitValue),null);
  }
}
