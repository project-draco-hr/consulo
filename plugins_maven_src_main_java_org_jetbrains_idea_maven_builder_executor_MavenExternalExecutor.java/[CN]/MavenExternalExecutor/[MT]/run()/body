{
  displayProgress();
  final ProgressIndicator indicator=ProgressManager.getInstance().getProgressIndicator();
  try {
    myProcessHandler=new DefaultJavaProcessHandler(MavenExternalParameters.createJavaParameters(myParameters,myCoreState,myBuilderState)){
      public void notifyTextAvailable(      final String text,      final Key outputType){
        if (isNotSuppressed(MavenLogUtil.getLevel(text))) {
          super.notifyTextAvailable(text,outputType);
        }
        if (indicator != null) {
          if (indicator.isCanceled()) {
            if (!isCancelled()) {
              ApplicationManager.getApplication().invokeLater(new Runnable(){
                public void run(){
                  cancel();
                }
              }
);
            }
          }
          if (text.matches(PHASE_INFO_REGEXP)) {
            indicator.setText2(text.substring(INFO_PREFIX_SIZE));
          }
        }
      }
    }
;
    consoleView.attachToProcess(myProcessHandler);
  }
 catch (  ExecutionException e) {
    LOG.warn(e.getMessage(),e);
    systemMessage(MavenLogUtil.LEVEL_FATAL,BuilderBundle.message("external.statup.failed"),e);
    return;
  }
  start();
  readProcessOutput();
  int exitValue=stop();
  if (isCancelled()) {
    systemMessage(MavenLogUtil.LEVEL_INFO,BuilderBundle.message("external.process.aborted",exitValue),null);
  }
 else   if (exitValue == 0) {
    systemMessage(MavenLogUtil.LEVEL_INFO,BuilderBundle.message("external.process.finished",exitValue),null);
  }
 else {
    systemMessage(MavenLogUtil.LEVEL_ERROR,BuilderBundle.message("external.process.terminated.abnormally",exitValue),null);
  }
}
