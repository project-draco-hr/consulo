{
  int currentOldDocumentOffset=0;
  int currentNewDocumentOffset=0;
  StringBuilder text=new StringBuilder();
  Iterator<Pair<MutableTextRange,StringBuffer>> iterator=myAffectedFragments.iterator();
  while (iterator.hasNext() && currentNewDocumentOffset < end) {
    final Pair<MutableTextRange,StringBuffer> pair=iterator.next();
    final MutableTextRange range=pair.getFirst();
    final StringBuffer buffer=pair.getSecond();
    final int fragmentEndInNewDocument=range.getStartOffset() + buffer.length();
    if (range.getStartOffset() <= start && fragmentEndInNewDocument >= end) {
      return buffer.substring(start - range.getStartOffset(),end - range.getStartOffset());
    }
    if (range.getStartOffset() >= start) {
      final int effectiveStart=Math.max(currentNewDocumentOffset,start);
      text.append(myDocument.getCharsSequence(),effectiveStart - currentNewDocumentOffset + currentOldDocumentOffset,Math.min(range.getStartOffset(),end) - currentNewDocumentOffset + currentOldDocumentOffset);
      if (end > range.getStartOffset()) {
        text.append(buffer.substring(0,Math.min(end - range.getStartOffset(),buffer.length())));
      }
    }
    currentOldDocumentOffset+=range.getEndOffset() - currentNewDocumentOffset;
    currentNewDocumentOffset=fragmentEndInNewDocument;
  }
  if (currentNewDocumentOffset < end) {
    final int effectiveStart=Math.max(currentNewDocumentOffset,start);
    text.append(myDocument.getCharsSequence(),effectiveStart - currentNewDocumentOffset + currentOldDocumentOffset,end - currentNewDocumentOffset + currentOldDocumentOffset);
  }
  return text.toString();
}
