def bunidiff(t1, t2, l1, l2, header1, header2, opts=defaultopts):

    def contextend(l, len):
        ret = (l + opts.context)
        if (ret > len):
            ret = len
        return ret

    def contextstart(l):
        ret = (l - opts.context)
        if (ret < 0):
            return 0
        return ret

    def yieldhunk(hunk, header):
        if header:
            for x in header:
                yield x
        (astart, a2, bstart, b2, delta) = hunk
        aend = contextend(a2, len(l1))
        alen = (aend - astart)
        blen = (((b2 - bstart) + aend) - a2)
        func = ''
        if opts.showfunc:
            for x in xrange((astart - 1), (-1), (-1)):
                t = l1[x].rstrip()
                if funcre.match(t):
                    func = (' ' + t[:40])
                    break
        yield ('@@ -%d,%d +%d,%d @@%s\n' % ((astart + 1), alen, (bstart + 1), blen, func))
        for x in delta:
            yield x
        for x in xrange(a2, aend):
            yield (' ' + l1[x])
    header = [('--- %s\t\n' % header1), ('+++ %s\t\n' % header2)]
    if opts.showfunc:
        funcre = re.compile('\\w')
    if (opts.ignorews or opts.ignorewsamount):
        t1 = wsclean(opts, t1, False)
        t2 = wsclean(opts, t2, False)
    diff = bdiff.blocks(t1, t2)
    hunk = None
    for (i, s1) in enumerate(diff):
        if (i > 0):
            s = diff[(i - 1)]
        else:
            s = [0, 0, 0, 0]
        delta = []
        a1 = s[1]
        a2 = s1[0]
        b1 = s[3]
        b2 = s1[2]
        old = l1[a1:a2]
        new = l2[b1:b2]
        if ((not old) and (not new)):
            continue
        if opts.ignoreblanklines:
            if (wsclean(opts, ''.join(old)) == wsclean(opts, ''.join(new))):
                continue
        astart = contextstart(a1)
        bstart = contextstart(b1)
        prev = None
        if hunk:
            if (astart < ((hunk[1] + opts.context) + 1)):
                prev = hunk
                astart = hunk[1]
                bstart = hunk[3]
            else:
                for x in yieldhunk(hunk, header):
                    yield x
                header = None
        if prev:
            hunk[1] = a2
            hunk[3] = b2
            delta = hunk[4]
        else:
            hunk = [astart, a2, bstart, b2, delta]
        delta[len(delta):] = [(' ' + x) for x in l1[astart:a1]]
        delta[len(delta):] = [('-' + x) for x in old]
        delta[len(delta):] = [('+' + x) for x in new]
    if hunk:
        for x in yieldhunk(hunk, header):
            yield x
