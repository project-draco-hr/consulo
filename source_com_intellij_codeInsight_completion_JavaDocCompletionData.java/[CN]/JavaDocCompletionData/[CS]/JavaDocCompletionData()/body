{
  declareFinalScope(PsiDocTag.class);
  declareFinalScope(PsiDocTagValue.class);
{
    final CompletionVariant variant=new CompletionVariant(new TokenTypeFilter(PsiDocToken.DOC_COMMENT_DATA));
    variant.includeScopeClass(PsiDocToken.class,true);
    registerVariant(variant);
  }
{
    final ElementFilter position=new AndFilter(new NotFilter(new ScopeFilter(new ClassFilter(PsiInlineDocTag.class))),new TokenTypeFilter(PsiDocToken.DOC_TAG_NAME));
    final CompletionVariant variant=new CompletionVariant(PsiDocTag.class,position);
    variant.addCompletion(new TagChooser());
    registerVariant(variant);
  }
{
    final ElementFilter position=new AndFilter(new ScopeFilter(new ClassFilter(PsiInlineDocTag.class)),new TokenTypeFilter(PsiDocToken.DOC_TAG_NAME));
    final CompletionVariant variant=new CompletionVariant(PsiDocTag.class,position);
    variant.setInsertHandler(new InlineInsertHandler());
    variant.addCompletion(new TagChooser());
    registerVariant(variant);
  }
{
    final CompletionVariant variant=new CompletionVariant(PsiDocTagValue.class,new LeftNeighbour(new TextFilter("(")));
    variant.addCompletionFilter(TrueFilter.INSTANCE);
    variant.setInsertHandler(new MethodSignatureInsertHandler());
    variant.setItemProperty(LookupItem.FORCE_SHOW_SIGNATURE_ATTR,Boolean.TRUE);
    variant.setItemProperty(LookupItem.DO_NOT_AUTOCOMPLETE_ATTR,Boolean.TRUE);
    registerVariant(variant);
  }
{
    final CompletionVariant variant=new CompletionVariant(PsiDocTagValue.class,new NotFilter(new LeftNeighbour(new TextFilter("("))));
    variant.addCompletionFilter(new ElementFilter(){
      public boolean isAcceptable(      Object element,      PsiElement context){
        if (element instanceof CandidateInfo) {
          PsiDocTag tag=PsiTreeUtil.getParentOfType(context,PsiDocTag.class);
          if (tag != null && tag.getName().equals("value")) {
            CandidateInfo cInfo=(CandidateInfo)element;
            if (!(cInfo.getElement() instanceof PsiField))             return false;
            PsiField field=(PsiField)cInfo.getElement();
            return field.getModifierList().hasModifierProperty(PsiModifier.STATIC) && field.getInitializer() != null && ConstantExpressionEvaluator.computeConstantExpression(field.getInitializer(),null,false) != null;
          }
        }
        return true;
      }
      public boolean isClassAcceptable(      Class hintClass){
        return true;
      }
    }
);
    variant.setInsertHandler(new MethodSignatureInsertHandler());
    variant.setItemProperty(LookupItem.FORCE_SHOW_SIGNATURE_ATTR,Boolean.TRUE);
    registerVariant(variant);
  }
}
