{
  super.handleInsert(context,startOffset,data,item,signatureSelected,completionChar);
  if (completionChar == Lookup.REPLACE_SELECT_CHAR) {
    final Project project=context.project;
    PsiDocumentManager.getInstance(project).commitAllDocuments();
    final Editor editor=context.editor;
    final CaretModel caretModel=editor.getCaretModel();
    final int offset=caretModel.getOffset();
    final PsiElement element=context.file.findElementAt(offset - 1);
    PsiDocTag tag=PsiTreeUtil.getParentOfType(element,PsiDocTag.class);
    for (PsiElement child=tag.getFirstChild(); child != null; child=child.getNextSibling()) {
      if (child instanceof PsiDocToken) {
        PsiDocToken token=(PsiDocToken)child;
        if (token.getTokenType() == JavaDocTokenType.DOC_INLINE_TAG_END)         return;
      }
    }
    final String name=tag.getName();
    final CharSequence chars=editor.getDocument().getCharsSequence();
    final int currentOffset=caretModel.getOffset();
    if (chars.charAt(currentOffset) == '}') {
      caretModel.moveToOffset(offset + 1);
    }
 else     if (chars.charAt(currentOffset + 1) == '}' && chars.charAt(currentOffset) == ' ') {
      caretModel.moveToOffset(offset + 2);
    }
 else     if (name.equals(LINK_TAG)) {
      EditorModificationUtil.insertStringAtCaret(editor," }");
      caretModel.moveToOffset(offset + 1);
      editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
      editor.getSelectionModel().removeSelection();
    }
 else {
      EditorModificationUtil.insertStringAtCaret(editor,"}");
      caretModel.moveToOffset(offset + 1);
    }
  }
}
