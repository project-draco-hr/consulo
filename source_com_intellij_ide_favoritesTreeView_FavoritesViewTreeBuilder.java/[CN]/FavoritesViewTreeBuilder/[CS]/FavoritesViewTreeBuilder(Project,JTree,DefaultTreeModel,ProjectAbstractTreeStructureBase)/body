{
  super(project,tree,treeModel,treeStructure,null);
  setNodeDescriptorComparator(new AlphaComparator(){
    protected int getWeight(    NodeDescriptor descriptor){
      FavoritesTreeNodeDescriptor favoritesTreeNodeDescriptor=(FavoritesTreeNodeDescriptor)descriptor;
      final Object value=favoritesTreeNodeDescriptor.getElement().getValue();
      if (value instanceof ModuleGroup) {
        return 0;
      }
      if (value instanceof Module) {
        return 1;
      }
      if (value instanceof PsiDirectory || value instanceof PackageElement) {
        return 2;
      }
      if (value instanceof PsiClass) {
        return 4;
      }
      if (value instanceof PsiFile) {
        return 5;
      }
      if (value instanceof PsiElement) {
        return 6;
      }
      if (value instanceof Form) {
        return 7;
      }
      if (value instanceof LibraryGroupElement) {
        return 8;
      }
      if (value instanceof NamedLibraryElement) {
        return 9;
      }
      return 10;
    }
  }
);
  myPsiTreeChangeListener=new ProjectViewPsiTreeChangeListener(){
    protected DefaultMutableTreeNode getRootNode(){
      return myRootNode;
    }
    protected AbstractTreeUpdater getUpdater(){
      return myUpdater;
    }
    protected boolean isFlattenPackages(){
      return ((FavoritesTreeStructure)myTreeStructure).getFavoritesConfiguration().IS_FLATTEN_PACKAGES;
    }
  }
;
  myModuleRootListener=new ModuleRootListener(){
    public void beforeRootsChange(    ModuleRootEvent event){
    }
    public void rootsChanged(    ModuleRootEvent event){
      myUpdater.addSubtreeToUpdate(myRootNode);
    }
  }
;
  PsiManager.getInstance(myProject).addPsiTreeChangeListener(myPsiTreeChangeListener);
  ProjectRootManager.getInstance(myProject).addModuleRootListener(myModuleRootListener);
  myFileStatusListener=new MyFileStatusListener();
  FileStatusManager.getInstance(myProject).addFileStatusListener(myFileStatusListener);
  myCopyPasteListener=new MyCopyPasteListener();
  CopyPasteManager.getInstance().addContentChangedListener(myCopyPasteListener);
  initRootNode();
}
