{
  super(project,tree,treeModel,treeStructure,null);
  setNodeDescriptorComparator(new Comparator<NodeDescriptor>(){
    private int getWeight(    NodeDescriptor descriptor){
      FavoritesTreeNodeDescriptor favoritesTreeNodeDescriptor=(FavoritesTreeNodeDescriptor)descriptor;
      Object value=favoritesTreeNodeDescriptor.getElement().getValue();
      if (value instanceof SmartPsiElementPointer) {
        value=((SmartPsiElementPointer)value).getElement();
      }
      if (value instanceof ModuleGroup) {
        return 0;
      }
      if (value instanceof Module) {
        return 1;
      }
      if (value instanceof PsiDirectory || value instanceof PackageElement) {
        return 2;
      }
      if (value instanceof PsiFile) {
        return 4;
      }
      if (value instanceof PsiClass) {
        return 5;
      }
      if (value instanceof PsiField) {
        return 6;
      }
      if (value instanceof PsiMethod) {
        return 7;
      }
      if (value instanceof PsiElement) {
        return 8;
      }
      if (value instanceof Form) {
        return 9;
      }
      if (value instanceof LibraryGroupElement) {
        return 10;
      }
      if (value instanceof NamedLibraryElement) {
        return 11;
      }
      return 12;
    }
    public int compare(    NodeDescriptor nd1,    NodeDescriptor nd2){
      if (nd1 instanceof FavoritesTreeNodeDescriptor && nd2 instanceof FavoritesTreeNodeDescriptor) {
        FavoritesTreeNodeDescriptor fd1=(FavoritesTreeNodeDescriptor)nd1;
        FavoritesTreeNodeDescriptor fd2=(FavoritesTreeNodeDescriptor)nd2;
        int weight1=getWeight(fd1);
        int weight2=getWeight(fd2);
        if (weight1 != weight2) {
          return weight1 - weight2;
        }
        String s1=fd1.toString();
        String s2=fd2.toString();
        if (s1 == null)         return s2 == null ? 0 : -1;
        if (s2 == null)         return +1;
        if (!s1.equals(s2)) {
          return s1.compareToIgnoreCase(s2);
        }
 else {
          s1=fd1.getLocation();
          s2=fd2.getLocation();
          if (s1 == null)           return s2 == null ? 0 : -1;
          if (s2 == null)           return +1;
          return s1.compareToIgnoreCase(s2);
        }
      }
      return 0;
    }
  }
);
  myPsiTreeChangeListener=new ProjectViewPsiTreeChangeListener(){
    protected DefaultMutableTreeNode getRootNode(){
      return myRootNode;
    }
    protected AbstractTreeUpdater getUpdater(){
      return myUpdater;
    }
    protected boolean isFlattenPackages(){
      return ((FavoritesTreeStructure)myTreeStructure).getFavoritesConfiguration().IS_FLATTEN_PACKAGES;
    }
    protected void childrenChanged(    PsiElement parent){
      if (findNodeByElement(parent) == null) {
        getUpdater().addSubtreeToUpdate(getRootNode());
      }
 else {
        super.childrenChanged(parent);
      }
    }
  }
;
  myModuleRootListener=new ModuleRootListener(){
    public void beforeRootsChange(    ModuleRootEvent event){
    }
    public void rootsChanged(    ModuleRootEvent event){
      myUpdater.addSubtreeToUpdate(myRootNode);
    }
  }
;
  PsiManager.getInstance(myProject).addPsiTreeChangeListener(myPsiTreeChangeListener);
  ProjectRootManager.getInstance(myProject).addModuleRootListener(myModuleRootListener);
  myFileStatusListener=new MyFileStatusListener();
  FileStatusManager.getInstance(myProject).addFileStatusListener(myFileStatusListener);
  myCopyPasteListener=new CopyPasteUtil.DefaultCopyPasteListener(myUpdater);
  CopyPasteManager.getInstance().addContentChangedListener(myCopyPasteListener);
  initRootNode();
}
