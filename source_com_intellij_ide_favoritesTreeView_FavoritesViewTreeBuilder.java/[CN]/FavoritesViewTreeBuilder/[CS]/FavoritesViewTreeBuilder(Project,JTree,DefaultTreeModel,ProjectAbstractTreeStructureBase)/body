{
  super(project,tree,treeModel,treeStructure,IndexComparator.INSTANCE);
  myProject=project;
  myPsiTreeChangeListener=new ProjectViewPsiTreeChangeListener(){
    protected DefaultMutableTreeNode getRootNode(){
      return myRootNode;
    }
    protected AbstractTreeUpdater getUpdater(){
      return myUpdater;
    }
    protected boolean isFlattenPackages(){
      return ((FavoritesTreeStructure)myTreeStructure).getFavoritesConfiguration().IS_FLATTEN_PACKAGES;
    }
  }
;
  myModuleRootListener=new ModuleRootListener(){
    public void beforeRootsChange(    ModuleRootEvent event){
    }
    public void rootsChanged(    ModuleRootEvent event){
      myUpdater.addSubtreeToUpdate(myRootNode);
    }
  }
;
  PsiManager.getInstance(myProject).addPsiTreeChangeListener(myPsiTreeChangeListener);
  ProjectRootManager.getInstance(myProject).addModuleRootListener(myModuleRootListener);
  myFileStatusListener=new MyFileStatusListener();
  FileStatusManager.getInstance(myProject).addFileStatusListener(myFileStatusListener);
  myCopyPasteListener=new MyCopyPasteListener();
  CopyPasteManager.getInstance().addContentChangedListener(myCopyPasteListener);
  initRootNode();
}
