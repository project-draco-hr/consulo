{
  super(project,tree,treeModel,treeStructure,null);
  myListName=name;
  final MessageBusConnection connection=myProject.getMessageBus().connect(this);
  myPsiTreeChangeListener=new ProjectViewPsiTreeChangeListener(){
    protected DefaultMutableTreeNode getRootNode(){
      return myRootNode;
    }
    protected AbstractTreeUpdater getUpdater(){
      return myUpdater;
    }
    protected boolean isFlattenPackages(){
      return ((FavoritesTreeStructure)myTreeStructure).isFlattenPackages();
    }
    protected void childrenChanged(    PsiElement parent){
      if (findNodeByElement(parent) == null) {
        getUpdater().addSubtreeToUpdate(getRootNode());
      }
 else {
        super.childrenChanged(parent);
      }
    }
  }
;
  connection.subscribe(ProjectTopics.PROJECT_ROOTS,new ModuleRootListener(){
    public void beforeRootsChange(    ModuleRootEvent event){
    }
    public void rootsChanged(    ModuleRootEvent event){
      myUpdater.addSubtreeToUpdate(myRootNode);
    }
  }
);
  PsiManager.getInstance(myProject).addPsiTreeChangeListener(myPsiTreeChangeListener);
  myFileStatusListener=new MyFileStatusListener();
  FileStatusManager.getInstance(myProject).addFileStatusListener(myFileStatusListener);
  myCopyPasteListener=new CopyPasteUtil.DefaultCopyPasteListener(myUpdater);
  CopyPasteManager.getInstance().addContentChangedListener(myCopyPasteListener);
  myFavoritesListener=new FavoritesManager.FavoritesListener(){
    public void rootsChanged(    String listName){
      if (myListName.equals(listName)) {
        updateFromRoot();
      }
    }
    public void listAdded(    String listName){
      updateFromRoot();
    }
    public void listRemoved(    String listName){
      updateFromRoot();
    }
  }
;
  FavoritesManager.getInstance(myProject).addFavoritesListener(myFavoritesListener);
  initRootNode();
}
