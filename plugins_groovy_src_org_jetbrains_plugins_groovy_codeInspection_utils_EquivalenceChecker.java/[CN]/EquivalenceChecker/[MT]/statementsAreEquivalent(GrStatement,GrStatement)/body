{
  if (exp1 == null && exp2 == null) {
    return true;
  }
  if (exp1 == null || exp2 == null) {
    return false;
  }
  final int type1=getStatementType(exp1);
  final int type2=getStatementType(exp2);
  if (type1 != type2) {
    return false;
  }
switch (type1) {
case BLOCK_STATEMENT:
    return blockStatementsAreEquivalent((GrBlockStatement)exp1,(GrBlockStatement)exp2);
case BREAK_STATEMENT:
  return true;
case CONTINUE_STATEMENT:
return true;
case VAR_STATEMENT:
return varStatementsAreEquivalent((GrVariableDeclaration)exp1,(GrVariableDeclaration)exp2);
case EMPTY_STATEMENT:
return true;
case EXPRESSION_STATEMENT:
return expressionStatementsAreEquivalent((GrExpression)exp1,(GrExpression)exp2);
case FOR_STATEMENT:
return forInStatementsAreEquivalent((GrForStatement)exp1,(GrForStatement)exp2);
case IF_STATEMENT:
return ifStatementsAreEquivalent((GrIfStatement)exp1,(GrIfStatement)exp2);
case RETURN_STATEMENT:
return returnStatementsAreEquivalent((GrReturnStatement)exp1,(GrReturnStatement)exp2);
case SWITCH_STATEMENT:
return switchStatementsAreEquivalent((GrSwitchStatement)exp1,(GrSwitchStatement)exp2);
case THROW_STATEMENT:
return throwStatementsAreEquivalent((GrThrowStatement)exp1,(GrThrowStatement)exp2);
case TRY_STATEMENT:
return tryStatementsAreEquivalent((GrTryCatchStatement)exp1,(GrTryCatchStatement)exp2);
case WHILE_STATEMENT:
return whileStatementsAreEquivalent((GrWhileStatement)exp1,(GrWhileStatement)exp2);
case SYNCHRONIZED_STATEMENT:
return synchronizedStatementsAreEquivalent((GrSynchronizedStatement)exp1,(GrSynchronizedStatement)exp2);
case ASSERT_STATEMENT:
return assertStatementsAreEquivalent((GrAssertStatement)exp1,(GrAssertStatement)exp2);
default :
return false;
}
}
