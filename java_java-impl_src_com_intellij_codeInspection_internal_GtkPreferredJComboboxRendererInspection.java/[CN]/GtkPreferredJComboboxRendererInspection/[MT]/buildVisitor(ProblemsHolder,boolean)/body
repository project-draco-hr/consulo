{
  return new JavaElementVisitor(){
    @Override public void visitReferenceExpression(    PsiReferenceExpression expression){
    }
    @Override public void visitClass(    final PsiClass aClass){
      final PsiClass superClass=aClass.getSuperClass();
      if (superClass != null && "javax.swing.DefaultListCellRenderer".equals(superClass.getQualifiedName())) {
        final PsiIdentifier nameIdentifier=aClass.getNameIdentifier();
        holder.registerProblem(nameIdentifier != null ? nameIdentifier : aClass,"Please use ListCellRendererWrapper instead to prevent artifacts under GTK+ Look and Feel.");
      }
    }
    @Override public void visitAnonymousClass(    final PsiAnonymousClass aClass){
      if ("javax.swing.DefaultListCellRenderer".equals(aClass.getQualifiedName())) {
        holder.registerProblem(aClass.getBaseClassReference(),"Please use ListCellRendererWrapper instead to prevent artifacts under GTK+ Look and Feel.");
      }
    }
  }
;
}
