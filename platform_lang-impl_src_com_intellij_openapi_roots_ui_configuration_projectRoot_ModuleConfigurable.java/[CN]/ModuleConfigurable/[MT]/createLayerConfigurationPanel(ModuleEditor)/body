{
  BorderLayoutPanel panel=JBUI.Panels.simplePanel();
  ModifiableRootModel moduleRootModel=moduleEditor.getModifiableRootModelProxy();
  final MutableCollectionComboBoxModel<String> model=new MutableCollectionComboBoxModel<String>(new ArrayList<String>(moduleRootModel.getLayers().keySet()),moduleRootModel.getCurrentLayerName());
  final ComboBox comboBox=new ComboBox(model);
  comboBox.setEnabled(model.getSize() > 1);
  moduleEditor.addChangeListener(new ModuleEditor.ChangeListener(){
    @Override public void moduleStateChanged(    ModifiableRootModel moduleRootModel){
      model.update(new ArrayList<String>(moduleRootModel.getLayers().keySet()));
      model.setSelectedItem(moduleRootModel.getCurrentLayerName());
      model.update();
      comboBox.setEnabled(comboBox.getItemCount() > 1);
    }
  }
);
  comboBox.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      if (e.getStateChange() == ItemEvent.SELECTED) {
        moduleEditor.getModifiableRootModelProxy().setCurrentLayer((String)comboBox.getSelectedItem());
      }
    }
  }
);
  DefaultActionGroup group=new DefaultActionGroup();
  group.add(new NewLayerAction(moduleEditor,false));
  group.add(new DeleteLayerAction(moduleEditor));
  group.add(new NewLayerAction(moduleEditor,true));
  ActionToolbar actionToolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,group,true);
  JComponent toolbarComponent=actionToolbar.getComponent();
  toolbarComponent.setBorder(JBUI.Borders.empty());
  panel.addToLeft(LabeledComponent.left(comboBox,"Layer")).addToRight(toolbarComponent);
  return panel;
}
