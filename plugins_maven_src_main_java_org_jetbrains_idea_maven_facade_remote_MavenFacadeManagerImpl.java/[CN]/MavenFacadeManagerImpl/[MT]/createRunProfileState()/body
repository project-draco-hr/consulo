{
  final CommandLineState state=new CommandLineState(null){
    private SimpleJavaParameters createJavaParameters() throws ExecutionException {
      final SimpleJavaParameters params=new SimpleJavaParameters();
      final Project project=mySupport.getProject();
      params.setCharset(EncodingProjectManager.getInstance(project).getDefaultCharset());
      final MavenRunnerSettings runnerSettings=MavenRunner.getInstance(project).getState();
      MavenExternalParameters.configureSimpleJavaParameters(params,new MavenRunnerParameters(),MavenProjectsManager.getInstance(project).getGeneralSettings(),runnerSettings);
      final Sdk ideaJdk=new SimpleJavaSdkType().createJdk("tmp",SystemProperties.getJavaHome());
      params.setJdk(ideaJdk);
      params.setWorkingDirectory(PathManager.getBinPath());
      final ArrayList<String> classPath=new ArrayList<String>();
      ContainerUtil.addIfNotNull(PathUtil.getJarPathForClass(StringUtil.class),classPath);
      ContainerUtil.addIfNotNull(PathUtil.getJarPathForClass(NotNull.class),classPath);
      ContainerUtil.addIfNotNull(PathUtil.getJarPathForClass(XMLStreamException.class),classPath);
      params.getClassPath().addAll(classPath);
      params.setMainClass(MAIN_CLASS);
      params.getClassPath().addFirst(getJarPath(MavenFacadeManagerImpl.this.getClass(),MAIN_CLASS));
      tuneParams(params);
      return params;
    }
    @Override public ExecutionResult execute(    @NotNull final Executor executor,    @NotNull final ProgramRunner runner) throws ExecutionException {
      final ProcessHandler processHandler=startProcess();
      return new DefaultExecutionResult(null,processHandler,AnAction.EMPTY_ARRAY);
    }
    protected OSProcessHandler startProcess() throws ExecutionException {
      final SimpleJavaParameters params=createJavaParameters();
      final Sdk sdk=params.getJdk();
      final GeneralCommandLine commandLine=JdkUtil.setupJVMCommandLine(((JavaSdkType)sdk.getSdkType()).getVMExecutablePath(sdk),params,JdkUtil.useDynamicClasspath(PlatformDataKeys.PROJECT.getData(DataManager.getInstance().getDataContext())));
      final OSProcessHandler processHandler=new OSProcessHandler(commandLine.createProcess(),commandLine.getCommandLineString()){
        @Override public Charset getCharset(){
          return commandLine.getCharset();
        }
      }
;
      ProcessTerminatedListener.attach(processHandler);
      return processHandler;
    }
  }
;
  return state;
}
