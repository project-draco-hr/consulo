{
  filters.add(new MyFilter(DiagnosticBundle.message("log.console.filter.show.all"),prefs){
    @Override public void selectFilter(){
      prefs.FILTER_ERRORS=false;
      prefs.FILTER_INFO=false;
      prefs.FILTER_WARNINGS=false;
      prefs.FILTER_DEBUG=false;
    }
    @Override public boolean isSelected(){
      return !prefs.FILTER_ERRORS && !prefs.FILTER_INFO && !prefs.FILTER_WARNINGS&& !prefs.FILTER_DEBUG;
    }
  }
);
  filters.add(new MyFilter(DiagnosticBundle.message("log.console.filter.show.errors.warnings.and.infos"),prefs){
    @Override public void selectFilter(){
      prefs.FILTER_ERRORS=false;
      prefs.FILTER_INFO=false;
      prefs.FILTER_WARNINGS=false;
      prefs.FILTER_DEBUG=true;
    }
    @Override public boolean isSelected(){
      return !prefs.FILTER_ERRORS && !prefs.FILTER_INFO && !prefs.FILTER_WARNINGS&& prefs.FILTER_DEBUG;
    }
  }
);
  filters.add(new MyFilter(DiagnosticBundle.message("log.console.filter.show.errors.and.warnings"),prefs){
    @Override public void selectFilter(){
      prefs.FILTER_ERRORS=false;
      prefs.FILTER_INFO=true;
      prefs.FILTER_WARNINGS=false;
      prefs.FILTER_DEBUG=true;
    }
    @Override public boolean isSelected(){
      return !prefs.FILTER_ERRORS && prefs.FILTER_INFO && !prefs.FILTER_WARNINGS&& prefs.FILTER_DEBUG;
    }
  }
);
  filters.add(new MyFilter(DiagnosticBundle.message("log.console.filter.show.errors"),prefs){
    @Override public void selectFilter(){
      prefs.FILTER_ERRORS=false;
      prefs.FILTER_INFO=true;
      prefs.FILTER_WARNINGS=true;
      prefs.FILTER_DEBUG=true;
    }
    @Override public boolean isSelected(){
      return !prefs.FILTER_ERRORS && prefs.FILTER_INFO && prefs.FILTER_WARNINGS&& prefs.FILTER_DEBUG;
    }
  }
);
}
