{
  final String levelName=toolElement.getAttributeValue(LEVEL_ATTRIBUTE);
  final ProfileManager profileManager=profile.getProfileManager();
  final SeverityRegistrar registrar=((SeverityProvider)profileManager).getOwnSeverityRegistrar();
  HighlightDisplayLevel level=levelName != null ? HighlightDisplayLevel.find(registrar.getSeverity(levelName)) : null;
  if (level == null || level == HighlightDisplayLevel.DO_NOT_SHOW) {
    level=HighlightDisplayLevel.WARNING;
  }
  myDefaultState.setLevel(level);
  final String enabled=toolElement.getAttributeValue(ENABLED_ATTRIBUTE);
  final boolean isEnabled=enabled != null && Boolean.parseBoolean(enabled);
  myEnabled=isEnabled;
  final String enabledTool=toolElement.getAttributeValue(ENABLED_BY_DEFAULT_ATTRIBUTE);
  myDefaultState.setEnabled(enabledTool != null ? Boolean.parseBoolean(enabledTool) : isEnabled);
  final InspectionToolWrapper toolWrapper=myDefaultState.getTool();
  final List scopeElements=toolElement.getChildren(ProfileEx.SCOPE);
  for (  Object sO : scopeElements) {
    final Element scopeElement=(Element)sO;
    final String scopeName=scopeElement.getAttributeValue(ProfileEx.NAME);
    if (scopeName == null) {
      continue;
    }
    final NamedScopesHolder scopesHolder=profileManager.getScopesManager();
    NamedScope namedScope=null;
    if (scopesHolder != null) {
      namedScope=scopesHolder.getScope(scopeName);
    }
    final String errorLevel=scopeElement.getAttributeValue(LEVEL_ATTRIBUTE);
    final String enabledInScope=scopeElement.getAttributeValue(ENABLED_ATTRIBUTE);
    final InspectionToolWrapper copyToolWrapper=toolWrapper.createCopy();
    if (scopeElement.getAttributes().size() > 3 || !scopeElement.getChildren().isEmpty()) {
      copyToolWrapper.getTool().readSettings(scopeElement);
    }
    HighlightDisplayLevel scopeLevel=errorLevel != null ? HighlightDisplayLevel.find(registrar.getSeverity(errorLevel)) : null;
    if (scopeLevel == null) {
      scopeLevel=level;
    }
    if (namedScope != null) {
      addTool(namedScope,copyToolWrapper,enabledInScope != null && Boolean.parseBoolean(enabledInScope),scopeLevel);
    }
 else {
      addTool(scopeName,copyToolWrapper,enabledInScope != null && Boolean.parseBoolean(enabledInScope),scopeLevel);
    }
  }
  if (toolElement.getAttributes().size() > 4 || toolElement.getChildren().size() > scopeElements.size()) {
    toolWrapper.getTool().readSettings(toolElement);
  }
}
