{
  final SmartList<String> result=new SmartList<String>();
  LibraryDetectionManager.getInstance().processProperties(Arrays.asList(classRoots),new LibraryDetectionManager.LibraryPropertiesProcessor(){
    @Override public <P extends LibraryProperties>boolean processProperties(    @NotNull LibraryKind<P> kind,    @NotNull P properties){
      final LibraryPresentationProvider<P> provider=getPresentationProvider(kind);
      if (provider != null) {
        ContainerUtil.addIfNotNull(result,provider.getDescription(properties));
      }
      return true;
    }
  }
);
  return result;
}
