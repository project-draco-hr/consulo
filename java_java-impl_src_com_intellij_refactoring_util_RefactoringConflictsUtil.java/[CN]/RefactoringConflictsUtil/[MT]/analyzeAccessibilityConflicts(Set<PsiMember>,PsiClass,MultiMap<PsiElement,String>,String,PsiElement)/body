{
  if (VisibilityUtil.ESCALATE_VISIBILITY.equals(newVisibility)) {
    newVisibility=PsiModifier.PUBLIC;
  }
  for (  PsiMember member : membersToMove) {
    checkUsedElements(member,member,membersToMove,targetClass,context,conflicts);
    PsiModifierList modifierList=member.getModifierList();
    if (modifierList != null)     modifierList=(PsiModifierList)modifierList.copy();
    if (newVisibility != null) {
      try {
        if (modifierList != null)         setVisibility(modifierList,newVisibility);
      }
 catch (      IncorrectOperationException ex) {
      }
    }
    JavaPsiFacade manager=JavaPsiFacade.getInstance(member.getProject());
    for (    PsiReference psiReference : ReferencesSearch.search(member)) {
      PsiElement ref=psiReference.getElement();
      if (!RefactoringHierarchyUtil.willBeInTargetClass(ref,membersToMove,targetClass,false)) {
        if (targetClass != null && !manager.getResolveHelper().isAccessible(targetClass,targetClass.getModifierList(),ref,null,null)) {
          String message=RefactoringBundle.message("0.is.1.and.will.not.be.accessible.from.2.in.the.target.class",RefactoringUIUtil.getDescription(targetClass,true),VisibilityUtil.getVisibilityStringToDisplay(targetClass),RefactoringUIUtil.getDescription(ConflictsUtil.getContainer(ref),true));
          message=CommonRefactoringUtil.capitalize(message);
          conflicts.putValue(targetClass,message);
        }
 else         if (!manager.getResolveHelper().isAccessible(member,modifierList,ref,null,null)) {
          String message=RefactoringBundle.message("0.is.1.and.will.not.be.accessible.from.2.in.the.target.class",RefactoringUIUtil.getDescription(member,true),VisibilityUtil.getVisibilityStringToDisplay(member),RefactoringUIUtil.getDescription(ConflictsUtil.getContainer(ref),true));
          message=CommonRefactoringUtil.capitalize(message);
          conflicts.putValue(member,message);
        }
      }
    }
  }
}
