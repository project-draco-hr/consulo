{
  if (!PsiUtil.isAccessible(refMember,newContext,accessClass)) {
    String message=RefactoringBundle.message("0.is.1.and.will.not.be.accessible.from.2.in.the.target.class",RefactoringUIUtil.getDescription(refMember,true),VisibilityUtil.getVisibilityStringToDisplay(refMember),RefactoringUIUtil.getDescription(member,false));
    message=CommonRefactoringUtil.capitalize(message);
    conflicts.putValue(refMember,message);
  }
 else   if (newContext instanceof PsiClass && refMember instanceof PsiField && refMember.getContainingClass() == member.getContainingClass()) {
    final PsiField fieldInSubClass=((PsiClass)newContext).findFieldByName(refMember.getName(),false);
    if (fieldInSubClass != null && fieldInSubClass != refMember) {
      conflicts.putValue(refMember,CommonRefactoringUtil.capitalize(RefactoringUIUtil.getDescription(fieldInSubClass,true) + " would hide " + RefactoringUIUtil.getDescription(refMember,true)+ " which is used by moved "+ RefactoringUIUtil.getDescription(member,false)));
    }
  }
}
