{
  if (myScopeModules.isEmpty()) {
    return false;
  }
  Module candidateModule=null;
  int maxUrlLength=0;
  final ProjectFileIndex projectFileIndex=ProjectRootManager.getInstance(myProject).getFileIndex();
  for (  final Module module : myModules) {
    final String[] contentRootUrls=getModuleContentUrls(module);
    for (    final String contentRootUrl : contentRootUrls) {
      if (contentRootUrl.length() < maxUrlLength) {
        continue;
      }
      if (!isUrlUnderRoot(url,contentRootUrl)) {
        continue;
      }
      if (contentRootUrl.length() == maxUrlLength) {
        if (candidateModule == null) {
          candidateModule=module;
        }
 else {
          if (!candidateModule.equals(module)) {
            candidateModule=ApplicationManager.getApplication().runReadAction(new Computable<Module>(){
              @Override public Module compute(){
                final VirtualFile contentRootFile=VirtualFileManager.getInstance().findFileByUrl(contentRootUrl);
                if (contentRootFile != null) {
                  return projectFileIndex.getModuleForFile(contentRootFile);
                }
                return null;
              }
            }
);
          }
        }
      }
 else {
        maxUrlLength=contentRootUrl.length();
        candidateModule=module;
      }
    }
  }
  if (candidateModule != null && myScopeModules.contains(candidateModule)) {
    val moduleRootManager=ModuleRootManager.getInstance(candidateModule);
    val excludeRootUrls=moduleRootManager.getContentFolderUrls(ContentFolderScopes.excluded());
    for (    String excludeRootUrl : excludeRootUrls) {
      if (isUrlUnderRoot(url,excludeRootUrl)) {
        return false;
      }
    }
    for (    String sourceRootUrl : getModuleContentUrls(candidateModule)) {
      if (isUrlUnderRoot(url,sourceRootUrl)) {
        return true;
      }
    }
  }
  return false;
}
