{
  myCommanderPanel=new MyCommanderPanel(myProject);
  PsiElement parent=getPsiFile(myProject);
  if (parent instanceof PsiJavaFile) {
    PsiClass[] classes=((PsiJavaFile)parent).getClasses();
    if (classes.length == 1) {
      parent=classes[0];
    }
  }
  AbstractTreeStructure treeStructure=new MyStructureTreeStructure();
  myCommanderPanel.setBuilder(new ProjectListBuilder(myProject,myCommanderPanel,treeStructure,null,false){
    protected boolean nodeIsAcceptableForElement(    AbstractTreeNode node,    Object element){
      return Comparing.equal(((StructureViewTreeElement)node.getValue()).getValue(),element);
    }
    protected void refreshSelection(){
      if (myShouldNarrowDown) {
        myCommanderPanel.updateSpeedSearch();
      }
    }
    protected List<AbstractTreeNode> getAllAcceptableNodes(    final Object[] childElements,    VirtualFile file){
      ArrayList<AbstractTreeNode> result=new ArrayList<AbstractTreeNode>();
      for (      Object childElement : childElements) {
        result.add((AbstractTreeNode)childElement);
      }
      return result;
    }
  }
);
  myCommanderPanel.setTitlePanelVisible(false);
  new AnAction(){
    public void actionPerformed(    AnActionEvent e){
      final boolean succeeded=myCommanderPanel.navigateSelectedElement();
      if (succeeded) {
        unregisterCustomShortcutSet(myCommanderPanel);
      }
    }
  }
.registerCustomShortcutSet(ActionManager.getInstance().getAction(IdeActions.ACTION_EDIT_SOURCE).getShortcutSet(),myCommanderPanel);
  myCommanderPanel.setPreferredSize(new Dimension(400,500));
  JPanel panel=new JPanel(new GridBagLayout());
  final JCheckBox checkBox=new JCheckBox(IdeBundle.message("checkbox.narrow.down.the.list.on.typing"));
  checkBox.setSelected(PropertiesComponent.getInstance().isTrueValue(ourPropertyKey));
  checkBox.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      myShouldNarrowDown=checkBox.isSelected();
      PropertiesComponent.getInstance().setValue(ourPropertyKey,Boolean.toString(myShouldNarrowDown));
      ProjectListBuilder builder=(ProjectListBuilder)myCommanderPanel.getBuilder();
      if (builder == null) {
        return;
      }
      builder.addUpdateRequest();
    }
  }
);
  checkBox.setFocusable(false);
  panel.add(checkBox,new GridBagConstraints(0,0,1,1,0,0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,5,0,5),0,0));
  panel.add(myCommanderPanel,new GridBagConstraints(0,1,1,1,1,1,GridBagConstraints.WEST,GridBagConstraints.BOTH,new Insets(0,0,0,0),0,0));
  return panel;
}
