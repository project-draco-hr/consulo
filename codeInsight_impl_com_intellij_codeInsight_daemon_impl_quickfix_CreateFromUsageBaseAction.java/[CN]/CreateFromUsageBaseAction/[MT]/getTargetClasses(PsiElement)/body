{
  PsiClass psiClass=null;
  PsiExpression qualifier=null;
  boolean allowOuterClasses=false;
  if (element instanceof PsiNewExpression) {
    final PsiNewExpression newExpression=(PsiNewExpression)element;
    qualifier=newExpression.getQualifier();
    if (qualifier == null) {
      PsiJavaCodeReferenceElement ref=newExpression.getClassReference();
      if (ref != null) {
        PsiElement refElement=ref.resolve();
        if (refElement instanceof PsiClass)         psiClass=(PsiClass)refElement;
      }
    }
  }
 else   if (element instanceof PsiReferenceExpression) {
    qualifier=((PsiReferenceExpression)element).getQualifierExpression();
  }
 else   if (element instanceof PsiMethodCallExpression) {
    final PsiReferenceExpression methodExpression=((PsiMethodCallExpression)element).getMethodExpression();
    qualifier=methodExpression.getQualifierExpression();
    final @NonNls String referenceName=methodExpression.getReferenceName();
    if (referenceName == null)     return null;
  }
  if (qualifier != null) {
    PsiType type=qualifier.getType();
    if (type instanceof PsiClassType) {
      psiClass=((PsiClassType)type).resolve();
    }
    if (qualifier instanceof PsiJavaCodeReferenceElement) {
      final PsiElement resolved=((PsiJavaCodeReferenceElement)qualifier).resolve();
      if (resolved instanceof PsiClass) {
        if (psiClass == null)         psiClass=(PsiClass)resolved;
      }
    }
  }
 else   if (psiClass == null) {
    psiClass=PsiTreeUtil.getParentOfType(element,PsiClass.class);
    allowOuterClasses=true;
  }
  if (psiClass instanceof PsiTypeParameter) {
    PsiClass[] supers=psiClass.getSupers();
    List<PsiClass> filtered=new ArrayList<PsiClass>();
    for (    PsiClass aSuper : supers) {
      if (!aSuper.getManager().isInProject(aSuper))       continue;
      if (!(aSuper instanceof PsiTypeParameter))       filtered.add(aSuper);
    }
    return filtered.size() > 0 ? filtered.toArray(new PsiClass[filtered.size()]) : null;
  }
 else {
    if (psiClass == null || !psiClass.getManager().isInProject(psiClass)) {
      return null;
    }
    if (!allowOuterClasses || !isAllowOuterTargetClass() || ApplicationManager.getApplication().isUnitTestMode())     return new PsiClass[]{psiClass};
    List<PsiClass> result=new ArrayList<PsiClass>();
    while (psiClass != null) {
      result.add(psiClass);
      if (psiClass.hasModifierProperty(PsiModifier.STATIC))       break;
      psiClass=PsiTreeUtil.getParentOfType(psiClass,PsiClass.class);
    }
    return result.toArray(new PsiClass[result.size()]);
  }
}
