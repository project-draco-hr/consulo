{
  ApplicationManager.getApplication().assertIsDispatchThread();
  DataContext dataContext=DataManager.getInstance().getDataContext(editor.getComponent());
  Project project=(Project)dataContext.getData(DataConstants.PROJECT);
  Lookup activeLookup=LookupManager.getInstance(project).getActiveLookup();
  if (activeLookup != null && (flags & LOOKUP_ITEM_ACCEPTED) != 0) {
    return getLookupItem(activeLookup);
  }
  Document document=editor.getDocument();
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  PsiFile file=PsiDocumentManager.getInstance(project).getPsiFile(document);
  if (file == null)   return null;
  offset=adjustOffset(document,offset);
  PsiElement element=file.findElementAt(offset);
  if (element == null)   return null;
  if ((flags & ELEMENT_NAME_ACCEPTED) != 0) {
    PsiElement parent=element.getParent();
    if (element instanceof PsiIdentifier) {
      if (parent instanceof PsiClass && element.equals(((PsiClass)parent).getNameIdentifier())) {
        return parent;
      }
 else       if (parent instanceof PsiVariable && element.equals(((PsiVariable)parent).getNameIdentifier())) {
        return parent;
      }
 else       if (parent instanceof PsiMethod && element.equals(((PsiMethod)parent).getNameIdentifier())) {
        return parent;
      }
 else       if (parent instanceof PsiPointcutDef && element.equals(((PsiPointcutDef)parent).getNameIdentifier())) {
        return parent;
      }
    }
 else     if (parent instanceof PsiNamedElement) {
      if (parent instanceof XmlElementDecl) {
        return parent;
      }
      if (parent.getTextOffset() == element.getTextOffset() && Comparing.equal(((PsiNamedElement)parent).getName(),element.getText()) && !(parent instanceof XmlAttribute)) {
        return parent;
      }
    }
  }
  if (element instanceof PsiKeyword) {
    if (element.getParent() instanceof PsiThisExpression) {
      if ((flags & THIS_ACCEPTED) == 0)       return null;
      PsiType type=((PsiThisExpression)element.getParent()).getType();
      if (!(type instanceof PsiClassType))       return null;
      return ((PsiClassType)type).resolve();
    }
    if (element.getParent() instanceof PsiSuperExpression) {
      if ((flags & SUPER_ACCEPTED) == 0)       return null;
      PsiType type=((PsiSuperExpression)element.getParent()).getType();
      if (!(type instanceof PsiClassType))       return null;
      return ((PsiClassType)type).resolve();
    }
    if ("try".equals(element.getText())) {
      if ((flags & TRY_ACCEPTED) == 0)       return null;
      return element;
    }
    if ("catch".equals(element.getText())) {
      if ((flags & CATCH_ACCEPTED) == 0)       return null;
      return element;
    }
    if ("throws".equals(element.getText())) {
      if ((flags & THROWS_ACCEPTED) == 0)       return null;
      return element;
    }
    if ("throw".equals(element.getText())) {
      if ((flags & THROW_ACCEPTED) != 0)       return element;
      if ((flags & THROW_STATEMENT_ACCEPTED) != 0) {
        final PsiElement parent=element.getParent();
        if (parent instanceof PsiThrowStatement) {
          return parent;
        }
      }
      return null;
    }
    if ("return".equals(element.getText())) {
      if ((flags & RETURN_ACCEPTED) == 0)       return null;
      return element;
    }
  }
  if ((flags & REFERENCED_ELEMENT_ACCEPTED) != 0) {
    final PsiElement referenceOrReferencedElement=getReferenceOrReferencedElement(file,editor,flags,offset);
    if (referenceOrReferencedElement == null) {
      return getReferenceOrReferencedElement(file,editor,flags,offset);
    }
    return referenceOrReferencedElement;
  }
  return null;
}
