{
  super.visitPolyadicExpression(expression);
  PsiExpression[] operands=expression.getOperands();
  if (operands.length <= 1) {
    return;
  }
  final IElementType tokenType=expression.getOperationTokenType();
  if (!tokenType.equals(JavaTokenType.PLUS)) {
    return;
  }
  final PsiType type=expression.getType();
  if (!TypeUtils.isJavaLangString(type)) {
    return;
  }
  if (!ControlFlowUtils.isInLoop(expression)) {
    return;
  }
  if (ControlFlowUtils.isInExitStatement(expression)) {
    return;
  }
  if (ExpressionUtils.isEvaluatedAtCompileTime(expression)) {
    return;
  }
  if (containingStatementExits(expression)) {
    return;
  }
  if (m_ignoreUnlessAssigned && !isAppendedRepeatedly(expression)) {
    return;
  }
  final PsiJavaToken sign=expression.getTokenBeforeOperand(operands[1]);
  registerError(sign);
}
