{
  PsiElement parent=expression.getParent();
  while (parent instanceof PsiParenthesizedExpression || parent instanceof PsiPolyadicExpression) {
    parent=parent.getParent();
  }
  if (!(parent instanceof PsiAssignmentExpression)) {
    return false;
  }
  final PsiAssignmentExpression assignmentExpression=(PsiAssignmentExpression)parent;
  PsiExpression lhs=assignmentExpression.getLExpression();
  while (lhs instanceof PsiParenthesizedExpression) {
    final PsiParenthesizedExpression parenthesizedExpression=(PsiParenthesizedExpression)lhs;
    lhs=parenthesizedExpression.getExpression();
  }
  if (!(lhs instanceof PsiReferenceExpression)) {
    return false;
  }
  if (assignmentExpression.getOperationTokenType() == JavaTokenType.PLUSEQ) {
    return true;
  }
  final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)lhs;
  final PsiElement element=referenceExpression.resolve();
  if (!(element instanceof PsiVariable)) {
    return false;
  }
  final PsiVariable variable=(PsiVariable)element;
  final PsiExpression rhs=assignmentExpression.getRExpression();
  return rhs != null && VariableAccessUtils.variableIsUsed(variable,rhs);
}
