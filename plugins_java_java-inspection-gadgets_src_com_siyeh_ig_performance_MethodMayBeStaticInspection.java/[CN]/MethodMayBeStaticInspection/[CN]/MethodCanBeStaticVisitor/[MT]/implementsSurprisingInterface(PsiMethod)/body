{
  final PsiClass containingClass=method.getContainingClass();
  if (containingClass == null) {
    return false;
  }
  final Query<PsiClass> search=ClassInheritorsSearch.search(containingClass,method.getUseScope(),true,true,false);
  final boolean[] result=new boolean[1];
  search.forEach(new Processor<PsiClass>(){
    int count=0;
    @Override public boolean process(    PsiClass subClass){
      if (++count > 5) {
        result[0]=true;
        return false;
      }
      final PsiReferenceList list=subClass.getImplementsList();
      if (list == null) {
        return true;
      }
      final PsiJavaCodeReferenceElement[] referenceElements=list.getReferenceElements();
      for (      PsiJavaCodeReferenceElement referenceElement : referenceElements) {
        final PsiElement target=referenceElement.resolve();
        if (!(target instanceof PsiClass)) {
          result[0]=true;
          return false;
        }
        final PsiClass aClass=(PsiClass)target;
        if (!aClass.isInterface()) {
          result[0]=true;
          return false;
        }
        if (aClass.findMethodBySignature(method,true) != null) {
          result[0]=true;
          return false;
        }
      }
      return true;
    }
  }
);
  return result[0];
}
