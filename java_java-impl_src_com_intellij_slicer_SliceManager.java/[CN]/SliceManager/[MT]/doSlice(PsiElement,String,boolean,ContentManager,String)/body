{
  Module module=ModuleUtil.findModuleForPsiElement(element);
  AnalysisUIOptions analysisUIOptions=new AnalysisUIOptions();
  analysisUIOptions.SCOPE_TYPE=AnalysisScope.PROJECT;
  analysisUIOptions.ANALYZE_TEST_SOURCES=myStoredSettings.includeTestSources;
  AnalysisScope analysisScope=new AnalysisScope(element.getContainingFile());
  String name=module == null ? null : module.getName();
  BaseAnalysisActionDialog dialog=new BaseAnalysisActionDialog(dialogTitle,"Analyze scope",myProject,analysisScope,name,true,analysisUIOptions);
  dialog.show();
  if (!dialog.isOK())   return;
  AnalysisScope scope=dialog.getScope(analysisUIOptions,new AnalysisScope(myProject),myProject,module);
  myStoredSettings.includeTestSources=scope.isIncludeTestSource();
  final SliceToolwindowSettings sliceToolwindowSettings=SliceToolwindowSettings.getInstance(myProject);
  SliceUsage usage=createRootUsage(element,scope);
  final Content[] myContent=new Content[1];
  final SlicePanel slicePanel=new SlicePanel(myProject,usage,scope,dataFlowToThis){
    protected void close(){
      contentManager.removeContent(myContent[0],true);
    }
    public boolean isAutoScroll(){
      return sliceToolwindowSettings.isAutoScroll();
    }
    public void setAutoScroll(    boolean autoScroll){
      sliceToolwindowSettings.setAutoScroll(autoScroll);
    }
    public boolean isPreview(){
      return sliceToolwindowSettings.isPreview();
    }
    public void setPreview(    boolean preview){
      sliceToolwindowSettings.setPreview(preview);
    }
  }
;
  myContent[0]=contentManager.getFactory().createContent(slicePanel,getElementDescription(element),true);
  contentManager.addContent(myContent[0]);
  contentManager.setSelectedContent(myContent[0]);
  ToolWindowManager.getInstance(myProject).getToolWindow(toolwindowId).activate(null);
}
