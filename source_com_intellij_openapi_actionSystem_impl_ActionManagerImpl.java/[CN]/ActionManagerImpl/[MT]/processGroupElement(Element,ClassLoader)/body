{
  if (LOG.isDebugEnabled()) {
    LOG.debug("enter: processGroupElement(" + element.getName() + ")");
  }
  if (!"group".equals(element.getName())) {
    LOG.error("unexpected name of element \"" + element.getName() + "\"");
    return null;
  }
  String className=element.getAttributeValue("class");
  if (className == null) {
    className=DefaultActionGroup.class.getName();
  }
  try {
    Class aClass=Class.forName(className,true,loader);
    Object obj=new ConstructorInjectionComponentAdapter(className,aClass).getComponentInstance(ApplicationManager.getApplication().getPicoContainer());
    if (!(obj instanceof ActionGroup)) {
      LOG.error("class with name \"" + className + "\" should be instance of "+ ActionGroup.class.getName());
      return null;
    }
    if (element.getChildren().size() > 0) {
      if (!(obj instanceof DefaultActionGroup)) {
        LOG.error("class with name \"" + className + "\" should be instance of "+ DefaultActionGroup.class.getName()+ " because there are children specified");
        return null;
      }
    }
    ActionGroup group=(ActionGroup)obj;
    String id=element.getAttributeValue("id");
    if (id != null && id.length() == 0) {
      LOG.error("ID of the group cannot be an empty string");
      return null;
    }
    if (Boolean.valueOf(element.getAttributeValue("internal")).booleanValue() && !ApplicationManagerEx.getApplicationEx().isInternal()) {
      myNotRegisteredInternalActionIds.add(id);
      return null;
    }
    if (id != null) {
      registerAction(id,group);
    }
    Presentation presentation=group.getTemplatePresentation();
    String text=element.getAttributeValue("text");
    presentation.setText(text);
    String description=element.getAttributeValue("description");
    presentation.setDescription(description);
    String iconPath=element.getAttributeValue("icon");
    if (iconPath != null) {
      presentation.setIcon(IconLoader.getIcon(iconPath));
    }
    String popup=element.getAttributeValue("popup");
    if (popup != null) {
      group.setPopup(Boolean.valueOf(popup).booleanValue());
    }
    for (Iterator i=element.getChildren().iterator(); i.hasNext(); ) {
      Element child=(Element)i.next();
      String name=child.getName();
      if ("action".equals(name)) {
        AnAction action=processActionElement(child,loader);
        if (action != null) {
          assertActionIsGroupOrStub(action);
          ((DefaultActionGroup)group).add(action);
        }
      }
 else       if ("separator".equals(name)) {
        processSeparatorNode((DefaultActionGroup)group,child);
      }
 else       if ("group".equals(name)) {
        AnAction action=processGroupElement(child,loader);
        if (action != null) {
          ((DefaultActionGroup)group).add(action);
        }
      }
 else       if ("add-to-group".equals(name)) {
        processAddToGroupNode(group,child);
      }
 else       if ("reference".equals(name)) {
        AnAction action=processReferenceElement(child);
        if (action != null) {
          ((DefaultActionGroup)group).add(action);
        }
      }
 else {
        LOG.error("unexpected name of element \"" + name + "\n");
        return null;
      }
    }
    return group;
  }
 catch (  ClassNotFoundException e) {
    LOG.error("class with name \"" + className + "\" not found");
    return null;
  }
catch (  Exception e) {
    LOG.error("cannot create class \"" + className + "\"",e);
    return null;
  }
}
