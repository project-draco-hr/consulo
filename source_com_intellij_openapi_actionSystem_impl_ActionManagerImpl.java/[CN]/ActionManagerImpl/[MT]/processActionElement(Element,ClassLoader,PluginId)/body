{
  final PluginDescriptor plugin=PluginManager.getPlugin(pluginId);
  final String resBundleName=plugin != null ? plugin.getResourceBundleBaseName() : "idea.ActionsBundle";
  ResourceBundle bundle=null;
  if (resBundleName != null) {
    bundle=ResourceBundle.getBundle(resBundleName,Locale.getDefault(),loader);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("enter: processActionElement(" + element.getName() + ")");
  }
  if (!"action".equals(element.getName())) {
    LOG.error("unexpected name of element \"" + element.getName() + "\"");
    return null;
  }
  String className=element.getAttributeValue("class");
  if (className == null || className.length() == 0) {
    LOG.error("action element should have specified \"class\" attribute");
    return null;
  }
  String id=element.getAttributeValue("id");
  if (id == null || id.length() == 0) {
    LOG.error("ID of the action cannot be an empty string");
    return null;
  }
  if (Boolean.valueOf(element.getAttributeValue("internal")).booleanValue() && !ApplicationManagerEx.getApplicationEx().isInternal()) {
    myNotRegisteredInternalActionIds.add(id);
    return null;
  }
  String text=null;
  if (bundle != null) {
    try {
      text=bundle.getString("action." + id + ".text");
    }
 catch (    MissingResourceException e) {
    }
  }
  if (text == null) {
    text=element.getAttributeValue("text");
  }
  if (text == null) {
    LOG.error("'text' attribute is mandatory (action ID=" + id + ")");
    return null;
  }
  ActionStub stub=new ActionStub(className,id,text,loader);
  Presentation presentation=stub.getTemplatePresentation();
  presentation.setText(text);
  String description=null;
  if (bundle != null) {
    try {
      description=bundle.getString("action." + id + ".description");
    }
 catch (    MissingResourceException e) {
    }
  }
  if (description == null) {
    description=element.getAttributeValue("description");
  }
  presentation.setDescription(description);
  String iconPath=element.getAttributeValue("icon");
  if (iconPath != null) {
    try {
      final Class actionClass=Class.forName(className,true,loader);
      presentation.setIcon(IconLoader.getIcon(iconPath,actionClass));
    }
 catch (    ClassNotFoundException ignored) {
    }
  }
  for (  final Object o : element.getChildren()) {
    Element e=(Element)o;
    if ("add-to-group".equals(e.getName())) {
      processAddToGroupNode(stub,e);
    }
 else     if ("keyboard-shortcut".equals(e.getName())) {
      processKeyboardShortcutNode(e,id);
    }
 else     if ("mouse-shortcut".equals(e.getName())) {
      processMouseShortcutNode(e,id);
    }
 else {
      LOG.error("unexpected name of element \"" + e.getName() + "\"");
      return null;
    }
  }
  registerAction(id,stub,pluginId);
  return stub;
}
