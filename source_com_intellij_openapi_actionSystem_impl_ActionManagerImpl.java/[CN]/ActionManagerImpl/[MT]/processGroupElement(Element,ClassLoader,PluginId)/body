{
  final PluginDescriptor plugin=PluginManager.getPlugin(pluginId);
  @NonNls final String resBundleName=plugin != null ? plugin.getResourceBundleBaseName() : ACTIONS_BUNDLE;
  ResourceBundle bundle=null;
  if (resBundleName != null) {
    bundle=ResourceBundle.getBundle(resBundleName,Locale.getDefault(),loader);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("enter: processGroupElement(" + element.getName() + ")");
  }
  if (!GROUP_ELEMENT_NAME.equals(element.getName())) {
    LOG.error("unexpected name of element \"" + element.getName() + "\"");
    return null;
  }
  String className=element.getAttributeValue(CLASS_ATTR_NAME);
  if (className == null) {
    className=DefaultActionGroup.class.getName();
  }
  try {
    Class aClass=Class.forName(className,true,loader);
    Object obj=new ConstructorInjectionComponentAdapter(className,aClass).getComponentInstance(ApplicationManager.getApplication().getPicoContainer());
    if (!(obj instanceof ActionGroup)) {
      LOG.error("class with name \"" + className + "\" should be instance of "+ ActionGroup.class.getName());
      return null;
    }
    if (element.getChildren().size() != element.getChildren(ADD_TO_GROUP_ELEMENT_NAME).size()) {
      if (!(obj instanceof DefaultActionGroup)) {
        LOG.error("class with name \"" + className + "\" should be instance of "+ DefaultActionGroup.class.getName()+ " because there are children specified");
        return null;
      }
    }
    ActionGroup group=(ActionGroup)obj;
    String id=element.getAttributeValue(ID_ATTR_NAME);
    if (id != null && id.length() == 0) {
      LOG.error("ID of the group cannot be an empty string");
      return null;
    }
    if (Boolean.valueOf(element.getAttributeValue(INTERNAL_ATTR_NAME)).booleanValue() && !ApplicationManagerEx.getApplicationEx().isInternal()) {
      myNotRegisteredInternalActionIds.add(id);
      return null;
    }
    if (id != null) {
      registerAction(id,group);
    }
    Presentation presentation=group.getTemplatePresentation();
    String text=loadTextForElement(element,bundle,id,GROUP_ELEMENT_NAME);
    presentation.setText(text);
    String description=loadDescriptionForElement(element,bundle,id,GROUP_ELEMENT_NAME);
    presentation.setDescription(description);
    String iconPath=element.getAttributeValue(ICON_ATTR_NAME);
    if (iconPath != null) {
      presentation.setIcon(IconLoader.getIcon(iconPath));
    }
    String popup=element.getAttributeValue(POPAP_ATTR_NAME);
    if (popup != null) {
      group.setPopup(Boolean.valueOf(popup).booleanValue());
    }
    for (    final Object o : element.getChildren()) {
      Element child=(Element)o;
      String name=child.getName();
      if (ACTION_ELEMENT_NAME.equals(name)) {
        AnAction action=processActionElement(child,loader,pluginId);
        if (action != null) {
          assertActionIsGroupOrStub(action);
          ((DefaultActionGroup)group).add(action,this);
        }
      }
 else       if (SEPARATOR_ELEMENT_NAME.equals(name)) {
        processSeparatorNode((DefaultActionGroup)group,child);
      }
 else       if (GROUP_ELEMENT_NAME.equals(name)) {
        AnAction action=processGroupElement(child,loader,pluginId);
        if (action != null) {
          ((DefaultActionGroup)group).add(action,this);
        }
      }
 else       if (ADD_TO_GROUP_ELEMENT_NAME.equals(name)) {
        processAddToGroupNode(group,child);
      }
 else       if (REFERENCE_ELEMENT_NAME.equals(name)) {
        AnAction action=processReferenceElement(child);
        if (action != null) {
          ((DefaultActionGroup)group).add(action,this);
        }
      }
 else {
        LOG.error("unexpected name of element \"" + name + "\n");
        return null;
      }
    }
    return group;
  }
 catch (  ClassNotFoundException e) {
    LOG.error("class with name \"" + className + "\" not found");
    return null;
  }
catch (  Exception e) {
    LOG.error("cannot create class \"" + className + "\"",e);
    return null;
  }
}
