{
  if (anchor == null) {
    if (before == null || before.booleanValue()) {
      anchor=findChildByRole(ChildRole.RBRACE);
      before=Boolean.TRUE;
    }
 else {
      anchor=findChildByRole(ChildRole.LBRACE);
      before=Boolean.FALSE;
    }
  }
  final TreeElement firstAdded=super.addInternal(first,last,anchor,before);
  if (ElementType.EXPRESSION_BIT_SET.contains(first.getElementType())) {
    final CharTable charTab=SharedImplUtil.findCharTableByTree(this);
    ASTNode element=first;
    for (ASTNode child=element.getTreeNext(); child != null; child=child.getTreeNext()) {
      if (child.getElementType() == COMMA)       break;
      if (ElementType.EXPRESSION_BIT_SET.contains(child.getElementType())) {
        TreeElement comma=Factory.createSingleLeafElement(COMMA,",",0,1,charTab,getManager());
        super.addInternal(comma,comma,element,Boolean.FALSE);
        break;
      }
    }
    for (ASTNode child=element.getTreePrev(); child != null; child=child.getTreePrev()) {
      if (child.getElementType() == COMMA)       break;
      if (ElementType.EXPRESSION_BIT_SET.contains(child.getElementType())) {
        TreeElement comma=Factory.createSingleLeafElement(COMMA,",",0,1,charTab,getManager());
        super.addInternal(comma,comma,child,Boolean.FALSE);
        break;
      }
    }
  }
  return firstAdded;
}
