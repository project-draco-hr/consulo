{
  final int oldEndOffset=myTextRange.getEndOffset();
  if (newEndOffset == oldEndOffset)   return;
  if (myTextRange.getStartOffset() >= newEndOffset) {
    InitialInfoBuilder.assertInvalidRanges(myTextRange.getStartOffset(),newEndOffset,model);
  }
  myTextRange=new TextRange(myTextRange.getStartOffset(),newEndOffset);
  myInitial=model.getText(myTextRange);
  if (myInitial != null && myInitial.toString().trim().length() > 0) {
    LOG.assertTrue(false,model.getText(new TextRange(0,model.getTextLength())).toString() + ":" + myInitial.toString());
  }
  final int tabsize=options.TAB_SIZE;
  for (int i=oldEndOffset - myTextRange.getStartOffset(); i < newEndOffset - myTextRange.getStartOffset(); i++) {
switch (myInitial.charAt(i)) {
case '\n':
      myLineFeeds++;
    mySpaces=0;
  myIndentSpaces=0;
break;
case ' ':
mySpaces++;
break;
case '\t':
myIndentSpaces+=tabsize;
break;
}
}
myInitialLineFeeds=myLineFeeds;
myInitialSpaces=getTotalSpaces();
}
