{
  return new Callbacks.Backend(){
    public void associate(    final String classFileName,    final String sourceFileName,    final ClassReader cr){
synchronized (myLock) {
        final int classFileNameS=myContext.get(classFileName);
        final Pair<ClassRepr,Set<UsageRepr.Usage>> result=new ClassfileAnalyzer(myContext).analyze(classFileNameS,cr);
        final ClassRepr repr=result.first;
        if (repr != null) {
          final Set<UsageRepr.Usage> localUsages=result.second;
          final File sourceFile=new File(sourceFileName);
          final int className=repr.name;
          myClassToSourceFile.put(className,sourceFile);
          mySourceFileToClasses.put(sourceFile,repr);
          for (          final int s : repr.getSupers()) {
            myClassToSubclasses.put(s,className);
          }
          for (          final UsageRepr.Usage u : localUsages) {
            final int owner=u.getOwner();
            if (owner != className) {
              myClassToClassDependency.put(owner,className);
            }
          }
        }
      }
    }
    @Override public void registerImports(    final String className,    final Collection<String> imports,    Collection<String> staticImports){
      final List<String> allImports=new ArrayList<String>();
      for (      String anImport : imports) {
        if (!anImport.endsWith("*")) {
          allImports.add(anImport);
        }
      }
      for (      final String s : staticImports) {
        int i=s.length() - 1;
        for (; s.charAt(i) != '.'; i--)         ;
        final String anImport=s.substring(0,i);
        if (!anImport.endsWith("*")) {
          allImports.add(anImport);
        }
      }
      if (!allImports.isEmpty()) {
        myPostPasses.offer(new Runnable(){
          public void run(){
            final int rootClassName=myContext.get(className.replace(".","/"));
            final File fileName=myClassToSourceFile.get(rootClassName);
            final ClassRepr repr=fileName != null ? getReprByName(rootClassName) : null;
            for (            final String i : allImports) {
              final int iname=myContext.get(i.replace(".","/"));
              myClassToClassDependency.put(iname,rootClassName);
              if (repr != null && repr.addUsage(UsageRepr.createClassUsage(myContext,iname))) {
                mySourceFileToClasses.put(fileName,repr);
              }
            }
          }
        }
);
      }
    }
  }
;
}
