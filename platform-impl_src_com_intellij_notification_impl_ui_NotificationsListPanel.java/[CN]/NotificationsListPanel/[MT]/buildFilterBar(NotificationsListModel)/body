{
  final JPanel box=new JPanel();
  box.setBorder(BorderFactory.createEmptyBorder(3,3,3,3));
  box.setLayout(new BoxLayout(box,BoxLayout.X_AXIS));
  final ButtonGroup buttonGroup=new ButtonGroup();
  createFilterButton(box,buttonGroup,"All",new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      myArchive=false;
      listModel.filter(null);
      resetSelection();
    }
  }
,new NotNullFunction<MyButton,String>(){
    @NotNull public String fun(    MyButton myButton){
      final int i=getManager().count(myProject);
      if (i > 0) {
        return String.format("All (%s)",i);
      }
 else {
        return "All";
      }
    }
  }
,true);
  createFilterButton(box,buttonGroup,"Error",new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      myArchive=false;
      listModel.filter(NotificationType.ERROR);
      resetSelection();
    }
  }
,new NotNullFunction<MyButton,String>(){
    @NotNull public String fun(    MyButton myButton){
      final int i=getManager().getByType(NotificationType.ERROR,myProject).size();
      if (i > 0) {
        return String.format("Error (%s)",i);
      }
      return "Error";
    }
  }
,false);
  createFilterButton(box,buttonGroup,"Warning",new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      myArchive=false;
      listModel.filter(NotificationType.WARNING);
      resetSelection();
    }
  }
,new NotNullFunction<MyButton,String>(){
    @NotNull public String fun(    MyButton myButton){
      final int i=getManager().getByType(NotificationType.WARNING,myProject).size();
      if (i > 0) {
        return String.format("Warning (%s)",i);
      }
      return "Warning";
    }
  }
,false);
  createFilterButton(box,buttonGroup,"Information",new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      myArchive=false;
      listModel.filter(NotificationType.INFORMATION);
      resetSelection();
    }
  }
,new NotNullFunction<MyButton,String>(){
    @NotNull public String fun(    MyButton myButton){
      final int i=getManager().getByType(NotificationType.INFORMATION,myProject).size();
      if (i > 0) {
        return String.format("Information (%s)",i);
      }
      return "Information";
    }
  }
,false);
  box.add(Box.createHorizontalGlue());
  createFilterButton(box,buttonGroup,"Archive",new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      myArchive=true;
      listModel.showArchive();
      resetSelection();
    }
  }
,new NotNullFunction<MyButton,String>(){
    @NotNull public String fun(    MyButton myButton){
      final int i=getManager().getArchive(myProject).size();
      if (i > 0) {
        return String.format("Archive (%s)",i);
      }
      return "Archive";
    }
  }
,false);
  return box;
}
