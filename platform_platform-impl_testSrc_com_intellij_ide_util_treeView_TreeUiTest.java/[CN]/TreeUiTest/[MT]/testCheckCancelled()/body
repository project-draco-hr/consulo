{
  buildStructure(myRoot);
  myAlwaysShowPlus.add(new NodeElement("com"));
  myAlwaysShowPlus.add(new NodeElement("jetbrains"));
  myAlwaysShowPlus.add(new NodeElement("org"));
  myAlwaysShowPlus.add(new NodeElement("xunit"));
  final Ref<Boolean> cancelled=new Ref<Boolean>(false);
  myElementUpdateHook=new ElementUpdateHook(){
    public void onElementAction(    String action,    Object element){
      NodeElement stopElement=new NodeElement("com");
      if (cancelled.get()) {
        myCancelRequest=new AssertionError("Not supposed to update after element=" + stopElement);
        return;
      }
      if (element.equals(stopElement) && action.equals("getChildren")) {
        cancelled.set(true);
        getBuilder().cancelUpdate();
      }
    }
  }
;
  final NodeElement[] toExpand=new NodeElement[]{new NodeElement("com"),new NodeElement("jetbrains"),new NodeElement("org"),new NodeElement("xunit")};
  final ActionCallback done=new ActionCallback();
  invokeLaterIfNeeded(new Runnable(){
    public void run(){
      getBuilder().batch(new Progressive(){
        public void run(        @NotNull ProgressIndicator indicator){
          expandNext(toExpand,0,indicator,done);
        }
      }
);
    }
  }
);
  waitBuilderToCome(new Condition(){
    public boolean value(    Object o){
      return (done.isProcessed() || myCancelRequest != null) || (cancelled.get());
    }
  }
);
  waitBuilderToCome();
  assertNull(myCancelRequest);
}
