{
  final NodeElement com=new NodeElement("com");
  final NodeElement actionSystem=new NodeElement("actionSystem");
  actionSystem.setForcedParent(com);
  final NodeElement fabrique=new NodeElement("fabrique");
  final NodeElement ide=new NodeElement("ide");
  fabrique.setForcedParent(myRoot.getElement());
  doAndWaitForBuilder(new Runnable(){
    public void run(){
      myRoot.addChild(com).addChild(actionSystem);
      myRoot.addChild(fabrique).addChild(ide);
      getBuilder().getUi().activate(true);
    }
  }
);
  select(actionSystem,false);
  expand(getPath("ide"));
  assertTree("-/\n" + " -com\n" + "  [actionSystem]\n"+ " -fabrique\n"+ "  ide\n");
  removeFromParentButKeepRef(actionSystem);
  removeFromParentButKeepRef(fabrique);
  final NodeElement newActionSystem=new NodeElement("actionSystem");
  final NodeElement newFabrique=new NodeElement("fabrique");
  myStructure.getNodeFor(com).addChild("intellij").addChild("openapi").addChild(newActionSystem);
  myRoot.addChild("jetbrains").addChild("tools").addChild(newFabrique).addChild("ide");
  assertSame(com,myStructure.getParentElement(actionSystem));
  assertNotSame(com,newActionSystem);
  assertEquals(new NodeElement("openapi"),myStructure.getParentElement(newActionSystem));
  assertSame(myRoot.getElement(),myStructure.getParentElement(fabrique));
  myStructure.setRevalidator(new Revalidator(){
    public AsyncResult<Object> revalidate(    NodeElement element){
      if (element == actionSystem) {
        return new AsyncResult.Done<Object>(newActionSystem);
      }
 else       if (element == fabrique) {
        return new AsyncResult.Done<Object>(newFabrique);
      }
      return null;
    }
  }
);
  updateFromRoot();
  assertTree("-/\n" + " -com\n" + "  -intellij\n"+ "   -openapi\n"+ "    [actionSystem]\n"+ " -jetbrains\n"+ "  -tools\n"+ "   -fabrique\n"+ "    ide\n");
}
