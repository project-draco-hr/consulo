{
  if (element == null)   return Collections.emptyList();
  final List<ProblemDescriptor> allProblems=new ArrayList<ProblemDescriptor>();
  element.acceptChildren(new PsiRecursiveElementVisitor(){
    public void visitClass(    PsiClass aClass){
    }
    public void visitAnnotation(    PsiAnnotation annotation){
      if (!"java.lang.SuppressWarnings".equals(annotation.getQualifiedName())) {
        super.visitAnnotation(annotation);
      }
    }
    public void visitLiteralExpression(    PsiLiteralExpression expression){
      checkStringLiteralExpression(expression,manager,allProblems,onTheFly);
    }
  }
);
  return allProblems;
}
