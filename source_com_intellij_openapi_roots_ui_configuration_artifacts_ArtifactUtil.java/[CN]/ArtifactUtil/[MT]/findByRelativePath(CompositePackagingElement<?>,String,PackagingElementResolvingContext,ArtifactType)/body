{
  relativePath=StringUtil.trimStart(relativePath,"/");
  if (relativePath.length() == 0) {
    return new SmartList<PackagingElement<?>>(parent);
  }
  int i=relativePath.indexOf('/');
  final String firstName=i != -1 ? relativePath.substring(0,i) : relativePath;
  String tail=i != -1 ? relativePath.substring(i + 1) : "";
  final List<PackagingElement<?>> children=new SmartList<PackagingElement<?>>();
  processElements(parent.getChildren(),context,artifactType,new Processor<PackagingElement<?>>(){
    public boolean process(    PackagingElement<?> element){
      if (element instanceof CompositePackagingElement && firstName.equals(((CompositePackagingElement<?>)element).getName())) {
        children.add(element);
      }
 else       if (element instanceof FileCopyPackagingElement) {
        final FileCopyPackagingElement fileCopy=(FileCopyPackagingElement)element;
        if (!fileCopy.isDirectory() && firstName.equals(fileCopy.getFileName())) {
          children.add(element);
        }
      }
      return true;
    }
  }
);
  if (tail.length() == 0) {
    return children;
  }
  List<PackagingElement<?>> result=new SmartList<PackagingElement<?>>();
  for (  PackagingElement<?> child : children) {
    if (child instanceof CompositePackagingElement) {
      result.addAll(findByRelativePath((CompositePackagingElement<?>)child,tail,context,artifactType));
    }
  }
  return result;
}
