{
  myPeriodCombo.addItem(ON_START_UP);
  myPeriodCombo.addItem(DAILY);
  myPeriodCombo.addItem(WEEKLY);
  myPeriodCombo.addItem(MONTHLY);
  myPeriodCombo.setRenderer(new MappingListCellRenderer(PERIOD_VALUE_MAP));
  final String majorVersion=ApplicationInfo.getInstance().getMajorVersion();
  String versionNumber="";
  if (majorVersion != null && majorVersion.trim().length() > 0) {
    final String minorVersion=ApplicationInfo.getInstance().getMinorVersion();
    if (minorVersion != null && minorVersion.trim().length() > 0) {
      versionNumber=majorVersion + "." + minorVersion;
    }
 else {
      versionNumber=majorVersion + ".0";
    }
  }
  myVersionNumber.setText(ApplicationInfo.getInstance().getVersionName() + " " + versionNumber);
  String currentBuild=(ApplicationInfo.getInstance().getBuildNumber() == null) ? IdeBundle.message("updates.current.build.unknown") : ApplicationInfo.getInstance().getBuildNumber();
  myBuildNumber.setText(currentBuild);
  myCbCheckForUpdates.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      myPeriodCombo.setEnabled(myCbCheckForUpdates.isSelected());
    }
  }
);
  myBtnCheckNow.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      CheckForUpdateAction.actionPerformed(false);
      updateLastCheckedLabel();
    }
  }
);
  myBtnCheckNow.setEnabled(myCheckNowEnabled);
  LabelTextReplacingUtil.replaceText(myPanel);
  myUrlsList.setModel(new DefaultListModel());
  myUrlsList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myUrlsList.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    final ListSelectionEvent e){
      myDeleteButton.setEnabled(ListUtil.canRemoveSelectedItems(myUrlsList));
      myEditButton.setEnabled(ListUtil.canRemoveSelectedItems(myUrlsList));
    }
  }
);
  myAddButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      final String input=Messages.showInputDialog(myPanel,IdeBundle.message("update.plugin.host.url.message"),IdeBundle.message("update.add.new.plugin.host.title"),Messages.getQuestionIcon(),"",new InputValidator(){
        public boolean checkInput(        final String inputString){
          return inputString.length() > 0;
        }
        public boolean canClose(        final String inputString){
          return checkInput(inputString);
        }
      }
);
      if (input != null) {
        ((DefaultListModel)myUrlsList.getModel()).addElement(input);
      }
    }
  }
);
  myEditButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      final String input=Messages.showInputDialog(myPanel,IdeBundle.message("update.plugin.host.url.message"),IdeBundle.message("update.edit.plugin.host.title"),Messages.getQuestionIcon(),(String)myUrlsList.getSelectedValue(),new InputValidator(){
        public boolean checkInput(        final String inputString){
          return inputString.length() > 0;
        }
        public boolean canClose(        final String inputString){
          return checkInput(inputString);
        }
      }
);
      if (input != null) {
        ((DefaultListModel)myUrlsList.getModel()).set(myUrlsList.getSelectedIndex(),input);
      }
    }
  }
);
  myDeleteButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      ListUtil.removeSelectedItems(myUrlsList);
    }
  }
);
  myEditButton.setEnabled(false);
  myDeleteButton.setEnabled(false);
}
