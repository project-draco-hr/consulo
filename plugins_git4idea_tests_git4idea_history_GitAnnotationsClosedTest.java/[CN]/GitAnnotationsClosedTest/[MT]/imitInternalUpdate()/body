{
  final ProjectLevelVcsManagerEx ex=ProjectLevelVcsManagerEx.getInstanceEx(myProject);
  ex.setDirectoryMappings(Collections.singletonList(new VcsDirectoryMapping(FileUtil.toSystemIndependentName(myWorkingCopyDir.getPath()),GitVcs.NAME)));
  ((GitFakeRepositoryManager)GitUtil.getRepositoryManager(myProject)).add(GitRepositoryImpl.getLightInstance(myWorkingCopyDir,myProject,ServiceManager.getService(myProject,GitPlatformFacade.class),myProject));
  ex.getOptions(VcsConfiguration.StandardOption.UPDATE).setValue(false);
  final CommonUpdateProjectAction action=new CommonUpdateProjectAction();
  action.getTemplatePresentation().setText("1");
  action.actionPerformed(new AnActionEvent(null,new DataContext(){
    @Nullable @Override public Object getData(    @NonNls String dataId){
      if (PlatformDataKeys.PROJECT.is(dataId)) {
        return myProject;
      }
      return null;
    }
  }
,"test",new Presentation(),null,0));
  myChangeListManager.ensureUpToDate(false);
  myChangeListManager.ensureUpToDate(false);
  sleep(100);
}
