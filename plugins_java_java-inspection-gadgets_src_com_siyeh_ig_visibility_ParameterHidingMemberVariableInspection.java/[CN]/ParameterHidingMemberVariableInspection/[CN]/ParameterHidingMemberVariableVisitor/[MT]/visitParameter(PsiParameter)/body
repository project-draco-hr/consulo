{
  super.visitParameter(variable);
  final PsiElement declarationScope=variable.getDeclarationScope();
  if (!(declarationScope instanceof PsiMethod)) {
    return;
  }
  final PsiMethod method=(PsiMethod)declarationScope;
  if (m_ignoreForConstructors && method.isConstructor()) {
    return;
  }
  if (m_ignoreForAbstractMethods) {
    if (method.hasModifierProperty(PsiModifier.ABSTRACT)) {
      return;
    }
    final PsiClass containingClass=method.getContainingClass();
    if (containingClass != null && containingClass.isInterface()) {
      return;
    }
  }
  if (m_ignoreForPropertySetters) {
    final String methodName=method.getName();
    final PsiType returnType=method.getReturnType();
    if (methodName.startsWith(HardcodedMethodConstants.SET) && PsiType.VOID.equals(returnType)) {
      return;
    }
  }
  final PsiClass aClass=checkFieldName(variable,method);
  if (aClass == null) {
    return;
  }
  registerVariableError(variable,aClass);
}
