{
  PsiBinaryExpression exp=(PsiBinaryExpression)findMatchingElement(file,editor);
  PsiElement parent=exp.getParent();
  while (ConcatenationUtils.isConcatenation(parent)) {
    exp=(PsiBinaryExpression)parent;
    parent=exp.getParent();
  }
  final String text=exp.getText();
  final StringBuffer expString=new StringBuffer(text.length() * 3);
  if (isPartOfStringBufferAppend(exp)) {
    final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)parent.getParent();
    final PsiExpression qualifierExpression=methodCallExpression.getMethodExpression().getQualifierExpression();
    final String qualifierText=qualifierExpression.getText();
    expString.append(qualifierText);
    turnExpressionIntoChainedAppends(exp,expString);
    final String newExpression=expString.toString();
    replaceExpression(project,newExpression,methodCallExpression);
  }
 else {
    expString.append("new StringBuffer()");
    turnExpressionIntoChainedAppends(exp,expString);
    expString.append(".toString()");
    final String newExpression=expString.toString();
    replaceExpression(project,newExpression,exp);
  }
}
