{
  if (state.CARETS != null && state.CARETS.length > 0) {
    if (editor.getCaretModel().supportsMultipleCarets()) {
      CaretModel caretModel=editor.getCaretModel();
      List<CaretState> states=new ArrayList<CaretState>(state.CARETS.length);
      for (      TextEditorState.CaretState caretState : state.CARETS) {
        states.add(new CaretState(new LogicalPosition(caretState.LINE,caretState.COLUMN),new LogicalPosition(caretState.SELECTION_START_LINE,caretState.SELECTION_START_COLUMN),new LogicalPosition(caretState.SELECTION_END_LINE,caretState.SELECTION_END_COLUMN)));
      }
      caretModel.setCaretsAndSelections(states,false);
    }
 else {
      TextEditorState.CaretState caretState=state.CARETS[0];
      LogicalPosition pos=new LogicalPosition(caretState.LINE,caretState.COLUMN);
      editor.getCaretModel().moveToLogicalPosition(pos);
      int startOffset=editor.logicalPositionToOffset(new LogicalPosition(caretState.SELECTION_START_LINE,caretState.SELECTION_START_COLUMN));
      int endOffset=editor.logicalPositionToOffset(new LogicalPosition(caretState.SELECTION_END_LINE,caretState.SELECTION_END_COLUMN));
      if (startOffset == endOffset) {
        editor.getSelectionModel().removeSelection();
      }
 else {
        editor.getSelectionModel().setSelection(startOffset,endOffset);
      }
    }
  }
  final float verticalScrollProportion=state.VERTICAL_SCROLL_PROPORTION;
  UiNotifyConnector.doWhenFirstShown(editor.getContentComponent(),new Runnable(){
    public void run(){
      if (!editor.isDisposed()) {
        if (verticalScrollProportion != -1) {
          EditorUtil.setVerticalScrollProportion(editor,verticalScrollProportion);
        }
        editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
      }
    }
  }
);
}
