{
  if (state.CARETS != null) {
    if (editor.getCaretModel().supportsMultipleCarets()) {
      CaretModel caretModel=editor.getCaretModel();
      List<CaretState> states=new ArrayList<CaretState>(state.CARETS.length);
      for (      TextEditorState.CaretState caretState : state.CARETS) {
        states.add(new CaretState(new LogicalPosition(caretState.LINE,caretState.COLUMN),new LogicalPosition(caretState.SELECTION_START_LINE,caretState.SELECTION_START_COLUMN),new LogicalPosition(caretState.SELECTION_END_LINE,caretState.SELECTION_END_COLUMN)));
      }
      caretModel.setCaretsAndSelections(states,false);
    }
 else {
      LogicalPosition pos=new LogicalPosition(state.CARETS[0].LINE,state.CARETS[0].COLUMN);
      editor.getCaretModel().moveToLogicalPosition(pos);
      editor.getSelectionModel().removeSelection();
    }
  }
  if (state.VERTICAL_SCROLL_PROPORTION != -1) {
    EditorUtil.setVerticalScrollProportion(editor,state.VERTICAL_SCROLL_PROPORTION);
  }
  if (!editor.getCaretModel().supportsMultipleCarets()) {
    if (state.CARETS[0].SELECTION_START_LINE == state.CARETS[0].SELECTION_END_LINE && state.CARETS[0].SELECTION_START_COLUMN == state.CARETS[0].SELECTION_END_COLUMN) {
      editor.getSelectionModel().removeSelection();
    }
 else {
      int startOffset=editor.logicalPositionToOffset(new LogicalPosition(state.CARETS[0].SELECTION_START_LINE,state.CARETS[0].SELECTION_START_COLUMN));
      int endOffset=editor.logicalPositionToOffset(new LogicalPosition(state.CARETS[0].SELECTION_END_LINE,state.CARETS[0].SELECTION_END_COLUMN));
      editor.getSelectionModel().setSelection(startOffset,endOffset);
    }
  }
  editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
}
