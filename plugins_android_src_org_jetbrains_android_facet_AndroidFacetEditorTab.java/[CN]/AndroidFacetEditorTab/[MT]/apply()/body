{
  if (!isModified())   return;
  String absGenPathR=myRGenPathField.getText().trim();
  String absGenPathAidl=myAidlGenPathField.getText().trim();
  boolean runApt=false;
  boolean runIdl=false;
  if (absGenPathR == null || absGenPathR.length() == 0 || absGenPathAidl == null || absGenPathAidl.length() == 0) {
    throw new ConfigurationException("Please specify source root for autogenerated files");
  }
 else {
    String relativeGenPathR=getAndCheckRelativePath(absGenPathR,false);
    String newAptDestDir='/' + relativeGenPathR;
    if (!newAptDestDir.equals(myConfiguration.GEN_FOLDER_RELATIVE_PATH_APT)) {
      runApt=true;
    }
    myConfiguration.GEN_FOLDER_RELATIVE_PATH_APT=newAptDestDir;
    String relativeGenPathAidl=getAndCheckRelativePath(absGenPathAidl,false);
    String newIdlDestDir='/' + relativeGenPathAidl;
    if (!newIdlDestDir.equals(myConfiguration.GEN_FOLDER_RELATIVE_PATH_AIDL)) {
      runIdl=true;
    }
    myConfiguration.GEN_FOLDER_RELATIVE_PATH_AIDL=newIdlDestDir;
  }
  String absManifestPath=myManifestFileField.getText().trim();
  if (absManifestPath.length() == 0) {
    throw new ConfigurationException("Manifest file not specified");
  }
  String manifestRelPath=getAndCheckRelativePath(absManifestPath,true);
  if (!SdkConstants.FN_ANDROID_MANIFEST_XML.equals(AndroidUtils.getSimpleNameByRelativePath(manifestRelPath))) {
    throw new ConfigurationException("Manifest file must have name AndroidManifest.xml");
  }
  myConfiguration.MANIFEST_FILE_RELATIVE_PATH='/' + manifestRelPath;
  String absResPath=myResFolderField.getText().trim();
  if (absResPath.length() == 0) {
    throw new ConfigurationException("Resources folder not specified");
  }
  myConfiguration.RES_FOLDER_RELATIVE_PATH='/' + getAndCheckRelativePath(absResPath,false);
  String absAssetsPath=myAssetsFolderField.getText().trim();
  myConfiguration.ASSETS_FOLDER_RELATIVE_PATH=absAssetsPath.length() > 0 ? '/' + getAndCheckRelativePath(absAssetsPath,false) : "";
  String absApkPath=(String)myApkPathCombo.getComboBox().getEditor().getItem();
  if (absApkPath.length() == 0) {
    myConfiguration.APK_PATH="";
  }
 else {
    myConfiguration.APK_PATH='/' + getAndCheckRelativePath(absApkPath,false);
  }
  String absLibsPath=myNativeLibsFolder.getText().trim();
  myConfiguration.LIBS_FOLDER_RELATIVE_PATH=absLibsPath.length() > 0 ? '/' + getAndCheckRelativePath(absLibsPath,false) : "";
  myConfiguration.CUSTOM_DEBUG_KEYSTORE_PATH=getSelectedCustomKeystorePath();
  myConfiguration.LIBRARY_PROJECT=myIsLibraryProjectCheckbox.isSelected();
  myConfiguration.RUN_PROCESS_RESOURCES_MAVEN_TASK=myRunProcessResourcesRadio.isSelected();
  myConfiguration.GENERATE_UNSIGNED_APK=myGenerateUnsignedApk.isSelected();
  myConfiguration.PACK_TEST_CODE=myIncludeTestCodeAndCheckBox.isSelected();
  String absProguardPath=myProguardConfigFileTextField.getText().trim();
  if (absProguardPath.length() == 0) {
    if (myRunProguardCheckBox.isSelected()) {
      throw new ConfigurationException("Proguard config file path not specified");
    }
 else {
      myConfiguration.PROGUARD_CFG_PATH="";
    }
  }
 else {
    myConfiguration.PROGUARD_CFG_PATH='/' + getAndCheckRelativePath(absProguardPath,false);
  }
  myConfiguration.RUN_PROGUARD=myRunProguardCheckBox.isSelected();
  myConfiguration.setIncludeSystemProguardCfgPath(myIncludeSystemProguardFileCheckBox.isSelected());
  boolean useCustomAptSrc=myUseCustomSourceDirectoryRadio.isSelected();
  myConfiguration.USE_CUSTOM_APK_RESOURCE_FOLDER=useCustomAptSrc;
  String absAptSourcePath=myCustomAptSourceDirField.getText().trim();
  if (useCustomAptSrc) {
    if (absAptSourcePath.length() == 0) {
      throw new ConfigurationException("Resources folder not specified");
    }
    myConfiguration.CUSTOM_APK_RESOURCE_FOLDER='/' + getAndCheckRelativePath(absAptSourcePath,false);
  }
 else {
    String relPath=toRelativePath(absAptSourcePath);
    myConfiguration.CUSTOM_APK_RESOURCE_FOLDER=relPath != null ? '/' + relPath : "";
  }
  runApt=runApt && AndroidAptCompiler.isToCompileModule(myContext.getModule(),myConfiguration);
  if (runApt || runIdl) {
    final Module module=myContext.getModule();
    if (runApt) {
      AndroidCompileUtil.generate(module,AndroidAutogeneratorMode.AAPT,true);
    }
    if (runIdl) {
      AndroidCompileUtil.generate(module,AndroidAutogeneratorMode.AIDL);
    }
  }
}
