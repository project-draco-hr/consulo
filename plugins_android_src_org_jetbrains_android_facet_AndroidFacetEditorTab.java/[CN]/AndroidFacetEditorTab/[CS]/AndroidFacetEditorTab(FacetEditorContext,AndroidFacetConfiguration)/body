{
  final Project project=context.getProject();
  myConfiguration=androidFacetConfiguration;
  myContext=context;
  myManifestFileLabel.setLabelFor(myManifestFileField);
  myResFolderLabel.setLabelFor(myResFolderField);
  myAssetsFolderLabel.setLabelFor(myAssetsFolderField);
  myNativeLibsFolderLabel.setLabelFor(myNativeLibsFolder);
  myAidlGenPathLabel.setLabelFor(myAidlGenPathField);
  myRGenPathLabel.setLabelFor(myRGenPathField);
  myCustomKeystoreLabel.setLabelFor(myCustomDebugKeystoreField);
  myProguardConfigFileLabel.setLabelFor(myProguardConfigFileTextField);
  final AndroidFacet facet=(AndroidFacet)myContext.getFacet();
  myRGenPathField.getButton().addActionListener(new MyGenSourceFieldListener(myRGenPathField,AndroidRootUtil.getAptGenSourceRootPath(facet)));
  myAidlGenPathField.getButton().addActionListener(new MyGenSourceFieldListener(myAidlGenPathField,AndroidRootUtil.getAidlGenSourceRootPath(facet)));
  Module module=myContext.getModule();
  myManifestFileField.getButton().addActionListener(new MyFolderFieldListener(myManifestFileField,AndroidRootUtil.getManifestFile(facet),true,new MyManifestFilter()));
  myResFolderField.getButton().addActionListener(new MyFolderFieldListener(myResFolderField,AndroidRootUtil.getResourceDir(facet),false,null));
  myAssetsFolderField.getButton().addActionListener(new MyFolderFieldListener(myAssetsFolderField,AndroidRootUtil.getAssetsDir(facet),false,null));
  myNativeLibsFolder.getButton().addActionListener(new MyFolderFieldListener(myNativeLibsFolder,AndroidRootUtil.getLibsDir(facet),false,null));
  myCustomAptSourceDirField.getButton().addActionListener(new MyFolderFieldListener(myCustomAptSourceDirField,AndroidAptCompiler.getCustomResourceDirForApt(facet),false,null));
  myProguardConfigFileTextField.getButton().addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final String path=myProguardConfigFileTextField.getText().trim();
      VirtualFile defaultFile=path != null && path.length() > 0 ? LocalFileSystem.getInstance().findFileByPath(path) : null;
      if (defaultFile == null) {
        defaultFile=AndroidRootUtil.getMainContentRoot(facet);
      }
      final FileChooserDescriptor descriptor=FileChooserDescriptorFactory.createSingleFileNoJarsDescriptor();
      final VirtualFile file=FileChooser.chooseFile(descriptor,myContentPanel,project,defaultFile);
      if (file != null) {
        myProguardConfigFileTextField.setText(FileUtil.toSystemDependentName(file.getPath()));
      }
    }
  }
);
  myRunProguardCheckBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final boolean enabled=myRunProguardCheckBox.isSelected();
      myProguardConfigFileLabel.setEnabled(enabled);
      myProguardConfigFileTextField.setEnabled(enabled);
      myIncludeSystemProguardFileCheckBox.setEnabled(enabled);
    }
  }
);
  myCustomDebugKeystoreField.getButton().addActionListener(new MyFolderFieldListener(myCustomDebugKeystoreField,null,true,null));
  myResetPathsButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      AndroidFacetConfiguration configuration=new AndroidFacetConfiguration();
      Module module=myContext.getModule();
      VirtualFile[] contentRoots=ModuleRootManager.getInstance(module).getContentRoots();
      if (contentRoots.length == 1) {
        configuration.init(module,contentRoots[0]);
      }
      if (AndroidMavenUtil.isMavenizedModule(module)) {
        AndroidMavenProvider mavenProvider=AndroidMavenUtil.getMavenProvider();
        if (mavenProvider != null) {
          mavenProvider.setPathsToDefault(module,configuration);
        }
      }
      resetOptions(configuration);
    }
  }
);
  ActionListener listener=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      myCustomAptSourceDirField.setEnabled(myUseCustomSourceDirectoryRadio.isSelected());
    }
  }
;
  myUseCustomSourceDirectoryRadio.addActionListener(listener);
  myUseAptResDirectoryFromPathRadio.addActionListener(listener);
  myIsLibraryProjectCheckbox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      boolean lib=myIsLibraryProjectCheckbox.isSelected();
      myAssetsFolderField.setEnabled(!lib);
    }
  }
);
  listener=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      updateAptPanel();
    }
  }
;
  myRunProcessResourcesRadio.addActionListener(listener);
  myCompileResourcesByIdeRadio.addActionListener(listener);
  myApkPathLabel.setLabelFor(myApkPathCombo);
  final JComboBox apkPathComboBoxComponent=myApkPathCombo.getComboBox();
  apkPathComboBoxComponent.setEditable(true);
  apkPathComboBoxComponent.setModel(new DefaultComboBoxModel(getDefaultApks(module)));
  apkPathComboBoxComponent.setMinimumSize(new Dimension(10,apkPathComboBoxComponent.getMinimumSize().height));
  apkPathComboBoxComponent.setPreferredSize(new Dimension(10,apkPathComboBoxComponent.getPreferredSize().height));
  myApkPathCombo.addBrowseFolderListener(project,new FileChooserDescriptor(true,false,false,false,false,false){
    @Override public boolean isFileVisible(    VirtualFile file,    boolean showHiddenFiles){
      if (!super.isFileVisible(file,showHiddenFiles)) {
        return false;
      }
      return file.isDirectory() || "apk".equals(file.getExtension());
    }
  }
);
  myGenerateIdlWhenChanged.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final boolean enabled=myGenerateIdlWhenChanged.isSelected();
      myAidlGenPathLabel.setEnabled(enabled);
      myAidlGenPathField.setEnabled(enabled);
    }
  }
);
  myGenerateRJavaWhenChanged.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final boolean enabled=myGenerateRJavaWhenChanged.isSelected();
      myRGenPathLabel.setEnabled(enabled);
      myRGenPathField.setEnabled(enabled);
    }
  }
);
}
