{
  final Project project=context.getProject();
  LibraryTable.ModifiableModel model=GlobalLibrariesConfigurable.getInstance(project).getModelProvider().getModifiableModel();
  myPlatformChooser=new AndroidPlatformChooser(model,project);
  myConfiguration=androidFacetConfiguration;
  myContext=context;
  myPlatformChooserWrapper.add(myPlatformChooser.getComponent());
  myManifestFileLabel.setLabelFor(myManifestFileField);
  myResFolderLabel.setLabelFor(myResFolderField);
  myAssetsFolderLabel.setLabelFor(myAssetsFolderField);
  myNativeLibsFolderLabel.setLabelFor(myNativeLibsFolder);
  myAidlGenPathLabel.setLabelFor(myAidlGenPathField);
  myRGenPathLabel.setLabelFor(myRGenPathField);
  AndroidFacet facet=(AndroidFacet)myContext.getFacet();
  myRGenPathField.getButton().addActionListener(new MyGenSourceFieldListener(myRGenPathField,facet.getAptGenSourceRootPath()));
  myAidlGenPathField.getButton().addActionListener(new MyGenSourceFieldListener(myAidlGenPathField,facet.getAidlGenSourceRootPath()));
  Module module=myContext.getModule();
  myManifestFileField.getButton().addActionListener(new MyFolderFieldListener(myManifestFileField,AndroidRootUtil.getManifestFile(module),true));
  myResFolderField.getButton().addActionListener(new MyFolderFieldListener(myResFolderField,AndroidRootUtil.getResourceDir(module),false));
  myAssetsFolderField.getButton().addActionListener(new MyFolderFieldListener(myAssetsFolderField,AndroidRootUtil.getAssetsDir(module),false));
  myNativeLibsFolder.getButton().addActionListener(new MyFolderFieldListener(myNativeLibsFolder,AndroidRootUtil.getLibsDir(module),false));
  myCustomAptSourceDirField.getButton().addActionListener(new MyFolderFieldListener(myCustomAptSourceDirField,AndroidAptCompiler.getCustomResourceDirForApt(facet),false));
  myPlatformChooser.addListener(new AndroidPlatformChooserListener(){
    @Override public void platformChanged(    AndroidPlatform oldPlatform){
      if (myAddAndroidLibrary.isSelected()) {
        updateAndroidLibrary(oldPlatform,myPlatformChooser.getSelectedPlatform());
      }
    }
  }
);
  myAddAndroidLibrary.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      AndroidPlatform platform=myPlatformChooser.getSelectedPlatform();
      if (myAddAndroidLibrary.isSelected()) {
        addAndroidLibrary(platform);
      }
 else {
        removeAndroidLibrary(platform);
      }
    }
  }
);
  myResetPathsButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      AndroidFacetConfiguration configuration=new AndroidFacetConfiguration();
      Module module=myContext.getModule();
      VirtualFile[] contentRoots=ModuleRootManager.getInstance(module).getContentRoots();
      if (contentRoots.length == 1) {
        configuration.init(module,contentRoots[0]);
      }
      if (AndroidMavenUtil.isMavenizedModule(module)) {
        AndroidMavenProvider mavenProvider=AndroidMavenUtil.getMavenProvider();
        if (mavenProvider != null) {
          mavenProvider.setPathsToDefault(module,configuration);
        }
      }
      resetOptions(configuration);
    }
  }
);
  ActionListener listener=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      myCustomAptSourceDirField.setEnabled(myUseCustomSourceDirectoryRadio.isSelected());
    }
  }
;
  myUseCustomSourceDirectoryRadio.addActionListener(listener);
  myUseAptResDirectoryFromPathRadio.addActionListener(listener);
  myIsLibraryProjectCheckbox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      boolean lib=myIsLibraryProjectCheckbox.isSelected();
      myAssetsFolderField.setEnabled(!lib);
      myAidlGenPathField.setEnabled(!lib);
      myGenerateIdlWhenChanged.setEnabled(!lib);
    }
  }
);
  listener=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      updateAptPanel();
    }
  }
;
  myRunProcessResourcesRadio.addActionListener(listener);
  myCompileResourcesByIdeRadio.addActionListener(listener);
  myAddResOverlayButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      CollectionListModel model=(CollectionListModel)myResOverlayList.getModel();
      Set<Object> currentItems=new HashSet<Object>();
      for (int i=0; i < model.getSize(); i++) {
        currentItems.add(model.getElementAt(i));
      }
      VirtualFile[] files=chooserDirsUnderModule(null,false,true);
      for (      VirtualFile file : files) {
        String newItem=FileUtil.toSystemDependentName(file.getPath());
        if (!currentItems.contains(newItem)) {
          model.add(newItem);
        }
      }
      myResOverlayList.setModel(model);
    }
  }
);
  myRemoveResOverlayButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      List<String> newItems=new ArrayList<String>();
      TIntHashSet selectedIndices=new TIntHashSet(myResOverlayList.getSelectedIndices());
      ListModel model=myResOverlayList.getModel();
      for (int i=0; i < model.getSize(); i++) {
        String item=(String)model.getElementAt(i);
        if (!selectedIndices.contains(i)) {
          newItems.add(item);
        }
      }
      myResOverlayList.setModel(new CollectionListModel(newItems));
    }
  }
);
  myApkPathLabel.setLabelFor(myApkPathCombo);
  myApkPathCombo.getComboBox().setEditable(true);
  myApkPathCombo.getComboBox().setModel(new DefaultComboBoxModel(getDefaultApks(module)));
  myApkPathCombo.addBrowseFolderListener(project,new FileChooserDescriptor(true,false,false,false,false,false){
    @Override public boolean isFileVisible(    VirtualFile file,    boolean showHiddenFiles){
      if (!super.isFileVisible(file,showHiddenFiles)) {
        return false;
      }
      return file.isDirectory() || "apk".equals(file.getExtension());
    }
  }
);
}
