{
  if (pluginNode.getDepends() != null && pluginNode.getDepends().size() > 0) {
    final PluginId[] optionalDependentPluginIds=pluginNode.getOptionalDependentPluginIds();
    final List<PluginNode> depends=new ArrayList<PluginNode>();
    final List<PluginNode> optionalDeps=new ArrayList<PluginNode>();
    for (int i=0; i < pluginNode.getDepends().size(); i++) {
      PluginId depPluginId=pluginNode.getDepends().get(i);
      if (PluginManager.isPluginInstalled(depPluginId) || (pluginIds != null && pluginIds.contains(depPluginId))) {
        continue;
      }
      PluginNode depPlugin=new PluginNode(depPluginId);
      depPlugin.setSize("-1");
      depPlugin.setName(depPluginId.getIdString());
      if (optionalDependentPluginIds != null && Arrays.binarySearch(optionalDependentPluginIds,depPluginId) != -1) {
        optionalDeps.add(depPlugin);
      }
 else {
        depends.add(depPlugin);
      }
    }
    if (depends.size() > 0) {
      final boolean[] proceed=new boolean[1];
      final StringBuffer buf=new StringBuffer();
      for (      PluginNode depend : depends) {
        buf.append(depend.getName()).append(",");
      }
      try {
        GuiUtils.runOrInvokeAndWait(new Runnable(){
          public void run(){
            proceed[0]=Messages.showYesNoDialog(IdeBundle.message("plugin.manager.dependencies.detected.message",depends.size(),buf.substring(0,buf.length() - 1)),IdeBundle.message("plugin.manager.dependencies.detected.title"),Messages.getWarningIcon()) == DialogWrapper.OK_EXIT_CODE;
          }
        }
);
      }
 catch (      Exception e) {
        return false;
      }
      if (proceed[0]) {
        if (!prepareToInstall(depends)) {
          return false;
        }
      }
 else {
        return false;
      }
    }
    if (optionalDeps.size() > 0) {
      final StringBuffer buf=new StringBuffer();
      for (      PluginNode depend : optionalDeps) {
        buf.append(depend.getName()).append(",");
      }
      final boolean[] proceed=new boolean[1];
      try {
        GuiUtils.runOrInvokeAndWait(new Runnable(){
          public void run(){
            proceed[0]=Messages.showYesNoDialog(IdeBundle.message("plugin.manager.optional.dependencies.detected.message",optionalDeps.size(),buf.substring(0,buf.length() - 1)),IdeBundle.message("plugin.manager.dependencies.detected.title"),Messages.getWarningIcon()) == DialogWrapper.OK_EXIT_CODE;
          }
        }
);
      }
 catch (      Exception e) {
        return false;
      }
      if (proceed[0]) {
        if (!prepareToInstall(optionalDeps)) {
          return false;
        }
      }
    }
  }
synchronized (PluginManager.lock) {
    final String buildNumber=RepositoryHelper.extractBuildNumber();
    final @NonNls String url=RepositoryHelper.DOWNLOAD_URL + URLEncoder.encode(pluginNode.getPluginId().getIdString(),"UTF8") + "&build="+ buildNumber;
    final PluginDownloader downloader=new PluginDownloader(pluginNode.getPluginId().getIdString(),url,null,null,pluginNode.getName());
    if (downloader.prepareToInstall(ProgressManager.getInstance().getProgressIndicator())) {
      downloader.install();
      pluginNode.setStatus(PluginNode.STATUS_DOWNLOADED);
    }
  }
  return true;
}
