{
  if (pluginNode.getDepends() != null && pluginNode.getDepends().size() > 0) {
    final PluginId[] optionalDependentPluginIds=pluginNode.getOptionalDependentPluginIds();
    final List<PluginNode> depends=new ArrayList<PluginNode>();
    final List<PluginNode> optionalDeps=new ArrayList<PluginNode>();
    for (int i=0; i < pluginNode.getDepends().size(); i++) {
      PluginId depPluginId=pluginNode.getDepends().get(i);
      if (PluginManager.isPluginInstalled(depPluginId)) {
        continue;
      }
      PluginNode depPlugin=new PluginNode(depPluginId);
      depPlugin.setSize("-1");
      depPlugin.setName(depPluginId.getIdString());
      if (optionalDependentPluginIds != null && Arrays.binarySearch(optionalDependentPluginIds,depPluginId) != -1) {
        optionalDeps.add(depPlugin);
      }
 else {
        depends.add(depPlugin);
      }
    }
    if (depends.size() > 0) {
      final boolean[] proceed=new boolean[1];
      final StringBuffer buf=new StringBuffer();
      for (      PluginNode depend : depends) {
        buf.append(depend.getName()).append(",");
      }
      try {
        SwingUtilities.invokeAndWait(new Runnable(){
          public void run(){
            proceed[0]=Messages.showYesNoDialog(IdeBundle.message("plugin.manager.dependencies.detected.message",depends.size(),buf.substring(0,buf.length() - 1)),IdeBundle.message("plugin.manager.dependencies.detected.title"),Messages.getWarningIcon()) == DialogWrapper.OK_EXIT_CODE;
          }
        }
);
      }
 catch (      Exception e) {
        return false;
      }
      if (proceed[0]) {
        if (!prepareToInstall(depends)) {
          return false;
        }
      }
 else {
        return false;
      }
    }
    if (optionalDeps.size() > 0) {
      final StringBuffer buf=new StringBuffer();
      for (      PluginNode depend : optionalDeps) {
        buf.append(depend.getName()).append(",");
      }
      final boolean[] proceed=new boolean[1];
      try {
        SwingUtilities.invokeAndWait(new Runnable(){
          public void run(){
            proceed[0]=Messages.showYesNoDialog(IdeBundle.message("plugin.manager.optional.dependencies.detected.message",optionalDeps.size(),buf.substring(0,buf.length() - 1)),IdeBundle.message("plugin.manager.dependencies.detected.title"),Messages.getWarningIcon()) == DialogWrapper.OK_EXIT_CODE;
          }
        }
);
      }
 catch (      Exception e) {
        return false;
      }
      if (proceed[0]) {
        if (!prepareToInstall(optionalDeps)) {
          return false;
        }
      }
    }
  }
synchronized (lock) {
    File oldFile=null;
    if (PluginManager.isPluginInstalled(pluginNode.getPluginId())) {
      oldFile=PluginManager.getPlugin(pluginNode.getPluginId()).getPath();
    }
    File file;
    String errorMessage=IdeBundle.message("unknown.error");
    try {
      file=RepositoryHelper.downloadPlugin(pluginNode,packet,count,available);
    }
 catch (    IOException ex) {
      file=null;
      errorMessage=ex.getMessage();
    }
    if (file == null) {
      final String errorMessage1=errorMessage;
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          Messages.showErrorDialog(IdeBundle.message("error.plugin.was.not.installed",pluginNode.getName(),errorMessage1),IdeBundle.message("title.failed.to.download"));
        }
      }
);
      return false;
    }
    if (oldFile != null) {
      StartupActionScriptManager.ActionCommand deleteOld=new StartupActionScriptManager.DeleteCommand(oldFile);
      StartupActionScriptManager.addActionCommand(deleteOld);
    }
    if (file.getName().endsWith(".jar")) {
      StartupActionScriptManager.ActionCommand copyPlugin=new StartupActionScriptManager.CopyCommand(file,new File(PathManager.getPluginsPath() + File.separator + file.getName()));
      StartupActionScriptManager.addActionCommand(copyPlugin);
    }
 else {
      String unzipPath;
      if (ZipUtil.isZipContainsFolder(file))       unzipPath=PathManager.getPluginsPath();
 else       unzipPath=PathManager.getPluginsPath() + File.separator + pluginNode.getName();
      StartupActionScriptManager.ActionCommand unzip=new StartupActionScriptManager.UnzipCommand(file,new File(unzipPath));
      StartupActionScriptManager.addActionCommand(unzip);
    }
    StartupActionScriptManager.ActionCommand deleteTemp=new StartupActionScriptManager.DeleteCommand(file);
    StartupActionScriptManager.addActionCommand(deleteTemp);
    pluginNode.setStatus(PluginNode.STATUS_DOWNLOADED);
  }
  return true;
}
