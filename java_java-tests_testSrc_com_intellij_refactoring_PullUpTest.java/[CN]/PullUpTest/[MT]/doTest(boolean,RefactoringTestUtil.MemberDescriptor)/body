{
  configureByFile(BASE_PATH + getTestName(false) + ".java");
  PsiElement elementAt=getFile().findElementAt(getEditor().getCaretModel().getOffset());
  final PsiClass sourceClass=PsiTreeUtil.getParentOfType(elementAt,PsiClass.class);
  assertNotNull(sourceClass);
  PsiClass targetClass=sourceClass.getSuperClass();
  if (!targetClass.isWritable()) {
    final PsiClass[] interfaces=sourceClass.getInterfaces();
    assertTrue(interfaces.length == 1);
    assertTrue(interfaces[0].isWritable());
    targetClass=interfaces[0];
  }
  MemberInfo[] infos=RefactoringTestUtil.findMembers(sourceClass,membersToFind);
  final int[] countMoved=new int[]{0};
  final MoveMemberListener listener=new MoveMemberListener(){
    @Override public void memberMoved(    PsiClass aClass,    PsiMember member){
      assertEquals(sourceClass,aClass);
      countMoved[0]++;
    }
  }
;
  JavaRefactoringListenerManager.getInstance(getProject()).addMoveMembersListener(listener);
  final PullUpHelper helper=new PullUpHelper(sourceClass,targetClass,infos,new DocCommentPolicy(DocCommentPolicy.ASIS));
  helper.run();
  JavaRefactoringListenerManager.getInstance(getProject()).removeMoveMembersListener(listener);
  if (checkMemebersMovedCount) {
    assertEquals(countMoved[0],membersToFind.length);
  }
  checkResultByFile(BASE_PATH + getTestName(false) + "_after.java");
}
