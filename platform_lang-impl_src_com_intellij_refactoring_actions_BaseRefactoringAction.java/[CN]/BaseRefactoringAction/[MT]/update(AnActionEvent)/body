{
  Presentation presentation=e.getPresentation();
  presentation.setVisible(true);
  presentation.setEnabled(true);
  DataContext dataContext=e.getDataContext();
  Project project=e.getData(PlatformDataKeys.PROJECT);
  if (project == null) {
    disableAction(e);
    return;
  }
  if (isHidden()) {
    e.getPresentation().setVisible(false);
    return;
  }
  Editor editor=e.getData(PlatformDataKeys.EDITOR);
  PsiFile file=e.getData(LangDataKeys.PSI_FILE);
  if (file != null) {
    if (file instanceof PsiCompiledElement || !isAvailableForFile(file)) {
      disableAction(e);
      return;
    }
  }
  if (editor == null) {
    if (isAvailableInEditorOnly()) {
      disableAction(e);
      return;
    }
    final PsiElement[] elements=getPsiElementArray(dataContext);
    final boolean isEnabled=isEnabledOnDataContext(dataContext) || elements.length != 0 && isEnabledOnElements(elements);
    if (!isEnabled) {
      disableAction(e);
    }
  }
 else {
    PsiElement element=e.getData(LangDataKeys.PSI_ELEMENT);
    if (element == null || !isAvailableForLanguage(element.getLanguage())) {
      if (file == null) {
        disableAction(e);
        return;
      }
      element=getElementAtCaret(editor,file);
    }
    final boolean isEnabled=element != null && !(element instanceof SyntheticElement) && isAvailableForLanguage(PsiUtilBase.getLanguageInEditor(editor,project)) && isAvailableOnElementInEditor(element,editor);
    if (!isEnabled) {
      disableAction(e);
    }
  }
}
