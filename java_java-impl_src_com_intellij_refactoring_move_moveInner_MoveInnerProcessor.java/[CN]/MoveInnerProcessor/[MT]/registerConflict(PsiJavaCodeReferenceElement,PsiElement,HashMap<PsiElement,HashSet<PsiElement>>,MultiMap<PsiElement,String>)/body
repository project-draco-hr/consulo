{
  final PsiElement container=ConflictsUtil.getContainer(reference);
  HashSet<PsiElement> containerSet=reported.get(resolved);
  if (containerSet == null) {
    containerSet=new HashSet<PsiElement>();
    reported.put(resolved,containerSet);
  }
  if (!containerSet.contains(container)) {
    containerSet.add(container);
    String placesDescription;
    if (containerSet.size() == 1) {
      placesDescription=RefactoringUIUtil.getDescription(container,true);
    }
 else {
      placesDescription="<ol><li>" + StringUtil.join(containerSet,new Function<PsiElement,String>(){
        @Override public String fun(        PsiElement element){
          return RefactoringUIUtil.getDescription(element,true);
        }
      }
,"</li><li>") + "</li></ol>";
    }
    String message=RefactoringBundle.message("0.will.become.inaccessible.from.1",RefactoringUIUtil.getDescription(resolved,true),placesDescription);
    conflicts.put(resolved,Collections.singletonList(message));
  }
}
