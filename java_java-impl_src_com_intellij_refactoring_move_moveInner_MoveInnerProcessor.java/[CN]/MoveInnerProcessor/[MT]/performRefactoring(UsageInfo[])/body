{
  final PsiManager manager=PsiManager.getInstance(myProject);
  final PsiElementFactory factory=JavaPsiFacade.getInstance(manager.getProject()).getElementFactory();
  final RefactoringElementListener elementListener=getTransaction().getElementListener(myInnerClass);
  try {
    PsiField field=null;
    if (myParameterNameOuterClass != null) {
      field=factory.createField(myFieldNameOuterClass,factory.createType(myOuterClass));
      field=(PsiField)myInnerClass.add(field);
      myInnerClass=field.getContainingClass();
      addFieldInitializationToConstructors(myInnerClass,field,myParameterNameOuterClass);
    }
    ChangeContextUtil.encodeContextInfo(myInnerClass,false);
    myInnerClass=CodeInsightUtilBase.forcePsiPostprocessAndRestoreElement(myInnerClass);
    final MoveInnerOptions moveInnerOptions=new MoveInnerOptions(myInnerClass,myOuterClass,myTargetContainer,myNewClassName);
    final MoveInnerHandler handler=MoveInnerHandler.EP_NAME.forLanguage(myInnerClass.getLanguage());
    final PsiClass newClass;
    try {
      newClass=handler.copyClass(moveInnerOptions);
    }
 catch (    IncorrectOperationException e) {
      RefactoringUIUtil.processIncorrectOperation(myProject,e);
      return;
    }
    for (    PsiReference ref : ReferencesSearch.search(myInnerClass,new LocalSearchScope(newClass),true)) {
      PsiElement element=ref.getElement();
      if (element.getParent() instanceof PsiJavaCodeReferenceElement) {
        PsiJavaCodeReferenceElement parentRef=(PsiJavaCodeReferenceElement)element.getParent();
        PsiElement parentRefElement=parentRef.resolve();
        if (parentRefElement instanceof PsiClass) {
          parentRef.getQualifier().delete();
          continue;
        }
      }
      ref.bindToElement(newClass);
    }
    List<PsiReference> referencesToRebind=new ArrayList<PsiReference>();
    for (    UsageInfo usage : usages) {
      if (usage.isNonCodeUsage)       continue;
      PsiElement refElement=usage.getElement();
      PsiReference[] references=refElement.getReferences();
      for (      PsiReference reference : references) {
        if (reference.isReferenceTo(myInnerClass)) {
          referencesToRebind.add(reference);
        }
      }
    }
    myInnerClass.delete();
    for (    UsageInfo usage : usages) {
      if (usage.isNonCodeUsage)       continue;
      PsiElement refElement=usage.getElement();
      if (myParameterNameOuterClass != null) {
        PsiElement refParent=refElement.getParent();
        if (refParent instanceof PsiNewExpression || refParent instanceof PsiAnonymousClass) {
          PsiNewExpression newExpr=refParent instanceof PsiNewExpression ? (PsiNewExpression)refParent : (PsiNewExpression)refParent.getParent();
          PsiExpressionList argList=newExpr.getArgumentList();
          if (argList != null) {
            if (newExpr.getQualifier() == null) {
              PsiThisExpression thisExpr;
              PsiClass parentClass=RefactoringUtil.getThisClass(newExpr);
              if (myOuterClass.equals(parentClass)) {
                thisExpr=RefactoringUtil.createThisExpression(manager,null);
              }
 else {
                thisExpr=RefactoringUtil.createThisExpression(manager,myOuterClass);
              }
              argList.addAfter(thisExpr,null);
            }
 else {
              argList.addAfter(newExpr.getQualifier(),null);
              newExpr.getQualifier().delete();
            }
          }
        }
      }
    }
    for (    PsiReference reference : referencesToRebind) {
      reference.bindToElement(newClass);
    }
    if (field != null) {
      final PsiExpression paramAccessExpression=factory.createExpressionFromText(myParameterNameOuterClass,null);
      for (      final PsiMethod constructor : newClass.getConstructors()) {
        final PsiStatement[] statements=constructor.getBody().getStatements();
        if (statements.length > 0) {
          if (statements[0] instanceof PsiExpressionStatement) {
            PsiExpression expression=((PsiExpressionStatement)statements[0]).getExpression();
            if (expression instanceof PsiMethodCallExpression) {
              @NonNls String text=((PsiMethodCallExpression)expression).getMethodExpression().getText();
              if ("this".equals(text) || "super".equals(text)) {
                ChangeContextUtil.decodeContextInfo(expression,myOuterClass,paramAccessExpression);
              }
            }
          }
        }
      }
      PsiExpression accessExpression=factory.createExpressionFromText(myFieldNameOuterClass,null);
      ChangeContextUtil.decodeContextInfo(newClass,myOuterClass,accessExpression);
    }
 else {
      ChangeContextUtil.decodeContextInfo(newClass,null,null);
    }
    PsiFile targetFile=newClass.getContainingFile();
    OpenFileDescriptor descriptor=new OpenFileDescriptor(myProject,targetFile.getVirtualFile(),newClass.getTextOffset());
    FileEditorManager.getInstance(myProject).openTextEditor(descriptor,true);
    if (myMoveCallback != null) {
      myMoveCallback.refactoringCompleted();
    }
    elementListener.elementMoved(newClass);
    List<NonCodeUsageInfo> nonCodeUsages=new ArrayList<NonCodeUsageInfo>();
    for (    UsageInfo usage : usages) {
      if (usage instanceof NonCodeUsageInfo) {
        nonCodeUsages.add((NonCodeUsageInfo)usage);
      }
    }
    myNonCodeUsages=nonCodeUsages.toArray(new NonCodeUsageInfo[nonCodeUsages.size()]);
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
