{
  myCurrentParent=parentElement;
  final Alarm alarm=new Alarm(Alarm.ThreadToUse.SHARED_THREAD);
  alarm.addRequest(new Runnable(){
    public void run(){
      myList.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
    }
  }
,200);
  final Object[] children=getChildren(parentElement);
  myModel.removeAllElements();
  if (shouldAddTopElement()) {
    myModel.addElement(new TopLevelNode(myProject,parentElement.getValue()));
  }
  for (  Object aChildren : children) {
    AbstractTreeNode child=(AbstractTreeNode)aChildren;
    child.update();
  }
  if (myComparator != null) {
    Arrays.sort(children,myComparator);
  }
  for (  Object aChildren : children) {
    myModel.addElement(aChildren);
  }
  final int n=alarm.cancelAllRequests();
  if (n == 0) {
    alarm.addRequest(new Runnable(){
      public void run(){
        myList.setCursor(Cursor.getDefaultCursor());
      }
    }
,0);
  }
}
