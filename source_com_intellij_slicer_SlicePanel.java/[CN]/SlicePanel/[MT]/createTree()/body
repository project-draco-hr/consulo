{
  DefaultMutableTreeNode root=new DefaultMutableTreeNode();
  final Tree tree=new Tree(new DefaultTreeModel(root)){
    protected void paintComponent(    Graphics g){
      Rectangle clipBounds=g.getClipBounds();
      int start=getClosestRowForLocation(clipBounds.x,clipBounds.y);
      int end=Math.min(getRowCount(),getClosestRowForLocation(clipBounds.x + clipBounds.width,clipBounds.y + clipBounds.height) + 1);
      Color old=g.getColor();
      for (int i=start; i < end; i++) {
        TreePath path=getPathForRow(i);
        DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();
        Rectangle accumRect=null;
        TreePath accumPath=null;
        while (node != null) {
          Object userObject=node.getUserObject();
          if (!(userObject instanceof SliceNode) || !((SliceNode)userObject).getValue().duplicate)           break;
          accumPath=accumRect == null ? path : accumPath.getParentPath();
          accumRect=getPathBounds(accumPath).union(accumRect == null ? new Rectangle() : accumRect);
          node=(DefaultMutableTreeNode)node.getParent();
        }
        if (accumRect != null) {
          Rectangle rowRect=getRowBounds(getRowForPath(accumPath));
          accumRect=accumRect.intersection(new Rectangle(rowRect.x,rowRect.y,Integer.MAX_VALUE,Integer.MAX_VALUE));
          node=(DefaultMutableTreeNode)accumPath.getLastPathComponent();
          accumRect=accumRect.union(getExpandedNodesRect(this,node,accumPath));
          g.setColor(new Color(230,230,230));
          g.fillRoundRect(accumRect.x,accumRect.y,accumRect.width,accumRect.height,10,10);
          g.setColor(Color.lightGray);
          g.drawRoundRect(accumRect.x,accumRect.y,accumRect.width,accumRect.height,10,10);
        }
      }
      g.setColor(old);
      super.paintComponent(g);
    }
  }
;
  tree.setOpaque(false);
  tree.setToggleClickCount(-1);
  SliceUsageCellRenderer renderer=new SliceUsageCellRenderer();
  renderer.setOpaque(false);
  tree.setCellRenderer(renderer);
  UIUtil.setLineStyleAngled(tree);
  tree.setRootVisible(true);
  tree.setShowsRootHandles(true);
  tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  tree.setSelectionPath(new TreePath(root.getPath()));
  EditSourceOnDoubleClickHandler.install(tree);
  new TreeSpeedSearch(tree);
  TreeUtil.installActions(tree);
  TreeToolTipHandler.install(tree);
  ToolTipManager.sharedInstance().registerComponent(tree);
  myAutoScrollToSourceHandler.install(tree);
  tree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    final TreeSelectionEvent e){
      treeSelectionChanged();
    }
  }
);
  return tree;
}
