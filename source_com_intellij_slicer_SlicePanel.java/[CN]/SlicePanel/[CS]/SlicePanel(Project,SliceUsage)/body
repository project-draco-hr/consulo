{
  super(new BorderLayout());
  myProject=project;
  myTree=createTree();
  final Map<SliceUsage,List<SliceNode>> targetEqualUsages=new THashMap<SliceUsage,List<SliceNode>>(new TObjectHashingStrategy<SliceUsage>(){
    public int computeHashCode(    SliceUsage object){
      return object.getUsageInfo().hashCode();
    }
    public boolean equals(    SliceUsage o1,    SliceUsage o2){
      return o1.getUsageInfo().equals(o2.getUsageInfo());
    }
  }
);
  myBuilder=new SliceTreeBuilder(myTree,project);
  SliceNode rootNode=new SliceNode(project,root,targetEqualUsages,myBuilder);
  myBuilder.setRoot(rootNode);
  layoutPanel();
  myBuilder.addSubtreeToUpdate((DefaultMutableTreeNode)myTree.getModel().getRoot(),new Runnable(){
    public void run(){
      treeSelectionChanged();
    }
  }
);
}
