{
  Object result;
  if (value instanceof Remote) {
    if (value instanceof RemoteCastable) {
      result=castToLocal(value,tryFixReturnType(value,methodReturnType,classLoader));
    }
 else {
      result=substituteClassLoader ? substituteClassLoader(value,classLoader) : value;
    }
  }
 else   if (value instanceof List && methodReturnType.isInterface()) {
    result=Arrays.asList((Object[])handleRemoteResult(((List)value).toArray(),Object.class,classLoader,substituteClassLoader));
  }
 else   if (value instanceof Object[]) {
    Object[] array=(Object[])value;
    for (int i=0; i < array.length; i++) {
      array[i]=handleRemoteResult(array[i],Object.class,classLoader,substituteClassLoader);
    }
    result=array;
  }
 else {
    result=value;
  }
  return (T)result;
}
