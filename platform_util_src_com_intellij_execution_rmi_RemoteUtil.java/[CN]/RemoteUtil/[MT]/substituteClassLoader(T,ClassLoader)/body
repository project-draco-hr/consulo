{
  return executeWithClassLoader(new ThrowableComputable<T,Exception>(){
    public T compute(){
      Object proxy=Proxy.newProxyInstance(classLoader,remote.getClass().getInterfaces(),new InvocationHandler(){
        public Object invoke(        Object proxy,        final Method method,        final Object[] args) throws Throwable {
          return executeWithClassLoader(new ThrowableComputable<Object,Exception>(){
            public Object compute() throws Exception {
              try {
                return handleRemoteResult(method.invoke(remote,args),method.getReturnType(),classLoader,true);
              }
 catch (              InvocationTargetException e) {
                Throwable cause=e.getCause();
                if (cause instanceof RuntimeException)                 throw (RuntimeException)cause;
                if (cause instanceof Error)                 throw (Error)cause;
                if (canThrow(cause,method))                 throw (Exception)cause;
                throw new RuntimeException(cause);
              }
            }
          }
,classLoader);
        }
      }
);
      return (T)proxy;
    }
  }
,classLoader);
}
