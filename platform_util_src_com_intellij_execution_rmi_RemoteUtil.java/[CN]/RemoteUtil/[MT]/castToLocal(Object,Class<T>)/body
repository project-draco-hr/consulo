{
  final ClassLoader loader=clazz.getClassLoader();
  Object proxy=Proxy.newProxyInstance(loader,new Class[]{clazz},new InvocationHandler(){
    public Object invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {
      if (method.getDeclaringClass() == Object.class) {
        return method.invoke(remote,args);
      }
 else {
        Method m=ourRemoteToLocalMap.get(Pair.<Class<?>,Class<?>>create(remote.getClass(),clazz)).get(method);
        if (m == null)         throw new NoSuchMethodError(method.getName() + " in " + remote.getClass());
        try {
          Object result=m.invoke(remote,args);
          if (result instanceof Remote) {
            return castToLocal(result,tryFixReturnType(result,method.getReturnType(),loader));
          }
          return result;
        }
 catch (        InvocationTargetException e) {
          Throwable cause=e.getCause();
          if (cause instanceof RuntimeException)           throw cause;
          if (cause instanceof Error)           throw cause;
          if (canThrow(cause,method))           throw cause;
          throw new RuntimeException(cause);
        }
      }
    }
  }
);
  return (T)proxy;
}
