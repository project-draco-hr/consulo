{
  this.project=project;
  this.psiFile=psiFile;
  this.document=document;
  this.settings=settings;
  changesMade=false;
  factory=JavaPsiFacade.getInstance(project).getElementFactory();
  int size=0;
  size+=settings.getAfterClassLBrace().getnBlankLines() + 1;
  size+=settings.getBeforeMethodLBrace().getnBlankLines() + 1;
  size+=settings.getAfterMethodLBrace().getnBlankLines() + 1;
  size+=settings.getBeforeMethodRBrace().getnBlankLines() + 1;
  size+=settings.getAfterMethodRBrace().getnBlankLines() + 1;
  size+=settings.getBeforeClassRBrace().getnBlankLines() + 1;
  size+=settings.getAfterClassRBrace().getnBlankLines() + 1;
  LOG.debug("constructor allocating " + size + " newline chars for max insertion");
  newlineChars=new char[size];
  while (size > 0) {
    newlineChars[--size]='\n';
  }
  LOG.debug(settings.getAfterClassLBrace().toString());
  LOG.debug(settings.getBeforeMethodLBrace().toString());
  LOG.debug(settings.getAfterMethodLBrace().toString());
  LOG.debug(settings.getBeforeMethodRBrace().toString());
  LOG.debug(settings.getAfterMethodRBrace().toString());
  LOG.debug(settings.getBeforeClassRBrace().toString());
  LOG.debug(settings.getAfterClassRBrace().toString());
  final int ROOM_FOR_EXPANSION=100;
  int maxSize=document.getTextLength() + ROOM_FOR_EXPANSION;
  sb=new StringBuffer(maxSize);
}
