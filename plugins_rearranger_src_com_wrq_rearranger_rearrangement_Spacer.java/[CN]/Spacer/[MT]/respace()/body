{
  myBuffer.append(myDocument.getText());
  JavaElementVisitor visitor=new JavaRecursiveElementVisitor(){
    private int bias=0;
    public void visitReferenceExpression(    PsiReferenceExpression referenceExpression){
    }
    public void visitFile(    PsiFile psiFile){
      super.visitFile(psiFile);
      if (mySettings.getNewLinesAtEOF().isForce()) {
        while (myBuffer.length() > 0 && myBuffer.charAt(myBuffer.length() - 1) == '\n') {
          myBuffer.setLength(myBuffer.length() - 1);
        }
        for (int count=0; count < mySettings.getNewLinesAtEOF().getnBlankLines(); count++) {
          myBuffer.append('\n');
        }
      }
    }
    public void visitAnonymousClass(    PsiAnonymousClass psiAnonymousClass){
      super.visitAnonymousClass(psiAnonymousClass);
    }
    public void visitClass(    PsiClass psiClass){
      if (psiClass instanceof PsiTypeParameter) {
        return;
      }
      boolean anonymous=psiClass.getName() == null;
      int oldbias=bias;
      try {
        bias+=adjustSpacing(psiClass.getLBrace(),psiClass.getRBrace(),mySettings.getAfterClassLBrace(),bias);
      }
 catch (      BadPsiElementException badPsiElement) {
        handleBadPsiElementException("class " + psiClass.getName() + " missing left brace.  Body follows:",psiClass);
      }
      log(mySettings.getAfterClassLBrace(),psiClass.getName(),oldbias,bias);
      super.visitClass(psiClass);
      oldbias=bias;
      try {
        bias+=adjustSpacing(psiClass.getRBrace(),psiClass.getLBrace(),mySettings.getBeforeClassRBrace(),bias);
      }
 catch (      BadPsiElementException badPsiElement) {
        handleBadPsiElementException("class " + psiClass.getName() + " missing right brace.  Body follows:",psiClass);
      }
      log(mySettings.getBeforeClassRBrace(),psiClass.getName(),oldbias,bias);
      if (anonymous) {
        return;
      }
      boolean lastClass=false;
      if (psiClass.getParent() instanceof PsiJavaFile) {
        lastClass=isLastMeaningfulElement(psiClass.getParent(),psiClass);
      }
      if (!lastClass) {
        oldbias=bias;
        try {
          bias+=adjustSpacing(psiClass.getRBrace(),psiClass.getLBrace(),mySettings.getAfterClassRBrace(),bias);
        }
 catch (        BadPsiElementException badPsiElement) {
          handleBadPsiElementException("class " + psiClass.getName() + " missing left brace.  Body follows:",psiClass);
        }
        log(mySettings.getAfterClassRBrace(),psiClass.getName(),oldbias,bias);
      }
 else {
        LOG.debug("class " + psiClass.getName() + " is last in file, no 'after right brace' adjustment");
      }
    }
    public void visitMethod(    PsiMethod psiMethod){
      int oldbias;
      if (psiMethod.getBody() == null) {
        LOG.debug("skipping interface or abstract method " + psiMethod.getName());
        super.visitMethod(psiMethod);
        return;
      }
      boolean methodIsEmpty=true;
{
        PsiElement element=psiMethod.getBody().getLBrace().getNextSibling();
        while (element != null) {
          if (!(element instanceof PsiWhiteSpace) && element != psiMethod.getBody().getRBrace()) {
            methodIsEmpty=false;
            break;
          }
          element=element.getNextSibling();
        }
      }
      if (!methodIsEmpty) {
        oldbias=bias;
        try {
          bias+=adjustSpacing(psiMethod.getBody().getLBrace(),psiMethod.getBody().getRBrace(),mySettings.getBeforeMethodLBrace(),bias);
          bias+=adjustSpacing(psiMethod.getBody().getLBrace(),psiMethod.getBody().getRBrace(),mySettings.getAfterMethodLBrace(),bias);
        }
 catch (        BadPsiElementException badPsiElement) {
          handleBadPsiElementException("body of method " + psiMethod.getName() + " missing left brace.  Body follows:",psiMethod);
        }
        log(mySettings.getAfterMethodLBrace(),psiMethod.getName(),oldbias,bias);
        super.visitMethod(psiMethod);
        oldbias=bias;
        try {
          bias+=adjustSpacing(psiMethod.getBody().getRBrace(),psiMethod.getBody().getLBrace(),mySettings.getBeforeMethodRBrace(),bias);
        }
 catch (        BadPsiElementException badPsiElement) {
          handleBadPsiElementException("body of method " + psiMethod.getName() + " missing right brace.  Body follows:",psiMethod);
        }
        log(mySettings.getBeforeMethodRBrace(),psiMethod.getName(),oldbias,bias);
      }
 else {
        LOG.debug("method " + psiMethod.getName() + " is empty, no internal spacing changes");
      }
      boolean lastMethod=false;
      PsiClass owner=psiMethod.getContainingClass();
      if (owner == psiMethod.getParent()) {
        lastMethod=isLastMeaningfulElement(owner,psiMethod);
      }
      if (!lastMethod) {
        oldbias=bias;
        try {
          bias+=adjustSpacing(psiMethod.getBody().getRBrace(),psiMethod.getBody().getLBrace(),mySettings.getAfterMethodRBrace(),bias);
        }
 catch (        BadPsiElementException badPsiElement) {
          handleBadPsiElementException("body of method " + psiMethod.getName() + " missing right brace.  Body follows:",psiMethod);
        }
        log(mySettings.getAfterMethodRBrace(),psiMethod.getName(),oldbias,bias);
      }
 else {
        LOG.debug("method " + psiMethod.getName() + " is last in class, no 'after right brace' adjustment");
      }
    }
    public void visitCodeBlock(    PsiCodeBlock psiCodeBlock){
      int oldbias;
      if (!(psiCodeBlock.getParent() instanceof PsiMethod) && mySettings.isRemoveBlanksInsideCodeBlocks()) {
        oldbias=bias;
        try {
          bias+=adjustSpacing(psiCodeBlock.getLBrace(),psiCodeBlock.getRBrace(),false,0,bias);
        }
 catch (        BadPsiElementException badPsiElement) {
          handleBadPsiElementException("code block missing left brace.  Content follows:\n",psiCodeBlock);
        }
        log("code block left brace",oldbias,bias);
      }
      super.visitCodeBlock(psiCodeBlock);
      if (!(psiCodeBlock.getParent() instanceof PsiMethod) && mySettings.isRemoveBlanksInsideCodeBlocks()) {
        oldbias=bias;
        try {
          bias+=adjustSpacing(psiCodeBlock.getRBrace(),psiCodeBlock.getLBrace(),true,0,bias);
        }
 catch (        BadPsiElementException badPsiElement) {
          handleBadPsiElementException("code block missing right brace.  Content follows:\n",psiCodeBlock);
        }
        log("code block right brace",oldbias,bias);
      }
    }
  }
;
  try {
    myFile.accept(visitor);
  }
 catch (  AbortRespacingException ar) {
    return false;
  }
  if (myChangesMade) {
    LOG.debug("changes made to document; old length=" + myDocument.getTextLength() + ", new="+ myBuffer.length());
    LOG.debug("old document is:\n" + myDocument.getText());
    LOG.debug("new document is:\n" + myBuffer.toString());
    myDocument.replaceString(0,myDocument.getTextLength(),myBuffer.toString());
  }
  return myChangesMade;
}
