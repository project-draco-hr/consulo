{
  final PsiElement element=descriptor.getPsiElement();
  final PsiElement parent=ParenthesesUtils.getParentSkipParentheses(element);
  if (!(parent instanceof PsiPolyadicExpression)) {
    return;
  }
  final PsiPolyadicExpression polyadicExpression=(PsiPolyadicExpression)parent;
  final PsiExpression[] operands=polyadicExpression.getOperands();
  if (operands.length != 2) {
    return;
  }
  PsiExpression operand=ParenthesesUtils.stripParentheses(operands[1]);
  @NonNls final StringBuilder newExpressionText=new StringBuilder();
  if (operand instanceof PsiPrefixExpression) {
    final PsiPrefixExpression prefixExpression=(PsiPrefixExpression)operand;
    if (!JavaTokenType.EXCL.equals(prefixExpression.getOperationTokenType())) {
      return;
    }
    newExpressionText.append('!');
    operand=ParenthesesUtils.stripParentheses(prefixExpression.getOperand());
  }
  if (!(operand instanceof PsiMethodCallExpression)) {
    return;
  }
  final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)operand;
  final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
  final String referenceName=methodExpression.getReferenceName();
  final PsiExpression qualifier=methodExpression.getQualifierExpression();
  if (qualifier == null) {
    return;
  }
  final PsiExpressionList argumentList=methodCallExpression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length != 1) {
    return;
  }
  final PsiExpression argument=arguments[0];
  final PsiType type=argument.getType();
  if (PsiType.BOOLEAN.equals(type)) {
    final Object value=ExpressionUtils.computeConstantExpression(argument);
    if (Boolean.TRUE.equals(value)) {
      newExpressionText.append("java.lang.Boolean.TRUE");
    }
 else     if (Boolean.FALSE.equals(value)) {
      newExpressionText.append("java.lang.Boolean.FALSE");
    }
 else {
      newExpressionText.append("java.lang.Boolean.valueOf(").append(argument.getText()).append(')');
    }
  }
 else   if (PsiType.BYTE.equals(type)) {
    newExpressionText.append("java.lang.Byte.valueOf(").append(argument.getText()).append(')');
  }
 else   if (PsiType.SHORT.equals(type)) {
    newExpressionText.append("java.lang.Short.valueOf(").append(argument.getText()).append(')');
  }
 else   if (PsiType.INT.equals(type)) {
    newExpressionText.append("java.lang.Integer.valueOf(").append(argument.getText()).append(')');
  }
 else   if (PsiType.LONG.equals(type)) {
    newExpressionText.append("java.lang.Long.valueOf(").append(argument.getText()).append(')');
  }
 else   if (PsiType.FLOAT.equals(type)) {
    newExpressionText.append("java.lang.Float.valueOf(").append(argument.getText()).append(')');
  }
 else   if (PsiType.DOUBLE.equals(type)) {
    newExpressionText.append("java.lang.Double.valueOf(").append(argument.getText()).append(')');
  }
 else {
    newExpressionText.append(argument.getText());
  }
  newExpressionText.append('.').append(referenceName).append('(').append(qualifier.getText()).append(')');
  replaceExpression(polyadicExpression,newExpressionText.toString());
}
