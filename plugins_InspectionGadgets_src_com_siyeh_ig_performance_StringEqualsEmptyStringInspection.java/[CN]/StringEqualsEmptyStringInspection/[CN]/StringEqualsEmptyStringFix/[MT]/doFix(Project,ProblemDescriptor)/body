{
  final PsiIdentifier name=(PsiIdentifier)descriptor.getPsiElement();
  final PsiReferenceExpression expression=(PsiReferenceExpression)name.getParent();
  if (expression == null) {
    return;
  }
  final PsiMethodCallExpression call=(PsiMethodCallExpression)expression.getParent();
  final PsiExpressionList argumentList=call.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length == 0) {
    return;
  }
  final PsiExpression qualifier=expression.getQualifierExpression();
  final PsiExpression argument=arguments[0];
  final String variableText;
  final boolean addNullCheck;
  if (ExpressionUtils.isEmptyStringLiteral(argument)) {
    variableText=getRemainingText(qualifier);
    addNullCheck=false;
  }
 else {
    variableText=getRemainingText(argument);
    addNullCheck=true;
  }
  StringBuilder newExpression;
  if (addNullCheck) {
    newExpression=new StringBuilder(variableText);
    newExpression.append("!=null&&");
  }
 else {
    newExpression=new StringBuilder("");
  }
  final PsiElement parent=call.getParent();
  final PsiExpression expressionToReplace;
  if (parent instanceof PsiExpression) {
    final PsiExpression parentExpression=(PsiExpression)parent;
    if (BoolUtils.isNegation(parentExpression)) {
      expressionToReplace=parentExpression;
      if (useIsEmpty) {
        newExpression.append('!' + variableText + ".isEmpty()");
      }
 else {
        newExpression.append(variableText + ".length()!=0");
      }
    }
 else {
      expressionToReplace=call;
      if (useIsEmpty) {
        newExpression.append(variableText).append(".isEmpty()");
      }
 else {
        newExpression.append(variableText).append(".length()==0");
      }
    }
  }
 else {
    expressionToReplace=call;
    if (useIsEmpty) {
      newExpression.append(variableText).append(".isEmpty()");
    }
 else {
      newExpression.append(variableText).append(".length()==0");
    }
  }
  replaceExpression(expressionToReplace,newExpression.toString());
}
