{
  super.visitMethodCallExpression(call);
  final PsiReferenceExpression methodExpression=call.getMethodExpression();
  @NonNls final String methodName=methodExpression.getReferenceName();
  if (!"equals".equals(methodName)) {
    return;
  }
  final PsiExpressionList argumentList=call.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length != 1) {
    return;
  }
  final PsiElement context=call.getParent();
  final boolean useIsEmpty=PsiUtil.isLanguageLevel6OrHigher(call);
  if (!useIsEmpty && context instanceof PsiExpressionStatement) {
    return;
  }
  final PsiExpression qualifier=methodExpression.getQualifierExpression();
  final PsiExpression argument=arguments[0];
  if (ExpressionUtils.isEmptyStringLiteral(qualifier)) {
    final PsiType type=argument.getType();
    if (!TypeUtils.isJavaLangString(type)) {
      return;
    }
  }
 else   if (ExpressionUtils.isEmptyStringLiteral(argument)) {
    if (qualifier == null) {
      return;
    }
    final PsiType type=qualifier.getType();
    if (!TypeUtils.isJavaLangString(type)) {
      return;
    }
  }
  registerMethodCallError(call,Boolean.valueOf(useIsEmpty));
}
