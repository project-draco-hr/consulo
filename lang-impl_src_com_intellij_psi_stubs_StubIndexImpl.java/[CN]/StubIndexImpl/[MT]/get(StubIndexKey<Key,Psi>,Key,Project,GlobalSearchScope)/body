{
  try {
    final DirectoryIndex dirIndex=DirectoryIndex.getInstance(project);
    final PersistentFS fs=(PersistentFS)ManagingFS.getInstance();
    final PsiManager psiManager=PsiManager.getInstance(project);
    final List<Psi> result=new ArrayList<Psi>();
    final MyIndex<Key> index=(MyIndex<Key>)myIndicies.get(indexKey);
    final ValueContainer<Integer> container=index.getData(key);
    container.forEach(new ValueContainer.ContainerAction<Integer>(){
      public void perform(      final int id,      final Integer value){
        final VirtualFile file=IndexInfrastructure.findFileById(dirIndex,fs,id);
        if (file != null && (scope == null || scope.contains(file))) {
          final PsiFileImpl psiFile=(PsiFileImpl)psiManager.findFile(file);
          if (psiFile != null) {
            StubTree stubTree=psiFile.getStubTree();
            if (stubTree == null) {
              stubTree=StubTree.readFromVFile(file,project);
              final List<StubElement<?>> plained=stubTree.getPlainList();
              final StubElement<?> stub=plained.get(value);
              final ASTNode tree=psiFile.findTreeForStub(stubTree,stub);
              result.add((Psi)tree.getPsi());
            }
 else {
              final List<StubElement<?>> plained=stubTree.getPlainList();
              result.add((Psi)plained.get(value).getPsi());
            }
          }
        }
      }
    }
);
    return result;
  }
 catch (  StorageException e) {
    throw new RuntimeException(e);
  }
}
