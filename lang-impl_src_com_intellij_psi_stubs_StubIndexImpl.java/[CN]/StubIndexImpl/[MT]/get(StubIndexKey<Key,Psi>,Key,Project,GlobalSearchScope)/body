{
  try {
    final DirectoryIndex dirIndex=DirectoryIndex.getInstance(project);
    final PersistentFS fs=(PersistentFS)ManagingFS.getInstance();
    final PsiManager psiManager=PsiManager.getInstance(project);
    final List<Psi> result=new ArrayList<Psi>();
    final MyIndex<Key> index=(MyIndex<Key>)myIndicies.get(indexKey);
    index.getReadLock().lock();
    try {
      final ValueContainer<TIntArrayList> container=index.getData(key);
      container.forEach(new ValueContainer.ContainerAction<TIntArrayList>(){
        public void perform(        final int id,        final TIntArrayList value){
          final VirtualFile file=IndexInfrastructure.findFileById(dirIndex,fs,id);
          if (file != null && (scope == null || scope.contains(file))) {
            final PsiFileImpl psiFile=(PsiFileImpl)psiManager.findFile(file);
            if (psiFile != null) {
              StubTree stubTree=psiFile.getStubTree();
              if (stubTree == null) {
                stubTree=StubTree.readFromVFile(file,project);
                final List<StubElement<?>> plained=stubTree.getPlainList();
                for (int i=0; i < value.size(); i++) {
                  final StubElement<?> stub=plained.get(value.get(i));
                  final ASTNode tree=psiFile.findTreeForStub(stubTree,stub);
                  result.add((Psi)tree.getPsi());
                }
              }
 else {
                final List<StubElement<?>> plained=stubTree.getPlainList();
                for (int i=0; i < value.size(); i++) {
                  result.add((Psi)plained.get(value.get(i)).getPsi());
                }
              }
            }
          }
        }
      }
);
    }
  finally {
      index.getReadLock().unlock();
    }
    return result;
  }
 catch (  StorageException e) {
    throw new RuntimeException(e);
  }
}
