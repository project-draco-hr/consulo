{
  if (!hasNameElement()) {
    myScriptDefinition=null;
    return;
  }
  final AntFile file=getAntFile();
  if (file == null)   return;
  final String thisClassName=createScriptClassName(getName());
  myScriptDefinition=(AntTypeDefinitionImpl)file.getBaseTypeDefinition(thisClassName);
  final Map<String,AntAttributeType> attributes=(myScriptDefinition == null) ? new HashMap<String,AntAttributeType>() : myScriptDefinition.getAttributesMap();
  attributes.clear();
  final Map<AntTypeId,String> nestedElements=(myScriptDefinition == null) ? new HashMap<AntTypeId,String>() : myScriptDefinition.getNestedElementsMap();
  for (  AntElement child : getChildren()) {
    if (child instanceof AntStructuredElement) {
      final AntStructuredElement se=(AntStructuredElement)child;
      final String name=se.getName();
      if (name != null) {
        final XmlTag sourceElement=se.getSourceElement();
        final String tagName=sourceElement.getName();
        if (tagName.equals("attribute")) {
          attributes.put(name.toLowerCase(Locale.US),AntAttributeType.STRING);
        }
 else         if (tagName.equals("element")) {
          final String classNameAttrib=sourceElement.getAttributeValue("classname");
          final String elementClassName=classNameAttrib != null ? classNameAttrib : thisClassName + '$' + name;
          AntTypeDefinitionImpl nestedDef=(AntTypeDefinitionImpl)file.getBaseTypeDefinition(elementClassName);
          if (nestedDef == null) {
            final AntTypeDefinitionImpl targetDef=(AntTypeDefinitionImpl)file.getTargetDefinition();
            if (targetDef != null) {
              nestedDef=new AntTypeDefinitionImpl(targetDef);
            }
          }
          if (nestedDef != null) {
            final String typeAttrib=sourceElement.getAttributeValue("type");
            final String typeName=typeAttrib != null ? typeAttrib : name;
            final AntTypeId typeId=new AntTypeId(typeName);
            nestedDef.setTypeId(typeId);
            nestedDef.setClassName(elementClassName);
            nestedDef.setDefiningElement(child);
            file.registerCustomType(nestedDef);
            nestedElements.put(typeId,nestedDef.getClassName());
          }
        }
      }
    }
  }
  final AntTypeId definedTypeId=new AntTypeId(getName());
  if (myScriptDefinition == null) {
    myScriptDefinition=new AntTypeDefinitionImpl(definedTypeId,thisClassName,true,false,attributes,nestedElements,this);
  }
 else {
    myScriptDefinition.setTypeId(definedTypeId);
    myScriptDefinition.setClassName(thisClassName);
    myScriptDefinition.setIsTask(true);
    myScriptDefinition.setDefiningElement(this);
  }
  final AntStructuredElement parent=getAntProject();
  if (parent != null) {
    parent.registerCustomType(myScriptDefinition);
  }
  final AntAllTasksContainerImpl sequential=PsiTreeUtil.getChildOfType(this,AntAllTasksContainerImpl.class);
  if (sequential != null) {
    sequential.registerCustomType(myScriptDefinition);
    for (    final AntTypeId id : myScriptDefinition.getNestedElements()) {
      sequential.registerCustomType(file.getBaseTypeDefinition(myScriptDefinition.getNestedClassName(id)));
    }
  }
}
