{
  try {
    while (true) {
      if (ApplicationManager.getApplication().isDisposeInProgress() || notifierProcess == null || isShuttingDown)       return;
      final String command=readLine();
      if (command == null) {
        startupProcess();
        continue;
      }
      if (GIVEUP_COMMAND.equals(command)) {
        LOG.info("Filewatcher gives up to operate on this platform");
        shutdownProcess();
        return;
      }
      if (RESET_COMMAND.equals(command)) {
        reset();
      }
 else       if (UNWATCHEABLE_COMMAND.equals(command)) {
        List<String> roots=new ArrayList<String>();
        do {
          final String path=readLine();
          if (path == null || "#".equals(path))           break;
          roots.add(path);
        }
 while (true);
        setManualWatchRoots(roots);
      }
 else       if (MESSAGE_COMMAND.equals(command)) {
        final String message=readLine();
        if (message == null)         break;
        Notifications.Bus.notify(new Notification(Notifications.SYSTEM_MESSAGES_GROUP_ID,"File Watcher",message,NotificationType.WARNING,NotificationListener.URL_OPENING_LISTENER));
      }
 else       if (REMAP_COMMAND.equals(command)) {
        Set<Pair<String,String>> pairs=new HashSet<Pair<String,String>>();
        do {
          final String pathA=readLine();
          if (pathA == null || "#".equals(pathA))           break;
          final String pathB=readLine();
          if (pathB == null || "#".equals(pathB))           break;
          pairs.add(new Pair<String,String>(ensureEndsWithSlash(pathA),ensureEndsWithSlash(pathB)));
        }
 while (true);
        myMapping.clear();
        myMapping.addAll(pairs);
      }
 else {
        String path=readLine();
        if (path == null) {
          startupProcess();
          continue;
        }
        if (isWatcheable(path)) {
          try {
            onPathChange(ChangeKind.valueOf(command),path);
          }
 catch (          IllegalArgumentException e) {
            LOG.error("Illegal watcher command: " + command);
          }
        }
 else         if (LOG.isDebugEnabled()) {
          LOG.debug("not watcheable, filtered: " + path);
        }
      }
    }
  }
 catch (  IOException e) {
    reset();
    shutdownProcess();
    LOG.info("Watcher terminated and attempt to restart has failed. Exiting watching thread.",e);
  }
}
