{
  try {
    while (true) {
      if (ApplicationManager.getApplication().isDisposeInProgress() || notifierProcess == null || isShuttingDown)       return;
      final String command=readLine();
      if (command == null) {
        startupProcess(true);
        continue;
      }
      if (GIVE_UP_COMMAND.equals(command)) {
        LOG.info("FileWatcher gives up to operate on this platform");
        shutdownProcess();
        return;
      }
      if (RESET_COMMAND.equals(command)) {
        reset();
      }
 else       if (UNWATCHABLE_COMMAND.equals(command)) {
        List<String> roots=new ArrayList<String>();
        do {
          final String path=readLine();
          if (path == null || "#".equals(path))           break;
          roots.add(path);
        }
 while (true);
synchronized (LOCK) {
          myManualWatchRoots=roots;
        }
      }
 else       if (MESSAGE_COMMAND.equals(command)) {
        final String message=readLine();
        if (message == null)         break;
        Notifications.Bus.notify(new Notification(Notifications.SYSTEM_MESSAGES_GROUP_ID,"File Watcher",message,NotificationType.WARNING,NotificationListener.URL_OPENING_LISTENER));
      }
 else       if (REMAP_COMMAND.equals(command)) {
        Set<Pair<String,String>> pairs=new HashSet<Pair<String,String>>();
        do {
          final String pathA=readLine();
          if (pathA == null || "#".equals(pathA))           break;
          final String pathB=readLine();
          if (pathB == null || "#".equals(pathB))           break;
          pairs.add(new Pair<String,String>(ensureEndsWithSlash(pathA),ensureEndsWithSlash(pathB)));
        }
 while (true);
synchronized (LOCK) {
          myMapping.clear();
          myMapping.addAll(pairs);
        }
      }
 else {
        final String path=readLine();
        if (path == null) {
          startupProcess(true);
          continue;
        }
synchronized (LOCK) {
          final String watchedPath=checkWatchable(path);
          if (watchedPath != null) {
            try {
              onPathChange(ChangeKind.valueOf(command),watchedPath);
            }
 catch (            IllegalArgumentException e) {
              LOG.error("Illegal watcher command: " + command);
            }
          }
 else           if (LOG.isDebugEnabled()) {
            LOG.debug("Not watchable, filtered: " + path);
          }
        }
      }
    }
  }
 catch (  IOException e) {
    reset();
    shutdownProcess();
    LOG.info("Watcher terminated and attempt to restart has failed. Exiting watching thread.",e);
  }
}
