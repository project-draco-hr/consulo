{
  if (SystemInfo.isWindows && op == WatcherOp.RECDIRTY && path.length() == 3 && Character.isLetter(path.charAt(0))) {
    VirtualFile root=LocalFileSystem.getInstance().findFileByPath(path);
    if (root != null) {
synchronized (myLock) {
        myDirtyPaths.dirtyPathsRecursive.add(root.getPresentableUrl());
      }
    }
    notifyOnEvent();
    return;
  }
  boolean exactPath=op != WatcherOp.DIRTY && op != WatcherOp.RECDIRTY;
  Collection<String> paths=checkWatchable(path,exactPath,false);
  if (paths.isEmpty()) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Not watchable, filtered: " + path);
    }
    return;
  }
synchronized (myLock) {
switch (op) {
case STATS:
case CHANGE:
      myDirtyPaths.dirtyPaths.addAll(paths);
    break;
case CREATE:
case DELETE:
  for (  String p : paths) {
    String parentPath=new File(p).getParent();
    myDirtyPaths.dirtyPaths.add(parentPath != null ? parentPath : p);
  }
break;
case DIRTY:
myDirtyPaths.dirtyDirectories.addAll(paths);
break;
case RECDIRTY:
myDirtyPaths.dirtyPathsRecursive.addAll(paths);
break;
default :
LOG.error("Unexpected op: " + op);
}
}
notifyOnEvent();
}
