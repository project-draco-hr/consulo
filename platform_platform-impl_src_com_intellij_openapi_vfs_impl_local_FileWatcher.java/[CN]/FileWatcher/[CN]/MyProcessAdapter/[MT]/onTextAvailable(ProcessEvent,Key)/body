{
  if (outputType != ProcessOutputTypes.STDOUT)   return;
  final String line=event.getText().trim();
  if (LOG.isDebugEnabled()) {
    LOG.debug(">> " + line);
  }
  if (myLastOp == null) {
    final WatcherOp watcherOp;
    try {
      watcherOp=WatcherOp.valueOf(line);
    }
 catch (    IllegalArgumentException e) {
      final String message="Illegal watcher command: " + line;
      if (ApplicationManager.getApplication().isUnitTestMode())       LOG.debug(message);
 else       LOG.error(message);
      return;
    }
    if (watcherOp == WatcherOp.GIVEUP) {
      LOG.info("Native file watcher gives up to operate on this platform");
      myIsShuttingDown=true;
      shutdownProcess();
    }
 else     if (watcherOp == WatcherOp.RESET) {
      reset();
    }
 else {
      myLastOp=watcherOp;
    }
  }
 else   if (myLastOp == WatcherOp.MESSAGE) {
    Notifications.Bus.notify(new Notification(Notifications.SYSTEM_MESSAGES_GROUP_ID,"File Watcher",line,NotificationType.WARNING,NotificationListener.URL_OPENING_LISTENER));
    myLastOp=null;
  }
 else   if (myLastOp == WatcherOp.REMAP || myLastOp == WatcherOp.UNWATCHEABLE) {
    if ("#".equals(line)) {
      if (myLastOp == WatcherOp.REMAP) {
        processRemap();
      }
 else {
        mySettingRoots.decrementAndGet();
        processUnwatchable();
      }
      myLines.clear();
      myLastOp=null;
    }
 else {
      myLines.add(line);
    }
  }
 else {
    processChange(line.replace('\0','\n'),myLastOp);
    myLastOp=null;
  }
}
