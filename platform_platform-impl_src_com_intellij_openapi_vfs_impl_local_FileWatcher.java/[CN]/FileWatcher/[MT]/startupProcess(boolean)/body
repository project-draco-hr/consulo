{
  if (isShuttingDown)   return;
  if (attemptCount++ > MAX_PROCESS_LAUNCH_ATTEMPT_COUNT) {
    notifyOnFailure("File watcher cannot be started",null);
    throw new IOException("Can't launch process anymore");
  }
  shutdownProcess();
  @NonNls final String executableName=SystemInfo.isWindows ? "fsnotifier.exe" : SystemInfo.isLinux && SystemInfo.isAMD64 ? "fsnotifier64" : "fsnotifier";
  String alternatePathToExecutable=System.getProperty(PROPERTY_WATCHER_EXECUTABLE_PATH);
  if (alternatePathToExecutable != null) {
    if (!new File(alternatePathToExecutable).isFile()) {
      alternatePathToExecutable=null;
    }
  }
  final String pathToExecutable=alternatePathToExecutable != null ? FileUtil.toSystemDependentName(alternatePathToExecutable) : PathManager.getBinPath() + File.separatorChar + executableName;
  final File exec=new File(pathToExecutable);
  if (!exec.exists()) {
    notifyOnFailure("File watcher is not found at path: " + pathToExecutable,null);
    return;
  }
  if (!exec.canExecute()) {
    notifyOnFailure("File watcher is not executable: <a href=\"" + pathToExecutable + "\">"+ pathToExecutable+ "</a>",new NotificationListener(){
      @Override public void hyperlinkUpdate(      @NotNull Notification notification,      @NotNull HyperlinkEvent event){
        ShowFilePathAction.open(exec,exec);
      }
    }
);
    return;
  }
  LOG.info("Starting file watcher: " + pathToExecutable);
  notifierProcess=Runtime.getRuntime().exec(new String[]{pathToExecutable});
  notifierReader=new BufferedReader(new InputStreamReader(notifierProcess.getInputStream()));
  notifierWriter=new BufferedWriter(new OutputStreamWriter(notifierProcess.getOutputStream()));
synchronized (LOCK) {
    if (restart && myRecursiveWatchRoots.size() + myFlatWatchRoots.size() > 0) {
      final List<String> recursiveWatchRoots=new ArrayList<String>(myRecursiveWatchRoots);
      final List<String> flatWatchRoots=new ArrayList<String>(myFlatWatchRoots);
      myRecursiveWatchRoots.clear();
      myFlatWatchRoots.clear();
      setWatchRoots(recursiveWatchRoots,flatWatchRoots);
    }
  }
}
