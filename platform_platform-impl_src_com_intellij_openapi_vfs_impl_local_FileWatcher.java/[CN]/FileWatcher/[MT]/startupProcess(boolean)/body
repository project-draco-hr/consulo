{
  if (isShuttingDown)   return;
  if (attemptCount++ > MAX_PROCESS_LAUNCH_ATTEMPT_COUNT) {
    notifyOnFailure("File watcher cannot be started",null);
    throw new IOException("Can't launch process anymore");
  }
  shutdownProcess();
  if (executable == null) {
    executable=getExecutable();
    if (executable == null) {
      myFailureShownToTheUser=true;
      return;
    }
    if (!executable.exists()) {
      notifyOnFailure("File watcher is not found at path: " + executable,null);
      return;
    }
    if (!executable.canExecute()) {
      final String message="File watcher is not executable: <a href=\"" + executable + "\">"+ executable+ "</a>";
      final File exec=executable;
      notifyOnFailure(message,new NotificationListener(){
        @Override public void hyperlinkUpdate(        @NotNull Notification notification,        @NotNull HyperlinkEvent event){
          ShowFilePathAction.openFile(exec);
        }
      }
);
      return;
    }
  }
  LOG.info("Starting file watcher: " + executable);
  notifierProcess=Runtime.getRuntime().exec(executable.getAbsolutePath());
  notifierReader=new BufferedReader(new InputStreamReader(notifierProcess.getInputStream()));
  notifierWriter=new BufferedWriter(new OutputStreamWriter(notifierProcess.getOutputStream()));
synchronized (LOCK) {
    if (restart && myRecursiveWatchRoots.size() + myFlatWatchRoots.size() > 0) {
      final List<String> recursiveWatchRoots=new ArrayList<String>(myRecursiveWatchRoots);
      final List<String> flatWatchRoots=new ArrayList<String>(myFlatWatchRoots);
      myRecursiveWatchRoots.clear();
      myFlatWatchRoots.clear();
      setWatchRoots(recursiveWatchRoots,flatWatchRoots);
    }
  }
}
