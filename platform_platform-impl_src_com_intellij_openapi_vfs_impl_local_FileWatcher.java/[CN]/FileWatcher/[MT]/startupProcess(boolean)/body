{
  if (isShuttingDown)   return;
  if (attemptCount++ > MAX_PROCESS_LAUNCH_ATTEMPT_COUNT) {
    notifyOnFailure("File watcher cannot be started",null);
    throw new IOException("Can't launch process anymore");
  }
  shutdownProcess();
  String execPath=null;
  final String altExecPath=System.getProperty(PROPERTY_WATCHER_EXECUTABLE_PATH);
  if (altExecPath != null && new File(altExecPath).isFile()) {
    execPath=FileUtil.toSystemDependentName(altExecPath);
  }
  if (execPath == null) {
    final String execName;
    execName=getExecutableName();
    if (execName == null) {
      myFailureShownToTheUser=true;
      return;
    }
    execPath=PathManager.getBinPath() + File.separatorChar + execName;
  }
  final File exec=new File(execPath);
  if (!exec.exists()) {
    notifyOnFailure("File watcher is not found at path: " + execPath,null);
    return;
  }
  if (!exec.canExecute()) {
    notifyOnFailure("File watcher is not executable: <a href=\"" + execPath + "\">"+ execPath+ "</a>",new NotificationListener(){
      @Override public void hyperlinkUpdate(      @NotNull Notification notification,      @NotNull HyperlinkEvent event){
        ShowFilePathAction.openFile(exec);
      }
    }
);
    return;
  }
  LOG.info("Starting file watcher: " + execPath);
  notifierProcess=Runtime.getRuntime().exec(new String[]{execPath});
  notifierReader=new BufferedReader(new InputStreamReader(notifierProcess.getInputStream()));
  notifierWriter=new BufferedWriter(new OutputStreamWriter(notifierProcess.getOutputStream()));
synchronized (LOCK) {
    if (restart && myRecursiveWatchRoots.size() + myFlatWatchRoots.size() > 0) {
      final List<String> recursiveWatchRoots=new ArrayList<String>(myRecursiveWatchRoots);
      final List<String> flatWatchRoots=new ArrayList<String>(myFlatWatchRoots);
      myRecursiveWatchRoots.clear();
      myFlatWatchRoots.clear();
      setWatchRoots(recursiveWatchRoots,flatWatchRoots);
    }
  }
}
