{
  final IElementType firstToken=myBuilder.getTokenType();
  if (firstToken == JavaFxTokenTypes.INIT_KEYWORD) {
    final PsiBuilder.Marker marker=myBuilder.mark();
    nextToken();
    parseBlockExpression();
    marker.done(JavaFxElementTypes.INIT_BLOCK);
  }
 else   if (firstToken == JavaFxTokenTypes.POSTINIT_KEYWORD) {
    final PsiBuilder.Marker marker=myBuilder.mark();
    nextToken();
    parseBlockExpression();
    marker.done(JavaFxElementTypes.POSTINIT_BLOCK);
  }
 else   if (firstToken == JavaFxTokenTypes.FUNCTION_KEYWORD) {
    final PsiBuilder.Marker functionMarker=myBuilder.mark();
    parseModifiers();
    parseFunctionDefinition(functionMarker);
  }
 else   if (JavaFxTokenTypes.VARIABLE_LABEL.contains(firstToken)) {
    final PsiBuilder.Marker variableMarker=myBuilder.mark();
    parseModifiers();
    parseVariableDeclaration(variableMarker);
  }
 else   if (JavaFxTokenTypes.MODIFIERS.contains(firstToken)) {
    final PsiBuilder.Marker marker=myBuilder.mark();
    parseModifiers();
    if (atToken(JavaFxTokenTypes.FUNCTION_KEYWORD)) {
      parseFunctionDefinition(marker);
    }
 else     if (JavaFxTokenTypes.VARIABLE_LABEL.contains(myBuilder.getTokenType())) {
      parseVariableDeclaration(marker);
    }
 else {
      myBuilder.error(JavaFxBundle.message("unexpected.token"));
      marker.drop();
    }
  }
 else   if (firstToken == JavaFxTokenTypes.SEMICOLON) {
    do {
      nextToken();
    }
 while (atToken(JavaFxTokenTypes.SEMICOLON));
  }
 else {
    myBuilder.error(JavaFxBundle.message("unexpected.token"));
    nextToken();
  }
}
