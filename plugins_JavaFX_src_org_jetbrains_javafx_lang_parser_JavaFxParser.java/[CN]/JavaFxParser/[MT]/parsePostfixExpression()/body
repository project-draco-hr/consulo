{
  PsiBuilder.Marker marker=myBuilder.mark();
  if (!parsePrimaryExpression()) {
    marker.drop();
    return false;
  }
  while (true) {
    final JavaFxElementType expressionType;
    if (atToken(JavaFxTokenTypes.DOT)) {
      nextToken();
      final IElementType elementType=myBuilder.getTokenType();
      if (elementType == JavaFxTokenTypes.THIS_KEYWORD) {
        expressionType=JavaFxElementTypes.THIS_EXPRESSION;
      }
 else {
        checkMatches(JavaFxTokenTypes.NAME_ALL,JavaFxBundle.message("name.expected"));
        expressionType=JavaFxElementTypes.REFERENCE_EXPRESSION;
      }
    }
 else     if (atToken(JavaFxTokenTypes.LPAREN)) {
      parseExpressionList();
      expressionType=JavaFxElementTypes.CALL_EXPRESSION;
    }
 else     if (atToken(JavaFxTokenTypes.LBRACK)) {
      nextToken();
      parseValueExpression();
      if (atToken(JavaFxTokenTypes.RBRACK)) {
        nextToken();
        expressionType=JavaFxElementTypes.INDEX_EXPRESSION;
      }
 else       if (atToken(JavaFxTokenTypes.DELIM)) {
        nextToken();
        parseValueExpression();
        checkMatches(JavaFxTokenTypes.RBRACK,JavaFxBundle.message("rbrack.expected"));
        expressionType=JavaFxElementTypes.SEQUENCE_SELECT_EXPRESSION;
      }
 else       if (atToken(JavaFxTokenTypes.RANGE)) {
        nextToken();
        if (atToken(JavaFxTokenTypes.LT)) {
          nextToken();
        }
        if (!atToken(JavaFxTokenTypes.RBRACK)) {
          parseValueExpression();
        }
        checkMatches(JavaFxTokenTypes.RBRACK,JavaFxBundle.message("rbrack.expected"));
        expressionType=JavaFxElementTypes.SLICE_EXPRESSION;
      }
 else {
        myBuilder.error(JavaFxBundle.message("range.delim.or.rbrack.expected"));
        marker.drop();
        return false;
      }
    }
 else {
      break;
    }
    marker.done(expressionType);
    marker=marker.precede();
  }
  marker.drop();
  return true;
}
