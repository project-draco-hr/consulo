{
  final IElementType firstToken=myBuilder.getTokenType();
  if (JavaFxTokenTypes.NAME.contains(firstToken)) {
    final PsiBuilder.Marker marker=myBuilder.mark();
    parseQualifiedName(JavaFxElementTypes.REFERENCE_EXPRESSION);
    if (atToken(JavaFxTokenTypes.LBRACE)) {
      parseObjectLiteral(marker);
    }
 else {
      marker.drop();
    }
  }
 else   if (firstToken == JavaFxTokenTypes.LBRACE) {
    parseBlockExpression();
  }
 else   if (firstToken == JavaFxTokenTypes.THIS_KEYWORD) {
    final PsiBuilder.Marker marker=myBuilder.mark();
    nextToken();
    marker.done(JavaFxElementTypes.THIS_EXPRESSION);
  }
 else   if (firstToken == JavaFxTokenTypes.LBRACK) {
    parseSequenceOrRangeExpression();
  }
 else   if (firstToken == JavaFxTokenTypes.LPAREN) {
    final PsiBuilder.Marker marker=myBuilder.mark();
    nextToken();
    if (!parseValueExpressionOptional()) {
      marker.drop();
      return false;
    }
    checkMatches(JavaFxTokenTypes.RPAREN,JavaFxBundle.message("rparen.expected"));
    marker.done(JavaFxElementTypes.PARENTHESIZED_EXPRESSION);
  }
 else   if (firstToken == JavaFxTokenTypes.AT_KEYWORD) {
    parseTimelineExpression();
  }
 else   if (JavaFxTokenTypes.STRING_START.contains(firstToken)) {
    parseStringExpression();
  }
 else   if (JavaFxTokenTypes.LITERALS.contains(firstToken)) {
    final PsiBuilder.Marker marker=myBuilder.mark();
    nextToken();
    marker.done(JavaFxElementTypes.LITERAL_EXPRESSION);
  }
 else   if (firstToken == JavaFxTokenTypes.FUNCTION_KEYWORD) {
    parseFunctionExpression();
  }
 else {
    return false;
  }
  return true;
}
