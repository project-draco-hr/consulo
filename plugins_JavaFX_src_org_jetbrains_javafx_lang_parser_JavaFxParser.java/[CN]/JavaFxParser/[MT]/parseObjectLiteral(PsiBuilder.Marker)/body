{
  nextToken();
  while (true) {
    if (atToken(JavaFxTokenTypes.COMMA) || atToken(JavaFxTokenTypes.SEMICOLON)) {
      do {
        nextToken();
      }
 while (atToken(JavaFxTokenTypes.COMMA) || atToken(JavaFxTokenTypes.SEMICOLON));
    }
    if (JavaFxTokenTypes.NAME.contains(myBuilder.getTokenType())) {
      final PsiBuilder.Marker objectLiteralInit=myBuilder.mark();
      parseQualifiedName(JavaFxElementTypes.REFERENCE_ELEMENT);
      checkMatches(JavaFxTokenTypes.COLON,JavaFxBundle.message("colon.expected"));
      parseInitializingExpression();
      objectLiteralInit.done(JavaFxElementTypes.OBJECT_LITERAL_INIT);
    }
 else     if (JavaFxTokenTypes.VARIABLE_LABEL.contains(myBuilder.getTokenType())) {
      final PsiBuilder.Marker variableMarker=myBuilder.mark();
      parseModifiers();
      parseVariableDeclaration(variableMarker);
    }
 else     if (atToken(JavaFxTokenTypes.FUNCTION_KEYWORD)) {
      final PsiBuilder.Marker functionMarker=myBuilder.mark();
      parseModifiers();
      parseFunctionDefinition(functionMarker);
    }
 else     if (JavaFxTokenTypes.MODIFIERS.contains(myBuilder.getTokenType())) {
      final PsiBuilder.Marker definitionMarker=myBuilder.mark();
      parseModifiers();
      if (atToken(JavaFxTokenTypes.FUNCTION_KEYWORD)) {
        parseFunctionDefinition(definitionMarker);
      }
 else       if (JavaFxTokenTypes.VARIABLE_LABEL.contains(myBuilder.getTokenType())) {
        parseVariableDeclaration(definitionMarker);
      }
 else {
        definitionMarker.drop();
        myBuilder.error(JavaFxBundle.message("unexpected.token"));
      }
    }
 else     if (atToken(JavaFxTokenTypes.RBRACE)) {
      nextToken();
      break;
    }
 else {
      myBuilder.error(JavaFxBundle.message("rbrace.expected"));
      break;
    }
  }
  marker.done(JavaFxElementTypes.OBJECT_LITERAL);
}
