{
  PsiBuilder.Marker catchMarker=builder.mark();
  ParserUtils.getToken(builder,kCATCH);
  if (!ParserUtils.getToken(builder,mLPAREN,GroovyBundle.message("lparen.expected"))) {
    catchMarker.drop();
    return;
  }
  if (ParameterDeclaration.parse(builder,mRPAREN).equals(WRONGWAY)) {
    builder.error(GroovyBundle.message("param.expected"));
  }
  ParserUtils.getToken(builder,mNLS);
  if (!ParserUtils.getToken(builder,mRPAREN,GroovyBundle.message("rparen.expected"))) {
    catchMarker.done(CATCH_CLAUSE);
    return;
  }
  PsiBuilder.Marker warn=builder.mark();
  ParserUtils.getToken(builder,mNLS);
  GroovyElementType result=WRONGWAY;
  if (mLCURLY.equals(builder.getTokenType())) {
    result=OpenOrClosableBlock.parseOpenBlock(builder);
  }
  if (result.equals(WRONGWAY)) {
    warn.rollbackTo();
    builder.error(GroovyBundle.message("expression.expected"));
  }
 else {
    warn.drop();
  }
  catchMarker.done(CATCH_CLAUSE);
  ParserUtils.getToken(builder,mNLS);
  if (builder.getTokenType() == kCATCH) {
    parseHandlers(builder);
  }
}
