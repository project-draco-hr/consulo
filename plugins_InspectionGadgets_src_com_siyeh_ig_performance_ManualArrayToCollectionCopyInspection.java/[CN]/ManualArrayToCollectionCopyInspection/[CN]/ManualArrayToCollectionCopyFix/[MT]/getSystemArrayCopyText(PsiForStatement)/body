{
  final PsiBinaryExpression condition=(PsiBinaryExpression)forStatement.getCondition();
  if (condition == null) {
    return null;
  }
  final PsiExpression limit;
  if (condition.getOperationTokenType() == JavaTokenType.LT) {
    limit=condition.getROperand();
  }
 else {
    limit=condition.getLOperand();
  }
  if (limit == null) {
    return null;
  }
  final PsiStatement initialization=forStatement.getInitialization();
  if (initialization == null) {
    return null;
  }
  if (!(initialization instanceof PsiDeclarationStatement)) {
    return null;
  }
  final PsiDeclarationStatement declaration=(PsiDeclarationStatement)initialization;
  if (declaration.getDeclaredElements().length != 1) {
    return null;
  }
  final PsiLocalVariable variable=(PsiLocalVariable)declaration.getDeclaredElements()[0];
  final PsiExpressionStatement body=getBody(forStatement);
  if (body == null) {
    return null;
  }
  final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)body.getExpression();
  final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
  final PsiElement collection=methodExpression.getQualifier();
  if (collection == null) {
    return null;
  }
  final String collectionText=collection.getText();
  final PsiExpressionList argumentList=methodCallExpression.getArgumentList();
  final PsiExpression argument=argumentList.getExpressions()[0];
  final PsiArrayAccessExpression arrayAccessExpression=(PsiArrayAccessExpression)ParenthesesUtils.stripParentheses(argument);
  if (arrayAccessExpression == null) {
    return null;
  }
  final PsiExpression arrayExpression=arrayAccessExpression.getArrayExpression();
  final String arrayText=arrayExpression.getText();
  final PsiExpression indexExpression=arrayAccessExpression.getIndexExpression();
  final String fromOffsetText=getOffsetText(indexExpression,variable);
  if (fromOffsetText == null) {
    return null;
  }
  final String toOffsetText=getOffsetText(variable.getInitializer(),variable);
  if (toOffsetText == null) {
    return null;
  }
  @NonNls final StringBuilder buffer=new StringBuilder(60);
  buffer.append(collectionText);
  buffer.append(".addAll(java.util.Arrays.asList(");
  buffer.append(arrayText);
  buffer.append(')');
  if (!fromOffsetText.equals("0") && !toOffsetText.equals(arrayText + ".length")) {
    buffer.append(".subList(");
    buffer.append(fromOffsetText);
    buffer.append(", ");
    buffer.append(toOffsetText);
    buffer.append(')');
  }
  buffer.append(");");
  return buffer.toString();
}
