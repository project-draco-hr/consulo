{
  final PsiMethod psiMethod=myMethodLocation.getPsiElement();
  final PsiClass containingClass=psiMethod.getContainingClass();
  if (containingClass != null && containingClass.hasModifierProperty(PsiModifier.ABSTRACT)) {
    final List<PsiClass> classes=new ArrayList<PsiClass>();
    if (!ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
      @Override public void run(){
        ClassInheritorsSearch.search(containingClass).forEach(new Processor<PsiClass>(){
          @Override public boolean process(          PsiClass aClass){
            if (!aClass.hasModifierProperty(PsiModifier.ABSTRACT)) {
              classes.add(aClass);
            }
            return true;
          }
        }
);
      }
    }
,"Search for " + containingClass.getQualifiedName() + " inheritors",true,containingClass.getProject())) {
      return;
    }
    if (classes.size() == 1) {
      runForClass(classes.get(0),psiMethod,context,performRunnable);
      return;
    }
    classes.add(0,null);
    final JBList list=new JBList(classes);
    list.setCellRenderer(new PsiClassListCellRenderer(){
      @Override protected boolean customizeNonPsiElementLeftRenderer(      ColoredListCellRenderer renderer,      JList list,      Object value,      int index,      boolean selected,      boolean hasFocus){
        if (value == null) {
          renderer.append("All");
          return true;
        }
        return super.customizeNonPsiElementLeftRenderer(renderer,list,value,index,selected,hasFocus);
      }
    }
);
    JBPopupFactory.getInstance().createListPopupBuilder(list).setTitle("Choose executable classes to run " + psiMethod.getName()).setMovable(false).setResizable(false).setRequestFocus(true).setItemChoosenCallback(new Runnable(){
      public void run(){
        final Object[] values=list.getSelectedValues();
        if (values == null)         return;
        runMethod(values,psiMethod,context,performRunnable,classes);
      }
    }
).createPopup().showInBestPositionFor(context.getDataContext());
    return;
  }
  super.perform(context,performRunnable);
}
