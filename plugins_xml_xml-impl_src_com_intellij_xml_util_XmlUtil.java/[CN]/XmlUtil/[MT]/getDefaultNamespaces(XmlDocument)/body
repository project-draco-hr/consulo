{
  final XmlFile file=getContainingFile(document);
  final XmlTag tag=document.getRootTag();
  if (tag == null)   return null;
  @NotNull final XmlFileNSInfoProvider[] nsProviders=Extensions.getExtensions(XmlFileNSInfoProvider.EP_NAME);
  if (file != null) {
    NextProvider:     for (    XmlFileNSInfoProvider nsProvider : nsProviders) {
      final String[][] pairs=nsProvider.getDefaultNamespaces(file);
      if (pairs != null && pairs.length > 0) {
        for (        final String[] nsMapping : pairs) {
          if (nsMapping == null || nsMapping.length != 2 || nsMapping[0] == null || nsMapping[1] == null) {
            LOG.debug("NSInfoProvider " + nsProvider + " gave wrong info about "+ file.getVirtualFile());
            continue NextProvider;
          }
        }
        return pairs;
      }
    }
  }
  String namespace=getDtdUri(document);
  if (namespace != null) {
    boolean overrideNamespaceFromDocType=false;
    if (file != null) {
      for (      XmlFileNSInfoProvider provider : nsProviders) {
        try {
          if (provider.overrideNamespaceFromDocType(file)) {
            overrideNamespaceFromDocType=true;
            break;
          }
        }
 catch (        AbstractMethodError ignored) {
        }
      }
    }
    if (!overrideNamespaceFromDocType)     return new String[][]{new String[]{"",namespace}};
  }
  if ("taglib".equals(tag.getName())) {
    return new String[][]{new String[]{"",TAGLIB_1_2_URI}};
  }
  if (file != null) {
    final Language language=file.getLanguage();
    if (language == HTMLLanguage.INSTANCE || language == XHTMLLanguage.INSTANCE) {
      return new String[][]{new String[]{"",XHTML_URI}};
    }
  }
  return null;
}
