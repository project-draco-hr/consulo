{
  Map<PsiClass,String> parameterNames=new LinkedHashMap<PsiClass,String>();
  final Iterator<PsiClass> classesIterator=myThisClassesMap.keySet().iterator();
  for (; classesIterator.hasNext(); ) {
    final PsiClass aClass=classesIterator.next();
    EditorTextField field=myOldClassParameterNameFields.get(aClass);
    if (field.isEnabled()) {
      String parameterName=field.getText().trim();
      if (!myMethod.getManager().getNameHelper().isIdentifier(parameterName)) {
        Messages.showErrorDialog(getProject(),"Please Enter a Valid name for Parameter",myRefactoringName);
        return;
      }
      parameterNames.put(aClass,parameterName);
    }
  }
  final PsiVariable targetVariable=(PsiVariable)myList.getSelectedValue();
  final MoveInstanceMethodProcessor processor=new MoveInstanceMethodProcessor(myMethod.getProject(),myMethod,targetVariable,myVisibilityPanel.getVisibility(),parameterNames);
  if (!verifyTargetClass(processor.getTargetClass()))   return;
  invokeRefactoring(processor);
}
