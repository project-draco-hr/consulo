{
  return new DataIndexer<Integer,SerializedStubContent,FileBasedIndex.FileContent>(){
    public Map<Integer,SerializedStubContent> map(    final FileBasedIndex.FileContent inputData){
      final Map<Integer,SerializedStubContent> result=new HashMap<Integer,SerializedStubContent>();
      if (!(inputData.file instanceof NewVirtualFile))       return result;
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        public void run(){
          final int key=Math.abs(FileBasedIndex.getFileId(inputData.file));
          final ByteArrayOutputStream bytes=new ByteArrayOutputStream();
          DataOutputStream stream=new DataOutputStream(bytes);
          final LanguageFileType filetype=(LanguageFileType)inputData.file.getFileType();
          Language l=filetype.getLanguage();
          final IFileElementType type=LanguageParserDefinitions.INSTANCE.forLanguage(l).getFileNodeType();
          Project project=ProjectManager.getInstance().getDefaultProject();
          PsiFile copy=PsiFileFactory.getInstance(project).createFileFromText(inputData.fileName,filetype,inputData.content,1,false,false);
          final StubElement stub=((IStubFileElementType)type).getBuilder().buildStubTree(copy);
          SerializationManager.getInstance().serialize(stub,stream);
          result.put(key,new SerializedStubContent(bytes.toByteArray()));
        }
      }
);
      return result;
    }
  }
;
}
