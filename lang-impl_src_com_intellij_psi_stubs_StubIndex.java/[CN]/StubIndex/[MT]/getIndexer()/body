{
  return new DataIndexer<Integer,byte[],FileBasedIndex.FileContent>(){
    public Map<Integer,byte[]> map(    final FileBasedIndex.FileContent inputData){
      Map<Integer,byte[]> result=new HashMap<Integer,byte[]>();
      if (!(inputData.file instanceof NewVirtualFile))       return result;
      final int key=((NewVirtualFile)inputData.file).getId();
      final ByteArrayOutputStream bytes=new ByteArrayOutputStream();
      DataOutputStream stream=new DataOutputStream(bytes);
      final LanguageFileType filetype=(LanguageFileType)inputData.file.getFileType();
      Language l=filetype.getLanguage();
      final IFileElementType type=LanguageParserDefinitions.INSTANCE.forLanguage(l).getFileNodeType();
      Project project=ProjectManager.getInstance().getDefaultProject();
      PsiFile copy=PsiFileFactory.getInstance(project).createFileFromText(inputData.fileName,filetype,inputData.content,1,false,false);
      final StubElement stub=((IStubFileElementType)type).getBuilder().buildStubTree(copy);
      try {
        SerializationManager.getInstance().serialize(stub,stream);
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
      result.put(key,bytes.toByteArray());
      return result;
    }
  }
;
}
