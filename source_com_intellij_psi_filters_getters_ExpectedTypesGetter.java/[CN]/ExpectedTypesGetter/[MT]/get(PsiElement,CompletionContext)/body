{
  final List result=new ArrayList();
  ExpectedTypesProvider typesProvider=ExpectedTypesProvider.getInstance(context.getProject());
  PsiExpression expression=PsiTreeUtil.getContextOfType(context,PsiExpression.class,true);
  if (expression == null) {
    final PsiElement parent=context.getParent();
    if (!(parent instanceof PsiNameValuePair))     return ArrayUtil.EMPTY_OBJECT_ARRAY;
    final PsiNameValuePair psiNameValuePair=((PsiNameValuePair)parent);
    final Object[] variants=psiNameValuePair.getReference().getVariants();
    if (variants != null && variants.length == 1 && variants[0] instanceof PsiMethod && ((PsiMethod)variants[0]).getReturnType() != null) {
      return new PsiType[]{((PsiMethod)variants[0]).getReturnType()};
    }
    return ArrayUtil.EMPTY_OBJECT_ARRAY;
  }
  ExpectedTypeInfo[] infos=typesProvider.getExpectedTypes(expression,true);
  infos=extractUnique(infos,typesProvider);
  if (expression instanceof PsiNewExpression) {
    for (    ExpectedTypeInfo info : infos) {
      result.add(CompletionUtil.eliminateWildcards(info.getType()));
    }
  }
 else {
    for (    ExpectedTypeInfo info : infos) {
      result.add(info.getType());
    }
  }
  return (PsiType[])result.toArray(new PsiType[result.size()]);
}
