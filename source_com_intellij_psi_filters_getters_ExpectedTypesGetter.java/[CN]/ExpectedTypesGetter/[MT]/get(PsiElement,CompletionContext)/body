{
  ExpectedTypesProvider typesProvider=ExpectedTypesProvider.getInstance(context.getProject());
  PsiExpression expression=PsiTreeUtil.getContextOfType(context,PsiExpression.class,true);
  if (expression == null)   return PsiType.EMPTY_ARRAY;
  ExpectedTypeInfo[] infos=typesProvider.getExpectedTypes(expression,true);
  return ContainerUtil.map(infos,new Function<ExpectedTypeInfo,PsiType>(){
    public PsiType fun(    ExpectedTypeInfo info){
      return info.getType();
    }
  }
,PsiType.EMPTY_ARRAY);
}
