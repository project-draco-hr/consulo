{
  if (endOffset <= startOffset) {
    return endOffset;
  }
  myOffset2weight.clear();
  myOffset2weight.anchor=startOffset;
  CharSequence text=document.getCharsSequence();
  int maxPreferredOffsetToUse=maxPreferredOffset >= endOffset ? endOffset - 1 : maxPreferredOffset;
  maxPreferredOffsetToUse=maxPreferredOffsetToUse < startOffset ? startOffset : maxPreferredOffsetToUse;
  for (int i=Math.min(maxPreferredOffsetToUse,text.length() - 1); i > startOffset; i--) {
    char c=text.charAt(i);
    if (c == '\n') {
      return i + 1;
    }
    Rule rule=myRules.get(c);
    if (rule != null) {
      if (rule.condition == WrapCondition.BOTH || rule.condition == WrapCondition.AFTER) {
        int target=i + 1;
        if (rule.symbol != ' ') {
          while (target < maxPreferredOffsetToUse && text.charAt(target) == ' ') {
            target++;
          }
        }
        if (target <= maxPreferredOffsetToUse) {
          myOffset2weight.store(target,rule.weight);
        }
      }
      if (rule.condition == WrapCondition.BOTH || rule.condition == WrapCondition.BEFORE) {
        myOffset2weight.store(i,rule.weight);
      }
      continue;
    }
    if (!isIdSymbol(c) && i > startOffset + 1 && isIdSymbol(text.charAt(i - 1)) && !myRules.contains(text.charAt(i - 1))) {
      myOffset2weight.store(i,NON_ID_WEIGHT);
    }
  }
  int result=chooseOffset();
  if (result > 0) {
    return result;
  }
  if (!allowToBeyondMaxPreferredOffset) {
    return maxPreferredOffset;
  }
  for (int i=Math.min(maxPreferredOffsetToUse + 1,text.length() - 1); i < endOffset; i++) {
    char c=text.charAt(i);
    if (c == '\n') {
      return i + 1;
    }
    Rule rule=myRules.get(c);
    if (rule != null) {
switch (rule.condition) {
case BOTH:
case BEFORE:
        return i;
case AFTER:
      if (i < endOffset - 1)       return i + 1;
  }
}
if (!isIdSymbol(c) && i < endOffset - 1 && isIdSymbol(text.charAt(i + 1))) {
  return i;
}
}
return -1;
}
