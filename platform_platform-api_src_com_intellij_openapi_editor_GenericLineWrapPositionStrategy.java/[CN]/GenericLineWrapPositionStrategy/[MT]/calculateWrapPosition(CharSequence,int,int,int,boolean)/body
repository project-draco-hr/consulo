{
  if (endOffset <= startOffset) {
    return endOffset;
  }
  int maxPreferredOffsetToUse=maxPreferredOffset >= endOffset ? endOffset - 1 : maxPreferredOffset;
  maxPreferredOffsetToUse=maxPreferredOffsetToUse < startOffset ? startOffset : maxPreferredOffsetToUse;
  TIntIntHashMap offset2Weight=new TIntIntHashMap();
  for (int i=maxPreferredOffsetToUse; i > startOffset; i--) {
    char c=text.charAt(i);
    if (c == '\n') {
      return i + 1;
    }
    Rule rule=myRules.get(c);
    if (rule != null) {
switch (rule.condition) {
case BOTH:
case BEFORE:
        offset2Weight.put(i,rule.weight);
      break;
case AFTER:
    if (i < maxPreferredOffsetToUse)     offset2Weight.put(i + 1,rule.weight);
}
continue;
}
if (!isIdSymbol(c) && (i < startOffset + 2 || (isIdSymbol(text.charAt(i - 1)) && !myRules.contains(text.charAt(i - 1))))) {
offset2Weight.put(i,NON_ID_WEIGHT);
}
}
int result=chooseOffset(offset2Weight,GT_COMPARATOR);
if (result > 0) {
return result;
}
if (!allowToBeyondMaxPreferredOffset) {
return maxPreferredOffset;
}
for (int i=maxPreferredOffsetToUse + 1; i < endOffset; i++) {
char c=text.charAt(i);
if (c == '\n') {
return i + 1;
}
Rule rule=myRules.get(c);
if (rule != null) {
switch (rule.condition) {
case BOTH:
case BEFORE:
  return i;
case AFTER:
if (i < endOffset - 1) return i + 1;
}
}
if (!isIdSymbol(c) && (i >= endOffset - 1 || isIdSymbol(text.charAt(i + 1)))) {
return i;
}
}
return maxPreferredOffsetToUse;
}
