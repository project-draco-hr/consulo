{
  final DebuggerContextImpl debuggerContext=DebuggerManagerEx.getInstanceEx(myProject).getContext();
  final DebuggerSession debuggerSession=debuggerContext.getDebuggerSession();
  if (debuggerSession == null || !debuggerSession.isPaused())   return;
  try {
    final ExpressionEvaluator evaluator=EvaluatorBuilderImpl.getInstance().build(myCurrentExpression);
    debuggerContext.getDebugProcess().getManagerThread().invokeLater(new DebuggerContextCommandImpl(debuggerContext){
      public void threadAction(){
        try {
          final EvaluationContextImpl evaluationContext=debuggerContext.createEvaluationContext();
          final TextWithImports text=new TextWithImportsImpl(CodeFragmentKind.EXPRESSION,myCurrentExpression.getText());
          final Value value=evaluator.evaluate(evaluationContext);
          if (value instanceof PrimitiveValue) {
            final WatchItemDescriptor descriptor=new WatchItemDescriptor(myProject,text,value,false);
            descriptor.setContext(evaluationContext);
            if (myType == MOUSE_OVER_HINT) {
              descriptor.setRenderer(debuggerContext.getDebugProcess().getDefaultRenderer(value));
            }
            descriptor.updateRepresentation(evaluationContext,new DescriptorLabelListener(){
              public void labelChanged(){
                if (myCurrentRange != null) {
                  if (myType != MOUSE_OVER_HINT || descriptor.isValueValid()) {
                    showHint(DebuggerTreeRenderer.getDescriptorText(descriptor,true));
                  }
                }
              }
            }
);
          }
 else {
            SwingUtilities.invokeLater(new Runnable(){
              public void run(){
                final WatchDebuggerTree tree=new WatchDebuggerTree(myProject);
                tree.getModel().addTreeModelListener(new TreeModelListener(){
                  public void treeNodesChanged(                  TreeModelEvent e){
                    resize(e.getTreePath(),tree);
                  }
                  public void treeNodesInserted(                  TreeModelEvent e){
                    resize(e.getTreePath(),tree);
                  }
                  public void treeNodesRemoved(                  TreeModelEvent e){
                  }
                  public void treeStructureChanged(                  TreeModelEvent e){
                    resize(e.getTreePath(),tree);
                  }
                }
);
                tree.addTreeExpansionListener(new TreeExpansionListener(){
                  public void treeExpanded(                  TreeExpansionEvent event){
                    resize(event.getPath(),tree);
                  }
                  public void treeCollapsed(                  TreeExpansionEvent event){
                  }
                }
);
                tree.addWatch(text);
                tree.rebuild(getDebuggerContext());
                showHint(tree,myCurrentExpression.getText());
              }
            }
);
          }
        }
 catch (        EvaluateException e) {
          LOG.debug(e);
        }
      }
    }
,DebuggerManagerThreadImpl.HIGH_PRIORITY);
  }
 catch (  EvaluateException e) {
    LOG.debug(e);
  }
}
