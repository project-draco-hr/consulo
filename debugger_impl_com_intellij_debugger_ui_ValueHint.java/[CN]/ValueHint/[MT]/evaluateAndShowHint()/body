{
  final DebuggerContextImpl debuggerContext=DebuggerManagerEx.getInstanceEx(getProject()).getContext();
  final DebuggerSession debuggerSession=debuggerContext.getDebuggerSession();
  if (debuggerSession == null || !debuggerSession.isPaused())   return;
  try {
    final ExpressionEvaluator evaluator=EvaluatorBuilderImpl.getInstance().build(myCurrentExpression,debuggerContext.getSourcePosition());
    debuggerContext.getDebugProcess().getManagerThread().invokeLater(new DebuggerContextCommandImpl(debuggerContext){
      public void threadAction(){
        try {
          final EvaluationContextImpl evaluationContext=debuggerContext.createEvaluationContext();
          final TextWithImports text=new TextWithImportsImpl(CodeFragmentKind.EXPRESSION,myCurrentExpression.getText());
          final Value value=evaluator.evaluate(evaluationContext);
          final WatchItemDescriptor descriptor=new WatchItemDescriptor(getProject(),text,value);
          if (!isActiveTootlipApplicable(value) || getType() == MOUSE_OVER_HINT) {
            descriptor.setContext(evaluationContext);
            if (getType() == MOUSE_OVER_HINT) {
              descriptor.setRenderer(debuggerContext.getDebugProcess().getDefaultRenderer(value));
            }
            descriptor.updateRepresentation(evaluationContext,new DescriptorLabelListener(){
              public void labelChanged(){
                if (getCurrentRange() != null) {
                  if (getType() != MOUSE_OVER_HINT || descriptor.isValueValid()) {
                    final SimpleColoredText simpleColoredText=DebuggerTreeRenderer.getDescriptorText(debuggerContext,descriptor,true);
                    if (isActiveTootlipApplicable(value)) {
                      simpleColoredText.append(" (" + DebuggerBundle.message("active.tooltip.suggestion") + ")",SimpleTextAttributes.GRAYED_ATTRIBUTES);
                    }
                    showHint(simpleColoredText,descriptor);
                  }
                }
              }
            }
);
          }
 else {
            final InspectDebuggerTree tree=getInspectTree(descriptor);
            showTreePopup(tree,debuggerContext,myCurrentExpression.getText(),new ValueHintTreeComponent(ValueHint.this,tree,myCurrentExpression.getText()));
          }
        }
 catch (        EvaluateException e) {
          LOG.debug(e);
        }
      }
    }
,InvokeThread.Priority.HIGH);
  }
 catch (  EvaluateException e) {
    LOG.debug(e);
  }
}
