{
  DebuggerInvocationUtil.invokeLater(myProject,new Runnable(){
    public void run(){
      if (myShowHint) {
        JComponent component;
        if (descriptor.getValue() instanceof PrimitiveValue) {
          component=HintUtil.createInformationLabel(text);
        }
 else {
          component=HintUtil.createInformationLabel(text,COLLAPSED_TREE_ICON);
          addMouseListenerToHierarchy(component,new MouseAdapter(){
            public void mouseClicked(            MouseEvent e){
              if (myCurrentHint != null) {
                myCurrentHint.hide();
              }
              final DebuggerContextImpl debuggerContext=DebuggerManagerEx.getInstanceEx(myProject).getContext();
              final DebugProcessImpl debugProcess=debuggerContext.getDebugProcess();
              debugProcess.getManagerThread().invokeLater(new DebuggerContextCommandImpl(debuggerContext){
                public void threadAction(){
                  descriptor.setRenderer(debugProcess.getAutoRenderer(descriptor));
                  final InspectDebuggerTree tree=getInspectTree(descriptor);
                  showHint(tree,debuggerContext,myCurrentExpression.getText(),new ActiveTooltipComponent(tree,myCurrentExpression.getText()));
                }
              }
);
            }
          }
);
        }
        myCurrentHint=new LightweightHint(component);
        HintManager hintManager=HintManager.getInstance();
        if (myEditor.getComponent().getRootPane() == null)         return;
        Point p=hintManager.getHintPosition(myCurrentHint,myEditor,myEditor.xyToLogicalPosition(myPoint),HintManager.UNDER);
        hintManager.showEditorHint(myCurrentHint,myEditor,p,HintManager.HIDE_BY_ANY_KEY | HintManager.HIDE_BY_TEXT_CHANGE | HintManager.HIDE_BY_SCROLLING,HINT_TIMEOUT,false);
        if (myType == MOUSE_CLICK_HINT) {
          HintUtil.createInformationLabel(text).requestFocusInWindow();
        }
      }
    }
  }
);
}
