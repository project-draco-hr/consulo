{
  final String title=DebuggerBundle.message("active.tooltip.set.root.title");
  return new AnAction(title,title,ICON_UNMARK_WEBROOT){
    public void actionPerformed(    AnActionEvent e){
      final TreePath path=myTree.getSelectionPath();
      if (path == null)       return;
      final Object node=path.getLastPathComponent();
      if (node instanceof DebuggerTreeNodeImpl) {
        final DebuggerTreeNodeImpl debuggerTreeNode=(DebuggerTreeNodeImpl)node;
        final DebuggerContextImpl context=(DebuggerManagerEx.getInstanceEx(myProject)).getContext();
        context.getDebugProcess().getManagerThread().invokeLater(new DebuggerContextCommandImpl(context){
          public void threadAction(){
            try {
              final NodeDescriptorImpl descriptor=debuggerTreeNode.getDescriptor();
              final TextWithImports evaluationText=DebuggerTreeNodeExpression.createEvaluationText(debuggerTreeNode,context);
              final String title=evaluationText.getText();
              if (myCurrentIndex < HISTORY_SIZE) {
                if (myCurrentIndex != -1) {
                  myCurrentIndex+=1;
                }
 else {
                  myCurrentIndex=1;
                }
                myHistory.add(myCurrentIndex,Pair.create(descriptor,title));
              }
              myTree.setInspectDescriptor(descriptor);
              showHint(myTree,context,title,ActiveTooltipComponent.this);
            }
 catch (            final EvaluateException e1) {
              LOG.debug(e1);
            }
          }
        }
);
      }
    }
  }
;
}
