{
  final Set<String> cp=ContainerUtil.newHashSet();
  cp.add(getResourcePath(BuildMain.class));
  cp.addAll(PathManager.getUtilClassPath());
  cp.add(getResourcePath(Message.class));
  cp.add(getResourcePath(Version.class));
  cp.add(getResourcePath(ClassWriter.class));
  cp.add(getResourcePath(ClassVisitor.class));
  cp.add(getResourcePath(JpsModel.class));
  cp.add(getResourcePath(JpsModelImpl.class));
  cp.add(getResourcePath(JpsProjectLoader.class));
  cp.add(getResourcePath(AlienFormFileException.class));
  cp.add(getResourcePath(GridConstraints.class));
  cp.add(getResourcePath(CellConstraints.class));
  cp.add(getResourcePath(NotNullVerifyingInstrumenter.class));
  cp.add(getResourcePath(IXMLBuilder.class));
  final Class<StandardJavaFileManager> optimizedFileManagerClass=getOptimizedFileManagerClass();
  if (optimizedFileManagerClass != null) {
    cp.add(getResourcePath(optimizedFileManagerClass));
  }
  try {
    final Class<?> cmdLineWrapper=Class.forName("com.intellij.rt.execution.CommandLineWrapper");
    cp.add(getResourcePath(cmdLineWrapper));
  }
 catch (  Throwable ignored) {
  }
  for (  JavaCompiler javaCompiler : ServiceLoader.load(JavaCompiler.class)) {
    final String compilerResource=getResourcePath(javaCompiler.getClass());
    final String name=PathUtilRt.getFileName(compilerResource);
    if (name.startsWith("ecj-") && name.endsWith(".jar")) {
      cp.add(compilerResource);
    }
  }
  return ContainerUtil.newArrayList(cp);
}
