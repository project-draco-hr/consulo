{
  if (XmlNSDescriptorImpl.equalsToSchemaName(tag,"any")) {
    if ("##other".equals(tag.getAttributeValue("namespace"))) {
      return !namespace.equals(myDocumentDescriptor.getDefaultNamespace());
    }
    return true;
  }
 else   if (XmlNSDescriptorImpl.equalsToSchemaName(tag,"group")) {
    String ref=tag.getAttributeValue("ref");
    if (ref != null) {
      XmlTag groupTag=myDocumentDescriptor.findGroup(ref);
      if (groupTag != null && _canContainTag(localName,namespace,groupTag))       return true;
    }
  }
 else   if (XmlNSDescriptorImpl.equalsToSchemaName(tag,"restriction") || XmlNSDescriptorImpl.equalsToSchemaName(tag,"extension")) {
    String base=tag.getAttributeValue("base");
    if (base != null) {
      TypeDescriptor descriptor=myDocumentDescriptor.findTypeDescriptor(myDocumentDescriptor.myFile.getDocument().getRootTag(),base);
      if (descriptor instanceof ComplexTypeDescriptor) {
        ComplexTypeDescriptor complexTypeDescriptor=(ComplexTypeDescriptor)descriptor;
        if (complexTypeDescriptor.canContainTag(localName,namespace))         return true;
      }
    }
  }
  XmlTag[] subTags=tag.getSubTags();
  for (int i=0; i < subTags.length; i++) {
    XmlTag subTag=subTags[i];
    if (_canContainTag(localName,namespace,subTag))     return true;
  }
  return false;
}
