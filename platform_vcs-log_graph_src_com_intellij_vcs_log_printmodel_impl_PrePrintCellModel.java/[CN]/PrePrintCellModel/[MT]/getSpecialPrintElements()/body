{
  List<SpecialPrintElement> specialPrintElements=new ArrayList<SpecialPrintElement>();
  for (int i=0; i < visibleElementsInThisRow.size(); i++) {
    GraphElement element=visibleElementsInThisRow.get(i);
    Node node=element.getNode();
    if (node != null) {
      if (node.getType() == Node.NodeType.COMMIT_NODE) {
        int dragAndDropSelect=0;
        if (node == commitSelectController.getDragAndDropNode()) {
          if (commitSelectController.isAbove()) {
            dragAndDropSelect=1;
          }
 else {
            dragAndDropSelect=-1;
          }
        }
        specialPrintElements.add(new SpecialPrintElement(node,i,SpecialPrintElement.Type.COMMIT_NODE,selectController.isSelected(node),commitSelectController.isSelected(node),dragAndDropSelect));
      }
    }
 else {
      Edge edge=element.getEdge();
      if (edge == null) {
        throw new IllegalStateException();
      }
switch (visibilityController.visibilityTypeEdge(edge,rowIndex)) {
case HIDE:
        break;
case USUAL:
      break;
case LAST_VISIBLE:
    specialPrintElements.add(new SpecialPrintElement(edge,i,SpecialPrintElement.Type.DOWN_ARROW,selectController.isSelected(edge),isMarked(edge),0));
  break;
case FIRST_VISIBLE:
specialPrintElements.add(new SpecialPrintElement(edge,i,SpecialPrintElement.Type.UP_ARROW,selectController.isSelected(edge),isMarked(edge),0));
break;
default :
throw new IllegalStateException();
}
}
}
return Collections.unmodifiableList(specialPrintElements);
}
