{
  final UpdatedFiles files=UpdatedFiles.create();
  MergeChangeCollector collector=new MergeChangeCollector(project,root,currentRev,files);
  collector.collect(exceptions);
  if (exceptions.size() != 0) {
    return;
  }
  ProjectLevelVcsManagerEx manager=(ProjectLevelVcsManagerEx)ProjectLevelVcsManager.getInstance(project);
  manager.showUpdateProjectInfo(files,actionName,actionInfo);
  Collection<String> unmergedNames=files.getGroupById(FileGroup.MERGED_WITH_CONFLICT_ID).getFiles();
  if (!unmergedNames.isEmpty()) {
    LocalFileSystem lfs=LocalFileSystem.getInstance();
    ArrayList<VirtualFile> unmerged=new ArrayList<VirtualFile>();
    for (    String fileName : unmergedNames) {
      VirtualFile f=lfs.findFileByPath(fileName);
      if (f != null) {
        unmerged.add(f);
      }
    }
    AbstractVcsHelper.getInstance(project).showMergeDialog(unmerged,GitVcs.getInstance(project).getMergeProvider());
  }
}
