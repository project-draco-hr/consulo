{
  final UpdatedFiles files=UpdatedFiles.create();
  MergeChangeCollector collector=new MergeChangeCollector(project,root,currentRev);
  collector.collect(files,exceptions);
  if (exceptions.size() != 0) {
    return;
  }
  action.delayTask(new TransactionRunnable(){
    public void run(    List<VcsException> exceptionList){
      UIUtil.invokeLaterIfNeeded(new Runnable(){
        @Override public void run(){
          ProjectLevelVcsManagerEx manager=(ProjectLevelVcsManagerEx)ProjectLevelVcsManager.getInstance(project);
          UpdateInfoTree tree=manager.showUpdateProjectInfo(files,actionName,actionInfo,false);
          tree.setBefore(beforeLabel);
          tree.setAfter(LocalHistory.getInstance().putSystemLabel(project,"After update"));
        }
      }
);
    }
  }
);
  final Collection<String> unmergedNames=files.getGroupById(FileGroup.MERGED_WITH_CONFLICT_ID).getFiles();
  if (!unmergedNames.isEmpty()) {
    action.delayTask(new TransactionRunnable(){
      public void run(      List<VcsException> exceptionList){
        LocalFileSystem lfs=LocalFileSystem.getInstance();
        final ArrayList<VirtualFile> unmerged=new ArrayList<VirtualFile>();
        for (        String fileName : unmergedNames) {
          VirtualFile f=lfs.findFileByPath(fileName);
          if (f != null) {
            unmerged.add(f);
          }
        }
        UIUtil.invokeLaterIfNeeded(new Runnable(){
          @Override public void run(){
            GitVcs vcs=GitVcs.getInstance(project);
            if (vcs != null) {
              AbstractVcsHelper.getInstance(project).showMergeDialog(unmerged,vcs.getMergeProvider());
            }
          }
        }
);
      }
    }
);
  }
}
