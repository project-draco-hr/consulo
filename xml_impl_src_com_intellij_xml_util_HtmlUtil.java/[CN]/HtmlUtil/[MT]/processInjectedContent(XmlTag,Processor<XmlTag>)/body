{
  final PsiLanguageInjectionHost.InjectedPsiVisitor injectedPsiVisitor=new PsiLanguageInjectionHost.InjectedPsiVisitor(){
    public void visit(    @NotNull PsiFile injectedPsi,    @NotNull List<PsiLanguageInjectionHost.Shred> places){
      if (injectedPsi instanceof XmlFile) {
        final XmlDocument injectedDocument=((XmlFile)injectedPsi).getDocument();
        if (injectedDocument != null) {
          final XmlTag rootTag=injectedDocument.getRootTag();
          if (rootTag != null) {
            for (PsiElement element=rootTag; element != null; element=element.getNextSibling()) {
              if (element instanceof XmlTag) {
                final XmlTag tag=(XmlTag)element;
                String tagName=tag.getLocalName();
                if (element instanceof HtmlTag || tag.getNamespacePrefix().length() > 0)                 tagName=tagName.toLowerCase();
                if (LINK.equalsIgnoreCase(tagName)) {
                  tagProcessor.process((XmlTag)element);
                }
              }
            }
          }
        }
      }
    }
  }
;
  final XmlText[] texts=PsiTreeUtil.getChildrenOfType(element,XmlText.class);
  if (texts != null && texts.length > 0) {
    for (    final XmlText text : texts) {
      for (      PsiElement _element : text.getChildren()) {
        if (_element instanceof PsiLanguageInjectionHost) {
          InjectedLanguageFacadeImpl.enumerate(_element,injectedPsiVisitor);
        }
      }
    }
  }
  final XmlComment[] comments=PsiTreeUtil.getChildrenOfType(element,XmlComment.class);
  if (comments != null && comments.length > 0) {
    for (    final XmlComment comment : comments) {
      if (comment instanceof PsiLanguageInjectionHost) {
        InjectedLanguageFacadeImpl.enumerate(comment,injectedPsiVisitor);
      }
    }
  }
}
