{
  String entitiesString=getEntitiesString(context,XmlEntitiesInspection.UNKNOWN_ATTRIBUTE);
  boolean html5Context=isHtml5Context(context);
  if (entitiesString == null && !html5Context)   return XmlAttributeDescriptor.EMPTY;
  final List<String> customAttrNames;
  if (entitiesString != null) {
    StringTokenizer tokenizer=new StringTokenizer(entitiesString,",");
    customAttrNames=new ArrayList<String>(tokenizer.countTokens());
    while (tokenizer.hasMoreElements()) {
      final String customName=tokenizer.nextToken();
      if (customName.length() > 0) {
        customAttrNames.add(customName);
      }
    }
  }
 else {
    customAttrNames=new ArrayList<String>();
  }
  if (context != null && html5Context) {
    final String currentAttrName=context instanceof XmlAttribute ? ((XmlAttribute)context).getName() : "";
    FileBasedIndex.getInstance().processAllKeys(Html5CustomAttributesIndex.ID,new Processor<String>(){
      @Override public boolean process(      String s){
        if (!currentAttrName.startsWith(s)) {
          customAttrNames.add(s);
        }
        return true;
      }
    }
,context.getProject());
  }
  XmlAttributeDescriptor[] descriptors=new XmlAttributeDescriptor[customAttrNames.size()];
  for (int i=0, n=customAttrNames.size(); i < n; i++) {
    final String customName=customAttrNames.get(i);
    descriptors[i]=new XmlAttributeDescriptorImpl(){
      public String getName(      PsiElement context){
        return customName;
      }
      public String getName(){
        return customName;
      }
    }
;
  }
  return descriptors;
}
