{
  final List<GenerationItem> result=new ArrayList<GenerationItem>();
  for (  GenerationItem item : items) {
    final Module module=item.getModule();
    if (!AndroidCompileUtil.isModuleAffected(context,module)) {
      continue;
    }
    final MyGenerationItem genItem=(MyGenerationItem)item;
    final String artifactPath=genItem.getArtifactPath();
    final File artifactFile=new File(artifactPath);
    if (!artifactFile.exists()) {
      context.addMessage(CompilerMessageCategory.ERROR,"Cannot find file " + artifactPath,null,-1,-1);
      continue;
    }
    if (!artifactFile.isFile()) {
      context.addMessage(CompilerMessageCategory.ERROR,artifactPath + " is not file",null,-1,-1);
      continue;
    }
    final String genContentRootPath=((MyGenerationItem)item).getGenContentRootPath();
    final File genContentRootFile=new File(genContentRootPath);
    if (genContentRootFile.exists()) {
      if (!FileUtil.delete(genContentRootFile)) {
        context.addMessage(CompilerMessageCategory.ERROR,"Cannot delete old directory: " + genContentRootPath,null,-1,-1);
        continue;
      }
    }
    if (!genContentRootFile.mkdir()) {
      context.addMessage(CompilerMessageCategory.ERROR,"Cannot create directory " + genContentRootPath,null,-1,-1);
      continue;
    }
    try {
      ZipUtil.extract(artifactFile,genContentRootFile,null);
    }
 catch (    IOException e) {
      final String message=e.getMessage();
      if (message == null) {
        context.addMessage(CompilerMessageCategory.ERROR,"Unknown I/O error",null,-1,-1);
        LOG.error(e);
      }
 else {
        context.addMessage(CompilerMessageCategory.ERROR,message,null,-1,-1);
        LOG.info(e);
      }
      continue;
    }
    result.add(genItem);
  }
  return result.toArray(new GenerationItem[result.size()]);
}
