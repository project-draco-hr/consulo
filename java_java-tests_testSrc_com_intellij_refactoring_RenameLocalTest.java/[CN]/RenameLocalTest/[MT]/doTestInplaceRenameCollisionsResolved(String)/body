{
  configureByFile(BASE_PATH + "/" + getTestName(false)+ ".java");
  PsiElement element=TargetElementUtilBase.findTargetElement(myEditor,TargetElementUtilBase.ELEMENT_NAME_ACCEPTED);
  assertNotNull(element);
  final PsiMethod methodScope=PsiTreeUtil.getParentOfType(element,PsiMethod.class);
  assertNotNull(methodScope);
  ResolveSnapshotProvider resolveSnapshotProvider=VariableInplaceRenamer.INSTANCE.forLanguage(getFile().getLanguage());
  assertNotNull(resolveSnapshotProvider);
  final ResolveSnapshotProvider.ResolveSnapshot snapshot=resolveSnapshotProvider.createSnapshot(methodScope);
  assertNotNull(snapshot);
  final int offset=element.getTextOffset();
  VariableInplaceRenamer renamer=new VariableInplaceRenamer((PsiNameIdentifierOwner)element,getEditor());
  ((TemplateManagerImpl)TemplateManager.getInstance(getProject())).setTemplateTesting(true);
  try {
    renamer.performInplaceRename();
  }
  finally {
    renamer.finish();
    snapshot.apply(newName);
    TemplateManagerImpl.getTemplateState(myEditor).gotoEnd();
    renamer.performAutomaticRename(newName,PsiTreeUtil.getParentOfType(myFile.findElementAt(offset),PsiNameIdentifierOwner.class));
    ((TestLookupManager)LookupManager.getInstance(getProject())).clearLookup();
    ((TemplateManagerImpl)TemplateManager.getInstance(getProject())).setTemplateTesting(false);
  }
  checkResultByFile(BASE_PATH + getTestName(false) + "_after.java");
}
