{
  try {
    final File ioFile=myPath.getIOFile();
    SVNWCClient client=myVcs.createWCClient();
    SVNStatusClient statusClient=myVcs.createStatusClient();
    SVNStatus status=statusClient.doStatus(ioFile,false);
    if (myCommittedRevision == null) {
      myCommittedRevision=new SvnRevisionNumber(status.getCommittedRevision());
    }
    if (status == null || SVNStatusType.STATUS_UNVERSIONED.equals(status.getNodeStatus())) {
      client.doRevert(new File[]{ioFile},SVNDepth.INFINITY,null);
      return;
    }
 else     if (SVNStatusType.STATUS_ADDED.equals(status.getNodeStatus())) {
      client.doRevert(new File[]{ioFile},SVNDepth.INFINITY,null);
      return;
    }
 else {
      final Set<File> usedToBeAdded=new HashSet<File>();
      if (myPath.isDirectory()) {
        statusClient.doStatus(ioFile,SVNRevision.UNDEFINED,SVNDepth.INFINITY,false,false,false,false,new ISVNStatusHandler(){
          @Override public void handleStatus(          SVNStatus status) throws SVNException {
            if (status != null && SVNStatusType.STATUS_ADDED.equals(status.getNodeStatus())) {
              usedToBeAdded.add(status.getFile());
            }
          }
        }
,null);
      }
      client.doRevert(new File[]{ioFile},SVNDepth.INFINITY,null);
    }
  }
 catch (  SVNException e1) {
    throw new VcsException(e1);
  }
}
