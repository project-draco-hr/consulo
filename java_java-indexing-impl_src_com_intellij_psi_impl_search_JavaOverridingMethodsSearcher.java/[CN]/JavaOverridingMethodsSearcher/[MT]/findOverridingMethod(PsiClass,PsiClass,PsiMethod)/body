{
  PsiSubstitutor substitutor=TypeConversionUtil.getSuperClassSubstitutor(parentClass,inheritor,PsiSubstitutor.EMPTY);
  MethodSignature signature=method.getSignature(substitutor);
  PsiMethod found=MethodSignatureUtil.findMethodBySuperSignature(inheritor,signature,false);
  if (found != null && isAcceptable(found,method)) {
    return found;
  }
  if (parentClass.isInterface() && !inheritor.isInterface()) {
    final PsiClass superClass=inheritor.getSuperClass();
    if (superClass != null && !superClass.isInheritor(parentClass,true)) {
      PsiMethod derived=MethodSignatureUtil.findMethodInSuperClassBySignatureInDerived(inheritor,superClass,signature,true);
      if (derived != null && isAcceptable(derived,method)) {
        return derived;
      }
    }
  }
  return null;
}
