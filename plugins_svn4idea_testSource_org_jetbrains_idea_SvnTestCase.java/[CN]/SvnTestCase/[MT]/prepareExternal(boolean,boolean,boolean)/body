{
  final ChangeListManagerImpl clManager=(ChangeListManagerImpl)ChangeListManager.getInstance(myProject);
  final SvnVcs vcs=SvnVcs.getInstance(myProject);
  final String mainUrl=myRepoUrl + "/root/source";
  final String externalURL;
  if (anotherRepository) {
    createAnotherRepo();
    externalURL=myAnotherRepoUrl + "/root/target";
  }
 else {
    externalURL=myRepoUrl + "/root/target";
  }
  final SubTree subTree=new SubTree(myWorkingCopyDir);
  checkin();
  clManager.stopEveryThingIfInTestMode();
  sleep(100);
  final File rootFile=new File(subTree.myRootDir.getPath());
  FileUtil.delete(rootFile);
  FileUtil.delete(new File(myWorkingCopyDir.getPath() + File.separator + ".svn"));
  Assert.assertTrue(!rootFile.exists());
  sleep(200);
  myWorkingCopyDir.refresh(false,true);
  final File sourceDir=new File(myWorkingCopyDir.getPath(),"source");
  runInAndVerifyIgnoreOutput("co",mainUrl,sourceDir.getPath());
  CreateExternalAction.addToExternalProperty(vcs,sourceDir,"external",externalURL);
  sleep(100);
  if (updateExternal) {
    runInAndVerifyIgnoreOutput("up",sourceDir.getPath());
  }
  if (commitExternalDefinition) {
    runInAndVerifyIgnoreOutput("ci","-m","test",sourceDir.getPath());
  }
  sleep(100);
  if (updateExternal) {
    myWorkingCopyDir.refresh(false,true);
    Assert.assertTrue(new File(sourceDir,"external").exists());
  }
  clManager.forceGoInTestMode();
  refreshSvnMappingsSynchronously();
}
