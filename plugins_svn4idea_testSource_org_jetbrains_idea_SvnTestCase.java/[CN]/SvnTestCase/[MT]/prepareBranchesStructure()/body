{
  final SvnVcs vcs=SvnVcs.getInstance(myProject);
  final String mainUrl=myRepoUrl + "/trunk";
  verify(runSvn("mkdir","-m","mkdir",mainUrl));
  verify(runSvn("mkdir","-m","mkdir",myRepoUrl + "/branches"));
  verify(runSvn("mkdir","-m","mkdir",myRepoUrl + "/tags"));
  final ChangeListManagerImpl clManager=(ChangeListManagerImpl)ChangeListManager.getInstance(myProject);
  clManager.stopEveryThingIfInTestMode();
  sleep(100);
  FileUtil.delete(new File(myWorkingCopyDir.getPath() + File.separator + ".svn"));
  sleep(200);
  myWorkingCopyDir.refresh(false,true);
  verify(runSvn("co",mainUrl,myWorkingCopyDir.getPath()));
  enableSilentOperation(VcsConfiguration.StandardConfirmation.ADD);
  final SubTree tree=new SubTree(myWorkingCopyDir);
  checkin();
  final String branchUrl=myRepoUrl + "/branches/b1";
  verify(runSvn("copy","-q","-m","coppy",mainUrl,branchUrl));
  clManager.forceGoInTestMode();
  SvnConfiguration.getInstance(myProject).DETECT_NESTED_COPIES=true;
  vcs.invokeRefreshSvnRoots(false);
  clManager.ensureUpToDate(false);
  clManager.ensureUpToDate(false);
  return branchUrl;
}
