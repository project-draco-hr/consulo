{
  final SvnVcs vcs=SvnVcs.getInstance(myProject);
  final String mainUrl=myRepoUrl + "/trunk";
  runInAndVerifyIgnoreOutput("mkdir","-m","mkdir",mainUrl);
  runInAndVerifyIgnoreOutput("mkdir","-m","mkdir",myRepoUrl + "/branches");
  runInAndVerifyIgnoreOutput("mkdir","-m","mkdir",myRepoUrl + "/tags");
  final ChangeListManagerImpl clManager=(ChangeListManagerImpl)ChangeListManager.getInstance(myProject);
  clManager.stopEveryThingIfInTestMode();
  sleep(100);
  boolean deleted=false;
  for (int i=0; i < 5; i++) {
    deleted=FileUtil.delete(new File(myWorkingCopyDir.getPath() + File.separator + ".svn"));
    if (deleted)     break;
    sleep(200);
  }
  Assert.assertTrue(deleted);
  sleep(200);
  myWorkingCopyDir.refresh(false,true);
  runInAndVerifyIgnoreOutput("co",mainUrl,myWorkingCopyDir.getPath());
  enableSilentOperation(VcsConfiguration.StandardConfirmation.ADD);
  final SubTree tree=new SubTree(myWorkingCopyDir);
  checkin();
  final String branchUrl=myRepoUrl + "/branches/b1";
  runInAndVerifyIgnoreOutput("copy","-q","-m","coppy",mainUrl,branchUrl);
  clManager.forceGoInTestMode();
  refreshSvnMappingsSynchronously();
  return branchUrl;
}
