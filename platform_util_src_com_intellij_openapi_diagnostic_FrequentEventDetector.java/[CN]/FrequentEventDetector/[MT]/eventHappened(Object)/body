{
  if (!enabled)   return;
  if (myEventsPosted.incrementAndGet() > myEventCountThreshold) {
    boolean shouldLog=false;
synchronized (myEventsPosted) {
      if (myEventsPosted.get() > myEventCountThreshold) {
        long timeNow=System.currentTimeMillis();
        shouldLog=timeNow - myStartedCounting < myTimeSpanMs;
        myEventsPosted.set(0);
        myStartedCounting=timeNow;
      }
    }
    if (shouldLog) {
      String trace=ExceptionUtil.getThrowableText(new Throwable());
      boolean logTrace;
      int traceId;
synchronized (myEventsPosted) {
        Integer existingTraceId=myRecentTraces.get(trace);
        logTrace=existingTraceId == null;
        if (logTrace) {
          myRecentTraces.put(trace,traceId=myLastTraceId.incrementAndGet());
        }
 else {
          traceId=existingTraceId;
        }
      }
      String message="Too many events posted, #" + traceId + ". Event: "+ event+ (logTrace ? "\n" + trace : "");
      if (myLevel == Level.INFO) {
        LOG.info(message);
      }
 else       if (myLevel == Level.WARN) {
        LOG.warn(message);
      }
 else {
        LOG.error(message);
      }
    }
  }
}
