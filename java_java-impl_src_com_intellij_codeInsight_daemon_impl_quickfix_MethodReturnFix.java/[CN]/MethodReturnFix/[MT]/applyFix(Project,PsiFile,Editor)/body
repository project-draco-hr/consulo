{
  if (!CodeInsightUtilBase.prepareFileForWrite(myMethod.getContainingFile()))   return;
  PsiMethod method=myMethod;
  if (myFixWholeHierarchy) {
    final PsiMethod superMethod=myMethod.findDeepestSuperMethod();
    if (superMethod != null) {
      final PsiType superReturnType=superMethod.getReturnType();
      if (superReturnType != null && !Comparing.equal(myReturnType,superReturnType)) {
        if (changeClassTypeArgument(project,superReturnType,superMethod.getContainingClass(),editor))         return;
        method=SuperMethodWarningUtil.checkSuperMethod(myMethod,RefactoringBundle.message("to.refactor"));
        if (method == null)         return;
      }
    }
  }
  if (!CodeInsightUtilBase.prepareFileForWrite(method.getContainingFile()))   return;
  ChangeSignatureProcessor processor=new ChangeSignatureProcessor(myMethod.getProject(),method,false,null,method.getName(),myReturnType,RemoveUnusedParameterFix.getNewParametersInfo(method,null));
  processor.run();
  if (method.getContainingFile() != file) {
    UndoUtil.markPsiFileForUndo(file);
  }
}
