{
  final PsiTypeParameterListOwner owner=typeParameter.getOwner();
  if (owner instanceof PsiClass) {
    final PsiClass derivedClass=myMethod.getContainingClass();
    if (derivedClass == null)     return true;
    PsiType returnType=myReturnType;
    if (returnType instanceof PsiPrimitiveType) {
      returnType=((PsiPrimitiveType)returnType).getBoxedType(derivedClass);
    }
    final PsiSubstitutor superClassSubstitutor=TypeConversionUtil.getSuperClassSubstitutor((PsiClass)owner,derivedClass,PsiSubstitutor.EMPTY);
    final PsiSubstitutor substitutor=superClassSubstitutor.put(typeParameter,returnType);
    final TypeMigrationRules rules=new TypeMigrationRules(TypeMigrationLabeler.getElementType(derivedClass));
    rules.setMigrationRootType(JavaPsiFacade.getElementFactory(project).createType(((PsiClass)owner),substitutor));
    rules.setBoundScope(new LocalSearchScope(derivedClass));
    final PsiReferenceParameterList referenceParameterList=findTypeArgumentsList(owner,derivedClass);
    if (referenceParameterList == null)     return true;
    final TypeMigrationProcessor processor=new TypeMigrationProcessor(project,referenceParameterList,rules);
    processor.setPreviewUsages(!ApplicationManager.getApplication().isUnitTestMode());
    processor.run();
    return true;
  }
  return false;
}
