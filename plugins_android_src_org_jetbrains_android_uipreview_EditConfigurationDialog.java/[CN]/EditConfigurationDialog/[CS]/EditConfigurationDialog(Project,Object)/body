{
  super(project);
  myConfigurationTextPane.setOpaque(false);
  LayoutDevice device=null;
  FolderConfiguration config=null;
  if (deviceOfConfig instanceof LayoutDevice) {
    device=(LayoutDevice)deviceOfConfig;
  }
 else   if (deviceOfConfig instanceof LayoutDeviceConfiguration) {
    final LayoutDeviceConfiguration deviceConfig=(LayoutDeviceConfiguration)deviceOfConfig;
    device=deviceConfig.getDevice();
    config=deviceConfig.getConfiguration();
    myConfigNameField.setText(deviceConfig.getName());
  }
  myDevicePanel.add(myEditDeviceForm.getContentPanel());
  myAvailableQualifiersConfig.createDefault();
  myAvailableQualifiersConfig.setLanguageQualifier(null);
  myAvailableQualifiersConfig.setVersionQualifier(null);
  myAvailableQualifiersConfig.setNightModeQualifier(null);
  myAvailableQualifiersConfig.setDockModeQualifier(null);
  myAvailableQualifiersConfig.setRegionQualifier(null);
  myChosenQualifiersConfig.reset();
  for (  ResourceQualifier qualifier : myAvailableQualifiersConfig.getQualifiers()) {
    final String name=qualifier.getShortName();
    if (qualifier instanceof CountryCodeQualifier) {
      myEditors.put(name,new MyCountryCodeEditor());
    }
 else     if (qualifier instanceof NetworkCodeQualifier) {
      myEditors.put(name,new MyNetworkCodeEditor());
    }
 else     if (qualifier instanceof KeyboardStateQualifier) {
      myEditors.put(name,new MyKeyboardStateEditor());
    }
 else     if (qualifier instanceof NavigationMethodQualifier) {
      myEditors.put(name,new MyNavigationMethodEditor());
    }
 else     if (qualifier instanceof NavigationStateQualifier) {
      myEditors.put(name,new MyNavigationStateEditor());
    }
 else     if (qualifier instanceof PixelDensityQualifier) {
      myEditors.put(name,new MyDensityEditor());
    }
 else     if (qualifier instanceof ScreenDimensionQualifier) {
      myEditors.put(name,new MyScreenDimensionEditor());
    }
 else     if (qualifier instanceof ScreenOrientationQualifier) {
      myEditors.put(name,new MyScreenOrientationEditor());
    }
 else     if (qualifier instanceof ScreenRatioQualifier) {
      myEditors.put(name,new MyScreenRatioEditor());
    }
 else     if (qualifier instanceof ScreenSizeQualifier) {
      myEditors.put(name,new MyScreenSizeEditor());
    }
 else     if (qualifier instanceof TextInputMethodQualifier) {
      myEditors.put(name,new MyTextInputMethodEditor());
    }
 else     if (qualifier instanceof TouchScreenQualifier) {
      myEditors.put(name,new MyTouchScreenEditor());
    }
  }
  for (  String name : myEditors.keySet()) {
    final MyQualifierEditor editor=myEditors.get(name);
    myQualifierOptionsPanel.add(editor.getComponent(),name);
  }
  if (config != null) {
    myChosenQualifiersConfig.set(config);
    myAvailableQualifiersConfig.substract(config);
    for (    ResourceQualifier qualifier : config.getQualifiers()) {
      final MyQualifierEditor editor=myEditors.get(qualifier.getShortName());
      if (editor != null) {
        editor.reset(qualifier);
      }
    }
  }
  if (device != null) {
    myEditDeviceForm.reset(device);
  }
  myAvailableQualifiersList.setCellRenderer(new DefaultListCellRenderer(){
    @Override public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean isSelected,    boolean cellHasFocus){
      if (value instanceof ResourceQualifier) {
        value=((ResourceQualifier)value).getShortName();
      }
      return super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
    }
  }
);
  myChosenQualifiersList.setCellRenderer(new DefaultListCellRenderer(){
    @Override public Component getListCellRendererComponent(    JList list,    Object value,    int index,    boolean isSelected,    boolean cellHasFocus){
      if (value instanceof ResourceQualifier) {
        final ResourceQualifier qualifier=getActualQualifier((ResourceQualifier)value);
        final String shortDisplayValue=qualifier.getShortDisplayValue();
        value=shortDisplayValue != null && shortDisplayValue.length() > 0 ? shortDisplayValue : qualifier.getShortName() + " (?)";
      }
      return super.getListCellRendererComponent(list,value,index,isSelected,cellHasFocus);
    }
  }
);
  myAddQualifierButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final ResourceQualifier selectedQualifier=(ResourceQualifier)myAvailableQualifiersList.getSelectedValue();
      if (selectedQualifier != null) {
        final int index=myAvailableQualifiersList.getSelectedIndex();
        myAvailableQualifiersConfig.removeQualifier(selectedQualifier);
        myChosenQualifiersConfig.addQualifier(selectedQualifier);
        updateLists();
        applyAndUpdateConfigLabel();
        if (index >= 0) {
          myAvailableQualifiersList.setSelectedIndex(Math.min(index,myAvailableQualifiersList.getItemsCount() - 1));
        }
      }
    }
  }
);
  myRemoveQualifierButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final ResourceQualifier selectedQualifier=(ResourceQualifier)myChosenQualifiersList.getSelectedValue();
      if (selectedQualifier != null) {
        final int index=myChosenQualifiersList.getSelectedIndex();
        myChosenQualifiersConfig.removeQualifier(selectedQualifier);
        myAvailableQualifiersConfig.addQualifier(selectedQualifier);
        updateLists();
        applyAndUpdateConfigLabel();
        if (index >= 0) {
          myChosenQualifiersList.setSelectedIndex(Math.min(index,myChosenQualifiersList.getItemsCount() - 1));
        }
      }
    }
  }
);
  myAvailableQualifiersList.addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      updateButtons();
    }
  }
);
  myChosenQualifiersList.addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      updateButtons();
      updateQualifierEditor();
    }
  }
);
  myEditDeviceForm.getNameField().getDocument().addDocumentListener(myUpdatingDocumentListener);
  myConfigNameField.getDocument().addDocumentListener(myUpdatingDocumentListener);
  updateLists();
  updateButtons();
  updateQualifierEditor();
  applyAndUpdateConfigLabel();
  init();
}
