{
  String newVisibility=myNewVisibility;
  if (VisibilityUtil.ESCALATE_VISIBILITY.equals(newVisibility)) {
    newVisibility=PsiModifier.PUBLIC;
  }
  Map<PsiMember,PsiModifierList> modifierListCopies=new HashMap<PsiMember,PsiModifierList>();
  for (  PsiMember member : myMembersToMove) {
    PsiModifierList copy=member.getModifierList();
    if (copy != null)     copy=(PsiModifierList)copy.copy();
    if (newVisibility != null) {
      if (copy != null)       RefactoringUtil.setVisibility(copy,newVisibility);
    }
    modifierListCopies.put(member,copy);
  }
  for (  UsageInfo usage : usages) {
    if (usage instanceof MoveMembersUsageInfo) {
      final MoveMembersUsageInfo usageInfo=(MoveMembersUsageInfo)usage;
      PsiElement element=usage.getElement();
      if (element != null) {
        final PsiMember member=usageInfo.member;
        if (element instanceof PsiReferenceExpression) {
          PsiExpression qualifier=((PsiReferenceExpression)element).getQualifierExpression();
          PsiClass accessObjectClass=null;
          if (qualifier != null) {
            accessObjectClass=(PsiClass)PsiUtil.getAccessObjectClass(qualifier).getElement();
          }
          if (!JavaResolveUtil.isAccessible(member,myTargetClass,modifierListCopies.get(member),element,accessObjectClass,null)) {
            newVisibility=newVisibility == null ? VisibilityUtil.getVisibilityStringToDisplay(member) : newVisibility;
            String message=RefactoringBundle.message("0.with.1.visibility.is.not.accesible.from.2",RefactoringUIUtil.getDescription(member,true),newVisibility,RefactoringUIUtil.getDescription(ConflictsUtil.getContainer(element),true));
            conflicts.put(member,message);
          }
        }
      }
    }
  }
}
