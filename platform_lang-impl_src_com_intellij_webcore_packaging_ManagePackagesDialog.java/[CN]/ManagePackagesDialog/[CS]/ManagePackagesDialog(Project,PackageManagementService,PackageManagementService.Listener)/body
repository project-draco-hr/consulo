{
  super(project,true);
  myProject=project;
  myController=packageManagementService;
  myPackageListener=packageListener;
  init();
  setTitle("Available Packages");
  myPackages=new JBList();
  myNotificationArea=new PackagesNotificationPanel(project);
  myNotificationsAreaPlaceholder.add(myNotificationArea.getComponent(),BorderLayout.CENTER);
  final AnActionButton reloadButton=new AnActionButton("Reload List of Packages",AllIcons.Actions.Refresh){
    @Override public void actionPerformed(    AnActionEvent e){
      myPackages.setPaintBusy(true);
      final Application application=ApplicationManager.getApplication();
      application.executeOnPooledThread(new Runnable(){
        @Override public void run(){
          try {
            myController.reloadAllPackages();
            myPackages.setPaintBusy(false);
          }
 catch (          final IOException e) {
            application.invokeLater(new Runnable(){
              @Override public void run(){
                Messages.showErrorDialog("Error updating package list: " + e.getMessage(),"Reload List of Packages");
                myPackages.setPaintBusy(false);
              }
            }
,ModalityState.any());
          }
        }
      }
);
    }
  }
;
  myListSpeedSearch=new ListSpeedSearch(myPackages,new Function<Object,String>(){
    @Override public String fun(    Object o){
      if (o instanceof RepoPackage)       return ((RepoPackage)o).getName();
      return "";
    }
  }
);
  JPanel packagesPanel=ToolbarDecorator.createDecorator(myPackages).disableAddAction().disableUpDownActions().disableRemoveAction().addExtraAction(reloadButton).createPanel();
  packagesPanel.setPreferredSize(new Dimension(400,-1));
  packagesPanel.setMinimumSize(new Dimension(100,-1));
  myPackages.setFixedCellWidth(0);
  myPackages.setFixedCellHeight(22);
  myPackages.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  mySplitPane.setLeftComponent(packagesPanel);
  myPackages.addListSelectionListener(new MyPackageSelectionListener());
  myInstallToUser.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent event){
      myController.installToUserChanged(myInstallToUser.isSelected());
    }
  }
);
  myOptionsCheckBox.setEnabled(false);
  myVersionCheckBox.setEnabled(false);
  myVersionCheckBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent event){
      myVersionComboBox.setEnabled(myVersionCheckBox.isSelected());
    }
  }
);
  UiNotifyConnector.doWhenFirstShown(myPackages,new Runnable(){
    @Override public void run(){
      initModel();
    }
  }
);
  myOptionsCheckBox.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent event){
      myOptionsField.setEnabled(myOptionsCheckBox.isSelected());
    }
  }
);
  myInstallButton.setEnabled(false);
  myDescriptionTextArea.addHyperlinkListener(new MyHyperlinkListener());
  addInstallAction();
  myInstalledPackages=new HashSet<String>();
  updateInstalledPackages();
  addManageAction();
  myPackages.setCellRenderer(new MyTableRenderer());
  if (myController.canInstallToUser()) {
    myInstallToUser.setVisible(true);
    myInstallToUser.setSelected(myController.isInstallToUserSelected());
    myInstallToUser.setText(myController.getInstallToUserText());
  }
 else {
    myInstallToUser.setVisible(false);
  }
}
