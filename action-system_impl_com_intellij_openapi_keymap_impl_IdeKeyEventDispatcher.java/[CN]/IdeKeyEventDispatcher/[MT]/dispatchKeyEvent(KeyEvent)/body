{
  if (e.isConsumed()) {
    return false;
  }
  KeyboardFocusManager focusManager=KeyboardFocusManager.getCurrentKeyboardFocusManager();
  Component focusOwner=focusManager.getFocusOwner();
  if (focusOwner instanceof KeyboardShortcutDialog.ShortcutTextField) {
    return false;
  }
  MenuSelectionManager menuSelectionManager=MenuSelectionManager.defaultManager();
  MenuElement[] selectedPath=menuSelectionManager.getSelectedPath();
  if (selectedPath.length > 0) {
    if (!(selectedPath[0] instanceof ComboPopup)) {
      myState=STATE_PROCESSED;
      myPressedWasProcessed=true;
      return false;
    }
  }
  Window focusedWindow=focusManager.getFocusedWindow();
  boolean isModalContext=focusedWindow != null && isModalContext(focusedWindow);
  DataContext dataContext=DataManager.getInstance().getDataContext();
  if (myState == STATE_INIT) {
    return inInitState(focusOwner,e,isModalContext,dataContext);
  }
 else   if (myState == STATE_PROCESSED) {
    return inProcessedState(focusOwner,e,isModalContext,dataContext);
  }
 else   if (myState == STATE_WAIT_FOR_SECOND_KEYSTROKE) {
    return inWaitForSecondStrokeState(e,isModalContext,dataContext);
  }
 else   if (myState == STATE_SECOND_STROKE_IN_PROGRESS) {
    return inSecondStrokeInProgressState(e,isModalContext,dataContext);
  }
 else {
    throw new IllegalStateException("state = " + myState);
  }
}
