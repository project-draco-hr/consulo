{
  final UsageViewPresentation presentation=new UsageViewPresentation();
  final String codeUsagesString="Conflicts";
  presentation.setCodeUsagesString(codeUsagesString);
  presentation.setTabName(codeUsagesString);
  presentation.setTabText(codeUsagesString);
  final Usage[] usages=new Usage[myElementConflictDescription.size()];
  int i=0;
  for (  final PsiElement element : myElementConflictDescription.keySet()) {
    boolean isRead=false;
    boolean isWrite=false;
    for (    ReadWriteAccessDetector detector : Extensions.getExtensions(ReadWriteAccessDetector.EP_NAME)) {
      if (detector.isReadWriteAccessible(element)) {
        final ReadWriteAccessDetector.Access access=detector.getExpressionAccess(element);
        isRead=access != ReadWriteAccessDetector.Access.Write;
        isWrite=access != ReadWriteAccessDetector.Access.Read;
        break;
      }
    }
    usages[i++]=isRead || isWrite ? new ReadWriteAccessUsageInfo2UsageAdapter(new UsageInfo(element),isRead,isWrite){
      @NotNull @Override public UsagePresentation getPresentation(){
        final UsagePresentation usagePresentation=super.getPresentation();
        return MyShowConflictsInUsageViewAction.this.getPresentation(usagePresentation,element);
      }
    }
 : new UsageInfo2UsageAdapter(new UsageInfo(element)){
      @NotNull @Override public UsagePresentation getPresentation(){
        final UsagePresentation usagePresentation=super.getPresentation();
        return MyShowConflictsInUsageViewAction.this.getPresentation(usagePresentation,element);
      }
    }
;
  }
  UsageViewManager.getInstance(myProject).showUsages(UsageTarget.EMPTY_ARRAY,usages,presentation);
  close(SHOW_CONFLICTS_EXIT_CODE);
}
