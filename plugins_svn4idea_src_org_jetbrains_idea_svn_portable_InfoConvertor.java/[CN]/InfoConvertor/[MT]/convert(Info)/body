{
  final Set<ConflictDescriptor> conflicts=info.getConflicts();
  String oldConflict=null;
  String newConflict=null;
  String wrkConflict=null;
  String propConflict=null;
  SVNTreeConflictDescription description=null;
  if (conflicts != null && !conflicts.isEmpty()) {
    for (    ConflictDescriptor conflict : conflicts) {
      if (ConflictDescriptor.Kind.property.equals(conflict.getKind())) {
        propConflict=conflict.getPropertyName();
      }
 else       if (ConflictDescriptor.Kind.tree.equals(conflict.getKind())) {
        description=createTreeConflict(conflict);
      }
 else {
        oldConflict=conflict.getBasePath();
        newConflict=conflict.getTheirPath();
        wrkConflict=conflict.getMyPath();
      }
    }
  }
  return new IdeaSVNInfo(new File(info.getPath()),url(info.getUrl()),url(info.getReposRootUrl()),info.getRev(),NodeKindConvertor.convert(info.getKind()),info.getReposUUID(),info.getLastChangedRev(),info.getLastChangedDate(),info.getLastChangedAuthor(),convertSchedule(info.getSchedule()),url(info.getCopyFromUrl()),info.getCopyFromRev(),info.getTextTime(),null,checksum(info),oldConflict,newConflict,wrkConflict,propConflict,null,DepthConvertor.convert(info.getDepth()),info.getChangelistName(),info.getWorkingSize(),description);
}
