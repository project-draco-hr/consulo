{
  PsiExpression commonInitializerCandidate=null;
  final PsiCodeBlock body=subConstructor.getBody();
  if (body == null)   return null;
  final PsiStatement[] statements=body.getStatements();
  for (  PsiStatement statement : statements) {
    boolean doLookup=true;
    if (statement instanceof PsiExpressionStatement) {
      final PsiExpression expression=((PsiExpressionStatement)statement).getExpression();
      if (expression instanceof PsiAssignmentExpression) {
        final PsiAssignmentExpression assignmentExpression=(PsiAssignmentExpression)expression;
        final PsiExpression lExpression=assignmentExpression.getLExpression();
        if (lExpression instanceof PsiReferenceExpression) {
          final PsiReferenceExpression lRef=((PsiReferenceExpression)lExpression);
          if (lRef.getQualifierExpression() == null || lRef.getQualifierExpression() instanceof PsiThisExpression) {
            final PsiElement resolved=lRef.resolve();
            if (resolved == field) {
              doLookup=false;
              if (commonInitializerCandidate == null) {
                final PsiExpression initializer=assignmentExpression.getRExpression();
                if (commonInitializer == null) {
                  final IsMovableInitializerVisitor visitor=new IsMovableInitializerVisitor();
                  initializer.accept(visitor);
                  if (visitor.isMovable()) {
                    ChangeContextUtil.encodeContextInfo(initializer,true);
                    PsiExpression initializerCopy=(PsiExpression)initializer.copy();
                    ChangeContextUtil.clearContextInfo(initializer);
                    statementsToRemove.add(statement);
                    commonInitializerCandidate=initializerCopy;
                  }
 else {
                    return null;
                  }
                }
 else {
                  if (CodeInsightUtil.areExpressionsEquivalent(commonInitializer,initializer)) {
                    statementsToRemove.add(statement);
                    commonInitializerCandidate=commonInitializer;
                  }
 else {
                    return null;
                  }
                }
              }
 else {
                return null;
              }
            }
          }
        }
      }
    }
    if (doLookup) {
      final PsiReference[] references=myManager.getSearchHelper().findReferences(field,new LocalSearchScope(statement),false);
      if (commonInitializerCandidate == null && references.length > 0) {
        return null;
      }
      for (      PsiReference reference : references) {
        if (RefactoringUtil.isAssignmentLHS(reference.getElement()))         return null;
      }
    }
  }
  return commonInitializerCandidate;
}
