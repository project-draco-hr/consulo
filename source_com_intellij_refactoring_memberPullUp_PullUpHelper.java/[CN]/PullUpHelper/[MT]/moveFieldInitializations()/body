{
  LOG.assertTrue(myMembersAfterMove != null);
  final HashSet<PsiField> movedFields=new HashSet<PsiField>();
  for (Iterator<PsiMember> iterator=myMembersAfterMove.iterator(); iterator.hasNext(); ) {
    PsiMember member=iterator.next();
    if (member instanceof PsiField) {
      movedFields.add((PsiField)member);
    }
  }
  if (movedFields.isEmpty())   return;
  PsiMethod[] constructors=myTargetSuperClass.getConstructors();
  if (constructors.length == 0) {
    constructors=new PsiMethod[]{null};
  }
  HashMap<PsiMethod,HashSet<PsiMethod>> constructorsToSubConstructors=buildConstructorsToSubConstructorsMap(constructors);
  for (int i=0; i < constructors.length; i++) {
    PsiMethod constructor=constructors[i];
    HashSet<PsiMethod> subConstructors=constructorsToSubConstructors.get(constructor);
    tryToMoveInitializers(constructor,subConstructors,movedFields);
  }
}
