{
  PsiMethod method=methodCandidate.getElement();
  PsiSubstitutor substitutor=methodCandidate.getSubstitutor();
  for (int i=0; i <= minIncompatibleIndex; i++) {
    for (int j=Math.max(i + 2,maxIncompatibleIndex); j < expressions.length; j++) {
{
        ArrayUtil.rotateLeft(expressions,i,j);
        if (PsiUtil.isApplicable(method,substitutor,expressions)) {
          PsiCall copy=(PsiCall)callExpression.copy();
          PsiExpression[] copyExpressions=copy.getArgumentList().getExpressions();
          for (int k=i; k < copyExpressions.length; k++) {
            copyExpressions[k].replace(expressions[k]);
          }
          JavaResolveResult result=copy.resolveMethodGenerics();
          if (result.getElement() != null && result.isValidResult()) {
            permutations.add(copy);
            if (permutations.size() > 1)             return;
          }
        }
        ArrayUtil.rotateRight(expressions,i,j);
      }
{
        ArrayUtil.rotateRight(expressions,i,j);
        if (PsiUtil.isApplicable(method,substitutor,expressions)) {
          PsiCall copy=(PsiCall)callExpression.copy();
          PsiExpression[] copyExpressions=copy.getArgumentList().getExpressions();
          for (int k=i; k < copyExpressions.length; k++) {
            copyExpressions[k].replace(expressions[k]);
          }
          JavaResolveResult result=copy.resolveMethodGenerics();
          if (result.getElement() != null && result.isValidResult()) {
            permutations.add(copy);
            if (permutations.size() > 1)             return;
          }
        }
        ArrayUtil.rotateLeft(expressions,i,j);
      }
    }
  }
}
