{
  for (int i=0; i < expressions.length; i++) {
    for (int j=i + 2; j < expressions.length; j++) {
{
        PsiCall copy=(PsiCall)callExpression.copy();
        PsiExpression[] copyExpressions=copy.getArgumentList().getExpressions();
        for (int k=i; k < j; k++) {
          copyExpressions[k].replace(expressions[k + 1]);
        }
        copyExpressions[j].replace(expressions[i]);
        JavaResolveResult result=copy.resolveMethodGenerics();
        if (result.getElement() != null && result.isValidResult()) {
          int[] permutation=new int[expressions.length];
          for (int k=0; k < permutation.length; k++) {
            permutation[k]=k;
          }
          for (int k=i; k < j; k++) {
            permutation[k + 1]=k;
          }
          permutation[i]=j;
          permutations.add(permutation);
          if (permutations.size() > 1)           return;
        }
      }
{
        PsiCall copy=(PsiCall)callExpression.copy();
        PsiExpression[] copyExpressions=copy.getArgumentList().getExpressions();
        for (int k=i; k < j; k++) {
          copyExpressions[k + 1].replace(expressions[k]);
        }
        copyExpressions[i].replace(expressions[j]);
        JavaResolveResult result=copy.resolveMethodGenerics();
        if (result.getElement() != null && result.isValidResult()) {
          int[] permutation=new int[expressions.length];
          for (int k=0; k < permutation.length; k++) {
            permutation[k]=k;
          }
          for (int k=i; k < j; k++) {
            permutation[k]=k + 1;
          }
          permutation[j]=i;
          permutations.add(permutation);
          if (permutations.size() > 1)           return;
        }
      }
    }
  }
}
