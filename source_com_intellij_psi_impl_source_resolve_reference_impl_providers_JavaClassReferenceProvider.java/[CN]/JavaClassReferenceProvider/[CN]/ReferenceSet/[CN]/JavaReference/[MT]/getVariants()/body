{
  final PsiElement context=getContext();
  if (context == null) {
    final PsiPackage defaultPackage=myElement.getManager().findPackage("");
    if (defaultPackage != null) {
      return processPackage(defaultPackage);
    }
    return ArrayUtil.EMPTY_OBJECT_ARRAY;
  }
  if (context instanceof PsiPackage) {
    return processPackage((PsiPackage)context);
  }
  if (context instanceof PsiClass) {
    final PsiClass aClass=(PsiClass)context;
    if (myInStaticImport) {
      return ArrayUtil.mergeArrays(aClass.getInnerClasses(),aClass.getFields(),Object.class);
    }
 else     if (isStaticClassReference()) {
      final PsiClass[] psiClasses=aClass.getInnerClasses();
      final List<PsiClass> staticClasses=new ArrayList<PsiClass>(psiClasses.length);
      for (      PsiClass c : psiClasses) {
        if (c.getModifierList().hasModifierProperty(PsiModifier.STATIC)) {
          staticClasses.add(c);
        }
      }
      return staticClasses.size() > 0 ? staticClasses.toArray(new PsiClass[staticClasses.size()]) : PsiClass.EMPTY_ARRAY;
    }
  }
  return ArrayUtil.EMPTY_OBJECT_ARRAY;
}
