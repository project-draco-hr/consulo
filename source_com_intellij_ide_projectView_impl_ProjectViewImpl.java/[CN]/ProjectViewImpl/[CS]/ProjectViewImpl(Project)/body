{
  myProject=project;
  myTreeChangeListener=new Runnable(){
    public void run(){
      updateToolWindowTitle();
    }
  }
;
  myModulesListener=new ModuleListener(){
    public void moduleRemoved(    Project project,    Module module){
      updateAllBuilders();
    }
    public void modulesRenamed(    Project project,    List<Module> modules){
      updateAllBuilders();
    }
    public void moduleAdded(    Project project,    Module module){
      updateAllBuilders();
    }
    public void beforeModuleRemoved(    Project project,    Module module){
    }
  }
;
  myPanel=new MyPanel();
  myAutoScrollToSourceHandler=new AutoScrollToSourceHandler(myProject){
    protected boolean isAutoScrollMode(){
      return isAutoscrollToSource(myCurrentViewId);
    }
    protected void setAutoScrollMode(    boolean state){
      setAutoscrollToSource(state,myCurrentViewId);
    }
  }
;
  myAutoScrollFromSourceHandler=new AutoScrollFromSourceHandler(myProject){
    private Alarm myAlarm=new Alarm();
    private FileEditorManagerAdapter myEditorManagerListener;
    public void install(){
      myEditorManagerListener=new FileEditorManagerAdapter(){
        public void selectionChanged(        final FileEditorManagerEvent event){
          PsiDocumentManager.getInstance(myProject).commitAllDocuments();
          myAlarm.cancelAllRequests();
          myAlarm.addRequest(new Runnable(){
            public void run(){
              if (myProject.isDisposed())               return;
              if (isAutoscrollFromSource(getCurrentViewId())) {
                FileEditor newEditor=event.getNewEditor();
                if (newEditor instanceof TextEditor) {
                  Editor editor=((TextEditor)newEditor).getEditor();
                  selectElementAtCaretNotLosingFocus(editor);
                }
              }
            }
          }
,400);
        }
      }
;
      FileEditorManager.getInstance(myProject).addFileEditorManagerListener(myEditorManagerListener);
    }
    private void selectElementAtCaretNotLosingFocus(    Editor editor){
      if (IJSwingUtilities.hasFocus(getCurrentProjectViewPane().getComponentToFocus()))       return;
      PsiFile file=PsiDocumentManager.getInstance(myProject).getPsiFile(editor.getDocument());
      if (file == null)       return;
      final SelectInTarget[] targets=SelectInManager.getInstance(myProject).getTargets();
      for (int i=0; i < targets.length; i++) {
        SelectInTarget target=targets[i];
        if (!ToolWindowId.PROJECT_VIEW.equals(target.getToolWindowId()))         continue;
        String compatiblePaneViewId=target.getMinorViewId();
        if (!Comparing.strEqual(compatiblePaneViewId,getCurrentViewId()))         continue;
        if (!target.canSelect(file))         continue;
        final int offset=editor.getCaretModel().getOffset();
        PsiDocumentManager.getInstance(myProject).commitAllDocuments();
        PsiElement e=file.findElementAt(offset);
        if (e == null) {
          e=file;
        }
        target.select(e,false);
        break;
      }
    }
    public void dispose(){
      if (myEditorManagerListener != null) {
        FileEditorManager.getInstance(myProject).removeFileEditorManagerListener(myEditorManagerListener);
      }
    }
    protected boolean isAutoScrollMode(){
      return isAutoscrollFromSource(myCurrentViewId);
    }
    protected void setAutoScrollMode(    boolean state){
      setAutoscrollFromSource(state,myCurrentViewId);
      if (state) {
        final Editor editor=FileEditorManager.getInstance(myProject).getSelectedTextEditor();
        if (editor != null) {
          selectElementAtCaretNotLosingFocus(editor);
        }
      }
    }
  }
;
}
