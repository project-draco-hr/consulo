{
  AbstractProjectViewPane currentPane=getCurrentProjectViewPane();
  PsiElement selectedPsiElement=null;
  Module selectedModule=null;
  if (currentPane != null) {
    if (currentPane != newPane) {
      currentPane.saveExpandedPaths();
    }
    Object selected=currentPane.getSelectedElement();
    if (selected instanceof PsiElement) {
      selectedPsiElement=(PsiElement)selected;
    }
    if (selected instanceof PackageElement) {
      PsiPackage psiPackage=((PackageElement)selected).getPackage();
      PsiDirectory[] directories=psiPackage.getDirectories();
      selectedPsiElement=directories.length == 0 ? null : directories[0];
    }
    if (selected instanceof Module) {
      selectedModule=(Module)selected;
    }
    Disposer.dispose(currentPane);
  }
  removeLabelFocusListener();
  myViewContentPanel.removeAll();
  JComponent component=newPane.createComponent();
  myViewContentPanel.setLayout(new BorderLayout());
  myViewContentPanel.add(component,BorderLayout.CENTER);
  myCurrentViewId=newPane.getId();
  String newSubId=myCurrentViewSubId=newPane.getSubId();
  myViewContentPanel.revalidate();
  myViewContentPanel.repaint();
  createToolbarActions();
  newPane.setTreeChangeListener(myTreeChangeListener);
  myAutoScrollToSourceHandler.install(newPane.myTree);
  newPane.getComponentToFocus().requestFocus();
  updateToolWindowTitle();
  showOrHideStructureView(isShowStructure());
  newPane.restoreExpandedPaths();
  if (selectedPsiElement != null) {
    VirtualFile virtualFile=PsiUtil.getVirtualFile(selectedPsiElement);
    if (((ProjectViewSelectInTarget)newPane.createSelectInTarget()).isSubIdSelectable(newSubId,virtualFile)) {
      newPane.select(selectedPsiElement,virtualFile,true);
    }
  }
 else   if (selectedModule != null) {
    newPane.select(selectedModule,selectedModule.getModuleFile(),true);
  }
  installLabelFocusListener();
}
