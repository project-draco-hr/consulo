{
  super(treeTableModel);
  myStripeColor1=stripeColor1;
  myStripeColor2=stripeColor2;
  setOpaque(false);
  getTree().setOpaque(false);
  getTree().getSelectionModel().addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      final int[] selectionRows=getTree().getSelectionRows();
      if (selectionRows != null && selectionRows.length > 0) {
        addColumnSelectionInterval(0,getColumnCount() - 1);
      }
    }
  }
);
  for (int i=0; i < getColumnCount(); i++) {
    final TableColumn column=getColumn(getColumnName(i));
    final TableCellRenderer cellRenderer=getCellRenderer(i);
    if (cellRenderer != null) {
      column.setCellRenderer(new TableCellRenderer(){
        public Component getTableCellRendererComponent(        JTable table,        Object value,        boolean isSelected,        boolean hasFocus,        int row,        int col){
          Component component=cellRenderer.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,col);
          drawStripe(isSelected,component,row,UIUtil.getTableSelectionBackground(),UIUtil.getTableBackground());
          return component;
        }
      }
);
    }
  }
  final TreeCellRenderer treeRenderer=getTreeRenderer();
  if (treeRenderer != null) {
    getTree().setCellRenderer(new DefaultTreeCellRenderer(){
      public Component getTreeCellRendererComponent(      JTree tree,      Object value,      boolean selected,      boolean expanded,      boolean leaf,      int row,      boolean hasFocus){
        final Component component=treeRenderer.getTreeCellRendererComponent(tree,value,selected,expanded,leaf,row,hasFocus);
        drawStripe(selected,component,row,UIUtil.getTreeSelectionBackground(),UIUtil.getTreeTextBackground());
        return component;
      }
    }
);
  }
}
