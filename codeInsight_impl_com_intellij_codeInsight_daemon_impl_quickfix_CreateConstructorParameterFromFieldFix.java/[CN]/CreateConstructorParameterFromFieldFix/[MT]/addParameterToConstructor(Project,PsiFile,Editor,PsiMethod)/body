{
  PsiParameter[] parameters=constructor.getParameterList().getParameters();
  PsiExpression[] expressions=new PsiExpression[parameters.length + 1];
  PsiElementFactory factory=file.getManager().getElementFactory();
  for (int i=0; i < parameters.length; i++) {
    PsiParameter parameter=parameters[i];
    String value=PsiTypesUtil.getDefaultValueOfType(parameter.getType());
    expressions[i]=factory.createExpressionFromText(value,parameter);
  }
  expressions[parameters.length]=factory.createExpressionFromText(myField.getName(),constructor);
  IntentionAction addParamFix=new ChangeMethodSignatureFromUsageFix(constructor,expressions,PsiSubstitutor.EMPTY,constructor);
  addParamFix.invoke(project,editor,file);
  parameters=constructor.getParameterList().getParameters();
  final PsiParameter parameter=parameters[parameters.length - 1];
  if (HighlightControlFlowUtil.getChainedConstructors(constructor) != null)   return;
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      try {
        AssignFieldFromParameterAction.addFieldAssignmentStatement(project,myField,parameter,editor);
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
    }
  }
);
}
