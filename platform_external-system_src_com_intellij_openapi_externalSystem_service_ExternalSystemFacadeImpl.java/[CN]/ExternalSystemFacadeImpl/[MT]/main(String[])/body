{
  if (args.length < 1) {
    throw new IllegalArgumentException("Can't create external system facade. Reason: given arguments don't contain information about external system resolver to use");
  }
  final Class<ExternalSystemProjectResolver<?>> resolverClass=(Class<ExternalSystemProjectResolver<?>>)Class.forName(args[0]);
  if (!ExternalSystemProjectResolver.class.isAssignableFrom(resolverClass)) {
    throw new IllegalArgumentException(String.format("Can't create external system facade. Reason: given external system resolver class (%s) must be IS-A '%s'",resolverClass,ExternalSystemProjectResolver.class));
  }
  if (args.length < 2) {
    throw new IllegalArgumentException("Can't create external system facade. Reason: given arguments don't contain information about external system build manager to use");
  }
  final Class<ExternalSystemBuildManager<?>> buildManagerClass=(Class<ExternalSystemBuildManager<?>>)Class.forName(args[0]);
  if (!ExternalSystemProjectResolver.class.isAssignableFrom(resolverClass)) {
    throw new IllegalArgumentException(String.format("Can't create external system facade. Reason: given external system build manager (%s) must be IS-A '%s'",buildManagerClass,ExternalSystemBuildManager.class));
  }
  ExternalSystemFacadeImpl facade=new ExternalSystemFacadeImpl(resolverClass,buildManagerClass);
  facade.init();
  start(facade);
}
