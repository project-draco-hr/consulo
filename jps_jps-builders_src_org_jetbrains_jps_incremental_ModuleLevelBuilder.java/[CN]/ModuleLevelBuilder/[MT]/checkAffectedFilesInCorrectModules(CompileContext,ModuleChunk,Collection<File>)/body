{
  if (affected.isEmpty()) {
    return Collections.emptyList();
  }
  final Set<Module> chunkModules=currentChunk.getModules();
  final Map<Module,Set<Module>> cache=new HashMap<Module,Set<Module>>();
  final List<Pair<File,Module>> result=new ArrayList<Pair<File,Module>>();
  for (  File file : affected) {
    final RootDescriptor moduleAndRoot=context.getModuleAndRoot(file);
    if (moduleAndRoot == null) {
      continue;
    }
    final Module moduleOfFile=moduleAndRoot.module;
    if (chunkModules.contains(moduleOfFile)) {
      continue;
    }
    Set<Module> moduleOfFileWithDependencies=cache.get(moduleOfFile);
    if (moduleOfFileWithDependencies == null) {
      moduleOfFileWithDependencies=ProjectPaths.getModulesWithDependentsRecursively(moduleOfFile,true);
      cache.put(moduleOfFile,moduleOfFileWithDependencies);
    }
    if (intersects(moduleOfFileWithDependencies,chunkModules)) {
      continue;
    }
    result.add(Pair.create(file,moduleOfFile));
  }
  return result;
}
