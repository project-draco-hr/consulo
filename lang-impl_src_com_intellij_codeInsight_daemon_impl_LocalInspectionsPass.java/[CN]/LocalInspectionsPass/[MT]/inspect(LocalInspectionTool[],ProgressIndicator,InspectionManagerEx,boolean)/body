{
  if (tools.length == 0)   return;
  final PsiElement[] elements=getElementsIntersectingRange(myFile,myStartOffset,myEndOffset);
  setProgressLimit(1L * tools.length * elements.length);
  JobUtil.invokeConcurrentlyForAll(tools,new Processor<LocalInspectionTool>(){
    public boolean process(    final LocalInspectionTool tool){
      if (progress != null) {
        if (progress.isCanceled()) {
          return false;
        }
      }
      final ProgressManager progressManager=ProgressManager.getInstance();
      ((ProgressManagerImpl)progressManager).executeProcessUnderProgress(new Runnable(){
        public void run(){
          ApplicationManager.getApplication().assertReadAccessAllowed();
          ProblemsHolder holder=new ProblemsHolder(iManager);
          progressManager.checkCanceled();
          PsiElementVisitor elementVisitor=tool.buildVisitor(holder,isOnTheFly);
          if (elementVisitor == null) {
            LOG.error("Tool " + tool + " must not return null from the buildVisitor() method");
          }
          final LocalInspectionToolSession session=new LocalInspectionToolSession(myFile,myStartOffset,myEndOffset);
          tool.inspectionStarted(session);
          for (          PsiElement element : elements) {
            progressManager.checkCanceled();
            element.accept(elementVisitor);
          }
          tool.inspectionFinished(session);
          advanceProgress(elements.length);
          if (holder.hasResults()) {
            appendDescriptors(holder.getResults(),tool);
          }
        }
      }
,progress);
      return true;
    }
  }
,"Inspection tools");
  inspectInjectedPsi(elements,tools);
  myInfos=new ArrayList<HighlightInfo>(myDescriptors.size());
  addHighlightsFromDescriptors(myInfos);
  addHighlightsFromInjectedPsiProblems(myInfos);
}
