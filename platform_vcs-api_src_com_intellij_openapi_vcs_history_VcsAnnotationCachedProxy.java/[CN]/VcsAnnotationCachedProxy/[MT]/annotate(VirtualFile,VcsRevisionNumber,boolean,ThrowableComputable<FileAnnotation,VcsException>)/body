{
  final AnnotationProvider annotationProvider=myAnnotationProvider;
  final FilePath filePath=VcsContextFactory.SERVICE.getInstance().createFilePathOn(file);
  final VcsCacheableAnnotationProvider cacheableAnnotationProvider=(VcsCacheableAnnotationProvider)annotationProvider;
  VcsAnnotation vcsAnnotation=null;
  if (revisionNumber != null) {
    vcsAnnotation=myCache.get(VcsContextFactory.SERVICE.getInstance().createFilePathOn(file),myVcs.getKeyInstanceMethod(),revisionNumber);
  }
  if (vcsAnnotation != null) {
    final VcsHistoryProvider historyProvider=myVcs.getVcsHistoryProvider();
    final VcsAbstractHistorySession history=getHistory(revisionNumber,filePath,historyProvider,vcsAnnotation.getFirstRevision());
    if (history == null)     return null;
    final ContentRevision fileContent=myVcs.getDiffProvider().createFileContent(revisionNumber,file);
    final FileAnnotation restored=cacheableAnnotationProvider.restore(vcsAnnotation,history,fileContent.getContent(),currentRevision,revisionNumber);
    if (restored != null) {
      return restored;
    }
  }
  final FileAnnotation fileAnnotation=delegate.compute();
  vcsAnnotation=cacheableAnnotationProvider.createCacheable(fileAnnotation);
  if (vcsAnnotation == null)   return fileAnnotation;
  if (revisionNumber != null) {
    myCache.put(filePath,myVcs.getKeyInstanceMethod(),revisionNumber,vcsAnnotation);
  }
  if (myVcs.getVcsHistoryProvider() instanceof VcsCacheableHistorySessionFactory) {
    loadHistoryInBackgroundToCache(revisionNumber,filePath,vcsAnnotation);
  }
  return fileAnnotation;
}
