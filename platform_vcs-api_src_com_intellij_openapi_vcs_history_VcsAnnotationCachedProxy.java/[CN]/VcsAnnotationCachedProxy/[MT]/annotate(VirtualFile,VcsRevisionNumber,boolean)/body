{
  final AnnotationProvider annotationProvider=myVcs.getAnnotationProvider();
  final FilePath filePath=VcsContextFactory.SERVICE.getInstance().createFilePathOn(file);
  final VcsCacheableAnnotationProvider cacheableAnnotationProvider=(VcsCacheableAnnotationProvider)annotationProvider;
  VcsAnnotation vcsAnnotation=myCache.get(VcsContextFactory.SERVICE.getInstance().createFilePathOn(file),myVcs.getKeyInstanceMethod(),revisionNumber);
  if (vcsAnnotation != null) {
    final VcsHistoryProvider historyProvider=myVcs.getVcsHistoryProvider();
    final VcsAbstractHistorySession history=getHistory(revisionNumber,filePath,historyProvider,vcsAnnotation.getFirstRevision());
    final ContentRevision fileContent=myVcs.getDiffProvider().createFileContent(revisionNumber,file);
    final FileAnnotation restored=cacheableAnnotationProvider.restore(vcsAnnotation,history,fileContent.getContent(),currentRevision);
    if (restored != null) {
      return restored;
    }
  }
  final FileAnnotation fileAnnotation=annotationProvider.annotate(file);
  vcsAnnotation=cacheableAnnotationProvider.createCacheable(fileAnnotation);
  myCache.put(filePath,myVcs.getKeyInstanceMethod(),revisionNumber,vcsAnnotation);
  if (myVcs.getVcsHistoryProvider() instanceof VcsCacheableHistorySessionFactory) {
    loadHistoryInBackgroundToCache(revisionNumber,filePath,vcsAnnotation);
  }
  return fileAnnotation;
}
