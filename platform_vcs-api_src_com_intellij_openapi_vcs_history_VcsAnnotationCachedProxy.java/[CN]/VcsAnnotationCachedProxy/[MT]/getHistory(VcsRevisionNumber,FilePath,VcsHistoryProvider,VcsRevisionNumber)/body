{
  final boolean historyCacheSupported=historyProvider instanceof VcsCacheableHistorySessionFactory;
  if (historyCacheSupported) {
    final VcsCacheableHistorySessionFactory cacheableHistorySessionFactory=(VcsCacheableHistorySessionFactory)historyProvider;
    final VcsAbstractHistorySession cachedSession=myCache.getMaybePartial(filePath,myVcs.getKeyInstanceMethod(),cacheableHistorySessionFactory);
    if (cachedSession != null && !cachedSession.getRevisionList().isEmpty()) {
      final VcsFileRevision recentRevision=cachedSession.getRevisionList().get(0);
      if (recentRevision.getRevisionNumber().compareTo(revision) >= 0 && (firstRevision == null || cachedSession.getHistoryAsMap().containsKey(firstRevision))) {
        return cachedSession;
      }
    }
  }
  final VcsAbstractHistorySession sessionFor;
  if (firstRevision != null) {
    sessionFor=limitedHistory(filePath,firstRevision);
  }
 else {
    sessionFor=(VcsAbstractHistorySession)historyProvider.createSessionFor(filePath);
  }
  if (historyCacheSupported) {
    final VcsCacheableHistorySessionFactory cacheableHistorySessionFactory=(VcsCacheableHistorySessionFactory)historyProvider;
    final FilePath correctedPath=cacheableHistorySessionFactory.getUsedFilePath(sessionFor);
    myCache.put(filePath,correctedPath,myVcs.getKeyInstanceMethod(),sessionFor,cacheableHistorySessionFactory,firstRevision == null);
  }
  return sessionFor;
}
