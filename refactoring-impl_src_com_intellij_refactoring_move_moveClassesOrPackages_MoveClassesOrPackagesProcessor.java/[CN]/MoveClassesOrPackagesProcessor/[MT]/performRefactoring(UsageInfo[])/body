{
  try {
    for (int idx=0; idx < myElementsToMove.length; idx++) {
      PsiElement element=myElementsToMove[idx];
      final RefactoringElementListener elementListener=getTransaction().getElementListener(element);
      if (element instanceof PsiPackage) {
        element=MoveClassesOrPackagesUtil.doMovePackage((PsiPackage)element,myMoveDestination,extractElementUsages(element,usages));
      }
 else       if (element instanceof PsiClass) {
        ChangeContextUtil.encodeContextInfo(element,true);
        element=MoveClassesOrPackagesUtil.doMoveClass((PsiClass)element,myMoveDestination,extractElementUsages(element,usages));
      }
 else {
        LOG.error("Unexpected element to move: " + element);
      }
      elementListener.elementMoved(element);
      myElementsToMove[idx]=element;
    }
    for (    PsiElement element : myElementsToMove) {
      if (element instanceof PsiClass) {
        ChangeContextUtil.decodeContextInfo(element,null,null);
      }
    }
    myUsages=usages;
  }
 catch (  IncorrectOperationException e) {
    myUsages=new UsageInfo[0];
    RefactoringUtil.processIncorrectOperation(myProject,e);
  }
}
