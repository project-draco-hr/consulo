{
  try {
    int port=DEFAULT_SERVER_PORT;
    File systemDir=null;
    if (args.length > 0) {
      try {
        port=Integer.parseInt(args[0]);
      }
 catch (      NumberFormatException e) {
        System.err.println("Error parsing port: " + e.getMessage());
        System.exit(-1);
      }
      systemDir=new File(args[1]);
    }
    final Server server=new Server(systemDir);
    if (new File("log.xml").exists()) {
      DOMConfigurator.configure("log.xml");
    }
    Logger.setFactory(new Logger.Factory(){
      @Override public Logger getLoggerInstance(      String category){
        final org.apache.log4j.Logger logger=org.apache.log4j.Logger.getLogger(category);
        return new Logger(){
          @Override public boolean isDebugEnabled(){
            return logger.isDebugEnabled();
          }
          @Override public void debug(          @NonNls String message){
            logger.debug(message);
          }
          @Override public void debug(          @Nullable Throwable t){
            logger.debug("",t);
          }
          @Override public void debug(          @NonNls String message,          @Nullable Throwable t){
            logger.debug(message,t);
          }
          @Override public void error(          @NonNls String message,          @Nullable Throwable t,          @NonNls String... details){
            logger.debug(message,t);
          }
          @Override public void info(          @NonNls String message){
            logger.info(message);
          }
          @Override public void info(          @NonNls String message,          @Nullable Throwable t){
            logger.info(message,t);
          }
          @Override public void warn(          @NonNls String message,          @Nullable Throwable t){
            logger.warn(message,t);
          }
          @Override public void setLevel(          Level level){
            logger.setLevel(level);
          }
        }
;
      }
    }
);
    server.start(port);
    Runtime.getRuntime().addShutdownHook(new Thread("Shutdown hook thread"){
      public void run(){
        server.stop();
      }
    }
);
    ServerState.getInstance().setKeepTempCachesInMemory(System.getProperty(GlobalOptions.USE_MEMORY_TEMP_CACHE_OPTION) != null);
    System.out.println("Server classpath: " + System.getProperty("java.class.path"));
    System.err.println(SERVER_SUCCESS_START_MESSAGE + port);
  }
 catch (  Throwable e) {
    System.err.println(SERVER_ERROR_START_MESSAGE + e.getMessage());
    e.printStackTrace(System.err);
    System.exit(-1);
  }
}
