{
  if (myScrollableTabSupport == null || WRAP_TAB_LAYOUT == getTabLayoutPolicy()) {
    return;
  }
  final TabbedPaneUI tabbedPaneUI=getUI();
  Rectangle tabBounds=tabbedPaneUI.getTabBounds(this,index);
  final int tabPlacement=getTabPlacement();
  if (TOP == tabPlacement || BOTTOM == tabPlacement) {
    if (tabBounds.x < 50) {
      int leadingTabIndex=myScrollableTabSupport.getLeadingTabIndex();
      while (leadingTabIndex != index && leadingTabIndex > 0 && tabBounds.x < 50) {
        myScrollableTabSupport.setLeadingTabIndex(leadingTabIndex - 1);
        leadingTabIndex=myScrollableTabSupport.getLeadingTabIndex();
        tabBounds=tabbedPaneUI.getTabBounds(this,index);
      }
    }
 else     if (tabBounds.x + tabBounds.width > getWidth() - 50) {
      int leadingTabIndex=myScrollableTabSupport.getLeadingTabIndex();
      while (leadingTabIndex != index && leadingTabIndex < getTabCount() - 1 && tabBounds.x + tabBounds.width > getWidth() - 50) {
        myScrollableTabSupport.setLeadingTabIndex(leadingTabIndex + 1);
        leadingTabIndex=myScrollableTabSupport.getLeadingTabIndex();
        tabBounds=tabbedPaneUI.getTabBounds(this,index);
      }
    }
  }
 else {
    if (tabBounds.y < 30) {
      int leadingTabIndex=myScrollableTabSupport.getLeadingTabIndex();
      while (leadingTabIndex != index && leadingTabIndex > 0 && tabBounds.y < 30) {
        myScrollableTabSupport.setLeadingTabIndex(leadingTabIndex - 1);
        leadingTabIndex=myScrollableTabSupport.getLeadingTabIndex();
        tabBounds=tabbedPaneUI.getTabBounds(this,index);
      }
    }
 else     if (tabBounds.y + tabBounds.height > getHeight() - 30) {
      int leadingTabIndex=myScrollableTabSupport.getLeadingTabIndex();
      while (leadingTabIndex != index && leadingTabIndex < getTabCount() - 1 && tabBounds.y + tabBounds.height > getHeight() - 30) {
        myScrollableTabSupport.setLeadingTabIndex(leadingTabIndex + 1);
        leadingTabIndex=myScrollableTabSupport.getLeadingTabIndex();
        tabBounds=tabbedPaneUI.getTabBounds(this,index);
      }
    }
  }
}
