{
  final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)infos[0];
  final PsiExpression lhs=binaryExpression.getLOperand();
  final Collection<InspectionGadgetsFix> result=new ArrayList();
  final PsiModifierListOwner element1=getAnnotatableElement(lhs);
  if (element1 != null) {
    final InspectionGadgetsFix fix=new DelegatingFix(new AddAnnotationFix(AnnotationUtil.NON_NLS,element1));
    result.add(fix);
  }
  final PsiExpression rhs=binaryExpression.getROperand();
  final PsiModifierListOwner element2=getAnnotatableElement(rhs);
  if (element2 != null) {
    final InspectionGadgetsFix fix=new DelegatingFix(new AddAnnotationFix(AnnotationUtil.NON_NLS,element2));
    result.add(fix);
  }
  final PsiElement expressionParent=PsiTreeUtil.getParentOfType(binaryExpression,PsiReturnStatement.class,PsiExpressionList.class);
  if (!(expressionParent instanceof PsiExpressionList) && expressionParent != null) {
    final PsiMethod method=PsiTreeUtil.getParentOfType(expressionParent,PsiMethod.class);
    if (method != null) {
      final InspectionGadgetsFix fix=new DelegatingFix(new AddAnnotationFix(AnnotationUtil.NON_NLS,method));
      result.add(fix);
    }
  }
  return result.toArray(new InspectionGadgetsFix[result.size()]);
}
