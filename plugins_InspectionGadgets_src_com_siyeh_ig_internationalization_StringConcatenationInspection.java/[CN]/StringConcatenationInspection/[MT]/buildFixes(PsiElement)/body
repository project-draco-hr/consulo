{
  final PsiElement parent=location.getParent();
  if (!(parent instanceof PsiBinaryExpression)) {
    return InspectionGadgetsFix.EMPTY_ARRAY;
  }
  final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)parent;
  final PsiExpression lhs=binaryExpression.getLOperand();
  final Collection<InspectionGadgetsFix> result=new ArrayList();
  final PsiModifierListOwner element1=AnnotateForBinaryExpressionFix.extractAnnotatableElement(lhs);
  if (element1 != null) {
    final AnnotateForBinaryExpressionFix fix=new AnnotateForBinaryExpressionFix(element1,true);
    result.add(fix);
  }
  final PsiExpression rhs=binaryExpression.getROperand();
  final PsiModifierListOwner element2=AnnotateForBinaryExpressionFix.extractAnnotatableElement(rhs);
  if (element2 != null) {
    final AnnotateForBinaryExpressionFix fix=new AnnotateForBinaryExpressionFix(element2,false);
    result.add(fix);
  }
  final PsiElement expressionParent=PsiTreeUtil.getParentOfType(binaryExpression,PsiReturnStatement.class,PsiExpressionList.class);
  if (!(expressionParent instanceof PsiExpressionList) && expressionParent != null) {
    final PsiMethod method=PsiTreeUtil.getParentOfType(expressionParent,PsiMethod.class);
    result.add(new AnnotateContainingMethodFix(method));
  }
  return result.toArray(new InspectionGadgetsFix[result.size()]);
}
