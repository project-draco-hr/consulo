{
  super.visitBinaryExpression(expression);
  final PsiExpression rhs=expression.getROperand();
  if (rhs == null) {
    return;
  }
  final PsiJavaToken sign=expression.getOperationSign();
  final IElementType tokenType=sign.getTokenType();
  if (!JavaTokenType.PLUS.equals(tokenType)) {
    return;
  }
  final PsiExpression lhs=expression.getLOperand();
  final PsiType lhsType=lhs.getType();
  final PsiType rhsType=rhs.getType();
  if (!TypeUtils.isJavaLangString(lhsType) && !TypeUtils.isJavaLangString(rhsType)) {
    return;
  }
  if (NonNlsUtils.isNonNlsAnnotated(lhs) || NonNlsUtils.isNonNlsAnnotated(rhs)) {
    return;
  }
  if (ignoreAsserts) {
    final PsiAssertStatement assertStatement=PsiTreeUtil.getParentOfType(expression,PsiAssertStatement.class,true,PsiCodeBlock.class);
    if (assertStatement != null) {
      return;
    }
  }
  if (ignoreSystemErrs || ignoreSystemOuts) {
    final PsiMethodCallExpression methodCallExpression=PsiTreeUtil.getParentOfType(expression,PsiMethodCallExpression.class,true,PsiCodeBlock.class);
    if (methodCallExpression != null) {
      final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
      @NonNls final String canonicalText=methodExpression.getCanonicalText();
      if (ignoreSystemOuts && "System.out.println".equals(canonicalText) || "System.out.print".equals(canonicalText)) {
        return;
      }
      if (ignoreSystemErrs && "System.err.println".equals(canonicalText) || "System.err.print".equals(canonicalText)) {
        return;
      }
    }
  }
  if (ignoreThrowableArguments) {
    final PsiNewExpression newExpression=PsiTreeUtil.getParentOfType(expression,PsiNewExpression.class,true,PsiCodeBlock.class);
    if (newExpression != null) {
      final PsiType type=newExpression.getType();
      if (type != null && InheritanceUtil.isInheritor(type,"java.lang.Throwable")) {
        return;
      }
    }
  }
  if (NonNlsUtils.isNonNlsAnnotatedUse(expression)) {
    return;
  }
  registerError(sign,expression);
}
