{
  super.visitBinaryExpression(expression);
  if (!(expression.getROperand() != null)) {
    return;
  }
  final PsiJavaToken sign=expression.getOperationSign();
  final IElementType tokenType=sign.getTokenType();
  if (!JavaTokenType.PLUS.equals(tokenType)) {
    return;
  }
  final PsiExpression lhs=expression.getLOperand();
  final PsiType lhsType=lhs.getType();
  final PsiExpression rhs=expression.getROperand();
  if (rhs == null) {
    return;
  }
  final PsiType rhsType=rhs.getType();
  if (!TypeUtils.isJavaLangString(lhsType) && !TypeUtils.isJavaLangString(rhsType)) {
    return;
  }
  final PsiElement element=PsiTreeUtil.getParentOfType(expression,PsiAssertStatement.class,PsiMethodCallExpression.class);
  if (ignoreAsserts && element instanceof PsiAssertStatement) {
    return;
  }
  if (element instanceof PsiMethodCallExpression) {
    final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)element;
    final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
    @NonNls final String canonicalText=methodExpression.getCanonicalText();
    if (ignoreSystemOuts && "System.out.println".equals(canonicalText) || "System.out.print".equals(canonicalText)) {
      return;
    }
    if (ignoreSystemErrs && "System.err.println".equals(canonicalText) || "System.err.print".equals(canonicalText)) {
      return;
    }
  }
  registerError(sign);
}
