{
  final Holder<Object> defaultValue=new Holder<Object>();
  processSignature(signature);
  return new MethodVisitor(Opcodes.ASM4){
    @Override public void visitEnd(){
      if ((access & Opcodes.ACC_SYNTHETIC) == 0 || (access & Opcodes.ACC_BRIDGE) > 0) {
        myMethods.add(new MethodRepr(myContext,access,myContext.get(n),myContext.get(signature),desc,exceptions,defaultValue.get()));
      }
    }
    @Override public AnnotationVisitor visitAnnotation(    String desc,    boolean visible){
      return new AnnotationCrawler((TypeRepr.ClassType)TypeRepr.getType(myContext,myContext.get(desc)),"<init>".equals(n) ? ElemType.CONSTRUCTOR : ElemType.METHOD);
    }
    @Override public AnnotationVisitor visitAnnotationDefault(){
      return new AnnotationVisitor(Opcodes.ASM4){
        public void visit(        String name,        Object value){
          defaultValue.set(value);
        }
      }
;
    }
    @Override public AnnotationVisitor visitParameterAnnotation(    int parameter,    String desc,    boolean visible){
      return new AnnotationCrawler((TypeRepr.ClassType)TypeRepr.getType(myContext,myContext.get(desc)),ElemType.PARAMETER);
    }
    @Override public void visitLdcInsn(    Object cst){
      if (cst instanceof Type) {
        myUsages.add(UsageRepr.createClassUsage(myContext,myContext.get(((Type)cst).getInternalName())));
      }
      super.visitLdcInsn(cst);
    }
    @Override public void visitMultiANewArrayInsn(    String desc,    int dims){
      final TypeRepr.ArrayType typ=(TypeRepr.ArrayType)TypeRepr.getType(myContext,myContext.get(desc));
      final TypeRepr.AbstractType element=typ.getDeepElementType();
      if (element instanceof TypeRepr.ClassType) {
        final int className=((TypeRepr.ClassType)element).myClassName;
        myUsages.add(UsageRepr.createClassUsage(myContext,className));
        myUsages.add(UsageRepr.createClassNewUsage(myContext,className));
      }
      typ.updateClassUsages(myContext,myName,myUsages);
      super.visitMultiANewArrayInsn(desc,dims);
    }
    @Override public void visitLocalVariable(    String n,    String desc,    String signature,    Label start,    Label end,    int index){
      processSignature(signature);
      TypeRepr.getType(myContext,myContext.get(desc)).updateClassUsages(myContext,myName,myUsages);
      super.visitLocalVariable(n,desc,signature,start,end,index);
    }
    @Override public void visitTryCatchBlock(    Label start,    Label end,    Label handler,    String type){
      if (type != null) {
        TypeRepr.createClassType(myContext,myContext.get(type)).updateClassUsages(myContext,myName,myUsages);
      }
      super.visitTryCatchBlock(start,end,handler,type);
    }
    @Override public void visitTypeInsn(    int opcode,    String type){
      final TypeRepr.AbstractType typ=type.startsWith("[") ? TypeRepr.getType(myContext,myContext.get(type)) : TypeRepr.createClassType(myContext,myContext.get(type));
      if (opcode == Opcodes.NEW) {
        myUsages.add(UsageRepr.createClassUsage(myContext,((TypeRepr.ClassType)typ).myClassName));
        myUsages.add(UsageRepr.createClassNewUsage(myContext,((TypeRepr.ClassType)typ).myClassName));
      }
 else       if (opcode == Opcodes.ANEWARRAY) {
        if (typ instanceof TypeRepr.ClassType) {
          myUsages.add(UsageRepr.createClassUsage(myContext,((TypeRepr.ClassType)typ).myClassName));
          myUsages.add(UsageRepr.createClassNewUsage(myContext,((TypeRepr.ClassType)typ).myClassName));
        }
      }
      typ.updateClassUsages(myContext,myName,myUsages);
      super.visitTypeInsn(opcode,type);
    }
    @Override public void visitFieldInsn(    int opcode,    String owner,    String name,    String desc){
      final int fieldName=myContext.get(name);
      final int fieldOwner=myContext.get(owner);
      final int descr=myContext.get(desc);
      if (opcode == Opcodes.PUTFIELD || opcode == Opcodes.PUTSTATIC) {
        myUsages.add(UsageRepr.createFieldAssignUsage(myContext,fieldName,fieldOwner,descr));
      }
      if (opcode == Opcodes.GETFIELD || opcode == Opcodes.GETSTATIC) {
        addClassUsage(TypeRepr.getType(myContext,descr));
      }
      myUsages.add(UsageRepr.createFieldUsage(myContext,fieldName,fieldOwner,descr));
      super.visitFieldInsn(opcode,owner,name,desc);
    }
    @Override public void visitMethodInsn(    int opcode,    String owner,    String name,    String desc){
      final int methodName=myContext.get(name);
      final int methodOwner=myContext.get(owner);
      myUsages.add(UsageRepr.createMethodUsage(myContext,methodName,methodOwner,desc));
      myUsages.add(UsageRepr.createMetaMethodUsage(myContext,methodName,methodOwner,desc));
      addClassUsage(TypeRepr.getType(myContext,Type.getReturnType(desc)));
      super.visitMethodInsn(opcode,owner,name,desc);
    }
    private void addClassUsage(    final TypeRepr.AbstractType type){
      TypeRepr.ClassType classType=null;
      if (type instanceof TypeRepr.ClassType) {
        classType=(TypeRepr.ClassType)type;
      }
 else       if (type instanceof TypeRepr.ArrayType) {
        final TypeRepr.AbstractType elemType=((TypeRepr.ArrayType)type).getDeepElementType();
        if (elemType instanceof TypeRepr.ClassType) {
          classType=(TypeRepr.ClassType)elemType;
        }
      }
      if (classType != null) {
        myUsages.add(UsageRepr.createClassUsage(myContext,classType.myClassName));
      }
    }
  }
;
}
