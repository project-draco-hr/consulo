{
  myEditor.getActiveDecorationLayer().removeFeedback();
  final int dropX=dropPoint.x;
  final int dropY=dropPoint.y;
  final ArrayList<RadComponent> dclComponents=dcl.getComponents();
  final int componentCount=dclComponents.size();
  DropLocation location=GridInsertProcessor.getDropLocation(myEditor.getRootContainer(),dropPoint);
  if (FormEditingUtil.isDropOnChild(dcl,location)) {
    setDraggingState(dcl,false);
    return false;
  }
  if (location != null && !location.canDrop(dcl)) {
    setDraggingState(dcl,false);
    return false;
  }
  if (!myEditor.ensureEditable()) {
    setDraggingState(dcl,false);
    return false;
  }
  List<RadComponent> droppedComponents;
  RadContainer[] originalParents=dcl.getOriginalParents();
  cancelDrag();
  if (dropAction == DnDConstants.ACTION_COPY) {
    setDraggingState(dcl,false);
    droppedComponents=myDraggedComponentsCopy;
    if (droppedComponents == null) {
      return false;
    }
  }
 else {
    for (int i=0; i < dclComponents.size(); i++) {
      LOG.info("Removing component " + dclComponents.get(i).getId() + " with constraints "+ dcl.getOriginalConstraints()[i]);
      originalParents[i].removeComponent(dclComponents.get(i));
    }
    droppedComponents=dclComponents;
  }
  final int[] dx=new int[componentCount];
  final int[] dy=new int[componentCount];
  for (int i=0; i < componentCount; i++) {
    final RadComponent component=myDraggedComponentsCopy.get(i);
    dx[i]=component.getX() - dropX;
    dy[i]=component.getY() - dropY;
  }
  final RadComponent[] components=droppedComponents.toArray(new RadComponent[componentCount]);
  final GridConstraints[] originalConstraints=dcl.getOriginalConstraints();
  if (location != null) {
    location.processDrop(myEditor,components,originalConstraints,dcl);
  }
  if (dropAction == DnDConstants.ACTION_COPY) {
    for (    RadComponent component : droppedComponents) {
      InsertComponentProcessor.createBindingWhenDrop(myEditor,component);
    }
    FormEditingUtil.selectComponents(droppedComponents);
  }
 else {
    setDraggingState(dcl,false);
  }
  for (int i=0; i < originalConstraints.length; i++) {
    if (originalParents[i].isGrid()) {
      FormEditingUtil.deleteEmptyGridCells(originalParents[i],originalConstraints[i]);
    }
  }
  return true;
}
