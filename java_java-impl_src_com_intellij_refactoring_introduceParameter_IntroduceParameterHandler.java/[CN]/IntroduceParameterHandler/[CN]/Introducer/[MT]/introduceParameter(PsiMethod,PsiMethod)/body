{
  if (!CommonRefactoringUtil.checkReadOnlyStatus(myProject,methodToSearchFor))   return;
  PsiExpression[] occurences;
  if (myExpr != null) {
    occurences=new ExpressionOccurenceManager(myExpr,method,null).findExpressionOccurrences();
  }
 else {
    occurences=CodeInsightUtil.findReferenceExpressions(method,myLocalVar);
  }
  PsiExpression expressionToRemoveParamFrom=myExpr;
  if (myExpr == null) {
    expressionToRemoveParamFrom=myLocalVar.getInitializer();
  }
  TIntArrayList parametersToRemove=expressionToRemoveParamFrom == null ? new TIntArrayList() : Util.findParametersToRemove(method,expressionToRemoveParamFrom,occurences);
  boolean mustBeFinal=false;
  if (myLocalVar != null) {
    for (    PsiExpression occurrence : occurences) {
      if (PsiTreeUtil.getParentOfType(occurrence,PsiClass.class,PsiMethod.class) != method) {
        mustBeFinal=true;
        break;
      }
    }
  }
  List<UsageInfo> localVars=new ArrayList<UsageInfo>();
  List<UsageInfo> classMemberRefs=new ArrayList<UsageInfo>();
  List<UsageInfo> params=new ArrayList<UsageInfo>();
  if (myExpr != null) {
    Util.analyzeExpression(myExpr,localVars,classMemberRefs,params);
  }
  final String propName=myLocalVar != null ? JavaCodeStyleManager.getInstance(myProject).variableNameToPropertyName(myLocalVar.getName(),VariableKind.LOCAL_VARIABLE) : null;
  final PsiType initializerType=IntroduceParameterProcessor.getInitializerType(null,myExpr,myLocalVar);
  TypeSelectorManagerImpl typeSelectorManager=myExpr != null ? new TypeSelectorManagerImpl(myProject,initializerType,myExpr,occurences) : new TypeSelectorManagerImpl(myProject,initializerType,occurences);
  NameSuggestionsGenerator nameSuggestionsGenerator=createNameSuggestionGenerator(myExpr,propName,myProject);
  boolean isInplaceAvailableOnDataContext=myEditor != null && myEditor.getSettings().isVariableInplaceRenameEnabled();
  if (myExpr != null) {
    isInplaceAvailableOnDataContext&=myExpr.isPhysical();
  }
  if (isInplaceAvailableOnDataContext) {
    myInplaceIntroduceParameterPopup=new InplaceIntroduceParameterPopup(myProject,myEditor,classMemberRefs,typeSelectorManager,myExpr,myLocalVar,method,methodToSearchFor,occurences,parametersToRemove,mustBeFinal);
    if (myInplaceIntroduceParameterPopup.startInplaceIntroduceTemplate()) {
      return;
    }
  }
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    @NonNls String parameterName="anObject";
    boolean replaceAllOccurences=true;
    boolean isDeleteLocalVariable=true;
    PsiExpression initializer=myLocalVar != null && myExpr == null ? myLocalVar.getInitializer() : myExpr;
    new IntroduceParameterProcessor(myProject,method,methodToSearchFor,initializer,myExpr,myLocalVar,isDeleteLocalVariable,parameterName,replaceAllOccurences,IntroduceParameterRefactoring.REPLACE_FIELDS_WITH_GETTERS_NONE,mustBeFinal,false,null,parametersToRemove).run();
  }
 else {
    if (myEditor != null) {
      RefactoringUtil.highlightAllOccurences(myProject,occurences,myEditor);
    }
    new IntroduceParameterDialog(myProject,classMemberRefs,occurences,myLocalVar,myExpr,nameSuggestionsGenerator,typeSelectorManager,methodToSearchFor,method,parametersToRemove,mustBeFinal).show();
    if (myEditor != null) {
      myEditor.getSelectionModel().removeSelection();
    }
  }
}
