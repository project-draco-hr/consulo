{
  if (!CommonRefactoringUtil.checkReadOnlyStatus(myProject,methodToSearchFor))   return;
  PsiExpression[] occurences;
  if (myExpr != null) {
    occurences=new ExpressionOccurrenceManager(myExpr,method,null).findExpressionOccurrences();
  }
 else {
    occurences=CodeInsightUtil.findReferenceExpressions(method,myLocalVar);
  }
  String enteredName=null;
  boolean replaceAllOccurrences=false;
  boolean delegate=false;
  PsiType initializerType=IntroduceParameterProcessor.getInitializerType(null,myExpr,myLocalVar);
  final AbstractInplaceIntroducer activeIntroducer=AbstractInplaceIntroducer.getActiveIntroducer(myEditor);
  if (activeIntroducer != null) {
    if (!(activeIntroducer instanceof InplaceIntroduceParameterPopup) || !activeIntroducer.startsOnTheSameElement(myExpr,myLocalVar)) {
      AbstractInplaceIntroducer.unableToStartWarning(myProject,myEditor,activeIntroducer);
      return;
    }
    activeIntroducer.stopIntroduce(myEditor);
    myExpr=(PsiExpression)activeIntroducer.getExpr();
    myLocalVar=(PsiLocalVariable)activeIntroducer.getLocalVariable();
    occurences=(PsiExpression[])activeIntroducer.getOccurrences();
    enteredName=activeIntroducer.getInputName();
    replaceAllOccurrences=activeIntroducer.isReplaceAllOccurrences();
    delegate=((InplaceIntroduceParameterPopup)activeIntroducer).isGenerateDelegate();
    initializerType=((AbstractJavaInplaceIntroducer)activeIntroducer).getType();
  }
  boolean mustBeFinal=false;
  for (  PsiExpression occurrence : occurences) {
    if (PsiTreeUtil.getParentOfType(occurrence,PsiClass.class,PsiMethod.class) != method) {
      mustBeFinal=true;
      break;
    }
  }
  List<UsageInfo> localVars=new ArrayList<UsageInfo>();
  List<UsageInfo> classMemberRefs=new ArrayList<UsageInfo>();
  List<UsageInfo> params=new ArrayList<UsageInfo>();
  if (myExpr != null) {
    Util.analyzeExpression(myExpr,localVars,classMemberRefs,params);
  }
  final String propName=myLocalVar != null ? JavaCodeStyleManager.getInstance(myProject).variableNameToPropertyName(myLocalVar.getName(),VariableKind.LOCAL_VARIABLE) : null;
  boolean isInplaceAvailableOnDataContext=myEditor != null && myEditor.getSettings().isVariableInplaceRenameEnabled();
  if (myExpr != null) {
    isInplaceAvailableOnDataContext&=myExpr.isPhysical();
  }
  if (isInplaceAvailableOnDataContext && activeIntroducer == null) {
    myInplaceIntroduceParameterPopup=new InplaceIntroduceParameterPopup(myProject,myEditor,classMemberRefs,createTypeSelectorManager(occurences,initializerType),myExpr,myLocalVar,method,methodToSearchFor,occurences,getParamsToRemove(method,occurences),mustBeFinal);
    if (myInplaceIntroduceParameterPopup.startInplaceIntroduceTemplate()) {
      return;
    }
  }
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    @NonNls String parameterName="anObject";
    boolean replaceAllOccurences=true;
    boolean isDeleteLocalVariable=true;
    PsiExpression initializer=myLocalVar != null && myExpr == null ? myLocalVar.getInitializer() : myExpr;
    new IntroduceParameterProcessor(myProject,method,methodToSearchFor,initializer,myExpr,myLocalVar,isDeleteLocalVariable,parameterName,replaceAllOccurences,IntroduceParameterRefactoring.REPLACE_FIELDS_WITH_GETTERS_NONE,mustBeFinal,false,null,getParamsToRemove(method,occurences)).run();
  }
 else {
    if (myEditor != null) {
      RefactoringUtil.highlightAllOccurrences(myProject,occurences,myEditor);
    }
    final IntroduceParameterDialog dialog=new IntroduceParameterDialog(myProject,classMemberRefs,occurences,myLocalVar,myExpr,createNameSuggestionGenerator(myExpr,propName,myProject,enteredName),createTypeSelectorManager(occurences,initializerType),methodToSearchFor,method,getParamsToRemove(method,occurences),mustBeFinal);
    dialog.setReplaceAllOccurrences(replaceAllOccurrences);
    dialog.setGenerateDelegate(delegate);
    dialog.show();
    if (myEditor != null) {
      myEditor.getSelectionModel().removeSelection();
    }
  }
}
