{
  LOG.assertTrue(!PsiDocumentManager.getInstance(project).hasUncommitedDocuments());
  PsiMethod method;
  if (expr != null) {
    final PsiElement physicalElement=expr.getUserData(ElementToWorkOn.PARENT);
    method=Util.getContainingMethod(physicalElement != null ? physicalElement : expr);
  }
 else {
    method=Util.getContainingMethod(localVar);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("expression:" + expr);
  }
  myProject=project;
  if (expr == null && localVar == null) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("selected.block.should.represent.an.expression"));
    showErrorMessage(myProject,message,editor);
    return false;
  }
  if (method == null) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("is.not.supported.in.the.current.context",REFACTORING_NAME));
    showErrorMessage(myProject,message,editor);
    return false;
  }
  if (!CommonRefactoringUtil.checkReadOnlyStatus(project,method))   return false;
  final PsiType typeByExpression=invokedOnDeclaration ? null : RefactoringUtil.getTypeByExpressionWithExpectedType(expr);
  if (!invokedOnDeclaration && typeByExpression == null) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("type.of.the.selected.expression.cannot.be.determined"));
    showErrorMessage(myProject,message,editor);
    return false;
  }
  if (!invokedOnDeclaration && PsiType.VOID.equals(typeByExpression)) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("selected.expression.has.void.type"));
    showErrorMessage(project,message,editor);
    return false;
  }
  final List<PsiMethod> validEnclosingMethods=getEnclosingMethods(method);
  if (validEnclosingMethods.isEmpty()) {
    return false;
  }
  final Introducer introducer=new Introducer(project,expr,localVar,editor);
  final boolean unitTestMode=ApplicationManager.getApplication().isUnitTestMode();
  if (validEnclosingMethods.size() == 1 || unitTestMode) {
    if (validEnclosingMethods.get(0).findDeepestSuperMethod() == null || unitTestMode) {
      introducer.introduceParameter(method,method);
      return true;
    }
  }
  chooseMethodToIntroduceParameter(editor,validEnclosingMethods,introducer);
  return true;
}
