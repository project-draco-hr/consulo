{
  final JPanel panel=new JPanel(new BorderLayout());
  final JCheckBox superMethod=new JCheckBox("Use super method of",true);
  superMethod.setMnemonic('U');
  panel.add(superMethod,BorderLayout.SOUTH);
  final JBList list=new JBList(validEnclosingMethods.toArray());
  list.setCellRenderer(new MethodCellRenderer());
  list.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  list.setSelectedIndex(0);
  final List<RangeHighlighter> highlighters=new ArrayList<RangeHighlighter>();
  final TextAttributes attributes=EditorColorsManager.getInstance().getGlobalScheme().getAttributes(EditorColors.SEARCH_RESULT_ATTRIBUTES);
  list.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    final ListSelectionEvent e){
      final PsiMethod selectedMethod=(PsiMethod)list.getSelectedValue();
      if (selectedMethod == null)       return;
      dropHighlighters(highlighters);
      updateView(selectedMethod,editor,attributes,highlighters,superMethod);
    }
  }
);
  updateView(validEnclosingMethods.get(0),editor,attributes,highlighters,superMethod);
  final JScrollPane scrollPane=ScrollPaneFactory.createScrollPane(list);
  scrollPane.setBorder(null);
  panel.add(scrollPane,BorderLayout.CENTER);
  final List<Pair<ActionListener,KeyStroke>> keyboardActions=Collections.singletonList(Pair.<ActionListener,KeyStroke>create(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      final PsiMethod methodToSearchIn=(PsiMethod)list.getSelectedValue();
      if (myEnclosingMethodsPopup != null && myEnclosingMethodsPopup.isVisible()) {
        myEnclosingMethodsPopup.cancel();
      }
      final PsiMethod methodToSearchFor=superMethod.isEnabled() && superMethod.isSelected() ? methodToSearchIn.findDeepestSuperMethod() : methodToSearchIn;
      Runnable runnable=new Runnable(){
        public void run(){
          introducer.introduceParameter(methodToSearchIn,methodToSearchFor);
        }
      }
;
      IdeFocusManager.findInstance().doWhenFocusSettlesDown(runnable);
    }
  }
,KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0)));
  myEnclosingMethodsPopup=JBPopupFactory.getInstance().createComponentPopupBuilder(panel,list).setTitle("Introduce parameter to method").setMovable(false).setResizable(false).setRequestFocus(true).setKeyboardActions(keyboardActions).addListener(new JBPopupAdapter(){
    @Override public void onClosed(    LightweightWindowEvent event){
      dropHighlighters(highlighters);
    }
  }
).createPopup();
  myEnclosingMethodsPopup.showInBestPositionFor(editor);
}
