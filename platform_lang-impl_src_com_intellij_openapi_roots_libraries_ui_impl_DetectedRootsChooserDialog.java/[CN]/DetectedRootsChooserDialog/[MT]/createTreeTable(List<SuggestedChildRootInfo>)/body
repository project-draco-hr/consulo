{
  final CheckedTreeNode root=createRoot(suggestedRoots);
  CheckboxTreeTable treeTable=new CheckboxTreeTable(root,new CheckboxTree.CheckboxTreeCellRenderer(true){
    public void customizeRenderer(    JTree tree,    Object value,    boolean selected,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      if (!(value instanceof VirtualFileCheckedTreeNode))       return;
      VirtualFileCheckedTreeNode node=(VirtualFileCheckedTreeNode)value;
      VirtualFile file=node.getFile();
      String text;
      SimpleTextAttributes attributes;
      Icon icon;
      boolean isValid=true;
      if (leaf) {
        VirtualFile ancestor=((VirtualFileCheckedTreeNode)node.getParent()).getFile();
        if (ancestor != null) {
          text=VfsUtilCore.getRelativePath(file,ancestor,File.separatorChar);
          if (StringUtil.isEmpty(text)) {
            text=File.separator;
          }
        }
 else {
          text=file.getPresentableUrl();
        }
        if (text == null) {
          isValid=false;
          text=file.getPresentableUrl();
        }
        attributes=SimpleTextAttributes.REGULAR_ATTRIBUTES;
        icon=PlatformIcons.DIRECTORY_CLOSED_ICON;
      }
 else {
        text=file.getPresentableUrl();
        if (text == null) {
          isValid=false;
        }
        attributes=SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES;
        icon=PlatformIcons.DIRECTORY_CLOSED_ICON;
      }
      final ColoredTreeCellRenderer textRenderer=getTextRenderer();
      textRenderer.setIcon(icon);
      if (!isValid) {
        textRenderer.append("[INVALID] ",SimpleTextAttributes.ERROR_ATTRIBUTES);
      }
      if (text != null) {
        textRenderer.append(text,attributes);
      }
    }
  }
,new ColumnInfo[]{ROOT_COLUMN,ROOT_TYPE_COLUMN});
  int max=0;
  for (  SuggestedChildRootInfo info : suggestedRoots) {
    for (    String s : info.getRootTypeNames()) {
      max=Math.max(max,treeTable.getFontMetrics(treeTable.getFont()).stringWidth(s));
    }
  }
  final TableColumn column=treeTable.getColumnModel().getColumn(1);
  int width=max + 20;
  column.setPreferredWidth(width);
  column.setMaxWidth(width);
  treeTable.setRootVisible(false);
  TreeUtil.expandAll(treeTable.getTree());
  return treeTable;
}
