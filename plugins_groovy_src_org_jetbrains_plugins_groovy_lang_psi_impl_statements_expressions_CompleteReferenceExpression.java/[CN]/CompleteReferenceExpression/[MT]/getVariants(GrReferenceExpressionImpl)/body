{
  Object[] propertyVariants=getVariantsImpl(refExpr,GrReferenceExpressionImpl.getMethodOrPropertyResolveProcessor(refExpr,null,true,true));
  PsiElement parent=refExpr.getParent();
  if (parent instanceof GrArgumentList) {
    GrExpression call=(GrExpression)parent.getParent();
    PsiType type=call.getType();
    if (type instanceof PsiClassType) {
      PsiClass clazz=((PsiClassType)type).resolve();
      if (clazz != null) {
        List<LookupElement> props=new ArrayList<LookupElement>();
        final LookupElementFactory factory=LookupElementFactory.getInstance();
        final PsiClass eventListener=refExpr.getManager().findClass("java.util.EventListener",refExpr.getResolveScope());
        for (        PsiMethod method : clazz.getAllMethods()) {
          if (PsiUtil.isSimplePropertySetter(method)) {
            String prop=PropertyUtil.getPropertyName(method);
            if (prop != null) {
              props.add(factory.createLookupElement(prop).setIcon(Icons.PROPERTY));
            }
          }
 else           if (eventListener != null) {
            addListenerProperties(method,eventListener,props,factory);
          }
        }
        if (props.size() > 0) {
          propertyVariants=ArrayUtil.mergeArrays(propertyVariants,props.toArray(new Object[props.size()]),Object.class);
        }
        propertyVariants=ArrayUtil.mergeArrays(propertyVariants,clazz.getFields(),Object.class);
      }
    }
  }
  if (refExpr.getKind() == GrReferenceExpressionImpl.Kind.TYPE_OR_PROPERTY) {
    ResolverProcessor classVariantsCollector=new ResolverProcessor(null,EnumSet.of(ClassHint.ResolveKind.CLASS_OR_PACKAGE),refExpr,true,PsiType.EMPTY_ARRAY);
    getVariantsImpl(refExpr,classVariantsCollector);
    GroovyResolveResult[] classVariants=classVariantsCollector.getCandidates();
    return ArrayUtil.mergeArrays(propertyVariants,ResolveUtil.mapToElements(classVariants),Object.class);
  }
  return propertyVariants;
}
