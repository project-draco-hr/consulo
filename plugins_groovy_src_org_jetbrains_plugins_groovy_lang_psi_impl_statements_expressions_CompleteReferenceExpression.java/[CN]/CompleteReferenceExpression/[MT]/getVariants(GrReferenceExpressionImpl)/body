{
  PsiElement refParent=refExpr.getParent();
  List<String> namedArgsVariants=getNamedArgsVariants(refParent);
  final GrExpression qualifier=refExpr.getQualifierExpression();
  Object[] propertyVariants=getVariantsImpl(refExpr,CompletionProcessor.createPropertyCompletionProcessor(refExpr));
  PsiType type=null;
  if (qualifier == null) {
    if (refParent instanceof GrArgumentList) {
      final PsiElement argList=refParent.getParent();
      if (argList instanceof GrExpression) {
        GrExpression call=(GrExpression)argList;
        type=call.getType();
      }
    }
  }
 else {
    type=qualifier.getType();
  }
  if (type instanceof PsiClassType) {
    PsiClass clazz=((PsiClassType)type).resolve();
    if (clazz != null) {
      Set<String> accessedPropertyNames=new THashSet<String>();
      List<Object> variantList=new ArrayList<Object>(getPropertyVariants(refExpr,clazz,accessedPropertyNames));
      for (      Object variant : propertyVariants) {
        if (variant instanceof PsiField && accessedPropertyNames.contains(((PsiField)variant).getName())) {
          continue;
        }
        variantList.add(variant);
      }
      propertyVariants=variantList.toArray(new Object[variantList.size()]);
    }
  }
  propertyVariants=ArrayUtil.mergeArrays(propertyVariants,namedArgsVariants.toArray(new Object[namedArgsVariants.size()]),Object.class);
  if (refExpr.getKind() == GrReferenceExpressionImpl.Kind.TYPE_OR_PROPERTY) {
    ResolverProcessor classVariantsCollector=CompletionProcessor.createClassCompletionProcessor(refExpr);
    final Object[] classVariants=getVariantsImpl(refExpr,classVariantsCollector);
    return ArrayUtil.mergeArrays(propertyVariants,classVariants,Object.class);
  }
 else {
    return propertyVariants;
  }
}
