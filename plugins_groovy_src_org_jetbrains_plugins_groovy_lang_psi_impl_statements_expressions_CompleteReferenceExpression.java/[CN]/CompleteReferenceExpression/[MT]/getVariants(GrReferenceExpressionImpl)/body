{
  PsiElement refParent=refExpr.getParent();
  List<String> namedArgsVariants=new LinkedList<String>();
  if (refParent instanceof GrArgumentList) {
    PsiElement refPParent=refParent.getParent();
    if (refPParent instanceof GrCall) {
      GroovyResolveResult[] results=new GroovyResolveResult[0];
      if (refPParent instanceof GrConstructorCall) {
        GrConstructorCall constructorCall=(GrConstructorCall)refPParent;
        results=ArrayUtil.mergeArrays(results,constructorCall.multiResolveConstructor(),GroovyResolveResult.class);
      }
 else       if (refPParent instanceof GrCallExpression) {
        GrCallExpression constructorCall=(GrCallExpression)refPParent;
        results=ArrayUtil.mergeArrays(results,constructorCall.getMethodVariants(),GroovyResolveResult.class);
      }
 else       if (refPParent instanceof GrApplicationStatementImpl) {
        GrApplicationStatementImpl constructorCall=(GrApplicationStatementImpl)refPParent;
        results=ArrayUtil.mergeArrays(results,constructorCall.getReferenceElement().multiResolve(true),GroovyResolveResult.class);
      }
      for (      GroovyResolveResult result : results) {
        PsiElement element=result.getElement();
        if (element instanceof GrMethod) {
          Set<String>[] parametersArray=((GrMethod)element).getNamedParametersArray();
          for (          Set<String> namedParameters : parametersArray) {
            namedArgsVariants.addAll(namedParameters);
          }
        }
      }
    }
  }
  final GrExpression qualifier=refExpr.getQualifierExpression();
  if (isGspNamespaceQualifier(qualifier)) {
    return new Object[0];
  }
  Object[] propertyVariants=getVariantsImpl(refExpr,CompletionProcessor.createPropertyCompletionProcessor(refExpr));
  PsiType type=null;
  if (qualifier == null) {
    PsiElement parent=refParent;
    if (parent instanceof GrArgumentList) {
      final PsiElement pparent=parent.getParent();
      if (pparent instanceof GrExpression) {
        GrExpression call=(GrExpression)pparent;
        type=call.getType();
      }
    }
  }
 else {
    type=qualifier.getType();
  }
  if (type instanceof PsiClassType) {
    PsiClass clazz=((PsiClassType)type).resolve();
    if (clazz != null) {
      List<LookupElement> props=getPropertyVariants(refExpr,clazz);
      if (props.size() > 0) {
        propertyVariants=ArrayUtil.mergeArrays(propertyVariants,props.toArray(new Object[props.size()]),Object.class);
      }
      propertyVariants=ArrayUtil.mergeArrays(propertyVariants,clazz.getFields(),Object.class);
    }
  }
  propertyVariants=ArrayUtil.mergeArrays(propertyVariants,namedArgsVariants.toArray(new Object[namedArgsVariants.size()]),Object.class);
  if (refExpr.getKind() == GrReferenceExpressionImpl.Kind.TYPE_OR_PROPERTY) {
    ResolverProcessor classVariantsCollector=CompletionProcessor.createClassCompletionProcessor(refExpr);
    final Object[] classVariants=getVariantsImpl(refExpr,classVariantsCollector);
    return ArrayUtil.mergeArrays(propertyVariants,classVariants,Object.class);
  }
 else {
    return propertyVariants;
  }
}
