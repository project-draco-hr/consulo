{
  List<LookupElement> result=new ArrayList<LookupElement>();
  for (  GroovyResolveResult resolveResult : elements) {
    PsiElement element=resolveResult.getElement();
    if (element instanceof PsiMethod && !(element instanceof GrAccessorMethod)) {
      PsiMethod method=(PsiMethod)element;
      String propName=null;
      PsiType propType=null;
      if (isSimplePropertyGetter(method,null,resolveResult.getCurrentFileResolveContext() instanceof GrMethodCallExpression)) {
        propName=getPropertyNameByGetter(method);
        propType=PsiUtil.getSmartReturnType(method);
      }
 else       if (isSimplePropertySetter(method,null,resolveResult.getCurrentFileResolveContext() instanceof GrMethodCallExpression)) {
        propName=getPropertyName(method);
        propType=method.getParameterList().getParameters()[0].getType();
      }
      if (propName != null) {
        LookupElementBuilder builder=createPropertyLookupElement(propName,propType,resolveResult.getSubstitutor());
        result.add(builder);
      }
    }
  }
  return result.toArray(new LookupElement[result.size()]);
}
