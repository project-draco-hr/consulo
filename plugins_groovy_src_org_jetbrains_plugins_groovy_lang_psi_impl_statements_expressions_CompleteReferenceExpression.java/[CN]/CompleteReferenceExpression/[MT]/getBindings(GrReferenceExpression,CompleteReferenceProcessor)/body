{
  final PsiClass containingClass=PsiTreeUtil.getParentOfType(refExpr,PsiClass.class);
  if (containingClass != null)   return;
  final PsiFile file=refExpr.getContainingFile();
  if (file instanceof GroovyFile) {
    ((GroovyFile)file).accept(new GroovyRecursiveElementVisitor(){
      @Override public void visitAssignmentExpression(      GrAssignmentExpression expression){
        super.visitAssignmentExpression(expression);
        final GrExpression value=expression.getLValue();
        if (value instanceof GrReferenceExpression && !((GrReferenceExpression)value).isQualified()) {
          final PsiElement resolved=((GrReferenceExpression)value).resolve();
          if (resolved instanceof GrBindingVariable) {
            processor.execute(resolved,ResolveState.initial());
          }
 else           if (resolved == null) {
            processor.execute(new GrBindingVariable((GroovyFile)file,((GrReferenceExpression)value).getReferenceName(),true),ResolveState.initial());
          }
        }
      }
      @Override public void visitTypeDefinition(      GrTypeDefinition typeDefinition){
      }
    }
);
  }
}
