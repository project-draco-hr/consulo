{
  if (element instanceof GrReferenceExpression && element != patternExpression && !PsiUtil.isLValue((GroovyPsiElement)element)) {
    final GrReferenceExpression refExpr=(GrReferenceExpression)element;
    final String refName=refExpr.getReferenceName();
    if (refName != null && !result.contains(refName)) {
      final GrExpression hisQualifier=refExpr.getQualifierExpression();
      if (hisQualifier != null && patternQualifier != null) {
        if (PsiEquivalenceUtil.areElementsEquivalent(hisQualifier,patternQualifier)) {
          if (refExpr.resolve() == null) {
            result.add(refName);
            processor.consume(refName);
          }
        }
      }
 else       if (hisQualifier == null && patternQualifier == null) {
        if (refExpr.resolve() == null) {
          result.add(refName);
          processor.consume(refName);
        }
      }
    }
  }
  for (PsiElement child=element.getFirstChild(); child != null; child=child.getNextSibling()) {
    addVariantsWithSameQualifier(child,patternExpression,patternQualifier,result,processor);
  }
}
