{
  GrExpression qualifier=refExpr.getQualifierExpression();
  if (qualifier == null) {
    ResolveUtil.treeWalkUp(refExpr,processor,true);
    for (PsiElement e=refExpr.getParent(); e != null; e=e.getParent()) {
      if (e instanceof GrClosableBlock) {
        ResolveState state=ResolveState.initial().put(ResolverProcessor.RESOLVE_CONTEXT,(GrClosableBlock)e);
        for (        ClosureMissingMethodContributor contributor : ClosureMissingMethodContributor.EP_NAME.getExtensions()) {
          contributor.processMembers((GrClosableBlock)e,processor,refExpr,state);
        }
      }
    }
    qualifier=PsiImplUtil.getRuntimeQualifier(refExpr);
    if (qualifier != null) {
      getVariantsFromQualifier(refExpr,processor,qualifier);
    }
  }
 else {
    if (refExpr.getDotTokenType() != GroovyTokenTypes.mSPREAD_DOT) {
      getVariantsFromQualifier(refExpr,processor,qualifier);
      if (qualifier instanceof GrReferenceExpression && "class".equals(((GrReferenceExpression)qualifier).getReferenceName()) || qualifier instanceof GrThisReferenceExpression) {
        processIfJavaLangClass(refExpr,processor,qualifier.getType());
      }
    }
 else {
      getVariantsFromQualifierForSpreadOperator(refExpr,processor,qualifier);
    }
  }
  ResolveUtil.processCategoryMembers(refExpr,processor,ResolveState.initial());
}
