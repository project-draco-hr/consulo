{
  Project project=qualifier.getProject();
  PsiType qualifierType=qualifier.getType();
  if (qualifierType == null) {
    if (qualifier instanceof GrReferenceExpression) {
      PsiElement resolved=((GrReferenceExpression)qualifier).resolve();
      if (resolved instanceof PsiPackage) {
        resolved.processDeclarations(processor,PsiSubstitutor.EMPTY,null,refExpr);
        return;
      }
    }
    final PsiClassType type=refExpr.getManager().getElementFactory().createTypeByFQClassName(GrTypeDefinition.DEFAULT_BASE_CLASS_NAME,refExpr.getResolveScope());
    getVariantsFromQualifierType(refExpr,processor,type,project);
  }
 else {
    if (qualifierType instanceof PsiIntersectionType) {
      for (      PsiType conjunct : ((PsiIntersectionType)qualifierType).getConjuncts()) {
        getVariantsFromQualifierType(refExpr,processor,conjunct,project);
      }
    }
 else {
      getVariantsFromQualifierType(refExpr,processor,qualifierType,project);
      if (qualifier instanceof GrReferenceExpression) {
        PsiElement resolved=((GrReferenceExpression)qualifier).resolve();
        if (resolved instanceof PsiClass) {
          GlobalSearchScope scope=refExpr.getResolveScope();
          PsiClass javaLangClass=PsiUtil.getJavaLangClass(resolved,scope);
          if (javaLangClass != null) {
            PsiSubstitutor substitutor=PsiSubstitutor.EMPTY;
            PsiTypeParameter[] typeParameters=javaLangClass.getTypeParameters();
            if (typeParameters.length == 1) {
              substitutor=substitutor.put(typeParameters[0],qualifierType);
            }
            javaLangClass.processDeclarations(processor,substitutor,null,refExpr);
            PsiType javaLangClassType=refExpr.getManager().getElementFactory().createType(javaLangClass,substitutor);
            ResolveUtil.processNonCodeMethods(javaLangClassType,processor,refExpr.getProject());
          }
        }
      }
    }
  }
}
