{
  Project project=qualifier.getProject();
  PsiType qualifierType=qualifier.getType();
  final ResolveState state=ResolveState.initial();
  if (qualifierType == null || qualifierType == PsiType.VOID) {
    if (qualifier instanceof GrReferenceExpression) {
      PsiElement resolved=((GrReferenceExpression)qualifier).resolve();
      if (resolved instanceof PsiPackage || resolved instanceof PsiVariable) {
        resolved.processDeclarations(processor,state,null,refExpr);
        return;
      }
    }
    getVariantsFromQualifierType(refExpr,processor,PsiType.getJavaLangObject(refExpr.getManager(),qualifier.getResolveScope()),project);
  }
 else   if (qualifierType instanceof PsiIntersectionType) {
    for (    PsiType conjunct : ((PsiIntersectionType)qualifierType).getConjuncts()) {
      getVariantsFromQualifierType(refExpr,processor,conjunct,project);
    }
  }
 else {
    getVariantsFromQualifierType(refExpr,processor,qualifierType,project);
    if (qualifier instanceof GrReferenceExpression) {
      PsiElement resolved=((GrReferenceExpression)qualifier).resolve();
      if (resolved instanceof PsiClass) {
        GlobalSearchScope scope=refExpr.getResolveScope();
        PsiClass javaLangClass=PsiUtil.getJavaLangClass(resolved,scope);
        if (javaLangClass != null) {
          PsiSubstitutor substitutor=PsiSubstitutor.EMPTY;
          PsiTypeParameter[] typeParameters=javaLangClass.getTypeParameters();
          if (typeParameters.length == 1) {
            substitutor=substitutor.put(typeParameters[0],qualifierType);
          }
          PsiType javaLangClassType=JavaPsiFacade.getElementFactory(refExpr.getProject()).createType(javaLangClass,substitutor);
          ResolveUtil.processAllDeclarations(javaLangClassType,processor,state,refExpr);
        }
      }
    }
  }
}
