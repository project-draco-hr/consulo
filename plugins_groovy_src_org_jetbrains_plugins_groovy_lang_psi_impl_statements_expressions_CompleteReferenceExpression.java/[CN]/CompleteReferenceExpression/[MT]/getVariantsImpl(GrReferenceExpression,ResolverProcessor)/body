{
  GrExpression qualifier=refExpr.getQualifierExpression();
  String[] sameQualifier=getVariantsWithSameQualifier(qualifier,refExpr);
  if (qualifier == null) {
    ResolveUtil.treeWalkUp(refExpr,processor,true);
    for (PsiElement e=refExpr.getParent(); e != null; e=e.getParent()) {
      if (e instanceof GrClosableBlock) {
        ResolveState state=ResolveState.initial().put(ResolverProcessor.RESOLVE_CONTEXT,(GrClosableBlock)e);
        for (        ClosureMissingMethodContributor contributor : ClosureMissingMethodContributor.EP_NAME.getExtensions()) {
          contributor.processMembers((GrClosableBlock)e,processor,refExpr,state);
        }
      }
    }
    qualifier=PsiImplUtil.getRuntimeQualifier(refExpr);
    if (qualifier != null) {
      getVariantsFromQualifier(refExpr,processor,qualifier);
    }
  }
 else {
    if (refExpr.getDotTokenType() != GroovyTokenTypes.mSPREAD_DOT) {
      getVariantsFromQualifier(refExpr,processor,qualifier);
      if (qualifier instanceof GrReferenceExpression && "class".equals(((GrReferenceExpression)qualifier).getReferenceName())) {
        processIfJavaLangClass(refExpr,processor,qualifier.getType());
      }
 else       if (qualifier instanceof GrThisReferenceExpression) {
        processIfJavaLangClass(refExpr,processor,qualifier.getType());
      }
    }
 else {
      getVariantsFromQualifierForSpreadOperator(refExpr,processor,qualifier);
    }
  }
  GroovyResolveResult[] candidates=processor.getCandidates();
  if (candidates.length == 0 && sameQualifier.length == 0)   return PsiNamedElement.EMPTY_ARRAY;
  candidates=filterStaticsOK(candidates);
  if (qualifier == null) {
    List<GroovyResolveResult> nonPackages=ContainerUtil.findAll(candidates,new Condition<GroovyResolveResult>(){
      public boolean value(      final GroovyResolveResult result){
        return !(result.getElement() instanceof PsiPackage);
      }
    }
);
    candidates=nonPackages.toArray(new GroovyResolveResult[nonPackages.size()]);
  }
  LookupElement[] propertyLookupElements=addPretendedProperties(candidates);
  List<Object> variants=GroovyCompletionUtil.getCompletionVariants(candidates);
  variants.addAll(Arrays.asList(propertyLookupElements));
  variants.addAll(Arrays.asList(sameQualifier));
  return variants.toArray(new Object[variants.size()]);
}
