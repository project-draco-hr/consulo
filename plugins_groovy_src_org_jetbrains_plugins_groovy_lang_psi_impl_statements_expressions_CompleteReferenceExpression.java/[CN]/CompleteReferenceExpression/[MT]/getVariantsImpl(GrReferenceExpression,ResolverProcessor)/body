{
  GrExpression qualifier=refExpr.getQualifierExpression();
  String[] sameQualifier=getVariantsWithSameQualifier(qualifier,refExpr);
  if (qualifier == null) {
    ResolveUtil.treeWalkUp(refExpr,processor);
    PsiClass contextClass=PsiUtil.getContextClass(refExpr);
    if (contextClass != null) {
      PsiClassType classType=refExpr.getManager().getElementFactory().createType(contextClass);
      ResolveUtil.processNonCodeMethods(classType,processor,refExpr.getProject());
    }
    qualifier=PsiImplUtil.getRuntimeQualifier(refExpr);
    if (qualifier != null) {
      getVariantsFromQualifier(refExpr,processor,qualifier);
    }
  }
 else {
    if (refExpr.getDotTokenType() != GroovyTokenTypes.mSPREAD_DOT) {
      getVariantsFromQualifier(refExpr,processor,qualifier);
    }
 else {
      getVariantsFromQualifierForSpreadOperator(refExpr,processor,qualifier);
    }
  }
  GroovyResolveResult[] candidates=processor.getCandidates();
  if (candidates.length == 0 && sameQualifier.length == 0)   return PsiNamedElement.EMPTY_ARRAY;
  candidates=filterStaticsOK(candidates);
  PsiElement[] elements=ResolveUtil.mapToElements(candidates);
  LookupElement[] propertyLookupElements=addPretendedProperties(elements);
  Object[] variants=GroovyCompletionUtil.getCompletionVariants(candidates);
  variants=ArrayUtil.mergeArrays(variants,propertyLookupElements,Object.class);
  return ArrayUtil.mergeArrays(variants,sameQualifier,Object.class);
}
