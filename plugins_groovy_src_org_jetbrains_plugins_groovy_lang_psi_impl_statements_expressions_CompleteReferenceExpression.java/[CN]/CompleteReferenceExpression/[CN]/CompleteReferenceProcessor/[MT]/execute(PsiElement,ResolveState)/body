{
  if (element instanceof PsiMethod && ((PsiMethod)element).isConstructor())   return true;
  if (element instanceof PsiNamedElement) {
    PsiNamedElement namedElement=(PsiNamedElement)element;
    boolean isAccessible=isAccessible(namedElement);
    final PsiElement resolveContext=state.get(RESOLVE_CONTEXT);
    final SpreadState spreadState=state.get(SpreadState.SPREAD_STATE);
    boolean isStaticsOK=isStaticsOK(namedElement,resolveContext,myParameters.getInvocationCount() <= 1);
    PsiSubstitutor substitutor=state.get(PsiSubstitutor.KEY);
    if (substitutor == null)     substitutor=PsiSubstitutor.EMPTY;
    if (element instanceof PsiMethod) {
      substitutor=mySubstitutorComputer.obtainSubstitutor(substitutor,(PsiMethod)element,state);
    }
    consume(new GroovyResolveResultImpl(namedElement,resolveContext,spreadState,substitutor,isAccessible,isStaticsOK));
  }
  return true;
}
