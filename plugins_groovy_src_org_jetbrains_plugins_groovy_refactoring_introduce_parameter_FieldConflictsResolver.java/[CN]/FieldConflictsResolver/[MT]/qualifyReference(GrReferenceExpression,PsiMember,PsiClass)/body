{
  PsiManager manager=referenceExpression.getManager();
  GrReferenceExpression expressionFromText;
  final GroovyPsiElementFactory factory=GroovyPsiElementFactory.getInstance(referenceExpression.getProject());
  if (qualifyingClass == null) {
    PsiClass parentClass=PsiTreeUtil.getParentOfType(referenceExpression,PsiClass.class);
    final PsiClass containingClass=member.getContainingClass();
    if (parentClass != null && !InheritanceUtil.isInheritorOrSelf(parentClass,containingClass,true)) {
      while (parentClass != null && !InheritanceUtil.isInheritorOrSelf(parentClass,containingClass,true)) {
        parentClass=PsiTreeUtil.getParentOfType(parentClass,PsiClass.class,true);
      }
      LOG.assertTrue(parentClass != null);
      expressionFromText=factory.createReferenceExpressionFromText("A.this." + member.getName());
      ((GrThisReferenceExpression)expressionFromText.getQualifier()).getQualifier().replace(factory.createReferenceElementForClass(parentClass));
    }
 else {
      expressionFromText=(GrReferenceExpression)factory.createExpressionFromText("this." + member.getName());
    }
  }
 else {
    expressionFromText=(GrReferenceExpression)factory.createExpressionFromText("A." + member.getName());
    expressionFromText.setQualifier(factory.createReferenceElementForClass(qualifyingClass));
  }
  CodeStyleManager codeStyleManager=manager.getCodeStyleManager();
  expressionFromText=(GrReferenceExpression)codeStyleManager.reformat(expressionFromText);
  return (GrReferenceExpression)referenceExpression.replace(expressionFromText);
}
