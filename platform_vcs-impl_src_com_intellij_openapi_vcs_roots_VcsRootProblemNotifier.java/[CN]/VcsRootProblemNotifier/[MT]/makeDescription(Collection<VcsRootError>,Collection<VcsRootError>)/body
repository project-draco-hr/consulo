{
  Function<VcsRootError,String> rootToDisplayableString=new Function<VcsRootError,String>(){
    @Override public String fun(    VcsRootError rootError){
      if (rootError.getMapping().equals(VcsDirectoryMapping.PROJECT_CONSTANT)) {
        return StringUtil.escapeXml(rootError.getMapping());
      }
      return FileUtil.toSystemDependentName(rootError.getMapping());
    }
  }
;
  StringBuilder description=new StringBuilder();
  if (!invalidRoots.isEmpty()) {
    if (invalidRoots.size() == 1) {
      VcsRootError rootError=invalidRoots.iterator().next();
      description.append("The directory " + rootToDisplayableString.fun(rootError) + " is registered as a "+ rootError.getVcsKey().getName()+ " root, "+ "but no "+ rootError.getVcsKey().getName()+ " repositories were found there.");
    }
 else {
      description.append("The following directories are registered as Vcs roots, but they are not: <br/>" + StringUtil.join(invalidRoots,rootToDisplayableString,", "));
    }
    description.append("<br/>");
  }
  if (!unregisteredRoots.isEmpty()) {
    if (unregisteredRoots.size() == 1) {
      VcsRootError unregisteredRoot=unregisteredRoots.iterator().next();
      description.append("The directory " + rootToDisplayableString.fun(unregisteredRoot) + " is under "+ unregisteredRoot.getVcsKey().getName()+ ", "+ "but is not registered in the Settings.");
    }
 else {
      description.append("The following directories are roots of Vcs repositories, but they are not registered in the Settings: <br/>" + StringUtil.join(unregisteredRoots,rootToDisplayableString,", "));
    }
    description.append("<br/>");
  }
  description.append("<a href='configure'>Configure</a>&nbsp;&nbsp;<a href='ignore'>Ignore VCS root errors</a>");
  return description.toString();
}
