{
  SvnConfiguration configuration=SvnConfiguration.getInstance(myProject);
  configuration.setConfigurationDirectory(myConfigurationDirectoryText.getText());
  configuration.setUseDefaultConfiguation(myUseDefaultCheckBox.isSelected());
  configuration.setIsUseDefaultProxy(myUseCommonProxy.isSelected());
  if ((!configuration.DETECT_NESTED_COPIES) && (configuration.DETECT_NESTED_COPIES != myDetectNestedWorkingCopiesCheckBox.isSelected())) {
    SvnVcs.getInstance(myProject).invokeRefreshSvnRoots(true);
  }
  configuration.DETECT_NESTED_COPIES=myDetectNestedWorkingCopiesCheckBox.isSelected();
  configuration.CHECK_NESTED_FOR_QUICK_MERGE=myCheckNestedInQuickMerge.isSelected();
  configuration.UPDATE_LOCK_ON_DEMAND=myLockOnDemand.isSelected();
  configuration.setIgnoreSpacesInAnnotate(myIgnoreWhitespaceDifferenciesInCheckBox.isSelected());
  configuration.SHOW_MERGE_SOURCES_IN_ANNOTATE=myShowMergeSourceInAnnotate.isSelected();
  if (!myMaximumNumberOfRevisionsCheckBox.isSelected()) {
    configuration.setMaxAnnotateRevisions(-1);
  }
 else {
    configuration.setMaxAnnotateRevisions(((SpinnerNumberModel)myNumRevsInAnnotations.getModel()).getNumber().intValue());
  }
  configuration.mySSHConnectionTimeout=((SpinnerNumberModel)mySSHConnectionTimeout.getModel()).getNumber().longValue() * 1000;
  configuration.mySSHReadTimeout=((SpinnerNumberModel)mySSHReadTimeout.getModel()).getNumber().longValue() * 1000;
}
