{
  final PsiShortNamesCache cache=PsiShortNamesCache.getInstance(parameters.getProject());
  final String[] names=ApplicationManager.getApplication().runReadAction(new Computable<String[]>(){
    @Override public String[] compute(){
      return cache.getAllClassNames();
    }
  }
);
  final ProgressIndicator indicator=ProgressIndicatorProvider.getInstance().getProgressIndicator();
  if (indicator != null) {
    indicator.checkCanceled();
  }
  List<String> sorted=new ArrayList<String>(names.length);
  for (int i=0; i < names.length; i++) {
    String name=names[i];
    if (parameters.nameMatches(name)) {
      sorted.add(name);
    }
    if (indicator != null && i % 512 == 0) {
      indicator.checkCanceled();
    }
  }
  if (indicator != null) {
    indicator.checkCanceled();
  }
  Collections.sort(sorted,new Comparator<String>(){
    @Override public int compare(    final String o1,    final String o2){
      return o1.compareToIgnoreCase(o2);
    }
  }
);
  for (  final String name : sorted) {
    ProgressIndicatorProvider.checkCanceled();
    final PsiClass[] classes=ApplicationManager.getApplication().runReadAction(new Computable<PsiClass[]>(){
      @Override public PsiClass[] compute(){
        return cache.getClassesByName(name,scope);
      }
    }
);
    for (    PsiClass psiClass : classes) {
      ProgressIndicatorProvider.checkCanceled();
      if (!processor.process(psiClass)) {
        return false;
      }
    }
  }
  return true;
}
