{
  HgCommandService service=HgCommandService.getInstance(project);
  HgCommandResult result=service.execute(localRepository,command,arguments);
  if (HgErrorUtil.isAbort(result) && HgErrorUtil.isAuthorizationRequiredAbort(result)) {
    try {
      HgUrl hgUrl=new HgUrl(remoteRepository);
      if (hgUrl.supportsAuthentication()) {
        GetPasswordRunnable runnable=new GetPasswordRunnable(project,hgUrl);
        if (!ApplicationManager.getApplication().isDispatchThread()) {
          ApplicationManager.getApplication().invokeAndWait(runnable,ModalityState.defaultModalityState());
        }
 else {
          runnable.run();
        }
        if (runnable.isOk()) {
          hgUrl.setUsername(runnable.getUserName());
          hgUrl.setPassword(String.valueOf(runnable.getPassword()));
          arguments.set(0,hgUrl.asString());
          result=service.execute(localRepository,command,arguments);
          if (result != null && result.getExitValue() == 0) {
            final String key=keyForUrlAndLogin(runnable.getURL(),runnable.getUserName());
            try {
              PasswordSafe.getInstance().storePassword(project,HgCommandAuthenticator.class,key,runnable.getPassword());
              HgVcs.getInstance(project).getGlobalSettings().addRememberedUrl(runnable.getURL(),runnable.getUserName());
            }
 catch (            PasswordSafeException e) {
              LOG.error("Couldn't store the password for key [" + key + "]",e);
            }
          }
        }
      }
    }
 catch (    URISyntaxException e) {
      VcsUtil.showErrorMessage(project,"Invalid repository: " + remoteRepository,"Error");
    }
  }
  return result;
}
