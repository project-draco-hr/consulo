{
  HgCommandResult result=HgCommandService.getInstance(project).execute(localRepository,command,arguments);
  if (isAuthorizationError(result)) {
    try {
      HgUrl hgUrl=new HgUrl(remoteRepository);
      if (hgUrl.supportsAuthentication()) {
        final GetPasswordRunnable runnable=new GetPasswordRunnable(project,hgUrl);
        for (int i=0; i < 3; i++) {
          if (i == 1) {
            runnable.setForceShowDialog(true);
          }
          result=tryToAuthenticate(project,localRepository,hgUrl,runnable,command,arguments,urlArgumentPosition);
          if (result == HgCommandResult.CANCELLED) {
            return result;
          }
          if (isAbort(result)) {
            if (isAuthorizationError(result)) {
              continue;
            }
 else {
              return result;
            }
          }
          saveCredentials(project,runnable);
          return result;
        }
        HgUtil.notifyError(project,"Authentication failed","Authentication to " + remoteRepository + " failed");
        return result;
      }
 else {
        HgUtil.notifyError(project,"Authentication error","Authentication was requested, but " + hgUrl.getScheme() + " doesn't support it.");
      }
    }
 catch (    URISyntaxException e) {
      VcsUtil.showErrorMessage(project,"Invalid repository: " + remoteRepository,"Error");
    }
  }
  return result;
}
