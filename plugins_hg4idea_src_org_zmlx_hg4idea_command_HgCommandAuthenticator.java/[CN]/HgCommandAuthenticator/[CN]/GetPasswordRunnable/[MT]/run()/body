{
  @Nullable String stringUrl=null;
  try {
    stringUrl=hgUrl.asString();
  }
 catch (  URISyntaxException e) {
    LOG.warn("Couldn't parse hgUrl: [" + hgUrl + "]",e);
  }
  final HgVcs vcs=HgVcs.getInstance(project);
  if (vcs == null) {
    return;
  }
  final HgGlobalSettings hgGlobalSettings=vcs.getGlobalSettings();
  final Map<String,List<String>> urls=hgGlobalSettings.getRememberedUrls();
  @Nullable List<String> rememberedLoginsForUrl=urls.get(stringUrl);
  String login=hgUrl.getUsername();
  if (StringUtils.isBlank(login)) {
    if (rememberedLoginsForUrl != null && !rememberedLoginsForUrl.isEmpty()) {
      login=rememberedLoginsForUrl.get(0);
    }
  }
  String password=hgUrl.getPassword();
  if (StringUtils.isBlank(password) && stringUrl != null) {
    final String key=keyForUrlAndLogin(stringUrl,login);
    try {
      password=PasswordSafe.getInstance().getPassword(project,HgCommandAuthenticator.class,key);
    }
 catch (    PasswordSafeException e) {
      LOG.info("Couldn't get password for key [" + key + "]",e);
    }
  }
  final HgUsernamePasswordDialog dialog=new HgUsernamePasswordDialog(project,login,password);
  dialog.show();
  if (dialog.isOK()) {
    userName=dialog.getUsername();
    myPassword=dialog.getPassword();
    ok=true;
    if (dialog.isRememberPassword() && stringUrl != null) {
      myURL=stringUrl;
    }
  }
}
