{
  @Nullable String stringUrl=null;
  try {
    stringUrl=hgUrl.asString();
  }
 catch (  URISyntaxException e) {
    LOG.warn("Couldn't parse hgUrl: [" + hgUrl + "]",e);
  }
  final HgVcs vcs=HgVcs.getInstance(project);
  if (vcs == null) {
    return;
  }
  final HgGlobalSettings hgGlobalSettings=vcs.getGlobalSettings();
  final Map<String,List<String>> urls=hgGlobalSettings.getRememberedUrls();
  @Nullable List<String> rememberedLoginsForUrl=urls.get(stringUrl);
  String login=hgUrl.getUsername();
  if (StringUtils.isBlank(login)) {
    if (rememberedLoginsForUrl != null && !rememberedLoginsForUrl.isEmpty()) {
      login=rememberedLoginsForUrl.get(0);
    }
  }
  String password=hgUrl.getPassword();
  if (StringUtils.isBlank(password) && stringUrl != null) {
    final String key=keyForUrlAndLogin(stringUrl,login);
    try {
      final PasswordSafeImpl passwordSafe=(PasswordSafeImpl)PasswordSafe.getInstance();
      password=passwordSafe.getMemoryProvider().getPassword(project,HgCommandAuthenticator.class,key);
      if (password == null && passwordSafe.getSettings().getProviderType().equals(PasswordSafeSettings.ProviderType.MASTER_PASSWORD)) {
        password=passwordSafe.getMasterKeyProvider().getPassword(project,HgCommandAuthenticator.class,key);
      }
    }
 catch (    PasswordSafeException e) {
      LOG.info("Couldn't get password for key [" + key + "]",e);
    }
  }
  if (!myForceShowDialog && !StringUtils.isBlank(password) && !StringUtils.isBlank(login)) {
    userName=login;
    myPassword=password;
    ok=true;
    return;
  }
  String url;
  try {
    url=hgUrl.asString(false);
  }
 catch (  URISyntaxException e) {
    url=null;
  }
  final HgUsernamePasswordDialog dialog=new HgUsernamePasswordDialog(project,url,login,password);
  dialog.show();
  if (dialog.isOK()) {
    userName=dialog.getUsername();
    myPassword=dialog.getPassword();
    ok=true;
    myRememberPassword=dialog.isRememberPassword();
    if (stringUrl != null) {
      myURL=stringUrl;
    }
  }
}
