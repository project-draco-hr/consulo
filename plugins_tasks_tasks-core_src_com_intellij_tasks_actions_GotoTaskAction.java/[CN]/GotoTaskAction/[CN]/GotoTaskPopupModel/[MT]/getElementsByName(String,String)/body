{
  List<Task> tasks=new ArrayList<Task>();
  tasks.addAll(TaskManager.getManager(myProject).getLocalTasks(pattern));
  tasks.addAll(ContainerUtil.filter(TaskManager.getManager(myProject).getIssues(pattern),new Condition<Task>(){
    @Override public boolean value(    Task task){
      return TaskManager.getManager(myProject).findTask(task.getId()) == null;
    }
  }
));
  List<TaskPsiElement> taskPsiElements=ContainerUtil.map(tasks,new Function<Task,TaskPsiElement>(){
    @Override public TaskPsiElement fun(    Task task){
      return new TaskPsiElement(PsiManager.getInstance(myProject),task);
    }
  }
);
  TaskPsiElement[] result2=new TaskPsiElement[taskPsiElements.size()];
  ArrayUtil.copy(taskPsiElements,result2,0);
  final boolean foundTaskListEmpty=taskPsiElements.size() == 0;
  Object[] result=new Object[taskPsiElements.size() + 1 + (foundTaskListEmpty ? 0 : 1)];
  result[0]=CREATE_NEW_TASK_ACTION;
  CREATE_NEW_TASK_ACTION.setTaskName(pattern);
  if (!foundTaskListEmpty) {
    result[1]=ChooseByNameBase.NON_PREFIX_SEPARATOR;
  }
  ArrayUtil.copy(taskPsiElements,result,foundTaskListEmpty ? 1 : 2);
  return result;
}
