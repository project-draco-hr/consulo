{
  myInAction=getClass();
  final Ref<Boolean> shiftPressed=Ref.create(false);
  final ChooseByNamePopup popup=ChooseByNamePopup.createPopup(project,new GotoTaskPopupModel(project),new ChooseByNameItemProvider(){
    @NotNull @Override public List<String> filterNames(    @NotNull ChooseByNameBase base,    @NotNull String[] names,    @NotNull String pattern){
      return ContainerUtil.emptyList();
    }
    @Override public boolean filterElements(    @NotNull ChooseByNameBase base,    @NotNull String pattern,    boolean everywhere,    @NotNull ProgressIndicator cancelled,    @NotNull Processor<Object> consumer){
      List<Task> cachedAndLocalTasks=TaskSearchSupport.getLocalAndCachedTasks(TaskManager.getManager(project),pattern,everywhere);
      List<TaskPsiElement> taskPsiElements=ContainerUtil.map(cachedAndLocalTasks,new Function<Task,TaskPsiElement>(){
        @Override public TaskPsiElement fun(        Task task){
          return new TaskPsiElement(PsiManager.getInstance(project),task);
        }
      }
);
      CREATE_NEW_TASK_ACTION.setTaskName(pattern);
      cancelled.checkCanceled();
      if (!consumer.process(CREATE_NEW_TASK_ACTION))       return false;
      boolean cachedTasksFound=taskPsiElements.size() != 0;
      if (cachedTasksFound) {
        cancelled.checkCanceled();
        if (!consumer.process(ChooseByNameBase.NON_PREFIX_SEPARATOR))         return false;
      }
      for (      Object element : taskPsiElements) {
        cancelled.checkCanceled();
        if (!consumer.process(element))         return false;
      }
      List<Task> tasks=TaskSearchSupport.getRepositoriesTasks(TaskManager.getManager(project),pattern,base.getMaximumListSizeLimit(),0,true,everywhere,cancelled);
      tasks.removeAll(cachedAndLocalTasks);
      taskPsiElements=ContainerUtil.map(tasks,new Function<Task,TaskPsiElement>(){
        @Override public TaskPsiElement fun(        Task task){
          return new TaskPsiElement(PsiManager.getInstance(project),task);
        }
      }
);
      if (!cachedTasksFound && taskPsiElements.size() != 0) {
        cancelled.checkCanceled();
        if (!consumer.process(ChooseByNameBase.NON_PREFIX_SEPARATOR))         return false;
      }
      for (      Object element : taskPsiElements) {
        cancelled.checkCanceled();
        if (!consumer.process(element))         return false;
      }
      return true;
    }
  }
,null,false,0);
  popup.setShowListForEmptyPattern(true);
  popup.setSearchInAnyPlace(true);
  popup.setAdText("<html>Press SHIFT to merge with current context<br/>" + "Pressing " + KeymapUtil.getFirstKeyboardShortcutText(ActionManager.getInstance().getAction(IdeActions.ACTION_QUICK_JAVADOC)) + " would show task description and comments</html>");
  popup.registerAction("shiftPressed",KeyStroke.getKeyStroke("shift pressed SHIFT"),new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      shiftPressed.set(true);
    }
  }
);
  popup.registerAction("shiftReleased",KeyStroke.getKeyStroke("released SHIFT"),new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      shiftPressed.set(false);
    }
  }
);
  final DefaultActionGroup group=new DefaultActionGroup(new ConfigureServersAction(){
    @Override protected void serversChanged(){
      popup.rebuildList(true);
    }
  }
);
  final ActionToolbar actionToolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,group,true);
  actionToolbar.setLayoutPolicy(ActionToolbar.NOWRAP_LAYOUT_POLICY);
  popup.setToolArea(actionToolbar.getComponent());
  popup.setMaximumListSizeLimit(10);
  showNavigationPopup(new GotoActionCallback<Object>(){
    @Override public void elementChosen(    ChooseByNamePopup popup,    Object element){
      TaskManager taskManager=TaskManager.getManager(project);
      if (element instanceof TaskPsiElement) {
        Task task=((TaskPsiElement)element).getTask();
        LocalTask localTask=taskManager.findTask(task.getId());
        if (localTask != null) {
          if (taskManager.isVcsEnabled() && localTask.isClosedLocally()) {
            showOpenTaskDialog(project,localTask);
          }
 else {
            taskManager.activateTask(localTask,!shiftPressed.get(),true);
          }
        }
 else {
          showOpenTaskDialog(project,task);
        }
      }
 else       if (element == CREATE_NEW_TASK_ACTION) {
        LocalTask localTask=taskManager.createLocalTask(CREATE_NEW_TASK_ACTION.getTaskName());
        showOpenTaskDialog(project,localTask);
      }
    }
  }
,null,popup);
}
