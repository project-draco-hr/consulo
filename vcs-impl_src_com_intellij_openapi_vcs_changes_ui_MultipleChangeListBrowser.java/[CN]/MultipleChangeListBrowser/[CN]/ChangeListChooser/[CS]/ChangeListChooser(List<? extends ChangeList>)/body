{
  super(new BorderLayout());
  myChooser=new JComboBox(){
    public Dimension getMinimumSize(){
      return new Dimension(0,0);
    }
  }
;
  myChooser.setRenderer(new ColoredListCellRenderer(){
    protected void customizeCellRenderer(    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      final LocalChangeList l=((LocalChangeList)value);
      if (l != null) {
        String name=l.getName().trim();
        if (name.length() > MAX_LEN) {
          name=name.substring(0,MAX_LEN - 3) + "...";
        }
        append(name,l.isDefault() ? SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES : SimpleTextAttributes.REGULAR_ATTRIBUTES);
      }
    }
  }
);
  myChooser.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      if (e.getStateChange() == ItemEvent.SELECTED) {
        final LocalChangeList changeList=(LocalChangeList)myChooser.getSelectedItem();
        setSelectedList(changeList);
        myChooser.setToolTipText(changeList == null ? "" : (changeList.getName()));
      }
    }
  }
);
  updateLists(lists);
  myChooser.setEditable(false);
  add(myChooser,BorderLayout.CENTER);
  JLabel label=new JLabel(VcsBundle.message("commit.dialog.changelist.label"));
  label.setDisplayedMnemonic('l');
  label.setLabelFor(myChooser);
  add(label,BorderLayout.WEST);
}
