{
  if (member == null) {
    return RefactoringBundle.message("locate.caret.inside.a.method");
  }
  if (member instanceof PsiMethod) {
    if (((PsiMethod)member).isConstructor()) {
      return RefactoringBundle.message("replace.with.method.call.does.not.work.for.constructors");
    }
    final PsiCodeBlock body=((PsiMethod)member).getBody();
    if (body == null) {
      return RefactoringBundle.message("method.does.not.have.a.body",member.getName());
    }
    final PsiStatement[] statements=body.getStatements();
    if (statements.length == 0) {
      return RefactoringBundle.message("method.has.an.empty.body",member.getName());
    }
  }
 else   if (member instanceof PsiField) {
    final PsiField field=(PsiField)member;
    if (!field.hasInitializer()) {
      return "Field " + member.getName() + " doesn't have initializer";
    }
    final PsiClass containingClass=field.getContainingClass();
    if (!field.hasModifierProperty(PsiModifier.FINAL) || !field.hasModifierProperty(PsiModifier.STATIC) || containingClass == null || containingClass.getQualifiedName() == null) {
      return "Replace Duplicates works with constants only";
    }
  }
 else {
    return "Caret should be inside method or constant";
  }
  return null;
}
