{
  if (!(element instanceof PsiJavaToken)) {
    return false;
  }
  PsiJavaToken token=(PsiJavaToken)element;
  if (!(token.getParent() instanceof PsiBinaryExpression))   return false;
  PsiBinaryExpression expression=(PsiBinaryExpression)token.getParent();
  boolean isAndExpression=expression.getOperationTokenType() == JavaTokenType.ANDAND;
  boolean isOrExpression=expression.getOperationTokenType() == JavaTokenType.OROR;
  if (!isAndExpression && !isOrExpression)   return false;
  while (expression.getParent() instanceof PsiBinaryExpression) {
    expression=(PsiBinaryExpression)expression.getParent();
    if (isAndExpression && expression.getOperationTokenType() != JavaTokenType.ANDAND)     return false;
    if (isOrExpression && expression.getOperationTokenType() != JavaTokenType.OROR)     return false;
  }
  if (!(expression.getParent() instanceof PsiIfStatement))   return false;
  PsiIfStatement ifStatement=(PsiIfStatement)expression.getParent();
  if (!PsiTreeUtil.isAncestor(ifStatement.getCondition(),expression,false))   return false;
  if (ifStatement.getThenBranch() == null)   return false;
  setText(CodeInsightBundle.message("intention.split.if.text"));
  return true;
}
