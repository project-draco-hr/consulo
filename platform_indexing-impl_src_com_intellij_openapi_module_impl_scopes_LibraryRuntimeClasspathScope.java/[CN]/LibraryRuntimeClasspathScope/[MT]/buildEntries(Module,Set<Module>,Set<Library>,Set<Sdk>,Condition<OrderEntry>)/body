{
  if (!processedModules.add(module))   return;
  ModuleRootManager.getInstance(module).orderEntries().recursively().satisfying(condition).process(new RootPolicy<LinkedHashSet<VirtualFile>>(){
    @Override public LinkedHashSet<VirtualFile> visitLibraryOrderEntry(    final LibraryOrderEntry libraryOrderEntry,    final LinkedHashSet<VirtualFile> value){
      final Library library=libraryOrderEntry.getLibrary();
      if (library != null && processedLibraries.add(library)) {
        ContainerUtil.addAll(value,libraryOrderEntry.getFiles(BinariesOrderRootType.getInstance()));
      }
      return value;
    }
    @Override public LinkedHashSet<VirtualFile> visitModuleSourceOrderEntry(    final ModuleSourceOrderEntry moduleSourceOrderEntry,    final LinkedHashSet<VirtualFile> value){
      processedModules.add(moduleSourceOrderEntry.getOwnerModule());
      ContainerUtil.addAll(value,getModuleScopeFiles(moduleSourceOrderEntry.getOwnerModule()));
      return value;
    }
    @Override public LinkedHashSet<VirtualFile> visitModuleOrderEntry(    ModuleOrderEntry moduleOrderEntry,    LinkedHashSet<VirtualFile> value){
      final Module depModule=moduleOrderEntry.getModule();
      if (depModule != null) {
        ContainerUtil.addAll(value,getModuleScopeFiles(depModule));
      }
      return value;
    }
    @NotNull private VirtualFile[] getModuleScopeFiles(    @NotNull final Module module){
      ModuleRootManager moduleRootManager=ModuleRootManager.getInstance(module);
      ModuleRootsProcessor rootsProcessor=ModuleRootsProcessor.findRootsProcessor(moduleRootManager);
      if (rootsProcessor != null) {
        return rootsProcessor.getFiles(moduleRootManager,ContentFolderScopes.productionAndTest());
      }
 else {
        return moduleRootManager.getContentFolderFiles(ContentFolderScopes.productionAndTest());
      }
    }
    @Override public LinkedHashSet<VirtualFile> visitModuleExtensionSdkOrderEntry(    final ModuleExtensionWithSdkOrderEntry sdkOrderEntry,    final LinkedHashSet<VirtualFile> value){
      final Sdk sdk=sdkOrderEntry.getSdk();
      if (sdk != null && processedSdk.add(sdk)) {
        ContainerUtil.addAll(value,sdkOrderEntry.getFiles(BinariesOrderRootType.getInstance()));
      }
      return value;
    }
    @Override public LinkedHashSet<VirtualFile> visitOrderEntry(    OrderEntry orderEntry,    LinkedHashSet<VirtualFile> value){
      if (orderEntry instanceof OrderEntryWithTracking) {
        ContainerUtil.addAll(value,orderEntry.getFiles(BinariesOrderRootType.getInstance()));
      }
      return value;
    }
  }
,myEntries);
}
