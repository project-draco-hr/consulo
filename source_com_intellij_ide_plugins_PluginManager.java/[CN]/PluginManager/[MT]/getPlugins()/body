{
  if (ourPlugins == null) {
    final PluginDescriptor[] pluginDescriptors=loadDescriptors();
    final Map<String,PluginDescriptor> idToDescriptorMap=new HashMap<String,PluginDescriptor>();
    for (int idx=0; idx < pluginDescriptors.length; idx++) {
      final PluginDescriptor descriptor=pluginDescriptors[idx];
      idToDescriptorMap.put(descriptor.getId(),descriptor);
    }
    Arrays.sort(pluginDescriptors,getPluginDescriptorComparator(idToDescriptorMap));
    final Class callerClass=Reflection.getCallerClass(1);
    final ClassLoader parentLoader=callerClass.getClassLoader();
    for (int idx=0; idx < pluginDescriptors.length; idx++) {
      final PluginDescriptor pluginDescriptor=pluginDescriptors[idx];
      final List classPath=pluginDescriptor.getClassPath();
      final String[] dependentPluginIds=pluginDescriptor.getDependentPluginIds();
      final ClassLoader[] parentLoaders=dependentPluginIds.length > 0 ? getParentLoaders(idToDescriptorMap,dependentPluginIds) : new ClassLoader[]{parentLoader};
      final PluginClassLoader pluginClassLoader=createPluginClassLoader((File[])classPath.toArray(new File[classPath.size()]),pluginDescriptor.getName(),parentLoaders,pluginDescriptor.getPath());
      pluginDescriptor.setLoader(pluginClassLoader);
    }
    ourPlugins=pluginDescriptors;
  }
  return ourPlugins;
}
