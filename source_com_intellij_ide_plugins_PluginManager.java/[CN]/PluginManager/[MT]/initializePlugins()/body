{
  if (!shouldLoadPlugins()) {
    ourPlugins=new PluginDescriptor[0];
    return;
  }
  configureExtensions();
  final PluginDescriptor[] pluginDescriptors=loadDescriptors();
  final Map<PluginId,PluginDescriptor> idToDescriptorMap=new HashMap<PluginId,PluginDescriptor>();
  for (  final PluginDescriptor descriptor : pluginDescriptors) {
    idToDescriptorMap.put(descriptor.getPluginId(),descriptor);
  }
  Arrays.sort(pluginDescriptors,getPluginDescriptorComparator(idToDescriptorMap));
  final Class callerClass=Reflection.getCallerClass(1);
  final ClassLoader parentLoader=callerClass.getClassLoader();
  for (  final PluginDescriptor pluginDescriptor : pluginDescriptors) {
    final List<File> classPath=pluginDescriptor.getClassPath();
    final PluginId[] dependentPluginIds=pluginDescriptor.getDependentPluginIds();
    final ClassLoader[] parentLoaders=dependentPluginIds.length > 0 ? getParentLoaders(idToDescriptorMap,dependentPluginIds) : new ClassLoader[]{parentLoader};
    final IdeaClassLoader pluginClassLoader=createPluginClassLoader(classPath.toArray(new File[classPath.size()]),pluginDescriptor.getPluginId(),parentLoaders,pluginDescriptor.getPath());
    pluginDescriptor.setLoader(pluginClassLoader);
    pluginDescriptor.registerExtensions();
  }
  ourPlugins=pluginDescriptors;
}
