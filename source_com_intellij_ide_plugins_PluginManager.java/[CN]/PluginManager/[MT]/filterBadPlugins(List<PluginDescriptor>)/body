{
  final Map<String,PluginDescriptor> idToDescriptorMap=new HashMap<String,PluginDescriptor>();
  final StringBuffer message=new StringBuffer();
  boolean pluginsWithoutIdFound=false;
  for (Iterator it=result.iterator(); it.hasNext(); ) {
    final PluginDescriptor descriptor=(PluginDescriptor)it.next();
    String id=descriptor.getId();
    if (id == null || id.length() == 0) {
      pluginsWithoutIdFound=true;
      it.remove();
    }
 else     if (idToDescriptorMap.containsKey(id)) {
      if (message.length() > 0) {
        message.append("\n");
      }
      message.append("Duplicate plugin id: ");
      message.append(id);
      it.remove();
    }
 else {
      idToDescriptorMap.put(id,descriptor);
    }
  }
  for (Iterator it=result.iterator(); it.hasNext(); ) {
    final PluginDescriptor pluginDescriptor=(PluginDescriptor)it.next();
    final String[] dependentPluginIds=pluginDescriptor.getDependentPluginIds();
    for (int idx=0; idx < dependentPluginIds.length; idx++) {
      final String dependentPluginId=dependentPluginIds[idx];
      if (!idToDescriptorMap.containsKey(dependentPluginId)) {
        if (message.length() > 0) {
          message.append("\n");
        }
        message.append("Plugin \"");
        message.append(pluginDescriptor.getId());
        message.append("\" was not loaded: required plugin \"");
        message.append(dependentPluginId);
        message.append("\" not found.");
        it.remove();
        break;
      }
    }
  }
  if (pluginsWithoutIdFound) {
    if (message.length() > 0) {
      message.append("\n");
    }
    message.append("There were plugins without id found, all such plugins were skipped.");
  }
  if (message.length() > 0) {
    message.insert(0,"Problems found loading plugins:\n");
    return message.toString();
  }
  return null;
}
