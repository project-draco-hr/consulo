{
  try {
    addParentClasspath(classpathElements);
    addIDEALibraries(classpathElements);
    addAdditionalClassPath(classpathElements);
  }
 catch (  IllegalArgumentException e) {
    JOptionPane.showMessageDialog(JOptionPane.getRootFrame(),e.getMessage(),"Error",JOptionPane.INFORMATION_MESSAGE);
    System.exit(1);
  }
catch (  MalformedURLException e) {
    JOptionPane.showMessageDialog(JOptionPane.getRootFrame(),e.getMessage(),"Error",JOptionPane.INFORMATION_MESSAGE);
    System.exit(1);
  }
  try {
    IdeaClassLoader newClassLoader=new IdeaClassLoader(classpathElements,null);
    if (!isLoadingOfExternalPluginsDisabled()) {
      PluginInstaller.initPluginClasses();
      StartupActionScriptManager.executeActionScript();
    }
    Thread.currentThread().setContextClassLoader(newClassLoader);
    final Class mainClass=Class.forName(getClass().getName(),true,newClassLoader);
    Field field=mainClass.getDeclaredField("ourMainClass");
    field.setAccessible(true);
    field.set(null,ourMainClass);
    field=mainClass.getDeclaredField("ourMethodName");
    field.setAccessible(true);
    field.set(null,ourMethodName);
    field=mainClass.getDeclaredField("ourArguments");
    field.setAccessible(true);
    field.set(null,ourArguments);
    final Method startMethod=mainClass.getDeclaredMethod("start",new Class[]{});
    startMethod.setAccessible(true);
    startMethod.invoke(null,ArrayUtil.EMPTY_OBJECT_ARRAY);
  }
 catch (  Exception e) {
    Logger logger=getLogger();
    if (logger == null)     e.printStackTrace(System.err);
 else     logger.error(e);
  }
}
