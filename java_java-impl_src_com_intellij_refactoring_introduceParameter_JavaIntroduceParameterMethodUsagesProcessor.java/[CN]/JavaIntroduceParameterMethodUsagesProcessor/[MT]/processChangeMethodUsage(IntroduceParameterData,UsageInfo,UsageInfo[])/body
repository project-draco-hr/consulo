{
  if (!isMethodUsage(usage))   return true;
  final PsiElement ref=usage.getElement();
  PsiCall callExpression=RefactoringUtil.getCallExpressionByMethodReference(ref);
  PsiExpressionList argList=RefactoringUtil.getArgumentListByMethodReference(ref);
  if (argList == null)   return true;
  PsiExpression[] oldArgs=argList.getExpressions();
  final PsiExpression anchor;
  if (!data.getMethodToSearchFor().isVarArgs()) {
    anchor=getLast(oldArgs);
  }
 else {
    final PsiParameter[] parameters=data.getMethodToSearchFor().getParameterList().getParameters();
    if (parameters.length > oldArgs.length) {
      anchor=getLast(oldArgs);
    }
 else {
      LOG.assertTrue(parameters.length > 0);
      final int lastNonVararg=parameters.length - 2;
      anchor=lastNonVararg >= 0 ? oldArgs[lastNonVararg] : null;
    }
  }
  PsiMethod method=PsiTreeUtil.getParentOfType(argList,PsiMethod.class);
  if (method != null && isMethodInUsages(data,method,usages)) {
    argList.addAfter(JavaPsiFacade.getElementFactory(data.getProject()).createExpressionFromText(data.getParameterName(),argList),anchor);
  }
 else {
    ChangeContextUtil.encodeContextInfo(data.getParameterInitializer(),true);
    PsiExpression newArg=(PsiExpression)argList.addAfter(data.getParameterInitializer(),anchor);
    ChangeContextUtil.decodeContextInfo(newArg,null,null);
    ChangeContextUtil.clearContextInfo(data.getParameterInitializer());
    new OldReferenceResolver(callExpression,newArg,data.getMethodToReplaceIn(),data.getReplaceFieldsWithGetters(),data.getParameterInitializer()).resolve();
  }
  final PsiExpressionList argumentList=callExpression.getArgumentList();
  LOG.assertTrue(argumentList != null,callExpression.getText());
  removeParametersFromCall(argumentList,data.getParametersToRemove());
  return false;
}
