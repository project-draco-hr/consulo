{
  final PsiMethodCallExpression callExpression=(PsiMethodCallExpression)expression;
  final PsiExpressionList argList=callExpression.getArgumentList();
  final PsiExpression[] args=argList.getExpressions();
  for (int i=0; i < args.length; i++) {
    final PsiExpression arg=args[i];
    if (expressionMustAssignVariable(field,arg,checkedMethods)) {
      return true;
    }
  }
  final PsiReferenceExpression methodExpression=callExpression.getMethodExpression();
  if (expressionMustAssignVariable(field,methodExpression,checkedMethods)) {
    return true;
  }
  final PsiMethod method=callExpression.resolveMethod();
  if (method == null) {
    return false;
  }
  final MethodSignature methodSignature=MethodSignatureUtil.createMethodSignature(method.getName(),method.getParameterList(),method.getTypeParameterList(),EmptySubstitutor.getInstance());
  if (!checkedMethods.add(methodSignature)) {
    return false;
  }
  final PsiClass containingClass=ClassUtils.getContainingClass(expression);
  final PsiClass calledClass=method.getContainingClass();
  if (!calledClass.equals(containingClass)) {
    return false;
  }
  if (method.hasModifierProperty(PsiModifier.STATIC) || method.isConstructor() || method.hasModifierProperty(PsiModifier.PRIVATE)|| method.hasModifierProperty(PsiModifier.FINAL)|| calledClass.hasModifierProperty(PsiModifier.FINAL)) {
    final PsiCodeBlock body=method.getBody();
    return cachingBlockMustAssignVariable(field,body,checkedMethods);
  }
  return false;
}
