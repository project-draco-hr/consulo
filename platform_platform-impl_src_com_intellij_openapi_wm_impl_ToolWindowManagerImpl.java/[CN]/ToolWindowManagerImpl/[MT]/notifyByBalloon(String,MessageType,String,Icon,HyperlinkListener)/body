{
  checkId(toolWindowId);
  Balloon existing=myWindow2Balloon.get(toolWindowId);
  if (existing != null) {
    existing.hide();
  }
  final Stripe stripe=myToolWindowsPane.getStripeFor(toolWindowId);
  final ToolWindowImpl window=getInternalDecorator(toolWindowId).getToolWindow();
  if (!window.isAvailable()) {
    window.setPlaceholderMode(true);
    stripe.updateState();
    stripe.revalidate();
    stripe.repaint();
  }
  final ToolWindowAnchor anchor=getInfo(toolWindowId).getAnchor();
  final Ref<Balloon.Position> position=Ref.create(Balloon.Position.below);
  if (ToolWindowAnchor.TOP == anchor) {
    position.set(Balloon.Position.below);
  }
 else   if (ToolWindowAnchor.BOTTOM == anchor) {
    position.set(Balloon.Position.above);
  }
 else   if (ToolWindowAnchor.LEFT == anchor) {
    position.set(Balloon.Position.atRight);
  }
 else   if (ToolWindowAnchor.RIGHT == anchor) {
    position.set(Balloon.Position.atLeft);
  }
  final BalloonHyperlinkListener listenerWrapper=new BalloonHyperlinkListener(listener);
  final Balloon balloon=JBPopupFactory.getInstance().createHtmlTextBalloonBuilder(text.replace("\n","<br>"),icon,type.getPopupBackground(),listenerWrapper).setHideOnClickOutside(false).setHideOnFrameResize(false).createBalloon();
  FrameStateManager.getInstance().getApplicationActive().doWhenDone(new Runnable(){
    @Override public void run(){
      final Alarm alarm=new Alarm();
      alarm.addRequest(new Runnable(){
        @Override public void run(){
          ((BalloonImpl)balloon).setHideOnClickOutside(true);
          Disposer.dispose(alarm);
        }
      }
,100);
    }
  }
);
  listenerWrapper.myBalloon=balloon;
  myWindow2Balloon.put(toolWindowId,balloon);
  Disposer.register(balloon,new Disposable(){
    @Override public void dispose(){
      window.setPlaceholderMode(false);
      stripe.updateState();
      stripe.revalidate();
      stripe.repaint();
      myWindow2Balloon.remove(toolWindowId);
    }
  }
);
  Disposer.register(getProject(),balloon);
  final StripeButton button=stripe.getButtonFor(toolWindowId);
  LOG.assertTrue(button != null,"Button was not found, popup won't be shown. Toolwindow id: " + toolWindowId + ", message: "+ text+ ", message type: "+ type);
  if (button == null)   return;
  final Runnable show=new Runnable(){
    @Override public void run(){
      if (button.isShowing()) {
        PositionTracker<Balloon> tracker=new PositionTracker<Balloon>(button){
          @Override @Nullable public RelativePoint recalculateLocation(          Balloon object){
            Stripe twStripe=myToolWindowsPane.getStripeFor(toolWindowId);
            StripeButton twButton=twStripe != null ? twStripe.getButtonFor(toolWindowId) : null;
            if (twButton == null)             return null;
            if (getToolWindow(toolWindowId).getAnchor() != anchor) {
              object.hide();
              return null;
            }
            final Point point=new Point(twButton.getBounds().width / 2,twButton.getHeight() / 2 - 2);
            return new RelativePoint(twButton,point);
          }
        }
;
        if (!balloon.isDisposed()) {
          balloon.show(tracker,position.get());
        }
      }
 else {
        final Rectangle bounds=myToolWindowsPane.getBounds();
        final Point target=UIUtil.getCenterPoint(bounds,new Dimension(1,1));
        if (ToolWindowAnchor.TOP == anchor) {
          target.y=0;
        }
 else         if (ToolWindowAnchor.BOTTOM == anchor) {
          target.y=bounds.height - 3;
        }
 else         if (ToolWindowAnchor.LEFT == anchor) {
          target.x=0;
        }
 else         if (ToolWindowAnchor.RIGHT == anchor) {
          target.x=bounds.width;
        }
        if (!balloon.isDisposed()) {
          balloon.show(new RelativePoint(myToolWindowsPane,target),position.get());
        }
      }
    }
  }
;
  if (!button.isValid()) {
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        show.run();
      }
    }
);
  }
 else {
    show.run();
  }
}
