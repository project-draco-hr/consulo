{
  final MyUIManagerPropertyChangeListener myUIManagerPropertyChangeListener=new MyUIManagerPropertyChangeListener();
  final MyLafManagerListener myLafManagerListener=new MyLafManagerListener();
  UIManager.addPropertyChangeListener(myUIManagerPropertyChangeListener);
  LafManager.getInstance().addLafManagerListener(myLafManagerListener);
  Disposer.register(myProject,new Disposable(){
    public void dispose(){
      UIManager.removePropertyChangeListener(myUIManagerPropertyChangeListener);
      LafManager.getInstance().removeLafManagerListener(myLafManagerListener);
    }
  }
);
  myFrame=myWindowManager.allocateFrame(myProject);
  LOG.assertTrue(myFrame != null);
  final ArrayList<FinalizableCommand> commandsList=new ArrayList<FinalizableCommand>();
  myToolWindowsPane=new ToolWindowsPane(myFrame,this);
  ((IdeRootPane)myFrame.getRootPane()).setToolWindowsPane(myToolWindowsPane);
  appendUpdateToolWindowsPaneCmd(commandsList);
  myFrame.setTitle(FrameTitleBuilder.getInstance().getProjectTitle(myProject));
  final JComponent editorComponent=FileEditorManagerEx.getInstanceEx(myProject).getComponent();
  myEditorComponentFocusWatcher.install(editorComponent);
  appendSetEditorComponentCmd(editorComponent,commandsList);
  if (myEditorComponentActive) {
    activateEditorComponentImpl(commandsList,true);
  }
  execute(commandsList);
  final DumbService.DumbModeListener dumbModeListener=new DumbService.DumbModeListener(){
    public void enteredDumbMode(){
      for (      final String id : getToolWindowIds()) {
        if (!myDumbAwareIds.contains(id)) {
          if (isToolWindowVisible(id)) {
            hideToolWindow(id,true);
          }
          getStripeButton(id).setEnabled(false);
        }
      }
    }
    public void exitDumbMode(){
      for (      final String id : getToolWindowIds()) {
        getStripeButton(id).setEnabled(true);
      }
    }
  }
;
  myProject.getMessageBus().connect().subscribe(DumbService.DUMB_MODE,dumbModeListener);
  StartupManager.getInstance(myProject).registerPostStartupActivity(new DumbAwareRunnable(){
    public void run(){
      registerToolWindowsFromBeans();
      if (DumbService.getInstance(myProject).isDumb()) {
        dumbModeListener.enteredDumbMode();
      }
    }
  }
);
}
