{
  final MyUIManagerPropertyChangeListener uiManagerPropertyListener=new MyUIManagerPropertyChangeListener();
  final MyLafManagerListener lafManagerListener=new MyLafManagerListener();
  UIManager.addPropertyChangeListener(uiManagerPropertyListener);
  myLafManager.addLafManagerListener(lafManagerListener);
  Disposer.register(myProject,new Disposable(){
    @Override public void dispose(){
      UIManager.removePropertyChangeListener(uiManagerPropertyListener);
      myLafManager.removeLafManagerListener(lafManagerListener);
    }
  }
);
  myFrame=myWindowManager.allocateFrame(myProject);
  LOG.assertTrue(myFrame != null);
  final ArrayList<FinalizableCommand> commandsList=new ArrayList<FinalizableCommand>();
  myToolWindowsPane=new ToolWindowsPane(myFrame,this);
  Disposer.register(myProject,myToolWindowsPane);
  ((IdeRootPane)myFrame.getRootPane()).setToolWindowsPane(myToolWindowsPane);
  appendUpdateToolWindowsPaneCmd(commandsList);
  myFrame.setTitle(FrameTitleBuilder.getInstance().getProjectTitle(myProject));
  JComponent editorComponent=createEditorComponent(myProject);
  myEditorComponentFocusWatcher.install(editorComponent);
  appendSetEditorComponentCmd(editorComponent,commandsList);
  if (myEditorWasActive && editorComponent instanceof EditorsSplitters) {
    activateEditorComponentImpl(FileEditorManagerEx.getInstanceEx(myProject).getSplitters(),commandsList,true);
  }
  execute(commandsList);
  final DumbService.DumbModeListener dumbModeListener=new DumbService.DumbModeListener(){
    @Override public void enteredDumbMode(){
      disableStripeButtons();
    }
    @Override public void exitDumbMode(){
      for (      final String id : getToolWindowIds()) {
        getStripeButton(id).setEnabled(true);
      }
    }
  }
;
  myProject.getMessageBus().connect().subscribe(DumbService.DUMB_MODE,dumbModeListener);
  StartupManager.getInstance(myProject).registerPostStartupActivity(new DumbAwareRunnable(){
    @Override public void run(){
      registerToolWindowsFromBeans();
      if (DumbService.getInstance(myProject).isDumb()) {
        disableStripeButtons();
      }
    }
  }
);
  IdeEventQueue.getInstance().addDispatcher(new IdeEventQueue.EventDispatcher(){
    @Override public boolean dispatch(    AWTEvent e){
      if (e instanceof KeyEvent) {
        dispatchKeyEvent((KeyEvent)e);
      }
      return false;
    }
  }
,myProject);
}
