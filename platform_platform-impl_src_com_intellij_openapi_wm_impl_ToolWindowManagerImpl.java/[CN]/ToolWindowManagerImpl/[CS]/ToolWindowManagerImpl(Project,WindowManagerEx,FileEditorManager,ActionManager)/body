{
  myProject=project;
  myWindowManager=windowManagerEx;
  myFileEditorManager=fem;
  myListenerList=new EventListenerList();
  actionManager.addAnActionListener(new AnActionListener(){
    @Override public void beforeActionPerformed(    AnAction action,    DataContext dataContext,    AnActionEvent event){
      if (myCurrentState != KeyState.hold) {
        resetHoldState();
      }
    }
    @Override public void afterActionPerformed(    AnAction action,    DataContext dataContext,    AnActionEvent event){
    }
    @Override public void beforeEditorTyping(    char c,    DataContext dataContext){
    }
  }
,project);
  myLayout=new DesktopLayout();
  myLayout.copyFrom(windowManagerEx.getLayout());
  myId2InternalDecorator=new HashMap<String,InternalDecorator>();
  myId2FloatingDecorator=new HashMap<String,FloatingDecorator>();
  myId2StripeButton=new HashMap<String,StripeButton>();
  myId2FocusWatcher=new HashMap<String,FocusWatcher>();
  myEditorComponentFocusWatcher=new EditorComponentFocusWatcher();
  myToolWindowPropertyChangeListener=new MyToolWindowPropertyChangeListener();
  myInternalDecoratorListener=new MyInternalDecoratorListener();
  myEditorComponentActive=false;
  myActiveStack=new ActiveStack();
  mySideStack=new SideStack();
  project.getMessageBus().connect().subscribe(FileEditorManagerListener.FILE_EDITOR_MANAGER,new FileEditorManagerListener(){
    public void fileOpened(    FileEditorManager source,    VirtualFile file){
    }
    public void fileClosed(    FileEditorManager source,    VirtualFile file){
      getFocusManagerImpl().doWhenFocusSettlesDown(new Runnable(){
        public void run(){
          if (!hasOpenEditorFiles()) {
            focusToolWinowByDefault(null);
          }
        }
      }
);
    }
    public void selectionChanged(    FileEditorManagerEvent event){
    }
  }
);
}
