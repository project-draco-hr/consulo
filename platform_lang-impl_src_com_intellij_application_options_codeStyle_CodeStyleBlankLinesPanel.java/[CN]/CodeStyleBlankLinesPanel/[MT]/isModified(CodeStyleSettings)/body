{
  boolean isModified;
  isModified=settings.KEEP_BLANK_LINES_IN_DECLARATIONS != getValue(myKeepBlankLinesInDeclarations);
  isModified|=settings.KEEP_BLANK_LINES_IN_CODE != getValue(myKeepBlankLinesInCode);
  isModified|=settings.KEEP_BLANK_LINES_BEFORE_RBRACE != getValue(myKeepBlankLinesBeforeRBrace);
  isModified|=settings.BLANK_LINES_BEFORE_PACKAGE != getValue(myBlankLinesBeforePackage);
  isModified|=settings.BLANK_LINES_AFTER_PACKAGE != getValue(myBlankLinesAfterPackage);
  isModified|=settings.BLANK_LINES_BEFORE_IMPORTS != getValue(myBlankLinesBeforeImports);
  isModified|=settings.BLANK_LINES_AFTER_IMPORTS != getValue(myBlankLinesAfterImports);
  isModified|=settings.BLANK_LINES_AROUND_CLASS != getValue(myBlankLinesAroundClass);
  isModified|=settings.BLANK_LINES_AROUND_FIELD != getValue(myBlankLinesAroundField);
  isModified|=settings.BLANK_LINES_AROUND_METHOD != getValue(myBlankLinesAroundMethod);
  isModified|=settings.BLANK_LINES_BEFORE_METHOD_BODY != getValue(myBlankLinesBeforeMethodBody);
  isModified|=settings.BLANK_LINES_AROUND_FIELD_IN_INTERFACE != getValue(myBlankLinesAroundFieldI);
  isModified|=settings.BLANK_LINES_AROUND_METHOD_IN_INTERFACE != getValue(myBlankLinesAroundMethodI);
  isModified|=settings.BLANK_LINES_AFTER_CLASS_HEADER != getValue(myBlankLinesAfterClassHeader);
  return isModified;
}
