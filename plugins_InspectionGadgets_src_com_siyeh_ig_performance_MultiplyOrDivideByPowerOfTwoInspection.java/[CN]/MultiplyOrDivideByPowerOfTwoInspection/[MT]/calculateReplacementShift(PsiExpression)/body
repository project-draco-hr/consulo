{
  final PsiExpression lhs;
  final PsiExpression rhs;
  final String operator;
  if (expression instanceof PsiAssignmentExpression) {
    final PsiAssignmentExpression exp=(PsiAssignmentExpression)expression;
    final PsiJavaToken sign=exp.getOperationSign();
    lhs=exp.getLExpression();
    rhs=exp.getRExpression();
    final IElementType tokenType=sign.getTokenType();
    if (tokenType.equals(JavaTokenType.ASTERISKEQ)) {
      operator="<<=";
    }
 else {
      operator=">>=";
    }
  }
 else {
    final PsiBinaryExpression exp=(PsiBinaryExpression)expression;
    final PsiJavaToken sign=exp.getOperationSign();
    lhs=exp.getLOperand();
    rhs=exp.getROperand();
    final IElementType tokenType=sign.getTokenType();
    if (tokenType.equals(JavaTokenType.ASTERISK)) {
      operator="<<";
    }
 else {
      operator=">>";
    }
  }
  final String lhsText;
  if (ParenthesesUtils.getPrecendence(lhs) > ParenthesesUtils.SHIFT_PRECEDENCE) {
    lhsText='(' + lhs.getText() + ')';
  }
 else {
    lhsText=lhs.getText();
  }
  String expString=lhsText + operator + ShiftUtils.getLogBaseTwo(rhs);
  final PsiElement parent=expression.getParent();
  if (parent instanceof PsiExpression) {
    if (!(parent instanceof PsiParenthesizedExpression) && ParenthesesUtils.getPrecendence((PsiExpression)parent) < ParenthesesUtils.SHIFT_PRECEDENCE) {
      expString='(' + expString + ')';
    }
  }
  return expString;
}
