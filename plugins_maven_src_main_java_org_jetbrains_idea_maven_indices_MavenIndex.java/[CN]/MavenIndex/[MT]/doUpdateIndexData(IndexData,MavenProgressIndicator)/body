{
  final Set<String> groups=new THashSet<String>();
  final Set<String> groupsWithArtifacts=new THashSet<String>();
  final Set<String> groupsWithArtifactsWithVersions=new THashSet<String>();
  final Map<String,Set<String>> groupToArtifactMap=new THashMap<String,Set<String>>();
  final Map<String,Set<String>> groupWithArtifactToVersionMap=new THashMap<String,Set<String>>();
  final StringBuilder builder=new StringBuilder();
  progress.pushState();
  progress.setIndeterminate(true);
  try {
    data.processArtifacts(new MavenIndicesProcessor(){
      @Override public void processArtifacts(      Collection<MavenId> artifacts){
        for (        MavenId each : artifacts) {
          String groupId=each.getGroupId();
          String artifactId=each.getArtifactId();
          String version=each.getVersion();
          builder.setLength(0);
          builder.append(groupId).append(":").append(artifactId);
          String ga=builder.toString();
          builder.append(":").append(version);
          String gav=builder.toString();
          groups.add(groupId);
          groupsWithArtifacts.add(ga);
          groupsWithArtifactsWithVersions.add(gav);
          getOrCreate(groupToArtifactMap,groupId).add(artifactId);
          getOrCreate(groupWithArtifactToVersionMap,ga).add(version);
        }
      }
    }
);
    persist(groups,data.groups);
    persist(groupsWithArtifacts,data.groupsWithArtifacts);
    persist(groupsWithArtifactsWithVersions,data.groupsWithArtifactsWithVersions);
    persist(groupToArtifactMap,data.groupToArtifactMap);
    persist(groupWithArtifactToVersionMap,data.groupWithArtifactToVersionMap);
  }
  finally {
    progress.popState();
  }
}
