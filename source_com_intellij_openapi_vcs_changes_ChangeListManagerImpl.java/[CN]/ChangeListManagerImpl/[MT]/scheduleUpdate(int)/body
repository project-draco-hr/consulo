{
  ourUpdateAlarm.cancelAllRequests();
  ourUpdateAlarm.addRequest(new Runnable(){
    public void run(){
      if (myDisposed)       return;
      if (!myInitialized) {
        scheduleUpdate();
        return;
      }
      updateImmediately();
    }
    private void updateImmediately(){
      try {
synchronized (myPendingUpdatesLock) {
          myUpdateInProgress=true;
        }
        if (myDisposed)         return;
        final List<VcsDirtyScope> scopes=((VcsDirtyScopeManagerImpl)VcsDirtyScopeManager.getInstance(myProject)).retreiveScopes();
        for (        final VcsDirtyScope scope : scopes) {
          updateProgressText(VcsBundle.message("changes.update.progress.message",scope.getScopeRoot().getPresentableUrl()));
          ApplicationManager.getApplication().runReadAction(new Runnable(){
            public void run(){
synchronized (myChangeLists) {
                for (                ChangeList list : getChangeLists()) {
                  if (myDisposed)                   return;
                  list.startProcessingChanges(scope);
                }
              }
            }
          }
);
          final UnversionedFilesHolder unversionedHolder=myUnversionedFilesHolder.copy();
          unversionedHolder.cleanScope(scope);
          final DeletedFilesHolder deletedHolder=myDeletedFilesHolder.copy();
          deletedHolder.cleanScope(scope);
          try {
            final AbstractVcs vcs=myVcsManager.getVcsFor(scope.getScopeRoot());
            if (vcs != null) {
              final ChangeProvider changeProvider=vcs.getChangeProvider();
              if (changeProvider != null) {
                changeProvider.getChanges(scope,new ChangelistBuilder(){
                  public void processChange(                  final Change change){
                    if (myDisposed)                     throw new DisposedException();
                    ApplicationManager.getApplication().runReadAction(new Runnable(){
                      public void run(){
                        if (isUnder(change,scope)) {
                          try {
synchronized (myChangeLists) {
                              for (                              ChangeList list : myChangeLists) {
                                if (list == myDefaultChangelist)                                 continue;
                                if (list.processChange(change))                                 return;
                              }
                              myDefaultChangelist.processChange(change);
                            }
                          }
  finally {
                            scheduleRefresh();
                          }
                        }
                      }
                    }
);
                  }
                  public void processUnversionedFile(                  VirtualFile file){
                    if (myDisposed)                     throw new DisposedException();
                    if (scope.belongsTo(PeerFactory.getInstance().getVcsContextFactory().createFilePathOn(file))) {
                      unversionedHolder.addFile(file);
                      scheduleRefresh();
                    }
                  }
                  public void processLocallyDeletedFile(                  File file){
                    if (myDisposed)                     throw new DisposedException();
                    if (scope.belongsTo(PeerFactory.getInstance().getVcsContextFactory().createFilePathOn(file))) {
                      deletedHolder.addFile(file);
                      scheduleRefresh();
                    }
                  }
                  public void processModifiedWithoutEditing(                  VirtualFile file){
                    if (myDisposed)                     throw new DisposedException();
                  }
                }
,null);
              }
            }
          }
  finally {
            if (!myDisposed) {
synchronized (myChangeLists) {
                for (                ChangeList list : myChangeLists) {
                  if (list.doneProcessingChanges()) {
                    myListeners.getMulticaster().changeListChanged(list);
                  }
                }
              }
            }
          }
          myUnversionedFilesHolder=unversionedHolder;
          myDeletedFilesHolder=deletedHolder;
          scheduleRefresh();
        }
      }
 catch (      DisposedException e) {
      }
 finally {
        updateProgressText("");
synchronized (myPendingUpdatesLock) {
          myUpdateInProgress=false;
          myPendingUpdatesLock.notifyAll();
        }
      }
    }
    private boolean isUnder(    final Change change,    final VcsDirtyScope scope){
      final ContentRevision before=change.getBeforeRevision();
      final ContentRevision after=change.getAfterRevision();
      return before != null && scope.belongsTo(before.getFile()) || after != null && scope.belongsTo(after.getFile());
    }
  }
,millis);
}
