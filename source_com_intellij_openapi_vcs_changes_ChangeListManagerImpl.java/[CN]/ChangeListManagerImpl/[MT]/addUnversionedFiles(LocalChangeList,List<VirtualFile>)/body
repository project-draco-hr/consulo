{
  final List<VcsException> exceptions=new ArrayList<VcsException>();
  ChangesUtil.processVirtualFilesByVcs(myProject,files,new ChangesUtil.PerVcsProcessor<VirtualFile>(){
    public void process(    final AbstractVcs vcs,    final List<VirtualFile> items){
      final CheckinEnvironment environment=vcs.getCheckinEnvironment();
      if (environment != null) {
        exceptions.addAll(environment.scheduleUnversionedFilesForAddition(items));
      }
    }
  }
);
  if (exceptions.size() > 0) {
    StringBuilder message=new StringBuilder(VcsBundle.message("error.adding.files.prompt"));
    for (    VcsException ex : exceptions) {
      message.append("\n").append(ex.getMessage());
    }
    Messages.showErrorDialog(myProject,message.toString(),VcsBundle.message("error.adding.files.title"));
  }
  for (  VirtualFile file : files) {
    VcsDirtyScopeManager.getInstance(myProject).fileDirty(file);
    FileStatusManager.getInstance(myProject).fileStatusChanged(file);
  }
  if (!list.isDefault()) {
    ensureUpToDate(false);
    List<Change> changesToMove=new ArrayList<Change>();
    for (    Change change : getDefaultChangeList().getChanges()) {
      final ContentRevision afterRevision=change.getAfterRevision();
      if (afterRevision != null) {
        VirtualFile vFile=afterRevision.getFile().getVirtualFile();
        if (files.contains(vFile)) {
          changesToMove.add(change);
        }
      }
    }
    if (changesToMove.size() > 0) {
      moveChangesTo(list,changesToMove.toArray(new Change[changesToMove.size()]));
    }
  }
  ChangesViewManager.getInstance(myProject).scheduleRefresh();
}
