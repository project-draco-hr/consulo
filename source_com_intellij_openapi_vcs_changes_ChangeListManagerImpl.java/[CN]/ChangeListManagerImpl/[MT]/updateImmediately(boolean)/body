{
  try {
synchronized (myPendingUpdatesLock) {
      myUpdateInProgress=true;
    }
    if (myDisposed)     throw new DisposedException();
    final List<VcsDirtyScope> scopes=((VcsDirtyScopeManagerImpl)VcsDirtyScopeManager.getInstance(myProject)).retreiveScopes();
    for (    final VcsDirtyScope scope : scopes) {
      final AbstractVcs vcs=scope.getVcs();
      if (vcs == null)       continue;
      myCurrentlyUpdatingScope=scope;
      scope.refreshDirtyFiles();
      ChangesViewManager.getInstance(myProject).updateProgressText(VcsBundle.message("changes.update.progress.message",vcs.getDisplayName()));
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        public void run(){
synchronized (myChangeLists) {
            for (            LocalChangeList list : getChangeLists()) {
              if (myDisposed)               throw new DisposedException();
              list.startProcessingChanges(scope);
            }
          }
        }
      }
);
      final UnversionedFilesHolder unversionedHolder;
      final DeletedFilesHolder deletedHolder;
      if (updateUnversionedFiles) {
        unversionedHolder=myUnversionedFilesHolder.copy();
        unversionedHolder.cleanScope(scope);
        deletedHolder=myDeletedFilesHolder.copy();
        deletedHolder.cleanScope(scope);
      }
 else {
        unversionedHolder=myUnversionedFilesHolder;
        deletedHolder=myDeletedFilesHolder;
      }
      try {
        final ChangeProvider changeProvider=vcs.getChangeProvider();
        if (changeProvider != null) {
          changeProvider.getChanges(scope,new ChangelistBuilder(){
            public void processChange(            final Change change){
              processChangeInList(change,null);
            }
            public void processChangeInList(            final Change change,            final ChangeList changeList){
              if (myDisposed)               throw new DisposedException();
              ApplicationManager.getApplication().runReadAction(new Runnable(){
                public void run(){
                  if (isUnder(change,scope)) {
                    try {
synchronized (myChangeLists) {
                        if (changeList instanceof LocalChangeList) {
                          ((LocalChangeList)changeList).addChange(change);
                        }
 else {
                          for (                          LocalChangeList list : myChangeLists) {
                            if (list == myDefaultChangelist)                             continue;
                            if (list.processChange(change))                             return;
                          }
                          myDefaultChangelist.processChange(change);
                        }
                      }
                    }
  finally {
                      ChangesViewManager.getInstance(myProject).scheduleRefresh();
                    }
                  }
                }
              }
);
            }
            public void processUnversionedFile(            VirtualFile file){
              if (file == null || !updateUnversionedFiles)               return;
              if (myDisposed)               throw new DisposedException();
              if (scope.belongsTo(PeerFactory.getInstance().getVcsContextFactory().createFilePathOn(file))) {
                unversionedHolder.addFile(file);
                ChangesViewManager.getInstance(myProject).scheduleRefresh();
              }
            }
            public void processLocallyDeletedFile(            File file){
              if (!updateUnversionedFiles)               return;
              if (myDisposed)               throw new DisposedException();
              if (scope.belongsTo(PeerFactory.getInstance().getVcsContextFactory().createFilePathOn(file))) {
                deletedHolder.addFile(file);
                ChangesViewManager.getInstance(myProject).scheduleRefresh();
              }
            }
            public void processModifiedWithoutEditing(            VirtualFile file){
              if (myDisposed)               throw new DisposedException();
            }
            public boolean isUpdatingUnversionedFiles(){
              return updateUnversionedFiles;
            }
          }
,null);
        }
      }
  finally {
        myCurrentlyUpdatingScope=null;
        if (!myDisposed) {
synchronized (myChangeLists) {
            for (            LocalChangeList list : myChangeLists) {
              if (list.doneProcessingChanges()) {
                myListeners.getMulticaster().changeListChanged(list);
              }
            }
          }
        }
      }
      if (updateUnversionedFiles) {
        myUnversionedFilesHolder=unversionedHolder;
        myDeletedFilesHolder=deletedHolder;
      }
      ChangesViewManager.getInstance(myProject).scheduleRefresh();
    }
  }
 catch (  DisposedException e) {
  }
catch (  Exception ex) {
    LOG.error(ex);
  }
 finally {
    ChangesViewManager.getInstance(myProject).updateProgressText("");
synchronized (myPendingUpdatesLock) {
      myUpdateInProgress=false;
      myPendingUpdatesLock.notifyAll();
    }
  }
}
