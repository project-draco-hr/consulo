{
  try {
synchronized (myPendingUpdatesLock) {
      myUpdateInProgress=true;
    }
    if (myDisposed)     throw new DisposedException();
    final VcsDirtyScopeManagerImpl dirtyScopeManager=((VcsDirtyScopeManagerImpl)VcsDirtyScopeManager.getInstance(myProject));
    final boolean wasEverythingDirty=dirtyScopeManager.isEverythingDirty();
    final List<VcsDirtyScope> scopes=dirtyScopeManager.retreiveScopes();
    final VirtualFileHolder unversionedHolder;
    final VirtualFileHolder modifiedWithoutEditingHolder;
    final VirtualFileHolder ignoredHolder;
    final DeletedFilesHolder deletedHolder;
    if (wasEverythingDirty) {
      myUpdateException=null;
    }
    if (updateUnversionedFiles) {
      unversionedHolder=myUnversionedFilesHolder.copy();
      deletedHolder=myDeletedFilesHolder.copy();
      modifiedWithoutEditingHolder=myModifiedWithoutEditingHolder.copy();
      ignoredHolder=myIgnoredFilesHolder.copy();
      if (wasEverythingDirty) {
        unversionedHolder.cleanAll();
        deletedHolder.cleanAll();
        modifiedWithoutEditingHolder.cleanAll();
        ignoredHolder.cleanAll();
      }
    }
 else {
      unversionedHolder=myUnversionedFilesHolder;
      deletedHolder=myDeletedFilesHolder;
      modifiedWithoutEditingHolder=myModifiedWithoutEditingHolder;
      ignoredHolder=myIgnoredFilesHolder;
    }
    for (    final VcsDirtyScope scope : scopes) {
      final AbstractVcs vcs=scope.getVcs();
      if (vcs == null)       continue;
      myCurrentlyUpdatingScope=scope;
      ChangesViewManager.getInstance(myProject).updateProgressText(VcsBundle.message("changes.update.progress.message",vcs.getDisplayName()),false);
      ApplicationManager.getApplication().runReadAction(new Runnable(){
        public void run(){
synchronized (myChangeLists) {
            for (            LocalChangeList list : getChangeLists()) {
              if (myDisposed)               throw new DisposedException();
              list.startProcessingChanges(scope);
            }
          }
        }
      }
);
      if (updateUnversionedFiles && !wasEverythingDirty) {
        unversionedHolder.cleanScope(scope);
        deletedHolder.cleanScope(scope);
        modifiedWithoutEditingHolder.cleanScope(scope);
        ignoredHolder.cleanScope(scope);
      }
      try {
        final ChangeProvider changeProvider=vcs.getChangeProvider();
        if (changeProvider != null) {
          try {
            changeProvider.getChanges(scope,new ChangelistBuilder(){
              public void processChange(              final Change change){
                processChangeInList(change,null);
              }
              public void processChangeInList(              final Change change,              final ChangeList changeList){
                if (myDisposed)                 throw new DisposedException();
                final String fileName=ChangesUtil.getFilePath(change).getName();
                if (FileTypeManager.getInstance().isFileIgnored(fileName))                 return;
                ApplicationManager.getApplication().runReadAction(new Runnable(){
                  public void run(){
                    if (isUnder(change,scope)) {
                      try {
synchronized (myChangeLists) {
                          if (changeList instanceof LocalChangeList) {
                            ((LocalChangeList)changeList).addChange(change);
                          }
 else {
                            for (                            LocalChangeList list : myChangeLists) {
                              if (list == myDefaultChangelist)                               continue;
                              if (list.processChange(change))                               return;
                            }
                            myDefaultChangelist.processChange(change);
                          }
                        }
                      }
  finally {
                        ChangesViewManager.getInstance(myProject).scheduleRefresh();
                      }
                    }
                  }
                }
);
              }
              public void processUnversionedFile(              VirtualFile file){
                if (file == null || !updateUnversionedFiles)                 return;
                if (myDisposed)                 throw new DisposedException();
                if (FileTypeManager.getInstance().isFileIgnored(file.getName()))                 return;
                if (scope.belongsTo(PeerFactory.getInstance().getVcsContextFactory().createFilePathOn(file))) {
                  if (isIgnoredFile(file)) {
                    ignoredHolder.addFile(file);
                  }
 else {
                    unversionedHolder.addFile(file);
                  }
                  ChangesViewManager.getInstance(myProject).scheduleRefresh();
                }
              }
              public void processLocallyDeletedFile(              FilePath file){
                if (!updateUnversionedFiles)                 return;
                if (myDisposed)                 throw new DisposedException();
                if (FileTypeManager.getInstance().isFileIgnored(file.getName()))                 return;
                if (scope.belongsTo(file)) {
                  deletedHolder.addFile(file);
                  ChangesViewManager.getInstance(myProject).scheduleRefresh();
                }
              }
              public void processModifiedWithoutCheckout(              VirtualFile file){
                if (file == null || !updateUnversionedFiles)                 return;
                if (myDisposed)                 throw new DisposedException();
                if (FileTypeManager.getInstance().isFileIgnored(file.getName()))                 return;
                if (scope.belongsTo(PeerFactory.getInstance().getVcsContextFactory().createFilePathOn(file))) {
                  modifiedWithoutEditingHolder.addFile(file);
                  ChangesViewManager.getInstance(myProject).scheduleRefresh();
                }
              }
              public void processIgnoredFile(              VirtualFile file){
                if (file == null || !updateUnversionedFiles)                 return;
                if (myDisposed)                 throw new DisposedException();
                if (FileTypeManager.getInstance().isFileIgnored(file.getName()))                 return;
                if (scope.belongsTo(PeerFactory.getInstance().getVcsContextFactory().createFilePathOn(file))) {
                  ignoredHolder.addFile(file);
                  ChangesViewManager.getInstance(myProject).scheduleRefresh();
                }
              }
              public boolean isUpdatingUnversionedFiles(){
                return updateUnversionedFiles;
              }
            }
,null);
          }
 catch (          VcsException e) {
            LOG.info(e);
            if (myUpdateException == null) {
              myUpdateException=e;
            }
          }
        }
      }
  finally {
        myCurrentlyUpdatingScope=null;
        if (!myDisposed) {
          List<ChangeList> changedLists=new ArrayList<ChangeList>();
synchronized (myChangeLists) {
            for (            LocalChangeList list : myChangeLists) {
              if (list.doneProcessingChanges()) {
                changedLists.add(list);
              }
            }
          }
          for (          ChangeList changeList : changedLists) {
            myListeners.getMulticaster().changeListChanged(changeList);
          }
        }
      }
      if (updateUnversionedFiles) {
        myUnversionedFilesHolder=unversionedHolder;
        myDeletedFilesHolder=deletedHolder;
        myModifiedWithoutEditingHolder=modifiedWithoutEditingHolder;
        myIgnoredFilesHolder=ignoredHolder;
      }
    }
  }
 catch (  DisposedException e) {
  }
catch (  Exception ex) {
    LOG.error(ex);
  }
 finally {
    myListeners.getMulticaster().changeListUpdateDone();
synchronized (myPendingUpdatesLock) {
      myUpdateInProgress=false;
      myPendingUpdatesLock.notifyAll();
    }
  }
}
