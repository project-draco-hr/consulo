{
  myUpdateAlarm.cancelAllRequests();
  myUpdateAlarm.addRequest(new Runnable(){
    public void run(){
      if (myDisposed)       return;
      if (!myInitilized) {
        scheduleUpdate();
        return;
      }
      final List<VcsDirtyScope> scopes=((VcsDirtyScopeManagerImpl)VcsDirtyScopeManager.getInstance(myProject)).retreiveScopes();
      for (      final VcsDirtyScope scope : scopes) {
        updateProgressText(" Updating: " + scope.getScopeRoot().getPresentableUrl());
        for (        ChangeList list : getChangeLists()) {
          if (myDisposed)           return;
          list.removeChangesInScope(scope);
        }
        myUnversionedFilesHolder.cleanScope(scope);
        myView.freezeState();
        scheduleRefresh();
        final AbstractVcs vcs=myVcsManager.getVcsFor(scope.getScopeRoot());
        if (vcs != null) {
          final ChangeProvider changeProvider=vcs.getChangeProvider();
          if (changeProvider != null) {
            changeProvider.getChanges(scope,new ChangelistBuilder(){
              public void processChange(              Change change){
                if (isUnder(change,scope)) {
                  try {
synchronized (myChangeLists) {
                      for (                      ChangeList list : myChangeLists) {
                        if (list == myDefaultChangelist)                         continue;
                        if (list.processChange(change))                         return;
                      }
                      myDefaultChangelist.processChange(change);
                    }
                  }
  finally {
                    scheduleRefresh();
                  }
                }
              }
              public void processUnversionedFile(              VirtualFile file){
                if (scope.belongsTo(PeerFactory.getInstance().getVcsContextFactory().createFilePathOn(file))) {
                  myUnversionedFilesHolder.addFile(file);
                  scheduleRefresh();
                }
              }
            }
,null);
          }
        }
        myView.unfeezeState();
      }
      updateProgressText("");
    }
    private boolean isUnder(    final Change change,    final VcsDirtyScope scope){
      final ContentRevision before=change.getBeforeRevision();
      final ContentRevision after=change.getAfterRevision();
      return before != null && scope.belongsTo(before.getFile()) || after != null && scope.belongsTo(after.getFile());
    }
  }
,300);
}
