{
  JPanel panel=new JPanel(new BorderLayout());
  DefaultActionGroup modelActionsGroup=new DefaultActionGroup();
  RefreshAction refreshAction=new RefreshAction();
  refreshAction.registerCustomShortcutSet(CommonShortcuts.getRerun(),panel);
  AddChangeListAction newChangeListAction=new AddChangeListAction();
  newChangeListAction.registerCustomShortcutSet(CommonShortcuts.getNew(),panel);
  final RemoveChangeListAction removeChangeListAction=new RemoveChangeListAction();
  removeChangeListAction.registerCustomShortcutSet(CommonShortcuts.DELETE,panel);
  final ShowDiffAction diffAction=new ShowDiffAction();
  diffAction.registerCustomShortcutSet(new CustomShortcutSet(KeyStroke.getKeyStroke(KeyEvent.VK_D,SystemInfo.isMac ? KeyEvent.META_DOWN_MASK : KeyEvent.CTRL_DOWN_MASK)),panel);
  final MoveChangesToAnotherListAction toAnotherListAction=new MoveChangesToAnotherListAction();
  toAnotherListAction.registerCustomShortcutSet(CommonShortcuts.getMove(),panel);
  final SetDefaultChangeListAction setDefaultChangeListAction=new SetDefaultChangeListAction();
  final CommitAction commitAction=new CommitAction();
  final RollbackAction rollbackAction=new RollbackAction();
  modelActionsGroup.add(refreshAction);
  modelActionsGroup.add(commitAction);
  for (  CommitExecutor executor : myExecutors) {
    modelActionsGroup.add(new CommitUsingExecutorAction(executor));
  }
  modelActionsGroup.add(rollbackAction);
  modelActionsGroup.add(newChangeListAction);
  modelActionsGroup.add(removeChangeListAction);
  modelActionsGroup.add(setDefaultChangeListAction);
  modelActionsGroup.add(toAnotherListAction);
  modelActionsGroup.add(diffAction);
  JPanel toolbarPanel=new JPanel(new BorderLayout());
  toolbarPanel.add(createToolbarComponent(modelActionsGroup),BorderLayout.WEST);
  DefaultActionGroup visualActionsGroup=new DefaultActionGroup();
  final Expander expander=new Expander();
  visualActionsGroup.add(CommonActionsManager.getInstance().createCollapseAllAction(expander));
  visualActionsGroup.add(CommonActionsManager.getInstance().createExpandAllAction(expander));
  ToggleShowFlattenAction showFlattenAction=new ToggleShowFlattenAction();
  showFlattenAction.registerCustomShortcutSet(new CustomShortcutSet(KeyStroke.getKeyStroke(KeyEvent.VK_P,SystemInfo.isMac ? KeyEvent.META_DOWN_MASK : KeyEvent.CTRL_DOWN_MASK)),panel);
  visualActionsGroup.add(showFlattenAction);
  toolbarPanel.add(createToolbarComponent(visualActionsGroup),BorderLayout.CENTER);
  DefaultActionGroup menuGroup=new DefaultActionGroup();
  menuGroup.add(refreshAction);
  menuGroup.add(commitAction);
  for (  CommitExecutor executor : myExecutors) {
    modelActionsGroup.add(new CommitUsingExecutorAction(executor));
  }
  menuGroup.add(rollbackAction);
  menuGroup.add(newChangeListAction);
  menuGroup.add(removeChangeListAction);
  menuGroup.add(setDefaultChangeListAction);
  menuGroup.add(toAnotherListAction);
  menuGroup.add(diffAction);
  menuGroup.addSeparator();
  menuGroup.add(ActionManager.getInstance().getAction(IdeActions.GROUP_VERSION_CONTROLS));
  menuGroup.add(new DeleteAction());
  menuGroup.add(new ScheduleForAdditionAction());
  menuGroup.add(new ScheduleForRemovalAction());
  menuGroup.addSeparator();
  menuGroup.add(ActionManager.getInstance().getAction(IdeActions.ACTION_EDIT_SOURCE));
  myView.setMenuActions(menuGroup);
  myView.setShowFlatten(SHOW_FLATTEN_MODE);
  myProgressLabel=new JLabel();
  panel.add(toolbarPanel,BorderLayout.WEST);
  panel.add(new JScrollPane(myView),BorderLayout.CENTER);
  panel.add(myProgressLabel,BorderLayout.SOUTH);
  myView.installDndSupport(this);
  return panel;
}
