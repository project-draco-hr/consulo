{
  file.accept(new PsiRecursiveElementVisitor(){
    public void visitReferenceExpression(    PsiReferenceExpression expression){
      visitElement(expression);
    }
    public void visitField(    PsiField field){
      super.visitField(field);
      if (getManager().isToCheckMember(field,myTool.getID())) {
        ProblemDescriptor[] problemDescriptions=myTool.checkField(field,getManager(),false);
        if (problemDescriptions != null) {
          problemDescriptions=filterUnsuppressedPeoblemDescriptions(problemDescriptions);
          RefManager refManager=getManager().getRefManager();
          RefElement refElement=refManager.getReference(field);
          if (refElement != null) {
            addProblemElement(refElement,problemDescriptions);
          }
        }
      }
    }
    private ProblemDescriptor[] filterUnsuppressedPeoblemDescriptions(    ProblemDescriptor[] problemDescriptions){
      Set<ProblemDescriptor> set=null;
      for (int i=0; i < problemDescriptions.length; i++) {
        ProblemDescriptor description=problemDescriptions[i];
        if (getManager().inspectionResultSuppressed(description.getPsiElement(),myTool)) {
          if (set == null)           set=new LinkedHashSet<ProblemDescriptor>(Arrays.asList(problemDescriptions));
          set.remove(description);
        }
      }
      return set == null ? problemDescriptions : set.toArray(new ProblemDescriptor[set.size()]);
    }
    public void visitClass(    PsiClass aClass){
      super.visitClass(aClass);
      if (getManager().isToCheckMember(aClass,myTool.getID()) && !(aClass instanceof PsiTypeParameter)) {
        ProblemDescriptor[] problemDescriptions=myTool.checkClass(aClass,getManager(),false);
        if (problemDescriptions != null) {
          problemDescriptions=filterUnsuppressedPeoblemDescriptions(problemDescriptions);
          RefManager refManager=getManager().getRefManager();
          RefElement refElement=refManager.getReference(aClass);
          if (refElement != null) {
            addProblemElement(refElement,problemDescriptions);
          }
        }
      }
    }
    public void visitMethod(    PsiMethod method){
      super.visitMethod(method);
      if (getManager().isToCheckMember(method,myTool.getID())) {
        ProblemDescriptor[] problemDescriptions=myTool.checkMethod(method,getManager(),false);
        if (problemDescriptions != null) {
          problemDescriptions=filterUnsuppressedPeoblemDescriptions(problemDescriptions);
          RefManager refManager=getManager().getRefManager();
          RefElement refElement=refManager.getReference(method);
          if (refElement != null) {
            addProblemElement(refElement,problemDescriptions);
          }
        }
      }
    }
  }
);
}
