{
  Project project=getProject();
  final JavaPsiFacade facade=JavaPsiFacade.getInstance(project);
  final PsiClass baseClass=facade.findClass(myBaseClassName,ProjectScope.getAllScope(project));
  if (baseClass == null) {
    Messages.showErrorDialog(project,AndroidBundle.message("cant.find.class.error",myBaseClassName),CommonBundle.getErrorTitle());
    return null;
  }
  Module module=myModuleSelector.getModule();
  if (module == null) {
    Messages.showErrorDialog(project,ExecutionBundle.message("module.not.specified.error.text"),CommonBundle.getErrorTitle());
    return null;
  }
  GlobalSearchScope scope=myIncludeLibraryClasses ? module.getModuleWithDependenciesAndLibrariesScope(true) : module.getModuleWithDependenciesScope();
  PsiClass initialSelection=facade.findClass(getText(),scope);
  TreeClassChooser chooser=TreeClassChooserFactory.getInstance(project).createInheritanceClassChooser(myDialogTitle,scope,baseClass,initialSelection,new ClassFilter(){
    public boolean isAccepted(    PsiClass aClass){
      if (aClass.getManager().areElementsEquivalent(aClass,baseClass)) {
        return false;
      }
      if (aClass.isInterface())       return false;
      final PsiModifierList modifierList=aClass.getModifierList();
      if (modifierList != null && modifierList.hasModifierProperty(PsiModifier.ABSTRACT)) {
        return false;
      }
      return myAdditionalFilter == null || myAdditionalFilter.isAccepted(aClass);
    }
  }
);
  chooser.showDialog();
  PsiClass selClass=chooser.getSelected();
  return selClass != null ? selClass.getQualifiedName() : null;
}
