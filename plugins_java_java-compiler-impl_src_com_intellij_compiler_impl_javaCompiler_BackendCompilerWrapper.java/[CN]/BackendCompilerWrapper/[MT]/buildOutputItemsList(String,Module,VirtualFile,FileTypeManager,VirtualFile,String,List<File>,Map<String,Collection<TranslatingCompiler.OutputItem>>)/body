{
  final Ref<CacheCorruptedException> exRef=new Ref<CacheCorruptedException>(null);
  final ModuleFileIndex fileIndex=ModuleRootManager.getInstance(module).getFileIndex();
  final GlobalSearchScope srcRootScope=GlobalSearchScope.moduleScope(module).intersectWith(GlobalSearchScopes.directoryScope(myProject,sourceRoot,true));
  final Collection<FileType> registeredInputTypes=CompilerManager.getInstance(myProject).getRegisteredInputTypes(myTranslatingCompiler);
  final ContentIterator contentIterator=new ContentIterator(){
    public boolean processFile(    final VirtualFile child){
      try {
        if (child.isValid()) {
          if (!child.isDirectory() && registeredInputTypes.contains(child.getFileType())) {
            updateOutputItemsList(outputDir,child,sourceRoot,packagePrefix,filesToRefresh,results,srcRootScope);
          }
        }
        return true;
      }
 catch (      CacheCorruptedException e) {
        exRef.set(e);
        return false;
      }
    }
  }
;
  if (fileIndex.isInContent(from)) {
    fileIndex.iterateContentUnderDirectory(from,contentIterator);
  }
 else {
    VfsUtilCore.visitChildrenRecursively(from,new VirtualFileVisitor(){
      @Override public boolean visitFile(      @NotNull VirtualFile file){
        if (!file.isDirectory()) {
          contentIterator.processFile(file);
        }
        return true;
      }
    }
);
  }
  final CacheCorruptedException exc=exRef.get();
  if (exc != null) {
    throw exc;
  }
}
