{
  if (curr instanceof ReadWriteVariableInstruction) {
    ReadWriteVariableInstruction readWriteInsn=(ReadWriteVariableInstruction)curr;
    int idx=namesIndex.get(readWriteInsn.getVariableName());
    TIntHashSet defs=written.get(idx);
    if (defs == null) {
      defs=new TIntHashSet();
      written.put(idx,defs);
    }
    defs.add(curr.num());
  }
  visited[curr.num()]=true;
  for (  Instruction succ : curr.succ(env)) {
    if (succ instanceof ReadWriteVariableInstruction) {
      ReadWriteVariableInstruction readWriteInsn=(ReadWriteVariableInstruction)succ;
      if (!readWriteInsn.isWrite()) {
        int idx=namesIndex.get(readWriteInsn.getVariableName());
        if (!written.contains(idx)) {
          result.add((ReadWriteVariableInstruction)succ);
        }
      }
    }
    if (!visited[succ.num()]) {
      doVisitForReadsBeforeWrites(succ,written,result,env,namesIndex,visited);
    }
  }
  if (curr instanceof ReadWriteVariableInstruction) {
    ReadWriteVariableInstruction readWriteInsn=(ReadWriteVariableInstruction)curr;
    if (readWriteInsn.isWrite()) {
      int idx=namesIndex.get(readWriteInsn.getVariableName());
      TIntHashSet defs=written.get(idx);
      LOG.assertTrue(defs != null);
      defs.remove(curr.num());
      if (defs.isEmpty()) {
        written.remove(idx);
      }
    }
  }
}
