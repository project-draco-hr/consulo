{
  String text="public class BrokenAlignment {\n" + "\n" + "    public Object test() {\n"+ "        if (System.currentTimeMillis() > 1) {\n"+ "            if (System.currentTimeMillis() > 2) {\n"+ "                getData();\n"+ "            }\n"+ "        }\n"+ "        return \"hey\";\n"+ "    }\n"+ "\n"+ "    private void getData() {\n"+ "        String[] args = new String[]{};\n"+ "        String result = \"data: \";\n"+ "        int i = 0;\n"+ "        while (i < args.length) {\n"+ "            result += args[i];\n"+ "            if (i % 2 == 0) {\n"+ "                result += \", it's even!\";\n"+ "            } else {\n"+ "                System.out.println(\"It's odd :(\");\n"+ "                break;\n"+ "            }\n"+ "        }\n"+ "        int k = 1;\n"+ "    }\n"+ "\n"+ "}";
  configureFromFileText("test.java",text);
  final PsiClass clazz=((PsiClassOwner)myFile).getClasses()[0];
  final PsiMethod[] methods=clazz.findMethodsByName("getData",false);
  final PsiReferenceExpression ref=(PsiReferenceExpression)myFile.findReferenceAt(text.indexOf("getData") + 1);
  final InlineMethodProcessor processor=new InlineMethodProcessor(getProject(),methods[0],ref,myEditor,false);
  processor.run();
  final String currentText=myEditor.getDocument().getText();
  int start=currentText.indexOf("String[] args");
  int end=currentText.indexOf("\n",currentText.indexOf("int k"));
  myEditor.getSelectionModel().setSelection(start,end);
  ExtractMethodTest.performExtractMethod(true,true,myEditor,myFile,getProject());
  checkResultByText(text.replace("getData","newMethod"));
}
