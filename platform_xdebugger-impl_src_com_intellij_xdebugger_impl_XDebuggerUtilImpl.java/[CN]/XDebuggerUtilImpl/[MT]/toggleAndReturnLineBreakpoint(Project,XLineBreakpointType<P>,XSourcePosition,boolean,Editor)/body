{
  return new WriteAction<AsyncResult<XLineBreakpoint>>(){
    @Override protected void run(    @NotNull Result<AsyncResult<XLineBreakpoint>> result) throws Throwable {
      final VirtualFile file=position.getFile();
      final int line=position.getLine();
      final XBreakpointManager breakpointManager=XDebuggerManager.getInstance(project).getBreakpointManager();
      XLineBreakpoint<P> breakpoint=breakpointManager.findBreakpointAtLine(type,file,line);
      if (breakpoint != null) {
        breakpointManager.removeBreakpoint(breakpoint);
      }
 else {
        List<? extends XLineBreakpointType<P>.XLineBreakpointVariant> variants=type.computeVariants(project,position);
        if (!variants.isEmpty() && editor != null) {
          RelativePoint relativePoint=DebuggerUIUtil.getPositionForPopup(editor,line);
          if (variants.size() > 1 && relativePoint != null) {
            final AsyncResult<XLineBreakpoint> res=new AsyncResult<XLineBreakpoint>();
class MySelectionListener implements ListSelectionListener {
              RangeHighlighter myHighlighter=null;
              @Override public void valueChanged(              ListSelectionEvent e){
                if (!e.getValueIsAdjusting()) {
                  clearHighlighter();
                  Object value=((JList)e.getSource()).getSelectedValue();
                  if (value instanceof XLineBreakpointType.XLineBreakpointVariant) {
                    TextRange range=((XLineBreakpointType.XLineBreakpointVariant)value).getHighlightRange();
                    TextRange lineRange=DocumentUtil.getLineTextRange(editor.getDocument(),line);
                    if (range != null) {
                      range=range.intersection(lineRange);
                    }
 else {
                      range=lineRange;
                    }
                    if (range != null && !range.isEmpty()) {
                      EditorColorsScheme scheme=EditorColorsManager.getInstance().getGlobalScheme();
                      TextAttributes attributes=scheme.getAttributes(DebuggerColors.BREAKPOINT_ATTRIBUTES);
                      myHighlighter=editor.getMarkupModel().addRangeHighlighter(range.getStartOffset(),range.getEndOffset(),DebuggerColors.BREAKPOINT_HIGHLIGHTER_LAYER,attributes,HighlighterTargetArea.EXACT_RANGE);
                    }
                  }
                }
              }
              private void clearHighlighter(){
                if (myHighlighter != null) {
                  myHighlighter.dispose();
                }
              }
            }
            int caretOffset=editor.getCaretModel().getOffset();
            XLineBreakpointType<P>.XLineBreakpointVariant defaultVariant=null;
            for (            XLineBreakpointType<P>.XLineBreakpointVariant variant : variants) {
              TextRange range=variant.getHighlightRange();
              if (range != null && range.contains(caretOffset)) {
                if (defaultVariant == null || defaultVariant.getHighlightRange().getLength() > range.getLength()) {
                  defaultVariant=variant;
                }
              }
            }
            final int defaultIndex=defaultVariant != null ? variants.indexOf(defaultVariant) : 0;
            final MySelectionListener selectionListener=new MySelectionListener();
            ListPopupImpl popup=new ListPopupImpl(new BaseListPopupStep<XLineBreakpointType.XLineBreakpointVariant>("Create breakpoint for",variants){
              @NotNull @Override public String getTextFor(              XLineBreakpointType.XLineBreakpointVariant value){
                return value.getText();
              }
              @Override public Icon getIconFor(              XLineBreakpointType.XLineBreakpointVariant value){
                return value.getIcon();
              }
              @Override public void canceled(){
                selectionListener.clearHighlighter();
              }
              @Override @RequiredDispatchThread public PopupStep onChosen(              final XLineBreakpointType.XLineBreakpointVariant selectedValue,              boolean finalChoice){
                selectionListener.clearHighlighter();
                ApplicationManager.getApplication().runWriteAction(new Runnable(){
                  @Override public void run(){
                    P properties=(P)selectedValue.createProperties();
                    res.setDone(breakpointManager.addLineBreakpoint(type,file.getUrl(),line,properties,temporary));
                  }
                }
);
                return FINAL_CHOICE;
              }
              @Override public int getDefaultOptionIndex(){
                return defaultIndex;
              }
            }
);
            DebuggerUIUtil.registerExtraHandleShortcuts(popup,IdeActions.ACTION_TOGGLE_LINE_BREAKPOINT);
            popup.setAdText(DebuggerUIUtil.getSelectionShortcutsAdText(IdeActions.ACTION_TOGGLE_LINE_BREAKPOINT));
            popup.addListSelectionListener(selectionListener);
            popup.show(relativePoint);
            result.setResult(res);
            return;
          }
 else {
            P properties=variants.get(0).createProperties();
            result.setResult(AsyncResult.done((XLineBreakpoint)breakpointManager.addLineBreakpoint(type,file.getUrl(),line,properties,temporary)));
            return;
          }
        }
        P properties=type.createBreakpointProperties(file,line);
        result.setResult(AsyncResult.done((XLineBreakpoint)breakpointManager.addLineBreakpoint(type,file.getUrl(),line,properties,temporary)));
        return;
      }
      result.setResult(AsyncResult.<XLineBreakpoint>rejected());
    }
  }
.execute().getResultObject();
}
