{
  if (myText == null)   return null;
  myText=myText.replaceAll(String.valueOf(UIUtil.MNEMONIC),"");
  final HintManager hintManager=HintManager.getInstance();
  final JComponent editorComponent=editor.getComponent();
  final JEditorPane pane=initPane(myText);
  pane.addHyperlinkListener(new HyperlinkListener(){
    public void hyperlinkUpdate(    final HyperlinkEvent e){
      myActiveLink=true;
      if (e.getEventType() == HyperlinkEvent.EventType.EXITED) {
        myActiveLink=false;
        return;
      }
      if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
        showDescription(e.getDescription(),editor,pane);
      }
    }
  }
);
  final JComponent contentComponent=editor.getContentComponent();
  pane.addMouseListener(new MouseAdapter(){
    public void mouseReleased(    final MouseEvent e){
      if (!myActiveLink) {
        MouseEvent newMouseEvent=SwingUtilities.convertMouseEvent(e.getComponent(),e,contentComponent);
        hintManager.hideAllHints();
        contentComponent.dispatchEvent(newMouseEvent);
      }
    }
    public void mouseExited(    final MouseEvent e){
      hintManager.hideAllHints();
    }
  }
);
  int width=pane.getPreferredSize().width;
  final JLayeredPane layeredPane=editorComponent.getRootPane().getLayeredPane();
  int widthLimit=layeredPane.getWidth() - 10;
  int heightLimit=layeredPane.getHeight() - 5;
  String text=myText;
  if (!isRichHtml(text) && width > widthLimit / 3) {
    text=splitText(pane,text,widthLimit);
    pane.setText(text);
  }
  if (alignToRight) {
    p.x-=pane.getPreferredSize().width;
  }
  p.x+=3;
  p.y+=3;
  width=pane.getPreferredSize().width;
  if (p.x + width >= widthLimit) {
    p.x=widthLimit - width;
  }
  if (p.x < 3) {
    p.x=3;
  }
  final int height=pane.getPreferredSize().height;
  if (p.y + height > heightLimit) {
    p.y=heightLimit - height;
  }
  final LightweightHint hint=new LightweightHint(pane);
  hintManager.showEditorHint(hint,editor,p,HintManager.HIDE_BY_ANY_KEY | HintManager.HIDE_BY_TEXT_CHANGE | HintManager.HIDE_BY_OTHER_HINT| HintManager.HIDE_BY_SCROLLING,0,false);
  return hint;
}
