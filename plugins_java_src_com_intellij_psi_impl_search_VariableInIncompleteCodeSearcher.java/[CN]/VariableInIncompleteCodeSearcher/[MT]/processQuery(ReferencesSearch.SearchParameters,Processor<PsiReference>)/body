{
  final PsiElement refElement=p.getElementToSearch();
  if (!refElement.isValid() || !(refElement instanceof PsiLocalVariable || refElement instanceof PsiParameter))   return;
  final String name=((PsiVariable)refElement).getName();
  if (name == null)   return;
  final SearchScope scope=p.getEffectiveSearchScope();
  if (!(scope instanceof LocalSearchScope))   return;
  PsiElement[] elements=((LocalSearchScope)scope).getScope();
  if (elements == null || elements.length == 0)   return;
  PsiElementProcessor processor=new PsiElementProcessor(){
    @Override public boolean execute(    @NotNull final PsiElement element){
      if (element instanceof PsiJavaCodeReferenceElement) {
        final PsiJavaCodeReferenceElement ref=(PsiJavaCodeReferenceElement)element;
        if (!ref.isQualified() && name.equals(ref.getText()) && ref.resolve() == null && ref.advancedResolve(true).getElement() == refElement) {
          consumer.process(ref);
        }
      }
      return true;
    }
  }
;
  for (  PsiElement element : elements) {
    if (element.getLanguage().isKindOf(JavaLanguage.INSTANCE)) {
      PsiTreeUtil.processElements(element,processor);
    }
  }
}
