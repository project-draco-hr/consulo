def run_wsgi(self, req):
    try:
        try:
            self.refresh()
            virtual = req.env.get('PATH_INFO', '').strip('/')
            tmpl = self.templater(req)
            ctype = tmpl('mimetype', encoding=encoding.encoding)
            ctype = templater.stringify(ctype)
            if (virtual.startswith('static/') or ('static' in req.form)):
                if virtual.startswith('static/'):
                    fname = virtual[7:]
                else:
                    fname = req.form['static'][0]
                static = templater.templatepath('static')
                return (staticfile(static, fname, req),)
            elif (not virtual):
                req.respond(HTTP_OK, ctype)
                return self.makeindex(req, tmpl)
            repos = dict(self.repos)
            while virtual:
                real = repos.get(virtual)
                if real:
                    req.env['REPO_NAME'] = virtual
                    try:
                        repo = hg.repository(self.ui, real)
                        return hgweb(repo).run_wsgi(req)
                    except IOError as inst:
                        msg = inst.strerror
                        raise ErrorResponse(HTTP_SERVER_ERROR, msg)
                    except error.RepoError as inst:
                        raise ErrorResponse(HTTP_SERVER_ERROR, str(inst))
                subdir = (virtual + '/')
                if [r for r in repos if r.startswith(subdir)]:
                    req.respond(HTTP_OK, ctype)
                    return self.makeindex(req, tmpl, subdir)
                up = virtual.rfind('/')
                if (up < 0):
                    break
                virtual = virtual[:up]
            req.respond(HTTP_NOT_FOUND, ctype)
            return tmpl('notfound', repo=virtual)
        except ErrorResponse as err:
            req.respond(err, ctype)
            return tmpl('error', error=(err.message or ''))
    finally:
        tmpl = None
