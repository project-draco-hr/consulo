{
  AbstractProjectViewPane pane=ProjectView.getInstance(myProject).getCurrentProjectViewPane();
  if (pane == null || !ScopeViewPane.ID.equals(pane.getId()) || !DependencyValidationManager.getInstance(myProject).getProblemsScope().getName().equals(pane.getSubId())) {
    return;
  }
  ApplicationManager.getApplication().invokeLater(new Runnable(){
    public void run(){
      if (myProject.isDisposed())       return;
      Set<VirtualFile> filesToRefresh=new THashSet<VirtualFile>(added);
      filesToRefresh.addAll(removed);
      myTreeExpansionMonitor.freeze();
      final DefaultTreeModel treeModel=(DefaultTreeModel)myTree.getModel();
      for (      VirtualFile virtualFile : filesToRefresh) {
        PsiFile psiFile=PsiManager.getInstance(myProject).findFile(virtualFile);
        if (psiFile == null)         continue;
        DefaultMutableTreeNode rootToReload=added.contains(virtualFile) ? myBuilder.addFileNode(psiFile) : myBuilder.removeNode(psiFile,psiFile.getContainingDirectory());
        if (rootToReload != null) {
          TreeUtil.sort(rootToReload,new DependencyNodeComparator());
          treeModel.reload(rootToReload);
          collapseExpand(rootToReload);
        }
 else {
          TreeUtil.sort(treeModel,new DependencyNodeComparator());
          treeModel.reload();
          selectCurrentScope();
        }
      }
      myTreeExpansionMonitor.restore();
    }
  }
,ModalityState.NON_MMODAL);
}
