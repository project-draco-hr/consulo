{
  TreeModelBuilder.clearCaches(myProject);
  myTreeExpansionMonitor.freeze();
  if (scope == null || scope.getValue() == null) {
    scope=myDependencyValidationManager.getProjectProductionScope();
  }
  LOG.assertTrue(scope != null);
  final NamedScopesHolder holder=NamedScopesHolder.getHolder(myProject,scope.getName(),myDependencyValidationManager);
  final PackageSet packageSet=scope.getValue();
  final DependenciesPanel.DependencyPanelSettings settings=new DependenciesPanel.DependencyPanelSettings();
  settings.UI_FILTER_LEGALS=true;
  settings.UI_GROUP_BY_SCOPE_TYPE=false;
  settings.UI_SHOW_FILES=true;
  settings.UI_GROUP_BY_FILES=true;
  final ProjectView projectView=ProjectView.getInstance(myProject);
  settings.UI_FLATTEN_PACKAGES=projectView.isFlattenPackages(ScopeViewPane.ID);
  settings.UI_COMPACT_EMPTY_MIDDLE_PACKAGES=projectView.isHideEmptyMiddlePackages(ScopeViewPane.ID);
  myBuilder=new TreeModelBuilder(myProject,false,new TreeModelBuilder.Marker(){
    public boolean isMarked(    PsiFile file){
      return packageSet.contains(file,holder);
    }
  }
,settings);
  myTree.setModel(myBuilder.build(myProject,showProgress));
  ((DefaultTreeModel)myTree.getModel()).reload();
  myTreeExpansionMonitor.restore();
  TreeModelBuilder.clearCaches(myProject);
}
