{
  myTreeExpansionMonitor.freeze();
  final DefaultMutableTreeNode root=(DefaultMutableTreeNode)myTree.getModel().getRoot();
  root.removeAllChildren();
  if (scope == null) {
    scope=DependencyValidationManager.getInstance(myProject).getProjectScope();
  }
  final PackageSet packageSet=scope.getValue();
  final DependenciesPanel.DependencyPanelSettings settings=new DependenciesPanel.DependencyPanelSettings();
  settings.UI_FILTER_LEGALS=true;
  settings.UI_GROUP_BY_SCOPE_TYPE=false;
  settings.UI_SHOW_FILES=true;
  settings.UI_GROUP_BY_FILES=true;
  final ProjectView projectView=ProjectView.getInstance(myProject);
  settings.UI_FLATTEN_PACKAGES=projectView.isFlattenPackages(ScopeViewPane.ID);
  settings.UI_COMPACT_EMPTY_MIDDLE_PACKAGES=projectView.isHideEmptyMiddlePackages(ScopeViewPane.ID);
  myBuilder=new TreeModelBuilder(myProject,false,new TreeModelBuilder.Marker(){
    public boolean isMarked(    PsiFile file){
      return packageSet.contains(file,holder);
    }
  }
,settings);
  final TreeModelBuilder.TreeModel treeModel=myBuilder.build(myProject,showProgress);
  final DefaultMutableTreeNode scopeRootNode=(DefaultMutableTreeNode)treeModel.getRoot();
  for (int i=scopeRootNode.getChildCount() - 1; i >= 0; i--) {
    root.add((MutableTreeNode)scopeRootNode.getChildAt(i));
  }
  ((DefaultTreeModel)myTree.getModel()).reload();
  myTreeExpansionMonitor.restore();
}
