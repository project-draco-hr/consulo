{
  final PsiClass categoryClass=JavaPsiFacade.getInstance(project).findClass(className,scope);
  if (categoryClass == null)   return Collections.emptyList();
  final MultiMap<String,PsiMethod> map=CachedValuesManager.getManager(project).getCachedValue(categoryClass,METHOD_KEY,new CachedValueProvider<MultiMap<String,PsiMethod>>(){
    @Override public Result<MultiMap<String,PsiMethod>> compute(){
      MultiMap<String,PsiMethod> map=new MultiMap<String,PsiMethod>();
      for (      PsiMethod m : categoryClass.getMethods()) {
        final PsiParameter[] params=m.getParameterList().getParameters();
        if (params.length == 0)         continue;
        final PsiType parameterType=params[0].getType();
        PsiType targetType=TypeConversionUtil.erasure(parameterType);
        map.putValue(targetType.getCanonicalText(),converter.fun(m));
      }
      return Result.create(map,PsiModificationTracker.JAVA_STRUCTURE_MODIFICATION_COUNT,ProjectRootManager.getInstance(project));
    }
  }
,false);
  Set<String> superTypes=ResolveUtil.getAllSuperTypes(psiType,project).keySet();
  List<PsiMethod> result=new ArrayList<PsiMethod>();
  for (  String superType : superTypes) {
    result.addAll(map.get(superType));
  }
  return result;
}
