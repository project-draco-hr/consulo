{
  final DefaultActionGroup group=new DefaultActionGroup();
  myBranchSelectorAction=new BranchSelectorAction(myProject,new Consumer<String>(){
    @Override public void consume(    String s){
      mySelectedBranch=s;
      reloadRequest();
    }
  }
);
  myFilterAction=new FilterAction(myProject);
  group.add(new MyTextFieldAction());
  group.add(myBranchSelectorAction);
  group.add(myFilterAction);
  group.add(new MyCherryPick());
  group.add(new MyRefreshAction());
  final ActionToolbar actionToolbar=ActionManager.getInstance().createActionToolbar("Git log",group,true);
  myJBTable=new JBTable(myTableModel){
    @Override public TableCellRenderer getCellRenderer(    int row,    int column){
      final TableCellRenderer custom=myTableModel.getColumnInfo(column).getRenderer(myTableModel.getValueAt(row,column));
      return custom == null ? super.getCellRenderer(row,column) : custom;
    }
  }
;
  final TableLinkMouseListener tableLinkListener=new TableLinkMouseListener(){
    @Override protected Object tryGetTag(    MouseEvent e,    JTable table,    int row,    int column){
      myDescriptionRenderer.getTableCellRendererComponent(table,table.getValueAt(row,column),false,false,row,column);
      final Rectangle rc=table.getCellRect(row,column,false);
      int index=myDescriptionRenderer.myInner.findFragmentAt(e.getPoint().x - rc.x - myDescriptionRenderer.getCurrentWidth());
      if (index >= 0) {
        return myDescriptionRenderer.myInner.getFragmentTag(index);
      }
      return null;
    }
  }
;
  tableLinkListener.install(myJBTable);
  myJBTable.getExpandableItemsHandler().setEnabled(false);
  myJBTable.setShowGrid(false);
  myJBTable.setModel(myTableModel);
  final JScrollPane scrollPane=ScrollPaneFactory.createScrollPane(myJBTable);
  final ComponentListener listener=new ComponentListener(){
    @Override public void componentResized(    ComponentEvent e){
      if (myStarted) {
        if (adjustColumnSizes(scrollPane)) {
          myJBTable.removeComponentListener(this);
        }
      }
    }
    @Override public void componentMoved(    ComponentEvent e){
    }
    @Override public void componentShown(    ComponentEvent e){
      if (myStarted) {
        if (adjustColumnSizes(scrollPane)) {
          myJBTable.removeComponentListener(this);
        }
      }
    }
    @Override public void componentHidden(    ComponentEvent e){
    }
  }
;
  myJBTable.addComponentListener(listener);
  myMyChangeListener=new GitTableScrollChangeListener(myJBTable,myDetailsCache,myTableModel,new Runnable(){
    @Override public void run(){
      updateSelection();
    }
  }
);
  scrollPane.getViewport().addChangeListener(myMyChangeListener);
  final JPanel wrapper=new JPanel(new BorderLayout());
  wrapper.add(actionToolbar.getComponent(),BorderLayout.NORTH);
  wrapper.add(scrollPane,BorderLayout.CENTER);
  final JComponent specificDetails=myDetails.create();
  final Splitter splitter=new Splitter(true,0.6f);
  splitter.setFirstComponent(wrapper);
  splitter.setSecondComponent(specificDetails);
  splitter.setDividerWidth(4);
  return splitter;
}
