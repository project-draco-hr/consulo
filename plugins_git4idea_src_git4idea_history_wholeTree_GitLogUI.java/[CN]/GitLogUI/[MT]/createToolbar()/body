{
  final DefaultActionGroup group=new DefaultActionGroup();
  myBranchSelectorAction=new BranchSelectorAction(myProject,new Consumer<String>(){
    @Override public void consume(    String s){
      mySelectedBranch=s;
      reloadRequest();
    }
  }
);
  myUserFilterI=new MyFilterUi(myRefresh);
  myUsersFilterAction=new UsersFilterAction(myProject,myUserFilterI);
  myTextFieldAction=new MyTextFieldAction();
  group.add(myTextFieldAction);
  group.add(myBranchSelectorAction);
  group.add(myUsersFilterAction);
  Getter<List<VirtualFile>> rootsGetter=new Getter<List<VirtualFile>>(){
    @Override public List<VirtualFile> get(){
      return myRootsUnderVcs;
    }
  }
;
  myStructureFilter=new MyStructureFilter(myRefresh,rootsGetter);
  myStructureFilterAction=new StructureFilterAction(myProject,myStructureFilter);
  group.add(myStructureFilterAction);
  myDatesFilter=new DatesFilterI(){
    @Override public long getBefore(){
      return mySettings.getDateState().mySelectedTime ? mySettings.getDateState().myTimeBefore : -1;
    }
    @Override public long getAfter(){
      return mySettings.getDateState().mySelectedTime ? mySettings.getDateState().myTimeAfter : -1;
    }
    @Override public boolean isAll(){
      return !mySettings.getDateState().mySelectedTime;
    }
    @Override public long getCommitTimeIfOne(){
      final CommitI commitAt=getCommitIfOneRealSelected();
      return commitAt == null ? -1 : commitAt.getTime();
    }
    @Override public void selectAll(){
      mySettings.getDateState().mySelectedTime=false;
      myRefresh.run();
    }
    @Override public void filter(    long before,    long after,    String presetFilterName){
      final GitLogSettings.MyDateState state=mySettings.getDateState();
      state.myTimeBefore=before;
      state.myTimeAfter=after;
      state.mySelectedTime=true;
      state.myPresetFilter=presetFilterName;
      myRefresh.run();
    }
  }
;
  myDatesFilterAction=new DatesFilterAction(myProject,myDatesFilter);
  group.add(myDatesFilterAction);
  group.add(myFilterStarredAction);
  group.add(getCherryPickAction());
  group.add(ActionManager.getInstance().getAction("ChangesView.CreatePatchFromChanges"));
  myRefreshAction=new MyRefreshAction();
  myRootsAction=new MyRootsAction(rootsGetter,myJBTable);
  group.add(myRootsAction);
  group.add(myMyShowTreeAction);
  group.add(new ToggleAction("Show Details","Display details panel",AllIcons.Actions.ShowSource){
    @Override public boolean isSelected(    AnActionEvent e){
      return !myProject.isDisposed() && mySettings.isShowDetails();
    }
    @Override public void setSelected(    AnActionEvent e,    boolean state){
      setupDetailsSplitter(state);
      if (!myProject.isDisposed()) {
        mySettings.setShowDetails(state);
      }
    }
  }
);
  myMyGotoCommitAction=new MyGotoCommitAction();
  group.add(myMyGotoCommitAction);
  group.add(myRefreshAction);
  group.add(new ContextHelpAction("reference.changesToolWindow.log"));
  myMoreAction=new MoreAction(){
    @Override public void actionPerformed(    AnActionEvent e){
      myMediator.continueLoading();
      myState=StepType.CONTINUE;
      updateMoreVisibility();
    }
  }
;
  group.add(myMoreAction);
  myCopyHashAction=new AnAction("Copy Hash"){
    @Override public void actionPerformed(    AnActionEvent e){
      final int[] selectedRows=myJBTable.getSelectedRows();
      final StringBuilder sb=new StringBuilder();
      for (      int row : selectedRows) {
        final CommitI commitAt=myTableModel.getCommitAt(row);
        if (commitAt == null)         continue;
        if (sb.length() > 0) {
          sb.append(' ');
        }
        sb.append(commitAt.getHash().getString());
      }
      CopyPasteManager.getInstance().setContents(new StringSelection(sb.toString()));
    }
    @Override public void update(    AnActionEvent e){
      e.getPresentation().setEnabled(myJBTable.getSelectedRowCount() > 0);
    }
  }
;
  return ActionManager.getInstance().createActionToolbar("Git log",group,true);
}
