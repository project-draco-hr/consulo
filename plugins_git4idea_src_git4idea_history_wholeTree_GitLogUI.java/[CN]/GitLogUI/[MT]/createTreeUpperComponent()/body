{
  final MyTreeSettings treeSettings=new MyTreeSettings();
  myEqualToHeadr=new JPanel(new BorderLayout()){
    @Override public Dimension getPreferredSize(){
      return getMySize();
    }
    @Override public Dimension getMaximumSize(){
      return getMySize();
    }
    @Override public Dimension getMinimumSize(){
      return getMySize();
    }
    public Dimension getMySize(){
      final int height=myJBTable.getTableHeader().getHeight();
      final int width=myGraphGutter.getComponent().getPreferredSize().width;
      return new Dimension(width,height);
    }
  }
;
  myEqualToHeadr.setBorder(BorderFactory.createMatteBorder(1,0,1,0,UIUtil.getBorderColor()));
  final JPanel wr2=new JPanel(new BorderLayout());
  myOrderLabel=new JLabel();
  myOrderLabel.setForeground(UIUtil.getInactiveTextColor());
  myOrderLabel.setBorder(new EmptyBorder(0,1,0,0));
  wr2.add(myOrderLabel,BorderLayout.WEST);
  wr2.add(treeSettings.getLabel(),BorderLayout.EAST);
  myEqualToHeadr.add(wr2,BorderLayout.CENTER);
  treeSettings.getLabel().setBorder(BorderFactory.createLineBorder(UIUtil.getLabelBackground()));
  treeSettings.getLabel().addMouseListener(new MouseAdapter(){
    @Override public void mouseReleased(    MouseEvent e){
      treeSettings.execute(e);
    }
    @Override public void mouseExited(    MouseEvent e){
      treeSettings.getLabel().setBackground(UIUtil.getLabelBackground());
      treeSettings.getLabel().setBorder(BorderFactory.createLineBorder(UIUtil.getLabelBackground()));
    }
    @Override public void mouseEntered(    MouseEvent e){
      treeSettings.getLabel().setBackground(UIUtil.getLabelBackground().darker());
      treeSettings.getLabel().setBorder(BorderFactory.createLineBorder(Color.black));
    }
  }
);
}
