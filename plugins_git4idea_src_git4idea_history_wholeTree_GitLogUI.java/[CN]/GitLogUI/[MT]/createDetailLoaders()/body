{
  myDetailsLoaderImpl=new Consumer<CommitI>(){
    @Override public void consume(    final CommitI commitI){
      if (commitI == null || commitI.holdsDecoration())       return;
      final GitHeavyCommit gitCommit=fullCommitPresentation(commitI);
      if (gitCommit == null) {
        final MultiMap<VirtualFile,AbstractHash> question=new MultiMap<VirtualFile,AbstractHash>();
        question.putValue(commitI.selectRepository(myRootsUnderVcs),commitI.getHash());
        myDetailsCache.acceptQuestion(question);
      }
 else {
        try {
          myDetailsLoader.take(commitI,gitCommit);
        }
 catch (        Details.AlreadyDisposedException e) {
        }
      }
    }
  }
;
  myDetailsLoader=new GenericDetailsLoader<CommitI,GitHeavyCommit>(myDetailsLoaderImpl,new PairConsumer<CommitI,GitHeavyCommit>(){
    @Override public void consume(    CommitI commitI,    GitHeavyCommit commit){
      myDetailsPanel.setData(commitI.selectRepository(myRootsUnderVcs),commit);
    }
  }
);
  myBranchesLoaderImpl=new Consumer<CommitI>(){
    private Processor<AbstractHash> myRecheck;
{
      myRecheck=new Processor<AbstractHash>(){
        @Override public boolean process(        AbstractHash abstractHash){
          if (myBranchesLoader.getCurrentlySelected() == null)           return false;
          return Comparing.equal(myBranchesLoader.getCurrentlySelected().getHash(),abstractHash);
        }
      }
;
    }
    @Override public void consume(    final CommitI commitI){
      if (commitI == null)       return;
      final VirtualFile root=commitI.selectRepository(myRootsUnderVcs);
      final List<String> branches=myDetailsCache.getBranches(root,commitI.getHash());
      if (branches != null) {
        try {
          myBranchesLoader.take(commitI,branches);
        }
 catch (        Details.AlreadyDisposedException e) {
        }
        return;
      }
      myDetailsCache.loadAndPutBranches(root,commitI.getHash(),new Consumer<List<String>>(){
        @Override public void consume(        List<String> strings){
          if (myProject.isDisposed() || strings == null)           return;
          try {
            myBranchesLoader.take(commitI,strings);
          }
 catch (          Details.AlreadyDisposedException e) {
          }
        }
      }
,myRecheck);
    }
  }
;
  myBranchesLoader=new GenericDetailsLoader<CommitI,List<String>>(myBranchesLoaderImpl,new PairConsumer<CommitI,List<String>>(){
    @Override public void consume(    CommitI commitI,    List<String> strings){
      myDetailsPanel.setBranches(strings);
    }
  }
);
}
