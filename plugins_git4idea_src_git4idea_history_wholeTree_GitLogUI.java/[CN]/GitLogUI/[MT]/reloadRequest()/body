{
  mySettings.setSelectedBranch(mySelectedBranch);
  mySettings.setSelectedUser(myUserFilterI.myFilter);
  mySettings.setSelectedUserIsMe(myUserFilterI.isMeSelected());
  mySettings.setSelectedPaths(myStructureFilter.myAllSelected ? null : myStructureFilter.getSelected());
  myState=StepType.CONTINUE;
  final int was=myTableModel.getRowCount();
  myDetailsCache.resetAsideCaches();
  final Collection<String> startingPoints=mySelectedBranch == null ? Collections.<String>emptyList() : Collections.singletonList(mySelectedBranch);
  final GitLogSettings.MyDateState dateState=mySettings.getDateState();
  Set<ChangesFilter.Filter> dateFilters=null;
  if (dateState.mySelectedTime) {
    dateFilters=applyDateFilter();
  }
  myDescriptionRenderer.resetIcons();
  final boolean commentFilterEmpty=StringUtil.isEmptyOrSpaces(myPreviousFilter);
  myCommentSearchContext.clear();
  myUsersSearchContext.clear();
  final boolean haveFilters=(!(commentFilterEmpty && (myUserFilterI.myFilter == null) && myStructureFilter.myAllSelected&& (!mySettings.getDateState().mySelectedTime))) || myIsFilterByStarOn;
  myThereIsDisordering=haveFilters;
  final boolean topoOrder=(!myThereIsDisordering) && myRootsUnderVcs.size() == 1 ? mySettings.isTopoOrder() : false;
  myOrderLabel.setVisible(false);
  setOrderText(topoOrder);
  if (topoOrder) {
    myTableModel.useNoGroupingStrategy();
  }
 else {
    myTableModel.useDateGroupingStrategy();
  }
  myEqualToHeadr.getParent().setVisible(!myThereIsDisordering);
  if (!haveFilters) {
    myUsersSearchContext.clear();
    myMediator.reload(new RootsHolder(myRootsUnderVcs),startingPoints,null,new GitLogFilters(),topoOrder);
  }
 else   if (myIsFilterByStarOn) {
    myUsersSearchContext.clear();
    myMediator.reloadSetFixed(myMarked,new RootsHolder(myRootsUnderVcs));
  }
 else {
    ChangesFilter.Comment comment=null;
    if (!commentFilterEmpty) {
      final String commentFilter=myCommentSearchContext.preparse(myPreviousFilter);
      comment=new ChangesFilter.Comment(commentFilter);
    }
    Set<ChangesFilter.Filter> userFilters=null;
    if (myUserFilterI.myFilter != null) {
      userFilters=applyUserFilter();
    }
    Map<VirtualFile,ChangesFilter.Filter> structureFilters=null;
    if (!myStructureFilter.myAllSelected) {
      structureFilters=applyStructureFilter();
    }
    final List<String> possibleReferencies=commentFilterEmpty ? null : Arrays.asList(myPreviousFilter.split("[\\s]"));
    myMediator.reload(new RootsHolder(myRootsUnderVcs),startingPoints,null,new GitLogFilters(comment,userFilters,dateFilters,structureFilters,possibleReferencies),topoOrder);
  }
  myCommentSearchContext.addHighlighter(myDetailsPanel.getHtmlHighlighter());
  updateMoreVisibility();
  mySelectionRequestsMerger.request();
  fireTableRepaint();
  myTableModel.fireTableRowsDeleted(0,was);
  myGraphGutter.getComponent().revalidate();
  myGraphGutter.getComponent().repaint();
}
