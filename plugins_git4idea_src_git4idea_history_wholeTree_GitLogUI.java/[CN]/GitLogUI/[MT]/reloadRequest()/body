{
  myState=StepType.CONTINUE;
  final int was=myTableModel.getRowCount();
  myDetailsCache.resetBranchesCache();
  final Collection<String> startingPoints=mySelectedBranch == null ? Collections.<String>emptyList() : Collections.singletonList(mySelectedBranch);
  myDescriptionRenderer.resetIcons();
  final boolean commentFilterEmpty=StringUtil.isEmptyOrSpaces(myPreviousFilter);
  mySearchContext.clear();
  myUsersSearchContext.clear();
  if (commentFilterEmpty && (myUserFilterI.myFilter == null)) {
    myUsersSearchContext.clear();
    myMediator.reload(new RootsHolder(myRootsUnderVcs),startingPoints,Collections.<Collection<ChangesFilter.Filter>>emptyList(),null);
  }
 else {
    final List<Collection<ChangesFilter.Filter>> filters=new ArrayList<Collection<ChangesFilter.Filter>>();
    if (!commentFilterEmpty) {
      final Pair<String,List<String>> preparse=preparse(myPreviousFilter);
      final String first=preparse.getFirst();
      filters.add(Collections.<ChangesFilter.Filter>singletonList(new ChangesFilter.Comment(first)));
    }
    if (myUserFilterI.myFilter != null) {
      final String[] strings=myUserFilterI.myFilter.split(",");
      final List<ChangesFilter.Filter> userFilters=new ArrayList<ChangesFilter.Filter>();
      for (      String string : strings) {
        string=string.trim();
        if (string.length() == 0)         continue;
        myUsersSearchContext.add(string.toLowerCase());
        final String regexp=StringUtil.escapeToRegexp(string);
        userFilters.add(new ChangesFilter.Committer(regexp));
      }
      filters.add(userFilters);
    }
    myMediator.reload(new RootsHolder(myRootsUnderVcs),startingPoints,filters,commentFilterEmpty ? null : myPreviousFilter.split("[\\s]"));
  }
  updateMoreVisibility();
  selectionChanged();
  fireTableRepaint();
  myTableModel.fireTableRowsDeleted(0,was);
}
