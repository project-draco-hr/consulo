{
  final int[] rows=myJBTable.getSelectedRows();
  if (rows.length == 1 && myDetails.isMissingBranchesInfo() && mySelectionSpeedometer.getSpeed() < 0.1) {
    final CommitI commit=myTableModel.getCommitAt(rows[0]);
    final VirtualFile root=commit.selectRepository(myRootsUnderVcs);
    if (commit.holdsDecoration())     return;
    final GitCommit gitCommit=myDetailsCache.convert(root,commit.getHash());
    if (gitCommit == null)     return;
    final List<String> branches=myDetailsCache.getBranches(root,commit.getHash());
    if (branches != null) {
      myDetails.putBranches(gitCommit,branches);
    }
    final Application application=ApplicationManager.getApplication();
    application.executeOnPooledThread(new Runnable(){
      @Override public void run(){
        final CommitI commitI=myTableModel.getCommitAt(rows[0]);
        if (!commit.equals(commitI))         return;
        try {
          final List<String> branches=new LowLevelAccessImpl(myProject,root).getBranchesWithCommit(gitCommit.getHash());
          myDetailsCache.putBranches(root,commit.getHash(),branches);
          application.invokeLater(new Runnable(){
            @Override public void run(){
              final int[] afterRows=myJBTable.getSelectedRows();
              if (myDetails.isMissingBranchesInfo() && afterRows.length == 1 && afterRows[0] == rows[0]) {
                final CommitI afterCommit=myTableModel.getCommitAt(rows[0]);
                if (afterCommit.holdsDecoration() || (!afterCommit.equals(commit)))                 return;
                myDetails.putBranches(gitCommit,branches);
              }
            }
          }
,ModalityState.NON_MODAL,myProject.getDisposed());
        }
 catch (        VcsException e) {
          LOG.info(e);
        }
      }
    }
);
  }
}
