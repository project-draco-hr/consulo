{
  myProject=project;
  myVcs=GitVcs.getInstance(project);
  mySettings=GitLogSettings.getInstance(myProject);
  myMediator=mediator;
  myCommentSearchContext=new CommentSearchContext();
  myUsersSearchContext=new ArrayList<String>();
  myRefs=new HashMap<VirtualFile,CachedRefs>();
  myRecalculatedCommon=new SymbolicRefs();
  myPreviousFilter="";
  myDescriptionRenderer=new DescriptionRenderer();
  myCommentSearchContext.addHighlighter(myDescriptionRenderer.myInner.myWorker);
  myCommitsInRepositoryChangesBrowser=new ArrayList<CommitI>();
  myMarked=new HashMap<AbstractHash,Long>();
  myClearedHighlightingRoots=new HashSet<VirtualFile>();
  mySelectionRequestsMerger=new RequestsMerger(new Runnable(){
    @Override public void run(){
      selectionChanged();
    }
  }
,new Consumer<Runnable>(){
    @Override public void consume(    Runnable runnable){
      SwingUtilities.invokeLater(runnable);
    }
  }
);
  createTableModel();
  myState=StepType.CONTINUE;
  initUiRefresh();
  myAuthorRenderer=new HighLightingRenderer(HIGHLIGHT_TEXT_ATTRIBUTES,SimpleTextAttributes.REGULAR_ATTRIBUTES);
  myMyShowTreeAction=new MyShowTreeAction();
  myIsFilterByStarOn=false;
  myFilterStarredAction=new GitLogShowOnlyStarredCommitsAction(createOnOffForFilterStarred());
  myRefresh=new Runnable(){
    @Override public void run(){
      reloadRequest();
    }
  }
;
  myDetailsSplitter=new Splitter(true,0.6f);
  myDetailsSplitter.setShowDividerControls(true);
}
