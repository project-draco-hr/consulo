{
  myProject=project;
  myMediator=mediator;
  myRefs=new HashMap<VirtualFile,SymbolicRefs>();
  myRecalculatedCommon=new SymbolicRefs();
  myPreviousFilter="";
  myDetails=new MySpecificDetails(myProject);
  myDescriptionRenderer=new DescriptionRenderer();
  mySelectionSpeedometer=new Speedometer(20,400);
  createTableModel();
  mySearchContext=new ArrayList<String>();
  myState=StepType.CONTINUE;
  myUIRefresh=new UIRefresh(){
    @Override public void detailsLoaded(){
      fireTableRepaint();
    }
    @Override public void linesReloaded(    boolean drawMore){
      if ((!StepType.STOP.equals(myState)) && (!StepType.FINISHED.equals(myState))) {
        myState=drawMore ? StepType.PAUSE : StepType.CONTINUE;
      }
      fireTableRepaint();
      updateMoreVisibility();
    }
    @Override public void acceptException(    Exception e){
      LOG.info(e);
    }
    @Override public void finished(){
      myState=StepType.FINISHED;
      updateMoreVisibility();
    }
    @Override public void reportSymbolicRefs(    VirtualFile root,    SymbolicRefs symbolicRefs){
      myRefs.put(root,symbolicRefs);
      myRecalculatedCommon.clear();
      if (myRefs.isEmpty())       return;
      String current=null;
      boolean same=true;
      for (      SymbolicRefs refs : myRefs.values()) {
        myRecalculatedCommon.addLocals(refs.getLocalBranches());
        myRecalculatedCommon.addRemotes(refs.getRemoteBranches());
        myRecalculatedCommon.addTags(refs.getTags());
        if (current == null) {
          current=refs.getCurrent().getFullName();
        }
 else         if (!current.equals(refs.getCurrent().getFullName())) {
          same=false;
        }
      }
      if (same) {
        myRecalculatedCommon.setCurrent(myRefs.values().iterator().next().getCurrent());
      }
      myBranchSelectorAction.setSymbolicRefs(myRecalculatedCommon);
    }
  }
;
}
