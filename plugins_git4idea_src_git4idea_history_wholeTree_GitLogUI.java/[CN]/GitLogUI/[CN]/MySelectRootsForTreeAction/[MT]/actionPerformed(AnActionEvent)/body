{
  final CheckBoxList checkBoxList=new CheckBoxList();
  final List<VirtualFile> order=myTableModel.getOrder();
  final Set<VirtualFile> activeRoots=myTableModel.getActiveRoots();
  final TreeMap<String,Boolean> map=new TreeMap<String,Boolean>();
  for (  VirtualFile virtualFile : order) {
    map.put(virtualFile.getPath(),activeRoots.contains(virtualFile));
  }
  checkBoxList.setStringItems(map);
  final JBPopup popup=JBPopupFactory.getInstance().createComponentPopupBuilder(checkBoxList,checkBoxList).addListener(new JBPopupListener(){
    @Override public void beforeShown(    LightweightWindowEvent event){
      checkBoxList.setSelectedIndex(0);
      IdeFocusManager.getInstance(myProject).requestFocus(checkBoxList,true);
    }
    @Override public void onClosed(    LightweightWindowEvent event){
      if (event.isOk()) {
        final Set<String> paths=new HashSet<String>(ContainedInBranchesConfigDialog.gatherSelected((DefaultListModel)checkBoxList.getModel()));
        if (paths.isEmpty()) {
          myMyShowTreeAction.setSelected(null,false);
          return;
        }
        final HashSet<VirtualFile> set=new HashSet<VirtualFile>(order);
        final Iterator<VirtualFile> iterator=set.iterator();
        while (iterator.hasNext()) {
          VirtualFile file=iterator.next();
          if (!paths.contains(file.getPath())) {
            iterator.remove();
          }
        }
        myTableModel.setActiveRoots(set);
        GitLogSettings.getInstance(myProject).setActiveRoots(paths);
        myGraphGutter.getComponent().revalidate();
        myGraphGutter.getComponent().repaint();
      }
    }
  }
).setTitle("Show graph for:").createPopup();
  final AnAction ok=new AnAction(){
    @Override public void actionPerformed(    AnActionEvent e){
      popup.closeOk(e.getInputEvent());
    }
  }
;
  ok.registerCustomShortcutSet(CommonShortcuts.CTRL_ENTER,checkBoxList);
  ok.registerCustomShortcutSet(CommonShortcuts.ENTER,checkBoxList);
  if (e != null && e.getInputEvent() instanceof MouseEvent) {
    popup.show(new RelativePoint((MouseEvent)e.getInputEvent()));
  }
 else {
    final Dimension dimension=popup.getContent().getPreferredSize();
    final Point at=new Point(20,0);
    popup.show(new RelativePoint(myEqualToHeadr,at));
  }
}
