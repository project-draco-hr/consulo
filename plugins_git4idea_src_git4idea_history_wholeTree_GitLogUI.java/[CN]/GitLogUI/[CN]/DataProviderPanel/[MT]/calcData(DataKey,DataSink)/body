{
  if (VcsDataKeys.CHANGES.equals(key) || GitVcs.GIT_COMMIT.equals(key)) {
    final int[] rows=myJBTable.getSelectedRows();
    if (rows.length != 1)     return;
    int row=rows[0];
    final GitHeavyCommit gitCommit=getCommitAtRow(row);
    if (gitCommit == null)     return;
    if (VcsDataKeys.CHANGES.equals(key)) {
      final List<Change> changes=new ArrayList<Change>(gitCommit.getChanges());
      sink.put(key,changes.toArray(new Change[changes.size()]));
    }
 else     if (GitVcs.GIT_COMMIT.equals(key)) {
      sink.put(key,gitCommit);
    }
  }
 else   if (GitVcs.SELECTED_COMMITS.equals(key)) {
    sink.put(key,getSelectedCommits());
  }
 else   if (GitVcs.COMMIT_DETAILS_PROVIDER.equals(key)) {
    sink.put(key,myCommitDetailsProvider);
  }
 else   if (VcsDataKeys.PRESET_COMMIT_MESSAGE.equals(key)) {
    final int[] rows=myJBTable.getSelectedRows();
    if (rows.length != 1)     return;
    final CommitI commitAt=myTableModel.getCommitAt(rows[0]);
    if (commitAt == null)     return;
    final GitHeavyCommit gitCommit=fullCommitPresentation(commitAt);
    if (gitCommit == null)     return;
    sink.put(key,gitCommit.getDescription());
  }
}
