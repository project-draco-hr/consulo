{
  if (!StringUtil.containsWhitespaces(reference)) {
    final int commitByIteration=findCommitByIteration(reference);
    if (commitByIteration != -1)     return commitByIteration;
  }
  for (  VirtualFile root : myRootsUnderVcs) {
    final SHAHash shaHash=GitChangeUtils.commitExists(myProject,root,reference,null);
    if (shaHash != null) {
      final int commitByIteration=findCommitByIteration(shaHash.getValue());
      if (commitByIteration != -1)       return commitByIteration;
    }
  }
  final Set<AbstractHash> hashes=new HashSet<AbstractHash>();
  for (  VirtualFile root : myRootsUnderVcs) {
    final List<AbstractHash> abstractHashs=GitChangeUtils.commitExistsByComment(myProject,root,reference);
    if (abstractHashs != null) {
      hashes.addAll(abstractHashs);
    }
  }
  if (!hashes.isEmpty()) {
    final int commitByIteration=findCommitByIteration(hashes);
    if (commitByIteration != -1)     return commitByIteration;
  }
  return -1;
}
