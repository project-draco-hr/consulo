{
  final MultiMap<VirtualFile,GitCommit> commits=getSelectedCommitsAndCheck();
  if (commits.isEmpty())   return;
  for (  GitCommit commit : commits.values()) {
    myIdsInProgress.add(commit.getShortHash());
  }
  new Task.Backgroundable(myProject,"Cherry-picking",false){
    public void run(    @NotNull ProgressIndicator indicator){
      boolean autoCommit=GitVcsSettings.getInstance(myProject).isAutoCommitOnCherryPick();
      Map<GitRepository,List<GitCommit>> commitsInRoots=prepareCommitsForCherryPick(commits);
      new GitCherryPicker(myProject,ServiceManager.getService(Git.class),ServiceManager.getService(GitPlatformFacade.class),autoCommit).cherryPick(commitsInRoots);
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          for (          GitCommit commit : commits.values()) {
            myIdsInProgress.remove(commit.getShortHash());
          }
        }
      }
);
    }
  }
.queue();
}
