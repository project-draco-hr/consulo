{
  myCurrentWidth=0;
  final Color bg=isSelected ? UIUtil.getTableSelectionBackground() : getRowBg(row);
  if (value instanceof GitCommit) {
    myPanel.removeAll();
    myPanel.setBackground(bg);
    final GitCommit commit=(GitCommit)value;
    final boolean marked=myMarked.contains(commit.getShortHash());
    final int localSize=commit.getLocalBranches() == null ? 0 : commit.getLocalBranches().size();
    final int remoteSize=commit.getRemoteBranches() == null ? 0 : commit.getRemoteBranches().size();
    final int tagsSize=commit.getTags().size();
    if (marked) {
      myPanel.add(new JLabel(ourMarkIcon));
      myCurrentWidth+=ourMarkIcon.getIconWidth();
    }
    if (localSize + remoteSize > 0) {
      final CommitI commitI=myTableModel.getCommitAt(row);
      final List<Trinity<String,Boolean,Color>> display=getBranchesToDisplay(commit,commitI);
      boolean containsHead=commit.getTags().contains("HEAD");
      final boolean plus=localSize + remoteSize + tagsSize > (display.size() + (containsHead ? 1 : 0));
      for (int i=0; i < display.size(); i++) {
        final Trinity<String,Boolean,Color> trinity=display.get(i);
        boolean withContionuation=containsHead ? false : (plus && (i == display.size() - 1));
        String key=trinity.getFirst() + (withContionuation ? "@" : "");
        Icon icon=myBranchMap.get(key);
        if (icon == null) {
          icon=new CaptionIcon(trinity.getThird(),table.getFont().deriveFont((float)table.getFont().getSize() - 1),trinity.getFirst(),table,CaptionIcon.Form.SQUARE,withContionuation,trinity.getSecond());
          myBranchMap.put(key,icon);
        }
        addOneIcon(table,value,isSelected,hasFocus,row,column,icon);
      }
      if (tagsSize > 0 && containsHead) {
        addTagIcon(table,value,isSelected,hasFocus,row,column,"HEAD",plus);
      }
      myInner.setBackground(bg);
      return myPanel;
    }
    if ((localSize + remoteSize == 0) && (tagsSize > 0)) {
      final String tag=commit.getTags().get(0);
      addTagIcon(table,value,isSelected,hasFocus,row,column,tag,tagsSize > 1);
      myInner.setBackground(bg);
      return myPanel;
    }
    if (marked) {
      myInner.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
      myPanel.add(myInner);
      myInner.setBackground(bg);
      return myPanel;
    }
  }
  myInner.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
  myInner.setBackground(bg);
  return myInner;
}
