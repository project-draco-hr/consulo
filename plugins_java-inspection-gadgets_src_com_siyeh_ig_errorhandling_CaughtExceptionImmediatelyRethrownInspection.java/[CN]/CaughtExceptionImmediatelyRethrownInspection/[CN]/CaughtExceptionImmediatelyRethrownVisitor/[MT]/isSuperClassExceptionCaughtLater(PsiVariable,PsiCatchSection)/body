{
  final PsiTryStatement tryStatement=catchSection.getTryStatement();
  final PsiCatchSection[] catchSections=tryStatement.getCatchSections();
  int index=0;
  while (catchSections[index] != catchSection && index < catchSections.length) {
    index++;
  }
  final PsiType type=parameter.getType();
  final Set<PsiClass> parameterClasses=new THashSet();
  processExceptionClasses(type,new Processor<PsiClass>(){
    @Override public boolean process(    PsiClass aClass){
      parameterClasses.add(aClass);
      return true;
    }
  }
);
  if (parameterClasses.isEmpty()) {
    return false;
  }
  final Ref<Boolean> superClassExceptionType=new Ref(Boolean.FALSE);
  for (int i=index; i < catchSections.length; i++) {
    final PsiCatchSection nextCatchSection=catchSections[i];
    final PsiParameter nextParameter=nextCatchSection.getParameter();
    if (nextParameter == null) {
      continue;
    }
    final PsiType nextType=nextParameter.getType();
    processExceptionClasses(nextType,new Processor<PsiClass>(){
      @Override public boolean process(      PsiClass aClass){
        for (        PsiClass parameterClass : parameterClasses) {
          if (parameterClass.isInheritor(aClass,true)) {
            superClassExceptionType.set(Boolean.TRUE);
            return false;
          }
        }
        return true;
      }
    }
);
    if (superClassExceptionType.get().booleanValue()) {
      return true;
    }
  }
  return false;
}
