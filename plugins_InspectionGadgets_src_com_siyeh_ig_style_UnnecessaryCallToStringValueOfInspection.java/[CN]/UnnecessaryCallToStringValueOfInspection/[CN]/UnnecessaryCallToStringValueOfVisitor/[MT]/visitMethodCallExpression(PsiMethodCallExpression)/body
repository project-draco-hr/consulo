{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  final String referenceName=methodExpression.getReferenceName();
  if (!"valueOf".equals(referenceName)) {
    return;
  }
  final PsiElement parent=expression.getParent();
  if (!(parent instanceof PsiPolyadicExpression)) {
    return;
  }
  final PsiPolyadicExpression polyadicExpression=(PsiPolyadicExpression)parent;
  final PsiType type=polyadicExpression.getType();
  if (!TypeUtils.typeEquals(CommonClassNames.JAVA_LANG_STRING,type)) {
    return;
  }
  final PsiExpression[] operands=polyadicExpression.getOperands();
  int index=-1;
  for (int i=0, length=operands.length; i < length; i++) {
    final PsiExpression operand=operands[i];
    if (expression.equals(operand)) {
      index=i;
    }
  }
  if (index > 0) {
    if (!TypeUtils.typeEquals(CommonClassNames.JAVA_LANG_STRING,operands[index - 1].getType())) {
      return;
    }
  }
 else   if (operands.length > 1) {
    if (!TypeUtils.typeEquals(CommonClassNames.JAVA_LANG_STRING,operands[index + 1].getType())) {
      return;
    }
  }
 else {
    return;
  }
  final PsiExpressionList argumentList=expression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length != 1) {
    return;
  }
  final PsiExpression argument=arguments[0];
  final PsiType argumentType=argument.getType();
  if (argumentType instanceof PsiArrayType) {
    final PsiArrayType arrayType=(PsiArrayType)argumentType;
    final PsiType componentType=arrayType.getComponentType();
    if (PsiType.CHAR.equals(componentType)) {
      return;
    }
  }
  final PsiMethod method=expression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiClass aClass=method.getContainingClass();
  if (aClass == null) {
    return;
  }
  final String qualifiedName=aClass.getQualifiedName();
  if (!CommonClassNames.JAVA_LANG_STRING.equals(qualifiedName)) {
    return;
  }
  registerError(expression,calculateReplacementText(argument));
}
