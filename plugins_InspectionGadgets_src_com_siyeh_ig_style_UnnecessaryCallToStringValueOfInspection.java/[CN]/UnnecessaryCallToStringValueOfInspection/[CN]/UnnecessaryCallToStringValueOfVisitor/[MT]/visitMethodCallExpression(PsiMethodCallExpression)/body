{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  final String referenceName=methodExpression.getReferenceName();
  if (!"valueOf".equals(referenceName)) {
    return;
  }
  final PsiElement parent=expression.getParent();
  if (!(parent instanceof PsiBinaryExpression)) {
    return;
  }
  final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)parent;
  final PsiType type=binaryExpression.getType();
  if (!TypeUtils.typeEquals(CommonClassNames.JAVA_LANG_STRING,type)) {
    return;
  }
  final PsiExpression lhs=binaryExpression.getLOperand();
  if (lhs == expression) {
    final PsiExpression rhs=binaryExpression.getROperand();
    if (rhs == null || !TypeUtils.typeEquals(CommonClassNames.JAVA_LANG_STRING,rhs.getType())) {
      return;
    }
  }
 else   if (!TypeUtils.typeEquals(CommonClassNames.JAVA_LANG_STRING,lhs.getType())) {
    return;
  }
  final PsiExpressionList argumentList=expression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length != 1) {
    return;
  }
  final PsiExpression argument=arguments[0];
  final PsiType argumentType=argument.getType();
  if (argumentType instanceof PsiArrayType) {
    final PsiArrayType arrayType=(PsiArrayType)argumentType;
    final PsiType componentType=arrayType.getComponentType();
    if (PsiType.CHAR.equals(componentType)) {
      return;
    }
  }
  final PsiMethod method=expression.resolveMethod();
  if (method == null) {
    return;
  }
  final PsiClass aClass=method.getContainingClass();
  if (aClass == null) {
    return;
  }
  final String qualifiedName=aClass.getQualifiedName();
  if (!CommonClassNames.JAVA_LANG_STRING.equals(qualifiedName)) {
    return;
  }
  registerError(expression,argument);
}
