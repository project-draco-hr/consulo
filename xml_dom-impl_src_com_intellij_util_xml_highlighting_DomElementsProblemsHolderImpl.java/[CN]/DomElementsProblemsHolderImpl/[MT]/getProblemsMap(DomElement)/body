{
  final Map<Class<? extends DomElementsInspection>,List<DomElementProblemDescriptor>> map=myCachedChildrenErrors.get(domElement);
  if (map != null) {
    return map;
  }
  final Map<Class<? extends DomElementsInspection>,List<DomElementProblemDescriptor>> problems=new THashMap<Class<? extends DomElementsInspection>,List<DomElementProblemDescriptor>>();
  if (domElement == myElement) {
    for (    Map<Class<? extends DomElementsInspection>,List<DomElementProblemDescriptor>> listMap : myCachedErrors.values()) {
      mergeMaps(problems,listMap);
    }
  }
 else {
    mergeMaps(problems,myCachedErrors.get(domElement));
    if (DomUtil.hasXml(domElement)) {
      domElement.acceptChildren(new DomElementVisitor(){
        public void visitDomElement(        DomElement element){
          mergeMaps(problems,getProblemsMap(element));
        }
      }
);
    }
  }
  myCachedChildrenErrors.put(domElement,problems);
  return problems;
}
