{
  myName=name;
  myTotalFrames=totalFrames;
  myCycleLength=cycleLength;
  myRepeatable=repeatable;
  myForward=forward;
  myCurrentFrame=forward ? 0 : totalFrames;
  Application app=ApplicationManager.getApplication();
  myTimer=(app != null && app.isUnitTestMode()) ? new Timer(myName,myCycleLength / myTotalFrames){
{
      dispose();
    }
    @Override public boolean isRunning(){
      return true;
    }
    @Override protected void onTimer() throws InterruptedException {
    }
  }
 : new Timer(myName,myCycleLength / myTotalFrames){
    protected void onTimer() throws InterruptedException {
      boolean repaint=true;
      if (!isAnimated()) {
        if (myLastAnimated) {
          myCurrentFrame=myForward ? 0 : myTotalFrames;
          myQueuedFrames=0;
          myLastAnimated=false;
        }
 else {
          repaint=false;
        }
      }
 else {
        myLastAnimated=true;
        if (myQueuedFrames > myTotalFrames)         return;
        boolean toNextFrame=myForward ? myCurrentFrame + 1 < myTotalFrames : myCurrentFrame - 1 >= 0;
        if (toNextFrame && myForward) {
          myCurrentFrame++;
        }
 else         if (toNextFrame && !myForward) {
          myCurrentFrame--;
        }
 else {
          if (myRepeatable) {
            if (maxRepeatCount == -1 || myRepeatCount < maxRepeatCount) {
              myRepeatCount++;
              myCurrentFrame=0;
              if (interCycleGap > 0) {
                Thread.sleep(interCycleGap - getSpan());
              }
            }
 else {
              repaint=false;
              suspend();
              myRepeatCount=0;
              cycleEnd();
            }
          }
 else {
            repaint=false;
            suspend();
            cycleEnd();
          }
        }
      }
      if (repaint) {
        myQueuedFrames++;
        SwingUtilities.invokeLater(new Runnable(){
          public void run(){
            myQueuedFrames--;
            paintNow(myCurrentFrame,(float)myTotalFrames,(float)myCycleLength);
          }
        }
);
      }
    }
  }
;
}
