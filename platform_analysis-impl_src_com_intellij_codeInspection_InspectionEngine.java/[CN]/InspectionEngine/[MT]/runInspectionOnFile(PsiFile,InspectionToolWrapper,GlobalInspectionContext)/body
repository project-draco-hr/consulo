{
  final InspectionManager inspectionManager=InspectionManager.getInstance(file.getProject());
  toolWrapper.initialize(inspectionContext);
  RefManagerImpl refManager=(RefManagerImpl)inspectionContext.getRefManager();
  refManager.inspectionReadActionStarted();
  try {
    if (toolWrapper instanceof LocalInspectionToolWrapper) {
      LocalInspectionTool localTool=((LocalInspectionToolWrapper)toolWrapper).getTool();
      return inspect(Collections.singletonList(localTool),file,inspectionManager,false,false,new EmptyProgressIndicator());
    }
    if (toolWrapper instanceof GlobalInspectionToolWrapper) {
      final GlobalInspectionTool globalTool=((GlobalInspectionToolWrapper)toolWrapper).getTool();
      final List<ProblemDescriptor> descriptors=new ArrayList<ProblemDescriptor>();
      if (globalTool instanceof GlobalSimpleInspectionTool) {
        GlobalSimpleInspectionTool simpleTool=(GlobalSimpleInspectionTool)globalTool;
        ProblemsHolder problemsHolder=new ProblemsHolder(inspectionManager,file,false);
        ProblemDescriptionsProcessor collectProcessor=new ProblemDescriptionsProcessor(){
          @Nullable @Override public CommonProblemDescriptor[] getDescriptions(          @NotNull RefEntity refEntity){
            return descriptors.toArray(new CommonProblemDescriptor[descriptors.size()]);
          }
          @Override public void ignoreElement(          @NotNull RefEntity refEntity){
            throw new RuntimeException();
          }
          @Override public void addProblemElement(          @Nullable RefEntity refEntity,          @NotNull CommonProblemDescriptor... commonProblemDescriptors){
            if (!(refEntity instanceof RefElement))             return;
            PsiElement element=((RefElement)refEntity).getElement();
            convertToProblemDescriptors(element,commonProblemDescriptors,descriptors);
          }
          @Override public RefEntity getElement(          @NotNull CommonProblemDescriptor descriptor){
            throw new RuntimeException();
          }
        }
;
        simpleTool.checkFile(file,inspectionManager,problemsHolder,inspectionContext,collectProcessor);
        return descriptors;
      }
      RefElement fileRef=refManager.getReference(file);
      final AnalysisScope scope=new AnalysisScope(file);
      fileRef.accept(new RefVisitor(){
        @Override public void visitElement(        @NotNull RefEntity elem){
          CommonProblemDescriptor[] elemDescriptors=globalTool.checkElement(elem,scope,inspectionManager,inspectionContext);
          if (descriptors != null) {
            convertToProblemDescriptors(file,elemDescriptors,descriptors);
          }
          for (          RefEntity child : elem.getChildren()) {
            child.accept(this);
          }
        }
      }
);
      return descriptors;
    }
  }
  finally {
    refManager.inspectionReadActionFinished();
    toolWrapper.cleanup(file.getProject());
    inspectionContext.cleanup();
  }
  return Collections.emptyList();
}
