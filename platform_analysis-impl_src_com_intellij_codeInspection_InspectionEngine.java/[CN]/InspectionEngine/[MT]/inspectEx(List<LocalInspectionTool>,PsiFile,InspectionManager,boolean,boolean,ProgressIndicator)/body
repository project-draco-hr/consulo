{
  if (tools.isEmpty())   return Collections.emptyMap();
  final Map<String,List<ProblemDescriptor>> resultDescriptors=new ConcurrentHashMap<String,List<ProblemDescriptor>>();
  final List<PsiElement> elements=new ArrayList<PsiElement>();
  TextRange range=file.getTextRange();
  final LocalInspectionToolSession session=new LocalInspectionToolSession(file,range.getStartOffset(),range.getEndOffset());
  Divider.divideInsideAndOutside(file,range.getStartOffset(),range.getEndOffset(),range,elements,new ArrayList<ProperTextRange>(),Collections.<PsiElement>emptyList(),Collections.<ProperTextRange>emptyList(),true,Condition.TRUE);
  boolean result=JobLauncher.getInstance().invokeConcurrentlyUnderProgress(tools,indicator,failFastOnAcquireReadAction,new Processor<LocalInspectionTool>(){
    @Override public boolean process(    final LocalInspectionTool tool){
      ProblemsHolder holder=new ProblemsHolder(iManager,file,isOnTheFly);
      createVisitorAndAcceptElements(tool,holder,isOnTheFly,session,elements,null);
      tool.inspectionFinished(session,holder);
      if (holder.hasResults()) {
        resultDescriptors.put(tool.getShortName(),ContainerUtil.filter(holder.getResults(),new Condition<ProblemDescriptor>(){
          @Override public boolean value(          ProblemDescriptor descriptor){
            PsiElement element=descriptor.getPsiElement();
            if (element != null) {
              return !SuppressionUtil.inspectionResultSuppressed(element,tool);
            }
            return true;
          }
        }
));
      }
      return true;
    }
  }
);
  return resultDescriptors;
}
