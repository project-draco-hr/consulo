{
  return with(new PatternCondition<PsiMethod>("definedInClass"){
    public boolean accepts(    @NotNull final PsiMethod psiMethod,    final ProcessingContext context){
      if (pattern.accepts(psiMethod.getContainingClass())) {
        return true;
      }
      final Ref<Boolean> ref=new Ref<Boolean>(Boolean.FALSE);
      SuperMethodsSearch.search(psiMethod,null,true,false).forEach(new Processor<MethodSignatureBackedByPsiMethod>(){
        public boolean process(        final MethodSignatureBackedByPsiMethod methodSignatureBackedByPsiMethod){
          if (pattern.accepts(methodSignatureBackedByPsiMethod.getMethod().getContainingClass())) {
            ref.set(Boolean.TRUE);
            return false;
          }
          return true;
        }
      }
);
      return ref.get().booleanValue();
    }
  }
);
}
