{
  return with(new PatternCondition<PsiMethod>("withParameters"){
    public boolean accepts(    @NotNull final PsiMethod psiMethod,    final MatchingContext matchingContext,    @NotNull final TraverseContext traverseContext){
      final PsiParameterList parameterList=psiMethod.getParameterList();
      int dotsIndex=-1;
      while (++dotsIndex < types.length) {
        if (Comparing.equal("..",types[dotsIndex]))         break;
      }
      if (dotsIndex == types.length && parameterList.getParametersCount() != dotsIndex || dotsIndex < types.length && parameterList.getParametersCount() < dotsIndex) {
        return false;
      }
      if (dotsIndex > 0) {
        final PsiParameter[] psiParameters=parameterList.getParameters();
        for (int i=0; i < dotsIndex; i++) {
          if (!Comparing.equal("?",types[i]) && !types[i].equals(psiParameters[i].getType().getCanonicalText())) {
            return false;
          }
        }
      }
      return true;
    }
  }
);
}
