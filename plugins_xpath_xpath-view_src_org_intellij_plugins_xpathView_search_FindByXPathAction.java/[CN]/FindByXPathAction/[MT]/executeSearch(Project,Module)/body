{
  final Config settings=XPathAppComponent.getInstance().getConfig();
  final XPathProjectComponent projectComponent=XPathProjectComponent.getInstance(project);
  final FindByExpressionDialog dlg=new FindByExpressionDialog(project,settings,projectComponent.getFindHistory(),module);
  if (!dlg.show(null)) {
    return;
  }
  final SearchScope scope=dlg.getScope();
  settings.MATCH_RECURSIVELY=dlg.isMatchRecursively();
  settings.SEARCH_SCOPE=dlg.getScope();
  final InputExpressionDialog.Context context=dlg.getContext();
  projectComponent.addFindHistory(context.input);
  final String expression=context.input.expression;
  if (!validateExpression(project,expression)) {
    return;
  }
  final UsageViewPresentation presentation=new UsageViewPresentation();
  presentation.setTargetsNodeText(settings.MATCH_RECURSIVELY ? "Pattern" : "Expression");
  presentation.setCodeUsages(false);
  presentation.setCodeUsagesString("Result");
  presentation.setNonCodeUsagesString("Result");
  presentation.setUsagesString("XPath Result");
  presentation.setUsagesWord("match");
  presentation.setTabText("XPath");
  presentation.setScopeText(scope.getName());
  presentation.setOpenInNewTab(settings.OPEN_NEW_TAB);
  final FindUsagesProcessPresentation processPresentation=new FindUsagesProcessPresentation();
  processPresentation.setProgressIndicatorFactory(new Factory<ProgressIndicator>(){
    public ProgressIndicator create(){
      return new FindProgressIndicator(project,scope.getName());
    }
  }
);
  processPresentation.setShowPanelIfOnlyOneUsage(true);
  processPresentation.setShowNotFoundMessage(true);
  final XPathEvalAction.MyUsageTarget usageTarget=new XPathEvalAction.MyUsageTarget(context.input.expression,null);
  final UsageTarget[] usageTargets=new UsageTarget[]{usageTarget};
  final Factory<UsageSearcher> searcherFactory=new Factory<UsageSearcher>(){
    public UsageSearcher create(){
      return new XPathUsageSearcher(project,context.input,scope,settings.MATCH_RECURSIVELY);
    }
  }
;
  final UsageViewManager.UsageViewStateListener stateListener=new UsageViewManager.UsageViewStateListener(){
    public void usageViewCreated(    @NotNull UsageView usageView){
      usageView.addButtonToLowerPane(new MyEditExpressionAction(project,module),"&Edit Expression");
    }
    public void findingUsagesFinished(    @NotNull UsageView usageView){
    }
  }
;
  UsageViewManager.getInstance(project).searchAndShowUsages(usageTargets,searcherFactory,processPresentation,presentation,stateListener);
}
