{
  PsiLocalVariable localVariable=null;
  if (expr instanceof PsiReferenceExpression) {
    PsiElement ref=((PsiReferenceExpression)expr).resolve();
    if (ref instanceof PsiLocalVariable) {
      localVariable=(PsiLocalVariable)ref;
    }
  }
  if (localVariable == null) {
    if (!isStaticFinalInitializer(expr)) {
      String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("selected.expression.cannot.be.a.constant.initializer"));
      CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,message,getHelpID(),project);
      return null;
    }
  }
 else {
    final PsiExpression initializer=localVariable.getInitializer();
    if (initializer == null) {
      String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("variable.does.not.have.an.initializer",localVariable.getName()));
      CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,message,getHelpID(),project);
      return null;
    }
    if (!isStaticFinalInitializer(initializer)) {
      String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("initializer.for.variable.cannot.be.a.constant.initializer",localVariable.getName()));
      CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,message,getHelpID(),project);
      return null;
    }
  }
  IntroduceConstantDialog dialog=new IntroduceConstantDialog(project,parentClass,expr,localVariable,false,occurences,getParentClass(),new TypeSelectorManagerImpl(project,type,expr,occurences));
  dialog.show();
  if (!dialog.isOK()) {
    if (occurences.length > 1) {
      WindowManager.getInstance().getStatusBar(project).setInfo(RefactoringBundle.message("press.escape.to.remove.the.highlighting"));
    }
    return null;
  }
  return new Settings(dialog.getEnteredName(),dialog.isReplaceAllOccurrences(),true,true,BaseExpressionToFieldHandler.InitializationPlace.IN_FIELD_DECLARATION,dialog.getFieldVisibility(),localVariable,dialog.getSelectedType(),dialog.isDeleteVariable(),dialog.getDestinationClass(),dialog.isAnnotateAsNonNls());
}
