{
  final JavaResolveResult resolved=methodCallExpr.resolveMethodGenerics();
  final PsiElement r=resolved.getElement();
  if (!(r instanceof PsiMethod))   return true;
  PsiMethod methodCalled=(PsiMethod)r;
  PsiType returnType=methodCalled.getReturnType();
  if (returnType == null)   return true;
  Collection<PsiMethod> overrides=new THashSet<PsiMethod>(OverridingMethodsSearch.search(methodCalled,parent.getScope().toSearchScope(),true).findAll());
  overrides.add(methodCalled);
  final boolean[] result={true};
  for (  PsiMethod override : overrides) {
    if (!result[0])     break;
    final PsiCodeBlock body=override.getBody();
    if (body == null)     continue;
    body.accept(new JavaRecursiveElementWalkingVisitor(){
      @Override public void visitAnonymousClass(      PsiAnonymousClass aClass){
      }
      public void visitReturnStatement(      final PsiReturnStatement statement){
        PsiExpression returnValue=statement.getReturnValue();
        if (returnValue == null)         return;
        PsiSubstitutor substitutor=resolved.getSubstitutor().putAll(parentSubstitutor);
        if (!handToProcessor(returnValue,processor,parent,substitutor)) {
          stopWalking();
          result[0]=false;
        }
      }
    }
);
  }
  return result[0];
}
