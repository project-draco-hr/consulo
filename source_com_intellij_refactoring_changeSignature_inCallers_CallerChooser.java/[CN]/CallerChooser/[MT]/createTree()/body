{
  final CheckedTreeNode root=new CheckedTreeNode(null);
  myRoot=new MethodNode(myMethod);
  root.add(myRoot);
  final CheckboxTree.CheckboxTreeCellRenderer cellRenderer=new CheckboxTree.CheckboxTreeCellRenderer(){
    public void customizeCellRenderer(    JTree tree,    Object value,    boolean selected,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      if (value instanceof MethodNode) {
        ((MethodNode)value).customizeRenderer(getTextRenderer());
      }
    }
  }
;
  Tree tree=new CheckboxTree(cellRenderer,root){
    protected void checkNode(    CheckedTreeNode node,    boolean checked){
      node.setChecked(checked);
      if (checked) {
        CheckedTreeNode parent=(CheckedTreeNode)node.getParent();
        while (parent != null) {
          parent.setChecked(true);
          parent=(CheckedTreeNode)parent.getParent();
        }
      }
 else {
        uncheckChildren(node);
      }
      repaint();
    }
  }
;
  tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  tree.getSelectionModel().setSelectionPath(new TreePath(myRoot.getPath()));
  tree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      final TreePath path=e.getPath();
      if (path != null) {
        MethodNode node=(MethodNode)path.getLastPathComponent();
        final PsiMethod method=node.getMethod();
        myAlarm.cancelAllRequests();
        myAlarm.addRequest(new Runnable(){
          public void run(){
            myEditorField.setText(getText(method));
          }
        }
,300);
      }
    }
  }
);
  return tree;
}
