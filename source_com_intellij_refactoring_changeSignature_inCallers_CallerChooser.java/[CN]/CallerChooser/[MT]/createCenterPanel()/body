{
  Splitter splitter=new Splitter(false,((float)0.6));
  JPanel result=new JPanel(new BorderLayout());
  if (myTree == null) {
    myTree=createTree();
  }
 else {
    final CheckedTreeNode root=(CheckedTreeNode)myTree.getModel().getRoot();
    myRoot=(MethodNode)root.getFirstChild();
  }
  myTreeSelectionListener=new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      final TreePath path=e.getPath();
      if (path != null) {
        MethodNode node=(MethodNode)path.getLastPathComponent();
        final PsiMethod method=node.getMethod();
        myAlarm.cancelAllRequests();
        myAlarm.addRequest(new Runnable(){
          public void run(){
            myEditorField.setText(getText(method));
          }
        }
,300);
      }
    }
  }
;
  myTree.getSelectionModel().addTreeSelectionListener(myTreeSelectionListener);
  JScrollPane scrollPane=new JScrollPane(myTree);
  splitter.setFirstComponent(scrollPane);
  myEditorField=createCallSitesViewer();
  final TreePath selectionPath=myTree.getSelectionPath();
  if (selectionPath != null) {
    CheckedTreeNode node=(CheckedTreeNode)selectionPath.getLastPathComponent();
    if (node instanceof MethodNode) {
      myEditorField.setText(getText(((MethodNode)node).getMethod()));
    }
 else     myEditorField.setText(getText(myMethod));
  }
 else   myEditorField.setText(getText(myMethod));
  myEditorField.setBorder(IdeBorderFactory.createBorder());
  splitter.setSecondComponent(myEditorField);
  result.add(splitter);
  return result;
}
