{
  final FormattingDocumentModel docModel=model.getDocumentModel();
  final Block block=model.getRootBlock();
  final FormatProcessor processor=new FormatProcessor(docModel,block,settings,indentOptions,affectedRange);
  final String text=model.getDocumentModel().getText();
  int lineStartOffset=CharArrayUtil.shiftBackward(text,offset,"\t ");
  if (lineStartOffset != offset) {
    lineStartOffset=CharArrayUtil.shiftForward(text,lineStartOffset,"\n");
  }
  LOG.assertTrue(model.getDocumentModel().getLineNumber(offset) == model.getDocumentModel().getLineNumber(lineStartOffset));
  final WhiteSpace whiteSpace=processor.getWhiteSpaceBefore(offset);
  processor.setAllWhiteSpacesAreReadOnly();
  if (whiteSpace == null) {
    return offset;
  }
  whiteSpace.setLineFeedsAreReadOnly(true);
  final IndentInfo indent;
  if (docModel.getLineNumber(offset) == docModel.getLineNumber(whiteSpace.getTextRange().getEndOffset())) {
    whiteSpace.setReadOnly(false);
    processor.formatWithoutRealModifications();
    indent=new IndentInfo(0,whiteSpace.getIndentOffset(),whiteSpace.getSpaces());
  }
 else {
    indent=processor.getIndentAt(offset);
  }
  final String newWS=whiteSpace.generateWhiteSpace(indentOptions,lineStartOffset,indent);
  model.replaceWhiteSpace(whiteSpace.getTextRange(),newWS,block.getTextRange().getLength());
  return whiteSpace.getTextRange().getStartOffset() + CharArrayUtil.shiftForward(newWS.toCharArray(),lineStartOffset - whiteSpace.getTextRange().getStartOffset()," \t");
}
