{
  final FormatProcessor processor=new FormatProcessor(model,block,settings,indentOptions,affectedRange);
  WhiteSpace whiteSpace=processor.getWhiteSpaceBefore(offset);
  processor.setAllWhiteSpacesAreReadOnly();
  if (whiteSpace == null) {
    return offset;
  }
  whiteSpace.setReadOnly(false);
  whiteSpace.setLineFeedsAreReadOnly(true);
  final IndentInfo indent;
  if (model.getLineNumber(offset) == model.getLineNumber(whiteSpace.getTextRange().getEndOffset())) {
    processor.formatWithoutRealModifications();
    final String newWS=whiteSpace.generateWhiteSpace(indentOptions);
    model.replaceWhiteSpace(whiteSpace.getTextRange(),newWS);
    indent=new IndentInfo(0,whiteSpace.getIndentOffset(),whiteSpace.getSpaces());
    int delta=offset - whiteSpace.getTextRange().getEndOffset();
    if (delta >= 0) {
      return whiteSpace.getTextRange().getStartOffset() + newWS.length() + delta;
    }
    int result=whiteSpace.getTextRange().getStartOffset();
    final int lineFeeds=getLineFeedsToModified(model,offset,whiteSpace.getTextRange().getStartOffset());
    result+=(lineFeeds - 1) + (1 + indent.getTotalSpaces());
    return result;
  }
 else {
    final int lineFeeds=getLineFeedsToModified(model,offset,whiteSpace.getTextRange().getStartOffset());
    indent=processor.getIndentAt(offset);
    String newWS=whiteSpace.generateWhiteSpace(indentOptions,offset,indent,model);
    model.replaceWhiteSpace(whiteSpace.getTextRange(),newWS);
    int delta=offset - whiteSpace.getTextRange().getEndOffset();
    if (delta >= 0) {
      return whiteSpace.getTextRange().getStartOffset() + newWS.length() + delta+ 1;
    }
    int result=whiteSpace.getTextRange().getStartOffset();
    result+=lineFeeds * (1 + indent.getTotalSpaces());
    return result;
  }
}
