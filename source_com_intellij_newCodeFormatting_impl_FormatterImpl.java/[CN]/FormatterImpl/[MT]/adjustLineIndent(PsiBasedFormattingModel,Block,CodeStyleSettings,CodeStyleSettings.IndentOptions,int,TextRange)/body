{
  final FormatProcessor processor=new FormatProcessor(model,block,settings,indentOptions,affectedRange);
  final WhiteSpace whiteSpace=processor.getWhiteSpaceBefore(offset);
  processor.setAllWhiteSpacesAreReadOnly();
  if (whiteSpace == null) {
    return offset;
  }
  whiteSpace.setReadOnly(false);
  whiteSpace.setLineFeedsAreReadOnly(true);
  final IndentInfo indent;
  if (model.getLineNumber(offset) == model.getLineNumber(whiteSpace.getTextRange().getEndOffset())) {
    processor.formatWithoutRealModifications();
    indent=new IndentInfo(0,whiteSpace.getIndentOffset(),whiteSpace.getSpaces());
  }
 else {
    indent=processor.getIndentAt(offset);
  }
  final Pair<String,Integer> newWS=whiteSpace.generateWhiteSpace(indentOptions,offset,indent);
  final IncorrectOperationException ex[]=new IncorrectOperationException[1];
  CommandProcessor.getInstance().executeCommand(model.getProject(),new Runnable(){
    public void run(){
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        public void run(){
          try {
            model.replaceWhiteSpace(whiteSpace.getTextRange(),newWS.getFirst(),block.getTextRange(),false);
            model.commitChanges();
          }
 catch (          IncorrectOperationException e) {
            ex[0]=e;
          }
        }
      }
);
    }
  }
,"Formatting",null);
  if (ex[0] != null)   throw ex[0];
  return newWS.getSecond().intValue();
}
