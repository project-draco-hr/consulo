{
  if (!ParserUtils.getToken(builder,mAT)) {
    return false;
  }
  if (!ParserUtils.getToken(builder,kINTERFACE)) {
    return false;
  }
  if (!ParserUtils.getToken(builder,mIDENT)) {
    builder.error(GroovyBundle.message("annotation.definition.qualified.name.expected"));
    return false;
  }
  PsiBuilder.Marker abMarker=builder.mark();
  if (!ParserUtils.getToken(builder,mLCURLY,GroovyBundle.message("lcurly.expected"))) {
    abMarker.rollbackTo();
    return false;
  }
  Separators.parse(builder);
  while (!builder.eof() && builder.getTokenType() != mRCURLY) {
    if (!parseAnnotationMember(builder,parser))     builder.advanceLexer();
    Separators.parse(builder);
  }
  ParserUtils.getToken(builder,mRCURLY,GroovyBundle.message("rcurly.expected"));
  abMarker.done(CLASS_BODY);
  return true;
}
