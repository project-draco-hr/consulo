{
  clearInsertionPoint();
  canInsert=false;
  Point pt=dtde.getLocation();
  TreePath path=targetTree.getClosestPathForLocation(pt.x,pt.y);
  Transferable t=dtde.getTransferable();
  DataFlavor[] flavors=t.getTransferDataFlavors();
  for (  DataFlavor flavor : flavors) {
    if (t.isDataFlavorSupported(flavor)) {
      DefaultMutableTreeNode dstNode=(DefaultMutableTreeNode)path.getLastPathComponent();
      Transferable tx=dtde.getTransferable();
      TreePath[] tr=null;
      try {
        Object o=tx.getTransferData(TransferableTreeNode.treePathFlavor);
        tr=(TreePath[])o;
      }
 catch (      UnsupportedFlavorException e) {
        e.printStackTrace();
        dtde.rejectDrop();
        return;
      }
catch (      IOException e) {
        e.printStackTrace();
        dtde.rejectDrop();
        return;
      }
      if (tr == null) {
        dtde.rejectDrop();
        return;
      }
      final DefaultMutableTreeNode srcNode=(DefaultMutableTreeNode)tr[0].getLastPathComponent();
      int srcIndex=targetTree.haveCommonAncestors(srcNode,dstNode);
      if (srcIndex < 0) {
        LOG.debug("reject drop onto " + dstNode + "; parent of "+ srcNode+ " is different");
        dtde.rejectDrop();
        return;
      }
 else {
        DefaultMutableTreeNode parent=(DefaultMutableTreeNode)dstNode.getParent();
        DefaultMutableTreeNode srcInCurrentTree=(DefaultMutableTreeNode)parent.getChildAt(srcIndex);
        int dstRow=parent.getIndex(dstNode);
        boolean before=true;
        if (srcIndex < dstRow) {
          LOG.debug("drop: move " + srcIndex + ":"+ srcInCurrentTree+ " after "+ dstRow+ ":"+ dstNode);
          before=false;
        }
 else         if (srcIndex == dstRow) {
          LOG.debug("reject drop: item onto itself");
          dtde.rejectDrop();
          return;
        }
 else {
          LOG.debug("drop: move " + srcIndex + ":"+ srcInCurrentTree+ " before "+ dstRow+ ":"+ dstNode);
        }
        targetTree.moveSelection(dstRow,before);
        lrp.setRearrangementOccurred(true);
        dtde.acceptDrop(dtde.getDropAction());
        dtde.dropComplete(true);
        return;
      }
    }
  }
  dtde.rejectDrop();
}
