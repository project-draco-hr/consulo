{
  CodeInsightSettings settings=CodeInsightSettings.getInstance();
  if (!settings.SMART_END_ACTION) {
    if (myOriginalHandler != null) {
      myOriginalHandler.execute(editor,dataContext);
    }
    return;
  }
  final Project project=PlatformDataKeys.PROJECT.getData(DataManager.getInstance().getDataContext(editor.getComponent()));
  if (project == null) {
    if (myOriginalHandler != null) {
      myOriginalHandler.execute(editor,dataContext);
    }
    return;
  }
  final Document document=editor.getDocument();
  final PsiFile file=PsiDocumentManager.getInstance(project).getPsiFile(document);
  if (file == null) {
    if (myOriginalHandler != null) {
      myOriginalHandler.execute(editor,dataContext);
    }
    return;
  }
  final EditorNavigationDelegate[] extensions=EditorNavigationDelegate.EP_NAME.getExtensions();
  if (extensions != null) {
    for (    EditorNavigationDelegate delegate : extensions) {
      if (delegate.navigateToLineEnd(editor,dataContext) == EditorNavigationDelegate.Result.STOP) {
        return;
      }
    }
  }
  final CaretModel caretModel=editor.getCaretModel();
  final int caretOffset=caretModel.getOffset();
  CharSequence chars=editor.getDocument().getCharsSequence();
  int length=editor.getDocument().getTextLength();
  if (caretOffset < length) {
    final int offset1=CharArrayUtil.shiftBackward(chars,caretOffset - 1," \t");
    if (offset1 < 0 || chars.charAt(offset1) == '\n' || chars.charAt(offset1) == '\r') {
      int offset2=CharArrayUtil.shiftForward(chars,offset1 + 1," \t");
      boolean isEmptyLine=offset2 >= length || chars.charAt(offset2) == '\n' || chars.charAt(offset2) == '\r';
      if (isEmptyLine) {
        final AtomicBoolean stopProcessing=new AtomicBoolean(true);
        PsiDocumentManager.getInstance(project).commitAllDocuments();
        ApplicationManager.getApplication().runWriteAction(new Runnable(){
          @Override public void run(){
            CodeStyleManager styleManager=CodeStyleManager.getInstance(project);
            final String lineIndent=styleManager.getLineIndent(file,caretOffset);
            if (lineIndent != null) {
              int col=calcColumnNumber(lineIndent,editor.getSettings().getTabSize(project));
              int line=caretModel.getVisualPosition().line;
              caretModel.moveToVisualPosition(new VisualPosition(line,col));
              if (caretModel.getLogicalPosition().column != col) {
                if (!FileDocumentManager.getInstance().requestWriting(editor.getDocument(),project)) {
                  return;
                }
                editor.getSelectionModel().removeSelection();
                EditorModificationUtil.insertStringAtCaret(editor,lineIndent);
              }
            }
 else {
              stopProcessing.set(false);
            }
            editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
            editor.getSelectionModel().removeSelection();
          }
          private int calcColumnNumber(          final String lineIndent,          final int tabSize){
            int result=0;
            for (            char c : lineIndent.toCharArray()) {
              if (c == ' ')               result++;
              if (c == '\t')               result+=tabSize;
            }
            return result;
          }
        }
);
        if (stopProcessing.get()) {
          return;
        }
      }
    }
  }
  if (myOriginalHandler != null) {
    myOriginalHandler.execute(editor,dataContext);
  }
}
