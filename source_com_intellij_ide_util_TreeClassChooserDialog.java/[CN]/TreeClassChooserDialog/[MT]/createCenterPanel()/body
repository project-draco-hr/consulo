{
  myModel=new DefaultTreeModel(new DefaultMutableTreeNode());
  myTree=new Tree(myModel);
  ProjectAbstractTreeStructureBase treeStructure=new AbstractProjectTreeStructure(myProject){
    public boolean isFlattenPackages(){
      return false;
    }
    public boolean isShowMembers(){
      return myClassChildrens != PsiClassChildrenSource.NONE;
    }
    public boolean isHideEmptyMiddlePackages(){
      return true;
    }
    protected boolean isAcceptedNotClass(    PsiElement child){
      return !(child instanceof PsiFile);
    }
    public boolean isAbbreviatePackageNames(){
      return false;
    }
    public boolean isShowLibraryContents(){
      return false;
    }
    public boolean isShowModules(){
      return false;
    }
  }
;
  myBuilder=new ProjectTreeBuilder(myProject,myTree,myModel,AlphaComparator.INSTANCE,treeStructure);
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(true);
  myTree.expandRow(0);
  myTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
  myTree.setCellRenderer(new NodeRenderer());
  myTree.putClientProperty("JTree.lineStyle","Angled");
  JScrollPane scrollPane=new JScrollPane(myTree);
  scrollPane.setPreferredSize(new Dimension(500,300));
  myTree.addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      if (KeyEvent.VK_ENTER == e.getKeyCode()) {
        doOKAction();
      }
    }
  }
);
  myTree.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() == 2) {
        TreePath path=myTree.getPathForLocation(e.getX(),e.getY());
        if (path != null && myTree.isPathSelected(path)) {
          doOKAction();
        }
      }
    }
  }
);
  myTree.addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      handleSelectionChanged();
    }
  }
);
  new TreeSpeedSearch(myTree);
  myTabbedPane=new TabbedPaneWrapper();
  final JPanel dummyPanel=new JPanel(new BorderLayout());
  String name=null;
  if (myInitialClass != null) {
    name=myInitialClass.getName();
  }
  myGotoByNamePanel=new ChooseByNamePanel(myProject,new MyGotoClassModel(myProject),name,myScope.isSearchInLibraries()){
    protected void close(    boolean isOk){
      super.close(isOk);
      if (isOk) {
        doOKAction();
      }
 else {
        doCancelAction();
      }
    }
    protected void initUI(    ChooseByNamePopupComponent.Callback callback,    ModalityState modalityState,    boolean allowMultipleSelection){
      super.initUI(callback,modalityState,allowMultipleSelection);
      dummyPanel.add(myGotoByNamePanel.getPanel(),BorderLayout.CENTER);
      IdeFocusTraversalPolicy.getPreferredFocusedComponent(myGotoByNamePanel.getPanel()).requestFocus();
    }
    protected void choosenElementMightChange(){
      handleSelectionChanged();
    }
  }
;
  myTabbedPane.addTab("Search by Name",dummyPanel);
  myTabbedPane.addTab("Project",scrollPane);
  myGotoByNamePanel.invoke(new MyCallback(),getModalityState(),false);
  myTabbedPane.installKeyboardNavigation();
  myTabbedPane.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      handleSelectionChanged();
    }
  }
);
  return myTabbedPane.getComponent();
}
