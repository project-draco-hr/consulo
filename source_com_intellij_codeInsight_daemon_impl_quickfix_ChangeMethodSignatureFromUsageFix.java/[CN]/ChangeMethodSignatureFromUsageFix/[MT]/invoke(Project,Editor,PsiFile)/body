{
  if (!CodeInsightUtil.prepareFileForWrite(file))   return;
  final PsiMethod method=SuperMethodWarningUtil.checkSuperMethod(myTargetMethod,"refactor");
  if (method == null)   return;
  if (!CodeInsightUtil.prepareFileForWrite(method.getContainingFile()))   return;
  final FindUsagesOptions options=new FindUsagesOptions(project,SearchScopeCache.getInstance(project));
  options.isImplementingMethods=true;
  options.isMethodsUsages=true;
  options.isOverridingMethods=true;
  options.isUsages=true;
  options.isSearchInNonJavaFiles=false;
  final UsageInfo[][] usages=new UsageInfo[1][1];
  final Runnable runnable=new Runnable(){
    public void run(){
      usages[0]=FindUsagesUtil.findUsages(method,options);
    }
  }
;
  String progressTitle="Searching For Usages...";
  if (!ApplicationManager.getApplication().runProcessWithProgressSynchronously(runnable,progressTitle,true,project))   return;
  if (usages[0].length <= 1) {
    final ChangeSignatureProcessor processor=new ChangeSignatureProcessor(project,method,false,null,method.getName(),method.getReturnType(),myNewParametersInfo);
    if (ApplicationManager.getApplication().isUnitTestMode()) {
      processor.run();
    }
 else {
      processor.run();
    }
    ApplicationManager.getApplication().runWriteAction(new Runnable(){
      public void run(){
        QuickFixAction.markDocumentForUndo(file);
      }
    }
);
  }
 else {
    final List<ParameterInfo> parameterInfos=Arrays.asList(myNewParametersInfo);
    ChangeSignatureDialog dialog=new ChangeSignatureDialog(project,method,false);
    dialog.setParameterInfos(parameterInfos);
    dialog.show();
  }
}
