{
  VirtualFile file=myProjectRoot.createChildData(this,"pom.xml");
  VfsUtil.saveText(file,"<project>" + "  <groupId>test</groupId>" + "  <artifactId>project</artifactId>"+ "  <version>1</version>"+ "</project>");
  MavenModel p=readProject(file);
  assertEquals("jar",p.getPackaging());
  assertNull(p.getName());
  assertNull(p.getParent());
  assertEquals("project-1",p.getBuild().getFinalName());
  assertEquals(null,p.getBuild().getDefaultGoal());
  assertSize(1,p.getBuild().getSources());
  assertPathEquals(pathFromBasedir("src/main/java"),p.getBuild().getSources().get(0));
  assertSize(1,p.getBuild().getTestSources());
  assertPathEquals(pathFromBasedir("src/test/java"),p.getBuild().getTestSources().get(0));
  assertEquals(1,p.getBuild().getResources().size());
  assertResource(p.getBuild().getResources().get(0),pathFromBasedir("src/main/resources"),false,null,Collections.EMPTY_LIST,Collections.EMPTY_LIST);
  assertEquals(1,p.getBuild().getTestResources().size());
  assertResource(p.getBuild().getTestResources().get(0),pathFromBasedir("src/test/resources"),false,null,Collections.EMPTY_LIST,Collections.EMPTY_LIST);
  assertPathEquals(pathFromBasedir("target"),p.getBuild().getDirectory());
  assertPathEquals(pathFromBasedir("target/classes"),p.getBuild().getOutputDirectory());
  assertPathEquals(pathFromBasedir("target/test-classes"),p.getBuild().getTestOutputDirectory());
}
