{
  VirtualFile file=myProjectRoot.createChildData(this,"pom.xml");
  VfsUtil.saveText(file,"<project>" + "  <modelVersion>1.2.3</modelVersion>" + "  <groupId>test</groupId>"+ "  <artifactId>project</artifactId>"+ "  <version>1</version>"+ "  <name>foo</name>"+ "  <packaging>pom</packaging>"+ "  <parent>"+ "    <groupId>testParent</groupId>"+ "    <artifactId>projectParent</artifactId>"+ "    <version>2</version>"+ "    <relativePath>../parent/pom.xml</relativePath>"+ "  </parent>"+ "  <build>"+ "    <finalName>xxx</finalName>"+ "    <defaultGoal>someGoal</defaultGoal>"+ "    <sourceDirectory>mySrc</sourceDirectory>"+ "    <testSourceDirectory>myTestSrc</testSourceDirectory>"+ "    <scriptSourceDirectory>myScriptSrc</scriptSourceDirectory>"+ "    <resources>"+ "      <resource>"+ "        <directory>myRes</directory>"+ "        <filtering>true</filtering>"+ "        <targetPath>dir</targetPath>"+ "        <includes><include>**.properties</include></includes>"+ "        <excludes><exclude>**.xml</exclude></excludes>"+ "      </resource>"+ "    </resources>"+ "    <testResources>"+ "      <testResource>"+ "        <directory>myTestRes</directory>"+ "        <includes><include>**.properties</include></includes>"+ "      </testResource>"+ "    </testResources>"+ "    <directory>myOutput</directory>"+ "    <outputDirectory>myClasses</outputDirectory>"+ "    <testOutputDirectory>myTestClasses</testOutputDirectory>"+ "  </build>"+ "</project>");
  MavenModel p=readProject(file);
  assertEquals("pom",p.getPackaging());
  assertEquals("foo",p.getName());
  assertParent(p,"testParent","projectParent","2");
  assertEquals("xxx",p.getBuild().getFinalName());
  assertEquals("someGoal",p.getBuild().getDefaultGoal());
  assertSize(1,p.getBuild().getSources());
  assertPathEquals(pathFromBasedir("mySrc"),p.getBuild().getSources().get(0));
  assertSize(1,p.getBuild().getTestSources());
  assertPathEquals(pathFromBasedir("myTestSrc"),p.getBuild().getTestSources().get(0));
  assertEquals(1,p.getBuild().getResources().size());
  assertResource(p.getBuild().getResources().get(0),pathFromBasedir("myRes"),true,"dir",Collections.singletonList("**.properties"),Collections.singletonList("**.xml"));
  assertEquals(1,p.getBuild().getTestResources().size());
  assertResource(p.getBuild().getTestResources().get(0),pathFromBasedir("myTestRes"),false,null,Collections.singletonList("**.properties"),Collections.EMPTY_LIST);
  assertPathEquals(pathFromBasedir("myOutput"),p.getBuild().getDirectory());
  assertPathEquals(pathFromBasedir("myClasses"),p.getBuild().getOutputDirectory());
  assertPathEquals(pathFromBasedir("myTestClasses"),p.getBuild().getTestOutputDirectory());
}
