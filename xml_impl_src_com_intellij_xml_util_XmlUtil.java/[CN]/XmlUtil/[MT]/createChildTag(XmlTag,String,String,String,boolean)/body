{
  String qname;
  final String prefix=xmlTag.getPrefixByNamespace(namespace);
  if (prefix != null && prefix.length() > 0) {
    qname=prefix + ":" + localName;
  }
 else {
    qname=localName;
  }
  try {
    @NonNls StringBuilder tagStartBuilder=StringBuilderSpinAllocator.alloc();
    String tagStart;
    try {
      tagStartBuilder.append(qname);
      if (xmlTag.getPrefixByNamespace(namespace) == null && !(StringUtil.isEmpty(xmlTag.getNamespacePrefix()) && namespace.equals(xmlTag.getNamespace()))) {
        tagStartBuilder.append(" xmlns=\"");
        tagStartBuilder.append(namespace);
        tagStartBuilder.append("\"");
      }
      tagStart=tagStartBuilder.toString();
    }
  finally {
      StringBuilderSpinAllocator.dispose(tagStartBuilder);
    }
    XmlTag retTag;
    if (bodyText != null && bodyText.length() > 0) {
      retTag=XmlElementFactory.getInstance(xmlTag.getProject()).createTagFromText("<" + tagStart + ">"+ bodyText+ "</"+ qname+ ">",xmlTag.getLanguage());
      if (enforceNamespacesDeep) {
        retTag.acceptChildren(new XmlRecursiveElementVisitor(){
          @Override public void visitXmlTag(          XmlTag tag){
            final String namespacePrefix=tag.getNamespacePrefix();
            if (namespacePrefix.length() == 0) {
              String qname;
              if (prefix != null && prefix.length() > 0) {
                qname=prefix + ":" + tag.getLocalName();
              }
 else {
                qname=tag.getLocalName();
              }
              try {
                tag.setName(qname);
              }
 catch (              IncorrectOperationException e) {
                LOG.error(e);
              }
            }
            super.visitXmlTag(tag);
          }
        }
);
      }
    }
 else {
      retTag=XmlElementFactory.getInstance(xmlTag.getProject()).createTagFromText("<" + tagStart + "/>",xmlTag.getLanguage());
    }
    return retTag;
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
  return null;
}
