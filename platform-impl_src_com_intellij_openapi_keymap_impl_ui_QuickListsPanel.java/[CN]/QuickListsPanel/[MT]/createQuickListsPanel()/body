{
  JPanel panel=new JPanel();
  panel.setLayout(new BorderLayout());
  myQuickListsList=new JList(myQuickListsModel);
  myQuickListsList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myQuickListsList.setCellRenderer(new MyQuickListCellRenderer());
  myQuickListsList.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      myRightPanel.removeAll();
      final Object selectedValue=myQuickListsList.getSelectedValue();
      if (selectedValue instanceof QuickList) {
        final QuickList quickList=(QuickList)selectedValue;
        updateRightPanel(quickList);
        myQuickListsList.repaint();
      }
      myRightPanel.revalidate();
    }
  }
);
  JScrollPane scrollPane=ScrollPaneFactory.createScrollPane(myQuickListsList);
  scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
  final Dimension dimension=new Dimension(120,-1);
  scrollPane.setPreferredSize(dimension);
  scrollPane.setMinimumSize(dimension);
  panel.add(scrollPane,BorderLayout.CENTER);
  DefaultActionGroup group=new DefaultActionGroup();
  ReorderableListController<QuickList> controller=ReorderableListController.create(myQuickListsList,group);
  final ReorderableListController<QuickList>.AddActionDescription addActionDescription=controller.addAddAction(KeyMapBundle.message("add.keymap.label"),new Factory<QuickList>(){
    public QuickList create(){
      return new QuickList(createUniqueName(),"",ArrayUtil.EMPTY_STRING_ARRAY,false);
    }
  }
,true);
  addActionDescription.addPostHandler(new ReorderableListController.ActionNotification<QuickList>(){
    public void afterActionPerformed(    final QuickList change){
      myKeymapPanel.processCurrentKeymapChanged();
    }
  }
);
  final ReorderableListController<QuickList>.RemoveActionDescription removeActionDescription=controller.addRemoveAction(KeyMapBundle.message("remove.keymap.label"));
  removeActionDescription.addPostHandler(new ReorderableListController.ActionNotification<List<QuickList>>(){
    public void afterActionPerformed(    final List<QuickList> change){
      myQuickListsList.repaint();
      myKeymapPanel.processCurrentKeymapChanged();
    }
  }
);
  panel.add(ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,group,true).getComponent(),BorderLayout.NORTH);
  return panel;
}
