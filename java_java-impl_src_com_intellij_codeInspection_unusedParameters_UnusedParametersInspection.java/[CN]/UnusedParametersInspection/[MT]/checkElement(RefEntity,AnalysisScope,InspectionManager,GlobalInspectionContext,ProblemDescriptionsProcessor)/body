{
  if (refEntity instanceof RefMethod) {
    final RefMethod refMethod=(RefMethod)refEntity;
    if (refMethod.isSyntheticJSP())     return null;
    if (refMethod.isExternalOverride())     return null;
    if (!(refMethod.isStatic() || refMethod.isConstructor()) && !refMethod.getSuperMethods().isEmpty())     return null;
    if ((refMethod.isAbstract() || refMethod.getOwnerClass().isInterface()) && refMethod.getDerivedMethods().isEmpty())     return null;
    if (RefUtil.isEntryPoint(refMethod))     return null;
    final PsiModifierListOwner element=refMethod.getElement();
    if (element != null && EntryPointsManagerImpl.getInstance(manager.getProject()).isEntryPoint(element))     return null;
    if (refMethod.isAppMain())     return null;
    final ArrayList<RefParameter> unusedParameters=getUnusedParameters(refMethod);
    if (unusedParameters.isEmpty())     return null;
    final List<ProblemDescriptor> result=new ArrayList<ProblemDescriptor>();
    for (    RefParameter refParameter : unusedParameters) {
      final PsiIdentifier psiIdentifier=refParameter.getElement().getNameIdentifier();
      if (psiIdentifier != null) {
        result.add(manager.createProblemDescriptor(psiIdentifier,refMethod.isAbstract() ? InspectionsBundle.message("inspection.unused.parameter.composer") : InspectionsBundle.message("inspection.unused.parameter.composer1"),new AcceptSuggested(globalContext.getRefManager(),processor,refParameter.toString()),ProblemHighlightType.LIKE_UNUSED_SYMBOL,false));
      }
    }
    return result.toArray(new CommonProblemDescriptor[result.size()]);
  }
  return null;
}
