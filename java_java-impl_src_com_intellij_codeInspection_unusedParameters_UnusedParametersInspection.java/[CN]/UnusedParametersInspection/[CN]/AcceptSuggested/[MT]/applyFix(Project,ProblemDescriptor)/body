{
  if (!CodeInsightUtilBase.preparePsiElementForWrite(descriptor.getPsiElement()))   return;
  final PsiMethod psiMethod=PsiTreeUtil.getParentOfType(descriptor.getPsiElement(),PsiMethod.class);
  if (psiMethod != null) {
    final RefElement refMethod=myManager.getReference(psiMethod);
    if (refMethod != null) {
      final ArrayList<PsiElement> psiParameters=new ArrayList<PsiElement>();
      for (      final RefParameter refParameter : getUnusedParameters((RefMethod)refMethod)) {
        psiParameters.add(refParameter.getElement());
      }
      final PsiModificationTracker tracker=psiMethod.getManager().getModificationTracker();
      final long startModificationCount=tracker.getModificationCount();
      Runnable runnable=new Runnable(){
        public void run(){
          if (!psiMethod.isValid())           return;
          removeUnusedParameterViaChangeSignature(psiMethod,psiParameters);
          if (startModificationCount != tracker.getModificationCount()) {
            myProcessor.ignoreElement(refMethod);
          }
        }
      }
;
      if (ApplicationManager.getApplication().isUnitTestMode()) {
        runnable.run();
      }
 else {
        ApplicationManager.getApplication().invokeLater(runnable,project.getDisposed());
      }
    }
  }
}
