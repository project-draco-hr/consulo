{
  final int portNumber=Integer.getInteger(PROPERTY_PORT_NUMBER).intValue();
  Thread t=new Thread(new Runnable(){
    public void run(){
      try {
        ServerSocket socket=new ServerSocket(portNumber);
        Socket client=socket.accept();
        BufferedReader reader=new BufferedReader(new InputStreamReader(client.getInputStream()));
        while (true) {
          String msg=reader.readLine();
          if ("TERM".equals(msg)) {
            return;
          }
 else           if ("BREAK".equals(msg)) {
            triggerControlBreak();
          }
 else           if ("STOP".equals(msg)) {
            System.exit(1);
          }
        }
      }
 catch (      IOException ignored) {
      }
catch (      IllegalArgumentException ignored) {
      }
catch (      SecurityException ignored) {
      }
    }
  }
,"Monitor Ctrl-Break");
  try {
    t.setDaemon(true);
    t.start();
  }
 catch (  Exception ignored) {
  }
  String mainClass=args[0];
  String[] parms=new String[args.length - 1];
  for (int j=1; j < args.length; j++) {
    parms[j - 1]=args[j];
  }
  Method m=Class.forName(mainClass).getMethod("main",new Class[]{parms.getClass()});
  if (!Modifier.isStatic(m.getModifiers())) {
    System.err.println("main method should be static");
    return;
  }
  try {
    ensureAccess(m);
    m.invoke(null,new Object[]{parms});
  }
 catch (  InvocationTargetException ite) {
    throw ite.getTargetException();
  }
}
