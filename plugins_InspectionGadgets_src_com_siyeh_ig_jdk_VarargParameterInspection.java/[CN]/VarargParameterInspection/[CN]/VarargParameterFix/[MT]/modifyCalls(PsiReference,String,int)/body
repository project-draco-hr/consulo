{
  final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)reference.getElement();
  final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)referenceExpression.getParent();
  final PsiExpressionList argumentList=methodCallExpression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  @NonNls final StringBuilder builder=new StringBuilder("new ");
  builder.append(arrayTypeText);
  builder.append("[]{");
  if (arguments.length > indexOfFirstVarargArgument) {
    final PsiExpression firstArgument=arguments[indexOfFirstVarargArgument];
    final String firstArgumentText=firstArgument.getText();
    builder.append(firstArgumentText);
    for (int i=indexOfFirstVarargArgument + 1; i < arguments.length; i++) {
      builder.append(',');
      builder.append(arguments[i].getText());
    }
  }
  builder.append('}');
  final Project project=referenceExpression.getProject();
  final PsiElementFactory factory=JavaPsiFacade.getElementFactory(project);
  final PsiExpression arrayExpression=factory.createExpressionFromText(builder.toString(),referenceExpression);
  if (arguments.length > indexOfFirstVarargArgument) {
    final PsiExpression firstArgument=arguments[indexOfFirstVarargArgument];
    argumentList.deleteChildRange(firstArgument,arguments[arguments.length - 1]);
    argumentList.add(arrayExpression);
  }
 else {
    argumentList.add(arrayExpression);
  }
  final CodeStyleManager codeStyleManager=CodeStyleManager.getInstance(project);
  final JavaCodeStyleManager javaCodeStyleManager=JavaCodeStyleManager.getInstance(project);
  javaCodeStyleManager.shortenClassReferences(argumentList);
  codeStyleManager.reformat(argumentList);
}
