{
  final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)reference.getElement();
  final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)referenceExpression.getParent();
  final PsiExpressionList argumentList=methodCallExpression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  StringBuilder builder=new StringBuilder("new ");
  builder.append(arrayTypeText);
  builder.append("[]{");
  if (arguments.length > indexOfFirstVarargArgument) {
    final PsiExpression firstArgument=arguments[indexOfFirstVarargArgument];
    final String firstArgumentText=firstArgument.getText();
    builder.append(firstArgumentText);
    for (int i=indexOfFirstVarargArgument + 1; i < arguments.length; i++) {
      final PsiExpression argument=arguments[i];
      builder.append(',');
      builder.append(argument.getText());
    }
  }
  builder.append('}');
  final PsiManager manager=referenceExpression.getManager();
  final PsiElementFactory factory=manager.getElementFactory();
  try {
    final PsiExpression arrayExpression=factory.createExpressionFromText(builder.toString(),referenceExpression);
    if (arguments.length > indexOfFirstVarargArgument) {
      final PsiExpression firstArgument=arguments[indexOfFirstVarargArgument];
      argumentList.deleteChildRange(firstArgument,arguments[arguments.length - 1]);
      argumentList.add(arrayExpression);
    }
 else {
      argumentList.add(arrayExpression);
    }
    final CodeStyleManager codeStyleManager=manager.getCodeStyleManager();
    codeStyleManager.shortenClassReferences(argumentList);
    codeStyleManager.reformat(argumentList);
  }
 catch (  IncorrectOperationException e) {
    throw new RuntimeException(e);
  }
  return true;
}
