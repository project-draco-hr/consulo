{
  final Map<PsiClass,PsiTypeParameter[]> visibleTypeParams=getTypeParametersHierarchy(referenceParameterList);
  final PsiSubstitutor substitutor=composeSubstitutor(psiClass.getProject(),migrationType,visibleTypeParams);
  for (  Map.Entry<PsiClass,PsiTypeParameter[]> entry : visibleTypeParams.entrySet()) {
    final TypeParameterSearcher parameterSearcher=new TypeParameterSearcher(entry.getValue());
    entry.getKey().accept(new JavaRecursiveElementVisitor(){
      @Override public void visitMethod(      final PsiMethod method){
        super.visitMethod(method);
        processMemberType(method,parameterSearcher,psiClass,substitutor,roots);
        for (        PsiParameter parameter : method.getParameterList().getParameters()) {
          processMemberType(parameter,parameterSearcher,psiClass,substitutor,roots);
        }
      }
      @Override public void visitField(      final PsiField field){
        super.visitField(field);
        processMemberType(field,parameterSearcher,psiClass,substitutor,roots);
      }
    }
);
  }
}
