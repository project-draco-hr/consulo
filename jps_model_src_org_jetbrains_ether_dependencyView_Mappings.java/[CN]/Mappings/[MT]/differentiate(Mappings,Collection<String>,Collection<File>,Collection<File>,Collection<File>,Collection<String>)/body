{
  delta.compensateRemovedContent(filesToCompile);
  final Util u=new Util(delta);
  final Util self=new Util(this);
  final Util o=new Util();
  if (removed != null) {
    for (    String file : removed) {
      final Collection<ClassRepr> classes=sourceFileToClasses.foxyGet(context.get(file));
      if (classes != null) {
        for (        ClassRepr c : classes) {
          u.affectAll(c.name,affectedFiles);
        }
      }
    }
  }
  for (  DependencyContext.S fileName : delta.sourceFileToClasses.keySet()) {
    if (safeFiles != null && safeFiles.contains(fileName.getValue())) {
      continue;
    }
    final Set<ClassRepr> classes=(Set<ClassRepr>)delta.sourceFileToClasses.foxyGet(fileName);
    final Set<ClassRepr> pastClasses=(Set<ClassRepr>)sourceFileToClasses.foxyGet(fileName);
    final Set<DependencyContext.S> dependants=new HashSet<DependencyContext.S>();
    self.appendDependents(pastClasses,dependants);
    final Set<UsageRepr.Usage> affectedUsages=new HashSet<UsageRepr.Usage>();
    final Set<UsageRepr.AnnotationUsage> annotationQuery=new HashSet<UsageRepr.AnnotationUsage>();
    final Map<UsageRepr.Usage,Util.UsageConstraint> usageConstraints=new HashMap<UsageRepr.Usage,Util.UsageConstraint>();
    final Difference.Specifier<ClassRepr> classDiff=Difference.make(pastClasses,classes);
    for (    Pair<ClassRepr,Difference> changed : classDiff.changed()) {
      final ClassRepr it=changed.first;
      final ClassRepr.Diff diff=(ClassRepr.Diff)changed.second;
      final int addedModifiers=diff.addedModifiers();
      final int removedModifiers=diff.removedModifiers();
      final boolean superClassChanged=(diff.base() & Difference.SUPERCLASS) > 0;
      final boolean interfacesChanged=!diff.interfaces().unchanged();
      final boolean signatureChanged=(diff.base() & Difference.SIGNATURE) > 0;
      if (superClassChanged || interfacesChanged || signatureChanged) {
        final boolean extendsChanged=superClassChanged && !diff.extendsAdded();
        final boolean interfacesRemoved=interfacesChanged && !diff.interfaces().removed().isEmpty();
        u.affectSubclasses(it.name,affectedFiles,affectedUsages,dependants,extendsChanged || interfacesRemoved || signatureChanged);
      }
      if ((diff.addedModifiers() & Opcodes.ACC_INTERFACE) > 0 || (diff.removedModifiers() & Opcodes.ACC_INTERFACE) > 0) {
        affectedUsages.add(it.createUsage());
      }
      if (it.isAnnotation() && it.policy == RetentionPolicy.SOURCE) {
        return false;
      }
      if ((addedModifiers & Opcodes.ACC_PROTECTED) > 0) {
        final UsageRepr.Usage usage=it.createUsage();
        affectedUsages.add(usage);
        usageConstraints.put(usage,u.new InheritanceConstraint(it.name));
      }
      if (diff.packageLocalOn()) {
        final UsageRepr.Usage usage=it.createUsage();
        affectedUsages.add(usage);
        usageConstraints.put(usage,u.new PackageConstraint(it.getPackageName()));
      }
      if ((addedModifiers & Opcodes.ACC_FINAL) > 0 || (addedModifiers & Opcodes.ACC_PRIVATE) > 0) {
        affectedUsages.add(it.createUsage());
      }
      if ((addedModifiers & Opcodes.ACC_ABSTRACT) > 0) {
        affectedUsages.add(UsageRepr.createClassNewUsage(it.name));
      }
      if ((addedModifiers & Opcodes.ACC_STATIC) > 0 || (removedModifiers & Opcodes.ACC_STATIC) > 0 || (addedModifiers & Opcodes.ACC_ABSTRACT) > 0) {
        affectedUsages.add(UsageRepr.createClassNewUsage(it.name));
      }
      if (it.isAnnotation()) {
        if (diff.retentionChanged()) {
          affectedUsages.add(it.createUsage());
        }
 else {
          final Collection<ElementType> removedtargets=diff.targets().removed();
          if (removedtargets.contains(ElementType.LOCAL_VARIABLE)) {
            return false;
          }
          if (!removedtargets.isEmpty()) {
            annotationQuery.add((UsageRepr.AnnotationUsage)UsageRepr.createAnnotationUsage(TypeRepr.createClassType(it.name),null,removedtargets));
          }
          for (          MethodRepr m : diff.methods().added()) {
            if (!m.hasValue()) {
              affectedUsages.add(it.createUsage());
            }
          }
        }
      }
      for (      MethodRepr m : diff.methods().added()) {
        if ((it.access & Opcodes.ACC_INTERFACE) > 0 || (m.access & Opcodes.ACC_ABSTRACT) > 0) {
          u.affectSubclasses(it.name,affectedFiles,affectedUsages,dependants,false);
        }
      }
      for (      MethodRepr m : diff.methods().removed()) {
        final Collection<Pair<MethodRepr,ClassRepr>> overridenMethods=u.findOverridenMethods(m,it);
        final Collection<DependencyContext.S> propagated=u.propagateMethodAccess(m.name,it.name);
        if (overridenMethods.size() == 0) {
          u.affectMethodUsages(m,propagated,m.createUsage(context,it.name),affectedUsages,dependants);
        }
        if ((m.access & Opcodes.ACC_ABSTRACT) == 0) {
          for (          DependencyContext.S p : propagated) {
            final ClassRepr s=u.reprByName(p);
            if (s != null) {
              final Collection<Pair<MethodRepr,ClassRepr>> overridenInS=u.findOverridenMethods(m,s);
              overridenInS.addAll(overridenMethods);
              boolean allAbstract=true;
              boolean visited=false;
              for (              Pair<MethodRepr,ClassRepr> pp : overridenInS) {
                if (pp.second.name.equals(it.name)) {
                  continue;
                }
                visited=true;
                allAbstract=((pp.first.access & Opcodes.ACC_ABSTRACT) > 0) || ((pp.second.access & Opcodes.ACC_INTERFACE) > 0);
                if (!allAbstract) {
                  break;
                }
              }
              if (allAbstract && visited) {
                final DependencyContext.S source=classToSourceFile.get(p);
                if (source != null) {
                  affectedFiles.add(new File(source.getValue()));
                }
              }
            }
          }
        }
      }
      for (      Pair<MethodRepr,Difference> mr : diff.methods().changed()) {
        final MethodRepr m=mr.first;
        final MethodRepr.Diff d=(MethodRepr.Diff)mr.second;
        final boolean throwsChanged=(d.exceptions().added().size() > 0) || (d.exceptions().changed().size() > 0);
        if (it.isAnnotation()) {
          if (d.defaultRemoved()) {
            final List<DependencyContext.S> l=new LinkedList<DependencyContext.S>();
            l.add(m.name);
            annotationQuery.add((UsageRepr.AnnotationUsage)UsageRepr.createAnnotationUsage(TypeRepr.createClassType(it.name),l,null));
          }
        }
 else         if (d.base() != Difference.NONE || throwsChanged) {
          if (d.packageLocalOn()) {
            final UsageRepr.Usage usage=m.createUsage(context,it.name);
            affectedUsages.add(usage);
            usageConstraints.put(usage,u.new PackageConstraint(it.getPackageName()));
          }
          final Collection<DependencyContext.S> propagated=u.propagateMethodAccess(m.name,it.name);
          if ((d.base() & Difference.TYPE) > 0 || (d.base() & Difference.SIGNATURE) > 0 || throwsChanged) {
            u.affectMethodUsages(m,propagated,m.createUsage(context,it.name),affectedUsages,dependants);
          }
 else           if ((d.base() & Difference.ACCESS) > 0) {
            if ((d.addedModifiers() & Opcodes.ACC_STATIC) > 0 || (d.removedModifiers() & Opcodes.ACC_STATIC) > 0 || (d.addedModifiers() & Opcodes.ACC_PRIVATE) > 0) {
              u.affectMethodUsages(m,propagated,m.createUsage(context,it.name),affectedUsages,dependants);
              if ((d.addedModifiers() & Opcodes.ACC_STATIC) > 0) {
                u.affectSubclasses(it.name,affectedFiles,affectedUsages,dependants,false);
              }
            }
 else {
              if ((d.addedModifiers() & Opcodes.ACC_FINAL) > 0 || (d.addedModifiers() & Opcodes.ACC_PUBLIC) > 0 || (d.addedModifiers() & Opcodes.ACC_ABSTRACT) > 0) {
                u.affectSubclasses(it.name,affectedFiles,affectedUsages,dependants,false);
              }
              if ((d.addedModifiers() & Opcodes.ACC_PROTECTED) > 0 && !((d.removedModifiers() & Opcodes.ACC_PRIVATE) > 0)) {
                final Set<UsageRepr.Usage> usages=new HashSet<UsageRepr.Usage>();
                u.affectMethodUsages(m,propagated,m.createUsage(context,it.name),usages,dependants);
                for (                UsageRepr.Usage usage : usages) {
                  usageConstraints.put(usage,u.new InheritanceConstraint(it.name));
                }
                affectedUsages.addAll(usages);
              }
            }
          }
        }
      }
      final int mask=Opcodes.ACC_STATIC | Opcodes.ACC_FINAL;
      for (      FieldRepr f : diff.fields().added()) {
        final boolean fPrivate=(f.access & Opcodes.ACC_PRIVATE) > 0;
        final boolean fProtected=(f.access & Opcodes.ACC_PROTECTED) > 0;
        final boolean fPublic=(f.access & Opcodes.ACC_PUBLIC) > 0;
        final boolean fPLocal=!fPrivate && !fProtected && !fPublic;
        if (!fPrivate) {
          final Collection<DependencyContext.S> subClasses=classToSubclasses.foxyGet(it.name);
          if (subClasses != null) {
            for (            final DependencyContext.S subClass : subClasses) {
              final ClassRepr r=u.reprByName(subClass);
              final DependencyContext.S sourceFileName=classToSourceFile.get(subClass);
              if (r != null && sourceFileName != null) {
                if (r.isLocal) {
                  affectedFiles.add(new File(sourceFileName.getValue()));
                }
 else {
                  final DependencyContext.S outerClass=r.outerClassName;
                  if (outerClass.getValue() != null) {
                    if (u.fieldVisible(outerClass,f)) {
                      affectedFiles.add(new File(sourceFileName.getValue()));
                    }
                  }
                }
              }
              final Collection<DependencyContext.S> propagated=u.propagateFieldAccess(f.name,subClass);
              u.affectFieldUsages(f,propagated,f.createUsage(context,subClass),affectedUsages,dependants);
              final Collection<DependencyContext.S> deps=classToClassDependency.foxyGet(subClass);
              if (deps != null) {
                dependants.addAll(deps);
              }
            }
          }
        }
        final Collection<Pair<FieldRepr,ClassRepr>> overriden=u.findOverridenFields(f,it);
        for (        Pair<FieldRepr,ClassRepr> p : overriden) {
          final FieldRepr ff=p.first;
          final ClassRepr cc=p.second;
          final boolean ffPrivate=(ff.access & Opcodes.ACC_PRIVATE) > 0;
          final boolean ffProtected=(ff.access & Opcodes.ACC_PROTECTED) > 0;
          final boolean ffPublic=(ff.access & Opcodes.ACC_PUBLIC) > 0;
          final boolean ffPLocal=!ffPrivate && !ffProtected && !ffPublic;
          if (!ffPrivate) {
            final Collection<DependencyContext.S> propagated=o.propagateFieldAccess(ff.name,cc.name);
            final Set<UsageRepr.Usage> localUsages=new HashSet<UsageRepr.Usage>();
            u.affectFieldUsages(ff,propagated,ff.createUsage(context,cc.name),localUsages,dependants);
            if (fPrivate || (fPublic && (ffPublic || ffPLocal)) || (fProtected && ffProtected)|| (fPLocal && ffPLocal)) {
            }
 else {
              Util.UsageConstraint constaint;
              if ((ffProtected && fPublic) || (fProtected && ffPublic) || (ffPLocal && fProtected)) {
                constaint=u.new NegationConstraint(u.new InheritanceConstraint(cc.name));
              }
 else               if (ffPublic && ffPLocal) {
                constaint=u.new NegationConstraint(u.new PackageConstraint(cc.getPackageName()));
              }
 else {
                constaint=u.new IntersectionConstraint(u.new NegationConstraint(u.new InheritanceConstraint(cc.name)),u.new NegationConstraint(u.new PackageConstraint(cc.getPackageName())));
              }
              for (              UsageRepr.Usage usage : localUsages) {
                usageConstraints.put(usage,constaint);
              }
            }
            affectedUsages.addAll(localUsages);
          }
        }
      }
      for (      FieldRepr f : diff.fields().removed()) {
        if ((f.access & mask) == mask && f.hasValue()) {
          return false;
        }
        final Collection<DependencyContext.S> propagated=u.propagateFieldAccess(f.name,it.name);
        u.affectFieldUsages(f,propagated,f.createUsage(context,it.name),affectedUsages,dependants);
      }
      for (      Pair<FieldRepr,Difference> f : diff.fields().changed()) {
        final Difference d=f.second;
        final FieldRepr field=f.first;
        if ((field.access & mask) == mask) {
          if ((d.base() & Difference.ACCESS) > 0 || (d.base() & Difference.VALUE) > 0) {
            return false;
          }
        }
        if (d.base() != Difference.NONE) {
          final Collection<DependencyContext.S> propagated=u.propagateFieldAccess(field.name,it.name);
          if ((d.base() & Difference.TYPE) > 0 || (d.base() & Difference.SIGNATURE) > 0) {
            u.affectFieldUsages(field,propagated,field.createUsage(context,it.name),affectedUsages,dependants);
          }
 else           if ((d.base() & Difference.ACCESS) > 0) {
            if ((d.addedModifiers() & Opcodes.ACC_STATIC) > 0 || (d.removedModifiers() & Opcodes.ACC_STATIC) > 0 || (d.addedModifiers() & Opcodes.ACC_PRIVATE) > 0 || (d.addedModifiers() & Opcodes.ACC_VOLATILE) > 0) {
              u.affectFieldUsages(field,propagated,field.createUsage(context,it.name),affectedUsages,dependants);
            }
 else {
              if ((d.addedModifiers() & Opcodes.ACC_FINAL) > 0) {
                u.affectFieldUsages(field,propagated,field.createAssignUsage(context,it.name),affectedUsages,dependants);
              }
              if ((d.addedModifiers() & Opcodes.ACC_PROTECTED) > 0 && (d.removedModifiers() & Opcodes.ACC_PUBLIC) > 0) {
                final Set<UsageRepr.Usage> usages=new HashSet<UsageRepr.Usage>();
                u.affectFieldUsages(field,propagated,field.createUsage(context,it.name),usages,dependants);
                for (                UsageRepr.Usage usage : usages) {
                  usageConstraints.put(usage,u.new InheritanceConstraint(it.name));
                }
                affectedUsages.addAll(usages);
              }
            }
          }
        }
      }
    }
    for (    ClassRepr c : classDiff.removed()) {
      affectedUsages.add(c.createUsage());
    }
    for (    ClassRepr c : classDiff.added()) {
      final Collection<DependencyContext.S> depClasses=classToClassDependency.foxyGet(c.name);
      if (depClasses != null) {
        for (        DependencyContext.S depClass : depClasses) {
          final DependencyContext.S fName=classToSourceFile.get(depClass);
          if (fName != null) {
            affectedFiles.add(new File(fName.getValue()));
          }
        }
      }
    }
    if (dependants != null) {
      final Set<DependencyContext.S> dependentFiles=new HashSet<DependencyContext.S>();
      for (      DependencyContext.S depClass : dependants) {
        final DependencyContext.S file=classToSourceFile.get(depClass);
        if (file != null) {
          dependentFiles.add(file);
        }
      }
      dependentFiles.removeAll(compiledFiles);
      filewise:       for (      DependencyContext.S depFile : dependentFiles) {
        if (affectedFiles.contains(new File(depFile.getValue()))) {
          continue filewise;
        }
        final UsageRepr.Cluster depCluster=sourceFileToUsages.get(depFile);
        final Set<UsageRepr.Usage> depUsages=depCluster.getUsages();
        if (depUsages != null) {
          final Set<UsageRepr.Usage> usages=new HashSet<UsageRepr.Usage>(depUsages);
          usages.retainAll(affectedUsages);
          if (!usages.isEmpty()) {
            for (            UsageRepr.Usage usage : usages) {
              final Util.UsageConstraint constraint=usageConstraints.get(usage);
              if (constraint == null) {
                affectedFiles.add(new File(depFile.getValue()));
                continue filewise;
              }
 else {
                final Set<DependencyContext.S> residenceClasses=depCluster.getResidence(usage);
                for (                DependencyContext.S residentName : residenceClasses) {
                  if (constraint.checkResidence(residentName)) {
                    affectedFiles.add(new File(depFile.getValue()));
                    continue filewise;
                  }
                }
              }
            }
          }
          if (annotationQuery.size() > 0) {
            final Collection<UsageRepr.Usage> annotationUsages=sourceFileToAnnotationUsages.foxyGet(depFile);
            for (            UsageRepr.Usage usage : annotationUsages) {
              for (              UsageRepr.AnnotationUsage query : annotationQuery) {
                if (query.satisfies(usage)) {
                  affectedFiles.add(new File(depFile.getValue()));
                  continue filewise;
                }
              }
            }
          }
        }
      }
    }
  }
  return true;
}
