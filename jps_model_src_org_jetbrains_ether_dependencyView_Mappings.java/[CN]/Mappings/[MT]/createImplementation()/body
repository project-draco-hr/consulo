{
  if (!myIsDelta) {
    myContext=new DependencyContext(myRootDir);
    myDebugS=myContext.getLogger(LOG);
  }
  if (myIsDelta && myDeltaIsTransient) {
    myClassToSubclasses=new TransientMultiMaplet<DependencyContext.S,DependencyContext.S>(ourStringSetConstructor);
    myClassToClassDependency=new TransientMultiMaplet<DependencyContext.S,DependencyContext.S>(ourStringSetConstructor);
    mySourceFileToClasses=new TransientMultiMaplet<DependencyContext.S,ClassRepr>(ourClassSetConstructor);
    mySourceFileToAnnotationUsages=new TransientMultiMaplet<DependencyContext.S,UsageRepr.Usage>(ourUsageSetConstructor);
    mySourceFileToUsages=new TransientMultiMaplet<DependencyContext.S,UsageRepr.Cluster>(ourUsageClusterSetConstructor);
    myClassToSourceFile=new TransientMaplet<DependencyContext.S,DependencyContext.S>();
  }
 else {
    myClassToSubclasses=new PersistentMultiMaplet<DependencyContext.S,DependencyContext.S>(DependencyContext.getTableFile(myRootDir,CLASS_TO_SUBCLASSES),DependencyContext.descriptorS,DependencyContext.descriptorS,ourStringSetConstructor);
    myClassToClassDependency=new PersistentMultiMaplet<DependencyContext.S,DependencyContext.S>(DependencyContext.getTableFile(myRootDir,CLASS_TO_CLASS),DependencyContext.descriptorS,DependencyContext.descriptorS,ourStringSetConstructor);
    mySourceFileToClasses=new PersistentMultiMaplet<DependencyContext.S,ClassRepr>(DependencyContext.getTableFile(myRootDir,SOURCE_TO_CLASS),DependencyContext.descriptorS,ClassRepr.externalizer(myContext),ourClassSetConstructor);
    mySourceFileToAnnotationUsages=new PersistentMultiMaplet<DependencyContext.S,UsageRepr.Usage>(DependencyContext.getTableFile(myRootDir,SOURCE_TO_ANNOTATIONS),DependencyContext.descriptorS,UsageRepr.externalizer(myContext),ourUsageSetConstructor);
    mySourceFileToUsages=new PersistentMultiMaplet<DependencyContext.S,UsageRepr.Cluster>(DependencyContext.getTableFile(myRootDir,SOURCE_TO_USAGES),DependencyContext.descriptorS,UsageRepr.Cluster.clusterExternalizer(myContext),ourUsageClusterSetConstructor);
    myClassToSourceFile=new PersistentMaplet<DependencyContext.S,DependencyContext.S>(DependencyContext.getTableFile(myRootDir,CLASS_TO_SOURCE),DependencyContext.descriptorS,DependencyContext.descriptorS);
  }
}
