{
  final boolean isField=member instanceof FieldRepr;
  final Util self=new Util(this);
  if ((member.access & Opcodes.ACC_PUBLIC) > 0) {
    debug("Public access, switching to a non-incremental mode");
    return false;
  }
  if ((member.access & Opcodes.ACC_PROTECTED) > 0) {
    debug("Protected access, softening non-incremental decision: adding all relevant subclasses for a recompilation");
    debug("Root class: ",owner);
    final Collection<DependencyContext.S> propagated=self.propagateFieldAccess(isField ? member.name : myContext.get(""),owner);
    for (    DependencyContext.S className : propagated) {
      final String fileName=myContext.getValue(myClassToSourceFile.get(className));
      debug("Adding ",fileName);
      affectedFiles.add(new File(fileName));
    }
  }
  final String packageName=ClassRepr.getPackageName(myContext.getValue(isField ? owner : member.name));
  debug("Softening non-incremental decision: adding all package classes for a recompilation");
  debug("Package name: ",packageName);
  for (  Map.Entry<DependencyContext.S,DependencyContext.S> e : myClassToSourceFile.entrySet()) {
    final DependencyContext.S className=e.getKey();
    final DependencyContext.S fileName=e.getValue();
    if (ClassRepr.getPackageName(myContext.getValue(className)).equals(packageName)) {
      final String f=myContext.getValue(fileName);
      final File file=new File(f);
      if (filter.accept(file)) {
        debug("Adding: ",f);
        affectedFiles.add(file);
      }
    }
  }
  return true;
}
