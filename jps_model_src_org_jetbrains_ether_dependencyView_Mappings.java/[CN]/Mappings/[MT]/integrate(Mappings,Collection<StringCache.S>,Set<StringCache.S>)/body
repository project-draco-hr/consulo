{
  if (removed != null) {
    for (    StringCache.S file : removed) {
      final Set<ClassRepr> classes=(Set<ClassRepr>)sourceFileToClasses.foxyGet(file);
      final UsageRepr.Cluster cluster=sourceFileToUsages.get(file);
      final Set<UsageRepr.Usage> usages=cluster == null ? null : cluster.getUsages();
      if (classes != null) {
        for (        ClassRepr cr : classes) {
          classToSubclasses.remove(cr.name);
          classToSourceFile.remove(cr.name);
          classToClassDependency.remove(cr.name);
          for (          StringCache.S superSomething : cr.getSupers()) {
            classToSubclasses.removeFrom(superSomething,cr.name);
          }
          if (usages != null) {
            for (            UsageRepr.Usage u : usages) {
              if (u instanceof UsageRepr.ClassUsage) {
                final Set<StringCache.S> residents=cluster.getResidence(u);
                if (residents != null && residents.contains(cr.name)) {
                  classToClassDependency.removeFrom(((UsageRepr.ClassUsage)u).className,cr.name);
                }
              }
            }
          }
        }
      }
      sourceFileToClasses.remove(file);
      sourceFileToUsages.remove(file);
    }
  }
  classToSubclasses.putAll(delta.classToSubclasses);
  formToClass.putAll(delta.formToClass);
  classToForm.putAll(delta.classToForm);
  sourceFileToClasses.putAll(delta.sourceFileToClasses);
  sourceFileToUsages.putAll(delta.sourceFileToUsages);
  sourceFileToAnnotationUsages.putAll(delta.sourceFileToAnnotationUsages);
  classToSourceFile.putAll(delta.classToSourceFile);
  for (  StringCache.S file : delta.classToClassDependency.keySet()) {
    final Collection<StringCache.S> now=delta.classToClassDependency.foxyGet(file);
    final Collection<StringCache.S> past=classToClassDependency.foxyGet(file);
    if (past == null) {
      classToClassDependency.put(file,now);
    }
 else {
      final Collection<StringCache.S> removeSet=new HashSet<StringCache.S>(compiled);
      removeSet.removeAll(now);
      past.addAll(now);
      past.removeAll(removeSet);
      classToClassDependency.remove(file);
      classToClassDependency.put(file,past);
    }
  }
}
