{
class Calculator {
    int classes=0;
    int sizes=0;
    void register(    final int a,    final int b){
      classes+=b;
      sizes+=a * b;
    }
    String get(){
      return "Average: " + Float.toString(sizes / (float)classes);
    }
    void init(){
      classes=0;
      sizes=0;
    }
  }
  final TIntIntHashMap usageCount=new TIntIntHashMap();
  final TIntIntHashMap annotationCount=new TIntIntHashMap();
  mySourceFileToAnnotationUsages.forEachEntry(new TIntObjectProcedure<Collection<UsageRepr.Usage>>(){
    @Override public boolean execute(    final int a,    final Collection<UsageRepr.Usage> b){
      final ByteArrayOutputStream bas=new ByteArrayOutputStream();
      final DataOutputStream os=new DataOutputStream(bas);
      for (      final UsageRepr.Usage u : b) {
        u.save(os);
      }
      try {
        bas.close();
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
      int n=bas.size();
      annotationCount.put(n,annotationCount.get(n) + 1);
      return true;
    }
  }
);
  mySourceFileToUsages.forEachEntry(new TIntObjectProcedure<Collection<UsageRepr.Cluster>>(){
    @Override public boolean execute(    final int a,    final Collection<UsageRepr.Cluster> b){
      final ByteArrayOutputStream bas=new ByteArrayOutputStream();
      final DataOutputStream os=new DataOutputStream(bas);
      for (      final UsageRepr.Cluster u : b) {
        u.save(os);
      }
      try {
        bas.close();
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
      int n=bas.size();
      usageCount.put(n,usageCount.get(n) + 1);
      return true;
    }
  }
);
  final StringBuffer buf=new StringBuffer();
  final Calculator c=new Calculator();
  buf.append("Annotation statistics:\n");
  annotationCount.forEachEntry(new TIntIntProcedure(){
    @Override public boolean execute(    final int a,    final int b){
      buf.append("  " + Integer.toString(a) + "\t\t: "+ Integer.toString(b)+ "\n");
      c.register(a,b);
      return true;
    }
  }
);
  buf.append("  " + c.get());
  c.init();
  buf.append("Usage statistics:\n");
  usageCount.forEachEntry(new TIntIntProcedure(){
    @Override public boolean execute(    final int a,    final int b){
      buf.append("  " + Integer.toString(a) + "\t\t: "+ Integer.toString(b)+ "\n");
      c.register(a,b);
      return true;
    }
  }
);
  buf.append("  " + c.get());
  return buf.toString();
}
