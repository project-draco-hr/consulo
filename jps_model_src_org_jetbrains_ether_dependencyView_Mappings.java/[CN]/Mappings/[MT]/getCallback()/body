{
  return new Callbacks.Backend(){
    public void associate(    final String classFileName,    final String sourceFileName,    final ClassReader cr){
synchronized (myLock) {
        final int classFileNameS=myContext.get(classFileName);
        final Pair<ClassRepr,Set<UsageRepr.Usage>> result=new ClassfileAnalyzer(myContext).analyze(classFileNameS,cr);
        final ClassRepr repr=result.first;
        if (repr != null) {
          final Set<UsageRepr.Usage> localUsages=result.second;
          final int sourceFileNameS=myContext.get(sourceFileName);
          final int className=repr.myName;
          myClassToSourceFile.put(className,sourceFileNameS);
          mySourceFileToClasses.put(sourceFileNameS,repr);
          for (          final int s : repr.getSupers()) {
            myClassToSubclasses.put(s,className);
          }
          for (          final UsageRepr.Usage u : localUsages) {
            final int owner=u.getOwner();
            if (owner != className) {
              final int ownerSourceFile=myClassToSourceFile.get(owner);
              if (ownerSourceFile > 0) {
                if (ownerSourceFile != sourceFileNameS) {
                  myClassToClassDependency.put(owner,className);
                }
              }
 else {
                myClassToClassDependency.put(owner,className);
              }
            }
          }
        }
      }
    }
    @Override public void registerImports(    final String className,    final Collection<String> imports,    Collection<String> staticImports){
      for (      final String s : staticImports) {
        int i=s.length() - 1;
        for (; s.charAt(i) != '.'; i--)         ;
        imports.add(s.substring(0,i));
      }
      addPostPass(new PostPass(){
        public void perform(){
          final int rootClassName=myContext.get(className.replace(".","/"));
          final int fileName=myClassToSourceFile.get(rootClassName);
          for (          final String i : imports) {
            if (i.endsWith("*")) {
              continue;
            }
            final int iname=myContext.get(i.replace(".","/"));
            myClassToClassDependency.put(iname,rootClassName);
            final ClassRepr repr=getReprByName(rootClassName);
            if (repr != null && fileName != 0) {
              if (repr.addUsage(UsageRepr.createClassUsage(myContext,iname))) {
                mySourceFileToClasses.put(fileName,repr);
              }
              ;
            }
          }
        }
      }
);
    }
  }
;
}
