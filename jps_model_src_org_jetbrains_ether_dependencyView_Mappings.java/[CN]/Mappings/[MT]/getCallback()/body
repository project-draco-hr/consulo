{
  return new Callbacks.Backend(){
    public Collection<String> getClassFiles(){
      final HashSet<String> result=new HashSet<String>();
      for (      DependencyContext.S s : classToSourceFile.keySet()) {
        result.add(s.getValue());
      }
      return result;
    }
    public void associate(    final String classFileName,    final Callbacks.SourceFileNameLookup sourceFileName,    final ClassReader cr){
      final DependencyContext.S classFileNameS=context.get(classFileName);
      final Pair<ClassRepr,Pair<UsageRepr.Cluster,Set<UsageRepr.Usage>>> result=new ClassfileAnalyzer(context).analyze(classFileNameS,cr);
      final ClassRepr repr=result.first;
      final UsageRepr.Cluster localUsages=result.second.first;
      final Set<UsageRepr.Usage> localAnnotationUsages=result.second.second;
      final String srcFileName=sourceFileName.get(repr == null ? null : repr.getSourceFileName().getValue());
      final DependencyContext.S sourceFileNameS=context.get(srcFileName);
      if (repr != null) {
        final DependencyContext.S className=repr.name;
        for (        UsageRepr.Usage u : localUsages.getUsages()) {
          classToClassDependency.put(u.getOwner(),className);
        }
      }
      if (repr != null) {
        classToSourceFile.put(repr.name,sourceFileNameS);
        sourceFileToClasses.put(sourceFileNameS,repr);
        for (        DependencyContext.S s : repr.getSupers()) {
          classToSubclasses.put(s,repr.name);
        }
      }
      if (!localUsages.isEmpty()) {
        updateSourceToUsages(sourceFileNameS,localUsages);
      }
      if (!localAnnotationUsages.isEmpty()) {
        updateSourceToAnnotationUsages(sourceFileNameS,localAnnotationUsages);
      }
    }
    public void associateForm(    String formName,    String className){
      updateFormToClass(context.get(formName),context.get(className));
    }
  }
;
}
