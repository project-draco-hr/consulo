{
  if (!isTransient) {
    myContext=new DependencyContext(rootDir);
  }
  myClassToSubclasses=new PersistentMultiMaplet<DependencyContext.S,DependencyContext.S>(DependencyContext.getTableFile(rootDir,CLASS_TO_SUBCLASSES),DependencyContext.descriptorS,DependencyContext.descriptorS,ourStringSetConstructor);
  myClassToClassDependency=new PersistentMultiMaplet<DependencyContext.S,DependencyContext.S>(DependencyContext.getTableFile(rootDir,CLASS_TO_CLASS),DependencyContext.descriptorS,DependencyContext.descriptorS,ourStringSetConstructor);
  mySourceFileToClasses=new PersistentMultiMaplet<DependencyContext.S,ClassRepr>(DependencyContext.getTableFile(rootDir,SOURCE_TO_CLASS),DependencyContext.descriptorS,ClassRepr.externalizer(myContext),ourClassSetConstructor);
  mySourceFileToAnnotationUsages=new PersistentMultiMaplet<DependencyContext.S,UsageRepr.Usage>(DependencyContext.getTableFile(rootDir,SOURCE_TO_ANNOTATIONS),DependencyContext.descriptorS,UsageRepr.externalizer(myContext),ourUsageSetConstructor);
  mySourceFileToUsages=new PersistentMultiMaplet<DependencyContext.S,UsageRepr.Cluster>(DependencyContext.getTableFile(rootDir,SOURCE_TO_USAGES),DependencyContext.descriptorS,UsageRepr.Cluster.clusterExternalizer(myContext),ourUsageClusterSetConstructor);
  myClassToSourceFile=new PersistentMaplet<DependencyContext.S,DependencyContext.S>(DependencyContext.getTableFile(rootDir,CLASS_TO_SOURCE),DependencyContext.descriptorS,DependencyContext.descriptorS);
}
