{
  final boolean isField=member instanceof FieldRepr;
  final Util self=new Util(this);
  if ((member.access & Opcodes.ACC_PUBLIC) > 0) {
    debug("Switched to non-incremental mode");
    return false;
  }
  if ((member.access & Opcodes.ACC_PROTECTED) > 0) {
    debug("Softening non-incremental decision: adding all relevant subclasses for a recompilation");
    final Collection<DependencyContext.S> propagated=self.propagateFieldAccess(isField ? member.name : myContext.get(""),owner);
    for (    DependencyContext.S className : propagated) {
      affectedFiles.add(new File(myContext.getValue(myClassToSourceFile.get(className))));
    }
  }
  debug("Softening non-incremental decision: adding all package classes for a recompilation");
  final String packageName=ClassRepr.getPackageName(myContext.getValue(isField ? owner : member.name));
  for (  Map.Entry<DependencyContext.S,DependencyContext.S> e : myClassToSourceFile.entrySet()) {
    final DependencyContext.S className=e.getKey();
    final DependencyContext.S fileName=e.getValue();
    if (ClassRepr.getPackageName(myContext.getValue(className)).equals(packageName)) {
      affectedFiles.add(new File(myContext.getValue(fileName)));
    }
  }
  return true;
}
