{
  if (clusters == null) {
    final int sourceFile=myClassToSourceFile.get(className);
    if (sourceFile > 0) {
      clusters=mySourceFileToUsages.get(sourceFile);
    }
  }
  if (clusters != null) {
    final TIntHashSet usedClasses=new TIntHashSet();
    for (    final UsageRepr.Cluster cluster : clusters) {
      for (      final UsageRepr.Usage u : cluster.getUsages()) {
        final TIntHashSet residents=cluster.getResidence(u);
        if (residents != null && residents.contains(className)) {
          usedClasses.add(u.getOwner());
        }
      }
    }
    usedClasses.forEach(new TIntProcedure(){
      @Override public boolean execute(      int usedClassName){
        myClassToClassDependency.removeFrom(usedClassName,className);
        return true;
      }
    }
);
  }
}
