{
  try {
    if (removed != null) {
      for (      String file : removed) {
        final DependencyContext.S key=myContext.get(file);
        final Set<ClassRepr> classes=(Set<ClassRepr>)mySourceFileToClasses.get(key);
        final Collection<UsageRepr.Cluster> clusters=mySourceFileToUsages.get(key);
        if (classes != null) {
          for (          ClassRepr cr : classes) {
            myClassToSubclasses.remove(cr.name);
            myClassToSourceFile.remove(cr.name);
            myClassToClassDependency.remove(cr.name);
            for (            DependencyContext.S superSomething : cr.getSupers()) {
              myClassToSubclasses.removeFrom(superSomething,cr.name);
            }
            if (clusters != null) {
              for (              UsageRepr.Cluster cluster : clusters) {
                final Set<UsageRepr.Usage> usages=cluster.getUsages();
                if (usages != null) {
                  for (                  UsageRepr.Usage u : usages) {
                    if (u instanceof UsageRepr.ClassUsage) {
                      final Set<DependencyContext.S> residents=cluster.getResidence(u);
                      if (residents != null && residents.contains(cr.name)) {
                        myClassToClassDependency.removeFrom(((UsageRepr.ClassUsage)u).className,cr.name);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        mySourceFileToClasses.remove(key);
        mySourceFileToUsages.remove(key);
        mySourceFileToAnnotationUsages.remove(key);
      }
    }
    myClassToSubclasses.putAll(delta.myClassToSubclasses);
    mySourceFileToClasses.putAll(delta.mySourceFileToClasses);
    mySourceFileToUsages.putAll(delta.mySourceFileToUsages);
    mySourceFileToAnnotationUsages.putAll(delta.mySourceFileToAnnotationUsages);
    myClassToSourceFile.putAll(delta.myClassToSourceFile);
    final Collection<DependencyContext.S> compiledSet=new HashSet<DependencyContext.S>(compiled.size());
    for (    File c : compiled) {
      compiledSet.add(myContext.get(FileUtil.toSystemIndependentName(c.getAbsolutePath())));
    }
    for (    DependencyContext.S file : delta.myClassToClassDependency.keyCollection()) {
      final Collection<DependencyContext.S> now=delta.myClassToClassDependency.get(file);
      final Collection<DependencyContext.S> past=myClassToClassDependency.get(file);
      if (past == null) {
        myClassToClassDependency.put(file,now);
      }
 else {
        boolean changed=past.removeAll(compiledSet);
        changed|=past.addAll(now);
        if (changed) {
          myClassToClassDependency.remove(file);
          myClassToClassDependency.put(file,past);
        }
      }
    }
  }
  finally {
    delta.close();
  }
}
