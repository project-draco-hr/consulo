{
  myContext=new DependencyContext(rootDir);
  myClassToSubclasses=new PersistentMultiMaplet<DependencyContext.S,DependencyContext.S>(DependencyContext.getTableFile(rootDir,classToSubclassesName),DependencyContext.descriptorS,DependencyContext.descriptorS,ourStringSetConstructor);
  myClassToClassDependency=new PersistentMultiMaplet<DependencyContext.S,DependencyContext.S>(DependencyContext.getTableFile(rootDir,classToClassName),DependencyContext.descriptorS,DependencyContext.descriptorS,ourStringSetConstructor);
  mySourceFileToClasses=new PersistentMultiMaplet<DependencyContext.S,ClassRepr>(DependencyContext.getTableFile(rootDir,sourceToClassName),DependencyContext.descriptorS,ClassRepr.externalizer(myContext),ourClassSetConstructor);
  mySourceFileToAnnotationUsages=new PersistentMultiMaplet<DependencyContext.S,UsageRepr.Usage>(DependencyContext.getTableFile(rootDir,sourceToAnnotationsName),DependencyContext.descriptorS,UsageRepr.externalizer(myContext),ourUsageSetConstructor);
  mySourceFileToUsages=new PersistentMaplet<DependencyContext.S,UsageRepr.Cluster>(DependencyContext.getTableFile(rootDir,sourceToUsagesName),DependencyContext.descriptorS,UsageRepr.Cluster.clusterExternalizer(myContext));
  myClassToSourceFile=new PersistentMaplet<DependencyContext.S,DependencyContext.S>(DependencyContext.getTableFile(rootDir,classToSourceName),DependencyContext.descriptorS,DependencyContext.descriptorS);
}
