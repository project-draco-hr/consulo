{
  final ClassRepr repr=reprByName(reflcass);
  if (repr != null) {
    if (!root) {
      final Collection members=isField ? repr.getFields() : repr.getMethods();
      for (      Object o : members) {
        final ProtoMember m=(ProtoMember)o;
        if (m.myName == name) {
          return;
        }
      }
      acc.add(reflcass);
    }
    final TIntHashSet subclasses=myClassToSubclasses.get(reflcass);
    if (subclasses != null) {
      subclasses.forEach(new TIntProcedure(){
        @Override public boolean execute(        int subclass){
          propagateMemberAccessRec(acc,isField,false,name,subclass);
          return true;
        }
      }
);
    }
  }
}
