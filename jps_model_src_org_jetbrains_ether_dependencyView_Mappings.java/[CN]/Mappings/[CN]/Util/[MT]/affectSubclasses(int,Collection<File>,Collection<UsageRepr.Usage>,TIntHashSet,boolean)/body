{
  debug("Affecting subclasses of class: ",className);
  final int fileName=myClassToSourceFile.get(className);
  if (fileName <= 0) {
    debug("No source file detected for class ",className);
    debug("End of affectSubclasses");
    return;
  }
  debug("Source file name: ",fileName);
  if (usages) {
    debug("Class usages affection requested");
    final ClassRepr classRepr=reprByName(className);
    if (classRepr != null) {
      debug("Added class usage for ",classRepr.myName);
      affectedUsages.add(classRepr.createUsage());
    }
  }
  final TIntHashSet depClasses=myClassToClassDependency.get(className);
  if (depClasses != null) {
    addAll(dependants,depClasses);
  }
  affectedFiles.add(new File(myContext.getValue(fileName)));
  final TIntHashSet directSubclasses=myClassToSubclasses.get(className);
  if (directSubclasses != null) {
    directSubclasses.forEach(new TIntProcedure(){
      @Override public boolean execute(      int subClass){
        affectSubclasses(subClass,affectedFiles,affectedUsages,dependants,usages);
        return true;
      }
    }
);
  }
}
