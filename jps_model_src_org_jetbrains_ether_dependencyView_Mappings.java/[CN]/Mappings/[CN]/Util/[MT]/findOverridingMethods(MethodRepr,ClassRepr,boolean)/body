{
  final Set<Pair<MethodRepr,ClassRepr>> result=new HashSet<Pair<MethodRepr,ClassRepr>>();
  final MethodRepr.Predicate predicate=bySpecificity ? lessSpecific(m) : MethodRepr.equalByJavaRules(m);
  new Object(){
    public void run(    final ClassRepr c){
      final Collection<DependencyContext.S> subClasses=myClassToSubclasses.get(c.name);
      if (subClasses != null) {
        for (        DependencyContext.S subClassName : subClasses) {
          final ClassRepr r=reprByName(subClassName);
          if (r != null) {
            boolean cont=true;
            final Collection<MethodRepr> methods=r.findMethods(predicate);
            for (            MethodRepr mm : methods) {
              if (isVisibleIn(c,m,r)) {
                result.add(new Pair<MethodRepr,ClassRepr>(mm,r));
                cont=false;
              }
            }
            if (cont) {
              run(r);
            }
          }
        }
      }
    }
  }
.run(c);
  return result;
}
