{
synchronized (myLock) {
    myDelta.myIsDifferentiated=true;
    if (myDelta.myIsRebuild) {
      return true;
    }
    debug("Begin of Differentiate:");
    debug("Easy mode: ",myEasyMode);
    processDisappearedClasses();
    final List<FileClasses> newClasses=new ArrayList<FileClasses>();
    myDelta.mySourceFileToClasses.forEachEntry(new TIntObjectProcedure<Collection<ClassRepr>>(){
      @Override public boolean execute(      int fileName,      Collection<ClassRepr> classes){
        newClasses.add(new FileClasses(fileName,classes));
        return true;
      }
    }
);
    for (    final FileClasses compiledFile : newClasses) {
      final int fileName=compiledFile.myFileName;
      final Set<ClassRepr> classes=compiledFile.myFileClasses;
      final Set<ClassRepr> pastClasses=(Set<ClassRepr>)mySourceFileToClasses.get(fileName);
      final DiffState state=new DiffState(Difference.make(pastClasses,classes));
      if (!processChangedClasses(state)) {
        if (!myEasyMode) {
          return false;
        }
      }
      processRemovedClases(state);
      processAddedClasses(state);
      if (!myEasyMode) {
        calculateAffectedFiles(state);
      }
    }
    debug("End of Differentiate.");
    if (myEasyMode) {
      return false;
    }
    final Collection<String> removed=myDelta.myRemovedFiles;
    if (removed != null) {
      for (      final String r : removed) {
        myAffectedFiles.remove(new File(r));
      }
    }
    return myDelayedWorks.doWork(myAffectedFiles);
  }
}
