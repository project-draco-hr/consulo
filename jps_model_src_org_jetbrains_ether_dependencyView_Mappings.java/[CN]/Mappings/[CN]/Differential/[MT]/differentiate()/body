{
synchronized (myLock) {
    debug("Begin of Differentiate:");
    processDisappearedClasses();
    final List<FileClasses> newClasses=new ArrayList<FileClasses>();
    myDelta.mySourceFileToClasses.forEachEntry(new TIntObjectProcedure<Collection<ClassRepr>>(){
      @Override public boolean execute(      int fileName,      Collection<ClassRepr> classes){
        newClasses.add(new FileClasses(fileName,classes));
        return true;
      }
    }
);
    for (    final FileClasses compiledFile : newClasses) {
      final int fileName=compiledFile.fileName;
      final Set<ClassRepr> classes=compiledFile.fileClasses;
      final Set<ClassRepr> pastClasses=(Set<ClassRepr>)mySourceFileToClasses.get(fileName);
      final DiffState state=new DiffState(Difference.make(pastClasses,classes));
      if (!processChangedClasses(state)) {
        return false;
      }
      processRemovedClases(state);
      processAddedClasses(state);
      calaulateAffectedFiles(state);
    }
    if (myRemoved != null) {
      for (      final String r : myRemoved) {
        myAffectedFiles.remove(new File(r));
      }
    }
    debug("End of Differentiate.");
    return myDelayedWorks.doWork(myAffectedFiles);
  }
}
