{
  debug("Checking dependent files:");
  final TIntHashSet dependentFiles=new TIntHashSet(DEFAULT_SET_CAPACITY,DEFAULT_SET_LOAD_FACTOR);
  state.myDependants.forEach(new TIntProcedure(){
    @Override public boolean execute(    int depClass){
      final int file=myClassToSourceFile.get(depClass);
      if (file > 0) {
        dependentFiles.add(file);
      }
      return true;
    }
  }
);
  filewise:   for (  final int depFile : dependentFiles.toArray()) {
    final File theFile=new File(myContext.getValue(depFile));
    if (myAffectedFiles.contains(theFile) || myCompiledFiles.contains(theFile)) {
      continue filewise;
    }
    debug("Dependent file: ",depFile);
    final Collection<UsageRepr.Cluster> depClusters=mySourceFileToUsages.get(depFile);
    if (depClusters != null) {
      for (      final UsageRepr.Cluster depCluster : depClusters) {
        final Set<UsageRepr.Usage> depUsages=depCluster.getUsages();
        if (depUsages == null) {
          continue;
        }
        final Set<UsageRepr.Usage> usages=new HashSet<UsageRepr.Usage>(depUsages);
        usages.retainAll(state.myAffectedUsages);
        if (!usages.isEmpty()) {
          for (          UsageRepr.Usage usage : usages) {
            final Util.UsageConstraint constraint=state.myUsageConstraints.get(usage);
            if (constraint == null) {
              debug("Added file with no constraints");
              myAffectedFiles.add(theFile);
              continue filewise;
            }
 else {
              final TIntHashSet residenceClasses=depCluster.getResidence(usage);
              for (              final int residentName : residenceClasses.toArray()) {
                if (constraint.checkResidence(residentName)) {
                  debug("Added file with satisfied constraint");
                  myAffectedFiles.add(theFile);
                  continue filewise;
                }
              }
            }
          }
        }
        if (state.myAnnotationQuery.size() > 0) {
          final Collection<UsageRepr.Usage> annotationUsages=mySourceFileToAnnotationUsages.get(depFile);
          for (          final UsageRepr.Usage usage : annotationUsages) {
            for (            final UsageRepr.AnnotationUsage query : state.myAnnotationQuery) {
              if (query.satisfies(usage)) {
                debug("Added file due to annotation query");
                myAffectedFiles.add(theFile);
                continue filewise;
              }
            }
          }
        }
      }
    }
  }
}
