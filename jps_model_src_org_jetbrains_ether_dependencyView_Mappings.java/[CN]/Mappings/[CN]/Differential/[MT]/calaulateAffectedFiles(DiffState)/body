{
  debug("Checking dependent classes:");
  state.myDependants.forEach(new TIntProcedure(){
    @Override public boolean execute(    final int depClass){
      final int depFile=myClassToSourceFile.get(depClass);
      if (depFile != 0) {
        final File theFile=new File(myContext.getValue(depFile));
        if (myAffectedFiles.contains(theFile) || myCompiledFiles.contains(theFile)) {
          return true;
        }
        debug("Dependent class: ",depClass);
        final ClassRepr classRepr=getReprByName(depClass);
        if (classRepr == null) {
          return true;
        }
        final Set<UsageRepr.Usage> depUsages=classRepr.getUsages();
        if (depUsages == null) {
          return true;
        }
        for (        UsageRepr.Usage usage : depUsages) {
          if (usage instanceof UsageRepr.AnnotationUsage) {
            for (            final UsageRepr.AnnotationUsage query : state.myAnnotationQuery) {
              if (query.satisfies(usage)) {
                debug("Added file due to annotation query");
                myAffectedFiles.add(theFile);
                return true;
              }
            }
          }
 else           if (state.myAffectedUsages.contains(usage)) {
            final Util.UsageConstraint constraint=state.myUsageConstraints.get(usage);
            if (constraint == null) {
              debug("Added file with no constraints");
              myAffectedFiles.add(theFile);
              return true;
            }
 else {
              if (constraint.checkResidence(depClass)) {
                debug("Added file with satisfied constraint");
                myAffectedFiles.add(theFile);
                return true;
              }
            }
          }
        }
      }
      return true;
    }
  }
);
}
