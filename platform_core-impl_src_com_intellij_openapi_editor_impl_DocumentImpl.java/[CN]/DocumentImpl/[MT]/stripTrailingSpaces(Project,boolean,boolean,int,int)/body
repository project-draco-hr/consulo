{
  if (!isStripTrailingSpacesEnabled) {
    return true;
  }
  boolean markAsNeedsStrippingLater=false;
  CharSequence text=myText;
  RangeMarker caretMarker=caretOffset < 0 || caretOffset > getTextLength() ? null : createRangeMarker(caretOffset,caretOffset);
  try {
    LineSet lineSet=getLineSet();
    for (int line=0; line < lineSet.getLineCount(); line++) {
      if (inChangedLinesOnly && !lineSet.isModified(line))       continue;
      int whiteSpaceStart=-1;
      final int lineEnd=lineSet.getLineEnd(line) - lineSet.getSeparatorLength(line);
      int lineStart=lineSet.getLineStart(line);
      for (int offset=lineEnd - 1; offset >= lineStart; offset--) {
        char c=text.charAt(offset);
        if (c != ' ' && c != '\t') {
          break;
        }
        whiteSpaceStart=offset;
      }
      if (whiteSpaceStart == -1)       continue;
      if (!virtualSpaceEnabled && caretLine == line && caretMarker != null && caretMarker.getStartOffset() >= 0 && whiteSpaceStart < caretMarker.getStartOffset()) {
        markAsNeedsStrippingLater=true;
      }
 else {
        final int finalStart=whiteSpaceStart;
        DocumentUtil.writeInRunUndoTransparentAction(new DocumentRunnable(DocumentImpl.this,project){
          @Override public void run(){
            deleteString(finalStart,lineEnd);
          }
        }
);
        text=myText;
      }
    }
  }
  finally {
    if (caretMarker != null)     caretMarker.dispose();
  }
  return markAsNeedsStrippingLater;
}
