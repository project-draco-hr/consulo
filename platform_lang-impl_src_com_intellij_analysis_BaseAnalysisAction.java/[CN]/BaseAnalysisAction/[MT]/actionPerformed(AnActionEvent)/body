{
  DataContext dataContext=e.getDataContext();
  final Project project=e.getData(PlatformDataKeys.PROJECT);
  final Module module=e.getData(LangDataKeys.MODULE);
  if (project == null) {
    return;
  }
  AnalysisScope scope=getInspectionScope(dataContext);
  LOG.assertTrue(scope != null);
  final boolean rememberScope=e.getPlace().equals(ActionPlaces.MAIN_MENU);
  final AnalysisUIOptions uiOptions=AnalysisUIOptions.getInstance(project);
  PsiElement element=LangDataKeys.PSI_ELEMENT.getData(dataContext);
  BaseAnalysisActionDialog dlg=new BaseAnalysisActionDialog(AnalysisScopeBundle.message("specify.analysis.scope",myTitle),AnalysisScopeBundle.message("analysis.scope.title",myAnalysisNoon),project,scope,module != null ? ModuleUtilCore.getModuleNameInReadAction(module) : null,rememberScope,AnalysisUIOptions.getInstance(project),element){
    @Override @Nullable protected JComponent getAdditionalActionSettings(    final Project project){
      return BaseAnalysisAction.this.getAdditionalActionSettings(project,this);
    }
    @Override protected void doHelpAction(){
      HelpManager.getInstance().invokeHelp(getHelpTopic());
    }
    @NotNull @Override protected Action[] createActions(){
      return new Action[]{getOKAction(),getCancelAction(),getHelpAction()};
    }
  }
;
  dlg.show();
  if (!dlg.isOK()) {
    canceled();
    return;
  }
  final int oldScopeType=uiOptions.SCOPE_TYPE;
  scope=dlg.getScope(uiOptions,scope,project,module);
  if (!rememberScope) {
    uiOptions.SCOPE_TYPE=oldScopeType;
  }
  uiOptions.ANALYZE_TEST_SOURCES=dlg.isInspectTestSources();
  FileDocumentManager.getInstance().saveAllDocuments();
  analyze(project,scope);
}
