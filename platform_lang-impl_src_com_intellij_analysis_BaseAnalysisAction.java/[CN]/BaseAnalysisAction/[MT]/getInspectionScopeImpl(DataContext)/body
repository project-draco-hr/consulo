{
  Project projectContext=PlatformDataKeys.PROJECT_CONTEXT.getData(dataContext);
  if (projectContext != null) {
    return new AnalysisScope(projectContext);
  }
  final AnalysisScope analysisScope=AnalysisScope.KEY.getData(dataContext);
  if (analysisScope != null) {
    return analysisScope;
  }
  Module moduleContext=LangDataKeys.MODULE_CONTEXT.getData(dataContext);
  if (moduleContext != null) {
    return new AnalysisScope(moduleContext);
  }
  Module[] modulesArray=LangDataKeys.MODULE_CONTEXT_ARRAY.getData(dataContext);
  if (modulesArray != null) {
    return new AnalysisScope(modulesArray);
  }
  PsiFile psiFile=LangDataKeys.PSI_FILE.getData(dataContext);
  if (psiFile != null && psiFile.getManager().isInProject(psiFile)) {
    return new AnalysisScope(psiFile);
  }
  PsiElement psiTarget=LangDataKeys.PSI_ELEMENT.getData(dataContext);
  if (psiTarget instanceof PsiDirectory) {
    PsiDirectory psiDirectory=(PsiDirectory)psiTarget;
    if (!acceptNonProjectDirectories() && !psiDirectory.getManager().isInProject(psiDirectory))     return null;
    return new AnalysisScope(psiDirectory);
  }
 else   if (psiTarget != null) {
    return null;
  }
  final VirtualFile[] virtualFiles=PlatformDataKeys.VIRTUAL_FILE_ARRAY.getData(dataContext);
  if (virtualFiles != null) {
    final Project project=PlatformDataKeys.PROJECT.getData(dataContext);
    final ProjectFileIndex fileIndex=ProjectRootManager.getInstance(project).getFileIndex();
    Set<VirtualFile> files=new HashSet<VirtualFile>();
    for (    VirtualFile vFile : virtualFiles) {
      if (fileIndex.isInContent(vFile)) {
        if (vFile instanceof VirtualFileWindow) {
          files.add(vFile);
          vFile=((VirtualFileWindow)vFile).getDelegate();
        }
        traverseDirectory(vFile,files);
      }
    }
    return new AnalysisScope(project,files);
  }
  return getProjectScope(dataContext);
}
