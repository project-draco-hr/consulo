{
  Project projectContext=PlatformDataKeys.PROJECT_CONTEXT.getData(dataContext);
  if (projectContext != null) {
    return new AnalysisScope(projectContext);
  }
  final AnalysisScope analysisScope=AnalysisScope.KEY.getData(dataContext);
  if (analysisScope != null) {
    return analysisScope;
  }
  final PsiFile psiFile=LangDataKeys.PSI_FILE.getData(dataContext);
  if (psiFile != null && psiFile.getManager().isInProject(psiFile)) {
    final VirtualFile file=psiFile.getVirtualFile();
    if (file != null && file.isValid() && file.getFileType() instanceof ArchiveFileType && acceptNonProjectDirectories()) {
      final VirtualFile jarRoot=ArchiveVfsUtil.getJarRootForLocalFile(file);
      if (jarRoot != null) {
        PsiDirectory psiDirectory=psiFile.getManager().findDirectory(jarRoot);
        if (psiDirectory != null) {
          return new AnalysisScope(psiDirectory);
        }
      }
    }
    return new AnalysisScope(psiFile);
  }
  VirtualFile[] virtualFiles=PlatformDataKeys.VIRTUAL_FILE_ARRAY.getData(dataContext);
  Project project=CommonDataKeys.PROJECT.getData(dataContext);
  if (virtualFiles != null && project != null) {
    ProjectFileIndex fileIndex=ProjectRootManager.getInstance(project).getFileIndex();
    if (virtualFiles.length == 1) {
      PsiDirectory psiDirectory=PsiManager.getInstance(project).findDirectory(virtualFiles[0]);
      if (psiDirectory != null && (acceptNonProjectDirectories() || psiDirectory.getManager().isInProject(psiDirectory))) {
        return new AnalysisScope(psiDirectory);
      }
    }
    Set<VirtualFile> files=new HashSet<VirtualFile>();
    for (    VirtualFile vFile : virtualFiles) {
      if (fileIndex.isInContent(vFile)) {
        if (vFile instanceof VirtualFileWindow) {
          files.add(vFile);
          vFile=((VirtualFileWindow)vFile).getDelegate();
        }
        collectFilesUnder(vFile,files);
      }
    }
    return new AnalysisScope(project,files);
  }
  Module moduleContext=LangDataKeys.MODULE_CONTEXT.getData(dataContext);
  if (moduleContext != null) {
    return new AnalysisScope(moduleContext);
  }
  Module[] modulesArray=LangDataKeys.MODULE_CONTEXT_ARRAY.getData(dataContext);
  if (modulesArray != null) {
    return new AnalysisScope(modulesArray);
  }
  return project == null ? null : new AnalysisScope(project);
}
