{
  final String artifactName=FileUtil.getNameWithoutExtension(getArtifactRootName());
  final List<String> commandLine=new ArrayList<String>();
  addParameter(commandLine,FileUtil.toSystemDependentName(binPath + File.separator + "javafxpackager"));
  addParameter(commandLine,"-deploy");
  appendIfNotEmpty(commandLine,"-title",getTitle());
  appendIfNotEmpty(commandLine,"-vendor",getVendor());
  appendIfNotEmpty(commandLine,"-description",getDescription());
  addParameter(commandLine,"-appclass");
  addParameter(commandLine,getAppClass());
  addParameter(commandLine,"-width");
  addParameter(commandLine,getWidth());
  addParameter(commandLine,"-height");
  addParameter(commandLine,getHeight());
  appendIfNotEmpty(commandLine,"-htmlparamfile",getHtmlParamFile());
  appendIfNotEmpty(commandLine,"-paramfile",getParamFile());
  addParameter(commandLine,"-updatemode");
  addParameter(commandLine,getUpdateMode());
  addParameter(commandLine,"-name");
  addParameter(commandLine,artifactName);
  addParameter(commandLine,"-outdir");
  final File tempDirectory;
  try {
    tempDirectory=FileUtil.createTempDirectory("javafxpackager","out");
  }
 catch (  IOException e) {
    registerJavaFxPackagerError(e);
    return;
  }
  addParameter(commandLine,tempDirectory.getPath());
  addParameter(commandLine,"-outfile");
  addParameter(commandLine,artifactName);
  addParameter(commandLine,"-srcdir");
  addParameter(commandLine,tempDirWithCreatedJar.getPath());
  addParameter(commandLine,"-v");
  final int result=startProcess(commandLine);
  if (result == 0) {
    if (isEnabledSigning()) {
      signApp(binPath,tempDirectory);
    }
  }
  FileUtil.delete(tempUnzippedArtifactOutput);
  FileUtil.delete(new File(getArtifactOutputFilePath()));
  copyResultsToArtifactsOutput(tempDirWithCreatedJar);
  copyResultsToArtifactsOutput(tempDirectory);
}
