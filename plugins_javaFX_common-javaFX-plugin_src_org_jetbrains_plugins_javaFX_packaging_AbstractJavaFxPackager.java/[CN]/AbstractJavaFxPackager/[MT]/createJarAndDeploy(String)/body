{
  final String zipPath=getArtifactOutputFilePath();
  final File tempUnzippedArtifactOutput;
  try {
    tempUnzippedArtifactOutput=FileUtil.createTempDirectory("artifact","unzipped");
    ZipUtil.extract(new File(zipPath),tempUnzippedArtifactOutput,null);
  }
 catch (  IOException e) {
    registerJavaFxPackagerError(e);
    return;
  }
  final List<String> commandLine=new ArrayList<String>();
  addParameter(commandLine,FileUtil.toSystemDependentName(binPath + File.separator + "javafxpackager"));
  addParameter(commandLine,"-createJar");
  addParameter(commandLine,"-appclass");
  addParameter(commandLine,getAppClass());
  addParameter(commandLine,"-srcdir");
  addParameter(commandLine,tempUnzippedArtifactOutput.getPath());
  addParameter(commandLine,"-outdir");
  final File tempDirWithJar;
  try {
    tempDirWithJar=FileUtil.createTempDirectory("javafxpackager","out");
  }
 catch (  IOException e) {
    registerJavaFxPackagerError(e);
    return;
  }
  addParameter(commandLine,tempDirWithJar.getPath());
  addParameter(commandLine,"-outfile");
  addParameter(commandLine,getArtifactName());
  addParameter(commandLine,"-v");
  addParameter(commandLine,"-nocss2bin");
  appendManifestProperties(commandLine);
  final int result=startProcess(commandLine);
  if (result == 0) {
    deploy(binPath,tempDirWithJar,tempUnzippedArtifactOutput);
  }
}
