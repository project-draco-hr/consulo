{
  IElementType i=getTreeParent().getElementType();
  if (i == DUMMY_HOLDER) {
    return myKindWhenDummy;
  }
 else   if (i == TYPE || i == EXTENDS_LIST || i == IMPLEMENTS_LIST || i == EXTENDS_BOUND_LIST || i == THROWS_LIST || i == THIS_EXPRESSION || i == SUPER_EXPRESSION || i == DOC_METHOD_OR_FIELD_REF || i == DOC_TAG_VALUE_TOKEN || i == REFERENCE_PARAMETER_LIST || i == ANNOTATION) {
    return CLASS_NAME_KIND;
  }
 else   if (i == NEW_EXPRESSION) {
    final TreeElement qualifier=getTreeParent().findChildByRole(ChildRole.QUALIFIER);
    return qualifier != null ? CLASS_IN_QUALIFIED_NEW_KIND : CLASS_NAME_KIND;
  }
 else   if (i == ANONYMOUS_CLASS) {
    if (getTreeParent().getChildRole(this) == ChildRole.BASE_CLASS_REFERENCE) {
      LOG.assertTrue(getTreeParent().getTreeParent().getElementType() == NEW_EXPRESSION);
      final TreeElement qualifier=getTreeParent().getTreeParent().findChildByRole(ChildRole.QUALIFIER);
      return qualifier != null ? CLASS_IN_QUALIFIED_NEW_KIND : CLASS_NAME_KIND;
    }
 else {
      return CLASS_OR_PACKAGE_NAME_KIND;
    }
  }
 else   if (i == PACKAGE_STATEMENT) {
    return PACKAGE_NAME_KIND;
  }
 else   if (i == IMPORT_STATEMENT) {
    final boolean isOnDemand=((PsiImportStatement)SourceTreeToPsiMap.treeElementToPsi(getTreeParent())).isOnDemand();
    return isOnDemand ? CLASS_FQ_OR_PACKAGE_NAME_KIND : CLASS_FQ_NAME_KIND;
  }
 else   if (i == IMPORT_STATIC_STATEMENT) {
    return CLASS_FQ_OR_PACKAGE_NAME_KIND;
  }
 else   if (i == JSP_IMPORT_VALUE) {
    final TreeElement nextNonSpace=TreeUtil.skipElements(getTreeNext(),WHITE_SPACE_OR_COMMENT_BIT_SET);
    final boolean isOnDemand=nextNonSpace != null && nextNonSpace.getElementType() == DOT;
    return isOnDemand ? CLASS_FQ_OR_PACKAGE_NAME_KIND : CLASS_FQ_NAME_KIND;
  }
 else   if (i == JAVA_CODE_REFERENCE) {
    final int parentKind=((PsiJavaCodeReferenceElementImpl)getTreeParent()).getKind();
switch (parentKind) {
case CLASS_NAME_KIND:
      return CLASS_OR_PACKAGE_NAME_KIND;
case PACKAGE_NAME_KIND:
    return PACKAGE_NAME_KIND;
case CLASS_OR_PACKAGE_NAME_KIND:
  return CLASS_OR_PACKAGE_NAME_KIND;
case CLASS_FQ_NAME_KIND:
return CLASS_FQ_OR_PACKAGE_NAME_KIND;
case CLASS_FQ_OR_PACKAGE_NAME_KIND:
return CLASS_FQ_OR_PACKAGE_NAME_KIND;
case CLASS_IN_QUALIFIED_NEW_KIND:
return CLASS_IN_QUALIFIED_NEW_KIND;
default :
LOG.assertTrue(false);
return -1;
}
}
 else if (i == CLASS || i == PARAMETER_LIST || i == ERROR_ELEMENT) {
return CLASS_OR_PACKAGE_NAME_KIND;
}
 else if (i == IMPORT_STATIC_REFERENCE) {
return CLASS_FQ_OR_PACKAGE_NAME_KIND;
}
 else if (i == DOC_TAG || i == DOC_INLINE_TAG) {
return CLASS_OR_PACKAGE_NAME_KIND;
}
 else {
LOG.error("Unknown parent for java code reference:" + getTreeParent());
return CLASS_NAME_KIND;
}
}
