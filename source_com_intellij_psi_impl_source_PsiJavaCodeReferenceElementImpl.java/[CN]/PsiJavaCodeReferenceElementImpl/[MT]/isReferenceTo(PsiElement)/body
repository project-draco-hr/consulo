{
switch (getKind()) {
case CLASS_NAME_KIND:
case CLASS_IN_QUALIFIED_NEW_KIND:
    if (!(element instanceof PsiClass))     return false;
  break;
case CLASS_FQ_NAME_KIND:
{
  if (!(element instanceof PsiClass))   return false;
  final String qName=((PsiClass)element).getQualifiedName();
  if (qName == null)   return false;
  return qName.equals(getCanonicalText());
}
case PACKAGE_NAME_KIND:
{
if (!(element instanceof PsiPackage)) return false;
final String qName=((PsiPackage)element).getQualifiedName();
if (qName == null) return false;
return qName.equals(getCanonicalText());
}
case CLASS_OR_PACKAGE_NAME_KIND:
{
if (element instanceof PsiPackage) {
final String qName=((PsiPackage)element).getQualifiedName();
if (qName == null) return false;
return qName.equals(getCanonicalText());
}
 else if (element instanceof PsiClass) {
final PsiIdentifier nameIdentifier=((PsiClass)element).getNameIdentifier();
if (nameIdentifier == null) return false;
if (!getReferenceNameElement().textMatches(nameIdentifier)) return false;
return element.getManager().areElementsEquivalent(element,resolve());
}
 else {
return false;
}
}
case CLASS_FQ_OR_PACKAGE_NAME_KIND:
if (element instanceof PsiClass) {
final String qName=((PsiClass)element).getQualifiedName();
if (qName == null) return false;
return qName.equals(getCanonicalText());
}
 else if (element instanceof PsiPackage) {
final String qName=((PsiPackage)element).getQualifiedName();
if (qName == null) return false;
return qName.equals(getCanonicalText());
}
 else {
return false;
}
default :
LOG.assertTrue(false);
return true;
}
final TreeElement referenceNameElement=findChildByRole(ChildRole.REFERENCE_NAME);
if (referenceNameElement.getElementType() != IDENTIFIER) return false;
final String name=((PsiClass)element).getName();
if (name == null) return false;
if (!referenceNameElement.getText().equals(name)) return false;
return element.getManager().areElementsEquivalent(element,resolve());
}
