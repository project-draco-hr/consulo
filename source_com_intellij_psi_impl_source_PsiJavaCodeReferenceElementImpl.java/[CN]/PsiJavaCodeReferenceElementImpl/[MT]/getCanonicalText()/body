{
switch (getKind()) {
case PsiJavaCodeReferenceElementImpl.CLASS_NAME_KIND:
case PsiJavaCodeReferenceElementImpl.CLASS_OR_PACKAGE_NAME_KIND:
case PsiJavaCodeReferenceElementImpl.CLASS_IN_QUALIFIED_NEW_KIND:
{
      final PsiElement target=resolve();
      if (target instanceof PsiClass) {
        final PsiClass aClass=(PsiClass)target;
        String name=aClass.getQualifiedName();
        if (name == null) {
          name=aClass.getName();
        }
        final PsiType[] types=getTypeParameters();
        if (types.length == 0)         return name;
        final StringBuffer buf=new StringBuffer();
        buf.append(name);
        buf.append('<');
        for (int i=0; i < types.length; i++) {
          if (i > 0)           buf.append(',');
          buf.append(types[i].getCanonicalText());
        }
        buf.append('>');
        return buf.toString();
      }
 else       if (target instanceof PsiPackage) {
        return ((PsiPackage)target).getQualifiedName();
      }
 else {
        LOG.assertTrue(target == null);
        return getTextSkipWhiteSpaceAndComments();
      }
    }
case PsiJavaCodeReferenceElementImpl.PACKAGE_NAME_KIND:
case PsiJavaCodeReferenceElementImpl.CLASS_FQ_NAME_KIND:
case PsiJavaCodeReferenceElementImpl.CLASS_FQ_OR_PACKAGE_NAME_KIND:
  return getTextSkipWhiteSpaceAndComments();
default :
LOG.assertTrue(false);
return null;
}
}
