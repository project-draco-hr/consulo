{
switch (kind) {
case CLASS_FQ_NAME_KIND:
{
      final String textSkipWhiteSpaceAndComments=getTextSkipWhiteSpaceAndComments();
      if (textSkipWhiteSpaceAndComments == null || textSkipWhiteSpaceAndComments.length() == 0)       return JavaResolveResult.EMPTY_ARRAY;
      final PsiClass aClass=getManager().findClass(textSkipWhiteSpaceAndComments,getResolveScope());
      if (aClass == null)       return JavaResolveResult.EMPTY_ARRAY;
      return new JavaResolveResult[]{new CandidateInfo(aClass,updateSubstitutor(PsiSubstitutor.EMPTY,aClass),this,false)};
    }
case CLASS_IN_QUALIFIED_NEW_KIND:
{
    final PsiExpression qualifier;
    PsiElement parent=getParent();
    if (parent instanceof DummyHolder) {
      parent=parent.getContext();
    }
    if (parent instanceof PsiAnonymousClass) {
      parent=parent.getParent();
    }
    if (parent instanceof PsiNewExpression) {
      qualifier=((PsiNewExpression)parent).getQualifier();
      LOG.assertTrue(qualifier != null);
    }
 else     if (parent instanceof PsiJavaCodeReferenceElement) {
      return JavaResolveResult.EMPTY_ARRAY;
    }
 else {
      LOG.assertTrue(false,"Invalid java reference!");
      return JavaResolveResult.EMPTY_ARRAY;
    }
    final PsiType qualifierType=qualifier.getType();
    if (qualifierType == null)     return JavaResolveResult.EMPTY_ARRAY;
    if (!(qualifierType instanceof PsiClassType))     return JavaResolveResult.EMPTY_ARRAY;
    final JavaResolveResult result=PsiUtil.resolveGenericsClassInType(qualifierType);
    if (result.getElement() == null)     return JavaResolveResult.EMPTY_ARRAY;
    final PsiElement classNameElement;
    classNameElement=getReferenceNameElement();
    if (!(classNameElement instanceof PsiIdentifier))     return JavaResolveResult.EMPTY_ARRAY;
    final String className=classNameElement.getText();
    final ClassResolverProcessor processor=new ClassResolverProcessor(className,this);
    PsiScopesUtil.processScope(result.getElement(),processor,result.getSubstitutor(),this,this);
    return processor.getResult();
  }
case CLASS_NAME_KIND:
{
  final PsiElement classNameElement;
  classNameElement=getReferenceNameElement();
  if (!(classNameElement instanceof PsiIdentifier))   return JavaResolveResult.EMPTY_ARRAY;
  final String className=classNameElement.getText();
  final ClassResolverProcessor processor=new ClassResolverProcessor(className,this);
  PsiScopesUtil.resolveAndWalk(processor,this,null);
  return processor.getResult();
}
case PACKAGE_NAME_KIND:
{
final String packageName=getTextSkipWhiteSpaceAndComments();
final PsiManager manager=getManager();
final PsiPackage aPackage=manager.findPackage(packageName);
if (aPackage == null || !aPackage.isValid()) {
  if (!manager.isPartOfPackagePrefix(packageName)) {
    return JavaResolveResult.EMPTY_ARRAY;
  }
 else {
    return CandidateInfo.RESOLVE_RESULT_FOR_PACKAGE_PREFIX_PACKAGE;
  }
}
return new JavaResolveResult[]{new CandidateInfo(aPackage,PsiSubstitutor.EMPTY)};
}
case CLASS_FQ_OR_PACKAGE_NAME_KIND:
{
final JavaResolveResult[] result=resolve(CLASS_FQ_NAME_KIND);
if (result.length == 0) {
return resolve(PACKAGE_NAME_KIND);
}
return result;
}
case CLASS_OR_PACKAGE_NAME_KIND:
{
final JavaResolveResult[] classResolveResult=resolve(CLASS_NAME_KIND);
if (classResolveResult.length == 0) {
final JavaResolveResult[] packageResolveResult=resolve(PACKAGE_NAME_KIND);
if (packageResolveResult.length > 0) return packageResolveResult;
}
return classResolveResult;
}
default :
LOG.assertTrue(false);
}
return JavaResolveResult.EMPTY_ARRAY;
}
