{
  String qName=aClass.getQualifiedName();
  final JavaPsiFacade facade=JavaPsiFacade.getInstance(getProject());
  if (qName == null) {
    qName=aClass.getName();
    final PsiClass psiClass=facade.getResolveHelper().resolveReferencedClass(qName,this);
    if (!getManager().areElementsEquivalent(psiClass,aClass)) {
      throw cannotBindError(aClass);
    }
  }
 else {
    if (facade.findClass(qName,getResolveScope()) == null) {
      return this;
    }
  }
  final boolean preserveQualification=CodeStyleSettingsManager.getSettings(getProject()).USE_FQ_CLASS_NAMES && isFullyQualified();
  final PsiManager manager=aClass.getManager();
  String text=qName + getParameterList().getText();
  ASTNode ref=Parsing.parseJavaCodeReferenceText(manager,text,SharedImplUtil.findCharTableByTree(this));
  LOG.assertTrue(ref != null,"Failed to parse reference from text '" + text + "'");
  getTreeParent().replaceChildInternal(this,(TreeElement)ref);
  if (!preserveQualification) {
    final JavaCodeStyleManager codeStyleManager=JavaCodeStyleManager.getInstance(aClass.getProject());
    ref=SourceTreeToPsiMap.psiElementToTree(codeStyleManager.shortenClassReferences(SourceTreeToPsiMap.treeElementToPsi(ref),JavaCodeStyleManager.UNCOMPLETE_CODE));
  }
  return SourceTreeToPsiMap.treeElementToPsi(ref);
}
