{
  final String firstString=(expressionList.get(0));
  int commonEnd=0;
  boolean matching=true;
  while (matching && commonEnd < maxCommonEnd) {
    if (commonEnd == firstString.length() - commonStart) {
      break;
    }
    commonEnd++;
    String match=firstString.substring(firstString.length() - commonEnd,firstString.length());
    for (int i=1; i < expressionList.size(); i++) {
      if (!((expressionList.get(i))).endsWith(match)) {
        matching=false;
        commonEnd--;
        break;
      }
    }
  }
  String match=firstString.substring(firstString.length() - commonEnd,firstString.length());
  if (commonEnd > 0 && !checkSubstringPatternValidity(match)) {
    return calculateCommonEnd(commonStart - 1,expressionList,commonEnd - 1);
  }
  return commonEnd;
}
