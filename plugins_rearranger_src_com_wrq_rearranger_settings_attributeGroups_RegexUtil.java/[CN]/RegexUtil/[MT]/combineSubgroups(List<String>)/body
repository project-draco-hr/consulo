{
  int totalSize=0;
  List<List<String>> groups=new ArrayList<List<String>>();
  List<String> strings=new ArrayList<String>(expressionList);
  while (strings.size() > 0) {
    List<String> subgroup=new ArrayList<String>();
    String firstString=strings.remove(0);
    totalSize+=firstString.length();
    subgroup.add(firstString);
    ListIterator<String> otherStrings=strings.listIterator();
    while (otherStrings.hasNext()) {
      String otherString=otherStrings.next();
      List<String> testGroup=new ArrayList<String>();
      testGroup.add(firstString);
      testGroup.add(otherString);
      int commonStart=calculateCommonStart(testGroup);
      int commonEnd=calculateCommonEnd(commonStart,testGroup);
      if (commonStart >= 2 || commonEnd >= 2) {
        subgroup.add(otherString);
        totalSize+=otherString.length();
        otherStrings.remove();
      }
    }
    groups.add(subgroup);
  }
  StringBuffer sb=new StringBuffer(totalSize);
  ListIterator<List<String>> groupLI=groups.listIterator();
  if (groups.size() > 1) {
    sb.append('(');
  }
  boolean first=true;
  while (groupLI.hasNext()) {
    if (first) {
      first=false;
    }
 else {
      sb.append('|');
    }
    List<String> nextGroup=groupLI.next();
    final String s=combineExpressions(nextGroup);
    sb.append(s);
  }
  if (groups.size() > 1) {
    sb.append(')');
  }
  return sb.toString();
}
