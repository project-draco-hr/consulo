{
  final String firstString=expressionList.get(0);
  if (expressionList.size() == 1) {
    return firstString;
  }
  int commonStart=0, commonEnd=0;
  commonStart=calculateCommonStart(expressionList);
  commonEnd=calculateCommonEnd(commonStart,expressionList);
  if (commonStart == 0 && commonEnd == 0) {
    return combineSubgroups(expressionList);
  }
  String result="";
  boolean valid=false;
  for (int start=commonStart; start >= 0; start--) {
    for (int end=commonEnd; end >= 0; end--) {
      valid=true;
      int totalLength=0;
      for (      Object aExpressionList : expressionList) {
        String s=((String)aExpressionList);
        totalLength+=s.length() + 1;
      }
      StringBuffer sb=new StringBuffer(totalLength + 2);
      sb.append(firstString.substring(0,start));
      List<String> subgroups=new ArrayList<String>(expressionList.size());
      for (      Object aExpressionList1 : expressionList) {
        String s=((String)aExpressionList1);
        s=s.substring(start,s.length() - end);
        subgroups.add(s);
      }
      String combined=combineSubgroups(subgroups);
      sb.append(combined);
      sb.append(firstString.substring(firstString.length() - end,firstString.length()));
      result=sb.toString();
      try {
        if (valid && " ".matches(result))         ;
      }
 catch (      PatternSyntaxException e) {
        valid=false;
      }
      if (valid) {
        return result;
      }
    }
  }
  return result;
}
