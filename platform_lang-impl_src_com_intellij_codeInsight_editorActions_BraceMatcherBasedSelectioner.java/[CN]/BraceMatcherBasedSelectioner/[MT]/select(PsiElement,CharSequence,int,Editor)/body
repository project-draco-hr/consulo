{
  final VirtualFile file=e.getContainingFile().getVirtualFile();
  final FileType fileType=file == null ? null : file.getFileType();
  if (fileType == null)   return super.select(e,editorText,cursorOffset,editor);
  final int textLength=editorText.length();
  final TextRange totalRange=e.getTextRange();
  final HighlighterIterator iterator=((EditorEx)editor).getHighlighter().createIterator(totalRange.getStartOffset());
  final BraceMatcher braceMatcher=BraceMatchingUtil.getBraceMatcher(fileType,iterator);
  final ArrayList<TextRange> result=new ArrayList<TextRange>();
  final LinkedList<Trinity<Integer,Integer,IElementType>> stack=new LinkedList<Trinity<Integer,Integer,IElementType>>();
  while (!iterator.atEnd() && iterator.getStart() < totalRange.getEndOffset()) {
    final Trinity<Integer,Integer,IElementType> last;
    if (braceMatcher.isLBraceToken(iterator,editorText,fileType)) {
      stack.addLast(Trinity.create(iterator.getStart(),iterator.getEnd(),iterator.getTokenType()));
    }
 else     if (braceMatcher.isRBraceToken(iterator,editorText,fileType) && !stack.isEmpty() && braceMatcher.isPairBraces((last=stack.getLast()).third,iterator.getTokenType())) {
      stack.removeLast();
      result.addAll(expandToWholeLine(editorText,new TextRange(last.first,iterator.getEnd())));
      int bodyStart=last.second;
      int bodyEnd=iterator.getStart();
      while (bodyStart < textLength && Character.isWhitespace(editorText.charAt(bodyStart)))       bodyStart++;
      while (bodyEnd > 0 && Character.isWhitespace(editorText.charAt(bodyEnd - 1)))       bodyEnd--;
      result.addAll(expandToWholeLine(editorText,new TextRange(bodyStart,bodyEnd)));
    }
    iterator.advance();
  }
  result.add(e.getTextRange());
  return result;
}
