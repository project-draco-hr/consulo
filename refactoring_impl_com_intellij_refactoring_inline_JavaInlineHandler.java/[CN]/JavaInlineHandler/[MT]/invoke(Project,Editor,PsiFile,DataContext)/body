{
  editor.getScrollingModel().scrollToCaret(ScrollType.MAKE_VISIBLE);
  PsiElement element=LangDataKeys.PSI_ELEMENT.getData(dataContext);
  if (element != null) {
    final List<InlineHandler> handlers=InlineHandlers.getInlineHandlers(element.getLanguage());
    for (    InlineHandler handler : handlers) {
      if (GenericInlineHandler.invoke(element,editor,handler)) {
        return;
      }
    }
  }
  JspFile jspFile;
  if (element instanceof PsiLocalVariable) {
    final PsiReference psiReference=TargetElementUtilBase.findReference(editor);
    final PsiReferenceExpression refExpr=psiReference instanceof PsiReferenceExpression ? ((PsiReferenceExpression)psiReference) : null;
    InlineLocalHandler.invoke(project,editor,(PsiLocalVariable)element,refExpr);
  }
 else   if (element instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)element;
    if (method.isConstructor() && !InlineMethodHandler.isChainingConstructor(method)) {
      InlineToAnonymousClassHandler.invoke(project,editor,method.getContainingClass());
    }
 else {
      InlineMethodHandler.invoke(project,editor,method);
    }
  }
 else   if (element instanceof PsiField) {
    InlineConstantFieldHandler.invoke(project,editor,(PsiField)element);
  }
 else   if (element instanceof PsiClass) {
    final Collection<PsiClass> inheritors=ClassInheritorsSearch.search((PsiClass)element).findAll();
    if (inheritors.size() == 0) {
      InlineToAnonymousClassHandler.invoke(project,editor,(PsiClass)element);
    }
 else {
      InlineSuperClassRefactoringHandler.invoke(project,editor,(PsiClass)element,inheritors);
    }
  }
 else   if (element instanceof PsiParameter && element.getParent() instanceof PsiParameterList) {
    InlineParameterHandler.invoke(project,editor,(PsiParameter)element);
  }
 else   if (PsiUtil.isInJspFile(file) && (jspFile=PsiUtil.getJspFile(file)) != null) {
    InlineIncludeFileHandler.invoke(project,editor,jspFile);
  }
 else   if (element != null && element.getLanguage() instanceof JavaLanguage) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("error.wrong.caret.position.method.or.local.name"));
    CommonRefactoringUtil.showErrorHint(project,editor,message,REFACTORING_NAME,null);
  }
}
