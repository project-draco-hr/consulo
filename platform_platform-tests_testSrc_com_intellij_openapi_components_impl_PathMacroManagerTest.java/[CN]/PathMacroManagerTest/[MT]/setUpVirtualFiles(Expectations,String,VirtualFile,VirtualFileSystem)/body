{
  final ArrayList<String> components=new ArrayList<String>(Arrays.asList(path.split("/")));
  VirtualFile prevChild=lowestChild;
  VirtualFile fileForPath=null;
  for (int i=components.size() - 1; i >= 0; i--) {
    final String curPath="/" + StringUtil.join(components,"/");
    final String curPathWithSlash=curPath + "/";
    components.remove(components.size() - 1);
    final VirtualFile mock=context.mock(VirtualFile.class,curPath.replace("/",""));
    if (fileForPath == null)     fileForPath=mock;
    e.allowing(prevChild).getParent();
    e.will(Expectations.returnValue(mock));
    e.allowing(mock).getPath();
    e.will(Expectations.returnValue(curPath));
    e.allowing(virtualFileSystem).findFileByPath(e.with(Expectations.equal(curPathWithSlash)));
    e.will(Expectations.returnValue(mock));
    e.allowing(virtualFileSystem).findFileByPath(e.with(Expectations.equal(curPath)));
    e.will(Expectations.returnValue(mock));
    prevChild=mock;
  }
  e.allowing(prevChild).getParent();
  e.will(Expectations.returnValue(null));
  return fileForPath;
}
