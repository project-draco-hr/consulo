{
  myApplication=mock(ApplicationEx.class,"application");
  myAppPico=mock(PicoContainer.class);
  context.checking(new Expectations(){
{
      allowing(myApplication).isUnitTestMode();
      will(returnValue(false));
      allowing(myApplication).getName();
      will(returnValue("IDEA"));
      allowing(myApplication).getPicoContainer();
      will(returnValue(myAppPico));
      allowing(myApplication).invokeLater(with(any(Runnable.class)),with(any(ModalityState.class)));
      allowing(myApplication).runReadAction(with(any(Runnable.class)));
      will(new Action(){
        @Override public void describeTo(        final Description description){
          description.appendText("runs runnable");
        }
        @Override public Object invoke(        final Invocation invocation) throws Throwable {
          ((Runnable)invocation.getParameter(0)).run();
          return null;
        }
      }
);
    }
  }
);
  ApplicationManager.setApplication(myApplication,myDisposable);
}
