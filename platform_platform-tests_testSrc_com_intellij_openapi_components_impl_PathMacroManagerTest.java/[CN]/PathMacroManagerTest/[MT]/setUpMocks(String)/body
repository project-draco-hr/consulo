{
  myModule=context.mock(Module.class);
  myPathMacros=context.mock(PathMacrosImpl.class);
  myProject=context.mock(ProjectEx.class);
  final VirtualFile file=context.mock(VirtualFile.class);
  final VirtualFile parentFile=context.mock(VirtualFile.class);
  context.checking(new Expectations(){
{
      allowing(myModule).isDisposed();
      will(returnValue(false));
      allowing(myProject).isDisposed();
      will(returnValue(false));
      allowing(myModule).getModuleFilePath();
      will(returnValue(projectPath + "/module/module.iml"));
      allowing(myProject).getProjectFilePath();
      will(returnValue(projectPath));
      allowing(myApplication).getComponent(with(equal(PathMacros.class)));
      will(returnValue(myPathMacros));
      allowing(myPathMacros).addMacroReplacements(with(any(ReplacePathToMacroMap.class)));
      allowing(file).getPath();
      will(returnValue(projectPath));
      allowing(file).getParent();
      will(returnValue(parentFile));
      allowing(parentFile).getPath();
      will(returnValue(StringUtil.getPackageName(projectPath,'/')));
      allowing(myProject).getBaseDir();
      will(returnValue(file));
      allowing(myModule).getProject();
      will(returnValue(myProject));
    }
  }
);
}
