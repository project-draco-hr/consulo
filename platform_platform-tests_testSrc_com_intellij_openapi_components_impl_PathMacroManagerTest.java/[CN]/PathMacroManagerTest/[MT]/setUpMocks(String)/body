{
  myModule=context.mock(Module.class);
  myPathMacros=context.mock(PathMacrosImpl.class);
  myProject=context.mock(ProjectEx.class);
  final VirtualFile projectFile=context.mock(VirtualFile.class,"projectFile");
  final VirtualFile moduleFile=context.mock(VirtualFile.class,"moduleFile");
  final VirtualFile moduleParentFile=context.mock(VirtualFile.class,"moduleParentFile");
  final VirtualFileManager virtualFileManager=context.mock(VirtualFileManager.class,projectPath + "virtualFileManager");
  final VirtualFileSystem virtualFileSystem=context.mock(VirtualFileSystem.class,projectPath + "virtualFileSystem");
  context.checking(new Expectations(){
{
      allowing(myModule).isDisposed();
      will(returnValue(false));
      allowing(myProject).isDisposed();
      will(returnValue(false));
      allowing(projectFile).getPath();
      will(returnValue(projectPath));
      final VirtualFile projectDir=setUpVirtualFiles(this,projectPath,projectFile,virtualFileSystem);
      final String moduleFilePath=projectPath + "/module/module.iml";
      allowing(moduleFile).getPath();
      will(returnValue(moduleFilePath));
      allowing(moduleFile).getParent();
      will(returnValue(moduleParentFile));
      allowing(moduleParentFile).getPath();
      will(returnValue(projectPath + "/module"));
      allowing(moduleParentFile).getParent();
      will(returnValue(projectDir));
      allowing(myApplication).getComponent(with(equal(PathMacros.class)));
      will(returnValue(myPathMacros));
      allowing(myApplication).getComponent(with(equal(VirtualFileManager.class)));
      will(returnValue(virtualFileManager));
      allowing(virtualFileManager).getFileSystem(with(equal("file")));
      will(returnValue(virtualFileSystem));
      allowing(virtualFileSystem).findFileByPath(with(equal(projectPath + "/module")));
      will(returnValue(moduleParentFile));
      allowing(myPathMacros).addMacroReplacements(with(any(ReplacePathToMacroMap.class)));
      allowing(myProject).getBaseDir();
      will(returnValue(projectFile));
      allowing(myModule).getModuleFilePath();
      will(returnValue(moduleFilePath));
      allowing(myModule).getProject();
      will(returnValue(myProject));
    }
  }
);
}
