{
  int offset=editor.getCaretModel().getOffset();
  HighlighterIterator iterator=((EditorEx)editor).getHighlighter().createIterator(offset);
  boolean atEndOfDocument=offset == editor.getDocument().getTextLength();
  if (!atEndOfDocument)   iterator.retreat();
  if (iterator.atEnd())   return;
  BraceMatcher braceMatcher=BraceMatchingUtil.getBraceMatcher(fileType,iterator);
  if (iterator.atEnd())   return;
  IElementType braceTokenType=iterator.getTokenType();
  final CharSequence fileText=editor.getDocument().getCharsSequence();
  if (!braceMatcher.isLBraceToken(iterator,fileText,fileType))   return;
  if (!iterator.atEnd()) {
    iterator.advance();
    if (!iterator.atEnd()) {
      if (!BraceMatchingUtil.isPairedBracesAllowedBeforeTypeInFileType(braceTokenType,iterator.getTokenType(),fileType)) {
        return;
      }
      if (BraceMatchingUtil.isLBraceToken(iterator,fileText,fileType)) {
        return;
      }
    }
    iterator.retreat();
  }
  int lparenOffset=BraceMatchingUtil.findLeftmostLParen(iterator,braceTokenType,fileText,fileType);
  if (lparenOffset < 0)   lparenOffset=0;
  iterator=((EditorEx)editor).getHighlighter().createIterator(lparenOffset);
  boolean matched=BraceMatchingUtil.matchBrace(fileText,fileType,iterator,true);
  if (!matched) {
    String text;
    if (lparenChar == '(') {
      text=")";
    }
 else     if (lparenChar == '[') {
      text="]";
    }
 else     if (lparenChar == '<') {
      text=">";
    }
 else     if (lparenChar == '{') {
      text="}";
    }
 else {
      throw new AssertionError("Unknown char " + lparenChar);
    }
    editor.getDocument().insertString(offset,text);
  }
}
