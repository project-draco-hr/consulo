{
  if (!CodeInsightSettings.getInstance().AUTOINSERT_PAIR_BRACKET)   return false;
  int offset=editor.getCaretModel().getOffset();
  if (offset == editor.getDocument().getTextLength())   return false;
  HighlighterIterator iterator=((EditorEx)editor).getHighlighter().createIterator(offset);
  if (iterator.atEnd())   return false;
  if (iterator.getEnd() - iterator.getStart() != 1 || editor.getDocument().getCharsSequence().charAt(iterator.getStart()) != charTyped) {
    return false;
  }
  BraceMatcher braceMatcher=BraceMatchingUtil.getBraceMatcher(fileType,iterator);
  CharSequence text=editor.getDocument().getCharsSequence();
  if (!braceMatcher.isRBraceToken(iterator,text,fileType)) {
    return false;
  }
  IElementType tokenType=iterator.getTokenType();
  iterator.retreat();
  IElementType lparenTokenType=braceMatcher.getOppositeBraceTokenType(tokenType);
  int lparenthOffset=BraceMatchingUtil.findLeftmostLParen(iterator,lparenTokenType,text,fileType);
  if (lparenthOffset < 0) {
    if (braceMatcher instanceof NontrivialBraceMatcher) {
      for (      IElementType t : ((NontrivialBraceMatcher)braceMatcher).getOppositeBraceTokenTypes(tokenType)) {
        if (t == lparenTokenType)         continue;
        lparenthOffset=BraceMatchingUtil.findLeftmostLParen(iterator,t,text,fileType);
        if (lparenthOffset >= 0)         break;
      }
    }
    if (lparenthOffset < 0)     return false;
  }
  iterator=((EditorEx)editor).getHighlighter().createIterator(lparenthOffset);
  boolean matched=BraceMatchingUtil.matchBrace(text,fileType,iterator,true);
  if (!matched)   return false;
  editor.getCaretModel().moveToOffset(offset + 1);
  editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
  return true;
}
