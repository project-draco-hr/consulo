{
  if (!CodeInsightSettings.getInstance().AUTOINSERT_PAIR_BRACKET)   return false;
  int offset=editor.getCaretModel().getOffset();
  if (offset == editor.getDocument().getTextLength())   return false;
  HighlighterIterator iterator=((EditorEx)editor).getHighlighter().createIterator(offset);
  if (iterator.atEnd())   return false;
  Language language=iterator.getTokenType().getLanguage();
  final ParserDefinition definition=LanguageParserDefinitions.INSTANCE.forLanguage(language);
  if (definition != null && !(language instanceof TemplateLanguage)) {
    final Lexer lexer=definition.createLexer(editor.getProject());
    lexer.start(Character.toString(charTyped));
    final IElementType tokenType=lexer.getTokenType();
    if (tokenType != iterator.getTokenType()) {
      return false;
    }
  }
  BraceMatcher braceMatcher=BraceMatchingUtil.getBraceMatcher(fileType,iterator);
  if (!braceMatcher.isRBraceToken(iterator,editor.getDocument().getCharsSequence(),fileType)) {
    return false;
  }
  IElementType tokenType=iterator.getTokenType();
  iterator.retreat();
  int lparenthOffset=BraceMatchingUtil.findLeftmostLParen(iterator,braceMatcher.getOppositeBraceTokenType(tokenType),editor.getDocument().getCharsSequence(),fileType);
  if (lparenthOffset < 0)   return false;
  iterator=((EditorEx)editor).getHighlighter().createIterator(lparenthOffset);
  boolean matched=BraceMatchingUtil.matchBrace(editor.getDocument().getCharsSequence(),fileType,iterator,true);
  if (!matched)   return false;
  editor.getCaretModel().moveToOffset(offset + 1);
  editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
  return true;
}
