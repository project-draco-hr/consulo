{
  Project project=PlatformDataKeys.PROJECT.getData(dataContext);
  if (project == null || editor.isColumnMode()) {
    if (myOriginalHandler != null) {
      myOriginalHandler.execute(editor,charTyped,dataContext);
    }
    return;
  }
  PsiFile file=PsiUtilBase.getPsiFileInEditor(editor,project);
  if (file == null) {
    if (myOriginalHandler != null) {
      myOriginalHandler.execute(editor,charTyped,dataContext);
    }
    return;
  }
  if (editor.isViewer())   return;
  if (!FileDocumentManager.getInstance().requestWriting(editor.getDocument(),project)) {
    return;
  }
  Editor injectedEditor=injectedEditorIfCharTypedIsSignificant(charTyped,editor,file);
  if (injectedEditor != editor) {
    file=PsiDocumentManager.getInstance(project).getPsiFile(injectedEditor.getDocument());
    editor=injectedEditor;
  }
  final TypedHandlerDelegate[] delegates=Extensions.getExtensions(TypedHandlerDelegate.EP_NAME);
  AutoPopupController autoPopupController=AutoPopupController.getInstance(project);
  boolean handled=false;
  for (  TypedHandlerDelegate delegate : delegates) {
    final TypedHandlerDelegate.Result result=delegate.checkAutoPopup(charTyped,project,editor,file);
    handled=result == TypedHandlerDelegate.Result.STOP;
    if (result != TypedHandlerDelegate.Result.CONTINUE) {
      break;
    }
  }
  if (!handled) {
    if (charTyped == '.') {
      autoPopupController.autoPopupMemberLookup(editor,null);
    }
    if ((charTyped == '(' || charTyped == ',') && !isInsideStringLiteral(editor,file)) {
      autoPopupController.autoPopupParameterInfo(editor,null);
    }
  }
  if (!editor.isInsertMode()) {
    myOriginalHandler.execute(editor,charTyped,dataContext);
    return;
  }
  if (editor.getSelectionModel().hasSelection()) {
    EditorModificationUtil.deleteSelectedText(editor);
  }
  FileType fileType=getFileType(file,editor);
  for (  TypedHandlerDelegate delegate : delegates) {
    final TypedHandlerDelegate.Result result=delegate.beforeCharTyped(charTyped,project,editor,file,fileType);
    if (result == TypedHandlerDelegate.Result.STOP) {
      return;
    }
    if (result == TypedHandlerDelegate.Result.DEFAULT) {
      break;
    }
  }
  if (!editor.getSelectionModel().hasBlockSelection()) {
    if (')' == charTyped || ']' == charTyped || '}' == charTyped) {
      if (FileTypes.PLAIN_TEXT != fileType) {
        if (handleRParen(editor,fileType,charTyped))         return;
      }
    }
 else     if ('"' == charTyped || '\'' == charTyped || '`' == charTyped) {
      if (handleQuote(editor,charTyped,dataContext,file))       return;
    }
  }
  long modificationStampBeforeTyping=editor.getDocument().getModificationStamp();
  myOriginalHandler.execute(editor,charTyped,dataContext);
  AutoHardWrapHandler.getInstance().wrapLineIfNecessary(editor,dataContext,modificationStampBeforeTyping);
  if (('(' == charTyped || '[' == charTyped || '{' == charTyped) && CodeInsightSettings.getInstance().AUTOINSERT_PAIR_BRACKET && !editor.getSelectionModel().hasBlockSelection()&& fileType != FileTypes.PLAIN_TEXT) {
    handleAfterLParen(editor,fileType,charTyped);
  }
 else   if ('}' == charTyped) {
    indentClosingBrace(project,editor);
  }
  for (  TypedHandlerDelegate delegate : delegates) {
    final TypedHandlerDelegate.Result result=delegate.charTyped(charTyped,project,editor,file);
    if (result == TypedHandlerDelegate.Result.STOP) {
      return;
    }
    if (result == TypedHandlerDelegate.Result.DEFAULT) {
      break;
    }
  }
  if ('{' == charTyped) {
    indentOpenedBrace(project,editor);
  }
}
