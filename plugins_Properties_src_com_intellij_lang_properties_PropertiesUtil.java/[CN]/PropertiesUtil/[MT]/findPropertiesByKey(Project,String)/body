{
  final PsiSearchHelper searchHelper=PsiManager.getInstance(project).getSearchHelper();
  List<Property> properties=new ArrayList<Property>();
  final List<String> words=StringUtil.getWordsIn(key);
  if (words.size() == 0)   return properties;
  Collections.sort(words,new Comparator<String>(){
    public int compare(    final String o1,    final String o2){
      return o2.length() - o1.length();
    }
  }
);
  final GlobalSearchScope propFilesScope=new GlobalSearchScope(){
    public boolean contains(    VirtualFile file){
      return FileTypeManager.getInstance().getFileTypeByFile(file) == PropertiesSupportLoader.FILE_TYPE;
    }
    public int compare(    VirtualFile file1,    VirtualFile file2){
      return 0;
    }
    public boolean isSearchInModuleContent(    Module aModule){
      return true;
    }
    public boolean isSearchInLibraries(){
      return false;
    }
  }
;
  Set<PsiFile> resultFiles=null;
  for (int i=0; i < words.size(); i++) {
    String word=words.get(i);
    final Set<PsiFile> files=new THashSet<PsiFile>();
    searchHelper.processAllFilesWithWord(word,propFilesScope,new CommonProcessors.CollectProcessor<PsiFile>(files));
    final boolean firstTime=i == 0;
    if (firstTime) {
      resultFiles=files;
    }
 else {
      resultFiles.retainAll(files);
    }
    if (resultFiles.size() == 0)     return properties;
  }
  for (Iterator<PsiFile> iterator=resultFiles.iterator(); iterator.hasNext(); ) {
    PsiFile file=iterator.next();
    if (file instanceof PropertiesFile) {
      addPropertiesInFile((PropertiesFile)file,key,properties);
    }
  }
  return properties;
}
