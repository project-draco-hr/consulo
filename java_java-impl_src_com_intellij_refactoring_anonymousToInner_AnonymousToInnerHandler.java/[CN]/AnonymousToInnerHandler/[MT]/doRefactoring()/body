{
  calculateTypeParametersToCreate();
  PsiClass aClass=createClass(myNewClassName);
  myTargetClass.add(aClass);
  PsiNewExpression newExpr=(PsiNewExpression)myAnonClass.getParent();
  @NonNls StringBuffer buf=new StringBuffer();
  buf.append("new ");
  buf.append(aClass.getName());
  if (!myTypeParametersToCreate.isEmpty()) {
    buf.append("<");
    int idx=0;
    for (Iterator<PsiTypeParameter> it=myTypeParametersToCreate.iterator(); it.hasNext(); idx++) {
      if (idx > 0)       buf.append(", ");
      String typeParamName=it.next().getName();
      buf.append(typeParamName);
    }
    buf.append(">");
  }
  buf.append("(");
  boolean isFirstParameter=true;
  for (  VariableInfo info : myVariableInfos) {
    if (info.passAsParameter) {
      if (isFirstParameter) {
        isFirstParameter=false;
      }
 else {
        buf.append(",");
      }
      buf.append(info.variable.getName());
    }
  }
  buf.append(")");
  PsiNewExpression newClassExpression=(PsiNewExpression)JavaPsiFacade.getInstance(myManager.getProject()).getElementFactory().createExpressionFromText(buf.toString(),null);
  newClassExpression=(PsiNewExpression)newExpr.replace(newClassExpression);
  if (PsiDiamondTypeUtil.canCollapseToDiamond(newClassExpression,newClassExpression,newClassExpression.getType())) {
    PsiDiamondTypeUtil.replaceExplicitWithDiamond(newClassExpression.getClassOrAnonymousClassReference().getParameterList());
  }
}
