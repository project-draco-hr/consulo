{
  final List<Pair<PsiMember,PsiSubstitutor>> classes=new ArrayList<Pair<PsiMember,PsiSubstitutor>>();
  final List<Pair<PsiMember,PsiSubstitutor>> fields=new ArrayList<Pair<PsiMember,PsiSubstitutor>>();
  final List<Pair<PsiMember,PsiSubstitutor>> methods=new ArrayList<Pair<PsiMember,PsiSubstitutor>>();
  FilterScopeProcessor<MethodCandidateInfo> processor=new FilterScopeProcessor<MethodCandidateInfo>(new OrFilter(ElementClassFilter.METHOD,ElementClassFilter.FIELD,ElementClassFilter.CLASS)){
    @Override protected void add(    PsiElement element,    PsiSubstitutor substitutor){
      if (element instanceof PsiMethod) {
        methods.add(Pair.create((PsiMember)element,substitutor));
      }
 else       if (element instanceof PsiField) {
        fields.add(Pair.create((PsiMember)element,substitutor));
      }
 else       if (element instanceof PsiClass) {
        classes.add(Pair.create((PsiMember)element,substitutor));
      }
    }
  }
;
  processDeclarationsInClassNotCached(psiClass,processor,ResolveState.initial(),null,null,psiClass,false,PsiUtil.getLanguageLevel(psiClass));
  MembersMap result=new MembersMap(MemberType.class);
  result.put(MemberType.CLASS,generateMapByList(classes));
  result.put(MemberType.METHOD,generateMapByList(methods));
  result.put(MemberType.FIELD,generateMapByList(fields));
  return result;
}
