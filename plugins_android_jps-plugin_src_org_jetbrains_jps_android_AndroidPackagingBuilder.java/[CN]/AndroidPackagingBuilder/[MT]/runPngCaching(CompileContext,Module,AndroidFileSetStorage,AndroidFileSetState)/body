{
  final AndroidFileSetState savedState=storage.getState(module.getName());
  if (context.isMake() && savedState != null && savedState.equalsTo(state)) {
    return true;
  }
  final AndroidFacet facet=AndroidJpsUtil.getFacet(module);
  if (facet == null) {
    return true;
  }
  context.processMessage(new CompilerMessage(BUILDER_NAME,BuildMessage.Kind.INFO,AndroidJpsBundle.message("android.jps.progress.res.caching",module.getName())));
  final File resourceDir=AndroidJpsUtil.getResourceDirForCompilationPath(facet);
  if (resourceDir == null) {
    return true;
  }
  final Pair<AndroidSdk,IAndroidTarget> pair=AndroidJpsUtil.getAndroidPlatform(module,context,BUILDER_NAME);
  if (pair == null) {
    return false;
  }
  final File resCacheDir=AndroidJpsUtil.getResourcesCacheDir(context,module);
  if (!resCacheDir.exists()) {
    if (!resCacheDir.mkdirs()) {
      context.processMessage(new CompilerMessage(BUILDER_NAME,BuildMessage.Kind.ERROR,"Cannot create directory " + resCacheDir.getPath()));
      return false;
    }
  }
  final IAndroidTarget target=pair.second;
  final Map<AndroidCompilerMessageKind,List<String>> messages=AndroidApt.crunch(target,Collections.singletonList(resourceDir.getPath()),resCacheDir.getPath());
  AndroidJpsUtil.addMessages(context,messages,BUILDER_NAME);
  final boolean success=messages.get(AndroidCompilerMessageKind.ERROR).isEmpty();
  storage.update(module.getName(),success ? state : null);
  return success;
}
