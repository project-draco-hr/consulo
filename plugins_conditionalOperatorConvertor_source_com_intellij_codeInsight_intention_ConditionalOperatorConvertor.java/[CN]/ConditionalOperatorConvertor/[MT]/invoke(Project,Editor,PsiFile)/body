{
  final int offset=editor.getCaretModel().getOffset();
  final PsiElement element=file.findElementAt(offset);
  PsiConditionalExpression conditionalExpression=(PsiConditionalExpression)PsiTreeUtil.getParentOfType(element,PsiConditionalExpression.class,false);
  if (conditionalExpression == null)   return;
  if (conditionalExpression.getThenExpression() == null || conditionalExpression.getElseExpression() == null)   return;
  final PsiElementFactory factory=PsiManager.getInstance(project).getElementFactory();
  PsiElement originalStatement=PsiTreeUtil.getParentOfType(conditionalExpression,PsiStatement.class,false);
  while (originalStatement instanceof PsiForStatement) {
    originalStatement=PsiTreeUtil.getParentOfType(originalStatement,PsiStatement.class,true);
  }
  if (originalStatement == null)   return;
  if (originalStatement instanceof PsiDeclarationStatement) {
    final PsiDeclarationStatement declaration=((PsiDeclarationStatement)originalStatement);
    final PsiElement[] declaredElements=declaration.getDeclaredElements();
    PsiLocalVariable variable=null;
    for (int i=0; i < declaredElements.length; i++) {
      PsiElement declaredElement=declaredElements[i];
      if (declaredElement instanceof PsiLocalVariable && PsiTreeUtil.isAncestor(declaredElement,conditionalExpression,true)) {
        variable=(PsiLocalVariable)declaredElement;
        break;
      }
    }
    if (variable == null)     return;
    variable.normalizeDeclaration();
    final Object marker=new Object();
    PsiTreeUtil.mark(conditionalExpression,marker);
    PsiExpressionStatement statement=(PsiExpressionStatement)factory.createStatementFromText(variable.getName() + " = 0;",null);
    statement=(PsiExpressionStatement)CodeStyleManager.getInstance(project).reformat(statement);
    ((PsiAssignmentExpression)statement.getExpression()).getRExpression().replace(variable.getInitializer());
    variable.getInitializer().delete();
    final PsiElement variableParent=variable.getParent();
    originalStatement=variableParent.getParent().addAfter(statement,variableParent);
    conditionalExpression=(PsiConditionalExpression)PsiTreeUtil.releaseMark(originalStatement,marker);
  }
  final PsiElement[] originalElements=new PsiElement[]{originalStatement,conditionalExpression};
  final PsiExpression condition=(PsiExpression)conditionalExpression.getCondition().copy();
  final PsiElement[] thenElements=PsiTreeUtil.copyElements(originalElements);
  final PsiElement[] elseElements=PsiTreeUtil.copyElements(originalElements);
  thenElements[1].replace(conditionalExpression.getThenExpression());
  elseElements[1].replace(conditionalExpression.getElseExpression());
  PsiIfStatement statement=(PsiIfStatement)factory.createStatementFromText("if (true) { a = b } else { c = d }",null);
  statement=(PsiIfStatement)CodeStyleManager.getInstance(project).reformat(statement);
  statement=(PsiIfStatement)originalStatement.replace(statement);
  statement.getCondition().replace(condition);
  ((PsiBlockStatement)statement.getThenBranch()).getCodeBlock().getStatements()[0].replace(thenElements[0]);
  ((PsiBlockStatement)statement.getElseBranch()).getCodeBlock().getStatements()[0].replace(elseElements[0]);
}
