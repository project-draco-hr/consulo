{
  return new TokenProcessor(){
    final Map<Mapper,LightMapper> docTexts=new FactoryMap<Mapper,LightMapper>(){
      @Override protected LightMapper create(      final Mapper key){
        final MappedRange predecessor=key.findPredecessor(startIndex);
        return new LightMapper(key,predecessor != null ? predecessor.range.getEndOffset() : 0);
      }
    }
;
    @Override public void addToken(    final int i,    final int startOffset,    final int endOffset,    final int data,    final IElementType tokenType){
      getSegments().setElementLight(i,startOffset,endOffset,data);
      final Mapper mapper=getMappingDocument(tokenType);
      if (mapper != null) {
        docTexts.get(mapper).addToken(myText.subSequence(startOffset,endOffset),tokenType,i);
      }
    }
    @Override public void finish(){
      for (      final LightMapper mapper : docTexts.values()) {
        mapper.finish();
      }
    }
  }
;
}
