def __init__(self, ui, root, repowatcher, timeout):
    self.ui = ui
    self.repowatcher = repowatcher
    self.sock = socket.socket(socket.AF_UNIX)
    self.sockpath = join(root, '.hg/inotify.sock')
    self.realsockpath = None
    try:
        self.sock.bind(self.sockpath)
    except socket.error as err:
        if (err[0] == errno.EADDRINUSE):
            raise AlreadyStartedException(_('cannot start: socket is already bound'))
        if (err[0] == 'AF_UNIX path too long'):
            if (os.path.islink(self.sockpath) and (not os.path.exists(self.sockpath))):
                raise util.Abort('inotify-server: cannot start: .hg/inotify.sock is a broken symlink')
            tempdir = tempfile.mkdtemp(prefix='hg-inotify-')
            self.realsockpath = os.path.join(tempdir, 'inotify.sock')
            try:
                self.sock.bind(self.realsockpath)
                os.symlink(self.realsockpath, self.sockpath)
            except (OSError, socket.error) as inst:
                try:
                    os.unlink(self.realsockpath)
                except:
                    pass
                os.rmdir(tempdir)
                if (inst.errno == errno.EEXIST):
                    raise AlreadyStartedException(_('cannot start: tried linking .hg/inotify.sock to a temporary socket but .hg/inotify.sock already exists'))
                raise
        else:
            raise
    self.sock.listen(5)
    self.fileno = self.sock.fileno
