def answer_stat_query(self, cs):
    names = cs.read().split('\x00')
    states = names.pop()
    self.ui.note((_('answering query for %r\n') % states))
    visited = set()
    if (not names):

        def genresult(states, tree):
            for (fn, state) in tree.walk(states):
                yield fn
    else:

        def genresult(states, tree):
            for fn in names:
                for f in tree.lookup(states, fn, visited):
                    yield f
    return ['\x00'.join(r) for r in [genresult('l', self.repowatcher.statustrees['l']), genresult('m', self.repowatcher.statustrees['m']), genresult('a', self.repowatcher.statustrees['a']), genresult('r', self.repowatcher.statustrees['r']), genresult('!', self.repowatcher.statustrees['!']), ((('?' in states) and genresult('?', self.repowatcher.statustrees['?'])) or []), [], ((('c' in states) and genresult('n', self.repowatcher.tree)) or []), visited]]
