def start(ui, dirstate, root, opts):
    timeout = opts.get('idle_timeout')
    if timeout:
        timeout = (float(timeout) * 60000)
    else:
        timeout = None


    class service(object):

        def init(self):
            try:
                self.master = master(ui, dirstate, root, timeout)
            except AlreadyStartedException as inst:
                raise util.Abort(('inotify-server: %s' % inst))

        def run(self):
            try:
                try:
                    self.master.run()
                except TimeoutException:
                    pass
            finally:
                self.master.shutdown()
    if ('inserve' not in sys.argv):
        runargs = (util.hgcmd() + ['inserve', '-R', root])
    else:
        runargs = (util.hgcmd() + sys.argv[1:])
    pidfile = ui.config('inotify', 'pidfile')
    if (opts['daemon'] and (pidfile is not None) and ('pid-file' not in runargs)):
        runargs.append(('--pid-file=%s' % pidfile))
    service = service()
    logfile = ui.config('inotify', 'log')
    appendpid = ui.configbool('inotify', 'appendpid', False)
    cmdutil.service(opts, initfn=service.init, runfn=service.run, logfile=logfile, runargs=runargs, appendpid=appendpid)
