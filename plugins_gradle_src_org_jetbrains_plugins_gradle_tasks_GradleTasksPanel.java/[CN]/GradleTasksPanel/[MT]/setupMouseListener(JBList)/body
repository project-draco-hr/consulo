{
  list.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    MouseEvent e){
      if (!e.isPopupTrigger()) {
        return;
      }
      int i=list.locationToIndex(e.getPoint());
      if (i < 0) {
        return;
      }
      if (list.isSelectedIndex(i)) {
        return;
      }
      list.setSelectedIndex(i);
    }
    @Override public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() < 2) {
        return;
      }
      GradleTaskDescriptor.Type taskType=getSelectedTaskType(list);
      final String actionId;
      if (taskType == GradleTaskDescriptor.Type.DEBUG) {
        actionId=DefaultDebugExecutor.getDebugExecutorInstance().getContextActionId();
      }
 else       if (taskType == GradleTaskDescriptor.Type.RUN) {
        actionId=DefaultRunExecutor.getRunExecutorInstance().getContextActionId();
      }
 else       if (Registry.is(GradleConstants.REGISTRY_DEBUG_ON_TASK_CLICK_KEY,false)) {
        actionId=DefaultDebugExecutor.getDebugExecutorInstance().getContextActionId();
      }
 else {
        actionId=DefaultRunExecutor.getRunExecutorInstance().getContextActionId();
      }
      if (StringUtil.isEmpty(actionId)) {
        return;
      }
      ActionManager actionManager=ActionManager.getInstance();
      AnAction action=actionManager.getAction(actionId);
      if (action == null) {
        return;
      }
      final Presentation presentation=new Presentation();
      DataContext dataContext=DataManager.getInstance().getDataContext(e.getComponent());
      final AnActionEvent event=new AnActionEvent(e,dataContext,GradleConstants.TASKS_LIST_PLACE,presentation,actionManager,0);
      action.update(event);
      if (presentation.isEnabled()) {
        action.actionPerformed(event);
      }
    }
  }
);
}
