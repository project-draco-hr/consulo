{
  list.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    MouseEvent e){
      if (!e.isPopupTrigger()) {
        return;
      }
      int i=list.locationToIndex(e.getPoint());
      if (i < 0) {
        return;
      }
      if (list.isSelectedIndex(i)) {
        return;
      }
      list.setSelectedIndex(i);
    }
    @Override public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() < 2) {
        return;
      }
      int row=list.locationToIndex(e.getPoint());
      ListModel model=list.getModel();
      if (row < 0 || row >= model.getSize()) {
        return;
      }
      Object element=model.getElementAt(row);
      if (!(element instanceof GradleTaskDescriptor)) {
        return;
      }
      String executorId=((GradleTaskDescriptor)element).getExecutorId();
      if (StringUtil.isEmpty(executorId)) {
        executorId=DefaultRunExecutor.EXECUTOR_ID;
      }
      Executor executor=ExecutorRegistry.getInstance().getExecutorById(executorId);
      if (executor == null) {
        return;
      }
      final String actionId=executor.getContextActionId();
      if (StringUtil.isEmpty(actionId)) {
        return;
      }
      ActionManager actionManager=ActionManager.getInstance();
      AnAction action=actionManager.getAction(actionId);
      if (action == null) {
        return;
      }
      final Presentation presentation=new Presentation();
      DataContext dataContext=DataManager.getInstance().getDataContext(e.getComponent());
      final AnActionEvent event=new AnActionEvent(e,dataContext,GradleConstants.TASKS_LIST_PLACE,presentation,actionManager,0);
      action.update(event);
      if (presentation.isEnabled()) {
        action.actionPerformed(event);
      }
    }
  }
);
}
