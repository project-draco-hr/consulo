{
  final PsiElement element=constructorResolveResult.getElement();
  LOG.assertTrue(element instanceof PsiMethod && ((PsiMethod)element).isConstructor());
  final PsiMethod constructor=(PsiMethod)element;
  final GrArgumentList argList=PsiUtil.getArgumentsList(place);
  if (argList != null) {
    final GrExpression[] exprArgs=argList.getExpressionArguments();
    if (exprArgs.length == 0 && !PsiUtil.isConstructorHasRequiredParameters(constructor))     return true;
  }
  PsiType[] types=PsiUtil.getArgumentTypes(place,true);
  PsiClass containingClass=constructor.getContainingClass();
  if (types != null && containingClass != null) {
    types=GrInnerClassConstructorUtil.addEnclosingArgIfNeeded(types,place,containingClass);
  }
  return checkMethodApplicability(constructorResolveResult,place,checkUnknownArgs,types);
}
