{
  GrNamedArgument[] namedArguments=PsiUtil.getFirstMapNamedArguments(call);
  if (namedArguments.length == 0)   return;
  Map<String,NamedArgumentDescriptor> map=GroovyNamedArgumentProvider.getNamedArgumentsFromAllProviders(call,null,false);
  if (map == null)   return;
  for (  GrNamedArgument namedArgument : namedArguments) {
    String labelName=namedArgument.getLabelName();
    NamedArgumentDescriptor descriptor=map.get(labelName);
    if (descriptor == null)     continue;
    GrExpression namedArgumentExpression=namedArgument.getExpression();
    if (namedArgumentExpression == null)     continue;
    if (isNewInstanceInitialingByTuple(namedArgumentExpression))     continue;
    if (PsiUtil.isRawClassMemberAccess(namedArgumentExpression))     continue;
    PsiType expressionType=namedArgumentExpression.getType();
    if (expressionType == null)     continue;
    expressionType=TypesUtil.boxPrimitiveType(expressionType,call.getManager(),call.getResolveScope());
    if (!descriptor.checkType(expressionType,call)) {
      registerError(namedArgumentExpression,"Type of argument '" + labelName + "' can not be '"+ expressionType.getPresentableText()+ "'");
    }
  }
}
