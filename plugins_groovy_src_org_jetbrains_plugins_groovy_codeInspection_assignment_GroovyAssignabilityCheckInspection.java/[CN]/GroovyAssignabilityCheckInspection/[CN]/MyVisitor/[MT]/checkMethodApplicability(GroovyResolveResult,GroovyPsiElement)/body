{
  final PsiElement element=methodResolveResult.getElement();
  if (!(element instanceof PsiMethod))   return true;
  if (element instanceof GrBuilderMethod)   return true;
  final PsiMethod method=(PsiMethod)element;
  PsiType[] argumentTypes=PsiUtil.getArgumentTypes(place,true);
  if ("call".equals(method.getName()) && place instanceof GrReferenceExpression) {
    final GrExpression qualifierExpression=((GrReferenceExpression)place).getQualifierExpression();
    if (qualifierExpression != null) {
      final PsiType type=qualifierExpression.getType();
      if (type instanceof GrClosureType) {
        if (!PsiUtil.isApplicable(argumentTypes,(GrClosureType)type,place)) {
          highlightInapplicableMethodUsage(methodResolveResult,place,method,argumentTypes);
          return false;
        }
      }
    }
  }
  if (argumentTypes != null && !PsiUtil.isApplicable(argumentTypes,method,methodResolveResult.getSubstitutor(),place,false)) {
    if (GroovyPropertyUtils.isSimplePropertyGetter(method)) {
      if (method instanceof GrMethod || method instanceof GrAccessorMethod) {
        final PsiType returnType=PsiUtil.getSmartReturnType(method);
        if (returnType instanceof GrClosureType) {
          if (PsiUtil.isApplicable(argumentTypes,((GrClosureType)returnType),place)) {
            return true;
          }
        }
      }
      PsiType returnType=method.getReturnType();
      if (returnType != null) {
        if (TypesUtil.isAssignable(TypesUtil.createType(GroovyCommonClassNames.GROOVY_LANG_CLOSURE,element),returnType,place)) {
          return true;
        }
      }
    }
    highlightInapplicableMethodUsage(methodResolveResult,place,method,argumentTypes);
    return false;
  }
  return true;
}
