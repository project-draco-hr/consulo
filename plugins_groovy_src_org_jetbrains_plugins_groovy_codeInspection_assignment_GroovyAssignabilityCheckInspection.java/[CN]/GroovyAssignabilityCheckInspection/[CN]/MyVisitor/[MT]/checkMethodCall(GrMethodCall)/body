{
  final GrExpression expression=call.getInvokedExpression();
  if (!(expression instanceof GrReferenceExpression)) {
    final PsiType type=expression.getType();
    checkCallApplicability(type,expression);
  }
  GrNamedArgument[] namedArguments=PsiUtil.getFirstMapNamedArguments(call);
  if (namedArguments.length == 0)   return;
  MultiMap<String,Condition<PsiType>> map=new MultiMap<String,Condition<PsiType>>();
  GroovyResolveResult[] callVariants=call.getCallVariants(null);
  for (  GroovyResolveResult callVariant : callVariants) {
    PsiElement element=callVariant.getElement();
    if (element instanceof PsiMethod) {
      Map<String,Condition<PsiType>> arguments=GroovyNamedArgumentProvider.getNamedArguments(call,(PsiMethod)element);
      for (      Map.Entry<String,Condition<PsiType>> entry : arguments.entrySet()) {
        map.putValue(entry.getKey(),entry.getValue());
      }
    }
  }
  for (  GrNamedArgument namedArgument : namedArguments) {
    String labelName=namedArgument.getLabelName();
    Collection<Condition<PsiType>> conditions=map.get(labelName);
    if (conditions.isEmpty())     continue;
    GrExpression namedArgumentExpression=namedArgument.getExpression();
    if (namedArgumentExpression == null)     continue;
    if (PsiUtil.isRawClassMemberAccess(namedArgumentExpression))     continue;
    PsiType expressionType=namedArgumentExpression.getType();
    if (expressionType == null)     continue;
    expressionType=TypesUtil.boxPrimitiveType(expressionType,namedArgument.getManager(),namedArgument.getResolveScope());
    boolean correct=false;
    for (    Condition<PsiType> condition : conditions) {
      if (condition.value(expressionType)) {
        correct=true;
        break;
      }
    }
    if (!correct) {
      registerError(namedArgumentExpression,"Type of argument '" + labelName + "' can not be '"+ expressionType.getPresentableText()+ "'");
    }
  }
}
