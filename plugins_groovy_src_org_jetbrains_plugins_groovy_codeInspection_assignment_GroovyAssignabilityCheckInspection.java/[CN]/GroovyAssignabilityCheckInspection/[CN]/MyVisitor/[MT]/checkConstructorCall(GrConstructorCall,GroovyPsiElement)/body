{
  final GrArgumentList argList=constructorCall.getArgumentList();
  if (!checkCannotInferArgumentTypes(refElement))   return;
  final GroovyResolveResult constructorResolveResult=constructorCall.advancedResolve();
  final PsiElement constructor=constructorResolveResult.getElement();
  if (constructor != null) {
    if (!checkConstructorApplicability(constructorResolveResult,refElement,true))     return;
  }
 else {
    final GroovyResolveResult[] results=constructorCall.multiResolve(false);
    if (results.length > 0) {
      for (      GroovyResolveResult result : results) {
        PsiElement resolved=result.getElement();
        if (resolved instanceof PsiMethod) {
          if (!checkConstructorApplicability(result,refElement,false))           return;
        }
      }
      registerError(getElementToHighlight(refElement,argList),GroovyBundle.message("constructor.call.is.ambiguous"));
    }
 else {
      final GrExpression[] expressionArguments=constructorCall.getExpressionArguments();
      final GrClosableBlock[] closureArguments=constructorCall.getClosureArguments();
      final GrNamedArgument[] namedArgs=constructorCall.getNamedArguments();
      if (closureArguments.length > 0 || namedArgs.length > 0 && expressionArguments.length > 0 || namedArgs.length == 0 && expressionArguments.length > 0 && !isOnlyOneMapParam(expressionArguments)) {
        final GroovyResolveResult[] resolveResults=constructorCall.multiResolveClass();
        if (resolveResults.length == 1) {
          final PsiElement element=resolveResults[0].getElement();
          if (element instanceof PsiClass) {
            registerError(getElementToHighlight(refElement,argList),GroovyBundle.message("cannot.apply.default.constructor",((PsiClass)element).getName()));
            return;
          }
        }
      }
    }
  }
  checkNamedArgumentsType(constructorCall);
}
