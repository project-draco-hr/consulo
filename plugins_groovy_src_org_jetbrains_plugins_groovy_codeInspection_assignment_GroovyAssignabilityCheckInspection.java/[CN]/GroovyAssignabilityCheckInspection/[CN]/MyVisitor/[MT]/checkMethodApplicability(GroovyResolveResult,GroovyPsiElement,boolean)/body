{
  final PsiElement element=methodResolveResult.getElement();
  if (!(element instanceof PsiMethod))   return true;
  if (element instanceof GrBuilderMethod)   return true;
  final PsiMethod method=(PsiMethod)element;
  PsiType[] argumentTypes=PsiUtil.getArgumentTypes(place,true);
  if ("call".equals(method.getName()) && place instanceof GrReferenceExpression) {
    final GrExpression qualifierExpression=((GrReferenceExpression)place).getQualifierExpression();
    if (qualifierExpression != null) {
      final PsiType type=qualifierExpression.getType();
      if (type instanceof GrClosureType) {
        GrClosureSignatureUtil.ApplicabilityResult result=PsiUtil.isApplicableConcrete(argumentTypes,(GrClosureType)type,place);
switch (result) {
case inapplicable:
          highlightInapplicableMethodUsage(methodResolveResult,place,method,argumentTypes);
        return false;
case canBeApplicable:
      if (checkUnknownArgs) {
        highlightUnknownArgs(place);
      }
    return !checkUnknownArgs;
default :
  return true;
}
}
}
}
if (argumentTypes == null) return true;
GrClosureSignatureUtil.ApplicabilityResult applicable=PsiUtil.isApplicableConcrete(argumentTypes,method,methodResolveResult.getSubstitutor(),place,false);
switch (applicable) {
case inapplicable:
if (GroovyPropertyUtils.isSimplePropertyGetter(method)) {
if (method instanceof GrMethod || method instanceof GrAccessorMethod) {
final PsiType returnType=PsiUtil.getSmartReturnType(method);
if (returnType instanceof GrClosureType) {
if (PsiUtil.isApplicable(argumentTypes,((GrClosureType)returnType),place)) {
  return true;
}
}
}
PsiType returnType=method.getReturnType();
if (returnType != null) {
if (TypesUtil.isAssignable(TypesUtil.createType(GroovyCommonClassNames.GROOVY_LANG_CLOSURE,element),returnType,place)) {
return true;
}
}
}
highlightInapplicableMethodUsage(methodResolveResult,place,method,argumentTypes);
return false;
case canBeApplicable:
if (checkUnknownArgs) {
highlightUnknownArgs(place);
}
return !checkUnknownArgs;
default :
return true;
}
}
