{
  super.visitListOrMap(listOrMap);
  final PsiReference reference=listOrMap.getReference();
  if (!(reference instanceof LiteralConstructorReference))   return;
  final GroovyResolveResult[] results=((LiteralConstructorReference)reference).multiResolve(false);
  LOG.assertTrue(results.length > 0);
  if (results.length == 1) {
    final GroovyResolveResult result=results[0];
    final PsiElement element=result.getElement();
    if (element instanceof PsiClass) {
      if (!listOrMap.isMap()) {
        registerError(listOrMap,GroovyBundle.message("cannot.apply.default.constructor",((PsiClass)element).getName()));
      }
    }
 else     if (element instanceof PsiMethod && ((PsiMethod)element).isConstructor()) {
      checkLiteralConstructorApplicability(result,listOrMap,true);
    }
  }
 else {
    for (    GroovyResolveResult result : results) {
      PsiElement resolved=result.getElement();
      if (resolved instanceof PsiMethod) {
        if (!checkLiteralConstructorApplicability(result,listOrMap,false))         return;
      }
      registerError(listOrMap,GroovyBundle.message("constructor.call.is.ambiguous"));
    }
  }
}
