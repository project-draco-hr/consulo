{
  super.visitVariable(variable);
  PsiType varType=variable.getType();
  PsiElement parent=variable.getParent();
  if (parent instanceof GrVariableDeclaration && ((GrVariableDeclaration)parent).isTuple()) {
    GrVariableDeclaration tuple=(GrVariableDeclaration)parent;
    GrExpression initializer=tuple.getTupleInitializer();
    if (initializer == null)     return;
    if (!(initializer instanceof GrListOrMap)) {
      PsiType type=initializer.getType();
      if (type == null)       return;
      PsiType valueType=com.intellij.psi.util.PsiUtil.extractIterableTypeParameter(type,false);
      checkAssignability(varType,valueType,tuple,variable.getNameIdentifierGroovy());
      return;
    }
  }
 else   if (parent instanceof GrForInClause) {
    PsiType iteratedType=PsiUtil.extractIteratedType((GrForInClause)parent);
    if (iteratedType == null)     return;
    GrExpression iteratedExpression=((GrForInClause)parent).getIteratedExpression();
    checkAssignability(varType,iteratedType,iteratedExpression,variable.getNameIdentifierGroovy());
    return;
  }
  GrExpression initializer=variable.getInitializerGroovy();
  if (initializer == null)   return;
  PsiType rType=initializer.getType();
  if (rType == null)   return;
  if (isNewInstanceInitialingByTuple(initializer)) {
    return;
  }
  if (variable instanceof GrParameter && ((GrParameter)variable).getDeclarationScope() instanceof GrMethod) {
    final GrMethod method=(GrMethod)((GrParameter)variable).getDeclarationScope();
    final PsiTypeParameter[] parameters=method.getTypeParameters();
    Map<PsiTypeParameter,PsiType> map=ContainerUtil.newHashMap();
    for (    PsiTypeParameter parameter : parameters) {
      final PsiClassType[] types=parameter.getSuperTypes();
      if (types.length == 1) {
        map.put(parameter,PsiWildcardType.createExtends(variable.getManager(),types[0]));
      }
 else {
        map.put(parameter,PsiWildcardType.createExtends(variable.getManager(),PsiIntersectionType.createIntersection(types)));
      }
    }
    PsiSubstitutor substitutor=PsiSubstitutorImpl.createSubstitutor(map);
    checkAssignability(substitutor.substitute(varType),initializer);
    return;
  }
  checkAssignability(varType,initializer);
}
