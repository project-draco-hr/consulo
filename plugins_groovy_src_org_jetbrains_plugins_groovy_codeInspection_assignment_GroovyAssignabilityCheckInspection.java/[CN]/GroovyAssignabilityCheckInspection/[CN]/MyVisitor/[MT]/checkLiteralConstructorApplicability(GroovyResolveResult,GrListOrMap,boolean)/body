{
  final PsiElement element=result.getElement();
  LOG.assertTrue(element instanceof PsiMethod && ((PsiMethod)element).isConstructor());
  final PsiMethod constructor=(PsiMethod)element;
  final GrExpression[] exprArgs;
  final GrNamedArgument[] namedArgs;
  if (listOrMap.isMap()) {
    exprArgs=GrExpression.EMPTY_ARRAY;
    namedArgs=listOrMap.getNamedArguments();
  }
 else {
    exprArgs=listOrMap.getInitializers();
    namedArgs=GrNamedArgument.EMPTY_ARRAY;
  }
  if (exprArgs.length == 0 && !PsiUtil.isConstructorHasRequiredParameters(constructor))   return true;
  PsiType[] argumentTypes=PsiUtil.getArgumentTypes(namedArgs,exprArgs,GrClosableBlock.EMPTY_ARRAY,false,null,false);
  if (listOrMap.isMap() && namedArgs.length == 0) {
    argumentTypes=new PsiType[]{listOrMap.getType()};
  }
  GrClosureSignatureUtil.ApplicabilityResult applicable=PsiUtil.isApplicableConcrete(argumentTypes,constructor,result.getSubstitutor(),listOrMap,false);
switch (applicable) {
case inapplicable:
    highlightInapplicableMethodUsage(result,listOrMap,constructor,argumentTypes);
  return false;
case canBeApplicable:
if (checkUnknownArgs) {
  highlightUnknownArgs(listOrMap);
}
return !checkUnknownArgs;
default :
return true;
}
}
