{
  if (hasErrorElements(call.getArgumentList()))   return;
  if (invoked instanceof GrReferenceExpression) {
    final GrReferenceExpression referenceExpression=(GrReferenceExpression)invoked;
    GroovyResolveResult resolveResult=call.advancedResolve();
    GroovyResolveResult[] results=call.multiResolve(false);
    PsiElement resolved=resolveResult.getElement();
    if (resolved == null) {
      GrExpression qualifier=referenceExpression.getQualifierExpression();
      if (qualifier == null && GrHighlightUtil.isDeclarationAssignment(referenceExpression))       return;
    }
    if (!checkCannotInferArgumentTypes(referenceExpression))     return;
    final PsiType type=referenceExpression.getType();
    if (resolved != null) {
      if (resolved instanceof PsiMethod && !resolveResult.isInvokedOnProperty()) {
        checkMethodApplicability(resolveResult,referenceExpression,true);
      }
 else {
        checkCallApplicability(type,referenceExpression,true);
      }
    }
 else     if (results.length > 0) {
      for (      GroovyResolveResult result : results) {
        resolved=result.getElement();
        if (resolved instanceof PsiMethod && !resolveResult.isInvokedOnProperty()) {
          if (!checkMethodApplicability(result,referenceExpression,false))           return;
        }
 else {
          if (!checkCallApplicability(type,referenceExpression,false))           return;
        }
      }
      registerError(getElementToHighlight(referenceExpression,PsiUtil.getArgumentsList(referenceExpression)),GroovyBundle.message("method.call.is.ambiguous"));
    }
  }
 else   if (invoked != null) {
    final PsiType type=invoked.getType();
    checkCallApplicability(type,invoked,true);
  }
  checkNamedArgumentsType(call);
}
