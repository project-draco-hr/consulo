{
  GrExpression[] lValues=tupleExpression.getExpressions();
  if (initializer instanceof GrListOrMap) {
    GrExpression[] initializers=((GrListOrMap)initializer).getInitializers();
    for (int i=0; i < lValues.length; i++) {
      GrExpression lValue=lValues[i];
      if (initializers.length >= i)       break;
      GrExpression rValue=initializers[i];
      checkAssignment(lValue,rValue);
    }
  }
 else {
    PsiType type=initializer.getType();
    PsiType rType=com.intellij.psi.util.PsiUtil.extractIterableTypeParameter(type,false);
    for (    GrExpression lValue : lValues) {
      PsiType lType=lValue.getNominalType();
      if (isListAssignment(lValue) && lType != null && lType instanceof PsiClassType) {
        final PsiClassType pct=(PsiClassType)lType;
        final PsiClass clazz=pct.resolve();
        if (clazz != null && CommonClassNames.JAVA_UTIL_LIST.equals(clazz.getQualifiedName())) {
          final PsiType[] types=pct.getParameters();
          if (types.length == 1 && types[0] != null && rType != null) {
            checkAssignability(types[0],rType,tupleExpression,lValue);
          }
        }
        return;
      }
      if (lValue instanceof GrReferenceExpression && ((GrReferenceExpression)lValue).resolve() instanceof GrReferenceExpression) {
        return;
      }
      if (lType != null && rType != null) {
        checkAssignability(lType,rType,tupleExpression,lValue);
      }
    }
  }
}
