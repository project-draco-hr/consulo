{
  super.visitReferenceExpression(referenceExpression);
  GroovyResolveResult resolveResult=referenceExpression.advancedResolve();
  GroovyResolveResult[] results=referenceExpression.multiResolve(false);
  PsiElement resolved=resolveResult.getElement();
  final PsiElement parent=referenceExpression.getParent();
  if (resolved == null) {
    GrExpression qualifier=referenceExpression.getQualifierExpression();
    if (qualifier == null && GroovyAnnotator.isDeclarationAssignment(referenceExpression))     return;
  }
  if (parent instanceof GrCall) {
    if (resolved != null) {
      if (resolved instanceof PsiMethod) {
        checkMethodApplicability(resolveResult,referenceExpression);
      }
 else {
        checkClosureApplicability(resolveResult,referenceExpression.getType(),referenceExpression);
      }
    }
 else     if (results.length > 0) {
      for (      GroovyResolveResult result : results) {
        resolved=result.getElement();
        if (resolved instanceof PsiMethod) {
          if (!checkMethodApplicability(result,referenceExpression))           return;
        }
 else {
          if (!checkClosureApplicability(result,referenceExpression.getType(),referenceExpression))           return;
        }
      }
      String message=GroovyBundle.message("method.call.is.ambiguous");
      PsiElement elementToHighlight=PsiUtil.getArgumentsList(referenceExpression);
      if (elementToHighlight == null)       elementToHighlight=referenceExpression;
      registerError(elementToHighlight,message);
    }
  }
}
