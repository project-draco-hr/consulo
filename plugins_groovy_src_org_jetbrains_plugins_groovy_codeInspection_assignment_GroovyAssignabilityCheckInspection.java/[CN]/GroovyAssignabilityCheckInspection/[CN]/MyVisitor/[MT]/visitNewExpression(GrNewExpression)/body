{
  super.visitNewExpression(newExpression);
  if (newExpression.getArrayCount() > 0)   return;
  GrCodeReferenceElement refElement=newExpression.getReferenceElement();
  if (refElement == null)   return;
  final GrArgumentList argList=newExpression.getArgumentList();
  final GroovyResolveResult constructorResolveResult=newExpression.resolveConstructorGenerics();
  final PsiElement constructor=constructorResolveResult.getElement();
  if (constructor != null) {
    if (argList == null || argList.getExpressionArguments().length != 0 || ((PsiMethod)constructor).getParameterList().getParametersCount() != 0) {
      checkMethodApplicability(constructorResolveResult,refElement);
    }
  }
 else {
    final GroovyResolveResult[] results=newExpression.multiResolveConstructor();
    if (results.length > 0) {
      for (      GroovyResolveResult result : results) {
        PsiElement resolved=result.getElement();
        if (resolved instanceof PsiMethod) {
          if (!checkMethodApplicability(result,refElement))           return;
        }
      }
      String message=GroovyBundle.message("method.call.is.ambiguous");
      PsiElement elementToHighlight=argList;
      if (elementToHighlight == null || elementToHighlight.getTextLength() == 0)       elementToHighlight=refElement;
      registerError(elementToHighlight,message);
    }
  }
  checkNamedArgumentsType(newExpression);
}
