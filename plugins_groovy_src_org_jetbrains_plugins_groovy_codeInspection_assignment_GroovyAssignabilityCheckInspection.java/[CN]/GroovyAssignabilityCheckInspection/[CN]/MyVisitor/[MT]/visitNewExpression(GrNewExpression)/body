{
  super.visitNewExpression(newExpression);
  if (newExpression.getArrayCount() > 0)   return;
  GrCodeReferenceElement refElement=newExpression.getReferenceElement();
  if (refElement == null)   return;
  final PsiElement element=refElement.resolve();
  if (element instanceof PsiClass) {
    PsiClass clazz=(PsiClass)element;
    if (clazz.hasModifierProperty(GrModifier.ABSTRACT)) {
      return;
    }
  }
  final GroovyResolveResult constructorResolveResult=newExpression.resolveConstructorGenerics();
  final PsiElement constructor=constructorResolveResult.getElement();
  if (constructor != null) {
    final GrArgumentList argList=newExpression.getArgumentList();
    if (argList == null || argList.getExpressionArguments().length != 0 || ((PsiMethod)constructor).getParameterList().getParametersCount() != 0) {
      checkMethodApplicability(constructorResolveResult,refElement);
    }
  }
}
