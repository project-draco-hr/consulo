{
  final StringPattern methodName=string().oneOf("findIcon","getIcon");
  final PsiMethodPattern method=psiMethod().withName(methodName).definedInClass(IconLoader.class.getName());
  final PsiJavaElementPattern.Capture<PsiLiteralExpression> javaFile=literalExpression().and(psiExpression().methodCallParameter(0,method));
  final XmlAttributeValuePattern pluginXml=XmlPatterns.xmlAttributeValue().withLocalName("icon");
  registrar.registerReferenceProvider(or(javaFile,pluginXml),new PsiReferenceProvider(){
    @NotNull @Override public PsiReference[] getReferencesByElement(    @NotNull final PsiElement element,    @NotNull ProcessingContext context){
      if (!isIdeaProject(element.getProject()))       return PsiReference.EMPTY_ARRAY;
      return new FileReferenceSet(element){
        @Override protected Collection<PsiFileSystemItem> getExtraContexts(){
          final Module icons=ModuleManager.getInstance(element.getProject()).findModuleByName("icons");
          if (icons != null) {
            final ArrayList<PsiFileSystemItem> result=new ArrayList<PsiFileSystemItem>();
            final VirtualFile[] roots=ModuleRootManager.getInstance(icons).getSourceRoots();
            final PsiManager psiManager=element.getManager();
            for (            VirtualFile root : roots) {
              final PsiDirectory directory=psiManager.findDirectory(root);
              if (directory != null) {
                result.add(directory);
              }
            }
            return result;
          }
          return super.getExtraContexts();
        }
      }
.getAllReferences();
    }
  }
);
}
