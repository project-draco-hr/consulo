{
  final HashMap<String,String> map=new HashMap<String,String>();
  StdXMLReader reader=null;
  try {
    reader=new StdXMLReader(new ByteArrayInputStream(inputData.getContent())){
      @Override public Reader openStream(      String publicID,      String systemID) throws IOException {
        if (!"http://java.sun.com/dtd/properties.dtd".equals(systemID))         throw new IOException();
        return super.openStream(publicID,systemID);
      }
    }
;
  }
 catch (  IOException ignore) {
    return Collections.emptyMap();
  }
  NanoXmlUtil.parse(reader,new NanoXmlUtil.IXMLBuilderAdapter(){
    boolean accepted;
    boolean insideEntry;
    String key;
    @Override public void startElement(    String name,    String nsPrefix,    String nsURI,    String systemID,    int lineNr) throws Exception {
      if (!accepted) {
        if ("properties".equals(name)) {
          accepted=true;
        }
 else         throw new NanoXmlUtil.ParserStoppedException();
      }
 else {
        insideEntry="entry".equals(name);
      }
    }
    @Override public void addAttribute(    String key,    String nsPrefix,    String nsURI,    String value,    String type) throws Exception {
      if (insideEntry && "key".equals(key))       this.key=value;
    }
    @Override public void addPCData(    Reader reader,    String systemID,    int lineNr) throws Exception {
      if (insideEntry && key != null) {
        String value=StreamUtil.readTextFrom(reader);
        map.put(key,value);
      }
    }
  }
);
  return map;
}
