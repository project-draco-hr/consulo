{
  final Set<PsiMember> movedMembers=new HashSet<PsiMember>();
  for (  MemberInfo memberInfo : myMemberInfos) {
    movedMembers.add(memberInfo.getMember());
  }
  for (  MemberInfo memberInfo : myMemberInfos) {
    final PsiMember member=memberInfo.getMember();
    member.accept(new PsiRecursiveElementVisitor(){
      public void visitReferenceExpression(      PsiReferenceExpression expression){
        encodeRef(expression,movedMembers,expression);
        super.visitReferenceExpression(expression);
      }
      public void visitNewExpression(      PsiNewExpression expression){
        final PsiJavaCodeReferenceElement classReference=expression.getClassReference();
        if (classReference != null) {
          encodeRef(classReference,movedMembers,expression);
        }
        super.visitNewExpression(expression);
      }
    }
);
    ChangeContextUtil.encodeContextInfo(member,false);
  }
}
