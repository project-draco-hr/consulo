{
  final PsiElementFactory factory=JavaPsiFacade.getInstance(myClass.getProject()).getElementFactory();
  final PsiSubstitutor substitutor=TypeConversionUtil.getSuperClassSubstitutor(myClass,targetClass,PsiSubstitutor.EMPTY);
  for (  PsiTypeParameter parameter : PsiUtil.typeParametersIterable(myClass)) {
    for (    PsiReference reference : ReferencesSearch.search(parameter)) {
      final PsiElement element=reference.getElement();
      final PsiMember member=PsiTreeUtil.getParentOfType(element,PsiMember.class);
      if (member != null) {
        for (        MemberInfo memberInfo : myMemberInfos) {
          if (PsiTreeUtil.isAncestor(memberInfo.getMember(),member,false)) {
            final PsiType substitutedType=substitutor.substitute(parameter);
            if (substitutedType != null) {
              element.getParent().replace(factory.createTypeElement(substitutedType));
            }
            break;
          }
        }
      }
    }
  }
  for (  MemberInfo memberInfo : myMemberInfos) {
    final PsiMember member=memberInfo.getMember();
    PsiMember newMember=null;
    if (member instanceof PsiField) {
      ((PsiField)member).normalizeDeclaration();
      newMember=(PsiMember)targetClass.add(member);
    }
 else     if (member instanceof PsiMethod) {
      PsiMethod method=(PsiMethod)member;
      final PsiMethod methodBySignature=targetClass.findMethodBySignature(method,false);
      if (methodBySignature == null) {
        newMember=(PsiMethod)targetClass.add(method);
        if (memberInfo.isToAbstract()) {
          if (newMember.hasModifierProperty(PsiModifier.PRIVATE)) {
            PsiUtil.setModifierProperty(newMember,PsiModifier.PROTECTED,true);
          }
          myJavaDocPolicy.processNewJavaDoc(((PsiMethod)newMember).getDocComment());
        }
      }
 else {
        final PsiAnnotation annotation=AnnotationUtil.findAnnotation(methodBySignature,"java.lang.Override");
        if (annotation != null) {
          annotation.delete();
        }
      }
    }
 else     if (member instanceof PsiClass) {
      if (Boolean.FALSE.equals(memberInfo.getOverrides())) {
        final PsiClass aClass=(PsiClass)member;
        if (!targetClass.isInheritor(aClass,false)) {
          PsiJavaCodeReferenceElement classRef=factory.createClassReferenceElement(aClass);
          targetClass.getImplementsList().add(classRef);
        }
      }
 else {
        newMember=(PsiMember)targetClass.add(member);
      }
    }
    if (newMember != null) {
      decodeRefs(newMember,targetClass);
      final JavaRefactoringListenerManager listenerManager=JavaRefactoringListenerManager.getInstance(newMember.getProject());
      ((JavaRefactoringListenerManagerImpl)listenerManager).fireMemberMoved(myClass,newMember);
    }
  }
}
