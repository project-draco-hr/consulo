{
  if (myModulePaths != null && myModulePaths.size() > 0) {
    final Application app=ApplicationManager.getApplication();
    final ProgressIndicator progressIndicator=myProject.isDefault() ? null : myProgressManager.getProgressIndicator();
    if (progressIndicator != null) {
      progressIndicator.setText("Loading modules...");
      progressIndicator.setText2("");
    }
    final Runnable swingRunnable=new Runnable(){
      public void run(){
        myFailedModulePaths.clear();
        myFailedModulePaths.addAll(myModulePaths);
        final List<Module> modulesWithUnknownTypes=new ArrayList<Module>();
        List<ModuleLoadingErrorDescription> errors=new ArrayList<ModuleLoadingErrorDescription>();
        for (        final ModulePath modulePath : myModulePaths) {
          try {
            final Module module=moduleModel.loadModuleInternal(modulePath.getPath(),progressIndicator);
            if (isUnknownModuleType(module)) {
              modulesWithUnknownTypes.add(module);
            }
            final String groupPathString=modulePath.getModuleGroup();
            if (groupPathString != null) {
              final String[] groupPath=groupPathString.split(MODULE_GROUP_SEPARATOR);
              moduleModel.setModuleGroupPath(module,groupPath);
            }
            myFailedModulePaths.remove(modulePath);
          }
 catch (          final IOException e) {
            errors.add(ModuleLoadingErrorDescription.create(ProjectBundle.message("module.cannot.load.error",modulePath.getPath(),e.getMessage()),modulePath,ModuleManagerImpl.this));
          }
catch (          final ModuleWithNameAlreadyExists moduleWithNameAlreadyExists) {
            errors.add(ModuleLoadingErrorDescription.create(moduleWithNameAlreadyExists.getMessage(),modulePath,ModuleManagerImpl.this));
          }
catch (          StateStorageException e) {
            errors.add(ModuleLoadingErrorDescription.create(ProjectBundle.message("module.cannot.load.error",modulePath.getPath(),e.getMessage()),modulePath,ModuleManagerImpl.this));
          }
        }
        fireErrors(errors);
        showUnknownModuleTypeNotification(modulesWithUnknownTypes);
      }
    }
;
    swingRunnable.run();
  }
}
