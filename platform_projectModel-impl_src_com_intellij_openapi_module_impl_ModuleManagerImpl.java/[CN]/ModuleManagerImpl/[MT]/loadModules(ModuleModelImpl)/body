{
  if (myModulePaths != null && !myModulePaths.isEmpty()) {
    final ProgressIndicator progressIndicator=myProject.isDefault() ? null : ProgressIndicatorProvider.getGlobalProgressIndicator();
    if (progressIndicator != null) {
      progressIndicator.setText("Loading modules...");
      progressIndicator.setText2("");
    }
    myFailedModulePaths.clear();
    myFailedModulePaths.addAll(myModulePaths);
    final List<Module> modulesWithUnknownTypes=new ArrayList<Module>();
    List<ModuleLoadingErrorDescription> errors=new ArrayList<ModuleLoadingErrorDescription>();
    for (    final ModulePath modulePath : myModulePaths) {
      try {
        final Module module=moduleModel.loadModuleInternal(modulePath.getPath(),progressIndicator);
        if (isUnknownModuleType(module)) {
          modulesWithUnknownTypes.add(module);
        }
        final String groupPathString=modulePath.getModuleGroup();
        if (groupPathString != null) {
          final String[] groupPath=groupPathString.split(MODULE_GROUP_SEPARATOR);
          moduleModel.setModuleGroupPath(module,groupPath);
        }
        myFailedModulePaths.remove(modulePath);
      }
 catch (      final IOException e) {
        errors.add(ModuleLoadingErrorDescription.create(ProjectBundle.message("module.cannot.load.error",modulePath.getPath(),e.getMessage()),modulePath,this));
      }
catch (      final ModuleWithNameAlreadyExists moduleWithNameAlreadyExists) {
        errors.add(ModuleLoadingErrorDescription.create(moduleWithNameAlreadyExists.getMessage(),modulePath,this));
      }
catch (      StateStorageException e) {
        errors.add(ModuleLoadingErrorDescription.create(ProjectBundle.message("module.cannot.load.error",modulePath.getPath(),e.getMessage()),modulePath,this));
      }
    }
    fireErrors(errors);
    showUnknownModuleTypeNotification(modulesWithUnknownTypes);
  }
}
