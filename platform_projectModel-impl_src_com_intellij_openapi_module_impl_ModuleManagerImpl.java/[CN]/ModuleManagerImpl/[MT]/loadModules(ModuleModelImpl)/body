{
  if (myModuleLoadItems.isEmpty()) {
    return;
  }
  ModuleGroupInterner groupInterner=new ModuleGroupInterner();
  final ProgressIndicator progressIndicator=myProject.isDefault() ? null : ProgressIndicatorProvider.getGlobalProgressIndicator();
  if (progressIndicator != null) {
    progressIndicator.setText("Loading modules...");
    progressIndicator.setText2("");
  }
  myFailedModulePaths.clear();
  myFailedModulePaths.addAll(myModuleLoadItems);
  List<ModuleLoadingErrorDescription> errors=new ArrayList<ModuleLoadingErrorDescription>();
  for (  ModuleLoadItem moduleLoadItem : myModuleLoadItems) {
    try {
      final Module module=moduleModel.loadModuleInternal(moduleLoadItem,progressIndicator);
      final String[] groups=moduleLoadItem.getGroups();
      if (groups != null) {
        groupInterner.setModuleGroupPath(moduleModel,module,groups);
      }
      myFailedModulePaths.remove(moduleLoadItem);
    }
 catch (    final IOException e) {
      errors.add(ModuleLoadingErrorDescription.create(ProjectBundle.message("module.cannot.load.error",VirtualFileManager.extractPath(moduleLoadItem.getDirUrl()),e.getMessage()),moduleLoadItem,this));
    }
catch (    final ModuleWithNameAlreadyExists moduleWithNameAlreadyExists) {
      errors.add(ModuleLoadingErrorDescription.create(moduleWithNameAlreadyExists.getMessage(),moduleLoadItem,this));
    }
catch (    StateStorageException e) {
      errors.add(ModuleLoadingErrorDescription.create(ProjectBundle.message("module.cannot.load.error",VirtualFileManager.extractPath(moduleLoadItem.getDirUrl()),e.getMessage()),moduleLoadItem,this));
    }
  }
  fireErrors(errors);
}
