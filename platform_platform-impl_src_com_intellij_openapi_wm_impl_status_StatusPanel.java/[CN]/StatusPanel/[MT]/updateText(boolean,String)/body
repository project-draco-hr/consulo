{
  ApplicationManager.getApplication().assertIsDispatchThread();
  myLogMode=logAllowed && StringUtil.isEmpty(nonLogText) && myLogMessage != null;
  myShowLog.setVisible(myLogMode);
  if (myLogMode) {
    LOG.assertTrue(myLogTime != null);
    new Runnable(){
      @Override public void run(){
        String text=myLogMessage;
        if (myDirty || System.currentTimeMillis() - myLogTime.getTime() >= DateFormatUtil.MINUTE) {
          text+=" (" + StringUtil.decapitalize(DateFormatUtil.formatPrettyDateTime(myLogTime)) + ")";
        }
        myTextPanel.setText(text);
        myLogAlarm.addRequest(this,30000);
      }
    }
.run();
    new Runnable(){
      @Override public void run(){
        final ToolWindow eventLog=getEventLog();
        if (eventLog == null) {
          myShowLog.setVisible(false);
          return;
        }
        final boolean visible=eventLog.isVisible();
        myShowLog.setIcon(visible ? ourHideLogIcon : ourShowLogIcon);
        myShowLog.setToolTipText(visible ? "" : "Click to open the event log");
        myLogAlarm.addRequest(this,50);
      }
    }
.run();
  }
 else {
    myDirty=true;
    myTextPanel.setText(nonLogText);
    myLogAlarm.cancelAllRequests();
  }
  return myLogMode;
}
