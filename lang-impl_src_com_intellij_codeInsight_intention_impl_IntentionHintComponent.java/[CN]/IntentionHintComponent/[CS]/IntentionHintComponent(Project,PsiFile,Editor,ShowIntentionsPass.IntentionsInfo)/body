{
  ApplicationManager.getApplication().assertReadAccessAllowed();
  myFile=file;
  myProject=project;
  myEditor=editor;
  setLayout(new BorderLayout());
  setOpaque(false);
  boolean showFix=false;
  for (  final HighlightInfo.IntentionActionDescriptor pairs : intentions.errorFixesToShow) {
    IntentionAction fix=pairs.getAction();
    if (IntentionManagerSettings.getInstance().isShowLightBulb(fix)) {
      showFix=true;
      break;
    }
  }
  mySmartTagIcon=showFix ? ourQuickFixIcon : ourBulbIcon;
  myHighlightedIcon=new RowIcon(2);
  myHighlightedIcon.setIcon(mySmartTagIcon,0);
  myHighlightedIcon.setIcon(ourArrowIcon,1);
  myButton=new JButton(mySmartTagIcon);
  myButton.setFocusable(false);
  myButton.setMargin(INACTIVE_MARGIN);
  myButton.setBorderPainted(false);
  myButton.setContentAreaFilled(false);
  add(myButton,BorderLayout.CENTER);
  setBorder(INACTIVE_BORDER);
  myButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      showPopup();
    }
  }
);
  myButton.addMouseListener(new MouseAdapter(){
    public void mouseEntered(    MouseEvent e){
      onMouseEnter();
    }
    public void mouseExited(    MouseEvent e){
      onMouseExit();
    }
  }
);
  myComponentHint=new MyComponentHint(this);
  IntentionListStep step=new IntentionListStep(this,intentions,myEditor,myFile,myProject);
  recreateMyPopup(step);
}
