{
  myResult.removeAll();
  myComponents.clear();
  List<JComponent> rowComponents=new ArrayList<JComponent>();
  RichTextProcessor metaDataProcessor=null;
  StringBuilder metaTokenData=new StringBuilder();
  boolean ignoreNext=false;
  for (  String s : StringUtil.tokenize(new StringTokenizer(text," \n",true))) {
    if (ignoreNext || s.isEmpty()) {
      ignoreNext=false;
      continue;
    }
    if (metaDataProcessor != null) {
      final int i=s.indexOf(RICH_TEXT_TOKEN_END);
      if (i >= 0) {
        metaTokenData.append(s.substring(0,i));
        final JComponent component=metaDataProcessor.process(metaTokenData.toString());
        if (component != null) {
          rowComponents.add(component);
        }
        metaTokenData.setLength(0);
        metaDataProcessor=null;
        if (i + RICH_TEXT_TOKEN_END.length() < s.length()) {
          s=s.substring(i + RICH_TEXT_TOKEN_END.length());
        }
 else {
          continue;
        }
      }
 else {
        metaTokenData.append(s);
        continue;
      }
    }
    final int start=s.indexOf(RICH_TEXT_TOKEN_START);
    if (start >= 0) {
      if (start + RICH_TEXT_TOKEN_START.length() >= s.length()) {
        throw new IllegalArgumentException(String.format("Invalid rich text detected. Meta data key is assumed to directly follow '%s' (no white spaces between them). " + "Given text: '%s'",RICH_TEXT_TOKEN_START,text));
      }
      int end=s.indexOf(RICH_TEXT_TOKEN_END);
      boolean metaDataComplete=true;
      if (end < start) {
        end=s.length();
        metaDataComplete=false;
      }
      String metaKey=s.substring(start + RICH_TEXT_TOKEN_START.length(),end);
      metaDataProcessor=myProcessors.get(metaKey);
      if (metaDataProcessor == null) {
        throw new IllegalArgumentException(String.format("No processor is registered for the meta-key '%s' (processors are available only for these keys - %s). Rich text: '%s'",metaKey,myProcessors.keySet(),text));
      }
      if (metaDataComplete) {
        final JComponent component=metaDataProcessor.process("");
        if (component != null) {
          rowComponents.add(component);
        }
        metaDataProcessor=null;
        if (end < s.length()) {
          s=s.substring(end);
        }
 else {
          continue;
        }
      }
 else {
        ignoreNext=true;
        continue;
      }
    }
    if (s.contains("\n")) {
      addRow(rowComponents);
      rowComponents.clear();
    }
 else {
      final JLabel label=new JLabel(s);
      label.setForeground(myForegroundColor);
      label.setBackground(myBackgroundColor);
      label.setFont(myFont);
      rowComponents.add(label);
    }
  }
  if (!rowComponents.isEmpty()) {
    addRow(rowComponents);
  }
}
