{
  final String targetPackageName=getTargetPackageName();
  final JavaPsiFacade psiFacade=JavaPsiFacade.getInstance(myProject);
  if (!psiFacade.getNameHelper().isQualifiedName(targetPackageName)) {
    throw new OperationFailedException("Invalid package name: " + targetPackageName);
  }
  final PsiPackage aPackage=psiFacade.findPackage(targetPackageName);
  if (aPackage != null) {
    final PsiDirectory[] directories=aPackage.getDirectories(mySourceClass.getResolveScope());
    if (directories.length >= 1) {
      myTargetDirectory=getDirUnderSameSourceRoot(directories);
    }
  }
  final MoveDestination moveDestination=myDestinationFolderComboBox.selectDirectory(new PackageWrapper(PsiManager.getInstance(myProject),targetPackageName),false);
  if (moveDestination == null)   return;
  myTargetDirectory=myTargetDirectory != null ? ApplicationManager.getApplication().runWriteAction(new Computable<PsiDirectory>(){
    @Override public PsiDirectory compute(){
      return moveDestination.getTargetDirectory(myTargetDirectory);
    }
  }
) : null;
  if (myTargetDirectory == null) {
    throw new OperationFailedException("");
  }
  String error=RefactoringMessageUtil.checkCanCreateClass(myTargetDirectory,getExtractedSuperName());
  if (error != null) {
    throw new OperationFailedException(error);
  }
}
