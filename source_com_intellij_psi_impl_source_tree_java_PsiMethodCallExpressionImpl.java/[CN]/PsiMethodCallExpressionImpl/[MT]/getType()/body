{
  PsiReferenceExpression methodExpression=getMethodExpression();
  final ResolveResult result=methodExpression.advancedResolve(false);
  final PsiMethod method=(PsiMethod)result.getElement();
  if (method == null)   return null;
  PsiManager manager=getManager();
  if (manager.getEffectiveLanguageLevel().compareTo(LanguageLevel.JDK_1_5) >= 0) {
    if ("getClass".equals(method.getName()) && "java.lang.Object".equals(method.getContainingClass().getQualifiedName())) {
      PsiExpression qualifier=methodExpression.getQualifierExpression();
      if (qualifier != null) {
        PsiClass javaLangClass=manager.findClass("java.lang.Class",getResolveScope());
        if (javaLangClass != null && javaLangClass.getTypeParameters().length == 1) {
          Map<PsiTypeParameter,PsiType> map=new HashMap<PsiTypeParameter,PsiType>();
          map.put(javaLangClass.getTypeParameters()[0],PsiWildcardType.createExtends(manager,TypeConversionUtil.erasure(qualifier.getType())));
          PsiSubstitutor substitutor=manager.getElementFactory().createSubstitutor(map);
          return manager.getElementFactory().createType(javaLangClass,substitutor);
        }
      }
    }
  }
  final PsiType ret=method.getReturnType();
  if (ret == null)   return null;
  PsiType substitutedReturnType=result.getSubstitutor().substituteAndCapture(ret);
  return PsiImplUtil.normalizeWildcardTypeByPosition(substitutedReturnType,this);
}
