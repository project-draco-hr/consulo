{
  PsiReferenceExpression methodExpression=getMethodExpression();
  final ResolveResult result=methodExpression.advancedResolve(false);
  final PsiMethod method=(PsiMethod)result.getElement();
  if (method == null)   return null;
  PsiManager manager=getManager();
  if (manager.getEffectiveLanguageLevel().compareTo(LanguageLevel.JDK_1_5) >= 0) {
    if ("getClass".equals(method.getName()) && "java.lang.Object".equals(method.getContainingClass().getQualifiedName())) {
      PsiExpression qualifier=methodExpression.getQualifierExpression();
      PsiType qualifierType=null;
      if (qualifier != null) {
        qualifierType=TypeConversionUtil.erasure(qualifier.getType());
      }
 else {
        ASTNode parent=getTreeParent();
        while (parent != null && parent.getElementType() != CLASS)         parent=parent.getTreeParent();
        if (parent != null) {
          qualifierType=getManager().getElementFactory().createType((PsiClass)parent.getPsi());
        }
      }
      if (qualifierType != null) {
        PsiClass javaLangClass=manager.findClass("java.lang.Class",getResolveScope());
        if (javaLangClass != null && javaLangClass.getTypeParameters().length == 1) {
          Map<PsiTypeParameter,PsiType> map=new HashMap<PsiTypeParameter,PsiType>();
          map.put(javaLangClass.getTypeParameters()[0],PsiWildcardType.createExtends(manager,qualifierType));
          PsiSubstitutor substitutor=manager.getElementFactory().createSubstitutor(map);
          return manager.getElementFactory().createType(javaLangClass,substitutor);
        }
      }
    }
  }
  final PsiType ret=method.getReturnType();
  if (ret == null)   return null;
  if (getManager().getEffectiveLanguageLevel().compareTo(LanguageLevel.JDK_1_5) >= 0) {
    PsiType substitutedReturnType=result.getSubstitutor().substituteAndCapture(ret);
    return PsiImplUtil.normalizeWildcardTypeByPosition(substitutedReturnType,this);
  }
  return TypeConversionUtil.erasure(ret);
}
