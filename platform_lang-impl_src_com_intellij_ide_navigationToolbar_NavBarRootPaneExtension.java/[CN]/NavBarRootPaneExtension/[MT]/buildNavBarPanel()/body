{
  final Ref<JPanel> panel=new Ref<JPanel>(null);
  final Runnable updater=new Runnable(){
    String laf;
    @Override public void run(){
      if (LafManager.getInstance().getCurrentLookAndFeel().getName().equals(laf))       return;
      laf=LafManager.getInstance().getCurrentLookAndFeel().getName();
      panel.get().removeAll();
      myScrollPane=null;
      if (myNavigationBar != null && !Disposer.isDisposed(myNavigationBar)) {
        Disposer.dispose(myNavigationBar);
      }
      myNavigationBar=new NavBarPanel(myProject);
      myWrapperPanel.putClientProperty("NavBarPanel",myNavigationBar);
      myNavigationBar.getModel().setFixedComponent(true);
      myScrollPane=ScrollPaneFactory.createScrollPane(myNavigationBar);
      myScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
      myScrollPane.setHorizontalScrollBar(null);
      myScrollPane.setBorder(null);
      myScrollPane.setOpaque(false);
      myScrollPane.getViewport().setOpaque(false);
      panel.get().setOpaque(true);
      panel.get().setBorder(new NavBarBorder(true,0));
      myNavigationBar.setBorder(null);
      panel.get().add(myScrollPane,BorderLayout.CENTER);
    }
  }
;
  panel.set(new JPanel(new BorderLayout()){
    @Override public void updateUI(){
      super.updateUI();
      if (UISettings.getInstance().SHOW_NAVIGATION_BAR) {
        SwingUtilities.invokeLater(updater);
      }
    }
    @Override protected void paintComponent(    Graphics g){
      super.paintComponent(g);
      NavBarUIManager.getUI().doPaintNavBarPanel((Graphics2D)g,getBounds(),isMainToolbarVisible(),isUndocked());
    }
    @Override public void doLayout(){
      final Rectangle r=getBounds();
      final Insets insets=getInsets();
      int x=insets.left;
      if (myScrollPane == null)       return;
      final Component navBar=myScrollPane;
      final Dimension preferredSize=navBar.getPreferredSize();
      navBar.setBounds(x,insets.top + ((r.height - preferredSize.height - insets.top- insets.bottom) / 2),r.width - insets.left - insets.right,preferredSize.height);
    }
  }
);
  updater.run();
  final JPanel main=new JPanel(new BorderLayout());
  main.setOpaque(false);
  main.add(panel.get(),BorderLayout.NORTH);
  return main;
}
