{
  final JComponent result=new JPanel(new BorderLayout()){
    @Override public void updateUI(){
      super.updateUI();
      SwingUtilities.invokeLater(new Runnable(){
        @Override public void run(){
          removeAll();
          myScrollPane=null;
          myCloseIcon=null;
          if (myNavigationBar != null && !Disposer.isDisposed(myNavigationBar)) {
            Disposer.dispose(myNavigationBar);
          }
          myNavigationBar=new NavBarPanel(myProject);
          myWrapperPanel.putClientProperty("NavBarPanel",myNavigationBar);
          myNavigationBar.getModel().setFixedComponent(true);
          myScrollPane=ScrollPaneFactory.createScrollPane(myNavigationBar);
          myScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
          myScrollPane.setHorizontalScrollBar(null);
          myScrollPane.setBorder(null);
          myScrollPane.setOpaque(false);
          myScrollPane.getViewport().setOpaque(false);
          setBackground(UIUtil.isUnderGTKLookAndFeel() ? Color.WHITE : UIUtil.getListBackground());
          setOpaque(!UIUtil.isUnderAquaLookAndFeel() || UISettings.getInstance().SHOW_MAIN_TOOLBAR);
          setBorder(UIUtil.isUnderAquaLookAndFeel() ? BorderFactory.createEmptyBorder(2,0,2,4) : new NavBarBorder(true,0));
          myNavigationBar.setBorder(null);
          add(myScrollPane,BorderLayout.CENTER);
          if (!SystemInfo.isMac) {
            myCloseIcon=new JLabel(CROSS_ICON);
            myCloseIcon.addMouseListener(new MouseAdapter(){
              public void mouseClicked(              final MouseEvent e){
                UISettings.getInstance().SHOW_NAVIGATION_BAR=false;
                uiSettingsChanged(UISettings.getInstance());
              }
            }
);
            add(myCloseIcon,BorderLayout.EAST);
          }
        }
      }
);
    }
    @Override protected void paintComponent(    Graphics g){
      if (UIUtil.isUnderAquaLookAndFeel()) {
        final Rectangle r=getBounds();
        final Graphics2D g2d=(Graphics2D)g;
        if (!isMainToolbarVisible()) {
          final Dimension d=getPreferredSize();
          final int topOffset=(r.height - d.height) / 2 + 2;
          UIUtil.drawDoubleSpaceDottedLine(g2d,topOffset,topOffset + d.height - 1,r.width - 1,Color.GRAY,false);
        }
 else {
          final boolean undocked=isUndocked();
          g2d.setPaint(new GradientPaint(0,0,new Color(240,240,240),0,r.height,new Color(210,210,210)));
          g.fillRect(0,0,r.width,r.height);
          if (!undocked) {
            g.setColor(new Color(255,255,255,220));
            g.drawLine(0,1,r.width,1);
          }
          g.setColor(new Color(0,0,0,80));
          if (!undocked)           g.drawLine(0,0,r.width,0);
          g.drawLine(0,r.height - 1,r.width - 1,r.height - 1);
        }
      }
 else {
        super.paintComponent(g);
      }
    }
    @Override public void doLayout(){
      final Rectangle r=getBounds();
      final Insets insets=getInsets();
      int x=insets.left;
      if (myScrollPane == null)       return;
      final Component navBar=myScrollPane;
      final Component closeLabel=myCloseIcon;
      final Dimension preferredSize=navBar.getPreferredSize();
      final Dimension closePreferredSize=closeLabel == null ? new Dimension() : closeLabel.getPreferredSize();
      navBar.setBounds(x,insets.top + ((r.height - preferredSize.height - insets.top- insets.bottom) / 2),r.width - insets.left - insets.right- closePreferredSize.width,preferredSize.height);
      if (closeLabel != null) {
        closeLabel.setBounds(x + r.width - insets.left - insets.right - closePreferredSize.width,insets.top + ((r.height - closePreferredSize.height - insets.top- insets.bottom) / 2),closePreferredSize.width,closePreferredSize.height);
      }
    }
  }
;
  return result;
}
