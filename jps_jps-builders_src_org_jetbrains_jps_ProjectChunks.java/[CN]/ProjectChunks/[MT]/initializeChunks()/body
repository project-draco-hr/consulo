{
  if (chunks != null) {
    return;
  }
  final GraphGenerator<JpsModule> graph=GraphGenerator.create(CachingSemiGraph.create(new GraphGenerator.SemiGraph<JpsModule>(){
    @Override public Collection<JpsModule> getNodes(){
      return project.getModules();
    }
    @Override public Iterator<JpsModule> getIn(    JpsModule n){
      List<JpsModule> deps=new ArrayList<JpsModule>();
      for (      JpsDependencyElement element : n.getDependenciesList().getDependencies()) {
        if (element instanceof JpsModuleDependency) {
          final JpsJavaDependencyExtension extension=JpsJavaExtensionService.getInstance().getDependencyExtension(element);
          if (extension == null || extension.getScope().isIncludedIn(classpathKind)) {
            ContainerUtil.addIfNotNull(deps,((JpsModuleDependency)element).getModule());
          }
        }
      }
      return deps.iterator();
    }
  }
));
  final DFSTBuilder<JpsModule> builder=new DFSTBuilder<JpsModule>(graph);
  final TIntArrayList sccs=builder.getSCCs();
  chunks=new ArrayList<ModuleChunk>(sccs.size());
  sccs.forEach(new TIntProcedure(){
    int myTNumber=0;
    public boolean execute(    int size){
      final Set<JpsModule> chunkNodes=new LinkedHashSet<JpsModule>();
      for (int j=0; j < size; j++) {
        final JpsModule node=builder.getNodeByTNumber(myTNumber + j);
        chunkNodes.add(node);
      }
      chunks.add(new ModuleChunk(chunkNodes,myTest));
      myTNumber+=size;
      return true;
    }
  }
);
  for (  ModuleChunk chunk : chunks) {
    for (    JpsModule module : chunk.getModules()) {
      mapping.put(module,chunk);
    }
  }
}
