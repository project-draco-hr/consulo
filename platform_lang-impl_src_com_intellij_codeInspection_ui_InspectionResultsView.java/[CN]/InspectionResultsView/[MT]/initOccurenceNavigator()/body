{
  return new OccurenceNavigatorSupport(myTree){
    @Override @Nullable protected Navigatable createDescriptorForNode(    DefaultMutableTreeNode node){
      if (node instanceof RefElementNode) {
        final RefElementNode refNode=(RefElementNode)node;
        if (refNode.hasDescriptorsUnder())         return null;
        final RefEntity element=refNode.getElement();
        if (element == null || !element.isValid())         return null;
        final CommonProblemDescriptor problem=refNode.getProblem();
        if (problem != null) {
          return navigate(problem);
        }
        if (element instanceof RefElement) {
          return getOpenFileDescriptor((RefElement)element);
        }
      }
 else       if (node instanceof ProblemDescriptionNode) {
        if (!((ProblemDescriptionNode)node).isValid())         return null;
        return navigate(((ProblemDescriptionNode)node).getDescriptor());
      }
      return null;
    }
    @Nullable private Navigatable navigate(    final CommonProblemDescriptor descriptor){
      return getSelectedNavigatable(descriptor);
    }
    @Override public String getNextOccurenceActionName(){
      return InspectionsBundle.message("inspection.action.go.next");
    }
    @Override public String getPreviousOccurenceActionName(){
      return InspectionsBundle.message("inspection.actiongo.prev");
    }
  }
;
}
