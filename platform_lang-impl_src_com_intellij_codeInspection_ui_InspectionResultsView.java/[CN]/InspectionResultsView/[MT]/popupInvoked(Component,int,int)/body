{
  final TreePath path=myTree.getLeadSelectionPath();
  if (path == null)   return;
  final DefaultActionGroup actions=new DefaultActionGroup();
  final ActionManager actionManager=ActionManager.getInstance();
  actions.add(actionManager.getAction(IdeActions.ACTION_EDIT_SOURCE));
  actions.add(actionManager.getAction(IdeActions.ACTION_FIND_USAGES));
  actions.add(myIncludeAction);
  actions.add(myExcludeAction);
  actions.addSeparator();
  final InspectionToolWrapper toolWrapper=myTree.getSelectedToolWrapper();
  if (toolWrapper != null) {
    final QuickFixAction[] quickFixes=myProvider.getQuickFixes(toolWrapper,myTree);
    if (quickFixes != null) {
      for (      QuickFixAction quickFixe : quickFixes) {
        actions.add(quickFixe);
      }
    }
    final HighlightDisplayKey key=HighlightDisplayKey.find(toolWrapper.getShortName());
    if (key == null)     return;
    actions.addSeparator();
    actions.add(new EditSettingsAction());
    final List<AnAction> options=new InspectionsOptionsToolbarAction(this).createActions();
    for (    AnAction action : options) {
      actions.add(action);
    }
  }
  actions.addSeparator();
  actions.add(actionManager.getAction(IdeActions.GROUP_VERSION_CONTROLS));
  final ActionPopupMenu menu=actionManager.createActionPopupMenu(ActionPlaces.CODE_INSPECTION,actions);
  menu.getComponent().show(component,x,y);
}
