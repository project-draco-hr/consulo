{
  HighlightInfo[] highlights=getHighlights(document,myProject);
  if (highlights == null)   return null;
  List<HighlightInfo> foundInfoList=new SmartList<HighlightInfo>();
  for (int i=0; i < highlights.length; i++) {
    HighlightInfo info=highlights[i];
    if (info.highlighter == null || !info.highlighter.isValid())     continue;
    int startOffset=info.highlighter.getStartOffset();
    int endOffset=info.highlighter.getEndOffset();
    if (info.isAfterEndOfLine) {
      startOffset+=1;
      endOffset+=1;
    }
    if (startOffset > offset || offset > endOffset) {
      if (!includeFixRange)       continue;
      if (info.fixMarker == null || !info.fixMarker.isValid())       continue;
      startOffset=info.fixMarker.getStartOffset();
      endOffset=info.fixMarker.getEndOffset();
      if (info.isAfterEndOfLine) {
        startOffset+=1;
        endOffset+=1;
      }
      if (startOffset > offset || offset > endOffset)       continue;
    }
    if (foundInfoList.size() != 0) {
      final HighlightInfo foundInfo=foundInfoList.get(0);
      if (foundInfo.getSeverity().isLess(info.getSeverity())) {
        foundInfoList.clear();
      }
 else       if (info.getSeverity().isLess(foundInfo.getSeverity())) {
        continue;
      }
    }
    foundInfoList.add(info);
  }
  if (foundInfoList.size() == 0)   return null;
  if (foundInfoList.size() == 1)   return foundInfoList.get(0);
  return new HighlightInfoComposite(foundInfoList);
}
