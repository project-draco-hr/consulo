{
  List<HighlightInfo> all=new ArrayList<HighlightInfo>(Arrays.asList(highlights));
  List<HighlightInfo> errors=new ArrayList<HighlightInfo>();
  for (int i=0; i < highlights.length; i++) {
    HighlightInfo highlight=highlights[i];
    if (highlight.getSeverity() == HighlightSeverity.ERROR) {
      errors.add(highlight);
    }
  }
  for (int i=0; i < highlights.length; i++) {
    HighlightInfo highlight=highlights[i];
    if (highlight.getSeverity() == HighlightSeverity.WARNING) {
      for (int j=0; j < errors.size(); j++) {
        HighlightInfo errorInfo=errors.get(j);
        if (isCoveredBy(highlight,errorInfo)) {
          all.remove(highlight);
          final RangeHighlighter highlighter=highlight.highlighter;
          if (highlighter != null && highlighter.isValid()) {
            markup.removeHighlighter(highlighter);
          }
          break;
        }
      }
    }
  }
  return all.size() < highlights.length ? all.toArray(new HighlightInfo[all.size()]) : highlights;
}
