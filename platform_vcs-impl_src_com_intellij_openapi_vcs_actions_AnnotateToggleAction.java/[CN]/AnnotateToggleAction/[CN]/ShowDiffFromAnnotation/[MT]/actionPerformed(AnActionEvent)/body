{
  final int actualNumber=getActualLineNumber(e);
  if (actualNumber < 0)   return;
  final VcsRevisionNumber revisionNumber=myFileAnnotation.getLineRevisionNumber(actualNumber);
  if (revisionNumber != null) {
    final VcsException[] exc=new VcsException[1];
    final List<Change> changes=new LinkedList<Change>();
    ProgressManager.getInstance().run(new Task.Backgroundable(myVcs.getProject(),"Loading revision " + revisionNumber.asString() + " contents",true,BackgroundFromStartOption.getInstance()){
      @Override public void run(      @NotNull ProgressIndicator indicator){
        final CommittedChangesProvider provider=myVcs.getCommittedChangesProvider();
        try {
          final CommittedChangeList cl=provider.getOneList(myFile,revisionNumber);
          if (cl == null) {
            ChangesViewBalloonProblemNotifier.showMe(myVcs.getProject(),"Can not load data for show diff",MessageType.ERROR);
            return;
          }
          changes.addAll(cl.getChanges());
          Collections.sort(changes,ChangesComparator.getInstance());
        }
 catch (        VcsException e1) {
          exc[0]=e1;
        }
      }
      @Override public void onSuccess(){
        if (exc[0] != null) {
          ChangesViewBalloonProblemNotifier.showMe(myVcs.getProject(),"Can not show diff: " + exc[0].getMessage(),MessageType.ERROR);
        }
 else         if (!changes.isEmpty()) {
          int idx=findSelfInList(changes);
          final ShowDiffUIContext context=new ShowDiffUIContext(true);
          context.setDiffNavigationContext(createDiffNavigationContext(actualNumber));
          ShowDiffAction.showDiffForChange(changes.toArray(new Change[changes.size()]),idx,myVcs.getProject(),context);
        }
      }
    }
);
  }
}
