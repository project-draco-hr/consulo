{
  String upToDateContent=fileAnnotation.getAnnotatedContent();
  final UpToDateLineNumberProvider getUpToDateLineNumber=new UpToDateLineNumberProviderImpl(editor.getDocument(),project,upToDateContent);
  editor.getGutter().closeAllAnnotations();
  Collection<ActiveAnnotationGutter> annotations=editor.getUserData(KEY_IN_EDITOR);
  if (annotations == null) {
    annotations=new HashSet<ActiveAnnotationGutter>();
    editor.putUserData(KEY_IN_EDITOR,annotations);
  }
  final EditorGutterComponentEx editorGutterComponentEx=(EditorGutterComponentEx)editor.getGutter();
  final HighlightAnnotationsActions highlighting=new HighlightAnnotationsActions(project,file,fileAnnotation,editorGutterComponentEx);
  final List<AnnotationFieldGutter> gutters=new ArrayList<AnnotationFieldGutter>();
  final AnnotationSourceSwitcher switcher=fileAnnotation.getAnnotationSourceSwitcher();
  final MyAnnotationPresentation presentation;
  if (vcs.getCommittedChangesProvider() != null) {
    final ShowDiffFromAnnotation showDiff=new ShowDiffFromAnnotation(getUpToDateLineNumber,fileAnnotation,vcs,file);
    presentation=new MyAnnotationPresentation(highlighting,switcher,editorGutterComponentEx,gutters,showDiff);
    presentation.addLineNumberListener(showDiff);
  }
 else {
    presentation=new MyAnnotationPresentation(highlighting,switcher,editorGutterComponentEx,gutters);
  }
  if (switcher != null) {
    switcher.switchTo(switcher.getDefaultSource());
    final LineAnnotationAspect revisonAspect=switcher.getRevisionAspect();
    final MyCurrentRevisionAnnotationFieldGutter currentRevisionGutter=new MyCurrentRevisionAnnotationFieldGutter(fileAnnotation,editor,revisonAspect,presentation);
    final MyMergeSourceAvailableMarkerGutter mergeSourceGutter=new MyMergeSourceAvailableMarkerGutter(fileAnnotation,editor,null,presentation);
    presentation.addSourceSwitchListener(currentRevisionGutter);
    presentation.addSourceSwitchListener(mergeSourceGutter);
    currentRevisionGutter.consume(switcher.getDefaultSource());
    mergeSourceGutter.consume(switcher.getDefaultSource());
    gutters.add(currentRevisionGutter);
    gutters.add(mergeSourceGutter);
  }
  final Map<String,Color> revNumbers=Registry.is("vcs.show.colored.annotations") ? computeBgColors(fileAnnotation) : null;
  final LineAnnotationAspect[] aspects=fileAnnotation.getAspects();
  for (  LineAnnotationAspect aspect : aspects) {
    final AnnotationFieldGutter gutter=new AnnotationFieldGutter(fileAnnotation,editor,aspect,presentation);
    gutters.add(gutter);
    gutter.setAspectValueToBgColorMap(revNumbers);
  }
  gutters.add(new MyHighlightedAdditionalColumn(fileAnnotation,editor,null,presentation,highlighting));
  for (  AnnotationFieldGutter gutter : gutters) {
    final AnnotationGutterLineConvertorProxy proxy=new AnnotationGutterLineConvertorProxy(getUpToDateLineNumber,gutter);
    if (gutter.isGutterAction()) {
      editor.getGutter().registerTextAnnotation(proxy,proxy);
    }
 else {
      editor.getGutter().registerTextAnnotation(proxy);
    }
    annotations.add(gutter);
  }
}
