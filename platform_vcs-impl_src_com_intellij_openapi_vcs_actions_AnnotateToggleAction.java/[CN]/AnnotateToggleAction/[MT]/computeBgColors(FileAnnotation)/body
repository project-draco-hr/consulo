{
  final Map<VcsRevisionNumber,Color> commitOrderColors=new HashMap<VcsRevisionNumber,Color>();
  final Map<VcsRevisionNumber,Color> commitAuthorColors=new HashMap<VcsRevisionNumber,Color>();
  final Map<String,Color> authorColors=new HashMap<String,Color>();
  final List<VcsFileRevision> fileRevisionList=fileAnnotation.getRevisions();
  if (fileRevisionList != null) {
    final int colorsCount=BG_COLORS.length;
    final int revisionsCount=fileRevisionList.size();
    for (int i=0; i < fileRevisionList.size(); i++) {
      VcsFileRevision revision=fileRevisionList.get(i);
      final VcsRevisionNumber number=revision.getRevisionNumber();
      final String author=revision.getAuthor();
      if (number == null)       continue;
      if (!commitAuthorColors.containsKey(number)) {
        if (author != null && !authorColors.containsKey(author)) {
          final int index=authorColors.size();
          Color color=BG_COLORS[index * BG_COLORS_PRIME % colorsCount];
          authorColors.put(author,color);
        }
        commitAuthorColors.put(number,authorColors.get(author));
      }
      if (!commitOrderColors.containsKey(number)) {
        Color color=BG_COLORS[colorsCount * i / revisionsCount];
        commitOrderColors.put(number,color);
      }
    }
  }
  return Couple.of(commitOrderColors.size() > 1 ? commitOrderColors : null,commitAuthorColors.size() > 1 ? commitAuthorColors : null);
}
