{
  final List<? extends VcsRevisionDescription> fileRevisionList=fileAnnotation.getRevisionDescriptions();
  if (ContainerUtil.isEmpty(fileRevisionList))   return null;
  final Map<VcsRevisionNumber,Color> commitOrderColors=new HashMap<>();
  final Map<VcsRevisionNumber,Color> commitAuthorColors=new HashMap<>();
  final Map<String,Color> authorColors=new HashMap<>();
  EditorColorsScheme colorScheme=editor.getColorsScheme();
  AnnotationsSettings settings=AnnotationsSettings.getInstance();
  List<Color> authorsColorPalette=settings.getAuthorsColors(colorScheme);
  List<Color> orderedColorPalette=settings.getOrderedColors(colorScheme);
  final int revisionsCount=fileRevisionList.size();
  for (int i=0; i < fileRevisionList.size(); i++) {
    VcsRevisionDescription revision=fileRevisionList.get(i);
    final VcsRevisionNumber number=revision.getRevisionNumber();
    final String author=revision.getAuthor();
    if (number == null)     continue;
    if (!commitAuthorColors.containsKey(number)) {
      if (author != null && !authorColors.containsKey(author)) {
        final int index=authorColors.size();
        Color color=authorsColorPalette.get(index % authorsColorPalette.size());
        authorColors.put(author,color);
      }
      commitAuthorColors.put(number,authorColors.get(author));
    }
    if (!commitOrderColors.containsKey(number)) {
      Color color=orderedColorPalette.get(orderedColorPalette.size() * i / revisionsCount);
      commitOrderColors.put(number,color);
    }
  }
  return Couple.of(commitOrderColors.size() > 1 ? commitOrderColors : null,commitAuthorColors.size() > 1 ? commitAuthorColors : null);
}
