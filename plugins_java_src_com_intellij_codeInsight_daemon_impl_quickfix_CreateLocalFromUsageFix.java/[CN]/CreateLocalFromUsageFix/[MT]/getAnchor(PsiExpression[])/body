{
  PsiElement parent=expressionOccurences[0];
  int minOffset=expressionOccurences[0].getTextRange().getStartOffset();
  for (int i=1; i < expressionOccurences.length; i++) {
    parent=PsiTreeUtil.findCommonParent(parent,expressionOccurences[i]);
    LOG.assertTrue(parent != null);
    minOffset=Math.min(minOffset,expressionOccurences[i].getTextRange().getStartOffset());
  }
  final PsiCodeBlock block=PsiTreeUtil.getParentOfType(parent,PsiCodeBlock.class,false);
  LOG.assertTrue(block != null && block.getStatements().length > 0,"block: " + block + "; parent: "+ parent);
  PsiStatement[] statements=block.getStatements();
  for (int i=1; i < statements.length; i++) {
    if (statements[i].getTextRange().getStartOffset() > minOffset)     return statements[i - 1];
  }
  return statements[statements.length - 1];
}
