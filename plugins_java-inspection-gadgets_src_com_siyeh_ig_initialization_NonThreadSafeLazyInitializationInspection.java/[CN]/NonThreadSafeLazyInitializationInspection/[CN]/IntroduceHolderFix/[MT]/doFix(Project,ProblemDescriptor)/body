{
  PsiReferenceExpression expression=(PsiReferenceExpression)descriptor.getPsiElement();
  PsiElement resolved=expression.resolve();
  if (!(resolved instanceof PsiField))   return;
  PsiField field=(PsiField)resolved;
  String holderName=suggestHolderName(field);
  @NonNls String text="private static class " + holderName + " {"+ "private static final "+ field.getType().getCanonicalText()+ " "+ field.getName()+ " = "+ ((PsiAssignmentExpression)expression.getParent()).getRExpression().getText()+ ";"+ "}";
  PsiElementFactory elementFactory=JavaPsiFacade.getInstance(field.getProject()).getElementFactory();
  PsiClass holder=elementFactory.createClassFromText(text,field).getInnerClasses()[0];
  PsiMethod method=PsiTreeUtil.getParentOfType(expression,PsiMethod.class);
  method.getParent().addBefore(holder,method);
  PsiIfStatement ifStatement=PsiTreeUtil.getParentOfType(expression,PsiIfStatement.class);
  ifStatement.delete();
  final PsiExpression holderReference=elementFactory.createExpressionFromText(holderName + "." + field.getName(),field);
  Collection<PsiReference> references=ReferencesSearch.search(field).findAll();
  for (  PsiReference reference : references) {
    PsiElement element=reference.getElement();
    element.replace(holderReference);
  }
  field.delete();
}
