{
  final VirtualFile vcsRoot=VcsUtil.getVcsRootFor(project,filePath);
  if (vcsRoot == null) {
    return null;
  }
  HgFile hgFile=new HgFile(vcsRoot,filePath);
  List<HgFileRevision> revisions=getHistory(filePath,vcsRoot,project,DEFAULT_LIMIT);
  final List<VcsFileRevision> result=new LinkedList<VcsFileRevision>(revisions);
  return new VcsHistorySession(){
    @Override public VcsRevisionNumber getCurrentRevisionNumber(){
      return new HgWorkingCopyRevisionsCommand(project).firstParent(vcsRoot);
    }
    @Override public HistoryAsTreeProvider getHistoryAsTreeProvider(){
      return null;
    }
    @Override public List<VcsFileRevision> getRevisionList(){
      return result;
    }
    @Override public boolean isCurrentRevision(    VcsRevisionNumber vcsRevisionNumber){
      return vcsRevisionNumber.equals(getCurrentRevisionNumber());
    }
    @Override public boolean shouldBeRefreshed(){
      return false;
    }
    @Override public boolean allowAsyncRefresh(){
      return false;
    }
    @Override public boolean isContentAvailable(    VcsFileRevision vcsFileRevision){
      return false;
    }
  }
;
}
