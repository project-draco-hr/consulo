{
  super.visitLambdaExpression(lambdaExpression);
  final PsiType functionalInterfaceType=lambdaExpression.getFunctionalInterfaceType();
  final PsiMethod scopeMethod=LambdaUtil.getFunctionalInterfaceMethod(functionalInterfaceType);
  if (scopeMethod != null) {
    visitMethodReturnType(scopeMethod,LambdaUtil.getFunctionalInterfaceReturnType(functionalInterfaceType),LambdaUtil.insertSemicolonAfter(lambdaExpression));
  }
}
