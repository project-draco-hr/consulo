{
  final PsiClass containingClass=method.getContainingClass();
  if (containingClass == null)   return null;
  if (className.equals(containingClass.getQualifiedName())) {
    return function.fun(containingClass);
  }
  final PsiType[] type={null};
  DeepestSuperMethodsSearch.search(method).forEach(new Processor<PsiMethod>(){
    @Override public boolean process(    PsiMethod psiMethod){
      final PsiClass rootClass=psiMethod.getContainingClass();
      if (className.equals(rootClass.getQualifiedName())) {
        type[0]=function.fun(rootClass);
        return false;
      }
      return true;
    }
  }
);
  return type[0];
}
