{
  PsiSubstitutor rightSubstitutor=rightResult.getSubstitutor();
  PsiClass leftClass=leftResult.getElement();
  PsiClass rightClass=rightResult.getElement();
  if (!leftClass.hasTypeParameters())   return true;
  PsiSubstitutor leftSubstitutor=leftResult.getSubstitutor();
  if (!leftClass.getManager().areElementsEquivalent(leftClass,rightClass)) {
    if (!allowUncheckedConversion && PsiUtil.isRawSubstitutor(leftClass,leftSubstitutor) && !rightClass.hasTypeParameters())     return false;
    rightSubstitutor=getSuperClassSubstitutor(leftClass,rightClass,rightSubstitutor);
    rightClass=leftClass;
  }
 else   if (!rightClass.hasTypeParameters())   return true;
  Iterator<PsiTypeParameter> li=PsiUtil.typeParametersIterator(leftClass);
  Iterator<PsiTypeParameter> ri=PsiUtil.typeParametersIterator(rightClass);
  while (li.hasNext()) {
    if (!ri.hasNext())     return false;
    PsiTypeParameter lp=li.next();
    PsiTypeParameter rp=ri.next();
    final PsiType typeLeft=leftSubstitutor.substitute(lp);
    if (typeLeft == null)     continue;
    final PsiType typeRight=rightSubstitutor.substituteWithBoundsPromotion(rp);
    if (typeRight == null) {
      return allowUncheckedConversion;
    }
    if (!typesAgree(typeLeft,typeRight,allowUncheckedConversion)) {
      if (allowUncheckedConversion && !(typeLeft instanceof PsiWildcardType) && typeRight instanceof PsiClassType&& ((PsiClassType)typeRight).isRaw())       continue;
      return false;
    }
  }
  return true;
}
