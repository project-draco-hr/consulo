{
  if (ltype == null || rtype == null)   return true;
  int resultTypeRank=BOOL_RANK;
  boolean isApplicable=false;
  final int ltypeRank=getTypeRank(ltype);
  final int rtypeRank=getTypeRank(rtype);
  Label:   if (tokenType == JavaTokenType.LT || tokenType == JavaTokenType.LE || tokenType == JavaTokenType.GT || tokenType == JavaTokenType.GE) {
    if (isPrimitiveAndNotNullOrWrapper(ltype) && isPrimitiveAndNotNullOrWrapper(rtype)) {
      isApplicable=ltypeRank <= MAX_NUMERIC_RANK && rtypeRank <= MAX_NUMERIC_RANK;
    }
  }
 else   if (tokenType == JavaTokenType.EQEQ || tokenType == JavaTokenType.NE) {
    if (isPrimitiveAndNotNullOrWrapper(ltype) && isPrimitiveAndNotNullOrWrapper(rtype) && (isPrimitiveAndNotNull(ltype) || isPrimitiveAndNotNull(rtype))) {
      isApplicable=ltypeRank <= MAX_NUMERIC_RANK && rtypeRank <= MAX_NUMERIC_RANK || ltypeRank == BOOL_RANK && rtypeRank == BOOL_RANK;
    }
 else {
      if (isPrimitiveAndNotNull(ltype) || isPrimitiveAndNotNull(rtype))       return false;
      isApplicable=areTypesConvertible(ltype,rtype) || areTypesConvertible(rtype,ltype);
    }
  }
 else   if (tokenType == JavaTokenType.PLUS) {
    if (ltype.equalsToText("java.lang.String")) {
      isApplicable=!isVoidType(rtype);
      resultTypeRank=STRING_RANK;
      break Label;
    }
 else     if (rtype.equalsToText("java.lang.String")) {
      isApplicable=!isVoidType(ltype);
      resultTypeRank=STRING_RANK;
      break Label;
    }
    if (isPrimitiveAndNotNullOrWrapper(ltype) && isPrimitiveAndNotNullOrWrapper(rtype)) {
      resultTypeRank=Math.max(ltypeRank,rtypeRank);
      isApplicable=ltypeRank <= MAX_NUMERIC_RANK && rtypeRank <= MAX_NUMERIC_RANK;
    }
  }
 else   if (tokenType == JavaTokenType.ASTERISK || tokenType == JavaTokenType.DIV || tokenType == JavaTokenType.PERC || tokenType == JavaTokenType.MINUS) {
    if (isPrimitiveAndNotNullOrWrapper(ltype) && isPrimitiveAndNotNullOrWrapper(rtype)) {
      resultTypeRank=Math.max(ltypeRank,rtypeRank);
      isApplicable=ltypeRank <= MAX_NUMERIC_RANK && rtypeRank <= MAX_NUMERIC_RANK;
    }
  }
 else   if (tokenType == JavaTokenType.LTLT || tokenType == JavaTokenType.GTGT || tokenType == JavaTokenType.GTGTGT) {
    if (isPrimitiveAndNotNullOrWrapper(ltype) && isPrimitiveAndNotNullOrWrapper(rtype)) {
      isApplicable=ltypeRank <= LONG_RANK && rtypeRank <= LONG_RANK;
      resultTypeRank=INT_RANK;
    }
  }
 else   if (tokenType == JavaTokenType.AND || tokenType == JavaTokenType.OR || tokenType == JavaTokenType.XOR) {
    if (isPrimitiveAndNotNullOrWrapper(ltype) && isPrimitiveAndNotNullOrWrapper(rtype)) {
      isApplicable=ltypeRank <= LONG_RANK && rtypeRank <= LONG_RANK || isBooleanType(ltype) && isBooleanType(rtype);
      resultTypeRank=ltypeRank <= LONG_RANK ? INT_RANK : BOOL_RANK;
    }
  }
 else   if (tokenType == JavaTokenType.ANDAND || tokenType == JavaTokenType.OROR) {
    if (isPrimitiveAndNotNullOrWrapper(ltype) && isPrimitiveAndNotNullOrWrapper(rtype)) {
      isApplicable=isBooleanType(ltype) && isBooleanType(rtype);
    }
  }
  if (isApplicable && strict) {
    if (resultTypeRank > MAX_NUMERIC_RANK) {
      isApplicable=ltypeRank == resultTypeRank || ltype.equalsToText(CommonClassNames.JAVA_LANG_OBJECT);
    }
 else {
      isApplicable=ltypeRank <= MAX_NUMERIC_RANK;
    }
  }
  return isApplicable;
}
