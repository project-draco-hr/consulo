{
  if (left == right || left.equals(right))   return true;
  if (isNullType(right)) {
    return !(left instanceof PsiPrimitiveType) || isNullType(left);
  }
  if (right instanceof PsiMethodReferenceType && left instanceof PsiClassType)   return true;
  if (right instanceof PsiLambdaExpressionType) {
    final PsiLambdaExpression rLambdaExpression=((PsiLambdaExpressionType)right).getExpression();
    if (left instanceof PsiClassType) {
      return LambdaUtil.isAcceptable(rLambdaExpression,left);
    }
    if (left instanceof PsiLambdaExpressionType) {
      final PsiLambdaExpression lLambdaExpression=((PsiLambdaExpressionType)left).getExpression();
      final PsiType rType=rLambdaExpression.getFunctionalInterfaceType();
      final PsiType lType=lLambdaExpression.getFunctionalInterfaceType();
      return Comparing.equal(rType,lType);
    }
  }
  if (left instanceof PsiIntersectionType) {
    PsiType[] conjuncts=((PsiIntersectionType)left).getConjuncts();
    for (    PsiType conjunct : conjuncts) {
      if (!isAssignable(conjunct,right,allowUncheckedConversion))       return false;
    }
    return true;
  }
  if (right instanceof PsiIntersectionType) {
    PsiType[] conjuncts=((PsiIntersectionType)right).getConjuncts();
    for (    PsiType conjunct : conjuncts) {
      if (isAssignable(left,conjunct,allowUncheckedConversion))       return true;
    }
    return false;
  }
  if (left instanceof PsiCapturedWildcardType) {
    return left.equals(right) || isAssignable(((PsiCapturedWildcardType)left).getLowerBound(),right,false);
  }
  if (right instanceof PsiCapturedWildcardType) {
    return isAssignable(left,((PsiCapturedWildcardType)right).getUpperBound(),allowUncheckedConversion);
  }
  if (left instanceof PsiWildcardType) {
    return isAssignableToWildcard((PsiWildcardType)left,right);
  }
  if (right instanceof PsiWildcardType) {
    return isAssignableFromWildcard(left,(PsiWildcardType)right);
  }
  if (right instanceof PsiArrayType) {
    if (!(left instanceof PsiArrayType)) {
      if (left instanceof PsiPrimitiveType || PsiUtil.resolveClassInType(left) == null)       return false;
      PsiClass lClass=PsiUtil.resolveClassInType(left);
      if (lClass == null)       return false;
      if (lClass.isInterface()) {
        final String qualifiedName=lClass.getQualifiedName();
        return "java.io.Serializable".equals(qualifiedName) || "java.lang.Cloneable".equals(qualifiedName);
      }
 else {
        return left.equalsToText(CommonClassNames.JAVA_LANG_OBJECT);
      }
    }
    PsiType lCompType=((PsiArrayType)left).getComponentType();
    PsiType rCompType=((PsiArrayType)right).getComponentType();
    if (lCompType instanceof PsiPrimitiveType) {
      return lCompType.equals(rCompType);
    }
 else {
      return !(rCompType instanceof PsiPrimitiveType) && isAssignable(lCompType,rCompType,allowUncheckedConversion);
    }
  }
  if (left instanceof PsiDisjunctionType) {
    for (    PsiType type : ((PsiDisjunctionType)left).getDisjunctions()) {
      if (isAssignable(type,right,allowUncheckedConversion))       return true;
    }
    return false;
  }
  if (right instanceof PsiDisjunctionType) {
    return isAssignable(left,((PsiDisjunctionType)right).getLeastUpperBound(),allowUncheckedConversion);
  }
  if (left instanceof PsiArrayType)   return false;
  if (right instanceof PsiPrimitiveType) {
    if (isVoidType(right))     return false;
    if (!(left instanceof PsiPrimitiveType)) {
      return left instanceof PsiClassType && isBoxable((PsiClassType)left,(PsiPrimitiveType)right);
    }
    int leftTypeIndex=TYPE_TO_RANK_MAP.get(left) - 1;
    int rightTypeIndex=TYPE_TO_RANK_MAP.get(right) - 1;
    return leftTypeIndex >= 0 && rightTypeIndex >= 0 && rightTypeIndex < IS_ASSIGNABLE_BIT_SET.length && leftTypeIndex < IS_ASSIGNABLE_BIT_SET.length && IS_ASSIGNABLE_BIT_SET[rightTypeIndex][leftTypeIndex];
  }
  if (!(right instanceof PsiClassType)) {
    return false;
  }
  if (left instanceof PsiPrimitiveType) {
    return isUnboxable((PsiPrimitiveType)left,(PsiClassType)right);
  }
  final PsiClassType.ClassResolveResult leftResult=PsiUtil.resolveGenericsClassInType(left);
  final PsiClassType.ClassResolveResult rightResult=PsiUtil.resolveGenericsClassInType(right);
  if (leftResult.getElement() == null || rightResult.getElement() == null) {
    if (leftResult.getElement() != rightResult.getElement())     return false;
    String lText=left.getPresentableText();
    String rText=right.getPresentableText();
    if (lText.equals(rText))     return true;
    if (lText.length() > rText.length() && lText.endsWith(rText) && lText.charAt(lText.length() - rText.length() - 1) == '.') {
      return true;
    }
    return rText.length() > lText.length() && rText.endsWith(lText) && rText.charAt(rText.length() - lText.length() - 1) == '.';
  }
  return isClassAssignable(leftResult,rightResult,allowUncheckedConversion);
}
