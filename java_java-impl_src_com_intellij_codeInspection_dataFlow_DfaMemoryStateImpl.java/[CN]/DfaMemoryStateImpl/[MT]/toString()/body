{
  StringBuffer result=new StringBuffer();
  result.append('<');
  for (int i=0; i < myEqClasses.size(); i++) {
    appendClass(result,i);
  }
  result.append(" distincts: ");
  List<String> distincs=new ArrayList<String>();
  long[] dclasses=myDistinctClasses.toArray();
  for (  long pair : dclasses) {
    StringBuffer one=new StringBuffer();
    one.append("{");
    appendClass(one,low(pair));
    one.append(", ");
    appendClass(one,high(pair));
    one.append("}");
    distincs.add(one.toString());
  }
  Collections.sort(distincs);
  result.append(StringUtil.join(distincs," "));
  result.append(" stack: ").append(StringUtil.join(myStack,","));
  result.append(" vars: ");
  for (  Map.Entry<DfaVariableValue,DfaVariableState> entry : myVariableStates.entrySet()) {
    result.append("[").append(entry.getKey()).append("->").append(entry.getValue()).append("]");
  }
  result.append('>');
  return result.toString();
}
