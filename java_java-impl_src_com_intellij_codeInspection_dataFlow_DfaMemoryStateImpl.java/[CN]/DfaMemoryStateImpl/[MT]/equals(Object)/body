{
  if (obj == this)   return true;
  if (!(obj instanceof DfaMemoryStateImpl))   return false;
  DfaMemoryStateImpl that=(DfaMemoryStateImpl)obj;
  if (myStateSize != that.myStateSize)   return false;
  if (myDistinctClasses.size() != that.myDistinctClasses.size())   return false;
  if (!myStack.equals(that.myStack))   return false;
  if (!myOffsetStack.equals(that.myOffsetStack))   return false;
  if (!myVariableStates.equals(that.myVariableStates))   return false;
  if (myHasDirtyFields != that.myHasDirtyFields)   return false;
  int[] permutation=getPermutationToSortedState();
  int[] thatPermutation=that.getPermutationToSortedState();
  for (int i=0; i < myStateSize; i++) {
    SortedIntSet thisClass=myEqClasses.get(permutation[i]);
    SortedIntSet thatClass=that.myEqClasses.get(thatPermutation[i]);
    if (thisClass == null)     break;
    if (thisClass.compareTo(thatClass) != 0)     return false;
  }
  long[] pairs=getSortedDistinctClasses(permutation);
  long[] thatPairs=that.getSortedDistinctClasses(thatPermutation);
  for (int i=0; i < pairs.length; i++) {
    if (pairs[i] != thatPairs[i]) {
      return false;
    }
  }
  return true;
}
