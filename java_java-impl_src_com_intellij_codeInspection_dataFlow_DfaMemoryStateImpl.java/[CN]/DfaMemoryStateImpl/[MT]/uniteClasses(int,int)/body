{
  SortedIntSet c1=myEqClasses.get(c1Index);
  SortedIntSet c2=myEqClasses.get(c2Index);
  Set<PsiVariable> vars=new THashSet<PsiVariable>();
  Set<PsiVariable> negatedvars=new THashSet<PsiVariable>();
  int[] cs=new int[c1.size() + c2.size()];
  c1.set(0,cs,0,c1.size());
  c2.set(0,cs,c1.size(),c2.size());
  int nConst=0;
  for (  int c : cs) {
    DfaValue dfaValue=myFactory.getValue(c);
    if (dfaValue instanceof DfaBoxedValue)     dfaValue=((DfaBoxedValue)dfaValue).getWrappedValue();
    if (dfaValue instanceof DfaUnboxedValue)     dfaValue=((DfaUnboxedValue)dfaValue).getVariable();
    if (dfaValue instanceof DfaConstValue)     nConst++;
    if (dfaValue instanceof DfaVariableValue) {
      DfaVariableValue variableValue=(DfaVariableValue)dfaValue;
      PsiVariable variable=variableValue.getPsiVariable();
      Set<PsiVariable> set=variableValue.isNegated() ? negatedvars : vars;
      set.add(variable);
    }
    if (nConst > 1)     return false;
  }
  if (ContainerUtil.intersects(vars,negatedvars))   return false;
  TLongArrayList c2Pairs=new TLongArrayList();
  long[] distincts=myDistinctClasses.toArray();
  for (  long distinct : distincts) {
    int pc1=low(distinct);
    int pc2=high(distinct);
    boolean addedToC1=false;
    if (pc1 == c1Index || pc2 == c1Index) {
      addedToC1=true;
    }
    if (pc1 == c2Index || pc2 == c2Index) {
      if (addedToC1)       return false;
      c2Pairs.add(distinct);
    }
  }
  c1.add(c2.toNativeArray());
  long[] c2Array=c2Pairs.toNativeArray();
  myDistinctClasses.removeAll(c2Array);
  myEqClasses.set(c2Index,null);
  myStateSize--;
  for (  long l : c2Array) {
    myDistinctClasses.add(createPair(c1Index,low(l) == c2Index ? high(l) : low(l)));
  }
  return true;
}
