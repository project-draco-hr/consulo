{
  if (!(root instanceof CompositeElement))   return;
  CompositeElement node=(CompositeElement)root;
  if (node.rawFirstChild() == null) {
    if (node.rawLastChild() != null) {
      throw new IncorrectTreeStructureException(node,"firstChild == null, but lastChild != null");
    }
  }
 else {
    Set<ASTNode> children=new HashSet<ASTNode>();
    for (ASTNode child=node.rawFirstChild(); child != null; child=child.getTreeNext()) {
      if (children.contains(child)) {
        throw new IncorrectTreeStructureException(child,"Looping in next siblings");
      }
      children.add(child);
      checkChild(node,child);
    }
    Set<ASTNode> prevs=new HashSet<ASTNode>();
    for (ASTNode child=node.rawLastChild(); child != null; child=child.getTreePrev()) {
      if (prevs.contains(child)) {
        throw new IncorrectTreeStructureException(child,"Looping in prev siblings");
      }
      if (!children.contains(child)) {
        throw new IncorrectTreeStructureException(child,"There's prev, which is not in nexts");
      }
      children.remove(child);
      prevs.add(child);
    }
    if (!children.isEmpty()) {
      throw new IncorrectTreeStructureException(children.iterator().next(),"There's next, which is not in prevs");
    }
  }
}
