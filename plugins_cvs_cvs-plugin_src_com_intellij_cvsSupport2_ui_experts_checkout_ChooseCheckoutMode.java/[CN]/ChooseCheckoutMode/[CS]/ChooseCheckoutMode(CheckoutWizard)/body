{
  super("###",wizard);
  myWizard=wizard;
  myCheckoutModeList.setCellRenderer(new ColoredListCellRenderer(){
    @Override protected void customizeCellRenderer(    JList list,    Object value,    int index,    boolean selected,    boolean hasFocus){
      final CheckoutStrategy checkoutStrategy=(CheckoutStrategy)value;
      append(checkoutStrategy.getResult().getAbsolutePath(),new SimpleTextAttributes(Font.PLAIN,list.getForeground()));
      setIcon(FOLDER_ICON);
    }
  }
);
  myCheckoutModeList.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      myWizard.updateStep();
    }
  }
);
  myCheckoutModeList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  final CvsApplicationLevelConfiguration config=CvsApplicationLevelConfiguration.getInstance();
  myMakeNewFilesReadOnly.setSelected(config.MAKE_CHECKED_OUT_FILES_READONLY);
  myPruneEmptyDirectories.setSelected(config.CHECKOUT_PRUNE_EMPTY_DIRECTORIES);
  myChangeKeywordSubstitutionPanel=new ChangeKeywordSubstitutionPanel(KeywordSubstitution.getValue(config.CHECKOUT_KEYWORD_SUBSTITUTION));
  myCenterPanel.add(LIST,ScrollPaneFactory.createScrollPane(myCheckoutModeList));
  final JPanel messagePanel=new JPanel(new BorderLayout(2,4));
  messagePanel.add(myMessage,BorderLayout.NORTH);
  messagePanel.setBackground(UIUtil.getTableBackground());
  myMessage.setBackground(UIUtil.getTableBackground());
  myCenterPanel.add(MESSAGE,ScrollPaneFactory.createScrollPane(messagePanel));
  init();
}
