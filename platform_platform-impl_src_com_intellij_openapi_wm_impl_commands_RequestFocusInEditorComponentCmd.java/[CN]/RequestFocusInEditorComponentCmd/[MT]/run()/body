{
  try {
    if (myTimestamp.isExpired()) {
      final Component owner=KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();
      if (owner != null && owner == myComponent) {
        myDoneCallback.setDone();
      }
 else {
        myDoneCallback.setRejected();
      }
    }
    final Window owner=myComponent != null ? SwingUtilities.getWindowAncestor(myComponent) : null;
    if (owner == null) {
      myDoneCallback.setRejected();
      return;
    }
    final Window activeFrame=IdeFrameImpl.getActiveFrame();
    if (activeFrame != null && owner instanceof IdeFrameImpl && activeFrame != owner) {
      myDoneCallback.setRejected();
      return;
    }
    if (myComponent != null) {
      final boolean forced=KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner() == null;
      myFocusManager.requestFocus(myComponent,myForced || forced).notifyWhenDone(myDoneCallback).doWhenDone(new Runnable(){
        @Override public void run(){
          if (SystemInfo.isLinux && Registry.is("suppress.focus.stealing"))           return;
          if (!owner.isActive()) {
            final Window activeWindow=getActiveWindow(owner.getOwnedWindows());
            if (activeWindow == null || (activeWindow instanceof FloatingDecorator)) {
              owner.toFront();
            }
          }
        }
      }
);
    }
 else {
      myDoneCallback.setRejected();
    }
  }
  finally {
    finish();
  }
}
