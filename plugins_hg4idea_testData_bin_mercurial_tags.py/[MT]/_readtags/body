def _readtags(ui, repo, lines, fn, recode=None):
    'Read tag definitions from a file (or any source of lines).\n    Return a mapping from tag name to (node, hist): node is the node id\n    from the last line read for that name, and hist is the list of node\n    ids previously associated with it (in file order).  All node ids are\n    binary, not hex.'
    filetags = {}
    count = 0

    def warn(msg):
        ui.warn((_('%s, line %s: %s\n') % (fn, count, msg)))
    for line in lines:
        count += 1
        if (not line):
            continue
        try:
            (nodehex, name) = line.split(' ', 1)
        except ValueError:
            warn(_('cannot parse entry'))
            continue
        name = name.strip()
        if recode:
            name = recode(name)
        try:
            nodebin = bin(nodehex)
        except TypeError:
            warn((_("node '%s' is not well formed") % nodehex))
            continue
        if (nodebin not in repo.changelog.nodemap):
            continue
        hist = []
        if (name in filetags):
            (n, hist) = filetags[name]
            hist.append(n)
        filetags[name] = (nodebin, hist)
    return filetags
