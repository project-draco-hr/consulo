def findglobaltags2(ui, repo, alltags, tagtypes):
    'Same as findglobaltags1(), but with caching.'
    assert (len(alltags) == len(tagtypes) == 0), 'findglobaltags() should be called first'
    (heads, tagfnode, cachetags, shouldwrite) = _readtagcache(ui, repo)
    if (cachetags is not None):
        assert (not shouldwrite)
        _updatetags(cachetags, 'global', alltags, tagtypes)
        return
    _debug(ui, ('reading tags from %d head(s): %s\n' % (len(heads), map(short, reversed(heads)))))
    seen = set()
    fctx = None
    for head in reversed(heads):
        assert (head in repo.changelog.nodemap), ('tag cache returned bogus head %s' % short(head))
        fnode = tagfnode.get(head)
        if (fnode and (fnode not in seen)):
            seen.add(fnode)
            if (not fctx):
                fctx = repo.filectx('.hgtags', fileid=fnode)
            else:
                fctx = fctx.filectx(fnode)
            filetags = _readtags(ui, repo, fctx.data().splitlines(), fctx)
            _updatetags(filetags, 'global', alltags, tagtypes)
    if shouldwrite:
        _writetagcache(ui, repo, heads, tagfnode, alltags)
