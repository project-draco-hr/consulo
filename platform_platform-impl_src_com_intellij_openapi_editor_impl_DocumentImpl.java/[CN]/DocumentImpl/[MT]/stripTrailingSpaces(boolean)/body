{
  if (!isStripTrailingSpacesEnabled) {
    return true;
  }
  DataContext dataContext=DataManager.getInstance().getDataContext(IdeFocusManager.getGlobalInstance().getFocusOwner());
  Editor activeEditor=PlatformDataKeys.EDITOR.getData(dataContext);
  boolean isVirtualSpaceEnabled=activeEditor == null || activeEditor.getSettings().isVirtualSpace();
  VisualPosition visualCaret=activeEditor == null ? null : activeEditor.getCaretModel().getVisualPosition();
  int caretLine=activeEditor == null ? -1 : activeEditor.getCaretModel().getLogicalPosition().line;
  int caretOffset=activeEditor == null ? -1 : activeEditor.getCaretModel().getOffset();
  boolean markAsNeedsStrippingLater=false;
  CharSequence text=myText.getCharArray();
  for (int line=0; line < myLineSet.getLineCount(); line++) {
    if (inChangedLinesOnly && !myLineSet.isModified(line))     continue;
    int whiteSpaceStart=-1;
    final int lineEnd=myLineSet.getLineEnd(line) - myLineSet.getSeparatorLength(line);
    int lineStart=myLineSet.getLineStart(line);
    for (int offset=lineEnd - 1; offset >= lineStart; offset--) {
      char c=text.charAt(offset);
      if (c != ' ' && c != '\t') {
        break;
      }
      whiteSpaceStart=offset;
    }
    if (whiteSpaceStart == -1)     continue;
    if (!isVirtualSpaceEnabled && caretLine == line && whiteSpaceStart < caretOffset) {
      markAsNeedsStrippingLater=true;
    }
 else {
      final int finalStart=whiteSpaceStart;
      ApplicationManager.getApplication().runWriteAction(new DocumentRunnable(this,activeEditor == null ? null : activeEditor.getProject()){
        public void run(){
          CommandProcessor.getInstance().runUndoTransparentAction(new Runnable(){
            public void run(){
              deleteString(finalStart,lineEnd);
            }
          }
);
        }
      }
);
      text=myText.getCharArray();
    }
  }
  if (!ShutDownTracker.isShutdownHookRunning() && activeEditor != null) {
    activeEditor.getCaretModel().moveToVisualPosition(visualCaret);
  }
  return !markAsNeedsStrippingLater;
}
