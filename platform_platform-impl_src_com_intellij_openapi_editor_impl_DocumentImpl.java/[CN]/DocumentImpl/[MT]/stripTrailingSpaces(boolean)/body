{
  if (!isStripTrailingSpacesEnabled) {
    return true;
  }
  Editor editor=ContainerUtil.find(EditorFactory.getInstance().getEditors(this),new Condition<Editor>(){
    @Override public boolean value(    Editor editor){
      return ((EditorEx)editor).isCaretActive();
    }
  }
);
  boolean isVirtualSpaceEnabled=editor == null || editor.getSettings().isVirtualSpace();
  VisualPosition visualCaret=editor == null ? null : editor.getCaretModel().getVisualPosition();
  int caretLine=editor == null ? -1 : editor.getCaretModel().getLogicalPosition().line;
  boolean isTestMode=ApplicationManager.getApplication().isUnitTestMode();
  boolean markAsNeedsStrippingLater=false;
  for (int line=0; line < myLineSet.getLineCount(); line++) {
    if (inChangedLinesOnly && !myLineSet.isModified(line))     continue;
    int start=-1;
    int lineEnd=myLineSet.getLineEnd(line) - myLineSet.getSeparatorLength(line);
    int lineStart=myLineSet.getLineStart(line);
    CharSequence text=myText.getCharArray();
    for (int offset=lineEnd - 1; offset >= lineStart; offset--) {
      char c=text.charAt(offset);
      if (c != ' ' && c != '\t') {
        break;
      }
      start=offset;
    }
    if (start == -1)     continue;
    if (!isTestMode && !isVirtualSpaceEnabled && caretLine == line) {
      markAsNeedsStrippingLater=true;
    }
 else {
      deleteString(start,lineEnd);
    }
  }
  if (!ShutDownTracker.isShutdownHookRunning() && editor != null) {
    editor.getCaretModel().moveToVisualPosition(visualCaret);
  }
  return !markAsNeedsStrippingLater;
}
