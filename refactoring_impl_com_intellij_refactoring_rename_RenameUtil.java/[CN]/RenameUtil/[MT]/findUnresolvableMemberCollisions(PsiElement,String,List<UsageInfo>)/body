{
  PsiManager manager=element.getManager();
  final PsiSearchHelper helper=manager.getSearchHelper();
  if (element instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)element;
    final PsiClass containingClass=method.getContainingClass();
    if (containingClass == null)     return;
    if (method.hasModifierProperty(PsiModifier.PRIVATE))     return;
    Collection<PsiClass> inheritors=ClassInheritorsSearch.search(containingClass,containingClass.getUseScope(),true).findAll();
    MethodSignature oldSignature=method.getSignature(PsiSubstitutor.EMPTY);
    MethodSignature newSignature=MethodSignatureUtil.createMethodSignature(newName,oldSignature.getParameterTypes(),oldSignature.getTypeParameters(),oldSignature.getSubstitutor());
    for (    PsiClass inheritor : inheritors) {
      PsiSubstitutor superSubstitutor=TypeConversionUtil.getSuperClassSubstitutor(containingClass,inheritor,PsiSubstitutor.EMPTY);
      final PsiMethod[] methodsByName=inheritor.findMethodsByName(newName,false);
      for (      PsiMethod conflictingMethod : methodsByName) {
        if (newSignature.equals(conflictingMethod.getSignature(superSubstitutor))) {
          result.add(new SubmemberHidesMemberUsageInfo(conflictingMethod,method));
          break;
        }
      }
    }
  }
 else   if (element instanceof PsiField) {
    final PsiField field=(PsiField)element;
    if (field.getContainingClass() == null)     return;
    if (field.hasModifierProperty(PsiModifier.PRIVATE))     return;
    final PsiClass containingClass=field.getContainingClass();
    Collection<PsiClass> inheritors=ClassInheritorsSearch.search(containingClass,containingClass.getUseScope(),true).findAll();
    for (    PsiClass inheritor : inheritors) {
      PsiField conflictingField=inheritor.findFieldByName(newName,false);
      if (conflictingField != null) {
        result.add(new SubmemberHidesMemberUsageInfo(conflictingField,field));
      }
    }
  }
 else   if (element instanceof PsiClass) {
    final PsiClass aClass=(PsiClass)element;
    if (aClass.getParent() instanceof PsiClass) {
      PsiClass parent=(PsiClass)aClass.getParent();
      Collection<PsiClass> inheritors=ClassInheritorsSearch.search(parent,parent.getUseScope(),true).findAll();
      for (      PsiClass inheritor : inheritors) {
        PsiClass[] inners=inheritor.getInnerClasses();
        for (        PsiClass inner : inners) {
          if (newName.equals(inner.getName())) {
            result.add(new SubmemberHidesMemberUsageInfo(inner,aClass));
          }
        }
      }
    }
  }
}
