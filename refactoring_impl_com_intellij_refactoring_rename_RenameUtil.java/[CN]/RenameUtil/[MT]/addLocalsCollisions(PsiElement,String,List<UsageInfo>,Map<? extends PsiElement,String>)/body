{
  if (!(element instanceof PsiLocalVariable) && !(element instanceof PsiParameter))   return;
  PsiClass containingClass=PsiTreeUtil.getParentOfType(element,PsiClass.class);
  if (containingClass == null)   return;
  PsiElement scopeElement;
  if (element instanceof PsiLocalVariable) {
    scopeElement=RefactoringUtil.getVariableScope((PsiLocalVariable)element);
  }
 else {
    scopeElement=((PsiParameter)element).getDeclarationScope();
  }
  LOG.assertTrue(scopeElement != null);
  final LocalSearchScope scope=new LocalSearchScope((scopeElement));
  scopeElement.accept(new PsiRecursiveElementVisitor(){
    public void visitClass(    PsiClass aClass){
      addLocalCollsionsInClass(aClass,newName,allRenames,scope,results,element);
    }
  }
);
  addLocalCollsionsInClass(containingClass,newName,allRenames,scope,results,element);
}
