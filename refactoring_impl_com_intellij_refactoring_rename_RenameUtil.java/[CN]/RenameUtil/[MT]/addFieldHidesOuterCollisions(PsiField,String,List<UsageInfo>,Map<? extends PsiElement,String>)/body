{
  final PsiClass fieldClass=field.getContainingClass();
  for (PsiClass aClass=fieldClass.getContainingClass(); aClass != null; aClass=aClass.getContainingClass()) {
    final PsiField conflict=aClass.findFieldByName(newName,false);
    if (conflict == null)     continue;
    ReferencesSearch.search(conflict).forEach(new Processor<PsiReference>(){
      public boolean process(      final PsiReference reference){
        PsiElement refElement=reference.getElement();
        if (refElement instanceof PsiReferenceExpression && ((PsiReferenceExpression)refElement).isQualified())         return true;
        if (PsiTreeUtil.isAncestor(fieldClass,refElement,false)) {
          FieldHidesOuterFieldUsageInfo info=new FieldHidesOuterFieldUsageInfo(refElement,field);
          result.add(info);
        }
        return true;
      }
    }
);
  }
}
