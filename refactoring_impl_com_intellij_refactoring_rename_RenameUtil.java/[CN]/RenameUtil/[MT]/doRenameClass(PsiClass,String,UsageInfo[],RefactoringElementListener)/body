{
  ArrayList<UsageInfo> postponedCollisions=new ArrayList<UsageInfo>();
  for (  final UsageInfo usage : usages) {
    if (!(usage instanceof ResolvableCollisionUsageInfo)) {
      rename(usage,newName);
    }
 else {
      if (usage instanceof CollidingClassImportUsageInfo) {
        ((CollidingClassImportUsageInfo)usage).getImportStatement().delete();
      }
 else {
        postponedCollisions.add(usage);
      }
    }
  }
  ChangeContextUtil.encodeContextInfo(aClass,true);
  PsiFile psiFile=aClass.getContainingFile();
  Document document=psiFile == null ? null : PsiDocumentManager.getInstance(aClass.getProject()).getDocument(psiFile);
  aClass.setName(newName);
  ChangeContextUtil.decodeContextInfo(aClass,null,null);
  for (  UsageInfo postponedCollision : postponedCollisions) {
    ClassHidesImportedClassUsageInfo collision=(ClassHidesImportedClassUsageInfo)postponedCollision;
    collision.resolveCollision();
  }
  listener.elementRenamed(aClass);
  if (document != null) {
    ((DocumentEx)document).setModificationStamp(psiFile.getModificationStamp());
  }
}
