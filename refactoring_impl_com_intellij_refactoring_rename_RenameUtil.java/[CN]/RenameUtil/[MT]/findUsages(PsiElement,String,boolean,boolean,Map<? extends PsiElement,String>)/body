{
  final List<UsageInfo> result=new ArrayList<UsageInfo>();
  PsiManager manager=element.getManager();
  PsiSearchHelper helper=manager.getSearchHelper();
  GlobalSearchScope projectScope=GlobalSearchScope.projectScope(manager.getProject());
  if (element instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)element;
    PsiReference[] refs=helper.findReferencesIncludingOverriding(method,projectScope,true);
    for (    PsiReference ref : refs) {
      result.add(new MoveRenameUsageInfo(ref.getElement(),ref,element));
    }
    PsiElement[] overridings=helper.findOverridingMethods(method,projectScope,true);
    for (    PsiElement overriding : overridings) {
      result.add(new MoveRenameUsageInfo(overriding,null,element));
    }
  }
 else {
    Collection<PsiReference> refs=ReferencesSearch.search(element).findAll();
    final ClassCollisionsDetector classCollisionsDetector;
    if (element instanceof PsiClass) {
      classCollisionsDetector=new ClassCollisionsDetector((PsiClass)element);
    }
 else {
      classCollisionsDetector=null;
    }
    for (    PsiReference ref : refs) {
      PsiElement referenceElement=ref.getElement();
      result.add(new MoveRenameUsageInfo(referenceElement,ref,ref.getRangeInElement().getStartOffset(),ref.getRangeInElement().getEndOffset(),element,referenceElement instanceof XmlElement));
      if (element instanceof PsiClass) {
        classCollisionsDetector.addClassCollisions(referenceElement,newName,result);
      }
    }
    if (element instanceof PsiVariable) {
      addLocalsCollisions(element,newName,result,allRenames);
    }
  }
  RenameUtil.findUnresolvableLocalsCollisions(element,newName,result);
  RenameUtil.findUnresolvableMemberCollisions(element,newName,result);
  if (searchInStringsAndComments && !(element instanceof PsiDirectory)) {
    String stringToSearch=RefactoringUtil.getStringToSearch(element,false);
    if (stringToSearch != null) {
      final String stringToReplace=getStringToReplace(element,newName,false);
      RefactoringUtil.UsageInfoFactory factory=new RefactoringUtil.UsageInfoFactory(){
        public UsageInfo createUsageInfo(        PsiElement usage,        int startOffset,        int endOffset){
          int start=usage.getTextRange().getStartOffset();
          return NonCodeUsageInfo.create(usage.getContainingFile(),start + startOffset,start + endOffset,element,stringToReplace);
        }
      }
;
      RefactoringUtil.addUsagesInStringsAndComments(element,stringToSearch,result,factory);
    }
  }
  if (searchForTextOccurences && !(element instanceof PsiDirectory)) {
    String stringToSearch=RefactoringUtil.getStringToSearch(element,true);
    if (stringToSearch != null) {
      final String stringToReplace=getStringToReplace(element,newName,true);
      RefactoringUtil.UsageInfoFactory factory=new RefactoringUtil.UsageInfoFactory(){
        public UsageInfo createUsageInfo(        PsiElement usage,        int startOffset,        int endOffset){
          int start=usage.getTextRange().getStartOffset();
          return NonCodeUsageInfo.create(usage.getContainingFile(),start + startOffset,start + endOffset,element,stringToReplace);
        }
      }
;
      RefactoringUtil.addTextOccurences(element,stringToSearch,projectScope,result,factory);
      if (element instanceof PsiClass) {
        final PsiClass aClass=(PsiClass)element;
        if (aClass.getParent() instanceof PsiClass) {
          final String dollaredStringToSearch=RefactoringUtil.getInnerClassNameForClassLoader(aClass);
          final String dollaredStringToReplace=RefactoringUtil.getNewInnerClassName(aClass,dollaredStringToSearch,newName);
          RefactoringUtil.UsageInfoFactory dollaredFactory=new RefactoringUtil.UsageInfoFactory(){
            public UsageInfo createUsageInfo(            PsiElement usage,            int startOffset,            int endOffset){
              int start=usage.getTextRange().getStartOffset();
              return NonCodeUsageInfo.create(usage.getContainingFile(),start + startOffset,start + endOffset,element,dollaredStringToReplace);
            }
          }
;
          RefactoringUtil.addTextOccurences(aClass,dollaredStringToSearch,projectScope,result,dollaredFactory);
        }
      }
    }
  }
  return result.toArray(new UsageInfo[result.size()]);
}
