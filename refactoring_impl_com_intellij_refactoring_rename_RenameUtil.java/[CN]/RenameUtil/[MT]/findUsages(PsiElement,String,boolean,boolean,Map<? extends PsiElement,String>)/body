{
  final List<UsageInfo> result=new ArrayList<UsageInfo>();
  PsiManager manager=element.getManager();
  GlobalSearchScope projectScope=GlobalSearchScope.projectScope(manager.getProject());
  if (element instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)element;
    PsiReference[] refs=MethodReferencesSearch.search(method,projectScope,true).toArray(PsiReference.EMPTY_ARRAY);
    for (    PsiReference ref : refs) {
      result.add(new MoveRenameUsageInfo(ref.getElement(),ref,element));
    }
  }
 else {
    Collection<PsiReference> refs=ReferencesSearch.search(element).findAll();
    for (    PsiReference ref : refs) {
      PsiElement referenceElement=ref.getElement();
      result.add(new MoveRenameUsageInfo(referenceElement,ref,ref.getRangeInElement().getStartOffset(),ref.getRangeInElement().getEndOffset(),element,false));
    }
  }
  for (  RenameCollisionDetector collisionDetector : Extensions.getExtensions(RenameCollisionDetector.EP_NAME)) {
    collisionDetector.findCollisions(element,newName,allRenames,result);
  }
  if (searchInStringsAndComments && !(element instanceof PsiDirectory)) {
    String stringToSearch=ElementDescriptionUtil.getElementDescription(element,false ? NonCodeSearchDescriptionLocation.NON_JAVA : NonCodeSearchDescriptionLocation.STRINGS_AND_COMMENTS);
    if (stringToSearch != null) {
      final String stringToReplace=getStringToReplace(element,newName,false);
      TextOccurrencesUtil.UsageInfoFactory factory=new NonCodeUsageInfoFactory(element,stringToReplace);
      TextOccurrencesUtil.addUsagesInStringsAndComments(element,stringToSearch,result,factory);
    }
  }
  if (searchForTextOccurences && !(element instanceof PsiDirectory)) {
    String stringToSearch=ElementDescriptionUtil.getElementDescription(element,true ? NonCodeSearchDescriptionLocation.NON_JAVA : NonCodeSearchDescriptionLocation.STRINGS_AND_COMMENTS);
    if (stringToSearch != null) {
      final String stringToReplace=getStringToReplace(element,newName,true);
      addTextOccurence(element,result,projectScope,stringToSearch,stringToReplace);
      if (element instanceof PsiClass) {
        final PsiClass aClass=(PsiClass)element;
        if (aClass.getParent() instanceof PsiClass) {
          final String dollaredStringToSearch=ClassUtil.getJVMClassName(aClass);
          final String dollaredStringToReplace=dollaredStringToSearch == null ? null : RefactoringUtil.getNewInnerClassName(aClass,dollaredStringToSearch,newName);
          if (dollaredStringToReplace != null) {
            addTextOccurence(aClass,result,projectScope,dollaredStringToSearch,dollaredStringToReplace);
          }
        }
      }
    }
  }
  return result.toArray(new UsageInfo[result.size()]);
}
