{
  final List<UsageInfo> result=new ArrayList<UsageInfo>();
  PsiManager manager=element.getManager();
  PsiSearchHelper helper=manager.getSearchHelper();
  GlobalSearchScope projectScope=GlobalSearchScope.projectScope(manager.getProject());
  if (element instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)element;
    PsiReference[] refs=helper.findReferencesIncludingOverriding(method,projectScope,true);
    for (    PsiReference ref : refs) {
      result.add(new MoveRenameUsageInfo(ref.getElement(),ref,element));
    }
  }
 else {
    Collection<PsiReference> refs=ReferencesSearch.search(element).findAll();
    final ClassCollisionsDetector classCollisionsDetector;
    if (element instanceof PsiClass) {
      classCollisionsDetector=new ClassCollisionsDetector((PsiClass)element);
    }
 else {
      classCollisionsDetector=null;
    }
    for (    PsiReference ref : refs) {
      PsiElement referenceElement=ref.getElement();
      result.add(new MoveRenameUsageInfo(referenceElement,ref,ref.getRangeInElement().getStartOffset(),ref.getRangeInElement().getEndOffset(),element,false));
      if (element instanceof PsiClass) {
        classCollisionsDetector.addClassCollisions(referenceElement,newName,result);
      }
    }
    if (element instanceof PsiVariable) {
      addLocalsCollisions(element,newName,result,allRenames);
      if (element instanceof PsiField) {
        addFieldHidesOuterCollisions((PsiField)element,newName,result);
      }
    }
  }
  findUnresolvableLocalsCollisions(element,newName,result);
  findUnresolvableMemberCollisions(element,newName,result);
  if (searchInStringsAndComments && !(element instanceof PsiDirectory)) {
    String stringToSearch=RefactoringUtil.getStringToSearch(element,false);
    if (stringToSearch != null) {
      final String stringToReplace=getStringToReplace(element,newName,false);
      RefactoringUtil.UsageInfoFactory factory=new NonCodeUsageInfoFactory(element,stringToReplace);
      RefactoringUtil.addUsagesInStringsAndComments(element,stringToSearch,result,factory);
    }
  }
  if (searchForTextOccurences && !(element instanceof PsiDirectory)) {
    String stringToSearch=RefactoringUtil.getStringToSearch(element,true);
    if (stringToSearch != null) {
      final String stringToReplace=getStringToReplace(element,newName,true);
      addTextOccurence(element,result,projectScope,stringToSearch,stringToReplace);
      if (element instanceof PsiClass) {
        final PsiClass aClass=(PsiClass)element;
        if (aClass.getParent() instanceof PsiClass) {
          final String dollaredStringToSearch=RefactoringUtil.getInnerClassNameForClassLoader(aClass);
          final String dollaredStringToReplace=dollaredStringToSearch == null ? null : RefactoringUtil.getNewInnerClassName(aClass,dollaredStringToSearch,newName);
          if (dollaredStringToReplace != null) {
            addTextOccurence(aClass,result,projectScope,dollaredStringToSearch,dollaredStringToReplace);
          }
        }
      }
    }
  }
  return result.toArray(new UsageInfo[result.size()]);
}
