{
  final PsiResolveHelper resolveHelper=referenceElement.getManager().getResolveHelper();
  final PsiClass aClass=resolveHelper.resolveReferencedClass(newName,referenceElement);
  if (aClass == null)   return;
  final PsiFile containingFile=referenceElement.getContainingFile();
  final String text=referenceElement.getText();
  if (Comparing.equal(myRenamedClassQualifiedName,removeSpaces(text)))   return;
  if (myProcessedFiles.contains(containingFile))   return;
  final Collection<PsiReference> references=ReferencesSearch.search(aClass,new LocalSearchScope(containingFile)).findAll();
  for (  PsiReference reference : references) {
    final PsiElement collisionReferenceElement=reference.getElement();
    if (collisionReferenceElement instanceof PsiJavaCodeReferenceElement) {
      final PsiElement parent=collisionReferenceElement.getParent();
      if (parent instanceof PsiImportStatement) {
        results.add(new CollidingClassImportUsageInfo((PsiImportStatement)parent,myRenamedClass));
      }
 else {
        if (aClass.getQualifiedName() != null) {
          results.add(new ClassHidesImportedClassUsageInfo((PsiJavaCodeReferenceElement)collisionReferenceElement,myRenamedClass,aClass));
        }
 else {
          results.add(new ClassHidesUnqualifiableClassUsageInfo((PsiJavaCodeReferenceElement)collisionReferenceElement,myRenamedClass,aClass));
        }
      }
    }
  }
  myProcessedFiles.add(containingFile);
}
