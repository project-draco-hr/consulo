def _findlimit(repo, a, b):
    "Find the earliest revision that's an ancestor of a or b but not both,\n    None if no such revision exists.\n    "
    cl = repo.changelog
    working = len(cl)
    if (a is None):
        a = working
    if (b is None):
        b = working
    side = {a: (-1), b: 1, }
    visit = [(- a), (- b)]
    heapq.heapify(visit)
    interesting = len(visit)
    hascommonancestor = False
    limit = working
    while interesting:
        r = (- heapq.heappop(visit))
        if (r == working):
            parents = [cl.rev(p) for p in repo.dirstate.parents()]
        else:
            parents = cl.parentrevs(r)
        for p in parents:
            if (p < 0):
                continue
            if (p not in side):
                side[p] = side[r]
                if side[p]:
                    interesting += 1
                heapq.heappush(visit, (- p))
            elif (side[p] and (side[p] != side[r])):
                side[p] = 0
                interesting -= 1
                hascommonancestor = True
        if side[r]:
            limit = r
            interesting -= 1
    if (not hascommonancestor):
        return None
    return limit
