{
  final XmlTag xmlTag=(XmlTag)getParent();
  if (displayOffset == 0)   return this;
  final int length=getValue().length();
  if (displayOffset >= length) {
    return null;
  }
  final PomModel model=PomManager.getModel(xmlTag.getProject());
  final XmlAspect aspect=model.getModelAspect(XmlAspect.class);
class MyTransaction extends PomTransactionBase {
    private XmlTextImpl myRight;
    public MyTransaction(){
      super(xmlTag,aspect);
    }
    @Nullable public PomModelEvent runInner() throws IncorrectOperationException {
      final String oldText=getValue();
      final int physicalOffset=displayToPhysical(displayOffset);
      PsiElement childElement=findElementAt(physicalOffset);
      if (childElement != null && childElement.getNode().getElementType() == XmlTokenType.XML_DATA_CHARACTERS) {
        FileElement holder=com.intellij.psi.impl.source.DummyHolderFactory.createHolder(getManager(),null).getTreeElement();
        int splitOffset=physicalOffset - childElement.getStartOffsetInParent();
        myRight=(XmlTextImpl)ASTFactory.composite(XmlElementType.XML_TEXT);
        CodeEditUtil.setNodeGenerated(myRight,true);
        TreeUtil.addChildren(holder,myRight);
        PsiElement e=childElement;
        while (e != null) {
          CodeEditUtil.setNodeGenerated(e.getNode(),true);
          e=e.getNextSibling();
        }
        String leftText=childElement.getText().substring(0,splitOffset);
        String rightText=childElement.getText().substring(splitOffset);
        LeafElement rightElement=ASTFactory.leaf(XmlTokenType.XML_DATA_CHARACTERS,rightText,0,rightText.length(),holder.getCharTable());
        CodeEditUtil.setNodeGenerated(rightElement,true);
        LeafElement leftElement=ASTFactory.leaf(XmlTokenType.XML_DATA_CHARACTERS,leftText,0,leftText.length(),holder.getCharTable());
        CodeEditUtil.setNodeGenerated(leftElement,true);
        TreeUtil.insertAfter(XmlTextImpl.this,myRight);
        TreeUtil.addChildren(myRight,rightElement);
        if (childElement.getNextSibling() != null) {
          TreeUtil.addChildren(myRight,(TreeElement)childElement.getNextSibling());
        }
        TreeUtil.remove((TreeElement)childElement);
        TreeUtil.addChildren(XmlTextImpl.this,leftElement);
      }
 else {
        final PsiFile containingFile=xmlTag.getContainingFile();
        final FileElement holder=DummyHolderFactory.createHolder(containingFile.getManager(),null,((PsiFileImpl)containingFile).getTreeElement().getCharTable()).getTreeElement();
        final XmlTextImpl rightText=(XmlTextImpl)ASTFactory.composite(XmlElementType.XML_TEXT);
        CodeEditUtil.setNodeGenerated(rightText,true);
        TreeUtil.addChildren(holder,rightText);
        ((XmlTagImpl)xmlTag).addChild(rightText,getTreeNext());
        final String value=getValue();
        setValue(value.substring(0,displayOffset));
        rightText.setValue(value.substring(displayOffset));
        CodeEditUtil.setNodeGenerated(rightText,true);
        myRight=rightText;
      }
      clearCaches();
      myRight.clearCaches();
      return createEvent(new XmlTextChangedImpl(XmlTextImpl.this,oldText),new XmlTagChildAddImpl(xmlTag,myRight));
    }
    public XmlText getResult(){
      return myRight;
    }
  }
  final MyTransaction transaction=new MyTransaction();
  model.runTransaction(transaction);
  return transaction.getResult();
}
