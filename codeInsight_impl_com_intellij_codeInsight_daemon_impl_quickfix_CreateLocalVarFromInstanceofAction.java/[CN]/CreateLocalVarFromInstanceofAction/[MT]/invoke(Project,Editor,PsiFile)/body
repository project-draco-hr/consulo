{
  if (!CodeInsightUtil.prepareFileForWrite(file))   return;
  PsiInstanceOfExpression instanceOfExpression=getInstanceOfExpressionAtCaret(editor,file);
  try {
    final PsiDeclarationStatement decl=createLocalVariableDeclaration(instanceOfExpression);
    if (decl == null)     return;
    PsiLocalVariable localVariable=(PsiLocalVariable)decl.getDeclaredElements()[0];
    TemplateBuilder builder=new TemplateBuilder(localVariable);
    builder.setEndVariableAfter(localVariable.getNameIdentifier());
    Template template=generateTemplate(project,localVariable.getInitializer(),localVariable.getType());
    Editor newEditor=CreateFromUsageBaseFix.positionCursor(project,file,localVariable.getNameIdentifier());
    TextRange range=localVariable.getNameIdentifier().getTextRange();
    newEditor.getDocument().deleteString(range.getStartOffset(),range.getEndOffset());
    CreateFromUsageBaseFix.startTemplate(newEditor,template,project,new TemplateEditingAdapter(){
      public void templateFinished(      Template template){
        ApplicationManager.getApplication().runWriteAction(new Runnable(){
          public void run(){
            PsiDocumentManager.getInstance(project).commitDocument(editor.getDocument());
            CaretModel caretModel=editor.getCaretModel();
            PsiElement elementAt=file.findElementAt(caretModel.getOffset());
            PsiDeclarationStatement declarationStatement=PsiTreeUtil.getParentOfType(elementAt,PsiDeclarationStatement.class);
            if (declarationStatement != null) {
              caretModel.moveToOffset(declarationStatement.getTextRange().getEndOffset());
            }
            new EnterAction().actionPerformed(editor,DataManager.getInstance().getDataContext());
          }
        }
);
      }
    }
);
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
