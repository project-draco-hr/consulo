{
  addData();
  if (insideFolding) {
    myFoldedOffsets.add(offset);
    onNonSoftWrapSymbol(c);
    if (c == '\n') {
      foldedLines++;
      offset++;
      tabAnchorColumn=0;
    }
 else     if (c == '\t') {
      int tabsNumber=tabAnchorColumn / TAB_SIZE;
      int tabWidthInColumns=((tabsNumber + 1) * TAB_SIZE) - tabAnchorColumn;
      insideTab=true;
      for (int i=tabWidthInColumns - 1; i > 0; i--) {
        logicalColumn++;
        addData(false);
      }
      insideTab=false;
      logicalColumn++;
      offset++;
      tabAnchorColumn+=tabWidthInColumns;
    }
 else {
      logicalColumn++;
      offset++;
      tabAnchorColumn++;
    }
    foldingColumnDiff=foldingStartVisualColumn - logicalColumn;
    return;
  }
  if (insideSoftWrap) {
    mySoftWrapBuffer.append(c);
    if (c == '\n') {
      visualColumn++;
      addData(true);
      visualColumn++;
      addData(true);
      visualLine++;
      softWrapLinesOnCurrentLogical++;
      visualColumn=1;
      tabAnchorColumn=1;
      softWrapSymbolsOnCurrentVisualLine=0;
    }
 else {
      visualColumn++;
      softWrapSymbolsOnCurrentVisualLine++;
      tabAnchorColumn++;
    }
    return;
  }
  onNonSoftWrapSymbol(c);
  if (c == '\n') {
    visualLine++;
    visualColumn=0;
    tabAnchorColumn=0;
    softWrapLinesBeforeCurrentLogical+=softWrapLinesOnCurrentLogical;
    softWrapLinesOnCurrentLogical=0;
    softWrapSymbolsOnCurrentVisualLine=0;
    foldingColumnDiff=0;
    offset++;
  }
 else   if (c == '\t') {
    int tabsNumber=tabAnchorColumn / TAB_SIZE;
    int tabWidthInColumns=((tabsNumber + 1) * TAB_SIZE) - tabAnchorColumn;
    insideTab=true;
    for (int i=tabWidthInColumns - 1; i > 0; i--) {
      visualColumn++;
      logicalColumn++;
      addData(false);
    }
    insideTab=false;
    visualColumn++;
    logicalColumn++;
    offset++;
    tabAnchorColumn+=tabWidthInColumns;
  }
 else {
    visualColumn++;
    logicalColumn++;
    offset++;
    tabAnchorColumn++;
  }
}
