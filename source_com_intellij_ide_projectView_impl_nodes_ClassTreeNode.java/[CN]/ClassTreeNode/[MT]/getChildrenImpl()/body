{
  PsiClass parent=getValue();
  final ArrayList<AbstractTreeNode> treeNodes=new ArrayList<AbstractTreeNode>();
  if (getSettings().isShowMembers()) {
    ArrayList<PsiElement> result=new ArrayList<PsiElement>();
    PsiClassChildrenSource.DEFAULT_CHILDREN.addChildren(parent,result);
    for (    PsiElement psiElement : result) {
      psiElement.accept(new PsiElementVisitor(){
        @Override public void visitClass(        PsiClass aClass){
          treeNodes.add(new ClassTreeNode(getProject(),aClass,getSettings()));
        }
        @Override public void visitMethod(        PsiMethod method){
          treeNodes.add(new PsiMethodNode(getProject(),method,getSettings()));
        }
        @Override public void visitField(        PsiField field){
          treeNodes.add(new PsiFieldNode(getProject(),field,getSettings()));
        }
        @Override public void visitReferenceExpression(        PsiReferenceExpression expression){
          visitExpression(expression);
        }
      }
);
    }
  }
  return treeNodes;
}
