{
  final ActionCallback selectionDone=new ActionCallback();
  getFilteredStructure().refilter();
  queueUpdate();
  getReady(this).doWhenDone(new Runnable(){
    public void run(){
      getTree().validate();
      Object toSelect=preferredSelection != null ? preferredSelection : myLastSuccessfulSelect;
      if (adjustSelection && toSelect != null) {
        final FilteringTreeStructure.Node nodeToSelect=getFilteredStructure().getVisibleNodeFor(toSelect);
        if (nodeToSelect != null) {
          select(nodeToSelect,new Runnable(){
            public void run(){
              if (getSelectedElements().contains(nodeToSelect)) {
                myLastSuccessfulSelect=getOriginalNode(nodeToSelect);
              }
              selectionDone.setDone();
            }
          }
);
        }
 else {
          TreeUtil.ensureSelection(myTree);
          selectionDone.setDone();
        }
      }
 else {
        selectionDone.setDone();
      }
    }
  }
);
  final ActionCallback result=new ActionCallback();
  selectionDone.doWhenDone(new Runnable(){
    public void run(){
      scrollSelectionToVisible(new Runnable(){
        public void run(){
          getReady(this).notify(result);
        }
      }
,false);
    }
  }
);
  return result;
}
