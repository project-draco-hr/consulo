{
  final ActionCallback selectionDone=new ActionCallback();
  getFilteredStructure().refilter();
  getUi().updateSubtree(getRootNode(),false);
  final Runnable selectionRunnable=new Runnable(){
    public void run(){
      revalidateTree();
      Object toSelect=myLastSuccessfulSelect != null ? myLastSuccessfulSelect : preferredSelection;
      if (adjustSelection && toSelect != null) {
        final FilteringTreeStructure.FilteringNode nodeToSelect=getFilteredStructure().getVisibleNodeFor(toSelect);
        if (nodeToSelect != null) {
          select(nodeToSelect,new Runnable(){
            public void run(){
              if (getSelectedElements().contains(nodeToSelect)) {
                myLastSuccessfulSelect=getOriginalNode(nodeToSelect);
              }
              selectionDone.setDone();
            }
          }
);
        }
 else {
          TreeUtil.ensureSelection(myTree);
          selectionDone.setDone();
        }
      }
 else {
        selectionDone.setDone();
      }
    }
  }
;
  if (!ApplicationManager.getApplication().isUnitTestMode()) {
    queueUpdate().doWhenProcessed(selectionRunnable);
  }
 else {
    selectionRunnable.run();
  }
  final ActionCallback result=new ActionCallback();
  selectionDone.doWhenDone(new Runnable(){
    public void run(){
      if (!ApplicationManager.getApplication().isUnitTestMode()) {
        scrollSelectionToVisible(new Runnable(){
          public void run(){
            getReady(this).notify(result);
          }
        }
,false);
      }
 else {
        result.setDone();
      }
    }
  }
).doWhenRejected(result.createSetRejectedRunnable());
  return result;
}
