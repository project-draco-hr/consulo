{
  ProgressIndicator progressIndicator=ProgressManager.getInstance().getProgressIndicator();
  final ArrayList<PsiFile> filesList=new ArrayList<PsiFile>();
  final boolean isRecursive=myExportToHTMLSettings.isIncludeSubdirectories();
  try {
    ApplicationManager.getApplication().runReadAction(new ThrowableComputable<Void,FileNotFoundException>(){
      @Override public Void compute() throws FileNotFoundException {
        addToPsiFileList(myPsiDirectory,filesList,isRecursive,myOutputDirectoryName);
        return null;
      }
    }
);
  }
 catch (  FileNotFoundException e) {
    myLastException=e;
    return;
  }
  HashMap<PsiFile,PsiFile> filesMap=new HashMap<PsiFile,PsiFile>();
  for (  PsiFile psiFile : filesList) {
    filesMap.put(psiFile,psiFile);
  }
  for (int i=0; i < filesList.size(); i++) {
    PsiFile psiFile=filesList.get(i);
    if (progressIndicator.isCanceled()) {
      return;
    }
    progressIndicator.setText(CodeEditorBundle.message("export.to.html.generating.file.progress",getHTMLFileName(psiFile)));
    progressIndicator.setFraction(((double)i) / filesList.size());
    if (!exportPsiFile(psiFile,myOutputDirectoryName,myProject,filesMap)) {
      return;
    }
  }
  if (myExportToHTMLSettings.OPEN_IN_BROWSER) {
    String dirToShow=myExportToHTMLSettings.OUTPUT_DIRECTORY;
    if (!dirToShow.endsWith(File.separator)) {
      dirToShow+=File.separatorChar;
    }
    dirToShow+=PsiPackageHelper.getInstance(myProject).getQualifiedName(myPsiDirectory,false).replace('.',File.separatorChar);
    BrowserUtil.browse(dirToShow);
  }
}
