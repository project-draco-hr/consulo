{
  if (element instanceof PsiVariable) {
    if (options.isReadAccess || options.isWriteAccess) {
      if (options.isReadAccess && options.isWriteAccess) {
        addElementUsages(element,processor,options);
      }
 else {
        addElementUsages(element,new Processor<UsageInfo>(){
          public boolean process(          UsageInfo info){
            final PsiElement element=info.getElement();
            boolean isWrite=element instanceof PsiExpression && PsiUtil.isAccessedForWriting((PsiExpression)element);
            if (isWrite == options.isWriteAccess) {
              if (!processor.process(info))               return false;
            }
            return true;
          }
        }
,options);
      }
    }
  }
 else   if (options.isUsages) {
    addElementUsages(element,processor,options);
  }
  if (ThrowSearchUtil.isSearchable(element) && options.isThrowUsages) {
    ApplicationManager.getApplication().runReadAction(new Runnable(){
      public void run(){
        ThrowSearchUtil.Root root=options.getUserData(ThrowSearchUtil.THROW_SEARCH_ROOT_KEY);
        if (root == null) {
          final ThrowSearchUtil.Root[] roots=ThrowSearchUtil.getSearchRoots(element);
          if (roots != null && roots.length > 0) {
            root=roots[0];
          }
        }
        if (root != null) {
          ThrowSearchUtil.addThrowUsages(processor,root,options);
        }
      }
    }
);
  }
  if (element instanceof PsiPackage && options.isClassesUsages) {
    addClassesUsages((PsiPackage)element,processor,options);
  }
  if (element instanceof PsiClass && options.isMethodsUsages) {
    addMethodsUsages((PsiClass)element,processor,options);
  }
  if (element instanceof PsiClass && options.isFieldsUsages) {
    addFieldsUsages((PsiClass)element,processor,options);
  }
  if (element instanceof PsiClass) {
    if (((PsiClass)element).isInterface()) {
      if (options.isDerivedInterfaces) {
        if (options.isImplementingClasses) {
          addInheritors((PsiClass)element,processor,options);
        }
 else {
          addDerivedInterfaces((PsiClass)element,processor,options);
        }
      }
 else       if (options.isImplementingClasses) {
        addImplementingClasses((PsiClass)element,processor,options);
      }
    }
 else     if (options.isDerivedClasses) {
      addInheritors((PsiClass)element,processor,options);
    }
  }
  if (element instanceof PsiMethod) {
    final PsiMethod psiMethod=(PsiMethod)element;
    if (psiMethod.hasModifierProperty(PsiModifier.ABSTRACT)) {
      if (options.isImplementingMethods) {
        processOverridingMethods(psiMethod,processor,options);
      }
    }
 else     if (options.isOverridingMethods) {
      processOverridingMethods(psiMethod,processor,options);
    }
  }
  if (!ThrowSearchUtil.isSearchable(element) && options.isSearchForTextOccurences && options.searchScope instanceof GlobalSearchScope) {
    String stringToSearch=getStringToSearch(element);
    if (stringToSearch != null) {
      final TextRange elementTextRange=ApplicationManager.getApplication().runReadAction(new Computable<TextRange>(){
        public TextRange compute(){
          return element.getTextRange();
        }
      }
);
      TextOccurrencesUtil.UsageInfoFactory factory=new TextOccurrencesUtil.UsageInfoFactory(){
        public UsageInfo createUsageInfo(        @NotNull PsiElement usage,        int startOffset,        int endOffset){
          if (elementTextRange != null && usage.getContainingFile() == element.getContainingFile() && elementTextRange.contains(startOffset) && elementTextRange.contains(endOffset)) {
            return null;
          }
          return new UsageInfo(usage,startOffset,endOffset,true);
        }
      }
;
      TextOccurrencesUtil.processTextOccurences(element,stringToSearch,(GlobalSearchScope)options.searchScope,processor,factory);
    }
  }
}
