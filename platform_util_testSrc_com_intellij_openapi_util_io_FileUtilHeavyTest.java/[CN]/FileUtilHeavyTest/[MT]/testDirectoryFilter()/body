{
  final Tree tree=new Tree(myTempDirectory);
  final Map<String,Integer> result=new HashMap<String,Integer>();
  FileUtil.processFilesRecursively(myTempDirectory,new Processor<File>(){
    @Override public boolean process(    File file){
      final Integer integer=result.get(file.getName());
      result.put(file.getName(),integer == null ? 1 : (integer + 1));
      return true;
    }
  }
,new Processor<File>(){
    @Override public boolean process(    File file){
      return !"dir2".equals(file.getName());
    }
  }
);
  Assert.assertEquals(5,result.size());
  Assert.assertEquals(1,result.get(myTempDirectory.getName()).intValue());
  Assert.assertEquals(1,result.get("1").intValue());
  Assert.assertEquals(1,result.get("2").intValue());
  Assert.assertEquals(1,result.get("dir1").intValue());
  Assert.assertEquals(1,result.get("dir2").intValue());
  Assert.assertNull(result.get("dir21"));
}
