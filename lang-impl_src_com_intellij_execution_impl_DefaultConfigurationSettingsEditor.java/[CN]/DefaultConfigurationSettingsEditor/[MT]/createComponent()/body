{
  final JPanel wholePanel=new JPanel(new BorderLayout());
  final JScrollPane pane=ScrollPaneFactory.createScrollPane(myTree);
  pane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
  wholePanel.add(pane,BorderLayout.WEST);
  final JPanel rightPanel=new JPanel(new BorderLayout());
  wholePanel.add(rightPanel,BorderLayout.CENTER);
  final ConfigurationType[] configurationTypes=RunManagerImpl.getInstanceImpl(myProject).getConfigurationFactories();
  for (  ConfigurationType type : configurationTypes) {
    myRoot.add(new DefaultMutableTreeNode(type));
  }
  myTree.setRootVisible(false);
  TreeToolTipHandler.install(myTree);
  TreeUtil.installActions(myTree);
  myTree.setCellRenderer(new DefaultTreeCellRenderer(){
    public Component getTreeCellRendererComponent(    JTree tree,    Object value,    boolean sel,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      final Component rendererComponent=super.getTreeCellRendererComponent(tree,value,sel,expanded,leaf,row,hasFocus);
      if (value instanceof DefaultMutableTreeNode) {
        final Object userObject=((DefaultMutableTreeNode)value).getUserObject();
        if (userObject instanceof ConfigurationType) {
          final ConfigurationType type=(ConfigurationType)userObject;
          setText(type.getDisplayName());
          setIcon(type.getIcon());
        }
      }
      return rendererComponent;
    }
  }
);
  myTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      final TreePath selectionPath=myTree.getSelectionPath();
      if (selectionPath != null) {
        final DefaultMutableTreeNode node=(DefaultMutableTreeNode)selectionPath.getLastPathComponent();
        final ConfigurationType type=(ConfigurationType)node.getUserObject();
        rightPanel.removeAll();
        Configurable configurable=myStoredComponents.get(type);
        if (configurable == null) {
          configurable=TypeTemplatesConfigurable.createConfigurable(type,myProject);
          myStoredComponents.put(type,configurable);
          rightPanel.add(configurable.createComponent());
          configurable.reset();
        }
 else {
          rightPanel.add(configurable.createComponent());
        }
        rightPanel.revalidate();
        rightPanel.repaint();
        final Window window=SwingUtilities.windowForComponent(wholePanel);
        if (window != null && (window.getSize().height < window.getMinimumSize().height || window.getSize().width < window.getMinimumSize().width)) {
          window.pack();
        }
      }
    }
  }
);
  RunConfigurable.sortTree(myRoot);
  ((DefaultTreeModel)myTree.getModel()).reload();
  TreeUtil.selectFirstNode(myTree);
  TreeUtil.traverse(myRoot,new TreeUtil.Traverse(){
    public boolean accept(    Object node){
      if (node instanceof DefaultMutableTreeNode) {
        final DefaultMutableTreeNode treeNode=(DefaultMutableTreeNode)node;
        final Object o=treeNode.getUserObject();
        if (Comparing.equal(o,mySelection)) {
          TreeUtil.selectInTree(treeNode,true,myTree);
          return false;
        }
      }
      return true;
    }
  }
);
  return wholePanel;
}
