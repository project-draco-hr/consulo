{
  if (repositoryLocation == null) {
    return null;
  }
  VirtualFile root=((HgRepositoryLocation)repositoryLocation).getRoot();
  HgFile hgFile=new HgFile(root,VcsUtil.getFilePath(root.getPath()));
  HgLogCommand hgLogCommand=new HgLogCommand(project);
  hgLogCommand.setLogFile(false);
  List<String> args=new ArrayList<String>();
  args.add("--follow");
  args.add("--rev");
  args.add(revision);
  final List<HgFileRevision> revisions;
  try {
    revisions=hgLogCommand.execute(hgFile,1,true,args);
  }
 catch (  HgCommandException e) {
    new HgCommandResultNotifier(project).notifyError(null,HgVcsMessages.message("hg4idea.error.log.command.execution"),e.getMessage());
    return null;
  }
  if (revisions == null || revision.isEmpty()) {
    return null;
  }
  HgFileRevision localRevision=revisions.get(0);
  HgRevisionNumber vcsRevisionNumber=localRevision.getRevisionNumber();
  HgRevisionNumber firstParent=vcsRevisionNumber.getParents().get(0);
  List<Change> changes=new ArrayList<Change>();
  for (  String file : localRevision.getModifiedFiles()) {
    changes.add(createChange(root,file,firstParent,file,vcsRevisionNumber,FileStatus.MODIFIED));
  }
  for (  String file : localRevision.getAddedFiles()) {
    changes.add(createChange(root,null,null,file,vcsRevisionNumber,FileStatus.ADDED));
  }
  for (  String file : localRevision.getDeletedFiles()) {
    changes.add(createChange(root,file,firstParent,null,vcsRevisionNumber,FileStatus.DELETED));
  }
  for (  Map.Entry<String,String> copiedFile : localRevision.getCopiedFiles().entrySet()) {
    changes.add(createChange(root,copiedFile.getKey(),firstParent,copiedFile.getValue(),vcsRevisionNumber,HgChangeProvider.COPIED));
  }
  return new HgCommittedChangeList(myVcs,vcsRevisionNumber,localRevision.getBranchName(),localRevision.getCommitMessage(),localRevision.getAuthor(),localRevision.getRevisionDate(),changes);
}
