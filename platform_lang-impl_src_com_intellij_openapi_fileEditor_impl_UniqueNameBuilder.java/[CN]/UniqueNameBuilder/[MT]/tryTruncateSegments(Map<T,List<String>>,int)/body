{
  Map<String,String> truncatedSegments=ContainerUtil.newHashMap();
  for (  Map.Entry<T,List<String>> entry : segmentLists.entrySet()) {
    if (entry.getValue().size() <= index + 1) {
      continue;
    }
    String segment=entry.getValue().get(index);
    for (int i=1; i < segment.length(); i++) {
      String truncated=segment.substring(0,i);
      String existing=truncatedSegments.get(truncated);
      if (existing == null) {
        truncatedSegments.put(truncated,segment);
        break;
      }
 else       if (existing.equals(segment)) {
        break;
      }
 else       if (!existing.equals(segment) && existing != NON_UNIQUE) {
        while (i < existing.length() && i < segment.length() && existing.charAt(i - 1) == segment.charAt(i - 1)) {
          truncatedSegments.put(segment.substring(0,i),NON_UNIQUE);
          i++;
        }
        if (i < existing.length()) {
          truncatedSegments.put(existing.substring(0,i),existing);
        }
        if (i < segment.length()) {
          truncatedSegments.put(segment.substring(0,i),segment);
        }
        break;
      }
    }
  }
  Map<String,String> inverted=ContainerUtil.newHashMap();
  for (  Map.Entry<String,String> entry : truncatedSegments.entrySet()) {
    if (entry.getValue() != NON_UNIQUE) {
      inverted.put(entry.getValue(),entry.getKey());
    }
  }
  for (  Map.Entry<T,List<String>> entry : segmentLists.entrySet()) {
    if (entry.getValue().size() <= index + 1) {
      continue;
    }
    String segment=entry.getValue().get(index);
    String truncated=inverted.get(segment);
    if (truncated != null && truncated.length() < segment.length()) {
      entry.getValue().set(index,truncated + "\u2026");
    }
  }
}
