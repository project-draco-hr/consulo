{
  String filter=null;
  int filterDelim=text.indexOf('|');
  if (filterDelim >= 0 && filterDelim < text.length() - 1) {
    filter=text.substring(filterDelim + 1);
    text=text.substring(0,filterDelim);
  }
  boolean inQuotes=false;
  boolean inApostrophes=false;
  text+=MARKER;
  StringBuilder templateKeyBuilder=new StringBuilder();
  List<Token> result=new ArrayList<Token>();
  for (int i=0, n=text.length(); i < n; i++) {
    char c=text.charAt(i);
    if (inQuotes || inApostrophes) {
      templateKeyBuilder.append(c);
      if (c == '"')       inQuotes=false;
 else       if (c == '\'')       inApostrophes=false;
    }
 else     if (i == n - 1 || (i < n - 2 && OPERATIONS.indexOf(c) >= 0)) {
      String key=templateKeyBuilder.toString();
      templateKeyBuilder=new StringBuilder();
      int num=parseNonNegativeInt(key);
      if (num > 0) {
        result.add(new NumberToken(num));
      }
 else {
        TemplateToken token=parseTemplateKey(key,callback);
        if (token == null)         return null;
        result.add(token);
      }
      result.add(i < n - 1 ? new OperationToken(c) : new MarkerToken());
    }
 else     if (!Character.isWhitespace(c)) {
      templateKeyBuilder.append(c);
      if (c == '"')       inQuotes=true;
 else       if (c == '\'')       inApostrophes=true;
    }
 else {
      return null;
    }
  }
  if (inQuotes || inApostrophes) {
    return null;
  }
  if (filter != null) {
    result.add(new FilterToken(filter));
  }
  return result;
}
