{
  final JUnitProcessHandler handler=JUnitProcessHandler.runJava(getJavaParameters(),myProject);
  for (  final RunConfigurationExtension ext : Extensions.getExtensions(RunConfigurationExtension.EP_NAME)) {
    ext.handleStartProcess(myConfiguration,handler);
  }
  final JUnitConsoleProperties consoleProperties=new JUnitConsoleProperties(myConfiguration);
  final JUnitTreeConsoleView consoleView=new JUnitTreeConsoleView(consoleProperties,getRunnerSettings(),getConfigurationSettings());
  consoleView.initUI();
  consoleView.attachToProcess(handler);
  final TestsPacketsReceiver packetsReceiver=new TestsPacketsReceiver(consoleView){
    @Override public void notifyStart(    TestProxy root){
      super.notifyStart(root);
      final JUnitRunningModel model=getModel();
      if (model != null) {
        handler.getOut().setDispatchListener(model.getNotifier());
        Disposer.register(model,new Disposable(){
          public void dispose(){
            handler.getOut().setDispatchListener(DispatchListener.DEAF);
          }
        }
);
        consoleView.attachToModel(model);
      }
    }
  }
;
  final DeferredActionsQueue queue=new DeferredActionsQueueImpl();
  handler.getOut().setPacketDispatcher(packetsReceiver,queue);
  handler.getErr().setPacketDispatcher(packetsReceiver,queue);
  handler.addProcessListener(new ProcessAdapter(){
    @Override public void processTerminated(    ProcessEvent event){
      handler.removeProcessListener(this);
      if (myTempFile != null) {
        FileUtil.delete(myTempFile);
      }
      IJSwingUtilities.invoke(new Runnable(){
        public void run(){
          packetsReceiver.checkTerminated();
          final JUnitRunningModel model=packetsReceiver.getModel();
          TestsUIUtil.notifyByBalloon(myProject,model != null ? model.getRoot() : null,consoleProperties,Filter.DEFECTIVE_LEAF);
        }
      }
);
    }
    @Override public void onTextAvailable(    final ProcessEvent event,    final Key outputType){
      final String text=event.getText();
      final ConsoleViewContentType consoleViewType=ConsoleViewContentType.getConsoleViewType(outputType);
      final TestProxy currentTest=packetsReceiver.getCurrentTest();
      if (currentTest != null) {
        currentTest.onOutput(text,consoleViewType);
      }
 else {
        consoleView.getPrinter().onNewAvailable(new ExternalOutput(text,consoleViewType));
      }
    }
  }
);
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    return new DefaultExecutionResult(null,handler);
  }
  final RerunFailedTestsAction rerunFailedTestsAction=new RerunFailedTestsAction(consoleView.getComponent());
  rerunFailedTestsAction.init(consoleProperties,myRunnerSettings,myConfigurationSettings);
  rerunFailedTestsAction.setModelProvider(new Getter<TestFrameworkRunningModel>(){
    public TestFrameworkRunningModel get(){
      return packetsReceiver.getModel();
    }
  }
);
  final DefaultExecutionResult result=new DefaultExecutionResult(consoleView,handler);
  result.setRestartActions(rerunFailedTestsAction);
  return result;
}
