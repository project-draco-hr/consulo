{
  EnvironmentVariablesComponent.setupEnvs(myJavaParameters,myConfiguration.getPersistentData().getEnvs(),myConfiguration.getPersistentData().PASS_PARENT_ENVS);
  JavaParametersUtil.configureConfiguration(myJavaParameters,myConfiguration);
  myJavaParameters.setMainClass(JUnitConfiguration.JUNIT_START_CLASS);
  final Module module=myConfiguration.getConfigurationModule().getModule();
  if (myJavaParameters.getJdk() == null) {
    myJavaParameters.setJdk(module != null ? ModuleRootManager.getInstance(module).getSdk() : ProjectRootManager.getInstance(myProject).getProjectJdk());
  }
  final Object[] patchers=Extensions.getExtensions(ExtensionPoints.JUNIT_PATCHER);
  for (  Object patcher : patchers) {
    ((JUnitPatcher)patcher).patchJavaParameters(module,myJavaParameters);
  }
  JavaSdkUtil.addRtJar(myJavaParameters.getClassPath());
  JavaSdkUtil.addJunit4RtJar(myJavaParameters.getClassPath());
  myJavaParameters.getProgramParametersList().add(JUnitStarter.IDE_VERSION + JUnitStarter.VERSION);
  if (!(myRunnerSettings.getData() instanceof DebuggingRunnerData) && myConfiguration.isCoverageEnabled()) {
    final String coverageFileName=myConfiguration.getCoverageFilePath();
    final long lastCoverageTime=System.currentTimeMillis();
    final CoverageDataManager coverageDataManager=CoverageDataManager.getInstance(myProject);
    myCurrentCoverageSuite=coverageDataManager.addCoverageSuite(myConfiguration.getName(),new DefaultCoverageFileProvider(coverageFileName),myConfiguration.getCoveragePatterns(),lastCoverageTime,myConfiguration.getSuiteToMergeWith());
    myConfiguration.appendCoverageArgument(myJavaParameters);
  }
}
