{
  myJavaParameters.setupEnvs(myConfiguration.getPersistentData().getEnvs(),myConfiguration.getPersistentData().PASS_PARENT_ENVS);
  JavaParametersUtil.configureConfiguration(myJavaParameters,myConfiguration);
  myJavaParameters.setMainClass(JUnitConfiguration.JUNIT_START_CLASS);
  final Module module=myConfiguration.getConfigurationModule().getModule();
  if (myJavaParameters.getJdk() == null) {
    myJavaParameters.setJdk(module != null ? ModuleRootManager.getInstance(module).getSdk() : ProjectRootManager.getInstance(myProject).getProjectJdk());
  }
  myJavaParameters.getClassPath().add(JavaSdkUtil.getIdeaRtJarPath());
  myJavaParameters.getClassPath().add(PathUtil.getJarPathForClass(JUnitStarter.class));
  myJavaParameters.getProgramParametersList().add(JUnitStarter.IDE_VERSION + JUnitStarter.VERSION);
  for (  RunConfigurationExtension ext : Extensions.getExtensions(RunConfigurationExtension.EP_NAME)) {
    ext.updateJavaParameters(myConfiguration,myJavaParameters,myRunnerSettings);
  }
  final Object[] listeners=Extensions.getExtensions(IDEAJUnitListener.EP_NAME);
  final StringBuffer buf=new StringBuffer();
  for (  final Object listener : listeners) {
    boolean enabled=true;
    for (    RunConfigurationExtension ext : Extensions.getExtensions(RunConfigurationExtension.EP_NAME)) {
      if (ext.isListenerDisabled(myConfiguration,listener)) {
        enabled=false;
        break;
      }
    }
    if (enabled) {
      final Class classListener=listener.getClass();
      buf.append(classListener.getName()).append("\n");
      myJavaParameters.getClassPath().add(PathUtil.getJarPathForClass(classListener));
    }
  }
  if (buf.length() > 0) {
    try {
      final File tempFile=FileUtil.createTempFile("junitlisteners","");
      tempFile.deleteOnExit();
      myJavaParameters.getProgramParametersList().add("@@" + tempFile.getPath());
      FileUtil.writeToFile(tempFile,buf.toString().getBytes());
    }
 catch (    IOException e) {
      LOG.error(e);
    }
  }
}
