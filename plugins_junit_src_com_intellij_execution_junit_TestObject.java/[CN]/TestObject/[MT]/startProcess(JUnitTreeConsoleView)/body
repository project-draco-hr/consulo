{
  final JUnitProcessHandler handler=JUnitProcessHandler.runJava(getJavaParameters(),myProject);
  for (  RunConfigurationExtension ext : Extensions.getExtensions(RunConfigurationExtension.EP_NAME)) {
    ext.handleStartProcess(myConfiguration,handler);
  }
  handler.addProcessListener(new ProcessAdapter(){
    public void processTerminated(    final ProcessEvent event){
      if (myTempFile != null) {
        myTempFile.delete();
      }
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          if (myProject.isDisposed())           return;
          final JUnitRunningModel model=consoleView.getModel();
          final int failed=model != null ? Filter.DEFECTIVE_LEAF.and(JavaAwareFilter.METHOD(myProject)).select(model.getRoot().getAllTests()).size() : -1;
          final TestConsoleProperties properties=consoleView.getProperties();
          if (properties == null)           return;
          final String testRunDebugId=properties.isDebug() ? ToolWindowId.DEBUG : ToolWindowId.RUN;
          final ToolWindowManager toolWindowManager=ToolWindowManager.getInstance(myProject);
          if (!Comparing.strEqual(toolWindowManager.getActiveToolWindowId(),testRunDebugId)) {
            toolWindowManager.notifyByBalloon(testRunDebugId,failed == -1 ? MessageType.WARNING : (failed > 0 ? MessageType.ERROR : MessageType.INFO),failed == -1 ? ExecutionBundle.message("test.not.started.progress.text") : (failed > 0 ? failed + " " + ExecutionBundle.message("junit.runing.info.tests.failed.label") : ExecutionBundle.message("junit.runing.info.tests.passed.label")),null,null);
          }
        }
      }
);
    }
  }
);
  return handler;
}
