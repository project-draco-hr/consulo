{
  saveAll();
  final VirtualFile[] roots=ProjectLevelVcsManager.getInstance(project).getRootsUnderVcs(vcs);
  for (  VirtualFile root : roots) {
    GitCommand command=new GitCommand(project,vcs.getSettings(),root);
    String initialValue=null;
    List<GitBranch> rbranches=command.branchList(true);
    if (rbranches != null && rbranches.size() > 0) {
      initialValue=command.remoteRepoURL(rbranches.get(0));
    }
    String repoURL=Messages.showInputDialog(project,GitBundle.getString("pull.url.message"),GitBundle.getString("pull.url.title"),Messages.getQuestionIcon(),initialValue,null);
    GitCommandRunnable cmdr=new GitCommandRunnable(project,vcs.getSettings(),root);
    cmdr.setCommand(GitCommand.FETCH_CMD);
    cmdr.setArgs(new String[]{repoURL});
    ProgressManager manager=ProgressManager.getInstance();
    manager.runProcessWithProgressSynchronously(cmdr,GitBundle.message("fetching.title",repoURL),false,project);
    VcsException ex=cmdr.getException();
    if (ex != null) {
      GitUtil.showOperationError(project,ex,"git fetch");
      return;
    }
    cmdr.setArgs(new String[]{"--tags",repoURL});
    manager.runProcessWithProgressSynchronously(cmdr,GitBundle.message("fetching.tags.title",repoURL),false,project);
    ex=cmdr.getException();
    if (ex != null) {
      GitUtil.showOperationError(project,ex,"git fetch --tags");
      return;
    }
    List<GitBranch> branches=command.branchList();
    String[] branchesList=new String[branches.size()];
    GitBranch selectedBranch=null;
    int i=0;
    for (    GitBranch b : branches) {
      if (!b.isActive() && selectedBranch == null)       selectedBranch=b;
      branchesList[i++]=b.getName();
    }
    if (selectedBranch == null)     selectedBranch=branches.get(0);
    int branchNum=Messages.showChooseDialog(GitBundle.message("merge.branch.message",command.currentBranch()),GitBundle.getString("merge.branch.title"),branchesList,selectedBranch.getName(),Messages.getQuestionIcon());
    if (branchNum < 0) {
      return;
    }
    selectedBranch=branches.get(branchNum);
    cmdr.setCommand(GitCommand.MERGE_CMD);
    cmdr.setArgs(new String[]{selectedBranch.getName()});
    manager.runProcessWithProgressSynchronously(cmdr,GitBundle.message("merging.branch",selectedBranch.getName()),false,project);
    ex=cmdr.getException();
    if (ex != null) {
      GitUtil.showOperationError(project,ex,"git merge");
    }
  }
}
