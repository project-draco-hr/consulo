{
  CachedValue<CachedFormData> data=element.getUserData(CACHED_DATA);
  if (data == null) {
    data=element.getManager().getCachedValuesManager().createCachedValue(new CachedValueProvider<CachedFormData>(){
      final Map<String,Pair<PsiType,TextRange>> map=new HashMap<String,Pair<PsiType,TextRange>>();
      public Result<CachedFormData> compute(){
        final PsiReferenceProcessor.CollectElements processor=new PsiReferenceProcessor.CollectElements(){
          public boolean execute(          PsiReference ref){
            if (ref instanceof FieldFormReference) {
              final FieldFormReference fieldRef=((FieldFormReference)ref);
              final String componentClassName=fieldRef.getComponentClassName();
              if (componentClassName != null) {
                final PsiClassType type=element.getManager().getElementFactory().createTypeByFQClassName(componentClassName,element.getResolveScope());
                map.put(fieldRef.getRangeText(),new Pair<PsiType,TextRange>(type,fieldRef.getComponentClassNameTextRange()));
              }
            }
            return super.execute(ref);
          }
        }
;
        processReferences(element,processor);
        final PsiReference[] refs=processor.toArray(PsiReference.EMPTY_ARRAY);
        return new Result<CachedFormData>(new CachedFormData(refs,map),element);
      }
    }
,false);
    element.putUserData(CACHED_DATA,data);
  }
  return data.getValue();
}
