{
  final XmlAttribute valueAttribute=tag.getAttribute(UIFormXmlConstants.ATTRIBUTE_VALUE,Utils.FORM_NAMESPACE);
  if (valueAttribute != null) {
    PsiReference reference=ApplicationManager.getApplication().runReadAction(new Computable<PsiReference>(){
      @Nullable public PsiReference compute(){
        final JavaPsiFacade psiFacade=JavaPsiFacade.getInstance(file.getProject());
        final Module module=ModuleUtil.findModuleForPsiElement(file);
        if (module == null)         return null;
        final GlobalSearchScope scope=module.getModuleWithDependenciesAndLibrariesScope(false);
        PsiClass psiClass=psiFacade.findClass(className,scope);
        if (psiClass != null) {
          PsiMethod getter=PropertyUtil.findPropertyGetter(psiClass,tag.getName(),false,true);
          if (getter != null) {
            final PsiType returnType=getter.getReturnType();
            if (returnType instanceof PsiClassType) {
              PsiClassType propClassType=(PsiClassType)returnType;
              PsiClass propClass=propClassType.resolve();
              if (propClass != null) {
                if (propClass.isEnum()) {
                  return new FormEnumConstantReference(file,getValueRange(valueAttribute),propClassType);
                }
                PsiClass iconClass=psiFacade.findClass("javax.swing.Icon",scope);
                if (iconClass != null && InheritanceUtil.isInheritorOrSelf(propClass,iconClass,true)) {
                  return new ResourceFileReference(file,getValueRange(valueAttribute));
                }
              }
            }
          }
        }
        return null;
      }
    }
);
    if (reference != null) {
      if (reference instanceof ResourceFileReference) {
        processPackageReferences(file,processor,valueAttribute);
      }
      processor.execute(reference);
    }
  }
}
