{
  final XmlAttribute clsAttribute=tag.getAttribute(UIFormXmlConstants.ATTRIBUTE_CLASS,Utils.FORM_NAMESPACE);
  final String classNameStr=clsAttribute != null ? clsAttribute.getValue().replace('$','.') : null;
{
    final XmlAttribute bindingAttribute=tag.getAttribute(UIFormXmlConstants.ATTRIBUTE_BINDING,Utils.FORM_NAMESPACE);
    if (bindingAttribute != null && classReference != null) {
      final XmlAttribute customCreateAttribute=tag.getAttribute(UIFormXmlConstants.ATTRIBUTE_CUSTOM_CREATE,Utils.FORM_NAMESPACE);
      boolean customCreate=(customCreateAttribute != null && Boolean.parseBoolean(customCreateAttribute.getValue()));
      final TextRange nameRange=clsAttribute != null ? getValueRange(clsAttribute) : null;
      processor.execute(new FieldFormReference(file,classReference,getValueRange(bindingAttribute),classNameStr,nameRange,customCreate));
    }
    final XmlAttribute titleBundleAttribute=tag.getAttribute(UIFormXmlConstants.ATTRIBUTE_TITLE_RESOURCE_BUNDLE,Utils.FORM_NAMESPACE);
    final XmlAttribute titleKeyAttribute=tag.getAttribute(UIFormXmlConstants.ATTRIBUTE_TITLE_KEY,Utils.FORM_NAMESPACE);
    if (titleBundleAttribute != null && titleKeyAttribute != null) {
      processResourceBundleFileReferences(file,processor,titleBundleAttribute);
      processor.execute(new ResourceBundleKeyReference(file,titleBundleAttribute.getValue(),getValueRange(titleKeyAttribute)));
    }
    final XmlAttribute bundleAttribute=tag.getAttribute(UIFormXmlConstants.ATTRIBUTE_RESOURCE_BUNDLE,Utils.FORM_NAMESPACE);
    final XmlAttribute keyAttribute=tag.getAttribute(UIFormXmlConstants.ATTRIBUTE_KEY,Utils.FORM_NAMESPACE);
    if (bundleAttribute != null && keyAttribute != null) {
      processResourceBundleFileReferences(file,processor,bundleAttribute);
      processor.execute(new ResourceBundleKeyReference(file,bundleAttribute.getValue(),getValueRange(keyAttribute)));
    }
    processNestedFormReference(tag,processor,file);
    processButtonGroupReference(tag,processor,file,classReference);
  }
{
    if (clsAttribute != null) {
      final JavaClassReferenceProvider provider=new JavaClassReferenceProvider(tag.getProject());
      final PsiReference[] referencesByString=provider.getReferencesByString(classNameStr,file,clsAttribute.getValueElement().getTextRange().getStartOffset() + 1);
      if (referencesByString.length < 1) {
        return;
      }
      for (      PsiReference aReferencesByString : referencesByString) {
        processor.execute(aReferencesByString);
      }
    }
  }
  XmlTag parentTag=tag.getParentTag();
  if (parentTag != null && parentTag.getName().equals(UIFormXmlConstants.ELEMENT_PROPERTIES)) {
    XmlTag componentTag=parentTag.getParentTag();
    if (componentTag != null) {
      String className=componentTag.getAttributeValue(UIFormXmlConstants.ATTRIBUTE_CLASS,Utils.FORM_NAMESPACE);
      if (className != null) {
        processPropertyReference(tag,processor,file,className.replace('$','.'));
      }
    }
  }
  final XmlTag[] subtags=tag.getSubTags();
  for (  XmlTag subtag : subtags) {
    processReferences(subtag,classReference,file,processor);
  }
}
