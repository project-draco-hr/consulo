{
  XmlRpcRequest request=new XmlRpcRequest("ticket.get",new Vector(Arrays.asList(id)));
  Object response=client.execute(request,transport);
  if (response == null)   return null;
  final Vector<Object> vector=(Vector<Object>)response;
  final Hashtable<String,String> map=(Hashtable<String,String>)vector.get(3);
  return new Task(){
    @NotNull @Override public String getId(){
      return vector.get(0).toString();
    }
    @NotNull @Override public String getSummary(){
      return map.get("summary");
    }
    @Nullable @Override public String getDescription(){
      return null;
    }
    @NotNull @Override public Comment[] getComments(){
      return new Comment[0];
    }
    @NotNull @Override public Icon getIcon(){
      return TasksIcons.Trac;
    }
    @NotNull @Override public TaskType getType(){
      TaskType taskType=TaskType.OTHER;
      String type=map.get("type");
      if ("Feature".equals(type) || type.equals("enhancement"))       taskType=TaskType.FEATURE;
 else       if ("Bug".equals(type) || type.equals("defect") || type.equals("error"))       taskType=TaskType.BUG;
 else       if ("Exception".equals(type))       taskType=TaskType.EXCEPTION;
      return taskType;
    }
    @Nullable @Override public Date getUpdated(){
      return getDate(vector.get(2));
    }
    @Nullable @Override public Date getCreated(){
      return getDate(vector.get(1));
    }
    @Override public boolean isClosed(){
      return false;
    }
    @Override public boolean isIssue(){
      return true;
    }
    @Nullable @Override public String getIssueUrl(){
      return null;
    }
  }
;
}
