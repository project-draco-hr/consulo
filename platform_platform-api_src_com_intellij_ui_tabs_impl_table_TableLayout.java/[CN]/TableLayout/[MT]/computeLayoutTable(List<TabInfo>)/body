{
  final TablePassInfo data=new TablePassInfo(myTabs,visibleInfos);
  final Insets insets=myTabs.getLayoutInsets();
  data.toFitRec=new Rectangle(insets.left,insets.top,myTabs.getWidth() - insets.left - insets.right,myTabs.getHeight() - insets.top - insets.bottom);
  int eachRow=0, eachX=data.toFitRec.x;
  TableRow eachTableRow=new TableRow(data);
  data.table.add(eachTableRow);
  data.requiredRows=1;
  for (  TabInfo eachInfo : data.myVisibleInfos) {
    final TabLabel eachLabel=myTabs.myInfo2Label.get(eachInfo);
    final Dimension size=eachLabel.getPreferredSize();
    if (eachX + size.width >= data.toFitRec.getMaxX()) {
      data.requiredRows++;
      eachX=data.toFitRec.x;
    }
    myTabs.layout(eachLabel,eachX,0,size.width,1);
    eachX+=size.width + JBTabsImpl.getInterTabSpaceLength();
    data.requiredWidth+=size.width + JBTabsImpl.getInterTabSpaceLength();
  }
  int selectedRow=-1;
  eachX=data.toFitRec.x;
  data.rowToFitMaxX=(int)data.toFitRec.getMaxX();
  if (data.requiredRows > 1) {
    final int rowFit=insets.left + data.requiredWidth / data.requiredRows;
    for (    TabInfo eachInfo : data.myVisibleInfos) {
      final TabLabel eachLabel=myTabs.myInfo2Label.get(eachInfo);
      final Rectangle eachBounds=eachLabel.getBounds();
      if (eachBounds.contains(rowFit,0)) {
        data.rowToFitMaxX=(int)eachLabel.getBounds().getMaxX();
        break;
      }
    }
  }
  for (  TabInfo eachInfo : data.myVisibleInfos) {
    final TabLabel eachLabel=myTabs.myInfo2Label.get(eachInfo);
    final Dimension size=eachLabel.getPreferredSize();
    if (eachX + size.width <= data.rowToFitMaxX) {
      eachTableRow.add(eachInfo);
      if (myTabs.getSelectedInfo() == eachInfo) {
        selectedRow=eachRow;
      }
      eachX+=size.width + JBTabsImpl.getInterTabSpaceLength();
    }
 else {
      eachTableRow=new TableRow(data);
      data.table.add(eachTableRow);
      eachRow++;
      eachX=insets.left + size.width;
      eachTableRow.add(eachInfo);
      if (myTabs.getSelectedInfo() == eachInfo) {
        selectedRow=eachRow;
      }
    }
  }
  List<TableRow> toMove=new ArrayList<TableRow>();
  for (int i=selectedRow + 1; i < data.table.size(); i++) {
    toMove.add(data.table.get(i));
  }
  for (  TableRow eachMove : toMove) {
    data.table.remove(eachMove);
    data.table.add(0,eachMove);
  }
  return data;
}
