{
  final CharSequence sequence=document.getCharsSequence();
  final StringBuilder sb=new StringBuilder();
  Pattern pattern=Pattern.compile("<(error|warning|EOLError|EOLWarning)(?:\\s|=|\\w+|\\\"(?:[^\"]|\\\\\\\")*?\\\")*>(.*?)</\\1>");
  Matcher matcher=pattern.matcher(sequence);
  if (matcher.find()) {
    int pos=0;
    do {
      sb.append(sequence,pos,matcher.start(0));
      sb.append(sequence,matcher.start(2),matcher.end(2));
      pos=matcher.end(0);
    }
 while (matcher.find(pos));
    sb.append(sequence,pos,sequence.length());
  }
 else {
    final int[] offset=new int[]{0};
    final ArrayList<HighlightInfo> infos=new ArrayList<HighlightInfo>();
    DaemonCodeAnalyzerImpl.processHighlights(document,project,HighlightSeverity.WARNING,0,sequence.length(),new Processor<HighlightInfo>(){
      @Override public boolean process(      HighlightInfo info){
        if (info.severity != HighlightSeverity.WARNING && info.severity != HighlightSeverity.ERROR)         return true;
        offset[0]=appendInfo(info,sb,sequence,offset[0],infos,compact);
        return true;
      }
    }
);
    offset[0]=appendInfo(null,sb,sequence,offset[0],infos,compact);
    sb.append(sequence.subSequence(offset[0],sequence.length()));
  }
  document.setText(sb);
}
