{
  ensureInitialized();
  List<T> cached=_getCachedSemElements(key,psi,true);
  if (cached != null) {
    return cached;
  }
  final ConcurrentMap<SemKey,List<SemElement>> map=cacheOrGetMap(psi);
  List<T> result=null;
  for (  final SemKey each : myProducers.keySet()) {
    if (each.isKindOf(key)) {
      List<SemElement> list=ConcurrencyUtil.cacheOrGet(map,each,createSemElement(each,psi));
      if (!list.isEmpty()) {
        if (result == null)         result=new SmartList<T>();
        result.addAll((List<T>)list);
      }
    }
  }
  return result == null ? Collections.<T>emptyList() : result;
}
