{
  if (context.getProject().isDisposed()) {
    return EMPTY_GENERATION_ITEM_ARRAY;
  }
  List<GenerationItem> results=new ArrayList<GenerationItem>(items.length);
  boolean toRefresh=false;
  for (  GenerationItem item : items) {
    if (item instanceof IdlGenerationItem) {
      final IdlGenerationItem idlItem=(IdlGenerationItem)item;
      if (!AndroidCompileUtil.isModuleAffected(context,idlItem.myModule)) {
        continue;
      }
      try {
        VirtualFile[] sourceRoots=AndroidPackagingCompiler.getSourceRootsForModuleAndDependencies(idlItem.myModule,false);
        final String[] sourceRootPaths=AndroidCompileUtil.toOsPaths(sourceRoots);
        final String outFilePath=FileUtil.toSystemDependentName(outputRootDirectory.getPath() + '/' + idlItem.myPackageName.replace('.','/')+ '/'+ idlItem.myFile.getNameWithoutExtension()+ ".java");
        final Map<CompilerMessageCategory,List<String>> messages=AndroidCompileUtil.toCompilerMessageCategoryKeys(AndroidIdl.execute(idlItem.myAndroidTarget,idlItem.myFile.getPath(),outFilePath,sourceRootPaths));
        ApplicationManager.getApplication().runReadAction(new Runnable(){
          public void run(){
            if (context.getProject().isDisposed())             return;
            addMessages(context,messages,idlItem.myFile.getUrl());
          }
        }
);
        if (messages.get(CompilerMessageCategory.ERROR).isEmpty()) {
          toRefresh=true;
          results.add(idlItem);
        }
      }
 catch (      final IOException e) {
        LOG.info(e);
        ApplicationManager.getApplication().runReadAction(new Runnable(){
          public void run(){
            if (context.getProject().isDisposed())             return;
            context.addMessage(CompilerMessageCategory.ERROR,e.getMessage(),idlItem.myFile.getUrl(),-1,-1);
          }
        }
);
      }
    }
  }
  if (toRefresh) {
    AndroidCompileUtil.markDirtyAndRefresh(outputRootDirectory,true);
  }
  return results.toArray(new GenerationItem[results.size()]);
}
