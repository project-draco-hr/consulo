{
  if (myContext.getProject().isDisposed()) {
    return EMPTY_GENERATION_ITEM_ARRAY;
  }
  ProjectFileIndex fileIndex=ProjectRootManager.getInstance(myProject).getFileIndex();
  CompileScope compileScope=myContext.getCompileScope();
  VirtualFile[] files=compileScope.getFiles(AndroidIdlFileType.ourFileType,false);
  List<GenerationItem> items=new ArrayList<GenerationItem>(files.length);
  for (  VirtualFile file : files) {
    Module module=myContext.getModuleByFile(file);
    AndroidFacet facet=FacetManager.getInstance(module).getFacetByType(AndroidFacet.ID);
    if (facet != null && !facet.getConfiguration().LIBRARY_PROJECT) {
      IAndroidTarget target=facet.getConfiguration().getAndroidTarget();
      if (target == null) {
        myContext.addMessage(CompilerMessageCategory.ERROR,AndroidBundle.message("android.compilation.error.specify.platform",module.getName()),null,-1,-1);
        continue;
      }
      String sourceRootPath=facet.getAidlGenSourceRootPath();
      if (sourceRootPath == null) {
        myContext.addMessage(CompilerMessageCategory.ERROR,AndroidBundle.message("android.compilation.error.apt.gen.not.specified",module.getName()),null,-1,-1);
        continue;
      }
      String packageName=AndroidUtils.getPackageName(module,file);
      if (packageName == null) {
        myContext.addMessage(CompilerMessageCategory.ERROR,"Cannot compute package for file",file.getUrl(),-1,-1);
        continue;
      }
      IdlGenerationItem generationItem=new IdlGenerationItem(module,file,sourceRootPath,fileIndex.isInTestSourceContent(file),target,packageName);
      if (myContext.isMake()) {
        File generatedFile=generationItem.myGeneratedFile;
        if (generatedFile == null || !generatedFile.exists() || generatedFile.lastModified() <= file.getModificationCount()) {
          AndroidCompileUtil.createSourceRootIfNotExist(sourceRootPath,module);
          items.add(generationItem);
        }
      }
 else {
        AndroidCompileUtil.createSourceRootIfNotExist(sourceRootPath,module);
        items.add(generationItem);
      }
    }
  }
  return items.toArray(new GenerationItem[items.size()]);
}
