{
  event.setDropPossible(false,"");
  final Object attached=event.getAttachedObject();
  final int dropAction=event.getAction().getActionId();
  final DropHandler dropHandler=getDropHandler(dropAction);
  final TreeNode[] sourceNodes=getSourceNodes(attached);
  final Point point=event.getPoint();
  final TreeNode targetNode=getTargetNode(point);
  if (targetNode == null || (dropAction & DnDConstants.ACTION_COPY_OR_MOVE) == 0) {
    return false;
  }
 else   if (sourceNodes == null && !FileCopyPasteUtil.isFileListFlavorSupported(event)) {
    return false;
  }
 else   if (sourceNodes != null && !dropHandler.isValidSource(sourceNodes,targetNode)) {
    return false;
  }
  if (sourceNodes != null) {
    boolean redundant=true;
    for (    TreeNode sourceNode : sourceNodes) {
      if (!dropHandler.isDropRedundant(sourceNode,targetNode)) {
        redundant=false;
        break;
      }
    }
    if (redundant)     return false;
  }
 else {
    if (!SystemInfo.isMac) {
      final PsiFileSystemItem[] psiFiles=getPsiFiles(getFileListFromAttachedObject(attached));
      if (psiFiles == null)       return false;
      if (!MoveHandler.isValidTarget(getPsiElement(targetNode),psiFiles))       return false;
    }
  }
  final Rectangle pathBounds=myTree.getPathBounds(myTree.getClosestPathForLocation(point.x,point.y));
  event.setHighlighting(new RelativeRectangle(myTree,pathBounds),DnDEvent.DropTargetHighlightingType.RECTANGLE);
  event.setDropPossible(true);
  return false;
}
