{
synchronized (lock) {
    Pair<String,Integer> p=fontFamily(defaultFontFamily,style);
    if (ourSharedKeyInstance.mySize == size && ourSharedKeyInstance.myStyle == p.getSecond() && ourSharedKeyInstance.myFamilyName != null && ourSharedKeyInstance.myFamilyName.equals(p.getFirst()) && ourSharedDefaultFont != null && (c < 128 || ourSharedDefaultFont.canDisplay(c))) {
      return ourSharedDefaultFont;
    }
    ourSharedKeyInstance.myFamilyName=p.getFirst();
    ourSharedKeyInstance.mySize=size;
    ourSharedKeyInstance.myStyle=p.getSecond();
    FontInfo defaultFont=ourUsedFonts.get(ourSharedKeyInstance);
    if (defaultFont == null) {
      defaultFont=new FontInfo(p.getFirst(),size,p.getSecond());
      ourUsedFonts.put(ourSharedKeyInstance,defaultFont);
      ourSharedKeyInstance=new FontKey("",0,0);
    }
    ourSharedDefaultFont=defaultFont;
    if (c < 128 || defaultFont.canDisplay(c)) {
      return defaultFont;
    }
    if (ourUndisplayableChars.contains(c))     return defaultFont;
    final Collection<FontInfo> descriptors=ourUsedFonts.values();
    for (    FontInfo font : descriptors) {
      if (font.getSize() == size && font.getStyle() == style && font.canDisplay(c)) {
        return font;
      }
    }
    for (int i=0; i < ourFontNames.size(); i++) {
      String name=ourFontNames.get(i);
      FontInfo font=new FontInfo(name,size,style);
      if (font.canDisplay(c)) {
        ourUsedFonts.put(new FontKey(name,size,style),font);
        ourFontNames.remove(i);
        return font;
      }
    }
    ourUndisplayableChars.add(c);
    return defaultFont;
  }
}
