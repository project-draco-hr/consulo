{
  final Set<PsiMethod> overridden=new HashSet<PsiMethod>();
  Map<PsiClass,List<PsiMethod>> classesToMethods=new HashMap<PsiClass,List<PsiMethod>>();
  for (  PsiMethod method : methods) {
    final PsiClass parentClass=method.getContainingClass();
    if (!"java.lang.Object".equals(parentClass.getQualifiedName())) {
      List<PsiMethod> hisMethods=classesToMethods.get(parentClass);
      if (hisMethods == null) {
        hisMethods=new ArrayList<PsiMethod>();
        classesToMethods.put(parentClass,hisMethods);
      }
      hisMethods.add(method);
    }
  }
  for (  final PsiClass aClass : classesToMethods.keySet()) {
    final List<PsiMethod> hisMethods=classesToMethods.get(aClass);
    for (Iterator iterator=hisMethods.iterator(); iterator.hasNext(); ) {
      PsiMethod hisMethod=(PsiMethod)iterator.next();
      final PsiElementProcessor.FindElement<PsiMethod> processor=new PsiElementProcessor.FindElement<PsiMethod>();
      aClass.getManager().getSearchHelper().processOverridingMethods(processor,hisMethod,aClass.getUseScope(),true);
      if (processor.isFound()) {
        iterator.remove();
        overridden.add(hisMethod);
      }
    }
  }
  for (  PsiMethod method : overridden) {
    boolean overrides;
    overrides=!method.hasModifierProperty(PsiModifier.ABSTRACT);
    int offset=method.getNameIdentifier().getTextRange().getStartOffset();
    LineMarkerInfo info=new LineMarkerInfo(LineMarkerInfo.OVERRIDEN_METHOD,method,offset,overrides ? OVERRIDEN_METHOD_MARKER_RENDERER : IMPLEMENTED_METHOD_MARKER_RENDERER);
    result.add(info);
  }
}
