{
  final Set<PsiMethod> overridden=new HashSet<PsiMethod>();
  Map<PsiClass,List<PsiMethod>> classesToMethods=new HashMap<PsiClass,List<PsiMethod>>();
  for (  PsiMethod method : methods) {
    final PsiClass parentClass=method.getContainingClass();
    if (!"java.lang.Object".equals(parentClass.getQualifiedName())) {
      List<PsiMethod> hisMethods=classesToMethods.get(parentClass);
      if (hisMethods == null) {
        hisMethods=new ArrayList<PsiMethod>();
        classesToMethods.put(parentClass,hisMethods);
      }
      hisMethods.add(method);
    }
  }
  for (  final PsiClass aClass : classesToMethods.keySet()) {
    final List<PsiMethod> hisMethods=classesToMethods.get(aClass);
    ClassInheritorsSearch.search(aClass).forEach(new Processor<PsiClass>(){
      public boolean process(      final PsiClass inheritor){
        PsiSubstitutor substitutor=TypeConversionUtil.getSuperClassSubstitutor(aClass,inheritor,PsiSubstitutor.EMPTY);
        for (Iterator<PsiMethod> iterator=hisMethods.iterator(); iterator.hasNext(); ) {
          PsiMethod hisMethod=iterator.next();
          final MethodSignature hisSignature=hisMethod.getSignature(substitutor);
          final PsiMethod derived=MethodSignatureUtil.findMethodBySignature(inheritor,hisSignature,false);
          if (derived != null && inheritor.getManager().getResolveHelper().isAccessible(hisMethod,derived,null)) {
            iterator.remove();
            overridden.add(hisMethod);
          }
        }
        return !hisMethods.isEmpty();
      }
    }
);
    if (hisMethods.size() != 0 && !(EjbRolesUtil.getEjbRolesUtil().getEjbRoles(aClass).length > 0)) {
      for (Iterator iterator=hisMethods.iterator(); iterator.hasNext(); ) {
        PsiMethod hisMethod=(PsiMethod)iterator.next();
        for (        EjbMethodRole role : EjbRolesUtil.getEjbRolesUtil().getEjbRoles(hisMethod)) {
          if ((role instanceof EjbDeclMethodRole) && ((EjbDeclMethodRole)role).findAllImplementations().length > 0) {
            iterator.remove();
            overridden.add(hisMethod);
            break;
          }
        }
      }
    }
  }
  for (  PsiMethod method : overridden) {
    boolean overrides;
    overrides=!method.hasModifierProperty(PsiModifier.ABSTRACT);
    int offset=method.getNameIdentifier().getTextRange().getStartOffset();
    LineMarkerInfo info=new LineMarkerInfo(LineMarkerInfo.OVERRIDEN_METHOD,method,offset,overrides ? OVERRIDEN_METHOD_MARKER_RENDERER : IMPLEMENTED_METHOD_MARKER_RENDERER);
    result.add(info);
  }
}
