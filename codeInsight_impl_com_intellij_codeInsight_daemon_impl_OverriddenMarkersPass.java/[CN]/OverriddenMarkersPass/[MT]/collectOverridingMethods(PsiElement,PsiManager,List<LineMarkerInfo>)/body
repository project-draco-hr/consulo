{
  PsiMethod method=(PsiMethod)element.getParent();
  if (method.getNameIdentifier().equals(element)) {
    if (!PsiUtil.canBeOverriden(method))     return;
    PsiClass parentClass=method.getContainingClass();
    if ("java.lang.Object".equals(parentClass.getQualifiedName()))     return;
    if (!myClassToFirstDerivedMap.containsKey(parentClass)) {
      final PsiClass derived=ClassInheritorsSearch.search(parentClass,false).findFirst();
      myClassToFirstDerivedMap.put(parentClass,derived);
    }
    PsiClass derived=myClassToFirstDerivedMap.get(parentClass);
    if (derived == null)     return;
    PsiSubstitutor substitutor=TypeConversionUtil.getSuperClassSubstitutor(parentClass,derived,PsiSubstitutor.EMPTY);
    if (substitutor == null)     substitutor=PsiSubstitutor.EMPTY;
    MethodSignature signature=method.getSignature(substitutor);
    PsiMethod method1=MethodSignatureUtil.findMethodBySuperSignature(derived,signature,false);
    if (method1 != null) {
      if (method1.hasModifierProperty(PsiModifier.STATIC) || (method.hasModifierProperty(PsiModifier.PACKAGE_LOCAL) && !manager.arePackagesTheSame(parentClass,derived))) {
        method1=null;
      }
    }
    boolean found=method1 != null;
    if (!found) {
      found=OverridingMethodsSearch.search(method,true).findFirst() != null;
    }
    if (found) {
      boolean overrides;
      overrides=!method.hasModifierProperty(PsiModifier.ABSTRACT);
      int offset=method.getNameIdentifier().getTextRange().getStartOffset();
      LineMarkerInfo info=new LineMarkerInfo(LineMarkerInfo.OVERRIDEN_METHOD,method,offset,overrides ? OVERRIDEN_METHOD_MARKER_RENDERER : IMPLEMENTED_METHOD_MARKER_RENDERER);
      result.add(info);
    }
  }
}
