{
  final Set<PsiMethod> overridden=new HashSet<PsiMethod>();
  Set<PsiClass> classes=new THashSet<PsiClass>();
  for (  PsiMethod method : methods) {
    ProgressManager.getInstance().checkCanceled();
    final PsiClass parentClass=method.getContainingClass();
    if (!"java.lang.Object".equals(parentClass.getQualifiedName())) {
      classes.add(parentClass);
    }
  }
  for (  final PsiClass aClass : classes) {
    AllOverridingMethodsSearch.search(aClass).forEach(new Processor<Pair<PsiMethod,PsiMethod>>(){
      public boolean process(      final Pair<PsiMethod,PsiMethod> pair){
        final PsiMethod superMethod=pair.getFirst();
        overridden.add(superMethod);
        methods.remove(superMethod);
        return !methods.isEmpty();
      }
    }
);
  }
  for (  PsiMethod method : overridden) {
    boolean overrides=!method.hasModifierProperty(PsiModifier.ABSTRACT);
    int offset=method.getTextOffset();
    LineMarkerInfo info=new LineMarkerInfo(LineMarkerInfo.MarkerType.OVERRIDEN_METHOD,method,offset,overrides ? OVERRIDEN_METHOD_MARKER_RENDERER : IMPLEMENTED_METHOD_MARKER_RENDERER);
    result.add(info);
  }
}
