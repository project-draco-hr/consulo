{
  super(new BorderLayout());
  myProject=project;
  myHelpId=helpId;
  myListName=name;
  myFavoritesTreeStructure=new FavoritesTreeStructure(project,myListName);
  DefaultMutableTreeNode root=new DefaultMutableTreeNode();
  root.setUserObject(myFavoritesTreeStructure.getRootElement());
  final DefaultTreeModel treeModel=new DefaultTreeModel(root);
  myTree=new Tree(treeModel){
    public void setRowHeight(    int i){
      super.setRowHeight(0);
    }
  }
;
  myBuilder=new FavoritesViewTreeBuilder(myProject,myTree,treeModel,myFavoritesTreeStructure,myListName);
  TreeUtil.installActions(myTree);
  UIUtil.setLineStyleAngled(myTree);
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(true);
  myTree.setLargeModel(true);
  new TreeSpeedSearch(myTree);
  ToolTipManager.sharedInstance().registerComponent(myTree);
  TreeToolTipHandler.install(myTree);
  myTree.setCellRenderer(new NodeRenderer(){
    public void customizeCellRenderer(    JTree tree,    Object value,    boolean selected,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      super.customizeCellRenderer(tree,value,selected,expanded,leaf,row,hasFocus);
      if (value instanceof DefaultMutableTreeNode) {
        DefaultMutableTreeNode node=(DefaultMutableTreeNode)value;
        if (node.getParent() == null || node.getParent().getParent() != null) {
          return;
        }
        Object userObject=node.getUserObject();
        if (userObject instanceof FavoritesTreeNodeDescriptor) {
          final FavoritesTreeNodeDescriptor favoritesTreeNodeDescriptor=(FavoritesTreeNodeDescriptor)userObject;
          AbstractTreeNode treeNode=favoritesTreeNodeDescriptor.getElement();
          final ItemPresentation presentation=treeNode.getPresentation();
          String locationString=presentation != null ? presentation.getLocationString() : null;
          if (locationString != null && locationString.length() > 0) {
            append(" (" + locationString + ")",SimpleTextAttributes.GRAY_ATTRIBUTES);
          }
 else {
            final String location=favoritesTreeNodeDescriptor.getLocation();
            if (location != null && location.length() > 0) {
              append(" (" + location + ")",SimpleTextAttributes.GRAY_ATTRIBUTES);
            }
          }
        }
      }
    }
  }
);
  JScrollPane scrollPane=ScrollPaneFactory.createScrollPane(myTree);
  myTreePopupHandler=PopupHandler.installPopupHandler(myTree,(ActionGroup)CustomizableActionsSchemas.getInstance().getCorrectedAction(IdeActions.GROUP_FAVORITES_VIEW_POPUP),ActionPlaces.FAVORITES_VIEW_POPUP,ActionManager.getInstance());
  add(scrollPane,BorderLayout.CENTER);
  EditSourceOnDoubleClickHandler.install(myTree);
  myTree.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if (!e.isPopupTrigger() && e.getClickCount() == 2) {
        OpenSourceUtil.openSourcesFrom(DataManager.getInstance().getDataContext(FavoritesTreeViewPanel.this),true);
      }
    }
  }
);
  myTree.addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_ENTER) {
        OpenSourceUtil.openSourcesFrom(DataManager.getInstance().getDataContext(FavoritesTreeViewPanel.this),false);
      }
    }
  }
);
  myCopyPasteDelegator=new CopyPasteManagerEx.CopyPasteDelegator(myProject,this){
    protected PsiElement[] getSelectedElements(){
      return getSelectedPsiElements();
    }
  }
;
  if (!ApplicationManager.getApplication().isHeadlessEnvironment()) {
    myTree.setTransferHandler(new TransferHandler(){
      public boolean canImport(      JComponent comp,      DataFlavor[] transferFlavors){
        for (        DataFlavor transferFlavor : transferFlavors) {
          if (transferFlavor.getHumanPresentableName().equals(ABSTRACT_TREE_NODE_TRANSFERABLE)) {
            return true;
          }
        }
        return false;
      }
    }
);
    new DropTarget(myTree,new MyDropTargetListener());
  }
}
