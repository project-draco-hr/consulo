{
  myProject=project;
  myHelpId=helpId;
  myName=name;
  setLayout(new BorderLayout());
  myAutoScrollToSourceHandler=new AutoScrollToSourceHandler(){
    protected boolean isAutoScrollMode(){
      return myFavoritesConfiguration.IS_AUTOSCROLL_TO_SOURCE;
    }
    protected void setAutoScrollMode(    boolean state){
      myFavoritesConfiguration.IS_AUTOSCROLL_TO_SOURCE=state;
    }
  }
;
  myFavoritesTreeStructure=new FavoritesTreeStructure(project);
  myFavoritesConfiguration=myFavoritesTreeStructure.getFavoritesConfiguration();
  DefaultMutableTreeNode root=new DefaultMutableTreeNode();
  root.setUserObject(myFavoritesTreeStructure.getRootElement());
  final DefaultTreeModel treeModel=new DefaultTreeModel(root);
  myTree=new Tree(treeModel){
    public void setRowHeight(    int i){
      super.setRowHeight(0);
    }
  }
;
  myBuilder=new FavoritesViewTreeBuilder(myProject,myTree,treeModel,myFavoritesTreeStructure);
  myAutoScrollToSourceHandler.install(myTree);
  TreeUtil.installActions(myTree);
  myTree.putClientProperty("JTree.lineStyle","Angled");
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(true);
  myTree.setLargeModel(true);
  new TreeSpeedSearch(myTree);
  myTree.setCellRenderer(new NodeRenderer(){
    public void customizeCellRenderer(    JTree tree,    Object value,    boolean selected,    boolean expanded,    boolean leaf,    int row,    boolean hasFocus){
      super.customizeCellRenderer(tree,value,selected,expanded,leaf,row,hasFocus);
      if (value instanceof DefaultMutableTreeNode) {
        DefaultMutableTreeNode node=(DefaultMutableTreeNode)value;
        if (node.getParent() == null || node.getParent().getParent() != null) {
          return;
        }
        Object userObject=node.getUserObject();
        if (userObject instanceof FavoritesTreeNodeDescriptor) {
          final FavoritesTreeNodeDescriptor favoritesTreeNodeDescriptor=((FavoritesTreeNodeDescriptor)userObject);
          AbstractTreeNode treeNode=favoritesTreeNodeDescriptor.getElement();
          String locationString=treeNode.getPresentation().getLocationString();
          if (locationString != null && locationString.length() > 0) {
            append(" (" + locationString + ")",SimpleTextAttributes.GRAY_ATTRIBUTES);
          }
 else {
            final String location=favoritesTreeNodeDescriptor.getLocation();
            if (location != null && location.length() > 0) {
              append(" (" + location + ")",SimpleTextAttributes.GRAY_ATTRIBUTES);
            }
          }
        }
      }
    }
  }
);
  JScrollPane scrollPane=ScrollPaneFactory.createScrollPane(myTree);
  PopupHandler.installPopupHandler(myTree,(ActionGroup)ActionManager.getInstance().getAction(IdeActions.GROUP_FAVORITES_VIEW_POPUP),ActionPlaces.FAVORITES_VIEW_POPUP,ActionManager.getInstance());
  add(scrollPane,BorderLayout.CENTER);
  add(createActionsToolbar(),BorderLayout.NORTH);
  EditSourceOnDoubleClickHandler.install(myTree);
  myCopyPasteDelegator=new CopyPasteManagerEx.CopyPasteDelegator(myProject,this){
    protected PsiElement[] getSelectedElements(){
      return getSelectedPsiElements();
    }
  }
;
}
