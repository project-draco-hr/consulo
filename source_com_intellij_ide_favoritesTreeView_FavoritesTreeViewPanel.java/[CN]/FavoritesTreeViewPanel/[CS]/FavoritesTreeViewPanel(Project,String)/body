{
  myProject=project;
  myHelpId=helpId;
  setLayout(new BorderLayout());
  myAutoScrollToSourceHandler=new AutoScrollToSourceHandler(myProject){
    protected boolean isAutoScrollMode(){
      return FavoritesTreeViewConfiguration.getInstance(myProject).IS_AUTOSCROLL_TO_SOURCE;
    }
    protected void setAutoScrollMode(    boolean state){
      FavoritesTreeViewConfiguration.getInstance(myProject).IS_AUTOSCROLL_TO_SOURCE=state;
    }
  }
;
  myFavoritesTreeStructure=FavoritesTreeStructure.getInstance(project);
  DefaultMutableTreeNode root=new DefaultMutableTreeNode();
  root.setUserObject(myFavoritesTreeStructure.getRootElement());
  final DefaultTreeModel treeModel=new DefaultTreeModel(root);
  myTree=new Tree(treeModel){
    public void setRowHeight(    int i){
      super.setRowHeight(0);
    }
  }
;
  myBuilder=new FavoritesViewTreeBuilder(myProject,myTree,treeModel,myFavoritesTreeStructure);
  myAutoScrollToSourceHandler.install(myTree);
  TreeUtil.installActions(myTree);
  myTree.putClientProperty("JTree.lineStyle","Angled");
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(true);
  myTree.setLargeModel(true);
  myTree.setCellRenderer(new NodeRenderer());
  JScrollPane scrollPane=ScrollPaneFactory.createScrollPane(myTree);
  PopupHandler.installPopupHandler(myTree,(ActionGroup)ActionManager.getInstance().getAction(IdeActions.GROUP_FAVORITES_VIEW_POPUP),ActionPlaces.FAVORITES_VIEW_POPUP,ActionManager.getInstance());
  add(scrollPane,BorderLayout.CENTER);
  add(createActionsToolbar(),BorderLayout.NORTH);
  EditSourceOnDoubleClickHandler.install(myTree);
  myCopyPasteDelegator=new CopyPasteManagerEx.CopyPasteDelegator(myProject,this){
    protected PsiElement[] getSelectedElements(){
      return getSelectedPsiElements();
    }
  }
;
}
