{
  final GrMethodCallExpression expression=(GrMethodCallExpression)element;
  final GrClosableBlock block=expression.getClosureArguments()[0];
  final GrParameterList parameterList=block.getParameterList();
  final GrParameter[] parameters=parameterList.getParameters();
  String var;
  if (parameters.length == 1) {
    var=parameters[0].getText();
    var=StringUtil.replace(var,GrModifier.DEF,"");
  }
 else {
    var="it";
  }
  final GrExpression invokedExpression=expression.getInvokedExpression();
  GrExpression qualifier=((GrReferenceExpression)invokedExpression).getQualifierExpression();
  final GroovyPsiElementFactory elementFactory=GroovyPsiElementFactory.getInstance(element.getProject());
  if (qualifier == null) {
    qualifier=elementFactory.createExpressionFromText("this");
  }
  StringBuilder builder=new StringBuilder();
  builder.append("for (").append(var).append(" in ").append(qualifier.getText()).append(") {\n");
  String text=block.getText();
  final PsiElement blockArrow=block.getArrow();
  int index;
  if (blockArrow != null) {
    index=blockArrow.getStartOffsetInParent() + blockArrow.getTextLength();
  }
 else {
    index=1;
  }
  while (index < text.length() && Character.isWhitespace(text.charAt(index)))   index++;
  text=text.substring(index,text.length() - 1);
  builder.append(text);
  builder.append("}");
  final GrStatement statement=elementFactory.createStatementFromText(builder.toString());
  final GrForStatement forStatement=(GrForStatement)expression.replaceWithStatement(statement);
  final GrForClause clause=forStatement.getClause();
  GrVariable variable=clause.getDeclaredVariables()[0];
  if (variable == null)   return;
  if (ApplicationManager.getApplication().isUnitTestMode())   return;
  final PsiDocumentManager documentManager=PsiDocumentManager.getInstance(project);
  final Document doc=documentManager.getDocument(element.getContainingFile());
  if (doc == null)   return;
  documentManager.doPostponedOperationsAndUnblockDocument(doc);
  editor.getCaretModel().moveToOffset(variable.getTextOffset());
  new VariableInplaceRenamer(variable,editor).performInplaceRename();
}
