{
  methodObject("action","javax.swing.Action","groovy.swing.factory.ActionFactory");
  methodObject("actions",CommonClassNames.JAVA_UTIL_LIST,"groovy.swing.factory.CollectionFactory");
  methodObject("map",CommonClassNames.JAVA_UTIL_MAP,"groovy.swing.factory.MapFactory");
  methodObject("imageIcon","javax.swing.ImageIcon","groovy.swing.factory.ImageIconFactory",ImmutableMap.<String,NamedArgumentDescriptor>builder().put("image",new NamedArgumentDescriptor.TypeCondition(type("java.awt.Image"))).put("url",new NamedArgumentDescriptor.TypeCondition(type("java.net.URL"))).put("file",NamedArgumentDescriptor.SIMPLE_ON_TOP).put("resource",NamedArgumentDescriptor.SIMPLE_ON_TOP).put("class",NamedArgumentDescriptor.SIMPLE_ON_TOP).put("description",NamedArgumentDescriptor.TYPE_STRING).build());
  methodObject("buttonGroup","javax.swing.BoxLayout","groovy.swing.factory.ButtonGroupFactory");
  methodObject("noparent",CommonClassNames.JAVA_UTIL_LIST,"groovy.swing.factory.CollectionFactory");
  registerExplicitMethod("keyStrokeAction","createKeyStrokeAction");
  methodObject("bind","org.codehaus.groovy.binding.FullBinding","groovy.swing.factory.BindFactory",ImmutableMap.<String,NamedArgumentDescriptor>builder().put("source",NamedArgumentDescriptor.SIMPLE_ON_TOP).put("target",NamedArgumentDescriptor.SIMPLE_ON_TOP).put("update",NamedArgumentDescriptor.SIMPLE_ON_TOP).put("targetProperty",NamedArgumentDescriptor.TYPE_STRING).put("mutual",NamedArgumentDescriptor.SIMPLE_ON_TOP).put("sourceEvent",NamedArgumentDescriptor.TYPE_STRING).put("sourceValue",NamedArgumentDescriptor.TYPE_CLOSURE).put("sourceProperty",NamedArgumentDescriptor.TYPE_STRING).put("value",NamedArgumentDescriptor.SIMPLE_ON_TOP).put("bind",NamedArgumentDescriptor.SIMPLE_ON_TOP).put("group",NamedArgumentDescriptor.SIMPLE_ON_TOP).build());
  methodObject("bindProxy","org.codehaus.groovy.binding.BindingProxy","groovy.swing.factory.BindProxyFactory",ImmutableMap.<String,NamedArgumentDescriptor>of("bind",NamedArgumentDescriptor.SIMPLE_ON_TOP));
  methodObject("bindGroup","org.codehaus.groovy.binding.AggregateBinding","groovy.swing.factory.BindGroupFactory",ImmutableMap.<String,NamedArgumentDescriptor>of("bind",NamedArgumentDescriptor.SIMPLE_ON_TOP));
  methodObject("widget","java.awt.Component","groovy.swing.factory.WidgetFactory",ImmutableMap.<String,NamedArgumentDescriptor>of("widget",new NamedArgumentDescriptor.TypeCondition(type("java.awt.Component"))));
  methodObject("container","java.awt.Component","groovy.swing.factory.WidgetFactory",ImmutableMap.<String,NamedArgumentDescriptor>of("container",new NamedArgumentDescriptor.TypeCondition(type("java.awt.Component"))));
  methodObject("bean",CommonClassNames.JAVA_LANG_OBJECT,"groovy.swing.factory.WidgetFactory",ImmutableMap.<String,NamedArgumentDescriptor>of("bean",NamedArgumentDescriptor.SIMPLE_ON_TOP));
  methodObject("dialog","javax.swing.JDialog","groovy.swing.factory.DialogFactory",ImmutableMap.<String,NamedArgumentDescriptor>builder().put("owner",NamedArgumentDescriptor.SIMPLE_ON_TOP).put("defaultButtonProperty",NamedArgumentDescriptor.SIMPLE_ON_TOP).put("pack",NamedArgumentDescriptor.SIMPLE_ON_TOP).put("show",NamedArgumentDescriptor.SIMPLE_ON_TOP).build());
  methodObject("fileChooser","javax.swing.JFileChooser",null);
  methodObject("frame","javax.swing.JFrame","groovy.swing.factory.FrameFactory",ImmutableMap.<String,NamedArgumentDescriptor>of("pack",NamedArgumentDescriptor.SIMPLE_ON_TOP,"show",NamedArgumentDescriptor.SIMPLE_ON_TOP));
  methodObject("optionPane","javax.swing.JOptionPane",null);
  methodObject("window","javax.swing.JWindow","groovy.swing.factory.WindowFactory",ImmutableMap.<String,NamedArgumentDescriptor>of("pack",NamedArgumentDescriptor.SIMPLE_ON_TOP,"show",NamedArgumentDescriptor.SIMPLE_ON_TOP,"owner",NamedArgumentDescriptor.SIMPLE_ON_TOP));
  methodObject("button","javax.swing.JButton","groovy.swing.factory.RichActionWidgetFactory");
  methodObject("checkBox","javax.swing.JCheckBox","groovy.swing.factory.RichActionWidgetFactory");
  methodObject("checkBoxMenuItem","javax.swing.JCheckBoxMenuItem","groovy.swing.factory.RichActionWidgetFactory");
  methodObject("menuItem","javax.swing.JMenuItem","groovy.swing.factory.RichActionWidgetFactory");
  methodObject("radioButton","javax.swing.JRadioButton","groovy.swing.factory.RichActionWidgetFactory");
  methodObject("radioButtonMenuItem","javax.swing.JRadioButtonMenuItem","groovy.swing.factory.RichActionWidgetFactory");
  methodObject("toggleButton","javax.swing.JToggleButton","groovy.swing.factory.RichActionWidgetFactory");
  methodObject("editorPane","javax.swing.JEditorPane","groovy.swing.factory.TextArgWidgetFactory");
  methodObject("label","javax.swing.JLabel","groovy.swing.factory.TextArgWidgetFactory");
  methodObject("passwordField","javax.swing.JPasswordField","groovy.swing.factory.TextArgWidgetFactory");
  methodObject("textArea","javax.swing.JTextArea","groovy.swing.factory.TextArgWidgetFactory");
  methodObject("textField","javax.swing.JTextField","groovy.swing.factory.TextArgWidgetFactory");
  methodObject("textPane","javax.swing.JTextPane","groovy.swing.factory.TextArgWidgetFactory");
  methodObject("formattedTextField","javax.swing.JFormattedTextField","groovy.swing.factory.FormattedTextFactory",ImmutableMap.<String,NamedArgumentDescriptor>of("format",new NamedArgumentDescriptor.TypeCondition(type("java.text.Format")),"value",NamedArgumentDescriptor.SIMPLE_ON_TOP));
  methodObject("desktopPane","javax.swing.JDesktopPane",null);
  methodObject("internalFrame","javax.swing.JInternalFrame","groovy.swing.factory.InternalFrameFactory");
  methodObject("colorChooser","javax.swing.JColorChooser",null);
  methodObject("comboBox","javax.swing.JComboBox","groovy.swing.factory.ComboBoxFactory",ImmutableMap.<String,NamedArgumentDescriptor>of("items",NamedArgumentDescriptor.SIMPLE_ON_TOP));
  methodObject("list","javax.swing.JList","groovy.swing.factory.ListFactory",ImmutableMap.<String,NamedArgumentDescriptor>of("items",NamedArgumentDescriptor.SIMPLE_ON_TOP));
  methodObject("progressBar","javax.swing.JProgressBar",null);
  methodObject("separator","javax.swing.JSeparator","groovy.swing.factory.SeparatorFactory");
  methodObject("scrollBar","javax.swing.JScrollBar",null);
  methodObject("slider","javax.swing.JSlider",null);
  methodObject("spinner","javax.swing.JSpinner",null);
  methodObject("tree","javax.swing.JTree",null);
  methodObject("menu","javax.swing.JMenu",null);
  methodObject("menuBar","javax.swing.JMenuBar",null);
  methodObject("popupMenu","javax.swing.JPopupMenu",null);
  methodObject("panel","javax.swing.JPanel",null);
  methodObject("scrollPane","javax.swing.JScrollPane","groovy.swing.factory.ScrollPaneFactory");
  methodObject("splitPane","javax.swing.JSplitPane","groovy.swing.factory.SplitPaneFactory");
  methodObject("tabbedPane","javax.swing.JTabbedPane","groovy.swing.factory.TabbedPaneFactory");
  methodObject("toolBar","javax.swing.JToolBar",null);
  methodObject("viewport","javax.swing.JViewport",null);
  methodObject("layeredPane","javax.swing.JLayeredPane",null);
  methodObject("boundedRangeModel","javax.swing.DefaultBoundedRangeModel",null);
  methodObject("spinnerDateModel","javax.swing.SpinnerDateModel",null);
  methodObject("spinnerListModel","javax.swing.SpinnerListModel",null);
  methodObject("spinnerNumberModel","javax.swing.SpinnerNumberModel",null);
  methodObject("table","javax.swing.JTable","groovy.swing.factory.TableFactory");
  methodObject("tableColumn","javax.swing.table.TableColumn",null);
  methodObject("tableModel","javax.swing.table.TableModel","groovy.swing.factory.TableModelFactory",ImmutableMap.<String,NamedArgumentDescriptor>of("tableModel",new NamedArgumentDescriptor.TypeCondition(type("javax.swing.table.TableModel")),"model",new NamedArgumentDescriptor.TypeCondition(type("groovy.model.ValueModel")),"list",NamedArgumentDescriptor.SIMPLE_ON_TOP));
  methodObject("propertyColumn","javax.swing.table.TableColumn","groovy.swing.factory.PropertyColumnFactory",ImmutableMap.<String,NamedArgumentDescriptor>of("propertyName",NamedArgumentDescriptor.TYPE_STRING,"header",NamedArgumentDescriptor.SIMPLE_ON_TOP,"type",new NamedArgumentDescriptor.TypeCondition(type(CommonClassNames.JAVA_LANG_CLASS)),"editable",NamedArgumentDescriptor.SIMPLE_ON_TOP));
  methodObject("closureColumn","javax.swing.table.TableColumn","groovy.swing.factory.ClosureColumnFactory",ImmutableMap.<String,NamedArgumentDescriptor>of("header",NamedArgumentDescriptor.SIMPLE_ON_TOP,"read",new NamedArgumentDescriptor.TypeCondition(type(GroovyCommonClassNames.GROOVY_LANG_CLOSURE)),"write",new NamedArgumentDescriptor.TypeCondition(type(GroovyCommonClassNames.GROOVY_LANG_CLOSURE)),"type",new NamedArgumentDescriptor.TypeCondition(type(CommonClassNames.JAVA_LANG_CLASS))));
  methodObject("columnModel","javax.swing.table.TableColumnModel","groovy.swing.factory.ColumnModelFactory");
  methodObject("column","javax.swing.table.TableColumn","groovy.swing.factory.ColumnFactory",ImmutableMap.<String,NamedArgumentDescriptor>of("width",NamedArgumentDescriptor.SIMPLE_ON_TOP));
  methodObject("borderLayout","java.awt.BorderLayout","groovy.swing.factory.LayoutFactory");
  methodObject("cardLayout","java.awt.CardLayout","groovy.swing.factory.LayoutFactory");
  methodObject("flowLayout","java.awt.FlowLayout","groovy.swing.factory.LayoutFactory");
  methodObject("gridLayout","java.awt.GridLayout","groovy.swing.factory.LayoutFactory");
  methodObject("overlayLayout","javax.swing.OverlayLayout","groovy.swing.factory.LayoutFactory");
  methodObject("springLayout","javax.swing.SpringLayout","groovy.swing.factory.LayoutFactory");
  methodObject("gridBagLayout","java.awt.GridBagLayout","groovy.swing.factory.LayoutFactory");
  methodObject("gridBagConstraints","java.awt.GridBagConstraints","groovy.swing.factory.LayoutFactory");
  methodObject("gbc","java.awt.GridBagConstraints","groovy.swing.factory.LayoutFactory");
  methodObject("boxLayout","javax.swing.BoxLayout","groovy.swing.factory.BoxLayoutFactory",ImmutableMap.<String,NamedArgumentDescriptor>of("axis",NamedArgumentDescriptor.SIMPLE_ON_TOP));
  methodObject("box","javax.swing.Box","groovy.swing.factory.BoxFactory",ImmutableMap.<String,NamedArgumentDescriptor>of("axis",new NamedArgumentDescriptor.TypeCondition(type("java.lang.Number"))));
  methodObject("hbox","javax.swing.Box","groovy.swing.factory.HBoxFactory");
  methodObject("hglue","java.awt.Component","groovy.swing.factory.HGlueFactory");
  methodObject("hstrut","java.awt.Component","groovy.swing.factory.HStrutFactory",ImmutableMap.<String,NamedArgumentDescriptor>of("width",new NamedArgumentDescriptor.TypeCondition(type("java.lang.Number"))));
  methodObject("vbox","javax.swing.Box","groovy.swing.factory.VBoxFactory");
  methodObject("vglue","java.awt.Component","groovy.swing.factory.VGlueFactory");
  methodObject("vstrut","java.awt.Component","groovy.swing.factory.VStrutFactory",ImmutableMap.<String,NamedArgumentDescriptor>of("height",new NamedArgumentDescriptor.TypeCondition(type("java.lang.Number"))));
  methodObject("glue","java.awt.Component","groovy.swing.factory.GlueFactory");
  methodObject("rigidArea","java.awt.Component","groovy.swing.factory.RigidAreaFactory",ImmutableMap.<String,NamedArgumentDescriptor>of("size",new NamedArgumentDescriptor.TypeCondition(type("java.awt.Dimension")),"height",new NamedArgumentDescriptor.TypeCondition(type("java.lang.Number")),"width",new NamedArgumentDescriptor.TypeCondition(type("java.lang.Number"))));
  methodObject("tableLayout","groovy.swing.impl.TableLayout","groovy.swing.factory.TableLayoutFactory");
  methodObject("tr","groovy.swing.impl.TableLayoutRow","groovy.swing.factory.TRFactory");
  methodObject("td","groovy.swing.impl.TableLayoutCell","groovy.swing.factory.TDFactory");
  methodObject("lineBorder","javax.swing.border.LineBorder","groovy.swing.factory.LineBorderFactory",ImmutableMap.<String,NamedArgumentDescriptor>of("parent",NamedArgumentDescriptor.SIMPLE_ON_TOP,"color",NamedArgumentDescriptor.SIMPLE_ON_TOP,"thickness",NamedArgumentDescriptor.SIMPLE_ON_TOP,"roundedCorners",NamedArgumentDescriptor.SIMPLE_ON_TOP));
  NamedArgumentDescriptor namedArgColor=new NamedArgumentDescriptor.TypeCondition(type("java.awt.Color"));
  Map<String,NamedArgumentDescriptor> m=ImmutableMap.<String,NamedArgumentDescriptor>builder().put("parent",NamedArgumentDescriptor.SIMPLE_ON_TOP).put("highlight",namedArgColor).put("shadow",namedArgColor).put("highlightOuter",namedArgColor).put("highlightInner",namedArgColor).put("shadowOuter",namedArgColor).put("shadowInner",namedArgColor).build();
  methodObject("loweredBevelBorder","javax.swing.border.Border","groovy.swing.factory.BevelBorderFactory",m);
  methodObject("raisedBevelBorder","javax.swing.border.Border","groovy.swing.factory.BevelBorderFactory",m);
  m=ImmutableMap.of("parent",NamedArgumentDescriptor.SIMPLE_ON_TOP,"highlight",namedArgColor,"shadow",namedArgColor);
  methodObject("etchedBorder","javax.swing.border.Border","groovy.swing.factory.EtchedBorderFactory",m);
  methodObject("loweredEtchedBorder","javax.swing.border.Border","groovy.swing.factory.EtchedBorderFactory",m);
  methodObject("raisedEtchedBorder","javax.swing.border.Border","groovy.swing.factory.EtchedBorderFactory",m);
  methodObject("titledBorder","javax.swing.border.TitledBorder","groovy.swing.factory.TitledBorderFactory",ImmutableMap.<String,NamedArgumentDescriptor>builder().put("parent",NamedArgumentDescriptor.SIMPLE_ON_TOP).put("title",NamedArgumentDescriptor.SIMPLE_ON_TOP).put("position",NamedArgumentDescriptor.SIMPLE_ON_TOP).put("justification",NamedArgumentDescriptor.SIMPLE_ON_TOP).put("border",new NamedArgumentDescriptor.TypeCondition(type("javax.swing.border.Border"))).put("color",namedArgColor).put("font",new NamedArgumentDescriptor.TypeCondition(type("java.awt.Font"))).build());
  methodObject("emptyBorder","javax.swing.border.Border","groovy.swing.factory.EmptyBorderFactory");
  methodObject("emptyBorder","javax.swing.border.Border","groovy.swing.factory.EmptyBorderFactory");
  methodObject("emptyBorder","javax.swing.border.Border","groovy.swing.factory.EmptyBorderFactory",ImmutableMap.of("parent",NamedArgumentDescriptor.SIMPLE_ON_TOP,"top",NamedArgumentDescriptor.TYPE_INTEGER,"left",NamedArgumentDescriptor.TYPE_INTEGER,"bottom",NamedArgumentDescriptor.TYPE_INTEGER,"right",NamedArgumentDescriptor.TYPE_INTEGER));
  methodObject("compoundBorder","javax.swing.border.CompoundBorder","groovy.swing.factory.CompoundBorderFactory",ImmutableMap.of("parent",NamedArgumentDescriptor.SIMPLE_ON_TOP,"inner",new NamedArgumentDescriptor.TypeCondition(type("javax.swing.border.Border")),"outer",new NamedArgumentDescriptor.TypeCondition(type("javax.swing.border.Border"))));
  methodObject("matteBorder","javax.swing.border.Border","groovy.swing.factory.MatteBorderFactory",ImmutableMap.<String,NamedArgumentDescriptor>builder().put("parent",NamedArgumentDescriptor.SIMPLE_ON_TOP).put("icon",NamedArgumentDescriptor.SIMPLE_ON_TOP).put("color",NamedArgumentDescriptor.SIMPLE_ON_TOP).put("size",NamedArgumentDescriptor.SIMPLE_ON_TOP).put("top",NamedArgumentDescriptor.SIMPLE_ON_TOP).put("left",NamedArgumentDescriptor.SIMPLE_ON_TOP).put("bottom",NamedArgumentDescriptor.SIMPLE_ON_TOP).put("right",NamedArgumentDescriptor.SIMPLE_ON_TOP).build());
  methodObject("tableCellRenderer","groovy.swing.impl.ClosureRenderer","groovy.swing.factory.RendererFactory");
  methodObject("listCellRenderer","groovy.swing.impl.ClosureRenderer","groovy.swing.factory.RendererFactory");
  methodObject("cellRenderer","groovy.swing.impl.ClosureRenderer","groovy.swing.factory.RendererFactory");
  methodObject("headerRenderer","groovy.swing.impl.ClosureRenderer","groovy.swing.factory.RendererFactory");
  methodObject("onRender",CommonClassNames.JAVA_UTIL_MAP,"groovy.swing.factory.RendererUpdateFactory");
  methodObject("cellEditor","groovy.swing.impl.ClosureCellEditor","groovy.swing.factory.CellEditorFactory");
  methodObject("editorValue",CommonClassNames.JAVA_UTIL_MAP,"groovy.swing.factory.CellEditorGetValueFactory");
  methodObject("prepareEditor",CommonClassNames.JAVA_UTIL_MAP,"groovy.swing.factory.CellEditorPrepareFactory");
}
