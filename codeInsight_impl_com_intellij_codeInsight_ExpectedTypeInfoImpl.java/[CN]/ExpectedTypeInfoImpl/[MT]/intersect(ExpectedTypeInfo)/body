{
  ExpectedTypeInfoImpl info1=(ExpectedTypeInfoImpl)info;
  LOG.assertTrue(!(type instanceof PsiArrayType) && !(info1.type instanceof PsiArrayType));
  if (kind == TYPE_STRICTLY) {
    if (info1.kind == TYPE_STRICTLY) {
      if (dimCount != info1.dimCount)       return ExpectedTypeInfo.EMPTY;
      if (info1.type.equals(type))       return new ExpectedTypeInfoImpl[]{this};
    }
 else {
      return info1.intersect(this);
    }
  }
 else   if (kind == TYPE_OR_SUBTYPE) {
    if (info1.kind == TYPE_STRICTLY) {
      if (dimCount != info1.dimCount)       return ExpectedTypeInfo.EMPTY;
      if (type.isAssignableFrom(info1.type))       return new ExpectedTypeInfoImpl[]{info1};
    }
 else     if (info1.kind == TYPE_OR_SUBTYPE) {
      PsiType type=dimCount == info1.dimCount ? this.type : getType();
      PsiType otherType=dimCount == info1.dimCount ? info1.type : info1.getType();
      if (type.isAssignableFrom(otherType))       return new ExpectedTypeInfoImpl[]{info1};
 else       if (otherType.isAssignableFrom(type))       return new ExpectedTypeInfoImpl[]{this};
    }
 else {
      return info1.intersect(this);
    }
  }
 else   if (kind == TYPE_OR_SUPERTYPE) {
    if (info1.kind == TYPE_STRICTLY) {
      if (dimCount != info1.dimCount)       return ExpectedTypeInfo.EMPTY;
      if (info1.type.isAssignableFrom(type))       return new ExpectedTypeInfoImpl[]{info1};
    }
 else     if (info1.kind == TYPE_OR_SUBTYPE) {
      PsiType type=dimCount == info1.dimCount ? this.type : getType();
      PsiType otherType=dimCount == info1.dimCount ? info1.type : info1.getType();
      if (otherType.isAssignableFrom(type))       return new ExpectedTypeInfoImpl[]{this};
    }
 else     if (info1.kind == TYPE_OR_SUPERTYPE) {
      PsiType type=dimCount == info1.dimCount ? this.type : getType();
      PsiType otherType=dimCount == info1.dimCount ? info1.type : info1.getType();
      if (type.isAssignableFrom(otherType))       return new ExpectedTypeInfoImpl[]{this};
 else       if (otherType.isAssignableFrom(type))       return new ExpectedTypeInfoImpl[]{info1};
    }
 else {
      return info1.intersect(this);
    }
  }
  return ExpectedTypeInfo.EMPTY;
}
