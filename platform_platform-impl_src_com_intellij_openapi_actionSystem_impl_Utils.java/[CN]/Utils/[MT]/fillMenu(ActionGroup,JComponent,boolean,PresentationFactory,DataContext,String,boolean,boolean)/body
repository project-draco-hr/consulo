{
  final ActionCallback menuBuilt=new ActionCallback();
  final boolean checked=group instanceof CheckedActionGroup;
  final ArrayList<AnAction> list=new ArrayList<AnAction>();
  expandActionGroup(group,list,presentationFactory,context,place,ActionManager.getInstance());
  final boolean fixMacScreenMenu=SystemInfo.isMacSystemMenu && isWindowMenu && Registry.is("actionSystem.mac.screenMenuNotUpdatedFix");
  final ArrayList<Component> children=new ArrayList<Component>();
  for (int i=0, size=list.size(); i < size; i++) {
    final AnAction action=list.get(i);
    if (action instanceof AnSeparator) {
      if (i > 0 && i < size - 1) {
        component.add(new JPopupMenu.Separator(){
          @Override public Insets getInsets(){
            final Insets insets=super.getInsets();
            final boolean fix=UIUtil.isUnderGTKLookAndFeel() && getBorder() != null && insets.top + insets.bottom == 0;
            return fix ? new Insets(JBUI.scale(2),insets.left,JBUI.scale(3),insets.right) : insets;
          }
          @Override protected void paintComponent(          Graphics g){
            if (UIUtil.isUnderWindowsClassicLookAndFeel() || UIUtil.isUnderDarcula() || UIUtil.isUnderWindowsLookAndFeel()) {
              g.setColor(component.getBackground());
              g.fillRect(0,0,getWidth(),getHeight());
            }
            super.paintComponent(g);
          }
        }
);
      }
    }
 else     if (action instanceof ActionGroup && !(((ActionGroup)action).canBePerformed(context) && !hasVisibleChildren((ActionGroup)action,presentationFactory,context,place))) {
      ActionMenu menu=new ActionMenu(context,place,(ActionGroup)action,presentationFactory,enableMnemonics,false);
      component.add(menu);
      children.add(menu);
    }
 else {
      final ActionMenuItem each=new ActionMenuItem(action,presentationFactory.getPresentation(action),place,context,enableMnemonics,!fixMacScreenMenu,checked);
      component.add(each);
      children.add(each);
    }
  }
  if (list.isEmpty()) {
    final ActionMenuItem each=new ActionMenuItem(EMPTY_MENU_FILLER,presentationFactory.getPresentation(EMPTY_MENU_FILLER),place,context,enableMnemonics,!fixMacScreenMenu,checked);
    component.add(each);
    children.add(each);
  }
  if (fixMacScreenMenu) {
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        for (        Component each : children) {
          if (each.getParent() != null && each instanceof ActionMenuItem) {
            ((ActionMenuItem)each).prepare();
          }
        }
        menuBuilt.setDone();
      }
    }
);
  }
 else {
    menuBuilt.setDone();
  }
  menuBuilt.doWhenDone(new Runnable(){
    public void run(){
      if (!mayDataContextBeInvalid)       return;
      if (IdeFocusManager.getInstance(null).isFocusBeingTransferred()) {
        IdeFocusManager.getInstance(null).doWhenFocusSettlesDown(new Runnable(){
          public void run(){
            if (!component.isShowing())             return;
            DataContext context=DataManager.getInstance().getDataContext();
            expandActionGroup(group,new ArrayList<AnAction>(),presentationFactory,context,place,ActionManager.getInstance());
            for (            Component each : children) {
              if (each instanceof ActionMenuItem) {
                ((ActionMenuItem)each).updateContext(context);
              }
 else               if (each instanceof ActionMenu) {
                ((ActionMenu)each).updateContext(context);
              }
            }
          }
        }
);
      }
    }
  }
);
}
