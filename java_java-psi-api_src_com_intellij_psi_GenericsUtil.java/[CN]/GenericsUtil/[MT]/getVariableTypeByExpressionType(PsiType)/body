{
  PsiType transformed=type.accept(new PsiTypeVisitor<PsiType>(){
    @Override public PsiType visitArrayType(    PsiArrayType arrayType){
      PsiType componentType=arrayType.getComponentType();
      PsiType type=componentType.accept(this);
      if (type == componentType)       return arrayType;
      return type.createArrayType();
    }
    @Override public PsiType visitType(    PsiType type){
      return type;
    }
    @Override public PsiType visitWildcardType(    final PsiWildcardType wildcardType){
      final PsiType bound=wildcardType.getBound();
      PsiManager manager=wildcardType.getManager();
      if (bound != null) {
        final PsiType acceptedBound=bound.accept(this);
        if (acceptedBound instanceof PsiWildcardType) {
          if (((PsiWildcardType)acceptedBound).isExtends() != wildcardType.isExtends())           return PsiWildcardType.createUnbounded(manager);
          return acceptedBound;
        }
        if (acceptedBound.equals(bound))         return wildcardType;
        return wildcardType.isExtends() ? PsiWildcardType.createExtends(manager,acceptedBound) : PsiWildcardType.createSuper(manager,acceptedBound);
      }
      return wildcardType;
    }
    @Override public PsiType visitCapturedWildcardType(    PsiCapturedWildcardType capturedWildcardType){
      return capturedWildcardType.getWildcard().accept(this);
    }
    @Override public PsiType visitClassType(    PsiClassType classType){
      PsiClassType.ClassResolveResult resolveResult=classType.resolveGenerics();
      PsiClass aClass=resolveResult.getElement();
      if (aClass == null)       return classType;
      boolean toExtend=false;
      PsiSubstitutor substitutor=PsiSubstitutor.EMPTY;
      for (      PsiTypeParameter typeParameter : PsiUtil.typeParametersIterable(aClass)) {
        PsiType typeArgument=resolveResult.getSubstitutor().substitute(typeParameter);
        if (typeArgument instanceof PsiCapturedWildcardType)         toExtend=true;
        if (typeArgument instanceof PsiWildcardType && ((PsiWildcardType)typeArgument).getBound() instanceof PsiIntersectionType) {
          toExtend=true;
        }
        PsiType toPut;
        if (typeArgument == null) {
          toPut=null;
        }
 else {
          final PsiType accepted=typeArgument.accept(this);
          if (typeArgument instanceof PsiIntersectionType) {
            toPut=PsiWildcardType.createExtends(typeParameter.getManager(),accepted);
          }
 else {
            toPut=accepted;
          }
        }
        substitutor=substitutor.put(typeParameter,toPut);
      }
      final PsiAnnotation[] applicableAnnotations=classType.getApplicableAnnotations();
      if (substitutor == PsiSubstitutor.EMPTY && !toExtend && applicableAnnotations.length == 0 && !(aClass instanceof PsiTypeParameter))       return classType;
      PsiManager manager=aClass.getManager();
      PsiType result=JavaPsiFacade.getInstance(manager.getProject()).getElementFactory().createType(aClass,substitutor,PsiUtil.getLanguageLevel(aClass),applicableAnnotations);
      if (toExtend)       result=PsiWildcardType.createExtends(manager,result);
      return result;
    }
  }
);
  PsiType componentType=transformed != null ? transformed.getDeepComponentType() : null;
  if (componentType instanceof PsiWildcardType) {
    componentType=((PsiWildcardType)componentType).getExtendsBound();
    int dims=transformed.getArrayDimensions();
    for (int i=0; i < dims; i++)     componentType=componentType.createArrayType();
    return componentType;
  }
  return transformed;
}
