{
  try {
    if (mySkipThisMethod) {
      mySkipThisMethod=false;
      return true;
    }
    if (myPosition != null) {
      final SourcePosition locationPosition=ApplicationManager.getApplication().runReadAction(new Computable<SourcePosition>(){
        public SourcePosition compute(){
          return ContextUtil.getSourcePosition(context);
        }
      }
);
      if (locationPosition == null)       return true;
      int frameCount=-1;
      if (context.getFrameProxy() != null) {
        try {
          frameCount=context.getFrameProxy().threadProxy().frameCount();
        }
 catch (        EvaluateException e) {
        }
      }
      if (myPosition.getFile().equals(locationPosition.getFile()) && myPosition.getLine() == locationPosition.getLine() && myFrameCount == frameCount) {
        return true;
      }
    }
    DebuggerSettings settings=DebuggerSettings.getInstance();
    if (settings.SKIP_SYNTHETIC_METHODS) {
      Location location=context.getFrameProxy().location();
      Method method=location.method();
      if (method != null) {
        if (myVirtualMachineProxy.canGetSyntheticAttribute() ? method.isSynthetic() : method.name().indexOf('$') >= 0) {
          return true;
        }
      }
    }
    if (!myIgnoreFilters) {
      if (settings.SKIP_GETTERS) {
        boolean isGetter=ApplicationManager.getApplication().runReadAction(new Computable<Boolean>(){
          public Boolean compute(){
            PsiMethod psiMethod=PsiTreeUtil.getParentOfType(PositionUtil.getContextElement(context),PsiMethod.class);
            if (psiMethod == null)             return Boolean.FALSE;
            return new Boolean(PropertyUtil.isSimplePropertyGetter(psiMethod));
          }
        }
).booleanValue();
        if (isGetter) {
          mySkipThisMethod=isGetter;
          return true;
        }
      }
      if (settings.SKIP_CONSTRUCTORS) {
        Location location=context.getFrameProxy().location();
        Method method=location.method();
        if (method != null && method.isConstructor()) {
          mySkipThisMethod=true;
          return true;
        }
      }
    }
    return false;
  }
 catch (  VMDisconnectedException e) {
    return false;
  }
catch (  EvaluateException e) {
    LOG.error(e);
    return false;
  }
}
