{
  int textLength=text.length;
  if (view.getEditor().myDisableRtl || !Bidi.requiresBidi(text,0,textLength)) {
    return Collections.singletonList(new BidiRun(textLength));
  }
  List<BidiRun> runs=new ArrayList<BidiRun>();
  int flags=view.getBidiFlags();
  if (startOffsetInEditor >= 0) {
    int lastOffset=startOffsetInEditor;
    IElementType lastToken=null;
    HighlighterIterator iterator=view.getEditor().getHighlighter().createIterator(startOffsetInEditor);
    int endOffsetInEditor=startOffsetInEditor + textLength;
    while (!iterator.atEnd() && iterator.getStart() < endOffsetInEditor) {
      int relStartOffset=Math.max(0,iterator.getStart() - startOffsetInEditor);
      IElementType currentToken=iterator.getTokenType();
      String lcPrefix=getLineCommentPrefix(currentToken);
      if (!StringUtil.isEmpty(lcPrefix) && lcPrefix.length() <= (iterator.getEnd() - iterator.getStart()) && CharArrayUtil.regionMatches(text,relStartOffset,relStartOffset + lcPrefix.length(),lcPrefix)) {
        addRuns(runs,text,lastOffset - startOffsetInEditor,relStartOffset,flags);
        int textStartOffset=Math.min(textLength,Math.min(iterator.getEnd() - startOffsetInEditor,CharArrayUtil.shiftForward(text,relStartOffset + lcPrefix.length()," \t")));
        lastOffset=Math.min(iterator.getEnd(),endOffsetInEditor);
        lastToken=null;
        addRuns(runs,text,relStartOffset,textStartOffset,flags);
        addRuns(runs,text,textStartOffset,lastOffset - startOffsetInEditor,flags);
      }
 else       if (distinctTokens(lastToken,currentToken)) {
        addRuns(runs,text,lastOffset - startOffsetInEditor,relStartOffset,flags);
        lastToken=currentToken;
        lastOffset=relStartOffset + startOffsetInEditor;
      }
      iterator.advance();
    }
    addRuns(runs,text,lastOffset - startOffsetInEditor,endOffsetInEditor - startOffsetInEditor,flags);
  }
 else {
    addRuns(runs,text,0,textLength,flags);
  }
  return runs;
}
