{
  final String packageName=myWithBrowseButtonReference.getText().trim();
  if (packageName.length() > 0 && !myManager.getNameHelper().isQualifiedName(packageName)) {
    Messages.showErrorDialog(myProject,RefactoringBundle.message("please.enter.a.valid.target.package.name"),RefactoringBundle.message("move.tltle"));
    return null;
  }
  RecentsManager.getInstance(myProject).registerRecentEntry(RECENTS_KEY,packageName);
  PackageWrapper targetPackage=new PackageWrapper(myManager,packageName);
  if (!targetPackage.exists()) {
    final int ret=Messages.showYesNoDialog(myProject,RefactoringBundle.message("package.does.not.exist",packageName),RefactoringBundle.message("move.tltle"),Messages.getQuestionIcon());
    if (ret != 0)     return null;
  }
  if (myCbPreserveSourceFolders.isSelected()) {
    return new MultipleRootsMoveDestination(targetPackage);
  }
  final VirtualFile[] contentSourceRoots=getSourceRoots();
  if (contentSourceRoots.length == 1) {
    return new AutocreatingSingleSourceRootMoveDestination(targetPackage,contentSourceRoots[0]);
  }
  final VirtualFile sourceRootForFile=MoveClassesOrPackagesUtil.chooseSourceRoot(targetPackage,contentSourceRoots,myInitialTargetDirectory);
  if (sourceRootForFile == null)   return null;
  return new AutocreatingSingleSourceRootMoveDestination(targetPackage,sourceRootForFile);
}
