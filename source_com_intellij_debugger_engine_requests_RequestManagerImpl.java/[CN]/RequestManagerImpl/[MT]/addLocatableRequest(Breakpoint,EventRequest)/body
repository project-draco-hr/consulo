{
  if (DebuggerSettings.SUSPEND_ALL.equals(requestor.SUSPEND_POLICY)) {
    request.setSuspendPolicy(EventRequest.SUSPEND_ALL);
  }
 else {
    request.setSuspendPolicy(EventRequest.SUSPEND_EVENT_THREAD);
  }
  if (requestor.COUNT_FILTER_ENABLED) {
    request.addCountFilter(requestor.COUNT_FILTER);
  }
  if (requestor.CLASS_FILTERS_ENABLED) {
    ClassFilter[] classFilters=requestor.getClassFilters();
    for (int idx=0; idx < classFilters.length; idx++) {
      final ClassFilter filter=classFilters[idx];
      if (!filter.isEnabled()) {
        continue;
      }
      final JVMName jvmClassName=ApplicationManager.getApplication().runReadAction(new Computable<JVMName>(){
        public JVMName compute(){
          PsiClass psiClass=DebuggerUtilsEx.findClass(filter.getPattern(),myDebugProcess.getProject());
          if (psiClass == null) {
            return null;
          }
          return JVMNameUtil.getJVMQualifiedName(psiClass);
        }
      }
);
      String pattern=filter.getPattern();
      try {
        if (jvmClassName != null) {
          pattern=jvmClassName.getName(myDebugProcess);
        }
      }
 catch (      EvaluateException e) {
      }
      addClassFilter(request,pattern);
    }
    final ClassFilter[] iclassFilters=requestor.getClassExclusionFilters();
    for (int idx=0; idx < iclassFilters.length; idx++) {
      ClassFilter filter=iclassFilters[idx];
      if (filter.isEnabled()) {
        addClassExclusionFilter(request,filter.getPattern());
      }
    }
  }
  belongsToRequestor(requestor,request);
  callbackOnEvent(requestor,request);
}
