{
  new PushDownProcessor(mySuperClass.getProject(),myMemberInfos,mySuperClass,new DocCommentPolicy(DocCommentPolicy.ASIS)){
    @Override protected boolean showConflicts(    MultiMap<PsiElement,String> conflicts){
      return true;
    }
  }
.run();
  replaceInnerTypeUsages();
  RefactoringUtil.sortDepthFirstRightLeftOrder(usages);
  for (  UsageInfo usageInfo : usages) {
    if (!(usageInfo instanceof ReplaceExtendsListUsageInfo)) {
      try {
        ((FixableUsageInfo)usageInfo).fixUsage();
      }
 catch (      IncorrectOperationException e) {
        LOG.info(e);
      }
    }
  }
  for (  UsageInfo usage : usages) {
    if (usage instanceof ReplaceExtendsListUsageInfo) {
      ((ReplaceExtendsListUsageInfo)usage).fixUsage();
    }
  }
  try {
    mySuperClass.delete();
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
