{
  new PushDownProcessor(mySuperClass.getProject(),myMemberInfos,mySuperClass,new DocCommentPolicy(myPolicy)){
    @Override protected boolean showConflicts(    MultiMap<PsiElement,String> conflicts,    UsageInfo[] usages){
      return true;
    }
    @Override protected void performRefactoring(    UsageInfo[] pushDownUsages){
      super.performRefactoring(pushDownUsages);
      RefactoringUtil.sortDepthFirstRightLeftOrder(usages);
      for (      UsageInfo usageInfo : usages) {
        if (!(usageInfo instanceof ReplaceExtendsListUsageInfo)) {
          try {
            ((FixableUsageInfo)usageInfo).fixUsage();
          }
 catch (          IncorrectOperationException e) {
            LOG.info(e);
          }
        }
      }
      replaceInnerTypeUsages();
      for (      UsageInfo usage : usages) {
        if (usage instanceof ReplaceExtendsListUsageInfo) {
          ((ReplaceExtendsListUsageInfo)usage).fixUsage();
        }
      }
      try {
        mySuperClass.delete();
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
    }
  }
.run();
}
