{
  final PsiExpression initializer=field.getInitializer();
  final PsiClass aClass=field.getContainingClass();
  final PsiClassInitializer[] classInitializers=aClass.getInitializers();
  boolean assignedInInitializer=initializer != null;
  for (  PsiClassInitializer classInitializer : classInitializers) {
    if (classInitializer.hasModifierProperty(PsiModifier.STATIC)) {
      if (VariableAccessUtils.variableIsAssigned(field,classInitializer,false)) {
        if (assignedInInitializer) {
          return false;
        }
 else         if (InitializationUtils.classInitializerAssignsVariableOrFails(classInitializer,field)) {
          assignedInInitializer=true;
        }
      }
    }
 else     if (VariableAccessUtils.variableIsAssigned(field,classInitializer,false)) {
      return false;
    }
  }
  if (!assignedInInitializer) {
    return false;
  }
  final PsiMethod[] methods=aClass.getMethods();
  for (  PsiMethod method : methods) {
    if (VariableAccessUtils.variableIsAssigned(field,method,false)) {
      return false;
    }
  }
  final PsiElement[] children=aClass.getChildren();
  final ClassVisitor visitor=new ClassVisitor(field);
  for (  PsiElement child : children) {
    child.accept(visitor);
    if (visitor.isVariableAssignedInClass()) {
      return false;
    }
  }
  PsiClass containingClass=aClass.getContainingClass();
  final AssigmentVisitor assignmentVisitor=new AssigmentVisitor(field);
  while (containingClass != null) {
    containingClass.accept(assignmentVisitor);
    if (assignmentVisitor.isVariableAssigned()) {
      return false;
    }
    containingClass=containingClass.getContainingClass();
  }
  return true;
}
