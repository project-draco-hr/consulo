{
  LOG.assertTrue(clazz.getLanguage() == GroovyFileType.GROOVY_LANGUAGE);
  final GroovyPsiElementFactory factory=GroovyPsiElementFactory.getInstance(clazz.getProject());
  final PsiMethod patternMethod=factory.createMethodFromText("protected void setUp() {\nsuper.setUp()\n}",null);
  final PsiClass baseClass=clazz.getSuperClass();
  if (baseClass != null) {
    final PsiMethod baseMethod=baseClass.findMethodBySignature(patternMethod,false);
    if (baseMethod != null && baseMethod.hasModifierProperty(PsiModifier.PUBLIC)) {
      PsiUtil.setModifierProperty(patternMethod,PsiModifier.PROTECTED,false);
      PsiUtil.setModifierProperty(patternMethod,PsiModifier.PUBLIC,true);
    }
  }
  PsiMethod inClass=clazz.findMethodBySignature(patternMethod,false);
  if (inClass == null) {
    PsiMethod testMethod=JUnitUtil.findFirstTestMethod(clazz);
    if (testMethod != null) {
      return (PsiMethod)clazz.addBefore(patternMethod,testMethod);
    }
    return (PsiMethod)clazz.add(patternMethod);
  }
 else   if (inClass.getBody() == null) {
    return (PsiMethod)inClass.replace(patternMethod);
  }
  return inClass;
}
