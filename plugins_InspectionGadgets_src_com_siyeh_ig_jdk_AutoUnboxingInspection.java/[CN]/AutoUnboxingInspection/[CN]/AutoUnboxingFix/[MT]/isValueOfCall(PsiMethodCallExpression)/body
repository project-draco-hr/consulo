{
  final PsiExpressionList argumentList=methodCallExpression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length != 1) {
    return false;
  }
  final PsiExpression argument=arguments[0];
  final PsiType type=argument.getType();
  return (MethodCallUtils.isCallToMethod(methodCallExpression,CommonClassNames.JAVA_LANG_INTEGER,null,"valueOf",PsiType.INT) && PsiType.INT.equals(type)) || (MethodCallUtils.isCallToMethod(methodCallExpression,CommonClassNames.JAVA_LANG_SHORT,null,"valueOf",PsiType.SHORT) && PsiType.SHORT.equals(type)) || (MethodCallUtils.isCallToMethod(methodCallExpression,CommonClassNames.JAVA_LANG_BYTE,null,"valueOf",PsiType.BYTE) && PsiType.BYTE.equals(type))|| (MethodCallUtils.isCallToMethod(methodCallExpression,CommonClassNames.JAVA_LANG_LONG,null,"valueOf",PsiType.LONG) && PsiType.LONG.equals(type))|| (MethodCallUtils.isCallToMethod(methodCallExpression,CommonClassNames.JAVA_LANG_CHARACTER,null,"valueOf",PsiType.CHAR) && PsiType.CHAR.equals(type))|| (MethodCallUtils.isCallToMethod(methodCallExpression,CommonClassNames.JAVA_LANG_DOUBLE,null,"valueOf",PsiType.DOUBLE) && PsiType.DOUBLE.equals(type))|| (MethodCallUtils.isCallToMethod(methodCallExpression,CommonClassNames.JAVA_LANG_FLOAT,null,"valueOf",PsiType.FLOAT) && PsiType.FLOAT.equals(type));
}
