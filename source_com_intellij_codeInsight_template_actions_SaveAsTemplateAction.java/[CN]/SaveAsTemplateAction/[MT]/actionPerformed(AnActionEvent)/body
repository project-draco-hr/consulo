{
  DataContext dataContext=e.getDataContext();
  final Editor editor=(Editor)dataContext.getData(DataConstants.EDITOR);
  PsiFile file=(PsiFile)dataContext.getData(DataConstants.PSI_FILE);
  Project project=file.getProject();
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  final TextRange selection=new TextRange(editor.getSelectionModel().getSelectionStart(),editor.getSelectionModel().getSelectionEnd());
  PsiElement current=file.findElementAt(selection.getStartOffset());
  int startOffset=selection.getStartOffset();
  while (current instanceof PsiWhiteSpace) {
    current=current.getNextSibling();
    startOffset=current.getTextRange().getStartOffset();
  }
  if (startOffset >= selection.getEndOffset())   startOffset=selection.getStartOffset();
  final PsiElement[] psiElements=PsiTreeUtil.collectElements(file,new PsiElementFilter(){
    public boolean isAccepted(    PsiElement element){
      if (!(element instanceof PsiJavaCodeReferenceElement))       return false;
      if (!selection.contains(element.getTextRange()))       return false;
      PsiElement ref=((PsiJavaCodeReferenceElement)element).resolve();
      if (!(ref instanceof PsiClass))       return false;
      PsiClass psiClass=(PsiClass)ref;
      if (!(psiClass.getParent() instanceof PsiJavaFile))       return false;
      PsiDirectory directory=PsiTreeUtil.getParentOfType(psiClass,PsiDirectory.class);
      if (directory.getPackage().getQualifiedName().equals("java.lang"))       return false;
      return true;
    }
  }
);
  final Document document=EditorFactory.getInstance().createDocument(editor.getDocument().getText().substring(startOffset,selection.getEndOffset()));
  final int offsetDelta=startOffset;
  CommandProcessor.getInstance().executeCommand(project,new Runnable(){
    public void run(){
      ApplicationManager.getApplication().runWriteAction(new Runnable(){
        public void run(){
          Map rangeToClass=new HashMap();
          for (int i=0; i < psiElements.length; i++) {
            PsiElement element=psiElements[i];
            TextRange textRange=element.getTextRange();
            rangeToClass.put(document.createRangeMarker(element.getTextRange().getStartOffset() - offsetDelta,textRange.getEndOffset() - offsetDelta),((PsiJavaCodeReferenceElement)element).resolve());
          }
          Set ranges=rangeToClass.keySet();
          for (Iterator i=ranges.iterator(); i.hasNext(); ) {
            RangeMarker textRange=(RangeMarker)i.next();
            PsiClass psiClass=(PsiClass)rangeToClass.get(textRange);
            document.replaceString(textRange.getStartOffset(),textRange.getEndOffset(),psiClass.getQualifiedName());
          }
        }
      }
);
    }
  }
,null,null);
  TemplateSettings templateSettings=TemplateSettings.getInstance();
  TemplateImpl template=new TemplateImpl("",document.getText(),TemplateSettings.USER_GROUP_NAME);
  FileType fileType=FileTypeManager.getInstance().getFileTypeByFile(file.getVirtualFile());
  if (fileType == StdFileTypes.HTML) {
    template.getTemplateContext().HTML=true;
    template.getTemplateContext().JAVA_CODE=false;
  }
 else   if (fileType == StdFileTypes.XML) {
    template.getTemplateContext().XML=true;
    template.getTemplateContext().JAVA_CODE=false;
  }
 else   if (fileType == StdFileTypes.JSP) {
    template.getTemplateContext().JSP=true;
    template.getTemplateContext().JAVA_CODE=false;
  }
 else   if (fileType != StdFileTypes.JAVA) {
    template.getTemplateContext().OTHER=true;
    template.getTemplateContext().JAVA_CODE=false;
  }
  String defaultShortcut="";
  if (templateSettings.getDefaultShortcutChar() == TemplateSettings.ENTER_CHAR)   defaultShortcut="Enter";
  if (templateSettings.getDefaultShortcutChar() == TemplateSettings.TAB_CHAR)   defaultShortcut="Tab";
  if (templateSettings.getDefaultShortcutChar() == TemplateSettings.SPACE_CHAR)   defaultShortcut="Space";
  EditTemplateDialog dialog=new EditTemplateDialog(editor.getComponent(),"Edit Live Template",template,templateSettings.getTemplates(),defaultShortcut);
  dialog.show();
  if (!dialog.isOK()) {
    return;
  }
  dialog.apply();
  templateSettings.addTemplate(template);
  templateSettings.setLastSelectedTemplateKey(template.getKey());
}
