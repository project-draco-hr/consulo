{
  int running=0;
  int passed=0;
  int errors=0;
  int failed=0;
  int ignored=0;
  final TestState suiteState=test.getState();
  final List testCases=test.getAllTests();
  for (  final Object testCase : testCases) {
    final TestProxy child=(TestProxy)testCase;
    if (!child.isLeaf())     continue;
    final TestState state=child.getState();
    if (state.isInProgress()) {
      running++;
    }
 else     if (state.isPassed()) {
      passed++;
    }
 else     if (state.getMagnitude() == PoolOfTestStates.ERROR_INDEX) {
      errors++;
    }
 else     if (state.getMagnitude() == PoolOfTestStates.IGNORED_INDEX) {
      ignored++;
    }
 else {
      failed++;
    }
  }
  if (running > 0) {
    myProgressIndicator.append(ExecutionBundle.message("junit.runing.info.left.to.run.count.tree.node",running),RUNNING_COLOR);
  }
  String separator="";
  if (failed > 0) {
    myCounters.append(ExecutionBundle.message("junit.runing.info.failed.count.message",failed),DEFECT_ATTRIBUTE);
    separator=" ";
  }
  if (errors > 0) {
    myCounters.append(separator + ExecutionBundle.message("junit.runing.info.errors.count.message",errors),DEFECT_ATTRIBUTE);
    separator=" ";
  }
  if (ignored > 0) {
    myCounters.append(separator + ExecutionBundle.message("junit.runing.info.ignored.count.message",ignored),DEFECT_ATTRIBUTE);
    separator=" ";
  }
  if (passed > 0) {
    final Color color=suiteState.isPassed() ? TestsUIUtil.PASSED_COLOR : Color.BLACK;
    myCounters.append(separator + ExecutionBundle.message("junit.runing.info.passed.count.message",passed),new SimpleTextAttributes(Font.BOLD,color));
  }
}
