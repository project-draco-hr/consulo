{
  Project project=e.getData(DataKeys.PROJECT);
  final Change[] changes=e.getData(DataKeys.CHANGES);
  String commitMessage="";
  ShelvedChangeList[] shelvedChangeLists=e.getData(ShelvedChangesViewManager.SHELVED_CHANGELIST_KEY);
  if (shelvedChangeLists != null && shelvedChangeLists.length > 0) {
    commitMessage=shelvedChangeLists[0].DESCRIPTION;
  }
 else {
    ChangeList[] changeLists=e.getData(DataKeys.CHANGE_LISTS);
    if (changeLists != null && changeLists.length > 0) {
      commitMessage=changeLists[0].getComment();
    }
  }
  List<Change> changeCollection=new ArrayList<Change>();
  Collections.addAll(changeCollection,changes);
  final CreatePatchCommitExecutor executor=CreatePatchCommitExecutor.getInstance(project);
  CommitSession commitSession=executor.createCommitSession();
  DialogWrapper sessionDialog=new SessionDialog(executor.getActionText(),project,commitSession,changeCollection,commitMessage);
  sessionDialog.show();
  if (!sessionDialog.isOK()) {
    return;
  }
  ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
    public void run(){
      for (      Change change : changes) {
        checkLoadContent(change.getBeforeRevision());
        checkLoadContent(change.getAfterRevision());
      }
    }
    private void checkLoadContent(    final ContentRevision revision){
      if (revision != null && !(revision instanceof BinaryContentRevision)) {
        try {
          revision.getContent();
        }
 catch (        VcsException e1) {
        }
      }
    }
  }
,VcsBundle.message("create.patch.loading.content.progress"),false,project);
  commitSession.execute(changeCollection,commitMessage);
}
