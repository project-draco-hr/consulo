{
  if (myProject.isDisposed())   return;
  PsiDocumentManager.getInstance(myProject).commitAllDocuments();
  boolean hadFocus=ToolWindowId.STRUCTURE_VIEW.equals(ToolWindowManager.getInstance(myProject).getActiveToolWindowId());
  Dimension referenceSize=null;
  if (myStructureView != null) {
    if (myStructureView instanceof StructureView.Scrollable) {
      referenceSize=((StructureView.Scrollable)myStructureView).getCurrentSize();
    }
    myStructureView.storeState();
    Disposer.dispose(myStructureView);
    myStructureView=null;
  }
  if (myModuleStructureComponent != null) {
    Disposer.dispose(myModuleStructureComponent);
    myModuleStructureComponent=null;
  }
  final ContentManager contentManager=myToolWindow.getContentManager();
  contentManager.removeAllContents(true);
  if (!isStructureViewShowing()) {
    return;
  }
  VirtualFile file=myFile;
  if (file == null) {
    final VirtualFile[] selectedFiles=FileEditorManager.getInstance(myProject).getSelectedFiles();
    if (selectedFiles.length > 0) {
      file=selectedFiles[0];
    }
  }
  String[] names=new String[]{""};
  JComponent focusedComponent=null;
  if (file != null && file.isValid()) {
    if (file.isDirectory()) {
      if (ProjectRootsUtil.isModuleContentRoot(file,myProject)) {
        Module module=ModuleUtil.findModuleForFile(file,myProject);
        if (module != null) {
          myModuleStructureComponent=new ModuleStructureComponent(module);
          focusedComponent=hadFocus ? IdeFocusTraversalPolicy.getPreferredFocusedComponent(myModuleStructureComponent) : null;
          createSinglePanel(myModuleStructureComponent.getComponent());
          Disposer.register(this,myModuleStructureComponent);
        }
      }
    }
 else {
      FileEditor editor=FileEditorManager.getInstance(myProject).getSelectedEditor(file);
      boolean needDisposeEditor=false;
      if (editor == null) {
        editor=createTempFileEditor(file);
        needDisposeEditor=true;
      }
      if (editor != null && editor.isValid()) {
        final StructureViewBuilder structureViewBuilder=editor.getStructureViewBuilder();
        if (structureViewBuilder != null) {
          myStructureView=structureViewBuilder.createStructureView(editor,myProject);
          Disposer.register(this,myStructureView);
          updateHeaderActions(myStructureView);
          if (myStructureView instanceof StructureView.Scrollable) {
            ((StructureView.Scrollable)myStructureView).setReferenceSizeWhileInitializing(referenceSize);
          }
          final StructureViewComposite.StructureViewDescriptor[] views;
          if (myStructureView instanceof StructureViewComposite) {
            final StructureViewComposite composite=(StructureViewComposite)myStructureView;
            views=composite.getStructureViews();
            myPanels=new JPanel[views.length];
            names=new String[views.length];
            for (int i=0; i < myPanels.length; i++) {
              myPanels[i]=createContentPanel(views[i].structureView.getComponent());
              names[i]=views[i].title;
            }
          }
 else {
            createSinglePanel(myStructureView.getComponent());
          }
          focusedComponent=hadFocus ? IdeFocusTraversalPolicy.getPreferredFocusedComponent(myStructureView.getComponent()) : null;
          myStructureView.restoreState();
          myStructureView.centerSelectedRow();
        }
      }
      if (needDisposeEditor && editor != null) {
        Disposer.dispose(editor);
      }
    }
  }
  if (myModuleStructureComponent == null && myStructureView == null) {
    createSinglePanel(new JLabel(IdeBundle.message("message.nothing.to.show.in.structure.view"),SwingConstants.CENTER));
  }
  for (int i=0; i < myPanels.length; i++) {
    final Content content=ContentFactory.SERVICE.getInstance().createContent(myPanels[i],names[i],false);
    contentManager.addContent(content);
    if (i == 0 && myStructureView != null) {
      Disposer.register(content,myStructureView);
    }
  }
  if (hadFocus && focusedComponent != null) {
    IdeFocusManager.getInstance(myProject).requestFocus(focusedComponent,true);
  }
  if (myPendingSelection != null) {
    Runnable selection=myPendingSelection;
    myPendingSelection=null;
    selection.run();
  }
}
