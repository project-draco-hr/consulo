{
  myProject=project;
  myToolWindow=toolWindow;
  myUpdateQueue=new MergingUpdateQueue("StructureView",Registry.intValue("structureView.coalesceTime"),false,myToolWindow.getComponent(),this,myToolWindow.getComponent(),true);
  myUpdateQueue.setRestartTimerOnAdd(true);
  final TimerListener timerListener=new TimerListener(){
    public ModalityState getModalityState(){
      return ModalityState.stateForComponent(myToolWindow.getComponent());
    }
    public void run(){
      checkUpdate();
    }
  }
;
  ActionManager.getInstance().addTimerListener(500,timerListener);
  Disposer.register(this,new Disposable(){
    @Override public void dispose(){
      ActionManager.getInstance().removeTimerListener(timerListener);
    }
  }
);
  myToolWindow.getComponent().addHierarchyListener(new HierarchyListener(){
    public void hierarchyChanged(    HierarchyEvent e){
      if ((e.getChangeFlags() & HierarchyEvent.DISPLAYABILITY_CHANGED) != 0) {
        scheduleRebuild();
      }
    }
  }
);
  myToolWindow.getContentManager().addContentManagerListener(new ContentManagerAdapter(){
    @Override public void selectionChanged(    ContentManagerEvent event){
      if (myStructureView instanceof StructureViewComposite) {
        StructureViewComposite.StructureViewDescriptor[] views=((StructureViewComposite)myStructureView).getStructureViews();
        for (        StructureViewComposite.StructureViewDescriptor view : views) {
          if (view.title.equals(event.getContent().getTabName())) {
            updateHeaderActions(view.structureView);
            break;
          }
        }
      }
    }
  }
);
  Disposer.register(myToolWindow.getContentManager(),this);
}
