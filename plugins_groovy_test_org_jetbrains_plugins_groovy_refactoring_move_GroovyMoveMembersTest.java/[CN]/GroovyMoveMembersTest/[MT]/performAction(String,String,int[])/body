{
  GrTypeDefinition sourceClass=(GrTypeDefinition)myFixture.getJavaFacade().findClass(sourceClassName,ProjectScope.getProjectScope(myFixture.getProject()));
  assertNotNull("Class " + sourceClassName + " not found",sourceClass);
  GrTypeDefinition targetClass=(GrTypeDefinition)myFixture.getJavaFacade().findClass(targetClassName,ProjectScope.getProjectScope(myFixture.getProject()));
  assertNotNull("Class " + targetClassName + " not found",targetClass);
  PsiElement[] children=sourceClass.getBody().getChildren();
  ArrayList<PsiMember> members=new ArrayList<PsiMember>();
  for (  PsiElement child : children) {
    if (child instanceof PsiMember) {
      members.add(((PsiMember)child));
    }
    if (child instanceof GrVariableDeclaration) {
      final GrVariableDeclaration variableDeclaration=(GrVariableDeclaration)child;
      for (      GrMember member : variableDeclaration.getMembers()) {
        members.add(member);
      }
    }
  }
  LinkedHashSet<PsiMember> memberSet=new LinkedHashSet<PsiMember>();
  for (  int index : memberIndices) {
    PsiMember member=members.get(index);
    assertTrue(member.hasModifierProperty(PsiModifier.STATIC));
    memberSet.add(member);
  }
  final MockMoveMembersOptions options=new MockMoveMembersOptions(targetClass.getQualifiedName(),memberSet);
  options.setMemberVisibility(null);
  new MoveMembersProcessor(myFixture.getProject(),null,options).run();
  PostprocessReformattingAspect.getInstance(getProject()).doPostponedFormatting();
  FileDocumentManager.getInstance().saveAllDocuments();
}
