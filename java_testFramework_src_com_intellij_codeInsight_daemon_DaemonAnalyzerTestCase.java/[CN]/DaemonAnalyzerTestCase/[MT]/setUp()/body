{
  super.setUp();
  final LocalInspectionTool[] tools=configureLocalInspectionTools();
  for (  LocalInspectionTool tool : tools) {
    enableInspectionTool(tool);
  }
  final InspectionProfileImpl profile=new InspectionProfileImpl(LightPlatformTestCase.PROFILE){
    @Override @NotNull public ModifiableModel getModifiableModel(){
      mySource=this;
      return this;
    }
    @Override @NotNull public InspectionProfileEntry[] getInspectionTools(    PsiElement element){
      Collection<InspectionProfileEntry> values=myAvailableTools.values();
      List<InspectionTool> result=new ArrayList<InspectionTool>();
      for (      InspectionProfileEntry value : values) {
        InspectionTool tool=value instanceof InspectionTool ? (InspectionTool)value : new LocalInspectionToolWrapper((LocalInspectionTool)value);
        result.add(tool);
      }
      return result.toArray(new InspectionTool[result.size()]);
    }
    @Override public List<ToolsImpl> getAllEnabledInspectionTools(    Project project){
      List<ToolsImpl> result=new ArrayList<ToolsImpl>();
      for (      InspectionProfileEntry entry : getInspectionTools(null)) {
        result.add(new ToolsImpl(entry,entry.getDefaultLevel(),true));
      }
      return result;
    }
    @Override public boolean isToolEnabled(    HighlightDisplayKey key,    PsiElement element){
      return isToolEnabled(key);
    }
    @Override public boolean isToolEnabled(    HighlightDisplayKey key){
      return key != null && myAvailableTools.containsKey(key.toString());
    }
    @Override public HighlightDisplayLevel getErrorLevel(    @NotNull HighlightDisplayKey key,    PsiElement element){
      final InspectionProfileEntry localInspectionTool=myAvailableTools.get(key.toString());
      return localInspectionTool != null ? localInspectionTool.getDefaultLevel() : HighlightDisplayLevel.WARNING;
    }
    @Override public InspectionTool getInspectionTool(    @NotNull String shortName,    @NotNull PsiElement element){
      InspectionProfileEntry entry=myAvailableTools.get(shortName);
      return entry == null ? null : entry instanceof InspectionTool ? (InspectionTool)entry : new LocalInspectionToolWrapper((LocalInspectionTool)entry);
    }
  }
;
  final InspectionProfileManager inspectionProfileManager=InspectionProfileManager.getInstance();
  inspectionProfileManager.addProfile(profile);
  inspectionProfileManager.setRootProfile(LightPlatformTestCase.PROFILE);
  Disposer.register(getProject(),new Disposable(){
    @Override public void dispose(){
      inspectionProfileManager.deleteProfile(LightPlatformTestCase.PROFILE);
    }
  }
);
  InspectionProjectProfileManager.getInstance(getProject()).updateProfile(profile);
  InspectionProjectProfileManager.getInstance(getProject()).setProjectProfile(profile.getName());
  DaemonCodeAnalyzerImpl daemonCodeAnalyzer=(DaemonCodeAnalyzerImpl)DaemonCodeAnalyzer.getInstance(getProject());
  daemonCodeAnalyzer.prepareForTest();
  final StartupManagerImpl startupManager=(StartupManagerImpl)StartupManagerEx.getInstanceEx(getProject());
  startupManager.runStartupActivities();
  startupManager.startCacheUpdate();
  startupManager.runPostStartupActivities();
  DaemonCodeAnalyzerSettings.getInstance().setImportHintEnabled(false);
  if (isPerformanceTest()) {
    IntentionManager.getInstance().getAvailableIntentionActions();
    PathManagerEx.getTestDataPath();
    ReferenceProvidersRegistry.getInstance();
    InjectedLanguageManager.getInstance(getProject());
    LanguageAnnotators.INSTANCE.allForLanguage(StdLanguages.JAVA);
    LanguageAnnotators.INSTANCE.allForLanguage(StdLanguages.XML);
    ProblemHighlightFilter.EP_NAME.getExtensions();
    Extensions.getExtensions(ImplicitUsageProvider.EP_NAME);
    Extensions.getExtensions(XmlSchemaProvider.EP_NAME);
    Extensions.getExtensions(XmlFileNSInfoProvider.EP_NAME);
    Extensions.getExtensions(ExternalAnnotatorsFilter.EXTENSION_POINT_NAME);
    Extensions.getExtensions(IndexPatternBuilder.EP_NAME);
  }
}
