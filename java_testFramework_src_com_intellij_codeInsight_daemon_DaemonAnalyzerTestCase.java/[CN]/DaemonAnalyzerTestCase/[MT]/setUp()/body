{
  super.setUp();
  ((VirtualFilePointerManagerImpl)VirtualFilePointerManagerImpl.getInstance()).cleanupForNextTest();
  final LocalInspectionTool[] tools=configureLocalInspectionTools();
  for (  LocalInspectionTool tool : tools) {
    enableInspectionTool(tool);
  }
  final InspectionProfileImpl profile=new InspectionProfileImpl(PROFILE){
    @NotNull public ModifiableModel getModifiableModel(){
      mySource=this;
      return this;
    }
    @NotNull public InspectionProfileEntry[] getInspectionTools(    PsiElement element){
      final Collection<LocalInspectionToolWrapper> tools=myAvailableLocalTools.values();
      return tools.toArray(new LocalInspectionToolWrapper[tools.size()]);
    }
    @Override public List<ToolsImpl> getAllEnabledInspectionTools(){
      List<ToolsImpl> result=new ArrayList<ToolsImpl>();
      for (      InspectionProfileEntry entry : getInspectionTools(null)) {
        result.add(new ToolsImpl(entry,entry.getDefaultLevel(),true));
      }
      return result;
    }
    public boolean isToolEnabled(    HighlightDisplayKey key,    PsiElement element){
      return key != null && myAvailableTools.containsKey(key.toString());
    }
    public HighlightDisplayLevel getErrorLevel(    @NotNull HighlightDisplayKey key,    PsiElement element){
      final LocalInspectionTool localInspectionTool=myAvailableTools.get(key.toString());
      return localInspectionTool != null ? localInspectionTool.getDefaultLevel() : HighlightDisplayLevel.WARNING;
    }
    public InspectionTool getInspectionTool(    @NotNull String shortName,    @NotNull PsiElement element){
      return myAvailableLocalTools.get(shortName);
    }
  }
;
  final InspectionProfileManager inspectionProfileManager=InspectionProfileManager.getInstance();
  inspectionProfileManager.addProfile(profile);
  inspectionProfileManager.setRootProfile(PROFILE);
  Disposer.register(getProject(),new Disposable(){
    public void dispose(){
      inspectionProfileManager.deleteProfile(PROFILE);
    }
  }
);
  InspectionProjectProfileManager.getInstance(getProject()).updateProfile(profile);
  InspectionProjectProfileManager.getInstance(getProject()).setProjectProfile(profile.getName());
  DaemonCodeAnalyzerImpl daemonCodeAnalyzer=(DaemonCodeAnalyzerImpl)DaemonCodeAnalyzer.getInstance(getProject());
  toInitializeDaemon=!daemonCodeAnalyzer.isInitialized();
  if (toInitializeDaemon) {
    daemonCodeAnalyzer.projectOpened();
  }
  ((StartupManagerImpl)StartupManagerEx.getInstanceEx(getProject())).runStartupActivities();
  ((StartupManagerImpl)StartupManagerEx.getInstanceEx(getProject())).runPostStartupActivities();
  DaemonCodeAnalyzerSettings.getInstance().setImportHintEnabled(false);
}
