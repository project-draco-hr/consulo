{
  PsiDocumentManager.getInstance(myProject).commitAllDocuments();
  TIntArrayList toIgnore=new TIntArrayList();
  if (!doTestLineMarkers()) {
    toIgnore.add(Pass.UPDATE_OVERRIDEN_MARKERS);
    toIgnore.add(Pass.VISIBLE_LINE_MARKERS);
    toIgnore.add(Pass.LINE_MARKERS);
  }
  if (!doExternalValidation()) {
    toIgnore.add(Pass.EXTERNAL_TOOLS);
  }
  if (forceExternalValidation()) {
    toIgnore.add(Pass.LINE_MARKERS);
    toIgnore.add(Pass.LOCAL_INSPECTIONS);
    toIgnore.add(Pass.POPUP_HINTS);
    toIgnore.add(Pass.POST_UPDATE_ALL);
    toIgnore.add(Pass.UPDATE_ALL);
    toIgnore.add(Pass.UPDATE_VISIBLE);
    toIgnore.add(Pass.UPDATE_OVERRIDEN_MARKERS);
    toIgnore.add(Pass.VISIBLE_LINE_MARKERS);
  }
  CodeInsightTestFixtureImpl.instantiateAndRun(getFile(),getEditor(),toIgnore.toNativeArray());
  if (doTestLineMarkers()) {
    Document document=getDocument(getFile());
    assertTrue(((DaemonCodeAnalyzerImpl)DaemonCodeAnalyzer.getInstance(getProject())).getFileStatusMap().allDirtyScopesAreNull(document));
  }
  List<HighlightInfo> infos=DaemonCodeAnalyzerImpl.getHighlights(getEditor().getDocument(),getProject());
  return infos == null ? Collections.<HighlightInfo>emptyList() : new ArrayList<HighlightInfo>(infos);
}
