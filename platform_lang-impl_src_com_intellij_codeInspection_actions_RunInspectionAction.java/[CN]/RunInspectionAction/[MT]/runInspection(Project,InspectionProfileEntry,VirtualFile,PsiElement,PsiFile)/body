{
  final InspectionManagerEx managerEx=(InspectionManagerEx)InspectionManager.getInstance(project);
  final Module module=virtualFile != null ? ModuleUtilCore.findModuleForFile(virtualFile,project) : null;
  AnalysisScope analysisScope=null;
  if (psiFile != null) {
    analysisScope=new AnalysisScope(psiFile);
  }
 else {
    if (virtualFile != null && virtualFile.isDirectory()) {
      final PsiDirectory psiDirectory=PsiManager.getInstance(project).findDirectory(virtualFile);
      if (psiDirectory != null) {
        analysisScope=new AnalysisScope(psiDirectory);
      }
    }
    if (analysisScope == null && virtualFile != null) {
      analysisScope=new AnalysisScope(project,Arrays.asList(virtualFile));
    }
    if (analysisScope == null) {
      analysisScope=new AnalysisScope(project);
    }
  }
  final FileFilterPanel fileFilterPanel=new FileFilterPanel();
  fileFilterPanel.init();
  final BaseAnalysisActionDialog dlg=new BaseAnalysisActionDialog(AnalysisScopeBundle.message("specify.analysis.scope",InspectionsBundle.message("inspection.action.title")),AnalysisScopeBundle.message("analysis.scope.title",InspectionsBundle.message("inspection.action.noun")),project,analysisScope,module != null ? module.getName() : null,true,AnalysisUIOptions.getInstance(project),psiElement){
    @Override protected JComponent getAdditionalActionSettings(    Project project){
      return fileFilterPanel.getPanel();
    }
    @Override public SearchScope getCustomScope(){
      return PsiSearchScopeUtil.union(fileFilterPanel.getSearchScope(),super.getCustomScope());
    }
  }
;
  AnalysisScope scope=analysisScope;
  dlg.show();
  if (!dlg.isOK())   return;
  final AnalysisUIOptions uiOptions=AnalysisUIOptions.getInstance(project);
  scope=dlg.getScope(uiOptions,scope,project,module);
  RunInspectionIntention.rerunInspection(profileEntry,managerEx,scope,psiFile);
}
