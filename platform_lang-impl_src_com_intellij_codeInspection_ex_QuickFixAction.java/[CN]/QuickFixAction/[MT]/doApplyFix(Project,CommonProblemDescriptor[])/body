{
  final Set<VirtualFile> readOnlyFiles=new THashSet<VirtualFile>();
  for (  CommonProblemDescriptor descriptor : descriptors) {
    final PsiElement psiElement=descriptor instanceof ProblemDescriptor ? ((ProblemDescriptor)descriptor).getPsiElement() : null;
    if (psiElement != null && !psiElement.isWritable()) {
      readOnlyFiles.add(psiElement.getContainingFile().getVirtualFile());
    }
  }
  if (!readOnlyFiles.isEmpty()) {
    final ReadonlyStatusHandler.OperationStatus operationStatus=ReadonlyStatusHandler.getInstance(project).ensureFilesWritable(VfsUtil.toVirtualFileArray(readOnlyFiles));
    if (operationStatus.hasReadonlyFiles())     return;
  }
  final RefManagerImpl refManager=((RefManagerImpl)myTool.getContext().getRefManager());
  final boolean initial=refManager.isInProcess();
  refManager.inspectionReadActionFinished();
  try {
    final Set<PsiElement> ignoredElements=new HashSet<PsiElement>();
    CommandProcessor.getInstance().executeCommand(project,new Runnable(){
      @Override public void run(){
        CommandProcessor.getInstance().markCurrentCommandAsGlobal(project);
        ApplicationManager.getApplication().runWriteAction(new Runnable(){
          @Override public void run(){
            final SequentialModalProgressTask progressTask=new SequentialModalProgressTask(project,getTemplatePresentation().getText(),false);
            progressTask.setMinIterationTime(200);
            progressTask.setTask(new PerformFixesTask(project,descriptors,ignoredElements,progressTask));
            ProgressManager.getInstance().run(progressTask);
          }
        }
);
      }
    }
,getTemplatePresentation().getText(),null);
    refreshViews(project,ignoredElements,myTool);
  }
  finally {
    if (initial)     refManager.inspectionReadActionStarted();
  }
}
