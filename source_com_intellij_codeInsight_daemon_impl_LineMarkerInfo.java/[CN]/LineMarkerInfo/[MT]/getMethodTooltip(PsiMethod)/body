{
  if (type == OVERRIDING_METHOD) {
    PsiMethod[] superMethods=PsiSuperMethodUtil.findSuperMethods(method,false);
    if (superMethods.length == 0)     return null;
    PsiMethod superMethod=superMethods[0];
    StringBuffer format=new StringBuffer();
    boolean isAbstract=method.hasModifierProperty(PsiModifier.ABSTRACT);
    boolean isSuperAbstract=superMethod.hasModifierProperty(PsiModifier.ABSTRACT);
    if (isSuperAbstract && !isAbstract) {
      format.append("Implements");
    }
 else {
      format.append("Overrides");
    }
    format.append(" method");
    if (!superMethod.getSignature(PsiSubstitutor.EMPTY).equals(method.getSignature(PsiSubstitutor.EMPTY))) {
      format.append(" ''{0}''");
    }
    format.append(" in ''{1}''");
    return composeText(superMethods,"",format.toString());
  }
 else   if (type == OVERRIDEN_METHOD) {
    PsiManager manager=method.getManager();
    PsiSearchHelper helper=manager.getSearchHelper();
    PsiElementProcessor.CollectElementsWithLimit<PsiMethod> processor=new PsiElementProcessor.CollectElementsWithLimit<PsiMethod>(5);
    helper.processOverridingMethods(processor,method,GlobalSearchScope.allScope(manager.getProject()),true);
    boolean isAbstract=method.hasModifierProperty(PsiModifier.ABSTRACT);
    if (processor.isOverflow()) {
      return isAbstract ? "Has implementations" : "Is overridden in subclasses";
    }
    PsiMethod[] overridings=processor.toArray(new PsiMethod[processor.getCollection().size()]);
    if (overridings.length == 0)     return null;
    Comparator comparator=new MethodCellRenderer(false).getComparator();
    Arrays.sort(overridings,comparator);
    String start=isAbstract ? "Is implemented in <br>" : "Is overridden in <br>";
    String pattern="&nbsp;&nbsp;&nbsp;&nbsp;{1}";
    return composeText(overridings,start,pattern);
  }
 else {
    return null;
  }
}
