{
  Document _d=null;
  if (myElement != null) {
    myElement.detach();
    _d=new Document(myElement);
  }
  final PathMacroManager pathMacroManager=PathMacroManager.getInstance(getComponentManager());
  final Document document=_d;
  final XmlElementStorage storage=new XmlElementStorage(pathMacroManager.createTrackingSubstitutor()){
    @Nullable protected Document loadDocument() throws StateStorage.StateStorageException {
      return document;
    }
    public List<VirtualFile> getAllStorageFiles(){
      return Collections.emptyList();
    }
    @Nullable Element getRootElement() throws StateStorageException {
      if (myElement == null)       return null;
      return super.getRootElement();
    }
    protected SaveSession createSaveSession(    final MyExternalizationSession externalizationSession){
      return new DefaultSaveSession(externalizationSession);
    }
class DefaultSaveSession extends MySaveSession {
      public DefaultSaveSession(      MyExternalizationSession externalizationSession){
        super(externalizationSession);
      }
      protected boolean _needsSave() throws StateStorageException {
        return true;
      }
      protected void doSave() throws StateStorageException {
        if (myElement != null) {
          myProjectManager.setDefaultProjectRootElement((Element)myElement.clone());
        }
      }
    }
  }
;
  return new StateStorageManager(){
    public void addMacro(    String macro,    String expansion){
      throw new UnsupportedOperationException("Method addMacro not implemented in " + getClass());
    }
    @Nullable public StateStorage getStateStorage(    @NotNull Storage storageSpec) throws StateStorage.StateStorageException {
      return storage;
    }
    @Nullable public StateStorage getFileStateStorage(    String fileName){
      return storage;
    }
    public void clearStateStorage(    @NotNull String file){
    }
    public List<VirtualFile> getAllStorageFiles(){
      return Collections.EMPTY_LIST;
    }
    public ExternalizationSession startExternalization(){
      return new MyExternalizationSession(storage);
    }
    public SaveSession startSave(    final ExternalizationSession externalizationSession) throws StateStorage.StateStorageException {
      return new MySaveSession(storage,externalizationSession);
    }
    public void finishSave(    SaveSession saveSession){
      storage.finishSave(((MySaveSession)saveSession).saveSession);
    }
    @Nullable public StateStorage getOldStorage(    Object component,    final String componentName,    final StateStorageOperation operation) throws StateStorage.StateStorageException {
      return storage;
    }
  }
;
}
