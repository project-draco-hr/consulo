{
  final PsiMember member=(PsiMember)element.getParent();
  final PsiModifierList modifierList=member.getModifierList();
  if (modifierList == null) {
    return;
  }
  final MultiMap<PsiElement,String> conflicts=checkForConflicts(member);
  final boolean conflictsDialogOK;
  if (conflicts.isEmpty()) {
    conflictsDialogOK=true;
  }
 else {
    final ConflictsDialog conflictsDialog=new ConflictsDialog(member.getProject(),conflicts,new Runnable(){
      @Override public void run(){
        final AccessToken token=WriteAction.start();
        try {
          modifierList.setModifierProperty(getModifier(),true);
        }
  finally {
          token.finish();
        }
      }
    }
);
    conflictsDialog.show();
    conflictsDialogOK=conflictsDialog.isOK();
  }
  if (conflictsDialogOK) {
    modifierList.setModifierProperty(getModifier(),true);
  }
}
