{
  if (parameters.getCompletionType() != CompletionType.BASIC)   return true;
  final PsiFile file=parameters.getOriginalFile();
  final int startOffset=parameters.getOffset();
  final PsiElement element=ApplicationManager.getApplication().runReadAction(new Computable<PsiElement>(){
    public PsiElement compute(){
      return file.findElementAt(startOffset - 1);
    }
  }
);
  final PsiElement insertedElement=parameters.getPosition();
  Set<CompletionVariant> toAdd=new HashSet<CompletionVariant>();
  final CompletionData data=CompletionUtil.getCompletionDataByElement(file);
  data.addKeywordVariants(toAdd,insertedElement,file);
  for (  CompletionVariant completionVariant : toAdd) {
    if (completionVariant.hasKeywordCompletions()) {
      return true;
    }
  }
  final PsiReference reference=ApplicationManager.getApplication().runReadAction(new Computable<PsiReference>(){
    public PsiReference compute(){
      return file.findReferenceAt(startOffset);
    }
  }
);
  if (reference == null) {
    ASTNode textContainer=element != null ? element.getNode() : null;
    while (textContainer != null) {
      final IElementType elementType=textContainer.getElementType();
      if (LanguageWordCompletion.INSTANCE.isEnabledIn(elementType) || elementType == PlainTextTokenTypes.PLAIN_TEXT) {
        final String prefix=CompletionUtil.findJavaIdentifierPrefix(insertedElement,startOffset);
        final CompletionResultSet resultSet=result.withPrefixMatcher(prefix);
        for (        final String word : AllWordsGetter.getAllWords(insertedElement,startOffset)) {
          resultSet.addElement(new LookupItem<String>(word,word).setTailType(TailType.SPACE));
        }
      }
      textContainer=textContainer.getTreeParent();
    }
  }
  return true;
}
