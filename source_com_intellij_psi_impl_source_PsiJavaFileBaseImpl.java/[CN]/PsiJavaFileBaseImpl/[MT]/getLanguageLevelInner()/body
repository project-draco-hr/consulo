{
  if (myOriginalFile != null)   return ((PsiJavaFile)myOriginalFile).getLanguageLevel();
  final LanguageLevel forcedLanguageLevel=getUserData(PsiUtil.FILE_LANGUAGE_LEVEL_KEY);
  if (forcedLanguageLevel != null)   return forcedLanguageLevel;
  final VirtualFile virtualFile=getVirtualFile();
  if (virtualFile == null) {
    final PsiFile originalFile=getOriginalFile();
    if (originalFile instanceof PsiJavaFile && originalFile != this)     return ((PsiJavaFile)originalFile).getLanguageLevel();
    return JavaProjectExtension.getInstance(getProject()).getLanguageLevel();
  }
  final Project project=getProject();
  final ProjectFileIndex index=ProjectRootManager.getInstance(project).getFileIndex();
  final Module module=index.getModuleForFile(virtualFile);
  if (module != null) {
    return LanguageLevelUtil.getEffectiveLanguageLevel(module);
  }
  final VirtualFile sourceRoot=index.getSourceRootForFile(virtualFile);
  if (sourceRoot != null) {
    String relativePath=VfsUtil.getRelativePath(virtualFile.getParent(),sourceRoot,'/');
    LOG.assertTrue(relativePath != null);
    final VirtualFile[] files=index.getOrderEntriesForFile(virtualFile).get(0).getFiles(OrderRootType.CLASSES);
    for (    VirtualFile rootFile : files) {
      final VirtualFile classFile=rootFile.findFileByRelativePath(relativePath);
      if (classFile != null) {
        return getLanguageLevel(classFile);
      }
    }
  }
  return JavaProjectExtension.getInstance(project).getLanguageLevel();
}
