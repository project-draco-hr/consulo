{
  final PsiExpression lhs=thenAssignment.getLExpression();
  final PsiExpression thenRhs=thenAssignment.getRExpression();
  if (thenRhs == null) {
    return "";
  }
  final PsiExpression elseRhs=elseAssignment.getRExpression();
  if (elseRhs == null) {
    return "";
  }
  final PsiJavaToken token=elseAssignment.getOperationSign();
  if (BoolUtils.isTrue(thenRhs)) {
    if (ParenthesesUtils.getPrecedence(elseRhs) > ParenthesesUtils.OR_PRECEDENCE) {
      return lhs.getText() + ' ' + token.getText()+ ' '+ condition.getText()+ " || ("+ elseRhs.getText()+ ");";
    }
 else {
      return lhs.getText() + ' ' + token.getText()+ ' '+ condition.getText()+ " || "+ elseRhs.getText()+ ';';
    }
  }
 else   if (BoolUtils.isFalse(thenRhs)) {
    if (ParenthesesUtils.getPrecedence(elseRhs) > ParenthesesUtils.AND_PRECEDENCE) {
      return lhs.getText() + ' ' + token.getText()+ ' '+ BoolUtils.getNegatedExpressionText(condition)+ " && ("+ elseRhs.getText()+ ");";
    }
 else {
      return lhs.getText() + ' ' + token.getText()+ ' '+ BoolUtils.getNegatedExpressionText(condition)+ " && "+ elseRhs.getText()+ ';';
    }
  }
  if (BoolUtils.isTrue(elseRhs)) {
    if (ParenthesesUtils.getPrecedence(thenRhs) > ParenthesesUtils.OR_PRECEDENCE) {
      return lhs.getText() + ' ' + token.getText()+ ' '+ BoolUtils.getNegatedExpressionText(condition)+ " || ("+ thenRhs.getText()+ ");";
    }
 else {
      return lhs.getText() + ' ' + token.getText()+ ' '+ BoolUtils.getNegatedExpressionText(condition)+ " || "+ thenRhs.getText()+ ';';
    }
  }
 else {
    if (ParenthesesUtils.getPrecedence(thenRhs) > ParenthesesUtils.AND_PRECEDENCE) {
      return lhs.getText() + ' ' + token.getText()+ ' '+ condition.getText()+ " && ("+ thenRhs.getText()+ ");";
    }
 else {
      return lhs.getText() + ' ' + token.getText()+ ' '+ condition.getText()+ " && "+ thenRhs.getText()+ ';';
    }
  }
}
