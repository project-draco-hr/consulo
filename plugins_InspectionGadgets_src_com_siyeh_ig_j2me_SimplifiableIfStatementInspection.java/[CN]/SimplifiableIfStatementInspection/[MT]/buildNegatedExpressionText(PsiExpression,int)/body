{
  while (expression instanceof PsiParenthesizedExpression) {
    final PsiParenthesizedExpression parenthesizedExpression=(PsiParenthesizedExpression)expression;
    expression=parenthesizedExpression.getExpression();
  }
  if (expression == null) {
    return "";
  }
  final StringBuilder result=new StringBuilder();
  if (BoolUtils.isNegation(expression)) {
    final PsiPrefixExpression prefixExpression=(PsiPrefixExpression)expression;
    final PsiExpression operand=prefixExpression.getOperand();
    final PsiExpression negated=ParenthesesUtils.stripParentheses(operand);
    if (negated == null) {
      return "";
    }
    if (ParenthesesUtils.getPrecedence(negated) > precedence) {
      result.append('(');
      getPresentableText(negated,result);
      result.append(')');
    }
 else {
      getPresentableText(negated,result);
    }
  }
 else   if (ComparisonUtils.isComparison(expression)) {
    final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)expression;
    final IElementType tokenType=binaryExpression.getOperationTokenType();
    final String negatedComparison=ComparisonUtils.getNegatedComparison(tokenType);
    final PsiExpression lhs=binaryExpression.getLOperand();
    final PsiExpression rhs=binaryExpression.getROperand();
    if (ParenthesesUtils.getPrecedence(expression) > precedence) {
      result.append('(');
      getPresentableText(lhs,result);
      result.append(negatedComparison);
      getPresentableText(rhs,result);
      result.append(')');
    }
 else {
      getPresentableText(lhs,result);
      result.append(negatedComparison);
      getPresentableText(rhs,result);
    }
  }
 else   if (ParenthesesUtils.getPrecedence(expression) > ParenthesesUtils.PREFIX_PRECEDENCE) {
    result.append("!(");
    getPresentableText(expression,result);
    result.append(')');
  }
 else {
    result.append('!');
    getPresentableText(expression,result);
  }
  return result.toString();
}
