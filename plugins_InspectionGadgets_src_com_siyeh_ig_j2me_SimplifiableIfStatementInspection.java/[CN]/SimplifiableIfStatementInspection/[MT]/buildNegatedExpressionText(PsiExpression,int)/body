{
  if (expression == null) {
    return "";
  }
  if (expression instanceof PsiParenthesizedExpression) {
    final PsiParenthesizedExpression parenthesizedExpression=(PsiParenthesizedExpression)expression;
    final PsiExpression contentExpression=parenthesizedExpression.getExpression();
    return buildNegatedExpressionText(contentExpression,precedence);
  }
 else   if (BoolUtils.isNegation(expression)) {
    final PsiPrefixExpression prefixExpression=(PsiPrefixExpression)expression;
    final PsiExpression operand=prefixExpression.getOperand();
    final PsiExpression negated=ParenthesesUtils.stripParentheses(operand);
    if (negated == null) {
      return "";
    }
    if (ParenthesesUtils.getPrecedence(negated) > precedence) {
      return '(' + negated.getText() + ')';
    }
    return negated.getText();
  }
 else   if (ComparisonUtils.isComparison(expression)) {
    final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)expression;
    final PsiJavaToken sign=binaryExpression.getOperationSign();
    final String negatedComparison=ComparisonUtils.getNegatedComparison(sign);
    final PsiExpression lhs=binaryExpression.getLOperand();
    final PsiExpression rhs=binaryExpression.getROperand();
    if (rhs == null) {
      return lhs.getText() + negatedComparison;
    }
    if (ParenthesesUtils.getPrecedence(expression) > precedence) {
      return '(' + lhs.getText() + negatedComparison+ rhs.getText()+ ')';
    }
    return lhs.getText() + negatedComparison + rhs.getText();
  }
 else   if (ParenthesesUtils.getPrecedence(expression) > ParenthesesUtils.PREFIX_PRECEDENCE) {
    return "!(" + expression.getText() + ')';
  }
 else {
    return '!' + expression.getText();
  }
}
