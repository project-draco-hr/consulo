{
  PsiStatement thenBranch=ifStatement.getThenBranch();
  if (thenBranch == null) {
    return false;
  }
  thenBranch=ControlFlowUtils.stripBraces(thenBranch);
  if (thenBranch == null || !isAssignment(thenBranch)) {
    return false;
  }
  PsiStatement elseBranch=ifStatement.getElseBranch();
  elseBranch=ControlFlowUtils.stripBraces(elseBranch);
  if (elseBranch == null || !isAssignment(elseBranch)) {
    return false;
  }
  final PsiExpressionStatement thenStatement=(PsiExpressionStatement)thenBranch;
  final PsiAssignmentExpression thenExpression=(PsiAssignmentExpression)thenStatement.getExpression();
  final PsiExpressionStatement elseStatement=(PsiExpressionStatement)elseBranch;
  final PsiAssignmentExpression elseExpression=(PsiAssignmentExpression)elseStatement.getExpression();
  final PsiJavaToken thenOperationSign=thenExpression.getOperationSign();
  final IElementType thenTokenType=thenOperationSign.getTokenType();
  final PsiJavaToken elseOperationSign=elseExpression.getOperationSign();
  final IElementType elseTokenType=elseOperationSign.getTokenType();
  if (!thenTokenType.equals(elseTokenType)) {
    return false;
  }
  final PsiExpression thenRhs=thenExpression.getRExpression();
  if (thenRhs == null) {
    return false;
  }
  final PsiType thenRhsType=thenRhs.getType();
  if (!PsiType.BOOLEAN.equals(thenRhsType)) {
    return false;
  }
  final PsiExpression elseRhs=elseExpression.getRExpression();
  if (elseRhs == null) {
    return false;
  }
  final PsiType elseRhsType=elseRhs.getType();
  if (!PsiType.BOOLEAN.equals(elseRhsType)) {
    return false;
  }
  final boolean thenConstant=BoolUtils.isFalse(thenRhs) || BoolUtils.isTrue(thenRhs);
  final boolean elseConstant=BoolUtils.isFalse(elseRhs) || BoolUtils.isTrue(elseRhs);
  if (thenConstant == elseConstant) {
    return false;
  }
  final PsiExpression thenLhs=thenExpression.getLExpression();
  final PsiExpression elseLhs=elseExpression.getLExpression();
  return EquivalenceChecker.expressionsAreEquivalent(thenLhs,elseLhs);
}
