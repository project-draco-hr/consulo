{
  String id=context.newId();
  RadComponent result;
  if (component instanceof JScrollPane) {
    result=new RadScrollPane(id,context.getPalette());
  }
 else   if (component instanceof JTabbedPane) {
    result=new RadTabbedPane(id,context.getPalette());
  }
 else   if (component instanceof JSplitPane) {
    result=new RadSplitPane(id,context.getPalette());
  }
 else {
    Class componentClass=component.getClass();
    if (component instanceof JPanel) {
      RadContainer container=new RadContainer(componentClass,id,context.getPalette());
      final RadLayoutManager manager=RadLayoutManager.createFromLayout(component.getLayout());
      if (manager == null) {
        context.notifyUnknownLayoutManager(component);
        return null;
      }
      container.setLayoutManager(manager);
      result=container;
    }
 else {
      result=new RadAtomicComponent(componentClass,id,context.getPalette());
    }
  }
  context.registerComponent(component,result);
  result.importSnapshotComponent(context,component);
  final IntrospectedProperty[] properties=context.getPalette().getIntrospectedProperties(component.getClass(),result.getDelegee().getClass());
  for (  IntrospectedProperty prop : properties) {
    prop.importSnapshotValue(component,result);
  }
  if (component instanceof AbstractButton) {
    AbstractButton btn=(AbstractButton)component;
    if (btn.getModel() instanceof DefaultButtonModel) {
      DefaultButtonModel model=(DefaultButtonModel)btn.getModel();
      if (model.getGroup() != null) {
        context.registerButtonGroup(model.getGroup());
      }
    }
  }
  return result;
}
