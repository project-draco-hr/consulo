{
  String id=context.newId();
  RadComponent result;
  Class componentClass=component.getClass();
  if (componentClass.isAnonymousClass()) {
    componentClass=componentClass.getSuperclass();
  }
  if (component instanceof JPanel) {
    RadContainer container=new RadContainer(componentClass,id,context.getPalette());
    final RadLayoutManager manager=LayoutManagerRegistry.createFromLayout(component.getLayout());
    if (manager == null) {
      return null;
    }
    container.setLayoutManager(manager);
    result=container;
  }
 else {
    final Class<? extends RadComponent> radClass=InsertComponentProcessor.getRadComponentClass(componentClass);
    if (radClass == null) {
      result=new RadAtomicComponent(componentClass,id,context.getPalette());
    }
 else {
      try {
        final Constructor<? extends RadComponent> constructor=radClass.getConstructor(Class.class,String.class,Palette.class);
        result=constructor.newInstance(componentClass,id,context.getPalette());
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex);
      }
    }
  }
  context.registerComponent(component,result);
  result.importSnapshotComponent(context,component);
  final IntrospectedProperty[] properties=context.getPalette().getIntrospectedProperties(component.getClass(),result.getDelegee().getClass());
  for (  IntrospectedProperty prop : properties) {
    prop.importSnapshotValue(context,component,result);
  }
  if (component instanceof AbstractButton) {
    AbstractButton btn=(AbstractButton)component;
    if (btn.getModel() instanceof DefaultButtonModel) {
      DefaultButtonModel model=(DefaultButtonModel)btn.getModel();
      if (model.getGroup() != null) {
        context.registerButtonGroup(model.getGroup());
      }
    }
  }
  return result;
}
