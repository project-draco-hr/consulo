{
  if (method.hasModifierProperty(PsiModifier.STATIC))   return false;
  if (method.hasModifierProperty(PsiModifier.SYNCHRONIZED))   return false;
  if (method.isConstructor())   return false;
  if (method.getContainingClass() instanceof GroovyScriptClass)   return false;
  if (SuperMethodsSearch.search(method,null,true,false).findFirst() != null)   return false;
  if (OverridingMethodsSearch.search(method).findFirst() != null)   return false;
  if (myOnlyPrivateOrFinal) {
    if (!(method.hasModifierProperty(PsiModifier.FINAL) || method.hasModifierProperty(PsiModifier.PRIVATE)))     return false;
  }
  GrOpenBlock block=method.getBlock();
  if (block == null)   return false;
  if (myIgnoreEmptyMethods && block.getStatements().length == 0)   return false;
  PsiClass containingClass=method.getContainingClass();
  if (containingClass == null)   return false;
  if (containingClass.getContainingClass() != null && !containingClass.hasModifierProperty(PsiModifier.STATIC))   return false;
  final ExtensionsArea rootArea=Extensions.getRootArea();
  final ExtensionPoint<Condition<PsiElement>> extensionPoint=rootArea.getExtensionPoint("com.intellij.cantBeStatic");
  final Condition<PsiElement>[] addins=extensionPoint.getExtensions();
  for (  Condition<PsiElement> addin : addins) {
    if (addin.value(method)) {
      return false;
    }
  }
  MethodMayBeStaticVisitor visitor=new MethodMayBeStaticVisitor();
  method.accept(visitor);
  return visitor.mayBeStatic();
}
