{
  return new BaseInspectionVisitor(){
    @Override public void visitMethod(    GrMethod method){
      Result result=checkMethod(method);
      LocalQuickFix[] fixes;
switch (result) {
case mayBeStatic:
        fixes=new LocalQuickFix[]{new GrModifierLocalFix(method,PsiModifier.STATIC,false,true)};
      registerError(method.getNameIdentifierGroovy(),GroovyInspectionBundle.message("method.may.be.static"),fixes,ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
    break;
case mayBeStaticButHaveInstanceRefsInClosure:
  if (myIgnoreInstanceRefsInClosure) {
    fixes=new LocalQuickFix[]{new GrModifierLocalFix(method,PsiModifier.STATIC,false,true){
      @NotNull @Override public String getName(){
        return super.getName() + " " + GroovyInspectionBundle.message("have.instance.refs.in.closure");
      }
    }
};
    registerError(method.getNameIdentifierGroovy(),GroovyInspectionBundle.message("method.may.be.static") + " " + GroovyInspectionBundle.message("have.instance.refs.in.closure"),fixes,ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
  }
break;
case mayNotBeStatic:
break;
}
}
}
;
}
