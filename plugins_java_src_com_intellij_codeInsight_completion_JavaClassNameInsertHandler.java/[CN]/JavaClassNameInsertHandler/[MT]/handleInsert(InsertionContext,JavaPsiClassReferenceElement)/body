{
  final char c=context.getCompletionChar();
  int offset=context.getTailOffset() - 1;
  final PsiFile file=context.getFile();
  if (PsiTreeUtil.findElementOfClassAtOffset(file,offset,PsiImportStatementBase.class,false) != null) {
    final PsiJavaCodeReferenceElement ref=PsiTreeUtil.findElementOfClassAtOffset(file,offset,PsiJavaCodeReferenceElement.class,false);
    final String qname=item.getQualifiedName();
    if (qname != null && (ref == null || !qname.equals(ref.getCanonicalText()))) {
      AllClassesGetter.INSERT_FQN.handleInsert(context,item);
    }
    return;
  }
  PsiElement position=file.findElementAt(offset);
  PsiClass psiClass=item.getObject();
  final Project project=context.getProject();
  final Editor editor=context.getEditor();
  if (c == '#') {
    context.setLaterRunnable(new Runnable(){
      @Override public void run(){
        new CodeCompletionHandlerBase(CompletionType.BASIC).invokeCompletion(project,editor);
      }
    }
);
  }
 else   if (c == '.' && PsiTreeUtil.getParentOfType(position,PsiParameterList.class) == null) {
    AutoPopupController.getInstance(context.getProject()).autoPopupMemberLookup(context.getEditor(),null);
  }
  if (position != null) {
    PsiElement parent=position.getParent();
    if (parent instanceof PsiJavaCodeReferenceElement) {
      final PsiJavaCodeReferenceElement ref=(PsiJavaCodeReferenceElement)parent;
      if (PsiTreeUtil.getParentOfType(position,PsiDocTag.class) != null && ref.isReferenceTo(psiClass)) {
        return;
      }
    }
  }
  OffsetKey refEnd=context.trackOffset(context.getTailOffset(),false);
  boolean fillTypeArgs=context.getCompletionChar() == '<';
  if (fillTypeArgs) {
    context.setAddCompletionChar(false);
  }
  PsiTypeLookupItem.addImportForItem(context,psiClass);
  if (context.getOffset(refEnd) < 0) {
    return;
  }
  context.setTailOffset(context.getOffset(refEnd));
  context.commitDocument();
  if (shouldInsertParentheses(file.findElementAt(context.getTailOffset() - 1))) {
    if (ConstructorInsertHandler.insertParentheses(context,item,psiClass,false)) {
      fillTypeArgs|=psiClass.hasTypeParameters() && PsiUtil.getLanguageLevel(file).isAtLeast(LanguageLevel.JDK_1_5);
    }
  }
 else   if (insertingAnnotationWithParameters(context,item)) {
    JavaCompletionUtil.insertParentheses(context,item,false,true);
  }
  if (fillTypeArgs && context.getCompletionChar() != '(') {
    JavaCompletionUtil.promptTypeArgs(context,context.getOffset(refEnd));
  }
}
