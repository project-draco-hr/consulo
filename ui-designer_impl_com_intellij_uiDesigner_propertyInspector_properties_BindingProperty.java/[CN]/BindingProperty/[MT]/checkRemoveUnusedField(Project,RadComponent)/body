{
  final RadRootContainer root=(RadRootContainer)FormEditingUtil.getRoot(component);
  final String classToBind=root.getClassToBind();
  if (classToBind != null) {
    final PsiManager manager=PsiManager.getInstance(project);
    PsiClass aClass=manager.findClass(classToBind,GlobalSearchScope.allScope(project));
    if (aClass != null) {
      final PsiField oldBindingField=aClass.findFieldByName(component.getBinding(),false);
      if (oldBindingField != null) {
        final Query<PsiReference> query=ReferencesSearch.search(oldBindingField);
        boolean unreferenced=query.forEach(new Processor<PsiReference>(){
          public boolean process(          final PsiReference t){
            PsiMethod method=PsiTreeUtil.getParentOfType(t.getElement(),PsiMethod.class);
            if (method != null && method.getName().equals(AsmCodeGenerator.SETUP_METHOD_NAME)) {
              return true;
            }
            return false;
          }
        }
);
        if (unreferenced) {
          if (!CommonRefactoringUtil.checkReadOnlyStatus(project,aClass)) {
            return;
          }
          ApplicationManager.getApplication().runWriteAction(new Runnable(){
            public void run(){
              CommandProcessor.getInstance().executeCommand(project,new Runnable(){
                public void run(){
                  try {
                    oldBindingField.delete();
                  }
 catch (                  IncorrectOperationException e) {
                    Messages.showErrorDialog(project,UIDesignerBundle.message("error.cannot.delete.unused.field",e.getMessage()),CommonBundle.getErrorTitle());
                  }
                }
              }
,UIDesignerBundle.message("command.delete.unused.field"),null);
            }
          }
);
        }
      }
    }
  }
}
