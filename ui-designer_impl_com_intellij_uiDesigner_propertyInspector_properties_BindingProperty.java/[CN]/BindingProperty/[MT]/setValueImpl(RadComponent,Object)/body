{
  final String newBinding=(String)value;
  if (newBinding.length() == 0) {
    checkRemoveUnusedField(myProject,component);
    component.setBinding(null);
    return;
  }
  final RadRootContainer root=(RadRootContainer)FormEditingUtil.getRoot(component);
  if (!GuiEditorUtil.isBindingUnique(component,newBinding,root)) {
    throw new Exception("binding is not unique");
  }
  final String oldBinding=(String)getValue(component);
  component.setBinding(newBinding);
  final String classToBind=root.getClassToBind();
  if (classToBind == null) {
    return;
  }
  final PsiClass aClass=PsiManager.getInstance(myProject).findClass(classToBind,GlobalSearchScope.allScope(myProject));
  if (aClass == null) {
    return;
  }
  if (oldBinding == null) {
    if (aClass.findFieldByName(newBinding,true) == null) {
      CreateFieldFix.runImpl(myProject,root,aClass,component.getComponentClassName(),newBinding,false);
    }
    return;
  }
  final PsiField oldField=aClass.findFieldByName(oldBinding,true);
  if (oldField == null) {
    return;
  }
  if (aClass.findFieldByName(newBinding,true) != null) {
    return;
  }
  final int option=Messages.showYesNoDialog(myProject,MessageFormat.format(UIDesignerBundle.message("message.rename.field"),oldBinding,newBinding),UIDesignerBundle.message("title.rename"),Messages.getQuestionIcon());
  if (option != 0) {
    return;
  }
  GuiEditor editor=UIDesignerToolWindowManager.getInstance(myProject).getActiveFormEditor();
  if (editor != null) {
    editor.refreshAndSave(false);
  }
  PsiDocumentManager.getInstance(myProject).commitAllDocuments();
  final RenameProcessor processor=new RenameProcessor(myProject,oldField,newBinding,true,true);
  processor.run();
}
