{
  final Set<RefMethod> siblingMethods=new HashSet<RefMethod>();
  final Stack<RefMethod> pendingMethods=new Stack<RefMethod>();
  pendingMethods.add(method);
  while (!pendingMethods.isEmpty()) {
    final RefMethod methodToAnalyze=pendingMethods.pop();
    siblingMethods.add(methodToAnalyze);
    Collection<RefMethod> overridingMethods=methodToAnalyze.getDerivedMethods();
    for (    RefMethod overridingMethod : overridingMethods) {
      if (!siblingMethods.contains(overridingMethod) && !pendingMethods.contains(overridingMethod)) {
        pendingMethods.add(overridingMethod);
      }
    }
    final Collection<RefMethod> superMethods=methodToAnalyze.getSuperMethods();
    for (    RefMethod superMethod : superMethods) {
      if (!siblingMethods.contains(superMethod) && !pendingMethods.contains(superMethod)) {
        pendingMethods.add(superMethod);
      }
    }
  }
  return siblingMethods;
}
