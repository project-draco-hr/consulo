{
  Element versionElement=parentNode.getChild(ELEMENT_VERSION);
  if (versionElement != null) {
    myMajorVersion=versionElement.getAttributeValue(ATTRIBUTE_MAJOR);
    myMinorVersion=versionElement.getAttributeValue(ATTRIBUTE_MINOR);
    myCodeName=versionElement.getAttributeValue(ATTRIBUTE_CODENAME);
    myEAP=Boolean.parseBoolean(versionElement.getAttributeValue(ATTRIBUTE_EAP));
    myDefaultUpdateChannel=versionElement.getAttributeValue("update-channel");
  }
  Element companyElement=parentNode.getChild(ELEMENT_COMPANY);
  if (companyElement != null) {
    myCompanyName=companyElement.getAttributeValue(ATTRIBUTE_NAME,myCompanyName);
    myCompanyUrl=companyElement.getAttributeValue(ATTRIBUTE_URL,myCompanyUrl);
  }
  Element buildElement=parentNode.getChild(ELEMENT_BUILD);
  if (buildElement != null) {
    myBuildNumber=buildElement.getAttributeValue(ATTRIBUTE_NUMBER);
    String dateString=buildElement.getAttributeValue(ATTRIBUTE_DATE);
    if (dateString.equals("__BUILD_DATE__")) {
      myBuildDate=new GregorianCalendar();
      try {
        final JarFile bootJar=new JarFile(PathManager.getHomePath() + File.separator + "lib"+ File.separator+ "boot.jar");
        try {
          final JarEntry jarEntry=bootJar.entries().nextElement();
          myBuildDate.setTime(new Date(jarEntry.getTime()));
        }
  finally {
          bootJar.close();
        }
      }
 catch (      Exception ignore) {
      }
    }
 else {
      myBuildDate=parseDate(dateString);
    }
    String majorReleaseDateString=buildElement.getAttributeValue(ATTRIBUTE_MAJOR_RELEASE_DATE);
    if (majorReleaseDateString != null) {
      myMajorReleaseBuildDate=parseDate(majorReleaseDateString);
    }
  }
  Thread currentThread=Thread.currentThread();
  currentThread.setName(currentThread.getName() + " " + myMajorVersion+ "."+ myMinorVersion+ "#"+ myBuildNumber+ ", eap:"+ myEAP);
  Element logoElement=parentNode.getChild(ELEMENT_LOGO);
  if (logoElement != null) {
    myLogoUrl=logoElement.getAttributeValue(ATTRIBUTE_URL);
    myLogoTextColor=parseColor(logoElement.getAttributeValue(ATTRIBUTE_TEXT_COLOR));
    String v=logoElement.getAttributeValue(ATTRIBUTE_PROGRESS_COLOR);
    if (v != null) {
      myProgressColor=parseColor(v);
    }
    v=logoElement.getAttributeValue(ATTRIBUTE_PROGRESS_Y);
    if (v != null) {
      myProgressY=Integer.parseInt(v);
    }
  }
  Element aboutLogoElement=parentNode.getChild(ELEMENT_ABOUT);
  if (aboutLogoElement != null) {
    myAboutLogoUrl=aboutLogoElement.getAttributeValue(ATTRIBUTE_URL);
  }
  Element iconElement=parentNode.getChild(ELEMENT_ICON);
  if (iconElement != null) {
    myIconUrl=iconElement.getAttributeValue(ATTRIBUTE_SIZE32);
    mySmallIconUrl=iconElement.getAttributeValue(ATTRIBUTE_SIZE16);
    myOpaqueIconUrl=iconElement.getAttributeValue(ATTRIBUTE_SIZE32OPAQUE);
    final String toolWindowIcon=iconElement.getAttributeValue(ATTRIBUTE_SIZE12);
    if (toolWindowIcon != null) {
      myToolWindowIconUrl=toolWindowIcon;
    }
  }
  Element packageElement=parentNode.getChild(ELEMENT_PACKAGE);
  if (packageElement != null) {
    myPackageCode=packageElement.getAttributeValue(ATTRIBUTE_CODE);
  }
  Element showLicensee=parentNode.getChild(ELEMENT_LICENSEE);
  if (showLicensee != null) {
    myShowLicensee=Boolean.valueOf(showLicensee.getAttributeValue(ATTRIBUTE_SHOW)).booleanValue();
  }
  Element welcomeScreen=parentNode.getChild(WELCOME_SCREEN_ELEMENT_NAME);
  if (welcomeScreen != null) {
    myWelcomeScreenCaptionUrl=welcomeScreen.getAttributeValue(CAPTION_URL_ATTR);
    myWelcomeScreenDeveloperSloganUrl=welcomeScreen.getAttributeValue(SLOGAN_URL_ATTR);
  }
  Element helpElement=parentNode.getChild(HELP_ELEMENT_NAME);
  if (helpElement != null) {
    myHelpFileName=helpElement.getAttributeValue(ATTRIBUTE_HELP_FILE);
    myHelpRootName=helpElement.getAttributeValue(ATTRIBUTE_HELP_ROOT);
    final String webHelpUrl=helpElement.getAttributeValue(ATTRIBUTE_WEBHELP_URL);
    if (webHelpUrl != null) {
      myWebHelpUrl=webHelpUrl;
    }
    final String attValue=helpElement.getAttributeValue(ATTRIBUTE_HAS_CONTEXT_HELP);
    myHasContextHelp=attValue == null || Boolean.parseBoolean(attValue);
  }
  Element updateUrls=parentNode.getChild(UPDATE_URLS_ELEMENT_NAME);
  myUpdateUrls=new UpdateUrlsImpl(updateUrls);
  Element documentationElement=parentNode.getChild(ELEMENT_DOCUMENTATION);
  if (documentationElement != null) {
    myDocumentationUrl=documentationElement.getAttributeValue(ATTRIBUTE_URL);
  }
  Element supportElement=parentNode.getChild(ELEMENT_SUPPORT);
  if (supportElement != null) {
    mySupportUrl=supportElement.getAttributeValue(ATTRIBUTE_URL);
  }
  Element feedbackElement=parentNode.getChild(ELEMENT_FEEDBACK);
  if (feedbackElement != null) {
    myEAPFeedbackUrl=feedbackElement.getAttributeValue(ATTRIBUTE_EAP_URL);
    myReleaseFeedbackUrl=feedbackElement.getAttributeValue(ATTRIBUTE_RELEASE_URL);
  }
  Element whatsnewElement=parentNode.getChild(ELEMENT_WHATSNEW);
  if (whatsnewElement != null) {
    myWhatsNewUrl=whatsnewElement.getAttributeValue(ATTRIBUTE_URL);
  }
  myPluginsListUrl=DEFAULT_PLUGINS_HOST + "/plugins/list/";
  myPluginsDownloadUrl=DEFAULT_PLUGINS_HOST + "/pluginManager/";
  Element pluginsElement=parentNode.getChild(ELEMENT_PLUGINS);
  if (pluginsElement != null) {
    myPluginManagerUrl=pluginsElement.getAttributeValue(ATTRIBUTE_URL);
    final String listUrl=pluginsElement.getAttributeValue(ATTRIBUTE_LIST_URL);
    if (listUrl != null) {
      myPluginsListUrl=listUrl;
    }
    final String downloadUrl=pluginsElement.getAttributeValue(ATTRIBUTE_DOWNLOAD_URL);
    if (downloadUrl != null) {
      myPluginsDownloadUrl=downloadUrl;
    }
  }
 else {
    myPluginManagerUrl=DEFAULT_PLUGINS_HOST;
  }
  final String pluginsHost=System.getProperty("idea.plugins.host");
  if (pluginsHost != null) {
    myPluginsListUrl=myPluginsListUrl.replace(DEFAULT_PLUGINS_HOST,pluginsHost);
    myPluginsDownloadUrl=myPluginsDownloadUrl.replace(DEFAULT_PLUGINS_HOST,pluginsHost);
  }
  Element keymapElement=parentNode.getChild(ELEMENT_KEYMAP);
  if (keymapElement != null) {
    myWinKeymapUrl=keymapElement.getAttributeValue(ATTRIBUTE_WINDOWS_URL);
    myMacKeymapUrl=keymapElement.getAttributeValue(ATTRIBUTE_MAC_URL);
  }
  myPluginChooserPages=new ArrayList<PluginChooserPage>();
  final List children=parentNode.getChildren(PLUGINS_PAGE_ELEMENT_NAME);
  for (  Object child : children) {
    myPluginChooserPages.add(new PluginChooserPageImpl((Element)child));
  }
  List<Element> essentialPluginsElements=JDOMUtil.getChildren(parentNode,ESSENTIAL_PLUGIN);
  Collection<String> essentialPluginsIds=ContainerUtil.mapNotNull(essentialPluginsElements,new Function<Element,String>(){
    @Override public String fun(    Element element){
      String id=element.getTextTrim();
      return StringUtil.isNotEmpty(id) ? id : null;
    }
  }
);
  myEssentialPluginsIds=ArrayUtil.toStringArray(essentialPluginsIds);
}
