{
  super(new MyModel(project));
  myProject=project;
  myModel=(MyModel)getTableModel();
  final TableColumn valueColumn=getColumnModel().getColumn(1);
  valueColumn.setCellRenderer(new DefaultTableCellRenderer(){
    public Component getTableCellRendererComponent(    final JTable table,    final Object value,    final boolean isSelected,    final boolean hasFocus,    final int row,    final int column){
      super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
      Charset t=(Charset)value;
      Object userObject=table.getModel().getValueAt(row,0);
      VirtualFile file=userObject instanceof VirtualFile ? (VirtualFile)userObject : null;
      Pair<String,Boolean> pair=ChangeEncodingUpdateGroup.update(myProject,file);
      boolean enabled=file == null || pair.getSecond();
      if (t != null) {
        setText(t.displayName());
      }
 else {
        if (file != null) {
          Charset charset=ChooseFileEncodingAction.encodingFromContent(myProject,file);
          if (charset != null) {
            setText(charset.displayName());
          }
 else           if (LoadTextUtil.utfCharsetWasDetectedFromBytes(file)) {
            setText(file.getCharset().displayName());
          }
 else           if (!ChooseFileEncodingAction.isEnabled(myProject,file)) {
            setText("N/A");
          }
        }
      }
      setEnabled(enabled);
      return this;
    }
  }
);
  valueColumn.setCellEditor(new DefaultCellEditor(new JComboBox()){
    private VirtualFile myVirtualFile;
{
      delegate=new EditorDelegate(){
        public void setValue(        Object value){
          myModel.setValueAt(value,new DefaultMutableTreeNode(myVirtualFile),-1);
        }
        public Object getCellEditorValue(){
          return myModel.getValueAt(new DefaultMutableTreeNode(myVirtualFile),1);
        }
      }
;
    }
    public Component getTableCellEditorComponent(    JTable table,    final Object value,    boolean isSelected,    int row,    int column){
      Object o=table.getModel().getValueAt(row,0);
      myVirtualFile=o instanceof Project ? null : (VirtualFile)o;
      final ChooseFileEncodingAction changeAction=new ChooseFileEncodingAction(myVirtualFile,myProject){
        protected void chosen(        VirtualFile virtualFile,        Charset charset){
          valueColumn.getCellEditor().stopCellEditing();
          int ret=askWhetherClearSubdirectories(virtualFile);
          if (ret != 2) {
            myModel.setValueAt(charset,new DefaultMutableTreeNode(virtualFile),1);
          }
        }
      }
;
      Presentation templatePresentation=changeAction.getTemplatePresentation();
      final JComponent comboComponent=changeAction.createCustomComponent(templatePresentation);
      DataContext dataContext=SimpleDataContext.getSimpleContext(DataConstants.VIRTUAL_FILE,myVirtualFile,SimpleDataContext.getProjectContext(myProject));
      AnActionEvent event=new AnActionEvent(null,dataContext,ActionPlaces.UNKNOWN,templatePresentation,ActionManager.getInstance(),0);
      changeAction.update(event);
      editorComponent=comboComponent;
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          press(comboComponent);
        }
      }
);
      Charset charset=(Charset)myModel.getValueAt(new DefaultMutableTreeNode(myVirtualFile),1);
      templatePresentation.setText(charset == null ? "" : charset.displayName());
      comboComponent.revalidate();
      return editorComponent;
    }
  }
);
  getTree().setShowsRootHandles(true);
  getTree().setLineStyleAngled();
  getTree().setRootVisible(true);
  getTree().setCellRenderer(new DefaultTreeCellRenderer(){
    public Component getTreeCellRendererComponent(    final JTree tree,    final Object value,    final boolean sel,    final boolean expanded,    final boolean leaf,    final int row,    final boolean hasFocus){
      super.getTreeCellRendererComponent(tree,value,sel,expanded,leaf,row,hasFocus);
      if (value instanceof ProjectRootNode) {
        setText("Project");
        return this;
      }
      FileNode fileNode=(FileNode)value;
      VirtualFile file=fileNode.getObject();
      if (fileNode.getParent() instanceof FileNode) {
        setText(file.getName());
      }
 else {
        setText(file.getPresentableUrl());
      }
      Icon icon;
      if (file.isDirectory()) {
        icon=expanded ? Icons.DIRECTORY_OPEN_ICON : Icons.DIRECTORY_CLOSED_ICON;
      }
 else {
        icon=IconUtil.getIcon(file,0,null);
      }
      setIcon(icon);
      return this;
    }
  }
);
  getTableHeader().setReorderingAllowed(false);
  setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  setPreferredScrollableViewportSize(new Dimension(300,getRowHeight() * 10));
  getColumnModel().getColumn(0).setPreferredWidth(280);
  valueColumn.setPreferredWidth(60);
}
