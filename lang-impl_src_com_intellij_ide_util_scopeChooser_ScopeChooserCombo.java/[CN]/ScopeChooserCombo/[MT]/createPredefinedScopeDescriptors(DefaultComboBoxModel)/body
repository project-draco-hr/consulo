{
  model.addElement(new ScopeDescriptor(GlobalSearchScope.projectScope(myProject)));
  if (mySuggestSearchInLibs) {
    model.addElement(new ScopeDescriptor(GlobalSearchScope.allScope(myProject)));
  }
  model.addElement(new ScopeDescriptor(GlobalSearchScope.projectProductionScope(myProject)));
  model.addElement(new ScopeDescriptor(GlobalSearchScope.projectTestScope(myProject)));
  final DataContext dataContext=DataManager.getInstance().getDataContext();
  PsiElement dataContextElement=LangDataKeys.PSI_ELEMENT.getData(dataContext);
  if (dataContextElement == null) {
    dataContextElement=LangDataKeys.PSI_FILE.getData(dataContext);
  }
  if (dataContextElement != null) {
    Module module=ModuleUtil.findModuleForPsiElement(dataContextElement);
    if (module == null) {
      module=LangDataKeys.MODULE.getData(dataContext);
    }
    if (module != null) {
      model.addElement(new ScopeDescriptor(module.getModuleScope()));
    }
    if (dataContextElement.getContainingFile() != null) {
      model.addElement(new ScopeDescriptor(new LocalSearchScope(dataContextElement,IdeBundle.message("scope.current.file"))));
    }
  }
  FileEditorManager fileEditorManager=FileEditorManager.getInstance(myProject);
  final Editor selectedTextEditor=fileEditorManager.getSelectedTextEditor();
  if (selectedTextEditor != null) {
    final PsiFile psiFile=PsiDocumentManager.getInstance(myProject).getPsiFile(selectedTextEditor.getDocument());
    if (psiFile != null) {
      if (selectedTextEditor.getSelectionModel().hasSelection()) {
        final PsiElement startElement=psiFile.findElementAt(selectedTextEditor.getSelectionModel().getSelectionStart());
        if (startElement != null) {
          final PsiElement endElement=psiFile.findElementAt(selectedTextEditor.getSelectionModel().getSelectionEnd());
          if (endElement != null) {
            final PsiElement parent=PsiTreeUtil.findCommonParent(startElement,endElement);
            if (parent != null) {
              final List<PsiElement> elements=new ArrayList<PsiElement>();
              final PsiElement[] children=parent.getChildren();
              for (              PsiElement child : children) {
                if (!(child instanceof PsiWhiteSpace)) {
                  elements.add(child);
                }
              }
              if (!elements.isEmpty()) {
                model.addElement(new ScopeDescriptor(new LocalSearchScope(elements.toArray(new PsiElement[elements.size()]),IdeBundle.message("scope.selection"))));
              }
            }
          }
        }
      }
    }
  }
  if (!ChangeListManager.getInstance(myProject).getAffectedFiles().isEmpty()) {
    model.addElement(new ModifiedFilesScopeDescriptor());
  }
  UsageView selectedUsageView=UsageViewManager.getInstance(myProject).getSelectedUsageView();
  if (selectedUsageView != null && !selectedUsageView.isSearchInProgress()) {
    final Set<Usage> usages=selectedUsageView.getUsages();
    final List<PsiElement> results=new ArrayList<PsiElement>(usages.size());
    if (myPrevSearchFiles) {
      final Set<VirtualFile> files=new HashSet<VirtualFile>();
      for (      Usage usage : usages) {
        if (usage instanceof PsiElementUsage) {
          PsiElement psiElement=((PsiElementUsage)usage).getElement();
          if (psiElement != null && psiElement.isValid()) {
            PsiFile psiFile=psiElement.getContainingFile();
            if (psiFile != null) {
              VirtualFile file=psiFile.getVirtualFile();
              if (file != null)               files.add(file);
            }
          }
        }
      }
      if (!files.isEmpty()) {
        model.addElement(new ScopeDescriptor(new GlobalSearchScope(){
          public String getDisplayName(){
            return IdeBundle.message("scope.files.in.previous.search.result");
          }
          public boolean contains(          VirtualFile file){
            return files.contains(file);
          }
          public int compare(          VirtualFile file1,          VirtualFile file2){
            return 0;
          }
          public boolean isSearchInModuleContent(          @NotNull Module aModule){
            return true;
          }
          public boolean isSearchInLibraries(){
            return true;
          }
        }
));
      }
    }
 else {
      for (      Usage usage : usages) {
        if (usage instanceof PsiElementUsage) {
          final PsiElement element=((PsiElementUsage)usage).getElement();
          if (element != null && element.isValid()) {
            results.add(element);
          }
        }
      }
      if (!results.isEmpty()) {
        model.addElement(new ScopeDescriptor(new LocalSearchScope(results.toArray(new PsiElement[results.size()]),IdeBundle.message("scope.previous.search.results"))));
      }
    }
  }
  for (  ScopeDescriptorProvider provider : Extensions.getExtensions(ScopeDescriptorProvider.EP_NAME)) {
    for (    ScopeDescriptor scopeDescriptor : provider.getScopeDescriptors(myProject)) {
      model.addElement(scopeDescriptor);
    }
  }
}
