{
  final File target=MakeUtil.canonicalRelativePath(outputDir,getOutputRelativePath());
  final BuildRecipe buildRecipe=getChildInstructions(context);
  try {
    if (myBuildProperties.isExplodedEnabled()) {
      File fromFile=new File(myBuildProperties.getExplodedPath());
      MakeUtil.getInstance().copyFile(fromFile,target,context,writtenPaths,fileFilter);
      buildRecipe.visitInstructionsWithExceptions(new BuildInstructionVisitor(){
        public boolean visitInstruction(        BuildInstruction instruction) throws Exception {
          if (instruction.isExternalDependencyInstruction()) {
            instruction.addFilesToExploded(context,target,writtenPaths,fileFilter);
          }
          return true;
        }
      }
,false);
    }
 else {
      buildRecipe.visitInstructionsWithExceptions(new BuildInstructionVisitor(){
        public boolean visitInstruction(        BuildInstruction instruction) throws Exception {
          instruction.addFilesToExploded(context,target,writtenPaths,fileFilter);
          return true;
        }
      }
,false);
    }
  }
 catch (  Exception e) {
    if (e instanceof IOException)     throw (IOException)e;
    if (e instanceof RuntimeException)     throw (RuntimeException)e;
    Degenerator.unableToDegenerateMarker();
    return;
  }
}
