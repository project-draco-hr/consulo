{
  HashSet<Object> lookups=new HashSet<Object>();
  GlobalSearchScope packageScope=PackageScope.packageScope(context,true);
  GlobalSearchScope scope=myJavaClassReferenceSet.getProvider().getScope();
  if (scope != null) {
    packageScope=packageScope.intersectWith(scope);
  }
  final GlobalSearchScope allScope=ProjectScope.getAllScope(context.getProject());
  final boolean instantiatable=JavaClassReferenceProvider.INSTANTIATABLE.getBooleanValue(getOptions());
  final boolean notInterface=JavaClassReferenceProvider.NOT_INTERFACE.getBooleanValue(getOptions());
  final boolean notEnum=JavaClassReferenceProvider.NOT_ENUM.getBooleanValue(getOptions());
  final boolean concrete=JavaClassReferenceProvider.CONCRETE.getBooleanValue(getOptions());
  for (  String extendClassName : extendClasses) {
    final PsiClass extendClass=JavaPsiFacade.getInstance(context.getProject()).findClass(extendClassName,allScope);
    if (extendClass != null) {
      if (packageScope.contains(extendClass.getContainingFile().getVirtualFile())) {
        if (isClassAccepted(extendClass,instantiatable,concrete,notInterface,notEnum)) {
          ContainerUtil.addIfNotNull(createSubclassLookupValue(context,extendClass),lookups);
        }
      }
      for (      final PsiClass clazz : ClassInheritorsSearch.search(extendClass,packageScope,true)) {
        if (isClassAccepted(clazz,instantiatable,concrete,notInterface,notEnum)) {
          ContainerUtil.addIfNotNull(createSubclassLookupValue(context,clazz),lookups);
        }
      }
    }
  }
  return lookups.toArray();
}
