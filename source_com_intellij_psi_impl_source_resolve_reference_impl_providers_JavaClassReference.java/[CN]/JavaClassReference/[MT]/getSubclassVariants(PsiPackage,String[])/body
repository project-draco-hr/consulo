{
  HashSet<Object> lookups=new HashSet<Object>();
  GlobalSearchScope packageScope=GlobalSearchScope.packageScope(context,true);
  GlobalSearchScope scope=myJavaClassReferenceSet.getProvider().getScope();
  if (scope != null) {
    packageScope=packageScope.intersectWith(scope);
  }
  final GlobalSearchScope allScope=context.getProject().getAllScope();
  boolean instantiatable=JavaClassReferenceProvider.INSTANTIATABLE.getBooleanValue(getOptions());
  for (  String extendClassName : extendClasses) {
    PsiClass extendClass=context.getManager().findClass(extendClassName,allScope);
    if (extendClass != null) {
      PsiClass[] result=context.getManager().getSearchHelper().findInheritors(extendClass,packageScope,true);
      for (      final PsiClass clazz : result) {
        Object value=createSubclassLookupValue(context,clazz,instantiatable);
        if (value != null) {
          lookups.add(value);
        }
      }
      if (packageScope.contains(extendClass.getContainingFile().getVirtualFile())) {
        Object value=createSubclassLookupValue(context,extendClass,instantiatable);
        if (value != null) {
          lookups.add(value);
        }
      }
    }
  }
  return lookups.toArray();
}
