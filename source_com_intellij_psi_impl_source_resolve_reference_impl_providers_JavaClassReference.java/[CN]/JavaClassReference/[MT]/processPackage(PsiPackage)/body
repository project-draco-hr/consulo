{
  final PsiPackage[] subPackages=aPackage.getSubPackages();
  final PsiClass[] classes=aPackage.getClasses();
  final Map<CustomizableReferenceProvider.CustomizationKey,Object> options=getOptions();
  if (options != null) {
    final ArrayList<Object> list=new ArrayList<Object>(Arrays.asList(subPackages));
    final boolean instantiatable=JavaClassReferenceProvider.INSTANTIATABLE.getBooleanValue(options);
    final boolean concrete=JavaClassReferenceProvider.CONCRETE.getBooleanValue(options);
    final boolean notInterface=JavaClassReferenceProvider.NOT_INTERFACE.getBooleanValue(options);
    for (    PsiClass clazz : classes) {
      if (isClassAccepted(clazz,instantiatable,concrete,notInterface)) {
        list.add(clazz);
      }
    }
    return list.toArray();
  }
  return ArrayUtil.mergeArrays(subPackages,classes,Object.class);
}
