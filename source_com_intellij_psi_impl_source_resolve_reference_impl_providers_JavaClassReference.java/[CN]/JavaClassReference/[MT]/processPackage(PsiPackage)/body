{
  final ArrayList<Object> list=new ArrayList<Object>();
  final int startOffset=StringUtil.isEmpty(aPackage.getName()) ? 0 : aPackage.getName().length() + 1;
  for (  final PsiPackage subPackage : aPackage.getSubPackages()) {
    final String shortName=subPackage.getQualifiedName().substring(startOffset);
    if (JavaPsiFacade.getInstance(subPackage.getProject()).getNameHelper().isIdentifier(shortName)) {
      list.add(subPackage);
    }
  }
  final PsiClass[] classes=aPackage.getClasses();
  final Map<CustomizableReferenceProvider.CustomizationKey,Object> options=getOptions();
  if (options != null) {
    final boolean instantiatable=JavaClassReferenceProvider.INSTANTIATABLE.getBooleanValue(options);
    final boolean concrete=JavaClassReferenceProvider.CONCRETE.getBooleanValue(options);
    final boolean notInterface=JavaClassReferenceProvider.NOT_INTERFACE.getBooleanValue(options);
    for (    PsiClass clazz : classes) {
      if (isClassAccepted(clazz,instantiatable,concrete,notInterface)) {
        list.add(clazz);
      }
    }
  }
 else {
    list.addAll(Arrays.asList(classes));
  }
  return list.toArray();
}
