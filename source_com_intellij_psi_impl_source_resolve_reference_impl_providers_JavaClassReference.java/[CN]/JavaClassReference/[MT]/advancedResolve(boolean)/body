{
  final PsiElement psiElement=getElement();
  if (!psiElement.isValid())   return JavaResolveResult.EMPTY;
  final String elementText=psiElement.getText();
  final PsiElement context=getContext();
  if (context instanceof PsiClass) {
    if (isStaticClassReference(elementText)) {
      final PsiClass psiClass=((PsiClass)context).findInnerClassByName(getCanonicalText(),false);
      if (psiClass != null)       return new ClassCandidateInfo(psiClass,PsiSubstitutor.EMPTY,false,psiElement);
      return JavaResolveResult.EMPTY;
    }
 else     if (!myInStaticImport && myJavaClassReferenceSet.isAllowDollarInNames()) {
      return JavaResolveResult.EMPTY;
    }
  }
  final int endOffset=getRangeInElement().getEndOffset();
  LOG.assertTrue(endOffset <= elementText.length(),elementText);
  final int startOffset=myJavaClassReferenceSet.getReference(0).getRangeInElement().getStartOffset();
  final String qName=elementText.substring(startOffset,endOffset);
  if (!qName.contains(".")) {
    final String defaultPackage=JavaClassReferenceProvider.DEFAULT_PACKAGE.getValue(getOptions());
    if (StringUtil.isNotEmpty(defaultPackage)) {
      final JavaResolveResult resolveResult=advancedResolveInner(psiElement,defaultPackage + "." + qName);
      if (resolveResult != JavaResolveResult.EMPTY) {
        return resolveResult;
      }
    }
  }
  return advancedResolveInner(psiElement,qName);
}
