{
  final List<LocalQuickFix> list=OrderEntryFix.registerFixes(info,this);
  final String[] extendClasses=JavaClassReferenceProvider.EXTEND_CLASS_NAMES.getValue(getOptions());
  final String extendClass=extendClasses != null && extendClasses.length > 0 ? extendClasses[0] : null;
  final PsiReference contextReference=getContextReference();
  PsiElement context=contextReference != null ? contextReference.resolve() : null;
  if (context != null || contextReference == null) {
    final int[] primitives=getType().getPrimitives();
    boolean createJavaClass=JavaClassReferenceProvider.CLASS_REFERENCE_TYPE.getPrimitives().length == primitives.length && JavaClassReferenceProvider.CLASS_REFERENCE_TYPE.isAssignableTo(primitives[0]);
    final List<PsiDirectory> writableDirectoryList=getWritableDirectoryList(context);
    if (!writableDirectoryList.isEmpty() && checkCreateClassOrPackage(writableDirectoryList,createJavaClass)) {
      final CreateClassOrPackageFix fix=doRegisterQuickFix(info,writableDirectoryList,createJavaClass,extendClass);
      if (list == null) {
        return Arrays.asList(fix);
      }
 else {
        final ArrayList<LocalQuickFix> fixes=new ArrayList<LocalQuickFix>(list.size() + 1);
        fixes.addAll(list);
        fixes.add(fix);
        return fixes;
      }
    }
  }
  return list;
}
