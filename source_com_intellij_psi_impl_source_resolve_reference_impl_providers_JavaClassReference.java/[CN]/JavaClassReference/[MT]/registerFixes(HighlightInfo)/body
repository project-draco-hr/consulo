{
  final List<LocalQuickFix> list=OrderEntryFix.registerFixes(new QuickFixActionRegistrarImpl(info),this);
  final String[] extendClasses=getExtendClassNames();
  final String extendClass=extendClasses != null && extendClasses.length > 0 ? extendClasses[0] : null;
  final JavaClassReference[] references=getJavaClassReferenceSet().getAllReferences();
  PsiPackage contextPackage=null;
  for (int i=myIndex; i >= 0; i--) {
    final PsiElement context=references[i].getContext();
    if (context != null) {
      if (context instanceof PsiPackage) {
        contextPackage=(PsiPackage)context;
      }
      break;
    }
  }
  boolean createJavaClass=!canReferencePackage();
  final Pair<String,ClassKind> pair=JavaClassReferenceProvider.CLASS_TEMPLATE.getValue(getOptions());
  final ClassKind kind=createJavaClass ? pair != null ? pair.second : ClassKind.CLASS : null;
  final String templateName=pair == null ? null : pair.first;
  final TextRange range=new TextRange(references[0].getRangeInElement().getStartOffset(),getRangeInElement().getEndOffset());
  final String qualifiedName=range.substring(getElement().getText());
  final CreateClassOrPackageFix action=CreateClassOrPackageFix.createFix(qualifiedName,getScope(),getElement(),contextPackage,kind,extendClass,templateName);
  if (action != null) {
    QuickFixAction.registerQuickFixAction(info,action);
    if (list == null) {
      return Arrays.asList(action);
    }
 else {
      final ArrayList<LocalQuickFix> fixes=new ArrayList<LocalQuickFix>(list.size() + 1);
      fixes.addAll(list);
      fixes.add(action);
      return fixes;
    }
  }
  return list;
}
