{
  super(new BorderLayout());
  Splitter splitter=new Splitter(false,0.3f);
  add(splitter,BorderLayout.CENTER);
  myProject=project;
  for (  Module module : ModuleManager.getInstance(project).getModules()) {
    myAllModulesMap.put(module.getName(),module);
  }
  myTree=new Tree(new MyTreeModel());
  myTree.setRootVisible(false);
  final JPanel treePanel=ToolbarDecorator.createDecorator(myTree).addExtraAction(new AnActionButton("Move to",AllIcons.Actions.Nextfile){
    @Override public void actionPerformed(    AnActionEvent e){
      final MyModuleNode node=(MyModuleNode)myTree.getSelectionPath().getLastPathComponent();
      final TreePath[] selectedNodes=myTree.getSelectionPaths();
      final ProcessorConfigProfile nodeProfile=((ProfileNode)node.getParent()).myProfile;
      final List<ProcessorConfigProfile> profiles=new ArrayList<ProcessorConfigProfile>();
      profiles.add(myDefaultProfile);
      for (      ProcessorConfigProfile profile : myModuleProfiles) {
        profiles.add(profile);
      }
      profiles.remove(nodeProfile);
      final JBList list=new JBList(profiles);
      final JBPopup popup=JBPopupFactory.getInstance().createListPopupBuilder(list).setTitle("Move to").setItemChoosenCallback(new Runnable(){
        @Override public void run(){
          final Object value=list.getSelectedValue();
          if (value instanceof ProcessorConfigProfile) {
            final ProcessorConfigProfile chosenProfile=(ProcessorConfigProfile)value;
            final Module toSelect=(Module)node.getUserObject();
            if (selectedNodes != null) {
              for (              TreePath selectedNode : selectedNodes) {
                final Object node=selectedNode.getLastPathComponent();
                if (node instanceof MyModuleNode) {
                  final Module module=(Module)((MyModuleNode)node).getUserObject();
                  if (nodeProfile != myDefaultProfile) {
                    nodeProfile.removeModuleName(module.getName());
                  }
                  if (chosenProfile != myDefaultProfile) {
                    chosenProfile.addModuleName(module.getName());
                  }
                }
              }
            }
            final RootNode root=(RootNode)myTree.getModel().getRoot();
            root.sync();
            final DefaultMutableTreeNode node=TreeUtil.findNodeWithObject(root,toSelect);
            if (node != null) {
              TreeUtil.selectNode(myTree,node);
            }
          }
        }
      }
).createPopup();
      RelativePoint point=e.getInputEvent() instanceof MouseEvent ? getPreferredPopupPoint() : TreeUtil.getPointForSelection(myTree);
      popup.show(point);
    }
    @Override public ShortcutSet getShortcut(){
      return ActionManager.getInstance().getAction("Move").getShortcutSet();
    }
    @Override public boolean isEnabled(){
      return myTree.getSelectionPath() != null && myTree.getSelectionPath().getLastPathComponent() instanceof MyModuleNode && !myModuleProfiles.isEmpty();
    }
  }
).createPanel();
  splitter.setFirstComponent(treePanel);
  myTree.setCellRenderer(new MyCellRenderer());
  myTree.addTreeSelectionListener(new TreeSelectionListener(){
    @Override public void valueChanged(    TreeSelectionEvent e){
      final TreePath path=myTree.getSelectionPath();
      if (path != null) {
        Object node=path.getLastPathComponent();
        if (node instanceof MyModuleNode) {
          node=((MyModuleNode)node).getParent();
        }
        if (node instanceof ProfileNode) {
          final ProcessorConfigProfile nodeProfile=((ProfileNode)node).myProfile;
          final ProcessorConfigProfile selectedProfile=mySelectedProfile;
          if (nodeProfile != selectedProfile) {
            if (selectedProfile != null) {
              myProfilePanel.saveTo(selectedProfile);
            }
            mySelectedProfile=nodeProfile;
            myProfilePanel.setProfile(nodeProfile);
          }
        }
      }
    }
  }
);
  myProfilePanel=new ProcessorProfilePanel(project);
  myProfilePanel.setBorder(IdeBorderFactory.createEmptyBorder(0,6,0,0));
  splitter.setSecondComponent(myProfilePanel);
}
