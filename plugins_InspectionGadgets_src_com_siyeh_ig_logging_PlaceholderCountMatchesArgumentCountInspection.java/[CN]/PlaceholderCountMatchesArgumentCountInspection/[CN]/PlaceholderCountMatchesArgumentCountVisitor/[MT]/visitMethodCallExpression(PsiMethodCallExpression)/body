{
  super.visitMethodCallExpression(expression);
  final PsiReferenceExpression methodExpression=expression.getMethodExpression();
  final String name=methodExpression.getReferenceName();
  if (!loggingMethodNames.contains(name)) {
    return;
  }
  final PsiExpressionList argumentList=expression.getArgumentList();
  final PsiExpression[] arguments=argumentList.getExpressions();
  if (arguments.length == 0) {
    return;
  }
  final PsiExpression firstArgument=arguments[0];
  final int placeholderCount;
  final int argumentCount;
  if (InheritanceUtil.isInheritor(firstArgument.getType(),"org.slf4j.Marker")) {
    if (arguments.length < 2) {
      return;
    }
    final PsiExpression secondArgument=arguments[1];
    if (!ExpressionUtils.hasStringType(secondArgument)) {
      return;
    }
    final String value=(String)ExpressionUtils.computeConstantExpression(secondArgument);
    if (value == null) {
      return;
    }
    placeholderCount=countPlaceholders(value);
    argumentCount=hasThrowableType(arguments[arguments.length - 1]) ? arguments.length - 3 : arguments.length - 2;
  }
 else   if (ExpressionUtils.hasStringType(firstArgument)) {
    final String value=(String)ExpressionUtils.computeConstantExpression(firstArgument);
    if (value == null) {
      return;
    }
    placeholderCount=countPlaceholders(value);
    argumentCount=hasThrowableType(arguments[arguments.length - 1]) ? arguments.length - 2 : arguments.length - 1;
  }
 else {
    return;
  }
  if (placeholderCount == argumentCount) {
    return;
  }
  registerMethodCallError(expression,argumentCount,placeholderCount);
}
