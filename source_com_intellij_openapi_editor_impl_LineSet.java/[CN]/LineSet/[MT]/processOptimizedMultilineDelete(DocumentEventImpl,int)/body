{
  final int insertionPoint=e.getOffset();
  final int changedLineIndex=e.getStartOldIndex();
  final int lengthDiff=e.getOldLength();
  SegmentArrayWithData workingCopySegmentsForTesting=null;
  SegmentArrayWithData segments;
  if (doTest) {
    segments=new SegmentArrayWithData();
    workingCopySegmentsForTesting=new SegmentArrayWithData();
    fillSegments(segments,workingCopySegmentsForTesting);
  }
 else {
    segments=mySegments;
  }
  final int oldSegmentStart=segments.getSegmentStart(changedLineIndex);
  final int lastChangedEnd=segments.getSegmentEnd(changedLineIndex + optimizedLineShift);
  final short lastChangedData=segments.getSegmentData(changedLineIndex + optimizedLineShift);
  final int newSegmentEnd=oldSegmentStart + (insertionPoint - oldSegmentStart) + (lastChangedEnd - insertionPoint - lengthDiff);
  segments.remove(changedLineIndex,changedLineIndex + optimizedLineShift);
  if (newSegmentEnd != 0) {
    segments.setElementAt(changedLineIndex,oldSegmentStart,newSegmentEnd,lastChangedData | MODIFIED_MASK);
  }
 else {
    segments.remove(changedLineIndex,changedLineIndex + 1);
  }
  final int segmentCount=segments.getSegmentCount();
  for (int i=changedLineIndex + 1; i < segmentCount; ++i) {
    segments.setElementAt(i,segments.getSegmentStart(i) - lengthDiff,segments.getSegmentEnd(i) - lengthDiff,segments.getSegmentData(i));
  }
  if (doTest) {
    final SegmentArrayWithData data=mySegments;
    mySegments=segments;
    addEmptyLineAtEnd();
    doCheckResults(workingCopySegmentsForTesting,e,data,segments);
  }
 else {
    addEmptyLineAtEnd();
  }
}
