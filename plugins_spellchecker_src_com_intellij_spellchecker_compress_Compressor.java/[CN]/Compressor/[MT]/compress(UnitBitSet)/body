{
  if (origin == null) {
    return new byte[0];
  }
  final List<Byte> words=new ArrayList<Byte>();
  final List<Byte> compressed=new ArrayList<Byte>();
  final UnitBitSet copyOfOrigin=UnitBitSet.create(origin,origin.bitsPerUnit);
  for (int i=0; i < skipFirst; i++) {
    compressed.add(Integer.valueOf(copyOfOrigin.getUnitValue(i)).byteValue());
  }
  copyOfOrigin.moveLeft(skipFirst);
  compressed.add(Integer.valueOf(copyOfOrigin.bitsPerUnit).byteValue());
  UnitBitSet bs=UnitBitSet.create(copyOfOrigin,WORD_LENGTH - 1);
  bs.iterateParUnits(new Consumer<Integer>(){
    public void consume(    Integer integer){
      if (integer != 0) {
        words.add(integer.byteValue());
      }
 else {
        words.add(TRANSITION_WORD);
      }
    }
  }
,0,true);
  int count=-1;
  for (  Byte word : words) {
    if (word == TRANSITION_WORD && count == -1) {
      count++;
    }
 else     if (word == TRANSITION_WORD && count > -1) {
      count++;
    }
 else     if (word != TRANSITION_WORD && count > -1) {
      while (count > 120) {
        compressed.add((byte)(TRANSITION_WORD + 120));
        count-=121;
      }
      if (count > -1) {
        compressed.add((byte)(TRANSITION_WORD + count));
      }
      compressed.add(word);
      count=-1;
    }
 else     if (word != TRANSITION_WORD && count == -1) {
      compressed.add(word);
      count=-1;
    }
  }
  byte[] result=new byte[compressed.size()];
  int i=0;
  for (  Byte word : compressed) {
    result[i++]=word;
  }
  return result;
}
