{
  boolean skipForStatement=true;
  final PsiForStatement forStatement=PsiTreeUtil.getParentOfType(expr,PsiForStatement.class);
  if (forStatement != null) {
    final VariablesProcessor variablesProcessor=new VariablesProcessor(false){
      @Override protected boolean check(      PsiVariable var,      ResolveState state){
        return PsiTreeUtil.isAncestor(forStatement.getInitialization(),var,true);
      }
    }
;
    PsiScopesUtil.treeWalkUp(variablesProcessor,expr,null);
    skipForStatement=variablesProcessor.size() == 0;
  }
  PsiElement containerParent=tempContainer;
  PsiElement lastScope=tempContainer;
  while (true) {
    if (containerParent instanceof PsiFile)     break;
    if (containerParent instanceof PsiMethod)     break;
    if (!skipForStatement && containerParent instanceof PsiForStatement)     break;
    containerParent=containerParent.getParent();
    if (containerParent instanceof PsiCodeBlock) {
      lastScope=containerParent;
    }
  }
  return new ExpressionOccurrenceManager(expr,lastScope,NotInSuperCallOccurrenceFilter.INSTANCE);
}
