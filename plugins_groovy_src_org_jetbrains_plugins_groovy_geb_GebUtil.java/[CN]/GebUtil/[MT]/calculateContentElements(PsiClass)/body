{
  PsiField contentField=pageClass.findFieldByName("content",false);
  if (!(contentField instanceof GrField))   return Collections.emptyMap();
  GrExpression initializer=((GrField)contentField).getInitializerGroovy();
  if (!(initializer instanceof GrClosableBlock))   return Collections.emptyMap();
  Map<String,PsiField> res=new HashMap<String,PsiField>();
  PsiType objectType=PsiType.getJavaLangObject(pageClass.getManager(),pageClass.getResolveScope());
  for (PsiElement e=initializer.getFirstChild(); e != null; e=e.getNextSibling()) {
    if (e instanceof GrMethodCall) {
      GrMethodCall methodCall=(GrMethodCall)e;
      GrExpression invokedExpression=methodCall.getInvokedExpression();
      if (!(invokedExpression instanceof GrReferenceExpression))       continue;
      if (((GrReferenceExpression)invokedExpression).isQualified())       continue;
      GrExpression[] arguments=PsiUtil.getAllArguments((GrCall)e);
      if (arguments.length == 0)       continue;
      if (!((arguments.length == 1 && arguments[0] instanceof GrClosableBlock) || (arguments.length == 2 && arguments[0] == null && arguments[1] instanceof GrClosableBlock))) {
        continue;
      }
      final GrClosableBlock block=(GrClosableBlock)arguments[0];
      GrLightField field=new GrLightField(pageClass,((GrReferenceExpression)invokedExpression).getReferenceName(),objectType,invokedExpression){
        @Override public PsiType getTypeGroovy(){
          return block.getReturnType();
        }
        @Override public PsiType getDeclaredType(){
          return null;
        }
      }
;
      field.getModifierList().addModifier(Modifier.STATIC);
      res.put(field.getName(),field);
    }
  }
  return res;
}
