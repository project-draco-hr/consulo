{
  DebuggerContextImpl debuggerContext=DebuggerAction.getDebuggerContext(e.getDataContext());
  if (debuggerContext == null) {
    return;
  }
  DebugProcessImpl debugProcess=debuggerContext.getDebugProcess();
  if (debugProcess == null) {
    return;
  }
  final Project project=debuggerContext.getProject();
  final DebuggerTreeNodeImpl selectedNode=getSelectedNode(e.getDataContext());
  if (selectedNode == null) {
    return;
  }
  NodeDescriptorImpl descriptor=selectedNode.getDescriptor();
  if (!(descriptor instanceof ValueDescriptorImpl)) {
    return;
  }
  final ArrayRenderer renderer=getArrayRenderer((ValueDescriptorImpl)descriptor);
  if (renderer == null) {
    return;
  }
  String title=createNodeTitle("",selectedNode);
  String label=selectedNode.toString();
  int index=label.indexOf('=');
  if (index > 0) {
    title=title + " " + label.substring(index);
  }
  final ArrayRenderer clonedRenderer=renderer.clone();
  final NamedArrayConfigurable configurable=new NamedArrayConfigurable(title,clonedRenderer);
  SingleConfigurableEditor editor=new SingleConfigurableEditor(project,configurable,ShowSettingsUtilImpl.createDimensionKey(configurable),false);
  editor.show();
  if (editor.getExitCode() == DialogWrapper.OK_EXIT_CODE) {
    debugProcess.getManagerThread().schedule(new SuspendContextCommandImpl(debuggerContext.getSuspendContext()){
      public void contextAction() throws Exception {
        final ValueDescriptorImpl nodeDescriptor=(ValueDescriptorImpl)selectedNode.getDescriptor();
        final Renderer lastRenderer=nodeDescriptor.getLastRenderer();
        if (lastRenderer instanceof ArrayRenderer) {
          selectedNode.setRenderer(clonedRenderer);
        }
 else         if (lastRenderer instanceof CompoundNodeRenderer) {
          final CompoundNodeRenderer compoundRenderer=(CompoundNodeRenderer)lastRenderer;
          final ChildrenRenderer childrenRenderer=compoundRenderer.getChildrenRenderer();
          if (childrenRenderer instanceof ExpressionChildrenRenderer) {
            ExpressionChildrenRenderer.setPreferableChildrenRenderer(nodeDescriptor,clonedRenderer);
            selectedNode.calcRepresentation();
          }
        }
      }
    }
);
  }
}
