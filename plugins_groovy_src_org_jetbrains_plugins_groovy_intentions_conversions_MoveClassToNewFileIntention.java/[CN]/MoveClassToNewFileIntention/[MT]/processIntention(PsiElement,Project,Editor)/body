{
  final GrTypeDefinition psiClass=(GrTypeDefinition)element.getParent();
  final String name=psiClass.getName();
  final PsiFile file=psiClass.getContainingFile();
  final String fileExtension=FileUtil.getExtension(file.getName());
  final String newFileName=name + "." + fileExtension;
  final PsiDirectory dir=file.getParent();
  if (dir != null) {
    if (dir.findFile(newFileName) != null) {
      if (!ApplicationManager.getApplication().isUnitTestMode()) {
        final String message=GroovyIntentionsBundle.message("file.exists",newFileName,dir.getName());
        CommonRefactoringUtil.showErrorHint(project,editor,message,getFamilyName(),null);
      }
      return;
    }
  }
  final GroovyFile newFile=(GroovyFile)GroovyTemplatesFactory.createFromTemplate(dir,name,newFileName,"GroovyClass.groovy");
  final GrTypeDefinition template=newFile.getTypeDefinitions()[0];
  final PsiElement newClass=template.replace(psiClass);
  final GrDocComment docComment=psiClass.getDocComment();
  if (newClass instanceof GrTypeDefinition && docComment != null) {
    final GrDocComment newDoc=((GrTypeDefinition)newClass).getDocComment();
    if (newDoc != null) {
      newDoc.replace(docComment);
    }
 else {
      final PsiElement parent=newClass.getParent();
      parent.addBefore(docComment,psiClass);
      parent.getNode().addLeaf(GroovyTokenTypes.mNLS,"\n",psiClass.getNode());
    }
    docComment.delete();
  }
  psiClass.delete();
  CreateClassActionBase.putCursor(project,newClass.getContainingFile(),newClass.getNavigationElement());
}
