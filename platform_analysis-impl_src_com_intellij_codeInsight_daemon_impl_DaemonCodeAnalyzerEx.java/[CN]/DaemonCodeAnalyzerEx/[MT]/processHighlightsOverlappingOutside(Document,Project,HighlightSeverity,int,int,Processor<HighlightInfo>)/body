{
  LOG.assertTrue(ApplicationManager.getApplication().isReadAccessAllowed());
  final SeverityRegistrar severityRegistrar=SeverityRegistrar.getSeverityRegistrar(project);
  MarkupModelEx model=(MarkupModelEx)DocumentMarkupModel.forDocument(document,project,true);
  return model.processRangeHighlightersOutside(startOffset,endOffset,new Processor<RangeHighlighterEx>(){
    @Override public boolean process(    @NotNull RangeHighlighterEx marker){
      Object tt=marker.getErrorStripeTooltip();
      if (!(tt instanceof HighlightInfo))       return true;
      HighlightInfo info=(HighlightInfo)tt;
      return minSeverity != null && severityRegistrar.compare(info.getSeverity(),minSeverity) < 0 || info.highlighter == null || processor.process(info);
    }
  }
);
}
