{
  super(new GridBagLayout());
  myProject=project;
  myCbEnableProcessing=new JCheckBox("Enable annotation processing");
  myRbClasspath=new JRadioButton("Obtain processors from project classpath");
  myRbProcessorsPath=new JRadioButton("Processor path:");
  ButtonGroup group=new ButtonGroup();
  group.add(myRbClasspath);
  group.add(myRbProcessorsPath);
  myProcessorPathField=new TextFieldWithBrowseButton(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final FileChooserDescriptor descriptor=FileChooserDescriptorFactory.createAllButJarContentsDescriptor();
      final VirtualFile[] files=FileChooser.chooseFiles(descriptor,myProcessorPathField,myProject,null);
      if (files.length > 0) {
        final StringBuilder builder=new StringBuilder();
        for (        VirtualFile file : files) {
          if (builder.length() > 0) {
            builder.append(File.pathSeparator);
          }
          builder.append(FileUtil.toSystemDependentName(file.getPath()));
        }
        myProcessorPathField.setText(builder.toString());
      }
    }
  }
);
  final JPanel processorTablePanel=new JPanel(new BorderLayout());
  myProcessorsModel=new ProcessorTableModel();
  processorTablePanel.setBorder(IdeBorderFactory.createTitledBorder("Annotation Processors",false));
  myProcessorTable=new JBTable(myProcessorsModel);
  myProcessorTable.getEmptyText().setText("Compiler will run all automatically discovered processors");
  myProcessorPanel=createTablePanel(myProcessorTable);
  processorTablePanel.add(myProcessorPanel,BorderLayout.CENTER);
  final JPanel optionsTablePanel=new JPanel(new BorderLayout());
  myOptionsModel=new OptionsTableModel();
  optionsTablePanel.setBorder(IdeBorderFactory.createTitledBorder("Annotation Processor options",false));
  myOptionsTable=new JBTable(myOptionsModel);
  myOptionsTable.getEmptyText().setText("No processor-specific options configured");
  myOptionsPanel=createTablePanel(myOptionsTable);
  optionsTablePanel.add(myOptionsPanel,BorderLayout.CENTER);
  myGeneratedSourcesDirNameField=new JTextField();
  final JLabel warning=new JLabel("<html>WARNING!<br>" + "If option 'Clear output directory on rebuild' is enabled, " + "the entire contents of directories where generated sources are stored WILL BE CLEARED on rebuild.</html>");
  warning.setFont(warning.getFont().deriveFont(Font.BOLD));
  add(myCbEnableProcessing,new GridBagConstraints(0,0,2,1,1.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0));
  add(myRbClasspath,new GridBagConstraints(0,1,2,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(10,0,0,0),0,0));
  add(myRbProcessorsPath,new GridBagConstraints(0,2,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,0,0,0),0,0));
  add(myProcessorPathField,new GridBagConstraints(1,2,1,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,5,0,0),0,0));
  final JLabel noteMessage=new JLabel("<html>Source files generated by annotation processors will be stored under the project output directory. " + "To override this behaviour for this profile you may specify the directory name in the field below. " + "If specified, the directory will be created under corresponding module's content root.</html>");
  add(noteMessage,new GridBagConstraints(0,3,2,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(10,5,0,0),0,0));
  add(new JLabel("Directory name:"),new GridBagConstraints(0,4,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(10,5,0,0),0,0));
  add(myGeneratedSourcesDirNameField,new GridBagConstraints(1,4,1,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(10,5,0,0),0,0));
  add(processorTablePanel,new GridBagConstraints(0,5,2,1,1.0,1.0,GridBagConstraints.NORTHWEST,GridBagConstraints.BOTH,new Insets(10,0,0,0),0,0));
  add(optionsTablePanel,new GridBagConstraints(0,6,2,1,1.0,1.0,GridBagConstraints.NORTHWEST,GridBagConstraints.BOTH,new Insets(10,0,0,0),0,0));
  add(warning,new GridBagConstraints(0,7,2,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(10,5,0,0),0,0));
  myRbClasspath.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      updateEnabledState();
    }
  }
);
  myProcessorTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      if (!e.getValueIsAdjusting()) {
        updateEnabledState();
      }
    }
  }
);
  myCbEnableProcessing.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      updateEnabledState();
    }
  }
);
  updateEnabledState();
}
