{
  myFixture.configureByFile(getTestName(false) + ".groovy");
  final GrIntroduceConstantHandler handler=new GrIntroduceConstantHandler();
  final Editor editor=myFixture.getEditor();
  final GrExpression expression=findExpression();
  final GrVariable variable=findVariable();
  final GrIntroduceContext context=handler.getContext(getProject(),editor,expression,variable);
  PsiClass targetClass;
  if (targetClassName == null) {
    targetClass=GrIntroduceConstantHandler.findContainingClass(context);
  }
 else {
    targetClass=myFixture.findClass(targetClassName);
  }
  assertNotNull("target class is null",targetClass);
  final GrIntroduceConstantSettings settings=new MockIntroduceConstantSettings(targetClass,replaceAllOccurences,useExplicitType ? (expression != null ? expression.getType() : variable.getType()) : null,modifier);
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    @Override public void run(){
      handler.runRefactoring(context,settings);
      PostprocessReformattingAspect.getInstance(getProject()).doPostponedFormatting();
    }
  }
);
  myFixture.checkResultByFile(getTestName(false) + "_after.groovy",true);
}
