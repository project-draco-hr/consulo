{
  myResultHandler.startDocument();
  TreeMap<String,Integer> counts=new TreeMap<String,Integer>(new Comparator<String>(){
    @Override public int compare(    String o1,    String o2){
      if (TOTAL_STATUS.equals(o1) && !TOTAL_STATUS.equals(o2))       return -1;
      if (TOTAL_STATUS.equals(o2) && !TOTAL_STATUS.equals(o1))       return 1;
      return o1.compareTo(o2);
    }
  }
);
  for (  AbstractTestProxy node : myTestRoot.getAllTests()) {
    if (!node.isLeaf())     continue;
    String status=getStatusString(node);
    increment(counts,status);
    increment(counts,TOTAL_STATUS);
  }
  Map<String,String> runAttrs=new HashMap<String,String>();
  runAttrs.put(ATTR_NAME,myRuntimeConfiguration.getName());
  String footerText=ExecutionBundle.message("export.test.results.footer",ApplicationNamesInfo.getInstance().getFullProductName(),DateFormatUtil.formatDateTime(new Date()));
  runAttrs.put(ATTR_FOORTER_TEXT,footerText);
  Integer duration=myTestRoot.getDuration();
  if (duration != null) {
    runAttrs.put(ATTR_DURATION,String.valueOf(duration));
  }
  startElement(ELEM_RUN,runAttrs);
  for (  Map.Entry<String,Integer> entry : counts.entrySet()) {
    Map<String,String> a=new HashMap<String,String>();
    a.put(ATTR_NAME,entry.getKey());
    a.put(ATTR_VALUE,String.valueOf(entry.getValue()));
    startElement(ELEM_COUNT,a);
    endElement(ELEM_COUNT);
  }
  CompositeFilter f=new CompositeFilter(myRuntimeConfiguration.getProject());
  for (  ConsoleFilterProvider eachProvider : Extensions.getExtensions(ConsoleFilterProvider.FILTER_PROVIDERS)) {
    Filter[] filters=eachProvider.getDefaultFilters(myRuntimeConfiguration.getProject());
    for (    Filter filter : filters) {
      f.addFilter(filter);
    }
  }
  if (myTestRoot.shouldSkipRootNodeForExport()) {
    for (    AbstractTestProxy node : myTestRoot.getChildren()) {
      processNode(node,f);
    }
  }
 else {
    processNode(myTestRoot,f);
  }
  endElement(ELEM_RUN);
  myResultHandler.endDocument();
}
