{
  int succeeded=0;
  int failed=0;
  int interrupted=0;
  for (  AbstractTestProxy test : suite.getChildren()) {
    if (test.isPassed()) {
      succeeded++;
    }
 else     if (test.isDefect()) {
      failed++;
    }
 else     if (test.isInterrupted()) {
      interrupted++;
    }
 else {
      LOG.error("Unexpected test status: " + test);
    }
  }
  StringBuilder suiteName=new StringBuilder();
  for (AbstractTestProxy node=suite; node != null; node=node.getParent()) {
    if (suiteName.length() > 0) {
      suiteName.insert(0," - ");
    }
    suiteName.insert(0,node.getName());
  }
  LinkedHashMap<String,String> suiteAttrs=new LinkedHashMap<String,String>();
  suiteAttrs.put(ATTR_NAME,suiteName.toString());
  suiteAttrs.put(ATTR_TESTS,String.valueOf(succeeded + failed + interrupted));
  suiteAttrs.put(ATTR_FAILURES,String.valueOf(failed));
  startElement(TESTSUITE,suiteAttrs);
  for (  AbstractTestProxy test : suite.getChildren()) {
    LinkedHashMap<String,String> testAttrs=new LinkedHashMap<String,String>();
    testAttrs.put(ATTR_NAME,test.getName());
    startElement(TESTCASE,testAttrs);
    if (test.isDefect()) {
      startElement(FAILURE,new LinkedHashMap<String,String>());
      final StringBuilder output=new StringBuilder();
      test.printOn(new Printer(){
        @Override public void print(        String text,        ConsoleViewContentType contentType){
          output.append(text);
        }
        @Override public void onNewAvailable(        @NotNull Printable printable){
        }
        @Override public void printHyperlink(        String text,        HyperlinkInfo info){
        }
        @Override public void mark(){
        }
      }
);
      writeText(output.toString());
      endElement(FAILURE);
    }
    endElement(TESTCASE);
  }
  endElement(TESTSUITE);
}
