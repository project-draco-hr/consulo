{
  Map<String,String> attrs=new HashMap<String,String>();
  attrs.put(ATTR_NAME,node.getName());
  attrs.put(ATTR_STATUS,getStatusString(node));
  Integer duration=node.getDuration();
  if (duration != null) {
    attrs.put(ATTR_DURATION,String.valueOf(duration));
  }
  String elemName=node.isLeaf() ? ELEM_TEST : ELEM_SUITE;
  startElement(elemName,attrs);
  if (node.isLeaf()) {
    final StringBuilder buffer=new StringBuilder();
    final Ref<ConsoleViewContentType> lastType=new Ref<ConsoleViewContentType>();
    final Ref<SAXException> error=new Ref<SAXException>();
    node.printOn(new Printer(){
      @Override public void print(      String text,      ConsoleViewContentType contentType){
        if (contentType != lastType.get()) {
          if (buffer.length() > 0) {
            try {
              Map<String,String> a=new HashMap<String,String>();
              a.put(ATTR_OUTPUT_TYPE,getTypeString(lastType.get()));
              startElement(ELEM_OUTPUT,a);
              writeText(buffer.toString());
              buffer.delete(0,buffer.length());
              endElement(ELEM_OUTPUT);
            }
 catch (            SAXException e) {
              error.set(e);
            }
          }
          lastType.set(contentType);
        }
        buffer.append(text);
      }
      @Override public void onNewAvailable(      @NotNull Printable printable){
      }
      @Override public void printHyperlink(      String text,      HyperlinkInfo info){
      }
      @Override public void mark(){
      }
    }
);
    if (!error.isNull()) {
      throw error.get();
    }
    if (buffer.length() > 0) {
      Map<String,String> a=new HashMap<String,String>();
      a.put(ATTR_OUTPUT_TYPE,lastType.toString());
      startElement(ELEM_OUTPUT,a);
      writeText(buffer.toString());
      endElement(ELEM_OUTPUT);
    }
  }
 else {
    for (    AbstractTestProxy child : node.getChildren()) {
      processNode(child);
    }
  }
  endElement(elemName);
}
