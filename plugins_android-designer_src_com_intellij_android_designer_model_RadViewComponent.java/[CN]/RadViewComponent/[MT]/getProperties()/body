{
  if (myProperties == null && myTag != null) {
    myProperties=new ArrayList<Property>();
    Property layout=new Property(null,"layout"){
      private final BooleanRenderer myRenderer=new BooleanRenderer();
      private final BooleanEditor myEditor=new BooleanEditor();
      private final List<Property> myProperties=new ArrayList<Property>();
      @Override public List<Property> getChildren(      @Nullable RadComponent component){
        return myProperties;
      }
      @Override public Object getValue(      RadComponent component) throws Exception {
        return component.getClientProperty(getName());
      }
      @Override public void setValue(      RadComponent component,      Object value) throws Exception {
        component.putClientProperty(getName(),value);
      }
      @Override public boolean isDefaultValue(      RadComponent component) throws Exception {
        return getValue(component) == null;
      }
      @Override public void setDefaultValue(      RadComponent component) throws Exception {
        component.putClientProperty(getName(),null);
      }
      @NotNull @Override public PropertyRenderer getRenderer(){
        return myRenderer;
      }
      @Override public PropertyEditor getEditor(){
        return myEditor;
      }
    }
;
    layout.setImportant(true);
    for (    XmlAttribute attribute : myTag.getAttributes()) {
      String name=attribute.getName();
      if (name.equals("xmlns:android")) {
        continue;
      }
      Property parent=name.equals("android:layout_width") || name.equals("android:layout_height") ? layout : null;
      Property property=new AttributeProperty(parent,new String(name).replace("android:","").replace('_',' '),name);
      property.setImportant(name.equals("android:text"));
      property.setExpert(name.equals("android:id"));
      if (name.equals("android:background")) {
        property.setDeprecated(true);
        property.setImportant(true);
      }
      if (parent == null) {
        myProperties.add(property);
      }
 else {
        layout.getChildren(null).add(property);
      }
    }
    if (!layout.getChildren(null).isEmpty()) {
      myProperties.add(0,layout);
    }
  }
  return myProperties == null ? super.getProperties() : myProperties;
}
