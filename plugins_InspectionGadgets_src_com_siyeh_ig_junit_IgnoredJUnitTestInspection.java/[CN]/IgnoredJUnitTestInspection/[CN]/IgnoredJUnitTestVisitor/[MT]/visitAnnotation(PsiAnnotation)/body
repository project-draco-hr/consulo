{
  super.visitAnnotation(annotation);
  final PsiModifierListOwner modifierListOwner=PsiTreeUtil.getParentOfType(annotation,PsiModifierListOwner.class);
  if (!(modifierListOwner instanceof PsiClass || modifierListOwner instanceof PsiMethod)) {
    return;
  }
  final PsiJavaCodeReferenceElement nameReferenceElement=annotation.getNameReferenceElement();
  if (nameReferenceElement == null) {
    return;
  }
  final PsiElement target=nameReferenceElement.resolve();
  if (!(target instanceof PsiClass)) {
    return;
  }
  final PsiClass aClass=(PsiClass)target;
  @NonNls final String qualifiedName=aClass.getQualifiedName();
  if (!"org.junit.Ignore".equals(qualifiedName)) {
    return;
  }
  registerError(annotation,modifierListOwner);
}
