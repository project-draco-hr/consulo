{
  if (checkedClass.getQualifiedName() != null && checkedClass.getNameIdentifier() != null && checkedClass.getContainingFile().getVirtualFile() != null && !isAbstract(checkedClass)) {
    if (IGNORE_NON_PUBLIC && !isPublic(checkedClass)) {
      return null;
    }
    final PsiManager psiManager=checkedClass.getManager();
    final GlobalSearchScope scope=checkedClass.getResolveScope();
    if (PsiUtil.isInnerClass(checkedClass)) {
      return null;
    }
    if (CHECK_ACTIONS) {
      final PsiClass actionClass=psiManager.findClass(AnAction.class.getName(),scope);
      if (actionClass == null) {
        return null;
      }
      if (checkedClass.isInheritor(actionClass,true)) {
        if (!isActionRegistered(checkedClass)) {
          final LocalQuickFix fix=canFix(checkedClass) ? new RegisterActionFix(checkedClass) : null;
          final ProblemDescriptor problem=manager.createProblemDescriptor(checkedClass.getNameIdentifier(),DevKitBundle.message("inspections.component.not.registered.message",DevKitBundle.message("new.menu.action.text")),fix,ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
          return new ProblemDescriptor[]{problem};
        }
 else {
          return null;
        }
      }
    }
    final ComponentType[] types=ComponentType.values();
    for (    ComponentType type : types) {
      final PsiClass compClass=psiManager.findClass(type.myClassName,scope);
      if (compClass == null) {
        return null;
      }
      if (checkedClass.isInheritor(compClass,true)) {
        if (getRegistrationTypes(checkedClass,false) == null) {
          final LocalQuickFix fix=canFix(checkedClass) ? new RegisterComponentFix(type,checkedClass) : null;
          final ProblemDescriptor problem=manager.createProblemDescriptor(checkedClass.getNameIdentifier(),DevKitBundle.message("inspections.component.not.registered.message",DevKitBundle.message(type.myPropertyKey)),fix,ProblemHighlightType.GENERIC_ERROR_OR_WARNING);
          return new ProblemDescriptor[]{problem};
        }
 else {
          return null;
        }
      }
    }
  }
  return null;
}
