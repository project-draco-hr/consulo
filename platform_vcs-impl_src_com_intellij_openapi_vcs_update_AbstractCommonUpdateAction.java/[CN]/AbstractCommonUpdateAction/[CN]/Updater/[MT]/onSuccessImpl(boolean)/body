{
  if (!myProject.isOpen() || myProject.isDisposed()) {
    ProjectManagerEx.getInstanceEx().unblockReloadingProjectOnExternalChanges();
    LocalHistory.getInstance().putSystemLabel(myProject,LOCAL_HISTORY_ACTION);
    return;
  }
  boolean continueChain=false;
  for (  SequentialUpdatesContext context : myContextInfo.values()) {
    continueChain|=(context != null) && (context.shouldFail());
  }
  final boolean continueChainFinal=continueChain;
  final boolean someSessionWasCancelled=wasCanceled || someSessionWasCanceled(myUpdateSessions);
  for (  final UpdateSession updateSession : myUpdateSessions) {
    updateSession.onRefreshFilesCompleted();
  }
  if (myLocalHistoryAction != null) {
    myLocalHistoryAction.finish();
  }
  myAfter=LocalHistory.getInstance().putSystemLabel(myProject,"After update");
  if (myActionInfo.canChangeFileStatus()) {
    final List<VirtualFile> files=new ArrayList<>();
    final RemoteRevisionsCache revisionsCache=RemoteRevisionsCache.getInstance(myProject);
    revisionsCache.invalidate(myUpdatedFiles);
    UpdateFilesHelper.iterateFileGroupFiles(myUpdatedFiles,new UpdateFilesHelper.Callback(){
      @Override public void onFile(      final String filePath,      final String groupId){
        @NonNls final String path=VfsUtilCore.pathToUrl(filePath.replace(File.separatorChar,'/'));
        final VirtualFile file=VirtualFileManager.getInstance().findFileByUrl(path);
        if (file != null) {
          files.add(file);
        }
      }
    }
);
    myDirtyScopeManager.filesDirty(files,null);
  }
  final boolean updateSuccess=!someSessionWasCancelled && myGroupedExceptions.isEmpty();
  WaitForProgressToShow.runOrInvokeLaterAboveProgress(new Runnable(){
    @Override public void run(){
      if (myProject.isDisposed()) {
        ProjectManagerEx.getInstanceEx().unblockReloadingProjectOnExternalChanges();
        return;
      }
      if (!myGroupedExceptions.isEmpty()) {
        if (continueChainFinal) {
          gatherContextInterruptedMessages();
        }
        AbstractVcsHelper.getInstance(myProject).showErrors(myGroupedExceptions,VcsBundle.message("message.title.vcs.update.errors",getTemplatePresentation().getText()));
      }
 else       if (someSessionWasCancelled) {
        ProgressManager.progress(VcsBundle.message("progress.text.updating.canceled"));
      }
 else {
        ProgressManager.progress(VcsBundle.message("progress.text.updating.done"));
      }
      final boolean noMerged=myUpdatedFiles.getGroupById(FileGroup.MERGED_WITH_CONFLICT_ID).isEmpty();
      if (myUpdatedFiles.isEmpty() && myGroupedExceptions.isEmpty()) {
        if (someSessionWasCancelled) {
          VcsBalloonProblemNotifier.showOverChangesView(myProject,VcsBundle.message("progress.text.updating.canceled"),MessageType.WARNING);
        }
 else {
          VcsBalloonProblemNotifier.showOverChangesView(myProject,getAllFilesAreUpToDateMessage(myRoots),MessageType.INFO);
        }
      }
 else       if (!myUpdatedFiles.isEmpty()) {
        final UpdateInfoTree tree=showUpdateTree(continueChainFinal && updateSuccess && noMerged,someSessionWasCancelled);
        final CommittedChangesCache cache=CommittedChangesCache.getInstance(myProject);
        cache.processUpdatedFiles(myUpdatedFiles,new Consumer<List<CommittedChangeList>>(){
          @Override public void consume(          List<CommittedChangeList> incomingChangeLists){
            tree.setChangeLists(incomingChangeLists);
          }
        }
);
        if (someSessionWasCancelled) {
          VcsBalloonProblemNotifier.showOverChangesView(myProject,"VCS Update Incomplete" + prepareNotificationWithUpdateInfo(),MessageType.WARNING);
        }
 else {
          VcsBalloonProblemNotifier.showOverChangesView(myProject,"VCS Update Finished" + prepareNotificationWithUpdateInfo(),MessageType.INFO);
        }
      }
      ProjectManagerEx.getInstanceEx().unblockReloadingProjectOnExternalChanges();
      if (continueChainFinal && updateSuccess) {
        if (!noMerged) {
          showContextInterruptedError();
        }
 else {
          reset();
          ProgressManager.getInstance().run(Updater.this);
        }
      }
    }
  }
,null,myProject);
}
