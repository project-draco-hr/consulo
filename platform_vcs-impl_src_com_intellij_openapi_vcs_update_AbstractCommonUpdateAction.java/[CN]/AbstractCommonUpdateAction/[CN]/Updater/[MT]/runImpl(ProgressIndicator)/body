{
  ProjectManagerEx.getInstanceEx().blockReloadingProjectOnExternalChanges();
  myProjectLevelVcsManager.startBackgroundVcsOperation();
  myBefore=LocalHistory.putSystemLabel(myProject,"Before update");
  ProgressIndicator progressIndicator=ProgressManager.getInstance().getProgressIndicator();
  try {
    int toBeProcessed=myVcsToVirtualFiles.size();
    int processed=0;
    for (    AbstractVcs vcs : myVcsToVirtualFiles.keySet()) {
      final UpdateEnvironment updateEnvironment=myActionInfo.getEnvironment(vcs);
      updateEnvironment.fillGroups(myUpdatedFiles);
      Collection<FilePath> files=myVcsToVirtualFiles.get(vcs);
      final SequentialUpdatesContext context=myContextInfo.get(vcs);
      final Ref<SequentialUpdatesContext> refContext=new Ref<SequentialUpdatesContext>(context);
      UpdateSession updateSession=updateEnvironment.updateDirectories(files.toArray(new FilePath[files.size()]),myUpdatedFiles,progressIndicator,refContext);
      myContextInfo.put(vcs,refContext.get());
      processed++;
      if (progressIndicator != null) {
        progressIndicator.setFraction((double)processed / (double)toBeProcessed);
        progressIndicator.setText2("");
      }
      final List<VcsException> exceptionList=updateSession.getExceptions();
      gatherExceptions(vcs,exceptionList);
      myUpdateSessions.add(updateSession);
    }
  }
  finally {
    try {
      if (progressIndicator != null) {
        progressIndicator.setText(VcsBundle.message("progress.text.synchronizing.files"));
        progressIndicator.setText2("");
      }
      doVfsRefresh();
    }
  finally {
      myAfter=LocalHistory.putSystemLabel(myProject,"After update");
      myProjectLevelVcsManager.stopBackgroundVcsOperation();
    }
  }
}
