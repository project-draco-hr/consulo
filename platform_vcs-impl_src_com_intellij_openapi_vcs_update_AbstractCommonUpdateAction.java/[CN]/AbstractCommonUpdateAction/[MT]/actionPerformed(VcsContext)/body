{
  final Project project=context.getProject();
  boolean showUpdateOptions=myActionInfo.showOptions(project);
  if (project != null) {
    try {
      final FilePath[] filePaths=myScopeInfo.getRoots(context,myActionInfo);
      final FilePath[] roots=DescindingFilesFilter.filterDescindingFiles(filterRoots(filePaths,context),project,new Convertor<Pair<FilePath,AbstractVcs>,Boolean>(){
        public Boolean convert(        Pair<FilePath,AbstractVcs> pair){
          final AbstractVcs vcs=pair.getSecond();
          final FilePath fp=pair.getFirst();
          return vcs.isVersionedDirectory(fp.getVirtualFile());
        }
      }
);
      if (roots.length == 0) {
        return;
      }
      final Map<AbstractVcs,Collection<FilePath>> vcsToVirtualFiles=createVcsToFilesMap(roots,project);
      if (showUpdateOptions || OptionsDialog.shiftIsPressed(context.getModifiers())) {
        showOptionsDialog(vcsToVirtualFiles,project,context);
      }
      for (      AbstractVcs vcs : vcsToVirtualFiles.keySet()) {
        final UpdateEnvironment updateEnvironment=myActionInfo.getEnvironment(vcs);
        if ((updateEnvironment != null) && (!updateEnvironment.validateOptions(vcsToVirtualFiles.get(vcs)))) {
          return;
        }
      }
      if (ApplicationManager.getApplication().isDispatchThread()) {
        ApplicationManager.getApplication().saveAll();
      }
      Task.Backgroundable task=new Updater(project,roots,vcsToVirtualFiles);
      ProgressManager.getInstance().run(task);
    }
 catch (    ProcessCanceledException e1) {
    }
  }
}
