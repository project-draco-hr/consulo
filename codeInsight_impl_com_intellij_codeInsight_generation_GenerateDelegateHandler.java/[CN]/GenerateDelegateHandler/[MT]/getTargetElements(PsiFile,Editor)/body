{
  int offset=editor.getCaretModel().getOffset();
  PsiElement element=file.findElementAt(offset);
  if (element == null)   return null;
  PsiClass aClass=PsiTreeUtil.getParentOfType(element,PsiClass.class);
  if (aClass == null)   return null;
  List<PsiMember> result=new ArrayList<PsiMember>();
  final PsiField[] fields=aClass.getAllFields();
  PsiResolveHelper helper=aClass.getManager().getResolveHelper();
  for (  PsiField field : fields) {
    final PsiType type=field.getType();
    if (helper.isAccessible(field,aClass,aClass) && type instanceof PsiClassType) {
      result.add(field);
    }
  }
  final PsiMethod[] methods=aClass.getAllMethods();
  for (  PsiMethod method : methods) {
    if ("java.lang.Object".equals(method.getContainingClass().getQualifiedName()))     continue;
    final PsiType returnType=method.getReturnType();
    if (returnType != null && PropertyUtil.isSimplePropertyGetter(method) && helper.isAccessible(method,aClass,aClass) && returnType instanceof PsiClassType) {
      result.add(method);
    }
  }
  return result.toArray(new PsiMember[result.size()]);
}
