{
  if (!file.isWritable()) {
    if (!FileDocumentManager.fileForDocumentCheckedOutSuccessfully(editor.getDocument(),project)) {
      return;
    }
  }
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  final PsiElement target=chooseTarget(file,editor,project);
  if (target == null)   return;
  final CandidateInfo[] candidates=chooseMethods(target,file,editor,project);
  if (candidates == null || candidates.length == 0)   return;
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      try {
        int offset=editor.getCaretModel().getOffset();
        PsiMethod[] prototypes=new PsiMethod[candidates.length];
        for (int i=0; i < candidates.length; i++) {
          prototypes[i]=generateDelegatePrototype(candidates[i],target);
        }
        Object[] results=GenerateMembersUtil.insertMembersAtOffset(file,offset,prototypes);
        PsiMethod firstMethod=(PsiMethod)results[0];
        final PsiCodeBlock block=firstMethod.getBody();
        final PsiElement first=block.getFirstBodyElement();
        LOG.assertTrue(first != null);
        editor.getCaretModel().moveToOffset(first.getTextRange().getStartOffset());
        editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
        editor.getSelectionModel().removeSelection();
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
    }
  }
);
}
