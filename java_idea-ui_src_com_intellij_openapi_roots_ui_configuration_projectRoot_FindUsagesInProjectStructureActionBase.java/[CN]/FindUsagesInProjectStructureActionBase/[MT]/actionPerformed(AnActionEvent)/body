{
  final ProjectStructureElement selected=getSelectedElement();
  if (selected == null)   return;
  final Collection<ProjectStructureElementUsage> usages=getContext().getDaemonAnalyzer().getUsages(selected);
  if (usages.isEmpty()) {
    Messages.showInfoMessage(myParentComponent,FindBundle.message("find.usage.view.no.usages.text"),FindBundle.message("find.pointcut.applications.not.found.title"));
    return;
  }
  RelativePoint point=getPointToShowResults();
  final ProjectStructureElementUsage[] usagesArray=usages.toArray(new ProjectStructureElementUsage[usages.size()]);
  Arrays.sort(usagesArray,new Comparator<ProjectStructureElementUsage>(){
    public int compare(    ProjectStructureElementUsage o1,    ProjectStructureElementUsage o2){
      return o1.getPresentableName().compareToIgnoreCase(o2.getPresentableName());
    }
  }
);
  JBPopupFactory.getInstance().createListPopup(new BaseListPopupStep<ProjectStructureElementUsage>(ProjectBundle.message("dependencies.used.in.popup.title"),usagesArray){
    @Override public PopupStep onChosen(    final ProjectStructureElementUsage selected,    final boolean finalChoice){
      selected.getPlace().navigate();
      return FINAL_CHOICE;
    }
    @NotNull @Override public String getTextFor(    ProjectStructureElementUsage value){
      return value.getPresentableName();
    }
    @Override public Icon getIconFor(    ProjectStructureElementUsage selection){
      return selection.getIcon();
    }
  }
).show(point);
}
