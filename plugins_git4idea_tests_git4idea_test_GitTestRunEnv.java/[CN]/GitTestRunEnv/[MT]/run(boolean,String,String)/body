{
  String[] arguments=ArrayUtil.mergeArrays(new String[]{ourGitExecutable,command},params);
  if (!silent) {
    log("# git " + command + " "+ StringUtil.join(params," "));
  }
  final ProcessBuilder builder=new ProcessBuilder().command(arguments);
  builder.directory(myRootDir);
  builder.redirectErrorStream(true);
  Process clientProcess=builder.start();
  CapturingProcessHandler handler=new CapturingProcessHandler(clientProcess,CharsetToolkit.getDefaultSystemCharset());
  ProcessOutput result=handler.runProcess(30 * 1000);
  if (result.isTimeout()) {
    throw new RuntimeException("Timeout waiting for Git execution");
  }
  if (result.getExitCode() != 0) {
    log("{" + result.getExitCode() + "}");
  }
  String stdout=result.getStdout();
  final String out=stdout.trim();
  if (out.length() > 0) {
    log(out);
  }
  if (stdout.contains("fatal")) {
    if (stdout.contains("Unable to create") && stdout.contains(".git/index.lock") && myRetryCount <= MAX_RETRIES) {
      myRetryCount++;
      return run(silent,command,params);
    }
    myRetryCount=0;
    throw new RuntimeException("fatal error during execution of Git command: " + StringUtil.join(arguments," "));
  }
  myRetryCount=0;
  return stdout;
}
