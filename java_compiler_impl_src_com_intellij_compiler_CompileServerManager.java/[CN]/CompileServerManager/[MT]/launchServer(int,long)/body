{
  final JavaCompiler systemCompiler=ToolProvider.getSystemJavaCompiler();
  if (systemCompiler == null) {
    throw new ExecutionException("No system java compiler is provided by the JRE. Make sure tools.jar is present in IntelliJ IDEA classpath.");
  }
  final Sdk projectJdk=JavaAwareProjectJdkTableImpl.getInstanceEx().getInternalJdk();
  final GeneralCommandLine cmdLine=new GeneralCommandLine();
  final String vmExecutablePath=((JavaSdkType)projectJdk.getSdkType()).getVMExecutablePath(projectJdk);
  cmdLine.setExePath(vmExecutablePath);
  cmdLine.addParameter("-server");
  cmdLine.addParameter("-XX:MaxPermSize=150m");
  cmdLine.addParameter("-XX:ReservedCodeCacheSize=64m");
  cmdLine.addParameter("-Xmx" + Registry.intValue("compiler.process.heap.size") + "m");
  if (SystemInfo.isMac && Registry.is("compiler.process.32bit.vm.on.mac")) {
    cmdLine.addParameter("-d32");
  }
  cmdLine.addParameter("-Djava.awt.headless=true");
  final String shouldGenerateIndex=System.getProperty(GlobalOptions.GENERATE_CLASSPATH_INDEX_OPTION);
  if (shouldGenerateIndex != null) {
    cmdLine.addParameter("-D" + GlobalOptions.GENERATE_CLASSPATH_INDEX_OPTION + "="+ shouldGenerateIndex);
  }
  if (pingInterval > 0L) {
    cmdLine.addParameter("-D" + GlobalOptions.PING_INTERVAL_MS_OPTION + "="+ pingInterval);
  }
  final String maxBuilds=Registry.stringValue("compiler.server.max.simultaneous.builds");
  if (!StringUtil.isEmpty(maxBuilds)) {
    cmdLine.addParameter("-D" + GlobalOptions.MAX_SIMULTANEOUS_BUILDS_OPTION + "="+ maxBuilds);
  }
  final String additionalOptions=Registry.stringValue("compiler.process.vm.options");
  if (!StringUtil.isEmpty(additionalOptions)) {
    final StringTokenizer tokenizer=new StringTokenizer(additionalOptions," ",false);
    while (tokenizer.hasMoreTokens()) {
      cmdLine.addParameter(tokenizer.nextToken());
    }
  }
  final int debugPort=Registry.intValue("compiler.process.debug.port");
  if (debugPort > 0) {
    cmdLine.addParameter("-XX:+HeapDumpOnOutOfMemoryError");
    cmdLine.addParameter("-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=" + debugPort);
  }
  if (Registry.is("compiler.process.use.memory.temp.cache")) {
    cmdLine.addParameter("-D" + GlobalOptions.USE_MEMORY_TEMP_CACHE_OPTION);
  }
  if (Registry.is("compiler.process.use.external.javac")) {
    cmdLine.addParameter("-D" + GlobalOptions.USE_EXTERNAL_JAVAC_OPTION);
  }
  cmdLine.addParameter("-D" + GlobalOptions.HOSTNAME_OPTION + "="+ NetUtils.getLocalHostString());
  final String lang=System.getProperty("user.language");
  if (lang != null) {
    cmdLine.addParameter("-Duser.language=" + lang);
  }
  final String country=System.getProperty("user.country");
  if (country != null) {
    cmdLine.addParameter("-Duser.country=" + country);
  }
  final String region=System.getProperty("user.region");
  if (region != null) {
    cmdLine.addParameter("-Duser.region=" + region);
  }
  cmdLine.addParameter("-classpath");
  final List<File> cp=ClasspathBootstrap.getCompileServerApplicationClasspath();
  cp.addAll(myClasspathManager.getCompileServerPluginsClasspath());
  cmdLine.addParameter(classpathToString(cp));
  cmdLine.addParameter(org.jetbrains.jps.server.Server.class.getName());
  cmdLine.addParameter(Integer.toString(port));
  final File workDirectory=getCompileServerSystemRoot();
  workDirectory.mkdirs();
  ensureLogConfigExists(workDirectory);
  cmdLine.addParameter(FileUtil.toSystemIndependentName(workDirectory.getPath()));
  cmdLine.setWorkDirectory(workDirectory);
  return cmdLine.createProcess();
}
