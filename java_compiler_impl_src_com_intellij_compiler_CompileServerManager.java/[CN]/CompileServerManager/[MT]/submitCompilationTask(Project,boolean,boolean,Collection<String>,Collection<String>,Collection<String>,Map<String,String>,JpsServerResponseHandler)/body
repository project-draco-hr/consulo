{
  final String projectId=getProjectPath(project);
  final Ref<RequestFuture> futureRef=new Ref<RequestFuture>(null);
  final RunnableFuture future=myTaskExecutor.submit(new Runnable(){
    @Override public void run(){
      try {
        final CompileServerClient client=ensureServerRunningAndClientConnected(true);
        if (client != null) {
          final Map<String,String> userData=new LinkedHashMap<String,String>();
          userData.putAll(_userData);
          if (Registry.is("compiler.server.use.external.javac.process")) {
            userData.put(GlobalOptions.USE_EXTERNAL_JAVAC_OPTION,"true");
          }
          final RequestFuture requestFuture=isRebuild ? client.sendRebuildRequest(projectId,handler) : client.sendCompileRequest(isMake,projectId,modules,artifacts,paths,userData,handler);
          futureRef.set(requestFuture);
        }
 else {
          handler.sessionTerminated();
        }
      }
 catch (      Throwable e) {
        try {
          handler.handleFailure(ProtoUtil.createFailure(e.getMessage(),e));
        }
  finally {
          handler.sessionTerminated();
        }
      }
    }
  }
);
  try {
    future.get();
  }
 catch (  Throwable e) {
    LOG.info(e);
  }
  return futureRef.get();
}
