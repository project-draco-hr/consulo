{
  final ServerWrapper ph=myProcessHandler;
  final CompileServerClient cl=myClient;
  final boolean processNotRunning=ph == null || ph.isDead();
  final boolean clientNotConnected=cl == null || !cl.isConnected();
  if (processNotRunning || clientNotConnected) {
    shutdownServer(cl,ph);
    myProcessHandler=null;
    myClient=null;
    if (!forceRestart) {
      return null;
    }
    final File workDirectory=new File(mySystemDirectory,COMPILE_SERVER_SYSTEM_ROOT);
    workDirectory.mkdirs();
    ensureLogConfigExists(workDirectory);
    final int port=NetUtils.findAvailableSocketPort();
    final long serverPingInterval=Registry.intValue("compiler.server.ping.interval",-1) * 1000L;
    ServerWrapper wrapper=Registry.is("compiler.server.in.process") ? launchServerThread(workDirectory,port) : launchServerProcess(port,serverPingInterval,workDirectory);
    CompileServerClient client=new CompileServerClient(serverPingInterval,myAsyncExec);
    boolean connected=false;
    try {
      connected=client.connect(NetUtils.getLocalHostString(),port);
      if (connected) {
        final RequestFuture setupFuture=sendSetupRequest(client);
        setupFuture.waitFor();
        myProcessHandler=wrapper;
        myClient=client;
      }
    }
  finally {
      if (!connected) {
        shutdownServer(cl,wrapper);
      }
    }
  }
  return myClient;
}
