{
  final Project[] openProjects=ProjectManager.getInstance().getOpenProjects();
  if (openProjects.length > 0) {
    final List<RequestFuture> futures=new ArrayList<RequestFuture>();
    for (    final Project project : openProjects) {
      if (project.isDefault()) {
        continue;
      }
      final CompilerWorkspaceConfiguration config=CompilerWorkspaceConfiguration.getInstance(project);
      if (!config.USE_COMPILE_SERVER || !config.MAKE_PROJECT_ON_SAVE) {
        continue;
      }
      final RequestFuture future=submitCompilationTask(project,false,true,Collections.<String>emptyList(),Collections.<String>emptyList(),new AutoMakeResponseHandler(project));
      if (future != null) {
        futures.add(future);
synchronized (myAutomakeFutures) {
          myAutomakeFutures.put(future,project);
        }
      }
    }
    try {
      for (      RequestFuture future : futures) {
        try {
          future.get();
        }
 catch (        InterruptedException ignored) {
        }
catch (        java.util.concurrent.ExecutionException ignored) {
        }
      }
    }
  finally {
synchronized (myAutomakeFutures) {
        myAutomakeFutures.keySet().removeAll(futures);
      }
    }
  }
}
