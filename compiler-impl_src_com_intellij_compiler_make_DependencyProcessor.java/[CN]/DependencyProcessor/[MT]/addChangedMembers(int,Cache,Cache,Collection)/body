{
  int[] oldFields=oldCache.getFieldIds(oldCache.getClassDeclarationId(qName));
  for (int idx=0; idx < oldFields.length; idx++) {
    final int oldField=oldFields[idx];
    final int newField=CacheUtils.findFieldByName(newCache,newCache.getClassDeclarationId(qName),oldCache.getFieldName(oldField));
    if (newField != Cache.UNKNOWN) {
      final FieldChangeDescription changeDescription=new FieldChangeDescription(oldCache,newCache,oldField,newField);
      if (changeDescription.isChanged()) {
        final FieldInfo fieldInfo=oldCache.createFieldInfo(oldField);
        members.add(fieldInfo);
        myChangeDescriptions.put(fieldInfo,changeDescription);
      }
    }
  }
  int[] oldMethods=oldCache.getMethodIds(oldCache.getClassDeclarationId(qName));
  final SymbolTable symbolTable=myDependencyCache.getSymbolTable();
  for (int idx=0; idx < oldMethods.length; idx++) {
    final int oldMethod=oldMethods[idx];
    final int name=oldCache.getMethodName(oldMethod);
    final int methodDescriptor=oldCache.getMethodDescriptor(oldMethod);
    final String signature=CacheUtils.getMethodSignature(symbolTable.getSymbol(name),symbolTable.getSymbol(methodDescriptor));
    final int newMethod=CacheUtils.findMethodBySignature(newCache,newCache.getClassDeclarationId(qName),signature,symbolTable);
    if (newMethod != Cache.UNKNOWN) {
      final MethodChangeDescription changeDescription=new MethodChangeDescription(oldCache,newCache,oldMethod,newMethod,symbolTable);
      if (changeDescription.isChanged()) {
        final MethodInfo methodInfo=oldCache.createMethodInfo(oldMethod);
        members.add(methodInfo);
        myChangeDescriptions.put(methodInfo,changeDescription);
      }
    }
  }
}
