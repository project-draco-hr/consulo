{
  @SuppressWarnings("SimplifiableConditionalExpression") boolean spaceAround=isLeftOrRight(LOGICAL_OPERATORS) ? mySettings.SPACE_AROUND_LOGICAL_OPERATORS : isLeftOrRight(EQUALITY_OPERATORS) ? mySettings.SPACE_AROUND_EQUALITY_OPERATORS : isLeftOrRight(RELATIONAL_OPERATORS) ? mySettings.SPACE_AROUND_RELATIONAL_OPERATORS : isLeftOrRight(BITWISE_OPERATORS) ? mySettings.SPACE_AROUND_BITWISE_OPERATORS : isLeftOrRight(ADDITIVE_OPERATORS) ? mySettings.SPACE_AROUND_ADDITIVE_OPERATORS : isLeftOrRight(MULTIPLICATIVE_OPERATORS) ? mySettings.SPACE_AROUND_MULTIPLICATIVE_OPERATORS : isLeftOrRight(SHIFT_OPERATORS) ? mySettings.SPACE_AROUND_SHIFT_OPERATORS : isLeftOrRight(kIN);
  if (TokenSets.BINARY_OP_SET.contains(myType2)) {
    createDependentLFSpacing(mySettings.BINARY_OPERATION_SIGN_ON_NEXT_LINE,spaceAround,expression.getTextRange());
  }
 else {
    createSpaceInCode(spaceAround);
  }
}
