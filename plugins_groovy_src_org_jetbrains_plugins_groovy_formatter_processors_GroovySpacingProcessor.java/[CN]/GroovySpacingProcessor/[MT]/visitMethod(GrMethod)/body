{
  if (myType2 == mLPAREN) {
    createSpaceInCode(mySettings.SPACE_BEFORE_METHOD_PARENTHESES);
  }
 else   if (myType1 == mLPAREN && myType2 == mRPAREN) {
    createSpaceInCode(mySettings.SPACE_WITHIN_EMPTY_METHOD_PARENTHESES);
  }
 else   if (myType1 == mLPAREN) {
    if (mySettings.METHOD_PARAMETERS_LPAREN_ON_NEXT_LINE) {
      createDependentLFSpacing(mySettings.SPACE_WITHIN_METHOD_PARENTHESES,method.getParameterList().getTextRange());
    }
 else {
      createSpaceInCode(mySettings.SPACE_WITHIN_METHOD_PARENTHESES);
    }
  }
 else   if (myType2 == mRPAREN) {
    if (mySettings.METHOD_PARAMETERS_RPAREN_ON_NEXT_LINE) {
      createDependentLFSpacing(mySettings.SPACE_WITHIN_METHOD_PARENTHESES,method.getParameterList().getTextRange());
    }
 else {
      createSpaceInCode(mySettings.SPACE_WITHIN_METHOD_PARENTHESES);
    }
  }
 else   if (myType1 == mRPAREN && myType2 == THROW_CLAUSE) {
    if (mySettings.THROWS_KEYWORD_WRAP == CommonCodeStyleSettings.WRAP_ALWAYS) {
      createLF();
    }
 else {
      createSpaceInCode(true);
    }
  }
 else   if (isOpenBlock(myType2)) {
    PsiElement methodName=method.getNameIdentifier();
    int dependencyStart=methodName == null ? myParent.getTextRange().getStartOffset() : methodName.getTextRange().getStartOffset();
    createSpaceBeforeLBrace(mySettings.SPACE_BEFORE_METHOD_LBRACE,mySettings.METHOD_BRACE_STYLE,new TextRange(dependencyStart,myChild1.getTextRange().getEndOffset()),mySettings.KEEP_SIMPLE_METHODS_IN_ONE_LINE);
  }
 else   if (myType1 == MODIFIERS) {
    processModifierList(myChild1);
  }
 else   if (COMMENT_SET.contains(myType1) && (myType2 == MODIFIERS || myType2 == REFERENCE_ELEMENT)) {
    myResult=Spacing.createSpacing(0,0,1,mySettings.KEEP_LINE_BREAKS,0);
  }
 else   if (myType2 == TYPE_PARAMETER_LIST) {
    manageSpaceBeforeTypeParameters();
  }
}
