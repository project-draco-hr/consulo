{
  ASTNode rBraceAtTheEnd=GeeseUtil.getClosureRBraceAtTheEnd(myChild1);
  if (myGroovySettings.USE_FLYING_GEESE_BRACES && myType2 == mRCURLY && rBraceAtTheEnd != null) {
    String text=rBraceAtTheEnd.getTreeParent().getText();
    if (text.indexOf('\n') < 0) {
      myResult=Spacing.createSpacing(1,1,1,false,1);
    }
 else {
      myResult=Spacing.createSpacing(0,0,0,true,100,0);
    }
  }
 else   if ((myType1 == mLCURLY && myType2 != PARAMETERS_LIST && myType2 != mCLOSABLE_BLOCK_OP) || myType2 == mRCURLY) {
    myResult=Spacing.createDependentLFSpacing(0,1,closure.getTextRange(),mySettings.KEEP_LINE_BREAKS,mySettings.KEEP_BLANK_LINES_IN_CODE);
  }
 else   if (myType1 == mCLOSABLE_BLOCK_OP) {
    GrStatement[] statements=closure.getStatements();
    if (statements.length > 0) {
      TextRange range=new TextRange(statements[0].getTextRange().getStartOffset(),statements[statements.length - 1].getTextRange().getEndOffset());
      myResult=Spacing.createDependentLFSpacing(1,Integer.MAX_VALUE,range,mySettings.KEEP_LINE_BREAKS,mySettings.KEEP_BLANK_LINES_IN_CODE);
    }
  }
}
