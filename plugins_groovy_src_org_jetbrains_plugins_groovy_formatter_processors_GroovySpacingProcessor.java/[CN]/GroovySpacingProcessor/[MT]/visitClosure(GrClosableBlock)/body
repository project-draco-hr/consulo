{
  ASTNode rBraceAtTheEnd=GeeseUtil.getClosureRBraceAtTheEnd(myChild1);
  if (myGroovySettings.USE_FLYING_GEESE_BRACES && myType2 == mRCURLY && rBraceAtTheEnd != null) {
    String text=rBraceAtTheEnd.getTreeParent().getText();
    if (text.indexOf('\n') < 0) {
      myResult=Spacing.createSpacing(1,1,1,false,1);
    }
 else {
      myResult=Spacing.createSpacing(0,0,0,true,100,0);
    }
  }
 else   if (myType1 == mLCURLY && myType2 == mRCURLY) {
    myResult=Spacing.createSpacing(0,0,0,mySettings.KEEP_LINE_BREAKS,mySettings.KEEP_BLANK_LINES_IN_CODE);
  }
 else   if (closure.getParameters().length == 0 && (myType1 == mLCURLY && myType2 != PARAMETERS_LIST && myType2 != mCLOSABLE_BLOCK_OP || myType2 == mRCURLY)) {
    boolean spacesWithinBraces=closure.getParent() instanceof GrStringInjection ? myGroovySettings.SPACE_WITHIN_GSTRING_INJECTION_BRACES : mySettings.SPACE_WITHIN_BRACES;
    int minSpaces=spacesWithinBraces ? 1 : 0;
    myResult=Spacing.createDependentLFSpacing(minSpaces,1,closure.getTextRange(),mySettings.KEEP_LINE_BREAKS,mySettings.KEEP_BLANK_LINES_IN_CODE);
  }
 else   if (myType1 == mCLOSABLE_BLOCK_OP) {
    myResult=GroovySpacingProcessorBasic.createDependentSpacingForClosure(mySettings,myGroovySettings,closure,true);
  }
}
