{
  if (myPopupActions == null) {
    final StructureConfigurableContext context=ProjectStructureConfigurable.getInstance(myState.getProject()).getContext();
    int actionIndex=1;
    final List<PopupAction> actions=new ArrayList<PopupAction>(Arrays.<PopupAction>asList(new ChooseAndAddAction<Library>(actionIndex++,ProjectBundle.message("classpath.add.simple.module.library.action"),Icons.JAR_ICON){
      protected TableItem createTableItem(      final Library item){
        final OrderEntry[] entries=getRootModel().getOrderEntries();
        for (        OrderEntry entry : entries) {
          if (entry instanceof LibraryOrderEntry) {
            final LibraryOrderEntry libraryOrderEntry=(LibraryOrderEntry)entry;
            if (item.equals(libraryOrderEntry.getLibrary())) {
              return new LibItem(libraryOrderEntry);
            }
          }
        }
        LOG.assertTrue(false,"Unknown library " + item);
        return null;
      }
      protected ChooserDialog<Library> createChooserDialog(){
        return new ChooseModuleLibrariesDialog(ClasspathPanel.this,getRootModel().getModuleLibraryTable(),null);
      }
    }
,new ChooseAndAddAction<Library>(actionIndex++,ProjectBundle.message("classpath.add.module.library.action"),Icons.JAR_ICON){
      protected TableItem createTableItem(      final Library item){
        final OrderEntry[] entries=getRootModel().getOrderEntries();
        for (        OrderEntry entry : entries) {
          if (entry instanceof LibraryOrderEntry) {
            final LibraryOrderEntry libraryOrderEntry=(LibraryOrderEntry)entry;
            if (item.equals(libraryOrderEntry.getLibrary())) {
              return new LibItem(libraryOrderEntry);
            }
          }
        }
        LOG.assertTrue(false,"Unknown library " + item);
        return null;
      }
      protected ChooserDialog<Library> createChooserDialog(){
        return new CreateModuleLibraryDialog(ClasspathPanel.this,getRootModel().getModuleLibraryTable());
      }
    }
,new ChooseNamedLibraryAction(actionIndex++,ProjectBundle.message("classpath.add.project.library.action"),context.getProjectLibrariesProvider(true)),new ChooseNamedLibraryAction(actionIndex++,ProjectBundle.message("classpath.add.global.library.action"),context.getGlobalLibrariesProvider(true))));
    for (    final LibraryTableModifiableModelProvider provider : context.getCustomLibrariesProviders(true)) {
      actions.add(new ChooseNamedLibraryAction(actionIndex++,provider.getLibraryTablePresentation().getDisplayName(false) + "...",provider));
    }
    actions.add(new ChooseAndAddAction<Module>(actionIndex,ProjectBundle.message("classpath.add.module.dependency.action"),StdModuleTypes.JAVA.getNodeIcon(false)){
      protected TableItem createTableItem(      final Module item){
        return new ModuleItem(getRootModel().addModuleOrderEntry(item));
      }
      protected ChooserDialog<Module> createChooserDialog(){
        final List<Module> chooseItems=getDependencyModules();
        if (chooseItems.size() == 0) {
          Messages.showMessageDialog(ClasspathPanel.this,ProjectBundle.message("message.no.module.dependency.candidates"),getTitle(),Messages.getInformationIcon());
          return null;
        }
        return new ChooseModulesToAddDialog(chooseItems,ProjectBundle.message("classpath.chooser.title.add.module.dependency"));
      }
    }
);
    myPopupActions=actions.toArray(new PopupAction[actions.size()]);
    myIcons=new Icon[myPopupActions.length];
    for (int idx=0; idx < myPopupActions.length; idx++) {
      myIcons[idx]=myPopupActions[idx].getIcon();
    }
  }
}
