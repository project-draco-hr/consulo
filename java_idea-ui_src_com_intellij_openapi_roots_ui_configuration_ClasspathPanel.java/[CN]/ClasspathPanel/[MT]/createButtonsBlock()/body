{
  final JButton addButton=new JButton(ProjectBundle.message("button.add"));
  final JButton removeButton=new JButton(ProjectBundle.message("button.remove"));
  myEditButton=new JButton(ProjectBundle.message("button.edit"));
  final JButton upButton=new JButton(ProjectBundle.message("button.move.up"));
  final JButton downButton=new JButton(ProjectBundle.message("button.move.down"));
  final JPanel panel=new JPanel(new GridBagLayout());
  panel.add(addButton,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(2,2,0,0),0,0));
  panel.add(removeButton,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(2,2,0,0),0,0));
  panel.add(myEditButton,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(2,2,0,0),0,0));
  panel.add(upButton,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(2,2,0,0),0,0));
  panel.add(downButton,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,1.0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(2,2,0,0),0,0));
  myEntryTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      if (e.getValueIsAdjusting()) {
        return;
      }
      final int[] selectedRows=myEntryTable.getSelectedRows();
      boolean removeButtonEnabled=true;
      int minRow=myEntryTable.getRowCount() + 1;
      int maxRow=-1;
      for (      final int selectedRow : selectedRows) {
        minRow=Math.min(minRow,selectedRow);
        maxRow=Math.max(maxRow,selectedRow);
        final TableItem item=myModel.getItemAt(selectedRow);
        if (!item.isRemovable()) {
          removeButtonEnabled=false;
        }
      }
      upButton.setEnabled(minRow > 0 && minRow < myEntryTable.getRowCount());
      downButton.setEnabled(maxRow >= 0 && maxRow < myEntryTable.getRowCount() - 1);
      removeButton.setEnabled(removeButtonEnabled);
      TableItem selectedItem=selectedRows.length == 1 ? myModel.getItemAt(selectedRows[0]) : null;
      myEditButton.setEnabled(selectedItem instanceof LibItem && selectedItem.isEditable());
    }
  }
);
  upButton.addActionListener(new ButtonAction(){
    protected void executeImpl(){
      moveSelectedRows(-1);
    }
  }
);
  downButton.addActionListener(new ButtonAction(){
    protected void executeImpl(){
      moveSelectedRows(+1);
    }
  }
);
  addKeyboardShortcut(myEntryTable,removeButton,KeyEvent.VK_DELETE,0);
  addKeyboardShortcut(myEntryTable,addButton,KeyEvent.VK_INSERT,0);
  addKeyboardShortcut(myEntryTable,upButton,KeyEvent.VK_UP,KeyEvent.CTRL_DOWN_MASK);
  addKeyboardShortcut(myEntryTable,downButton,KeyEvent.VK_DOWN,KeyEvent.CTRL_DOWN_MASK);
  addButton.addActionListener(new ButtonAction(){
    protected void executeImpl(){
      initPopupActions();
      final JBPopup popup=JBPopupFactory.getInstance().createListPopup(new BaseListPopupStep<PopupAction>(null,myPopupActions,myIcons){
        public boolean isMnemonicsNavigationEnabled(){
          return true;
        }
        public boolean isSelectable(        PopupAction value){
          return value.isSelectable();
        }
        public PopupStep onChosen(        final PopupAction selectedValue,        final boolean finalChoice){
          ApplicationManager.getApplication().invokeLater(new Runnable(){
            public void run(){
              selectedValue.execute();
            }
          }
,ModalityState.stateForComponent(ClasspathPanel.this));
          return FINAL_CHOICE;
        }
        @NotNull public String getTextFor(        PopupAction value){
          return "&" + value.getIndex() + "  "+ value.getTitle();
        }
      }
);
      popup.showUnderneathOf(addButton);
    }
  }
);
  removeButton.addActionListener(new ButtonAction(){
    protected void executeImpl(){
      final List removedRows=TableUtil.removeSelectedItems(myEntryTable);
      if (removedRows.size() == 0) {
        return;
      }
      for (      final Object removedRow : removedRows) {
        final TableItem item=(TableItem)((Object[])removedRow)[MyTableModel.ITEM_COLUMN];
        final OrderEntry orderEntry=item.getEntry();
        if (orderEntry == null) {
          continue;
        }
        ModuleStructureConfigurable.getInstance(myState.getProject()).getContext().clearCaches(orderEntry);
        getRootModel().removeOrderEntry(orderEntry);
      }
      final int[] selectedRows=myEntryTable.getSelectedRows();
      myModel.fireTableDataChanged();
      TableUtil.selectRows(myEntryTable,selectedRows);
      final StructureConfigurableContext context=ModuleStructureConfigurable.getInstance(myProject).getContext();
      context.getDaemonAnalyzer().queueUpdate(new ModuleProjectStructureElement(context,myRootModel.getModule()));
    }
  }
);
  myEditButton.addActionListener(new ActionListener(){
    public void actionPerformed(    final ActionEvent e){
      final int row=myEntryTable.getSelectedRow();
      final TableItem item=myModel.getItemAt(row);
      if (!(item instanceof LibItem)) {
        return;
      }
      final LibraryOrderEntry libraryOrderEntry=((LibItem)item).getEntry();
      if (libraryOrderEntry == null) {
        return;
      }
      final Library library=libraryOrderEntry.getLibrary();
      if (library == null) {
        return;
      }
      final LibraryTableModifiableModelProvider provider;
      final LibraryTable table=library.getTable();
      if (table == null) {
        final LibraryTable moduleLibraryTable=getRootModel().getModuleLibraryTable();
        provider=new LibraryTableModifiableModelProvider(){
          public LibraryTable.ModifiableModel getModifiableModel(){
            return moduleLibraryTable.getModifiableModel();
          }
          public String getTableLevel(){
            return moduleLibraryTable.getTableLevel();
          }
          public LibraryTablePresentation getLibraryTablePresentation(){
            return moduleLibraryTable.getPresentation();
          }
          public boolean isLibraryTableEditable(){
            return false;
          }
        }
;
      }
 else {
        provider=ProjectStructureConfigurable.getInstance(myState.getProject()).getContext().createModifiableModelProvider(table.getTableLevel(),false);
      }
      final LibraryTableEditor editor=LibraryTableEditor.editLibrary(provider,library);
      editor.addFileChooserContext(LangDataKeys.MODULE_CONTEXT,getRootModel().getModule());
      editor.openDialog(ClasspathPanel.this,Collections.singletonList(library),true);
      myEntryTable.repaint();
      ModuleStructureConfigurable.getInstance(myState.getProject()).getTree().repaint();
    }
  }
);
  return panel;
}
