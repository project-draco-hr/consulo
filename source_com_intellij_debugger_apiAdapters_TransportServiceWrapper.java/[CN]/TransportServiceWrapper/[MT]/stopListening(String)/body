{
  try {
    Object value=myListenAddresses.get(address);
    if (value == null) {
      value=address;
    }
    Class paramClass=value.getClass();
    for (Class superClass=paramClass.getSuperclass(); !Object.class.equals(superClass); superClass=superClass.getSuperclass()) {
      paramClass=superClass;
    }
    final Method method=myDelegateClass.getMethod("stopListening",new Class[]{paramClass});
    method.setAccessible(true);
    method.invoke(myDelegateObject,new Object[]{value});
  }
 catch (  NoSuchMethodException e) {
    LOG.error(e);
  }
catch (  IllegalAccessException e) {
    LOG.error(e);
  }
catch (  InvocationTargetException e) {
    final Throwable cause=e.getCause();
    if (cause instanceof IOException) {
      throw (IOException)cause;
    }
    LOG.error(e);
  }
}
