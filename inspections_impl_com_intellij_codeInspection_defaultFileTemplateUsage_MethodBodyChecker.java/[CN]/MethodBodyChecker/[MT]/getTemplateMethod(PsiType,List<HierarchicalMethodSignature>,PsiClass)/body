{
  Project project=aClass.getProject();
  if (!(returnType instanceof PsiPrimitiveType)) {
    returnType=PsiType.getJavaLangObject(PsiManager.getInstance(project),GlobalSearchScope.allScope(project));
  }
  try {
    final FileTemplate template=getMethodFileTemplate(superSignatures,true);
    if (template == null)     return null;
    final String fileTemplateName=template.getName();
    String methodName=superSignatures.isEmpty() ? "" : superSignatures.get(0).getName();
    String key=returnType.getCanonicalText() + "+" + methodName+ "+"+ fileTemplateName;
    final Map<String,PsiMethod> cache=getTemplatesCache(project);
    PsiMethod method=cache.get(key);
    if (method == null) {
      method=PsiManager.getInstance(project).getElementFactory().createMethod("x",returnType);
      setupMethodBody(superSignatures,method,aClass,true);
      cache.put(key,method);
    }
    return method;
  }
 catch (  IncorrectOperationException e) {
    return null;
  }
}
