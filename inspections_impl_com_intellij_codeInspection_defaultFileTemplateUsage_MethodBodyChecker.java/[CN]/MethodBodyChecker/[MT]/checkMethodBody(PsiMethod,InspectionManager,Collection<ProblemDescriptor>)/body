{
  PsiType returnType=method.getReturnType();
  if (method.isConstructor() || returnType == null)   return;
  PsiCodeBlock body=method.getBody();
  if (body == null)   return;
  PsiClass aClass=method.getContainingClass();
  if (aClass == null)   return;
  List<HierarchicalMethodSignature> superSignatures=method.getHierarchicalMethodSignature().getSuperSignatures();
  try {
    PsiMethod templateMethod=method.getManager().getElementFactory().createMethod("x",returnType);
    setupMethodBody(superSignatures,templateMethod,aClass,true);
    if (!PsiEquivalenceUtil.areElementsEquivalent(templateMethod.getBody(),body))     return;
    Pair<? extends PsiElement,? extends PsiElement> range=DefaultFileTemplateUsageInspection.getInteriorRange(body);
    final String description=InspectionsBundle.message("default.file.template.description");
    ProblemDescriptor problem=manager.createProblemDescriptor(range.first,range.second,description,ProblemHighlightType.GENERIC_ERROR_OR_WARNING,createMethodBodyQuickFix(method));
    problemDescriptors.add(problem);
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
