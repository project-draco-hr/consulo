{
  PsiType returnType=method.getReturnType();
  if (method.isConstructor() || returnType == null)   return;
  PsiCodeBlock body=method.getBody();
  if (body == null)   return;
  PsiClass aClass=method.getContainingClass();
  if (aClass == null || aClass.isInterface())   return;
  List<HierarchicalMethodSignature> superSignatures=method.getHierarchicalMethodSignature().getSuperSignatures();
  final PsiMethod superMethod=superSignatures.isEmpty() ? null : superSignatures.get(0).getMethod();
  final PsiMethod templateMethod=getTemplateMethod(returnType,superSignatures,aClass);
  if (PsiEquivalenceUtil.areElementsEquivalent(body,templateMethod.getBody(),new Comparator<PsiElement>(){
    public int compare(    final PsiElement element1,    final PsiElement element2){
      if (element1 == superMethod && (element2 == templateMethod || element2 == null))       return 0;
      return 1;
    }
  }
,true)) {
    Pair<? extends PsiElement,? extends PsiElement> range=DefaultFileTemplateUsageInspection.getInteriorRange(body);
    final String description=InspectionsBundle.message("default.file.template.description");
    ProblemDescriptor problem=manager.createProblemDescriptor(range.first,range.second,description,ProblemHighlightType.GENERIC_ERROR_OR_WARNING,createMethodBodyQuickFix(method));
    problemDescriptors.add(problem);
  }
}
