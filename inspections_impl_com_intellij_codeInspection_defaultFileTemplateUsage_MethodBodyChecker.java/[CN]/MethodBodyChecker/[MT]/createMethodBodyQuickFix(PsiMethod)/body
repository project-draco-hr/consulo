{
  PsiType returnType=method.getReturnType();
  PsiClass aClass=method.getContainingClass();
  List<HierarchicalMethodSignature> superSignatures=method.getHierarchicalMethodSignature().getSuperSignatures();
  try {
    PsiMethod templateMethod=method.getManager().getElementFactory().createMethod("x",returnType);
    FileTemplate template=setupMethodBody(superSignatures,templateMethod,aClass,false);
    if (template.isDefault())     return null;
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
  return new ReplaceWithFileTemplateFix(){
    public void applyFix(    Project project,    ProblemDescriptor descriptor){
      PsiType returnType=method.getReturnType();
      if (method.isConstructor() || returnType == null)       return;
      PsiCodeBlock body=method.getBody();
      if (body == null)       return;
      PsiClass aClass=method.getContainingClass();
      if (aClass == null)       return;
      List<HierarchicalMethodSignature> superSignatures=method.getHierarchicalMethodSignature().getSuperSignatures();
      try {
        PsiMethod templateMethod=method.getManager().getElementFactory().createMethod("x",returnType);
        setupMethodBody(superSignatures,templateMethod,aClass,false);
        PsiElement newBody=method.getBody().replace(templateMethod.getBody());
        CodeStyleManager.getInstance(project).reformat(newBody);
      }
 catch (      IncorrectOperationException e) {
        LOG.error(e);
      }
    }
  }
;
}
