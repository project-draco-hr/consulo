{
  final PsiElement resolved=resolveResult.getElement();
  if (resolved instanceof PsiMethod) {
    final PsiSubstitutor substitutor=resolveResult.getSubstitutor();
    expressionGenerator.invokeMethodOn(((PsiMethod)resolved),caller,exprs,namedArgs,closureArgs,substitutor,psiContext);
    return;
  }
  final StringBuilder builder=expressionGenerator.getBuilder();
  final ExpressionContext expressionContext=expressionGenerator.getContext();
  if (caller != null) {
    caller.accept(expressionGenerator);
    builder.append('.');
  }
  builder.append(methodName);
  final ArgumentListGenerator argumentListGenerator=new ArgumentListGenerator(builder,expressionContext);
  argumentListGenerator.generate(null,exprs,namedArgs,closureArgs,psiContext);
}
