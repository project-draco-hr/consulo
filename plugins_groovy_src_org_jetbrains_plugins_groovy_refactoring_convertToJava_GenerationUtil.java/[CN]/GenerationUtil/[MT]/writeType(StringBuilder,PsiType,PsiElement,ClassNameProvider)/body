{
  if (type instanceof PsiPrimitiveType) {
    builder.append(type.getCanonicalText());
    return;
  }
  final boolean acceptEllipsis=isLastParameter(context);
  type.accept(new PsiTypeVisitor<Object>(){
    @Override public Object visitEllipsisType(    PsiEllipsisType ellipsisType){
      final PsiType componentType=ellipsisType.getComponentType();
      componentType.accept(this);
      if (acceptEllipsis) {
        builder.append("...");
      }
 else {
        builder.append("[]");
      }
      return this;
    }
    @Override public Object visitPrimitiveType(    PsiPrimitiveType primitiveType){
      if (classNameProvider.forStubs()) {
        builder.append(primitiveType.getCanonicalText());
        return this;
      }
      final PsiType boxed=TypesUtil.boxPrimitiveType(primitiveType,context.getManager(),context.getResolveScope());
      boxed.accept(this);
      return this;
    }
    @Override public Object visitArrayType(    PsiArrayType arrayType){
      arrayType.getComponentType().accept(this);
      builder.append("[]");
      return this;
    }
    @Override public Object visitClassType(    PsiClassType classType){
      final PsiType[] parameters=classType.getParameters();
      final PsiClass psiClass=classType.resolve();
      if (psiClass == null) {
        builder.append(classType.getClassName());
      }
 else {
        final String qname=classNameProvider.getQualifiedClassName(psiClass,context);
        builder.append(qname);
      }
      writeTypeParameters(builder,parameters);
      return this;
    }
    @Override public Object visitCapturedWildcardType(    PsiCapturedWildcardType capturedWildcardType){
      capturedWildcardType.getWildcard().accept(this);
      return this;
    }
    @Override public Object visitWildcardType(    PsiWildcardType wildcardType){
      builder.append("?");
      PsiType bound=wildcardType.getBound();
      if (bound == null)       return this;
      if (wildcardType.isExtends()) {
        builder.append(" extends");
      }
 else {
        builder.append(" super ");
      }
      bound.accept(this);
      return this;
    }
    @Override public Object visitDisjunctionType(    PsiDisjunctionType disjunctionType){
      throw new UnsupportedOperationException();
    }
    @Override public Object visitType(    PsiType type){
      throw new UnsupportedOperationException();
    }
  }
);
}
