{
  final FileType fileType=position.getFile().getFileType();
  if (fileType != StdFileTypes.JSP && fileType != StdFileTypes.JSPX) {
    throw new NoDataException();
  }
  return ApplicationManager.getApplication().runReadAction(new Computable<List<Location>>(){
    public List<Location> compute(){
      try {
        final List<String> paths=type.sourcePaths(JSP_STRATUM);
        for (        String path : paths) {
          final String relativePath=getRelativePath(path);
          final PsiFile file=myHelper.getDeployedJspSource(relativePath,myDebugProcess.getProject(),myScope);
          if (file != null && file.equals(position.getFile())) {
            return getLocationsOfLine(type,getJspSourceName(file.getName(),type),relativePath,position.getLine() + 1);
          }
        }
      }
 catch (      ObjectCollectedException e) {
      }
catch (      AbsentInformationException e) {
      }
catch (      InternalError e) {
        myDebugProcess.getExecutionResult().getProcessHandler().notifyTextAvailable(DebuggerBundle.message("internal.error.locations.of.line",type.name()),ProcessOutputTypes.SYSTEM);
      }
      return null;
    }
    private String getJspSourceName(    final String name,    final ReferenceType type) throws AbsentInformationException {
      for (      String sourceNameFromType : type.sourceNames(JSP_STRATUM)) {
        if (sourceNameFromType.indexOf(name) >= 0) {
          return sourceNameFromType;
        }
      }
      return name;
    }
  }
);
}
