{
  PsiElement expression=description instanceof ProblemDescriptor ? ((ProblemDescriptor)description).getPsiElement() : null;
  StringBuffer anchor=new StringBuffer();
  VirtualFile vFile=null;
  if (expression != null) {
    vFile=expression.getContainingFile().getVirtualFile();
    if (vFile instanceof VirtualFileWindow)     vFile=((VirtualFileWindow)vFile).getDelegate();
    anchor.append("<a HREF=\"");
    try {
      if (myExporter == null) {
        anchor.append(new URL(vFile.getUrl() + "#descr:" + i));
      }
 else {
        anchor.append(myExporter.getURL(refElement));
      }
    }
 catch (    MalformedURLException e) {
      LOG.error(e);
    }
    anchor.append("\">");
    anchor.append(ProblemDescriptorUtil.extractHighlightedText(description,expression).replaceAll("\\$","\\\\\\$"));
    anchor.append("</a>");
  }
 else {
    anchor.append("<font style=\"font-weight:bold; color:#FF0000\";>");
    anchor.append(InspectionsBundle.message("inspection.export.results.invalidated.item"));
    anchor.append("</font>");
  }
  String descriptionTemplate=description.getDescriptionTemplate();
  final String reference="#ref";
  final boolean containsReference=descriptionTemplate.contains(reference);
  String res=descriptionTemplate.replaceAll(reference,anchor.toString());
  final int lineNumber=description instanceof ProblemDescriptor ? ((ProblemDescriptor)description).getLineNumber() : -1;
  StringBuffer lineAnchor=new StringBuffer();
  if (expression != null && lineNumber > 0) {
    Document doc=FileDocumentManager.getInstance().getDocument(vFile);
    lineAnchor.append(InspectionsBundle.message("inspection.export.results.at.line")).append(" ");
    if (myExporter == null) {
      lineAnchor.append("<a HREF=\"");
      try {
        int offset=doc.getLineStartOffset(lineNumber - 1);
        offset=CharArrayUtil.shiftForward(doc.getCharsSequence(),offset," \t");
        lineAnchor.append(new URL(vFile.getUrl() + "#" + offset));
      }
 catch (      MalformedURLException e) {
        LOG.error(e);
      }
      lineAnchor.append("\">");
    }
    lineAnchor.append(Integer.toString(lineNumber));
    lineAnchor.append("</a>");
    final String location="#loc";
    if (!containsReference && !res.contains(location)) {
      res+=" (" + location + ")";
    }
    res=res.replaceAll(location,lineAnchor.toString());
  }
  buf.append(res);
  buf.append(BR).append(BR);
  composeAdditionalDescription(buf,refElement);
}
