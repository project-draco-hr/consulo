{
  FontMetrics fontMetrics=((EditorImpl)myEditor).getFontMetrics(myTextAttributes != null ? myTextAttributes.getFontType() : Font.PLAIN);
  Insets insets=getInsets();
  int maxLineWidth=getWidth() - (insets != null ? insets.left + insets.right : 0);
  myDocumentTextBuilder.setLength(0);
  boolean singleLineMode=getHeight() / (float)myEditor.getLineHeight() < 1.1f;
  if (singleLineMode) {
    appendAbbreviated(myDocumentTextBuilder,myRawText,0,myRawText.length(),fontMetrics,maxLineWidth,true);
  }
 else {
    int lineHeight=myEditor.getLineHeight();
    int firstVisibleLine=clip.y / lineHeight;
    float visibleLinesCountFractional=clip.height / (float)lineHeight;
    int linesToAppend=1 + (int)visibleLinesCountFractional;
    LineTokenizer lt=new LineTokenizer(myRawText);
    for (int line=0; !lt.atEnd() && line < firstVisibleLine; lt.advance(), line++) {
      myDocumentTextBuilder.append('\n');
    }
    for (int line=0; !lt.atEnd() && line < linesToAppend; lt.advance(), line++) {
      int start=lt.getOffset();
      int end=start + lt.getLength();
      appendAbbreviated(myDocumentTextBuilder,myRawText,start,end,fontMetrics,maxLineWidth,false);
      if (lt.getLineSeparatorLength() > 0) {
        myDocumentTextBuilder.append('\n');
      }
    }
  }
  setTextToEditor(myDocumentTextBuilder.toString());
}
