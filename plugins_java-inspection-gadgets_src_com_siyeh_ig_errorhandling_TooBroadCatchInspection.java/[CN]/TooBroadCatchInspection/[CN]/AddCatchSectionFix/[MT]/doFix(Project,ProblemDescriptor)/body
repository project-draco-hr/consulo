{
  final PsiElement typeElement=descriptor.getPsiElement();
  if (typeElement == null) {
    return;
  }
  final PsiElement catchParameter=typeElement.getParent();
  if (!(catchParameter instanceof PsiParameter)) {
    return;
  }
  final PsiElement catchBlock=((PsiParameter)catchParameter).getDeclarationScope();
  if (!(catchBlock instanceof PsiCatchSection)) {
    return;
  }
  final PsiCatchSection myBeforeCatchSection=(PsiCatchSection)catchBlock;
  final PsiTryStatement myTryStatement=myBeforeCatchSection.getTryStatement();
  final JavaCodeStyleManager codeStyleManager=JavaCodeStyleManager.getInstance(project);
  final String name=codeStyleManager.suggestUniqueVariableName("e",myTryStatement.getTryBlock(),false);
  final PsiElementFactory factory=JavaPsiFacade.getInstance(project).getElementFactory();
  final PsiClass aClass=myThrown.getElement();
  if (aClass == null) {
    return;
  }
  final PsiCatchSection section=factory.createCatchSection(factory.createType(aClass),name,myTryStatement);
  final PsiCatchSection element=(PsiCatchSection)myTryStatement.addBefore(section,myBeforeCatchSection);
  codeStyleManager.shortenClassReferences(element);
  if (isOnTheFly()) {
    final TextRange range=getRangeToSelect(element.getCatchBlock());
    final PsiFile file=element.getContainingFile();
    final Editor editor=FileEditorManager.getInstance(project).getSelectedTextEditor();
    if (editor == null) {
      return;
    }
    final Document document=PsiDocumentManager.getInstance(project).getDocument(file);
    if (editor.getDocument() != document) {
      return;
    }
    editor.getCaretModel().moveToOffset(range.getStartOffset());
    editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
    editor.getSelectionModel().setSelection(range.getStartOffset(),range.getEndOffset());
  }
}
