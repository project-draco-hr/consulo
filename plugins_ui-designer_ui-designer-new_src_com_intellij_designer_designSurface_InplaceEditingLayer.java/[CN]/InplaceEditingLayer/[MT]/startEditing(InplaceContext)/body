{
  try {
    List<RadComponent> selection=myDesigner.getSurfaceArea().getSelection();
    if (selection.size() != 1) {
      return;
    }
    RadComponent radComponent=selection.get(0);
    List<Property> inplaceProperties=radComponent.getInplaceProperties();
    if (inplaceProperties.isEmpty()) {
      return;
    }
    myInplaceComponent=new JPanel(new GridLayoutManager(inplaceProperties.size(),2));
    myInplaceComponent.setBorder(new LineMarginBorder(5,5,5,5));
    new AnAction(){
      @Override public void actionPerformed(      AnActionEvent e){
        finishEditing(false);
      }
    }
.registerCustomShortcutSet(new CustomShortcutSet(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0)),myInplaceComponent);
    int row=0;
    myEditors=new ArrayList<PropertyEditor>();
    JComponent componentToFocus=null;
    Font font=null;
    if (inplaceContext == null) {
      inplaceContext=new InplaceContext();
    }
    for (    Property property : inplaceProperties) {
      JLabel label=new JLabel(property.getName() + ":");
      if (font == null) {
        font=label.getFont().deriveFont(Font.BOLD);
      }
      label.setFont(font);
      myInplaceComponent.add(label,new GridConstraints(row,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,0,0,null,null,null));
      PropertyEditor editor=property.getEditor();
      myEditors.add(editor);
      JComponent component=editor.getComponent(radComponent.getRoot(),radComponent,property.getValue(radComponent),inplaceContext);
      myInplaceComponent.add(component,new GridConstraints(row++,1,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,0,0,null,null,null));
      if (componentToFocus == null) {
        componentToFocus=editor.getPreferredFocusedComponent();
      }
    }
    for (    PropertyEditor editor : myEditors) {
      editor.addPropertyEditorListener(myEditorListener);
    }
    Rectangle bounds=radComponent.getBounds(this);
    Dimension size=myInplaceComponent.getPreferredSize();
    myPreferredWidth=size.width;
    myInplaceComponent.setBounds(bounds.x,bounds.y,size.width,size.height);
    add(myInplaceComponent);
    if (componentToFocus == null) {
      componentToFocus=IdeFocusTraversalPolicy.getPreferredFocusedComponent(myInplaceComponent);
    }
    if (componentToFocus != null) {
      componentToFocus.requestFocusInWindow();
    }
 else {
      myInplaceComponent.requestFocusInWindow();
    }
    myDesigner.getSurfaceArea().addSelectionListener(mySelectionListener);
    myFocusWatcher.install(myInplaceComponent);
    enableEvents(AWTEvent.MOUSE_EVENT_MASK);
    repaint();
  }
 catch (  Throwable e) {
    LOG.error(e);
  }
}
