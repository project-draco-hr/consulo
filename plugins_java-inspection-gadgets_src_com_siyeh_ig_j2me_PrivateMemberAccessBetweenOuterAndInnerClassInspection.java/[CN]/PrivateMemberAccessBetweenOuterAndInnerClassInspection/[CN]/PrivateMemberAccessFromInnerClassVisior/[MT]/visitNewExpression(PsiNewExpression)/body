{
  super.visitNewExpression(expression);
  final PsiClass containingClass=getContainingContextClass(expression);
  if (containingClass == null) {
    return;
  }
  final PsiMethod constructor=expression.resolveConstructor();
  if (constructor == null) {
    final PsiJavaCodeReferenceElement classReference=expression.getClassOrAnonymousClassReference();
    if (classReference == null) {
      return;
    }
    final PsiElement target=classReference.resolve();
    if (!(target instanceof PsiClass)) {
      return;
    }
    final PsiClass aClass=(PsiClass)target;
    if (!aClass.hasModifierProperty(PsiModifier.PRIVATE)) {
      return;
    }
    if (aClass.equals(containingClass)) {
      return;
    }
    registerNewExpressionError(expression,aClass);
  }
 else {
    if (!constructor.hasModifierProperty(PsiModifier.PRIVATE)) {
      return;
    }
    final PsiClass aClass=constructor.getContainingClass();
    if (containingClass.equals(aClass)) {
      return;
    }
    registerNewExpressionError(expression,aClass);
  }
}
