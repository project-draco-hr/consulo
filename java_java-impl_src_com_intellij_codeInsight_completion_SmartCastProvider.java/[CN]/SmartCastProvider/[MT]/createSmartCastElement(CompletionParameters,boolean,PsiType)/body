{
  return AutoCompletionPolicy.ALWAYS_AUTOCOMPLETE.applyPolicy(new LookupElementDecorator<LookupItem>(PsiTypeLookupItem.createLookupItem(type,parameters.getPosition())){
    @Override public void handleInsert(    InsertionContext context){
      FeatureUsageTracker.getInstance().triggerFeatureUsed("editing.completion.smarttype.casting");
      final Editor editor=context.getEditor();
      final Document document=editor.getDocument();
      if (overwrite) {
        document.deleteString(context.getSelectionEndOffset(),context.getOffsetMap().getOffset(CompletionInitializationContext.IDENTIFIER_END_OFFSET));
      }
      final CodeStyleSettings csSettings=CodeStyleSettingsManager.getSettings(context.getProject());
      final int oldTail=context.getTailOffset();
      context.setTailOffset(RParenthTailType.addRParenth(editor,oldTail,csSettings.SPACE_WITHIN_CAST_PARENTHESES));
      final LookupItem typeItem=getDelegate();
      final InsertionContext typeContext=CompletionUtil.newContext(context,typeItem,context.getStartOffset(),oldTail);
      new DefaultInsertHandler().handleInsert(typeContext,typeItem);
      final PsiTypeCastExpression castExpression=PsiTreeUtil.findElementOfClassAtOffset(context.getFile(),context.getStartOffset(),PsiTypeCastExpression.class,false);
      if (castExpression != null) {
        final PsiTypeElement typeElement=castExpression.getCastType();
        if (typeElement != null) {
          CodeStyleManager.getInstance(context.getProject()).reformat(typeElement);
        }
      }
      PostprocessReformattingAspect.getInstance(context.getProject()).doPostponedFormatting();
      if (csSettings.SPACE_AFTER_TYPE_CAST) {
        context.setTailOffset(TailType.insertChar(editor,context.getTailOffset(),' '));
      }
      editor.getCaretModel().moveToOffset(context.getTailOffset());
      editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);
    }
  }
);
}
