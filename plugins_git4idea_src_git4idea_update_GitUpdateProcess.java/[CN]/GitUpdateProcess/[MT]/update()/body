{
  LOG.info("update started");
  myProjectManager.blockReloadingProjectOnExternalChanges();
  try {
    if (checkRebaseInProgress() || checkMergeInProgress() || checkUnmergedFiles()) {
      return false;
    }
    if (!checkTrackedBranchesConfigured()) {
      return false;
    }
    Collection<VirtualFile> rootsToSave=new HashSet<VirtualFile>(1);
    for (    VirtualFile root : myRoots) {
      final GitUpdater updater=GitUpdater.getUpdater(myProject,this,root,myProgressIndicator,myUpdatedFiles);
      if (updater.isSaveNeeded()) {
        rootsToSave.add(root);
      }
    }
    mySaver.saveLocalChanges(rootsToSave);
    boolean incomplete=false;
    boolean success=true;
    for (    final VirtualFile root : myRoots) {
      try {
        final GitUpdater updater=GitUpdater.getUpdater(myProject,this,root,myProgressIndicator,myUpdatedFiles);
        GitUpdateResult res=updater.update();
        if (res == GitUpdateResult.INCOMPLETE) {
          incomplete=true;
        }
        success&=res.isSuccess();
      }
 catch (      VcsException e) {
        LOG.info("Error updating changes for root " + root,e);
        notifyImportantError(myProject,"Error updating " + root.getName(),"Updating " + root.getName() + " failed with an error: "+ e.getLocalizedMessage());
      }
 finally {
        try {
          if (!incomplete) {
            mySaver.restoreLocalChanges();
          }
 else {
            mySaver.notifyLocalChangesAreNotRestored();
          }
        }
 catch (        VcsException e) {
          LOG.info("Couldn't restore local changes after update",e);
          notifyImportantError(myProject,"Couldn't restore local changes after update","Restoring changes saved before update failed with an error.<br/>" + e.getLocalizedMessage());
        }
      }
    }
    return success;
  }
 catch (  VcsException e) {
    LOG.info("Couldn't save local changes",e);
    notifyError(myProject,"Couldn't save local changes","Tried to save uncommitted changes in " + mySaver.getSaverName() + " before update, but failed with an error.<br/>"+ "Update was cancelled.",true,e);
  }
 finally {
    myProjectManager.unblockReloadingProjectOnExternalChanges();
  }
  return false;
}
