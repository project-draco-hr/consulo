{
  Map<VirtualFile,GitUpdater> updaters;
  try {
    updaters=defineUpdaters(updateMethod);
  }
 catch (  VcsException e) {
    LOG.info(e);
    notifyError(myProject,"Git update failed",e.getMessage(),true,e);
    return GitUpdateResult.ERROR;
  }
  updaters=tryFastForwardMergeForRebaseUpdaters(updaters);
  if (updaters.isEmpty()) {
    return GitUpdateResult.NOTHING_TO_UPDATE;
  }
  LOG.info("updateImpl: identifying if save is needed...");
  for (  Map.Entry<VirtualFile,GitUpdater> entry : updaters.entrySet()) {
    VirtualFile root=entry.getKey();
    GitUpdater updater=entry.getValue();
    if (updater.isSaveNeeded()) {
      myRootsToSave.add(root);
      LOG.info("update| root " + root + " needs save");
    }
  }
  LOG.info("updateImpl: saving local changes...");
  try {
    mySaver.saveLocalChanges(myRootsToSave);
  }
 catch (  VcsException e) {
    LOG.info("Couldn't save local changes",e);
    notifyError(myProject,"Git update failed","Tried to save uncommitted changes in " + mySaver.getSaverName() + " before update, but failed with an error.<br/>"+ "Update was cancelled.",true,e);
    return GitUpdateResult.ERROR;
  }
  LOG.info("updateImpl: updating...");
  boolean incomplete=false;
  GitUpdateResult compoundResult=null;
  VirtualFile currentlyUpdatedRoot=null;
  try {
    for (    Map.Entry<VirtualFile,GitUpdater> entry : updaters.entrySet()) {
      currentlyUpdatedRoot=entry.getKey();
      GitUpdater updater=entry.getValue();
      GitUpdateResult res=updater.update();
      LOG.info("updating root " + currentlyUpdatedRoot + " finished: "+ res);
      if (res == GitUpdateResult.INCOMPLETE) {
        incomplete=true;
      }
      compoundResult=joinResults(compoundResult,res);
    }
  }
 catch (  VcsException e) {
    String rootName=(currentlyUpdatedRoot == null) ? "" : currentlyUpdatedRoot.getName();
    LOG.info("Error updating changes for root " + currentlyUpdatedRoot,e);
    notifyImportantError(myProject,"Error updating " + rootName,"Updating " + rootName + " failed with an error: "+ e.getLocalizedMessage());
  }
 finally {
    LOG.assertTrue(compoundResult != null,"Updaters were checked for non-emptiness");
    if (incomplete || !compoundResult.isSuccess()) {
      mySaver.notifyLocalChangesAreNotRestored();
    }
 else {
      LOG.info("updateImpl: restoring local changes...");
      restoreLocalChanges(context);
    }
  }
  return compoundResult;
}
