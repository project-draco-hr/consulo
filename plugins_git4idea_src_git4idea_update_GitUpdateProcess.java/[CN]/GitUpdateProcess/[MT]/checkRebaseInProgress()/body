{
  final GitRebaser rebaser=new GitRebaser(myProject,myGit,myProgressIndicator);
  final Collection<VirtualFile> rebasingRoots=rebaser.getRebasingRoots();
  if (rebasingRoots.isEmpty()) {
    return false;
  }
  LOG.info("checkRebaseInProgress rebasingRoots: " + rebasingRoots);
  GitConflictResolver.Params params=new GitConflictResolver.Params();
  params.setErrorNotificationTitle("Can't update");
  params.setMergeDescription("You have unfinished rebase process. These conflicts must be resolved before update.");
  params.setErrorNotificationAdditionalDescription("Then you may <b>continue rebase</b>. <br/> You also may <b>abort rebase</b> to restore the original branch and stop rebasing.");
  params.setReverse(true);
  return !new GitConflictResolver(myProject,myGit,ServiceManager.getService(git4idea.PlatformFacade.class),rebasingRoots,params){
    @Override protected boolean proceedIfNothingToMerge(){
      return rebaser.continueRebase(rebasingRoots);
    }
    @Override protected boolean proceedAfterAllMerged(){
      return rebaser.continueRebase(rebasingRoots);
    }
  }
.merge();
}
