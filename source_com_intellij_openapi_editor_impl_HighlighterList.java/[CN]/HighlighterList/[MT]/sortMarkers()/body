{
  myLongestHighlighterLength=0;
  RangeHighlighterImpl[] segmentHighlighters=mySegmentHighlighters.toArray(new RangeHighlighterImpl[mySegmentHighlighters.size()]);
  for (int i=0; i < segmentHighlighters.length; i++) {
    RangeHighlighterImpl segmentHighlighter=segmentHighlighters[i];
    if (!segmentHighlighter.isValid())     mySegmentHighlighters.remove(segmentHighlighter);
    myLongestHighlighterLength=Math.max(myLongestHighlighterLength,segmentHighlighter.getEndOffset() - segmentHighlighter.getStartOffset());
  }
  Collections.sort(mySegmentHighlighters,new Comparator<RangeHighlighterImpl>(){
    public int compare(    RangeHighlighterImpl r1,    RangeHighlighterImpl r2){
      if (r1.getAffectedAreaStartOffset() != r2.getAffectedAreaStartOffset()) {
        return r1.getAffectedAreaStartOffset() - r2.getAffectedAreaStartOffset();
      }
      if (r1.getLayer() != r2.getLayer()) {
        return r2.getLayer() - r1.getLayer();
      }
      return (int)(r2.getId() - r1.getId());
    }
  }
);
  myIsDirtied=false;
}
