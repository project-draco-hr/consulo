{
  ok=new Button("Ok");
  defaults=new Button("Defaults");
  skelBrowse=new Button(" Browse");
  skelFile=new TextField();
  skelFile.setEditable(false);
  dump=new Checkbox(" dump");
  verbose=new Checkbox(" verbose");
  jlex=new Checkbox(" JLex compatibility");
  no_minimize=new Checkbox(" skip minimization");
  no_backup=new Checkbox(" no backup file");
  time=new Checkbox(" time statistics");
  dot=new Checkbox(" dot graph files");
  CheckboxGroup codeG=new CheckboxGroup();
  tableG=new Checkbox(" table",Options.gen_method == Options.TABLE,codeG);
  switchG=new Checkbox(" switch",Options.gen_method == Options.SWITCH,codeG);
  packG=new Checkbox(" pack",Options.gen_method == Options.PACK,codeG);
  ok.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      close();
    }
  }
);
  defaults.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      setDefaults();
    }
  }
);
  skelBrowse.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      skelBrowse();
    }
  }
);
  tableG.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      setGenMethod();
    }
  }
);
  verbose.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      Options.verbose=verbose.getState();
    }
  }
);
  dump.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      Options.dump=dump.getState();
    }
  }
);
  jlex.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      Options.jlex=jlex.getState();
    }
  }
);
  no_minimize.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      Options.no_minimize=no_minimize.getState();
    }
  }
);
  no_backup.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      Options.no_backup=no_backup.getState();
    }
  }
);
  dot.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      Options.dot=dot.getState();
    }
  }
);
  time.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      Options.time=time.getState();
    }
  }
);
  GridPanel panel=new GridPanel(4,7,10,10);
  panel.setInsets(new Insets(10,5,5,10));
  panel.add(3,0,ok);
  panel.add(3,1,defaults);
  panel.add(0,0,2,1,Handles.BOTTOM,new Label("skeleton file:"));
  panel.add(0,1,2,1,skelFile);
  panel.add(2,1,1,1,Handles.TOP,skelBrowse);
  panel.add(0,2,1,1,Handles.BOTTOM,new Label("code:"));
  panel.add(0,3,1,1,tableG);
  panel.add(0,4,1,1,switchG);
  panel.add(0,5,1,1,packG);
  panel.add(1,3,1,1,dump);
  panel.add(1,4,1,1,verbose);
  panel.add(1,5,1,1,time);
  panel.add(2,3,1,1,no_minimize);
  panel.add(2,4,1,1,no_backup);
  panel.add(3,3,1,1,jlex);
  panel.add(3,4,1,1,dot);
  add("Center",panel);
  updateState();
}
