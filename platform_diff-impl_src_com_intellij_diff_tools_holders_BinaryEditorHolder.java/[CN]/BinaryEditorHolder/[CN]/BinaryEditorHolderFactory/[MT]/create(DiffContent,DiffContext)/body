{
  Project project=context.getProject();
  if (content instanceof FileContent) {
    if (project == null)     project=ProjectManager.getInstance().getDefaultProject();
    VirtualFile file=((FileContent)content).getFile();
    FileEditorProvider[] providers=FileEditorProviderManager.getInstance().getProviders(project,file);
    if (providers.length == 0)     throw new IllegalStateException("Can't find FileEditorProvider: " + file.getFileType());
    FileEditorProvider provider=providers[0];
    FileEditor editor=provider.createEditor(project,file);
    UIUtil.removeScrollBorder(editor.getComponent());
    return new BinaryEditorHolder(editor,provider);
  }
  if (content instanceof DocumentContent) {
    Document document=((DocumentContent)content).getDocument();
    final Editor editor=DiffUtil.createEditor(document,project,true);
    TextEditorProvider provider=TextEditorProvider.getInstance();
    TextEditor fileEditor=provider.getTextEditor(editor);
    Disposer.register(fileEditor,new Disposable(){
      @Override public void dispose(){
        EditorFactory.getInstance().releaseEditor(editor);
      }
    }
);
    return new BinaryEditorHolder(fileEditor,provider);
  }
  throw new IllegalArgumentException(content.getClass() + " - " + content.toString());
}
