{
  if (!(element instanceof PsiLocalVariable) && !(element instanceof PsiParameter))   return;
  PsiClass toplevel=PsiUtil.getTopLevelClass(element);
  if (toplevel == null)   return;
  PsiElement scopeElement;
  if (element instanceof PsiLocalVariable) {
    scopeElement=RefactoringUtil.getVariableScope((PsiLocalVariable)element);
  }
 else {
    scopeElement=((PsiParameter)element).getDeclarationScope();
  }
  LOG.assertTrue(scopeElement != null);
  scopeElement.accept(new JavaRecursiveElementWalkingVisitor(){
    @Override public void visitReferenceExpression(    PsiReferenceExpression expression){
      super.visitReferenceExpression(expression);
      if (!expression.isQualified()) {
        PsiElement resolved=expression.resolve();
        if (resolved instanceof PsiField) {
          final PsiField field=(PsiField)resolved;
          String fieldNewName=allRenames.containsKey(field) ? allRenames.get(field) : field.getName();
          if (newName.equals(fieldNewName)) {
            result.add(new LocalHidesFieldUsageInfo(expression,element));
          }
        }
      }
    }
  }
);
}
