{
  PsiVariable variable=(PsiVariable)psiElement;
  List<MemberHidesOuterMemberUsageInfo> outerHides=new ArrayList<MemberHidesOuterMemberUsageInfo>();
  List<MemberHidesStaticImportUsageInfo> staticImportHides=new ArrayList<MemberHidesStaticImportUsageInfo>();
  List<PsiElement> occurrencesToCheckForConflict=new ArrayList<PsiElement>();
  for (  UsageInfo usage : usages) {
    final PsiElement element=usage.getElement();
    if (element == null)     continue;
    if (usage instanceof MemberHidesStaticImportUsageInfo) {
      staticImportHides.add((MemberHidesStaticImportUsageInfo)usage);
    }
 else     if (usage instanceof LocalHidesFieldUsageInfo) {
      PsiJavaCodeReferenceElement collidingRef=(PsiJavaCodeReferenceElement)element;
      PsiElement resolved=collidingRef.resolve();
      if (resolved instanceof PsiField) {
        qualifyMember((PsiField)resolved,collidingRef,newName);
      }
 else {
      }
    }
 else     if (usage instanceof MemberHidesOuterMemberUsageInfo) {
      PsiJavaCodeReferenceElement collidingRef=(PsiJavaCodeReferenceElement)element;
      PsiField resolved=(PsiField)collidingRef.resolve();
      outerHides.add(new MemberHidesOuterMemberUsageInfo(element,resolved));
    }
 else {
      final PsiReference ref;
      if (usage instanceof MoveRenameUsageInfo) {
        ref=usage.getReference();
      }
 else {
        ref=element.getReference();
      }
      if (ref != null) {
        PsiElement newElem=ref.handleElementRename(newName);
        if (variable instanceof PsiField) {
          occurrencesToCheckForConflict.add(newElem);
        }
      }
    }
  }
  variable.setName(newName);
  if (listener != null) {
    listener.elementRenamed(variable);
  }
  if (variable instanceof PsiField) {
    for (    PsiElement occurrence : occurrencesToCheckForConflict) {
      fixPossibleNameCollisionsForFieldRenaming((PsiField)variable,newName,occurrence);
    }
  }
  qualifyOuterMemberReferences(outerHides);
  qualifyStaticImportReferences(staticImportHides);
}
