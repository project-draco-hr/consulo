{
  super(new NotificationsTreeTableModel());
  StripeTable.apply(this);
  setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  getTree().setCellRenderer(new TreeColumnCellRenderer(this));
  final TableColumn idColumn=getColumnModel().getColumn(ID_COLUMN);
  idColumn.setPreferredWidth(200);
  final TableColumn displayTypeColumn=getColumnModel().getColumn(DISPLAY_TYPE_COLUMN);
  displayTypeColumn.setMaxWidth(300);
  displayTypeColumn.setPreferredWidth(250);
  displayTypeColumn.setCellRenderer(new ComboBoxTableRenderer<NotificationDisplayType>(NotificationDisplayType.values()){
    @Override protected void customizeComponent(    NotificationDisplayType value,    JTable table,    boolean isSelected){
      super.customizeComponent(myDisplayBalloons.isSelected() ? value : NotificationDisplayType.NONE,table,isSelected);
      if (!myDisplayBalloons.isSelected() && !isSelected) {
        setBackground(UIUtil.getComboBoxDisabledBackground());
        setForeground(UIUtil.getComboBoxDisabledForeground());
      }
    }
    @Override protected String getTextFor(    @NotNull NotificationDisplayType value){
      return value.getTitle();
    }
  }
);
  displayTypeColumn.setCellEditor(new ComboBoxTableRenderer<NotificationDisplayType>(NotificationDisplayType.values()){
    @Override public boolean isCellEditable(    EventObject event){
      if (!myDisplayBalloons.isSelected()) {
        return false;
      }
      if (event instanceof MouseEvent) {
        return ((MouseEvent)event).getClickCount() >= 1;
      }
      return false;
    }
    @Override protected boolean isApplicable(    NotificationDisplayType value,    int row){
      if (value != NotificationDisplayType.TOOL_WINDOW)       return true;
      Object wrapper=((NotificationsTreeTableModel)getTableModel()).getRowValue(row).second;
      String groupId=((SettingsWrapper)wrapper).getGroupId();
      return NotificationsConfigurationImpl.getInstanceImpl().hasToolWindowCapability(groupId);
    }
    @Override protected String getTextFor(    @NotNull NotificationDisplayType value){
      return value.getTitle();
    }
  }
);
  final TableColumn logColumn=getColumnModel().getColumn(LOG_COLUMN);
  logColumn.setMaxWidth(logColumn.getPreferredWidth());
  logColumn.setCellRenderer(new BooleanTableCellRenderer());
  if (SystemInfo.isMac) {
    final TableColumn readAloudColumn=getColumnModel().getColumn(READ_ALOUD_COLUMN);
    readAloudColumn.setMaxWidth(readAloudColumn.getPreferredWidth());
    readAloudColumn.setCellRenderer(new BooleanTableCellRenderer());
  }
  new TableSpeedSearch(this);
  getEmptyText().setText("No notifications configured");
  TreeUtil.expandAll(getTree());
}
