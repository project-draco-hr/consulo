{
  super(new NotificationsTableModel());
  final TableColumn idColumn=getColumnModel().getColumn(ID_COLUMN);
  idColumn.setPreferredWidth(200);
  final TableColumn displayTypeColumn=getColumnModel().getColumn(DISPLAY_TYPE_COLUMN);
  displayTypeColumn.setMaxWidth(300);
  displayTypeColumn.setPreferredWidth(250);
  displayTypeColumn.setCellRenderer(new ComboBoxTableRenderer<NotificationDisplayType>(NotificationDisplayType.values()){
    @Override protected void customizeComponent(    NotificationDisplayType value,    JTable table,    boolean isSelected){
      super.customizeComponent(value,table,isSelected);
      if (!myDisplayBalloons.isSelected() && !isSelected) {
        setBackground(UIUtil.getComboBoxDisabledBackground());
        setForeground(UIUtil.getComboBoxDisabledForeground());
      }
    }
    @Override protected String getTextFor(    @NotNull NotificationDisplayType value){
      return value.getTitle();
    }
  }
);
  displayTypeColumn.setCellEditor(new ComboBoxTableRenderer<NotificationDisplayType>(NotificationDisplayType.values()){
    @Override public boolean isCellEditable(    EventObject event){
      if (!myDisplayBalloons.isSelected()) {
        return false;
      }
      if (event instanceof MouseEvent) {
        return ((MouseEvent)event).getClickCount() >= 1;
      }
      return false;
    }
    @Override protected boolean isApplicable(    NotificationDisplayType value,    int row){
      if (value != NotificationDisplayType.TOOL_WINDOW)       return true;
      String groupId=((NotificationsTableModel)getModel()).getSettings(row).getGroupId();
      return NotificationsConfigurationImpl.getNotificationsConfigurationImpl().hasToolWindowCapability(groupId);
    }
    @Override protected String getTextFor(    @NotNull NotificationDisplayType value){
      return value.getTitle();
    }
  }
);
  final TableColumn logColumn=getColumnModel().getColumn(LOG_COLUMN);
  logColumn.setMaxWidth(new JComboBox().getPreferredSize().width);
  getEmptyText().setText("No notifications configured");
}
