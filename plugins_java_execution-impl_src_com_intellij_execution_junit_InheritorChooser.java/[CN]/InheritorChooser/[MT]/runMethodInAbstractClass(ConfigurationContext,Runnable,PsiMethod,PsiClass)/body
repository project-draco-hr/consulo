{
  if (containingClass != null && containingClass.hasModifierProperty(PsiModifier.ABSTRACT)) {
    final Location location=context.getLocation();
    if (location instanceof MethodLocation) {
      final PsiClass aClass=((MethodLocation)location).getContainingClass();
      if (aClass != null && !aClass.hasModifierProperty(PsiModifier.ABSTRACT)) {
        return false;
      }
    }
    final List<PsiClass> classes=new ArrayList<PsiClass>();
    if (!ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable(){
      @Override public void run(){
        ClassInheritorsSearch.search(containingClass).forEach(new Processor<PsiClass>(){
          @Override public boolean process(          PsiClass aClass){
            if (!aClass.hasModifierProperty(PsiModifier.ABSTRACT)) {
              classes.add(aClass);
            }
            return true;
          }
        }
);
      }
    }
,"Search for " + containingClass.getQualifiedName() + " inheritors",true,containingClass.getProject())) {
      return true;
    }
    if (classes.size() == 1) {
      runForClass(classes.get(0),psiMethod,context,performRunnable);
      return true;
    }
    if (classes.isEmpty())     return false;
    final PsiClassListCellRenderer renderer=new PsiClassListCellRenderer(){
      @Override protected boolean customizeNonPsiElementLeftRenderer(      ColoredListCellRenderer renderer,      JList list,      Object value,      int index,      boolean selected,      boolean hasFocus){
        if (value == null) {
          renderer.append("All");
          return true;
        }
        return super.customizeNonPsiElementLeftRenderer(renderer,list,value,index,selected,hasFocus);
      }
    }
;
    Collections.sort(classes,renderer.getComparator());
    classes.add(0,null);
    final JBList list=new JBList(classes);
    list.setCellRenderer(renderer);
    JBPopupFactory.getInstance().createListPopupBuilder(list).setTitle("Choose executable classes to run " + (psiMethod != null ? psiMethod.getName() : containingClass.getName())).setMovable(false).setResizable(false).setRequestFocus(true).setItemChoosenCallback(new Runnable(){
      public void run(){
        final Object[] values=list.getSelectedValues();
        if (values == null)         return;
        chooseAndPerform(values,psiMethod,context,performRunnable,classes);
      }
    }
).createPopup().showInBestPositionFor(context.getDataContext());
    return true;
  }
  return false;
}
