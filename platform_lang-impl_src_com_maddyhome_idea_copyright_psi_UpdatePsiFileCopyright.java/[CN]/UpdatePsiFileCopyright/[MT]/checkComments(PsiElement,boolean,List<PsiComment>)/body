{
  try {
    final String keyword=myCopyrightProfile.getKeyword();
    final LinkedHashSet<CommentRange> found=new LinkedHashSet<CommentRange>();
    Document doc=null;
    if (!StringUtil.isEmpty(keyword)) {
      Pattern pattern=Pattern.compile(keyword,Pattern.CASE_INSENSITIVE);
      doc=FileDocumentManager.getInstance().getDocument(getFile().getVirtualFile());
      for (int i=0; i < comments.size(); i++) {
        PsiComment comment=comments.get(i);
        String text=comment.getText();
        Matcher match=pattern.matcher(text);
        if (match.find()) {
          found.add(getLineCopyrightComments(comments,doc,i,comment));
        }
      }
    }
    PsiElement point=last;
    if (commentHere && !comments.isEmpty() && myFileConfig.isRelativeBefore()) {
      point=comments.get(0);
    }
    if (commentHere && found.size() == 1) {
      CommentRange range=found.iterator().next();
      if (myFileConfig.isRelativeBefore() && range.getFirst() == comments.get(0) || !myFileConfig.isRelativeBefore() && range.getLast() == comments.get(comments.size() - 1)) {
        String newComment=getCommentText("","");
        myCommentText=null;
        String oldComment=doc.getCharsSequence().subSequence(range.getFirst().getTextRange().getStartOffset(),range.getLast().getTextRange().getEndOffset()).toString().trim();
        if (!StringUtil.isEmptyOrSpaces(myCopyrightProfile.getAllowReplaceKeyword()) && !oldComment.contains(myCopyrightProfile.allowReplaceKeyword)) {
          return;
        }
        if (newComment.trim().equals(oldComment)) {
          if (!getLanguageOptions().isAddBlankAfter()) {
            return;
          }
          PsiElement next=getNextSibling(range.getLast());
          if (next instanceof PsiWhiteSpace && StringUtil.countNewLines(next.getText()) > 1) {
            return;
          }
          point=range.getFirst();
        }
 else         if (!newComment.isEmpty()) {
          int start=range.getFirst().getTextRange().getStartOffset();
          int end=range.getLast().getTextRange().getEndOffset();
          addAction(new CommentAction(CommentAction.ACTION_REPLACE,start,end));
          return;
        }
      }
    }
    for (    CommentRange range : found) {
      int start=range.getFirst().getTextRange().getStartOffset();
      int end=range.getLast().getTextRange().getEndOffset();
      if (range.getFirst() == comments.get(0) && range.getLast() == comments.get(comments.size() - 1)) {
        int startLen=0;
        if (getPreviousSibling(range.getFirst()) instanceof PsiWhiteSpace) {
          startLen=StringUtil.countNewLines(getPreviousSibling(range.getFirst()).getText());
        }
        int endLen=0;
        if (getNextSibling(range.getLast()) instanceof PsiWhiteSpace) {
          endLen=StringUtil.countNewLines(getNextSibling(range.getLast()).getText());
        }
        if (startLen == 1 && getPreviousSibling(range.getFirst()).getTextRange().getStartOffset() > 0) {
          start=getPreviousSibling(range.getFirst()).getTextRange().getStartOffset();
        }
 else         if (endLen > 0) {
          end=getNextSibling(range.getLast()).getTextRange().getEndOffset();
        }
      }
 else       if (range.getLast() == comments.get(comments.size() - 1)) {
        if (getPreviousSibling(range.getFirst()) instanceof PsiWhiteSpace && StringUtil.countNewLines(getPreviousSibling(range.getFirst()).getText()) > 1) {
          start=getPreviousSibling(range.getFirst()).getTextRange().getStartOffset();
        }
      }
 else       if (getNextSibling(range.getLast()) instanceof PsiWhiteSpace) {
        end=getNextSibling(range.getLast()).getTextRange().getEndOffset();
      }
      addAction(new CommentAction(CommentAction.ACTION_DELETE,start,end));
    }
    if (commentHere) {
      String suffix="\n";
      if (point != last && getPreviousSibling(point) != null && getPreviousSibling(point) instanceof PsiWhiteSpace) {
        suffix=getPreviousSibling(point).getText();
        if (StringUtil.countNewLines(suffix) == 1) {
          suffix='\n' + suffix;
        }
      }
      if (point != last && getPreviousSibling(point) == null) {
        suffix="\n\n";
      }
      if (getLanguageOptions().isAddBlankAfter() && StringUtil.countNewLines(suffix) == 1) {
        suffix+="\n";
      }
      String prefix="";
      if (getPreviousSibling(point) != null) {
        if (getPreviousSibling(point) instanceof PsiComment) {
          prefix="\n\n";
        }
        if (getPreviousSibling(point) instanceof PsiWhiteSpace && getPreviousSibling(getPreviousSibling(point)) != null && getPreviousSibling(getPreviousSibling(point)) instanceof PsiComment) {
          String ws=getPreviousSibling(point).getText();
          int cnt=StringUtil.countNewLines(ws);
          if (cnt == 1) {
            prefix="\n";
          }
        }
      }
      int pos=0;
      if (point != null) {
        final TextRange textRange=point.getTextRange();
        if (textRange != null) {
          pos=textRange.getStartOffset();
        }
      }
      addAction(new CommentAction(pos,prefix,suffix));
    }
  }
 catch (  Exception e) {
    LOGGER.error(e);
  }
}
