{
  XmlAttribute name=getNameAttr(xml);
  if (name == null || StringUtil.isEmptyOrSpaces(name.getValue()))   return null;
  String localName=name.getValue();
  final boolean hasPrefix=localName.contains(":");
  localName=hasPrefix ? localName.substring(localName.indexOf(':') + 1) : localName;
  final String nsPrefix=hasPrefix ? name.getValue().substring(0,name.getValue().indexOf(':')) : null;
  final XmlFile file=XmlUtil.getContainingFile(xml);
  if (file == null)   return null;
  final Project project=file.getProject();
  if (project == null)   return null;
  final Set<SchemaTypeInfo> result=new HashSet<SchemaTypeInfo>();
  final ArrayDeque<SchemaTypeInfo> queue=new ArrayDeque<SchemaTypeInfo>();
  String nsUri;
  if (!hasPrefix) {
    nsUri=getDefaultNs(file);
  }
 else {
    nsUri=XmlUtil.findNamespaceByPrefix(nsPrefix,file.getRootTag());
  }
  if (nsUri == null)   return null;
  queue.add(new SchemaTypeInfo(localName,true,nsUri));
  while (!queue.isEmpty()) {
    final SchemaTypeInfo info=queue.removeFirst();
    final List<Set<SchemaTypeInfo>> childrenOfType=SchemaTypeInheritanceIndex.getDirectChildrenOfType(project,info.getNamespaceUri(),info.getTagName());
    for (    Set<SchemaTypeInfo> infos : childrenOfType) {
      for (      SchemaTypeInfo typeInfo : infos) {
        if (typeInfo.isIsTypeName()) {
          queue.add(typeInfo);
        }
        result.add(typeInfo);
      }
    }
  }
  return result;
}
