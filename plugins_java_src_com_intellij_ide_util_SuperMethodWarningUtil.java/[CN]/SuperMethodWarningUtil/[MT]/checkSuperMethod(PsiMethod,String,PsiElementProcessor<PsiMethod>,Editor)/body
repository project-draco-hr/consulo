{
  PsiClass aClass=method.getContainingClass();
  if (aClass == null) {
    processor.execute(method);
    return;
  }
  PsiMethod superMethod=method.findDeepestSuperMethod();
  if (superMethod == null) {
    processor.execute(method);
    return;
  }
  final PsiClass containingClass=superMethod.getContainingClass();
  if (containingClass == null) {
    processor.execute(method);
    return;
  }
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    processor.execute(superMethod);
    return;
  }
  final PsiMethod[] methods=new PsiMethod[]{superMethod,method};
  final String renameBase=actionString + " base method";
  final String renameCurrent=actionString + " only current method";
  final JBList list=new JBList(renameBase,renameCurrent);
  JBPopupFactory.getInstance().createListPopupBuilder(list).setTitle(method.getName() + (containingClass.isInterface() && !aClass.isInterface() ? " implements" : " overrides") + " method of "+ SymbolPresentationUtil.getSymbolPresentableText(containingClass)).setMovable(false).setResizable(false).setRequestFocus(true).setItemChoosenCallback(new Runnable(){
    public void run(){
      final Object value=list.getSelectedValue();
      if (value instanceof String) {
        processor.execute(methods[value.equals(renameBase) ? 0 : 1]);
      }
    }
  }
).createPopup().showInBestPositionFor(editor);
}
