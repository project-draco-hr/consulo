{
  final PsiType variableOrMethodType;
  if (variableOrMethod instanceof PsiVariable) {
    final PsiVariable variable=(PsiVariable)variableOrMethod;
    variableOrMethodType=variable.getType();
  }
 else   if (variableOrMethod instanceof PsiMethod) {
    final PsiMethod method=(PsiMethod)variableOrMethod;
    variableOrMethodType=method.getReturnType();
    if (variableOrMethodType == PsiType.VOID) {
      return Collections.EMPTY_LIST;
    }
  }
 else {
    throw new IllegalArgumentException("PsiMethod or PsiVariable expected: " + variableOrMethod);
  }
  if (!(variableOrMethodType instanceof PsiClassType)) {
    return Collections.EMPTY_LIST;
  }
  final PsiClassType variableOrMethodClassType=(PsiClassType)variableOrMethodType;
  final PsiClass variableOrMethodClass=variableOrMethodClassType.resolve();
  if (variableOrMethodClass == null) {
    return Collections.EMPTY_LIST;
  }
  final PsiManager manager=variableOrMethod.getManager();
  final GlobalSearchScope scope=variableOrMethod.getResolveScope();
  final Project project=manager.getProject();
  final JavaPsiFacade facade=JavaPsiFacade.getInstance(project);
  final PsiClass javaLangObjectClass=facade.findClass("java.lang.Object",scope);
  if (javaLangObjectClass == null || variableOrMethodClass.equals(javaLangObjectClass)) {
    return Collections.EMPTY_LIST;
  }
  Set<PsiClass> weakestTypeClasses=new HashSet();
  weakestTypeClasses.add(javaLangObjectClass);
  final Query<PsiReference> query=ReferencesSearch.search(variableOrMethod);
  boolean hasUsages=false;
  for (  PsiReference reference : query) {
    if (reference == null) {
      continue;
    }
    hasUsages=true;
    PsiElement referenceElement=reference.getElement();
    PsiElement referenceParent=referenceElement.getParent();
    if (referenceParent instanceof PsiMethodCallExpression) {
      referenceElement=referenceParent;
      referenceParent=referenceElement.getParent();
    }
    final PsiElement referenceGrandParent=referenceParent.getParent();
    if (referenceParent instanceof PsiExpressionList) {
      if (!(referenceGrandParent instanceof PsiMethodCallExpression)) {
        return Collections.EMPTY_LIST;
      }
      final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)referenceGrandParent;
      if (!findWeakestType(referenceElement,methodCallExpression,useParameterizedTypeForCollectionMethods,weakestTypeClasses)) {
        return Collections.EMPTY_LIST;
      }
    }
 else     if (referenceGrandParent instanceof PsiMethodCallExpression) {
      final PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)referenceGrandParent;
      if (!findWeakestType(methodCallExpression,weakestTypeClasses)) {
        return Collections.EMPTY_LIST;
      }
    }
 else     if (referenceParent instanceof PsiAssignmentExpression) {
      final PsiAssignmentExpression assignmentExpression=(PsiAssignmentExpression)referenceParent;
      if (!findWeakestType(referenceElement,assignmentExpression,useRighthandTypeAsWeakestTypeInAssignments,weakestTypeClasses)) {
        return Collections.EMPTY_LIST;
      }
    }
 else     if (referenceParent instanceof PsiVariable) {
      final PsiVariable variable=(PsiVariable)referenceParent;
      final PsiType type=variable.getType();
      if (!checkType(type,weakestTypeClasses)) {
        return Collections.EMPTY_LIST;
      }
    }
 else     if (referenceParent instanceof PsiForeachStatement) {
      final PsiForeachStatement foreachStatement=(PsiForeachStatement)referenceParent;
      if (foreachStatement.getIteratedValue() != referenceElement) {
        return Collections.EMPTY_LIST;
      }
      final PsiClass javaLangIterableClass=facade.findClass("java.lang.Iterable",scope);
      if (javaLangIterableClass == null) {
        return Collections.EMPTY_LIST;
      }
      checkClass(javaLangIterableClass,weakestTypeClasses);
    }
 else     if (referenceParent instanceof PsiReturnStatement) {
      final PsiMethod containingMethod=PsiTreeUtil.getParentOfType(referenceParent,PsiMethod.class);
      if (containingMethod == null) {
        return Collections.EMPTY_LIST;
      }
      final PsiType type=containingMethod.getReturnType();
      if (!checkType(type,weakestTypeClasses)) {
        return Collections.EMPTY_LIST;
      }
    }
 else     if (referenceParent instanceof PsiReferenceExpression) {
      final PsiReferenceExpression referenceExpression=(PsiReferenceExpression)referenceParent;
      final PsiElement target=referenceExpression.resolve();
      if (!(target instanceof PsiField)) {
        return Collections.EMPTY_LIST;
      }
      final PsiField field=(PsiField)target;
      final PsiClass containingClass=field.getContainingClass();
      checkClass(containingClass,weakestTypeClasses);
    }
 else     if (referenceParent instanceof PsiArrayInitializerExpression) {
      final PsiArrayInitializerExpression arrayInitializerExpression=(PsiArrayInitializerExpression)referenceParent;
      if (!findWeakestType(arrayInitializerExpression,weakestTypeClasses)) {
        return Collections.EMPTY_LIST;
      }
    }
 else     if (referenceParent instanceof PsiThrowStatement) {
      final PsiThrowStatement throwStatement=(PsiThrowStatement)referenceParent;
      if (!findWeakestType(throwStatement,variableOrMethodClass,weakestTypeClasses)) {
        return Collections.EMPTY_LIST;
      }
    }
 else     if (referenceParent instanceof PsiConditionalExpression) {
      final PsiConditionalExpression conditionalExpression=(PsiConditionalExpression)referenceParent;
      final PsiExpression condition=conditionalExpression.getCondition();
      if (referenceElement.equals(condition)) {
        return Collections.EMPTY_LIST;
      }
      final PsiType type=ExpectedTypeUtils.findExpectedType(conditionalExpression,true);
      if (!checkType(type,weakestTypeClasses)) {
        return Collections.EMPTY_LIST;
      }
    }
 else     if (referenceParent instanceof PsiBinaryExpression) {
      final PsiBinaryExpression binaryExpression=(PsiBinaryExpression)referenceParent;
      final PsiType type=binaryExpression.getType();
      if (variableOrMethodType.equals(type)) {
        if (!checkType(type,weakestTypeClasses)) {
          return Collections.EMPTY_LIST;
        }
      }
    }
 else     if (referenceParent instanceof PsiSwitchStatement) {
      return Collections.EMPTY_LIST;
    }
 else     if (referenceParent instanceof PsiPrefixExpression) {
      return Collections.EMPTY_LIST;
    }
 else     if (referenceParent instanceof PsiPostfixExpression) {
      return Collections.EMPTY_LIST;
    }
 else     if (referenceParent instanceof PsiIfStatement) {
      return Collections.EMPTY_LIST;
    }
 else     if (referenceParent instanceof PsiForStatement) {
      return Collections.EMPTY_LIST;
    }
 else     if (referenceParent instanceof PsiNewExpression) {
      final PsiNewExpression newExpression=(PsiNewExpression)referenceParent;
      final PsiExpression qualifier=newExpression.getQualifier();
      if (qualifier != null) {
        final PsiType type=newExpression.getType();
        if (!(type instanceof PsiClassType)) {
          return Collections.EMPTY_LIST;
        }
        final PsiClassType classType=(PsiClassType)type;
        final PsiClass innerClass=classType.resolve();
        if (innerClass == null) {
          return Collections.EMPTY_LIST;
        }
        final PsiClass outerClass=innerClass.getContainingClass();
        if (outerClass != null) {
          checkClass(outerClass,weakestTypeClasses);
        }
      }
    }
    if (weakestTypeClasses.contains(variableOrMethodClass) || weakestTypeClasses.isEmpty()) {
      return Collections.EMPTY_LIST;
    }
  }
  if (!hasUsages) {
    return Collections.EMPTY_LIST;
  }
  weakestTypeClasses=filterAccessibleClasses(weakestTypeClasses,variableOrMethod);
  return weakestTypeClasses;
}
