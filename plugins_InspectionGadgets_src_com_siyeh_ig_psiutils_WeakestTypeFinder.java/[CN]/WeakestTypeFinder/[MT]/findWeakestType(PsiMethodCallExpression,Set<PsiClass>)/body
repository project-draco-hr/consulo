{
  final PsiReferenceExpression methodExpression=methodCallExpression.getMethodExpression();
  final PsiElement target=methodExpression.resolve();
  if (!(target instanceof PsiMethod)) {
    return false;
  }
  PsiClass autoClosable=null;
  final PsiExpression qualifierExpression=methodExpression.getQualifierExpression();
  if (qualifierExpression instanceof PsiReferenceExpression) {
    final PsiElement resolve=((PsiReferenceExpression)qualifierExpression).resolve();
    if (resolve instanceof PsiResourceVariable) {
      autoClosable=JavaPsiFacade.getInstance(resolve.getProject()).findClass(CommonClassNames.JAVA_LANG_AUTO_CLOSEABLE,resolve.getResolveScope());
    }
  }
  final PsiMethod method=(PsiMethod)target;
  final PsiReferenceList throwsList=method.getThrowsList();
  final PsiClassType[] classTypes=throwsList.getReferencedTypes();
  final Collection<PsiClassType> thrownTypes=new HashSet<PsiClassType>(Arrays.asList(classTypes));
  final PsiMethod[] superMethods=method.findDeepestSuperMethods();
  boolean checked=false;
  if (superMethods.length > 0) {
    final PsiType expectedType=ExpectedTypeUtils.findExpectedType(methodCallExpression,false);
    for (    PsiMethod superMethod : superMethods) {
      final PsiType returnType=superMethod.getReturnType();
      if (expectedType != null && returnType != null && !expectedType.isAssignableFrom(returnType)) {
        continue;
      }
      if (throwsIncompatibleException(superMethod,thrownTypes)) {
        continue;
      }
      if (!PsiUtil.isAccessible(superMethod,methodCallExpression,null)) {
        continue;
      }
      final PsiClass containingClass=superMethod.getContainingClass();
      if (autoClosable != null && !InheritanceUtil.isInheritorOrSelf(containingClass,autoClosable,true)) {
        continue;
      }
      checkClass(containingClass,weakestTypeClasses);
      checked=true;
    }
  }
  if (!checked) {
    final PsiType returnType=method.getReturnType();
    if (returnType instanceof PsiClassType) {
      final PsiClassType classType=(PsiClassType)returnType;
      final PsiClass aClass=classType.resolve();
      if (aClass instanceof PsiTypeParameter) {
        return false;
      }
    }
    final PsiClass containingClass=method.getContainingClass();
    if (autoClosable != null && !InheritanceUtil.isInheritorOrSelf(containingClass,autoClosable,true)) {
      return false;
    }
    checkClass(containingClass,weakestTypeClasses);
  }
  return true;
}
