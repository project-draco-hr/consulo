{
  if (params.length != 1)   return null;
  final Result result=params[0].calculateResult(context);
  if (result == null)   return null;
  Project project=context.getProject();
  final int offset=context.getStartOffset();
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  final ArrayList<PsiElement> array=new ArrayList<PsiElement>();
  PsiType type=MacroUtil.resultToPsiType(result,context);
  PsiFile file=PsiDocumentManager.getInstance(project).getPsiFile(context.getEditor().getDocument());
  PsiElement place=file.findElementAt(offset);
  PsiVariable[] variables=MacroUtil.getVariablesVisibleAt(place,"");
  PsiManager manager=PsiManager.getInstance(project);
  for (  PsiVariable var : variables) {
    if (var instanceof PsiField && var.hasModifierProperty(PsiModifier.STATIC)) {
      PsiClass varClass=((PsiField)var).getContainingClass();
      PsiClass placeClass=PsiTreeUtil.getParentOfType(place,PsiClass.class);
      if (!manager.areElementsEquivalent(varClass,placeClass))       continue;
    }
 else     if (var instanceof PsiLocalVariable) {
      final TextRange range=var.getNameIdentifier().getTextRange();
      if (range != null && range.contains(offset)) {
        continue;
      }
    }
    PsiType type1=var.getType();
    if (type == null || type.isAssignableFrom(type1)) {
      array.add(var);
    }
  }
  PsiExpression[] expressions=MacroUtil.getStandardExpressionsOfType(place,type);
  array.addAll(Arrays.asList(expressions));
  return array.toArray(new PsiElement[array.size()]);
}
