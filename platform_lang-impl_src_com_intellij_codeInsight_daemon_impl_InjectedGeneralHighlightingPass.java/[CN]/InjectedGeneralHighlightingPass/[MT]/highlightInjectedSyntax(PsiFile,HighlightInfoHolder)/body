{
  List<Trinity<IElementType,SmartPsiElementPointer<PsiLanguageInjectionHost>,TextRange>> tokens=InjectedLanguageUtil.getHighlightTokens(injectedPsi);
  if (tokens == null)   return;
  final Language injectedLanguage=injectedPsi.getLanguage();
  Project project=injectedPsi.getProject();
  SyntaxHighlighter syntaxHighlighter=SyntaxHighlighterFactory.getSyntaxHighlighter(injectedLanguage,project,injectedPsi.getVirtualFile());
  final TextAttributes defaultAttrs=myGlobalScheme.getAttributes(HighlighterColors.TEXT);
  for (  Trinity<IElementType,SmartPsiElementPointer<PsiLanguageInjectionHost>,TextRange> token : tokens) {
    ProgressManager.checkCanceled();
    IElementType tokenType=token.getFirst();
    PsiLanguageInjectionHost injectionHost=token.getSecond().getElement();
    if (injectionHost == null)     continue;
    TextRange textRange=token.getThird();
    TextAttributesKey[] keys=syntaxHighlighter.getTokenHighlights(tokenType);
    if (textRange.getLength() == 0)     continue;
    TextRange annRange=textRange.shiftRight(injectionHost.getTextRange().getStartOffset());
    TextAttributes attributes=null;
    for (    TextAttributesKey key : keys) {
      TextAttributes attrs2=myGlobalScheme.getAttributes(key);
      if (attrs2 != null) {
        attributes=attributes == null ? attrs2 : TextAttributes.merge(attributes,attrs2);
      }
    }
    TextAttributes forcedAttributes;
    if (attributes == null || attributes.isEmpty() || attributes.equals(defaultAttrs)) {
      forcedAttributes=TextAttributes.ERASE_MARKER;
    }
 else {
      HighlightInfo info=HighlightInfo.newHighlightInfo(HighlightInfoType.INJECTED_LANGUAGE_FRAGMENT).range(annRange).textAttributes(TextAttributes.ERASE_MARKER).createUnconditionally();
      holder.add(info);
      forcedAttributes=new TextAttributes(attributes.getForegroundColor(),attributes.getBackgroundColor(),attributes.getEffectColor(),attributes.getEffectType(),attributes.getFontType());
    }
    HighlightInfo info=HighlightInfo.newHighlightInfo(HighlightInfoType.INJECTED_LANGUAGE_FRAGMENT).range(annRange).textAttributes(forcedAttributes).createUnconditionally();
    holder.add(info);
  }
}
