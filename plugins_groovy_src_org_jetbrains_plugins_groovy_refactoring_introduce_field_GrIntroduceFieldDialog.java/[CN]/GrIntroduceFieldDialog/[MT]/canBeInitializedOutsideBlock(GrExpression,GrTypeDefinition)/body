{
  if (expression == null)   return false;
  expression=(GrExpression)PsiUtil.skipParentheses(expression,false);
  if (expression == null)   return false;
  if (expression instanceof GrReferenceExpression) {
    final PsiElement resolved=((GrReferenceExpression)expression).resolve();
    if (GroovyRefactoringUtil.isLocalVariable(resolved)) {
      expression=((GrVariable)resolved).getInitializerGroovy();
      if (expression == null)       return false;
    }
  }
  final Ref<Boolean> ref=new Ref<Boolean>(Boolean.TRUE);
  final GrExpression finalExpression=expression;
  expression.accept(new GroovyRecursiveElementVisitor(){
    @Override public void visitReferenceExpression(    GrReferenceExpression refExpr){
      super.visitReferenceExpression(refExpr);
      final PsiElement resolved=refExpr.resolve();
      if (!(resolved instanceof GrVariable))       return;
      if (resolved instanceof GrField && scope.getManager().areElementsEquivalent(scope,((GrField)resolved).getContainingClass())) {
        return;
      }
      if (resolved instanceof PsiParameter && PsiTreeUtil.isAncestor(finalExpression,((PsiParameter)resolved).getDeclarationScope(),false)) {
        return;
      }
      ref.set(Boolean.FALSE);
    }
  }
);
  return ref.get();
}
