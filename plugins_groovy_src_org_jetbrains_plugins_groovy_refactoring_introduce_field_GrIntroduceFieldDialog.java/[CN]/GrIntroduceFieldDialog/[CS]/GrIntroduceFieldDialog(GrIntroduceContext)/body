{
  super(context.project,true);
  myContext=context;
  GrTypeDefinition clazz=(GrTypeDefinition)context.scope;
  myIsStatic=GrIntroduceFieldHandler.shouldBeStatic(context.place,clazz);
  if (myIsStatic) {
    myFieldLabel.setText("Static Field of Type:");
  }
 else {
    myFieldLabel.setText("Field of Type:");
  }
  initVisibility();
  ButtonGroup initialization=new ButtonGroup();
  initialization.add(myCurrentMethodRadioButton);
  initialization.add(myFieldDeclarationRadioButton);
  initialization.add(myClassConstructorSRadioButton);
  new RadioUpDownListener(myCurrentMethodRadioButton,myFieldDeclarationRadioButton,myClassConstructorSRadioButton);
  myCanBeInitializedOutsideBlock=canBeInitializedOutsideBlock(context.expression,(GrTypeDefinition)context.scope);
  final GrMethod containingMethod=GrIntroduceFieldHandler.getContainingMethod(context.place,clazz);
  if (containingMethod == null) {
    myCurrentMethodRadioButton.setEnabled(false);
  }
  if (myCurrentMethodRadioButton.isEnabled()) {
    myCurrentMethodRadioButton.setSelected(true);
  }
 else {
    myFieldDeclarationRadioButton.setSelected(true);
  }
  myInvokedOnLocalVar=context.var == null ? getInvokedOnLocalVar(context.expression) : context.var.getName();
  if (myInvokedOnLocalVar != null) {
    myReplaceAllOccurencesCheckBox.setText("Replace all occurences and remove variable '" + myInvokedOnLocalVar + "'");
    if (context.var != null) {
      myReplaceAllOccurencesCheckBox.setEnabled(false);
      myReplaceAllOccurencesCheckBox.setSelected(true);
    }
  }
 else   if (context.occurrences.length == 1) {
    myReplaceAllOccurencesCheckBox.setSelected(false);
    myReplaceAllOccurencesCheckBox.setVisible(false);
  }
  myNameSuggestionsField.addDataChangedListener(new NameSuggestionsField.DataChanged(){
    @Override public void dataChanged(){
      validateOKAction();
    }
  }
);
  ItemListener l=new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      myNameSuggestionsField.requestFocusInWindow();
      checkErrors();
    }
  }
;
  myPrivateRadioButton.addItemListener(l);
  myProtectedRadioButton.addItemListener(l);
  myPublicRadioButton.addItemListener(l);
  myPropertyRadioButton.addItemListener(l);
  myCurrentMethodRadioButton.addItemListener(l);
  myFieldDeclarationRadioButton.addItemListener(l);
  myClassConstructorSRadioButton.addItemListener(l);
  myDeclareFinalCheckBox.addItemListener(l);
  myReplaceAllOccurencesCheckBox.addItemListener(l);
  myTypeComboBox.addItemListener(l);
  isInvokedInAlwaysInvokedConstructor=allOccurrencesInOneMethod(myContext.occurrences,clazz) && isAlwaysInvokedConstructor(containingMethod,clazz);
  hasLHSUsages=hasLhsUsages(myContext);
  setTitle(IntroduceFieldHandler.REFACTORING_NAME);
  init();
  checkErrors();
}
