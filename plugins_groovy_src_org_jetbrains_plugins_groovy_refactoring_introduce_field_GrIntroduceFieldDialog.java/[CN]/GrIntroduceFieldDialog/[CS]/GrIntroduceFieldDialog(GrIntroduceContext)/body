{
  super(context.getProject(),true);
  myContext=context;
  GrTypeDefinition clazz=(GrTypeDefinition)context.getScope();
  myIsStatic=GrIntroduceFieldHandler.shouldBeStatic(context.getPlace(),clazz);
  initVisibility();
  ButtonGroup initialization=new ButtonGroup();
  initialization.add(myCurrentMethodRadioButton);
  initialization.add(myFieldDeclarationRadioButton);
  initialization.add(myClassConstructorSRadioButton);
  new RadioUpDownListener(myCurrentMethodRadioButton,myFieldDeclarationRadioButton,myClassConstructorSRadioButton);
  myCanBeInitializedOutsideBlock=canBeInitializedOutsideBlock(context.getExpression(),(GrTypeDefinition)context.getScope());
  final GrMethod containingMethod=GrIntroduceFieldHandler.getContainingMethod(context.getPlace(),clazz);
  if (containingMethod == null) {
    myCurrentMethodRadioButton.setEnabled(false);
  }
  if (myCurrentMethodRadioButton.isEnabled()) {
    myCurrentMethodRadioButton.setSelected(true);
  }
 else {
    myFieldDeclarationRadioButton.setSelected(true);
  }
  myInvokedOnLocalVar=context.getVar() == null ? getInvokedOnLocalVar(context.getExpression()) : context.getVar().getName();
  if (myInvokedOnLocalVar != null) {
    myReplaceAllOccurrencesCheckBox.setText("Replace all occurrences and remove variable '" + myInvokedOnLocalVar + "'");
    if (context.getVar() != null) {
      myReplaceAllOccurrencesCheckBox.setEnabled(false);
      myReplaceAllOccurrencesCheckBox.setSelected(true);
    }
  }
 else   if (context.getOccurrences().length == 1) {
    myReplaceAllOccurrencesCheckBox.setSelected(false);
    myReplaceAllOccurrencesCheckBox.setVisible(false);
  }
  myNameField.addDocumentListener(new DocumentListener(){
    @Override public void beforeDocumentChange(    DocumentEvent event){
    }
    @Override public void documentChanged(    DocumentEvent event){
      validateOKAction();
    }
  }
);
  ItemListener l=new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      myNameField.requestFocusInWindow();
      checkErrors();
    }
  }
;
  myPrivateRadioButton.addItemListener(l);
  myProtectedRadioButton.addItemListener(l);
  myPublicRadioButton.addItemListener(l);
  myPropertyRadioButton.addItemListener(l);
  myCurrentMethodRadioButton.addItemListener(l);
  myFieldDeclarationRadioButton.addItemListener(l);
  myClassConstructorSRadioButton.addItemListener(l);
  myDeclareFinalCheckBox.addItemListener(l);
  myReplaceAllOccurrencesCheckBox.addItemListener(l);
  myTypeComboBox.addItemListener(l);
  isInvokedInAlwaysInvokedConstructor=allOccurrencesInOneMethod(myContext.getOccurrences(),clazz) && isAlwaysInvokedConstructor(containingMethod,clazz);
  hasLHSUsages=hasLhsUsages(myContext);
  setTitle(REFACTORING_NAME);
  init();
  checkErrors();
}
