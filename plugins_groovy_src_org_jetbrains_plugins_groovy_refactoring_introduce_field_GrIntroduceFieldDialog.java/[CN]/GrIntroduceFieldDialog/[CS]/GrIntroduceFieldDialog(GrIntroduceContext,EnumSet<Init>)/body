{
  super(context.getProject(),true);
  myContext=context;
  final PsiClass clazz=(PsiClass)context.getScope();
  PsiElement scope=clazz instanceof GroovyScriptClass ? clazz.getContainingFile() : clazz;
  myIsStatic=GrIntroduceFieldHandler.shouldBeStatic(context.getPlace(),scope);
  initVisibility();
  ButtonGroup initialization=new ButtonGroup();
  ArrayList<JRadioButton> inits=ContainerUtil.newArrayList();
  if (initPlaces.contains(Init.CUR_METHOD))   inits.add(myCurrentMethodRadioButton);
 else   myCurrentMethodRadioButton.setVisible(false);
  if (initPlaces.contains(Init.FIELD_DECLARATION))   inits.add(myFieldDeclarationRadioButton);
 else   myFieldDeclarationRadioButton.setVisible(false);
  if (initPlaces.contains(Init.CONSTRUCTOR))   inits.add(myClassConstructorSRadioButton);
 else   myClassConstructorSRadioButton.setVisible(false);
  if (initPlaces.contains(Init.SETUP_METHOD))   inits.add(mySetUpMethodRadioButton);
 else   mySetUpMethodRadioButton.setVisible(false);
  for (  JRadioButton init : inits) {
    initialization.add(init);
  }
  new RadioUpDownListener(inits.toArray(new JRadioButton[inits.size()]));
  if (clazz instanceof GroovyScriptClass) {
    myClassConstructorSRadioButton.setEnabled(false);
  }
  myCanBeInitializedOutsideBlock=canBeInitializedOutsideBlock(context,clazz);
  final GrMember container=GrIntroduceFieldHandler.getContainer(context.getPlace(),scope);
  if (container == null) {
    myCurrentMethodRadioButton.setEnabled(false);
  }
  if (myCurrentMethodRadioButton.isEnabled()) {
    myCurrentMethodRadioButton.setSelected(true);
  }
 else {
    myFieldDeclarationRadioButton.setSelected(true);
  }
  myInvokedOnLocalVar=context.getVar() == null ? getInvokedOnLocalVar(context.getExpression()) : context.getVar().getName();
  if (myInvokedOnLocalVar != null) {
    myReplaceAllOccurrencesCheckBox.setText("Replace all occurrences and remove variable '" + myInvokedOnLocalVar + "'");
    if (context.getVar() != null) {
      myReplaceAllOccurrencesCheckBox.setEnabled(false);
      myReplaceAllOccurrencesCheckBox.setSelected(true);
    }
  }
 else   if (context.getOccurrences().length == 1) {
    myReplaceAllOccurrencesCheckBox.setSelected(false);
    myReplaceAllOccurrencesCheckBox.setVisible(false);
  }
  myNameField.addDataChangedListener(new NameSuggestionsField.DataChanged(){
    @Override public void dataChanged(){
      validateOKAction();
    }
  }
);
  ItemListener l=new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      myNameField.requestFocusInWindow();
      checkErrors();
    }
  }
;
  myPrivateRadioButton.addItemListener(l);
  myProtectedRadioButton.addItemListener(l);
  myPublicRadioButton.addItemListener(l);
  myPropertyRadioButton.addItemListener(l);
  myCurrentMethodRadioButton.addItemListener(l);
  myFieldDeclarationRadioButton.addItemListener(l);
  myClassConstructorSRadioButton.addItemListener(l);
  myDeclareFinalCheckBox.addItemListener(l);
  myReplaceAllOccurrencesCheckBox.addItemListener(l);
  myTypeComboBox.addItemListener(l);
  isInvokedInAlwaysInvokedConstructor=container instanceof PsiMethod && allOccurrencesInOneMethod(myContext.getOccurrences(),scope) && isAlwaysInvokedConstructor((PsiMethod)container,clazz);
  hasLHSUsages=hasLhsUsages(myContext);
  setTitle(REFACTORING_NAME);
  init();
  checkErrors();
}
