{
  if (!method.hasModifierProperty(PsiModifier.STATIC))   return false;
  if (!method.hasModifierProperty(PsiModifier.PUBLIC))   return false;
  final PsiParameter[] parameters=method.getParameterList().getParameters();
  if (parameters.length == 0)   return false;
  if (qualifierType == null)   return true;
  PsiType selfType=parameters[0].getType();
  if (selfType instanceof PsiPrimitiveType)   return false;
  if (substitutor != null) {
    selfType=substitutor.substitute(selfType);
  }
  final GlobalSearchScope scope=method.getResolveScope();
  final Project project=method.getProject();
  final PsiManager manager=method.getManager();
  if (selfType instanceof PsiClassType && ((PsiClassType)selfType).rawType().equalsToText(CommonClassNames.JAVA_LANG_CLASS) && place instanceof GrReferenceExpression&& ((GrReferenceExpression)place).resolve() instanceof PsiClass) {
    return TypesUtil.isAssignable(selfType,TypesUtil.createJavaLangClassType(qualifierType,project,scope),manager,scope);
  }
  return TypesUtil.isAssignable(selfType,qualifierType,manager,scope);
}
