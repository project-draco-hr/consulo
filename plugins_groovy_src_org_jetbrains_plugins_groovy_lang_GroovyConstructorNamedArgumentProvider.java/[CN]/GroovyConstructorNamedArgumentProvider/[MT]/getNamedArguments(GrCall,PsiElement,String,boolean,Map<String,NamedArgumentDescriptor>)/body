{
  if (!(call instanceof GrNewExpression))   return;
  if (resolve != null) {
    if (!(resolve instanceof PsiMethod))     return;
    PsiMethod method=(PsiMethod)resolve;
    if (!method.isConstructor())     return;
  }
  GrNewExpression newCall=(GrNewExpression)call;
  GrArgumentList argumentList=newCall.getArgumentList();
  if (argumentList == null)   return;
  GrExpression[] expressionArguments=argumentList.getExpressionArguments();
  if (expressionArguments.length > 1 || (expressionArguments.length == 1 && !(expressionArguments[0] instanceof GrReferenceExpression))) {
    return;
  }
  for (  GroovyResolveResult resolveResult : newCall.multiResolveClass()) {
    PsiElement element=resolveResult.getElement();
    if (!(element instanceof PsiClass))     continue;
    PsiClass aClass=(PsiClass)element;
    if (!isClassHasConstructorWithMap(aClass))     continue;
    PsiClassType classType=JavaPsiFacade.getElementFactory(aClass.getProject()).createType(aClass);
    processClass(call,classType,argumentName,result);
  }
}
