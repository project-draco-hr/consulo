{
  if (argumentName == null) {
    final HashMap<String,Trinity<PsiType,PsiElement,PsiSubstitutor>> map=ContainerUtil.newHashMap();
    MyPsiScopeProcessor processor=new MyPsiScopeProcessor(){
      @Override protected void addNamedArgument(      String propertyName,      PsiType type,      PsiElement element,      PsiSubstitutor substitutor){
        if (result.containsKey(propertyName))         return;
        Trinity<PsiType,PsiElement,PsiSubstitutor> pair=map.get(propertyName);
        if (pair != null) {
          if (element instanceof PsiMethod && pair.second instanceof PsiField) {
          }
 else {
            return;
          }
        }
        map.put(propertyName,Trinity.create(type,element,substitutor));
      }
    }
;
    processor.setResolveTargetKinds(ResolverProcessor.RESOLVE_KINDS_METHOD_PROPERTY);
    ResolveUtil.processAllDeclarations(type,processor,ResolveState.initial(),call);
    for (    Map.Entry<String,Trinity<PsiType,PsiElement,PsiSubstitutor>> entry : map.entrySet()) {
      result.put(entry.getKey(),new NamedArgumentDescriptor.TypeCondition(entry.getValue().first,entry.getValue().getSecond(),entry.getValue().getThird()).setPriority(Priority.AS_LOCAL_VARIABLE));
    }
  }
 else {
    MyPsiScopeProcessor processor=new MyPsiScopeProcessor(){
      @Override protected void addNamedArgument(      String propertyName,      PsiType type,      PsiElement element,      PsiSubstitutor substitutor){
        if (result.containsKey(propertyName))         return;
        result.put(propertyName,new NamedArgumentDescriptor.TypeCondition(type,element,substitutor).setPriority(Priority.AS_LOCAL_VARIABLE));
      }
    }
;
    processor.setResolveTargetKinds(ResolverProcessor.RESOLVE_KINDS_METHOD);
    processor.setNameHint(GroovyPropertyUtils.getSetterName(argumentName));
    ResolveUtil.processAllDeclarations(type,processor,ResolveState.initial(),call);
    processor.setResolveTargetKinds(ResolverProcessor.RESOLVE_KINDS_PROPERTY);
    processor.setNameHint(argumentName);
    ResolveUtil.processAllDeclarations(type,processor,ResolveState.initial(),call);
  }
}
