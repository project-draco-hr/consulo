{
  if (argumentName == null) {
    final HashMap<String,Pair<PsiType,PsiElement>> map=new HashMap<String,Pair<PsiType,PsiElement>>();
    MyPsiScopeProcessor processor=new MyPsiScopeProcessor(){
      @Override protected void addNamedArgument(      String propertyName,      PsiType type,      PsiElement element){
        if (result.containsKey(propertyName))         return;
        Pair<PsiType,PsiElement> pair=map.get(propertyName);
        if (pair != null) {
          if (!(element instanceof PsiMethod) && !(element instanceof PsiField)) {
            return;
          }
        }
        map.put(propertyName,Pair.create(type,element));
      }
    }
;
    processor.setResolveTargetKinds(ResolverProcessor.RESOLVE_KINDS_METHOD_PROPERTY);
    ResolveUtil.processAllDeclarations(type,processor,ResolveState.initial(),call);
    for (    Map.Entry<String,Pair<PsiType,PsiElement>> entry : map.entrySet()) {
      result.put(entry.getKey(),new NamedArgumentDescriptor.TypeCondition(entry.getValue().first,entry.getValue().getSecond()).setPriority(Priority.AS_LOCAL_VARIABLE));
    }
  }
 else {
    MyPsiScopeProcessor processor=new MyPsiScopeProcessor(){
      @Override protected void addNamedArgument(      String propertyName,      PsiType type,      PsiElement element){
        if (result.containsKey(propertyName))         return;
        result.put(propertyName,new NamedArgumentDescriptor.TypeCondition(type,element).setPriority(Priority.AS_LOCAL_VARIABLE));
      }
    }
;
    processor.setResolveTargetKinds(ResolverProcessor.RESOLVE_KINDS_METHOD);
    processor.setNameHint(GroovyPropertyUtils.getSetterName(argumentName));
    ResolveUtil.processAllDeclarations(type,processor,ResolveState.initial(),call);
    processor.setResolveTargetKinds(ResolverProcessor.RESOLVE_KINDS_PROPERTY);
    processor.setNameHint(argumentName);
    ResolveUtil.processAllDeclarations(type,processor,ResolveState.initial(),call);
  }
}
