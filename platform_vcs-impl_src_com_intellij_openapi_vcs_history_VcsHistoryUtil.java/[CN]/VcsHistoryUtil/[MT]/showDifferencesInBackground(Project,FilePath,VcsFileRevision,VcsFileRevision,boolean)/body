{
  new Task.Backgroundable(project,"Loading revisions to compare"){
    @Override public void run(    @NotNull ProgressIndicator indicator){
      VcsFileRevision left=revision1;
      VcsFileRevision right=revision2;
      if (findOlderNewer) {
        Pair<VcsFileRevision,VcsFileRevision> pair=sortRevisions(revision1,revision2);
        left=pair.first;
        right=pair.second;
      }
      try {
        final String leftTitle=left.getRevisionNumber().asString() + (left instanceof CurrentRevision ? " (" + VcsBundle.message("diff.title.local") + ")" : "");
        final String rightTitle=right.getRevisionNumber().asString() + (right instanceof CurrentRevision ? " (" + VcsBundle.message("diff.title.local") + ")" : "");
        showDiff(project,filePath,left,right,leftTitle,rightTitle);
      }
 catch (      final VcsException e) {
        LOG.info(e);
        WaitForProgressToShow.runOrInvokeLaterAboveProgress(new Runnable(){
          public void run(){
            Messages.showErrorDialog(VcsBundle.message("message.text.cannot.show.differences",e.getLocalizedMessage()),VcsBundle.message("message.title.show.differences"));
          }
        }
,null,project);
      }
catch (      IOException e) {
        LOG.info(e);
      }
catch (      ProcessCanceledException ex) {
        LOG.info(ex);
      }
    }
  }
.queue();
}
