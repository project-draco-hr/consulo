{
  final byte[] content1=loadRevisionContent(revision1);
  final byte[] content2=loadRevisionContent(revision2);
  final SimpleDiffRequest diffData=new SimpleDiffRequest(project,filePath.getPresentableUrl());
  diffData.addHint(DiffTool.HINT_SHOW_FRAME);
  final Document doc=filePath.getDocument();
  final Charset charset=filePath.getCharset();
  final FileType fileType=filePath.getFileType();
  diffData.setContentTitles(title1,title2);
  final Ref<VirtualFile> f1=new Ref<VirtualFile>(null);
  final Ref<VirtualFile> f2=new Ref<VirtualFile>(null);
  if (fileType.isBinary()) {
    final File file1=FileUtil.createTempFile(revision1.getRevisionNumber().asString(),filePath.getName());
    final File file2=FileUtil.createTempFile(revision2.getRevisionNumber().asString(),filePath.getName());
    try {
      final FileOutputStream fos1=new FileOutputStream(file1);
      fos1.write(content1);
      final FileOutputStream fos2=new FileOutputStream(file2);
      fos2.write(content2);
      fos1.close();
      fos2.close();
      f1.set(LocalFileSystem.getInstance().findFileByIoFile(file1));
      f2.set(LocalFileSystem.getInstance().findFileByIoFile(file2));
    }
 catch (    Exception e) {
    }
  }
  if (f1.isNull() || f2.isNull()) {
    diffData.setContents(createContent(project,content1,revision1,doc,charset,fileType,filePath.getPath()),createContent(project,content2,revision2,doc,charset,fileType,filePath.getPath()));
  }
 else {
    diffData.setContents(new FileContent(project,f1.get()),new FileContent(project,f2.get()));
  }
  WaitForProgressToShow.runOrInvokeLaterAboveProgress(new Runnable(){
    public void run(){
      DiffManager.getInstance().getDiffTool().show(diffData);
      if (!f1.isNull() || !f2.isNull()) {
        Disposer.register(project,new Disposable(){
          @Override public void dispose(){
            ApplicationManager.getApplication().runWriteAction(new Runnable(){
              public void run(){
                try {
                  if (!f1.isNull()) {
                    f1.get().delete(this);
                  }
                  if (!f2.isNull()) {
                    f2.get().delete(this);
                  }
                }
 catch (                IOException e) {
                }
              }
            }
);
          }
        }
);
      }
    }
  }
,null,project);
}
