{
  if (!editor.getSelectionModel().hasSelection()) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("no.selection"));
    CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,message,HelpID.EXTRACT_INCLUDE,project);
    return;
  }
  final int start=editor.getSelectionModel().getSelectionStart();
  final int end=editor.getSelectionModel().getSelectionEnd();
  final Pair<XmlTagChild,XmlTagChild> children=XmlUtil.findTagChildrenInRange(myIncludingFile,start,end);
  if (children == null) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("selection.does.not.form.a.fragment.for.extraction"));
    CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,message,HelpID.EXTRACT_INCLUDE,project);
    return;
  }
  if (!verifyChildRange(children.getFirst(),children.getSecond())) {
    String message=RefactoringBundle.getCannotRefactorMessage(RefactoringBundle.message("cannot.extract.selected.elements.into.include.file"));
    CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,message,HelpID.EXTRACT_INCLUDE,project);
    return;
  }
  final FileType fileType=getFileType(getLanguageForExtract(children.getFirst()));
  if (!(fileType instanceof LanguageFileType)) {
    String message=RefactoringBundle.message("the.language.for.selected.elements.has.no.associated.file.type");
    CommonRefactoringUtil.showErrorMessage(REFACTORING_NAME,message,HelpID.EXTRACT_INCLUDE,project);
    return;
  }
  if (!CommonRefactoringUtil.checkReadOnlyStatus(project,file))   return;
  ExtractIncludeDialog dialog=new ExtractIncludeDialog(file.getContainingDirectory(),getExtractExtension(fileType));
  dialog.show();
  if (dialog.getExitCode() == DialogWrapper.OK_EXIT_CODE) {
    final PsiDirectory targetDirectory=dialog.getTargetDirectory();
    LOG.assertTrue(targetDirectory != null);
    final String targetfileName=dialog.getTargetFileName();
    CommandProcessor.getInstance().executeCommand(project,new Runnable(){
      public void run(){
        ApplicationManager.getApplication().runWriteAction(new Runnable(){
          public void run(){
            try {
              final List<Pair<PsiElement,PsiElement>> duplicates=new ArrayList<Pair<PsiElement,PsiElement>>();
              final XmlTagChild first=children.getFirst();
              final XmlTagChild second=children.getSecond();
              PsiEquivalenceUtil.findChildRangeDuplicates(first,second,duplicates,file);
              final String includePath=processPrimaryFragment(first,second,targetDirectory,targetfileName,file);
              ApplicationManager.getApplication().invokeLater(new Runnable(){
                public void run(){
                  replaceDuplicates(includePath,duplicates,editor,project);
                }
              }
);
            }
 catch (            IncorrectOperationException e) {
              LOG.error(e);
            }
            editor.getSelectionModel().removeSelection();
          }
        }
);
      }
    }
,REFACTORING_NAME,null);
  }
}
