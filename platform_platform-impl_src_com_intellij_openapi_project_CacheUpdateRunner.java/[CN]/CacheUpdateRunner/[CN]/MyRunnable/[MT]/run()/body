{
  while (true) {
    if (myProject.isDisposed())     return;
    if (myInnerIndicator.isCanceled())     return;
    final FileContent fileContent=myQueue.take();
    if (fileContent == null) {
      myFinished.set(Boolean.TRUE);
      return;
    }
    try {
      final Runnable action=new Runnable(){
        public void run(){
          myInnerIndicator.checkCanceled();
          if (myProject.isDisposed())           return;
          final VirtualFile file=fileContent.getVirtualFile();
          myProgressUpdater.consume(file);
          mySession.processFile(fileContent);
        }
      }
;
      if (myProcessInReadAction) {
        myApplication.runReadAction(action);
      }
 else {
        action.run();
      }
    }
 catch (    ProcessCanceledException e) {
      myQueue.pushback(fileContent);
      return;
    }
 finally {
      if (fileContent != null) {
        myQueue.release(fileContent);
      }
    }
  }
}
