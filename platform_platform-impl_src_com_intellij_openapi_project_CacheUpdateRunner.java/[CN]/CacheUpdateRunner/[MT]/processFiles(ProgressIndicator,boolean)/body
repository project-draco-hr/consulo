{
  FileContentQueue queue=new FileContentQueue();
  try {
    Collection<VirtualFile> files=mySession.getFilesToUpdate();
    final double total=files.size();
    queue.queue(files,indicator);
    Consumer<VirtualFile> progressUpdater=new Consumer<VirtualFile>(){
      Set<VirtualFile> processed=new THashSet<VirtualFile>();
      public void consume(      VirtualFile virtualFile){
        indicator.checkCanceled();
        indicator.setFraction(processed.size() / total);
        processed.add(virtualFile);
        indicator.setText2(virtualFile.getPresentableUrl());
      }
    }
;
    while (!myProject.isDisposed()) {
      indicator.checkCanceled();
      if (processSomeFilesWhileUserIsInactive(queue,progressUpdater,mySession,processInReadAction))       break;
    }
    if (myProject.isDisposed()) {
      indicator.cancel();
      indicator.checkCanceled();
    }
  }
 catch (  ProcessCanceledException e) {
    mySession.canceled();
    throw e;
  }
}
