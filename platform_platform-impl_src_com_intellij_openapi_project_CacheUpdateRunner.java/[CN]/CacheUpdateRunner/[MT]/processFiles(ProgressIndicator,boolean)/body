{
  try {
    indicator.checkCanceled();
    final FileContentQueue queue=new FileContentQueue();
    Collection<VirtualFile> files=mySession.getFilesToUpdate();
    final double total=files.size();
    queue.queue(files,indicator);
    Consumer<VirtualFile> progressUpdater=new Consumer<VirtualFile>(){
      final Set<VirtualFile> processed=new THashSet<VirtualFile>();
      @Override public void consume(      VirtualFile virtualFile){
        indicator.checkCanceled();
synchronized (processed) {
          processed.add(virtualFile);
          indicator.setFraction(processed.size() / total);
          int percent=(int)(processed.size() * 100 / total);
          indicator.setText("Indexing... " + percent + "%");
          if (ApplicationManager.getApplication().isInternal()) {
            if (virtualFile.isValid()) {
              indicator.setText2(virtualFile.getPresentableUrl());
            }
 else {
              indicator.setText2("");
            }
          }
        }
      }
    }
;
    while (!myProject.isDisposed()) {
      indicator.checkCanceled();
      if (processSomeFilesWhileUserIsInactive(queue,progressUpdater,processInReadAction)) {
        break;
      }
    }
    if (myProject.isDisposed()) {
      indicator.cancel();
      indicator.checkCanceled();
    }
  }
 catch (  ProcessCanceledException e) {
    mySession.canceled();
    throw e;
  }
}
