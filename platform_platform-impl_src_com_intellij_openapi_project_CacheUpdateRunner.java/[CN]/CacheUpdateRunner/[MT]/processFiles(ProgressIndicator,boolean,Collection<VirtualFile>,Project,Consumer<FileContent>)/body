{
  indicator.checkCanceled();
  final FileContentQueue queue=new FileContentQueue();
  final double total=files.size();
  queue.queue(files,indicator);
  Consumer<VirtualFile> progressUpdater=new Consumer<VirtualFile>(){
    final Set<VirtualFile> processed=new THashSet<VirtualFile>();
    private boolean fileNameWasShownAfterRestart;
    @Override public void consume(    VirtualFile virtualFile){
      indicator.checkCanceled();
synchronized (processed) {
        boolean added=processed.add(virtualFile);
        indicator.setFraction(processed.size() / total);
        if (!added) {
          indicator.setText2(virtualFile.getPresentableUrl());
          fileNameWasShownAfterRestart=true;
        }
 else         if (fileNameWasShownAfterRestart) {
          indicator.setText2("");
          fileNameWasShownAfterRestart=false;
        }
      }
    }
  }
;
  while (!project.isDisposed()) {
    indicator.checkCanceled();
    if (processSomeFilesWhileUserIsInactive(queue,progressUpdater,processInReadAction,project,processor)) {
      break;
    }
  }
  if (project.isDisposed()) {
    indicator.cancel();
    indicator.checkCanceled();
  }
}
