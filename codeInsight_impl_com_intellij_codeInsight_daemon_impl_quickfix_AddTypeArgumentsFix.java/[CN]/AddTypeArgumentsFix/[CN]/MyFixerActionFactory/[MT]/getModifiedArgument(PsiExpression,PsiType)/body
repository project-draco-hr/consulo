{
  if (PsiUtil.getLanguageLevel(expression).compareTo(LanguageLevel.JDK_1_5) < 0)   return null;
  if (expression instanceof PsiMethodCallExpression) {
    final PsiMethodCallExpression methodCall=(PsiMethodCallExpression)expression;
    final PsiReferenceParameterList list=methodCall.getMethodExpression().getParameterList();
    if (list == null || list.getTypeArguments().length > 0)     return null;
    final JavaResolveResult resolveResult=methodCall.resolveMethodGenerics();
    final PsiElement element=resolveResult.getElement();
    if (element instanceof PsiMethod) {
      final PsiMethod method=(PsiMethod)element;
      final PsiType returnType=method.getReturnType();
      if (returnType == null)       return null;
      final PsiTypeParameter[] typeParameters=method.getTypeParameters();
      if (typeParameters.length > 0) {
        PsiType[] mappings=new PsiType[typeParameters.length];
        PsiResolveHelper helper=expression.getManager().getResolveHelper();
        LanguageLevel level=PsiUtil.getLanguageLevel(expression);
        for (int i=0; i < typeParameters.length; i++) {
          PsiTypeParameter typeParameter=typeParameters[i];
          final PsiType substitution=helper.getSubstitutionForTypeParameter(typeParameter,returnType,toType,false,level);
          if (substitution == null || PsiType.NULL.equals(substitution))           return null;
          mappings[i]=substitution;
        }
        final PsiElementFactory factory=expression.getManager().getElementFactory();
        PsiMethodCallExpression copy=(PsiMethodCallExpression)expression.copy();
        final PsiReferenceParameterList parameterList=copy.getMethodExpression().getParameterList();
        LOG.assertTrue(parameterList != null);
        for (        PsiType mapping : mappings) {
          parameterList.add(factory.createTypeElement(mapping));
        }
        return copy;
      }
    }
  }
  return null;
}
