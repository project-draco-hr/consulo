{
  super(new BorderLayout());
  myContent=content;
  myFocusedComponent=focusedComponent;
  myContentSplitter=contentSplitter;
  myAnchor=anchor;
  myProject=project;
  myManager=manager;
  myPropertiesComponent=propertiesComponent;
  myShowStateKey=AbstractToolWindowManager.EDITOR_MODE + key + ".SHOW";
  myWidthKey=AbstractToolWindowManager.EDITOR_MODE + key + ".WIDTH";
  HeaderPanel header=new HeaderPanel();
  header.setLayout(new BorderLayout());
  add(header,BorderLayout.NORTH);
  JLabel titleLabel=new JLabel(title);
  titleLabel.setBorder(IdeBorderFactory.createEmptyBorder(2,5,2,10));
  titleLabel.setFont(UIUtil.getLabelFont(UIUtil.FontSize.SMALL));
  header.add(titleLabel,BorderLayout.CENTER);
  JPanel actionPanel=new JPanel(new FlowLayout(FlowLayout.CENTER,5,0));
  actionPanel.setBorder(IdeBorderFactory.createEmptyBorder(3,0,2,0));
  actionPanel.setOpaque(false);
  header.add(actionPanel,BorderLayout.EAST);
  if (actions != null) {
    for (    AnAction action : actions) {
      addAction(actionPanel,action);
    }
    actionPanel.add(new JLabel(AllIcons.General.Divider));
  }
  addAction(actionPanel,new GearAction());
  addAction(actionPanel,new HideAction());
  JPanel contentWrapper=new JPanel(new BorderLayout());
  contentWrapper.setBorder(IdeBorderFactory.createBorder(SideBorder.TOP));
  contentWrapper.add(component,BorderLayout.CENTER);
  add(contentWrapper,BorderLayout.CENTER);
  addMouseListener(new MouseAdapter(){
    public void mouseReleased(    final MouseEvent e){
      IdeFocusManager.getInstance(myProject).requestFocus(myFocusedComponent,true);
    }
  }
);
  addMouseListener(new PopupHandler(){
    public void invokePopup(    Component component,    int x,    int y){
      showGearPopup(component,x,y);
    }
  }
);
  myMinimizeButton=new AnchoredButton(title,icon){
    @Override public void updateUI(){
      setUI(StripeButtonUI.createUI(this));
      setFont(UIUtil.getLabelFont(UIUtil.FontSize.SMALL));
    }
    @Override public int getMnemonic2(){
      return 0;
    }
    @Override public ToolWindowAnchor getAnchor(){
      return myAnchor;
    }
  }
;
  myMinimizeButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      myMinimizeButton.setSelected(false);
      updateContent(true,true);
    }
  }
);
  myMinimizeButton.setBorder(BorderFactory.createEmptyBorder(5,5,0,5));
  myMinimizeButton.setFocusable(false);
  myMinimizeButton.setRolloverEnabled(true);
  myMinimizeButton.setOpaque(false);
  myMinimizeComponent=new JPanel(){
    @Override public void doLayout(){
      Dimension size=myMinimizeButton.getPreferredSize();
      myMinimizeButton.setBounds(0,0,getWidth(),size.height);
    }
  }
;
  myMinimizeComponent.add(myMinimizeButton);
  configureBorder();
  configureWidth(defaultWidth);
  updateContent(myPropertiesComponent.getBoolean(myShowStateKey,true),false);
}
