{
  if (!PsiUtil.isAccessible(hierarchicalMethodSignature.getMethod(),aClass,aClass))   return;
  HierarchicalMethodSignatureImpl existing=map.get(signature);
  if (existing == null) {
    HierarchicalMethodSignatureImpl copy=copy(hierarchicalMethodSignature);
    LOG.assertTrue(copy.getMethod().isValid());
    map.put(signature,copy);
  }
 else   if (isReturnTypeIsMoreSpecificThan(hierarchicalMethodSignature,existing) && isSuperMethod(aClass,hierarchicalMethodSignature,existing)) {
    HierarchicalMethodSignatureImpl newSuper=copy(hierarchicalMethodSignature);
    mergeSupers(newSuper,existing);
    LOG.assertTrue(newSuper.getMethod().isValid());
    map.put(signature,newSuper);
  }
 else   if (isSuperMethod(aClass,existing,hierarchicalMethodSignature)) {
    mergeSupers(existing,hierarchicalMethodSignature);
  }
 else   if (!result.containsKey(signature)) {
    LOG.assertTrue(hierarchicalMethodSignature.getMethod().isValid());
    result.put(signature,hierarchicalMethodSignature);
  }
}
