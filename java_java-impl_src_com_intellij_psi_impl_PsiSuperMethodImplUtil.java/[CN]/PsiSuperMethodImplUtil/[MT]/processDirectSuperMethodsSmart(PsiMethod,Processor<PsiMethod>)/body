{
  PsiClass aClass=method.getContainingClass();
  if (aClass == null)   return false;
  if (!canHaveSuperMethod(method,true,false))   return false;
  Map<MethodSignature,HierarchicalMethodSignature> cachedMap=SIGNATURES_KEY.getCachedValueOrNull(aClass);
  if (cachedMap != null) {
    HierarchicalMethodSignature signature=cachedMap.get(method.getSignature(PsiSubstitutor.EMPTY));
    if (signature != null) {
      List<HierarchicalMethodSignature> superSignatures=signature.getSuperSignatures();
      for (      HierarchicalMethodSignature superSignature : superSignatures) {
        if (!superMethodProcessor.process(superSignature.getMethod()))         return false;
      }
      return true;
    }
  }
  PsiClassType[] directSupers=aClass.getSuperTypes();
  for (  PsiClassType directSuper : directSupers) {
    PsiClassType.ClassResolveResult resolveResult=directSuper.resolveGenerics();
    if (resolveResult.getSubstitutor() != PsiSubstitutor.EMPTY) {
      break;
    }
    PsiClass directSuperClass=resolveResult.getElement();
    if (directSuperClass == null)     continue;
    PsiMethod[] candidates=directSuperClass.findMethodsBySignature(method,false);
    for (    PsiMethod candidate : candidates) {
      if (PsiUtil.canBeOverriden(candidate)) {
        if (!superMethodProcessor.process(candidate))         return false;
      }
    }
    return true;
  }
  List<HierarchicalMethodSignature> superSignatures=method.getHierarchicalMethodSignature().getSuperSignatures();
  for (  HierarchicalMethodSignature superSignature : superSignatures) {
    if (!superMethodProcessor.process(superSignature.getMethod()))     return false;
  }
  return true;
}
