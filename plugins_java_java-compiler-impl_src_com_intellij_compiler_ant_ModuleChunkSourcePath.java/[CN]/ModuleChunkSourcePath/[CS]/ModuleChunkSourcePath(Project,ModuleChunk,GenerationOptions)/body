{
  final Path sourcePath=new Path(BuildProperties.getSourcepathProperty(chunk.getName()));
  final Path testSourcePath=new Path(BuildProperties.getTestSourcepathProperty(chunk.getName()));
  final PatternSet excludedFromCompilation=new PatternSet(BuildProperties.getExcludedFromCompilationProperty(chunk.getName()));
  final String moduleChunkBasedirProperty=BuildProperties.getModuleChunkBasedirProperty(chunk);
  final Module[] modules=chunk.getModules();
  if (CompilerExcludes.isAvailable(project)) {
    excludedFromCompilation.add(new PatternSetRef(BuildProperties.PROPERTY_COMPILER_EXCLUDES));
  }
  final List<VirtualFile> sourceRootFiles=new ArrayList<VirtualFile>();
  final List<VirtualFile> testSourceRootFiles=new ArrayList<VirtualFile>();
  for (  final Module module : modules) {
    final String moduleName=module.getName();
    final ModuleRootManager rootManager=ModuleRootManager.getInstance(module);
    final ModuleFileIndex moduleFileIndex=rootManager.getFileIndex();
    final PatternSet excludedFromModule=new PatternSet(BuildProperties.getExcludedFromModuleProperty(moduleName));
    excludedFromModule.add(new PatternSetRef(BuildProperties.PROPERTY_IGNORED_FILES));
    final ContentEntry[] contentEntries=rootManager.getContentEntries();
    for (    final ContentEntry contentEntry : contentEntries) {
      final VirtualFile file=contentEntry.getFile();
      if (file == null) {
        continue;
      }
      if (!file.isInLocalFileSystem()) {
        continue;
      }
      final VirtualFile dirSetRoot=getDirSetRoot(contentEntry);
      final String dirSetRootRelativeToBasedir=GenerationUtils.toRelativePath(dirSetRoot,chunk.getBaseDir(),moduleChunkBasedirProperty,genOptions);
      final DirSet sourcesDirSet=new DirSet(dirSetRootRelativeToBasedir);
      final DirSet testSourcesDirSet=new DirSet(dirSetRootRelativeToBasedir);
      final VirtualFile[] sourceRoots=contentEntry.getSourceFolderFiles();
      for (      final VirtualFile root : sourceRoots) {
        if (!moduleFileIndex.isInContent(root)) {
          continue;
        }
        addExcludePatterns(module,root,root,excludedFromModule,true);
        final Include include=new Include(VfsUtilCore.getRelativePath(root,dirSetRoot,'/'));
        if (moduleFileIndex.isInTestSourceContent(root)) {
          testSourcesDirSet.add(include);
          testSourceRootFiles.add(root);
        }
 else {
          sourcesDirSet.add(include);
          sourceRootFiles.add(root);
        }
      }
      if (sourcesDirSet.getGeneratorCount() > 0) {
        sourcePath.add(sourcesDirSet);
      }
      if (testSourcesDirSet.getGeneratorCount() > 0) {
        testSourcePath.add(testSourcesDirSet);
      }
    }
    if (excludedFromModule.getGeneratorCount() > 0) {
      add(excludedFromModule);
      excludedFromCompilation.add(new PatternSetRef(BuildProperties.getExcludedFromModuleProperty(moduleName)));
    }
  }
  mySourceRoots=VfsUtilCore.toVirtualFileArray(sourceRootFiles);
  myTestSourceRoots=VfsUtilCore.toVirtualFileArray(testSourceRootFiles);
  if (excludedFromCompilation.getGeneratorCount() > 0) {
    add(excludedFromCompilation,1);
  }
  if (sourcePath.getGeneratorCount() > 0) {
    add(sourcePath,1);
  }
  if (testSourcePath.getGeneratorCount() != 0) {
    add(testSourcePath,1);
  }
}
