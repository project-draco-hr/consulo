{
  myFixture.configureByFile("/refactoring/changeSignatureGesture/" + getTestName(false) + ".java");
  final ChangeSignatureGestureDetector detector=ChangeSignatureGestureDetector.getInstance(getProject());
  final Document document=myFixture.getEditor().getDocument();
  try {
    PsiManager.getInstance(getProject()).addPsiTreeChangeListener(detector);
    detector.addDocListener(document);
    new WriteCommandAction.Simple(getProject()){
      @Override protected void run() throws Throwable {
        run.run();
      }
    }
.execute().throwException();
    myFixture.doHighlighting();
    final String hint=ChangeSignatureDetectorAction.CHANGE_SIGNATURE;
    if (shouldShow) {
      final IntentionAction intention=myFixture.findSingleIntention(hint);
      myFixture.launchAction(intention);
      myFixture.checkResultByFile("/refactoring/changeSignatureGesture/" + getTestName(false) + "_after.java");
    }
 else {
      final List<IntentionAction> intentionActions=myFixture.filterAvailableIntentions(hint);
      Assert.assertEquals(true,intentionActions.isEmpty());
    }
  }
  finally {
    detector.removeDocListener(document);
    PsiManager.getInstance(getProject()).removePsiTreeChangeListener(detector);
  }
}
