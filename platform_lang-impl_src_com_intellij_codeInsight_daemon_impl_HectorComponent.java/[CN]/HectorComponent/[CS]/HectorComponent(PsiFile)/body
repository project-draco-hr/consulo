{
  super(new GridBagLayout());
  myFile=file;
  mySliders=new HashMap<Language,JSlider>();
  final Project project=myFile.getProject();
  final ProjectFileIndex fileIndex=ProjectRootManager.getInstance(project).getFileIndex();
  final VirtualFile virtualFile=myFile.getContainingFile().getVirtualFile();
  LOG.assertTrue(virtualFile != null);
  final boolean notInLibrary=!fileIndex.isInLibrarySource(virtualFile) && !fileIndex.isInLibraryClasses(virtualFile) || fileIndex.isInContent(virtualFile);
  final FileViewProvider viewProvider=myFile.getViewProvider();
  final Set<Language> languages=viewProvider.getLanguages();
  for (  Language language : languages) {
    final Hashtable<Integer,JLabel> sliderLabels=new Hashtable<Integer,JLabel>();
    sliderLabels.put(1,new JLabel(EditorBundle.message("hector.none.slider.label")));
    sliderLabels.put(2,new JLabel(EditorBundle.message("hector.syntax.slider.label")));
    if (notInLibrary) {
      sliderLabels.put(3,new JLabel(EditorBundle.message("hector.inspections.slider.label")));
    }
    final JSlider slider=new JSlider(SwingConstants.VERTICAL,1,notInLibrary ? 3 : 2,1);
    slider.setLabelTable(sliderLabels);
    final boolean value=true;
    UIUtil.setSliderIsFilled(slider,value);
    slider.setPaintLabels(true);
    slider.setSnapToTicks(true);
    slider.addChangeListener(new ChangeListener(){
      public void stateChanged(      ChangeEvent e){
        int value=slider.getValue();
        for (Enumeration<Integer> enumeration=sliderLabels.keys(); enumeration.hasMoreElements(); ) {
          Integer key=enumeration.nextElement();
          sliderLabels.get(key).setForeground(key.intValue() <= value ? Color.black : new Color(100,100,100));
        }
      }
    }
);
    final PsiFile psiRoot=viewProvider.getPsi(language);
    slider.setValue(getValue(HighlightLevelUtil.shouldHighlight(psiRoot),HighlightLevelUtil.shouldInspect(psiRoot)));
    mySliders.put(language,slider);
  }
  final DaemonCodeAnalyzer analyzer=DaemonCodeAnalyzer.getInstance(myFile.getProject());
  GridBagConstraints gc=new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,0,0,GridBagConstraints.NORTHWEST,GridBagConstraints.NONE,new Insets(0,0,0,0),0,0);
  JPanel panel=new JPanel(new GridBagLayout());
  panel.setBorder(IdeBorderFactory.createTitledBorder(myTitle));
  final boolean addLabel=mySliders.size() > 1;
  if (addLabel) {
    layoutVertical(panel);
  }
 else {
    layoutHorizontal(panel);
  }
  gc.gridx=0;
  gc.gridy=2;
  gc.weighty=1.0;
  gc.fill=GridBagConstraints.BOTH;
  add(panel,gc);
  gc.gridy=GridBagConstraints.RELATIVE;
  gc.weighty=0;
  myAdditionalPanels=new ArrayList<HectorComponentPanel>();
  for (  HectorComponentPanelsProvider provider : Extensions.getExtensions(HectorComponentPanelsProvider.EP_NAME,project)) {
    final HectorComponentPanel componentPanel=provider.createConfigurable(file);
    if (componentPanel != null) {
      myAdditionalPanels.add(componentPanel);
      add(componentPanel.createComponent(),gc);
      componentPanel.reset();
    }
  }
}
