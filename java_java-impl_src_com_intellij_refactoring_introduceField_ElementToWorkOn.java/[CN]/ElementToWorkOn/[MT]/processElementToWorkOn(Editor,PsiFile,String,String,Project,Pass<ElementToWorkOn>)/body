{
  PsiLocalVariable localVar=null;
  PsiExpression expr=null;
  if (!editor.getSelectionModel().hasSelection()) {
    PsiElement element=TargetElementUtilBase.findTargetElement(editor,TargetElementUtilBase.ELEMENT_NAME_ACCEPTED | TargetElementUtilBase.REFERENCED_ELEMENT_ACCEPTED | TargetElementUtilBase.LOOKUP_ITEM_ACCEPTED);
    if (element instanceof PsiLocalVariable) {
      localVar=(PsiLocalVariable)element;
      PsiElement elementAt=file.findElementAt(editor.getCaretModel().getOffset());
      if (elementAt instanceof PsiWhiteSpace) {
        elementAt=PsiTreeUtil.skipSiblingsBackward(elementAt,PsiWhiteSpace.class);
      }
      if (elementAt instanceof PsiReferenceExpression) {
        expr=(PsiExpression)elementAt;
      }
 else       if (elementAt instanceof PsiIdentifier && elementAt.getParent() instanceof PsiReferenceExpression) {
        expr=(PsiExpression)elementAt.getParent();
      }
    }
 else {
      final PsiLocalVariable variable=PsiTreeUtil.getParentOfType(file.findElementAt(editor.getCaretModel().getOffset()),PsiLocalVariable.class);
      final int offset=editor.getCaretModel().getOffset();
      final PsiElement[] statementsInRange=IntroduceVariableBase.findStatementsAtOffset(editor,file,offset);
      if (statementsInRange.length == 1 && (PsiUtil.hasErrorElementChild(statementsInRange[0]) || !PsiUtil.isStatement(statementsInRange[0]))) {
        editor.getSelectionModel().selectLineAtCaret();
        final ElementToWorkOn elementToWorkOn=getElementToWorkOn(editor,file,refactoringName,helpId,project,localVar,expr);
        if (elementToWorkOn == null || elementToWorkOn.getLocalVariable() == null && elementToWorkOn.getExpression() == null) {
          editor.getSelectionModel().removeSelection();
        }
      }
      if (!editor.getSelectionModel().hasSelection()) {
        final List<PsiExpression> expressions=IntroduceVariableBase.collectExpressions(file,editor,offset,statementsInRange);
        if (expressions.isEmpty()) {
          editor.getSelectionModel().selectLineAtCaret();
        }
 else         if (expressions.size() == 1) {
          expr=expressions.get(0);
        }
 else {
          IntroduceTargetChooser.showChooser(editor,expressions,new Pass<PsiExpression>(){
            @Override public void pass(            final PsiExpression selectedValue){
              PsiLocalVariable var=null;
              if (variable != null && variable.getInitializer() == selectedValue) {
                var=variable;
              }
              processor.pass(getElementToWorkOn(editor,file,refactoringName,helpId,project,var,selectedValue));
            }
          }
,new PsiExpressionTrimRenderer.RenderFunction());
          return;
        }
      }
    }
  }
  processor.pass(getElementToWorkOn(editor,file,refactoringName,helpId,project,localVar,expr));
}
