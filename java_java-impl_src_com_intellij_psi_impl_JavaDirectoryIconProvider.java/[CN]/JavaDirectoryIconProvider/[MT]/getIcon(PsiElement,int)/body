{
  if (element instanceof PsiDirectory) {
    final PsiDirectory psiDirectory=(PsiDirectory)element;
    final VirtualFile vFile=psiDirectory.getVirtualFile();
    final Project project=psiDirectory.getProject();
    boolean isJarRoot=vFile.getParent() == null && vFile.getFileSystem() instanceof JarFileSystem;
    boolean isContentRoot=ProjectRootsUtil.isModuleContentRoot(vFile,project);
    boolean inTestSource=ProjectRootsUtil.isInTestSource(vFile,project);
    boolean isSourceOrTestRoot=ProjectRootsUtil.isSourceOrTestRoot(vFile,project);
    Icon symbolIcon;
    final boolean isOpen=(flags & Iconable.ICON_FLAG_OPEN) != 0;
    if (isJarRoot) {
      symbolIcon=PlatformIcons.JAR_ICON;
    }
 else     if (isContentRoot) {
      Module module=ProjectRootManager.getInstance(project).getFileIndex().getModuleForFile(vFile);
      if (module != null) {
        symbolIcon=module.getModuleType().getNodeIcon(isOpen);
      }
 else {
        symbolIcon=isOpen ? PlatformIcons.CONTENT_ROOT_ICON_OPEN : PlatformIcons.CONTENT_ROOT_ICON_CLOSED;
      }
    }
 else     if (isSourceOrTestRoot) {
      symbolIcon=IconSet.getSourceRootIcon(inTestSource,isOpen);
    }
 else     if (JavaDirectoryService.getInstance().getPackage(psiDirectory) != null) {
      symbolIcon=isOpen ? PlatformIcons.PACKAGE_OPEN_ICON : PlatformIcons.PACKAGE_ICON;
    }
 else {
      symbolIcon=isOpen ? PlatformIcons.DIRECTORY_OPEN_ICON : PlatformIcons.DIRECTORY_CLOSED_ICON;
    }
    boolean isExcluded=ElementPresentationUtil.isExcluded(vFile,project);
    return ElementBase.createLayeredIcon(symbolIcon,isExcluded ? ElementPresentationUtil.FLAGS_EXCLUDED : 0);
  }
  return null;
}
