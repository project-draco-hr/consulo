{
  final ArrayList<TypeConstraint> result=new ArrayList<TypeConstraint>();
  for (  PsiType type : GroovyExpectedTypesProvider.getDefaultExpectedTypes(list)) {
    if (type instanceof PsiClassType) {
      for (      GroovyResolveResult resolveResult : PsiUtil.getConstructorCandidates((PsiClassType)type,argTypes,list)) {
        final PsiElement method=resolveResult.getElement();
        if (method instanceof PsiMethod && ((PsiMethod)method).isConstructor()) {
          final PsiParameter[] constructorParameters=((PsiMethod)method).getParameterList().getParameters();
          if (constructorParameters.length > argIndex) {
            final PsiType toCastTo=resolveResult.getSubstitutor().substitute(constructorParameters[argIndex].getType());
            result.add(SubtypeConstraint.create(toCastTo));
          }
        }
      }
    }
  }
  return result;
}
