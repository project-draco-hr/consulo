{
  PsiType[] argTypes=ContainerUtil.map2Array(args,PsiType.class,new NullableFunction<GrExpression,PsiType>(){
    @Override public PsiType fun(    GrExpression grExpression){
      return grExpression.getType();
    }
  }
);
  final ArrayList<TypeConstraint> result=new ArrayList<TypeConstraint>();
  for (  PsiType type : GroovyExpectedTypesProvider.getDefaultExpectedTypes(list)) {
    if (type instanceof PsiClassType) {
      for (      GroovyResolveResult resolveResult : PsiUtil.getConstructorCandidates((PsiClassType)type,argTypes,list)) {
        final PsiElement method=resolveResult.getElement();
        if (method instanceof PsiMethod && ((PsiMethod)method).isConstructor()) {
          final Map<GrExpression,Pair<PsiParameter,PsiType>> map=GrClosureSignatureUtil.mapArgumentsToParameters(resolveResult,list,false,GrNamedArgument.EMPTY_ARRAY,args,GrClosableBlock.EMPTY_ARRAY);
          if (map != null) {
            final Pair<PsiParameter,PsiType> pair=map.get(arg);
            if (pair != null) {
              result.add(SubtypeConstraint.create(pair.second));
            }
          }
        }
      }
    }
  }
  return result;
}
