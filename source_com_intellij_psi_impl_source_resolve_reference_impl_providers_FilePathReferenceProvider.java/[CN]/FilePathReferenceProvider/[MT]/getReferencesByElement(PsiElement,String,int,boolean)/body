{
  return new FileReferenceSet(text,element,offset,ReferenceType.FILE_TYPE,this,true){
    protected boolean isSoft(){
      return soft;
    }
    @NotNull public Collection<PsiFileSystemItem> computeDefaultContexts(){
      return getRoots(getElement());
    }
    protected PsiScopeProcessor createProcessor(    final List result,    List<Class> allowedClasses,    List<PsiConflictResolver> resolvers) throws ProcessorRegistry.IncompatibleReferenceTypeException {
      final PsiScopeProcessor baseProcessor=super.createProcessor(result,allowedClasses,resolvers);
      return new PsiScopeProcessor(){
        public boolean execute(        PsiElement element,        PsiSubstitutor substitutor){
          return element instanceof PsiJavaFile && element instanceof PsiCompiledElement || baseProcessor.execute(element,substitutor);
        }
        public <T>T getHint(        Class<T> hintClass){
          return baseProcessor.getHint(hintClass);
        }
        public void handleEvent(        Event event,        Object associated){
          baseProcessor.handleEvent(event,associated);
        }
      }
;
    }
  }
.getAllReferences();
}
