{
  String text=null;
  if (element instanceof PsiLiteralExpression) {
    Object value=((PsiLiteralExpression)element).getValue();
    if (value instanceof String) {
      text=(String)value;
    }
  }
  if (text == null)   return PsiReference.EMPTY_ARRAY;
  return new FileReferenceSet(text,element,1,ReferenceType.FILE_TYPE,this,true){
    protected boolean isSoft(){
      return true;
    }
    @NotNull public Collection<PsiFileSystemItem> getDefaultContexts(    PsiElement position){
      return getRoots(position);
    }
    protected PsiScopeProcessor createProcessor(    final List result,    List<Class> allowedClasses,    List<PsiConflictResolver> resolvers) throws ProcessorRegistry.IncompatibleReferenceTypeException {
      final PsiScopeProcessor baseProcessor=super.createProcessor(result,allowedClasses,resolvers);
      return new PsiScopeProcessor(){
        public boolean execute(        PsiElement element,        PsiSubstitutor substitutor){
          return element instanceof PsiJavaFile && element instanceof PsiCompiledElement || baseProcessor.execute(element,substitutor);
        }
        public <T>T getHint(        Class<T> hintClass){
          return baseProcessor.getHint(hintClass);
        }
        public void handleEvent(        Event event,        Object associated){
          baseProcessor.handleEvent(event,associated);
        }
      }
;
    }
  }
.getAllReferences();
}
