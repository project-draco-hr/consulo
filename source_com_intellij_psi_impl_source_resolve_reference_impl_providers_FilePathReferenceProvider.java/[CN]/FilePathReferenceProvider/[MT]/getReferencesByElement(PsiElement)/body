{
  PsiLiteralExpression literalExpression=(PsiLiteralExpression)element;
  final Object value=literalExpression.getValue();
  if (value instanceof String) {
    String text=(String)value;
    return new FileReferenceSet(text,literalExpression,1,ReferenceType.FILE_TYPE,this,true){
      @NotNull public Collection<PsiElement> getDefaultContexts(      PsiElement position){
        return getRoots(position);
      }
      protected PsiScopeProcessor createProcessor(      final List result,      ReferenceType type) throws ProcessorRegistry.IncompatibleReferenceTypeException {
        final PsiScopeProcessor baseProcessor=super.createProcessor(result,type);
        return new PsiScopeProcessor(){
          public boolean execute(          PsiElement element,          PsiSubstitutor substitutor){
            return element instanceof PsiJavaFile && element instanceof PsiCompiledElement || baseProcessor.execute(element,substitutor);
          }
          public <T>T getHint(          Class<T> hintClass){
            return baseProcessor.getHint(hintClass);
          }
          public void handleEvent(          Event event,          Object associated){
            baseProcessor.handleEvent(event,associated);
          }
        }
;
      }
    }
.getAllReferences();
  }
  return PsiReference.EMPTY_ARRAY;
}
