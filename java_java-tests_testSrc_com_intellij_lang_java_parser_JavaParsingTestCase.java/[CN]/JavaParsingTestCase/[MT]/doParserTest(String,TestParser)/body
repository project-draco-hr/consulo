{
  final String name=getTestName(false);
  final IElementType fileElementType=new IFileElementType("test.java.file",StdLanguages.JAVA){
    @Override public ASTNode parseContents(    final ASTNode chameleon){
      final PsiBuilder builder=createBuilder(chameleon);
      final PsiBuilder.Marker root=builder.mark();
      parser.parse(builder);
      if (!builder.eof()) {
        final PsiBuilder.Marker unparsed=builder.mark();
        while (!builder.eof())         builder.advanceLexer();
        unparsed.error("Unparsed tokens");
      }
      root.done(this);
      final ASTNode rootNode=builder.getTreeBuilt();
      ParseUtil.bindComments(rootNode);
      return rootNode.getFirstChildNode();
    }
  }
;
  final LightVirtualFile virtualFile=new LightVirtualFile(name + '.' + myFileExt,StdFileTypes.JAVA,source,-1);
  final FileViewProvider viewProvider=new SingleRootFileViewProvider(PsiManager.getInstance(getProject()),virtualFile,true);
  final PsiJavaFileImpl psiFile=new PsiJavaFileImpl(viewProvider){
    @Override protected FileElement createFileElement(    final CharSequence text){
      return new FileElement(fileElementType,text);
    }
  }
;
  try {
    checkResult(name + ".txt",DebugUtil.psiToString(psiFile,false));
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}
