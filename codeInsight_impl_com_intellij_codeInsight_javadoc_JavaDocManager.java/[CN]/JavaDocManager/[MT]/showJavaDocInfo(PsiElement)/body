{
  myRequestFocus=false;
  final JavaDocInfoComponent component=new JavaDocInfoComponent(this);
  final LightweightHint hint=new LightweightHint(component){
    public void hide(){
      super.hide();
      if (myPreviouslyFocused != null && myPreviouslyFocused.getParent() instanceof ChooseByNameBase.JPanelProvider) {
        ((ChooseByNameBase.JPanelProvider)myPreviouslyFocused.getParent()).unregisterHint();
      }
      myEditor=null;
      myPreviouslyFocused=null;
    }
  }
;
  LightweightHint oldHint=getDocInfoHint();
  if (oldHint != null) {
    JavaDocInfoComponent oldComponent=(JavaDocInfoComponent)oldHint.getComponent();
    PsiElement element1=oldComponent.getElement();
    if (element.equals(element1)) {
      return oldHint;
    }
    oldHint.hide();
  }
  component.setHint(hint);
  fetchDocInfo(getDefaultProvider(element),component);
  myDocInfoHintRef=new WeakReference<LightweightHint>(hint);
  myPreviouslyFocused=WindowManagerEx.getInstanceEx().getFocusedComponent(myProject);
  if (myPreviouslyFocused == null || !(myPreviouslyFocused.getParent() instanceof ChooseByNameBase.JPanelProvider)) {
    myRequestFocus=true;
  }
  hookFocus(hint);
  hint.setForceShowAsPopup(true);
  setTitle(hint,element);
  return hint;
}
