{
  final JavaDocInfoComponent component=new JavaDocInfoComponent(this);
  final String title=SymbolPresentationUtil.getSymbolPresentableText(element);
  final JBPopup hint=JBPopupFactory.getInstance().createComponentPopupBuilder(component,component).setRequestFocusIfNotLookupOrSearch(getProject(element)).setLookupAndSearchUpdater(new Condition<PsiElement>(){
    public boolean value(    final PsiElement element){
      showJavaDocInfo(element);
      return false;
    }
  }
,getProject(element)).setForceHeavyweight(true).setDimensionServiceKey(JAVADOC_LOCATION_AND_SIZE).setResizable(true).setMovable(true).setTitle(CodeInsightBundle.message("javadoc.info.title",title != null ? title : element.getText())).setCancelCallback(new Computable<Boolean>(){
    public Boolean compute(){
      if (fromQuickSearch()) {
        ((ChooseByNameBase.JPanelProvider)myPreviouslyFocused.getParent()).unregisterHint();
      }
      Disposer.dispose(component);
      myEditor=null;
      myPreviouslyFocused=null;
      return Boolean.TRUE;
    }
  }
).createPopup();
  JBPopupImpl oldHint=(JBPopupImpl)getDocInfoHint();
  if (oldHint != null) {
    JavaDocInfoComponent oldComponent=(JavaDocInfoComponent)oldHint.getComponent();
    PsiElement element1=oldComponent.getElement();
    if (Comparing.equal(element,element1)) {
      return oldHint;
    }
    oldHint.cancel();
  }
  component.setHint(hint);
  fetchDocInfo(getDefaultProvider(element),component);
  myDocInfoHintRef=new WeakReference<JBPopup>(hint);
  myPreviouslyFocused=WindowManagerEx.getInstanceEx().getFocusedComponent(getProject(element));
  if (fromQuickSearch()) {
    ((ChooseByNameBase.JPanelProvider)myPreviouslyFocused.getParent()).registerHint(hint);
  }
  return hint;
}
