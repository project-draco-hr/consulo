{
  myEditor=editor;
  final Project project=getProject(file);
  PsiDocumentManager.getInstance(project).commitAllDocuments();
  final PsiElement list=ParameterInfoController.findArgumentList(file,editor.getCaretModel().getOffset(),-1);
  if (list != null) {
    myParameterInfoController=ParameterInfoController.findControllerAtOffset(editor,list.getTextRange().getStartOffset());
  }
  PsiElement originalElement=file != null ? file.findElementAt(editor.getCaretModel().getOffset()) : null;
  PsiElement element=findTargetElement(editor,file,originalElement);
  if (element instanceof PsiAnonymousClass) {
    element=((PsiAnonymousClass)element).getBaseClassType().resolve();
  }
  if (element == null && myParameterInfoController != null) {
    final Object[] objects=myParameterInfoController.getSelectedElements();
    if (objects != null && objects.length > 0) {
      element=getPsiElementFromParameterInfoObject(objects[0],element);
    }
  }
  if (element == null && file != null) {
    element=originalElement;
    if (element == null)     return null;
    PsiDocComment comment=PsiTreeUtil.getParentOfType(element,PsiDocComment.class);
    if (comment == null)     return null;
    element=comment.getParent();
    if (!(element instanceof PsiDocCommentOwner))     return null;
  }
  JBPopupImpl oldHint=(JBPopupImpl)getDocInfoHint();
  if (oldHint != null) {
    JavaDocInfoComponent component=(JavaDocInfoComponent)oldHint.getComponent();
    PsiElement element1=component.getElement();
    if (element != null && Comparing.equal(element,element1)) {
      if (requestFocus) {
        component.getComponent().requestFocus();
      }
      return oldHint;
    }
    oldHint.cancel();
  }
  final JavaDocInfoComponent component=new JavaDocInfoComponent(this);
  storeOriginalElement(project,originalElement,element);
  final String title=SymbolPresentationUtil.getSymbolPresentableText(element);
  final JBPopup hint=JBPopupFactory.getInstance().createComponentPopupBuilder(component,component).setRequestFocusIfNotLookupOrSearch(project).setLookupAndSearchUpdater(new Condition<PsiElement>(){
    public boolean value(    final PsiElement element){
      if (myEditor != null) {
        final PsiFile file=element.getContainingFile();
        if (file != null) {
          Editor editor=myEditor;
          showJavaDocInfo(myEditor,file,false);
          myEditor=editor;
        }
      }
 else {
        showJavaDocInfo(element);
      }
      return false;
    }
  }
,project).setForceHeavyweight(false).setDimensionServiceKey(project,JAVADOC_LOCATION_AND_SIZE,false).setResizable(true).setMovable(true).setTitle(getTitle(element)).setCancelCallback(new Computable<Boolean>(){
    public Boolean compute(){
      if (fromQuickSearch()) {
        ((ChooseByNameBase.JPanelProvider)myPreviouslyFocused.getParent()).unregisterHint();
      }
      Disposer.dispose(component);
      myEditor=null;
      myPreviouslyFocused=null;
      myParameterInfoController=null;
      return Boolean.TRUE;
    }
  }
).createPopup();
  component.setHint(hint);
  fetchDocInfo(getDefaultProvider(element),component);
  myDocInfoHintRef=new WeakReference<JBPopup>(hint);
  myPreviouslyFocused=WindowManagerEx.getInstanceEx().getFocusedComponent(project);
  return hint;
}
