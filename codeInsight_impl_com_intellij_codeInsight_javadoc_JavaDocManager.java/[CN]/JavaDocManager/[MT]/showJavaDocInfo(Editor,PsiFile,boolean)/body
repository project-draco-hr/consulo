{
  myEditor=editor;
  PsiDocumentManager.getInstance(myProject).commitAllDocuments();
  final PsiExpressionList list=ParameterInfoController.findArgumentList(file,editor.getCaretModel().getOffset(),-1);
  if (list != null) {
    myParameterInfoController=ParameterInfoController.getControllerAtOffset(editor,list.getTextRange().getStartOffset());
  }
  PsiElement element=TargetElementUtil.findTargetElement(editor,TargetElementUtil.ELEMENT_NAME_ACCEPTED | TargetElementUtil.REFERENCED_ELEMENT_ACCEPTED | TargetElementUtil.LOOKUP_ITEM_ACCEPTED| TargetElementUtil.NEW_AS_CONSTRUCTOR| TargetElementUtil.THIS_ACCEPTED| TargetElementUtil.SUPER_ACCEPTED);
  PsiElement originalElement=(file != null) ? file.findElementAt(editor.getCaretModel().getOffset()) : null;
  if (element == null && editor != null) {
    final PsiReference ref=TargetElementUtil.findReference(editor,editor.getCaretModel().getOffset());
    if (ref != null) {
      final PsiElement parent=ref.getElement().getParent();
      if (parent instanceof PsiMethodCallExpression) {
        element=parent;
      }
    }
    Lookup activeLookup=LookupManager.getInstance(myProject).getActiveLookup();
    if (activeLookup != null) {
      LookupItem item=activeLookup.getCurrentItem();
      if (item == null)       return null;
      if (file != null) {
        DocumentationProvider documentationProvider=documentationProviders.get(file.getFileType());
        if (documentationProvider != null) {
          if (ref != null)           originalElement=ref.getElement();
          element=documentationProvider.getDocumentationElementForLookupItem(item.getObject(),originalElement);
        }
      }
    }
  }
  if (element instanceof PsiAnonymousClass) {
    element=((PsiAnonymousClass)element).getBaseClassType().resolve();
  }
  if (element == null && myParameterInfoController != null) {
    final Object[] objects=myParameterInfoController.getSelectedElements();
    if (objects != null && objects.length > 0) {
      element=getPsiElementFromParameterInfoObject(objects[0],element);
    }
  }
  if (element == null && file != null) {
    element=originalElement;
    if (element == null)     return null;
    PsiDocComment comment=PsiTreeUtil.getParentOfType(element,PsiDocComment.class);
    if (comment == null)     return null;
    element=comment.getParent();
    if (!(element instanceof PsiDocCommentOwner))     return null;
  }
  JBPopupImpl oldHint=(JBPopupImpl)getDocInfoHint();
  if (oldHint != null) {
    JavaDocInfoComponent component=(JavaDocInfoComponent)oldHint.getComponent();
    PsiElement element1=component.getElement();
    if (element != null && element.equals(element1)) {
      if (requestFocus) {
        component.getComponent().requestFocus();
      }
      return oldHint;
    }
    oldHint.cancel();
  }
  JavaDocInfoComponent component=new JavaDocInfoComponent(this);
  try {
    element.putUserData(ORIGINAL_ELEMENT_KEY,originalElement);
  }
 catch (  RuntimeException ex) {
  }
  final JBPopup hint=JBPopupFactory.getInstance().createComponentPopupBuilder(component,component).setRequestFocus(true).setForceHeavyweight(false).setDimensionServiceKey(JAVADOC_LOCATION_AND_SIZE).setResizable(true).setMovable(true).setTitle(CodeInsightBundle.message("javadoc.info.title",SymbolPresentationUtil.getSymbolPresentableText(element))).setCancelCallback(new Computable<Boolean>(){
    public Boolean compute(){
      if (fromQuickSearch()) {
        ((ChooseByNameBase.JPanelProvider)myPreviouslyFocused.getParent()).unregisterHint();
      }
      myEditor=null;
      myPreviouslyFocused=null;
      myParameterInfoController=null;
      return Boolean.TRUE;
    }
  }
).createPopup();
  component.setHint(hint);
  fetchDocInfo(getDefaultProvider(element),component);
  myDocInfoHintRef=new WeakReference<JBPopup>(hint);
  return hint;
}
