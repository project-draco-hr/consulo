{
  String url=null;
  if (element instanceof PsiClass) {
    url=findUrlForClass((PsiClass)element);
  }
 else   if (element instanceof PsiField) {
    PsiField field=(PsiField)element;
    PsiClass aClass=field.getContainingClass();
    if (aClass != null) {
      url=findUrlForClass(aClass);
      if (url != null) {
        url+="#" + field.getName();
      }
    }
  }
 else   if (element instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)element;
    PsiClass aClass=method.getContainingClass();
    if (aClass != null) {
      url=findUrlForClass(aClass);
      if (url != null) {
        String signature=PsiFormatUtil.formatMethod(method,PsiSubstitutor.EMPTY,PsiFormatUtil.SHOW_NAME | PsiFormatUtil.SHOW_PARAMETERS,PsiFormatUtil.SHOW_TYPE | PsiFormatUtil.SHOW_FQ_CLASS_NAMES,999);
        url+="#" + signature;
      }
    }
  }
 else   if (element instanceof PsiPackage) {
    url=findUrlForPackage((PsiPackage)element);
  }
 else   if (element instanceof PsiDirectory) {
    PsiPackage aPackage=((PsiDirectory)element).getPackage();
    if (aPackage != null) {
      url=findUrlForPackage(aPackage);
    }
  }
 else {
    DocumentationProvider provider=getProviderFromElement(element);
    if (provider != null)     url=provider.getUrlFor(element,element.getUserData(ORIGINAL_ELEMENT_KEY));
  }
  return url == null ? null : url.replace('\\','/');
}
