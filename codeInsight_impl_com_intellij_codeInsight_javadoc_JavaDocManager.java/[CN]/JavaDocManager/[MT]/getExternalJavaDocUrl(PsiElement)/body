{
  List<String> urls=null;
  if (element instanceof PsiClass) {
    urls=findUrlForClass((PsiClass)element);
  }
 else   if (element instanceof PsiField) {
    PsiField field=(PsiField)element;
    PsiClass aClass=field.getContainingClass();
    if (aClass != null) {
      urls=findUrlForClass(aClass);
      if (urls != null) {
        for (int i=0; i < urls.size(); i++) {
          urls.set(i,urls.get(i) + "#" + field.getName());
        }
      }
    }
  }
 else   if (element instanceof PsiMethod) {
    PsiMethod method=(PsiMethod)element;
    PsiClass aClass=method.getContainingClass();
    if (aClass != null) {
      urls=findUrlForClass(aClass);
      if (urls != null) {
        String signature=PsiFormatUtil.formatMethod(method,PsiSubstitutor.EMPTY,PsiFormatUtil.SHOW_NAME | PsiFormatUtil.SHOW_PARAMETERS,PsiFormatUtil.SHOW_TYPE | PsiFormatUtil.SHOW_FQ_CLASS_NAMES,999);
        for (int i=0; i < urls.size(); i++) {
          urls.set(i,urls.get(i) + "#" + signature);
        }
      }
    }
  }
 else   if (element instanceof PsiPackage) {
    urls=findUrlForPackage((PsiPackage)element);
  }
 else   if (element instanceof PsiDirectory) {
    PsiPackage aPackage=JavaDirectoryService.getInstance().getPackage(((PsiDirectory)element));
    if (aPackage != null) {
      urls=findUrlForPackage(aPackage);
    }
  }
 else {
    DocumentationProvider provider=getProviderFromElement(element);
    if (provider != null) {
      final SmartPsiElementPointer originalElementPointer=element.getUserData(ORIGINAL_ELEMENT_KEY);
      final String url=provider.getUrlFor(element,originalElementPointer != null ? originalElementPointer.getElement() : null);
      if (url != null) {
        urls=new ArrayList<String>();
        urls.add(url);
      }
    }
  }
  if (urls == null) {
    return null;
  }
 else {
    for (int i=0; i < urls.size(); i++) {
      urls.set(i,FileUtil.toSystemIndependentName(urls.get(i)).replaceAll("[\\<\\>\\?]",""));
    }
    return urls;
  }
}
