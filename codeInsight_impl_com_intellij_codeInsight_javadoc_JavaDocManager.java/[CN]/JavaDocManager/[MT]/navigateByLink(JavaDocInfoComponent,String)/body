{
  component.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
  final PsiManager manager=PsiManager.getInstance(myProject);
  if (url.startsWith(PSI_ELEMENT_PROTOCOL)) {
    final String refText=url.substring(PSI_ELEMENT_PROTOCOL.length());
    final PsiElement targetElement=JavaDocUtil.findReferenceTarget(manager,refText,component.getElement());
    if (targetElement != null) {
      fetchDocInfo(getDefaultProvider(targetElement),component);
    }
  }
 else {
    final String docUrl=url;
    fetchDocInfo(new JavaDocProvider(){
      String getElementLocator(      String url){
        if (url.startsWith(DOC_ELEMENT_PROTOCOL)) {
          return url.substring(DOC_ELEMENT_PROTOCOL.length());
        }
        return null;
      }
      public String getJavaDoc() throws Exception {
        String url=getElementLocator(docUrl);
        if (url != null && JavaDocExternalFilter.isJavaDocURL(url)) {
          String text=new JavaDocExternalFilter(myProject).getExternalDocInfo(url);
          if (text != null) {
            return text;
          }
        }
        if (url == null) {
          url=docUrl;
        }
        PsiElement element=component.getElement();
        if (element != null) {
          PsiElement parent=element;
          while (true) {
            if (parent == null || parent instanceof PsiDirectory)             break;
            parent=parent.getParent();
          }
          if (parent != null) {
            PsiPackage aPackage=((PsiDirectory)parent).getPackage();
            if (aPackage != null) {
              String url1=findUrlForLink(aPackage,url);
              if (url1 != null) {
                url=url1;
              }
            }
          }
        }
        BrowserUtil.launchBrowser(url);
        return "";
      }
      public PsiElement getElement(){
        return component.getElement();
      }
    }
,component);
  }
  component.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
}
