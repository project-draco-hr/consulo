{
  if (element instanceof PsiMethodCallExpression) {
    return getMethodCandidateInfo((PsiMethodCallExpression)element);
  }
 else {
    final DocumentationProvider provider=getProviderFromElement(element);
    final JavaDocInfoGenerator javaDocInfoGenerator=new JavaDocInfoGenerator(getProject(element),element,provider);
    if (myParameterInfoController != null) {
      final Object[] objects=myParameterInfoController.getSelectedElements();
      if (objects.length > 0) {
        @NonNls StringBuffer sb=null;
        for (        Object o : objects) {
          PsiElement parameter=getPsiElementFromParameterInfoObject(o,null);
          if (parameter != null) {
            final String str2=new JavaDocInfoGenerator(getProject(element),parameter,provider).generateDocInfo();
            if (str2 == null)             continue;
            if (sb == null)             sb=new StringBuffer();
            sb.append(str2);
            sb.append("<br>");
          }
 else {
            sb=null;
            break;
          }
        }
        if (sb != null)         return sb.toString();
      }
    }
    JavaDocExternalFilter docFilter=new JavaDocExternalFilter(getProject(element));
    List<String> docURLs=getExternalJavaDocUrl(element);
    if (docURLs != null) {
      for (      String docURL : docURLs) {
        if (element instanceof PsiCompiledElement) {
          try {
            String externalDoc=docFilter.getExternalDocInfoForElement(docURL,element);
            if (externalDoc != null) {
              return externalDoc;
            }
          }
 catch (          FileNotFoundException e) {
          }
        }
      }
    }
    return docFilter.filterInternalDocInfo(javaDocInfoGenerator.generateDocInfo(),null);
  }
}
