{
  DefaultJDOMExternalizer.readExternal(this,element);
  List elems=element.getChildren("addpath");
  LOG.debug(elems.toString());
  ADD_PATHS=new String[elems.size()];
  for (int i=0; i < elems.size(); i++) {
    Element elem=(Element)elems.get(i);
    ADD_PATHS[i]=elem.getAttributeValue("path");
  }
  Element configurationDirectory=element.getChild("configuration");
  if (configurationDirectory != null) {
    myConfigurationDirectory=configurationDirectory.getText();
    Attribute defaultAttr=configurationDirectory.getAttribute("useDefault");
    try {
      myIsUseDefaultConfiguration=defaultAttr != null && defaultAttr.getBooleanValue();
    }
 catch (    DataConversionException e) {
      myIsUseDefaultConfiguration=false;
    }
  }
 else {
    myIsUseDefaultConfiguration=true;
  }
  List urls=element.getChildren("checkoutURL");
  for (  Object url1 : urls) {
    Element child=(Element)url1;
    String url=child.getText();
    if (url != null) {
      SvnApplicationSettings.getInstance().addCheckoutURL(url);
    }
  }
  myIsKeepLocks=element.getChild("keepLocks") != null;
  myRemoteStatus=element.getChild("remoteStatus") != null;
  myUpgradeMode=element.getChild("upgradeMode") != null ? element.getChild("upgradeMode").getText() : null;
  final Element useProxy=element.getChild("myIsUseDefaultProxy");
  if (useProxy == null) {
    myIsUseDefaultProxy=false;
  }
 else {
    myIsUseDefaultProxy=Boolean.parseBoolean(useProxy.getText());
  }
  final Element supportedVersion=element.getChild("supportedVersion");
  if (supportedVersion != null) {
    try {
      mySupportOptions=new SvnSupportOptions(Long.parseLong(supportedVersion.getText().trim()));
    }
 catch (    NumberFormatException e) {
      mySupportOptions=new SvnSupportOptions(null);
    }
  }
  final Attribute maxAnnotateRevisions=element.getAttribute("maxAnnotateRevisions");
  if (maxAnnotateRevisions != null) {
    try {
      myMaxAnnotateRevisions=maxAnnotateRevisions.getIntValue();
    }
 catch (    DataConversionException e) {
    }
    final Attribute acceleration=element.getAttribute("myUseAcceleration");
    if (acceleration != null) {
      try {
        myUseAcceleration=UseAcceleration.valueOf(acceleration.getValue());
      }
 catch (      IllegalArgumentException e) {
      }
    }
  }
  final Attribute autoUpdateAfterCommit=element.getAttribute("myAutoUpdateAfterCommit");
  if (autoUpdateAfterCommit != null) {
    myAutoUpdateAfterCommit=Boolean.parseBoolean(autoUpdateAfterCommit.getValue());
  }
  final Attribute cleanupRun=element.getAttribute(CLEANUP_ON_START_RUN);
  if (cleanupRun != null) {
    myCleanupRun=Boolean.parseBoolean(cleanupRun.getValue());
  }
}
