{
  if (element instanceof PsiReferenceExpression) {
    PsiReferenceExpression ref=(PsiReferenceExpression)element;
    if (!ref.isQualified()) {
      PsiElement resolved=ref.resolve();
      if (resolved instanceof PsiMember && !((PsiMember)resolved).hasModifierProperty(PsiModifier.STATIC)) {
        PsiMember member=(PsiMember)resolved;
        if (originalMember.getManager().areElementsEquivalent(member,originalMember)) {
          if (includeSelf) {
            classRefs.add(new SelfUsageInfo(element,originalMember));
          }
        }
 else {
          if (isPartOf(member.getContainingClass(),containingClass)) {
            classRefs.add(new InternalUsageInfo(element,member));
          }
        }
      }
    }
  }
 else   if (element instanceof PsiThisExpression || element instanceof PsiSuperExpression || element instanceof PsiNewExpression) {
    PsiJavaCodeReferenceElement classRef;
    if (element instanceof PsiThisExpression) {
      classRef=((PsiThisExpression)element).getQualifier();
    }
 else     if (element instanceof PsiSuperExpression) {
      classRef=((PsiSuperExpression)element).getQualifier();
    }
 else {
      classRef=((PsiNewExpression)element).getClassReference();
    }
    if (classRef != null) {
      PsiElement resolved=classRef.resolve();
      if (resolved instanceof PsiClass && isPartOf((PsiClass)resolved,containingClass)) {
        classRefs.add(new InternalUsageInfo(element,containingClass));
      }
    }
 else     if (!(element instanceof PsiNewExpression) && !RefactoringUtil.isInsideAnonymous(element,containingClass)) {
      classRefs.add(new InternalUsageInfo(element,containingClass));
    }
  }
  PsiElement[] children=element.getChildren();
  for (  PsiElement child : children) {
    addClassRefs(originalMember,classRefs,containingClass,child,includeSelf);
  }
}
