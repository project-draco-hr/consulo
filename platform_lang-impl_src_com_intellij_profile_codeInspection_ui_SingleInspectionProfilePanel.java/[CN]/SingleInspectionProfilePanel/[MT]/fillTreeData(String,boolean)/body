{
  if (mySelectedProfile == null)   return;
  myRoot.removeAllChildren();
  myRoot.setChecked(false);
  myRoot.dropCache();
  List<Set<String>> keySetList=new ArrayList<Set<String>>();
  final Set<String> quoted=new HashSet<String>();
  if (filter != null && !filter.isEmpty()) {
    keySetList.addAll(SearchUtil.findKeys(filter,quoted));
  }
  Project project=myProjectProfileManager.getProject();
  for (  Descriptor descriptor : myDescriptors.keySet()) {
    if (filter != null && !filter.isEmpty() && !isDescriptorAccepted(descriptor,filter,forceInclude,keySetList,quoted)) {
      continue;
    }
    final List<ScopeToolState> nonDefaultTools=mySelectedProfile.getNonDefaultTools(descriptor.getKey().toString(),project);
    final HighlightDisplayKey key=descriptor.getKey();
    final boolean enabled=mySelectedProfile.isToolEnabled(key);
    boolean hasNonDefaultScope=!nonDefaultTools.isEmpty();
    final InspectionConfigTreeNode node=new InspectionConfigTreeNode(descriptor,null,!hasNonDefaultScope,enabled,!hasNonDefaultScope);
    getGroupNode(myRoot,descriptor.getGroup()).add(node);
    if (hasNonDefaultScope) {
      for (      Descriptor desc : myDescriptors.get(descriptor)) {
        node.add(new InspectionConfigTreeNode(desc,desc.getState(),false,false));
      }
      node.add(new InspectionConfigTreeNode(descriptor,descriptor.getState(),true,false));
    }
    myRoot.setEnabled(myRoot.isEnabled() || enabled);
    myRoot.dropCache();
  }
  if (filter != null && forceInclude && myRoot.getChildCount() == 0) {
    final Set<String> filters=SearchableOptionsRegistrar.getInstance().getProcessedWords(filter);
    if (filters.size() > 1 || !quoted.isEmpty()) {
      fillTreeData(filter,false);
    }
  }
  TreeUtil.sort(myRoot,new InspectionsConfigTreeComparator());
}
