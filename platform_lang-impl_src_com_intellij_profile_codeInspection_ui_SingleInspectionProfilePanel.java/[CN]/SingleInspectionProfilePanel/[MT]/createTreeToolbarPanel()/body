{
  final CommonActionsManager actionManager=CommonActionsManager.getInstance();
  DefaultActionGroup actions=new DefaultActionGroup();
  actions.add(actionManager.createExpandAllAction(myTreeExpander,myTree));
  actions.add(actionManager.createCollapseAllAction(myTreeExpander,myTree));
  actions.add(new AnAction(CommonBundle.message("button.reset.to.default"),CommonBundle.message("button.reset.to.default"),IconLoader.getIcon("/actions/reset-to-default.png")){
{
      registerCustomShortcutSet(new CustomShortcutSet(KeyStroke.getKeyStroke(KeyEvent.VK_R,InputEvent.CTRL_MASK)),myTree);
    }
    @Override public void update(    AnActionEvent e){
      e.getPresentation().setEnabled(myRoot.isProperSetting);
    }
    @Override public void actionPerformed(    AnActionEvent e){
      mySelectedProfile.resetToBase();
      postProcessModification();
    }
  }
);
  actions.add(new AnAction("Reset to Empty","Reset to empty",IconLoader.getIcon("/general/reset.png")){
    @Override public void update(    AnActionEvent e){
      e.getPresentation().setEnabled(mySelectedProfile != null && mySelectedProfile.isExecutable());
    }
    public void actionPerformed(    AnActionEvent e){
      mySelectedProfile.resetToEmpty();
      postProcessModification();
    }
  }
);
  actions.add(new ToggleAction("Lock Profile","Lock profile",IconLoader.getIcon("/nodes/padlock.png")){
    public boolean isSelected(    AnActionEvent e){
      return mySelectedProfile != null && mySelectedProfile.isProfileLocked();
    }
    public void setSelected(    AnActionEvent e,    boolean state){
      mySelectedProfile.lockProfile(state);
    }
  }
);
  actions.addSeparator();
  actions.add(new MyAddScopeAction());
  actions.add(new MyDeleteScopeAction());
  actions.add(new MoveScopeAction(myTree,"Move Scope Up",IconLoader.getIcon("/actions/moveUp.png"),-1){
    protected boolean isEnabledFor(    int idx,    InspectionConfigTreeNode parent){
      return idx > 0;
    }
    protected InspectionProfileImpl getSelectedProfile(){
      return mySelectedProfile;
    }
  }
);
  actions.add(new MoveScopeAction(myTree,"Move Scope Down",IconLoader.getIcon("/actions/moveDown.png"),1){
    protected boolean isEnabledFor(    int idx,    InspectionConfigTreeNode parent){
      return idx < parent.getChildCount() - 2;
    }
    protected InspectionProfileImpl getSelectedProfile(){
      return mySelectedProfile;
    }
  }
);
  actions.addSeparator();
  final ActionToolbar actionToolbar=ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN,actions,true);
  actionToolbar.setTargetComponent(this);
  return actionToolbar;
}
