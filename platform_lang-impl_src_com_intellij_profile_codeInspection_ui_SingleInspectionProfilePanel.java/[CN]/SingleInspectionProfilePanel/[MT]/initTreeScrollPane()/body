{
  fillTreeData(null,true);
  final InspectionsConfigTreeRenderer renderer=new InspectionsConfigTreeRenderer(){
    protected String getFilter(){
      return myProfileFilter != null ? myProfileFilter.getFilter() : null;
    }
  }
;
  myTree=new CheckboxTree(renderer,myRoot){
    public Dimension getPreferredScrollableViewportSize(){
      Dimension size=super.getPreferredScrollableViewportSize();
      size=new Dimension(size.width + 10,size.height);
      return size;
    }
    @Override protected void onNodeStateChanged(    final CheckedTreeNode node){
      toggleToolNode((InspectionConfigTreeNode)node);
    }
  }
;
  myTree.setCellRenderer(renderer);
  myTree.setRootVisible(false);
  myTree.setShowsRootHandles(true);
  UIUtil.setLineStyleAngled(myTree);
  TreeUtil.installActions(myTree);
  myTree.addTreeSelectionListener(new TreeSelectionListener(){
    public void valueChanged(    TreeSelectionEvent e){
      if (myTree.getSelectionPaths() != null && myTree.getSelectionPaths().length == 1) {
        updateOptionsAndDescriptionPanel(myTree.getSelectionPaths()[0]);
      }
 else {
        initOptionsAndDescriptionPanel();
      }
      if (!myIsInRestore) {
        InspectionProfileImpl selected=mySelectedProfile;
        if (selected != null) {
          InspectionProfileImpl baseProfile=(InspectionProfileImpl)selected.getParentProfile();
          if (baseProfile != null) {
            baseProfile.getExpandedNodes().setSelectionPaths(myTree.getSelectionPaths());
          }
          selected.getExpandedNodes().setSelectionPaths(myTree.getSelectionPaths());
        }
      }
    }
  }
);
  myTree.addMouseListener(new PopupHandler(){
    public void invokePopup(    Component comp,    int x,    int y){
      final int[] selectionRows=myTree.getSelectionRows();
      if (selectionRows != null && myTree.getPathForLocation(x,y) != null && Arrays.binarySearch(selectionRows,myTree.getRowForLocation(x,y)) > -1) {
        compoundPopup().show(comp,x,y);
      }
    }
  }
);
  new TreeSpeedSearch(myTree,new Convertor<TreePath,String>(){
    public String convert(    TreePath o){
      final InspectionConfigTreeNode node=(InspectionConfigTreeNode)o.getLastPathComponent();
      final Descriptor descriptor=node.getDesriptor();
      return descriptor != null ? InspectionsConfigTreeComparator.getDisplayTextToSort(descriptor.getText()) : InspectionsConfigTreeComparator.getDisplayTextToSort(node.getGroupName());
    }
  }
);
  myTree.setSelectionModel(new DefaultTreeSelectionModel());
  final JScrollPane scrollPane=ScrollPaneFactory.createScrollPane(myTree);
  scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
  TreeUtil.collapseAll(myTree,1);
  myTree.addTreeExpansionListener(new TreeExpansionListener(){
    public void treeCollapsed(    TreeExpansionEvent event){
      InspectionProfileImpl selected=mySelectedProfile;
      final InspectionConfigTreeNode node=(InspectionConfigTreeNode)event.getPath().getLastPathComponent();
      final InspectionProfileImpl parentProfile=(InspectionProfileImpl)selected.getParentProfile();
      if (parentProfile != null) {
        parentProfile.getExpandedNodes().collapseNode(node);
      }
      selected.getExpandedNodes().collapseNode(node);
    }
    public void treeExpanded(    TreeExpansionEvent event){
      InspectionProfileImpl selected=mySelectedProfile;
      if (selected != null) {
        final InspectionConfigTreeNode node=(InspectionConfigTreeNode)event.getPath().getLastPathComponent();
        final InspectionProfileImpl parentProfile=(InspectionProfileImpl)selected.getParentProfile();
        if (parentProfile != null) {
          parentProfile.getExpandedNodes().expandNode(node);
        }
        selected.getExpandedNodes().expandNode(node);
      }
    }
  }
);
  myTreeExpander=new DefaultTreeExpander(myTree);
  myProfileFilter=new MyFilterComponent();
  return scrollPane;
}
