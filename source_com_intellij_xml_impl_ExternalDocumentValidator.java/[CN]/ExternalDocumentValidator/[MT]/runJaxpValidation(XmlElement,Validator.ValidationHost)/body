{
  PsiFile file=element.getContainingFile();
  if (myFile == file && file != null && myModificationStamp == file.getModificationStamp() && myInfos != null && myInfos.get() != null) {
    addAllInfos(host,myInfos.get());
    return;
  }
  if (myHandler == null)   myHandler=new ValidateXmlActionHandler(false);
  final Project project=element.getProject();
  final Document document=PsiDocumentManager.getInstance(project).getDocument(file);
  if (document == null)   return;
  final List<ValidationInfo> results=new LinkedList<ValidationInfo>();
  myHost=new Validator.ValidationHost(){
    public void addMessage(    PsiElement context,    String message,    int type){
      final ValidationInfo o=new ValidationInfo();
      results.add(o);
      o.element=context;
      o.message=message;
      o.type=type;
    }
  }
;
  myHandler.setErrorReporter(myHandler.new ErrorReporter(){
    public boolean isStopOnUndeclaredResource(){
      return true;
    }
    public boolean filterValidationException(    Exception ex){
      if (ex instanceof ProcessCanceledException && ApplicationManager.getApplication().isUnitTestMode()) {
        return true;
      }
      return super.filterValidationException(ex);
    }
    public void processError(    final SAXParseException e,    final boolean warning){
      try {
        ApplicationManager.getApplication().runReadAction(new Runnable(){
          public void run(){
            if (e.getPublicId() != null) {
              return;
            }
            if (document.getLineCount() < e.getLineNumber() || e.getLineNumber() <= 0) {
              return;
            }
            int offset=Math.max(0,document.getLineStartOffset(e.getLineNumber() - 1) + e.getColumnNumber() - 2);
            if (offset >= document.getTextLength())             return;
            PsiElement currentElement=PsiDocumentManager.getInstance(project).getPsiFile(document).findElementAt(offset);
            PsiElement originalElement=currentElement;
            final String elementText=currentElement.getText();
            if (elementText.equals("</")) {
              currentElement=currentElement.getNextSibling();
            }
 else             if (elementText.equals(">") || elementText.equals("=")) {
              currentElement=currentElement.getPrevSibling();
            }
            String localizedMessage=e.getLocalizedMessage();
            localizedMessage=localizedMessage.substring(localizedMessage.indexOf(':') + 1).trim();
            if (localizedMessage.startsWith(CANNOT_FIND_DECLARATION_ERROR_PREFIX) || localizedMessage.startsWith(ELEMENT_ERROR_PREFIX) || localizedMessage.startsWith(ROOT_ELEMENT_ERROR_PREFIX)|| localizedMessage.startsWith(CONTENT_OF_ELEMENT_TYPE_ERROR_PREFIX)) {
              addProblemToTagName(currentElement,originalElement,localizedMessage,warning);
            }
 else             if (localizedMessage.startsWith(VALUR_ERROR_PREFIX)) {
              addProblemToTagName(currentElement,originalElement,localizedMessage,warning);
            }
 else             if (localizedMessage.startsWith(ATTRIBUTE_ERROR_PREFIX)) {
              currentElement=PsiTreeUtil.getParentOfType(currentElement,XmlAttribute.class,false);
              final int messagePrefixLength=ATTRIBUTE_ERROR_PREFIX.length();
              if (localizedMessage.charAt(messagePrefixLength) == '"' || localizedMessage.charAt(messagePrefixLength) == '\'') {
                final int nextQuoteIndex=localizedMessage.indexOf(localizedMessage.charAt(messagePrefixLength),messagePrefixLength + 1);
                String attrName=nextQuoteIndex == -1 ? null : localizedMessage.substring(messagePrefixLength + 1,nextQuoteIndex);
                XmlTag parent=PsiTreeUtil.getParentOfType(originalElement,XmlTag.class);
                currentElement=parent.getAttribute(attrName,null);
                if (currentElement != null) {
                  currentElement=SourceTreeToPsiMap.treeElementToPsi(XmlChildRole.ATTRIBUTE_NAME_FINDER.findChild(SourceTreeToPsiMap.psiElementToTree(currentElement)));
                }
              }
              if (currentElement != null) {
                assertValidElement(currentElement,originalElement,localizedMessage);
                myHost.addMessage(currentElement,localizedMessage,warning ? Validator.ValidationHost.WARNING : Validator.ValidationHost.ERROR);
              }
 else {
                addProblemToTagName(originalElement,originalElement,localizedMessage,warning);
              }
            }
 else             if (localizedMessage.startsWith(STRING_ERROR_PREFIX)) {
              if (currentElement != null) {
                myHost.addMessage(currentElement,localizedMessage,Validator.ValidationHost.WARNING);
              }
            }
 else {
              currentElement=getNodeForMessage(currentElement);
              assertValidElement(currentElement,originalElement,localizedMessage);
              if (currentElement != null) {
                myHost.addMessage(currentElement,localizedMessage,warning ? Validator.ValidationHost.WARNING : Validator.ValidationHost.ERROR);
              }
            }
          }
        }
);
      }
 catch (      Exception ex) {
        if (ex instanceof ProcessCanceledException)         throw (ProcessCanceledException)ex;
        LOG.error(ex);
      }
    }
  }
);
  myHandler.doValidate(project,element.getContainingFile());
  myFile=file;
  myModificationStamp=myFile == null ? 0 : myFile.getModificationStamp();
  myInfos=new WeakReference<List<ValidationInfo>>(results);
  addAllInfos(host,results);
}
