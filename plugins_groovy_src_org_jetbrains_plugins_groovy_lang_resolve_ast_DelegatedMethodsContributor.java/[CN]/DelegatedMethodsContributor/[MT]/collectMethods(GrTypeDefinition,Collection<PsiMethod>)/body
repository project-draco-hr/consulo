{
  final GrField[] fields=clazz.getFields();
  for (  GrField field : fields) {
    final PsiAnnotation delegate=PsiImplUtil.getAnnotation(field,GroovyCommonClassNames.GROOVY_LANG_DELEGATE);
    if (delegate == null)     continue;
    final PsiType type=field.getDeclaredType();
    if (!(type instanceof PsiClassType))     continue;
    final PsiClassType.ClassResolveResult resolveResult=((PsiClassType)type).resolveGenerics();
    final PsiClass psiClass=resolveResult.getElement();
    if (psiClass == null)     continue;
    final boolean deprecated=shouldDelegateDeprecated(delegate);
    final PsiMethod[] methods=getMethodsFromClassWithoutAST(psiClass);
    for (    PsiMethod method : methods) {
      if (method.isConstructor())       continue;
      if (!deprecated && PsiImplUtil.getAnnotation(method,"java.lang.Deprecated") != null)       continue;
      collector.add(generateDelegateMethod(method,clazz,resolveResult.getSubstitutor()));
    }
  }
}
