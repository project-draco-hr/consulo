{
  final PsiClassType.ClassResolveResult resolveResult=type.resolveGenerics();
  final PsiClass psiClass=resolveResult.getElement();
  if (psiClass == null)   return alreadyVisited;
  final String qname=psiClass.getQualifiedName();
  if (CommonClassNames.JAVA_LANG_OBJECT.equals(qname))   return alreadyVisited;
  if (GroovyCommonClassNames.GROOVY_OBJECT.equals(qname))   return alreadyVisited;
  if (GroovyCommonClassNames.GROOVY_OBJECT_SUPPORT.equals(qname))   return alreadyVisited;
  final PsiSubstitutor substitutor=TypesUtil.composeSubstitutors(resolveResult.getSubstitutor(),superClassSubstitutor);
  if (processed.contains(psiClass)) {
    if (alreadyVisited == null)     alreadyVisited=new HashSet<PsiClass>();
    alreadyVisited.add(psiClass);
    return alreadyVisited;
  }
  processed.add(psiClass);
  collectMethods(psiClass,substitutor,deprecated,classToDelegateTo,result);
  final Set<PsiClass> _alreadyVisited=process(psiClass,substitutor,processed,result,classToDelegateTo);
  if (_alreadyVisited != null) {
    if (alreadyVisited == null) {
      alreadyVisited=_alreadyVisited;
    }
 else {
      alreadyVisited.addAll(_alreadyVisited);
    }
  }
  return alreadyVisited;
}
