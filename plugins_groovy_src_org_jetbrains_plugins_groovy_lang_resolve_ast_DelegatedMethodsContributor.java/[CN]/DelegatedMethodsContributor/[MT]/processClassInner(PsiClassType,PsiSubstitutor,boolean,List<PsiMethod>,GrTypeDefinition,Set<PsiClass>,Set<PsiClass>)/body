{
  final PsiClassType.ClassResolveResult resolveResult=type.resolveGenerics();
  final PsiClass psiClass=resolveResult.getElement();
  if (psiClass == null)   return;
  final String qname=psiClass.getQualifiedName();
  if (CommonClassNames.JAVA_LANG_OBJECT.equals(qname))   return;
  if (GroovyCommonClassNames.GROOVY_OBJECT.equals(qname))   return;
  if (GroovyCommonClassNames.GROOVY_OBJECT_SUPPORT.equals(qname))   return;
  final PsiSubstitutor substitutor=TypesUtil.composeSubstitutors(resolveResult.getSubstitutor(),superClassSubstitutor);
  if (processedAll.contains(psiClass))   return;
  if (!shouldProcessDeprecated && processedWithoutDeprecated.contains(psiClass))   return;
  if (shouldProcessDeprecated) {
    processedAll.add(psiClass);
  }
 else {
    processedWithoutDeprecated.add(psiClass);
  }
  collectMethods(psiClass,substitutor,shouldProcessDeprecated,classToDelegateTo,result);
  process(psiClass,substitutor,processedWithoutDeprecated,processedAll,result,classToDelegateTo);
}
