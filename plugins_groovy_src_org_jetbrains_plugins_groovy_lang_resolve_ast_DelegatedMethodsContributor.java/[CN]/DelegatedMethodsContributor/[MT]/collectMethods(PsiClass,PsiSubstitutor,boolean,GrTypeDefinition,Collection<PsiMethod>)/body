{
  final List<PsiMethod> methods;
  if (currentClass instanceof GrTypeDefinition) {
    methods=new ArrayList<PsiMethod>();
    final GrTypeDefinitionBody body=((GrTypeDefinition)currentClass).getBody();
    if (body != null) {
      GrClassImplUtil.collectMethodsFromBody(body,methods);
    }
  }
 else {
    methods=Arrays.asList(currentClass.getMethods());
  }
  for (  PsiMethod method : methods) {
    if (method.isConstructor() || method.hasModifierProperty(PsiModifier.STATIC))     continue;
    if (overridesObjectOrGroovyObject(method))     continue;
    if (!shouldProcessDeprecated && PsiImplUtil.getAnnotation(method,CommonClassNames.JAVA_LANG_DEPRECATED) != null)     continue;
    collector.add(generateDelegateMethod(method,classToDelegateTo,currentClassSubstitutor));
  }
}
