{
  final LightMethodBuilder builder=new LightMethodBuilder(superClass.getManager(),GroovyFileType.GROOVY_LANGUAGE,method.getName());
  builder.setContainingClass(superClass);
  builder.setMethodReturnType(substitutor.substitute(method.getReturnType()));
  builder.setNavigationElement(method);
  builder.addModifier(PsiModifier.PUBLIC);
  final PsiTypeParameter[] typeParameters=method.getTypeParameters();
  final PsiClass containingClass=method.getContainingClass();
  boolean isRaw=containingClass != null && PsiUtil.isRawSubstitutor(containingClass,substitutor);
  if (isRaw) {
    substitutor=JavaPsiFacade.getInstance(method.getProject()).getElementFactory().createRawSubstitutor(substitutor,typeParameters);
  }
  if (!isRaw) {
    for (    PsiTypeParameter typeParameter : typeParameters) {
      builder.addTypeParameter(typeParameter);
    }
  }
  final PsiParameter[] originalParameters=method.getParameterList().getParameters();
  for (int i=0; i < originalParameters.length; i++) {
    PsiParameter originalParameter=originalParameters[i];
    PsiType type;
    if (isRaw) {
      type=TypeConversionUtil.erasure(substitutor.substitute(originalParameter.getType()));
    }
 else {
      type=substitutor.substitute(originalParameter.getType());
    }
    if (type == null) {
      type=PsiType.getJavaLangObject(superClass.getManager(),superClass.getResolveScope());
    }
    builder.addParameter(StringUtil.notNullize(originalParameter.getName(),"p" + i),type);
  }
  builder.setBaseIcon(JetgroovyIcons.Groovy.Method);
  return new DelegatedMethod(builder,method);
}
