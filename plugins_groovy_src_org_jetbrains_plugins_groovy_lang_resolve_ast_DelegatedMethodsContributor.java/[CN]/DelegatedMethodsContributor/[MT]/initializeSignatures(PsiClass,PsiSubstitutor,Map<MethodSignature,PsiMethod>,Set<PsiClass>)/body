{
  if (clazz.isInterface())   return;
  if (classes.add(clazz)) {
    final List<PsiMethod> methods;
    if (clazz instanceof GrTypeDefinition) {
      methods=new ArrayList<PsiMethod>();
      final GrTypeDefinitionBody body=((GrTypeDefinition)clazz).getBody();
      if (body != null) {
        GrClassImplUtil.collectMethodsFromBody(body,methods);
      }
    }
 else {
      methods=Arrays.asList(clazz.getMethods());
    }
    for (    PsiMethod method : methods) {
      addMethodChecked(signatures,method,substitutor,null);
    }
    final List<PsiClassType> superTypes;
    if (clazz instanceof GrTypeDefinition) {
      final PsiReferenceList extendsList=clazz.getExtendsList();
      final PsiReferenceList implementsList=clazz.getImplementsList();
      final PsiClassType[] extendList=extendsList == null ? PsiClassType.EMPTY_ARRAY : extendsList.getReferencedTypes();
      final PsiClassType[] implementList=implementsList == null ? PsiClassType.EMPTY_ARRAY : implementsList.getReferencedTypes();
      superTypes=new ArrayList<PsiClassType>(implementList.length + extendList.length);
      ContainerUtil.addAll(superTypes,extendList);
      ContainerUtil.addAll(superTypes,implementList);
    }
 else {
      superTypes=Arrays.asList(clazz.getSuperTypes());
    }
    for (    PsiClassType type : superTypes) {
      final PsiClassType.ClassResolveResult result=type.resolveGenerics();
      final PsiClass superClass=result.getElement();
      if (superClass == null)       continue;
      final PsiSubstitutor superClassSubstitutor=TypeConversionUtil.getSuperClassSubstitutor(superClass,clazz,substitutor);
      initializeSignatures(superClass,superClassSubstitutor,signatures,classes);
    }
  }
}
