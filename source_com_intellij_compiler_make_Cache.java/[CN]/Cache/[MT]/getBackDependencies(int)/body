{
  final int classDeclarationId=getClassDeclarationId(classQName);
  if (classDeclarationId == UNKNOWN) {
    return null;
  }
  final Dependency[] dependencyArray;
  try {
    final TIntObjectHashMap dependencies=new TIntObjectHashMap();
    final ClassDeclarationView classDeclarationView=myViewPool.getClassDeclarationView(classDeclarationId);
    final int[] classReferencers=classDeclarationView.getReferencers();
    for (int idx=0; idx < classReferencers.length; idx++) {
      final int referencer=classReferencers[idx];
      if (referencer != classQName) {
        addDependency(dependencies,referencer);
      }
    }
    final int[] fieldIds=classDeclarationView.getFieldIds();
    for (int idx=0; idx < fieldIds.length; idx++) {
      final int fieldId=fieldIds[idx];
      final FieldDeclarationView fieldDeclarationView=myViewPool.getFieldDeclarationView(fieldId);
      final int[] fieldReferencers=fieldDeclarationView.getReferencers();
      for (int i=0; i < fieldReferencers.length; i++) {
        int referencer=fieldReferencers[i];
        if (referencer != classQName) {
          final Dependency dependency=addDependency(dependencies,referencer);
          dependency.addMemberInfo(createFieldInfo(fieldId));
        }
      }
    }
    final int[] methodIds=classDeclarationView.getMethodIds();
    for (int idx=0; idx < methodIds.length; idx++) {
      final int methodId=methodIds[idx];
      final MethodDeclarationView methodDeclarationView=myViewPool.getMethodDeclarationView(methodId);
      final int[] methodReferencers=methodDeclarationView.getReferencers();
      for (int i=0; i < methodReferencers.length; i++) {
        int referencer=methodReferencers[i];
        if (referencer != classQName) {
          final Dependency dependency=addDependency(dependencies,referencer);
          dependency.addMemberInfo(createMethodInfo(methodId));
        }
      }
    }
    dependencyArray=new Dependency[dependencies.size()];
    dependencies.forEachValue(new TObjectProcedure(){
      private int index=0;
      public boolean execute(      Object object){
        dependencyArray[index++]=(Dependency)object;
        return true;
      }
    }
);
  }
 catch (  Throwable e) {
    throw new CacheCorruptedException(e);
  }
  return dependencyArray;
}
