{
  try {
    final int classDeclarationId=getClassDeclarationId(classQName);
    final int[] fieldIds=getFieldIds(classDeclarationId);
    final int[] methodIds=getMethodIds(classDeclarationId);
    TObjectIntHashMap currentMembers=new TObjectIntHashMap();
    for (int idx=0; idx < fieldIds.length; idx++) {
      final int fieldId=fieldIds[idx];
      currentMembers.put(createFieldInfo(fieldId),fieldId);
    }
    for (int idx=0; idx < methodIds.length; idx++) {
      final int methodId=methodIds[idx];
      currentMembers.put(createMethodInfo(methodId),methodId);
    }
    TIntHashSet fieldsToRemove=new TIntHashSet(fieldIds);
    TIntHashSet methodsToRemove=new TIntHashSet(methodIds);
    for (int idx=0; idx < classMembers.length; idx++) {
      final MemberInfo classMember=classMembers[idx];
      if (currentMembers.containsKey(classMember)) {
        final int memberId=currentMembers.get(classMember);
        if (classMember instanceof FieldInfo) {
          fieldsToRemove.remove(memberId);
        }
 else         if (classMember instanceof MethodInfo) {
          methodsToRemove.remove(memberId);
        }
        putMember(classDeclarationId,memberId,classMember);
      }
 else {
        putMember(classDeclarationId,UNKNOWN,classMember);
      }
    }
    if (fieldsToRemove.size() > 0) {
      final int[] fieldsArray=fieldsToRemove.toArray();
      for (int idx=0; idx < fieldsArray.length; idx++) {
        removeFieldDeclaration(classDeclarationId,fieldsArray[idx]);
      }
    }
    if (methodsToRemove.size() > 0) {
      final int[] methodsArray=methodsToRemove.toArray();
      for (int idx=0; idx < methodsArray.length; idx++) {
        removeMethodDeclaration(classDeclarationId,methodsArray[idx]);
      }
    }
  }
 catch (  Throwable e) {
    throw new CacheCorruptedException(e);
  }
}
