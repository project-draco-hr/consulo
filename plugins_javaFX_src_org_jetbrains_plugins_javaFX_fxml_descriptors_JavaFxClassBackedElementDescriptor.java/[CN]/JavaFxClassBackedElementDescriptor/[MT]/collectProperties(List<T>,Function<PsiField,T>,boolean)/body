{
  final List<PsiField> fieldList=CachedValuesManager.getManager(myPsiClass.getProject()).getCachedValue(myPsiClass,new CachedValueProvider<List<PsiField>>(){
    @Nullable @Override public Result<List<PsiField>> compute(){
      List<PsiField> acceptableFields=new ArrayList<PsiField>();
      final PsiField[] fields=myPsiClass.getAllFields();
      if (fields.length > 0) {
        for (        PsiField field : fields) {
          if (field.hasModifierProperty(PsiModifier.STATIC))           continue;
          final PsiType fieldType=field.getType();
          if (!JavaFxPsiUtil.isReadOnly(myPsiClass,field) && InheritanceUtil.isInheritor(fieldType,JavaFxCommonClassNames.JAVAFX_BEANS_PROPERTY) || fieldType.equalsToText(CommonClassNames.JAVA_LANG_STRING) || (acceptPrimitive && fieldType instanceof PsiPrimitiveType) || GenericsHighlightUtil.getCollectionItemType(field.getType(),myPsiClass.getResolveScope()) != null) {
            acceptableFields.add(field);
          }
        }
      }
      return Result.create(acceptableFields,PsiModificationTracker.JAVA_STRUCTURE_MODIFICATION_COUNT);
    }
  }
);
  if (fieldList != null) {
    for (    PsiField field : fieldList) {
      children.add(factory.fun(field));
    }
  }
}
