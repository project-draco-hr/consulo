{
  if (context != null) {
    if (myPsiClass != null) {
      final List<XmlElementDescriptor> children=new ArrayList<XmlElementDescriptor>();
      collectProperties(children,new Function<PsiField,XmlElementDescriptor>(){
        @Override public XmlElementDescriptor fun(        PsiField field){
          return new JavaFxPropertyElementDescriptor(myPsiClass,field.getName(),false);
        }
      }
,false);
      final JavaFxPropertyElementDescriptor defaultPropertyDescriptor=getDefaultPropertyDescriptor();
      if (defaultPropertyDescriptor != null) {
        Collections.addAll(children,defaultPropertyDescriptor.getElementsDescriptors(context));
      }
 else {
        for (        String name : FxmlConstants.FX_DEFAULT_ELEMENTS) {
          children.add(new JavaFxDefaultPropertyElementDescriptor(name,null));
        }
      }
      collectStaticElementDescriptors(context,children);
      final PsiType returnType=JavaFxPsiUtil.getDefaultPropertyExpectedType(myPsiClass);
      if (returnType != null) {
        JavaFxPropertyElementDescriptor.collectDescriptorsByCollection(returnType,myPsiClass.getResolveScope(),children,myPsiClass.getProject());
      }
      if (!children.isEmpty()) {
        return children.toArray(new XmlElementDescriptor[children.size()]);
      }
    }
  }
  return XmlElementDescriptor.EMPTY_ARRAY;
}
