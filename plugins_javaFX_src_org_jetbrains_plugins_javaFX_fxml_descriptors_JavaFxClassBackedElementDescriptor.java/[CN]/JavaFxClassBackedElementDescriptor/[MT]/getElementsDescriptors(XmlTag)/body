{
  if (context != null) {
    if (myPsiClass != null) {
      final List<XmlElementDescriptor> children=new ArrayList<XmlElementDescriptor>();
      collectProperties(children,true,new Function<PsiField,XmlElementDescriptor>(){
        @Override public XmlElementDescriptor fun(        PsiField field){
          return new JavaFxPropertyElementDescriptor(myPsiClass,field.getName(),false);
        }
      }
);
      collectParentStaticProperties(context,children,new Function<PsiMethod,XmlElementDescriptor>(){
        @Override public XmlElementDescriptor fun(        PsiMethod method){
          final PsiClass aClass=method.getContainingClass();
          return new JavaFxPropertyElementDescriptor(aClass,PropertyUtil.getPropertyName(method.getName()),true);
        }
      }
);
      final PsiAnnotation annotation=AnnotationUtil.findAnnotationInHierarchy(myPsiClass,Collections.singleton(JavaFxCommonClassNames.JAVAFX_BEANS_DEFAULT_PROPERTY));
      if (annotation != null) {
        final PsiAnnotationMemberValue memberValue=annotation.findAttributeValue(null);
        if (memberValue != null) {
          final String propertyName=StringUtil.stripQuotesAroundValue(memberValue.getText());
          final PsiMethod getter=findPropertyGetter(propertyName,myPsiClass);
          if (getter != null) {
            final PsiType returnType=getter.getReturnType();
            JavaFxPropertyElementDescriptor.collectDescriptorsByCollection(returnType,myPsiClass.getResolveScope(),children);
          }
        }
      }
      for (      String name : FxmlConstants.FX_DEFAULT_ELEMENTS) {
        children.add(new JavaFxDefaultPropertyElementDescriptor(name,null));
      }
      if (!children.isEmpty()) {
        return children.toArray(new XmlElementDescriptor[children.size()]);
      }
    }
  }
  return XmlElementDescriptor.EMPTY_ARRAY;
}
