{
  final XmlTag parentTag=context.getParentTag();
  if (parentTag != null) {
    final XmlAttribute attribute=context.getAttribute(FxmlConstants.FX_CONTROLLER);
    if (attribute != null) {
      host.addMessage(((XmlAttributeImpl)attribute).getNameElement(),"fx:controller can only be applied to root element",ValidationHost.ErrorType.ERROR);
    }
  }
  validateTagAccordingToFieldType(context,parentTag,host);
  if (myPsiClass != null && myPsiClass.isValid()) {
    if (myPsiClass.getConstructors().length > 0) {
      final Project project=myPsiClass.getProject();
      final PsiMethod noArgConstructor=myPsiClass.findMethodBySignature(JavaPsiFacade.getElementFactory(project).createConstructor(myPsiClass.getName()),false);
      if (noArgConstructor == null) {
        final PsiClass builderClass=JavaPsiFacade.getInstance(project).findClass(JavaFxCommonClassNames.JAVAFX_FXML_BUILDER,GlobalSearchScope.allScope(project));
        if (builderClass != null) {
          final PsiTypeParameter typeParameter=builderClass.getTypeParameters()[0];
          if (ClassInheritorsSearch.search(builderClass).forEach(new Processor<PsiClass>(){
            @Override public boolean process(            PsiClass aClass){
              final PsiType initType=TypeConversionUtil.getSuperClassSubstitutor(builderClass,aClass,PsiSubstitutor.EMPTY).substitute(typeParameter);
              return !Comparing.equal(myPsiClass,PsiUtil.resolveClassInClassTypeOnly(initType));
            }
          }
)) {
            host.addMessage(context,"Unable to instantiate",ValidationHost.ErrorType.ERROR);
          }
        }
      }
    }
  }
}
