{
  if ((element.getParent() instanceof PsiReferenceExpression))   return;
  final ExpectedTypeInfo[] expectedTypes=ExpectedTypesProvider.getInstance(myNewExpression.getProject()).getExpectedTypes(element,false);
  for (int i=0; i < expectedTypes.length; i++) {
    ExpectedTypeInfo expectedType=expectedTypes[i];
    final PsiType type=expectedType.getType();
    PsiClass aClass=PsiUtil.resolveClassInType(type);
    if (aClass == null)     continue;
    if (aClass.equals(targetClass) || aClass.hasModifierProperty(PsiModifier.FINAL))     continue;
    PsiElementFactory factory=aClass.getManager().getElementFactory();
    if (aClass.isInterface()) {
      final PsiReferenceList implementsList=targetClass.getImplementsList();
      implementsList.add(factory.createClassReferenceElement(aClass));
    }
 else {
      final PsiReferenceList extendsList=targetClass.getExtendsList();
      if (extendsList.getReferencedTypes().length > 0)       continue;
      extendsList.add(factory.createClassReferenceElement(aClass));
    }
  }
}
