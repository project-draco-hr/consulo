{
  if (file instanceof PsiCompiledFile) {
    file=((PsiCompiledFile)file).getDecompiledPsiFile();
    if (file == null)     return;
  }
  if (!editor.getSelectionModel().hasSelection()) {
    return;
  }
  CharSequence text=editor.getDocument().getCharsSequence();
  int cursorOffset=editor.getCaretModel().getOffset();
  if (cursorOffset > 0 && cursorOffset < text.length() && !Character.isJavaIdentifierPart(text.charAt(cursorOffset)) && Character.isJavaIdentifierPart(text.charAt(cursorOffset - 1))) {
    cursorOffset--;
  }
  PsiElement element=file.findElementAt(cursorOffset);
  if (element instanceof PsiWhiteSpace && cursorOffset > 0) {
    PsiElement anotherElement=file.findElementAt(cursorOffset - 1);
    if (!(anotherElement instanceof PsiWhiteSpace)) {
      element=anotherElement;
    }
  }
  while (element instanceof PsiWhiteSpace) {
    if (element.getNextSibling() == null) {
      element=element.getParent();
    }
    element=element.getNextSibling();
    cursorOffset=element.getTextRange().getStartOffset();
  }
  final TextRange selectionRange=new TextRange(editor.getSelectionModel().getSelectionStart(),editor.getSelectionModel().getSelectionEnd());
  final Ref<TextRange> maximumRange=new Ref<TextRange>();
  final int finalCursorOffset=cursorOffset;
  SelectWordUtil.processRanges(element,text,cursorOffset,editor,new Processor<TextRange>(){
    @Override public boolean process(    TextRange range){
      if (selectionRange.contains(range) && !range.equals(selectionRange) && (range.contains(finalCursorOffset) || finalCursorOffset == range.getEndOffset())) {
        if (maximumRange.get() == null || range.contains(maximumRange.get())) {
          maximumRange.set(range);
        }
      }
      return false;
    }
  }
);
  TextRange range=maximumRange.get();
  if (range == null) {
    editor.getSelectionModel().setSelection(cursorOffset,cursorOffset);
  }
 else {
    editor.getSelectionModel().setSelection(range.getStartOffset(),range.getEndOffset());
  }
}
