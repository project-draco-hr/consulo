{
  if (!(configuration instanceof RunProfileWithCompileBeforeLaunchOption)) {
    return true;
  }
  if (configuration instanceof RunConfigurationBase && ((RunConfigurationBase)configuration).excludeCompileBeforeLaunchOption()) {
    return true;
  }
  final RunProfileWithCompileBeforeLaunchOption runConfiguration=(RunProfileWithCompileBeforeLaunchOption)configuration;
  final Ref<Boolean> result=new Ref<Boolean>(Boolean.FALSE);
  try {
    final Semaphore done=new Semaphore();
    done.down();
    final CompileStatusNotification callback=new CompileStatusNotification(){
      @Override public void finished(      final boolean aborted,      final int errors,      final int warnings,      CompileContext compileContext){
        if ((errors == 0 || ignoreErrors) && !aborted) {
          result.set(Boolean.TRUE);
        }
        done.up();
      }
    }
;
    SwingUtilities.invokeAndWait(new Runnable(){
      @Override public void run(){
        CompileScope scope;
        final CompilerManager compilerManager=CompilerManager.getInstance(myProject);
        if (Comparing.equal(Boolean.TRUE.toString(),System.getProperty(MAKE_PROJECT_ON_RUN_KEY))) {
          scope=compilerManager.createProjectCompileScope();
        }
 else {
          final Module[] modules=runConfiguration.getModules();
          if (modules.length > 0) {
            for (            Module module : modules) {
              if (module == null) {
                LOG.error("RunConfiguration should not return null modules. Configuration=" + runConfiguration.getName() + "; class="+ runConfiguration.getClass().getName());
              }
            }
            scope=compilerManager.createModulesCompileScope(modules,true);
          }
 else {
            scope=compilerManager.createProjectCompileScope();
          }
        }
        if (!myProject.isDisposed()) {
          scope.putUserData(RUN_CONFIGURATION,configuration);
          scope.putUserData(RUN_CONFIGURATION_TYPE_ID,configuration.getType().getId());
          scope.putUserData(RUNNER_ID,env.getRunnerId());
          scope.putUserData(EXECUTOR,env.getExecutor());
          compilerManager.make(scope,callback);
        }
 else {
          done.up();
        }
      }
    }
);
    done.waitFor();
  }
 catch (  Exception e) {
    return false;
  }
  return result.get();
}
