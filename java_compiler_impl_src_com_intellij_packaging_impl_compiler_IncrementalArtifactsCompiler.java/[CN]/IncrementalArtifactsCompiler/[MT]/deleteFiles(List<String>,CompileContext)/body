{
  final Set<Artifact> artifactsToBuild=getAffectedArtifacts(context);
  final boolean testMode=ApplicationManager.getApplication().isUnitTestMode();
  final THashSet<String> deletedJars=new THashSet<String>();
  if (LOG.isDebugEnabled()) {
    LOG.debug("Deleting outdated files...");
  }
  final Artifact[] allArtifacts=ArtifactManager.getInstance(context.getProject()).getArtifacts();
  List<File> filesToRefresh=new ArrayList<File>();
  for (  String fullPath : paths) {
    boolean isUnderOutput=false;
    boolean isInArtifactsToBuild=false;
    for (    Artifact artifact : allArtifacts) {
      final String path=artifact.getOutputPath();
      if (!StringUtil.isEmpty(path) && FileUtil.startsWith(fullPath,path)) {
        isUnderOutput=true;
        if (artifactsToBuild.contains(artifact)) {
          isInArtifactsToBuild=true;
          break;
        }
      }
    }
    if (isUnderOutput && !isInArtifactsToBuild)     continue;
    int end=fullPath.indexOf(JarFileSystem.JAR_SEPARATOR);
    String filePath=end != -1 ? fullPath.substring(0,end) : fullPath;
    if (end != -1) {
      deletedJars.add(filePath);
    }
    File file=new File(FileUtil.toSystemDependentName(filePath));
    filesToRefresh.add(file);
    boolean deleted=FileUtil.delete(file);
    if (!deleted && LOG.isDebugEnabled()) {
      LOG.debug("Cannot delete file " + file);
    }
    if (deleted) {
      if (testMode) {
        CompilerManagerImpl.addDeletedPath(file.getAbsolutePath());
      }
      getOutputItemsCache(context.getProject()).remove(fullPath);
    }
  }
  CompilerUtil.refreshIOFiles(filesToRefresh);
  return deletedJars;
}
