{
  final CompileContext context=builderContext.getCompileContext();
  final Set<Artifact> artifactsToBuild=ArtifactCompileScope.getArtifactsToBuild(project,context.getCompileScope());
  List<Artifact> additionalArtifacts=new ArrayList<Artifact>();
  for (  BuildParticipantProvider provider : BuildParticipantProvider.EXTENSION_POINT_NAME.getExtensions()) {
    for (    Module module : ModuleManager.getInstance(project).getModules()) {
      final Collection<? extends BuildParticipant> participants=provider.getParticipants(module);
      for (      BuildParticipant participant : participants) {
        ContainerUtil.addIfNotNull(participant.createArtifact(context),additionalArtifacts);
      }
    }
  }
  artifactsToBuild.addAll(additionalArtifacts);
  final List<Artifact> allArtifacts=new ArrayList<Artifact>(Arrays.asList(ArtifactManager.getInstance(project).getArtifacts()));
  allArtifacts.addAll(additionalArtifacts);
  for (  Artifact artifact : allArtifacts) {
    final String outputPath=artifact.getOutputPath();
    if (outputPath != null && outputPath.length() != 0) {
      collectItems(builderContext,artifact,outputPath,project,artifactsToBuild.contains(artifact));
    }
 else     if (artifactsToBuild.contains(artifact)) {
      context.addMessage(CompilerMessageCategory.ERROR,"Cannot build '" + artifact.getName() + "' artifact: output path is not specified",null,-1,-1);
    }
  }
  context.putUserData(AFFECTED_ARTIFACTS,artifactsToBuild);
  return builderContext.getProcessingItems();
}
