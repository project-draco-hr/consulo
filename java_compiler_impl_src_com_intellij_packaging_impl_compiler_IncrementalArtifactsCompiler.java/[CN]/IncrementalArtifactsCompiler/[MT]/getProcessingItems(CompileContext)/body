{
  return new ReadAction<ProcessingItem[]>(){
    protected void run(    final Result<ProcessingItem[]> result){
      final Project project=context.getProject();
      final Set<Artifact> selfIncludingArtifacts=ArtifactValidationUtil.getInstance(project).getSelfIncludingArtifacts();
      if (!selfIncludingArtifacts.isEmpty()) {
        LOG.info("Self including artifacts: " + selfIncludingArtifacts);
        if (!ArtifactCompileScope.getArtifactsToBuild(project,context.getCompileScope()).isEmpty()) {
          for (          Artifact artifact : selfIncludingArtifacts) {
            context.addMessage(CompilerMessageCategory.ERROR,"Artifact '" + artifact.getName() + "' includes itself in the output layout",null,-1,-1);
          }
        }
        result.setResult(ProcessingItem.EMPTY_ARRAY);
        return;
      }
      ArtifactsProcessingItemsBuilderContext builderContext=new ArtifactsProcessingItemsBuilderContext(context);
      context.putUserData(BUILDER_CONTEXT_KEY,builderContext);
      ArtifactPackagingProcessingItem[] allProcessingItems=collectItems(builderContext,project);
      if (LOG.isDebugEnabled()) {
        int num=Math.min(5000,allProcessingItems.length);
        LOG.debug("All files (" + num + " of "+ allProcessingItems.length+ "):");
        for (int i=0; i < num; i++) {
          LOG.debug(allProcessingItems[i].getFile().getPath());
        }
      }
      try {
        final FileProcessingCompilerStateCache cache=CompilerCacheManager.getInstance(project).getFileProcessingCompilerCache(IncrementalArtifactsCompiler.this);
        for (        ArtifactPackagingProcessingItem item : allProcessingItems) {
          item.init(cache);
        }
      }
 catch (      IOException e) {
        context.requestRebuildNextTime(e.getMessage());
        context.addMessage(CompilerMessageCategory.ERROR,e.getMessage(),null,-1,-1);
        result.setResult(ProcessingItem.EMPTY_ARRAY);
        LOG.info(e);
        return;
      }
      boolean hasFilesToDelete=collectFilesToDelete(context,builderContext.getProcessingItems());
      if (hasFilesToDelete) {
        MockProcessingItem mockItem=new MockProcessingItem(new LightVirtualFile("239239293"));
        result.setResult(ArrayUtil.append(allProcessingItems,mockItem,ProcessingItem.class));
      }
 else {
        result.setResult(allProcessingItems);
      }
    }
  }
.execute().getResultObject();
}
