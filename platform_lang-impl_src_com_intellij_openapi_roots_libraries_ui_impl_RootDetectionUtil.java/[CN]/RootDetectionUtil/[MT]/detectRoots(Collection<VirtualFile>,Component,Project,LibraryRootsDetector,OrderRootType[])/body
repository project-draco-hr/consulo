{
  final List<OrderRoot> result=new ArrayList<OrderRoot>();
  final List<SuggestedChildRootInfo> suggestedRoots=new ArrayList<SuggestedChildRootInfo>();
  new Task.Modal(project,"Scanning for Roots",true){
    @Override public void run(    @NotNull ProgressIndicator indicator){
      try {
        for (        VirtualFile rootCandidate : rootCandidates) {
          final Collection<OrderRoot> roots=detector.detectRoots(rootCandidate,indicator);
          if (!roots.isEmpty() && allRootsEqualTo(roots,rootCandidate)) {
            result.addAll(roots);
          }
 else {
            for (            OrderRoot root : roots) {
              final String typeName=detector.getRootTypeName(root.getType(),root.isJarDirectory());
              LOG.assertTrue(typeName != null,"Unexpected root type " + root.getType().name() + (root.isJarDirectory() ? " (jar directory)" : "")+ ", detectors: "+ detector);
              suggestedRoots.add(new SuggestedChildRootInfo(rootCandidate,root,typeName));
            }
          }
        }
      }
 catch (      ProcessCanceledException ignored) {
      }
    }
  }
.queue();
  if (!suggestedRoots.isEmpty()) {
    final DetectedRootsChooserDialog dialog=parentComponent != null ? new DetectedRootsChooserDialog(parentComponent,suggestedRoots) : new DetectedRootsChooserDialog(project,suggestedRoots);
    dialog.show();
    if (!dialog.isOK()) {
      return Collections.emptyList();
    }
    for (    SuggestedChildRootInfo rootInfo : dialog.getChosenRoots()) {
      result.add(rootInfo.getSuggestedRoot());
    }
  }
  if (result.isEmpty() && rootTypesAllowedToBeSelectedByUserIfNothingIsDetected.length > 0) {
    Map<String,Pair<OrderRootType,Boolean>> types=new HashMap<String,Pair<OrderRootType,Boolean>>();
    for (    OrderRootType type : rootTypesAllowedToBeSelectedByUserIfNothingIsDetected) {
      for (      boolean isDirectory : new boolean[]{false,true}) {
        final String typeName=detector.getRootTypeName(type,isDirectory);
        if (typeName != null) {
          types.put(typeName,Pair.create(type,isDirectory));
        }
      }
    }
    LOG.assertTrue(!types.isEmpty(),"No allowed root types found for " + detector);
    List<String> sortedNames=new ArrayList<String>(types.keySet());
    Collections.sort(sortedNames,String.CASE_INSENSITIVE_ORDER);
    final int i=Messages.showChooseDialog("Choose category for selected files:","Attach Files",ArrayUtil.toStringArray(sortedNames),sortedNames.get(0),null);
    if (i != -1) {
      final Pair<OrderRootType,Boolean> pair=types.get(sortedNames.get(i));
      for (      VirtualFile candidate : rootCandidates) {
        result.add(new OrderRoot(candidate,pair.getFirst(),pair.getSecond()));
      }
    }
  }
  return result;
}
