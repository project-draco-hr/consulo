{
  Project project=aClass.getProject();
  if (candidates.isEmpty() && secondary.isEmpty())   return null;
  final PsiMethodMember[] onlyPrimary=convertToMethodMembers(candidates);
  final PsiMethodMember[] all=ArrayUtil.mergeArrays(onlyPrimary,convertToMethodMembers(secondary));
  final Ref<Boolean> merge=Ref.create(PropertiesComponent.getInstance(project).isTrueValue(PROP_COMBINED_OVERRIDE_IMPLEMENT));
  final MemberChooser<PsiMethodMember> chooser=new MemberChooser<PsiMethodMember>(toImplement || merge.get() ? all : onlyPrimary,false,true,project,PsiUtil.isLanguageLevel5OrHigher(aClass)){
    @Override protected void fillToolbarActions(    DefaultActionGroup group){
      super.fillToolbarActions(group);
      if (toImplement)       return;
      final ToggleAction mergeAction=new ToggleAction("Show methods to implement","Show methods to implement",AllIcons.General.Show_to_implement){
        @Override public boolean isSelected(        AnActionEvent e){
          return merge.get().booleanValue();
        }
        @Override public void setSelected(        AnActionEvent e,        boolean state){
          merge.set(state);
          resetElements(state ? all : onlyPrimary);
          setTitle(getChooserTitle(false,merge));
        }
      }
;
      mergeAction.registerCustomShortcutSet(new CustomShortcutSet(KeyStroke.getKeyStroke(KeyEvent.VK_I,InputEvent.ALT_MASK)),myTree);
      Shortcut[] shortcuts=KeymapManager.getInstance().getActiveKeymap().getShortcuts("OverrideMethods");
      mergeAction.registerCustomShortcutSet(new CustomShortcutSet(shortcuts),myTree);
      group.add(mergeAction);
    }
  }
;
  chooser.setTitle(getChooserTitle(toImplement,merge));
  registerHandlerForComplementaryAction(project,editor,aClass,toImplement,chooser);
  chooser.setCopyJavadocVisible(true);
  if (toImplement) {
    chooser.selectElements(onlyPrimary);
  }
  if (ApplicationManager.getApplication().isUnitTestMode()) {
    if (!toImplement || onlyPrimary.length == 0) {
      chooser.selectElements(all);
    }
    chooser.close(DialogWrapper.OK_EXIT_CODE);
    return chooser;
  }
  chooser.show();
  if (chooser.getExitCode() != DialogWrapper.OK_EXIT_CODE)   return null;
  PropertiesComponent.getInstance(project).setValue(PROP_COMBINED_OVERRIDE_IMPLEMENT,merge.get().toString());
  return chooser;
}
