{
  PsiUtil.setModifierProperty(result,PsiModifier.ABSTRACT,aClass.isInterface());
  PsiUtil.setModifierProperty(result,PsiModifier.NATIVE,false);
  if (!toCopyJavaDoc) {
    PsiDocComment comment=result.getDocComment();
    if (comment != null) {
      comment.delete();
    }
  }
  annotateOnOverrideImplement(result,aClass,method,insertOverrideIfPossible);
  final PsiCodeBlock body=JavaPsiFacade.getInstance(method.getProject()).getElementFactory().createCodeBlockFromText("{}",null);
  PsiCodeBlock oldbody=result.getBody();
  if (oldbody != null) {
    oldbody.replace(body);
  }
 else {
    result.add(body);
  }
  setupMethodBody(result,method,aClass);
  final Project project=method.getProject();
  CodeStyleManager codeStyleManager=CodeStyleManager.getInstance(project);
  CodeStyleSettings settings=CodeStyleSettingsManager.getSettings(project);
  boolean keepBreaks=settings.KEEP_LINE_BREAKS;
  settings.KEEP_LINE_BREAKS=false;
  result=(PsiMethod)JavaCodeStyleManager.getInstance(project).shortenClassReferences(result);
  result=(PsiMethod)codeStyleManager.reformat(result);
  settings.KEEP_LINE_BREAKS=keepBreaks;
  return result;
}
