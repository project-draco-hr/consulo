{
  Map<MethodSignature,PsiMethod> abstracts=new LinkedHashMap<MethodSignature,PsiMethod>();
  Map<MethodSignature,PsiMethod> finals=new LinkedHashMap<MethodSignature,PsiMethod>();
  Map<MethodSignature,PsiMethod> concretes=new LinkedHashMap<MethodSignature,PsiMethod>();
  Collection<HierarchicalMethodSignature> allMethodSigs=aClass.getVisibleSignatures();
  PsiResolveHelper resolveHelper=JavaPsiFacade.getInstance(aClass.getProject()).getResolveHelper();
  for (  HierarchicalMethodSignature signature : allMethodSigs) {
    PsiMethod method=signature.getMethod();
    if (method.hasModifierProperty(PsiModifier.STATIC) || !resolveHelper.isAccessible(method,aClass,aClass))     continue;
    PsiClass hisClass=method.getContainingClass();
    if (hisClass == null)     continue;
    if (method.isConstructor() && (!aClass.isInheritor(hisClass,false) || aClass instanceof PsiAnonymousClass || aClass.isEnum())) {
      continue;
    }
    if (MethodSignatureUtil.findMethodBySignature(aClass,signature,false) != null)     continue;
    if (method.hasModifierProperty(PsiModifier.FINAL)) {
      finals.put(signature,method);
      continue;
    }
    Map<MethodSignature,PsiMethod> map=hisClass.isInterface() || method.hasModifierProperty(PsiModifier.ABSTRACT) ? abstracts : concretes;
    PsiMethod other=map.get(signature);
    if (other == null || preferLeftForImplement(method,other)) {
      map.put(signature,method);
    }
  }
  Map<MethodSignature,CandidateInfo> result=new TreeMap<MethodSignature,CandidateInfo>(new Comparator<MethodSignature>(){
    public int compare(    MethodSignature o1,    MethodSignature o2){
      if (o1 instanceof MethodSignatureBackedByPsiMethod && o2 instanceof MethodSignatureBackedByPsiMethod) {
        PsiMethod m1=((MethodSignatureBackedByPsiMethod)o1).getMethod();
        PsiMethod m2=((MethodSignatureBackedByPsiMethod)o2).getMethod();
        PsiElement p1=m1.getParent();
        PsiElement p2=m2.getParent();
        if (p1 instanceof PsiClass && p2 instanceof PsiClass) {
          if (((PsiClass)p1).isInheritor((PsiClass)p2,true))           return -1;
          if (((PsiClass)p2).isInheritor((PsiClass)p1,true))           return 1;
        }
        return m1.getTextOffset() - m2.getTextOffset();
      }
      return 0;
    }
  }
);
  if (toImplement || aClass.isInterface()) {
    for (    Map.Entry<MethodSignature,PsiMethod> entry : abstracts.entrySet()) {
      MethodSignature signature=entry.getKey();
      PsiMethod abstractOne=entry.getValue();
      PsiMethod concrete=concretes.get(signature);
      if (concrete == null || PsiUtil.getAccessLevel(concrete.getModifierList()) < PsiUtil.getAccessLevel(abstractOne.getModifierList()) || !abstractOne.getContainingClass().isInterface() && abstractOne.getContainingClass().isInheritor(concrete.getContainingClass(),true)) {
        if (finals.get(signature) == null) {
          PsiSubstitutor subst=GenerateMembersUtil.correctSubstitutor(abstractOne,signature.getSubstitutor());
          CandidateInfo info=new CandidateInfo(abstractOne,subst);
          result.put(signature,info);
        }
      }
    }
    for (    final MethodImplementor implementor : getImplementors()) {
      for (      final PsiMethod method : implementor.getMethodsToImplement(aClass)) {
        MethodSignature signature=MethodSignatureUtil.createMethodSignature(method.getName(),method.getParameterList(),method.getTypeParameterList(),PsiSubstitutor.EMPTY);
        CandidateInfo info=new CandidateInfo(method,PsiSubstitutor.EMPTY);
        result.put(signature,info);
      }
    }
  }
 else {
    for (    Map.Entry<MethodSignature,PsiMethod> entry : concretes.entrySet()) {
      MethodSignature signature=entry.getKey();
      PsiMethod concrete=entry.getValue();
      if (finals.get(signature) == null) {
        PsiMethod abstractOne=abstracts.get(signature);
        if (abstractOne == null || !abstractOne.getContainingClass().isInheritor(concrete.getContainingClass(),true) || CommonClassNames.JAVA_LANG_OBJECT.equals(concrete.getContainingClass().getQualifiedName())) {
          PsiSubstitutor subst=GenerateMembersUtil.correctSubstitutor(concrete,signature.getSubstitutor());
          CandidateInfo info=new CandidateInfo(concrete,subst);
          result.put(signature,info);
        }
      }
    }
  }
  return result;
}
