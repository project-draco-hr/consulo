def __init__(self, ui, path):
    self._url = path
    self.ui = ui
    self.root = path
    (self.path, authinfo) = url.getauthinfo((path.rstrip('/') + '/.hg'))
    opener = build_opener(ui, authinfo)
    self.opener = opener(self.path)
    try:
        requirements = self.opener('requires').read().splitlines()
    except IOError as inst:
        if (inst.errno != errno.ENOENT):
            raise
        try:
            self.opener('00changelog.i').read(1)
        except IOError as inst:
            if (inst.errno != errno.ENOENT):
                raise
            msg = (_("'%s' does not appear to be an hg repository") % path)
            raise error.RepoError(msg)
        requirements = []
    for r in requirements:
        if (r not in self.supported):
            raise error.RepoError((_("requirement '%s' not supported") % r))

    def pjoin(a, b):
        return ((a + '/') + b)
    self.store = store.store(requirements, self.path, opener, pjoin)
    self.spath = self.store.path
    self.sopener = self.store.opener
    self.sjoin = self.store.join
    self.manifest = manifest.manifest(self.sopener)
    self.changelog = changelog.changelog(self.sopener)
    self._tags = None
    self.nodetagscache = None
    self._branchcache = None
    self._branchcachetip = None
    self.encodepats = None
    self.decodepats = None
