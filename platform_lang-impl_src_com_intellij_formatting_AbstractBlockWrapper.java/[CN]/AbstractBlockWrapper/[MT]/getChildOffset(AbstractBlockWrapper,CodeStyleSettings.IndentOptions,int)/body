{
  final boolean childStartsNewLine=child.getWhiteSpace().containsLineFeeds();
  IndentImpl.Type childIndentType=child.getIndent().getType();
  IndentData childIndent;
  if (childStartsNewLine || (!getWhiteSpace().containsLineFeeds() && RELATIVE_INDENT_TYPES.contains(childIndentType) && indentAlreadyUsedBefore(child))) {
    childIndent=CoreFormatterUtil.getIndent(options,child,targetBlockStartOffset);
  }
 else   if (child.getIndent().isEnforceIndentToChildren() && !child.getWhiteSpace().containsLineFeeds()) {
    AlignmentImpl alignment=child.getAlignment();
    if (alignment != null) {
      AbstractBlockWrapper anchorBlock=alignment.getOffsetRespBlockBefore(child);
      if (anchorBlock == null) {
        anchorBlock=this;
        if (anchorBlock instanceof CompositeBlockWrapper) {
          List<AbstractBlockWrapper> children=((CompositeBlockWrapper)anchorBlock).getChildren();
          for (          AbstractBlockWrapper c : children) {
            if (c.getStartOffset() != getStartOffset()) {
              anchorBlock=c;
              break;
            }
          }
        }
      }
      return anchorBlock.getNumberOfSymbolsBeforeBlock();
    }
    childIndent=CoreFormatterUtil.getIndent(options,child,getStartOffset());
  }
 else {
    childIndent=new IndentData(0);
  }
  if (childStartsNewLine) {
    if (child.getIndent().isAbsolute()) {
      myFlags&=~CAN_USE_FIRST_CHILD_INDENT_AS_BLOCK_INDENT;
      AbstractBlockWrapper current=this;
      while (current != null && current.getStartOffset() == getStartOffset()) {
        current.myFlags&=~CAN_USE_FIRST_CHILD_INDENT_AS_BLOCK_INDENT;
        current=current.myParent;
      }
      return childIndent;
    }
 else     if (child.getIndent().isRelativeToDirectParent() && child.getStartOffset() > getStartOffset()) {
      return childIndent.add(getNumberOfSymbolsBeforeBlock());
    }
  }
  if (child.getStartOffset() == getStartOffset()) {
    final boolean newValue=(myFlags & CAN_USE_FIRST_CHILD_INDENT_AS_BLOCK_INDENT) != 0 && (child.myFlags & CAN_USE_FIRST_CHILD_INDENT_AS_BLOCK_INDENT) != 0 && childIndent.isEmpty();
    setCanUseFirstChildIndentAsBlockIndent(newValue);
  }
  if (getStartOffset() == targetBlockStartOffset) {
    if (myParent == null) {
      return childIndent;
    }
 else {
      return childIndent.add(myParent.getChildOffset(this,options,targetBlockStartOffset));
    }
  }
 else   if (!getWhiteSpace().containsLineFeeds()) {
    if (isIndentAffectedAlignment(child)) {
      return createAlignmentIndent(childIndent,child);
    }
 else {
      return childIndent.add(myParent.getChildOffset(this,options,targetBlockStartOffset));
    }
  }
 else {
    if (myParent == null)     return childIndent.add(getWhiteSpace());
    if (getIndent().isAbsolute()) {
      if (myParent.myParent != null) {
        return childIndent.add(myParent.myParent.getChildOffset(myParent,options,targetBlockStartOffset));
      }
 else {
        return childIndent.add(getWhiteSpace());
      }
    }
    if ((myFlags & CAN_USE_FIRST_CHILD_INDENT_AS_BLOCK_INDENT) != 0) {
      if (isIndentAffectedAlignment(child)) {
        return createAlignmentIndent(childIndent,child);
      }
 else {
        return childIndent.add(getWhiteSpace());
      }
    }
 else {
      return childIndent.add(myParent.getChildOffset(this,options,targetBlockStartOffset));
    }
  }
}
