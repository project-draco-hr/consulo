{
  assertIsDispatchThread();
  validateCallContext();
  if (mySkipChangeRequests) {
    return;
  }
  myEditor.getCaretModel().doWithCaretMerging(new Runnable(){
    @Override public void run(){
      final LogicalPosition logicalPosition=myEditor.offsetToLogicalPosition(offset);
      CaretEvent event=moveToLogicalPosition(logicalPosition,locateBeforeSoftWrap,null,false);
      final LogicalPosition positionByOffsetAfterMove=myEditor.offsetToLogicalPosition(myOffset);
      if (!positionByOffsetAfterMove.equals(logicalPosition)) {
        StringBuilder debugBuffer=new StringBuilder();
        moveToLogicalPosition(logicalPosition,locateBeforeSoftWrap,debugBuffer,true);
        int textStart=Math.max(0,Math.min(offset,myOffset) - 1);
        final DocumentEx document=myEditor.getDocument();
        int textEnd=Math.min(document.getTextLength() - 1,Math.max(offset,myOffset) + 1);
        CharSequence text=document.getCharsSequence().subSequence(textStart,textEnd);
        int inverseOffset=myEditor.logicalPositionToOffset(logicalPosition);
        LogMessageEx.error(LOG,"caret moved to wrong offset. Please submit a dedicated ticket and attach current editor's text to it.","Requested: offset=" + offset + ", logical position='"+ logicalPosition+ "' but actual: offset="+ myOffset+ ", logical position='"+ myLogicalCaret+ "' ("+ positionByOffsetAfterMove+ "). "+ myEditor.dumpState()+ "\ninterested text ["+ textStart+ ";"+ textEnd+ "): '"+ text+ "'\n debug trace: "+ debugBuffer+ "\nLogical position -> offset ('"+ logicalPosition+ "'->'"+ inverseOffset+ "')");
      }
      if (event != null) {
        myEditor.getCaretModel().fireCaretPositionChanged(event);
        EditorActionUtil.selectNonexpandableFold(myEditor);
      }
    }
  }
);
}
