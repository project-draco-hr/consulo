{
  assertIsDispatchThread();
  int lineShift=above ? -1 : 1;
  final CaretImpl clone=cloneWithoutSelection();
  final int newSelectionStartOffset, newSelectionEndOffset, newSelectionStartColumn, newSelectionEndColumn;
  final VisualPosition newSelectionStartPosition, newSelectionEndPosition;
  final boolean hasNewSelection;
  if (hasSelection() || myDesiredSelectionStartColumn >= 0 || myDesiredSelectionEndColumn >= 0) {
    VisualPosition startPosition=getSelectionStartPosition();
    VisualPosition endPosition=getSelectionEndPosition();
    VisualPosition leadPosition=getLeadSelectionPosition();
    boolean leadIsStart=leadPosition.equals(startPosition);
    boolean leadIsEnd=leadPosition.equals(endPosition);
    LogicalPosition selectionStart=myEditor.visualToLogicalPosition(leadIsStart || leadIsEnd ? leadPosition : startPosition);
    LogicalPosition selectionEnd=myEditor.visualToLogicalPosition(leadIsEnd ? startPosition : endPosition);
    newSelectionStartColumn=myDesiredSelectionStartColumn < 0 ? selectionStart.column : myDesiredSelectionStartColumn;
    newSelectionEndColumn=myDesiredSelectionEndColumn < 0 ? selectionEnd.column : myDesiredSelectionEndColumn;
    LogicalPosition newSelectionStart=truncate(selectionStart.line + lineShift,newSelectionStartColumn);
    LogicalPosition newSelectionEnd=truncate(selectionEnd.line + lineShift,newSelectionEndColumn);
    newSelectionStartOffset=myEditor.logicalPositionToOffset(newSelectionStart);
    newSelectionEndOffset=myEditor.logicalPositionToOffset(newSelectionEnd);
    newSelectionStartPosition=myEditor.logicalToVisualPosition(newSelectionStart);
    newSelectionEndPosition=myEditor.logicalToVisualPosition(newSelectionEnd);
    hasNewSelection=!newSelectionStart.equals(newSelectionEnd);
  }
 else {
    newSelectionStartOffset=0;
    newSelectionEndOffset=0;
    newSelectionStartPosition=null;
    newSelectionEndPosition=null;
    hasNewSelection=false;
    newSelectionStartColumn=-1;
    newSelectionEndColumn=-1;
  }
  LogicalPosition oldPosition=getLogicalPosition();
  int newLine=oldPosition.line + lineShift;
  if (newLine < 0 || newLine >= myEditor.getDocument().getLineCount()) {
    Disposer.dispose(clone);
    return null;
  }
  clone.moveToLogicalPosition(new LogicalPosition(newLine,myLastColumnNumber),false,null,false);
  clone.myLastColumnNumber=myLastColumnNumber;
  clone.myDesiredX=myDesiredX >= 0 ? myDesiredX : getCurrentX();
  clone.myDesiredSelectionStartColumn=newSelectionStartColumn;
  clone.myDesiredSelectionEndColumn=newSelectionEndColumn;
  if (myEditor.getCaretModel().addCaret(clone)) {
    if (hasNewSelection) {
      myEditor.getCaretModel().doWithCaretMerging(new Runnable(){
        @Override public void run(){
          clone.setSelection(newSelectionStartPosition,newSelectionStartOffset,newSelectionEndPosition,newSelectionEndOffset);
        }
      }
);
      if (!clone.isValid()) {
        return null;
      }
    }
    myEditor.getScrollingModel().scrollTo(clone.getLogicalPosition(),ScrollType.RELATIVE);
    return clone;
  }
 else {
    Disposer.dispose(clone);
    return null;
  }
}
