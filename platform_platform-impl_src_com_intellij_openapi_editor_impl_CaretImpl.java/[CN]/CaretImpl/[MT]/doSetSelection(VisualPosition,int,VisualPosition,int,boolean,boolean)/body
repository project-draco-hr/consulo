{
  myEditor.getCaretModel().doWithCaretMerging(new Runnable(){
    public void run(){
      int startOffset=_startOffset;
      int endOffset=_endOffset;
      myUnknownDirection=false;
      final Document doc=myEditor.getDocument();
      validateContext(true);
      myEditor.getSelectionModel().removeBlockSelection();
      int textLength=doc.getTextLength();
      if (startOffset < 0 || startOffset > textLength) {
        LOG.error("Wrong startOffset: " + startOffset + ", textLength="+ textLength);
      }
      if (endOffset < 0 || endOffset > textLength) {
        LOG.error("Wrong endOffset: " + endOffset + ", textLength="+ textLength);
      }
      if (!visualPositionAware && startOffset == endOffset) {
        removeSelection();
        return;
      }
      boolean switchedOffsets=false;
      if (startOffset > endOffset) {
        int tmp=startOffset;
        startOffset=endOffset;
        endOffset=tmp;
        switchedOffsets=true;
      }
      FoldingModelEx foldingModel=myEditor.getFoldingModel();
      FoldRegion startFold=foldingModel.getCollapsedRegionAtOffset(startOffset);
      if (startFold != null && startFold.getStartOffset() < startOffset) {
        startOffset=startFold.getStartOffset();
      }
      FoldRegion endFold=foldingModel.getCollapsedRegionAtOffset(endOffset);
      if (endFold != null && endFold.getStartOffset() < endOffset) {
        endOffset=endFold.getEndOffset();
      }
      int oldSelectionStart;
      int oldSelectionEnd;
      if (hasSelection()) {
        oldSelectionStart=getSelectionStart();
        oldSelectionEnd=getSelectionEnd();
        if (oldSelectionStart == startOffset && oldSelectionEnd == endOffset && !visualPositionAware)         return;
      }
 else {
        oldSelectionStart=oldSelectionEnd=getOffset();
      }
      MyRangeMarker marker=mySelectionMarker;
      if (marker != null) {
        marker.release();
      }
      marker=new MyRangeMarker((DocumentEx)doc,startOffset,endOffset);
      myStartVirtualOffset=0;
      myEndVirtualOffset=0;
      if (visualPositionAware) {
        if (endPosition.after(startPosition)) {
          marker.setStartPosition(startPosition);
          marker.setEndPosition(endPosition);
          marker.setEndPositionIsLead(false);
        }
 else {
          marker.setStartPosition(endPosition);
          marker.setEndPosition(startPosition);
          marker.setEndPositionIsLead(true);
        }
        if (isVirtualSelectionEnabled() && myEditor.getDocument().getLineNumber(startOffset) == myEditor.getDocument().getLineNumber(endOffset)) {
          int endLineColumn=myEditor.offsetToVisualPosition(endOffset).column;
          int startDiff=EditorUtil.isAtLineEnd(myEditor,switchedOffsets ? endOffset : startOffset) ? startPosition.column - endLineColumn : 0;
          int endDiff=EditorUtil.isAtLineEnd(myEditor,switchedOffsets ? startOffset : endOffset) ? endPosition.column - endLineColumn : 0;
          myStartVirtualOffset=Math.max(0,Math.min(startDiff,endDiff));
          myEndVirtualOffset=Math.max(0,Math.max(startDiff,endDiff));
        }
      }
      mySelectionMarker=marker;
      myEditor.getSelectionModel().fireSelectionChanged(oldSelectionStart,oldSelectionEnd,startOffset,endOffset);
      if (updateSystemSelection) {
        updateSystemSelection();
      }
    }
  }
);
}
