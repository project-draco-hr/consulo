{
  assertIsDispatchThread();
  validateCallContext();
  if (mySkipChangeRequests) {
    return;
  }
  if (myReportCaretMoves) {
    LogMessageEx.error(LOG,"Unexpected caret move request");
  }
  if (!myEditor.isStickySelection() && !myEditor.getCaretModel().isDocumentChanged && !pos.equals(myVisibleCaret)) {
    CopyPasteManager.getInstance().stopKillRings();
  }
  myDesiredX=-1;
  int column=pos.column;
  int line=pos.line;
  if (column < 0)   column=0;
  if (line < 0)   line=0;
  int lastLine=myEditor.getVisibleLineCount() - 1;
  if (lastLine <= 0) {
    lastLine=0;
  }
  if (line > lastLine) {
    line=lastLine;
  }
  EditorSettings editorSettings=myEditor.getSettings();
  if (!editorSettings.isVirtualSpace() && line <= lastLine) {
    int lineEndColumn=EditorUtil.getLastVisualLineColumnNumber(myEditor,line);
    if (column > lineEndColumn) {
      column=lineEndColumn;
    }
    if (column < 0 && line > 0) {
      line--;
      column=EditorUtil.getLastVisualLineColumnNumber(myEditor,line);
    }
  }
  myVisibleCaret=new VisualPosition(line,column);
  VerticalInfo oldInfo=myCaretInfo;
  LogicalPosition oldPosition=myLogicalCaret;
  setCurrentLogicalCaret(myEditor.visualToLogicalPosition(myVisibleCaret));
  updateOffsetsFromLogicalPosition();
  LOG.assertTrue(myOffset >= 0 && myOffset <= myEditor.getDocument().getTextLength());
  updateVisualLineInfo();
  myEditor.getFoldingModel().flushCaretPosition();
  setLastColumnNumber(myLogicalCaret.column);
  myDesiredSelectionStartColumn=myDesiredSelectionEndColumn=-1;
  myEditor.updateCaretCursor();
  requestRepaint(oldInfo);
  if (fireListeners && !oldPosition.equals(myLogicalCaret)) {
    CaretEvent event=new CaretEvent(myEditor,this,oldPosition,myLogicalCaret);
    myEditor.getCaretModel().fireCaretPositionChanged(event);
  }
}
