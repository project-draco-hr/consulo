{
  if (!isApplicable) {
    return false;
  }
  Project project=file.getProject();
  Document document=editor.getDocument();
  CaretModel caretModel=editor.getCaretModel();
  int caretOffset=caretModel.getOffset();
  int offset=CharArrayUtil.shiftForward(document.getCharsSequence(),caretOffset," \t");
  int beforeWhitespaceOffset=CharArrayUtil.shiftBackward(document.getCharsSequence(),offset - 1," \t") + 1;
  LogicalPosition logicalPosition=caretOffset < offset ? editor.offsetToLogicalPosition(offset) : caretModel.getLogicalPosition();
  int lineStartOffset=document.getLineStartOffset(logicalPosition.line);
  if (lineStartOffset < beforeWhitespaceOffset) {
    if (caretWasAtLineStart && beforeWhitespaceOffset <= offset) {
      String spacing;
      if (precalculatedSpacing == null) {
        PsiDocumentManager.getInstance(project).commitDocument(document);
        spacing=getSpacing(file,offset);
      }
 else {
        spacing=precalculatedSpacing;
      }
      if (beforeWhitespaceOffset < offset || !spacing.isEmpty()) {
        document.replaceString(beforeWhitespaceOffset,offset,spacing);
        caretModel.moveToOffset(beforeWhitespaceOffset + spacing.length());
        return true;
      }
    }
    return false;
  }
  PsiDocumentManager.getInstance(project).commitDocument(document);
  CodeStyleFacade codeStyleFacade=CodeStyleFacade.getInstance(project);
  String indent=codeStyleFacade.getLineIndent(document,offset);
  if (indent == null) {
    return false;
  }
  int tabSize=getTabSize(codeStyleFacade,document);
  int targetColumn=getWidth(indent,tabSize);
  if (logicalPosition.column == targetColumn) {
    if (caretOffset < offset) {
      caretModel.moveToLogicalPosition(logicalPosition);
      return true;
    }
    return false;
  }
  if (caretWasAtLineStart || logicalPosition.column > targetColumn) {
    document.replaceString(lineStartOffset,offset,indent);
    caretModel.moveToLogicalPosition(new LogicalPosition(logicalPosition.line,targetColumn));
    return true;
  }
  if (logicalPosition.line == 0) {
    return false;
  }
  int prevLineStartOffset=document.getLineStartOffset(logicalPosition.line - 1);
  int prevLineEndOffset=document.getLineEndOffset(logicalPosition.line - 1);
  int targetOffset=CharArrayUtil.shiftBackward(document.getCharsSequence(),prevLineEndOffset - 1," \t") + 1;
  if (prevLineStartOffset < targetOffset) {
    String spacing=getSpacing(file,offset);
    document.replaceString(targetOffset,offset,spacing);
    caretModel.moveToOffset(targetOffset + spacing.length());
  }
 else {
    document.replaceString(prevLineStartOffset,offset,indent);
    caretModel.moveToLogicalPosition(new LogicalPosition(logicalPosition.line - 1,targetColumn));
  }
  return true;
}
