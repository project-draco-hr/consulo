{
  if (CodeInsightSettings.getInstance().SMART_BACKSPACE != CodeInsightSettings.AUTOINDENT || !StringUtil.isWhiteSpace(c)) {
    isApplicable=false;
    return;
  }
  LanguageCodeStyleSettingsProvider codeStyleSettingsProvider=LanguageCodeStyleSettingsProvider.forLanguage(file.getLanguage());
  if (codeStyleSettingsProvider != null && codeStyleSettingsProvider.isIndentBasedLanguageSemantics()) {
    isApplicable=false;
    return;
  }
  Document document=editor.getDocument();
  CharSequence charSequence=document.getCharsSequence();
  CaretModel caretModel=editor.getCaretModel();
  int caretOffset=caretModel.getOffset();
  LogicalPosition pos=caretModel.getLogicalPosition();
  isApplicable=true;
  caretWasAtLineStart=pos.column == 0;
  precalculatedSpacing=null;
  if (caretWasAtLineStart && pos.line > 0 && caretOffset < charSequence.length() && !StringUtil.isWhiteSpace(charSequence.charAt(caretOffset))) {
    int prevLineEnd=document.getLineEndOffset(pos.line - 1);
    if (prevLineEnd > 0 && !StringUtil.isWhiteSpace(charSequence.charAt(prevLineEnd - 1))) {
      PsiDocumentManager.getInstance(file.getProject()).commitDocument(document);
      precalculatedSpacing=getSpacing(file,caretOffset);
    }
  }
}
