{
  super(new BorderLayout());
  myTableModel=new MyTableModel();
  myTable=new Table(myTableModel);
  myTable.setIntercellSpacing(new Dimension(0,0));
  myTable.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
  myTable.setColumnSelectionAllowed(false);
  JBScrollPane pane=ScrollPaneFactory.createScrollPane(myTable);
  pane.setPreferredSize(new Dimension(100,155));
  final TableColumnModel columnModel=myTable.getColumnModel();
  final TableColumn dirNameColumn=columnModel.getColumn(myTableModel.DIRNAME_COLUMN_INDEX);
  final String title="Generated Sources Directory Name";
  dirNameColumn.setHeaderValue(title);
  final JTableHeader tableHeader=myTable.getTableHeader();
  final FontMetrics metrics=tableHeader.getFontMetrics(tableHeader.getFont());
  final int preferredWidth=metrics.stringWidth(title) + 12;
  dirNameColumn.setPreferredWidth(preferredWidth);
  dirNameColumn.setMaxWidth(preferredWidth + 20);
  dirNameColumn.setCellRenderer(new MyElementColumnCellRenderer());
  final TableColumn moduleColumn=columnModel.getColumn(myTableModel.ELEMENT_COLUMN_INDEX);
  moduleColumn.setHeaderValue("Module");
  moduleColumn.setCellRenderer(new MyElementColumnCellRenderer());
  add(pane,BorderLayout.CENTER);
  final JButton addButton=new JButton("Add");
  addButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final Set<Module> projectModules=new HashSet<Module>(Arrays.asList(ModuleManager.getInstance(project).getModules()));
      projectModules.removeAll(myTableModel.getAllModules());
      final ChooseModulesDialog chooser=new ChooseModulesDialog(ProcessedModulesTable.this,new ArrayList<Module>(projectModules),"ChooseModule");
      chooser.show();
      if (chooser.isOK()) {
        final List<Module> chosen=chooser.getChosenElements();
        for (        Module module : chosen) {
          myTableModel.addElement(module,null);
        }
      }
    }
  }
);
  final JButton removeButton=new JButton("Remove");
  myTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      removeButton.setEnabled(myTable.getSelectedRowCount() > 0);
    }
  }
);
  removeButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      TableUtil.removeSelectedItems(myTable);
    }
  }
);
  final JPanel buttonPanel=new JPanel(new GridBagLayout());
  buttonPanel.add(addButton,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,0.0,GridBagConstraints.NORTH,GridBagConstraints.HORIZONTAL,new Insets(0,6,0,0),0,0));
  buttonPanel.add(removeButton,new GridBagConstraints(0,GridBagConstraints.RELATIVE,1,1,1.0,1.0,GridBagConstraints.NORTH,GridBagConstraints.HORIZONTAL,new Insets(5,6,0,0),0,0));
  add(buttonPanel,BorderLayout.EAST);
  final SpeedSearchBase<Table> speedSearch=new SpeedSearchBase<Table>(myTable){
    public int getSelectedIndex(){
      return myTable.getSelectedRow();
    }
    public Object[] getAllElements(){
      final int count=myTableModel.getRowCount();
      Object[] elements=new Object[count];
      for (int idx=0; idx < count; idx++) {
        elements[idx]=myTableModel.getModuleAt(idx);
      }
      return elements;
    }
    public String getElementText(    Object element){
      return ((Module)element).getName() + " (" + FileUtil.toSystemDependentName(((Module)element).getModuleFilePath())+ ")";
    }
    public void selectElement(    Object element,    String selectedText){
      final int count=myTableModel.getRowCount();
      for (int row=0; row < count; row++) {
        if (element.equals(myTableModel.getModuleAt(row))) {
          myTable.getSelectionModel().setSelectionInterval(row,row);
          TableUtil.scrollSelectionToVisible(myTable);
          break;
        }
      }
    }
  }
;
  speedSearch.setComparator(new SpeedSearchBase.SpeedSearchComparator(false));
}
