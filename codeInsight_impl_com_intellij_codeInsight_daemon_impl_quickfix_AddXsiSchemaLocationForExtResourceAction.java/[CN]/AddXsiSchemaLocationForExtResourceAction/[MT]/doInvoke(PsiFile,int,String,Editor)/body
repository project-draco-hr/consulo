{
  final XmlTag tag=PsiTreeUtil.getParentOfType(file.findElementAt(offset),XmlTag.class);
  if (tag == null)   return;
  final List<String> schemaLocations=new ArrayList<String>();
  CreateNSDeclarationIntentionFix.processExternalUris(new CreateNSDeclarationIntentionFix.TagMetaHandler(tag.getLocalName()),file,new CreateNSDeclarationIntentionFix.ExternalUriProcessor(){
    public void process(    @NotNull final String currentUri,    final String url){
      if (currentUri.equals(uri) && url != null)       schemaLocations.add(url);
    }
  }
);
  CreateNSDeclarationIntentionFix.runActionOverSeveralAttributeValuesAfterLettingUserSelectTheNeededOne(schemaLocations.toArray(new String[schemaLocations.size()]),file.getProject(),new CreateNSDeclarationIntentionFix.StringToAttributeProcessor(){
    @NotNull public TextRange doSomethingWithGivenStringToProduceXmlAttributeNowPlease(    @NotNull final String attrName) throws IncorrectOperationException {
      return doIt(file,uri,tag,attrName);
    }
  }
,XmlErrorMessages.message("select.namespace.location.title"),this,editor,SOMEWHERE_XSD);
}
