{
  final PsiReference invocationReference=TargetElementUtilBase.findReference(editor);
  final InlineHandler.Settings settings=languageSpecific.prepareInlineElement(element,editor,invocationReference != null);
  if (settings == null)   return false;
  final Collection<PsiReference> allReferences=settings.isOnlyOneReferenceToInline() ? Collections.singleton(invocationReference) : ReferencesSearch.search(element).findAll();
  final Map<Language,InlineHandler.Inliner> inliners=new HashMap<Language,InlineHandler.Inliner>();
  final Set<String> conflicts=new HashSet<String>();
  for (  PsiReference ref : allReferences) {
    final Language language=ref.getElement().getLanguage();
    if (inliners.containsKey(language))     continue;
    InlineHandler.Inliner inliner=null;
    final List<InlineHandler> handlers=InlineHandlers.getInlineHandlers(language);
    for (    InlineHandler handler : handlers) {
      inliner=handler.createInliner(element);
      if (inliner != null) {
        inliners.put(language,inliner);
        break;
      }
    }
    if (inliner == null) {
      conflicts.add("Cannot inline reference from " + language.getID());
    }
  }
  for (  PsiReference reference : allReferences) {
    collectConflicts(reference,element,inliners,conflicts);
  }
  final Project project=element.getProject();
  if (!conflicts.isEmpty()) {
    final ConflictsDialog conflictsDialog=new ConflictsDialog(project,conflicts);
    conflictsDialog.show();
    if (!conflictsDialog.isOK())     return true;
  }
  HashSet<PsiElement> elements=new HashSet<PsiElement>();
  for (  PsiReference reference : allReferences) {
    PsiElement refElement=reference.getElement();
    if (refElement != null) {
      elements.add(refElement);
    }
  }
  if (!settings.isOnlyOneReferenceToInline()) {
    elements.add(element);
  }
  if (!CommonRefactoringUtil.checkReadOnlyStatusRecursively(project,elements)) {
    return true;
  }
  ApplicationManager.getApplication().runWriteAction(new Runnable(){
    public void run(){
      final String subj=element instanceof PsiNamedElement ? ((PsiNamedElement)element).getName() : "element";
      CommandProcessor.getInstance().executeCommand(project,new Runnable(){
        public void run(){
          for (          PsiReference reference : allReferences) {
            inlineReference(reference,element,inliners);
          }
          if (!settings.isOnlyOneReferenceToInline()) {
            languageSpecific.removeDefinition(element);
          }
        }
      }
,RefactoringBundle.message("inline.command",subj),null);
    }
  }
);
  return true;
}
