{
  PsiManager manager=method.getManager();
  PsiSearchHelper helper=manager.getSearchHelper();
  GlobalSearchScope projectScope=GlobalSearchScope.projectScope(myProject);
  PsiMethod[] overridingMethods=helper.findOverridingMethods(method,method.getUseScope(),true);
  for (  PsiMethod overridingMethod : overridingMethods) {
    result.add(new OverriderUsageInfo(overridingMethod,method,isOriginal,isToModifyArgs,isToThrowExceptions));
  }
  boolean needToChangeCalls=!myGenerateDelegate && (myChangeInfo.isNameChanged || myChangeInfo.isParameterSetOrOrderChanged || myChangeInfo.isExceptionSetOrOrderChanged|| myChangeInfo.isVisibilityChanged);
  if (needToChangeCalls) {
    int parameterCount=method.getParameterList().getParametersCount();
    PsiReference[] refs=helper.findReferencesIncludingOverriding(method,projectScope,true);
    for (    PsiReference ref : refs) {
      PsiElement element=ref.getElement();
      boolean isToCatchExceptions=isToThrowExceptions && needToCatchExceptions(RefactoringUtil.getEnclosingMethod(element));
      if (!isToCatchExceptions) {
        if (RefactoringUtil.isMethodUsage(element)) {
          PsiExpressionList list=RefactoringUtil.getArgumentListByMethodReference(element);
          if (!method.isVarArgs() && list.getExpressions().length != parameterCount)           continue;
        }
      }
      if (RefactoringUtil.isMethodUsage(element)) {
        result.add(new MethodCallUsageInfo(element,isToModifyArgs,isToCatchExceptions));
      }
 else       if (ref.getElement() instanceof PsiDocTagValue) {
        result.add(new UsageInfo(ref.getElement()));
      }
 else {
        result.add(new MoveRenameUsageInfo(element,ref,method));
      }
    }
    if (method.isConstructor() && parameterCount == 0) {
      RefactoringUtil.visitImplicitConstructorUsages(method.getContainingClass(),new DefaultConstructorUsageCollector(result));
    }
  }
 else   if (myChangeInfo.isParameterTypesChanged) {
    PsiReference[] refs=helper.findReferencesIncludingOverriding(method,projectScope,true);
    for (    PsiReference reference : refs) {
      if (reference.getElement() instanceof PsiDocTagValue) {
        result.add(new UsageInfo(reference.getElement()));
      }
    }
  }
  detectLocalsCollisionsInMethod(method,result,isOriginal);
  for (  final PsiMethod overridingMethod : overridingMethods) {
    detectLocalsCollisionsInMethod(overridingMethod,result,isOriginal);
  }
  return overridingMethods;
}
