{
  final PsiElementFactory factory=JavaPsiFacade.getInstance(list.getProject()).getElementFactory();
  if (changeInfo.isParameterSetOrOrderChanged) {
    if (changeInfo.isPropagationEnabled) {
      final ParameterInfo[] createdParmsInfo=changeInfo.getCreatedParmsInfoWithoutVarargs();
      for (      ParameterInfo info : createdParmsInfo) {
        PsiExpression newArg;
        if (toInsertDefaultValue) {
          newArg=createDefaultValue(factory,info,list);
        }
 else {
          newArg=factory.createExpressionFromText(info.getName(),list);
        }
        list.add(newArg);
      }
    }
 else {
      final PsiExpression[] args=list.getExpressions();
      final int nonVarargCount=getNonVarargCount(changeInfo,args);
      final int varargCount=args.length - nonVarargCount;
      final int newArgsLength;
      final int newNonVarargCount;
      if (changeInfo.retainsVarargs) {
        newNonVarargCount=changeInfo.newParms.length - 1;
        newArgsLength=newNonVarargCount + varargCount;
      }
 else       if (changeInfo.obtainsVarags) {
        newNonVarargCount=changeInfo.newParms.length - 1;
        newArgsLength=newNonVarargCount;
      }
 else {
        newNonVarargCount=changeInfo.newParms.length;
        newArgsLength=changeInfo.newParms.length;
      }
      final PsiExpression[] newArgs=new PsiExpression[newArgsLength];
      for (int i=0; i < newNonVarargCount; i++) {
        final ParameterInfo info=changeInfo.newParms[i];
        final int index=info.oldParameterIndex;
        if (index >= 0) {
          newArgs[i]=args[index];
        }
 else {
          if (toInsertDefaultValue) {
            newArgs[i]=createDefaultValue(factory,info,list);
          }
 else {
            newArgs[i]=factory.createExpressionFromText(info.getName(),list);
          }
        }
      }
      final int newVarargCount=newArgsLength - newNonVarargCount;
      LOG.assertTrue(newVarargCount == 0 || newVarargCount == varargCount);
      for (int i=0; i < newVarargCount; i++) {
        newArgs[newNonVarargCount + i]=args[nonVarargCount + i];
      }
      ChangeSignatureUtil.synchronizeList(list,Arrays.asList(newArgs),ExpressionList.INSTANCE,changeInfo.toRemoveParm);
    }
  }
}
