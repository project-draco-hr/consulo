{
  PsiElementFactory factory=method.getManager().getElementFactory();
  if (myChangeInfo.isVisibilityChanged) {
    PsiModifierList modifierList=method.getModifierList();
    final String highestVisibility=isOriginal ? myNewVisibility : VisibilityUtil.getHighestVisibility(myNewVisibility,VisibilityUtil.getVisibilityModifier(modifierList));
    RefactoringUtil.setVisibility(modifierList,highestVisibility);
  }
  if (myChangeInfo.isNameChanged) {
    final EjbMethodRole role=com.intellij.javaee.ejb.role.EjbRolesUtil.getEjbRolesUtil().getEjbRole(method);
    if (role instanceof EjbImplMethodRoleImpl && myChangeInfo.ejbRole instanceof EjbDeclMethodRoleImpl) {
      EjbDeclMethodRole declRole=(EjbDeclMethodRole)myChangeInfo.ejbRole;
      String newName=myChangeInfo.newName;
      for (      PsiMethod oldMethod : declRole.suggestImplementations()) {
        if (oldMethod.getName().equals(method.getName())) {
          PsiMethod newDeclMethod=(PsiMethod)method.copy();
          newDeclMethod.getNameIdentifier().replace(myChangeInfo.newNameIdentifier);
          newName=EjbDeclMethodRoleImpl.suggestImplNames(newDeclMethod.getName(),declRole.getType(),declRole.getEnterpriseBean())[0];
          break;
        }
      }
      method.getNameIdentifier().replace(factory.createIdentifier(newName));
    }
 else {
      method.getNameIdentifier().replace(myChangeInfo.newNameIdentifier);
    }
  }
  final PsiSubstitutor substitutor=baseMethod == null ? PsiSubstitutor.EMPTY : calculateSubstitutor(method,baseMethod);
  if (myChangeInfo.isReturnTypeChanged) {
    final PsiType returnType=substitutor.substitute(myChangeInfo.newTypeElement);
    method.getReturnTypeElement().replace(factory.createTypeElement(returnType));
  }
  PsiParameterList list=method.getParameterList();
  PsiParameter[] parameters=list.getParameters();
  PsiParameter[] newParms=new PsiParameter[myChangeInfo.newParms.length];
  for (int i=0; i < newParms.length; i++) {
    ParameterInfo info=myChangeInfo.newParms[i];
    int index=info.oldParameterIndex;
    if (index >= 0) {
      PsiParameter parameter=parameters[index];
      newParms[i]=parameter;
      String oldName=myChangeInfo.oldParameterNames[index];
      if (!oldName.equals(info.getName()) && oldName.equals(parameter.getName())) {
        PsiIdentifier newIdentifier=factory.createIdentifier(info.getName());
        parameter.getNameIdentifier().replace(newIdentifier);
      }
      String oldType=myChangeInfo.oldParameterTypes[index];
      if (!oldType.equals(info.getTypeText())) {
        parameter.normalizeDeclaration();
        PsiType newType=substitutor.substitute(info.createType(myChangeInfo.getMethod().getParameterList(),myManager));
        parameter.getTypeElement().replace(factory.createTypeElement(newType));
      }
    }
 else {
      newParms[i]=createNewParameter(info,substitutor);
    }
  }
  resolveParameterVsFieldsConflicts(newParms,method,list,myChangeInfo.toRemoveParm);
  fixJavadocsForChangedMethod(method);
  if (myChangeInfo.isExceptionSetOrOrderChanged) {
    final PsiClassType[] newExceptions=getPrimaryChangedExceptionInfo(myChangeInfo);
    fixPrimaryThrowsLists(method,newExceptions);
  }
}
