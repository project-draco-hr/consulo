{
  String newMethodName=myChangeInfo.newName;
  try {
    PsiMethod prototype;
    PsiManager manager=PsiManager.getInstance(myProject);
    PsiElementFactory factory=JavaPsiFacade.getInstance(manager.getProject()).getElementFactory();
    final PsiMethod method=myChangeInfo.getMethod();
    final CanonicalTypes.Type returnType=myChangeInfo.newReturnType;
    if (returnType != null) {
      prototype=factory.createMethod(newMethodName,returnType.getType(method,manager));
    }
 else {
      prototype=factory.createConstructor();
      prototype.setName(newMethodName);
    }
    ParameterInfo[] parameters=myChangeInfo.newParms;
    for (    ParameterInfo info : parameters) {
      final PsiType parameterType=info.createType(method,manager);
      PsiParameter param=factory.createParameter(info.getName(),parameterType);
      prototype.getParameterList().add(param);
    }
    ConflictsUtil.checkMethodConflicts(method.getContainingClass(),method,prototype,conflicts);
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
}
