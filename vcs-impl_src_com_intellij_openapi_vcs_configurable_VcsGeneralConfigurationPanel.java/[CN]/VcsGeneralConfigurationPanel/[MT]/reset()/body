{
  VcsConfiguration settings=VcsConfiguration.getInstance(myProject);
  myForceNonEmptyComment.setSelected(settings.FORCE_NON_EMPTY_COMMENT);
  myCbOfferToMoveChanges.setSelected(settings.OFFER_MOVE_TO_ANOTHER_CHANGELIST_ON_PARTIAL_COMMIT);
  myShowReadOnlyStatusDialog.setSelected(getReadOnlyStatusHandler().getState().SHOW_DIALOG);
  myCbCommitInBackground.setSelected(settings.PERFORM_COMMIT_IN_BACKGROUND);
  myCbUpdateInBackground.setSelected(settings.PERFORM_UPDATE_IN_BACKGROUND);
  myCbCheckoutInBackground.setSelected(settings.PERFORM_CHECKOUT_IN_BACKGROUND);
  myCbEditInBackground.setSelected(settings.PERFORM_EDIT_IN_BACKGROUND);
  myCbAddRemoveInBackground.setSelected(settings.PERFORM_ADD_REMOVE_IN_BACKGROUND);
  if (settings.MOVE_TO_FAILED_COMMIT_CHANGELIST == VcsShowConfirmationOption.Value.DO_ACTION_SILENTLY) {
    myFailedCommitChangelistCombo.setSelectedIndex(0);
  }
 else   if (settings.MOVE_TO_FAILED_COMMIT_CHANGELIST == VcsShowConfirmationOption.Value.DO_NOTHING_SILENTLY) {
    myFailedCommitChangelistCombo.setSelectedIndex(1);
  }
 else {
    myFailedCommitChangelistCombo.setSelectedIndex(2);
  }
  for (  VcsShowOptionsSettingImpl setting : myPromptOptions.keySet()) {
    myPromptOptions.get(setting).setSelected(setting.getValue());
  }
  selectInGroup(myOnFileAddingGroup,getAddConfirmation());
  selectInGroup(myOnFileRemovingGroup,getRemoveConfirmation());
}
