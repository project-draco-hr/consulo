{
  initComponent();
  UISettings settings=UISettings.getInstance();
  String temp=(String)myComponent.myFontSizeCombo.getEditor().getItem();
  int _fontSize=-1;
  if (temp != null && temp.trim().length() > 0) {
    try {
      _fontSize=Integer.parseInt(temp);
    }
 catch (    NumberFormatException ignore) {
    }
    if (_fontSize <= 0) {
      _fontSize=settings.FONT_SIZE;
    }
  }
 else {
    _fontSize=settings.FONT_SIZE;
  }
  boolean shouldUpdateUI=false;
  String _fontFace=(String)myComponent.myFontCombo.getSelectedItem();
  LafManager lafManager=LafManager.getInstance();
  if (_fontSize != settings.FONT_SIZE || !settings.FONT_FACE.equals(_fontFace)) {
    settings.FONT_SIZE=_fontSize;
    settings.FONT_FACE=_fontFace;
    shouldUpdateUI=true;
  }
  settings.ANIMATE_WINDOWS=myComponent.myAnimateWindowsCheckBox.isSelected();
  boolean update=settings.SHOW_TOOL_WINDOW_NUMBERS != myComponent.myWindowShortcutsCheckBox.isSelected();
  settings.SHOW_TOOL_WINDOW_NUMBERS=myComponent.myWindowShortcutsCheckBox.isSelected();
  update|=settings.HIDE_TOOL_STRIPES != !myComponent.myShowToolStripesCheckBox.isSelected();
  settings.HIDE_TOOL_STRIPES=!myComponent.myShowToolStripesCheckBox.isSelected();
  update|=settings.SHOW_ICONS_IN_MENUS != myComponent.myCbDisplayIconsInMenu.isSelected();
  settings.SHOW_ICONS_IN_MENUS=myComponent.myCbDisplayIconsInMenu.isSelected();
  update|=settings.SHOW_MEMORY_INDICATOR != myComponent.myShowMemoryIndicatorCheckBox.isSelected();
  settings.SHOW_MEMORY_INDICATOR=myComponent.myShowMemoryIndicatorCheckBox.isSelected();
  update|=settings.ALLOW_MERGE_BUTTONS != myComponent.myAllowMergeButtons.isSelected();
  settings.ALLOW_MERGE_BUTTONS=myComponent.myAllowMergeButtons.isSelected();
  update|=settings.CYCLE_SCROLLING != myComponent.myCycleScrollingCheckBox.isSelected();
  settings.CYCLE_SCROLLING=myComponent.myCycleScrollingCheckBox.isSelected();
  if (settings.OVERRIDE_NONIDEA_LAF_FONTS != myComponent.myOverrideLAFFonts.isSelected()) {
    shouldUpdateUI=true;
  }
  settings.OVERRIDE_NONIDEA_LAF_FONTS=myComponent.myOverrideLAFFonts.isSelected();
  settings.MOVE_MOUSE_ON_DEFAULT_BUTTON=myComponent.myMoveMouseOnDefaultButtonCheckBox.isSelected();
  settings.HIDE_NAVIGATION_ON_FOCUS_LOSS=myComponent.myHideNavigationPopupsCheckBox.isSelected();
  update|=settings.DISABLE_MNEMONICS != myComponent.myDisableMnemonics.isSelected();
  settings.DISABLE_MNEMONICS=myComponent.myDisableMnemonics.isSelected();
  update|=settings.USE_SMALL_LABELS_ON_TABS != myComponent.myUseSmallLabelsOnTabs.isSelected();
  settings.USE_SMALL_LABELS_ON_TABS=myComponent.myUseSmallLabelsOnTabs.isSelected();
  update|=settings.DISABLE_MNEMONICS_IN_CONTROLS != myComponent.myDisableMnemonicInControlsCheckBox.isSelected();
  settings.DISABLE_MNEMONICS_IN_CONTROLS=myComponent.myDisableMnemonicInControlsCheckBox.isSelected();
  update|=settings.SHOW_ICONS_IN_QUICK_NAVIGATION != myComponent.myHideIconsInQuickNavigation.isSelected();
  settings.SHOW_ICONS_IN_QUICK_NAVIGATION=myComponent.myHideIconsInQuickNavigation.isSelected();
  if (!Comparing.equal(myComponent.myLafComboBox.getSelectedItem(),lafManager.getCurrentLookAndFeel())) {
    final UIManager.LookAndFeelInfo lafInfo=(UIManager.LookAndFeelInfo)myComponent.myLafComboBox.getSelectedItem();
    if (lafManager.checkLookAndFeel(lafInfo)) {
      update=shouldUpdateUI=true;
      final boolean wasDarcula=UIUtil.isUnderDarcula();
      lafManager.setCurrentLookAndFeel(lafInfo);
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          if (UIUtil.isUnderDarcula()) {
            DarculaInstaller.install();
          }
 else           if (wasDarcula) {
            DarculaInstaller.uninstall();
          }
        }
      }
);
    }
  }
  if (shouldUpdateUI) {
    lafManager.updateUI();
  }
  if (WindowManagerEx.getInstanceEx().isAlphaModeSupported()) {
    int delay=-1;
    try {
      delay=Integer.parseInt(myComponent.myAlphaModeDelayTextField.getText());
    }
 catch (    NumberFormatException ignored) {
    }
    float ratio=myComponent.myAlphaModeRatioSlider.getValue() / 100f;
    if (myComponent.myEnableAlphaModeCheckBox.isSelected() != settings.ENABLE_ALPHA_MODE || delay != -1 && delay != settings.ALPHA_MODE_DELAY || ratio != settings.ALPHA_MODE_RATIO) {
      update=true;
      settings.ENABLE_ALPHA_MODE=myComponent.myEnableAlphaModeCheckBox.isSelected();
      settings.ALPHA_MODE_DELAY=delay;
      settings.ALPHA_MODE_RATIO=ratio;
    }
  }
  if (update) {
    settings.fireUISettingsChanged();
  }
  myComponent.updateCombo();
}
