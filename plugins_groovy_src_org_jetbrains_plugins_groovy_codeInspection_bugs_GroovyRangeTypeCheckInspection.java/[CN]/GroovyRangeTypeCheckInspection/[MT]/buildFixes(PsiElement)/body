{
  final GrRangeExpression range=(GrRangeExpression)location;
  final PsiType type=range.getType();
  List<GroovyFix> fixes=new ArrayList<GroovyFix>(3);
  if (type instanceof GrRangeType) {
    PsiType iterationType=((GrRangeType)type).getIterationType();
    if (!(iterationType instanceof PsiClassType))     return GroovyFix.EMPTY_ARRAY;
    final PsiClass psiClass=((PsiClassType)iterationType).resolve();
    if (!(psiClass instanceof GrTypeDefinition))     return GroovyFix.EMPTY_ARRAY;
    final GroovyResolveResult[] nexts=ResolveUtil.getMethodCandidates(iterationType,"next",range,PsiType.EMPTY_ARRAY);
    final GroovyResolveResult[] previouses=ResolveUtil.getMethodCandidates(iterationType,"previous",range,PsiType.EMPTY_ARRAY);
    if (nexts.length == 0) {
      fixes.add(new AddMethodFix("next",(GrTypeDefinition)psiClass));
    }
    if (previouses.length == 0) {
      fixes.add(new AddMethodFix("previous",(GrTypeDefinition)psiClass));
    }
    if (!InheritanceUtil.isInheritor(type,CommonClassNames.JAVA_LANG_COMPARABLE)) {
      fixes.add(new AddClassToExtends((GrTypeDefinition)psiClass,CommonClassNames.JAVA_LANG_COMPARABLE));
    }
  }
  return fixes.toArray(new GroovyFix[fixes.size()]);
}
