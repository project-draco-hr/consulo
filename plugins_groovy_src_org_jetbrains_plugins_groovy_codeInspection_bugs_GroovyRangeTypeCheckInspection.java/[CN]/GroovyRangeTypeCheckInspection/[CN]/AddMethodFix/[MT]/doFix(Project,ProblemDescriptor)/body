{
  if (myClass.isInterface()) {
    final GrMethod method=GroovyPsiElementFactory.getInstance(project).createMethodFromText("def " + myClass.getName() + " "+ myMethodName+ "();");
    myClass.add(method);
  }
 else {
    String templName=JavaTemplateUtil.TEMPLATE_IMPLEMENTED_METHOD_BODY;
    final FileTemplate template=FileTemplateManager.getInstance().getCodeTemplate(templName);
    Properties properties=new Properties();
    String returnType=generateTypeText(myClass);
    properties.setProperty(FileTemplate.ATTRIBUTE_RETURN_TYPE,returnType);
    properties.setProperty(FileTemplate.ATTRIBUTE_DEFAULT_RETURN_VALUE,PsiTypesUtil.getDefaultValueOfType(JavaPsiFacade.getElementFactory(project).createType(myClass)));
    properties.setProperty(FileTemplate.ATTRIBUTE_CALL_SUPER,"");
    properties.setProperty(FileTemplate.ATTRIBUTE_CLASS_NAME,myClass.getQualifiedName());
    properties.setProperty(FileTemplate.ATTRIBUTE_SIMPLE_CLASS_NAME,myClass.getName());
    properties.setProperty(FileTemplate.ATTRIBUTE_METHOD_NAME,myMethodName);
    try {
      String bodyText=StringUtil.replace(template.getText(properties),";","");
      final GrCodeBlock newBody=GroovyPsiElementFactory.getInstance(project).createMethodBodyFromText("\n" + bodyText + "\n");
      final GrMethod method=GroovyPsiElementFactory.getInstance(project).createMethodFromText("",myMethodName,returnType,ArrayUtil.EMPTY_STRING_ARRAY,myClass);
      method.setBlock(newBody);
      myClass.add(method);
    }
 catch (    IOException e) {
      LOG.error(e);
    }
  }
}
