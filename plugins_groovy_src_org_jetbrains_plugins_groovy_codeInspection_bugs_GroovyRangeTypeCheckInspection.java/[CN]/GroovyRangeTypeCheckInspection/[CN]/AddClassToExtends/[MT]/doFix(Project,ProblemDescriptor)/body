{
  GrReferenceList list;
  final GroovyPsiElementFactory factory=GroovyPsiElementFactory.getInstance(project);
  if (myPsiClass.isInterface()) {
    list=myPsiClass.getExtendsClause();
    if (list == null) {
      list=factory.createExtendsClause();
      PsiElement anchor=myPsiClass.getImplementsClause();
      if (anchor == null) {
        anchor=myPsiClass.getBody();
      }
      if (anchor == null)       return;
      list=(GrReferenceList)myPsiClass.addBefore(list,anchor);
      myPsiClass.getNode().addLeaf(GroovyTokenTypes.mWS," ",anchor.getNode());
      myPsiClass.getNode().addLeaf(GroovyTokenTypes.mWS," ",list.getNode());
    }
  }
 else {
    list=myPsiClass.getImplementsClause();
    if (list == null) {
      list=factory.createImplementsClause();
      PsiElement anchor=myPsiClass.getBody();
      if (anchor == null)       return;
      list=(GrReferenceList)myPsiClass.addBefore(list,anchor);
      myPsiClass.getNode().addLeaf(GroovyTokenTypes.mWS," ",list.getNode());
      myPsiClass.getNode().addLeaf(GroovyTokenTypes.mWS," ",anchor.getNode());
    }
  }
  final PsiClass comparable=JavaPsiFacade.getInstance(project).findClass(CommonClassNames.JAVA_LANG_COMPARABLE,myPsiClass.getResolveScope());
  PsiSubstitutor substitutor=PsiSubstitutor.EMPTY;
  boolean addTypeParam=false;
  if (comparable != null) {
    final PsiTypeParameter[] typeParameters=comparable.getTypeParameters();
    if (typeParameters.length == 1) {
      final PsiElementFactory elementFactory=JavaPsiFacade.getElementFactory(project);
      final PsiTypeParameter[] classParams=myPsiClass.getTypeParameters();
      PsiSubstitutor innerSubstitutor=PsiSubstitutor.EMPTY;
      for (      PsiTypeParameter classParam : classParams) {
        innerSubstitutor=innerSubstitutor.put(classParam,elementFactory.createType(classParam));
      }
      substitutor=substitutor.put(typeParameters[0],elementFactory.createType(myPsiClass,innerSubstitutor));
      addTypeParam=true;
    }
  }
  final PsiElement ref=list.add(factory.createReferenceElementFromText(myInterfaceName + (addTypeParam ? "<" + generateTypeText(myPsiClass) + ">" : "")));
  PsiUtil.shortenReference((GrReferenceElement)ref);
  if (comparable != null && !myPsiClass.isInterface()) {
    GroovyOverrideImplementUtil.generateImplementation(null,myPsiClass.getContainingFile(),myPsiClass,comparable.getMethods()[0],substitutor);
  }
}
