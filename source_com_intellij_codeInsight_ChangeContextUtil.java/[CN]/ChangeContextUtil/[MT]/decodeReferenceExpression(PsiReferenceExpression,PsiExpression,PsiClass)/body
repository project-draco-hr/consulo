{
  PsiManager manager=refExpr.getManager();
  PsiElementFactory factory=manager.getElementFactory();
  Project project=refExpr.getProject();
  PsiExpression qualifier=refExpr.getQualifierExpression();
  if (qualifier == null) {
    PsiElement refMember=refExpr.getCopyableUserData(REF_MEMBER_KEY);
    refExpr.putCopyableUserData(REF_MEMBER_KEY,null);
    if (refMember != null && refMember.isValid()) {
      PsiClass parentClass=(PsiClass)refMember.getParent();
      boolean isStatic=((PsiModifierListOwner)refMember).hasModifierProperty(PsiModifier.STATIC);
      if (isStatic) {
        PsiElement refElement=refExpr.resolve();
        if (!manager.areElementsEquivalent(refMember,refElement)) {
          PsiReferenceExpression qualifiedExpr=(PsiReferenceExpression)factory.createExpressionFromText("q." + refExpr.getText(),null);
          qualifiedExpr=(PsiReferenceExpression)CodeStyleManager.getInstance(project).reformat(qualifiedExpr);
          PsiExpression newQualifier=factory.createReferenceExpression(parentClass);
          qualifiedExpr.getQualifierExpression().replace(newQualifier);
          refExpr=(PsiReferenceExpression)refExpr.replace(qualifiedExpr);
        }
      }
 else       if (thisAccessExpr != null) {
        final PsiClass realParentClass=refExpr.getCopyableUserData(REF_MEMBER_THIS_CLASS_KEY);
        refExpr.putCopyableUserData(REF_MEMBER_THIS_CLASS_KEY,null);
        if (realParentClass.equals(thisClass) || (thisClass != null && thisClass.isInheritor(realParentClass,true))) {
          boolean needQualifier=true;
          PsiElement refElement=refExpr.resolve();
          if (refMember.equals(refElement)) {
            final PsiClass currentClass=findThisClass(refExpr,refElement);
            if (needQualifier && thisAccessExpr instanceof PsiThisExpression) {
              PsiJavaCodeReferenceElement thisQualifier=((PsiThisExpression)thisAccessExpr).getQualifier();
              PsiClass thisExprClass=thisQualifier != null ? (PsiClass)thisQualifier.resolve() : RefactoringUtil.getThisClass(refExpr);
              if (currentClass.equals(thisExprClass) || thisExprClass.isInheritor(realParentClass,true)) {
                needQualifier=false;
              }
            }
          }
          if (needQualifier) {
            final String text="q." + refExpr.getText();
            final PsiExpression expressionFromText=factory.createExpressionFromText(text,null);
            LOG.assertTrue(expressionFromText instanceof PsiReferenceExpression,text);
            PsiReferenceExpression qualifiedExpr=(PsiReferenceExpression)expressionFromText;
            qualifiedExpr.getQualifierExpression().replace(thisAccessExpr);
            refExpr=(PsiReferenceExpression)refExpr.replace(qualifiedExpr);
          }
        }
      }
    }
 else {
      PsiClass refClass=refExpr.getCopyableUserData(REF_CLASS_KEY);
      refExpr.putCopyableUserData(REF_CLASS_KEY,null);
      if (refClass != null && refClass.isValid()) {
        refExpr=(PsiReferenceExpression)refExpr.bindToElement(refClass);
      }
    }
  }
 else {
    Boolean couldRemove=refExpr.getCopyableUserData(CAN_REMOVE_QUALIFIER_KEY);
    refExpr.putCopyableUserData(CAN_REMOVE_QUALIFIER_KEY,null);
    if (couldRemove == Boolean.FALSE && canRemoveQualifier(refExpr)) {
      PsiReferenceExpression newRefExpr=(PsiReferenceExpression)factory.createExpressionFromText(refExpr.getReferenceName(),null);
      refExpr=(PsiReferenceExpression)refExpr.replace(newRefExpr);
    }
  }
  return refExpr;
}
