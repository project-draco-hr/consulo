{
  if (LOG.isDebugEnabled()) {
    LOG.debug("addSubtreeToUpdate:" + rootNode);
  }
  for (Iterator<DefaultMutableTreeNode> iterator=myNodesToUpdate.iterator(); iterator.hasNext(); ) {
    DefaultMutableTreeNode node=iterator.next();
    if (rootNode.isNodeAncestor(node)) {
      return;
    }
 else     if (node.isNodeAncestor(rootNode)) {
      iterator.remove();
    }
  }
  myNodesToUpdate.add(rootNode);
  myAlarm.cancelAllRequests();
  myAlarm.addRequest(new Runnable(){
    public void run(){
      if (myTreeBuilder.isDisposed())       return;
      if (myTreeBuilder.getTreeStructure().hasSomethingToCommit()) {
        myAlarm.cancelAllRequests();
        myAlarm.addRequest(this,myDelay);
        return;
      }
      myTreeBuilder.getTreeStructure().commit();
      try {
        performUpdate();
      }
 catch (      RuntimeException e) {
        LOG.error(myTreeBuilder.getClass().getName(),e);
      }
    }
  }
,myDelay,ModalityState.stateForComponent(myTreeBuilder.getTree()));
}
