{
  final String TITLE=GitBundle.getString("file.adapter.add.files.title");
  final String MESSAGE=GitBundle.getString("file.adapter.add.files.message");
  if (event.isFromRefresh())   return;
  final VirtualFile file=event.getFile();
  if (isFileProcessable(file)) {
    VcsShowConfirmationOption option=host.getAddConfirmation();
    if (option.getValue() == VcsShowConfirmationOption.Value.SHOW_CONFIRMATION) {
      List<VirtualFile> files=new ArrayList<VirtualFile>();
      files.add(file);
      AbstractVcsHelper helper=AbstractVcsHelper.getInstance(project);
      Collection<VirtualFile> filesToAdd=helper.selectFilesToProcess(files,TITLE,null,TITLE,MESSAGE,option);
      VirtualFile vcsRoot=VcsUtil.getVcsRootFor(project,file);
      if (filesToAdd != null && vcsRoot != null) {
        GitCommand command=new GitCommand(project,host.getSettings(),vcsRoot);
        try {
          command.add(filesToAdd.toArray(new VirtualFile[filesToAdd.size()]));
        }
 catch (        VcsException e) {
          List<VcsException> es=new ArrayList<VcsException>();
          es.add(e);
          GitVcs.getInstance(project).showErrors(es,GitBundle.getString("file.adapter.error.title"));
        }
      }
    }
  }
}
