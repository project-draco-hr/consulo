{
  if (isInHeadlessEnvironment()) {
    Class<?> aClass=getClass();
    while (aClass != null) {
      if (aClass.getAnnotation(SkipInHeadlessEnvironment.class) != null) {
        System.out.println("Test '" + getClass().getName() + "."+ getName()+ "' is skipped because it requires working UI environment");
        return;
      }
      aClass=aClass.getSuperclass();
    }
  }
  final Throwable[] throwables=new Throwable[1];
  Runnable runnable=new Runnable(){
    @Override public void run(){
      try {
        UsefulTestCase.super.runTest();
      }
 catch (      InvocationTargetException e) {
        e.fillInStackTrace();
        throwables[0]=e.getTargetException();
      }
catch (      IllegalAccessException e) {
        e.fillInStackTrace();
        throwables[0]=e;
      }
catch (      Throwable e) {
        throwables[0]=e;
      }
    }
  }
;
  invokeTestRunnable(runnable);
  if (throwables[0] != null) {
    throw throwables[0];
  }
}
