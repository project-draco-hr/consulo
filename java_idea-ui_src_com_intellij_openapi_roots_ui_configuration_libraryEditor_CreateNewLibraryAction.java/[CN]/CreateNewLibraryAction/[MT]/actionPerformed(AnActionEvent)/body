{
  LibraryRootsComponentDescriptor componentDescriptor=null;
  if (myType != null) {
    componentDescriptor=myType.createLibraryRootsComponentDescriptor();
  }
  if (componentDescriptor == null) {
    componentDescriptor=new DefaultLibraryRootsComponentDescriptor();
  }
  final List<? extends RootDetector> rootDetectors=componentDescriptor.getRootDetectors();
  final List<OrderRoot> roots;
  if (!rootDetectors.isEmpty()) {
    final FileChooserDescriptor chooserDescriptor=componentDescriptor.createAttachFilesChooserDescriptor();
    chooserDescriptor.setTitle("Select Library Files");
    final VirtualFile[] rootCandidates=FileChooser.chooseFiles(myLibrariesConfigurable.getTree(),chooserDescriptor,myProject.getBaseDir());
    if (rootCandidates.length == 0) {
      return;
    }
    roots=RootDetectionUtil.detectRoots(Arrays.asList(rootCandidates),myLibrariesConfigurable.getTree(),myProject,rootDetectors,true);
    if (roots.isEmpty())     return;
  }
 else {
    roots=Collections.emptyList();
  }
  final LibrariesModifiableModel modifiableModel=myLibrariesConfigurable.getModelProvider().getModifiableModel();
  final Library library=modifiableModel.createLibrary(LibraryEditingUtil.suggestNewLibraryName(modifiableModel,roots),myType);
  final BaseLibrariesConfigurable rootConfigurable=ProjectStructureConfigurable.getInstance(myProject).getConfigurableFor(library);
  final NewLibraryEditor editor=new NewLibraryEditor(((LibraryEx)library).getType(),((LibraryEx)library).getProperties());
  editor.addRoots(roots);
  final Library.ModifiableModel model=library.getModifiableModel();
  editor.applyTo((LibraryEx.ModifiableModelEx)model);
  AccessToken token=WriteAction.start();
  try {
    model.commit();
  }
  finally {
    token.finish();
  }
  final DefaultMutableTreeNode libraryNode=MasterDetailsComponent.findNodeByObject((TreeNode)rootConfigurable.getTree().getModel().getRoot(),library);
  rootConfigurable.selectNodeInTree(libraryNode);
}
