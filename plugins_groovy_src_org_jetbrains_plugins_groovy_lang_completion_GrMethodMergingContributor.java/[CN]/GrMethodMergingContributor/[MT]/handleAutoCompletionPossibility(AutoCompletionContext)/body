{
  final CompletionParameters parameters=context.getParameters();
  if (parameters.getCompletionType() != CompletionType.SMART && parameters.getCompletionType() != CompletionType.BASIC) {
    return null;
  }
  boolean needInsertBrace=false;
  boolean needInsertParenth=false;
  final LookupElement[] items=context.getItems();
  if (items.length > 1) {
    String commonName=null;
    LookupElement best=null;
    final ArrayList<PsiMethod> allMethods=new ArrayList<PsiMethod>();
    for (    LookupElement item : items) {
      Object o=item.getObject();
      if (o instanceof ResolveResult) {
        o=((ResolveResult)o).getElement();
      }
      if (item.getUserData(LookupItem.FORCE_SHOW_SIGNATURE_ATTR) != null || !(o instanceof PsiMethod)) {
        return AutoCompletionDecision.SHOW_LOOKUP;
      }
      final PsiMethod method=(PsiMethod)o;
      final JavaChainLookupElement chain=item.as(JavaChainLookupElement.CLASS_CONDITION_KEY);
      final String name=method.getName() + "#" + (chain == null ? "" : chain.getQualifier().getLookupString());
      if (commonName != null && !commonName.equals(name)) {
        return AutoCompletionDecision.SHOW_LOOKUP;
      }
      if (hasOnlyClosureParams(method)) {
        needInsertBrace=true;
      }
 else {
        needInsertParenth=true;
      }
      if (needInsertBrace && needInsertParenth) {
        return AutoCompletionDecision.SHOW_LOOKUP;
      }
      if (best == null && method.getParameterList().getParametersCount() > 0) {
        best=item;
      }
      commonName=name;
      allMethods.add(method);
      item.putUserData(JavaCompletionUtil.ALL_METHODS_ATTRIBUTE,allMethods);
    }
    if (best == null) {
      best=items[0];
    }
    return AutoCompletionDecision.insertItem(best);
  }
  return super.handleAutoCompletionPossibility(context);
}
