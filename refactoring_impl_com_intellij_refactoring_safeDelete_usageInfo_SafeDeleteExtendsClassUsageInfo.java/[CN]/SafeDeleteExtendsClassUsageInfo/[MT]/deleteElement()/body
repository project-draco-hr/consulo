{
  final PsiElement parent=getElement().getParent();
  LOG.assertTrue(parent instanceof PsiReferenceList);
  final PsiClass refClass=getReferencedElement();
  final PsiElementFactory elementFactory=JavaPsiFacade.getInstance(refClass.getProject()).getElementFactory();
  final PsiSubstitutor substitutor=TypeConversionUtil.getClassSubstitutor(refClass,myExtendingClass,PsiSubstitutor.EMPTY);
  LOG.assertTrue(substitutor != null);
  final PsiReferenceList extendsList=refClass.getExtendsList();
  final PsiReferenceList extendingImplementsList=myExtendingClass.getImplementsList();
  if (extendsList != null) {
    final PsiClassType[] referenceTypes=extendsList.getReferencedTypes();
    final PsiReferenceList listToAddExtends=refClass.isInterface() == myExtendingClass.isInterface() ? myExtendingClass.getExtendsList() : extendingImplementsList;
    for (    PsiClassType referenceType : referenceTypes) {
      listToAddExtends.add(elementFactory.createReferenceElementByType((PsiClassType)substitutor.substitute(referenceType)));
    }
  }
  final PsiReferenceList implementsList=refClass.getImplementsList();
  if (implementsList != null) {
    final PsiClassType[] referenceTypes=implementsList.getReferencedTypes();
    for (    PsiClassType referenceType : referenceTypes) {
      extendingImplementsList.add(elementFactory.createReferenceElementByType((PsiClassType)substitutor.substitute(referenceType)));
    }
  }
  getElement().delete();
}
