{
  final StringBuilder buffer=new StringBuilder();
  PsiType internalType=type;
  while (internalType instanceof PsiArrayType) {
    buffer.append('[');
    final PsiArrayType arrayType=(PsiArrayType)internalType;
    internalType=arrayType.getComponentType();
  }
  if (internalType instanceof PsiPrimitiveType) {
    final PsiPrimitiveType primitiveType=(PsiPrimitiveType)internalType;
    final String primitypeTypeSignature=createPrimitiveType(primitiveType);
    buffer.append(primitypeTypeSignature);
  }
 else {
    buffer.append('L');
    if (internalType instanceof PsiClassType) {
      final PsiClassType classType=(PsiClassType)internalType;
      PsiClass psiClass=classType.resolve();
      if (psiClass != null) {
        final StringBuffer postFix=new StringBuffer("");
        PsiClass containingClass=psiClass.getContainingClass();
        while (containingClass != null) {
          postFix.insert(0,psiClass.getName()).insert(0,'$');
          psiClass=containingClass;
          containingClass=psiClass.getContainingClass();
        }
        final String qualifiedName=psiClass.getQualifiedName();
        if (qualifiedName == null) {
          buffer.append(CommonClassNames.JAVA_LANG_OBJECT);
        }
 else {
          buffer.append(qualifiedName.replace('.','/'));
          buffer.append(postFix);
        }
      }
    }
 else {
      buffer.append(internalType.getCanonicalText().replace('.','/'));
    }
    buffer.append(';');
  }
  return buffer.toString();
}
