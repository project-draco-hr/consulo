{
  final PsiClass scope=(PsiClass)context.getScope();
  final GroovyPsiElementFactory factory=GroovyPsiElementFactory.getInstance(context.getProject());
  if (scope instanceof GrAnonymousClassDefinition) {
    final GrClassInitializer[] initializers=((GrAnonymousClassDefinition)scope).getInitializers();
    final GrClassInitializer initializer;
    if (initializers.length == 0) {
      initializer=(GrClassInitializer)scope.add(factory.createClassInitializer());
    }
 else {
      initializer=initializers[0];
    }
    final PsiElement anchor=findAnchor(context,settings,initializer.getBlock());
    generateAssignment(context,settings,field,(GrStatement)anchor,initializer.getBlock());
    return;
  }
  PsiMethod[] constructors=scope.getConstructors();
  if (constructors.length == 0) {
    final String name=scope.getName();
    LOG.assertTrue(name != null,scope.getText());
    final GrMethod constructor=factory.createConstructorFromText(name,EMPTY_STRING_ARRAY,EMPTY_STRING_ARRAY,"{}",scope);
    final PsiElement added=scope.add(constructor);
    constructors=new PsiMethod[]{(PsiMethod)added};
  }
  for (  PsiMethod constructor : constructors) {
    final GrConstructorInvocation invocation=PsiImplUtil.getChainingConstructorInvocation((GrMethod)constructor);
    if (invocation != null && invocation.isThisCall())     continue;
    final PsiElement anchor=findAnchor(context,settings,((GrMethod)constructor).getBlock());
    generateAssignment(context,settings,field,(GrStatement)anchor,((GrMethod)constructor).getBlock());
  }
}
