{
  Map<HgFile,HgResolveStatusEnum> resolves=new HgResolveCommand(myProject).list(repo);
  final List<VirtualFile> conflicts=new ArrayList<VirtualFile>();
  for (  Map.Entry<HgFile,HgResolveStatusEnum> entry : resolves.entrySet()) {
    File file=entry.getKey().getFile();
    String fileGroupId=null;
switch (entry.getValue()) {
case UNRESOLVED:
      conflicts.add(VcsUtil.getVirtualFile(file));
    fileGroupId=FileGroup.MERGED_WITH_CONFLICT_ID;
  break;
case RESOLVED:
fileGroupId=FileGroup.MERGED_ID;
break;
default :
}
if (updatedFiles != null && fileGroupId != null) {
updatedFiles.getGroupById(FileGroup.UPDATED_ID).remove(file.getAbsolutePath());
updatedFiles.getGroupById(fileGroupId).add(file.getPath(),HgVcs.VCS_NAME,null);
}
}
if (conflicts.isEmpty()) {
return;
}
if (!ApplicationManager.getApplication().isUnitTestMode()) {
AbstractVcsHelper.getInstance(myProject).showMergeDialog(conflicts,HgVcs.getInstance(myProject).getMergeProvider());
}
}
