{
  return new MergeProvider(){
    @NotNull public MergeData loadRevisions(    VirtualFile file) throws VcsException {
      try {
        MergeData mergeData=new MergeData();
        final FileInputStream stream=new FileInputStream(file.getPath() + ".orig");
        try {
          mergeData.ORIGINAL=FileUtil.loadBytes(stream);
        }
  finally {
          stream.close();
        }
        mergeData.LAST_REVISION_NUMBER=incomingRevision;
        HgFile hgFile=new HgFile(repo,VfsUtil.virtualToIoFile(file));
        HgCatCommand hgCatCommand=new HgCatCommand(project);
        String last=hgCatCommand.execute(hgFile,(HgRevisionNumber)mergeData.LAST_REVISION_NUMBER,file.getCharset());
        if (last != null) {
          mergeData.LAST=last.getBytes(file.getCharset().name());
        }
 else {
          mergeData.LAST=new byte[0];
        }
        String current=hgCatCommand.execute(hgFile,localRevision,file.getCharset());
        if (current != null) {
          mergeData.CURRENT=current.getBytes(file.getCharset().name());
        }
 else {
          mergeData.CURRENT=new byte[0];
        }
        return mergeData;
      }
 catch (      IOException e) {
        throw new VcsException(e);
      }
    }
    public void conflictResolvedForFile(    VirtualFile file){
      new HgResolveCommand(project).resolve(repo,file);
    }
    public boolean isBinary(    VirtualFile file){
      return false;
    }
  }
;
}
