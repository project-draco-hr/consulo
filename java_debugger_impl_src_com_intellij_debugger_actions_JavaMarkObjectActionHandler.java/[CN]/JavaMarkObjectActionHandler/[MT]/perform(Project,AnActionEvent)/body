{
  final DebuggerTreeNodeImpl node=DebuggerAction.getSelectedNode(event.getDataContext());
  if (node == null) {
    return;
  }
  final NodeDescriptorImpl descriptor=node.getDescriptor();
  if (!(descriptor instanceof ValueDescriptorImpl)) {
    return;
  }
  final DebuggerTree tree=node.getTree();
  tree.saveState(node);
  final ValueDescriptorImpl valueDescriptor=((ValueDescriptorImpl)descriptor);
  final DebuggerContextImpl debuggerContext=tree.getDebuggerContext();
  final DebugProcessImpl debugProcess=debuggerContext.getDebugProcess();
  final ValueMarkup markup=valueDescriptor.getMarkup(debugProcess);
  debugProcess.getManagerThread().invoke(new DebuggerContextCommandImpl(debuggerContext){
    public Priority getPriority(){
      return Priority.HIGH;
    }
    public void threadAction(){
      boolean sessionRefreshNeeded=true;
      try {
        if (markup != null) {
          valueDescriptor.setMarkup(debugProcess,null);
        }
 else {
          final String defaultText=valueDescriptor.getName();
          final Ref<Pair<ValueMarkup,Boolean>> result=new Ref<Pair<ValueMarkup,Boolean>>(null);
          try {
            final boolean suggestAdditionalMarkup=canSuggestAdditionalMarkup(debugProcess,valueDescriptor.getValue());
            SwingUtilities.invokeAndWait(new Runnable(){
              public void run(){
                ObjectMarkupPropertiesDialog dialog=new ObjectMarkupPropertiesDialog(defaultText,suggestAdditionalMarkup);
                dialog.show();
                if (dialog.isOK()) {
                  result.set(Pair.create(dialog.getConfiguredMarkup(),dialog.isMarkAdditionalFields()));
                }
              }
            }
);
          }
 catch (          InterruptedException ignored) {
          }
catch (          InvocationTargetException e) {
            LOG.error(e);
          }
          final Pair<ValueMarkup,Boolean> pair=result.get();
          if (pair != null) {
            valueDescriptor.setMarkup(debugProcess,pair.first);
            if (pair.second) {
              final Value value=valueDescriptor.getValue();
              final Map<ObjectReference,ValueMarkup> additionalMarkup=suggestMarkup((ObjectReference)value);
              if (!additionalMarkup.isEmpty()) {
                final Map<ObjectReference,ValueMarkup> map=NodeDescriptorImpl.getMarkupMap(debugProcess);
                if (map != null) {
                  for (                  Map.Entry<ObjectReference,ValueMarkup> entry : additionalMarkup.entrySet()) {
                    final ObjectReference key=entry.getKey();
                    if (!map.containsKey(key)) {
                      map.put(key,entry.getValue());
                    }
                  }
                }
              }
            }
          }
 else {
            sessionRefreshNeeded=false;
          }
        }
      }
  finally {
        final boolean _sessionRefreshNeeded=sessionRefreshNeeded;
        SwingUtilities.invokeLater(new Runnable(){
          public void run(){
            tree.restoreState(node);
            node.labelChanged();
            if (_sessionRefreshNeeded) {
              final DebuggerSession session=debuggerContext.getDebuggerSession();
              if (session != null) {
                session.refresh(true);
              }
            }
          }
        }
);
      }
    }
  }
);
}
