{
  final Map<String,Orderable> map=ContainerUtil.newLinkedHashMap();
  final Map<Orderable,LoadingOrder> cachedMap=ContainerUtil.newLinkedHashMap();
  final Set<Orderable> first=new LinkedHashSet<Orderable>(1);
  final Set<Orderable> hasBefore=new LinkedHashSet<Orderable>(orderable.size());
  for (  Orderable o : orderable) {
    String id=o.getOrderId();
    if (StringUtil.isNotEmpty(id))     map.put(id,o);
    LoadingOrder order=o.getOrder();
    cachedMap.put(o,order);
    if (order.myFirst)     first.add(o);
    if (order.myBefore.size() != 0)     hasBefore.add(o);
  }
  GraphGenerator.SemiGraph<Orderable> graph=new GraphGenerator.SemiGraph<Orderable>(){
    @Override public Collection<Orderable> getNodes(){
      List<Orderable> list=ContainerUtil.newArrayList(orderable);
      Collections.reverse(list);
      return list;
    }
    @Override public Iterator<Orderable> getIn(    Orderable n){
      LoadingOrder order=cachedMap.get(n);
      Set<Orderable> predecessors=new LinkedHashSet<Orderable>();
      for (      String id : order.myAfter) {
        Orderable o=map.get(id);
        if (o != null) {
          predecessors.add(o);
        }
      }
      String id=n.getOrderId();
      if (StringUtil.isNotEmpty(id)) {
        for (        Orderable o : hasBefore) {
          LoadingOrder hisOrder=cachedMap.get(o);
          if (hisOrder.myBefore.contains(id)) {
            predecessors.add(o);
          }
        }
      }
      if (order.myLast) {
        for (        Orderable o : orderable) {
          LoadingOrder hisOrder=cachedMap.get(o);
          if (!hisOrder.myLast) {
            predecessors.add(o);
          }
        }
      }
      if (!order.myFirst) {
        predecessors.addAll(first);
      }
      return predecessors.iterator();
    }
  }
;
  DFSTBuilder<Orderable> builder=new DFSTBuilder<Orderable>(new GraphGenerator<Orderable>(new CachingSemiGraph<Orderable>(graph)));
  if (!builder.isAcyclic()) {
    Couple<Orderable> p=builder.getCircularDependency();
    throw new SortingException("Could not satisfy sorting requirements",p.first.getDescribingElement(),p.second.getDescribingElement());
  }
  Collections.sort(orderable,builder.comparator());
}
