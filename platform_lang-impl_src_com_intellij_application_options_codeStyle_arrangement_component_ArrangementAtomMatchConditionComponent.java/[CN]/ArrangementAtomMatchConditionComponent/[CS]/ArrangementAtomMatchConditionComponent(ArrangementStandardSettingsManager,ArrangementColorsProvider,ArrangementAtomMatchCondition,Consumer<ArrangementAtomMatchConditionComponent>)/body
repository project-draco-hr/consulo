{
  myColorsProvider=colorsProvider;
  myCondition=condition;
  myAvailableTokens.add(condition.getType());
  myCloseCallback=closeCallback;
  ArrangementSettingsToken type=condition.getType();
  if (StdArrangementTokenType.REG_EXP.is(type)) {
    myBorderStrategy=TEXT_BORDER_STRATEGY;
  }
 else {
    myBorderStrategy=PREDEFINED_BORDER_STRATEGY;
  }
  if (type.equals(condition.getValue()) || condition.getValue() instanceof Boolean) {
    myText=type.getRepresentationValue();
  }
 else   if (StdArrangementTokenType.REG_EXP.is(type)) {
    myText=String.format("%s %s",type.getRepresentationValue().toLowerCase(),condition.getValue());
  }
 else {
    myText=condition.getValue().toString();
  }
  myTextControl.setTextAlign(SwingConstants.CENTER);
  myTextControl.append(myText,SimpleTextAttributes.fromTextAttributes(colorsProvider.getTextAttributes(type,false)));
  myTextControl.setOpaque(false);
  int maxWidth=manager.getWidth(type);
  if (!StdArrangementTokenType.REG_EXP.is(type) && maxWidth > 0) {
    myTextControlSize=new Dimension(maxWidth,myTextControl.getPreferredSize().height);
  }
 else {
    myTextControlSize=myTextControl.getPreferredSize();
  }
  final ArrangementRemoveConditionAction action=new ArrangementRemoveConditionAction();
  Icon buttonIcon=action.getTemplatePresentation().getIcon();
  Dimension buttonSize=new Dimension(buttonIcon.getIconWidth(),buttonIcon.getIconHeight());
  if (closeCallback == null) {
    myCloseButton=null;
    myCloseButtonBounds=null;
  }
 else {
    myCloseButton=new ActionButton(action,action.getTemplatePresentation().clone(),ArrangementConstants.MATCHING_RULES_CONTROL_PLACE,buttonSize){
      @Override protected Icon getIcon(){
        return myCloseButtonHovered ? action.getTemplatePresentation().getHoveredIcon() : action.getTemplatePresentation().getIcon();
      }
    }
;
    myCloseButtonBounds=new Rectangle(0,0,buttonIcon.getIconWidth(),buttonIcon.getIconHeight());
  }
  JPanel insetsPanel=new JPanel(new GridBagLayout()){
    @Override public String toString(){
      return "insets panel for " + myText;
    }
  }
;
  GridBagConstraints constraints=new GridBag().anchor(GridBagConstraints.WEST).weightx(1).insets(0,0,0,myCloseButton == null ? ArrangementConstants.BORDER_ARC_SIZE : 0);
  insetsPanel.add(myTextControl,constraints);
  insetsPanel.setBorder(IdeBorderFactory.createEmptyBorder(0,ArrangementConstants.HORIZONTAL_PADDING,0,0));
  insetsPanel.setOpaque(false);
  JPanel roundBorderPanel=new JPanel(new GridBagLayout()){
    @Override public void paint(    Graphics g){
      Rectangle buttonBounds=getCloseButtonScreenBounds();
      if (buttonBounds != null) {
        Point mouseScreenLocation=MouseInfo.getPointerInfo().getLocation();
        myCloseButtonHovered=buttonBounds.contains(mouseScreenLocation);
      }
      Rectangle bounds=getBounds();
      g.setColor(myBackgroundColor);
      g.fillRoundRect(0,0,bounds.width,bounds.height,ArrangementConstants.BORDER_ARC_SIZE,ArrangementConstants.BORDER_ARC_SIZE);
      super.paint(g);
    }
    @Override public String toString(){
      return "round border panel for " + myText;
    }
    @Override protected void paintBorder(    Graphics g){
      myBorderStrategy.setup((Graphics2D)g);
      super.paintBorder(g);
    }
  }
;
  roundBorderPanel.add(insetsPanel,new GridBag().anchor(GridBagConstraints.WEST));
  if (myCloseButton != null) {
    roundBorderPanel.add(new InsetsPanel(myCloseButton),new GridBag().anchor(GridBagConstraints.EAST));
  }
  myBorder=myBorderStrategy.create();
  roundBorderPanel.setBorder(myBorder);
  roundBorderPanel.setOpaque(false);
  myAnimationPanel=new ArrangementAnimationPanel(roundBorderPanel,false,true){
    @Override public void paint(    Graphics g){
      Point point=UIUtil.getLocationOnScreen(this);
      if (point != null) {
        Rectangle bounds=myAnimationPanel.getBounds();
        myScreenBounds=new Rectangle(point.x,point.y,bounds.width,bounds.height);
      }
      if (!myEnabled && g instanceof Graphics2D) {
        ((Graphics2D)g).setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,0.3f));
      }
      super.paint(g);
    }
  }
;
  setSelected(false);
  if (myCloseButton != null) {
    myCloseButton.setVisible(false);
  }
  setData(myCondition.getValue());
}
