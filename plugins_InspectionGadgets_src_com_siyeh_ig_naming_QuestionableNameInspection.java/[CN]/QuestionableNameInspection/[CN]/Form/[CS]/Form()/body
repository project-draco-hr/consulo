{
  super();
  table.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
  table.setRowSelectionAllowed(true);
  table.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
  final QuestionableNameTableModel model=new QuestionableNameTableModel();
  table.setModel(model);
  addButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final int listSize;
synchronized (lock) {
        listSize=nameList.size();
        nameList.add("");
      }
      model.fireTableStructureChanged();
      EventQueue.invokeLater(new Runnable(){
        public void run(){
          final Rectangle rect=table.getCellRect(listSize,0,true);
          table.scrollRectToVisible(rect);
          table.editCellAt(listSize,0);
          final TableCellEditor editor=table.getCellEditor();
          final Component component=editor.getTableCellEditorComponent(table,null,true,listSize,0);
          component.requestFocus();
        }
      }
);
    }
  }
);
  deleteButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final int[] selectedRows=table.getSelectedRows();
      if (selectedRows.length == 0) {
        return;
      }
      final int row=selectedRows[selectedRows.length - 1] - 1;
      Arrays.sort(selectedRows);
synchronized (lock) {
        for (int i=selectedRows.length - 1; i >= 0; i--) {
          nameList.remove(selectedRows[i]);
        }
      }
      model.fireTableStructureChanged();
      final int count=table.getRowCount();
      if (count <= row) {
        table.setRowSelectionInterval(count - 1,count - 1);
      }
 else {
        table.setRowSelectionInterval(row,row);
      }
    }
  }
);
}
