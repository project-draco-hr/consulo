{
  final PsiStructureViewFactory factory=LanguageStructureViewBuilder.INSTANCE.forLanguage(psiElement.getLanguage());
  final StructureViewBuilder builder=factory == null ? null : factory.getStructureViewBuilder(psiElement.getContainingFile());
  final FileEditor[] editors=FileEditorManager.getInstance(psiElement.getProject()).getEditors(file);
  if (builder == null || editors.length == 0) {
    return null;
  }
  final StructureView view=builder.createStructureView(editors[0],psiElement.getProject());
  try {
    final StructureViewTreeElement element=findElement(view.getTreeModel().getRoot(),psiElement,4);
    if (element == null) {
      return null;
    }
    final MinusculeMatcher matcher=new MinusculeMatcher(pattern,NameUtil.MatchingCaseSensitivity.NONE);
    int max=Integer.MIN_VALUE;
    Object target=null;
    for (    TreeElement treeElement : element.getChildren()) {
      if (treeElement instanceof StructureViewTreeElement) {
        final ItemPresentation presentation=treeElement.getPresentation();
        String presentableText=presentation == null ? null : presentation.getPresentableText();
        if (presentableText != null) {
          final int degree=matcher.matchingDegree(presentableText);
          if (degree > max) {
            max=degree;
            target=((StructureViewTreeElement)treeElement).getValue();
          }
        }
      }
    }
    return target instanceof Navigatable ? (Navigatable)target : null;
  }
  finally {
    Disposer.dispose(view);
  }
}
