{
  if (anchor == null) {
    if (before == null || before.booleanValue()) {
      anchor=findChildByRole(ChildRole.RPARENTH);
      before=Boolean.TRUE;
    }
 else {
      anchor=findChildByRole(ChildRole.LPARENTH);
      before=Boolean.FALSE;
    }
  }
  TreeElement firstAdded=super.addInternal(first,last,anchor,before);
  if (first == last && first.getElementType() == PARAMETER) {
    final CharTable treeCharTab=SharedImplUtil.findCharTableByTree(this);
    for (ASTNode child=((ASTNode)first).getTreeNext(); child != null; child=child.getTreeNext()) {
      if (child.getElementType() == COMMA)       break;
      if (child.getElementType() == PARAMETER) {
        TreeElement comma=Factory.createSingleLeafElement(COMMA,",",0,1,treeCharTab,getManager());
        super.addInternal(comma,comma,first,Boolean.FALSE);
        break;
      }
    }
    for (ASTNode child=((ASTNode)first).getTreePrev(); child != null; child=child.getTreePrev()) {
      if (child.getElementType() == COMMA)       break;
      if (child.getElementType() == PARAMETER) {
        TreeElement comma=Factory.createSingleLeafElement(COMMA,",",0,1,treeCharTab,getManager());
        super.addInternal(comma,comma,child,Boolean.FALSE);
        break;
      }
    }
  }
  try {
    CodeStyleManager.getInstance(getManager().getProject()).reformat(getPsi());
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
  return firstAdded;
}
