{
  final SpeedSearchSupply speedSearch=SpeedSearchSupply.getSupply(speedSearchEnabledComponent);
  if (speedSearch != null) {
    final Matcher matcher=speedSearch.compareAndGetMatcher(text);
    if (matcher != null) {
      final List<Pair<String,Integer>> searchTerms=new ArrayList<Pair<String,Integer>>();
      for (int i=0; i < matcher.groupCount(); i++) {
        final int start=matcher.start(i + 1);
        if (searchTerms.size() > 0) {
          final Pair<String,Integer> recent=searchTerms.get(searchTerms.size() - 1);
          if (start == recent.second + recent.first.length()) {
            searchTerms.set(searchTerms.size() - 1,Pair.create(recent.first + matcher.group(i + 1),recent.second));
            continue;
          }
        }
        final String group=matcher.group(i + 1);
        if (group != null)         searchTerms.add(Pair.create(group,start));
      }
      appendFragmentsStrict(text,searchTerms,attributes.getStyle(),attributes.getFgColor(),selected ? UIUtil.getTreeSelectionBackground() : UIUtil.getTreeTextBackground(),simpleColoredComponent);
    }
 else {
      simpleColoredComponent.append(text,attributes);
    }
  }
 else {
    simpleColoredComponent.append(text,attributes);
  }
}
