{
  SpeedSearchSupply speedSearch=SpeedSearchSupply.getSupply(speedSearchEnabledComponent);
  Iterable<TextRange> ranges=speedSearch == null ? null : speedSearch.matchingFragments(coloredComponent.getCharSequence(mainTextOnly).toString());
  Iterator<TextRange> rangesIterator=ranges != null ? ranges.iterator() : null;
  if (rangesIterator == null || !rangesIterator.hasNext())   return;
  Color bg=selected ? UIUtil.getTreeSelectionBackground() : UIUtil.getTreeTextBackground();
  SimpleColoredComponent.ColoredIterator coloredIterator=coloredComponent.iterator();
  TextRange range=rangesIterator.next();
  main:   while (coloredIterator.hasNext()) {
    coloredIterator.next();
    int offset=coloredIterator.getOffset();
    int endOffset=coloredIterator.getEndOffset();
    if (!range.intersectsStrict(offset,endOffset))     continue;
    SimpleTextAttributes attributes=coloredIterator.getTextAttributes();
    SimpleTextAttributes highlighted=new SimpleTextAttributes(bg,attributes.getFgColor(),null,attributes.getStyle() | SimpleTextAttributes.STYLE_SEARCH_MATCH);
    if (range.getStartOffset() > offset) {
      offset=coloredIterator.split(range.getStartOffset() - offset,attributes);
    }
    do {
      if (range.getEndOffset() <= endOffset) {
        offset=coloredIterator.split(range.getEndOffset() - offset,highlighted);
        if (rangesIterator.hasNext()) {
          range=rangesIterator.next();
        }
 else {
          break main;
        }
      }
 else {
        coloredIterator.split(endOffset - offset,highlighted);
        continue main;
      }
    }
 while (range.intersectsStrict(offset,endOffset));
  }
}
