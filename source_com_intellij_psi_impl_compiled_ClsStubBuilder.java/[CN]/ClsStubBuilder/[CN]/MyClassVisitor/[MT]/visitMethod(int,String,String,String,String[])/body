{
  if ((access & Opcodes.ACC_SYNTHETIC) != 0)   return null;
  if ((access & Opcodes.ACC_BRIDGE) != 0)   return null;
  if (SYNTHETIC_CLINIT_METHOD.equals(name))   return null;
  boolean isDeprecated=(access & Opcodes.ACC_DEPRECATED) != 0;
  boolean isConstructor=SYNTHETIC_INIT_METHOD.equals(name);
  boolean isVarargs=(access & Opcodes.ACC_VARARGS) != 0;
  boolean isAnnotationMethod=myResult.isAnnotationType();
  final byte flags=PsiMethodStubImpl.packFlags(isConstructor,isAnnotationMethod,isVarargs,isDeprecated);
  String canonicalMethodName=isConstructor ? myResult.getName() : name;
  PsiMethodStubImpl stub=new PsiMethodStubImpl(myResult,canonicalMethodName,null,flags,null);
  PsiModifierListStub modlist=new PsiModifierListStubImpl(stub,packModlistFlags(access));
  String returnType;
  List<String> args=new ArrayList<String>();
  if (signature == null) {
    returnType=parseMethodViaDescription(desc,stub,args);
  }
 else {
    try {
      returnType=parseMethodViaGenericSignature(signature,stub,args);
    }
 catch (    ClsFormatException e) {
      returnType=parseMethodViaDescription(desc,stub,args);
    }
  }
  stub.setReturnType(TypeInfo.fromString(returnType));
  final PsiParameterListStubImpl parameterList=new PsiParameterListStubImpl(stub);
  final int paramCount=args.size();
  for (int i=0; i < paramCount; i++) {
    String arg=args.get(i);
    boolean isEllipsisParam=isVarargs && i == (paramCount - 1);
    final TypeInfo typeInfo=TypeInfo.fromString(arg);
    if (isEllipsisParam) {
      typeInfo.isEllipsis=true;
      typeInfo.arrayCount--;
    }
    PsiParameterStubImpl parameterStub=new PsiParameterStubImpl(parameterList,"p" + (i + 1),typeInfo,isEllipsisParam);
    new PsiModifierListStubImpl(parameterStub,0);
  }
  if (exceptions != null) {
    String[] converted=new String[exceptions.length];
    for (int i=0; i < converted.length; i++) {
      converted[i]=Type.getObjectType(exceptions[i]).getClassName();
    }
    new PsiClassReferenceListStubImpl(stub,converted,PsiReferenceList.Role.THROWS_LIST);
  }
 else {
    new PsiClassReferenceListStubImpl(stub,EMPTY_STRINGS,PsiReferenceList.Role.THROWS_LIST);
  }
  return new AnnotationCollectingVisitor(stub,modlist);
}
