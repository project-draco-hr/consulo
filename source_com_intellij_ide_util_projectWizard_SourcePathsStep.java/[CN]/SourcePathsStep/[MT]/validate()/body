{
  if (isSourcesSearchInProgress()) {
    final int answer=Messages.showDialog(myPanel,ApplicationNamesInfo.getInstance().getProductName() + " is currently searching for sources. Would you like to stop the search?","Question",new String[]{"Continue Searching","Stop Searching"},0,Messages.getWarningIcon());
    if (answer == 1) {
      cancelSourcesSearch();
    }
    return false;
  }
  if (CREATE_SOURCE_PANEL.equals(myCurrentMode) && myRbCreateSource.isSelected()) {
    final String sourceDirectoryPath=getSourceDirectoryPath();
    final String relativePath=myTfSourceDirectoryName.getText().trim();
    if (relativePath.length() == 0) {
      String text="Relative path to sources is empty.\n" + "Would you like to mark the module content root\n" + "\"" + sourceDirectoryPath + "\"\n"+ "as a source directory?";
      final int answer=Messages.showDialog(myTfSourceDirectoryName,text,"Mark Source Directory",new String[]{"Mark","Do Not Mark","Cancel"},0,Messages.getQuestionIcon());
      if (answer == 2) {
        return false;
      }
      if (answer == 1) {
        myRbNoSource.doClick();
      }
    }
    if (sourceDirectoryPath != null) {
      final File rootDir=new File(myBuilder.getContentEntryPath());
      final File srcDir=new File(sourceDirectoryPath);
      try {
        if (!FileUtil.isAncestor(rootDir,srcDir,false)) {
          Messages.showErrorDialog(myTfSourceDirectoryName,"Source directory should be under module content root directory","Error");
          return false;
        }
      }
 catch (      IOException e) {
        Messages.showErrorDialog(myTfSourceDirectoryName,e.getMessage(),"Error");
        return false;
      }
      srcDir.mkdirs();
    }
  }
  return true;
}
