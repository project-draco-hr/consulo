{
  return new RecentProjectItemRenderer(myPathShortener){
    private GridBagConstraints nameCell;
    private GridBagConstraints pathCell;
    private GridBagConstraints closeButtonCell;
    private void initConstraints(){
      nameCell=new GridBagConstraints();
      pathCell=new GridBagConstraints();
      closeButtonCell=new GridBagConstraints();
      nameCell.gridx=0;
      nameCell.gridy=0;
      nameCell.weightx=1.0;
      nameCell.weighty=1.0;
      nameCell.anchor=GridBagConstraints.FIRST_LINE_START;
      nameCell.insets=JBUI.insets(6,5,1,5);
      pathCell.gridx=0;
      pathCell.gridy=1;
      pathCell.insets=JBUI.insets(1,5,6,5);
      pathCell.anchor=GridBagConstraints.LAST_LINE_START;
      closeButtonCell.gridx=1;
      closeButtonCell.gridy=0;
      closeButtonCell.anchor=GridBagConstraints.FIRST_LINE_END;
      closeButtonCell.insets=JBUI.insets(7,7,7,7);
      closeButtonCell.gridheight=2;
    }
    @Override protected Color getListBackground(    boolean isSelected,    boolean hasFocus){
      return isSelected ? FlatWelcomeFrame.getListSelectionColor(hasFocus) : FlatWelcomeFrame.getProjectsBackground();
    }
    @Override protected Color getListForeground(    boolean isSelected,    boolean hasFocus){
      return UIUtil.getListForeground(isSelected && hasFocus);
    }
    @Override protected void layoutComponents(){
      setLayout(new GridBagLayout());
      initConstraints();
      add(myName,nameCell);
      add(myPath,pathCell);
    }
    JComponent spacer=new NonOpaquePanel(){
      @Override public Dimension getPreferredSize(){
        return new Dimension(JBUI.scale(22),super.getPreferredSize().height);
      }
    }
;
    @Override public Component getListCellRendererComponent(    JList list,    final Object value,    int index,    final boolean isSelected,    boolean cellHasFocus){
      final Color fore=getListForeground(isSelected,list.hasFocus());
      final Color back=getListBackground(isSelected,list.hasFocus());
      final JLabel name=new JLabel();
      final JLabel path=new JLabel();
      name.setForeground(fore);
      path.setForeground(isSelected ? fore : UIUtil.getInactiveTextColor());
      setBackground(back);
      return new JPanel(){
{
          setLayout(new BorderLayout());
          setBackground(back);
          boolean isGroup=value instanceof ProjectGroupActionGroup;
          boolean isInsideGroup=false;
          if (value instanceof ReopenProjectAction) {
            final String path=((ReopenProjectAction)value).getProjectPath();
            for (            ProjectGroup group : RecentProjectsManager.getInstance().getGroups()) {
              final List<String> projects=group.getProjects();
              if (projects.contains(path)) {
                isInsideGroup=true;
                break;
              }
            }
          }
          setBorder(JBUI.Borders.empty(5,7));
          if (isInsideGroup) {
            add(spacer,BorderLayout.WEST);
          }
          if (isGroup) {
            final ProjectGroup group=((ProjectGroupActionGroup)value).getGroup();
            name.setText(" " + group.getName());
            name.setIcon(IconUtil.toSize(group.isExpanded() ? UIUtil.getTreeExpandedIcon() : UIUtil.getTreeCollapsedIcon(),JBUI.scale(16),JBUI.scale(16)));
            name.setFont(name.getFont().deriveFont(Font.BOLD));
            add(name);
          }
 else           if (value instanceof ReopenProjectAction) {
            final NonOpaquePanel p=new NonOpaquePanel(new BorderLayout());
            name.setText(((ReopenProjectAction)value).getTemplatePresentation().getText());
            path.setText(getTitle2Text((ReopenProjectAction)value,path,JBUI.scale(isInsideGroup ? 80 : 60)));
            p.add(name,BorderLayout.NORTH);
            p.add(path,BorderLayout.SOUTH);
            String projectPath=((ReopenProjectAction)value).getProjectPath();
            Icon icon=RecentProjectsManagerBase.getProjectIcon(projectPath,UIUtil.isUnderDarcula());
            if (icon == null) {
              if (UIUtil.isUnderDarcula()) {
                icon=RecentProjectsManagerBase.getProjectIcon(projectPath,false);
              }
            }
            if (icon == null) {
              icon=EmptyIcon.ICON_16;
            }
            final JLabel projectIcon=new JLabel("",icon,SwingConstants.LEFT){
              @Override protected void paintComponent(              Graphics g){
                getIcon().paintIcon(this,g,0,(getHeight() - getIcon().getIconHeight()) / 2);
              }
            }
;
            projectIcon.setBorder(JBUI.Borders.emptyRight(8));
            projectIcon.setVerticalAlignment(SwingConstants.CENTER);
            final NonOpaquePanel panel=new NonOpaquePanel(new BorderLayout());
            panel.add(p);
            panel.add(projectIcon,BorderLayout.WEST);
            add(panel);
          }
          AccessibleContextUtil.setCombinedName(this,name," - ",path);
          AccessibleContextUtil.setCombinedDescription(this,name," - ",path);
        }
        @Override public Dimension getPreferredSize(){
          return new Dimension(super.getPreferredSize().width,JBUI.scale(44));
        }
      }
;
    }
  }
;
}
