{
  hideActiveLookup();
  final CodeInsightSettings settings=CodeInsightSettings.getInstance();
  final PsiFile psiFile=PsiDocumentManager.getInstance(myProject).getPsiFile(editor.getDocument());
  final DaemonCodeAnalyzer daemonCodeAnalyzer=DaemonCodeAnalyzer.getInstance(myProject);
  final boolean previousUpdate;
  if (daemonCodeAnalyzer != null) {
    previousUpdate=((DaemonCodeAnalyzerImpl)daemonCodeAnalyzer).isUpdateByTimerEnabled();
    daemonCodeAnalyzer.setUpdateByTimerEnabled(false);
  }
 else {
    previousUpdate=false;
  }
  final LookupImpl lookup=new LookupImpl(myProject,editor,arranger);
  final UiNotifyConnector connector=new UiNotifyConnector(editor.getContentComponent(),new Activatable(){
    @Override public void showNotify(){
    }
    @Override public void hideNotify(){
      hideActiveLookup();
    }
  }
);
  final Alarm alarm=new Alarm();
  final Runnable request=new Runnable(){
    public void run(){
      if (myActiveLookup == lookup && lookup.getCurrentItem() != null) {
        final CompletionProcess completion=CompletionService.getCompletionService().getCurrentCompletion();
        if (completion == null || !completion.isAutopopupCompletion()) {
          DocumentationManager.getInstance(myProject).showJavaDocInfo(editor,psiFile,false);
        }
      }
    }
  }
;
  if (settings.AUTO_POPUP_JAVADOC_INFO) {
    alarm.addRequest(request,settings.JAVADOC_INFO_DELAY);
  }
  ApplicationManager.getApplication().assertIsDispatchThread();
  myActiveLookup=lookup;
  myActiveLookupEditor=editor;
  myActiveLookup.addLookupListener(new LookupAdapter(){
    public void itemSelected(    LookupEvent event){
      lookupClosed();
    }
    public void lookupCanceled(    LookupEvent event){
      lookupClosed();
    }
    public void currentItemChanged(    LookupEvent event){
      alarm.cancelAllRequests();
      if (settings.AUTO_POPUP_JAVADOC_INFO) {
        alarm.addRequest(request,settings.JAVADOC_INFO_DELAY);
      }
    }
    private void lookupClosed(){
      if (LookupActionHandler.DEBUG) {
        System.out.println("LookupManagerImpl.lookupClosed");
      }
      alarm.cancelAllRequests();
      if (daemonCodeAnalyzer != null) {
        daemonCodeAnalyzer.setUpdateByTimerEnabled(previousUpdate);
      }
      if (myActiveLookup == null)       return;
      LOG.assertTrue(myActiveLookup.isLookupDisposed());
      myActiveLookup.removeLookupListener(this);
      Lookup lookup=myActiveLookup;
      ApplicationManager.getApplication().assertIsDispatchThread();
      myActiveLookup=null;
      myActiveLookupEditor=null;
      myPropertyChangeSupport.firePropertyChange(PROP_ACTIVE_LOOKUP,lookup,null);
      Disposer.dispose(connector);
      if (LookupActionHandler.DEBUG) {
        System.out.println("LookupManagerImpl.lookupClosed2");
        System.out.println("myActiveLookup = " + myActiveLookup);
        System.out.println("this = " + this);
      }
    }
  }
);
  CamelHumpMatcher matcher=new CamelHumpMatcher(prefix == null ? "" : prefix);
  if (items.length > 0) {
    for (    final LookupElement item : items) {
      myActiveLookup.addItem(item,matcher);
    }
    myActiveLookup.refreshUi();
  }
 else {
    alarm.cancelAllRequests();
  }
  myPropertyChangeSupport.firePropertyChange(PROP_ACTIVE_LOOKUP,null,myActiveLookup);
  return myActiveLookup;
}
