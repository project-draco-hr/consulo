{
  hideActiveLookup();
  final CodeInsightSettings settings=CodeInsightSettings.getInstance();
  final PsiFile psiFile=PsiDocumentManager.getInstance(myProject).getPsiFile(editor.getDocument());
  final LookupImpl lookup=new LookupImpl(myProject,editor,arranger);
  DaemonCodeAnalyzer.getInstance(myProject).disableUpdateByTimer(lookup);
  final Alarm alarm=new Alarm();
  final Runnable request=new Runnable(){
    @Override public void run(){
      if (myActiveLookup != lookup)       return;
      LookupElement currentItem=lookup.getCurrentItem();
      if (currentItem != null && currentItem.isValid()) {
        final CompletionProcess completion=CompletionService.getCompletionService().getCurrentCompletion();
        if (completion != null && !completion.isAutopopupCompletion()) {
          try {
            DocumentationManager.getInstance(myProject).showJavaDocInfo(editor,psiFile,false);
          }
 catch (          IndexNotReadyException ignored) {
          }
        }
      }
    }
  }
;
  if (settings.AUTO_POPUP_JAVADOC_INFO) {
    alarm.addRequest(request,settings.JAVADOC_INFO_DELAY);
  }
  ApplicationManager.getApplication().assertIsDispatchThread();
  myActiveLookup=lookup;
  myActiveLookupEditor=editor;
  myActiveLookup.addLookupListener(new LookupAdapter(){
    @Override public void itemSelected(    LookupEvent event){
      lookupClosed();
    }
    @Override public void lookupCanceled(    LookupEvent event){
      lookupClosed();
    }
    @Override public void currentItemChanged(    LookupEvent event){
      alarm.cancelAllRequests();
      if (settings.AUTO_POPUP_JAVADOC_INFO) {
        alarm.addRequest(request,settings.JAVADOC_INFO_DELAY);
      }
    }
    private void lookupClosed(){
      ApplicationManager.getApplication().assertIsDispatchThread();
      alarm.cancelAllRequests();
      LookupImpl lookup=myActiveLookup;
      if (lookup == null)       return;
      LOG.assertTrue(lookup.isLookupDisposed());
      myActiveLookup=null;
      myActiveLookupEditor=null;
      lookup.removeLookupListener(this);
      myPropertyChangeSupport.firePropertyChange(PROP_ACTIVE_LOOKUP,lookup,null);
    }
  }
);
  CamelHumpMatcher matcher=new CamelHumpMatcher(prefix);
  if (items.length > 0) {
    for (    final LookupElement item : items) {
      myActiveLookup.addItem(item,matcher);
    }
    myActiveLookup.refreshUi(true,true);
  }
 else {
    alarm.cancelAllRequests();
  }
  myPropertyChangeSupport.firePropertyChange(PROP_ACTIVE_LOOKUP,null,myActiveLookup);
  return lookup;
}
