{
  if (parent instanceof ResourceBundleNode)   return children;
  Map<ResourceBundle,Collection<PropertiesFile>> childBundles=new THashMap<ResourceBundle,Collection<PropertiesFile>>();
  for (  AbstractTreeNode child : children) {
    Object f=child.getValue();
    if (f instanceof PropertiesFile) {
      PropertiesFile propertiesFile=(PropertiesFile)f;
      ResourceBundle bundle=propertiesFile.getResourceBundle();
      Collection<PropertiesFile> files=childBundles.get(bundle);
      if (files == null) {
        files=new SmartList<PropertiesFile>();
        childBundles.put(bundle,files);
      }
      files.add(propertiesFile);
    }
  }
  List<AbstractTreeNode> result=new ArrayList<AbstractTreeNode>();
  for (  Map.Entry<ResourceBundle,Collection<PropertiesFile>> entry : childBundles.entrySet()) {
    ResourceBundle resourceBundle=entry.getKey();
    Collection<PropertiesFile> files=entry.getValue();
    if (files.size() != 1) {
      result.add(new ResourceBundleNode(myProject,resourceBundle,settings));
    }
  }
  for (  AbstractTreeNode child : children) {
    Object f=child.getValue();
    if (f instanceof PropertiesFile) {
      PropertiesFile propertiesFile=(PropertiesFile)f;
      ResourceBundle bundle=propertiesFile.getResourceBundle();
      if (childBundles.get(bundle).size() != 1) {
        continue;
      }
    }
    result.add(child);
  }
  return result;
}
