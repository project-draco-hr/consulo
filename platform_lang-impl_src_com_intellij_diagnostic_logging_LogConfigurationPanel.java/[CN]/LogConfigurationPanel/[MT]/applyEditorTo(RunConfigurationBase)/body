{
  myFilesTable.stopEditing();
  configuration.removeAllLogFiles();
  configuration.removeAllPredefinedLogFiles();
  for (int i=0; i < myModel.getRowCount(); i++) {
    LogFileOptions options=(LogFileOptions)myModel.getValueAt(i,1);
    if (Comparing.equal(options.getPathPattern(),"")) {
      continue;
    }
    final Boolean checked=(Boolean)myModel.getValueAt(i,0);
    final Boolean skipped=(Boolean)myModel.getValueAt(i,2);
    final PredefinedLogFile predefined=myLog2Predefined.get(options);
    if (predefined != null) {
      configuration.addPredefinedLogFile(new PredefinedLogFile(predefined.getId(),options.isEnabled()));
    }
 else {
      configuration.addLogFile(options.getPathPattern(),options.getName(),checked.booleanValue(),skipped.booleanValue(),options.isShowAll());
    }
  }
  for (  PredefinedLogFile logFile : myUnresolvedPredefined) {
    configuration.addPredefinedLogFile(logFile);
  }
  final String text=myOutputFile.getText();
  configuration.setFileOutputPath(StringUtil.isEmpty(text) ? null : FileUtil.toSystemIndependentName(text));
  configuration.setSaveOutputToFile(myRedirectOutputCb.isSelected());
  configuration.setShowConsoleOnStdOut(myShowConsoleOnStdOutCb.isSelected());
  configuration.setShowConsoleOnStdErr(myShowConsoleOnStdErrCb.isSelected());
}
