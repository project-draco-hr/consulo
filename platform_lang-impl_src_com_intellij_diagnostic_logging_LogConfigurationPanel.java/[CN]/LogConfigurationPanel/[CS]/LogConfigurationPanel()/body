{
  myModel=new ListTableModel<LogFileOptions>(IS_SHOW,FILE,IS_SKIP_CONTENT);
  myFilesTable=new TableView<LogFileOptions>(myModel);
  final JTableHeader tableHeader=myFilesTable.getTableHeader();
  final FontMetrics fontMetrics=tableHeader.getFontMetrics(tableHeader.getFont());
  int preferredWidth=fontMetrics.stringWidth(IS_SHOW.getName()) + 20;
  setUpColumnWidth(tableHeader,preferredWidth,0);
  preferredWidth=fontMetrics.stringWidth(IS_SKIP_CONTENT.getName()) + 20;
  setUpColumnWidth(tableHeader,preferredWidth,2);
  myFilesTable.setColumnSelectionAllowed(false);
  myFilesTable.setShowGrid(false);
  myFilesTable.setDragEnabled(false);
  myFilesTable.setShowHorizontalLines(false);
  myFilesTable.setShowVerticalLines(false);
  myFilesTable.setIntercellSpacing(new Dimension(0,0));
  myAddButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ArrayList<LogFileOptions> newList=new ArrayList<LogFileOptions>(myModel.getItems());
      final LogFileOptions selectedNameLocation=showEditorDialog("","",false);
      if (selectedNameLocation != null) {
        newList.add(new LogFileOptions(selectedNameLocation.getName(),selectedNameLocation.getPathPattern(),true,true,selectedNameLocation.isShowAll()));
        myModel.setItems(newList);
        int index=myModel.getRowCount() - 1;
        myModel.fireTableRowsInserted(index,index);
        myFilesTable.setRowSelectionInterval(index,index);
      }
    }
  }
);
  myRemoveButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      TableUtil.stopEditing(myFilesTable);
      final int[] selected=myFilesTable.getSelectedRows();
      if (selected == null || selected.length == 0)       return;
      for (int i=selected.length - 1; i >= 0; i--) {
        myModel.removeRow(selected[i]);
      }
      for (int i=selected.length - 1; i >= 0; i--) {
        int idx=selected[i];
        myModel.fireTableRowsDeleted(idx,idx);
      }
      int selection=selected[0];
      if (selection >= myModel.getRowCount()) {
        selection=myModel.getRowCount() - 1;
      }
      if (selection >= 0) {
        myFilesTable.setRowSelectionInterval(selection,selection);
      }
      myFilesTable.requestFocus();
    }
  }
);
  myRemoveButton.setEnabled(false);
  myFilesTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      myRemoveButton.setEnabled(myFilesTable.getSelectedRowCount() >= 1);
    }
  }
);
  final JScrollPane scrollPane=ScrollPaneFactory.createScrollPane(myFilesTable);
  scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
  myScrollPanel.add(scrollPane,BorderLayout.CENTER);
  myWholePanel.setPreferredSize(new Dimension(-1,150));
}
