{
  final Configuration configuration=Configuration.getProjectInstance(project);
  final BaseInjection baseTemplate=new BaseInjection(template.getSupportId()).copyFrom(template);
  final MethodParameterInjection allMethodParameterInjection=createFrom(project,baseTemplate,contextMethod,true);
  final BaseInjection originalInjection=configuration.findExistingInjection(allMethodParameterInjection);
  final MethodParameterInjection methodParameterInjection;
  if (originalInjection == null) {
    methodParameterInjection=template;
  }
 else {
    final BaseInjection originalCopy=originalInjection.copy();
    final InjectionPlace currentPlace=template.getInjectionPlaces().get(0);
    originalCopy.mergeOriginalPlacesFrom(template,true);
    originalCopy.setPlaceEnabled(currentPlace.getText(),true);
    methodParameterInjection=createFrom(project,originalCopy,contextMethod,false);
  }
  if (InjectLanguageAction.doEditConfigurable(project,new MethodParameterInjectionConfigurable(methodParameterInjection,null,project))) {
    final BaseInjection newInjection=new BaseInjection(methodParameterInjection.getSupportId()).copyFrom(methodParameterInjection);
    if (originalInjection != null) {
      newInjection.mergeOriginalPlacesFrom(originalInjection,true);
    }
    configuration.replaceInjectionsWithUndo(project,Collections.singletonList(newInjection),ContainerUtil.createMaybeSingletonList(originalInjection),Collections.<PsiElement>emptyList());
  }
}
