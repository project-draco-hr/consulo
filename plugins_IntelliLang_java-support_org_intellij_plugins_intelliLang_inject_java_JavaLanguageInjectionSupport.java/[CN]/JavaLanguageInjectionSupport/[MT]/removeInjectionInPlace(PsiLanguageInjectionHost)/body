{
  if (!isMine(psiElement))   return false;
  final HashMap<BaseInjection,Pair<PsiMethod,Integer>> injectionsMap=new HashMap<BaseInjection,Pair<PsiMethod,Integer>>();
  final ArrayList<PsiAnnotation> annotations=new ArrayList<PsiAnnotation>();
  final PsiLiteralExpression host=(PsiLiteralExpression)psiElement;
  final Project project=host.getProject();
  final Configuration configuration=Configuration.getProjectInstance(project);
  collectInjections(host,configuration,injectionsMap,annotations);
  if (injectionsMap.isEmpty() && annotations.isEmpty())   return false;
  final ArrayList<BaseInjection> originalInjections=new ArrayList<BaseInjection>(injectionsMap.keySet());
  final List<BaseInjection> newInjections=ContainerUtil.mapNotNull(originalInjections,new NullableFunction<BaseInjection,BaseInjection>(){
    public BaseInjection fun(    final BaseInjection injection){
      final Pair<PsiMethod,Integer> pair=injectionsMap.get(injection);
      final String placeText=getPatternStringForJavaPlace(pair.first,pair.second);
      final BaseInjection newInjection=injection.copy();
      newInjection.setPlaceEnabled(placeText,false);
      return newInjection;
    }
  }
);
  configuration.replaceInjectionsWithUndo(project,newInjections,originalInjections,annotations);
  return true;
}
