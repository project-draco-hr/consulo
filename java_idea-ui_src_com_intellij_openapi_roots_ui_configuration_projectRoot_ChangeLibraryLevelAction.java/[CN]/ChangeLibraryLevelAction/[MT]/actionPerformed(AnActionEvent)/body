{
  final ProjectStructureElement selectedElement=mySourceConfigurable.getSelectedElement();
  if (!(selectedElement instanceof LibraryProjectStructureElement))   return;
  final StructureConfigurableContext context=mySourceConfigurable.myContext;
  final Library originalLibrary=((LibraryProjectStructureElement)selectedElement).getLibrary();
  final LibraryEx oldLibrary=(LibraryEx)context.getLibrary(originalLibrary.getName(),mySourceConfigurable.getLevel());
  LOG.assertTrue(oldLibrary != null);
  final Library newLibrary=doCopy(oldLibrary);
  if (newLibrary == null)   return;
  final ModulesConfigurator configurator=context.getModulesConfigurator();
  final Collection<ProjectStructureElementUsage> usages=context.getDaemonAnalyzer().getUsages(selectedElement);
  for (  ProjectStructureElementUsage usage : usages) {
    if (usage instanceof UsageInModuleClasspath) {
      final Module module=((UsageInModuleClasspath)usage).getModule();
      final ModuleEditor editor=configurator.getModuleEditor(module);
      if (editor != null) {
        final ModifiableRootModel rootModel=editor.getModifiableRootModelProxy();
        OrderEntryUtil.replaceLibrary(rootModel,oldLibrary,newLibrary);
        context.getDaemonAnalyzer().queueUpdate(new ModuleProjectStructureElement(context,module));
      }
    }
 else     if (usage instanceof UsageInArtifact) {
      final PackagingElement<?> libraryElement=PackagingElementFactory.getInstance().createLibraryFiles(newLibrary.getName(),newLibrary.getTable().getTableLevel(),null);
      ((UsageInArtifact)usage).replaceElement(libraryElement);
    }
  }
  if (!myCopy) {
    mySourceConfigurable.getModelProvider().getModifiableModel().removeLibrary(originalLibrary);
    context.getDaemonAnalyzer().removeElement(selectedElement);
    mySourceConfigurable.removeLibraryNode(originalLibrary);
  }
  ProjectStructureConfigurable.getInstance(myProject).selectProjectOrGlobalLibrary(newLibrary,true);
}
