{
  JPanel panel=new JPanel(new VerticalFlowLayout(VerticalFlowLayout.TOP));
  mySignatureEditor=createSignatureEditor(myMethod.getMethod());
  panel.add(mySignatureEditor);
  JPanel top=new JPanel(new BorderLayout());
  if (myAllowDelegation) {
    myDelegationPanel=createDelegationPanel();
    top.add(myDelegationPanel,BorderLayout.WEST);
  }
  myPropagateParamChangesButton=new JButton(RefactoringBundle.message("changeSignature.propagate.parameters.title"));
  myPropagateParamChangesButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      final Ref<CallerChooserBase<METHOD>> chooser=new Ref<CallerChooserBase<METHOD>>();
      Consumer<Set<METHOD>> callback=new Consumer<Set<METHOD>>(){
        @Override public void consume(        Set<METHOD> callers){
          myMethodsToPropagateParameters=callers;
          myParameterPropagationTreeToReuse=chooser.get().getTree();
        }
      }
;
      try {
        chooser.set(createCallerChooser(RefactoringBundle.message("changeSignature.parameter.caller.chooser"),myParameterPropagationTreeToReuse,callback));
      }
 catch (      ProcessCanceledException ex) {
        return;
      }
      chooser.get().show();
    }
  }
);
  myPropagatePanel=new JPanel();
  myPropagatePanel.add(myPropagateParamChangesButton);
  top.add(myPropagatePanel,BorderLayout.EAST);
  panel.add(top);
  return panel;
}
