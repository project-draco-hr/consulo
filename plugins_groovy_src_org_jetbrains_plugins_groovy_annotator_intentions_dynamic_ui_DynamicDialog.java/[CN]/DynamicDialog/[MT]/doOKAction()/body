{
  GrTypeElement typeElement=getEnteredTypeName();
  DItemElement myDynamicElement;
  if (QuickfixUtil.isCall(myReferenceExpression)) {
    final String[] methodArgumentsNames=QuickfixUtil.getMethodArgumentsNames(((GrCallExpression)myReferenceExpression.getParent()));
    final String[] methodArgumentsTypes=QuickfixUtil.getMethodArgumentsTypes(((GrCallExpression)myReferenceExpression.getParent()));
    final List<MyPair> pairs=QuickfixUtil.swapArgumentsAndTypes(methodArgumentsNames,methodArgumentsTypes);
    myDynamicElement=new DMethodElement(myReferenceExpression.getName(),null,pairs);
  }
 else {
    myDynamicElement=new DPropertyElement(myReferenceExpression.getName(),null);
  }
  if (typeElement == null) {
    myDynamicElement.setType("java.lang.Object");
  }
 else {
    PsiType type=typeElement.getType();
    if (type instanceof PsiPrimitiveType) {
      type=TypesUtil.boxPrimitiveType(type,typeElement.getManager(),myProject.getAllScope());
    }
    final String typeQualifiedName=type.getCanonicalText();
    if (typeQualifiedName != null) {
      myDynamicElement.setType(typeQualifiedName);
    }
 else {
      myDynamicElement.setType(type.getPresentableText());
    }
  }
  final DynamicManager dynamicManager=DynamicManager.getInstance(myProject);
  final DClassElement classElement=dynamicManager.getOrCreateClassElement(myProject,getEnteredContaningClass().getContainingClass().getQualifiedName());
  if (myDynamicElement instanceof DMethodElement) {
    dynamicManager.addMethod(classElement,((DMethodElement)myDynamicElement));
  }
 else {
    dynamicManager.addProperty(classElement,((DPropertyElement)myDynamicElement));
  }
  myDynamicManager.fireChange();
  super.doOKAction();
}
