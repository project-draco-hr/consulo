{
  super.doOKAction();
  GrTypeElement typeElement=getEnteredTypeName();
  final DItemElement dynamicElement;
  if (QuickfixUtil.isCall(myReferenceExpression)) {
    final String[] methodArgumentsNames=QuickfixUtil.getMethodArgumentsNames(((GrCallExpression)myReferenceExpression.getParent()));
    final String[] methodArgumentsTypes=QuickfixUtil.getMethodArgumentsTypes(((GrCallExpression)myReferenceExpression.getParent()));
    final List<MyPair> pairs=QuickfixUtil.swapArgumentsAndTypes(methodArgumentsNames,methodArgumentsTypes);
    dynamicElement=new DMethodElement(myReferenceExpression.getName(),null,pairs);
  }
 else {
    dynamicElement=new DPropertyElement(myReferenceExpression.getName(),null);
  }
  if (typeElement == null) {
    dynamicElement.setType("java.lang.Object");
  }
 else {
    PsiType type=typeElement.getType();
    if (type instanceof PsiPrimitiveType) {
      type=TypesUtil.boxPrimitiveType(type,typeElement.getManager(),myProject.getAllScope());
    }
    final String typeQualifiedName=type.getCanonicalText();
    if (typeQualifiedName != null) {
      dynamicElement.setType(typeQualifiedName);
    }
 else {
      dynamicElement.setType(type.getPresentableText());
    }
  }
  final DynamicManager dynamicManager=DynamicManager.getInstance(myProject);
  final DClassElement classElement=dynamicManager.getOrCreateClassElement(myProject,getEnteredContaningClass().getContainingClass().getQualifiedName());
  final Document document=PsiDocumentManager.getInstance(myProject).getDocument(myReferenceExpression.getContainingFile());
  CommandProcessor.getInstance().executeCommand(myProject,new Runnable(){
    public void run(){
      UndoManager.getInstance(myProject).undoableActionPerformed(new UndoableAction(){
        public void undo() throws UnexpectedUndoException {
          dynamicManager.removeItemElement(dynamicElement);
          myDynamicManager.fireChange();
        }
        public void redo() throws UnexpectedUndoException {
          addElement(dynamicElement,dynamicManager,classElement);
        }
        public DocumentReference[] getAffectedDocuments(){
          return new DocumentReference[]{DocumentReferenceByDocument.createDocumentReference(document)};
        }
        public boolean isComplex(){
          return true;
        }
      }
);
      addElement(dynamicElement,dynamicManager,classElement);
    }
  }
,"Add dynamic element",null);
}
