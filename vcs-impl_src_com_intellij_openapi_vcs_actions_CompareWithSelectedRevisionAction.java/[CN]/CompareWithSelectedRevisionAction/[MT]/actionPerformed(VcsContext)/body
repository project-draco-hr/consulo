{
  final VirtualFile file=vcsContext.getSelectedFiles()[0];
  final Project project=vcsContext.getProject();
  final AbstractVcs vcs=ProjectLevelVcsManager.getInstance(project).getVcsFor(file);
  final VcsHistoryProvider vcsHistoryProvider=vcs.getVcsHistoryProvider();
  try {
    final VcsHistorySession session=vcsHistoryProvider.createSessionFor(new FilePathImpl(file));
    if (session == null)     return;
    final List<VcsFileRevision> revisions=session.getRevisionList();
    final HistoryAsTreeProvider treeHistoryProvider=vcsHistoryProvider.getTreeHistoryProvider();
    if (treeHistoryProvider != null) {
      showTreePopup(treeHistoryProvider.createTreeOn(revisions),file,project,vcs.getDiffProvider());
    }
 else {
      showListPopup(revisions,project,new Consumer<VcsFileRevision>(){
        public void consume(        final VcsFileRevision revision){
          DiffActionExecutor.showDiff(vcs.getDiffProvider(),revision.getRevisionNumber(),file,project);
        }
      }
,true);
    }
  }
 catch (  VcsException e1) {
    Messages.showErrorDialog(VcsBundle.message("message.text.cannot.show.differences",e1.getMessage()),CommonBundle.message("title.error"));
  }
}
