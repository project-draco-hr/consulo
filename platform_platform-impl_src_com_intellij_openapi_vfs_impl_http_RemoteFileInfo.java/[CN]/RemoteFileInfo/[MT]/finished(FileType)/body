{
  final File localIOFile;
synchronized (myLock) {
    LOG.debug("Downloading finished, size = " + myLocalFile.length() + ", file type="+ (fileType != null ? fileType.getName() : "null"));
    if (fileType != null) {
      String fileName=myLocalFile.getName();
      int dot=fileName.lastIndexOf('.');
      String extension=fileType.getDefaultExtension();
      if (dot == -1 || !extension.equals(fileName.substring(dot + 1))) {
        File newFile=FileUtil.findSequentNonexistentFile(myLocalFile.getParentFile(),fileName,extension);
        try {
          FileUtil.rename(myLocalFile,newFile);
          myLocalFile=newFile;
        }
 catch (        IOException e) {
          LOG.debug(e);
        }
      }
    }
    localIOFile=myLocalFile;
  }
  VirtualFile localFile=new WriteAction<VirtualFile>(){
    @Override protected void run(    final Result<VirtualFile> result){
      final VirtualFile file=LocalFileSystem.getInstance().refreshAndFindFileByIoFile(localIOFile);
      if (file != null) {
        file.refresh(false,false);
      }
      result.setResult(file);
    }
  }
.execute().getResultObject();
  LOG.assertTrue(localFile != null,"Virtual local file not found for " + localIOFile.getAbsolutePath());
  LOG.debug("Virtual local file: " + localFile + ", size = "+ localFile.getLength());
  FileDownloadingListener[] listeners;
synchronized (myLock) {
    myLocalVirtualFile=localFile;
    myPrevLocalFile=null;
    myState=RemoteFileState.DOWNLOADED;
    myErrorMessage=null;
    listeners=myListeners.toArray(new FileDownloadingListener[myListeners.size()]);
  }
  for (  FileDownloadingListener listener : listeners) {
    listener.fileDownloaded(localFile);
  }
}
