{
  final Color oldColor=g.getColor();
  if (opaque && bgColor != null) {
    g.setColor(bgColor);
    drawLine(g,startX,lineY,endX,lineY);
    drawLine(g,startX,lineY + 1,endX,lineY + 1);
    drawLine(g,startX,lineY + 2,endX,lineY + 2);
  }
  g.setColor(fgColor != null ? fgColor : oldColor);
  final int step=4;
  final int startPosCorrection=startX % step < 3 ? 0 : 1;
  final int dotX0=(startX / step + startPosCorrection) * step;
  final Composite oldComposite=g.getComposite();
  g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,.2f));
  g.drawLine(dotX0,lineY,dotX0,lineY);
  g.drawLine(dotX0 + 2,lineY,dotX0 + 2,lineY);
  g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,1.0f));
  g.drawLine(dotX0,lineY + 1,dotX0 + 2,lineY + 1);
  g.drawLine(dotX0 + 1,lineY + 2,dotX0 + 1,lineY + 2);
  g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,.5f));
  g.drawLine(dotX0 + 1,lineY,dotX0 + 1,lineY);
  g.drawLine(dotX0,lineY + 2,dotX0,lineY + 2);
  g.drawLine(dotX0 + 2,lineY + 2,dotX0 + 2,lineY + 2);
  g.setComposite(oldComposite);
  for (int dotXi=dotX0 + step; dotXi < endX; dotXi+=step) {
    g.copyArea(dotX0,lineY,3,3,dotXi - dotX0,0);
  }
  g.setColor(oldColor);
}
