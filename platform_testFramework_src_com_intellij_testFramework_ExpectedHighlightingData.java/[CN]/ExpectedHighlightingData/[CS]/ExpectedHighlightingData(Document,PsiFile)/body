{
  myDocument=document;
  myFile=file;
  myText=document.getText();
  highlightingTypes=new LinkedHashMap<String,ExpectedHighlightingSet>();
  new WriteCommandAction.Simple(file == null ? null : file.getProject()){
    public void run(){
      boolean checkWarnings=false;
      boolean checkWeakWarnings=false;
      boolean checkInfos=false;
      highlightingTypes.put(ERROR_MARKER,new ExpectedHighlightingSet(HighlightSeverity.ERROR,false,true));
      highlightingTypes.put(WARNING_MARKER,new ExpectedHighlightingSet(HighlightSeverity.WARNING,false,checkWarnings));
      highlightingTypes.put(WEAK_WARNING_MARKER,new ExpectedHighlightingSet(HighlightSeverity.WEAK_WARNING,false,checkWeakWarnings));
      highlightingTypes.put(INFO_MARKER,new ExpectedHighlightingSet(HighlightSeverity.INFORMATION,false,checkInfos));
      highlightingTypes.put("symbolName",new ExpectedHighlightingSet(HighlightInfoType.SYMBOL_TYPE_SEVERITY,false,false));
      for (      SeveritiesProvider provider : Extensions.getExtensions(SeveritiesProvider.EP_NAME)) {
        for (        HighlightInfoType type : provider.getSeveritiesHighlightInfoTypes()) {
          final HighlightSeverity severity=type.getSeverity(null);
          highlightingTypes.put(severity.toString(),new ExpectedHighlightingSet(severity,false,true));
        }
      }
      highlightingTypes.put(END_LINE_HIGHLIGHT_MARKER,new ExpectedHighlightingSet(HighlightSeverity.ERROR,true,true));
      highlightingTypes.put(END_LINE_WARNING_MARKER,new ExpectedHighlightingSet(HighlightSeverity.WARNING,true,checkWarnings));
      initAdditionalHighlightingTypes();
    }
  }
.execute().throwException();
}
