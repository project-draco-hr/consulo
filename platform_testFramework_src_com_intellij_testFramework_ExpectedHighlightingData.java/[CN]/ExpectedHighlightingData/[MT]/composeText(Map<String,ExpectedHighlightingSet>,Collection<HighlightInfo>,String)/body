{
  List<Pair<String,HighlightInfo>> list=ContainerUtil.mapNotNull(infos,new NullableFunction<HighlightInfo,Pair<String,HighlightInfo>>(){
    @Override public Pair<String,HighlightInfo> fun(    HighlightInfo info){
      for (      Map.Entry<String,ExpectedHighlightingSet> entry : types.entrySet()) {
        final ExpectedHighlightingSet set=entry.getValue();
        if (set.enabled && set.severity == info.getSeverity() && set.endOfLine == info.isAfterEndOfLine()) {
          return Pair.create(entry.getKey(),info);
        }
      }
      return null;
    }
  }
);
  Collections.sort(list,new Comparator<Pair<String,HighlightInfo>>(){
    @Override public int compare(    Pair<String,HighlightInfo> o1,    Pair<String,HighlightInfo> o2){
      HighlightInfo i1=o1.second;
      HighlightInfo i2=o2.second;
      int byEnds=i2.endOffset - i1.endOffset;
      if (byEnds != 0)       return byEnds;
      if (!i1.isAfterEndOfLine() && !i2.isAfterEndOfLine()) {
        int byStarts=i1.startOffset - i2.startOffset;
        if (byStarts != 0)         return byStarts;
      }
 else {
        int byEOL=Comparing.compare(i2.isAfterEndOfLine(),i1.isAfterEndOfLine());
        if (byEOL != 0)         return byEOL;
      }
      int bySeverity=i2.getSeverity().compareTo(i1.getSeverity());
      if (bySeverity != 0)       return bySeverity;
      return Comparing.compare(i1.getDescription(),i2.getDescription());
    }
  }
);
  StringBuilder sb=new StringBuilder();
  Pair<Integer,Integer> result=composeText(sb,list,0,text,text.length(),0);
  sb.insert(0,text.substring(0,result.second));
  return sb.toString();
}
