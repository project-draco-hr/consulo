{
  String text=document.getText();
  final Set<String> markers=highlightingTypes.keySet();
  String typesRegex="(?:" + StringUtil.join(markers,")|(?:") + ")";
  @NonNls String pat=".*?(<(" + typesRegex + ")(?: descr=\"((?:[^\"\\\\]|\\\\\"|\\\\\\\\\")*)\")?(?: type=\"([0-9A-Z_]+)\")?(?: foreground=\"([0-9xa-f]+)\")?(?: background=\"([0-9xa-f]+)\")?(?: effectcolor=\"([0-9xa-f]+)\")?(?: effecttype=\"([A-Z]+)\")?(?: fonttype=\"([0-9]+)\")?(/)?>)(.*)";
  Pattern p=Pattern.compile(pat,Pattern.DOTALL);
  Out:   while (true) {
    Matcher m=p.matcher(text);
    if (!m.matches())     break;
    int startOffset=m.start(1);
    String marker=m.group(2);
    ExpectedHighlightingSet expectedHighlightingSet=highlightingTypes.get(marker);
    while (!expectedHighlightingSet.enabled) {
      if (!m.find())       break Out;
      marker=m.group(2);
      startOffset=m.start(1);
      expectedHighlightingSet=highlightingTypes.get(marker);
    }
    int pos=3;
    @NonNls String descr=m.group(pos++);
    if (descr == null) {
      descr=ANY_TEXT;
    }
 else     if (descr.equals("null")) {
      descr=null;
    }
    if (descr != null) {
      descr=descr.replaceAll("\\\\\\\\\"","\"");
    }
    String typeString=m.group(pos++);
    String foregroundColor=m.group(pos++);
    String backgroundColor=m.group(pos++);
    String effectColor=m.group(pos++);
    String effectType=m.group(pos++);
    String fontType=m.group(pos++);
    String closeTagMarker=m.group(pos++);
    String rest=m.group(pos++);
    String content;
    int endOffset;
    if (closeTagMarker == null) {
      Pattern pat2=Pattern.compile("(.*?)</" + marker + ">(.*)",Pattern.DOTALL);
      final Matcher matcher2=pat2.matcher(rest);
      LOG.assertTrue(matcher2.matches(),"Cannot find closing </" + marker + ">");
      content=matcher2.group(1);
      endOffset=m.start(pos - 1) + matcher2.start(2);
    }
 else {
      content="";
      endOffset=m.start(pos - 1);
    }
    document.replaceString(startOffset,endOffset,content);
    TextAttributes forcedAttributes=null;
    if (foregroundColor != null) {
      forcedAttributes=new TextAttributes(Color.decode(foregroundColor),Color.decode(backgroundColor),Color.decode(effectColor),EffectType.valueOf(effectType),Integer.parseInt(fontType));
    }
    TextRange textRange=new TextRange(startOffset,startOffset + content.length());
    HighlightInfoType type=WHATEVER;
    if (typeString != null) {
      try {
        Field field=HighlightInfoType.class.getField(typeString);
        type=(HighlightInfoType)field.get(null);
      }
 catch (      Exception e) {
      }
      LOG.assertTrue(type != null,"Wrong highlight type: " + typeString);
    }
    HighlightInfo highlightInfo=new HighlightInfo(forcedAttributes,type,textRange.getStartOffset(),textRange.getEndOffset(),descr,descr,expectedHighlightingSet.severity,expectedHighlightingSet.endOfLine,null,false);
    expectedHighlightingSet.infos.add(highlightInfo);
    text=document.getText();
  }
}
