{
  final String[] names={ApplicationBundle.message("listbox.import.package"),ApplicationBundle.message("listbox.import.with.subpackages")};
  TableModel dataModel=new AbstractTableModel(){
    public int getColumnCount(){
      return names.length;
    }
    public int getRowCount(){
      return myImportLayoutList.getEntryCount();
    }
    public Object getValueAt(    int row,    int col){
      CodeStyleSettings.ImportLayoutTable.Entry entry=myImportLayoutList.getEntryAt(row);
      if (col == 0) {
        if (isOtherEntry(entry) && entry == myOtherPackageEntry) {
          return ApplicationBundle.message("listbox.import.all.other.imports");
        }
 else         if (entry instanceof CodeStyleSettings.ImportLayoutTable.PackageEntry) {
          CodeStyleSettings.ImportLayoutTable.PackageEntry packageEntry=(CodeStyleSettings.ImportLayoutTable.PackageEntry)entry;
          return packageEntry.getPackageName();
        }
 else {
          return ApplicationBundle.message("listbox.import.blank.line");
        }
      }
      if (col == 1) {
        if (isOtherEntry(entry) && entry == myOtherPackageEntry) {
          return null;
        }
 else         if (entry instanceof CodeStyleSettings.ImportLayoutTable.PackageEntry) {
          CodeStyleSettings.ImportLayoutTable.PackageEntry packageEntry=(CodeStyleSettings.ImportLayoutTable.PackageEntry)entry;
          return packageEntry.isWithSubpackages() ? Boolean.TRUE : Boolean.FALSE;
        }
 else {
          return null;
        }
      }
      return null;
    }
    public String getColumnName(    int column){
      return names[column];
    }
    public Class getColumnClass(    int c){
      if (c == 0) {
        return String.class;
      }
      if (c == 1) {
        return Boolean.class;
      }
      return null;
    }
    public boolean isCellEditable(    int row,    int col){
      CodeStyleSettings.ImportLayoutTable.Entry entry=myImportLayoutList.getEntryAt(row);
      if (isOtherEntry(entry) && entry == myOtherPackageEntry) {
        return false;
      }
 else       if (entry instanceof CodeStyleSettings.ImportLayoutTable.PackageEntry) {
        return true;
      }
 else {
        return false;
      }
    }
    public void setValueAt(    Object aValue,    int row,    int col){
      CodeStyleSettings.ImportLayoutTable.Entry entry=myImportLayoutList.getEntryAt(row);
      if (col == 0 && entry instanceof CodeStyleSettings.ImportLayoutTable.PackageEntry) {
        CodeStyleSettings.ImportLayoutTable.PackageEntry packageEntry=(CodeStyleSettings.ImportLayoutTable.PackageEntry)entry;
        CodeStyleSettings.ImportLayoutTable.PackageEntry newPackageEntry=new CodeStyleSettings.ImportLayoutTable.PackageEntry(((String)aValue).trim(),packageEntry.isWithSubpackages());
        myImportLayoutList.setEntryAt(newPackageEntry,row);
      }
      if (col == 1 && entry instanceof CodeStyleSettings.ImportLayoutTable.PackageEntry) {
        CodeStyleSettings.ImportLayoutTable.PackageEntry packageEntry=(CodeStyleSettings.ImportLayoutTable.PackageEntry)entry;
        CodeStyleSettings.ImportLayoutTable.PackageEntry newPackageEntry=new CodeStyleSettings.ImportLayoutTable.PackageEntry(packageEntry.getPackageName(),aValue.equals(Boolean.TRUE));
        myImportLayoutList.setEntryAt(newPackageEntry,row);
      }
    }
  }
;
  myImportLayoutTable=new Table(dataModel);
  myImportLayoutTable.setDefaultRenderer(Boolean.class,new BooleanTableCellRenderer());
  myImportLayoutTable.fixColumnWidthToHeader(1);
  myImportLayoutTable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  TableCellEditor editor=myImportLayoutTable.getDefaultEditor(String.class);
  if (editor instanceof DefaultCellEditor) {
    ((DefaultCellEditor)editor).setClickCountToStart(1);
  }
  myImportLayoutTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      updateButtons();
    }
  }
);
  JScrollPane scrollpane=ScrollPaneFactory.createScrollPane(myImportLayoutTable);
  return scrollpane;
}
