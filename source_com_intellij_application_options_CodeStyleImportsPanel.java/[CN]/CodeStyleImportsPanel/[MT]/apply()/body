{
  if (myImportLayoutTable.isEditing()) {
    TableCellEditor editor=myImportLayoutTable.getCellEditor();
    if (editor != null) {
      editor.stopCellEditing();
    }
  }
  if (myPackageTable.isEditing()) {
    TableCellEditor editor=myPackageTable.getCellEditor();
    if (editor != null) {
      editor.stopCellEditing();
    }
  }
  mySettings.USE_FQ_CLASS_NAMES=myCbUseFQClassNames.isSelected();
  mySettings.USE_FQ_CLASS_NAMES_IN_JAVADOC=myCbUseFQClassNamesInJavaDoc.isSelected();
  mySettings.USE_SINGLE_CLASS_IMPORTS=myCbUseSingleClassImports.isSelected();
  mySettings.INSERT_INNER_CLASS_IMPORTS=myCbInsertInnerClassImports.isSelected();
  try {
    mySettings.CLASS_COUNT_TO_USE_IMPORT_ON_DEMAND=Integer.parseInt(myClassCountField.getText());
  }
 catch (  NumberFormatException e) {
  }
  try {
    mySettings.NAMES_COUNT_TO_USE_IMPORT_ON_DEMAND=Integer.parseInt(myNamesCountField.getText());
  }
 catch (  NumberFormatException e) {
  }
  mySettings.IMPORT_LAYOUT_TABLE.copyFrom(myImportLayoutList);
  CodeStyleSettings.ImportLayoutTable.Entry[] entries=myImportLayoutList.getEntries();
  int removedEntryCount=0;
  for (int i=0; i < entries.length; i++) {
    CodeStyleSettings.ImportLayoutTable.Entry entry=entries[i];
    if (isOtherEntry(entry) && entry != myOtherPackageEntry) {
      mySettings.IMPORT_LAYOUT_TABLE.removeEntryAt(i - removedEntryCount);
      removedEntryCount++;
    }
  }
  mySettings.PACKAGES_TO_USE_IMPORT_ON_DEMAND=myPackageList;
  mySettings.JSP_PREFER_COMMA_SEPARATED_IMPORT_LIST=myJspImportCommaSeparated.isSelected();
}
