{
  ExitCode exitCode=ExitCode.NOTHING_DONE;
  if (outputConsumer.getCompiledClasses().isEmpty() || !isEnabled(context,chunk)) {
    return exitCode;
  }
  InstrumentationClassFinder finder=null;
  final String progress=getProgressMessage();
  final boolean shouldShowProgress=!StringUtil.isEmptyOrSpaces(progress);
  if (shouldShowProgress) {
    context.processMessage(new ProgressMessage(progress + " [" + chunk.getName()+ "]"));
  }
  try {
    for (    CompiledClass compiledClass : outputConsumer.getCompiledClasses().values()) {
      final BinaryContent originalContent=compiledClass.getContent();
      final ClassReader reader=new ClassReader(originalContent.getBuffer(),originalContent.getOffset(),originalContent.getLength());
      final int version=getClassFileVersion(reader);
      if (!canInstrument(compiledClass,version)) {
        continue;
      }
      if (finder == null) {
        finder=CLASS_FINDER.get(context);
        if (finder == null) {
          final ProjectPaths paths=context.getProjectPaths();
          final Collection<File> platformCp=paths.getPlatformCompilationClasspath(chunk,false);
          final Collection<File> classpath=new ArrayList<File>();
          classpath.addAll(paths.getCompilationClasspath(chunk,false));
          classpath.addAll(ProjectPaths.getSourceRootsWithDependents(chunk).keySet());
          finder=createInstrumentationClassFinder(platformCp,classpath,outputConsumer);
          CLASS_FINDER.set(context,finder);
        }
      }
      final ClassWriter writer=new InstrumenterClassWriter(getAsmClassWriterFlags(version),finder);
      final BinaryContent instrumented=instrument(context,compiledClass,reader,writer,finder);
      if (instrumented != null) {
        compiledClass.setContent(instrumented);
        exitCode=ExitCode.OK;
      }
    }
  }
  finally {
    if (shouldShowProgress) {
      context.processMessage(new ProgressMessage(""));
    }
  }
  return exitCode;
}
