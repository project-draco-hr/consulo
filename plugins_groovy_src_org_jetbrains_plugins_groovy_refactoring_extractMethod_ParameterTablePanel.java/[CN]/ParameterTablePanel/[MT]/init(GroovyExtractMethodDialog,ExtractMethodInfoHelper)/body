{
  setBorder(IdeBorderFactory.createTitledBorder(GroovyRefactoringBundle.message("parameters.border.title")));
  myDialog=dialog;
  myProject=helper.getProject();
  myParameterInfos=helper.getParameterInfos();
  myTableModel=new MyTableModel();
  myTable=new Table(myTableModel);
  DefaultCellEditor defaultEditor=(DefaultCellEditor)myTable.getDefaultEditor(Object.class);
  defaultEditor.setClickCountToStart(1);
  myTable.setTableHeader(null);
  myTable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myTable.getColumnModel().getColumn(MyTableModel.CHECKMARK_COLUMN).setCellRenderer(new CheckBoxTableCellRenderer());
  myTable.getColumnModel().getColumn(MyTableModel.CHECKMARK_COLUMN).setMaxWidth(new JCheckBox().getPreferredSize().width);
  myTable.getColumnModel().getColumn(MyTableModel.PARAMETER_NAME_COLUMN).setCellRenderer(new DefaultTableCellRenderer(){
    public Component getTableCellRendererComponent(    JTable table,    Object value,    boolean isSelected,    boolean hasFocus,    int row,    int column){
      super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
      ParameterInfo info=myParameterInfos[row];
      setText(info.getName());
      return this;
    }
  }
);
  PsiManager manager=PsiManager.getInstance(myProject);
  GlobalSearchScope scope=GlobalSearchScope.allScope(myProject);
  myParameterTypeSelectors=new TypeSelector[myParameterInfos.length];
  for (int i=0; i < myParameterTypeSelectors.length; i++) {
    PsiType type=myParameterInfos[i].getType();
    myParameterTypeSelectors[i]=new TypeSelector(type != null ? type : PsiType.getJavaLangObject(manager,scope),myProject);
  }
  myTypeRendererCombo=new JComboBox(myParameterInfos);
  myTypeRendererCombo.setOpaque(true);
  myTypeRendererCombo.setBorder(null);
  myTypeRendererCombo.setRenderer(new DefaultListCellRenderer(){
    public Component getListCellRendererComponent(    final JList list,    final Object value,    final int index,    final boolean isSelected,    final boolean cellHasFocus){
      PsiType type=((ParameterInfo)value).getType();
      PsiPrimitiveType unboxed=PsiPrimitiveType.getUnboxedType(type);
      type=unboxed != null ? unboxed : type;
      setText(type != null ? type.getPresentableText() : "");
      return this;
    }
  }
);
  myTable.getColumnModel().getColumn(MyTableModel.PARAMETER_TYPE_COLUMN).setCellEditor(new AbstractTableCellEditor(){
    TypeSelector myCurrentSelector;
    public Object getCellEditorValue(){
      return myCurrentSelector.getSelectedType();
    }
    public Component getTableCellEditorComponent(    final JTable table,    final Object value,    final boolean isSelected,    final int row,    final int column){
      myCurrentSelector=myParameterTypeSelectors[row];
      return myCurrentSelector.getComponent();
    }
  }
);
  myTable.getColumnModel().getColumn(MyTableModel.PARAMETER_TYPE_COLUMN).setCellRenderer(new DefaultTableCellRenderer(){
    public Component getTableCellRendererComponent(    JTable table,    Object value,    boolean isSelected,    boolean hasFocus,    int row,    int column){
      if (myParameterTypeSelectors[row].getComponent() instanceof JComboBox) {
        myTypeRendererCombo.setSelectedIndex(row);
        return myTypeRendererCombo;
      }
      super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
      ParameterInfo info=myParameterInfos[row];
      PsiType type=info.getType();
      PsiPrimitiveType unboxed=PsiPrimitiveType.getUnboxedType(type);
      type=unboxed != null ? unboxed : type;
      setText(type != null ? type.getPresentableText() : "");
      return this;
    }
  }
);
  myTable.setPreferredScrollableViewportSize(new Dimension(250,myTable.getRowHeight() * 5));
  myTable.setShowGrid(false);
  myTable.setIntercellSpacing(new Dimension(0,0));
  @NonNls final InputMap inputMap=myTable.getInputMap();
  inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_SPACE,0),"enable_disable");
  @NonNls final ActionMap actionMap=myTable.getActionMap();
  actionMap.put("enable_disable",new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      if (myTable.isEditing())       return;
      int[] rows=myTable.getSelectedRows();
      if (rows.length > 0) {
        boolean valueToBeSet=false;
        for (        int row : rows) {
          if (!myParameterInfos[row].passAsParameter()) {
            valueToBeSet=true;
            break;
          }
        }
        for (        int row : rows) {
          myParameterInfos[row].setPassAsParameter(valueToBeSet);
        }
        myTableModel.fireTableRowsUpdated(rows[0],rows[rows.length - 1]);
        TableUtil.selectRows(myTable,rows);
      }
    }
  }
);
  inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_F2,0),"edit_parameter_name");
  actionMap.put("edit_parameter_name",new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      if (!myTable.isEditing()) {
        int row=myTable.getSelectedRow();
        if (row >= 0 && row < myTableModel.getRowCount()) {
          TableUtil.editCellAt(myTable,row,MyTableModel.PARAMETER_NAME_COLUMN);
        }
      }
    }
  }
);
  inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0),"invokeImpl");
  actionMap.put("invokeImpl",new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      TableCellEditor editor=myTable.getCellEditor();
      if (editor != null) {
        editor.stopCellEditing();
      }
 else {
        doEnterAction();
      }
    }
  }
);
  actionMap.put("doCancel",new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      TableCellEditor editor=myTable.getCellEditor();
      if (editor != null) {
        editor.stopCellEditing();
      }
 else {
        doCancelAction();
      }
    }
  }
);
  JPanel listPanel=new JPanel(new BorderLayout());
  JScrollPane scrollPane=ScrollPaneFactory.createScrollPane(myTable);
  listPanel.add(scrollPane,BorderLayout.CENTER);
  listPanel.setBorder(BorderFactory.createEmptyBorder(4,4,4,4));
  add(listPanel,BorderLayout.CENTER);
  JPanel buttonsPanel=new JPanel();
  buttonsPanel.setBorder(BorderFactory.createEmptyBorder(4,4,4,4));
  add(buttonsPanel,BorderLayout.EAST);
  buttonsPanel.setLayout(new GridBagLayout());
  GridBagConstraints gbConstraints=new GridBagConstraints();
  gbConstraints.gridwidth=GridBagConstraints.REMAINDER;
  gbConstraints.fill=GridBagConstraints.HORIZONTAL;
  gbConstraints.insets=new Insets(2,4,2,4);
  myUpButton=new JButton();
  myUpButton.setText(GroovyRefactoringBundle.message("row.move.up"));
  myUpButton.setDefaultCapable(false);
  myUpButton.setMnemonic(KeyEvent.VK_U);
  buttonsPanel.add(myUpButton,gbConstraints);
  myDownButton=new JButton();
  myDownButton.setText(GroovyRefactoringBundle.message("row.move.down"));
  myDownButton.setMnemonic(KeyEvent.VK_D);
  myDownButton.setDefaultCapable(false);
  buttonsPanel.add(myDownButton,gbConstraints);
  gbConstraints.weighty=1;
  buttonsPanel.add(new JPanel(),gbConstraints);
  myUpButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (myTable.isEditing()) {
        final boolean isStopped=myTable.getCellEditor().stopCellEditing();
        if (!isStopped)         return;
      }
      moveSelectedItem(-1);
      updateSignature();
      myTable.requestFocus();
    }
  }
);
  myDownButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (myTable.isEditing()) {
        final boolean isStopped=myTable.getCellEditor().stopCellEditing();
        if (!isStopped)         return;
      }
      moveSelectedItem(+1);
      updateSignature();
      myTable.requestFocus();
    }
  }
);
  myTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      updateMoveButtons();
    }
  }
);
  if (myParameterInfos.length <= 1) {
    myUpButton.setEnabled(false);
    myDownButton.setEnabled(false);
  }
 else {
    myTable.getSelectionModel().setSelectionInterval(0,0);
  }
  updateMoveButtons();
}
