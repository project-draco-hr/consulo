{
  final XmlAttributeValue xmlAttributeValue=(XmlAttributeValue)element;
  final XmlTag currentTag=PsiTreeUtil.getParentOfType(xmlAttributeValue,XmlTag.class);
  final String value=xmlAttributeValue.getValue();
  final boolean startsWithDollar=value.startsWith("$");
  final String referencesId=startsWithDollar ? value.substring(1) : value;
  final Map<String,XmlAttributeValue> fileIds=new HashMap<String,XmlAttributeValue>();
  xmlAttributeValue.getContainingFile().accept(new XmlRecursiveElementVisitor(){
    @Override public void visitXmlTag(    XmlTag tag){
      super.visitXmlTag(tag);
      if (currentTag != tag) {
        final XmlAttribute attribute=tag.getAttribute(FxmlConstants.FX_ID);
        if (attribute != null) {
          fileIds.put(attribute.getValue(),attribute.getValueElement());
        }
      }
    }
  }
);
  return new PsiReference[]{new PsiReferenceBase<XmlAttributeValue>(xmlAttributeValue){
    @Override public TextRange getRangeInElement(){
      final TextRange rangeInElement=super.getRangeInElement();
      return startsWithDollar ? new TextRange(rangeInElement.getStartOffset() + 1,rangeInElement.getEndOffset()) : rangeInElement;
    }
    @Nullable @Override public PsiElement resolve(){
      return fileIds.get(referencesId);
    }
    @NotNull @Override public Object[] getVariants(){
      return ArrayUtil.toStringArray(fileIds.keySet());
    }
  }
};
}
