{
  final String branchUrl=prepareBranchesStructure();
  final SubTree tree=new SubTree(myWorkingCopyDir);
  runInAndVerifyIgnoreOutput("switch",branchUrl + "/root/source/s1.txt",tree.myS1File.getPath());
  runInAndVerifyIgnoreOutput("switch",branchUrl + "/root/target",tree.myTargetDir.getPath());
  final ChangeListManager changeListManager=ChangeListManager.getInstance(myProject);
  VcsDirtyScopeManager.getInstance(myProject).markEverythingDirty();
  changeListManager.ensureUpToDate(false);
  final Runnable check=new Runnable(){
    @Override public void run(){
      Assert.assertEquals(FileStatus.SWITCHED,changeListManager.getStatus(tree.myS1File));
      Assert.assertEquals(FileStatus.NOT_CHANGED,changeListManager.getStatus(tree.myS2File));
      Assert.assertEquals(FileStatus.NOT_CHANGED,changeListManager.getStatus(tree.mySourceDir));
      Assert.assertEquals(FileStatus.SWITCHED,changeListManager.getStatus(tree.myTargetDir));
      Assert.assertEquals(FileStatus.SWITCHED,changeListManager.getStatus(tree.myTargetFiles.get(1)));
    }
  }
;
  myScheme.doTest(check);
  changeListManager.ensureUpToDate(false);
  check.run();
  editFileInCommand(myProject,tree.myS1File,"1234543534543 3543 ");
  VcsDirtyScopeManager.getInstance(myProject).markEverythingDirty();
  changeListManager.ensureUpToDate(false);
  final Runnable check2=new Runnable(){
    @Override public void run(){
      Assert.assertEquals(FileStatus.MODIFIED,changeListManager.getStatus(tree.myS1File));
      Assert.assertEquals(FileStatus.NOT_CHANGED,changeListManager.getStatus(tree.myS2File));
      Assert.assertEquals(FileStatus.NOT_CHANGED,changeListManager.getStatus(tree.mySourceDir));
      Assert.assertEquals(FileStatus.SWITCHED,changeListManager.getStatus(tree.myTargetDir));
      Assert.assertEquals(FileStatus.SWITCHED,changeListManager.getStatus(tree.myTargetFiles.get(1)));
    }
  }
;
  myScheme.doTest(check2);
  changeListManager.ensureUpToDate(false);
  check2.run();
}
