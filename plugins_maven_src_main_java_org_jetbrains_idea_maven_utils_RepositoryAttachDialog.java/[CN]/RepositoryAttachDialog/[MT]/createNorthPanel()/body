{
  JPanel panel=new JPanel(new BorderLayout(15,0));
{
    JLabel iconLabel=new JLabel(Messages.getQuestionIcon());
    Container container=new Container();
    container.setLayout(new BorderLayout());
    container.add(iconLabel,BorderLayout.NORTH);
    panel.add(container,BorderLayout.WEST);
  }
  final ArrayList<JComponent> gridComponents=new ArrayList<JComponent>();
{
    JPanel caption=new JPanel(new BorderLayout(15,0));
    JLabel textLabel=new JLabel("Enter keywords to search by, class name or Maven coordinates: \ni.e. 'spring', 'jsf' or 'org.hibernate:hibernate-core:3.3.0.GA'");
    textLabel.setBorder(BorderFactory.createEmptyBorder(0,0,5,0));
    textLabel.setUI(new MultiLineLabelUI());
    caption.add(textLabel,BorderLayout.WEST);
    final JPanel infoPanel=new JPanel(new BorderLayout());
    infoPanel.add(myInfoLabel,BorderLayout.WEST);
    infoPanel.add(myProgressIcon,BorderLayout.EAST);
    caption.add(infoPanel,BorderLayout.EAST);
    gridComponents.add(caption);
    final ComponentWithBrowseButton<JComboBox> coordComponent=new ComponentWithBrowseButton<JComboBox>(myCombobox,new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        performSearch();
      }
    }
);
    coordComponent.setButtonIcon(Icons.SYNCHRONIZE_ICON);
    gridComponents.add(coordComponent);
    final LabeledComponent<JComboBox> repository=new LabeledComponent<JComboBox>();
    repository.getLabel().setText("Repository URL to Download From:");
    myRepositories.put(DEFAULT_REPOSITORY,null);
    for (    MavenRepositoryInfo repo : RepositoryAttachHandler.getDefaultRepositories()) {
      myRepositories.put(repo.getUrl(),repo);
    }
    myRepositoryUrl=new JComboBox(new CollectionComboBoxModel(new ArrayList<String>(myRepositories.keySet()),DEFAULT_REPOSITORY));
    myRepositoryUrl.setEditable(true);
    repository.setComponent(myRepositoryUrl);
    gridComponents.add(repository);
    if (!myManaged) {
      myDirectoryField=new TextFieldWithBrowseButton();
      if (myProject != null && !myProject.isDefault()) {
        final VirtualFile baseDir=myProject.getBaseDir();
        if (baseDir != null) {
          myDirectoryField.setText(FileUtil.toSystemDependentName(baseDir.getPath() + "/lib"));
        }
      }
      myDirectoryField.addBrowseFolderListener(ProjectBundle.message("file.chooser.directory.for.downloaded.libraries.title"),ProjectBundle.message("file.chooser.directory.for.downloaded.libraries.description"),null,FileChooserDescriptorFactory.createSingleFolderDescriptor());
      final LabeledComponent<TextFieldWithBrowseButton> dirComponent=new LabeledComponent<TextFieldWithBrowseButton>();
      dirComponent.getLabel().setText("Store Library Files in: ");
      dirComponent.setComponent(myDirectoryField);
      gridComponents.add(dirComponent);
    }
  }
  JPanel messagePanel=new JPanel(new GridLayoutManager(gridComponents.size(),1));
  for (int i=0, gridComponentsSize=gridComponents.size(); i < gridComponentsSize; i++) {
    messagePanel.add(gridComponents.get(i),new GridConstraints(i,0,1,1,GridConstraints.ANCHOR_NORTHWEST,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW | GridConstraints.SIZEPOLICY_CAN_SHRINK,0,null,null,null));
  }
  panel.add(messagePanel,BorderLayout.CENTER);
  return panel;
}
