{
  final String text=getCoordinateText();
  if (myCoordinates.contains(text))   return false;
  if (myProgressIcon.isVisible())   return false;
  myProgressIcon.setVisible(true);
  myProgressIcon.resume();
  RepositoryAttachHandler.searchArtifacts(myProject,text,new PairProcessor<Collection<ArtifactType>,Boolean>(){
    public boolean process(    Collection<ArtifactType> artifactTypes,    Boolean tooMany){
      if (myProgressIcon.isDisposed())       return true;
      myProgressIcon.suspend();
      myProgressIcon.setVisible(false);
      final int prevSize=myCoordinates.size();
      for (      ArtifactType artifactType : artifactTypes) {
        myCoordinates.put(artifactType.getGroupId() + ":" + artifactType.getArtifactId()+ ":"+ artifactType.getVersion(),artifactType);
      }
      myRepositoryUrl.setModel(new CollectionComboBoxModel(new ArrayList<String>(myRepositories.keySet()),myRepositoryUrl.getEditor().getItem()));
      if (Boolean.TRUE.equals(tooMany)) {
        final Point point=new Point(myCombobox.getWidth() / 2,0);
        JBPopupFactory.getInstance().createHtmlTextBalloonBuilder("Too many results found, please refine your query.",MessageType.WARNING,null).setHideOnClickOutside(true).createBalloon().show(new RelativePoint(myCombobox,point),Balloon.Position.above);
      }
      updateComboboxSelection(prevSize != myCoordinates.size());
      return true;
    }
  }
,new Processor<Collection<RepositoryType>>(){
    public boolean process(    Collection<RepositoryType> repositoryTypes){
      for (      RepositoryType repositoryType : repositoryTypes) {
        if (!myRepositories.containsKey(repositoryType.getContentResourceURI())) {
          myRepositories.put(repositoryType.getContentResourceURI(),new MavenFacade.Repository(repositoryType.getId(),repositoryType.getContentResourceURI(),"default"));
        }
      }
      return true;
    }
  }
);
  return true;
}
