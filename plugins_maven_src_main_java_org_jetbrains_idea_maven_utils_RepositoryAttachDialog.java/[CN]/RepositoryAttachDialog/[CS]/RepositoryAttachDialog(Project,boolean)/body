{
  super(project,true);
  myProject=project;
  myManaged=managed;
  myProgressIcon.suspend();
  myCaptionLabel.setText("Enter keywords to search by, class name or Maven coordinates,\n" + "i.e. 'springframework', 'Logger' or 'org.hibernate:hibernate-core:3.5.0.GA':");
  myCaptionLabel.setBorder(BorderFactory.createEmptyBorder(0,0,5,0));
  myCaptionLabel.setUI(new MultiLineLabelUI());
  myInfoLabel.setUI(new MultiLineLabelUI());
  myInfoLabel.setBorder(BorderFactory.createEmptyBorder(0,0,5,0));
  myInfoLabel.setPreferredSize(new Dimension(myInfoLabel.getFontMetrics(myInfoLabel.getFont()).stringWidth("Showing: 1000"),myInfoLabel.getPreferredSize().height));
  myComboComponent.setButtonIcon(IconLoader.findIcon("/actions/menu-find.png"));
  myComboComponent.getButton().addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      performSearch();
    }
  }
);
  myCombobox=myComboComponent.getComboBox();
  myCombobox.setModel(new CollectionComboBoxModel(myShownItems,null));
  myCombobox.setEditable(true);
  final JTextField textField=(JTextField)myCombobox.getEditor().getEditorComponent();
  textField.setColumns(50);
  textField.getDocument().addDocumentListener(new DocumentAdapter(){
    @Override protected void textChanged(    DocumentEvent e){
      ApplicationManager.getApplication().invokeLater(new Runnable(){
        public void run(){
          if (myProgressIcon.isDisposed())           return;
          updateComboboxSelection(false);
        }
      }
);
    }
  }
);
  textField.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      final boolean popupVisible=myCombobox.isPopupVisible();
      if (e.getKeyCode() == KeyEvent.VK_ENTER && e.getModifiers() == 0) {
        if (popupVisible && !myCoordinates.isEmpty()) {
          final String item=(String)myCombobox.getSelectedItem();
          if (StringUtil.isNotEmpty(item)) {
            ((JTextField)myCombobox.getEditor().getEditorComponent()).setText(item);
          }
        }
 else         if (!popupVisible || myCoordinates.isEmpty()) {
          if (performSearch()) {
            e.consume();
          }
        }
      }
    }
  }
);
  final PropertiesComponent storage=PropertiesComponent.getInstance(myProject);
  final boolean pathValueSet=storage.isValueSet(PROPERTY_DOWNLOAD_TO_PATH);
  if (pathValueSet) {
    myDirectoryField.setText(storage.getValue(PROPERTY_DOWNLOAD_TO_PATH));
  }
  myJavaDocCheckBox.setSelected(storage.isValueSet(PROPERTY_ATTACH_JAVADOC) && storage.isTrueValue(PROPERTY_ATTACH_JAVADOC));
  mySourcesCheckBox.setSelected(storage.isValueSet(PROPERTY_ATTACH_SOURCES) && storage.isTrueValue(PROPERTY_ATTACH_SOURCES));
  if (!myManaged) {
    if (!pathValueSet && myProject != null && !myProject.isDefault()) {
      final VirtualFile baseDir=myProject.getBaseDir();
      if (baseDir != null) {
        myDirectoryField.setText(FileUtil.toSystemDependentName(baseDir.getPath() + "/lib"));
      }
    }
    final FileChooserDescriptor descriptor=FileChooserDescriptorFactory.createSingleFolderDescriptor();
    descriptor.putUserData(FileChooserDialogImpl.PREFER_LAST_OVER_TO_SELECT,Boolean.TRUE);
    myDirectoryField.addBrowseFolderListener(ProjectBundle.message("file.chooser.directory.for.downloaded.libraries.title"),ProjectBundle.message("file.chooser.directory.for.downloaded.libraries.description"),null,descriptor);
  }
 else {
    myDirectoryField.setVisible(false);
  }
  updateInfoLabel();
  init();
}
