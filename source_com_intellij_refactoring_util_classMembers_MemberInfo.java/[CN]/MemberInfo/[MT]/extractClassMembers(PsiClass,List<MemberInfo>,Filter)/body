{
  PsiClass[] interfaces=subclass.getInterfaces();
  for (int i=0; i < interfaces.length; i++) {
    PsiClass anInterface=interfaces[i];
    if (filter.includeMember(anInterface)) {
      result.add(new MemberInfo(anInterface,true));
    }
  }
  PsiClass[] innerClasses=subclass.getInnerClasses();
  for (int idx=0; idx < innerClasses.length; idx++) {
    if (filter.includeMember(innerClasses[idx])) {
      result.add(new MemberInfo(innerClasses[idx]));
    }
  }
  PsiMethod[] methods=subclass.getMethods();
  for (int idx=0; idx < methods.length; idx++) {
    PsiMethod method=methods[idx];
    if (!method.isConstructor() && filter.includeMember(method)) {
      result.add(new MemberInfo(method));
    }
  }
  PsiField[] fields=subclass.getFields();
  for (int idx=0; idx < fields.length; idx++) {
    final PsiField field=fields[idx];
    if (filter.includeMember(field)) {
      result.add(new MemberInfo(field));
    }
  }
}
