{
  countFiles(project);
  Runnable buildingRunnable=new Runnable(){
    public void run(){
      final PsiManager psiManager=PsiManager.getInstance(project);
      myFileIndex.iterateContent(new ContentIterator(){
        public boolean processFile(        VirtualFile fileOrDir){
          if (!fileOrDir.isDirectory()) {
            if (myFileIndex.isContentJavaSourceFile(fileOrDir)) {
              buildFileNode(psiManager.findFile(fileOrDir));
            }
          }
          return true;
        }
      }
);
      VirtualFile[] roots=getLibraryRoots(project);
      for (int i=0; i < roots.length; i++) {
        processFilesRecursively(roots[i],psiManager);
      }
    }
  }
;
  if (showProgress) {
    ApplicationManager.getApplication().runProcessWithProgressSynchronously(buildingRunnable,"Scanning Packages",false,project);
  }
 else {
    buildingRunnable.run();
  }
  TreeUtil.sort(myRoot,new DependecyNodeComparator());
  return new TreeModel(myRoot,myTotalFileCount,myMarkedFileCount);
}
