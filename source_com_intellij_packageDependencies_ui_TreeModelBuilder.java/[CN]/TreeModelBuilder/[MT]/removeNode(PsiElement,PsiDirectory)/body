{
  Module module=myFileIndex.getModuleForFile(parent.getVirtualFile());
  DefaultMutableTreeNode dirNode=getModuleDirNode(parent,module,ScopeType.SOURCE,null);
  if (dirNode == null)   return null;
  final PackageDependenciesNode[] classOrDirNodes=findNodeForPsiElement((PackageDependenciesNode)dirNode,element);
  if (classOrDirNodes != null) {
    for (    PackageDependenciesNode classNode : classOrDirNodes) {
      classNode.removeFromParent();
    }
  }
  DefaultMutableTreeNode node=dirNode;
  DefaultMutableTreeNode parentNode=(DefaultMutableTreeNode)dirNode.getParent();
  while (node != null && node.getChildCount() == 0) {
    PsiDirectory directory=parent.getParentDirectory();
    node.removeFromParent();
    getMap(myModuleDirNodes,ScopeType.SOURCE).put(parent,null);
    node=getMap(myModuleDirNodes,ScopeType.SOURCE).get(directory);
    parent=directory;
  }
  if (myCompactEmptyMiddlePackages && parentNode instanceof DirectoryNode && parentNode.getChildCount() == 1) {
    final TreeNode treeNode=parentNode.getChildAt(0);
    if (treeNode instanceof DirectoryNode) {
      parentNode.removeAllChildren();
      for (int i=treeNode.getChildCount() - 1; i >= 0; i--) {
        parentNode.add((MutableTreeNode)treeNode.getChildAt(i));
      }
      ((DirectoryNode)parentNode).setCompactedDirNode((DirectoryNode)treeNode);
    }
  }
  if (parentNode instanceof ModuleNode && parentNode.getChildCount() == 0) {
    final TreeNode treeNode=parentNode.getParent();
    parentNode.removeFromParent();
    getMap(myModuleNodes,ScopeType.SOURCE).put(((ModuleNode)parentNode).getModule(),null);
    parentNode=(DefaultMutableTreeNode)treeNode;
  }
  if (parentNode instanceof ModuleGroupNode && parentNode.getChildCount() == 0) {
    final TreeNode treeNode=parentNode.getParent();
    parentNode.removeFromParent();
    getMap(myModuleGroupNodes,ScopeType.SOURCE).put(((ModuleGroupNode)parentNode).getModuleGroupName(),null);
    parentNode=(DefaultMutableTreeNode)treeNode;
  }
  return parentNode;
}
