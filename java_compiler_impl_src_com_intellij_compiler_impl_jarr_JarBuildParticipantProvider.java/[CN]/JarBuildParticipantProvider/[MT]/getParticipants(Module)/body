{
  if (!Registry.is("jar.build"))   return Collections.emptySet();
  return Collections.singleton(new BuildParticipant(){
    @Override public Artifact createArtifact(    CompileContext context){
      PackagingElementFactory factory=PackagingElementFactory.getInstance();
      ArtifactRootElement<?> root=factory.createArtifactRootElement();
      CompositePackagingElement<?> classesJar=factory.createArchive(module.getName() + ".jar");
      classesJar.addOrFindChild(factory.createModuleOutput(module));
      String s=CompilerModuleExtension.getInstance(module).getCompilerOutputPathForTests().getPath();
      classesJar.addOrFindChild(factory.createDirectoryCopyWithParentDirectories(s,""));
      root.addOrFindChild(classesJar);
      Project project=module.getProject();
      VirtualFile output=CompilerProjectExtension.getInstance(project).getCompilerOutput();
      String path=output == null ? null : output.getPath() + "/jars";
      return path == null ? null : new ArtifactImpl(module.getName(),PlainArtifactType.getInstance(),false,root,path);
    }
  }
);
}
