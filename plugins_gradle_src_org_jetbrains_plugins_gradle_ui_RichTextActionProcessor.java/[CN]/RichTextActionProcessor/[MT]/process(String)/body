{
  final ActionManager actionManager=ActionManager.getInstance();
  final AnAction action=actionManager.getAction(s);
  if (action == null) {
    return null;
  }
  final Presentation presentation=action.getTemplatePresentation();
  if (presentation == null) {
    return null;
  }
  if (presentation.getIcon() != null) {
    return new ActionButton(action,presentation.clone(),GradleConstants.TOOL_WINDOW_TOOLBAR_PLACE,new Dimension(0,0)){
      @Override protected void paintButtonLook(      Graphics g){
        ActionButtonLook look=getButtonLook();
        look.paintBackground(g,this);
        look.paintIcon(g,this,getIcon());
      }
    }
;
  }
  final String text=action.getTemplatePresentation().getText();
  JLabel result=new JLabel(text){
    public void paint(    Graphics g){
      super.paint(g);
      final int y=g.getClipBounds().height - getFontMetrics(getFont()).getDescent() + 1;
      final int width=getFontMetrics(getFont()).stringWidth(getText());
      g.drawLine(0,y,width,y);
    }
  }
;
  result.setForeground(UIUtil.getInactiveTextColor().darker().darker().darker());
  result.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      final AsyncResult<DataContext> callback=DataManager.getInstance().getDataContextFromFocus();
      final DataContext context=callback.getResult();
      if (context == null) {
        return;
      }
      final Presentation presentation=new PresentationFactory().getPresentation(action);
      action.actionPerformed(new AnActionEvent(e,context,GradleConstants.TOOL_WINDOW_TOOLBAR_PLACE,presentation,ActionManager.getInstance(),e.getModifiers()));
    }
  }
);
  return result;
}
