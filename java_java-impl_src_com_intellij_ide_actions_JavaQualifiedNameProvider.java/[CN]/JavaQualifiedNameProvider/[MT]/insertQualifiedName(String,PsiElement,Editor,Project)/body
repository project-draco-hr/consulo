{
  final PsiDocumentManager documentManager=PsiDocumentManager.getInstance(project);
  Document document=editor.getDocument();
  final PsiFile file=documentManager.getPsiFile(document);
  final int offset=editor.getCaretModel().getOffset();
  PsiElement elementAtCaret=file.findElementAt(offset);
  fqn=fqn.replace('#','.');
  String toInsert;
  String suffix="";
  if (!(element instanceof PsiMember)) {
    toInsert=fqn;
  }
 else   if (elementAtCaret != null && (element instanceof PsiMethod || element instanceof PsiField) && PsiUtil.isInsideJavadocComment(elementAtCaret)) {
    PsiMember member=(PsiMember)element;
    PsiClass aClass=member.getContainingClass();
    String className=aClass == null ? "" : aClass.getQualifiedName();
    toInsert=className == null ? "" : className;
    if (toInsert.length() != 0)     toInsert+="#";
    toInsert+=member.getName();
    if (member instanceof PsiMethod) {
      toInsert+="(";
      PsiParameter[] parameters=((PsiMethod)member).getParameterList().getParameters();
      for (int i=0; i < parameters.length; i++) {
        PsiParameter parameter=parameters[i];
        if (i != 0)         toInsert+=", ";
        toInsert+=parameter.getType().getCanonicalText();
      }
      toInsert+=")";
    }
  }
 else   if (elementAtCaret == null || PsiTreeUtil.getNonStrictParentOfType(elementAtCaret,PsiLiteralExpression.class,PsiComment.class) != null || PsiTreeUtil.getNonStrictParentOfType(elementAtCaret,PsiJavaFile.class) == null) {
    toInsert=fqn;
  }
 else {
    PsiMember targetElement=(PsiMember)element;
    toInsert=targetElement.getName();
    if (targetElement instanceof PsiMethod) {
      suffix="()";
      if (((PsiMethod)targetElement).isConstructor()) {
        targetElement=targetElement.getContainingClass();
      }
    }
 else     if (targetElement instanceof PsiClass) {
      if (isAfterNew(file,elementAtCaret)) {
        suffix="()";
      }
 else       if (toInsert != null && toInsert.length() != 0 && Character.isJavaIdentifierPart(toInsert.charAt(toInsert.length() - 1)) && Character.isJavaIdentifierPart(elementAtCaret.getText().charAt(0))) {
        suffix=" ";
      }
    }
    final PsiElementFactory factory=JavaPsiFacade.getInstance(project).getElementFactory();
    final PsiExpression expression;
    try {
      expression=factory.createExpressionFromText(toInsert + suffix,elementAtCaret);
    }
 catch (    IncorrectOperationException e) {
      LOG.error(e);
      return;
    }
    final PsiReferenceExpression referenceExpression=expression instanceof PsiMethodCallExpression ? ((PsiMethodCallExpression)expression).getMethodExpression() : expression instanceof PsiReferenceExpression ? (PsiReferenceExpression)expression : null;
    if (referenceExpression == null || !referenceExpression.isValid()) {
      toInsert=fqn;
    }
 else     if (!isReferencedTo(referenceExpression,targetElement)) {
      try {
        referenceExpression.bindToElement(targetElement);
      }
 catch (      IncorrectOperationException e) {
      }
      if (!isReferencedTo(referenceExpression,targetElement)) {
        toInsert=fqn;
      }
    }
  }
  if (toInsert == null)   toInsert="";
  document.insertString(offset,toInsert + suffix);
  documentManager.commitAllDocuments();
  int endOffset=offset + toInsert.length() + suffix.length();
  RangeMarker rangeMarker=document.createRangeMarker(endOffset,endOffset);
  elementAtCaret=file.findElementAt(offset);
  if (elementAtCaret != null && elementAtCaret.isValid()) {
    try {
      shortenReference(elementAtCaret,element);
    }
 catch (    IncorrectOperationException e) {
      LOG.error(e);
    }
  }
  CodeInsightUtilBase.forcePsiPostprocessAndRestoreElement(file);
  try {
    CodeStyleManager.getInstance(project).adjustLineIndent(file,offset);
  }
 catch (  IncorrectOperationException e) {
    LOG.error(e);
  }
  int caretOffset=rangeMarker.getEndOffset();
  if (element instanceof PsiMethod && ((PsiMethod)element).getParameterList().getParametersCount() != 0 && StringUtil.endsWithChar(suffix,')')) {
    caretOffset--;
  }
  editor.getCaretModel().moveToOffset(caretOffset);
}
