{
  final PsiElement element=usageInfo.getElement();
  if (element == null)   return;
  final PsiMember member=usageInfo.member;
  if (element instanceof GrReferenceExpression) {
    GrExpression qualifier=((GrReferenceExpression)element).getQualifier();
    PsiClass accessObjectClass=null;
    if (qualifier != null) {
      accessObjectClass=(PsiClass)PsiUtil.getAccessObjectClass(qualifier).getElement();
    }
    if (!JavaResolveUtil.isAccessible(member,targetClass,modifierListCopy,element,accessObjectClass,null)) {
      String visibility=newVisibility != null ? newVisibility : VisibilityUtil.getVisibilityStringToDisplay(member);
      String message=RefactoringBundle.message("0.with.1.visibility.is.not.accessible.from.2",RefactoringUIUtil.getDescription(member,false),visibility,RefactoringUIUtil.getDescription(ConflictsUtil.getContainer(element),true));
      conflicts.putValue(member,CommonRefactoringUtil.capitalize(message));
    }
  }
}
