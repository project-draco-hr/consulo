{
  if (element instanceof GrVariableDeclaration) {
    GrVariable[] variables=((GrVariableDeclaration)element).getVariables();
    ArrayList<TypeConstraint> types=new ArrayList<TypeConstraint>();
    for (    GrVariable variable : variables) {
      if (variable.getInitializerGroovy() != null) {
        PsiType type=variable.getInitializerGroovy().getType();
        types.add(SupertypeConstraint.create(type));
      }
    }
    TemplateBuilderImpl builder=new TemplateBuilderImpl(element);
    PsiManager manager=element.getManager();
    GrModifierList modifierList=((GrVariableDeclaration)element).getModifierList();
    if (modifierList.hasModifierProperty(GrModifier.DEF) && modifierList.getModifiers().length == 1) {
      PsiElement def=PsiUtil.findModifierInList(modifierList,GrModifier.DEF);
      builder.replaceElement(def,new ChooseTypeExpression(types.toArray(new TypeConstraint[types.size()]),manager));
    }
 else {
      ((GrVariableDeclaration)element).setType(TypesUtil.createType("Abc",element));
      GrTypeElement typeElement=((GrVariableDeclaration)element).getTypeElementGroovy();
      builder.replaceElement(typeElement,new ChooseTypeExpression(types.toArray(new TypeConstraint[types.size()]),manager));
    }
    final PsiElement afterPostprocess=CodeInsightUtilBase.forcePsiPostprocessAndRestoreElement(element);
    final Template template=builder.buildTemplate();
    TextRange range=afterPostprocess.getTextRange();
    Document document=editor.getDocument();
    document.deleteString(range.getStartOffset(),range.getEndOffset());
    TemplateManager templateManager=TemplateManager.getInstance(project);
    templateManager.startTemplate(editor,template);
  }
}
